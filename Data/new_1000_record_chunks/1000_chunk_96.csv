record_number,buggy_code,fixed_code
95001,"private static void parseMetadata(XmlPullParser parser,String metadataType,Map<String,Parameter> parameters) throws XmlPullParserException, IOException {
  boolean parsing=false;
  int eventType=parser.getEventType();
  while (eventType != XmlPullParser.END_DOCUMENT) {
switch (eventType) {
case XmlPullParser.START_TAG:
{
        String name=parser.getName();
        if (metadataType.equals(name)) {
          parsing=true;
        }
 else         if (parsing) {
          Parameter parameter=parameters.get(name);
          if (parameter != null)           addMetaDataProperty(parameter,name,parser.nextText());
        }
        break;
      }
case XmlPullParser.END_TAG:
{
      String name=parser.getName();
      if (metadataType.equals(name)) {
        return;
      }
      break;
    }
}
eventType=parser.next();
}
}","private static void parseMetadata(XmlPullParser parser,String metadataType,Map<String,Parameter> parameters) throws XmlPullParserException, IOException {
  boolean parsing=false;
  Parameter parameter=null;
  int eventType=parser.getEventType();
  while (eventType != XmlPullParser.END_DOCUMENT) {
switch (eventType) {
case XmlPullParser.START_TAG:
{
        String name=parser.getName();
        if (metadataType.equals(name)) {
          parsing=true;
        }
 else         if (parsing) {
          if (parameter == null) {
            parameter=parameters.get(name);
          }
 else {
            addMetaDataProperty(parameter,name,parser.nextText());
          }
        }
        break;
      }
case XmlPullParser.END_TAG:
{
      String name=parser.getName();
      if (metadataType.equals(name)) {
        return;
      }
 else       if (parameter != null) {
        parameter=null;
      }
      break;
    }
}
eventType=parser.next();
}
}"
95002,"@Override public String toString(){
  return ""String_Node_Str"" + ""String_Node_Str"" + connectionType + ""String_Node_Str""+ paramsBundle+ '}';
}","@Override public String toString(){
  String toString=""String_Node_Str"" + ""String_Node_Str"" + connectionType + ""String_Node_Str"";
  if (paramsBundle != null && !paramsBundle.isEmpty()) {
    boolean isFirst=true;
    for (    String key : paramsBundle.keySet()) {
      if (isFirst)       isFirst=false;
 else       toString+=""String_Node_Str"";
      toString+=key + ""String_Node_Str"" + paramsBundle.get(key);
    }
  }
  toString+=""String_Node_Str"";
  return toString;
}"
95003,"@Override public StructureScanner updateStructureScanner(StructureScanner item) throws RemoteException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public StructureScanner updateStructureScanner(StructureScanner item) throws RemoteException {
  org.droidplanner.core.mission.Mission droneMission=getDroneMgr().getDrone().getMission();
  org.droidplanner.core.mission.waypoints.StructureScanner updatedScan=(org.droidplanner.core.mission.waypoints.StructureScanner)ProxyUtils.getMissionItem(droneMission,item);
  StructureScanner proxyScanner=(StructureScanner)ProxyUtils.getProxyMissionItem(updatedScan);
  return proxyScanner;
}"
95004,"public static org.droidplanner.core.mission.MissionItem getMissionItem(Mission mission,MissionItem proxyItem){
  if (proxyItem == null)   return null;
  org.droidplanner.core.mission.MissionItem missionItem;
switch (proxyItem.getType()) {
case CAMERA_TRIGGER:
{
      CameraTrigger proxy=(CameraTrigger)proxyItem;
      org.droidplanner.core.mission.commands.CameraTrigger temp=new org.droidplanner.core.mission.commands.CameraTrigger(mission,new Length(proxy.getTriggerDistance()));
      missionItem=temp;
      break;
    }
case CHANGE_SPEED:
{
    ChangeSpeed proxy=(ChangeSpeed)proxyItem;
    org.droidplanner.core.mission.commands.ChangeSpeed temp=new org.droidplanner.core.mission.commands.ChangeSpeed(mission,new Speed(proxy.getSpeed()));
    missionItem=temp;
    break;
  }
case EPM_GRIPPER:
{
  EpmGripper proxy=(EpmGripper)proxyItem;
  org.droidplanner.core.mission.commands.EpmGripper temp=new org.droidplanner.core.mission.commands.EpmGripper(mission,proxy.isRelease());
  missionItem=temp;
  break;
}
case RETURN_TO_LAUNCH:
{
ReturnToLaunch proxy=(ReturnToLaunch)proxyItem;
ReturnToHome temp=new ReturnToHome(mission);
temp.setHeight(new Altitude(proxy.getReturnAltitude()));
missionItem=temp;
break;
}
case SET_SERVO:
{
SetServo proxy=(SetServo)proxyItem;
org.droidplanner.core.mission.commands.SetServo temp=new org.droidplanner.core.mission.commands.SetServo(mission,proxy.getChannel(),proxy.getPwm());
missionItem=temp;
break;
}
case TAKEOFF:
{
Takeoff proxy=(Takeoff)proxyItem;
org.droidplanner.core.mission.commands.Takeoff temp=new org.droidplanner.core.mission.commands.Takeoff(mission,new Altitude(proxy.getTakeoffAltitude()));
missionItem=temp;
break;
}
case CIRCLE:
{
Circle proxy=(Circle)proxyItem;
org.droidplanner.core.mission.waypoints.Circle temp=new org.droidplanner.core.mission.waypoints.Circle(mission,MathUtils.latLongAltToCoord3D(proxy.getCoordinate()));
temp.setRadius(proxy.getRadius());
temp.setTurns(proxy.getTurns());
missionItem=temp;
break;
}
case LAND:
{
Land proxy=(Land)proxyItem;
org.droidplanner.core.mission.waypoints.Land temp=new org.droidplanner.core.mission.waypoints.Land(mission,MathUtils.latLongToCoord2D(proxy.getCoordinate()));
missionItem=temp;
break;
}
case REGION_OF_INTEREST:
{
RegionOfInterest proxy=(RegionOfInterest)proxyItem;
org.droidplanner.core.mission.waypoints.RegionOfInterest temp=new org.droidplanner.core.mission.waypoints.RegionOfInterest(mission,MathUtils.latLongAltToCoord3D(proxy.getCoordinate()));
missionItem=temp;
break;
}
case SPLINE_WAYPOINT:
{
SplineWaypoint proxy=(SplineWaypoint)proxyItem;
org.droidplanner.core.mission.waypoints.SplineWaypoint temp=new org.droidplanner.core.mission.waypoints.SplineWaypoint(mission,MathUtils.latLongAltToCoord3D(proxy.getCoordinate()));
temp.setDelay(proxy.getDelay());
missionItem=temp;
break;
}
case STRUCTURE_SCANNER:
{
StructureScanner proxy=(StructureScanner)proxyItem;
org.droidplanner.core.mission.waypoints.StructureScanner temp=new org.droidplanner.core.mission.waypoints.StructureScanner(mission,MathUtils.latLongAltToCoord3D(proxy.getCoordinate()));
temp.setRadius((int)proxy.getRadius());
temp.setNumberOfSteps(proxy.getStepsCount());
temp.setAltitudeStep((int)proxy.getHeightStep());
temp.enableCrossHatch(proxy.isCrossHatch());
temp.setCamera(getCameraInfo(proxy.getSurveyDetail().getCameraDetail()));
missionItem=temp;
break;
}
case WAYPOINT:
{
Waypoint proxy=(Waypoint)proxyItem;
org.droidplanner.core.mission.waypoints.Waypoint temp=new org.droidplanner.core.mission.waypoints.Waypoint(mission,MathUtils.latLongAltToCoord3D(proxy.getCoordinate()));
temp.setAcceptanceRadius(proxy.getAcceptanceRadius());
temp.setDelay(proxy.getDelay());
temp.setOrbitCCW(proxy.isOrbitCCW());
temp.setOrbitalRadius(proxy.getOrbitalRadius());
temp.setYawAngle(proxy.getYawAngle());
missionItem=temp;
break;
}
case SURVEY:
{
Survey proxy=(Survey)proxyItem;
SurveyDetail surveyDetail=proxy.getSurveyDetail();
List<Coord2D> polygonPoints=MathUtils.latLongToCoord2D(proxy.getPolygonPoints());
org.droidplanner.core.mission.survey.Survey temp=new org.droidplanner.core.mission.survey.Survey(mission,polygonPoints);
if (surveyDetail != null) {
temp.update(surveyDetail.getAngle(),new Altitude(surveyDetail.getAltitude()),surveyDetail.getOverlap(),surveyDetail.getSidelap());
CameraDetail cameraDetail=surveyDetail.getCameraDetail();
if (cameraDetail != null) temp.setCameraInfo(getCameraInfo(cameraDetail));
}
try {
temp.build();
}
 catch (Exception e) {
Log.e(TAG,e.getMessage(),e);
}
missionItem=temp;
break;
}
case YAW_CONDITION:
{
YawCondition proxy=(YawCondition)proxyItem;
ConditionYaw temp=new ConditionYaw(mission,proxy.getAngle(),proxy.isRelative());
temp.setAngularSpeed(proxy.getAngularSpeed());
missionItem=temp;
break;
}
default :
missionItem=null;
break;
}
return missionItem;
}","public static org.droidplanner.core.mission.MissionItem getMissionItem(Mission mission,MissionItem proxyItem){
  if (proxyItem == null)   return null;
  org.droidplanner.core.mission.MissionItem missionItem;
switch (proxyItem.getType()) {
case CAMERA_TRIGGER:
{
      CameraTrigger proxy=(CameraTrigger)proxyItem;
      org.droidplanner.core.mission.commands.CameraTrigger temp=new org.droidplanner.core.mission.commands.CameraTrigger(mission,new Length(proxy.getTriggerDistance()));
      missionItem=temp;
      break;
    }
case CHANGE_SPEED:
{
    ChangeSpeed proxy=(ChangeSpeed)proxyItem;
    org.droidplanner.core.mission.commands.ChangeSpeed temp=new org.droidplanner.core.mission.commands.ChangeSpeed(mission,new Speed(proxy.getSpeed()));
    missionItem=temp;
    break;
  }
case EPM_GRIPPER:
{
  EpmGripper proxy=(EpmGripper)proxyItem;
  org.droidplanner.core.mission.commands.EpmGripper temp=new org.droidplanner.core.mission.commands.EpmGripper(mission,proxy.isRelease());
  missionItem=temp;
  break;
}
case RETURN_TO_LAUNCH:
{
ReturnToLaunch proxy=(ReturnToLaunch)proxyItem;
ReturnToHome temp=new ReturnToHome(mission);
temp.setHeight(new Altitude(proxy.getReturnAltitude()));
missionItem=temp;
break;
}
case SET_SERVO:
{
SetServo proxy=(SetServo)proxyItem;
org.droidplanner.core.mission.commands.SetServo temp=new org.droidplanner.core.mission.commands.SetServo(mission,proxy.getChannel(),proxy.getPwm());
missionItem=temp;
break;
}
case TAKEOFF:
{
Takeoff proxy=(Takeoff)proxyItem;
org.droidplanner.core.mission.commands.Takeoff temp=new org.droidplanner.core.mission.commands.Takeoff(mission,new Altitude(proxy.getTakeoffAltitude()));
missionItem=temp;
break;
}
case CIRCLE:
{
Circle proxy=(Circle)proxyItem;
org.droidplanner.core.mission.waypoints.Circle temp=new org.droidplanner.core.mission.waypoints.Circle(mission,MathUtils.latLongAltToCoord3D(proxy.getCoordinate()));
temp.setRadius(proxy.getRadius());
temp.setTurns(proxy.getTurns());
missionItem=temp;
break;
}
case LAND:
{
Land proxy=(Land)proxyItem;
org.droidplanner.core.mission.waypoints.Land temp=new org.droidplanner.core.mission.waypoints.Land(mission,MathUtils.latLongToCoord2D(proxy.getCoordinate()));
missionItem=temp;
break;
}
case REGION_OF_INTEREST:
{
RegionOfInterest proxy=(RegionOfInterest)proxyItem;
org.droidplanner.core.mission.waypoints.RegionOfInterest temp=new org.droidplanner.core.mission.waypoints.RegionOfInterest(mission,MathUtils.latLongAltToCoord3D(proxy.getCoordinate()));
missionItem=temp;
break;
}
case SPLINE_WAYPOINT:
{
SplineWaypoint proxy=(SplineWaypoint)proxyItem;
org.droidplanner.core.mission.waypoints.SplineWaypoint temp=new org.droidplanner.core.mission.waypoints.SplineWaypoint(mission,MathUtils.latLongAltToCoord3D(proxy.getCoordinate()));
temp.setDelay(proxy.getDelay());
missionItem=temp;
break;
}
case STRUCTURE_SCANNER:
{
StructureScanner proxy=(StructureScanner)proxyItem;
org.droidplanner.core.mission.waypoints.StructureScanner temp=new org.droidplanner.core.mission.waypoints.StructureScanner(mission,MathUtils.latLongAltToCoord3D(proxy.getCoordinate()));
temp.setRadius((int)proxy.getRadius());
temp.setNumberOfSteps(proxy.getStepsCount());
temp.setAltitudeStep((int)proxy.getHeightStep());
temp.enableCrossHatch(proxy.isCrossHatch());
CameraDetail camDetail=proxy.getSurveyDetail().getCameraDetail();
if (camDetail != null) temp.setCamera(getCameraInfo(camDetail));
missionItem=temp;
break;
}
case WAYPOINT:
{
Waypoint proxy=(Waypoint)proxyItem;
org.droidplanner.core.mission.waypoints.Waypoint temp=new org.droidplanner.core.mission.waypoints.Waypoint(mission,MathUtils.latLongAltToCoord3D(proxy.getCoordinate()));
temp.setAcceptanceRadius(proxy.getAcceptanceRadius());
temp.setDelay(proxy.getDelay());
temp.setOrbitCCW(proxy.isOrbitCCW());
temp.setOrbitalRadius(proxy.getOrbitalRadius());
temp.setYawAngle(proxy.getYawAngle());
missionItem=temp;
break;
}
case SURVEY:
{
Survey proxy=(Survey)proxyItem;
SurveyDetail surveyDetail=proxy.getSurveyDetail();
List<Coord2D> polygonPoints=MathUtils.latLongToCoord2D(proxy.getPolygonPoints());
org.droidplanner.core.mission.survey.Survey temp=new org.droidplanner.core.mission.survey.Survey(mission,polygonPoints);
if (surveyDetail != null) {
temp.update(surveyDetail.getAngle(),new Altitude(surveyDetail.getAltitude()),surveyDetail.getOverlap(),surveyDetail.getSidelap());
CameraDetail cameraDetail=surveyDetail.getCameraDetail();
if (cameraDetail != null) temp.setCameraInfo(getCameraInfo(cameraDetail));
}
try {
temp.build();
}
 catch (Exception e) {
Log.e(TAG,e.getMessage(),e);
}
missionItem=temp;
break;
}
case YAW_CONDITION:
{
YawCondition proxy=(YawCondition)proxyItem;
ConditionYaw temp=new ConditionYaw(mission,proxy.getAngle(),proxy.isRelative());
temp.setAngularSpeed(proxy.getAngularSpeed());
missionItem=temp;
break;
}
default :
missionItem=null;
break;
}
return missionItem;
}"
95005,"@Override public Parameters getParameters() throws RemoteException {
  final Drone drone=getDroneMgr().getDrone();
  final Map<String,com.ox3dr.services.android.lib.drone.property.Parameter> proxyParams=new HashMap<String,com.ox3dr.services.android.lib.drone.property.Parameter>();
  List<Parameter> droneParameters=drone.getParameters().getParametersList();
  if (!droneParameters.isEmpty()) {
    for (    Parameter param : droneParameters) {
      proxyParams.put(param.name,new com.ox3dr.services.android.lib.drone.property.Parameter(param.name,param.value,param.type));
    }
    try {
      ParameterMetadataLoader.load(getService().getApplicationContext(),null,proxyParams);
    }
 catch (    IOException e) {
      Log.e(TAG,e.getMessage(),e);
    }
catch (    XmlPullParserException e) {
      Log.e(TAG,e.getMessage(),e);
    }
  }
  return new Parameters(new ArrayList<com.ox3dr.services.android.lib.drone.property.Parameter>(proxyParams.values()));
}","@Override public Parameters getParameters() throws RemoteException {
  final Drone drone=getDroneMgr().getDrone();
  final Map<String,com.ox3dr.services.android.lib.drone.property.Parameter> proxyParams=new HashMap<String,com.ox3dr.services.android.lib.drone.property.Parameter>();
  List<Parameter> droneParameters=drone.getParameters().getParametersList();
  if (!droneParameters.isEmpty()) {
    for (    Parameter param : droneParameters) {
      proxyParams.put(param.name,new com.ox3dr.services.android.lib.drone.property.Parameter(param.name,param.value,param.type));
    }
    try {
      final VehicleProfile profile=drone.getVehicleProfile();
      if (profile != null) {
        String metadataType=profile.getParameterMetadataType();
        if (metadataType != null) {
          ParameterMetadataLoader.load(getService().getApplicationContext(),metadataType,proxyParams);
        }
      }
    }
 catch (    IOException e) {
      Log.e(TAG,e.getMessage(),e);
    }
catch (    XmlPullParserException e) {
      Log.e(TAG,e.getMessage(),e);
    }
  }
  return new Parameters(new ArrayList<com.ox3dr.services.android.lib.drone.property.Parameter>(proxyParams.values()));
}"
95006,"@Override public void onDroneEvent(DroneInterfaces.DroneEventsType event,Drone drone){
  final IDroidPlannerApiCallback callback=getCallback();
  Bundle extrasBundle;
  try {
switch (event) {
case DISCONNECTED:
      callback.onDroneEvent(Event.EVENT_DISCONNECTED,emptyBundle);
    break;
case GUIDEDPOINT:
  callback.onDroneEvent(Event.EVENT_GUIDED_POINT,emptyBundle);
break;
case NAVIGATION:
break;
case RADIO:
callback.onDroneEvent(Event.EVENT_RADIO,emptyBundle);
break;
case RC_IN:
break;
case RC_OUT:
break;
case ARMING_STARTED:
case ARMING:
callback.onDroneEvent(Event.EVENT_ARMING,emptyBundle);
break;
case AUTOPILOT_WARNING:
String warning=drone.getState().getWarning();
extrasBundle.putString(Extra.EXTRA_AUTOPILOT_FAILSAFE_MESSAGE,warning);
callback.onDroneEvent(Event.EVENT_AUTOPILOT_FAILSAFE,emptyBundle);
break;
case MODE:
callback.onDroneEvent(Event.EVENT_VEHICLE_MODE,emptyBundle);
break;
case ATTITUDE:
case ORIENTATION:
callback.onDroneEvent(Event.EVENT_ATTITUDE,emptyBundle);
break;
case SPEED:
callback.onDroneEvent(Event.EVENT_SPEED,emptyBundle);
break;
case BATTERY:
callback.onDroneEvent(Event.EVENT_BATTERY,emptyBundle);
break;
case STATE:
callback.onDroneEvent(Event.EVENT_STATE,emptyBundle);
break;
case MISSION_UPDATE:
break;
case MISSION_RECEIVED:
break;
case FIRMWARE:
case TYPE:
callback.onDroneEvent(Event.EVENT_TYPE_UPDATED,emptyBundle);
break;
case HOME:
callback.onDroneEvent(Event.EVENT_HOME,emptyBundle);
break;
case GPS:
case GPS_FIX:
case GPS_COUNT:
callback.onDroneEvent(Event.EVENT_GPS,emptyBundle);
break;
case PARAMETER:
case PARAMETERS_DOWNLOADED:
callback.onDroneEvent(Event.EVENT_PARAMETERS_RECEIVED,emptyBundle);
break;
case CALIBRATION_IMU:
callback.onDroneEvent(Event.EVENT_CALIBRATION_IMU,emptyBundle);
break;
case CALIBRATION_TIMEOUT:
final Calibration calibration=getDroneMgr().getDrone().getCalibrationSetup();
final String message=calibration.getMessage();
if (calibration.isCalibrating() && TextUtils.isEmpty(message)) {
calibration.setCalibrating(false);
callback.onDroneEvent(Event.EVENT_HEARTBEAT_TIMEOUT,emptyBundle);
}
 else {
extrasBundle=new Bundle(1);
extrasBundle.putString(Extra.EXTRA_CALIBRATION_IMU_MESSAGE,message);
callback.onDroneEvent(Event.EVENT_CALIBRATION_IMU_TIMEOUT,extrasBundle);
}
break;
case HEARTBEAT_TIMEOUT:
callback.onDroneEvent(Event.EVENT_HEARTBEAT_TIMEOUT,emptyBundle);
break;
case HEARTBEAT_FIRST:
extrasBundle=new Bundle();
extrasBundle.putInt(Extra.EXTRA_MAVLINK_VERSION,drone.getMavlinkVersion());
callback.onDroneEvent(Event.EVENT_HEARTBEAT_FIRST,extrasBundle);
break;
case HEARTBEAT_RESTORED:
extrasBundle=new Bundle();
extrasBundle.putInt(Extra.EXTRA_MAVLINK_VERSION,drone.getMavlinkVersion());
callback.onDroneEvent(Event.EVENT_HEARTBEAT_RESTORED,extrasBundle);
break;
case CONNECTED:
callback.onDroneEvent(Event.EVENT_CONNECTED,emptyBundle);
break;
case MISSION_SENT:
break;
case INVALID_POLYGON:
break;
case MISSION_WP_UPDATE:
break;
case FOLLOW_START:
callback.onDroneEvent(Event.EVENT_FOLLOW_START,emptyBundle);
break;
case FOLLOW_STOP:
callback.onDroneEvent(Event.EVENT_FOLLOW_STOP,emptyBundle);
break;
case FOLLOW_UPDATE:
case FOLLOW_CHANGE_TYPE:
callback.onDroneEvent(Event.EVENT_FOLLOW_UPDATE,emptyBundle);
break;
case WARNING_400FT_EXCEEDED:
break;
case WARNING_SIGNAL_WEAK:
break;
case WARNING_NO_GPS:
break;
case MAGNETOMETER:
break;
case FOOTPRINT:
break;
}
}
 catch (DeadObjectException e) {
handleDeadObjectException(e);
}
catch (RemoteException e) {
Log.e(TAG,e.getMessage(),e);
}
}","@Override public void onDroneEvent(DroneInterfaces.DroneEventsType event,Drone drone){
  final IDroidPlannerApiCallback callback=getCallback();
  Bundle extrasBundle;
  try {
switch (event) {
case DISCONNECTED:
      callback.onDroneEvent(Event.EVENT_DISCONNECTED,emptyBundle);
    break;
case GUIDEDPOINT:
  callback.onDroneEvent(Event.EVENT_GUIDED_POINT,emptyBundle);
break;
case NAVIGATION:
break;
case RADIO:
callback.onDroneEvent(Event.EVENT_RADIO,emptyBundle);
break;
case RC_IN:
break;
case RC_OUT:
break;
case ARMING_STARTED:
case ARMING:
callback.onDroneEvent(Event.EVENT_ARMING,emptyBundle);
break;
case AUTOPILOT_WARNING:
String warning=drone.getState().getWarning();
extrasBundle=new Bundle();
extrasBundle.putString(Extra.EXTRA_AUTOPILOT_FAILSAFE_MESSAGE,warning);
callback.onDroneEvent(Event.EVENT_AUTOPILOT_FAILSAFE,extrasBundle);
break;
case MODE:
callback.onDroneEvent(Event.EVENT_VEHICLE_MODE,emptyBundle);
break;
case ATTITUDE:
case ORIENTATION:
callback.onDroneEvent(Event.EVENT_ATTITUDE,emptyBundle);
break;
case SPEED:
callback.onDroneEvent(Event.EVENT_SPEED,emptyBundle);
break;
case BATTERY:
callback.onDroneEvent(Event.EVENT_BATTERY,emptyBundle);
break;
case STATE:
callback.onDroneEvent(Event.EVENT_STATE,emptyBundle);
break;
case MISSION_UPDATE:
break;
case MISSION_RECEIVED:
break;
case FIRMWARE:
case TYPE:
callback.onDroneEvent(Event.EVENT_TYPE_UPDATED,emptyBundle);
break;
case HOME:
callback.onDroneEvent(Event.EVENT_HOME,emptyBundle);
break;
case GPS:
case GPS_FIX:
case GPS_COUNT:
callback.onDroneEvent(Event.EVENT_GPS,emptyBundle);
break;
case PARAMETER:
case PARAMETERS_DOWNLOADED:
callback.onDroneEvent(Event.EVENT_PARAMETERS_RECEIVED,emptyBundle);
break;
case CALIBRATION_IMU:
callback.onDroneEvent(Event.EVENT_CALIBRATION_IMU,emptyBundle);
break;
case CALIBRATION_TIMEOUT:
final Calibration calibration=getDroneMgr().getDrone().getCalibrationSetup();
final String message=calibration.getMessage();
if (calibration.isCalibrating() && TextUtils.isEmpty(message)) {
calibration.setCalibrating(false);
callback.onDroneEvent(Event.EVENT_HEARTBEAT_TIMEOUT,emptyBundle);
}
 else {
extrasBundle=new Bundle(1);
extrasBundle.putString(Extra.EXTRA_CALIBRATION_IMU_MESSAGE,message);
callback.onDroneEvent(Event.EVENT_CALIBRATION_IMU_TIMEOUT,extrasBundle);
}
break;
case HEARTBEAT_TIMEOUT:
callback.onDroneEvent(Event.EVENT_HEARTBEAT_TIMEOUT,emptyBundle);
break;
case HEARTBEAT_FIRST:
extrasBundle=new Bundle();
extrasBundle.putInt(Extra.EXTRA_MAVLINK_VERSION,drone.getMavlinkVersion());
callback.onDroneEvent(Event.EVENT_HEARTBEAT_FIRST,extrasBundle);
break;
case HEARTBEAT_RESTORED:
extrasBundle=new Bundle();
extrasBundle.putInt(Extra.EXTRA_MAVLINK_VERSION,drone.getMavlinkVersion());
callback.onDroneEvent(Event.EVENT_HEARTBEAT_RESTORED,extrasBundle);
break;
case CONNECTED:
callback.onDroneEvent(Event.EVENT_CONNECTED,emptyBundle);
break;
case MISSION_SENT:
break;
case INVALID_POLYGON:
break;
case MISSION_WP_UPDATE:
break;
case FOLLOW_START:
callback.onDroneEvent(Event.EVENT_FOLLOW_START,emptyBundle);
break;
case FOLLOW_STOP:
callback.onDroneEvent(Event.EVENT_FOLLOW_STOP,emptyBundle);
break;
case FOLLOW_UPDATE:
case FOLLOW_CHANGE_TYPE:
callback.onDroneEvent(Event.EVENT_FOLLOW_UPDATE,emptyBundle);
break;
case WARNING_400FT_EXCEEDED:
break;
case WARNING_SIGNAL_WEAK:
break;
case WARNING_NO_GPS:
break;
case MAGNETOMETER:
break;
case FOOTPRINT:
break;
}
}
 catch (DeadObjectException e) {
handleDeadObjectException(e);
}
catch (RemoteException e) {
Log.e(TAG,e.getMessage(),e);
}
}"
95007,"DPServices(DroidPlannerService service){
  serviceRef=new WeakReference<DroidPlannerService>(service);
  this.tlogApi=new TLogApi(service.getApplicationContext());
}","DPServices(DroidPlannerService service){
  serviceRef=new WeakReference<DroidPlannerService>(service);
  this.tlogApi=new TLogApi(service);
}"
95008,"@Override public void onCreate(){
  super.onCreate();
  lbm=LocalBroadcastManager.getInstance(getApplicationContext());
}","@Override public void onCreate(){
  super.onCreate();
  mavlinkApi=new MavLinkServiceApi(this);
  droneAccess=new DroneAccess(this);
  dpServices=new DPServices(this);
  lbm=LocalBroadcastManager.getInstance(getApplicationContext());
}"
95009,"@Override public void onDroneEvent(DroneInterfaces.DroneEventsType event,Drone drone){
  final IDroidPlannerApiCallback callback=getCallback();
  Bundle extrasBundle;
  try {
switch (event) {
case DISCONNECTED:
      callback.onDroneEvent(Event.EVENT_DISCONNECTED,emptyBundle);
    break;
case GUIDEDPOINT:
  callback.onDroneEvent(Event.EVENT_GUIDED_POINT,emptyBundle);
break;
case NAVIGATION:
break;
case RADIO:
callback.onDroneEvent(Event.EVENT_RADIO,emptyBundle);
break;
case RC_IN:
break;
case RC_OUT:
break;
case ARMING_STARTED:
case ARMING:
callback.onDroneEvent(Event.EVENT_ARMING,emptyBundle);
break;
case AUTOPILOT_WARNING:
String warning=drone.getState().getWarning();
extrasBundle=new Bundle();
extrasBundle.putString(Extra.EXTRA_AUTOPILOT_FAILSAFE_MESSAGE,warning);
callback.onDroneEvent(Event.EVENT_AUTOPILOT_FAILSAFE,extrasBundle);
break;
case MODE:
callback.onDroneEvent(Event.EVENT_VEHICLE_MODE,emptyBundle);
break;
case ATTITUDE:
case ORIENTATION:
callback.onDroneEvent(Event.EVENT_ATTITUDE,emptyBundle);
break;
case SPEED:
callback.onDroneEvent(Event.EVENT_SPEED,emptyBundle);
break;
case BATTERY:
callback.onDroneEvent(Event.EVENT_BATTERY,emptyBundle);
break;
case STATE:
callback.onDroneEvent(Event.EVENT_STATE,emptyBundle);
break;
case MISSION_UPDATE:
break;
case MISSION_RECEIVED:
break;
case FIRMWARE:
case TYPE:
callback.onDroneEvent(Event.EVENT_TYPE_UPDATED,emptyBundle);
break;
case HOME:
callback.onDroneEvent(Event.EVENT_HOME,emptyBundle);
break;
case GPS:
case GPS_FIX:
case GPS_COUNT:
callback.onDroneEvent(Event.EVENT_GPS,emptyBundle);
break;
case PARAMETER:
case PARAMETERS_DOWNLOADED:
callback.onDroneEvent(Event.EVENT_PARAMETERS_RECEIVED,emptyBundle);
break;
case CALIBRATION_IMU:
callback.onDroneEvent(Event.EVENT_CALIBRATION_IMU,emptyBundle);
break;
case CALIBRATION_TIMEOUT:
final Calibration calibration=getDroneMgr().getDrone().getCalibrationSetup();
final String message=calibration.getMessage();
if (calibration.isCalibrating() && TextUtils.isEmpty(message)) {
calibration.setCalibrating(false);
callback.onDroneEvent(Event.EVENT_HEARTBEAT_TIMEOUT,emptyBundle);
}
 else {
extrasBundle=new Bundle(1);
extrasBundle.putString(Extra.EXTRA_CALIBRATION_IMU_MESSAGE,message);
callback.onDroneEvent(Event.EVENT_CALIBRATION_IMU_TIMEOUT,extrasBundle);
}
break;
case HEARTBEAT_TIMEOUT:
callback.onDroneEvent(Event.EVENT_HEARTBEAT_TIMEOUT,emptyBundle);
break;
case HEARTBEAT_FIRST:
extrasBundle=new Bundle();
extrasBundle.putInt(Extra.EXTRA_MAVLINK_VERSION,drone.getMavlinkVersion());
callback.onDroneEvent(Event.EVENT_HEARTBEAT_FIRST,extrasBundle);
break;
case HEARTBEAT_RESTORED:
extrasBundle=new Bundle();
extrasBundle.putInt(Extra.EXTRA_MAVLINK_VERSION,drone.getMavlinkVersion());
callback.onDroneEvent(Event.EVENT_HEARTBEAT_RESTORED,extrasBundle);
break;
case CONNECTED:
callback.onDroneEvent(Event.EVENT_CONNECTED,emptyBundle);
break;
case MISSION_SENT:
break;
case INVALID_POLYGON:
break;
case MISSION_WP_UPDATE:
break;
case FOLLOW_START:
callback.onDroneEvent(Event.EVENT_FOLLOW_START,emptyBundle);
break;
case FOLLOW_STOP:
callback.onDroneEvent(Event.EVENT_FOLLOW_STOP,emptyBundle);
break;
case FOLLOW_UPDATE:
case FOLLOW_CHANGE_TYPE:
callback.onDroneEvent(Event.EVENT_FOLLOW_UPDATE,emptyBundle);
break;
case WARNING_400FT_EXCEEDED:
break;
case WARNING_SIGNAL_WEAK:
break;
case WARNING_NO_GPS:
break;
case MAGNETOMETER:
break;
case FOOTPRINT:
break;
}
}
 catch (DeadObjectException e) {
handleDeadObjectException(e);
}
catch (RemoteException e) {
Log.e(TAG,e.getMessage(),e);
}
}","@Override public void onDroneEvent(DroneInterfaces.DroneEventsType event,Drone drone){
  final IDroidPlannerApiCallback callback=getCallback();
  Bundle extrasBundle;
  try {
switch (event) {
case DISCONNECTED:
      callback.onDroneEvent(Event.EVENT_DISCONNECTED,emptyBundle);
    break;
case GUIDEDPOINT:
  callback.onDroneEvent(Event.EVENT_GUIDED_POINT,emptyBundle);
break;
case NAVIGATION:
break;
case RADIO:
callback.onDroneEvent(Event.EVENT_RADIO,emptyBundle);
break;
case RC_IN:
break;
case RC_OUT:
break;
case ARMING_STARTED:
case ARMING:
callback.onDroneEvent(Event.EVENT_ARMING,emptyBundle);
break;
case AUTOPILOT_WARNING:
String warning=drone.getState().getWarning();
extrasBundle=new Bundle();
extrasBundle.putString(Extra.EXTRA_AUTOPILOT_FAILSAFE_MESSAGE,warning);
callback.onDroneEvent(Event.EVENT_AUTOPILOT_FAILSAFE,extrasBundle);
break;
case MODE:
callback.onDroneEvent(Event.EVENT_VEHICLE_MODE,emptyBundle);
break;
case ATTITUDE:
case ORIENTATION:
callback.onDroneEvent(Event.EVENT_ATTITUDE,emptyBundle);
break;
case SPEED:
callback.onDroneEvent(Event.EVENT_SPEED,emptyBundle);
break;
case BATTERY:
callback.onDroneEvent(Event.EVENT_BATTERY,emptyBundle);
break;
case STATE:
callback.onDroneEvent(Event.EVENT_STATE,emptyBundle);
break;
case MISSION_UPDATE:
break;
case MISSION_RECEIVED:
break;
case FIRMWARE:
case TYPE:
callback.onDroneEvent(Event.EVENT_TYPE_UPDATED,emptyBundle);
break;
case HOME:
callback.onDroneEvent(Event.EVENT_HOME,emptyBundle);
break;
case GPS:
callback.onDroneEvent(Event.EVENT_GPS,emptyBundle);
break;
case GPS_FIX:
case GPS_COUNT:
callback.onDroneEvent(Event.EVENT_GPS_STATE,emptyBundle);
break;
case PARAMETER:
case PARAMETERS_DOWNLOADED:
callback.onDroneEvent(Event.EVENT_PARAMETERS_RECEIVED,emptyBundle);
break;
case CALIBRATION_IMU:
callback.onDroneEvent(Event.EVENT_CALIBRATION_IMU,emptyBundle);
break;
case CALIBRATION_TIMEOUT:
final Calibration calibration=getDroneMgr().getDrone().getCalibrationSetup();
final String message=calibration.getMessage();
if (calibration.isCalibrating() && TextUtils.isEmpty(message)) {
calibration.setCalibrating(false);
callback.onDroneEvent(Event.EVENT_HEARTBEAT_TIMEOUT,emptyBundle);
}
 else {
extrasBundle=new Bundle(1);
extrasBundle.putString(Extra.EXTRA_CALIBRATION_IMU_MESSAGE,message);
callback.onDroneEvent(Event.EVENT_CALIBRATION_IMU_TIMEOUT,extrasBundle);
}
break;
case HEARTBEAT_TIMEOUT:
callback.onDroneEvent(Event.EVENT_HEARTBEAT_TIMEOUT,emptyBundle);
break;
case HEARTBEAT_FIRST:
extrasBundle=new Bundle();
extrasBundle.putInt(Extra.EXTRA_MAVLINK_VERSION,drone.getMavlinkVersion());
callback.onDroneEvent(Event.EVENT_HEARTBEAT_FIRST,extrasBundle);
break;
case HEARTBEAT_RESTORED:
extrasBundle=new Bundle();
extrasBundle.putInt(Extra.EXTRA_MAVLINK_VERSION,drone.getMavlinkVersion());
callback.onDroneEvent(Event.EVENT_HEARTBEAT_RESTORED,extrasBundle);
break;
case CONNECTED:
callback.onDroneEvent(Event.EVENT_CONNECTED,emptyBundle);
break;
case MISSION_SENT:
break;
case INVALID_POLYGON:
break;
case MISSION_WP_UPDATE:
break;
case FOLLOW_START:
callback.onDroneEvent(Event.EVENT_FOLLOW_START,emptyBundle);
break;
case FOLLOW_STOP:
callback.onDroneEvent(Event.EVENT_FOLLOW_STOP,emptyBundle);
break;
case FOLLOW_UPDATE:
case FOLLOW_CHANGE_TYPE:
callback.onDroneEvent(Event.EVENT_FOLLOW_UPDATE,emptyBundle);
break;
case WARNING_400FT_EXCEEDED:
break;
case WARNING_SIGNAL_WEAK:
break;
case WARNING_NO_GPS:
break;
case MAGNETOMETER:
break;
case FOOTPRINT:
break;
}
}
 catch (DeadObjectException e) {
handleDeadObjectException(e);
}
catch (RemoteException e) {
Log.e(TAG,e.getMessage(),e);
}
}"
95010,"@Override public void onDroneEvent(DroneInterfaces.DroneEventsType event,Drone drone){
  final IDroidPlannerApiCallback callback=getCallback();
  Bundle extrasBundle;
  try {
switch (event) {
case DISCONNECTED:
      callback.onDroneEvent(Event.EVENT_DISCONNECTED,emptyBundle);
    break;
case GUIDEDPOINT:
  callback.onDroneEvent(Event.EVENT_GUIDED_POINT,emptyBundle);
break;
case NAVIGATION:
break;
case RADIO:
callback.onDroneEvent(Event.EVENT_RADIO,emptyBundle);
break;
case RC_IN:
break;
case RC_OUT:
break;
case ARMING_STARTED:
case ARMING:
callback.onDroneEvent(Event.EVENT_ARMING,emptyBundle);
break;
case AUTOPILOT_WARNING:
String warning=drone.getState().getWarning();
extrasBundle=new Bundle();
extrasBundle.putString(Extra.EXTRA_AUTOPILOT_FAILSAFE_MESSAGE,warning);
callback.onDroneEvent(Event.EVENT_AUTOPILOT_FAILSAFE,extrasBundle);
break;
case MODE:
callback.onDroneEvent(Event.EVENT_VEHICLE_MODE,emptyBundle);
break;
case ATTITUDE:
case ORIENTATION:
callback.onDroneEvent(Event.EVENT_ATTITUDE,emptyBundle);
break;
case SPEED:
callback.onDroneEvent(Event.EVENT_SPEED,emptyBundle);
break;
case BATTERY:
callback.onDroneEvent(Event.EVENT_BATTERY,emptyBundle);
break;
case STATE:
callback.onDroneEvent(Event.EVENT_STATE,emptyBundle);
break;
case MISSION_UPDATE:
break;
case MISSION_RECEIVED:
break;
case FIRMWARE:
case TYPE:
callback.onDroneEvent(Event.EVENT_TYPE_UPDATED,emptyBundle);
break;
case HOME:
callback.onDroneEvent(Event.EVENT_HOME,emptyBundle);
break;
case GPS:
callback.onDroneEvent(Event.EVENT_GPS,emptyBundle);
break;
case GPS_FIX:
case GPS_COUNT:
callback.onDroneEvent(Event.EVENT_GPS_STATE,emptyBundle);
break;
case PARAMETER:
case PARAMETERS_DOWNLOADED:
callback.onDroneEvent(Event.EVENT_PARAMETERS_RECEIVED,emptyBundle);
break;
case CALIBRATION_IMU:
callback.onDroneEvent(Event.EVENT_CALIBRATION_IMU,emptyBundle);
break;
case CALIBRATION_TIMEOUT:
final Calibration calibration=getDroneMgr().getDrone().getCalibrationSetup();
final String message=calibration.getMessage();
if (calibration.isCalibrating() && TextUtils.isEmpty(message)) {
calibration.setCalibrating(false);
callback.onDroneEvent(Event.EVENT_HEARTBEAT_TIMEOUT,emptyBundle);
}
 else {
extrasBundle=new Bundle(1);
extrasBundle.putString(Extra.EXTRA_CALIBRATION_IMU_MESSAGE,message);
callback.onDroneEvent(Event.EVENT_CALIBRATION_IMU_TIMEOUT,extrasBundle);
}
break;
case HEARTBEAT_TIMEOUT:
callback.onDroneEvent(Event.EVENT_HEARTBEAT_TIMEOUT,emptyBundle);
break;
case HEARTBEAT_FIRST:
extrasBundle=new Bundle();
extrasBundle.putInt(Extra.EXTRA_MAVLINK_VERSION,drone.getMavlinkVersion());
callback.onDroneEvent(Event.EVENT_HEARTBEAT_FIRST,extrasBundle);
break;
case HEARTBEAT_RESTORED:
extrasBundle=new Bundle();
extrasBundle.putInt(Extra.EXTRA_MAVLINK_VERSION,drone.getMavlinkVersion());
callback.onDroneEvent(Event.EVENT_HEARTBEAT_RESTORED,extrasBundle);
break;
case CONNECTED:
callback.onDroneEvent(Event.EVENT_CONNECTED,emptyBundle);
break;
case MISSION_SENT:
break;
case INVALID_POLYGON:
break;
case MISSION_WP_UPDATE:
break;
case FOLLOW_START:
callback.onDroneEvent(Event.EVENT_FOLLOW_START,emptyBundle);
break;
case FOLLOW_STOP:
callback.onDroneEvent(Event.EVENT_FOLLOW_STOP,emptyBundle);
break;
case FOLLOW_UPDATE:
case FOLLOW_CHANGE_TYPE:
callback.onDroneEvent(Event.EVENT_FOLLOW_UPDATE,emptyBundle);
break;
case WARNING_400FT_EXCEEDED:
break;
case WARNING_SIGNAL_WEAK:
break;
case WARNING_NO_GPS:
break;
case MAGNETOMETER:
break;
case FOOTPRINT:
break;
}
}
 catch (DeadObjectException e) {
handleDeadObjectException(e);
}
catch (RemoteException e) {
Log.e(TAG,e.getMessage(),e);
}
}","@Override public void onDroneEvent(DroneInterfaces.DroneEventsType event,Drone drone){
  final IDroidPlannerApiCallback callback=getCallback();
  Bundle extrasBundle;
  try {
switch (event) {
case DISCONNECTED:
      callback.onDroneEvent(Event.EVENT_DISCONNECTED,emptyBundle);
    break;
case GUIDEDPOINT:
  callback.onDroneEvent(Event.EVENT_GUIDED_POINT,emptyBundle);
break;
case NAVIGATION:
break;
case RADIO:
callback.onDroneEvent(Event.EVENT_RADIO,emptyBundle);
break;
case RC_IN:
break;
case RC_OUT:
break;
case ARMING_STARTED:
case ARMING:
callback.onDroneEvent(Event.EVENT_ARMING,emptyBundle);
break;
case AUTOPILOT_WARNING:
String warning=drone.getState().getWarning();
extrasBundle=new Bundle();
extrasBundle.putString(Extra.EXTRA_AUTOPILOT_FAILSAFE_MESSAGE,warning);
callback.onDroneEvent(Event.EVENT_AUTOPILOT_FAILSAFE,extrasBundle);
break;
case MODE:
callback.onDroneEvent(Event.EVENT_VEHICLE_MODE,emptyBundle);
break;
case ATTITUDE:
case ORIENTATION:
callback.onDroneEvent(Event.EVENT_ATTITUDE,emptyBundle);
break;
case SPEED:
callback.onDroneEvent(Event.EVENT_SPEED,emptyBundle);
break;
case BATTERY:
callback.onDroneEvent(Event.EVENT_BATTERY,emptyBundle);
break;
case STATE:
callback.onDroneEvent(Event.EVENT_STATE,emptyBundle);
break;
case MISSION_UPDATE:
break;
case MISSION_RECEIVED:
break;
case FIRMWARE:
case TYPE:
callback.onDroneEvent(Event.EVENT_TYPE_UPDATED,emptyBundle);
break;
case HOME:
callback.onDroneEvent(Event.EVENT_HOME,emptyBundle);
break;
case GPS:
callback.onDroneEvent(Event.EVENT_GPS,emptyBundle);
break;
case GPS_FIX:
case GPS_COUNT:
callback.onDroneEvent(Event.EVENT_GPS_STATE,emptyBundle);
break;
case PARAMETER:
case PARAMETERS_DOWNLOADED:
callback.onDroneEvent(Event.EVENT_PARAMETERS_RECEIVED,emptyBundle);
break;
case CALIBRATION_IMU:
final String calIMUMessage=getDroneMgr().getDrone().getCalibrationSetup().getMessage();
extrasBundle=new Bundle();
extrasBundle.putString(Extra.EXTRA_CALIBRATION_IMU_MESSAGE,calIMUMessage);
callback.onDroneEvent(Event.EVENT_CALIBRATION_IMU,extrasBundle);
break;
case CALIBRATION_TIMEOUT:
final Calibration calibration=getDroneMgr().getDrone().getCalibrationSetup();
final String message=calibration.getMessage();
if (calibration.isCalibrating() && TextUtils.isEmpty(message)) {
calibration.setCalibrating(false);
callback.onDroneEvent(Event.EVENT_HEARTBEAT_TIMEOUT,emptyBundle);
}
 else {
extrasBundle=new Bundle(1);
extrasBundle.putString(Extra.EXTRA_CALIBRATION_IMU_MESSAGE,message);
callback.onDroneEvent(Event.EVENT_CALIBRATION_IMU_TIMEOUT,extrasBundle);
}
break;
case HEARTBEAT_TIMEOUT:
callback.onDroneEvent(Event.EVENT_HEARTBEAT_TIMEOUT,emptyBundle);
break;
case HEARTBEAT_FIRST:
extrasBundle=new Bundle();
extrasBundle.putInt(Extra.EXTRA_MAVLINK_VERSION,drone.getMavlinkVersion());
callback.onDroneEvent(Event.EVENT_HEARTBEAT_FIRST,extrasBundle);
break;
case HEARTBEAT_RESTORED:
extrasBundle=new Bundle();
extrasBundle.putInt(Extra.EXTRA_MAVLINK_VERSION,drone.getMavlinkVersion());
callback.onDroneEvent(Event.EVENT_HEARTBEAT_RESTORED,extrasBundle);
break;
case CONNECTED:
callback.onDroneEvent(Event.EVENT_CONNECTED,emptyBundle);
break;
case MISSION_SENT:
break;
case INVALID_POLYGON:
break;
case MISSION_WP_UPDATE:
break;
case FOLLOW_START:
callback.onDroneEvent(Event.EVENT_FOLLOW_START,emptyBundle);
break;
case FOLLOW_STOP:
callback.onDroneEvent(Event.EVENT_FOLLOW_STOP,emptyBundle);
break;
case FOLLOW_UPDATE:
case FOLLOW_CHANGE_TYPE:
callback.onDroneEvent(Event.EVENT_FOLLOW_UPDATE,emptyBundle);
break;
case WARNING_400FT_EXCEEDED:
break;
case WARNING_SIGNAL_WEAK:
break;
case WARNING_NO_GPS:
break;
case MAGNETOMETER:
break;
case FOOTPRINT:
break;
}
}
 catch (DeadObjectException e) {
handleDeadObjectException(e);
}
catch (RemoteException e) {
Log.e(TAG,e.getMessage(),e);
}
}"
95011,"@Override public Mission getMission() throws RemoteException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public Mission getMission() throws RemoteException {
  org.droidplanner.core.mission.Mission droneMission=getDroneMgr().getDrone().getMission();
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
95012,"@Override public State getState() throws RemoteException {
  final Drone drone=getDroneMgr().getDrone();
  org.droidplanner.core.drone.variables.State droneState=drone.getState();
  ApmModes droneMode=droneState.getMode();
  return new State(getVehicleMode(droneMode),droneState.isArmed(),droneState.isFlying(),droneState.getWarning(),drone.getMavlinkVersion());
}","@Override public State getState() throws RemoteException {
  final Drone drone=getDroneMgr().getDrone();
  org.droidplanner.core.drone.variables.State droneState=drone.getState();
  ApmModes droneMode=droneState.getMode();
  return new State(getVehicleMode(droneMode),droneState.isArmed(),droneState.isFlying(),droneState.getWarning(),drone.getMavlinkVersion(),drone.getCalibrationSetup().getMessage());
}"
95013,"@Override public void onDroneEvent(DroneInterfaces.DroneEventsType event,Drone drone){
  Log.d(TAG,""String_Node_Str"" + event);
  for (  DroneEventsListener listener : droneEventsListeners)   listener.onDroneEvent(event,drone);
}","@Override public void onDroneEvent(DroneInterfaces.DroneEventsType event,Drone drone){
  for (  DroneEventsListener listener : droneEventsListeners)   listener.onDroneEvent(event,drone);
}"
95014,"@Override public void disconnect() throws RemoteException {
  try {
    getDroneMgr().disconnect();
  }
 catch (  ConnectionException e) {
    getCallback().onConnectionFailed(new ConnectionResult(0,e.getMessage()));
  }
}","@Override public void disconnect() throws RemoteException {
  try {
    getDroneMgr().disconnect();
  }
 catch (  ConnectionException e) {
    try {
      getCallback().onConnectionFailed(new ConnectionResult(0,e.getMessage()));
    }
 catch (    DeadObjectException d) {
      handleDeadObjectException(d);
    }
  }
}"
95015,"@Override public void onDroneEvent(DroneInterfaces.DroneEventsType event,Drone drone){
  final IDroidPlannerApiCallback callback=getCallback();
  Bundle extrasBundle;
  try {
switch (event) {
case DISCONNECTED:
      callback.onDroneEvent(Event.EVENT_DISCONNECTED,emptyBundle);
    break;
case GUIDEDPOINT:
  callback.onDroneEvent(Event.EVENT_GUIDED_POINT,emptyBundle);
break;
case NAVIGATION:
break;
case RADIO:
callback.onDroneEvent(Event.EVENT_RADIO,emptyBundle);
break;
case RC_IN:
break;
case RC_OUT:
break;
case ARMING_STARTED:
case ARMING:
callback.onDroneEvent(Event.EVENT_ARMING,emptyBundle);
break;
case AUTOPILOT_WARNING:
callback.onDroneEvent(Event.EVENT_AUTOPILOT_FAILSAFE,emptyBundle);
break;
case MODE:
callback.onDroneEvent(Event.EVENT_VEHICLE_MODE,emptyBundle);
break;
case ATTITUDE:
case ORIENTATION:
callback.onDroneEvent(Event.EVENT_ATTITUDE,emptyBundle);
break;
case SPEED:
callback.onDroneEvent(Event.EVENT_SPEED,emptyBundle);
break;
case BATTERY:
callback.onDroneEvent(Event.EVENT_BATTERY,emptyBundle);
break;
case STATE:
callback.onDroneEvent(Event.EVENT_STATE,emptyBundle);
break;
case MISSION_UPDATE:
break;
case MISSION_RECEIVED:
break;
case FIRMWARE:
case TYPE:
callback.onDroneEvent(Event.EVENT_TYPE_UPDATED,emptyBundle);
break;
case HOME:
callback.onDroneEvent(Event.EVENT_HOME,emptyBundle);
break;
case GPS:
case GPS_FIX:
case GPS_COUNT:
callback.onDroneEvent(Event.EVENT_GPS,emptyBundle);
break;
case PARAMETER:
case PARAMETERS_DOWNLOADED:
callback.onDroneEvent(Event.EVENT_PARAMETERS_RECEIVED,emptyBundle);
break;
case CALIBRATION_IMU:
callback.onDroneEvent(Event.EVENT_CALIBRATION_IMU,emptyBundle);
break;
case CALIBRATION_TIMEOUT:
final Calibration calibration=getDroneMgr().getDrone().getCalibrationSetup();
final String message=calibration.getMessage();
if (calibration.isCalibrating() && TextUtils.isEmpty(message)) {
calibration.setCalibrating(false);
callback.onDroneEvent(Event.EVENT_HEARTBEAT_TIMEOUT,emptyBundle);
}
 else {
extrasBundle=new Bundle(1);
extrasBundle.putString(Extra.EXTRA_CALIBRATION_IMU_MESSAGE,message);
callback.onDroneEvent(Event.EVENT_CALIBRATION_IMU_TIMEOUT,extrasBundle);
}
break;
case HEARTBEAT_TIMEOUT:
callback.onDroneEvent(Event.EVENT_HEARTBEAT_TIMEOUT,emptyBundle);
break;
case HEARTBEAT_FIRST:
extrasBundle=new Bundle();
extrasBundle.putInt(Extra.EXTRA_MAVLINK_VERSION,drone.getMavlinkVersion());
callback.onDroneEvent(Event.EVENT_HEARTBEAT_FIRST,extrasBundle);
break;
case HEARTBEAT_RESTORED:
extrasBundle=new Bundle();
extrasBundle.putInt(Extra.EXTRA_MAVLINK_VERSION,drone.getMavlinkVersion());
callback.onDroneEvent(Event.EVENT_HEARTBEAT_RESTORED,extrasBundle);
break;
case CONNECTED:
callback.onDroneEvent(Event.EVENT_CONNECTED,emptyBundle);
break;
case MISSION_SENT:
break;
case INVALID_POLYGON:
break;
case MISSION_WP_UPDATE:
break;
case FOLLOW_START:
callback.onDroneEvent(Event.EVENT_FOLLOW_START,emptyBundle);
break;
case FOLLOW_STOP:
callback.onDroneEvent(Event.EVENT_FOLLOW_STOP,emptyBundle);
break;
case FOLLOW_UPDATE:
case FOLLOW_CHANGE_TYPE:
callback.onDroneEvent(Event.EVENT_FOLLOW_UPDATE,emptyBundle);
break;
case WARNING_400FT_EXCEEDED:
break;
case WARNING_SIGNAL_WEAK:
break;
case WARNING_NO_GPS:
break;
case MAGNETOMETER:
break;
case FOOTPRINT:
break;
}
}
 catch (RemoteException e) {
Log.e(TAG,e.getMessage(),e);
}
}","@Override public void onDroneEvent(DroneInterfaces.DroneEventsType event,Drone drone){
  final IDroidPlannerApiCallback callback=getCallback();
  Bundle extrasBundle;
  try {
switch (event) {
case DISCONNECTED:
      callback.onDroneEvent(Event.EVENT_DISCONNECTED,emptyBundle);
    break;
case GUIDEDPOINT:
  callback.onDroneEvent(Event.EVENT_GUIDED_POINT,emptyBundle);
break;
case NAVIGATION:
break;
case RADIO:
callback.onDroneEvent(Event.EVENT_RADIO,emptyBundle);
break;
case RC_IN:
break;
case RC_OUT:
break;
case ARMING_STARTED:
case ARMING:
callback.onDroneEvent(Event.EVENT_ARMING,emptyBundle);
break;
case AUTOPILOT_WARNING:
String warning=drone.getState().getWarning();
extrasBundle.putString(Extra.EXTRA_AUTOPILOT_FAILSAFE_MESSAGE,warning);
callback.onDroneEvent(Event.EVENT_AUTOPILOT_FAILSAFE,emptyBundle);
break;
case MODE:
callback.onDroneEvent(Event.EVENT_VEHICLE_MODE,emptyBundle);
break;
case ATTITUDE:
case ORIENTATION:
callback.onDroneEvent(Event.EVENT_ATTITUDE,emptyBundle);
break;
case SPEED:
callback.onDroneEvent(Event.EVENT_SPEED,emptyBundle);
break;
case BATTERY:
callback.onDroneEvent(Event.EVENT_BATTERY,emptyBundle);
break;
case STATE:
callback.onDroneEvent(Event.EVENT_STATE,emptyBundle);
break;
case MISSION_UPDATE:
break;
case MISSION_RECEIVED:
break;
case FIRMWARE:
case TYPE:
callback.onDroneEvent(Event.EVENT_TYPE_UPDATED,emptyBundle);
break;
case HOME:
callback.onDroneEvent(Event.EVENT_HOME,emptyBundle);
break;
case GPS:
case GPS_FIX:
case GPS_COUNT:
callback.onDroneEvent(Event.EVENT_GPS,emptyBundle);
break;
case PARAMETER:
case PARAMETERS_DOWNLOADED:
callback.onDroneEvent(Event.EVENT_PARAMETERS_RECEIVED,emptyBundle);
break;
case CALIBRATION_IMU:
callback.onDroneEvent(Event.EVENT_CALIBRATION_IMU,emptyBundle);
break;
case CALIBRATION_TIMEOUT:
final Calibration calibration=getDroneMgr().getDrone().getCalibrationSetup();
final String message=calibration.getMessage();
if (calibration.isCalibrating() && TextUtils.isEmpty(message)) {
calibration.setCalibrating(false);
callback.onDroneEvent(Event.EVENT_HEARTBEAT_TIMEOUT,emptyBundle);
}
 else {
extrasBundle=new Bundle(1);
extrasBundle.putString(Extra.EXTRA_CALIBRATION_IMU_MESSAGE,message);
callback.onDroneEvent(Event.EVENT_CALIBRATION_IMU_TIMEOUT,extrasBundle);
}
break;
case HEARTBEAT_TIMEOUT:
callback.onDroneEvent(Event.EVENT_HEARTBEAT_TIMEOUT,emptyBundle);
break;
case HEARTBEAT_FIRST:
extrasBundle=new Bundle();
extrasBundle.putInt(Extra.EXTRA_MAVLINK_VERSION,drone.getMavlinkVersion());
callback.onDroneEvent(Event.EVENT_HEARTBEAT_FIRST,extrasBundle);
break;
case HEARTBEAT_RESTORED:
extrasBundle=new Bundle();
extrasBundle.putInt(Extra.EXTRA_MAVLINK_VERSION,drone.getMavlinkVersion());
callback.onDroneEvent(Event.EVENT_HEARTBEAT_RESTORED,extrasBundle);
break;
case CONNECTED:
callback.onDroneEvent(Event.EVENT_CONNECTED,emptyBundle);
break;
case MISSION_SENT:
break;
case INVALID_POLYGON:
break;
case MISSION_WP_UPDATE:
break;
case FOLLOW_START:
callback.onDroneEvent(Event.EVENT_FOLLOW_START,emptyBundle);
break;
case FOLLOW_STOP:
callback.onDroneEvent(Event.EVENT_FOLLOW_STOP,emptyBundle);
break;
case FOLLOW_UPDATE:
case FOLLOW_CHANGE_TYPE:
callback.onDroneEvent(Event.EVENT_FOLLOW_UPDATE,emptyBundle);
break;
case WARNING_400FT_EXCEEDED:
break;
case WARNING_SIGNAL_WEAK:
break;
case WARNING_NO_GPS:
break;
case MAGNETOMETER:
break;
case FOOTPRINT:
break;
}
}
 catch (DeadObjectException e) {
handleDeadObjectException(e);
}
catch (RemoteException e) {
Log.e(TAG,e.getMessage(),e);
}
}"
95016,"@Override public void onEndReceivingParameters(List<Parameter> parameter){
  try {
    getCallback().onDroneEvent(Event.EVENT_PARAMETERS_REFRESH_ENDED,emptyBundle);
  }
 catch (  RemoteException e) {
    Log.e(TAG,e.getMessage(),e);
  }
}","@Override public void onEndReceivingParameters(List<Parameter> parameter){
  try {
    getCallback().onDroneEvent(Event.EVENT_PARAMETERS_REFRESH_ENDED,emptyBundle);
  }
 catch (  DeadObjectException e) {
    handleDeadObjectException(e);
  }
catch (  RemoteException e) {
    Log.e(TAG,e.getMessage(),e);
  }
}"
95017,"@Override public void finished(FitPoints fit,double[] offsets){
  try {
    double fitness=fit.getFitness();
    Bundle paramsBundle=new Bundle(2);
    paramsBundle.putDouble(Extra.EXTRA_CALIBRATION_MAG_FITNESS,fitness);
    paramsBundle.putDoubleArray(Extra.EXTRA_CALIBRATION_MAG_OFFSETS,offsets);
    getCallback().onDroneEvent(Event.EVENT_CALIBRATION_MAG_COMPLETED,paramsBundle);
  }
 catch (  Exception e) {
    Log.e(TAG,e.getMessage(),e);
  }
}","@Override public void finished(FitPoints fit,double[] offsets){
  try {
    double fitness=fit.getFitness();
    Bundle paramsBundle=new Bundle(2);
    paramsBundle.putDouble(Extra.EXTRA_CALIBRATION_MAG_FITNESS,fitness);
    paramsBundle.putDoubleArray(Extra.EXTRA_CALIBRATION_MAG_OFFSETS,offsets);
    try {
      getCallback().onDroneEvent(Event.EVENT_CALIBRATION_MAG_COMPLETED,paramsBundle);
    }
 catch (    DeadObjectException e) {
      handleDeadObjectException(e);
    }
  }
 catch (  Exception e) {
    Log.e(TAG,e.getMessage(),e);
  }
}"
95018,"@Override public void onStarted(List<ThreeSpacePoint> points){
  Bundle paramsBundle=new Bundle();
  paramsBundle.putParcelableArrayList(Extra.EXTRA_CALIBRATION_MAG_POINTS,MathUtil.threeSpacePointToPoint3D(points));
  try {
    getCallback().onDroneEvent(Event.EVENT_CALIBRATION_MAG_STARTED,paramsBundle);
  }
 catch (  RemoteException e) {
    Log.e(TAG,e.getMessage(),e);
  }
}","@Override public void onStarted(List<ThreeSpacePoint> points){
  Bundle paramsBundle=new Bundle();
  paramsBundle.putParcelableArrayList(Extra.EXTRA_CALIBRATION_MAG_POINTS,MathUtil.threeSpacePointToPoint3D(points));
  try {
    getCallback().onDroneEvent(Event.EVENT_CALIBRATION_MAG_STARTED,paramsBundle);
  }
 catch (  DeadObjectException e) {
    handleDeadObjectException(e);
  }
catch (  RemoteException e) {
    Log.e(TAG,e.getMessage(),e);
  }
}"
95019,"@Override public void onParameterReceived(Parameter parameter,int index,int count){
  try {
    Bundle paramsBundle=new Bundle(2);
    paramsBundle.putInt(Extra.EXTRA_PARAMETER_INDEX,index);
    paramsBundle.putInt(Extra.EXTRA_PARAMETERS_COUNT,count);
    getCallback().onDroneEvent(Event.EVENT_PARAMETERS_RECEIVED,paramsBundle);
  }
 catch (  RemoteException e) {
    Log.e(TAG,e.getMessage(),e);
  }
}","@Override public void onParameterReceived(Parameter parameter,int index,int count){
  try {
    Bundle paramsBundle=new Bundle(2);
    paramsBundle.putInt(Extra.EXTRA_PARAMETER_INDEX,index);
    paramsBundle.putInt(Extra.EXTRA_PARAMETERS_COUNT,count);
    getCallback().onDroneEvent(Event.EVENT_PARAMETERS_RECEIVED,paramsBundle);
  }
 catch (  DeadObjectException e) {
    handleDeadObjectException(e);
  }
catch (  RemoteException e) {
    Log.e(TAG,e.getMessage(),e);
  }
}"
95020,"@Override public void connect() throws RemoteException {
  try {
    getDroneMgr().connect();
  }
 catch (  ConnectionException e) {
    getCallback().onConnectionFailed(new ConnectionResult(0,e.getMessage()));
  }
}","@Override public void connect() throws RemoteException {
  try {
    getDroneMgr().connect();
  }
 catch (  ConnectionException e) {
    try {
      getCallback().onConnectionFailed(new ConnectionResult(0,e.getMessage()));
    }
 catch (    DeadObjectException d) {
      handleDeadObjectException(d);
    }
  }
}"
95021,"@Override public void onBeginReceivingParameters(){
  try {
    getCallback().onDroneEvent(Event.EVENT_PARAMETERS_REFRESH_STARTED,emptyBundle);
  }
 catch (  RemoteException e) {
    Log.e(TAG,e.getMessage(),e);
  }
}","@Override public void onBeginReceivingParameters(){
  try {
    getCallback().onDroneEvent(Event.EVENT_PARAMETERS_REFRESH_STARTED,emptyBundle);
  }
 catch (  DeadObjectException e) {
    handleDeadObjectException(e);
  }
catch (  RemoteException e) {
    Log.e(TAG,e.getMessage(),e);
  }
}"
95022,"@Override public void newEstimation(FitPoints fit,List<ThreeSpacePoint> points){
  double fitness=fit.getFitness();
  double[] fitCenter=fit.center.isNaN() ? null : new double[]{fit.center.getEntry(0),fit.center.getEntry(1),fit.center.getEntry(2)};
  double[] fitRadii=fit.radii.isNaN() ? null : new double[]{fit.radii.getEntry(0),fit.radii.getEntry(1),fit.radii.getEntry(2)};
  Bundle paramsBundle=new Bundle(4);
  paramsBundle.putDouble(Extra.EXTRA_CALIBRATION_MAG_FITNESS,fitness);
  paramsBundle.putDoubleArray(Extra.EXTRA_CALIBRATION_MAG_FIT_CENTER,fitCenter);
  paramsBundle.putDoubleArray(Extra.EXTRA_CALIBRATION_MAG_FIT_RADII,fitRadii);
  paramsBundle.putParcelableArrayList(Extra.EXTRA_CALIBRATION_MAG_POINTS,MathUtil.threeSpacePointToPoint3D(points));
  try {
    getCallback().onDroneEvent(Event.EVENT_CALIBRATION_MAG_ESTIMATION,paramsBundle);
  }
 catch (  RemoteException e) {
    Log.e(TAG,e.getMessage(),e);
  }
}","@Override public void newEstimation(FitPoints fit,List<ThreeSpacePoint> points){
  double fitness=fit.getFitness();
  double[] fitCenter=fit.center.isNaN() ? null : new double[]{fit.center.getEntry(0),fit.center.getEntry(1),fit.center.getEntry(2)};
  double[] fitRadii=fit.radii.isNaN() ? null : new double[]{fit.radii.getEntry(0),fit.radii.getEntry(1),fit.radii.getEntry(2)};
  Bundle paramsBundle=new Bundle(4);
  paramsBundle.putDouble(Extra.EXTRA_CALIBRATION_MAG_FITNESS,fitness);
  paramsBundle.putDoubleArray(Extra.EXTRA_CALIBRATION_MAG_FIT_CENTER,fitCenter);
  paramsBundle.putDoubleArray(Extra.EXTRA_CALIBRATION_MAG_FIT_RADII,fitRadii);
  paramsBundle.putParcelableArrayList(Extra.EXTRA_CALIBRATION_MAG_POINTS,MathUtil.threeSpacePointToPoint3D(points));
  try {
    getCallback().onDroneEvent(Event.EVENT_CALIBRATION_MAG_ESTIMATION,paramsBundle);
  }
 catch (  DeadObjectException e) {
    handleDeadObjectException(e);
  }
catch (  RemoteException e) {
    Log.e(TAG,e.getMessage(),e);
  }
}"
95023,"@Override public void startIMUCalibration() throws RemoteException {
  if (!getDroneMgr().getDrone().getCalibrationSetup().startCalibration()) {
    Bundle extrasBundle=new Bundle(1);
    extrasBundle.putString(Extra.EXTRA_CALIBRATION_IMU_MESSAGE,context.getString(R.string.failed_start_calibration_message));
    getCallback().onDroneEvent(Event.EVENT_CALIBRATION_IMU_ERROR,extrasBundle);
  }
}","@Override public void startIMUCalibration() throws RemoteException {
  if (!getDroneMgr().getDrone().getCalibrationSetup().startCalibration()) {
    Bundle extrasBundle=new Bundle(1);
    extrasBundle.putString(Extra.EXTRA_CALIBRATION_IMU_MESSAGE,context.getString(R.string.failed_start_calibration_message));
    try {
      getCallback().onDroneEvent(Event.EVENT_CALIBRATION_IMU_ERROR,extrasBundle);
    }
 catch (    DeadObjectException e) {
      handleDeadObjectException(e);
    }
  }
}"
95024,"boolean disconnectFromApi(final ConnectionParameter connParams,IDroidPlannerApiCallback callback){
  ConcurrentHashMap<IBinder,DPApi> binderApis=dpApisCache.get(connParams);
  if (binderApis == null) {
    return false;
  }
  boolean wasRemoved=false;
  DPApi dpApi=binderApis.remove(callback.asBinder());
  if (dpApi != null) {
    dpApi.destroy();
    wasRemoved=true;
  }
  if (binderApis.isEmpty()) {
    dpApisCache.remove(connParams);
    DroneManager droneMgr=dronePerConnection.remove(connParams);
    droneMgr.destroy();
    lbm.sendBroadcast(new Intent(ACTION_DRONE_DESTROYED));
  }
  return wasRemoved;
}","boolean disconnectFromApi(final ConnectionParameter connParams,IDroidPlannerApiCallback callback){
  ConcurrentHashMap<IBinder,DPApi> binderApis=dpApisCache.get(connParams);
  if (binderApis == null) {
    return false;
  }
  boolean wasRemoved=false;
  DPApi dpApi=binderApis.remove(callback.asBinder());
  if (dpApi != null) {
    dpApi.destroy();
    wasRemoved=true;
  }
  if (binderApis.isEmpty()) {
    dpApisCache.remove(connParams);
    DroneManager droneMgr=dronePerConnection.remove(connParams);
    if (droneMgr != null)     droneMgr.destroy();
    lbm.sendBroadcast(new Intent(ACTION_DRONE_DESTROYED));
  }
  return wasRemoved;
}"
95025,"@Override public void onReceive(Context context,Intent intent){
  final String action=intent.getAction();
  if (DroneManager.ACTION_DRONE_CREATED.equals(action) || DroneManager.ACTION_DRONE_DESTROYED.equals(action)) {
    refreshDroneList();
  }
}","@Override public void onReceive(Context context,Intent intent){
  final String action=intent.getAction();
  if (DroidPlannerService.ACTION_DRONE_CREATED.equals(action) || DroidPlannerService.ACTION_DRONE_DESTROYED.equals(action)) {
    refreshDroneList();
  }
}"
95026,"@Override public void onDroneEvent(DroneInterfaces.DroneEventsType event,Drone drone){
  final IDroidPlannerApiCallback callback=getCallback();
  try {
switch (event) {
case DISCONNECTED:
      disconnectFromDrone();
    break;
case GUIDEDPOINT:
  break;
case NAVIGATION:
break;
case RADIO:
callback.onDroneEvent(Event.EVENT_RADIO,emptyBundle);
break;
case RC_IN:
break;
case RC_OUT:
break;
case ARMING:
callback.onDroneEvent(Event.EVENT_ARMING,emptyBundle);
break;
case AUTOPILOT_WARNING:
callback.onDroneEvent(Event.EVENT_AUTOPILOT_FAILSAFE,emptyBundle);
break;
case MODE:
callback.onDroneEvent(Event.EVENT_VEHICLE_MODE,emptyBundle);
break;
case ATTITUDE:
case ORIENTATION:
callback.onDroneEvent(Event.EVENT_ATTITUDE,emptyBundle);
break;
case SPEED:
callback.onDroneEvent(Event.EVENT_SPEED,emptyBundle);
break;
case BATTERY:
callback.onDroneEvent(Event.EVENT_BATTERY,emptyBundle);
break;
case STATE:
callback.onDroneEvent(Event.EVENT_STATE,emptyBundle);
break;
case MISSION_UPDATE:
break;
case MISSION_RECEIVED:
break;
case TYPE:
callback.onDroneEvent(Event.EVENT_TYPE_UPDATED,emptyBundle);
break;
case HOME:
callback.onDroneEvent(Event.EVENT_HOME,emptyBundle);
break;
case GPS:
case GPS_FIX:
case GPS_COUNT:
callback.onDroneEvent(Event.EVENT_GPS,emptyBundle);
break;
case PARAMETER:
case PARAMETERS_DOWNLOADED:
callback.onDroneEvent(Event.EVENT_PARAMETERS_RECEIVED,emptyBundle);
break;
case CALIBRATION_IMU:
callback.onDroneEvent(Event.EVENT_CALIBRATION_IMU,emptyBundle);
break;
case CALIBRATION_TIMEOUT:
callback.onDroneEvent(Event.EVENT_CALIBRATION_TIMEOUT,emptyBundle);
break;
case HEARTBEAT_TIMEOUT:
break;
case HEARTBEAT_FIRST:
break;
case HEARTBEAT_RESTORED:
break;
case CONNECTED:
callback.onDroneEvent(Event.EVENT_CONNECTED,emptyBundle);
break;
case MISSION_SENT:
break;
case ARMING_STARTED:
break;
case INVALID_POLYGON:
break;
case MISSION_WP_UPDATE:
break;
case FOLLOW_START:
break;
case FOLLOW_STOP:
break;
case FOLLOW_UPDATE:
break;
case FOLLOW_CHANGE_TYPE:
break;
case WARNING_400FT_EXCEEDED:
break;
case WARNING_SIGNAL_WEAK:
break;
case FIRMWARE:
break;
case WARNING_NO_GPS:
break;
case MAGNETOMETER:
break;
case FOOTPRINT:
break;
}
}
 catch (RemoteException e) {
Log.e(TAG,e.getMessage(),e);
}
}","@Override public void onDroneEvent(DroneInterfaces.DroneEventsType event,Drone drone){
  final IDroidPlannerApiCallback callback=getCallback();
  try {
switch (event) {
case DISCONNECTED:
      callback.onDroneEvent(Event.EVENT_DISCONNECTED,emptyBundle);
    break;
case GUIDEDPOINT:
  break;
case NAVIGATION:
break;
case RADIO:
callback.onDroneEvent(Event.EVENT_RADIO,emptyBundle);
break;
case RC_IN:
break;
case RC_OUT:
break;
case ARMING:
callback.onDroneEvent(Event.EVENT_ARMING,emptyBundle);
break;
case AUTOPILOT_WARNING:
callback.onDroneEvent(Event.EVENT_AUTOPILOT_FAILSAFE,emptyBundle);
break;
case MODE:
callback.onDroneEvent(Event.EVENT_VEHICLE_MODE,emptyBundle);
break;
case ATTITUDE:
case ORIENTATION:
callback.onDroneEvent(Event.EVENT_ATTITUDE,emptyBundle);
break;
case SPEED:
callback.onDroneEvent(Event.EVENT_SPEED,emptyBundle);
break;
case BATTERY:
callback.onDroneEvent(Event.EVENT_BATTERY,emptyBundle);
break;
case STATE:
callback.onDroneEvent(Event.EVENT_STATE,emptyBundle);
break;
case MISSION_UPDATE:
break;
case MISSION_RECEIVED:
break;
case TYPE:
callback.onDroneEvent(Event.EVENT_TYPE_UPDATED,emptyBundle);
break;
case HOME:
callback.onDroneEvent(Event.EVENT_HOME,emptyBundle);
break;
case GPS:
case GPS_FIX:
case GPS_COUNT:
callback.onDroneEvent(Event.EVENT_GPS,emptyBundle);
break;
case PARAMETER:
case PARAMETERS_DOWNLOADED:
callback.onDroneEvent(Event.EVENT_PARAMETERS_RECEIVED,emptyBundle);
break;
case CALIBRATION_IMU:
callback.onDroneEvent(Event.EVENT_CALIBRATION_IMU,emptyBundle);
break;
case CALIBRATION_TIMEOUT:
callback.onDroneEvent(Event.EVENT_CALIBRATION_TIMEOUT,emptyBundle);
break;
case HEARTBEAT_TIMEOUT:
callback.onDroneEvent(Event.EVENT_HEARTBEAT_TIMEOUT,emptyBundle);
break;
case HEARTBEAT_FIRST:
break;
case HEARTBEAT_RESTORED:
break;
case CONNECTED:
callback.onDroneEvent(Event.EVENT_CONNECTED,emptyBundle);
break;
case MISSION_SENT:
break;
case ARMING_STARTED:
break;
case INVALID_POLYGON:
break;
case MISSION_WP_UPDATE:
break;
case FOLLOW_START:
break;
case FOLLOW_STOP:
break;
case FOLLOW_UPDATE:
break;
case FOLLOW_CHANGE_TYPE:
break;
case WARNING_400FT_EXCEEDED:
break;
case WARNING_SIGNAL_WEAK:
break;
case FIRMWARE:
break;
case WARNING_NO_GPS:
break;
case MAGNETOMETER:
break;
case FOOTPRINT:
break;
}
}
 catch (RemoteException e) {
Log.e(TAG,e.getMessage(),e);
}
}"
95027,"IDroidPlannerApi connectToApi(ConnectionParameter connParams,IDroidPlannerApiCallback callback) throws RemoteException {
  ConcurrentHashMap<IBinder,IDroidPlannerApi> binderApis=dpApisCache.putIfAbsent(connParams,new ConcurrentHashMap<IBinder,IDroidPlannerApi>());
  return binderApis.putIfAbsent(callback.asBinder(),new DPApi(this,connParams,callback));
}","IDroidPlannerApi connectToApi(ConnectionParameter connParams,IDroidPlannerApiCallback callback) throws RemoteException {
  ConcurrentHashMap<IBinder,IDroidPlannerApi> binderApis=dpApisCache.get(connParams);
  if (binderApis == null) {
    binderApis=new ConcurrentHashMap<IBinder,IDroidPlannerApi>();
    ConcurrentHashMap<IBinder,IDroidPlannerApi> previous=dpApisCache.putIfAbsent(connParams,binderApis);
    if (previous != null)     binderApis=previous;
  }
  IBinder callbackBinder=callback.asBinder();
  IDroidPlannerApi dpApi=binderApis.get(callbackBinder);
  if (dpApi == null) {
    dpApi=new DPApi(this,connParams,callback);
    IDroidPlannerApi previous=binderApis.putIfAbsent(callbackBinder,dpApi);
    if (previous != null)     dpApi=previous;
  }
  return dpApi;
}"
95028,"boolean disconnectFromApi(ConnectionParameter connParams,IDroidPlannerApiCallback callback){
  ConcurrentHashMap<IBinder,IDroidPlannerApi> binderApis=dpApisCache.get(connParams);
  if (binderApis == null)   return false;
  boolean wasRemoved=binderApis.remove(callback.asBinder()) != null;
  if (binderApis.isEmpty()) {
    dpApisCache.remove(connParams);
    DroneManager droneMgr=dronePerConnection.remove(connParams);
    droneMgr.destroy();
  }
  return wasRemoved;
}","boolean disconnectFromApi(final ConnectionParameter connParams,IDroidPlannerApiCallback callback){
  ConcurrentHashMap<IBinder,IDroidPlannerApi> binderApis=dpApisCache.get(connParams);
  if (binderApis == null)   return false;
  boolean wasRemoved=binderApis.remove(callback.asBinder()) != null;
  if (binderApis.isEmpty()) {
    dpApisCache.remove(connParams);
    DroneManager droneMgr=dronePerConnection.remove(connParams);
    droneMgr.destroy();
    lbm.sendBroadcast(new Intent(ACTION_DRONE_DESTROYED));
  }
  return wasRemoved;
}"
95029,"DroneManager getDroneForConnection(ConnectionParameter params) throws ConnectionException {
  return dronePerConnection.putIfAbsent(params,new DroneManager(getApplicationContext(),params));
}","DroneManager getDroneForConnection(final ConnectionParameter params) throws ConnectionException {
  DroneManager droneMgr=dronePerConnection.get(params);
  if (droneMgr == null) {
    droneMgr=new DroneManager(getApplicationContext(),handler,params);
    DroneManager previous=dronePerConnection.putIfAbsent(params,droneMgr);
    if (previous != null)     droneMgr=previous;
    lbm.sendBroadcast(new Intent(ACTION_DRONE_CREATED));
  }
  return droneMgr;
}"
95030,"public void clear(){
  removeItemList(mMissionItems);
}","public void clear(){
  selection.clearSelection();
  removeItemList(mMissionItems);
}"
95031,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.menu_send_mission:
    final MissionProxy missionProxy=app.getMissionProxy();
  if (drone.getMission().hasTakeoffAndLandOrRTL()) {
    missionProxy.sendMissionToAPM();
  }
 else {
    YesNoWithPrefsDialog dialog=YesNoWithPrefsDialog.newInstance(getApplicationContext(),""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new YesNoDialog.Listener(){
      @Override public void onYes(){
        missionProxy.addTakeOffAndRTL();
        missionProxy.sendMissionToAPM();
      }
      @Override public void onNo(){
        missionProxy.sendMissionToAPM();
      }
    }
,getString(R.string.pref_auto_insert_mission_takeoff_rtl_land_key));
    if (dialog != null) {
      dialog.show(getSupportFragmentManager(),""String_Node_Str"");
    }
  }
return true;
case R.id.menu_load_mission:
drone.getWaypointManager().getWaypoints();
return true;
case android.R.id.home:
NavUtils.navigateUpFromSameTask(this);
return true;
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.menu_send_mission:
    final MissionProxy missionProxy=app.getMissionProxy();
  if (missionProxy.getItems().isEmpty() || drone.getMission().hasTakeoffAndLandOrRTL()) {
    missionProxy.sendMissionToAPM();
  }
 else {
    YesNoWithPrefsDialog dialog=YesNoWithPrefsDialog.newInstance(getApplicationContext(),""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new YesNoDialog.Listener(){
      @Override public void onYes(){
        missionProxy.addTakeOffAndRTL();
        missionProxy.sendMissionToAPM();
      }
      @Override public void onNo(){
        missionProxy.sendMissionToAPM();
      }
    }
,getString(R.string.pref_auto_insert_mission_takeoff_rtl_land_key));
    if (dialog != null) {
      dialog.show(getSupportFragmentManager(),""String_Node_Str"");
    }
  }
return true;
case R.id.menu_load_mission:
drone.getWaypointManager().getWaypoints();
return true;
case android.R.id.home:
NavUtils.navigateUpFromSameTask(this);
return true;
default :
return super.onOptionsItemSelected(item);
}
}"
95032,"public void addTakeOffAndRTL(){
  if (!mMission.isFirstItemTakeoff()) {
    final Takeoff takeOff=new Takeoff(mMission,new Altitude(Takeoff.DEFAULT_TAKEOFF_ALTITUDE));
    mMissionItems.add(0,new MissionItemProxy(this,takeOff));
    mMission.addMissionItem(0,takeOff);
  }
  if (!mMission.isLastItemLandOrRTL()) {
    final ReturnToHome rtl=new ReturnToHome(mMission);
    mMissionItems.add(new MissionItemProxy(this,rtl));
    mMission.addMissionItem(rtl);
  }
}","public void addTakeOffAndRTL(){
  if (!mMission.isFirstItemTakeoff()) {
    Altitude defaultAlt=new Altitude(Takeoff.DEFAULT_TAKEOFF_ALTITUDE);
    if (!mMissionItems.isEmpty()) {
      MissionItem firstItem=mMissionItems.get(0).getMissionItem();
      if (firstItem instanceof SpatialCoordItem)       defaultAlt=new Altitude(((SpatialCoordItem)firstItem).getCoordinate().getAltitude().valueInMeters());
    }
    final Takeoff takeOff=new Takeoff(mMission,defaultAlt);
    mMissionItems.add(0,new MissionItemProxy(this,takeOff));
    mMission.addMissionItem(0,takeOff);
  }
  if (!mMission.isLastItemLandOrRTL()) {
    final ReturnToHome rtl=new ReturnToHome(mMission);
    mMissionItems.add(new MissionItemProxy(this,rtl));
    mMission.addMissionItem(rtl);
  }
}"
95033,"public void clear(){
  removeItemList(mMissionItems);
}","public void clear(){
  selection.clearSelection();
  removeItemList(mMissionItems);
}"
95034,"public boolean isLastItemLandOrRTL(){
  MissionItem last=items.get(items.size() - 1);
  return (last instanceof ReturnToHome) || (last instanceof Land);
}","public boolean isLastItemLandOrRTL(){
  if (items.isEmpty())   return false;
  MissionItem last=items.get(items.size() - 1);
  return (last instanceof ReturnToHome) || (last instanceof Land);
}"
95035,"public boolean isFirstItemTakeoff(){
  return items.get(0) instanceof Takeoff;
}","public boolean isFirstItemTakeoff(){
  return !items.isEmpty() && items.get(0) instanceof Takeoff;
}"
95036,"@Override public void onDroneEvent(DroneEventsType event,Drone drone){
  super.onDroneEvent(event,drone);
switch (event) {
case MISSION_UPDATE:
    Length missionLength=missionProxy.getMissionLength();
  Speed speedParameter=drone.getSpeed().getSpeedParameter();
String infoString=""String_Node_Str"" + missionLength;
if (speedParameter != null) {
int time=(int)(missionLength.valueInMeters() / speedParameter.valueInMetersPerSecond());
infoString=infoString + String.format(""String_Node_Str"",time / 60,time % 60);
}
infoView.setText(infoString);
if (missionProxy.selection.getSelected().isEmpty() && itemDetailFragment != null) {
removeItemDetail();
}
break;
default :
break;
}
}","@Override public void onDroneEvent(DroneEventsType event,Drone drone){
  super.onDroneEvent(event,drone);
switch (event) {
case MISSION_UPDATE:
    Length missionLength=missionProxy.getMissionLength();
  Speed speedParameter=drone.getSpeed().getSpeedParameter();
String infoString=""String_Node_Str"" + missionLength;
if (speedParameter != null) {
int time=(int)(missionLength.valueInMeters() / speedParameter.valueInMetersPerSecond());
infoString=infoString + String.format(""String_Node_Str"",time / 60,time % 60);
}
infoView.setText(infoString);
if (missionProxy.selection.getSelected().isEmpty() && itemDetailFragment != null) {
removeItemDetail();
}
break;
case MISSION_RECEIVED:
if (planningMapFragment != null) {
planningMapFragment.zoomToFit();
}
break;
default :
break;
}
}"
95037,"@Override public void onMarkerDragEnd(MarkerInfo markerInfo){
  checkForWaypointMarker(markerInfo);
  checkForPolygonMarker();
}","@Override public void onMarkerDragEnd(MarkerInfo markerInfo){
  checkForWaypointMarker(markerInfo);
}"
95038,"@Override public void onResume(){
  super.onResume();
  mMapFragment.selectAutoPanMode(mAppPrefs.getAutoPanMode());
  guidedModeOnLongPress=mAppPrefs.isGuidedModeOnLongPressEnabled();
}","@Override public void onResume(){
  super.onResume();
  mMapFragment.selectAutoPanMode(mAppPrefs.getAutoPanMode());
  guidedModeOnLongPress=mAppPrefs.isGuidedModeOnLongPressEnabled();
  if (!didZoomOnUserLocation) {
    super.goToMyLocation();
    didZoomOnUserLocation=true;
  }
}"
95039,"@Override public void onDroneEvent(DroneEventsType event,Drone drone){
  super.onDroneEvent(event,drone);
switch (event) {
case MISSION_UPDATE:
    Length missionLength=missionProxy.getMissionLength();
  Speed speedParameter=drone.getSpeed().getSpeedParameter();
String infoString=""String_Node_Str"" + missionLength;
if (speedParameter != null) {
int time=(int)(missionLength.valueInMeters() / speedParameter.valueInMetersPerSecond());
infoString=infoString + String.format(""String_Node_Str"",time / 60,time % 60);
}
infoView.setText(infoString);
if (missionProxy.selection.getSelected().isEmpty() && itemDetailFragment != null) {
removeItemDetail();
}
break;
default :
break;
}
}","@Override public void onDroneEvent(DroneEventsType event,Drone drone){
  super.onDroneEvent(event,drone);
switch (event) {
case MISSION_UPDATE:
    Length missionLength=missionProxy.getMissionLength();
  Speed speedParameter=drone.getSpeed().getSpeedParameter();
String infoString=""String_Node_Str"" + missionLength;
if (speedParameter != null) {
int time=(int)(missionLength.valueInMeters() / speedParameter.valueInMetersPerSecond());
infoString=infoString + String.format(""String_Node_Str"",time / 60,time % 60);
}
infoView.setText(infoString);
if (missionProxy.selection.getSelected().isEmpty() && itemDetailFragment != null) {
removeItemDetail();
}
break;
case MISSION_RECEIVED:
if (planningMapFragment != null) {
planningMapFragment.zoomToFit();
}
break;
default :
break;
}
}"
95040,"@Override public boolean onActionItemClicked(ActionMode mode,MenuItem item){
switch (item.getItemId()) {
case R.id.menu_action_multi_edit:
    if (mMultiEditEnabled) {
      removeItemDetail();
      enableMultiEdit(false);
      return true;
    }
  final List<MissionItemProxy> selectedProxies=missionProxy.selection.getSelected();
if (selectedProxies.size() >= 1) {
  showItemDetail(selectMissionDetailType(selectedProxies));
  enableMultiEdit(true);
  return true;
}
Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
return true;
case R.id.menu_action_delete:
missionProxy.removeSelection(missionProxy.selection);
mode.finish();
return true;
case R.id.menu_action_reverse:
missionProxy.reverse();
return true;
default :
return false;
}
}","@Override public boolean onActionItemClicked(ActionMode mode,MenuItem item){
switch (item.getItemId()) {
case R.id.menu_action_multi_edit:
    if (mMultiEditEnabled) {
      removeItemDetail();
      enableMultiEdit(false);
      return true;
    }
  final List<MissionItemProxy> selectedProxies=missionProxy.selection.getSelected();
if (selectedProxies.size() >= 1) {
  showItemDetail(selectMissionDetailType(selectedProxies));
  enableMultiEdit(true);
  return true;
}
Toast.makeText(getApplicationContext(),""String_Node_Str"",Toast.LENGTH_LONG).show();
return true;
case R.id.menu_action_delete:
missionProxy.removeSelection(missionProxy.selection);
mode.finish();
planningMapFragment.zoomToFit();
return true;
case R.id.menu_action_reverse:
missionProxy.reverse();
return true;
default :
return false;
}
}"
95041,"@Override public void onItemClick(MissionItemProxy item){
  enableMultiEdit(false);
switch (getTool()) {
default :
    if (contextualActionBar != null) {
      if (missionProxy.selection.selectionContains(item)) {
        missionProxy.selection.removeItemFromSelection(item);
      }
 else {
        missionProxy.selection.addToSelection(item);
      }
    }
 else {
      if (missionProxy.selection.selectionContains(item)) {
        missionProxy.selection.clearSelection();
      }
 else {
        editorToolsFragment.setTool(EditorTools.NONE);
        missionProxy.selection.setSelectionTo(item);
      }
    }
  break;
case TRASH:
missionProxy.removeItem(item);
missionProxy.selection.clearSelection();
if (missionProxy.getItems().size() <= 0) {
editorToolsFragment.setTool(EditorTools.NONE);
}
break;
}
}","@Override public void onItemClick(MissionItemProxy item,boolean zoomToFit){
  enableMultiEdit(false);
switch (getTool()) {
default :
    if (contextualActionBar != null) {
      if (missionProxy.selection.selectionContains(item)) {
        missionProxy.selection.removeItemFromSelection(item);
      }
 else {
        missionProxy.selection.addToSelection(item);
      }
    }
 else {
      if (missionProxy.selection.selectionContains(item)) {
        missionProxy.selection.clearSelection();
      }
 else {
        editorToolsFragment.setTool(EditorTools.NONE);
        missionProxy.selection.setSelectionTo(item);
      }
    }
  break;
case TRASH:
missionProxy.removeItem(item);
missionProxy.selection.clearSelection();
if (missionProxy.getItems().size() <= 0) {
editorToolsFragment.setTool(EditorTools.NONE);
}
break;
}
if (zoomToFit) {
List<MissionItemProxy> selected=missionProxy.selection.getSelected();
if (selected.isEmpty()) {
planningMapFragment.zoomToFit();
}
 else {
planningMapFragment.zoomToFit(MissionProxy.getVisibleCoords(selected));
}
}
}"
95042,public void onItemClick(MissionItemProxy item);,"public void onItemClick(MissionItemProxy item,boolean zoomToFit);"
95043,"@Override public void onItemClick(AdapterView<?> adapter,View view,int position,long id){
  MissionItemProxy missionItem=(MissionItemProxy)adapter.getItemAtPosition(position);
  editorListener.onItemClick(missionItem);
}","@Override public void onItemClick(AdapterView<?> adapter,View view,int position,long id){
  MissionItemProxy missionItem=(MissionItemProxy)adapter.getItemAtPosition(position);
  editorListener.onItemClick(missionItem,true);
}"
95044,"@Override public void onMarkerDragEnd(MarkerInfo markerInfo){
  checkForWaypointMarker(markerInfo);
  checkForPolygonMarker();
}","@Override public void onMarkerDragEnd(MarkerInfo markerInfo){
  checkForWaypointMarker(markerInfo);
}"
95045,"public void zoomToFit(){
  final List<Coord2D> visibleCoords=missionProxy.getVisibleCoords();
  final Coord2D homeCoord=drone.getHome().getCoord();
  if (homeCoord != null && !homeCoord.isEmpty())   visibleCoords.add(homeCoord);
  mMapFragment.zoomToFit(visibleCoords);
}","public void zoomToFit(List<Coord2D> itemsToFit){
  if (!itemsToFit.isEmpty()) {
    mMapFragment.zoomToFit(itemsToFit);
  }
}"
95046,"@Override public boolean onMarkerClick(MarkerInfo info){
  if (info instanceof MissionItemMarkerInfo) {
    editorListener.onItemClick(((MissionItemMarkerInfo)info).getMarkerOrigin());
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean onMarkerClick(MarkerInfo info){
  if (info instanceof MissionItemMarkerInfo) {
    editorListener.onItemClick(((MissionItemMarkerInfo)info).getMarkerOrigin(),false);
    return true;
  }
 else {
    return false;
  }
}"
95047,"@Override public void onResume(){
  super.onResume();
  mMapFragment.selectAutoPanMode(mAppPrefs.getAutoPanMode());
  guidedModeOnLongPress=mAppPrefs.isGuidedModeOnLongPressEnabled();
}","@Override public void onResume(){
  super.onResume();
  mMapFragment.selectAutoPanMode(mAppPrefs.getAutoPanMode());
  guidedModeOnLongPress=mAppPrefs.isGuidedModeOnLongPressEnabled();
  if (!didZoomOnUserLocation) {
    super.goToMyLocation();
    didZoomOnUserLocation=true;
  }
}"
95048,"@Override public void run(){
  final List<MarkerInfo> missionMarkerInfos=missionProxy.getMarkersInfos();
  final boolean isThereMissionMarkers=!missionMarkerInfos.isEmpty();
  final boolean isHomeValid=home.isValid();
  final Set<MarkerInfo> markersOnTheMap=mMapFragment.getMarkerInfoList();
  if (!markersOnTheMap.isEmpty()) {
    if (isHomeValid) {
      markersOnTheMap.remove(home);
    }
    if (isThereMissionMarkers) {
      markersOnTheMap.removeAll(missionMarkerInfos);
    }
    mMapFragment.removeMarkers(markersOnTheMap);
  }
  if (isHomeValid) {
    mMapFragment.updateMarker(home);
  }
  if (isThereMissionMarkers) {
    mMapFragment.updateMarkers(missionMarkerInfos,isMissionDraggable());
  }
  mMapFragment.updateMissionPath(missionProxy);
  mHandler.removeCallbacks(this);
}","@Override public void run(){
  final List<MarkerInfo> missionMarkerInfos=missionProxy.getMarkersInfos();
  final boolean isThereMissionMarkers=!missionMarkerInfos.isEmpty();
  final boolean isHomeValid=home.isValid();
  final boolean isGuidedVisible=guided.isVisible();
  final Set<MarkerInfo> markersOnTheMap=mMapFragment.getMarkerInfoList();
  if (!markersOnTheMap.isEmpty()) {
    if (isHomeValid) {
      markersOnTheMap.remove(home);
    }
    if (isGuidedVisible) {
      markersOnTheMap.remove(guided);
    }
    if (isThereMissionMarkers) {
      markersOnTheMap.removeAll(missionMarkerInfos);
    }
    mMapFragment.removeMarkers(markersOnTheMap);
  }
  if (isHomeValid) {
    mMapFragment.updateMarker(home);
  }
  if (isGuidedVisible) {
    mMapFragment.updateMarker(guided);
  }
  if (isThereMissionMarkers) {
    mMapFragment.updateMarkers(missionMarkerInfos,isMissionDraggable());
  }
  mMapFragment.updateMissionPath(missionProxy);
  mHandler.removeCallbacks(this);
}"
95049,"@Override public void enableLocationUpdates(){
  mSpeedReadings=0;
  mTotalSpeed=0f;
  LocationRequest mLocationRequest=LocationRequest.create();
  mLocationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
  mLocationRequest.setInterval(MIN_TIME_MS);
  mLocationRequest.setFastestInterval(MIN_TIME_MS);
  mLocationRequest.setSmallestDisplacement(MIN_DISTANCE_M);
  mLocationClient.requestLocationUpdates(mLocationRequest,this);
}","@Override public void enableLocationUpdates(){
  mSpeedReadings=0;
  mTotalSpeed=0f;
  gApiMgr.addTask(requestLocationUpdate);
}"
95050,"private boolean isLocationAccurate(float accuracy,float currentSpeed){
  if (accuracy >= LOCATION_ACCURACY_THRESHOLD) {
    return false;
  }
  mTotalSpeed+=currentSpeed;
  float avg=(mTotalSpeed / ++mSpeedReadings);
  if (currentSpeed > 0) {
    if (avg >= 1.0) {
      if (currentSpeed >= (avg * JUMP_FACTOR)) {
        return false;
      }
    }
  }
  return true;
}","private boolean isLocationAccurate(float accuracy,float currentSpeed){
  if (accuracy >= LOCATION_ACCURACY_THRESHOLD) {
    Log.d(TAG,""String_Node_Str"" + accuracy);
    return false;
  }
  mTotalSpeed+=currentSpeed;
  float avg=(mTotalSpeed / ++mSpeedReadings);
  if (currentSpeed > 0) {
    if (avg >= 1.0) {
      if (currentSpeed >= (avg * JUMP_FACTOR)) {
        Log.d(TAG,""String_Node_Str"" + currentSpeed);
        return false;
      }
    }
  }
  return true;
}"
95051,"public FusedLocation(Context context){
  mLocationClient=new LocationClient(context,this,this);
  mLocationClient.connect();
}","public FusedLocation(Context context){
  gApiMgr=new GoogleApiClientManager(context,LocationServices.API);
  requestLocationUpdate=gApiMgr.new GoogleApiClientTask(){
    @Override protected void doRun(){
      final LocationRequest locationRequest=LocationRequest.create();
      locationRequest.setPriority(LocationRequest.PRIORITY_HIGH_ACCURACY);
      locationRequest.setInterval(MIN_TIME_MS);
      locationRequest.setFastestInterval(MIN_TIME_MS);
      locationRequest.setSmallestDisplacement(MIN_DISTANCE_M);
      LocationServices.FusedLocationApi.requestLocationUpdates(getGoogleApiClient(),locationRequest,FusedLocation.this);
    }
  }
;
  removeLocationUpdate=gApiMgr.new GoogleApiClientTask(){
    @Override protected void doRun(){
      LocationServices.FusedLocationApi.removeLocationUpdates(getGoogleApiClient(),FusedLocation.this);
    }
  }
;
  gApiMgr.start();
}"
95052,"@Override public void disableLocationUpdates(){
  if (mLocationClient.isConnected()) {
    mLocationClient.removeLocationUpdates(this);
  }
}","@Override public void disableLocationUpdates(){
  gApiMgr.addTask(removeLocationUpdate);
}"
95053,"@Override public void onLocationChanged(Location androidLocation){
  if (receiver != null) {
    float distanceToLast=-1.0f;
    long timeSinceLast=-1L;
    if (mLastLocation != null) {
      distanceToLast=androidLocation.distanceTo(mLastLocation);
      timeSinceLast=(androidLocation.getTime() - mLastLocation.getTime());
    }
    final float currentSpeed=distanceToLast > 0f && timeSinceLast > 0 ? (distanceToLast / (timeSinceLast / 1000)) : 0f;
    org.droidplanner.core.gcs.location.Location location=new org.droidplanner.core.gcs.location.Location(new Coord2D(androidLocation.getLatitude(),androidLocation.getLongitude()),androidLocation.getBearing(),androidLocation.getSpeed(),isLocationAccurate(androidLocation.getAccuracy(),currentSpeed));
    mLastLocation=androidLocation;
    receiver.onLocationChanged(location);
  }
}","@Override public void onLocationChanged(Location androidLocation){
  if (receiver != null) {
    float distanceToLast=-1.0f;
    long timeSinceLast=-1L;
    if (mLastLocation != null) {
      distanceToLast=androidLocation.distanceTo(mLastLocation);
      timeSinceLast=(androidLocation.getTime() - mLastLocation.getTime()) / 1000;
    }
    final float currentSpeed=distanceToLast > 0f && timeSinceLast > 0 ? (distanceToLast / timeSinceLast) : 0f;
    final boolean isLocationAccurate=isLocationAccurate(androidLocation.getAccuracy(),currentSpeed);
    Log.d(TAG,""String_Node_Str"" + isLocationAccurate);
    org.droidplanner.core.gcs.location.Location location=new org.droidplanner.core.gcs.location.Location(new Coord2D(androidLocation.getLatitude(),androidLocation.getLongitude()),androidLocation.getBearing(),androidLocation.getSpeed(),isLocationAccurate);
    mLastLocation=androidLocation;
    receiver.onLocationChanged(location);
  }
}"
95054,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_flight);
  fragmentManager=getSupportFragmentManager();
  mSlidingPanel=(SlidingUpPanelLayout)findViewById(R.id.slidingPanelContainer);
  enableSlidingUpPanel(this.drone);
  warningView=(TextView)findViewById(R.id.failsafeTextView);
  final SlidingDrawer slidingDrawer=(SlidingDrawer)findViewById(R.id.slidingDrawerRight);
  if (slidingDrawer != null) {
    slidingDrawer.setOnDrawerCloseListener(new SlidingDrawer.OnDrawerCloseListener(){
      @Override public void onDrawerClosed(){
        final int slidingDrawerWidth=slidingDrawer.getContent().getWidth();
        final boolean isSlidingDrawerOpened=slidingDrawer.isOpened();
        updateLocationButtonsMargin(isSlidingDrawerOpened,slidingDrawerWidth);
      }
    }
);
    slidingDrawer.setOnDrawerOpenListener(new SlidingDrawer.OnDrawerOpenListener(){
      @Override public void onDrawerOpened(){
        final int slidingDrawerWidth=slidingDrawer.getContent().getWidth();
        final boolean isSlidingDrawerOpened=slidingDrawer.isOpened();
        updateLocationButtonsMargin(isSlidingDrawerOpened,slidingDrawerWidth);
      }
    }
);
  }
  setupMapFragment();
  mLocationButtonsContainer=findViewById(R.id.location_button_container);
  mGoToMyLocation=(ImageButton)findViewById(R.id.my_location_button);
  mGoToDroneLocation=(ImageButton)findViewById(R.id.drone_location_button);
  final ImageButton resetMapBearing=(ImageButton)findViewById(R.id.map_orientation_button);
  resetMapBearing.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mapFragment != null) {
        mapFragment.updateMapBearing(0);
      }
    }
  }
);
  mGoToMyLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToMyLocation();
        updateMapLocationButtons(AutoPanMode.DISABLED);
      }
    }
  }
);
  mGoToMyLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToMyLocation();
        updateMapLocationButtons(AutoPanMode.USER);
        return true;
      }
      return false;
    }
  }
);
  mGoToDroneLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToDroneLocation();
        updateMapLocationButtons(AutoPanMode.DISABLED);
      }
    }
  }
);
  mGoToDroneLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToDroneLocation();
        updateMapLocationButtons(AutoPanMode.DRONE);
        return true;
      }
      return false;
    }
  }
);
  Fragment flightActions=fragmentManager.findFragmentById(R.id.flightActionsFragment);
  if (flightActions == null) {
    flightActions=new FlightActionsFragment();
    fragmentManager.beginTransaction().add(R.id.flightActionsFragment,flightActions).commit();
  }
  mFlightActionsView=findViewById(R.id.flightActionsFragment);
  mFlightActionsView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (!mSlidingPanelCollapsing.get()) {
        mSlidingPanel.setPanelHeight(mFlightActionsView.getHeight());
      }
    }
  }
);
  Fragment telemetryFragment=fragmentManager.findFragmentById(R.id.telemetryFragment);
  if (telemetryFragment == null) {
    telemetryFragment=new TelemetryFragment();
    fragmentManager.beginTransaction().add(R.id.telemetryFragment,telemetryFragment).commit();
  }
  Fragment flightModePanel=fragmentManager.findFragmentById(R.id.sliding_drawer_content);
  if (flightModePanel == null) {
    flightModePanel=new FlightModePanel();
    fragmentManager.beginTransaction().add(R.id.sliding_drawer_content,flightModePanel).commit();
  }
  DroneshareDialog.perhapsShow(this);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_flight);
  fragmentManager=getSupportFragmentManager();
  mSlidingPanel=(SlidingUpPanelLayout)findViewById(R.id.slidingPanelContainer);
  enableSlidingUpPanel(this.drone);
  warningView=(TextView)findViewById(R.id.failsafeTextView);
  final SlidingDrawer slidingDrawer=(SlidingDrawer)findViewById(R.id.slidingDrawerRight);
  if (slidingDrawer != null) {
    slidingDrawer.setOnDrawerCloseListener(new SlidingDrawer.OnDrawerCloseListener(){
      @Override public void onDrawerClosed(){
        final int slidingDrawerWidth=slidingDrawer.getContent().getWidth();
        final boolean isSlidingDrawerOpened=slidingDrawer.isOpened();
        updateLocationButtonsMargin(isSlidingDrawerOpened,slidingDrawerWidth);
      }
    }
);
    slidingDrawer.setOnDrawerOpenListener(new SlidingDrawer.OnDrawerOpenListener(){
      @Override public void onDrawerOpened(){
        final int slidingDrawerWidth=slidingDrawer.getContent().getWidth();
        final boolean isSlidingDrawerOpened=slidingDrawer.isOpened();
        updateLocationButtonsMargin(isSlidingDrawerOpened,slidingDrawerWidth);
      }
    }
);
  }
  setupMapFragment();
  mLocationButtonsContainer=findViewById(R.id.location_button_container);
  mGoToMyLocation=(ImageButton)findViewById(R.id.my_location_button);
  mGoToDroneLocation=(ImageButton)findViewById(R.id.drone_location_button);
  final ImageButton resetMapBearing=(ImageButton)findViewById(R.id.map_orientation_button);
  resetMapBearing.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mapFragment != null) {
        mapFragment.updateMapBearing(0);
      }
    }
  }
);
  mGoToMyLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToMyLocation();
        updateMapLocationButtons(AutoPanMode.DISABLED);
      }
    }
  }
);
  mGoToMyLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToMyLocation();
        updateMapLocationButtons(AutoPanMode.USER);
        return true;
      }
      return false;
    }
  }
);
  mGoToDroneLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToDroneLocation();
        updateMapLocationButtons(AutoPanMode.DISABLED);
      }
    }
  }
);
  mGoToDroneLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToDroneLocation();
        updateMapLocationButtons(AutoPanMode.DRONE);
        return true;
      }
      return false;
    }
  }
);
  flightActions=(FlightActionsFragment)fragmentManager.findFragmentById(R.id.flightActionsFragment);
  if (flightActions == null) {
    flightActions=new FlightActionsFragment();
    fragmentManager.beginTransaction().add(R.id.flightActionsFragment,flightActions).commit();
  }
  mFlightActionsView=findViewById(R.id.flightActionsFragment);
  mFlightActionsView.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (!mSlidingPanelCollapsing.get()) {
        mSlidingPanel.setPanelHeight(mFlightActionsView.getHeight());
      }
    }
  }
);
  Fragment telemetryFragment=fragmentManager.findFragmentById(R.id.telemetryFragment);
  if (telemetryFragment == null) {
    telemetryFragment=new TelemetryFragment();
    fragmentManager.beginTransaction().add(R.id.telemetryFragment,telemetryFragment).commit();
  }
  Fragment flightModePanel=fragmentManager.findFragmentById(R.id.sliding_drawer_content);
  if (flightModePanel == null) {
    flightModePanel=new FlightModePanel();
    fragmentManager.beginTransaction().add(R.id.sliding_drawer_content,flightModePanel).commit();
  }
  DroneshareDialog.perhapsShow(this);
}"
95055,"private void enableSlidingUpPanel(Drone drone){
  if (mSlidingPanel == null) {
    return;
  }
  final State droneState=drone.getState();
  final boolean isEnabled=drone.getMavClient().isConnected() && droneState.isArmed() && droneState.isFlying();
  if (isEnabled) {
    mSlidingPanel.setSlidingEnabled(true);
  }
 else {
    if (!mSlidingPanelCollapsing.get()) {
      if (mSlidingPanel.isPanelExpanded()) {
        mSlidingPanel.setPanelSlideListener(mDisablePanelSliding);
        mSlidingPanel.collapsePanel();
        mSlidingPanelCollapsing.set(true);
      }
 else {
        mSlidingPanel.setSlidingEnabled(false);
        mSlidingPanelCollapsing.set(false);
      }
    }
  }
}","private void enableSlidingUpPanel(Drone drone){
  if (mSlidingPanel == null) {
    return;
  }
  final boolean isEnabled=flightActions != null && flightActions.isSlidingUpPanelEnabled(drone);
  if (isEnabled) {
    mSlidingPanel.setSlidingEnabled(true);
  }
 else {
    if (!mSlidingPanelCollapsing.get()) {
      if (mSlidingPanel.isPanelExpanded()) {
        mSlidingPanel.setPanelSlideListener(mDisablePanelSliding);
        mSlidingPanel.collapsePanel();
        mSlidingPanelCollapsing.set(true);
      }
 else {
        mSlidingPanel.setSlidingEnabled(false);
        mSlidingPanelCollapsing.set(false);
      }
    }
  }
}"
95056,"private void selectActionsBar(int droneType){
  final FragmentManager fm=getChildFragmentManager();
  Fragment actionsBarFragment;
  if (Type.isCopter(droneType)) {
    actionsBarFragment=new CopterFlightActionsFragment();
  }
 else   if (Type.isPlane(droneType)) {
    actionsBarFragment=new PlaneFlightActionsFragment();
  }
 else {
    actionsBarFragment=new GenericActionsFragment();
  }
  fm.beginTransaction().replace(R.id.flight_actions_bar,actionsBarFragment).commit();
}","private void selectActionsBar(int droneType){
  final FragmentManager fm=getChildFragmentManager();
  Fragment actionsBarFragment;
  if (Type.isCopter(droneType)) {
    actionsBarFragment=new CopterFlightActionsFragment();
  }
 else   if (Type.isPlane(droneType)) {
    actionsBarFragment=new PlaneFlightActionsFragment();
  }
 else {
    actionsBarFragment=new GenericActionsFragment();
  }
  fm.beginTransaction().replace(R.id.flight_actions_bar,actionsBarFragment).commit();
  header=(SlidingUpHeader)actionsBarFragment;
}"
95057,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  connectBtn=(Button)view.findViewById(R.id.mc_connectBtn);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  connectBtn=(Button)view.findViewById(R.id.mc_connectBtn);
  connectBtn.setOnClickListener(this);
}"
95058,"public void doGuidedTakeoff(Altitude alt){
  if (Type.isCopter(myDrone.getType())) {
    coord=myDrone.getGps().getPosition();
    altitude.set(alt.valueInMeters());
    state=GuidedStates.IDLE;
    changeToGuidedMode();
    MavLinkTakeoff.sendTakeoff(myDrone,alt);
    myDrone.notifyDroneEvent(DroneEventsType.GUIDEDPOINT);
  }
}","public void doGuidedTakeoff(Altitude alt){
  if (Type.isCopter(myDrone.getType())) {
    coord=myDrone.getGps().getPosition();
    altitude.set(alt.valueInMeters());
    state=GuidedStates.IDLE;
    changeToGuidedMode(myDrone);
    MavLinkTakeoff.sendTakeoff(myDrone,alt);
    myDrone.notifyDroneEvent(DroneEventsType.GUIDEDPOINT);
  }
}"
95059,"public void forcedGuidedCoordinate(final Coord2D coord) throws Exception {
  if ((myDrone.getGps().getFixTypeNumeric() != GPS.LOCK_3D)) {
    throw new Exception(""String_Node_Str"");
  }
  if (isInitialized()) {
    changeCoord(coord);
  }
 else {
    mPostInitializationTask=new Runnable(){
      @Override public void run(){
        changeCoord(coord);
      }
    }
;
    changeToGuidedMode();
  }
}","public void forcedGuidedCoordinate(final Coord2D coord) throws Exception {
  if ((myDrone.getGps().getFixTypeNumeric() != GPS.LOCK_3D)) {
    throw new Exception(""String_Node_Str"");
  }
  if (isInitialized()) {
    changeCoord(coord);
  }
 else {
    mPostInitializationTask=new Runnable(){
      @Override public void run(){
        changeCoord(coord);
      }
    }
;
    changeToGuidedMode(myDrone);
  }
}"
95060,"@Override public void onDroneEvent(DroneEventsType event,Drone drone){
switch (event) {
case MODE:
    if (isGuidedMode()) {
      initialize();
    }
 else {
      disable();
    }
  break;
case DISCONNECTED:
case HEARTBEAT_TIMEOUT:
disable();
default :
break;
}
}","@Override public void onDroneEvent(DroneEventsType event,Drone drone){
switch (event) {
case MODE:
    if (isGuidedMode(myDrone)) {
      initialize();
    }
 else {
      disable();
    }
  break;
case DISCONNECTED:
case HEARTBEAT_TIMEOUT:
disable();
default :
break;
}
}"
95061,"public void pauseAtCurrentLocation(){
  if (state != GuidedStates.ACTIVE) {
    changeToGuidedMode();
  }
 else {
    newGuidedCoord(myDrone.getGps().getPosition());
  }
}","public void pauseAtCurrentLocation(){
  if (state != GuidedStates.ACTIVE) {
    changeToGuidedMode(myDrone);
  }
 else {
    newGuidedCoord(myDrone.getGps().getPosition());
  }
}"
95062,"private double getDroneAltConstrained(){
  double alt=Math.floor(myDrone.getAltitude().getAltitude());
  return Math.max(alt,getMinAltitude(myDrone));
}","private static double getDroneAltConstrained(Drone drone){
  double alt=Math.floor(drone.getAltitude().getAltitude());
  return Math.max(alt,getMinAltitude(drone));
}"
95063,"private void initialize(){
  if (state == GuidedStates.UNINITIALIZED) {
    coord=myDrone.getGps().getPosition();
    altitude.set(getDroneAltConstrained());
    state=GuidedStates.IDLE;
    myDrone.notifyDroneEvent(DroneEventsType.GUIDEDPOINT);
  }
  if (mPostInitializationTask != null) {
    mPostInitializationTask.run();
    mPostInitializationTask=null;
  }
}","private void initialize(){
  if (state == GuidedStates.UNINITIALIZED) {
    coord=myDrone.getGps().getPosition();
    altitude.set(getDroneAltConstrained(myDrone));
    state=GuidedStates.IDLE;
    myDrone.notifyDroneEvent(DroneEventsType.GUIDEDPOINT);
  }
  if (mPostInitializationTask != null) {
    mPostInitializationTask.run();
    mPostInitializationTask=null;
  }
}"
95064,"private boolean isGuidedMode(){
  final int droneType=myDrone.getType();
  final ApmModes droneMode=myDrone.getState().getMode();
  if (Type.isCopter(droneType)) {
    return droneMode == ApmModes.ROTOR_GUIDED;
  }
  if (Type.isPlane(droneType)) {
    return droneMode == ApmModes.FIXED_WING_GUIDED;
  }
  if (Type.isRover(droneType)) {
    return droneMode == ApmModes.ROVER_GUIDED;
  }
  return false;
}","public static boolean isGuidedMode(Drone drone){
  final int droneType=drone.getType();
  final ApmModes droneMode=drone.getState().getMode();
  if (Type.isCopter(droneType)) {
    return droneMode == ApmModes.ROTOR_GUIDED;
  }
  if (Type.isPlane(droneType)) {
    return droneMode == ApmModes.FIXED_WING_GUIDED;
  }
  if (Type.isRover(droneType)) {
    return droneMode == ApmModes.ROVER_GUIDED;
  }
  return false;
}"
95065,"private void sendGuidedPoint(){
  if (state == GuidedStates.ACTIVE) {
    myDrone.notifyDroneEvent(DroneEventsType.GUIDEDPOINT);
    MavLinkModes.setGuidedMode(myDrone,coord.getLat(),coord.getLng(),altitude.valueInMeters());
  }
}","private void sendGuidedPoint(){
  if (state == GuidedStates.ACTIVE) {
    forceSendGuidedPoint(myDrone,coord,altitude.valueInMeters());
  }
}"
95066,"private void changeToGuidedMode(){
  final State droneState=myDrone.getState();
  final int droneType=myDrone.getType();
  if (Type.isCopter(droneType)) {
    droneState.changeFlightMode(ApmModes.ROTOR_GUIDED);
  }
 else   if (Type.isPlane(droneType)) {
    droneState.changeFlightMode(ApmModes.FIXED_WING_GUIDED);
  }
 else   if (Type.isRover(droneType)) {
    droneState.changeFlightMode(ApmModes.ROVER_GUIDED);
  }
}","public static void changeToGuidedMode(Drone drone){
  final State droneState=drone.getState();
  final int droneType=drone.getType();
  if (Type.isCopter(droneType)) {
    droneState.changeFlightMode(ApmModes.ROTOR_GUIDED);
  }
 else   if (Type.isPlane(droneType)) {
    forceSendGuidedPoint(drone,drone.getGps().getPosition(),getDroneAltConstrained(drone));
  }
 else   if (Type.isRover(droneType)) {
    droneState.changeFlightMode(ApmModes.ROVER_GUIDED);
  }
}"
95067,"private void disableFollowMe(){
  locationFinder.disableLocationUpdates();
  if (isEnabled()) {
    state=FollowStates.FOLLOW_END;
    MavLinkROI.resetROI(drone);
    if (isGuidedMode()) {
      drone.getGuidedPoint().pauseAtCurrentLocation();
    }
    drone.notifyDroneEvent(DroneEventsType.FOLLOW_STOP);
  }
}","private void disableFollowMe(){
  locationFinder.disableLocationUpdates();
  if (isEnabled()) {
    state=FollowStates.FOLLOW_END;
    MavLinkROI.resetROI(drone);
    if (GuidedPoint.isGuidedMode(drone)) {
      drone.getGuidedPoint().pauseAtCurrentLocation();
    }
    drone.notifyDroneEvent(DroneEventsType.FOLLOW_STOP);
  }
}"
95068,"public void toggleFollowMeState(){
  final State droneState=drone.getState();
  if (droneState == null) {
    state=FollowStates.FOLLOW_INVALID_STATE;
    return;
  }
  if (isEnabled()) {
    disableFollowMe();
  }
 else {
    if (drone.getMavClient().isConnected()) {
      if (drone.getState().isArmed()) {
        changeToGuidedMode();
        enableFollowMe();
      }
 else {
        state=FollowStates.FOLLOW_DRONE_NOT_ARMED;
      }
    }
 else {
      state=FollowStates.FOLLOW_DRONE_DISCONNECTED;
    }
  }
}","public void toggleFollowMeState(){
  final State droneState=drone.getState();
  if (droneState == null) {
    state=FollowStates.FOLLOW_INVALID_STATE;
    return;
  }
  if (isEnabled()) {
    disableFollowMe();
  }
 else {
    if (drone.getMavClient().isConnected()) {
      if (drone.getState().isArmed()) {
        GuidedPoint.changeToGuidedMode(drone);
        enableFollowMe();
      }
 else {
        state=FollowStates.FOLLOW_DRONE_NOT_ARMED;
      }
    }
 else {
      state=FollowStates.FOLLOW_DRONE_DISCONNECTED;
    }
  }
}"
95069,"@Override public void onDroneEvent(DroneEventsType event,Drone drone){
switch (event) {
case MODE:
    if (!isGuidedMode()) {
      disableFollowMe();
    }
  break;
case DISCONNECTED:
disableFollowMe();
break;
default :
}
}","@Override public void onDroneEvent(DroneEventsType event,Drone drone){
switch (event) {
case MODE:
    if (!GuidedPoint.isGuidedMode(drone)) {
      disableFollowMe();
    }
  break;
case DISCONNECTED:
disableFollowMe();
break;
default :
}
}"
95070,"@Override public void run(){
  final List<MarkerInfo> missionMarkerInfos=missionProxy.getMarkersInfos();
  final boolean isThereMissionMarkers=!missionMarkerInfos.isEmpty();
  final boolean isHomeValid=home.isValid();
  final Set<MarkerInfo> markersOnTheMap=mMapFragment.getMarkerInfoList();
  if (!markersOnTheMap.isEmpty()) {
    if (isHomeValid) {
      markersOnTheMap.remove(home);
    }
    if (isThereMissionMarkers) {
      markersOnTheMap.removeAll(missionMarkerInfos);
    }
    mMapFragment.removeMarkers(markersOnTheMap);
  }
  if (isHomeValid) {
    mMapFragment.updateMarker(home);
  }
  if (isThereMissionMarkers) {
    mMapFragment.updateMarkers(missionMarkerInfos,isMissionDraggable());
  }
  mMapFragment.updateMissionPath(missionProxy);
  mHandler.removeCallbacks(this);
}","@Override public void run(){
  final List<MarkerInfo> missionMarkerInfos=missionProxy.getMarkersInfos();
  final boolean isThereMissionMarkers=!missionMarkerInfos.isEmpty();
  final boolean isHomeValid=home.isValid();
  final boolean isGuidedVisible=guided.isVisible();
  final Set<MarkerInfo> markersOnTheMap=mMapFragment.getMarkerInfoList();
  if (!markersOnTheMap.isEmpty()) {
    if (isHomeValid) {
      markersOnTheMap.remove(home);
    }
    if (isGuidedVisible) {
      markersOnTheMap.remove(guided);
    }
    if (isThereMissionMarkers) {
      markersOnTheMap.removeAll(missionMarkerInfos);
    }
    mMapFragment.removeMarkers(markersOnTheMap);
  }
  if (isHomeValid) {
    mMapFragment.updateMarker(home);
  }
  if (isGuidedVisible) {
    mMapFragment.updateMarker(guided);
  }
  if (isThereMissionMarkers) {
    mMapFragment.updateMarkers(missionMarkerInfos,isMissionDraggable());
  }
  mMapFragment.updateMissionPath(missionProxy);
  mHandler.removeCallbacks(this);
}"
95071,"@Override public void post(Runnable thread){
  new Thread(thread).start();
}","@Override public void post(Runnable thread){
  scheduler.execute(thread);
}"
95072,"static Handler fakeHandler(){
  return new Handler(){
    @Override public void removeCallbacks(    Runnable thread){
    }
    @Override public void post(    Runnable thread){
      new Thread(thread).start();
    }
    @Override public void postDelayed(    Runnable thread,    long timeout){
    }
  }
;
}","static Handler fakeHandler(){
  return new Handler(){
    private final ScheduledExecutorService scheduler=Executors.newSingleThreadScheduledExecutor();
    @Override public void removeCallbacks(    Runnable thread){
    }
    @Override public void post(    Runnable thread){
      scheduler.execute(thread);
    }
    @Override public void postDelayed(    Runnable thread,    long timeout){
    }
  }
;
}"
95073,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mDisconnectedButtons=view.findViewById(R.id.mc_disconnected_buttons);
  mDisarmedButtons=view.findViewById(R.id.mc_disarmed_buttons);
  mArmedButtons=view.findViewById(R.id.mc_armed_buttons);
  mInFlightButtons=view.findViewById(R.id.mc_in_flight_buttons);
  final Button connectBtn=(Button)view.findViewById(R.id.mc_connectBtn);
  connectBtn.setOnClickListener(this);
  homeBtn=(Button)view.findViewById(R.id.mc_homeBtn);
  homeBtn.setOnClickListener(this);
  final Button armBtn=(Button)view.findViewById(R.id.mc_armBtn);
  armBtn.setOnClickListener(this);
  final Button disarmBtn=(Button)view.findViewById(R.id.mc_disarmBtn);
  disarmBtn.setOnClickListener(this);
  landBtn=(Button)view.findViewById(R.id.mc_land);
  landBtn.setOnClickListener(this);
  final Button takeoffBtn=(Button)view.findViewById(R.id.mc_takeoff);
  takeoffBtn.setOnClickListener(this);
  pauseBtn=(Button)view.findViewById(R.id.mc_pause);
  pauseBtn.setOnClickListener(this);
  autoBtn=(Button)view.findViewById(R.id.mc_autoBtn);
  autoBtn.setOnClickListener(this);
  final Button takeoffInAuto=(Button)view.findViewById(R.id.mc_TakeoffInAutoBtn);
  takeoffInAuto.setOnClickListener(this);
  followBtn=(Button)view.findViewById(R.id.mc_follow);
  followBtn.setOnClickListener(this);
  final Button dronieBtn=(Button)view.findViewById(R.id.mc_dronieBtn);
  dronieBtn.setOnClickListener(this);
  drone.addDroneListener(this);
  setupButtonsByFlightState();
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mDisconnectedButtons=view.findViewById(R.id.mc_disconnected_buttons);
  mDisarmedButtons=view.findViewById(R.id.mc_disarmed_buttons);
  mArmedButtons=view.findViewById(R.id.mc_armed_buttons);
  mInFlightButtons=view.findViewById(R.id.mc_in_flight_buttons);
  final Button connectBtn=(Button)view.findViewById(R.id.mc_connectBtn);
  connectBtn.setOnClickListener(this);
  homeBtn=(Button)view.findViewById(R.id.mc_homeBtn);
  homeBtn.setOnClickListener(this);
  final Button armBtn=(Button)view.findViewById(R.id.mc_armBtn);
  armBtn.setOnClickListener(this);
  final Button disarmBtn=(Button)view.findViewById(R.id.mc_disarmBtn);
  disarmBtn.setOnClickListener(this);
  landBtn=(Button)view.findViewById(R.id.mc_land);
  landBtn.setOnClickListener(this);
  final Button takeoffBtn=(Button)view.findViewById(R.id.mc_takeoff);
  takeoffBtn.setOnClickListener(this);
  pauseBtn=(Button)view.findViewById(R.id.mc_pause);
  pauseBtn.setOnClickListener(this);
  autoBtn=(Button)view.findViewById(R.id.mc_autoBtn);
  autoBtn.setOnClickListener(this);
  final Button takeoffInAuto=(Button)view.findViewById(R.id.mc_TakeoffInAutoBtn);
  takeoffInAuto.setOnClickListener(this);
  followBtn=(Button)view.findViewById(R.id.mc_follow);
  followBtn.setOnClickListener(this);
  final Button dronieBtn=(Button)view.findViewById(R.id.mc_dronieBtn);
  dronieBtn.setOnClickListener(this);
}"
95074,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mDisconnectedButtons=view.findViewById(R.id.mc_disconnected_buttons);
  mDisarmedButtons=view.findViewById(R.id.mc_disarmed_buttons);
  mArmedButtons=view.findViewById(R.id.mc_armed_buttons);
  mInFlightButtons=view.findViewById(R.id.mc_in_flight_buttons);
  final Button connectBtn=(Button)view.findViewById(R.id.mc_connectBtn);
  connectBtn.setOnClickListener(this);
  homeBtn=(Button)view.findViewById(R.id.mc_homeBtn);
  homeBtn.setOnClickListener(this);
  final Button armBtn=(Button)view.findViewById(R.id.mc_armBtn);
  armBtn.setOnClickListener(this);
  final Button disarmBtn=(Button)view.findViewById(R.id.mc_disarmBtn);
  disarmBtn.setOnClickListener(this);
  landBtn=(Button)view.findViewById(R.id.mc_land);
  landBtn.setOnClickListener(this);
  final Button takeoffBtn=(Button)view.findViewById(R.id.mc_takeoff);
  takeoffBtn.setOnClickListener(this);
  pauseBtn=(Button)view.findViewById(R.id.mc_pause);
  pauseBtn.setOnClickListener(this);
  autoBtn=(Button)view.findViewById(R.id.mc_autoBtn);
  autoBtn.setOnClickListener(this);
  final Button takeoffInAuto=(Button)view.findViewById(R.id.mc_TakeoffInAutoBtn);
  takeoffInAuto.setOnClickListener(this);
  followBtn=(Button)view.findViewById(R.id.mc_follow);
  followBtn.setOnClickListener(this);
  final Button dronieBtn=(Button)view.findViewById(R.id.mc_dronieBtn);
  dronieBtn.setOnClickListener(this);
  drone.addDroneListener(this);
  setupButtonsByFlightState();
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mDisconnectedButtons=view.findViewById(R.id.mc_disconnected_buttons);
  mDisarmedButtons=view.findViewById(R.id.mc_disarmed_buttons);
  mArmedButtons=view.findViewById(R.id.mc_armed_buttons);
  mInFlightButtons=view.findViewById(R.id.mc_in_flight_buttons);
  final Button connectBtn=(Button)view.findViewById(R.id.mc_connectBtn);
  connectBtn.setOnClickListener(this);
  homeBtn=(Button)view.findViewById(R.id.mc_homeBtn);
  homeBtn.setOnClickListener(this);
  final Button armBtn=(Button)view.findViewById(R.id.mc_armBtn);
  armBtn.setOnClickListener(this);
  final Button disarmBtn=(Button)view.findViewById(R.id.mc_disarmBtn);
  disarmBtn.setOnClickListener(this);
  landBtn=(Button)view.findViewById(R.id.mc_land);
  landBtn.setOnClickListener(this);
  final Button takeoffBtn=(Button)view.findViewById(R.id.mc_takeoff);
  takeoffBtn.setOnClickListener(this);
  pauseBtn=(Button)view.findViewById(R.id.mc_pause);
  pauseBtn.setOnClickListener(this);
  autoBtn=(Button)view.findViewById(R.id.mc_autoBtn);
  autoBtn.setOnClickListener(this);
  final Button takeoffInAuto=(Button)view.findViewById(R.id.mc_TakeoffInAutoBtn);
  takeoffInAuto.setOnClickListener(this);
  followBtn=(Button)view.findViewById(R.id.mc_follow);
  followBtn.setOnClickListener(this);
  final Button dronieBtn=(Button)view.findViewById(R.id.mc_dronieBtn);
  dronieBtn.setOnClickListener(this);
}"
95075,"@Override public String toString(){
  String toString=""String_Node_Str"";
  final ParameterMetadata metadata=getMetadata();
  if (metadata != null) {
    toString=metadata.getDisplayName();
  }
  if (toString == null) {
    final Parameter param=getParameter();
    if (param != null) {
      toString=param.name;
    }
  }
  return toString;
}","@Override public String toString(){
  String toString=""String_Node_Str"";
  final Parameter param=getParameter();
  if (param != null) {
    toString=param.name + ""String_Node_Str"";
  }
  final ParameterMetadata metadata=getMetadata();
  if (metadata != null) {
    toString+=metadata.getDisplayName();
  }
  return toString;
}"
95076,"@Override public void onSelectionUpdate(List<MissionItemProxy> selected){
  final boolean isEmpty=selected.isEmpty();
  missionListFragment.setArrowsVisibility(!isEmpty);
  if (isEmpty) {
    removeItemDetail();
  }
 else {
    if (contextualActionBar != null && !mMultiEditEnabled)     removeItemDetail();
 else {
      showItemDetail(selected.get(0).getDetailFragment());
    }
  }
  planningMapFragment.postUpdate();
}","@Override public void onSelectionUpdate(List<MissionItemProxy> selected){
  final boolean isEmpty=selected.isEmpty();
  missionListFragment.setArrowsVisibility(!isEmpty);
  if (isEmpty) {
    removeItemDetail();
  }
 else {
    if (contextualActionBar != null && !mMultiEditEnabled)     removeItemDetail();
 else {
      showItemDetail(selectMissionDetailType(selected));
    }
  }
  planningMapFragment.postUpdate();
}"
95077,"@Override public boolean onItemLongClick(MissionItemProxy item){
  if (contextualActionBar != null) {
    if (missionProxy.selection.selectionContains(item)) {
      missionProxy.selection.clearSelection();
    }
 else {
      missionProxy.selection.setSelectionTo(missionProxy.getItems());
    }
  }
 else {
    editorToolsFragment.setTool(EditorTools.NONE);
    missionListFragment.updateChoiceMode(AbsListView.CHOICE_MODE_MULTIPLE);
    contextualActionBar=startActionMode(this);
    missionProxy.selection.setSelectionTo(item);
  }
  return true;
}","@Override public boolean onItemLongClick(MissionItemProxy item){
  enableMultiEdit(false);
  if (contextualActionBar != null) {
    if (missionProxy.selection.selectionContains(item)) {
      missionProxy.selection.clearSelection();
    }
 else {
      missionProxy.selection.setSelectionTo(missionProxy.getItems());
    }
  }
 else {
    editorToolsFragment.setTool(EditorTools.NONE);
    missionListFragment.updateChoiceMode(AbsListView.CHOICE_MODE_MULTIPLE);
    contextualActionBar=startActionMode(this);
    missionProxy.selection.setSelectionTo(item);
  }
  return true;
}"
95078,"@Override public void onMapClick(Coord2D point){
  missionProxy.selection.clearSelection();
switch (getTool()) {
case MARKER:
    if (mIsSplineEnabled) {
      missionProxy.addSplineWaypoint(point);
    }
 else {
      missionProxy.addWaypoint(point);
    }
  break;
case DRAW:
break;
case POLY:
break;
case TRASH:
break;
case NONE:
break;
}
}","@Override public void onMapClick(Coord2D point){
  enableMultiEdit(false);
  missionProxy.selection.clearSelection();
switch (getTool()) {
case MARKER:
    if (mIsSplineEnabled) {
      missionProxy.addSplineWaypoint(point);
    }
 else {
      missionProxy.addWaypoint(point);
    }
  break;
case DRAW:
break;
case POLY:
break;
case TRASH:
break;
case NONE:
break;
}
}"
95079,"@Override public String toString(){
  String toString=""String_Node_Str"";
  final ParameterMetadata metadata=getMetadata();
  if (metadata != null) {
    toString=metadata.getDisplayName();
  }
  if (toString == null) {
    final Parameter param=getParameter();
    if (param != null) {
      toString=param.name;
    }
  }
  return toString;
}","@Override public String toString(){
  String toString=""String_Node_Str"";
  final Parameter param=getParameter();
  if (param != null) {
    toString=param.name + ""String_Node_Str"";
  }
  final ParameterMetadata metadata=getMetadata();
  if (metadata != null) {
    toString+=metadata.getDisplayName();
  }
  return toString;
}"
95080,"@Override public void onDroneEvent(DroneEventsType event,Drone drone){
  super.onDroneEvent(event,drone);
switch (event) {
case MISSION_UPDATE:
    Length missionLength=missionProxy.getMissionLength();
  Speed speedParameter=drone.getSpeed().getSpeedParameter();
String infoString=""String_Node_Str"" + missionLength;
if (speedParameter != null) {
int time=(int)(missionLength.valueInMeters() / speedParameter.valueInMetersPerSecond());
infoString=infoString + String.format(""String_Node_Str"",time / 60,time % 60);
}
infoView.setText(infoString);
if (itemDetailFragment != null) {
if (!missionProxy.contains(itemDetailFragment.getItem())) {
removeItemDetail();
}
}
break;
default :
break;
}
}","@Override public void onDroneEvent(DroneEventsType event,Drone drone){
  super.onDroneEvent(event,drone);
switch (event) {
case MISSION_UPDATE:
    Length missionLength=missionProxy.getMissionLength();
  Speed speedParameter=drone.getSpeed().getSpeedParameter();
String infoString=""String_Node_Str"" + missionLength;
if (speedParameter != null) {
int time=(int)(missionLength.valueInMeters() / speedParameter.valueInMetersPerSecond());
infoString=infoString + String.format(""String_Node_Str"",time / 60,time % 60);
}
infoView.setText(infoString);
if (missionProxy.selection.getSelected().isEmpty() && itemDetailFragment != null) {
removeItemDetail();
}
break;
default :
break;
}
}"
95081,"private void enableSlidingUpPanel(Drone drone){
  if (mSlidingPanel == null) {
    return;
  }
  final State droneState=drone.getState();
  final boolean isEnabled=drone.getMavClient().isConnected() && droneState.isArmed() && droneState.isFlying();
  if (isEnabled) {
    mSlidingPanel.setPanelSlideListener(null);
    mSlidingPanel.setSlidingEnabled(true);
  }
 else {
    if (!mSlidingPanelCollapsing.get()) {
      if (mSlidingPanel.isPanelExpanded()) {
        mSlidingPanel.setPanelSlideListener(mDisablePanelSliding);
        mSlidingPanel.collapsePanel();
        mSlidingPanelCollapsing.set(true);
      }
 else {
        mSlidingPanel.setSlidingEnabled(false);
        mSlidingPanelCollapsing.set(false);
      }
    }
  }
}","private void enableSlidingUpPanel(Drone drone){
  if (mSlidingPanel == null) {
    return;
  }
  final State droneState=drone.getState();
  final boolean isEnabled=drone.getMavClient().isConnected() && droneState.isArmed() && droneState.isFlying();
  if (isEnabled) {
    mSlidingPanel.setSlidingEnabled(true);
  }
 else {
    if (!mSlidingPanelCollapsing.get()) {
      if (mSlidingPanel.isPanelExpanded()) {
        mSlidingPanel.setPanelSlideListener(mDisablePanelSliding);
        mSlidingPanel.collapsePanel();
        mSlidingPanelCollapsing.set(true);
      }
 else {
        mSlidingPanel.setSlidingEnabled(false);
        mSlidingPanelCollapsing.set(false);
      }
    }
  }
}"
95082,"@Override public void onPanelCollapsed(View view){
  mSlidingPanel.setSlidingEnabled(false);
  mSlidingPanel.setPanelHeight(mFlightActionsView.getHeight());
  mSlidingPanelCollapsing.set(false);
}","@Override public void onPanelCollapsed(View view){
  mSlidingPanel.setSlidingEnabled(false);
  mSlidingPanel.setPanelHeight(mFlightActionsView.getHeight());
  mSlidingPanelCollapsing.set(false);
  mSlidingPanel.setPanelSlideListener(null);
}"
95083,"public void makeAndUploadDronie(){
  Coord2D currentPosition=myDrone.getGps().getPosition();
  if (currentPosition == null || myDrone.getGps().getSatCount() >= 5) {
    myDrone.notifyDroneEvent(DroneEventsType.WARNING_NO_GPS);
    return;
  }
  items.clear();
  items.addAll(createDronie(this,currentPosition,GeoTools.newCoordFromBearingAndDistance(currentPosition,180 + myDrone.getOrientation().getYaw(),50.0)));
  sendMissionToAPM();
  myDrone.notifyDroneEvent(DroneEventsType.MISSION_RECEIVED);
  notifyMissionUpdate();
}","public void makeAndUploadDronie(){
  Coord2D currentPosition=myDrone.getGps().getPosition();
  if (currentPosition == null || myDrone.getGps().getSatCount() <= 5) {
    myDrone.notifyDroneEvent(DroneEventsType.WARNING_NO_GPS);
    return;
  }
  items.clear();
  items.addAll(createDronie(this,currentPosition,GeoTools.newCoordFromBearingAndDistance(currentPosition,180 + myDrone.getOrientation().getYaw(),50.0)));
  sendMissionToAPM();
  myDrone.notifyDroneEvent(DroneEventsType.MISSION_RECEIVED);
  notifyMissionUpdate();
}"
95084,"public void makeAndUploadDronie(){
  Coord2D currentPosition=myDrone.getGps().getPosition();
  if (currentPosition == null || myDrone.getGps().getSatCount() >= 5) {
    myDrone.notifyDroneEvent(DroneEventsType.WARNING_NO_GPS);
    return;
  }
  items.clear();
  items.addAll(createDronie(this,currentPosition,GeoTools.newCoordFromBearingAndDistance(currentPosition,180 + myDrone.getOrientation().getYaw(),50.0)));
  sendMissionToAPM();
  myDrone.notifyDroneEvent(DroneEventsType.MISSION_RECEIVED);
  notifyMissionUpdate();
}","public void makeAndUploadDronie(){
  Coord2D currentPosition=myDrone.getGps().getPosition();
  if (currentPosition == null || myDrone.getGps().getSatCount() <= 5) {
    myDrone.notifyDroneEvent(DroneEventsType.WARNING_NO_GPS);
    return;
  }
  items.clear();
  items.addAll(createDronie(this,currentPosition,GeoTools.newCoordFromBearingAndDistance(currentPosition,180 + myDrone.getOrientation().getYaw(),50.0)));
  sendMissionToAPM();
  myDrone.notifyDroneEvent(DroneEventsType.MISSION_RECEIVED);
  notifyMissionUpdate();
}"
95085,"@Override public void onListVisibilityChanged(){
  updateMapPadding();
}","@Override public void onListVisibilityChanged(){
}"
95086,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_editor);
  fragmentManager=getSupportFragmentManager();
  planningMapFragment=((EditorMapFragment)fragmentManager.findFragmentById(R.id.mapFragment));
  gestureMapFragment=((GestureMapFragment)fragmentManager.findFragmentById(R.id.gestureMapFragment));
  editorToolsFragment=(EditorToolsFragment)fragmentManager.findFragmentById(R.id.editorToolsFragment);
  missionListFragment=(EditorListFragment)fragmentManager.findFragmentById(R.id.missionFragment1);
  mSplineToggleContainer=findViewById(R.id.editorSplineToggleContainer);
  mSplineToggleContainer.setVisibility(View.VISIBLE);
  mLocationButtonsContainer=findViewById(R.id.location_button_container);
  ImageButton mGoToMyLocation=(ImageButton)findViewById(R.id.my_location_button);
  mGoToMyLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      planningMapFragment.goToMyLocation();
    }
  }
);
  mGoToMyLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      planningMapFragment.setAutoPanMode(AutoPanMode.USER);
      return true;
    }
  }
);
  ImageButton mGoToDroneLocation=(ImageButton)findViewById(R.id.drone_location_button);
  mGoToDroneLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      planningMapFragment.goToDroneLocation();
    }
  }
);
  mGoToDroneLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      planningMapFragment.setAutoPanMode(AutoPanMode.DRONE);
      return true;
    }
  }
);
  final RadioButton normalToggle=(RadioButton)findViewById(R.id.normalWpToggle);
  normalToggle.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mIsSplineEnabled=!normalToggle.isChecked();
    }
  }
);
  final RadioButton splineToggle=(RadioButton)findViewById(R.id.splineWpToggle);
  splineToggle.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mIsSplineEnabled=splineToggle.isChecked();
    }
  }
);
  itemDetailFragment=(MissionDetailFragment)fragmentManager.findFragmentByTag(ITEM_DETAIL_TAG);
  mContainerItemDetail=findViewById(R.id.containerItemDetail);
  missionProxy=((DroidPlannerApp)getApplication()).missionProxy;
  gestureMapFragment.setOnPathFinishedListener(this);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_editor);
  fragmentManager=getSupportFragmentManager();
  planningMapFragment=((EditorMapFragment)fragmentManager.findFragmentById(R.id.mapFragment));
  gestureMapFragment=((GestureMapFragment)fragmentManager.findFragmentById(R.id.gestureMapFragment));
  editorToolsFragment=(EditorToolsFragment)fragmentManager.findFragmentById(R.id.editorToolsFragment);
  missionListFragment=(EditorListFragment)fragmentManager.findFragmentById(R.id.missionFragment1);
  mSplineToggleContainer=findViewById(R.id.editorSplineToggleContainer);
  mSplineToggleContainer.setVisibility(View.VISIBLE);
  mLocationButtonsContainer=findViewById(R.id.location_button_container);
  final ImageButton resetMapBearing=(ImageButton)findViewById(R.id.map_orientation_button);
  resetMapBearing.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (planningMapFragment != null) {
        planningMapFragment.updateMapBearing(0);
      }
    }
  }
);
  ImageButton mGoToMyLocation=(ImageButton)findViewById(R.id.my_location_button);
  mGoToMyLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      planningMapFragment.goToMyLocation();
    }
  }
);
  mGoToMyLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      planningMapFragment.setAutoPanMode(AutoPanMode.USER);
      return true;
    }
  }
);
  ImageButton mGoToDroneLocation=(ImageButton)findViewById(R.id.drone_location_button);
  mGoToDroneLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      planningMapFragment.goToDroneLocation();
    }
  }
);
  mGoToDroneLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      planningMapFragment.setAutoPanMode(AutoPanMode.DRONE);
      return true;
    }
  }
);
  final RadioButton normalToggle=(RadioButton)findViewById(R.id.normalWpToggle);
  normalToggle.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mIsSplineEnabled=!normalToggle.isChecked();
    }
  }
);
  final RadioButton splineToggle=(RadioButton)findViewById(R.id.splineWpToggle);
  splineToggle.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mIsSplineEnabled=splineToggle.isChecked();
    }
  }
);
  itemDetailFragment=(MissionDetailFragment)fragmentManager.findFragmentByTag(ITEM_DETAIL_TAG);
  mContainerItemDetail=findViewById(R.id.containerItemDetail);
  missionProxy=((DroidPlannerApp)getApplication()).missionProxy;
  gestureMapFragment.setOnPathFinishedListener(this);
}"
95087,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_flight);
  fragmentManager=getSupportFragmentManager();
  warningView=(TextView)findViewById(R.id.failsafeTextView);
  mSlidingDrawer=(SlidingDrawer)findViewById(R.id.SlidingDrawerRight);
  mSlidingDrawer.setOnDrawerCloseListener(new SlidingDrawer.OnDrawerCloseListener(){
    @Override public void onDrawerClosed(){
      updateMapPadding();
      GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL).setVariable(getString(R.string.ga_mode_details_close_panel)).setValue(System.currentTimeMillis()));
    }
  }
);
  mSlidingDrawer.setOnDrawerOpenListener(new SlidingDrawer.OnDrawerOpenListener(){
    @Override public void onDrawerOpened(){
      updateMapPadding();
      GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL).setVariable(getString(R.string.ga_mode_details_open_panel)).setValue(System.currentTimeMillis()));
    }
  }
);
  setupMapFragment();
  mLocationButtonsContainer=findViewById(R.id.location_button_container);
  mGoToMyLocation=(ImageButton)findViewById(R.id.my_location_button);
  mGoToDroneLocation=(ImageButton)findViewById(R.id.drone_location_button);
  mGoToMyLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToMyLocation();
        updateMapLocationButtons(AutoPanMode.DISABLED);
      }
    }
  }
);
  mGoToMyLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToMyLocation();
        updateMapLocationButtons(AutoPanMode.USER);
        return true;
      }
      return false;
    }
  }
);
  mGoToDroneLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToDroneLocation();
        updateMapLocationButtons(AutoPanMode.DISABLED);
      }
    }
  }
);
  mGoToDroneLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToDroneLocation();
        updateMapLocationButtons(AutoPanMode.DRONE);
        return true;
      }
      return false;
    }
  }
);
  editorTools=fragmentManager.findFragmentById(R.id.editorToolsFragment);
  if (editorTools == null) {
    editorTools=new FlightActionsFragment();
    fragmentManager.beginTransaction().add(R.id.editorToolsFragment,editorTools).commit();
  }
  mTelemetryView=findViewById(R.id.telemetryFragment);
  boolean mIsPhone=mTelemetryView == null;
  if (mIsPhone) {
    Fragment slidingDrawerContent=fragmentManager.findFragmentById(R.id.sliding_drawer_content);
    if (slidingDrawerContent == null) {
      slidingDrawerContent=new FlightSlidingDrawerContent();
      fragmentManager.beginTransaction().add(R.id.sliding_drawer_content,slidingDrawerContent).commit();
    }
  }
 else {
    Fragment telemetryFragment=fragmentManager.findFragmentById(R.id.telemetryFragment);
    if (telemetryFragment == null) {
      telemetryFragment=new TelemetryFragment();
      fragmentManager.beginTransaction().add(R.id.telemetryFragment,telemetryFragment).commit();
    }
    Fragment flightModePanel=fragmentManager.findFragmentById(R.id.sliding_drawer_content);
    if (flightModePanel == null) {
      flightModePanel=new FlightModePanel();
      fragmentManager.beginTransaction().add(R.id.sliding_drawer_content,flightModePanel).commit();
    }
  }
  DroneshareDialog.perhapsShow(this);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_flight);
  fragmentManager=getSupportFragmentManager();
  warningView=(TextView)findViewById(R.id.failsafeTextView);
  mSlidingDrawer=(SlidingDrawer)findViewById(R.id.SlidingDrawerRight);
  mSlidingDrawer.setOnDrawerCloseListener(new SlidingDrawer.OnDrawerCloseListener(){
    @Override public void onDrawerClosed(){
      updateMapPadding();
      GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL).setVariable(getString(R.string.ga_mode_details_close_panel)).setValue(System.currentTimeMillis()));
    }
  }
);
  mSlidingDrawer.setOnDrawerOpenListener(new SlidingDrawer.OnDrawerOpenListener(){
    @Override public void onDrawerOpened(){
      updateMapPadding();
      GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL).setVariable(getString(R.string.ga_mode_details_open_panel)).setValue(System.currentTimeMillis()));
    }
  }
);
  setupMapFragment();
  mLocationButtonsContainer=findViewById(R.id.location_button_container);
  mGoToMyLocation=(ImageButton)findViewById(R.id.my_location_button);
  mGoToDroneLocation=(ImageButton)findViewById(R.id.drone_location_button);
  final ImageButton resetMapBearing=(ImageButton)findViewById(R.id.map_orientation_button);
  resetMapBearing.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mapFragment != null) {
        mapFragment.updateMapBearing(0);
      }
    }
  }
);
  mGoToMyLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToMyLocation();
        updateMapLocationButtons(AutoPanMode.DISABLED);
      }
    }
  }
);
  mGoToMyLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToMyLocation();
        updateMapLocationButtons(AutoPanMode.USER);
        return true;
      }
      return false;
    }
  }
);
  mGoToDroneLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToDroneLocation();
        updateMapLocationButtons(AutoPanMode.DISABLED);
      }
    }
  }
);
  mGoToDroneLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToDroneLocation();
        updateMapLocationButtons(AutoPanMode.DRONE);
        return true;
      }
      return false;
    }
  }
);
  editorTools=fragmentManager.findFragmentById(R.id.editorToolsFragment);
  if (editorTools == null) {
    editorTools=new FlightActionsFragment();
    fragmentManager.beginTransaction().add(R.id.editorToolsFragment,editorTools).commit();
  }
  mTelemetryView=findViewById(R.id.telemetryFragment);
  boolean mIsPhone=mTelemetryView == null;
  if (mIsPhone) {
    Fragment slidingDrawerContent=fragmentManager.findFragmentById(R.id.sliding_drawer_content);
    if (slidingDrawerContent == null) {
      slidingDrawerContent=new FlightSlidingDrawerContent();
      fragmentManager.beginTransaction().add(R.id.sliding_drawer_content,slidingDrawerContent).commit();
    }
  }
 else {
    Fragment telemetryFragment=fragmentManager.findFragmentById(R.id.telemetryFragment);
    if (telemetryFragment == null) {
      telemetryFragment=new TelemetryFragment();
      fragmentManager.beginTransaction().add(R.id.telemetryFragment,telemetryFragment).commit();
    }
    Fragment flightModePanel=fragmentManager.findFragmentById(R.id.sliding_drawer_content);
    if (flightModePanel == null) {
      flightModePanel=new FlightModePanel();
      fragmentManager.beginTransaction().add(R.id.sliding_drawer_content,flightModePanel).commit();
    }
  }
  DroneshareDialog.perhapsShow(this);
}"
95088,"/** 
 * Account for the various ui elements and update the map padding so that it remains 'visible'.
 */
private void updateMapPadding(){
  if (mapFragment == null) {
    return;
  }
  final int slidingDrawerWidth=mSlidingDrawer.getContent().getWidth();
  final boolean isSlidingDrawerOpened=mSlidingDrawer.isOpened();
  int rightPadding=isSlidingDrawerOpened ? slidingDrawerWidth : 0;
  int bottomPadding=0;
  int leftPadding=0;
  int topPadding=mLocationButtonsContainer.getTop();
  if (warningView != null && warningView.getVisibility() != View.GONE) {
    topPadding+=warningView.getHeight();
  }
  final View editorToolsView=editorTools.getView();
  final View mapView=mapFragment.getView();
  int[] posOnScreen=new int[2];
  editorToolsView.getLocationOnScreen(posOnScreen);
  final int toolsHeight=editorToolsView.getHeight();
  final int toolsBottom=posOnScreen[1] + toolsHeight;
  ViewGroup.LayoutParams lp=editorToolsView.getLayoutParams();
  if (lp.height == ViewGroup.LayoutParams.MATCH_PARENT) {
    leftPadding=editorToolsView.getRight();
  }
 else {
    if (mTelemetryView != null) {
      leftPadding=mTelemetryView.getRight();
    }
    if (lp.width == ViewGroup.LayoutParams.MATCH_PARENT) {
      mapView.getLocationOnScreen(posOnScreen);
      final int mapTop=posOnScreen[1];
      final int mapBottom=mapTop + mapView.getHeight();
      bottomPadding=(mapBottom - toolsBottom) + toolsHeight;
    }
  }
  mapFragment.setMapPadding(leftPadding,topPadding,rightPadding,bottomPadding);
  final ViewGroup.MarginLayoutParams marginLp=(ViewGroup.MarginLayoutParams)mLocationButtonsContainer.getLayoutParams();
  final int rightMargin=isSlidingDrawerOpened ? marginLp.leftMargin + slidingDrawerWidth : marginLp.leftMargin;
  marginLp.setMargins(marginLp.leftMargin,marginLp.topMargin,rightMargin,marginLp.bottomMargin);
}","/** 
 * Account for the various ui elements and update the map padding so that it remains 'visible'.
 */
private void updateMapPadding(){
  if (mapFragment == null) {
    return;
  }
  final int slidingDrawerWidth=mSlidingDrawer.getContent().getWidth();
  final boolean isSlidingDrawerOpened=mSlidingDrawer.isOpened();
  int bottomPadding=0;
  int leftPadding=0;
  final View editorToolsView=editorTools.getView();
  final View mapView=mapFragment.getView();
  int[] posOnScreen=new int[2];
  editorToolsView.getLocationOnScreen(posOnScreen);
  final int toolsHeight=editorToolsView.getHeight();
  final int toolsBottom=posOnScreen[1] + toolsHeight;
  ViewGroup.LayoutParams lp=editorToolsView.getLayoutParams();
  if (lp.height == ViewGroup.LayoutParams.MATCH_PARENT) {
    leftPadding=editorToolsView.getRight();
  }
 else   if (lp.width == ViewGroup.LayoutParams.MATCH_PARENT) {
    mapView.getLocationOnScreen(posOnScreen);
    final int mapTop=posOnScreen[1];
    final int mapBottom=mapTop + mapView.getHeight();
    bottomPadding=(mapBottom - toolsBottom) + toolsHeight;
  }
  mapFragment.setMapPadding(leftPadding,0,0,bottomPadding);
  final ViewGroup.MarginLayoutParams marginLp=(ViewGroup.MarginLayoutParams)mLocationButtonsContainer.getLayoutParams();
  final int rightMargin=isSlidingDrawerOpened ? marginLp.leftMargin + slidingDrawerWidth : marginLp.leftMargin;
  marginLp.setMargins(marginLp.leftMargin,marginLp.topMargin,rightMargin,marginLp.bottomMargin);
  mLocationButtonsContainer.requestLayout();
}"
95089,"private void setupMapUI(){
  mMap.setMyLocationEnabled(true);
  UiSettings mUiSettings=mMap.getUiSettings();
  mUiSettings.setMyLocationButtonEnabled(false);
  mUiSettings.setCompassEnabled(true);
  mUiSettings.setTiltGesturesEnabled(false);
  mUiSettings.setZoomControlsEnabled(false);
}","private void setupMapUI(){
  mMap.setMyLocationEnabled(true);
  UiSettings mUiSettings=mMap.getUiSettings();
  mUiSettings.setMyLocationButtonEnabled(false);
  mUiSettings.setCompassEnabled(false);
  mUiSettings.setTiltGesturesEnabled(false);
  mUiSettings.setZoomControlsEnabled(false);
}"
95090,"@Override public void onBeginReceivingParameters(){
  startProgress();
  mReceived=0;
  mTotal=0;
}","@Override public void onBeginReceivingParameters(){
  startProgress();
}"
95091,"private void updateProgress(int progress,int max){
  if (progressDialog != null) {
    if (progressDialog.isIndeterminate()) {
      progressDialog.setIndeterminate(false);
      mTotal=max;
      progressDialog.setMax(max);
    }
    progressDialog.setProgress(progress);
  }
  if (mLoadingProgress.isIndeterminate()) {
    mLoadingProgress.setIndeterminate(false);
    mTotal=max;
    mLoadingProgress.setMax(max);
  }
  mLoadingProgress.setProgress(progress);
}","private void updateProgress(int progress,int max){
  if (progressDialog == null) {
    startProgress();
  }
  if (progressDialog.isIndeterminate()) {
    progressDialog.setIndeterminate(false);
    progressDialog.setMax(max);
  }
  progressDialog.setProgress(progress);
  if (mLoadingProgress.isIndeterminate()) {
    mLoadingProgress.setIndeterminate(false);
    mLoadingProgress.setMax(max);
  }
  mLoadingProgress.setProgress(progress);
}"
95092,"@Override public void onParameterReceived(Parameter parameter,int index,int count){
  ++mReceived;
  updateProgress(mReceived,count);
}","@Override public void onParameterReceived(Parameter parameter,int index,int count){
  updateProgress(index,count);
}"
95093,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mLoadingProgress=(ProgressBar)view.findViewById(R.id.reload_progress);
  mLoadingProgress.setVisibility(View.GONE);
  mParamsFilter=(SearchView)view.findViewById(R.id.parameter_filter);
  view.findViewById(android.R.id.empty).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      refreshParameters();
    }
  }
);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  mLoadingProgress=(ProgressBar)view.findViewById(R.id.reload_progress);
  mLoadingProgress.setVisibility(View.GONE);
  mParamsFilter=(SearchView)view.findViewById(R.id.parameter_filter);
  mParamsFilter.setOnQueryTextListener(this);
  mParamsFilter.setIconifiedByDefault(false);
  mParamsFilter.setSubmitButtonEnabled(false);
  mParamsFilter.setOnCloseListener(this);
  view.findViewById(android.R.id.empty).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      refreshParameters();
    }
  }
);
}"
95094,"@Override public void onStart(){
  super.onStart();
  drone=((DroidPlannerApp)getActivity().getApplication()).getDrone();
  drone.addDroneListener(this);
  drone.getParameters().setParameterListener(this);
}","@Override public void onStart(){
  super.onStart();
  drone.addDroneListener(this);
  drone.getParameters().setParameterListener(this);
}"
95095,"private void refreshParameters(){
  if (drone.getMavClient().isConnected()) {
    drone.getParameters().getAllParameters();
  }
 else {
    Toast.makeText(getActivity(),R.string.msg_connect_first,Toast.LENGTH_SHORT).show();
  }
}","private void refreshParameters(){
  if (drone.getMavClient().isConnected()) {
    drone.getParameters().refreshParameters();
  }
 else {
    Toast.makeText(getActivity(),R.string.msg_connect_first,Toast.LENGTH_SHORT).show();
  }
}"
95096,"@Override public void onEndReceivingParameters(List<Parameter> parameters){
  if (mReceived < mTotal) {
    Log.w(TAG,""String_Node_Str"" + mTotal + ""String_Node_Str""+ mReceived);
  }
  Collections.sort(parameters,new Comparator<Parameter>(){
    @Override public int compare(    Parameter p1,    Parameter p2){
      return p1.name.compareTo(p2.name);
    }
  }
);
  adapter.loadParameters(drone,parameters);
  stopProgress();
}","@Override public void onEndReceivingParameters(List<Parameter> parameters){
  Collections.sort(parameters,new Comparator<Parameter>(){
    @Override public int compare(    Parameter p1,    Parameter p2){
      return p1.name.compareTo(p2.name);
    }
  }
);
  adapter.loadParameters(drone,parameters);
  stopProgress();
}"
95097,"@Override public void onDroneEvent(DroneEventsType event,Drone drone){
switch (event) {
case HEARTBEAT_FIRST:
    if (drone.getState().isFlying() == false) {
      getAllParameters();
    }
  break;
case DISCONNECTED:
case HEARTBEAT_TIMEOUT:
killWatchdog();
break;
default :
break;
}
}","@Override public void onDroneEvent(DroneEventsType event,Drone drone){
switch (event) {
case HEARTBEAT_FIRST:
    if (!drone.getState().isFlying()) {
      refreshParameters();
    }
  break;
case DISCONNECTED:
case HEARTBEAT_TIMEOUT:
killWatchdog();
break;
default :
break;
}
}"
95098,"private void processReceivedParam(msg_param_value m_value){
  Parameter param=new Parameter(m_value);
  parameters.put((int)m_value.param_index,param);
  expectedParams=m_value.param_count;
  if (parameterListener != null)   parameterListener.onParameterReceived(param,m_value.param_index,m_value.param_count);
  if (parameters.size() >= m_value.param_count) {
    List<Parameter> parameterList=new ArrayList<Parameter>();
    for (    int key : parameters.keySet()) {
      parameterList.add(parameters.get(key));
    }
    killWatchdog();
    myDrone.notifyDroneEvent(DroneEventsType.PARAMETERS_DOWNLOADED);
    if (parameterListener != null) {
      parameterListener.onEndReceivingParameters(parameterList);
    }
  }
 else {
    resetWatchdog();
  }
  myDrone.notifyDroneEvent(DroneEventsType.PARAMETER);
}","private void processReceivedParam(msg_param_value m_value){
  Parameter param=new Parameter(m_value);
  parameters.put((int)m_value.param_index,param);
  expectedParams=m_value.param_count;
  if (parameterListener != null)   parameterListener.onParameterReceived(param,m_value.param_index,m_value.param_count);
  if (parameters.size() >= m_value.param_count) {
    parameterList.clear();
    for (    int key : parameters.keySet()) {
      parameterList.add(parameters.get(key));
    }
    killWatchdog();
    myDrone.notifyDroneEvent(DroneEventsType.PARAMETERS_DOWNLOADED);
    if (parameterListener != null) {
      parameterListener.onEndReceivingParameters(parameterList);
    }
  }
 else {
    resetWatchdog();
  }
  myDrone.notifyDroneEvent(DroneEventsType.PARAMETER);
}"
95099,"@Override public boolean onOptionsItemSelected(MenuItem item){
  adapter.clearFocus();
switch (item.getItemId()) {
case R.id.menu_load_parameters:
    refreshParameters();
  break;
case R.id.menu_write_parameters:
writeModifiedParametersToDrone();
break;
case R.id.menu_open_parameters:
openParametersFromFile();
break;
case R.id.menu_save_parameters:
saveParametersToFile();
break;
case R.id.menu_filter_params:
toggleParameterFilter();
break;
default :
return super.onOptionsItemSelected(item);
}
return true;
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  adapter.clearFocus();
switch (item.getItemId()) {
case R.id.menu_load_parameters:
    refreshParameters();
  break;
case R.id.menu_write_parameters:
writeModifiedParametersToDrone();
break;
case R.id.menu_open_parameters:
openParametersFromFile();
break;
case R.id.menu_save_parameters:
saveParametersToFile();
break;
case R.id.menu_filter_params:
final boolean isEnabled=!isParameterFilterVisible();
toggleParameterFilter(isEnabled,isEnabled);
break;
default :
return super.onOptionsItemSelected(item);
}
return true;
}"
95100,"@Override public void onStart(){
  super.onStart();
  drone.addDroneListener(this);
  drone.getParameters().setParameterListener(this);
}","@Override public void onStart(){
  super.onStart();
  drone.addDroneListener(this);
  drone.getParameters().setParameterListener(this);
  toggleParameterFilter(isParameterFilterVisible(),false);
}"
95101,"private void loadAdapter(List<Parameter> parameters){
  if (parameters == null || parameters.isEmpty()) {
    return;
  }
  Set<Parameter> prunedParameters=new TreeSet<Parameter>(parameters);
  adapter.loadParameters(drone,prunedParameters);
}","private void loadAdapter(List<Parameter> parameters){
  if (parameters == null || parameters.isEmpty()) {
    return;
  }
  Set<Parameter> prunedParameters=new TreeSet<Parameter>(parameters);
  adapter.loadParameters(drone,prunedParameters);
  if (mParamsFilter != null && mParamsFilter.getVisibility() == View.VISIBLE) {
    mParamsFilter.setText(""String_Node_Str"");
  }
 else {
    filterInput(null);
  }
}"
95102,"private void toggleParameterFilter(){
  final boolean isEnabled=mPrefs.prefs.getBoolean(PREF_PARAMS_FILTER_ON,DEFAULT_PARAMS_FILTER_ON);
  if (isEnabled) {
    disableParameterFilter();
    mParamsFilter.setVisibility(View.GONE);
  }
 else {
    mParamsFilter.setVisibility(View.VISIBLE);
    enableParameterFilter();
  }
  mPrefs.prefs.edit().putBoolean(PREF_PARAMS_FILTER_ON,!isEnabled).apply();
}","private void toggleParameterFilter(boolean isVisible,boolean enableInput){
  if (isVisible) {
    mParamsFilter.setVisibility(View.VISIBLE);
    filterInput(mParamsFilter.getText());
    if (enableInput) {
      enableParameterFilter();
    }
 else {
      disableParameterFilter();
    }
  }
 else {
    disableParameterFilter();
    mParamsFilter.setVisibility(View.GONE);
    filterInput(null);
  }
  mPrefs.prefs.edit().putBoolean(PREF_PARAMS_FILTER_ON,isVisible).apply();
}"
95103,"@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  final ArrayList<ParamsAdapterItem> pwms=new ArrayList<ParamsAdapterItem>();
  for (int i=0; i < adapter.getCount(); i++)   pwms.add(adapter.getItem(i));
  outState.putSerializable(ADAPTER_ITEMS,pwms);
}","@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  final ArrayList<ParamsAdapterItem> pwms=new ArrayList<ParamsAdapterItem>(adapter.getOriginalValues());
  outState.putSerializable(ADAPTER_ITEMS,pwms);
}"
95104,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  final Context context=getActivity().getApplicationContext();
  typeSpinner.setSelection(commandAdapter.getPosition(MissionItemType.LOITERT));
  final LoiterTime item=(LoiterTime)this.itemRender.getMissionItem();
  final NumericWheelAdapter altitudeAdapter=new NumericWheelAdapter(context,MIN_ALTITUDE,MAX_ALTITUDE,""String_Node_Str"");
  altitudeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView cardAltitudePicker=(CardWheelHorizontalView)view.findViewById(R.id.altitudePicker);
  cardAltitudePicker.setViewAdapter(altitudeAdapter);
  cardAltitudePicker.setCurrentItem(altitudeAdapter.getItemIndex((int)item.getCoordinate().getAltitude().valueInMeters()));
  cardAltitudePicker.addChangingListener(this);
  final NumericWheelAdapter loiterTimeAdapter=new NumericWheelAdapter(context,0,600,""String_Node_Str"");
  loiterTimeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView loiterTimePicker=(CardWheelHorizontalView)view.findViewById(R.id.loiterTimePicker);
  loiterTimePicker.setViewAdapter(loiterTimeAdapter);
  loiterTimePicker.setCurrentItem(loiterTimeAdapter.getItemIndex((int)item.getTime()));
  loiterTimePicker.addChangingListener(this);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  final Context context=getActivity().getApplicationContext();
  typeSpinner.setSelection(commandAdapter.getPosition(MissionItemType.LOITERT));
  final LoiterTime item=(LoiterTime)this.itemRender.getMissionItem();
  final NumericWheelAdapter altitudeAdapter=new NumericWheelAdapter(context,MIN_ALTITUDE,MAX_ALTITUDE,""String_Node_Str"");
  altitudeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView cardAltitudePicker=(CardWheelHorizontalView)view.findViewById(R.id.altitudePicker);
  cardAltitudePicker.setViewAdapter(altitudeAdapter);
  cardAltitudePicker.setCurrentValue((int)item.getCoordinate().getAltitude().valueInMeters());
  cardAltitudePicker.addChangingListener(this);
  final NumericWheelAdapter loiterTimeAdapter=new NumericWheelAdapter(context,0,600,""String_Node_Str"");
  loiterTimeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView loiterTimePicker=(CardWheelHorizontalView)view.findViewById(R.id.loiterTimePicker);
  loiterTimePicker.setViewAdapter(loiterTimeAdapter);
  loiterTimePicker.setCurrentValue((int)item.getTime());
  loiterTimePicker.addChangingListener(this);
}"
95105,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  final Context context=getActivity().getApplicationContext();
  typeSpinner.setSelection(commandAdapter.getPosition(MissionItemType.SPLINE_WAYPOINT));
  SplineWaypoint item=(SplineWaypoint)this.itemRender.getMissionItem();
  final NumericWheelAdapter delayAdapter=new NumericWheelAdapter(context,0,60,""String_Node_Str"");
  delayAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView delayPicker=(CardWheelHorizontalView)view.findViewById(R.id.waypointDelayPicker);
  delayPicker.setViewAdapter(delayAdapter);
  delayPicker.setCurrentItem(delayAdapter.getItemIndex((int)item.getDelay()));
  delayPicker.addChangingListener(this);
  final NumericWheelAdapter altitudeAdapter=new NumericWheelAdapter(context,MIN_ALTITUDE,MAX_ALTITUDE,""String_Node_Str"");
  altitudeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView altitudePicker=(CardWheelHorizontalView)view.findViewById(R.id.altitudePicker);
  altitudePicker.setViewAdapter(altitudeAdapter);
  altitudePicker.setCurrentItem(altitudeAdapter.getItemIndex((int)item.getCoordinate().getAltitude().valueInMeters()));
  altitudePicker.addChangingListener(this);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  final Context context=getActivity().getApplicationContext();
  typeSpinner.setSelection(commandAdapter.getPosition(MissionItemType.SPLINE_WAYPOINT));
  SplineWaypoint item=(SplineWaypoint)this.itemRender.getMissionItem();
  final NumericWheelAdapter delayAdapter=new NumericWheelAdapter(context,0,60,""String_Node_Str"");
  delayAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView delayPicker=(CardWheelHorizontalView)view.findViewById(R.id.waypointDelayPicker);
  delayPicker.setViewAdapter(delayAdapter);
  delayPicker.setCurrentValue((int)item.getDelay());
  delayPicker.addChangingListener(this);
  final NumericWheelAdapter altitudeAdapter=new NumericWheelAdapter(context,MIN_ALTITUDE,MAX_ALTITUDE,""String_Node_Str"");
  altitudeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView altitudePicker=(CardWheelHorizontalView)view.findViewById(R.id.altitudePicker);
  altitudePicker.setViewAdapter(altitudeAdapter);
  altitudePicker.setCurrentValue((int)item.getCoordinate().getAltitude().valueInMeters());
  altitudePicker.addChangingListener(this);
}"
95106,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  typeSpinner.setSelection(commandAdapter.getPosition(MissionItemType.TAKEOFF));
  Takeoff item=(Takeoff)this.itemRender.getMissionItem();
  final NumericWheelAdapter altitudeAdapter=new NumericWheelAdapter(getActivity().getApplicationContext(),MIN_ALTITUDE,MAX_ALTITUDE,""String_Node_Str"");
  altitudeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView cardAltitudePicker=(CardWheelHorizontalView)view.findViewById(R.id.altitudePicker);
  cardAltitudePicker.setViewAdapter(altitudeAdapter);
  cardAltitudePicker.setCurrentItem(altitudeAdapter.getItemIndex((int)item.getFinishedAlt().valueInMeters()));
  cardAltitudePicker.addChangingListener(this);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  typeSpinner.setSelection(commandAdapter.getPosition(MissionItemType.TAKEOFF));
  Takeoff item=(Takeoff)this.itemRender.getMissionItem();
  final NumericWheelAdapter altitudeAdapter=new NumericWheelAdapter(getActivity().getApplicationContext(),MIN_ALTITUDE,MAX_ALTITUDE,""String_Node_Str"");
  altitudeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView cardAltitudePicker=(CardWheelHorizontalView)view.findViewById(R.id.altitudePicker);
  cardAltitudePicker.setViewAdapter(altitudeAdapter);
  cardAltitudePicker.setCurrentValue((int)item.getFinishedAlt().valueInMeters());
  cardAltitudePicker.addChangingListener(this);
}"
95107,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  final Context context=getActivity().getApplicationContext();
  typeSpinner.setSelection(commandAdapter.getPosition(MissionItemType.WAYPOINT));
  final Waypoint item=(Waypoint)this.itemRender.getMissionItem();
  final NumericWheelAdapter delayAdapter=new NumericWheelAdapter(context,0,60,""String_Node_Str"");
  delayAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView delayPicker=(CardWheelHorizontalView)view.findViewById(R.id.waypointDelayPicker);
  delayPicker.setViewAdapter(delayAdapter);
  delayPicker.setCurrentItem(delayAdapter.getItemIndex((int)item.getDelay()));
  delayPicker.addChangingListener(this);
  final NumericWheelAdapter altitudeAdapter=new NumericWheelAdapter(context,MIN_ALTITUDE,MAX_ALTITUDE,""String_Node_Str"");
  altitudeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView altitudePicker=(CardWheelHorizontalView)view.findViewById(R.id.altitudePicker);
  altitudePicker.setViewAdapter(altitudeAdapter);
  altitudePicker.setCurrentItem(altitudeAdapter.getItemIndex((int)item.getCoordinate().getAltitude().valueInMeters()));
  altitudePicker.addChangingListener(this);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  final Context context=getActivity().getApplicationContext();
  typeSpinner.setSelection(commandAdapter.getPosition(MissionItemType.WAYPOINT));
  final Waypoint item=(Waypoint)this.itemRender.getMissionItem();
  final NumericWheelAdapter delayAdapter=new NumericWheelAdapter(context,0,60,""String_Node_Str"");
  delayAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView delayPicker=(CardWheelHorizontalView)view.findViewById(R.id.waypointDelayPicker);
  delayPicker.setViewAdapter(delayAdapter);
  delayPicker.setCurrentValue((int)item.getDelay());
  delayPicker.addChangingListener(this);
  final NumericWheelAdapter altitudeAdapter=new NumericWheelAdapter(context,MIN_ALTITUDE,MAX_ALTITUDE,""String_Node_Str"");
  altitudeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView altitudePicker=(CardWheelHorizontalView)view.findViewById(R.id.altitudePicker);
  altitudePicker.setViewAdapter(altitudeAdapter);
  altitudePicker.setCurrentValue((int)item.getCoordinate().getAltitude().valueInMeters());
  altitudePicker.addChangingListener(this);
}"
95108,"@Override public void onChanged(AbstractWheel wheel,int oldValue,int newValue){
  for (  OnCardWheelChangedListener listener : mChangingListeners) {
    listener.onChanged(this,oldValue,newValue);
  }
}","@Override public void onChanged(AbstractWheel wheel,int oldIndex,int newIndex){
  final int oldValue=getValue(oldIndex);
  final int newValue=getValue(newIndex);
  for (  OnCardWheelChangedListener listener : mChangingListeners) {
    listener.onChanged(this,oldValue,newValue);
  }
}"
95109,"@Override public boolean onEditorAction(TextView v,int actionId,KeyEvent event){
  if (actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_NULL) {
    hideSoftInput();
    final CharSequence input=v.getText();
    if (input != null) {
      final int update=Integer.parseInt(input.toString());
      final int updateIndex=mSpinnerWheel.getViewAdapter().getItemIndex(update);
      if (updateIndex == -1) {
        Toast.makeText(context,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
 else {
        setCurrentItem(updateIndex,true);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean onEditorAction(TextView v,int actionId,KeyEvent event){
  if (actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_NULL) {
    hideSoftInput();
    final CharSequence input=v.getText();
    if (input != null) {
      final int update=Integer.parseInt(input.toString());
      final int updateIndex=mSpinnerWheel.getViewAdapter().getItemIndex(update);
      if (updateIndex == -1) {
        Toast.makeText(context,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
 else {
        setCurrentItemIndex(updateIndex,true);
      }
    }
    return true;
  }
  return false;
}"
95110,"@Override public void onItemClicked(AbstractWheel wheel,int itemIndex,boolean isCurrentItem){
  if (isCurrentItem) {
    final String currentValue=String.valueOf(mSpinnerWheel.getViewAdapter().getItem(itemIndex));
    showSoftInput(currentValue);
  }
 else {
    hideSoftInput();
    setCurrentItem(itemIndex,true);
  }
}","@Override public void onItemClicked(AbstractWheel wheel,int itemIndex,boolean isCurrentItem){
  if (isCurrentItem) {
    final String currentValue=String.valueOf(mSpinnerWheel.getViewAdapter().getItem(itemIndex));
    showSoftInput(currentValue);
  }
 else {
    hideSoftInput();
    setCurrentItemIndex(itemIndex,true);
  }
}"
95111,"private void initialize(final Context context,AttributeSet attrs){
  final TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.CardWheelHorizontalView,0,0);
  try {
    setBackgroundResource(R.drawable.bg_cell_white);
    final LayoutInflater inflater=LayoutInflater.from(context);
    mVerticalDivider=inflater.inflate(R.layout.card_title_vertical_divider,this,false);
    mHorizontalDivider=inflater.inflate(R.layout.card_title_horizontal_divider,this,false);
    mTitleView=(TextView)inflater.inflate(R.layout.card_wheel_horizontal_view_title,this,false);
    mTitleView.setText(a.getString(R.styleable.CardWheelHorizontalView_android_text));
    final int orientation=a.getInt(R.styleable.CardWheelHorizontalView_android_orientation,VERTICAL);
    if (orientation == HORIZONTAL) {
      setOrientation(HORIZONTAL);
    }
 else {
      setOrientation(VERTICAL);
    }
    updateTitleLayout();
    final View spinnerWheelFrame=inflater.inflate(R.layout.card_wheel_horizontal_view,this,false);
    addView(spinnerWheelFrame);
    mSpinnerWheel=(WheelHorizontalView)spinnerWheelFrame.findViewById(R.id.horizontalSpinnerWheel);
    mSpinnerWheel.addChangingListener(this);
    mSpinnerWheel.addClickingListener(this);
    mSpinnerWheel.addScrollingListener(this);
    mNumberInputText=(EditText)spinnerWheelFrame.findViewById(R.id.numberInputText);
    mNumberInputText.setOnFocusChangeListener(new OnFocusChangeListener(){
      @Override public void onFocusChange(      View v,      boolean hasFocus){
        if (hasFocus) {
          mNumberInputText.selectAll();
        }
 else {
          hideSoftInput();
        }
      }
    }
);
    mNumberInputText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
      @Override public boolean onEditorAction(      TextView v,      int actionId,      KeyEvent event){
        if (actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_NULL) {
          hideSoftInput();
          final CharSequence input=v.getText();
          if (input != null) {
            final int update=Integer.parseInt(input.toString());
            final int updateIndex=mSpinnerWheel.getViewAdapter().getItemIndex(update);
            if (updateIndex == -1) {
              Toast.makeText(context,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
            }
 else {
              setCurrentItem(updateIndex,true);
            }
          }
          return true;
        }
        return false;
      }
    }
);
  }
  finally {
    a.recycle();
  }
}","private void initialize(final Context context,AttributeSet attrs){
  final TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.CardWheelHorizontalView,0,0);
  try {
    setBackgroundResource(R.drawable.bg_cell_white);
    final LayoutInflater inflater=LayoutInflater.from(context);
    mVerticalDivider=inflater.inflate(R.layout.card_title_vertical_divider,this,false);
    mHorizontalDivider=inflater.inflate(R.layout.card_title_horizontal_divider,this,false);
    mTitleView=(TextView)inflater.inflate(R.layout.card_wheel_horizontal_view_title,this,false);
    mTitleView.setText(a.getString(R.styleable.CardWheelHorizontalView_android_text));
    final int orientation=a.getInt(R.styleable.CardWheelHorizontalView_android_orientation,VERTICAL);
    if (orientation == HORIZONTAL) {
      setOrientation(HORIZONTAL);
    }
 else {
      setOrientation(VERTICAL);
    }
    updateTitleLayout();
    final View spinnerWheelFrame=inflater.inflate(R.layout.card_wheel_horizontal_view,this,false);
    addView(spinnerWheelFrame);
    mSpinnerWheel=(WheelHorizontalView)spinnerWheelFrame.findViewById(R.id.horizontalSpinnerWheel);
    mSpinnerWheel.addChangingListener(this);
    mSpinnerWheel.addClickingListener(this);
    mSpinnerWheel.addScrollingListener(this);
    mNumberInputText=(EditText)spinnerWheelFrame.findViewById(R.id.numberInputText);
    mNumberInputText.setOnFocusChangeListener(new OnFocusChangeListener(){
      @Override public void onFocusChange(      View v,      boolean hasFocus){
        if (hasFocus) {
          mNumberInputText.selectAll();
        }
 else {
          hideSoftInput();
        }
      }
    }
);
    mNumberInputText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
      @Override public boolean onEditorAction(      TextView v,      int actionId,      KeyEvent event){
        if (actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_NULL) {
          hideSoftInput();
          final CharSequence input=v.getText();
          if (input != null) {
            final int update=Integer.parseInt(input.toString());
            final int updateIndex=mSpinnerWheel.getViewAdapter().getItemIndex(update);
            if (updateIndex == -1) {
              Toast.makeText(context,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
            }
 else {
              setCurrentItemIndex(updateIndex,true);
            }
          }
          return true;
        }
        return false;
      }
    }
);
  }
  finally {
    a.recycle();
  }
}"
95112,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  final Context context=getActivity().getApplicationContext();
  typeSpinner.setSelection(commandAdapter.getPosition(MissionItemType.LOITERT));
  final LoiterTime item=(LoiterTime)this.itemRender.getMissionItem();
  final NumericWheelAdapter altitudeAdapter=new NumericWheelAdapter(context,MIN_ALTITUDE,MAX_ALTITUDE,""String_Node_Str"");
  altitudeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView cardAltitudePicker=(CardWheelHorizontalView)view.findViewById(R.id.altitudePicker);
  cardAltitudePicker.setViewAdapter(altitudeAdapter);
  cardAltitudePicker.setCurrentItem(altitudeAdapter.getItemIndex((int)item.getCoordinate().getAltitude().valueInMeters()));
  cardAltitudePicker.addChangingListener(this);
  final NumericWheelAdapter loiterTimeAdapter=new NumericWheelAdapter(context,0,600,""String_Node_Str"");
  loiterTimeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView loiterTimePicker=(CardWheelHorizontalView)view.findViewById(R.id.loiterTimePicker);
  loiterTimePicker.setViewAdapter(loiterTimeAdapter);
  loiterTimePicker.setCurrentItem(loiterTimeAdapter.getItemIndex((int)item.getTime()));
  loiterTimePicker.addChangingListener(this);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  final Context context=getActivity().getApplicationContext();
  typeSpinner.setSelection(commandAdapter.getPosition(MissionItemType.LOITERT));
  final LoiterTime item=(LoiterTime)this.itemRender.getMissionItem();
  final NumericWheelAdapter altitudeAdapter=new NumericWheelAdapter(context,MIN_ALTITUDE,MAX_ALTITUDE,""String_Node_Str"");
  altitudeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView cardAltitudePicker=(CardWheelHorizontalView)view.findViewById(R.id.altitudePicker);
  cardAltitudePicker.setViewAdapter(altitudeAdapter);
  cardAltitudePicker.setCurrentValue((int)item.getCoordinate().getAltitude().valueInMeters());
  cardAltitudePicker.addChangingListener(this);
  final NumericWheelAdapter loiterTimeAdapter=new NumericWheelAdapter(context,0,600,""String_Node_Str"");
  loiterTimeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView loiterTimePicker=(CardWheelHorizontalView)view.findViewById(R.id.loiterTimePicker);
  loiterTimePicker.setViewAdapter(loiterTimeAdapter);
  loiterTimePicker.setCurrentValue((int)item.getTime());
  loiterTimePicker.addChangingListener(this);
}"
95113,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  final Context context=getActivity().getApplicationContext();
  typeSpinner.setSelection(commandAdapter.getPosition(MissionItemType.SPLINE_WAYPOINT));
  SplineWaypoint item=(SplineWaypoint)this.itemRender.getMissionItem();
  final NumericWheelAdapter delayAdapter=new NumericWheelAdapter(context,0,60,""String_Node_Str"");
  delayAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView delayPicker=(CardWheelHorizontalView)view.findViewById(R.id.waypointDelayPicker);
  delayPicker.setViewAdapter(delayAdapter);
  delayPicker.setCurrentItem(delayAdapter.getItemIndex((int)item.getDelay()));
  delayPicker.addChangingListener(this);
  final NumericWheelAdapter altitudeAdapter=new NumericWheelAdapter(context,MIN_ALTITUDE,MAX_ALTITUDE,""String_Node_Str"");
  altitudeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView altitudePicker=(CardWheelHorizontalView)view.findViewById(R.id.altitudePicker);
  altitudePicker.setViewAdapter(altitudeAdapter);
  altitudePicker.setCurrentItem(altitudeAdapter.getItemIndex((int)item.getCoordinate().getAltitude().valueInMeters()));
  altitudePicker.addChangingListener(this);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  final Context context=getActivity().getApplicationContext();
  typeSpinner.setSelection(commandAdapter.getPosition(MissionItemType.SPLINE_WAYPOINT));
  SplineWaypoint item=(SplineWaypoint)this.itemRender.getMissionItem();
  final NumericWheelAdapter delayAdapter=new NumericWheelAdapter(context,0,60,""String_Node_Str"");
  delayAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView delayPicker=(CardWheelHorizontalView)view.findViewById(R.id.waypointDelayPicker);
  delayPicker.setViewAdapter(delayAdapter);
  delayPicker.setCurrentValue((int)item.getDelay());
  delayPicker.addChangingListener(this);
  final NumericWheelAdapter altitudeAdapter=new NumericWheelAdapter(context,MIN_ALTITUDE,MAX_ALTITUDE,""String_Node_Str"");
  altitudeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView altitudePicker=(CardWheelHorizontalView)view.findViewById(R.id.altitudePicker);
  altitudePicker.setViewAdapter(altitudeAdapter);
  altitudePicker.setCurrentValue((int)item.getCoordinate().getAltitude().valueInMeters());
  altitudePicker.addChangingListener(this);
}"
95114,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  typeSpinner.setSelection(commandAdapter.getPosition(MissionItemType.TAKEOFF));
  Takeoff item=(Takeoff)this.itemRender.getMissionItem();
  final NumericWheelAdapter altitudeAdapter=new NumericWheelAdapter(getActivity().getApplicationContext(),MIN_ALTITUDE,MAX_ALTITUDE,""String_Node_Str"");
  altitudeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView cardAltitudePicker=(CardWheelHorizontalView)view.findViewById(R.id.altitudePicker);
  cardAltitudePicker.setViewAdapter(altitudeAdapter);
  cardAltitudePicker.setCurrentItem(altitudeAdapter.getItemIndex((int)item.getFinishedAlt().valueInMeters()));
  cardAltitudePicker.addChangingListener(this);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  typeSpinner.setSelection(commandAdapter.getPosition(MissionItemType.TAKEOFF));
  Takeoff item=(Takeoff)this.itemRender.getMissionItem();
  final NumericWheelAdapter altitudeAdapter=new NumericWheelAdapter(getActivity().getApplicationContext(),MIN_ALTITUDE,MAX_ALTITUDE,""String_Node_Str"");
  altitudeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView cardAltitudePicker=(CardWheelHorizontalView)view.findViewById(R.id.altitudePicker);
  cardAltitudePicker.setViewAdapter(altitudeAdapter);
  cardAltitudePicker.setCurrentValue((int)item.getFinishedAlt().valueInMeters());
  cardAltitudePicker.addChangingListener(this);
}"
95115,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  final Context context=getActivity().getApplicationContext();
  typeSpinner.setSelection(commandAdapter.getPosition(MissionItemType.WAYPOINT));
  final Waypoint item=(Waypoint)this.itemRender.getMissionItem();
  final NumericWheelAdapter delayAdapter=new NumericWheelAdapter(context,0,60,""String_Node_Str"");
  delayAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView delayPicker=(CardWheelHorizontalView)view.findViewById(R.id.waypointDelayPicker);
  delayPicker.setViewAdapter(delayAdapter);
  delayPicker.setCurrentItem(delayAdapter.getItemIndex((int)item.getDelay()));
  delayPicker.addChangingListener(this);
  final NumericWheelAdapter altitudeAdapter=new NumericWheelAdapter(context,MIN_ALTITUDE,MAX_ALTITUDE,""String_Node_Str"");
  altitudeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView altitudePicker=(CardWheelHorizontalView)view.findViewById(R.id.altitudePicker);
  altitudePicker.setViewAdapter(altitudeAdapter);
  altitudePicker.setCurrentItem(altitudeAdapter.getItemIndex((int)item.getCoordinate().getAltitude().valueInMeters()));
  altitudePicker.addChangingListener(this);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  final Context context=getActivity().getApplicationContext();
  typeSpinner.setSelection(commandAdapter.getPosition(MissionItemType.WAYPOINT));
  final Waypoint item=(Waypoint)this.itemRender.getMissionItem();
  final NumericWheelAdapter delayAdapter=new NumericWheelAdapter(context,0,60,""String_Node_Str"");
  delayAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView delayPicker=(CardWheelHorizontalView)view.findViewById(R.id.waypointDelayPicker);
  delayPicker.setViewAdapter(delayAdapter);
  delayPicker.setCurrentValue((int)item.getDelay());
  delayPicker.addChangingListener(this);
  final NumericWheelAdapter altitudeAdapter=new NumericWheelAdapter(context,MIN_ALTITUDE,MAX_ALTITUDE,""String_Node_Str"");
  altitudeAdapter.setItemResource(R.layout.wheel_text_centered);
  final CardWheelHorizontalView altitudePicker=(CardWheelHorizontalView)view.findViewById(R.id.altitudePicker);
  altitudePicker.setViewAdapter(altitudeAdapter);
  altitudePicker.setCurrentValue((int)item.getCoordinate().getAltitude().valueInMeters());
  altitudePicker.addChangingListener(this);
}"
95116,"@Override public void onChanged(AbstractWheel wheel,int oldValue,int newValue){
  for (  OnCardWheelChangedListener listener : mChangingListeners) {
    listener.onChanged(this,oldValue,newValue);
  }
}","@Override public void onChanged(AbstractWheel wheel,int oldIndex,int newIndex){
  final int oldValue=getValue(oldIndex);
  final int newValue=getValue(newIndex);
  for (  OnCardWheelChangedListener listener : mChangingListeners) {
    listener.onChanged(this,oldValue,newValue);
  }
}"
95117,"@Override public boolean onEditorAction(TextView v,int actionId,KeyEvent event){
  if (actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_NULL) {
    hideSoftInput();
    final CharSequence input=v.getText();
    if (input != null) {
      final int update=Integer.parseInt(input.toString());
      final int updateIndex=mSpinnerWheel.getViewAdapter().getItemIndex(update);
      if (updateIndex == -1) {
        Toast.makeText(context,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
 else {
        setCurrentItem(updateIndex,true);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean onEditorAction(TextView v,int actionId,KeyEvent event){
  if (actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_NULL) {
    hideSoftInput();
    final CharSequence input=v.getText();
    if (input != null) {
      final int update=Integer.parseInt(input.toString());
      final int updateIndex=mSpinnerWheel.getViewAdapter().getItemIndex(update);
      if (updateIndex == -1) {
        Toast.makeText(context,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
 else {
        setCurrentItemIndex(updateIndex,true);
      }
    }
    return true;
  }
  return false;
}"
95118,"@Override public void onItemClicked(AbstractWheel wheel,int itemIndex,boolean isCurrentItem){
  if (isCurrentItem) {
    final String currentValue=String.valueOf(mSpinnerWheel.getViewAdapter().getItem(itemIndex));
    showSoftInput(currentValue);
  }
 else {
    hideSoftInput();
    setCurrentItem(itemIndex,true);
  }
}","@Override public void onItemClicked(AbstractWheel wheel,int itemIndex,boolean isCurrentItem){
  if (isCurrentItem) {
    final String currentValue=String.valueOf(mSpinnerWheel.getViewAdapter().getItem(itemIndex));
    showSoftInput(currentValue);
  }
 else {
    hideSoftInput();
    setCurrentItemIndex(itemIndex,true);
  }
}"
95119,"private void initialize(final Context context,AttributeSet attrs){
  final TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.CardWheelHorizontalView,0,0);
  try {
    setBackgroundResource(R.drawable.bg_cell_white);
    final LayoutInflater inflater=LayoutInflater.from(context);
    mVerticalDivider=inflater.inflate(R.layout.card_title_vertical_divider,this,false);
    mHorizontalDivider=inflater.inflate(R.layout.card_title_horizontal_divider,this,false);
    mTitleView=(TextView)inflater.inflate(R.layout.card_wheel_horizontal_view_title,this,false);
    mTitleView.setText(a.getString(R.styleable.CardWheelHorizontalView_android_text));
    final int orientation=a.getInt(R.styleable.CardWheelHorizontalView_android_orientation,VERTICAL);
    if (orientation == HORIZONTAL) {
      setOrientation(HORIZONTAL);
    }
 else {
      setOrientation(VERTICAL);
    }
    updateTitleLayout();
    final View spinnerWheelFrame=inflater.inflate(R.layout.card_wheel_horizontal_view,this,false);
    addView(spinnerWheelFrame);
    mSpinnerWheel=(WheelHorizontalView)spinnerWheelFrame.findViewById(R.id.horizontalSpinnerWheel);
    mSpinnerWheel.addChangingListener(this);
    mSpinnerWheel.addClickingListener(this);
    mSpinnerWheel.addScrollingListener(this);
    mNumberInputText=(EditText)spinnerWheelFrame.findViewById(R.id.numberInputText);
    mNumberInputText.setOnFocusChangeListener(new OnFocusChangeListener(){
      @Override public void onFocusChange(      View v,      boolean hasFocus){
        if (hasFocus) {
          mNumberInputText.selectAll();
        }
 else {
          hideSoftInput();
        }
      }
    }
);
    mNumberInputText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
      @Override public boolean onEditorAction(      TextView v,      int actionId,      KeyEvent event){
        if (actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_NULL) {
          hideSoftInput();
          final CharSequence input=v.getText();
          if (input != null) {
            final int update=Integer.parseInt(input.toString());
            final int updateIndex=mSpinnerWheel.getViewAdapter().getItemIndex(update);
            if (updateIndex == -1) {
              Toast.makeText(context,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
            }
 else {
              setCurrentItem(updateIndex,true);
            }
          }
          return true;
        }
        return false;
      }
    }
);
  }
  finally {
    a.recycle();
  }
}","private void initialize(final Context context,AttributeSet attrs){
  final TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.CardWheelHorizontalView,0,0);
  try {
    setBackgroundResource(R.drawable.bg_cell_white);
    final LayoutInflater inflater=LayoutInflater.from(context);
    mVerticalDivider=inflater.inflate(R.layout.card_title_vertical_divider,this,false);
    mHorizontalDivider=inflater.inflate(R.layout.card_title_horizontal_divider,this,false);
    mTitleView=(TextView)inflater.inflate(R.layout.card_wheel_horizontal_view_title,this,false);
    mTitleView.setText(a.getString(R.styleable.CardWheelHorizontalView_android_text));
    final int orientation=a.getInt(R.styleable.CardWheelHorizontalView_android_orientation,VERTICAL);
    if (orientation == HORIZONTAL) {
      setOrientation(HORIZONTAL);
    }
 else {
      setOrientation(VERTICAL);
    }
    updateTitleLayout();
    final View spinnerWheelFrame=inflater.inflate(R.layout.card_wheel_horizontal_view,this,false);
    addView(spinnerWheelFrame);
    mSpinnerWheel=(WheelHorizontalView)spinnerWheelFrame.findViewById(R.id.horizontalSpinnerWheel);
    mSpinnerWheel.addChangingListener(this);
    mSpinnerWheel.addClickingListener(this);
    mSpinnerWheel.addScrollingListener(this);
    mNumberInputText=(EditText)spinnerWheelFrame.findViewById(R.id.numberInputText);
    mNumberInputText.setOnFocusChangeListener(new OnFocusChangeListener(){
      @Override public void onFocusChange(      View v,      boolean hasFocus){
        if (hasFocus) {
          mNumberInputText.selectAll();
        }
 else {
          hideSoftInput();
        }
      }
    }
);
    mNumberInputText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
      @Override public boolean onEditorAction(      TextView v,      int actionId,      KeyEvent event){
        if (actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_NULL) {
          hideSoftInput();
          final CharSequence input=v.getText();
          if (input != null) {
            final int update=Integer.parseInt(input.toString());
            final int updateIndex=mSpinnerWheel.getViewAdapter().getItemIndex(update);
            if (updateIndex == -1) {
              Toast.makeText(context,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
            }
 else {
              setCurrentItemIndex(updateIndex,true);
            }
          }
          return true;
        }
        return false;
      }
    }
);
  }
  finally {
    a.recycle();
  }
}"
95120,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_flight);
  fragmentManager=getSupportFragmentManager();
  warningView=(TextView)findViewById(R.id.failsafeTextView);
  mSlidingDrawer=(SlidingDrawer)findViewById(R.id.SlidingDrawerRight);
  mSlidingDrawer.setOnDrawerCloseListener(new SlidingDrawer.OnDrawerCloseListener(){
    @Override public void onDrawerClosed(){
      updateMapPadding();
      GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL.toString()).setVariable(getString(R.string.ga_mode_details_close_panel)).setValue(System.currentTimeMillis()));
    }
  }
);
  mSlidingDrawer.setOnDrawerOpenListener(new SlidingDrawer.OnDrawerOpenListener(){
    @Override public void onDrawerOpened(){
      updateMapPadding();
      GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL.toString()).setVariable(getString(R.string.ga_mode_details_open_panel)).setValue(System.currentTimeMillis()));
    }
  }
);
  setupMapFragment();
  mLocationButtonsContainer=findViewById(R.id.location_button_container);
  mGoToMyLocation=(ImageButton)findViewById(R.id.my_location_button);
  mGoToDroneLocation=(ImageButton)findViewById(R.id.drone_location_button);
  mGoToMyLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToMyLocation();
        updateMapLocationButtons(AutoPanMode.DISABLED);
      }
    }
  }
);
  mGoToMyLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToMyLocation();
        updateMapLocationButtons(AutoPanMode.USER);
        return true;
      }
      return false;
    }
  }
);
  mGoToDroneLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToDroneLocation();
        updateMapLocationButtons(AutoPanMode.DISABLED);
      }
    }
  }
);
  mGoToDroneLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToDroneLocation();
        updateMapLocationButtons(AutoPanMode.DRONE);
        return true;
      }
      return false;
    }
  }
);
  editorTools=fragmentManager.findFragmentById(R.id.editorToolsFragment);
  if (editorTools == null) {
    editorTools=new FlightActionsFragment();
    fragmentManager.beginTransaction().add(R.id.editorToolsFragment,editorTools).commit();
  }
  mTelemetryView=findViewById(R.id.telemetryFragment);
  boolean mIsPhone=mTelemetryView == null;
  if (mIsPhone) {
    Fragment slidingDrawerContent=fragmentManager.findFragmentById(R.id.sliding_drawer_content);
    if (slidingDrawerContent == null) {
      slidingDrawerContent=new FlightSlidingDrawerContent();
      fragmentManager.beginTransaction().add(R.id.sliding_drawer_content,slidingDrawerContent).commit();
    }
  }
 else {
    Fragment telemetryFragment=fragmentManager.findFragmentById(R.id.telemetryFragment);
    if (telemetryFragment == null) {
      telemetryFragment=new TelemetryFragment();
      fragmentManager.beginTransaction().add(R.id.telemetryFragment,telemetryFragment).commit();
    }
    Fragment flightModePanel=fragmentManager.findFragmentById(R.id.sliding_drawer_content);
    if (flightModePanel == null) {
      flightModePanel=new FlightModePanel();
      fragmentManager.beginTransaction().add(R.id.sliding_drawer_content,flightModePanel).commit();
    }
  }
  DroneshareDialog.perhapsShow(this);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_flight);
  fragmentManager=getSupportFragmentManager();
  warningView=(TextView)findViewById(R.id.failsafeTextView);
  mSlidingDrawer=(SlidingDrawer)findViewById(R.id.SlidingDrawerRight);
  mSlidingDrawer.setOnDrawerCloseListener(new SlidingDrawer.OnDrawerCloseListener(){
    @Override public void onDrawerClosed(){
      updateMapPadding();
      GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL).setVariable(getString(R.string.ga_mode_details_close_panel)).setValue(System.currentTimeMillis()));
    }
  }
);
  mSlidingDrawer.setOnDrawerOpenListener(new SlidingDrawer.OnDrawerOpenListener(){
    @Override public void onDrawerOpened(){
      updateMapPadding();
      GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL).setVariable(getString(R.string.ga_mode_details_open_panel)).setValue(System.currentTimeMillis()));
    }
  }
);
  setupMapFragment();
  mLocationButtonsContainer=findViewById(R.id.location_button_container);
  mGoToMyLocation=(ImageButton)findViewById(R.id.my_location_button);
  mGoToDroneLocation=(ImageButton)findViewById(R.id.drone_location_button);
  mGoToMyLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToMyLocation();
        updateMapLocationButtons(AutoPanMode.DISABLED);
      }
    }
  }
);
  mGoToMyLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToMyLocation();
        updateMapLocationButtons(AutoPanMode.USER);
        return true;
      }
      return false;
    }
  }
);
  mGoToDroneLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToDroneLocation();
        updateMapLocationButtons(AutoPanMode.DISABLED);
      }
    }
  }
);
  mGoToDroneLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      if (mapFragment != null) {
        mapFragment.goToDroneLocation();
        updateMapLocationButtons(AutoPanMode.DRONE);
        return true;
      }
      return false;
    }
  }
);
  editorTools=fragmentManager.findFragmentById(R.id.editorToolsFragment);
  if (editorTools == null) {
    editorTools=new FlightActionsFragment();
    fragmentManager.beginTransaction().add(R.id.editorToolsFragment,editorTools).commit();
  }
  mTelemetryView=findViewById(R.id.telemetryFragment);
  boolean mIsPhone=mTelemetryView == null;
  if (mIsPhone) {
    Fragment slidingDrawerContent=fragmentManager.findFragmentById(R.id.sliding_drawer_content);
    if (slidingDrawerContent == null) {
      slidingDrawerContent=new FlightSlidingDrawerContent();
      fragmentManager.beginTransaction().add(R.id.sliding_drawer_content,slidingDrawerContent).commit();
    }
  }
 else {
    Fragment telemetryFragment=fragmentManager.findFragmentById(R.id.telemetryFragment);
    if (telemetryFragment == null) {
      telemetryFragment=new TelemetryFragment();
      fragmentManager.beginTransaction().add(R.id.telemetryFragment,telemetryFragment).commit();
    }
    Fragment flightModePanel=fragmentManager.findFragmentById(R.id.sliding_drawer_content);
    if (flightModePanel == null) {
      flightModePanel=new FlightModePanel();
      fragmentManager.beginTransaction().add(R.id.sliding_drawer_content,flightModePanel).commit();
    }
  }
  DroneshareDialog.perhapsShow(this);
}"
95121,"@Override public void onDrawerClosed(){
  updateMapPadding();
  GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL.toString()).setVariable(getString(R.string.ga_mode_details_close_panel)).setValue(System.currentTimeMillis()));
}","@Override public void onDrawerClosed(){
  updateMapPadding();
  GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL).setVariable(getString(R.string.ga_mode_details_close_panel)).setValue(System.currentTimeMillis()));
}"
95122,"@Override public void onDrawerOpened(){
  updateMapPadding();
  GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL.toString()).setVariable(getString(R.string.ga_mode_details_open_panel)).setValue(System.currentTimeMillis()));
}","@Override public void onDrawerOpened(){
  updateMapPadding();
  GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL).setVariable(getString(R.string.ga_mode_details_open_panel)).setValue(System.currentTimeMillis()));
}"
95123,"/** 
 * Toggle the current state of the MAVlink connection. Starting and closing the as needed. May throw a onConnect or onDisconnect callback
 */
private void connectMAVConnection(){
  String connectionType=mAppPrefs.getMavLinkConnectionType();
  Utils.ConnectionType connType=Utils.ConnectionType.valueOf(connectionType);
  if (mavConnection == null || mavConnection.getConnectionType() != connType.getConnectionType()) {
    mavConnection=connType.getConnection(this);
  }
  if (mavConnection.getConnectionStatus() == MavLinkConnection.MAVLINK_DISCONNECTED) {
    mavConnection.connect();
  }
  GAUtils.sendEvent(new HitBuilders.EventBuilder().setCategory(GAUtils.Category.MAVLINK_CONNECTION.toString()).setAction(""String_Node_Str"" + connectionType + ""String_Node_Str""+ mavConnection.toString()+ ""String_Node_Str""));
}","/** 
 * Toggle the current state of the MAVlink connection. Starting and closing the as needed. May throw a onConnect or onDisconnect callback
 */
private void connectMAVConnection(){
  String connectionType=mAppPrefs.getMavLinkConnectionType();
  Utils.ConnectionType connType=Utils.ConnectionType.valueOf(connectionType);
  if (mavConnection == null || mavConnection.getConnectionType() != connType.getConnectionType()) {
    mavConnection=connType.getConnection(this);
  }
  if (mavConnection.getConnectionStatus() == MavLinkConnection.MAVLINK_DISCONNECTED) {
    mavConnection.connect();
  }
  GAUtils.sendEvent(new HitBuilders.EventBuilder().setCategory(GAUtils.Category.MAVLINK_CONNECTION).setAction(""String_Node_Str"").setLabel(connectionType + ""String_Node_Str"" + mavConnection.toString()+ ""String_Node_Str""));
}"
95124,"private void disconnectMAVConnection(){
  Log.d(LOG_TAG,""String_Node_Str"");
  if (mavConnection != null && mavConnection.getConnectionStatus() != MavLinkConnection.MAVLINK_DISCONNECTED) {
    mavConnection.disconnect();
  }
  GAUtils.sendEvent(new HitBuilders.EventBuilder().setCategory(GAUtils.Category.MAVLINK_CONNECTION.toString()).setAction(""String_Node_Str""));
}","private void disconnectMAVConnection(){
  Log.d(LOG_TAG,""String_Node_Str"");
  if (mavConnection != null && mavConnection.getConnectionStatus() != MavLinkConnection.MAVLINK_DISCONNECTED) {
    mavConnection.disconnect();
  }
  GAUtils.sendEvent(new HitBuilders.EventBuilder().setCategory(GAUtils.Category.MAVLINK_CONNECTION).setAction(""String_Node_Str""));
}"
95125,"@Override public void onPause(){
  super.onPause();
  drone.removeDroneListener(this);
  mMapFragment.saveCameraPosition();
}","@Override public void onPause(){
  super.onPause();
  drone.removeDroneListener(this);
  mHandler.removeCallbacksAndMessages(null);
  mMapFragment.saveCameraPosition();
}"
95126,"@Override public void onClick(View v){
  HitBuilders.EventBuilder eventBuilder=new HitBuilders.EventBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_ACTION_BUTTON.toString());
switch (v.getId()) {
case R.id.mc_planningBtn:
    listener.onPlanningSelected();
  eventBuilder.setAction(""String_Node_Str"").setLabel(getString(R.string.mission_control_edit));
break;
case R.id.mc_joystickBtn:
listener.onJoystickSelected();
eventBuilder.setAction(""String_Node_Str"").setLabel(getString(R.string.mission_control_control));
break;
case R.id.mc_land:
drone.getState().changeFlightMode(ApmModes.ROTOR_LAND);
eventBuilder.setAction(""String_Node_Str"").setLabel(ApmModes.ROTOR_LAND.getName());
break;
case R.id.mc_takeoff:
break;
case R.id.mc_homeBtn:
drone.getState().changeFlightMode(ApmModes.ROTOR_RTL);
eventBuilder.setAction(""String_Node_Str"").setLabel(ApmModes.ROTOR_RTL.getName());
break;
case R.id.mc_loiter:
drone.getState().changeFlightMode(ApmModes.ROTOR_LOITER);
eventBuilder.setAction(""String_Node_Str"").setLabel(ApmModes.ROTOR_LOITER.getName());
break;
case R.id.mc_follow:
final int result=followMe.toggleFollowMeState();
String eventLabel=null;
switch (result) {
case Follow.FOLLOW_START:
eventLabel=""String_Node_Str"";
break;
case Follow.FOLLOW_END:
eventLabel=""String_Node_Str"";
break;
case Follow.FOLLOW_INVALID_STATE:
eventLabel=""String_Node_Str"";
break;
case Follow.FOLLOW_DRONE_DISCONNECTED:
eventLabel=""String_Node_Str"";
break;
case Follow.FOLLOW_DRONE_NOT_ARMED:
eventLabel=""String_Node_Str"";
break;
}
if (eventLabel != null) {
eventBuilder.setAction(""String_Node_Str"").setLabel(eventLabel);
Toast.makeText(getActivity(),eventLabel,Toast.LENGTH_SHORT).show();
}
break;
default :
eventBuilder=null;
break;
}
if (eventBuilder != null) {
GAUtils.sendEvent(eventBuilder);
}
}","@Override public void onClick(View v){
  HitBuilders.EventBuilder eventBuilder=new HitBuilders.EventBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_ACTION_BUTTON);
switch (v.getId()) {
case R.id.mc_planningBtn:
    listener.onPlanningSelected();
  eventBuilder.setAction(""String_Node_Str"").setLabel(getString(R.string.mission_control_edit));
break;
case R.id.mc_joystickBtn:
listener.onJoystickSelected();
eventBuilder.setAction(""String_Node_Str"").setLabel(getString(R.string.mission_control_control));
break;
case R.id.mc_land:
drone.getState().changeFlightMode(ApmModes.ROTOR_LAND);
eventBuilder.setAction(""String_Node_Str"").setLabel(ApmModes.ROTOR_LAND.getName());
break;
case R.id.mc_takeoff:
break;
case R.id.mc_homeBtn:
drone.getState().changeFlightMode(ApmModes.ROTOR_RTL);
eventBuilder.setAction(""String_Node_Str"").setLabel(ApmModes.ROTOR_RTL.getName());
break;
case R.id.mc_loiter:
drone.getState().changeFlightMode(ApmModes.ROTOR_LOITER);
eventBuilder.setAction(""String_Node_Str"").setLabel(ApmModes.ROTOR_LOITER.getName());
break;
case R.id.mc_follow:
final int result=followMe.toggleFollowMeState();
String eventLabel=null;
switch (result) {
case Follow.FOLLOW_START:
eventLabel=""String_Node_Str"";
break;
case Follow.FOLLOW_END:
eventLabel=""String_Node_Str"";
break;
case Follow.FOLLOW_INVALID_STATE:
eventLabel=""String_Node_Str"";
break;
case Follow.FOLLOW_DRONE_DISCONNECTED:
eventLabel=""String_Node_Str"";
break;
case Follow.FOLLOW_DRONE_NOT_ARMED:
eventLabel=""String_Node_Str"";
break;
}
if (eventLabel != null) {
eventBuilder.setAction(""String_Node_Str"").setLabel(eventLabel);
Toast.makeText(getActivity(),eventLabel,Toast.LENGTH_SHORT).show();
}
break;
default :
eventBuilder=null;
break;
}
if (eventBuilder != null) {
GAUtils.sendEvent(eventBuilder);
}
}"
95127,"public static void startNewSession(Context context){
  final DroidPlannerPrefs prefs=new DroidPlannerPrefs(context);
  final String connectionType=prefs.getMavLinkConnectionType();
  final String login=prefs.getDroneshareLogin();
  final String password=prefs.getDronesharePassword();
  final boolean isDroneShareUser=prefs.getLiveUploadEnabled() && !login.isEmpty() && !password.isEmpty();
  sendHit(new HitBuilders.AppViewBuilder().setNewSession().setCustomDimension(CustomDimension.MAVLINK_CONNECTION_TYPE.getIndex(),connectionType).setCustomDimension(CustomDimension.DRONESHARE_ACTIVE.getIndex(),String.valueOf(isDroneShareUser)).build());
}","public static void startNewSession(Context context){
  final DroidPlannerPrefs prefs=new DroidPlannerPrefs(context);
  final String connectionType=prefs.getMavLinkConnectionType();
  final String login=prefs.getDroneshareLogin();
  final String password=prefs.getDronesharePassword();
  final boolean isDroneShareUser=prefs.getLiveUploadEnabled() && !login.isEmpty() && !password.isEmpty();
  sendHit(new HitBuilders.AppViewBuilder().setNewSession().setCustomDimension(CustomDimension.MAVLINK_CONNECTION_TYPE,connectionType).setCustomDimension(CustomDimension.DRONESHARE_ACTIVE,String.valueOf(isDroneShareUser)).build());
}"
95128,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  final Context context=getActivity().getApplicationContext();
  this.survey=((Survey)itemRender.getMissionItem());
  typeSpinner.setSelection(commandAdapter.getPosition(MissionItemType.SURVEY));
  cameraSpinner=(SpinnerSelfSelect)view.findViewById(id.cameraFileSpinner);
  footprintCheckBox=(CheckBox)view.findViewById(id.CheckBoxFootprints);
  mAnglePicker=(CardWheelHorizontalView)view.findViewById(id.anglePicker);
  mAnglePicker.setViewAdapter(new NumericWheelAdapter(context,R.layout.wheel_text_centered,0,180,""String_Node_Str""));
  mAnglePicker.addChangingListener(this);
  mOverlapPicker=(CardWheelHorizontalView)view.findViewById(id.overlapPicker);
  mOverlapPicker.setViewAdapter(new NumericWheelAdapter(context,R.layout.wheel_text_centered,0,99,""String_Node_Str""));
  mOverlapPicker.addChangingListener(this);
  mSidelapPicker=(CardWheelHorizontalView)view.findViewById(R.id.sidelapPicker);
  mSidelapPicker.setViewAdapter(new NumericWheelAdapter(context,R.layout.wheel_text_centered,0,99,""String_Node_Str""));
  mSidelapPicker.addChangingListener(this);
  mAltitudePicker=(CardWheelHorizontalView)view.findViewById(R.id.altitudePicker);
  mAltitudePicker.setViewAdapter(new NumericWheelAdapter(context,R.layout.wheel_text_centered,5,200,""String_Node_Str""));
  mAltitudePicker.addChangingListener(this);
  innerWPsCheckbox=(CheckBox)view.findViewById(id.checkBoxInnerWPs);
  areaTextView=(TextView)view.findViewById(id.areaTextView);
  distanceBetweenLinesTextView=(TextView)view.findViewById(id.distanceBetweenLinesTextView);
  footprintTextView=(TextView)view.findViewById(id.footprintTextView);
  groundResolutionTextView=(TextView)view.findViewById(id.groundResolutionTextView);
  distanceTextView=(TextView)view.findViewById(id.distanceTextView);
  numberOfPicturesView=(TextView)view.findViewById(id.numberOfPicturesTextView);
  numberOfStripsView=(TextView)view.findViewById(id.numberOfStripsTextView);
  lengthView=(TextView)view.findViewById(id.lengthTextView);
  cameraAdapter=new CamerasAdapter(getActivity(),android.R.layout.simple_spinner_dropdown_item);
  cameraSpinner.setAdapter(cameraAdapter);
  footprintCheckBox.setOnClickListener(this);
  innerWPsCheckbox.setOnClickListener(this);
  cameraSpinner.setOnSpinnerItemSelectedListener(this);
  updateViews();
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  final Context context=getActivity().getApplicationContext();
  this.survey=((Survey)itemRender.getMissionItem());
  typeSpinner.setSelection(commandAdapter.getPosition(MissionItemType.SURVEY));
  cameraSpinner=(SpinnerSelfSelect)view.findViewById(id.cameraFileSpinner);
  footprintCheckBox=(CheckBox)view.findViewById(id.CheckBoxFootprints);
  mAnglePicker=(CardWheelHorizontalView)view.findViewById(id.anglePicker);
  mAnglePicker.setViewAdapter(new NumericWheelAdapter(context,R.layout.wheel_text_centered,0,180,""String_Node_Str""));
  mOverlapPicker=(CardWheelHorizontalView)view.findViewById(id.overlapPicker);
  mOverlapPicker.setViewAdapter(new NumericWheelAdapter(context,R.layout.wheel_text_centered,0,99,""String_Node_Str""));
  mSidelapPicker=(CardWheelHorizontalView)view.findViewById(R.id.sidelapPicker);
  mSidelapPicker.setViewAdapter(new NumericWheelAdapter(context,R.layout.wheel_text_centered,0,99,""String_Node_Str""));
  mAltitudePicker=(CardWheelHorizontalView)view.findViewById(R.id.altitudePicker);
  mAltitudePicker.setViewAdapter(new NumericWheelAdapter(context,R.layout.wheel_text_centered,5,200,""String_Node_Str""));
  innerWPsCheckbox=(CheckBox)view.findViewById(id.checkBoxInnerWPs);
  areaTextView=(TextView)view.findViewById(id.areaTextView);
  distanceBetweenLinesTextView=(TextView)view.findViewById(id.distanceBetweenLinesTextView);
  footprintTextView=(TextView)view.findViewById(id.footprintTextView);
  groundResolutionTextView=(TextView)view.findViewById(id.groundResolutionTextView);
  distanceTextView=(TextView)view.findViewById(id.distanceTextView);
  numberOfPicturesView=(TextView)view.findViewById(id.numberOfPicturesTextView);
  numberOfStripsView=(TextView)view.findViewById(id.numberOfStripsTextView);
  lengthView=(TextView)view.findViewById(id.lengthTextView);
  cameraAdapter=new CamerasAdapter(getActivity(),android.R.layout.simple_spinner_dropdown_item);
  cameraSpinner.setAdapter(cameraAdapter);
  footprintCheckBox.setOnClickListener(this);
  innerWPsCheckbox.setOnClickListener(this);
  cameraSpinner.setOnSpinnerItemSelectedListener(this);
  updateViews();
  mAnglePicker.addChangingListener(this);
  mOverlapPicker.addChangingListener(this);
  mSidelapPicker.addChangingListener(this);
  mAltitudePicker.addChangingListener(this);
}"
95129,"@Override public boolean onEditorAction(TextView v,int actionId,KeyEvent event){
  if (actionId == EditorInfo.IME_ACTION_DONE) {
    hideSoftInput();
    final CharSequence input=v.getText();
    if (input != null) {
      final int update=Integer.parseInt(input.toString());
      final int updateIndex=mSpinnerWheel.getViewAdapter().getItemIndex(update);
      if (updateIndex == -1) {
        Toast.makeText(context,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
 else {
        setCurrentItem(updateIndex,true);
      }
    }
    return true;
  }
  return false;
}","@Override public boolean onEditorAction(TextView v,int actionId,KeyEvent event){
  if (actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_NULL) {
    hideSoftInput();
    final CharSequence input=v.getText();
    if (input != null) {
      final int update=Integer.parseInt(input.toString());
      final int updateIndex=mSpinnerWheel.getViewAdapter().getItemIndex(update);
      if (updateIndex == -1) {
        Toast.makeText(context,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
 else {
        setCurrentItem(updateIndex,true);
      }
    }
    return true;
  }
  return false;
}"
95130,"private void initialize(final Context context,AttributeSet attrs){
  final TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.CardWheelHorizontalView,0,0);
  try {
    final Resources res=getResources();
    setOrientation(VERTICAL);
    setBackgroundResource(R.drawable.bg_cell_white);
    final LayoutInflater inflater=LayoutInflater.from(context);
    mTitleView=(TextView)inflater.inflate(R.layout.card_wheel_horizontal_view_title,this,false);
    mTitleView.setText(a.getString(R.styleable.CardWheelHorizontalView_android_text));
    addView(mTitleView);
    final View divider=inflater.inflate(R.layout.card_title_divider,this,false);
    addView(divider);
    final View spinnerWheelFrame=inflater.inflate(R.layout.card_wheel_horizontal_view,this,false);
    addView(spinnerWheelFrame);
    mSpinnerWheel=(WheelHorizontalView)spinnerWheelFrame.findViewById(R.id.horizontalSpinnerWheel);
    mSpinnerWheel.addChangingListener(this);
    mSpinnerWheel.addClickingListener(this);
    mSpinnerWheel.addScrollingListener(this);
    mNumberInputText=(EditText)spinnerWheelFrame.findViewById(R.id.numberInputText);
    mNumberInputText.setOnFocusChangeListener(new OnFocusChangeListener(){
      @Override public void onFocusChange(      View v,      boolean hasFocus){
        if (hasFocus) {
          mNumberInputText.selectAll();
        }
 else {
          hideSoftInput();
        }
      }
    }
);
    mNumberInputText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
      @Override public boolean onEditorAction(      TextView v,      int actionId,      KeyEvent event){
        if (actionId == EditorInfo.IME_ACTION_DONE) {
          hideSoftInput();
          final CharSequence input=v.getText();
          if (input != null) {
            final int update=Integer.parseInt(input.toString());
            final int updateIndex=mSpinnerWheel.getViewAdapter().getItemIndex(update);
            if (updateIndex == -1) {
              Toast.makeText(context,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
            }
 else {
              setCurrentItem(updateIndex,true);
            }
          }
          return true;
        }
        return false;
      }
    }
);
  }
  finally {
    a.recycle();
  }
}","private void initialize(final Context context,AttributeSet attrs){
  final TypedArray a=context.getTheme().obtainStyledAttributes(attrs,R.styleable.CardWheelHorizontalView,0,0);
  try {
    final Resources res=getResources();
    setOrientation(VERTICAL);
    setBackgroundResource(R.drawable.bg_cell_white);
    final LayoutInflater inflater=LayoutInflater.from(context);
    mTitleView=(TextView)inflater.inflate(R.layout.card_wheel_horizontal_view_title,this,false);
    mTitleView.setText(a.getString(R.styleable.CardWheelHorizontalView_android_text));
    addView(mTitleView);
    final View divider=inflater.inflate(R.layout.card_title_divider,this,false);
    addView(divider);
    final View spinnerWheelFrame=inflater.inflate(R.layout.card_wheel_horizontal_view,this,false);
    addView(spinnerWheelFrame);
    mSpinnerWheel=(WheelHorizontalView)spinnerWheelFrame.findViewById(R.id.horizontalSpinnerWheel);
    mSpinnerWheel.addChangingListener(this);
    mSpinnerWheel.addClickingListener(this);
    mSpinnerWheel.addScrollingListener(this);
    mNumberInputText=(EditText)spinnerWheelFrame.findViewById(R.id.numberInputText);
    mNumberInputText.setOnFocusChangeListener(new OnFocusChangeListener(){
      @Override public void onFocusChange(      View v,      boolean hasFocus){
        if (hasFocus) {
          mNumberInputText.selectAll();
        }
 else {
          hideSoftInput();
        }
      }
    }
);
    mNumberInputText.setOnEditorActionListener(new TextView.OnEditorActionListener(){
      @Override public boolean onEditorAction(      TextView v,      int actionId,      KeyEvent event){
        if (actionId == EditorInfo.IME_ACTION_DONE || actionId == EditorInfo.IME_NULL) {
          hideSoftInput();
          final CharSequence input=v.getText();
          if (input != null) {
            final int update=Integer.parseInt(input.toString());
            final int updateIndex=mSpinnerWheel.getViewAdapter().getItemIndex(update);
            if (updateIndex == -1) {
              Toast.makeText(context,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
            }
 else {
              setCurrentItem(updateIndex,true);
            }
          }
          return true;
        }
        return false;
      }
    }
);
  }
  finally {
    a.recycle();
  }
}"
95131,"/** 
 * Account for the various ui elements and update the map padding so that it remains 'visible'.
 */
private void updateMapPadding(){
  final int slidingDrawerWidth=mSlidingDrawer.getContent().getWidth();
  final boolean isSlidingDrawerOpened=mSlidingDrawer.isOpened();
  int rightPadding=isSlidingDrawerOpened ? slidingDrawerWidth : 0;
  int bottomPadding=0;
  int leftPadding=0;
  int topPadding=mLocationButtonsContainer.getTop();
  if (warningView != null && warningView.getVisibility() != View.GONE) {
    topPadding+=warningView.getHeight();
  }
  final View editorToolsView=editorTools.getView();
  final View mapView=mapFragment.getView();
  int[] posOnScreen=new int[2];
  editorToolsView.getLocationOnScreen(posOnScreen);
  final int toolsHeight=editorToolsView.getHeight();
  final int toolsBottom=posOnScreen[1] + toolsHeight;
  ViewGroup.LayoutParams lp=editorToolsView.getLayoutParams();
  if (lp.height == ViewGroup.LayoutParams.MATCH_PARENT) {
    leftPadding=editorToolsView.getRight();
  }
 else {
    if (mTelemetryView != null) {
      leftPadding=mTelemetryView.getRight();
    }
    if (lp.width == ViewGroup.LayoutParams.MATCH_PARENT) {
      mapView.getLocationOnScreen(posOnScreen);
      final int mapTop=posOnScreen[1];
      final int mapBottom=mapTop + mapView.getHeight();
      bottomPadding=(mapBottom - toolsBottom) + toolsHeight;
    }
  }
  mapFragment.setMapPadding(leftPadding,topPadding,rightPadding,bottomPadding);
  final ViewGroup.MarginLayoutParams marginLp=(ViewGroup.MarginLayoutParams)mLocationButtonsContainer.getLayoutParams();
  final int rightMargin=isSlidingDrawerOpened ? marginLp.leftMargin + slidingDrawerWidth : marginLp.leftMargin;
  marginLp.setMargins(marginLp.leftMargin,marginLp.topMargin,rightMargin,marginLp.bottomMargin);
}","/** 
 * Account for the various ui elements and update the map padding so that it remains 'visible'.
 */
private void updateMapPadding(){
  if (mapFragment == null) {
    return;
  }
  final int slidingDrawerWidth=mSlidingDrawer.getContent().getWidth();
  final boolean isSlidingDrawerOpened=mSlidingDrawer.isOpened();
  int rightPadding=isSlidingDrawerOpened ? slidingDrawerWidth : 0;
  int bottomPadding=0;
  int leftPadding=0;
  int topPadding=mLocationButtonsContainer.getTop();
  if (warningView != null && warningView.getVisibility() != View.GONE) {
    topPadding+=warningView.getHeight();
  }
  final View editorToolsView=editorTools.getView();
  final View mapView=mapFragment.getView();
  int[] posOnScreen=new int[2];
  editorToolsView.getLocationOnScreen(posOnScreen);
  final int toolsHeight=editorToolsView.getHeight();
  final int toolsBottom=posOnScreen[1] + toolsHeight;
  ViewGroup.LayoutParams lp=editorToolsView.getLayoutParams();
  if (lp.height == ViewGroup.LayoutParams.MATCH_PARENT) {
    leftPadding=editorToolsView.getRight();
  }
 else {
    if (mTelemetryView != null) {
      leftPadding=mTelemetryView.getRight();
    }
    if (lp.width == ViewGroup.LayoutParams.MATCH_PARENT) {
      mapView.getLocationOnScreen(posOnScreen);
      final int mapTop=posOnScreen[1];
      final int mapBottom=mapTop + mapView.getHeight();
      bottomPadding=(mapBottom - toolsBottom) + toolsHeight;
    }
  }
  mapFragment.setMapPadding(leftPadding,topPadding,rightPadding,bottomPadding);
  final ViewGroup.MarginLayoutParams marginLp=(ViewGroup.MarginLayoutParams)mLocationButtonsContainer.getLayoutParams();
  final int rightMargin=isSlidingDrawerOpened ? marginLp.leftMargin + slidingDrawerWidth : marginLp.leftMargin;
  marginLp.setMargins(marginLp.leftMargin,marginLp.topMargin,rightMargin,marginLp.bottomMargin);
}"
95132,"@Override public void onWindowFocusChanged(boolean hasFocus){
  super.onWindowFocusChanged(hasFocus);
  updateMapPadding();
}","@Override public void onWindowFocusChanged(boolean hasFocus){
  super.onWindowFocusChanged(hasFocus);
  updateMapLocationButtons(mAppPrefs.getAutoPanMode());
  updateMapPadding();
}"
95133,"private void updateMapLocationButtons(AutoPanMode mode){
  mGoToMyLocation.setActivated(false);
  mGoToDroneLocation.setActivated(false);
  mapFragment.setAutoPanMode(mode);
switch (mode) {
case DRONE:
    mGoToDroneLocation.setActivated(true);
  break;
case USER:
mGoToMyLocation.setActivated(true);
break;
default :
break;
}
}","private void updateMapLocationButtons(AutoPanMode mode){
  mGoToMyLocation.setActivated(false);
  mGoToDroneLocation.setActivated(false);
  if (mapFragment != null) {
    mapFragment.setAutoPanMode(mode);
  }
switch (mode) {
case DRONE:
    mGoToDroneLocation.setActivated(true);
  break;
case USER:
mGoToMyLocation.setActivated(true);
break;
default :
break;
}
}"
95134,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(getResource(),container,false);
  final MissionProxy missionProxy=((DroidPlannerApp)getActivity().getApplication()).missionProxy;
  itemRender=missionProxy.selection.getSelected().get(0);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  final MissionProxy missionProxy=((DroidPlannerApp)getActivity().getApplication()).missionProxy;
  final List<MissionItemProxy> selections=missionProxy.selection.getSelected();
  if (selections.isEmpty()) {
    return null;
  }
  itemRender=selections.get(0);
  return inflater.inflate(getResource(),container,false);
}"
95135,"@Override protected void openAndroidConnection() throws IOException {
  D2xxManager ftD2xx=null;
  try {
    ftD2xx=D2xxManager.getInstance(mContext);
  }
 catch (  D2xxManager.D2xxException ex) {
    mLogger.logErr(TAG,ex);
  }
  if (ftD2xx == null) {
    throw new IOException(""String_Node_Str"");
  }
  int DevCount=ftD2xx.createDeviceInfoList(mContext);
  if (DevCount < 1) {
    throw new IOException(""String_Node_Str"");
  }
  ftDev=ftD2xx.openByIndex(mContext,0);
  if (ftDev == null) {
    throw new IOException(""String_Node_Str"");
  }
  Log.d(""String_Node_Str"",""String_Node_Str"" + baud_rate);
  ftDev.setBitMode((byte)0,D2xxManager.FT_BITMODE_RESET);
  ftDev.setBaudRate(baud_rate);
  ftDev.setDataCharacteristics(D2xxManager.FT_DATA_BITS_8,D2xxManager.FT_STOP_BITS_1,D2xxManager.FT_PARITY_NONE);
  ftDev.setFlowControl(D2xxManager.FT_FLOW_NONE,(byte)0x00,(byte)0x00);
  ftDev.setLatencyTimer(LATENCY_TIMER);
  ftDev.purge((byte)(D2xxManager.FT_PURGE_TX | D2xxManager.FT_PURGE_RX));
  if (!ftDev.isOpen()) {
    throw new IOException();
  }
 else {
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
}","@Override protected void openAndroidConnection() throws IOException {
  D2xxManager ftD2xx=null;
  try {
    ftD2xx=D2xxManager.getInstance(mContext);
  }
 catch (  D2xxManager.D2xxException ex) {
    mLogger.logErr(TAG,ex);
  }
  if (ftD2xx == null) {
    throw new IOException(""String_Node_Str"");
  }
  int DevCount=ftD2xx.createDeviceInfoList(mContext);
  if (DevCount < 1) {
    throw new IOException(""String_Node_Str"");
  }
  try {
    ftDev=ftD2xx.openByIndex(mContext,0);
  }
 catch (  NullPointerException e) {
    Log.e(TAG,e.getMessage(),e);
  }
 finally {
    if (ftDev == null) {
      throw new IOException(""String_Node_Str"");
    }
  }
  Log.d(""String_Node_Str"",""String_Node_Str"" + baud_rate);
  ftDev.setBitMode((byte)0,D2xxManager.FT_BITMODE_RESET);
  ftDev.setBaudRate(baud_rate);
  ftDev.setDataCharacteristics(D2xxManager.FT_DATA_BITS_8,D2xxManager.FT_STOP_BITS_1,D2xxManager.FT_PARITY_NONE);
  ftDev.setFlowControl(D2xxManager.FT_FLOW_NONE,(byte)0x00,(byte)0x00);
  ftDev.setLatencyTimer(LATENCY_TIMER);
  ftDev.purge((byte)(D2xxManager.FT_PURGE_TX | D2xxManager.FT_PURGE_RX));
  if (!ftDev.isOpen()) {
    throw new IOException();
  }
 else {
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
}"
95136,"/** 
 * Account for the various ui elements and update the map padding so that it remains 'visible'.
 */
private void updateMapPadding(){
  final int slidingDrawerWidth=mSlidingDrawer.getContent().getWidth();
  final boolean isSlidingDrawerOpened=mSlidingDrawer.isOpened();
  int rightPadding=isSlidingDrawerOpened ? slidingDrawerWidth : 0;
  int bottomPadding=0;
  int leftPadding=0;
  int topPadding=mLocationButtonsContainer.getTop();
  if (warningView != null && warningView.getVisibility() != View.GONE) {
    topPadding+=warningView.getHeight();
  }
  final View editorToolsView=editorTools.getView();
  final View mapView=mapFragment.getView();
  int[] posOnScreen=new int[2];
  editorToolsView.getLocationOnScreen(posOnScreen);
  final int toolsHeight=editorToolsView.getHeight();
  final int toolsBottom=posOnScreen[1] + toolsHeight;
  ViewGroup.LayoutParams lp=editorToolsView.getLayoutParams();
  if (lp.height == ViewGroup.LayoutParams.MATCH_PARENT) {
    leftPadding=editorToolsView.getRight();
  }
 else {
    if (mTelemetryView != null) {
      leftPadding=mTelemetryView.getRight();
    }
    if (lp.width == ViewGroup.LayoutParams.MATCH_PARENT) {
      mapView.getLocationOnScreen(posOnScreen);
      final int mapTop=posOnScreen[1];
      final int mapBottom=mapTop + mapView.getHeight();
      bottomPadding=(mapBottom - toolsBottom) + toolsHeight;
    }
  }
  mapFragment.setMapPadding(leftPadding,topPadding,rightPadding,bottomPadding);
  final ViewGroup.MarginLayoutParams marginLp=(ViewGroup.MarginLayoutParams)mLocationButtonsContainer.getLayoutParams();
  final int rightMargin=isSlidingDrawerOpened ? marginLp.leftMargin + slidingDrawerWidth : marginLp.leftMargin;
  marginLp.setMargins(marginLp.leftMargin,marginLp.topMargin,rightMargin,marginLp.bottomMargin);
}","/** 
 * Account for the various ui elements and update the map padding so that it remains 'visible'.
 */
private void updateMapPadding(){
  if (mapFragment == null) {
    return;
  }
  final int slidingDrawerWidth=mSlidingDrawer.getContent().getWidth();
  final boolean isSlidingDrawerOpened=mSlidingDrawer.isOpened();
  int rightPadding=isSlidingDrawerOpened ? slidingDrawerWidth : 0;
  int bottomPadding=0;
  int leftPadding=0;
  int topPadding=mLocationButtonsContainer.getTop();
  if (warningView != null && warningView.getVisibility() != View.GONE) {
    topPadding+=warningView.getHeight();
  }
  final View editorToolsView=editorTools.getView();
  final View mapView=mapFragment.getView();
  int[] posOnScreen=new int[2];
  editorToolsView.getLocationOnScreen(posOnScreen);
  final int toolsHeight=editorToolsView.getHeight();
  final int toolsBottom=posOnScreen[1] + toolsHeight;
  ViewGroup.LayoutParams lp=editorToolsView.getLayoutParams();
  if (lp.height == ViewGroup.LayoutParams.MATCH_PARENT) {
    leftPadding=editorToolsView.getRight();
  }
 else {
    if (mTelemetryView != null) {
      leftPadding=mTelemetryView.getRight();
    }
    if (lp.width == ViewGroup.LayoutParams.MATCH_PARENT) {
      mapView.getLocationOnScreen(posOnScreen);
      final int mapTop=posOnScreen[1];
      final int mapBottom=mapTop + mapView.getHeight();
      bottomPadding=(mapBottom - toolsBottom) + toolsHeight;
    }
  }
  mapFragment.setMapPadding(leftPadding,topPadding,rightPadding,bottomPadding);
  final ViewGroup.MarginLayoutParams marginLp=(ViewGroup.MarginLayoutParams)mLocationButtonsContainer.getLayoutParams();
  final int rightMargin=isSlidingDrawerOpened ? marginLp.leftMargin + slidingDrawerWidth : marginLp.leftMargin;
  marginLp.setMargins(marginLp.leftMargin,marginLp.topMargin,rightMargin,marginLp.bottomMargin);
}"
95137,"@Override public void onWindowFocusChanged(boolean hasFocus){
  super.onWindowFocusChanged(hasFocus);
  updateMapPadding();
}","@Override public void onWindowFocusChanged(boolean hasFocus){
  super.onWindowFocusChanged(hasFocus);
  updateMapLocationButtons(mAppPrefs.getAutoPanMode());
  updateMapPadding();
}"
95138,"private void updateMapLocationButtons(AutoPanMode mode){
  mGoToMyLocation.setActivated(false);
  mGoToDroneLocation.setActivated(false);
  mapFragment.setAutoPanMode(mode);
switch (mode) {
case DRONE:
    mGoToDroneLocation.setActivated(true);
  break;
case USER:
mGoToMyLocation.setActivated(true);
break;
default :
break;
}
}","private void updateMapLocationButtons(AutoPanMode mode){
  mGoToMyLocation.setActivated(false);
  mGoToDroneLocation.setActivated(false);
  if (mapFragment != null) {
    mapFragment.setAutoPanMode(mode);
  }
switch (mode) {
case DRONE:
    mGoToDroneLocation.setActivated(true);
  break;
case USER:
mGoToMyLocation.setActivated(true);
break;
default :
break;
}
}"
95139,"@Override public void onReceive(Context context,Intent intent){
  final String action=intent.getAction();
  if (SettingsFragment.ACTION_UPDATED_STATUS_PERIOD.equals(action)) {
    statusInterval=mAppPrefs.getSpokenStatusInterval();
    handler.removeCallbacks(watchdogCallback);
    if (statusInterval != 0) {
      handler.postDelayed(watchdogCallback,statusInterval * 1000);
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  final String action=intent.getAction();
  if (SettingsFragment.ACTION_UPDATED_STATUS_PERIOD.equals(action)) {
    scheduleWatchdog();
  }
}"
95140,"/** 
 * Warn the user if needed via the TTSNotificationProvider module
 */
@Override public void onDroneEvent(DroneEventsType event,Drone drone){
  if (tts != null) {
switch (event) {
case INVALID_POLYGON:
      Toast.makeText(context,R.string.exception_draw_polygon,Toast.LENGTH_SHORT).show();
    break;
case ARMING:
  speakArmedState(drone.getState().isArmed());
break;
case ARMING_STARTED:
speak(""String_Node_Str"");
break;
case BATTERY:
batteryDischargeNotification(drone.getBattery().getBattRemain());
break;
case MODE:
speakMode(drone.getState().getMode());
break;
case MISSION_SENT:
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
speak(""String_Node_Str"");
break;
case GPS_FIX:
speakGpsMode(drone.getGps().getFixTypeNumeric());
break;
case MISSION_RECEIVED:
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
speak(""String_Node_Str"");
break;
case HEARTBEAT_FIRST:
watchdogCallback.setDrone(drone);
speak(""String_Node_Str"");
break;
case HEARTBEAT_TIMEOUT:
if (!Calibration.isCalibrating() && mAppPrefs.getWarningOnLostOrRestoredSignal()) {
speak(""String_Node_Str"");
handler.removeCallbacks(watchdogCallback);
}
break;
case HEARTBEAT_RESTORED:
watchdogCallback.setDrone(drone);
if (mAppPrefs.getWarningOnLostOrRestoredSignal()) {
speak(""String_Node_Str"");
}
break;
case DISCONNECTED:
handler.removeCallbacks(watchdogCallback);
break;
case MISSION_WP_UPDATE:
speak(""String_Node_Str"" + drone.getMissionStats().getCurrentWP());
break;
case FOLLOW_START:
speak(""String_Node_Str"");
break;
case WARNING_400FT_EXCEEDED:
if (mAppPrefs.getWarningOn400ftExceeded()) {
speak(""String_Node_Str"");
}
break;
case AUTOPILOT_WARNING:
String warning=drone.getState().getWarning();
if (drone.getState().isWarning() && mAppPrefs.getWarningOnAutopilotWarning()) {
speak(warning);
}
break;
case WARNING_SIGNAL_WEAK:
if (mAppPrefs.getWarningOnLowSignalStrength()) {
speak(""String_Node_Str"");
}
default :
break;
}
}
}","/** 
 * Warn the user if needed via the TTSNotificationProvider module
 */
@Override public void onDroneEvent(DroneEventsType event,Drone drone){
  if (tts != null) {
switch (event) {
case INVALID_POLYGON:
      Toast.makeText(context,R.string.exception_draw_polygon,Toast.LENGTH_SHORT).show();
    break;
case ARMING:
  speakArmedState(drone.getState().isArmed());
break;
case ARMING_STARTED:
speak(""String_Node_Str"");
break;
case BATTERY:
batteryDischargeNotification(drone.getBattery().getBattRemain());
break;
case MODE:
speakMode(drone.getState().getMode());
break;
case MISSION_SENT:
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
speak(""String_Node_Str"");
break;
case GPS_FIX:
speakGpsMode(drone.getGps().getFixTypeNumeric());
break;
case MISSION_RECEIVED:
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
speak(""String_Node_Str"");
break;
case HEARTBEAT_FIRST:
watchdogCallback.setDrone(drone);
scheduleWatchdog();
speak(""String_Node_Str"");
break;
case HEARTBEAT_TIMEOUT:
if (!Calibration.isCalibrating() && mAppPrefs.getWarningOnLostOrRestoredSignal()) {
speak(""String_Node_Str"");
handler.removeCallbacks(watchdogCallback);
}
break;
case HEARTBEAT_RESTORED:
watchdogCallback.setDrone(drone);
scheduleWatchdog();
if (mAppPrefs.getWarningOnLostOrRestoredSignal()) {
speak(""String_Node_Str"");
}
break;
case DISCONNECTED:
handler.removeCallbacks(watchdogCallback);
break;
case MISSION_WP_UPDATE:
speak(""String_Node_Str"" + drone.getMissionStats().getCurrentWP());
break;
case FOLLOW_START:
speak(""String_Node_Str"");
break;
case WARNING_400FT_EXCEEDED:
if (mAppPrefs.getWarningOn400ftExceeded()) {
speak(""String_Node_Str"");
}
break;
case AUTOPILOT_WARNING:
String warning=drone.getState().getWarning();
if (drone.getState().isWarning() && mAppPrefs.getWarningOnAutopilotWarning()) {
speak(warning);
}
break;
case WARNING_SIGNAL_WEAK:
if (mAppPrefs.getWarningOnLowSignalStrength()) {
speak(""String_Node_Str"");
}
default :
break;
}
}
}"
95141,"@Override public void onInit(int status){
  if (status == TextToSpeech.SUCCESS) {
    Locale ttsLanguage;
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
      ttsLanguage=tts.getDefaultLanguage();
    }
 else {
      ttsLanguage=tts.getLanguage();
    }
    if (ttsLanguage == null) {
      ttsLanguage=Locale.US;
    }
    int supportStatus=tts.setLanguage(ttsLanguage);
switch (supportStatus) {
case TextToSpeech.LANG_MISSING_DATA:
case TextToSpeech.LANG_NOT_SUPPORTED:
      tts.shutdown();
    tts=null;
  Log.e(TAG,""String_Node_Str"");
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
break;
}
if (tts != null) {
LocalBroadcastManager.getInstance(context).registerReceiver(mSpeechIntervalUpdateReceiver,new IntentFilter(SettingsFragment.ACTION_UPDATED_STATUS_PERIOD));
}
}
 else {
Log.e(TAG,""String_Node_Str"");
Toast.makeText(context,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
}
}","@Override public void onInit(int status){
  if (status == TextToSpeech.SUCCESS) {
    Locale ttsLanguage;
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
      ttsLanguage=tts.getDefaultLanguage();
    }
 else {
      ttsLanguage=tts.getLanguage();
    }
    if (ttsLanguage == null) {
      ttsLanguage=Locale.US;
    }
    int supportStatus=tts.setLanguage(ttsLanguage);
switch (supportStatus) {
case TextToSpeech.LANG_MISSING_DATA:
case TextToSpeech.LANG_NOT_SUPPORTED:
      tts.shutdown();
    tts=null;
  Log.e(TAG,""String_Node_Str"");
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
break;
}
if (tts != null) {
tts.setOnUtteranceCompletedListener(mSpeechCompleteListener);
LocalBroadcastManager.getInstance(context).registerReceiver(mSpeechIntervalUpdateReceiver,new IntentFilter(SettingsFragment.ACTION_UPDATED_STATUS_PERIOD));
}
}
 else {
Log.e(TAG,""String_Node_Str"");
Toast.makeText(context,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
}
}"
95142,"private void speakPeriodic(Drone drone){
  final SparseBooleanArray speechPrefs=mAppPrefs.getPeriodicSpeechPrefs();
  final StringBuilder message=new StringBuilder();
  if (speechPrefs.get(R.string.pref_tts_periodic_bat_volt_key)) {
    message.append(""String_Node_Str"" + drone.getBattery().getBattVolt() + ""String_Node_Str"");
  }
  if (speechPrefs.get(R.string.pref_tts_periodic_alt_key)) {
    message.append(""String_Node_Str"" + (int)(drone.getAltitude().getAltitude()) + ""String_Node_Str"");
  }
  if (speechPrefs.get(R.string.pref_tts_periodic_airspeed_key)) {
    message.append(""String_Node_Str"" + (int)(drone.getSpeed().getAirSpeed().valueInMetersPerSecond()) + ""String_Node_Str"");
  }
  if (speechPrefs.get(R.string.pref_tts_periodic_rssi_key)) {
    message.append(""String_Node_Str"" + (int)drone.getRadio().getRssi() + ""String_Node_Str"");
  }
  speak(message.toString());
}","private void speakPeriodic(Drone drone){
  if (mIsPeriodicStatusStarted.compareAndSet(false,true)) {
    final SparseBooleanArray speechPrefs=mAppPrefs.getPeriodicSpeechPrefs();
    mMessageBuilder.setLength(0);
    if (speechPrefs.get(R.string.pref_tts_periodic_bat_volt_key)) {
      mMessageBuilder.append(String.format(""String_Node_Str"",drone.getBattery().getBattVolt()));
    }
    if (speechPrefs.get(R.string.pref_tts_periodic_alt_key)) {
      mMessageBuilder.append(""String_Node_Str"" + (int)(drone.getAltitude().getAltitude()) + ""String_Node_Str"");
    }
    if (speechPrefs.get(R.string.pref_tts_periodic_airspeed_key)) {
      mMessageBuilder.append(""String_Node_Str"" + (int)(drone.getSpeed().getAirSpeed().valueInMetersPerSecond()) + ""String_Node_Str"");
    }
    if (speechPrefs.get(R.string.pref_tts_periodic_rssi_key)) {
      mMessageBuilder.append(""String_Node_Str"" + (int)drone.getRadio().getRssi() + ""String_Node_Str"");
    }
    speak(mMessageBuilder.toString(),true,PERIODIC_STATUS_UTTERANCE_ID);
  }
}"
95143,"private void speak(String string){
  if (tts != null) {
    if (shouldEnableTTS()) {
      tts.speak(string,TextToSpeech.QUEUE_FLUSH,null);
    }
  }
}","private void speak(String string,boolean append,String utteranceId){
  if (tts != null) {
    if (shouldEnableTTS()) {
      final int queueType=append ? TextToSpeech.QUEUE_ADD : TextToSpeech.QUEUE_FLUSH;
      mTtsParams.clear();
      if (utteranceId != null) {
        mTtsParams.put(TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID,utteranceId);
      }
      tts.speak(string,queueType,mTtsParams);
    }
  }
}"
95144,"@Override protected void openAndroidConnection() throws IOException {
  D2xxManager ftD2xx=null;
  try {
    ftD2xx=D2xxManager.getInstance(mContext);
  }
 catch (  D2xxManager.D2xxException ex) {
    mLogger.logErr(TAG,ex);
  }
  if (ftD2xx == null) {
    throw new IOException(""String_Node_Str"");
  }
  int DevCount=ftD2xx.createDeviceInfoList(mContext);
  if (DevCount < 1) {
    throw new IOException(""String_Node_Str"");
  }
  ftDev=ftD2xx.openByIndex(mContext,0);
  if (ftDev == null) {
    throw new IOException(""String_Node_Str"");
  }
  Log.d(""String_Node_Str"",""String_Node_Str"" + baud_rate);
  ftDev.setBitMode((byte)0,D2xxManager.FT_BITMODE_RESET);
  ftDev.setBaudRate(baud_rate);
  ftDev.setDataCharacteristics(D2xxManager.FT_DATA_BITS_8,D2xxManager.FT_STOP_BITS_1,D2xxManager.FT_PARITY_NONE);
  ftDev.setFlowControl(D2xxManager.FT_FLOW_NONE,(byte)0x00,(byte)0x00);
  ftDev.setLatencyTimer(LATENCY_TIMER);
  ftDev.purge((byte)(D2xxManager.FT_PURGE_TX | D2xxManager.FT_PURGE_RX));
  if (!ftDev.isOpen()) {
    throw new IOException();
  }
 else {
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
}","@Override protected void openAndroidConnection() throws IOException {
  D2xxManager ftD2xx=null;
  try {
    ftD2xx=D2xxManager.getInstance(mContext);
  }
 catch (  D2xxManager.D2xxException ex) {
    mLogger.logErr(TAG,ex);
  }
  if (ftD2xx == null) {
    throw new IOException(""String_Node_Str"");
  }
  int DevCount=ftD2xx.createDeviceInfoList(mContext);
  if (DevCount < 1) {
    throw new IOException(""String_Node_Str"");
  }
  try {
    ftDev=ftD2xx.openByIndex(mContext,0);
  }
 catch (  NullPointerException e) {
    Log.e(TAG,e.getMessage(),e);
  }
 finally {
    if (ftDev == null) {
      throw new IOException(""String_Node_Str"");
    }
  }
  Log.d(""String_Node_Str"",""String_Node_Str"" + baud_rate);
  ftDev.setBitMode((byte)0,D2xxManager.FT_BITMODE_RESET);
  ftDev.setBaudRate(baud_rate);
  ftDev.setDataCharacteristics(D2xxManager.FT_DATA_BITS_8,D2xxManager.FT_STOP_BITS_1,D2xxManager.FT_PARITY_NONE);
  ftDev.setFlowControl(D2xxManager.FT_FLOW_NONE,(byte)0x00,(byte)0x00);
  ftDev.setLatencyTimer(LATENCY_TIMER);
  ftDev.purge((byte)(D2xxManager.FT_PURGE_TX | D2xxManager.FT_PURGE_RX));
  if (!ftDev.isOpen()) {
    throw new IOException();
  }
 else {
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
}"
95145,"@Override public void onReceive(Context context,Intent intent){
  final String action=intent.getAction();
  if (SettingsFragment.ACTION_UPDATED_STATUS_PERIOD.equals(action)) {
    statusInterval=mAppPrefs.getSpokenStatusInterval();
    handler.removeCallbacks(watchdogCallback);
    if (statusInterval != 0) {
      handler.postDelayed(watchdogCallback,statusInterval * 1000);
    }
  }
}","@Override public void onReceive(Context context,Intent intent){
  final String action=intent.getAction();
  if (SettingsFragment.ACTION_UPDATED_STATUS_PERIOD.equals(action)) {
    scheduleWatchdog();
  }
}"
95146,"/** 
 * Warn the user if needed via the TTSNotificationProvider module
 */
@Override public void onDroneEvent(DroneEventsType event,Drone drone){
  if (tts != null) {
switch (event) {
case INVALID_POLYGON:
      Toast.makeText(context,R.string.exception_draw_polygon,Toast.LENGTH_SHORT).show();
    break;
case ARMING:
  speakArmedState(drone.getState().isArmed());
break;
case ARMING_STARTED:
speak(""String_Node_Str"");
break;
case BATTERY:
batteryDischargeNotification(drone.getBattery().getBattRemain());
break;
case MODE:
speakMode(drone.getState().getMode());
break;
case MISSION_SENT:
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
speak(""String_Node_Str"");
break;
case GPS_FIX:
speakGpsMode(drone.getGps().getFixTypeNumeric());
break;
case MISSION_RECEIVED:
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
speak(""String_Node_Str"");
break;
case HEARTBEAT_FIRST:
watchdogCallback.setDrone(drone);
speak(""String_Node_Str"");
break;
case HEARTBEAT_TIMEOUT:
if (!Calibration.isCalibrating() && mAppPrefs.getWarningOnLostOrRestoredSignal()) {
speak(""String_Node_Str"");
handler.removeCallbacks(watchdogCallback);
}
break;
case HEARTBEAT_RESTORED:
watchdogCallback.setDrone(drone);
if (mAppPrefs.getWarningOnLostOrRestoredSignal()) {
speak(""String_Node_Str"");
}
break;
case DISCONNECTED:
handler.removeCallbacks(watchdogCallback);
break;
case MISSION_WP_UPDATE:
speak(""String_Node_Str"" + drone.getMissionStats().getCurrentWP());
break;
case FOLLOW_START:
speak(""String_Node_Str"");
break;
case WARNING_400FT_EXCEEDED:
if (mAppPrefs.getWarningOn400ftExceeded()) {
speak(""String_Node_Str"");
}
break;
case AUTOPILOT_WARNING:
String warning=drone.getState().getWarning();
if (drone.getState().isWarning() && mAppPrefs.getWarningOnAutopilotWarning()) {
speak(warning);
}
break;
case WARNING_SIGNAL_WEAK:
if (mAppPrefs.getWarningOnLowSignalStrength()) {
speak(""String_Node_Str"");
}
default :
break;
}
}
}","/** 
 * Warn the user if needed via the TTSNotificationProvider module
 */
@Override public void onDroneEvent(DroneEventsType event,Drone drone){
  if (tts != null) {
switch (event) {
case INVALID_POLYGON:
      Toast.makeText(context,R.string.exception_draw_polygon,Toast.LENGTH_SHORT).show();
    break;
case ARMING:
  speakArmedState(drone.getState().isArmed());
break;
case ARMING_STARTED:
speak(""String_Node_Str"");
break;
case BATTERY:
batteryDischargeNotification(drone.getBattery().getBattRemain());
break;
case MODE:
speakMode(drone.getState().getMode());
break;
case MISSION_SENT:
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
speak(""String_Node_Str"");
break;
case GPS_FIX:
speakGpsMode(drone.getGps().getFixTypeNumeric());
break;
case MISSION_RECEIVED:
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
speak(""String_Node_Str"");
break;
case HEARTBEAT_FIRST:
watchdogCallback.setDrone(drone);
scheduleWatchdog();
speak(""String_Node_Str"");
break;
case HEARTBEAT_TIMEOUT:
if (!Calibration.isCalibrating() && mAppPrefs.getWarningOnLostOrRestoredSignal()) {
speak(""String_Node_Str"");
handler.removeCallbacks(watchdogCallback);
}
break;
case HEARTBEAT_RESTORED:
watchdogCallback.setDrone(drone);
scheduleWatchdog();
if (mAppPrefs.getWarningOnLostOrRestoredSignal()) {
speak(""String_Node_Str"");
}
break;
case DISCONNECTED:
handler.removeCallbacks(watchdogCallback);
break;
case MISSION_WP_UPDATE:
speak(""String_Node_Str"" + drone.getMissionStats().getCurrentWP());
break;
case FOLLOW_START:
speak(""String_Node_Str"");
break;
case WARNING_400FT_EXCEEDED:
if (mAppPrefs.getWarningOn400ftExceeded()) {
speak(""String_Node_Str"");
}
break;
case AUTOPILOT_WARNING:
String warning=drone.getState().getWarning();
if (drone.getState().isWarning() && mAppPrefs.getWarningOnAutopilotWarning()) {
speak(warning);
}
break;
case WARNING_SIGNAL_WEAK:
if (mAppPrefs.getWarningOnLowSignalStrength()) {
speak(""String_Node_Str"");
}
default :
break;
}
}
}"
95147,"@Override public void onInit(int status){
  if (status == TextToSpeech.SUCCESS) {
    Locale ttsLanguage;
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
      ttsLanguage=tts.getDefaultLanguage();
    }
 else {
      ttsLanguage=tts.getLanguage();
    }
    if (ttsLanguage == null) {
      ttsLanguage=Locale.US;
    }
    int supportStatus=tts.setLanguage(ttsLanguage);
switch (supportStatus) {
case TextToSpeech.LANG_MISSING_DATA:
case TextToSpeech.LANG_NOT_SUPPORTED:
      tts.shutdown();
    tts=null;
  Log.e(TAG,""String_Node_Str"");
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
break;
}
if (tts != null) {
LocalBroadcastManager.getInstance(context).registerReceiver(mSpeechIntervalUpdateReceiver,new IntentFilter(SettingsFragment.ACTION_UPDATED_STATUS_PERIOD));
}
}
 else {
Log.e(TAG,""String_Node_Str"");
Toast.makeText(context,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
}
}","@Override public void onInit(int status){
  if (status == TextToSpeech.SUCCESS) {
    Locale ttsLanguage;
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
      ttsLanguage=tts.getDefaultLanguage();
    }
 else {
      ttsLanguage=tts.getLanguage();
    }
    if (ttsLanguage == null) {
      ttsLanguage=Locale.US;
    }
    int supportStatus=tts.setLanguage(ttsLanguage);
switch (supportStatus) {
case TextToSpeech.LANG_MISSING_DATA:
case TextToSpeech.LANG_NOT_SUPPORTED:
      tts.shutdown();
    tts=null;
  Log.e(TAG,""String_Node_Str"");
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
break;
}
if (tts != null) {
tts.setOnUtteranceCompletedListener(mSpeechCompleteListener);
LocalBroadcastManager.getInstance(context).registerReceiver(mSpeechIntervalUpdateReceiver,new IntentFilter(SettingsFragment.ACTION_UPDATED_STATUS_PERIOD));
}
}
 else {
Log.e(TAG,""String_Node_Str"");
Toast.makeText(context,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
}
}"
95148,"private void speakPeriodic(Drone drone){
  final SparseBooleanArray speechPrefs=mAppPrefs.getPeriodicSpeechPrefs();
  final StringBuilder message=new StringBuilder();
  if (speechPrefs.get(R.string.pref_tts_periodic_bat_volt_key)) {
    message.append(""String_Node_Str"" + drone.getBattery().getBattVolt() + ""String_Node_Str"");
  }
  if (speechPrefs.get(R.string.pref_tts_periodic_alt_key)) {
    message.append(""String_Node_Str"" + (int)(drone.getAltitude().getAltitude()) + ""String_Node_Str"");
  }
  if (speechPrefs.get(R.string.pref_tts_periodic_airspeed_key)) {
    message.append(""String_Node_Str"" + (int)(drone.getSpeed().getAirSpeed().valueInMetersPerSecond()) + ""String_Node_Str"");
  }
  if (speechPrefs.get(R.string.pref_tts_periodic_rssi_key)) {
    message.append(""String_Node_Str"" + (int)drone.getRadio().getRssi() + ""String_Node_Str"");
  }
  speak(message.toString());
}","private void speakPeriodic(Drone drone){
  if (mIsPeriodicStatusStarted.compareAndSet(false,true)) {
    final SparseBooleanArray speechPrefs=mAppPrefs.getPeriodicSpeechPrefs();
    mMessageBuilder.setLength(0);
    if (speechPrefs.get(R.string.pref_tts_periodic_bat_volt_key)) {
      mMessageBuilder.append(String.format(""String_Node_Str"",drone.getBattery().getBattVolt()));
    }
    if (speechPrefs.get(R.string.pref_tts_periodic_alt_key)) {
      mMessageBuilder.append(""String_Node_Str"" + (int)(drone.getAltitude().getAltitude()) + ""String_Node_Str"");
    }
    if (speechPrefs.get(R.string.pref_tts_periodic_airspeed_key)) {
      mMessageBuilder.append(""String_Node_Str"" + (int)(drone.getSpeed().getAirSpeed().valueInMetersPerSecond()) + ""String_Node_Str"");
    }
    if (speechPrefs.get(R.string.pref_tts_periodic_rssi_key)) {
      mMessageBuilder.append(""String_Node_Str"" + (int)drone.getRadio().getRssi() + ""String_Node_Str"");
    }
    speak(mMessageBuilder.toString(),true,PERIODIC_STATUS_UTTERANCE_ID);
  }
}"
95149,"private void speak(String string){
  if (tts != null) {
    if (shouldEnableTTS()) {
      tts.speak(string,TextToSpeech.QUEUE_FLUSH,null);
    }
  }
}","private void speak(String string,boolean append,String utteranceId){
  if (tts != null) {
    if (shouldEnableTTS()) {
      final int queueType=append ? TextToSpeech.QUEUE_ADD : TextToSpeech.QUEUE_FLUSH;
      mTtsParams.clear();
      if (utteranceId != null) {
        mTtsParams.put(TextToSpeech.Engine.KEY_PARAM_UTTERANCE_ID,utteranceId);
      }
      tts.speak(string,queueType,mTtsParams);
    }
  }
}"
95150,"@Override public void onDroneEvent(DroneEventsType event,Drone drone){
switch (event) {
case MISSION_UPDATE:
    update();
  break;
case GPS:
mMapFragment.updateMarker(graphicDrone);
mMapFragment.updateDroneLeashPath(guided);
if (drone.getGps().isPositionValid()) {
mMapFragment.addFlightPathPoint(drone.getGps().getPosition());
}
break;
case GUIDEDPOINT:
mMapFragment.updateMarker(guided);
mMapFragment.updateDroneLeashPath(guided);
break;
case HEARTBEAT_RESTORED:
case HEARTBEAT_FIRST:
graphicDrone.setConnectionAlive(true);
mMapFragment.updateMarker(graphicDrone);
break;
case DISCONNECTED:
case HEARTBEAT_TIMEOUT:
graphicDrone.setConnectionAlive(false);
mMapFragment.updateMarker(graphicDrone);
break;
default :
break;
}
}","@Override public void onDroneEvent(DroneEventsType event,Drone drone){
switch (event) {
case MISSION_UPDATE:
    update();
  break;
case GPS:
mMapFragment.updateMarker(graphicDrone);
mMapFragment.updateDroneLeashPath(guided);
if (drone.getGps().isPositionValid()) {
mMapFragment.addFlightPathPoint(drone.getGps().getPosition());
}
break;
case GUIDEDPOINT:
mMapFragment.updateMarker(guided);
mMapFragment.updateDroneLeashPath(guided);
break;
case HEARTBEAT_RESTORED:
case HEARTBEAT_FIRST:
mMapFragment.updateMarker(graphicDrone);
break;
case DISCONNECTED:
case HEARTBEAT_TIMEOUT:
mMapFragment.updateMarker(graphicDrone);
break;
default :
break;
}
}"
95151,"@Override public Bitmap getIcon(Resources res){
  if (isConnectionAlive) {
    return BitmapFactory.decodeResource(res,R.drawable.quad);
  }
  return BitmapFactory.decodeResource(res,R.drawable.quad_disconnect);
}","@Override public Bitmap getIcon(Resources res){
  if (drone.isConnectionAlive()) {
    return BitmapFactory.decodeResource(res,R.drawable.quad);
  }
  return BitmapFactory.decodeResource(res,R.drawable.quad_disconnect);
}"
95152,"/** 
 * Toggle the current state of the MAVlink connection. Starting and closing the as needed. May throw a onConnect or onDisconnect callback
 */
private void connectMAVConnection(){
  String connectionType=mAppPrefs.getMavLinkConnectionType();
  Utils.ConnectionType connType=Utils.ConnectionType.valueOf(connectionType);
  if (mavConnection == null || mavConnection.getConnectionType() != connType.getConnectionType()) {
    mavConnection=connType.getConnection(this);
  }
  if (mavConnection.getConnectionStatus() == MavLinkConnection.MAVLINK_DISCONNECTED) {
    mavConnection.connect();
  }
  GAUtils.sendEvent(new HitBuilders.EventBuilder().setCategory(GAUtils.Category.MAVLINK_CONNECTION.toString()).setAction(""String_Node_Str"" + connectionType));
}","/** 
 * Toggle the current state of the MAVlink connection. Starting and closing the as needed. May throw a onConnect or onDisconnect callback
 */
private void connectMAVConnection(){
  String connectionType=mAppPrefs.getMavLinkConnectionType();
  Utils.ConnectionType connType=Utils.ConnectionType.valueOf(connectionType);
  if (mavConnection == null || mavConnection.getConnectionType() != connType.getConnectionType()) {
    mavConnection=connType.getConnection(this);
    mavConnection.addMavLinkConnectionListener(LOG_TAG,this);
  }
  if (mavConnection.getConnectionStatus() == MavLinkConnection.MAVLINK_DISCONNECTED) {
    mavConnection.connect();
  }
  GAUtils.sendEvent(new HitBuilders.EventBuilder().setCategory(GAUtils.Category.MAVLINK_CONNECTION.toString()).setAction(""String_Node_Str"" + connectionType));
}"
95153,"/** 
 * Adds a listener to the mavlink connection.
 * @param listener
 */
public void addMavLinkConnectionListener(MavLinkConnectionListener listener){
  mListeners.add(listener);
}","/** 
 * Adds a listener to the mavlink connection.
 * @param listener
 * @param tag Listener tag
 */
public void addMavLinkConnectionListener(String tag,MavLinkConnectionListener listener){
  mListeners.put(tag,listener);
}"
95154,"/** 
 * Utility method to notify the mavlink listeners about communication errors.
 * @param errMsg
 */
private void reportComError(String errMsg){
  for (  MavLinkConnectionListener listener : mListeners) {
    listener.onComError(errMsg);
  }
}","/** 
 * Utility method to notify the mavlink listeners about communication errors.
 * @param errMsg
 */
private void reportComError(String errMsg){
  if (mListeners.isEmpty())   return;
  for (  MavLinkConnectionListener listener : mListeners.values()) {
    listener.onComError(errMsg);
  }
}"
95155,"/** 
 * Utility method to notify the mavlink listeners about a successful connection.
 */
private void reportConnect(){
  for (  MavLinkConnectionListener listener : mListeners) {
    listener.onConnect();
  }
}","/** 
 * Utility method to notify the mavlink listeners about a successful connection.
 */
private void reportConnect(){
  for (  MavLinkConnectionListener listener : mListeners.values()) {
    listener.onConnect();
  }
}"
95156,"/** 
 * Utility method to notify the mavlink listeners about received messages.
 * @param msg received mavlink message
 */
private void reportReceivedMessage(MAVLinkMessage msg){
  for (  MavLinkConnectionListener listener : mListeners) {
    listener.onReceiveMessage(msg);
  }
}","/** 
 * Utility method to notify the mavlink listeners about received messages.
 * @param msg received mavlink message
 */
private void reportReceivedMessage(MAVLinkMessage msg){
  if (mListeners.isEmpty())   return;
  for (  MavLinkConnectionListener listener : mListeners.values()) {
    listener.onReceiveMessage(msg);
  }
}"
95157,"/** 
 * Utility method to notify the mavlink listeners about a connection disconnect.
 */
private void reportDisconnect(){
  for (  MavLinkConnectionListener listener : mListeners) {
    listener.onDisconnect();
  }
}","/** 
 * Utility method to notify the mavlink listeners about a connection disconnect.
 */
private void reportDisconnect(){
  if (mListeners.isEmpty())   return;
  for (  MavLinkConnectionListener listener : mListeners.values()) {
    listener.onDisconnect();
  }
}"
95158,"/** 
 * Removes the specified listener.
 * @param listener
 */
public void removeMavLinkConnectionListener(MavLinkConnectionListener listener){
  mListeners.remove(listener);
}","/** 
 * Removes the specified listener.
 * @param tag Listener tag
 */
public void removeMavLinkConnectionListener(String tag){
  mListeners.remove(tag);
}"
95159,"private void getTCPStream() throws IOException {
  InetAddress serverAddr=InetAddress.getByName(serverIP);
  socket=new Socket(serverAddr,serverPort);
  mavOut=new BufferedOutputStream((socket.getOutputStream()));
  mavIn=new BufferedInputStream(socket.getInputStream());
}","private void getTCPStream() throws IOException {
  InetAddress serverAddr=InetAddress.getByName(serverIP);
  socket=new Socket();
  socket.connect(new InetSocketAddress(serverAddr,serverPort),5000);
  mavOut=new BufferedOutputStream((socket.getOutputStream()));
  mavIn=new BufferedInputStream(socket.getInputStream());
}"
95160,"public void run(){
  handler.removeCallbacks(watchdogCallback);
  speakPeriodic(drone);
  if (statusInterval != 0) {
    handler.postDelayed(watchdogCallback,statusInterval * 1000);
  }
}","public void run(){
  handler.removeCallbacks(watchdogCallback);
  if (drone != null && drone.getMavClient().isConnected()) {
    speakPeriodic(drone);
  }
  if (statusInterval != 0) {
    handler.postDelayed(watchdogCallback,statusInterval * 1000);
  }
}"
95161,"@Override public void onDroneEvent(DroneEventsType event,Drone drone){
switch (event) {
case MISSION_UPDATE:
    update();
  break;
case GPS:
mMapFragment.updateMarker(graphicDrone);
mMapFragment.updateDroneLeashPath(guided);
if (drone.getGps().isPositionValid()) {
mMapFragment.addFlightPathPoint(drone.getGps().getPosition());
}
break;
case GUIDEDPOINT:
mMapFragment.updateMarker(guided);
mMapFragment.updateDroneLeashPath(guided);
break;
case HEARTBEAT_RESTORED:
case HEARTBEAT_FIRST:
graphicDrone.setConnectionAlive(true);
mMapFragment.updateMarker(graphicDrone);
break;
case DISCONNECTED:
case HEARTBEAT_TIMEOUT:
graphicDrone.setConnectionAlive(false);
mMapFragment.updateMarker(graphicDrone);
break;
default :
break;
}
}","@Override public void onDroneEvent(DroneEventsType event,Drone drone){
switch (event) {
case MISSION_UPDATE:
    update();
  break;
case GPS:
mMapFragment.updateMarker(graphicDrone);
mMapFragment.updateDroneLeashPath(guided);
if (drone.getGps().isPositionValid()) {
mMapFragment.addFlightPathPoint(drone.getGps().getPosition());
}
break;
case GUIDEDPOINT:
mMapFragment.updateMarker(guided);
mMapFragment.updateDroneLeashPath(guided);
break;
case HEARTBEAT_RESTORED:
case HEARTBEAT_FIRST:
graphicDrone.setConnectionAlive(true);
if (graphicDrone.isValid()) {
mMapFragment.updateMarker(graphicDrone);
}
break;
case DISCONNECTED:
case HEARTBEAT_TIMEOUT:
graphicDrone.setConnectionAlive(false);
if (graphicDrone.isValid()) {
mMapFragment.updateMarker(graphicDrone);
}
break;
default :
break;
}
}"
95162,"@Override public void updateMarker(MarkerInfo markerInfo,boolean isDraggable){
  final LatLng position=DroneHelper.CoordToLatLang(markerInfo.getPosition());
  Marker marker=mMarkers.get(markerInfo);
  if (marker == null) {
    marker=mMap.addMarker(new MarkerOptions().position(position));
    mMarkers.put(markerInfo,marker);
  }
  final Bitmap markerIcon=markerInfo.getIcon(getResources());
  if (markerIcon != null) {
    marker.setIcon(BitmapDescriptorFactory.fromBitmap(markerIcon));
  }
  marker.setAlpha(markerInfo.getAlpha());
  marker.setAnchor(markerInfo.getAnchorU(),markerInfo.getAnchorV());
  marker.setInfoWindowAnchor(markerInfo.getInfoWindowAnchorU(),markerInfo.getInfoWindowAnchorV());
  marker.setPosition(position);
  marker.setRotation(markerInfo.getRotation());
  marker.setSnippet(markerInfo.getSnippet());
  marker.setTitle(markerInfo.getTitle());
  marker.setDraggable(isDraggable);
  marker.setFlat(markerInfo.isFlat());
  marker.setVisible(markerInfo.isVisible());
}","@Override public void updateMarker(MarkerInfo markerInfo,boolean isDraggable){
  final Coord2D coord=markerInfo.getPosition();
  if (coord == null) {
    return;
  }
  final LatLng position=DroneHelper.CoordToLatLang(coord);
  Marker marker=mMarkers.get(markerInfo);
  if (marker == null) {
    marker=mMap.addMarker(new MarkerOptions().position(position));
    mMarkers.put(markerInfo,marker);
  }
  final Bitmap markerIcon=markerInfo.getIcon(getResources());
  if (markerIcon != null) {
    marker.setIcon(BitmapDescriptorFactory.fromBitmap(markerIcon));
  }
  marker.setAlpha(markerInfo.getAlpha());
  marker.setAnchor(markerInfo.getAnchorU(),markerInfo.getAnchorV());
  marker.setInfoWindowAnchor(markerInfo.getInfoWindowAnchorU(),markerInfo.getInfoWindowAnchorV());
  marker.setPosition(position);
  marker.setRotation(markerInfo.getRotation());
  marker.setSnippet(markerInfo.getSnippet());
  marker.setTitle(markerInfo.getTitle());
  marker.setDraggable(isDraggable);
  marker.setFlat(markerInfo.isFlat());
  marker.setVisible(markerInfo.isVisible());
}"
95163,"@Override protected final void closeConnection() throws IOException {
  socket.close();
}","@Override protected final void closeConnection() throws IOException {
  if (socket != null)   socket.close();
}"
95164,"@Override protected final void closeConnection() throws IOException {
  socket.close();
}","@Override protected final void closeConnection() throws IOException {
  if (socket != null)   socket.close();
}"
95165,"private void setupPeriodicControls(){
  final PreferenceCategory periodicSpeechPrefs=(PreferenceCategory)findPreference(getActivity().getApplicationContext().getString(R.string.pref_tts_periodic_key));
  int val=Integer.parseInt(((ListPreference)periodicSpeechPrefs.getPreference(0)).getValue());
  for (int i=1; i < periodicSpeechPrefs.getPreferenceCount(); i++) {
    periodicSpeechPrefs.getPreference(i).setEnabled(val != 0);
  }
}","private void setupPeriodicControls(){
  final PreferenceCategory periodicSpeechPrefs=(PreferenceCategory)findPreference(getActivity().getApplicationContext().getString(R.string.pref_tts_periodic_key));
  ListPreference periodic=((ListPreference)periodicSpeechPrefs.getPreference(0));
  int val=Integer.parseInt(periodic.getValue());
  if (val != 0) {
    periodic.setSummary(""String_Node_Str"" + val + ""String_Node_Str"");
  }
 else {
    periodic.setSummary(""String_Node_Str"");
  }
  for (int i=1; i < periodicSpeechPrefs.getPreferenceCount(); i++) {
    periodicSpeechPrefs.getPreference(i).setEnabled(val != 0);
  }
}"
95166,"@Override public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,String key){
  final Preference preference=findPreference(key);
  if (preference == null) {
    return;
  }
  if (mDefaultSummaryPrefs.contains(key)) {
    preference.setSummary(sharedPreferences.getString(key,""String_Node_Str""));
  }
  if (key.equals(getString(R.string.pref_max_flight_path_size_key))) {
    preference.setSummary(sharedPreferences.getString(key,""String_Node_Str"") + ""String_Node_Str"" + getString(R.string.set_to_zero_to_disable));
  }
  DroidPlannerApp droidPlannerApp=(DroidPlannerApp)getActivity().getApplication();
  if (key.equals(getString(R.string.pref_vehicle_type_key))) {
    droidPlannerApp.getDrone().events.notifyDroneEvent(DroneEventsType.TYPE);
  }
  if (key.equals(getString(R.string.pref_rc_mode_key))) {
    if (sharedPreferences.getString(key,""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      preference.setSummary(R.string.mode1_throttle_on_right_stick);
    }
 else {
      preference.setSummary(R.string.mode2_throttle_on_left_stick);
    }
  }
  if (key.equals(getString(R.string.pref_tts_periodic_period_key))) {
    droidPlannerApp.getDrone().events.notifyDroneEvent(DroneEventsType.PERIODIC_SPEECH);
    setupPeriodicControls();
    int val=Integer.parseInt(sharedPreferences.getString(getString(R.string.pref_tts_periodic_period_key),null));
    droidPlannerApp.mNotificationHandler.getTtsNotification().setupPeriodicSpeechOutput(val,droidPlannerApp.getDrone());
  }
}","@Override public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,String key){
  final Preference preference=findPreference(key);
  if (preference == null) {
    return;
  }
  if (mDefaultSummaryPrefs.contains(key)) {
    preference.setSummary(sharedPreferences.getString(key,""String_Node_Str""));
  }
  if (key.equals(getString(R.string.pref_max_flight_path_size_key))) {
    preference.setSummary(sharedPreferences.getString(key,""String_Node_Str"") + ""String_Node_Str"" + getString(R.string.set_to_zero_to_disable));
  }
  DroidPlannerApp droidPlannerApp=(DroidPlannerApp)getActivity().getApplication();
  if (key.equals(getString(R.string.pref_vehicle_type_key))) {
    droidPlannerApp.getDrone().events.notifyDroneEvent(DroneEventsType.TYPE);
  }
  if (key.equals(getString(R.string.pref_rc_mode_key))) {
    if (sharedPreferences.getString(key,""String_Node_Str"").equalsIgnoreCase(""String_Node_Str"")) {
      preference.setSummary(R.string.mode1_throttle_on_right_stick);
    }
 else {
      preference.setSummary(R.string.mode2_throttle_on_left_stick);
    }
  }
  if (key.equals(getString(R.string.pref_tts_periodic_period_key))) {
    setupPeriodicControls();
    int val=Integer.parseInt(sharedPreferences.getString(getString(R.string.pref_tts_periodic_period_key),null));
    if (droidPlannerApp.getDrone().MavClient.isConnected()) {
      droidPlannerApp.mNotificationHandler.getTtsNotification().setupPeriodicSpeechOutput(val,droidPlannerApp.getDrone());
    }
  }
}"
95167,"/** 
 * Warn the user if needed via the TTSNotificationProvider module
 */
@Override public void onDroneEvent(DroneEventsType event,Drone drone){
  if (tts != null) {
switch (event) {
case INVALID_POLYGON:
      Toast.makeText(context,R.string.exception_draw_polygon,Toast.LENGTH_SHORT).show();
    break;
case ARMING:
  speakArmedState(drone.state.isArmed());
break;
case ARMING_STARTED:
speak(""String_Node_Str"");
break;
case BATTERY:
batteryDischargeNotification(drone.battery.getBattRemain());
break;
case MODE:
speakMode(drone.state.getMode());
break;
case MISSION_SENT:
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
speak(""String_Node_Str"");
break;
case GPS_FIX:
speakGpsMode(drone.GPS.getFixTypeNumeric());
break;
case MISSION_RECEIVED:
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
speak(""String_Node_Str"");
break;
case HEARTBEAT_FIRST:
statusInterval=new DroidPlannerPrefs(context).getSpokenStatusInterval();
setupPeriodicSpeechOutput(statusInterval,drone);
speak(""String_Node_Str"");
break;
case HEARTBEAT_TIMEOUT:
if (!Calibration.isCalibrating()) {
speak(""String_Node_Str"");
handler.removeCallbacks(watchdogCallback);
}
break;
case HEARTBEAT_RESTORED:
statusInterval=new DroidPlannerPrefs(context).getSpokenStatusInterval();
setupPeriodicSpeechOutput(statusInterval,drone);
speak(""String_Node_Str"");
break;
case DISCONNECTED:
handler.removeCallbacks(watchdogCallback);
break;
case MISSION_WP_UPDATE:
speak(""String_Node_Str"" + drone.missionStats.getCurrentWP());
break;
case FOLLOW_START:
speak(""String_Node_Str"");
break;
case PERIODIC_SPEECH:
break;
case FAILSAFE:
String failsafe=drone.state.getFailsafe();
if (drone.state.isFailsafe()) {
speak(failsafe);
}
default :
break;
}
}
}","/** 
 * Warn the user if needed via the TTSNotificationProvider module
 */
@Override public void onDroneEvent(DroneEventsType event,Drone drone){
  if (tts != null) {
switch (event) {
case INVALID_POLYGON:
      Toast.makeText(context,R.string.exception_draw_polygon,Toast.LENGTH_SHORT).show();
    break;
case ARMING:
  speakArmedState(drone.state.isArmed());
break;
case ARMING_STARTED:
speak(""String_Node_Str"");
break;
case BATTERY:
batteryDischargeNotification(drone.battery.getBattRemain());
break;
case MODE:
speakMode(drone.state.getMode());
break;
case MISSION_SENT:
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
speak(""String_Node_Str"");
break;
case GPS_FIX:
speakGpsMode(drone.GPS.getFixTypeNumeric());
break;
case MISSION_RECEIVED:
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
speak(""String_Node_Str"");
break;
case HEARTBEAT_FIRST:
statusInterval=new DroidPlannerPrefs(context).getSpokenStatusInterval();
setupPeriodicSpeechOutput(statusInterval,drone);
speak(""String_Node_Str"");
break;
case HEARTBEAT_TIMEOUT:
if (!Calibration.isCalibrating()) {
speak(""String_Node_Str"");
handler.removeCallbacks(watchdogCallback);
}
break;
case HEARTBEAT_RESTORED:
statusInterval=new DroidPlannerPrefs(context).getSpokenStatusInterval();
setupPeriodicSpeechOutput(statusInterval,drone);
speak(""String_Node_Str"");
break;
case DISCONNECTED:
handler.removeCallbacks(watchdogCallback);
break;
case MISSION_WP_UPDATE:
speak(""String_Node_Str"" + drone.missionStats.getCurrentWP());
break;
case FOLLOW_START:
speak(""String_Node_Str"");
break;
case FAILSAFE:
String failsafe=drone.state.getFailsafe();
if (drone.state.isFailsafe()) {
speak(failsafe);
}
default :
break;
}
}
}"
95168,"@Override public void onDroneEvent(DroneInterfaces.DroneEventsType event,Drone drone){
  boolean showNotification=true;
switch (event) {
case CONNECTED:
    mHandler.removeCallbacks(mDismissNotification);
  final String summaryText=mContext.getString(R.string.connected);
mInboxBuilder=new InboxStyleBuilder().setSummary(summaryText);
mNotificationBuilder=new NotificationCompat.Builder(mContext).addAction(R.drawable.ic_action_io,mContext.getText(R.string.menu_disconnect),mToggleConnectionIntent).setContentIntent(mNotificationIntent).setContentText(summaryText).setOngoing(mAppPrefs.isNotificationPermanent()).setSmallIcon(R.drawable.ic_launcher);
updateFlightMode(drone);
updateDroneState(drone);
updateBattery(drone);
updateGps(drone);
updateHome(drone);
updateRadio(drone);
break;
case BATTERY:
updateBattery(drone);
break;
case GPS_FIX:
case GPS_COUNT:
updateGps(drone);
break;
case HOME:
updateHome(drone);
break;
case RADIO:
updateRadio(drone);
break;
case STATE:
updateDroneState(drone);
break;
case MODE:
case TYPE:
updateFlightMode(drone);
break;
case DISCONNECTED:
mInboxBuilder=null;
if (mNotificationBuilder != null) {
mNotificationBuilder=new NotificationCompat.Builder(mContext).addAction(R.drawable.ic_action_io,mContext.getText(R.string.menu_connect),mToggleConnectionIntent).setContentIntent(mNotificationIntent).setContentTitle(mContext.getString(R.string.disconnected)).setOngoing(false).setContentText(""String_Node_Str"").setSmallIcon(R.drawable.ic_launcher_bw);
mHandler.postDelayed(mDismissNotification,COUNTDOWN_TO_DISMISSAL);
}
break;
default :
showNotification=false;
break;
}
if (showNotification) {
showNotification();
}
}","@Override public void onDroneEvent(DroneInterfaces.DroneEventsType event,Drone drone){
  boolean showNotification=true;
switch (event) {
case CONNECTED:
    mHandler.removeCallbacks(mDismissNotification);
  final String summaryText=mContext.getString(R.string.connected);
mInboxBuilder=new InboxStyleBuilder().setSummary(summaryText);
mNotificationBuilder=new NotificationCompat.Builder(mContext).addAction(R.drawable.ic_action_io,mContext.getText(R.string.menu_disconnect),mToggleConnectionIntent).setContentIntent(mNotificationIntent).setContentText(summaryText).setOngoing(mAppPrefs.isNotificationPermanent()).setSmallIcon(R.drawable.ic_launcher);
updateFlightMode(drone);
updateDroneState(drone);
updateBattery(drone);
updateGps(drone);
updateHome(drone);
updateRadio(drone);
break;
case BATTERY:
updateBattery(drone);
break;
case GPS_FIX:
case GPS_COUNT:
updateGps(drone);
break;
case GPS:
case HOME:
updateHome(drone);
break;
case RADIO:
updateRadio(drone);
break;
case STATE:
updateDroneState(drone);
break;
case MODE:
case TYPE:
updateFlightMode(drone);
break;
case DISCONNECTED:
mInboxBuilder=null;
if (mNotificationBuilder != null) {
mNotificationBuilder=new NotificationCompat.Builder(mContext).addAction(R.drawable.ic_action_io,mContext.getText(R.string.menu_connect),mToggleConnectionIntent).setContentIntent(mNotificationIntent).setContentTitle(mContext.getString(R.string.disconnected)).setOngoing(false).setContentText(""String_Node_Str"").setSmallIcon(R.drawable.ic_launcher_bw);
mHandler.postDelayed(mDismissNotification,COUNTDOWN_TO_DISMISSAL);
}
break;
default :
showNotification=false;
break;
}
if (showNotification) {
showNotification();
}
}"
95169,"@Override public void onDroneEvent(DroneInterfaces.DroneEventsType event,Drone drone){
  setDrone(drone);
  boolean updateExtra=true;
switch (event) {
case BATTERY:
    if (mBatteryInfo != null)     mBatteryInfo.updateItemView(mContext,mDrone);
  break;
case CONNECTED:
updateInfoBar();
updateExtra=false;
break;
case DISCONNECTED:
setDrone(null);
updateInfoBar();
updateExtra=false;
break;
case GPS_FIX:
case GPS_COUNT:
if (mGpsInfo != null) mGpsInfo.updateItemView(mContext,mDrone);
break;
case HOME:
if (mHomeInfo != null) mHomeInfo.updateItemView(mContext,mDrone);
break;
case RADIO:
if (mSignalInfo != null) mSignalInfo.updateItemView(mContext,mDrone);
break;
case STATE:
if (mFlightTimeInfo != null) mFlightTimeInfo.updateItemView(mContext,mDrone);
break;
case MODE:
case TYPE:
if (mFlightModesInfo != null) mFlightModesInfo.updateItemView(mContext,mDrone);
break;
default :
updateExtra=false;
break;
}
if (mPhoneExtraInfo != null && updateExtra) {
mPhoneExtraInfo.updateItemView(mContext,mDrone);
}
}","@Override public void onDroneEvent(DroneInterfaces.DroneEventsType event,Drone drone){
  setDrone(drone);
  boolean updateExtra=true;
switch (event) {
case BATTERY:
    if (mBatteryInfo != null)     mBatteryInfo.updateItemView(mContext,mDrone);
  break;
case CONNECTED:
updateInfoBar();
updateExtra=false;
break;
case DISCONNECTED:
setDrone(null);
updateInfoBar();
updateExtra=false;
break;
case GPS_FIX:
case GPS_COUNT:
if (mGpsInfo != null) mGpsInfo.updateItemView(mContext,mDrone);
break;
case GPS:
case HOME:
if (mHomeInfo != null) mHomeInfo.updateItemView(mContext,mDrone);
break;
case RADIO:
if (mSignalInfo != null) mSignalInfo.updateItemView(mContext,mDrone);
break;
case STATE:
if (mFlightTimeInfo != null) mFlightTimeInfo.updateItemView(mContext,mDrone);
break;
case MODE:
case TYPE:
if (mFlightModesInfo != null) mFlightModesInfo.updateItemView(mContext,mDrone);
break;
default :
updateExtra=false;
break;
}
if (mPhoneExtraInfo != null && updateExtra) {
mPhoneExtraInfo.updateItemView(mContext,mDrone);
}
}"
95170,"@Override public void onLongPressMap(MapView pMapView,ILatLng pPosition){
  if (mMapLongClickListener != null) {
    mMapLongClickListener.onMapLongClick(DroneHelper.ILatLngToCoord(pPosition));
  }
}","@Override public void onLongPressMap(MapView pMapView,final ILatLng pPosition){
  if (mMapLongClickListener != null) {
    mMapLongClickListener.onMapLongClick(DroneHelper.ILatLngToCoord(pPosition));
  }
}"
95171,"@Override public void onTapMap(MapView pMapView,ILatLng pPosition){
  if (mMapClickListener != null) {
    mMapClickListener.onMapClick(DroneHelper.ILatLngToCoord(pPosition));
  }
}","@Override public void onTapMap(MapView pMapView,final ILatLng pPosition){
  if (mMapClickListener != null) {
    mMapClickListener.onMapClick(DroneHelper.ILatLngToCoord(pPosition));
  }
}"
95172,"private void setupMap(){
  final Context context=getActivity().getApplicationContext();
  mMapView.setMapViewListener(new MapViewListener(){
    @Override public void onShowMarker(    MapView pMapView,    Marker pMarker){
    }
    @Override public void onHidemarker(    MapView pMapView,    Marker pMarker){
    }
    @Override public void onTapMarker(    MapView pMapView,    Marker pMarker){
      if (mMarkerClickListener != null) {
        mMarkerClickListener.onMarkerClick(getMarkerInfo(pMarker));
      }
    }
    @Override public void onLongPressMarker(    MapView pMapView,    Marker pMarker){
    }
    @Override public void onTapMap(    MapView pMapView,    ILatLng pPosition){
      if (mMapClickListener != null) {
        mMapClickListener.onMapClick(DroneHelper.ILatLngToCoord(pPosition));
      }
    }
    @Override public void onLongPressMap(    MapView pMapView,    ILatLng pPosition){
      if (mMapLongClickListener != null) {
        mMapLongClickListener.onMapLongClick(DroneHelper.ILatLngToCoord(pPosition));
      }
    }
  }
);
}","private void setupMap(){
  mMapView.setMapViewListener(mMapViewListener);
  resetMarkersOverlay();
}"
95173,"@Override public void updateMarker(MarkerInfo markerInfo,boolean isDraggable){
  final LatLng position=DroneHelper.CoordToLatLng(markerInfo.getPosition());
  Marker marker=mMarkers.get(markerInfo);
  if (marker == null) {
    marker=new Marker(mMapView,markerInfo.getTitle(),markerInfo.getSnippet(),position);
    mMapView.addMarker(marker);
    mMarkers.put(markerInfo,marker);
  }
 else {
    marker.setTitle(markerInfo.getTitle());
    marker.setDescription(markerInfo.getSnippet());
    marker.setPoint(position);
  }
  final Resources res=getResources();
  final Bitmap markerIcon=markerInfo.getIcon(res);
  if (markerIcon != null) {
    marker.setIcon(new Icon(new BitmapDrawable(res,markerIcon)));
  }
  marker.setAnchor(new PointF(markerInfo.getAnchorU(),markerInfo.getAnchorV()));
}","@Override public void updateMarker(MarkerInfo markerInfo,boolean isDraggable){
  final LatLng position=DroneHelper.CoordToLatLng(markerInfo.getPosition());
  Marker marker=mMarkers.get(markerInfo);
  if (marker == null) {
    marker=new Marker(mMapView,markerInfo.getTitle(),markerInfo.getSnippet(),position);
    mMarkersOverlay.addItem(marker);
    mMarkers.put(markerInfo,marker);
  }
 else {
    marker.setTitle(markerInfo.getTitle());
    marker.setDescription(markerInfo.getSnippet());
    marker.setPoint(position);
  }
  final Resources res=getResources();
  final Bitmap markerIcon=markerInfo.getIcon(res);
  if (markerIcon != null) {
    marker.setIcon(new Icon(new BitmapDrawable(res,markerIcon)));
  }
  marker.setAnchor(new PointF(markerInfo.getAnchorU(),markerInfo.getAnchorV()));
  marker.invalidate();
  mMapView.invalidate();
}"
95174,"@Override public void saveCameraPosition(){
  SharedPreferences.Editor editor=mPrefs.prefs.edit();
  final ILatLng mapCenter=mMapView.getCenter();
  editor.putFloat(PREF_LAT,(float)mapCenter.getLatitude()).putFloat(PREF_LNG,(float)mapCenter.getLongitude()).putFloat(PREF_BEA,mMapView.getRotation()).putInt(PREF_ZOOM,(int)mMapView.getZoomLevel()).apply();
}","@Override public void saveCameraPosition(){
  SharedPreferences.Editor editor=mPrefs.prefs.edit();
  final ILatLng mapCenter=mMapView.getCenter();
  editor.putFloat(PREF_LAT,(float)mapCenter.getLatitude()).putFloat(PREF_LNG,(float)mapCenter.getLongitude()).putFloat(PREF_BEA,mMapView.getRotation()).putFloat(PREF_ZOOM,mMapView.getZoomLevel()).apply();
}"
95175,"@Override public void cleanMarkers(){
  for (  Map.Entry<MarkerInfo,Marker> entry : mMarkers.entrySet()) {
    Marker marker=entry.getValue();
    mMapView.removeMarker(marker);
  }
  mMarkers.clear();
}","@Override public void cleanMarkers(){
  resetMarkersOverlay();
  mMarkers.clear();
  mMapView.invalidate();
}"
95176,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  final Activity activity=getActivity();
  mDrone=((DroidPlannerApp)activity.getApplication()).getDrone();
  mPrefs=new DroidPlannerPrefs(getActivity().getApplicationContext());
  mMapView=(MapView)view.findViewById(R.id.mapbox_mapview);
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  final Activity activity=getActivity();
  mDrone=((DroidPlannerApp)activity.getApplication()).getDrone();
  mPrefs=new DroidPlannerPrefs(activity.getApplicationContext());
  mMapView=(MapView)view.findViewById(R.id.mapbox_mapview);
}"
95177,"@Override public void onTapMarker(MapView pMapView,Marker pMarker){
  if (mMarkerClickListener != null) {
    mMarkerClickListener.onMarkerClick(getMarkerInfo(pMarker));
  }
}","@Override public void onTapMarker(MapView pMapView,final Marker pMarker){
  if (mMarkerClickListener != null) {
    mMarkerClickListener.onMarkerClick(getMarkerInfo(pMarker));
  }
}"
95178,"@Override public void loadCameraPosition(){
  final float centerLat=mPrefs.prefs.getFloat(PREF_LAT,0);
  final float centerLng=mPrefs.prefs.getFloat(PREF_LNG,0);
  mMapView.setCenter(new LatLng(centerLat,centerLng));
  final int zoom=mPrefs.prefs.getInt(PREF_ZOOM,0);
  mMapView.setZoom(zoom);
  final float rotation=mPrefs.prefs.getFloat(PREF_BEA,0);
  mMapView.setRotation(rotation);
}","@Override public void loadCameraPosition(){
  final float centerLat=mPrefs.prefs.getFloat(PREF_LAT,0);
  final float centerLng=mPrefs.prefs.getFloat(PREF_LNG,0);
  mMapView.setCenter(new LatLng(centerLat,centerLng));
  final float zoom=mPrefs.prefs.getFloat(PREF_ZOOM,0);
  mMapView.setZoom(zoom);
  final float rotation=mPrefs.prefs.getFloat(PREF_BEA,0);
  mMapView.setRotation(rotation);
}"
95179,"private void addTab(CharSequence text,int index){
  final TabView tabView=new TabView(getContext());
  tabView.mIndex=index;
  tabView.setFocusable(true);
  tabView.setOnClickListener(mTabClickListener);
  tabView.setText(text);
  mTabLayout.addView(tabView,new LinearLayout.LayoutParams(0,FILL_PARENT,1));
}","private void addTab(CharSequence text,int index){
  final TabView tabView=new TabView(getContext());
  tabView.mIndex=index;
  tabView.setFocusable(true);
  tabView.setOnClickListener(mTabClickListener);
  tabView.setText(text);
  mTabLayout.addView(tabView,new LinearLayout.LayoutParams(0,ViewGroup.LayoutParams.MATCH_PARENT,1));
}"
95180,"public TabPageIndicator(Context context,AttributeSet attrs){
  super(context,attrs);
  setHorizontalScrollBarEnabled(false);
  mTabLayout=new LinearLayout(getContext());
  addView(mTabLayout,new ViewGroup.LayoutParams(WRAP_CONTENT,FILL_PARENT));
}","public TabPageIndicator(Context context,AttributeSet attrs){
  super(context,attrs);
  setHorizontalScrollBarEnabled(false);
  mTabLayout=new LinearLayout(getContext());
  addView(mTabLayout,new ViewGroup.LayoutParams(WRAP_CONTENT,ViewGroup.LayoutParams.MATCH_PARENT));
}"
95181,"@Override public void onInit(int status){
  tts.setLanguage(Locale.US);
}","@Override public void onInit(int status){
  if (status == TextToSpeech.SUCCESS) {
    Locale ttsLanguage;
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
      ttsLanguage=tts.getDefaultLanguage();
    }
 else {
      ttsLanguage=tts.getLanguage();
    }
    if (ttsLanguage == null) {
      ttsLanguage=Locale.US;
    }
    int supportStatus=tts.setLanguage(ttsLanguage);
switch (supportStatus) {
case TextToSpeech.LANG_MISSING_DATA:
case TextToSpeech.LANG_NOT_SUPPORTED:
      tts.shutdown();
    tts=null;
  Log.e(TAG,""String_Node_Str"");
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
break;
}
}
 else {
Log.e(TAG,""String_Node_Str"");
Toast.makeText(context,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
}
}"
95182,"@Override public void onInit(int status){
  tts.setLanguage(Locale.US);
}","@Override public void onInit(int status){
  if (status == TextToSpeech.SUCCESS) {
    Locale ttsLanguage=tts.getDefaultLanguage();
    if (ttsLanguage == null) {
      ttsLanguage=Locale.US;
    }
    int supportStatus=tts.setLanguage(ttsLanguage);
switch (supportStatus) {
case TextToSpeech.LANG_MISSING_DATA:
case TextToSpeech.LANG_NOT_SUPPORTED:
      tts.shutdown();
    tts=null;
  Log.e(TAG,""String_Node_Str"");
Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_LONG).show();
break;
}
}
 else {
Log.e(TAG,""String_Node_Str"");
Toast.makeText(context,""String_Node_Str"" + ""String_Node_Str"",Toast.LENGTH_LONG).show();
}
}"
95183,"public RadioButtonCenter(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  final TypedArray attributes=context.obtainStyledAttributes(attrs,R.styleable.RadioButtonCenter,defStyle,0);
  try {
    mButtonDrawable=attributes.getDrawable(R.styleable.RadioButtonCenter_android_button);
  }
  finally {
    attributes.recycle();
  }
}","public RadioButtonCenter(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  final TypedArray attributes=context.obtainStyledAttributes(attrs,R.styleable.RadioButtonCenter,defStyle,0);
  try {
    mButtonDrawable=attributes.getDrawable(R.styleable.RadioButtonCenter_android_button);
  }
  finally {
    attributes.recycle();
  }
  setButtonDrawable(android.R.color.transparent);
}"
95184,"@Override public void onDroneEvent(DroneEventsType event,Drone drone){
switch (event) {
case NAVIGATION:
    break;
case ORIENTATION:
  onOrientationUpdate(drone);
break;
case SPEED:
onSpeedAltitudeAndClimbRateUpdate(drone);
break;
default :
break;
}
}","@Override public void onDroneEvent(DroneEventsType event,Drone drone){
switch (event) {
case NAVIGATION:
    break;
case ATTITUDE:
  onOrientationUpdate(drone);
break;
case SPEED:
onSpeedAltitudeAndClimbRateUpdate(drone);
break;
default :
break;
}
}"
95185,"public void setRollPitchYaw(double roll,double pitch,double yaw){
  this.roll=roll;
  this.pitch=pitch;
  this.yaw=yaw;
  myDrone.events.notifyDroneEvent(DroneEventsType.ATTIUTDE);
}","public void setRollPitchYaw(double roll,double pitch,double yaw){
  this.roll=roll;
  this.pitch=pitch;
  this.yaw=yaw;
  myDrone.events.notifyDroneEvent(DroneEventsType.ATTITUDE);
}"
95186,"private void updateROI(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  if (realLocation == null) {
    return;
  }
  Coord2D gcsCoord=new Coord2D(realLocation.getLatitude(),realLocation.getLongitude());
  float bearing=realLocation.getBearing();
  float distanceTraveledSinceLastPoint=realLocation.getSpeed() * (System.currentTimeMillis() - timeOfLastLocation) / 1000;
  Coord2D goCoord=GeoTools.newCoordFromBearingAndDistance(gcsCoord,bearing,distanceTraveledSinceLastPoint);
  double latitude=goCoord.getLat();
  double longitude=goCoord.getLng();
  Location newLocation=new Location(realLocation);
  newLocation.setLatitude(latitude);
  newLocation.setLongitude(longitude);
  newLocation.setBearing(bearing);
  MavLinkROI.setROI(drone,new Coord3D(newLocation.getLatitude(),newLocation.getLongitude(),new Altitude(0.0)));
  watchdog.postDelayed(watchdogCallback,TIMEOUT);
}","private void updateROI(){
  if (realLocation == null) {
    return;
  }
  Coord2D gcsCoord=new Coord2D(realLocation.getLatitude(),realLocation.getLongitude());
  float bearing=realLocation.getBearing();
  float distanceTraveledSinceLastPoint=realLocation.getSpeed() * (System.currentTimeMillis() - timeOfLastLocation) / 1000f;
  Coord2D goCoord=GeoTools.newCoordFromBearingAndDistance(gcsCoord,bearing,distanceTraveledSinceLastPoint);
  double latitude=goCoord.getLat();
  double longitude=goCoord.getLng();
  Location newLocation=new Location(realLocation);
  newLocation.setLatitude(latitude);
  newLocation.setLongitude(longitude);
  newLocation.setBearing(bearing);
  if (distanceTraveledSinceLastPoint > 0.05) {
    MavLinkROI.setROI(drone,new Coord3D(newLocation.getLatitude(),newLocation.getLongitude(),new Altitude(0.0)));
  }
  watchdog.postDelayed(watchdogCallback,TIMEOUT);
}"
95187,"@Override public void onDisconnect(){
  couldNotOpenConnection=true;
  selfDestryService();
}","@Override public void onDisconnect(){
  couldNotOpenConnection=true;
  selfDestroyService();
}"
95188,"private void disableFollowMe(){
  if (followMeEnabled) {
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    followMeEnabled=false;
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
  mLocationClient.removeLocationUpdates(this);
}","private void disableFollowMe(){
  if (followMeEnabled) {
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    followMeEnabled=false;
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
  if (mLocationClient.isConnected())   mLocationClient.removeLocationUpdates(this);
}"
95189,"@Override public void onDisconnect(){
  couldNotOpenConnection=true;
  selfDestryService();
}","@Override public void onDisconnect(){
  couldNotOpenConnection=true;
  selfDestroyService();
}"
95190,"private void disableFollowMe(){
  if (followMeEnabled) {
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    followMeEnabled=false;
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
  mLocationClient.removeLocationUpdates(this);
}","private void disableFollowMe(){
  if (followMeEnabled) {
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    followMeEnabled=false;
    Log.d(""String_Node_Str"",""String_Node_Str"");
  }
  if (mLocationClient.isConnected())   mLocationClient.removeLocationUpdates(this);
}"
95191,"@Override public void onDroneEvent(DroneEventsType event,Drone drone){
switch (event) {
case MODE:
    if ((drone.state.getMode() != ApmModes.ROTOR_GUIDED)) {
      disableFollowMe();
    }
  break;
default :
return;
}
}","@Override public void onDroneEvent(DroneEventsType event,Drone drone){
switch (event) {
case MODE:
    if ((drone.state.getMode() != ApmModes.ROTOR_GUIDED)) {
      disableFollowMe();
    }
  break;
case DISCONNECTED:
disableFollowMe();
break;
default :
return;
}
}"
95192,"@Override public void onListVisibilityChanged(){
}","@Override public void onListVisibilityChanged(){
  updateMapPadding();
}"
95193,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_editor);
  fragmentManager=getSupportFragmentManager();
  planningMapFragment=((EditorMapFragment)fragmentManager.findFragmentById(R.id.mapFragment));
  gestureMapFragment=((GestureMapFragment)fragmentManager.findFragmentById(R.id.gestureMapFragment));
  editorToolsFragment=(EditorToolsFragment)fragmentManager.findFragmentById(R.id.editorToolsFragment);
  missionListFragment=(EditorListFragment)fragmentManager.findFragmentById(R.id.missionFragment1);
  infoView=(TextView)findViewById(R.id.editorInfoWindow);
  mSplineToggleContainer=findViewById(R.id.editorSplineToggleContainer);
  mSplineToggleContainer.setVisibility(View.VISIBLE);
  mGoToMyLocation=(ImageButton)findViewById(R.id.my_location_button);
  mGoToMyLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      planningMapFragment.goToMyLocation();
    }
  }
);
  mGoToMyLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      planningMapFragment.setAutoPanMode(AutoPanMode.USER);
      return true;
    }
  }
);
  mGoToDroneLocation=(ImageButton)findViewById(R.id.drone_location_button);
  mGoToDroneLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      planningMapFragment.goToDroneLocation();
    }
  }
);
  mGoToDroneLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      planningMapFragment.setAutoPanMode(AutoPanMode.DRONE);
      return true;
    }
  }
);
  final RadioButton normalToggle=(RadioButton)findViewById(R.id.normalWpToggle);
  normalToggle.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mIsSplineEnabled=!normalToggle.isChecked();
    }
  }
);
  final RadioButton splineToggle=(RadioButton)findViewById(R.id.splineWpToggle);
  splineToggle.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mIsSplineEnabled=splineToggle.isChecked();
    }
  }
);
  itemDetailFragment=(MissionDetailFragment)fragmentManager.findFragmentByTag(ITEM_DETAIL_TAG);
  mContainerItemDetail=findViewById(R.id.containerItemDetail);
  missionProxy=((DroidPlannerApp)getApplication()).missionProxy;
  gestureMapFragment.setOnPathFinishedListener(this);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_editor);
  fragmentManager=getSupportFragmentManager();
  planningMapFragment=((EditorMapFragment)fragmentManager.findFragmentById(R.id.mapFragment));
  gestureMapFragment=((GestureMapFragment)fragmentManager.findFragmentById(R.id.gestureMapFragment));
  editorToolsFragment=(EditorToolsFragment)fragmentManager.findFragmentById(R.id.editorToolsFragment);
  missionListFragment=(EditorListFragment)fragmentManager.findFragmentById(R.id.missionFragment1);
  infoView=(TextView)findViewById(R.id.editorInfoWindow);
  mSplineToggleContainer=findViewById(R.id.editorSplineToggleContainer);
  mSplineToggleContainer.setVisibility(View.VISIBLE);
  mLocationButtonsContainer=findViewById(R.id.location_button_container);
  mGoToMyLocation=(ImageButton)findViewById(R.id.my_location_button);
  mGoToMyLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      planningMapFragment.goToMyLocation();
    }
  }
);
  mGoToMyLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      planningMapFragment.setAutoPanMode(AutoPanMode.USER);
      return true;
    }
  }
);
  mGoToDroneLocation=(ImageButton)findViewById(R.id.drone_location_button);
  mGoToDroneLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      planningMapFragment.goToDroneLocation();
    }
  }
);
  mGoToDroneLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      planningMapFragment.setAutoPanMode(AutoPanMode.DRONE);
      return true;
    }
  }
);
  final RadioButton normalToggle=(RadioButton)findViewById(R.id.normalWpToggle);
  normalToggle.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mIsSplineEnabled=!normalToggle.isChecked();
    }
  }
);
  final RadioButton splineToggle=(RadioButton)findViewById(R.id.splineWpToggle);
  splineToggle.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mIsSplineEnabled=splineToggle.isChecked();
    }
  }
);
  itemDetailFragment=(MissionDetailFragment)fragmentManager.findFragmentByTag(ITEM_DETAIL_TAG);
  mContainerItemDetail=findViewById(R.id.containerItemDetail);
  missionProxy=((DroidPlannerApp)getApplication()).missionProxy;
  gestureMapFragment.setOnPathFinishedListener(this);
}"
95194,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_flight);
  fragmentManager=getSupportFragmentManager();
  failsafeTextView=findViewById(R.id.failsafeTextView);
  mSlidingDrawer=(SlidingDrawer)findViewById(R.id.SlidingDrawerRight);
  mSlidingDrawer.setOnDrawerCloseListener(new SlidingDrawer.OnDrawerCloseListener(){
    @Override public void onDrawerClosed(){
      updateMapPadding();
      GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL.toString()).setVariable(getString(R.string.ga_mode_details_close_panel)).setValue(System.currentTimeMillis()));
    }
  }
);
  mSlidingDrawer.setOnDrawerOpenListener(new SlidingDrawer.OnDrawerOpenListener(){
    @Override public void onDrawerOpened(){
      updateMapPadding();
      GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL.toString()).setVariable(getString(R.string.ga_mode_details_open_panel)).setValue(System.currentTimeMillis()));
    }
  }
);
  setupMapFragment();
  mLocationButtonsContainer=findViewById(R.id.location_button_container);
  mGoToMyLocation=(ImageButton)findViewById(R.id.my_location_button);
  mGoToDroneLocation=(ImageButton)findViewById(R.id.drone_location_button);
  mGoToMyLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mapFragment.goToMyLocation();
      updateMapLocationButtons(AutoPanMode.DISABLED);
    }
  }
);
  mGoToMyLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      mapFragment.goToMyLocation();
      updateMapLocationButtons(AutoPanMode.USER);
      return true;
    }
  }
);
  mGoToDroneLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mapFragment.goToDroneLocation();
      updateMapLocationButtons(AutoPanMode.DISABLED);
    }
  }
);
  mGoToDroneLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      mapFragment.goToDroneLocation();
      updateMapLocationButtons(AutoPanMode.DRONE);
      return true;
    }
  }
);
  editorTools=fragmentManager.findFragmentById(R.id.editorToolsFragment);
  if (editorTools == null) {
    editorTools=new FlightActionsFragment();
    fragmentManager.beginTransaction().add(R.id.editorToolsFragment,editorTools).commit();
  }
  View telemetryView=findViewById(R.id.telemetryFragment);
  mIsPhone=telemetryView == null;
  if (mIsPhone) {
    Fragment slidingDrawerContent=fragmentManager.findFragmentById(R.id.sliding_drawer_content);
    if (slidingDrawerContent == null) {
      slidingDrawerContent=new FlightSlidingDrawerContent();
      fragmentManager.beginTransaction().add(R.id.sliding_drawer_content,slidingDrawerContent).commit();
    }
  }
 else {
    Fragment telemetryFragment=fragmentManager.findFragmentById(R.id.telemetryFragment);
    if (telemetryFragment == null) {
      telemetryFragment=new TelemetryFragment();
      fragmentManager.beginTransaction().add(R.id.telemetryFragment,telemetryFragment).commit();
    }
    Fragment flightModePanel=fragmentManager.findFragmentById(R.id.sliding_drawer_content);
    if (flightModePanel == null) {
      flightModePanel=new FlightModePanel();
      fragmentManager.beginTransaction().add(R.id.sliding_drawer_content,flightModePanel).commit();
    }
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_flight);
  fragmentManager=getSupportFragmentManager();
  failsafeView=findViewById(R.id.failsafeTextView);
  mSlidingDrawer=(SlidingDrawer)findViewById(R.id.SlidingDrawerRight);
  mSlidingDrawer.setOnDrawerCloseListener(new SlidingDrawer.OnDrawerCloseListener(){
    @Override public void onDrawerClosed(){
      updateMapPadding();
      GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL.toString()).setVariable(getString(R.string.ga_mode_details_close_panel)).setValue(System.currentTimeMillis()));
    }
  }
);
  mSlidingDrawer.setOnDrawerOpenListener(new SlidingDrawer.OnDrawerOpenListener(){
    @Override public void onDrawerOpened(){
      updateMapPadding();
      GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL.toString()).setVariable(getString(R.string.ga_mode_details_open_panel)).setValue(System.currentTimeMillis()));
    }
  }
);
  setupMapFragment();
  mLocationButtonsContainer=findViewById(R.id.location_button_container);
  mGoToMyLocation=(ImageButton)findViewById(R.id.my_location_button);
  mGoToDroneLocation=(ImageButton)findViewById(R.id.drone_location_button);
  mGoToMyLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mapFragment.goToMyLocation();
      updateMapLocationButtons(AutoPanMode.DISABLED);
    }
  }
);
  mGoToMyLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      mapFragment.goToMyLocation();
      updateMapLocationButtons(AutoPanMode.USER);
      return true;
    }
  }
);
  mGoToDroneLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mapFragment.goToDroneLocation();
      updateMapLocationButtons(AutoPanMode.DISABLED);
    }
  }
);
  mGoToDroneLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      mapFragment.goToDroneLocation();
      updateMapLocationButtons(AutoPanMode.DRONE);
      return true;
    }
  }
);
  editorTools=fragmentManager.findFragmentById(R.id.editorToolsFragment);
  if (editorTools == null) {
    editorTools=new FlightActionsFragment();
    fragmentManager.beginTransaction().add(R.id.editorToolsFragment,editorTools).commit();
  }
  mTelemetryView=findViewById(R.id.telemetryFragment);
  mIsPhone=mTelemetryView == null;
  if (mIsPhone) {
    Fragment slidingDrawerContent=fragmentManager.findFragmentById(R.id.sliding_drawer_content);
    if (slidingDrawerContent == null) {
      slidingDrawerContent=new FlightSlidingDrawerContent();
      fragmentManager.beginTransaction().add(R.id.sliding_drawer_content,slidingDrawerContent).commit();
    }
  }
 else {
    Fragment telemetryFragment=fragmentManager.findFragmentById(R.id.telemetryFragment);
    if (telemetryFragment == null) {
      telemetryFragment=new TelemetryFragment();
      fragmentManager.beginTransaction().add(R.id.telemetryFragment,telemetryFragment).commit();
    }
    Fragment flightModePanel=fragmentManager.findFragmentById(R.id.sliding_drawer_content);
    if (flightModePanel == null) {
      flightModePanel=new FlightModePanel();
      fragmentManager.beginTransaction().add(R.id.sliding_drawer_content,flightModePanel).commit();
    }
  }
}"
95195,"/** 
 * Account for the various ui elements and update the map padding so that it remains 'visible'.
 */
private void updateMapPadding(){
  final int slidingDrawerWidth=mSlidingDrawer.getContent().getWidth();
  final boolean isSlidingDrawerOpened=mSlidingDrawer.isOpened();
  int rightPadding=isSlidingDrawerOpened ? slidingDrawerWidth : 0;
  int bottomPadding=0;
  int leftPadding=0;
  final View editorToolsView=editorTools.getView();
  final View mapView=mapFragment.getView();
  int[] posOnScreen=new int[2];
  editorToolsView.getLocationOnScreen(posOnScreen);
  final int toolsHeight=editorToolsView.getHeight();
  final int toolsBottom=posOnScreen[1] + toolsHeight;
  ViewGroup.LayoutParams lp=editorToolsView.getLayoutParams();
  if (lp.height == ViewGroup.LayoutParams.MATCH_PARENT) {
    leftPadding=editorToolsView.getRight();
  }
 else {
    if (lp.width == ViewGroup.LayoutParams.MATCH_PARENT) {
      mapView.getLocationOnScreen(posOnScreen);
      final int mapTop=posOnScreen[1];
      final int mapBottom=mapTop + mapView.getHeight();
      bottomPadding=(mapBottom - toolsBottom) + toolsHeight;
    }
  }
  mapFragment.setMapPadding(leftPadding,0,rightPadding,bottomPadding);
  final ViewGroup.MarginLayoutParams marginLp=(ViewGroup.MarginLayoutParams)mLocationButtonsContainer.getLayoutParams();
  final int rightMargin=isSlidingDrawerOpened ? marginLp.leftMargin + slidingDrawerWidth : marginLp.leftMargin;
  marginLp.setMargins(marginLp.leftMargin,marginLp.topMargin,rightMargin,marginLp.bottomMargin);
}","/** 
 * Account for the various ui elements and update the map padding so that it remains 'visible'.
 */
private void updateMapPadding(){
  final int slidingDrawerWidth=mSlidingDrawer.getContent().getWidth();
  final boolean isSlidingDrawerOpened=mSlidingDrawer.isOpened();
  int rightPadding=isSlidingDrawerOpened ? slidingDrawerWidth : 0;
  int bottomPadding=0;
  int leftPadding=0;
  int topPadding=mLocationButtonsContainer.getTop();
  if (failsafeView != null && failsafeView.getVisibility() != View.GONE) {
    topPadding+=failsafeView.getHeight();
  }
  final View editorToolsView=editorTools.getView();
  final View mapView=mapFragment.getView();
  int[] posOnScreen=new int[2];
  editorToolsView.getLocationOnScreen(posOnScreen);
  final int toolsHeight=editorToolsView.getHeight();
  final int toolsBottom=posOnScreen[1] + toolsHeight;
  ViewGroup.LayoutParams lp=editorToolsView.getLayoutParams();
  if (lp.height == ViewGroup.LayoutParams.MATCH_PARENT) {
    leftPadding=editorToolsView.getRight();
  }
 else {
    if (mTelemetryView != null) {
      leftPadding=mTelemetryView.getRight();
    }
    if (lp.width == ViewGroup.LayoutParams.MATCH_PARENT) {
      mapView.getLocationOnScreen(posOnScreen);
      final int mapTop=posOnScreen[1];
      final int mapBottom=mapTop + mapView.getHeight();
      bottomPadding=(mapBottom - toolsBottom) + toolsHeight;
    }
  }
  mapFragment.setMapPadding(leftPadding,topPadding,rightPadding,bottomPadding);
  final ViewGroup.MarginLayoutParams marginLp=(ViewGroup.MarginLayoutParams)mLocationButtonsContainer.getLayoutParams();
  final int rightMargin=isSlidingDrawerOpened ? marginLp.leftMargin + slidingDrawerWidth : marginLp.leftMargin;
  marginLp.setMargins(marginLp.leftMargin,marginLp.topMargin,rightMargin,marginLp.bottomMargin);
}"
95196,"public void onFailsafeChanged(Drone drone){
  if (drone.state.isFailsafe()) {
    failsafeTextView.setVisibility(View.VISIBLE);
  }
 else {
    failsafeTextView.setVisibility(View.GONE);
  }
}","public void onFailsafeChanged(Drone drone){
  if (drone.state.isFailsafe()) {
    failsafeView.setVisibility(View.VISIBLE);
  }
 else {
    failsafeView.setVisibility(View.GONE);
  }
}"
95197,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_flight);
  fragmentManager=getSupportFragmentManager();
  failsafeTextView=findViewById(R.id.failsafeTextView);
  mSlidingDrawer=(SlidingDrawer)findViewById(R.id.SlidingDrawerRight);
  mSlidingDrawer.setOnDrawerCloseListener(new SlidingDrawer.OnDrawerCloseListener(){
    @Override public void onDrawerClosed(){
      updateMapPadding();
      GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL.toString()).setVariable(getString(R.string.ga_mode_details_close_panel)).setValue(System.currentTimeMillis()));
    }
  }
);
  mSlidingDrawer.setOnDrawerOpenListener(new SlidingDrawer.OnDrawerOpenListener(){
    @Override public void onDrawerOpened(){
      updateMapPadding();
      GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL.toString()).setVariable(getString(R.string.ga_mode_details_open_panel)).setValue(System.currentTimeMillis()));
    }
  }
);
  setupMapFragment();
  mLocationButtonsContainer=findViewById(R.id.location_button_container);
  mGoToMyLocation=(ImageButton)findViewById(R.id.my_location_button);
  mGoToDroneLocation=(ImageButton)findViewById(R.id.drone_location_button);
  mGoToMyLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mapFragment.goToMyLocation();
      updateMapLocationButtons(AutoPanMode.DISABLED);
    }
  }
);
  mGoToMyLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      mapFragment.goToMyLocation();
      updateMapLocationButtons(AutoPanMode.USER);
      return true;
    }
  }
);
  mGoToDroneLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mapFragment.goToDroneLocation();
      updateMapLocationButtons(AutoPanMode.DISABLED);
    }
  }
);
  mGoToDroneLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      mapFragment.goToDroneLocation();
      updateMapLocationButtons(AutoPanMode.DRONE);
      return true;
    }
  }
);
  editorTools=fragmentManager.findFragmentById(R.id.editorToolsFragment);
  if (editorTools == null) {
    editorTools=new FlightActionsFragment();
    fragmentManager.beginTransaction().add(R.id.editorToolsFragment,editorTools).commit();
  }
  View telemetryView=findViewById(R.id.telemetryFragment);
  mIsPhone=telemetryView == null;
  if (mIsPhone) {
    Fragment slidingDrawerContent=fragmentManager.findFragmentById(R.id.sliding_drawer_content);
    if (slidingDrawerContent == null) {
      slidingDrawerContent=new FlightSlidingDrawerContent();
      fragmentManager.beginTransaction().add(R.id.sliding_drawer_content,slidingDrawerContent).commit();
    }
  }
 else {
    Fragment telemetryFragment=fragmentManager.findFragmentById(R.id.telemetryFragment);
    if (telemetryFragment == null) {
      telemetryFragment=new TelemetryFragment();
      fragmentManager.beginTransaction().add(R.id.telemetryFragment,telemetryFragment).commit();
    }
    Fragment flightModePanel=fragmentManager.findFragmentById(R.id.sliding_drawer_content);
    if (flightModePanel == null) {
      flightModePanel=new FlightModePanel();
      fragmentManager.beginTransaction().add(R.id.sliding_drawer_content,flightModePanel).commit();
    }
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_flight);
  fragmentManager=getSupportFragmentManager();
  failsafeTextView=findViewById(R.id.failsafeTextView);
  mSlidingDrawer=(SlidingDrawer)findViewById(R.id.SlidingDrawerRight);
  mSlidingDrawer.setOnDrawerCloseListener(new SlidingDrawer.OnDrawerCloseListener(){
    @Override public void onDrawerClosed(){
      updateMapPadding();
      GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL.toString()).setVariable(getString(R.string.ga_mode_details_close_panel)).setValue(System.currentTimeMillis()));
    }
  }
);
  mSlidingDrawer.setOnDrawerOpenListener(new SlidingDrawer.OnDrawerOpenListener(){
    @Override public void onDrawerOpened(){
      updateMapPadding();
      GAUtils.sendTiming(new HitBuilders.TimingBuilder().setCategory(GAUtils.Category.FLIGHT_DATA_DETAILS_PANEL.toString()).setVariable(getString(R.string.ga_mode_details_open_panel)).setValue(System.currentTimeMillis()));
    }
  }
);
  setupMapFragment();
  mLocationButtonsContainer=findViewById(R.id.location_button_container);
  mGoToMyLocation=(ImageButton)findViewById(R.id.my_location_button);
  mGoToDroneLocation=(ImageButton)findViewById(R.id.drone_location_button);
  mGoToMyLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mapFragment.goToMyLocation();
      updateMapLocationButtons(AutoPanMode.DISABLED);
    }
  }
);
  mGoToMyLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      mapFragment.goToMyLocation();
      updateMapLocationButtons(AutoPanMode.USER);
      return true;
    }
  }
);
  mGoToDroneLocation.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mapFragment.goToDroneLocation();
      updateMapLocationButtons(AutoPanMode.DISABLED);
    }
  }
);
  mGoToDroneLocation.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      mapFragment.goToDroneLocation();
      updateMapLocationButtons(AutoPanMode.DRONE);
      return true;
    }
  }
);
  editorTools=fragmentManager.findFragmentById(R.id.editorToolsFragment);
  if (editorTools == null) {
    editorTools=new FlightActionsFragment();
    fragmentManager.beginTransaction().add(R.id.editorToolsFragment,editorTools).commit();
  }
  mTelemetryView=findViewById(R.id.telemetryFragment);
  mIsPhone=mTelemetryView == null;
  if (mIsPhone) {
    Fragment slidingDrawerContent=fragmentManager.findFragmentById(R.id.sliding_drawer_content);
    if (slidingDrawerContent == null) {
      slidingDrawerContent=new FlightSlidingDrawerContent();
      fragmentManager.beginTransaction().add(R.id.sliding_drawer_content,slidingDrawerContent).commit();
    }
  }
 else {
    Fragment telemetryFragment=fragmentManager.findFragmentById(R.id.telemetryFragment);
    if (telemetryFragment == null) {
      telemetryFragment=new TelemetryFragment();
      fragmentManager.beginTransaction().add(R.id.telemetryFragment,telemetryFragment).commit();
    }
    Fragment flightModePanel=fragmentManager.findFragmentById(R.id.sliding_drawer_content);
    if (flightModePanel == null) {
      flightModePanel=new FlightModePanel();
      fragmentManager.beginTransaction().add(R.id.sliding_drawer_content,flightModePanel).commit();
    }
  }
}"
95198,"/** 
 * Account for the various ui elements and update the map padding so that it remains 'visible'.
 */
private void updateMapPadding(){
  final int slidingDrawerWidth=mSlidingDrawer.getContent().getWidth();
  final boolean isSlidingDrawerOpened=mSlidingDrawer.isOpened();
  int rightPadding=isSlidingDrawerOpened ? slidingDrawerWidth : 0;
  int bottomPadding=0;
  int leftPadding=0;
  final View editorToolsView=editorTools.getView();
  final View mapView=mapFragment.getView();
  int[] posOnScreen=new int[2];
  editorToolsView.getLocationOnScreen(posOnScreen);
  final int toolsHeight=editorToolsView.getHeight();
  final int toolsBottom=posOnScreen[1] + toolsHeight;
  ViewGroup.LayoutParams lp=editorToolsView.getLayoutParams();
  if (lp.height == ViewGroup.LayoutParams.MATCH_PARENT) {
    leftPadding=editorToolsView.getRight();
  }
 else {
    if (lp.width == ViewGroup.LayoutParams.MATCH_PARENT) {
      mapView.getLocationOnScreen(posOnScreen);
      final int mapTop=posOnScreen[1];
      final int mapBottom=mapTop + mapView.getHeight();
      bottomPadding=(mapBottom - toolsBottom) + toolsHeight;
    }
  }
  mapFragment.setMapPadding(leftPadding,0,rightPadding,bottomPadding);
  final ViewGroup.MarginLayoutParams marginLp=(ViewGroup.MarginLayoutParams)mLocationButtonsContainer.getLayoutParams();
  final int rightMargin=isSlidingDrawerOpened ? marginLp.leftMargin + slidingDrawerWidth : marginLp.leftMargin;
  marginLp.setMargins(marginLp.leftMargin,marginLp.topMargin,rightMargin,marginLp.bottomMargin);
}","/** 
 * Account for the various ui elements and update the map padding so that it remains 'visible'.
 */
private void updateMapPadding(){
  final int slidingDrawerWidth=mSlidingDrawer.getContent().getWidth();
  final boolean isSlidingDrawerOpened=mSlidingDrawer.isOpened();
  int rightPadding=isSlidingDrawerOpened ? slidingDrawerWidth : 0;
  int bottomPadding=0;
  int leftPadding=0;
  int topPadding=mLocationButtonsContainer.getTop();
  final View editorToolsView=editorTools.getView();
  final View mapView=mapFragment.getView();
  int[] posOnScreen=new int[2];
  editorToolsView.getLocationOnScreen(posOnScreen);
  final int toolsHeight=editorToolsView.getHeight();
  final int toolsBottom=posOnScreen[1] + toolsHeight;
  ViewGroup.LayoutParams lp=editorToolsView.getLayoutParams();
  if (lp.height == ViewGroup.LayoutParams.MATCH_PARENT) {
    leftPadding=editorToolsView.getRight();
  }
 else {
    if (mTelemetryView != null) {
      leftPadding=mTelemetryView.getRight();
    }
    if (lp.width == ViewGroup.LayoutParams.MATCH_PARENT) {
      mapView.getLocationOnScreen(posOnScreen);
      final int mapTop=posOnScreen[1];
      final int mapBottom=mapTop + mapView.getHeight();
      bottomPadding=(mapBottom - toolsBottom) + toolsHeight;
    }
  }
  mapFragment.setMapPadding(leftPadding,topPadding,rightPadding,bottomPadding);
  final ViewGroup.MarginLayoutParams marginLp=(ViewGroup.MarginLayoutParams)mLocationButtonsContainer.getLayoutParams();
  final int rightMargin=isSlidingDrawerOpened ? marginLp.leftMargin + slidingDrawerWidth : marginLp.leftMargin;
  marginLp.setMargins(marginLp.leftMargin,marginLp.topMargin,rightMargin,marginLp.bottomMargin);
}"
95199,"@Override public void onDroneEvent(DroneInterfaces.DroneEventsType event,Drone drone){
switch (event) {
case MODE:
    sendDataToWatch(KEY_MODE,drone.state.getMode().getName());
  break;
case BATTERY:
sendTelem(drone);
break;
case SPEED:
sendTelem(drone);
break;
default :
break;
}
}","@Override public void onDroneEvent(DroneInterfaces.DroneEventsType event,Drone drone){
switch (event) {
case MODE:
    sendDataToWatchNow(drone);
  break;
case BATTERY:
sendDataToWatchIfTimeHasElapsed(drone);
break;
case SPEED:
sendDataToWatchIfTimeHasElapsed(drone);
break;
default :
break;
}
}"
95200,"private void maxVolumeIfEnabled(){
  if (mAppPrefs.keepScreenOn()) {
    AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
    audioManager.setStreamVolume(AudioManager.STREAM_MUSIC,audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC),0);
  }
}","private void maxVolumeIfEnabled(){
  if (mAppPrefs.maxVolumeOnStart()) {
    AudioManager audioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
    audioManager.setStreamVolume(AudioManager.STREAM_MUSIC,audioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC),0);
  }
}"
95201,"@Override public void run(){
  super.run();
  try {
    parser.stats.mavlinkResetStats();
    openConnection();
    GAUtils.startNewSession(parentContext);
    logFile=FileStream.getTLogFile();
    logWriter=FileStream.openOutputStream(logFile);
    logBuffer=ByteBuffer.allocate(Long.SIZE / Byte.SIZE);
    logBuffer.order(ByteOrder.BIG_ENDIAN);
    String login=prefs.getDroneshareLogin();
    String password=prefs.getDronesharePassword();
    if (prefs.getLiveUploadEnabled() && !login.isEmpty() && !password.isEmpty()) {
      Log.i(TAG,""String_Node_Str"");
      uploader=new DroneshareClient();
      uploader.connect(login,password);
    }
 else {
      Log.w(TAG,""String_Node_Str"");
    }
    while (connected) {
      readDataBlock();
      handleData();
    }
  }
 catch (  FileNotFoundException e) {
    listener.onComError(e.getMessage());
    e.printStackTrace();
  }
catch (  IOException e) {
    if (connected) {
      listener.onComError(e.getMessage());
      e.printStackTrace();
    }
  }
 finally {
    try {
      if (logWriter != null) {
        logWriter.close();
        logWriter=null;
        FileStream.commitFile(logFile);
        parentContext.startService(UploaderService.createIntent(parentContext));
      }
      if (uploader != null)       uploader.close();
      closeConnection();
    }
 catch (    IOException e) {
    }
  }
  listener.onDisconnect();
}","@Override public void run(){
  super.run();
  try {
    parser.stats.mavlinkResetStats();
    openConnection();
    GAUtils.startNewSession(parentContext);
    logFile=FileStream.getTLogFile();
    logWriter=FileStream.openOutputStream(logFile);
    logBuffer=ByteBuffer.allocate(4 * Long.SIZE / Byte.SIZE);
    logBuffer.order(ByteOrder.BIG_ENDIAN);
    String login=prefs.getDroneshareLogin();
    String password=prefs.getDronesharePassword();
    if (prefs.getLiveUploadEnabled() && !login.isEmpty() && !password.isEmpty()) {
      Log.i(TAG,""String_Node_Str"");
      uploader=new DroneshareClient();
      uploader.connect(login,password);
    }
 else {
      Log.w(TAG,""String_Node_Str"");
    }
    while (connected) {
      readDataBlock();
      handleData();
    }
  }
 catch (  FileNotFoundException e) {
    listener.onComError(e.getMessage());
    e.printStackTrace();
  }
catch (  IOException e) {
    if (connected) {
      listener.onComError(e.getMessage());
      e.printStackTrace();
    }
  }
 finally {
    try {
      if (logWriter != null) {
        logWriter.close();
        logWriter=null;
        FileStream.commitFile(logFile);
        parentContext.startService(UploaderService.createIntent(parentContext));
      }
      if (uploader != null)       uploader.close();
      closeConnection();
    }
 catch (    IOException e) {
    }
  }
  listener.onDisconnect();
}"
95202,"private void saveToLog(MAVLinkPacket receivedPacket) throws IOException {
  if (logWriter != null) {
    try {
      logBuffer.clear();
      long time=System.currentTimeMillis() * 1000;
      logBuffer.putLong(time);
      byte[] bytes=receivedPacket.encodePacket();
      logWriter.write(logBuffer.array());
      logWriter.write(bytes);
      if (uploader != null)       uploader.filterMavlink(uploader.interfaceNum,bytes);
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"" + e);
    }
catch (    NullPointerException e) {
      Log.e(TAG,""String_Node_Str"" + e);
    }
  }
}","private void saveToLog(MAVLinkPacket receivedPacket) throws IOException {
  if (logWriter != null) {
    try {
      logBuffer.clear();
      long time=System.currentTimeMillis() * 1000;
      logBuffer.putLong(time);
      byte[] bytes=receivedPacket.encodePacket();
      logWriter.write(logBuffer.array());
      logWriter.write(bytes);
      if (uploader != null)       uploader.filterMavlink(uploader.interfaceNum,bytes);
    }
 catch (    IOException e) {
      Log.e(TAG,""String_Node_Str"" + e);
    }
catch (    BufferOverflowException e) {
      Log.e(TAG,""String_Node_Str"" + e);
    }
catch (    NullPointerException e) {
      Log.e(TAG,""String_Node_Str"" + e);
    }
  }
}"
95203,"@Override public List<LatLng> getPathPoints(){
  List<LatLng> pathPoints=new ArrayList<LatLng>();
  LatLng lastPoint=null;
  for (  MissionItemRender missionItem : mMissionItems) {
    pathPoints.addAll(missionItem.getPath(lastPoint));
    lastPoint=pathPoints.get(pathPoints.size() - 1);
  }
  return pathPoints;
}","@Override public List<LatLng> getPathPoints(){
  List<LatLng> pathPoints=new ArrayList<LatLng>();
  LatLng lastPoint=null;
  for (  MissionItemRender missionItem : mMissionItems) {
    pathPoints.addAll(missionItem.getPath(lastPoint));
    if (pathPoints.size() > 0) {
      lastPoint=pathPoints.get(pathPoints.size() - 1);
    }
 else {
      lastPoint=null;
    }
  }
  return pathPoints;
}"
95204,"private void addItemDetail(MissionItemRender item){
  itemDetailFragment=item.getDetailFragment();
  if (itemDetailFragment == null)   return;
  if (mContainerItemDetail == null) {
    itemDetailFragment.show(fragmentManager,""String_Node_Str"");
  }
 else {
    fragmentManager.beginTransaction().replace(R.id.containerItemDetail,itemDetailFragment).commit();
  }
}","private void addItemDetail(final MissionItemRender item){
  itemDetailFragment=item.getDetailFragment();
  if (itemDetailFragment == null)   return;
  if (mContainerItemDetail == null) {
    itemDetailFragment.show(fragmentManager,ITEM_DETAIL_TAG);
  }
 else {
    fragmentManager.beginTransaction().replace(R.id.containerItemDetail,itemDetailFragment,ITEM_DETAIL_TAG).commit();
  }
}"
95205,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_editor);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  fragmentManager=getSupportFragmentManager();
  planningMapFragment=((EditorMapFragment)fragmentManager.findFragmentById(R.id.mapFragment));
  gestureMapFragment=((GestureMapFragment)fragmentManager.findFragmentById(R.id.gestureMapFragment));
  editorToolsFragment=(EditorToolsFragment)fragmentManager.findFragmentById(R.id.editorToolsFragment);
  missionListFragment=(EditorListFragment)fragmentManager.findFragmentById(R.id.missionFragment1);
  infoView=(TextView)findViewById(R.id.editorInfoWindow);
  mContainerItemDetail=findViewById(R.id.containerItemDetail);
  missionRender=((DroidPlannerApp)getApplication()).missionRender;
  gestureMapFragment.setOnPathFinishedListener(this);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_editor);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  fragmentManager=getSupportFragmentManager();
  planningMapFragment=((EditorMapFragment)fragmentManager.findFragmentById(R.id.mapFragment));
  gestureMapFragment=((GestureMapFragment)fragmentManager.findFragmentById(R.id.gestureMapFragment));
  editorToolsFragment=(EditorToolsFragment)fragmentManager.findFragmentById(R.id.editorToolsFragment);
  missionListFragment=(EditorListFragment)fragmentManager.findFragmentById(R.id.missionFragment1);
  infoView=(TextView)findViewById(R.id.editorInfoWindow);
  itemDetailFragment=(MissionDetailFragment)fragmentManager.findFragmentByTag(ITEM_DETAIL_TAG);
  mContainerItemDetail=findViewById(R.id.containerItemDetail);
  missionRender=((DroidPlannerApp)getApplication()).missionRender;
  gestureMapFragment.setOnPathFinishedListener(this);
}"
95206,"@Override public void onItemClick(MissionItemRender item){
switch (editorToolsFragment.getTool()) {
default :
    if (contextualActionBar != null) {
      if (missionRender.selection.selectionContains(item)) {
        missionRender.selection.removeItemFromSelection(item);
      }
 else {
        missionRender.selection.addToSelection(item);
      }
    }
 else {
      if (missionRender.selection.selectionContains(item)) {
        missionRender.selection.clearSelection();
      }
 else {
        editorToolsFragment.setTool(EditorTools.NONE);
        missionRender.selection.setSelectionTo(item);
      }
    }
  break;
case TRASH:
missionRender.removeItem(item);
missionRender.selection.clearSelection();
if (missionRender.getItems().size() <= 0) {
editorToolsFragment.setTool(EditorTools.NONE);
}
break;
}
}","@Override public void onItemClick(MissionItemRender item){
switch (getTool()) {
default :
    if (contextualActionBar != null) {
      if (missionRender.selection.selectionContains(item)) {
        missionRender.selection.removeItemFromSelection(item);
      }
 else {
        missionRender.selection.addToSelection(item);
      }
    }
 else {
      if (missionRender.selection.selectionContains(item)) {
        missionRender.selection.clearSelection();
      }
 else {
        editorToolsFragment.setTool(EditorTools.NONE);
        missionRender.selection.setSelectionTo(item);
      }
    }
  break;
case TRASH:
missionRender.removeItem(item);
missionRender.selection.clearSelection();
if (missionRender.getItems().size() <= 0) {
editorToolsFragment.setTool(EditorTools.NONE);
}
break;
}
}"
95207,"public void onWaypointTypeChanged(MissionItemRender newItem,MissionItemRender oldItem);","/** 
 * Notifies the listener that the mission item proxy was changed.
 * @param newItem previous mission item proxy
 * @param oldItem new mission item proxy
 */
public void onWaypointTypeChanged(MissionItemRender newItem,MissionItemRender oldItem);"
95208,"@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  mListener=(OnWayPointTypeChangeListener)activity;
}","@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  if (!(activity instanceof OnMissionDetailListener)) {
    throw new IllegalStateException(""String_Node_Str"" + OnMissionDetailListener.class.getName());
  }
  mListener=(OnMissionDetailListener)activity;
}"
95209,"@Override public void editorToolChanged(EditorTools tools){
  missionRender.selection.clearSelection();
switch (tools) {
case DRAW:
case POLY:
    Toast.makeText(this,R.string.draw_the_survey_region,Toast.LENGTH_SHORT).show();
  gestureMapFragment.enableGestureDetection();
break;
case MARKER:
case TRASH:
case NONE:
gestureMapFragment.disableGestureDetection();
break;
}
}","@Override public void editorToolChanged(EditorTools tools){
  missionRender.selection.clearSelection();
  setupTool(tools);
}"
95210,"@Override public void onClick(View v){
  EditorTools newTool=EditorTools.NONE;
switch (v.getId()) {
case R.id.editor_tools_marker:
    newTool=EditorTools.MARKER;
  break;
case R.id.editor_tools_draw:
newTool=EditorTools.DRAW;
break;
case R.id.editor_tools_poly:
newTool=EditorTools.POLY;
break;
case R.id.editor_tools_trash:
newTool=EditorTools.TRASH;
break;
}
if (newTool == this.tool) {
newTool=EditorTools.NONE;
mEditorRadioGroup.clearCheck();
}
setTool(newTool);
}","@Override public void onClick(View v){
  EditorTools newTool=getToolForView(v.getId());
  if (newTool == this.tool) {
    newTool=EditorTools.NONE;
    mEditorRadioGroup.clearCheck();
  }
  setTool(newTool);
}"
95211,"@Override public boolean onLongClick(View v){
  EditorTools newTool=EditorTools.NONE;
switch (v.getId()) {
case R.id.editor_tools_marker:
    newTool=EditorTools.MARKER;
  break;
case R.id.editor_tools_draw:
newTool=EditorTools.DRAW;
break;
case R.id.editor_tools_poly:
newTool=EditorTools.POLY;
break;
case R.id.editor_tools_trash:
newTool=EditorTools.TRASH;
break;
}
if (newTool != EditorTools.NONE) {
listener.editorToolLongClicked(newTool);
}
return false;
}","@Override public boolean onLongClick(View v){
  EditorTools newTool=getToolForView(v.getId());
  if (newTool != EditorTools.NONE) {
    listener.editorToolLongClicked(newTool);
  }
  return false;
}"
95212,"@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  listener=(OnEditorToolSelected)activity;
}","@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  if (!(activity instanceof OnEditorToolSelected)) {
    throw new IllegalStateException(""String_Node_Str"" + OnEditorToolSelected.class.getName());
  }
  listener=(OnEditorToolSelected)activity;
}"
95213,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_editor_tools,container,false);
  mEditorRadioGroup=(RadioGroup)view.findViewById(R.id.editor_tools_layout);
  final RadioButtonCenter buttonDraw=(RadioButtonCenter)view.findViewById(R.id.editor_tools_draw);
  final RadioButtonCenter buttonMarker=(RadioButtonCenter)view.findViewById(R.id.editor_tools_marker);
  final RadioButtonCenter buttonPoly=(RadioButtonCenter)view.findViewById(R.id.editor_tools_poly);
  final RadioButtonCenter buttonTrash=(RadioButtonCenter)view.findViewById(R.id.editor_tools_trash);
  for (  View vv : new View[]{buttonDraw,buttonMarker,buttonPoly,buttonTrash}) {
    vv.setOnClickListener(this);
    vv.setOnLongClickListener(this);
  }
  mEditorRadioGroup.check(R.id.editor_tools_marker);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  return inflater.inflate(R.layout.fragment_editor_tools,container,false);
}"
95214,"public void setTool(EditorTools tool){
  this.tool=tool;
  if (tool == EditorTools.NONE) {
    mEditorRadioGroup.clearCheck();
  }
  listener.editorToolChanged(this.tool);
}","/** 
 * Updates the selected tool, and optionally notify listeners.
 * @param tool selected tool.
 * @param notifyListeners true to notify listeners, false otherwise.
 */
private void setTool(EditorTools tool,boolean notifyListeners){
  this.tool=tool;
  if (tool == EditorTools.NONE) {
    mEditorRadioGroup.clearCheck();
  }
  if (listener != null && notifyListeners) {
    listener.editorToolChanged(this.tool);
  }
}"
95215,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mDrawerLayout=(DrawerLayout)getLayoutInflater().inflate(R.layout.activity_drawer_navigation_ui,null);
  mNavHubView=(ExpandableListView)mDrawerLayout.findViewById(R.id.nav_drawer_container);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
    actionBar.setHomeButtonEnabled(true);
  }
  mNavDrawerAdapter=new NavigationDrawerAdapter(this);
  mNavDrawerAdapter.attachExpandableListView();
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mDrawerLayout=(DrawerLayout)getLayoutInflater().inflate(R.layout.activity_drawer_navigation_ui,null);
  mNavHubView=(ExpandableListView)mDrawerLayout.findViewById(R.id.nav_drawer_container);
  mDrawerToggle=new ActionBarDrawerToggle(this,mDrawerLayout,R.drawable.ic_drawer,R.string.drawer_open,R.string.drawer_close);
  mDrawerLayout.setDrawerListener(mDrawerToggle);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setHomeButtonEnabled(true);
  }
  mNavDrawerAdapter=new NavigationDrawerAdapter(this);
  mNavDrawerAdapter.attachExpandableListView();
}"
95216,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_editor);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  fragmentManager=getSupportFragmentManager();
  planningMapFragment=((EditorMapFragment)fragmentManager.findFragmentById(R.id.mapFragment));
  gestureMapFragment=((GestureMapFragment)fragmentManager.findFragmentById(R.id.gestureMapFragment));
  editorToolsFragment=(EditorToolsFragment)fragmentManager.findFragmentById(R.id.editorToolsFragment);
  missionListFragment=(EditorListFragment)fragmentManager.findFragmentById(R.id.missionFragment1);
  infoView=(TextView)findViewById(R.id.editorInfoWindow);
  mSplineToggleContainer=findViewById(R.id.editorSplineToggleContainer);
  mSplineToggleContainer.setVisibility(View.INVISIBLE);
  final RadioButton normalToggle=(RadioButton)findViewById(R.id.normalWpToggle);
  normalToggle.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mIsSplineEnabled=!normalToggle.isChecked();
    }
  }
);
  final RadioButton splineToggle=(RadioButton)findViewById(R.id.splineWpToggle);
  splineToggle.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mIsSplineEnabled=splineToggle.isChecked();
    }
  }
);
  mContainerItemDetail=findViewById(R.id.containerItemDetail);
  missionProxy=((DroidPlannerApp)getApplication()).missionProxy;
  gestureMapFragment.setOnPathFinishedListener(this);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_editor);
  fragmentManager=getSupportFragmentManager();
  planningMapFragment=((EditorMapFragment)fragmentManager.findFragmentById(R.id.mapFragment));
  gestureMapFragment=((GestureMapFragment)fragmentManager.findFragmentById(R.id.gestureMapFragment));
  editorToolsFragment=(EditorToolsFragment)fragmentManager.findFragmentById(R.id.editorToolsFragment);
  missionListFragment=(EditorListFragment)fragmentManager.findFragmentById(R.id.missionFragment1);
  infoView=(TextView)findViewById(R.id.editorInfoWindow);
  mSplineToggleContainer=findViewById(R.id.editorSplineToggleContainer);
  mSplineToggleContainer.setVisibility(View.VISIBLE);
  final RadioButton normalToggle=(RadioButton)findViewById(R.id.normalWpToggle);
  normalToggle.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mIsSplineEnabled=!normalToggle.isChecked();
    }
  }
);
  final RadioButton splineToggle=(RadioButton)findViewById(R.id.splineWpToggle);
  splineToggle.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mIsSplineEnabled=splineToggle.isChecked();
    }
  }
);
  mContainerItemDetail=findViewById(R.id.containerItemDetail);
  missionProxy=((DroidPlannerApp)getApplication()).missionProxy;
  gestureMapFragment.setOnPathFinishedListener(this);
}"
95217,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  PreferenceManager.setDefaultValues(this,R.xml.preferences,false);
  if (PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).getBoolean(""String_Node_Str"",false)) {
    getWindow().addFlags(android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  }
  app=(DroidPlannerApp)getApplication();
  this.drone=app.drone;
  setVolumeControlStream(AudioManager.STREAM_MUSIC);
  screenOrientation.unlock();
  Utils.updateUILanguage(getApplicationContext());
  gcsHeartbeat=new GCSHeartbeat(drone,1);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  PreferenceManager.setDefaultValues(this,R.xml.preferences,false);
  if (PreferenceManager.getDefaultSharedPreferences(getApplicationContext()).getBoolean(""String_Node_Str"",false)) {
    getWindow().addFlags(android.view.WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  }
  app=(DroidPlannerApp)getApplication();
  this.drone=app.drone;
  setVolumeControlStream(AudioManager.STREAM_MUSIC);
  screenOrientation.unlock();
  Utils.updateUILanguage(getApplicationContext());
  gcsHeartbeat=new GCSHeartbeat(drone,1);
}"
95218,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(R.layout.fragment_editor_tools,container,false);
  mEditorRadioGroup=(RadioGroup)view.findViewById(R.id.editor_tools_layout);
  final RadioButtonCenter buttonDraw=(RadioButtonCenter)view.findViewById(R.id.editor_tools_draw);
  final RadioButtonCenter buttonMarker=(RadioButtonCenter)view.findViewById(R.id.editor_tools_marker);
  final RadioButtonCenter buttonPoly=(RadioButtonCenter)view.findViewById(R.id.editor_tools_poly);
  final RadioButtonCenter buttonTrash=(RadioButtonCenter)view.findViewById(R.id.editor_tools_trash);
  for (  View vv : new View[]{buttonDraw,buttonMarker,buttonPoly,buttonTrash}) {
    vv.setOnClickListener(this);
    vv.setOnLongClickListener(this);
  }
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  return inflater.inflate(R.layout.fragment_editor_tools,container,false);
}"
95219,"@Override public void setPosition(Coord2D coord){
  guidedPoint.forcedGuidedCoordinate(coord);
}","@Override public void setPosition(Coord2D coord){
  try {
    guidedPoint.forcedGuidedCoordinate(coord);
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}"
95220,"public static List<MarkerInfo> newInstance(MissionItemProxy origin){
  List<MarkerInfo> markerInfos=new ArrayList<MarkerInfo>();
switch (origin.getMissionItem().getType()) {
case LAND:
    markerInfos.add(new LandMarkerInfo(origin));
  break;
case LOITER:
case LOITER_INF:
case LOITERN:
case LOITERT:
markerInfos.add(new LoiterMarkerInfo(origin));
break;
case ROI:
markerInfos.add(new ROIMarkerInfo(origin));
break;
case WAYPOINT:
markerInfos.add(new WaypointMarkerInfo(origin));
break;
case SPLINE_WAYPOINT:
markerInfos.add(new SplineWaypointMarkerInfo(origin));
break;
case SURVEY:
markerInfos.addAll(new SurveyMarkerInfoProvider(origin).getMarkersInfos());
break;
default :
break;
}
return markerInfos;
}","public static List<MarkerInfo> newInstance(MissionItemProxy origin){
  List<MarkerInfo> markerInfos=new ArrayList<MarkerInfo>();
switch (origin.getMissionItem().getType()) {
case LAND:
    markerInfos.add(new LandMarkerInfo(origin));
  break;
case LOITER:
case LOITER_INF:
case LOITERT:
markerInfos.add(new LoiterMarkerInfo(origin));
break;
case ROI:
markerInfos.add(new ROIMarkerInfo(origin));
break;
case WAYPOINT:
markerInfos.add(new WaypointMarkerInfo(origin));
break;
case SPLINE_WAYPOINT:
markerInfos.add(new SplineWaypointMarkerInfo(origin));
break;
case SURVEY:
markerInfos.addAll(new SurveyMarkerInfoProvider(origin).getMarkersInfos());
break;
default :
break;
}
return markerInfos;
}"
95221,"public void addTakeoff(){
  Takeoff takeoff=new Takeoff(mMission,new Altitude(10));
  mMissionItems.add(new MissionItemRender(this,takeoff));
  mMission.addWaypoint(takeoff);
}","public void addTakeoff(){
  Takeoff takeoff=new Takeoff(mMission,new Altitude(10));
  mMissionItems.add(new MissionItemProxy(this,takeoff));
  mMission.addWaypoint(takeoff);
}"
95222,"public msg_mission_item packMavlink(){
  msg_mission_item mavMsg=new msg_mission_item();
  mavMsg.autocontinue=1;
  mavMsg.current=1;
  mavMsg.frame=MAV_FRAME.MAV_FRAME_GLOBAL;
  mavMsg.target_component=1;
  mavMsg.target_system=1;
  if (isValid()) {
    mavMsg.x=(float)getCoord().getLat();
    mavMsg.y=(float)getCoord().getLng();
    mavMsg.z=(float)getAltitude().valueInMeters();
  }
  return mavMsg;
}","public msg_mission_item packMavlink(){
  msg_mission_item mavMsg=new msg_mission_item();
  mavMsg.autocontinue=1;
  mavMsg.command=MAV_CMD.MAV_CMD_NAV_WAYPOINT;
  mavMsg.current=0;
  mavMsg.frame=MAV_FRAME.MAV_FRAME_GLOBAL;
  mavMsg.target_component=1;
  mavMsg.target_system=1;
  if (isValid()) {
    mavMsg.x=(float)getCoord().getLat();
    mavMsg.y=(float)getCoord().getLng();
    mavMsg.z=(float)getAltitude().valueInMeters();
  }
  return mavMsg;
}"
95223,"public static Coord2D LatLngToCoord(LatLng point){
  return new Coord2D(point.longitude,point.latitude);
}","public static Coord2D LatLngToCoord(LatLng point){
  return new Coord2D(point.latitude,point.longitude);
}"
95224,"public void receiveData(MAVLinkMessage msg){
  if (drone.parameters.processMessage(msg)) {
    return;
  }
  drone.waypointManager.processMessage(msg);
  drone.calibrationSetup.processMessage(msg);
switch (msg.msgid) {
case msg_attitude.MAVLINK_MSG_ID_ATTITUDE:
    msg_attitude m_att=(msg_attitude)msg;
  drone.orientation.setRollPitchYaw(m_att.roll * 180.0 / Math.PI,m_att.pitch * 180.0 / Math.PI,m_att.yaw * 180.0 / Math.PI);
break;
case msg_vfr_hud.MAVLINK_MSG_ID_VFR_HUD:
msg_vfr_hud m_hud=(msg_vfr_hud)msg;
drone.setAltitudeGroundAndAirSpeeds(m_hud.alt,m_hud.groundspeed,m_hud.airspeed,m_hud.climb);
checkIsFlying(m_hud);
break;
case msg_mission_current.MAVLINK_MSG_ID_MISSION_CURRENT:
drone.missionStats.setWpno(((msg_mission_current)msg).seq);
break;
case msg_nav_controller_output.MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT:
msg_nav_controller_output m_nav=(msg_nav_controller_output)msg;
drone.setDisttowpAndSpeedAltErrors(m_nav.wp_dist,m_nav.alt_error,m_nav.aspd_error);
drone.navigation.setNavPitchRollYaw(m_nav.nav_pitch,m_nav.nav_roll,m_nav.nav_bearing);
break;
case msg_heartbeat.MAVLINK_MSG_ID_HEARTBEAT:
msg_heartbeat msg_heart=(msg_heartbeat)msg;
drone.type.setType(msg_heart.type);
processState(msg_heart);
ApmModes newMode;
newMode=ApmModes.getMode(msg_heart.custom_mode,drone.type.getType());
drone.state.setMode(newMode);
drone.heartbeat.onHeartbeat(msg_heart);
break;
case msg_global_position_int.MAVLINK_MSG_ID_GLOBAL_POSITION_INT:
drone.GPS.setPosition(new Coord2D(((msg_global_position_int)msg).lon / 1E7,((msg_global_position_int)msg).lat / 1E7));
break;
case msg_sys_status.MAVLINK_MSG_ID_SYS_STATUS:
msg_sys_status m_sys=(msg_sys_status)msg;
drone.battery.setBatteryState(m_sys.voltage_battery / 1000.0,m_sys.battery_remaining,m_sys.current_battery / 100.0);
break;
case msg_radio.MAVLINK_MSG_ID_RADIO:
msg_radio m_radio=(msg_radio)msg;
drone.radio.setRadioState(m_radio.rxerrors,m_radio.fixed,m_radio.rssi,m_radio.remrssi,m_radio.txbuf,m_radio.noise,m_radio.remnoise);
break;
case msg_gps_raw_int.MAVLINK_MSG_ID_GPS_RAW_INT:
drone.GPS.setGpsState(((msg_gps_raw_int)msg).fix_type,((msg_gps_raw_int)msg).satellites_visible,((msg_gps_raw_int)msg).eph);
break;
case msg_rc_channels_raw.MAVLINK_MSG_ID_RC_CHANNELS_RAW:
drone.RC.setRcInputValues((msg_rc_channels_raw)msg);
break;
case msg_servo_output_raw.MAVLINK_MSG_ID_SERVO_OUTPUT_RAW:
drone.RC.setRcOutputValues((msg_servo_output_raw)msg);
break;
}
}","public void receiveData(MAVLinkMessage msg){
  if (drone.parameters.processMessage(msg)) {
    return;
  }
  drone.waypointManager.processMessage(msg);
  drone.calibrationSetup.processMessage(msg);
switch (msg.msgid) {
case msg_attitude.MAVLINK_MSG_ID_ATTITUDE:
    msg_attitude m_att=(msg_attitude)msg;
  drone.orientation.setRollPitchYaw(m_att.roll * 180.0 / Math.PI,m_att.pitch * 180.0 / Math.PI,m_att.yaw * 180.0 / Math.PI);
break;
case msg_vfr_hud.MAVLINK_MSG_ID_VFR_HUD:
msg_vfr_hud m_hud=(msg_vfr_hud)msg;
drone.setAltitudeGroundAndAirSpeeds(m_hud.alt,m_hud.groundspeed,m_hud.airspeed,m_hud.climb);
checkIsFlying(m_hud);
break;
case msg_mission_current.MAVLINK_MSG_ID_MISSION_CURRENT:
drone.missionStats.setWpno(((msg_mission_current)msg).seq);
break;
case msg_nav_controller_output.MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT:
msg_nav_controller_output m_nav=(msg_nav_controller_output)msg;
drone.setDisttowpAndSpeedAltErrors(m_nav.wp_dist,m_nav.alt_error,m_nav.aspd_error);
drone.navigation.setNavPitchRollYaw(m_nav.nav_pitch,m_nav.nav_roll,m_nav.nav_bearing);
break;
case msg_heartbeat.MAVLINK_MSG_ID_HEARTBEAT:
msg_heartbeat msg_heart=(msg_heartbeat)msg;
drone.type.setType(msg_heart.type);
processState(msg_heart);
ApmModes newMode;
newMode=ApmModes.getMode(msg_heart.custom_mode,drone.type.getType());
drone.state.setMode(newMode);
drone.heartbeat.onHeartbeat(msg_heart);
break;
case msg_global_position_int.MAVLINK_MSG_ID_GLOBAL_POSITION_INT:
drone.GPS.setPosition(new Coord2D(((msg_global_position_int)msg).lat / 1E7,((msg_global_position_int)msg).lon / 1E7));
break;
case msg_sys_status.MAVLINK_MSG_ID_SYS_STATUS:
msg_sys_status m_sys=(msg_sys_status)msg;
drone.battery.setBatteryState(m_sys.voltage_battery / 1000.0,m_sys.battery_remaining,m_sys.current_battery / 100.0);
break;
case msg_radio.MAVLINK_MSG_ID_RADIO:
msg_radio m_radio=(msg_radio)msg;
drone.radio.setRadioState(m_radio.rxerrors,m_radio.fixed,m_radio.rssi,m_radio.remrssi,m_radio.txbuf,m_radio.noise,m_radio.remnoise);
break;
case msg_gps_raw_int.MAVLINK_MSG_ID_GPS_RAW_INT:
drone.GPS.setGpsState(((msg_gps_raw_int)msg).fix_type,((msg_gps_raw_int)msg).satellites_visible,((msg_gps_raw_int)msg).eph);
break;
case msg_rc_channels_raw.MAVLINK_MSG_ID_RC_CHANNELS_RAW:
drone.RC.setRcInputValues((msg_rc_channels_raw)msg);
break;
case msg_servo_output_raw.MAVLINK_MSG_ID_SERVO_OUTPUT_RAW:
drone.RC.setRcOutputValues((msg_servo_output_raw)msg);
break;
}
}"
95225,"public void setHome(msg_mission_item msg){
  this.coordinate=new Coord2D(msg.y,msg.x);
  this.altitude=new Altitude(msg.z);
  myDrone.events.notifyDroneEvent(DroneEventsType.HOME);
}","public void setHome(msg_mission_item msg){
  this.coordinate=new Coord2D(msg.x,msg.y);
  this.altitude=new Altitude(msg.z);
  myDrone.events.notifyDroneEvent(DroneEventsType.HOME);
}"
95226,"public msg_mission_item packMavlink(){
  msg_mission_item mavMsg=new msg_mission_item();
  mavMsg.autocontinue=1;
  mavMsg.current=1;
  mavMsg.frame=MAV_FRAME.MAV_FRAME_GLOBAL;
  mavMsg.target_component=1;
  mavMsg.target_system=1;
  if (isValid()) {
    mavMsg.x=(float)getCoord().getX();
    mavMsg.y=(float)getCoord().getY();
    mavMsg.z=(float)getAltitude().valueInMeters();
  }
  return mavMsg;
}","public msg_mission_item packMavlink(){
  msg_mission_item mavMsg=new msg_mission_item();
  mavMsg.autocontinue=1;
  mavMsg.current=1;
  mavMsg.frame=MAV_FRAME.MAV_FRAME_GLOBAL;
  mavMsg.target_component=1;
  mavMsg.target_system=1;
  if (isValid()) {
    mavMsg.x=(float)getCoord().getLat();
    mavMsg.y=(float)getCoord().getLng();
    mavMsg.z=(float)getAltitude().valueInMeters();
  }
  return mavMsg;
}"
95227,"public double getLat(){
  return y;
}","public double getLat(){
  return latitude;
}"
95228,"public double getX(){
  return x;
}","public double getX(){
  return latitude;
}"
95229,"public void set(Coord2D coord){
  set(coord.x,coord.y);
}","public void set(Coord2D coord){
  set(coord.latitude,coord.longitude);
}"
95230,"public double getY(){
  return y;
}","public double getY(){
  return longitude;
}"
95231,"public double getLng(){
  return x;
}","public double getLng(){
  return longitude;
}"
95232,"@Override public String toString(){
  return ""String_Node_Str"" + getX() + ""String_Node_Str""+ getY();
}","@Override public String toString(){
  return ""String_Node_Str"" + getLat() + ""String_Node_Str""+ getLng();
}"
95233,"public void set(double x,double y,Altitude alt){
  super.set(x,y);
  this.alt=alt;
}","public void set(double lat,double lon,Altitude alt){
  super.set(lat,lon);
  this.alt=alt;
}"
95234,"public Coord3D(int x,int y,int alt){
  this(x,y,new Altitude(alt));
}","public Coord3D(int lat,int lon,int alt){
  this(lat,lon,new Altitude(alt));
}"
95235,"public void setAltitude(Altitude altitude){
  coordinate.set(coordinate.getX(),coordinate.getY(),altitude);
}","public void setAltitude(Altitude altitude){
  coordinate.set(coordinate.getLat(),coordinate.getLng(),altitude);
}"
95236,"@Override public void unpackMAVMessage(msg_mission_item mavMsg){
  Altitude alt=new Altitude(mavMsg.z);
  setCoordinate(new Coord3D(mavMsg.y,mavMsg.x,alt));
}","@Override public void unpackMAVMessage(msg_mission_item mavMsg){
  Altitude alt=new Altitude(mavMsg.z);
  setCoordinate(new Coord3D(mavMsg.x,mavMsg.y,alt));
}"
95237,"public void testPackMissionItem(){
  Mission mission=new Mission(null);
  Waypoint item=new Waypoint(mission,new Coord3D(0.1,1,new Altitude(2)));
  msg_mission_item mavMsg=item.packMissionItem().get(0);
  assertEquals(1,mavMsg.autocontinue);
  assertEquals(1,mavMsg.target_component);
  assertEquals(1,mavMsg.target_system);
  assertEquals(MAV_FRAME.MAV_FRAME_GLOBAL_RELATIVE_ALT,mavMsg.frame);
  assertEquals(1f,mavMsg.x);
  assertEquals(0.1f,mavMsg.y);
  assertEquals(2f,mavMsg.z);
}","public void testPackMissionItem(){
  Mission mission=new Mission(null);
  Waypoint item=new Waypoint(mission,new Coord3D(0.1,1,new Altitude(2)));
  msg_mission_item mavMsg=item.packMissionItem().get(0);
  assertEquals(1,mavMsg.autocontinue);
  assertEquals(1,mavMsg.target_component);
  assertEquals(1,mavMsg.target_system);
  assertEquals(MAV_FRAME.MAV_FRAME_GLOBAL_RELATIVE_ALT,mavMsg.frame);
  assertEquals(0.1f,mavMsg.x);
  assertEquals(1f,mavMsg.y);
  assertEquals(2f,mavMsg.z);
}"
95238,"@Override public float getAlpha(){
  return 0;
}","@Override public float getAlpha(){
  return 1;
}"
95239,"@Override public void updateMarker(MarkerInfo markerInfo,boolean isDraggable){
  Marker marker=mMarkers.get(markerInfo);
  if (marker == null) {
    marker=mMap.addMarker(new MarkerOptions());
    mMarkers.put(markerInfo,marker);
  }
  marker.setAlpha(markerInfo.getAlpha());
  marker.setAnchor(markerInfo.getAnchorU(),markerInfo.getAnchorV());
  marker.setIcon(BitmapDescriptorFactory.fromBitmap(markerInfo.getIcon(getResources())));
  marker.setInfoWindowAnchor(markerInfo.getInfoWindowAnchorU(),markerInfo.getInfoWindowAnchorV());
  marker.setPosition(DroneHelper.CoordToLatLang(markerInfo.getPosition()));
  marker.setRotation(markerInfo.getRotation());
  marker.setSnippet(markerInfo.getSnippet());
  marker.setTitle(markerInfo.getTitle());
  marker.setDraggable(isDraggable);
  marker.setFlat(markerInfo.isFlat());
  marker.setVisible(markerInfo.isVisible());
}","@Override public void updateMarker(MarkerInfo markerInfo,boolean isDraggable){
  final LatLng position=DroneHelper.CoordToLatLang(markerInfo.getPosition());
  Marker marker=mMarkers.get(markerInfo);
  if (marker == null) {
    marker=mMap.addMarker(new MarkerOptions().position(position));
    mMarkers.put(markerInfo,marker);
  }
  marker.setAlpha(markerInfo.getAlpha());
  marker.setAnchor(markerInfo.getAnchorU(),markerInfo.getAnchorV());
  marker.setIcon(BitmapDescriptorFactory.fromBitmap(markerInfo.getIcon(getResources())));
  marker.setInfoWindowAnchor(markerInfo.getInfoWindowAnchorU(),markerInfo.getInfoWindowAnchorV());
  marker.setPosition(position);
  marker.setRotation(markerInfo.getRotation());
  marker.setSnippet(markerInfo.getSnippet());
  marker.setTitle(markerInfo.getTitle());
  marker.setDraggable(isDraggable);
  marker.setFlat(markerInfo.isFlat());
  marker.setVisible(markerInfo.isVisible());
}"
95240,"@Override public void updateMarker(MarkerInfo markerInfo,boolean isDraggable){
  Marker marker=mMarkers.get(markerInfo);
  if (marker == null) {
    marker=new Marker(mMapView);
    marker.setOnMarkerClickListener(mMarkerClickHandler);
    marker.setOnMarkerDragListener(mMarkerDragHandler);
    mMarkers.put(markerInfo,marker);
  }
  final Resources res=getResources();
  marker.setAlpha(markerInfo.getAlpha());
  marker.setAnchor(markerInfo.getAnchorU(),markerInfo.getAnchorV());
  marker.setIcon(new BitmapDrawable(res,markerInfo.getIcon(res)));
  marker.setInfoWindowAnchor(markerInfo.getInfoWindowAnchorU(),markerInfo.getInfoWindowAnchorV());
  marker.setPosition(DroneHelper.CoordToGeoPoint(markerInfo.getPosition()));
  marker.setRotation(markerInfo.getRotation());
  marker.setSnippet(markerInfo.getSnippet());
  marker.setTitle(markerInfo.getTitle());
  marker.setDraggable(isDraggable);
  marker.setFlat(markerInfo.isFlat());
  marker.setEnabled(markerInfo.isVisible());
}","@Override public void updateMarker(MarkerInfo markerInfo,boolean isDraggable){
  final GeoPoint position=DroneHelper.CoordToGeoPoint(markerInfo.getPosition());
  Marker marker=mMarkers.get(markerInfo);
  if (marker == null) {
    marker=new Marker(mMapView);
    marker.setPosition(position);
    marker.setOnMarkerClickListener(mMarkerClickHandler);
    marker.setOnMarkerDragListener(mMarkerDragHandler);
    mMapView.getOverlays().add(marker);
    mMapView.invalidate();
    mMarkers.put(markerInfo,marker);
  }
  final Resources res=getResources();
  marker.setAlpha(markerInfo.getAlpha());
  marker.setAnchor(markerInfo.getAnchorU(),markerInfo.getAnchorV());
  marker.setIcon(new BitmapDrawable(res,markerInfo.getIcon(res)));
  marker.setInfoWindowAnchor(markerInfo.getInfoWindowAnchorU(),markerInfo.getInfoWindowAnchorV());
  marker.setPosition(position);
  marker.setRotation(markerInfo.getRotation());
  marker.setSnippet(markerInfo.getSnippet());
  marker.setTitle(markerInfo.getTitle());
  marker.setDraggable(isDraggable);
  marker.setFlat(markerInfo.isFlat());
  marker.setEnabled(markerInfo.isVisible());
}"
95241,"public static List<Coord2D> projectPathIntoMap(List<Coord2D> path,GoogleMap map){
  List<Coord2D> coords=new ArrayList<Coord2D>();
  Projection projection=map.getProjection();
  for (  Coord2D point : path) {
    LatLng coord=projection.fromScreenLocation(new Point((int)point.getX(),(int)point.getY()));
    coords.add(new Coord2D(coord.longitude,coord.latitude));
  }
  return coords;
}","public static List<Coord2D> projectPathIntoMap(List<Coord2D> path,GoogleMap map){
  List<Coord2D> coords=new ArrayList<Coord2D>();
  Projection projection=map.getProjection();
  for (  Coord2D point : path) {
    LatLng coord=projection.fromScreenLocation(new Point((int)point.getX(),(int)point.getY()));
    coords.add(new Coord2D(coord.latitude,coord.longitude));
  }
  return coords;
}"
95242,"public Coord2D getMiddle(){
  return (new Coord2D((ne_1quadrant.getX() + sw_3quadrant.getX()) / 2,(ne_1quadrant.getY() + sw_3quadrant.getY()) / 2));
}","public Coord2D getMiddle(){
  return (new Coord2D((ne_1quadrant.getLat() + sw_3quadrant.getLat()) / 2,(ne_1quadrant.getLng() + sw_3quadrant.getLng()) / 2));
}"
95243,"/** 
 * Extrapolate latitude/longitude given a heading and distance thanks to http://www.movable-type.co.uk/scripts/latlong.html
 * @param origin Point of origin
 * @param bearing bearing to navigate
 * @param distance distance to be added
 * @return New point with the added distance
 */
public static Coord2D newCoordFromBearingAndDistance(Coord2D origin,double bearing,double distance){
  double lat=origin.getY();
  double lon=origin.getX();
  double lat1=Math.toRadians(lat);
  double lon1=Math.toRadians(lon);
  double brng=Math.toRadians(bearing);
  double dr=distance / RADIUS_OF_EARTH;
  double lat2=Math.asin(Math.sin(lat1) * Math.cos(dr) + Math.cos(lat1) * Math.sin(dr) * Math.cos(brng));
  double lon2=lon1 + Math.atan2(Math.sin(brng) * Math.sin(dr) * Math.cos(lat1),Math.cos(dr) - Math.sin(lat1) * Math.sin(lat2));
  return (new Coord2D(Math.toDegrees(lon2),Math.toDegrees(lat2)));
}","/** 
 * Extrapolate latitude/longitude given a heading and distance thanks to http://www.movable-type.co.uk/scripts/latlong.html
 * @param origin Point of origin
 * @param bearing bearing to navigate
 * @param distance distance to be added
 * @return New point with the added distance
 */
public static Coord2D newCoordFromBearingAndDistance(Coord2D origin,double bearing,double distance){
  double lat=origin.getLat();
  double lon=origin.getLng();
  double lat1=Math.toRadians(lat);
  double lon1=Math.toRadians(lon);
  double brng=Math.toRadians(bearing);
  double dr=distance / RADIUS_OF_EARTH;
  double lat2=Math.asin(Math.sin(lat1) * Math.cos(dr) + Math.cos(lat1) * Math.sin(dr) * Math.cos(brng));
  double lon2=lon1 + Math.atan2(Math.sin(brng) * Math.sin(dr) * Math.cos(lat1),Math.cos(dr) - Math.sin(lat1) * Math.sin(lat2));
  return (new Coord2D(Math.toDegrees(lat2),Math.toDegrees(lon2)));
}"
95244,"/** 
 * Calculates the arc between two points http://en.wikipedia.org/wiki/Haversine_formula
 * @return the arc in degrees
 */
static double getArcInRadians(Coord2D from,Coord2D to){
  double latitudeArc=Math.toRadians(from.getY() - to.getY());
  double longitudeArc=Math.toRadians(from.getX() - to.getX());
  double latitudeH=Math.sin(latitudeArc * 0.5);
  latitudeH*=latitudeH;
  double lontitudeH=Math.sin(longitudeArc * 0.5);
  lontitudeH*=lontitudeH;
  double tmp=Math.cos(Math.toRadians(from.getY())) * Math.cos(Math.toRadians(to.getY()));
  return Math.toDegrees(2.0 * Math.asin(Math.sqrt(latitudeH + tmp * lontitudeH)));
}","/** 
 * Calculates the arc between two points http://en.wikipedia.org/wiki/Haversine_formula
 * @return the arc in degrees
 */
static double getArcInRadians(Coord2D from,Coord2D to){
  double latitudeArc=Math.toRadians(from.getLat() - to.getLat());
  double longitudeArc=Math.toRadians(from.getLng() - to.getLng());
  double latitudeH=Math.sin(latitudeArc * 0.5);
  latitudeH*=latitudeH;
  double lontitudeH=Math.sin(longitudeArc * 0.5);
  lontitudeH*=lontitudeH;
  double tmp=Math.cos(Math.toRadians(from.getLat())) * Math.cos(Math.toRadians(to.getLat()));
  return Math.toDegrees(2.0 * Math.asin(Math.sqrt(latitudeH + tmp * lontitudeH)));
}"
95245,"public Coord2D getMiddle(){
  return (new Coord2D((ne_1quadrant.getY() + sw_3quadrant.getY()) / 2,(ne_1quadrant.getX() + sw_3quadrant.getX()) / 2));
}","public Coord2D getMiddle(){
  return (new Coord2D((ne_1quadrant.getX() + sw_3quadrant.getX()) / 2,(ne_1quadrant.getY() + sw_3quadrant.getY()) / 2));
}"
95246,"/** 
 * Extrapolate latitude/longitude given a heading and distance thanks to http://www.movable-type.co.uk/scripts/latlong.html
 * @param origin Point of origin
 * @param bearing bearing to navigate
 * @param distance distance to be added
 * @return New point with the added distance
 */
public static Coord2D newCoordFromBearingAndDistance(Coord2D origin,double bearing,double distance){
  double lat=origin.getY();
  double lon=origin.getX();
  double lat1=Math.toRadians(lat);
  double lon1=Math.toRadians(lon);
  double brng=Math.toRadians(bearing);
  double dr=distance / RADIUS_OF_EARTH;
  double lat2=Math.asin(Math.sin(lat1) * Math.cos(dr) + Math.cos(lat1) * Math.sin(dr) * Math.cos(brng));
  double lon2=lon1 + Math.atan2(Math.sin(brng) * Math.sin(dr) * Math.cos(lat1),Math.cos(dr) - Math.sin(lat1) * Math.sin(lat2));
  return (new Coord2D(Math.toDegrees(lat2),Math.toDegrees(lon2)));
}","/** 
 * Extrapolate latitude/longitude given a heading and distance thanks to http://www.movable-type.co.uk/scripts/latlong.html
 * @param origin Point of origin
 * @param bearing bearing to navigate
 * @param distance distance to be added
 * @return New point with the added distance
 */
public static Coord2D newCoordFromBearingAndDistance(Coord2D origin,double bearing,double distance){
  double lat=origin.getY();
  double lon=origin.getX();
  double lat1=Math.toRadians(lat);
  double lon1=Math.toRadians(lon);
  double brng=Math.toRadians(bearing);
  double dr=distance / RADIUS_OF_EARTH;
  double lat2=Math.asin(Math.sin(lat1) * Math.cos(dr) + Math.cos(lat1) * Math.sin(dr) * Math.cos(brng));
  double lon2=lon1 + Math.atan2(Math.sin(brng) * Math.sin(dr) * Math.cos(lat1),Math.cos(dr) - Math.sin(lat1) * Math.sin(lat2));
  return (new Coord2D(Math.toDegrees(lon2),Math.toDegrees(lat2)));
}"
95247,"private void build() throws Exception {
  GridBuilder gridBuilder=new GridBuilder(polygon,surveyData,new Coord2D(0,0));
  polygon.checkIfValid();
  grid=gridBuilder.generate();
}","public void build() throws Exception {
  GridBuilder gridBuilder=new GridBuilder(polygon,surveyData,new Coord2D(0,0));
  polygon.checkIfValid();
  grid=gridBuilder.generate();
}"
95248,"public void receiveData(MAVLinkMessage msg){
  if (drone.parameters.processMessage(msg)) {
    return;
  }
  drone.waypointManager.processMessage(msg);
  drone.calibrationSetup.processMessage(msg);
switch (msg.msgid) {
case msg_attitude.MAVLINK_MSG_ID_ATTITUDE:
    msg_attitude m_att=(msg_attitude)msg;
  drone.orientation.setRollPitchYaw(m_att.roll * 180.0 / Math.PI,m_att.pitch * 180.0 / Math.PI,m_att.yaw * 180.0 / Math.PI);
break;
case msg_vfr_hud.MAVLINK_MSG_ID_VFR_HUD:
msg_vfr_hud m_hud=(msg_vfr_hud)msg;
drone.setAltitudeGroundAndAirSpeeds(m_hud.alt,m_hud.groundspeed,m_hud.airspeed,m_hud.climb);
checkIsFlying(m_hud);
break;
case msg_mission_current.MAVLINK_MSG_ID_MISSION_CURRENT:
drone.missionStats.setWpno(((msg_mission_current)msg).seq);
break;
case msg_nav_controller_output.MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT:
msg_nav_controller_output m_nav=(msg_nav_controller_output)msg;
drone.setDisttowpAndSpeedAltErrors(m_nav.wp_dist,m_nav.alt_error,m_nav.aspd_error);
drone.navigation.setNavPitchRollYaw(m_nav.nav_pitch,m_nav.nav_roll,m_nav.nav_bearing);
break;
case msg_heartbeat.MAVLINK_MSG_ID_HEARTBEAT:
msg_heartbeat msg_heart=(msg_heartbeat)msg;
drone.type.setType(msg_heart.type);
processState(msg_heart);
ApmModes newMode;
newMode=ApmModes.getMode(msg_heart.custom_mode,drone.type.getType());
drone.state.setMode(newMode);
drone.heartbeat.onHeartbeat(msg_heart);
break;
case msg_global_position_int.MAVLINK_MSG_ID_GLOBAL_POSITION_INT:
drone.GPS.setPosition(new Coord2D(((msg_global_position_int)msg).lat / 1E7,((msg_global_position_int)msg).lon / 1E7));
break;
case msg_sys_status.MAVLINK_MSG_ID_SYS_STATUS:
msg_sys_status m_sys=(msg_sys_status)msg;
drone.battery.setBatteryState(m_sys.voltage_battery / 1000.0,m_sys.battery_remaining,m_sys.current_battery / 100.0);
break;
case msg_radio.MAVLINK_MSG_ID_RADIO:
msg_radio m_radio=(msg_radio)msg;
drone.radio.setRadioState(m_radio.rxerrors,m_radio.fixed,m_radio.rssi,m_radio.remrssi,m_radio.txbuf,m_radio.noise,m_radio.remnoise);
break;
case msg_gps_raw_int.MAVLINK_MSG_ID_GPS_RAW_INT:
drone.GPS.setGpsState(((msg_gps_raw_int)msg).fix_type,((msg_gps_raw_int)msg).satellites_visible,((msg_gps_raw_int)msg).eph);
break;
case msg_rc_channels_raw.MAVLINK_MSG_ID_RC_CHANNELS_RAW:
drone.RC.setRcInputValues((msg_rc_channels_raw)msg);
break;
case msg_servo_output_raw.MAVLINK_MSG_ID_SERVO_OUTPUT_RAW:
drone.RC.setRcOutputValues((msg_servo_output_raw)msg);
break;
}
}","public void receiveData(MAVLinkMessage msg){
  if (drone.parameters.processMessage(msg)) {
    return;
  }
  drone.waypointManager.processMessage(msg);
  drone.calibrationSetup.processMessage(msg);
switch (msg.msgid) {
case msg_attitude.MAVLINK_MSG_ID_ATTITUDE:
    msg_attitude m_att=(msg_attitude)msg;
  drone.orientation.setRollPitchYaw(m_att.roll * 180.0 / Math.PI,m_att.pitch * 180.0 / Math.PI,m_att.yaw * 180.0 / Math.PI);
break;
case msg_vfr_hud.MAVLINK_MSG_ID_VFR_HUD:
msg_vfr_hud m_hud=(msg_vfr_hud)msg;
drone.setAltitudeGroundAndAirSpeeds(m_hud.alt,m_hud.groundspeed,m_hud.airspeed,m_hud.climb);
checkIsFlying(m_hud);
break;
case msg_mission_current.MAVLINK_MSG_ID_MISSION_CURRENT:
drone.missionStats.setWpno(((msg_mission_current)msg).seq);
break;
case msg_nav_controller_output.MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT:
msg_nav_controller_output m_nav=(msg_nav_controller_output)msg;
drone.setDisttowpAndSpeedAltErrors(m_nav.wp_dist,m_nav.alt_error,m_nav.aspd_error);
drone.navigation.setNavPitchRollYaw(m_nav.nav_pitch,m_nav.nav_roll,m_nav.nav_bearing);
break;
case msg_heartbeat.MAVLINK_MSG_ID_HEARTBEAT:
msg_heartbeat msg_heart=(msg_heartbeat)msg;
drone.type.setType(msg_heart.type);
processState(msg_heart);
ApmModes newMode;
newMode=ApmModes.getMode(msg_heart.custom_mode,drone.type.getType());
drone.state.setMode(newMode);
drone.heartbeat.onHeartbeat(msg_heart);
break;
case msg_global_position_int.MAVLINK_MSG_ID_GLOBAL_POSITION_INT:
drone.GPS.setPosition(new Coord2D(((msg_global_position_int)msg).lon / 1E7,((msg_global_position_int)msg).lat / 1E7));
break;
case msg_sys_status.MAVLINK_MSG_ID_SYS_STATUS:
msg_sys_status m_sys=(msg_sys_status)msg;
drone.battery.setBatteryState(m_sys.voltage_battery / 1000.0,m_sys.battery_remaining,m_sys.current_battery / 100.0);
break;
case msg_radio.MAVLINK_MSG_ID_RADIO:
msg_radio m_radio=(msg_radio)msg;
drone.radio.setRadioState(m_radio.rxerrors,m_radio.fixed,m_radio.rssi,m_radio.remrssi,m_radio.txbuf,m_radio.noise,m_radio.remnoise);
break;
case msg_gps_raw_int.MAVLINK_MSG_ID_GPS_RAW_INT:
drone.GPS.setGpsState(((msg_gps_raw_int)msg).fix_type,((msg_gps_raw_int)msg).satellites_visible,((msg_gps_raw_int)msg).eph);
break;
case msg_rc_channels_raw.MAVLINK_MSG_ID_RC_CHANNELS_RAW:
drone.RC.setRcInputValues((msg_rc_channels_raw)msg);
break;
case msg_servo_output_raw.MAVLINK_MSG_ID_SERVO_OUTPUT_RAW:
drone.RC.setRcOutputValues((msg_servo_output_raw)msg);
break;
}
}"
95249,"private void sendGuidedPoint(){
  if (state == GuidedStates.ACTIVE) {
    myDrone.events.notifyDroneEvent(DroneEventsType.GUIDEDPOINT);
    MavLinkModes.setGuidedMode(myDrone,coord.getY(),coord.getX(),altitude.valueInMeters());
  }
}","private void sendGuidedPoint(){
  if (state == GuidedStates.ACTIVE) {
    myDrone.events.notifyDroneEvent(DroneEventsType.GUIDEDPOINT);
    MavLinkModes.setGuidedMode(myDrone,coord.getLat(),coord.getLng(),altitude.valueInMeters());
  }
}"
95250,"public void setHome(msg_mission_item msg){
  this.coordinate=new Coord2D(msg.x,msg.y);
  this.altitude=new Altitude(msg.z);
  myDrone.events.notifyDroneEvent(DroneEventsType.HOME);
}","public void setHome(msg_mission_item msg){
  this.coordinate=new Coord2D(msg.y,msg.x);
  this.altitude=new Altitude(msg.z);
  myDrone.events.notifyDroneEvent(DroneEventsType.HOME);
}"
95251,"@Override public List<msg_mission_item> packMissionItem(){
  List<msg_mission_item> list=super.packMissionItem();
  msg_mission_item mavMsg=list.get(0);
  mavMsg.x=(float)coordinate.getX();
  mavMsg.y=(float)coordinate.getY();
  mavMsg.z=(float)coordinate.getAltitude().valueInMeters();
  return list;
}","@Override public List<msg_mission_item> packMissionItem(){
  List<msg_mission_item> list=super.packMissionItem();
  msg_mission_item mavMsg=list.get(0);
  mavMsg.x=(float)coordinate.getLat();
  mavMsg.y=(float)coordinate.getLng();
  mavMsg.z=(float)coordinate.getAltitude().valueInMeters();
  return list;
}"
95252,"@Override public void unpackMAVMessage(msg_mission_item mavMsg){
  Altitude alt=new Altitude(mavMsg.z);
  setCoordinate(new Coord3D(mavMsg.x,mavMsg.y,alt));
}","@Override public void unpackMAVMessage(msg_mission_item mavMsg){
  Altitude alt=new Altitude(mavMsg.z);
  setCoordinate(new Coord3D(mavMsg.y,mavMsg.x,alt));
}"
95253,"public void testPackMissionItem(){
  Mission mission=new Mission(null);
  Waypoint item=new Waypoint(mission,new Coord3D(0.1,1,new Altitude(2)));
  msg_mission_item mavMsg=item.packMissionItem().get(0);
  assertEquals(1,mavMsg.autocontinue);
  assertEquals(1,mavMsg.target_component);
  assertEquals(1,mavMsg.target_system);
  assertEquals(MAV_FRAME.MAV_FRAME_GLOBAL_RELATIVE_ALT,mavMsg.frame);
  assertEquals(0.1f,mavMsg.x);
  assertEquals(1f,mavMsg.y);
  assertEquals(2f,mavMsg.z);
}","public void testPackMissionItem(){
  Mission mission=new Mission(null);
  Waypoint item=new Waypoint(mission,new Coord3D(0.1,1,new Altitude(2)));
  msg_mission_item mavMsg=item.packMissionItem().get(0);
  assertEquals(1,mavMsg.autocontinue);
  assertEquals(1,mavMsg.target_component);
  assertEquals(1,mavMsg.target_system);
  assertEquals(MAV_FRAME.MAV_FRAME_GLOBAL_RELATIVE_ALT,mavMsg.frame);
  assertEquals(1f,mavMsg.x);
  assertEquals(0.1f,mavMsg.y);
  assertEquals(2f,mavMsg.z);
}"
95254,"public Coord2D getMiddle(){
  return (new Coord2D((ne_1quadrant.getX() + sw_3quadrant.getX()) / 2,(ne_1quadrant.getY() + sw_3quadrant.getY()) / 2));
}","public Coord2D getMiddle(){
  return (new Coord2D((ne_1quadrant.getLat() + sw_3quadrant.getLat()) / 2,(ne_1quadrant.getLng() + sw_3quadrant.getLng()) / 2));
}"
95255,"/** 
 * Extrapolate latitude/longitude given a heading and distance thanks to http://www.movable-type.co.uk/scripts/latlong.html
 * @param origin Point of origin
 * @param bearing bearing to navigate
 * @param distance distance to be added
 * @return New point with the added distance
 */
public static Coord2D newCoordFromBearingAndDistance(Coord2D origin,double bearing,double distance){
  double lat=origin.getY();
  double lon=origin.getX();
  double lat1=Math.toRadians(lat);
  double lon1=Math.toRadians(lon);
  double brng=Math.toRadians(bearing);
  double dr=distance / RADIUS_OF_EARTH;
  double lat2=Math.asin(Math.sin(lat1) * Math.cos(dr) + Math.cos(lat1) * Math.sin(dr) * Math.cos(brng));
  double lon2=lon1 + Math.atan2(Math.sin(brng) * Math.sin(dr) * Math.cos(lat1),Math.cos(dr) - Math.sin(lat1) * Math.sin(lat2));
  return (new Coord2D(Math.toDegrees(lon2),Math.toDegrees(lat2)));
}","/** 
 * Extrapolate latitude/longitude given a heading and distance thanks to http://www.movable-type.co.uk/scripts/latlong.html
 * @param origin Point of origin
 * @param bearing bearing to navigate
 * @param distance distance to be added
 * @return New point with the added distance
 */
public static Coord2D newCoordFromBearingAndDistance(Coord2D origin,double bearing,double distance){
  double lat=origin.getLat();
  double lon=origin.getLng();
  double lat1=Math.toRadians(lat);
  double lon1=Math.toRadians(lon);
  double brng=Math.toRadians(bearing);
  double dr=distance / RADIUS_OF_EARTH;
  double lat2=Math.asin(Math.sin(lat1) * Math.cos(dr) + Math.cos(lat1) * Math.sin(dr) * Math.cos(brng));
  double lon2=lon1 + Math.atan2(Math.sin(brng) * Math.sin(dr) * Math.cos(lat1),Math.cos(dr) - Math.sin(lat1) * Math.sin(lat2));
  return (new Coord2D(Math.toDegrees(lat2),Math.toDegrees(lon2)));
}"
95256,"/** 
 * Calculates the arc between two points http://en.wikipedia.org/wiki/Haversine_formula
 * @return the arc in degrees
 */
static double getArcInRadians(Coord2D from,Coord2D to){
  double latitudeArc=Math.toRadians(from.getY() - to.getY());
  double longitudeArc=Math.toRadians(from.getX() - to.getX());
  double latitudeH=Math.sin(latitudeArc * 0.5);
  latitudeH*=latitudeH;
  double lontitudeH=Math.sin(longitudeArc * 0.5);
  lontitudeH*=lontitudeH;
  double tmp=Math.cos(Math.toRadians(from.getY())) * Math.cos(Math.toRadians(to.getY()));
  return Math.toDegrees(2.0 * Math.asin(Math.sqrt(latitudeH + tmp * lontitudeH)));
}","/** 
 * Calculates the arc between two points http://en.wikipedia.org/wiki/Haversine_formula
 * @return the arc in degrees
 */
static double getArcInRadians(Coord2D from,Coord2D to){
  double latitudeArc=Math.toRadians(from.getLat() - to.getLat());
  double longitudeArc=Math.toRadians(from.getLng() - to.getLng());
  double latitudeH=Math.sin(latitudeArc * 0.5);
  latitudeH*=latitudeH;
  double lontitudeH=Math.sin(longitudeArc * 0.5);
  lontitudeH*=lontitudeH;
  double tmp=Math.cos(Math.toRadians(from.getLat())) * Math.cos(Math.toRadians(to.getLat()));
  return Math.toDegrees(2.0 * Math.asin(Math.sqrt(latitudeH + tmp * lontitudeH)));
}"
95257,"public void receiveData(MAVLinkMessage msg){
  if (drone.parameters.processMessage(msg)) {
    return;
  }
  drone.waypointManager.processMessage(msg);
  drone.calibrationSetup.processMessage(msg);
switch (msg.msgid) {
case msg_attitude.MAVLINK_MSG_ID_ATTITUDE:
    msg_attitude m_att=(msg_attitude)msg;
  drone.orientation.setRollPitchYaw(m_att.roll * 180.0 / Math.PI,m_att.pitch * 180.0 / Math.PI,m_att.yaw * 180.0 / Math.PI);
break;
case msg_vfr_hud.MAVLINK_MSG_ID_VFR_HUD:
msg_vfr_hud m_hud=(msg_vfr_hud)msg;
drone.setAltitudeGroundAndAirSpeeds(m_hud.alt,m_hud.groundspeed,m_hud.airspeed,m_hud.climb);
checkIsFlying(m_hud);
break;
case msg_mission_current.MAVLINK_MSG_ID_MISSION_CURRENT:
drone.missionStats.setWpno(((msg_mission_current)msg).seq);
break;
case msg_nav_controller_output.MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT:
msg_nav_controller_output m_nav=(msg_nav_controller_output)msg;
drone.setDisttowpAndSpeedAltErrors(m_nav.wp_dist,m_nav.alt_error,m_nav.aspd_error);
drone.navigation.setNavPitchRollYaw(m_nav.nav_pitch,m_nav.nav_roll,m_nav.nav_bearing);
break;
case msg_heartbeat.MAVLINK_MSG_ID_HEARTBEAT:
msg_heartbeat msg_heart=(msg_heartbeat)msg;
drone.type.setType(msg_heart.type);
processState(msg_heart);
ApmModes newMode;
newMode=ApmModes.getMode(msg_heart.custom_mode,drone.type.getType());
drone.state.setMode(newMode);
drone.heartbeat.onHeartbeat(msg_heart);
break;
case msg_global_position_int.MAVLINK_MSG_ID_GLOBAL_POSITION_INT:
drone.GPS.setPosition(new Coord2D(((msg_global_position_int)msg).lat / 1E7,((msg_global_position_int)msg).lon / 1E7));
break;
case msg_sys_status.MAVLINK_MSG_ID_SYS_STATUS:
msg_sys_status m_sys=(msg_sys_status)msg;
drone.battery.setBatteryState(m_sys.voltage_battery / 1000.0,m_sys.battery_remaining,m_sys.current_battery / 100.0);
break;
case msg_radio.MAVLINK_MSG_ID_RADIO:
msg_radio m_radio=(msg_radio)msg;
drone.radio.setRadioState(m_radio.rxerrors,m_radio.fixed,m_radio.rssi,m_radio.remrssi,m_radio.txbuf,m_radio.noise,m_radio.remnoise);
break;
case msg_gps_raw_int.MAVLINK_MSG_ID_GPS_RAW_INT:
drone.GPS.setGpsState(((msg_gps_raw_int)msg).fix_type,((msg_gps_raw_int)msg).satellites_visible,((msg_gps_raw_int)msg).eph);
break;
case msg_rc_channels_raw.MAVLINK_MSG_ID_RC_CHANNELS_RAW:
drone.RC.setRcInputValues((msg_rc_channels_raw)msg);
break;
case msg_servo_output_raw.MAVLINK_MSG_ID_SERVO_OUTPUT_RAW:
drone.RC.setRcOutputValues((msg_servo_output_raw)msg);
break;
}
}","public void receiveData(MAVLinkMessage msg){
  if (drone.parameters.processMessage(msg)) {
    return;
  }
  drone.waypointManager.processMessage(msg);
  drone.calibrationSetup.processMessage(msg);
switch (msg.msgid) {
case msg_attitude.MAVLINK_MSG_ID_ATTITUDE:
    msg_attitude m_att=(msg_attitude)msg;
  drone.orientation.setRollPitchYaw(m_att.roll * 180.0 / Math.PI,m_att.pitch * 180.0 / Math.PI,m_att.yaw * 180.0 / Math.PI);
break;
case msg_vfr_hud.MAVLINK_MSG_ID_VFR_HUD:
msg_vfr_hud m_hud=(msg_vfr_hud)msg;
drone.setAltitudeGroundAndAirSpeeds(m_hud.alt,m_hud.groundspeed,m_hud.airspeed,m_hud.climb);
checkIsFlying(m_hud);
break;
case msg_mission_current.MAVLINK_MSG_ID_MISSION_CURRENT:
drone.missionStats.setWpno(((msg_mission_current)msg).seq);
break;
case msg_nav_controller_output.MAVLINK_MSG_ID_NAV_CONTROLLER_OUTPUT:
msg_nav_controller_output m_nav=(msg_nav_controller_output)msg;
drone.setDisttowpAndSpeedAltErrors(m_nav.wp_dist,m_nav.alt_error,m_nav.aspd_error);
drone.navigation.setNavPitchRollYaw(m_nav.nav_pitch,m_nav.nav_roll,m_nav.nav_bearing);
break;
case msg_heartbeat.MAVLINK_MSG_ID_HEARTBEAT:
msg_heartbeat msg_heart=(msg_heartbeat)msg;
drone.type.setType(msg_heart.type);
processState(msg_heart);
ApmModes newMode;
newMode=ApmModes.getMode(msg_heart.custom_mode,drone.type.getType());
drone.state.setMode(newMode);
drone.heartbeat.onHeartbeat(msg_heart);
break;
case msg_global_position_int.MAVLINK_MSG_ID_GLOBAL_POSITION_INT:
drone.GPS.setPosition(new Coord2D(((msg_global_position_int)msg).lon / 1E7,((msg_global_position_int)msg).lat / 1E7));
break;
case msg_sys_status.MAVLINK_MSG_ID_SYS_STATUS:
msg_sys_status m_sys=(msg_sys_status)msg;
drone.battery.setBatteryState(m_sys.voltage_battery / 1000.0,m_sys.battery_remaining,m_sys.current_battery / 100.0);
break;
case msg_radio.MAVLINK_MSG_ID_RADIO:
msg_radio m_radio=(msg_radio)msg;
drone.radio.setRadioState(m_radio.rxerrors,m_radio.fixed,m_radio.rssi,m_radio.remrssi,m_radio.txbuf,m_radio.noise,m_radio.remnoise);
break;
case msg_gps_raw_int.MAVLINK_MSG_ID_GPS_RAW_INT:
drone.GPS.setGpsState(((msg_gps_raw_int)msg).fix_type,((msg_gps_raw_int)msg).satellites_visible,((msg_gps_raw_int)msg).eph);
break;
case msg_rc_channels_raw.MAVLINK_MSG_ID_RC_CHANNELS_RAW:
drone.RC.setRcInputValues((msg_rc_channels_raw)msg);
break;
case msg_servo_output_raw.MAVLINK_MSG_ID_SERVO_OUTPUT_RAW:
drone.RC.setRcOutputValues((msg_servo_output_raw)msg);
break;
}
}"
95258,"private void sendGuidedPoint(){
  if (state == GuidedStates.ACTIVE) {
    myDrone.events.notifyDroneEvent(DroneEventsType.GUIDEDPOINT);
    MavLinkModes.setGuidedMode(myDrone,coord.getY(),coord.getX(),altitude.valueInMeters());
  }
}","private void sendGuidedPoint(){
  if (state == GuidedStates.ACTIVE) {
    myDrone.events.notifyDroneEvent(DroneEventsType.GUIDEDPOINT);
    MavLinkModes.setGuidedMode(myDrone,coord.getLat(),coord.getLng(),altitude.valueInMeters());
  }
}"
95259,"public void setHome(msg_mission_item msg){
  this.coordinate=new Coord2D(msg.x,msg.y);
  this.altitude=new Altitude(msg.z);
  myDrone.events.notifyDroneEvent(DroneEventsType.HOME);
}","public void setHome(msg_mission_item msg){
  this.coordinate=new Coord2D(msg.y,msg.x);
  this.altitude=new Altitude(msg.z);
  myDrone.events.notifyDroneEvent(DroneEventsType.HOME);
}"
95260,"@Override public List<msg_mission_item> packMissionItem(){
  List<msg_mission_item> list=super.packMissionItem();
  msg_mission_item mavMsg=list.get(0);
  mavMsg.x=(float)coordinate.getX();
  mavMsg.y=(float)coordinate.getY();
  mavMsg.z=(float)coordinate.getAltitude().valueInMeters();
  return list;
}","@Override public List<msg_mission_item> packMissionItem(){
  List<msg_mission_item> list=super.packMissionItem();
  msg_mission_item mavMsg=list.get(0);
  mavMsg.x=(float)coordinate.getLat();
  mavMsg.y=(float)coordinate.getLng();
  mavMsg.z=(float)coordinate.getAltitude().valueInMeters();
  return list;
}"
95261,"@Override public void unpackMAVMessage(msg_mission_item mavMsg){
  Altitude alt=new Altitude(mavMsg.z);
  setCoordinate(new Coord3D(mavMsg.x,mavMsg.y,alt));
}","@Override public void unpackMAVMessage(msg_mission_item mavMsg){
  Altitude alt=new Altitude(mavMsg.z);
  setCoordinate(new Coord3D(mavMsg.y,mavMsg.x,alt));
}"
95262,"public void testPackMissionItem(){
  Mission mission=new Mission(null);
  Waypoint item=new Waypoint(mission,new Coord3D(0.1,1,new Altitude(2)));
  msg_mission_item mavMsg=item.packMissionItem().get(0);
  assertEquals(1,mavMsg.autocontinue);
  assertEquals(1,mavMsg.target_component);
  assertEquals(1,mavMsg.target_system);
  assertEquals(MAV_FRAME.MAV_FRAME_GLOBAL_RELATIVE_ALT,mavMsg.frame);
  assertEquals(0.1f,mavMsg.x);
  assertEquals(1f,mavMsg.y);
  assertEquals(2f,mavMsg.z);
}","public void testPackMissionItem(){
  Mission mission=new Mission(null);
  Waypoint item=new Waypoint(mission,new Coord3D(0.1,1,new Altitude(2)));
  msg_mission_item mavMsg=item.packMissionItem().get(0);
  assertEquals(1,mavMsg.autocontinue);
  assertEquals(1,mavMsg.target_component);
  assertEquals(1,mavMsg.target_system);
  assertEquals(MAV_FRAME.MAV_FRAME_GLOBAL_RELATIVE_ALT,mavMsg.frame);
  assertEquals(1f,mavMsg.x);
  assertEquals(0.1f,mavMsg.y);
  assertEquals(2f,mavMsg.z);
}"
95263,"public static List<Coord2D> simplify(List<Coord2D> list,double tolerance){
  int index=0;
  double dmax=0;
  double squareTolerance=tolerance * tolerance;
  int lastIndex=list.size() - 1;
  for (int i=1; i < list.size() - 1; i++) {
    double d=PointTools.pointToLineDistance(list.get(0),list.get(lastIndex),list.get(i));
    if (d > dmax) {
      index=i;
      dmax=d;
    }
  }
  List<Coord2D> ResultList=new ArrayList<Coord2D>();
  if (dmax > squareTolerance) {
    List<Coord2D> recResults1=simplify(list.subList(0,index + 1),tolerance);
    List<Coord2D> recResults2=simplify(list.subList(index,lastIndex + 1),tolerance);
    recResults1.remove(recResults1.size() - 1);
    ResultList.addAll(recResults1);
    ResultList.addAll(recResults2);
  }
 else {
    ResultList.add(list.get(0));
    ResultList.add(list.get(lastIndex));
  }
  return ResultList;
}","public static List<Coord2D> simplify(List<Coord2D> list,double tolerance){
  int index=0;
  double dmax=0;
  int lastIndex=list.size() - 1;
  for (int i=1; i < lastIndex; i++) {
    double d=PointTools.pointToLineDistance(list.get(0),list.get(lastIndex),list.get(i));
    if (d > dmax) {
      index=i;
      dmax=d;
    }
  }
  List<Coord2D> ResultList=new ArrayList<Coord2D>();
  if (dmax > tolerance) {
    List<Coord2D> recResults1=simplify(list.subList(0,index + 1),tolerance);
    List<Coord2D> recResults2=simplify(list.subList(index,lastIndex + 1),tolerance);
    recResults1.remove(recResults1.size() - 1);
    ResultList.addAll(recResults1);
    ResultList.addAll(recResults2);
  }
 else {
    ResultList.add(list.get(0));
    ResultList.add(list.get(lastIndex));
  }
  return ResultList;
}"
95264,"@Override public void onDroneEvent(DroneEventsType event,Drone drone){
  final LatLng position=DroneHelper.CoordToLatLang(drone.GPS.getPosition());
switch (event) {
case GPS:
    mMapFragment.updateDroneLeashPath(guided);
  mMapFragment.addFlightPathPoint(position);
case MISSION_UPDATE:
update();
break;
case GUIDEDPOINT:
mMapFragment.updateMarker(guided,true);
mMapFragment.updateDroneLeashPath(guided);
break;
default :
break;
}
}","@Override public void onDroneEvent(DroneEventsType event,Drone drone){
  final LatLng position=DroneHelper.CoordToLatLang(drone.GPS.getPosition());
switch (event) {
case MISSION_UPDATE:
    update();
  break;
case GPS:
mMapFragment.updateMarker(graphicDrone,false);
mMapFragment.updateDroneLeashPath(guided);
mMapFragment.addFlightPathPoint(position);
break;
case GUIDEDPOINT:
mMapFragment.updateMarker(guided,true);
mMapFragment.updateDroneLeashPath(guided);
break;
default :
break;
}
}"
95265,"public void update(){
  mMapFragment.cleanMarkers();
  if (home.isValid()) {
    mMapFragment.updateMarker(home,false);
  }
  mMapFragment.updateMarker(graphicDrone,false);
  mMapFragment.updateMarkers(missionRender.getMarkers(),isMissionDraggable());
  mMapFragment.updateMissionPath(missionRender.getPathPoints());
}","public void update(){
  mMapFragment.cleanMarkers();
  if (home.isValid()) {
    mMapFragment.updateMarker(home,false);
  }
  mMapFragment.updateMarkers(missionRender.getMarkers(),isMissionDraggable());
  mMapFragment.updateMissionPath(missionRender.getPathPoints());
}"
95266,"private void addItemDetail(MissionItemRender item){
  itemDetailFragment=item.getDetailFragment();
  if (mContainerItemDetail == null) {
    itemDetailFragment.show(fragmentManager,""String_Node_Str"");
  }
 else {
    fragmentManager.beginTransaction().add(R.id.containerItemDetail,itemDetailFragment).commit();
  }
}","private void addItemDetail(MissionItemRender item){
  itemDetailFragment=item.getDetailFragment();
  if (itemDetailFragment == null)   return;
  if (mContainerItemDetail == null) {
    itemDetailFragment.show(fragmentManager,""String_Node_Str"");
  }
 else {
    fragmentManager.beginTransaction().replace(R.id.containerItemDetail,itemDetailFragment).commit();
  }
}"
95267,"@Override public void onWaypointTypeChanged(MissionItemRender newItem,MissionItemRender oldItem){
  missionRender.replace(oldItem,newItem);
  showItemDetail(newItem);
}","@Override public void onWaypointTypeChanged(MissionItemRender newItem,MissionItemRender oldItem){
  missionRender.replace(oldItem,newItem);
}"
95268,"@Override public boolean onMarkerClick(Marker marker){
  MarkerSource source=markers.getSourceFromMarker(marker);
  if (source instanceof MissionItemRender) {
    editorListener.onItemClick((MissionItemRender)source);
    return true;
  }
 else {
    return false;
  }
}","@Override public boolean onMarkerClick(Marker marker){
  MarkerSource source=markers.getSourceFromMarker(marker);
  if (source instanceof MissionItemMarkerSource) {
    editorListener.onItemClick(((MissionItemMarkerSource)source).getMarkerOrigin());
    return true;
  }
 else {
    return false;
  }
}"
95269,"public MissionDetailFragment getDetailFragment(){
  final Bundle fragmentArgs=new Bundle();
  fragmentArgs.putSerializable(MissionDetailFragment.EXTRA_MISSION_ITEM_RENDER,this);
  MissionDetailFragment fragment=new MissionWaypointFragment();
  fragment.setArguments(fragmentArgs);
  return fragment;
}","public MissionDetailFragment getDetailFragment(){
  return MissionDetailFragment.newInstance(mMissionItem.getType());
}"
95270,"public MissionItemRender(MissionRender mission,MissionItem missionItem){
  mMission=mission;
  mMissionItem=missionItem;
}","public MissionItemRender(MissionRender mission,MissionItem missionItem){
  mMission=mission;
  mMissionItem=missionItem;
  mMarkerSource=MissionItemMarkerSource.newInstance(this);
}"
95271,"/** 
 * Updates a mission item render
 * @param oldItem mission item render to update
 * @param newItem new mission item render
 */
public void replace(MissionItemRender oldItem,MissionItemRender newItem){
  final int index=mMissionItems.indexOf(oldItem);
  if (selectionContains(oldItem)) {
    removeItemFromSelection(oldItem);
    addToSelection(newItem);
  }
  mMissionItems.remove(index);
  mMissionItems.add(index,newItem);
  mMission.replace(oldItem.getMissionItem(),newItem.getMissionItem());
}","/** 
 * Updates a mission item render
 * @param oldItem mission item render to update
 * @param newItem new mission item render
 */
public void replace(MissionItemRender oldItem,MissionItemRender newItem){
  final int index=mMissionItems.indexOf(oldItem);
  if (index == -1)   return;
  mMissionItems.remove(index);
  mMissionItems.add(index,newItem);
  mMission.replace(oldItem.getMissionItem(),newItem.getMissionItem());
  if (selectionContains(oldItem)) {
    removeItemFromSelection(oldItem);
    addToSelection(newItem);
  }
}"
95272,"/** 
 * @return the map markers corresponding to this mission's command set.
 */
public List<MarkerSource> getMarkers(){
  List<MarkerSource> markers=new ArrayList<MarkerSource>();
  for (  MissionItemRender itemRender : mMissionItems) {
    markers.add(itemRender);
  }
  return markers;
}","/** 
 * @return the map markers corresponding to this mission's command set.
 */
public List<MarkerSource> getMarkers(){
  List<MarkerSource> markers=new ArrayList<MarkerSource>();
  for (  MissionItemRender itemRender : mMissionItems) {
    MarkerSource markerSource=itemRender.getMarkerSource();
    if (markerSource != null)     markers.add(itemRender.getMarkerSource());
  }
  return markers;
}"
95273,"public AdapterMissionItems(Context context,int resource,MissionItemTypes[] objects){
  super(context,resource,objects);
}","public AdapterMissionItems(Context context,int resource,MissionItemType[] objects){
  super(context,resource,objects);
}"
95274,"@Override public void onItemSelected(AdapterView<?> arg0,View v,int position,long id){
  MissionItemTypes selected=commandAdapter.getItem(position);
  try {
    MissionItem newItem=selected.getNewItem(missionRender.getMission());
    if (!newItem.getClass().equals(getItem().getClass())) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      mListener.onWaypointTypeChanged(new MissionItemRender(missionRender,newItem),getItem());
    }
  }
 catch (  IllegalArgumentException e) {
  }
}","@Override public void onItemSelected(AdapterView<?> arg0,View v,int position,long id){
  MissionItemType selected=commandAdapter.getItem(position);
  try {
    final MissionItem oldItem=itemRender.getMissionItem();
    if (oldItem.getType() != selected) {
      Log.d(""String_Node_Str"",""String_Node_Str"");
      MissionItem newItem=selected.getNewItem(oldItem);
      mListener.onWaypointTypeChanged(new MissionItemRender(itemRender.getMissionRender(),newItem),itemRender);
      dismiss();
    }
  }
 catch (  IllegalArgumentException e) {
  }
}"
95275,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setStyle(DialogFragment.STYLE_NO_TITLE,0);
  setRetainInstance(true);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setStyle(DialogFragment.STYLE_NO_TITLE,0);
}"
95276,"@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  missionRender=((DroidPlannerApp)getActivity().getApplication()).missionRender;
  mListener=(OnWayPointTypeChangeListener)activity;
}","@Override public void onAttach(Activity activity){
  super.onAttach(activity);
  mListener=(OnWayPointTypeChangeListener)activity;
}"
95277,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(getResource(),null);
  Bundle args=getArguments();
  if (args == null)   throw new IllegalStateException(""String_Node_Str"");
  itemRender=(MissionItemRender)args.getSerializable(EXTRA_MISSION_ITEM_RENDER);
  setupViews(view);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View view=inflater.inflate(getResource(),null);
  final MissionRender missionRender=((DroidPlannerApp)getActivity().getApplication()).missionRender;
  itemRender=missionRender.getSelected().get(0);
  setupViews(view);
  return view;
}"
95278,"protected void setupViews(View view){
  commandAdapter=new AdapterMissionItems(this.getActivity(),android.R.layout.simple_list_item_1,MissionItemTypes.values());
  typeSpinner=(SpinnerSelfSelect)view.findViewById(R.id.spinnerWaypointType);
  typeSpinner.setAdapter(commandAdapter);
  typeSpinner.setOnItemSelectedListener(this);
  final TextView waypointIndex=(TextView)view.findViewById(R.id.WaypointIndex);
  Integer temp=missionRender.getOrder(itemRender);
  waypointIndex.setText(temp.toString());
  final TextView distanceView=(TextView)view.findViewById(R.id.DistanceValue);
  final TextView distanceLabelView=(TextView)view.findViewById(R.id.DistanceLabel);
  try {
    distanceLabelView.setVisibility(View.VISIBLE);
    distanceView.setText(missionRender.getDistanceFromLastWaypoint(itemRender).toString());
  }
 catch (  NullPointerException e) {
  }
catch (  Exception e) {
  }
}","protected void setupViews(View view){
  final MissionRender missionRender=itemRender.getMissionRender();
  commandAdapter=new AdapterMissionItems(this.getActivity(),android.R.layout.simple_list_item_1,MissionItemType.values());
  typeSpinner=(SpinnerSelfSelect)view.findViewById(R.id.spinnerWaypointType);
  typeSpinner.setAdapter(commandAdapter);
  typeSpinner.setOnItemSelectedListener(this);
  final TextView waypointIndex=(TextView)view.findViewById(R.id.WaypointIndex);
  if (waypointIndex != null) {
    final int itemOrder=missionRender.getOrder(itemRender);
    waypointIndex.setText(String.valueOf(itemOrder));
  }
  final TextView distanceView=(TextView)view.findViewById(R.id.DistanceValue);
  final TextView distanceLabelView=(TextView)view.findViewById(R.id.DistanceLabel);
  try {
    distanceLabelView.setVisibility(View.VISIBLE);
    distanceView.setText(missionRender.getDistanceFromLastWaypoint(itemRender).toString());
  }
 catch (  NullPointerException e) {
  }
catch (  Exception e) {
  }
}"
95279,"private void addItemDetail(MissionItem item){
  itemDetailFragment=item.getDetailFragment();
  if (mContainerItemDetail == null) {
    itemDetailFragment.show(fragmentManager,""String_Node_Str"");
  }
 else {
    fragmentManager.beginTransaction().add(R.id.containerItemDetail,itemDetailFragment).commit();
  }
}","private void addItemDetail(MissionItem item){
  if (item instanceof EditorMissionItem) {
    itemDetailFragment=((EditorMissionItem)item).getDetailFragment();
    if (mContainerItemDetail == null) {
      itemDetailFragment.show(fragmentManager,""String_Node_Str"");
    }
 else {
      fragmentManager.beginTransaction().add(R.id.containerItemDetail,itemDetailFragment).commit();
    }
  }
}"
95280,"@Override public void onMapClick(LatLng point){
  mission.clearSelection();
  removeItemDetail();
  notifySelectionChanged();
switch (getTool()) {
case MARKER:
    mission.addWaypoint(point);
  break;
case DRAW:
break;
case POLY:
break;
case TRASH:
break;
case NONE:
break;
}
}","@Override public void onMapClick(LatLng point){
  mission.clearSelection();
  removeItemDetail();
  notifySelectionChanged();
switch (getTool()) {
case MARKER:
    mission.addWaypoint(DroneHelper.LatLngToCoord(point));
  break;
case DRAW:
break;
case POLY:
break;
case TRASH:
break;
case NONE:
break;
}
}"
95281,"/** 
 * Load/aggregate profile from resources and file (if available) File will override resource settings
 */
public static VehicleProfile load(Context context,String vehicleType){
  final String fileName=vehicleType + ""String_Node_Str"";
  final String path=VEHICLEPROFILE_PATH + File.separator + fileName;
  try {
    final VehicleProfile newProfile=new VehicleProfile();
    final AssetManager assetManager=context.getAssets();
    if (AssetUtil.exists(assetManager,VEHICLEPROFILE_PATH,fileName)) {
      final InputStream inputStream=assetManager.open(path);
      VehicleProfileReader.open(inputStream,newProfile);
    }
    final File file=new File(DirectoryPath.getDroidPlannerPath() + path);
    if (file.exists()) {
      final InputStream inputStream=new FileInputStream(file);
      VehicleProfileReader.open(inputStream,newProfile);
    }
    return newProfile;
  }
 catch (  Exception e) {
  }
  return null;
}","/** 
 * Load/aggregate profile from resources and file (if available) File will override resource settings
 */
public static VehicleProfile load(Context context,FirmwareType vehicleType){
  final String fileName=vehicleType + ""String_Node_Str"";
  final String path=VEHICLEPROFILE_PATH + File.separator + fileName;
  try {
    final VehicleProfile newProfile=new VehicleProfile();
    final AssetManager assetManager=context.getAssets();
    if (AssetUtil.exists(assetManager,VEHICLEPROFILE_PATH,fileName)) {
      final InputStream inputStream=assetManager.open(path);
      VehicleProfileReader.open(inputStream,newProfile);
    }
    final File file=new File(DirectoryPath.getDroidPlannerPath() + path);
    if (file.exists()) {
      final InputStream inputStream=new FileInputStream(file);
      VehicleProfileReader.open(inputStream,newProfile);
    }
    return newProfile;
  }
 catch (  Exception e) {
  }
  return null;
}"
95282,"private static void parse(XmlPullParser parser,VehicleProfile profile) throws XmlPullParserException, IOException {
  VehicleProfile.ViewProfileBuilder viewProfileBuilder=profile.getViewProfileBuilder();
  int eventType=parser.getEventType();
  while (eventType != XmlPullParser.END_DOCUMENT) {
    final String parserName=parser.getName();
switch (eventType) {
case XmlPullParser.START_TAG:
      if (parserName.equals(TAG_METADATATYPE)) {
        final String value=parser.getAttributeValue(null,ATTR_TYPE);
        if (value != null)         profile.setParameterMetadataType(value);
      }
 else       if (parserName.equals(TAG_DEFAULT)) {
        parseDefault(parser,profile.getDefault());
      }
 else       if (parserName.equals(TAG_VIEWPROFILE)) {
        if (viewProfileBuilder != null)         viewProfileBuilder.addViewProfile(newViewProfile(parser));
      }
 else       if (parserName.equals(TAG_DIALOGPROFILE)) {
        viewProfileBuilder=profile.addDialogProfile(newDialogProfile(parser));
      }
    break;
case XmlPullParser.END_TAG:
  if (parserName.equals(TAG_DIALOGPROFILE)) {
    viewProfileBuilder=profile.getViewProfileBuilder();
  }
break;
}
eventType=parser.next();
}
}","private static void parse(XmlPullParser parser,VehicleProfile profile) throws XmlPullParserException, IOException {
  int eventType=parser.getEventType();
  while (eventType != XmlPullParser.END_DOCUMENT) {
    final String parserName=parser.getName();
switch (eventType) {
case XmlPullParser.START_TAG:
      if (parserName.equals(TAG_METADATATYPE)) {
        final String value=parser.getAttributeValue(null,ATTR_TYPE);
        if (value != null)         profile.setParameterMetadataType(value);
      }
 else       if (parserName.equals(TAG_DEFAULT)) {
        parseDefault(parser,profile.getDefault());
      }
    break;
case XmlPullParser.END_TAG:
  break;
}
eventType=parser.next();
}
}"
95283,"@Override public String getVehicleType(){
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  return prefs.getString(""String_Node_Str"",null);
}","@Override public FirmwareType getVehicleType(){
  final SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  String str=prefs.getString(""String_Node_Str"",null);
  return FirmwareType.firmwareFromString(str);
}"
95284,"@Override public void onMovingWaypoint(SpatialCoordItemD source,LatLng latLng){
}","@Override public void onMovingWaypoint(SpatialCoordItem source,LatLng latLng){
}"
95285,"private void notifiyDisconnected(){
  watchdog.removeCallbacks(watchdogCallback);
}","private void notifiyDisconnected(){
  watchdog.removeCallbacks(watchdogCallback);
  heartbeatState=HeartbeatState.FIRST_HEARTBEAT;
}"
95286,"private void notifyConnected(){
  heartbeatState=HeartbeatState.FIRST_HEARTBEAT;
  restartWatchdog(HEARTBEAT_NORMAL_TIMEOUT);
}","private void notifyConnected(){
  restartWatchdog(HEARTBEAT_NORMAL_TIMEOUT);
}"
95287,"public Coord2D(double x,double y){
  set(x,y);
}","public Coord2D(Coord2D point){
  set(point);
}"
95288,"private void include(Coord2D point){
  if ((sw_3quadrant != null) | (ne_1quadrant != null)) {
    sw_3quadrant=ne_1quadrant=point;
  }
 else {
    if (point.getY() > ne_1quadrant.getY()) {
      ne_1quadrant.set(ne_1quadrant.getX(),point.getY());
    }
    if (point.getX() > ne_1quadrant.getX()) {
      ne_1quadrant.set(point.getX(),ne_1quadrant.getY());
    }
    if (point.getY() < ne_1quadrant.getY()) {
      sw_3quadrant.set(sw_3quadrant.getX(),point.getY());
    }
    if (point.getX() < sw_3quadrant.getX()) {
      sw_3quadrant.set(point.getX(),sw_3quadrant.getY());
    }
  }
}","public void include(Coord2D point){
  if ((sw_3quadrant == null) | (ne_1quadrant == null)) {
    ne_1quadrant=new Coord2D(point);
    sw_3quadrant=new Coord2D(point);
  }
 else {
    if (point.getY() > ne_1quadrant.getY()) {
      ne_1quadrant.set(ne_1quadrant.getX(),point.getY());
    }
    if (point.getX() > ne_1quadrant.getX()) {
      ne_1quadrant.set(point.getX(),ne_1quadrant.getY());
    }
    if (point.getY() < sw_3quadrant.getY()) {
      sw_3quadrant.set(sw_3quadrant.getX(),point.getY());
    }
    if (point.getX() < sw_3quadrant.getX()) {
      sw_3quadrant.set(point.getX(),sw_3quadrant.getY());
    }
  }
}"
95289,"@Override public List<msg_mission_item> packMissionItem(){
  List<msg_mission_item> list=super.packMissionItem();
  msg_mission_item mavMsg=list.get(0);
  mavMsg.command=MAV_CMD.MAV_CMD_NAV_LAND;
  mavMsg.frame=MAV_FRAME.MAV_FRAME_GLOBAL_RELATIVE_ALT;
  mavMsg.z=(float)returnAltitude.valueInMeters();
  return list;
}","@Override public List<msg_mission_item> packMissionItem(){
  List<msg_mission_item> list=super.packMissionItem();
  msg_mission_item mavMsg=list.get(0);
  mavMsg.command=MAV_CMD.MAV_CMD_NAV_RETURN_TO_LAUNCH;
  mavMsg.frame=MAV_FRAME.MAV_FRAME_GLOBAL_RELATIVE_ALT;
  mavMsg.z=(float)returnAltitude.valueInMeters();
  return list;
}"
95290,"public void set(double x,double y){
  this.x=x;
  this.y=y;
}","public void set(Coord2D coord){
  set(coord.x,coord.y);
}"
95291,"public Coord2D(double x2,double y){
  set(x2,y);
}","public Coord2D(double x,double y){
  set(x,y);
}"
95292,"public void addMissionUpdatesListner(OnDroneListner listner){
  myDrone.events.addDroneListener(listner);
}","public void addMissionUpdatesListner(OnDroneListener listner){
  myDrone.events.addDroneListener(listner);
}"
95293,"public void removeMissionUpdatesListner(OnDroneListner listener){
  myDrone.events.removeDroneListener(listener);
}","public void removeMissionUpdatesListner(OnDroneListener listener){
  myDrone.events.removeDroneListener(listener);
}"
95294,"public void setupLocalViews(View view){
  cameraSpinner=(SpinnerSelfSelect)view.findViewById(id.cameraFileSpinner);
  footprintCheckBox=(CheckBox)view.findViewById(id.CheckBoxFootprints);
  angleView=(SeekBarWithText)view.findViewById(id.angleView);
  overlapView=(SeekBarWithText)view.findViewById(id.overlapView);
  sidelapView=(SeekBarWithText)view.findViewById(id.sidelapView);
  altitudeView=(SeekBarWithText)view.findViewById(id.altitudeView);
  innerWPsCheckbox=(CheckBox)view.findViewById(id.checkBoxInnerWPs);
  areaTextView=(TextView)view.findViewById(id.areaTextView);
  distanceBetweenLinesTextView=(TextView)view.findViewById(id.distanceBetweenLinesTextView);
  footprintTextView=(TextView)view.findViewById(id.footprintTextView);
  groundResolutionTextView=(TextView)view.findViewById(id.groundResolutionTextView);
  distanceTextView=(TextView)view.findViewById(id.distanceTextView);
  numberOfPicturesView=(TextView)view.findViewById(id.numberOfPicturesTextView);
  numberOfStripsView=(TextView)view.findViewById(id.numberOfStripsTextView);
  lengthView=(TextView)view.findViewById(id.lengthTextView);
  cameraAdapter=new CamerasAdapter(getActivity(),android.R.layout.simple_spinner_dropdown_item);
  cameraSpinner.setAdapter(cameraAdapter);
  footprintCheckBox.setOnClickListener(this);
  angleView.setOnChangedListner(this);
  altitudeView.setOnChangedListner(this);
  overlapView.setOnChangedListner(this);
  sidelapView.setOnChangedListner(this);
  innerWPsCheckbox.setOnClickListener(this);
  cameraSpinner.setOnSpinnerItemSelectedListener(this);
}","public void setupLocalViews(View view){
  cameraSpinner=(SpinnerSelfSelect)view.findViewById(id.cameraFileSpinner);
  footprintCheckBox=(CheckBox)view.findViewById(id.CheckBoxFootprints);
  angleView=(SeekBarWithText)view.findViewById(id.angleView);
  overlapView=(SeekBarWithText)view.findViewById(id.overlapView);
  sidelapView=(SeekBarWithText)view.findViewById(id.sidelapView);
  altitudeView=(SeekBarWithText)view.findViewById(id.altitudeView);
  innerWPsCheckbox=(CheckBox)view.findViewById(id.checkBoxInnerWPs);
  areaTextView=(TextView)view.findViewById(id.areaTextView);
  distanceBetweenLinesTextView=(TextView)view.findViewById(id.distanceBetweenLinesTextView);
  footprintTextView=(TextView)view.findViewById(id.footprintTextView);
  groundResolutionTextView=(TextView)view.findViewById(id.groundResolutionTextView);
  distanceTextView=(TextView)view.findViewById(id.distanceTextView);
  numberOfPicturesView=(TextView)view.findViewById(id.numberOfPicturesTextView);
  numberOfStripsView=(TextView)view.findViewById(id.numberOfStripsTextView);
  lengthView=(TextView)view.findViewById(id.lengthTextView);
  cameraAdapter=new CamerasAdapter(getActivity(),android.R.layout.simple_spinner_dropdown_item);
  cameraSpinner.setAdapter(cameraAdapter);
  footprintCheckBox.setOnClickListener(this);
  angleView.setOnChangedListener(this);
  altitudeView.setOnChangedListener(this);
  overlapView.setOnChangedListener(this);
  sidelapView.setOnChangedListener(this);
  innerWPsCheckbox.setOnClickListener(this);
  cameraSpinner.setOnSpinnerItemSelectedListener(this);
}"
95295,"public void update(){
  markers.clean();
  Home home=drone.home.getHome();
  if (home.isValid()) {
    markers.updateMarker(home,false,context);
  }
  markers.updateMarkers(mission.getMarkers(),true,context);
  missionPath.update(mission);
}","public void update(){
  markers.clean();
  Home home=drone.home.getHome();
  if (home.isValid()) {
    markers.updateMarker(home,false,context);
  }
  markers.updateMarkers(mission.getMarkers(),isMissionDraggable(),context);
  missionPath.update(mission);
}"
95296,"public void onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.bar_timer_reset:
    drone.state.resetFlightTimer();
  break;
case R.id.bar_home:
break;
case R.id.menu_send_mission:
drone.mission.sendMissionToAPM();
break;
case R.id.menu_load_mission:
drone.waypointMananger.getWaypoints();
break;
}
}","public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.bar_timer_reset:
    drone.state.resetFlightTimer();
  return true;
case R.id.bar_home:
return true;
case R.id.menu_send_mission:
drone.mission.sendMissionToAPM();
return true;
case R.id.menu_load_mission:
drone.waypointMananger.getWaypoints();
return true;
}
return false;
}"
95297,"@Override public boolean onOptionsItemSelected(MenuItem item){
  infoMenu.onOptionsItemSelected(item);
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (infoMenu.onOptionsItemSelected(item))   return true;
  return super.onOptionsItemSelected(item);
}"
95298,"@Override public boolean onOptionsItemSelected(MenuItem item){
  if (item.getItemId() == R.id.menu_help) {
    showHelpDialog();
  }
  return super.onOptionsItemSelected(item);
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.menu_help:
    showHelpDialog();
  return true;
default :
return false;
}
}"
95299,"public void setHome(msg_mission_item msg){
  this.coordinate=new LatLng(msg.y,msg.x);
  this.altitude=new Altitude(msg.z);
  myDrone.events.notifyDroneEvent(DroneEventsType.HOME);
}","public void setHome(msg_mission_item msg){
  this.coordinate=new LatLng(msg.x,msg.y);
  this.altitude=new Altitude(msg.z);
  myDrone.events.notifyDroneEvent(DroneEventsType.HOME);
}"
95300,"private List<MissionItem> getSublistToRotateUp(){
  int from=itens.indexOf(selection.get(0));
  int to=from;
  while (selection.contains(itens.get(++to))) {
    if (itens.size() < to + 2)     return itens.subList(0,0);
  }
  return itens.subList(from,to + 1);
}","private List<MissionItem> getSublistToRotateUp(){
  int from=itens.indexOf(selection.get(0));
  int to=from;
  do {
    if (itens.size() < to + 2)     return itens.subList(0,0);
  }
 while (selection.contains(itens.get(++to)));
  return itens.subList(from,to + 1);
}"
95301,"@Override public void onAttach(Activity activity){
  parent=(ConfigurationActivity)activity;
  super.onAttach(activity);
}","@Override public void onAttach(Activity activity){
  parent=(ConfigurationActivity)activity;
  parent.addOnPageChangeListener(this);
  super.onAttach(activity);
}"
95302,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_configuration);
  final ConfigurationPagerAdapter pagerAdapter=new ConfigurationPagerAdapter(getApplicationContext(),getFragmentManager());
  final ViewPager viewPager=(ViewPager)findViewById(R.id.configuration_pager);
  viewPager.setAdapter(pagerAdapter);
  final TabPageIndicator tabIndicator=(TabPageIndicator)findViewById(R.id.configuration_tab_strip);
  tabIndicator.setViewPager(viewPager);
  final ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  Intent intent=getIntent();
  String stringExtra=intent.getStringExtra(SCREEN_INTENT);
  if (SETTINGS.equalsIgnoreCase(stringExtra)) {
    viewPager.setCurrentItem(0);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_configuration);
  final ConfigurationPagerAdapter pagerAdapter=new ConfigurationPagerAdapter(getApplicationContext(),getFragmentManager());
  final ViewPager viewPager=(ViewPager)findViewById(R.id.configuration_pager);
  viewPager.setAdapter(pagerAdapter);
  final TabPageIndicator tabIndicator=(TabPageIndicator)findViewById(R.id.configuration_tab_strip);
  tabIndicator.setViewPager(viewPager);
  tabIndicator.setOnPageChangeListener(this);
  final ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  Intent intent=getIntent();
  String stringExtra=intent.getStringExtra(SCREEN_INTENT);
  if (SETTINGS.equalsIgnoreCase(stringExtra)) {
    viewPager.setCurrentItem(0);
  }
}"
95303,"public void setParamValueByName(String paramName,double value){
  for (  Parameter param : calParameterItems) {
    if (param.name.contentEquals(paramName)) {
      param.value=value;
      Log.d(""String_Node_Str"",param.name + ""String_Node_Str"" + String.valueOf(value));
      return;
    }
  }
}","public void setParamValueByName(String paramName,double value){
  for (  Parameter param : calParameterItems) {
    if (param.name.contentEquals(paramName)) {
      param.value=value;
      return;
    }
  }
}"
95304,"@Override public void onStop(){
  drone.events.removeDroneListener(this);
  MavLinkStreamRates.setupStreamRatesFromPref((DroidPlannerApp)getActivity().getApplication());
  super.onStop();
}","@Override public void onStop(){
  drone.events.removeDroneListener(this);
  resetDataStreamingForRcSetup();
  super.onStop();
}"
95305,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_configuration);
  final ConfigurationPagerAdapter pagerAdapter=new ConfigurationPagerAdapter(getApplicationContext(),getFragmentManager());
  final ViewPager viewPager=(ViewPager)findViewById(R.id.configuration_pager);
  viewPager.setAdapter(pagerAdapter);
  final TabPageIndicator tabIndicator=(TabPageIndicator)findViewById(R.id.configuration_tab_strip);
  tabIndicator.setViewPager(viewPager);
  tabIndicator.setOnPageChangeListener(this);
  final ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  Intent intent=getIntent();
  String stringExtra=intent.getStringExtra(SCREEN_INTENT);
  if (SETTINGS.equalsIgnoreCase(stringExtra)) {
    viewPager.setCurrentItem(0);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_configuration);
  final ConfigurationPagerAdapter pagerAdapter=new ConfigurationPagerAdapter(getApplicationContext(),getFragmentManager());
  final ViewPager viewPager=(ViewPager)findViewById(R.id.configuration_pager);
  viewPager.setAdapter(pagerAdapter);
  this.viewPager=viewPager;
  final TabPageIndicator tabIndicator=(TabPageIndicator)findViewById(R.id.configuration_tab_strip);
  tabIndicator.setViewPager(viewPager);
  tabIndicator.setOnPageChangeListener(this);
  final ActionBar actionBar=getActionBar();
  if (actionBar != null) {
    actionBar.setDisplayHomeAsUpEnabled(true);
  }
  Intent intent=getIntent();
  String stringExtra=intent.getStringExtra(SCREEN_INTENT);
  if (SETTINGS.equalsIgnoreCase(stringExtra)) {
    viewPager.setCurrentItem(0);
  }
}"
95306,"@Override public void onPageScrollStateChanged(int arg0){
}","@Override public void onPageScrollStateChanged(int arg0){
  if (arg0 == ViewPager.SCROLL_STATE_IDLE) {
    onPageSelected(viewPager.getCurrentItem());
  }
}"
95307,"@Override public void onPause(){
  MavLinkStreamRates.setupStreamRatesFromPref((DroidPlannerApp)getActivity().getApplication());
  drone.events.removeDroneListener(this);
  super.onPause();
}","@Override public void onPause(){
  drone.events.removeDroneListener(this);
  super.onPause();
}"
95308,"@Override public void onResume(){
  drone.events.addDroneListener(this);
  setupDataStreamingForRcSetup();
  super.onResume();
}","@Override public void onResume(){
  drone.events.addDroneListener(this);
  super.onResume();
}"
95309,"@Override public void onDroneEvent(DroneEventsType event,Drone drone){
switch (event) {
case RC_IN:
    onNewInputRcData();
  break;
case RC_OUT:
break;
case PARAMETER:
rcParameters.processReceivedParam();
break;
default :
break;
}
}","@Override public void onDroneEvent(DroneEventsType event,Drone drone){
switch (event) {
case RC_IN:
    Log.d(""String_Node_Str"",""String_Node_Str"");
  onNewInputRcData();
break;
case RC_OUT:
break;
case PARAMETER:
rcParameters.processReceivedParam();
break;
default :
break;
}
}"
95310,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_editor);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayHomeAsUpEnabled(true);
  fragmentManager=getFragmentManager();
  planningMapFragment=((EditorMapFragment)fragmentManager.findFragmentById(R.id.mapFragment));
  gestureMapFragment=((GestureMapFragment)fragmentManager.findFragmentById(R.id.gestureMapFragment));
  editorToolsFragment=(EditorToolsFragment)fragmentManager.findFragmentById(R.id.editorToolsFragment);
  missionListFragment=(EditorListFragment)fragmentManager.findFragmentById(R.id.missionFragment1);
  infoView=(TextView)findViewById(R.id.editorInfoWindow);
  removeItemDetail();
  mission=drone.mission;
  gestureMapFragment.setOnPathFinishedListner(this);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_editor);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayHomeAsUpEnabled(true);
  fragmentManager=getFragmentManager();
  planningMapFragment=((EditorMapFragment)fragmentManager.findFragmentById(R.id.mapFragment));
  gestureMapFragment=((GestureMapFragment)fragmentManager.findFragmentById(R.id.gestureMapFragment));
  editorToolsFragment=(EditorToolsFragment)fragmentManager.findFragmentById(R.id.editorToolsFragment);
  missionListFragment=(EditorListFragment)fragmentManager.findFragmentById(R.id.missionFragment1);
  infoView=(TextView)findViewById(R.id.editorInfoWindow);
  removeItemDetail();
  mission=drone.mission;
  gestureMapFragment.setOnPathFinishedListner(this);
  planningMapFragment.update();
}"
95311,"public void changeSetupPanel(int step){
  calibStep=step;
switch (step) {
case 0:
    setupPanel=new FragmentSetupRCMenu();
  ((FragmentSetupRCMenu)setupPanel).rcSetupFragment=this;
break;
case 1:
setupPanel=new FragmentSetupRCMinMax();
((FragmentSetupRCMinMax)setupPanel).rcSetupFragment=this;
break;
case 2:
setupPanel=new FragmentSetupRCMiddle();
((FragmentSetupRCMiddle)setupPanel).rcSetupFragment=this;
break;
case 3:
setupPanel=new FragmentSetupRCCompleted();
((FragmentSetupRCCompleted)setupPanel).rcSetupFragment=this;
break;
case 5:
setupPanel=new FragmentSetupRCOptions();
((FragmentSetupRCOptions)setupPanel).rcSetupFragment=this;
break;
}
fragmentManager.beginTransaction().replace(R.id.fragment_setup_rc,setupPanel).commit();
if (btnCalibrate != null) {
if (step > 0) {
btnCalibrate.setText(R.string.rc_btn_cancel);
btnCalibrate.setVisibility(View.VISIBLE);
}
 else {
btnCalibrate.setVisibility(View.GONE);
}
}
}","public void changeSetupPanel(int step){
  calibStep=step;
switch (step) {
case 0:
    setupPanel=new FragmentSetupRCMenu();
  ((FragmentSetupRCMenu)setupPanel).rcSetupFragment=this;
break;
case 1:
setupPanel=new FragmentSetupRCMinMax();
((FragmentSetupRCMinMax)setupPanel).rcSetupFragment=this;
break;
case 2:
setupPanel=new FragmentSetupRCMiddle();
((FragmentSetupRCMiddle)setupPanel).rcSetupFragment=this;
break;
case 3:
setupPanel=new FragmentSetupRCCompleted();
((FragmentSetupRCCompleted)setupPanel).rcSetupFragment=this;
break;
case 4:
setupPanel=new FragmentSetupRCFailsafe();
((FragmentSetupRCFailsafe)setupPanel).rcSetupFragment=this;
break;
case 5:
setupPanel=new FragmentSetupRCOptions();
((FragmentSetupRCOptions)setupPanel).rcSetupFragment=this;
break;
}
fragmentManager.beginTransaction().replace(R.id.fragment_setup_rc,setupPanel).commit();
if (btnCalibrate != null) {
if (step > 0) {
btnCalibrate.setText(R.string.rc_btn_cancel);
btnCalibrate.setVisibility(View.VISIBLE);
}
 else {
btnCalibrate.setVisibility(View.GONE);
}
}
}"
95312,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  drone=((DroidPlannerApp)getActivity().getApplication()).drone;
  View view=inflater.inflate(R.layout.fragment_setup_rc,container,false);
  Fragment defPanel=fragmentManager.findFragmentById(R.id.fragment_setup_rc);
  if (defPanel == null) {
    defPanel=new FragmentSetupRCMenu();
    ((FragmentSetupRCMenu)defPanel).rcSetupFragment=this;
    fragmentManager.beginTransaction().add(R.id.fragment_setup_rc,defPanel).commit();
  }
  setupLocalViews(view);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  drone=((DroidPlannerApp)getActivity().getApplication()).drone;
  View view=inflater.inflate(R.layout.fragment_setup_rc,container,false);
  Fragment defPanel=fragmentManager.findFragmentById(R.id.fragment_setup_rc);
  if (defPanel == null) {
    defPanel=new FragmentSetupRCMenu();
    ((FragmentSetupRCMenu)defPanel).rcSetupFragment=this;
    fragmentManager.beginTransaction().add(R.id.fragment_setup_rc,defPanel).commit();
  }
 else {
    cancel();
  }
  setupLocalViews(view);
  return view;
}"
95313,"@Override public void onDroneEvent(DroneEventsType event,Drone drone){
}","@Override public void onDroneEvent(DroneEventsType event,Drone drone){
  super.onDroneEvent(event,drone);
}"
95314,"@Override public void onDroneEvent(DroneEventsType event,Drone drone){
switch (event) {
case MISSION:
    if (itemDetailFragment != null) {
      if (!drone.mission.hasItem(itemDetailFragment.getItem())) {
        removeItemDetail();
      }
    }
  break;
default :
break;
}
}","@Override public void onDroneEvent(DroneEventsType event,Drone drone){
  super.onDroneEvent(event,drone);
switch (event) {
case MISSION:
    if (itemDetailFragment != null) {
      if (!drone.mission.hasItem(itemDetailFragment.getItem())) {
        removeItemDetail();
      }
    }
  break;
default :
break;
}
}"
95315,"@Override public void onResume(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  if (this.drone == null) {
    this.drone=((SuperActivity)this.context).drone;
    if (this.drone == null)     Log.d(""String_Node_Str"",""String_Node_Str"");
 else     Log.d(""String_Node_Str"",""String_Node_Str"");
  }
  super.onResume();
}","@Override public void onResume(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  this.drone=((SuperActivity)this.context).drone;
  sysLink=new CheckListSysLink(this.drone);
  if (this.drone == null) {
    this.drone=((SuperActivity)this.context).drone;
    if (this.drone == null)     Log.d(""String_Node_Str"",""String_Node_Str"");
 else     Log.d(""String_Node_Str"",""String_Node_Str"");
  }
  super.onResume();
}"
95316,"@Override public void onAttach(Activity activity){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  this.context=activity;
  this.drone=((SuperActivity)activity).drone;
  sysLink=new CheckListSysLink(this.drone);
  if (this.context == null)   Log.d(""String_Node_Str"",""String_Node_Str"");
  if (this.drone == null)   Log.d(""String_Node_Str"",""String_Node_Str"");
  loadXMLChecklist();
  prepareListData();
  super.onAttach(activity);
}","@Override public void onAttach(Activity activity){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  this.context=activity;
  if (this.context == null)   Log.d(""String_Node_Str"",""String_Node_Str"");
  if (this.drone == null)   Log.d(""String_Node_Str"",""String_Node_Str"");
  loadXMLChecklist();
  prepareListData();
  super.onAttach(activity);
}"
95317,"public ChecklistFragment(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
}","public ChecklistFragment(){
}"
95318,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_flight);
  fragmentManager=getFragmentManager();
  modeInfoPanel=fragmentManager.findFragmentById(R.id.modeInfoPanel);
  failsafeTextView=findViewById(R.id.failsafeTextView);
  drone.state.addFlightStateListner(this);
  drone.state.addModeChangedListener(this);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_flight);
  fragmentManager=getFragmentManager();
  modeInfoPanel=fragmentManager.findFragmentById(R.id.modeInfoPanel);
  failsafeTextView=findViewById(R.id.failsafeTextView);
}"
95319,"@Override protected void onResume(){
  super.onResume();
  onModeChanged();
}","@Override protected void onResume(){
  super.onResume();
  drone.state.addFlightStateListner(this);
  drone.state.addModeChangedListener(this);
  onModeChanged();
}"
95320,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_flight);
  fragmentManager=getFragmentManager();
  modeInfoPanel=fragmentManager.findFragmentById(R.id.modeInfoPanel);
  failsafeTextView=findViewById(R.id.failsafeTextView);
  drone.state.addFlightStateListner(this);
  drone.state.addModeChangedListener(this);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_flight);
  fragmentManager=getFragmentManager();
  modeInfoPanel=fragmentManager.findFragmentById(R.id.modeInfoPanel);
  failsafeTextView=findViewById(R.id.failsafeTextView);
}"
95321,"@Override protected void onResume(){
  super.onResume();
  onModeChanged();
}","@Override protected void onResume(){
  super.onResume();
  drone.state.addFlightStateListner(this);
  drone.state.addModeChangedListener(this);
  onModeChanged();
}"
95322,"public msg_mission_item packMavlink(){
  msg_mission_item mavMsg=new msg_mission_item();
  mavMsg.autocontinue=1;
  mavMsg.current=1;
  mavMsg.target_component=1;
  mavMsg.target_system=1;
  if (isValid()) {
    mavMsg.x=(float)getCoord().longitude;
    mavMsg.y=(float)getCoord().latitude;
    mavMsg.z=(float)getAltitude().valueInMeters();
  }
  return mavMsg;
}","public msg_mission_item packMavlink(){
  msg_mission_item mavMsg=new msg_mission_item();
  mavMsg.autocontinue=1;
  mavMsg.current=1;
  mavMsg.target_component=1;
  mavMsg.target_system=1;
  if (isValid()) {
    mavMsg.x=(float)getCoord().latitude;
    mavMsg.y=(float)getCoord().longitude;
    mavMsg.z=(float)getAltitude().valueInMeters();
  }
  return mavMsg;
}"
95323,"/** 
 * Write a list of waypoints to the MAV. The callback will return the status of this operation
 * @param data waypoints to be written
 */
public void writeWaypoints(List<msg_mission_item> data){
  if ((mission != null)) {
    mission.clear();
    mission.addAll(data);
    writeIndex=0;
    state=waypointStates.WRITTING_WP;
    MavLinkWaypoint.sendWaypointCount(myDrone,mission.size());
  }
}","/** 
 * Write a list of waypoints to the MAV. The callback will return the status of this operation
 * @param data waypoints to be written
 */
public void writeWaypoints(List<msg_mission_item> data){
  if ((mission != null)) {
    updateMsgIndexes(data);
    mission.clear();
    mission.addAll(data);
    writeIndex=0;
    state=waypointStates.WRITTING_WP;
    MavLinkWaypoint.sendWaypointCount(myDrone,mission.size());
  }
}"
95324,"@Override public msg_mission_item packMissionItem(){
  msg_mission_item mavMsg=new msg_mission_item();
  mavMsg.autocontinue=1;
  mavMsg.target_component=1;
  mavMsg.target_system=1;
  mavMsg.x=(float)getCoordinate().longitude;
  mavMsg.y=(float)getCoordinate().latitude;
  mavMsg.z=(float)getAltitude().valueInMeters();
  return mavMsg;
}","@Override public msg_mission_item packMissionItem(){
  msg_mission_item mavMsg=new msg_mission_item();
  mavMsg.autocontinue=1;
  mavMsg.target_component=1;
  mavMsg.target_system=1;
  mavMsg.x=(float)getCoordinate().latitude;
  mavMsg.y=(float)getCoordinate().longitude;
  mavMsg.z=(float)getAltitude().valueInMeters();
  return mavMsg;
}"
95325,"@Override protected void openConnection() throws UnknownHostException, IOException {
  Log.d(BLUE,""String_Node_Str"");
  BluetoothDevice device=findBluetoothDevice();
  bluetoothSocket=device.createInsecureRfcommSocketToServiceRecord(UUID.fromString(UUID_SPP_DEVICE));
  mBluetoothAdapter.cancelDiscovery();
  bluetoothSocket.connect();
  out=bluetoothSocket.getOutputStream();
  in=bluetoothSocket.getInputStream();
}","@Override protected void openConnection() throws UnknownHostException, IOException {
  Log.d(BLUE,""String_Node_Str"");
  BluetoothDevice device=findBluetoothDevice();
  if (Build.VERSION.SDK_INT < 9) {
    try {
      bluetoothSocket=device.createRfcommSocketToServiceRecord(UUID.fromString(UUID_SPP_DEVICE));
    }
 catch (    IOException e1) {
      e1.printStackTrace();
    }
  }
 else {
    Method BTSocketMethod=null;
    try {
      BTSocketMethod=device.getClass().getMethod(""String_Node_Str"",new Class[]{UUID.class});
    }
 catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
    try {
      bluetoothSocket=(BluetoothSocket)BTSocketMethod.invoke(device,(UUID)UUID.fromString(UUID_SPP_DEVICE));
    }
 catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
  }
  mBluetoothAdapter.cancelDiscovery();
  bluetoothSocket.connect();
  Log.d(BLUE,""String_Node_Str"");
  out=bluetoothSocket.getOutputStream();
  in=bluetoothSocket.getInputStream();
}"
95326,"@SuppressLint(""String_Node_Str"") private BluetoothDevice findBluetoothDevice() throws UnknownHostException {
  Set<BluetoothDevice> pairedDevices=mBluetoothAdapter.getBondedDevices();
  if (pairedDevices.size() > 0) {
    for (    BluetoothDevice device : pairedDevices) {
      Log.d(BLUE,device.getName() + ""String_Node_Str"" + device.getAddress()+ ""String_Node_Str"");
      for (      ParcelUuid id : device.getUuids()) {
        Log.d(BLUE,""String_Node_Str"" + id.toString());
        if (id.toString().equalsIgnoreCase(UUID_SPP_DEVICE)) {
          return device;
        }
      }
    }
  }
  throw new UnknownHostException(""String_Node_Str"");
}","@SuppressLint(""String_Node_Str"") private BluetoothDevice findBluetoothDevice() throws UnknownHostException {
  Set<BluetoothDevice> pairedDevices=mBluetoothAdapter.getBondedDevices();
  if (pairedDevices.size() > 0) {
    for (    BluetoothDevice device : pairedDevices) {
      Log.d(BLUE,device.getName() + ""String_Node_Str"" + device.getAddress()+ ""String_Node_Str"");
      for (      ParcelUuid id : device.getUuids()) {
        Log.d(BLUE,""String_Node_Str"" + id.toString());
        if (id.toString().equalsIgnoreCase(UUID_SPP_DEVICE)) {
          Log.d(BLUE,""String_Node_Str"" + device.getName() + ""String_Node_Str""+ id.toString());
          return device;
        }
      }
    }
  }
  throw new UnknownHostException(""String_Node_Str"");
}"
95327,"@Override protected void closeConnection() throws IOException {
  bluetoothSocket.close();
}","@Override protected void closeConnection() throws IOException {
  bluetoothSocket.close();
  Log.d(BLUE,""String_Node_Str"");
}"
95328,"public void addWaypoint(LatLng point,Double alt){
  waypoints.add(new Waypoint(point,alt));
}","public void addWaypoint(LatLng point,Double alt){
  waypoints.add(new Waypoint(point,alt));
  onMissionUpdate();
}"
95329,"public void addWaypointsWithDefaultAltitude(List<LatLng> points){
  for (  LatLng point : points) {
    addWaypoint(point,defaultAlt);
  }
}","public void addWaypointsWithDefaultAltitude(List<LatLng> points){
  for (  LatLng point : points) {
    waypoints.add(new Waypoint(point,defaultAlt));
  }
  onMissionUpdate();
}"
95330,"@Override public boolean onMarkerClick(GenericWaypoint wp){
  DialogMissionFactory.getDialog(wp,this,mission);
  return true;
}","@Override public boolean onMarkerClick(GenericWaypoint wp){
  return true;
}"
95331,"public void onModeChanged(){
  if (drone.state.getMode() != ApmModes.ROTOR_GUIDED) {
    if (drone.guidedPoint.isCoordValid()) {
      markers.clear();
      drone.guidedPoint.invalidateCoord();
    }
  }
}","public void onModeChanged(){
  if (drone.state.getMode() != ApmModes.ROTOR_GUIDED) {
    if (drone.guidedPoint.isCoordValid()) {
      markers.clean();
      drone.guidedPoint.invalidateCoord();
    }
  }
}"
95332,"private void checkForWaypointMarkerMoving(MarkerSource source,Marker marker,boolean dragging){
  if (GenericWaypoint.class.isInstance(source)) {
    LatLng position=marker.getPosition();
    GenericWaypoint waypoint=(GenericWaypoint)source;
    waypoint.setCoord(position);
    if (dragging)     waypoint.updateDistanceFromPrevPoint();
 else     waypoint.setPrevPoint(mission.getWaypoints());
    updateInfoWindow(waypoint,marker);
    missionPath.update(mission);
    mListener.onMovingWaypoint(waypoint,position);
  }
}","private void checkForWaypointMarkerMoving(MarkerSource source,Marker marker,boolean dragging){
  if (GenericWaypoint.class.isInstance(source)) {
    LatLng position=marker.getPosition();
    GenericWaypoint waypoint=(GenericWaypoint)source;
    waypoint.setCoordinate(position);
    missionPath.update(mission);
    mListener.onMovingWaypoint(waypoint,position);
  }
}"
95333,"public void update(){
  markers.clear();
  markers.updateMarker(drone.home.getHome(),false,context);
  markers.updateMarkers(mission.getMarkers(),true,context);
  missionPath.update(mission);
}","public void update(){
  markers.clean();
  Home home=drone.home.getHome();
  if (home.isValid()) {
    markers.updateMarker(home,false,context);
  }
  markers.updateMarkers(mission.getMarkers(),true,context);
  missionPath.update(mission);
}"
95334,"public static MarkerOptions build(Home home){
  return new MarkerOptions().position(home.getCoord()).visible(home.isValid()).title(""String_Node_Str"").snippet(String.format(Locale.ENGLISH,""String_Node_Str"",home.getHeight())).anchor((float)0.5,(float)0.5).icon(BitmapDescriptorFactory.fromResource(drawable.ic_menu_home)).title(""String_Node_Str"");
}","public static MarkerOptions build(Home home){
  return new MarkerOptions().position(home.getCoord()).visible(home.isValid()).title(""String_Node_Str"").snippet(home.getAltitude().toString()).anchor((float)0.5,(float)0.5).icon(BitmapDescriptorFactory.fromResource(drawable.ic_menu_home)).title(""String_Node_Str"");
}"
95335,"public static void update(Marker marker,Home home){
  marker.setVisible(home.isValid());
  marker.setPosition(home.getCoord());
  marker.setSnippet(""String_Node_Str"" + home.getHeight());
}","public static void update(Marker marker,Home home){
  marker.setVisible(home.isValid());
  marker.setPosition(home.getCoord());
  marker.setSnippet(""String_Node_Str"" + home.getAltitude());
}"
95336,"protected View buildView(){
  super.buildView();
  loiterCCW=(CheckBox)view.findViewById(R.string.loiter_ccw);
  if (wp.getRadius() < 0) {
    loiterCCW.setChecked(true);
  }
 else {
    loiterCCW.setChecked(false);
  }
  loiterCCW.setOnCheckedChangeListener(this);
  loiterRadiusSeekBar=(SeekBarWithText)view.findViewById(R.id.loiterRadius);
  loiterRadiusSeekBar.setOnChangedListner(this);
  loiterRadiusSeekBar.setAbsValue(wp.getRadius());
  yawSeekBar=(SeekBarWithText)view.findViewById(R.id.waypointAngle);
  yawSeekBar.setValue(wp.getAngle());
  yawSeekBar.setOnChangedListner(this);
  return view;
}","protected View buildView(){
  super.buildView();
  item=(LoiterInfinite)wp;
  loiterCCW=(CheckBox)view.findViewById(R.string.loiter_ccw);
  if (item.getRadius() < 0) {
    loiterCCW.setChecked(true);
  }
 else {
    loiterCCW.setChecked(false);
  }
  loiterCCW.setOnCheckedChangeListener(this);
  loiterRadiusSeekBar=(SeekBarWithText)view.findViewById(R.id.loiterRadius);
  loiterRadiusSeekBar.setOnChangedListner(this);
  loiterRadiusSeekBar.setAbsValue(item.getRadius());
  yawSeekBar=(SeekBarWithText)view.findViewById(R.id.waypointAngle);
  yawSeekBar.setValue(item.getAngle());
  yawSeekBar.setOnChangedListner(this);
  return view;
}"
95337,"@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
  wp.setRadius(loiterRadiusSeekBar.getValue());
  if (loiterCCW.isChecked()) {
    wp.setRadius(wp.getRadius() * -1.0);
  }
}","@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
  item.setRadius(loiterRadiusSeekBar.getValue());
  if (loiterCCW.isChecked()) {
    item.setRadius(item.getRadius() * -1.0);
  }
}"
95338,"@Override public void onSeekBarChanged(){
  wp.setRadius(loiterRadiusSeekBar.getValue());
  if (loiterCCW.isChecked()) {
    wp.setRadius(wp.getRadius() * -1.0);
  }
  wp.setAngle(yawSeekBar.getValue());
}","@Override public void onSeekBarChanged(){
  item.setRadius(loiterRadiusSeekBar.getValue());
  if (loiterCCW.isChecked()) {
    item.setRadius(item.getRadius() * -1.0);
  }
  item.setAngle(yawSeekBar.getValue());
}"
95339,"protected View buildView(){
  super.buildView();
  loiterCCW=(CheckBox)view.findViewById(R.string.loiter_ccw);
  if (wp.getRadius() < 0) {
    loiterCCW.setChecked(true);
  }
 else {
    loiterCCW.setChecked(false);
  }
  loiterCCW.setOnCheckedChangeListener(this);
  altitudeSeekBar=(SeekBarWithText)view.findViewById(R.id.altitudeView);
  altitudeSeekBar.setValue(wp.getAltitude().valueInMeters());
  altitudeSeekBar.setOnChangedListner(this);
  loiterTurnSeekBar=(SeekBarWithText)view.findViewById(R.id.loiterTurn);
  loiterTurnSeekBar.setOnChangedListner(this);
  loiterTurnSeekBar.setValue(wp.getTurns());
  loiterRadiusSeekBar=(SeekBarWithText)view.findViewById(R.id.loiterRadius);
  loiterRadiusSeekBar.setAbsValue(wp.getRadius());
  loiterRadiusSeekBar.setOnChangedListner(this);
  yawSeekBar=(SeekBarWithText)view.findViewById(R.id.waypointAngle);
  yawSeekBar.setValue(wp.getAngle());
  yawSeekBar.setOnChangedListner(this);
  return view;
}","protected View buildView(){
  super.buildView();
  item=(LoiterTurns)wp;
  loiterCCW=(CheckBox)view.findViewById(R.string.loiter_ccw);
  if (item.getRadius() < 0) {
    loiterCCW.setChecked(true);
  }
 else {
    loiterCCW.setChecked(false);
  }
  loiterCCW.setOnCheckedChangeListener(this);
  altitudeSeekBar=(SeekBarWithText)view.findViewById(R.id.altitudeView);
  altitudeSeekBar.setValue(item.getAltitude().valueInMeters());
  altitudeSeekBar.setOnChangedListner(this);
  loiterTurnSeekBar=(SeekBarWithText)view.findViewById(R.id.loiterTurn);
  loiterTurnSeekBar.setOnChangedListner(this);
  loiterTurnSeekBar.setValue(item.getTurns());
  loiterRadiusSeekBar=(SeekBarWithText)view.findViewById(R.id.loiterRadius);
  loiterRadiusSeekBar.setAbsValue(item.getRadius());
  loiterRadiusSeekBar.setOnChangedListner(this);
  yawSeekBar=(SeekBarWithText)view.findViewById(R.id.waypointAngle);
  yawSeekBar.setValue(item.getAngle());
  yawSeekBar.setOnChangedListner(this);
  return view;
}"
95340,"@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
  wp.setRadius(loiterRadiusSeekBar.getValue());
  if (loiterCCW.isChecked()) {
    wp.setRadius(wp.getRadius() * -1.0);
  }
}","@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
  item.setRadius(loiterRadiusSeekBar.getValue());
  if (loiterCCW.isChecked()) {
    item.setRadius(item.getRadius() * -1.0);
  }
}"
95341,"@Override public void onSeekBarChanged(){
  wp.getAltitude().set(altitudeSeekBar.getValue());
  wp.setTurns((int)loiterTurnSeekBar.getValue());
  wp.setRadius(loiterRadiusSeekBar.getValue());
  if (loiterCCW.isChecked()) {
    wp.setRadius(wp.getRadius() * -1.0);
  }
  wp.setAngle(yawSeekBar.getValue());
}","@Override public void onSeekBarChanged(){
  item.getAltitude().set(altitudeSeekBar.getValue());
  item.setTurns((int)loiterTurnSeekBar.getValue());
  item.setRadius(loiterRadiusSeekBar.getValue());
  if (loiterCCW.isChecked()) {
    item.setRadius(item.getRadius() * -1.0);
  }
  item.setAngle(yawSeekBar.getValue());
}"
95342,"protected View buildView(){
  super.buildView();
  loiterCCW=(CheckBox)view.findViewById(R.string.loiter_ccw);
  if (wp.getRadius() < 0) {
    loiterCCW.setChecked(true);
  }
 else {
    loiterCCW.setChecked(false);
  }
  loiterCCW.setOnCheckedChangeListener(this);
  altitudeSeekBar=(SeekBarWithText)view.findViewById(R.id.altitudeView);
  altitudeSeekBar.setValue(wp.getAltitude().valueInMeters());
  altitudeSeekBar.setOnChangedListner(this);
  loiterTimeSeekBar=(SeekBarWithText)view.findViewById(R.id.loiterTime);
  loiterTimeSeekBar.setOnChangedListner(this);
  loiterTimeSeekBar.setValue(wp.getTime());
  loiterRadiusSeekBar=(SeekBarWithText)view.findViewById(R.id.loiterRadius);
  loiterRadiusSeekBar.setAbsValue(wp.getRadius());
  loiterRadiusSeekBar.setOnChangedListner(this);
  yawSeekBar=(SeekBarWithText)view.findViewById(R.id.waypointAngle);
  yawSeekBar.setValue(wp.getAngle());
  yawSeekBar.setOnChangedListner(this);
  return view;
}","protected View buildView(){
  super.buildView();
  item=(LoiterTime)wp;
  loiterCCW=(CheckBox)view.findViewById(R.string.loiter_ccw);
  if (item.getRadius() < 0) {
    loiterCCW.setChecked(true);
  }
 else {
    loiterCCW.setChecked(false);
  }
  loiterCCW.setOnCheckedChangeListener(this);
  altitudeSeekBar=(SeekBarWithText)view.findViewById(R.id.altitudeView);
  altitudeSeekBar.setValue(item.getAltitude().valueInMeters());
  altitudeSeekBar.setOnChangedListner(this);
  loiterTimeSeekBar=(SeekBarWithText)view.findViewById(R.id.loiterTime);
  loiterTimeSeekBar.setOnChangedListner(this);
  loiterTimeSeekBar.setValue(item.getTime());
  loiterRadiusSeekBar=(SeekBarWithText)view.findViewById(R.id.loiterRadius);
  loiterRadiusSeekBar.setAbsValue(item.getRadius());
  loiterRadiusSeekBar.setOnChangedListner(this);
  yawSeekBar=(SeekBarWithText)view.findViewById(R.id.waypointAngle);
  yawSeekBar.setValue(item.getAngle());
  yawSeekBar.setOnChangedListner(this);
  return view;
}"
95343,"@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
  wp.setRadius(loiterRadiusSeekBar.getValue());
  if (loiterCCW.isChecked()) {
    wp.setRadius(wp.getRadius() * -1.0);
  }
}","@Override public void onCheckedChanged(CompoundButton buttonView,boolean isChecked){
  item.setRadius(loiterRadiusSeekBar.getValue());
  if (loiterCCW.isChecked()) {
    item.setRadius(item.getRadius() * -1.0);
  }
}"
95344,"@Override public void onSeekBarChanged(){
  wp.getAltitude().set(altitudeSeekBar.getValue());
  wp.setTime(loiterTimeSeekBar.getValue());
  wp.setRadius(loiterRadiusSeekBar.getValue());
  if (loiterCCW.isChecked()) {
    wp.setRadius(wp.getRadius() * -1.0);
  }
  wp.setAngle(yawSeekBar.getValue());
}","@Override public void onSeekBarChanged(){
  item.getAltitude().set(altitudeSeekBar.getValue());
  item.setTime(loiterTimeSeekBar.getValue());
  item.setRadius(loiterRadiusSeekBar.getValue());
  if (loiterCCW.isChecked()) {
    item.setRadius(item.getRadius() * -1.0);
  }
  item.setAngle(yawSeekBar.getValue());
}"
95345,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  screenOrientation.unlock();
  app.conectionListner=this;
  drone.MavClient.queryConnectionState();
  infoMenu=new InfoMenu(drone);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  screenOrientation.unlock();
  infoMenu=new InfoMenu(drone);
}"
95346,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_new_editor);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayHomeAsUpEnabled(true);
  planningMapFragment=((PlanningMapFragment)getFragmentManager().findFragmentById(R.id.mapFragment));
  gestureMapFragment=((GestureMapFragment)getFragmentManager().findFragmentById(R.id.gestureMapFragment));
  missionFragment=(MissionFragment)getFragmentManager().findFragmentById(R.id.missionFragment1);
  editorToolsFragment=(EditorToolsFragment)getFragmentManager().findFragmentById(R.id.editorToolsFragment);
  mission=drone.mission;
  gestureMapFragment.setOnPathFinishedListner(this);
  missionFragment.setMission(mission);
  planningMapFragment.setMission(mission);
  mission.addOnWaypointsChangedListner(missionFragment);
  mission.addOnWaypointsChangedListner(planningMapFragment);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_new_editor);
  ActionBar actionBar=getActionBar();
  actionBar.setDisplayHomeAsUpEnabled(true);
  planningMapFragment=((PlanningMapFragment)getFragmentManager().findFragmentById(R.id.mapFragment));
  gestureMapFragment=((GestureMapFragment)getFragmentManager().findFragmentById(R.id.gestureMapFragment));
  missionFragment=(MissionFragment)getFragmentManager().findFragmentById(R.id.missionFragment1);
  editorToolsFragment=(EditorToolsFragment)getFragmentManager().findFragmentById(R.id.editorToolsFragment);
  mission=drone.mission;
  gestureMapFragment.setOnPathFinishedListner(this);
  missionFragment.setMission(mission);
  planningMapFragment.setMission(mission);
  mission.addOnWaypointsChangedListner(missionFragment);
  mission.addOnWaypointsChangedListner(planningMapFragment);
  mission.onWaypointsUpdate();
}"
95347,"@Override public void onWaypointsUpdate(){
  for (  OnWaypointChangedListner listner : missionListner) {
    listner.onWaypointsUpdate();
  }
}","@Override public void onWaypointsUpdate(){
  for (  OnWaypointChangedListner listner : missionListner) {
    if (listner != null) {
      listner.onWaypointsUpdate();
    }
  }
}"
95348,"private void addOneFootprint(LatLng latLng,SurveyData surveyData){
  double diag=Math.hypot(surveyData.getLateralFootPrint().valueInMeters(),surveyData.getLongitudinalFootPrint().valueInMeters());
  cameraOverlays.add(mMap.addPolygon(new PolygonOptions().add(GeoTools.newCoordFromBearingAndDistance(latLng,surveyData.getAngle() + 45,diag),GeoTools.newCoordFromBearingAndDistance(latLng,surveyData.getAngle() + 90 + 45,diag),GeoTools.newCoordFromBearingAndDistance(latLng,surveyData.getAngle() + 180 + 45,diag),GeoTools.newCoordFromBearingAndDistance(latLng,surveyData.getAngle() + 270 + 45,diag)).fillColor(Color.argb(40,0,0,127)).strokeWidth(0)));
}","private void addOneFootprint(LatLng latLng,SurveyData surveyData){
  double lng=surveyData.getLateralFootPrint().valueInMeters();
  double lateral=surveyData.getLongitudinalFootPrint().valueInMeters();
  double halfDiag=Math.hypot(lng,lateral) / 2;
  double angle=Math.toDegrees(Math.tan(lng / lateral));
  cameraOverlays.add(mMap.addPolygon(new PolygonOptions().add(GeoTools.newCoordFromBearingAndDistance(latLng,surveyData.getAngle() - angle,halfDiag),GeoTools.newCoordFromBearingAndDistance(latLng,surveyData.getAngle() + angle,halfDiag),GeoTools.newCoordFromBearingAndDistance(latLng,surveyData.getAngle() + 180 - angle,halfDiag),GeoTools.newCoordFromBearingAndDistance(latLng,surveyData.getAngle() + 180 + angle,halfDiag)).fillColor(Color.argb(40,0,0,127)).strokeWidth(1).strokeColor(Color.argb(127,0,0,255))));
}"
95349,"/** 
 * Copied from: http://stackoverflow.com/questions/18335642/how-to-draw-text-in-default-marker-of-google-map-v2?lq=1
 */
private static Bitmap drawTextToBitmap(Context gContext,int gResId,String gText){
  Resources resources=gContext.getResources();
  float scale=resources.getDisplayMetrics().density;
  Bitmap bitmap=BitmapFactory.decodeResource(resources,gResId);
  android.graphics.Bitmap.Config bitmapConfig=bitmap.getConfig();
  if (bitmapConfig == null) {
    bitmapConfig=android.graphics.Bitmap.Config.ARGB_8888;
  }
  bitmap=bitmap.copy(bitmapConfig,true);
  Canvas canvas=new Canvas(bitmap);
  Paint paint=new Paint(Paint.ANTI_ALIAS_FLAG);
  paint.setColor(Color.BLACK);
  paint.setTextSize((int)(15 * scale));
  paint.setShadowLayer(1f,0f,1f,Color.WHITE);
  Rect bounds=new Rect();
  paint.getTextBounds(gText,0,gText.length(),bounds);
  int x=(bitmap.getWidth() - bounds.width()) / 2;
  int y=(bitmap.getHeight() + bounds.height()) / 2;
  canvas.drawText(gText,x * scale,y * scale,paint);
  return bitmap;
}","/** 
 * Copied from: http://stackoverflow.com/questions/18335642/how-to-draw-text-in-default-marker-of-google-map-v2?lq=1
 */
private static Bitmap drawTextToBitmap(Context gContext,int gResId,String gText){
  Resources resources=gContext.getResources();
  float scale=resources.getDisplayMetrics().density;
  Bitmap bitmap=BitmapFactory.decodeResource(resources,gResId);
  android.graphics.Bitmap.Config bitmapConfig=bitmap.getConfig();
  if (bitmapConfig == null) {
    bitmapConfig=android.graphics.Bitmap.Config.ARGB_8888;
  }
  bitmap=bitmap.copy(bitmapConfig,true);
  Canvas canvas=new Canvas(bitmap);
  Paint paint=new Paint(Paint.ANTI_ALIAS_FLAG);
  paint.setColor(Color.BLACK);
  paint.setTextSize((int)(15 * scale));
  paint.setShadowLayer(1f,0f,1f,Color.WHITE);
  Rect bounds=new Rect();
  paint.getTextBounds(gText,0,gText.length(),bounds);
  int x=(bitmap.getWidth() - bounds.width()) / 2;
  int y=(bitmap.getHeight() + bounds.height()) * 5 / 12;
  canvas.drawText(gText,x,y,paint);
  return bitmap;
}"
95350,"private void checkIfPolygonIsValid(Polygon polygon) throws Exception {
  throw new Exception(""String_Node_Str"");
}","private void checkIfPolygonIsValid(Polygon polygon) throws Exception {
  if (!polygon.isValid()) {
    throw new Exception(""String_Node_Str"");
  }
}"
95351,"@Override public void onSpinnerItemSelected(Spinner spinner,int position,String text){
  CameraInfo cameraInfo;
  try {
    cameraInfo=avaliableCameras.openFile(text);
  }
 catch (  Exception e) {
    Toast.makeText(context,context.getString(R.string.error_when_opening_file),Toast.LENGTH_SHORT).show();
    cameraInfo=CameraInfoReader.getNewMockCameraInfo();
  }
  surveyData.setCameraInfo(cameraInfo);
  updateSeekBarsValues();
  updateViews();
}","@Override public void onSpinnerItemSelected(Spinner spinner,int position,String text){
  CameraInfo cameraInfo;
  try {
    cameraInfo=avaliableCameras.openFile(text);
  }
 catch (  Exception e) {
    Toast.makeText(context,context.getString(R.string.error_when_opening_file),Toast.LENGTH_SHORT).show();
    cameraInfo=CameraInfoReader.getNewMockCameraInfo();
  }
  surveyData.setCameraInfo(cameraInfo);
  updateSeekBarsValues();
  onSeekBarChanged();
}"
95352,"private void updateViews(){
  footprintTextView.setText(context.getString(R.string.footprint) + ""String_Node_Str"" + ((Double)surveyData.getLateralFootPrint()).intValue()+ ""String_Node_Str""+ ((Double)surveyData.getLongitudinalFootPrint()).intValue()+ ""String_Node_Str"");
  groundResolutionTextView.setText(String.format(""String_Node_Str"",context.getString(R.string.ground_resolution),surveyData.getGroundResolution()));
  distanceTextView.setText(context.getString(R.string.distance_between_pictures) + ""String_Node_Str"" + surveyData.getLongitudinalPictureDistance().intValue()+ ""String_Node_Str"");
  distanceBetweenLinesTextView.setText(context.getString(R.string.distance_between_lines) + ""String_Node_Str"" + surveyData.getLateralPictureDistance().intValue()+ ""String_Node_Str"");
  areaTextView.setText(context.getString(R.string.area) + ""String_Node_Str"" + polygon.getArea().intValue()+ ""String_Node_Str"");
  lengthView.setText(context.getString(R.string.mission_length) + ""String_Node_Str"" + grid.getLength()+ ""String_Node_Str"");
  numberOfPicturesView.setText(context.getString(R.string.pictures) + ""String_Node_Str"" + grid.getLength() / surveyData.getLongitudinalPictureDistance());
  numberOfStripsView.setText(context.getString(R.string.number_of_strips) + ""String_Node_Str"" + grid.getNumberOfLines());
}","private void updateViews(){
  footprintTextView.setText(context.getString(R.string.footprint) + ""String_Node_Str"" + ((Double)surveyData.getLateralFootPrint()).intValue()+ ""String_Node_Str""+ ((Double)surveyData.getLongitudinalFootPrint()).intValue()+ ""String_Node_Str"");
  groundResolutionTextView.setText(String.format(""String_Node_Str"",context.getString(R.string.ground_resolution),surveyData.getGroundResolution()));
  distanceTextView.setText(context.getString(R.string.distance_between_pictures) + ""String_Node_Str"" + surveyData.getLongitudinalPictureDistance().intValue()+ ""String_Node_Str"");
  distanceBetweenLinesTextView.setText(context.getString(R.string.distance_between_lines) + ""String_Node_Str"" + surveyData.getLateralPictureDistance().intValue()+ ""String_Node_Str"");
  areaTextView.setText(context.getString(R.string.area) + ""String_Node_Str"" + polygon.getArea().intValue()+ ""String_Node_Str"");
  lengthView.setText(context.getString(R.string.mission_length) + ""String_Node_Str"" + (int)grid.getLength()+ ""String_Node_Str"");
  numberOfPicturesView.setText(context.getString(R.string.pictures) + ""String_Node_Str"" + (int)(grid.getLength() / surveyData.getLongitudinalPictureDistance()));
  numberOfStripsView.setText(context.getString(R.string.number_of_strips) + ""String_Node_Str"" + grid.getNumberOfLines());
}"
95353,"@Override public void onSeekBarChanged(){
  surveyData.update(angleView.getValue(),altitudeView.getValue(),overlapView.getValue(),sidelapView.getValue());
  grid=gridBuilder.generate();
  updateViews();
}","@Override public void onSeekBarChanged(){
  surveyData.update(angleView.getValue(),altitudeView.getValue(),overlapView.getValue(),sidelapView.getValue());
  GridBuilder gridBuilder=new GridBuilder(polygon,surveyData,originPoint);
  grid=gridBuilder.generate();
  updateViews();
}"
95354,"@Override public void onClick(DialogInterface arg0,int which){
  if (which == Dialog.BUTTON_POSITIVE) {
    GridBuilder grid=new GridBuilder(polygon,angleView.getValue(),distanceView.getValue(),originPoint);
    onPolygonGenerated(grid.generate().getWaypoints(altitudeView.getValue()));
  }
}","@Override public void onClick(DialogInterface arg0,int which){
  if (which == Dialog.BUTTON_POSITIVE) {
    GridBuilder grid=new GridBuilder(polygon,angleView.getValue(),distanceView.getValue(),originPoint);
    try {
      onPolygonGenerated(grid.generate().getWaypoints(altitudeView.getValue()));
    }
 catch (    Exception e) {
      Toast.makeText(context,e.getMessage(),Toast.LENGTH_SHORT).show();
    }
  }
}"
95355,"public void generatePolygon(double defaultHatchAngle,double defaultHatchDistance,Polygon polygon,LatLng originPoint,double altitude,Context context){
  this.polygon=polygon;
  this.originPoint=originPoint;
  if (!polygon.isValid()) {
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  AlertDialog dialog=buildDialog(context);
  distanceView.setValue(defaultHatchDistance);
  angleView.setValue(defaultHatchAngle);
  altitudeView.setValue(altitude);
  dialog.show();
}","public void generatePolygon(double defaultHatchAngle,double defaultHatchDistance,Polygon polygon,LatLng originPoint,double altitude,Context context){
  this.context=context;
  this.polygon=polygon;
  this.originPoint=originPoint;
  if (!polygon.isValid()) {
    Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    return;
  }
  AlertDialog dialog=buildDialog(context);
  distanceView.setValue(defaultHatchDistance);
  angleView.setValue(defaultHatchAngle);
  altitudeView.setValue(altitude);
  dialog.show();
}"
95356,"@Override public void onSeekBarChanged(){
  surveyData.update(views.angleView.getValue(),views.altitudeView.getValue(),views.overlapView.getValue(),views.sidelapView.getValue());
  GridBuilder gridBuilder=new GridBuilder(polygon,surveyData,originPoint);
  grid=gridBuilder.generate();
  views.updateViews(surveyData,grid,0.0);
}","@Override public void onSeekBarChanged(){
  surveyData.update(views.angleView.getValue(),views.altitudeView.getValue(),views.overlapView.getValue(),views.sidelapView.getValue());
  GridBuilder gridBuilder=new GridBuilder(polygon,surveyData,originPoint);
  try {
    grid=gridBuilder.generate();
    views.updateViews(surveyData,grid,0.0);
  }
 catch (  Exception e) {
    Toast.makeText(context,e.getMessage(),Toast.LENGTH_SHORT).show();
    views.blank();
  }
}"
95357,"public void generateSurveyDialog(Polygon polygon,double defaultHatchAngle,LatLng lastPoint,double defaultAltitude,Context context) throws Exception {
  this.polygon=polygon;
  this.originPoint=lastPoint;
  checkIfPolygonIsValid(polygon);
  views=new SurveyDialogViews(context);
  avaliableCameras=new CameraInfoLoader(this.views.context);
  surveyData=new SurveyData(Math.floor(defaultHatchAngle),defaultAltitude);
  AlertDialog dialog=views.buildDialog(this);
  views.updateCameraSpinner(avaliableCameras.getCameraInfoList());
  dialog.show();
}","public void generateSurveyDialog(Polygon polygon,double defaultHatchAngle,LatLng lastPoint,double defaultAltitude,Context context) throws Exception {
  this.context=context;
  this.polygon=polygon;
  this.originPoint=lastPoint;
  checkIfPolygonIsValid(polygon);
  views=new SurveyDialogViews(context);
  avaliableCameras=new CameraInfoLoader(this.views.context);
  surveyData=new SurveyData(Math.floor(defaultHatchAngle),defaultAltitude);
  AlertDialog dialog=views.buildDialog(this);
  views.updateCameraSpinner(avaliableCameras.getCameraInfoList());
  dialog.show();
}"
95358,"private void drawGrid(Double lineDist){
  int lines=0;
  LatLng startPoint=gridLowerLeft;
  while (lines * lineDist < extrapolatedDiag) {
    LatLng endPoint=GeoTools.newCoordFromBearingAndDistance(startPoint,angle,extrapolatedDiag);
    LineLatLng line=new LineLatLng(startPoint,endPoint);
    grid.add(line);
    startPoint=GeoTools.newCoordFromBearingAndDistance(startPoint,angle + 90,lineDist);
    lines++;
  }
}","private void drawGrid(Double lineDist) throws Exception {
  int lines=0;
  LatLng startPoint=gridLowerLeft;
  while (lines * lineDist < extrapolatedDiag) {
    LatLng endPoint=GeoTools.newCoordFromBearingAndDistance(startPoint,angle,extrapolatedDiag);
    LineLatLng line=new LineLatLng(startPoint,endPoint);
    grid.add(line);
    startPoint=GeoTools.newCoordFromBearingAndDistance(startPoint,angle + 90,lineDist);
    lines++;
    if (lines > MAX_NUMBER_OF_LINES) {
      throw new Exception(""String_Node_Str"");
    }
  }
}"
95359,"public CircumscribedGrid(List<LatLng> polygonPoints,Double angle,Double lineDist){
  this.angle=angle;
  findPolygonBounds(polygonPoints);
  drawGrid(lineDist);
}","public CircumscribedGrid(List<LatLng> polygonPoints,Double angle,Double lineDist) throws Exception {
  this.angle=angle;
  findPolygonBounds(polygonPoints);
  drawGrid(lineDist);
}"
95360,"public Grid generate(){
  List<LatLng> polygonPoints=poly.getLatLngList();
  List<LineLatLng> circumscribedGrid=new CircumscribedGrid(polygonPoints,angle,lineDist).getGrid();
  List<LineLatLng> trimedGrid=new Trimmer(circumscribedGrid,poly.getLines()).getTrimmedGrid();
  EndpointSorter gridSorter=new EndpointSorter(trimedGrid,wpDistance);
  gridSorter.sortGrid(origin,innerWPs);
  grid=new Grid(gridSorter.getSortedGrid());
  return grid;
}","public Grid generate() throws Exception {
  List<LatLng> polygonPoints=poly.getLatLngList();
  List<LineLatLng> circumscribedGrid=new CircumscribedGrid(polygonPoints,angle,lineDist).getGrid();
  List<LineLatLng> trimedGrid=new Trimmer(circumscribedGrid,poly.getLines()).getTrimmedGrid();
  EndpointSorter gridSorter=new EndpointSorter(trimedGrid,wpDistance);
  gridSorter.sortGrid(origin,innerWPs);
  grid=new Grid(gridSorter.getSortedGrid());
  return grid;
}"
95361,"/** 
 * Finds the intersection of two lines http://stackoverflow.com/questions/ 1119451/how-to-tell-if-a-line-intersects -a-polygon-in-c
 */
public static LatLng FindLineIntersection(LineLatLng first,LineLatLng second){
  double denom=((first.p2.longitude - first.p1.longitude) * (second.p2.latitude - second.p1.latitude)) - ((first.p2.latitude - first.p1.latitude) * (second.p2.longitude - second.p1.longitude));
  if (denom == 0)   return null;
  double numer=((first.p1.latitude - second.p1.latitude) * (second.p2.longitude - second.p1.longitude)) - ((first.p1.longitude - second.p1.longitude) * (second.p2.latitude - second.p1.latitude));
  double r=numer / denom;
  double numer2=((first.p1.latitude - second.p1.latitude) * (first.p2.longitude - first.p1.longitude)) - ((first.p1.longitude - second.p1.longitude) * (first.p2.latitude - first.p1.latitude));
  double s=numer2 / denom;
  if ((r < 0 || r > 1) || (s < 0 || s > 1))   return null;
  double longitude=first.p1.longitude + (r * (first.p2.longitude - first.p1.longitude));
  double latitude=first.p1.latitude + (r * (first.p2.latitude - first.p1.latitude));
  return (new LatLng(latitude,longitude));
}","/** 
 * Finds the intersection of two lines http://stackoverflow.com/questions/ 1119451/how-to-tell-if-a-line-intersects -a-polygon-in-c
 * @throws Exception 
 */
public static LatLng FindLineIntersection(LineLatLng first,LineLatLng second) throws Exception {
  double denom=((first.p2.longitude - first.p1.longitude) * (second.p2.latitude - second.p1.latitude)) - ((first.p2.latitude - first.p1.latitude) * (second.p2.longitude - second.p1.longitude));
  if (denom == 0)   throw new Exception(""String_Node_Str"");
  double numer=((first.p1.latitude - second.p1.latitude) * (second.p2.longitude - second.p1.longitude)) - ((first.p1.longitude - second.p1.longitude) * (second.p2.latitude - second.p1.latitude));
  double r=numer / denom;
  double numer2=((first.p1.latitude - second.p1.latitude) * (first.p2.longitude - first.p1.longitude)) - ((first.p1.longitude - second.p1.longitude) * (first.p2.latitude - first.p1.latitude));
  double s=numer2 / denom;
  if ((r < 0 || r > 1) || (s < 0 || s > 1))   throw new Exception(""String_Node_Str"");
  double longitude=first.p1.longitude + (r * (first.p2.longitude - first.p1.longitude));
  double latitude=first.p1.latitude + (r * (first.p2.latitude - first.p1.latitude));
  return (new LatLng(latitude,longitude));
}"
95362,"private void findPolygonBounds(List<LatLng> polygonPoints){
  PolyBounds bounds=new PolyBounds(polygonPoints);
  LatLng middlePoint=bounds.getMidlePoint();
  gridLowerLeft=GeoTools.newCoordFromBearingAndDistance(middlePoint,angle - 135,bounds.getDiag());
  extrapolatedDiag=bounds.getDiag() * 1.5;
}","private void findPolygonBounds(List<LatLng> polygonPoints){
  PolyBounds bounds=new PolyBounds(polygonPoints);
  LatLng middlePoint=bounds.getMiddle();
  gridLowerLeft=GeoTools.newCoordFromBearingAndDistance(middlePoint,angle - 135,bounds.getDiag());
  extrapolatedDiag=bounds.getDiag() * 1.5;
}"
95363,"private void processCrossings(int crosses){
switch (crosses) {
case 0:
case 1:
    break;
default :
case 2:
  trimedGrid.add(new LineLatLng(closestPoint,farestPoint));
break;
}
}","private void processCrossings(ArrayList<LatLng> crosses,LineLatLng gridLine){
switch (crosses.size()) {
case 0:
case 1:
    break;
case 2:
  trimedGrid.add(new LineLatLng(crosses.get(0),crosses.get(1)));
break;
default :
trimedGrid.add(new LineLatLng(findExternalPoints(crosses)));
}
}"
95364,"private int findCrossings(List<LineLatLng> polygon,LineLatLng gridLine){
  double closestDistance=Double.MAX_VALUE;
  double farestDistance=Double.MIN_VALUE;
  int crosses=0;
  for (  LineLatLng polyLine : polygon) {
    LatLng newlatlong=GeoTools.FindLineIntersection(polyLine,gridLine);
    if (newlatlong != null) {
      crosses++;
      if (closestDistance > GeoTools.getAproximatedDistance(gridLine.p1,newlatlong)) {
        closestPoint=new LatLng(newlatlong.latitude,newlatlong.longitude);
        closestDistance=GeoTools.getAproximatedDistance(gridLine.p1,newlatlong);
      }
      if (farestDistance < GeoTools.getAproximatedDistance(gridLine.p1,newlatlong)) {
        farestPoint=new LatLng(newlatlong.latitude,newlatlong.longitude);
        farestDistance=GeoTools.getAproximatedDistance(gridLine.p1,newlatlong);
      }
    }
  }
  return crosses;
}","private ArrayList<LatLng> findCrossings(List<LineLatLng> polygon,LineLatLng gridLine){
  ArrayList<LatLng> crossings=new ArrayList<LatLng>();
  for (  LineLatLng polyLine : polygon) {
    try {
      crossings.add(GeoTools.FindLineIntersection(polyLine,gridLine));
    }
 catch (    Exception e) {
    }
  }
  return crossings;
}"
95365,"public Trimmer(List<LineLatLng> grid,List<LineLatLng> polygon){
  for (  LineLatLng gridLine : grid) {
    int crosses=findCrossings(polygon,gridLine);
    processCrossings(crosses);
  }
}","public Trimmer(List<LineLatLng> grid,List<LineLatLng> polygon){
  for (  LineLatLng gridLine : grid) {
    ArrayList<LatLng> crosses=findCrossings(polygon,gridLine);
    processCrossings(crosses,gridLine);
  }
}"
95366,"public void sortGrid(){
  LineLatLng closestLine=new LineLatLng(firstLine);
  while (grid.size() > 0) {
    LatLng secondWp=processOneGridLine(closestLine);
    lastpnt=secondWp;
    if (grid.size() == 0)     break;
    closestLine=GeoTools.findClosestLineToPoint(lastpnt,grid);
  }
}","public void sortGrid(LatLng lastpnt){
  while (grid.size() > 0) {
    LineLatLng closestLine=GeoTools.findClosestLineToPoint(lastpnt,grid);
    LatLng secondWp=processOneGridLine(closestLine,lastpnt);
    lastpnt=secondWp;
  }
}"
95367,"public EndpointSorter(List<LineLatLng> grid,LatLng start,Double altitude){
  this.grid=grid;
  this.altitude=altitude;
  firstLine=GeoTools.findClosestLineToPoint(start,grid);
  lastpnt=firstLine.getClosestEndpointTo(start);
}","public EndpointSorter(List<LineLatLng> grid,Double altitude){
  this.grid=grid;
  this.altitude=altitude;
}"
95368,"private LatLng processOneGridLine(LineLatLng closestLine){
  LatLng firstWP=closestLine.getClosestEndpointTo(lastpnt);
  LatLng secondWp=closestLine.getFarthestEndpointTo(lastpnt);
  grid.remove(closestLine);
  addWaypointsBetween(firstWP,secondWp);
  return secondWp;
}","private LatLng processOneGridLine(LineLatLng closestLine,LatLng lastpnt){
  LatLng firstWP=closestLine.getClosestEndpointTo(lastpnt);
  LatLng secondWp=closestLine.getFarthestEndpointTo(lastpnt);
  grid.remove(closestLine);
  addWaypointsBetween(firstWP,secondWp);
  return secondWp;
}"
95369,"public List<waypoint> generate(){
  List<LatLng> polygonPoints=poly.getLatLngList();
  List<LineLatLng> circumscribedGrid=new Generator(polygonPoints,angle,lineDist).getGrid();
  List<LineLatLng> trimedGrid=new Trimmer(circumscribedGrid,polygonPoints).getTrimmedGrid();
  EndpointSorter gridSorter=new EndpointSorter(trimedGrid,lastLocation,altitude);
  gridSorter.sortGrid();
  gridPoints=gridSorter.getWaypoints();
  return gridPoints;
}","public List<waypoint> generate(){
  List<LatLng> polygonPoints=poly.getLatLngList();
  List<LineLatLng> circumscribedGrid=new Generator(polygonPoints,angle,lineDist).getGrid();
  List<LineLatLng> trimedGrid=new Trimmer(circumscribedGrid,polygonPoints).getTrimmedGrid();
  EndpointSorter gridSorter=new EndpointSorter(trimedGrid,altitude);
  gridSorter.sortGrid(lastLocation);
  gridPoints=gridSorter.getWaypoints();
  return gridPoints;
}"
95370,"public SurveyData(double defaultHatchAngle,double defaultAltitude){
  this.angle=90.0;
  this.altitude=150.0;
  this.overlap=50.0;
  this.sidelap=60.0;
}","public SurveyData(double defaultHatchAngle,double defaultAltitude){
  this.angle=defaultHatchAngle;
  this.altitude=defaultAltitude;
  this.overlap=50.0;
  this.sidelap=60.0;
}"
95371,"public void setUnit(String unit){
  this.unit=unit;
}","public void setUnit(String unit){
  if (unit != null) {
    this.unit=unit;
  }
}"
95372,"/** 
 * Extrapolate latitude/longitude given a heading and distance thanks to http://www.movable-type.co.uk/scripts/latlong.html
 * @param origin Point of origin
 * @param bearing bearing to navigate
 * @param distance distance to be added
 * @return New point with the added distance
 */
static LatLng newCoordFromBearingAndDistance(LatLng origin,double bearing,double distance){
  double lat=origin.latitude;
  double lon=origin.longitude;
  double lat1=Math.toRadians(lat);
  double lon1=Math.toRadians(lon);
  double brng=Math.toRadians(bearing);
  double dr=distance / RADIUS_OF_EARTH;
  double lat2=Math.asin(Math.sin(lat1) * Math.cos(dr) + Math.cos(lat1) * Math.sin(dr) * Math.cos(brng));
  double lon2=lon1 + Math.atan2(Math.sin(brng) * Math.sin(dr) * Math.cos(lat1),Math.cos(dr) - Math.sin(lat1) * Math.sin(lat2));
  return (new LatLng(Math.toDegrees(lat2),Math.toDegrees(lon2)));
}","/** 
 * Extrapolate latitude/longitude given a heading and distance thanks to http://www.movable-type.co.uk/scripts/latlong.html
 * @param origin Point of origin
 * @param bearing bearing to navigate
 * @param distance distance to be added
 * @return New point with the added distance
 */
public static LatLng newCoordFromBearingAndDistance(LatLng origin,double bearing,double distance){
  double lat=origin.latitude;
  double lon=origin.longitude;
  double lat1=Math.toRadians(lat);
  double lon1=Math.toRadians(lon);
  double brng=Math.toRadians(bearing);
  double dr=distance / RADIUS_OF_EARTH;
  double lat2=Math.asin(Math.sin(lat1) * Math.cos(dr) + Math.cos(lat1) * Math.sin(dr) * Math.cos(brng));
  double lon2=lon1 + Math.atan2(Math.sin(brng) * Math.sin(dr) * Math.cos(lat1),Math.cos(dr) - Math.sin(lat1) * Math.sin(lat2));
  return (new LatLng(Math.toDegrees(lat2),Math.toDegrees(lon2)));
}"
95373,"/** 
 * Returns the distance between two points
 * @return distance between the points in degrees
 */
static Double getAproximatedDistance(LatLng p1,LatLng p2){
  return (Math.hypot((p1.latitude - p2.latitude),(p1.longitude - p2.longitude)));
}","/** 
 * Returns the distance between two points
 * @return distance between the points in degrees
 */
public static Double getAproximatedDistance(LatLng p1,LatLng p2){
  return (Math.hypot((p1.latitude - p2.latitude),(p1.longitude - p2.longitude)));
}"
95374,"/** 
 * Adds an offset to a point (in degrees)
 * @param point the point to be modified
 * @param offset offset to be added
 * @return point with offset
 */
static LatLng addLatLng(LatLng point,LatLng offset){
  return (new LatLng(point.latitude + offset.latitude,point.longitude + offset.longitude));
}","/** 
 * Adds an offset to a point (in degrees)
 * @param point the point to be modified
 * @param offset offset to be added
 * @return point with offset
 */
public static LatLng addLatLng(LatLng point,LatLng offset){
  return (new LatLng(point.latitude + offset.latitude,point.longitude + offset.longitude));
}"
95375,"/** 
 * Finds the line that has the start or tip closest to a point.
 * @param point Point to the distance will be minimized
 * @param list A list of lines to search
 * @return The closest Line
 */
static LineLatLng findClosestLine(LatLng point,List<LineLatLng> list){
  LineLatLng answer=list.get(0);
  double shortest=Double.MAX_VALUE;
  for (  LineLatLng line : list) {
    double ans1=getAproximatedDistance(point,line.p1);
    double ans2=getAproximatedDistance(point,line.p2);
    LatLng shorterpnt=ans1 < ans2 ? line.p1 : line.p2;
    if (shortest > getAproximatedDistance(point,shorterpnt)) {
      answer=line;
      shortest=getAproximatedDistance(point,shorterpnt);
    }
  }
  return answer;
}","/** 
 * Finds the line that has the start or tip closest to a point.
 * @param point Point to the distance will be minimized
 * @param list A list of lines to search
 * @return The closest Line
 */
public static LineLatLng findClosestLine(LatLng point,List<LineLatLng> list){
  LineLatLng answer=list.get(0);
  double shortest=Double.MAX_VALUE;
  for (  LineLatLng line : list) {
    double ans1=getAproximatedDistance(point,line.p1);
    double ans2=getAproximatedDistance(point,line.p2);
    LatLng shorterpnt=ans1 < ans2 ? line.p1 : line.p2;
    if (shortest > getAproximatedDistance(point,shorterpnt)) {
      answer=line;
      shortest=getAproximatedDistance(point,shorterpnt);
    }
  }
  return answer;
}"
95376,"static Double metersTolat(double meters){
  double radius_of_earth=6378100.0;
  return Math.toDegrees(meters / radius_of_earth);
}","public static Double metersTolat(double meters){
  double radius_of_earth=6378100.0;
  return Math.toDegrees(meters / radius_of_earth);
}"
95377,"static Double latToMeters(double lat){
  double radius_of_earth=6378100.0;
  return Math.toRadians(lat) * radius_of_earth;
}","public static Double latToMeters(double lat){
  double radius_of_earth=6378100.0;
  return Math.toRadians(lat) * radius_of_earth;
}"
95378,"/** 
 * Finds the intersection of two lines http://stackoverflow.com/questions/ 1119451/how-to-tell-if-a-line-intersects -a-polygon-in-c
 * @param start1 starting point of the first line
 * @param end1 ending point of the first line
 * @param start2 starting point of the second line
 * @param end2 ending point of the second line
 * @return point of intersection, or null if there is no intersection
 */
static LatLng FindLineIntersection(LatLng start1,LatLng end1,LatLng start2,LatLng end2){
  double denom=((end1.longitude - start1.longitude) * (end2.latitude - start2.latitude)) - ((end1.latitude - start1.latitude) * (end2.longitude - start2.longitude));
  if (denom == 0)   return null;
  double numer=((start1.latitude - start2.latitude) * (end2.longitude - start2.longitude)) - ((start1.longitude - start2.longitude) * (end2.latitude - start2.latitude));
  double r=numer / denom;
  double numer2=((start1.latitude - start2.latitude) * (end1.longitude - start1.longitude)) - ((start1.longitude - start2.longitude) * (end1.latitude - start1.latitude));
  double s=numer2 / denom;
  if ((r < 0 || r > 1) || (s < 0 || s > 1))   return null;
  double longitude=start1.longitude + (r * (end1.longitude - start1.longitude));
  double latitude=start1.latitude + (r * (end1.latitude - start1.latitude));
  return (new LatLng(latitude,longitude));
}","/** 
 * Finds the intersection of two lines http://stackoverflow.com/questions/ 1119451/how-to-tell-if-a-line-intersects -a-polygon-in-c
 * @param start1 starting point of the first line
 * @param end1 ending point of the first line
 * @param start2 starting point of the second line
 * @param end2 ending point of the second line
 * @return point of intersection, or null if there is no intersection
 */
public static LatLng FindLineIntersection(LatLng start1,LatLng end1,LatLng start2,LatLng end2){
  double denom=((end1.longitude - start1.longitude) * (end2.latitude - start2.latitude)) - ((end1.latitude - start1.latitude) * (end2.longitude - start2.longitude));
  if (denom == 0)   return null;
  double numer=((start1.latitude - start2.latitude) * (end2.longitude - start2.longitude)) - ((start1.longitude - start2.longitude) * (end2.latitude - start2.latitude));
  double r=numer / denom;
  double numer2=((start1.latitude - start2.latitude) * (end1.longitude - start1.longitude)) - ((start1.longitude - start2.longitude) * (end1.latitude - start1.latitude));
  double s=numer2 / denom;
  if ((r < 0 || r > 1) || (s < 0 || s > 1))   return null;
  double longitude=start1.longitude + (r * (end1.longitude - start1.longitude));
  double latitude=start1.latitude + (r * (end1.latitude - start1.latitude));
  return (new LatLng(latitude,longitude));
}"
95379,"public void addWaypoints(List<waypoint> points){
  waypoints.addAll(points);
}","public void addWaypoints(List<waypoint> points){
  for (  waypoint wp : points) {
    addWaypoint(wp);
  }
}"
95380,"public static MarkerOptions build(PolygonPoint wp){
  return new MarkerOptions().position(wp.coord).draggable(true).title(""String_Node_Str"" + Integer.toString(0)).icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_BLUE));
}","public static MarkerOptions build(PolygonPoint wp){
  return new MarkerOptions().position(wp.coord).draggable(true).title(""String_Node_Str"").icon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_BLUE));
}"
95381,"public static void update(Marker marker,PolygonPoint wp){
  marker.setPosition(wp.coord);
  marker.setTitle(""String_Node_Str"" + Integer.toString(0));
  marker.setIcon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_BLUE));
}","public static void update(Marker marker,PolygonPoint wp){
  marker.setPosition(wp.coord);
  marker.setTitle(""String_Node_Str"");
  marker.setIcon(BitmapDescriptorFactory.defaultMarker(BitmapDescriptorFactory.HUE_BLUE));
}"
95382,"private void setupOnlineMapOverlay(){
  GoogleMap mMap=getMap();
  mMap.setMapType(getMapType());
}","private void setupOnlineMapOverlay(){
  mMap.setMapType(getMapType());
}"
95383,"private void setupOfflineMapOverlay(){
  GoogleMap mMap=getMap();
  mMap.setMapType(GoogleMap.MAP_TYPE_NONE);
  TileOverlay tileOverlay=mMap.addTileOverlay(new TileOverlayOptions().tileProvider(new LocalMapTileProvider()));
  tileOverlay.setZIndex(-1);
  tileOverlay.clearTileCache();
}","private void setupOfflineMapOverlay(){
  mMap.setMapType(GoogleMap.MAP_TYPE_NONE);
  TileOverlay tileOverlay=mMap.addTileOverlay(new TileOverlayOptions().tileProvider(new LocalMapTileProvider()));
  tileOverlay.setZIndex(-1);
  tileOverlay.clearTileCache();
}"
95384,"public double getMapRotation(){
  GoogleMap map=getMap();
  if (map != null) {
    return map.getCameraPosition().bearing;
  }
 else {
    return 0;
  }
}","public double getMapRotation(){
  if (isMapLayoutFinished()) {
    return mMap.getCameraPosition().bearing;
  }
 else {
    return 0;
  }
}"
95385,"private void setupMap(){
  setupMapUI();
  setupMapOverlay();
}","private void setupMap(){
  mMap=getMap();
  if (isMapLayoutFinished()) {
    setupMapUI();
    setupMapOverlay();
  }
}"
95386,"private void setupMapUI(){
  GoogleMap mMap=getMap();
  if (mMap != null) {
    mMap.setMyLocationEnabled(true);
    UiSettings mUiSettings=mMap.getUiSettings();
    mUiSettings.setMyLocationButtonEnabled(true);
    mUiSettings.setCompassEnabled(true);
    mUiSettings.setTiltGesturesEnabled(false);
  }
}","private void setupMapUI(){
  mMap.setMyLocationEnabled(true);
  UiSettings mUiSettings=mMap.getUiSettings();
  mUiSettings.setMyLocationButtonEnabled(true);
  mUiSettings.setCompassEnabled(true);
  mUiSettings.setTiltGesturesEnabled(false);
}"
95387,"private void setupOnlineMapOverlay(){
  GoogleMap mMap=getMap();
  mMap.setMapType(getMapType());
}","private void setupOnlineMapOverlay(){
  mMap.setMapType(getMapType());
}"
95388,"private void setupOfflineMapOverlay(){
  GoogleMap mMap=getMap();
  mMap.setMapType(GoogleMap.MAP_TYPE_NONE);
  TileOverlay tileOverlay=mMap.addTileOverlay(new TileOverlayOptions().tileProvider(new LocalMapTileProvider()));
  tileOverlay.setZIndex(-1);
  tileOverlay.clearTileCache();
}","private void setupOfflineMapOverlay(){
  mMap.setMapType(GoogleMap.MAP_TYPE_NONE);
  TileOverlay tileOverlay=mMap.addTileOverlay(new TileOverlayOptions().tileProvider(new LocalMapTileProvider()));
  tileOverlay.setZIndex(-1);
  tileOverlay.clearTileCache();
}"
95389,"public double getMapRotation(){
  GoogleMap map=getMap();
  if (map != null) {
    return map.getCameraPosition().bearing;
  }
 else {
    return 0;
  }
}","public double getMapRotation(){
  if (isMapLayoutFinished()) {
    return mMap.getCameraPosition().bearing;
  }
 else {
    return 0;
  }
}"
95390,"private void setupMap(){
  setupMapUI();
  setupMapOverlay();
}","private void setupMap(){
  mMap=getMap();
  if (isMapLayoutFinished()) {
    setupMapUI();
    setupMapOverlay();
  }
}"
95391,"private void setupMapUI(){
  GoogleMap mMap=getMap();
  if (mMap != null) {
    mMap.setMyLocationEnabled(true);
    UiSettings mUiSettings=mMap.getUiSettings();
    mUiSettings.setMyLocationButtonEnabled(true);
    mUiSettings.setCompassEnabled(true);
    mUiSettings.setTiltGesturesEnabled(false);
  }
}","private void setupMapUI(){
  mMap.setMyLocationEnabled(true);
  UiSettings mUiSettings=mMap.getUiSettings();
  mUiSettings.setMyLocationButtonEnabled(true);
  mUiSettings.setCompassEnabled(true);
  mUiSettings.setTiltGesturesEnabled(false);
}"
95392,"@Override public void onGestureEnded(GestureOverlayView arg0,MotionEvent arg1){
  overlay.setEnabled(false);
  List<Point> path=new ArrayList<Point>();
  float[] points=overlay.getGesture().getStrokes().get(0).points;
  for (int i=0; i < points.length; i+=2) {
    path.add(new Point((int)points[i],(int)points[i + 1]));
  }
  path=Simplify.simplify(path,10);
  listner.onPathFinished(path);
}","@Override public void onGestureEnded(GestureOverlayView arg0,MotionEvent arg1){
  overlay.setEnabled(false);
  List<Point> path=decodeGesture();
  if (path.size() > 1) {
    path=Simplify.simplify(path,TOLERANCE);
  }
  listner.onPathFinished(path);
}"
95393,"@Override public void onGestureEnded(GestureOverlayView arg0,MotionEvent arg1){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  overlay.setEnabled(false);
  List<Point> path=new ArrayList<Point>();
  float[] points=overlay.getGesture().getStrokes().get(0).points;
  for (int i=0; i < points.length; i+=2) {
    path.add(new Point((int)points[i],(int)points[i + 1]));
  }
  path=Simplify.simplify(path,50.0);
  listner.onPathFinished(path);
}","@Override public void onGestureEnded(GestureOverlayView arg0,MotionEvent arg1){
  overlay.setEnabled(false);
  List<Point> path=new ArrayList<Point>();
  float[] points=overlay.getGesture().getStrokes().get(0).points;
  for (int i=0; i < points.length; i+=2) {
    path.add(new Point((int)points[i],(int)points[i + 1]));
  }
  path=Simplify.simplify(path,10);
  listner.onPathFinished(path);
}"
95394,"/** 
 * Provides the distance from a point P to the line segment that passes through A-B. If the point is not on the side of the line, returns the distance to the closest point
 * @param L1 First point of the line
 * @param L2 Second point of the line
 * @param P Point to measure the distance
 */
public static double pointToLineDistance(Point L1,Point L2,Point P){
  double A=P.x - L1.y;
  double B=P.y - L1.y;
  double C=L2.x - L1.x;
  double D=L2.y - L1.y;
  double dot=A * C + B * D;
  double len_sq=C * C + D * D;
  double param=dot / len_sq;
  double xx, yy;
  if (param < 0) {
    xx=L1.x;
    yy=L1.y;
  }
 else   if (param > 1) {
    xx=L2.x;
    yy=L2.y;
  }
 else {
    xx=L1.x + param * C;
    yy=L1.y + param * D;
  }
  return Math.hypot(xx - P.x,yy - P.y);
}","/** 
 * Perpendicular Distance of point to line
 * @param L1 First point of the line
 * @param L2 Second point of the line
 * @param P Point to measure the distance
 * @return The square distance
 */
public static double pointToLineDistance(Point L1,Point L2,Point P){
  double x0, y0, x1, y1, x2, y2, dx, dy, t;
  x1=L1.x;
  y1=L1.y;
  x2=L2.x;
  y2=L2.y;
  x0=P.x;
  y0=P.y;
  dx=x2 - x1;
  dy=y2 - y1;
  if (dx != 0.0d || dy != 0.0d) {
    t=((x0 - x1) * dx + (y0 - y1) * dy) / (dx * dx + dy * dy);
    if (t > 1.0d) {
      x1=x2;
      y1=y2;
    }
 else     if (t > 0.0d) {
      x1+=dx * t;
      y1+=dy * t;
    }
  }
  dx=x0 - x1;
  dy=y0 - y1;
  return dx * dx + dy * dy;
}"
95395,"public static List<Point> simplify(List<Point> list,double tolerance){
  int index=0;
  double dmax=0;
  int lastIndex=list.size() - 1;
  for (int i=1; i < list.size() - 1; i++) {
    double d=pointToLineDistance(list.get(0),list.get(lastIndex),list.get(i));
    if (d > dmax) {
      index=i;
      dmax=d;
    }
  }
  List<Point> ResultList=new ArrayList<Point>();
  if (dmax > tolerance) {
    List<Point> recResults1=simplify(list.subList(0,index),tolerance);
    List<Point> recResults2=simplify(list.subList(index,lastIndex),tolerance);
    recResults1.remove(recResults1.size() - 1);
    ResultList.addAll(recResults1);
    ResultList.addAll(recResults2);
  }
 else {
    ResultList.add(list.get(0));
    ResultList.add(list.get(lastIndex));
  }
  return ResultList;
}","public static List<Point> simplify(List<Point> list,double tolerance){
  int index=0;
  double dmax=0;
  double squareTolerance=tolerance * tolerance;
  int lastIndex=list.size() - 1;
  for (int i=1; i < list.size() - 1; i++) {
    double d=pointToLineDistance(list.get(0),list.get(lastIndex),list.get(i));
    if (d > dmax) {
      index=i;
      dmax=d;
    }
  }
  List<Point> ResultList=new ArrayList<Point>();
  if (dmax > squareTolerance) {
    List<Point> recResults1=simplify(list.subList(0,index + 1),tolerance);
    List<Point> recResults2=simplify(list.subList(index,lastIndex + 1),tolerance);
    recResults1.remove(recResults1.size() - 1);
    ResultList.addAll(recResults1);
    ResultList.addAll(recResults2);
  }
 else {
    ResultList.add(list.get(0));
    ResultList.add(list.get(lastIndex));
  }
  return ResultList;
}"
95396,"private void updateCameraSpinner(Context context){
  String[] list=FileList.getCameraInfoFileList();
  if (list.length > 0) {
    avaliableCameras=new ArrayAdapter<CharSequence>(context,android.R.layout.simple_spinner_dropdown_item);
    avaliableCameras.addAll();
    cameraSpinner.setAdapter(avaliableCameras);
    cameraSpinner.setSelection(0);
  }
 else {
    Toast.makeText(context,context.getString(R.string.no_files),Toast.LENGTH_LONG).show();
  }
}","private void updateCameraSpinner(Context context){
  String[] list=FileList.getCameraInfoFileList();
  if (list.length > 0) {
    avaliableCameras=new ArrayAdapter<CharSequence>(context,android.R.layout.simple_spinner_dropdown_item);
    avaliableCameras.addAll(list);
    cameraSpinner.setAdapter(avaliableCameras);
    cameraSpinner.setSelection(0);
  }
 else {
    Toast.makeText(context,context.getString(R.string.no_files),Toast.LENGTH_LONG).show();
  }
}"
95397,"private void processReceivedParam(msg_param_value m_value){
  Parameter param=new Parameter(m_value);
  parameters.add(param);
  parameterListner.onParameterReceived(param);
  if (m_value.param_index == m_value.param_count - 1) {
    Toast.makeText(myDrone.context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}","private void processReceivedParam(msg_param_value m_value){
  Parameter param=new Parameter(m_value);
  parameters.add(param);
  if (parameterListner != null) {
    parameterListner.onParameterReceived(param);
  }
  if (m_value.param_index == m_value.param_count - 1) {
    Toast.makeText(myDrone.context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}"
95398,"private void processReceivedParam(msg_param_value m_value){
  Parameter param=new Parameter(m_value);
  parameters.add(param);
  parameterListner.onParameterReceived(param);
  if (m_value.param_index == m_value.param_count - 1) {
    Toast.makeText(myDrone.context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}","private void processReceivedParam(msg_param_value m_value){
  Parameter param=new Parameter(m_value);
  parameters.add(param);
  if (parameterListner != null) {
    parameterListner.onParameterReceived(param);
  }
  if (m_value.param_index == m_value.param_count - 1) {
    Toast.makeText(myDrone.context,""String_Node_Str"",Toast.LENGTH_LONG).show();
  }
}"
95399,"@Override public boolean onTouchEvent(MotionEvent ev){
  int pointerIndex;
  int pointerId;
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_MOVE:
    return processMove(ev);
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
  if (isPointerValid()) {
    mVelocityTracker.recycle();
    return processRelease();
  }
break;
case MotionEvent.ACTION_POINTER_UP:
pointerIndex=(action & MotionEvent.ACTION_POINTER_INDEX_MASK) >> MotionEvent.ACTION_POINTER_INDEX_SHIFT;
pointerId=ev.getPointerId(pointerIndex);
if (pointerId == this.pointerId) {
return processRelease();
}
break;
case MotionEvent.ACTION_DOWN:
if (!isPointerValid()) {
this.pointerId=ev.getPointerId(0);
if (mVelocityTracker == null) {
mVelocityTracker=VelocityTracker.obtain();
}
 else {
mVelocityTracker.clear();
}
mVelocityTracker.addMovement(ev);
processFirstTouch(ev);
return true;
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
pointerIndex=(action & MotionEvent.ACTION_POINTER_INDEX_MASK) >> MotionEvent.ACTION_POINTER_INDEX_SHIFT;
pointerId=ev.getPointerId(pointerIndex);
if (pointerId == INVALID_POINTER_ID) {
this.pointerId=pointerId;
processFirstTouch(ev);
return true;
}
break;
}
return false;
}","@Override public boolean onTouchEvent(MotionEvent ev){
  int pointerIndex;
  int pointerId;
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_MOVE:
    return processMove(ev);
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
  if (isPointerValid()) {
    return processRelease();
  }
break;
case MotionEvent.ACTION_POINTER_UP:
pointerIndex=(action & MotionEvent.ACTION_POINTER_INDEX_MASK) >> MotionEvent.ACTION_POINTER_INDEX_SHIFT;
pointerId=ev.getPointerId(pointerIndex);
if (pointerId == this.pointerId) {
return processRelease();
}
break;
case MotionEvent.ACTION_DOWN:
if (!isPointerValid()) {
this.pointerId=ev.getPointerId(0);
if (mVelocityTracker == null) {
mVelocityTracker=VelocityTracker.obtain();
}
 else {
mVelocityTracker.clear();
}
mVelocityTracker.addMovement(ev);
processFirstTouch(ev);
return true;
}
break;
case MotionEvent.ACTION_POINTER_DOWN:
pointerIndex=(action & MotionEvent.ACTION_POINTER_INDEX_MASK) >> MotionEvent.ACTION_POINTER_INDEX_SHIFT;
pointerId=ev.getPointerId(pointerIndex);
if (pointerId == INVALID_POINTER_ID) {
this.pointerId=pointerId;
processFirstTouch(ev);
return true;
}
break;
}
return false;
}"
95400,"private boolean processRelease(){
  this.pointerId=INVALID_POINTER_ID;
  handleVisible=false;
  invalidate();
  if (moveListener != null) {
    releaseX=xAxisAutoReturnToCenter ? 0 : userX;
    releaseY=yAxisAutoReturnToCenter ? 0 : userY;
    moveListener.OnMoved(releaseX,releaseY);
  }
  return true;
}","private boolean processRelease(){
  this.pointerId=INVALID_POINTER_ID;
  mVelocityTracker.recycle();
  handleVisible=false;
  invalidate();
  if (moveListener != null) {
    releaseX=xAxisAutoReturnToCenter ? 0 : userX;
    releaseY=yAxisAutoReturnToCenter ? 0 : userY;
    moveListener.OnMoved(releaseX,releaseY);
  }
  return true;
}"
95401,"public void updateDroneMarkers(){
  buildBitmaps();
  addMarkerToMap();
}","public void updateDroneMarkers(){
  if (droneMarker != null) {
    droneMarker.remove();
  }
  buildBitmaps();
  addMarkerToMap();
}"
95402,"public void openPolygonGenerateDialog(){
  double defaultHatchAngle=(planningMapFragment.getMapRotation() + 90) % 180;
  PolygonDialog polygonDialog=new PolygonDialog(){
    @Override public void onPolygonGenerated(    List<waypoint> list){
      drone.mission.addWaypoints(list);
      update();
    }
  }
;
  polygonDialog.generatePolygon(defaultHatchAngle,50.0,polygon,drone.mission.getLastWaypoint().getCoord(),drone.mission.getDefaultAlt(),this);
}","public void openPolygonGenerateDialog(){
  double defaultHatchAngle=(planningMapFragment.getMapRotation() + 90) % 180;
  GridDialog polygonDialog=new GridDialog(){
    @Override public void onPolygonGenerated(    List<waypoint> list){
      drone.mission.addWaypoints(list);
      update();
    }
  }
;
  polygonDialog.generatePolygon(defaultHatchAngle,50.0,polygon,drone.mission.getLastWaypoint().getCoord(),drone.mission.getDefaultAlt(),this);
}"
95403,"public Home(Double Lat,Double Lng,Double h){
  super(Lat,Lng,h);
}","public Home(waypoint waypoint){
  super(waypoint.missionItem);
  setCurrent((byte)1);
}"
95404,"public void onWaypointsReceived(List<waypoint> waypoints){
  if (waypoints != null) {
    Toast.makeText(myDrone.context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    myDrone.tts.speak(""String_Node_Str"");
    setHome(waypoints.get(0));
    waypoints.remove(0);
    clearWaypoints();
    addWaypoints(waypoints);
    notifyMissionUpdate();
  }
}","public void onWaypointsReceived(List<waypoint> waypoints){
  if (waypoints != null) {
    Toast.makeText(myDrone.context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    myDrone.tts.speak(""String_Node_Str"");
    setHome(new Home(waypoints.get(0)));
    waypoints.remove(0);
    clearWaypoints();
    addWaypoints(waypoints);
    notifyMissionUpdate();
  }
}"
95405,"public waypoint getHome(){
  return home;
}","public Home getHome(){
  return home;
}"
95406,"private void parseHomeLine(BufferedReader reader) throws IOException {
  String[] RowData=reader.readLine().split(""String_Node_Str"");
  home=new waypoint(Double.valueOf(RowData[8]),Double.valueOf(RowData[9]),Double.valueOf(RowData[10]));
  home.setNumber(Integer.valueOf(RowData[0]));
  home.setFrame(Integer.valueOf(RowData[2]));
  home.setCmd(ApmCommands.getCmd(Integer.valueOf(RowData[3])));
  home.setParameters(Float.valueOf(RowData[4]),Float.valueOf(RowData[5]),Float.valueOf(RowData[6]),Float.valueOf(RowData[7]));
  home.setAutoContinue(Integer.valueOf(RowData[11]));
}","private void parseHomeLine(BufferedReader reader) throws IOException {
  String[] RowData=reader.readLine().split(""String_Node_Str"");
  home=new Home(Double.valueOf(RowData[8]),Double.valueOf(RowData[9]),Double.valueOf(RowData[10]));
  home.setNumber(Integer.valueOf(RowData[0]));
  home.setFrame(Integer.valueOf(RowData[2]));
  home.setCmd(ApmCommands.getCmd(Integer.valueOf(RowData[3])));
  home.setParameters(Float.valueOf(RowData[4]),Float.valueOf(RowData[5]),Float.valueOf(RowData[6]),Float.valueOf(RowData[7]));
  home.setAutoContinue(Integer.valueOf(RowData[11]));
}"
95407,"@Override public boolean onMenuItemSelected(int featureId,MenuItem item){
switch (item.getItemId()) {
case R.id.menu_settings:
    startActivity(new Intent(this,SettingsActivity.class));
  return true;
case R.id.menu_connect:
toggleConnectionState();
return true;
case R.id.menu_load_from_apm:
drone.waypointMananger.getWaypoints();
return true;
case R.id.menu_default_alt:
changeDefaultAlt();
return true;
case R.id.menu_preflight_calibration:
drone.calibrationSetup.startCalibration(this);
return true;
case R.id.menu_record_me:
app.recordMe.toogleRecordMeState();
case R.id.menu_follow_me:
app.followMe.toogleFollowMeState();
default :
return super.onMenuItemSelected(featureId,item);
}
}","@Override public boolean onMenuItemSelected(int featureId,MenuItem item){
switch (item.getItemId()) {
case R.id.menu_settings:
    startActivity(new Intent(this,SettingsActivity.class));
  return true;
case R.id.menu_connect:
toggleConnectionState();
return true;
case R.id.menu_load_from_apm:
drone.waypointMananger.getWaypoints();
return true;
case R.id.menu_default_alt:
changeDefaultAlt();
return true;
case R.id.menu_preflight_calibration:
drone.calibrationSetup.startCalibration(this);
return true;
case R.id.menu_record_me:
app.recordMe.toogleRecordMeState();
return true;
case R.id.menu_follow_me:
app.followMe.toogleFollowMeState();
return true;
default :
return super.onMenuItemSelected(featureId,item);
}
}"
95408,"public Home(Double Lat,Double Lng,Double h){
  super(Lat,Lng,h);
}","public Home(waypoint waypoint){
  super(waypoint.missionItem);
  setCurrent((byte)1);
}"
95409,"public void onWaypointsReceived(List<waypoint> waypoints){
  if (waypoints != null) {
    Toast.makeText(myDrone.context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    myDrone.tts.speak(""String_Node_Str"");
    setHome(waypoints.get(0));
    waypoints.remove(0);
    clearWaypoints();
    addWaypoints(waypoints);
    notifyMissionUpdate();
  }
}","public void onWaypointsReceived(List<waypoint> waypoints){
  if (waypoints != null) {
    Toast.makeText(myDrone.context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
    myDrone.tts.speak(""String_Node_Str"");
    setHome(new Home(waypoints.get(0)));
    waypoints.remove(0);
    clearWaypoints();
    addWaypoints(waypoints);
    notifyMissionUpdate();
  }
}"
95410,"public waypoint getHome(){
  return home;
}","public Home getHome(){
  return home;
}"
95411,"private void parseHomeLine(BufferedReader reader) throws IOException {
  String[] RowData=reader.readLine().split(""String_Node_Str"");
  home=new waypoint(Double.valueOf(RowData[8]),Double.valueOf(RowData[9]),Double.valueOf(RowData[10]));
  home.setNumber(Integer.valueOf(RowData[0]));
  home.setFrame(Integer.valueOf(RowData[2]));
  home.setCmd(ApmCommands.getCmd(Integer.valueOf(RowData[3])));
  home.setParameters(Float.valueOf(RowData[4]),Float.valueOf(RowData[5]),Float.valueOf(RowData[6]),Float.valueOf(RowData[7]));
  home.setAutoContinue(Integer.valueOf(RowData[11]));
}","private void parseHomeLine(BufferedReader reader) throws IOException {
  String[] RowData=reader.readLine().split(""String_Node_Str"");
  home=new Home(Double.valueOf(RowData[8]),Double.valueOf(RowData[9]),Double.valueOf(RowData[10]));
  home.setNumber(Integer.valueOf(RowData[0]));
  home.setFrame(Integer.valueOf(RowData[2]));
  home.setCmd(ApmCommands.getCmd(Integer.valueOf(RowData[3])));
  home.setParameters(Float.valueOf(RowData[4]),Float.valueOf(RowData[5]),Float.valueOf(RowData[6]),Float.valueOf(RowData[7]));
  home.setAutoContinue(Integer.valueOf(RowData[11]));
}"
95412,"public static void sendWaypoint(MAVLinkClient MavClient,int index,waypoint waypoint){
  waypoint.setCurrent((byte)((index == 0) ? 1 : 0));
  MavClient.sendMavPacket(waypoint.pack());
}","public static void sendWaypoint(MAVLinkClient MavClient,int index,waypoint waypoint){
  waypoint.setCurrent((byte)((index == 0) ? 1 : 0));
  waypoint.setTarget(1,1);
  MavClient.sendMavPacket(waypoint.pack());
}"
95413,"private void updatePosition(double yaw,LatLng coord){
  double correctHeading=(yaw - flightMapFragment.getMapRotation() + 360) % 360;
  Log.d(""String_Node_Str"",""String_Node_Str"");
  try {
    droneMarker.setVisible(true);
    droneMarker.setPosition(coord);
    droneMarker.setIcon(bitmaps.getIcon(correctHeading));
    animateCamera(coord);
  }
 catch (  Exception e) {
  }
}","private void updatePosition(double yaw,LatLng coord){
  double correctHeading=(yaw - flightMapFragment.getMapRotation() + 360) % 360;
  try {
    droneMarker.setVisible(true);
    droneMarker.setPosition(coord);
    droneMarker.setIcon(bitmaps.getIcon(correctHeading));
    animateCamera(coord);
  }
 catch (  Exception e) {
  }
}"
95414,"@Override public void onAltitudeChanged(double newAltitude){
  super.onAltitudeChanged(newAltitude);
  if (guidedPoint != null) {
    Toast.makeText(this,""String_Node_Str"" + (int)newAltitude + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
    drone.state.setGuidedMode(new waypoint(guidedPoint.getCoord(),newAltitude));
    guidedPoint=null;
  }
}","@Override public void onAltitudeChanged(double newAltitude){
  super.onAltitudeChanged(newAltitude);
  if (drone.guidedPoint.isCoordValid()) {
    drone.guidedPoint.setGuidedMode();
  }
}"
95415,"@Override public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.menu_super_flight_activity,menu);
  MenuItem flightModeMenu=menu.findItem(R.id.menu_flight_modes_spinner);
  fligthModeSpinner=(SelectModeSpinner)flightModeMenu.getActionView();
  fligthModeSpinner.buildSpinner(this,this);
  fligthModeSpinner.updateModeSpinner(drone);
  MenuItem wpMenu=menu.findItem(R.id.menu_wp_spinner);
  wpSpinner=(SelectWaypointSpinner)wpMenu.getActionView();
  wpSpinner.buildSpinner(this,this);
  return super.onCreateOptionsMenu(menu);
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  getMenuInflater().inflate(R.menu.menu_super_flight_activity,menu);
  MenuItem flightModeMenu=menu.findItem(R.id.menu_flight_modes_spinner);
  fligthModeSpinner=(SelectModeSpinner)flightModeMenu.getActionView();
  fligthModeSpinner.buildSpinner(this,this);
  fligthModeSpinner.updateModeSpinner(drone);
  MenuItem wpMenu=menu.findItem(R.id.menu_wp_spinner);
  wpSpinner=(SelectWaypointSpinner)wpMenu.getActionView();
  wpSpinner.buildSpinner(this,this);
  drone.guidedPoint.setOnGuidedListner(this);
  return super.onCreateOptionsMenu(menu);
}"
95416,"public GuidedPoint(LatLng coord){
  this.coord=coord;
}","public GuidedPoint(Drone myDrone){
  super(myDrone);
}"
95417,"@Override public void onMapLongClick(LatLng coord){
  getPreferences();
  if (isGuidedModeEnabled) {
    GuidedPoint guidedPoint=new GuidedPoint(coord);
    mListener.onSetGuidedMode(guidedPoint);
    markers.updateMarker(guidedPoint);
  }
}","@Override public void onMapLongClick(LatLng coord){
  getPreferences();
  if (isGuidedModeEnabled) {
    drone.guidedPoint.newGuidedPoint(coord);
    markers.updateMarker(drone.guidedPoint);
  }
}"
95418,"@Override public void onLocationChanged(Location location){
  waypoint guidedWP=new waypoint(location.getLatitude(),location.getLongitude(),drone.mission.getDefaultAlt());
  drone.state.setGuidedMode(guidedWP);
}","@Override public void onLocationChanged(Location location){
  waypoint guidedWP=new waypoint(location.getLatitude(),location.getLongitude(),drone.mission.getDefaultAlt());
  drone.guidedPoint.setGuidedMode(guidedWP);
}"
95419,"void updateGuidedMarker(LatLng point){
  if (guidedMarker == null) {
    addMarker(point);
  }
 else {
    updateMarker(point);
  }
}","public void updateGuidedMarker(LatLng point){
  if (guidedMarker == null) {
    addMarker(point);
  }
 else {
    updateMarker(point);
  }
}"
95420,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.gcp);
  gcpList=new ArrayList<gcp>();
  gcpMapFragment=((GcpMapFragment)getFragmentManager().findFragmentById(R.id.gcpMapFragment));
  clearWaypointsAndUpdate();
  checkIntent();
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.gcp);
  gcpList=new ArrayList<Gcp>();
  gcpMapFragment=((GcpMapFragment)getFragmentManager().findFragmentById(R.id.gcpMapFragment));
  clearWaypointsAndUpdate();
  checkIntent();
}"
95421,"public void openGcpFile(){
  OpenFileDialog dialog=new OpenGcpFileDialog(){
    @Override public void onGcpFileLoaded(    List<gcp> list){
      if (list != null) {
        putListToGcp(list);
      }
    }
  }
;
  dialog.openDialog(this);
}","public void openGcpFile(){
  OpenFileDialog dialog=new OpenGcpFileDialog(){
    @Override public void onGcpFileLoaded(    List<Gcp> list){
      if (list != null) {
        putListToGcp(list);
      }
    }
  }
;
  dialog.openDialog(this);
}"
95422,"private List<LatLng> getGcpCoordinates(){
  List<LatLng> result=new ArrayList<LatLng>();
  for (  gcp latLng : gcpList) {
    result.add(latLng.coord);
  }
  return result;
}","private List<LatLng> getGcpCoordinates(){
  List<LatLng> result=new ArrayList<LatLng>();
  for (  Gcp latLng : gcpList) {
    result.add(latLng.coord);
  }
  return result;
}"
95423,"@Override public void onGcpFileLoaded(List<gcp> list){
  if (list != null) {
    putListToGcp(list);
  }
}","@Override public void onGcpFileLoaded(List<Gcp> list){
  if (list != null) {
    putListToGcp(list);
  }
}"
95424,"@Override public void onGcpClick(MarkerSource gcp){
  ((com.droidplanner.gcp.gcp)gcp).toogleState();
  gcpMapFragment.markers.updateMarker(gcp);
}","@Override public void onGcpClick(MarkerSource gcp){
  ((com.droidplanner.gcp.Gcp)gcp).toogleState();
  gcpMapFragment.markers.updateMarker(gcp);
}"
95425,"private void putListToGcp(List<gcp> list){
  gcpList.clear();
  gcpList.addAll(list);
  gcpMapFragment.markers.updateMarkers(gcpList);
  gcpMapFragment.zoomToExtents(getGcpCoordinates());
}","private void putListToGcp(List<Gcp> list){
  gcpList.clear();
  gcpList.addAll(list);
  gcpMapFragment.markers.updateMarkers(gcpList);
  gcpMapFragment.zoomToExtents(getGcpCoordinates());
}"
95426,public abstract void onGcpFileLoaded(List<gcp> gcpList);,public abstract void onGcpFileLoaded(List<Gcp> gcpList);
95427,"private gcp readCoordinate(XmlPullParser parser) throws IOException, XmlPullParserException {
  Double Lat, Lng;
  parser.require(XmlPullParser.START_TAG,ns,""String_Node_Str"");
  String coordString=readText(parser);
  parser.require(XmlPullParser.END_TAG,ns,""String_Node_Str"");
  String title[]=coordString.split(""String_Node_Str"");
  Lng=Double.valueOf(title[0]);
  Lat=Double.valueOf(title[1]);
  return (new gcp(Lat,Lng));
}","private Gcp readCoordinate(XmlPullParser parser) throws IOException, XmlPullParserException {
  Double Lat, Lng;
  parser.require(XmlPullParser.START_TAG,ns,""String_Node_Str"");
  String coordString=readText(parser);
  parser.require(XmlPullParser.END_TAG,ns,""String_Node_Str"");
  String title[]=coordString.split(""String_Node_Str"");
  Lng=Double.valueOf(title[0]);
  Lat=Double.valueOf(title[1]);
  return (new Gcp(Lat,Lng));
}"
95428,"private void readPlacemark(XmlPullParser parser) throws XmlPullParserException, IOException {
  parser.require(XmlPullParser.START_TAG,ns,""String_Node_Str"");
  gcp point=null;
  while (parser.next() != XmlPullParser.END_TAG) {
    if (parser.getEventType() != XmlPullParser.START_TAG) {
      continue;
    }
    String name=parser.getName();
    if (name.equals(""String_Node_Str"")) {
      point=readPoint(parser);
      if (point != null) {
        gcpList.add(point);
      }
    }
 else {
      skip(parser);
    }
  }
}","private void readPlacemark(XmlPullParser parser) throws XmlPullParserException, IOException {
  parser.require(XmlPullParser.START_TAG,ns,""String_Node_Str"");
  Gcp point=null;
  while (parser.next() != XmlPullParser.END_TAG) {
    if (parser.getEventType() != XmlPullParser.START_TAG) {
      continue;
    }
    String name=parser.getName();
    if (name.equals(""String_Node_Str"")) {
      point=readPoint(parser);
      if (point != null) {
        gcpList.add(point);
      }
    }
 else {
      skip(parser);
    }
  }
}"
95429,"public List<gcp> parse(InputStream in) throws XmlPullParserException, IOException {
  gcpList=new ArrayList<gcp>();
  XmlPullParser parser=Xml.newPullParser();
  parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES,false);
  parser.setInput(in,null);
  parser.nextTag();
  readFeed(parser);
  return gcpList;
}","public List<Gcp> parse(InputStream in) throws XmlPullParserException, IOException {
  gcpList=new ArrayList<Gcp>();
  XmlPullParser parser=Xml.newPullParser();
  parser.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES,false);
  parser.setInput(in,null);
  parser.nextTag();
  readFeed(parser);
  return gcpList;
}"
95430,"private gcp readPoint(XmlPullParser parser) throws IOException, XmlPullParserException {
  gcp point=null;
  while (parser.next() != XmlPullParser.END_TAG) {
    if (parser.getEventType() != XmlPullParser.START_TAG) {
      continue;
    }
    String name=parser.getName();
    if (name.equals(""String_Node_Str"")) {
      point=readCoordinate(parser);
    }
 else {
      skip(parser);
    }
  }
  return point;
}","private Gcp readPoint(XmlPullParser parser) throws IOException, XmlPullParserException {
  Gcp point=null;
  while (parser.next() != XmlPullParser.END_TAG) {
    if (parser.getEventType() != XmlPullParser.START_TAG) {
      continue;
    }
    String name=parser.getName();
    if (name.equals(""String_Node_Str"")) {
      point=readCoordinate(parser);
    }
 else {
      skip(parser);
    }
  }
  return point;
}"
95431,"public static MarkerOptions build(gcp gcp){
  return new MarkerOptions().position(gcp.coord).title(String.valueOf(0)).icon(getIcon(gcp)).anchor((float)0.5,(float)0.5);
}","public static MarkerOptions build(Gcp gcp){
  return new MarkerOptions().position(gcp.coord).title(String.valueOf(0)).icon(getIcon(gcp)).anchor((float)0.5,(float)0.5);
}"
95432,"public static void update(Marker marker,gcp gcp){
  marker.setPosition(gcp.coord);
  marker.setTitle(String.valueOf(0));
  marker.setIcon(getIcon(gcp));
}","public static void update(Marker marker,Gcp gcp){
  marker.setPosition(gcp.coord);
  marker.setTitle(String.valueOf(0));
  marker.setIcon(getIcon(gcp));
}"
95433,"private static BitmapDescriptor getIcon(gcp gcp){
  if (gcp.isMarked) {
    return BitmapDescriptorFactory.fromResource(R.drawable.placemark_circle_red);
  }
 else {
    return BitmapDescriptorFactory.fromResource(R.drawable.placemark_circle_blue);
  }
}","private static BitmapDescriptor getIcon(Gcp gcp){
  if (gcp.isMarked) {
    return BitmapDescriptorFactory.fromResource(R.drawable.placemark_circle_red);
  }
 else {
    return BitmapDescriptorFactory.fromResource(R.drawable.placemark_circle_blue);
  }
}"
95434,"private void writeWaypointsLines(FileOutputStream out) throws IOException {
  for (int i=0; i < waypoints.size(); i++) {
    out.write(String.format(Locale.ENGLISH,""String_Node_Str"",i + 1,0,16,waypoints.get(i).getCoord().latitude,waypoints.get(i).getCoord().longitude,waypoints.get(i).getHeight()).getBytes());
  }
}","private void writeWaypointsLines(FileOutputStream out) throws IOException {
  for (int i=0; i < waypoints.size(); i++) {
    waypoint wp=waypoints.get(i);
    out.write(String.format(Locale.ENGLISH,""String_Node_Str"",i + 1,wp.getFrame(),wp.getCmd().getType(),wp.getCoord().latitude,wp.getCoord().longitude,wp.getHeight()).getBytes());
  }
}"
95435,"private void addRow(waypoint wp,int i){
  wp.setNumber(i);
  MissionRow row=new MissionRow(this,wp);
  table.addView(row);
}","private void addRow(waypoint wp,int i){
  MissionRow row=new MissionRow(this,wp);
  table.addView(row);
}"
95436,"private void parseWaypointLines(BufferedReader reader) throws IOException {
  String line;
  waypoints.clear();
  while ((line=reader.readLine()) != null) {
    String[] RowData=line.split(""String_Node_Str"");
    waypoints.add(new waypoint(Double.valueOf(RowData[8]),Double.valueOf(RowData[9]),Double.valueOf(RowData[10])));
  }
}","private void parseWaypointLines(BufferedReader reader) throws IOException {
  String line;
  waypoints.clear();
  while ((line=reader.readLine()) != null) {
    String[] RowData=line.split(""String_Node_Str"");
    waypoint wp=new waypoint(Double.valueOf(RowData[8]),Double.valueOf(RowData[9]),Double.valueOf(RowData[10]));
    wp.setNumber(Integer.valueOf(RowData[0]));
    wp.setFrame(Integer.valueOf(RowData[2]));
    wp.setCmd(ApmCommands.getCmd(Integer.valueOf(RowData[3])));
    wp.setParameters(Float.valueOf(RowData[4]),Float.valueOf(RowData[5]),Float.valueOf(RowData[6]),Float.valueOf(RowData[7]));
    waypoints.add(wp);
  }
}"
95437,"public void update(Drone drone,Polygon polygon){
  mMap.clear();
  homeMarker.invalidate();
  waypointMarkers.clear();
  polygonMarkers.clear();
  homeMarker.update(drone);
  int i=0;
  for (  MarkerOptions waypoint : getMissionMarkers(drone)) {
    waypointMarkers.put(i++,mMap.addMarker(waypoint));
  }
  mMap.addPolyline(getMissionPath(drone));
  i=0;
  for (  MarkerOptions point : getPolygonMarkers(polygon)) {
    polygonMarkers.put(i++,mMap.addMarker(point));
  }
  mMap.addPolyline(getPolygonPath(polygon));
}","public void update(Drone drone,Polygon polygon){
  mMap.clear();
  homeMarker.invalidate();
  waypointMarkers.clear();
  polygonMarkers.clear();
  mMap.addTileOverlay(new TileOverlayOptions().tileProvider(new LocalMapTileProvider())).setZIndex(-1);
  homeMarker.update(drone);
  int i=0;
  for (  MarkerOptions point : getPolygonMarkers(polygon)) {
    polygonMarkers.put(i++,mMap.addMarker(point));
  }
  mMap.addPolyline(getPolygonPath(polygon));
  i=0;
  for (  MarkerOptions waypoint : getMissionMarkers(drone)) {
    waypointMarkers.put(i++,mMap.addMarker(waypoint));
  }
  mMap.addPolyline(getMissionPath(drone));
}"
95438,"public void zoomToLastKnowPosition(){
  mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(drone.GPS.getPosition(),16));
}","public void zoomToLastKnowPosition(){
  if (drone.GPS.isPositionValid()) {
    mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(drone.GPS.getPosition(),16));
  }
 else {
    Toast.makeText(getActivity(),""String_Node_Str"",Toast.LENGTH_SHORT).show();
  }
}"
95439,"private void setupOfflineMapOverlay(){
  clearTileCache();
  GoogleMap mMap=getMap();
  mMap.setMapType(GoogleMap.MAP_TYPE_NONE);
  mMap.addTileOverlay(new TileOverlayOptions().tileProvider(new LocalMapTileProvider()));
}","private void setupOfflineMapOverlay(){
  GoogleMap mMap=getMap();
  mMap.setMapType(GoogleMap.MAP_TYPE_NONE);
  TileOverlay tileOverlay=mMap.addTileOverlay(new TileOverlayOptions().tileProvider(new LocalMapTileProvider()));
  tileOverlay.setZIndex(-1);
  tileOverlay.clearTileCache();
}"
95440,"private void checkIntent(){
  Intent intent=getIntent();
  String action=intent.getAction();
  String type=intent.getType();
  if (Intent.ACTION_VIEW.equals(action) && type != null) {
    Toast.makeText(this,intent.getData().getPath(),Toast.LENGTH_LONG).show();
    KmlParser parser=(new KmlParser());
    boolean fileIsOpen=parser.openGCPFile(intent.getData().getPath());
    if (fileIsOpen) {
      putListToGcp(parser.gcpList);
    }
  }
}","private void checkIntent(){
  Intent intent=getIntent();
  String action=intent.getAction();
  String type=intent.getType();
  if (Intent.ACTION_VIEW.equals(action) && type != null) {
    Toast.makeText(this,intent.getData().getPath(),Toast.LENGTH_LONG).show();
    GcpReader parser=(new GcpReader());
    boolean fileIsOpen=parser.openGCPFile(intent.getData().getPath());
    if (fileIsOpen) {
      putListToGcp(parser.gcpList);
    }
  }
}"
95441,"@Override protected void onDataLoaded(FileReader reader){
  onGcpFileLoaded(((KmlParser)reader).gcpList);
}","@Override protected void onDataLoaded(FileReader reader){
  onGcpFileLoaded(((GcpReader)reader).gcpList);
}"
95442,"@Override protected FileReader createReader(){
  return new KmlParser();
}","@Override protected FileReader createReader(){
  return new GcpReader();
}"
95443,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup viewGroup,Bundle bundle){
  View view=super.onCreateView(inflater,viewGroup,bundle);
  mMap=getMap();
  drone=((SuperActivity)getActivity()).app.drone;
  droneMarker=new DroneMarker(this);
  addFlightPathToMap();
  addMissionPathToMap();
  getPreferences();
  drone.setMapListner(droneMarker);
  mMap.setOnMapLongClickListener(this);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup viewGroup,Bundle bundle){
  View view=super.onCreateView(inflater,viewGroup,bundle);
  mMap=getMap();
  drone=((SuperActivity)getActivity()).app.drone;
  droneMarker=new DroneMarker(this);
  homeMarker=new HomeMarker(this.mMap);
  guidedMarker=new GuidedMarker(mMap);
  addFlightPathToMap();
  addMissionPathToMap();
  getPreferences();
  drone.setMapListner(droneMarker);
  mMap.setOnMapLongClickListener(this);
  return view;
}"
95444,"/** 
 * Finds the line that has the start or tip closest to a point.
 * @param point Point to the distance will be minimized
 * @param list A list of lines to search
 * @return The closest Line
 */
static LineLatLng findClosestLine(LatLng point,List<LineLatLng> list){
  LineLatLng answer=list.get(0);
  double shortest=Double.MAX_VALUE;
  for (  LineLatLng line : list) {
    double ans1=getDistance(point,line.line.p1);
    double ans2=getDistance(point,line.line.p2);
    LatLng shorterpnt=ans1 < ans2 ? line.line.p1 : line.line.p2;
    if (shortest > getDistance(point,shorterpnt)) {
      answer=line;
      shortest=getDistance(point,shorterpnt);
    }
  }
  return answer;
}","/** 
 * Finds the line that has the start or tip closest to a point.
 * @param point Point to the distance will be minimized
 * @param list A list of lines to search
 * @return The closest Line
 */
static LineLatLng findClosestLine(LatLng point,List<LineLatLng> list){
  LineLatLng answer=list.get(0);
  double shortest=Double.MAX_VALUE;
  for (  LineLatLng line : list) {
    double ans1=getDistance(point,line.p1);
    double ans2=getDistance(point,line.p2);
    LatLng shorterpnt=ans1 < ans2 ? line.p1 : line.p2;
    if (shortest > getDistance(point,shorterpnt)) {
      answer=line;
      shortest=getDistance(point,shorterpnt);
    }
  }
  return answer;
}"
95445,"private boolean writeMission(){
  MissionWriter missionWriter=new MissionWriter(drone.home,waypoints);
  return missionWriter.saveWaypoints();
}","private boolean writeMission(){
  if (waypoints.size() > 1) {
    waypoint home=waypoints.get(0);
    waypoints.remove(0);
    MissionWriter missionWriter=new MissionWriter(home,waypoints);
    return missionWriter.saveWaypoints();
  }
 else {
    return false;
  }
}"
95446,"private void startRecordMe(){
  Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,MIN_TIME_MS,MIN_DISTANCE_M,this);
  recordMeEnabled=true;
  saveWaypointsToFile();
}","private void startRecordMe(){
  Toast.makeText(context,""String_Node_Str"",Toast.LENGTH_SHORT).show();
  locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,MIN_TIME_MS,MIN_DISTANCE_M,this);
  recordMeEnabled=true;
}"
95447,"private void finishRecordMe(){
  locationManager.removeUpdates(this);
  recordMeEnabled=false;
  saveWaypointsToFile();
}","private void finishRecordMe(){
  locationManager.removeUpdates(this);
  recordMeEnabled=false;
  saveWaypointsToFile();
  waypoints.clear();
}"
95448,"@Override public void onDroneTypeChanged(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  fligthModeSpinner.updateModeSpinner(drone);
  flightMapFragment.droneMarker.updateDroneMarkers(flightMapFragment);
}","@Override public void onDroneTypeChanged(){
  Log.d(""String_Node_Str"",""String_Node_Str"");
  fligthModeSpinner.updateModeSpinner(drone);
  flightMapFragment.droneMarker.updateDroneMarkers();
}"
95449,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup viewGroup,Bundle bundle){
  View view=super.onCreateView(inflater,viewGroup,bundle);
  mMap=getMap();
  drone=((SuperActivity)getActivity()).app.drone;
  drone.setMapListner(this);
  droneMarker.buildBitmaps(this,drone.getType());
  addFlightPathToMap();
  addMissionPathToMap();
  getPreferences();
  mMap.setOnMapLongClickListener(this);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup viewGroup,Bundle bundle){
  View view=super.onCreateView(inflater,viewGroup,bundle);
  mMap=getMap();
  drone=((SuperActivity)getActivity()).app.drone;
  drone.setMapListner(droneMarker);
  droneMarker.buildBitmaps(this,drone.getType());
  addFlightPathToMap();
  addMissionPathToMap();
  getPreferences();
  mMap.setOnMapLongClickListener(this);
  return view;
}"
95450,"public void updatePosition(FlightMapFragment flightMapFragment,double yaw,LatLng coord){
  double correctHeading=(yaw - flightMapFragment.getMapRotation() + 360) % 360;
  int index=(int)(correctHeading / DRONE_MIN_ROTATION);
  try {
    droneMarker.setPosition(coord);
    droneMarker.setIcon(droneBitmaps[index]);
    if (!flightMapFragment.hasBeenZoomed) {
      flightMapFragment.hasBeenZoomed=true;
      flightMapFragment.mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(coord,16));
    }
    if (flightMapFragment.isAutoPanEnabled) {
      flightMapFragment.mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(droneMarker.getPosition(),17));
    }
  }
 catch (  Exception e) {
  }
}","public void updatePosition(double yaw,LatLng coord){
  double correctHeading=(yaw - flightMapFragment.getMapRotation() + 360) % 360;
  int index=(int)(correctHeading / DRONE_MIN_ROTATION);
  try {
    droneMarker.setPosition(coord);
    droneMarker.setIcon(droneBitmaps[index]);
    if (!flightMapFragment.hasBeenZoomed) {
      flightMapFragment.hasBeenZoomed=true;
      flightMapFragment.mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(coord,16));
    }
    if (flightMapFragment.isAutoPanEnabled) {
      flightMapFragment.mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(droneMarker.getPosition(),17));
    }
  }
 catch (  Exception e) {
  }
}"
95451,"public void updateDroneMarkers(FlightMapFragment flightMapFragment){
  buildBitmaps(flightMapFragment,flightMapFragment.drone.getType());
  droneMarker=flightMapFragment.mMap.addMarker(new MarkerOptions().anchor((float)0.5,(float)0.5).position(new LatLng(0,0)).icon(droneBitmaps[0]).visible(false));
}","public void updateDroneMarkers(){
  buildBitmaps(flightMapFragment,flightMapFragment.drone.getType());
  droneMarker=flightMapFragment.mMap.addMarker(new MarkerOptions().anchor((float)0.5,(float)0.5).position(new LatLng(0,0)).icon(droneBitmaps[0]).visible(false));
}"
95452,"public void onDroneUpdate(FlightMapFragment flightMapFragment){
  updatePosition(flightMapFragment,flightMapFragment.drone.getYaw(),flightMapFragment.drone.getPosition());
  flightMapFragment.addFlithPathPoint(flightMapFragment.drone.getPosition());
}","public void onDroneUpdate(){
  updatePosition(flightMapFragment.drone.getYaw(),flightMapFragment.drone.getPosition());
  flightMapFragment.addFlithPathPoint(flightMapFragment.drone.getPosition());
}"
95453,"public Bitmap getBitmap(FlightMapFragment flightMapFragment,int type){
switch (type) {
case MAV_TYPE.MAV_TYPE_TRICOPTER:
case MAV_TYPE.MAV_TYPE_QUADROTOR:
case MAV_TYPE.MAV_TYPE_HEXAROTOR:
case MAV_TYPE.MAV_TYPE_OCTOROTOR:
case MAV_TYPE.MAV_TYPE_HELICOPTER:
    return BitmapFactory.decodeResource(flightMapFragment.getResources(),drawable.quad);
case MAV_TYPE.MAV_TYPE_FIXED_WING:
default :
  return BitmapFactory.decodeResource(flightMapFragment.getResources(),drawable.plane);
}
}","public Bitmap getBitmap(int type){
switch (type) {
case MAV_TYPE.MAV_TYPE_TRICOPTER:
case MAV_TYPE.MAV_TYPE_QUADROTOR:
case MAV_TYPE.MAV_TYPE_HEXAROTOR:
case MAV_TYPE.MAV_TYPE_OCTOROTOR:
case MAV_TYPE.MAV_TYPE_HELICOPTER:
    return BitmapFactory.decodeResource(flightMapFragment.getResources(),drawable.quad);
case MAV_TYPE.MAV_TYPE_FIXED_WING:
default :
  return BitmapFactory.decodeResource(flightMapFragment.getResources(),drawable.plane);
}
}"
95454,"public BitmapDescriptor generateIcon(FlightMapFragment flightMapFragment,float heading,int type){
  Bitmap planeBitmap=flightMapFragment.droneMarker.getBitmap(flightMapFragment,type);
  Matrix matrix=new Matrix();
  matrix.postRotate(heading - flightMapFragment.mMap.getCameraPosition().bearing);
  return BitmapDescriptorFactory.fromBitmap(Bitmap.createBitmap(planeBitmap,0,0,planeBitmap.getWidth(),planeBitmap.getHeight(),matrix,true));
}","public BitmapDescriptor generateIcon(float heading,int type){
  Bitmap planeBitmap=flightMapFragment.droneMarker.getBitmap(type);
  Matrix matrix=new Matrix();
  matrix.postRotate(heading - flightMapFragment.mMap.getCameraPosition().bearing);
  return BitmapDescriptorFactory.fromBitmap(Bitmap.createBitmap(planeBitmap,0,0,planeBitmap.getWidth(),planeBitmap.getHeight(),matrix,true));
}"
95455,"public void buildBitmaps(FlightMapFragment flightMapFragment,int type){
  int count=360 / DRONE_MIN_ROTATION;
  droneBitmaps=new BitmapDescriptor[count];
  for (int i=0; i < count; i++) {
    droneBitmaps[i]=flightMapFragment.droneMarker.generateIcon(flightMapFragment,i * DRONE_MIN_ROTATION,type);
  }
}","public void buildBitmaps(FlightMapFragment flightMapFragment,int type){
  int count=360 / DRONE_MIN_ROTATION;
  droneBitmaps=new BitmapDescriptor[count];
  for (int i=0; i < count; i++) {
    droneBitmaps[i]=flightMapFragment.droneMarker.generateIcon(i * DRONE_MIN_ROTATION,type);
  }
}"
95456,"private String[] splitLine(String line) throws Exception {
  String[] RowData=line.split(""String_Node_Str"");
  if (RowData.length != 2) {
    throw new Exception(""String_Node_Str"");
  }
  return RowData;
}","private String[] splitLine(String line) throws Exception {
  String[] RowData=line.split(""String_Node_Str"");
  if (RowData.length != 2) {
    throw new Exception(""String_Node_Str"");
  }
  RowData[0]=RowData[0].trim();
  return RowData;
}"
95457,"@Override public boolean onMenuItemSelected(int featureId,MenuItem item){
switch (item.getItemId()) {
case R.id.menu_load_parameters:
    app.parameterMananger.getWaypoints();
  return true;
default :
return super.onMenuItemSelected(featureId,item);
}
}","@Override public boolean onMenuItemSelected(int featureId,MenuItem item){
switch (item.getItemId()) {
case R.id.menu_load_parameters:
    app.parameterMananger.getAllParameters();
  return true;
default :
return super.onMenuItemSelected(featureId,item);
}
}"
95458,"private void setupMapUI(){
  GoogleMap mMap=getMap();
  mMap.setMyLocationEnabled(true);
  UiSettings mUiSettings=mMap.getUiSettings();
  mUiSettings.setMyLocationButtonEnabled(true);
  mUiSettings.setCompassEnabled(true);
  mUiSettings.setTiltGesturesEnabled(false);
}","private void setupMapUI(){
  GoogleMap mMap=getMap();
  if (mMap != null) {
    mMap.setMyLocationEnabled(true);
    UiSettings mUiSettings=mMap.getUiSettings();
    mUiSettings.setMyLocationButtonEnabled(true);
    mUiSettings.setCompassEnabled(true);
    mUiSettings.setTiltGesturesEnabled(false);
  }
}"
95459,"public void sendMavPacket(MAVLinkPacket pack){
  Message msg=Message.obtain(null,MAVLinkService.MSG_SEND_DATA);
  Bundle data=new Bundle();
  data.putSerializable(""String_Node_Str"",pack);
  msg.setData(data);
  try {
    mService.send(msg);
  }
 catch (  RemoteException e) {
    e.printStackTrace();
  }
}","public void sendMavPacket(MAVLinkPacket pack){
  Message msg=Message.obtain(null,MAVLinkService.MSG_SEND_DATA);
  Bundle data=new Bundle();
  data.putSerializable(""String_Node_Str"",pack);
  msg.setData(data);
  try {
    mService.send(msg);
  }
 catch (  RemoteException e) {
    e.printStackTrace();
  }
catch (  NullPointerException e) {
    e.printStackTrace();
  }
}"
95460,"public double getMapRotation(){
  return getMap().getCameraPosition().bearing;
}","public double getMapRotation(){
  GoogleMap map=getMap();
  if (map != null) {
    return map.getCameraPosition().bearing;
  }
 else {
    return 0;
  }
}"
95461,"public void notifyDisconnected(){
  connectButton.setTitle(getResources().getString(R.string.menu_connect));
}","public void notifyDisconnected(){
  if (connectButton != null) {
    connectButton.setTitle(getResources().getString(R.string.menu_connect));
  }
}"
95462,"public void notifyConnected(){
  connectButton.setTitle(getResources().getString(R.string.menu_disconnect));
}","public void notifyConnected(){
  if (connectButton != null) {
    connectButton.setTitle(getResources().getString(R.string.menu_disconnect));
  }
}"
95463,"@Override protected String doInBackground(String... message){
  parser=new Parser();
  try {
    if (logEnabled) {
      logWriter=FileManager.getTLogFileStream();
    }
    getTCPStream();
    MAVLinkMessage m;
    while (connected) {
      int data;
      if ((data=mavIn.read()) >= 0) {
        if (logEnabled) {
          logWriter.write(data);
        }
        m=parser.mavlink_parse_char(data);
        if (m != null) {
          receivedCount++;
          publishProgress(m);
        }
      }
    }
  }
 catch (  UnknownHostException e) {
    e.printStackTrace();
  }
catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    try {
      if (socket != null) {
        socket.close();
      }
      if (logEnabled) {
        logWriter.close();
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return null;
}","@Override protected String doInBackground(String... message){
  parser=new Parser();
  try {
    if (logEnabled) {
      logWriter=FileManager.getTLogFileStream();
    }
    getTCPStream();
    MAVLinkMessage m;
    int data;
    while (connected) {
      if ((data=mavIn.read()) >= 0) {
        if (logEnabled) {
          logWriter.write(data);
        }
        m=parser.mavlink_parse_char(data);
        if (m != null) {
          receivedCount++;
          publishProgress(m);
        }
      }
    }
  }
 catch (  UnknownHostException e) {
    e.printStackTrace();
  }
catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    try {
      if (socket != null) {
        socket.close();
      }
      if (logEnabled) {
        logWriter.close();
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  return null;
}"
95464,"/** 
 * Check if the size of the Payload is equal to the ""len"" byte
 */
public boolean payloadIsFilled(){
  return (payload.size() == len);
}","/** 
 * Check if the size of the Payload is equal to the ""len"" byte
 */
public boolean payloadIsFilled(){
  if (payload.size() >= MAVLinkPayload.MAX_PAYLOAD_SIZE - 1) {
    Log.d(""String_Node_Str"",""String_Node_Str"");
    return true;
  }
  return (payload.size() == len);
}"
95465,"/** 
 * Encode this packet for transmission. 
 * @return Array with bytes to be transmitted
 */
public byte[] encodePacket(){
  byte[] buffer=new byte[6 + len + 2];
  int i=0;
  buffer[i++]=(byte)MAVLINK_STX;
  buffer[i++]=(byte)len;
  buffer[i++]=(byte)seq;
  buffer[i++]=(byte)sysid;
  buffer[i++]=(byte)compid;
  buffer[i++]=(byte)msgid;
  for (  byte b : payload.payload) {
    buffer[i++]=b;
  }
  generateCRC();
  buffer[i++]=(byte)(crc.getLSB());
  buffer[i++]=(byte)(crc.getMSB());
  return buffer;
}","/** 
 * Encode this packet for transmission. 
 * @return Array with bytes to be transmitted
 */
public byte[] encodePacket(){
  byte[] buffer=new byte[6 + len + 2];
  int i=0;
  buffer[i++]=(byte)MAVLINK_STX;
  buffer[i++]=(byte)len;
  buffer[i++]=(byte)seq;
  buffer[i++]=(byte)sysid;
  buffer[i++]=(byte)compid;
  buffer[i++]=(byte)msgid;
  for (int j=0; j < payload.size(); j++) {
    buffer[i++]=payload.payload.get(j);
  }
  generateCRC();
  buffer[i++]=(byte)(crc.getLSB());
  buffer[i++]=(byte)(crc.getMSB());
  return buffer;
}"
95466,"public void add(byte c){
  payload.add(c);
}","public void add(byte c){
  payload.put(c);
}"
95467,"public MAVLinkPayload(){
  payload=new ArrayList<Byte>();
}","public MAVLinkPayload(){
  payload=ByteBuffer.allocate(MAX_PAYLOAD_SIZE);
}"
95468,"public int size(){
  return payload.size();
}","public int size(){
  return payload.position();
}"
95469,"public List<Byte> getData(){
  return payload;
}","public ByteBuffer getData(){
  return payload;
}"
95470,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup viewGroup,Bundle bundle){
  View view=super.onCreateView(inflater,viewGroup,bundle);
  mMap.setMyLocationEnabled(true);
  mMap.setMapType(GoogleMap.MAP_TYPE_SATELLITE);
  mMap.setOnMarkerDragListener(this);
  UiSettings mUiSettings=mMap.getUiSettings();
  mUiSettings.setMyLocationButtonEnabled(true);
  mUiSettings.setCompassEnabled(true);
  mUiSettings.setTiltGesturesEnabled(false);
  mMap.setOnMapLongClickListener(this);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup viewGroup,Bundle bundle){
  View view=super.onCreateView(inflater,viewGroup,bundle);
  mMap=getMap();
  mMap.setMyLocationEnabled(true);
  mMap.setMapType(GoogleMap.MAP_TYPE_SATELLITE);
  mMap.setOnMarkerDragListener(this);
  UiSettings mUiSettings=mMap.getUiSettings();
  mUiSettings.setMyLocationButtonEnabled(true);
  mUiSettings.setCompassEnabled(true);
  mUiSettings.setTiltGesturesEnabled(false);
  mMap.setOnMapLongClickListener(this);
  return view;
}"
95471,"public void updateDronePosition(float heading,LatLng coord){
  mMap.clear();
  addDroneMarkerToMap(heading,coord);
}","public void updateDronePosition(float heading,LatLng coord){
  DroneMarker.setPosition(coord);
}"
95472,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup viewGroup,Bundle bundle){
  View view=super.onCreateView(inflater,viewGroup,bundle);
  planeBitmap=BitmapFactory.decodeResource(getResources(),R.drawable.planetracker);
  mMap=getMap();
  mMap.setMyLocationEnabled(true);
  mMap.setMapType(GoogleMap.MAP_TYPE_SATELLITE);
  UiSettings mUiSettings=mMap.getUiSettings();
  mUiSettings.setMyLocationButtonEnabled(true);
  mUiSettings.setCompassEnabled(true);
  mUiSettings.setTiltGesturesEnabled(false);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup viewGroup,Bundle bundle){
  View view=super.onCreateView(inflater,viewGroup,bundle);
  planeBitmap=BitmapFactory.decodeResource(getResources(),R.drawable.planetracker);
  mMap=getMap();
  mMap.setMyLocationEnabled(true);
  mMap.setMapType(GoogleMap.MAP_TYPE_SATELLITE);
  UiSettings mUiSettings=mMap.getUiSettings();
  mUiSettings.setMyLocationButtonEnabled(true);
  mUiSettings.setCompassEnabled(true);
  mUiSettings.setTiltGesturesEnabled(false);
  addDroneMarkerToMap();
  return view;
}"
95473,"private void addDroneMarkerToMap(float heading,LatLng coord){
  mMap.addMarker(new MarkerOptions().position(coord).anchor((float)0.5,(float)0.5).icon(BitmapDescriptorFactory.fromBitmap(planeBitmap)));
}","private void addDroneMarkerToMap(){
  DroneMarker=mMap.addMarker(new MarkerOptions().anchor((float)0.5,(float)0.5).position(new LatLng(0,0)).icon(BitmapDescriptorFactory.fromBitmap(planeBitmap)));
}"
95474,"private void updateMarkers(){
  int i=1;
  mMap.clear();
  for (  waypoint point : WPlist) {
    if (point.set) {
      mMap.addMarker(new MarkerOptions().position(point.coord).title(String.valueOf(i)).icon(BitmapDescriptorFactory.fromResource(R.drawable.placemark_circle_blue)).anchor((float)0.5,(float)0.5));
    }
 else {
      mMap.addMarker(new MarkerOptions().position(point.coord).title(String.valueOf(i)).icon(BitmapDescriptorFactory.fromResource(R.drawable.placemark_circle_red)).anchor((float)0.5,(float)0.5));
    }
    i++;
  }
}","private void updateMarkers(){
  int i=1;
  clearMap();
  for (  waypoint point : WPlist) {
    if (point.set) {
      mMap.addMarker(new MarkerOptions().position(point.coord).title(String.valueOf(i)).icon(BitmapDescriptorFactory.fromResource(R.drawable.placemark_circle_blue)).anchor((float)0.5,(float)0.5));
    }
 else {
      mMap.addMarker(new MarkerOptions().position(point.coord).title(String.valueOf(i)).icon(BitmapDescriptorFactory.fromResource(R.drawable.placemark_circle_red)).anchor((float)0.5,(float)0.5));
    }
    i++;
  }
}"
95475,"private void setUpMap(){
  mMap.setMyLocationEnabled(true);
  mMap.setMapType(GoogleMap.MAP_TYPE_NONE);
  Log.d(""String_Node_Str"",""String_Node_Str"");
  mMap.addTileOverlay(new TileOverlayOptions().tileProvider(new LocalMapTileProvider()));
}","private void setUpMap(){
  mMap.setMyLocationEnabled(true);
  mMap.setMapType(GoogleMap.MAP_TYPE_NONE);
  UiSettings mUiSettings=mMap.getUiSettings();
  mUiSettings.setMyLocationButtonEnabled(true);
  mUiSettings.setCompassEnabled(true);
  mUiSettings.setTiltGesturesEnabled(false);
  mMap.setOnMarkerClickListener(this);
  updateMarkers();
  Intent intent=getIntent();
  String action=intent.getAction();
  String type=intent.getType();
  if (Intent.ACTION_VIEW.equals(action) && type != null) {
    Toast.makeText(this,intent.getData().getPath(),Toast.LENGTH_LONG).show();
    openGCPFile(intent.getData().getPath());
    zoomToExtentsFixed();
  }
}"
95476,"private B registerOutputChannelIfCan(MessageChannel outputChannel){
  if (!(outputChannel instanceof FixedSubscriberChannelPrototype)) {
    this.integrationComponents.add(outputChannel);
    if (this.currentComponent != null) {
      String channelName=null;
      if (outputChannel instanceof MessageChannelReference) {
        channelName=((MessageChannelReference)outputChannel).getName();
      }
      if (this.currentComponent instanceof AbstractReplyProducingMessageHandler) {
        AbstractReplyProducingMessageHandler messageProducer=(AbstractReplyProducingMessageHandler)this.currentComponent;
        if (channelName != null) {
          messageProducer.setOutputChannelName(channelName);
        }
 else {
          messageProducer.setOutputChannel(outputChannel);
        }
      }
 else       if (this.currentComponent instanceof SourcePollingChannelAdapterSpec) {
        SourcePollingChannelAdapterFactoryBean pollingChannelAdapterFactoryBean=((SourcePollingChannelAdapterSpec)this.currentComponent).get().getT1();
        if (channelName != null) {
          pollingChannelAdapterFactoryBean.setOutputChannelName(channelName);
        }
 else {
          pollingChannelAdapterFactoryBean.setOutputChannel(outputChannel);
        }
      }
 else       if (this.currentComponent instanceof AbstractCorrelatingMessageHandler) {
        AbstractCorrelatingMessageHandler messageProducer=(AbstractCorrelatingMessageHandler)this.currentComponent;
        if (channelName != null) {
          messageProducer.setOutputChannelName(channelName);
        }
 else {
          messageProducer.setOutputChannel(outputChannel);
        }
      }
 else       if (this.currentComponent instanceof AbstractMessageRouter) {
        AbstractMessageRouter router=(AbstractMessageRouter)this.currentComponent;
        if (channelName != null) {
          router.setDefaultOutputChannelName(channelName);
        }
 else {
          router.setDefaultOutputChannel(outputChannel);
        }
      }
 else {
        throw new BeanCreationException(""String_Node_Str"" + this.currentComponent + ""String_Node_Str""+ ""String_Node_Str"");
      }
      this.currentComponent=null;
    }
  }
  return _this();
}","private B registerOutputChannelIfCan(MessageChannel outputChannel){
  if (!(outputChannel instanceof FixedSubscriberChannelPrototype)) {
    this.integrationComponents.add(outputChannel);
    if (this.currentComponent != null) {
      String channelName=null;
      if (outputChannel instanceof MessageChannelReference) {
        channelName=((MessageChannelReference)outputChannel).getName();
      }
      Object currentComponent=this.currentComponent;
      if (AopUtils.isAopProxy(currentComponent)) {
        currentComponent=extractProxyTarget(currentComponent);
      }
      if (currentComponent instanceof AbstractReplyProducingMessageHandler) {
        AbstractReplyProducingMessageHandler messageProducer=(AbstractReplyProducingMessageHandler)currentComponent;
        if (channelName != null) {
          messageProducer.setOutputChannelName(channelName);
        }
 else {
          messageProducer.setOutputChannel(outputChannel);
        }
      }
 else       if (currentComponent instanceof SourcePollingChannelAdapterSpec) {
        SourcePollingChannelAdapterFactoryBean pollingChannelAdapterFactoryBean=((SourcePollingChannelAdapterSpec)currentComponent).get().getT1();
        if (channelName != null) {
          pollingChannelAdapterFactoryBean.setOutputChannelName(channelName);
        }
 else {
          pollingChannelAdapterFactoryBean.setOutputChannel(outputChannel);
        }
      }
 else       if (currentComponent instanceof AbstractCorrelatingMessageHandler) {
        AbstractCorrelatingMessageHandler messageProducer=(AbstractCorrelatingMessageHandler)currentComponent;
        if (channelName != null) {
          messageProducer.setOutputChannelName(channelName);
        }
 else {
          messageProducer.setOutputChannel(outputChannel);
        }
      }
 else       if (this.currentComponent instanceof AbstractMessageRouter) {
        AbstractMessageRouter router=(AbstractMessageRouter)this.currentComponent;
        if (channelName != null) {
          router.setDefaultOutputChannelName(channelName);
        }
 else {
          router.setDefaultOutputChannel(outputChannel);
        }
      }
 else {
        throw new BeanCreationException(""String_Node_Str"" + currentComponent + ""String_Node_Str""+ ""String_Node_Str"");
      }
      this.currentComponent=null;
    }
  }
  return _this();
}"
95477,"@Bean public IntegrationFlow ftpMGetFlow(){
  return IntegrationFlows.from(""String_Node_Str"").handle(Ftp.outboundGateway(this.ftpSessionFactory,AbstractRemoteFileOutboundGateway.Command.MGET,""String_Node_Str"").options(AbstractRemoteFileOutboundGateway.Option.RECURSIVE).regexFileNameFilter(""String_Node_Str"").localDirectoryExpression(""String_Node_Str"").localFilenameGeneratorExpression(""String_Node_Str"")).channel(remoteFileOutputChannel()).get();
}","@Bean public IntegrationFlow ftpMGetFlow(){
  return IntegrationFlows.from(""String_Node_Str"").handle(ftpOutboundGateway()).channel(remoteFileOutputChannel()).get();
}"
95478,"@Override public void start(Stage primaryStage) throws Exception {
  MazePane pane=new MazePane(8,100);
  HBox hBox=new HBox(20,pane.btnFindPath,pane.btnClearPath);
  hBox.setAlignment(Pos.BASELINE_CENTER);
  hBox.setPadding(new Insets(10));
  BorderPane borderPane=new BorderPane(pane);
  borderPane.setBottom(hBox);
  Scene scene=new Scene(borderPane);
  primaryStage.setScene(scene);
  primaryStage.setTitle(""String_Node_Str"");
  primaryStage.show();
}","@Override public void start(Stage primaryStage) throws Exception {
  MazePane pane=new MazePane(8,100);
  HBox hBox=new HBox(20,pane.btnFindPath,pane.btnClearPath,pane.btnClearMarks);
  hBox.setAlignment(Pos.BASELINE_CENTER);
  hBox.setPadding(new Insets(10));
  BorderPane borderPane=new BorderPane(pane);
  borderPane.setBottom(hBox);
  Scene scene=new Scene(borderPane);
  primaryStage.setScene(scene);
  primaryStage.setTitle(""String_Node_Str"");
  primaryStage.show();
}"
95479,"MazePane(int size,int width){
  squares=new SquarePane[size][size];
  for (int i=0; i < squares.length; i++) {
    for (int k=0; k < squares[i].length; k++) {
      squares[i][k]=new SquarePane(width);
      add(squares[i][k],k,i);
    }
  }
  btnClearPath.setOnMouseClicked(e -> clearPath());
  btnFindPath.setOnAction(e -> findPath());
  setPadding(new Insets(10));
}","MazePane(int size,int width){
  squares=new SquarePane[size][size];
  for (int i=0; i < squares.length; i++) {
    for (int k=0; k < squares[i].length; k++) {
      squares[i][k]=new SquarePane(width);
      add(squares[i][k],k,i);
    }
  }
  squares[0][0].setDisable(true);
  squares[size - 1][size - 1].setDisable(true);
  btnClearPath.setOnMouseClicked(e -> clearPath());
  btnFindPath.setOnMouseClicked(e -> findPath());
  btnClearMarks.setOnMouseClicked(e -> clearMarks());
  setPadding(new Insets(10));
}"
95480,"private boolean findPath(int x,int y){
  squares[y][x].isFilled=true;
  if (isSquareRoute(x,y)) {
    squares[y][x].isFilled=false;
    return false;
  }
  if (x == squares[0].length - 1 && y == squares.length - 1) {
    squares[0][0].fillSquare();
    squares[y][x].fillSquare();
    return true;
  }
  if (x < squares.length - 1 && !squares[y][x + 1].isMarked() && !squares[y][x + 1].isFilled()) {
    if (findPath(x + 1,y)) {
      squares[y][x].fillSquare();
      return true;
    }
  }
  if (y < squares.length - 1 && !squares[y + 1][x].isMarked() && !squares[y + 1][x].isFilled()) {
    if (findPath(x,y + 1)) {
      squares[y][x].fillSquare();
      return true;
    }
  }
  if (x > 0 && !squares[y][x - 1].isMarked() && !squares[y][x - 1].isFilled()) {
    if (findPath(x - 1,y)) {
      squares[y][x].fillSquare();
      return true;
    }
  }
  if (y > 0 && !squares[y - 1][x].isMarked() && !squares[y - 1][x].isFilled()) {
    if (findPath(x,y - 1)) {
      squares[y][x].fillSquare();
      return true;
    }
  }
  squares[y][x].isFilled=false;
  return false;
}","private boolean findPath(int x,int y){
  squares[y][x].isFilled=true;
  if (isSquareRoute(x,y)) {
    squares[y][x].isFilled=false;
    return false;
  }
  if (x == squares[0].length - 1 && y == squares.length - 1) {
    squares[y][x].fillSquare();
    return true;
  }
  if (x < squares.length - 1 && !squares[y][x + 1].isMarked() && !squares[y][x + 1].isFilled()) {
    if (findPath(x + 1,y)) {
      squares[y][x].fillSquare();
      return true;
    }
  }
  if (y < squares.length - 1 && !squares[y + 1][x].isMarked() && !squares[y + 1][x].isFilled()) {
    if (findPath(x,y + 1)) {
      squares[y][x].fillSquare();
      return true;
    }
  }
  if (x > 0 && !squares[y][x - 1].isMarked() && !squares[y][x - 1].isFilled()) {
    if (findPath(x - 1,y)) {
      squares[y][x].fillSquare();
      return true;
    }
  }
  if (y > 0 && !squares[y - 1][x].isMarked() && !squares[y - 1][x].isFilled()) {
    if (findPath(x,y - 1)) {
      squares[y][x].fillSquare();
      return true;
    }
  }
  squares[y][x].isFilled=false;
  return false;
}"
95481,"private void toggleX(){
  ObservableList<Node> list=this.getChildren();
  if (list.size() > 1) {
    list.clear();
  }
 else {
    list.addAll(new Line(0,0,getWidth(),getHeight()),new Line(getWidth(),0,0,getHeight()));
  }
}","private void toggleX(){
  ObservableList<Node> list=this.getChildren();
  if (list.size() > 0) {
    list.clear();
  }
 else {
    list.addAll(new Line(0,0,getWidth(),getHeight()),new Line(getWidth(),0,0,getHeight()));
  }
}"
95482,"private void clearPath(){
  x=0;
  y=0;
  for (int i=0; i < squares.length; i++) {
    for (int k=0; k < squares[i].length; k++) {
      if (!squares[i][k].isMarked()) {
        squares[i][k].reset();
      }
    }
  }
}","private void clearPath(){
  setStyle(""String_Node_Str"");
  isFilled=false;
}"
95483,"@Test public void attributeListenerTest(){
  entity=createDefaultEntity();
  final TestAttributeListener<Integer> testAttributeListener=new TestAttributeListener<Integer>();
  Assert.assertFalse(testAttributeListener.present);
  entity.addAttributeListener(""String_Node_Str"",Attributes.INTEGER_TYPE,testAttributeListener);
  Assert.assertTrue(entity.getAttributeListeners(""String_Node_Str"",Attributes.INTEGER_TYPE).contains(testAttributeListener));
  Assert.assertTrue(entity.getAttributeListenerNames().contains(""String_Node_Str""));
  Assert.assertTrue(entity.getAttributeListenerTypes(""String_Node_Str"").contains(Attributes.INTEGER_TYPE));
  entity.setAttribute(""String_Node_Str"",Attributes.INTEGER_TYPE,10);
  Assert.assertTrue(testAttributeListener.present);
  Assert.assertEquals(10,testAttributeListener.val);
  entity.setAttribute(""String_Node_Str"",Attributes.INTEGER_TYPE,42);
  entity.fireAttributeChanged(""String_Node_Str"",Attributes.INTEGER_TYPE);
  Assert.assertEquals(42,testAttributeListener.val);
  entity.removeAttribute(""String_Node_Str"",Attributes.INTEGER_TYPE);
  Assert.assertFalse(testAttributeListener.present);
  entity.removeAttributeListener(""String_Node_Str"",Attributes.INTEGER_TYPE,testAttributeListener);
  Assert.assertFalse(entity.getAttributeListeners(""String_Node_Str"",Attributes.INTEGER_TYPE).contains(testAttributeListener));
  entity.addAttributeListener(""String_Node_Str"",Attributes.INTEGER_TYPE,testAttributeListener);
  Assert.assertTrue(entity.getAttributeListeners(""String_Node_Str"",Attributes.INTEGER_TYPE).contains(testAttributeListener));
  entity.removeAttributeListeners(""String_Node_Str"",Attributes.INTEGER_TYPE);
  Assert.assertFalse(entity.getAttributeListeners(""String_Node_Str"",Attributes.INTEGER_TYPE).contains(testAttributeListener));
  entity.addAttributeListener(""String_Node_Str"",Attributes.INTEGER_TYPE,testAttributeListener);
  Assert.assertTrue(entity.getAttributeListeners(""String_Node_Str"",Attributes.INTEGER_TYPE).contains(testAttributeListener));
  entity.removeAttributeListeners();
  Assert.assertFalse(entity.getAttributeListeners(""String_Node_Str"",Attributes.INTEGER_TYPE).contains(testAttributeListener));
}","@Test public void attributeListenerTest(){
  entity=createDefaultEntity();
  final TestAttributeListener testAttributeListener=new TestAttributeListener();
  Assert.assertFalse(testAttributeListener.present);
  entity.addAttributeListener(""String_Node_Str"",Attributes.INTEGER_TYPE,testAttributeListener);
  Assert.assertTrue(entity.getAttributeListeners(""String_Node_Str"",Attributes.INTEGER_TYPE).contains(testAttributeListener));
  Assert.assertTrue(entity.getAttributeListenerNames().contains(""String_Node_Str""));
  Assert.assertTrue(entity.getAttributeListenerTypes(""String_Node_Str"").contains(Attributes.INTEGER_TYPE));
  entity.setAttribute(""String_Node_Str"",Attributes.INTEGER_TYPE,10);
  Assert.assertTrue(testAttributeListener.present);
  Assert.assertEquals(10,testAttributeListener.val);
  entity.setAttribute(""String_Node_Str"",Attributes.INTEGER_TYPE,42);
  entity.fireAttributeChanged(""String_Node_Str"",Attributes.INTEGER_TYPE);
  Assert.assertEquals(42,testAttributeListener.val);
  entity.removeAttribute(""String_Node_Str"",Attributes.INTEGER_TYPE);
  Assert.assertFalse(testAttributeListener.present);
  entity.removeAttributeListener(""String_Node_Str"",Attributes.INTEGER_TYPE,testAttributeListener);
  Assert.assertFalse(entity.getAttributeListeners(""String_Node_Str"",Attributes.INTEGER_TYPE).contains(testAttributeListener));
  entity.addAttributeListener(""String_Node_Str"",Attributes.INTEGER_TYPE,testAttributeListener);
  Assert.assertTrue(entity.getAttributeListeners(""String_Node_Str"",Attributes.INTEGER_TYPE).contains(testAttributeListener));
  entity.removeAttributeListeners(""String_Node_Str"",Attributes.INTEGER_TYPE);
  Assert.assertFalse(entity.getAttributeListeners(""String_Node_Str"",Attributes.INTEGER_TYPE).contains(testAttributeListener));
  entity.addAttributeListener(""String_Node_Str"",Attributes.INTEGER_TYPE,testAttributeListener);
  Assert.assertTrue(entity.getAttributeListeners(""String_Node_Str"",Attributes.INTEGER_TYPE).contains(testAttributeListener));
  entity.removeAttributeListeners();
  Assert.assertFalse(entity.getAttributeListeners(""String_Node_Str"",Attributes.INTEGER_TYPE).contains(testAttributeListener));
}"
95484,"@Override public void attributeAdded(final AttributeEvent<T> event){
  present=true;
  val=(int)event.getValue();
}","@Override public void attributeAdded(final AttributeEvent<Integer> event){
  present=true;
  val=event.getValue();
}"
95485,"@Override public void attributeRemoved(final AttributeEvent<T> event){
  present=false;
}","@Override public void attributeRemoved(final AttributeEvent<Integer> event){
  present=false;
}"
95486,"@Override public void attributeChanged(final AttributeEvent<T> event){
  val=(int)event.getValue();
}","@Override public void attributeChanged(final AttributeEvent<Integer> event){
  val=event.getValue();
}"
95487,"@Override public MutableActionContext<T> scheduleForActor(final Action<T> action,final long initialDelay,final long period,final TimeUnit unit){
  if (engine.isStopped()) {
    return Actions.emptyActionContext();
  }
  final MutableActionContext<T> context;
synchronized (contexts) {
    context=engine.createContext(action);
    context.setActor(actor);
    context.setInitialDelay(initialDelay,unit);
    context.setPeriod(period,unit);
    contexts.add(new WeakReference<>(context));
  }
  context.schedule();
  return unmodifiableActionContext(context);
}","@Override public MutableActionContext<T> scheduleForActor(final Action<T> action,final long initialDelay,final long period,final TimeUnit unit){
  if (engine.isStopped()) {
    return Actions.emptyActionContext();
  }
  final MutableActionContext<T> context;
synchronized (contexts) {
    context=engine.createContext(action);
    context.setActor(actor);
    context.setInitialDelay(initialDelay,unit);
    context.setPeriod(period,unit);
    purge(false);
    contexts.add(new WeakReference<>(context));
  }
  context.schedule();
  return unmodifiableActionContext(context);
}"
95488,"/** 
 * Cancel all tasks scheduled to the current engine for the actor by this scheduler.
 */
@Override public void cancelAllScheduledForActor(){
synchronized (contexts) {
    final Iterator<WeakReference<ActionContext<T>>> it=contexts.iterator();
    while (it.hasNext()) {
      final ActionContext<T> cxt=it.next().get();
      if (cxt != null) {
        cxt.cancel();
      }
      it.remove();
    }
  }
}","/** 
 * Cancel all tasks scheduled to the current engine for the actor by this scheduler.
 */
@Override public void cancelAllScheduledForActor(){
synchronized (contexts) {
    purge(true);
  }
}"
95489,"@Override public boolean remove(final Object o){
  final Class<?> type=o.getClass();
  final TagsOfType tot=tags.get(type);
  if (tot == null) {
    return false;
  }
  tot.w.lock();
  try {
    if (tot.t.remove(tot)) {
      if (tot.t.isEmpty()) {
        tot.t=null;
        tags.remove(type);
      }
      return true;
    }
    return false;
  }
  finally {
    tot.w.unlock();
  }
}","@Override public boolean remove(final Object o){
  final Class<?> type=o.getClass();
  final TagsOfType tot=tags.get(type);
  if (tot == null) {
    return false;
  }
  tot.w.lock();
  try {
    if (tot.t.remove(o)) {
      if (tot.t.isEmpty()) {
        tot.t=null;
        tags.remove(type);
      }
      return true;
    }
    return false;
  }
  finally {
    tot.w.unlock();
  }
}"
95490,"@SuppressWarnings(""String_Node_Str"") public static <T extends AgentWrapper>T wrap(final AgentWrapper agent,final Class<T> clazz){
  validateWrapper(clazz);
  return (T)Proxy.newProxyInstance(clazz.getClassLoader(),new Class[]{clazz},(p,m,a) -> {
    Object result=null;
    if (CACHED_METHODS.contains(m)) {
      result=m.invoke(agent,a);
    }
 else {
      final Class<? extends Attribute> attr=(Class<? extends Attribute>)((ParameterizedType)m.getGenericReturnType()).getActualTypeArguments()[0];
      if (a == null || a.length == 0) {
        result=agent.getAttribute(attr);
      }
 else {
        result=a[0] != null ? agent.associate((Attribute)a[0]) : agent.disassociate(attr);
      }
    }
    return result;
  }
);
}","@SuppressWarnings(""String_Node_Str"") public static <T extends AgentWrapper>T wrap(final AgentWrapper agent,final Class<T> clazz){
  validateWrapper(clazz);
  return (T)Proxy.newProxyInstance(clazz.getClassLoader(),new Class[]{clazz},(p,m,a) -> {
    Object result=null;
    if (CACHED_METHODS.contains(m)) {
      result=m.invoke(agent,a);
    }
 else {
      final Type rt=m.getGenericReturnType();
      if (a == null || a.length == 0) {
        result=agent.getAttribute(getAttrClass(rt));
      }
 else {
        result=a[0] != null ? agent.associate((Attribute)a[0]) : agent.disassociate(getAttrClass(rt));
      }
    }
    return result;
  }
);
}"
95491,"public boolean canBlockStay(World world,BlockPos pos){
  return (world.getBlockState(pos.add(0,1,0)).getBlock() instanceof IAgriFluidComponent);
}","public boolean canBlockStay(World world,BlockPos pos){
  return WorldHelper.getTile(world,pos,TileEntitySprinkler.class).filter(TileEntitySprinkler::isConnected).isPresent();
}"
95492,"@Override protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){
  final int relMouseX=mouseX - this.guiLeft;
  final int relMouseY=mouseY - this.guiTop;
  final List<String> toolTips=new ArrayList<>();
  this.guis.getLast().onUpdateMouse(this,toolTips,relMouseX,relMouseY);
  GlStateManager.pushAttrib();
  GlStateManager.pushMatrix();
  GlStateManager.pushAttrib();
  GlStateManager.pushMatrix();
  this.guis.getLast().onRenderForeground(this,toolTips,relMouseX,relMouseY);
  GlStateManager.popMatrix();
  GlStateManager.popAttrib();
  if (toolTips.size() > 0) {
    drawHoveringText(toolTips,relMouseX,relMouseY,fontRenderer);
  }
  GlStateManager.popMatrix();
  GlStateManager.popAttrib();
}","@Override protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){
  final int relMouseX=mouseX - this.guiLeft;
  final int relMouseY=mouseY - this.guiTop;
  this.guis.getLast().onUpdateMouse(this,relMouseX,relMouseY);
  GlStateManager.pushAttrib();
  GlStateManager.pushMatrix();
  this.guis.getLast().onRenderForeground(this,relMouseX,relMouseY);
  GlStateManager.popMatrix();
  GlStateManager.popAttrib();
}"
95493,"public final synchronized void onRenderInspector(AgriGuiWrapper wrapper,List<String> tooltips,int relMouseX,int relMouseY){
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"");
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + this.container.windowId);
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + wrapper.width+ ""String_Node_Str""+ wrapper.height+ ""String_Node_Str"");
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + wrapper.doesGuiPauseGame());
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"");
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + this.width+ ""String_Node_Str""+ this.height+ ""String_Node_Str"");
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + this.components.size());
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + this.backgrounds.size());
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + this.container.inventoryItemStacks.size());
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + this.container.inventorySlots.size());
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"");
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + relMouseX+ ""String_Node_Str""+ relMouseY+ ""String_Node_Str"");
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"");
  Optional<GuiComponent> optionalHovered=Optional.empty();
  for (int i=this.components.size() - 1; i > -1; i--) {
    if (this.components.get(i).contains(relMouseX,relMouseY)) {
      optionalHovered=Optional.of(this.components.get(i));
      break;
    }
  }
  if (optionalHovered.isPresent()) {
    GuiComponent hovered=optionalHovered.get();
    wrapper.drawRectangle(hovered.getBounds().x,hovered.getBounds().y,hovered.getBounds().width,hovered.getBounds().height,Color.PINK.hashCode());
    tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + Objects.toString(hovered.getComponent()));
    tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + hovered.getBounds().x+ ""String_Node_Str""+ hovered.getBounds().y+ ""String_Node_Str"");
    tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + hovered.getBounds().width+ ""String_Node_Str""+ hovered.getBounds().height+ ""String_Node_Str"");
    tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + hovered.isEnabled());
    tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + hovered.isVisable());
    tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + hovered.isHovered());
  }
 else {
    tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"");
  }
}","public final synchronized void onRenderInspector(AgriGuiWrapper wrapper,List<String> tooltips,int relMouseX,int relMouseY){
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"");
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + this.container.windowId);
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + wrapper.width+ ""String_Node_Str""+ wrapper.height+ ""String_Node_Str"");
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + wrapper.doesGuiPauseGame());
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"");
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + this.width+ ""String_Node_Str""+ this.height+ ""String_Node_Str"");
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + this.components.size());
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + this.backgrounds.size());
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + this.container.inventoryItemStacks.size());
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + this.container.inventorySlots.size());
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"");
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + relMouseX+ ""String_Node_Str""+ relMouseY+ ""String_Node_Str"");
  tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"");
  Optional<GuiComponent> optionalHovered=Optional.empty();
  for (int i=this.components.size() - 1; i > -1; i--) {
    if (this.components.get(i).contains(relMouseX,relMouseY)) {
      optionalHovered=Optional.of(this.components.get(i));
      break;
    }
  }
  if (optionalHovered.isPresent()) {
    GuiComponent hovered=optionalHovered.get();
    wrapper.drawRectangle(hovered.getBounds().x,hovered.getBounds().y,hovered.getBounds().width,hovered.getBounds().height,Color.YELLOW.hashCode());
    tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + Objects.toString(hovered.getComponent()));
    tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + hovered.getBounds().x+ ""String_Node_Str""+ hovered.getBounds().y+ ""String_Node_Str"");
    tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + hovered.getBounds().width+ ""String_Node_Str""+ hovered.getBounds().height+ ""String_Node_Str"");
    tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + hovered.isEnabled());
    tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + hovered.isVisable());
    tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"" + hovered.isHovered());
  }
 else {
    tooltips.add(ChatFormatting.DARK_AQUA + ""String_Node_Str"");
  }
}"
95494,"@Override public final synchronized void onRenderForeground(AgriGuiWrapper wrapper,List<String> tooltips,int relMouseX,int relMouseY){
  this.components.stream().filter(c -> c.isVisable()).peek(c -> onRenderComponent(wrapper,c,tooltips,relMouseX,relMouseY)).filter(c -> c.contains(relMouseX,relMouseY)).forEach(c -> onAddComponentToolTip(wrapper,c,tooltips,relMouseX,relMouseY));
  if (enableGuiInspector) {
    onRenderInspector(wrapper,tooltips,relMouseX,relMouseY);
  }
}","@Override public final synchronized void onRenderForeground(AgriGuiWrapper wrapper,int relMouseX,int relMouseY){
  this.components.stream().filter(c -> c.isVisable()).forEach(c -> onRenderComponent(wrapper,c,relMouseX,relMouseY));
}"
95495,"public final synchronized void onRenderComponent(AgriGuiWrapper wrapper,GuiComponent c,List<String> tooltips,int relMouseX,int relMouseY){
  c.renderComponent(wrapper);
  if (enableGuiInspector) {
    wrapper.drawRectangle(c.getBounds().x,c.getBounds().y,c.getBounds().width,c.getBounds().height,Color.MAGENTA.hashCode());
  }
}","public final synchronized void onRenderComponent(AgriGuiWrapper wrapper,GuiComponent c,int relMouseX,int relMouseY){
  c.renderComponent(wrapper);
  if (enableGuiInspector) {
    wrapper.drawRectangle(c.getBounds().x,c.getBounds().y,c.getBounds().width,c.getBounds().height,Color.MAGENTA.hashCode());
  }
}"
95496,"@Override public final synchronized void onUpdateMouse(AgriGuiWrapper wrapper,List<String> tooltips,int relMouseX,int relMouseY){
  if (this.lastMouseX != relMouseX || this.lastMouseY != relMouseY) {
    this.components.stream().filter(c -> c.isEnabled()).forEach(c -> c.onMouseMove(relMouseX,relMouseY));
    this.lastMouseX=relMouseX;
    this.lastMouseY=relMouseY;
  }
}","@Override public final synchronized void onUpdateMouse(AgriGuiWrapper wrapper,int relMouseX,int relMouseY){
  if (this.lastMouseX != relMouseX || this.lastMouseY != relMouseY) {
    this.components.stream().filter(c -> c.isEnabled()).forEach(c -> c.onMouseMove(relMouseX,relMouseY));
    this.lastMouseX=relMouseX;
    this.lastMouseY=relMouseY;
  }
}"
95497,"@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,ItemStack heldItem,EnumFacing side,float hitX,float hitY,float hitZ){
  if (world.isRemote) {
    return true;
  }
  TileEntityCrop crop=WorldHelper.getTile(world,pos,TileEntityCrop.class).orElse(null);
  if (crop == null) {
    return false;
  }
  if (heldItem == null) {
    crop.onHarvest(player);
    return true;
  }
  if (TypeHelper.isAnyType(heldItem.getItem(),ITEM_EXCLUDES)) {
    return false;
  }
  if (AgriApi.getFertilizerRegistry().hasAdapter(heldItem)) {
    Optional<IAgriFertilizer> fert=AgriApi.getFertilizerRegistry().valueOf(heldItem);
    return fert.isPresent() && fert.get().applyFertilizer(player,world,pos,crop,heldItem,crop.getRandom());
  }
  if (heldItem.getItem() == AgriItems.getInstance().CROPS) {
    if (crop.onApplyCrops(player) == MethodResult.SUCCESS) {
      if (!player.isCreative()) {
        heldItem.stackSize--;
      }
      return true;
    }
  }
  final Optional<AgriSeed> seed=AgriApi.getSeedRegistry().valueOf(heldItem);
  if (seed.isPresent()) {
    if (crop.onApplySeeds(player,seed.get()) == MethodResult.SUCCESS) {
      return true;
    }
  }
  crop.onHarvest(player);
  return true;
}","@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,ItemStack heldItem,EnumFacing side,float hitX,float hitY,float hitZ){
  if (world.isRemote) {
    return true;
  }
  TileEntityCrop crop=WorldHelper.getTile(world,pos,TileEntityCrop.class).orElse(null);
  if (crop == null) {
    return false;
  }
  if (heldItem == null) {
    crop.onHarvest(player);
    return true;
  }
  if (TypeHelper.isAnyType(heldItem.getItem(),ITEM_EXCLUDES)) {
    return false;
  }
  if (AgriApi.getFertilizerRegistry().hasAdapter(heldItem)) {
    Optional<IAgriFertilizer> fert=AgriApi.getFertilizerRegistry().valueOf(heldItem);
    return fert.isPresent() && fert.get().applyFertilizer(player,world,pos,crop,heldItem,crop.getRandom());
  }
  if (heldItem.getItem() == AgriItems.getInstance().CROPS) {
    if (crop.onApplyCrops(player) == MethodResult.SUCCESS) {
      if (!player.isCreative()) {
        heldItem.stackSize--;
      }
      return true;
    }
  }
  final Optional<AgriSeed> seed=AgriApi.getSeedRegistry().valueOf(heldItem);
  if (seed.isPresent()) {
    if (crop.onApplySeeds(player,seed.get()) == MethodResult.SUCCESS) {
      StackHelper.decreaseStackSize(player,heldItem,1);
      return true;
    }
  }
  crop.onHarvest(player);
  return true;
}"
95498,"public static boolean hasKey(ItemStack stack,String... keys){
  return hasTag(stack) && NBTHelper.hasKey(stack.getTagCompound(),keys);
}","/** 
 * Determines if the given ItemStack has the given key(s) associated with its tag. In the case that the given stack or its tag is null, this method will always return false.
 * @see NBTHelper#hasKey(NBTTagCompound,String)
 * @param stack the stack to check for the given keys.
 * @param keys the keys to check for in the stack's tag.
 * @return {@literal true} if and only if the stack and its tag are non-nulland the tag has all of the given keys,  {@literal false} otherwise}.
 */
public static boolean hasKey(@Nullable ItemStack stack,@Nullable String... keys){
  return (stack != null) && NBTHelper.hasKey(stack.getTagCompound(),keys);
}"
95499,"public static int getSize(ItemStack stack){
  return (stack == null) ? 0 : stack.stackSize;
}","/** 
 * Fetches the size of a given stack in a null-safe manner.
 * @param stack the stack to get the size of.
 * @return the size of the given stack, or {@literal 0} if the given stackwas null.
 */
public static int getSize(@Nullable ItemStack stack){
  return (stack == null) ? 0 : stack.stackSize;
}"
95500,"public static List<ItemStack> fitToMaxSize(ItemStack stack){
  final List<ItemStack> items=new ArrayList<>();
  final int max=stack.getMaxStackSize();
  int total=stack.stackSize;
  while (total > 0) {
    ItemStack newStack=stack.copy();
    newStack.stackSize=Math.min(total,max);
    total=total - newStack.stackSize;
    items.add(newStack);
  }
  return items;
}","/** 
 * Breaks up an ItemStack into stacks that obey the maximum size limit set by the contained item.
 * @param stack the stack to break down.
 * @return a list containing the resulting stacks formed by decomposing thegiven stack into proper-sized stacks.
 */
@Nonnull public static List<ItemStack> fitToMaxSize(@Nullable ItemStack stack){
  if (stack == null) {
    return Collections.EMPTY_LIST;
  }
  if (stack.stackSize < 1) {
    return Collections.EMPTY_LIST;
  }
  int stackSize=stack.stackSize;
  final int maxSize=stack.getMaxStackSize();
  if (stack.stackSize <= maxSize) {
    Arrays.asList(stack);
  }
  final int totalStackCount=IntMath.divide(stackSize,maxSize,RoundingMode.UP);
  final List<ItemStack> stacks=new ArrayList<>(totalStackCount);
  while (stackSize > maxSize) {
    ItemStack partial=stack.copy();
    partial.stackSize=maxSize;
    stackSize=stackSize - maxSize;
    stacks.add(partial);
  }
  if (stackSize > 0) {
    ItemStack partial=stack.copy();
    partial.stackSize=stackSize;
    stacks.add(partial);
  }
  return stacks;
}"
95501,"public static boolean areEqual(ItemStack a,ItemStack b){
  return isValid(a,b) && a.getItem() == b.getItem() && (!a.getHasSubtypes() || a.getItemDamage() == b.getItemDamage()) && ItemStack.areItemStackTagsEqual(a,b);
}","/** 
 * Determines if the given ItemStacks are equal, as per the vanilla definition of ItemStack equality. Two item stacks, a & b, are considered equal if and only if either a & b are both null or a & b are both non-null and a's item, metadata, and tags equal b's item metadata, and tags. Notice, this method is simply a wrapper of  {@link ItemStack#areItemStacksEqual(ItemStack,ItemStack)}, with documentation added based off of bytecode analysis.
 * @param a the stack to compare equality against.
 * @param b the stack to check for equality.
 * @return {@literal true} if and only if a is considered to equivalent tob,  {@literal false} otherwise.
 */
public static boolean areEqual(@Nullable ItemStack a,@Nullable ItemStack b){
  return ItemStack.areItemStacksEqual(a,b);
}"
95502,"public static boolean hasTag(ItemStack stack){
  return isValid(stack) && stack.hasTagCompound();
}","/** 
 * Determines if the given ItemStack has a non-null NBTTagCompound currently associated with it.
 * @param stack the stack to check if has a non-null NBTTagCompound.
 * @return {@literal true} if and only if the given ItemStack is non-nulland ItemStack#getTagCompound() returns a non-null value,  {@literal false}otherwise.
 */
public static boolean hasTag(@Nullable ItemStack stack){
  return (stack != null) && (stack.getTagCompound() != null);
}"
95503,"public static boolean isValid(ItemStack stack,Class... itemClasses){
  return isValid(stack) && TypeHelper.isAllTypes(stack.getItem(),itemClasses);
}","/** 
 * Determines if a given ItemStack is valid and matches <em>all</em> the given Item type. An ItemStack is considered valid if and only if it is not null, its item is not null, its item matches <em>all</em> the given types, and its amount is greater than zero.
 * @param stack the ItemStack to determine if valid.
 * @param itemClasses all the classed that the item contained in theItemStack must match.
 * @return {@literal true} if and only if the given ItemStack is consideredvalid as per the method's description,  {@literal false} otherwise.
 */
public static boolean isValid(ItemStack stack,Class<?>... itemClasses){
  return isValid(stack) && TypeHelper.isAllTypes(stack.getItem(),itemClasses);
}"
95504,"public static NBTTagCompound getTag(ItemStack stack){
  if (hasTag(stack)) {
    return stack.getTagCompound();
  }
 else {
    NBTTagCompound tag=new NBTTagCompound();
    stack.setTagCompound(tag);
    return tag;
  }
}","/** 
 * Fetches the tag associated with a given stack, or associates and returns a new NBTTag compound to the stack.
 * @param stack the stack to get the tag from.
 * @return
 */
@Nonnull public static NBTTagCompound getTag(@Nonnull ItemStack stack){
  Objects.requireNonNull(stack,""String_Node_Str"");
  NBTTagCompound tag=stack.getTagCompound();
  if (tag == null) {
    tag=new NBTTagCompound();
    stack.setTagCompound(tag);
  }
  return tag;
}"
95505,"@Override public Optional<AgriSeed> executeStrategy(IAgriCrop crop,Random rand){
  Objects.requireNonNull(crop,""String_Node_Str"");
  Objects.requireNonNull(rand,""String_Node_Str"");
  final List<IAgriCrop> neighbors=WorldHelper.getTileNeighbors(crop.getCropWorld(),crop.getCropPos(),IAgriCrop.class);
  final List<IAgriPlant> parents=neighbors.stream().filter(IAgriCrop::isMature).map(IAgriCrop::getSeed).filter(Objects::nonNull).map(AgriSeed::getPlant).collect(Collectors.toList());
  if (parents.size() < 2) {
    return Optional.empty();
  }
  final List<IAgriMutation> mutations=AgriApi.getMutationRegistry().stream().filter(m -> m.areParentsIn(parents)).filter(m -> crop.isFertile(m.getChild())).collect(Collectors.toList());
  if (mutations.isEmpty()) {
    return Optional.empty();
  }
  final int index=rand.nextInt(mutations.size());
  final IAgriMutation mutation=mutations.get(index);
  if (mutation.getChance() <= rand.nextDouble()) {
    return Optional.empty();
  }
  Optional<IAgriStat> stat=AgriApi.getStatCalculatorRegistry().valueOf(mutation).map(c -> c.calculateMutationStats(mutation,neighbors));
  return stat.map(s -> new AgriSeed(mutation.getChild(),s));
}","@Override public Optional<AgriSeed> executeStrategy(IAgriCrop crop,Random rand){
  Objects.requireNonNull(crop,""String_Node_Str"");
  Objects.requireNonNull(rand,""String_Node_Str"");
  final List<IAgriCrop> neighbors=WorldHelper.getTileNeighbors(crop.getCropWorld(),crop.getCropPos(),IAgriCrop.class);
  final List<IAgriPlant> parents=neighbors.stream().filter(IAgriCrop::isMature).map(IAgriCrop::getSeed).filter(Objects::nonNull).map(AgriSeed::getPlant).collect(Collectors.toList());
  if (parents.size() < 2) {
    return Optional.empty();
  }
  final List<IAgriMutation> mutations=AgriApi.getMutationRegistry().stream().filter(m -> m.areParentsIn(parents)).filter(m -> crop.isFertile(m.getChild())).collect(Collectors.toList());
  if (mutations.isEmpty()) {
    return Optional.empty();
  }
  final int index=rand.nextInt(mutations.size());
  final IAgriMutation mutation=mutations.get(index);
  if (mutation.getChance() <= rand.nextDouble()) {
    return Optional.empty();
  }
  Optional<IAgriStat> stat=AgriApi.getStatCalculatorRegistry().valueOf(mutation.getChild()).map(c -> c.calculateMutationStats(mutation,neighbors));
  return stat.map(s -> new AgriSeed(mutation.getChild(),s));
}"
95506,"@Override public Optional<AgriSeed> executeStrategy(IAgriCrop crop,Random rand){
  Objects.requireNonNull(crop,""String_Node_Str"");
  Objects.requireNonNull(rand,""String_Node_Str"");
  final List<IAgriCrop> neighbors=WorldHelper.getTileNeighbors(crop.getWorld(),crop.getPos(),IAgriCrop.class);
  final List<IAgriPlant> parents=neighbors.stream().filter(IAgriCrop::isMature).map(IAgriCrop::getSeed).filter(Objects::nonNull).map(AgriSeed::getPlant).collect(Collectors.toList());
  if (parents.size() < 2) {
    return Optional.empty();
  }
  final List<IAgriMutation> mutations=AgriApi.getMutationRegistry().stream().filter(m -> m.areParentsIn(parents)).filter(m -> crop.isFertile(m.getChild())).collect(Collectors.toList());
  if (mutations.isEmpty()) {
    return Optional.empty();
  }
  final int index=rand.nextInt(mutations.size());
  final IAgriMutation mutation=mutations.get(index);
  if (mutation.getChance() <= rand.nextDouble()) {
    return Optional.empty();
  }
  Optional<IAgriStat> stat=AgriApi.getStatCalculatorRegistry().valueOf(mutation).map(c -> c.calculateMutationStats(mutation,neighbors));
  return stat.map(s -> new AgriSeed(mutation.getChild(),s));
}","@Override public Optional<AgriSeed> executeStrategy(IAgriCrop crop,Random rand){
  Objects.requireNonNull(crop,""String_Node_Str"");
  Objects.requireNonNull(rand,""String_Node_Str"");
  final List<IAgriCrop> neighbors=WorldHelper.getTileNeighbors(crop.getCropWorld(),crop.getCropPos(),IAgriCrop.class);
  final List<IAgriPlant> parents=neighbors.stream().filter(IAgriCrop::isMature).map(IAgriCrop::getSeed).filter(Objects::nonNull).map(AgriSeed::getPlant).collect(Collectors.toList());
  if (parents.size() < 2) {
    return Optional.empty();
  }
  final List<IAgriMutation> mutations=AgriApi.getMutationRegistry().stream().filter(m -> m.areParentsIn(parents)).filter(m -> crop.isFertile(m.getChild())).collect(Collectors.toList());
  if (mutations.isEmpty()) {
    return Optional.empty();
  }
  final int index=rand.nextInt(mutations.size());
  final IAgriMutation mutation=mutations.get(index);
  if (mutation.getChance() <= rand.nextDouble()) {
    return Optional.empty();
  }
  Optional<IAgriStat> stat=AgriApi.getStatCalculatorRegistry().valueOf(mutation).map(c -> c.calculateMutationStats(mutation,neighbors));
  return stat.map(s -> new AgriSeed(mutation.getChild(),s));
}"
95507,"@Override public Optional<AgriSeed> executeStrategy(IAgriCrop crop,Random rand){
  List<IAgriCrop> matureNeighbours=WorldHelper.getTileNeighbors(crop.getWorld(),crop.getPos(),IAgriCrop.class);
  matureNeighbours.removeIf(c -> !c.isMature());
  if (!matureNeighbours.isEmpty()) {
    int index=rand.nextInt(matureNeighbours.size());
    AgriSeed seed=matureNeighbours.get(index).getSeed();
    if (seed != null && rand.nextDouble() < seed.getPlant().getSpreadChance()) {
      return AgriApi.getStatCalculatorRegistry().valueOf(seed.getPlant()).map(calc -> calc.calculateSpreadStats(seed.getPlant(),matureNeighbours)).map(stat -> new AgriSeed(seed.getPlant(),stat));
    }
  }
  return Optional.empty();
}","@Override public Optional<AgriSeed> executeStrategy(IAgriCrop crop,Random rand){
  List<IAgriCrop> matureNeighbours=WorldHelper.getTileNeighbors(crop.getCropWorld(),crop.getCropPos(),IAgriCrop.class);
  matureNeighbours.removeIf(c -> !c.isMature());
  if (!matureNeighbours.isEmpty()) {
    int index=rand.nextInt(matureNeighbours.size());
    AgriSeed seed=matureNeighbours.get(index).getSeed();
    if (seed != null && rand.nextDouble() < seed.getPlant().getSpreadChance()) {
      return AgriApi.getStatCalculatorRegistry().valueOf(seed.getPlant()).map(calc -> calc.calculateSpreadStats(seed.getPlant(),matureNeighbours)).map(stat -> new AgriSeed(seed.getPlant(),stat));
    }
  }
  return Optional.empty();
}"
95508,"public ContainerSeedAnalyzer(InventoryPlayer inventory,TileEntitySeedAnalyzer seedAnalyzer,int x,int y){
  super(inventory,x,y);
  this.seedAnalyzer=seedAnalyzer;
  this.addSlots();
}","public ContainerSeedAnalyzer(TileEntitySeedAnalyzer analyzer,InventoryPlayer inventory,SeedAnalyzerLayout layout){
  super(analyzer,inventory,layout.offsetX,layout.offsetY);
  this.addSlotToContainer(new SlotSeedAnalyzerSeed(this.tile,this.seedSlotId,layout.seedSlotX,layout.seedSlotY));
  this.addSlotToContainer(new SlotSeedAnalyzerJournal(this.tile,this.journalSlotId,layout.journalSlotX,layout.journalSlotY));
}"
95509,"@Override public void detectAndSendChanges(){
  super.detectAndSendChanges();
  for (  IContainerListener listener : this.listeners) {
    if (this.progress != this.seedAnalyzer.getProgress()) {
      listener.sendProgressBarUpdate(this,0,this.seedAnalyzer.getProgress());
    }
  }
  this.progress=this.seedAnalyzer.getProgress();
}","@Override public void detectAndSendChanges(){
  super.detectAndSendChanges();
  for (  IContainerListener listener : this.listeners) {
    if (this.progress != this.tile.getProgress()) {
      listener.sendProgressBarUpdate(this,0,this.tile.getProgress());
    }
  }
  this.progress=this.tile.getProgress();
}"
95510,"@Override @SideOnly(Side.CLIENT) public void updateProgressBar(int type,int newValue){
  if (type == 0) {
    this.seedAnalyzer.setProgress(newValue);
  }
}","@Override @SideOnly(Side.CLIENT) public void updateProgressBar(int type,int newValue){
  if (type == 0) {
    this.tile.setProgress(newValue);
  }
}"
95511,"@Override @SuppressWarnings(""String_Node_Str"") public List<ItemStack> getSeedEntries(){
  return this.te.getInventory();
}","@Override @SuppressWarnings(""String_Node_Str"") public List<ItemStack> getSeedEntries(){
  return this.tile.getInventory();
}"
95512,"public ContainerSeedStorage(InventoryPlayer inventory,TileEntitySeedStorage te){
  super(inventory,invOffsetX,invOffsetY);
  this.te=te;
}","public ContainerSeedStorage(TileEntitySeedStorage tile,InventoryPlayer inventory){
  super(tile,inventory,invOffsetX,invOffsetY);
}"
95513,"@Override public boolean addSeedToStorage(ItemStack seedStack){
  return this.te.addStackToInventory(seedStack);
}","@Override public boolean addSeedToStorage(ItemStack seedStack){
  return this.tile.addStackToInventory(seedStack);
}"
95514,"@Override public List<SeedStorageSlot> getSeedSlots(AgriSeed seed){
  return this.te.getSlots();
}","@Override public List<SeedStorageSlot> getSeedSlots(AgriSeed seed){
  return this.tile.getSlots();
}"
95515,"public ContainerSeedStorageBase(InventoryPlayer inventory,int xOffset,int yOffset){
  super(inventory,xOffset,yOffset);
}","public ContainerSeedStorageBase(T tile,InventoryPlayer inventory,int xOffset,int yOffset){
  super(tile,inventory,xOffset,yOffset);
}"
95516,"public Optional<ISeedStorageControllable> getControllable(ItemStack stack){
  TileEntity te=this.getTileEntity();
  if (te instanceof ISeedStorageController) {
    return ((ISeedStorageController)te).getControllable(stack);
  }
 else   if (te instanceof ISeedStorageControllable) {
    return Optional.of((ISeedStorageControllable)te);
  }
 else {
    return Optional.empty();
  }
}","public Optional<ISeedStorageControllable> getControllable(ItemStack stack){
  if (this.tile instanceof ISeedStorageController) {
    return ((ISeedStorageController)this.tile).getControllable(stack);
  }
 else   if (this.tile instanceof ISeedStorageControllable) {
    return Optional.of((ISeedStorageControllable)tile);
  }
 else {
    return Optional.empty();
  }
}"
95517,"public ContainerSeedStorageController(InventoryPlayer inventory,TileEntitySeedStorageController te){
  super(inventory,invOffsetX,invOffsetY);
  this.te=te;
}","public ContainerSeedStorageController(TileEntitySeedStorageController tile,InventoryPlayer inventory){
  super(tile,inventory,invOffsetX,invOffsetY);
}"
95518,"@Override public List<ItemStack> getSeedEntries(){
  return this.te.getControlledSeeds();
}","@Override public List<ItemStack> getSeedEntries(){
  return this.tile.getControlledSeeds();
}"
95519,"@Override public boolean addSeedToStorage(ItemStack stack){
  return this.te.addStackToInventory(stack);
}","@Override public boolean addSeedToStorage(ItemStack stack){
  return this.tile.addStackToInventory(stack);
}"
95520,"@Override public List<SeedStorageSlot> getSeedSlots(AgriSeed seed){
  final ItemStack stack=seed.toStack();
  return this.te.getSlots(stack.getItem(),stack.getItemDamage());
}","@Override public List<SeedStorageSlot> getSeedSlots(AgriSeed seed){
  final ItemStack stack=seed.toStack();
  return this.tile.getSlots(stack.getItem(),stack.getItemDamage());
}"
95521,"public GuiPeripheral(InventoryPlayer inventory,TileEntityPeripheral peripheral){
  super(new ContainerPeripheral(inventory,peripheral));
  this.xSize=172;
  this.ySize=176;
  this.peripheral=peripheral;
  this.methods=peripheral.getMethods();
  guideOffset=this.xSize - 4;
}","public GuiPeripheral(InventoryPlayer inventory,TileEntityPeripheral peripheral){
  super(new ContainerSeedAnalyzer(peripheral,inventory,ContainerSeedAnalyzer.SeedAnalyzerLayout.PERIPHERAL));
  this.xSize=172;
  this.ySize=176;
  this.peripheral=peripheral;
  this.methods=peripheral.getMethods();
  guideOffset=this.xSize - 4;
}"
95522,"public GuiSeedAnalyzer(InventoryPlayer inventory,TileEntitySeedAnalyzer seedAnalyzer){
  super(176,176,new ContainerSeedAnalyzer(inventory,seedAnalyzer));
  this.seedAnalyzer=seedAnalyzer;
}","public GuiSeedAnalyzer(InventoryPlayer inventory,TileEntitySeedAnalyzer seedAnalyzer){
  super(176,176,new ContainerSeedAnalyzer(seedAnalyzer,inventory,ContainerSeedAnalyzer.SeedAnalyzerLayout.NORMAL));
  this.seedAnalyzer=seedAnalyzer;
}"
95523,"public GuiSeedStorage(InventoryPlayer inventory,TileEntitySeedStorage te){
  super(new ContainerSeedStorage(inventory,te),0,14,170,48,-1,-1,5,7);
  this.activeSeed=te.getLockedSeed();
}","public GuiSeedStorage(InventoryPlayer inventory,TileEntitySeedStorage te){
  super(new ContainerSeedStorage(te,inventory),0,14,170,48,-1,-1,5,7);
  this.activeSeed=te.getLockedSeed();
}"
95524,"protected void getActiveSeed(){
  TileEntity tile=this.getContainer().getTileEntity();
  if (tile instanceof ISeedStorageControllable) {
    this.activeSeed=((ISeedStorageControllable)tile).getLockedSeed().orElse(null);
  }
}","protected void getActiveSeed(){
  TileEntity tile=this.getContainer().getTile();
  if (tile instanceof ISeedStorageControllable) {
    this.activeSeed=((ISeedStorageControllable)tile).getLockedSeed().orElse(null);
  }
}"
95525,"public GuiSeedStorageController(InventoryPlayer inventory,TileEntitySeedStorageController te){
  super(new ContainerSeedStorageController(inventory,te),10,6,184,7,7,8,82,8);
}","public GuiSeedStorageController(InventoryPlayer inventory,TileEntitySeedStorageController te){
  super(new ContainerSeedStorageController(te,inventory),10,6,184,7,7,8,82,8);
}"
95526,"@Override public boolean isMet(IBlockAccess world,BlockPos pos){
  return new BlockRange(this.range,pos).stream().map(loc -> FuzzyStack.fromBlockState(world.getBlockState(loc)).orElse(null)).skip(this.amount - 1).findAny().isPresent();
}","@Override public boolean isMet(IBlockAccess world,BlockPos pos){
  return new BlockRange(this.range,pos).stream().map(world::getBlockState).map(FuzzyStack::fromBlockState).map(o -> o.orElse(null)).filter(this.stack::equals).skip(this.amount - 1).findAny().isPresent();
}"
95527,"/** 
 * Handles the block drops. Called when the block is broken (not left clicked).
 */
@Override public void dropBlockAsItemWithChance(World world,BlockPos pos,IBlockState state,float chance,int fortune){
  if (!world.isRemote) {
    WorldHelper.spawnItemInWorld(world,pos,new ItemStack((Item)null,1,0,new NBTTagCompound()));
    this.getCrop(world,pos).ifPresent(crop -> crop.getDrops(drop -> WorldHelper.spawnItemInWorld(world,pos,drop)));
  }
}","/** 
 * Handles the block drops. Called when the block is broken (not left clicked).
 */
@Override public void dropBlockAsItemWithChance(World world,BlockPos pos,IBlockState state,float chance,int fortune){
  if (!world.isRemote) {
    this.getCrop(world,pos).ifPresent(crop -> crop.getDrops(drop -> WorldHelper.spawnItemInWorld(world,pos,drop)));
  }
}"
95528,"@Override protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){
  final int relMouseX=mouseX - this.guiLeft;
  final int relMouseY=mouseY - this.guiTop;
  final List<String> toolTips=new ArrayList<>();
  this.guis.getLast().onUpdateMouse(this,toolTips,relMouseX,relMouseY);
  GlStateManager.pushAttrib();
  GlStateManager.pushMatrix();
  GlStateManager.pushAttrib();
  GlStateManager.pushMatrix();
  this.guis.getLast().onRenderForeground(this,toolTips,relMouseX,relMouseY);
  GlStateManager.popMatrix();
  GlStateManager.popAttrib();
  if (toolTips.size() > 0) {
    drawHoveringText(toolTips,relMouseX,relMouseY,fontRendererObj);
  }
  GlStateManager.popMatrix();
  GlStateManager.popAttrib();
}","@Override protected void drawGuiContainerForegroundLayer(int mouseX,int mouseY){
  final int relMouseX=mouseX - this.guiLeft;
  final int relMouseY=mouseY - this.guiTop;
  final List<String> toolTips=new ArrayList<>();
  this.guis.getLast().onUpdateMouse(this,toolTips,relMouseX,relMouseY);
  GlStateManager.pushAttrib();
  GlStateManager.pushMatrix();
  GlStateManager.pushAttrib();
  GlStateManager.pushMatrix();
  for (  Slot s : this.getGui().getContainer().inventorySlots) {
    fontRendererObj.drawString(""String_Node_Str"" + s.slotNumber,s.xDisplayPosition,s.yDisplayPosition,Color.WHITE.getRGB());
  }
  this.guis.getLast().onRenderForeground(this,toolTips,relMouseX,relMouseY);
  GlStateManager.popMatrix();
  GlStateManager.popAttrib();
  if (toolTips.size() > 0) {
    drawHoveringText(toolTips,relMouseX,relMouseY,fontRendererObj);
  }
  GlStateManager.popMatrix();
  GlStateManager.popAttrib();
}"
95529,"public static void renderComponentProgressBar(AgriGuiWrapper gui,GuiComponent<Supplier<Integer>> component){
  final int width=component.getBounds().width;
  final int height=component.getBounds().height;
  final double progress=component.getComponent().get();
  GuiUtils.drawContinuousTexturedBox(WIDGETS,0,0,100,25,width,height,16,16,2,0);
  GuiUtils.drawContinuousTexturedBox(WIDGETS,0,0,125,25,(int)((width * progress) / 100),height,16,16,2,0);
}","public static void renderComponentProgressBar(AgriGuiWrapper gui,GuiComponent<Supplier<Integer>> component){
  final int width=component.getBounds().width;
  final int height=component.getBounds().height;
  final double progress=MathHelper.inRange(component.getComponent().get(),0.0,1.0);
  GuiUtils.drawContinuousTexturedBox(WIDGETS,0,0,100,25,width,height,16,16,2,0);
  GuiUtils.drawContinuousTexturedBox(WIDGETS,0,0,125,25,(int)((width * progress) / 100),height,16,16,2,0);
}"
95530,"@Override public ItemStack decrStackSize(int slot,int amount){
  slot=slot % 2;
  ItemStack output=null;
  if (slot == 0 && this.specimen != null) {
    if (amount < this.specimen.stackSize) {
      output=this.specimen.splitStack(amount);
    }
 else {
      output=this.specimen.copy();
      this.specimen=null;
      this.markForUpdate();
    }
  }
 else   if (slot == 1 && this.journal != null) {
    output=this.journal.copy();
    this.journal=null;
    this.markForUpdate();
  }
  this.progress=0;
  return output;
}","@Override public ItemStack decrStackSize(int slot,int amount){
  ItemStack output=null;
switch (slot) {
case SPECIMEN_SLOT_ID:
    if (this.specimen != null) {
      if (amount < this.specimen.stackSize) {
        output=this.specimen.splitStack(amount);
      }
 else {
        output=this.specimen.copy();
        this.specimen=null;
        this.markForUpdate();
      }
    }
  break;
case JOURNAL_SLOT_ID:
if (this.journal != null) {
  output=this.journal.copy();
  this.journal=null;
  this.markForUpdate();
}
break;
}
this.progress=0;
return output;
}"
95531,"@Override public void setInventorySlotContents(int slot,ItemStack stack){
  slot=slot % 2;
  if (slot == 0) {
    this.specimen=stack;
    if (stack != null && stack.stackSize > getInventoryStackLimit()) {
      stack.stackSize=getInventoryStackLimit();
    }
    progress=isSpecimenAnalyzed() ? maxProgress() : 0;
  }
 else   if (slot == 1) {
    this.journal=stack;
  }
  this.markForUpdate();
}","@Override public void setInventorySlotContents(int slot,ItemStack stack){
switch (slot) {
case SPECIMEN_SLOT_ID:
    this.specimen=stack;
  if (stack != null && stack.stackSize > getInventoryStackLimit()) {
    stack.stackSize=getInventoryStackLimit();
  }
this.progress=isSpecimenAnalyzed() ? maxProgress() : 0;
this.markForUpdate();
return;
case JOURNAL_SLOT_ID:
this.journal=stack;
this.markForUpdate();
return;
}
}"
95532,"@Override public boolean canExtractItem(int slot,ItemStack itemStackIn,EnumFacing direction){
  slot=slot % 2;
  if (slot == 0 && this.specimen != null && this.specimen.hasTagCompound()) {
    return this.isSpecimenAnalyzed();
  }
  return false;
}","@Override public boolean canExtractItem(int slot,ItemStack itemStackIn,EnumFacing direction){
  if (slot == SPECIMEN_SLOT_ID && this.specimen != null && this.specimen.hasTagCompound()) {
    return this.isSpecimenAnalyzed();
  }
  return false;
}"
95533,"/** 
 * Checks if a stack is valid for a slot.
 * @param slot
 * @param stack
 * @return if the item is valid.
 */
@Override public boolean isItemValidForSlot(int slot,ItemStack stack){
  slot=slot % 2;
switch (slot) {
case 0:
    return TileEntitySeedAnalyzer.isValid(stack);
case 1:
  return (stack != null && stack.getItem() != null && stack.getItem() instanceof ItemJournal);
default :
return false;
}
}","/** 
 * Checks if a stack is valid for a slot.
 * @param slot
 * @param stack
 * @return if the item is valid.
 */
@Override public boolean isItemValidForSlot(int slot,ItemStack stack){
switch (slot) {
case SPECIMEN_SLOT_ID:
    return TileEntitySeedAnalyzer.isValid(stack);
case JOURNAL_SLOT_ID:
  return StackHelper.isValid(stack,ItemJournal.class);
default :
return false;
}
}"
95534,"@Override public ItemStack getStackInSlot(int slot){
  slot=slot % 2;
switch (slot) {
case 0:
    return this.specimen;
case 1:
  return this.journal;
default :
return null;
}
}","@Override public ItemStack getStackInSlot(int slot){
switch (slot) {
case SPECIMEN_SLOT_ID:
    return this.specimen;
case JOURNAL_SLOT_ID:
  return this.journal;
default :
return null;
}
}"
95535,"@Override public ItemStack removeStackFromSlot(int slot){
  slot=slot % 2;
  ItemStack stackInSlot;
switch (slot) {
case 0:
    stackInSlot=this.specimen;
  break;
case 1:
stackInSlot=this.journal;
break;
default :
return null;
}
if (stackInSlot != null) {
setInventorySlotContents(slot,null);
}
return stackInSlot;
}","@Override public ItemStack removeStackFromSlot(int slot){
  ItemStack result;
switch (slot) {
case SPECIMEN_SLOT_ID:
    result=this.specimen;
  this.specimen=null;
this.progress=0;
break;
case JOURNAL_SLOT_ID:
result=this.journal;
this.journal=null;
break;
default :
return null;
}
this.markForUpdate();
return result;
}"
95536,"@Override public boolean canInsertItem(int slot,ItemStack stack,EnumFacing direction){
  slot=slot % 2;
  if (slot == 0) {
    return isValid(stack);
  }
 else   if (slot == 1) {
    return (this.journal == null && this.isItemValidForSlot(slot,stack));
  }
  return false;
}","@Override public boolean canInsertItem(int slot,ItemStack stack,EnumFacing direction){
switch (slot) {
case SPECIMEN_SLOT_ID:
    return isValid(stack);
case JOURNAL_SLOT_ID:
  return this.journal == null && this.isItemValidForSlot(slot,stack);
default :
return false;
}
}"
95537,"public static void init(){
  EntityRegistry.registerModEntity(EntityLeashKnotAgricraft.class,""String_Node_Str"",1,AgriCraft.instance,16,100,false);
}","public static void init(){
  EntityRegistry.registerModEntity(EntityVillagerFarmer.class,""String_Node_Str"",0,AgriCraft.instance,64,1,true);
  VillagerRegistry.instance().register(EntityVillagerFarmer.PROFESSION);
  EntityRegistry.registerModEntity(EntityLeashKnotAgricraft.class,""String_Node_Str"",1,AgriCraft.instance,16,100,false);
}"
95538,"@Override protected List<DebugMode> getDebugModes(){
  List<DebugMode> list=new ArrayList<>();
  list.add(new DebugModeCheckSoil());
  list.add(new DebugModeClearGrass());
  list.add(new DebugModeCoreInfo());
  return list;
}","@Override protected List<DebugMode> getDebugModes(){
  List<DebugMode> list=new ArrayList<>();
  list.add(new DebugModeCheckSoil());
  list.add(new DebugModeClearGrass());
  list.add(new DebugModeCoreInfo());
  list.add(new DebugModeSpawnFarmer());
  return list;
}"
95539,"@Override public void debugActionBlockClicked(ItemStack stack,EntityPlayer player,World world,BlockPos pos,EnumHand hand,EnumFacing side,float hitX,float hitY,float hitZ){
  if (!world.isRemote) {
    EntityVillagerFarmer entityvillager=new EntityVillagerFarmer(world,WorldGen.getVillagerId());
    entityvillager.setLocationAndAngles((double)pos.getX() + 0.5D,(double)pos.getY() + 1,(double)pos.getZ() + 0.5D,0.0F,0.0F);
    world.spawnEntityInWorld(entityvillager);
  }
}","@Override public void debugActionBlockClicked(ItemStack stack,EntityPlayer player,World world,BlockPos pos,EnumHand hand,EnumFacing side,float hitX,float hitY,float hitZ){
  if (!world.isRemote) {
    EntityVillagerFarmer entityvillager=new EntityVillagerFarmer(world);
    entityvillager.setLocationAndAngles((double)pos.getX() + 0.5D,(double)pos.getY() + 1,(double)pos.getZ() + 0.5D,0.0F,0.0F);
    world.spawnEntityInWorld(entityvillager);
  }
}"
95540,"@Override protected void spawnVillagers(World world,StructureBoundingBox boundingBox,int x,int y,int z,int limit){
  if (AgriCraftConfig.villagerEnabled) {
    int nrVillagersSpawned=getNumberOfSpawnedVillagers(world);
    if (nrVillagersSpawned < limit) {
      for (int i1=nrVillagersSpawned; i1 < limit; ++i1) {
        int j1=this.getXWithOffset(x + i1,z);
        int k1=this.getYWithOffset(y);
        int l1=this.getZWithOffset(x + i1,z);
        if (!boundingBox.isVecInside(new Vec3i(j1,k1,l1))) {
          break;
        }
        ++nrVillagersSpawned;
        EntityVillager entityvillager=new EntityVillagerFarmer(world,this.chooseProfession(nrVillagersSpawned,i1));
        entityvillager.setLocationAndAngles((double)j1 + 0.5D,(double)k1 + 1,(double)l1 + 0.5D,0.0F,0.0F);
        world.spawnEntityInWorld(entityvillager);
      }
    }
    setNumberOfSpawnedVillagers(world,nrVillagersSpawned);
  }
}","@Override protected void spawnVillagers(World world,StructureBoundingBox boundingBox,int x,int y,int z,int limit){
  if (AgriCraftConfig.villagerEnabled) {
    int nrVillagersSpawned=getNumberOfSpawnedVillagers(world);
    if (nrVillagersSpawned < limit) {
      for (int i1=nrVillagersSpawned; i1 < limit; ++i1) {
        int j1=this.getXWithOffset(x + i1,z);
        int k1=this.getYWithOffset(y);
        int l1=this.getZWithOffset(x + i1,z);
        if (!boundingBox.isVecInside(new Vec3i(j1,k1,l1))) {
          break;
        }
        ++nrVillagersSpawned;
        EntityVillager villager=new EntityVillagerFarmer(world);
        villager.setLocationAndAngles((double)j1 + 0.5D,(double)k1 + 1,(double)l1 + 0.5D,0.0F,0.0F);
        world.spawnEntityInWorld(villager);
      }
    }
    setNumberOfSpawnedVillagers(world,nrVillagersSpawned);
  }
}"
95541,"protected boolean generateStructureCrop(World world,StructureBoundingBox boundingBox,int x,int y,int z,boolean crosscrop,List<IAgriPlant> plants){
  int xCoord=this.getXWithOffset(x,z);
  int yCoord=this.getYWithOffset(y);
  int zCoord=this.getZWithOffset(x,z);
  AgriCore.getLogger(""String_Node_Str"").debug(""String_Node_Str"" + xCoord + ""String_Node_Str""+ yCoord+ ""String_Node_Str""+ zCoord+ ""String_Node_Str"");
  if (boundingBox.isVecInside(new Vec3i(xCoord,yCoord,zCoord))) {
    BlockPos pos=new BlockPos(xCoord,yCoord,zCoord);
    world.setBlockState(pos,AgriProperties.GROWTHSTAGE.applyToBlockState(AgriBlocks.getInstance().CROP.getDefaultState(),0),2);
    TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(pos);
    if (crop != null) {
      if (crosscrop) {
        crop.setCrossCrop(true);
      }
 else {
        crop.setSeed(WorldGenerationHelper.getRandomSeed(world.rand,false,plants));
      }
    }
    return true;
  }
 else {
    return false;
  }
}","protected boolean generateStructureCrop(World world,StructureBoundingBox boundingBox,int x,int y,int z,boolean crosscrop,List<IAgriPlant> plants){
  int xCoord=this.getXWithOffset(x,z);
  int yCoord=this.getYWithOffset(y);
  int zCoord=this.getZWithOffset(x,z);
  AgriCore.getLogger(""String_Node_Str"").debug(""String_Node_Str"" + xCoord + ""String_Node_Str""+ yCoord+ ""String_Node_Str""+ zCoord+ ""String_Node_Str"");
  if (boundingBox.isVecInside(new Vec3i(xCoord,yCoord,zCoord))) {
    BlockPos pos=new BlockPos(xCoord,yCoord,zCoord);
    world.setBlockState(pos,AgriProperties.GROWTHSTAGE.applyToBlockState(AgriBlocks.getInstance().CROP.getDefaultState(),0),2);
    TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(pos);
    if (crop != null) {
      if (crosscrop) {
        crop.setCrossCrop(true);
      }
 else {
        if (plants.size() > 0) {
          crop.setSeed(WorldGenerationHelper.getRandomSeed(world.rand,false,plants));
        }
 else {
          AgriCore.getLogger(""String_Node_Str"").debug(""String_Node_Str"");
        }
      }
    }
    return true;
  }
 else {
    return false;
  }
}"
95542,IAgriSoil getSoil(String id);,"default IAgriSoil getSoil(FuzzyStack stack){
  return this.getSoils().stream().filter(s -> s.isVarient(stack)).findFirst().orElse(null);
}"
95543,boolean isSoil(IAgriSoil plant);,"default boolean isSoil(FuzzyStack soil){
  return this.getSoils().stream().anyMatch(s -> s.isVarient(soil));
}"
95544,"private static void registerCustomEntries(){
  AgriCore.getLogger(""String_Node_Str"").info(""String_Node_Str"");
  String[] data=new String[]{""String_Node_Str""};
  String total=""String_Node_Str"" + data.length + ""String_Node_Str"";
  for (  String line : data) {
    AgriCore.getLogger(""String_Node_Str"").debug(""String_Node_Str"" + line + total);
    ItemStack stack=((FuzzyStack)AgriCore.getConverter().toStack(line)).toStack();
    Block block=(stack != null && stack.getItem() instanceof ItemBlock) ? ((ItemBlock)stack.getItem()).block : null;
    if (block != null) {
      addDefaultSoil(new FuzzyStack(new ItemStack(block,stack.getItemDamage())));
    }
 else {
      AgriCore.getLogger(""String_Node_Str"").info(""String_Node_Str"" + line + ""String_Node_Str"");
    }
  }
  soils.removeIf(TypeHelper::isNull);
  AgriCore.getLogger(""String_Node_Str"").info(""String_Node_Str"");
  for (  FuzzyStack soil : soils) {
    AgriCore.getLogger(""String_Node_Str"").info(""String_Node_Str"" + Item.REGISTRY.getNameForObject(soil.getItem()) + ""String_Node_Str""+ soil.getMeta());
  }
}","private static void registerCustomEntries(){
  AgriCore.getLogger(""String_Node_Str"").info(""String_Node_Str"");
  String[] data=new String[]{""String_Node_Str""};
  String total=""String_Node_Str"" + data.length + ""String_Node_Str"";
  for (  String line : data) {
    AgriCore.getLogger(""String_Node_Str"").debug(""String_Node_Str"" + line + total);
    ItemStack stack=((FuzzyStack)AgriCore.getConverter().toStack(line)).toStack();
    Block block=(stack != null && stack.getItem() instanceof ItemBlock) ? ((ItemBlock)stack.getItem()).block : null;
    if (block != null) {
      addDefaultSoil(new FuzzyStack(new ItemStack(block,stack.getItemDamage())));
    }
 else {
      AgriCore.getLogger(""String_Node_Str"").info(""String_Node_Str"" + line + ""String_Node_Str"");
    }
  }
  AgriCore.getLogger(""String_Node_Str"").info(""String_Node_Str"");
}"
95545,"public static boolean isSoilValid(IBlockAccess world,BlockPos pos){
  FuzzyStack soil=new FuzzyStack(world.getBlockState(pos));
  return soils.contains(soil) || defaultSoils.contains(soil);
}","public static boolean isSoilValid(IBlockAccess world,BlockPos pos){
  FuzzyStack soil=new FuzzyStack(world.getBlockState(pos));
  return SoilRegistry.getInstance().isSoil(soil) || defaultSoils.contains(soil);
}"
95546,"public static void renderComponentStack(GuiBase gui,GuiComponent<ItemStack> component){
  RenderHelper.enableGUIStandardItemLighting();
  gui.getRenderItem().renderItemAndEffectIntoGUI(component.getComponent(),0,0);
  RenderHelper.disableStandardItemLighting();
}","public static void renderComponentStack(GuiBase gui,GuiComponent<ItemStack> component){
  gui.getRenderItem().renderItemAndEffectIntoGUI(component.getComponent(),0,0);
  GlStateManager.enableAlpha();
}"
95547,"public final void renderComponent(GuiBase gui){
  if (this.isVisible && this.renderAction != null) {
    GlStateManager.pushAttrib();
    GlStateManager.pushMatrix();
    GlStateManager.translate(this.bounds.x,this.bounds.y,0);
    GlStateManager.scale(scale,scale,scale);
    this.renderAction.accept(gui,this);
    GlStateManager.popMatrix();
    GlStateManager.popAttrib();
  }
}","public final void renderComponent(GuiBase gui){
  if (this.isVisible && this.renderAction != null) {
    GlStateManager.pushAttrib();
    GlStateManager.pushMatrix();
    GlStateManager.translate(this.bounds.x,this.bounds.y,0);
    GlStateManager.scale(scale,scale,scale);
    GlStateManager.color(1,1,1,1);
    this.renderAction.accept(gui,this);
    GlStateManager.popMatrix();
    GlStateManager.popAttrib();
  }
}"
95548,"@Override public void registerMessages(INetworkWrapper wrapper){
  wrapper.registerMessage(MessageContainerSeedStorage.class);
  wrapper.registerMessage(MessageFertilizerApplied.class);
  wrapper.registerMessage(MessageGuiSeedStorageClearSeed.class);
  wrapper.registerMessage(MessagePeripheralCheckNeighbours.class);
  wrapper.registerMessage(MessageSendNEISetting.class);
  wrapper.registerMessage(MessageSyncFluidLevel.class);
  wrapper.registerMessage(MessageTileEntitySeedStorage.class);
}","@Override public void registerMessages(INetworkWrapper wrapper){
  wrapper.registerMessage(MessageContainerSeedStorage.class);
  wrapper.registerMessage(MessageFertilizerApplied.class);
  wrapper.registerMessage(MessageGuiSeedStorageClearSeed.class);
  wrapper.registerMessage(MessagePeripheralCheckNeighbours.class);
  wrapper.registerMessage(MessageSendNEISetting.class);
  wrapper.registerMessage(MessageSyncFluidLevel.class);
  wrapper.registerMessage(MessageTileEntitySeedStorage.class);
  wrapper.registerMessage(MessageSyncSoilJson.class);
  wrapper.registerMessage(MessageSyncPlantJson.class);
  wrapper.registerMessage(MessageSyncMutationJson.class);
}"
95549,"/** 
 * Handles right-clicks from the player. Allows the player to 'use' the block. TODO: Clean up this horrible mess of a method.
 * @return if the right-click was consumed.
 */
@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,ItemStack heldItem,EnumFacing side,float hitX,float hitY,float hitZ){
  if (world.isRemote) {
    return true;
  }
  TileEntity te=world.getTileEntity(pos);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    if (AgriItems.getInstance().HAND_RAKE.isEnabled() && heldItem == null) {
      return false;
    }
 else     if (player.isSneaking() || heldItem == null || heldItem.getItem() == null) {
      this.harvest(world,pos,state,player,crop);
    }
 else     if (TypeHelper.isAnyType(heldItem.getItem(),ITEM_EXCLUDES)) {
      return false;
    }
 else     if (FertilizerRegistry.getInstance().hasAdapter(heldItem)) {
      IAgriFertilizer fert=FertilizerRegistry.getInstance().getValue(heldItem);
      return fert == null ? false : fert.applyFertilizer(player,world,pos,crop,heldItem,RANDOM);
    }
 else     if (plantSeed(heldItem,world,pos)) {
      return true;
    }
 else     if (heldItem.getItem() == AgriItems.getInstance().CROPS) {
      this.setCrossCrop(world,pos,state,player,heldItem);
    }
 else {
      this.harvest(world,pos,state,player,crop);
    }
  }
  return true;
}","/** 
 * Handles right-clicks from the player. Allows the player to 'use' the block. TODO: Clean up this horrible mess of a method.
 * @return if the right-click was consumed.
 */
@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,ItemStack heldItem,EnumFacing side,float hitX,float hitY,float hitZ){
  if (world.isRemote) {
    return true;
  }
  TileEntity te=world.getTileEntity(pos);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    if (AgriItems.getInstance().HAND_RAKE.isEnabled() && heldItem == null && crop.canWeed()) {
      return false;
    }
 else     if (player.isSneaking() || heldItem == null || heldItem.getItem() == null) {
      this.harvest(world,pos,state,player,crop);
    }
 else     if (TypeHelper.isAnyType(heldItem.getItem(),ITEM_EXCLUDES)) {
      return false;
    }
 else     if (FertilizerRegistry.getInstance().hasAdapter(heldItem)) {
      IAgriFertilizer fert=FertilizerRegistry.getInstance().getValue(heldItem);
      return fert == null ? false : fert.applyFertilizer(player,world,pos,crop,heldItem,RANDOM);
    }
 else     if (plantSeed(heldItem,world,pos)) {
      return true;
    }
 else     if (heldItem.getItem() == AgriItems.getInstance().CROPS) {
      this.setCrossCrop(world,pos,state,player,heldItem);
    }
 else {
      this.harvest(world,pos,state,player,crop);
    }
  }
  return true;
}"
95550,"@Override public final void renderInventoryBlock(ITessellator tessellator,World world,IBlockState state,B block,@Nullable T tile,ItemStack stack,EntityLivingBase entity,ItemCameraTransforms.TransformType type){
}","@Override public final void renderInventoryBlock(ITessellator tessellator,World world,IBlockState state,B block,@Nullable T tile,ItemStack stack,EntityLivingBase entity,ItemCameraTransforms.TransformType type){
  if (tile != null) {
    tile.setMaterial(stack);
    this.renderInventoryBlockWood(tessellator,world,state,block,tile,stack,entity,type,getIcon(tile));
  }
}"
95551,"/** 
 * Handles right-clicks from the player. Allows the player to 'use' the block. TODO: Clean up this horrible mess of a method.
 * @return if the right-click was consumed.
 */
@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,ItemStack heldItem,EnumFacing side,float hitX,float hitY,float hitZ){
  if (world.isRemote) {
    return true;
  }
  TileEntity te=world.getTileEntity(pos);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    if (AgriCraftItems.enableHandRake && crop.hasWeed() && heldItem == null) {
      return false;
    }
 else     if (player.isSneaking() || heldItem == null || heldItem.getItem() == null) {
      this.harvest(world,pos,state,player,crop);
    }
 else     if (heldItem.getItem() instanceof IRake || heldItem.getItem() instanceof IClipper) {
      return false;
    }
 else     if (heldItem.getItem() instanceof ItemAgriCraftSeed && !crop.isCrossCrop() && !crop.hasWeed()) {
      IAgriPlant plant=CropPlantHandler.getPlantFromStack(heldItem);
      if (plant != null && plant.getGrowthRequirement().canGrow(world,pos)) {
        crop.setStat(new PlantStats());
        crop.setPlant(plant);
        if (!player.capabilities.isCreativeMode) {
          heldItem.stackSize--;
        }
      }
    }
 else     if (heldItem.getItem() == AgriCraftItems.crops) {
      this.setCrossCrop(world,pos,state,player,heldItem);
    }
 else     if (heldItem.getItem() instanceof ITrowel) {
      crop.onTrowelUsed((ITrowel)heldItem.getItem(),heldItem);
    }
 else     if (heldItem.getItem() == net.minecraft.init.Items.dye && heldItem.getItemDamage() == 15) {
      return !crop.canBonemeal();
    }
 else     if (heldItem.getItem() instanceof IAgriFertilizer) {
      IAgriFertilizer fertilizer=(IAgriFertilizer)heldItem.getItem();
      if (crop.acceptsFertilizer(fertilizer)) {
        crop.applyFertilizer(fertilizer,world.rand);
        NetworkWrapper.getInstance().sendToAllAround(new MessageFertilizerApplied(heldItem,pos),new NetworkRegistry.TargetPoint(world.provider.getDimension(),pos.getX(),pos.getY(),pos.getZ(),32));
        if (!player.capabilities.isCreativeMode) {
          heldItem.stackSize=heldItem.stackSize - 1;
        }
      }
      return false;
    }
 else     if (heldItem.getItem() instanceof ItemDebugger) {
      return false;
    }
 else     if (CompatibilityHandler.getInstance().isRightClickHandled(heldItem.getItem())) {
      return CompatibilityHandler.getInstance().handleRightClick(world,pos,this,crop,player,heldItem);
    }
 else {
      this.harvest(world,pos,state,player,crop);
      if (CropPlantHandler.isValidSeed(heldItem)) {
        if (this.plantSeed(heldItem,world,pos)) {
          heldItem.stackSize=heldItem.stackSize - (player.capabilities.isCreativeMode ? 0 : 1);
        }
      }
    }
  }
  return true;
}","/** 
 * Handles right-clicks from the player. Allows the player to 'use' the block. TODO: Clean up this horrible mess of a method.
 * @return if the right-click was consumed.
 */
@Override public boolean onBlockActivated(World world,BlockPos pos,IBlockState state,EntityPlayer player,EnumHand hand,ItemStack heldItem,EnumFacing side,float hitX,float hitY,float hitZ){
  if (world.isRemote) {
    return true;
  }
  TileEntity te=world.getTileEntity(pos);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    if (AgriCraftItems.enableHandRake && crop.hasWeed() && heldItem == null) {
      return false;
    }
 else     if (player.isSneaking() || heldItem == null || heldItem.getItem() == null) {
      this.harvest(world,pos,state,player,crop);
    }
 else     if (heldItem.getItem() instanceof IRake || heldItem.getItem() instanceof IClipper || heldItem.getItem() instanceof ItemDebugger) {
      return false;
    }
 else     if (heldItem.getItem() instanceof ItemAgriCraftSeed && !crop.isCrossCrop() && !crop.hasWeed()) {
      IAgriPlant plant=CropPlantHandler.getPlantFromStack(heldItem);
      if (plant != null && plant.getGrowthRequirement().canGrow(world,pos)) {
        crop.setStat(new PlantStats());
        crop.setPlant(plant);
        if (!player.capabilities.isCreativeMode) {
          heldItem.stackSize--;
        }
      }
    }
 else     if (heldItem.getItem() == AgriCraftItems.crops) {
      this.setCrossCrop(world,pos,state,player,heldItem);
    }
 else     if (heldItem.getItem() instanceof ITrowel) {
      crop.onTrowelUsed((ITrowel)heldItem.getItem(),heldItem);
    }
 else     if (heldItem.getItem() == net.minecraft.init.Items.dye && heldItem.getItemDamage() == 15) {
      return !crop.canBonemeal();
    }
 else     if (heldItem.getItem() instanceof IAgriFertilizer) {
      IAgriFertilizer fertilizer=(IAgriFertilizer)heldItem.getItem();
      if (crop.acceptsFertilizer(fertilizer)) {
        crop.applyFertilizer(fertilizer,world.rand);
        NetworkWrapper.getInstance().sendToAllAround(new MessageFertilizerApplied(heldItem,pos),new NetworkRegistry.TargetPoint(world.provider.getDimension(),pos.getX(),pos.getY(),pos.getZ(),32));
        if (!player.capabilities.isCreativeMode) {
          heldItem.stackSize=heldItem.stackSize - 1;
        }
      }
      return false;
    }
 else     if (CompatibilityHandler.getInstance().isRightClickHandled(heldItem.getItem())) {
      return CompatibilityHandler.getInstance().handleRightClick(world,pos,this,crop,player,heldItem);
    }
 else {
      this.harvest(world,pos,state,player,crop);
      if (CropPlantHandler.isValidSeed(heldItem)) {
        if (this.plantSeed(heldItem,world,pos)) {
          heldItem.stackSize=heldItem.stackSize - (player.capabilities.isCreativeMode ? 0 : 1);
        }
      }
    }
  }
  return true;
}"
95552,"@SideOnly(Side.CLIENT) @Override public void addInformation(ItemStack stack,EntityPlayer player,List<String> list,boolean flag){
  if (stack == null || stack.getItem() == null) {
    list.add(""String_Node_Str"");
    return;
  }
  if (stack.getItem() instanceof ItemClipping) {
    stack=ItemStack.loadItemStackFromNBT(stack.getTagCompound());
  }
  if (stack == null || stack.getItem() == null) {
    list.add(""String_Node_Str"");
  }
}","@SideOnly(Side.CLIENT) @Override public void addInformation(ItemStack stack,EntityPlayer player,List<String> list,boolean flag){
}"
95553,"/** 
 * @return a list with only mature neighbours of type<code>TileEntityCrop</code>
 */
@Override public List<IAgriCrop> getMatureNeighbours(){
  List<IAgriCrop> neighbours=getNeighbours();
  for (Iterator<IAgriCrop> iterator=neighbours.iterator(); iterator.hasNext(); ) {
    IAgriCrop crop=iterator.next();
    if (!crop.hasPlant() || !crop.isMature()) {
      iterator.remove();
    }
  }
  return neighbours;
}","/** 
 * @return a list with only mature neighbours of type<code>TileEntityCrop</code>
 */
@Override public List<IAgriCrop> getMatureNeighbours(){
  List<IAgriCrop> neighbours=getNeighbours();
  neighbours.removeIf((p) -> {
    return !(p.hasPlant() && p.isMature());
  }
);
  return neighbours;
}"
95554,"@Override public void setGrowthStage(int stage){
  if (this.hasPlant() || this.hasWeed()) {
    stage&=Constants.MATURE;
    IBlockState state=worldObj.getBlockState(pos);
    state.withProperty(AgriCraftProperties.GROWTHSTAGE,stage);
    this.worldObj.setBlockState(pos,state,3);
  }
}","@Override public void setGrowthStage(int stage){
  if (this.hasPlant() || this.hasWeed()) {
    stage=MathHelper.inRange(stage,0,Constants.MATURE);
    IBlockState state=worldObj.getBlockState(pos);
    state=state.withProperty(AgriCraftProperties.GROWTHSTAGE,stage);
    this.worldObj.setBlockState(pos,state,3);
  }
}"
95555,"/** 
 * @return a list with all neighbours of type <code>TileEntityCrop</code> inthe NORTH, SOUTH, EAST and WEST DIRECTION
 */
@Override public List<IAgriCrop> getNeighbours(){
  List<IAgriCrop> neighbours=new ArrayList<>();
  addNeighbour(neighbours,AgriForgeDirection.NORTH);
  addNeighbour(neighbours,AgriForgeDirection.SOUTH);
  addNeighbour(neighbours,AgriForgeDirection.EAST);
  addNeighbour(neighbours,AgriForgeDirection.WEST);
  return neighbours;
}","/** 
 * @return a list with all neighbours of type <code>TileEntityCrop</code> inthe NORTH, SOUTH, EAST and WEST DIRECTION
 */
@Override public List<IAgriCrop> getNeighbours(){
  return WorldHelper.getTileNeighbors(worldObj,pos,IAgriCrop.class);
}"
95556,"public CropPlantAgriCraft(IAgriCraftPlant plant){
  super();
  this.plant=plant;
  this.setTier(plant.getSeed().tier());
  this.setGrowthRequirement(plant.getGrowthRequirement());
  this.setSpreadChance(100 / getTier());
  AgriCraftItems.clipping.addPlant(this,plant.getBlock().getRegistryName().replaceFirst(""String_Node_Str"",""String_Node_Str"") + 4);
}","public CropPlantAgriCraft(IAgriCraftPlant plant){
  super();
  this.plant=plant;
  this.setTier(plant.getSeed().tier());
  this.setGrowthRequirement(plant.getGrowthRequirement());
  this.setSpreadChance(100 / getTier());
  AgriCraftItems.clipping.addPlant(this,plant.getBlock().getRegistryName().toString().replaceFirst(""String_Node_Str"",""String_Node_Str"") + 4);
}"
95557,"private void denyEvent(PlayerInteractEvent event,boolean sendToServer){
  event.setResult(Event.Result.DENY);
  event.setUseItem(Event.Result.DENY);
  event.setUseBlock(Event.Result.DENY);
  if (sendToServer && event.getWorld().isRemote) {
    FMLClientHandler.instance().getClientPlayerEntity().sendQueue.addToSendQueue(new CPacketPlayerBlockPlacement());
  }
  event.setCanceled(true);
}","private void denyEvent(PlayerInteractEvent.RightClickBlock event,boolean sendToServer){
  event.setResult(Event.Result.DENY);
  event.setUseItem(Event.Result.DENY);
  event.setUseBlock(Event.Result.DENY);
  if (sendToServer && event.getWorld().isRemote) {
    FMLClientHandler.instance().getClientPlayerEntity().sendQueue.addToSendQueue(new CPacketPlayerBlockPlacement());
  }
  event.setCanceled(true);
}"
95558,"/** 
 * Event handler to disable vanilla farming 
 */
@SubscribeEvent(priority=EventPriority.HIGHEST) public void vanillaSeedPlanting(PlayerInteractEvent event){
  if (event.getAction() == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK) {
    EntityPlayer player=event.getEntityPlayer();
    ItemStack stack=player.getActiveItemStack();
    if (stack != null && stack.stackSize > 0 && stack.getItem() != null && stack.getItem() instanceof IPlantable) {
      if (GrowthRequirementHandler.isSoilValid(event.getWorld(),event.getPos())) {
        if (AgriCraftConfig.disableVanillaFarming) {
          if (!allowVanillaPlanting(stack)) {
            this.denyEvent(event,false);
            return;
          }
        }
        if (stack.hasTagCompound()) {
          NBTTagCompound tag=(NBTTagCompound)stack.getTagCompound().copy();
          if (tag.hasKey(AgriCraftNBT.GROWTH) && tag.hasKey(AgriCraftNBT.GAIN) && tag.hasKey(AgriCraftNBT.STRENGTH)) {
            this.denyEvent(event,false);
          }
        }
      }
    }
  }
}","/** 
 * Event handler to disable vanilla farming 
 */
@SubscribeEvent(priority=EventPriority.HIGHEST) public void vanillaSeedPlanting(PlayerInteractEvent.RightClickBlock event){
  EntityPlayer player=event.getEntityPlayer();
  ItemStack stack=player.getActiveItemStack();
  if (stack != null && stack.stackSize > 0 && stack.getItem() != null && stack.getItem() instanceof IPlantable) {
    if (GrowthRequirementHandler.isSoilValid(event.getWorld(),event.getPos())) {
      if (AgriCraftConfig.disableVanillaFarming) {
        if (!allowVanillaPlanting(stack)) {
          this.denyEvent(event,false);
          return;
        }
      }
      if (stack.hasTagCompound()) {
        NBTTagCompound tag=(NBTTagCompound)stack.getTagCompound().copy();
        if (tag.hasKey(AgriCraftNBT.GROWTH) && tag.hasKey(AgriCraftNBT.GAIN) && tag.hasKey(AgriCraftNBT.STRENGTH)) {
          this.denyEvent(event,false);
        }
      }
    }
  }
}"
95559,"/** 
 * Event handler to create water pads 
 */
@SubscribeEvent(priority=EventPriority.HIGHEST) public void waterPadCreation(PlayerInteractEvent event){
  if (event.getAction() == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK) {
    IBlockState state=event.getWorld().getBlockState(event.getPos());
    Block block=state.getBlock();
    if (block != Blocks.farmland) {
      return;
    }
    boolean flag=false;
    EntityPlayer player=event.getEntityPlayer();
    ItemStack stack=player.getActiveItemStack();
    if (stack != null && stack.getItem() != null && stack.getItem() instanceof ItemSpade) {
      flag=true;
    }
    if (flag) {
      if (event.getWorld().isRemote) {
        denyEvent(event,true);
      }
      event.getWorld().setBlockState(event.getPos(),com.infinityraider.agricraft.init.AgriCraftBlocks.blockWaterPad.getDefaultState(),3);
      if (!player.capabilities.isCreativeMode) {
        stack.damageItem(1,player);
        event.setResult(Event.Result.ALLOW);
      }
      SoundType sound=block.getStepSound();
      event.getWorld().playSound(null,(double)((float)event.getPos().getX() + 0.5F),(double)((float)event.getPos().getY() + 0.5F),(double)((float)event.getPos().getZ() + 0.5F),sound.getBreakSound(),SoundCategory.BLOCKS,(sound.getVolume() + 1.0F) / 2.0F,sound.getPitch() * 0.8F);
      denyEvent(event,false);
    }
  }
}","/** 
 * Event handler to create water pads 
 */
@SubscribeEvent(priority=EventPriority.HIGHEST) public void waterPadCreation(PlayerInteractEvent.RightClickBlock event){
  IBlockState state=event.getWorld().getBlockState(event.getPos());
  Block block=state.getBlock();
  if (block != Blocks.farmland) {
    return;
  }
  boolean flag=false;
  EntityPlayer player=event.getEntityPlayer();
  ItemStack stack=player.getActiveItemStack();
  if (stack != null && stack.getItem() != null && stack.getItem() instanceof ItemSpade) {
    flag=true;
  }
  if (flag) {
    if (event.getWorld().isRemote) {
      denyEvent(event,true);
    }
    event.getWorld().setBlockState(event.getPos(),com.infinityraider.agricraft.init.AgriCraftBlocks.blockWaterPad.getDefaultState(),3);
    if (!player.capabilities.isCreativeMode) {
      stack.damageItem(1,player);
      event.setResult(Event.Result.ALLOW);
    }
    SoundType sound=block.getStepSound();
    event.getWorld().playSound(null,(double)((float)event.getPos().getX() + 0.5F),(double)((float)event.getPos().getY() + 0.5F),(double)((float)event.getPos().getZ() + 0.5F),sound.getBreakSound(),SoundCategory.BLOCKS,(sound.getVolume() + 1.0F) / 2.0F,sound.getPitch() * 0.8F);
    denyEvent(event,false);
  }
}"
95560,"/** 
 * Event handler to deny bonemeal while sneaking on crops that are not allowed to be bonemealed 
 */
@SubscribeEvent public void denyBonemeal(PlayerInteractEvent event){
  if (event.getAction() != PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK) {
    return;
  }
  if (!event.getEntityPlayer().isSneaking()) {
    return;
  }
  ItemStack heldItem=event.getEntityPlayer().getActiveItemStack();
  if (heldItem != null && heldItem.getItem() == net.minecraft.init.Items.dye && heldItem.getItemDamage() == 15) {
    TileEntity te=event.getWorld().getTileEntity(event.getPos());
    if (te != null && (te instanceof TileEntityCrop)) {
      TileEntityCrop crop=(TileEntityCrop)te;
      if (!crop.canBonemeal()) {
        this.denyEvent(event,false);
      }
    }
  }
}","/** 
 * Event handler to deny bonemeal while sneaking on crops that are not allowed to be bone mealed 
 */
@SubscribeEvent public void denyBonemeal(PlayerInteractEvent.RightClickBlock event){
  if (!event.getEntityPlayer().isSneaking()) {
    return;
  }
  ItemStack heldItem=event.getEntityPlayer().getActiveItemStack();
  if (heldItem != null && heldItem.getItem() == net.minecraft.init.Items.dye && heldItem.getItemDamage() == 15) {
    TileEntity te=event.getWorld().getTileEntity(event.getPos());
    if (te != null && (te instanceof TileEntityCrop)) {
      TileEntityCrop crop=(TileEntityCrop)te;
      if (!crop.canBonemeal()) {
        this.denyEvent(event,false);
      }
    }
  }
}"
95561,"/** 
 * This is done with an event because else the player will place the vines as a block instead of applying them to the grate 
 */
@SubscribeEvent public void applyVinesToGrate(PlayerInteractEvent event){
  if (event.getAction() == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK) {
    ItemStack stack=event.getEntityPlayer().getActiveItemStack();
    if (stack == null || stack.getItem() == null || stack.getItem() != Item.getItemFromBlock(Blocks.vine)) {
      return;
    }
    Block block=event.getWorld().getBlockState(event.getPos()).getBlock();
    if (!(block instanceof BlockGrate)) {
      return;
    }
    if (event.getWorld().isRemote) {
      denyEvent(event,true);
    }
 else {
      block.onBlockActivated(event.getWorld(),event.getPos(),event.getWorld().getBlockState(event.getPos()),event.getEntityPlayer(),EnumHand.MAIN_HAND,stack,event.getFace(),0,0,0);
    }
  }
}","/** 
 * This is done with an event because else the player will place the vines as a block instead of applying them to the grate 
 */
@SubscribeEvent public void applyVinesToGrate(PlayerInteractEvent.RightClickBlock event){
  ItemStack stack=event.getEntityPlayer().getActiveItemStack();
  if (stack == null || stack.getItem() == null || stack.getItem() != Item.getItemFromBlock(Blocks.vine)) {
    return;
  }
  Block block=event.getWorld().getBlockState(event.getPos()).getBlock();
  if (!(block instanceof BlockGrate)) {
    return;
  }
  if (event.getWorld().isRemote) {
    denyEvent(event,true);
  }
 else {
    block.onBlockActivated(event.getWorld(),event.getPos(),event.getWorld().getBlockState(event.getPos()),event.getEntityPlayer(),EnumHand.MAIN_HAND,stack,event.getFace(),0,0,0);
  }
}"
95562,"public static void init(){
  if (!AgriCraftConfig.disableWorldGen) {
    if (AgriCraftConfig.villagerEnabled) {
      Collection<Integer> usedIds=VillagerRegistry.getRegisteredVillagers();
      int id=5;
      while (usedIds.contains(id)) {
        id++;
      }
      registerVillager(id);
    }
    MapGenStructureIO.registerStructureComponent(StructureGreenhouse.class,Reference.MOD_ID + ""String_Node_Str"");
    VillagerRegistry.instance().registerVillageCreationHandler(new VillageCreationHandler.GreenhouseHandler());
    if (!AgriCraftConfig.disableIrrigation) {
      MapGenStructureIO.registerStructureComponent(StructureGreenhouseIrrigated.class,Reference.MOD_ID + ""String_Node_Str"");
      VillagerRegistry.instance().registerVillageCreationHandler(new VillageCreationHandler.GreenhouseIrrigatedHandler());
    }
  }
}","public static void init(){
  if (!AgriCraftConfig.disableWorldGen) {
    if (AgriCraftConfig.villagerEnabled) {
      int id=5;
      registerVillager(id);
    }
    MapGenStructureIO.registerStructureComponent(StructureGreenhouse.class,Reference.MOD_ID + ""String_Node_Str"");
    VillagerRegistry.instance().registerVillageCreationHandler(new VillageCreationHandler.GreenhouseHandler());
    if (!AgriCraftConfig.disableIrrigation) {
      MapGenStructureIO.registerStructureComponent(StructureGreenhouseIrrigated.class,Reference.MOD_ID + ""String_Node_Str"");
      VillagerRegistry.instance().registerVillageCreationHandler(new VillageCreationHandler.GreenhouseIrrigatedHandler());
    }
  }
}"
95563,"private static void registerVillager(int id){
  VillagerRegistry.instance().registerVillagerId(id);
  AgriCraft.proxy.registerVillagerSkin(id,""String_Node_Str"");
  villagerId=id;
}","private static void registerVillager(int id){
  AgriCraft.proxy.registerVillagerSkin(id,""String_Node_Str"");
  villagerId=id;
}"
95564,"/** 
 * This constructor shouldn't be called from anywhere except from the BlockModPlant public constructor, if you create a new BlockModPlant, its contructor will create the seed for you
 */
public ItemModSeed(BlockModPlant plant,String information){
  super(plant,plant.getGrowthRequirement().getSoil() == null ? Blocks.farmland : plant.getGrowthRequirement().getSoil().getBlock());
  if (FMLCommonHandler.instance().getEffectiveSide() == Side.CLIENT) {
    this.information=information;
  }
  this.setCreativeTab(AgriCraftTab.agriCraftTab);
  this.seedName=""String_Node_Str"" + plant.getRegistryName().replaceFirst(""String_Node_Str"",""String_Node_Str"");
  RegisterHelper.registerSeed(this,plant,this.seedName);
}","/** 
 * This constructor shouldn't be called from anywhere except from the BlockModPlant public constructor, if you create a new BlockModPlant, its contructor will create the seed for you
 */
public ItemModSeed(BlockModPlant plant,String information){
  super(plant,plant.getGrowthRequirement().getSoil() == null ? Blocks.farmland : plant.getGrowthRequirement().getSoil().getBlock());
  if (FMLCommonHandler.instance().getEffectiveSide() == Side.CLIENT) {
    this.information=information;
  }
  this.setCreativeTab(AgriCraftTab.agriCraftTab);
  this.seedName=""String_Node_Str"" + plant.getRegistryName().toString().replaceFirst(""String_Node_Str"",""String_Node_Str"");
  RegisterHelper.registerSeed(this,plant,this.seedName);
}"
95565,"@Override public void registerVillagerSkin(int id,String resource){
  VillagerRegistry.instance().registerVillagerSkin(id,new ResourceLocation(Reference.MOD_ID,resource));
}","@Override public void registerVillagerSkin(int id,String resource){
}"
95566,"@Override @SuppressWarnings(""String_Node_Str"") public void registerRenderers(){
  for (  Field field : AgriCraftBlocks.class.getDeclaredFields()) {
    if (field.getType().isAssignableFrom(BlockBase.class)) {
      try {
        Object obj=field.get(null);
        if (obj != null) {
          BlockBase block=(BlockBase)obj;
          StateMapperBase stateMapper=new StateMapperBase(){
            @Override protected ModelResourceLocation getModelResourceLocation(            IBlockState state){
              return block.getBlockModelResourceLocation();
            }
          }
;
          ModelLoader.setCustomStateMapper(block,stateMapper);
          BlockRendererRegistry.getInstance().registerCustomBlockRenderer(block);
        }
      }
 catch (      IllegalAccessException e) {
        LogHelper.printStackTrace(e);
      }
    }
  }
  for (  Field field : AgriCraftItems.class.getDeclaredFields()) {
    if (field.getType().isAssignableFrom(ItemBase.class)) {
      try {
        Object obj=field.get(null);
        if (obj instanceof ItemBase) {
          ((ItemBase)obj).registerItemRenderer();
        }
      }
 catch (      IllegalAccessException e) {
        LogHelper.printStackTrace(e);
      }
    }
  }
  for (  ItemModSeed seed : AgriCraftCrops.seeds) {
    try {
      seed.registerItemRenderer();
    }
 catch (    Exception e) {
      LogHelper.printStackTrace(e);
    }
  }
  AgriCraftItems.clipping.registerItemRenderer();
  if (CustomCrops.customSeeds != null) {
    LogHelper.debug(""String_Node_Str"");
    for (    ItemModSeed seed : CustomCrops.customSeeds) {
      try {
        seed.registerItemRenderer();
        LogHelper.debug(""String_Node_Str"" + seed.getRegistryName());
      }
 catch (      Exception e) {
        LogHelper.printStackTrace(e);
      }
    }
    LogHelper.debug(""String_Node_Str"");
  }
  if (ResourceCrops.vanillaSeeds != null) {
    LogHelper.debug(""String_Node_Str"");
    for (    ItemModSeed seed : ResourceCrops.vanillaSeeds) {
      try {
        seed.registerItemRenderer();
        LogHelper.info(""String_Node_Str"" + seed.getRegistryName());
      }
 catch (      Exception e) {
        LogHelper.printStackTrace(e);
      }
    }
    LogHelper.debug(""String_Node_Str"");
  }
  if (ResourceCrops.modSeeds != null) {
    LogHelper.debug(""String_Node_Str"");
    for (    ItemModSeed seed : ResourceCrops.modSeeds) {
      try {
        seed.registerItemRenderer();
        LogHelper.info(""String_Node_Str"" + seed.getRegistryName());
      }
 catch (      Exception e) {
        LogHelper.printStackTrace(e);
      }
    }
    LogHelper.debug(""String_Node_Str"");
  }
  OreDictHelper.registerNuggetRenderers();
  if (!AgriCraftConfig.disableWorldGen && AgriCraftConfig.villagerEnabled) {
    VillagerRegistry.instance().registerVillagerSkin(78943,new ResourceLocation(""String_Node_Str""));
  }
  LogHelper.debug(""String_Node_Str"");
}","@Override @SuppressWarnings(""String_Node_Str"") public void registerRenderers(){
  for (  Field field : AgriCraftBlocks.class.getDeclaredFields()) {
    if (field.getType().isAssignableFrom(BlockBase.class)) {
      try {
        Object obj=field.get(null);
        if (obj != null) {
          BlockBase block=(BlockBase)obj;
          StateMapperBase stateMapper=new StateMapperBase(){
            @Override protected ModelResourceLocation getModelResourceLocation(            IBlockState state){
              return block.getBlockModelResourceLocation();
            }
          }
;
          ModelLoader.setCustomStateMapper(block,stateMapper);
          BlockRendererRegistry.getInstance().registerCustomBlockRenderer(block);
        }
      }
 catch (      IllegalAccessException e) {
        LogHelper.printStackTrace(e);
      }
    }
  }
  for (  Field field : AgriCraftItems.class.getDeclaredFields()) {
    if (field.getType().isAssignableFrom(ItemBase.class)) {
      try {
        Object obj=field.get(null);
        if (obj instanceof ItemBase) {
          ((ItemBase)obj).registerItemRenderer();
        }
      }
 catch (      IllegalAccessException e) {
        LogHelper.printStackTrace(e);
      }
    }
  }
  for (  ItemModSeed seed : AgriCraftCrops.seeds) {
    try {
      seed.registerItemRenderer();
    }
 catch (    Exception e) {
      LogHelper.printStackTrace(e);
    }
  }
  AgriCraftItems.clipping.registerItemRenderer();
  if (CustomCrops.customSeeds != null) {
    LogHelper.debug(""String_Node_Str"");
    for (    ItemModSeed seed : CustomCrops.customSeeds) {
      try {
        seed.registerItemRenderer();
        LogHelper.debug(""String_Node_Str"" + seed.getRegistryName());
      }
 catch (      Exception e) {
        LogHelper.printStackTrace(e);
      }
    }
    LogHelper.debug(""String_Node_Str"");
  }
  if (ResourceCrops.vanillaSeeds != null) {
    LogHelper.debug(""String_Node_Str"");
    for (    ItemModSeed seed : ResourceCrops.vanillaSeeds) {
      try {
        seed.registerItemRenderer();
        LogHelper.info(""String_Node_Str"" + seed.getRegistryName());
      }
 catch (      Exception e) {
        LogHelper.printStackTrace(e);
      }
    }
    LogHelper.debug(""String_Node_Str"");
  }
  if (ResourceCrops.modSeeds != null) {
    LogHelper.debug(""String_Node_Str"");
    for (    ItemModSeed seed : ResourceCrops.modSeeds) {
      try {
        seed.registerItemRenderer();
        LogHelper.info(""String_Node_Str"" + seed.getRegistryName());
      }
 catch (      Exception e) {
        LogHelper.printStackTrace(e);
      }
    }
    LogHelper.debug(""String_Node_Str"");
  }
  OreDictHelper.registerNuggetRenderers();
  if (!AgriCraftConfig.disableWorldGen && AgriCraftConfig.villagerEnabled) {
  }
  LogHelper.debug(""String_Node_Str"");
}"
95567,"/** 
 * Generates an NBTTag for the MATERIAL the CustomWood is mimicking.
 * @return an NBTTag for the CustomWood MATERIAL.
 */
public final NBTTagCompound getMaterialTag(){
  NBTTagCompound tag=new NBTTagCompound();
  tag.setString(AgriCraftNBT.MATERIAL,this.material.getRegistryName());
  tag.setInteger(AgriCraftNBT.MATERIAL_META,this.materialMeta);
  return tag;
}","/** 
 * Generates an NBTTag for the MATERIAL the CustomWood is mimicking.
 * @return an NBTTag for the CustomWood MATERIAL.
 */
public final NBTTagCompound getMaterialTag(){
  NBTTagCompound tag=new NBTTagCompound();
  tag.setString(AgriCraftNBT.MATERIAL,this.material.getRegistryName().toString());
  tag.setInteger(AgriCraftNBT.MATERIAL_META,this.materialMeta);
  return tag;
}"
95568,"@Override public final void writeTileNBT(NBTTagCompound tag){
  tag.setString(AgriCraftNBT.MATERIAL,this.getMaterial().getRegistryName());
  tag.setInteger(AgriCraftNBT.MATERIAL_META,this.getMaterialMeta());
  this.writeNBT(tag);
}","@Override public final void writeTileNBT(NBTTagCompound tag){
  tag.setString(AgriCraftNBT.MATERIAL,this.getMaterial().getRegistryName().toString());
  tag.setInteger(AgriCraftNBT.MATERIAL_META,this.getMaterialMeta());
  this.writeNBT(tag);
}"
95569,"public static NBTTagCompound getMaterialTag(ItemStack stack){
  NBTTagCompound tag=null;
  if (stack != null && stack.getItem() != null) {
    Block block=(((ItemBlock)stack.getItem()).block);
    if (block != null) {
      tag=new NBTTagCompound();
      tag.setString(AgriCraftNBT.MATERIAL,block.getRegistryName());
      tag.setInteger(AgriCraftNBT.MATERIAL_META,stack.getMetadata());
    }
  }
  return tag;
}","public static NBTTagCompound getMaterialTag(ItemStack stack){
  NBTTagCompound tag=null;
  if (stack != null && stack.getItem() != null) {
    Block block=(((ItemBlock)stack.getItem()).block);
    if (block != null) {
      tag=new NBTTagCompound();
      tag.setString(AgriCraftNBT.MATERIAL,block.getRegistryName().toString());
      tag.setInteger(AgriCraftNBT.MATERIAL_META,stack.getMetadata());
    }
  }
  return tag;
}"
95570,"public static TextureAtlasSprite getIcon(final Item item){
  return (item == null) ? getDefaultIcon() : getIcon(item.getRegistryName(),EXPANSION_ITEM);
}","public static TextureAtlasSprite getIcon(final Item item){
  return (item == null) ? getDefaultIcon() : getIcon(item.getRegistryName().toString(),EXPANSION_ITEM);
}"
95571,"@Override public void registerEventHandlers(){
  super.registerEventHandlers();
  MissingJsonHandler missingJsonHandler=new MissingJsonHandler();
  MinecraftForge.EVENT_BUS.register(missingJsonHandler);
  ItemToolTipHandler itemToolTipHandler=new ItemToolTipHandler();
  MinecraftForge.EVENT_BUS.register(itemToolTipHandler);
  RenderPlayerHooks renderPlayerHooks=new RenderPlayerHooks();
  MinecraftForge.EVENT_BUS.register(renderPlayerHooks);
  SoundHandler soundHandler=new SoundHandler();
  MinecraftForge.EVENT_BUS.register(soundHandler);
}","@Override public void registerEventHandlers(){
  super.registerEventHandlers();
  MissingJsonHandler missingJsonHandler=new MissingJsonHandler();
  MinecraftForge.EVENT_BUS.register(missingJsonHandler);
  ItemToolTipHandler itemToolTipHandler=new ItemToolTipHandler();
  MinecraftForge.EVENT_BUS.register(itemToolTipHandler);
  SoundHandler soundHandler=new SoundHandler();
  MinecraftForge.EVENT_BUS.register(soundHandler);
}"
95572,"private void initializeCache(IReloadableResourceManager resourceManager){
  this.resourceManager=resourceManager;
  cachedObjects.forEach(INSTANCE::retrieveBlockIcons);
}","private void initializeCache(){
  this.modelLocationsMap=Maps.<IBlockState,ModelResourceLocation>newLinkedHashMap();
  this.variantsMap=Maps.<ModelResourceLocation,ModelBlockDefinition.Variants>newLinkedHashMap();
  this.modelMap=Maps.<ResourceLocation,ModelBlock>newLinkedHashMap();
  this.modelCache=Maps.<IBlockState,List<ModelBlock>>newLinkedHashMap();
  this.textureCache=Maps.<IBlockState,List<TextureAtlasSprite>>newLinkedHashMap();
  cachedObjects.forEach(INSTANCE::retrieveBlockIcons);
}"
95573,"@Override public void onResourceManagerReload(IResourceManager resourceManager){
  if (resourceManager instanceof IReloadableResourceManager) {
    initializeCache((IReloadableResourceManager)resourceManager);
  }
 else {
    cachedObjects.forEach(INSTANCE::retrieveBlockIcons);
  }
}","@Override public void onResourceManagerReload(IResourceManager resourceManager){
  if (resourceManager instanceof IReloadableResourceManager) {
    this.resourceManager=(IReloadableResourceManager)resourceManager;
  }
  initializeCache();
}"
95574,"public static TextureCache getInstance(){
  if (INSTANCE == null) {
    INSTANCE=new TextureCache((IReloadableResourceManager)Minecraft.getMinecraft().getResourceManager());
  }
  return INSTANCE;
}","public static TextureCache getInstance(){
  if (INSTANCE == null) {
    INSTANCE=new TextureCache((IReloadableResourceManager)Minecraft.getMinecraft().getResourceManager());
    INSTANCE.resourceManager.registerReloadListener(INSTANCE);
  }
  return INSTANCE;
}"
95575,"private TextureCache(IReloadableResourceManager resourceManager){
  this.resourceManager=resourceManager;
  this.defaultMapper=new DefaultStateMapper();
  this.blockStateMap=retrieveBlockStateMap(retrieveModelManager());
  this.modelLocationsMap=Maps.<IBlockState,ModelResourceLocation>newLinkedHashMap();
  this.variantsMap=Maps.<ModelResourceLocation,ModelBlockDefinition.Variants>newLinkedHashMap();
  this.modelMap=Maps.<ResourceLocation,ModelBlock>newLinkedHashMap();
  this.modelCache=Maps.<IBlockState,List<ModelBlock>>newLinkedHashMap();
  this.textureCache=Maps.<IBlockState,List<TextureAtlasSprite>>newLinkedHashMap();
  resourceManager.registerReloadListener(this);
}","private TextureCache(IReloadableResourceManager resourceManager){
  this.resourceManager=resourceManager;
  this.defaultMapper=new DefaultStateMapper();
  this.blockStateMap=retrieveBlockStateMap(retrieveModelManager());
  this.modelLocationsMap=Maps.<IBlockState,ModelResourceLocation>newLinkedHashMap();
  this.variantsMap=Maps.<ModelResourceLocation,ModelBlockDefinition.Variants>newLinkedHashMap();
  this.modelMap=Maps.<ResourceLocation,ModelBlock>newLinkedHashMap();
  this.modelCache=Maps.<IBlockState,List<ModelBlock>>newLinkedHashMap();
  this.textureCache=Maps.<IBlockState,List<TextureAtlasSprite>>newLinkedHashMap();
}"
95576,"@Override public void setInventorySlotContents(int slot,ItemStack inputStack){
  if (slotsList == null || slot >= slotsList.size()) {
    this.addStackToInventory(inputStack);
    return;
  }
  if (this.isItemValidForSlot(slot,inputStack)) {
    SeedStorageSlot slotAt=this.slotsList.get(slot);
    if (slotAt != null) {
      if (inputStack == null) {
        slots.remove(slotAt.getId());
        slotsList.remove(slotAt);
        return;
      }
      slotAt.count=inputStack.stackSize;
      if (slotAt.count <= 0) {
        slots.remove(slotAt.getId());
        slotsList.remove(slotAt);
      }
      if (!this.worldObj.isRemote) {
        this.syncSlotToClient(slotAt);
      }
    }
 else {
      this.addStackToInventory(inputStack);
    }
  }
}","@Override public void setInventorySlotContents(int slot,ItemStack inputStack){
  if (slotsList == null || slot >= slotsList.size()) {
    this.addStackToInventory(inputStack);
    return;
  }
  if (inputStack == null) {
    inputStack=slotsList.get(slot).getStack(lockedSeed,lockedSeedMeta);
    inputStack.stackSize=0;
  }
  if (this.isItemValidForSlot(slot,inputStack)) {
    SeedStorageSlot slotAt=this.slotsList.get(slot);
    if (slotAt != null) {
      slotAt.count=inputStack.stackSize;
      if (slotAt.count <= 0) {
        slots.remove(slotAt.getId());
        slotsList.remove(slotAt);
      }
      if (!this.worldObj.isRemote) {
        this.syncSlotToClient(slotAt);
      }
    }
 else {
      this.addStackToInventory(inputStack);
    }
  }
}"
95577,"@Override public void setInventorySlotContents(int slot,ItemStack inputStack){
  if (slotsList == null || slot >= slotsList.size()) {
    this.addStackToInventory(inputStack);
    return;
  }
  if (this.isItemValidForSlot(slot,inputStack)) {
    SeedStorageSlot slotAt=this.slotsList.get(slot);
    if (slotAt != null) {
      slotAt.count=inputStack.stackSize;
      if (slotAt.count <= 0) {
        slots.remove(slotAt.getId());
        slotsList.remove(slotAt);
      }
      if (!this.worldObj.isRemote) {
        this.syncSlotToClient(slotAt);
      }
    }
 else {
      this.addStackToInventory(inputStack);
    }
  }
}","@Override public void setInventorySlotContents(int slot,ItemStack inputStack){
  if (slotsList == null || slot >= slotsList.size()) {
    this.addStackToInventory(inputStack);
    return;
  }
  if (this.isItemValidForSlot(slot,inputStack)) {
    SeedStorageSlot slotAt=this.slotsList.get(slot);
    if (slotAt != null) {
      if (inputStack == null) {
        slots.remove(slotAt.getId());
        slotsList.remove(slotAt);
        return;
      }
      slotAt.count=inputStack.stackSize;
      if (slotAt.count <= 0) {
        slots.remove(slotAt.getId());
        slotsList.remove(slotAt);
      }
      if (!this.worldObj.isRemote) {
        this.syncSlotToClient(slotAt);
      }
    }
 else {
      this.addStackToInventory(inputStack);
    }
  }
}"
95578,"public static void registerGrowthRequirement(ItemWithMeta item,IGrowthRequirement requirement) throws InvalidSeedException {
  if (CropPlantHandler.isValidSeed(item.toStack())) {
    throw new InvalidSeedException();
  }
  growthRequirements.put(item,requirement);
  BlockWithMeta soil=requirement.getSoil();
  if (soil != null) {
    GrowthRequirementHandler.addSoil(soil);
  }
}","public static void registerGrowthRequirement(ItemWithMeta item,IGrowthRequirement requirement) throws InvalidSeedException {
  if (!CropPlantHandler.isValidSeed(item.toStack())) {
    throw new InvalidSeedException();
  }
  growthRequirements.put(item,requirement);
  BlockWithMeta soil=requirement.getSoil();
  if (soil != null) {
    GrowthRequirementHandler.addSoil(soil);
  }
}"
95579,"/** 
 * Takes a string input with a specific formatting and parses it as an ItemStack. Syntax: domain:regname:meta#amount IE: minecraft:stone:0#8
 * @param stackString - Formatted string
 * @param input       - Whether the string defines an input or not.
 * @return            - An ItemStack built from the string
 */
public static ItemStack parseItemStack(String stackString,boolean input){
  if (stackString == null)   return null;
  try {
    if (stackString.contains(""String_Node_Str"")) {
      String[] nameInfo=stackString.split(""String_Node_Str"");
      String name=nameInfo[0] + ""String_Node_Str"" + nameInfo[1];
      String[] stackInfo=nameInfo[2].split(""String_Node_Str"");
      int meta=Integer.parseInt(stackInfo[0]);
      int amount=Integer.parseInt(stackInfo[1]);
      return new ItemStack(GameData.getItemRegistry().getObject(name),amount,meta);
    }
 else     if (stackString.equals(""String_Node_Str"")) {
      return null;
    }
 else     if (!input) {
      String[] stackInfo=stackString.split(""String_Node_Str"");
      ItemStack oreStack=OreDictionary.getOres(stackInfo[0]).get(0);
      int amount=Integer.parseInt(stackInfo[1]);
      return new ItemStack(oreStack.getItem(),amount,oreStack.getItemDamage());
    }
  }
 catch (  ArrayIndexOutOfBoundsException e) {
    LogHelper.error(""String_Node_Str"" + (input ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""+ stackString+ ""String_Node_Str"");
  }
  return null;
}","/** 
 * Takes a string input with a specific formatting and parses it as an ItemStack. Syntax: domain:regname:meta#amount IE: minecraft:stone:0#8
 * @param stackString - Formatted string
 * @param input       - Whether the string defines an input or not.
 * @return            - An ItemStack built from the string
 */
public static ItemStack parseItemStack(String stackString,boolean input){
  if (stackString == null)   return null;
  try {
    if (stackString.contains(""String_Node_Str"")) {
      String[] nameInfo=stackString.split(""String_Node_Str"");
      String name=nameInfo[0] + ""String_Node_Str"" + nameInfo[1];
      String[] stackInfo=nameInfo[2].split(""String_Node_Str"");
      int meta=Integer.parseInt(stackInfo[0]);
      int amount=Integer.parseInt(stackInfo[1]);
      return new ItemStack(GameData.getItemRegistry().getObject(name),amount,meta);
    }
 else     if (stackString.equals(""String_Node_Str"")) {
      return null;
    }
 else     if (!input) {
      String[] stackInfo=stackString.split(""String_Node_Str"");
      ItemStack oreStack=OreDictionary.getOres(stackInfo[0]).get(0);
      int amount=Integer.parseInt(stackInfo[1]);
      return new ItemStack(oreStack.getItem(),amount,oreStack.getItemDamage());
    }
  }
 catch (  ArrayIndexOutOfBoundsException e) {
  }
  return null;
}"
95580,"protected void drawScaledFaceDoubleXY(Tessellator tessellator,float minX,float minY,float maxX,float maxY,IIcon icon,float z){
  z=z * 16.0F;
  float minU=0;
  float maxU=icon.getIconWidth();
  float minV=0;
  float maxV=icon.getIconHeight();
  addScaledVertexWithUV(tessellator,maxX,maxY,z,maxU,minV,icon);
  addScaledVertexWithUV(tessellator,maxX,minY,z,maxU,maxV,icon);
  addScaledVertexWithUV(tessellator,minX,minY,z,minU,maxV,icon);
  addScaledVertexWithUV(tessellator,minX,maxY,z,minU,minV,icon);
  addScaledVertexWithUV(tessellator,maxX,maxY,z,maxU,minV,icon);
  addScaledVertexWithUV(tessellator,minX,maxY,z,minU,minV,icon);
  addScaledVertexWithUV(tessellator,minX,minY,z,minU,maxV,icon);
  addScaledVertexWithUV(tessellator,maxX,minY,z,maxU,maxV,icon);
}","protected void drawScaledFaceDoubleXY(Tessellator tessellator,float minX,float minY,float maxX,float maxY,IIcon icon,float z){
  z=z * 16.0F;
  float minU=0;
  float maxU=16;
  float minV=0;
  float maxV=16;
  addScaledVertexWithUV(tessellator,maxX,maxY,z,maxU,minV,icon);
  addScaledVertexWithUV(tessellator,maxX,minY,z,maxU,maxV,icon);
  addScaledVertexWithUV(tessellator,minX,minY,z,minU,maxV,icon);
  addScaledVertexWithUV(tessellator,minX,maxY,z,minU,minV,icon);
  addScaledVertexWithUV(tessellator,maxX,maxY,z,maxU,minV,icon);
  addScaledVertexWithUV(tessellator,minX,maxY,z,minU,minV,icon);
  addScaledVertexWithUV(tessellator,minX,minY,z,minU,maxV,icon);
  addScaledVertexWithUV(tessellator,maxX,minY,z,maxU,maxV,icon);
}"
95581,"protected void drawScaledFaceDoubleXZ(Tessellator tessellator,float minX,float minZ,float maxX,float maxZ,IIcon icon,float y){
  y=y * 16.0F;
  float minU=0;
  float maxU=icon.getIconWidth();
  float minV=0;
  float maxV=icon.getIconHeight();
  addScaledVertexWithUV(tessellator,maxX,y,maxZ,maxU,maxV,icon);
  addScaledVertexWithUV(tessellator,maxX,y,minZ,maxU,minV,icon);
  addScaledVertexWithUV(tessellator,minX,y,minZ,minU,minV,icon);
  addScaledVertexWithUV(tessellator,minX,y,maxZ,minU,maxV,icon);
  addScaledVertexWithUV(tessellator,maxX,y,maxZ,maxU,maxV,icon);
  addScaledVertexWithUV(tessellator,minX,y,maxZ,minU,maxV,icon);
  addScaledVertexWithUV(tessellator,minX,y,minZ,minU,minV,icon);
  addScaledVertexWithUV(tessellator,maxX,y,minZ,maxU,minV,icon);
}","protected void drawScaledFaceDoubleXZ(Tessellator tessellator,float minX,float minZ,float maxX,float maxZ,IIcon icon,float y){
  y=y * 16.0F;
  float minU=0;
  float maxU=16;
  float minV=0;
  float maxV=16;
  addScaledVertexWithUV(tessellator,maxX,y,maxZ,maxU,maxV,icon);
  addScaledVertexWithUV(tessellator,maxX,y,minZ,maxU,minV,icon);
  addScaledVertexWithUV(tessellator,minX,y,minZ,minU,minV,icon);
  addScaledVertexWithUV(tessellator,minX,y,maxZ,minU,maxV,icon);
  addScaledVertexWithUV(tessellator,maxX,y,maxZ,maxU,maxV,icon);
  addScaledVertexWithUV(tessellator,minX,y,maxZ,minU,maxV,icon);
  addScaledVertexWithUV(tessellator,minX,y,minZ,minU,minV,icon);
  addScaledVertexWithUV(tessellator,maxX,y,minZ,maxU,minV,icon);
}"
95582,"protected void drawScaledFaceDoubleYZ(Tessellator tessellator,float minY,float minZ,float maxY,float maxZ,IIcon icon,float x){
  x=x * 16.0F;
  float minU=0;
  float maxU=icon.getIconWidth();
  float minV=0;
  float maxV=icon.getIconHeight();
  addScaledVertexWithUV(tessellator,x,maxY,maxZ,maxU,minV,icon);
  addScaledVertexWithUV(tessellator,x,minY,maxZ,maxU,maxV,icon);
  addScaledVertexWithUV(tessellator,x,minY,minZ,minU,maxV,icon);
  addScaledVertexWithUV(tessellator,x,maxY,minZ,minU,minV,icon);
  addScaledVertexWithUV(tessellator,x,maxY,maxZ,maxU,minV,icon);
  addScaledVertexWithUV(tessellator,x,maxY,minZ,minU,minV,icon);
  addScaledVertexWithUV(tessellator,x,minY,minZ,minU,maxV,icon);
  addScaledVertexWithUV(tessellator,x,minY,maxZ,maxU,maxV,icon);
}","protected void drawScaledFaceDoubleYZ(Tessellator tessellator,float minY,float minZ,float maxY,float maxZ,IIcon icon,float x){
  x=x * 16.0F;
  float minU=0;
  float maxU=16;
  float minV=0;
  float maxV=16;
  addScaledVertexWithUV(tessellator,x,maxY,maxZ,maxU,minV,icon);
  addScaledVertexWithUV(tessellator,x,minY,maxZ,maxU,maxV,icon);
  addScaledVertexWithUV(tessellator,x,minY,minZ,minU,maxV,icon);
  addScaledVertexWithUV(tessellator,x,maxY,minZ,minU,minV,icon);
  addScaledVertexWithUV(tessellator,x,maxY,maxZ,maxU,minV,icon);
  addScaledVertexWithUV(tessellator,x,maxY,minZ,minU,minV,icon);
  addScaledVertexWithUV(tessellator,x,minY,minZ,minU,maxV,icon);
  addScaledVertexWithUV(tessellator,x,minY,maxZ,maxU,maxV,icon);
}"
95583,"/** 
 * Event handler to create water pads 
 */
@SubscribeEvent(priority=EventPriority.HIGHEST) public void waterPadCreation(PlayerInteractEvent event){
  if (event.action == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK) {
    boolean flag=false;
    if (event.entityPlayer.getCurrentEquippedItem() != null && event.entityPlayer.getCurrentEquippedItem().getItem() != null && event.entityPlayer.getCurrentEquippedItem().getItem() instanceof ItemSpade) {
      flag=true;
    }
 else     if (ModHelper.allowIntegration(Names.Mods.tconstruct) && TinkersConstructHelper.isShovel(event.entityPlayer.getCurrentEquippedItem())) {
      flag=true;
    }
    if (flag) {
      if (event.world.isRemote) {
        denyEvent(event,true);
      }
      Block block=event.world.getBlock(event.x,event.y,event.z);
      if (block == Blocks.farmland) {
        event.world.setBlock(event.x,event.y,event.z,com.InfinityRaider.AgriCraft.init.Blocks.blockWaterPad,0,3);
        if (!event.entityPlayer.capabilities.isCreativeMode) {
          event.entityPlayer.getCurrentEquippedItem().damageItem(1,event.entityPlayer);
          event.setResult(Event.Result.ALLOW);
        }
        event.world.playSoundEffect((double)((float)event.x + 0.5F),(double)((float)event.y + 0.5F),(double)((float)event.z + 0.5F),block.stepSound.getStepResourcePath(),(block.stepSound.getVolume() + 1.0F) / 2.0F,block.stepSound.getPitch() * 0.8F);
        denyEvent(event,false);
      }
    }
  }
}","/** 
 * Event handler to create water pads 
 */
@SubscribeEvent(priority=EventPriority.HIGHEST) public void waterPadCreation(PlayerInteractEvent event){
  if (event.action == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK) {
    boolean flag=false;
    if (event.entityPlayer.getCurrentEquippedItem() != null && event.entityPlayer.getCurrentEquippedItem().getItem() != null && event.entityPlayer.getCurrentEquippedItem().getItem() instanceof ItemSpade) {
      flag=true;
    }
 else     if (ModHelper.allowIntegration(Names.Mods.tconstruct) && TinkersConstructHelper.isShovel(event.entityPlayer.getCurrentEquippedItem())) {
      flag=true;
    }
    if (event.world.getBlock(event.x,event.y,event.z) != Blocks.farmland)     flag=false;
    if (flag) {
      if (event.world.isRemote) {
        denyEvent(event,true);
      }
      Block block=event.world.getBlock(event.x,event.y,event.z);
      if (block == Blocks.farmland) {
        event.world.setBlock(event.x,event.y,event.z,com.InfinityRaider.AgriCraft.init.Blocks.blockWaterPad,0,3);
        if (!event.entityPlayer.capabilities.isCreativeMode) {
          event.entityPlayer.getCurrentEquippedItem().damageItem(1,event.entityPlayer);
          event.setResult(Event.Result.ALLOW);
        }
        event.world.playSoundEffect((double)((float)event.x + 0.5F),(double)((float)event.y + 0.5F),(double)((float)event.z + 0.5F),block.stepSound.getStepResourcePath(),(block.stepSound.getVolume() + 1.0F) / 2.0F,block.stepSound.getPitch() * 0.8F);
        denyEvent(event,false);
      }
    }
  }
}"
95584,"@Override public boolean removeWeeds(World world,int x,int y,int z,ItemStack rake){
  if (!ConfigurationHandler.enableWeeds) {
    return false;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    if (!crop.hasWeed()) {
      return false;
    }
    int weedGrowthStage=world.getBlockMetadata(x,y,z);
    int toolMeta=rake.getItemDamage();
    while (!world.isRemote && weedGrowthStage > 0) {
      weedGrowthStage=(toolMeta == 1) ? 0 : Math.max(random.nextInt(weedGrowthStage / 2 + 1) - 1,0) + weedGrowthStage / 2;
      crop.updateWeed(weedGrowthStage);
    }
    return true;
  }
  return false;
}","@Override public boolean removeWeeds(World world,int x,int y,int z,ItemStack rake){
  if (world.isRemote) {
    return false;
  }
  if (!ConfigurationHandler.enableWeeds) {
    return false;
  }
  if (rake == null || rake.getItem() == null || !(rake.getItem() instanceof IRake)) {
    return false;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    if (!crop.hasWeed()) {
      return false;
    }
    return ((IRake)rake.getItem()).removeWeeds(crop,rake);
  }
  return false;
}"
95585,"/** 
 * Handles right-clicks from the player. Allows the player to 'use' the block.
 * @return if the right-click was consumed.
 */
@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float fX,float fY,float fZ){
  if (world.isRemote) {
    return true;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te != null && te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    if (ConfigurationHandler.enableHandRake && crop.hasWeed()) {
      return false;
    }
    ItemStack heldItem=player.getCurrentEquippedItem();
    if (player.isSneaking()) {
      this.harvest(world,x,y,z,player,crop);
    }
 else     if (heldItem == null || heldItem.getItem() == null) {
      this.harvest(world,x,y,z,player,crop);
    }
 else     if (heldItem.getItem() == net.minecraft.init.Items.reeds) {
      if (crop.hasPlant()) {
        this.harvest(world,x,y,z,player,crop);
      }
 else       if (!crop.isCrossCrop() && !crop.hasWeed()) {
        CropPlant sugarcane=CropPlantHandler.getPlantFromStack(new ItemStack((ItemSeeds)Item.itemRegistry.getObject(""String_Node_Str"")));
        if (sugarcane != null && sugarcane.isFertile(world,x,y,z)) {
          crop.setPlant(1,1,1,false,sugarcane);
          if (!player.capabilities.isCreativeMode) {
            heldItem.stackSize=heldItem.stackSize - 1;
          }
        }
      }
    }
 else     if (heldItem.getItem() == Items.crops) {
      this.setCrossCrop(world,x,y,z,player);
    }
 else     if (heldItem.getItem() instanceof ITrowel) {
      crop.onTrowelUsed((ITrowel)heldItem.getItem(),heldItem);
    }
 else     if (heldItem.getItem() instanceof IClipper) {
      this.onClipperUsed(world,x,y,z,crop);
      ((IClipper)heldItem.getItem()).onClipperUsed(world,x,y,z,player);
    }
 else     if (heldItem.getItem() == net.minecraft.init.Items.dye && heldItem.getItemDamage() == 15) {
      return !crop.canBonemeal();
    }
 else     if (heldItem.getItem() instanceof IFertiliser) {
      IFertiliser fertiliser=(IFertiliser)heldItem.getItem();
      if (crop.allowFertiliser(fertiliser)) {
        crop.applyFertiliser(fertiliser,world.rand);
        NetworkWrapperAgriCraft.wrapper.sendToAllAround(new MessageFertiliserApplied(heldItem,x,y,z),new NetworkRegistry.TargetPoint(world.provider.dimensionId,x,y,z,32));
        if (!player.capabilities.isCreativeMode) {
          heldItem.stackSize=heldItem.stackSize - 1;
        }
      }
      return false;
    }
 else     if (heldItem.getItem() instanceof ItemDebugger) {
      return false;
    }
 else     if (ModHelper.isRightClickHandled(heldItem.getItem())) {
      return ModHelper.handleRightClickOnCrop(world,x,y,z,player,heldItem,this,crop);
    }
 else {
      this.harvest(world,x,y,z,player,crop);
      if (CropPlantHandler.isValidSeed(heldItem)) {
        if (this.plantSeed(player.getCurrentEquippedItem(),world,x,y,z)) {
          player.getCurrentEquippedItem().stackSize=player.capabilities.isCreativeMode ? player.getCurrentEquippedItem().stackSize : player.getCurrentEquippedItem().stackSize - 1;
        }
      }
    }
  }
  return true;
}","/** 
 * Handles right-clicks from the player. Allows the player to 'use' the block.
 * @return if the right-click was consumed.
 */
@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float fX,float fY,float fZ){
  if (world.isRemote) {
    return true;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te != null && te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    ItemStack heldItem=player.getCurrentEquippedItem();
    if (ConfigurationHandler.enableHandRake && crop.hasWeed() && heldItem == null) {
      return false;
    }
    if (player.isSneaking()) {
      this.harvest(world,x,y,z,player,crop);
    }
 else     if (heldItem == null || heldItem.getItem() == null) {
      this.harvest(world,x,y,z,player,crop);
    }
 else     if (heldItem.getItem() == net.minecraft.init.Items.reeds) {
      if (crop.hasPlant()) {
        this.harvest(world,x,y,z,player,crop);
      }
 else       if (!crop.isCrossCrop() && !crop.hasWeed()) {
        CropPlant sugarcane=CropPlantHandler.getPlantFromStack(new ItemStack((ItemSeeds)Item.itemRegistry.getObject(""String_Node_Str"")));
        if (sugarcane != null && sugarcane.isFertile(world,x,y,z)) {
          crop.setPlant(1,1,1,false,sugarcane);
          if (!player.capabilities.isCreativeMode) {
            heldItem.stackSize=heldItem.stackSize - 1;
          }
        }
      }
    }
 else     if (heldItem.getItem() == Items.crops) {
      this.setCrossCrop(world,x,y,z,player);
    }
 else     if (heldItem.getItem() instanceof ITrowel) {
      crop.onTrowelUsed((ITrowel)heldItem.getItem(),heldItem);
    }
 else     if (heldItem.getItem() instanceof IClipper) {
      this.onClipperUsed(world,x,y,z,crop);
      ((IClipper)heldItem.getItem()).onClipperUsed(world,x,y,z,player);
    }
 else     if (heldItem.getItem() instanceof IRake) {
      if (crop.hasPlant()) {
        return this.canUproot(world,x,y,z);
      }
 else       if (crop.hasWeed()) {
        ((IRake)heldItem.getItem()).removeWeeds(crop,heldItem);
      }
    }
 else     if (heldItem.getItem() == net.minecraft.init.Items.dye && heldItem.getItemDamage() == 15) {
      return !crop.canBonemeal();
    }
 else     if (heldItem.getItem() instanceof IFertiliser) {
      IFertiliser fertiliser=(IFertiliser)heldItem.getItem();
      if (crop.allowFertiliser(fertiliser)) {
        crop.applyFertiliser(fertiliser,world.rand);
        NetworkWrapperAgriCraft.wrapper.sendToAllAround(new MessageFertiliserApplied(heldItem,x,y,z),new NetworkRegistry.TargetPoint(world.provider.dimensionId,x,y,z,32));
        if (!player.capabilities.isCreativeMode) {
          heldItem.stackSize=heldItem.stackSize - 1;
        }
      }
      return false;
    }
 else     if (heldItem.getItem() instanceof ItemDebugger) {
      return false;
    }
 else     if (ModHelper.isRightClickHandled(heldItem.getItem())) {
      return ModHelper.handleRightClickOnCrop(world,x,y,z,player,heldItem,this,crop);
    }
 else {
      this.harvest(world,x,y,z,player,crop);
      if (CropPlantHandler.isValidSeed(heldItem)) {
        if (this.plantSeed(player.getCurrentEquippedItem(),world,x,y,z)) {
          player.getCurrentEquippedItem().stackSize=player.capabilities.isCreativeMode ? player.getCurrentEquippedItem().stackSize : player.getCurrentEquippedItem().stackSize - 1;
        }
      }
    }
  }
  return true;
}"
95586,"@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  if (world.isRemote) {
    return false;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te == null || !(te instanceof TileEntityCrop)) {
    return false;
  }
  TileEntityCrop crop=(TileEntityCrop)te;
  if (crop.hasWeed()) {
    int weedGrowthStage=world.getBlockMetadata(x,y,z);
    int newWeedGrowthStage=calculateGrowthStage(stack.getItemDamage(),weedGrowthStage,world.rand);
    crop.updateWeed(newWeedGrowthStage);
    if (ConfigurationHandler.rakingDrops && !crop.hasWeed() && world.rand.nextInt(100) < dropChance[stack.getItemDamage() % dropChance.length]) {
      ItemStack drop=ItemDropRegistry.instance().getDrop(world.rand);
      if (drop != null && drop.getItem() != null) {
        float f=0.7F;
        double d0=(double)(world.rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
        double d1=(double)(world.rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
        double d2=(double)(world.rand.nextFloat() * f) + (double)(1.0F - f) * 0.5D;
        EntityItem entityitem=new EntityItem(world,(double)x + d0,(double)y + d1,(double)z + d2,drop);
        entityitem.delayBeforeCanPickup=10;
        world.spawnEntityInWorld(entityitem);
      }
    }
    return true;
  }
 else   if (crop.hasPlant()) {
    ((BlockCrop)world.getBlock(x,y,z)).canUproot(world,x,y,z);
  }
  return true;
}","@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  return false;
}"
95587,"public void updateWeed(int growthStage){
  if (this.hasWeed()) {
    if (growthStage == 0) {
      this.weed=false;
    }
    this.worldObj.setBlockMetadataWithNotify(this.xCoord,this.yCoord,this.zCoord,growthStage,3);
    this.markForUpdate();
  }
}","@Override public void updateWeed(int growthStage){
  if (this.hasWeed()) {
    growthStage=growthStage > 7 ? 7 : growthStage < 0 ? 0 : growthStage;
    if (growthStage == 0) {
      this.weed=false;
    }
    this.worldObj.setBlockMetadataWithNotify(this.xCoord,this.yCoord,this.zCoord,growthStage,3);
    this.markForUpdate();
  }
}"
95588,"/** 
 * spread the weed 
 */
public void spreadWeed(){
  List<TileEntityCrop> neighbours=this.getNeighbours();
  for (  TileEntityCrop crop : neighbours) {
    if (crop != null && (!crop.weed) && Math.random() < crop.getWeedSpawnChance()) {
      crop.spawnWeed();
      break;
    }
  }
}","/** 
 * spread the weed 
 */
@Override public void spreadWeed(){
  List<TileEntityCrop> neighbours=this.getNeighbours();
  for (  TileEntityCrop crop : neighbours) {
    if (crop != null && (!crop.weed) && Math.random() < crop.getWeedSpawnChance()) {
      crop.spawnWeed();
      break;
    }
  }
}"
95589,"/** 
 * Calculates the stats for a mutation or spread result
 * @param result an ItemStack containing the seed of the new plant
 * @param input a List containing all neighbouring crops
 * @param mutation if a mutation occurred, this is false if the plant simply spread to a cross crop
 * @return an ISeedStats object containing the resulting stats
 */
ISeedStats calculateStats(ItemStack result,List<ICrop> input,boolean mutation);","/** 
 * Calculates the stats for a mutation or spread result
 * @param result an ItemStack containing the seed of the new plant
 * @param input a List containing all neighbouring crops
 * @param mutation if a mutation occurred, this is false if the plant simply spread to a cross crop
 * @return an ISeedStats object containing the resulting stats
 */
ISeedStats calculateStats(ItemStack result,List<? extends ICrop> input,boolean mutation);"
95590,"@Override public CrossOverResult executeStrategy(){
  List<TileEntityCrop> matureNeighbours=engine.getCrop().getMatureNeighbours();
  if (matureNeighbours.isEmpty()) {
    return null;
  }
  int index=engine.getRandom().nextInt(matureNeighbours.size());
  TileEntityCrop neighbour=matureNeighbours.get(index);
  CrossOverResult result=CrossOverResult.fromTileEntityCrop(neighbour);
  calculator.setResultStats(result,matureNeighbours,false);
  return result;
}","@Override public CrossOverResult executeStrategy(){
  List<TileEntityCrop> matureNeighbours=engine.getCrop().getMatureNeighbours();
  if (matureNeighbours.isEmpty()) {
    return null;
  }
  int index=engine.getRandom().nextInt(matureNeighbours.size());
  TileEntityCrop neighbour=matureNeighbours.get(index);
  CrossOverResult result=CrossOverResult.fromTileEntityCrop(neighbour);
  StatCalculator.setResultStats(result,matureNeighbours,false);
  return result;
}"
95591,"public abstract ISeedStats calculateStats(ItemStack result,List<ICrop> input,boolean mutation);","public abstract ISeedStats calculateStats(ItemStack result,List<? extends ICrop> input,boolean mutation);"
95592,"/** 
 * Applies the stats to the resulting crop after a spread or mutation
 * @param result The result from the spread/mutation
 * @param input A list with all the neighbouring crops, any neighbouring crop is in this list (with or without plant, mature or not, with weeds or not, ...)
 * @param mutation if this result comes from a mutation or from a spread
 */
public static void setResultStats(CrossOverResult result,List<ICrop> input,boolean mutation){
  ISeedStats stats=instance.calculateStats(result.toStack(),input,mutation);
}","/** 
 * Applies the stats to the resulting crop after a spread or mutation
 * @param result The result from the spread/mutation
 * @param input A list with all the neighbouring crops, any neighbouring crop is in this list (with or without plant, mature or not, with weeds or not, ...)
 * @param mutation if this result comes from a mutation or from a spread
 */
public static void setResultStats(CrossOverResult result,List<? extends ICrop> input,boolean mutation){
  ISeedStats stats=instance.calculateStats(result.toStack(),input,mutation);
}"
95593,"protected ICrop[] filterParents(List<ICrop> input){
  ArrayList<ICrop> list=new ArrayList<ICrop>();
  for (  ICrop crop : input) {
    if (crop != null && crop.isMature()) {
      list.add(crop);
    }
  }
  return list.toArray(new ICrop[list.size()]);
}","protected ICrop[] filterParents(List<? extends ICrop> input){
  ArrayList<ICrop> list=new ArrayList<ICrop>();
  for (  ICrop crop : input) {
    if (crop != null && crop.isMature()) {
      list.add(crop);
    }
  }
  return list.toArray(new ICrop[list.size()]);
}"
95594,"protected boolean canInheritStats(Item child,int childMeta,Item seed,int seedMeta){
  int validParentId=ConfigurationHandler.validParents;
  if (validParentId == 0) {
    return true;
  }
  if (validParentId == 2) {
    return child == seed && childMeta == seedMeta;
  }
  boolean b=child == seed && childMeta == seedMeta;
  if (!b) {
    for (    Mutation mutation : MutationHandler.getMutationsFromChild(child,childMeta)) {
      if (mutation != null) {
        ItemStack parent1Stack=mutation.getParents()[0];
        ItemStack parent2Stack=mutation.getParents()[1];
        if (parent1Stack.getItem() == seed && parent1Stack.getItemDamage() == seedMeta) {
          b=true;
          break;
        }
 else         if (parent2Stack.getItem() == seed && parent2Stack.getItemDamage() == seedMeta) {
          b=true;
          break;
        }
      }
    }
  }
  return b;
}","protected boolean canInheritStats(Item child,int childMeta,Item seed,int seedMeta){
  int validParentId=ConfigurationHandler.validParents;
  if (validParentId == 1) {
    return true;
  }
  if (validParentId == 3) {
    return child == seed && childMeta == seedMeta;
  }
  boolean b=child == seed && childMeta == seedMeta;
  if (!b) {
    for (    Mutation mutation : MutationHandler.getMutationsFromChild(child,childMeta)) {
      if (mutation != null) {
        ItemStack parent1Stack=mutation.getParents()[0];
        ItemStack parent2Stack=mutation.getParents()[1];
        if (parent1Stack.getItem() == seed && parent1Stack.getItemDamage() == seedMeta) {
          b=true;
          break;
        }
 else         if (parent2Stack.getItem() == seed && parent2Stack.getItemDamage() == seedMeta) {
          b=true;
          break;
        }
      }
    }
  }
  return b;
}"
95595,"/** 
 * Checks if a multiblock may be formed, and forms it if possible. <p> TODO: Decrease number of loops. </p>
 * @return If a multiblock was formed.
 */
public final boolean formMultiBlock(){
  if (this.worldObj.isRemote) {
    return false;
  }
  final int xPosNew=findEnd(ForgeDirection.WEST);
  final int yPosNew=findEnd(ForgeDirection.DOWN);
  final int zPosNew=findEnd(ForgeDirection.NORTH);
  final int xSizeNew=xPosNew + findEnd(ForgeDirection.EAST) + 1;
  final int ySizeNew=yPosNew + findEnd(ForgeDirection.UP) + 1;
  final int zSizeNew=zPosNew + findEnd(ForgeDirection.SOUTH) + 1;
  final int anchorXNew=this.xCoord - xPosNew;
  final int anchorYNew=this.yCoord - yPosNew;
  final int anchorZNew=this.zCoord - zPosNew;
  if (xSizeNew == 1 && ySizeNew == 1 && zSizeNew == 1) {
    return false;
  }
  for (int x=0; x < xSizeNew; x++) {
    for (int y=0; y < ySizeNew; y++) {
      for (int z=0; z < zSizeNew; z++) {
        if (!this.canJoinMultiBlock(this.worldObj.getTileEntity(anchorXNew + x,anchorYNew + y,anchorZNew + z))) {
          return false;
        }
      }
    }
  }
  for (int x=0; x < xSizeNew; x++) {
    for (int y=0; y < ySizeNew; y++) {
      for (int z=0; z < zSizeNew; z++) {
        TileEntity te=this.worldObj.getTileEntity(anchorXNew + x,anchorYNew + y,anchorZNew + z);
        if (te instanceof TileEntityMultiBlock) {
          TileEntityMultiBlock block=((TileEntityMultiBlock)te);
          block.breakupMultiBlock();
          block.component=new MultiBlockComponent(anchorXNew,anchorYNew,anchorZNew,x,y,z,xSizeNew,ySizeNew,zSizeNew);
          block.addBlock();
          block.markForUpdate();
        }
 else {
          LogHelper.debug(""String_Node_Str"");
        }
      }
    }
  }
  return true;
}","/** 
 * Checks if a multiblock may be formed, and forms it if possible. <p> TODO: Decrease number of loops. </p>
 * @return If a multiblock was formed.
 */
public final boolean formMultiBlock(){
  if (this.worldObj.isRemote) {
    return false;
  }
  final int xPosNew=findEnd(ForgeDirection.WEST);
  final int yPosNew=findEnd(ForgeDirection.DOWN);
  final int zPosNew=findEnd(ForgeDirection.NORTH);
  final int xSizeNew=xPosNew + findEnd(ForgeDirection.EAST) + 1;
  final int ySizeNew=yPosNew + findEnd(ForgeDirection.UP) + 1;
  final int zSizeNew=zPosNew + findEnd(ForgeDirection.SOUTH) + 1;
  final int anchorXNew=this.xCoord - xPosNew;
  final int anchorYNew=this.yCoord - yPosNew;
  final int anchorZNew=this.zCoord - zPosNew;
  if (xSizeNew == 1 && ySizeNew == 1 && zSizeNew == 1) {
    return false;
  }
  for (int x=0; x < xSizeNew; x++) {
    for (int y=0; y < ySizeNew; y++) {
      for (int z=0; z < zSizeNew; z++) {
        if (!this.canJoinMultiBlock(this.worldObj.getTileEntity(anchorXNew + x,anchorYNew + y,anchorZNew + z))) {
          return false;
        }
      }
    }
  }
  for (int x=0; x < xSizeNew; x++) {
    for (int y=0; y < ySizeNew; y++) {
      for (int z=0; z < zSizeNew; z++) {
        TileEntity te=this.worldObj.getTileEntity(anchorXNew + x,anchorYNew + y,anchorZNew + z);
        if (te instanceof TileEntityMultiBlock) {
          TileEntityMultiBlock teMB=((TileEntityMultiBlock)te);
          teMB.breakupMultiBlock();
          teMB.component=new MultiBlockComponent(anchorXNew,anchorYNew,anchorZNew,x,y,z,xSizeNew,ySizeNew,zSizeNew);
          teMB.addBlock();
          teMB.markForUpdate();
        }
 else {
          LogHelper.debug(""String_Node_Str"");
        }
      }
    }
  }
  return true;
}"
95596,"@Override public void addDebugInfo(List<String> list){
  formMultiBlock();
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  super.addDebugInfo(list);
  list.add(""String_Node_Str"" + this.component.isPartOfMultiBlock);
  if (this.component.isPartOfMultiBlock) {
    list.add(""String_Node_Str"" + this.component.size);
    list.add(""String_Node_Str"" + this.component.sizeX + ""String_Node_Str""+ this.component.sizeY+ ""String_Node_Str""+ this.component.sizeZ);
    list.add(""String_Node_Str"" + this.component.isController);
    list.add(""String_Node_Str"" + this.component.posY);
    list.add(""String_Node_Str"");
    list.add(""String_Node_Str"" + component.posX + ""String_Node_Str""+ component.posY+ ""String_Node_Str""+ component.posZ+ ""String_Node_Str"");
    list.add(""String_Node_Str"" + component.anchorX + ""String_Node_Str""+ component.anchorY+ ""String_Node_Str""+ component.anchorZ+ ""String_Node_Str"");
  }
}","@Override public void addDebugInfo(List<String> list){
  formMultiBlock();
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"");
  super.addDebugInfo(list);
  MultiBlockComponent component=this.getComponent();
  list.add(""String_Node_Str"" + component.isPartOfMultiBlock);
  if (this.getComponent().isPartOfMultiBlock) {
    list.add(""String_Node_Str"" + component.size);
    list.add(""String_Node_Str"" + component.sizeX + ""String_Node_Str""+ component.sizeY+ ""String_Node_Str""+ component.sizeZ);
    list.add(""String_Node_Str"" + component.isController);
    list.add(""String_Node_Str"" + component.posY);
    list.add(""String_Node_Str"");
    list.add(""String_Node_Str"" + component.posX + ""String_Node_Str""+ component.posY+ ""String_Node_Str""+ component.posZ+ ""String_Node_Str"");
    list.add(""String_Node_Str"" + component.anchorX + ""String_Node_Str""+ component.anchorY+ ""String_Node_Str""+ component.anchorZ+ ""String_Node_Str"");
  }
}"
95597,"/** 
 * Retrieves the   {@link MultiBlockComponent} tied to this tile entity.<p> This has to be done through a getter to prevent the pointer from being modified in this class. </p>
 * @return the {@link MultiBlockComponent} associated with the entity.
 */
public final MultiBlockComponent getComponent(){
  return this.component;
}","/** 
 * Retrieves the   {@link MultiBlockComponent} tied to this tile entity.<p> This has to be done through a getter to prevent the pointer from being modified in this class. </p>
 * @return the {@link MultiBlockComponent} associated with the entity.
 */
public final MultiBlockComponent getComponent(){
  if (this.component == null) {
    resetComponent();
  }
  return this.component;
}"
95598,"@Override public void writeToNBT(NBTTagCompound tag){
  super.writeToNBT(tag);
  this.component.writeToNBT(tag);
}","@Override public void writeToNBT(NBTTagCompound tag){
  super.writeToNBT(tag);
  this.getComponent().writeToNBT(tag);
}"
95599,"@Override public void addDebugInfo(List<String> list){
  super.addDebugInfo(list);
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"" + SINGLE_CAPACITY + ""String_Node_Str"");
  list.add(""String_Node_Str"" + this.getFluidLevel() + ""String_Node_Str""+ this.getCapacity());
  list.add(""String_Node_Str"" + (int)Math.floor((this.getFluidLevel() - 0.1F) / (this.getCapacity() * getMultiBlockLogic().sizeX() * getMultiBlockLogic().sizeZ())) + ""String_Node_Str"");
  list.add(""String_Node_Str"" + this.getFluidHeight());
  StringBuilder neighbours=new StringBuilder();
  for (  ForgeDirection dir : ForgeDirection.values()) {
    if (this.hasNeighbour(dir)) {
      neighbours.append(dir.name()).append(""String_Node_Str"");
    }
  }
  list.add(""String_Node_Str"" + neighbours.toString());
  list.add(""String_Node_Str"" + getMultiBlockLogic().sizeX() + ""String_Node_Str""+ getMultiBlockLogic().sizeY()+ ""String_Node_Str""+ getMultiBlockLogic().sizeZ());
}","@Override public void addDebugInfo(List<String> list){
  super.addDebugInfo(list);
  list.add(""String_Node_Str"");
  list.add(""String_Node_Str"" + xCoord + ""String_Node_Str""+ yCoord+ ""String_Node_Str""+ zCoord+ ""String_Node_Str"");
  list.add(""String_Node_Str"" + SINGLE_CAPACITY + ""String_Node_Str"");
  list.add(""String_Node_Str"" + this.getFluidLevel() + ""String_Node_Str""+ this.getCapacity());
  list.add(""String_Node_Str"" + (int)Math.floor((this.getFluidLevel() - 0.1F) / (this.getCapacity() * getMultiBlockLogic().sizeX() * getMultiBlockLogic().sizeZ())) + ""String_Node_Str"");
  list.add(""String_Node_Str"" + this.getFluidHeight());
  StringBuilder neighbours=new StringBuilder();
  for (  ForgeDirection dir : ForgeDirection.values()) {
    if (this.hasNeighbour(dir)) {
      neighbours.append(dir.name()).append(""String_Node_Str"");
    }
  }
  list.add(""String_Node_Str"" + neighbours.toString());
  list.add(""String_Node_Str"" + getMultiBlockLogic().sizeX() + ""String_Node_Str""+ getMultiBlockLogic().sizeY()+ ""String_Node_Str""+ getMultiBlockLogic().sizeZ());
}"
95600,"@Override public void breakMultiBlock(){
  if (this.getMultiBlockCount() <= 1) {
    return;
  }
  int[] fluidLevelByLayer=new int[this.sizeY()];
  int fluidLevel=getRootComponent().getFluidLevel();
  int area=this.sizeX() * this.sizeZ();
  int fluidContentByLayer=area * TileEntityTank.SINGLE_CAPACITY;
  int layer=0;
  while (fluidLevel > 0) {
    fluidLevelByLayer[layer]=fluidLevel > fluidContentByLayer ? fluidContentByLayer / area : fluidLevel / area;
    fluidLevel=fluidLevel > fluidContentByLayer ? fluidLevel - fluidContentByLayer : 0;
  }
  TileEntityTank root=getRootComponent();
  for (int x=root.xCoord; x < root.xCoord + sizeX; x++) {
    for (int y=root.yCoord; y < root.yCoord + sizeY; y++) {
      for (int z=root.zCoord; z < root.zCoord + sizeZ; z++) {
        TileEntityTank tank=(TileEntityTank)root.getWorldObj().getTileEntity(x,y,z);
        tank.setMultiBlockLogic(new MultiBlockLogicTank(tank));
        tank.setFluidLevel(fluidLevelByLayer[y - root.yCoord]);
      }
    }
  }
}","@Override public void breakMultiBlock(){
  if (this.getMultiBlockCount() <= 1) {
    return;
  }
  int[] fluidLevelByLayer=new int[this.sizeY()];
  int fluidLevel=getRootComponent().getFluidLevel();
  int area=this.sizeX() * this.sizeZ();
  int fluidContentByLayer=area * TileEntityTank.SINGLE_CAPACITY;
  int layer=0;
  while (fluidLevel > 0) {
    fluidLevelByLayer[layer]=fluidLevel > fluidContentByLayer ? fluidContentByLayer / area : fluidLevel / area;
    fluidLevel=fluidLevel > fluidContentByLayer ? fluidLevel - fluidContentByLayer : 0;
    layer++;
  }
  TileEntityTank root=getRootComponent();
  for (int x=root.xCoord; x < root.xCoord + sizeX; x++) {
    for (int y=root.yCoord; y < root.yCoord + sizeY; y++) {
      for (int z=root.zCoord; z < root.zCoord + sizeZ; z++) {
        TileEntityTank tank=(TileEntityTank)root.getWorldObj().getTileEntity(x,y,z);
        if (tank == null) {
          continue;
        }
        tank.setMultiBlockLogic(new MultiBlockLogicTank(tank));
        tank.setFluidLevel(fluidLevelByLayer[y - root.yCoord]);
      }
    }
  }
}"
95601,"@Override public boolean checkForMultiBlock(){
  CoordinateIterator iterator=new CoordinateIterator();
  TileEntityTank oldRoot=getRootComponent();
  int xMin=calculateDimensionOffsetBackwards(iterator.setX());
  int yMin=calculateDimensionOffsetBackwards(iterator.setY());
  int zMin=calculateDimensionOffsetBackwards(iterator.setZ());
  int xMax=calculateDimensionOffsetForwards(iterator.setX());
  int yMax=calculateDimensionOffsetForwards(iterator.setY());
  int zMax=calculateDimensionOffsetForwards(iterator.setZ());
  if (!areAllBlocksInRangeValidComponents(xMin,yMin,zMin,xMax,yMax,zMax)) {
    return false;
  }
  TileEntityTank newRoot=(TileEntityTank)oldRoot.getWorldObj().getTileEntity(oldRoot.xCoord - xMin,oldRoot.yCoord - yMin,oldRoot.zCoord - zMin);
  int xSizeNew=xMax + xMin;
  int ySizeNew=yMax + yMin;
  int zSizeNew=zMax + zMin;
  if (oldRoot == newRoot && xSizeNew == this.sizeX && ySizeNew == this.sizeY && zSizeNew == this.sizeZ) {
    return false;
  }
  breakAllMultiBlocksInRange(xMin,yMin,zMin,xMax,yMax,zMax);
  this.rootComponent=newRoot;
  this.sizeX=xSizeNew;
  this.sizeY=ySizeNew;
  this.sizeZ=zSizeNew;
  createMultiBlock();
  return true;
}","@Override public boolean checkForMultiBlock(){
  CoordinateIterator iterator=new CoordinateIterator();
  TileEntityTank oldRoot=getRootComponent();
  int xMin=calculateDimensionOffsetBackwards(iterator.setX());
  int yMin=calculateDimensionOffsetBackwards(iterator.setY());
  int zMin=calculateDimensionOffsetBackwards(iterator.setZ());
  int xMax=calculateDimensionOffsetForwards(iterator.setX());
  int yMax=calculateDimensionOffsetForwards(iterator.setY());
  int zMax=calculateDimensionOffsetForwards(iterator.setZ());
  if (!areAllBlocksInRangeValidComponents(xMin,yMin,zMin,xMax,yMax,zMax)) {
    return false;
  }
  TileEntityTank newRoot=(TileEntityTank)oldRoot.getWorldObj().getTileEntity(oldRoot.xCoord - xMin,oldRoot.yCoord - yMin,oldRoot.zCoord - zMin);
  int xSizeNew=xMax + xMin;
  int ySizeNew=yMax + yMin;
  int zSizeNew=zMax + zMin;
  if (oldRoot == newRoot && xSizeNew == this.sizeX && ySizeNew == this.sizeY && zSizeNew == this.sizeZ) {
    return false;
  }
  breakAllMultiBlocksInRange(xMin,yMin,zMin,xMax,yMax,zMax);
  int fluidLevel=calculateTotalFluidLevelForBlocksInRange(xMin,yMin,zMin,xMax,yMax,zMax);
  this.sizeX=xSizeNew;
  this.sizeY=ySizeNew;
  this.sizeZ=zSizeNew;
  this.rootComponent=newRoot;
  createMultiBlock();
  newRoot.setFluidLevel(fluidLevel);
  return true;
}"
95602,"@Override public void createMultiBlock(){
  int fluidLevel=0;
  TileEntityTank root=getRootComponent();
  World world=root.getWorldObj();
  for (int x=root.xCoord; x < root.xCoord + sizeX; x++) {
    for (int y=root.yCoord; y < root.yCoord + sizeY; y++) {
      for (int z=root.zCoord; z < root.zCoord + sizeZ; z++) {
        TileEntityTank tank=(TileEntityTank)world.getTileEntity(x,y,z);
        fluidLevel=fluidLevel + tank.getFluidLevel();
        tank.setMultiBlockLogic(this);
      }
    }
  }
  this.getRootComponent().setFluidLevel(fluidLevel);
}","@Override public void createMultiBlock(){
  TileEntityTank root=getRootComponent();
  World world=root.getWorldObj();
  for (int x=root.xCoord; x < root.xCoord + sizeX; x++) {
    for (int y=root.yCoord; y < root.yCoord + sizeY; y++) {
      for (int z=root.zCoord; z < root.zCoord + sizeZ; z++) {
        IMultiBlockComponent component=(IMultiBlockComponent)world.getTileEntity(x,y,z);
        component.setMultiBlockLogic(this);
      }
    }
  }
}"
95603,"@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase entity,ItemStack stack){
  super.onBlockPlacedBy(world,x,y,z,entity,stack);
  if (world.getTileEntity(x,y,z) != null && world.getTileEntity(x,y,z) instanceof TileEntityCustomWood) {
    TileEntityCustomWood tileEntity=(TileEntityCustomWood)world.getTileEntity(x,y,z);
    tileEntity.setMaterial(stack);
  }
}","@Override public void onBlockPlacedBy(World world,int x,int y,int z,EntityLivingBase entity,ItemStack stack){
  if (world.getTileEntity(x,y,z) != null && world.getTileEntity(x,y,z) instanceof TileEntityCustomWood) {
    TileEntityCustomWood tileEntity=(TileEntityCustomWood)world.getTileEntity(x,y,z);
    tileEntity.setMaterial(stack);
  }
  super.onBlockPlacedBy(world,x,y,z,entity,stack);
}"
95604,"@Override public void syncMultiBlockToClient(){
  if (!worldObj.isRemote) {
    NetworkWrapperAgriCraft.wrapper.sendToDimension(new MessageSyncMultiBlock(this),worldObj.provider.dimensionId);
  }
}","@Override public void syncMultiBlockToClient(){
  if (!worldObj.isRemote) {
    NetworkWrapperAgriCraft.wrapper.sendToDimension(new MessageSyncMultiBlock(this),worldObj.provider.dimensionId);
    this.worldObj.getChunkFromBlockCoords(this.xCoord,this.zCoord).setChunkModified();
  }
}"
95605,"/** 
 * Reads NBT data from an NBTTagCompound
 * @param tag the NBTTagCompound to read data from
 */
public void readFromNBT(NBTTagCompound tag){
  this.sizeX=tag.getInteger(Names.NBT.x);
  this.sizeY=tag.getInteger(Names.NBT.y);
  this.sizeZ=tag.getInteger(Names.NBT.z);
  int x=tag.getInteger(Names.NBT.x2);
  int y=tag.getInteger(Names.NBT.y2);
  int z=tag.getInteger(Names.NBT.z2);
  World world=this.getRootComponent().getTileEntity().getWorldObj();
  if (world == null) {
    MultiBlockCache.getCache().addToCache(this.rootComponent,x,y,z,sizeX() * sizeY() * sizeZ());
  }
 else {
  }
}","/** 
 * Reads NBT data from an NBTTagCompound
 * @param tag the NBTTagCompound to read data from
 */
public void readFromNBT(NBTTagCompound tag){
  this.sizeX=tag.getInteger(Names.NBT.x);
  this.sizeY=tag.getInteger(Names.NBT.y);
  this.sizeZ=tag.getInteger(Names.NBT.z);
  int x=tag.getInteger(Names.NBT.x2);
  int y=tag.getInteger(Names.NBT.y2);
  int z=tag.getInteger(Names.NBT.z2);
  TileEntity tile=this.getRootComponent().getTileEntity();
  World world=this.getRootComponent().getTileEntity().getWorldObj();
  if (world != null) {
    if (tile.xCoord == x && tile.yCoord == y && tile.zCoord == z) {
      this.createMultiBlock();
    }
  }
}"
95606,"@Override public Object[] call(World world,int x,int y,int z,ItemStack journal,Object... args) throws MethodException {
  return new Object[]{journal != null};
}","@Override public Object[] call(TileEntityPeripheral peripheral,World world,int x,int y,int z,ItemStack journal,Object... args) throws MethodException {
  return new Object[]{journal != null};
}"
95607,"@Override public String getInformation(){
  return getSeed().getUnlocalizedName();
}","@Override public String getInformation(){
  String name=getSeed().getUnlocalizedName();
  if (name.indexOf('_') >= 0) {
    name=name.substring(name.indexOf('_') + 1);
  }
  if (name.indexOf('.') >= 0) {
    name=name.substring(name.indexOf('.') + 1);
  }
  return ""String_Node_Str"" + name;
}"
95608,"@Override public boolean onBlockEventReceived(World world,int x,int y,int z,int id,int data){
  super.onBlockEventReceived(world,x,y,z,id,data);
  TileEntity tileentity=world.getTileEntity(x,y,z);
  return tileentity != null && tileentity.receiveClientEvent(id,data);
}","@Override public boolean onBlockEventReceived(World world,int x,int y,int z,int id,int data){
  TileEntity tileentity=world.getTileEntity(x,y,z);
  return tileentity != null && tileentity.receiveClientEvent(id,data);
}"
95609,"@Override public List<ItemStack> getSeedEntries(){
  return null;
}","@Override public List<ItemStack> getSeedEntries(){
  ArrayList<ItemStack> list=this.te.getInventory();
  return list;
}"
95610,"/** 
 * Handles shift clicking in the inventory, return the stack that was transferred
 */
@Override public ItemStack transferStackInSlot(EntityPlayer player,int clickedSlot){
  ItemStack itemstack=null;
  Slot slot=(Slot)this.inventorySlots.get(clickedSlot);
  if (slot != null && slot.getHasStack()) {
    ItemStack itemstack1=slot.getStack();
    itemstack=itemstack1.copy();
    if (slot != null) {
      if (SeedHelper.isAnalyzedSeed(itemstack1)) {
        if (this.addSeedToStorage(itemstack1)) {
          itemstack1.stackSize=0;
        }
 else {
          return null;
        }
      }
    }
    if (itemstack1.stackSize == 0) {
      slot.putStack(null);
    }
 else {
      slot.onSlotChanged();
    }
    if (itemstack1.stackSize == itemstack.stackSize) {
      return null;
    }
    slot.onPickupFromSlot(player,itemstack1);
  }
  return itemstack;
}","/** 
 * Handles shift clicking in the inventory, return the stack that was transferred
 */
@Override public ItemStack transferStackInSlot(EntityPlayer player,int clickedSlot){
  ItemStack originalStackInSlot=null;
  Slot slot=(Slot)this.inventorySlots.get(clickedSlot);
  if (slot != null && slot.getHasStack()) {
    ItemStack notMergedStack=slot.getStack();
    originalStackInSlot=notMergedStack.copy();
    if (slot != null) {
      if (SeedHelper.isAnalyzedSeed(notMergedStack)) {
        if (this.addSeedToStorage(notMergedStack)) {
          notMergedStack.stackSize=0;
        }
 else {
          return null;
        }
      }
    }
    if (notMergedStack.stackSize == 0) {
      slot.putStack(null);
    }
 else {
      slot.onSlotChanged();
    }
    if (notMergedStack.stackSize == originalStackInSlot.stackSize) {
      return null;
    }
    slot.onPickupFromSlot(player,notMergedStack);
  }
  return originalStackInSlot;
}"
95611,"/** 
 * Tries to move an item stack form the correct tile entity to the player's inventory
 */
public void moveStackFromTileEntityToPlayer(int slotId,ItemStack stack){
  ISeedStorageControllable controllable=this.getControllable(stack);
  if (controllable != null) {
    ItemStack stackToMove=controllable.getStackInSlot(slotId);
    stackToMove.stackSize=stack.stackSize;
    stackToMove.stackTagCompound=controllable.getStackInSlot(slotId).stackTagCompound;
    if (this.mergeItemStack(stackToMove,0,PLAYER_INVENTORY_SIZE,false)) {
      if (FMLCommonHandler.instance().getEffectiveSide() == Side.CLIENT) {
        LogHelper.debug(""String_Node_Str"");
        NetworkWrapperAgriCraft.wrapper.sendToServer(new MessageContainerSeedStorage(stack,Minecraft.getMinecraft().thePlayer,slotId));
      }
      LogHelper.debug(""String_Node_Str"");
      controllable.decrStackSize(slotId,stack.stackSize - stackToMove.stackSize);
    }
  }
}","/** 
 * Tries to move an item stack form the correct tile entity to the player's inventory
 */
public void moveStackFromTileEntityToPlayer(int slotId,ItemStack stack){
  ISeedStorageControllable controllable=this.getControllable(stack);
  if (controllable != null) {
    ItemStack stackToMove=controllable.getStackInSlot(slotId);
    if (stack == null) {
      return;
    }
    stackToMove.stackSize=stack.stackSize;
    stackToMove.stackTagCompound=controllable.getStackInSlot(slotId).stackTagCompound;
    if (this.mergeItemStack(stackToMove,0,PLAYER_INVENTORY_SIZE,false)) {
      if (FMLCommonHandler.instance().getEffectiveSide() == Side.CLIENT) {
        LogHelper.debug(""String_Node_Str"");
        NetworkWrapperAgriCraft.wrapper.sendToServer(new MessageContainerSeedStorage(stack,Minecraft.getMinecraft().thePlayer,slotId));
      }
 else {
        LogHelper.debug(""String_Node_Str"");
        controllable.decrStackSize(slotId,stack.stackSize - stackToMove.stackSize);
      }
    }
  }
}"
95612,"@Override public void setLockedSeed(Item seed,int meta){
  if (!this.hasLockedSeed()) {
    this.lockedSeed=seed;
    this.lockedSeedMeta=meta;
    this.markForUpdate();
  }
}","@Override public void setLockedSeed(Item seed,int meta){
  if (!this.hasLockedSeed()) {
    this.lockedSeed=seed;
    this.lockedSeedMeta=meta;
  }
}"
95613,"@Override public ItemStack decrStackSize(int slot,int amount){
  slot=slot % 1000;
  ItemStack stackInSlot=null;
  if (this.slots != null) {
    SeedStorageSlot slotAt=this.slots.get(slot);
    if (slotAt != null) {
      stackInSlot=slotAt.getStack(this.lockedSeed,this.lockedSeedMeta);
      if (slotAt.count <= amount) {
        this.slots.remove(slot);
      }
 else {
        slotAt.count=slotAt.count - amount;
      }
    }
  }
  if (!worldObj.isRemote) {
    this.worldObj.addBlockEvent(this.xCoord,this.yCoord,this.zCoord,this.getBlockType(),slot,amount);
  }
  return stackInSlot;
}","@Override public ItemStack decrStackSize(int slot,int amount){
  if (!worldObj.isRemote) {
    slot=slot % 1000;
    ItemStack stackInSlot=null;
    if (this.slots != null) {
      SeedStorageSlot slotAt=this.slots.get(slot);
      if (slotAt != null) {
        stackInSlot=slotAt.getStack(this.lockedSeed,this.lockedSeedMeta);
        stackInSlot.stackSize=Math.min(amount,slotAt.count);
        if (slotAt.count <= amount) {
          this.slots.remove(slot);
          slotAt.count=0;
        }
 else {
          slotAt.count=slotAt.count - amount;
        }
      }
      this.syncSlotToClient(slotAt);
    }
    return stackInSlot;
  }
  return null;
}"
95614,"@Override public boolean addStackToInventory(ItemStack stack){
  boolean success=false;
  if (!this.worldObj.isRemote) {
    if (this.hasLockedSeed() && SeedHelper.isAnalyzedSeed(stack) && this.lockedSeed == stack.getItem() && this.lockedSeedMeta == stack.getItemDamage()) {
      int lastId=0;
      for (      Map.Entry<Integer,SeedStorageSlot> entry : this.slots.entrySet()) {
        lastId=entry.getKey() > lastId ? entry.getKey() : lastId;
        if (entry.getValue() != null) {
          if (ItemStack.areItemStackTagsEqual(entry.getValue().getStack(this.lockedSeed,this.lockedSeedMeta),stack)) {
            this.setInventorySlotContents(entry.getKey(),stack);
            success=true;
            break;
          }
        }
      }
      if (!success) {
        this.setInventorySlotContents(lastId + 1,stack);
        success=true;
      }
    }
  }
  return success;
}","@Override public boolean addStackToInventory(ItemStack stack){
  boolean success=false;
  if (!this.worldObj.isRemote) {
    if (this.hasLockedSeed() && SeedHelper.isAnalyzedSeed(stack) && this.lockedSeed == stack.getItem() && this.lockedSeedMeta == stack.getItemDamage()) {
      int lastId=0;
      for (      Map.Entry<Integer,SeedStorageSlot> entry : this.slots.entrySet()) {
        lastId=entry.getKey() > lastId ? entry.getKey() : lastId;
        if (entry.getValue() != null) {
          if (ItemStack.areItemStackTagsEqual(entry.getValue().getStack(this.lockedSeed,this.lockedSeedMeta),stack)) {
            this.setInventorySlotContents(entry.getKey(),stack);
            success=true;
            break;
          }
        }
      }
      if (!success) {
        if (this.slots.size() == 0) {
          this.setInventorySlotContents(0,stack);
        }
 else {
          this.setInventorySlotContents(lastId + 1,stack);
        }
        success=true;
      }
    }
  }
  return success;
}"
95615,"@Override public void setInventorySlotContents(int slot,ItemStack inputStack){
  slot=slot % 1000;
  if (this.isItemValidForSlot(slot,inputStack)) {
    SeedStorageSlot slotAt=this.slots.get(slot);
    if (slotAt != null) {
      slotAt.count=slotAt.count + inputStack.stackSize;
    }
 else {
      this.slots.put(slot,new SeedStorageSlot(inputStack.getTagCompound(),inputStack.stackSize,slot,this.getControllableID()));
    }
    if (!this.worldObj.isRemote) {
      this.syncSlotToClient(slot);
    }
  }
}","@Override public void setInventorySlotContents(int slot,ItemStack inputStack){
  slot=slot % 1000;
  if (this.isItemValidForSlot(slot,inputStack)) {
    SeedStorageSlot slotAt=this.slots.get(slot);
    if (slotAt != null) {
      slotAt.count=inputStack.stackSize;
      if (slotAt.count <= 0) {
        slots.remove(slot);
      }
    }
 else {
      slotAt=new SeedStorageSlot(inputStack.getTagCompound(),inputStack.stackSize,slot,this.getControllableID());
      if (slotAt.count > 0) {
        this.slots.put(slot,slotAt);
      }
    }
    if (!this.worldObj.isRemote) {
      this.syncSlotToClient(slotAt);
    }
 else {
      this.markForUpdate();
    }
  }
}"
95616,"public void syncSlotToClient(int slot){
  NetworkWrapperAgriCraft.wrapper.sendToDimension(new MessageTileEntitySeedStorage(this.xCoord,this.yCoord,this.zCoord,slots.get(slot)),this.worldObj.provider.dimensionId);
}","public void syncSlotToClient(SeedStorageSlot slot){
  NetworkWrapperAgriCraft.wrapper.sendToDimension(new MessageTileEntitySeedStorage(this.xCoord,this.yCoord,this.zCoord,slot),this.worldObj.provider.dimensionId);
  this.worldObj.getChunkFromBlockCoords(this.xCoord,this.zCoord).setChunkModified();
}"
95617,"@Override public ItemStack getStackInSlotOnClosing(int slot){
  slot=slot % 1000;
  ItemStack stackInSlot=null;
  if (this.slots != null) {
    stackInSlot=this.getStackInSlot(slot).copy();
  }
  return stackInSlot;
}","@Override public ItemStack getStackInSlotOnClosing(int slot){
  slot=slot % 1000;
  ItemStack stackInSlot=null;
  if (this.slots != null) {
    stackInSlot=this.getStackInSlot(slot).copy();
    this.slots.remove(slot);
  }
  return stackInSlot;
}"
95618,"private static void findHelpers(){
  Class[] classes={AppleCoreHelper.class,BluePowerHelper.class,ChocoCraftHelper.class,ExNihiloHelper.class,HarvestcraftHelper.class,HungerOverhaulHelper.class,MagicalCropsHelper.class,MFRHelper.class,MinetweakerHelper.class,NaturaHelper.class,PlantMegaPackHelper.class,PsychedelicraftHelper.class,ThaumcraftHelper.class,WailaHelper.class};
  for (  Class clazz : classes) {
    if (ModHelper.class.isAssignableFrom(clazz)) {
      createInstance(clazz);
    }
  }
}","private static void findHelpers(){
  Class[] classes={AppleCoreHelper.class,BluePowerHelper.class,ChocoCraftHelper.class,ExNihiloHelper.class,HarvestcraftHelper.class,HungerOverhaulHelper.class,MagicalCropsHelper.class,MFRHelper.class,MinetweakerHelper.class,NaturaHelper.class,PlantMegaPackHelper.class,PsychedelicraftHelper.class,ThaumcraftHelper.class,WailaHelper.class,WeeeFlowersHelper.class};
  for (  Class clazz : classes) {
    if (ModHelper.class.isAssignableFrom(clazz)) {
      createInstance(clazz);
    }
  }
}"
95619,"private void getDropMeta(){
  try {
    Block plant=getPlant();
    Method[] methods=plant.getClass().getDeclaredMethods();
    for (    Method method : methods) {
      if (method.getReturnType() != int.class) {
        continue;
      }
      Class[] params=method.getParameterTypes();
      if (params == null || params.length != 1) {
        continue;
      }
      if (params[0] != int.class) {
        continue;
      }
      LogHelper.debug(""String_Node_Str"" + method.toString());
      Object result=method.invoke(plant,7);
      this.meta=(Integer)result;
      break;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    this.meta=-1;
  }
}","private void getDropMeta(){
  try {
    Block plant=getPlant();
    Method[] methods=plant.getClass().getDeclaredMethods();
    for (    Method method : methods) {
      if (method.getReturnType() != int.class) {
        continue;
      }
      Class[] params=method.getParameterTypes();
      if (params == null || params.length != 1) {
        continue;
      }
      if (params[0] != int.class) {
        continue;
      }
      Object result=method.invoke(plant,7);
      this.meta=(Integer)result;
      break;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    this.meta=-1;
  }
}"
95620,"public static void init(){
  for (int i=0; i < Crops.vanillaCrops.size(); i++) {
    try {
      registerPlant(new CropPlantVanilla(Crops.vanillaCrops.get(i),Crops.vanillaSeeds.get(i)));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  try {
    registerPlant(new CropPlantNetherWart());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  for (  BlockModPlant plant : Crops.defaultCrops) {
    CropPlantAgriCraft cropPlant=new CropPlantAgriCraft(plant);
    try {
      registerPlant(cropPlant);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  if (ConfigurationHandler.integration_Botania) {
    for (    BlockModPlant plant : Crops.botaniaCrops) {
      CropPlantAgriCraft cropPlant=new CropPlantAgriCraft(plant);
      try {
        registerPlant(cropPlant);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  if (ConfigurationHandler.resourcePlants) {
    for (    BlockModPlant plant : ResourceCrops.vanillaCrops) {
      CropPlantAgriCraft cropPlant=new CropPlantAgriCraft(plant);
      try {
        registerPlant(cropPlant);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (    BlockModPlant plant : ResourceCrops.modCrops) {
      CropPlantAgriCraft cropPlant=new CropPlantAgriCraft(plant);
      try {
        registerPlant(cropPlant);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  for (  BlockModPlant plant : CustomCrops.customCrops) {
    CropPlantAgriCraft cropPlant=new CropPlantAgriCraft(plant);
    try {
      registerPlant(cropPlant);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  ModHelper.initModPlants();
  for (  CropPlant plant : plantsToRegister) {
    try {
      registerPlant(plant);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  plantsToRegister=null;
}","public static void init(){
  for (int i=0; i < Crops.vanillaCrops.size(); i++) {
    try {
      registerPlant(new CropPlantVanilla(Crops.vanillaCrops.get(i),Crops.vanillaSeeds.get(i)));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  try {
    registerPlant(new CropPlantNetherWart());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  for (  BlockModPlant plant : Crops.defaultCrops) {
    CropPlantAgriCraft cropPlant=new CropPlantAgriCraft(plant);
    try {
      registerPlant(cropPlant);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  if (ConfigurationHandler.integration_Botania) {
    for (    BlockModPlant plant : Crops.botaniaCrops) {
      CropPlantAgriCraft cropPlant=new CropPlantAgriCraft(plant);
      try {
        registerPlant(cropPlant);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  if (ConfigurationHandler.resourcePlants) {
    for (    BlockModPlant plant : ResourceCrops.vanillaCrops) {
      CropPlantAgriCraft cropPlant=new CropPlantAgriCraft(plant);
      try {
        registerPlant(cropPlant);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (    BlockModPlant plant : ResourceCrops.modCrops) {
      CropPlantAgriCraft cropPlant=new CropPlantAgriCraft(plant);
      try {
        registerPlant(cropPlant);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  for (  BlockModPlant plant : CustomCrops.customCrops) {
    CropPlantAgriCraft cropPlant=new CropPlantAgriCraft(plant);
    try {
      registerPlant(cropPlant);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  ModHelper.initModPlants();
  for (  CropPlant plant : plantsToRegister) {
    try {
      registerPlant(plant);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  plantsToRegister=null;
  ArrayList<ItemStack> seeds=OreDictionary.getOres(Names.OreDict.listAllseed);
  for (  ItemStack seed : seeds) {
    if (isValidSeed(seed)) {
      continue;
    }
    if (!(seed.getItem() instanceof ItemSeeds)) {
      continue;
    }
    ArrayList<ItemStack> fruits=OreDictHelper.getFruitsFromOreDict(seed);
    if (fruits == null || fruits.size() == 0) {
      continue;
    }
    try {
      registerPlant(new CropPlantOreDict((ItemSeeds)seed.getItem()));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}"
95621,"public static void init(){
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.crops,ConfigurationHandler.cropsPerCraft),""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str""));
  if (ConfigurationHandler.cropsPerCraft == 3) {
    GameRegistry.addShapelessRecipe(new ItemStack(net.minecraft.init.Items.stick,6 / ConfigurationHandler.cropsPerCraft),new ItemStack(Items.crops),new ItemStack(Items.crops));
  }
 else {
    GameRegistry.addShapelessRecipe(new ItemStack(net.minecraft.init.Items.stick,4 / ConfigurationHandler.cropsPerCraft),new ItemStack(Items.crops));
  }
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Blocks.seedAnalyzer,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str"",'g',""String_Node_Str"",'b',net.minecraft.init.Blocks.stone_slab,'p',""String_Node_Str"",'w',""String_Node_Str""));
  GameRegistry.addShapelessRecipe(new ItemStack((Item)Item.itemRegistry.getObject(""String_Node_Str"")),new ItemStack(net.minecraft.init.Items.potato));
  GameRegistry.addShapelessRecipe(new ItemStack((Item)Item.itemRegistry.getObject(""String_Node_Str"")),new ItemStack(net.minecraft.init.Items.carrot));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.journal,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'c',Items.crops,'s',Names.OreDict.listAllseed,'b',net.minecraft.init.Items.writable_book));
  GameRegistry.addRecipe(new RecipeJournal());
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.trowel,1,0),""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str"",'i',""String_Node_Str""));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.magnifyingGlass,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str"",'g',""String_Node_Str""));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.handRake,1,0),""String_Node_Str"",'f',net.minecraft.init.Blocks.fence,'s',""String_Node_Str""));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.handRake,1,1),""String_Node_Str"",'f',net.minecraft.init.Blocks.iron_bars,'s',""String_Node_Str""));
  if (!ConfigurationHandler.disableIrrigation) {
    ((ItemBlockCustomWood)Item.getItemFromBlock(Blocks.blockWaterTank)).getSubItems(woodList);
    registerCustomWoodRecipes();
    RegisterHelper.removeRecipe(new ItemStack(net.minecraft.init.Items.bowl));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.bowl,4),""String_Node_Str"",""String_Node_Str"",'w',Names.OreDict.slabWood));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.sprinkler,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'w',""String_Node_Str"",'i',""String_Node_Str"",'b',net.minecraft.init.Blocks.iron_bars,'c',net.minecraft.init.Items.bucket));
  }
  if (ConfigurationHandler.resourcePlants) {
    if (OreDictHelper.getNuggetForName(""String_Node_Str"") instanceof ModItem) {
      GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.diamond,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
      GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(OreDictHelper.getNuggetForName(""String_Node_Str""),9),""String_Node_Str""));
    }
    if (OreDictHelper.getNuggetForName(""String_Node_Str"") instanceof ModItem) {
      GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.emerald,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
      GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(OreDictHelper.getNuggetForName(""String_Node_Str""),9),""String_Node_Str""));
    }
    if (OreDictHelper.getNuggetForName(""String_Node_Str"") instanceof ModItem) {
      GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.iron_ingot,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
      GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(OreDictHelper.getNuggetForName(""String_Node_Str""),9),""String_Node_Str""));
    }
    for (    String[] data : Data.modResources) {
      String oreName=data[0];
      Item nuggetItem=OreDictHelper.getNuggetForName(oreName);
      if (nuggetItem != null && nuggetItem instanceof ModItem) {
        ItemStack nugget=new ItemStack(nuggetItem,9,OreDictHelper.getNuggetMetaForName(oreName));
        ItemStack ingot=OreDictHelper.getIngot(oreName);
        if (ingot != null) {
          GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str"" + oreName));
        }
        GameRegistry.addRecipe(new ShapelessOreRecipe(nugget,""String_Node_Str"" + oreName));
      }
    }
  }
  LogHelper.debug(""String_Node_Str"");
}","public static void init(){
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.crops,ConfigurationHandler.cropsPerCraft),""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str""));
  if (ConfigurationHandler.cropsPerCraft == 3) {
    GameRegistry.addShapelessRecipe(new ItemStack(net.minecraft.init.Items.stick,6 / ConfigurationHandler.cropsPerCraft),new ItemStack(Items.crops),new ItemStack(Items.crops));
  }
 else {
    GameRegistry.addShapelessRecipe(new ItemStack(net.minecraft.init.Items.stick,4 / ConfigurationHandler.cropsPerCraft),new ItemStack(Items.crops));
  }
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Blocks.seedAnalyzer,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str"",'g',""String_Node_Str"",'b',net.minecraft.init.Blocks.stone_slab,'p',""String_Node_Str"",'w',""String_Node_Str""));
  GameRegistry.addShapelessRecipe(new ItemStack((Item)Item.itemRegistry.getObject(""String_Node_Str"")),new ItemStack(net.minecraft.init.Items.potato));
  GameRegistry.addShapelessRecipe(new ItemStack((Item)Item.itemRegistry.getObject(""String_Node_Str"")),new ItemStack(net.minecraft.init.Items.carrot));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.journal,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'c',Items.crops,'s',Names.OreDict.listAllseed,'b',net.minecraft.init.Items.writable_book));
  GameRegistry.addRecipe(new RecipeJournal());
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.trowel,1,0),""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str"",'i',""String_Node_Str""));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.magnifyingGlass,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str"",'g',""String_Node_Str""));
  if (ConfigurationHandler.enableWeeds && ConfigurationHandler.enableHandRake) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.handRake,1,0),""String_Node_Str"",'f',net.minecraft.init.Blocks.fence,'s',""String_Node_Str""));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.handRake,1,1),""String_Node_Str"",'f',net.minecraft.init.Blocks.iron_bars,'s',""String_Node_Str""));
  }
  if (Items.handRake != null) {
    ((ItemBlockCustomWood)Item.getItemFromBlock(Blocks.blockWaterTank)).getSubItems(woodList);
    registerCustomWoodRecipes();
    RegisterHelper.removeRecipe(new ItemStack(net.minecraft.init.Items.bowl));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.bowl,4),""String_Node_Str"",""String_Node_Str"",'w',Names.OreDict.slabWood));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.sprinkler,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'w',""String_Node_Str"",'i',""String_Node_Str"",'b',net.minecraft.init.Blocks.iron_bars,'c',net.minecraft.init.Items.bucket));
  }
  if (ConfigurationHandler.resourcePlants) {
    if (OreDictHelper.getNuggetForName(""String_Node_Str"") instanceof ModItem) {
      GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.diamond,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
      GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(OreDictHelper.getNuggetForName(""String_Node_Str""),9),""String_Node_Str""));
    }
    if (OreDictHelper.getNuggetForName(""String_Node_Str"") instanceof ModItem) {
      GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.emerald,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
      GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(OreDictHelper.getNuggetForName(""String_Node_Str""),9),""String_Node_Str""));
    }
    if (OreDictHelper.getNuggetForName(""String_Node_Str"") instanceof ModItem) {
      GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.iron_ingot,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
      GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(OreDictHelper.getNuggetForName(""String_Node_Str""),9),""String_Node_Str""));
    }
    for (    String[] data : Data.modResources) {
      String oreName=data[0];
      Item nuggetItem=OreDictHelper.getNuggetForName(oreName);
      if (nuggetItem != null && nuggetItem instanceof ModItem) {
        ItemStack nugget=new ItemStack(nuggetItem,9,OreDictHelper.getNuggetMetaForName(oreName));
        ItemStack ingot=OreDictHelper.getIngot(oreName);
        if (ingot != null) {
          GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str"" + oreName));
        }
        GameRegistry.addRecipe(new ShapelessOreRecipe(nugget,""String_Node_Str"" + oreName));
      }
    }
  }
  LogHelper.debug(""String_Node_Str"");
}"
95622,"public static void initModdedResources(){
  modCrops=new ArrayList<BlockModPlant>();
  modSeeds=new ArrayList<ItemModSeed>();
  for (  String[] data : Data.modResources) {
    Block base=OreDictHelper.getOreBlockForName(data[0]);
    if (base != null) {
      Object[] args={data[1],OreDictHelper.getNuggetForName(data[0]),OreDictHelper.getNuggetMetaForName(data[0]),null,OreDictHelper.getOreBlockForName(data[0]),OreDictHelper.getOreMetaForName(data[0]),0,4,6};
      String name=(String)args[0];
      BlockModPlant plant=new BlockModPlant(args);
      modCrops.add(plant);
      RegisterHelper.registerCrop(plant,name);
      ItemModSeed seed=new ItemModSeed(plant,""String_Node_Str"" + Character.toLowerCase(name.charAt(0)) + name.substring(1));
      modSeeds.add(seed);
      RegisterHelper.registerSeed(seed,plant);
    }
  }
}","public static void initModdedResources(){
  modCrops=new ArrayList<BlockModPlant>();
  modSeeds=new ArrayList<ItemModSeed>();
  for (  String[] data : Data.modResources) {
    Block base=OreDictHelper.getOreBlockForName(data[0]);
    if (base != null) {
      Object[] args={data[1],OreDictHelper.getNuggetForName(data[0]),OreDictHelper.getNuggetMetaForName(data[0]),null,OreDictHelper.getOreBlockForName(data[0]),OreDictHelper.getOreMetaForName(data[0]),4,6};
      String name=(String)args[0];
      BlockModPlant plant=new BlockModPlant(args);
      modCrops.add(plant);
      RegisterHelper.registerCrop(plant,name);
      ItemModSeed seed=new ItemModSeed(plant,""String_Node_Str"" + Character.toLowerCase(name.charAt(0)) + name.substring(1));
      modSeeds.add(seed);
      RegisterHelper.registerSeed(seed,plant);
    }
  }
}"
95623,"@Override public void addDebugInfo(List<String> list){
  list.add(""String_Node_Str"");
  if (this.crossCrop) {
    list.add(""String_Node_Str"");
  }
 else   if (this.hasPlant()) {
    list.add(""String_Node_Str"");
    list.add(""String_Node_Str"" + (this.plant.getSeed().getItem()).getUnlocalizedName());
    list.add(""String_Node_Str"" + Item.itemRegistry.getNameForObject((this.plant.getSeed().getItem())) + ""String_Node_Str""+ this.plant.getSeed().getItemDamage());
    list.add(""String_Node_Str"" + this.getBlockMetadata());
    list.add(""String_Node_Str"" + this.growth);
    list.add(""String_Node_Str"" + this.gain);
    list.add(""String_Node_Str"" + this.strength);
    list.add(""String_Node_Str"" + this.isFertile());
    list.add(""String_Node_Str"" + this.isMature());
  }
 else   if (this.weed) {
    list.add(""String_Node_Str"");
    list.add(""String_Node_Str"" + this.getBlockMetadata());
  }
 else {
    list.add(""String_Node_Str"");
  }
}","@Override public void addDebugInfo(List<String> list){
  list.add(""String_Node_Str"");
  if (this.crossCrop) {
    list.add(""String_Node_Str"");
  }
 else   if (this.hasPlant()) {
    list.add(""String_Node_Str"");
    list.add(""String_Node_Str"" + (this.plant.getSeed().getItem()).getUnlocalizedName());
    list.add(""String_Node_Str"" + Item.itemRegistry.getNameForObject((this.plant.getSeed().getItem())) + ""String_Node_Str""+ this.plant.getSeed().getItemDamage());
    list.add(""String_Node_Str"" + plant.getTier());
    list.add(""String_Node_Str"" + this.getBlockMetadata());
    list.add(""String_Node_Str"" + this.growth);
    list.add(""String_Node_Str"" + this.gain);
    list.add(""String_Node_Str"" + this.strength);
    list.add(""String_Node_Str"" + this.isFertile());
    list.add(""String_Node_Str"" + this.isMature());
  }
 else   if (this.weed) {
    list.add(""String_Node_Str"");
    list.add(""String_Node_Str"" + this.getBlockMetadata());
  }
 else {
    list.add(""String_Node_Str"");
  }
}"
95624,"public int getProgressScaled(int scale){
  return (int)Math.round(((float)this.progress * scale) / ((float)this.maxProgress()));
}","public int getProgressScaled(int scale){
  return Math.round(((float)this.progress * scale) / ((float)this.maxProgress()));
}"
95625,"public boolean hasSeed(){
  return this.seed != null && this.seed.getItem() instanceof ItemSeeds;
}","public boolean hasSeed(){
  return CropPlantHandler.isValidSeed(this.seed);
}"
95626,"@Mod.EventHandler public static void preInit(FMLPreInitializationEvent event){
  LogHelper.debug(""String_Node_Str"");
  LoadedMods.init();
  proxy.registerEventHandlers();
  NetworkWrapperAgriCraft.init();
  ConfigurationHandler.init(event);
  FMLCommonHandler.instance().bus().register(new ConfigurationHandler());
  if (ConfigurationHandler.debug) {
    FMLCommonHandler.instance().bus().register(new RenderLogger());
  }
  Blocks.init();
  Crops.initDefaults();
  Items.init();
  APISelector.init();
  LogHelper.debug(""String_Node_Str"");
}","@Mod.EventHandler public static void preInit(FMLPreInitializationEvent event){
  LogHelper.debug(""String_Node_Str"");
  LoadedMods.init();
  proxy.registerEventHandlers();
  NetworkWrapperAgriCraft.init();
  ConfigurationHandler.init(event);
  FMLCommonHandler.instance().bus().register(new ConfigurationHandler());
  if (ConfigurationHandler.debug) {
    FMLCommonHandler.instance().bus().register(new RenderLogger());
  }
  Blocks.init();
  Crops.init();
  Items.init();
  APISelector.init();
  LogHelper.debug(""String_Node_Str"");
}"
95627,"@Mod.EventHandler public static void postInit(FMLPostInitializationEvent event){
  LogHelper.debug(""String_Node_Str"");
  ResourceCrops.init();
  CustomCrops.initCustomCrops();
  Crops.initBotaniaCrops();
  ModHelper.initHelpers();
  Recipes.init();
  SeedHelper.init();
  GrowthRequirementHandler.init();
  CustomCrops.initGrassSeeds();
  CropPlantHandler.init();
  MutationHandler.init();
  if (!ConfigurationHandler.disableWorldGen) {
    WorldGen.init();
  }
  proxy.initNEI();
  LogHelper.debug(""String_Node_Str"");
}","@Mod.EventHandler public static void postInit(FMLPostInitializationEvent event){
  LogHelper.debug(""String_Node_Str"");
  ResourceCrops.init();
  CustomCrops.init();
  ModHelper.initHelpers();
  Recipes.init();
  SeedHelper.init();
  GrowthRequirementHandler.init();
  CustomCrops.initGrassSeeds();
  CropPlantHandler.init();
  MutationHandler.init();
  if (!ConfigurationHandler.disableWorldGen) {
    WorldGen.init();
  }
  proxy.initNEI();
  LogHelper.debug(""String_Node_Str"");
}"
95628,"private static void findHelpers(){
  Class[] classes={AppleCoreHelper.class,BluePowerHelper.class,ChocoCraftHelper.class,ExNihiloHelper.class,HarvestcraftHelper.class,HungerOverhaulHelper.class,MagicalCropsHelper.class,MFRHelper.class,MinetweakerHelper.class,MobDropCropsHelper.class,NaturaHelper.class,PlantMegaPackHelper.class,PsychedelicraftHelper.class,ThaumcraftHelper.class,WailaHelper.class,WeeeFlowersHelper.class};
  for (  Class clazz : classes) {
    if (ModHelper.class.isAssignableFrom(clazz)) {
      createInstance(clazz);
    }
  }
}","private static void findHelpers(){
  Class[] classes={AppleCoreHelper.class,BluePowerHelper.class,BotaniaHelper.class,ChocoCraftHelper.class,ExNihiloHelper.class,HarvestcraftHelper.class,HungerOverhaulHelper.class,MagicalCropsHelper.class,MFRHelper.class,MinetweakerHelper.class,MobDropCropsHelper.class,NaturaHelper.class,PlantMegaPackHelper.class,PsychedelicraftHelper.class,ThaumcraftHelper.class,WailaHelper.class,WeeeFlowersHelper.class,WitcheryHelper.class};
  for (  Class clazz : classes) {
    if (ModHelper.class.isAssignableFrom(clazz)) {
      try {
        createInstance(clazz);
      }
 catch (      Exception e) {
        if (ConfigurationHandler.debug) {
          e.printStackTrace();
        }
      }
    }
  }
}"
95629,"private static void hideItems(){
  LogHelper.debug(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Blocks.blockCrop,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Blocks.blockSprinkler,1,i));
    for (    BlockModPlant plant : Crops.crops) {
      AgriCraft.proxy.hideItemInNEI(new ItemStack(plant,1,i));
    }
    if (ConfigurationHandler.integration_Botania) {
      for (      BlockModPlant plant : Crops.botaniaCrops) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(plant,1,i));
      }
    }
    if (ConfigurationHandler.resourcePlants) {
      for (      BlockModPlant plant : ResourceCrops.vanillaCrops) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(plant,1,i));
      }
      for (      BlockModPlant plant : ResourceCrops.modCrops) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(plant,1,i));
      }
    }
    if (ConfigurationHandler.customCrops) {
      for (      BlockModPlant customCrop : CustomCrops.customCrops) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(customCrop,1,i));
      }
    }
    if (ConfigurationHandler.debug) {
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Items.debugItem,1,i));
    }
  }
}","private static void hideItems(){
  LogHelper.debug(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Blocks.blockCrop,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Blocks.blockSprinkler,1,i));
    for (    BlockModPlant plant : Crops.crops) {
      AgriCraft.proxy.hideItemInNEI(new ItemStack(plant,1,i));
    }
    if (ConfigurationHandler.integration_Botania) {
      for (      BlockModPlant plant : BotaniaHelper.botaniaCrops) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(plant,1,i));
      }
    }
    if (ConfigurationHandler.resourcePlants) {
      for (      BlockModPlant plant : ResourceCrops.vanillaCrops) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(plant,1,i));
      }
      for (      BlockModPlant plant : ResourceCrops.modCrops) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(plant,1,i));
      }
    }
    if (ConfigurationHandler.customCrops) {
      for (      BlockModPlant customCrop : CustomCrops.customCrops) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(customCrop,1,i));
      }
    }
    if (ConfigurationHandler.debug) {
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Items.debugItem,1,i));
    }
  }
}"
95630,"public static void registerAspects(){
  for (  ItemModSeed seed : Crops.seeds) {
    ThaumcraftApi.registerObjectTag(new ItemStack(seed,1,0),new AspectList().add(Aspect.PLANT,1));
  }
  if (ConfigurationHandler.resourcePlants) {
    for (    ItemModSeed seed : ResourceCrops.vanillaSeeds) {
      ThaumcraftApi.registerObjectTag(new ItemStack(seed,1,0),new AspectList().add(Aspect.PLANT,1).add(Aspect.GREED,1));
    }
    for (    ItemModSeed seed : ResourceCrops.modSeeds) {
      ThaumcraftApi.registerObjectTag(new ItemStack(seed,1,0),new AspectList().add(Aspect.PLANT,1).add(Aspect.GREED,1));
    }
  }
  if (ConfigurationHandler.integration_Botania) {
    for (    ItemModSeed seed : Crops.botaniaSeeds) {
      ThaumcraftApi.registerObjectTag(new ItemStack(seed,1,0),new AspectList().add(Aspect.PLANT,1).add(Aspect.MAGIC,1));
    }
  }
  for (  ItemModSeed seed : CustomCrops.customSeeds) {
    ThaumcraftApi.registerObjectTag(new ItemStack(seed,1,0),new AspectList().add(Aspect.PLANT,1));
  }
  ThaumcraftApi.registerObjectTag(new ItemStack(Blocks.seedAnalyzer,1,0),new AspectList().add(Aspect.MIND,2).add(Aspect.PLANT,2).add(Aspect.CROP,2));
  ThaumcraftApi.registerObjectTag(new ItemStack(Items.journal,1,0),new AspectList().add(Aspect.MIND,2).add(Aspect.PLANT,2).add(Aspect.CROP,2));
  if (!ConfigurationHandler.disableIrrigation) {
    ThaumcraftApi.registerObjectTag(new ItemStack(Blocks.blockWaterTank,1,0),new AspectList().add(Aspect.WATER,2).add(Aspect.TREE,6));
    ThaumcraftApi.registerObjectTag(new ItemStack(Blocks.blockWaterChannel,1,0),new AspectList().add(Aspect.WATER,1).add(Aspect.TREE,3));
    ThaumcraftApi.registerObjectTag(new ItemStack(Items.sprinkler,1,0),new AspectList().add(Aspect.WATER,1).add(Aspect.TREE,1).add(Aspect.METAL,1).add(Aspect.HARVEST,1));
  }
}","public static void registerAspects(){
  for (  ItemModSeed seed : Crops.seeds) {
    ThaumcraftApi.registerObjectTag(new ItemStack(seed,1,0),new AspectList().add(Aspect.PLANT,1));
  }
  if (ConfigurationHandler.resourcePlants) {
    for (    ItemModSeed seed : ResourceCrops.vanillaSeeds) {
      ThaumcraftApi.registerObjectTag(new ItemStack(seed,1,0),new AspectList().add(Aspect.PLANT,1).add(Aspect.GREED,1));
    }
    for (    ItemModSeed seed : ResourceCrops.modSeeds) {
      ThaumcraftApi.registerObjectTag(new ItemStack(seed,1,0),new AspectList().add(Aspect.PLANT,1).add(Aspect.GREED,1));
    }
  }
  if (ConfigurationHandler.integration_Botania) {
    for (    ItemModSeed seed : BotaniaHelper.botaniaSeeds) {
      ThaumcraftApi.registerObjectTag(new ItemStack(seed,1,0),new AspectList().add(Aspect.PLANT,1).add(Aspect.MAGIC,1));
    }
  }
  for (  ItemModSeed seed : CustomCrops.customSeeds) {
    ThaumcraftApi.registerObjectTag(new ItemStack(seed,1,0),new AspectList().add(Aspect.PLANT,1));
  }
  ThaumcraftApi.registerObjectTag(new ItemStack(Blocks.seedAnalyzer,1,0),new AspectList().add(Aspect.MIND,2).add(Aspect.PLANT,2).add(Aspect.CROP,2));
  ThaumcraftApi.registerObjectTag(new ItemStack(Items.journal,1,0),new AspectList().add(Aspect.MIND,2).add(Aspect.PLANT,2).add(Aspect.CROP,2));
  if (!ConfigurationHandler.disableIrrigation) {
    ThaumcraftApi.registerObjectTag(new ItemStack(Blocks.blockWaterTank,1,0),new AspectList().add(Aspect.WATER,2).add(Aspect.TREE,6));
    ThaumcraftApi.registerObjectTag(new ItemStack(Blocks.blockWaterChannel,1,0),new AspectList().add(Aspect.WATER,1).add(Aspect.TREE,3));
    ThaumcraftApi.registerObjectTag(new ItemStack(Items.sprinkler,1,0),new AspectList().add(Aspect.WATER,1).add(Aspect.TREE,1).add(Aspect.METAL,1).add(Aspect.HARVEST,1));
  }
}"
95631,"@Override protected void initPlants(){
}","@Override protected void initPlants(){
  Aspects.registerAspects();
}"
95632,"@Override protected void init(){
  FMLInterModComms.sendMessage(Names.Mods.thaumcraft,""String_Node_Str"",new ItemStack(Blocks.blockCrop,1,7));
  Aspects.registerAspects();
}","@Override protected void init(){
  FMLInterModComms.sendMessage(Names.Mods.thaumcraft,""String_Node_Str"",new ItemStack(Blocks.blockCrop,1,7));
}"
95633,"public static void init(){
  try {
    registerPlant(new CropPlantVanilla((BlockCrops)net.minecraft.init.Blocks.wheat,(ItemSeeds)net.minecraft.init.Items.wheat_seeds));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    registerPlant(new CropPlantStem((ItemSeeds)Items.melon_seeds,Blocks.melon_block));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    registerPlant(new CropPlantStem((ItemSeeds)Items.pumpkin_seeds,Blocks.pumpkin));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    registerPlant(new CropPlantNetherWart());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  for (  BlockModPlant plant : Crops.crops) {
    CropPlantAgriCraft cropPlant=new CropPlantAgriCraft(plant);
    try {
      registerPlant(cropPlant);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  if (ConfigurationHandler.integration_Botania) {
    for (    BlockModPlant plant : Crops.botaniaCrops) {
      CropPlantAgriCraft cropPlant=new CropPlantAgriCraft(plant);
      try {
        registerPlant(cropPlant);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  if (ConfigurationHandler.resourcePlants) {
    for (    BlockModPlant plant : ResourceCrops.vanillaCrops) {
      CropPlantAgriCraft cropPlant=new CropPlantAgriCraft(plant);
      try {
        registerPlant(cropPlant);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (    BlockModPlant plant : ResourceCrops.modCrops) {
      CropPlantAgriCraft cropPlant=new CropPlantAgriCraft(plant);
      try {
        registerPlant(cropPlant);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  for (  BlockModPlant plant : CustomCrops.customCrops) {
    CropPlantAgriCraft cropPlant=new CropPlantAgriCraft(plant);
    try {
      registerPlant(cropPlant);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  ModHelper.initModPlants();
  for (  CropPlant plant : plantsToRegister) {
    try {
      registerPlant(plant);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  plantsToRegister=null;
  ArrayList<ItemStack> seeds=OreDictionary.getOres(Names.OreDict.listAllseed);
  for (  ItemStack seed : seeds) {
    if (isValidSeed(seed)) {
      continue;
    }
    if (!(seed.getItem() instanceof ItemSeeds)) {
      continue;
    }
    ArrayList<ItemStack> fruits=OreDictHelper.getFruitsFromOreDict(seed);
    if (fruits == null || fruits.size() == 0) {
      continue;
    }
    try {
      registerPlant(new CropPlantOreDict((ItemSeeds)seed.getItem()));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public static void init(){
  try {
    registerPlant(new CropPlantVanilla((BlockCrops)net.minecraft.init.Blocks.wheat,(ItemSeeds)net.minecraft.init.Items.wheat_seeds));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    registerPlant(new CropPlantStem((ItemSeeds)Items.melon_seeds,Blocks.melon_block));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    registerPlant(new CropPlantStem((ItemSeeds)Items.pumpkin_seeds,Blocks.pumpkin));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    registerPlant(new CropPlantNetherWart());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  for (  BlockModPlant plant : Crops.crops) {
    CropPlantAgriCraft cropPlant=new CropPlantAgriCraft(plant);
    try {
      registerPlant(cropPlant);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  if (ConfigurationHandler.resourcePlants) {
    for (    BlockModPlant plant : ResourceCrops.vanillaCrops) {
      CropPlantAgriCraft cropPlant=new CropPlantAgriCraft(plant);
      try {
        registerPlant(cropPlant);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    for (    BlockModPlant plant : ResourceCrops.modCrops) {
      CropPlantAgriCraft cropPlant=new CropPlantAgriCraft(plant);
      try {
        registerPlant(cropPlant);
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  for (  BlockModPlant plant : CustomCrops.customCrops) {
    CropPlantAgriCraft cropPlant=new CropPlantAgriCraft(plant);
    try {
      registerPlant(cropPlant);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  ModHelper.initModPlants();
  for (  CropPlant plant : plantsToRegister) {
    try {
      registerPlant(plant);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  plantsToRegister=null;
  ArrayList<ItemStack> seeds=OreDictionary.getOres(Names.OreDict.listAllseed);
  for (  ItemStack seed : seeds) {
    if (isValidSeed(seed)) {
      continue;
    }
    if (!(seed.getItem() instanceof ItemSeeds)) {
      continue;
    }
    ArrayList<ItemStack> fruits=OreDictHelper.getFruitsFromOreDict(seed);
    if (fruits == null || fruits.size() == 0) {
      continue;
    }
    try {
      registerPlant(new CropPlantOreDict((ItemSeeds)seed.getItem()));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}"
95634,"public static void renderStemPlant(int x,int y,int z,RenderBlocks renderer,IIcon icon,int meta,Block vine,Block block,boolean mature){
  Tessellator tessellator=Tessellator.instance;
  int translation=meta >= 6 ? 0 : 5 - meta;
  tessellator.setBrightness(vine.getMixedBrightnessForBlock(renderer.blockAccess,x,y,z));
  int l=vine.getRenderColor(7);
  float f=(float)(l >> 16 & 255) / 255.0F;
  float f1=(float)(l >> 8 & 255) / 255.0F;
  float f2=(float)(l & 255) / 255.0F;
  tessellator.setColorOpaque_F(f,f1,f2);
  tessellator.addTranslation(x,y - Constants.unit * 2 * translation,z);
  if (mature) {
    renderStemPattern(tessellator,icon);
  }
 else {
    renderCrossPattern(tessellator,icon,0);
  }
  tessellator.addTranslation(-x,-y + Constants.unit * 2 * translation,-z);
  if (mature) {
    float u=Constants.unit;
    boolean renderFacesSetting=renderer.renderAllFaces;
    renderer.renderAllFaces=true;
    renderer.setRenderBounds(7 * u,0,2 * u,11 * u,4 * u,6 * u);
    renderer.renderStandardBlock(block,x,y,z);
    renderer.setRenderBounds(10 * u,0,7 * u,14 * u,4 * u,11 * u);
    renderer.renderStandardBlock(block,x,y,z);
    renderer.setRenderBounds(5 * u,0,10 * u,9 * u,4 * u,14 * u);
    renderer.renderStandardBlock(block,x,y,z);
    renderer.setRenderBounds(2 * u,0,5 * u,6 * u,4 * u,9 * u);
    renderer.renderStandardBlock(block,x,y,z);
    renderer.renderAllFaces=renderFacesSetting;
  }
}","public static void renderStemPlant(int x,int y,int z,RenderBlocks renderer,IIcon icon,int meta,Block vine,Block block,boolean mature){
  Tessellator tessellator=Tessellator.instance;
  int translation=meta >= 6 ? 0 : 5 - meta;
  tessellator.setBrightness(vine.getMixedBrightnessForBlock(renderer.blockAccess,x,y,z));
  int l=vine.getRenderColor(meta);
  float f=(float)(l >> 16 & 255) / 255.0F;
  float f1=(float)(l >> 8 & 255) / 255.0F;
  float f2=(float)(l & 255) / 255.0F;
  tessellator.setColorOpaque_F(f,f1,f2);
  tessellator.addTranslation(x,y - Constants.unit * 2 * translation,z);
  if (mature) {
    renderStemPattern(tessellator,icon);
  }
 else {
    renderCrossPattern(tessellator,icon,0);
  }
  tessellator.addTranslation(-x,-y + Constants.unit * 2 * translation,-z);
  if (mature) {
    float u=Constants.unit;
    boolean renderFacesSetting=renderer.renderAllFaces;
    renderer.renderAllFaces=true;
    renderer.setRenderBounds(7 * u,0,2 * u,11 * u,4 * u,6 * u);
    renderer.renderStandardBlock(block,x,y,z);
    renderer.setRenderBounds(10 * u,0,7 * u,14 * u,4 * u,11 * u);
    renderer.renderStandardBlock(block,x,y,z);
    renderer.setRenderBounds(5 * u,0,10 * u,9 * u,4 * u,14 * u);
    renderer.renderStandardBlock(block,x,y,z);
    renderer.setRenderBounds(2 * u,0,5 * u,6 * u,4 * u,9 * u);
    renderer.renderStandardBlock(block,x,y,z);
    renderer.renderAllFaces=renderFacesSetting;
  }
}"
95635,"public static void initGrassSeeds(){
  if (ConfigurationHandler.wipeTallGrassDrops) {
    List seedList=null;
    boolean error=false;
    try {
      Field fieldSeedList=(ForgeHooks.class).getDeclaredField(""String_Node_Str"");
      fieldSeedList.setAccessible(true);
      seedList=(List)fieldSeedList.get(null);
    }
 catch (    NoSuchFieldException e) {
      error=true;
    }
catch (    IllegalAccessException e) {
      error=true;
    }
    if (error) {
      LogHelper.info(""String_Node_Str"");
    }
 else {
      seedList.clear();
      LogHelper.info(""String_Node_Str"");
    }
  }
  String[] rawData=IOHelper.getLinesArrayFromData(ConfigurationHandler.readGrassDrops());
  for (  String data : rawData) {
    String[] dropData=IOHelper.getData(data);
    boolean success=dropData.length == 2;
    String errorMsg=""String_Node_Str"";
    LogHelper.debug(""String_Node_Str"" + data);
    if (success) {
      ItemStack seedStack=IOHelper.getStack(dropData[0]);
      Item drop=seedStack != null ? seedStack.getItem() : null;
      success=drop != null;
      errorMsg=""String_Node_Str"";
      if (success) {
        int meta=seedStack.getItemDamage();
        int weight=Integer.parseInt(dropData[1]);
        MinecraftForge.addGrassSeed(new ItemStack(drop,1,meta),10);
        LogHelper.info(new StringBuffer(""String_Node_Str"").append(Item.itemRegistry.getNameForObject(drop)).append(""String_Node_Str"").append(meta).append(""String_Node_Str"").append(weight).append(')'));
      }
    }
    if (!success) {
      LogHelper.info(new StringBuffer(""String_Node_Str"").append(errorMsg).append(""String_Node_Str"").append(data).append(""String_Node_Str""));
    }
  }
}","public static void initGrassSeeds(){
  if (ConfigurationHandler.wipeTallGrassDrops) {
    List seedList=null;
    boolean error=false;
    try {
      Field fieldSeedList=(ForgeHooks.class).getDeclaredField(""String_Node_Str"");
      fieldSeedList.setAccessible(true);
      seedList=(List)fieldSeedList.get(null);
    }
 catch (    NoSuchFieldException e) {
      error=true;
    }
catch (    IllegalAccessException e) {
      error=true;
    }
    if (error) {
      LogHelper.info(""String_Node_Str"");
    }
 else {
      seedList.clear();
      LogHelper.info(""String_Node_Str"");
    }
  }
  String[] rawData=IOHelper.getLinesArrayFromData(ConfigurationHandler.readGrassDrops());
  for (  String data : rawData) {
    String[] dropData=IOHelper.getData(data);
    boolean success=dropData.length == 2;
    String errorMsg=""String_Node_Str"";
    LogHelper.debug(""String_Node_Str"" + data);
    if (success) {
      ItemStack seedStack=IOHelper.getStack(dropData[0]);
      Item drop=seedStack != null ? seedStack.getItem() : null;
      success=drop != null;
      errorMsg=""String_Node_Str"";
      if (success) {
        int meta=seedStack.getItemDamage();
        int weight=Integer.parseInt(dropData[1]);
        MinecraftForge.addGrassSeed(new ItemStack(drop,1,meta),weight);
        LogHelper.info(new StringBuffer(""String_Node_Str"").append(Item.itemRegistry.getNameForObject(drop)).append(""String_Node_Str"").append(meta).append(""String_Node_Str"").append(weight).append(')'));
      }
    }
    if (!success) {
      LogHelper.info(new StringBuffer(""String_Node_Str"").append(errorMsg).append(""String_Node_Str"").append(data).append(""String_Node_Str""));
    }
  }
}"
95636,"private static void hideItems(){
  LogHelper.debug(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Blocks.blockCrop,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Blocks.blockSprinkler,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.potato,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.carrot,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.melon,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.pumpkin,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.sugarcane,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.dandelion,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.poppy,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.orchid,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.allium,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.tulipRed,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.tulipOrange,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.tulipWhite,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.tulipPink,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.daisy,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.cactus,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.shroomRed,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.shroomBrown,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.nitorWart,1,i));
    if (ConfigurationHandler.integration_Botania) {
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaWhite,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaOrange,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaMagenta,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaLightBlue,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaYellow,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaLime,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaPink,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaGray,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaLightGray,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaCyan,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaPurple,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaBlue,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaBrown,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaGreen,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaRed,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaBlack,1,i));
    }
    if (ConfigurationHandler.resourcePlants) {
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.diamahlia,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.ferranium,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.aurigold,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.lapender,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.emeryllis,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.redstodendron,1,i));
      if (OreDictHelper.oreCopper != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.cuprosia,1,i));
      }
      if (OreDictHelper.oreTin != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.petinia,1,i));
      }
      if (OreDictHelper.oreLead != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.plombean,1,i));
      }
      if (OreDictHelper.oreSilver != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.silverweed,1,i));
      }
      if (OreDictHelper.oreAluminum != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.jaslumine,1,i));
      }
      if (OreDictHelper.oreNickel != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.niccissus,1,i));
      }
      if (OreDictHelper.orePlatinum != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.platiolus,1,i));
      }
      if (OreDictHelper.oreOsmium != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.osmonium,1,i));
      }
    }
    if (ConfigurationHandler.customCrops) {
      for (      BlockModPlant customCrop : CustomCrops.customCrops) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(customCrop,1,i));
      }
    }
    if (ConfigurationHandler.debug) {
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Items.debugItem,1,i));
    }
  }
}","private static void hideItems(){
  LogHelper.debug(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Blocks.blockCrop,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Blocks.blockSprinkler,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.potato,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.carrot,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.melon,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.pumpkin,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.sugarcane,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.dandelion,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.poppy,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.orchid,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.allium,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.tulipRed,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.tulipOrange,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.tulipWhite,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.tulipPink,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.daisy,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.cactus,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.shroomRed,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.shroomBrown,1,i));
    if (ConfigurationHandler.integration_Botania) {
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaWhite,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaOrange,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaMagenta,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaLightBlue,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaYellow,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaLime,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaPink,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaGray,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaLightGray,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaCyan,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaPurple,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaBlue,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaBrown,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaGreen,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaRed,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaBlack,1,i));
    }
    if (ConfigurationHandler.resourcePlants) {
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.diamahlia,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.ferranium,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.aurigold,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.lapender,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.emeryllis,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.redstodendron,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.nitorWart,1,i));
      if (OreDictHelper.oreCopper != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.cuprosia,1,i));
      }
      if (OreDictHelper.oreTin != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.petinia,1,i));
      }
      if (OreDictHelper.oreLead != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.plombean,1,i));
      }
      if (OreDictHelper.oreSilver != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.silverweed,1,i));
      }
      if (OreDictHelper.oreAluminum != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.jaslumine,1,i));
      }
      if (OreDictHelper.oreNickel != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.niccissus,1,i));
      }
      if (OreDictHelper.orePlatinum != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.platiolus,1,i));
      }
      if (OreDictHelper.oreOsmium != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.osmonium,1,i));
      }
    }
    if (ConfigurationHandler.customCrops) {
      for (      BlockModPlant customCrop : CustomCrops.customCrops) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(customCrop,1,i));
      }
    }
    if (ConfigurationHandler.debug) {
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Items.debugItem,1,i));
    }
  }
}"
95637,"public void addProduce(ItemStack stack,int weight,boolean overwrite){
  if (overwrite) {
    this.removeProduce(stack);
  }
  this.products.add(new Product(stack,weight));
  this.totalWeight=this.totalWeight + weight;
}","public void addProduce(ItemStack stack,int weight,int minGain,boolean overwrite){
  if (overwrite) {
    this.removeProduce(stack);
  }
  this.products.add(new Product(stack,weight,minGain));
  this.totalWeight=this.totalWeight + weight;
}"
95638,"public Product(ItemStack product,int weight){
  this.product=product.copy();
  this.product.stackSize=1;
  this.weight=weight;
}","public Product(ItemStack product,int weight,int minGain){
  this.product=product.copy();
  this.product.stackSize=1;
  this.weight=weight;
  this.minGain=minGain;
}"
95639,"@SubscribeEvent(priority=EventPriority.HIGHEST) public void onPlayerUseItemEvent(PlayerInteractEvent event){
  if (event.action == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK) {
    Block block=event.world.getBlock(event.x,event.y,event.z);
    if (event.entityPlayer.getCurrentEquippedItem() != null && event.entityPlayer.getCurrentEquippedItem().stackSize > 0 && event.entityPlayer.getCurrentEquippedItem().getItem() != null && event.entityPlayer.getCurrentEquippedItem().getItem() instanceof IPlantable) {
      if (GrowthRequirements.isSoilValid(event.world,event.x,event.y,event.z) || block == Blocks.farmland) {
        if (ConfigurationHandler.disableVanillaFarming) {
          this.denyEvent(event,false);
        }
 else         if (event.entityPlayer.getCurrentEquippedItem().hasTagCompound()) {
          NBTTagCompound tag=(NBTTagCompound)event.entityPlayer.getCurrentEquippedItem().getTagCompound().copy();
          if (tag.hasKey(Names.NBT.growth) && tag.hasKey(Names.NBT.gain) && tag.hasKey(Names.NBT.strength)) {
            this.denyEvent(event,false);
          }
        }
      }
    }
  }
}","@SubscribeEvent(priority=EventPriority.HIGHEST) public void onPlayerUseItemEvent(PlayerInteractEvent event){
  if (event.action == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK) {
    Block block=event.world.getBlock(event.x,event.y,event.z);
    if (event.entityPlayer.getCurrentEquippedItem() != null && event.entityPlayer.getCurrentEquippedItem().stackSize > 0 && event.entityPlayer.getCurrentEquippedItem().getItem() != null && event.entityPlayer.getCurrentEquippedItem().getItem() instanceof IPlantable) {
      if (GrowthRequirements.isSoilValid(event.world,event.x,event.y,event.z) || block == Blocks.farmland) {
        if (ConfigurationHandler.disableVanillaFarming) {
          if (!(event.entityPlayer.getCurrentEquippedItem().getItem() instanceof ItemSeeds) || SeedHelper.isValidSeed((ItemSeeds)event.entityPlayer.getCurrentEquippedItem().getItem(),event.entityPlayer.getCurrentEquippedItem().getItemDamage())) {
            this.denyEvent(event,false);
          }
        }
 else         if (event.entityPlayer.getCurrentEquippedItem().hasTagCompound()) {
          NBTTagCompound tag=(NBTTagCompound)event.entityPlayer.getCurrentEquippedItem().getTagCompound().copy();
          if (tag.hasKey(Names.NBT.growth) && tag.hasKey(Names.NBT.gain) && tag.hasKey(Names.NBT.strength)) {
            this.denyEvent(event,false);
          }
        }
      }
    }
  }
}"
95640,"public static void init(){
  potato=new BlockModPlant(net.minecraft.init.Items.potato);
  carrot=new BlockModPlant(net.minecraft.init.Items.carrot);
  melon=new BlockModPlant(net.minecraft.init.Items.melon);
  pumpkin=new BlockModPlant(Item.getItemFromBlock(Blocks.pumpkin));
  sugarcane=new BlockModPlant(net.minecraft.init.Blocks.sand,net.minecraft.init.Items.reeds);
  dandelion=new BlockModPlant(net.minecraft.init.Items.dye,11);
  poppy=new BlockModPlant(net.minecraft.init.Items.dye,1);
  orchid=new BlockModPlant(net.minecraft.init.Items.dye,12);
  allium=new BlockModPlant(net.minecraft.init.Items.dye,13);
  tulipRed=new BlockModPlant(net.minecraft.init.Items.dye,1,2);
  tulipOrange=new BlockModPlant(net.minecraft.init.Items.dye,14,2);
  tulipWhite=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  tulipPink=new BlockModPlant(net.minecraft.init.Items.dye,9,2);
  daisy=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  cactus=new BlockModPlant(Blocks.sand,ConfigurationHandler.cactusGivesCactus ? Item.getItemFromBlock(Blocks.cactus) : net.minecraft.init.Items.dye,ConfigurationHandler.cactusGivesCactus ? 0 : 2);
  shroomRed=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.red_mushroom));
  shroomBrown=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.brown_mushroom));
  nitorWart=new BlockModPlant(Blocks.soul_sand,net.minecraft.init.Blocks.glowstone,net.minecraft.init.Items.glowstone_dust,4,6);
  RegisterHelper.registerCrop(potato,Names.Plants.potato);
  RegisterHelper.registerCrop(carrot,Names.Plants.carrot);
  RegisterHelper.registerCrop(melon,Names.Plants.melon);
  RegisterHelper.registerCrop(pumpkin,Names.Plants.pumpkin);
  RegisterHelper.registerCrop(sugarcane,Names.Plants.sugarcane);
  RegisterHelper.registerCrop(dandelion,Names.Plants.dandelion);
  RegisterHelper.registerCrop(poppy,Names.Plants.poppy);
  RegisterHelper.registerCrop(orchid,Names.Plants.orchid);
  RegisterHelper.registerCrop(allium,Names.Plants.allium);
  RegisterHelper.registerCrop(tulipRed,Names.Plants.tulip + Names.Colors.red);
  RegisterHelper.registerCrop(tulipOrange,Names.Plants.tulip + Names.Colors.orange);
  RegisterHelper.registerCrop(tulipWhite,Names.Plants.tulip + Names.Colors.white);
  RegisterHelper.registerCrop(tulipPink,Names.Plants.tulip + Names.Colors.pink);
  RegisterHelper.registerCrop(daisy,Names.Plants.daisy);
  RegisterHelper.registerCrop(cactus,Names.Plants.cactus);
  RegisterHelper.registerCrop(shroomRed,Names.Plants.shroom + Names.Colors.red);
  RegisterHelper.registerCrop(shroomBrown,Names.Plants.shroom + Names.Colors.brown);
  RegisterHelper.registerCrop(nitorWart,Names.Plants.nitorWart);
  LogHelper.info(""String_Node_Str"");
}","public static void init(){
  potato=new BlockModPlant(net.minecraft.init.Items.potato);
  carrot=new BlockModPlant(net.minecraft.init.Items.carrot);
  melon=new BlockModPlant(net.minecraft.init.Items.melon);
  pumpkin=new BlockModPlant(Item.getItemFromBlock(Blocks.pumpkin));
  sugarcane=new BlockModPlant(net.minecraft.init.Blocks.sand,net.minecraft.init.Items.reeds);
  dandelion=new BlockModPlant(net.minecraft.init.Items.dye,11);
  poppy=new BlockModPlant(net.minecraft.init.Items.dye,1);
  orchid=new BlockModPlant(net.minecraft.init.Items.dye,12);
  allium=new BlockModPlant(net.minecraft.init.Items.dye,13);
  tulipRed=new BlockModPlant(net.minecraft.init.Items.dye,1,2);
  tulipOrange=new BlockModPlant(net.minecraft.init.Items.dye,14,2);
  tulipWhite=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  tulipPink=new BlockModPlant(net.minecraft.init.Items.dye,9,2);
  daisy=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  cactus=new BlockModPlant(Blocks.sand,ConfigurationHandler.cactusGivesCactus ? Item.getItemFromBlock(Blocks.cactus) : net.minecraft.init.Items.dye,ConfigurationHandler.cactusGivesCactus ? 0 : 2);
  shroomRed=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.red_mushroom));
  shroomBrown=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.brown_mushroom));
  RegisterHelper.registerCrop(potato,Names.Plants.potato);
  RegisterHelper.registerCrop(carrot,Names.Plants.carrot);
  RegisterHelper.registerCrop(melon,Names.Plants.melon);
  RegisterHelper.registerCrop(pumpkin,Names.Plants.pumpkin);
  RegisterHelper.registerCrop(sugarcane,Names.Plants.sugarcane);
  RegisterHelper.registerCrop(dandelion,Names.Plants.dandelion);
  RegisterHelper.registerCrop(poppy,Names.Plants.poppy);
  RegisterHelper.registerCrop(orchid,Names.Plants.orchid);
  RegisterHelper.registerCrop(allium,Names.Plants.allium);
  RegisterHelper.registerCrop(tulipRed,Names.Plants.tulip + Names.Colors.red);
  RegisterHelper.registerCrop(tulipOrange,Names.Plants.tulip + Names.Colors.orange);
  RegisterHelper.registerCrop(tulipWhite,Names.Plants.tulip + Names.Colors.white);
  RegisterHelper.registerCrop(tulipPink,Names.Plants.tulip + Names.Colors.pink);
  RegisterHelper.registerCrop(daisy,Names.Plants.daisy);
  RegisterHelper.registerCrop(cactus,Names.Plants.cactus);
  RegisterHelper.registerCrop(shroomRed,Names.Plants.shroom + Names.Colors.red);
  RegisterHelper.registerCrop(shroomBrown,Names.Plants.shroom + Names.Colors.brown);
  LogHelper.info(""String_Node_Str"");
}"
95641,"public static void init(){
  if (ConfigurationHandler.resourcePlants) {
    Block farmland=null;
    OreDictHelper.getRegisteredOres();
    Items.initFruits();
    diamahlia=new BlockModPlant(farmland,net.minecraft.init.Blocks.diamond_ore,Items.nuggetDiamond,Items.nuggetDiamondMeta,5,6);
    ferranium=new BlockModPlant(farmland,net.minecraft.init.Blocks.iron_ore,Items.nuggetIron,Items.nuggetIronMeta,4,1);
    aurigold=new BlockModPlant(farmland,net.minecraft.init.Blocks.gold_ore,net.minecraft.init.Items.gold_nugget,0,4,6);
    lapender=new BlockModPlant(farmland,net.minecraft.init.Blocks.lapis_ore,net.minecraft.init.Items.dye,4,3,6);
    emeryllis=new BlockModPlant(farmland,net.minecraft.init.Blocks.emerald_ore,Items.nuggetEmerald,Items.nuggetEmeraldMeta,5,6);
    redstodendron=new BlockModPlant(farmland,net.minecraft.init.Blocks.redstone_ore,net.minecraft.init.Items.redstone,0,3,6);
    RegisterHelper.registerCrop(diamahlia,Names.Plants.diamahlia);
    RegisterHelper.registerCrop(ferranium,Names.Plants.ferranium);
    RegisterHelper.registerCrop(aurigold,Names.Plants.aurigold);
    RegisterHelper.registerCrop(lapender,Names.Plants.lapender);
    RegisterHelper.registerCrop(emeryllis,Names.Plants.emeryllis);
    RegisterHelper.registerCrop(redstodendron,Names.Plants.redstodendron);
    if (OreDictHelper.oreCopper != null) {
      cuprosia=new BlockModPlant(farmland,OreDictHelper.oreCopper,OreDictHelper.oreCopperMeta,Items.nuggetCopper,Items.nuggetCopperMeta,3,6);
      RegisterHelper.registerCrop(cuprosia,Names.Plants.cuprosia);
    }
    if (OreDictHelper.oreTin != null) {
      petinia=new BlockModPlant(farmland,OreDictHelper.oreTin,OreDictHelper.oreTinMeta,Items.nuggetTin,Items.nuggetTinMeta,3,6);
      RegisterHelper.registerCrop(petinia,Names.Plants.petinia);
    }
    if (OreDictHelper.oreLead != null) {
      plombean=new BlockModPlant(farmland,OreDictHelper.oreLead,OreDictHelper.oreLeadMeta,Items.nuggetLead,Items.nuggetLeadMeta,4,6);
      RegisterHelper.registerCrop(plombean,Names.Plants.plombean);
    }
    if (OreDictHelper.oreSilver != null) {
      silverweed=new BlockModPlant(farmland,OreDictHelper.oreSilver,OreDictHelper.oreSilverMeta,Items.nuggetSilver,Items.nuggetSilverMeta,4,6);
      RegisterHelper.registerCrop(silverweed,Names.Plants.silverweed);
    }
    if (OreDictHelper.oreAluminum != null) {
      jaslumine=new BlockModPlant(farmland,OreDictHelper.oreAluminum,OreDictHelper.oreAluminumMeta,Items.nuggetAluminum,Items.nuggetAluminumMeta,4,1);
      RegisterHelper.registerCrop(jaslumine,Names.Plants.jaslumine);
    }
    if (OreDictHelper.oreNickel != null) {
      niccissus=new BlockModPlant(farmland,OreDictHelper.oreNickel,OreDictHelper.oreNickelMeta,Items.nuggetNickel,Items.nuggetNickelMeta,4,6);
      RegisterHelper.registerCrop(niccissus,Names.Plants.niccissus);
    }
    if (OreDictHelper.orePlatinum != null) {
      platiolus=new BlockModPlant(farmland,OreDictHelper.orePlatinum,OreDictHelper.orePlatinumMeta,Items.nuggetPlatinum,Items.nuggetPlatinumMeta,4,1);
      RegisterHelper.registerCrop(platiolus,Names.Plants.platiolus);
    }
    if (OreDictHelper.oreOsmium != null) {
      osmonium=new BlockModPlant(farmland,OreDictHelper.oreOsmium,OreDictHelper.oreOsmiumMeta,Items.nuggetOsmium,Items.nuggetOsmiumMeta,4,6);
      RegisterHelper.registerCrop(osmonium,Names.Plants.osmonium);
    }
    Seeds.initResourceSeeds();
    LogHelper.debug(""String_Node_Str"");
  }
}","public static void init(){
  if (ConfigurationHandler.resourcePlants) {
    Block farmland=null;
    OreDictHelper.getRegisteredOres();
    Items.initFruits();
    diamahlia=new BlockModPlant(farmland,net.minecraft.init.Blocks.diamond_ore,Items.nuggetDiamond,Items.nuggetDiamondMeta,5,6);
    ferranium=new BlockModPlant(farmland,net.minecraft.init.Blocks.iron_ore,Items.nuggetIron,Items.nuggetIronMeta,4,1);
    aurigold=new BlockModPlant(farmland,net.minecraft.init.Blocks.gold_ore,net.minecraft.init.Items.gold_nugget,0,4,6);
    lapender=new BlockModPlant(farmland,net.minecraft.init.Blocks.lapis_ore,net.minecraft.init.Items.dye,4,3,6);
    emeryllis=new BlockModPlant(farmland,net.minecraft.init.Blocks.emerald_ore,Items.nuggetEmerald,Items.nuggetEmeraldMeta,5,6);
    redstodendron=new BlockModPlant(farmland,net.minecraft.init.Blocks.redstone_ore,net.minecraft.init.Items.redstone,0,3,6);
    nitorWart=new BlockModPlant(net.minecraft.init.Blocks.soul_sand,net.minecraft.init.Blocks.glowstone,net.minecraft.init.Items.glowstone_dust,4,6);
    RegisterHelper.registerCrop(diamahlia,Names.Plants.diamahlia);
    RegisterHelper.registerCrop(ferranium,Names.Plants.ferranium);
    RegisterHelper.registerCrop(aurigold,Names.Plants.aurigold);
    RegisterHelper.registerCrop(lapender,Names.Plants.lapender);
    RegisterHelper.registerCrop(emeryllis,Names.Plants.emeryllis);
    RegisterHelper.registerCrop(redstodendron,Names.Plants.redstodendron);
    RegisterHelper.registerCrop(nitorWart,Names.Plants.nitorWart);
    if (OreDictHelper.oreCopper != null) {
      cuprosia=new BlockModPlant(farmland,OreDictHelper.oreCopper,OreDictHelper.oreCopperMeta,Items.nuggetCopper,Items.nuggetCopperMeta,3,6);
      RegisterHelper.registerCrop(cuprosia,Names.Plants.cuprosia);
    }
    if (OreDictHelper.oreTin != null) {
      petinia=new BlockModPlant(farmland,OreDictHelper.oreTin,OreDictHelper.oreTinMeta,Items.nuggetTin,Items.nuggetTinMeta,3,6);
      RegisterHelper.registerCrop(petinia,Names.Plants.petinia);
    }
    if (OreDictHelper.oreLead != null) {
      plombean=new BlockModPlant(farmland,OreDictHelper.oreLead,OreDictHelper.oreLeadMeta,Items.nuggetLead,Items.nuggetLeadMeta,4,6);
      RegisterHelper.registerCrop(plombean,Names.Plants.plombean);
    }
    if (OreDictHelper.oreSilver != null) {
      silverweed=new BlockModPlant(farmland,OreDictHelper.oreSilver,OreDictHelper.oreSilverMeta,Items.nuggetSilver,Items.nuggetSilverMeta,4,6);
      RegisterHelper.registerCrop(silverweed,Names.Plants.silverweed);
    }
    if (OreDictHelper.oreAluminum != null) {
      jaslumine=new BlockModPlant(farmland,OreDictHelper.oreAluminum,OreDictHelper.oreAluminumMeta,Items.nuggetAluminum,Items.nuggetAluminumMeta,4,1);
      RegisterHelper.registerCrop(jaslumine,Names.Plants.jaslumine);
    }
    if (OreDictHelper.oreNickel != null) {
      niccissus=new BlockModPlant(farmland,OreDictHelper.oreNickel,OreDictHelper.oreNickelMeta,Items.nuggetNickel,Items.nuggetNickelMeta,4,6);
      RegisterHelper.registerCrop(niccissus,Names.Plants.niccissus);
    }
    if (OreDictHelper.orePlatinum != null) {
      platiolus=new BlockModPlant(farmland,OreDictHelper.orePlatinum,OreDictHelper.orePlatinumMeta,Items.nuggetPlatinum,Items.nuggetPlatinumMeta,4,1);
      RegisterHelper.registerCrop(platiolus,Names.Plants.platiolus);
    }
    if (OreDictHelper.oreOsmium != null) {
      osmonium=new BlockModPlant(farmland,OreDictHelper.oreOsmium,OreDictHelper.oreOsmiumMeta,Items.nuggetOsmium,Items.nuggetOsmiumMeta,4,6);
      RegisterHelper.registerCrop(osmonium,Names.Plants.osmonium);
    }
    Seeds.initResourceSeeds();
    LogHelper.debug(""String_Node_Str"");
  }
}"
95642,"public static void init(){
  seedPotato=new ItemModSeed(Crops.potato,SeedInformation.potato);
  seedCarrot=new ItemModSeed(Crops.carrot,SeedInformation.carrot);
  seedSugarcane=new ItemModSeed(Crops.sugarcane,SeedInformation.sugarcane);
  seedDandelion=new ItemModSeed(Crops.dandelion,SeedInformation.dandelion);
  seedPoppy=new ItemModSeed(Crops.poppy,SeedInformation.poppy);
  seedOrchid=new ItemModSeed(Crops.orchid,SeedInformation.orchid);
  seedAllium=new ItemModSeed(Crops.allium,SeedInformation.allium);
  seedTulipRed=new ItemModSeed(Crops.tulipRed,SeedInformation.tulipRed);
  seedTulipOrange=new ItemModSeed(Crops.tulipOrange,SeedInformation.tulipOrange);
  seedTulipWhite=new ItemModSeed(Crops.tulipWhite,SeedInformation.tulipWhite);
  seedTulipPink=new ItemModSeed(Crops.tulipPink,SeedInformation.tulipPink);
  seedDaisy=new ItemModSeed(Crops.daisy,SeedInformation.daisy);
  seedCactus=new ItemModSeed(Crops.cactus,SeedInformation.cactus);
  seedShroomRed=new ItemModSeed(Crops.shroomRed,SeedInformation.shroomRed);
  seedShroomBrown=new ItemModSeed(Crops.shroomBrown,SeedInformation.shroomBrown);
  seedNitorWart=new ItemModSeed(Crops.nitorWart,SeedInformation.nitorWart);
  RegisterHelper.registerSeed(seedPotato,Crops.potato);
  RegisterHelper.registerSeed(seedCarrot,Crops.carrot);
  RegisterHelper.registerSeed(seedSugarcane,Crops.sugarcane);
  RegisterHelper.registerSeed(seedDandelion,Crops.dandelion);
  RegisterHelper.registerSeed(seedPoppy,Crops.poppy);
  RegisterHelper.registerSeed(seedOrchid,Crops.orchid);
  RegisterHelper.registerSeed(seedAllium,Crops.allium);
  RegisterHelper.registerSeed(seedTulipRed,Crops.tulipRed);
  RegisterHelper.registerSeed(seedTulipOrange,Crops.tulipOrange);
  RegisterHelper.registerSeed(seedTulipWhite,Crops.tulipWhite);
  RegisterHelper.registerSeed(seedTulipPink,Crops.tulipPink);
  RegisterHelper.registerSeed(seedDaisy,Crops.daisy);
  RegisterHelper.registerSeed(seedCactus,Crops.cactus);
  RegisterHelper.registerSeed(seedShroomRed,Crops.shroomRed);
  RegisterHelper.registerSeed(seedShroomBrown,Crops.shroomBrown);
  RegisterHelper.registerSeed(seedNitorWart,Crops.nitorWart);
  if (ModIntegration.LoadedMods.natura) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,NContent.plantItem);
  }
  if (ModIntegration.LoadedMods.exNihilo) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,ExNihiloHelper.seedCarrot);
    OreDictionary.registerOre(Names.OreDict.listAllseed,ExNihiloHelper.seedPotato);
    OreDictionary.registerOre(Names.OreDict.listAllseed,ExNihiloHelper.seedSugarCane);
  }
  if (ModIntegration.LoadedMods.plantMegaPack) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
  }
  LogHelper.info(""String_Node_Str"");
}","public static void init(){
  seedPotato=new ItemModSeed(Crops.potato,SeedInformation.potato);
  seedCarrot=new ItemModSeed(Crops.carrot,SeedInformation.carrot);
  seedSugarcane=new ItemModSeed(Crops.sugarcane,SeedInformation.sugarcane);
  seedDandelion=new ItemModSeed(Crops.dandelion,SeedInformation.dandelion);
  seedPoppy=new ItemModSeed(Crops.poppy,SeedInformation.poppy);
  seedOrchid=new ItemModSeed(Crops.orchid,SeedInformation.orchid);
  seedAllium=new ItemModSeed(Crops.allium,SeedInformation.allium);
  seedTulipRed=new ItemModSeed(Crops.tulipRed,SeedInformation.tulipRed);
  seedTulipOrange=new ItemModSeed(Crops.tulipOrange,SeedInformation.tulipOrange);
  seedTulipWhite=new ItemModSeed(Crops.tulipWhite,SeedInformation.tulipWhite);
  seedTulipPink=new ItemModSeed(Crops.tulipPink,SeedInformation.tulipPink);
  seedDaisy=new ItemModSeed(Crops.daisy,SeedInformation.daisy);
  seedCactus=new ItemModSeed(Crops.cactus,SeedInformation.cactus);
  seedShroomRed=new ItemModSeed(Crops.shroomRed,SeedInformation.shroomRed);
  seedShroomBrown=new ItemModSeed(Crops.shroomBrown,SeedInformation.shroomBrown);
  RegisterHelper.registerSeed(seedPotato,Crops.potato);
  RegisterHelper.registerSeed(seedCarrot,Crops.carrot);
  RegisterHelper.registerSeed(seedSugarcane,Crops.sugarcane);
  RegisterHelper.registerSeed(seedDandelion,Crops.dandelion);
  RegisterHelper.registerSeed(seedPoppy,Crops.poppy);
  RegisterHelper.registerSeed(seedOrchid,Crops.orchid);
  RegisterHelper.registerSeed(seedAllium,Crops.allium);
  RegisterHelper.registerSeed(seedTulipRed,Crops.tulipRed);
  RegisterHelper.registerSeed(seedTulipOrange,Crops.tulipOrange);
  RegisterHelper.registerSeed(seedTulipWhite,Crops.tulipWhite);
  RegisterHelper.registerSeed(seedTulipPink,Crops.tulipPink);
  RegisterHelper.registerSeed(seedDaisy,Crops.daisy);
  RegisterHelper.registerSeed(seedCactus,Crops.cactus);
  RegisterHelper.registerSeed(seedShroomRed,Crops.shroomRed);
  RegisterHelper.registerSeed(seedShroomBrown,Crops.shroomBrown);
  if (ModIntegration.LoadedMods.natura) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,NContent.plantItem);
  }
  if (ModIntegration.LoadedMods.exNihilo) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,ExNihiloHelper.seedCarrot);
    OreDictionary.registerOre(Names.OreDict.listAllseed,ExNihiloHelper.seedPotato);
    OreDictionary.registerOre(Names.OreDict.listAllseed,ExNihiloHelper.seedSugarCane);
  }
  if (ModIntegration.LoadedMods.plantMegaPack) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
  }
  LogHelper.info(""String_Node_Str"");
}"
95643,"public static void initResourceSeeds(){
  if (ConfigurationHandler.resourcePlants) {
    seedDiamahlia=new ItemModSeed(ResourceCrops.diamahlia,SeedInformation.diamahlia);
    seedFerranium=new ItemModSeed(ResourceCrops.ferranium,SeedInformation.ferranium);
    seedAurigold=new ItemModSeed(ResourceCrops.aurigold,SeedInformation.aurigold);
    seedLapender=new ItemModSeed(ResourceCrops.lapender,SeedInformation.lapender);
    seedEmeryllis=new ItemModSeed(ResourceCrops.emeryllis,SeedInformation.emeryllis);
    seedRedstodendron=new ItemModSeed(ResourceCrops.redstodendron,SeedInformation.redstodendron);
    RegisterHelper.registerSeed(seedFerranium,ResourceCrops.ferranium);
    RegisterHelper.registerSeed(seedDiamahlia,ResourceCrops.diamahlia);
    RegisterHelper.registerSeed(seedAurigold,ResourceCrops.aurigold);
    RegisterHelper.registerSeed(seedLapender,ResourceCrops.lapender);
    RegisterHelper.registerSeed(seedEmeryllis,ResourceCrops.emeryllis);
    RegisterHelper.registerSeed(seedRedstodendron,ResourceCrops.redstodendron);
    if (OreDictHelper.oreCopper != null) {
      seedCuprosia=new ItemModSeed(ResourceCrops.cuprosia,SeedInformation.cuprosia);
      RegisterHelper.registerSeed(seedCuprosia,ResourceCrops.cuprosia);
    }
    if (OreDictHelper.oreTin != null) {
      seedPetinia=new ItemModSeed(ResourceCrops.petinia,SeedInformation.petinia);
      RegisterHelper.registerSeed(seedPetinia,ResourceCrops.petinia);
    }
    if (OreDictHelper.oreLead != null) {
      seedPlombean=new ItemModSeed(ResourceCrops.plombean,SeedInformation.plombean);
      RegisterHelper.registerSeed(seedPlombean,ResourceCrops.plombean);
    }
    if (OreDictHelper.oreSilver != null) {
      seedSilverweed=new ItemModSeed(ResourceCrops.silverweed,SeedInformation.silverweed);
      RegisterHelper.registerSeed(seedSilverweed,ResourceCrops.silverweed);
    }
    if (OreDictHelper.oreAluminum != null) {
      seedJaslumine=new ItemModSeed(ResourceCrops.jaslumine,SeedInformation.jaslumine);
      RegisterHelper.registerSeed(seedJaslumine,ResourceCrops.jaslumine);
    }
    if (OreDictHelper.oreNickel != null) {
      seedNiccissus=new ItemModSeed(ResourceCrops.niccissus,SeedInformation.niccissus);
      RegisterHelper.registerSeed(seedNiccissus,ResourceCrops.niccissus);
    }
    if (OreDictHelper.orePlatinum != null) {
      seedPlatiolus=new ItemModSeed(ResourceCrops.platiolus,SeedInformation.platiolus);
      RegisterHelper.registerSeed(seedPlatiolus,ResourceCrops.platiolus);
    }
    if (OreDictHelper.oreOsmium != null) {
      seedOsmonium=new ItemModSeed(ResourceCrops.osmonium,SeedInformation.osmonium);
      RegisterHelper.registerSeed(seedOsmonium,ResourceCrops.osmonium);
    }
  }
}","public static void initResourceSeeds(){
  if (ConfigurationHandler.resourcePlants) {
    seedDiamahlia=new ItemModSeed(ResourceCrops.diamahlia,SeedInformation.diamahlia);
    seedFerranium=new ItemModSeed(ResourceCrops.ferranium,SeedInformation.ferranium);
    seedAurigold=new ItemModSeed(ResourceCrops.aurigold,SeedInformation.aurigold);
    seedLapender=new ItemModSeed(ResourceCrops.lapender,SeedInformation.lapender);
    seedEmeryllis=new ItemModSeed(ResourceCrops.emeryllis,SeedInformation.emeryllis);
    seedRedstodendron=new ItemModSeed(ResourceCrops.redstodendron,SeedInformation.redstodendron);
    seedNitorWart=new ItemModSeed(ResourceCrops.nitorWart,SeedInformation.nitorWart);
    RegisterHelper.registerSeed(seedFerranium,ResourceCrops.ferranium);
    RegisterHelper.registerSeed(seedDiamahlia,ResourceCrops.diamahlia);
    RegisterHelper.registerSeed(seedAurigold,ResourceCrops.aurigold);
    RegisterHelper.registerSeed(seedLapender,ResourceCrops.lapender);
    RegisterHelper.registerSeed(seedEmeryllis,ResourceCrops.emeryllis);
    RegisterHelper.registerSeed(seedRedstodendron,ResourceCrops.redstodendron);
    RegisterHelper.registerSeed(seedNitorWart,ResourceCrops.nitorWart);
    if (OreDictHelper.oreCopper != null) {
      seedCuprosia=new ItemModSeed(ResourceCrops.cuprosia,SeedInformation.cuprosia);
      RegisterHelper.registerSeed(seedCuprosia,ResourceCrops.cuprosia);
    }
    if (OreDictHelper.oreTin != null) {
      seedPetinia=new ItemModSeed(ResourceCrops.petinia,SeedInformation.petinia);
      RegisterHelper.registerSeed(seedPetinia,ResourceCrops.petinia);
    }
    if (OreDictHelper.oreLead != null) {
      seedPlombean=new ItemModSeed(ResourceCrops.plombean,SeedInformation.plombean);
      RegisterHelper.registerSeed(seedPlombean,ResourceCrops.plombean);
    }
    if (OreDictHelper.oreSilver != null) {
      seedSilverweed=new ItemModSeed(ResourceCrops.silverweed,SeedInformation.silverweed);
      RegisterHelper.registerSeed(seedSilverweed,ResourceCrops.silverweed);
    }
    if (OreDictHelper.oreAluminum != null) {
      seedJaslumine=new ItemModSeed(ResourceCrops.jaslumine,SeedInformation.jaslumine);
      RegisterHelper.registerSeed(seedJaslumine,ResourceCrops.jaslumine);
    }
    if (OreDictHelper.oreNickel != null) {
      seedNiccissus=new ItemModSeed(ResourceCrops.niccissus,SeedInformation.niccissus);
      RegisterHelper.registerSeed(seedNiccissus,ResourceCrops.niccissus);
    }
    if (OreDictHelper.orePlatinum != null) {
      seedPlatiolus=new ItemModSeed(ResourceCrops.platiolus,SeedInformation.platiolus);
      RegisterHelper.registerSeed(seedPlatiolus,ResourceCrops.platiolus);
    }
    if (OreDictHelper.oreOsmium != null) {
      seedOsmonium=new ItemModSeed(ResourceCrops.osmonium,SeedInformation.osmonium);
      RegisterHelper.registerSeed(seedOsmonium,ResourceCrops.osmonium);
    }
  }
}"
95644,"/** 
 * Depending on the block type either irrigates farmland or forces plant growth (based on chance) 
 */
private void irrigate(int x,int y,int z){
  Block block=this.worldObj.getBlock(x,y,z);
  if (block != null) {
    if (block instanceof BlockFarmland && this.worldObj.getBlockMetadata(x,y,z) < 7) {
      this.worldObj.setBlockMetadataWithNotify(x,y,z,7,2);
    }
 else     if (block instanceof BlockBush) {
      if (counter == 0 && Constants.rand.nextDouble() <= ConfigurationHandler.sprinklerGrowthChancePercent) {
        block.updateTick(this.worldObj,x,y,z,Constants.rand);
      }
    }
  }
}","/** 
 * Depending on the block type either irrigates farmland or forces plant growth (based on chance) 
 */
private void irrigate(int x,int y,int z){
  Block block=this.worldObj.getBlock(x,y,z);
  if (block != null) {
    if (block instanceof BlockFarmland && this.worldObj.getBlockMetadata(x,y,z) < 7) {
      int flag=counter == 0 ? 2 : 6;
      this.worldObj.setBlockMetadataWithNotify(x,y,z,7,flag);
    }
 else     if (block instanceof BlockBush) {
      if (counter == 0 && Constants.rand.nextDouble() <= ConfigurationHandler.sprinklerGrowthChancePercent) {
        block.updateTick(this.worldObj,x,y,z,Constants.rand);
      }
    }
  }
}"
95645,"public static ArrayList<ItemStack> getPlantFruits(ItemSeeds seed,World world,int x,int y,int z,int gain,int meta){
  int nr=(int)(Math.ceil((gain + 0.00) / 3));
  Block plant=getPlant(seed);
  ArrayList<ItemStack> items=new ArrayList<ItemStack>();
  if (plant == Blocks.nether_wart) {
    LogHelper.debug(""String_Node_Str"");
    items.add(new ItemStack(seed,nr,0));
  }
 else   if (plant instanceof BlockModPlant) {
    LogHelper.debug(""String_Node_Str"");
    items.addAll(((BlockModPlant)plant).getFruit(nr,world.rand));
  }
 else   if (ModIntegration.LoadedMods.natura && getPlantDomain(seed).equalsIgnoreCase(""String_Node_Str"")) {
    LogHelper.debug(""String_Node_Str"");
    items.add(new ItemStack(NContent.plantItem,nr,meta * 3));
  }
 else   if (ModIntegration.LoadedMods.chococraft && seed instanceof ItemGysahlSeeds) {
    LogHelper.debug(""String_Node_Str"");
    items.add(ChococraftHelper.getFruit(gain,nr));
  }
 else {
    LogHelper.debug(""String_Node_Str"");
    addFruitsFromOreDict(items,seed,meta,world.rand,nr);
  }
  if (items.size() == 0) {
    LogHelper.debug(""String_Node_Str"");
    int harvestMeta=7;
    if (ModIntegration.LoadedMods.plantMegaPack && getPlantDomain(seed).equalsIgnoreCase(""String_Node_Str"")) {
      harvestMeta=PlantMegaPackHelper.getTextureIndex(seed,harvestMeta);
    }
    addFruitsFromPlant(items,plant,world,x,y,z,harvestMeta,nr);
  }
  return items;
}","public static ArrayList<ItemStack> getPlantFruits(ItemSeeds seed,World world,int x,int y,int z,int gain,int meta){
  int nr=(int)(Math.ceil((gain + 0.00) / 3));
  Block plant=getPlant(seed);
  ArrayList<ItemStack> items=new ArrayList<ItemStack>();
  Random rand=world != null ? world.rand : new Random();
  if (plant == Blocks.nether_wart) {
    LogHelper.debug(""String_Node_Str"");
    items.add(new ItemStack(seed,nr,0));
  }
 else   if (plant instanceof BlockModPlant) {
    LogHelper.debug(""String_Node_Str"");
    items.addAll(((BlockModPlant)plant).getFruit(nr,rand));
  }
 else   if (ModIntegration.LoadedMods.natura && getPlantDomain(seed).equalsIgnoreCase(""String_Node_Str"")) {
    LogHelper.debug(""String_Node_Str"");
    items.add(new ItemStack(NContent.plantItem,nr,meta * 3));
  }
 else   if (ModIntegration.LoadedMods.chococraft && seed instanceof ItemGysahlSeeds) {
    LogHelper.debug(""String_Node_Str"");
    items.add(ChococraftHelper.getFruit(gain,nr));
  }
 else {
    LogHelper.debug(""String_Node_Str"");
    addFruitsFromOreDict(items,seed,meta,rand,nr);
  }
  if (items.size() == 0) {
    LogHelper.debug(""String_Node_Str"");
    int harvestMeta=7;
    if (ModIntegration.LoadedMods.plantMegaPack && getPlantDomain(seed).equalsIgnoreCase(""String_Node_Str"")) {
      harvestMeta=PlantMegaPackHelper.getTextureIndex(seed,harvestMeta);
    }
    addFruitsFromPlant(items,plant,world,x,y,z,harvestMeta,nr);
  }
  return items;
}"
95646,"@Override public ISeedRequirements getSeedRequirements(ItemStack seed){
  if (SeedHelper.isValidSeedStack(seed)) {
    SeedRequirements result=new SeedRequirements();
    GrowthRequirement growthRequirement=GrowthRequirements.getGrowthRequirement((ItemSeeds)seed.getItem(),seed.getItemDamage());
    result.setNeedsCrops(ConfigurationHandler.disableVanillaFarming);
    if (growthRequirement.requiresSpecificSoil()) {
      if (growthRequirement.getSoil().getBlock() == net.minecraft.init.Blocks.farmland) {
        result.setSoilBlock(Lists.newArrayList((IBlockWithMeta)new BlockWithMeta(net.minecraft.init.Blocks.dirt)));
        result.setNeedsTilling(true);
      }
 else {
        result.setSoilBlock(Lists.newArrayList((IBlockWithMeta)growthRequirement.getSoil()));
        result.setNeedsTilling(false);
      }
    }
 else {
      result.setSoilBlock(new ArrayList<IBlockWithMeta>());
      result.setNeedsTilling(false);
      for (      BlockWithMeta elem : GrowthRequirements.defaultSoils) {
        if (elem.getBlock() == net.minecraft.init.Blocks.farmland) {
          result.getSoilBlock().add(new BlockWithMeta(net.minecraft.init.Blocks.dirt));
          result.setNeedsTilling(true);
        }
 else {
          result.getSoilBlock().add(elem);
        }
      }
    }
switch (growthRequirement.getRequiredType()) {
case BELOW:
      result.setBelowBlock(Lists.newArrayList((IBlockWithMeta)growthRequirement.getRequiredBlock()));
    result.setNearBlocks(null);
  break;
case NEARBY:
result.setBelowBlock(null);
result.setNearBlocks(Lists.newArrayList((IBlockWithMeta)growthRequirement.getRequiredBlock()));
break;
default :
result.setBelowBlock(null);
result.setNearBlocks(null);
break;
}
return result;
}
return null;
}","@Override public ISeedRequirements getSeedRequirements(ItemStack seed){
  if (CropPlantHandler.isValidSeed(seed)) {
    SeedRequirements result=new SeedRequirements();
    GrowthRequirement growthRequirement=GrowthRequirements.getGrowthRequirement((ItemSeeds)seed.getItem(),seed.getItemDamage());
    result.setNeedsCrops(ConfigurationHandler.disableVanillaFarming);
    if (growthRequirement.requiresSpecificSoil()) {
      if (growthRequirement.getSoil().getBlock() == net.minecraft.init.Blocks.farmland) {
        result.setSoilBlock(Lists.newArrayList((IBlockWithMeta)new BlockWithMeta(net.minecraft.init.Blocks.dirt)));
        result.setNeedsTilling(true);
      }
 else {
        result.setSoilBlock(Lists.newArrayList((IBlockWithMeta)growthRequirement.getSoil()));
        result.setNeedsTilling(false);
      }
    }
 else {
      result.setSoilBlock(new ArrayList<IBlockWithMeta>());
      result.setNeedsTilling(false);
      for (      BlockWithMeta elem : GrowthRequirements.defaultSoils) {
        if (elem.getBlock() == net.minecraft.init.Blocks.farmland) {
          result.getSoilBlock().add(new BlockWithMeta(net.minecraft.init.Blocks.dirt));
          result.setNeedsTilling(true);
        }
 else {
          result.getSoilBlock().add(elem);
        }
      }
    }
switch (growthRequirement.getRequiredType()) {
case BELOW:
      result.setBelowBlock(Lists.newArrayList((IBlockWithMeta)growthRequirement.getRequiredBlock()));
    result.setNearBlocks(null);
  break;
case NEARBY:
result.setBelowBlock(null);
result.setNearBlocks(Lists.newArrayList((IBlockWithMeta)growthRequirement.getRequiredBlock()));
break;
default :
result.setBelowBlock(null);
result.setNearBlocks(null);
break;
}
return result;
}
return null;
}"
95647,"@Override public boolean removeWeeds(World world,int x,int y,int z,ItemStack rake){
  if (!ConfigurationHandler.enableWeeds) {
    return false;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    if (!crop.weed) {
      return false;
    }
    int weedGrowthStage=world.getBlockMetadata(x,y,z);
    int toolMeta=rake.getItemDamage();
    while (!world.isRemote && weedGrowthStage > 0) {
      weedGrowthStage=(toolMeta == 1) ? 0 : Math.max(random.nextInt(weedGrowthStage / 2 + 1) - 1,0) + weedGrowthStage / 2;
      crop.updateWeed(weedGrowthStage);
    }
    return true;
  }
  return false;
}","@Override public boolean removeWeeds(World world,int x,int y,int z,ItemStack rake){
  if (!ConfigurationHandler.enableWeeds) {
    return false;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    if (!crop.hasWeed()) {
      return false;
    }
    int weedGrowthStage=world.getBlockMetadata(x,y,z);
    int toolMeta=rake.getItemDamage();
    while (!world.isRemote && weedGrowthStage > 0) {
      weedGrowthStage=(toolMeta == 1) ? 0 : Math.max(random.nextInt(weedGrowthStage / 2 + 1) - 1,0) + weedGrowthStage / 2;
      crop.updateWeed(weedGrowthStage);
    }
    return true;
  }
  return false;
}"
95648,"@Override public boolean applyFertilizer(World world,int x,int y,int z,ItemStack fertilizer){
  if (world.isRemote || !isValidFertilizer(world,x,y,z,fertilizer)) {
    return false;
  }
  TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
  if (fertilizer.getItem() == net.minecraft.init.Items.dye && fertilizer.getItemDamage() == 15) {
    Blocks.blockCrop.func_149853_b(world,random,x,y,z);
    fertilizer.stackSize--;
    world.playAuxSFX(2005,x,y,z,0);
    return true;
  }
 else   if (ModIntegration.LoadedMods.magicalCrops && ConfigurationHandler.integration_allowMagicFertiliser && fertilizer.getItem() == Item.itemRegistry.getObject(""String_Node_Str"")) {
    if (ConfigurationHandler.integration_instantMagicFertiliser) {
      world.setBlockMetadataWithNotify(x,y,z,7,2);
    }
 else {
      Blocks.blockCrop.func_149853_b(world,random,x,y,z);
    }
    fertilizer.stackSize--;
    world.playAuxSFX(2005,x,y,z,0);
    return true;
  }
  return false;
}","@Override public boolean applyFertilizer(World world,int x,int y,int z,ItemStack fertilizer){
  if (world.isRemote || !isValidFertilizer(world,x,y,z,fertilizer)) {
    return false;
  }
  if (fertilizer.getItem() == net.minecraft.init.Items.dye && fertilizer.getItemDamage() == 15) {
    Blocks.blockCrop.func_149853_b(world,random,x,y,z);
    fertilizer.stackSize--;
    world.playAuxSFX(2005,x,y,z,0);
    return true;
  }
 else   if (ModIntegration.LoadedMods.magicalCrops && ConfigurationHandler.integration_allowMagicFertiliser && fertilizer.getItem() == Item.itemRegistry.getObject(""String_Node_Str"")) {
    if (ConfigurationHandler.integration_instantMagicFertiliser) {
      world.setBlockMetadataWithNotify(x,y,z,7,2);
    }
 else {
      Blocks.blockCrop.func_149853_b(world,random,x,y,z);
    }
    fertilizer.stackSize--;
    world.playAuxSFX(2005,x,y,z,0);
    return true;
  }
  return false;
}"
95649,"@Override public boolean isHandledByAgricraft(ItemStack seed){
  return SeedHelper.isValidSeedStack(seed);
}","@Override public boolean isHandledByAgricraft(ItemStack seed){
  return CropPlantHandler.isValidSeed(seed);
}"
95650,"@Override public ItemStack removeCrossCrops(World world,int x,int y,int z){
  if (world.isRemote) {
    return null;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    if (crop.crossCrop) {
      crop.crossCrop=false;
      crop.markForUpdate();
      return new ItemStack(Items.crops,1);
    }
  }
  return null;
}","@Override public ItemStack removeCrossCrops(World world,int x,int y,int z){
  if (world.isRemote) {
    return null;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    if (crop.isCrossCrop()) {
      crop.setCrossCrop(false);
      crop.markForUpdate();
      return new ItemStack(Items.crops,1);
    }
  }
  return null;
}"
95651,"@Override public List<ItemStack> harvest(World world,int x,int y,int z){
  if (world.isRemote) {
    return null;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    if (crop.isMature()) {
      crop.getWorldObj().setBlockMetadataWithNotify(crop.xCoord,crop.yCoord,crop.zCoord,2,2);
      crop.markForUpdate();
      return SeedHelper.getPlantFruits(crop.seed,world,x,y,z,crop.gain,crop.seedMeta);
    }
  }
  return null;
}","@Override public List<ItemStack> harvest(World world,int x,int y,int z){
  if (world.isRemote) {
    return null;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    if (crop.isMature()) {
      crop.getWorldObj().setBlockMetadataWithNotify(crop.xCoord,crop.yCoord,crop.zCoord,2,2);
      crop.markForUpdate();
      return CropPlantHandler.getPlantFromStack(crop.getSeedStack()).getFruitsOnHarvest(crop.getGain(),world.rand);
    }
  }
  return null;
}"
95652,"@Override public boolean placeCrossCrops(World world,int x,int y,int z,ItemStack crops){
  if (world.isRemote) {
    return false;
  }
  if (crops == null || crops.getItem() == null || crops.getItem() != Items.crops || crops.stackSize < 1) {
    return false;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    if (!crop.weed && !crop.crossCrop && !crop.hasPlant()) {
      crop.crossCrop=true;
      crops.stackSize--;
      crop.markForUpdate();
      return true;
    }
  }
  return false;
}","@Override public boolean placeCrossCrops(World world,int x,int y,int z,ItemStack crops){
  if (world.isRemote) {
    return false;
  }
  if (crops == null || crops.getItem() == null || crops.getItem() != Items.crops || crops.stackSize < 1) {
    return false;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    if (!crop.hasWeed() && !crop.isCrossCrop() && !crop.hasPlant()) {
      crop.setCrossCrop(true);
      crops.stackSize--;
      crop.markForUpdate();
      return true;
    }
  }
  return false;
}"
95653,"@Override public boolean isCrossCrops(World world,int x,int y,int z){
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    return crop.crossCrop;
  }
  return false;
}","@Override public boolean isCrossCrops(World world,int x,int y,int z){
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    return crop.isCrossCrop();
  }
  return false;
}"
95654,"@Override public boolean applySeeds(World world,int x,int y,int z,ItemStack seed){
  if (!world.isRemote) {
    if (SeedHelper.isValidSeedStack(seed)) {
      TileEntity te=world.getTileEntity(x,y,z);
      if (te instanceof TileEntityCrop) {
        TileEntityCrop crop=(TileEntityCrop)te;
        if (crop.crossCrop || crop.hasPlant() || !GrowthRequirements.getGrowthRequirement((ItemSeeds)seed.getItem(),seed.getItemDamage()).canGrow(world,x,y,z)) {
          return false;
        }
        if (seed.stackTagCompound != null && seed.stackTagCompound.hasKey(Names.NBT.growth)) {
          crop.setPlant(seed.stackTagCompound.getInteger(Names.NBT.growth),seed.stackTagCompound.getInteger(Names.NBT.gain),seed.stackTagCompound.getInteger(Names.NBT.strength),seed.stackTagCompound.getBoolean(Names.NBT.analyzed),(ItemSeeds)seed.getItem(),seed.getItemDamage());
        }
 else {
          crop.setPlant(Constants.defaultGrowth,Constants.defaultGain,Constants.defaultStrength,false,(ItemSeeds)seed.getItem(),seed.getItemDamage());
        }
        crop.markForUpdate();
        seed.stackSize--;
        return true;
      }
    }
  }
  return false;
}","@Override public boolean applySeeds(World world,int x,int y,int z,ItemStack seed){
  if (!world.isRemote) {
    if (CropPlantHandler.isValidSeed(seed)) {
      TileEntity te=world.getTileEntity(x,y,z);
      if (te instanceof TileEntityCrop) {
        TileEntityCrop crop=(TileEntityCrop)te;
        if (crop.isCrossCrop() || crop.hasPlant() || !GrowthRequirements.getGrowthRequirement((ItemSeeds)seed.getItem(),seed.getItemDamage()).canGrow(world,x,y,z)) {
          return false;
        }
        if (seed.stackTagCompound != null && seed.stackTagCompound.hasKey(Names.NBT.growth)) {
          crop.setPlant(seed.stackTagCompound.getInteger(Names.NBT.growth),seed.stackTagCompound.getInteger(Names.NBT.gain),seed.stackTagCompound.getInteger(Names.NBT.strength),seed.stackTagCompound.getBoolean(Names.NBT.analyzed),(ItemSeeds)seed.getItem(),seed.getItemDamage());
        }
 else {
          crop.setPlant(Constants.defaultGrowth,Constants.defaultGain,Constants.defaultStrength,false,(ItemSeeds)seed.getItem(),seed.getItemDamage());
        }
        crop.markForUpdate();
        seed.stackSize--;
        return true;
      }
    }
  }
  return false;
}"
95655,"@Override public SeedRequirementStatus canApplySeeds(World world,int x,int y,int z,ItemStack seed){
  if (SeedHelper.isValidSeedStack(seed)) {
    TileEntity te=world.getTileEntity(x,y,z);
    if (te instanceof TileEntityCrop) {
      TileEntityCrop crop=(TileEntityCrop)te;
      if (crop.crossCrop || crop.hasPlant()) {
        return SeedRequirementStatus.BAD_LOCATION;
      }
      GrowthRequirement growthRequirement=GrowthRequirements.getGrowthRequirement((ItemSeeds)seed.getItem(),seed.getItemDamage());
      if (!growthRequirement.isValidSoil(world,x,y - 1,z)) {
        return SeedRequirementStatus.WRONG_SOIL;
      }
      if (!growthRequirement.isBaseBlockPresent(world,x,y,z)) {
        return SeedRequirementStatus.MISSING_REQUIREMENTS;
      }
      if (!growthRequirement.canGrow(world,x,y,z)) {
        return SeedRequirementStatus.MISSING_REQUIREMENTS;
      }
      return SeedRequirementStatus.CAN_APPLY;
    }
 else {
      return SeedRequirementStatus.BAD_LOCATION;
    }
  }
 else {
    return SeedRequirementStatus.BAD_SEED;
  }
}","@Override public SeedRequirementStatus canApplySeeds(World world,int x,int y,int z,ItemStack seed){
  if (CropPlantHandler.isValidSeed(seed)) {
    TileEntity te=world.getTileEntity(x,y,z);
    if (te instanceof TileEntityCrop) {
      TileEntityCrop crop=(TileEntityCrop)te;
      if (crop.isCrossCrop() || crop.hasPlant()) {
        return SeedRequirementStatus.BAD_LOCATION;
      }
      GrowthRequirement growthRequirement=GrowthRequirements.getGrowthRequirement((ItemSeeds)seed.getItem(),seed.getItemDamage());
      if (!growthRequirement.isValidSoil(world,x,y - 1,z)) {
        return SeedRequirementStatus.WRONG_SOIL;
      }
      if (!growthRequirement.isBaseBlockPresent(world,x,y,z)) {
        return SeedRequirementStatus.MISSING_REQUIREMENTS;
      }
      if (!growthRequirement.canGrow(world,x,y,z)) {
        return SeedRequirementStatus.MISSING_REQUIREMENTS;
      }
      return SeedRequirementStatus.CAN_APPLY;
    }
 else {
      return SeedRequirementStatus.BAD_LOCATION;
    }
  }
 else {
    return SeedRequirementStatus.BAD_SEED;
  }
}"
95656,"@Override public boolean isWeeds(World world,int x,int y,int z){
  if (!ConfigurationHandler.enableWeeds) {
    return false;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    return crop.weed;
  }
  return false;
}","@Override public boolean isWeeds(World world,int x,int y,int z){
  if (!ConfigurationHandler.enableWeeds) {
    return false;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    return crop.hasWeed();
  }
  return false;
}"
95657,"@Override public boolean isValidFertilizer(World world,int x,int y,int z,ItemStack fertilizer){
  if (fertilizer == null || fertilizer.getItem() == null) {
    return false;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    if (fertilizer.getItem() == net.minecraft.init.Items.dye && fertilizer.getItemDamage() == 15) {
      return (crop.crossCrop && ConfigurationHandler.bonemealMutation) || (crop.hasPlant() && !crop.isMature() && crop.isFertile()&& SeedHelper.getSeedTier(crop.seed,crop.seedMeta) < 4);
    }
 else     if (ModIntegration.LoadedMods.magicalCrops && ConfigurationHandler.integration_allowMagicFertiliser && fertilizer.getItem() == Item.itemRegistry.getObject(""String_Node_Str"")) {
      return crop.hasPlant() && !crop.isMature() && crop.isFertile();
    }
  }
  return false;
}","@Override public boolean isValidFertilizer(World world,int x,int y,int z,ItemStack fertilizer){
  if (fertilizer == null || fertilizer.getItem() == null) {
    return false;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    if (fertilizer.getItem() == net.minecraft.init.Items.dye && fertilizer.getItemDamage() == 15) {
      return (crop.isCrossCrop() && ConfigurationHandler.bonemealMutation) || (crop.hasPlant() && !crop.isMature() && crop.isFertile()&& CropPlantHandler.getPlantFromStack(crop.getSeedStack()).getTier() < 4);
    }
 else     if (ModIntegration.LoadedMods.magicalCrops && ConfigurationHandler.integration_allowMagicFertiliser && fertilizer.getItem() == Item.itemRegistry.getObject(""String_Node_Str"")) {
      return crop.hasPlant() && !crop.isMature() && crop.isFertile();
    }
  }
  return false;
}"
95658,"/** 
 * @return true, if the light level is between the allowed values 
 */
public boolean isBrightnessGood(int lvl){
  return lvl < this.maxBrightness && lvl >= this.minBrightness;
}","/** 
 * @return true, if the light level is between the allowed values 
 */
public boolean isBrightnessGood(World world,int x,int y,int z){
  int lvl=world.getBlock(x,y,z).getLightValue(world,x,y,z);
  return lvl < this.maxBrightness && lvl >= this.minBrightness;
}"
95659,"/** 
 * @return true, if all the requirements are met 
 */
public boolean canGrow(World world,int x,int y,int z){
  return this.isValidSoil(world,x,y - 1,z) && this.isBrightnessGood(world.getBlockLightValue(x,y,z)) && this.isBaseBlockPresent(world,x,y,z);
}","/** 
 * @return true, if all the requirements are met 
 */
public boolean canGrow(World world,int x,int y,int z){
  return this.isValidSoil(world,x,y - 1,z) && this.isBrightnessGood(world,x,y,z) && this.isBaseBlockPresent(world,x,y,z);
}"
95660,"public static void init(){
  GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.crops,ConfigurationHandler.cropsPerCraft),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  if (ConfigurationHandler.cropsPerCraft == 3) {
    GameRegistry.addShapelessRecipe(new ItemStack(net.minecraft.init.Items.stick,6 / ConfigurationHandler.cropsPerCraft),new ItemStack(Items.crops),new ItemStack(Items.crops));
  }
 else {
    GameRegistry.addShapelessRecipe(new ItemStack(net.minecraft.init.Items.stick,4 / ConfigurationHandler.cropsPerCraft),new ItemStack(Items.crops));
  }
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Blocks.seedAnalyzer,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str"",'g',""String_Node_Str"",'b',net.minecraft.init.Blocks.stone_slab,'p',""String_Node_Str"",'w',""String_Node_Str""));
  GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedPotato),new ItemStack(net.minecraft.init.Items.potato));
  GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedCarrot),new ItemStack(net.minecraft.init.Items.carrot));
  if (ModIntegration.LoadedMods.exNihilo) {
    GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedPotato),new ItemStack(ExNihiloHelper.seedPotato));
    GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedCarrot),new ItemStack(ExNihiloHelper.seedCarrot));
    GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedSugarcane),new ItemStack(ExNihiloHelper.seedSugarCane));
    GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedCactus),new ItemStack(ExNihiloHelper.seedCactus));
  }
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.journal,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'c',Items.crops,'s',Names.OreDict.listAllseed,'b',net.minecraft.init.Items.writable_book));
  GameRegistry.addRecipe(new RecipeJournal());
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.trowel,1,0),""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str"",'i',""String_Node_Str""));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.magnifyingGlass,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str"",'g',""String_Node_Str""));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.handRake,1,0),""String_Node_Str"",'f',net.minecraft.init.Blocks.fence,'s',""String_Node_Str""));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.handRake,1,1),""String_Node_Str"",'f',net.minecraft.init.Blocks.iron_bars,'s',""String_Node_Str""));
  if (!ConfigurationHandler.disableIrrigation) {
    ((ItemBlockCustomWood)Item.getItemFromBlock(Blocks.blockWaterTank)).getSubItems(woodList);
    registerCustomWoodRecipes();
    RegisterHelper.removeRecipe(new ItemStack(net.minecraft.init.Items.bowl));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.bowl,4),""String_Node_Str"",""String_Node_Str"",'w',Names.OreDict.slabWood));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.sprinkler,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'w',""String_Node_Str"",'i',""String_Node_Str"",'b',net.minecraft.init.Blocks.iron_bars,'c',net.minecraft.init.Items.bucket));
  }
  if (ConfigurationHandler.resourcePlants) {
    if (Items.nuggetDiamond instanceof ModItem) {
      GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.diamond,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
      GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetDiamond,9),""String_Node_Str""));
    }
    if (Items.nuggetEmerald instanceof ModItem) {
      GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.emerald,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
      GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetEmerald,9),""String_Node_Str""));
    }
    if (Items.nuggetIron instanceof ModItem) {
      GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.iron_ingot,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
      GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetIron,9),""String_Node_Str""));
    }
    if (Items.nuggetCopper instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetCopper);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetCopper,9),Names.Ingots.ingotCopper));
      }
    }
    if (Items.nuggetTin instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetTin);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetTin,9),Names.Ingots.ingotTin));
      }
    }
    if (Items.nuggetLead instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetLead);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetLead,9),Names.Ingots.ingotLead));
      }
    }
    if (Items.nuggetSilver instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetSilver);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetSilver,9),Names.Ingots.ingotSilver));
      }
    }
    if (Items.nuggetAluminum instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetAluminum);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetAluminum,9),Names.Ingots.ingotAluminum));
      }
    }
    if (Items.nuggetNickel instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetNickel);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetNickel,9),Names.Ingots.ingotNickel));
      }
    }
    if (Items.nuggetPlatinum instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetPlatinum);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetPlatinum,9),Names.Ingots.ingotPlatinum));
      }
    }
    if (Items.nuggetOsmium instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetOsmium);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetOsmium,9),Names.Ingots.ingotOsmium));
      }
    }
  }
  LogHelper.debug(""String_Node_Str"");
}","public static void init(){
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.crops,ConfigurationHandler.cropsPerCraft),""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str""));
  if (ConfigurationHandler.cropsPerCraft == 3) {
    GameRegistry.addShapelessRecipe(new ItemStack(net.minecraft.init.Items.stick,6 / ConfigurationHandler.cropsPerCraft),new ItemStack(Items.crops),new ItemStack(Items.crops));
  }
 else {
    GameRegistry.addShapelessRecipe(new ItemStack(net.minecraft.init.Items.stick,4 / ConfigurationHandler.cropsPerCraft),new ItemStack(Items.crops));
  }
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Blocks.seedAnalyzer,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str"",'g',""String_Node_Str"",'b',net.minecraft.init.Blocks.stone_slab,'p',""String_Node_Str"",'w',""String_Node_Str""));
  GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedPotato),new ItemStack(net.minecraft.init.Items.potato));
  GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedCarrot),new ItemStack(net.minecraft.init.Items.carrot));
  if (ModIntegration.LoadedMods.exNihilo) {
    GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedPotato),new ItemStack(ExNihiloHelper.seedPotato));
    GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedCarrot),new ItemStack(ExNihiloHelper.seedCarrot));
    GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedSugarcane),new ItemStack(ExNihiloHelper.seedSugarCane));
    GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedCactus),new ItemStack(ExNihiloHelper.seedCactus));
  }
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.journal,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'c',Items.crops,'s',Names.OreDict.listAllseed,'b',net.minecraft.init.Items.writable_book));
  GameRegistry.addRecipe(new RecipeJournal());
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.trowel,1,0),""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str"",'i',""String_Node_Str""));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.magnifyingGlass,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str"",'g',""String_Node_Str""));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.handRake,1,0),""String_Node_Str"",'f',net.minecraft.init.Blocks.fence,'s',""String_Node_Str""));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.handRake,1,1),""String_Node_Str"",'f',net.minecraft.init.Blocks.iron_bars,'s',""String_Node_Str""));
  if (!ConfigurationHandler.disableIrrigation) {
    ((ItemBlockCustomWood)Item.getItemFromBlock(Blocks.blockWaterTank)).getSubItems(woodList);
    registerCustomWoodRecipes();
    RegisterHelper.removeRecipe(new ItemStack(net.minecraft.init.Items.bowl));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.bowl,4),""String_Node_Str"",""String_Node_Str"",'w',Names.OreDict.slabWood));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.sprinkler,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'w',""String_Node_Str"",'i',""String_Node_Str"",'b',net.minecraft.init.Blocks.iron_bars,'c',net.minecraft.init.Items.bucket));
  }
  if (ConfigurationHandler.resourcePlants) {
    if (Items.nuggetDiamond instanceof ModItem) {
      GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.diamond,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
      GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetDiamond,9),""String_Node_Str""));
    }
    if (Items.nuggetEmerald instanceof ModItem) {
      GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.emerald,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
      GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetEmerald,9),""String_Node_Str""));
    }
    if (Items.nuggetIron instanceof ModItem) {
      GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.iron_ingot,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
      GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetIron,9),""String_Node_Str""));
    }
    if (Items.nuggetCopper instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetCopper);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetCopper,9),Names.Ingots.ingotCopper));
      }
    }
    if (Items.nuggetTin instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetTin);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetTin,9),Names.Ingots.ingotTin));
      }
    }
    if (Items.nuggetLead instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetLead);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetLead,9),Names.Ingots.ingotLead));
      }
    }
    if (Items.nuggetSilver instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetSilver);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetSilver,9),Names.Ingots.ingotSilver));
      }
    }
    if (Items.nuggetAluminum instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetAluminum);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetAluminum,9),Names.Ingots.ingotAluminum));
      }
    }
    if (Items.nuggetNickel instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetNickel);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetNickel,9),Names.Ingots.ingotNickel));
      }
    }
    if (Items.nuggetPlatinum instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetPlatinum);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetPlatinum,9),Names.Ingots.ingotPlatinum));
      }
    }
    if (Items.nuggetOsmium instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetOsmium);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetOsmium,9),Names.Ingots.ingotOsmium));
      }
    }
  }
  LogHelper.debug(""String_Node_Str"");
}"
95661,"@SideOnly(Side.CLIENT) private void renderLiquidSpray(){
  this.angle=(this.angle + 5F) % 360;
  for (int i=0; i < 4; i++) {
    float alpha=(this.angle + 90 * i) * ((float)Math.PI) / 180;
    double xOffset=(4 * Constants.unit) * Math.cos(alpha);
    double zOffset=(4 * Constants.unit) * Math.sin(alpha);
    float radius=0.3F;
    for (int j=0; j <= 4; j++) {
      float beta=-j * ((float)Math.PI) / (8.0F);
      Vec3 vector=Vec3.createVectorHelper(radius * Math.cos(alpha),radius * Math.sin(beta),radius * Math.sin(alpha));
      this.spawnLiquidSpray(xOffset * (4 - j) / 4,zOffset * (4 - j) / 4,vector);
    }
  }
}","@SideOnly(Side.CLIENT) private void renderLiquidSpray(){
  this.angle=(this.angle + 5F) % 360;
  int particleSetting=Minecraft.getMinecraft().gameSettings.particleSetting;
  counter=(counter + 1) % (particleSetting + 1);
  if (counter == 0) {
    for (int i=0; i < 4; i++) {
      float alpha=(this.angle + 90 * i) * ((float)Math.PI) / 180;
      double xOffset=(4 * Constants.unit) * Math.cos(alpha);
      double zOffset=(4 * Constants.unit) * Math.sin(alpha);
      float radius=0.3F;
      for (int j=0; j <= 4; j++) {
        float beta=-j * ((float)Math.PI) / (8.0F);
        Vec3 vector=Vec3.createVectorHelper(radius * Math.cos(alpha),radius * Math.sin(beta),radius * Math.sin(alpha));
        this.spawnLiquidSpray(xOffset * (4 - j) / 4,zOffset * (4 - j) / 4,vector);
      }
    }
  }
}"
95662,"public static ArrayList<ItemStack> getPlantFruits(ItemSeeds seed,World world,int x,int y,int z,int gain,int meta){
  int nr=(int)(Math.ceil((gain + 0.00) / 3));
  Block plant=getPlant(seed);
  ArrayList<ItemStack> items=new ArrayList<ItemStack>();
  if (plant == Blocks.nether_wart) {
    LogHelper.debug(""String_Node_Str"");
    items.add(new ItemStack(seed,nr,0));
  }
 else   if (plant instanceof BlockModPlant) {
    LogHelper.debug(""String_Node_Str"");
    items.addAll(((BlockModPlant)plant).getFruit(nr,world.rand));
  }
 else   if (ModIntegration.LoadedMods.natura && getPlantDomain(seed).equalsIgnoreCase(""String_Node_Str"")) {
    LogHelper.debug(""String_Node_Str"");
    items.add(new ItemStack(NContent.plantItem,nr,meta * 3));
  }
 else   if (ModIntegration.LoadedMods.chococraft && seed instanceof ItemGysahlSeeds) {
    LogHelper.debug(""String_Node_Str"");
    items.add(ChococraftHelper.getFruit(gain,nr));
  }
 else   if (ModIntegration.LoadedMods.psychedelicraft && plant instanceof IvTilledFieldPlant) {
    LogHelper.debug(""String_Node_Str"");
  }
 else {
    LogHelper.debug(""String_Node_Str"");
    addFruitsFromOreDict(items,seed,meta,world.rand,nr);
  }
  if (items.size() == 0) {
    LogHelper.debug(""String_Node_Str"");
    int harvestMeta=7;
    if (ModIntegration.LoadedMods.plantMegaPack && getPlantDomain(seed).equalsIgnoreCase(""String_Node_Str"")) {
      harvestMeta=PlantMegaPackHelper.getTextureIndex(seed,harvestMeta);
    }
    addFruitsFromPlant(items,plant,world,x,y,z,harvestMeta,nr);
  }
  return items;
}","public static ArrayList<ItemStack> getPlantFruits(ItemSeeds seed,World world,int x,int y,int z,int gain,int meta){
  int nr=(int)(Math.ceil((gain + 0.00) / 3));
  Block plant=getPlant(seed);
  ArrayList<ItemStack> items=new ArrayList<ItemStack>();
  if (plant == Blocks.nether_wart) {
    LogHelper.debug(""String_Node_Str"");
    items.add(new ItemStack(seed,nr,0));
  }
 else   if (plant instanceof BlockModPlant) {
    LogHelper.debug(""String_Node_Str"");
    items.addAll(((BlockModPlant)plant).getFruit(nr,world.rand));
  }
 else   if (ModIntegration.LoadedMods.natura && getPlantDomain(seed).equalsIgnoreCase(""String_Node_Str"")) {
    LogHelper.debug(""String_Node_Str"");
    items.add(new ItemStack(NContent.plantItem,nr,meta * 3));
  }
 else   if (ModIntegration.LoadedMods.chococraft && seed instanceof ItemGysahlSeeds) {
    LogHelper.debug(""String_Node_Str"");
    items.add(ChococraftHelper.getFruit(gain,nr));
  }
 else {
    LogHelper.debug(""String_Node_Str"");
    addFruitsFromOreDict(items,seed,meta,world.rand,nr);
  }
  if (items.size() == 0) {
    LogHelper.debug(""String_Node_Str"");
    int harvestMeta=7;
    if (ModIntegration.LoadedMods.plantMegaPack && getPlantDomain(seed).equalsIgnoreCase(""String_Node_Str"")) {
      harvestMeta=PlantMegaPackHelper.getTextureIndex(seed,harvestMeta);
    }
    addFruitsFromPlant(items,plant,world,x,y,z,harvestMeta,nr);
  }
  return items;
}"
95663,"public static void init(){
  try {
    MapGenStructureIO.func_143031_a(StructureGreenhouse.class,Reference.MOD_ID + ""String_Node_Str"");
  }
 catch (  Exception exception) {
    LogHelper.info(""String_Node_Str"");
  }
  VillagerRegistry.instance().registerVillageCreationHandler(new VillageCreationHandler.GreenhouseHandler());
  if (!ConfigurationHandler.disableIrrigation) {
    try {
      MapGenStructureIO.func_143031_a(StructureGreenhouseIrrigated.class,Reference.MOD_ID + ""String_Node_Str"");
    }
 catch (    Exception exception) {
      LogHelper.info(""String_Node_Str"");
    }
    VillagerRegistry.instance().registerVillageCreationHandler(new VillageCreationHandler.GreenhouseIrrigatedHandler());
  }
  if (ConfigurationHandler.villagerEnabled) {
    VillagerRegistry.instance().registerVillagerId(ConfigurationHandler.villagerID);
    VillagerRegistry.instance().registerVillageTradeHandler(ConfigurationHandler.villagerID,new VillagerTradeHandler());
  }
}","public static void init(){
  if (ConfigurationHandler.villagerEnabled) {
    VillagerRegistry.instance().registerVillagerId(ConfigurationHandler.villagerID);
    VillagerRegistry.instance().registerVillageTradeHandler(ConfigurationHandler.villagerID,new VillagerTradeHandler());
  }
  VillagerRegistry.instance().registerVillageCreationHandler(new VillageCreationHandler.GreenhouseHandler());
  try {
    MapGenStructureIO.func_143031_a(StructureGreenhouse.class,Reference.MOD_ID + ""String_Node_Str"");
  }
 catch (  Exception exception) {
    LogHelper.info(""String_Node_Str"");
  }
  VillagerRegistry.instance().registerVillageCreationHandler(new VillageCreationHandler.GreenhouseIrrigatedHandler());
  if (!ConfigurationHandler.disableIrrigation) {
    try {
      MapGenStructureIO.func_143031_a(StructureGreenhouseIrrigated.class,Reference.MOD_ID + ""String_Node_Str"");
    }
 catch (    Exception exception) {
      LogHelper.info(""String_Node_Str"");
    }
  }
}"
95664,"public static ArrayList<ItemStack> getAllPlantFruits(ItemSeeds seed,World world,int x,int y,int z,int gain,int meta){
  Block plant=getPlant(seed);
  ArrayList<ItemStack> items=new ArrayList<ItemStack>();
  if (plant instanceof BlockModPlant) {
    items.addAll(((BlockModPlant)plant).getFruits());
  }
 else   if (ModIntegration.LoadedMods.chococraft && seed instanceof ItemGysahlSeeds) {
    items.addAll(ChococraftHelper.getFruits());
  }
 else {
    items=(ArrayList<ItemStack>)getFruitsFromOreDict(seed,meta);
  }
  if (items.size() == 0) {
    items=getPlantFruits(seed,world,x,y,z,gain,meta);
  }
  return items;
}","public static ArrayList<ItemStack> getAllPlantFruits(ItemSeeds seed,World world,int x,int y,int z,int gain,int meta){
  Block plant=getPlant(seed);
  ArrayList<ItemStack> items=new ArrayList<ItemStack>();
  if (plant instanceof BlockModPlant) {
    items.addAll(((BlockModPlant)plant).getFruits());
  }
 else   if (ModIntegration.LoadedMods.chococraft && seed instanceof ItemGysahlSeeds) {
    items.addAll(ChococraftHelper.getFruits());
  }
 else {
    items=(ArrayList<ItemStack>)getFruitsFromOreDict(seed,meta);
  }
  if (items == null || items.size() == 0) {
    items=getPlantFruits(seed,world,x,y,z,gain,meta);
  }
  return items;
}"
95665,"public BlockModPlant(Block soil,Block base,int baseMeta,Item fruit,int fruitMeta,int tier,int renderType,boolean isCustom){
  super();
  GrowthRequirement.Builder builder=new GrowthRequirement.Builder();
  if (base != null)   builder.requiredBlock(new BlockWithMeta(base,baseMeta),GrowthRequirement.RequirementType.BELOW,true);
  if (soil == null || soil == Blocks.farmland) {
    growthRequirement=builder.build();
  }
 else {
    growthRequirement=builder.soil(new BlockWithMeta(soil)).build();
  }
  this.products.addProduce(new ItemStack(fruit,1,fruitMeta));
  this.tier=tier;
  this.setTickRandomly(true);
  this.useNeighborBrightness=true;
  this.renderType=renderType == 1 ? renderType : 6;
  this.isEditable=isCustom;
}","public BlockModPlant(Block soil,Block base,int baseMeta,Item fruit,int fruitMeta,int tier,int renderType,boolean isCustom){
  super();
  GrowthRequirement.Builder builder=new GrowthRequirement.Builder();
  if (base != null) {
    builder.requiredBlock(new BlockWithMeta(base,baseMeta),GrowthRequirement.RequirementType.BELOW,true);
  }
  if (soil == null || soil == Blocks.farmland) {
    growthRequirement=builder.build();
  }
 else {
    growthRequirement=builder.soil(new BlockWithMeta(soil)).build();
  }
  this.products.addProduce(new ItemStack(fruit,1,fruitMeta));
  this.tier=tier;
  this.setTickRandomly(true);
  this.useNeighborBrightness=true;
  this.renderType=renderType == 1 ? renderType : 6;
  this.isEditable=isCustom;
}"
95666,"@Override public void postHarvest(World world,int x,int y,int z){
  world.setBlockMetadataWithNotify(x,y,z,2,3);
  ((TileEntityCrop)world.getTileEntity(x,y,z)).markForUpdate();
}","@Override public void postHarvest(World world,int x,int y,int z){
  Block block=world.getBlock(x,y,z);
  if (block == null || !(block instanceof BlockCrop)) {
    return;
  }
  TileEntity te=world.getTileEntity(x,y,z);
  if (te == null || !(te instanceof TileEntityCrop)) {
    return;
  }
  world.setBlockMetadataWithNotify(x,y,z,2,3);
  ((TileEntityCrop)te).markForUpdate();
}"
95667,"@Override public List<ItemStack> getDrops(World world,Random rand,Map<String,Boolean> harvesterSettings,int x,int y,int z){
  ArrayList<ItemStack> items=new ArrayList<ItemStack>();
  if (world.getTileEntity(x,y,z) != null && world.getTileEntity(x,y,z) instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
    if (crop.hasPlant() && crop.isMature()) {
      items.addAll(SeedHelper.getPlantFruits((ItemSeeds)crop.seed,crop.getWorldObj(),crop.xCoord,crop.yCoord,crop.zCoord,crop.gain,crop.seedMeta));
    }
  }
  return items;
}","@Override public List<ItemStack> getDrops(World world,Random rand,Map<String,Boolean> harvesterSettings,int x,int y,int z){
  ArrayList<ItemStack> items=new ArrayList<ItemStack>();
  if (world.getTileEntity(x,y,z) != null && world.getTileEntity(x,y,z) instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
    if (crop.hasPlant() && crop.isMature()) {
      items.addAll(SeedHelper.getPlantFruits(crop.seed,crop.getWorldObj(),crop.xCoord,crop.yCoord,crop.zCoord,crop.gain,crop.seedMeta));
    }
  }
  return items;
}"
95668,"/** 
 * Sets the required soil 
 */
public Builder soil(BlockWithMeta block){
  GrowthRequirements.soils.add(block);
  growthRequirement.soil=block;
  return this;
}","/** 
 * Sets the required soil 
 */
public Builder soil(BlockWithMeta block){
  GrowthRequirements.addSoil(block);
  growthRequirement.soil=block;
  return this;
}"
95669,"public void setSoil(BlockWithMeta soil){
  this.soil=soil;
  GrowthRequirements.soils.add(soil);
}","public void setSoil(BlockWithMeta soil){
  this.soil=soil;
  GrowthRequirements.addSoil(soil);
}"
95670,"public static void addAllToSoilWhitelist(Collection<? extends BlockWithMeta> list){
  defaultSoils.addAll(list);
}","public static void addAllToSoilWhitelist(Collection<? extends BlockWithMeta> list){
  for (  BlockWithMeta block : list) {
    addDefaultSoil(block);
  }
}"
95671,"public static void initSoils(){
  defaultSoils.add(new BlockWithMeta(Blocks.farmland,7));
  if (ModIntegration.LoadedMods.forestry) {
    defaultSoils.add(new BlockWithMeta((Block)Block.blockRegistry.getObject(""String_Node_Str""),0));
  }
  if (ModIntegration.LoadedMods.gardenStuff) {
    defaultSoils.add(new BlockWithMeta((Block)Block.blockRegistry.getObject(""String_Node_Str""),0));
  }
  String[] data=IOHelper.getLinesArrayFromData(ConfigurationHandler.readSoils());
  for (  String line : data) {
    LogHelper.debug(""String_Node_Str"" + line);
    ItemStack stack=IOHelper.getStack(line);
    Block block=(stack != null && stack.getItem() instanceof ItemBlock) ? ((ItemBlock)stack.getItem()).field_150939_a : null;
    boolean success=block != null;
    String errorMsg=""String_Node_Str"";
    if (success) {
      soils.add(new BlockWithMeta(block,stack.getItemDamage()));
    }
 else {
      LogHelper.info(""String_Node_Str"" + errorMsg + ""String_Node_Str""+ line+ ""String_Node_Str"");
    }
  }
  LogHelper.info(""String_Node_Str"");
  for (  BlockWithMeta soil : soils) {
    LogHelper.info(""String_Node_Str"" + Block.blockRegistry.getNameForObject(soil.getBlock()) + ""String_Node_Str""+ soil.getMeta());
  }
}","public static void initSoils(){
  addDefaultSoil(new BlockWithMeta(Blocks.farmland));
  if (ModIntegration.LoadedMods.forestry) {
    addDefaultSoil(new BlockWithMeta((Block)Block.blockRegistry.getObject(""String_Node_Str""),0));
  }
  if (ModIntegration.LoadedMods.gardenStuff) {
    addDefaultSoil(new BlockWithMeta((Block)Block.blockRegistry.getObject(""String_Node_Str""),0));
  }
  String[] data=IOHelper.getLinesArrayFromData(ConfigurationHandler.readSoils());
  for (  String line : data) {
    LogHelper.debug(""String_Node_Str"" + line);
    ItemStack stack=IOHelper.getStack(line);
    Block block=(stack != null && stack.getItem() instanceof ItemBlock) ? ((ItemBlock)stack.getItem()).field_150939_a : null;
    boolean success=block != null;
    String errorMsg=""String_Node_Str"";
    if (success) {
      addDefaultSoil(new BlockWithMeta(block,stack.getItemDamage()));
    }
 else {
      LogHelper.info(""String_Node_Str"" + errorMsg + ""String_Node_Str""+ line+ ""String_Node_Str"");
    }
  }
  LogHelper.info(""String_Node_Str"");
  for (  BlockWithMeta soil : soils) {
    LogHelper.info(""String_Node_Str"" + Block.blockRegistry.getNameForObject(soil.getBlock()) + ""String_Node_Str""+ soil.getMeta());
  }
}"
95672,"public BlockWithMeta(Block block,int meta){
  this.block=block;
  this.meta=meta;
}","public BlockWithMeta(Block block,int meta,boolean fuzzy){
  this.block=block;
  this.meta=meta;
  this.ignoreMeta=fuzzy;
}"
95673,"@Override public boolean equals(Object obj){
  if (obj == null)   return false;
  if (obj instanceof BlockWithMeta) {
    BlockWithMeta block=(BlockWithMeta)obj;
    return block.block == this.block && block.meta == this.meta;
  }
  return false;
}","@Override public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
  if (obj instanceof BlockWithMeta) {
    BlockWithMeta block=(BlockWithMeta)obj;
    if (this.ignoreMeta || block.ignoreMeta) {
      return block.block == this.block;
    }
 else {
      return block.block == this.block && block.meta == this.meta;
    }
  }
  return false;
}"
95674,"public static void init(){
  nei=Loader.isModLoaded(Names.Mods.nei);
  harvestcraft=Loader.isModLoaded(Names.Mods.harvestcraft);
  natura=Loader.isModLoaded(Names.Mods.natura);
  weeeFlowers=Loader.isModLoaded(Names.Mods.weeeFlowers);
  forestry=Loader.isModLoaded(Names.Mods.forestry);
  thaumicTinkerer=Loader.isModLoaded(Names.Mods.thaumicTinkerer);
  hungerOverhaul=Loader.isModLoaded(Names.Mods.hungerOverhaul);
  exNihilo=Loader.isModLoaded(Names.Mods.exNihilo);
  plantMegaPack=Loader.isModLoaded(Names.Mods.plantMegaPack);
  magicalCrops=Loader.isModLoaded(Names.Mods.magicalCrops);
  railcraft=Loader.isModLoaded(Names.Mods.railcraft);
  thaumcraft=Loader.isModLoaded(Names.Mods.thaumcraft);
  mfr=Loader.isModLoaded(Names.Mods.mfr);
  waila=Loader.isModLoaded(Names.Mods.waila);
  chococraft=Loader.isModLoaded(Names.Mods.chococraft);
  mcMultipart=Loader.isModLoaded(Names.Mods.mcMultipart);
  minetweaker=Loader.isModLoaded(Names.Mods.minetweaker);
  extraUtilities=Loader.isModLoaded(Names.Mods.extraUtilities);
  botania=Loader.isModLoaded(Names.Mods.botania);
  tconstruct=Loader.isModLoaded(Names.Mods.tconstruct);
  gardenStuff=Loader.isModLoaded(Names.Mods.gardenStuff);
  LogHelper.info(""String_Node_Str"");
  LogHelper.info(""String_Node_Str"" + nei);
  LogHelper.info(""String_Node_Str"" + harvestcraft);
  LogHelper.info(""String_Node_Str"" + natura);
  LogHelper.info(""String_Node_Str"" + weeeFlowers);
  LogHelper.info(""String_Node_Str"" + forestry);
  LogHelper.info(""String_Node_Str"" + thaumicTinkerer);
  LogHelper.info(""String_Node_Str"" + hungerOverhaul);
  LogHelper.info(""String_Node_Str"" + exNihilo);
  LogHelper.info(""String_Node_Str"" + plantMegaPack);
  LogHelper.info(""String_Node_Str"" + magicalCrops);
  LogHelper.info(""String_Node_Str"" + railcraft);
  LogHelper.info(""String_Node_Str"" + thaumcraft);
  LogHelper.info(""String_Node_Str"" + mfr);
  LogHelper.info(""String_Node_Str"" + waila);
  LogHelper.info(""String_Node_Str"" + chococraft);
  LogHelper.info(""String_Node_Str"" + mcMultipart);
  LogHelper.info(""String_Node_Str"" + minetweaker);
  LogHelper.info(""String_Node_Str"" + extraUtilities);
  LogHelper.info(""String_Node_Str"" + botania);
  LogHelper.info(""String_Node_Str"" + tconstruct);
  LogHelper.info(""String_Node_Str"" + gardenStuff);
  LogHelper.info(""String_Node_Str"");
}","public static void init(){
  nei=Loader.isModLoaded(Names.Mods.nei);
  harvestcraft=Loader.isModLoaded(Names.Mods.harvestcraft);
  natura=Loader.isModLoaded(Names.Mods.natura);
  weeeFlowers=Loader.isModLoaded(Names.Mods.weeeFlowers);
  forestry=Loader.isModLoaded(Names.Mods.forestry);
  thaumicTinkerer=Loader.isModLoaded(Names.Mods.thaumicTinkerer);
  hungerOverhaul=Loader.isModLoaded(Names.Mods.hungerOverhaul);
  exNihilo=Loader.isModLoaded(Names.Mods.exNihilo);
  plantMegaPack=Loader.isModLoaded(Names.Mods.plantMegaPack);
  magicalCrops=Loader.isModLoaded(Names.Mods.magicalCrops);
  railcraft=Loader.isModLoaded(Names.Mods.railcraft);
  thaumcraft=Loader.isModLoaded(Names.Mods.thaumcraft);
  mfr=Loader.isModLoaded(Names.Mods.mfr);
  waila=Loader.isModLoaded(Names.Mods.waila);
  chococraft=Loader.isModLoaded(Names.Mods.chococraft);
  mcMultipart=Loader.isModLoaded(Names.Mods.mcMultipart);
  minetweaker=Loader.isModLoaded(Names.Mods.minetweaker);
  extraUtilities=Loader.isModLoaded(Names.Mods.extraUtilities);
  botania=Loader.isModLoaded(Names.Mods.botania);
  tconstruct=Loader.isModLoaded(Names.Mods.tconstruct);
  gardenStuff=Loader.isModLoaded(Names.Mods.gardenStuff);
  psychedelicraft=Loader.isModLoaded(Names.Mods.psychedelicraft);
  LogHelper.info(""String_Node_Str"");
  LogHelper.info(""String_Node_Str"" + nei);
  LogHelper.info(""String_Node_Str"" + harvestcraft);
  LogHelper.info(""String_Node_Str"" + natura);
  LogHelper.info(""String_Node_Str"" + weeeFlowers);
  LogHelper.info(""String_Node_Str"" + forestry);
  LogHelper.info(""String_Node_Str"" + thaumicTinkerer);
  LogHelper.info(""String_Node_Str"" + hungerOverhaul);
  LogHelper.info(""String_Node_Str"" + exNihilo);
  LogHelper.info(""String_Node_Str"" + plantMegaPack);
  LogHelper.info(""String_Node_Str"" + magicalCrops);
  LogHelper.info(""String_Node_Str"" + railcraft);
  LogHelper.info(""String_Node_Str"" + thaumcraft);
  LogHelper.info(""String_Node_Str"" + mfr);
  LogHelper.info(""String_Node_Str"" + waila);
  LogHelper.info(""String_Node_Str"" + chococraft);
  LogHelper.info(""String_Node_Str"" + mcMultipart);
  LogHelper.info(""String_Node_Str"" + minetweaker);
  LogHelper.info(""String_Node_Str"" + extraUtilities);
  LogHelper.info(""String_Node_Str"" + botania);
  LogHelper.info(""String_Node_Str"" + tconstruct);
  LogHelper.info(""String_Node_Str"" + gardenStuff);
  LogHelper.info(""String_Node_Str"" + psychedelicraft);
  LogHelper.info(""String_Node_Str"");
}"
95675,"private static void loadConfiguration(){
  resourcePlants=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,false,""String_Node_Str"");
  mutationChance=(double)config.getFloat(""String_Node_Str"",CATEGORY_AGRICRAFT,(float)Constants.defaultMutationChance,0,1,""String_Node_Str"");
  singleSpreadsIncrement=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,false,""String_Node_Str"");
  spreadingDifficulty=config.getInt(""String_Node_Str"",CATEGORY_AGRICRAFT,3,1,3,""String_Node_Str"");
  cropsPerCraft=config.getInt(""String_Node_Str"",CATEGORY_AGRICRAFT,1,1,4,""String_Node_Str"");
  cropStatCap=config.getInt(""String_Node_Str"",CATEGORY_AGRICRAFT,10,1,10,""String_Node_Str"");
  cropStatDivisor=config.getInt(""String_Node_Str"",CATEGORY_AGRICRAFT,2,1,3,""String_Node_Str"");
  enableWeeds=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,true,""String_Node_Str"");
  weedsWipePlants=enableWeeds && config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,true,""String_Node_Str"");
  enableHandRake=enableWeeds && config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,true,""String_Node_Str"");
  bonemealMutation=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,false,""String_Node_Str"");
  disableVanillaFarming=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,false,""String_Node_Str"");
  disableWorldGen=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,false,""String_Node_Str"");
  enableNEI=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,true,""String_Node_Str"");
  propGenerateDefaults=config.get(CATEGORY_AGRICRAFT,""String_Node_Str"",false,""String_Node_Str"");
  generateDefaults=propGenerateDefaults.getBoolean();
  customCrops=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,false,""String_Node_Str"");
  wipeTallGrassDrops=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,false,""String_Node_Str"");
  renderBookInAnalyzer=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,true,""String_Node_Str"");
  cactusGivesCactus=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,false,""String_Node_Str"");
  disableSeedStorage=config.getBoolean(""String_Node_Str"",CATEGORY_STORAGE,false,""String_Node_Str"");
  disableSeedWarehouse=config.getBoolean(""String_Node_Str"",CATEGORY_STORAGE,false,""String_Node_Str"");
  disableIrrigation=config.getBoolean(""String_Node_Str"",CATEGORY_IRRIGATION,false,""String_Node_Str"");
  sprinklerRatePerSecond=config.getInt(""String_Node_Str"",CATEGORY_IRRIGATION,10,0,10000,""String_Node_Str"");
  sprinklerRatePerHalfSecond=Math.round(sprinklerRatePerSecond / 2);
  sprinklerGrowthChance=config.getInt(""String_Node_Str"",CATEGORY_IRRIGATION,20,0,100,""String_Node_Str"");
  sprinklerGrowthChancePercent=sprinklerGrowthChance / 100F;
  sprinklerGrowthInterval=config.getInt(""String_Node_Str"",CATEGORY_IRRIGATION,5,1,300,""String_Node_Str"");
  sprinklerGrowthIntervalTicks=sprinklerGrowthInterval * 20;
  placeWater=config.getBoolean(""String_Node_Str"",CATEGORY_IRRIGATION,true,""String_Node_Str"");
  fillFromFlowingWater=config.getBoolean(""String_Node_Str"",CATEGORY_IRRIGATION,false,""String_Node_Str"");
  integration_HC=ModIntegration.LoadedMods.harvestcraft && config.getBoolean(""String_Node_Str"",CATEGORY_INTEGRATION,true,""String_Node_Str"");
  integration_Nat=ModIntegration.LoadedMods.natura && config.getBoolean(""String_Node_Str"",CATEGORY_INTEGRATION,true,""String_Node_Str"");
  integration_WeeeFlowers=ModIntegration.LoadedMods.weeeFlowers && config.getBoolean(""String_Node_Str"",CATEGORY_INTEGRATION,true,""String_Node_Str"");
  integration_PlantMegaPack=ModIntegration.LoadedMods.plantMegaPack && config.getBoolean(""String_Node_Str"",CATEGORY_INTEGRATION,true,""String_Node_Str"");
  integration_Chococraft=ModIntegration.LoadedMods.chococraft && config.getBoolean(""String_Node_Str"",CATEGORY_INTEGRATION,true,""String_Node_Str"");
  integration_Botania=ModIntegration.LoadedMods.botania && config.getBoolean(""String_Node_Str"",CATEGORY_INTEGRATION,true,""String_Node_Str"");
  integration_allowMagicFertiliser=ModIntegration.LoadedMods.magicalCrops && config.getBoolean(""String_Node_Str"",CATEGORY_INTEGRATION,true,""String_Node_Str"");
  integration_instantMagicFertiliser=ModIntegration.LoadedMods.magicalCrops && config.getBoolean(""String_Node_Str"",CATEGORY_INTEGRATION,false,""String_Node_Str"");
  villagerID=config.getInt(""String_Node_Str"",CATEGORY_AGRICRAFT,10,7,99,""String_Node_Str"");
  villagerEnabled=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,true,""String_Node_Str"");
  debug=config.getBoolean(""String_Node_Str"",CATEGORY_DEBUG,false,""String_Node_Str"");
  if (config.hasChanged()) {
    config.save();
  }
}","private static void loadConfiguration(){
  resourcePlants=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,false,""String_Node_Str"");
  mutationChance=(double)config.getFloat(""String_Node_Str"",CATEGORY_AGRICRAFT,(float)Constants.defaultMutationChance,0,1,""String_Node_Str"");
  singleSpreadsIncrement=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,false,""String_Node_Str"");
  spreadingDifficulty=config.getInt(""String_Node_Str"",CATEGORY_AGRICRAFT,3,1,3,""String_Node_Str"");
  cropsPerCraft=config.getInt(""String_Node_Str"",CATEGORY_AGRICRAFT,1,1,4,""String_Node_Str"");
  cropStatCap=config.getInt(""String_Node_Str"",CATEGORY_AGRICRAFT,10,1,10,""String_Node_Str"");
  cropStatDivisor=config.getInt(""String_Node_Str"",CATEGORY_AGRICRAFT,2,1,3,""String_Node_Str"");
  enableWeeds=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,true,""String_Node_Str"");
  weedsWipePlants=enableWeeds && config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,true,""String_Node_Str"");
  enableHandRake=enableWeeds && config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,true,""String_Node_Str"");
  bonemealMutation=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,false,""String_Node_Str"");
  disableVanillaFarming=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,false,""String_Node_Str"");
  disableWorldGen=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,false,""String_Node_Str"");
  enableNEI=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,true,""String_Node_Str"");
  propGenerateDefaults=config.get(CATEGORY_AGRICRAFT,""String_Node_Str"",false,""String_Node_Str"");
  generateDefaults=propGenerateDefaults.getBoolean();
  customCrops=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,false,""String_Node_Str"");
  wipeTallGrassDrops=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,false,""String_Node_Str"");
  renderBookInAnalyzer=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,true,""String_Node_Str"");
  cactusGivesCactus=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,false,""String_Node_Str"");
  disableSeedStorage=config.getBoolean(""String_Node_Str"",CATEGORY_STORAGE,false,""String_Node_Str"");
  disableSeedWarehouse=config.getBoolean(""String_Node_Str"",CATEGORY_STORAGE,false,""String_Node_Str"");
  disableIrrigation=config.getBoolean(""String_Node_Str"",CATEGORY_IRRIGATION,false,""String_Node_Str"");
  sprinklerRatePerSecond=config.getInt(""String_Node_Str"",CATEGORY_IRRIGATION,10,0,10000,""String_Node_Str"");
  sprinklerRatePerHalfSecond=Math.round(sprinklerRatePerSecond / 2);
  sprinklerGrowthChance=config.getInt(""String_Node_Str"",CATEGORY_IRRIGATION,20,0,100,""String_Node_Str"");
  sprinklerGrowthChancePercent=sprinklerGrowthChance / 100F;
  sprinklerGrowthInterval=config.getInt(""String_Node_Str"",CATEGORY_IRRIGATION,5,1,300,""String_Node_Str"");
  sprinklerGrowthIntervalTicks=sprinklerGrowthInterval * 20;
  placeWater=config.getBoolean(""String_Node_Str"",CATEGORY_IRRIGATION,true,""String_Node_Str"");
  fillFromFlowingWater=config.getBoolean(""String_Node_Str"",CATEGORY_IRRIGATION,false,""String_Node_Str"");
  integration_HC=ModIntegration.LoadedMods.harvestcraft && config.getBoolean(""String_Node_Str"",CATEGORY_INTEGRATION,true,""String_Node_Str"");
  integration_Nat=ModIntegration.LoadedMods.natura && config.getBoolean(""String_Node_Str"",CATEGORY_INTEGRATION,true,""String_Node_Str"");
  integration_WeeeFlowers=ModIntegration.LoadedMods.weeeFlowers && config.getBoolean(""String_Node_Str"",CATEGORY_INTEGRATION,true,""String_Node_Str"");
  integration_PlantMegaPack=ModIntegration.LoadedMods.plantMegaPack && config.getBoolean(""String_Node_Str"",CATEGORY_INTEGRATION,true,""String_Node_Str"");
  integration_Chococraft=ModIntegration.LoadedMods.chococraft && config.getBoolean(""String_Node_Str"",CATEGORY_INTEGRATION,true,""String_Node_Str"");
  integration_Botania=ModIntegration.LoadedMods.botania && config.getBoolean(""String_Node_Str"",CATEGORY_INTEGRATION,true,""String_Node_Str"");
  integration_allowMagicFertiliser=ModIntegration.LoadedMods.magicalCrops && config.getBoolean(""String_Node_Str"",CATEGORY_INTEGRATION,true,""String_Node_Str"");
  integration_instantMagicFertiliser=ModIntegration.LoadedMods.magicalCrops && config.getBoolean(""String_Node_Str"",CATEGORY_INTEGRATION,false,""String_Node_Str"");
  integration_Psychedelicraft=ModIntegration.LoadedMods.psychedelicraft && config.getBoolean(""String_Node_Str"",CATEGORY_INTEGRATION,true,""String_Node_Str"");
  villagerID=config.getInt(""String_Node_Str"",CATEGORY_AGRICRAFT,10,7,99,""String_Node_Str"");
  villagerEnabled=config.getBoolean(""String_Node_Str"",CATEGORY_AGRICRAFT,true,""String_Node_Str"");
  debug=config.getBoolean(""String_Node_Str"",CATEGORY_DEBUG,false,""String_Node_Str"");
  if (config.hasChanged()) {
    config.save();
  }
}"
95676,"public static String getDefaultMutations(){
  String data=mutationInstructions;
  data=data + '\n' + minecraftMutations;
  if (ConfigurationHandler.resourcePlants) {
    data=data + '\n' + agricraftMutations;
    if (OreDictHelper.oreCopper != null) {
      data=data + '\n' + copperMutation;
    }
    if (OreDictHelper.oreTin != null) {
      data=data + '\n' + tinMutation;
    }
    if (OreDictHelper.oreLead != null) {
      data=data + '\n' + leadMutation;
    }
    if (OreDictHelper.oreSilver != null) {
      data=data + '\n' + silverMutation;
    }
    if (OreDictHelper.oreAluminum != null) {
      data=data + '\n' + aluminumMutation;
    }
    if (OreDictHelper.oreNickel != null) {
      data=data + '\n' + nickelMutation;
    }
    if (OreDictHelper.orePlatinum != null) {
      data=data + '\n' + platinumMutation;
    }
    if (OreDictHelper.oreOsmium != null) {
      data=data + '\n' + osmiumMutation;
    }
  }
  if (ConfigurationHandler.integration_Botania) {
    data=data + '\n' + botaniaMutations;
  }
  if (ConfigurationHandler.integration_Nat && ConfigurationHandler.integration_HC && ModIntegration.LoadedMods.harvestcraft&& ModIntegration.LoadedMods.natura) {
    data=data + '\n' + harvestcraftMutations+ '\n'+ barleyNaturaMutations;
  }
 else {
    if (ConfigurationHandler.integration_HC && ModIntegration.LoadedMods.harvestcraft) {
      data=data + '\n' + harvestcraftMutations+ '\n'+ barleyHarvestCraftMutations;
    }
    if (ConfigurationHandler.integration_Nat && ModIntegration.LoadedMods.natura) {
      data=data + '\n' + naturaMutations;
    }
  }
  if (ConfigurationHandler.integration_WeeeFlowers && ModIntegration.LoadedMods.weeeFlowers) {
    data=data + '\n' + weeeFlowersMutations;
  }
  if (ConfigurationHandler.integration_PlantMegaPack && ModIntegration.LoadedMods.plantMegaPack) {
    data=data + '\n' + plantMegaPackMutations;
  }
  if (ConfigurationHandler.integration_Chococraft && ModIntegration.LoadedMods.chococraft) {
    if (ConfigurationHandler.integration_HC && ModIntegration.LoadedMods.harvestcraft) {
      data=data + '\n' + chococraft_harvestcraftMutations;
    }
 else {
      data=data + '\n' + chococraftMutations;
    }
  }
  return data;
}","public static String getDefaultMutations(){
  String data=mutationInstructions;
  data=data + '\n' + minecraftMutations;
  if (ConfigurationHandler.resourcePlants) {
    data=data + '\n' + agricraftMutations;
    if (OreDictHelper.oreCopper != null) {
      data=data + '\n' + copperMutation;
    }
    if (OreDictHelper.oreTin != null) {
      data=data + '\n' + tinMutation;
    }
    if (OreDictHelper.oreLead != null) {
      data=data + '\n' + leadMutation;
    }
    if (OreDictHelper.oreSilver != null) {
      data=data + '\n' + silverMutation;
    }
    if (OreDictHelper.oreAluminum != null) {
      data=data + '\n' + aluminumMutation;
    }
    if (OreDictHelper.oreNickel != null) {
      data=data + '\n' + nickelMutation;
    }
    if (OreDictHelper.orePlatinum != null) {
      data=data + '\n' + platinumMutation;
    }
    if (OreDictHelper.oreOsmium != null) {
      data=data + '\n' + osmiumMutation;
    }
  }
  if (ConfigurationHandler.integration_Botania) {
    data=data + '\n' + botaniaMutations;
  }
  if (ConfigurationHandler.integration_Nat && ConfigurationHandler.integration_HC && ModIntegration.LoadedMods.harvestcraft&& ModIntegration.LoadedMods.natura) {
    data=data + '\n' + harvestcraftMutations+ '\n'+ barleyNaturaMutations;
  }
 else {
    if (ConfigurationHandler.integration_HC && ModIntegration.LoadedMods.harvestcraft) {
      data=data + '\n' + harvestcraftMutations+ '\n'+ barleyHarvestCraftMutations;
    }
    if (ConfigurationHandler.integration_Nat && ModIntegration.LoadedMods.natura) {
      data=data + '\n' + naturaMutations;
    }
  }
  if (ConfigurationHandler.integration_WeeeFlowers && ModIntegration.LoadedMods.weeeFlowers) {
    data=data + '\n' + weeeFlowersMutations;
  }
  if (ConfigurationHandler.integration_PlantMegaPack && ModIntegration.LoadedMods.plantMegaPack) {
    data=data + '\n' + plantMegaPackMutations;
  }
  if (ConfigurationHandler.integration_Chococraft && ModIntegration.LoadedMods.chococraft) {
    if (ConfigurationHandler.integration_HC && ModIntegration.LoadedMods.harvestcraft) {
      data=data + '\n' + chococraft_harvestcraftMutations;
    }
 else {
      data=data + '\n' + chococraftMutations;
    }
  }
  if (ConfigurationHandler.integration_Psychedelicraft && ModIntegration.LoadedMods.psychedelicraft) {
    data=data + '\n' + psychedelicraftMutations;
  }
  return data;
}"
95677,"public static int plantIconIndex(ItemSeeds seed,int seedMeta,int growthMeta){
  if (ModIntegration.LoadedMods.natura && SeedHelper.getPlantDomain(seed).equalsIgnoreCase(""String_Node_Str"")) {
    return NaturaHelper.getTextureIndex(growthMeta,seedMeta);
  }
 else   if (ModIntegration.LoadedMods.plantMegaPack && SeedHelper.getPlantDomain(seed).equalsIgnoreCase(""String_Node_Str"")) {
    return PlantMegaPackHelper.getTextureIndex(seed,growthMeta);
  }
 else   if (ModIntegration.LoadedMods.chococraft && seed instanceof ItemGysahlSeeds) {
    return ChococraftHelper.transformMeta(growthMeta);
  }
 else   if (seed == Items.nether_wart) {
    return (int)Math.ceil(((float)growthMeta - 2) / 2);
  }
 else {
    return growthMeta;
  }
}","public static int plantIconIndex(ItemSeeds seed,int seedMeta,int growthMeta){
  Block plant=null;
  try {
    plant=seed.getPlant(null,0,0,0);
  }
 catch (  Exception e) {
    LogHelper.debug(""String_Node_Str"");
  }
  if (seed instanceof ItemModSeed) {
    return growthMeta;
  }
 else   if (ModIntegration.LoadedMods.magicalCrops && plant != null && plant instanceof BlockMagicalCrops) {
    return growthMeta;
  }
 else   if (ModIntegration.LoadedMods.natura && SeedHelper.getPlantDomain(seed).equalsIgnoreCase(""String_Node_Str"")) {
    return NaturaHelper.getTextureIndex(growthMeta,seedMeta);
  }
 else   if (ModIntegration.LoadedMods.plantMegaPack && SeedHelper.getPlantDomain(seed).equalsIgnoreCase(""String_Node_Str"")) {
    return PlantMegaPackHelper.getTextureIndex(seed,growthMeta);
  }
 else   if (ModIntegration.LoadedMods.chococraft && seed instanceof ItemGysahlSeeds) {
    return ChococraftHelper.transformMeta(growthMeta);
  }
 else   if (ModIntegration.LoadedMods.psychedelicraft && plant != null && plant instanceof IvTilledFieldPlant) {
    return PsychedelicraftHelper.transformMeta(growthMeta);
  }
 else   if (seed == Items.nether_wart) {
    return (int)Math.ceil(((float)growthMeta - 2) / 2);
  }
 else {
    return growthMeta;
  }
}"
95678,"public static ArrayList<ItemStack> getAllPlantFruits(ItemSeeds seed,World world,int x,int y,int z,int gain,int meta){
  Block plant=getPlant(seed);
  ArrayList<ItemStack> items=new ArrayList<ItemStack>();
  if (plant instanceof BlockModPlant) {
    items.addAll(((BlockModPlant)plant).getFruits());
  }
 else   if (ModIntegration.LoadedMods.chococraft && seed instanceof ItemGysahlSeeds) {
    items.addAll(ChococraftHelper.getFruits());
  }
 else {
    items=getPlantFruits(seed,world,x,y,z,gain,meta);
  }
  return items;
}","public static ArrayList<ItemStack> getAllPlantFruits(ItemSeeds seed,World world,int x,int y,int z,int gain,int meta){
  Block plant=getPlant(seed);
  ArrayList<ItemStack> items=new ArrayList<ItemStack>();
  if (plant instanceof BlockModPlant) {
    items.addAll(((BlockModPlant)plant).getFruits());
  }
 else   if (ModIntegration.LoadedMods.chococraft && seed instanceof ItemGysahlSeeds) {
    items.addAll(ChococraftHelper.getFruits());
  }
 else {
    items=(ArrayList<ItemStack>)getFruitsFromOreDict(seed,meta);
  }
  if (items.size() == 0) {
    items=getPlantFruits(seed,world,x,y,z,gain,meta);
  }
  return items;
}"
95679,"public static ArrayList<ItemStack> getPlantFruits(ItemSeeds seed,World world,int x,int y,int z,int gain,int meta){
  int nr=(int)(Math.ceil((gain + 0.00) / 3));
  Block plant=getPlant(seed);
  ArrayList<ItemStack> items=new ArrayList<ItemStack>();
  if (plant == Blocks.nether_wart) {
    items.add(new ItemStack(seed,1,0));
  }
 else   if (plant instanceof BlockModPlant) {
    items.addAll(((BlockModPlant)plant).getFruit(nr,world.rand));
  }
 else   if (ModIntegration.LoadedMods.natura && getPlantDomain(seed).equalsIgnoreCase(""String_Node_Str"")) {
    items.add(new ItemStack(NContent.plantItem,nr,meta * 3));
  }
 else   if (ModIntegration.LoadedMods.harvestcraft && getPlantDomain(seed).equalsIgnoreCase(""String_Node_Str"")) {
    items.add(new ItemStack(getPlant(seed).getItemDropped(7,new Random(),0),nr));
  }
 else   if (ModIntegration.LoadedMods.chococraft && seed instanceof ItemGysahlSeeds) {
    items.add(ChococraftHelper.getFruit(gain,nr));
  }
 else {
    int harvestMeta=7;
    if (ModIntegration.LoadedMods.plantMegaPack && getPlantDomain(seed).equalsIgnoreCase(""String_Node_Str"")) {
      harvestMeta=PlantMegaPackHelper.getTextureIndex(seed,harvestMeta);
    }
    ArrayList<ItemStack> defaultDrops=plant.getDrops(world,x,y,z,harvestMeta,0);
    for (    ItemStack drop : defaultDrops) {
      if (!(drop.getItem() instanceof ItemSeeds) && drop.getItem() != null) {
        boolean add=true;
        for (        ItemStack item : items) {
          if (item.getItem() == drop.getItem() && item.getItemDamage() == drop.getItemDamage()) {
            add=false;
          }
        }
        if (add) {
          items.add(new ItemStack(drop.getItem(),nr,drop.getItemDamage()));
        }
      }
    }
  }
  return items;
}","public static ArrayList<ItemStack> getPlantFruits(ItemSeeds seed,World world,int x,int y,int z,int gain,int meta){
  int nr=(int)(Math.ceil((gain + 0.00) / 3));
  Block plant=getPlant(seed);
  ArrayList<ItemStack> items=new ArrayList<ItemStack>();
  if (plant == Blocks.nether_wart) {
    LogHelper.debug(""String_Node_Str"");
    items.add(new ItemStack(seed,nr,0));
  }
 else   if (plant instanceof BlockModPlant) {
    LogHelper.debug(""String_Node_Str"");
    items.addAll(((BlockModPlant)plant).getFruit(nr,world.rand));
  }
 else   if (ModIntegration.LoadedMods.natura && getPlantDomain(seed).equalsIgnoreCase(""String_Node_Str"")) {
    LogHelper.debug(""String_Node_Str"");
    items.add(new ItemStack(NContent.plantItem,nr,meta * 3));
  }
 else   if (ModIntegration.LoadedMods.chococraft && seed instanceof ItemGysahlSeeds) {
    LogHelper.debug(""String_Node_Str"");
    items.add(ChococraftHelper.getFruit(gain,nr));
  }
 else   if (ModIntegration.LoadedMods.psychedelicraft && plant instanceof IvTilledFieldPlant) {
    LogHelper.debug(""String_Node_Str"");
  }
 else {
    LogHelper.debug(""String_Node_Str"");
    addFruitsFromOreDict(items,seed,meta,world.rand,nr);
  }
  if (items.size() == 0) {
    LogHelper.debug(""String_Node_Str"");
    int harvestMeta=7;
    if (ModIntegration.LoadedMods.plantMegaPack && getPlantDomain(seed).equalsIgnoreCase(""String_Node_Str"")) {
      harvestMeta=PlantMegaPackHelper.getTextureIndex(seed,harvestMeta);
    }
    addFruitsFromPlant(items,plant,world,x,y,z,harvestMeta,nr);
  }
  return items;
}"
95680,"public static Block getPlant(ItemSeeds seed){
  if (seed == null) {
    return null;
  }
 else   if (seed == Items.melon_seeds) {
    return Crops.melon;
  }
 else   if (seed == Items.pumpkin_seeds) {
    return Crops.pumpkin;
  }
 else {
    if (seed.getPlant(null,0,0,0) instanceof BlockCrops) {
      return (BlockCrops)seed.getPlant(null,0,0,0);
    }
 else {
      return seed.getPlant(null,0,0,0);
    }
  }
}","public static Block getPlant(ItemSeeds seed){
  if (seed == null) {
    return null;
  }
 else   if (seed == Items.melon_seeds) {
    return Crops.melon;
  }
 else   if (seed == Items.pumpkin_seeds) {
    return Crops.pumpkin;
  }
 else {
    return seed.getPlant(null,0,0,0);
  }
}"
95681,"/** 
 * Applies one of the 2 strategies and notifies the TE if it should update
 */
public void executeCrossOver(){
  ICrossOverStrategy strategy=rollStrategy();
  CrossOverResult result=strategy.executeStrategy();
  if (result == null) {
    return;
  }
  if (resultIsValid(result) && random.nextDouble() < result.getChance()) {
    crop.applyCrossOverResult(result);
  }
}","/** 
 * Applies one of the 2 strategies and notifies the TE if it should update
 */
public void executeCrossOver(){
  ICrossOverStrategy strategy=rollStrategy();
  CrossOverResult result=strategy.executeStrategy();
  if (result == null || result.getSeed() == null) {
    return;
  }
  if (resultIsValid(result) && random.nextDouble() < result.getChance()) {
    crop.applyCrossOverResult(result);
  }
}"
95682,"private void addMaterialToList(ItemStack stack,List list,int objectMeta,ArrayList<ItemStack> registeredMaterials){
  if (!this.hasMaterial(registeredMaterials,stack)) {
    ItemStack entry=new ItemStack(this.field_150939_a,1,objectMeta);
    NBTTagCompound tag=NBTHelper.getMaterialTag(stack);
    if (tag != null) {
      entry.setTagCompound(tag);
    }
    list.add(entry);
    registeredMaterials.add(stack);
  }
}","private void addMaterialToList(ItemStack stack,List list,int objectMeta,ArrayList<ItemStack> registeredMaterials){
  if (!this.hasMaterial(registeredMaterials,stack)) {
    ItemStack entry=new ItemStack(this.field_150939_a,1,objectMeta);
    NBTTagCompound tag=NBTHelper.getMaterialTag(stack);
    if (tag != null) {
      entry.setTagCompound(tag);
      list.add(entry);
      registeredMaterials.add(stack);
    }
  }
}"
95683,"public static NBTTagCompound getMaterialTag(ItemStack stack){
  NBTTagCompound tag=new NBTTagCompound();
  if (stack != null && stack.getItem() != null) {
    tag.setString(Names.NBT.material,Block.blockRegistry.getNameForObject(((ItemBlock)stack.getItem()).field_150939_a));
    tag.setInteger(Names.NBT.materialMeta,stack.getItemDamage());
  }
  return tag;
}","public static NBTTagCompound getMaterialTag(ItemStack stack){
  NBTTagCompound tag=null;
  if (stack != null && stack.getItem() != null) {
    String name=Block.blockRegistry.getNameForObject(((ItemBlock)stack.getItem()).field_150939_a);
    if (name != null && !name.equals(""String_Node_Str"")) {
      tag=new NBTTagCompound();
      tag.setString(Names.NBT.material,name);
      tag.setInteger(Names.NBT.materialMeta,stack.getItemDamage());
    }
  }
  return tag;
}"
95684,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float fX,float fY,float fZ){
  if (!world.isRemote) {
    TileEntity te=world.getTileEntity(x,y,z);
    if (ConfigurationHandler.enableHandRake && te != null && te instanceof TileEntityCrop && ((TileEntityCrop)te).weed) {
      return false;
    }
    if (player.isSneaking()) {
      this.harvest(world,x,y,z);
    }
 else     if (player.getCurrentEquippedItem() == null) {
      this.harvest(world,x,y,z);
    }
 else     if (player.getCurrentEquippedItem().getItem() == Items.debugItem) {
      return false;
    }
 else     if (player.getCurrentEquippedItem().getItem() == Items.crops) {
      this.setCrossCrop(world,x,y,z,player);
    }
 else     if (player.getCurrentEquippedItem().getItem() == net.minecraft.init.Items.dye && player.getCurrentEquippedItem().getItemDamage() == 15) {
      return false;
    }
 else     if (ModIntegration.LoadedMods.magicalCrops && ConfigurationHandler.integration_allowMagicFertiliser && player.getCurrentEquippedItem().getItem() instanceof ItemMagicalCropFertilizer) {
      return this.applyMagicalFertiliser(world,x,y,z,player);
    }
 else     if (player.getCurrentEquippedItem().getItem() instanceof ItemDebugger) {
      return false;
    }
 else     if (ModIntegration.LoadedMods.tconstruct && player.getCurrentEquippedItem().getItem() instanceof Scythe) {
      for (int xPos=x - 1; xPos <= x + 1; xPos++) {
        for (int zPos=z - 1; zPos <= z + 1; zPos++) {
          if (world.getBlock(xPos,y,zPos) instanceof BlockCrop && this.harvest(world,xPos,y,zPos)) {
            AbilityHelper.damageTool(player.getCurrentEquippedItem(),1,player,false);
          }
        }
      }
    }
 else {
      this.harvest(world,x,y,z);
      if (player.getCurrentEquippedItem().getItem() instanceof ItemSeeds) {
        this.plantSeed(world,x,y,z,player);
      }
    }
  }
  return true;
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float fX,float fY,float fZ){
  if (!world.isRemote) {
    TileEntity te=world.getTileEntity(x,y,z);
    if (te != null && te instanceof TileEntityCrop) {
      TileEntityCrop crop=(TileEntityCrop)te;
      if (ConfigurationHandler.enableHandRake && crop.weed) {
        return false;
      }
      if (player.isSneaking()) {
        this.harvest(world,x,y,z);
      }
 else       if (player.getCurrentEquippedItem() == null) {
        this.harvest(world,x,y,z);
      }
 else       if (player.getCurrentEquippedItem().getItem() == Items.debugItem) {
        return false;
      }
 else       if (player.getCurrentEquippedItem().getItem() == Items.crops) {
        this.setCrossCrop(world,x,y,z,player);
      }
 else       if (player.getCurrentEquippedItem().getItem() == net.minecraft.init.Items.dye && player.getCurrentEquippedItem().getItemDamage() == 15) {
        return false;
      }
 else       if (ModIntegration.LoadedMods.magicalCrops && ConfigurationHandler.integration_allowMagicFertiliser && player.getCurrentEquippedItem().getItem() == Item.itemRegistry.getObject(""String_Node_Str"")) {
        return this.applyMagicalFertiliser(world,x,y,z,player);
      }
 else       if (player.getCurrentEquippedItem().getItem() instanceof ItemDebugger) {
        return false;
      }
 else       if (ModIntegration.LoadedMods.tconstruct && player.getCurrentEquippedItem().getItem() instanceof Scythe) {
        for (int xPos=x - 1; xPos <= x + 1; xPos++) {
          for (int zPos=z - 1; zPos <= z + 1; zPos++) {
            if (world.getBlock(xPos,y,zPos) instanceof BlockCrop && this.harvest(world,xPos,y,zPos)) {
              AbilityHelper.damageTool(player.getCurrentEquippedItem(),1,player,false);
            }
          }
        }
      }
 else {
        this.harvest(world,x,y,z);
        if (player.getCurrentEquippedItem().getItem() instanceof ItemSeeds) {
          this.plantSeed(world,x,y,z,player);
        }
      }
    }
  }
  return true;
}"
95685,"@Override public void dropBlockAsItemWithChance(World world,int x,int y,int z,int meta,float f,int i){
  if (!world.isRemote) {
    TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
    if (crop != null) {
      ArrayList<ItemStack> drops=new ArrayList<ItemStack>();
      if (crop.crossCrop) {
        drops.add(new ItemStack(Items.crops,2));
      }
 else {
        drops.add(new ItemStack(Items.crops,1));
        if (crop.hasPlant()) {
          drops.add(crop.getSeedStack());
          if (this.isMature(world,x,y,z)) {
            drops.addAll(SeedHelper.getPlantFruits((ItemSeeds)crop.seed,world,x,y,z,crop.gain,crop.seedMeta));
          }
        }
      }
      for (      ItemStack drop : drops) {
        this.dropBlockAsItem(world,x,y,z,drop);
      }
    }
  }
}","@Override public void dropBlockAsItemWithChance(World world,int x,int y,int z,int meta,float f,int i){
  if (!world.isRemote) {
    TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
    if (crop != null) {
      ArrayList<ItemStack> drops=new ArrayList<ItemStack>();
      if (crop.crossCrop) {
        drops.add(new ItemStack(Items.crops,2));
      }
 else {
        drops.add(new ItemStack(Items.crops,1));
        if (crop.hasPlant()) {
          drops.add(crop.getSeedStack());
          if (this.isMature(world,x,y,z)) {
            drops.addAll(SeedHelper.getPlantFruits(crop.seed,world,x,y,z,crop.gain,crop.seedMeta));
          }
        }
      }
      for (      ItemStack drop : drops) {
        this.dropBlockAsItem(world,x,y,z,drop);
      }
    }
  }
}"
95686,"@Override public boolean canUproot(World world,int x,int y,int z){
  if (!world.isRemote) {
    TileEntity te=world.getTileEntity(x,y,z);
    if (te != null && te instanceof TileEntityCrop) {
      TileEntityCrop crop=(TileEntityCrop)te;
      if (crop.hasPlant()) {
        ArrayList<ItemStack> drops=new ArrayList<ItemStack>();
        if (crop.isMature()) {
          drops.addAll(SeedHelper.getPlantFruits((ItemSeeds)crop.seed,world,x,y,z,crop.gain,crop.seedMeta));
        }
        drops.add(crop.getSeedStack());
        for (        ItemStack drop : drops) {
          this.dropBlockAsItem(world,x,y,z,drop);
        }
      }
      crop.clearPlant();
    }
  }
  return false;
}","@Override public boolean canUproot(World world,int x,int y,int z){
  if (!world.isRemote) {
    TileEntity te=world.getTileEntity(x,y,z);
    if (te != null && te instanceof TileEntityCrop) {
      TileEntityCrop crop=(TileEntityCrop)te;
      if (crop.hasPlant()) {
        ArrayList<ItemStack> drops=new ArrayList<ItemStack>();
        if (crop.isMature()) {
          drops.addAll(SeedHelper.getPlantFruits(crop.seed,world,x,y,z,crop.gain,crop.seedMeta));
        }
        drops.add(crop.getSeedStack());
        for (        ItemStack drop : drops) {
          this.dropBlockAsItem(world,x,y,z,drop);
        }
      }
      crop.clearPlant();
    }
  }
  return false;
}"
95687,"@Override public boolean func_149852_a(World world,Random rand,int x,int y,int z){
  TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
  if (crop.crossCrop) {
    return ConfigurationHandler.bonemealMutation;
  }
  if (crop.hasPlant()) {
    if (SeedHelper.getSeedTier((ItemSeeds)crop.seed,crop.seedMeta) < 4) {
      return !this.isMature(world,x,y,z);
    }
  }
  return false;
}","@Override public boolean func_149852_a(World world,Random rand,int x,int y,int z){
  TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
  if (crop.crossCrop) {
    return ConfigurationHandler.bonemealMutation;
  }
  if (crop.hasPlant()) {
    if (SeedHelper.getSeedTier(crop.seed,crop.seedMeta) < 4) {
      return !this.isMature(world,x,y,z);
    }
  }
  return false;
}"
95688,"@Override public void updateTick(World world,int x,int y,int z,Random rnd){
  TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
  if (crop.hasPlant()) {
    Event.Result allowGrowthResult=AppleCoreHelper.validateGrowthTick(this,world,x,y,z,rnd);
    if (allowGrowthResult != Event.Result.DENY) {
      int meta=this.getPlantMetadata(world,x,y,z);
      if (meta < 7 && crop.isFertile()) {
        double multiplier=1.0 + (crop.growth + 0.00) / 10;
        float growthRate=(float)SeedHelper.getBaseGrowth((ItemSeeds)crop.seed,crop.seedMeta);
        boolean shouldGrow=(rnd.nextDouble() <= (growthRate * multiplier) / 100);
        if (shouldGrow) {
          meta++;
          world.setBlockMetadataWithNotify(x,y,z,meta,2);
          AppleCoreHelper.announceGrowthTick(this,world,x,y,z);
        }
      }
    }
  }
 else   if (crop.weed) {
    Event.Result allowGrowthResult=AppleCoreHelper.validateGrowthTick(this,world,x,y,z,rnd);
    if (allowGrowthResult != Event.Result.DENY) {
      int meta=this.getPlantMetadata(world,x,y,z);
      if (meta < 7) {
        double multiplier=1.0 + (10 + 0.00) / 10;
        float growthRate=(float)Constants.growthTier1;
        boolean shouldGrow=(rnd.nextDouble() <= (growthRate * multiplier) / 100);
        if (shouldGrow) {
          meta++;
          world.setBlockMetadataWithNotify(x,y,z,meta,2);
          AppleCoreHelper.announceGrowthTick(this,world,x,y,z);
        }
      }
 else {
        if (ConfigurationHandler.enableWeeds) {
          crop.spreadWeed();
        }
      }
    }
  }
 else {
    if (ConfigurationHandler.enableWeeds && Math.random() < 0.10) {
      crop.spawnWeed();
    }
 else     if (crop.crossCrop) {
      crop.crossOver();
    }
  }
}","@Override public void updateTick(World world,int x,int y,int z,Random rnd){
  TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
  if (crop.hasPlant()) {
    Event.Result allowGrowthResult=AppleCoreHelper.validateGrowthTick(this,world,x,y,z,rnd);
    if (allowGrowthResult != Event.Result.DENY) {
      int meta=this.getPlantMetadata(world,x,y,z);
      if (meta < 7 && crop.isFertile()) {
        double multiplier=1.0 + (crop.growth + 0.00) / 10;
        float growthRate=(float)SeedHelper.getBaseGrowth(crop.seed,crop.seedMeta);
        boolean shouldGrow=(rnd.nextDouble() <= (growthRate * multiplier) / 100);
        if (shouldGrow) {
          meta++;
          world.setBlockMetadataWithNotify(x,y,z,meta,2);
          AppleCoreHelper.announceGrowthTick(this,world,x,y,z);
        }
      }
    }
  }
 else   if (crop.weed) {
    Event.Result allowGrowthResult=AppleCoreHelper.validateGrowthTick(this,world,x,y,z,rnd);
    if (allowGrowthResult != Event.Result.DENY) {
      int meta=this.getPlantMetadata(world,x,y,z);
      if (meta < 7) {
        double multiplier=1.0 + (10 + 0.00) / 10;
        float growthRate=(float)Constants.growthTier1;
        boolean shouldGrow=(rnd.nextDouble() <= (growthRate * multiplier) / 100);
        if (shouldGrow) {
          meta++;
          world.setBlockMetadataWithNotify(x,y,z,meta,2);
          AppleCoreHelper.announceGrowthTick(this,world,x,y,z);
        }
      }
 else {
        if (ConfigurationHandler.enableWeeds) {
          crop.spreadWeed();
        }
      }
    }
  }
 else {
    if (ConfigurationHandler.enableWeeds && Math.random() < 0.10) {
      crop.spawnWeed();
    }
 else     if (crop.crossCrop) {
      crop.crossOver();
    }
  }
}"
95689,"public boolean harvest(World world,int x,int y,int z){
  if (!world.isRemote) {
    boolean update=false;
    TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
    if (crop.weed) {
      crop.clearWeed();
    }
 else     if (crop.crossCrop) {
      crop.crossCrop=false;
      this.dropBlockAsItem(world,x,y,z,new ItemStack(Items.crops,1));
      update=true;
    }
 else     if (crop.isMature()) {
      crop.getWorldObj().setBlockMetadataWithNotify(crop.xCoord,crop.yCoord,crop.zCoord,2,2);
      update=true;
      ArrayList<ItemStack> drops=SeedHelper.getPlantFruits((ItemSeeds)crop.seed,world,x,y,z,crop.gain,crop.seedMeta);
      for (      ItemStack drop : drops) {
        this.dropBlockAsItem(world,x,y,z,drop);
      }
    }
    if (update) {
      crop.markForUpdate();
    }
    return update;
  }
  return false;
}","public boolean harvest(World world,int x,int y,int z){
  if (!world.isRemote) {
    boolean update=false;
    TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
    if (crop.weed) {
      crop.clearWeed();
    }
 else     if (crop.crossCrop) {
      crop.crossCrop=false;
      this.dropBlockAsItem(world,x,y,z,new ItemStack(Items.crops,1));
      update=true;
    }
 else     if (crop.isMature()) {
      crop.getWorldObj().setBlockMetadataWithNotify(crop.xCoord,crop.yCoord,crop.zCoord,2,2);
      update=true;
      ArrayList<ItemStack> drops=SeedHelper.getPlantFruits(crop.seed,world,x,y,z,crop.gain,crop.seedMeta);
      for (      ItemStack drop : drops) {
        this.dropBlockAsItem(world,x,y,z,drop);
      }
    }
    if (update) {
      crop.markForUpdate();
    }
    return update;
  }
  return false;
}"
95690,"@Override public ArrayList<ItemStack> getDrops(World world,int x,int y,int z,int metadata,int fortune){
  ArrayList<ItemStack> items=new ArrayList<ItemStack>();
  if (world.getTileEntity(x,y,z) != null && world.getTileEntity(x,y,z) instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
    if (crop.crossCrop) {
      items.add(new ItemStack(Items.crops,2));
    }
 else {
      items.add(new ItemStack(Items.crops,1));
    }
    if (crop.hasPlant()) {
      ItemStack seedStack=crop.getSeedStack().copy();
      items.add(seedStack);
      if (crop.isMature()) {
        items.addAll(SeedHelper.getPlantFruits((ItemSeeds)crop.seed,crop.getWorldObj(),crop.xCoord,crop.yCoord,crop.zCoord,crop.gain,crop.seedMeta));
      }
    }
  }
  return items;
}","@Override public ArrayList<ItemStack> getDrops(World world,int x,int y,int z,int metadata,int fortune){
  ArrayList<ItemStack> items=new ArrayList<ItemStack>();
  if (world.getTileEntity(x,y,z) != null && world.getTileEntity(x,y,z) instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
    if (crop.crossCrop) {
      items.add(new ItemStack(Items.crops,2));
    }
 else {
      items.add(new ItemStack(Items.crops,1));
    }
    if (crop.hasPlant()) {
      ItemStack seedStack=crop.getSeedStack().copy();
      items.add(seedStack);
      if (crop.isMature()) {
        items.addAll(SeedHelper.getPlantFruits(crop.seed,crop.getWorldObj(),crop.xCoord,crop.yCoord,crop.zCoord,crop.gain,crop.seedMeta));
      }
    }
  }
  return items;
}"
95691,"@SideOnly(Side.CLIENT) public int getRenderType(){
  int type=-1;
  if (this.hasPlant()) {
    type=RenderHelper.getRenderType((ItemSeeds)this.seed,this.seedMeta);
  }
 else   if (this.weed) {
    type=6;
  }
  return type;
}","@SideOnly(Side.CLIENT) public int getRenderType(){
  int type=-1;
  if (this.hasPlant()) {
    type=RenderHelper.getRenderType(this.seed,this.seedMeta);
  }
 else   if (this.weed) {
    type=6;
  }
  return type;
}"
95692,"@SideOnly(Side.CLIENT) public IIcon getPlantIcon(){
  IIcon icon=null;
  if (this.hasPlant()) {
    int meta=RenderHelper.plantIconIndex((ItemSeeds)this.seed,this.seedMeta,this.getBlockMetadata());
    icon=SeedHelper.getPlant((ItemSeeds)this.seed).getIcon(0,meta);
  }
 else   if (this.weed) {
    icon=((BlockCrop)this.worldObj.getBlock(this.xCoord,this.yCoord,this.zCoord)).getWeedIcon(this.getBlockMetadata());
  }
  return icon;
}","@SideOnly(Side.CLIENT) public IIcon getPlantIcon(){
  IIcon icon=null;
  if (this.hasPlant()) {
    int meta=RenderHelper.plantIconIndex(this.seed,this.seedMeta,this.getBlockMetadata());
    icon=SeedHelper.getPlant(this.seed).getIcon(0,meta);
  }
 else   if (this.weed) {
    icon=((BlockCrop)this.worldObj.getBlock(this.xCoord,this.yCoord,this.zCoord)).getWeedIcon(this.getBlockMetadata());
  }
  return icon;
}"
95693,"public ItemStack getSeedStack(){
  ItemStack seed=new ItemStack((ItemSeeds)this.seed,1,this.seedMeta);
  NBTTagCompound tag=new NBTTagCompound();
  SeedHelper.setNBT(tag,(short)this.growth,(short)this.gain,(short)this.strength,this.analyzed);
  seed.setTagCompound(tag);
  return seed;
}","public ItemStack getSeedStack(){
  ItemStack seed=new ItemStack(this.seed,1,this.seedMeta);
  NBTTagCompound tag=new NBTTagCompound();
  SeedHelper.setNBT(tag,(short)this.growth,(short)this.gain,(short)this.strength,this.analyzed);
  seed.setTagCompound(tag);
  return seed;
}"
95694,"@Override public void addDebugInfo(List<String> list){
  list.add(""String_Node_Str"");
  if (this.crossCrop) {
    list.add(""String_Node_Str"");
  }
 else   if (this.hasPlant()) {
    list.add(""String_Node_Str"");
    list.add(""String_Node_Str"" + ((ItemSeeds)this.seed).getUnlocalizedName());
    list.add(""String_Node_Str"" + Item.itemRegistry.getNameForObject(this.seed) + ':'+ this.seedMeta);
    list.add(""String_Node_Str"" + SeedHelper.getPlant((ItemSeeds)this.seed).getUnlocalizedName());
    list.add(""String_Node_Str"" + this.getBlockMetadata());
    list.add(""String_Node_Str"" + this.growth);
    list.add(""String_Node_Str"" + this.gain);
    list.add(""String_Node_Str"" + this.strength);
    list.add(""String_Node_Str"" + this.isFertile());
    list.add(""String_Node_Str"" + this.isMature());
  }
 else   if (this.weed) {
    list.add(""String_Node_Str"");
    list.add(""String_Node_Str"" + this.getBlockMetadata());
  }
 else {
    list.add(""String_Node_Str"");
  }
}","@Override public void addDebugInfo(List<String> list){
  list.add(""String_Node_Str"");
  if (this.crossCrop) {
    list.add(""String_Node_Str"");
  }
 else   if (this.hasPlant()) {
    list.add(""String_Node_Str"");
    list.add(""String_Node_Str"" + (this.seed).getUnlocalizedName());
    list.add(""String_Node_Str"" + Item.itemRegistry.getNameForObject(this.seed) + ':'+ this.seedMeta);
    list.add(""String_Node_Str"" + SeedHelper.getPlant(this.seed).getUnlocalizedName());
    list.add(""String_Node_Str"" + this.getBlockMetadata());
    list.add(""String_Node_Str"" + this.growth);
    list.add(""String_Node_Str"" + this.gain);
    list.add(""String_Node_Str"" + this.strength);
    list.add(""String_Node_Str"" + this.isFertile());
    list.add(""String_Node_Str"" + this.isMature());
  }
 else   if (this.weed) {
    list.add(""String_Node_Str"");
    list.add(""String_Node_Str"" + this.getBlockMetadata());
  }
 else {
    list.add(""String_Node_Str"");
  }
}"
95695,"public boolean isFertile(){
  return GrowthRequirements.getGrowthRequirement((ItemSeeds)this.seed,this.seedMeta).canGrow(this.worldObj,this.xCoord,this.yCoord,this.zCoord);
}","public boolean isFertile(){
  return GrowthRequirements.getGrowthRequirement(this.seed,this.seedMeta).canGrow(this.worldObj,this.xCoord,this.yCoord,this.zCoord);
}"
95696,"public void addNeighbour(ForgeDirection direction,IPlantable plant,int meta,int growth,int gain,int strength){
  TileEntityCrop crop=new TileEntityCrop();
  crop.setWorldObj(world);
  crop.seed=plant;
  crop.seedMeta=meta;
  crop.growth=growth;
  crop.gain=gain;
  crop.strength=strength;
  crop.xCoord=targetCrop.xCoord + direction.offsetX;
  crop.yCoord=targetCrop.yCoord + direction.offsetY;
  crop.zCoord=targetCrop.zCoord + direction.offsetZ;
  when(world.getTileEntity(crop.xCoord,crop.yCoord,crop.zCoord)).thenReturn(crop);
  when(world.getBlock(crop.xCoord,crop.yCoord,crop.zCoord)).thenReturn(new BlockCrop());
  when(world.getBlockMetadata(crop.xCoord,crop.yCoord,crop.zCoord)).thenReturn(meta);
}","public void addNeighbour(ForgeDirection direction,ItemSeeds plant,int meta,int growth,int gain,int strength){
  TileEntityCrop crop=new TileEntityCrop();
  crop.setWorldObj(world);
  crop.seed=plant;
  crop.seedMeta=meta;
  crop.growth=growth;
  crop.gain=gain;
  crop.strength=strength;
  crop.xCoord=targetCrop.xCoord + direction.offsetX;
  crop.yCoord=targetCrop.yCoord + direction.offsetY;
  crop.zCoord=targetCrop.zCoord + direction.offsetZ;
  when(world.getTileEntity(crop.xCoord,crop.yCoord,crop.zCoord)).thenReturn(crop);
  when(world.getBlock(crop.xCoord,crop.yCoord,crop.zCoord)).thenReturn(new BlockCrop());
  when(world.getBlockMetadata(crop.xCoord,crop.yCoord,crop.zCoord)).thenReturn(meta);
}"
95697,"public static void addFruitsFromOreDict(List<ItemStack> list,ItemSeeds seed,int meta,Random rand,int nr){
  int counter=0;
  List<ItemStack> fruits=getFruitsFromOreDict(seed,meta);
  while (counter < nr) {
    ItemStack newFruit=fruits.get(rand.nextInt(fruits.size())).copy();
    newFruit.stackSize=1;
    list.add(newFruit);
    counter++;
  }
}","public static void addFruitsFromOreDict(List<ItemStack> list,ItemSeeds seed,int meta,Random rand,int nr){
  int counter=0;
  List<ItemStack> fruits=getFruitsFromOreDict(seed,meta);
  if (fruits != null && fruits.size() > 0) {
    while (counter < nr) {
      ItemStack newFruit=fruits.get(rand.nextInt(fruits.size())).copy();
      newFruit.stackSize=1;
      list.add(newFruit);
      counter++;
    }
  }
}"
95698,"@Mod.EventHandler public static void init(FMLInitializationEvent event){
  LogHelper.info(""String_Node_Str"");
  ResourceCrops.init();
  Seeds.init();
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new GuiHandler());
  proxy.registerTileEntities();
  proxy.registerRenderers();
  ModIntegration.init();
  LogHelper.info(""String_Node_Str"");
}","@Mod.EventHandler public static void init(FMLInitializationEvent event){
  LogHelper.debug(""String_Node_Str"");
  ResourceCrops.init();
  Seeds.init();
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new GuiHandler());
  proxy.registerTileEntities();
  proxy.registerRenderers();
  ModIntegration.init();
  LogHelper.debug(""String_Node_Str"");
}"
95699,"@Mod.EventHandler public static void preInit(FMLPreInitializationEvent event){
  LogHelper.info(""String_Node_Str"");
  ModIntegration.LoadedMods.init();
  proxy.registerEventHandlers();
  NetworkWrapperAgriCraft.init();
  ConfigurationHandler.init(event);
  FMLCommonHandler.instance().bus().register(new ConfigurationHandler());
  if (ConfigurationHandler.debug) {
    FMLCommonHandler.instance().bus().register(new RenderLogger());
  }
  Blocks.init();
  Crops.init();
  Items.init();
  LogHelper.info(""String_Node_Str"");
}","@Mod.EventHandler public static void preInit(FMLPreInitializationEvent event){
  LogHelper.debug(""String_Node_Str"");
  ModIntegration.LoadedMods.init();
  proxy.registerEventHandlers();
  NetworkWrapperAgriCraft.init();
  ConfigurationHandler.init(event);
  FMLCommonHandler.instance().bus().register(new ConfigurationHandler());
  if (ConfigurationHandler.debug) {
    FMLCommonHandler.instance().bus().register(new RenderLogger());
  }
  Blocks.init();
  Crops.init();
  Items.init();
  LogHelper.debug(""String_Node_Str"");
}"
95700,"@Mod.EventHandler public static void postInit(FMLPostInitializationEvent event){
  LogHelper.info(""String_Node_Str"");
  Crops.initBotaniaCrops();
  Recipes.init();
  CustomCrops.initCustomCrops();
  SeedHelper.init();
  MutationHandler.init();
  GrowthRequirements.initSoils();
  CustomCrops.initGrassSeeds();
  if (!ConfigurationHandler.disableWorldGen) {
    WorldGen.init();
  }
  proxy.initNEI();
  proxy.initSeedInfo();
  LogHelper.info(""String_Node_Str"");
}","@Mod.EventHandler public static void postInit(FMLPostInitializationEvent event){
  LogHelper.debug(""String_Node_Str"");
  Crops.initBotaniaCrops();
  Recipes.init();
  CustomCrops.initCustomCrops();
  SeedHelper.init();
  MutationHandler.init();
  GrowthRequirements.initSoils();
  CustomCrops.initGrassSeeds();
  if (!ConfigurationHandler.disableWorldGen) {
    WorldGen.init();
  }
  proxy.initNEI();
  proxy.initSeedInfo();
  LogHelper.debug(""String_Node_Str"");
}"
95701,"public static void init(){
  nei=Loader.isModLoaded(Names.Mods.nei);
  harvestcraft=Loader.isModLoaded(Names.Mods.harvestcraft);
  natura=Loader.isModLoaded(Names.Mods.natura);
  weeeFlowers=Loader.isModLoaded(Names.Mods.weeeFlowers);
  forestry=Loader.isModLoaded(Names.Mods.forestry);
  thaumicTinkerer=Loader.isModLoaded(Names.Mods.thaumicTinkerer);
  hungerOverhaul=Loader.isModLoaded(Names.Mods.hungerOverhaul);
  exNihilo=Loader.isModLoaded(Names.Mods.exNihilo);
  plantMegaPack=Loader.isModLoaded(Names.Mods.plantMegaPack);
  magicalCrops=Loader.isModLoaded(Names.Mods.magicalCrops);
  railcraft=Loader.isModLoaded(Names.Mods.railcraft);
  thaumcraft=Loader.isModLoaded(Names.Mods.thaumcraft);
  mfr=Loader.isModLoaded(Names.Mods.mfr);
  waila=Loader.isModLoaded(Names.Mods.waila);
  chococraft=Loader.isModLoaded(Names.Mods.chococraft);
  mcMultipart=Loader.isModLoaded(Names.Mods.mcMultipart);
  minetweaker=Loader.isModLoaded(Names.Mods.minetweaker);
  extraUtilities=Loader.isModLoaded(Names.Mods.extraUtilities);
  botania=Loader.isModLoaded(Names.Mods.botania);
  tconstruct=Loader.isModLoaded(Names.Mods.tconstruct);
  LogHelper.info(""String_Node_Str"");
  LogHelper.info(""String_Node_Str"" + nei);
  LogHelper.info(""String_Node_Str"" + harvestcraft);
  LogHelper.info(""String_Node_Str"" + natura);
  LogHelper.info(""String_Node_Str"" + weeeFlowers);
  LogHelper.info(""String_Node_Str"" + forestry);
  LogHelper.info(""String_Node_Str"" + thaumicTinkerer);
  LogHelper.info(""String_Node_Str"" + hungerOverhaul);
  LogHelper.info(""String_Node_Str"" + exNihilo);
  LogHelper.info(""String_Node_Str"" + plantMegaPack);
  LogHelper.info(""String_Node_Str"" + magicalCrops);
  LogHelper.info(""String_Node_Str"" + railcraft);
  LogHelper.info(""String_Node_Str"" + thaumcraft);
  LogHelper.info(""String_Node_Str"" + mfr);
  LogHelper.info(""String_Node_Str"" + waila);
  LogHelper.info(""String_Node_Str"" + chococraft);
  LogHelper.info(""String_Node_Str"" + mcMultipart);
  LogHelper.info(""String_Node_Str"" + minetweaker);
  LogHelper.info(""String_Node_Str"" + extraUtilities);
  LogHelper.info(""String_Node_Str"" + botania);
  LogHelper.info(""String_Node_Str"" + tconstruct);
  LogHelper.info(""String_Node_Str"");
}","public static void init(){
  nei=Loader.isModLoaded(Names.Mods.nei);
  harvestcraft=Loader.isModLoaded(Names.Mods.harvestcraft);
  natura=Loader.isModLoaded(Names.Mods.natura);
  weeeFlowers=Loader.isModLoaded(Names.Mods.weeeFlowers);
  forestry=Loader.isModLoaded(Names.Mods.forestry);
  thaumicTinkerer=Loader.isModLoaded(Names.Mods.thaumicTinkerer);
  hungerOverhaul=Loader.isModLoaded(Names.Mods.hungerOverhaul);
  exNihilo=Loader.isModLoaded(Names.Mods.exNihilo);
  plantMegaPack=Loader.isModLoaded(Names.Mods.plantMegaPack);
  magicalCrops=Loader.isModLoaded(Names.Mods.magicalCrops);
  railcraft=Loader.isModLoaded(Names.Mods.railcraft);
  thaumcraft=Loader.isModLoaded(Names.Mods.thaumcraft);
  mfr=Loader.isModLoaded(Names.Mods.mfr);
  waila=Loader.isModLoaded(Names.Mods.waila);
  chococraft=Loader.isModLoaded(Names.Mods.chococraft);
  mcMultipart=Loader.isModLoaded(Names.Mods.mcMultipart);
  minetweaker=Loader.isModLoaded(Names.Mods.minetweaker);
  extraUtilities=Loader.isModLoaded(Names.Mods.extraUtilities);
  botania=Loader.isModLoaded(Names.Mods.botania);
  tconstruct=Loader.isModLoaded(Names.Mods.tconstruct);
  LogHelper.debug(""String_Node_Str"");
  LogHelper.debug(""String_Node_Str"" + nei);
  LogHelper.debug(""String_Node_Str"" + harvestcraft);
  LogHelper.debug(""String_Node_Str"" + natura);
  LogHelper.debug(""String_Node_Str"" + weeeFlowers);
  LogHelper.debug(""String_Node_Str"" + forestry);
  LogHelper.debug(""String_Node_Str"" + thaumicTinkerer);
  LogHelper.debug(""String_Node_Str"" + hungerOverhaul);
  LogHelper.debug(""String_Node_Str"" + exNihilo);
  LogHelper.debug(""String_Node_Str"" + plantMegaPack);
  LogHelper.debug(""String_Node_Str"" + magicalCrops);
  LogHelper.debug(""String_Node_Str"" + railcraft);
  LogHelper.debug(""String_Node_Str"" + thaumcraft);
  LogHelper.debug(""String_Node_Str"" + mfr);
  LogHelper.debug(""String_Node_Str"" + waila);
  LogHelper.debug(""String_Node_Str"" + chococraft);
  LogHelper.debug(""String_Node_Str"" + mcMultipart);
  LogHelper.debug(""String_Node_Str"" + minetweaker);
  LogHelper.debug(""String_Node_Str"" + extraUtilities);
  LogHelper.debug(""String_Node_Str"" + botania);
  LogHelper.debug(""String_Node_Str"" + tconstruct);
  LogHelper.debug(""String_Node_Str"");
}"
95702,"private static void hideItems(){
  LogHelper.info(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Blocks.blockCrop,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Blocks.blockSprinkler,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.potato,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.carrot,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.melon,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.pumpkin,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.sugarcane,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.dandelion,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.poppy,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.orchid,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.allium,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.tulipRed,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.tulipOrange,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.tulipWhite,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.tulipPink,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.daisy,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.cactus,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.shroomRed,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.shroomBrown,1,i));
    if (ConfigurationHandler.integration_Botania) {
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaWhite,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaOrange,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaMagenta,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaLightBlue,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaYellow,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaLime,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaPink,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaGray,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaLightGray,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaCyan,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaPurple,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaBlue,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaBrown,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaGreen,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaRed,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaBlack,1,i));
    }
    if (ConfigurationHandler.resourcePlants) {
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.diamahlia,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.ferranium,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.aurigold,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.lapender,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.emeryllis,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.redstodendron,1,i));
      if (OreDictHelper.oreCopper != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.cuprosia,1,i));
      }
      if (OreDictHelper.oreTin != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.petinia,1,i));
      }
      if (OreDictHelper.oreLead != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.plombean,1,i));
      }
      if (OreDictHelper.oreSilver != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.silverweed,1,i));
      }
      if (OreDictHelper.oreAluminum != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.jaslumine,1,i));
      }
      if (OreDictHelper.oreNickel != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.niccissus,1,i));
      }
      if (OreDictHelper.orePlatinum != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.platiolus,1,i));
      }
      if (OreDictHelper.oreOsmium != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.osmonium,1,i));
      }
    }
    if (ConfigurationHandler.customCrops) {
      for (      BlockModPlant customCrop : CustomCrops.customCrops) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(customCrop,1,i));
      }
    }
    if (ConfigurationHandler.debug) {
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Items.debugItem,1,i));
    }
  }
}","private static void hideItems(){
  LogHelper.debug(""String_Node_Str"");
  for (int i=0; i < 16; i++) {
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Blocks.blockCrop,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Blocks.blockSprinkler,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.potato,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.carrot,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.melon,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.pumpkin,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.sugarcane,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.dandelion,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.poppy,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.orchid,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.allium,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.tulipRed,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.tulipOrange,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.tulipWhite,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.tulipPink,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.daisy,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.cactus,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.shroomRed,1,i));
    AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.shroomBrown,1,i));
    if (ConfigurationHandler.integration_Botania) {
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaWhite,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaOrange,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaMagenta,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaLightBlue,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaYellow,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaLime,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaPink,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaGray,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaLightGray,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaCyan,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaPurple,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaBlue,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaBrown,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaGreen,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaRed,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Crops.botaniaBlack,1,i));
    }
    if (ConfigurationHandler.resourcePlants) {
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.diamahlia,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.ferranium,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.aurigold,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.lapender,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.emeryllis,1,i));
      AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.redstodendron,1,i));
      if (OreDictHelper.oreCopper != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.cuprosia,1,i));
      }
      if (OreDictHelper.oreTin != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.petinia,1,i));
      }
      if (OreDictHelper.oreLead != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.plombean,1,i));
      }
      if (OreDictHelper.oreSilver != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.silverweed,1,i));
      }
      if (OreDictHelper.oreAluminum != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.jaslumine,1,i));
      }
      if (OreDictHelper.oreNickel != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.niccissus,1,i));
      }
      if (OreDictHelper.orePlatinum != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.platiolus,1,i));
      }
      if (OreDictHelper.oreOsmium != null) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(ResourceCrops.osmonium,1,i));
      }
    }
    if (ConfigurationHandler.customCrops) {
      for (      BlockModPlant customCrop : CustomCrops.customCrops) {
        AgriCraft.proxy.hideItemInNEI(new ItemStack(customCrop,1,i));
      }
    }
    if (ConfigurationHandler.debug) {
      AgriCraft.proxy.hideItemInNEI(new ItemStack(Items.debugItem,1,i));
    }
  }
}"
95703,"@Override public void loadConfig(){
  if (ModIntegration.LoadedMods.nei) {
    if (ConfigurationHandler.enableNEI) {
      LogHelper.info(""String_Node_Str"");
      API.registerRecipeHandler(new NEICropMutationHandler());
      API.registerUsageHandler(new NEICropMutationHandler());
    }
    hideItems();
  }
}","@Override public void loadConfig(){
  if (ModIntegration.LoadedMods.nei) {
    if (ConfigurationHandler.enableNEI) {
      LogHelper.debug(""String_Node_Str"");
      API.registerRecipeHandler(new NEICropMutationHandler());
      API.registerUsageHandler(new NEICropMutationHandler());
    }
    hideItems();
  }
}"
95704,"public static void init(FMLPreInitializationEvent event){
  directory=event.getModConfigurationDirectory().toString() + '/' + Reference.MOD_ID.toLowerCase()+ '/';
  if (config == null) {
    config=new Configuration(new File(directory,""String_Node_Str""));
    loadConfiguration();
  }
  LogHelper.info(""String_Node_Str"");
}","public static void init(FMLPreInitializationEvent event){
  directory=event.getModConfigurationDirectory().toString() + '/' + Reference.MOD_ID.toLowerCase()+ '/';
  if (config == null) {
    config=new Configuration(new File(directory,""String_Node_Str""));
    loadConfiguration();
  }
  LogHelper.debug(""String_Node_Str"");
}"
95705,"@SubscribeEvent public void onCOnfigurationChangedEvent(ConfigChangedEvent.OnConfigChangedEvent event){
  if (event.modID.equals(Reference.MOD_ID)) {
    loadConfiguration();
    LogHelper.info(""String_Node_Str"");
  }
}","@SubscribeEvent public void onCOnfigurationChangedEvent(ConfigChangedEvent.OnConfigChangedEvent event){
  if (event.modID.equals(Reference.MOD_ID)) {
    loadConfiguration();
    LogHelper.debug(""String_Node_Str"");
  }
}"
95706,"public static void init(){
  blockCrop=new BlockCrop();
  RegisterHelper.registerBlock(blockCrop,Names.Objects.crops);
  seedAnalyzer=new BlockSeedAnalyzer();
  RegisterHelper.registerBlock(seedAnalyzer,Names.Objects.seedAnalyzer);
  if (!ConfigurationHandler.disableIrrigation) {
    blockWaterTank=new BlockWaterTank();
    RegisterHelper.registerBlock(blockWaterTank,Names.Objects.tank,ItemBlockCustomWood.class);
    blockWaterChannel=new BlockWaterChannel();
    RegisterHelper.registerBlock(blockWaterChannel,Names.Objects.channel,ItemBlockCustomWood.class);
    blockChannelValve=new BlockChannelValve();
    RegisterHelper.registerBlock(blockChannelValve,Names.Objects.valve,ItemBlockCustomWood.class);
    blockSprinkler=new BlockSprinkler();
    RegisterHelper.registerBlock(blockSprinkler,Names.Objects.sprinkler);
  }
  if (!ConfigurationHandler.disableSeedStorage) {
    blockSeedStorage=new BlockSeedStorage();
    RegisterHelper.registerBlock(blockSeedStorage,Names.Objects.seedStorage,ItemBlockCustomWood.class);
    if (!ConfigurationHandler.disableSeedWarehouse) {
      blockSeedStorageController=new BlockSeedStorageController();
      RegisterHelper.registerBlock(blockSeedStorageController,Names.Objects.seedStorageController,ItemBlockCustomWood.class);
    }
  }
  LogHelper.info(""String_Node_Str"");
}","public static void init(){
  blockCrop=new BlockCrop();
  RegisterHelper.registerBlock(blockCrop,Names.Objects.crops);
  seedAnalyzer=new BlockSeedAnalyzer();
  RegisterHelper.registerBlock(seedAnalyzer,Names.Objects.seedAnalyzer);
  if (!ConfigurationHandler.disableIrrigation) {
    blockWaterTank=new BlockWaterTank();
    RegisterHelper.registerBlock(blockWaterTank,Names.Objects.tank,ItemBlockCustomWood.class);
    blockWaterChannel=new BlockWaterChannel();
    RegisterHelper.registerBlock(blockWaterChannel,Names.Objects.channel,ItemBlockCustomWood.class);
    blockChannelValve=new BlockChannelValve();
    RegisterHelper.registerBlock(blockChannelValve,Names.Objects.valve,ItemBlockCustomWood.class);
    blockSprinkler=new BlockSprinkler();
    RegisterHelper.registerBlock(blockSprinkler,Names.Objects.sprinkler);
  }
  if (!ConfigurationHandler.disableSeedStorage) {
    blockSeedStorage=new BlockSeedStorage();
    RegisterHelper.registerBlock(blockSeedStorage,Names.Objects.seedStorage,ItemBlockCustomWood.class);
    if (!ConfigurationHandler.disableSeedWarehouse) {
      blockSeedStorageController=new BlockSeedStorageController();
      RegisterHelper.registerBlock(blockSeedStorageController,Names.Objects.seedStorageController,ItemBlockCustomWood.class);
    }
  }
  LogHelper.debug(""String_Node_Str"");
}"
95707,"public static void init(){
  potato=new BlockModPlant(net.minecraft.init.Items.potato);
  carrot=new BlockModPlant(net.minecraft.init.Items.carrot);
  melon=new BlockModPlant(net.minecraft.init.Items.melon);
  pumpkin=new BlockModPlant(Item.getItemFromBlock(Blocks.pumpkin));
  sugarcane=new BlockModPlant(net.minecraft.init.Blocks.sand,net.minecraft.init.Items.reeds);
  dandelion=new BlockModPlant(net.minecraft.init.Items.dye,11);
  poppy=new BlockModPlant(net.minecraft.init.Items.dye,1);
  orchid=new BlockModPlant(net.minecraft.init.Items.dye,12);
  allium=new BlockModPlant(net.minecraft.init.Items.dye,13);
  tulipRed=new BlockModPlant(net.minecraft.init.Items.dye,1,2);
  tulipOrange=new BlockModPlant(net.minecraft.init.Items.dye,14,2);
  tulipWhite=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  tulipPink=new BlockModPlant(net.minecraft.init.Items.dye,9,2);
  daisy=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  cactus=new BlockModPlant(Blocks.sand,ConfigurationHandler.cactusGivesCactus ? Item.getItemFromBlock(Blocks.cactus) : net.minecraft.init.Items.dye,2);
  shroomRed=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.red_mushroom));
  shroomBrown=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.brown_mushroom));
  RegisterHelper.registerBlock(potato,Names.Crops.cropPotato);
  RegisterHelper.registerBlock(carrot,Names.Crops.cropCarrot);
  RegisterHelper.registerBlock(melon,Names.Crops.cropMelon);
  RegisterHelper.registerBlock(pumpkin,Names.Crops.cropPumpkin);
  RegisterHelper.registerBlock(sugarcane,Names.Crops.cropSugarcane);
  RegisterHelper.registerBlock(dandelion,Names.Crops.cropDandelion);
  RegisterHelper.registerBlock(poppy,Names.Crops.cropPoppy);
  RegisterHelper.registerBlock(orchid,Names.Crops.cropOrchid);
  RegisterHelper.registerBlock(allium,Names.Crops.cropAllium);
  RegisterHelper.registerBlock(tulipRed,Names.Crops.cropTulipRed);
  RegisterHelper.registerBlock(tulipOrange,Names.Crops.cropTulipOrange);
  RegisterHelper.registerBlock(tulipWhite,Names.Crops.cropTulipWhite);
  RegisterHelper.registerBlock(tulipPink,Names.Crops.cropTulipPink);
  RegisterHelper.registerBlock(daisy,Names.Crops.cropDaisy);
  RegisterHelper.registerBlock(cactus,Names.Crops.cropCactus);
  RegisterHelper.registerBlock(shroomRed,Names.Crops.cropShroomRed);
  RegisterHelper.registerBlock(shroomBrown,Names.Crops.cropShroomBrown);
  LogHelper.info(""String_Node_Str"");
}","public static void init(){
  potato=new BlockModPlant(net.minecraft.init.Items.potato);
  carrot=new BlockModPlant(net.minecraft.init.Items.carrot);
  melon=new BlockModPlant(net.minecraft.init.Items.melon);
  pumpkin=new BlockModPlant(Item.getItemFromBlock(Blocks.pumpkin));
  sugarcane=new BlockModPlant(net.minecraft.init.Blocks.sand,net.minecraft.init.Items.reeds);
  dandelion=new BlockModPlant(net.minecraft.init.Items.dye,11);
  poppy=new BlockModPlant(net.minecraft.init.Items.dye,1);
  orchid=new BlockModPlant(net.minecraft.init.Items.dye,12);
  allium=new BlockModPlant(net.minecraft.init.Items.dye,13);
  tulipRed=new BlockModPlant(net.minecraft.init.Items.dye,1,2);
  tulipOrange=new BlockModPlant(net.minecraft.init.Items.dye,14,2);
  tulipWhite=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  tulipPink=new BlockModPlant(net.minecraft.init.Items.dye,9,2);
  daisy=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  cactus=new BlockModPlant(Blocks.sand,ConfigurationHandler.cactusGivesCactus ? Item.getItemFromBlock(Blocks.cactus) : net.minecraft.init.Items.dye,2);
  shroomRed=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.red_mushroom));
  shroomBrown=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.brown_mushroom));
  RegisterHelper.registerBlock(potato,Names.Crops.cropPotato);
  RegisterHelper.registerBlock(carrot,Names.Crops.cropCarrot);
  RegisterHelper.registerBlock(melon,Names.Crops.cropMelon);
  RegisterHelper.registerBlock(pumpkin,Names.Crops.cropPumpkin);
  RegisterHelper.registerBlock(sugarcane,Names.Crops.cropSugarcane);
  RegisterHelper.registerBlock(dandelion,Names.Crops.cropDandelion);
  RegisterHelper.registerBlock(poppy,Names.Crops.cropPoppy);
  RegisterHelper.registerBlock(orchid,Names.Crops.cropOrchid);
  RegisterHelper.registerBlock(allium,Names.Crops.cropAllium);
  RegisterHelper.registerBlock(tulipRed,Names.Crops.cropTulipRed);
  RegisterHelper.registerBlock(tulipOrange,Names.Crops.cropTulipOrange);
  RegisterHelper.registerBlock(tulipWhite,Names.Crops.cropTulipWhite);
  RegisterHelper.registerBlock(tulipPink,Names.Crops.cropTulipPink);
  RegisterHelper.registerBlock(daisy,Names.Crops.cropDaisy);
  RegisterHelper.registerBlock(cactus,Names.Crops.cropCactus);
  RegisterHelper.registerBlock(shroomRed,Names.Crops.cropShroomRed);
  RegisterHelper.registerBlock(shroomBrown,Names.Crops.cropShroomBrown);
  LogHelper.debug(""String_Node_Str"");
}"
95708,"public static void initBotaniaCrops(){
  if (ModIntegration.LoadedMods.botania && ConfigurationHandler.integration_Botania) {
    botaniaWhite=new BlockModPlant(ModItems.petal,0,3,1);
    botaniaOrange=new BlockModPlant(ModItems.petal,1,3,1);
    botaniaMagenta=new BlockModPlant(ModItems.petal,2,3,1);
    botaniaLightBlue=new BlockModPlant(ModItems.petal,3,3,1);
    botaniaYellow=new BlockModPlant(ModItems.petal,4,3,1);
    botaniaLime=new BlockModPlant(ModItems.petal,5,3,1);
    botaniaPink=new BlockModPlant(ModItems.petal,6,3,1);
    botaniaGray=new BlockModPlant(ModItems.petal,7,3,1);
    botaniaLightGray=new BlockModPlant(ModItems.petal,8,3,1);
    botaniaCyan=new BlockModPlant(ModItems.petal,9,3,1);
    botaniaPurple=new BlockModPlant(ModItems.petal,10,3,1);
    botaniaBlue=new BlockModPlant(ModItems.petal,11,3,1);
    botaniaBrown=new BlockModPlant(ModItems.petal,12,3,1);
    botaniaGreen=new BlockModPlant(ModItems.petal,13,3,1);
    botaniaRed=new BlockModPlant(ModItems.petal,14,3,1);
    botaniaBlack=new BlockModPlant(ModItems.petal,15,3,1);
    RegisterHelper.registerBlock(botaniaWhite,Names.Crops.cropBotaniaWhite);
    RegisterHelper.registerBlock(botaniaOrange,Names.Crops.cropBotaniaOrange);
    RegisterHelper.registerBlock(botaniaMagenta,Names.Crops.cropBotaniaMagenta);
    RegisterHelper.registerBlock(botaniaLightBlue,Names.Crops.cropBotaniaLightBlue);
    RegisterHelper.registerBlock(botaniaYellow,Names.Crops.cropBotaniaYellow);
    RegisterHelper.registerBlock(botaniaLime,Names.Crops.cropBotaniaLime);
    RegisterHelper.registerBlock(botaniaPink,Names.Crops.cropBotaniaPink);
    RegisterHelper.registerBlock(botaniaGray,Names.Crops.cropBotaniaGray);
    RegisterHelper.registerBlock(botaniaLightGray,Names.Crops.cropBotaniaLightGray);
    RegisterHelper.registerBlock(botaniaCyan,Names.Crops.cropBotaniaCyan);
    RegisterHelper.registerBlock(botaniaPurple,Names.Crops.cropBotaniaPurple);
    RegisterHelper.registerBlock(botaniaBlue,Names.Crops.cropBotaniaBlue);
    RegisterHelper.registerBlock(botaniaBrown,Names.Crops.cropBotaniaBrown);
    RegisterHelper.registerBlock(botaniaGreen,Names.Crops.cropBotaniaGreen);
    RegisterHelper.registerBlock(botaniaRed,Names.Crops.cropBotaniaRed);
    RegisterHelper.registerBlock(botaniaBlack,Names.Crops.cropBotaniaBlack);
    Seeds.initBotaniaSeeds();
    LogHelper.info(""String_Node_Str"");
  }
}","public static void initBotaniaCrops(){
  if (ModIntegration.LoadedMods.botania && ConfigurationHandler.integration_Botania) {
    botaniaWhite=new BlockModPlant(ModItems.petal,0,3,1);
    botaniaOrange=new BlockModPlant(ModItems.petal,1,3,1);
    botaniaMagenta=new BlockModPlant(ModItems.petal,2,3,1);
    botaniaLightBlue=new BlockModPlant(ModItems.petal,3,3,1);
    botaniaYellow=new BlockModPlant(ModItems.petal,4,3,1);
    botaniaLime=new BlockModPlant(ModItems.petal,5,3,1);
    botaniaPink=new BlockModPlant(ModItems.petal,6,3,1);
    botaniaGray=new BlockModPlant(ModItems.petal,7,3,1);
    botaniaLightGray=new BlockModPlant(ModItems.petal,8,3,1);
    botaniaCyan=new BlockModPlant(ModItems.petal,9,3,1);
    botaniaPurple=new BlockModPlant(ModItems.petal,10,3,1);
    botaniaBlue=new BlockModPlant(ModItems.petal,11,3,1);
    botaniaBrown=new BlockModPlant(ModItems.petal,12,3,1);
    botaniaGreen=new BlockModPlant(ModItems.petal,13,3,1);
    botaniaRed=new BlockModPlant(ModItems.petal,14,3,1);
    botaniaBlack=new BlockModPlant(ModItems.petal,15,3,1);
    RegisterHelper.registerBlock(botaniaWhite,Names.Crops.cropBotaniaWhite);
    RegisterHelper.registerBlock(botaniaOrange,Names.Crops.cropBotaniaOrange);
    RegisterHelper.registerBlock(botaniaMagenta,Names.Crops.cropBotaniaMagenta);
    RegisterHelper.registerBlock(botaniaLightBlue,Names.Crops.cropBotaniaLightBlue);
    RegisterHelper.registerBlock(botaniaYellow,Names.Crops.cropBotaniaYellow);
    RegisterHelper.registerBlock(botaniaLime,Names.Crops.cropBotaniaLime);
    RegisterHelper.registerBlock(botaniaPink,Names.Crops.cropBotaniaPink);
    RegisterHelper.registerBlock(botaniaGray,Names.Crops.cropBotaniaGray);
    RegisterHelper.registerBlock(botaniaLightGray,Names.Crops.cropBotaniaLightGray);
    RegisterHelper.registerBlock(botaniaCyan,Names.Crops.cropBotaniaCyan);
    RegisterHelper.registerBlock(botaniaPurple,Names.Crops.cropBotaniaPurple);
    RegisterHelper.registerBlock(botaniaBlue,Names.Crops.cropBotaniaBlue);
    RegisterHelper.registerBlock(botaniaBrown,Names.Crops.cropBotaniaBrown);
    RegisterHelper.registerBlock(botaniaGreen,Names.Crops.cropBotaniaGreen);
    RegisterHelper.registerBlock(botaniaRed,Names.Crops.cropBotaniaRed);
    RegisterHelper.registerBlock(botaniaBlack,Names.Crops.cropBotaniaBlack);
    Seeds.initBotaniaSeeds();
    LogHelper.debug(""String_Node_Str"");
  }
}"
95709,"public static void init(){
  crops=new ItemCrop();
  RegisterHelper.registerItem(crops,Names.Objects.crops + ""String_Node_Str"");
  journal=new ItemJournal();
  RegisterHelper.registerItem(journal,Names.Objects.journal);
  trowel=new ItemTrowel();
  RegisterHelper.registerItem(trowel,Names.Objects.trowel);
  magnifyingGlass=new ItemMagnifyingGlass();
  RegisterHelper.registerItem(magnifyingGlass,Names.Objects.magnifyingGlass);
  if (!ConfigurationHandler.disableIrrigation) {
    sprinkler=new ItemSprinkler();
    RegisterHelper.registerItem(sprinkler,Names.Objects.sprinkler + ""String_Node_Str"");
  }
  debugItem=new ItemDebugger();
  RegisterHelper.registerItem(debugItem,""String_Node_Str"");
  if (ConfigurationHandler.enableHandRake) {
    handRake=new ItemHandRake();
    RegisterHelper.registerItem(handRake,Names.Objects.handRake);
  }
  LogHelper.info(""String_Node_Str"");
}","public static void init(){
  crops=new ItemCrop();
  RegisterHelper.registerItem(crops,Names.Objects.crops + ""String_Node_Str"");
  journal=new ItemJournal();
  RegisterHelper.registerItem(journal,Names.Objects.journal);
  trowel=new ItemTrowel();
  RegisterHelper.registerItem(trowel,Names.Objects.trowel);
  magnifyingGlass=new ItemMagnifyingGlass();
  RegisterHelper.registerItem(magnifyingGlass,Names.Objects.magnifyingGlass);
  if (!ConfigurationHandler.disableIrrigation) {
    sprinkler=new ItemSprinkler();
    RegisterHelper.registerItem(sprinkler,Names.Objects.sprinkler + ""String_Node_Str"");
  }
  debugItem=new ItemDebugger();
  RegisterHelper.registerItem(debugItem,""String_Node_Str"");
  if (ConfigurationHandler.enableHandRake) {
    handRake=new ItemHandRake();
    RegisterHelper.registerItem(handRake,Names.Objects.handRake);
  }
  LogHelper.debug(""String_Node_Str"");
}"
95710,"public static void init(){
  GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.crops,ConfigurationHandler.cropsPerCraft),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  if (ConfigurationHandler.cropsPerCraft == 3) {
    GameRegistry.addShapelessRecipe(new ItemStack(net.minecraft.init.Items.stick,6 / ConfigurationHandler.cropsPerCraft),new ItemStack(Items.crops),new ItemStack(Items.crops));
  }
 else {
    GameRegistry.addShapelessRecipe(new ItemStack(net.minecraft.init.Items.stick,4 / ConfigurationHandler.cropsPerCraft),new ItemStack(Items.crops));
  }
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Blocks.seedAnalyzer,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str"",'g',""String_Node_Str"",'b',net.minecraft.init.Blocks.stone_slab,'p',""String_Node_Str"",'w',""String_Node_Str""));
  GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedPotato),new ItemStack(net.minecraft.init.Items.potato));
  GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedCarrot),new ItemStack(net.minecraft.init.Items.carrot));
  if (ModIntegration.LoadedMods.exNihilo) {
    GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedPotato),new ItemStack(ExNihiloHelper.seedPotato));
    GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedCarrot),new ItemStack(ExNihiloHelper.seedCarrot));
    GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedSugarcane),new ItemStack(ExNihiloHelper.seedSugarCane));
    GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedCactus),new ItemStack(ExNihiloHelper.seedCactus));
  }
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.journal,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'c',Items.crops,'s',Names.OreDict.listAllseed,'b',net.minecraft.init.Items.writable_book));
  GameRegistry.addRecipe(new RecipeJournal());
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.trowel,1,0),""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str"",'i',""String_Node_Str""));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.magnifyingGlass,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str"",'g',""String_Node_Str""));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.handRake,1,0),""String_Node_Str"",'f',net.minecraft.init.Blocks.fence,'s',""String_Node_Str""));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.handRake,1,1),""String_Node_Str"",'f',net.minecraft.init.Blocks.iron_bars,'s',""String_Node_Str""));
  if (!ConfigurationHandler.disableIrrigation) {
    ((ItemBlockCustomWood)Item.getItemFromBlock(Blocks.blockWaterTank)).getSubItems(woodList);
    registerCustomWoodRecipes();
    RegisterHelper.removeRecipe(new ItemStack(net.minecraft.init.Items.bowl));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.bowl,4),""String_Node_Str"",""String_Node_Str"",'w',Names.OreDict.slabWood));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.sprinkler,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'w',""String_Node_Str"",'i',""String_Node_Str"",'b',net.minecraft.init.Blocks.iron_bars,'c',net.minecraft.init.Items.bucket));
  }
  if (ConfigurationHandler.resourcePlants) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.diamond,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
    GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetDiamond,9),""String_Node_Str""));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.emerald,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
    GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetEmerald,9),""String_Node_Str""));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.iron_ingot,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
    GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetIron,9),""String_Node_Str""));
    if (Items.nuggetCopper instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetCopper);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetCopper,9),Names.Ingots.ingotCopper));
      }
    }
    if (Items.nuggetTin instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetTin);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetTin,9),Names.Ingots.ingotTin));
      }
    }
    if (Items.nuggetLead instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetLead);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetLead,9),Names.Ingots.ingotLead));
      }
    }
    if (Items.nuggetSilver instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetSilver);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetSilver,9),Names.Ingots.ingotSilver));
      }
    }
    if (Items.nuggetAluminum instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetAluminum);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetAluminum,9),Names.Ingots.ingotAluminum));
      }
    }
    if (Items.nuggetNickel instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetNickel);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetNickel,9),Names.Ingots.ingotNickel));
      }
    }
    if (Items.nuggetPlatinum instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetPlatinum);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetPlatinum,9),Names.Ingots.ingotPlatinum));
      }
    }
    if (Items.nuggetOsmium instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetOsmium);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetOsmium,9),Names.Ingots.ingotOsmium));
      }
    }
  }
  LogHelper.info(""String_Node_Str"");
}","public static void init(){
  GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.crops,ConfigurationHandler.cropsPerCraft),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  if (ConfigurationHandler.cropsPerCraft == 3) {
    GameRegistry.addShapelessRecipe(new ItemStack(net.minecraft.init.Items.stick,6 / ConfigurationHandler.cropsPerCraft),new ItemStack(Items.crops),new ItemStack(Items.crops));
  }
 else {
    GameRegistry.addShapelessRecipe(new ItemStack(net.minecraft.init.Items.stick,4 / ConfigurationHandler.cropsPerCraft),new ItemStack(Items.crops));
  }
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Blocks.seedAnalyzer,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str"",'g',""String_Node_Str"",'b',net.minecraft.init.Blocks.stone_slab,'p',""String_Node_Str"",'w',""String_Node_Str""));
  GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedPotato),new ItemStack(net.minecraft.init.Items.potato));
  GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedCarrot),new ItemStack(net.minecraft.init.Items.carrot));
  if (ModIntegration.LoadedMods.exNihilo) {
    GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedPotato),new ItemStack(ExNihiloHelper.seedPotato));
    GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedCarrot),new ItemStack(ExNihiloHelper.seedCarrot));
    GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedSugarcane),new ItemStack(ExNihiloHelper.seedSugarCane));
    GameRegistry.addShapelessRecipe(new ItemStack(Seeds.seedCactus),new ItemStack(ExNihiloHelper.seedCactus));
  }
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.journal,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'c',Items.crops,'s',Names.OreDict.listAllseed,'b',net.minecraft.init.Items.writable_book));
  GameRegistry.addRecipe(new RecipeJournal());
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.trowel,1,0),""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str"",'i',""String_Node_Str""));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.magnifyingGlass,1,0),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'s',""String_Node_Str"",'g',""String_Node_Str""));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.handRake,1,0),""String_Node_Str"",'f',net.minecraft.init.Blocks.fence,'s',""String_Node_Str""));
  GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.handRake,1,1),""String_Node_Str"",'f',net.minecraft.init.Blocks.iron_bars,'s',""String_Node_Str""));
  if (!ConfigurationHandler.disableIrrigation) {
    ((ItemBlockCustomWood)Item.getItemFromBlock(Blocks.blockWaterTank)).getSubItems(woodList);
    registerCustomWoodRecipes();
    RegisterHelper.removeRecipe(new ItemStack(net.minecraft.init.Items.bowl));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.bowl,4),""String_Node_Str"",""String_Node_Str"",'w',Names.OreDict.slabWood));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(Items.sprinkler,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'w',""String_Node_Str"",'i',""String_Node_Str"",'b',net.minecraft.init.Blocks.iron_bars,'c',net.minecraft.init.Items.bucket));
  }
  if (ConfigurationHandler.resourcePlants) {
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.diamond,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
    GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetDiamond,9),""String_Node_Str""));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.emerald,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
    GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetEmerald,9),""String_Node_Str""));
    GameRegistry.addRecipe(new ShapedOreRecipe(new ItemStack(net.minecraft.init.Items.iron_ingot,1),""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
    GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetIron,9),""String_Node_Str""));
    if (Items.nuggetCopper instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetCopper);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetCopper,9),Names.Ingots.ingotCopper));
      }
    }
    if (Items.nuggetTin instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetTin);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetTin,9),Names.Ingots.ingotTin));
      }
    }
    if (Items.nuggetLead instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetLead);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetLead,9),Names.Ingots.ingotLead));
      }
    }
    if (Items.nuggetSilver instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetSilver);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetSilver,9),Names.Ingots.ingotSilver));
      }
    }
    if (Items.nuggetAluminum instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetAluminum);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetAluminum,9),Names.Ingots.ingotAluminum));
      }
    }
    if (Items.nuggetNickel instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetNickel);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetNickel,9),Names.Ingots.ingotNickel));
      }
    }
    if (Items.nuggetPlatinum instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetPlatinum);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetPlatinum,9),Names.Ingots.ingotPlatinum));
      }
    }
    if (Items.nuggetOsmium instanceof ModItem) {
      ItemStack ingot=OreDictHelper.getIngot(Names.Nuggets.nuggetOsmium);
      if (ingot != null && ingot.getItem() != null) {
        GameRegistry.addRecipe(new ShapedOreRecipe(ingot,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",'n',""String_Node_Str""));
        GameRegistry.addRecipe(new ShapelessOreRecipe(new ItemStack(Items.nuggetOsmium,9),Names.Ingots.ingotOsmium));
      }
    }
  }
  LogHelper.debug(""String_Node_Str"");
}"
95711,"public static void init(){
  seedPotato=new ItemModSeed(Crops.potato,SeedInformation.potato);
  seedCarrot=new ItemModSeed(Crops.carrot,SeedInformation.carrot);
  seedSugarcane=new ItemModSeed(Crops.sugarcane,SeedInformation.sugarcane);
  seedDandelion=new ItemModSeed(Crops.dandelion,SeedInformation.dandelion);
  seedPoppy=new ItemModSeed(Crops.poppy,SeedInformation.poppy);
  seedOrchid=new ItemModSeed(Crops.orchid,SeedInformation.orchid);
  seedAllium=new ItemModSeed(Crops.allium,SeedInformation.allium);
  seedTulipRed=new ItemModSeed(Crops.tulipRed,SeedInformation.tulipRed);
  seedTulipOrange=new ItemModSeed(Crops.tulipOrange,SeedInformation.tulipOrange);
  seedTulipWhite=new ItemModSeed(Crops.tulipWhite,SeedInformation.tulipWhite);
  seedTulipPink=new ItemModSeed(Crops.tulipPink,SeedInformation.tulipPink);
  seedDaisy=new ItemModSeed(Crops.daisy,SeedInformation.daisy);
  seedCactus=new ItemModSeed(Crops.cactus,SeedInformation.cactus);
  seedShroomRed=new ItemModSeed(Crops.shroomRed,SeedInformation.shroomRed);
  seedShroomBrown=new ItemModSeed(Crops.shroomBrown,SeedInformation.shroomBrown);
  RegisterHelper.registerSeed(seedPotato,Names.Seeds.seedPotato,Crops.potato);
  RegisterHelper.registerSeed(seedCarrot,Names.Seeds.seedCarrot,Crops.carrot);
  RegisterHelper.registerSeed(seedSugarcane,Names.Seeds.seedSugarcane,Crops.sugarcane);
  RegisterHelper.registerSeed(seedDandelion,Names.Seeds.seedDandelion,Crops.dandelion);
  RegisterHelper.registerSeed(seedPoppy,Names.Seeds.seedPoppy,Crops.poppy);
  RegisterHelper.registerSeed(seedOrchid,Names.Seeds.seedOrchid,Crops.orchid);
  RegisterHelper.registerSeed(seedAllium,Names.Seeds.seedAllium,Crops.allium);
  RegisterHelper.registerSeed(seedTulipRed,Names.Seeds.seedTulipRed,Crops.tulipRed);
  RegisterHelper.registerSeed(seedTulipOrange,Names.Seeds.seedTulipOrange,Crops.tulipOrange);
  RegisterHelper.registerSeed(seedTulipWhite,Names.Seeds.seedTulipWhite,Crops.tulipWhite);
  RegisterHelper.registerSeed(seedTulipPink,Names.Seeds.seedTulipPink,Crops.tulipPink);
  RegisterHelper.registerSeed(seedDaisy,Names.Seeds.seedDaisy,Crops.daisy);
  RegisterHelper.registerSeed(seedCactus,Names.Seeds.seedCactus,Crops.cactus);
  RegisterHelper.registerSeed(seedShroomRed,Names.Seeds.seedShroomRed,Crops.shroomRed);
  RegisterHelper.registerSeed(seedShroomBrown,Names.Seeds.seedShroomBrown,Crops.shroomBrown);
  if (ConfigurationHandler.resourcePlants) {
    seedDiamahlia=new ItemModSeed(ResourceCrops.diamahlia,SeedInformation.diamahlia);
    seedFerranium=new ItemModSeed(ResourceCrops.ferranium,SeedInformation.ferranium);
    seedAurigold=new ItemModSeed(ResourceCrops.aurigold,SeedInformation.aurigold);
    seedLapender=new ItemModSeed(ResourceCrops.lapender,SeedInformation.lapender);
    seedEmeryllis=new ItemModSeed(ResourceCrops.emeryllis,SeedInformation.emeryllis);
    seedRedstodendron=new ItemModSeed(ResourceCrops.redstodendron,SeedInformation.redstodendron);
    RegisterHelper.registerSeed(seedFerranium,Names.Seeds.seedFerranium,ResourceCrops.ferranium);
    RegisterHelper.registerSeed(seedDiamahlia,Names.Seeds.seedDiamahlia,ResourceCrops.diamahlia);
    RegisterHelper.registerSeed(seedAurigold,Names.Seeds.seedAurigold,ResourceCrops.aurigold);
    RegisterHelper.registerSeed(seedLapender,Names.Seeds.seedLapender,ResourceCrops.lapender);
    RegisterHelper.registerSeed(seedEmeryllis,Names.Seeds.seedEmeryllis,ResourceCrops.emeryllis);
    RegisterHelper.registerSeed(seedRedstodendron,Names.Seeds.seedRedstodendron,ResourceCrops.redstodendron);
    if (OreDictHelper.oreCopper != null) {
      seedCuprosia=new ItemModSeed(ResourceCrops.cuprosia,SeedInformation.cuprosia);
      RegisterHelper.registerSeed(seedCuprosia,Names.Seeds.seedCuprosia,ResourceCrops.cuprosia);
    }
    if (OreDictHelper.oreTin != null) {
      seedPetinia=new ItemModSeed(ResourceCrops.petinia,SeedInformation.petinia);
      RegisterHelper.registerSeed(seedPetinia,Names.Seeds.seedPetinia,ResourceCrops.petinia);
    }
    if (OreDictHelper.oreLead != null) {
      seedPlombean=new ItemModSeed(ResourceCrops.plombean,SeedInformation.plombean);
      RegisterHelper.registerSeed(seedPlombean,Names.Seeds.seedPlombean,ResourceCrops.plombean);
    }
    if (OreDictHelper.oreSilver != null) {
      seedSilverweed=new ItemModSeed(ResourceCrops.silverweed,SeedInformation.silverweed);
      RegisterHelper.registerSeed(seedSilverweed,Names.Seeds.seedSilverweed,ResourceCrops.silverweed);
    }
    if (OreDictHelper.oreAluminum != null) {
      seedJaslumine=new ItemModSeed(ResourceCrops.jaslumine,SeedInformation.jaslumine);
      RegisterHelper.registerSeed(seedJaslumine,Names.Seeds.seedJaslumine,ResourceCrops.jaslumine);
    }
    if (OreDictHelper.oreNickel != null) {
      seedNiccissus=new ItemModSeed(ResourceCrops.niccissus,SeedInformation.niccissus);
      RegisterHelper.registerSeed(seedNiccissus,Names.Seeds.seedNiccissus,ResourceCrops.niccissus);
    }
    if (OreDictHelper.orePlatinum != null) {
      seedPlatiolus=new ItemModSeed(ResourceCrops.platiolus,SeedInformation.platiolus);
      RegisterHelper.registerSeed(seedPlatiolus,Names.Seeds.seedPlatiolus,ResourceCrops.platiolus);
    }
    if (OreDictHelper.oreOsmium != null) {
      seedOsmonium=new ItemModSeed(ResourceCrops.osmonium,SeedInformation.osmonium);
      RegisterHelper.registerSeed(seedOsmonium,Names.Seeds.seedOsmonium,ResourceCrops.osmonium);
    }
  }
  if (ModIntegration.LoadedMods.natura) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,NContent.plantItem);
  }
  if (ModIntegration.LoadedMods.exNihilo) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,ExNihiloHelper.seedCarrot);
    OreDictionary.registerOre(Names.OreDict.listAllseed,ExNihiloHelper.seedPotato);
    OreDictionary.registerOre(Names.OreDict.listAllseed,ExNihiloHelper.seedSugarCane);
  }
  if (ModIntegration.LoadedMods.plantMegaPack) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
  }
  LogHelper.info(""String_Node_Str"");
}","public static void init(){
  seedPotato=new ItemModSeed(Crops.potato,SeedInformation.potato);
  seedCarrot=new ItemModSeed(Crops.carrot,SeedInformation.carrot);
  seedSugarcane=new ItemModSeed(Crops.sugarcane,SeedInformation.sugarcane);
  seedDandelion=new ItemModSeed(Crops.dandelion,SeedInformation.dandelion);
  seedPoppy=new ItemModSeed(Crops.poppy,SeedInformation.poppy);
  seedOrchid=new ItemModSeed(Crops.orchid,SeedInformation.orchid);
  seedAllium=new ItemModSeed(Crops.allium,SeedInformation.allium);
  seedTulipRed=new ItemModSeed(Crops.tulipRed,SeedInformation.tulipRed);
  seedTulipOrange=new ItemModSeed(Crops.tulipOrange,SeedInformation.tulipOrange);
  seedTulipWhite=new ItemModSeed(Crops.tulipWhite,SeedInformation.tulipWhite);
  seedTulipPink=new ItemModSeed(Crops.tulipPink,SeedInformation.tulipPink);
  seedDaisy=new ItemModSeed(Crops.daisy,SeedInformation.daisy);
  seedCactus=new ItemModSeed(Crops.cactus,SeedInformation.cactus);
  seedShroomRed=new ItemModSeed(Crops.shroomRed,SeedInformation.shroomRed);
  seedShroomBrown=new ItemModSeed(Crops.shroomBrown,SeedInformation.shroomBrown);
  RegisterHelper.registerSeed(seedPotato,Names.Seeds.seedPotato,Crops.potato);
  RegisterHelper.registerSeed(seedCarrot,Names.Seeds.seedCarrot,Crops.carrot);
  RegisterHelper.registerSeed(seedSugarcane,Names.Seeds.seedSugarcane,Crops.sugarcane);
  RegisterHelper.registerSeed(seedDandelion,Names.Seeds.seedDandelion,Crops.dandelion);
  RegisterHelper.registerSeed(seedPoppy,Names.Seeds.seedPoppy,Crops.poppy);
  RegisterHelper.registerSeed(seedOrchid,Names.Seeds.seedOrchid,Crops.orchid);
  RegisterHelper.registerSeed(seedAllium,Names.Seeds.seedAllium,Crops.allium);
  RegisterHelper.registerSeed(seedTulipRed,Names.Seeds.seedTulipRed,Crops.tulipRed);
  RegisterHelper.registerSeed(seedTulipOrange,Names.Seeds.seedTulipOrange,Crops.tulipOrange);
  RegisterHelper.registerSeed(seedTulipWhite,Names.Seeds.seedTulipWhite,Crops.tulipWhite);
  RegisterHelper.registerSeed(seedTulipPink,Names.Seeds.seedTulipPink,Crops.tulipPink);
  RegisterHelper.registerSeed(seedDaisy,Names.Seeds.seedDaisy,Crops.daisy);
  RegisterHelper.registerSeed(seedCactus,Names.Seeds.seedCactus,Crops.cactus);
  RegisterHelper.registerSeed(seedShroomRed,Names.Seeds.seedShroomRed,Crops.shroomRed);
  RegisterHelper.registerSeed(seedShroomBrown,Names.Seeds.seedShroomBrown,Crops.shroomBrown);
  if (ConfigurationHandler.resourcePlants) {
    seedDiamahlia=new ItemModSeed(ResourceCrops.diamahlia,SeedInformation.diamahlia);
    seedFerranium=new ItemModSeed(ResourceCrops.ferranium,SeedInformation.ferranium);
    seedAurigold=new ItemModSeed(ResourceCrops.aurigold,SeedInformation.aurigold);
    seedLapender=new ItemModSeed(ResourceCrops.lapender,SeedInformation.lapender);
    seedEmeryllis=new ItemModSeed(ResourceCrops.emeryllis,SeedInformation.emeryllis);
    seedRedstodendron=new ItemModSeed(ResourceCrops.redstodendron,SeedInformation.redstodendron);
    RegisterHelper.registerSeed(seedFerranium,Names.Seeds.seedFerranium,ResourceCrops.ferranium);
    RegisterHelper.registerSeed(seedDiamahlia,Names.Seeds.seedDiamahlia,ResourceCrops.diamahlia);
    RegisterHelper.registerSeed(seedAurigold,Names.Seeds.seedAurigold,ResourceCrops.aurigold);
    RegisterHelper.registerSeed(seedLapender,Names.Seeds.seedLapender,ResourceCrops.lapender);
    RegisterHelper.registerSeed(seedEmeryllis,Names.Seeds.seedEmeryllis,ResourceCrops.emeryllis);
    RegisterHelper.registerSeed(seedRedstodendron,Names.Seeds.seedRedstodendron,ResourceCrops.redstodendron);
    if (OreDictHelper.oreCopper != null) {
      seedCuprosia=new ItemModSeed(ResourceCrops.cuprosia,SeedInformation.cuprosia);
      RegisterHelper.registerSeed(seedCuprosia,Names.Seeds.seedCuprosia,ResourceCrops.cuprosia);
    }
    if (OreDictHelper.oreTin != null) {
      seedPetinia=new ItemModSeed(ResourceCrops.petinia,SeedInformation.petinia);
      RegisterHelper.registerSeed(seedPetinia,Names.Seeds.seedPetinia,ResourceCrops.petinia);
    }
    if (OreDictHelper.oreLead != null) {
      seedPlombean=new ItemModSeed(ResourceCrops.plombean,SeedInformation.plombean);
      RegisterHelper.registerSeed(seedPlombean,Names.Seeds.seedPlombean,ResourceCrops.plombean);
    }
    if (OreDictHelper.oreSilver != null) {
      seedSilverweed=new ItemModSeed(ResourceCrops.silverweed,SeedInformation.silverweed);
      RegisterHelper.registerSeed(seedSilverweed,Names.Seeds.seedSilverweed,ResourceCrops.silverweed);
    }
    if (OreDictHelper.oreAluminum != null) {
      seedJaslumine=new ItemModSeed(ResourceCrops.jaslumine,SeedInformation.jaslumine);
      RegisterHelper.registerSeed(seedJaslumine,Names.Seeds.seedJaslumine,ResourceCrops.jaslumine);
    }
    if (OreDictHelper.oreNickel != null) {
      seedNiccissus=new ItemModSeed(ResourceCrops.niccissus,SeedInformation.niccissus);
      RegisterHelper.registerSeed(seedNiccissus,Names.Seeds.seedNiccissus,ResourceCrops.niccissus);
    }
    if (OreDictHelper.orePlatinum != null) {
      seedPlatiolus=new ItemModSeed(ResourceCrops.platiolus,SeedInformation.platiolus);
      RegisterHelper.registerSeed(seedPlatiolus,Names.Seeds.seedPlatiolus,ResourceCrops.platiolus);
    }
    if (OreDictHelper.oreOsmium != null) {
      seedOsmonium=new ItemModSeed(ResourceCrops.osmonium,SeedInformation.osmonium);
      RegisterHelper.registerSeed(seedOsmonium,Names.Seeds.seedOsmonium,ResourceCrops.osmonium);
    }
  }
  if (ModIntegration.LoadedMods.natura) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,NContent.plantItem);
  }
  if (ModIntegration.LoadedMods.exNihilo) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,ExNihiloHelper.seedCarrot);
    OreDictionary.registerOre(Names.OreDict.listAllseed,ExNihiloHelper.seedPotato);
    OreDictionary.registerOre(Names.OreDict.listAllseed,ExNihiloHelper.seedSugarCane);
  }
  if (ModIntegration.LoadedMods.plantMegaPack) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
  }
  LogHelper.debug(""String_Node_Str"");
}"
95712,"public static void init(){
  GameRegistry.registerTileEntity(TileEntityAgricraft.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ Reference.MOD_ID);
  GameRegistry.registerTileEntity(TileEntityCrop.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ Names.Objects.crop);
  GameRegistry.registerTileEntity(TileEntitySeedAnalyzer.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ Names.Objects.seedAnalyzer);
  GameRegistry.registerTileEntity(TileEntityCustomWood.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ ""String_Node_Str"");
  if (!ConfigurationHandler.disableIrrigation) {
    GameRegistry.registerTileEntity(TileEntityTank.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ Names.Objects.tank);
    GameRegistry.registerTileEntity(TileEntityChannel.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ Names.Objects.channel);
    GameRegistry.registerTileEntity(TileEntityValve.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ Names.Objects.valve);
    GameRegistry.registerTileEntity(TileEntitySprinkler.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ Names.Objects.sprinkler);
  }
  if (!ConfigurationHandler.disableSeedStorage) {
    GameRegistry.registerTileEntity(TileEntitySeedStorage.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ Names.Objects.seedStorage);
    if (!ConfigurationHandler.disableSeedWarehouse) {
      GameRegistry.registerTileEntity(TileEntitySeedStorageController.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ Names.Objects.seedStorageController);
    }
  }
  LogHelper.info(""String_Node_Str"");
}","public static void init(){
  GameRegistry.registerTileEntity(TileEntityAgricraft.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ Reference.MOD_ID);
  GameRegistry.registerTileEntity(TileEntityCrop.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ Names.Objects.crop);
  GameRegistry.registerTileEntity(TileEntitySeedAnalyzer.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ Names.Objects.seedAnalyzer);
  GameRegistry.registerTileEntity(TileEntityCustomWood.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ ""String_Node_Str"");
  if (!ConfigurationHandler.disableIrrigation) {
    GameRegistry.registerTileEntity(TileEntityTank.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ Names.Objects.tank);
    GameRegistry.registerTileEntity(TileEntityChannel.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ Names.Objects.channel);
    GameRegistry.registerTileEntity(TileEntityValve.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ Names.Objects.valve);
    GameRegistry.registerTileEntity(TileEntitySprinkler.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ Names.Objects.sprinkler);
  }
  if (!ConfigurationHandler.disableSeedStorage) {
    GameRegistry.registerTileEntity(TileEntitySeedStorage.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ Names.Objects.seedStorage);
    if (!ConfigurationHandler.disableSeedWarehouse) {
      GameRegistry.registerTileEntity(TileEntitySeedStorageController.class,Reference.MOD_ID + ':' + Names.TileEntity.tileEntity+ '_'+ Names.Objects.seedStorageController);
    }
  }
  LogHelper.debug(""String_Node_Str"");
}"
95713,"@Override public void registerRenderers(){
  cropRenderId=RenderingRegistry.getNextAvailableRenderId();
  RenderCrop renderCrops=new RenderCrop();
  RenderingRegistry.registerBlockHandler(cropRenderId,renderCrops);
  TileEntitySpecialRenderer renderAnalyzer=new RenderSeedAnalyzer();
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntitySeedAnalyzer.class,renderAnalyzer);
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(Blocks.seedAnalyzer),new RenderItemSeedAnalyzer(renderAnalyzer,new TileEntitySeedAnalyzer()));
  tankRenderId=RenderingRegistry.getNextAvailableRenderId();
  RenderTank renderTank=new RenderTank();
  RenderingRegistry.registerBlockHandler(tankRenderId,renderTank);
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(Blocks.blockWaterTank),new RenderItemTank(new TileEntityTank()));
  channelRenderId=RenderingRegistry.getNextAvailableRenderId();
  RenderChannel renderChannel=new RenderChannel();
  RenderingRegistry.registerBlockHandler(channelRenderId,renderChannel);
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(Blocks.blockWaterChannel),new RenderItemChannel(new TileEntityChannel()));
  valveRenderId=RenderingRegistry.getNextAvailableRenderId();
  RenderValve renderValve=new RenderValve();
  RenderingRegistry.registerBlockHandler(valveRenderId,renderValve);
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(Blocks.blockChannelValve),new RenderItemValve(new TileEntityValve()));
  TileEntitySpecialRenderer renderSprinkler=new RenderSprinkler();
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntitySprinkler.class,renderSprinkler);
  MinecraftForgeClient.registerItemRenderer(Items.sprinkler,new RenderItemSprinkler());
  if (!ConfigurationHandler.disableWorldGen && ConfigurationHandler.villagerEnabled) {
    VillagerRegistry.instance().registerVillagerSkin(78943,new ResourceLocation(""String_Node_Str""));
  }
  LogHelper.info(""String_Node_Str"");
}","@Override public void registerRenderers(){
  cropRenderId=RenderingRegistry.getNextAvailableRenderId();
  RenderCrop renderCrops=new RenderCrop();
  RenderingRegistry.registerBlockHandler(cropRenderId,renderCrops);
  TileEntitySpecialRenderer renderAnalyzer=new RenderSeedAnalyzer();
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntitySeedAnalyzer.class,renderAnalyzer);
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(Blocks.seedAnalyzer),new RenderItemSeedAnalyzer(renderAnalyzer,new TileEntitySeedAnalyzer()));
  tankRenderId=RenderingRegistry.getNextAvailableRenderId();
  RenderTank renderTank=new RenderTank();
  RenderingRegistry.registerBlockHandler(tankRenderId,renderTank);
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(Blocks.blockWaterTank),new RenderItemTank(new TileEntityTank()));
  channelRenderId=RenderingRegistry.getNextAvailableRenderId();
  RenderChannel renderChannel=new RenderChannel();
  RenderingRegistry.registerBlockHandler(channelRenderId,renderChannel);
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(Blocks.blockWaterChannel),new RenderItemChannel(new TileEntityChannel()));
  valveRenderId=RenderingRegistry.getNextAvailableRenderId();
  RenderValve renderValve=new RenderValve();
  RenderingRegistry.registerBlockHandler(valveRenderId,renderValve);
  MinecraftForgeClient.registerItemRenderer(Item.getItemFromBlock(Blocks.blockChannelValve),new RenderItemValve(new TileEntityValve()));
  TileEntitySpecialRenderer renderSprinkler=new RenderSprinkler();
  ClientRegistry.bindTileEntitySpecialRenderer(TileEntitySprinkler.class,renderSprinkler);
  MinecraftForgeClient.registerItemRenderer(Items.sprinkler,new RenderItemSprinkler());
  if (!ConfigurationHandler.disableWorldGen && ConfigurationHandler.villagerEnabled) {
    VillagerRegistry.instance().registerVillagerSkin(78943,new ResourceLocation(""String_Node_Str""));
  }
  LogHelper.debug(""String_Node_Str"");
}"
95714,"public static void registerBlock(Block block,String name,Class<? extends ItemBlock> itemClass){
  block.setBlockName(Reference.MOD_ID.toLowerCase() + ':' + name);
  LogHelper.info(""String_Node_Str"" + block.getUnlocalizedName());
  if (itemClass != null) {
    GameRegistry.registerBlock(block,itemClass,name);
  }
 else {
    GameRegistry.registerBlock(block,name);
  }
}","public static void registerBlock(Block block,String name,Class<? extends ItemBlock> itemClass){
  block.setBlockName(Reference.MOD_ID.toLowerCase() + ':' + name);
  LogHelper.debug(""String_Node_Str"" + block.getUnlocalizedName());
  if (itemClass != null) {
    GameRegistry.registerBlock(block,itemClass,name);
  }
 else {
    GameRegistry.registerBlock(block,name);
  }
}"
95715,"public static void registerItem(Item item,String name){
  item.setUnlocalizedName(Reference.MOD_ID.toLowerCase() + ':' + name);
  LogHelper.info(""String_Node_Str"" + item.getUnlocalizedName());
  GameRegistry.registerItem(item,name);
}","public static void registerItem(Item item,String name){
  item.setUnlocalizedName(Reference.MOD_ID.toLowerCase() + ':' + name);
  LogHelper.debug(""String_Node_Str"" + item.getUnlocalizedName());
  GameRegistry.registerItem(item,name);
}"
95716,"@SubscribeEvent public void onTick(TickEvent.ServerTickEvent event){
  if (!Constants.LOG_RENDER_CALLS)   return;
  timer++;
  if (timer % 40 == 0) {
    timer=0;
    int callsPerSecond=RenderChannel.renderCallCounter.getAndSet(0);
    LogHelper.info(""String_Node_Str"" + callsPerSecond);
  }
}","@SubscribeEvent public void onTick(TickEvent.ServerTickEvent event){
  if (!Constants.LOG_RENDER_CALLS)   return;
  timer++;
  if (timer % 40 == 0) {
    timer=0;
    int callsPerSecond=RenderChannel.renderCallCounter.getAndSet(0);
    LogHelper.debug(""String_Node_Str"" + callsPerSecond);
  }
}"
95717,"@Override public void undo(){
  crop.products.addProduce(fruit,weight);
}","@Override public void undo(){
  crop.products.addProduce(fruit,weight);
  String oreDictTag=this.fruitTag();
  LogHelper.debug(""String_Node_Str"" + fruit.getDisplayName() + ""String_Node_Str""+ oreDictTag);
  if (!OreDictHelper.hasOreId(fruit,oreDictTag)) {
    OreDictionary.registerOre(oreDictTag,fruit);
  }
}"
95718,"@Override public void apply(){
  crop.products.removeProduce(fruit);
}","@Override public void apply(){
  crop.products.removeProduce(fruit);
  MCOreDictEntry ore=new MCOreDictEntry(this.fruitTag());
  ore.remove(new MCItemStack(this.fruit));
}"
95719,"@Override public boolean canBlockStay(World world,int x,int y,int z){
  Block soil=world.getBlock(x,y - 1,z);
  int soilMeta=world.getBlockMetadata(x,y - 1,z);
  return GrowthRequirements.isSoilValid(soil,soilMeta);
}","@Override public boolean canBlockStay(World world,int x,int y,int z){
  return GrowthRequirements.isSoilValid(world,x,y - 1,z);
}"
95720,"public static void init(){
  nei=Loader.isModLoaded(Names.Mods.nei);
  harvestcraft=Loader.isModLoaded(Names.Mods.harvestcraft);
  natura=Loader.isModLoaded(Names.Mods.natura);
  weeeFlowers=Loader.isModLoaded(Names.Mods.weeeFlowers);
  forestry=Loader.isModLoaded(Names.Mods.forestry);
  thaumicTinkerer=Loader.isModLoaded(Names.Mods.thaumicTinkerer);
  hungerOverhaul=Loader.isModLoaded(Names.Mods.hungerOverhaul);
  exNihilo=Loader.isModLoaded(Names.Mods.exNihilo);
  plantMegaPack=Loader.isModLoaded(Names.Mods.plantMegaPack);
  magicalCrops=Loader.isModLoaded(Names.Mods.magicalCrops);
  railcraft=Loader.isModLoaded(Names.Mods.railcraft);
  thaumcraft=Loader.isModLoaded(Names.Mods.thaumcraft);
  mfr=Loader.isModLoaded(Names.Mods.mfr);
  waila=Loader.isModLoaded(Names.Mods.waila);
  chococraft=Loader.isModLoaded(Names.Mods.chococraft);
  mcMultipart=Loader.isModLoaded(Names.Mods.mcMultipart);
  minetweaker=Loader.isModLoaded(Names.Mods.minetweaker);
  extraUtilities=Loader.isModLoaded(Names.Mods.extraUtilities);
  botania=Loader.isModLoaded(Names.Mods.botania);
  tconstruct=Loader.isModLoaded(Names.Mods.tconstruct);
  LogHelper.debug(""String_Node_Str"");
  LogHelper.debug(""String_Node_Str"" + nei);
  LogHelper.debug(""String_Node_Str"" + harvestcraft);
  LogHelper.debug(""String_Node_Str"" + natura);
  LogHelper.debug(""String_Node_Str"" + weeeFlowers);
  LogHelper.debug(""String_Node_Str"" + forestry);
  LogHelper.debug(""String_Node_Str"" + thaumicTinkerer);
  LogHelper.debug(""String_Node_Str"" + hungerOverhaul);
  LogHelper.debug(""String_Node_Str"" + exNihilo);
  LogHelper.debug(""String_Node_Str"" + plantMegaPack);
  LogHelper.debug(""String_Node_Str"" + magicalCrops);
  LogHelper.debug(""String_Node_Str"" + railcraft);
  LogHelper.debug(""String_Node_Str"" + thaumcraft);
  LogHelper.debug(""String_Node_Str"" + mfr);
  LogHelper.debug(""String_Node_Str"" + waila);
  LogHelper.debug(""String_Node_Str"" + chococraft);
  LogHelper.debug(""String_Node_Str"" + mcMultipart);
  LogHelper.debug(""String_Node_Str"" + minetweaker);
  LogHelper.debug(""String_Node_Str"" + extraUtilities);
  LogHelper.debug(""String_Node_Str"" + botania);
  LogHelper.debug(""String_Node_Str"" + tconstruct);
  LogHelper.debug(""String_Node_Str"");
}","public static void init(){
  nei=Loader.isModLoaded(Names.Mods.nei);
  harvestcraft=Loader.isModLoaded(Names.Mods.harvestcraft);
  natura=Loader.isModLoaded(Names.Mods.natura);
  weeeFlowers=Loader.isModLoaded(Names.Mods.weeeFlowers);
  forestry=Loader.isModLoaded(Names.Mods.forestry);
  thaumicTinkerer=Loader.isModLoaded(Names.Mods.thaumicTinkerer);
  hungerOverhaul=Loader.isModLoaded(Names.Mods.hungerOverhaul);
  exNihilo=Loader.isModLoaded(Names.Mods.exNihilo);
  plantMegaPack=Loader.isModLoaded(Names.Mods.plantMegaPack);
  magicalCrops=Loader.isModLoaded(Names.Mods.magicalCrops);
  railcraft=Loader.isModLoaded(Names.Mods.railcraft);
  thaumcraft=Loader.isModLoaded(Names.Mods.thaumcraft);
  mfr=Loader.isModLoaded(Names.Mods.mfr);
  waila=Loader.isModLoaded(Names.Mods.waila);
  chococraft=Loader.isModLoaded(Names.Mods.chococraft);
  mcMultipart=Loader.isModLoaded(Names.Mods.mcMultipart);
  minetweaker=Loader.isModLoaded(Names.Mods.minetweaker);
  extraUtilities=Loader.isModLoaded(Names.Mods.extraUtilities);
  botania=Loader.isModLoaded(Names.Mods.botania);
  tconstruct=Loader.isModLoaded(Names.Mods.tconstruct);
  gardenStuff=Loader.isModLoaded(Names.Mods.gardenStuff);
  LogHelper.info(""String_Node_Str"");
  LogHelper.info(""String_Node_Str"" + nei);
  LogHelper.info(""String_Node_Str"" + harvestcraft);
  LogHelper.info(""String_Node_Str"" + natura);
  LogHelper.info(""String_Node_Str"" + weeeFlowers);
  LogHelper.info(""String_Node_Str"" + forestry);
  LogHelper.info(""String_Node_Str"" + thaumicTinkerer);
  LogHelper.info(""String_Node_Str"" + hungerOverhaul);
  LogHelper.info(""String_Node_Str"" + exNihilo);
  LogHelper.info(""String_Node_Str"" + plantMegaPack);
  LogHelper.info(""String_Node_Str"" + magicalCrops);
  LogHelper.info(""String_Node_Str"" + railcraft);
  LogHelper.info(""String_Node_Str"" + thaumcraft);
  LogHelper.info(""String_Node_Str"" + mfr);
  LogHelper.info(""String_Node_Str"" + waila);
  LogHelper.info(""String_Node_Str"" + chococraft);
  LogHelper.info(""String_Node_Str"" + mcMultipart);
  LogHelper.info(""String_Node_Str"" + minetweaker);
  LogHelper.info(""String_Node_Str"" + extraUtilities);
  LogHelper.info(""String_Node_Str"" + botania);
  LogHelper.info(""String_Node_Str"" + tconstruct);
  LogHelper.info(""String_Node_Str"" + gardenStuff);
  LogHelper.info(""String_Node_Str"");
}"
95721,"/** 
 * @return true, if the given block is a valid soil 
 */
public boolean isValidSoil(Block block,int meta){
  if (this.requiresSpecificSoil()) {
    return this.soil.equals(new BlockWithMeta(block,meta));
  }
 else {
    return GrowthRequirements.defaultSoils.contains(new BlockWithMeta(block,meta));
  }
}","/** 
 * @return true, if the given block is a valid soil 
 */
public boolean isValidSoil(World world,int x,int y,int z){
  Block block=world.getBlock(x,y,z);
  int meta=world.getBlockMetadata(x,y,z);
  BlockWithMeta soil=new BlockWithMeta(block,meta);
  if (ModIntegration.LoadedMods.gardenStuff && block instanceof BlockLargePot) {
    soil=GardenStuffHelper.getSoil((TileEntityGarden)world.getTileEntity(x,y,z));
  }
  if (this.requiresSpecificSoil()) {
    return this.soil.equals(soil);
  }
 else {
    return GrowthRequirements.defaultSoils.contains(soil);
  }
}"
95722,"/** 
 * @return true, if all the requirements are met 
 */
public boolean canGrow(World world,int x,int y,int z){
  return this.isValidSoil(world.getBlock(x,y - 1,z),world.getBlockMetadata(x,y - 1,z)) && this.isBrightnessGood(world.getBlockLightValue(x,y,z)) && this.isBaseBlockPresent(world,x,y,z);
}","/** 
 * @return true, if all the requirements are met 
 */
public boolean canGrow(World world,int x,int y,int z){
  return this.isValidSoil(world,x,y - 1,z) && this.isBrightnessGood(world.getBlockLightValue(x,y,z)) && this.isBaseBlockPresent(world,x,y,z);
}"
95723,"public static boolean isSoilValid(Block block,int meta){
  BlockWithMeta soil=new BlockWithMeta(block,meta);
  return soils.contains(soil) || defaultSoils.contains(soil);
}","public static boolean isSoilValid(World world,int x,int y,int z){
  Block block=world.getBlock(x,y,z);
  int meta=world.getBlockMetadata(x,y,z);
  BlockWithMeta soil;
  if (ModIntegration.LoadedMods.gardenStuff && block instanceof BlockLargePot) {
    soil=GardenStuffHelper.getSoil((TileEntityGarden)world.getTileEntity(x,y,z));
  }
 else {
    soil=new BlockWithMeta(block,meta);
  }
  return soils.contains(soil) || defaultSoils.contains(soil);
}"
95724,"public static void initSoils(){
  defaultSoils.add(new BlockWithMeta(Blocks.farmland,7));
  if (ModIntegration.LoadedMods.forestry) {
    defaultSoils.add(new BlockWithMeta((Block)Block.blockRegistry.getObject(""String_Node_Str""),0));
  }
  String[] data=IOHelper.getLinesArrayFromData(ConfigurationHandler.readSoils());
  for (  String line : data) {
    LogHelper.debug(""String_Node_Str"" + line);
    ItemStack stack=IOHelper.getStack(line);
    Block block=(stack != null && stack.getItem() instanceof ItemBlock) ? ((ItemBlock)stack.getItem()).field_150939_a : null;
    boolean success=block != null;
    String errorMsg=""String_Node_Str"";
    if (success) {
      soils.add(new BlockWithMeta(block,stack.getItemDamage()));
    }
 else {
      LogHelper.info(""String_Node_Str"" + errorMsg + ""String_Node_Str""+ line+ ""String_Node_Str"");
    }
  }
  LogHelper.info(""String_Node_Str"");
  for (  BlockWithMeta soil : soils) {
    LogHelper.info(""String_Node_Str"" + Block.blockRegistry.getNameForObject(soil.getBlock()) + ""String_Node_Str""+ soil.getMeta());
  }
}","public static void initSoils(){
  defaultSoils.add(new BlockWithMeta(Blocks.farmland,7));
  if (ModIntegration.LoadedMods.forestry) {
    defaultSoils.add(new BlockWithMeta((Block)Block.blockRegistry.getObject(""String_Node_Str""),0));
  }
  if (ModIntegration.LoadedMods.gardenStuff) {
    defaultSoils.add(new BlockWithMeta(ModBlocks.gardenFarmland,0));
  }
  String[] data=IOHelper.getLinesArrayFromData(ConfigurationHandler.readSoils());
  for (  String line : data) {
    LogHelper.debug(""String_Node_Str"" + line);
    ItemStack stack=IOHelper.getStack(line);
    Block block=(stack != null && stack.getItem() instanceof ItemBlock) ? ((ItemBlock)stack.getItem()).field_150939_a : null;
    boolean success=block != null;
    String errorMsg=""String_Node_Str"";
    if (success) {
      soils.add(new BlockWithMeta(block,stack.getItemDamage()));
    }
 else {
      LogHelper.info(""String_Node_Str"" + errorMsg + ""String_Node_Str""+ line+ ""String_Node_Str"");
    }
  }
  LogHelper.info(""String_Node_Str"");
  for (  BlockWithMeta soil : soils) {
    LogHelper.info(""String_Node_Str"" + Block.blockRegistry.getNameForObject(soil.getBlock()) + ""String_Node_Str""+ soil.getMeta());
  }
}"
95725,"@SubscribeEvent(priority=EventPriority.HIGHEST) public void onPlayerUseItemEvent(PlayerInteractEvent event){
  if (event.action == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK) {
    Block block=event.world.getBlock(event.x,event.y,event.z);
    int meta=event.world.getBlockMetadata(event.x,event.y,event.z);
    if (event.entityPlayer.getCurrentEquippedItem() != null && event.entityPlayer.getCurrentEquippedItem().stackSize > 0 && event.entityPlayer.getCurrentEquippedItem().getItem() != null && event.entityPlayer.getCurrentEquippedItem().getItem() instanceof IPlantable) {
      if (GrowthRequirements.isSoilValid(block,meta) || block == Blocks.farmland) {
        if (ConfigurationHandler.disableVanillaFarming) {
          this.denyEvent(event,false);
        }
 else         if (event.entityPlayer.getCurrentEquippedItem().hasTagCompound()) {
          NBTTagCompound tag=(NBTTagCompound)event.entityPlayer.getCurrentEquippedItem().getTagCompound().copy();
          if (tag.hasKey(Names.NBT.growth) && tag.hasKey(Names.NBT.gain) && tag.hasKey(Names.NBT.strength)) {
            this.denyEvent(event,false);
          }
        }
      }
    }
  }
}","@SubscribeEvent(priority=EventPriority.HIGHEST) public void onPlayerUseItemEvent(PlayerInteractEvent event){
  if (event.action == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK) {
    Block block=event.world.getBlock(event.x,event.y,event.z);
    if (event.entityPlayer.getCurrentEquippedItem() != null && event.entityPlayer.getCurrentEquippedItem().stackSize > 0 && event.entityPlayer.getCurrentEquippedItem().getItem() != null && event.entityPlayer.getCurrentEquippedItem().getItem() instanceof IPlantable) {
      if (GrowthRequirements.isSoilValid(event.world,event.x,event.y,event.z) || block == Blocks.farmland) {
        if (ConfigurationHandler.disableVanillaFarming) {
          this.denyEvent(event,false);
        }
 else         if (event.entityPlayer.getCurrentEquippedItem().hasTagCompound()) {
          NBTTagCompound tag=(NBTTagCompound)event.entityPlayer.getCurrentEquippedItem().getTagCompound().copy();
          if (tag.hasKey(Names.NBT.growth) && tag.hasKey(Names.NBT.gain) && tag.hasKey(Names.NBT.strength)) {
            this.denyEvent(event,false);
          }
        }
      }
    }
  }
}"
95726,"@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  if (!world.isRemote) {
    if (GrowthRequirements.isSoilValid(world.getBlock(x,y,z),world.getBlockMetadata(x,y,z)) && world.getBlock(x,y + 1,z).getMaterial() == Material.air && side == 1) {
      world.setBlock(x,y + 1,z,Blocks.blockCrop);
      stack.stackSize=player.capabilities.isCreativeMode ? stack.stackSize : stack.stackSize - 1;
      return false;
    }
  }
  return false;
}","@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  if (!world.isRemote) {
    if (GrowthRequirements.isSoilValid(world,x,y,z) && world.getBlock(x,y + 1,z).getMaterial() == Material.air && side == 1) {
      world.setBlock(x,y + 1,z,Blocks.blockCrop);
      stack.stackSize=player.capabilities.isCreativeMode ? stack.stackSize : stack.stackSize - 1;
      return false;
    }
  }
  return false;
}"
95727,"@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float f1,float f2,float f3){
  if (world.getBlock(x,y,z) == Blocks.blockCrop) {
    LogHelper.debug(""String_Node_Str"" + stack.getItem().getUnlocalizedName() + ""String_Node_Str"");
    return true;
  }
  if (GrowthRequirements.getGrowthRequirement((ItemSeeds)stack.getItem(),stack.getItemDamage()).isValidSoil(world.getBlock(x,y,z),world.getBlockMetadata(x,y,z))) {
    super.onItemUse(stack,player,world,x,y,z,side,f1,f2,f3);
  }
  return false;
}","@Override public boolean onItemUse(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float f1,float f2,float f3){
  if (world.getBlock(x,y,z) == Blocks.blockCrop) {
    LogHelper.debug(""String_Node_Str"" + stack.getItem().getUnlocalizedName() + ""String_Node_Str"");
    return true;
  }
  if (GrowthRequirements.getGrowthRequirement((ItemSeeds)stack.getItem(),stack.getItemDamage()).isValidSoil(world,x,y,z)) {
    super.onItemUse(stack,player,world,x,y,z,side,f1,f2,f3);
  }
  return false;
}"
95728,"@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  if (!world.isRemote) {
    if (world.getBlock(x,y,z) != null && world.getBlock(x,y,z) instanceof BlockCrop) {
      TileEntity te=world.getTileEntity(x,y,z);
      if (te != null && te instanceof TileEntityCrop) {
        TileEntityCrop crop=(TileEntityCrop)te;
        if (crop.weed) {
          crop.clearWeed();
        }
 else         if (crop.hasPlant() && stack.getItemDamage() == 0) {
          NBTTagCompound tag=new NBTTagCompound();
          tag.setShort(Names.NBT.growth,(short)crop.growth);
          tag.setShort(Names.NBT.gain,(short)crop.gain);
          tag.setShort(Names.NBT.strength,(short)crop.strength);
          tag.setBoolean(Names.NBT.analyzed,crop.analyzed);
          tag.setString(Names.Objects.seed,crop.getSeedString());
          tag.setShort(Names.NBT.meta,(short)crop.seedMeta);
          tag.setShort(Names.NBT.materialMeta,(short)world.getBlockMetadata(x,y,z));
          stack.setTagCompound(tag);
          stack.setItemDamage(1);
          crop.clearPlant();
          return true;
        }
 else         if (!crop.hasPlant() && !crop.crossCrop && stack.getItemDamage() == 1) {
          NBTTagCompound tag=stack.getTagCompound();
          ItemSeeds seed=(ItemSeeds)Item.itemRegistry.getObject(tag.getString(Names.Objects.seed));
          int seedMeta=tag.getShort(Names.NBT.meta);
          if (GrowthRequirements.getGrowthRequirement(seed,seedMeta).isValidSoil(world.getBlock(x,y - 1,z),world.getBlockMetadata(x,y - 1,z))) {
            crop.growth=tag.getShort(Names.NBT.growth);
            crop.gain=tag.getShort(Names.NBT.gain);
            crop.strength=tag.getShort(Names.NBT.strength);
            crop.analyzed=tag.getBoolean(Names.NBT.analyzed);
            crop.seed=seed;
            crop.seedMeta=seedMeta;
            world.setBlockMetadataWithNotify(x,y,z,tag.getShort(Names.NBT.materialMeta),3);
            crop.markForUpdate();
            stack.setTagCompound(null);
            stack.setItemDamage(0);
            return true;
          }
        }
      }
    }
  }
  return false;
}","@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  if (!world.isRemote) {
    if (world.getBlock(x,y,z) != null && world.getBlock(x,y,z) instanceof BlockCrop) {
      TileEntity te=world.getTileEntity(x,y,z);
      if (te != null && te instanceof TileEntityCrop) {
        TileEntityCrop crop=(TileEntityCrop)te;
        if (crop.weed) {
          crop.clearWeed();
        }
 else         if (crop.hasPlant() && stack.getItemDamage() == 0) {
          NBTTagCompound tag=new NBTTagCompound();
          tag.setShort(Names.NBT.growth,(short)crop.growth);
          tag.setShort(Names.NBT.gain,(short)crop.gain);
          tag.setShort(Names.NBT.strength,(short)crop.strength);
          tag.setBoolean(Names.NBT.analyzed,crop.analyzed);
          tag.setString(Names.Objects.seed,crop.getSeedString());
          tag.setShort(Names.NBT.meta,(short)crop.seedMeta);
          tag.setShort(Names.NBT.materialMeta,(short)world.getBlockMetadata(x,y,z));
          stack.setTagCompound(tag);
          stack.setItemDamage(1);
          crop.clearPlant();
          return true;
        }
 else         if (!crop.hasPlant() && !crop.crossCrop && stack.getItemDamage() == 1) {
          NBTTagCompound tag=stack.getTagCompound();
          ItemSeeds seed=(ItemSeeds)Item.itemRegistry.getObject(tag.getString(Names.Objects.seed));
          int seedMeta=tag.getShort(Names.NBT.meta);
          if (GrowthRequirements.getGrowthRequirement(seed,seedMeta).isValidSoil(world,x,y - 1,z)) {
            crop.growth=tag.getShort(Names.NBT.growth);
            crop.gain=tag.getShort(Names.NBT.gain);
            crop.strength=tag.getShort(Names.NBT.strength);
            crop.analyzed=tag.getBoolean(Names.NBT.analyzed);
            crop.seed=seed;
            crop.seedMeta=seedMeta;
            world.setBlockMetadataWithNotify(x,y,z,tag.getShort(Names.NBT.materialMeta),3);
            crop.markForUpdate();
            stack.setTagCompound(null);
            stack.setItemDamage(0);
            return true;
          }
        }
      }
    }
  }
  return false;
}"
95729,"private static void getDebugData(World world,int x,int y,int z,List<String> list){
  if (!world.isRemote) {
    list.add(""String_Node_Str"");
    list.add(""String_Node_Str"");
  }
 else {
    list.add(""String_Node_Str"");
    list.add(""String_Node_Str"");
  }
  TileEntity tile=world.getTileEntity(x,y,z);
  if (tile != null && tile instanceof IDebuggable) {
    ((IDebuggable)tile).addDebugInfo(list);
  }
 else {
    list.add(""String_Node_Str"" + Block.blockRegistry.getNameForObject(world.getBlock(x,y,z)));
    list.add(""String_Node_Str"" + world.getBlockMetadata(x,y,z));
  }
  list.add(""String_Node_Str"");
}","private static void getDebugData(World world,int x,int y,int z,List<String> list){
  if (!world.isRemote) {
    list.add(""String_Node_Str"");
    list.add(""String_Node_Str"");
  }
 else {
    list.add(""String_Node_Str"");
    list.add(""String_Node_Str"");
  }
  TileEntity tile=world.getTileEntity(x,y,z);
  if (tile != null && tile instanceof IDebuggable) {
    ((IDebuggable)tile).addDebugInfo(list);
  }
 else   if (ModIntegration.LoadedMods.gardenStuff && tile instanceof TileEntityGarden) {
    GardenStuffHelper.addDebugInfo(list,(TileEntityGarden)tile);
  }
 else {
    list.add(""String_Node_Str"" + Block.blockRegistry.getNameForObject(world.getBlock(x,y,z)));
    list.add(""String_Node_Str"" + world.getBlockMetadata(x,y,z));
  }
  list.add(""String_Node_Str"");
}"
95730,"public static void init(){
  potato=new BlockModPlant(net.minecraft.init.Items.potato);
  carrot=new BlockModPlant(net.minecraft.init.Items.carrot);
  melon=new BlockModPlant(net.minecraft.init.Items.melon);
  pumpkin=new BlockModPlant(Item.getItemFromBlock(Blocks.pumpkin));
  sugarcane=new BlockModPlant(net.minecraft.init.Blocks.sand,net.minecraft.init.Items.reeds);
  dandelion=new BlockModPlant(net.minecraft.init.Items.dye,11);
  poppy=new BlockModPlant(net.minecraft.init.Items.dye,1);
  orchid=new BlockModPlant(net.minecraft.init.Items.dye,12);
  allium=new BlockModPlant(net.minecraft.init.Items.dye,13);
  tulipRed=new BlockModPlant(net.minecraft.init.Items.dye,1,2);
  tulipOrange=new BlockModPlant(net.minecraft.init.Items.dye,14,2);
  tulipWhite=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  tulipPink=new BlockModPlant(net.minecraft.init.Items.dye,9,2);
  daisy=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  cactus=new BlockModPlant(Blocks.sand,ConfigurationHandler.cactusGivesCactus ? Item.getItemFromBlock(Blocks.cactus) : net.minecraft.init.Items.dye,2);
  shroomRed=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.red_mushroom));
  shroomBrown=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.brown_mushroom));
  RegisterHelper.registerCrop(potato,Names.Plants.potato);
  RegisterHelper.registerCrop(carrot,Names.Plants.carrot);
  RegisterHelper.registerCrop(melon,Names.Plants.melon);
  RegisterHelper.registerCrop(pumpkin,Names.Plants.pumpkin);
  RegisterHelper.registerCrop(sugarcane,Names.Plants.sugarcane);
  RegisterHelper.registerCrop(dandelion,Names.Plants.dandelion);
  RegisterHelper.registerCrop(poppy,Names.Plants.poppy);
  RegisterHelper.registerCrop(orchid,Names.Plants.orchid);
  RegisterHelper.registerCrop(allium,Names.Plants.allium);
  RegisterHelper.registerCrop(tulipRed,Names.Plants.tulip + Names.Colors.red);
  RegisterHelper.registerCrop(tulipOrange,Names.Plants.tulip + Names.Colors.orange);
  RegisterHelper.registerCrop(tulipWhite,Names.Plants.tulip + Names.Colors.white);
  RegisterHelper.registerCrop(tulipPink,Names.Plants.tulip + Names.Colors.pink);
  RegisterHelper.registerCrop(daisy,Names.Plants.daisy);
  RegisterHelper.registerCrop(cactus,Names.Plants.cactus);
  RegisterHelper.registerCrop(shroomRed,Names.Plants.shroom + Names.Colors.red);
  RegisterHelper.registerCrop(shroomBrown,Names.Plants.shroom + Names.Colors.brown);
  LogHelper.info(""String_Node_Str"");
}","public static void init(){
  potato=new BlockModPlant(net.minecraft.init.Items.potato);
  carrot=new BlockModPlant(net.minecraft.init.Items.carrot);
  melon=new BlockModPlant(net.minecraft.init.Items.melon);
  pumpkin=new BlockModPlant(Item.getItemFromBlock(Blocks.pumpkin));
  sugarcane=new BlockModPlant(net.minecraft.init.Blocks.sand,net.minecraft.init.Items.reeds);
  dandelion=new BlockModPlant(net.minecraft.init.Items.dye,11);
  poppy=new BlockModPlant(net.minecraft.init.Items.dye,1);
  orchid=new BlockModPlant(net.minecraft.init.Items.dye,12);
  allium=new BlockModPlant(net.minecraft.init.Items.dye,13);
  tulipRed=new BlockModPlant(net.minecraft.init.Items.dye,1,2);
  tulipOrange=new BlockModPlant(net.minecraft.init.Items.dye,14,2);
  tulipWhite=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  tulipPink=new BlockModPlant(net.minecraft.init.Items.dye,9,2);
  daisy=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  cactus=new BlockModPlant(Blocks.sand,ConfigurationHandler.cactusGivesCactus ? Item.getItemFromBlock(Blocks.cactus) : net.minecraft.init.Items.dye,ConfigurationHandler.cactusGivesCactus ? 0 : 2);
  shroomRed=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.red_mushroom));
  shroomBrown=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.brown_mushroom));
  RegisterHelper.registerCrop(potato,Names.Plants.potato);
  RegisterHelper.registerCrop(carrot,Names.Plants.carrot);
  RegisterHelper.registerCrop(melon,Names.Plants.melon);
  RegisterHelper.registerCrop(pumpkin,Names.Plants.pumpkin);
  RegisterHelper.registerCrop(sugarcane,Names.Plants.sugarcane);
  RegisterHelper.registerCrop(dandelion,Names.Plants.dandelion);
  RegisterHelper.registerCrop(poppy,Names.Plants.poppy);
  RegisterHelper.registerCrop(orchid,Names.Plants.orchid);
  RegisterHelper.registerCrop(allium,Names.Plants.allium);
  RegisterHelper.registerCrop(tulipRed,Names.Plants.tulip + Names.Colors.red);
  RegisterHelper.registerCrop(tulipOrange,Names.Plants.tulip + Names.Colors.orange);
  RegisterHelper.registerCrop(tulipWhite,Names.Plants.tulip + Names.Colors.white);
  RegisterHelper.registerCrop(tulipPink,Names.Plants.tulip + Names.Colors.pink);
  RegisterHelper.registerCrop(daisy,Names.Plants.daisy);
  RegisterHelper.registerCrop(cactus,Names.Plants.cactus);
  RegisterHelper.registerCrop(shroomRed,Names.Plants.shroom + Names.Colors.red);
  RegisterHelper.registerCrop(shroomBrown,Names.Plants.shroom + Names.Colors.brown);
  LogHelper.info(""String_Node_Str"");
}"
95731,"public static void init(){
  potato=new BlockModPlant(net.minecraft.init.Items.potato);
  potato.products.addProduce(new ItemStack(Items.poisonous_potato),10);
  carrot=new BlockModPlant(net.minecraft.init.Items.carrot);
  melon=new BlockModPlant(net.minecraft.init.Items.melon);
  pumpkin=new BlockModPlant(Item.getItemFromBlock(Blocks.pumpkin));
  sugarcane=new BlockModPlant(net.minecraft.init.Blocks.sand,net.minecraft.init.Items.reeds);
  dandelion=new BlockModPlant(net.minecraft.init.Items.dye,11);
  poppy=new BlockModPlant(net.minecraft.init.Items.dye,1);
  orchid=new BlockModPlant(net.minecraft.init.Items.dye,12);
  allium=new BlockModPlant(net.minecraft.init.Items.dye,13);
  tulipRed=new BlockModPlant(net.minecraft.init.Items.dye,1,2);
  tulipOrange=new BlockModPlant(net.minecraft.init.Items.dye,14,2);
  tulipWhite=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  tulipPink=new BlockModPlant(net.minecraft.init.Items.dye,9,2);
  daisy=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  cactus=new BlockModPlant(Blocks.sand,ConfigurationHandler.cactusGivesCactus ? Item.getItemFromBlock(Blocks.cactus) : net.minecraft.init.Items.dye,2);
  shroomRed=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.red_mushroom));
  shroomBrown=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.brown_mushroom));
  RegisterHelper.registerBlock(potato,Names.Crops.cropPotato);
  RegisterHelper.registerBlock(carrot,Names.Crops.cropCarrot);
  RegisterHelper.registerBlock(melon,Names.Crops.cropMelon);
  RegisterHelper.registerBlock(pumpkin,Names.Crops.cropPumpkin);
  RegisterHelper.registerBlock(sugarcane,Names.Crops.cropSugarcane);
  RegisterHelper.registerBlock(dandelion,Names.Crops.cropDandelion);
  RegisterHelper.registerBlock(poppy,Names.Crops.cropPoppy);
  RegisterHelper.registerBlock(orchid,Names.Crops.cropOrchid);
  RegisterHelper.registerBlock(allium,Names.Crops.cropAllium);
  RegisterHelper.registerBlock(tulipRed,Names.Crops.cropTulipRed);
  RegisterHelper.registerBlock(tulipOrange,Names.Crops.cropTulipOrange);
  RegisterHelper.registerBlock(tulipWhite,Names.Crops.cropTulipWhite);
  RegisterHelper.registerBlock(tulipPink,Names.Crops.cropTulipPink);
  RegisterHelper.registerBlock(daisy,Names.Crops.cropDaisy);
  RegisterHelper.registerBlock(cactus,Names.Crops.cropCactus);
  RegisterHelper.registerBlock(shroomRed,Names.Crops.cropShroomRed);
  RegisterHelper.registerBlock(shroomBrown,Names.Crops.cropShroomBrown);
  LogHelper.debug(""String_Node_Str"");
}","public static void init(){
  potato=new BlockModPlant(net.minecraft.init.Items.potato);
  carrot=new BlockModPlant(net.minecraft.init.Items.carrot);
  melon=new BlockModPlant(net.minecraft.init.Items.melon);
  pumpkin=new BlockModPlant(Item.getItemFromBlock(Blocks.pumpkin));
  sugarcane=new BlockModPlant(net.minecraft.init.Blocks.sand,net.minecraft.init.Items.reeds);
  dandelion=new BlockModPlant(net.minecraft.init.Items.dye,11);
  poppy=new BlockModPlant(net.minecraft.init.Items.dye,1);
  orchid=new BlockModPlant(net.minecraft.init.Items.dye,12);
  allium=new BlockModPlant(net.minecraft.init.Items.dye,13);
  tulipRed=new BlockModPlant(net.minecraft.init.Items.dye,1,2);
  tulipOrange=new BlockModPlant(net.minecraft.init.Items.dye,14,2);
  tulipWhite=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  tulipPink=new BlockModPlant(net.minecraft.init.Items.dye,9,2);
  daisy=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  cactus=new BlockModPlant(Blocks.sand,ConfigurationHandler.cactusGivesCactus ? Item.getItemFromBlock(Blocks.cactus) : net.minecraft.init.Items.dye,2);
  shroomRed=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.red_mushroom));
  shroomBrown=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.brown_mushroom));
  RegisterHelper.registerCrop(potato,Names.Plants.potato);
  RegisterHelper.registerCrop(carrot,Names.Plants.carrot);
  RegisterHelper.registerCrop(melon,Names.Plants.melon);
  RegisterHelper.registerCrop(pumpkin,Names.Plants.pumpkin);
  RegisterHelper.registerCrop(sugarcane,Names.Plants.sugarcane);
  RegisterHelper.registerCrop(dandelion,Names.Plants.dandelion);
  RegisterHelper.registerCrop(poppy,Names.Plants.poppy);
  RegisterHelper.registerCrop(orchid,Names.Plants.orchid);
  RegisterHelper.registerCrop(allium,Names.Plants.allium);
  RegisterHelper.registerCrop(tulipRed,Names.Plants.tulip + Names.Colors.red);
  RegisterHelper.registerCrop(tulipOrange,Names.Plants.tulip + Names.Colors.orange);
  RegisterHelper.registerCrop(tulipWhite,Names.Plants.tulip + Names.Colors.white);
  RegisterHelper.registerCrop(tulipPink,Names.Plants.tulip + Names.Colors.pink);
  RegisterHelper.registerCrop(daisy,Names.Plants.daisy);
  RegisterHelper.registerCrop(cactus,Names.Plants.cactus);
  RegisterHelper.registerCrop(shroomRed,Names.Plants.shroom + Names.Colors.red);
  RegisterHelper.registerCrop(shroomBrown,Names.Plants.shroom + Names.Colors.brown);
  LogHelper.info(""String_Node_Str"");
}"
95732,"public static void initBotaniaCrops(){
  if (ModIntegration.LoadedMods.botania && ConfigurationHandler.integration_Botania) {
    botaniaWhite=new BlockModPlant(ModItems.petal,0,3,1);
    botaniaOrange=new BlockModPlant(ModItems.petal,1,3,1);
    botaniaMagenta=new BlockModPlant(ModItems.petal,2,3,1);
    botaniaLightBlue=new BlockModPlant(ModItems.petal,3,3,1);
    botaniaYellow=new BlockModPlant(ModItems.petal,4,3,1);
    botaniaLime=new BlockModPlant(ModItems.petal,5,3,1);
    botaniaPink=new BlockModPlant(ModItems.petal,6,3,1);
    botaniaGray=new BlockModPlant(ModItems.petal,7,3,1);
    botaniaLightGray=new BlockModPlant(ModItems.petal,8,3,1);
    botaniaCyan=new BlockModPlant(ModItems.petal,9,3,1);
    botaniaPurple=new BlockModPlant(ModItems.petal,10,3,1);
    botaniaBlue=new BlockModPlant(ModItems.petal,11,3,1);
    botaniaBrown=new BlockModPlant(ModItems.petal,12,3,1);
    botaniaGreen=new BlockModPlant(ModItems.petal,13,3,1);
    botaniaRed=new BlockModPlant(ModItems.petal,14,3,1);
    botaniaBlack=new BlockModPlant(ModItems.petal,15,3,1);
    RegisterHelper.registerBlock(botaniaWhite,Names.Crops.cropBotaniaWhite);
    RegisterHelper.registerBlock(botaniaOrange,Names.Crops.cropBotaniaOrange);
    RegisterHelper.registerBlock(botaniaMagenta,Names.Crops.cropBotaniaMagenta);
    RegisterHelper.registerBlock(botaniaLightBlue,Names.Crops.cropBotaniaLightBlue);
    RegisterHelper.registerBlock(botaniaYellow,Names.Crops.cropBotaniaYellow);
    RegisterHelper.registerBlock(botaniaLime,Names.Crops.cropBotaniaLime);
    RegisterHelper.registerBlock(botaniaPink,Names.Crops.cropBotaniaPink);
    RegisterHelper.registerBlock(botaniaGray,Names.Crops.cropBotaniaGray);
    RegisterHelper.registerBlock(botaniaLightGray,Names.Crops.cropBotaniaLightGray);
    RegisterHelper.registerBlock(botaniaCyan,Names.Crops.cropBotaniaCyan);
    RegisterHelper.registerBlock(botaniaPurple,Names.Crops.cropBotaniaPurple);
    RegisterHelper.registerBlock(botaniaBlue,Names.Crops.cropBotaniaBlue);
    RegisterHelper.registerBlock(botaniaBrown,Names.Crops.cropBotaniaBrown);
    RegisterHelper.registerBlock(botaniaGreen,Names.Crops.cropBotaniaGreen);
    RegisterHelper.registerBlock(botaniaRed,Names.Crops.cropBotaniaRed);
    RegisterHelper.registerBlock(botaniaBlack,Names.Crops.cropBotaniaBlack);
    Seeds.initBotaniaSeeds();
    LogHelper.debug(""String_Node_Str"");
  }
}","public static void initBotaniaCrops(){
  if (ModIntegration.LoadedMods.botania && ConfigurationHandler.integration_Botania) {
    botaniaWhite=new BlockModPlant(ModItems.petal,0,3,1);
    botaniaOrange=new BlockModPlant(ModItems.petal,1,3,1);
    botaniaMagenta=new BlockModPlant(ModItems.petal,2,3,1);
    botaniaLightBlue=new BlockModPlant(ModItems.petal,3,3,1);
    botaniaYellow=new BlockModPlant(ModItems.petal,4,3,1);
    botaniaLime=new BlockModPlant(ModItems.petal,5,3,1);
    botaniaPink=new BlockModPlant(ModItems.petal,6,3,1);
    botaniaGray=new BlockModPlant(ModItems.petal,7,3,1);
    botaniaLightGray=new BlockModPlant(ModItems.petal,8,3,1);
    botaniaCyan=new BlockModPlant(ModItems.petal,9,3,1);
    botaniaPurple=new BlockModPlant(ModItems.petal,10,3,1);
    botaniaBlue=new BlockModPlant(ModItems.petal,11,3,1);
    botaniaBrown=new BlockModPlant(ModItems.petal,12,3,1);
    botaniaGreen=new BlockModPlant(ModItems.petal,13,3,1);
    botaniaRed=new BlockModPlant(ModItems.petal,14,3,1);
    botaniaBlack=new BlockModPlant(ModItems.petal,15,3,1);
    RegisterHelper.registerCrop(botaniaWhite,Names.Mods.botania + Names.Colors.white);
    RegisterHelper.registerCrop(botaniaOrange,Names.Mods.botania + Names.Colors.orange);
    RegisterHelper.registerCrop(botaniaMagenta,Names.Mods.botania + Names.Colors.magenta);
    RegisterHelper.registerCrop(botaniaLightBlue,Names.Mods.botania + Names.Colors.lightBlue);
    RegisterHelper.registerCrop(botaniaYellow,Names.Mods.botania + Names.Colors.yellow);
    RegisterHelper.registerCrop(botaniaLime,Names.Mods.botania + Names.Colors.lime);
    RegisterHelper.registerCrop(botaniaPink,Names.Mods.botania + Names.Colors.pink);
    RegisterHelper.registerCrop(botaniaGray,Names.Mods.botania + Names.Colors.gray);
    RegisterHelper.registerCrop(botaniaLightGray,Names.Mods.botania + Names.Colors.lightGray);
    RegisterHelper.registerCrop(botaniaCyan,Names.Mods.botania + Names.Colors.cyan);
    RegisterHelper.registerCrop(botaniaPurple,Names.Mods.botania + Names.Colors.purple);
    RegisterHelper.registerCrop(botaniaBlue,Names.Mods.botania + Names.Colors.blue);
    RegisterHelper.registerCrop(botaniaBrown,Names.Mods.botania + Names.Colors.brown);
    RegisterHelper.registerCrop(botaniaGreen,Names.Mods.botania + Names.Colors.green);
    RegisterHelper.registerCrop(botaniaRed,Names.Mods.botania + Names.Colors.red);
    RegisterHelper.registerCrop(botaniaBlack,Names.Mods.botania + Names.Colors.black);
    Seeds.initBotaniaSeeds();
    LogHelper.info(""String_Node_Str"");
  }
}"
95733,"public static void initCustomCrops(){
  if (ConfigurationHandler.customCrops) {
    String[] cropsRawData=IOHelper.getLinesArrayFromData(ConfigurationHandler.readCustomCrops());
    customCrops=new BlockModPlant[cropsRawData.length];
    customSeeds=new ItemModSeed[cropsRawData.length];
    for (int i=0; i < cropsRawData.length; i++) {
      String[] cropData=IOHelper.getData(cropsRawData[i]);
      boolean success=cropData.length == 7;
      String errorMsg=""String_Node_Str"";
      LogHelper.debug(new StringBuffer(""String_Node_Str"").append(cropsRawData[i]));
      if (success) {
        ItemStack fruitStack=IOHelper.getStack(cropData[1]);
        Item fruit=fruitStack != null ? fruitStack.getItem() : null;
        errorMsg=""String_Node_Str"";
        success=(fruit != null) || (cropData[1].equals(""String_Node_Str""));
        if (success) {
          String name=cropData[0];
          int fruitMeta=fruit != null ? fruitStack.getItemDamage() : 0;
          Block soil=cropData[2].equalsIgnoreCase(""String_Node_Str"") ? null : ((Block)Block.blockRegistry.getObject(cropData[2]));
          ItemStack base=IOHelper.getStack(cropData[3]);
          Block baseBlock=base != null ? ((ItemBlock)base.getItem()).field_150939_a : null;
          int baseMeta=base != null ? base.getItemDamage() : 0;
          int tier=Integer.parseInt(cropData[4]);
          int renderType=Integer.parseInt(cropData[5]);
          String info=cropData[6];
          customCrops[i]=new BlockModPlant(soil,baseBlock,baseMeta,fruit,fruitMeta,tier,renderType,true);
          RegisterHelper.registerBlock(customCrops[i],Names.Objects.crop + Character.toUpperCase(name.charAt(0)) + name.substring(1));
          customSeeds[i]=new ItemModSeed(customCrops[i],Character.toUpperCase(name.charAt(0)) + name.substring(1) + ""String_Node_Str"",info);
          RegisterHelper.registerSeed(customSeeds[i],Names.Objects.seed + Character.toUpperCase(name.charAt(0)) + name.substring(1),customCrops[i]);
        }
      }
      if (!success) {
        LogHelper.info(new StringBuffer(""String_Node_Str"").append(errorMsg).append(""String_Node_Str"").append(cropsRawData[i]).append(""String_Node_Str""));
      }
    }
    LogHelper.info(""String_Node_Str"");
  }
}","public static void initCustomCrops(){
  if (ConfigurationHandler.customCrops) {
    String[] cropsRawData=IOHelper.getLinesArrayFromData(ConfigurationHandler.readCustomCrops());
    customCrops=new BlockModPlant[cropsRawData.length];
    customSeeds=new ItemModSeed[cropsRawData.length];
    for (int i=0; i < cropsRawData.length; i++) {
      String[] cropData=IOHelper.getData(cropsRawData[i]);
      boolean success=cropData.length == 7;
      String errorMsg=""String_Node_Str"";
      LogHelper.debug(new StringBuffer(""String_Node_Str"").append(cropsRawData[i]));
      if (success) {
        ItemStack fruitStack=IOHelper.getStack(cropData[1]);
        Item fruit=fruitStack != null ? fruitStack.getItem() : null;
        errorMsg=""String_Node_Str"";
        success=(fruit != null) || (cropData[1].equals(""String_Node_Str""));
        if (success) {
          String name=cropData[0];
          int fruitMeta=fruit != null ? fruitStack.getItemDamage() : 0;
          Block soil=cropData[2].equalsIgnoreCase(""String_Node_Str"") ? null : ((Block)Block.blockRegistry.getObject(cropData[2]));
          ItemStack base=IOHelper.getStack(cropData[3]);
          Block baseBlock=base != null ? ((ItemBlock)base.getItem()).field_150939_a : null;
          int baseMeta=base != null ? base.getItemDamage() : 0;
          int tier=Integer.parseInt(cropData[4]);
          int renderType=Integer.parseInt(cropData[5]);
          String info=cropData[6];
          customCrops[i]=new BlockModPlant(soil,baseBlock,baseMeta,fruit,fruitMeta,tier,renderType,true);
          RegisterHelper.registerCrop(customCrops[i],Character.toUpperCase(name.charAt(0)) + name.substring(1));
          customSeeds[i]=new ItemModSeed(customCrops[i],Character.toUpperCase(name.charAt(0)) + name.substring(1) + ""String_Node_Str"",info);
          RegisterHelper.registerSeed(customSeeds[i],customCrops[i]);
        }
      }
      if (!success) {
        LogHelper.info(new StringBuffer(""String_Node_Str"").append(errorMsg).append(""String_Node_Str"").append(cropsRawData[i]).append(""String_Node_Str""));
      }
    }
    LogHelper.info(""String_Node_Str"");
  }
}"
95734,"public static void init(){
  if (ConfigurationHandler.resourcePlants) {
    Block farmland=null;
    OreDictHelper.getRegisteredOres();
    Items.initFruits();
    diamahlia=new BlockModPlant(farmland,net.minecraft.init.Blocks.diamond_ore,Items.nuggetDiamond,Items.nuggetDiamondMeta,5,6);
    ferranium=new BlockModPlant(farmland,net.minecraft.init.Blocks.iron_ore,Items.nuggetIron,Items.nuggetIronMeta,4,1);
    aurigold=new BlockModPlant(farmland,net.minecraft.init.Blocks.gold_ore,net.minecraft.init.Items.gold_nugget,0,4,6);
    lapender=new BlockModPlant(farmland,net.minecraft.init.Blocks.lapis_ore,net.minecraft.init.Items.dye,4,3,6);
    emeryllis=new BlockModPlant(farmland,net.minecraft.init.Blocks.emerald_ore,Items.nuggetEmerald,Items.nuggetEmeraldMeta,5,6);
    redstodendron=new BlockModPlant(farmland,net.minecraft.init.Blocks.redstone_ore,net.minecraft.init.Items.redstone,0,3,6);
    RegisterHelper.registerBlock(diamahlia,Names.Crops.cropDiamahlia);
    RegisterHelper.registerBlock(ferranium,Names.Crops.cropFerranium);
    RegisterHelper.registerBlock(aurigold,Names.Crops.cropAurigold);
    RegisterHelper.registerBlock(lapender,Names.Crops.cropLapender);
    RegisterHelper.registerBlock(emeryllis,Names.Crops.cropEmeryllis);
    RegisterHelper.registerBlock(redstodendron,Names.Crops.cropRedstodendron);
    if (OreDictHelper.oreCopper != null) {
      cuprosia=new BlockModPlant(farmland,OreDictHelper.oreCopper,OreDictHelper.oreCopperMeta,Items.nuggetCopper,Items.nuggetCopperMeta,3,6);
      RegisterHelper.registerBlock(cuprosia,Names.Crops.cropCuprosia);
    }
    if (OreDictHelper.oreTin != null) {
      petinia=new BlockModPlant(farmland,OreDictHelper.oreTin,OreDictHelper.oreTinMeta,Items.nuggetTin,Items.nuggetTinMeta,3,6);
      RegisterHelper.registerBlock(petinia,Names.Crops.cropPetinia);
    }
    if (OreDictHelper.oreLead != null) {
      plombean=new BlockModPlant(farmland,OreDictHelper.oreLead,OreDictHelper.oreLeadMeta,Items.nuggetLead,Items.nuggetLeadMeta,4,6);
      RegisterHelper.registerBlock(plombean,Names.Crops.cropPlombean);
    }
    if (OreDictHelper.oreSilver != null) {
      silverweed=new BlockModPlant(farmland,OreDictHelper.oreSilver,OreDictHelper.oreSilverMeta,Items.nuggetSilver,Items.nuggetSilverMeta,4,6);
      RegisterHelper.registerBlock(silverweed,Names.Crops.cropSilverweed);
    }
    if (OreDictHelper.oreAluminum != null) {
      jaslumine=new BlockModPlant(farmland,OreDictHelper.oreAluminum,OreDictHelper.oreAluminumMeta,Items.nuggetAluminum,Items.nuggetAluminumMeta,4,1);
      RegisterHelper.registerBlock(jaslumine,Names.Crops.cropJaslumine);
    }
    if (OreDictHelper.oreNickel != null) {
      niccissus=new BlockModPlant(farmland,OreDictHelper.oreNickel,OreDictHelper.oreNickelMeta,Items.nuggetNickel,Items.nuggetNickelMeta,4,6);
      RegisterHelper.registerBlock(niccissus,Names.Crops.cropNiccissus);
    }
    if (OreDictHelper.orePlatinum != null) {
      platiolus=new BlockModPlant(farmland,OreDictHelper.orePlatinum,OreDictHelper.orePlatinumMeta,Items.nuggetPlatinum,Items.nuggetPlatinumMeta,4,1);
      RegisterHelper.registerBlock(platiolus,Names.Crops.cropPlatiolus);
    }
    if (OreDictHelper.oreOsmium != null) {
      osmonium=new BlockModPlant(farmland,OreDictHelper.oreOsmium,OreDictHelper.oreOsmiumMeta,Items.nuggetOsmium,Items.nuggetOsmiumMeta,4,6);
      RegisterHelper.registerBlock(osmonium,Names.Crops.cropOsmonium);
    }
    LogHelper.debug(""String_Node_Str"");
  }
}","public static void init(){
  if (ConfigurationHandler.resourcePlants) {
    Block farmland=null;
    OreDictHelper.getRegisteredOres();
    Items.initFruits();
    diamahlia=new BlockModPlant(farmland,net.minecraft.init.Blocks.diamond_ore,Items.nuggetDiamond,Items.nuggetDiamondMeta,5,6);
    ferranium=new BlockModPlant(farmland,net.minecraft.init.Blocks.iron_ore,Items.nuggetIron,Items.nuggetIronMeta,4,1);
    aurigold=new BlockModPlant(farmland,net.minecraft.init.Blocks.gold_ore,net.minecraft.init.Items.gold_nugget,0,4,6);
    lapender=new BlockModPlant(farmland,net.minecraft.init.Blocks.lapis_ore,net.minecraft.init.Items.dye,4,3,6);
    emeryllis=new BlockModPlant(farmland,net.minecraft.init.Blocks.emerald_ore,Items.nuggetEmerald,Items.nuggetEmeraldMeta,5,6);
    redstodendron=new BlockModPlant(farmland,net.minecraft.init.Blocks.redstone_ore,net.minecraft.init.Items.redstone,0,3,6);
    RegisterHelper.registerCrop(diamahlia,Names.Plants.diamahlia);
    RegisterHelper.registerCrop(ferranium,Names.Plants.ferranium);
    RegisterHelper.registerCrop(aurigold,Names.Plants.aurigold);
    RegisterHelper.registerCrop(lapender,Names.Plants.lapender);
    RegisterHelper.registerCrop(emeryllis,Names.Plants.emeryllis);
    RegisterHelper.registerCrop(redstodendron,Names.Plants.redstodendron);
    if (OreDictHelper.oreCopper != null) {
      cuprosia=new BlockModPlant(farmland,OreDictHelper.oreCopper,OreDictHelper.oreCopperMeta,Items.nuggetCopper,Items.nuggetCopperMeta,3,6);
      RegisterHelper.registerCrop(cuprosia,Names.Plants.cuprosia);
    }
    if (OreDictHelper.oreTin != null) {
      petinia=new BlockModPlant(farmland,OreDictHelper.oreTin,OreDictHelper.oreTinMeta,Items.nuggetTin,Items.nuggetTinMeta,3,6);
      RegisterHelper.registerCrop(petinia,Names.Plants.petinia);
    }
    if (OreDictHelper.oreLead != null) {
      plombean=new BlockModPlant(farmland,OreDictHelper.oreLead,OreDictHelper.oreLeadMeta,Items.nuggetLead,Items.nuggetLeadMeta,4,6);
      RegisterHelper.registerCrop(plombean,Names.Plants.plombean);
    }
    if (OreDictHelper.oreSilver != null) {
      silverweed=new BlockModPlant(farmland,OreDictHelper.oreSilver,OreDictHelper.oreSilverMeta,Items.nuggetSilver,Items.nuggetSilverMeta,4,6);
      RegisterHelper.registerCrop(silverweed,Names.Plants.silverweed);
    }
    if (OreDictHelper.oreAluminum != null) {
      jaslumine=new BlockModPlant(farmland,OreDictHelper.oreAluminum,OreDictHelper.oreAluminumMeta,Items.nuggetAluminum,Items.nuggetAluminumMeta,4,1);
      RegisterHelper.registerCrop(jaslumine,Names.Plants.jaslumine);
    }
    if (OreDictHelper.oreNickel != null) {
      niccissus=new BlockModPlant(farmland,OreDictHelper.oreNickel,OreDictHelper.oreNickelMeta,Items.nuggetNickel,Items.nuggetNickelMeta,4,6);
      RegisterHelper.registerCrop(niccissus,Names.Plants.niccissus);
    }
    if (OreDictHelper.orePlatinum != null) {
      platiolus=new BlockModPlant(farmland,OreDictHelper.orePlatinum,OreDictHelper.orePlatinumMeta,Items.nuggetPlatinum,Items.nuggetPlatinumMeta,4,1);
      RegisterHelper.registerCrop(platiolus,Names.Plants.platiolus);
    }
    if (OreDictHelper.oreOsmium != null) {
      osmonium=new BlockModPlant(farmland,OreDictHelper.oreOsmium,OreDictHelper.oreOsmiumMeta,Items.nuggetOsmium,Items.nuggetOsmiumMeta,4,6);
      RegisterHelper.registerCrop(osmonium,Names.Plants.osmonium);
    }
    LogHelper.debug(""String_Node_Str"");
  }
}"
95735,"public static void init(){
  potato=new BlockModPlant(net.minecraft.init.Items.potato);
  carrot=new BlockModPlant(net.minecraft.init.Items.carrot);
  melon=new BlockModPlant(net.minecraft.init.Items.melon);
  pumpkin=new BlockModPlant(Item.getItemFromBlock(Blocks.pumpkin));
  sugarcane=new BlockModPlant(net.minecraft.init.Blocks.sand,net.minecraft.init.Items.reeds);
  dandelion=new BlockModPlant(net.minecraft.init.Items.dye,11);
  poppy=new BlockModPlant(net.minecraft.init.Items.dye,1);
  orchid=new BlockModPlant(net.minecraft.init.Items.dye,12);
  allium=new BlockModPlant(net.minecraft.init.Items.dye,13);
  tulipRed=new BlockModPlant(net.minecraft.init.Items.dye,1,2);
  tulipOrange=new BlockModPlant(net.minecraft.init.Items.dye,14,2);
  tulipWhite=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  tulipPink=new BlockModPlant(net.minecraft.init.Items.dye,9,2);
  daisy=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  cactus=new BlockModPlant(Blocks.sand,ConfigurationHandler.cactusGivesCactus ? Item.getItemFromBlock(Blocks.cactus) : net.minecraft.init.Items.dye,2);
  shroomRed=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.red_mushroom));
  shroomBrown=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.brown_mushroom));
  RegisterHelper.registerBlock(potato,Names.Crops.cropPotato);
  RegisterHelper.registerBlock(carrot,Names.Crops.cropCarrot);
  RegisterHelper.registerBlock(melon,Names.Crops.cropMelon);
  RegisterHelper.registerBlock(pumpkin,Names.Crops.cropPumpkin);
  RegisterHelper.registerBlock(sugarcane,Names.Crops.cropSugarcane);
  RegisterHelper.registerBlock(dandelion,Names.Crops.cropDandelion);
  RegisterHelper.registerBlock(poppy,Names.Crops.cropPoppy);
  RegisterHelper.registerBlock(orchid,Names.Crops.cropOrchid);
  RegisterHelper.registerBlock(allium,Names.Crops.cropAllium);
  RegisterHelper.registerBlock(tulipRed,Names.Crops.cropTulipRed);
  RegisterHelper.registerBlock(tulipOrange,Names.Crops.cropTulipOrange);
  RegisterHelper.registerBlock(tulipWhite,Names.Crops.cropTulipWhite);
  RegisterHelper.registerBlock(tulipPink,Names.Crops.cropTulipPink);
  RegisterHelper.registerBlock(daisy,Names.Crops.cropDaisy);
  RegisterHelper.registerBlock(cactus,Names.Crops.cropCactus);
  RegisterHelper.registerBlock(shroomRed,Names.Crops.cropShroomRed);
  RegisterHelper.registerBlock(shroomBrown,Names.Crops.cropShroomBrown);
  LogHelper.debug(""String_Node_Str"");
}","public static void init(){
  potato=new BlockModPlant(net.minecraft.init.Items.potato);
  potato.products.addProduce(new ItemStack(Items.poisonous_potato),10);
  carrot=new BlockModPlant(net.minecraft.init.Items.carrot);
  melon=new BlockModPlant(net.minecraft.init.Items.melon);
  pumpkin=new BlockModPlant(Item.getItemFromBlock(Blocks.pumpkin));
  sugarcane=new BlockModPlant(net.minecraft.init.Blocks.sand,net.minecraft.init.Items.reeds);
  dandelion=new BlockModPlant(net.minecraft.init.Items.dye,11);
  poppy=new BlockModPlant(net.minecraft.init.Items.dye,1);
  orchid=new BlockModPlant(net.minecraft.init.Items.dye,12);
  allium=new BlockModPlant(net.minecraft.init.Items.dye,13);
  tulipRed=new BlockModPlant(net.minecraft.init.Items.dye,1,2);
  tulipOrange=new BlockModPlant(net.minecraft.init.Items.dye,14,2);
  tulipWhite=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  tulipPink=new BlockModPlant(net.minecraft.init.Items.dye,9,2);
  daisy=new BlockModPlant(net.minecraft.init.Items.dye,7,2);
  cactus=new BlockModPlant(Blocks.sand,ConfigurationHandler.cactusGivesCactus ? Item.getItemFromBlock(Blocks.cactus) : net.minecraft.init.Items.dye,2);
  shroomRed=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.red_mushroom));
  shroomBrown=new BlockModPlant(Blocks.mycelium,Item.getItemFromBlock(Blocks.brown_mushroom));
  RegisterHelper.registerBlock(potato,Names.Crops.cropPotato);
  RegisterHelper.registerBlock(carrot,Names.Crops.cropCarrot);
  RegisterHelper.registerBlock(melon,Names.Crops.cropMelon);
  RegisterHelper.registerBlock(pumpkin,Names.Crops.cropPumpkin);
  RegisterHelper.registerBlock(sugarcane,Names.Crops.cropSugarcane);
  RegisterHelper.registerBlock(dandelion,Names.Crops.cropDandelion);
  RegisterHelper.registerBlock(poppy,Names.Crops.cropPoppy);
  RegisterHelper.registerBlock(orchid,Names.Crops.cropOrchid);
  RegisterHelper.registerBlock(allium,Names.Crops.cropAllium);
  RegisterHelper.registerBlock(tulipRed,Names.Crops.cropTulipRed);
  RegisterHelper.registerBlock(tulipOrange,Names.Crops.cropTulipOrange);
  RegisterHelper.registerBlock(tulipWhite,Names.Crops.cropTulipWhite);
  RegisterHelper.registerBlock(tulipPink,Names.Crops.cropTulipPink);
  RegisterHelper.registerBlock(daisy,Names.Crops.cropDaisy);
  RegisterHelper.registerBlock(cactus,Names.Crops.cropCactus);
  RegisterHelper.registerBlock(shroomRed,Names.Crops.cropShroomRed);
  RegisterHelper.registerBlock(shroomBrown,Names.Crops.cropShroomBrown);
  LogHelper.debug(""String_Node_Str"");
}"
95736,"@Mod.EventHandler public static void init(FMLInitializationEvent event){
  LogHelper.debug(""String_Node_Str"");
  ResourceCrops.init();
  Seeds.init();
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new GuiHandler());
  proxy.registerTileEntities();
  proxy.registerRenderers();
  ModIntegration.init();
  LogHelper.debug(""String_Node_Str"");
}","@Mod.EventHandler public static void init(FMLInitializationEvent event){
  LogHelper.debug(""String_Node_Str"");
  Seeds.init();
  NetworkRegistry.INSTANCE.registerGuiHandler(instance,new GuiHandler());
  proxy.registerTileEntities();
  proxy.registerRenderers();
  ModIntegration.init();
  LogHelper.debug(""String_Node_Str"");
}"
95737,"@Mod.EventHandler public static void postInit(FMLPostInitializationEvent event){
  LogHelper.debug(""String_Node_Str"");
  Crops.initBotaniaCrops();
  Recipes.init();
  CustomCrops.initCustomCrops();
  SeedHelper.init();
  MutationHandler.init();
  GrowthRequirements.initSoils();
  CustomCrops.initGrassSeeds();
  if (!ConfigurationHandler.disableWorldGen) {
    WorldGen.init();
  }
  proxy.initNEI();
  proxy.initSeedInfo();
  LogHelper.debug(""String_Node_Str"");
}","@Mod.EventHandler public static void postInit(FMLPostInitializationEvent event){
  LogHelper.debug(""String_Node_Str"");
  ResourceCrops.init();
  Crops.initBotaniaCrops();
  Recipes.init();
  CustomCrops.initCustomCrops();
  SeedHelper.init();
  MutationHandler.init();
  GrowthRequirements.initSoils();
  CustomCrops.initGrassSeeds();
  if (!ConfigurationHandler.disableWorldGen) {
    WorldGen.init();
  }
  proxy.initNEI();
  proxy.initSeedInfo();
  LogHelper.debug(""String_Node_Str"");
}"
95738,"public static void init(){
  if (ConfigurationHandler.resourcePlants) {
    Block farmland=null;
    OreDictHelper.getRegisteredOres();
    Items.initFruits();
    diamahlia=new BlockModPlant(farmland,net.minecraft.init.Blocks.diamond_ore,Items.nuggetDiamond,Items.nuggetDiamondMeta,5,6);
    ferranium=new BlockModPlant(farmland,net.minecraft.init.Blocks.iron_ore,Items.nuggetIron,Items.nuggetIronMeta,4,1);
    aurigold=new BlockModPlant(farmland,net.minecraft.init.Blocks.gold_ore,net.minecraft.init.Items.gold_nugget,0,4,6);
    lapender=new BlockModPlant(farmland,net.minecraft.init.Blocks.lapis_ore,net.minecraft.init.Items.dye,4,3,6);
    emeryllis=new BlockModPlant(farmland,net.minecraft.init.Blocks.emerald_ore,Items.nuggetEmerald,Items.nuggetEmeraldMeta,5,6);
    redstodendron=new BlockModPlant(farmland,net.minecraft.init.Blocks.redstone_ore,net.minecraft.init.Items.redstone,0,3,6);
    RegisterHelper.registerCrop(diamahlia,Names.Plants.diamahlia);
    RegisterHelper.registerCrop(ferranium,Names.Plants.ferranium);
    RegisterHelper.registerCrop(aurigold,Names.Plants.aurigold);
    RegisterHelper.registerCrop(lapender,Names.Plants.lapender);
    RegisterHelper.registerCrop(emeryllis,Names.Plants.emeryllis);
    RegisterHelper.registerCrop(redstodendron,Names.Plants.redstodendron);
    if (OreDictHelper.oreCopper != null) {
      cuprosia=new BlockModPlant(farmland,OreDictHelper.oreCopper,OreDictHelper.oreCopperMeta,Items.nuggetCopper,Items.nuggetCopperMeta,3,6);
      RegisterHelper.registerCrop(cuprosia,Names.Plants.cuprosia);
    }
    if (OreDictHelper.oreTin != null) {
      petinia=new BlockModPlant(farmland,OreDictHelper.oreTin,OreDictHelper.oreTinMeta,Items.nuggetTin,Items.nuggetTinMeta,3,6);
      RegisterHelper.registerCrop(petinia,Names.Plants.petinia);
    }
    if (OreDictHelper.oreLead != null) {
      plombean=new BlockModPlant(farmland,OreDictHelper.oreLead,OreDictHelper.oreLeadMeta,Items.nuggetLead,Items.nuggetLeadMeta,4,6);
      RegisterHelper.registerCrop(plombean,Names.Plants.plombean);
    }
    if (OreDictHelper.oreSilver != null) {
      silverweed=new BlockModPlant(farmland,OreDictHelper.oreSilver,OreDictHelper.oreSilverMeta,Items.nuggetSilver,Items.nuggetSilverMeta,4,6);
      RegisterHelper.registerCrop(silverweed,Names.Plants.silverweed);
    }
    if (OreDictHelper.oreAluminum != null) {
      jaslumine=new BlockModPlant(farmland,OreDictHelper.oreAluminum,OreDictHelper.oreAluminumMeta,Items.nuggetAluminum,Items.nuggetAluminumMeta,4,1);
      RegisterHelper.registerCrop(jaslumine,Names.Plants.jaslumine);
    }
    if (OreDictHelper.oreNickel != null) {
      niccissus=new BlockModPlant(farmland,OreDictHelper.oreNickel,OreDictHelper.oreNickelMeta,Items.nuggetNickel,Items.nuggetNickelMeta,4,6);
      RegisterHelper.registerCrop(niccissus,Names.Plants.niccissus);
    }
    if (OreDictHelper.orePlatinum != null) {
      platiolus=new BlockModPlant(farmland,OreDictHelper.orePlatinum,OreDictHelper.orePlatinumMeta,Items.nuggetPlatinum,Items.nuggetPlatinumMeta,4,1);
      RegisterHelper.registerCrop(platiolus,Names.Plants.platiolus);
    }
    if (OreDictHelper.oreOsmium != null) {
      osmonium=new BlockModPlant(farmland,OreDictHelper.oreOsmium,OreDictHelper.oreOsmiumMeta,Items.nuggetOsmium,Items.nuggetOsmiumMeta,4,6);
      RegisterHelper.registerCrop(osmonium,Names.Plants.osmonium);
    }
    LogHelper.debug(""String_Node_Str"");
  }
}","public static void init(){
  if (ConfigurationHandler.resourcePlants) {
    Block farmland=null;
    OreDictHelper.getRegisteredOres();
    Items.initFruits();
    diamahlia=new BlockModPlant(farmland,net.minecraft.init.Blocks.diamond_ore,Items.nuggetDiamond,Items.nuggetDiamondMeta,5,6);
    ferranium=new BlockModPlant(farmland,net.minecraft.init.Blocks.iron_ore,Items.nuggetIron,Items.nuggetIronMeta,4,1);
    aurigold=new BlockModPlant(farmland,net.minecraft.init.Blocks.gold_ore,net.minecraft.init.Items.gold_nugget,0,4,6);
    lapender=new BlockModPlant(farmland,net.minecraft.init.Blocks.lapis_ore,net.minecraft.init.Items.dye,4,3,6);
    emeryllis=new BlockModPlant(farmland,net.minecraft.init.Blocks.emerald_ore,Items.nuggetEmerald,Items.nuggetEmeraldMeta,5,6);
    redstodendron=new BlockModPlant(farmland,net.minecraft.init.Blocks.redstone_ore,net.minecraft.init.Items.redstone,0,3,6);
    RegisterHelper.registerCrop(diamahlia,Names.Plants.diamahlia);
    RegisterHelper.registerCrop(ferranium,Names.Plants.ferranium);
    RegisterHelper.registerCrop(aurigold,Names.Plants.aurigold);
    RegisterHelper.registerCrop(lapender,Names.Plants.lapender);
    RegisterHelper.registerCrop(emeryllis,Names.Plants.emeryllis);
    RegisterHelper.registerCrop(redstodendron,Names.Plants.redstodendron);
    if (OreDictHelper.oreCopper != null) {
      cuprosia=new BlockModPlant(farmland,OreDictHelper.oreCopper,OreDictHelper.oreCopperMeta,Items.nuggetCopper,Items.nuggetCopperMeta,3,6);
      RegisterHelper.registerCrop(cuprosia,Names.Plants.cuprosia);
    }
    if (OreDictHelper.oreTin != null) {
      petinia=new BlockModPlant(farmland,OreDictHelper.oreTin,OreDictHelper.oreTinMeta,Items.nuggetTin,Items.nuggetTinMeta,3,6);
      RegisterHelper.registerCrop(petinia,Names.Plants.petinia);
    }
    if (OreDictHelper.oreLead != null) {
      plombean=new BlockModPlant(farmland,OreDictHelper.oreLead,OreDictHelper.oreLeadMeta,Items.nuggetLead,Items.nuggetLeadMeta,4,6);
      RegisterHelper.registerCrop(plombean,Names.Plants.plombean);
    }
    if (OreDictHelper.oreSilver != null) {
      silverweed=new BlockModPlant(farmland,OreDictHelper.oreSilver,OreDictHelper.oreSilverMeta,Items.nuggetSilver,Items.nuggetSilverMeta,4,6);
      RegisterHelper.registerCrop(silverweed,Names.Plants.silverweed);
    }
    if (OreDictHelper.oreAluminum != null) {
      jaslumine=new BlockModPlant(farmland,OreDictHelper.oreAluminum,OreDictHelper.oreAluminumMeta,Items.nuggetAluminum,Items.nuggetAluminumMeta,4,1);
      RegisterHelper.registerCrop(jaslumine,Names.Plants.jaslumine);
    }
    if (OreDictHelper.oreNickel != null) {
      niccissus=new BlockModPlant(farmland,OreDictHelper.oreNickel,OreDictHelper.oreNickelMeta,Items.nuggetNickel,Items.nuggetNickelMeta,4,6);
      RegisterHelper.registerCrop(niccissus,Names.Plants.niccissus);
    }
    if (OreDictHelper.orePlatinum != null) {
      platiolus=new BlockModPlant(farmland,OreDictHelper.orePlatinum,OreDictHelper.orePlatinumMeta,Items.nuggetPlatinum,Items.nuggetPlatinumMeta,4,1);
      RegisterHelper.registerCrop(platiolus,Names.Plants.platiolus);
    }
    if (OreDictHelper.oreOsmium != null) {
      osmonium=new BlockModPlant(farmland,OreDictHelper.oreOsmium,OreDictHelper.oreOsmiumMeta,Items.nuggetOsmium,Items.nuggetOsmiumMeta,4,6);
      RegisterHelper.registerCrop(osmonium,Names.Plants.osmonium);
    }
    Seeds.initResourceSeeds();
    LogHelper.debug(""String_Node_Str"");
  }
}"
95739,"public static void init(){
  seedPotato=new ItemModSeed(Crops.potato,SeedInformation.potato);
  seedCarrot=new ItemModSeed(Crops.carrot,SeedInformation.carrot);
  seedSugarcane=new ItemModSeed(Crops.sugarcane,SeedInformation.sugarcane);
  seedDandelion=new ItemModSeed(Crops.dandelion,SeedInformation.dandelion);
  seedPoppy=new ItemModSeed(Crops.poppy,SeedInformation.poppy);
  seedOrchid=new ItemModSeed(Crops.orchid,SeedInformation.orchid);
  seedAllium=new ItemModSeed(Crops.allium,SeedInformation.allium);
  seedTulipRed=new ItemModSeed(Crops.tulipRed,SeedInformation.tulipRed);
  seedTulipOrange=new ItemModSeed(Crops.tulipOrange,SeedInformation.tulipOrange);
  seedTulipWhite=new ItemModSeed(Crops.tulipWhite,SeedInformation.tulipWhite);
  seedTulipPink=new ItemModSeed(Crops.tulipPink,SeedInformation.tulipPink);
  seedDaisy=new ItemModSeed(Crops.daisy,SeedInformation.daisy);
  seedCactus=new ItemModSeed(Crops.cactus,SeedInformation.cactus);
  seedShroomRed=new ItemModSeed(Crops.shroomRed,SeedInformation.shroomRed);
  seedShroomBrown=new ItemModSeed(Crops.shroomBrown,SeedInformation.shroomBrown);
  RegisterHelper.registerSeed(seedPotato,Crops.potato);
  RegisterHelper.registerSeed(seedCarrot,Crops.carrot);
  RegisterHelper.registerSeed(seedSugarcane,Crops.sugarcane);
  RegisterHelper.registerSeed(seedDandelion,Crops.dandelion);
  RegisterHelper.registerSeed(seedPoppy,Crops.poppy);
  RegisterHelper.registerSeed(seedOrchid,Crops.orchid);
  RegisterHelper.registerSeed(seedAllium,Crops.allium);
  RegisterHelper.registerSeed(seedTulipRed,Crops.tulipRed);
  RegisterHelper.registerSeed(seedTulipOrange,Crops.tulipOrange);
  RegisterHelper.registerSeed(seedTulipWhite,Crops.tulipWhite);
  RegisterHelper.registerSeed(seedTulipPink,Crops.tulipPink);
  RegisterHelper.registerSeed(seedDaisy,Crops.daisy);
  RegisterHelper.registerSeed(seedCactus,Crops.cactus);
  RegisterHelper.registerSeed(seedShroomRed,Crops.shroomRed);
  RegisterHelper.registerSeed(seedShroomBrown,Crops.shroomBrown);
  if (ConfigurationHandler.resourcePlants) {
    seedDiamahlia=new ItemModSeed(ResourceCrops.diamahlia,SeedInformation.diamahlia);
    seedFerranium=new ItemModSeed(ResourceCrops.ferranium,SeedInformation.ferranium);
    seedAurigold=new ItemModSeed(ResourceCrops.aurigold,SeedInformation.aurigold);
    seedLapender=new ItemModSeed(ResourceCrops.lapender,SeedInformation.lapender);
    seedEmeryllis=new ItemModSeed(ResourceCrops.emeryllis,SeedInformation.emeryllis);
    seedRedstodendron=new ItemModSeed(ResourceCrops.redstodendron,SeedInformation.redstodendron);
    RegisterHelper.registerSeed(seedFerranium,ResourceCrops.ferranium);
    RegisterHelper.registerSeed(seedDiamahlia,ResourceCrops.diamahlia);
    RegisterHelper.registerSeed(seedAurigold,ResourceCrops.aurigold);
    RegisterHelper.registerSeed(seedLapender,ResourceCrops.lapender);
    RegisterHelper.registerSeed(seedEmeryllis,ResourceCrops.emeryllis);
    RegisterHelper.registerSeed(seedRedstodendron,ResourceCrops.redstodendron);
    if (OreDictHelper.oreCopper != null) {
      seedCuprosia=new ItemModSeed(ResourceCrops.cuprosia,SeedInformation.cuprosia);
      RegisterHelper.registerSeed(seedCuprosia,ResourceCrops.cuprosia);
    }
    if (OreDictHelper.oreTin != null) {
      seedPetinia=new ItemModSeed(ResourceCrops.petinia,SeedInformation.petinia);
      RegisterHelper.registerSeed(seedPetinia,ResourceCrops.petinia);
    }
    if (OreDictHelper.oreLead != null) {
      seedPlombean=new ItemModSeed(ResourceCrops.plombean,SeedInformation.plombean);
      RegisterHelper.registerSeed(seedPlombean,ResourceCrops.plombean);
    }
    if (OreDictHelper.oreSilver != null) {
      seedSilverweed=new ItemModSeed(ResourceCrops.silverweed,SeedInformation.silverweed);
      RegisterHelper.registerSeed(seedSilverweed,ResourceCrops.silverweed);
    }
    if (OreDictHelper.oreAluminum != null) {
      seedJaslumine=new ItemModSeed(ResourceCrops.jaslumine,SeedInformation.jaslumine);
      RegisterHelper.registerSeed(seedJaslumine,ResourceCrops.jaslumine);
    }
    if (OreDictHelper.oreNickel != null) {
      seedNiccissus=new ItemModSeed(ResourceCrops.niccissus,SeedInformation.niccissus);
      RegisterHelper.registerSeed(seedNiccissus,ResourceCrops.niccissus);
    }
    if (OreDictHelper.orePlatinum != null) {
      seedPlatiolus=new ItemModSeed(ResourceCrops.platiolus,SeedInformation.platiolus);
      RegisterHelper.registerSeed(seedPlatiolus,ResourceCrops.platiolus);
    }
    if (OreDictHelper.oreOsmium != null) {
      seedOsmonium=new ItemModSeed(ResourceCrops.osmonium,SeedInformation.osmonium);
      RegisterHelper.registerSeed(seedOsmonium,ResourceCrops.osmonium);
    }
  }
  if (ModIntegration.LoadedMods.natura) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,NContent.plantItem);
  }
  if (ModIntegration.LoadedMods.exNihilo) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,ExNihiloHelper.seedCarrot);
    OreDictionary.registerOre(Names.OreDict.listAllseed,ExNihiloHelper.seedPotato);
    OreDictionary.registerOre(Names.OreDict.listAllseed,ExNihiloHelper.seedSugarCane);
  }
  if (ModIntegration.LoadedMods.plantMegaPack) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
  }
  LogHelper.info(""String_Node_Str"");
}","public static void init(){
  seedPotato=new ItemModSeed(Crops.potato,SeedInformation.potato);
  seedCarrot=new ItemModSeed(Crops.carrot,SeedInformation.carrot);
  seedSugarcane=new ItemModSeed(Crops.sugarcane,SeedInformation.sugarcane);
  seedDandelion=new ItemModSeed(Crops.dandelion,SeedInformation.dandelion);
  seedPoppy=new ItemModSeed(Crops.poppy,SeedInformation.poppy);
  seedOrchid=new ItemModSeed(Crops.orchid,SeedInformation.orchid);
  seedAllium=new ItemModSeed(Crops.allium,SeedInformation.allium);
  seedTulipRed=new ItemModSeed(Crops.tulipRed,SeedInformation.tulipRed);
  seedTulipOrange=new ItemModSeed(Crops.tulipOrange,SeedInformation.tulipOrange);
  seedTulipWhite=new ItemModSeed(Crops.tulipWhite,SeedInformation.tulipWhite);
  seedTulipPink=new ItemModSeed(Crops.tulipPink,SeedInformation.tulipPink);
  seedDaisy=new ItemModSeed(Crops.daisy,SeedInformation.daisy);
  seedCactus=new ItemModSeed(Crops.cactus,SeedInformation.cactus);
  seedShroomRed=new ItemModSeed(Crops.shroomRed,SeedInformation.shroomRed);
  seedShroomBrown=new ItemModSeed(Crops.shroomBrown,SeedInformation.shroomBrown);
  RegisterHelper.registerSeed(seedPotato,Crops.potato);
  RegisterHelper.registerSeed(seedCarrot,Crops.carrot);
  RegisterHelper.registerSeed(seedSugarcane,Crops.sugarcane);
  RegisterHelper.registerSeed(seedDandelion,Crops.dandelion);
  RegisterHelper.registerSeed(seedPoppy,Crops.poppy);
  RegisterHelper.registerSeed(seedOrchid,Crops.orchid);
  RegisterHelper.registerSeed(seedAllium,Crops.allium);
  RegisterHelper.registerSeed(seedTulipRed,Crops.tulipRed);
  RegisterHelper.registerSeed(seedTulipOrange,Crops.tulipOrange);
  RegisterHelper.registerSeed(seedTulipWhite,Crops.tulipWhite);
  RegisterHelper.registerSeed(seedTulipPink,Crops.tulipPink);
  RegisterHelper.registerSeed(seedDaisy,Crops.daisy);
  RegisterHelper.registerSeed(seedCactus,Crops.cactus);
  RegisterHelper.registerSeed(seedShroomRed,Crops.shroomRed);
  RegisterHelper.registerSeed(seedShroomBrown,Crops.shroomBrown);
  if (ModIntegration.LoadedMods.natura) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,NContent.plantItem);
  }
  if (ModIntegration.LoadedMods.exNihilo) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,ExNihiloHelper.seedCarrot);
    OreDictionary.registerOre(Names.OreDict.listAllseed,ExNihiloHelper.seedPotato);
    OreDictionary.registerOre(Names.OreDict.listAllseed,ExNihiloHelper.seedSugarCane);
  }
  if (ModIntegration.LoadedMods.plantMegaPack) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
  }
  if (Loader.isModLoaded(""String_Node_Str"")) {
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
    OreDictionary.registerOre(Names.OreDict.listAllseed,(Item)Item.itemRegistry.getObject(""String_Node_Str""));
  }
  LogHelper.info(""String_Node_Str"");
}"
95740,"private void drawSeedTitle(int index){
  ItemStack seed=discoveredSeeds[index];
  String title=seed.getDisplayName();
  BlockWithMeta soil=GrowthRequirements.getGrowthRequirement((ItemSeeds)seed.getItem(),seed.getItemDamage()).getSoil();
  Minecraft.getMinecraft().getTextureManager().bindTexture(RenderHelper.getItemResource(seedIcon));
  if (soil != null) {
    this.renderIconInGui(this.guiLeft + 26,this.guiTop + 11,RenderHelper.getBlockResource(soil.getBlock().getIcon(1,soil.getMeta())));
  }
  this.renderIconInGui(this.guiLeft + 25,this.guiTop + 11,RenderHelper.getItemResource(seedIcon));
  float scale=0.8F;
  while (this.fontRendererObj.getStringWidth(title) * scale > 74) {
    scale=scale - 0.1F;
  }
  GL11.glScalef(scale,scale,scale);
  this.fontRendererObj.drawString(title,(int)((this.guiLeft + 46 + 36) / scale) - this.fontRendererObj.getStringWidth(title) / 2,(int)((this.guiTop + 17) / scale),this.black);
  GL11.glScalef(1 / scale,1 / scale,1 / scale);
}","private void drawSeedTitle(int index){
  ItemStack seed=discoveredSeeds[index];
  String title=seed.getDisplayName();
  BlockWithMeta soil=GrowthRequirements.getGrowthRequirement((ItemSeeds)seed.getItem(),seed.getItemDamage()).getSoil();
  Minecraft.getMinecraft().getTextureManager().bindTexture(RenderHelper.getItemResource(seedIcon));
  if (soil != null) {
    this.renderIconInGui(this.guiLeft + 26,this.guiTop + 11,RenderHelper.getBlockResource(soil.getBlock().getIcon(1,soil.getMeta())));
  }
  GuiScreen.itemRender.renderItemIntoGUI(Minecraft.getMinecraft().fontRenderer,Minecraft.getMinecraft().getTextureManager(),seed,this.guiLeft + 25,this.guiTop + 11);
  float scale=0.8F;
  while (this.fontRendererObj.getStringWidth(title) * scale > 74) {
    scale=scale - 0.1F;
  }
  GL11.glScalef(scale,scale,scale);
  this.fontRendererObj.drawString(title,(int)((this.guiLeft + 46 + 36) / scale) - this.fontRendererObj.getStringWidth(title) / 2,(int)((this.guiTop + 17) / scale),this.black);
  GL11.glScalef(1 / scale,1 / scale,1 / scale);
}"
95741,"private void drawSeedFruits(){
  int xOffset=this.guiLeft + 30;
  int yOffset=this.guiTop + 91;
  float scale;
  for (int i=0; i < fruitIcons.length; i++) {
    if (fruitIcons[i] != null) {
      GL11.glDisable(GL11.GL_LIGHTING);
      Minecraft.getMinecraft().getTextureManager().bindTexture(textureSeedPage);
      GL11.glColor3f(1,1,1);
      drawTexturedModalRect(xOffset - 1 + i * 24,yOffset - 1,0,238,18,18);
      GL11.glEnable(GL11.GL_LIGHTING);
      ResourceLocation texture;
      if (fruits[i].getItem() instanceof ItemBlock) {
        texture=RenderHelper.getBlockResource(fruitIcons[i]);
        Minecraft.getMinecraft().getTextureManager().bindTexture(texture);
      }
 else {
        texture=RenderHelper.getItemResource(fruitIcons[i]);
        Minecraft.getMinecraft().getTextureManager().bindTexture(texture);
      }
      this.renderIconInGui(xOffset + i * 24,yOffset,texture);
    }
  }
  scale=0.5F;
  GL11.glScalef(scale,scale,scale);
  this.fontRendererObj.drawString(StatCollector.translateToLocal(""String_Node_Str"") + ""String_Node_Str"",(int)(this.textStart / scale),(int)((yOffset - 7) / scale),this.black);
  GL11.glScalef(1 / scale,1 / scale,1 / scale);
}","private void drawSeedFruits(){
  int xOffset=this.guiLeft + 30;
  int yOffset=this.guiTop + 91;
  float scale;
  for (int i=0; i < fruitIcons.length; i++) {
    if (fruitIcons[i] != null) {
      GL11.glDisable(GL11.GL_LIGHTING);
      Minecraft.getMinecraft().getTextureManager().bindTexture(textureSeedPage);
      GL11.glColor3f(1,1,1);
      drawTexturedModalRect(xOffset - 1 + i * 24,yOffset - 1,0,238,18,18);
      GL11.glEnable(GL11.GL_LIGHTING);
      GuiScreen.itemRender.renderItemIntoGUI(Minecraft.getMinecraft().fontRenderer,Minecraft.getMinecraft().getTextureManager(),fruits[i],xOffset + i * 24,yOffset);
    }
  }
  scale=0.5F;
  GL11.glScalef(scale,scale,scale);
  this.fontRendererObj.drawString(StatCollector.translateToLocal(""String_Node_Str"") + ""String_Node_Str"",(int)(this.textStart / scale),(int)((yOffset - 7) / scale),this.black);
  GL11.glScalef(1 / scale,1 / scale,1 / scale);
}"
95742,"@SubscribeEvent(priority=EventPriority.HIGHEST) public void onPlayerUseItemEvent(PlayerInteractEvent event){
  if (event.action == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK) {
    Block block=event.world.getBlock(event.x,event.y,event.z);
    int meta=event.world.getBlockMetadata(event.x,event.y,event.z);
    if (event.entityPlayer.getCurrentEquippedItem() != null && event.entityPlayer.getCurrentEquippedItem().stackSize > 0 && event.entityPlayer.getCurrentEquippedItem().getItem() != null && event.entityPlayer.getCurrentEquippedItem().getItem() instanceof IPlantable) {
      if (GrowthRequirements.isSoilValid(block,meta)) {
        if (ConfigurationHandler.disableVanillaFarming) {
          this.denyEvent(event,false);
        }
 else         if (event.entityPlayer.getCurrentEquippedItem().hasTagCompound()) {
          NBTTagCompound tag=(NBTTagCompound)event.entityPlayer.getCurrentEquippedItem().getTagCompound().copy();
          if (tag.hasKey(Names.NBT.growth) && tag.hasKey(Names.NBT.gain) && tag.hasKey(Names.NBT.strength)) {
            this.denyEvent(event,false);
          }
        }
      }
    }
  }
}","@SubscribeEvent(priority=EventPriority.HIGHEST) public void onPlayerUseItemEvent(PlayerInteractEvent event){
  if (event.action == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK) {
    Block block=event.world.getBlock(event.x,event.y,event.z);
    int meta=event.world.getBlockMetadata(event.x,event.y,event.z);
    if (event.entityPlayer.getCurrentEquippedItem() != null && event.entityPlayer.getCurrentEquippedItem().stackSize > 0 && event.entityPlayer.getCurrentEquippedItem().getItem() != null && event.entityPlayer.getCurrentEquippedItem().getItem() instanceof IPlantable) {
      if (GrowthRequirements.isSoilValid(block,meta) || block == Blocks.farmland) {
        if (ConfigurationHandler.disableVanillaFarming) {
          this.denyEvent(event,false);
        }
 else         if (event.entityPlayer.getCurrentEquippedItem().hasTagCompound()) {
          NBTTagCompound tag=(NBTTagCompound)event.entityPlayer.getCurrentEquippedItem().getTagCompound().copy();
          if (tag.hasKey(Names.NBT.growth) && tag.hasKey(Names.NBT.gain) && tag.hasKey(Names.NBT.strength)) {
            this.denyEvent(event,false);
          }
        }
      }
    }
  }
}"
95743,"public CachedCropMutationRecipe(Mutation mutation){
  this.parent1=new PositionedStack(mutation.parent1.copy(),Constants.nei_X1,Constants.nei_Y1);
  this.parent2=new PositionedStack(mutation.parent2.copy(),Constants.nei_X2,Constants.nei_Y1);
  this.result=new PositionedStack(mutation.result.copy(),Constants.nei_X3,Constants.nei_Y1);
  GrowthRequirement growthReq=GrowthRequirements.getGrowthRequirement((ItemSeeds)result.item.getItem(),result.item.getItemDamage());
  if (growthReq.getSoil() != null) {
    Block soilBlock=growthReq.getSoil().getBlock();
    soils.add(new PositionedStack(new ItemStack(soilBlock),Constants.nei_X3,Constants.nei_Y2));
  }
 else {
    for (    BlockWithMeta blockWithMeta : GrowthRequirements.defaultSoils) {
      soils.add(new PositionedStack(new ItemStack(blockWithMeta.getBlock()),Constants.nei_X3,Constants.nei_Y2));
    }
  }
  this.requiredType=growthReq.getRequiredType();
  if (requiredType != GrowthRequirement.RequirementType.NONE) {
    requiredBlock=new PositionedStack(growthReq.requiredBlockAsItemStack(),Constants.nei_X3,Constants.nei_Y3);
  }
}","public CachedCropMutationRecipe(Mutation mutation){
  this.parent1=new PositionedStack(mutation.parent1.copy(),Constants.nei_X1,Constants.nei_Y1);
  this.parent2=new PositionedStack(mutation.parent2.copy(),Constants.nei_X2,Constants.nei_Y1);
  this.result=new PositionedStack(mutation.result.copy(),Constants.nei_X3,Constants.nei_Y1);
  GrowthRequirement growthReq=GrowthRequirements.getGrowthRequirement((ItemSeeds)result.item.getItem(),result.item.getItemDamage());
  if (growthReq.getSoil() != null) {
    soils.add(new PositionedStack(growthReq.getSoil().toStack(),Constants.nei_X3,Constants.nei_Y2));
  }
 else {
    for (    BlockWithMeta blockWithMeta : GrowthRequirements.defaultSoils) {
      soils.add(new PositionedStack(blockWithMeta.toStack(),Constants.nei_X3,Constants.nei_Y2));
    }
  }
  this.requiredType=growthReq.getRequiredType();
  if (requiredType != GrowthRequirement.RequirementType.NONE) {
    requiredBlock=new PositionedStack(growthReq.requiredBlockAsItemStack(),Constants.nei_X3,Constants.nei_Y3);
  }
}"
95744,"public static int[] getStats(TileEntityCrop[] input,boolean mutation){
  int[] output=new int[3];
  TileEntityCrop[] neighbors=getParents(input);
  int size=neighbors.length;
  int[] growth=new int[size];
  int[] gain=new int[size];
  int[] strength=new int[size];
  for (int i=0; i < size; i++) {
    growth[i]=neighbors[i].growth;
    gain[i]=neighbors[i].gain;
    strength[i]=neighbors[i].strength;
  }
  int meanGrowth=getMean(growth);
  int meanGain=getMean(gain);
  int meanStrength=getMean(strength);
  int divisor=mutation ? 1 : ConfigurationHandler.cropStatDivisor;
  output[0]=Math.max(1,getGain(meanGrowth,size) / divisor);
  output[1]=Math.max(1,getGain(meanGain,size) / divisor);
  output[2]=Math.max(1,getGain(meanStrength,size) / divisor);
  for (int i=0; i < output.length; i++) {
    output[i]=output[i] > ConfigurationHandler.cropStatCap ? ConfigurationHandler.cropStatCap : output[i];
  }
  return output;
}","public static int[] getStats(TileEntityCrop[] input,boolean mutation){
  int[] output=new int[3];
  TileEntityCrop[] neighbors=getParents(input);
  int size=neighbors.length;
  int[] growth=new int[size];
  int[] gain=new int[size];
  int[] strength=new int[size];
  for (int i=0; i < size; i++) {
    growth[i]=neighbors[i].growth;
    gain[i]=neighbors[i].gain;
    strength[i]=neighbors[i].strength;
  }
  int meanGrowth=getMean(growth);
  int meanGain=getMean(gain);
  int meanStrength=getMean(strength);
  int divisor=mutation ? ConfigurationHandler.cropStatDivisor : 1;
  output[0]=Math.max(1,getGain(meanGrowth,size) / divisor);
  output[1]=Math.max(1,getGain(meanGain,size) / divisor);
  output[2]=Math.max(1,getGain(meanStrength,size) / divisor);
  for (int i=0; i < output.length; i++) {
    output[i]=output[i] > ConfigurationHandler.cropStatCap ? ConfigurationHandler.cropStatCap : output[i];
  }
  return output;
}"
95745,"/** 
 * Tries to move an item stack form the correct tile entity to the player's inventory
 */
public void moveStackFromTileEntityToPlayer(int slotId,ItemStack stack){
  ISeedStorageControllable controllable=this.getControllable(stack);
  if (controllable != null) {
    ItemStack stackToMove=controllable.getStackInSlot(slotId);
    stackToMove.stackSize=stack.stackSize;
    stackToMove.stackTagCompound=controllable.getStackInSlot(slotId).stackTagCompound;
    if (this.mergeItemStack(stackToMove,0,PLAYER_INVENTORY_SIZE,false)) {
      if (FMLCommonHandler.instance().getEffectiveSide() == Side.CLIENT) {
        NetworkWrapperAgriCraft.wrapper.sendToServer(new MessageContainerSeedStorage(stack,Minecraft.getMinecraft().thePlayer,slotId));
      }
 else {
        controllable.decrStackSize(slotId,stack.stackSize - stackToMove.stackSize);
      }
    }
 else {
      return;
    }
  }
}","/** 
 * Tries to move an item stack form the correct tile entity to the player's inventory
 */
public void moveStackFromTileEntityToPlayer(int slotId,ItemStack stack){
  ISeedStorageControllable controllable=this.getControllable(stack);
  if (controllable != null) {
    ItemStack stackToMove=controllable.getStackInSlot(slotId);
    stackToMove.stackSize=stack.stackSize;
    stackToMove.stackTagCompound=controllable.getStackInSlot(slotId).stackTagCompound;
    if (this.mergeItemStack(stackToMove,0,PLAYER_INVENTORY_SIZE,false)) {
      if (FMLCommonHandler.instance().getEffectiveSide() == Side.CLIENT) {
        controllable.decrStackSize(slotId,stack.stackSize - stackToMove.stackSize);
        NetworkWrapperAgriCraft.wrapper.sendToServer(new MessageContainerSeedStorage(stack,Minecraft.getMinecraft().thePlayer,slotId));
        controllable.decrStackSize(slotId,stack.stackSize - stackToMove.stackSize);
      }
 else {
        controllable.decrStackSize(slotId,stack.stackSize - stackToMove.stackSize);
      }
    }
 else {
      return;
    }
  }
}"
95746,"public GuiSeedStorageDummy(ContainerSeedStorageDummy container,int maxVertSlots,int maxHorSlots,int sortButtonX,int sortButtonY,int setActiveSeedButtonsX,int setActiveSeedButtonsY,int seedSlotsX,int seedSlotsY){
  super(container);
  this.container=container;
  this.maxVertSlots=maxVertSlots;
  this.maxHorSlots=maxHorSlots;
  this.sortButtonX=sortButtonX;
  this.sortButtonY=sortButtonY;
  this.setActiveSeedButtonOffset_X=setActiveSeedButtonsX;
  this.setActiveSeedButtonOffset_Y=setActiveSeedButtonsY;
  this.seedSlotButtonOffset_X=seedSlotsX;
  this.seedSlotButtonOffset_Y=seedSlotsY;
}","public GuiSeedStorageDummy(ContainerSeedStorageDummy container,int maxVertSlots,int maxHorSlots,int sortButtonX,int sortButtonY,int setActiveSeedButtonsX,int setActiveSeedButtonsY,int seedSlotsX,int seedSlotsY){
  super(container);
  this.container=container;
  this.maxVertSlots=maxVertSlots;
  this.maxHorSlots=maxHorSlots;
  this.sortButtonX=sortButtonX;
  this.sortButtonY=sortButtonY;
  this.setActiveSeedButtonOffset_X=setActiveSeedButtonsX;
  this.setActiveSeedButtonOffset_Y=setActiveSeedButtonsY;
  this.seedSlotButtonOffset_X=this.guiLeft + seedSlotsX;
  this.seedSlotButtonOffset_Y=this.guiTop + seedSlotsY;
}"
95747,"@Override public void updateEntity(){
  if (!this.worldObj.isRemote) {
    ArrayList<TileEntityCustomWood> neighbours=new ArrayList<TileEntityCustomWood>();
    if (this.hasNeighbour('x',1)) {
      neighbours.add((TileEntityCustomWood)this.worldObj.getTileEntity(this.xCoord + 1,this.yCoord,this.zCoord));
    }
    if (this.hasNeighbour('x',-1)) {
      neighbours.add((TileEntityCustomWood)this.worldObj.getTileEntity(this.xCoord - 1,this.yCoord,this.zCoord));
    }
    if (this.hasNeighbour('z',1)) {
      neighbours.add((TileEntityCustomWood)this.worldObj.getTileEntity(this.xCoord,this.yCoord,this.zCoord + 1));
    }
    if (this.hasNeighbour('z',-1)) {
      neighbours.add((TileEntityCustomWood)this.worldObj.getTileEntity(this.xCoord,this.yCoord,this.zCoord - 1));
    }
    int totalLvl=0;
    int nr=1;
    int updatedLevel=this.getFluidLevel();
    for (    TileEntityCustomWood te : neighbours) {
      if (te instanceof TileEntityChannel) {
        if (!(te instanceof TileEntityValve && ((TileEntityValve)te).isPowered())) {
          totalLvl=totalLvl + ((TileEntityChannel)te).lvl;
          nr++;
        }
      }
 else {
        TileEntityTank tank=(TileEntityTank)te;
        int Y=tank.getYPosition();
        float y_c=16 * Y + getDiscreteScaledFluidHeight();
        float y_t=tank.getFluidY();
        float y1=(float)5 + 16 * Y;
        float y2=(float)12 + 16 * Y;
        int V_tot=tank.getFluidLevel() + this.lvl;
        if (y_c != y_t) {
          if (tank.getFluidY(V_tot) <= y1) {
            updatedLevel=0;
            tank.setFluidLevel(V_tot);
          }
 else           if (tank.getFluidY(V_tot - 500) >= y2) {
            updatedLevel=500;
            tank.setFluidLevel(V_tot - 500);
          }
 else {
            int tankYSize=tank.getYSize();
            int C=tank.getTotalCapacity();
            float enumerator=((float)V_tot) + ((500 * y1) / (y2 - y1) + ((float)2 * C) / ((float)(16 * tankYSize - 2)));
            float denominator=(((float)500) / (y2 - y1) + ((float)C) / ((float)(16 * tankYSize - 2)));
            float y=enumerator / denominator;
            int channelVolume=(int)Math.floor(500 * (y - y1) / (y2 - y1));
            int tankVolume=(int)Math.ceil(C * (y - 2) / (16 * tankYSize - 2));
            updatedLevel=channelVolume;
            tank.setFluidLevel(tankVolume);
          }
        }
      }
    }
    totalLvl=totalLvl + updatedLevel;
    int rest=totalLvl % nr;
    int newLvl=totalLvl / nr;
    if (nr > 1) {
      for (      TileEntityCustomWood te : neighbours) {
        if (te instanceof TileEntityChannel) {
          if (!(te instanceof TileEntityValve && ((TileEntityValve)te).isPowered())) {
            int lvl=rest == 0 ? newLvl : newLvl + 1;
            rest=rest == 0 ? 0 : rest - 1;
            ((TileEntityChannel)te).setFluidLevel(lvl);
          }
        }
      }
    }
    this.setFluidLevel(newLvl + rest);
    this.syncToClient(false);
  }
}","@Override public void updateEntity(){
  if (!this.worldObj.isRemote) {
    ArrayList<TileEntityCustomWood> neighbours=new ArrayList<TileEntityCustomWood>();
    if (this.hasNeighbour('x',1)) {
      neighbours.add((TileEntityCustomWood)this.worldObj.getTileEntity(this.xCoord + 1,this.yCoord,this.zCoord));
    }
    if (this.hasNeighbour('x',-1)) {
      neighbours.add((TileEntityCustomWood)this.worldObj.getTileEntity(this.xCoord - 1,this.yCoord,this.zCoord));
    }
    if (this.hasNeighbour('z',1)) {
      neighbours.add((TileEntityCustomWood)this.worldObj.getTileEntity(this.xCoord,this.yCoord,this.zCoord + 1));
    }
    if (this.hasNeighbour('z',-1)) {
      neighbours.add((TileEntityCustomWood)this.worldObj.getTileEntity(this.xCoord,this.yCoord,this.zCoord - 1));
    }
    int totalLvl=0;
    int nr=1;
    int updatedLevel=this.getFluidLevel();
    for (    TileEntityCustomWood te : neighbours) {
      if (te instanceof TileEntityChannel) {
        if (!(te instanceof TileEntityValve && ((TileEntityValve)te).isPowered())) {
          totalLvl=totalLvl + ((TileEntityChannel)te).lvl;
          nr++;
        }
      }
 else {
        TileEntityTank tank=(TileEntityTank)te;
        int Y=tank.getYPosition();
        float y_c=16 * Y + getDiscreteScaledFluidHeight();
        float y_t=tank.getFluidY();
        float y1=(float)5 + 16 * Y;
        float y2=(float)12 + 16 * Y;
        int V_tot=tank.getFluidLevel() + this.lvl;
        if (y_c != y_t) {
          if (tank.getFluidY(V_tot) <= y1) {
            updatedLevel=0;
            tank.setFluidLevel(V_tot);
          }
 else           if (tank.getFluidY(V_tot - 500) >= y2) {
            updatedLevel=500;
            tank.setFluidLevel(V_tot - 500);
          }
 else {
            int tankYSize=tank.getYSize();
            int C=tank.getTotalCapacity();
            float enumerator=((float)V_tot) + ((500 * y1) / (y2 - y1) + ((float)2 * C) / ((float)(16 * tankYSize - 2)));
            float denominator=(((float)500) / (y2 - y1) + ((float)C) / ((float)(16 * tankYSize - 2)));
            float y=enumerator / denominator;
            int channelVolume=(int)Math.floor(500 * (y - y1) / (y2 - y1));
            int tankVolume=(int)Math.ceil(C * (y - 2) / (16 * tankYSize - 2));
            updatedLevel=channelVolume;
            tank.setFluidLevel(tankVolume);
          }
        }
      }
    }
    totalLvl=totalLvl + updatedLevel;
    int rest=totalLvl % nr;
    int newLvl=totalLvl / nr;
    if (nr > 1) {
      for (      TileEntityCustomWood te : neighbours) {
        if (te instanceof TileEntityChannel) {
          if (!(te instanceof TileEntityValve && ((TileEntityValve)te).isPowered())) {
            int lvl=rest == 0 ? newLvl : newLvl + 1;
            rest=rest == 0 ? 0 : rest - 1;
            ((TileEntityChannel)te).setFluidLevel(lvl);
          }
        }
      }
    }
    this.setFluidLevel(newLvl + rest);
  }
}"
95748,"public void setFluidLevel(int lvl){
  if (lvl >= 0 && lvl <= Constants.mB / 2 && lvl != this.lvl) {
    this.lvl=lvl;
  }
}","public void setFluidLevel(int lvl){
  if (lvl >= 0 && lvl <= Constants.mB / 2 && lvl != this.lvl) {
    this.lvl=lvl;
    syncToClient(false);
  }
}"
95749,"public int getId(){
  return 1000 * invId + slotId;
}","public int getId(){
  return invId >= 0 ? (1000 * invId) + slotId : slotId;
}"
95750,"@Override public void setLockedSeed(ItemSeeds seed,int meta){
  if (!this.hasLockedSeed()) {
    this.lockedSeed=seed;
    this.lockedSeedMeta=meta;
    this.markDirty();
  }
}","@Override public void setLockedSeed(ItemSeeds seed,int meta){
  if (!this.hasLockedSeed()) {
    this.lockedSeed=seed;
    this.lockedSeedMeta=meta;
    this.markForUpdate();
  }
}"
95751,"@Override public ItemStack decrStackSize(int slot,int amount){
  slot=slot % 1000;
  ItemStack stackInSlot=null;
  if (this.slots != null) {
    SeedStorageSlot slotAt=this.slots.get(slot);
    if (slotAt != null) {
      stackInSlot=slotAt.getStack(this.lockedSeed,this.lockedSeedMeta);
      if (slotAt.count <= amount) {
        this.slots.remove(slot);
      }
 else {
        slotAt.count=slotAt.count - amount;
      }
    }
  }
  this.markDirty();
  return stackInSlot;
}","@Override public ItemStack decrStackSize(int slot,int amount){
  slot=slot % 1000;
  ItemStack stackInSlot=null;
  if (this.slots != null) {
    SeedStorageSlot slotAt=this.slots.get(slot);
    if (slotAt != null) {
      stackInSlot=slotAt.getStack(this.lockedSeed,this.lockedSeedMeta);
      if (slotAt.count <= amount) {
        this.slots.remove(slot);
      }
 else {
        slotAt.count=slotAt.count - amount;
      }
    }
  }
  this.markForUpdate();
  return stackInSlot;
}"
95752,"@Override public boolean addStackToInventory(ItemStack stack){
  boolean success=false;
  if (this.hasLockedSeed() && SeedHelper.isAnalyzedSeed(stack) && this.lockedSeed == stack.getItem() && this.lockedSeedMeta == stack.getItemDamage()) {
    int lastId=0;
    for (    Map.Entry<Integer,SeedStorageSlot> entry : this.slots.entrySet()) {
      if (entry != null && entry.getValue() != null) {
        lastId=entry.getKey() > lastId ? entry.getKey() : lastId;
        if (ItemStack.areItemStackTagsEqual(entry.getValue().getStack(this.lockedSeed,this.lockedSeedMeta),stack)) {
          this.setInventorySlotContents(entry.getKey(),stack);
          success=true;
          break;
        }
      }
    }
    if (!success) {
      this.slots.put(lastId + 1,new SeedStorageSlot(stack.getTagCompound(),stack.stackSize,lastId + 1,this.getControllableID()));
      success=true;
    }
  }
  if (success) {
    this.markDirty();
  }
  return success;
}","@Override public boolean addStackToInventory(ItemStack stack){
  boolean success=false;
  if (this.hasLockedSeed() && SeedHelper.isAnalyzedSeed(stack) && this.lockedSeed == stack.getItem() && this.lockedSeedMeta == stack.getItemDamage()) {
    int lastId=0;
    for (    Map.Entry<Integer,SeedStorageSlot> entry : this.slots.entrySet()) {
      lastId=entry.getKey() > lastId ? entry.getKey() : lastId;
      if (entry.getValue() != null) {
        if (ItemStack.areItemStackTagsEqual(entry.getValue().getStack(this.lockedSeed,this.lockedSeedMeta),stack)) {
          this.setInventorySlotContents(entry.getKey(),stack);
          success=true;
          break;
        }
      }
    }
    if (!success) {
      this.slots.put(lastId + 1,new SeedStorageSlot(stack.getTagCompound(),stack.stackSize,lastId + 1,this.getControllableID()));
      success=true;
    }
  }
  if (success) {
    this.markForUpdate();
  }
  return success;
}"
95753,"@Override public void setInventorySlotContents(int slot,ItemStack inputStack){
  slot=slot % 1000;
  if (this.isItemValidForSlot(slot,inputStack)) {
    SeedStorageSlot slotAt=this.slots.get(slot);
    if (slotAt != null) {
      slotAt.count=slotAt.count + inputStack.stackSize;
    }
 else {
      this.slots.put(slot,new SeedStorageSlot(inputStack.getTagCompound(),inputStack.stackSize,slot,this.getControllableID()));
    }
    this.markDirty();
  }
}","@Override public void setInventorySlotContents(int slot,ItemStack inputStack){
  slot=slot % 1000;
  if (this.isItemValidForSlot(slot,inputStack)) {
    SeedStorageSlot slotAt=this.slots.get(slot);
    if (slotAt != null) {
      slotAt.count=slotAt.count + inputStack.stackSize;
    }
 else {
      this.slots.put(slot,new SeedStorageSlot(inputStack.getTagCompound(),inputStack.stackSize,slot,this.getControllableID()));
    }
    this.markForUpdate();
  }
}"
95754,"@Override public void addDebugInfo(List<String> list){
  String info=this.lockedSeed == null ? ""String_Node_Str"" : this.getLockedSeed().getDisplayName();
  list.add(""String_Node_Str"" + info);
  list.add(""String_Node_Str"" + this.slots.size());
}","@Override public void addDebugInfo(List<String> list){
  String info=this.lockedSeed == null ? ""String_Node_Str"" : this.getLockedSeed().getDisplayName();
  int size=this.slots == null ? 0 : this.slots.size();
  list.add(""String_Node_Str"" + info);
  list.add(""String_Node_Str"" + size);
}"
95755,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float fX,float fY,float fZ){
  boolean update=false;
  if (!world.isRemote) {
    TileEntityTank tank=(TileEntityTank)world.getTileEntity(x,y,z);
    ItemStack stack=player.getCurrentEquippedItem();
    if (stack != null && stack.getItem() != null) {
      FluidStack liquid=FluidContainerRegistry.getFluidForFilledItem(stack);
      if (liquid != null && liquid.getFluid() == FluidRegistry.WATER) {
        int quantity=tank.fill(ForgeDirection.UNKNOWN,liquid,false);
        if (quantity == liquid.amount) {
          tank.fill(ForgeDirection.UNKNOWN,liquid,true);
          update=true;
          if (!player.capabilities.isCreativeMode) {
            if (stack.stackSize == 1) {
              if (stack.getItem().hasContainerItem(stack)) {
                player.inventory.setInventorySlotContents(player.inventory.currentItem,stack.getItem().getContainerItem(stack));
              }
 else {
                player.inventory.setInventorySlotContents(player.inventory.currentItem,null);
              }
            }
 else {
              stack.splitStack(1);
              player.inventory.setInventorySlotContents(player.inventory.currentItem,stack);
            }
          }
        }
      }
 else {
        FluidStack tankContents=tank.getTankInfo(ForgeDirection.UNKNOWN)[0].fluid;
        if (tankContents != null) {
          ItemStack filledContainer=FluidContainerRegistry.fillFluidContainer(tankContents,stack);
          FluidStack filledLiquid=FluidContainerRegistry.getFluidForFilledItem(filledContainer);
          if (filledLiquid != null) {
            if (!player.capabilities.isCreativeMode) {
              if (stack.stackSize == 1) {
                if (stack.getItem().hasContainerItem(stack)) {
                  player.inventory.setInventorySlotContents(player.inventory.currentItem,stack.getItem().getContainerItem(stack));
                }
 else {
                  player.inventory.setInventorySlotContents(player.inventory.currentItem,null);
                }
                player.inventory.setInventorySlotContents(player.inventory.currentItem,filledContainer);
              }
 else {
                if (!player.inventory.addItemStackToInventory(filledContainer)) {
                  return false;
                }
 else {
                  stack.splitStack(1);
                  player.inventory.setInventorySlotContents(player.inventory.currentItem,stack);
                  player.inventory.addItemStackToInventory(filledContainer);
                  player.inventory.markDirty();
                }
              }
            }
            tank.drain(ForgeDirection.UNKNOWN,filledLiquid.amount,true);
            update=true;
          }
        }
      }
    }
    if (update) {
      tank.markDirty();
      world.markBlockForUpdate(x,y,z);
      return true;
    }
 else {
      return false;
    }
  }
  return true;
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float fX,float fY,float fZ){
  boolean update=false;
  if (!world.isRemote) {
    TileEntityTank tank=(TileEntityTank)world.getTileEntity(x,y,z);
    ItemStack stack=player.getCurrentEquippedItem();
    if (stack != null && stack.getItem() != null) {
      FluidStack liquid=FluidContainerRegistry.getFluidForFilledItem(stack);
      if (liquid != null && liquid.getFluid() == FluidRegistry.WATER) {
        int quantity=tank.fill(ForgeDirection.UNKNOWN,liquid,false);
        if (quantity == liquid.amount) {
          tank.fill(ForgeDirection.UNKNOWN,liquid,true);
          update=true;
          if (!player.capabilities.isCreativeMode) {
            if (stack.stackSize == 1) {
              if (stack.getItem().hasContainerItem(stack)) {
                player.inventory.setInventorySlotContents(player.inventory.currentItem,stack.getItem().getContainerItem(stack));
              }
 else {
                player.inventory.setInventorySlotContents(player.inventory.currentItem,null);
              }
            }
 else {
              stack.splitStack(1);
              player.inventory.setInventorySlotContents(player.inventory.currentItem,stack);
            }
          }
        }
      }
 else {
        FluidStack tankContents=tank.getTankInfo(ForgeDirection.UNKNOWN)[0].fluid;
        if (tankContents != null) {
          ItemStack filledContainer=FluidContainerRegistry.fillFluidContainer(tankContents,stack);
          FluidStack filledLiquid=FluidContainerRegistry.getFluidForFilledItem(filledContainer);
          if (filledLiquid != null) {
            if (!player.capabilities.isCreativeMode) {
              if (stack.stackSize == 1) {
                if (stack.getItem().hasContainerItem(stack)) {
                  player.inventory.setInventorySlotContents(player.inventory.currentItem,stack.getItem().getContainerItem(stack));
                }
 else {
                  player.inventory.setInventorySlotContents(player.inventory.currentItem,null);
                }
                player.inventory.setInventorySlotContents(player.inventory.currentItem,filledContainer);
              }
 else {
                if (!player.inventory.addItemStackToInventory(filledContainer)) {
                  return false;
                }
 else {
                  stack.splitStack(1);
                  player.inventory.setInventorySlotContents(player.inventory.currentItem,stack);
                  player.inventory.addItemStackToInventory(filledContainer);
                  player.inventory.markDirty();
                }
              }
            }
            tank.drain(ForgeDirection.UNKNOWN,filledLiquid.amount,true);
            update=true;
          }
        }
      }
    }
    if (update) {
      tank.markDirtyAndMarkForUpdate();
      world.markBlockForUpdate(x,y,z);
      return true;
    }
 else {
      return false;
    }
  }
  return true;
}"
95756,"protected void connectWater(TileEntityChannel channel,Tessellator tessellator,char axis,int direction,float y,IIcon icon){
  if (axis == 'x' || axis == 'z') {
    if (channel.hasNeighbour(axis,direction)) {
      boolean x=axis == 'x';
      TileEntityCustomWood te=(TileEntityCustomWood)channel.getWorldObj().getTileEntity(channel.xCoord + (x ? direction : 0),channel.yCoord,channel.zCoord + (x ? 0 : direction));
      float y2;
      if (te instanceof TileEntityChannel) {
        if (te instanceof TileEntityValve && ((TileEntityValve)te).isPowered()) {
          y2=y;
        }
 else {
          y2=(y + ((TileEntityChannel)te).getDiscreteScaledFluidHeight()) / 2;
        }
      }
 else {
        float lvl=((TileEntityTank)te).getFluidY() - 16 * ((TileEntityTank)te).getYPosition();
        y2=lvl > 12 ? 12 : lvl < 5 ? (5 - 0.0001F) : lvl;
      }
      this.drawWaterEdge(tessellator,x,direction,y,y2,icon);
    }
  }
}","protected void connectWater(TileEntityChannel channel,Tessellator tessellator,char axis,int direction,float y,IIcon icon){
  if (axis == 'x' || axis == 'z') {
    if (channel.hasNeighbour(axis,direction)) {
      boolean x=axis == 'x';
      TileEntityCustomWood te=(TileEntityCustomWood)channel.getWorldObj().getTileEntity(channel.xCoord + (x ? direction : 0),channel.yCoord,channel.zCoord + (x ? 0 : direction));
      float y2;
      if (te instanceof TileEntityChannel) {
        if (te instanceof TileEntityValve && ((TileEntityValve)te).isPowered()) {
          y2=y;
        }
 else {
          y2=(y + ((TileEntityChannel)te).getDiscreteScaledFluidHeight()) / 2;
        }
      }
 else {
        float lvl=((TileEntityTank)te).getScaledDiscreteFluidY() - 16 * ((TileEntityTank)te).getYPosition();
        y2=lvl > 12 ? 12 : lvl < 5 ? (5 - 0.0001F) : lvl;
      }
      this.drawWaterEdge(tessellator,x,direction,y,y2,icon);
    }
  }
}"
95757,"@Override public boolean renderWorldBlock(IBlockAccess world,int x,int y,int z,Block block,int modelId,RenderBlocks renderer){
  TileEntity tileEntity=world.getTileEntity(x,y,z);
  Tessellator tessellator=Tessellator.instance;
  tessellator.addTranslation(x,y,z);
  tessellator.setColorRGBA_F(1,1,1,1);
  if (tileEntity instanceof TileEntityTank) {
    TileEntityTank tank=(TileEntityTank)tileEntity;
    if (tank.getBlockMetadata() == 0) {
      this.drawWoodTank(tank,tessellator);
      if (tank.getFluidLevel() > 0) {
        this.drawWater(tank,tessellator);
      }
    }
 else     if (tank.getBlockMetadata() == 1) {
      this.drawIronTank(tank,tessellator);
    }
  }
  renderer.clearOverrideBlockTexture();
  tessellator.addTranslation(-x,-y,-z);
  return true;
}","@Override public boolean renderWorldBlock(IBlockAccess world,int x,int y,int z,Block block,int modelId,RenderBlocks renderer){
  TileEntity tileEntity=world.getTileEntity(x,y,z);
  Tessellator tessellator=Tessellator.instance;
  tessellator.addTranslation(x,y,z);
  tessellator.setColorRGBA_F(1,1,1,1);
  if (tileEntity instanceof TileEntityTank) {
    TileEntityTank tank=(TileEntityTank)tileEntity;
    if (tank.getBlockMetadata() == 0) {
      this.drawWoodTank(tank,tessellator);
      if (tank.getScaledDiscreteFluidLevel() > 0) {
        this.drawWater(tank,tessellator);
      }
    }
 else     if (tank.getBlockMetadata() == 1) {
      this.drawIronTank(tank,tessellator);
    }
  }
  renderer.clearOverrideBlockTexture();
  tessellator.addTranslation(-x,-y,-z);
  return true;
}"
95758,"private void drawWater(TileEntityTank tank,Tessellator tessellator){
  if (tank.getYPosition() == 0) {
    float y=tank.getFluidY() - 0.01F;
    IIcon icon=Blocks.water.getIcon(1,0);
    int l=Blocks.water.colorMultiplier(tank.getWorldObj(),tank.xCoord,tank.yCoord,tank.zCoord);
    float f=(float)(l >> 16 & 255) / 255.0F;
    float f1=(float)(l >> 8 & 255) / 255.0F;
    float f2=(float)(l & 255) / 255.0F;
    float f4=1.0F;
    tessellator.setBrightness(Blocks.water.getMixedBrightnessForBlock(tank.getWorldObj(),tank.xCoord,tank.yCoord,tank.zCoord));
    tessellator.setColorRGBA_F(f4 * f,f4 * f1,f4 * f2,0.8F);
    RenderHelper.addScaledVertexWithUV(tessellator,0,y,0,0,0,icon);
    RenderHelper.addScaledVertexWithUV(tessellator,0,y,16,0,16,icon);
    RenderHelper.addScaledVertexWithUV(tessellator,16,y,16,16,16,icon);
    RenderHelper.addScaledVertexWithUV(tessellator,16,y,0,16,0,icon);
  }
}","private void drawWater(TileEntityTank tank,Tessellator tessellator){
  if (tank.getYPosition() == 0) {
    float y=tank.getScaledDiscreteFluidY() - 0.01F;
    IIcon icon=Blocks.water.getIcon(1,0);
    int l=Blocks.water.colorMultiplier(tank.getWorldObj(),tank.xCoord,tank.yCoord,tank.zCoord);
    float f=(float)(l >> 16 & 255) / 255.0F;
    float f1=(float)(l >> 8 & 255) / 255.0F;
    float f2=(float)(l & 255) / 255.0F;
    float f4=1.0F;
    tessellator.setBrightness(Blocks.water.getMixedBrightnessForBlock(tank.getWorldObj(),tank.xCoord,tank.yCoord,tank.zCoord));
    tessellator.setColorRGBA_F(f4 * f,f4 * f1,f4 * f2,0.8F);
    RenderHelper.addScaledVertexWithUV(tessellator,0,y,0,0,0,icon);
    RenderHelper.addScaledVertexWithUV(tessellator,0,y,16,0,16,icon);
    RenderHelper.addScaledVertexWithUV(tessellator,16,y,16,16,16,icon);
    RenderHelper.addScaledVertexWithUV(tessellator,16,y,0,16,0,icon);
  }
}"
95759,"@Override public void updateEntity(){
  if (!this.worldObj.isRemote) {
    timer++;
    if (timer % 5 == 0) {
      timer=0;
      int discreteLevel=getDiscreteFluidLevel();
      if (lastDiscreteLevel != discreteLevel) {
        lastDiscreteLevel=discreteLevel;
        this.markDirty();
      }
      lastLvl=lvl;
    }
    ArrayList<TileEntityCustomWood> neighbours=new ArrayList<TileEntityCustomWood>();
    if (this.hasNeighbour('x',1)) {
      neighbours.add((TileEntityCustomWood)this.worldObj.getTileEntity(this.xCoord + 1,this.yCoord,this.zCoord));
    }
    if (this.hasNeighbour('x',-1)) {
      neighbours.add((TileEntityCustomWood)this.worldObj.getTileEntity(this.xCoord - 1,this.yCoord,this.zCoord));
    }
    if (this.hasNeighbour('z',1)) {
      neighbours.add((TileEntityCustomWood)this.worldObj.getTileEntity(this.xCoord,this.yCoord,this.zCoord + 1));
    }
    if (this.hasNeighbour('z',-1)) {
      neighbours.add((TileEntityCustomWood)this.worldObj.getTileEntity(this.xCoord,this.yCoord,this.zCoord - 1));
    }
    int totalLvl=0;
    int nr=1;
    int updatedLevel=this.getFluidLevel();
    for (    TileEntityCustomWood te : neighbours) {
      if (te instanceof TileEntityChannel) {
        if (!(te instanceof TileEntityValve && ((TileEntityValve)te).isPowered())) {
          totalLvl=totalLvl + ((TileEntityChannel)te).lvl;
          nr++;
        }
      }
 else {
        TileEntityTank tank=(TileEntityTank)te;
        int Y=tank.getYPosition();
        float y_c=16 * Y + getDiscreteScaledFluidHeight();
        float y_t=tank.getFluidY();
        float y1=(float)5 + 16 * Y;
        float y2=(float)12 + 16 * Y;
        int V_tot=tank.getFluidLevel() + this.lvl;
        if (y_c != y_t) {
          if (tank.getFluidY(V_tot) <= y1) {
            updatedLevel=0;
            tank.setFluidLevel(V_tot);
          }
 else           if (tank.getFluidY(V_tot - 500) >= y2) {
            updatedLevel=500;
            tank.setFluidLevel(V_tot - 500);
          }
 else {
            int tankYSize=tank.getYSize();
            int C=tank.getTotalCapacity();
            float enumerator=((float)V_tot) + ((500 * y1) / (y2 - y1) + ((float)2 * C) / ((float)(16 * tankYSize - 2)));
            float denominator=(((float)500) / (y2 - y1) + ((float)C) / ((float)(16 * tankYSize - 2)));
            float y=enumerator / denominator;
            int channelVolume=(int)Math.floor(500 * (y - y1) / (y2 - y1));
            int tankVolume=(int)Math.ceil(C * (y - 2) / (16 * tankYSize - 2));
            updatedLevel=channelVolume;
            tank.setFluidLevel(tankVolume);
          }
        }
      }
    }
    totalLvl=totalLvl + updatedLevel;
    int rest=totalLvl % nr;
    int newLvl=totalLvl / nr;
    if (nr > 1) {
      for (      TileEntityCustomWood te : neighbours) {
        if (te instanceof TileEntityChannel) {
          if (!(te instanceof TileEntityValve && ((TileEntityValve)te).isPowered())) {
            int lvl=rest == 0 ? newLvl : newLvl + 1;
            rest=rest == 0 ? 0 : rest - 1;
            ((TileEntityChannel)te).setFluidLevel(lvl);
          }
        }
      }
    }
    this.setFluidLevel(newLvl + rest);
  }
}","@Override public void updateEntity(){
  if (!this.worldObj.isRemote) {
    timer++;
    if (timer % 5 == 0) {
      timer=0;
      int discreteLevel=getDiscreteFluidLevel();
      if (lastDiscreteLevel != discreteLevel) {
        lastDiscreteLevel=discreteLevel;
        markDirtyAndMarkForUpdate();
      }
      lastLvl=lvl;
    }
    ArrayList<TileEntityCustomWood> neighbours=new ArrayList<TileEntityCustomWood>();
    if (this.hasNeighbour('x',1)) {
      neighbours.add((TileEntityCustomWood)this.worldObj.getTileEntity(this.xCoord + 1,this.yCoord,this.zCoord));
    }
    if (this.hasNeighbour('x',-1)) {
      neighbours.add((TileEntityCustomWood)this.worldObj.getTileEntity(this.xCoord - 1,this.yCoord,this.zCoord));
    }
    if (this.hasNeighbour('z',1)) {
      neighbours.add((TileEntityCustomWood)this.worldObj.getTileEntity(this.xCoord,this.yCoord,this.zCoord + 1));
    }
    if (this.hasNeighbour('z',-1)) {
      neighbours.add((TileEntityCustomWood)this.worldObj.getTileEntity(this.xCoord,this.yCoord,this.zCoord - 1));
    }
    int totalLvl=0;
    int nr=1;
    int updatedLevel=this.getFluidLevel();
    for (    TileEntityCustomWood te : neighbours) {
      if (te instanceof TileEntityChannel) {
        if (!(te instanceof TileEntityValve && ((TileEntityValve)te).isPowered())) {
          totalLvl=totalLvl + ((TileEntityChannel)te).lvl;
          nr++;
        }
      }
 else {
        TileEntityTank tank=(TileEntityTank)te;
        int Y=tank.getYPosition();
        float y_c=16 * Y + getDiscreteScaledFluidHeight();
        float y_t=tank.getFluidY();
        float y1=(float)5 + 16 * Y;
        float y2=(float)12 + 16 * Y;
        int V_tot=tank.getFluidLevel() + this.lvl;
        if (y_c != y_t) {
          if (tank.getFluidY(V_tot) <= y1) {
            updatedLevel=0;
            tank.setFluidLevel(V_tot);
          }
 else           if (tank.getFluidY(V_tot - 500) >= y2) {
            updatedLevel=500;
            tank.setFluidLevel(V_tot - 500);
          }
 else {
            int tankYSize=tank.getYSize();
            int C=tank.getTotalCapacity();
            float enumerator=((float)V_tot) + ((500 * y1) / (y2 - y1) + ((float)2 * C) / ((float)(16 * tankYSize - 2)));
            float denominator=(((float)500) / (y2 - y1) + ((float)C) / ((float)(16 * tankYSize - 2)));
            float y=enumerator / denominator;
            int channelVolume=(int)Math.floor(500 * (y - y1) / (y2 - y1));
            int tankVolume=(int)Math.ceil(C * (y - 2) / (16 * tankYSize - 2));
            updatedLevel=channelVolume;
            tank.setFluidLevel(tankVolume);
          }
        }
      }
    }
    totalLvl=totalLvl + updatedLevel;
    int rest=totalLvl % nr;
    int newLvl=totalLvl / nr;
    if (nr > 1) {
      for (      TileEntityCustomWood te : neighbours) {
        if (te instanceof TileEntityChannel) {
          if (!(te instanceof TileEntityValve && ((TileEntityValve)te).isPowered())) {
            int lvl=rest == 0 ? newLvl : newLvl + 1;
            rest=rest == 0 ? 0 : rest - 1;
            ((TileEntityChannel)te).setFluidLevel(lvl);
          }
        }
      }
    }
    this.setFluidLevel(newLvl + rest);
  }
}"
95760,"public void setPlant(int growth,int gain,int strength,boolean analyzed,IPlantable seed,int seedMeta){
  if ((!this.crossCrop) && (!this.hasPlant())) {
    this.growth=growth;
    this.gain=gain;
    this.strength=strength;
    this.seed=seed;
    this.analyzed=analyzed;
    this.seedMeta=seedMeta;
    this.worldObj.setBlockMetadataWithNotify(this.xCoord,this.yCoord,this.zCoord,0,3);
    this.markDirty();
  }
}","public void setPlant(int growth,int gain,int strength,boolean analyzed,IPlantable seed,int seedMeta){
  if ((!this.crossCrop) && (!this.hasPlant())) {
    this.growth=growth;
    this.gain=gain;
    this.strength=strength;
    this.seed=seed;
    this.analyzed=analyzed;
    this.seedMeta=seedMeta;
    this.worldObj.setBlockMetadataWithNotify(this.xCoord,this.yCoord,this.zCoord,0,3);
    this.markDirtyAndMarkForUpdate();
  }
}"
95761,"public void clearPlant(){
  if (!this.crossCrop) {
    this.growth=0;
    this.gain=0;
    this.strength=0;
    this.seed=null;
    this.seedMeta=0;
    this.analyzed=false;
    this.weed=false;
    this.worldObj.setBlockMetadataWithNotify(this.xCoord,this.yCoord,this.zCoord,0,3);
    this.markDirty();
  }
}","public void clearPlant(){
  if (!this.crossCrop) {
    this.growth=0;
    this.gain=0;
    this.strength=0;
    this.seed=null;
    this.seedMeta=0;
    this.analyzed=false;
    this.weed=false;
    this.worldObj.setBlockMetadataWithNotify(this.xCoord,this.yCoord,this.zCoord,0,3);
    this.markDirtyAndMarkForUpdate();
  }
}"
95762,"public void spawnWeed(){
  this.crossCrop=false;
  this.clearPlant();
  this.weed=true;
  this.markDirty();
}","public void spawnWeed(){
  this.crossCrop=false;
  this.clearPlant();
  this.weed=true;
  this.markDirtyAndMarkForUpdate();
}"
95763,"public void clearWeed(){
  this.weed=false;
  this.worldObj.setBlockMetadataWithNotify(this.xCoord,this.yCoord,this.zCoord,0,2);
  this.markDirty();
}","public void clearWeed(){
  this.weed=false;
  this.worldObj.setBlockMetadataWithNotify(this.xCoord,this.yCoord,this.zCoord,0,2);
  this.markDirtyAndMarkForUpdate();
}"
95764,"public void crossOver(){
  boolean change=false;
  ItemSeeds result=null;
  int resultMeta=0;
  int mutationId=0;
  Block req=null;
  int reqMeta=0;
  double chance=0;
  TileEntityCrop[] neighbours=this.findNeighbours();
  if (Math.random() > ConfigurationHandler.mutationChance) {
    int index=(int)Math.floor(Math.random() * neighbours.length);
    if (neighbours[index] != null && neighbours[index].seed != null && neighbours[index].isMature()) {
      result=(ItemSeeds)neighbours[index].seed;
      resultMeta=neighbours[index].seedMeta;
      chance=SeedHelper.getSpreadChance(result,resultMeta);
    }
  }
 else {
    Mutation[] crossOvers=MutationHandler.getCrossOvers(neighbours);
    if (crossOvers != null && crossOvers.length > 0) {
      int index=(int)Math.floor(Math.random() * crossOvers.length);
      if (crossOvers[index].result.getItem() != null) {
        result=(ItemSeeds)crossOvers[index].result.getItem();
        resultMeta=crossOvers[index].result.getItemDamage();
        mutationId=crossOvers[index].id;
        req=crossOvers[index].requirement;
        reqMeta=crossOvers[index].requirementMeta;
        chance=crossOvers[index].chance;
      }
    }
  }
  if (result != null && SeedHelper.isValidSeed(result,resultMeta) && this.canMutate(result,resultMeta,mutationId,req,reqMeta)) {
    if (Math.random() < chance) {
      this.crossCrop=false;
      int[] stats=MutationHandler.getStats(neighbours);
      this.setPlant(stats[0],stats[1],stats[2],false,result,resultMeta);
      change=true;
    }
  }
  if (change) {
    this.markDirty();
  }
}","public void crossOver(){
  boolean change=false;
  ItemSeeds result=null;
  int resultMeta=0;
  int mutationId=0;
  Block req=null;
  int reqMeta=0;
  double chance=0;
  TileEntityCrop[] neighbours=this.findNeighbours();
  if (Math.random() > ConfigurationHandler.mutationChance) {
    int index=(int)Math.floor(Math.random() * neighbours.length);
    if (neighbours[index] != null && neighbours[index].seed != null && neighbours[index].isMature()) {
      result=(ItemSeeds)neighbours[index].seed;
      resultMeta=neighbours[index].seedMeta;
      chance=SeedHelper.getSpreadChance(result,resultMeta);
    }
  }
 else {
    Mutation[] crossOvers=MutationHandler.getCrossOvers(neighbours);
    if (crossOvers != null && crossOvers.length > 0) {
      int index=(int)Math.floor(Math.random() * crossOvers.length);
      if (crossOvers[index].result.getItem() != null) {
        result=(ItemSeeds)crossOvers[index].result.getItem();
        resultMeta=crossOvers[index].result.getItemDamage();
        mutationId=crossOvers[index].id;
        req=crossOvers[index].requirement;
        reqMeta=crossOvers[index].requirementMeta;
        chance=crossOvers[index].chance;
      }
    }
  }
  if (result != null && SeedHelper.isValidSeed(result,resultMeta) && this.canMutate(result,resultMeta,mutationId,req,reqMeta)) {
    if (Math.random() < chance) {
      this.crossCrop=false;
      int[] stats=MutationHandler.getStats(neighbours);
      this.setPlant(stats[0],stats[1],stats[2],false,result,resultMeta);
      change=true;
    }
  }
  if (change) {
    markDirtyAndMarkForUpdate();
  }
}"
95765,"@Override public void updateEntity(){
  boolean change=false;
  if (!this.worldObj.isRemote && this.isAnalyzing()) {
    this.progress=progress < this.maxProgress() ? progress + 1 : this.maxProgress();
    if (progress == this.maxProgress()) {
      this.analyze();
    }
    change=true;
  }
  if (change) {
    this.markDirty();
    this.worldObj.addBlockEvent(this.xCoord,this.yCoord,this.zCoord,this.worldObj.getBlock(this.xCoord,this.yCoord,this.zCoord),0,0);
    this.worldObj.notifyBlockChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType());
  }
}","@Override public void updateEntity(){
  boolean change=false;
  if (!this.worldObj.isRemote && this.isAnalyzing()) {
    this.progress=progress < this.maxProgress() ? progress + 1 : this.maxProgress();
    if (progress == this.maxProgress()) {
      this.analyze();
    }
    change=true;
  }
  if (change) {
    this.markDirtyAndMarkForUpdate();
    this.worldObj.addBlockEvent(this.xCoord,this.yCoord,this.zCoord,this.worldObj.getBlock(this.xCoord,this.yCoord,this.zCoord),0,0);
    this.worldObj.notifyBlockChange(this.xCoord,this.yCoord,this.zCoord,this.getBlockType());
  }
}"
95766,"private boolean sprinkle(){
  boolean newState=this.canSprinkle();
  if (newState != this.isSprinkled) {
    this.isSprinkled=newState;
    this.markDirty();
  }
  return this.isSprinkled;
}","private boolean sprinkle(){
  boolean newState=this.canSprinkle();
  if (newState != this.isSprinkled) {
    this.isSprinkled=newState;
    this.markDirtyAndMarkForUpdate();
  }
  return this.isSprinkled;
}"
95767,"public void syncFluidLevels(){
  int lvl=this.fluidLevel;
  int xPos=this.getXPosition();
  int yPos=this.getYPosition();
  int zPos=this.getZPosition();
  int xSize=this.getXSize();
  int ySize=this.getYSize();
  int zSize=this.getZSize();
  boolean change=timer > 20;
  if (change)   timer=0;
  for (int x=this.xCoord - xPos; x < this.xCoord - xPos + xSize; x++) {
    for (int y=this.yCoord - yPos; y < this.yCoord - yPos + ySize; y++) {
      for (int z=this.zCoord - zPos; z < this.zCoord - zPos + zSize; z++) {
        if (this.worldObj.getTileEntity(x,y,z) != null && this.worldObj.getTileEntity(x,y,z) instanceof TileEntityTank) {
          TileEntityTank tank=(TileEntityTank)this.worldObj.getTileEntity(x,y,z);
          tank.fluidLevel=lvl;
        }
      }
    }
  }
}","public void syncFluidLevels(boolean forceUpdate){
  int lvl=this.fluidLevel;
  int xPos=this.getXPosition();
  int yPos=this.getYPosition();
  int zPos=this.getZPosition();
  int xSize=this.getXSize();
  int ySize=this.getYSize();
  int zSize=this.getZSize();
  boolean change=timer > 20 || forceUpdate;
  if (change)   timer=0;
  for (int x=this.xCoord - xPos; x < this.xCoord - xPos + xSize; x++) {
    for (int y=this.yCoord - yPos; y < this.yCoord - yPos + ySize; y++) {
      for (int z=this.zCoord - zPos; z < this.zCoord - zPos + zSize; z++) {
        if (this.worldObj.getTileEntity(x,y,z) != null && this.worldObj.getTileEntity(x,y,z) instanceof TileEntityTank) {
          TileEntityTank tank=(TileEntityTank)this.worldObj.getTileEntity(x,y,z);
          tank.fluidLevel=lvl;
          if (change && tank.getYPosition() == 0) {
            tank.markDirtyAndMarkForUpdate();
          }
        }
      }
    }
  }
}"
95768,"@Override public int fill(ForgeDirection from,FluidStack resource,boolean doFill){
  if (resource == null || !this.canFill(from,resource.getFluid())) {
    return 0;
  }
  int filled=Math.min(resource.amount,this.getTotalCapacity() - this.getFluidLevel());
  if (doFill) {
    this.setFluidLevel(this.getFluidLevel() + filled);
  }
  return filled;
}","@Override public int fill(ForgeDirection from,FluidStack resource,boolean doFill){
  if (resource == null || !this.canFill(from,resource.getFluid())) {
    return 0;
  }
  int filled=Math.min(resource.amount,this.getTotalCapacity() - this.getFluidLevel());
  if (doFill) {
    this.setFluidLevel(this.getFluidLevel() + filled);
    syncFluidLevels(true);
  }
  return filled;
}"
95769,"@Override public void updateEntity(){
  if (!this.worldObj.isRemote) {
    boolean change=this.updateMultiBlock();
    if (this.worldObj.canBlockSeeTheSky(this.xCoord,this.yCoord,this.zCoord) && this.worldObj.isRaining()) {
      if (this.getYPosition() + 1 == this.getYSize()) {
        BiomeGenBase biome=this.worldObj.getBiomeGenForCoords(this.xCoord,this.zCoord);
        if (biome != BiomeGenBase.desert && biome != BiomeGenBase.desertHills) {
          this.setFluidLevel(this.fluidLevel + 1);
          change=true;
        }
      }
    }
    if (ConfigurationHandler.fillFromFlowingWater && (this.worldObj.getBlock(this.xCoord,this.yCoord + 1,this.zCoord) == Blocks.water || this.worldObj.getBlock(this.xCoord,this.yCoord + 1,this.zCoord) == Blocks.flowing_water)) {
      this.setFluidLevel(this.fluidLevel + 5);
      change=true;
    }
    if (change && timer > 10) {
      timer=0;
      float smallestPart=32.0f / getTotalCapacity();
      int discreteFluidLevel=Math.round(smallestPart * fluidLevel);
      if (lastDiscreteFluidLevel != discreteFluidLevel) {
        lastDiscreteFluidLevel=discreteFluidLevel;
        this.markDirty();
      }
    }
    timer++;
  }
}","@Override public void updateEntity(){
  if (!this.worldObj.isRemote) {
    boolean change=this.updateMultiBlock();
    if (this.worldObj.canBlockSeeTheSky(this.xCoord,this.yCoord,this.zCoord) && this.worldObj.isRaining()) {
      if (this.getYPosition() + 1 == this.getYSize()) {
        BiomeGenBase biome=this.worldObj.getBiomeGenForCoords(this.xCoord,this.zCoord);
        if (biome != BiomeGenBase.desert && biome != BiomeGenBase.desertHills) {
          this.setFluidLevel(this.fluidLevel + 1);
          change=true;
        }
      }
    }
    if (ConfigurationHandler.fillFromFlowingWater && (this.worldObj.getBlock(this.xCoord,this.yCoord + 1,this.zCoord) == Blocks.water || this.worldObj.getBlock(this.xCoord,this.yCoord + 1,this.zCoord) == Blocks.flowing_water)) {
      this.setFluidLevel(this.fluidLevel + 5);
      change=true;
    }
    if (change && timer > 10) {
      timer=0;
      int discreteFluidLevel=getDiscreteFluidLevel();
      if (lastDiscreteFluidLevel != discreteFluidLevel) {
        lastDiscreteFluidLevel=discreteFluidLevel;
        markDirtyAndMarkForUpdate();
      }
    }
    timer++;
  }
}"
95770,"public void breakMultiBlock(){
  int lvl=this.fluidLevel;
  int xPos=this.getXPosition();
  int yPos=this.getYPosition();
  int zPos=this.getZPosition();
  int xSize=this.getXSize();
  int ySize=this.getYSize();
  int zSize=this.getZSize();
  int[] levels=new int[ySize];
  int area=xSize * zSize;
  for (int i=0; i < levels.length; i++) {
    levels[i]=(lvl / area >= this.getSingleCapacity()) ? this.getSingleCapacity() : lvl / area;
    lvl=(lvl - levels[i] * area) < 0 ? 0 : (lvl - levels[i] * area);
  }
  for (int x=0; x < xSize; x++) {
    for (int y=0; y < ySize; y++) {
      for (int z=0; z < zSize; z++) {
        TileEntityTank tank=(TileEntityTank)this.worldObj.getTileEntity(this.xCoord - xPos + x,this.yCoord - yPos + y,this.zCoord - zPos + z);
        tank.connectedTanks=1;
        tank.fluidLevel=levels[y];
      }
    }
  }
}","public void breakMultiBlock(){
  int lvl=this.fluidLevel;
  int xPos=this.getXPosition();
  int yPos=this.getYPosition();
  int zPos=this.getZPosition();
  int xSize=this.getXSize();
  int ySize=this.getYSize();
  int zSize=this.getZSize();
  int[] levels=new int[ySize];
  int area=xSize * zSize;
  for (int i=0; i < levels.length; i++) {
    levels[i]=(lvl / area >= this.getSingleCapacity()) ? this.getSingleCapacity() : lvl / area;
    lvl=(lvl - levels[i] * area) < 0 ? 0 : (lvl - levels[i] * area);
  }
  for (int x=0; x < xSize; x++) {
    for (int y=0; y < ySize; y++) {
      for (int z=0; z < zSize; z++) {
        TileEntityTank tank=(TileEntityTank)this.worldObj.getTileEntity(this.xCoord - xPos + x,this.yCoord - yPos + y,this.zCoord - zPos + z);
        tank.connectedTanks=1;
        tank.fluidLevel=levels[y];
        tank.markDirtyAndMarkForUpdate();
      }
    }
  }
}"
95771,"public boolean checkForMultiBlock(){
  if (!this.worldObj.isRemote) {
    int xPos=this.findArrayXPosition();
    int yPos=this.findArrayYPosition();
    int zPos=this.findArrayZPosition();
    int xSize=this.findArrayXSize();
    int ySize=this.findArrayYSize();
    int zSize=this.findArrayZSize();
    for (int x=this.xCoord - xPos; x < this.xCoord - xPos + xSize; x++) {
      for (int y=this.yCoord - yPos; y < this.yCoord - yPos + ySize; y++) {
        for (int z=this.zCoord - zPos; z < this.zCoord - zPos + zSize; z++) {
          if (this.isSameTank(this.worldObj.getTileEntity(x,y,z))) {
            TileEntityTank tank=(TileEntityTank)this.worldObj.getTileEntity(x,y,z);
            int[] tankSize=tank.findArrayDimensions();
            if (!(xSize == tankSize[0] && ySize == tankSize[1] && zSize == tankSize[2])) {
              return false;
            }
          }
 else {
            return false;
          }
        }
      }
    }
    for (int x=this.xCoord - xPos; x < this.xCoord - xPos + xSize; x++) {
      for (int y=this.yCoord - yPos; y < this.yCoord - yPos + ySize; y++) {
        for (int z=this.zCoord - zPos; z < this.zCoord - zPos + zSize; z++) {
          TileEntityTank tank=((TileEntityTank)this.worldObj.getTileEntity(x,y,z));
          if (tank.isMultiBlock()) {
            tank.breakMultiBlock();
          }
        }
      }
    }
    int lvl=0;
    for (int x=this.xCoord - xPos; x < this.xCoord - xPos + xSize; x++) {
      for (int y=this.yCoord - yPos; y < this.yCoord - yPos + ySize; y++) {
        for (int z=this.zCoord - zPos; z < this.zCoord - zPos + zSize; z++) {
          TileEntityTank tank=((TileEntityTank)this.worldObj.getTileEntity(x,y,z));
          lvl=tank.fluidLevel + lvl;
        }
      }
    }
    this.connectedTanks=xSize * ySize * zSize;
    for (int x=this.xCoord - xPos; x < this.xCoord - xPos + xSize; x++) {
      for (int y=this.yCoord - yPos; y < this.yCoord - yPos + ySize; y++) {
        for (int z=this.zCoord - zPos; z < this.zCoord - zPos + zSize; z++) {
          TileEntityTank tank=((TileEntityTank)this.worldObj.getTileEntity(x,y,z));
          tank.connectedTanks=xSize * ySize * zSize;
          tank.setFluidLevel(lvl);
        }
      }
    }
    return true;
  }
  return false;
}","public boolean checkForMultiBlock(){
  if (!this.worldObj.isRemote) {
    int xPos=this.findArrayXPosition();
    int yPos=this.findArrayYPosition();
    int zPos=this.findArrayZPosition();
    int xSize=this.findArrayXSize();
    int ySize=this.findArrayYSize();
    int zSize=this.findArrayZSize();
    if (xSize == 1 && ySize == 1 && zSize == 1)     return false;
    for (int x=this.xCoord - xPos; x < this.xCoord - xPos + xSize; x++) {
      for (int y=this.yCoord - yPos; y < this.yCoord - yPos + ySize; y++) {
        for (int z=this.zCoord - zPos; z < this.zCoord - zPos + zSize; z++) {
          if (this.isSameTank(this.worldObj.getTileEntity(x,y,z))) {
            TileEntityTank tank=(TileEntityTank)this.worldObj.getTileEntity(x,y,z);
            int[] tankSize=tank.findArrayDimensions();
            if (!(xSize == tankSize[0] && ySize == tankSize[1] && zSize == tankSize[2])) {
              return false;
            }
          }
 else {
            return false;
          }
        }
      }
    }
    for (int x=this.xCoord - xPos; x < this.xCoord - xPos + xSize; x++) {
      for (int y=this.yCoord - yPos; y < this.yCoord - yPos + ySize; y++) {
        for (int z=this.zCoord - zPos; z < this.zCoord - zPos + zSize; z++) {
          TileEntityTank tank=((TileEntityTank)this.worldObj.getTileEntity(x,y,z));
          if (tank.isMultiBlock()) {
            tank.breakMultiBlock();
          }
        }
      }
    }
    int lvl=0;
    for (int x=this.xCoord - xPos; x < this.xCoord - xPos + xSize; x++) {
      for (int y=this.yCoord - yPos; y < this.yCoord - yPos + ySize; y++) {
        for (int z=this.zCoord - zPos; z < this.zCoord - zPos + zSize; z++) {
          TileEntityTank tank=((TileEntityTank)this.worldObj.getTileEntity(x,y,z));
          lvl=tank.fluidLevel + lvl;
        }
      }
    }
    this.connectedTanks=xSize * ySize * zSize;
    for (int x=this.xCoord - xPos; x < this.xCoord - xPos + xSize; x++) {
      for (int y=this.yCoord - yPos; y < this.yCoord - yPos + ySize; y++) {
        for (int z=this.zCoord - zPos; z < this.zCoord - zPos + zSize; z++) {
          TileEntityTank tank=((TileEntityTank)this.worldObj.getTileEntity(x,y,z));
          tank.connectedTanks=xSize * ySize * zSize;
          tank.setFluidLevel(lvl);
          tank.markDirtyAndMarkForUpdate();
        }
      }
    }
    return true;
  }
  return false;
}"
95772,"public void setFluidLevel(int lvl){
  if (lvl != this.fluidLevel) {
    this.fluidLevel=lvl > this.getTotalCapacity() ? this.getTotalCapacity() : lvl;
    this.syncFluidLevels();
  }
}","public void setFluidLevel(int lvl){
  if (lvl != this.fluidLevel) {
    this.fluidLevel=lvl > this.getTotalCapacity() ? this.getTotalCapacity() : lvl;
    this.syncFluidLevels(false);
  }
}"
95773,"public void updatePowerStatus(){
  boolean wasPowered=powered;
  powered=worldObj.isBlockIndirectlyGettingPowered(xCoord,yCoord,zCoord);
  if (powered != wasPowered) {
    markDirty();
  }
}","public void updatePowerStatus(){
  boolean wasPowered=powered;
  powered=worldObj.isBlockIndirectlyGettingPowered(xCoord,yCoord,zCoord);
  if (powered != wasPowered) {
    markDirtyAndMarkForUpdate();
  }
}"
95774,"public void plantSeed(World world,int x,int y,int z,EntityPlayer player){
  if (!world.isRemote) {
    TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
    if (crop.crossCrop || crop.hasPlant() || !(player.getCurrentEquippedItem().getItem() instanceof ItemSeeds)) {
      return;
    }
 else {
      ItemStack stack=player.getCurrentEquippedItem();
      if (!SeedHelper.isValidSeed((ItemSeeds)stack.getItem(),stack.getItemDamage()) || !SeedHelper.isCorrectSoil(world.getBlock(x,y - 1,z),world.getBlockMetadata(x,y - 1,z),(ItemSeeds)stack.getItem(),stack.getItemDamage())) {
        return;
      }
      if (player.getCurrentEquippedItem().stackTagCompound != null && player.getCurrentEquippedItem().stackTagCompound.hasKey(Names.NBT.growth)) {
        crop.setPlant(stack.stackTagCompound.getInteger(Names.NBT.growth),stack.stackTagCompound.getInteger(Names.NBT.gain),stack.stackTagCompound.getInteger(Names.NBT.strength),stack.stackTagCompound.getBoolean(Names.NBT.analyzed),(ItemSeeds)stack.getItem(),stack.getItemDamage());
      }
 else {
        crop.setPlant(Constants.defaultGrowth,Constants.defaultGain,Constants.defaultStrength,false,(ItemSeeds)stack.getItem(),stack.getItemDamage());
      }
      player.getCurrentEquippedItem().stackSize=player.capabilities.isCreativeMode ? player.getCurrentEquippedItem().stackSize : player.getCurrentEquippedItem().stackSize - 1;
    }
    crop.markDirty();
  }
}","public void plantSeed(World world,int x,int y,int z,EntityPlayer player){
  if (!world.isRemote) {
    TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
    if (crop.crossCrop || crop.hasPlant() || !(player.getCurrentEquippedItem().getItem() instanceof ItemSeeds)) {
      return;
    }
 else {
      ItemStack stack=player.getCurrentEquippedItem();
      if (!SeedHelper.isValidSeed((ItemSeeds)stack.getItem(),stack.getItemDamage()) || !SeedHelper.isCorrectSoil(world.getBlock(x,y - 1,z),world.getBlockMetadata(x,y - 1,z),(ItemSeeds)stack.getItem(),stack.getItemDamage())) {
        return;
      }
      if (player.getCurrentEquippedItem().stackTagCompound != null && player.getCurrentEquippedItem().stackTagCompound.hasKey(Names.NBT.growth)) {
        crop.setPlant(stack.stackTagCompound.getInteger(Names.NBT.growth),stack.stackTagCompound.getInteger(Names.NBT.gain),stack.stackTagCompound.getInteger(Names.NBT.strength),stack.stackTagCompound.getBoolean(Names.NBT.analyzed),(ItemSeeds)stack.getItem(),stack.getItemDamage());
      }
 else {
        crop.setPlant(Constants.defaultGrowth,Constants.defaultGain,Constants.defaultStrength,false,(ItemSeeds)stack.getItem(),stack.getItemDamage());
      }
      player.getCurrentEquippedItem().stackSize=player.capabilities.isCreativeMode ? player.getCurrentEquippedItem().stackSize : player.getCurrentEquippedItem().stackSize - 1;
    }
    crop.markDirtyAndMarkForUpdate();
  }
}"
95775,"public boolean harvest(World world,int x,int y,int z){
  if (!world.isRemote) {
    boolean update=false;
    TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
    if (crop.weed) {
      crop.clearWeed();
    }
 else     if (crop.crossCrop) {
      crop.crossCrop=false;
      this.dropBlockAsItem(world,x,y,z,new ItemStack(Items.crops,1));
      update=true;
    }
 else     if (crop.isMature()) {
      crop.getWorldObj().setBlockMetadataWithNotify(crop.xCoord,crop.yCoord,crop.zCoord,2,2);
      update=true;
      ArrayList<ItemStack> drops=SeedHelper.getPlantFruits((ItemSeeds)crop.seed,world,x,y,z,crop.gain,crop.seedMeta);
      for (      ItemStack drop : drops) {
        this.dropBlockAsItem(world,x,y,z,drop);
      }
    }
    if (update) {
      crop.markDirty();
    }
    return update;
  }
  return false;
}","public boolean harvest(World world,int x,int y,int z){
  if (!world.isRemote) {
    boolean update=false;
    TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
    if (crop.weed) {
      crop.clearWeed();
    }
 else     if (crop.crossCrop) {
      crop.crossCrop=false;
      this.dropBlockAsItem(world,x,y,z,new ItemStack(Items.crops,1));
      update=true;
    }
 else     if (crop.isMature()) {
      crop.getWorldObj().setBlockMetadataWithNotify(crop.xCoord,crop.yCoord,crop.zCoord,2,2);
      update=true;
      ArrayList<ItemStack> drops=SeedHelper.getPlantFruits((ItemSeeds)crop.seed,world,x,y,z,crop.gain,crop.seedMeta);
      for (      ItemStack drop : drops) {
        this.dropBlockAsItem(world,x,y,z,drop);
      }
    }
    if (update) {
      crop.markDirtyAndMarkForUpdate();
    }
    return update;
  }
  return false;
}"
95776,"public void setCrossCrop(World world,int x,int y,int z,EntityPlayer player){
  if (!world.isRemote) {
    boolean update=false;
    TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
    if (!crop.crossCrop && !crop.hasPlant()) {
      crop.crossCrop=true;
      player.getCurrentEquippedItem().stackSize=player.capabilities.isCreativeMode ? player.getCurrentEquippedItem().stackSize : player.getCurrentEquippedItem().stackSize - 1;
      update=true;
    }
 else {
      this.harvest(world,x,y,z);
    }
    if (update) {
      crop.markDirty();
    }
  }
}","public void setCrossCrop(World world,int x,int y,int z,EntityPlayer player){
  if (!world.isRemote) {
    boolean update=false;
    TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
    if (!crop.crossCrop && !crop.hasPlant()) {
      crop.crossCrop=true;
      player.getCurrentEquippedItem().stackSize=player.capabilities.isCreativeMode ? player.getCurrentEquippedItem().stackSize : player.getCurrentEquippedItem().stackSize - 1;
      update=true;
    }
 else {
      this.harvest(world,x,y,z);
    }
    if (update) {
      crop.markDirtyAndMarkForUpdate();
    }
  }
}"
95777,"@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  if (!world.isRemote) {
    if (world.getBlock(x,y,z) != null && world.getBlock(x,y,z) instanceof BlockCrop) {
      TileEntity te=world.getTileEntity(x,y,z);
      if (te != null && te instanceof TileEntityCrop) {
        TileEntityCrop crop=(TileEntityCrop)te;
        if (crop.weed) {
          crop.clearWeed();
        }
 else         if (crop.hasPlant() && stack.getItemDamage() == 0) {
          NBTTagCompound tag=new NBTTagCompound();
          tag.setShort(Names.NBT.growth,(short)crop.growth);
          tag.setShort(Names.NBT.gain,(short)crop.gain);
          tag.setShort(Names.NBT.strength,(short)crop.strength);
          tag.setBoolean(Names.NBT.analyzed,crop.analyzed);
          tag.setString(Names.Objects.seed,crop.getSeedString());
          tag.setShort(Names.NBT.meta,(short)crop.seedMeta);
          tag.setShort(Names.NBT.materialMeta,(short)world.getBlockMetadata(x,y,z));
          stack.setTagCompound(tag);
          stack.setItemDamage(1);
          crop.clearPlant();
          return true;
        }
 else         if (!crop.hasPlant() && !crop.crossCrop && stack.getItemDamage() == 1) {
          NBTTagCompound tag=stack.getTagCompound();
          ItemSeeds seed=(ItemSeeds)Item.itemRegistry.getObject(tag.getString(Names.Objects.seed));
          int seedMeta=tag.getShort(Names.NBT.meta);
          if (SeedHelper.isCorrectSoil(world.getBlock(x,y - 1,z),world.getBlockMetadata(x,y - 1,z),seed,seedMeta)) {
            crop.growth=tag.getShort(Names.NBT.growth);
            crop.gain=tag.getShort(Names.NBT.gain);
            crop.strength=tag.getShort(Names.NBT.strength);
            crop.analyzed=tag.getBoolean(Names.NBT.analyzed);
            crop.seed=seed;
            crop.seedMeta=seedMeta;
            world.setBlockMetadataWithNotify(x,y,z,tag.getShort(Names.NBT.materialMeta),3);
            crop.markDirty();
            stack.setTagCompound(null);
            stack.setItemDamage(0);
            return true;
          }
        }
      }
    }
  }
  return false;
}","@Override public boolean onItemUseFirst(ItemStack stack,EntityPlayer player,World world,int x,int y,int z,int side,float hitX,float hitY,float hitZ){
  if (!world.isRemote) {
    if (world.getBlock(x,y,z) != null && world.getBlock(x,y,z) instanceof BlockCrop) {
      TileEntity te=world.getTileEntity(x,y,z);
      if (te != null && te instanceof TileEntityCrop) {
        TileEntityCrop crop=(TileEntityCrop)te;
        if (crop.weed) {
          crop.clearWeed();
        }
 else         if (crop.hasPlant() && stack.getItemDamage() == 0) {
          NBTTagCompound tag=new NBTTagCompound();
          tag.setShort(Names.NBT.growth,(short)crop.growth);
          tag.setShort(Names.NBT.gain,(short)crop.gain);
          tag.setShort(Names.NBT.strength,(short)crop.strength);
          tag.setBoolean(Names.NBT.analyzed,crop.analyzed);
          tag.setString(Names.Objects.seed,crop.getSeedString());
          tag.setShort(Names.NBT.meta,(short)crop.seedMeta);
          tag.setShort(Names.NBT.materialMeta,(short)world.getBlockMetadata(x,y,z));
          stack.setTagCompound(tag);
          stack.setItemDamage(1);
          crop.clearPlant();
          return true;
        }
 else         if (!crop.hasPlant() && !crop.crossCrop && stack.getItemDamage() == 1) {
          NBTTagCompound tag=stack.getTagCompound();
          ItemSeeds seed=(ItemSeeds)Item.itemRegistry.getObject(tag.getString(Names.Objects.seed));
          int seedMeta=tag.getShort(Names.NBT.meta);
          if (SeedHelper.isCorrectSoil(world.getBlock(x,y - 1,z),world.getBlockMetadata(x,y - 1,z),seed,seedMeta)) {
            crop.growth=tag.getShort(Names.NBT.growth);
            crop.gain=tag.getShort(Names.NBT.gain);
            crop.strength=tag.getShort(Names.NBT.strength);
            crop.analyzed=tag.getBoolean(Names.NBT.analyzed);
            crop.seed=seed;
            crop.seedMeta=seedMeta;
            world.setBlockMetadataWithNotify(x,y,z,tag.getShort(Names.NBT.materialMeta),3);
            crop.markDirtyAndMarkForUpdate();
            stack.setTagCompound(null);
            stack.setItemDamage(0);
            return true;
          }
        }
      }
    }
  }
  return false;
}"
95778,"@Override public ItemStack transferStackInSlot(EntityPlayer player,int clickedSlot){
  ItemStack itemstack=null;
  Slot slot=(Slot)this.inventorySlots.get(clickedSlot);
  if (slot != null && slot.getHasStack()) {
    ItemStack itemstack1=slot.getStack();
    itemstack=itemstack1.copy();
    if (clickedSlot == seedSlotId || clickedSlot == journalSlotId) {
      if (!this.mergeItemStack(itemstack1,0,inventorySlots.size(),false)) {
        return null;
      }
    }
 else {
      if (itemstack1.getItem() != null) {
        if (itemstack1.getItem() instanceof ItemSeeds) {
          if (!SeedHelper.isValidSeed((ItemSeeds)itemstack1.getItem(),itemstack1.getItemDamage())) {
            return null;
          }
          if (!this.mergeItemStack(itemstack1,seedSlotId,seedSlotId + 1,false)) {
            return null;
          }
        }
 else         if (itemstack1.getItem() instanceof ItemJournal) {
          if (!this.mergeItemStack(itemstack1,journalSlotId,journalSlotId + 1,false)) {
            return null;
          }
        }
      }
    }
    if (itemstack1.stackSize == 0) {
      slot.putStack(null);
    }
 else {
      slot.onSlotChanged();
    }
    if (itemstack1.stackSize == itemstack.stackSize) {
      return null;
    }
    slot.onPickupFromSlot(player,itemstack1);
  }
  return itemstack;
}","@Override public ItemStack transferStackInSlot(EntityPlayer player,int clickedSlot){
  ItemStack itemstack=null;
  Slot slot=(Slot)this.inventorySlots.get(clickedSlot);
  if (slot != null && slot.getHasStack()) {
    ItemStack itemstack1=slot.getStack();
    itemstack=itemstack1.copy();
    if (clickedSlot == seedSlotId || clickedSlot == journalSlotId) {
      if (!this.mergeItemStack(itemstack1,0,inventorySlots.size() - 2,false)) {
        return null;
      }
    }
 else {
      if (itemstack1.getItem() != null) {
        if (itemstack1.getItem() instanceof ItemSeeds) {
          if (!SeedHelper.isValidSeed((ItemSeeds)itemstack1.getItem(),itemstack1.getItemDamage())) {
            return null;
          }
          if (!this.mergeItemStack(itemstack1,seedSlotId,seedSlotId + 1,false)) {
            return null;
          }
        }
 else         if (itemstack1.getItem() instanceof ItemJournal) {
          if (!this.mergeItemStack(itemstack1,journalSlotId,journalSlotId + 1,false)) {
            return null;
          }
        }
      }
    }
    if (itemstack1.stackSize == 0) {
      slot.putStack(null);
    }
 else {
      slot.onSlotChanged();
    }
    if (itemstack1.stackSize == itemstack.stackSize) {
      return null;
    }
    slot.onPickupFromSlot(player,itemstack1);
  }
  return itemstack;
}"
95779,"@Override public void harvestBlock(World world,EntityPlayer player,int x,int y,int z,int meta){
  if ((!world.isRemote) && (!player.isSneaking())) {
    if (!player.capabilities.isCreativeMode) {
      this.dropBlockAsItem(world,x,y,z,world.getBlockMetadata(x,y,z),0);
    }
    world.setBlockToAir(x,y,z);
    world.removeTileEntity(x,y,z);
  }
}","@Override public void harvestBlock(World world,EntityPlayer player,int x,int y,int z,int meta){
  if ((!world.isRemote) && (!player.isSneaking())) {
    if (!player.capabilities.isCreativeMode) {
      this.dropBlockAsItem(world,x,y,z,world.getBlockMetadata(x,y,z),0);
    }
    world.setBlockToAir(x,y,z);
  }
}"
95780,"@Override public void updateEntity(){
  if (!worldObj.isRemote) {
    for (int yOffset=1; yOffset < 5; yOffset++) {
      for (int xOffset=-3; xOffset <= 3; xOffset++) {
        for (int zOffset=-3; zOffset <= 3; zOffset++) {
          if (this.sprinkle() && this.irrigate(this.xCoord + xOffset,this.yCoord - yOffset,this.zCoord + zOffset)) {
            TileEntityChannel channel=(TileEntityChannel)this.worldObj.getTileEntity(this.xCoord,this.yCoord + 1,this.zCoord);
            channel.setFluidLevel(channel.getFluidLevel() - 1);
          }
        }
      }
    }
  }
 else {
    if (this.isSprinkled) {
      this.renderLiquidSpray();
    }
  }
}","@Override public void updateEntity(){
  if (!worldObj.isRemote) {
    if (this.canSprinkle())     counter=(counter + 1) % 60;
    for (int yOffset=1; yOffset < 5; yOffset++) {
      for (int xOffset=-3; xOffset <= 3; xOffset++) {
        for (int zOffset=-3; zOffset <= 3; zOffset++) {
          if (this.sprinkle() && this.irrigate(this.xCoord + xOffset,this.yCoord - yOffset,this.zCoord + zOffset)) {
            TileEntityChannel channel=(TileEntityChannel)this.worldObj.getTileEntity(this.xCoord,this.yCoord + 1,this.zCoord);
            channel.setFluidLevel(channel.getFluidLevel() - 1);
          }
        }
      }
    }
  }
 else {
    if (this.isSprinkled) {
      this.renderLiquidSpray();
    }
  }
}"
95781,"private boolean sprinkle(){
  boolean newState=this.canSprinkle();
  if (newState)   counter=(counter + 1) % 60;
  if (newState != this.isSprinkled) {
    this.isSprinkled=newState;
    this.markDirty();
  }
  return this.isSprinkled;
}","private boolean sprinkle(){
  boolean newState=this.canSprinkle();
  if (newState != this.isSprinkled) {
    this.isSprinkled=newState;
    this.markDirty();
  }
  return this.isSprinkled;
}"
95782,"@Override public List<String> getWailaBody(ItemStack itemStack,List<String> list,IWailaDataAccessor dataAccessor,IWailaConfigHandler configHandler){
  Block block=dataAccessor.getBlock();
  TileEntity te=dataAccessor.getTileEntity();
  if (block != null && block instanceof BlockCrop && te != null && te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    int growth=crop.growth;
    int gain=crop.gain;
    int strength=crop.strength;
    String seedName=((ItemSeeds)crop.seed).getItemStackDisplayName(new ItemStack((ItemSeeds)crop.seed,1,crop.seedMeta));
    list.add(StatCollector.translateToLocal(""String_Node_Str"") + ""String_Node_Str"" + seedName);
    list.add(""String_Node_Str"" + StatCollector.translateToLocal(""String_Node_Str"") + ""String_Node_Str""+ growth);
    list.add(""String_Node_Str"" + StatCollector.translateToLocal(""String_Node_Str"") + ""String_Node_Str""+ gain);
    list.add(""String_Node_Str"" + StatCollector.translateToLocal(""String_Node_Str"") + ""String_Node_Str""+ strength);
  }
  return list;
}","@Override public List<String> getWailaBody(ItemStack itemStack,List<String> list,IWailaDataAccessor dataAccessor,IWailaConfigHandler configHandler){
  Block block=dataAccessor.getBlock();
  TileEntity te=dataAccessor.getTileEntity();
  if (block != null && block instanceof BlockCrop && te != null && te instanceof TileEntityCrop) {
    TileEntityCrop crop=(TileEntityCrop)te;
    if (crop.hasPlant()) {
      int growth=crop.growth;
      int gain=crop.gain;
      int strength=crop.strength;
      String seedName=((ItemSeeds)crop.seed).getItemStackDisplayName(new ItemStack((ItemSeeds)crop.seed,1,crop.seedMeta));
      list.add(StatCollector.translateToLocal(""String_Node_Str"") + ""String_Node_Str"" + seedName);
      list.add(""String_Node_Str"" + StatCollector.translateToLocal(""String_Node_Str"") + ""String_Node_Str""+ growth);
      list.add(""String_Node_Str"" + StatCollector.translateToLocal(""String_Node_Str"") + ""String_Node_Str""+ gain);
      list.add(""String_Node_Str"" + StatCollector.translateToLocal(""String_Node_Str"") + ""String_Node_Str""+ strength);
    }
  }
  return list;
}"
95783,"@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float fX,float fY,float fZ){
  if (!world.isRemote) {
    if (player.getCurrentEquippedItem() == null) {
      this.harvest(world,x,y,z);
    }
 else     if (player.getCurrentEquippedItem().getItem() == Items.crops) {
      this.setCrossCrop(world,x,y,z,player);
    }
 else     if (player.getCurrentEquippedItem().getItem() instanceof ItemSeeds) {
      this.plantSeed(world,x,y,z,player);
    }
  }
  return false;
}","@Override public boolean onBlockActivated(World world,int x,int y,int z,EntityPlayer player,int side,float fX,float fY,float fZ){
  if (!world.isRemote) {
    if (player.getCurrentEquippedItem() == null) {
      this.harvest(world,x,y,z);
    }
 else     if (player.getCurrentEquippedItem().getItem() == Items.crops) {
      this.setCrossCrop(world,x,y,z,player);
    }
 else {
      this.harvest(world,x,y,z);
      if (player.getCurrentEquippedItem().getItem() instanceof ItemSeeds) {
        this.plantSeed(world,x,y,z,player);
      }
    }
  }
  return true;
}"
95784,"public void setCrossCrop(World world,int x,int y,int z,EntityPlayer player){
  if (!world.isRemote) {
    boolean update=false;
    LogHelper.debug(""String_Node_Str"");
    TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
    if (!crop.crossCrop && !crop.hasPlant()) {
      crop.crossCrop=true;
      player.getCurrentEquippedItem().stackSize=player.capabilities.isCreativeMode ? player.getCurrentEquippedItem().stackSize : player.getCurrentEquippedItem().stackSize - 1;
      update=true;
      LogHelper.debug(""String_Node_Str"");
    }
    if (update) {
      this.syncAndUpdate(world,x,y,z);
    }
  }
}","public void setCrossCrop(World world,int x,int y,int z,EntityPlayer player){
  if (!world.isRemote) {
    boolean update=false;
    LogHelper.debug(""String_Node_Str"");
    TileEntityCrop crop=(TileEntityCrop)world.getTileEntity(x,y,z);
    if (!crop.crossCrop && !crop.hasPlant()) {
      crop.crossCrop=true;
      player.getCurrentEquippedItem().stackSize=player.capabilities.isCreativeMode ? player.getCurrentEquippedItem().stackSize : player.getCurrentEquippedItem().stackSize - 1;
      update=true;
      LogHelper.debug(""String_Node_Str"");
    }
 else {
      this.harvest(world,x,y,z);
    }
    if (update) {
      this.syncAndUpdate(world,x,y,z);
    }
  }
}"
95785,"@SubscribeEvent(priority=EventPriority.HIGHEST) public void onPlayerUseItemEvent(PlayerInteractEvent event){
  if (event.action == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK) {
    if (event.entityPlayer.getCurrentEquippedItem() != null && event.entityPlayer.getCurrentEquippedItem().stackSize > 0 && event.entityPlayer.getCurrentEquippedItem().getItem() != null && event.entityPlayer.getCurrentEquippedItem().getItem() instanceof IPlantable && event.entityPlayer.getCurrentEquippedItem().hasTagCompound()) {
      NBTTagCompound tag=event.entityPlayer.getCurrentEquippedItem().getTagCompound();
      if (tag.hasKey(Names.growth) && tag.hasKey(Names.gain) && tag.hasKey(Names.strength)) {
        if (event.world.getTileEntity(event.x,event.y,event.z) != null && event.world.getTileEntity(event.x,event.y,event.z) instanceof TileEntityCrop) {
          TileEntityCrop crop=(TileEntityCrop)event.world.getTileEntity(event.x,event.y,event.z);
          if (!(crop.hasPlant() || crop.crossCrop)) {
            event.setResult(Event.Result.ALLOW);
          }
 else {
            event.setResult(Event.Result.DENY);
            event.setCanceled(true);
          }
        }
 else {
          event.setResult(Event.Result.DENY);
          event.setCanceled(true);
        }
      }
    }
 else     if (LoadedMods.hungerOverhaul) {
      if (event.world.getBlock(event.x,event.y,event.z) instanceof BlockCrop) {
        if (event.entityPlayer.getCurrentEquippedItem() != null) {
          if (event.entityPlayer.getCurrentEquippedItem().getItem() == Items.dye && event.entityPlayer.getCurrentEquippedItem().getItemDamage() == 15) {
            if (!((TileEntityCrop)event.world.getTileEntity(event.x,event.y,event.z)).isMature()) {
              if (!event.world.isRemote) {
                event.setResult(Event.Result.ALLOW);
                return;
              }
            }
          }
 else           if (event.entityPlayer.getCurrentEquippedItem().getItem() instanceof ItemDebugger) {
            event.entityPlayer.getCurrentEquippedItem().getItem().onItemUse(event.entityPlayer.getCurrentEquippedItem(),event.entityPlayer,event.world,event.x,event.y,event.z,event.face,0,0,0);
          }
        }
        event.world.getBlock(event.x,event.y,event.z).onBlockActivated(event.world,event.x,event.y,event.z,event.entityPlayer,event.face,0,0,0);
        event.setResult(Event.Result.DENY);
        event.useItem=Event.Result.DENY;
        event.useBlock=Event.Result.DENY;
        if (event.world.isRemote) {
          FMLClientHandler.instance().getClientPlayerEntity().sendQueue.addToSendQueue(new C08PacketPlayerBlockPlacement(event.x,event.y,event.z,event.face,event.entityPlayer.inventory.getCurrentItem(),0f,0f,0f));
        }
        event.setCanceled(true);
      }
    }
  }
}","@SubscribeEvent(priority=EventPriority.HIGHEST) public void onPlayerUseItemEvent(PlayerInteractEvent event){
  if (event.action == PlayerInteractEvent.Action.RIGHT_CLICK_BLOCK) {
    if (event.world.getBlock(event.x,event.y,event.z) == Blocks.farmland) {
      if (event.entityPlayer.getCurrentEquippedItem() != null && event.entityPlayer.getCurrentEquippedItem().stackSize > 0 && event.entityPlayer.getCurrentEquippedItem().getItem() != null && event.entityPlayer.getCurrentEquippedItem().getItem() instanceof IPlantable && event.entityPlayer.getCurrentEquippedItem().hasTagCompound()) {
        if (ConfigurationHandler.disableVanillaFarming && SeedHelper.isValidSeed((ItemSeeds)event.entityPlayer.getCurrentEquippedItem().getItem())) {
          event.setResult(Event.Result.DENY);
          event.setCanceled(true);
        }
 else {
          NBTTagCompound tag=event.entityPlayer.getCurrentEquippedItem().getTagCompound();
          if (tag.hasKey(Names.growth) && tag.hasKey(Names.gain) && tag.hasKey(Names.strength)) {
            event.setResult(Event.Result.DENY);
            event.setCanceled(true);
          }
        }
      }
    }
 else     if (event.world.getBlock(event.x,event.y,event.z) instanceof BlockCrop) {
      if (LoadedMods.hungerOverhaul) {
        if (event.entityPlayer.getCurrentEquippedItem() != null) {
          if (event.entityPlayer.getCurrentEquippedItem().getItem() == Items.dye && event.entityPlayer.getCurrentEquippedItem().getItemDamage() == 15) {
            if (!((TileEntityCrop)event.world.getTileEntity(event.x,event.y,event.z)).isMature()) {
              if (!event.world.isRemote) {
                event.setResult(Event.Result.ALLOW);
                return;
              }
            }
          }
 else           if (event.entityPlayer.getCurrentEquippedItem().getItem() instanceof ItemDebugger) {
            event.entityPlayer.getCurrentEquippedItem().getItem().onItemUse(event.entityPlayer.getCurrentEquippedItem(),event.entityPlayer,event.world,event.x,event.y,event.z,event.face,0,0,0);
          }
        }
        event.world.getBlock(event.x,event.y,event.z).onBlockActivated(event.world,event.x,event.y,event.z,event.entityPlayer,event.face,0,0,0);
        event.setResult(Event.Result.DENY);
        event.useItem=Event.Result.DENY;
        event.useBlock=Event.Result.DENY;
        if (event.world.isRemote) {
          FMLClientHandler.instance().getClientPlayerEntity().sendQueue.addToSendQueue(new C08PacketPlayerBlockPlacement(event.x,event.y,event.z,event.face,event.entityPlayer.inventory.getCurrentItem(),0f,0f,0f));
        }
        event.setCanceled(true);
      }
    }
  }
}"
95786,"@Override protected void onResume(){
  super.onResume();
  Log.d(""String_Node_Str"",""String_Node_Str"");
  if (simpleBluetooth == null) {
    simpleBluetooth=new SimpleBluetooth(this,this);
  }
  simpleBluetooth.initializeSimpleBluetooth();
  simpleBluetooth.setInputStreamType(BluetoothUtility.InputStreamType.BUFFERED);
  simpleBluetooth.setSimpleBluetoothListener(new SimpleBluetoothListener(){
    @Override public void onBluetoothDataReceived(    byte[] bytes,    String data){
      Toast.makeText(MainActivity.this,""String_Node_Str"" + data,Toast.LENGTH_SHORT).show();
      connectionState.setText(""String_Node_Str"" + data);
      isConnected=false;
      Log.w(""String_Node_Str"",""String_Node_Str"");
    }
    @Override public void onDeviceConnected(    BluetoothDevice device){
      Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      connectionState.setText(""String_Node_Str"");
      isConnected=true;
      Log.w(""String_Node_Str"",""String_Node_Str"");
    }
    @Override public void onDeviceDisconnected(    BluetoothDevice device){
      Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      connectionState.setText(""String_Node_Str"");
      Log.w(""String_Node_Str"",""String_Node_Str"");
    }
    @Override public void onDiscoveryStarted(){
    }
    @Override public void onDiscoveryFinished(){
    }
  }
);
}","@Override protected void onResume(){
  super.onResume();
  if (simpleBluetooth == null) {
    simpleBluetooth=new SimpleBluetooth(this,this);
  }
  simpleBluetooth.initializeSimpleBluetooth();
  simpleBluetooth.setInputStreamType(BluetoothUtility.InputStreamType.BUFFERED);
  simpleBluetooth.setSimpleBluetoothListener(new SimpleBluetoothListener(){
    @Override public void onBluetoothDataReceived(    byte[] bytes,    String data){
      Toast.makeText(MainActivity.this,""String_Node_Str"" + data,Toast.LENGTH_SHORT).show();
      connectionState.setText(""String_Node_Str"" + data);
      isConnected=false;
      Log.w(""String_Node_Str"",""String_Node_Str"");
    }
    @Override public void onDeviceConnected(    BluetoothDevice device){
      Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      connectionState.setText(""String_Node_Str"");
      isConnected=true;
      Log.w(""String_Node_Str"",""String_Node_Str"");
    }
    @Override public void onDeviceDisconnected(    BluetoothDevice device){
      Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      connectionState.setText(""String_Node_Str"");
      Log.w(""String_Node_Str"",""String_Node_Str"");
    }
    @Override public void onDiscoveryStarted(){
    }
    @Override public void onDiscoveryFinished(){
    }
  }
);
}"
95787,"public ConnectedThread(BluetoothSocket socket){
  mmSocket=socket;
  bluetoothSocket=socket;
  InputStream tmpIn=null;
  OutputStream tmpOut=null;
  try {
    tmpIn=socket.getInputStream();
    tmpOut=socket.getOutputStream();
  }
 catch (  IOException e) {
    Log.d(""String_Node_Str"",e.getMessage());
  }
  mInputStream=tmpIn;
  mOutputStream=tmpOut;
}","public ConnectedThread(BluetoothSocket socket){
  mmSocket=socket;
  bluetoothSocket=socket;
  InputStream tmpIn=null;
  OutputStream tmpOut=null;
  try {
    tmpIn=socket.getInputStream();
    tmpOut=socket.getOutputStream();
  }
 catch (  IOException e) {
  }
  mInputStream=tmpIn;
  mOutputStream=tmpOut;
}"
95788,"@Override public void handleMessage(Message message){
switch (message.what) {
case MESSAGE_READ:
    byte[] readBuf=(byte[])message.obj;
  String readMessage=new String(readBuf);
if (readBuf.length > 0) {
  if (mListener != null)   mListener.onBluetoothDataReceived(readBuf,readMessage);
}
break;
case MESSAGE_WAIT_FOR_CONNECTION:
if (dialog != null) {
dialog.setTitle(""String_Node_Str"");
dialog.setMessage(""String_Node_Str"");
dialog.show();
}
break;
case MESSAGE_CONNECTION_MADE:
if (dialog != null) {
if (dialog.isShowing()) {
dialog.dismiss();
if (shouldShowSnackbars && mActivity != null) {
Snackbar.make(mActivity.findViewById(android.R.id.content),""String_Node_Str"",Snackbar.LENGTH_SHORT).show();
}
}
}
break;
case MESSAGE_A2DP_PROXY_RECEIVED:
BluetoothA2dp device=(BluetoothA2dp)message.obj;
if (device != null && mListener != null) {
mListener.onBluetoothA2DPRequested(device);
}
break;
default :
break;
}
}","@Override public void handleMessage(Message message){
switch (message.what) {
case MESSAGE_READ:
    byte[] readBuf=(byte[])message.obj;
  int datalength=message.arg1;
String readMessage=new String(readBuf,0,datalength);
if (readBuf.length > 0) {
if (mListener != null) mListener.onBluetoothDataReceived(readBuf,readMessage);
}
break;
case MESSAGE_WAIT_FOR_CONNECTION:
if (dialog != null) {
dialog.setTitle(""String_Node_Str"");
dialog.setMessage(""String_Node_Str"");
dialog.show();
}
break;
case MESSAGE_CONNECTION_MADE:
if (dialog != null) {
if (dialog.isShowing()) {
dialog.dismiss();
if (shouldShowSnackbars && mActivity != null) {
Snackbar.make(mActivity.findViewById(android.R.id.content),""String_Node_Str"",Snackbar.LENGTH_SHORT).show();
}
}
}
break;
case MESSAGE_A2DP_PROXY_RECEIVED:
BluetoothA2dp device=(BluetoothA2dp)message.obj;
if (device != null && mListener != null) {
mListener.onBluetoothA2DPRequested(device);
}
break;
default :
break;
}
}"
95789,"private boolean isSubDirectory(FilePath parent,FilePath child){
  FilePath parentFolder=child;
  while (parentFolder != null) {
    if (parent.equals(parentFolder)) {
      return true;
    }
    parentFolder=child.getParent();
  }
  return false;
}","private boolean isSubDirectory(FilePath parent,FilePath child){
  FilePath parentFolder=child;
  while (parentFolder != null) {
    if (parent.equals(parentFolder)) {
      return true;
    }
    parentFolder=parentFolder.getParent();
  }
  return false;
}"
95790,"private RevisionLocation zipAndUpload(AWSClients aws,String projectName,FilePath sourceDirectory,Map<String,String> envVars) throws IOException, InterruptedException, IllegalArgumentException {
  File zipFile=File.createTempFile(projectName + ""String_Node_Str"",""String_Node_Str"");
  String key;
  File appspec;
  File dest;
  try {
    if (this.deploymentGroupAppspec) {
      appspec=new File(sourceDirectory + ""String_Node_Str"" + this.deploymentGroupName+ ""String_Node_Str"");
      if (appspec.exists()) {
        dest=new File(sourceDirectory + ""String_Node_Str"");
        FileUtils.copyFile(appspec,dest);
        logger.println(""String_Node_Str"" + this.deploymentGroupName + ""String_Node_Str"");
      }
      if (!appspec.exists()) {
        throw new IllegalArgumentException(""String_Node_Str"" + this.deploymentGroupName + ""String_Node_Str"");
      }
    }
    logger.println(""String_Node_Str"" + zipFile.getAbsolutePath());
    sourceDirectory.zip(new FileOutputStream(zipFile),new DirScanner.Glob(this.includes,this.excludes));
    if (this.s3prefix.isEmpty()) {
      key=zipFile.getName();
    }
 else {
      key=Util.replaceMacro(this.s3prefix,envVars);
      if (this.s3prefix.endsWith(""String_Node_Str"")) {
        key+=zipFile.getName();
      }
 else {
        key+=""String_Node_Str"" + zipFile.getName();
      }
    }
    logger.println(""String_Node_Str"" + this.s3bucket + ""String_Node_Str""+ key);
    PutObjectResult s3result=aws.s3.putObject(this.s3bucket,key,zipFile);
    S3Location s3Location=new S3Location();
    s3Location.setBucket(this.s3bucket);
    s3Location.setKey(key);
    s3Location.setBundleType(BundleType.Zip);
    s3Location.setETag(s3result.getETag());
    RevisionLocation revisionLocation=new RevisionLocation();
    revisionLocation.setRevisionType(RevisionLocationType.S3);
    revisionLocation.setS3Location(s3Location);
    return revisionLocation;
  }
  finally {
    zipFile.delete();
  }
}","private RevisionLocation zipAndUpload(AWSClients aws,String projectName,FilePath sourceDirectory,Map<String,String> envVars,String deploymentGroupName) throws IOException, InterruptedException, IllegalArgumentException {
  File zipFile=File.createTempFile(projectName + ""String_Node_Str"",""String_Node_Str"");
  String key;
  File appspec;
  File dest;
  try {
    if (this.deploymentGroupAppspec) {
      appspec=new File(sourceDirectory + ""String_Node_Str"" + deploymentGroupName+ ""String_Node_Str"");
      if (appspec.exists()) {
        dest=new File(sourceDirectory + ""String_Node_Str"");
        FileUtils.copyFile(appspec,dest);
        logger.println(""String_Node_Str"" + deploymentGroupName + ""String_Node_Str"");
      }
      if (!appspec.exists()) {
        throw new IllegalArgumentException(""String_Node_Str"" + deploymentGroupName + ""String_Node_Str"");
      }
    }
    logger.println(""String_Node_Str"" + zipFile.getAbsolutePath());
    sourceDirectory.zip(new FileOutputStream(zipFile),new DirScanner.Glob(this.includes,this.excludes));
    if (this.s3prefix.isEmpty()) {
      key=zipFile.getName();
    }
 else {
      key=Util.replaceMacro(this.s3prefix,envVars);
      if (this.s3prefix.endsWith(""String_Node_Str"")) {
        key+=zipFile.getName();
      }
 else {
        key+=""String_Node_Str"" + zipFile.getName();
      }
    }
    logger.println(""String_Node_Str"" + this.s3bucket + ""String_Node_Str""+ key);
    PutObjectResult s3result=aws.s3.putObject(this.s3bucket,key,zipFile);
    S3Location s3Location=new S3Location();
    s3Location.setBucket(this.s3bucket);
    s3Location.setKey(key);
    s3Location.setBundleType(BundleType.Zip);
    s3Location.setETag(s3result.getETag());
    RevisionLocation revisionLocation=new RevisionLocation();
    revisionLocation.setRevisionType(RevisionLocationType.S3);
    revisionLocation.setS3Location(s3Location);
    return revisionLocation;
  }
  finally {
    zipFile.delete();
  }
}"
95791,"private String createDeployment(AWSClients aws,RevisionLocation revisionLocation) throws Exception {
  this.logger.println(""String_Node_Str"" + revisionLocation);
  CreateDeploymentResult createDeploymentResult=aws.codedeploy.createDeployment(new CreateDeploymentRequest().withDeploymentConfigName(this.deploymentConfig).withDeploymentGroupName(this.deploymentGroupName).withApplicationName(this.applicationName).withRevision(revisionLocation).withDescription(""String_Node_Str""));
  return createDeploymentResult.getDeploymentId();
}","private String createDeployment(AWSClients aws,RevisionLocation revisionLocation,String deploymentGroupName) throws Exception {
  this.logger.println(""String_Node_Str"" + revisionLocation);
  CreateDeploymentResult createDeploymentResult=aws.codedeploy.createDeployment(new CreateDeploymentRequest().withDeploymentConfigName(this.deploymentConfig).withDeploymentGroupName(deploymentGroupName).withApplicationName(this.applicationName).withRevision(revisionLocation).withDescription(""String_Node_Str""));
  return createDeploymentResult.getDeploymentId();
}"
95792,"private void verifyCodeDeployApplication(AWSClients aws) throws IllegalArgumentException {
  ListApplicationsResult applications=aws.codedeploy.listApplications();
  if (!applications.getApplications().contains(this.applicationName)) {
    throw new IllegalArgumentException(""String_Node_Str"" + this.applicationName + ""String_Node_Str"");
  }
  ListDeploymentGroupsResult deploymentGroups=aws.codedeploy.listDeploymentGroups(new ListDeploymentGroupsRequest().withApplicationName(this.applicationName));
  if (!deploymentGroups.getDeploymentGroups().contains(this.deploymentGroupName)) {
    throw new IllegalArgumentException(""String_Node_Str"" + this.deploymentGroupName + ""String_Node_Str"");
  }
}","private void verifyCodeDeployApplication(AWSClients aws,String deploymentGroupName) throws IllegalArgumentException {
  ListApplicationsResult applications=aws.codedeploy.listApplications();
  if (!applications.getApplications().contains(this.applicationName)) {
    throw new IllegalArgumentException(""String_Node_Str"" + this.applicationName + ""String_Node_Str"");
  }
  ListDeploymentGroupsResult deploymentGroups=aws.codedeploy.listDeploymentGroups(new ListDeploymentGroupsRequest().withApplicationName(this.applicationName));
  if (!deploymentGroups.getDeploymentGroups().contains(deploymentGroupName)) {
    throw new IllegalArgumentException(""String_Node_Str"" + deploymentGroupName + ""String_Node_Str"");
  }
}"
95793,"@Override public boolean perform(AbstractBuild build,Launcher launcher,BuildListener listener) throws IOException, InterruptedException {
  this.logger=listener.getLogger();
  final boolean buildFailed=build.getResult() == Result.FAILURE;
  if (buildFailed) {
    logger.println(""String_Node_Str"");
    return true;
  }
  AWSClients aws;
  if (""String_Node_Str"".equals(credentials)) {
    if (StringUtils.isEmpty(this.awsAccessKey) && StringUtils.isEmpty(this.awsSecretKey)) {
      aws=AWSClients.fromDefaultCredentialChain(this.region,this.proxyHost,this.proxyPort);
    }
 else {
      aws=AWSClients.fromBasicCredentials(this.region,this.awsAccessKey,this.awsSecretKey,this.proxyHost,this.proxyPort);
    }
  }
 else {
    aws=AWSClients.fromIAMRole(this.region,this.iamRoleArn,this.getDescriptor().getExternalId(),this.proxyHost,this.proxyPort);
  }
  boolean success;
  try {
    Map<String,String> envVars=build.getEnvironment(listener);
    this.deploymentGroupName=Util.replaceMacro(this.deploymentGroupName,envVars);
    verifyCodeDeployApplication(aws);
    String projectName=build.getProject().getName();
    RevisionLocation revisionLocation=zipAndUpload(aws,projectName,getSourceDirectory(build.getWorkspace()),envVars);
    registerRevision(aws,revisionLocation);
    String deploymentId=createDeployment(aws,revisionLocation);
    success=waitForDeployment(aws,deploymentId);
  }
 catch (  Exception e) {
    this.logger.println(""String_Node_Str"");
    this.logger.println(e.getMessage());
    e.printStackTrace(this.logger);
    success=false;
  }
  return success;
}","@Override public boolean perform(AbstractBuild build,Launcher launcher,BuildListener listener) throws IOException, InterruptedException {
  this.logger=listener.getLogger();
  final boolean buildFailed=build.getResult() == Result.FAILURE;
  if (buildFailed) {
    logger.println(""String_Node_Str"");
    return true;
  }
  AWSClients aws;
  if (""String_Node_Str"".equals(credentials)) {
    if (StringUtils.isEmpty(this.awsAccessKey) && StringUtils.isEmpty(this.awsSecretKey)) {
      aws=AWSClients.fromDefaultCredentialChain(this.region,this.proxyHost,this.proxyPort);
    }
 else {
      aws=AWSClients.fromBasicCredentials(this.region,this.awsAccessKey,this.awsSecretKey,this.proxyHost,this.proxyPort);
    }
  }
 else {
    aws=AWSClients.fromIAMRole(this.region,this.iamRoleArn,this.getDescriptor().getExternalId(),this.proxyHost,this.proxyPort);
  }
  boolean success;
  try {
    Map<String,String> envVars=build.getEnvironment(listener);
    String deploymentGroupName=Util.replaceMacro(this.deploymentGroupName,envVars);
    verifyCodeDeployApplication(aws,deploymentGroupName);
    String projectName=build.getProject().getName();
    RevisionLocation revisionLocation=zipAndUpload(aws,projectName,getSourceDirectory(build.getWorkspace()),envVars,deploymentGroupName);
    registerRevision(aws,revisionLocation);
    String deploymentId=createDeployment(aws,revisionLocation,deploymentGroupName);
    success=waitForDeployment(aws,deploymentId);
  }
 catch (  Exception e) {
    this.logger.println(""String_Node_Str"");
    this.logger.println(e.getMessage());
    e.printStackTrace(this.logger);
    success=false;
  }
  return success;
}"
95794,"/** 
 * Leader A and follower B commit 5 entries, then snapshot A. Then C comes up and should get the 5 committed entries as well, as a snapshot
 */
public void testInstallSnapshotInC() throws Exception {
  init(true);
  close(true,true,c);
  for (int i=1; i <= 5; i++)   as.put(i,i);
  assertSame(as,bs);
  as.snapshot();
  c=create(""String_Node_Str"",true);
  cs=new ReplicatedStateMachine<>(c);
  c.connect(CLUSTER);
  Util.waitUntilAllChannelsHaveSameSize(10000,500,a,b,c);
  assertSame(as,bs,cs);
}","/** 
 * Leader A and follower B commit 5 entries, then snapshot A. Then C comes up and should get the 5 committed entries as well, as a snapshot
 */
public void testInstallSnapshotInC() throws Exception {
  init(true);
  close(true,true,c);
  for (int i=1; i <= 5; i++)   as.put(i,i);
  assertSame(as,bs);
  as.snapshot();
  c=create(""String_Node_Str"",true);
  cs=new ReplicatedStateMachine<>(c);
  c.connect(CLUSTER);
  Util.waitUntilAllChannelsHaveSameView(10000,500,a,b,c);
  assertSame(as,bs,cs);
}"
95795,"/** 
 * Leader A and followers B and C commit entries 1-2. Then C leaves and A and B commit entries 3-5. When C rejoins, it should get log entries 3-5 as well.
 */
public void testCatchingUp() throws Exception {
  init(true);
  for (int i=1; i <= 2; i++)   as.put(i,i);
  assertSame(as,bs,cs);
  close(true,true,c);
  for (int i=3; i <= 5; i++)   as.put(i,i);
  assertSame(as,bs);
  c=create(""String_Node_Str"",true);
  cs=new ReplicatedStateMachine<>(c);
  c.connect(CLUSTER);
  Util.waitUntilAllChannelsHaveSameSize(10000,500,a,b,c);
  assertSame(as,bs,cs);
}","/** 
 * Leader A and followers B and C commit entries 1-2. Then C leaves and A and B commit entries 3-5. When C rejoins, it should get log entries 3-5 as well.
 */
public void testCatchingUp() throws Exception {
  init(true);
  for (int i=1; i <= 2; i++)   as.put(i,i);
  assertSame(as,bs,cs);
  close(true,true,c);
  for (int i=3; i <= 5; i++)   as.put(i,i);
  assertSame(as,bs);
  c=create(""String_Node_Str"",true);
  cs=new ReplicatedStateMachine<>(c);
  c.connect(CLUSTER);
  Util.waitUntilAllChannelsHaveSameView(10000,500,a,b,c);
  assertSame(as,bs,cs);
}"
95796,"@BeforeMethod protected void init() throws Exception {
  a=create(""String_Node_Str"");
  a.connect(CLUSTER);
  b=create(""String_Node_Str"");
  b.connect(CLUSTER);
  c=create(""String_Node_Str"");
  c.connect(CLUSTER);
  Util.waitUntilAllChannelsHaveSameSize(10000,500,a,b,c);
}","@BeforeMethod protected void init() throws Exception {
  a=create(""String_Node_Str"");
  a.connect(CLUSTER);
  b=create(""String_Node_Str"");
  b.connect(CLUSTER);
  c=create(""String_Node_Str"");
  c.connect(CLUSTER);
  Util.waitUntilAllChannelsHaveSameView(10000,500,a,b,c);
}"
95797,"@Override public void truncate(int upto_index){
  if ((upto_index < firstApplied) || (upto_index > lastApplied)) {
    return;
  }
  WriteBatch batch=null;
  try {
    batch=db.createWriteBatch();
    for (int index=firstApplied; index < upto_index; index++) {
      batch.delete(db.get(fromIntToByteArray(index)));
    }
    LogEntry last=getLogEntry(upto_index);
    if (last == null) {
      updateCurrentTerm(0,batch);
    }
 else {
      updateCurrentTerm(last.term,batch);
    }
    firstApplied=upto_index;
    batch.put(FIRSTAPPLIED,fromIntToByteArray(upto_index));
  }
  finally {
    Util.close(batch);
  }
}","@Override public void truncate(int upto_index){
  if ((upto_index < firstApplied) || (upto_index > lastApplied)) {
    return;
  }
  WriteBatch batch=null;
  try {
    batch=db.createWriteBatch();
    for (int index=firstApplied; index < upto_index; index++) {
      batch.delete(db.get(fromIntToByteArray(index)));
    }
    LogEntry last=getLogEntry(upto_index);
    firstApplied=upto_index;
    batch.put(FIRSTAPPLIED,fromIntToByteArray(upto_index));
    db.write(batch);
  }
  finally {
    Util.close(batch);
  }
}"
95798,"@Override public void deleteAllEntriesStartingFrom(int start_index){
  if ((start_index < firstApplied) || (start_index > lastApplied)) {
    return;
  }
  WriteBatch batch=null;
  try {
    batch=db.createWriteBatch();
    for (int index=start_index; index <= lastApplied; index++) {
      batch.delete(db.get(fromIntToByteArray(index)));
    }
    LogEntry last=getLogEntry(start_index - 1);
    if (last == null) {
      updateCurrentTerm(0,batch);
    }
 else {
      updateCurrentTerm(last.term,batch);
    }
    updateLastApplied(start_index - 1,batch);
  }
  finally {
    Util.close(batch);
  }
}","@Override public void deleteAllEntriesStartingFrom(int start_index){
  if ((start_index < firstApplied) || (start_index > lastApplied)) {
    return;
  }
  WriteBatch batch=null;
  try {
    batch=db.createWriteBatch();
    for (int index=start_index; index <= lastApplied; index++) {
      batch.delete(db.get(fromIntToByteArray(index)));
    }
    LogEntry last=getLogEntry(start_index - 1);
    if (last == null) {
      updateCurrentTerm(0,batch);
    }
 else {
      updateCurrentTerm(last.term,batch);
    }
    updateLastApplied(start_index - 1,batch);
    db.write(batch);
  }
  finally {
    Util.close(batch);
  }
}"
95799,"public static void main(String[] args) throws Exception {
  LevelDBLog log=new LevelDBLog();
  Address addr=Util.createRandomAddress(""String_Node_Str"");
  log.init(""String_Node_Str"",null);
  log.append(1,true,new LogEntry(1,""String_Node_Str"".getBytes()));
  log.append(2,true,new LogEntry(2,""String_Node_Str"".getBytes()));
  log.append(3,true,new LogEntry(3,""String_Node_Str"".getBytes()));
  log.append(3,true,new LogEntry(3,""String_Node_Str"".getBytes()));
  log.forEach(null,0,3);
  log.printMetadata();
  log.close();
  log.delete();
}","public static void main(String[] args) throws Exception {
  LevelDBLog log=new LevelDBLog();
  Address addr=Util.createRandomAddress(""String_Node_Str"");
  log.init(""String_Node_Str"",null);
  log.printMetadata();
  log.close();
}"
95800,"public void testDeleteEntriesFromFirst(Log log) throws Exception {
  this.log=log;
  log.init(filename,null);
  byte[] buf=new byte[10];
  log.append(1,false,new LogEntry(1,buf));
  log.append(2,false,new LogEntry(1,buf));
  log.append(3,false,new LogEntry(1,buf));
  log.append(4,false,new LogEntry(2,buf));
  log.append(5,false,new LogEntry(2,buf));
  log.append(6,false,new LogEntry(2,buf));
  log.append(7,false,new LogEntry(3,buf));
  log.append(8,false,new LogEntry(3,buf));
  log.append(9,false,new LogEntry(3,buf));
  log.append(10,false,new LogEntry(3,buf));
  log.append(11,false,new LogEntry(3,buf));
  log.commitIndex(11);
  log.deleteAllEntriesStartingFrom(1);
  assertEquals(log.lastApplied(),0);
  assertEquals(log.currentTerm(),0);
}","public void testDeleteEntriesFromFirst(Log log) throws Exception {
  this.log=log;
  log.init(filename,null);
  byte[] buf=new byte[10];
  log.append(1,false,new LogEntry(1,buf));
  log.append(2,false,new LogEntry(1,buf));
  log.append(3,false,new LogEntry(1,buf));
  log.append(4,false,new LogEntry(2,buf));
  log.append(5,false,new LogEntry(2,buf));
  log.append(6,false,new LogEntry(2,buf));
  log.append(7,false,new LogEntry(3,buf));
  log.append(8,false,new LogEntry(3,buf));
  log.append(9,false,new LogEntry(3,buf));
  log.append(10,false,new LogEntry(3,buf));
  log.append(11,false,new LogEntry(3,buf));
  log.commitIndex(11);
  log.deleteAllEntriesStartingFrom(1);
  assertEquals(log.firstApplied(),1);
  assertEquals(log.lastApplied(),0);
  assertEquals(log.currentTerm(),0);
}"
95801,"public void testDeleteEntriesInTheMiddle(Log log) throws Exception {
  this.log=log;
  log.init(filename,null);
  byte[] buf=new byte[10];
  log.append(1,false,new LogEntry(1,buf));
  log.append(2,false,new LogEntry(1,buf));
  log.append(3,false,new LogEntry(1,buf));
  log.append(4,false,new LogEntry(2,buf));
  log.append(5,false,new LogEntry(2,buf));
  log.append(6,false,new LogEntry(2,buf));
  log.append(7,false,new LogEntry(3,buf));
  log.append(8,false,new LogEntry(3,buf));
  log.append(9,false,new LogEntry(3,buf));
  log.append(10,false,new LogEntry(3,buf));
  log.append(11,false,new LogEntry(3,buf));
  log.commitIndex(11);
  log.deleteAllEntriesStartingFrom(6);
  assertEquals(log.lastApplied(),5);
  assertEquals(log.currentTerm(),2);
}","public void testDeleteEntriesInTheMiddle(Log log) throws Exception {
  this.log=log;
  log.init(filename,null);
  byte[] buf=new byte[10];
  log.append(1,false,new LogEntry(1,buf));
  log.append(2,false,new LogEntry(1,buf));
  log.append(3,false,new LogEntry(1,buf));
  log.append(4,false,new LogEntry(2,buf));
  log.append(5,false,new LogEntry(2,buf));
  log.append(6,false,new LogEntry(2,buf));
  log.append(7,false,new LogEntry(3,buf));
  log.append(8,false,new LogEntry(3,buf));
  log.append(9,false,new LogEntry(3,buf));
  log.append(10,false,new LogEntry(3,buf));
  log.append(11,false,new LogEntry(3,buf));
  log.commitIndex(11);
  log.deleteAllEntriesStartingFrom(6);
  assertEquals(log.firstApplied(),1);
  assertEquals(log.lastApplied(),5);
  assertEquals(log.currentTerm(),2);
}"
95802,"public void testTruncateInTheMiddle(Log log) throws Exception {
  this.log=log;
  log.init(filename,null);
  byte[] buf=new byte[10];
  log.append(1,false,new LogEntry(1,buf));
  log.append(2,false,new LogEntry(1,buf));
  log.append(3,false,new LogEntry(1,buf));
  log.append(4,false,new LogEntry(2,buf));
  log.append(5,false,new LogEntry(2,buf));
  log.append(6,false,new LogEntry(2,buf));
  log.append(7,false,new LogEntry(3,buf));
  log.append(8,false,new LogEntry(3,buf));
  log.append(9,false,new LogEntry(3,buf));
  log.append(10,false,new LogEntry(3,buf));
  log.append(11,false,new LogEntry(3,buf));
  log.commitIndex(11);
  log.truncate(7);
  assertEquals(log.lastApplied(),11);
  assertEquals(log.currentTerm(),3);
  assertEquals(log.firstApplied(),7);
}","public void testTruncateInTheMiddle(Log log) throws Exception {
  this.log=log;
  log.init(filename,null);
  byte[] buf=new byte[10];
  log.append(1,false,new LogEntry(1,buf));
  log.append(2,false,new LogEntry(1,buf));
  log.append(3,false,new LogEntry(1,buf));
  log.append(4,false,new LogEntry(2,buf));
  log.append(5,false,new LogEntry(2,buf));
  log.append(6,false,new LogEntry(2,buf));
  log.append(7,false,new LogEntry(3,buf));
  log.append(8,false,new LogEntry(3,buf));
  log.append(9,false,new LogEntry(3,buf));
  log.append(10,false,new LogEntry(3,buf));
  log.append(11,false,new LogEntry(3,buf));
  log.commitIndex(11);
  log.truncate(6);
  assertEquals(log.lastApplied(),11);
  assertEquals(log.currentTerm(),3);
  assertEquals(log.firstApplied(),6);
}"
95803,"@Override public void truncate(int upto_index){
  if ((upto_index < firstApplied) || (upto_index > lastApplied)) {
    return;
  }
  WriteBatch batch=null;
  try {
    batch=db.createWriteBatch();
    for (int index=firstApplied; index < upto_index; index++) {
      batch.delete(db.get(fromIntToByteArray(index)));
    }
    LogEntry last=getLogEntry(upto_index);
    firstApplied=upto_index;
    batch.put(FIRSTAPPLIED,fromIntToByteArray(upto_index));
    db.write(batch);
  }
  finally {
    Util.close(batch);
  }
}","@Override public void truncate(int upto_index){
  if ((upto_index < firstApplied) || (upto_index > lastApplied)) {
    return;
  }
  WriteBatch batch=null;
  try {
    batch=db.createWriteBatch();
    for (int index=firstApplied; index < upto_index; index++) {
      batch.delete(fromIntToByteArray(index));
    }
    firstApplied=upto_index;
    batch.put(FIRSTAPPLIED,fromIntToByteArray(upto_index));
    db.write(batch);
  }
  finally {
    Util.close(batch);
  }
}"
95804,"@Override public void deleteAllEntriesStartingFrom(int start_index){
  if ((start_index < firstApplied) || (start_index > lastApplied)) {
    return;
  }
  WriteBatch batch=null;
  try {
    batch=db.createWriteBatch();
    for (int index=start_index; index <= lastApplied; index++) {
      batch.delete(db.get(fromIntToByteArray(index)));
    }
    LogEntry last=getLogEntry(start_index - 1);
    if (last == null) {
      updateCurrentTerm(0,batch);
    }
 else {
      updateCurrentTerm(last.term,batch);
    }
    updateLastApplied(start_index - 1,batch);
    db.write(batch);
  }
  finally {
    Util.close(batch);
  }
}","@Override public void deleteAllEntriesStartingFrom(int start_index){
  if ((start_index < firstApplied) || (start_index > lastApplied)) {
    return;
  }
  WriteBatch batch=null;
  try {
    batch=db.createWriteBatch();
    for (int index=start_index; index <= lastApplied; index++) {
      batch.delete(fromIntToByteArray(index));
    }
    LogEntry last=getLogEntry(start_index - 1);
    if (last == null) {
      updateCurrentTerm(0,batch);
    }
 else {
      updateCurrentTerm(last.term,batch);
    }
    updateLastApplied(start_index - 1,batch);
    db.write(batch);
  }
  finally {
    Util.close(batch);
  }
}"
95805,"public void testTruncateInTheMiddle(Log log) throws Exception {
  this.log=log;
  log.init(filename,null);
  byte[] buf=new byte[10];
  log.append(1,false,new LogEntry(1,buf));
  log.append(2,false,new LogEntry(1,buf));
  log.append(3,false,new LogEntry(1,buf));
  log.append(4,false,new LogEntry(2,buf));
  log.append(5,false,new LogEntry(2,buf));
  log.append(6,false,new LogEntry(2,buf));
  log.append(7,false,new LogEntry(3,buf));
  log.append(8,false,new LogEntry(3,buf));
  log.append(9,false,new LogEntry(3,buf));
  log.append(10,false,new LogEntry(3,buf));
  log.append(11,false,new LogEntry(3,buf));
  log.commitIndex(11);
  log.truncate(6);
  assertEquals(log.lastApplied(),11);
  assertEquals(log.currentTerm(),3);
  assertEquals(log.firstApplied(),6);
}","public void testTruncateInTheMiddle(Log log) throws Exception {
  this.log=log;
  log.init(filename,null);
  byte[] buf=new byte[10];
  log.append(1,false,new LogEntry(1,buf));
  log.append(2,false,new LogEntry(1,buf));
  log.append(3,false,new LogEntry(1,buf));
  log.append(4,false,new LogEntry(2,buf));
  log.append(5,false,new LogEntry(2,buf));
  log.append(6,false,new LogEntry(2,buf));
  log.append(7,false,new LogEntry(3,buf));
  log.append(8,false,new LogEntry(3,buf));
  log.append(9,false,new LogEntry(3,buf));
  log.append(10,false,new LogEntry(3,buf));
  log.append(11,false,new LogEntry(3,buf));
  log.commitIndex(11);
  log.truncate(6);
  assertEquals(log.lastApplied(),11);
  assertEquals(log.currentTerm(),3);
  assertEquals(log.firstApplied(),6);
  for (int i=1; i <= 5; i++)   assertNull(log.get(i));
}"
95806,"@Override public void init(String log_name,Map<String,String> args) throws Exception {
  Logger debugLogger=new Logger(){
    public void log(    String message){
      System.out.println(message);
    }
  }
;
  Options options=new Options();
  options.createIfMissing(true);
  options.logger(debugLogger);
  this.dbFileName=new File(log_name);
  try {
    db=factory.open(dbFileName,options);
    try (DBIterator iterator=db.iterator()){
      iterator.seekToFirst();
      if (!iterator.hasNext()) {
        WriteBatch batch=db.createWriteBatch();
        try {
          batch.put(LASTAPPLIED,fromIntToByteArray(0));
          batch.put(CURRENTTERM,fromIntToByteArray(0));
          batch.put(COMMITINDEX,fromIntToByteArray(0));
          db.write(batch);
        }
 catch (        Exception ex) {
          ex.printStackTrace();
        }
 finally {
          try {
            batch.close();
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
        }
      }
    }
   }
 catch (  IOException e) {
    e.printStackTrace();
  }
  initCommitAndTermFromLog();
}","@Override public void init(String log_name,Map<String,String> args) throws Exception {
  Logger debugLogger=new Logger(){
    public void log(    String message){
      System.out.println(message);
    }
  }
;
  Options options=new Options();
  options.createIfMissing(true);
  this.dbFileName=new File(log_name);
  db=factory.open(dbFileName,options);
  WriteBatch batch=db.createWriteBatch();
  try {
    batch.put(FIRSTAPPLIED,fromIntToByteArray(-1));
    batch.put(LASTAPPLIED,fromIntToByteArray(0));
    batch.put(CURRENTTERM,fromIntToByteArray(0));
    batch.put(COMMITINDEX,fromIntToByteArray(0));
    db.write(batch);
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
 finally {
    try {
      batch.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  initCommitAndTermFromLog();
}"
95807,"@Override public void forEach(Function function){
  this.forEach(function,1,Integer.MAX_VALUE);
}","@Override public void forEach(Function function){
  if (firstApplied == -1) {
    return;
  }
  this.forEach(function,firstApplied,lastApplied);
}"
95808,"private void initCommitAndTermFromLog() throws Exception {
  currentTerm=fromByteArrayToInt(db.get(CURRENTTERM));
  commitIndex=fromByteArrayToInt(db.get(COMMITINDEX));
  lastApplied=fromByteArrayToInt(db.get(LASTAPPLIED));
}","private void initCommitAndTermFromLog() throws Exception {
  firstApplied=fromByteArrayToInt(db.get(FIRSTAPPLIED));
  lastApplied=fromByteArrayToInt(db.get(LASTAPPLIED));
  currentTerm=fromByteArrayToInt(db.get(CURRENTTERM));
  commitIndex=fromByteArrayToInt(db.get(COMMITINDEX));
}"
95809,"@Override public int first(){
  DBIterator iterator=db.iterator();
  try {
    iterator.seek(VOTEDFOR);
    byte[] keyBytes=iterator.peekNext().getKey();
    return new Integer(asString(keyBytes));
  }
  finally {
    try {
      iterator.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}","@Override public int first(){
  if (firstApplied == -1) {
    return firstApplied;
  }
  DBIterator iterator=db.iterator();
  try {
    iterator.seek(FIRSTAPPLIED);
    byte[] keyBytes=iterator.peekNext().getValue();
    return fromByteArrayToInt(keyBytes);
  }
  finally {
    try {
      iterator.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
}"
95810,"private void append(LogEntry[] entries){
  WriteBatch batch=db.createWriteBatch();
  for (  LogEntry entry : entries) {
    try {
      byte[] lastAppliedBytes=fromIntToByteArray(lastApplied);
      batch.put(lastAppliedBytes,Util.streamableToByteBuffer(entry));
      currentTerm=entry.term;
      batch.put(LASTAPPLIED,lastAppliedBytes);
      batch.put(CURRENTTERM,fromIntToByteArray(currentTerm));
      lastApplied++;
      db.write(batch);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
 finally {
      try {
        batch.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}","private void append(LogEntry[] entries){
  WriteBatch batch=db.createWriteBatch();
  for (  LogEntry entry : entries) {
    try {
      lastApplied++;
      if (firstApplied == -1) {
        firstApplied=lastApplied;
        batch.put(FIRSTAPPLIED,fromIntToByteArray(firstApplied));
      }
      byte[] lastAppliedBytes=fromIntToByteArray(lastApplied);
      batch.put(lastAppliedBytes,Util.streamableToByteBuffer(entry));
      currentTerm=entry.term;
      batch.put(LASTAPPLIED,lastAppliedBytes);
      batch.put(CURRENTTERM,fromIntToByteArray(currentTerm));
      db.write(batch);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
 finally {
      try {
        batch.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}"
95811,"public void testFields(Log log) throws Exception {
  Address addr=Util.createRandomAddress(""String_Node_Str"");
  this.log=log;
  log.init(filename,null);
  log.currentTerm(22);
  int current_term=log.currentTerm();
  assertEquals(current_term,22);
  log.votedFor(addr);
  Address voted_for=log.votedFor();
  assertEquals(addr,voted_for);
  log.close();
  log.init(filename,null);
  current_term=log.currentTerm();
  assertEquals(current_term,22);
  voted_for=log.votedFor();
  assertEquals(addr,voted_for);
  log.delete();
  log.close();
  log.init(filename,null);
  current_term=log.currentTerm();
  assertEquals(current_term,0);
  voted_for=log.votedFor();
  assertNull(voted_for);
}","public void testFields(Log log) throws Exception {
  Address addr=Util.createRandomAddress(""String_Node_Str"");
  this.log=log;
  log.init(filename,null);
  log.currentTerm(22);
  int current_term=log.currentTerm();
  assertEquals(current_term,22);
  log.votedFor(addr);
  Address voted_for=log.votedFor();
  assertEquals(addr,voted_for);
  log.close();
  log.init(filename,null);
  current_term=log.currentTerm();
  assertEquals(current_term,22);
  voted_for=log.votedFor();
  assertEquals(addr,voted_for);
  log.close();
  log.delete();
  log.init(filename,null);
  current_term=log.currentTerm();
  assertEquals(current_term,0);
  voted_for=log.votedFor();
  assertNull(voted_for);
}"
95812,"public void testAppendOnLeader(Log log) throws Exception {
  this.log=log;
  log.init(filename,null);
  byte[] buf=new byte[10];
  log.append(1,false,new LogEntry(5,buf));
  log.append(2,false,new LogEntry(5,buf));
  assertEquals(log.lastApplied(),2);
  assertEquals(log.commitIndex(),0);
}","public void testAppendOnLeader(Log log) throws Exception {
  this.log=log;
  log.init(filename,null);
  byte[] buf=new byte[10];
  log.append(1,false,new LogEntry(5,buf));
  log.append(2,false,new LogEntry(5,buf));
  assertEquals(log.lastApplied(),2);
  assertEquals(log.commitIndex(),0);
  assertEquals(log.first(),1);
}"
95813,"/** 
 * Creates a collection layout from the given datasets indexed by label.
 * @param graphHeads Mapping from label to graph head dataset
 * @param vertices Mapping from label to vertex dataset
 * @param edges Mapping from label to edge dataset
 * @return GVE layout
 */
GVELayout create(Map<String,DataSet<GraphHead>> graphHeads,Map<String,DataSet<Vertex>> vertices,Map<String,DataSet<Edge>> edges){
  Objects.requireNonNull(graphHeads);
  Objects.requireNonNull(vertices);
  Objects.requireNonNull(edges);
  return new GVELayout(graphHeads.values().stream().reduce(DataSet::union).orElseThrow(() -> new RuntimeException(""String_Node_Str"")),vertices.values().stream().reduce(DataSet::union).orElseThrow(() -> new RuntimeException(""String_Node_Str"")),edges.values().stream().reduce(DataSet::union).orElseThrow(() -> new RuntimeException(""String_Node_Str"")));
}","/** 
 * Creates a collection layout from the given datasets indexed by label.
 * @param graphHeads Mapping from label to graph head dataset
 * @param vertices Mapping from label to vertex dataset
 * @param edges Mapping from label to edge dataset
 * @return GVE layout
 */
GVELayout create(Map<String,DataSet<GraphHead>> graphHeads,Map<String,DataSet<Vertex>> vertices,Map<String,DataSet<Edge>> edges){
  Objects.requireNonNull(graphHeads);
  Objects.requireNonNull(vertices);
  Objects.requireNonNull(edges);
  return new GVELayout(graphHeads.values().stream().reduce(DataSet::union).orElseThrow(() -> new RuntimeException(""String_Node_Str"")),vertices.values().stream().reduce(DataSet::union).orElseThrow(() -> new RuntimeException(""String_Node_Str"")),edges.values().stream().reduce(createEdgeDataSet(Collections.EMPTY_LIST),DataSet::union));
}"
95814,"/** 
 * Adds two numerical property values.
 * @param aValue first value
 * @param bValue second value
 * @return first value + second value
 */
public static PropertyValue add(PropertyValue aValue,PropertyValue bValue){
  int aType=checkNumericalAndGetType(aValue);
  int bType=checkNumericalAndGetType(bValue);
  boolean sameType=aType == bType;
  int returnType=sameType ? aType : maxType(aType,bType);
  if (returnType == SHORT) {
    aValue.setInt(aValue.getShort() + bValue.getShort());
  }
 else   if (returnType == INT) {
    int a;
    int b;
    if (sameType) {
      a=aValue.getInt();
      b=bValue.getInt();
    }
 else {
      a=aType == INT ? aValue.getInt() : aValue.getShort();
      b=aType == INT ? bValue.getInt() : bValue.getShort();
    }
    aValue.setInt(a + b);
  }
 else   if (returnType == FLOAT) {
    float a;
    float b;
    if (sameType) {
      a=aValue.getFloat();
      b=bValue.getFloat();
    }
 else {
      a=aType == FLOAT ? aValue.getFloat() : aValue.getInt();
      b=bType == FLOAT ? bValue.getFloat() : bValue.getInt();
    }
    aValue.setFloat(a + b);
  }
 else   if (returnType == LONG) {
    long a;
    long b;
    if (sameType) {
      a=aValue.getLong();
      b=bValue.getLong();
    }
 else {
      a=aType == LONG ? aValue.getLong() : aValue.getInt();
      b=bType == LONG ? bValue.getLong() : bValue.getInt();
    }
    aValue.setLong(a + b);
  }
 else   if (returnType == DOUBLE) {
    double a;
    double b;
    if (sameType) {
      a=aValue.getDouble();
      b=bValue.getDouble();
    }
 else {
      a=aType == DOUBLE ? aValue.getDouble() : doubleValue(aValue,aType);
      b=bType == DOUBLE ? bValue.getDouble() : doubleValue(bValue,bType);
    }
    aValue.setDouble(a + b);
  }
 else {
    BigDecimal a;
    BigDecimal b;
    if (sameType) {
      a=aValue.getBigDecimal();
      b=bValue.getBigDecimal();
    }
 else {
      a=aType == BIG_DECIMAL ? aValue.getBigDecimal() : bigDecimalValue(aValue,aType);
      b=bType == BIG_DECIMAL ? bValue.getBigDecimal() : bigDecimalValue(bValue,bType);
    }
    aValue.setBigDecimal(a.add(b));
  }
  return aValue;
}","/** 
 * Adds two numerical property values.
 * @param aValue first value
 * @param bValue second value
 * @return first value + second value
 */
public static PropertyValue add(PropertyValue aValue,PropertyValue bValue){
  int aType=checkNumericalAndGetType(aValue);
  int bType=checkNumericalAndGetType(bValue);
  boolean sameType=aType == bType;
  int returnType=maxType(aType,bType);
  if (returnType == INT) {
    int a=aType == INT ? aValue.getInt() : aValue.getShort();
    int b=bType == INT ? bValue.getInt() : bValue.getShort();
    aValue.setInt(a + b);
  }
 else   if (returnType == FLOAT) {
    float a;
    float b;
    if (sameType) {
      a=aValue.getFloat();
      b=bValue.getFloat();
    }
 else {
      a=aType == FLOAT ? aValue.getFloat() : floatValue(aValue,aType);
      b=bType == FLOAT ? bValue.getFloat() : floatValue(bValue,bType);
    }
    aValue.setFloat(a + b);
  }
 else   if (returnType == LONG) {
    long a;
    long b;
    if (sameType) {
      a=aValue.getLong();
      b=bValue.getLong();
    }
 else {
      a=aType == LONG ? aValue.getLong() : longValue(aValue,aType);
      b=bType == LONG ? bValue.getLong() : longValue(bValue,bType);
    }
    aValue.setLong(a + b);
  }
 else   if (returnType == DOUBLE) {
    double a;
    double b;
    if (sameType) {
      a=aValue.getDouble();
      b=bValue.getDouble();
    }
 else {
      a=aType == DOUBLE ? aValue.getDouble() : doubleValue(aValue,aType);
      b=bType == DOUBLE ? bValue.getDouble() : doubleValue(bValue,bType);
    }
    aValue.setDouble(a + b);
  }
 else {
    BigDecimal a;
    BigDecimal b;
    if (sameType) {
      a=aValue.getBigDecimal();
      b=bValue.getBigDecimal();
    }
 else {
      a=aType == BIG_DECIMAL ? aValue.getBigDecimal() : bigDecimalValue(aValue,aType);
      b=bType == BIG_DECIMAL ? bValue.getBigDecimal() : bigDecimalValue(bValue,bType);
    }
    aValue.setBigDecimal(a.add(b));
  }
  return aValue;
}"
95815,"/** 
 * Compares two numerical property values and returns true, if the first one is smaller.
 * @param aValue first value
 * @param bValue second value
 * @return a < b
 */
private static boolean isLessOrEqualThan(PropertyValue aValue,PropertyValue bValue){
  int aType=checkNumericalAndGetType(aValue);
  int bType=checkNumericalAndGetType(bValue);
  boolean sameType=aType == bType;
  int returnType=sameType ? aType : maxType(aType,bType);
  boolean aIsLessOrEqual;
  if (returnType == SHORT) {
    aIsLessOrEqual=aValue.getShort() <= bValue.getShort();
  }
 else   if (returnType == INT) {
    int a;
    int b;
    if (sameType) {
      a=aValue.getInt();
      b=bValue.getInt();
    }
 else {
      a=aType == INT ? aValue.getInt() : aValue.getShort();
      b=aType == INT ? bValue.getInt() : bValue.getShort();
    }
    aIsLessOrEqual=a <= b;
  }
 else   if (returnType == FLOAT) {
    float a;
    float b;
    if (sameType) {
      a=aValue.getFloat();
      b=bValue.getFloat();
    }
 else {
      a=aType == FLOAT ? aValue.getFloat() : aValue.getInt();
      b=bType == FLOAT ? bValue.getFloat() : bValue.getInt();
    }
    aIsLessOrEqual=a <= b;
  }
 else   if (returnType == LONG) {
    long a;
    long b;
    if (sameType) {
      a=aValue.getLong();
      b=bValue.getLong();
    }
 else {
      a=aType == LONG ? aValue.getLong() : aValue.getInt();
      b=bType == LONG ? bValue.getLong() : bValue.getInt();
    }
    aIsLessOrEqual=a <= b;
  }
 else   if (returnType == DOUBLE) {
    double a;
    double b;
    if (sameType) {
      a=aValue.getDouble();
      b=bValue.getDouble();
    }
 else {
      a=aType == DOUBLE ? aValue.getDouble() : doubleValue(aValue,aType);
      b=bType == DOUBLE ? bValue.getDouble() : doubleValue(bValue,bType);
    }
    aIsLessOrEqual=a <= b;
  }
 else {
    BigDecimal a;
    BigDecimal b;
    if (sameType) {
      a=aValue.getBigDecimal();
      b=bValue.getBigDecimal();
    }
 else {
      a=aType == BIG_DECIMAL ? aValue.getBigDecimal() : bigDecimalValue(aValue,aType);
      b=bType == BIG_DECIMAL ? bValue.getBigDecimal() : bigDecimalValue(bValue,bType);
    }
    aIsLessOrEqual=a.compareTo(b) <= 0;
  }
  return aIsLessOrEqual;
}","/** 
 * Compares two numerical property values and returns true, if the first one is smaller.
 * @param aValue first value
 * @param bValue second value
 * @return a < b
 */
private static boolean isLessOrEqualThan(PropertyValue aValue,PropertyValue bValue){
  int aType=checkNumericalAndGetType(aValue);
  int bType=checkNumericalAndGetType(bValue);
  boolean sameType=aType == bType;
  int returnType=maxType(aType,bType);
  boolean aIsLessOrEqual;
  if (returnType == INT) {
    int a=aType == INT ? aValue.getInt() : aValue.getShort();
    int b=bType == INT ? bValue.getInt() : bValue.getShort();
    aIsLessOrEqual=a <= b;
  }
 else   if (returnType == FLOAT) {
    float a;
    float b;
    if (sameType) {
      a=aValue.getFloat();
      b=bValue.getFloat();
    }
 else {
      a=aType == FLOAT ? aValue.getFloat() : floatValue(aValue,aType);
      b=bType == FLOAT ? bValue.getFloat() : floatValue(bValue,bType);
    }
    aIsLessOrEqual=a <= b;
  }
 else   if (returnType == LONG) {
    long a;
    long b;
    if (sameType) {
      a=aValue.getLong();
      b=bValue.getLong();
    }
 else {
      a=aType == LONG ? aValue.getLong() : longValue(aValue,aType);
      b=bType == LONG ? bValue.getLong() : longValue(bValue,bType);
    }
    aIsLessOrEqual=a <= b;
  }
 else   if (returnType == DOUBLE) {
    double a;
    double b;
    if (sameType) {
      a=aValue.getDouble();
      b=bValue.getDouble();
    }
 else {
      a=aType == DOUBLE ? aValue.getDouble() : doubleValue(aValue,aType);
      b=bType == DOUBLE ? bValue.getDouble() : doubleValue(bValue,bType);
    }
    aIsLessOrEqual=a <= b;
  }
 else {
    BigDecimal a;
    BigDecimal b;
    if (sameType) {
      a=aValue.getBigDecimal();
      b=bValue.getBigDecimal();
    }
 else {
      a=aType == BIG_DECIMAL ? aValue.getBigDecimal() : bigDecimalValue(aValue,aType);
      b=bType == BIG_DECIMAL ? bValue.getBigDecimal() : bigDecimalValue(bValue,bType);
    }
    aIsLessOrEqual=a.compareTo(b) <= 0;
  }
  return aIsLessOrEqual;
}"
95816,"/** 
 * Multiplies two numerical property values.
 * @param aValue first value
 * @param bValue second value
 * @return first value * second value
 */
public static PropertyValue multiply(PropertyValue aValue,PropertyValue bValue){
  int aType=checkNumericalAndGetType(aValue);
  int bType=checkNumericalAndGetType(bValue);
  boolean sameType=aType == bType;
  int returnType=sameType ? aType : maxType(aType,bType);
  if (returnType == SHORT) {
    aValue.setInt(aValue.getShort() * bValue.getShort());
  }
 else   if (returnType == INT) {
    int a;
    int b;
    if (sameType) {
      a=aValue.getInt();
      b=bValue.getInt();
    }
 else {
      a=aType == INT ? aValue.getInt() : aValue.getShort();
      b=aType == INT ? bValue.getInt() : bValue.getShort();
    }
    aValue.setInt(a * b);
  }
 else   if (returnType == FLOAT) {
    float a;
    float b;
    if (sameType) {
      a=aValue.getFloat();
      b=bValue.getFloat();
    }
 else {
      a=aType == FLOAT ? aValue.getFloat() : aValue.getInt();
      b=bType == FLOAT ? bValue.getFloat() : bValue.getInt();
    }
    aValue.setFloat(a * b);
  }
 else   if (returnType == LONG) {
    long a;
    long b;
    if (sameType) {
      a=aValue.getLong();
      b=bValue.getLong();
    }
 else {
      a=aType == LONG ? aValue.getLong() : aValue.getInt();
      b=bType == LONG ? bValue.getLong() : bValue.getInt();
    }
    aValue.setLong(a * b);
  }
 else   if (returnType == DOUBLE) {
    double a;
    double b;
    if (sameType) {
      a=aValue.getDouble();
      b=bValue.getDouble();
    }
 else {
      a=aType == DOUBLE ? aValue.getDouble() : doubleValue(aValue,aType);
      b=bType == DOUBLE ? bValue.getDouble() : doubleValue(bValue,bType);
    }
    aValue.setDouble(a * b);
  }
 else {
    BigDecimal a;
    BigDecimal b;
    if (sameType) {
      a=aValue.getBigDecimal();
      b=bValue.getBigDecimal();
    }
 else {
      a=aType == BIG_DECIMAL ? aValue.getBigDecimal() : bigDecimalValue(aValue,aType);
      b=bType == BIG_DECIMAL ? bValue.getBigDecimal() : bigDecimalValue(bValue,bType);
    }
    aValue.setBigDecimal(a.multiply(b));
  }
  return aValue;
}","/** 
 * Multiplies two numerical property values.
 * @param aValue first value
 * @param bValue second value
 * @return first value * second value
 */
public static PropertyValue multiply(PropertyValue aValue,PropertyValue bValue){
  int aType=checkNumericalAndGetType(aValue);
  int bType=checkNumericalAndGetType(bValue);
  boolean sameType=aType == bType;
  int returnType=maxType(aType,bType);
  if (returnType == INT) {
    int a=aType == INT ? aValue.getInt() : aValue.getShort();
    int b=bType == INT ? bValue.getInt() : bValue.getShort();
    aValue.setInt(a * b);
  }
 else   if (returnType == FLOAT) {
    float a;
    float b;
    if (sameType) {
      a=aValue.getFloat();
      b=bValue.getFloat();
    }
 else {
      a=aType == FLOAT ? aValue.getFloat() : floatValue(aValue,aType);
      b=bType == FLOAT ? bValue.getFloat() : floatValue(bValue,bType);
    }
    aValue.setFloat(a * b);
  }
 else   if (returnType == LONG) {
    long a;
    long b;
    if (sameType) {
      a=aValue.getLong();
      b=bValue.getLong();
    }
 else {
      a=aType == LONG ? aValue.getLong() : longValue(aValue,aType);
      b=bType == LONG ? bValue.getLong() : longValue(bValue,bType);
    }
    aValue.setLong(a * b);
  }
 else   if (returnType == DOUBLE) {
    double a;
    double b;
    if (sameType) {
      a=aValue.getDouble();
      b=bValue.getDouble();
    }
 else {
      a=aType == DOUBLE ? aValue.getDouble() : doubleValue(aValue,aType);
      b=bType == DOUBLE ? bValue.getDouble() : doubleValue(bValue,bType);
    }
    aValue.setDouble(a * b);
  }
 else {
    BigDecimal a;
    BigDecimal b;
    if (sameType) {
      a=aValue.getBigDecimal();
      b=bValue.getBigDecimal();
    }
 else {
      a=aType == BIG_DECIMAL ? aValue.getBigDecimal() : bigDecimalValue(aValue,aType);
      b=bType == BIG_DECIMAL ? bValue.getBigDecimal() : bigDecimalValue(bValue,bType);
    }
    aValue.setBigDecimal(a.multiply(b));
  }
  return aValue;
}"
95817,"/** 
 * returns the maximum of two types
 * @param aType first type
 * @param bType second type
 * @return larger compatible type
 */
private static int maxType(int aType,int bType){
  int maxType=Math.max(aType,bType);
  if (maxType != BIG_DECIMAL && aType % 2 != bType % 2 && maxType % 2 == 0) {
    maxType++;
  }
  return maxType;
}","/** 
 * Returns the maximum of two types, at least Integer.
 * @param aType first type
 * @param bType second type
 * @return larger compatible type
 */
private static int maxType(int aType,int bType){
  return Math.max(Math.max(aType,bType),INT);
}"
95818,"@Test public void testReduceCollection() throws Exception {
  FlinkAsciiGraphLoader loader=getLoaderFromString(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  checkExpectationsEqualResults(loader,new ReduceOverlap());
}","@Test public void testReduceCollection() throws Exception {
  FlinkAsciiGraphLoader loader=getLoaderFromString(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  checkExpectationsEqualResults(loader,new ReduceOverlap());
}"
95819,"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof GradoopIdList)) {
    return false;
  }
  GradoopIdList that=(GradoopIdList)o;
  return this.size() == that.size() && this.containsAll(that);
}","@Override public boolean equals(Object o){
  boolean equal=this == o;
  if (!equal && o instanceof GradoopIdList) {
    GradoopIdList that=(GradoopIdList)o;
    equal=this.size() == that.size();
    if (equal) {
      equal=Objects.deepEquals(this.bytes,that.bytes);
    }
  }
  return equal;
}"
95820,"/** 
 * Checks if two given EPGM graph elements are equal by considering the graphs they are contained in.
 * @param element1 first element
 * @param element2 second element
 */
public static void validateEPGMGraphElements(EPGMGraphElement element1,EPGMGraphElement element2){
  assertNotNull(""String_Node_Str"",element1);
  assertNotNull(""String_Node_Str"",element2);
  assertTrue(String.format(""String_Node_Str"",element1.getGraphIds(),element2.getGraphIds()),element1.getGraphIds().equals(element2.getGraphIds()));
}","/** 
 * Checks if two given EPGM graph elements are equal by considering the graphs they are contained in.
 * @param element1 first element
 * @param element2 second element
 */
public static void validateEPGMGraphElements(EPGMGraphElement element1,EPGMGraphElement element2){
  assertNotNull(""String_Node_Str"",element1);
  assertNotNull(""String_Node_Str"",element2);
  assertTrue(String.format(""String_Node_Str"",element1.getGraphIds(),element2.getGraphIds()),element1.getGraphIds().containsAll(element2.getGraphIds()) && element2.getGraphIds().containsAll(element1.getGraphIds()));
}"
95821,"@Test public void testEquals(){
  int idCount=100;
  List<GradoopId> ids=new ArrayList<>(idCount);
  for (int i=0; i < idCount; i++) {
    ids.add(GradoopId.get());
  }
  GradoopIdList set1=GradoopIdList.fromExisting(ids.toArray(new GradoopId[idCount]));
  GradoopIdList set2=GradoopIdList.fromExisting(ids.toArray(new GradoopId[idCount]));
  Collections.shuffle(ids);
  GradoopIdList set3=GradoopIdList.fromExisting(ids.toArray(new GradoopId[idCount]));
  assertTrue(""String_Node_Str"",set1.equals(set1));
  assertTrue(""String_Node_Str"",set1.equals(set2));
  assertTrue(""String_Node_Str"",set1.equals(set3));
  assertTrue(""String_Node_Str"",set1.hashCode() == set1.hashCode());
  assertTrue(""String_Node_Str"",set1.hashCode() == set2.hashCode());
  assertTrue(""String_Node_Str"",set1.hashCode() == set3.hashCode());
}","@Test public void testEquals(){
  GradoopId a=GradoopId.get();
  GradoopId b=GradoopId.get();
  GradoopId c=GradoopId.get();
  GradoopIdList abc=GradoopIdList.fromExisting(a,b,c);
  assertTrue(""String_Node_Str"",abc.equals(abc));
  assertTrue(""String_Node_Str"",abc.hashCode() == abc.hashCode());
  GradoopIdList abc2=GradoopIdList.fromExisting(a,b,c);
  assertTrue(""String_Node_Str"",abc.equals(abc2));
  assertTrue(""String_Node_Str"",abc.hashCode() == abc2.hashCode());
  GradoopIdList cba=GradoopIdList.fromExisting(c,b,a);
  assertTrue(""String_Node_Str"",!abc.equals(cba));
  assertTrue(""String_Node_Str"",abc.hashCode() == cba.hashCode());
  GradoopIdList aab=GradoopIdList.fromExisting(a,a,b);
  GradoopIdList abb=GradoopIdList.fromExisting(a,b,b);
  assertTrue(""String_Node_Str"",!aab.equals(abb));
  assertTrue(""String_Node_Str"",aab.hashCode() != abb.hashCode());
  GradoopIdList ab=GradoopIdList.fromExisting(a,b);
  assertTrue(""String_Node_Str"",!aab.equals(ab));
  assertTrue(""String_Node_Str"",aab.hashCode() != ab.hashCode());
  GradoopIdList empty=new GradoopIdList();
  assertTrue(""String_Node_Str"",!abc.equals(empty));
  assertTrue(""String_Node_Str"",abc.hashCode() != empty.hashCode());
  GradoopIdList empty2=new GradoopIdList();
  assertTrue(""String_Node_Str"",empty2.equals(empty));
  assertTrue(""String_Node_Str"",empty2.hashCode() == empty.hashCode());
}"
95822,"/** 
 * Checks if two given EPGM graph elements are equal by considering the graphs they are contained in.
 * @param element1 first element
 * @param element2 second element
 */
public static void validateEPGMGraphElements(EPGMGraphElement element1,EPGMGraphElement element2){
  assertNotNull(""String_Node_Str"",element1);
  assertNotNull(""String_Node_Str"",element2);
  assertTrue(String.format(""String_Node_Str"",element1.getGraphIds(),element2.getGraphIds()),element1.getGraphIds().equals(element2.getGraphIds()));
}","/** 
 * Checks if two given EPGM graph elements are equal by considering the graphs they are contained in.
 * @param element1 first element
 * @param element2 second element
 */
public static void validateEPGMGraphElements(EPGMGraphElement element1,EPGMGraphElement element2){
  assertNotNull(""String_Node_Str"",element1);
  assertNotNull(""String_Node_Str"",element2);
  assertTrue(String.format(""String_Node_Str"",element1.getGraphIds(),element2.getGraphIds()),element1.getGraphIds().containsAll(element2.getGraphIds()) && element2.getGraphIds().containsAll(element1.getGraphIds()));
}"
95823,"/** 
 * Grows children of a single supported frequent patterns in a graph (checks time constraint).
 * @param graph graph
 * @param minEdgeId minimal edge id satisfying the branch constraint
 * @param parentPattern pattern to grow
 * @param parentEmbeddings all embeddings of the parent pattern
 * @param rightmostPath rightmost path of the parent pattern
 * @return map of child patterns and embeddings
 */
private PatternEmbeddingsMap growPattern(int[] graph,int minEdgeId,int[] parentPattern,int[][] parentEmbeddings,int[] rightmostPath){
  PatternEmbeddingsMap currentChildMap=PatternEmbeddingsMap.getEmptyOne();
  for (int m=0; m < parentEmbeddings.length / 2; m++) {
    int[] parentVertexIds=parentEmbeddings[2 * m];
    int[] parentEdgeIds=parentEmbeddings[2 * m + 1];
    int forwardsTime=graphUtils.getVertexCount(parentPattern);
    int rightmostTime=rightmostPath[0];
    for (int edgeId=minEdgeId; edgeId < graphUtils.getEdgeCount(graph); edgeId++) {
      if (!ArrayUtils.contains(parentEdgeIds,edgeId)) {
        int edgeFromId=graphUtils.getFromId(graph,edgeId);
        int fromTime=ArrayUtils.indexOf(parentVertexIds,edgeFromId);
        int edgeToId=graphUtils.getToId(graph,edgeId);
        int toTime=ArrayUtils.indexOf(parentVertexIds,edgeToId);
        if (fromTime == rightmostTime && toTime >= 0) {
          int[] childPattern=dfsCodeUtils.addExtension(parentPattern,fromTime,graphUtils.getFromLabel(graph,edgeId),getExtensionIsOutgoing(graph,edgeId,true),graphUtils.getEdgeLabel(graph,edgeId),toTime,graphUtils.getToLabel(graph,edgeId));
          int[] childVertexIds=parentVertexIds.clone();
          int[] childEdgeIds=ArrayUtils.add(parentEdgeIds,edgeId);
          currentChildMap.put(childPattern,childVertexIds,childEdgeIds);
        }
 else         if (toTime == rightmostTime && fromTime >= 0) {
          int[] childPattern=dfsCodeUtils.addExtension(parentPattern,toTime,graphUtils.getFromLabel(graph,edgeId),getExtensionIsOutgoing(graph,edgeId,false),graphUtils.getEdgeLabel(graph,edgeId),fromTime,graphUtils.getToLabel(graph,edgeId));
          int[] childVertexIds=parentVertexIds.clone();
          int[] childEdgeIds=ArrayUtils.add(parentEdgeIds,edgeId);
          currentChildMap.put(childPattern,childVertexIds,childEdgeIds);
        }
 else {
          for (          int rightmostPathTime : rightmostPath) {
            if (fromTime == rightmostPathTime && toTime < 0) {
              int[] childPattern=dfsCodeUtils.addExtension(parentPattern,fromTime,graphUtils.getFromLabel(graph,edgeId),getExtensionIsOutgoing(graph,edgeId,true),graphUtils.getEdgeLabel(graph,edgeId),forwardsTime,graphUtils.getToLabel(graph,edgeId));
              int[] childVertexIds=ArrayUtils.add(parentVertexIds,edgeToId);
              int[] childEdgeIds=ArrayUtils.add(parentEdgeIds,edgeId);
              currentChildMap.put(childPattern,childVertexIds,childEdgeIds);
              break;
            }
 else             if (toTime == rightmostPathTime && fromTime < 0) {
              int[] childPattern=dfsCodeUtils.addExtension(parentPattern,toTime,graphUtils.getToLabel(graph,edgeId),getExtensionIsOutgoing(graph,edgeId,false),graphUtils.getEdgeLabel(graph,edgeId),forwardsTime,graphUtils.getFromLabel(graph,edgeId));
              int[] childVertexIds=ArrayUtils.add(parentVertexIds,edgeFromId);
              int[] childEdgeIds=ArrayUtils.add(parentEdgeIds,edgeId);
              currentChildMap.put(childPattern,childVertexIds,childEdgeIds);
              break;
            }
          }
        }
      }
    }
  }
  return currentChildMap;
}","/** 
 * Grows children of a single supported frequent patterns in a graph (checks time constraint).
 * @param graph graph
 * @param minEdgeId minimal edge id satisfying the branch constraint
 * @param parentPattern pattern to grow
 * @param parentEmbeddings all embeddings of the parent pattern
 * @param rightmostPath rightmost path of the parent pattern
 * @return map of child patterns and embeddings
 */
private PatternEmbeddingsMap growPattern(int[] graph,int minEdgeId,int[] parentPattern,int[][] parentEmbeddings,int[] rightmostPath){
  PatternEmbeddingsMap currentChildMap=PatternEmbeddingsMap.getEmptyOne();
  for (int m=0; m < parentEmbeddings.length / 2; m++) {
    int[] parentVertexIds=parentEmbeddings[2 * m];
    int[] parentEdgeIds=parentEmbeddings[2 * m + 1];
    int forwardsTime=graphUtils.getVertexCount(parentPattern);
    int rightmostTime=rightmostPath[0];
    for (int edgeId=minEdgeId; edgeId < graphUtils.getEdgeCount(graph); edgeId++) {
      if (!ArrayUtils.contains(parentEdgeIds,edgeId)) {
        int edgeFromId=graphUtils.getFromId(graph,edgeId);
        int fromTime=ArrayUtils.indexOf(parentVertexIds,edgeFromId);
        int edgeToId=graphUtils.getToId(graph,edgeId);
        int toTime=ArrayUtils.indexOf(parentVertexIds,edgeToId);
        if (fromTime == rightmostTime && toTime >= 0) {
          int[] childPattern=dfsCodeUtils.addExtension(parentPattern,fromTime,graphUtils.getFromLabel(graph,edgeId),getExtensionIsOutgoing(graph,edgeId,true),graphUtils.getEdgeLabel(graph,edgeId),toTime,graphUtils.getToLabel(graph,edgeId));
          int[] childVertexIds=parentVertexIds.clone();
          int[] childEdgeIds=ArrayUtils.add(parentEdgeIds,edgeId);
          currentChildMap.put(childPattern,childVertexIds,childEdgeIds);
        }
 else         if (toTime == rightmostTime && fromTime >= 0) {
          int[] childPattern=dfsCodeUtils.addExtension(parentPattern,toTime,graphUtils.getToLabel(graph,edgeId),getExtensionIsOutgoing(graph,edgeId,false),graphUtils.getEdgeLabel(graph,edgeId),fromTime,graphUtils.getFromLabel(graph,edgeId));
          int[] childVertexIds=parentVertexIds.clone();
          int[] childEdgeIds=ArrayUtils.add(parentEdgeIds,edgeId);
          currentChildMap.put(childPattern,childVertexIds,childEdgeIds);
        }
 else {
          for (          int rightmostPathTime : rightmostPath) {
            if (fromTime == rightmostPathTime && toTime < 0) {
              int[] childPattern=dfsCodeUtils.addExtension(parentPattern,fromTime,graphUtils.getFromLabel(graph,edgeId),getExtensionIsOutgoing(graph,edgeId,true),graphUtils.getEdgeLabel(graph,edgeId),forwardsTime,graphUtils.getToLabel(graph,edgeId));
              int[] childVertexIds=ArrayUtils.add(parentVertexIds,edgeToId);
              int[] childEdgeIds=ArrayUtils.add(parentEdgeIds,edgeId);
              currentChildMap.put(childPattern,childVertexIds,childEdgeIds);
              break;
            }
 else             if (toTime == rightmostPathTime && fromTime < 0) {
              int[] childPattern=dfsCodeUtils.addExtension(parentPattern,toTime,graphUtils.getToLabel(graph,edgeId),getExtensionIsOutgoing(graph,edgeId,false),graphUtils.getEdgeLabel(graph,edgeId),forwardsTime,graphUtils.getFromLabel(graph,edgeId));
              int[] childVertexIds=ArrayUtils.add(parentVertexIds,edgeFromId);
              int[] childEdgeIds=ArrayUtils.add(parentEdgeIds,edgeId);
              currentChildMap.put(childPattern,childVertexIds,childEdgeIds);
              break;
            }
          }
        }
      }
    }
  }
  return currentChildMap;
}"
95824,"@Parameterized.Parameters(name=""String_Node_Str"") public static Iterable data(){
  return Arrays.asList(new String[]{""String_Node_Str"",BasicPatternsData.FSM_SINGLE_EDGE,""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",BasicPatternsData.FSM_SIMPLE_GRAPH,""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",BasicPatternsData.FSM_PARALLEL_EDGES,""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",BasicPatternsData.FSM_LOOP,""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",BasicPatternsData.FSM_DIAMOND,""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",BasicPatternsData.FSM_CIRCLE_WITH_BRANCH,""String_Node_Str"",""String_Node_Str""});
}","@Parameterized.Parameters(name=""String_Node_Str"") public static Iterable data(){
  return Arrays.asList(new String[]{""String_Node_Str"",BasicPatternsData.FSM_SINGLE_EDGE,""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",BasicPatternsData.FSM_SIMPLE_GRAPH,""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",BasicPatternsData.FSM_PARALLEL_EDGES,""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",BasicPatternsData.FSM_LOOP,""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",BasicPatternsData.FSM_DIAMOND,""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",BasicPatternsData.FSM_CIRCLE_WITH_BRANCH,""String_Node_Str"",""String_Node_Str""},new String[]{""String_Node_Str"",BasicPatternsData.MULTI_LABELED_CIRCLE,""String_Node_Str"",""String_Node_Str""});
}"
95825,"/** 
 * Creates the gSpan mining representation of a graph transaction from a give list of adjacency lists and edges.
 * @param adjacencyLists adjacency lists
 * @param edges edges
 * @param fsmConfig FSM configuration
 * @return graph transaction
 */
private static GSpanGraph createGSpanGraph(List<AdjacencyList> adjacencyLists,List<GSpanEdge> edges,FSMConfig fsmConfig){
  Collections.sort(edges);
  Map<DFSCode,Collection<DFSEmbedding>> codeEmbeddings=Maps.newHashMap();
  Iterator<GSpanEdge> iterator=edges.iterator();
  GSpanEdge lastEdge=iterator.next();
  Collection<DFSEmbedding> embeddings=createSingleEdgeSubgraphEmbeddings(codeEmbeddings,lastEdge,fsmConfig);
  while (iterator.hasNext()) {
    GSpanEdge edge=iterator.next();
    if (edge.compareTo(lastEdge) == 0) {
      embeddings.add(createSingleEdgeEmbedding(edge));
    }
 else {
      embeddings=createSingleEdgeSubgraphEmbeddings(codeEmbeddings,edge,fsmConfig);
      lastEdge=edge;
    }
  }
  return new GSpanGraph(adjacencyLists,codeEmbeddings);
}","/** 
 * Creates the gSpan mining representation of a graph transaction from a give list of adjacency lists and edges.
 * @param adjacencyLists adjacency lists
 * @param edges edges
 * @param fsmConfig FSM configuration
 * @return graph transaction
 */
private static GSpanGraph createGSpanGraph(List<AdjacencyList> adjacencyLists,List<GSpanEdge> edges,FSMConfig fsmConfig){
  GSpanGraph gSpanGraph;
  if (!edges.isEmpty()) {
    Collections.sort(edges);
    Map<DFSCode,Collection<DFSEmbedding>> codeEmbeddings=Maps.newHashMap();
    Iterator<GSpanEdge> iterator=edges.iterator();
    GSpanEdge lastEdge=iterator.next();
    Collection<DFSEmbedding> embeddings=createSingleEdgeSubgraphEmbeddings(codeEmbeddings,lastEdge,fsmConfig);
    while (iterator.hasNext()) {
      GSpanEdge edge=iterator.next();
      if (edge.compareTo(lastEdge) == 0) {
        embeddings.add(createSingleEdgeEmbedding(edge));
      }
 else {
        embeddings=createSingleEdgeSubgraphEmbeddings(codeEmbeddings,edge,fsmConfig);
        lastEdge=edge;
      }
    }
    gSpanGraph=new GSpanGraph(adjacencyLists,codeEmbeddings);
  }
 else {
    gSpanGraph=new GSpanGraph();
  }
  return gSpanGraph;
}"
95826,"@Override public int compare(WithCount<String> label1,WithCount<String> label2){
  int comparison;
  if (label1.getCount() > label2.getCount()) {
    comparison=-1;
  }
 else {
    comparison=label1.getObject().compareTo(label2.getObject());
  }
  return comparison;
}","@Override public int compare(WithCount<String> label1,WithCount<String> label2){
  int comparison;
  if (label1.getCount() > label2.getCount()) {
    comparison=-1;
  }
 else   if (label1.getCount() < label2.getCount()) {
    comparison=1;
  }
 else {
    comparison=label1.getObject().compareTo(label2.getObject());
  }
  return comparison;
}"
95827,"@Override public void flatMap(TLFGraph tlfGraph,Collector<String> collector) throws Exception {
  for (  TLFVertex vertex : tlfGraph.getGraphVertices()) {
    collector.collect(vertex.getLabel());
  }
}","@Override public void flatMap(TLFGraph tlfGraph,Collector<String> collector) throws Exception {
  Set<String> labels=Sets.newHashSet();
  for (  TLFVertex vertex : tlfGraph.getGraphVertices()) {
    labels.add(vertex.getLabel());
  }
  for (  String label : labels) {
    collector.collect(label);
  }
}"
95828,"@Override public Collection<EdgeTripleWithStringEdgeLabel<GradoopId>> map(GraphTransaction<G,V,E> transaction) throws Exception {
  Map<GradoopId,Integer> vertexLabels=Maps.newHashMap();
  Collection<EdgeTripleWithStringEdgeLabel<GradoopId>> triples=Lists.newArrayList();
  for (  V vertex : transaction.getVertices()) {
    Integer label=dictionary.get(vertex.getLabel());
    if (label != null) {
      vertexLabels.put(vertex.getId(),label);
    }
  }
  for (  E edge : transaction.getEdges()) {
    Integer sourceLabel=vertexLabels.get(edge.getSourceId());
    if (sourceLabel != null) {
      Integer targetLabel=vertexLabels.get(edge.getTargetId());
      if (targetLabel != null) {
        triples.add(new EdgeTripleWithStringEdgeLabel<GradoopId>(edge.getSourceId(),edge.getTargetId(),edge.getLabel(),sourceLabel,targetLabel));
      }
    }
  }
  return triples;
}","@Override public Collection<EdgeTripleWithStringEdgeLabel<GradoopId>> map(GraphTransaction<G,V,E> transaction) throws Exception {
  Map<GradoopId,Integer> vertexLabels=Maps.newHashMap();
  Collection<EdgeTripleWithStringEdgeLabel<GradoopId>> triples=Lists.newArrayList();
  for (  V vertex : transaction.getVertices()) {
    Integer label=dictionary.get(vertex.getLabel());
    if (label != null) {
      vertexLabels.put(vertex.getId(),label);
    }
  }
  for (  E edge : transaction.getEdges()) {
    Integer sourceLabel=vertexLabels.get(edge.getSourceId());
    if (sourceLabel != null) {
      Integer targetLabel=vertexLabels.get(edge.getTargetId());
      if (targetLabel != null) {
        triples.add(new EdgeTripleWithStringEdgeLabel<>(edge.getSourceId(),edge.getTargetId(),edge.getLabel(),sourceLabel,targetLabel));
      }
    }
  }
  return triples;
}"
95829,"/** 
 * Constructor.
 * @param adjacencyLists adjacency lists
 * @param subgraphEmbeddings initial DFS codes and embeddings
 */
public GSpanGraph(List<AdjacencyList> adjacencyLists,Map<DFSCode,Collection<DFSEmbedding>> subgraphEmbeddings){
  this.adjacencyLists=adjacencyLists;
  this.subgraphEmbeddings=subgraphEmbeddings;
}","/** 
 * default constructor
 */
public GSpanGraph(){
  this.adjacencyLists=Lists.newArrayListWithCapacity(0);
  this.subgraphEmbeddings=Maps.newHashMapWithExpectedSize(0);
}"
95830,"/** 
 * Adds a predictable pattern to the graph transaction. All vertices will have a specified vertex label and the pattern will be connected to the center vertex by an unique labelled edge.
 * @param vertexLabel label of pattern vertices
 * @param centerVertex center vertex
 * @param vertices stores created vertices
 * @param edges stores created edges
 */
private void addPattern(String vertexLabel,V centerVertex,Set<V> vertices,Set<E> edges){
  GradoopId multiBottomId=createVertex(vertexLabel,vertices);
  createEdge(centerVertex.getId(),multiBottomId.toString(),multiBottomId,edges);
  if (multigraph) {
    GradoopId multiTopId=createVertex(vertexLabel,vertices);
    createEdge(multiBottomId,""String_Node_Str"",multiTopId,edges);
    createEdge(multiTopId,""String_Node_Str"",multiBottomId,edges);
    createEdge(multiTopId,""String_Node_Str"",multiBottomId,edges);
    createEdge(multiTopId,""String_Node_Str"",multiTopId,edges);
  }
  GradoopId mirrorBottomId=createVertex(vertexLabel,vertices);
  GradoopId mirrorTopId=createVertex(vertexLabel,vertices);
  GradoopId mirrorLeftId=createVertex(vertexLabel,vertices);
  GradoopId mirrorRightId=createVertex(vertexLabel,vertices);
  createEdge(mirrorBottomId,""String_Node_Str"",mirrorLeftId,edges);
  createEdge(mirrorBottomId,""String_Node_Str"",mirrorRightId,edges);
  createEdge(mirrorLeftId,""String_Node_Str"",mirrorTopId,edges);
  createEdge(mirrorRightId,""String_Node_Str"",mirrorTopId,edges);
  createEdge(mirrorBottomId,""String_Node_Str"",multiBottomId,edges);
  GradoopId cycleBottomId=createVertex(vertexLabel,vertices);
  GradoopId cycleLeftId=createVertex(vertexLabel,vertices);
  GradoopId cycleRightId=createVertex(vertexLabel,vertices);
  createEdge(cycleBottomId,""String_Node_Str"",cycleLeftId,edges);
  createEdge(cycleLeftId,""String_Node_Str"",cycleRightId,edges);
  createEdge(cycleRightId,""String_Node_Str"",cycleBottomId,edges);
  createEdge(cycleBottomId,""String_Node_Str"",multiBottomId,edges);
}","/** 
 * Adds a predictable pattern to the graph transaction. All vertices will have a specified vertex label and the pattern will be connected to the center vertex by an unique labelled edge.
 * @param graphNumber numeric graph identifier
 * @param vertexLabel label of pattern vertices
 * @param centerVertex center vertex
 * @param vertices stores created vertices
 * @param edges stores created edges
 */
private void addPattern(long graphNumber,String vertexLabel,V centerVertex,Set<V> vertices,Set<E> edges){
  GradoopId multiBottomId=createVertex(vertexLabel,vertices);
  createEdge(centerVertex.getId(),String.valueOf(graphNumber),multiBottomId,edges);
  if (multigraph) {
    GradoopId multiTopId=createVertex(vertexLabel,vertices);
    createEdge(multiBottomId,""String_Node_Str"",multiTopId,edges);
    createEdge(multiTopId,""String_Node_Str"",multiBottomId,edges);
    createEdge(multiTopId,""String_Node_Str"",multiBottomId,edges);
    createEdge(multiTopId,""String_Node_Str"",multiTopId,edges);
  }
  GradoopId mirrorBottomId=createVertex(vertexLabel,vertices);
  GradoopId mirrorTopId=createVertex(vertexLabel,vertices);
  GradoopId mirrorLeftId=createVertex(vertexLabel,vertices);
  GradoopId mirrorRightId=createVertex(vertexLabel,vertices);
  createEdge(mirrorBottomId,""String_Node_Str"",mirrorLeftId,edges);
  createEdge(mirrorBottomId,""String_Node_Str"",mirrorRightId,edges);
  createEdge(mirrorLeftId,""String_Node_Str"",mirrorTopId,edges);
  createEdge(mirrorRightId,""String_Node_Str"",mirrorTopId,edges);
  createEdge(mirrorBottomId,""String_Node_Str"",multiBottomId,edges);
  GradoopId cycleBottomId=createVertex(vertexLabel,vertices);
  GradoopId cycleLeftId=createVertex(vertexLabel,vertices);
  GradoopId cycleRightId=createVertex(vertexLabel,vertices);
  createEdge(cycleBottomId,""String_Node_Str"",cycleLeftId,edges);
  createEdge(cycleLeftId,""String_Node_Str"",cycleRightId,edges);
  createEdge(cycleRightId,""String_Node_Str"",cycleBottomId,edges);
  createEdge(cycleBottomId,""String_Node_Str"",multiBottomId,edges);
}"
95831,"@Override public GraphTransaction<G,V,E> map(Long graphNumber) throws Exception {
  Long maxVertexLabelIndex=graphNumber % 10;
  G graphHead=graphHeadFactory.createGraphHead(String.valueOf(maxVertexLabelIndex + 1));
  Set<V> vertices=Sets.newHashSet();
  Set<E> edges=Sets.newHashSet();
  GradoopIdSet graphIds=GradoopIdSet.fromExisting(graphHead.getId());
  V centerVertex=vertexFactory.createVertex(""String_Node_Str"",graphIds);
  vertices.add(centerVertex);
  for (int vertexLabelIndex=0; vertexLabelIndex <= maxVertexLabelIndex; vertexLabelIndex++) {
    String vertexLabel=VERTEX_LABELS.get(vertexLabelIndex);
    for (int patternCopy=1; patternCopy <= graphSize; patternCopy++) {
      addPattern(vertexLabel,centerVertex,vertices,edges);
    }
  }
  for (  V vertex : vertices) {
    vertex.setGraphIds(graphIds);
  }
  for (  E edge : edges) {
    edge.setGraphIds(graphIds);
  }
  return new GraphTransaction<>(graphHead,vertices,edges);
}","@Override public GraphTransaction<G,V,E> map(Long graphNumber) throws Exception {
  Long maxVertexLabelIndex=graphNumber % 10;
  G graphHead=graphHeadFactory.createGraphHead(String.valueOf(maxVertexLabelIndex));
  Set<V> vertices=Sets.newHashSet();
  Set<E> edges=Sets.newHashSet();
  GradoopIdSet graphIds=GradoopIdSet.fromExisting(graphHead.getId());
  V centerVertex=vertexFactory.createVertex(""String_Node_Str"",graphIds);
  vertices.add(centerVertex);
  for (int vertexLabelIndex=0; vertexLabelIndex <= maxVertexLabelIndex; vertexLabelIndex++) {
    String vertexLabel=VERTEX_LABELS.get(vertexLabelIndex);
    for (int patternCopy=1; patternCopy <= graphSize; patternCopy++) {
      addPattern(graphNumber,vertexLabel,centerVertex,vertices,edges);
    }
  }
  for (  V vertex : vertices) {
    vertex.setGraphIds(graphIds);
  }
  for (  E edge : edges) {
    edge.setGraphIds(graphIds);
  }
  return new GraphTransaction<>(graphHead,vertices,edges);
}"
95832,"@Test public void testMaxVertexLabel() throws Exception {
  for (long maxVertexLabel=1; maxVertexLabel <= 10; maxVertexLabel++) {
    GraphTransaction<GraphHeadPojo,VertexPojo,EdgePojo> graph=new PredictableTransaction<>(1,true,getConfig()).map(maxVertexLabel);
    assertEquals((maxVertexLabel % 10 + 1) * 9 + 1,graph.getVertices().size());
    assertEquals((maxVertexLabel % 10 + 1) * 14,graph.getEdges().size());
    graph=new PredictableTransaction<>(1,false,getConfig()).map(maxVertexLabel);
    assertEquals((maxVertexLabel % 10 + 1) * 8 + 1,graph.getVertices().size());
    assertEquals((maxVertexLabel % 10 + 1) * 10,graph.getEdges().size());
  }
}","@Test public void testMaxVertexLabel() throws Exception {
  for (long maxVertexLabel=0; maxVertexLabel < 10; maxVertexLabel++) {
    GraphTransaction<GraphHeadPojo,VertexPojo,EdgePojo> graph=new PredictableTransaction<>(1,true,getConfig()).map(maxVertexLabel);
    assertEquals((maxVertexLabel % 10 + 1) * 9 + 1,graph.getVertices().size());
    assertEquals((maxVertexLabel % 10 + 1) * 14,graph.getEdges().size());
    graph=new PredictableTransaction<>(1,false,getConfig()).map(maxVertexLabel);
    assertEquals((maxVertexLabel % 10 + 1) * 8 + 1,graph.getVertices().size());
    assertEquals((maxVertexLabel % 10 + 1) * 10,graph.getEdges().size());
  }
}"
95833,"@Override public GraphTransactions<G,V,E> getGraphTransactions() throws IOException {
  DataSet<TLFGraph> graphs;
  DataSet<GraphTransaction<G,V,E>> transactions;
  ExecutionEnvironment env=getConfig().getExecutionEnvironment();
  graphs=env.readHadoopFile(new TLFInputFormat(),LongWritable.class,Text.class,getTLFPath()).map(new TLFGraphFromText());
  GraphTransactionFromTLFGraph<G,V,E> graphTransactionFromTLFGraph=new GraphTransactionFromTLFGraph<G,V,E>(getConfig().getGraphHeadFactory(),getConfig().getVertexFactory(),getConfig().getEdgeFactory());
  TypeInformation<GraphTransaction<G,V,E>> typeInformation=graphTransactionFromTLFGraph.getProducedType();
  transactions=graphs.map(graphTransactionFromTLFGraph).returns(typeInformation);
  if (hasVertexDictionary()) {
    transactions=transactions.map(new VertexLabelDecoder<G,V,E>()).withBroadcastSet(getVertexDictionary(),VertexLabelDecoder.VERTEX_DICTIONARY);
  }
  if (hasEdgeDictionary()) {
    transactions=transactions.map(new EdgeLabelDecoder<G,V,E>()).withBroadcastSet(getEdgeDictionary(),EdgeLabelDecoder.EDGE_DICTIONARY);
  }
  return new GraphTransactions<G,V,E>(transactions,getConfig());
}","@Override public GraphTransactions<G,V,E> getGraphTransactions() throws IOException {
  DataSet<TLFGraph> graphs;
  DataSet<GraphTransaction<G,V,E>> transactions;
  ExecutionEnvironment env=getConfig().getExecutionEnvironment();
  graphs=env.readHadoopFile(new TLFInputFormat(),LongWritable.class,Text.class,getTLFPath()).map(new TLFGraphFromText());
  transactions=graphs.map(new GraphTransactionFromTLFGraph<>(getConfig().getGraphHeadFactory(),getConfig().getVertexFactory(),getConfig().getEdgeFactory())).returns(GraphTransaction.getTypeInformation(getConfig()));
  if (hasVertexDictionary()) {
    transactions=transactions.map(new VertexLabelDecoder<G,V,E>()).withBroadcastSet(getVertexDictionary(),VertexLabelDecoder.VERTEX_DICTIONARY);
  }
  if (hasEdgeDictionary()) {
    transactions=transactions.map(new EdgeLabelDecoder<G,V,E>()).withBroadcastSet(getEdgeDictionary(),EdgeLabelDecoder.EDGE_DICTIONARY);
  }
  return new GraphTransactions<>(transactions,getConfig());
}"
95834,"/** 
 * Constructs a dataset containing GraphTransaction(s).
 * @param graph a tlf graph
 * @return a GraphTransaction corresponding to the TLFGraph
 * @throws Exception
 */
@Override public GraphTransaction<G,V,E> map(TLFGraph graph) throws Exception {
  Set<V> vertices=Sets.newHashSet();
  Set<E> edges=Sets.newHashSet();
  GradoopId id;
  String label;
  GradoopId targetId;
  GradoopIdSet graphs=new GradoopIdSet();
  Map<Integer,GradoopId> integerGradoopIdMapVertices;
  integerGradoopIdMapVertices=Maps.newHashMap();
  id=GradoopId.get();
  graphs.add(id);
  for (  TLFVertex vertex : graph.getGraphVertices()) {
    id=GradoopId.get();
    integerGradoopIdMapVertices.put(vertex.getId(),id);
    label=vertex.getLabel();
    vertices.add(this.vertexFactory.initVertex(id,label,graphs));
  }
  for (  TLFEdge edge : graph.getGraphEdges()) {
    id=integerGradoopIdMapVertices.get(edge.getSourceId());
    targetId=integerGradoopIdMapVertices.get(edge.getTargetId());
    label=edge.getLabel();
    edges.add(this.edgeFactory.createEdge(label,id,targetId,graphs));
  }
  return new GraphTransaction<G,V,E>(this.graphHeadFactory.initGraphHead(id),vertices,edges);
}","/** 
 * Constructs a dataset containing GraphTransaction(s).
 * @param graph a tlf graph
 * @return a GraphTransaction corresponding to the TLFGraph
 * @throws Exception
 */
@Override public GraphTransaction<G,V,E> map(TLFGraph graph) throws Exception {
  G graphHead=this.graphHeadFactory.createGraphHead();
  Set<V> vertices=Sets.newHashSet();
  Set<E> edges=Sets.newHashSet();
  GradoopIdSet graphIds=GradoopIdSet.fromExisting(graphHead.getId());
  Map<Integer,GradoopId> vertexIdMap;
  vertexIdMap=Maps.newHashMap();
  for (  TLFVertex tlfVertex : graph.getGraphVertices()) {
    V vertex=vertexFactory.createVertex(tlfVertex.getLabel(),graphIds);
    vertices.add(vertex);
    vertexIdMap.put(tlfVertex.getId(),vertex.getId());
  }
  for (  TLFEdge tlfEdge : graph.getGraphEdges()) {
    GradoopId sourceId=vertexIdMap.get(tlfEdge.getSourceId());
    GradoopId targetId=vertexIdMap.get(tlfEdge.getTargetId());
    edges.add(edgeFactory.createEdge(tlfEdge.getLabel(),sourceId,targetId,graphIds));
  }
  return new GraphTransaction<>(graphHead,vertices,edges);
}"
95835,"/** 
 * Creates a TLF string representation of a given graph transaction.
 * @param graphTransaction graph transaction
 * @return TLF string representation
 */
@Override public String format(GraphTransaction<G,V,E> graphTransaction){
  Map<GradoopId,Integer> gradoopIdIntegerMapVertices=Maps.newHashMapWithExpectedSize(graphTransaction.getVertices().size());
  Integer id=0;
  StringBuilder graph=new StringBuilder();
  for (  V vertex : graphTransaction.getVertices()) {
    gradoopIdIntegerMapVertices.put(vertex.getId(),id);
    id++;
  }
  graph.append(""String_Node_Str"" + graphID + ""String_Node_Str"");
  graphID++;
  for (  V vertex : graphTransaction.getVertices()) {
    graph.append(""String_Node_Str"" + gradoopIdIntegerMapVertices.get(vertex.getId()) + ""String_Node_Str""+ vertex.getLabel()+ ""String_Node_Str"");
  }
  int i=0;
  for (  E edge : graphTransaction.getEdges()) {
    graph.append(""String_Node_Str"" + gradoopIdIntegerMapVertices.get(edge.getSourceId()) + ""String_Node_Str""+ gradoopIdIntegerMapVertices.get(edge.getTargetId())+ ""String_Node_Str""+ ""String_Node_Str""+ edge.getLabel());
    if (i < graphTransaction.getEdges().size() - 1) {
      graph.append(""String_Node_Str"");
    }
    i++;
  }
  return graph.toString();
}","/** 
 * Creates a TLF string representation of a given graph transaction.
 * @param graphTransaction graph transaction
 * @return TLF string representation
 */
@Override public String format(GraphTransaction<G,V,E> graphTransaction){
  graphId++;
  Map<GradoopId,Integer> vertexIdMap=Maps.newHashMapWithExpectedSize(graphTransaction.getVertices().size());
  Collection<String> lines=Lists.newArrayListWithExpectedSize(graphTransaction.getVertices().size() + graphTransaction.getEdges().size() + 1);
  lines.add(TLFGraph.SYMBOL + ""String_Node_Str"" + graphId);
  int vertexId=0;
  for (  V vertex : graphTransaction.getVertices()) {
    vertexIdMap.put(vertex.getId(),vertexId);
    lines.add(TLFVertex.SYMBOL + ""String_Node_Str"" + vertexId+ ""String_Node_Str""+ vertex.getLabel());
    vertexId++;
  }
  for (  E edge : graphTransaction.getEdges()) {
    Integer sourceId=vertexIdMap.get(edge.getSourceId());
    Integer targetId=vertexIdMap.get(edge.getTargetId());
    lines.add(TLFEdge.SYMBOL + ""String_Node_Str"" + sourceId+ ""String_Node_Str""+ targetId+ ""String_Node_Str""+ ""String_Node_Str""+ edge.getLabel());
  }
  return StringUtils.join(lines,""String_Node_Str"") + ""String_Node_Str"";
}"
95836,"@Override public GSpanGraph map(Collection<EdgeTripleWithStringEdgeLabel<Integer>> stringTriples) throws Exception {
  Collection<EdgeTriple<Integer>> intTriples=Lists.newArrayList();
  for (  EdgeTripleWithStringEdgeLabel<Integer> triple : stringTriples) {
    Integer edgeLabel=dictionary.get(triple.getEdgeLabel());
    if (edgeLabel != null) {
      intTriples.add(new EdgeTripleWithoutGraphId<Integer>(triple.getSourceId(),triple.getTargetId(),edgeLabel,triple.getSourceLabel(),triple.getTargetLabel()));
    }
  }
  return GSpan.createGSpanGraphInteger(intTriples);
}","@Override public GSpanGraph map(Collection<EdgeTripleWithStringEdgeLabel<Integer>> stringTriples) throws Exception {
  Collection<EdgeTriple<Integer>> intTriples=Lists.newArrayList();
  for (  EdgeTripleWithStringEdgeLabel<Integer> triple : stringTriples) {
    Integer edgeLabel=dictionary.get(triple.getEdgeLabel());
    if (edgeLabel != null) {
      intTriples.add(new EdgeTripleWithoutGraphId<>(triple.getSourceId(),triple.getTargetId(),edgeLabel,triple.getSourceLabel(),triple.getTargetLabel()));
    }
  }
  return GSpan.createGSpanGraph(intTriples);
}"
95837,"@Test public void testMinersSeparately() throws Exception {
  GraphTransactions<GraphHeadPojo,VertexPojo,EdgePojo> transactions=new PredictableTransactionsGenerator<>(100,1,true,getConfig()).execute();
  FSMConfig fsmConfig=FSMConfig.forDirectedMultigraph(1.0f);
  GSpanGraphTransactionsEncoder<GraphHeadPojo,VertexPojo,EdgePojo> encoder=new GSpanGraphTransactionsEncoder<>();
  DataSet<GSpanGraph> edges=encoder.encode(transactions,fsmConfig);
  for (  GSpanMiner miner : getTransactionalFSMiners()) {
    miner.setExecutionEnvironment(transactions.getConfig().getExecutionEnvironment());
    DataSet<WithCount<CompressedDFSCode>> frequentSubgraphs=miner.mine(edges,encoder.getMinFrequency(),fsmConfig);
    Assert.assertEquals(702,frequentSubgraphs.count());
  }
}","@Test public void testMinersSeparately() throws Exception {
  GraphTransactions<GraphHeadPojo,VertexPojo,EdgePojo> transactions=new PredictableTransactionsGenerator<>(10,1,true,getConfig()).execute();
  float threshold=0.2f;
  FSMConfig fsmConfig=FSMConfig.forDirectedMultigraph(threshold);
  GSpanGraphTransactionsEncoder<GraphHeadPojo,VertexPojo,EdgePojo> encoder=new GSpanGraphTransactionsEncoder<>();
  DataSet<GSpanGraph> edges=encoder.encode(transactions,fsmConfig);
  for (  GSpanMiner miner : getTransactionalFSMiners()) {
    miner.setExecutionEnvironment(transactions.getConfig().getExecutionEnvironment());
    DataSet<WithCount<CompressedDFSCode>> frequentSubgraphs=miner.mine(edges,encoder.getMinFrequency(),fsmConfig);
    Assert.assertEquals(PredictableTransactionsGenerator.containedFrequentSubgraphs(threshold),frequentSubgraphs.count());
  }
}"
95838,"/** 
 * Main program to run the benchmark. Arguments are the available options.
 * @param args program arguments
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  CommandLine cmd=parseArguments(args,TransactionalFSMBenchmark.class.getName());
  if (cmd == null) {
    return;
  }
  performSanityCheck(cmd);
  INPUT_PATH=cmd.getOptionValue(OPTION_INPUT_PATH);
  CSV_PATH=cmd.getOptionValue(OPTION_CSV_PATH);
  MIN_SUPPORT=Float.parseFloat(cmd.getOptionValue(OPTION_MIN_SUP));
  SYNTHETIC_FLAG=cmd.hasOption(OPTION_SYNTHETIC);
  BULK_ITERATION_FLAG=cmd.hasOption(OPTION_GSPAN_BULK);
  GradoopFlinkConfig gradoopConfig=GradoopFlinkConfig.createDefaultConfig(getExecutionEnvironment());
  TLFDataSource<GraphHeadPojo,VertexPojo,EdgePojo> tlfSource=new TLFDataSource<>(INPUT_PATH,gradoopConfig);
  DataSet<TLFGraph> graphs=tlfSource.getTLFGraphs();
  GSpanEncoder encoder=new GSpanTLFGraphEncoder<>();
  GSpanMiner miner;
  miner=BULK_ITERATION_FLAG ? new GSpanBulkIteration() : new GSpanFilterRefine();
  miner.setExecutionEnvironment(getExecutionEnvironment());
  FSMConfig fsmConfig=SYNTHETIC_FLAG ? new FSMConfig(MIN_SUPPORT,true,true) : new FSMConfig(MIN_SUPPORT,false,false);
  DataSet<GSpanGraph> gsGraph=encoder.encode(graphs,fsmConfig);
  DataSet<WithCount<CompressedDFSCode>> countDataSet=miner.mine(gsGraph,encoder.getMinFrequency(),fsmConfig);
  System.out.println(countDataSet.count());
  writeCSV();
}","/** 
 * Main program to run the benchmark. Arguments are the available options.
 * @param args program arguments
 * @throws Exception
 */
@SuppressWarnings(""String_Node_Str"") public static void main(String[] args) throws Exception {
  CommandLine cmd=parseArguments(args,TransactionalFSMBenchmark.class.getName());
  if (cmd == null) {
    return;
  }
  performSanityCheck(cmd);
  INPUT_PATH=cmd.getOptionValue(OPTION_INPUT_PATH);
  CSV_PATH=cmd.getOptionValue(OPTION_CSV_PATH);
  MIN_SUPPORT=Float.parseFloat(cmd.getOptionValue(OPTION_MIN_SUP));
  SYNTHETIC_FLAG=cmd.hasOption(OPTION_SYNTHETIC);
  BULK_ITERATION_FLAG=cmd.hasOption(OPTION_GSPAN_BULK);
  GradoopFlinkConfig gradoopConfig=GradoopFlinkConfig.createDefaultConfig(getExecutionEnvironment());
  TLFDataSource<GraphHeadPojo,VertexPojo,EdgePojo> tlfSource=new TLFDataSource<>(INPUT_PATH,gradoopConfig);
  DataSet<TLFGraph> graphs=tlfSource.getTLFGraphs();
  GSpanEncoder encoder=new GSpanTLFGraphEncoder<>();
  GSpanMiner miner;
  miner=BULK_ITERATION_FLAG ? new GSpanBulkIteration() : new GSpanFilterRefine();
  miner.setExecutionEnvironment(getExecutionEnvironment());
  FSMConfig fsmConfig=SYNTHETIC_FLAG ? new FSMConfig(MIN_SUPPORT,true,true) : new FSMConfig(MIN_SUPPORT,false,false);
  DataSet<GSpanGraph> gsGraph=encoder.encode(graphs,fsmConfig);
  DataSet<WithCount<CompressedDFSCode>> countDataSet=miner.mine(gsGraph,encoder.getMinFrequency(),fsmConfig);
  long actualCount=countDataSet.count();
  long expectedCount=PredictableTransactionsGenerator.containedFrequentSubgraphs(MIN_SUPPORT);
  String resultMessage=actualCount == expectedCount ? ""String_Node_Str"" : ""String_Node_Str"" + expectedCount + ""String_Node_Str""+ actualCount+ ""String_Node_Str"";
  System.out.println(resultMessage);
  writeCSV();
}"
95839,"@Override public String toString(){
  return String.format(""String_Node_Str"",key,value);
}","@Override public String toString(){
  return String.format(""String_Node_Str"",key,value,value.getType().getSimpleName());
}"
95840,"/** 
 * {@inheritDoc}
 */
@Override public DataSet<Boolean> equalsByGraphIds(GraphCollection<G,V,E> other){
  return new EqualityByGraphIds<G,V,E>().execute(this,other);
}","/** 
 * {@inheritDoc}
 */
@Override public DataSet<Boolean> equalsByGraphIds(GraphCollection<G,V,E> other){
  return new CollectionEqualityByGraphIds<G,V,E>().execute(this,other);
}"
95841,"/** 
 * {@inheritDoc}
 */
@Override public DataSet<Boolean> equalsByGraphElementData(GraphCollection<G,V,E> other){
  return new EqualityByGraphElementData<G,V,E>().execute(this,other);
}","/** 
 * {@inheritDoc}
 */
@Override public DataSet<Boolean> equalsByGraphElementData(GraphCollection<G,V,E> other){
  return new CollectionEquality<>(new GraphHeadEmptyLabeler<G>(),new VertexDataLabeler<V>(),new EdgeDataLabeler<E>()).execute(this,other);
}"
95842,"/** 
 * {@inheritDoc}
 */
@Override public DataSet<Boolean> equalsByGraphData(GraphCollection<G,V,E> other){
  return new EqualityByGraphData<G,V,E>().execute(this,other);
}","/** 
 * {@inheritDoc}
 */
@Override public DataSet<Boolean> equalsByGraphData(GraphCollection<G,V,E> other){
  return new CollectionEquality<>(new GraphHeadDataLabeler<G>(),new VertexDataLabeler<V>(),new EdgeDataLabeler<E>()).execute(this,other);
}"
95843,"/** 
 * {@inheritDoc}
 */
@Override public DataSet<Boolean> equalsByGraphElementIds(GraphCollection<G,V,E> other){
  return new EqualityByGraphElementIds<G,V,E>().execute(this,other);
}","/** 
 * {@inheritDoc}
 */
@Override public DataSet<Boolean> equalsByGraphElementIds(GraphCollection<G,V,E> other){
  return new CollectionEquality<>(new GraphHeadEmptyLabeler<G>(),new VertexIdLabeler<V>(),new EdgeIdLabeler<E>()).execute(this,other);
}"
95844,"/** 
 * {@inheritDoc}
 */
@Override public DataSet<Boolean> equalsByElementData(LogicalGraph<G,V,E> other){
  return new EqualityByElementData<G,V,E>().execute(this,other);
}","/** 
 * {@inheritDoc}
 */
@Override public DataSet<Boolean> equalsByElementData(LogicalGraph<G,V,E> other){
  return new GraphEquality<>(new GraphHeadEmptyLabeler<G>(),new VertexDataLabeler<V>(),new EdgeDataLabeler<E>()).execute(this,other);
}"
95845,"/** 
 * {@inheritDoc}
 */
@Override public DataSet<Boolean> equalsByElementIds(LogicalGraph<G,V,E> other){
  return new EqualityByElementIds<G,V,E>().execute(this,other);
}","/** 
 * {@inheritDoc}
 */
@Override public DataSet<Boolean> equalsByElementIds(LogicalGraph<G,V,E> other){
  return new GraphEquality<>(new GraphHeadEmptyLabeler<G>(),new VertexIdLabeler<V>(),new EdgeIdLabeler<E>()).execute(this,other);
}"
95846,"@Override public Boolean reduce(Boolean a,Boolean b) throws Exception {
  return a && b;
}","public static DataSet<Boolean> reduce(DataSet<Boolean> d){
  return d.reduce(new And());
}"
95847,"@Override public Boolean reduce(Boolean first,Boolean second) throws Exception {
  return first || second;
}","public static DataSet<Boolean> reduce(DataSet<Boolean> d){
  return d.reduce(new Or());
}"
95848,"/** 
 * Initializes edges and their cache.
 */
private void initEdges(){
  for (  Edge e : gdlHandler.getEdges()) {
    if (!edgeIds.containsKey(e.getId())) {
      initEdge(e);
    }
  }
  for (  Map.Entry<String,Edge> e : gdlHandler.getEdgeCache().entrySet()) {
    updateEdgeCache(e.getKey(),e.getValue());
  }
}","/** 
 * Initializes edges and their cache.
 */
private void initEdges(){
  for (  Edge e : gdlHandler.getEdges()) {
    initEdge(e);
  }
  for (  Map.Entry<String,Edge> e : gdlHandler.getEdgeCache().entrySet()) {
    updateEdgeCache(e.getKey(),e.getValue());
  }
}"
95849,"/** 
 * Creates a new EPGMEdge from the GDL Loader.
 * @param e edge from GDL loader
 * @return EPGM edge
 */
private E initEdge(Edge e){
  E edge=config.getEdgeFactory().createEdge(e.getLabel(),vertexIds.get(e.getSourceVertexId()),vertexIds.get(e.getTargetVertexId()),PropertyList.createFromMap(e.getProperties()),createGradoopIdSet(e));
  edgeIds.put(e.getId(),edge.getId());
  edges.put(edge.getId(),edge);
  return edge;
}","/** 
 * Creates a new EPGMEdge from the GDL Loader.
 * @param e edge from GDL loader
 * @return EPGM edge
 */
private E initEdge(Edge e){
  E edge;
  if (!edgeIds.containsKey(e.getId())) {
    edge=config.getEdgeFactory().createEdge(e.getLabel(),vertexIds.get(e.getSourceVertexId()),vertexIds.get(e.getTargetVertexId()),PropertyList.createFromMap(e.getProperties()),createGradoopIdSet(e));
    edgeIds.put(e.getId(),edge.getId());
    edges.put(edge.getId(),edge);
  }
 else {
    edge=edges.get(edgeIds.get(e.getId()));
    edge.setGraphIds(createGradoopIdSet(e));
  }
  return edge;
}"
95850,"/** 
 * Creates a new EPGMVertex from the GDL Loader.
 * @param v vertex from GDL Loader
 * @return EPGM Vertex
 */
private V initVertex(Vertex v){
  V vertex=config.getVertexFactory().createVertex(v.getLabel(),PropertyList.createFromMap(v.getProperties()),createGradoopIdSet(v));
  vertexIds.put(v.getId(),vertex.getId());
  vertices.put(vertex.getId(),vertex);
  return vertex;
}","/** 
 * Creates a new EPGMVertex from the GDL Loader or updates an existing one.
 * @param v vertex from GDL Loader
 * @return EPGM Vertex
 */
private V initVertex(Vertex v){
  V vertex;
  if (!vertexIds.containsKey(v.getId())) {
    vertex=config.getVertexFactory().createVertex(v.getLabel(),PropertyList.createFromMap(v.getProperties()),createGradoopIdSet(v));
    vertexIds.put(v.getId(),vertex.getId());
    vertices.put(vertex.getId(),vertex);
  }
 else {
    vertex=vertices.get(vertexIds.get(v.getId()));
    vertex.setGraphIds(createGradoopIdSet(v));
  }
  return vertex;
}"
95851,"/** 
 * Initializes vertices and their cache.
 */
private void initVertices(){
  for (  Vertex v : gdlHandler.getVertices()) {
    if (!vertexIds.containsKey(v.getId())) {
      initVertex(v);
    }
  }
  for (  Map.Entry<String,Vertex> e : gdlHandler.getVertexCache().entrySet()) {
    updateVertexCache(e.getKey(),e.getValue());
  }
}","/** 
 * Initializes vertices and their cache.
 */
private void initVertices(){
  for (  Vertex v : gdlHandler.getVertices()) {
    initVertex(v);
  }
  for (  Map.Entry<String,Vertex> e : gdlHandler.getVertexCache().entrySet()) {
    updateVertexCache(e.getKey(),e.getValue());
  }
}"
95852,"/** 
 * Constructor
 * @param maxIterations Counter to define maximal iteration for the algorithm
 */
public LabelPropagation(int maxIterations,String propertyKey){
  this.maxIterations=maxIterations;
  this.propertyKey=propertyKey;
}","/** 
 * Constructor
 * @param maxIterations Counter to define maximal iteration for the algorithm
 * @param propertyKey   Property key to access the label value
 */
public LabelPropagation(int maxIterations,String propertyKey){
  this.maxIterations=maxIterations;
  this.propertyKey=propertyKey;
}"
95853,"/** 
 * {@inheritDoc}
 */
@Override public LogicalGraph<G,V,E> execute(LogicalGraph<G,V,E> logicalGraph){
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Vertex<GradoopId,PropertyValue>> vertices=logicalGraph.getVertices().map(new VertexToGellyVertexMapper<V>(propertyKey));
  DataSet<Edge<GradoopId,NullValue>> edges=logicalGraph.getEdges().map(new EdgeToGellyEdgeMapper<E>());
  Graph<GradoopId,PropertyValue,NullValue> gellyGraph=Graph.fromDataSet(vertices,edges,env);
  try {
    gellyGraph=gellyGraph.run(new LabelPropagationAlgorithm(this.maxIterations));
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  DataSet<V> labeledVertices=gellyGraph.getVertices().join(logicalGraph.getVertices()).where(0).equalTo(new Id<V>()).with(new LPVertexJoin<V>(propertyKey));
  return LogicalGraph.fromDataSets(labeledVertices,logicalGraph.getEdges(),logicalGraph.getConfig());
}","/** 
 * {@inheritDoc}
 */
@Override public LogicalGraph<G,V,E> execute(LogicalGraph<G,V,E> logicalGraph){
  ExecutionEnvironment env=ExecutionEnvironment.getExecutionEnvironment();
  DataSet<Vertex<GradoopId,PropertyValue>> vertices=logicalGraph.getVertices().map(new VertexToGellyVertexMapper<V>(propertyKey));
  DataSet<Edge<GradoopId,NullValue>> edges=logicalGraph.getEdges().map(new EdgeToGellyEdgeMapper<E>());
  Graph<GradoopId,PropertyValue,NullValue> gellyGraph=Graph.fromDataSet(vertices,edges,env);
  gellyGraph=gellyGraph.runVertexCentricIteration(new LPUpdateFunction(),new LPMessageFunction(),maxIterations);
  DataSet<V> labeledVertices=gellyGraph.getVertices().join(logicalGraph.getVertices()).where(0).equalTo(new Id<V>()).with(new LPVertexJoin<V>(propertyKey));
  return LogicalGraph.fromDataSets(labeledVertices,logicalGraph.getEdges(),logicalGraph.getConfig());
}"
95854,"public EdgeToGellyEdgeMapper(){
  reuseEdge=new Edge<>();
}","/** 
 * Constructor
 */
public EdgeToGellyEdgeMapper(){
  reuseEdge=new Edge<>();
}"
95855,"@Override public Boolean map(Boolean b) throws Exception {
  return !b;
}","public static DataSet<Boolean> map(DataSet<Boolean> b){
  return b.map(new Not());
}"
95856,"@Override public DataSet<Boolean> execute(GraphCollection<G,V,E> firstCollection,GraphCollection<G,V,E> secondCollection){
  DataSet<Tuple2<String,Long>> firstGraphLabels=labelGraphs(firstCollection);
  DataSet<Tuple2<String,Long>> secondGraphLabels=labelGraphs(secondCollection);
  DataSet<Long> firstLabelCount=Count.count(firstGraphLabels);
  DataSet<Long> matchingLabelCount=Count.count(firstGraphLabels.join(secondGraphLabels).where(0,1).equalTo(0,1));
  return Or.union(And.cross(firstCollection.isEmpty(),secondCollection.isEmpty()),Equals.cross(firstLabelCount,matchingLabelCount));
}","@Override public DataSet<Boolean> execute(GraphCollection<G,V,E> firstCollection,GraphCollection<G,V,E> secondCollection){
  DataSet<Tuple2<String,Long>> firstGraphLabels=labelGraphs(firstCollection);
  DataSet<Tuple2<String,Long>> secondGraphLabels=labelGraphs(secondCollection);
  DataSet<Long> firstLabelCount=Count.count(firstGraphLabels);
  DataSet<Long> matchingLabelCount=Count.count(firstGraphLabels.join(secondGraphLabels).where(0,1).equalTo(0,1));
  DataSet<Boolean> firstCollectionIsEmpty=firstCollection.isEmpty();
  return Or.union(And.cross(firstCollectionIsEmpty,secondCollection.isEmpty()),And.cross(Not.map(firstCollectionIsEmpty),Equals.cross(firstLabelCount,matchingLabelCount)));
}"
95857,"@Override public DataSet<Boolean> execute(GraphCollection<G,V,E> firstCollection,GraphCollection<G,V,E> secondCollection){
  DataSet<Tuple3<GradoopIdSet,GradoopIdSet,Long>> firstGraphsWithCount=getGraphElementIdsWithCount(firstCollection);
  DataSet<Tuple3<GradoopIdSet,GradoopIdSet,Long>> secondGraphsWithCount=getGraphElementIdsWithCount(secondCollection);
  DataSet<Long> distinctFirstGraphCount=Count.count(firstGraphsWithCount);
  DataSet<Long> matchingIdCount=Count.count(firstGraphsWithCount.join(secondGraphsWithCount).where(0,1,2).equalTo(0,1,2));
  return Or.union(And.cross(firstCollection.isEmpty(),secondCollection.isEmpty()),Equals.cross(distinctFirstGraphCount,matchingIdCount));
}","@Override public DataSet<Boolean> execute(GraphCollection<G,V,E> firstCollection,GraphCollection<G,V,E> secondCollection){
  DataSet<Tuple3<GradoopIdSet,GradoopIdSet,Long>> firstGraphsWithCount=getGraphElementIdsWithCount(firstCollection);
  DataSet<Tuple3<GradoopIdSet,GradoopIdSet,Long>> secondGraphsWithCount=getGraphElementIdsWithCount(secondCollection);
  DataSet<Long> distinctFirstGraphCount=Count.count(firstGraphsWithCount);
  DataSet<Long> matchingIdCount=Count.count(firstGraphsWithCount.join(secondGraphsWithCount).where(0,1,2).equalTo(0,1,2));
  DataSet<Boolean> firstCollectionIsEmpty=firstCollection.isEmpty();
  return Or.union(And.cross(firstCollectionIsEmpty,secondCollection.isEmpty()),And.cross(Not.map(firstCollectionIsEmpty),Equals.cross(distinctFirstGraphCount,matchingIdCount)));
}"
95858,"@Override public DataSet<Boolean> execute(GraphCollection<G,V,E> firstCollection,GraphCollection<G,V,E> secondCollection){
  DataSet<Tuple2<GradoopId,Long>> firstGraphIdsWithCount=getIdsWithCount(firstCollection);
  DataSet<Tuple2<GradoopId,Long>> secondGraphIdsWithCount=getIdsWithCount(secondCollection);
  DataSet<Long> distinctFirstIdCount=Count.count(firstGraphIdsWithCount);
  DataSet<Long> matchingIdCount=Count.count(firstGraphIdsWithCount.join(secondGraphIdsWithCount).where(0,1).equalTo(0,1));
  return Or.union(And.cross(firstCollection.isEmpty(),secondCollection.isEmpty()),Equals.cross(distinctFirstIdCount,matchingIdCount));
}","@Override public DataSet<Boolean> execute(GraphCollection<G,V,E> firstCollection,GraphCollection<G,V,E> secondCollection){
  DataSet<Tuple2<GradoopId,Long>> firstGraphIdsWithCount=getIdsWithCount(firstCollection);
  DataSet<Tuple2<GradoopId,Long>> secondGraphIdsWithCount=getIdsWithCount(secondCollection);
  DataSet<Long> distinctFirstIdCount=Count.count(firstGraphIdsWithCount);
  DataSet<Long> matchingIdCount=Count.count(firstGraphIdsWithCount.join(secondGraphIdsWithCount).where(0,1).equalTo(0,1));
  DataSet<Boolean> firstCollectionIsEmpty=firstCollection.isEmpty();
  return Or.union(And.cross(firstCollectionIsEmpty,secondCollection.isEmpty()),And.cross(Not.map(firstCollectionIsEmpty),Equals.cross(distinctFirstIdCount,matchingIdCount)));
}"
95859,"@Test public void testBasicStructuralEquality(){
  String asciiGraphs=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  FlinkAsciiGraphLoader<GraphHeadPojo,VertexPojo,EdgePojo> loader=getLoaderFromString(asciiGraphs);
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g1=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g2=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g3=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g4=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g5=loader.getLogicalGraphByVariable(""String_Node_Str"");
  EqualityByElementData<GraphHeadPojo,VertexPojo,EdgePojo> equals=new EqualityByElementData<>();
  collectAndAssertTrue(equals.execute(g1,g2));
  collectAndAssertFalse(equals.execute(g1,g3));
  collectAndAssertFalse(equals.execute(g1,g4));
  collectAndAssertFalse(equals.execute(g1,g5));
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> emptyGraph=LogicalGraph.createEmptyGraph(getConfig());
  collectAndAssertTrue(equals.execute(emptyGraph,emptyGraph));
  collectAndAssertFalse(equals.execute(g1,emptyGraph));
}","@Test public void testBasicStructuralEquality(){
  String asciiGraphs=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  FlinkAsciiGraphLoader<GraphHeadPojo,VertexPojo,EdgePojo> loader=getLoaderFromString(asciiGraphs);
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g1=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g2=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g3=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g4=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g5=loader.getLogicalGraphByVariable(""String_Node_Str"");
  EqualityByElementData<GraphHeadPojo,VertexPojo,EdgePojo> equals=new EqualityByElementData<>();
  collectAndAssertTrue(equals.execute(g1,g2));
  collectAndAssertFalse(equals.execute(g1,g3));
  collectAndAssertFalse(equals.execute(g1,g4));
  collectAndAssertFalse(equals.execute(g1,g5));
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> emptyGraph=LogicalGraph.createEmptyGraph(getConfig());
  collectAndAssertTrue(equals.execute(emptyGraph,emptyGraph));
  collectAndAssertFalse(equals.execute(g1,emptyGraph));
  collectAndAssertFalse(equals.execute(emptyGraph,g1));
}"
95860,"@Test public void testExecute(){
  String asciiGraphs=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  FlinkAsciiGraphLoader<GraphHeadPojo,VertexPojo,EdgePojo> loader=getLoaderFromString(asciiGraphs);
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g1=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g2=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g3=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g4=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g5=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g6=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g7=loader.getLogicalGraphByVariable(""String_Node_Str"");
  EqualityByElementIds<GraphHeadPojo,VertexPojo,EdgePojo> equals=new EqualityByElementIds<>();
  collectAndAssertTrue(equals.execute(g1,g1));
  collectAndAssertTrue(equals.execute(g1,g2));
  collectAndAssertFalse(equals.execute(g1,g3));
  collectAndAssertFalse(equals.execute(g1,g4));
  collectAndAssertTrue(equals.execute(g5,g5));
  collectAndAssertTrue(equals.execute(g5,g6));
  collectAndAssertFalse(equals.execute(g5,g7));
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> emptyGraph=LogicalGraph.createEmptyGraph(getConfig());
  collectAndAssertTrue(equals.execute(emptyGraph,emptyGraph));
  collectAndAssertFalse(equals.execute(g1,emptyGraph));
}","@Test public void testExecute(){
  String asciiGraphs=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  FlinkAsciiGraphLoader<GraphHeadPojo,VertexPojo,EdgePojo> loader=getLoaderFromString(asciiGraphs);
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g1=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g2=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g3=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g4=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g5=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g6=loader.getLogicalGraphByVariable(""String_Node_Str"");
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> g7=loader.getLogicalGraphByVariable(""String_Node_Str"");
  EqualityByElementIds<GraphHeadPojo,VertexPojo,EdgePojo> equals=new EqualityByElementIds<>();
  collectAndAssertTrue(equals.execute(g1,g1));
  collectAndAssertTrue(equals.execute(g1,g2));
  collectAndAssertFalse(equals.execute(g1,g3));
  collectAndAssertFalse(equals.execute(g1,g4));
  collectAndAssertTrue(equals.execute(g5,g5));
  collectAndAssertTrue(equals.execute(g5,g6));
  collectAndAssertFalse(equals.execute(g5,g7));
  LogicalGraph<GraphHeadPojo,VertexPojo,EdgePojo> emptyGraph=LogicalGraph.createEmptyGraph(getConfig());
  collectAndAssertTrue(equals.execute(emptyGraph,emptyGraph));
  collectAndAssertFalse(equals.execute(g1,emptyGraph));
  collectAndAssertFalse(equals.execute(emptyGraph,g1));
}"
95861,"@Test public void testBasicStructuralEquality(){
  String asciiGraphs=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  FlinkAsciiGraphLoader<GraphHeadPojo,VertexPojo,EdgePojo> loader=getLoaderFromString(asciiGraphs);
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c12=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c67=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c126=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c167=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  EqualityByGraphData<GraphHeadPojo,VertexPojo,EdgePojo> equals=new EqualityByGraphData<>();
  collectAndAssertTrue(equals.execute(c12,c67));
  collectAndAssertTrue(equals.execute(c126,c167));
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c36=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c46=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c56=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  collectAndAssertFalse(equals.execute(c12,c167));
  collectAndAssertFalse(equals.execute(c12,c36));
  collectAndAssertFalse(equals.execute(c12,c46));
  collectAndAssertFalse(equals.execute(c12,c56));
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> emptyCollection=GraphCollection.createEmptyCollection(getConfig());
  collectAndAssertTrue(equals.execute(emptyCollection,emptyCollection));
  collectAndAssertFalse(equals.execute(c12,emptyCollection));
}","@Test public void testBasicStructuralEquality(){
  String asciiGraphs=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  FlinkAsciiGraphLoader<GraphHeadPojo,VertexPojo,EdgePojo> loader=getLoaderFromString(asciiGraphs);
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c12=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c67=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c126=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c167=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  EqualityByGraphData<GraphHeadPojo,VertexPojo,EdgePojo> equals=new EqualityByGraphData<>();
  collectAndAssertTrue(equals.execute(c12,c67));
  collectAndAssertTrue(equals.execute(c126,c167));
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c36=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c46=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c56=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  collectAndAssertFalse(equals.execute(c12,c167));
  collectAndAssertFalse(equals.execute(c12,c36));
  collectAndAssertFalse(equals.execute(c12,c46));
  collectAndAssertFalse(equals.execute(c12,c56));
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> emptyCollection=GraphCollection.createEmptyCollection(getConfig());
  collectAndAssertTrue(equals.execute(emptyCollection,emptyCollection));
  collectAndAssertFalse(equals.execute(c12,emptyCollection));
  collectAndAssertFalse(equals.execute(emptyCollection,c12));
}"
95862,"@Test public void testBasicStructuralEquality(){
  String asciiGraphs=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  FlinkAsciiGraphLoader<GraphHeadPojo,VertexPojo,EdgePojo> loader=getLoaderFromString(asciiGraphs);
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c12=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c67=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c126=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c167=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  EqualityByGraphElementData<GraphHeadPojo,VertexPojo,EdgePojo> equals=new EqualityByGraphElementData<>();
  collectAndAssertTrue(equals.execute(c12,c67));
  collectAndAssertTrue(equals.execute(c126,c167));
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c36=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c46=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c56=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  collectAndAssertFalse(equals.execute(c12,c167));
  collectAndAssertFalse(equals.execute(c12,c36));
  collectAndAssertFalse(equals.execute(c12,c46));
  collectAndAssertFalse(equals.execute(c12,c56));
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> emptyCollection=GraphCollection.createEmptyCollection(getConfig());
  collectAndAssertTrue(equals.execute(emptyCollection,emptyCollection));
  collectAndAssertFalse(equals.execute(c12,emptyCollection));
}","@Test public void testBasicStructuralEquality(){
  String asciiGraphs=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  FlinkAsciiGraphLoader<GraphHeadPojo,VertexPojo,EdgePojo> loader=getLoaderFromString(asciiGraphs);
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c12=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c67=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c126=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c167=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  EqualityByGraphElementData<GraphHeadPojo,VertexPojo,EdgePojo> equals=new EqualityByGraphElementData<>();
  collectAndAssertTrue(equals.execute(c12,c67));
  collectAndAssertTrue(equals.execute(c126,c167));
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c36=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c46=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c56=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  collectAndAssertFalse(equals.execute(c12,c167));
  collectAndAssertFalse(equals.execute(c12,c36));
  collectAndAssertFalse(equals.execute(c12,c46));
  collectAndAssertFalse(equals.execute(c12,c56));
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> emptyCollection=GraphCollection.createEmptyCollection(getConfig());
  collectAndAssertTrue(equals.execute(emptyCollection,emptyCollection));
  collectAndAssertFalse(equals.execute(c12,emptyCollection));
  collectAndAssertFalse(equals.execute(emptyCollection,c12));
}"
95863,"@Test public void testExecute() throws Exception {
  EqualityByGraphElementIds<GraphHeadPojo,VertexPojo,EdgePojo> equals=new EqualityByGraphElementIds<>();
  String asciiGraphs=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  FlinkAsciiGraphLoader<GraphHeadPojo,VertexPojo,EdgePojo> loader=getLoaderFromString(asciiGraphs);
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c1=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c2=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c5=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  collectAndAssertTrue(equals.execute(c1,c2));
  collectAndAssertFalse(equals.execute(c1,c5));
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c3=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c4=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  collectAndAssertFalse(equals.execute(c3,c4));
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> emptyCollection=GraphCollection.createEmptyCollection(getConfig());
  collectAndAssertTrue(equals.execute(emptyCollection,emptyCollection));
  collectAndAssertFalse(equals.execute(c1,emptyCollection));
}","@Test public void testExecute() throws Exception {
  EqualityByGraphElementIds<GraphHeadPojo,VertexPojo,EdgePojo> equals=new EqualityByGraphElementIds<>();
  String asciiGraphs=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  FlinkAsciiGraphLoader<GraphHeadPojo,VertexPojo,EdgePojo> loader=getLoaderFromString(asciiGraphs);
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c1=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c2=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c5=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  collectAndAssertTrue(equals.execute(c1,c2));
  collectAndAssertFalse(equals.execute(c1,c5));
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c3=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c4=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  collectAndAssertFalse(equals.execute(c3,c4));
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> emptyCollection=GraphCollection.createEmptyCollection(getConfig());
  collectAndAssertTrue(equals.execute(emptyCollection,emptyCollection));
  collectAndAssertFalse(equals.execute(c1,emptyCollection));
  collectAndAssertFalse(equals.execute(emptyCollection,c1));
}"
95864,"@Test public void testEmpty(){
  String asciiGraphs=""String_Node_Str"";
  FlinkAsciiGraphLoader<GraphHeadPojo,VertexPojo,EdgePojo> loader=getLoaderFromString(asciiGraphs);
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c1=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c2=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c3=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  EqualityByGraphIds<GraphHeadPojo,VertexPojo,EdgePojo> equals=new EqualityByGraphIds<>();
  collectAndAssertTrue(equals.execute(c1,c2));
  collectAndAssertFalse(equals.execute(c1,c3));
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> emptyCollection=GraphCollection.createEmptyCollection(getConfig());
  collectAndAssertTrue(equals.execute(emptyCollection,emptyCollection));
  collectAndAssertFalse(equals.execute(c1,emptyCollection));
  collectAndAssertFalse(equals.execute(c3,emptyCollection));
}","@Test public void testEmpty(){
  String asciiGraphs=""String_Node_Str"";
  FlinkAsciiGraphLoader<GraphHeadPojo,VertexPojo,EdgePojo> loader=getLoaderFromString(asciiGraphs);
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c1=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c2=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> c3=loader.getGraphCollectionByVariables(""String_Node_Str"",""String_Node_Str"");
  EqualityByGraphIds<GraphHeadPojo,VertexPojo,EdgePojo> equals=new EqualityByGraphIds<>();
  collectAndAssertTrue(equals.execute(c1,c2));
  collectAndAssertFalse(equals.execute(c1,c3));
  GraphCollection<GraphHeadPojo,VertexPojo,EdgePojo> emptyCollection=GraphCollection.createEmptyCollection(getConfig());
  collectAndAssertTrue(equals.execute(emptyCollection,emptyCollection));
  collectAndAssertFalse(equals.execute(c1,emptyCollection));
  collectAndAssertFalse(equals.execute(c3,emptyCollection));
  collectAndAssertFalse(equals.execute(emptyCollection,c1));
}"
95865,"/** 
 * {@inheritDoc}
 */
@Override protected LogicalGraph<G,V,E> executeInternal(LogicalGraph<G,V,E> firstGraph,LogicalGraph<G,V,E> secondGraph){
  DataSet<V> newVertexSet=firstGraph.getVertices().filter(new NotInGraphBroadcast<V>()).withBroadcastSet(secondGraph.getGraphHead(),NotInGraphBroadcast.GRAPH_ID);
  DataSet<E> newEdgeSet=firstGraph.getEdges().filter(new NotInGraphBroadcast<E>()).withBroadcastSet(secondGraph.getGraphHead(),NotInGraphBroadcast.GRAPH_ID);
  return LogicalGraph.fromDataSets(newVertexSet,newEdgeSet,firstGraph.getConfig());
}","/** 
 * {@inheritDoc}
 */
@Override protected LogicalGraph<G,V,E> executeInternal(LogicalGraph<G,V,E> firstGraph,LogicalGraph<G,V,E> secondGraph){
  DataSet<GradoopId> graphId=secondGraph.getGraphHead().map(new Id<G>());
  DataSet<V> newVertexSet=firstGraph.getVertices().filter(new NotInGraphBroadcast<V>()).withBroadcastSet(graphId,NotInGraphBroadcast.GRAPH_ID);
  DataSet<E> newEdgeSet=firstGraph.getEdges().filter(new NotInGraphBroadcast<E>()).withBroadcastSet(graphId,NotInGraphBroadcast.GRAPH_ID);
  return LogicalGraph.fromDataSets(newVertexSet,newEdgeSet,firstGraph.getConfig());
}"
95866,"@Override public boolean filter(Vertex<Long,VD> vertex) throws Exception {
  return randomGenerator.nextFloat() < threshold;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean filter(Vertex<Long,VD> vertex) throws Exception {
  return randomGenerator.nextFloat() < threshold;
}"
95867,"public VertexRandomFilter(Float sampleSize,Long randomSeed){
  threshold=sampleSize;
  randomGenerator=(randomSeed != null) ? new Random(randomSeed) : new Random();
}","/** 
 * Creates a new filter instance.
 * @param sampleSize relative sample size
 * @param randomSeed random seed (can be {@code} null)
 */
public VertexRandomFilter(Float sampleSize,Long randomSeed){
  threshold=sampleSize;
  randomGenerator=(randomSeed != null) ? new Random(randomSeed) : new Random();
}"
95868,"public RandomNodeSampling(Float sampleSize,Long randomSeed){
  this.sampleSize=sampleSize;
  this.randomSeed=randomSeed;
}","/** 
 * Creates new RandomNodeSampling instance.
 * @param sampleSize relative sample size
 * @param randomSeed random seed value (can be {@code null})
 */
public RandomNodeSampling(Float sampleSize,Long randomSeed){
  this.sampleSize=sampleSize;
  this.randomSeed=randomSeed;
}"
95869,"/** 
 * compute the new subgraphs created by the SplitBy
 * @param logicalGraph the input graph
 * @param vertices the computed vertices with their graphs
 * @return a DataSet containing all newly created subgraphs
 */
private DataSet<Subgraph<Long,GD>> computeNewSubgraphs(LogicalGraph<VD,ED,GD> logicalGraph,DataSet<Vertex<Long,VD>> vertices){
  KeySelector<Vertex<Long,VD>,Long> propertySelector=new LongFromVertexSelector<>(function);
  GraphDataFactory<GD> gdFactory=logicalGraph.getGraphDataFactory();
  return vertices.groupBy(propertySelector).reduceGroup(new SubgraphsFromGroupsReducer<>(function,gdFactory));
}","/** 
 * compute the new subgraphs created by the SplitBy
 * @param logicalGraph the input graph
 * @param vertices     the computed vertices with their graphs
 * @return a DataSet containing all newly created subgraphs
 */
private DataSet<Subgraph<Long,GD>> computeNewSubgraphs(LogicalGraph<VD,ED,GD> logicalGraph,DataSet<Vertex<Long,VD>> vertices){
  KeySelector<Vertex<Long,VD>,Long> propertySelector=new LongFromVertexSelector<>(function);
  GraphDataFactory<GD> gdFactory=logicalGraph.getGraphDataFactory();
  return vertices.groupBy(propertySelector).reduceGroup(new SubgraphsFromGroupsReducer<>(function,gdFactory));
}"
95870,"/** 
 * compute the edges which source and target are in the same newly created graph
 * @param logicalGraph the input graph
 * @param vertices the computed vertices with their graphs
 * @param subgraphs the computed subgraphs
 * @return a DataSet containing all newly created edges, each edge has anew graph in its graph set
 */
private DataSet<Edge<Long,ED>> computeNewEdges(LogicalGraph<VD,ED,GD> logicalGraph,DataSet<Vertex<Long,VD>> vertices,DataSet<Subgraph<Long,GD>> subgraphs){
  final Graph<Long,VD,ED> graph=logicalGraph.getGellyGraph();
  DataSet<Tuple3<Long,Long,Long>> edgeVertexVertex=graph.getEdges().map(new EdgeToTupleMapper<ED>());
  DataSet<Tuple3<Long,Set<Long>,Long>> edgeGraphsVertex=edgeVertexVertex.join(vertices).where(1).equalTo(0).with(new JoinEdgeTupleWithSourceGraphs<VD>());
  DataSet<Tuple3<Long,Set<Long>,Set<Long>>> edgeGraphsGraphs=edgeGraphsVertex.join(vertices).where(2).equalTo(0).with(new JoinEdgeTupleWithTargetGraphs<VD>());
  DataSet<Set<Long>> newSubgraphIdentifiers=subgraphs.map(new MapSubgraphIdToSet<GD>()).reduce(new ReduceSets());
  DataSet<Tuple4<Long,Set<Long>,Set<Long>,Set<Long>>> edgesWithSubgraphs=edgeGraphsGraphs.crossWithTiny(newSubgraphIdentifiers).with(new CrossEdgesWithGraphSet());
  DataSet<Tuple2<Long,Set<Long>>> newSubgraphs=edgesWithSubgraphs.flatMap(new CheckEdgesSourceTargetGraphs());
  return graph.getEdges().join(newSubgraphs).where(new KeySelectors.EdgeKeySelector<ED>()).equalTo(0).with(new JoinEdgeTuplesWithEdges<ED>());
}","/** 
 * compute the edges which source and target are in the same newly created graph
 * @param logicalGraph the input graph
 * @param vertices     the computed vertices with their graphs
 * @param subgraphs    the computed subgraphs
 * @return a DataSet containing all newly created edges, each edge has anew graph in its graph set
 */
private DataSet<Edge<Long,ED>> computeNewEdges(LogicalGraph<VD,ED,GD> logicalGraph,DataSet<Vertex<Long,VD>> vertices,DataSet<Subgraph<Long,GD>> subgraphs){
  final Graph<Long,VD,ED> graph=logicalGraph.getGellyGraph();
  DataSet<Tuple3<Long,Long,Long>> edgeVertexVertex=graph.getEdges().map(new EdgeToTupleMapper<ED>());
  DataSet<Tuple3<Long,Set<Long>,Long>> edgeGraphsVertex=edgeVertexVertex.join(vertices).where(1).equalTo(0).with(new JoinEdgeTupleWithSourceGraphs<VD>());
  DataSet<Tuple3<Long,Set<Long>,Set<Long>>> edgeGraphsGraphs=edgeGraphsVertex.join(vertices).where(2).equalTo(0).with(new JoinEdgeTupleWithTargetGraphs<VD>());
  DataSet<Set<Long>> newSubgraphIdentifiers=subgraphs.map(new MapSubgraphIdToSet<GD>()).reduce(new ReduceSets());
  DataSet<Tuple4<Long,Set<Long>,Set<Long>,Set<Long>>> edgesWithSubgraphs=edgeGraphsGraphs.crossWithTiny(newSubgraphIdentifiers).with(new CrossEdgesWithGraphSet());
  DataSet<Tuple2<Long,Set<Long>>> newSubgraphs=edgesWithSubgraphs.flatMap(new CheckEdgesSourceTargetGraphs());
  return graph.getEdges().join(newSubgraphs).where(new KeySelectors.EdgeKeySelector<ED>()).equalTo(0).with(new JoinEdgeTuplesWithEdges<ED>());
}"
95871,"private void initList(){
  if (partitionHistory == null) {
    this.partitionHistory=Lists.newArrayList();
  }
}","/** 
 * Initialize the PartitionHistoryList
 */
private void initList(){
  if (partitionHistory == null) {
    this.partitionHistory=Lists.newArrayList();
  }
}"
95872,"/** 
 * Method to add a partition to partition history
 */
public void addToPartitionHistory(int partition){
  initList();
  this.partitionHistory.add(partition);
}","/** 
 * Method to add a partition to partition history
 * @param partition the vertex had
 */
public void addToPartitionHistory(int partition){
  initList();
  this.partitionHistory.add(partition);
}"
95873,"private int getHighestWeight(Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex,Iterable<IntWritable> messages){
  int desiredPartition=0;
  Map<Integer,Integer> countNeighbours=new HashMap<>();
  Map<Integer,Float> partitionWeight=new HashMap<>();
  for (  IntWritable message : messages) {
    if (!countNeighbours.containsKey(message.get())) {
      countNeighbours.put(message.get(),1);
    }
 else {
      countNeighbours.put(message.get(),countNeighbours.get(message.get()) + 1);
    }
  }
  int partitionCount=Integer.valueOf(getConf().get(NUMBER_OF_PARTITIONS));
  int totalNeighbours=countNeighbours.size();
  for (int i=0; i < partitionCount; i++) {
    String aggregator=KWAY_CAPACITY_AGGREGATOR_PREFIX + i;
    int load=getAggregatedValue(aggregator);
    int numNeighboursInI=countNeighbours.get(i);
    float weight=(1 / load) * numNeighboursInI / totalNeighbours;
    partitionWeight.put(i,weight);
  }
  float highestWeight=0;
  float secondHighestWeight=0;
  int secondKey=0;
  for (  Map.Entry<Integer,Float> entry : partitionWeight.entrySet()) {
    if (highestWeight < entry.getValue()) {
      secondHighestWeight=highestWeight;
      secondKey=desiredPartition;
      desiredPartition=entry.getKey();
      highestWeight=entry.getValue();
    }
  }
  if (secondHighestWeight == highestWeight) {
    if (vertex.getValue().getCurrentVertexValue().get() == desiredPartition || vertex.getValue().getCurrentVertexValue().get() == secondKey) {
      desiredPartition=vertex.getValue().getCurrentVertexValue().get();
    }
  }
  return desiredPartition;
}","private int getHighestWeight(Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex,Iterable<IntWritable> messages){
  int desiredPartition=0;
  Map<Integer,Integer> countNeighbours=new HashMap<>();
  Map<Integer,Double> partitionWeight=new HashMap<>();
  for (  IntWritable message : messages) {
    if (!countNeighbours.containsKey(message.get())) {
      countNeighbours.put(message.get(),1);
    }
 else {
      countNeighbours.put(message.get(),countNeighbours.get(message.get()) + 1);
    }
  }
  int partitionCount=Integer.valueOf(getConf().get(NUMBER_OF_PARTITIONS));
  int totalNeighbours=countNeighbours.size();
  for (int i=0; i < partitionCount; i++) {
    String aggregator=KWAY_CAPACITY_AGGREGATOR_PREFIX + i;
    int load=getAggregatedValue(aggregator);
    int numNeighboursInI=countNeighbours.get(i);
    double weight=(1 / load) * numNeighboursInI / totalNeighbours;
    partitionWeight.put(i,weight);
  }
  double highestWeight=0;
  double secondHighestWeight=0;
  int secondKey=0;
  for (  Map.Entry<Integer,Double> entry : partitionWeight.entrySet()) {
    if (highestWeight < entry.getValue()) {
      secondHighestWeight=highestWeight;
      secondKey=desiredPartition;
      desiredPartition=entry.getKey();
      highestWeight=entry.getValue();
    }
  }
  if (secondHighestWeight == highestWeight) {
    if (vertex.getValue().getCurrentVertexValue().get() == desiredPartition || vertex.getValue().getCurrentVertexValue().get() == secondKey) {
      desiredPartition=vertex.getValue().getCurrentVertexValue().get();
    }
  }
  return desiredPartition;
}"
95874,"private GiraphConfiguration getConfiguration(){
  GiraphConfiguration conf=new GiraphConfiguration();
  conf.setComputationClass(KwayPartitioningComputation.class);
  conf.setMasterComputeClass(KwayPartitioningMasterComputation.class);
  conf.setVertexInputFormatClass(IntIntNullTextVertexInputFormat.class);
  conf.setVertexOutputFormatClass(IdWithValueTextOutputFormat.class);
  return conf;
}","private GiraphConfiguration getConfiguration(){
  GiraphConfiguration conf=new GiraphConfiguration();
  conf.setComputationClass(KwayPartitioningComputation.class);
  conf.setMasterComputeClass(KwayPartitioningMasterComputation.class);
  conf.setVertexInputFormatClass(KwayPartitioningInputFormat.class);
  conf.setVertexOutputFormatClass(KwayPartitioningOutputFormat.class);
  return conf;
}"
95875,"@Test public void testSmallConnectedGraph() throws Exception {
  String[] graph=PartitioningComputationTestHelper.getKwaySmallConnectedGraph();
  validateSmallConnectedGraphResult(computeResults(graph,2));
}","@Test public void testSmallConnectedGraph() throws Exception {
  String[] graph=PartitioningComputationTestHelper.getKwaySmallConnectedGraph();
  validateSmallConnectedGraphResult(computeResults(graph,3));
}"
95876,"/** 
 * The actual KwayPartitioning Computation
 * @param vertex   Vertex
 * @param messages Messages that were sent to this vertex in the previoussuperstep.
 * @throws IOException
 */
@Override public void compute(Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex,Iterable<IntWritable> messages) throws IOException {
  if (getSuperstep() == 0) {
    setVertexStartValue(vertex);
    String aggregator=KWAY_CAPACITY_AGGREGATOR_PREFIX + vertex.getValue().getCurrentVertexValue().get();
    notifyCapacityAggregator(aggregator,1);
    sendMessageToAllEdges(vertex,vertex.getValue().getCurrentVertexValue());
    vertex.voteToHalt();
  }
 else {
    if ((getSuperstep() % 2) == 0) {
      int desiredPartition=vertex.getValue().getLastVertexValue().get();
      boolean migrate=calculateThreshold(desiredPartition);
      if (migrate) {
        migrateVertex(vertex,desiredPartition);
        sendMessageToAllEdges(vertex,vertex.getValue().getCurrentVertexValue());
      }
 else {
        vertex.voteToHalt();
      }
    }
 else     if ((getSuperstep() % 2) == 1) {
      int desiredPartition=getDesiredPartition(vertex,messages);
      vertex.getValue().setLastVertexValue(new IntWritable(desiredPartition));
      int currentValue=vertex.getValue().getCurrentVertexValue().get();
      boolean changed=currentValue != desiredPartition;
      if (changed) {
        notifyDemandAggregator(desiredPartition);
        vertex.voteToHalt();
      }
    }
  }
  vertex.voteToHalt();
}","/** 
 * The actual KwayPartitioning Computation
 * @param vertex   Vertex
 * @param messages Messages that were sent to this vertex in the previoussuperstep.
 * @throws IOException
 */
@Override public void compute(Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex,Iterable<IntWritable> messages) throws IOException {
  k=Integer.valueOf(getConf().get(NUMBER_OF_PARTITIONS));
  if (getSuperstep() == 0) {
    setVertexStartValue(vertex);
    String aggregator=KWAY_CAPACITY_AGGREGATOR_PREFIX + vertex.getValue().getCurrentVertexValue().get();
    notifyCapacityAggregator(aggregator,1);
    sendMessageToAllEdges(vertex,vertex.getValue().getCurrentVertexValue());
    vertex.voteToHalt();
  }
 else {
    if ((getSuperstep() % 2) == 0) {
      int desiredPartition=vertex.getValue().getLastVertexValue().get();
      boolean migrate=doMigrate(desiredPartition);
      if (migrate) {
        migrateVertex(vertex,desiredPartition);
        sendMessageToAllEdges(vertex,vertex.getValue().getCurrentVertexValue());
      }
    }
 else     if ((getSuperstep() % 2) == 1) {
      int desiredPartition=getDesiredPartition(vertex,messages);
      vertex.getValue().setLastVertexValue(new IntWritable(desiredPartition));
      int currentValue=vertex.getValue().getCurrentVertexValue().get();
      boolean changed=currentValue != desiredPartition;
      if (changed) {
        notifyDemandAggregator(desiredPartition);
      }
    }
  }
  vertex.voteToHalt();
}"
95877,"private Map<Integer,Double> getPartitionWeight(Map<Integer,Integer> countNeighbours){
  Map<Integer,Double> partitionWeight=new HashMap<>();
  double partitionCount=Double.valueOf(getConf().get(NUMBER_OF_PARTITIONS));
  double totalNeighbours=countNeighbours.size();
  for (int i=0; i < partitionCount; i++) {
    String aggregator=KWAY_CAPACITY_AGGREGATOR_PREFIX + i;
    IntWritable aggregator_load=getAggregatedValue(aggregator);
    double load=aggregator_load.get();
    double numNeighboursInI=countNeighbours.get(i);
    double weight=numNeighboursInI / (load * totalNeighbours);
    partitionWeight.put(i,weight);
  }
  return partitionWeight;
}","private double[] getPartitionWeight(int[] partitionCount,int numEdges){
  double[] partitionWeights=new double[k];
  for (int i=0; i < k; i++) {
    String aggregator=KWAY_CAPACITY_AGGREGATOR_PREFIX + i;
    IntWritable aggregator_load=getAggregatedValue(aggregator);
    double load=aggregator_load.get();
    double numNeighboursInI=partitionCount[i];
    double weight=numNeighboursInI / (load * numEdges);
    partitionWeights[i]=weight;
  }
  return partitionWeights;
}"
95878,"private int getDesiredPartition(Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex,Iterable<IntWritable> messages){
  int desiredPartition=0;
  Map<Integer,Integer> countNeighbours=getCountNeighbours(messages);
  if (countNeighbours.size() != 0) {
    Map<Integer,Double> partitionWeight=getPartitionWeight(countNeighbours);
    double highestWeight=0;
    for (    Map.Entry<Integer,Double> entry : partitionWeight.entrySet()) {
      if (Double.compare(highestWeight,entry.getValue()) < 0) {
        desiredPartition=entry.getKey();
        highestWeight=entry.getValue();
      }
    }
  }
 else {
    return vertex.getValue().getCurrentVertexValue().get();
  }
  return desiredPartition;
}","private int getDesiredPartition(Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex,Iterable<IntWritable> messages){
  int currentPartition=vertex.getValue().getCurrentVertexValue().get();
  int desiredPartition=currentPartition;
  if (messages.iterator().hasNext()) {
    int[] countNeighbours=getCountNeighbours(messages);
    double[] partitionWeights=getPartitionWeight(countNeighbours,vertex.getNumEdges());
    double firstMax=Integer.MIN_VALUE;
    double secondMax=Integer.MIN_VALUE;
    int firstK=-1;
    int secondK=-1;
    for (int i=0; i < k; i++) {
      if (partitionWeights[i] >= firstMax) {
        secondMax=firstMax;
        firstMax=countNeighbours[i];
        secondK=firstK;
        firstK=i;
      }
    }
    if (firstMax == secondMax) {
      if (currentPartition != firstK && currentPartition != secondK) {
        desiredPartition=firstK;
      }
    }
 else {
      desiredPartition=firstK;
    }
  }
  return desiredPartition;
}"
95879,"private Map<Integer,Integer> getCountNeighbours(Iterable<IntWritable> messages){
  Map<Integer,Integer> countNeighbours=new HashMap<>();
  for (  IntWritable message : messages) {
    if (!countNeighbours.containsKey(message.get())) {
      countNeighbours.put(message.get(),1);
    }
 else {
      countNeighbours.put(message.get(),countNeighbours.get(message.get()) + 1);
    }
  }
  return countNeighbours;
}","private int[] getCountNeighbours(Iterable<IntWritable> messages){
  int[] countNeighbours=new int[k];
  for (  IntWritable message : messages) {
    int partition=message.get();
    countNeighbours[partition]++;
  }
  return countNeighbours;
}"
95880,"private void notifyDemandAggregator(int desiredPartition){
  String aggregator=KWAY_DEMAND_AGGREGATOR_PREFIX + desiredPartition;
  aggregate(aggregator,new IntWritable(1));
}","private void notifyDemandAggregator(int desiredPartition){
  String aggregator=KWAY_DEMAND_AGGREGATOR_PREFIX + desiredPartition;
  aggregate(aggregator,ONE);
}"
95881,"private void validateSmallConnectedGraphResult(Map<Integer,Integer> vertexIDwithValue){
  assertEquals(8,vertexIDwithValue.size());
  assertEquals(0,vertexIDwithValue.get(0).intValue());
  assertEquals(0,vertexIDwithValue.get(1).intValue());
  assertEquals(0,vertexIDwithValue.get(2).intValue());
  assertEquals(0,vertexIDwithValue.get(3).intValue());
  assertEquals(1,vertexIDwithValue.get(4).intValue());
  assertEquals(1,vertexIDwithValue.get(5).intValue());
  assertEquals(1,vertexIDwithValue.get(6).intValue());
  assertEquals(1,vertexIDwithValue.get(7).intValue());
}","private void validateSmallConnectedGraphResult(Map<Integer,Integer> vertexIDwithValue){
  assertEquals(8,vertexIDwithValue.size());
  assertEquals(0,vertexIDwithValue.get(0).intValue());
  assertEquals(1,vertexIDwithValue.get(1).intValue());
  assertEquals(0,vertexIDwithValue.get(2).intValue());
  assertEquals(1,vertexIDwithValue.get(3).intValue());
  assertEquals(0,vertexIDwithValue.get(4).intValue());
  assertEquals(1,vertexIDwithValue.get(5).intValue());
  assertEquals(0,vertexIDwithValue.get(6).intValue());
  assertEquals(1,vertexIDwithValue.get(7).intValue());
}"
95882,"@Test public void testSmallConnectedGraph() throws Exception {
  String[] graph=PartitioningComputationTestHelper.getLPConnectedGraph();
  validateSmallConnectedGraphResult(computeResults(graph,2));
}","@Test public void testSmallConnectedGraph() throws Exception {
  String[] graph=PartitioningComputationTestHelper.getKwaySmallConnectedGraph();
  validateSmallConnectedGraphResult(computeResults(graph,2,100));
}"
95883,"private Map<Integer,Integer> computeResults(String[] graph,int partitionCount) throws Exception {
  GiraphConfiguration conf=getConfiguration();
  conf.set(KwayPartitioningComputation.NUMBER_OF_PARTITIONS,Integer.toString(partitionCount));
  Iterable<String> results=InternalVertexRunner.run(conf,graph);
  return parseResults(results);
}","private Map<Integer,Integer> computeResults(String[] graph,int partitionCount,int max_iteration) throws Exception {
  GiraphConfiguration conf=getConfiguration();
  conf.set(KwayPartitioningComputation.NUMBER_OF_PARTITIONS,Integer.toString(partitionCount));
  conf.set(KwayPartitioningComputation.NUMBER_OF_ITERATIONS,Integer.toString(max_iteration));
  Iterable<String> results=InternalVertexRunner.run(conf,graph);
  return parseResults(results);
}"
95884,"private Map<Integer,Integer> parseResults(Iterable<String> results){
  Map<Integer,Integer> parsedResults=Maps.newHashMap();
  String[] lineTokens;
  int value;
  int vertexID;
  for (  String line : results) {
    lineTokens=LINE_TOKEN_SEPARATOR.split(line);
    vertexID=Integer.parseInt(lineTokens[0]);
    value=Integer.parseInt(lineTokens[1]);
    parsedResults.put(vertexID,value);
  }
  return parsedResults;
}","private Map<Integer,Integer> parseResults(Iterable<String> results){
  Map<Integer,Integer> parsedResults=Maps.newHashMap();
  String[] lineTokens;
  int value;
  int vertexID;
  for (  String line : results) {
    lineTokens=LINE_TOKEN_SEPARATOR.split(line);
    vertexID=Integer.parseInt(lineTokens[0]);
    System.out.println(line);
    value=Integer.parseInt(lineTokens[1]);
    parsedResults.put(vertexID,value);
  }
  return parsedResults;
}"
95885,"private void setVertexStartValue(Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex){
  int partitionCount=Integer.valueOf(getConf().get(NUMBER_OF_PARTITIONS));
  int startValue=vertex.getId().get() % partitionCount;
  vertex.getValue().setCurrentVertexValue(new IntWritable(startValue));
  vertex.getValue().setLastVertexValue(vertex.getValue().getCurrentVertexValue());
}","private void setVertexStartValue(Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex){
  int partitionCount=Integer.valueOf(getConf().get(NUMBER_OF_PARTITIONS));
  int startValue=vertex.getId().get() % partitionCount;
  vertex.getValue().setCurrentVertexValue(new IntWritable(startValue));
}"
95886,"/** 
 * The actual KwayPartitioning Computation
 * @param vertex   Vertex
 * @param messages Messages that were sent to this vertex in the previoussuperstep.
 * @throws IOException
 */
@Override public void compute(Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex,Iterable<IntWritable> messages) throws IOException {
  String computation_case=String.valueOf(getConf().get(COMPUTATION_CASE));
  int nodecount=0;
  if (getSuperstep() == 0) {
    setVertexStartValue(vertex);
    String aggregator=KWAY_CAPACITY_AGGREGATOR_PREFIX + vertex.getValue().getCurrentVertexValue().get();
    notifyCapacityAggregator(aggregator,1);
    sendMessageToAllEdges(vertex,vertex.getValue().getCurrentVertexValue());
    vertex.voteToHalt();
  }
 else {
    if ((getSuperstep() % 2) == 0) {
      int desiredPartition=getHighestWeight(vertex,messages);
      boolean migrate=calculateThreshold(desiredPartition);
      if (migrate) {
        migrateVertex(vertex,desiredPartition);
        sendMessageToAllEdges(vertex,vertex.getValue().getCurrentVertexValue());
      }
 else {
        vertex.voteToHalt();
      }
    }
 else {
      int desiredPartition=getHighestWeight(vertex,messages);
      int currentValue=vertex.getValue().getCurrentVertexValue().get();
      boolean changed=currentValue != desiredPartition;
      if (changed) {
        notifyDemandAggregator(desiredPartition);
      }
 else {
        vertex.voteToHalt();
      }
    }
  }
}","/** 
 * The actual KwayPartitioning Computation
 * @param vertex   Vertex
 * @param messages Messages that were sent to this vertex in the previoussuperstep.
 * @throws IOException
 */
@Override public void compute(Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex,Iterable<IntWritable> messages) throws IOException {
  if (getSuperstep() == 0) {
    setVertexStartValue(vertex);
    String aggregator=KWAY_CAPACITY_AGGREGATOR_PREFIX + vertex.getValue().getCurrentVertexValue().get();
    notifyCapacityAggregator(aggregator,1);
    sendMessageToAllEdges(vertex,vertex.getValue().getCurrentVertexValue());
    vertex.voteToHalt();
  }
 else {
    if ((getSuperstep() % 2) == 0) {
      int desiredPartition=vertex.getValue().getLastVertexValue().get();
      boolean migrate=calculateThreshold(desiredPartition);
      if (migrate) {
        migrateVertex(vertex,desiredPartition);
        sendMessageToAllEdges(vertex,vertex.getValue().getCurrentVertexValue());
      }
 else {
        vertex.voteToHalt();
      }
    }
 else     if ((getSuperstep() % 2) == 1) {
      int desiredPartition=getHighestWeight(vertex,messages);
      vertex.getValue().setLastVertexValue(new IntWritable(desiredPartition));
      int currentValue=vertex.getValue().getCurrentVertexValue().get();
      boolean changed=currentValue != desiredPartition;
      if (changed) {
        notifyDemandAggregator(desiredPartition);
      }
 else {
        vertex.voteToHalt();
      }
    }
  }
  vertex.voteToHalt();
}"
95887,"private int getHighestWeight(Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex,Iterable<IntWritable> messages){
  int desiredPartition=0;
  Map<Integer,Integer> countNeighbours=new HashMap<>();
  Map<Integer,Float> partitionWeight=new HashMap<>();
  for (  IntWritable message : messages) {
    if (!countNeighbours.containsKey(message.get())) {
      countNeighbours.put(message.get(),1);
    }
 else {
      countNeighbours.put(message.get(),countNeighbours.get(message.get()) + 1);
    }
  }
  int partitionCount=Integer.valueOf(getConf().get(NUMBER_OF_PARTITIONS));
  for (int i=0; i < partitionCount; i++) {
    String aggregator=KWAY_CAPACITY_AGGREGATOR_PREFIX + i;
    int load=getAggregatedValue(aggregator);
    int totalNeighbours=countNeighbours.size();
    int numNeighboursInI=countNeighbours.get(i);
    float weight=(1 / load) * numNeighboursInI / totalNeighbours;
    partitionWeight.put(i,weight);
  }
  float highestWeight=0;
  float secondHighestWeight=0;
  int secondKey=0;
  for (  Map.Entry<Integer,Float> entry : partitionWeight.entrySet()) {
    if (highestWeight < entry.getValue()) {
      secondHighestWeight=highestWeight;
      secondKey=desiredPartition;
      desiredPartition=entry.getKey();
      highestWeight=entry.getValue();
    }
  }
  if (secondHighestWeight == highestWeight) {
    if (vertex.getValue().getCurrentVertexValue().get() == desiredPartition || vertex.getValue().getCurrentVertexValue().get() == secondKey) {
      desiredPartition=vertex.getValue().getCurrentVertexValue().get();
    }
  }
  return desiredPartition;
}","private int getHighestWeight(Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex,Iterable<IntWritable> messages){
  int desiredPartition=0;
  Map<Integer,Integer> countNeighbours=new HashMap<>();
  Map<Integer,Float> partitionWeight=new HashMap<>();
  for (  IntWritable message : messages) {
    if (!countNeighbours.containsKey(message.get())) {
      countNeighbours.put(message.get(),1);
    }
 else {
      countNeighbours.put(message.get(),countNeighbours.get(message.get()) + 1);
    }
  }
  int partitionCount=Integer.valueOf(getConf().get(NUMBER_OF_PARTITIONS));
  int totalNeighbours=countNeighbours.size();
  for (int i=0; i < partitionCount; i++) {
    String aggregator=KWAY_CAPACITY_AGGREGATOR_PREFIX + i;
    int load=getAggregatedValue(aggregator);
    int numNeighboursInI=countNeighbours.get(i);
    float weight=(1 / load) * numNeighboursInI / totalNeighbours;
    partitionWeight.put(i,weight);
  }
  float highestWeight=0;
  float secondHighestWeight=0;
  int secondKey=0;
  for (  Map.Entry<Integer,Float> entry : partitionWeight.entrySet()) {
    if (highestWeight < entry.getValue()) {
      secondHighestWeight=highestWeight;
      secondKey=desiredPartition;
      desiredPartition=entry.getKey();
      highestWeight=entry.getValue();
    }
  }
  if (secondHighestWeight == highestWeight) {
    if (vertex.getValue().getCurrentVertexValue().get() == desiredPartition || vertex.getValue().getCurrentVertexValue().get() == secondKey) {
      desiredPartition=vertex.getValue().getCurrentVertexValue().get();
    }
  }
  return desiredPartition;
}"
95888,"private GiraphConfiguration getConfiguration(){
  GiraphConfiguration conf=new GiraphConfiguration();
  conf.setComputationClass(KwayPartitioningComputation.class);
  conf.setMasterComputeClass(KwayPartitioningMasterComputation.class);
  conf.setVertexInputFormatClass(KwayPartitioningInputFormat.class);
  conf.setVertexOutputFormatClass(KwayPartitioningOutputFormat.class);
  return conf;
}","private GiraphConfiguration getConfiguration(){
  GiraphConfiguration conf=new GiraphConfiguration();
  conf.setComputationClass(KwayPartitioningComputation.class);
  conf.setMasterComputeClass(KwayPartitioningMasterComputation.class);
  conf.setVertexInputFormatClass(IntIntNullTextVertexInputFormat.class);
  conf.setVertexOutputFormatClass(IdWithValueTextOutputFormat.class);
  return conf;
}"
95889,"private void validateSmallConnectedGraphResult(Map<Integer,Integer> vertexIDwithValue){
  if (0 == vertexIDwithValue.get(0)) {
    if (1 == vertexIDwithValue.get(4)) {
      assertEquals(8,vertexIDwithValue.size());
      assertEquals(0,vertexIDwithValue.get(0).intValue());
      assertEquals(0,vertexIDwithValue.get(1).intValue());
      assertEquals(0,vertexIDwithValue.get(2).intValue());
      assertEquals(0,vertexIDwithValue.get(3).intValue());
      assertEquals(1,vertexIDwithValue.get(4).intValue());
      assertEquals(1,vertexIDwithValue.get(5).intValue());
      assertEquals(1,vertexIDwithValue.get(6).intValue());
      assertEquals(1,vertexIDwithValue.get(7).intValue());
    }
  }
  if (1 == vertexIDwithValue.get(0)) {
    if (0 == vertexIDwithValue.get(4)) {
      assertEquals(8,vertexIDwithValue.size());
      assertEquals(1,vertexIDwithValue.get(0).intValue());
      assertEquals(1,vertexIDwithValue.get(1).intValue());
      assertEquals(1,vertexIDwithValue.get(2).intValue());
      assertEquals(1,vertexIDwithValue.get(4).intValue());
      assertEquals(0,vertexIDwithValue.get(5).intValue());
      assertEquals(0,vertexIDwithValue.get(6).intValue());
      assertEquals(0,vertexIDwithValue.get(7).intValue());
      assertEquals(0,vertexIDwithValue.get(8).intValue());
    }
  }
}","private void validateSmallConnectedGraphResult(Map<Integer,Integer> vertexIDwithValue){
  assertEquals(8,vertexIDwithValue.size());
  assertEquals(0,vertexIDwithValue.get(0).intValue());
  assertEquals(0,vertexIDwithValue.get(1).intValue());
  assertEquals(0,vertexIDwithValue.get(2).intValue());
  assertEquals(0,vertexIDwithValue.get(3).intValue());
  assertEquals(1,vertexIDwithValue.get(4).intValue());
  assertEquals(1,vertexIDwithValue.get(5).intValue());
  assertEquals(1,vertexIDwithValue.get(6).intValue());
  assertEquals(1,vertexIDwithValue.get(7).intValue());
}"
95890,"@Test public void testSmallConnectedGraph() throws Exception {
  String[] graph=PartitioningComputationTestHelper.getKwaySmallConnectedGraph();
  validateSmallConnectedGraphResult(computeResults(graph,2,""String_Node_Str""));
}","@Test public void testSmallConnectedGraph() throws Exception {
  String[] graph=PartitioningComputationTestHelper.getKwaySmallConnectedGraph();
  validateSmallConnectedGraphResult(computeResults(graph,2));
}"
95891,"private Map<Integer,Integer> computeResults(String[] graph,int partitionCount,String computation_case) throws Exception {
  GiraphConfiguration conf=getConfiguration();
  conf.set(KwayPartitioningComputation.NUMBER_OF_PARTITIONS,Integer.toString(partitionCount));
  conf.set(KwayPartitioningComputation.COMPUTATION_CASE,computation_case);
  Iterable<String> results=InternalVertexRunner.run(conf,graph);
  return parseResults(results);
}","private Map<Integer,Integer> computeResults(String[] graph,int partitionCount) throws Exception {
  GiraphConfiguration conf=getConfiguration();
  conf.set(KwayPartitioningComputation.NUMBER_OF_PARTITIONS,Integer.toString(partitionCount));
  Iterable<String> results=InternalVertexRunner.run(conf,graph);
  return parseResults(results);
}"
95892,"/** 
 * Returns the most frequent value based on all received messages.
 * @param vertex      The current vertex
 * @param allMessages All messages the current vertex has received
 * @return the maximal frequent number in all received messages
 */
private int getMostFrequent(Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex,List<Integer> allMessages){
  Collections.sort(allMessages);
  int newValue;
  int currentCounter=1;
  int currentValue=allMessages.get(0);
  int maxCounter=1;
  int maxValue=1;
  for (int i=1; i < allMessages.size(); i++) {
    if (currentValue == allMessages.get(i)) {
      currentCounter++;
      if (maxCounter < currentCounter) {
        maxCounter=currentCounter;
        maxValue=currentValue;
      }
    }
 else {
      currentCounter=1;
      currentValue=allMessages.get(i);
    }
  }
  if (maxCounter == 1) {
switch (computation_case) {
case ""String_Node_Str"":
      newValue=getSwitchValue(allMessages.get(0),vertex);
    break;
case ""String_Node_Str"":
  newValue=getSwitchValue(allMessages.get(allMessages.size() - 1),vertex);
break;
case ""String_Node_Str"":
newValue=getSwitchValue(allMessages.get(new Random().nextInt(allMessages.size() - 1)),vertex);
default :
newValue=getSwitchValue(allMessages.get(0),vertex);
}
}
 else {
newValue=getSwitchValue(maxValue,vertex);
}
return newValue;
}","/** 
 * Returns the most frequent value based on all received messages.
 * @param vertex      The current vertex
 * @param allMessages All messages the current vertex has received
 * @return the maximal frequent number in all received messages
 */
private int getMostFrequent(Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex,List<Integer> allMessages){
  Collections.sort(allMessages);
  int newValue;
  int currentCounter=1;
  int currentValue=allMessages.get(0);
  int maxCounter=1;
  int maxValue=1;
  for (int i=1; i < allMessages.size(); i++) {
    if (currentValue == allMessages.get(i)) {
      currentCounter++;
      if (maxCounter < currentCounter) {
        maxCounter=currentCounter;
        maxValue=currentValue;
      }
    }
 else {
      currentCounter=1;
      currentValue=allMessages.get(i);
    }
  }
  if (maxCounter == 1) {
switch (computation_case) {
case ""String_Node_Str"":
      newValue=getSwitchValue(allMessages.get(0),vertex);
    break;
case ""String_Node_Str"":
  newValue=getSwitchValue(allMessages.get(allMessages.size() - 1),vertex);
break;
case ""String_Node_Str"":
newValue=getSwitchValue(allMessages.get(new Random().nextInt(allMessages.size() - 1)),vertex);
break;
default :
newValue=getSwitchValue(allMessages.get(0),vertex);
}
}
 else {
newValue=getSwitchValue(maxValue,vertex);
}
return newValue;
}"
95893,"/** 
 * Decides how the computation should work in different cases.
 * @param value1 int value to compare with
 * @param vertex The current vertex
 * @return new vertex value
 */
public int getSwitchValue(int value1,Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex){
  int value;
switch (computation_case) {
case ""String_Node_Str"":
    value=Math.min(value1,vertex.getValue().getLastVertexValue().get());
  break;
case ""String_Node_Str"":
value=Math.max(value1,vertex.getValue().getCurrentVertexValue().get());
break;
case ""String_Node_Str"":
if (value1 == vertex.getValue().getLastVertexValue().get()) {
value=vertex.getValue().getLastVertexValue().get();
}
 else {
value=Math.min(value1,vertex.getValue().getLastVertexValue().get());
break;
}
default :
value=Math.min(value1,vertex.getValue().getCurrentVertexValue().get());
}
return value;
}","/** 
 * Decides how the computation should work in different cases.
 * @param value1 int value to compare with
 * @param vertex The current vertex
 * @return new vertex value
 */
public int getSwitchValue(int value1,Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex){
  int value;
switch (computation_case) {
case ""String_Node_Str"":
    value=Math.min(value1,vertex.getValue().getLastVertexValue().get());
  break;
case ""String_Node_Str"":
value=Math.max(value1,vertex.getValue().getCurrentVertexValue().get());
break;
case ""String_Node_Str"":
if (value1 == vertex.getValue().getLastVertexValue().get()) {
value=vertex.getValue().getLastVertexValue().get();
}
 else {
value=Math.min(value1,vertex.getValue().getLastVertexValue().get());
}
break;
default :
value=Math.min(value1,vertex.getValue().getCurrentVertexValue().get());
}
return value;
}"
95894,"/** 
 * Returns the most frequent value based on all received messages.
 * @param vertex      The current vertex
 * @param allMessages All messages the current vertex has received
 * @return the maximal frequent number in all received messages
 */
private int getMostFrequent(Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex,List<Integer> allMessages){
  Collections.sort(allMessages);
  int newValue;
  int currentCounter=1;
  int currentValue=allMessages.get(0);
  int maxCounter=1;
  int maxValue=1;
  for (int i=1; i < allMessages.size(); i++) {
    if (currentValue == allMessages.get(i)) {
      currentCounter++;
      if (maxCounter < currentCounter) {
        maxCounter=currentCounter;
        maxValue=currentValue;
      }
    }
 else {
      currentCounter=1;
      currentValue=allMessages.get(i);
    }
  }
  if (maxCounter == 1) {
    newValue=getSwitchValue(allMessages.get(allMessages.size() - 1),vertex);
  }
 else {
    newValue=getSwitchValue(maxValue,vertex);
  }
  return newValue;
}","/** 
 * Returns the most frequent value based on all received messages.
 * @param vertex      The current vertex
 * @param allMessages All messages the current vertex has received
 * @return the maximal frequent number in all received messages
 */
private int getMostFrequent(Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex,List<Integer> allMessages){
  Collections.sort(allMessages);
  int newValue;
  int currentCounter=1;
  int currentValue=allMessages.get(0);
  int maxCounter=1;
  int maxValue=1;
  for (int i=1; i < allMessages.size(); i++) {
    if (currentValue == allMessages.get(i)) {
      currentCounter++;
      if (maxCounter < currentCounter) {
        maxCounter=currentCounter;
        maxValue=currentValue;
      }
    }
 else {
      currentCounter=1;
      currentValue=allMessages.get(i);
    }
  }
  if (maxCounter == 1) {
switch (computation_case) {
case ""String_Node_Str"":
      newValue=getSwitchValue(allMessages.get(0),vertex);
    break;
case ""String_Node_Str"":
  newValue=getSwitchValue(allMessages.get(allMessages.size() - 1),vertex);
break;
case ""String_Node_Str"":
newValue=getSwitchValue(allMessages.get(new Random().nextInt(allMessages.size() - 1)),vertex);
default :
newValue=getSwitchValue(allMessages.get(0),vertex);
}
}
 else {
newValue=getSwitchValue(maxValue,vertex);
}
return newValue;
}"
95895,"public int getSwitchValue(int value1,Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex){
  int value;
  if (value1 == vertex.getValue().getLastVertexValue().get()) {
    value=vertex.getValue().getCurrentVertexValue().get();
  }
 else {
switch (computation_case) {
case ""String_Node_Str"":
      value=Math.min(value1,vertex.getValue().getCurrentVertexValue().get());
    break;
case ""String_Node_Str"":
  value=Math.max(value1,vertex.getValue().getCurrentVertexValue().get());
break;
case ""String_Node_Str"":
if (1 == new Random().nextInt(2)) {
value=value1;
}
 else {
value=vertex.getValue().getCurrentVertexValue().get();
}
break;
default :
value=Math.min(value1,vertex.getValue().getCurrentVertexValue().get());
}
}
return value;
}","/** 
 * Decides how the computation should work in different cases.
 * @param value1 int value to compare with
 * @param vertex The current vertex
 * @return new vertex value
 */
public int getSwitchValue(int value1,Vertex<IntWritable,KwayPartitioningVertex,NullWritable> vertex){
  int value;
switch (computation_case) {
case ""String_Node_Str"":
    value=Math.min(value1,vertex.getValue().getLastVertexValue().get());
  break;
case ""String_Node_Str"":
value=Math.max(value1,vertex.getValue().getCurrentVertexValue().get());
break;
case ""String_Node_Str"":
if (value1 == vertex.getValue().getLastVertexValue().get()) {
value=vertex.getValue().getLastVertexValue().get();
}
 else {
value=Math.min(value1,vertex.getValue().getLastVertexValue().get());
break;
}
default :
value=Math.min(value1,vertex.getValue().getCurrentVertexValue().get());
}
return value;
}"
95896,"private void validateSmallConnectedGraphResult(Map<Integer,Integer> vertexIDwithValue){
  assertEquals(6,vertexIDwithValue.size());
  if (0 == vertexIDwithValue.get(2)) {
    if (1 == vertexIDwithValue.get(3)) {
      assertEquals(0,vertexIDwithValue.get(0).intValue());
      assertEquals(0,vertexIDwithValue.get(1).intValue());
      assertEquals(0,vertexIDwithValue.get(2).intValue());
      assertEquals(1,vertexIDwithValue.get(3).intValue());
      assertEquals(1,vertexIDwithValue.get(4).intValue());
      assertEquals(1,vertexIDwithValue.get(5).intValue());
    }
  }
  if (1 == vertexIDwithValue.get(2)) {
    if (0 == vertexIDwithValue.get(3)) {
      assertEquals(1,vertexIDwithValue.get(0).intValue());
      assertEquals(1,vertexIDwithValue.get(1).intValue());
      assertEquals(1,vertexIDwithValue.get(2).intValue());
      assertEquals(0,vertexIDwithValue.get(3).intValue());
      assertEquals(0,vertexIDwithValue.get(4).intValue());
      assertEquals(0,vertexIDwithValue.get(5).intValue());
    }
  }
  if (1 == vertexIDwithValue.get(2)) {
    if (1 == vertexIDwithValue.get(3)) {
      assertEquals(1,vertexIDwithValue.get(0).intValue());
      assertEquals(1,vertexIDwithValue.get(1).intValue());
      assertEquals(1,vertexIDwithValue.get(2).intValue());
      assertEquals(1,vertexIDwithValue.get(3).intValue());
      assertEquals(1,vertexIDwithValue.get(4).intValue());
      assertEquals(1,vertexIDwithValue.get(5).intValue());
    }
  }
  if (0 == vertexIDwithValue.get(2)) {
    if (0 == vertexIDwithValue.get(3)) {
      assertEquals(0,vertexIDwithValue.get(0).intValue());
      assertEquals(0,vertexIDwithValue.get(1).intValue());
      assertEquals(0,vertexIDwithValue.get(2).intValue());
      assertEquals(0,vertexIDwithValue.get(3).intValue());
      assertEquals(0,vertexIDwithValue.get(4).intValue());
      assertEquals(0,vertexIDwithValue.get(5).intValue());
    }
  }
 else {
    assertTrue(""String_Node_Str"",false);
  }
}","private void validateSmallConnectedGraphResult(Map<Integer,Integer> vertexIDwithValue){
  if (0 == vertexIDwithValue.get(0)) {
    if (1 == vertexIDwithValue.get(3)) {
      assertEquals(6,vertexIDwithValue.size());
      assertEquals(0,vertexIDwithValue.get(0).intValue());
      assertEquals(0,vertexIDwithValue.get(1).intValue());
      assertEquals(0,vertexIDwithValue.get(2).intValue());
      assertEquals(1,vertexIDwithValue.get(3).intValue());
      assertEquals(1,vertexIDwithValue.get(4).intValue());
      assertEquals(1,vertexIDwithValue.get(5).intValue());
    }
  }
  if (1 == vertexIDwithValue.get(0)) {
    if (0 == vertexIDwithValue.get(3)) {
      assertEquals(6,vertexIDwithValue.size());
      assertEquals(1,vertexIDwithValue.get(0).intValue());
      assertEquals(1,vertexIDwithValue.get(1).intValue());
      assertEquals(1,vertexIDwithValue.get(2).intValue());
      assertEquals(0,vertexIDwithValue.get(3).intValue());
      assertEquals(0,vertexIDwithValue.get(4).intValue());
      assertEquals(0,vertexIDwithValue.get(5).intValue());
    }
  }
  if (1 == vertexIDwithValue.get(0)) {
    if (1 == vertexIDwithValue.get(3)) {
      assertEquals(6,vertexIDwithValue.size());
      assertEquals(1,vertexIDwithValue.get(0).intValue());
      assertEquals(1,vertexIDwithValue.get(1).intValue());
      assertEquals(1,vertexIDwithValue.get(2).intValue());
      assertEquals(1,vertexIDwithValue.get(3).intValue());
      assertEquals(1,vertexIDwithValue.get(4).intValue());
      assertEquals(1,vertexIDwithValue.get(5).intValue());
    }
  }
  if (0 == vertexIDwithValue.get(0)) {
    if (0 == vertexIDwithValue.get(3)) {
      assertEquals(6,vertexIDwithValue.size());
      assertEquals(0,vertexIDwithValue.get(0).intValue());
      assertEquals(0,vertexIDwithValue.get(1).intValue());
      assertEquals(0,vertexIDwithValue.get(2).intValue());
      assertEquals(0,vertexIDwithValue.get(3).intValue());
      assertEquals(0,vertexIDwithValue.get(4).intValue());
      assertEquals(0,vertexIDwithValue.get(5).intValue());
    }
  }
}"
95897,"/** 
 * The actual LabelPropagation Computation
 * @param vertex   Vertex
 * @param messages Messages that were sent to this vertex in the previoussuperstep.
 * @throws IOException
 */
@Override public void compute(Vertex<IntWritable,IntWritable,NullWritable> vertex,Iterable<IntWritable> messages) throws IOException {
  if (getSuperstep() == 0) {
    sendMessageToAllEdges(vertex,vertex.getId());
    vertex.voteToHalt();
  }
 else {
    int currentMinValue=vertex.getValue().get();
    int newValue=getNewValue(vertex,messages);
    boolean changed=currentMinValue != newValue;
    if (changed) {
      vertex.setValue(new IntWritable(newValue));
      sendMessageToAllEdges(vertex,vertex.getValue());
    }
 else {
      vertex.voteToHalt();
    }
  }
  vertex.voteToHalt();
}","/** 
 * The actual LabelPropagation Computation
 * @param vertex   Vertex
 * @param messages Messages that were sent to this vertex in the previoussuperstep.
 * @throws IOException
 */
@Override public void compute(Vertex<IntWritable,IntWritable,NullWritable> vertex,Iterable<IntWritable> messages) throws IOException {
  if (getSuperstep() == 0) {
    sendMessageToAllEdges(vertex,vertex.getValue());
    vertex.voteToHalt();
  }
 else {
    int currentMinValue=vertex.getValue().get();
    int newValue=getNewValue(vertex,messages);
    boolean changed=currentMinValue != newValue;
    if (changed) {
      vertex.setValue(new IntWritable(newValue));
      sendMessageToAllEdges(vertex,vertex.getValue());
    }
 else {
      vertex.voteToHalt();
    }
  }
  vertex.voteToHalt();
}"
95898,"/** 
 * The actual LabelPropagation Computation
 * @param vertex   Vertex
 * @param messages Messages that were sent to this vertex in the previoussuperstep.
 * @throws IOException
 */
@Override public void compute(Vertex<IntWritable,IntWritable,NullWritable> vertex,Iterable<IntWritable> messages) throws IOException {
  if (getSuperstep() == 0) {
    sendMessageToAllEdges(vertex,vertex.getValue());
    vertex.voteToHalt();
  }
 else {
    int currentMinValue=vertex.getValue().get();
    int newValue=getNewValue(vertex,messages);
    boolean changed=currentMinValue != newValue;
    if (changed) {
      vertex.setValue(new IntWritable(newValue));
      sendMessageToAllEdges(vertex,vertex.getValue());
    }
 else {
      vertex.voteToHalt();
    }
  }
  vertex.voteToHalt();
}","/** 
 * The actual LabelPropagation Computation
 * @param vertex   Vertex
 * @param messages Messages that were sent to this vertex in the previoussuperstep.
 * @throws IOException
 */
@Override public void compute(Vertex<IntWritable,IntWritable,NullWritable> vertex,Iterable<IntWritable> messages) throws IOException {
  if (getSuperstep() == 0) {
    sendMessageToAllEdges(vertex,vertex.getId());
    vertex.voteToHalt();
  }
 else {
    int currentMinValue=vertex.getValue().get();
    int newValue=getNewValue(vertex,messages);
    boolean changed=currentMinValue != newValue;
    if (changed) {
      vertex.setValue(new IntWritable(newValue));
      sendMessageToAllEdges(vertex,vertex.getValue());
    }
 else {
      vertex.voteToHalt();
    }
  }
  vertex.voteToHalt();
}"
95899,"public void setOption(int optID,Object value) throws SocketException {
  try {
switch (optID) {
case SocketOptions.SO_LINGER:
      if (value instanceof Boolean) {
        boolean b=(Boolean)value;
        if (b) {
          throw new SocketException(""String_Node_Str"");
        }
        NativeUnixSocket.setSocketOptionInt(fd,optID,-1);
        return;
      }
    NativeUnixSocket.setSocketOptionInt(fd,optID,expectInteger(value));
  return;
case SocketOptions.SO_TIMEOUT:
NativeUnixSocket.setSocketOptionInt(fd,optID,expectInteger(value));
return;
case SocketOptions.SO_KEEPALIVE:
case SocketOptions.TCP_NODELAY:
case SocketOptions.SO_RCVBUF:
case SocketOptions.SO_SNDBUF:
NativeUnixSocket.setSocketOptionInt(fd,optID,expectBoolean(value));
return;
}
}
 catch (AFUNIXSocketException e) {
throw e;
}
catch (Exception e) {
throw new AFUNIXSocketException(""String_Node_Str"",e);
}
throw new AFUNIXSocketException(""String_Node_Str"" + optID);
}","public void setOption(int optID,Object value) throws SocketException {
  try {
switch (optID) {
case SocketOptions.SO_LINGER:
      if (value instanceof Boolean) {
        boolean b=(Boolean)value;
        if (b) {
          throw new SocketException(""String_Node_Str"");
        }
        NativeUnixSocket.setSocketOptionInt(fd,optID,-1);
        return;
      }
    NativeUnixSocket.setSocketOptionInt(fd,optID,expectInteger(value));
  return;
case SocketOptions.SO_RCVBUF:
case SocketOptions.SO_SNDBUF:
case SocketOptions.SO_TIMEOUT:
NativeUnixSocket.setSocketOptionInt(fd,optID,expectInteger(value));
return;
case SocketOptions.SO_KEEPALIVE:
case SocketOptions.TCP_NODELAY:
NativeUnixSocket.setSocketOptionInt(fd,optID,expectBoolean(value));
return;
}
}
 catch (AFUNIXSocketException e) {
throw e;
}
catch (Exception e) {
throw new AFUNIXSocketException(""String_Node_Str"",e);
}
throw new AFUNIXSocketException(""String_Node_Str"" + optID);
}"
95900,"public void close(){
  conn.close();
}","public void close(){
  conn.close();
  isClosed=true;
}"
95901,"public DbmsQueryResult executeSingle(String sql) throws VerdictDBDbmsException {
  VerdictDBLogger logger=VerdictDBLogger.getLogger(this.getClass());
  logger.debug(""String_Node_Str"" + sql);
  try {
    Statement stmt=conn.createStatement();
    JdbcQueryResult jrs=null;
    boolean doesResultExist=stmt.execute(sql);
    if (doesResultExist) {
      ResultSet rs=stmt.getResultSet();
      jrs=new JdbcQueryResult(rs);
      rs.close();
    }
 else {
      jrs=null;
    }
    stmt.close();
    return jrs;
  }
 catch (  SQLException e) {
    e.printStackTrace();
    logger.debug(StackTraceReader.stackTrace2String(e));
    throw new VerdictDBDbmsException(e.getMessage());
  }
}","public DbmsQueryResult executeSingle(String sql) throws VerdictDBDbmsException {
  VerdictDBLogger logger=VerdictDBLogger.getLogger(this.getClass());
  logger.debug(""String_Node_Str"" + sql);
  try {
    Statement stmt=conn.createStatement();
    JdbcQueryResult jrs=null;
    boolean doesResultExist=stmt.execute(sql);
    if (doesResultExist) {
      ResultSet rs=stmt.getResultSet();
      jrs=new JdbcQueryResult(rs);
      rs.close();
    }
 else {
      jrs=null;
    }
    stmt.close();
    return jrs;
  }
 catch (  SQLException e) {
    throw new VerdictDBDbmsException(e.getMessage());
  }
}"
95902,"@Override public List<String> getPartitionColumns(String schema,String table) throws VerdictDBDbmsException {
  List<String> partition=new ArrayList<>();
  DbmsQueryResult queryResult;
  if (syntax instanceof ImpalaSyntax) {
    try {
      queryResult=executeQuery(syntax.getPartitionCommand(schema,table));
      for (int i=0; i < queryResult.getColumnCount(); i++) {
        String columnName=queryResult.getColumnName(i);
        if (columnName.equals(""String_Node_Str"")) {
          break;
        }
 else         partition.add(columnName);
      }
      return partition;
    }
 catch (    Exception e) {
      return partition;
    }
  }
 else {
    queryResult=executeQuery(syntax.getPartitionCommand(schema,table));
  }
  if (syntax instanceof PostgresqlSyntax) {
    if (queryResult.next()) {
      Object o=queryResult.getValue(0);
      String[] arr=o.toString().split(""String_Node_Str"");
      List<Pair<String,String>> columns=getColumns(schema,table);
      for (int i=0; i < arr.length; i++) {
        partition.add(columns.get(Integer.valueOf(arr[i]) - 1).getKey());
      }
    }
  }
 else   if (syntax instanceof HiveSyntax || syntax instanceof SparkSyntax) {
    boolean hasPartitionInfoStarted=false;
    while (queryResult.next()) {
      String name=queryResult.getString(0);
      if (hasPartitionInfoStarted && (name.equalsIgnoreCase(""String_Node_Str"") == false)) {
        partition.add(name);
      }
 else       if (name.equalsIgnoreCase(""String_Node_Str"")) {
        hasPartitionInfoStarted=true;
      }
    }
  }
 else {
    while (queryResult.next()) {
      partition.add(queryResult.getString(0));
    }
  }
  return partition;
}","@Override public List<String> getPartitionColumns(String schema,String table) throws VerdictDBDbmsException {
  List<String> partition=new ArrayList<>();
  DbmsQueryResult queryResult;
  if (syntax instanceof ImpalaSyntax) {
    try {
      queryResult=executeQuery(syntax.getPartitionCommand(schema,table));
      for (int i=0; i < queryResult.getColumnCount(); i++) {
        String columnName=queryResult.getColumnName(i);
        if (columnName.equals(""String_Node_Str"")) {
          break;
        }
 else         partition.add(columnName);
      }
      return partition;
    }
 catch (    Exception e) {
      if (e.getMessage().contains(""String_Node_Str"")) {
        return partition;
      }
 else {
        throw e;
      }
    }
  }
 else {
    queryResult=executeQuery(syntax.getPartitionCommand(schema,table));
  }
  if (syntax instanceof PostgresqlSyntax) {
    if (queryResult.next()) {
      Object o=queryResult.getValue(0);
      String[] arr=o.toString().split(""String_Node_Str"");
      List<Pair<String,String>> columns=getColumns(schema,table);
      for (int i=0; i < arr.length; i++) {
        partition.add(columns.get(Integer.valueOf(arr[i]) - 1).getKey());
      }
    }
  }
 else   if (syntax instanceof HiveSyntax || syntax instanceof SparkSyntax) {
    boolean hasPartitionInfoStarted=false;
    while (queryResult.next()) {
      String name=queryResult.getString(0);
      if (hasPartitionInfoStarted && (name.equalsIgnoreCase(""String_Node_Str"") == false)) {
        partition.add(name);
      }
 else       if (name.equalsIgnoreCase(""String_Node_Str"")) {
        hasPartitionInfoStarted=true;
      }
    }
  }
 else {
    while (queryResult.next()) {
      partition.add(queryResult.getString(0));
    }
  }
  return partition;
}"
95903,"@Parameterized.Parameters(name=""String_Node_Str"") public static Collection databases(){
  Collection<Object[]> params=new ArrayList<>();
  for (  String database : targetDatabases) {
    params.add(new Object[]{database});
  }
  return params;
}","@Parameterized.Parameters(name=""String_Node_Str"") public static Collection<Object[]> databases(){
  Collection<Object[]> params=new ArrayList<>();
  for (  String database : targetDatabases) {
    params.add(new Object[]{database});
  }
  return params;
}"
95904,"@Test public void testDataType() throws SQLException {
  String sql=""String_Node_Str"";
switch (database) {
case ""String_Node_Str"":
    sql=String.format(""String_Node_Str"",MYSQL_DATABASE,TABLE_NAME);
  break;
case ""String_Node_Str"":
sql=String.format(""String_Node_Str"",IMPALA_DATABASE,TABLE_NAME);
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
sql=String.format(""String_Node_Str"",SCHEMA_NAME,TABLE_NAME);
break;
default :
fail(String.format(""String_Node_Str"",database));
}
Statement jdbcStmt=connMap.get(database).createStatement();
Statement vcStmt=vcMap.get(database).createStatement();
ResultSet jdbcRs=jdbcStmt.executeQuery(sql);
ResultSet vcRs=vcStmt.executeQuery(sql);
int columnCount=jdbcRs.getMetaData().getColumnCount();
while (jdbcRs.next() && vcRs.next()) {
for (int i=1; i <= columnCount; ++i) {
String columnName=jdbcRs.getMetaData().getColumnName(i);
Object theirs=jdbcRs.getObject(i);
Object ours=vcRs.getObject(i);
System.out.println(columnName + ""String_Node_Str"" + theirs+ ""String_Node_Str""+ ours);
if (theirs instanceof byte[]) {
assertTrue(Arrays.equals((byte[])theirs,(byte[])ours));
}
 else if (theirs instanceof PgSQLXML) {
PgSQLXML xml1=(PgSQLXML)theirs;
PgSQLXML xml2=(PgSQLXML)ours;
assertEquals(xml1.getString(),xml2.getString());
}
 else {
assertEquals(jdbcRs.getObject(i),vcRs.getObject(i));
}
}
}
}","@Test public void testDataType() throws SQLException {
  String sql=""String_Node_Str"";
switch (database) {
case ""String_Node_Str"":
    sql=String.format(""String_Node_Str"",MYSQL_DATABASE,TABLE_NAME);
  break;
case ""String_Node_Str"":
sql=String.format(""String_Node_Str"",IMPALA_DATABASE,TABLE_NAME);
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
sql=String.format(""String_Node_Str"",SCHEMA_NAME,TABLE_NAME);
break;
default :
fail(String.format(""String_Node_Str"",database));
}
Statement jdbcStmt=connMap.get(database).createStatement();
Statement vcStmt=vcMap.get(database).createStatement();
ResultSet jdbcRs=jdbcStmt.executeQuery(sql);
ResultSet vcRs=vcStmt.executeQuery(sql);
int columnCount=jdbcRs.getMetaData().getColumnCount();
while (jdbcRs.next() && vcRs.next()) {
for (int i=1; i <= columnCount; ++i) {
String columnName=jdbcRs.getMetaData().getColumnName(i);
Object theirs=jdbcRs.getObject(i);
Object ours=vcRs.getObject(i);
System.out.println(columnName + ""String_Node_Str"" + theirs+ ""String_Node_Str""+ ours);
if (theirs instanceof byte[]) {
assertTrue(Arrays.equals((byte[])theirs,(byte[])ours));
}
 else if (theirs instanceof PgSQLXML) {
PgSQLXML xml1=(PgSQLXML)theirs;
PgSQLXML xml2=(PgSQLXML)ours;
assertEquals(xml1.getString(),xml2.getString());
}
 else {
assertEquals(theirs,ours);
}
}
}
}"
95905,"/** 
 * Composes a query that unions two aggregate results. The select list is inferred from a given query. For min and max aggregates, the extreme of two downstream aggregates is taken. For sum and count aggregates, their sum is computed.
 * @param rightQuery The query from which to infer a select list
 * @param leftBase The left individual aggregate
 * @param rightBase The right individual aggregate
 * @return The query that properly unions two aggregate queries.
 */
static SelectQuery composeUnionQuery(SelectQuery rightQuery,BaseTable leftBase,BaseTable rightBase){
  List<SelectItem> allItems=new ArrayList<>();
  List<String> groupAliasNames=new ArrayList<>();
  for (  SelectItem item : rightQuery.getSelectList()) {
    if (item.isAggregateColumn()) {
      if (!(item instanceof AliasedColumn) || !(((AliasedColumn)item).getColumn() instanceof ColumnOp)) {
        continue;
      }
      ColumnOp column=(ColumnOp)((AliasedColumn)item).getColumn();
      if (column.getOpType().equals(""String_Node_Str"") || column.getOpType().equals(""String_Node_Str"")) {
        AliasedColumn newColumn=new AliasedColumn(new ColumnOp(column.getOpType(),new BaseColumn(unionTableAlias,((AliasedColumn)item).getAliasName())),((AliasedColumn)item).getAliasName());
        allItems.add(newColumn);
      }
 else {
        AliasedColumn newColumn=new AliasedColumn(ColumnOp.sum(new BaseColumn(unionTableAlias,((AliasedColumn)item).getAliasName())),((AliasedColumn)item).getAliasName());
        allItems.add(newColumn);
      }
    }
 else {
      allItems.add(new AliasedColumn(new BaseColumn(unionTableAlias,((AliasedColumn)item).getAliasName()),((AliasedColumn)item).getAliasName()));
      groupAliasNames.add(((AliasedColumn)item).getAliasName());
    }
  }
  SelectQuery left=SelectQuery.create(new AsteriskColumn(),leftBase);
  SelectQuery right=SelectQuery.create(new AsteriskColumn(),rightBase);
  SetOperationRelation newBase=new SetOperationRelation(right,left,SetOperationRelation.SetOpType.unionAll);
  newBase.setAliasName(unionTableAlias);
  SelectQuery unionQuery=SelectQuery.create(allItems,newBase);
  for (  String a : groupAliasNames) {
    unionQuery.addGroupby(new AliasReference(a));
  }
  return unionQuery;
}","/** 
 * Composes a query that unions two aggregate results. The select list is inferred from a given query. For min and max aggregates, the extreme of two downstream aggregates is taken. For sum and count aggregates, their sum is computed.
 * @param rightQuery The query from which to infer a select list
 * @param leftBase The left individual aggregate
 * @param rightBase The right individual aggregate
 * @return The query that properly unions two aggregate queries.
 */
static SelectQuery composeUnionQuery(SelectQuery rightQuery,BaseTable leftBase,BaseTable rightBase){
  List<SelectItem> allItems=new ArrayList<>();
  List<GroupingAttribute> groupingAttributes=new ArrayList<>();
  for (  SelectItem item : rightQuery.getSelectList()) {
    if (item.isAggregateColumn()) {
      if (!(item instanceof AliasedColumn) || !(((AliasedColumn)item).getColumn() instanceof ColumnOp)) {
        continue;
      }
      ColumnOp column=(ColumnOp)((AliasedColumn)item).getColumn();
      if (column.getOpType().equals(""String_Node_Str"") || column.getOpType().equals(""String_Node_Str"")) {
        AliasedColumn newColumn=new AliasedColumn(new ColumnOp(column.getOpType(),new BaseColumn(unionTableAlias,((AliasedColumn)item).getAliasName())),((AliasedColumn)item).getAliasName());
        allItems.add(newColumn);
      }
 else {
        AliasedColumn newColumn=new AliasedColumn(ColumnOp.sum(new BaseColumn(unionTableAlias,((AliasedColumn)item).getAliasName())),((AliasedColumn)item).getAliasName());
        allItems.add(newColumn);
      }
    }
 else {
      UnnamedColumn col=new BaseColumn(unionTableAlias,((AliasedColumn)item).getAliasName());
      allItems.add(new AliasedColumn(col,((AliasedColumn)item).getAliasName()));
      groupingAttributes.add(col);
    }
  }
  SelectQuery left=SelectQuery.create(new AsteriskColumn(),leftBase);
  SelectQuery right=SelectQuery.create(new AsteriskColumn(),rightBase);
  SetOperationRelation newBase=new SetOperationRelation(right,left,SetOperationRelation.SetOpType.unionAll);
  newBase.setAliasName(unionTableAlias);
  SelectQuery unionQuery=SelectQuery.create(allItems,newBase);
  for (  GroupingAttribute a : groupingAttributes) {
    unionQuery.addGroupby(a);
  }
  return unionQuery;
}"
95906,"/** 
 * Adds tier expressions to the end of the select list; and to the group-by list.
 * @param query
 * @param newSelectList
 * @param scrambleMetaSet
 */
private Map<ScrambleMeta,String> addTierColumnToSelectListAndGroupBy(SelectQuery query,List<SelectItem> newSelectList,ScrambleMetaSet scrambleMetaSet,List<ProjectionNode> projectionNodeSources){
  Map<ScrambleMeta,String> scrambleMetaAnditsAlias=new HashMap<>();
  for (  AbstractRelation table : query.getFromList()) {
    if (table instanceof BaseTable) {
      String schemaName=((BaseTable)table).getSchemaName();
      String tableName=((BaseTable)table).getTableName();
      if (scrambleMetaSet.isScrambled(schemaName,tableName)) {
        ScrambleMeta singleMeta=scrambleMetaSet.getSingleMeta(schemaName,tableName);
        String tierColumnName=scrambleMetaSet.getTierColumn(schemaName,tableName);
        String newTierColumnAlias=generateTierColumnAliasName();
        BaseColumn tierColumn=new BaseColumn(schemaName,tableName,table.getAliasName().get(),tierColumnName);
        newSelectList.add(new AliasedColumn(tierColumn,newTierColumnAlias));
        query.addGroupby(tierColumn);
        scrambleMetaAnditsAlias.put(singleMeta,newTierColumnAlias);
      }
    }
 else     if (table instanceof JoinTable) {
      for (      AbstractRelation jointable : ((JoinTable)table).getJoinList()) {
        if (jointable instanceof BaseTable) {
          String schemaName=((BaseTable)jointable).getSchemaName();
          String tableName=((BaseTable)jointable).getTableName();
          if (scrambleMetaSet.isScrambled(schemaName,tableName)) {
            ScrambleMeta singleMeta=scrambleMetaSet.getSingleMeta(schemaName,tableName);
            String tierColumnName=scrambleMetaSet.getTierColumn(schemaName,tableName);
            String newTierColumnAlias=generateTierColumnAliasName();
            BaseColumn tierColumn=new BaseColumn(schemaName,tableName,jointable.getAliasName().get(),tierColumnName);
            newSelectList.add(new AliasedColumn(tierColumn,newTierColumnAlias));
            query.addGroupby(tierColumn);
            scrambleMetaAnditsAlias.put(singleMeta,newTierColumnAlias);
          }
        }
      }
    }
  }
  for (  ProjectionNode source : projectionNodeSources) {
    for (    Map.Entry<ScrambleMeta,String> entry : source.getAggMeta().getTierColumnForScramble().entrySet()) {
      ScrambleMeta singleMeta=entry.getKey();
      String oldtierAlias=entry.getValue();
      SelectItem selectItem;
      String newTierColumnAlias=generateTierColumnAliasName();
      if (source.getSelectQuery().getAliasName().isPresent()) {
        String sourceAlias=source.getSelectQuery().getAliasName().get();
        selectItem=new AliasedColumn(new BaseColumn(sourceAlias,oldtierAlias),newTierColumnAlias);
      }
 else {
        selectItem=new AliasedColumn(new BaseColumn(oldtierAlias),newTierColumnAlias);
      }
      newSelectList.add(selectItem);
      query.addGroupby(new AliasReference(newTierColumnAlias));
      scrambleMetaAnditsAlias.put(singleMeta,newTierColumnAlias);
    }
  }
  return scrambleMetaAnditsAlias;
}","/** 
 * Adds tier expressions to the end of the select list; and to the group-by list.
 * @param query
 * @param newSelectList
 * @param scrambleMetaSet
 */
private Map<ScrambleMeta,String> addTierColumnToSelectListAndGroupBy(SelectQuery query,List<SelectItem> newSelectList,ScrambleMetaSet scrambleMetaSet,List<ProjectionNode> projectionNodeSources){
  Map<ScrambleMeta,String> scrambleMetaAnditsAlias=new HashMap<>();
  for (  AbstractRelation table : query.getFromList()) {
    if (table instanceof BaseTable) {
      String schemaName=((BaseTable)table).getSchemaName();
      String tableName=((BaseTable)table).getTableName();
      if (scrambleMetaSet.isScrambled(schemaName,tableName)) {
        ScrambleMeta singleMeta=scrambleMetaSet.getSingleMeta(schemaName,tableName);
        String tierColumnName=scrambleMetaSet.getTierColumn(schemaName,tableName);
        String newTierColumnAlias=generateTierColumnAliasName();
        BaseColumn tierColumn=new BaseColumn(schemaName,tableName,table.getAliasName().get(),tierColumnName);
        newSelectList.add(new AliasedColumn(tierColumn,newTierColumnAlias));
        query.addGroupby(tierColumn);
        scrambleMetaAnditsAlias.put(singleMeta,newTierColumnAlias);
      }
    }
 else     if (table instanceof JoinTable) {
      for (      AbstractRelation jointable : ((JoinTable)table).getJoinList()) {
        if (jointable instanceof BaseTable) {
          String schemaName=((BaseTable)jointable).getSchemaName();
          String tableName=((BaseTable)jointable).getTableName();
          if (scrambleMetaSet.isScrambled(schemaName,tableName)) {
            ScrambleMeta singleMeta=scrambleMetaSet.getSingleMeta(schemaName,tableName);
            String tierColumnName=scrambleMetaSet.getTierColumn(schemaName,tableName);
            String newTierColumnAlias=generateTierColumnAliasName();
            BaseColumn tierColumn=new BaseColumn(schemaName,tableName,jointable.getAliasName().get(),tierColumnName);
            newSelectList.add(new AliasedColumn(tierColumn,newTierColumnAlias));
            query.addGroupby(tierColumn);
            scrambleMetaAnditsAlias.put(singleMeta,newTierColumnAlias);
          }
        }
      }
    }
  }
  for (  ProjectionNode source : projectionNodeSources) {
    for (    Map.Entry<ScrambleMeta,String> entry : source.getAggMeta().getTierColumnForScramble().entrySet()) {
      ScrambleMeta singleMeta=entry.getKey();
      String oldtierAlias=entry.getValue();
      SelectItem selectItem;
      String newTierColumnAlias=generateTierColumnAliasName();
      UnnamedColumn column;
      if (source.getSelectQuery().getAliasName().isPresent()) {
        String sourceAlias=source.getSelectQuery().getAliasName().get();
        column=new BaseColumn(sourceAlias,oldtierAlias);
        selectItem=new AliasedColumn(column,newTierColumnAlias);
      }
 else {
        column=new BaseColumn(oldtierAlias);
        selectItem=new AliasedColumn(column,newTierColumnAlias);
      }
      newSelectList.add(selectItem);
      query.addGroupby(column);
      scrambleMetaAnditsAlias.put(singleMeta,newTierColumnAlias);
    }
  }
  return scrambleMetaAnditsAlias;
}"
95907,"@Override public String getColumnsCommand(String schema,String table){
  return ""String_Node_Str"" + ""String_Node_Str"" + table + ""String_Node_Str""+ schema+ ""String_Node_Str"";
}","@Override public String getColumnsCommand(String schema,String table){
  StringBuilder sql=new StringBuilder();
  sql.append(String.format(""String_Node_Str"",schema));
  sql.append(String.format(""String_Node_Str"" + ""String_Node_Str"",table,schema));
  return sql.toString();
}"
95908,"Pair<String,String> getUniqueStringPair(){
  String schemaName=String.format(""String_Node_Str"",hashCode(),identifier);
  String tableName=String.format(""String_Node_Str"",hashCode(),identifier);
  identifier+=1;
  return Pair.of(schemaName,tableName);
}","Pair<String,String> getUniqueStringPair(){
  String schemaName=String.format(""String_Node_Str"",parentCode,identifier);
  String tableName=String.format(""String_Node_Str"",parentCode,identifier);
  identifier+=1;
  return Pair.of(schemaName,tableName);
}"
95909,"/** 
 * select count(*) as totalLargeGroupSize from verdicttemptable;
 * @param tokens
 * @return
 * @throws VerdictDBException
 */
@Override public SqlConvertible createQuery(List<ExecutionInfoToken> tokens) throws VerdictDBException {
  String tableSourceAlias=""String_Node_Str"";
  String aliasName=LARGE_GROUP_SIZE_SUM_ALIAS;
  String groupSizeAlias=LargeGroupListNode.LARGE_GROUP_SIZE_COLUMN_ALIAS;
  Pair<BaseTable,SubscriptionTicket> placeholder=createPlaceHolderTable(tableSourceAlias);
  BaseTable baseTable=placeholder.getLeft();
  selectQuery=SelectQuery.create(new AliasedColumn(ColumnOp.sum(new BaseColumn(tableSourceAlias,groupSizeAlias)),aliasName),baseTable);
  super.createQuery(tokens);
  return selectQuery;
}","/** 
 * select count(*) as totalLargeGroupSize from verdicttemptable;
 * @param tokens
 * @return
 * @throws VerdictDBException
 */
@Override public SqlConvertible createQuery(List<ExecutionInfoToken> tokens) throws VerdictDBException {
  super.createQuery(tokens);
  return selectQuery;
}"
95910,"/** 
 * Computes three nodes. They compute: (1) 0.1% and 99.9% percentiles of numeric columns and the total count, (for this, we compute standard deviations and estimate those percentiles based on the standard deviations and normal distribution assumptions. \pm 3.09 * stddev is the 99.9 and 0.1 percentiles of the standard normal distribution.) (2) the list of ""large"" groups, and (3) the sizes of ""large"" groups <p>Recall that channels 100 and 101 are reserved for column meta and partition meta, respectively. <p>This method generates up to three nodes, and the token keys set up by those nodes are: 1. queryResult: this contains avg, std, and count 2. schemaName, tableName: this is the name of the temporary tables that contains a list of large groups. 3. queryResult: this contains the sum of the sizes of large groups.
 */
@Override public List<ExecutableNodeBase> getStatisticsNode(String oldSchemaName,String oldTableName,String columnMetaTokenKey,String partitionMetaTokenKey){
  List<ExecutableNodeBase> statisticsNodes=new ArrayList<>();
  PercentilesAndCountNode pc=new PercentilesAndCountNode(oldSchemaName,oldTableName,columnMetaTokenKey,partitionMetaTokenKey,primaryColumnName);
  statisticsNodes.add(pc);
  OutlierProportionNode op=new OutlierProportionNode(oldSchemaName,oldTableName);
  op.subscribeTo(pc);
  statisticsNodes.add(op);
  if (primaryColumnName.isPresent()) {
    TempIdCreatorInScratchpadSchema idCreator=new TempIdCreatorInScratchpadSchema(scratchpadSchemaName);
    LargeGroupListNode ll=new LargeGroupListNode(idCreator,oldSchemaName,oldTableName,primaryColumnName.get(),blockSize);
    ll.subscribeTo(pc,0);
    LargeGroupSizeNode ls=new LargeGroupSizeNode(primaryColumnName.get());
    ls.subscribeTo(ll,0);
    statisticsNodes.add(ll);
    statisticsNodes.add(ls);
  }
  return statisticsNodes;
}","/** 
 * Computes three nodes. They compute: (1) 0.1% and 99.9% percentiles of numeric columns and the total count, (for this, we compute standard deviations and estimate those percentiles based on the standard deviations and normal distribution assumptions. \pm 3.09 * stddev is the 99.9 and 0.1 percentiles of the standard normal distribution.) (2) the list of ""large"" groups, and (3) the sizes of ""large"" groups <p>Recall that channels 100 and 101 are reserved for column meta and partition meta, respectively. <p>This method generates up to three nodes, and the token keys set up by those nodes are: 1. queryResult: this contains avg, std, and count 2. schemaName, tableName: this is the name of the temporary tables that contains a list of large groups. 3. queryResult: this contains the sum of the sizes of large groups.
 */
@Override public List<ExecutableNodeBase> getStatisticsNode(String oldSchemaName,String oldTableName,String columnMetaTokenKey,String partitionMetaTokenKey){
  List<ExecutableNodeBase> statisticsNodes=new ArrayList<>();
  PercentilesAndCountNode pc=new PercentilesAndCountNode(oldSchemaName,oldTableName,columnMetaTokenKey,partitionMetaTokenKey,primaryColumnName);
  statisticsNodes.add(pc);
  OutlierProportionNode op=new OutlierProportionNode(oldSchemaName,oldTableName);
  op.subscribeTo(pc);
  statisticsNodes.add(op);
  if (primaryColumnName.isPresent()) {
    TempIdCreatorInScratchpadSchema idCreator=new TempIdCreatorInScratchpadSchema(scratchpadSchemaName);
    LargeGroupListNode ll=new LargeGroupListNode(idCreator,oldSchemaName,oldTableName,primaryColumnName.get(),blockSize);
    ll.subscribeTo(pc,0);
    LargeGroupSizeNode ls=new LargeGroupSizeNode(primaryColumnName.get());
    ll.registerSubscriber(ls.getSubscriptionTicket());
    statisticsNodes.add(ll);
    statisticsNodes.add(ls);
  }
  return statisticsNodes;
}"
95911,"public LargeGroupSizeNode(String primaryColumnName){
  super(null);
  this.primaryColumnName=primaryColumnName;
}","public LargeGroupSizeNode(String primaryColumnName){
  super(null);
  this.primaryColumnName=primaryColumnName;
  String tableSourceAlias=""String_Node_Str"";
  String aliasName=LARGE_GROUP_SIZE_SUM_ALIAS;
  String groupSizeAlias=LargeGroupListNode.LARGE_GROUP_SIZE_COLUMN_ALIAS;
  Pair<BaseTable,SubscriptionTicket> placeholder=createPlaceHolderTable(tableSourceAlias);
  BaseTable baseTable=placeholder.getLeft();
  selectQuery=SelectQuery.create(new AliasedColumn(ColumnOp.sum(new BaseColumn(tableSourceAlias,groupSizeAlias)),aliasName),baseTable);
  subscriptionTicket=placeholder.getRight();
}"
95912,"@Test public void testGenerateDependency() throws VerdictDBException {
  SelectQuery subquery=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(originalSchema,originalTable,""String_Node_Str""));
  SelectQuery query=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(originalSchema,originalTable,""String_Node_Str""));
  query.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new SubqueryColumn(subquery))));
  QueryExecutionPlan plan=QueryExecutionPlanFactory.create(""String_Node_Str"");
  AggExecutionNode node=AggExecutionNode.create(plan,query);
  String aliasName=String.format(""String_Node_Str"",plan.getSerialNumber());
  assertEquals(1,node.getExecutableNodeBaseDependents().size());
  SelectQuery rewritten=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",aliasName,""String_Node_Str""),""String_Node_Str"")),new BaseTable(""String_Node_Str"",""String_Node_Str"",aliasName));
  assertEquals(rewritten,((SubqueryColumn)((ColumnOp)node.getSelectQuery().getFilter().get()).getOperand(1)).getSubquery());
}","@Test public void testGenerateDependency() throws VerdictDBException {
  SelectQuery subquery=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(originalSchema,originalTable,""String_Node_Str""));
  SelectQuery query=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(originalSchema,originalTable,""String_Node_Str""));
  query.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new SubqueryColumn(subquery))));
  QueryExecutionPlan plan=QueryExecutionPlanFactory.create(""String_Node_Str"");
  AggExecutionNode node=AggExecutionNode.create(plan,query);
  String aliasName=String.format(""String_Node_Str"",plan.getSerialNumber());
  assertEquals(1,node.getExecutableNodeBaseDependents().size());
  String expectedPlaceholderSchemaName=String.format(""String_Node_Str"",node.hashCode());
  String expectedPlaceholderTableName=String.format(""String_Node_Str"",node.hashCode());
  SelectQuery rewritten=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(expectedPlaceholderSchemaName,aliasName,""String_Node_Str""),""String_Node_Str"")),new BaseTable(expectedPlaceholderSchemaName,expectedPlaceholderTableName,aliasName));
  assertEquals(rewritten,((SubqueryColumn)((ColumnOp)node.getSelectQuery().getFilter().get()).getOperand(1)).getSubquery());
}"
95913,"public DbmsQueryResult executeSingle(String sql) throws VerdictDBDbmsException {
  VerdictDBLogger logger=VerdictDBLogger.getLogger(this.getClass());
  logger.trace(""String_Node_Str"" + sql);
  try {
    Statement stmt=conn.createStatement();
    JdbcQueryResult jrs=null;
    boolean doesResultExist=stmt.execute(sql);
    if (doesResultExist) {
      ResultSet rs=stmt.getResultSet();
      jrs=new JdbcQueryResult(rs);
      rs.close();
    }
 else {
      jrs=null;
    }
    stmt.close();
    return jrs;
  }
 catch (  SQLException e) {
    e.printStackTrace();
    logger.debug(StackTraceReader.stackTrace2String(e));
    throw new VerdictDBDbmsException(e.getMessage());
  }
}","public DbmsQueryResult executeSingle(String sql) throws VerdictDBDbmsException {
  VerdictDBLogger logger=VerdictDBLogger.getLogger(this.getClass());
  logger.debug(""String_Node_Str"" + sql);
  try {
    Statement stmt=conn.createStatement();
    JdbcQueryResult jrs=null;
    boolean doesResultExist=stmt.execute(sql);
    if (doesResultExist) {
      ResultSet rs=stmt.getResultSet();
      jrs=new JdbcQueryResult(rs);
      rs.close();
    }
 else {
      jrs=null;
    }
    stmt.close();
    return jrs;
  }
 catch (  SQLException e) {
    e.printStackTrace();
    logger.debug(StackTraceReader.stackTrace2String(e));
    throw new VerdictDBDbmsException(e.getMessage());
  }
}"
95914,"public ExecutionResultReader process(String query) throws VerdictDBException {
  SelectQuery selectQuery=standardizeQuery(query);
  QueryExecutionPlan plan=QueryExecutionPlanFactory.create(scratchpadSchema,scrambleMetaSet,selectQuery);
  QueryExecutionPlan asyncPlan=AsyncQueryExecutionPlan.create(plan);
  QueryExecutionPlan simplifiedAsyncPlan=QueryExecutionPlanSimplifier.simplify(asyncPlan);
  ExecutionResultReader reader=ExecutablePlanRunner.getResultReader(conn,simplifiedAsyncPlan);
  return reader;
}","public ExecutionResultReader process(String query) throws VerdictDBException {
  SelectQuery selectQuery=standardizeQuery(query);
  QueryExecutionPlan plan=QueryExecutionPlanFactory.create(scratchpadSchema,scrambleMetaSet,selectQuery);
  QueryExecutionPlan asyncPlan=AsyncQueryExecutionPlan.create(plan);
  QueryExecutionPlanSimplifier.simplify2(asyncPlan);
  ExecutionResultReader reader=ExecutablePlanRunner.getResultReader(conn,asyncPlan);
  return reader;
}"
95915,"/** 
 * @param query A well-formed select query object
 * @throws VerdictDBValueException
 * @throws VerdictDBException
 */
public int getSerialNumber(){
  return ((TempIdCreatorInScratchpadSchema)idCreator).getSerialNumber();
}","public int getSerialNumber(){
  return ((TempIdCreatorInScratchpadSchema)idCreator).getSerialNumber();
}"
95916,"public void cleanUp(){
  ((TempIdCreatorInScratchpadSchema)idCreator).reset();
}","public void cleanUp(){
}"
95917,"/** 
 * Simplifies the originalPlan in place. The parent node may consolidates with its child when all of the following conditions are satisfied: 1. The child node is a descendant of CreateTableAsSelectNode 2. The child node is the unique source of the channel to which the child node is set to broadcast 3. The parent is the only subscriber of the child.
 * @param originalPlan The plan to simplify
 * @throws VerdictDBValidationException This exception is thrown if the number of placeholders inthe parent does not match the number of the children.
 */
public static void simplify2(QueryExecutionPlan originalPlan) throws VerdictDBValidationException {
  while (true) {
    ExecutableNodeBase parent=originalPlan.getRootNode();
    List<ExecutableNodeBase> sources=parent.getSources();
    boolean isConsolidated=false;
    for (int childIndex=0; childIndex < sources.size(); childIndex++) {
      isConsolidated=consolidates(parent,childIndex);
      if (isConsolidated) {
        break;
      }
    }
    if (!isConsolidated) {
      break;
    }
  }
}","/** 
 * Simplifies the originalPlan in place. The parent node may consolidates with its child when all of the following conditions are satisfied: 1. The child node is a descendant of CreateTableAsSelectNode 2. The child node is the unique source of the channel to which the child node is set to broadcast 3. The parent is the only subscriber of the child. 4. ProjectionNode can be safely consolidated. 5. AggExecutionNode can only be consolidated when its aggMeta is empty.
 * @param originalPlan The plan to simplify
 * @throws VerdictDBValidationException This exception is thrown if the number of placeholders inthe parent does not match the number of the children.
 */
public static void simplify2(QueryExecutionPlan originalPlan) throws VerdictDBValidationException {
  while (true) {
    ExecutableNodeBase parent=originalPlan.getRootNode();
    List<ExecutableNodeBase> sources=parent.getSources();
    boolean isConsolidated=false;
    for (int childIndex=0; childIndex < sources.size(); childIndex++) {
      isConsolidated=consolidates(parent,childIndex);
      if (isConsolidated) {
        break;
      }
    }
    if (!isConsolidated) {
      break;
    }
  }
}"
95918,"synchronized String generateUniqueIdentifier(){
  return String.format(""String_Node_Str"",serialNum,identifierNum++);
}","String generateUniqueIdentifier(){
  return generateUniqueIdentifier(GLOBAL_KEYWORD);
}"
95919,"@Override public String generateAliasName(String keyword){
  return String.format(""String_Node_Str"",keyword,generateUniqueIdentifier());
}","@Override public String generateAliasName(String keyword){
  return String.format(""String_Node_Str"",keyword,generateUniqueIdentifier(keyword));
}"
95920,"@Override public SqlConvertible createQuery(List<ExecutionInfoToken> tokens) throws VerdictDBException {
  for (  ExecutionInfoToken token : tokens) {
    AggMeta childAggMeta=(AggMeta)token.getValue(""String_Node_Str"");
    if (childAggMeta != null) {
      aggMeta.getCubes().addAll(childAggMeta.getCubes());
      aggMeta.setAggAlias(childAggMeta.getAggAlias());
      aggMeta.setOriginalSelectList(childAggMeta.getOriginalSelectList());
      aggMeta.setAggColumn(childAggMeta.getAggColumn());
      aggMeta.setAggColumnAggAliasPair(childAggMeta.getAggColumnAggAliasPair());
      aggMeta.setAggColumnAggAliasPairOfMaxMin(childAggMeta.getAggColumnAggAliasPairOfMaxMin());
      aggMeta.setMaxminAggAlias(childAggMeta.getMaxminAggAlias());
      aggMeta.setScrambleTableTierColumnAlias(childAggMeta.getScrambleTableTierColumnAlias());
      setAggMeta(aggMeta);
    }
  }
  return super.createQuery(tokens);
}","@Override public SqlConvertible createQuery(List<ExecutionInfoToken> tokens) throws VerdictDBException {
  return super.createQuery(tokens);
}"
95921,"public static AggCombinerExecutionNode create(IdCreator namer,ExecutableNodeBase leftQueryExecutionNode,ExecutableNodeBase rightQueryExecutionNode){
  AggCombinerExecutionNode node=new AggCombinerExecutionNode(namer);
  SelectQuery rightQuery=((QueryNodeBase)rightQueryExecutionNode).getSelectQuery();
  String leftAliasName=namer.generateAliasName();
  String rightAliasName=namer.generateAliasName();
  Pair<BaseTable,SubscriptionTicket> leftBaseAndTicket=node.createPlaceHolderTable(leftAliasName);
  Pair<BaseTable,SubscriptionTicket> rightBaseAndTicket=node.createPlaceHolderTable(rightAliasName);
  SelectQuery unionQuery=composeUnionQuery(rightQuery,leftBaseAndTicket.getLeft(),rightBaseAndTicket.getLeft());
  leftQueryExecutionNode.registerSubscriber(leftBaseAndTicket.getRight());
  rightQueryExecutionNode.registerSubscriber(rightBaseAndTicket.getRight());
  node.setSelectQuery(unionQuery);
  return node;
}","public static AggCombinerExecutionNode create(IdCreator namer,ExecutableNodeBase leftQueryExecutionNode,ExecutableNodeBase rightQueryExecutionNode){
  AggCombinerExecutionNode node=new AggCombinerExecutionNode(namer);
  SelectQuery rightQuery=((QueryNodeBase)rightQueryExecutionNode).getSelectQuery();
  String leftAliasName=namer.generateAliasName();
  String rightAliasName=namer.generateAliasName();
  Pair<BaseTable,SubscriptionTicket> leftBaseAndTicket=node.createPlaceHolderTable(leftAliasName);
  Pair<BaseTable,SubscriptionTicket> rightBaseAndTicket=node.createPlaceHolderTable(rightAliasName);
  SelectQuery unionQuery=composeUnionQuery(rightQuery,leftBaseAndTicket.getLeft(),rightBaseAndTicket.getLeft());
  leftQueryExecutionNode.registerSubscriber(leftBaseAndTicket.getRight());
  rightQueryExecutionNode.registerSubscriber(rightBaseAndTicket.getRight());
  node.setSelectQuery(unionQuery);
  updateAggMeta(node,leftQueryExecutionNode);
  updateAggMeta(node,rightQueryExecutionNode);
  return node;
}"
95922,"public static VerdictDBLogger getLogger(String name){
  return new VerdictDBLogger((Logger)LoggerFactory.getLogger(name));
}","public static VerdictDBLogger getLogger(String name){
  return new VerdictDBLogger(LoggerFactory.getLogger(name));
}"
95923,"public void setLevel(Level level){
  logger.setLevel(level);
}","public void setLevel(Level level){
  if (logger instanceof ch.qos.logback.classic.Logger) {
    ((ch.qos.logback.classic.Logger)logger).setLevel(level);
  }
}"
95924,"public void addAppender(Appender<ILoggingEvent> appender){
  appender.setContext(logger.getLoggerContext());
  logger.addAppender(appender);
}","public void addAppender(Appender<ILoggingEvent> appender){
  if (logger instanceof ch.qos.logback.classic.Logger) {
    appender.setContext(((ch.qos.logback.classic.Logger)logger).getLoggerContext());
    ((ch.qos.logback.classic.Logger)logger).addAppender(appender);
  }
}"
95925,"private VerdictDBLogger(Logger logger){
  this.logger=logger;
}","private VerdictDBLogger(org.slf4j.Logger logger){
  this.logger=logger;
}"
95926,"public DbmsQueryResult executeSingle(String sql) throws VerdictDBDbmsException {
  try {
    Statement stmt=conn.createStatement();
    JdbcQueryResult jrs=null;
    boolean doesResultExist=stmt.execute(sql);
    if (doesResultExist) {
      ResultSet rs=stmt.getResultSet();
      jrs=new JdbcQueryResult(rs);
      rs.close();
    }
 else {
      jrs=null;
    }
    stmt.close();
    return jrs;
  }
 catch (  SQLException e) {
    throw new VerdictDBDbmsException(e.getMessage());
  }
}","public DbmsQueryResult executeSingle(String sql) throws VerdictDBDbmsException {
  VerdictDBLogger logger=VerdictDBLogger.getLogger(this.getClass());
  logger.debug(""String_Node_Str"" + sql);
  try {
    Statement stmt=conn.createStatement();
    JdbcQueryResult jrs=null;
    boolean doesResultExist=stmt.execute(sql);
    if (doesResultExist) {
      ResultSet rs=stmt.getResultSet();
      jrs=new JdbcQueryResult(rs);
      rs.close();
    }
 else {
      jrs=null;
    }
    stmt.close();
    return jrs;
  }
 catch (  SQLException e) {
    throw new VerdictDBDbmsException(e.getMessage());
  }
}"
95927,"/** 
 * The tokens are retrieved from these queues.
 * @return
 */
public List<ExecutionTokenQueue> getSourceQueues();","/** 
 * The tokens are retrieved from these queues.
 * @return channel -> queue
 */
public Map<Integer,ExecutionTokenQueue> getSourceQueues();"
95928,"void broadcast(ExecutionInfoToken token){
  VerdictDBLogger logger=VerdictDBLogger.getLogger(this.getClass());
  logger.trace(String.format(""String_Node_Str"",node.toString()));
  logger.trace(token.toString());
  for (  ExecutableNode dest : node.getSubscribers()) {
    ExecutionInfoToken copiedToken=token.deepcopy();
    dest.getNotified(node,copiedToken);
    logger.trace(String.format(""String_Node_Str"",dest.toString()));
    logger.trace(copiedToken.toString());
  }
}","void broadcast(ExecutionInfoToken token){
  VerdictDBLogger logger=VerdictDBLogger.getLogger(this.getClass());
  logger.trace(String.format(""String_Node_Str"",node.toString()));
  for (  ExecutableNode dest : node.getSubscribers()) {
    logger.trace(String.format(""String_Node_Str"",dest.toString()));
  }
  logger.trace(token.toString());
  for (  ExecutableNode dest : node.getSubscribers()) {
    ExecutionInfoToken copiedToken=token.deepcopy();
    dest.getNotified(node,copiedToken);
  }
}"
95929,"List<ExecutionInfoToken> retrieve(){
  List<ExecutionTokenQueue> sourceQueues=node.getSourceQueues();
  for (int i=0; i < sourceQueues.size(); i++) {
    ExecutionInfoToken rs=sourceQueues.get(i).peek();
    if (rs == null) {
      return null;
    }
  }
  List<ExecutionInfoToken> results=new ArrayList<>();
  for (int i=0; i < sourceQueues.size(); i++) {
    ExecutionInfoToken rs=sourceQueues.get(i).take();
    results.add(rs);
  }
  return results;
}","List<ExecutionInfoToken> retrieve(){
  Map<Integer,ExecutionTokenQueue> sourceChannelAndQueues=node.getSourceQueues();
  for (  ExecutionTokenQueue queue : sourceChannelAndQueues.values()) {
    ExecutionInfoToken rs=queue.peek();
    if (rs == null) {
      return null;
    }
  }
  List<ExecutionInfoToken> results=new ArrayList<>();
  for (  Entry<Integer,ExecutionTokenQueue> channelAndQueue : sourceChannelAndQueues.entrySet()) {
    int channel=channelAndQueue.getKey();
    ExecutionInfoToken rs=channelAndQueue.getValue().take();
    rs.setKeyValue(""String_Node_Str"",channel);
    results.add(rs);
  }
  return results;
}"
95930,"@Override public String toString(){
  return ToStringBuilder.reflectionToString(this,ToStringStyle.SHORT_PREFIX_STYLE);
}","@Override public String toString(){
  return new ToStringBuilder(this).append(""String_Node_Str"",data).toString();
}"
95931,"@Override public List<ExecutionTokenQueue> getSourceQueues(){
  return new ArrayList<ExecutionTokenQueue>(channels.values());
}","@Override public Map<Integer,ExecutionTokenQueue> getSourceQueues(){
  return channels;
}"
95932,"static void compressTwoNode(ExecutableNodeBase node,ExecutableNodeBase parent){
  if (!(node instanceof QueryNodeBase) || !(parent instanceof QueryNodeBase)) {
    return;
  }
  QueryNodeBase parentQuery=(QueryNodeBase)parent;
  QueryNodeBase nodeQuery=(QueryNodeBase)node;
  BaseTable placeholderTableinParent=((QueryNodeWithPlaceHolders)parent).getPlaceholderTables().get(parent.getExecutableNodeBaseDependents().indexOf(node));
  ((QueryNodeWithPlaceHolders)parent).getPlaceholderTables().remove(placeholderTableinParent);
  boolean find=false;
  for (  AbstractRelation table : parentQuery.getSelectQuery().getFromList()) {
    if (table instanceof BaseTable && table.equals(placeholderTableinParent)) {
      int index=parentQuery.getSelectQuery().getFromList().indexOf(table);
      nodeQuery.getSelectQuery().setAliasName(parentQuery.getSelectQuery().getFromList().get(index).getAliasName().get());
      parentQuery.getSelectQuery().getFromList().set(index,nodeQuery.getSelectQuery());
      find=true;
      break;
    }
 else     if (table instanceof JoinTable) {
      for (      AbstractRelation joinTable : ((JoinTable)table).getJoinList()) {
        if (joinTable instanceof BaseTable && joinTable.equals(placeholderTableinParent)) {
          int index=((JoinTable)table).getJoinList().indexOf(joinTable);
          nodeQuery.getSelectQuery().setAliasName(joinTable.getAliasName().get());
          ((JoinTable)table).getJoinList().set(index,nodeQuery.getSelectQuery());
          find=true;
          break;
        }
      }
      if (find)       break;
    }
  }
  if (!find) {
    List<SubqueryColumn> placeholderTablesinFilter=((QueryNodeWithPlaceHolders)parent).getPlaceholderTablesinFilter();
    for (    SubqueryColumn filter : placeholderTablesinFilter) {
      if (filter.getSubquery().getFromList().size() == 1 && filter.getSubquery().getFromList().get(0).equals(placeholderTableinParent)) {
        filter.setSubquery(nodeQuery.getSelectQuery());
      }
    }
  }
  ((QueryNodeWithPlaceHolders)parent).getPlaceholderTables().addAll(((QueryNodeWithPlaceHolders)node).getPlaceholderTables());
  parentQuery.cancelSubscriptionTo(nodeQuery);
  for (  Pair<ExecutableNodeBase,Integer> s : nodeQuery.getSourcesAndChannels()) {
    parentQuery.subscribeTo(s.getLeft(),s.getRight());
  }
}","static void compressTwoNode(ExecutableNodeBase node,ExecutableNodeBase parent){
  if (!(node instanceof QueryNodeBase) || !(parent instanceof QueryNodeBase)) {
    return;
  }
  QueryNodeBase parentQuery=(QueryNodeBase)parent;
  QueryNodeBase nodeQuery=(QueryNodeBase)node;
  PlaceHolderRecord placeholderRecordinParent=((QueryNodeWithPlaceHolders)parent).getPlaceholderRecords().get(parent.getExecutableNodeBaseDependents().indexOf(node));
  ((QueryNodeWithPlaceHolders)parent).getPlaceholderRecords().remove(placeholderRecordinParent);
  BaseTable placeholderTableinParent=placeholderRecordinParent.getPlaceholderTable();
  boolean find=false;
  for (  AbstractRelation table : parentQuery.getSelectQuery().getFromList()) {
    if (table instanceof BaseTable && table.equals(placeholderTableinParent)) {
      int index=parentQuery.getSelectQuery().getFromList().indexOf(table);
      nodeQuery.getSelectQuery().setAliasName(parentQuery.getSelectQuery().getFromList().get(index).getAliasName().get());
      parentQuery.getSelectQuery().getFromList().set(index,nodeQuery.getSelectQuery());
      find=true;
      break;
    }
 else     if (table instanceof JoinTable) {
      for (      AbstractRelation joinTable : ((JoinTable)table).getJoinList()) {
        if (joinTable instanceof BaseTable && joinTable.equals(placeholderTableinParent)) {
          int index=((JoinTable)table).getJoinList().indexOf(joinTable);
          nodeQuery.getSelectQuery().setAliasName(joinTable.getAliasName().get());
          ((JoinTable)table).getJoinList().set(index,nodeQuery.getSelectQuery());
          find=true;
          break;
        }
      }
      if (find)       break;
    }
  }
  if (!find) {
    List<SubqueryColumn> placeholderTablesinFilter=((QueryNodeWithPlaceHolders)parent).getPlaceholderTablesinFilter();
    for (    SubqueryColumn filter : placeholderTablesinFilter) {
      if (filter.getSubquery().getFromList().size() == 1 && filter.getSubquery().getFromList().get(0).equals(placeholderTableinParent)) {
        filter.setSubquery(nodeQuery.getSelectQuery());
      }
    }
  }
  ((QueryNodeWithPlaceHolders)parent).getPlaceholderRecords().addAll(((QueryNodeWithPlaceHolders)node).getPlaceholderRecords());
  parentQuery.cancelSubscriptionTo(nodeQuery);
  for (  Pair<ExecutableNodeBase,Integer> s : nodeQuery.getSourcesAndChannels()) {
    parentQuery.subscribeTo(s.getLeft(),s.getRight());
  }
}"
95933,"public Pair<BaseTable,SubscriptionTicket> createPlaceHolderTable(String aliasName){
  BaseTable table=new BaseTable(""String_Node_Str"",""String_Node_Str"",aliasName);
  SubscriptionTicket ticket=createSubscriptionTicket();
  int channel=ticket.getChannel().get();
  placeholderRecords.add(new PlaceHolderRecord(table,channel));
  return Pair.of(table,ticket);
}","public Pair<BaseTable,SubscriptionTicket> createPlaceHolderTable(String aliasName){
  Pair<String,String> placeholder=placeholderNameCreator.getUniqueStringPair();
  BaseTable table=new BaseTable(placeholder.getLeft(),placeholder.getRight(),aliasName);
  SubscriptionTicket ticket=createSubscriptionTicket();
  int channel=ticket.getChannel().get();
  placeholderRecords.add(new PlaceHolderRecord(table,channel));
  return Pair.of(table,ticket);
}"
95934,"@Override public SqlConvertible createQuery(List<ExecutionInfoToken> tokens) throws VerdictDBException {
  if (tokens == null) {
    return null;
  }
  if (tokens.size() < placeholderRecords.size()) {
    throw new VerdictDBValueException(""String_Node_Str"");
  }
  for (int i=0; i < placeholderRecords.size(); i++) {
    PlaceHolderRecord record=placeholderRecords.get(i);
    BaseTable t=record.getPlaceholderTable();
    ExecutionInfoToken r=tokens.get(i);
    String schemaName=(String)r.getValue(""String_Node_Str"");
    String tableName=(String)r.getValue(""String_Node_Str"");
    t.setSchemaName(schemaName);
    t.setTableName(tableName);
  }
  return selectQuery;
}","@Override public SqlConvertible createQuery(List<ExecutionInfoToken> tokens) throws VerdictDBException {
  if (tokens == null) {
    return null;
  }
  if (tokens.size() < placeholderRecords.size()) {
    throw new VerdictDBValueException(""String_Node_Str"");
  }
  for (  ExecutionInfoToken token : tokens) {
    String actualSchemaName=(String)token.getValue(""String_Node_Str"");
    String actualTableName=(String)token.getValue(""String_Node_Str"");
    Integer channel=(Integer)token.getValue(""String_Node_Str"");
    if (actualSchemaName == null || actualTableName == null || channel == null) {
      continue;
    }
    for (    PlaceHolderRecord record : placeholderRecords) {
      BaseTable placeholderTable=record.getPlaceholderTable();
      int registeredChannel=record.getSubscriptionChannel();
      if (registeredChannel == channel) {
        BaseTable newBaseTable=new BaseTable(actualSchemaName,actualTableName);
        findPlaceHolderAndReplace(placeholderTable,newBaseTable);
      }
    }
  }
  return selectQuery;
}"
95935,"@Override public SqlConvertible createQuery(List<ExecutionInfoToken> tokens) throws VerdictDBException {
  for (  ExecutionInfoToken token : tokens) {
    AggMeta childAggMeta=(AggMeta)token.getValue(""String_Node_Str"");
    if (childAggMeta != null) {
      System.out.println(childAggMeta);
      AggMeta aggMeta=new AggMeta();
      aggMeta.getCubes().addAll(childAggMeta.getCubes());
      aggMeta.setAggAlias(childAggMeta.getAggAlias());
      aggMeta.setOriginalSelectList(childAggMeta.getOriginalSelectList());
      aggMeta.setAggColumn(childAggMeta.getAggColumn());
      aggMeta.setAggColumnAggAliasPair(childAggMeta.getAggColumnAggAliasPair());
      aggMeta.setAggColumnAggAliasPairOfMaxMin(childAggMeta.getAggColumnAggAliasPairOfMaxMin());
      aggMeta.setMaxminAggAlias(childAggMeta.getMaxminAggAlias());
      aggMeta.setScrambleTableTierColumnAlias(childAggMeta.getScrambleTableTierColumnAlias());
      setAggMeta(aggMeta);
    }
  }
  return super.createQuery(tokens);
}","@Override public SqlConvertible createQuery(List<ExecutionInfoToken> tokens) throws VerdictDBException {
  for (  ExecutionInfoToken token : tokens) {
    AggMeta childAggMeta=(AggMeta)token.getValue(""String_Node_Str"");
    if (childAggMeta != null) {
      System.out.println(childAggMeta);
      aggMeta.getCubes().addAll(childAggMeta.getCubes());
      aggMeta.setAggAlias(childAggMeta.getAggAlias());
      aggMeta.setOriginalSelectList(childAggMeta.getOriginalSelectList());
      aggMeta.setAggColumn(childAggMeta.getAggColumn());
      aggMeta.setAggColumnAggAliasPair(childAggMeta.getAggColumnAggAliasPair());
      aggMeta.setAggColumnAggAliasPairOfMaxMin(childAggMeta.getAggColumnAggAliasPairOfMaxMin());
      aggMeta.setMaxminAggAlias(childAggMeta.getMaxminAggAlias());
      aggMeta.setScrambleTableTierColumnAlias(childAggMeta.getScrambleTableTierColumnAlias());
      setAggMeta(aggMeta);
    }
  }
  return super.createQuery(tokens);
}"
95936,"@Override public SqlConvertible createQuery(List<ExecutionInfoToken> tokens) throws VerdictDBException {
  ExecutionInfoToken token=tokens.get(0);
  AggMeta sourceAggMeta=(AggMeta)token.getValue(""String_Node_Str"");
  Triple<List<ColumnOp>,SqlConvertible,Map<Integer,String>> aggColumnsAndQuery=createBaseQueryForReplacement(sourceAggMeta,token);
  SelectQuery baseQuery=(SelectQuery)aggColumnsAndQuery.getMiddle();
  List<ColumnOp> aggColumns=aggColumnsAndQuery.getLeft();
  Map<Integer,String> multipleTierTableTierInfo=aggColumnsAndQuery.getRight();
  HashMap<List<Integer>,Double> scaleFactor=calculateScaleFactor(sourceAggMeta,multipleTierTableTierInfo);
  if (scaleFactor.size() == 1) {
    Double s=(Double)(scaleFactor.values().toArray())[0];
    for (    ColumnOp col : aggColumns) {
      col.setOperand(0,ConstantColumn.valueOf(String.format(""String_Node_Str"",s)));
    }
  }
 else {
    for (    ColumnOp col : aggColumns) {
      col.setOpType(""String_Node_Str"");
      List<UnnamedColumn> operands=new ArrayList<>();
      for (      Map.Entry<List<Integer>,Double> entry : scaleFactor.entrySet()) {
        UnnamedColumn condition=generateCaseCondition(entry.getKey(),multipleTierTableTierInfo);
        operands.add(condition);
        ColumnOp multiply=new ColumnOp(""String_Node_Str"",Arrays.asList(ConstantColumn.valueOf(String.format(""String_Node_Str"",entry.getValue())),col.getOperand(1)));
        operands.add(multiply);
      }
      operands.add(ConstantColumn.valueOf(0));
      col.setOperand(operands);
    }
  }
  SelectQuery query=sumUpTierGroup(baseQuery,((AggMeta)token.getValue(""String_Node_Str"")),multipleTierTableTierInfo);
  Pair<String,String> tempTableFullName=getNamer().generateTempTableName();
  newTableSchemaName=tempTableFullName.getLeft();
  newTableName=tempTableFullName.getRight();
  SelectQuery createTableQuery=replaceWithOriginalSelectList(query,((AggMeta)token.getValue(""String_Node_Str"")));
  if (selectQuery != null) {
    if (!selectQuery.getGroupby().isEmpty() && selectQuery.getHaving().isPresent()) {
      createTableQuery.addGroupby(selectQuery.getGroupby());
    }
    if (!selectQuery.getOrderby().isEmpty()) {
      createTableQuery.addOrderby(selectQuery.getOrderby());
    }
    if (selectQuery.getHaving().isPresent()) {
      createTableQuery.addHavingByAnd(selectQuery.getHaving().get());
    }
    if (selectQuery.getLimit().isPresent()) {
      createTableQuery.addLimit(selectQuery.getLimit().get());
    }
  }
  CreateTableAsSelectQuery createQuery=new CreateTableAsSelectQuery(newTableSchemaName,newTableName,createTableQuery);
  return createQuery;
}","@Override public SqlConvertible createQuery(List<ExecutionInfoToken> tokens) throws VerdictDBException {
  ExecutionInfoToken token=tokens.get(0);
  AggMeta sourceAggMeta=(AggMeta)token.getValue(""String_Node_Str"");
  Triple<List<ColumnOp>,SqlConvertible,Map<Integer,String>> aggColumnsAndQuery=createBaseQueryForReplacement(sourceAggMeta,token);
  List<ColumnOp> aggColumns=aggColumnsAndQuery.getLeft();
  SelectQuery baseQuery=(SelectQuery)aggColumnsAndQuery.getMiddle();
  Map<Integer,String> multipleTierTableTierInfo=aggColumnsAndQuery.getRight();
  HashMap<List<Integer>,Double> scaleFactor=calculateScaleFactor(sourceAggMeta,multipleTierTableTierInfo);
  if (scaleFactor.size() == 1) {
    Double s=(Double)(scaleFactor.values().toArray())[0];
    for (    ColumnOp col : aggColumns) {
      col.setOperand(0,ConstantColumn.valueOf(String.format(""String_Node_Str"",s)));
    }
  }
 else {
    for (    ColumnOp col : aggColumns) {
      col.setOpType(""String_Node_Str"");
      List<UnnamedColumn> operands=new ArrayList<>();
      for (      Map.Entry<List<Integer>,Double> entry : scaleFactor.entrySet()) {
        List<Integer> tierPermutation=entry.getKey();
        UnnamedColumn condition=generateCaseCondition(tierPermutation,multipleTierTableTierInfo);
        operands.add(condition);
        ColumnOp multiply=new ColumnOp(""String_Node_Str"",Arrays.asList(ConstantColumn.valueOf(String.format(""String_Node_Str"",entry.getValue())),col.getOperand(1)));
        operands.add(multiply);
      }
      operands.add(ConstantColumn.valueOf(0));
      col.setOperand(operands);
    }
  }
  SelectQuery query=sumUpTierGroup(baseQuery,((AggMeta)token.getValue(""String_Node_Str"")),multipleTierTableTierInfo);
  Pair<String,String> tempTableFullName=getNamer().generateTempTableName();
  newTableSchemaName=tempTableFullName.getLeft();
  newTableName=tempTableFullName.getRight();
  SelectQuery createTableQuery=replaceWithOriginalSelectList(query,((AggMeta)token.getValue(""String_Node_Str"")));
  if (selectQuery != null) {
    if (!selectQuery.getGroupby().isEmpty() && selectQuery.getHaving().isPresent()) {
      createTableQuery.addGroupby(selectQuery.getGroupby());
    }
    if (!selectQuery.getOrderby().isEmpty()) {
      createTableQuery.addOrderby(selectQuery.getOrderby());
    }
    if (selectQuery.getHaving().isPresent()) {
      createTableQuery.addHavingByAnd(selectQuery.getHaving().get());
    }
    if (selectQuery.getLimit().isPresent()) {
      createTableQuery.addLimit(selectQuery.getLimit().get());
    }
  }
  CreateTableAsSelectQuery createQuery=new CreateTableAsSelectQuery(newTableSchemaName,newTableName,createTableQuery);
  return createQuery;
}"
95937,"/** 
 * @param sourceAggMeta
 * @return Key: aggregate column list
 */
Triple<List<ColumnOp>,SqlConvertible,Map<Integer,String>> createBaseQueryForReplacement(AggMeta sourceAggMeta,ExecutionInfoToken token){
  Map<Integer,String> multipleTierTableTierInfo=new HashMap<>();
  List<ColumnOp> aggColumnlist=new ArrayList<>();
  List<HyperTableCube> cubes=sourceAggMeta.getCubes();
  SelectQuery dependentQuery=(SelectQuery)token.getValue(""String_Node_Str"");
  List<SelectItem> newSelectList=dependentQuery.deepcopy().getSelectList();
  AggMeta aggMeta=(AggMeta)token.getValue(""String_Node_Str"");
  for (  SelectItem selectItem : newSelectList) {
    if (selectItem instanceof AliasedColumn) {
      AliasedColumn aliasedColumn=(AliasedColumn)selectItem;
      int index=newSelectList.indexOf(selectItem);
      UnnamedColumn col=aliasedColumn.getColumn();
      if (aggMeta.getAggAlias().contains(aliasedColumn.getAliasName())) {
        ColumnOp aggColumn=ColumnOp.multiply(ConstantColumn.valueOf(1.0),new BaseColumn(INNER_RAW_AGG_TABLE_ALIAS,aliasedColumn.getAliasName()));
        aggColumnlist.add(aggColumn);
        newSelectList.set(index,new AliasedColumn(aggColumn,aliasedColumn.getAliasName()));
      }
 else       if (aggMeta.getMaxminAggAlias().keySet().contains(aliasedColumn.getAliasName())) {
        newSelectList.set(index,new AliasedColumn(new BaseColumn(INNER_RAW_AGG_TABLE_ALIAS,aliasedColumn.getAliasName()),aliasedColumn.getAliasName()));
      }
 else {
        if (!Initiated && col instanceof BaseColumn) {
          String schemaName=((BaseColumn)col).getSchemaName();
          String tableName=((BaseColumn)col).getTableName();
          if (scrambleMeta.isScrambled(schemaName,tableName) && ((BaseColumn)col).getColumnName().equals(scrambleMeta.getTierColumn(schemaName,tableName))) {
            for (            Dimension d : cubes.get(0).getDimensions()) {
              if (d.getTableName().equals(tableName) && d.getSchemaName().equals(schemaName)) {
                multipleTierTableTierInfo.put(cubes.get(0).getDimensions().indexOf(d),aliasedColumn.getAliasName());
                break;
              }
            }
          }
        }
        newSelectList.set(index,new AliasedColumn(new BaseColumn(INNER_RAW_AGG_TABLE_ALIAS,aliasedColumn.getAliasName()),aliasedColumn.getAliasName()));
      }
    }
  }
  SelectQuery query=SelectQuery.create(newSelectList,new BaseTable((String)token.getValue(""String_Node_Str""),(String)token.getValue(""String_Node_Str""),INNER_RAW_AGG_TABLE_ALIAS));
  return Triple.of(aggColumnlist,(SqlConvertible)query,multipleTierTableTierInfo);
}","/** 
 * @param sourceAggMeta AggMeta instance passed from a downstream node (either an individualaggregate node or a combiner node). This object contains what are the tier columns for the scrambled tables they cover and what aggregates are being computed.
 * @return Key: aggregate column list
 */
private Triple<List<ColumnOp>,SqlConvertible,Map<Integer,String>> createBaseQueryForReplacement(AggMeta sourceAggMeta,ExecutionInfoToken token){
  Map<Integer,String> multipleTierTableTierInfo=new HashMap<>();
  List<ColumnOp> aggColumnlist=new ArrayList<>();
  ScrambleMetaSet scrambleMetaSet=getScrambleMeta();
  List<HyperTableCube> cubes=sourceAggMeta.getCubes();
  SelectQuery dependentQuery=(SelectQuery)token.getValue(""String_Node_Str"");
  List<SelectItem> newSelectList=dependentQuery.deepcopy().getSelectList();
  for (  SelectItem selectItem : newSelectList) {
    if (selectItem instanceof AliasedColumn) {
      AliasedColumn aliasedColumn=(AliasedColumn)selectItem;
      int index=newSelectList.indexOf(selectItem);
      UnnamedColumn col=aliasedColumn.getColumn();
      if (sourceAggMeta.getAggAlias().contains(aliasedColumn.getAliasName())) {
        ColumnOp aggColumn=ColumnOp.multiply(ConstantColumn.valueOf(1.0),new BaseColumn(INNER_RAW_AGG_TABLE_ALIAS,aliasedColumn.getAliasName()));
        aggColumnlist.add(aggColumn);
        newSelectList.set(index,new AliasedColumn(aggColumn,aliasedColumn.getAliasName()));
      }
 else       if (sourceAggMeta.getMaxminAggAlias().keySet().contains(aliasedColumn.getAliasName())) {
        newSelectList.set(index,new AliasedColumn(new BaseColumn(INNER_RAW_AGG_TABLE_ALIAS,aliasedColumn.getAliasName()),aliasedColumn.getAliasName()));
      }
 else {
        if (col instanceof BaseColumn) {
          String schemaName=((BaseColumn)col).getSchemaName();
          String tableName=((BaseColumn)col).getTableName();
          if (scrambleMetaSet.isScrambled(schemaName,tableName) && ((BaseColumn)col).getColumnName().equals(scrambleMetaSet.getTierColumn(schemaName,tableName))) {
            for (            Dimension d : cubes.get(0).getDimensions()) {
              if (d.getTableName().equals(tableName) && d.getSchemaName().equals(schemaName)) {
                multipleTierTableTierInfo.put(cubes.get(0).getDimensions().indexOf(d),aliasedColumn.getAliasName());
                break;
              }
            }
          }
        }
        newSelectList.set(index,new AliasedColumn(new BaseColumn(INNER_RAW_AGG_TABLE_ALIAS,aliasedColumn.getAliasName()),aliasedColumn.getAliasName()));
      }
    }
  }
  SelectQuery query=SelectQuery.create(newSelectList,new BaseTable((String)token.getValue(""String_Node_Str""),(String)token.getValue(""String_Node_Str""),INNER_RAW_AGG_TABLE_ALIAS));
  return Triple.of(aggColumnlist,(SqlConvertible)query,multipleTierTableTierInfo);
}"
95938,"/** 
 * Generate the permuation of multiple tiers
 * @param scrambleTableTierInfo
 * @return
 */
List<List<Integer>> generateTierPermuation(List<Pair<Integer,Integer>> scrambleTableTierInfo){
  if (scrambleTableTierInfo.size() == 1) {
    List<List<Integer>> res=new ArrayList<>();
    for (int tier=0; tier < scrambleTableTierInfo.get(0).getRight(); tier++) {
      res.add(Arrays.asList(tier));
    }
    return res;
  }
 else {
    List<Pair<Integer,Integer>> next=scrambleTableTierInfo.subList(1,scrambleTableTierInfo.size());
    List<List<Integer>> subres=generateTierPermuation(next);
    List<List<Integer>> res=new ArrayList<>();
    for (int tier=0; tier < scrambleTableTierInfo.get(0).getRight(); tier++) {
      for (      List<Integer> tierlist : subres) {
        List<Integer> newTierlist=new ArrayList<>();
        for (        int i : tierlist) {
          newTierlist.add(Integer.valueOf(i));
        }
        newTierlist.add(0,tier);
        res.add(newTierlist);
      }
    }
    return res;
  }
}","/** 
 * Generate the permuation of multiple tiers
 * @param scrambleTableTierInfo
 * @return
 */
private List<List<Integer>> generateTierPermuation(List<Pair<Integer,Integer>> scrambleTableTierInfo){
  if (scrambleTableTierInfo.size() == 1) {
    List<List<Integer>> res=new ArrayList<>();
    for (int tier=0; tier < scrambleTableTierInfo.get(0).getRight(); tier++) {
      res.add(Arrays.asList(tier));
    }
    return res;
  }
 else {
    List<Pair<Integer,Integer>> next=scrambleTableTierInfo.subList(1,scrambleTableTierInfo.size());
    List<List<Integer>> subres=generateTierPermuation(next);
    List<List<Integer>> res=new ArrayList<>();
    for (int tier=0; tier < scrambleTableTierInfo.get(0).getRight(); tier++) {
      for (      List<Integer> tierlist : subres) {
        List<Integer> newTierlist=new ArrayList<>();
        for (        int i : tierlist) {
          newTierlist.add(Integer.valueOf(i));
        }
        newTierlist.add(0,tier);
        res.add(newTierlist);
      }
    }
    return res;
  }
}"
95939,"/** 
 * Currently, assume block size is uniform
 * @return Return tier permutation list and its scale factor
 */
public HashMap<List<Integer>,Double> calculateScaleFactor(AggMeta sourceAggMeta,Map<Integer,String> multipleTierTableTierInfo) throws VerdictDBValueException {
  List<HyperTableCube> cubes=sourceAggMeta.getCubes();
  ScrambleMetaSet scrambleMetaSet=this.getScrambleMeta();
  List<ScrambleMeta> metaForTablesList=new ArrayList<>();
  List<Integer> blockCountList=new ArrayList<>();
  List<Pair<Integer,Integer>> scrambleTableTierInfo=new ArrayList<>();
  for (  Dimension d : cubes.get(0).getDimensions()) {
    ScrambleMeta scrambleMeta=scrambleMetaSet.getSingleMeta(d.getSchemaName(),d.getTableName());
    blockCountList.add(scrambleMetaSet.getAggregationBlockCount(d.getSchemaName(),d.getTableName()));
    metaForTablesList.add(scrambleMeta);
    scrambleTableTierInfo.add(new ImmutablePair<>(cubes.get(0).getDimensions().indexOf(d),scrambleMetaSet.getSingleMeta(d.getSchemaName(),d.getTableName()).getNumberOfTiers()));
    if (scrambleMeta.getNumberOfTiers() > 1 && !Initiated) {
      Map<ScrambleMeta,String> scrambleTableTierColumnAlias=sourceAggMeta.getScrambleTableTierColumnAlias();
      if (scrambleTableTierColumnAlias.containsKey(scrambleMeta) == false) {
        throw new VerdictDBValueException(""String_Node_Str"");
      }
      multipleTierTableTierInfo.put(cubes.get(0).getDimensions().indexOf(d),scrambleTableTierColumnAlias.get(scrambleMeta));
    }
  }
  List<List<Integer>> tierPermuation=generateTierPermuation(scrambleTableTierInfo);
  HashMap<List<Integer>,Double> scaleFactor=new HashMap<>();
  for (  List<Integer> tierlist : tierPermuation) {
    double total=0;
    for (    HyperTableCube cube : cubes) {
      double scale=1;
      for (int i=0; i < tierlist.size(); i++) {
        int tier=tierlist.get(i);
        Dimension d=cube.getDimensions().get(i);
        double prob;
        if (d.getBegin() == 0) {
          prob=metaForTablesList.get(i).getCumulativeDistributionForTier(tier).get(d.getEnd());
        }
 else {
          prob=metaForTablesList.get(i).getCumulativeDistributionForTier(tier).get(d.getEnd()) - metaForTablesList.get(i).getCumulativeDistributionForTier(tier).get(d.getBegin() - 1);
        }
        scale=scale * prob;
      }
      total+=scale;
    }
    if (total == 0) {
      scaleFactor.put(tierlist,0.0);
    }
 else {
      scaleFactor.put(tierlist,1.0 / total);
    }
  }
  return scaleFactor;
}","/** 
 * Currently, assume block size is uniform
 * @return Return tier permutation list and its scale factor
 */
private HashMap<List<Integer>,Double> calculateScaleFactor(AggMeta sourceAggMeta,Map<Integer,String> multipleTierTableTierInfo) throws VerdictDBValueException {
  List<HyperTableCube> cubes=sourceAggMeta.getCubes();
  ScrambleMetaSet scrambleMetaSet=this.getScrambleMeta();
  List<ScrambleMeta> metaForTablesList=new ArrayList<>();
  List<Integer> blockCountList=new ArrayList<>();
  List<Pair<Integer,Integer>> scrambleTableTierInfo=new ArrayList<>();
  for (  Dimension d : cubes.get(0).getDimensions()) {
    ScrambleMeta scrambleMeta=scrambleMetaSet.getSingleMeta(d.getSchemaName(),d.getTableName());
    blockCountList.add(scrambleMetaSet.getAggregationBlockCount(d.getSchemaName(),d.getTableName()));
    metaForTablesList.add(scrambleMeta);
    scrambleTableTierInfo.add(new ImmutablePair<>(cubes.get(0).getDimensions().indexOf(d),scrambleMetaSet.getSingleMeta(d.getSchemaName(),d.getTableName()).getNumberOfTiers()));
    if (scrambleMeta.getNumberOfTiers() > 1) {
      Map<ScrambleMeta,String> scrambleTableTierColumnAlias=sourceAggMeta.getScrambleTableTierColumnAlias();
      if (scrambleTableTierColumnAlias.containsKey(scrambleMeta) == false) {
        throw new VerdictDBValueException(""String_Node_Str"");
      }
      multipleTierTableTierInfo.put(cubes.get(0).getDimensions().indexOf(d),scrambleTableTierColumnAlias.get(scrambleMeta));
    }
  }
  List<List<Integer>> tierPermuation=generateTierPermuation(scrambleTableTierInfo);
  HashMap<List<Integer>,Double> scaleFactor=new HashMap<>();
  for (  List<Integer> tierlist : tierPermuation) {
    double total=0;
    for (    HyperTableCube cube : cubes) {
      double scale=1;
      for (int i=0; i < tierlist.size(); i++) {
        int tier=tierlist.get(i);
        Dimension d=cube.getDimensions().get(i);
        double prob;
        if (d.getBegin() == 0) {
          prob=metaForTablesList.get(i).getCumulativeDistributionForTier(tier).get(d.getEnd());
        }
 else {
          prob=metaForTablesList.get(i).getCumulativeDistributionForTier(tier).get(d.getEnd()) - metaForTablesList.get(i).getCumulativeDistributionForTier(tier).get(d.getBegin() - 1);
        }
        scale=scale * prob;
      }
      total+=scale;
    }
    if (total == 0) {
      scaleFactor.put(tierlist,0.0);
    }
 else {
      scaleFactor.put(tierlist,1.0 / total);
    }
  }
  return scaleFactor;
}"
95940,"/** 
 * Replace the scaled select list with original select list
 * @param queryToReplace, aggMeta
 * @return replaced original select list
 */
SelectQuery replaceWithOriginalSelectList(SelectQuery queryToReplace,AggMeta aggMeta){
  List<SelectItem> originalSelectList=aggMeta.getOriginalSelectList();
  Map<SelectItem,List<ColumnOp>> aggColumn=aggMeta.getAggColumn();
  HashMap<String,UnnamedColumn> aggContents=new HashMap<>();
  for (  SelectItem sel : queryToReplace.getSelectList()) {
    if (sel instanceof AliasedColumn && aggMeta.getAggAlias().contains(((AliasedColumn)sel).getAliasName())) {
      aggContents.put(((AliasedColumn)sel).getAliasName(),((AliasedColumn)sel).getColumn());
    }
 else     if (sel instanceof AliasedColumn && aggMeta.getMaxminAggAlias().keySet().contains(((AliasedColumn)sel).getAliasName())) {
      aggContents.put(((AliasedColumn)sel).getAliasName(),((AliasedColumn)sel).getColumn());
    }
  }
  for (  SelectItem sel : originalSelectList) {
    if (aggColumn.containsKey(sel)) {
      List<ColumnOp> columnOps=aggColumn.get(sel);
      for (      ColumnOp col : columnOps) {
        if (col.getOpType().equals(""String_Node_Str"") || col.getOpType().equals(""String_Node_Str"")) {
          String aliasName;
          if (col.getOpType().equals(""String_Node_Str"")) {
            aliasName=aggMeta.getAggColumnAggAliasPair().get(new ImmutablePair<>(col.getOpType(),(UnnamedColumn)new AsteriskColumn()));
          }
 else           aliasName=aggMeta.getAggColumnAggAliasPair().get(new ImmutablePair<>(col.getOpType(),col.getOperand(0)));
          ColumnOp aggContent=(ColumnOp)aggContents.get(aliasName);
          col.setOpType(aggContent.getOpType());
          col.setOperand(aggContent.getOperands());
        }
 else         if (col.getOpType().equals(""String_Node_Str"") || col.getOpType().equals(""String_Node_Str"")) {
          String aliasName=aggMeta.getAggColumnAggAliasPairOfMaxMin().get(new ImmutablePair<>(col.getOpType(),col.getOperand(0)));
          if (aggContents.get(aliasName) instanceof BaseColumn) {
            BaseColumn aggContent=(BaseColumn)aggContents.get(aliasName);
            col.setOpType(""String_Node_Str"");
            col.setOperand(Arrays.asList(ConstantColumn.valueOf(1),aggContent));
          }
 else {
            ColumnOp aggContent=(ColumnOp)aggContents.get(aliasName);
            col.setOpType(aggContent.getOpType());
            col.setOperand(aggContent.getOperands());
          }
        }
 else         if (col.getOpType().equals(""String_Node_Str"")) {
          String aliasNameSum=aggMeta.getAggColumnAggAliasPair().get(new ImmutablePair<>(""String_Node_Str"",col.getOperand(0)));
          ColumnOp aggContentSum=(ColumnOp)aggContents.get(aliasNameSum);
          String aliasNameCount=aggMeta.getAggColumnAggAliasPair().get(new ImmutablePair<>(""String_Node_Str"",(UnnamedColumn)new AsteriskColumn()));
          ColumnOp aggContentCount=(ColumnOp)aggContents.get(aliasNameCount);
          col.setOpType(""String_Node_Str"");
          col.setOperand(Arrays.<UnnamedColumn>asList(aggContentSum,aggContentCount));
        }
      }
    }
 else     if (sel instanceof AliasedColumn) {
      ((AliasedColumn)sel).setColumn(new BaseColumn(TIER_CONSOLIDATED_TABLE_ALIAS,((AliasedColumn)sel).getAliasName()));
      ((AliasedColumn)sel).setAliasName(((AliasedColumn)sel).getAliasName());
    }
  }
  queryToReplace.clearSelectList();
  queryToReplace.getSelectList().addAll(originalSelectList);
  return queryToReplace;
}","/** 
 * Replace the scaled select list with original select list
 * @param queryToReplace, aggMeta
 * @return replaced original select list
 */
private SelectQuery replaceWithOriginalSelectList(SelectQuery queryToReplace,AggMeta aggMeta){
  List<SelectItem> originalSelectList=aggMeta.getOriginalSelectList();
  Map<SelectItem,List<ColumnOp>> aggColumn=aggMeta.getAggColumn();
  HashMap<String,UnnamedColumn> aggContents=new HashMap<>();
  for (  SelectItem sel : queryToReplace.getSelectList()) {
    if (sel instanceof AliasedColumn && aggMeta.getAggAlias().contains(((AliasedColumn)sel).getAliasName())) {
      aggContents.put(((AliasedColumn)sel).getAliasName(),((AliasedColumn)sel).getColumn());
    }
 else     if (sel instanceof AliasedColumn && aggMeta.getMaxminAggAlias().keySet().contains(((AliasedColumn)sel).getAliasName())) {
      aggContents.put(((AliasedColumn)sel).getAliasName(),((AliasedColumn)sel).getColumn());
    }
  }
  for (  SelectItem sel : originalSelectList) {
    if (aggColumn.containsKey(sel)) {
      List<ColumnOp> columnOps=aggColumn.get(sel);
      for (      ColumnOp col : columnOps) {
        if (col.getOpType().equals(""String_Node_Str"") || col.getOpType().equals(""String_Node_Str"")) {
          String aliasName;
          if (col.getOpType().equals(""String_Node_Str"")) {
            aliasName=aggMeta.getAggColumnAggAliasPair().get(new ImmutablePair<>(col.getOpType(),(UnnamedColumn)new AsteriskColumn()));
          }
 else           aliasName=aggMeta.getAggColumnAggAliasPair().get(new ImmutablePair<>(col.getOpType(),col.getOperand(0)));
          ColumnOp aggContent=(ColumnOp)aggContents.get(aliasName);
          col.setOpType(aggContent.getOpType());
          col.setOperand(aggContent.getOperands());
        }
 else         if (col.getOpType().equals(""String_Node_Str"") || col.getOpType().equals(""String_Node_Str"")) {
          String aliasName=aggMeta.getAggColumnAggAliasPairOfMaxMin().get(new ImmutablePair<>(col.getOpType(),col.getOperand(0)));
          if (aggContents.get(aliasName) instanceof BaseColumn) {
            BaseColumn aggContent=(BaseColumn)aggContents.get(aliasName);
            col.setOpType(""String_Node_Str"");
            col.setOperand(Arrays.asList(ConstantColumn.valueOf(1),aggContent));
          }
 else {
            ColumnOp aggContent=(ColumnOp)aggContents.get(aliasName);
            col.setOpType(aggContent.getOpType());
            col.setOperand(aggContent.getOperands());
          }
        }
 else         if (col.getOpType().equals(""String_Node_Str"")) {
          String aliasNameSum=aggMeta.getAggColumnAggAliasPair().get(new ImmutablePair<>(""String_Node_Str"",col.getOperand(0)));
          ColumnOp aggContentSum=(ColumnOp)aggContents.get(aliasNameSum);
          String aliasNameCount=aggMeta.getAggColumnAggAliasPair().get(new ImmutablePair<>(""String_Node_Str"",(UnnamedColumn)new AsteriskColumn()));
          ColumnOp aggContentCount=(ColumnOp)aggContents.get(aliasNameCount);
          col.setOpType(""String_Node_Str"");
          col.setOperand(Arrays.<UnnamedColumn>asList(aggContentSum,aggContentCount));
        }
      }
    }
 else     if (sel instanceof AliasedColumn) {
      ((AliasedColumn)sel).setColumn(new BaseColumn(TIER_CONSOLIDATED_TABLE_ALIAS,((AliasedColumn)sel).getAliasName()));
      ((AliasedColumn)sel).setAliasName(((AliasedColumn)sel).getAliasName());
    }
  }
  queryToReplace.clearSelectList();
  queryToReplace.getSelectList().addAll(originalSelectList);
  return queryToReplace;
}"
95941,"/** 
 * Create a sum-up query that sum the results from all tier permutations
 * @param subquery
 * @return select query that sum all the tier results
 */
SelectQuery sumUpTierGroup(SelectQuery subquery,AggMeta aggMeta,Map<Integer,String> multipleTierTableTierInfo){
  List<String> aggAlias=aggMeta.getAggAlias();
  List<String> groupby=new ArrayList<>();
  List<SelectItem> newSelectlist=new ArrayList<>();
  for (  SelectItem sel : subquery.getSelectList()) {
    if (sel instanceof AliasedColumn) {
      if (aggAlias.contains(((AliasedColumn)sel).getAliasName())) {
        newSelectlist.add(new AliasedColumn(ColumnOp.sum(new BaseColumn(TIER_CONSOLIDATED_TABLE_ALIAS,((AliasedColumn)sel).getAliasName())),((AliasedColumn)sel).getAliasName()));
      }
 else       if (aggMeta.getMaxminAggAlias().keySet().contains(((AliasedColumn)sel).getAliasName())) {
        String opType=aggMeta.getMaxminAggAlias().get(((AliasedColumn)sel).getAliasName());
        newSelectlist.add(new AliasedColumn(new ColumnOp(opType,new BaseColumn(TIER_CONSOLIDATED_TABLE_ALIAS,((AliasedColumn)sel).getAliasName())),((AliasedColumn)sel).getAliasName()));
      }
 else {
        if (!multipleTierTableTierInfo.values().contains(((AliasedColumn)sel).getAliasName())) {
          newSelectlist.add(new AliasedColumn(new BaseColumn(TIER_CONSOLIDATED_TABLE_ALIAS,((AliasedColumn)sel).getAliasName()),((AliasedColumn)sel).getAliasName()));
          groupby.add(((AliasedColumn)sel).getAliasName());
        }
      }
    }
  }
  subquery.setAliasName(TIER_CONSOLIDATED_TABLE_ALIAS);
  SelectQuery query=SelectQuery.create(newSelectlist,subquery);
  for (  String group : groupby) {
    query.addGroupby(new AliasReference(group));
  }
  return query;
}","/** 
 * Create a sum-up query that sum the results from all tier permutations
 * @param subquery
 * @return select query that sum all the tier results
 */
private SelectQuery sumUpTierGroup(SelectQuery subquery,AggMeta aggMeta,Map<Integer,String> multipleTierTableTierInfo){
  List<String> aggAlias=aggMeta.getAggAlias();
  List<String> groupby=new ArrayList<>();
  List<SelectItem> newSelectlist=new ArrayList<>();
  for (  SelectItem sel : subquery.getSelectList()) {
    if (sel instanceof AliasedColumn) {
      if (aggAlias.contains(((AliasedColumn)sel).getAliasName())) {
        newSelectlist.add(new AliasedColumn(ColumnOp.sum(new BaseColumn(TIER_CONSOLIDATED_TABLE_ALIAS,((AliasedColumn)sel).getAliasName())),((AliasedColumn)sel).getAliasName()));
      }
 else       if (aggMeta.getMaxminAggAlias().keySet().contains(((AliasedColumn)sel).getAliasName())) {
        String opType=aggMeta.getMaxminAggAlias().get(((AliasedColumn)sel).getAliasName());
        newSelectlist.add(new AliasedColumn(new ColumnOp(opType,new BaseColumn(TIER_CONSOLIDATED_TABLE_ALIAS,((AliasedColumn)sel).getAliasName())),((AliasedColumn)sel).getAliasName()));
      }
 else {
        if (!multipleTierTableTierInfo.values().contains(((AliasedColumn)sel).getAliasName())) {
          newSelectlist.add(new AliasedColumn(new BaseColumn(TIER_CONSOLIDATED_TABLE_ALIAS,((AliasedColumn)sel).getAliasName()),((AliasedColumn)sel).getAliasName()));
          groupby.add(((AliasedColumn)sel).getAliasName());
        }
      }
    }
  }
  subquery.setAliasName(TIER_CONSOLIDATED_TABLE_ALIAS);
  SelectQuery query=SelectQuery.create(newSelectlist,subquery);
  for (  String group : groupby) {
    query.addGroupby(new AliasReference(group));
  }
  return query;
}"
95942,"public static AsyncAggExecutionNode create(IdCreator idCreator,List<ExecutableNodeBase> individualAggs,List<ExecutableNodeBase> combiners,ScrambleMetaSet meta) throws VerdictDBValueException {
  AsyncAggExecutionNode node=new AsyncAggExecutionNode();
  node.subscribeTo(individualAggs.get(0),0);
  for (  ExecutableNodeBase c : combiners) {
    node.subscribeTo(c,0);
  }
  node.setScrambleMeta(meta);
  node.setNamer(idCreator);
  return node;
}","public static AsyncAggExecutionNode create(IdCreator idCreator,List<ExecutableNodeBase> individualAggs,List<ExecutableNodeBase> combiners,ScrambleMetaSet meta){
  AsyncAggExecutionNode node=new AsyncAggExecutionNode();
  node.subscribeTo(individualAggs.get(0),0);
  for (  ExecutableNodeBase c : combiners) {
    node.subscribeTo(c,0);
  }
  node.setScrambleMetaSet(meta);
  node.setNamer(idCreator);
  return node;
}"
95943,"void copyFields(AsyncAggExecutionNode from,AsyncAggExecutionNode to){
  to.scrambleMeta=from.scrambleMeta;
  to.nonaggColumns=from.nonaggColumns;
  to.aggColumns=from.aggColumns;
}","void copyFields(AsyncAggExecutionNode from,AsyncAggExecutionNode to){
}"
95944,"UnnamedColumn generateCaseCondition(List<Integer> tierlist,Map<Integer,String> multipleTierTableTierInfo){
  Optional<ColumnOp> col=Optional.absent();
  for (  Map.Entry<Integer,String> entry : multipleTierTableTierInfo.entrySet()) {
    BaseColumn tierColumn=new BaseColumn(INNER_RAW_AGG_TABLE_ALIAS,entry.getValue());
    ColumnOp equation=new ColumnOp(""String_Node_Str"",Arrays.asList(tierColumn,ConstantColumn.valueOf(tierlist.get(entry.getKey()))));
    if (col.isPresent()) {
      col=Optional.of(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(equation,col.get())));
    }
 else {
      col=Optional.of(equation);
    }
  }
  return col.get();
}","private UnnamedColumn generateCaseCondition(List<Integer> tierlist,Map<Integer,String> multipleTierTableTierInfo){
  Optional<ColumnOp> col=Optional.absent();
  for (  Map.Entry<Integer,String> entry : multipleTierTableTierInfo.entrySet()) {
    BaseColumn tierColumn=new BaseColumn(INNER_RAW_AGG_TABLE_ALIAS,entry.getValue());
    ColumnOp equation=new ColumnOp(""String_Node_Str"",Arrays.asList(tierColumn,ConstantColumn.valueOf(tierlist.get(entry.getKey()))));
    if (col.isPresent()) {
      col=Optional.of(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(equation,col.get())));
    }
 else {
      col=Optional.of(equation);
    }
  }
  return col.get();
}"
95945,"@Test public void ScrambleTableWithScalingTest2() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=QueryExecutionPlanFactory.create(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  queryExecutionPlan=AsyncQueryExecutionPlan.create(queryExecutionPlan);
  ((AsyncAggExecutionNode)queryExecutionPlan.getRoot().getExecutableNodeBaseDependent(0).getExecutableNodeBaseDependent(0)).setScrambleMeta(meta);
  stmt.execute(""String_Node_Str"");
  JdbcConnection jdbcconn=new JdbcConnection(conn,new H2Syntax());
  ExecutablePlanRunner.runTillEnd(jdbcconn,queryExecutionPlan);
  jdbcconn.execute(""String_Node_Str"");
}","@Test public void ScrambleTableWithScalingTest2() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=QueryExecutionPlanFactory.create(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  queryExecutionPlan=AsyncQueryExecutionPlan.create(queryExecutionPlan);
  ((AsyncAggExecutionNode)queryExecutionPlan.getRoot().getExecutableNodeBaseDependent(0).getExecutableNodeBaseDependent(0)).setScrambleMetaSet(meta);
  stmt.execute(""String_Node_Str"");
  JdbcConnection jdbcconn=new JdbcConnection(conn,new H2Syntax());
  ExecutablePlanRunner.runTillEnd(jdbcconn,queryExecutionPlan);
  jdbcconn.execute(""String_Node_Str"");
}"
95946,"@Test public void ScrambleTableWithScalingTest() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=QueryExecutionPlanFactory.create(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  queryExecutionPlan=AsyncQueryExecutionPlan.create(queryExecutionPlan);
  ((AsyncAggExecutionNode)queryExecutionPlan.getRoot().getExecutableNodeBaseDependent(0)).setScrambleMeta(meta);
  stmt.execute(""String_Node_Str"");
  JdbcConnection jdbcconn=new JdbcConnection(conn,new H2Syntax());
  ExecutablePlanRunner.runTillEnd(jdbcconn,queryExecutionPlan);
  jdbcconn.execute(""String_Node_Str"");
}","@Test public void ScrambleTableWithScalingTest() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=QueryExecutionPlanFactory.create(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  queryExecutionPlan=AsyncQueryExecutionPlan.create(queryExecutionPlan);
  ((AsyncAggExecutionNode)queryExecutionPlan.getRoot().getExecutableNodeBaseDependent(0)).setScrambleMetaSet(meta);
  stmt.execute(""String_Node_Str"");
  JdbcConnection jdbcconn=new JdbcConnection(conn,new H2Syntax());
  ExecutablePlanRunner.runTillEnd(jdbcconn,queryExecutionPlan);
  jdbcconn.execute(""String_Node_Str"");
}"
95947,"/** 
 * Currently, assume block size is uniform
 * @return Return tier permutation list and its scale factor
 */
public HashMap<List<Integer>,Double> calculateScaleFactor(List<HyperTableCube> cubes){
  ScrambleMetaSet scrambleMeta=this.getScrambleMeta();
  List<ScrambleMeta> metaForTablesList=new ArrayList<>();
  List<Integer> blockCountList=new ArrayList<>();
  List<Pair<Integer,Integer>> scrambleTableTierInfo=new ArrayList<>();
  for (  Dimension d : cubes.get(0).getDimensions()) {
    blockCountList.add(scrambleMeta.getAggregationBlockCount(d.getSchemaName(),d.getTableName()));
    metaForTablesList.add(scrambleMeta.getMetaForTable(d.getSchemaName(),d.getTableName()));
    scrambleTableTierInfo.add(new ImmutablePair<>(cubes.get(0).getDimensions().indexOf(d),scrambleMeta.getMetaForTable(d.getSchemaName(),d.getTableName()).getNumberOfTiers()));
    if (scrambleMeta.getMetaForTable(d.getSchemaName(),d.getTableName()).getNumberOfTiers() > 1 && !Initiated) {
      multipleTierTableTierInfo.put(cubes.get(0).getDimensions().indexOf(d),scrambleMeta.getMetaForTable(d.getSchemaName(),d.getTableName()).getTierColumn());
    }
  }
  List<List<Integer>> tierPermuation=generateTierPermuation(scrambleTableTierInfo);
  HashMap<List<Integer>,Double> scaleFactor=new HashMap<>();
  for (  List<Integer> tierlist : tierPermuation) {
    double total=0;
    for (    HyperTableCube cube : cubes) {
      double scale=1;
      for (int i=0; i < tierlist.size(); i++) {
        int tier=tierlist.get(i);
        Dimension d=cube.getDimensions().get(i);
        double prob=0;
        if (d.getBegin() == 0) {
          prob=metaForTablesList.get(i).getCumulativeDistributionForTier(tier).get(d.getEnd());
        }
 else {
          prob=metaForTablesList.get(i).getCumulativeDistributionForTier(tier).get(d.getEnd()) - metaForTablesList.get(i).getCumulativeDistributionForTier(tier).get(d.getBegin() - 1);
        }
        scale=scale * prob;
      }
      total+=scale;
    }
    if (total == 0)     scaleFactor.put(tierlist,0.0);
 else     scaleFactor.put(tierlist,1 / total);
  }
  return scaleFactor;
}","/** 
 * Currently, assume block size is uniform
 * @return Return tier permutation list and its scale factor
 */
public HashMap<List<Integer>,Double> calculateScaleFactor(List<HyperTableCube> cubes){
  ScrambleMetaSet scrambleMeta=this.getScrambleMeta();
  List<ScrambleMeta> metaForTablesList=new ArrayList<>();
  List<Integer> blockCountList=new ArrayList<>();
  List<Pair<Integer,Integer>> scrambleTableTierInfo=new ArrayList<>();
  for (  Dimension d : cubes.get(0).getDimensions()) {
    blockCountList.add(scrambleMeta.getAggregationBlockCount(d.getSchemaName(),d.getTableName()));
    metaForTablesList.add(scrambleMeta.getMetaForTable(d.getSchemaName(),d.getTableName()));
    scrambleTableTierInfo.add(new ImmutablePair<>(cubes.get(0).getDimensions().indexOf(d),scrambleMeta.getMetaForTable(d.getSchemaName(),d.getTableName()).getNumberOfTiers()));
    if (scrambleMeta.getMetaForTable(d.getSchemaName(),d.getTableName()).getNumberOfTiers() > 1 && !Initiated) {
      ScrambleMeta meta=scrambleMeta.getMetaForTable(d.getSchemaName(),d.getTableName());
      HashMap<ScrambleMeta,List<String>> scrambleTableTierColumnAlias=getScrambleTableTierColumnAlias();
      if (scrambleTableTierColumnAlias.containsKey(meta)) {
        multipleTierTableTierInfo.put(cubes.get(0).getDimensions().indexOf(d),scrambleTableTierColumnAlias.get(meta).get(0));
        scrambleTableTierColumnAlias.get(meta).remove(0);
        if (scrambleTableTierColumnAlias.get(meta).isEmpty()) {
          scrambleTableTierColumnAlias.remove(meta);
        }
      }
 else {
        multipleTierTableTierInfo.put(cubes.get(0).getDimensions().indexOf(d),scrambleMeta.getMetaForTable(d.getSchemaName(),d.getTableName()).getTierColumn());
      }
    }
  }
  List<List<Integer>> tierPermuation=generateTierPermuation(scrambleTableTierInfo);
  HashMap<List<Integer>,Double> scaleFactor=new HashMap<>();
  for (  List<Integer> tierlist : tierPermuation) {
    double total=0;
    for (    HyperTableCube cube : cubes) {
      double scale=1;
      for (int i=0; i < tierlist.size(); i++) {
        int tier=tierlist.get(i);
        Dimension d=cube.getDimensions().get(i);
        double prob=0;
        if (d.getBegin() == 0) {
          prob=metaForTablesList.get(i).getCumulativeDistributionForTier(tier).get(d.getEnd());
        }
 else {
          prob=metaForTablesList.get(i).getCumulativeDistributionForTier(tier).get(d.getEnd()) - metaForTablesList.get(i).getCumulativeDistributionForTier(tier).get(d.getBegin() - 1);
        }
        scale=scale * prob;
      }
      total+=scale;
    }
    if (total == 0)     scaleFactor.put(tierlist,0.0);
 else     scaleFactor.put(tierlist,1 / total);
  }
  return scaleFactor;
}"
95948,"public static SelectAllExecutionNode create(IdCreator namer,SelectQuery query) throws VerdictDBValueException {
  SelectAllExecutionNode selectAll=new SelectAllExecutionNode(null);
  Pair<BaseTable,SubscriptionTicket> baseAndSubscriptionTicket=selectAll.createPlaceHolderTable(""String_Node_Str"");
  SelectQuery selectQuery=SelectQuery.create(new AsteriskColumn(),baseAndSubscriptionTicket.getLeft());
  selectAll.setSelectQuery(selectQuery);
  if (query.isSupportedAggregate()) {
    AggExecutionNode dependent=AggExecutionNode.create(namer,query);
    dependent.registerSubscriber(baseAndSubscriptionTicket.getRight());
  }
 else {
    ProjectionNode dependent=ProjectionNode.create(namer,query);
    dependent.registerSubscriber(baseAndSubscriptionTicket.getRight());
  }
  return selectAll;
}","public static SelectAllExecutionNode create(IdCreator namer,SelectQuery query) throws VerdictDBValueException {
  SelectAllExecutionNode selectAll=new SelectAllExecutionNode(null);
  Pair<BaseTable,SubscriptionTicket> baseAndSubscriptionTicket=selectAll.createPlaceHolderTable(""String_Node_Str"");
  SelectQuery selectQuery=SelectQuery.create(new AsteriskColumn(),baseAndSubscriptionTicket.getLeft());
  selectQuery.addOrderby(query.getOrderby());
  if (query.getLimit().isPresent())   selectQuery.addLimit(query.getLimit().get());
  selectAll.setSelectQuery(selectQuery);
  if (query.isSupportedAggregate()) {
    AggExecutionNode dependent=AggExecutionNode.create(namer,query);
    dependent.registerSubscriber(baseAndSubscriptionTicket.getRight());
  }
 else {
    ProjectionNode dependent=ProjectionNode.create(namer,query);
    dependent.registerSubscriber(baseAndSubscriptionTicket.getRight());
  }
  return selectAll;
}"
95949,"@Override public SqlConvertible createQuery(List<ExecutionInfoToken> tokens) throws VerdictDBException {
  savedToken=tokens.get(0);
  List<HyperTableCube> cubes=((AggMeta)savedToken.getValue(""String_Node_Str"")).getCubes();
  HashMap<List<Integer>,Double> scaleFactor=calculateScaleFactor(cubes);
  Pair<List<ColumnOp>,SqlConvertible> aggColumnsAndQuery=createBaseQueryForReplacement(cubes);
  if (scaleFactor.size() == 1) {
    Double s=(Double)(scaleFactor.values().toArray())[0];
    for (    ColumnOp col : aggColumnsAndQuery.getLeft()) {
      col.setOperand(0,ConstantColumn.valueOf(String.format(""String_Node_Str"",s)));
    }
  }
 else {
    for (    ColumnOp col : aggColumnsAndQuery.getLeft()) {
      String alias=((BaseColumn)col.getOperand(1)).getColumnName();
      col.setOpType(""String_Node_Str"");
      List<UnnamedColumn> operands=new ArrayList<>();
      for (      Map.Entry<List<Integer>,Double> entry : scaleFactor.entrySet()) {
        UnnamedColumn condition=generateCaseCondition(entry.getKey());
        operands.add(condition);
        ColumnOp multiply=new ColumnOp(""String_Node_Str"",Arrays.asList(ConstantColumn.valueOf(String.format(""String_Node_Str"",entry.getValue())),col.getOperand(1)));
        operands.add(multiply);
      }
      operands.add(ConstantColumn.valueOf(0));
      col.setOperand(operands);
    }
  }
  SelectQuery query;
  if (multipleTierTableTierInfo.size() > 0) {
    query=sumUpTierGroup((SelectQuery)aggColumnsAndQuery.getRight(),((AggMeta)savedToken.getValue(""String_Node_Str"")));
  }
 else   query=(SelectQuery)aggColumnsAndQuery.getRight();
  Pair<String,String> tempTableFullName=getNamer().generateTempTableName();
  newTableSchemaName=tempTableFullName.getLeft();
  newTableName=tempTableFullName.getRight();
  SelectQuery createTableQuery=replaceWithOriginalSelectList(query,((AggMeta)savedToken.getValue(""String_Node_Str"")));
  if (selectQuery != null) {
    if (!selectQuery.getGroupby().isEmpty()) {
      createTableQuery.addGroupby(selectQuery.getGroupby());
    }
    if (!selectQuery.getOrderby().isEmpty()) {
      createTableQuery.addOrderby(selectQuery.getOrderby());
    }
    if (selectQuery.getHaving().isPresent()) {
      createTableQuery.addHavingByAnd(selectQuery.getHaving().get());
    }
    if (selectQuery.getLimit().isPresent()) {
      createTableQuery.addLimit(selectQuery.getLimit().get());
    }
  }
  CreateTableAsSelectQuery createQuery=new CreateTableAsSelectQuery(newTableSchemaName,newTableName,createTableQuery);
  return createQuery;
}","@Override public SqlConvertible createQuery(List<ExecutionInfoToken> tokens) throws VerdictDBException {
  savedToken=tokens.get(0);
  List<HyperTableCube> cubes=((AggMeta)savedToken.getValue(""String_Node_Str"")).getCubes();
  HashMap<List<Integer>,Double> scaleFactor=calculateScaleFactor(cubes);
  Pair<List<ColumnOp>,SqlConvertible> aggColumnsAndQuery=createBaseQueryForReplacement(cubes);
  if (scaleFactor.size() == 1) {
    Double s=(Double)(scaleFactor.values().toArray())[0];
    for (    ColumnOp col : aggColumnsAndQuery.getLeft()) {
      col.setOperand(0,ConstantColumn.valueOf(String.format(""String_Node_Str"",s)));
    }
  }
 else {
    for (    ColumnOp col : aggColumnsAndQuery.getLeft()) {
      String alias=((BaseColumn)col.getOperand(1)).getColumnName();
      col.setOpType(""String_Node_Str"");
      List<UnnamedColumn> operands=new ArrayList<>();
      for (      Map.Entry<List<Integer>,Double> entry : scaleFactor.entrySet()) {
        UnnamedColumn condition=generateCaseCondition(entry.getKey());
        operands.add(condition);
        ColumnOp multiply=new ColumnOp(""String_Node_Str"",Arrays.asList(ConstantColumn.valueOf(String.format(""String_Node_Str"",entry.getValue())),col.getOperand(1)));
        operands.add(multiply);
      }
      operands.add(ConstantColumn.valueOf(0));
      col.setOperand(operands);
    }
  }
  SelectQuery query;
  if (multipleTierTableTierInfo.size() > 0) {
    query=sumUpTierGroup((SelectQuery)aggColumnsAndQuery.getRight(),((AggMeta)savedToken.getValue(""String_Node_Str"")));
  }
 else   query=(SelectQuery)aggColumnsAndQuery.getRight();
  Pair<String,String> tempTableFullName=getNamer().generateTempTableName();
  newTableSchemaName=tempTableFullName.getLeft();
  newTableName=tempTableFullName.getRight();
  SelectQuery createTableQuery=replaceWithOriginalSelectList(query,((AggMeta)savedToken.getValue(""String_Node_Str"")));
  if (selectQuery != null) {
    if (!selectQuery.getGroupby().isEmpty() && selectQuery.getHaving().isPresent()) {
      createTableQuery.addGroupby(selectQuery.getGroupby());
    }
    if (!selectQuery.getOrderby().isEmpty()) {
      createTableQuery.addOrderby(selectQuery.getOrderby());
    }
    if (selectQuery.getHaving().isPresent()) {
      createTableQuery.addHavingByAnd(selectQuery.getHaving().get());
    }
    if (selectQuery.getLimit().isPresent()) {
      createTableQuery.addLimit(selectQuery.getLimit().get());
    }
  }
  CreateTableAsSelectQuery createQuery=new CreateTableAsSelectQuery(newTableSchemaName,newTableName,createTableQuery);
  return createQuery;
}"
95950,"@Override public DbmsQueryResult execute(String sql) throws VerdictDBDbmsException {
  try {
    Statement stmt=conn.createStatement();
    JdbcQueryResult jrs=null;
    boolean doesResultExist=stmt.execute(sql);
    if (doesResultExist) {
      ResultSet rs=stmt.getResultSet();
      jrs=new JdbcQueryResult(rs);
      rs.close();
    }
 else {
      jrs=null;
    }
    stmt.close();
    return jrs;
  }
 catch (  SQLException e) {
    throw new VerdictDBDbmsException(e.getMessage());
  }
}","@Override public DbmsQueryResult execute(String sql) throws VerdictDBDbmsException {
  System.out.println(""String_Node_Str"" + sql);
  try {
    Statement stmt=conn.createStatement();
    JdbcQueryResult jrs=null;
    boolean doesResultExist=stmt.execute(sql);
    if (doesResultExist) {
      ResultSet rs=stmt.getResultSet();
      jrs=new JdbcQueryResult(rs);
      rs.close();
    }
 else {
      jrs=null;
    }
    stmt.close();
    return jrs;
  }
 catch (  SQLException e) {
    throw new VerdictDBDbmsException(e.getMessage());
  }
}"
95951,"protected void copyFields(QueryNodeWithPlaceHolders from,QueryNodeWithPlaceHolders to){
  super.copyFields(from,to);
  to.placeholderTables=new ArrayList<>();
  to.placeholderTables.addAll(from.placeholderTables);
  to.placeholderTablesinFilter=new ArrayList<>();
  to.placeholderTablesinFilter.addAll(from.placeholderTablesinFilter);
}","protected void copyFields(QueryNodeWithPlaceHolders from,QueryNodeWithPlaceHolders to){
  super.copyFields(from,to);
  to.placeholderTables=new ArrayList<>();
  to.placeholderTables.addAll(from.placeholderTables);
  to.placeholderTablesinFilter=new ArrayList<>();
  to.placeholderTablesinFilter.addAll(from.placeholderTablesinFilter);
  deepcopyPlaceHolderTable(to.placeholderTables,to.selectQuery);
}"
95952,"@Test public void test7Tpch() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getString(2),dbmsQueryResult.getString(1));
        assertEquals(rs.getString(3),dbmsQueryResult.getString(2));
        assertEquals(rs.getDouble(4),dbmsQueryResult.getDouble(3),1e-5);
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
}","@Test public void test7Tpch() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getString(2),dbmsQueryResult.getString(1));
        assertEquals(rs.getString(3),dbmsQueryResult.getString(2));
        assertEquals(rs.getDouble(4),dbmsQueryResult.getDouble(3),1e-5);
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
95953,"@Test public void test13Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 3) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
      }
    }
  }
  assertEquals(3,cnt);
  stmt.execute(""String_Node_Str"");
}","@Test public void test13Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 3) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
      }
    }
  }
  assertEquals(3,cnt);
  stmt.execute(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
95954,"@Test public void test18Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getString(2),dbmsQueryResult.getString(1));
        assertEquals(rs.getString(3),dbmsQueryResult.getString(2));
        assertEquals(rs.getString(4),dbmsQueryResult.getString(3));
        assertEquals(rs.getString(5),dbmsQueryResult.getString(4));
        assertEquals(rs.getDouble(6),dbmsQueryResult.getDouble(5),1e-5);
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
}","@Test public void test18Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getString(2),dbmsQueryResult.getString(1));
        assertEquals(rs.getString(3),dbmsQueryResult.getString(2));
        assertEquals(rs.getString(4),dbmsQueryResult.getString(3));
        assertEquals(rs.getString(5),dbmsQueryResult.getString(4));
        assertEquals(rs.getDouble(6),dbmsQueryResult.getDouble(5),1e-5);
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
95955,"@Test public void test15Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 10) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
        assertEquals(rs.getDouble(1),dbmsQueryResult.getDouble(0),1e-5);
      }
    }
  }
  assertEquals(10,cnt);
  stmt.execute(""String_Node_Str"");
}","@Test public void test15Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 10) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
        assertEquals(rs.getDouble(1),dbmsQueryResult.getDouble(0),1e-5);
      }
    }
  }
  assertEquals(10,cnt);
  stmt.execute(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
95956,"@Test public void test9Tpch() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getString(2),dbmsQueryResult.getString(1));
        assertEquals(rs.getDouble(3),dbmsQueryResult.getDouble(2),1e-5);
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
}","@Test public void test9Tpch() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getString(2),dbmsQueryResult.getString(1));
        assertEquals(rs.getDouble(3),dbmsQueryResult.getDouble(2),1e-5);
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
95957,"@Test public void testTpch3() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getDouble(1),dbmsQueryResult.getDouble(0),1e-5);
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
        assertEquals(rs.getString(3),dbmsQueryResult.getString(2));
        assertEquals(rs.getString(4),dbmsQueryResult.getString(3));
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
}","@Test public void testTpch3() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getDouble(1),dbmsQueryResult.getDouble(0),1e-5);
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
        assertEquals(rs.getString(3),dbmsQueryResult.getString(2));
        assertEquals(rs.getString(4),dbmsQueryResult.getString(3));
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
95958,"@Test public void test5Tpch() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
}","@Test public void test5Tpch() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
95959,"@Test public void test20Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 10) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
      }
    }
  }
  assertEquals(10,cnt);
  stmt.execute(""String_Node_Str"");
}","@Test public void test20Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 10) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
      }
    }
  }
  assertEquals(10,cnt);
  stmt.execute(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
95960,"@Test public void test12Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
        assertEquals(rs.getDouble(3),dbmsQueryResult.getDouble(2),1e-5);
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
}","@Test public void test12Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
        assertEquals(rs.getDouble(3),dbmsQueryResult.getDouble(2),1e-5);
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
95961,"@Test public void test19Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 10) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getDouble(1),dbmsQueryResult.getDouble(0),1e-5);
      }
    }
  }
  assertEquals(10,cnt);
  stmt.execute(""String_Node_Str"");
}","@Test public void test19Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 10) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getDouble(1),dbmsQueryResult.getDouble(0),1e-5);
      }
    }
  }
  assertEquals(10,cnt);
  stmt.execute(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
95962,"@Test public void test8Tpch() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
        assertEquals(rs.getDouble(3),dbmsQueryResult.getDouble(2),1e-5);
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
}","@Test public void test8Tpch() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
        assertEquals(rs.getDouble(3),dbmsQueryResult.getDouble(2),1e-5);
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
95963,"@Test public void test17Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 10) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getDouble(1),dbmsQueryResult.getDouble(0),1e-5);
      }
    }
  }
  assertEquals(10,cnt);
  stmt.execute(""String_Node_Str"");
}","@Test public void test17Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 10) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getDouble(1),dbmsQueryResult.getDouble(0),1e-5);
      }
    }
  }
  assertEquals(10,cnt);
  stmt.execute(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
95964,"@Test public void testTpch1() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 10) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getString(2),dbmsQueryResult.getString(1));
        assertEquals(rs.getLong(3),dbmsQueryResult.getLong(2));
        assertEquals(rs.getDouble(4),dbmsQueryResult.getDouble(3),1e-5);
        assertEquals(rs.getDouble(5),dbmsQueryResult.getDouble(4),1e-5);
        assertEquals(rs.getDouble(6),dbmsQueryResult.getDouble(5),1e-5);
        assertEquals(rs.getDouble(7),dbmsQueryResult.getDouble(6),1e-5);
        assertEquals(rs.getDouble(8),dbmsQueryResult.getDouble(7),1e-5);
        assertEquals(rs.getDouble(9),dbmsQueryResult.getDouble(8),1e-5);
        assertEquals(rs.getDouble(10),dbmsQueryResult.getDouble(9),1e-5);
      }
    }
  }
  assertEquals(10,cnt);
  stmt.execute(""String_Node_Str"");
}","@Test public void testTpch1() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 10) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getString(2),dbmsQueryResult.getString(1));
        assertEquals(rs.getLong(3),dbmsQueryResult.getLong(2));
        assertEquals(rs.getDouble(4),dbmsQueryResult.getDouble(3),1e-5);
        assertEquals(rs.getDouble(5),dbmsQueryResult.getDouble(4),1e-5);
        assertEquals(rs.getDouble(6),dbmsQueryResult.getDouble(5),1e-5);
        assertEquals(rs.getDouble(7),dbmsQueryResult.getDouble(6),1e-5);
        assertEquals(rs.getDouble(8),dbmsQueryResult.getDouble(7),1e-5);
        assertEquals(rs.getDouble(9),dbmsQueryResult.getDouble(8),1e-5);
        assertEquals(rs.getDouble(10),dbmsQueryResult.getDouble(9),1e-5);
      }
    }
  }
  assertEquals(10,cnt);
  stmt.execute(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
95965,"@Test public void test14Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 10) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
        assertEquals(rs.getDouble(1),dbmsQueryResult.getDouble(0),1e-5);
      }
    }
  }
  assertEquals(10,cnt);
  stmt.execute(""String_Node_Str"");
}","@Test public void test14Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 10) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
        assertEquals(rs.getDouble(1),dbmsQueryResult.getDouble(0),1e-5);
      }
    }
  }
  assertEquals(10,cnt);
  stmt.execute(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
95966,"@Test public void test10Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getString(2),dbmsQueryResult.getString(1));
        assertEquals(rs.getDouble(3),dbmsQueryResult.getDouble(2),1e-5);
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
}","@Test public void test10Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getString(2),dbmsQueryResult.getString(1));
        assertEquals(rs.getDouble(3),dbmsQueryResult.getDouble(2),1e-5);
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
95967,"@Test public void test6Tpch() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 10) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getDouble(1),dbmsQueryResult.getDouble(0),1e-5);
      }
    }
  }
  assertEquals(10,cnt);
  stmt.execute(""String_Node_Str"");
}","@Test public void test6Tpch() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 10) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getDouble(1),dbmsQueryResult.getDouble(0),1e-5);
      }
    }
  }
  assertEquals(10,cnt);
  stmt.execute(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
95968,"@Test public void test4Tpch() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
}","@Test public void test4Tpch() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
95969,"public void test21Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
}","@Test public void test21Tpch() throws VerdictDBException, SQLException {
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  stmt.execute(""String_Node_Str"");
  SelectQueryCoordinator coordinator=new SelectQueryCoordinator(new JdbcConnection(conn,new MysqlSyntax()));
  coordinator.setScrambleMetaSet(meta);
  coordinator.setDefaultSchema(""String_Node_Str"");
  ExecutionResultReader reader=coordinator.process(sql);
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(coordinator.getStaticMetaData());
  relation=gen.standardize((SelectQuery)relation);
  SelectQueryToSql selectQueryToSql=new SelectQueryToSql(new MysqlSyntax());
  String stdQuery=selectQueryToSql.toSql(relation);
  int cnt=0;
  while (reader.hasNext()) {
    DbmsQueryResult dbmsQueryResult=reader.next();
    cnt++;
    if (cnt == 12) {
      ResultSet rs=stmt.executeQuery(stdQuery);
      while (rs.next()) {
        dbmsQueryResult.next();
        assertEquals(rs.getString(1),dbmsQueryResult.getString(0));
        assertEquals(rs.getDouble(2),dbmsQueryResult.getDouble(1),1e-5);
      }
    }
  }
  assertEquals(12,cnt);
  stmt.execute(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
}"
95970,"@Override public AbstractRelation getScramblingSource(String originalSchema,String originalTable,Map<String,Object> metaData){
  if (primaryColumnName.isPresent()) {
    Pair<String,String> fullTableName=(Pair<String,String>)metaData.get(LargeGroupListNode.class.getSimpleName());
    String largeGroupListSchemaName=fullTableName.getLeft();
    String largeGroupListTableName=fullTableName.getRight();
    JoinTable source=JoinTable.create(Arrays.<AbstractRelation>asList(new BaseTable(originalSchema,originalTable,MAIN_TABLE_SOURCE_ALIAS_NAME),new BaseTable(largeGroupListSchemaName,largeGroupListTableName,RIGHT_TABLE_SOURCE_ALIAS_NAME)),Arrays.asList(JoinTable.JoinType.leftouter),Arrays.<UnnamedColumn>asList(ColumnOp.equal(new BaseColumn(MAIN_TABLE_SOURCE_ALIAS_NAME,primaryColumnName.get()),new BaseColumn(RIGHT_TABLE_SOURCE_ALIAS_NAME,LargeGroupListNode.PRIMARY_GROUP_RENAME))));
    return source;
  }
 else {
    return new BaseTable(originalSchema,originalTable,MAIN_TABLE_SOURCE_ALIAS_NAME);
  }
}","@Override public AbstractRelation getScramblingSource(String originalSchema,String originalTable,Map<String,Object> metaData){
  if (primaryColumnName.isPresent()) {
    @SuppressWarnings(""String_Node_Str"") Pair<String,String> fullTableName=(Pair<String,String>)metaData.get(LargeGroupListNode.class.getSimpleName());
    String largeGroupListSchemaName=fullTableName.getLeft();
    String largeGroupListTableName=fullTableName.getRight();
    JoinTable source=JoinTable.create(Arrays.<AbstractRelation>asList(new BaseTable(originalSchema,originalTable,MAIN_TABLE_SOURCE_ALIAS_NAME),new BaseTable(largeGroupListSchemaName,largeGroupListTableName,RIGHT_TABLE_SOURCE_ALIAS_NAME)),Arrays.asList(JoinTable.JoinType.leftouter),Arrays.<UnnamedColumn>asList(ColumnOp.equal(new BaseColumn(MAIN_TABLE_SOURCE_ALIAS_NAME,primaryColumnName.get()),new BaseColumn(RIGHT_TABLE_SOURCE_ALIAS_NAME,LargeGroupListNode.PRIMARY_GROUP_RENAME))));
    return source;
  }
 else {
    return new BaseTable(originalSchema,originalTable,MAIN_TABLE_SOURCE_ALIAS_NAME);
  }
}"
95971,"@Test public void testScramblingNodeCreation() throws VerdictDBException, SQLException {
  String newSchemaName=""String_Node_Str"";
  String newTableName=""String_Node_Str"";
  String oldSchemaName=""String_Node_Str"";
  String oldTableName=""String_Node_Str"";
  int blockSize=2;
  ScramblingMethod method=new UniformScramblingMethod(blockSize);
  Map<String,String> options=new HashMap<>();
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  String sql=""String_Node_Str"";
  DbmsConnection conn=new JdbcConnection(mysqlConn);
  DbmsQueryResult queryResult=conn.execute(sql);
  ScramblingNode node=ScramblingNode.create(newSchemaName,newTableName,oldSchemaName,oldTableName,method,options);
  List<ExecutionInfoToken> tokens=new ArrayList<>();
  ExecutionInfoToken e=new ExecutionInfoToken();
  e.setKeyValue(TableSizeCountNode.class.getSimpleName(),queryResult);
  tokens.add(e);
  e=new ExecutionInfoToken();
  e.setKeyValue(""String_Node_Str"",newSchemaName);
  e.setKeyValue(""String_Node_Str"",newTableName);
  tokens.add(e);
  SqlConvertible query=node.createQuery(tokens);
  sql=QueryToSql.convert(new MysqlSyntax(),query);
  String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  assertEquals(expected,sql);
  mysqlConn.createStatement().execute(""String_Node_Str"");
  mysqlConn.createStatement().execute(sql);
}","@Test public void testScramblingNodeCreation() throws VerdictDBException, SQLException {
  String newSchemaName=""String_Node_Str"";
  String newTableName=""String_Node_Str"";
  String oldSchemaName=""String_Node_Str"";
  String oldTableName=""String_Node_Str"";
  int blockSize=2;
  ScramblingMethod method=new UniformScramblingMethod(blockSize);
  Map<String,String> options=new HashMap<>();
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  String sql=""String_Node_Str"";
  DbmsConnection conn=new JdbcConnection(mysqlConn);
  DbmsQueryResult queryResult=conn.execute(sql);
  ScramblingNode node=ScramblingNode.create(newSchemaName,newTableName,oldSchemaName,oldTableName,method,options);
  List<ExecutionInfoToken> tokens=new ArrayList<>();
  ExecutionInfoToken e=new ExecutionInfoToken();
  e.setKeyValue(TableSizeCountNode.class.getSimpleName(),queryResult);
  tokens.add(e);
  e=new ExecutionInfoToken();
  e.setKeyValue(""String_Node_Str"",newSchemaName);
  e.setKeyValue(""String_Node_Str"",newTableName);
  tokens.add(e);
  e=new ExecutionInfoToken();
  List<Pair<String,String>> columnNamesAndTypes=new ArrayList<>();
  columnNamesAndTypes.add(Pair.of(""String_Node_Str"",""String_Node_Str""));
  e.setKeyValue(ScramblingPlan.COLUMN_METADATA_KEY,columnNamesAndTypes);
  tokens.add(e);
  SqlConvertible query=node.createQuery(tokens);
  sql=QueryToSql.convert(new MysqlSyntax(),query);
  String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  assertEquals(expected,sql);
  mysqlConn.createStatement().execute(""String_Node_Str"");
  mysqlConn.createStatement().execute(sql);
}"
95972,"@Test public void testUniformScramblingPlanNonEmptyTable() throws VerdictDBException, SQLException {
  mysqlConn.createStatement().execute(""String_Node_Str"");
  String newSchemaName=""String_Node_Str"";
  String newTableName=""String_Node_Str"";
  String oldSchemaName=""String_Node_Str"";
  String oldTableName=""String_Node_Str"";
  int blockCount=10;
  ScramblingMethod method=new UniformScramblingMethod(blockCount);
  Map<String,String> options=new HashMap<>();
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  mysqlConn.createStatement().execute(String.format(""String_Node_Str"",newSchemaName,newTableName));
  ScramblingPlan plan=ScramblingPlan.create(newSchemaName,newTableName,oldSchemaName,oldTableName,method,options);
  DbmsConnection conn=new JdbcConnection(mysqlConn);
  ExecutablePlanRunner.runTillEnd(conn,plan);
  mysqlConn.createStatement().execute(""String_Node_Str"");
}","@Test public void testUniformScramblingPlanNonEmptyTable() throws VerdictDBException, SQLException {
  for (int i=0; i < 10; i++) {
    mysqlConn.createStatement().execute(String.format(""String_Node_Str"",i));
  }
  String newSchemaName=""String_Node_Str"";
  String newTableName=""String_Node_Str"";
  String oldSchemaName=""String_Node_Str"";
  String oldTableName=""String_Node_Str"";
  int blockSize=2;
  ScramblingMethod method=new UniformScramblingMethod(blockSize);
  Map<String,String> options=new HashMap<>();
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  mysqlConn.createStatement().execute(String.format(""String_Node_Str"",newSchemaName,newTableName));
  ScramblingPlan plan=ScramblingPlan.create(newSchemaName,newTableName,oldSchemaName,oldTableName,method,options);
  DbmsConnection conn=new JdbcConnection(mysqlConn);
  ExecutablePlanRunner.runTillEnd(conn,plan);
  DbmsQueryResult result=conn.execute(String.format(""String_Node_Str"",newSchemaName,newTableName));
  result.printContent();
  mysqlConn.createStatement().execute(""String_Node_Str"");
}"
95973,"@Override public List<Double> getCumulativeProbabilityDistributionForTier(Map<String,Object> metaData,int tier){
  DbmsQueryResult tableSizeResult=(DbmsQueryResult)metaData.get(""String_Node_Str"");
  tableSizeResult.next();
  long tableSize=tableSizeResult.getLong(0);
  long totalNumberOfblocks=(long)Math.ceil(tableSize / (float)blockSize);
  List<Double> prob=new ArrayList<>();
  for (int i=0; i < totalNumberOfblocks; i++) {
    prob.add((i + 1) / (double)totalNumberOfblocks);
  }
  return prob;
}","@Override public List<Double> getCumulativeProbabilityDistributionForTier(Map<String,Object> metaData,int tier){
  DbmsQueryResult tableSizeResult=(DbmsQueryResult)metaData.get(TableSizeCountNode.class.getSimpleName());
  tableSizeResult.next();
  long tableSize=tableSizeResult.getLong(TableSizeCountNode.TOTAL_COUNT_ALIAS_NAME);
  long totalNumberOfblocks=(long)Math.ceil(tableSize / (float)blockSize);
  List<Double> prob=new ArrayList<>();
  for (int i=0; i < totalNumberOfblocks; i++) {
    prob.add((i + 1) / (double)totalNumberOfblocks);
  }
  return prob;
}"
95974,"@Test public void testGetTierExpressions() throws VerdictDBDbmsException {
  int blockSize=10;
  String scratchpadSchemaName=""String_Node_Str"";
  String primaryGroupColumnName=""String_Node_Str"";
  FastConvergeScramblingMethod method=new FastConvergeScramblingMethod(blockSize,scratchpadSchemaName,primaryGroupColumnName);
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DbmsConnection conn=new JdbcConnection(h2conn);
  DbmsQueryResult queryResult=conn.execute(sql);
  Map<String,Object> metaData=new HashMap<>();
  metaData.put(""String_Node_Str"",queryResult);
  List<UnnamedColumn> tiers=method.getTierExpressions(metaData);
  assertEquals(""String_Node_Str"",((ColumnOp)tiers.get(0)).getOpType());
  assertEquals(""String_Node_Str"",((ColumnOp)tiers.get(1)).getOpType());
}","@Test public void testGetTierExpressions() throws VerdictDBDbmsException {
  int blockSize=10;
  String scratchpadSchemaName=""String_Node_Str"";
  String primaryGroupColumnName=""String_Node_Str"";
  FastConvergeScramblingMethod method=new FastConvergeScramblingMethod(blockSize,scratchpadSchemaName,primaryGroupColumnName);
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  DbmsConnection conn=new JdbcConnection(h2conn);
  DbmsQueryResult queryResult=conn.execute(sql);
  Map<String,Object> metaData=new HashMap<>();
  metaData.put(PercentilesAndCountNode.class.getSimpleName(),queryResult);
  List<UnnamedColumn> tiers=method.getTierExpressions(metaData);
  assertEquals(""String_Node_Str"",((ColumnOp)tiers.get(0)).getOpType());
  assertEquals(""String_Node_Str"",((ColumnOp)tiers.get(1)).getOpType());
}"
95975,"@Test public void testScramblingNodeCreation() throws VerdictDBException, SQLException {
  String newSchemaName=""String_Node_Str"";
  String newTableName=""String_Node_Str"";
  String oldSchemaName=""String_Node_Str"";
  String oldTableName=""String_Node_Str"";
  int blockSize=2;
  ScramblingMethod method=new UniformScramblingMethod(blockSize);
  Map<String,String> options=new HashMap<>();
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  String sql=""String_Node_Str"";
  DbmsConnection conn=new JdbcConnection(mysqlConn);
  DbmsQueryResult queryResult=conn.execute(sql);
  ScramblingNode node=ScramblingNode.create(newSchemaName,newTableName,oldSchemaName,oldTableName,method,options);
  List<ExecutionInfoToken> tokens=new ArrayList<>();
  ExecutionInfoToken e=new ExecutionInfoToken();
  e.setKeyValue(""String_Node_Str"",queryResult);
  tokens.add(e);
  e=new ExecutionInfoToken();
  e.setKeyValue(""String_Node_Str"",newSchemaName);
  e.setKeyValue(""String_Node_Str"",newTableName);
  tokens.add(e);
  SqlConvertible query=node.createQuery(tokens);
  sql=QueryToSql.convert(new MysqlSyntax(),query);
  String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  assertEquals(expected,sql);
  mysqlConn.createStatement().execute(""String_Node_Str"");
  mysqlConn.createStatement().execute(sql);
}","@Test public void testScramblingNodeCreation() throws VerdictDBException, SQLException {
  String newSchemaName=""String_Node_Str"";
  String newTableName=""String_Node_Str"";
  String oldSchemaName=""String_Node_Str"";
  String oldTableName=""String_Node_Str"";
  int blockSize=2;
  ScramblingMethod method=new UniformScramblingMethod(blockSize);
  Map<String,String> options=new HashMap<>();
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  String sql=""String_Node_Str"";
  DbmsConnection conn=new JdbcConnection(mysqlConn);
  DbmsQueryResult queryResult=conn.execute(sql);
  ScramblingNode node=ScramblingNode.create(newSchemaName,newTableName,oldSchemaName,oldTableName,method,options);
  List<ExecutionInfoToken> tokens=new ArrayList<>();
  ExecutionInfoToken e=new ExecutionInfoToken();
  e.setKeyValue(TableSizeCountNode.class.getSimpleName(),queryResult);
  tokens.add(e);
  e=new ExecutionInfoToken();
  e.setKeyValue(""String_Node_Str"",newSchemaName);
  e.setKeyValue(""String_Node_Str"",newTableName);
  tokens.add(e);
  SqlConvertible query=node.createQuery(tokens);
  sql=QueryToSql.convert(new MysqlSyntax(),query);
  String expected=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  assertEquals(expected,sql);
  mysqlConn.createStatement().execute(""String_Node_Str"");
  mysqlConn.createStatement().execute(sql);
}"
95976,"@Test public void testUniformScramblingPlanEmptyTable() throws VerdictDBException, SQLException {
  mysqlConn.createStatement().execute(""String_Node_Str"");
  String newSchemaName=""String_Node_Str"";
  String newTableName=""String_Node_Str"";
  String oldSchemaName=""String_Node_Str"";
  String oldTableName=""String_Node_Str"";
  int blockCount=10;
  ScramblingMethod method=new UniformScramblingMethod(blockCount);
  Map<String,String> options=new HashMap<>();
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  mysqlConn.createStatement().execute(String.format(""String_Node_Str"",newSchemaName,newTableName));
  ScramblingPlan plan=ScramblingPlan.create(newSchemaName,newTableName,oldSchemaName,oldTableName,method,options);
  DbmsConnection conn=new JdbcConnection(mysqlConn);
  ExecutablePlanRunner.runTillEnd(conn,plan);
}","@Test public void testUniformScramblingPlanEmptyTable() throws VerdictDBException, SQLException {
  mysqlConn.createStatement().execute(""String_Node_Str"");
  String newSchemaName=""String_Node_Str"";
  String newTableName=""String_Node_Str"";
  String oldSchemaName=""String_Node_Str"";
  String oldTableName=""String_Node_Str"";
  int blockSize=3;
  ScramblingMethod method=new UniformScramblingMethod(blockSize);
  Map<String,String> options=new HashMap<>();
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  mysqlConn.createStatement().execute(String.format(""String_Node_Str"",newSchemaName,newTableName));
  ScramblingPlan plan=ScramblingPlan.create(newSchemaName,newTableName,oldSchemaName,oldTableName,method,options);
  DbmsConnection conn=new JdbcConnection(mysqlConn);
  ExecutablePlanRunner.runTillEnd(conn,plan);
}"
95977,"@Override public DbmsQueryResult execute(String sql) throws VerdictDBDbmsException {
  try {
    Statement stmt=conn.createStatement();
    JdbcQueryResult jrs=null;
    boolean doesResultExist=stmt.execute(sql);
    if (doesResultExist) {
      ResultSet rs=stmt.getResultSet();
      jrs=new JdbcQueryResult(rs);
      rs.close();
    }
 else {
      jrs=null;
    }
    stmt.close();
    return jrs;
  }
 catch (  SQLException e) {
    throw new VerdictDBDbmsException(e.getMessage());
  }
}","@Override public DbmsQueryResult execute(String sql) throws VerdictDBDbmsException {
  System.out.println(""String_Node_Str"" + sql);
  try {
    Statement stmt=conn.createStatement();
    JdbcQueryResult jrs=null;
    boolean doesResultExist=stmt.execute(sql);
    if (doesResultExist) {
      ResultSet rs=stmt.getResultSet();
      jrs=new JdbcQueryResult(rs);
      rs.close();
    }
 else {
      jrs=null;
    }
    stmt.close();
    return jrs;
  }
 catch (  SQLException e) {
    throw new VerdictDBDbmsException(e.getMessage());
  }
}"
95978,"@Override public void printContent(){
  StringBuilder row;
  boolean isFirstCol=true;
  row=new StringBuilder();
  for (  String col : columnNames) {
    if (isFirstCol) {
      row.append(col);
      isFirstCol=false;
    }
 else {
      row.append(""String_Node_Str"" + col);
    }
  }
  System.out.println(row.toString());
  int colCount=getColumnCount();
  while (this.next()) {
    row=new StringBuilder();
    for (int i=0; i < colCount; i++) {
      if (i == 0) {
        row.append(getValue(i).toString());
      }
 else {
        row.append(""String_Node_Str"");
        row.append(getValue(i).toString());
      }
    }
    System.out.println(row.toString());
  }
}","@Override public void printContent(){
  StringBuilder row;
  boolean isFirstCol=true;
  row=new StringBuilder();
  for (  String col : columnNames) {
    if (isFirstCol) {
      row.append(col);
      isFirstCol=false;
    }
 else {
      row.append(""String_Node_Str"" + col);
    }
  }
  System.out.println(row.toString());
  int colCount=getColumnCount();
  while (next()) {
    row=new StringBuilder();
    for (int i=0; i < colCount; i++) {
      if (i == 0) {
        row.append(getString(i));
      }
 else {
        row.append(""String_Node_Str"");
        row.append(getString(i));
      }
    }
    System.out.println(row.toString());
  }
}"
95979,"/** 
 * Probability distribution for Tier2: the tuples that do not belong to tier0 or tier1.
 * @param metaData
 */
private void populateTier2CumulProbDist(Map<String,Object> metaData){
  List<Double> cumulProbDist=new ArrayList<>();
  Pair<Long,Long> tableSizeAndBlockNumber=retrieveTableSizeAndBlockNumber(metaData);
  long tableSize=tableSizeAndBlockNumber.getLeft();
  long totalNumberOfblocks=tableSizeAndBlockNumber.getRight();
  long tier2Size=tableSize - outlierSize - smallGroupSizeSum;
  for (int i=0; i < totalNumberOfblocks; i++) {
    long thisTier0Size;
    long thisTier1Size;
    if (i == 0) {
      thisTier0Size=(long)(outlierSize * tier0CumulProbDist.get(i));
      thisTier1Size=(long)(smallGroupSizeSum * tier1CumulProbDist.get(i));
    }
 else {
      thisTier0Size=(long)(outlierSize * (tier0CumulProbDist.get(i) - tier0CumulProbDist.get(i - 1)));
      thisTier1Size=(long)(smallGroupSizeSum * (tier1CumulProbDist.get(i) - tier1CumulProbDist.get(i - 1)));
    }
    long thisBlockSize=blockSize - thisTier0Size - thisTier1Size;
    if (tier2Size == 0) {
      cumulProbDist.add(1.0);
    }
 else {
      double thisBlockRatio=thisBlockSize / tier2Size;
      cumulProbDist.add(thisBlockRatio);
    }
  }
  tier2CumulProbDist=cumulProbDist;
}","/** 
 * Probability distribution for Tier2: the tuples that do not belong to tier0 or tier1.
 * @param metaData
 */
private void populateTier2CumulProbDist(Map<String,Object> metaData){
  List<Double> cumulProbDist=new ArrayList<>();
  Pair<Long,Long> tableSizeAndBlockNumber=retrieveTableSizeAndBlockNumber(metaData);
  long tableSize=tableSizeAndBlockNumber.getLeft();
  long totalNumberOfblocks=tableSizeAndBlockNumber.getRight();
  long tier2Size=tableSize - outlierSize - smallGroupSizeSum;
  for (int i=0; i < totalNumberOfblocks; i++) {
    long thisTier0Size;
    long thisTier1Size;
    if (i == 0) {
      thisTier0Size=(long)(outlierSize * tier0CumulProbDist.get(i));
      thisTier1Size=(long)(smallGroupSizeSum * tier1CumulProbDist.get(i));
    }
 else {
      thisTier0Size=(long)(outlierSize * (tier0CumulProbDist.get(i) - tier0CumulProbDist.get(i - 1)));
      thisTier1Size=(long)(smallGroupSizeSum * (tier1CumulProbDist.get(i) - tier1CumulProbDist.get(i - 1)));
    }
    long thisBlockSize=blockSize - thisTier0Size - thisTier1Size;
    if (tier2Size == 0) {
      cumulProbDist.add(1.0);
    }
 else {
      double thisBlockRatio=thisBlockSize / (double)tier2Size;
      if (i == 0) {
        cumulProbDist.add(thisBlockRatio);
      }
 else {
        cumulProbDist.add(cumulProbDist.get(i - 1) + thisBlockRatio);
      }
    }
  }
  tier2CumulProbDist=cumulProbDist;
}"
95980,"SelectQuery composeQuery(Map<String,Object> metaData){
  List<UnnamedColumn> tierPredicates=method.getTierExpressions(metaData);
  int tierCount=tierPredicates.size() + 1;
  String tierColumnName=options.get(""String_Node_Str"");
  String blockColumnName=options.get(""String_Node_Str"");
  List<SelectItem> selectItems=new ArrayList<>();
  selectItems.add(new AsteriskColumn());
  List<UnnamedColumn> tierOperands=new ArrayList<>();
  UnnamedColumn tierExpr=null;
  if (tierPredicates.size() == 0) {
    tierExpr=ConstantColumn.valueOf(0);
  }
 else   if (tierPredicates.size() > 0) {
    for (int i=0; i < tierPredicates.size(); i++) {
      UnnamedColumn pred=tierPredicates.get(i);
      tierOperands.add(pred);
      tierOperands.add(ConstantColumn.valueOf(i));
    }
    tierOperands.add(ConstantColumn.valueOf(tierPredicates.size()));
    tierExpr=ColumnOp.whenthenelse(tierOperands);
  }
  selectItems.add(new AliasedColumn(tierExpr,tierColumnName));
  UnnamedColumn blockExpr=null;
  List<UnnamedColumn> blockOperands=new ArrayList<>();
  for (int i=0; i < tierCount; i++) {
    List<Double> cumulProb=method.getCumulativeProbabilityDistributionForTier(metaData,i);
    List<Double> condProb=computeConditionalProbabilityDistribution(cumulProb);
    int blockCount=cumulProb.size();
    List<UnnamedColumn> blockForTierOperands=new ArrayList<>();
    for (int j=0; j < blockCount; j++) {
      blockForTierOperands.add(ColumnOp.lessequal(ColumnOp.rand(),ConstantColumn.valueOf(condProb.get(j))));
      blockForTierOperands.add(ConstantColumn.valueOf(j));
    }
    UnnamedColumn blockForTierExpr;
    ;
    if (blockForTierOperands.size() <= 1) {
      blockForTierExpr=ConstantColumn.valueOf(0);
    }
 else {
      blockForTierExpr=ColumnOp.whenthenelse(blockForTierOperands);
    }
    if (i < tierCount - 1) {
      blockOperands.add(ColumnOp.equal(tierExpr,ConstantColumn.valueOf(i)));
    }
    blockOperands.add(blockForTierExpr);
  }
  if (tierCount == 1) {
    blockExpr=blockOperands.get(0);
  }
 else {
    blockExpr=ColumnOp.whenthenelse(blockOperands);
  }
  selectItems.add(new AliasedColumn(blockExpr,blockColumnName));
  AbstractRelation tableSource=method.getScramblingSource(originalSchemaName,originalTableName,metaData);
  SelectQuery scramblingQuery=SelectQuery.create(selectItems,tableSource);
  return scramblingQuery;
}","SelectQuery composeQuery(Map<String,Object> metaData){
  List<UnnamedColumn> tierPredicates=method.getTierExpressions(metaData);
  int tierCount=tierPredicates.size() + 1;
  String tierColumnName=options.get(""String_Node_Str"");
  String blockColumnName=options.get(""String_Node_Str"");
  List<SelectItem> selectItems=new ArrayList<>();
  @SuppressWarnings(""String_Node_Str"") List<Pair<String,String>> columnNamesAndTypes=(List<Pair<String,String>>)metaData.get(ScramblingPlan.COLUMN_METADATA_KEY);
  final String mainTableAlias=method.getMainTableAlias();
  for (  Pair<String,String> nameAndType : columnNamesAndTypes) {
    String name=nameAndType.getLeft();
    selectItems.add(new BaseColumn(mainTableAlias,name));
  }
  List<UnnamedColumn> tierOperands=new ArrayList<>();
  UnnamedColumn tierExpr=null;
  if (tierPredicates.size() == 0) {
    tierExpr=ConstantColumn.valueOf(0);
  }
 else   if (tierPredicates.size() > 0) {
    for (int i=0; i < tierPredicates.size(); i++) {
      UnnamedColumn pred=tierPredicates.get(i);
      tierOperands.add(pred);
      tierOperands.add(ConstantColumn.valueOf(i));
    }
    tierOperands.add(ConstantColumn.valueOf(tierPredicates.size()));
    tierExpr=ColumnOp.whenthenelse(tierOperands);
  }
  selectItems.add(new AliasedColumn(tierExpr,tierColumnName));
  UnnamedColumn blockExpr=null;
  List<UnnamedColumn> blockOperands=new ArrayList<>();
  for (int i=0; i < tierCount; i++) {
    List<Double> cumulProb=method.getCumulativeProbabilityDistributionForTier(metaData,i);
    List<Double> condProb=computeConditionalProbabilityDistribution(cumulProb);
    int blockCount=cumulProb.size();
    List<UnnamedColumn> blockForTierOperands=new ArrayList<>();
    for (int j=0; j < blockCount; j++) {
      blockForTierOperands.add(ColumnOp.lessequal(ColumnOp.rand(),ConstantColumn.valueOf(condProb.get(j))));
      blockForTierOperands.add(ConstantColumn.valueOf(j));
    }
    UnnamedColumn blockForTierExpr;
    ;
    if (blockForTierOperands.size() <= 1) {
      blockForTierExpr=ConstantColumn.valueOf(0);
    }
 else {
      blockForTierExpr=ColumnOp.whenthenelse(blockForTierOperands);
    }
    if (i < tierCount - 1) {
      blockOperands.add(ColumnOp.equal(tierExpr,ConstantColumn.valueOf(i)));
    }
    blockOperands.add(blockForTierExpr);
  }
  if (tierCount == 1) {
    blockExpr=blockOperands.get(0);
  }
 else {
    blockExpr=ColumnOp.whenthenelse(blockOperands);
  }
  selectItems.add(new AliasedColumn(blockExpr,blockColumnName));
  AbstractRelation tableSource=method.getScramblingSource(originalSchemaName,originalTableName,metaData);
  SelectQuery scramblingQuery=SelectQuery.create(selectItems,tableSource);
  return scramblingQuery;
}"
95981,"@Override public AbstractRelation getScramblingSource(String originalSchema,String originalTable,Map<String,Object> metaData){
  String tableSourceAlias=""String_Node_Str"";
  return new BaseTable(originalSchema,originalTable,tableSourceAlias);
}","@Override public AbstractRelation getScramblingSource(String originalSchema,String originalTable,Map<String,Object> metaData){
  String tableSourceAlias=MAIN_TABLE_SOURCE_ALIAS;
  return new BaseTable(originalSchema,originalTable,tableSourceAlias);
}"
95982,"@Test public void testFastConvergeScramblingPlanNonEmptyTable() throws VerdictDBException, SQLException {
  mysqlConn.createStatement().execute(""String_Node_Str"");
  for (int i=0; i < 10; i++) {
    mysqlConn.createStatement().execute(String.format(""String_Node_Str"",i % 2,i));
  }
  String newSchemaName=""String_Node_Str"";
  String newTableName=""String_Node_Str"";
  String oldSchemaName=""String_Node_Str"";
  String oldTableName=""String_Node_Str"";
  String scratchpadSchemaName=""String_Node_Str"";
  String primaryColumn=""String_Node_Str"";
  int blockSize=2;
  ScramblingMethod method=new FastConvergeScramblingMethod(blockSize,scratchpadSchemaName,primaryColumn);
  Map<String,String> options=new HashMap<>();
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  mysqlConn.createStatement().execute(String.format(""String_Node_Str"",newSchemaName,newTableName));
  ScramblingPlan plan=ScramblingPlan.create(newSchemaName,newTableName,oldSchemaName,oldTableName,method,options);
  DbmsConnection conn=new JdbcConnection(mysqlConn);
  ExecutablePlanRunner.runTillEnd(conn,plan);
}","@Test public void testFastConvergeScramblingPlanNonEmptyTable() throws VerdictDBException, SQLException {
  mysqlConn.createStatement().execute(""String_Node_Str"");
  for (int i=0; i < 10; i++) {
    mysqlConn.createStatement().execute(String.format(""String_Node_Str"",i % 2,i));
  }
  String newSchemaName=""String_Node_Str"";
  String newTableName=""String_Node_Str"";
  String oldSchemaName=""String_Node_Str"";
  String oldTableName=""String_Node_Str"";
  String scratchpadSchemaName=""String_Node_Str"";
  String primaryColumn=""String_Node_Str"";
  int blockSize=2;
  ScramblingMethod method=new FastConvergeScramblingMethod(blockSize,scratchpadSchemaName,primaryColumn);
  Map<String,String> options=new HashMap<>();
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  mysqlConn.createStatement().execute(String.format(""String_Node_Str"",newSchemaName,newTableName));
  ScramblingPlan plan=ScramblingPlan.create(newSchemaName,newTableName,oldSchemaName,oldTableName,method,options);
  DbmsConnection conn=new JdbcConnection(mysqlConn);
  ExecutablePlanRunner.runTillEnd(conn,plan);
  DbmsQueryResult result=conn.execute(String.format(""String_Node_Str"",newSchemaName,newTableName));
  result.printContent();
}"
95983,"@Test public void testFastConvergeScramblingPlanNonEmptyTableNoPrimaryGroup() throws VerdictDBException, SQLException {
  mysqlConn.createStatement().execute(""String_Node_Str"");
  for (int i=0; i < 10; i++) {
    mysqlConn.createStatement().execute(String.format(""String_Node_Str"",i % 2,i));
  }
  String newSchemaName=""String_Node_Str"";
  String newTableName=""String_Node_Str"";
  String oldSchemaName=""String_Node_Str"";
  String oldTableName=""String_Node_Str"";
  String scratchpadSchemaName=""String_Node_Str"";
  int blockSize=2;
  ScramblingMethod method=new FastConvergeScramblingMethod(blockSize,scratchpadSchemaName);
  Map<String,String> options=new HashMap<>();
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  mysqlConn.createStatement().execute(String.format(""String_Node_Str"",newSchemaName,newTableName));
  ScramblingPlan plan=ScramblingPlan.create(newSchemaName,newTableName,oldSchemaName,oldTableName,method,options);
  DbmsConnection conn=new JdbcConnection(mysqlConn);
  ExecutablePlanRunner.runTillEnd(conn,plan);
}","@Test public void testFastConvergeScramblingPlanNonEmptyTableNoPrimaryGroup() throws VerdictDBException, SQLException {
  mysqlConn.createStatement().execute(""String_Node_Str"");
  for (int i=0; i < 10; i++) {
    mysqlConn.createStatement().execute(String.format(""String_Node_Str"",i % 2,i));
  }
  String newSchemaName=""String_Node_Str"";
  String newTableName=""String_Node_Str"";
  String oldSchemaName=""String_Node_Str"";
  String oldTableName=""String_Node_Str"";
  String scratchpadSchemaName=""String_Node_Str"";
  int blockSize=2;
  ScramblingMethod method=new FastConvergeScramblingMethod(blockSize,scratchpadSchemaName);
  Map<String,String> options=new HashMap<>();
  options.put(""String_Node_Str"",""String_Node_Str"");
  options.put(""String_Node_Str"",""String_Node_Str"");
  mysqlConn.createStatement().execute(String.format(""String_Node_Str"",newSchemaName,newTableName));
  ScramblingPlan plan=ScramblingPlan.create(newSchemaName,newTableName,oldSchemaName,oldTableName,method,options);
  DbmsConnection conn=new JdbcConnection(mysqlConn);
  ExecutablePlanRunner.runTillEnd(conn,plan);
  DbmsQueryResult result=conn.execute(String.format(""String_Node_Str"",newSchemaName,newTableName));
  result.printContent();
}"
95984,"@Test public void Query4Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.size());
  AbstractRelation orders=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new AsteriskColumn()),""String_Node_Str"")),orders);
  assertEquals(expected.getSelectList(),((CreateTableAsSelectNode)queryExecutionPlan.root.getDependents().get(0)).selectQuery.getSelectList());
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void Query4Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.size());
  AbstractRelation orders=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new AsteriskColumn()),""String_Node_Str"")),orders);
  assertEquals(expected.getSelectList(),((CreateTableAsSelectNode)queryExecutionPlan.root.getDependents().get(0)).selectQuery.getSelectList());
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
95985,"@Test public void SimplifiedQuery13Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.size());
  BaseTable customer=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  BaseTable orders=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  JoinTable join=JoinTable.create(Arrays.<AbstractRelation>asList(customer,orders),Arrays.<JoinTable.JoinType>asList(JoinTable.JoinType.leftouter),Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str"")))))));
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new AsteriskColumn()),""String_Node_Str"")),join);
  expected.addGroupby(new AliasReference(""String_Node_Str""));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void SimplifiedQuery13Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.size());
  BaseTable customer=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  BaseTable orders=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  JoinTable join=JoinTable.create(Arrays.<AbstractRelation>asList(customer,orders),Arrays.<JoinTable.JoinType>asList(JoinTable.JoinType.leftouter),Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str"")))))));
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new AsteriskColumn()),""String_Node_Str"")),join);
  expected.addGroupby(new AliasReference(""String_Node_Str""));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
95986,"@Test public void SubqueryInFilterMultiplePredicateTest() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  String alias=((CreateTableAsSelectNode)(queryExecutionPlan.root.dependents.get(0))).getPlaceholderTables().get(0).getAliasName().get();
  SelectQuery rewritten1=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(placeholderSchemaName,alias,""String_Node_Str""),""String_Node_Str"")),new BaseTable(placeholderSchemaName,placeholderTableName,alias));
  assertEquals(rewritten1,((SubqueryColumn)((ColumnOp)((ColumnOp)queryExecutionPlan.root.dependents.get(0).selectQuery.getFilter().get()).getOperand(0)).getOperand(1)).getSubquery());
  alias=((CreateTableAsSelectNode)(queryExecutionPlan.root.dependents.get(0))).getPlaceholderTables().get(1).getAliasName().get();
  SelectQuery rewritten2=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(placeholderSchemaName,alias,""String_Node_Str""),""String_Node_Str"")),new BaseTable(placeholderSchemaName,placeholderTableName,alias));
  assertEquals(rewritten2,((SubqueryColumn)((ColumnOp)((ColumnOp)queryExecutionPlan.root.dependents.get(0).selectQuery.getFilter().get()).getOperand(1)).getOperand(1)).getSubquery());
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void SubqueryInFilterMultiplePredicateTest() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  String alias=((CreateTableAsSelectNode)(queryExecutionPlan.root.dependents.get(0))).getPlaceholderTables().get(0).getAliasName().get();
  SelectQuery rewritten1=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(placeholderSchemaName,alias,""String_Node_Str""),""String_Node_Str"")),new BaseTable(placeholderSchemaName,placeholderTableName,alias));
  assertEquals(rewritten1,((SubqueryColumn)((ColumnOp)((ColumnOp)queryExecutionPlan.root.dependents.get(0).selectQuery.getFilter().get()).getOperand(0)).getOperand(1)).getSubquery());
  alias=((CreateTableAsSelectNode)(queryExecutionPlan.root.dependents.get(0))).getPlaceholderTables().get(1).getAliasName().get();
  SelectQuery rewritten2=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(placeholderSchemaName,alias,""String_Node_Str""),""String_Node_Str"")),new BaseTable(placeholderSchemaName,placeholderTableName,alias));
  assertEquals(rewritten2,((SubqueryColumn)((ColumnOp)((ColumnOp)queryExecutionPlan.root.dependents.get(0).selectQuery.getFilter().get()).getOperand(1)).getOperand(1)).getSubquery());
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
95987,"@Test public void Query9Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(1,queryExecutionPlan.root.dependents.get(0).dependents.size());
  AbstractRelation part=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation supplier=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation partsupp=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation orders=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation nation=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery subquery=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(0),ConstantColumn.valueOf(4))),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))))),""String_Node_Str"")),Arrays.asList(part,supplier,lineitem,partsupp,orders,nation));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  subquery.setAliasName(""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""));
  expected.addGroupby(Arrays.<GroupingAttribute>asList(new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str"")));
  expected.addOrderby(Arrays.<OrderbyAttribute>asList(new OrderbyAttribute(""String_Node_Str""),new OrderbyAttribute(""String_Node_Str"",""String_Node_Str"")));
  expected.addLimit(ConstantColumn.valueOf(1));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  assertEquals(subquery,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void Query9Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(1,queryExecutionPlan.root.dependents.get(0).dependents.size());
  AbstractRelation part=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation supplier=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation partsupp=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation orders=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation nation=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery subquery=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(0),ConstantColumn.valueOf(4))),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))))),""String_Node_Str"")),Arrays.asList(part,supplier,lineitem,partsupp,orders,nation));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  subquery.setAliasName(""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""));
  expected.addGroupby(Arrays.<GroupingAttribute>asList(new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str"")));
  expected.addOrderby(Arrays.<OrderbyAttribute>asList(new OrderbyAttribute(""String_Node_Str""),new OrderbyAttribute(""String_Node_Str"",""String_Node_Str"")));
  expected.addLimit(ConstantColumn.valueOf(1));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  assertEquals(subquery,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
95988,"@Test public void Query7Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(1,queryExecutionPlan.root.dependents.get(0).dependents.size());
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.get(0).dependents.size());
  AbstractRelation supplier=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation orders=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation customer=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation nation1=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation nation2=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery subquery=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(0),ConstantColumn.valueOf(4))),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str""))))),""String_Node_Str"")),Arrays.asList(supplier,lineitem,orders,customer,nation1,nation2));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  subquery.setAliasName(""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  expected.addGroupby(Arrays.<GroupingAttribute>asList(new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str"")));
  expected.addOrderby(Arrays.<OrderbyAttribute>asList(new OrderbyAttribute(""String_Node_Str""),new OrderbyAttribute(""String_Node_Str""),new OrderbyAttribute(""String_Node_Str"")));
  expected.addLimit(ConstantColumn.valueOf(1));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  assertEquals(subquery,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void Query7Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(1,queryExecutionPlan.root.dependents.get(0).dependents.size());
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.get(0).dependents.size());
  AbstractRelation supplier=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation orders=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation customer=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation nation1=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation nation2=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery subquery=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(0),ConstantColumn.valueOf(4))),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str""))))),""String_Node_Str"")),Arrays.asList(supplier,lineitem,orders,customer,nation1,nation2));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  subquery.setAliasName(""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  expected.addGroupby(Arrays.<GroupingAttribute>asList(new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str"")));
  expected.addOrderby(Arrays.<OrderbyAttribute>asList(new OrderbyAttribute(""String_Node_Str""),new OrderbyAttribute(""String_Node_Str""),new OrderbyAttribute(""String_Node_Str"")));
  expected.addLimit(ConstantColumn.valueOf(1));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  assertEquals(subquery,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
95989,"@Test public void Query21Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(1,queryExecutionPlan.root.dependents.get(0).dependents.size());
  assertEquals(1,queryExecutionPlan.root.dependents.get(0).dependents.get(0).dependents.size());
  assertEquals(2,queryExecutionPlan.root.dependents.get(0).dependents.get(0).dependents.get(0).dependents.size());
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.get(0).dependents.get(0).dependents.get(0).dependents.size());
  assertEquals(1,queryExecutionPlan.root.dependents.get(0).dependents.get(0).dependents.get(0).dependents.get(1).dependents.size());
  assertEquals(new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""),((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).getSelectQuery().getFromList().get(0));
  assertEquals(new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""),((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).getSelectQuery().getFromList().get(0));
  JoinTable join=JoinTable.create(Arrays.<AbstractRelation>asList(new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""),new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str"")),Arrays.<JoinTable.JoinType>asList(JoinTable.JoinType.rightouter),Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str"")))));
  assertEquals(join,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0).dependents.get(0)).getSelectQuery().getFromList().get(0));
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void Query21Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(1,queryExecutionPlan.root.dependents.get(0).dependents.size());
  assertEquals(1,queryExecutionPlan.root.dependents.get(0).dependents.get(0).dependents.size());
  assertEquals(2,queryExecutionPlan.root.dependents.get(0).dependents.get(0).dependents.get(0).dependents.size());
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.get(0).dependents.get(0).dependents.get(0).dependents.size());
  assertEquals(1,queryExecutionPlan.root.dependents.get(0).dependents.get(0).dependents.get(0).dependents.get(1).dependents.size());
  assertEquals(new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""),((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).getSelectQuery().getFromList().get(0));
  assertEquals(new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""),((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).getSelectQuery().getFromList().get(0));
  JoinTable join=JoinTable.create(Arrays.<AbstractRelation>asList(new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""),new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str"")),Arrays.<JoinTable.JoinType>asList(JoinTable.JoinType.rightouter),Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str"")))));
  assertEquals(join,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0).dependents.get(0)).getSelectQuery().getFromList().get(0));
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
95990,"@Test public void Query3Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.size());
  AbstractRelation customer=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation orders=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ColumnOp op1=new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str"")))));
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",op1),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")),Arrays.asList(customer,orders,lineitem));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addGroupby(Arrays.<GroupingAttribute>asList(new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str"")));
  expected.addOrderby(Arrays.<OrderbyAttribute>asList(new OrderbyAttribute(""String_Node_Str"",""String_Node_Str""),new OrderbyAttribute(""String_Node_Str"")));
  expected.addLimit(ConstantColumn.valueOf(10));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void Query3Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.size());
  AbstractRelation customer=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation orders=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  ColumnOp op1=new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str"")))));
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",op1),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")),Arrays.asList(customer,orders,lineitem));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addGroupby(Arrays.<GroupingAttribute>asList(new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str"")));
  expected.addOrderby(Arrays.<OrderbyAttribute>asList(new OrderbyAttribute(""String_Node_Str"",""String_Node_Str""),new OrderbyAttribute(""String_Node_Str"")));
  expected.addLimit(ConstantColumn.valueOf(10));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
95991,"@Test public void IncompleteQuery15Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(2,queryExecutionPlan.root.dependents.get(0).dependents.size());
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")),Arrays.<AbstractRelation>asList(new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""),new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str"")));
  assertEquals(expected.getFromList(),((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).getSelectQuery().getFromList());
  SelectQuery revenue_cached=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",Arrays.asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str"")))))),""String_Node_Str"")),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  revenue_cached.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  revenue_cached.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  revenue_cached.addGroupby(new AliasReference(""String_Node_Str""));
  revenue_cached.setAliasName(""String_Node_Str"");
  assertEquals(revenue_cached,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).selectQuery);
  SelectQuery max_revenue_cached=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""));
  max_revenue_cached.setAliasName(""String_Node_Str"");
  assertEquals(max_revenue_cached,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(1)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void IncompleteQuery15Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(2,queryExecutionPlan.root.dependents.get(0).dependents.size());
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")),Arrays.<AbstractRelation>asList(new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""),new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""),new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str"")));
  assertEquals(expected.getFromList(),((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).getSelectQuery().getFromList());
  SelectQuery revenue_cached=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",Arrays.asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str"")))))),""String_Node_Str"")),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  revenue_cached.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  revenue_cached.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  revenue_cached.addGroupby(new AliasReference(""String_Node_Str""));
  revenue_cached.setAliasName(""String_Node_Str"");
  assertEquals(revenue_cached,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).selectQuery);
  SelectQuery max_revenue_cached=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""));
  max_revenue_cached.setAliasName(""String_Node_Str"");
  assertEquals(max_revenue_cached,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(1)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
95992,"@Test public void Query1Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(1,queryExecutionPlan.root.dependents.size());
  assertEquals(0,queryExecutionPlan.root.getDependents().get(0).dependents.size());
  BaseTable base=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<UnnamedColumn> operand1=Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str""));
  List<UnnamedColumn> operand2=Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",operand1));
  List<UnnamedColumn> operand3=Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str""));
  List<UnnamedColumn> operand4=Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",operand2),new ColumnOp(""String_Node_Str"",operand3));
  List<UnnamedColumn> operand5=Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")));
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",operand2)),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",operand4)),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new AsteriskColumn()),""String_Node_Str"")),base,new ColumnOp(""String_Node_Str"",operand5));
  expected.addGroupby(Arrays.<GroupingAttribute>asList(new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str"")));
  expected.addOrderby(Arrays.<OrderbyAttribute>asList(new OrderbyAttribute(""String_Node_Str""),new OrderbyAttribute(""String_Node_Str"")));
  expected.addLimit(ConstantColumn.valueOf(1));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.getDependents().get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void Query1Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(1,queryExecutionPlan.root.dependents.size());
  assertEquals(0,queryExecutionPlan.root.getDependents().get(0).dependents.size());
  BaseTable base=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  List<UnnamedColumn> operand1=Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str""));
  List<UnnamedColumn> operand2=Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",operand1));
  List<UnnamedColumn> operand3=Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str""));
  List<UnnamedColumn> operand4=Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",operand2),new ColumnOp(""String_Node_Str"",operand3));
  List<UnnamedColumn> operand5=Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")));
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",operand2)),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",operand4)),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new AsteriskColumn()),""String_Node_Str"")),base,new ColumnOp(""String_Node_Str"",operand5));
  expected.addGroupby(Arrays.<GroupingAttribute>asList(new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str"")));
  expected.addOrderby(Arrays.<OrderbyAttribute>asList(new OrderbyAttribute(""String_Node_Str""),new OrderbyAttribute(""String_Node_Str"")));
  expected.addLimit(ConstantColumn.valueOf(1));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.getDependents().get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
95993,"@Test public void Query19Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation part=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str"")))))),""String_Node_Str"")),Arrays.asList(lineitem,part));
  ColumnOp columnOp1=new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(4))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(4),ConstantColumn.valueOf(10))))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(1),ConstantColumn.valueOf(5))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str"")))));
  ColumnOp columnOp2=new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(5))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(5),ConstantColumn.valueOf(10))))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(1),ConstantColumn.valueOf(10))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str"")))));
  ColumnOp columnOp3=new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(6))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(6),ConstantColumn.valueOf(10))))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(1),ConstantColumn.valueOf(15))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(columnOp1,columnOp2)),columnOp3)));
  expected.addLimit(ConstantColumn.valueOf(1));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void Query19Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation part=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str"")))))),""String_Node_Str"")),Arrays.asList(lineitem,part));
  ColumnOp columnOp1=new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(4))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(4),ConstantColumn.valueOf(10))))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(1),ConstantColumn.valueOf(5))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str"")))));
  ColumnOp columnOp2=new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(5))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(5),ConstantColumn.valueOf(10))))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(1),ConstantColumn.valueOf(10))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str"")))));
  ColumnOp columnOp3=new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(6))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(6),ConstantColumn.valueOf(10))))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(1),ConstantColumn.valueOf(15))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(columnOp1,columnOp2)),columnOp3)));
  expected.addLimit(ConstantColumn.valueOf(1));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
95994,"@Test public void Query12Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.size());
  AbstractRelation orders=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),ConstantColumn.valueOf(1),ConstantColumn.valueOf(0)))),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),ConstantColumn.valueOf(1),ConstantColumn.valueOf(0)))),""String_Node_Str"")),Arrays.asList(orders,lineitem));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addGroupby(new AliasReference(""String_Node_Str""));
  expected.addOrderby(new OrderbyAttribute(""String_Node_Str""));
  expected.addLimit(ConstantColumn.valueOf(1));
  assertEquals(relation,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void Query12Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.size());
  AbstractRelation orders=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),ConstantColumn.valueOf(1),ConstantColumn.valueOf(0)))),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))))),ConstantColumn.valueOf(1),ConstantColumn.valueOf(0)))),""String_Node_Str"")),Arrays.asList(orders,lineitem));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addGroupby(new AliasReference(""String_Node_Str""));
  expected.addOrderby(new OrderbyAttribute(""String_Node_Str""));
  expected.addLimit(ConstantColumn.valueOf(1));
  assertEquals(relation,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
95995,"@Test public void Query17Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(1,queryExecutionPlan.root.dependents.get(0).dependents.size());
  assertEquals(2,queryExecutionPlan.root.dependents.get(0).dependents.get(0).dependents.size());
  assertEquals(new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""),((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).getSelectQuery().getFromList().get(0));
  JoinTable join=JoinTable.create(Arrays.<AbstractRelation>asList(new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""),new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str"")),Arrays.<JoinTable.JoinType>asList(JoinTable.JoinType.inner),Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str"")))));
  assertEquals(join,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).getSelectQuery().getFromList().get(0));
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",Arrays.asList(ConstantColumn.valueOf(0.2),new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")))),""String_Node_Str"")),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  expected.addGroupby(new AliasReference(""String_Node_Str""));
  expected.setAliasName(""String_Node_Str"");
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0).dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void Query17Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(1,queryExecutionPlan.root.dependents.get(0).dependents.size());
  assertEquals(2,queryExecutionPlan.root.dependents.get(0).dependents.get(0).dependents.size());
  assertEquals(new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""),((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).getSelectQuery().getFromList().get(0));
  JoinTable join=JoinTable.create(Arrays.<AbstractRelation>asList(new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""),new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str"")),Arrays.<JoinTable.JoinType>asList(JoinTable.JoinType.inner),Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str"")))));
  assertEquals(join,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).getSelectQuery().getFromList().get(0));
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",Arrays.asList(ConstantColumn.valueOf(0.2),new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")))),""String_Node_Str"")),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  expected.addGroupby(new AliasReference(""String_Node_Str""));
  expected.setAliasName(""String_Node_Str"");
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0).dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
95996,"@Test public void Query5Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.size());
  AbstractRelation customer=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation orders=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation supplier=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation nation=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation region=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str""))))))),""String_Node_Str"")),Arrays.asList(customer,orders,lineitem,supplier,nation,region));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addGroupby(new AliasReference(""String_Node_Str""));
  expected.addOrderby(new OrderbyAttribute(""String_Node_Str"",""String_Node_Str""));
  expected.addLimit(ConstantColumn.valueOf(1));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void Query5Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.size());
  AbstractRelation customer=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation orders=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation supplier=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation nation=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation region=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str""))))))),""String_Node_Str"")),Arrays.asList(customer,orders,lineitem,supplier,nation,region));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addGroupby(new AliasReference(""String_Node_Str""));
  expected.addOrderby(new OrderbyAttribute(""String_Node_Str"",""String_Node_Str""));
  expected.addLimit(ConstantColumn.valueOf(1));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
95997,"@Test public void SubqueryInFilterTest() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  String aliasName=String.format(""String_Node_Str"",queryExecutionPlan.getSerialNumber());
  SelectQuery rewritten=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(placeholderSchemaName,aliasName,""String_Node_Str""),""String_Node_Str"")),new BaseTable(placeholderSchemaName,placeholderTableName,aliasName));
  assertEquals(rewritten,((SubqueryColumn)((ColumnOp)((CreateTableAsSelectNode)(queryExecutionPlan.root.dependents.get(0))).getSelectQuery().getFilter().get()).getOperand(1)).getSubquery());
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void SubqueryInFilterTest() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  String aliasName=String.format(""String_Node_Str"",queryExecutionPlan.getSerialNumber());
  SelectQuery rewritten=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(placeholderSchemaName,aliasName,""String_Node_Str""),""String_Node_Str"")),new BaseTable(placeholderSchemaName,placeholderTableName,aliasName));
  assertEquals(rewritten,((SubqueryColumn)((ColumnOp)((CreateTableAsSelectNode)(queryExecutionPlan.root.dependents.get(0))).getSelectQuery().getFilter().get()).getOperand(1)).getSubquery());
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
95998,"@Test public void Query8Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(1,queryExecutionPlan.root.dependents.get(0).dependents.size());
  AbstractRelation part=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation supplier=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation orders=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation customer=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation nation1=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation nation2=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation region=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery subquery=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str""))))),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")),Arrays.asList(part,supplier,lineitem,orders,customer,nation1,nation2,region));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  subquery.setAliasName(""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))),new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(0)))),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""));
  expected.addGroupby(new AliasReference(""String_Node_Str""));
  expected.addOrderby(new OrderbyAttribute(""String_Node_Str""));
  expected.addLimit(ConstantColumn.valueOf(1));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  assertEquals(subquery,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void Query8Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(1,queryExecutionPlan.root.dependents.get(0).dependents.size());
  AbstractRelation part=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation supplier=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation orders=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation customer=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation nation1=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation nation2=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation region=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery subquery=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str""))))),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")),Arrays.asList(part,supplier,lineitem,orders,customer,nation1,nation2,region));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  subquery.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  subquery.setAliasName(""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))),new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(0)))),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new BaseColumn(""String_Node_Str"",""String_Node_Str"")),""String_Node_Str"")),new BaseTable(placeholderSchemaName,placeholderTableName,""String_Node_Str""));
  expected.addGroupby(new AliasReference(""String_Node_Str""));
  expected.addOrderby(new OrderbyAttribute(""String_Node_Str""));
  expected.addLimit(ConstantColumn.valueOf(1));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  assertEquals(subquery,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
95999,"@Test public void Query10Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.size());
  AbstractRelation customer=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation orders=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation nation=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str"")))))),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")),Arrays.asList(customer,orders,lineitem,nation));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addGroupby(Arrays.<GroupingAttribute>asList(new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str"")));
  expected.addOrderby(new OrderbyAttribute(""String_Node_Str"",""String_Node_Str""));
  expected.addLimit(ConstantColumn.valueOf(20));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void Query10Test() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  assertEquals(0,queryExecutionPlan.root.dependents.get(0).dependents.size());
  AbstractRelation customer=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation orders=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation lineitem=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  AbstractRelation nation=new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new ColumnOp(""String_Node_Str"",new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(ConstantColumn.valueOf(1),new BaseColumn(""String_Node_Str"",""String_Node_Str"")))))),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str""),new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")),Arrays.asList(customer,orders,lineitem,nation));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new ColumnOp(""String_Node_Str"",ConstantColumn.valueOf(""String_Node_Str"")))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),ConstantColumn.valueOf(""String_Node_Str""))));
  expected.addFilterByAnd(new ColumnOp(""String_Node_Str"",Arrays.<UnnamedColumn>asList(new BaseColumn(""String_Node_Str"",""String_Node_Str""),new BaseColumn(""String_Node_Str"",""String_Node_Str""))));
  expected.addGroupby(Arrays.<GroupingAttribute>asList(new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str""),new AliasReference(""String_Node_Str"")));
  expected.addOrderby(new OrderbyAttribute(""String_Node_Str"",""String_Node_Str""));
  expected.addLimit(ConstantColumn.valueOf(20));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
96000,"@Test public void SubqueryInFilterTestIn() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  String alias=((CreateTableAsSelectNode)(queryExecutionPlan.root.dependents.get(0))).getPlaceholderTables().get(0).getAliasName().get();
  SelectQuery rewritten=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(placeholderSchemaName,alias,""String_Node_Str""),""String_Node_Str"")),new BaseTable(placeholderSchemaName,placeholderTableName,alias));
  assertEquals(rewritten,((SubqueryColumn)((ColumnOp)((CreateTableAsSelectNode)(queryExecutionPlan.root.dependents.get(0))).getSelectQuery().getFilter().get()).getOperand(1)).getSubquery());
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}","public void SubqueryInFilterTestIn() throws VerdictDBException, SQLException {
  RelationStandardizer.resetItemID();
  String sql=""String_Node_Str"";
  NonValidatingSQLParser sqlToRelation=new NonValidatingSQLParser();
  AbstractRelation relation=sqlToRelation.toRelation(sql);
  RelationStandardizer gen=new RelationStandardizer(staticMetaData);
  relation=gen.standardize((SelectQuery)relation);
  QueryExecutionPlan queryExecutionPlan=new QueryExecutionPlan(""String_Node_Str"",meta,(SelectQuery)relation);
  queryExecutionPlan.cleanUp();
  String alias=((CreateTableAsSelectNode)(queryExecutionPlan.root.dependents.get(0))).getPlaceholderTables().get(0).getAliasName().get();
  SelectQuery rewritten=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(placeholderSchemaName,alias,""String_Node_Str""),""String_Node_Str"")),new BaseTable(placeholderSchemaName,placeholderTableName,alias));
  assertEquals(rewritten,((SubqueryColumn)((ColumnOp)((CreateTableAsSelectNode)(queryExecutionPlan.root.dependents.get(0))).getSelectQuery().getFilter().get()).getOperand(1)).getSubquery());
  SelectQuery expected=SelectQuery.create(Arrays.<SelectItem>asList(new AliasedColumn(new BaseColumn(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"")),new BaseTable(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  assertEquals(expected,((CreateTableAsSelectNode)queryExecutionPlan.root.dependents.get(0).dependents.get(0)).selectQuery);
  stmt.execute(""String_Node_Str"");
  ExecutablePlanRunner.runTillEnd(new JdbcConnection(conn,new H2Syntax()),queryExecutionPlan);
  stmt.execute(""String_Node_Str"");
}"
