record_number,buggy_code,fixed_code
89001,"public int getStorageCount(ItemStack storage,ItemStack addition,boolean allowPartial){
  if (addition == null)   return 0;
 else   if (storage == null)   return addition.getAmount();
 else   if (storage.getType() != Material.AIR && !hasSameItem(storage,addition))   return 0;
  int sum=storage.getAmount() + addition.getAmount();
  int max=storage.getType().getMaxStackSize();
  if (sum > max) {
    return allowPartial ? max - storage.getAmount() : 0;
  }
 else {
    return addition.getAmount();
  }
}","public int getStorageCount(ItemStack storage,ItemStack addition,boolean allowPartial){
  boolean isAir=storage == null || storage.getType() == Material.AIR;
  if (addition == null)   return 0;
 else   if (storage == null)   return addition.getAmount();
 else   if (!isAir && !hasSameItem(storage,addition))   return 0;
  int sum=storage.getAmount() + addition.getAmount();
  int max=isAir ? addition.getMaxStackSize() : storage.getMaxStackSize();
  if (sum > max) {
    return allowPartial ? max - storage.getAmount() : 0;
  }
 else {
    return addition.getAmount();
  }
}"
89002,"private Collection<ResourceHolder> handleEntityDeath(EntityDeathEvent event,LivingEntity entity,Player killer){
  boolean hasKiller=(killer != null);
  Integer id=entity.getEntityId();
  Configuration config=null;
  Action action=null;
  FutureReward future=null;
  List<ResourceHolder> generated=null;
  Collection<ResourceHolder> result=null;
  if (!scheduledRewards.containsKey(id)) {
    onFutureKillEvent(entity,killer);
  }
  future=scheduledRewards.get(id);
  if (future != null) {
    action=future.action;
    generated=future.generated;
    config=future.config;
  }
 else {
    config=getConfiguration(entity,killer);
  }
  scheduledRewards.remove(id);
  if (hasDebugger()) {
    debugger.printDebug(this,""String_Node_Str"",StringUtils.join(generated,""String_Node_Str""));
  }
  if (generated != null && generated.size() > 0) {
    ChannelProvider channels=config.getChannelProvider();
    RewardProvider rewards=config.getRewardProvider();
    event.setDroppedExp(0);
    if (killer != null)     result=action.rewardPlayer(rewards,killer,generated);
 else     result=action.rewardAnyone(rewards,entity.getWorld(),generated,entity.getLocation());
    config.getMessageQueue().enqueue(null,action,channels.getFormatter(null,result));
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"",id,StringUtils.join(result,""String_Node_Str""));
  }
 else   if (action != null && action.getInheritMultiplier() != 1) {
    handleMultiplier(event,id,config.getMultiplier() * action.getInheritMultiplier());
  }
 else   if (config.isDefaultRewardsDisabled() && hasKiller) {
    event.setDroppedExp(0);
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"",id);
  }
 else   if (!config.isDefaultRewardsDisabled() && hasKiller) {
    handleMultiplier(event,id,config.getMultiplier());
  }
  if (!(entity instanceof Player)) {
    spawnReasonLookup.remove(id);
  }
  if (result == null) {
    result=Lists.newArrayList((ResourceHolder)new ExperienceHolder(event.getDroppedExp()));
  }
  return null;
}","private Collection<ResourceHolder> handleEntityDeath(EntityDeathEvent event,LivingEntity entity,Player killer){
  boolean hasKiller=(killer != null);
  Integer id=entity.getEntityId();
  Configuration config=null;
  Action action=null;
  FutureReward future=null;
  List<ResourceHolder> generated=null;
  Collection<ResourceHolder> result=null;
  if (!scheduledRewards.containsKey(id)) {
    onFutureKillEvent(entity,killer);
  }
  future=scheduledRewards.get(id);
  if (future != null) {
    action=future.action;
    generated=future.generated;
    config=future.config;
  }
 else {
    config=getConfiguration(entity,killer);
  }
  scheduledRewards.remove(id);
  if (hasDebugger()) {
    debugger.printDebug(this,""String_Node_Str"",StringUtils.join(generated,""String_Node_Str""));
  }
  if (generated != null && generated.size() > 0) {
    ChannelProvider channels=config.getChannelProvider();
    RewardProvider rewards=config.getRewardProvider();
    event.setDroppedExp(0);
    if (killer != null)     result=action.rewardPlayer(rewards,killer,generated);
 else     result=action.rewardAnyone(rewards,entity.getWorld(),generated,entity.getLocation());
    config.getMessageQueue().enqueue(null,action,channels.getFormatter(null,result));
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"",id,StringUtils.join(result,""String_Node_Str""));
  }
 else   if (action != null && action.getInheritMultiplier() != 1) {
    handleMultiplier(event,id,config.getMultiplier() * action.getInheritMultiplier());
  }
 else   if (config.isDefaultRewardsDisabled() && hasKiller) {
    event.setDroppedExp(0);
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"",id);
  }
 else   if (!config.isDefaultRewardsDisabled() && hasKiller) {
    handleMultiplier(event,id,config.getMultiplier());
  }
  if (!(entity instanceof Player)) {
    spawnReasonLookup.remove(id);
  }
  if (result == null) {
    result=Lists.newArrayList((ResourceHolder)new ExperienceHolder(event.getDroppedExp()));
  }
  return result;
}"
89003,"/** 
 * Determines if the given action has any rewards or messages.
 * @return
 */
public boolean hasNothing(ChannelProvider provider){
  List<String> channels=getChannels(provider,message);
  return rewards.isEmpty() && (channels == null || channels.isEmpty());
}","/** 
 * Determines if the given action has any rewards or messages.
 * @return
 */
public boolean hasNothing(ChannelProvider provider){
  return rewards.isEmpty() && (message == null || getChannels(provider,message) == null);
}"
89004,"/** 
 * Merge a list of configurations into a new configuration.
 * @param configurations - list of configurations.
 * @param debugger - debugger instance.
 * @return Merged configuration.
 */
public static Configuration fromMultiple(List<Configuration> configurations,Debugger debugger){
  if (configurations == null)   return null;
 else   if (configurations.size() == 0)   return null;
 else   if (configurations.size() == 1)   return configurations.get(0);
  Configuration copy=null;
  for (  Configuration config : configurations) {
    if (copy == null) {
      copy=new Configuration(debugger,config.actionTypes);
    }
    copy.experienceDrop.putAll(config.experienceDrop);
    copy.playerDeathDrop.putAll(config.playerDeathDrop);
    copy.playerRewards.putAll(config.playerRewards);
    copy.levelingRate.putAll(config.levelingRate);
    mergeActions(copy.actionRewards,config.actionRewards);
    mergeActions(copy.complexRewards,config.complexRewards);
    if (config.defaultRewardsDisabled != DEFAULT_DISABLE_REWARDS)     copy.defaultRewardsDisabled=config.defaultRewardsDisabled;
    if (config.maximumEnchantLevel != DEFAULT_MAXIMUM_ENCHANT_LEVEL)     copy.maximumEnchantLevel=config.maximumEnchantLevel;
    if (config.maximumBookcaseCount != DEFAULT_MAXIMUM_BOOKCASE_COUNT)     copy.maximumBookcaseCount=config.maximumBookcaseCount;
    if (config.scanRadiusSetting != DEFAULT_SCAN_RADIUS)     copy.scanRadiusSetting=config.scanRadiusSetting;
    if (config.economyItemWorth != DEFAULT_ECONOMY_WORTH)     copy.economyItemWorth=config.economyItemWorth;
    if (!ObjectUtils.equals(config.economyDropItem,DEFAULT_ECONOMY_DROP))     copy.economyDropItem=config.economyDropItem;
    if (copy.messageQueue == null || !isStandardQueue(config.messageQueue))     copy.messageQueue=config.messageQueue;
    copy.rewardProvider=config.rewardProvider;
    copy.channelProvider=config.channelProvider;
    copy.parameterProviders=config.parameterProviders;
    copy.itemParser=config.itemParser;
    copy.mobParser=config.mobParser;
    copy.actionParser=config.actionParser;
    copy.playerParser=config.playerParser;
    copy.multiplier*=config.multiplier;
  }
  return new Configuration(copy,copy.multiplier);
}","/** 
 * Merge a list of configurations into a new configuration.
 * @param configurations - list of configurations.
 * @param debugger - debugger instance.
 * @return Merged configuration.
 */
public static Configuration fromMultiple(List<Configuration> configurations,Debugger debugger){
  if (configurations == null)   return null;
 else   if (configurations.size() == 0)   return null;
 else   if (configurations.size() == 1)   return configurations.get(0);
  Configuration copy=null;
  for (  Configuration config : configurations) {
    if (copy == null) {
      copy=new Configuration(debugger,config.actionTypes);
    }
    copy.experienceDrop.putAll(config.experienceDrop);
    copy.playerDeathDrop.putAll(config.playerDeathDrop);
    copy.playerRewards.putAll(config.playerRewards);
    copy.levelingRate.putAll(config.levelingRate);
    mergeActions(copy.actionRewards,config.actionRewards);
    mergeActions(copy.complexRewards,config.complexRewards);
    if (config.hadConfiguration(DISABLE_REWARDS_SETTING))     copy.defaultRewardsDisabled=config.defaultRewardsDisabled;
    if (config.hadConfiguration(MAXIMUM_ENCHANT_LEVEL_SETTING))     copy.maximumEnchantLevel=config.maximumEnchantLevel;
    if (config.hadConfiguration(MAXIMUM_BOOKCASE_COUNT_SETTING))     copy.maximumBookcaseCount=config.maximumBookcaseCount;
    if (config.hadConfiguration(VIRTUAL_SCAN_RADIUS_SETTING))     copy.scanRadiusSetting=config.scanRadiusSetting;
    if (config.hadConfiguration(ECONOMY_WORTH_SETTING))     copy.economyItemWorth=config.economyItemWorth;
    if (config.hadConfiguration(ECONOMY_DROPS_SETTING))     copy.economyDropItem=config.economyDropItem;
    if (copy.messageQueue == null || config.hadConfiguration(MESSAGE_MAX_RATE_SETTING))     copy.messageQueue=config.messageQueue;
    if (copy.rewardProvider == null || config.hadConfiguration(REWARD_TYPE_SETTING))     copy.rewardProvider=config.rewardProvider;
    if (copy.channelProvider == null || config.hadConfiguration(DEFAULT_CHANNELS_SETTING))     copy.channelProvider=config.channelProvider;
    copy.parameterProviders=config.parameterProviders;
    copy.itemParser=config.itemParser;
    copy.mobParser=config.mobParser;
    copy.actionParser=config.actionParser;
    copy.playerParser=config.playerParser;
    copy.multiplier*=config.multiplier;
  }
  return new Configuration(copy,copy.multiplier);
}"
89005,"private void initializeReferences(){
  if (rewardProvider != null) {
    rewardProvider=rewardProvider.createView(this);
  }
  if (channelProvider != null) {
    channelProvider=channelProvider.createView();
  }
  if (messageQueue != null) {
    messageQueue=messageQueue.createView();
  }
  if (actionParser != null) {
    actionParser=actionParser.createView(rewardProvider);
  }
}","private void initializeReferences(){
  if (rewardProvider != null) {
    rewardProvider=rewardProvider.createView(this);
  }
  if (channelProvider != null) {
    channelProvider=channelProvider.createView();
  }
  if (messageQueue != null) {
    messageQueue=messageQueue.createView();
    messageQueue.setChannelProvider(channelProvider);
  }
  if (actionParser != null) {
    actionParser=actionParser.createView(rewardProvider);
  }
}"
89006,"/** 
 * Initialize configuration from a configuration section.
 * @param config - configuration section to load from.
 */
public void loadFromConfig(ConfigurationSection config){
  multiplier=doubleParser.parse(config,MULTIPLIER_SETTING,1.0);
  MobSectionParser mobsParser=new MobSectionParser(actionParser,mobParser,parameterProviders,multiplier);
  PlayerDeathSectionParser playerDeathParser=new PlayerDeathSectionParser(actionParser,playerParser,parameterProviders,multiplier);
  ItemsSectionParser itemsParser=new ItemsSectionParser(itemParser,actionParser,actionTypes,parameterProviders,multiplier);
  PlayerSectionParser playerParser=new PlayerSectionParser(actionParser,parameterProviders,multiplier);
  LevelsSectionParser levelsParser=new LevelsSectionParser();
  mobsParser.setDebugger(logger);
  itemsParser.setDebugger(logger);
  playerParser.setDebugger(logger);
  levelsParser.setDebugger(logger);
  playerDeathParser.setDebugger(logger);
  maximumEnchantLevel=config.getInt(MAXIMUM_ENCHANT_LEVEL_SETTING,DEFAULT_MAXIMUM_ENCHANT_LEVEL);
  maximumBookcaseCount=config.getInt(MAXIMUM_BOOKCASE_COUNT_SETTING,DEFAULT_MAXIMUM_BOOKCASE_COUNT);
  if (maximumBookcaseCount > MAXIMUM_BOOKCASE_COUNT) {
    maximumBookcaseCount=MAXIMUM_BOOKCASE_COUNT;
    logger.printWarning(this,""String_Node_Str"");
  }
  defaultRewardsDisabled=config.getBoolean(DISABLE_REWARDS_SETTING,DEFAULT_DISABLE_REWARDS);
  scanRadiusSetting=doubleParser.parse(config,VIRTUAL_SCAN_RADIUS_SETTING,DEFAULT_SCAN_RADIUS);
  economyItemWorth=config.getInt(ECONOMY_WORTH_SETTING,DEFAULT_ECONOMY_WORTH);
  economyDropItem=DEFAULT_ECONOMY_DROP;
  try {
    String text=config.getString(ECONOMY_DROPS_SETTING,null);
    Query drop=text != null ? itemParser.parse(text) : null;
    if (drop != null && drop instanceof ItemQuery) {
      economyDropItem=((ItemQuery)drop).toItemStack(1);
    }
  }
 catch (  ParsingException e) {
    logger.printWarning(this,""String_Node_Str"",e.getMessage());
  }
  StringListParser listParser=new StringListParser();
  channelProvider.setDefaultChannels(listParser.parseSafe(config,DEFAULT_CHANNELS_SETTING));
  String defaultReward=loadReward(config.getString(REWARD_TYPE_SETTING,null));
  if (defaultReward != null)   setDefaultRewardName(defaultReward);
  loadRate(config);
  try {
    experienceDrop=mobsParser.parse(config,""String_Node_Str"");
    playerDeathDrop=playerDeathParser.parse(config,""String_Node_Str"");
    ItemsSectionResult result=itemsParser.parse(config,""String_Node_Str"");
    actionRewards=result.getActionRewards();
    complexRewards=result.getComplexRewards();
    playerRewards=playerParser.parse(config,""String_Node_Str"");
    levelingRate=levelsParser.parse(config,""String_Node_Str"");
  }
 catch (  ParsingException e) {
    ErrorReporting.DEFAULT.reportError(logger,this,e);
  }
  initializeReferences();
  checkRewards();
}","/** 
 * Initialize configuration from a configuration section.
 * @param config - configuration section to load from.
 */
public void loadFromConfig(ConfigurationSection config){
  topLevel=config.getValues(false).keySet();
  multiplier=doubleParser.parse(config,MULTIPLIER_SETTING,1.0);
  MobSectionParser mobsParser=new MobSectionParser(actionParser,mobParser,parameterProviders,multiplier);
  PlayerDeathSectionParser playerDeathParser=new PlayerDeathSectionParser(actionParser,playerParser,parameterProviders,multiplier);
  ItemsSectionParser itemsParser=new ItemsSectionParser(itemParser,actionParser,actionTypes,parameterProviders,multiplier);
  PlayerSectionParser playerParser=new PlayerSectionParser(actionParser,parameterProviders,multiplier);
  LevelsSectionParser levelsParser=new LevelsSectionParser();
  mobsParser.setDebugger(logger);
  itemsParser.setDebugger(logger);
  playerParser.setDebugger(logger);
  levelsParser.setDebugger(logger);
  playerDeathParser.setDebugger(logger);
  maximumEnchantLevel=config.getInt(MAXIMUM_ENCHANT_LEVEL_SETTING,DEFAULT_MAXIMUM_ENCHANT_LEVEL);
  maximumBookcaseCount=config.getInt(MAXIMUM_BOOKCASE_COUNT_SETTING,DEFAULT_MAXIMUM_BOOKCASE_COUNT);
  if (maximumBookcaseCount > MAXIMUM_BOOKCASE_COUNT) {
    maximumBookcaseCount=MAXIMUM_BOOKCASE_COUNT;
    logger.printWarning(this,""String_Node_Str"");
  }
  defaultRewardsDisabled=config.getBoolean(DISABLE_REWARDS_SETTING,DEFAULT_DISABLE_REWARDS);
  scanRadiusSetting=doubleParser.parse(config,VIRTUAL_SCAN_RADIUS_SETTING,DEFAULT_SCAN_RADIUS);
  economyItemWorth=config.getInt(ECONOMY_WORTH_SETTING,DEFAULT_ECONOMY_WORTH);
  economyDropItem=DEFAULT_ECONOMY_DROP;
  try {
    String text=config.getString(ECONOMY_DROPS_SETTING,null);
    Query drop=text != null ? itemParser.parse(text) : null;
    if (drop != null && drop instanceof ItemQuery) {
      economyDropItem=((ItemQuery)drop).toItemStack(1);
    }
  }
 catch (  ParsingException e) {
    logger.printWarning(this,""String_Node_Str"",e.getMessage());
  }
  StringListParser listParser=new StringListParser();
  channelProvider.setDefaultChannels(listParser.parseSafe(config,DEFAULT_CHANNELS_SETTING));
  String defaultReward=loadReward(config.getString(REWARD_TYPE_SETTING,null));
  if (defaultReward != null)   setDefaultRewardName(defaultReward);
  loadRate(config);
  try {
    experienceDrop=mobsParser.parse(config,""String_Node_Str"");
    playerDeathDrop=playerDeathParser.parse(config,""String_Node_Str"");
    ItemsSectionResult result=itemsParser.parse(config,""String_Node_Str"");
    actionRewards=result.getActionRewards();
    complexRewards=result.getComplexRewards();
    playerRewards=playerParser.parse(config,""String_Node_Str"");
    levelingRate=levelsParser.parse(config,""String_Node_Str"");
  }
 catch (  ParsingException e) {
    ErrorReporting.DEFAULT.reportError(logger,this,e);
  }
  initializeReferences();
  checkRewards();
}"
89007,"/** 
 * Retrieves the default service, or the next non-disabled service if  the default service is disabled.
 * @return The default service, or NULL if not found.
 */
public TService getDefaultService(){
  TService service=getByName(getDefaultName());
  if (isEnabled(service))   return service;
 else   return Iterables.getFirst(getEnabledServices(),null);
}","/** 
 * Retrieves the default service, or the next non-disabled service if  the default service is disabled.
 * @return The default service, or NULL if not found.
 */
public TService getDefaultService(){
  TService service=getByName(getDefaultName());
  if (service != null && isEnabled(service))   return service;
 else   return Iterables.getFirst(getEnabledServices(),null);
}"
89008,"public ServiceProvider(String defaultName){
  this.defaultName=defaultName;
}","/** 
 * Copy everything from the given provider.
 * @param other - the given provider.
 */
public ServiceProvider(ServiceProvider<TService> other){
  this.defaultName=other.defaultName;
  this.nameLookup=new ConcurrentHashMap<String,TService>(other.nameLookup);
  this.disabledLookup=Sets.newSetFromMap(new ConcurrentHashMap<String,Boolean>());
  for (  String disabled : other.disabledLookup) {
    this.disabledLookup.add(disabled);
  }
}"
89009,"private void handleBlockReward(BlockBreakEvent event,Configuration config,ItemTree tree,String description){
  Player player=event.getPlayer();
  Block block=event.getBlock();
  ItemQuery retrieveKey=ItemQuery.fromAny(block);
  if (config == null) {
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"",player.getName(),block);
  }
 else {
    Action action=getBlockBonusAction(config.getSimpleBlockReward(),retrieveKey,block);
    RewardProvider rewards=config.getRewardProvider();
    ChannelProvider channels=config.getChannelProvider();
    if (action == null || action.hasNothing(channels))     return;
    Collection<NamedParameter> params=config.getParameterProviders().getParameters(action,block);
    List<ResourceHolder> generated=action.generateRewards(params,rewards,random);
    if (!action.canRewardPlayer(rewards,player,generated)) {
      if (hasDebugger())       debugger.printDebug(this,""String_Node_Str"" + description + ""String_Node_Str"",player.getName(),block.getType());
      if (!Permissions.hasUntouchable(player))       event.setCancelled(true);
      return;
    }
    event.setExpToDrop(0);
    Collection<ResourceHolder> result=action.rewardPlayer(rewards,player,generated,block.getLocation());
    config.getMessageQueue().enqueue(player,action,channels.getFormatter(player,result));
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"" + description + ""String_Node_Str"",player.getName(),StringUtils.join(result,""String_Node_Str""),block.getType());
  }
}","private void handleBlockReward(BlockBreakEvent event,Configuration config,ItemTree tree,String description){
  Player player=event.getPlayer();
  Block block=event.getBlock();
  ItemQuery retrieveKey=ItemQuery.fromAny(block);
  if (config == null) {
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"",player.getName(),block);
  }
 else {
    Action action=getBlockBonusAction(tree,retrieveKey,block);
    RewardProvider rewards=config.getRewardProvider();
    ChannelProvider channels=config.getChannelProvider();
    if (action == null || action.hasNothing(channels))     return;
    Collection<NamedParameter> params=config.getParameterProviders().getParameters(action,block);
    List<ResourceHolder> generated=action.generateRewards(params,rewards,random);
    if (!action.canRewardPlayer(rewards,player,generated)) {
      if (hasDebugger())       debugger.printDebug(this,""String_Node_Str"" + description + ""String_Node_Str"",player.getName(),block.getType());
      if (!Permissions.hasUntouchable(player))       event.setCancelled(true);
      return;
    }
    event.setExpToDrop(0);
    Collection<ResourceHolder> result=action.rewardPlayer(rewards,player,generated,block.getLocation());
    config.getMessageQueue().enqueue(player,action,channels.getFormatter(player,result));
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"" + description + ""String_Node_Str"",player.getName(),StringUtils.join(result,""String_Node_Str""),block.getType());
  }
}"
89010,"public RewardProvider(RewardProvider reference,Configuration configuration){
  super(reference.getDefaultName());
  this.nameLookup=reference.nameLookup;
  this.enumLookup=reference.enumLookup;
  this.configuration=configuration;
}","@SuppressWarnings(""String_Node_Str"") public RewardProvider(RewardProvider reference,Configuration configuration){
  super(reference);
  this.enumLookup=(HashMap<RewardTypes,RewardService>)reference.enumLookup.clone();
  this.configuration=configuration;
}"
89011,"/** 
 * Retrieves a list of action rewards that applies when a player performs a given action to the item or block specified by the query. <p> The query must be a ItemQuery for every trigger except brewing, where it also can be a PotionQuery. <p> Also note that this list contains every possible reward that matches the given parameters. In reality, only the  first item will be awarded.
 * @param player - player performing the given action, or NULL if the default configuration file should be used.
 * @param trigger - action the player performs. 
 * @param query - query representing the item or block that was the target of the action.
 * @return A list of possible rewards. Only the first item will be chosen when rewards are actually awarded.
 * @throws ParsingException If the stored preset option associated with this player is malformed.
 */
public List<Action> getPlayerReward(Player player,Integer trigger,Query query) throws ParsingException {
  Configuration config=getPresets().getConfiguration(player);
  Integer brewing=getActionTypes().getType(ActionTypes.BREWING);
  ItemTree current=config.getActionReward(trigger);
  if (trigger == brewing && query instanceof PotionQuery) {
    return config.getComplexBrewingReward().getAllRanked((PotionQuery)query);
  }
 else {
    if (current == null) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",trigger));
    }
    return current.getAllRanked((ItemQuery)query);
  }
}","/** 
 * Retrieves a list of action rewards that applies when a player performs a given action to the item or block specified by the query. <p> The query must be a ItemQuery for every trigger except brewing, where it also can be a PotionQuery. <p> Also note that this list contains every possible reward that matches the given parameters. In reality, only the  first item will be awarded.
 * @param player - player performing the given action, or NULL if the default configuration file should be used.
 * @param trigger - action the player performs. 
 * @param query - query representing the item or block that was the target of the action.
 * @return A list of possible rewards. Only the first item will be chosen when rewards are actually awarded.
 * @throws ParsingException If the stored preset option associated with this player is malformed.
 */
public List<Action> getPlayerReward(Player player,Integer trigger,Query query) throws ParsingException {
  Configuration config=getPresets().getConfiguration(player);
  Integer brewing=getActionTypes().getType(ActionTypes.BREWING);
  ItemTree current=config.getActionReward(trigger);
  if (Objects.equal(trigger,brewing) && query instanceof PotionQuery) {
    return config.getComplexBrewingReward().getAllRanked((PotionQuery)query);
  }
 else {
    if (current == null) {
      throw new IllegalArgumentException(String.format(""String_Node_Str"",trigger));
    }
    return current.getAllRanked((ItemQuery)query);
  }
}"
89012,"private void loadPresets(ConfigurationSection section,ConfigurationLoader loader){
  for (  String key : section.getKeys(false)) {
    try {
      PresetQuery query=presetParser.parse(key);
      Configuration data=loadPreset(section.getConfigurationSection(key),loader);
      data.setPreset(query.hasPresetNames());
      if (data != null)       presets.put(query,data);
    }
 catch (    ParsingException ex) {
      if (logger != null)       logger.printWarning(this,""String_Node_Str"",ex.getMessage());
    }
  }
}","private void loadPresets(ConfigurationSection section,ConfigurationLoader loader){
  for (  String key : section.getKeys(false)) {
    try {
      PresetQuery query=presetParser.parse(key);
      Configuration data=loadPreset(section.getConfigurationSection(key),loader);
      if (data != null) {
        data.setPreset(query.hasPresetNames());
        presets.put(query,data);
      }
    }
 catch (    ParsingException ex) {
      if (logger != null)       logger.printWarning(this,""String_Node_Str"",ex.getMessage());
    }
  }
}"
89013,"@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (command != null && command.getName().equalsIgnoreCase(COMMAND_RELOAD) || command.getName().equalsIgnoreCase(COMMAND_ABBREVIATED))   return handleMainCommand(sender,args);
 else   return false;
}","@Override public boolean onCommand(CommandSender sender,Command command,String label,String[] args){
  if (command != null && (command.getName().equalsIgnoreCase(COMMAND_RELOAD) || command.getName().equalsIgnoreCase(COMMAND_ABBREVIATED)))   return handleMainCommand(sender,args);
 else   return false;
}"
89014,"private boolean handleMainCommand(CommandSender sender,String[] args){
  if (!Permissions.hasAdmin(sender)) {
    plugin.respond(sender,ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  String sub=CommandUtilities.getSafe(args,0);
  if (sub.equalsIgnoreCase(SUB_COMMAND_TOGGLE_DEBUG)) {
    plugin.toggleDebug();
    plugin.respond(sender,ChatColor.BLUE + ""String_Node_Str"" + (plugin.isDebugEnabled() ? ""String_Node_Str"" : ""String_Node_Str""));
    return true;
  }
 else   if (sub.equalsIgnoreCase(SUB_COMMAND_WARNINGS)) {
    if (sender != null && plugin.getInformer().hasWarnings())     plugin.getInformer().displayWarnings(sender,true);
 else     sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    return true;
  }
 else   if (sub.equalsIgnoreCase(SUB_COMMAND_ITEM)) {
    handleQueryItem(sender,args,1);
    return true;
  }
 else   if (sub.equalsIgnoreCase(SUB_COMMAND_MOB)) {
    handleQueryMob(sender,args,1);
    return true;
  }
 else   if (sub.equalsIgnoreCase(SUB_COMMAND_RELOAD) || sub.length() == 0) {
    try {
      plugin.loadDefaults(true);
      plugin.respond(sender,ChatColor.BLUE + ""String_Node_Str"");
    }
 catch (    IOException e) {
      plugin.respond(sender,ChatColor.RED + ""String_Node_Str"" + e.getMessage());
    }
    return true;
  }
 else   if (sub.equalsIgnoreCase(SUB_COMMAND_UPDATE)) {
    plugin.getAutoUpdate().updatePlugin(sender);
    return true;
  }
 else {
    plugin.respond(sender,ChatColor.RED + ""String_Node_Str"");
    return false;
  }
}","private boolean handleMainCommand(CommandSender sender,String[] args){
  if (!Permissions.hasAdmin(sender)) {
    plugin.respond(sender,ChatColor.RED + ""String_Node_Str"");
    return true;
  }
  String sub=CommandUtilities.getSafe(args,0);
  if (sub.equalsIgnoreCase(SUB_COMMAND_TOGGLE_DEBUG)) {
    plugin.toggleDebug();
    plugin.respond(sender,ChatColor.BLUE + ""String_Node_Str"" + (plugin.isDebugEnabled() ? ""String_Node_Str"" : ""String_Node_Str""));
    return true;
  }
 else   if (sub.equalsIgnoreCase(SUB_COMMAND_WARNINGS)) {
    if (sender != null) {
      if (plugin.getInformer().hasWarnings())       plugin.getInformer().displayWarnings(sender,true);
 else       sender.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
    }
    return true;
  }
 else   if (sub.equalsIgnoreCase(SUB_COMMAND_ITEM)) {
    handleQueryItem(sender,args,1);
    return true;
  }
 else   if (sub.equalsIgnoreCase(SUB_COMMAND_MOB)) {
    handleQueryMob(sender,args,1);
    return true;
  }
 else   if (sub.equalsIgnoreCase(SUB_COMMAND_RELOAD) || sub.length() == 0) {
    try {
      plugin.loadDefaults(true);
      plugin.respond(sender,ChatColor.BLUE + ""String_Node_Str"");
    }
 catch (    IOException e) {
      plugin.respond(sender,ChatColor.RED + ""String_Node_Str"" + e.getMessage());
    }
    return true;
  }
 else   if (sub.equalsIgnoreCase(SUB_COMMAND_UPDATE)) {
    plugin.getAutoUpdate().updatePlugin(sender);
    return true;
  }
 else {
    plugin.respond(sender,ChatColor.RED + ""String_Node_Str"");
    return false;
  }
}"
89015,"@Override public Boolean hasPlayerHistory(Location blockLocation) throws HistoryException {
  int blockID=blockLocation.getBlock().getTypeId();
synchronized (lock) {
    if (searching) {
      try {
        lock.wait();
      }
 catch (      InterruptedException e) {
        throw new HistoryException(""String_Node_Str"",e);
      }
    }
    SearchParser searchParser=new SearchParser();
    searchParser.loc=blockLocation.toVector();
    searchParser.actions=Arrays.asList(DataType.BLOCK_PLACE,DataType.BLOCK_FORM);
    searchParser.radius=0;
    searchParser.worlds=new String[]{blockLocation.getWorld().getName()};
    searching=true;
    HawkEyeAPI.performSearch(new HawkeyeCallback(debugger,this),searchParser,SearchDir.DESC);
    if (searching) {
      try {
        lock.wait();
      }
 catch (      InterruptedException e) {
        throw new HistoryException(""String_Node_Str"",e);
      }
    }
  }
  if (searchResult instanceof BlockChangeEntry) {
    BlockChangeEntry changeData=(BlockChangeEntry)searchResult;
    int to=getToField(changeData);
    debugger.printDebug(this,""String_Node_Str"",to);
    return to == blockID;
  }
 else {
    return null;
  }
}","@Override public Boolean hasPlayerHistory(Location blockLocation) throws HistoryException {
  int blockID=blockLocation.getBlock().getTypeId();
synchronized (lock) {
    while (searching) {
      try {
        lock.wait();
      }
 catch (      InterruptedException e) {
        throw new HistoryException(""String_Node_Str"",e);
      }
    }
    SearchParser searchParser=new SearchParser();
    searchParser.loc=blockLocation.toVector();
    searchParser.actions=Arrays.asList(DataType.BLOCK_PLACE,DataType.BLOCK_FORM);
    searchParser.radius=0;
    searchParser.worlds=new String[]{blockLocation.getWorld().getName()};
    searching=true;
    HawkEyeAPI.performSearch(new HawkeyeCallback(debugger,this),searchParser,SearchDir.DESC);
    while (searching) {
      try {
        lock.wait();
      }
 catch (      InterruptedException e) {
        throw new HistoryException(""String_Node_Str"",e);
      }
    }
  }
  if (searchResult instanceof BlockChangeEntry) {
    BlockChangeEntry changeData=(BlockChangeEntry)searchResult;
    int to=getToField(changeData);
    debugger.printDebug(this,""String_Node_Str"",to);
    return to == blockID;
  }
 else {
    return null;
  }
}"
89016,"public void handleBlockPlaceEvent(BlockPlaceEvent event,Block block,Player player){
  boolean allowPlacingReward=Permissions.hasRewardPlacing(player);
  if (historyProviders != null && historyProviders.getMemoryService() != null) {
    historyProviders.getMemoryService().onBlockPlaceEvent(event);
  }
  if (allowPlacingReward) {
    Configuration config=getConfiguration(player);
    if (config == null) {
      if (hasDebugger())       debugger.printDebug(this,""String_Node_Str"",block);
    }
    ItemQuery retrieveKey=ItemQuery.fromExact(block);
    ItemTree placeReward=config.getSimplePlacingReward();
    if (placeReward.containsKey(retrieveKey)) {
      Action action=placeReward.get(retrieveKey);
      RewardProvider rewards=config.getRewardProvider();
      ChannelProvider channels=config.getChannelProvider();
      Collection<NamedParameter> params=config.getParameterProviders().getParameters(action,block);
      List<ResourceHolder> generated=action.generateRewards(params,rewards,random);
      if (!action.canRewardPlayer(rewards,player,generated)) {
        if (hasDebugger())         debugger.printDebug(this,""String_Node_Str"",player.getName(),block.getType());
        if (!Permissions.hasUntouchable(player))         event.setCancelled(true);
      }
      Collection<ResourceHolder> result=action.rewardPlayer(rewards,player,generated);
      config.getMessageQueue().enqueue(player,action,channels.getFormatter(player,result,generated));
      if (hasDebugger())       debugger.printDebug(this,""String_Node_Str"",player.getName(),StringUtils.join(result,""String_Node_Str""),block.getType());
    }
  }
}","public void handleBlockPlaceEvent(BlockPlaceEvent event,Block block,Player player){
  boolean allowPlacingReward=Permissions.hasRewardPlacing(player);
  if (historyProviders != null && historyProviders.getMemoryService() != null) {
    historyProviders.getMemoryService().onBlockPlaceEvent(event);
  }
  if (allowPlacingReward) {
    Configuration config=getConfiguration(player);
    if (config == null) {
      if (hasDebugger())       debugger.printDebug(this,""String_Node_Str"",block);
      return;
    }
    ItemQuery retrieveKey=ItemQuery.fromExact(block);
    ItemTree placeReward=config.getSimplePlacingReward();
    if (placeReward.containsKey(retrieveKey)) {
      Action action=placeReward.get(retrieveKey);
      RewardProvider rewards=config.getRewardProvider();
      ChannelProvider channels=config.getChannelProvider();
      Collection<NamedParameter> params=config.getParameterProviders().getParameters(action,block);
      List<ResourceHolder> generated=action.generateRewards(params,rewards,random);
      if (!action.canRewardPlayer(rewards,player,generated)) {
        if (hasDebugger())         debugger.printDebug(this,""String_Node_Str"",player.getName(),block.getType());
        if (!Permissions.hasUntouchable(player))         event.setCancelled(true);
      }
      Collection<ResourceHolder> result=action.rewardPlayer(rewards,player,generated);
      config.getMessageQueue().enqueue(player,action,channels.getFormatter(player,result,generated));
      if (hasDebugger())       debugger.printDebug(this,""String_Node_Str"",player.getName(),StringUtils.join(result,""String_Node_Str""),block.getType());
    }
  }
}"
89017,"public ExperienceInformerListener(Debugger debugger,Server server){
  this.server=server;
}","public ExperienceInformerListener(Debugger debugger,Server server){
  this.debugger=debugger;
  this.server=server;
}"
89018,"private void handleEnchantItemEvent(PlayerExpChangeEvent event){
  Player player=event.getPlayer();
  Configuration config=getConfiguration(player);
  ExperienceManager manager=new ExperienceManager(player);
  LevelingRate rate=config.getLevelingRate();
  if (rate == null) {
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"");
    return;
  }
  Integer desiredLevelUp=rate.get(player.getLevel());
  Integer defaultLevelUp=manager.getXpNeededToLevelUp(player.getLevel());
  if (desiredLevelUp != null && desiredLevelUp != defaultLevelUp) {
    double factor=(double)defaultLevelUp / (double)desiredLevelUp;
    double exact=event.getAmount() * factor;
    int oldXP=event.getAmount();
    int newXP=(int)exact;
    event.setAmount(newXP);
    if (exact > newXP) {
      manager.changeExp(exact - newXP);
    }
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"",oldXP,exact,factor);
  }
}","private void handleEnchantItemEvent(PlayerExpChangeEvent event){
  Player player=event.getPlayer();
  Configuration config=getConfiguration(player);
  ExperienceManager manager=new ExperienceManager(player);
  LevelingRate rate=config.getLevelingRate();
  if (rate == null) {
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"");
    return;
  }
  Integer desiredLevelUp=rate.get(player.getLevel());
  Integer defaultLevelUp=manager.getXpNeededToLevelUp(player.getLevel());
  if (!Objects.equal(desiredLevelUp,defaultLevelUp)) {
    double factor=(double)defaultLevelUp / (double)desiredLevelUp;
    double exact=event.getAmount() * factor;
    int oldXP=event.getAmount();
    int newXP=(int)exact;
    event.setAmount(newXP);
    if (exact > newXP) {
      manager.changeExp(exact - newXP);
    }
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"",oldXP,exact,factor);
  }
}"
89019,"@EventHandler(priority=EventPriority.HIGHEST,ignoreCancelled=true) public void onEntityDeathEvent(EntityDeathEvent event){
  LivingEntity entity=event.getEntity();
  Player killer=entity.getKiller();
  Collection<ResourceHolder> result=null;
  try {
    if (entity != null) {
      result=handleEntityDeath(event,entity,killer);
    }
    if (event instanceof PlayerDeathEvent) {
      handlePlayerDeath((PlayerDeathEvent)event,(Player)entity,result);
    }
  }
 catch (  Exception e) {
    report.reportError(debugger,this,e,event);
  }
}","@EventHandler(priority=EventPriority.HIGHEST,ignoreCancelled=true) public void onEntityDeathEvent(EntityDeathEvent event){
  LivingEntity entity=event.getEntity();
  Collection<ResourceHolder> result=null;
  try {
    if (entity != null) {
      Player killer=entity.getKiller();
      result=handleEntityDeath(event,entity,killer);
    }
    if (event instanceof PlayerDeathEvent) {
      handlePlayerDeath((PlayerDeathEvent)event,(Player)entity,result);
    }
  }
 catch (  Exception e) {
    report.reportError(debugger,this,e,event);
  }
}"
89020,"public RewardEconomy(Economy economy,Debugger debugger,ItemRewardListener listener){
  if (economy == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (listener == null)   throw new NullArgumentException(""String_Node_Str"");
  this.listener=listener;
  this.economy=economy;
}","public RewardEconomy(Economy economy,Debugger debugger,ItemRewardListener listener){
  if (economy == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (listener == null)   throw new NullArgumentException(""String_Node_Str"");
  this.debugger=debugger;
  this.listener=listener;
  this.economy=economy;
}"
89021,"public Action parse(ConfigurationSection input,String key) throws ParsingException {
  if (input == null)   throw ParsingException.fromFormat(""String_Node_Str"");
  Action result=new Action();
  String defaultName=provider.getDefaultName();
  String text=null;
  List<String> channels=null;
  if (provider.containsService(defaultName)) {
    ResourcesParser parser=provider.getDefaultService().getResourcesParser(namedParameters);
    if (parser != null) {
      ResourceFactory factory=parser.parse(input,key,null);
      if (factory != null) {
        result.addReward(defaultName,factory);
        result.setId(currentID++);
        return result;
      }
    }
  }
  ConfigurationSection values=input.getConfigurationSection(key);
  if (values == null)   return null;
  for (  String sub : values.getKeys(false)) {
    String enumed=Utility.getEnumName(sub);
    if (sub.equalsIgnoreCase(messageTextSetting)) {
      text=values.getString(sub);
    }
 else     if (sub.equalsIgnoreCase(messageChannelSetting)) {
      channels=listParser.parseSafe(values,sub);
    }
 else     if (provider.containsService(enumed)) {
      ResourcesParser parser=provider.getByName(enumed).getResourcesParser(namedParameters);
      if (parser != null) {
        ResourceFactory factory=parser.parse(values,sub);
        if (factory != null)         result.addReward(sub,factory);
      }
 else {
        throw ParsingException.fromFormat(""String_Node_Str"",sub);
      }
    }
 else {
      throw ParsingException.fromFormat(""String_Node_Str"",sub);
    }
  }
  if (text != null) {
    Message message=new Message();
    message.setText(text);
    message.setChannels(channels);
    result.setMessage(message);
  }
  result.setId(currentID++);
  return result;
}","public Action parse(ConfigurationSection input,String key) throws ParsingException {
  if (input == null)   throw ParsingException.fromFormat(""String_Node_Str"");
  Action result=new Action();
  String defaultName=provider.getDefaultName();
  String text=null;
  List<String> channels=null;
  if (provider.containsService(defaultName)) {
    ResourcesParser parser=provider.getDefaultService().getResourcesParser(namedParameters);
    if (parser != null) {
      try {
        ResourceFactory factory=parser.parse(input,key);
        if (factory != null) {
          result.addReward(defaultName,factory);
          result.setId(currentID++);
          return result;
        }
      }
 catch (      ParsingException e) {
        if (!input.isConfigurationSection(key)) {
          throw e;
        }
      }
    }
  }
  ConfigurationSection values=input.getConfigurationSection(key);
  if (values == null) {
    return null;
  }
  for (  String sub : values.getKeys(false)) {
    String enumed=Utility.getEnumName(sub);
    if (sub.equalsIgnoreCase(messageTextSetting)) {
      text=values.getString(sub);
    }
 else     if (sub.equalsIgnoreCase(messageChannelSetting)) {
      channels=listParser.parseSafe(values,sub);
    }
 else     if (provider.containsService(enumed)) {
      ResourcesParser parser=provider.getByName(enumed).getResourcesParser(namedParameters);
      if (parser != null) {
        ResourceFactory factory=parser.parse(values,sub);
        if (factory != null)         result.addReward(sub,factory);
      }
 else {
        throw ParsingException.fromFormat(""String_Node_Str"",sub);
      }
    }
 else {
      throw ParsingException.fromFormat(""String_Node_Str"",sub);
    }
  }
  if (text != null) {
    Message message=new Message();
    message.setText(text);
    message.setChannels(channels);
    result.setMessage(message);
  }
  result.setId(currentID++);
  return result;
}"
89022,"private VariableFunction parse(ConfigurationSection input,String key,VariableFunction defaultValue,boolean throwException) throws Exception {
  String start=key + ""String_Node_Str"";
  String end=key + ""String_Node_Str"";
  Object root=input.get(key);
  SampleRange result=null;
  if (root instanceof Double) {
    result=new SampleRange((Double)root);
  }
 else   if (root instanceof Integer) {
    result=new SampleRange((Integer)root);
  }
 else   if (root instanceof List) {
    @SuppressWarnings(""String_Node_Str"") List attempt=(List)root;
    try {
      if (attempt != null && attempt.size() == 2)       result=new SampleRange(tryParse(attempt.get(0)),tryParse(attempt.get(1)));
 else       if (attempt != null && attempt.size() == 1)       result=new SampleRange(tryParse(attempt.get(0)));
 else       if (!throwException)       return defaultValue;
 else       throw new Exception(""String_Node_Str"");
    }
 catch (    Exception e) {
      if (throwException)       throw e;
 else       return defaultValue;
    }
  }
 else   if (root instanceof String) {
    try {
      return textParser.parse((String)root,defaultValue);
    }
 catch (    Exception e) {
      if (throwException)       throw e;
 else       return defaultValue;
    }
  }
 else {
    if (input.contains(start) && input.contains(end)) {
      result=new SampleRange(input.getDouble(start),input.getDouble(end));
    }
 else {
      return defaultValue;
    }
  }
  return VariableFunction.fromRange(result);
}","private VariableFunction parse(ConfigurationSection input,String key,VariableFunction defaultValue,boolean throwException) throws Exception {
  String start=key + ""String_Node_Str"";
  String end=key + ""String_Node_Str"";
  Object root=input.get(key);
  SampleRange result=null;
  if (root instanceof Double) {
    result=new SampleRange((Double)root);
  }
 else   if (root instanceof Integer) {
    result=new SampleRange((Integer)root);
  }
 else   if (root instanceof List) {
    @SuppressWarnings(""String_Node_Str"") List attempt=(List)root;
    try {
      if (attempt != null && attempt.size() == 2)       result=new SampleRange(tryParse(attempt.get(0)),tryParse(attempt.get(1)));
 else       if (attempt != null && attempt.size() == 1)       result=new SampleRange(tryParse(attempt.get(0)));
 else       if (!throwException)       return defaultValue;
 else       throw new ParsingException(""String_Node_Str"");
    }
 catch (    Exception e) {
      if (throwException)       throw e;
 else       return defaultValue;
    }
  }
 else   if (root instanceof String) {
    try {
      return textParser.parse((String)root);
    }
 catch (    Exception e) {
      if (throwException)       throw e;
 else       return defaultValue;
    }
  }
 else {
    if (input.contains(start) && input.contains(end)) {
      result=new SampleRange(input.getDouble(start),input.getDouble(end));
    }
 else {
      return defaultValue;
    }
  }
  return VariableFunction.fromRange(result);
}"
89023,"@Override public PlayerTree parse(ConfigurationSection input,String sectionName) throws ParsingException {
  PlayerTree playerDeathDrop=new PlayerTree(multiplier);
  ActionParser parser=actionParser.createView(NAMED_PARAMETERS);
  if (input == null)   throw new NullArgumentException(""String_Node_Str"");
  if (sectionName != null) {
    input=input.getConfigurationSection(sectionName);
    if (input == null)     return playerDeathDrop;
  }
  for (  String key : input.getKeys(false)) {
    try {
      Action value=parser.parse(input,key);
      PlayerQuery query=playerParser.parse(key);
      if (value != null)       playerDeathDrop.put(query,value);
 else       throw new ParsingException(""String_Node_Str"");
    }
 catch (    ParsingException e) {
      if (isCollectExceptions()) {
        debugger.printWarning(this,""String_Node_Str"",key,e.toString());
      }
 else {
        throw e;
      }
    }
  }
  return playerDeathDrop;
}","@Override public PlayerTree parse(ConfigurationSection input,String sectionName) throws ParsingException {
  PlayerTree playerDeathDrop=new PlayerTree(multiplier);
  ActionParser parser=actionParser.createView(NAMED_PARAMETERS);
  if (input == null)   throw new NullArgumentException(""String_Node_Str"");
  if (sectionName != null) {
    input=input.getConfigurationSection(sectionName);
    if (input == null)     return playerDeathDrop;
  }
  for (  String key : input.getKeys(false)) {
    try {
      Action value=parser.parse(input,key);
      PlayerQuery query=playerParser.parse(key);
      if (value != null)       playerDeathDrop.put(query,value);
 else       throw new ParsingException(""String_Node_Str"");
    }
 catch (    ParsingException e) {
      if (isCollectExceptions()) {
        e.printStackTrace();
        debugger.printWarning(this,""String_Node_Str"",key,e.getMessage());
      }
 else {
        throw e;
      }
    }
  }
  return playerDeathDrop;
}"
89024,"public Configuration(Debugger debugger,RewardProvider provider,ChannelProvider channels){
  this.logger=debugger;
  this.rewardProvider=provider;
  this.channelProvider=channels;
  this.actionParser=new ActionParser(provider);
}","public Configuration(Debugger debugger,RewardProvider provider,ChannelProvider channels){
  this.logger=debugger;
  this.rewardProvider=provider;
  this.channelProvider=channels;
  this.actionParser=new ActionParser(provider);
  this.playerParser=new PlayerParser();
}"
89025,"/** 
 * Initialize configuration from a configuration section.
 * @param config - configuration section to load from.
 */
public void loadFromConfig(ConfigurationSection config){
  if (config.isDouble(MULTIPLIER_SETTING))   multiplier=config.getDouble(MULTIPLIER_SETTING,1);
 else   multiplier=config.getInt(MULTIPLIER_SETTING,1);
  StringListParser listParser=new StringListParser();
  MobSectionParser mobsParser=new MobSectionParser(actionParser,mobParser,multiplier);
  PlayerDeathSectionParser playerDeathParser=new PlayerDeathSectionParser(actionParser,playerParser,multiplier);
  ItemsSectionParser itemsParser=new ItemsSectionParser(itemParser,actionParser,actionTypes,multiplier);
  PlayerSectionParser playerParser=new PlayerSectionParser(actionParser,multiplier);
  LevelsSectionParser levelsParser=new LevelsSectionParser();
  mobsParser.setDebugger(logger);
  itemsParser.setDebugger(logger);
  playerParser.setDebugger(logger);
  levelsParser.setDebugger(logger);
  maximumEnchantLevel=config.getInt(MAXIMUM_ENCHANT_LEVEL_SETTING,DEFAULT_MAXIMUM_ENCHANT_LEVEL);
  maximumBookcaseCount=config.getInt(MAXIMUM_BOOKCASE_COUNT_SETTING,DEFAULT_MAXIMUM_BOOKCASE_COUNT);
  if (maximumBookcaseCount > MAXIMUM_BOOKCASE_COUNT) {
    maximumBookcaseCount=MAXIMUM_BOOKCASE_COUNT;
    logger.printWarning(this,""String_Node_Str"");
  }
  defaultRewardsDisabled=config.getBoolean(DEFAULT_REWARDS_SETTING,true);
  scanRadiusSetting=readDouble(config,VIRTUAL_SCAN_RADIUS_SETTING,DEFAULT_SCAN_RADIUS);
  economyItemWorth=config.getInt(ECONOMY_WORTH_SETTING,1);
  economyDropItem=null;
  try {
    String text=config.getString(ECONOMY_DROPS_SETTING,null);
    Query drop=text != null ? itemParser.parse(text) : null;
    if (drop != null && drop instanceof ItemQuery) {
      economyDropItem=((ItemQuery)drop).toItemStack(1);
    }
  }
 catch (  ParsingException e) {
    logger.printWarning(this,""String_Node_Str"",e.getMessage());
  }
  channelProvider.setDefaultChannels(listParser.parseSafe(config,DEFAULT_CHANNELS_SETTING));
  String defaultReward=loadReward(config.getString(REWARD_TYPE_SETTING,null));
  if (defaultReward != null)   setDefaultRewardName(defaultReward);
  loadRate(config);
  try {
    experienceDrop=mobsParser.parse(config,""String_Node_Str"");
    playerDeathDrop=playerDeathParser.parse(config,""String_Node_Str"");
    ItemsSectionResult result=itemsParser.parse(config,""String_Node_Str"");
    actionRewards=result.getActionRewards();
    complexRewards=result.getComplexRewards();
    playerRewards=playerParser.parse(config,""String_Node_Str"");
    levelingRate=levelsParser.parse(config,""String_Node_Str"");
  }
 catch (  ParsingException e) {
    ErrorReporting.DEFAULT.reportError(logger,this,e);
  }
  initializeReferences();
  checkRewards();
}","/** 
 * Initialize configuration from a configuration section.
 * @param config - configuration section to load from.
 */
public void loadFromConfig(ConfigurationSection config){
  if (config.isDouble(MULTIPLIER_SETTING))   multiplier=config.getDouble(MULTIPLIER_SETTING,1);
 else   multiplier=config.getInt(MULTIPLIER_SETTING,1);
  MobSectionParser mobsParser=new MobSectionParser(actionParser,mobParser,multiplier);
  PlayerDeathSectionParser playerDeathParser=new PlayerDeathSectionParser(actionParser,playerParser,multiplier);
  ItemsSectionParser itemsParser=new ItemsSectionParser(itemParser,actionParser,actionTypes,multiplier);
  PlayerSectionParser playerParser=new PlayerSectionParser(actionParser,multiplier);
  LevelsSectionParser levelsParser=new LevelsSectionParser();
  mobsParser.setDebugger(logger);
  itemsParser.setDebugger(logger);
  playerParser.setDebugger(logger);
  levelsParser.setDebugger(logger);
  playerDeathParser.setDebugger(logger);
  maximumEnchantLevel=config.getInt(MAXIMUM_ENCHANT_LEVEL_SETTING,DEFAULT_MAXIMUM_ENCHANT_LEVEL);
  maximumBookcaseCount=config.getInt(MAXIMUM_BOOKCASE_COUNT_SETTING,DEFAULT_MAXIMUM_BOOKCASE_COUNT);
  if (maximumBookcaseCount > MAXIMUM_BOOKCASE_COUNT) {
    maximumBookcaseCount=MAXIMUM_BOOKCASE_COUNT;
    logger.printWarning(this,""String_Node_Str"");
  }
  defaultRewardsDisabled=config.getBoolean(DEFAULT_REWARDS_SETTING,true);
  scanRadiusSetting=readDouble(config,VIRTUAL_SCAN_RADIUS_SETTING,DEFAULT_SCAN_RADIUS);
  economyItemWorth=config.getInt(ECONOMY_WORTH_SETTING,1);
  economyDropItem=null;
  try {
    String text=config.getString(ECONOMY_DROPS_SETTING,null);
    Query drop=text != null ? itemParser.parse(text) : null;
    if (drop != null && drop instanceof ItemQuery) {
      economyDropItem=((ItemQuery)drop).toItemStack(1);
    }
  }
 catch (  ParsingException e) {
    logger.printWarning(this,""String_Node_Str"",e.getMessage());
  }
  StringListParser listParser=new StringListParser();
  channelProvider.setDefaultChannels(listParser.parseSafe(config,DEFAULT_CHANNELS_SETTING));
  String defaultReward=loadReward(config.getString(REWARD_TYPE_SETTING,null));
  if (defaultReward != null)   setDefaultRewardName(defaultReward);
  loadRate(config);
  try {
    experienceDrop=mobsParser.parse(config,""String_Node_Str"");
    playerDeathDrop=playerDeathParser.parse(config,""String_Node_Str"");
    ItemsSectionResult result=itemsParser.parse(config,""String_Node_Str"");
    actionRewards=result.getActionRewards();
    complexRewards=result.getComplexRewards();
    playerRewards=playerParser.parse(config,""String_Node_Str"");
    levelingRate=levelsParser.parse(config,""String_Node_Str"");
  }
 catch (  ParsingException e) {
    ErrorReporting.DEFAULT.reportError(logger,this,e);
  }
  initializeReferences();
  checkRewards();
}"
89026,"private void handlePlayerDeath(PlayerDeathEvent event,Player player,Collection<ResourceHolder> dropped){
  if (Permissions.hasKeepExp(player)) {
    event.setKeepLevel(true);
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"",player.getName());
  }
 else {
    int total=0;
    for (    ResourceHolder holder : dropped) {
      if (holder instanceof ExperienceHolder) {
        ExperienceHolder exp=(ExperienceHolder)holder;
        total+=exp.getAmount();
      }
    }
    subtractExperience(event,player,total);
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"",player.getName(),total);
  }
}","private void handlePlayerDeath(PlayerDeathEvent event,Player player,Collection<ResourceHolder> dropped){
  event.setDroppedExp(0);
  if (Permissions.hasKeepExp(player)) {
    event.setKeepLevel(true);
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"",player.getName());
  }
 else {
    int total=0;
    for (    ResourceHolder holder : dropped) {
      if (holder instanceof ExperienceHolder) {
        ExperienceHolder exp=(ExperienceHolder)holder;
        total+=exp.getAmount();
      }
    }
    subtractExperience(event,player,total);
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"",player.getName(),total);
  }
}"
89027,"private Collection<ResourceHolder> handleEntityDeath(EntityDeathEvent event,LivingEntity entity,Player killer){
  boolean hasKiller=(killer != null);
  Integer id=entity.getEntityId();
  Configuration config=null;
  Action action=null;
  List<ResourceHolder> generated=null;
  Collection<ResourceHolder> result=null;
  if (scheduledRewards.containsKey(id)) {
    FutureReward future=scheduledRewards.get(id);
    if (future != null) {
      action=future.action;
      generated=future.generated;
      config=future.config;
    }
    scheduledRewards.remove(id);
  }
 else {
    config=getConfiguration(entity,killer);
    if (config != null) {
      action=getAction(config,entity,killer);
      RewardProvider rewards=config.getRewardProvider();
      if (action != null)       generated=action.generateRewards(rewards,random);
    }
  }
  if (generated != null) {
    ChannelProvider channels=config.getChannelProvider();
    RewardProvider rewards=config.getRewardProvider();
    event.setDroppedExp(0);
    result=action.rewardAnyone(rewards,entity.getWorld(),generated,entity.getLocation());
    config.getMessageQueue().enqueue(null,action,channels.getFormatter(null,result));
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"",id,StringUtils.join(result,""String_Node_Str""));
  }
 else   if (config.isDefaultRewardsDisabled() && hasKiller) {
    event.setDroppedExp(0);
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"",id);
  }
 else   if (!config.isDefaultRewardsDisabled() && hasKiller) {
    int expDropped=event.getDroppedExp();
    if (config.getMultiplier() != 1) {
      SampleRange increase=new SampleRange(expDropped * config.getMultiplier());
      int expChanged=increase.sampleInt(random);
      event.setDroppedExp(expChanged);
      if (hasDebugger())       debugger.printDebug(this,""String_Node_Str"",id,expChanged);
    }
  }
  if (!(entity instanceof Player)) {
    spawnReasonLookup.remove(id);
  }
  if (result == null) {
    result=Lists.newArrayList((ResourceHolder)new ExperienceHolder(event.getDroppedExp()));
  }
  return null;
}","private Collection<ResourceHolder> handleEntityDeath(EntityDeathEvent event,LivingEntity entity,Player killer){
  boolean hasKiller=(killer != null);
  Integer id=entity.getEntityId();
  Configuration config=null;
  Action action=null;
  List<ResourceHolder> generated=null;
  Collection<ResourceHolder> result=null;
  if (scheduledRewards.containsKey(id)) {
    FutureReward future=scheduledRewards.get(id);
    if (future != null) {
      action=future.action;
      generated=future.generated;
      config=future.config;
    }
    scheduledRewards.remove(id);
  }
 else {
    config=getConfiguration(entity,killer);
    if (config != null) {
      action=getAction(config,entity,killer);
      RewardProvider rewards=config.getRewardProvider();
      if (action != null)       generated=action.generateRewards(rewards,random);
    }
  }
  if (hasDebugger())   debugger.printDebug(this,""String_Node_Str"",ToStringBuilder.reflectionToString(generated));
  if (generated != null) {
    ChannelProvider channels=config.getChannelProvider();
    RewardProvider rewards=config.getRewardProvider();
    event.setDroppedExp(0);
    if (killer != null)     result=action.rewardPlayer(rewards,killer,generated);
 else     result=action.rewardAnyone(rewards,entity.getWorld(),generated,entity.getLocation());
    config.getMessageQueue().enqueue(null,action,channels.getFormatter(null,result));
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"",id,StringUtils.join(result,""String_Node_Str""));
  }
 else   if (config.isDefaultRewardsDisabled() && hasKiller) {
    event.setDroppedExp(0);
    if (hasDebugger())     debugger.printDebug(this,""String_Node_Str"",id);
  }
 else   if (!config.isDefaultRewardsDisabled() && hasKiller) {
    int expDropped=event.getDroppedExp();
    if (config.getMultiplier() != 1) {
      SampleRange increase=new SampleRange(expDropped * config.getMultiplier());
      int expChanged=increase.sampleInt(random);
      event.setDroppedExp(expChanged);
      if (hasDebugger())       debugger.printDebug(this,""String_Node_Str"",id,expChanged);
    }
  }
  if (!(entity instanceof Player)) {
    spawnReasonLookup.remove(id);
  }
  if (result == null) {
    result=Lists.newArrayList((ResourceHolder)new ExperienceHolder(event.getDroppedExp()));
  }
  return null;
}"
89028,"@EventHandler(priority=EventPriority.HIGHEST,ignoreCancelled=true) public void onEntityDeathEvent(EntityDeathEvent event){
  LivingEntity entity=event.getEntity();
  Player killer=entity.getKiller();
  Collection<ResourceHolder> result=null;
  try {
    if (entity != null && isMob(entity)) {
      result=handleEntityDeath(event,entity,killer);
    }
    if (event instanceof PlayerDeathEvent) {
      handlePlayerDeath((PlayerDeathEvent)event,(Player)entity,result);
    }
  }
 catch (  Exception e) {
    report.reportError(debugger,this,e,event);
  }
}","@EventHandler(priority=EventPriority.HIGHEST,ignoreCancelled=true) public void onEntityDeathEvent(EntityDeathEvent event){
  LivingEntity entity=event.getEntity();
  Player killer=entity.getKiller();
  Collection<ResourceHolder> result=null;
  try {
    if (entity != null) {
      result=handleEntityDeath(event,entity,killer);
    }
    if (event instanceof PlayerDeathEvent) {
      handlePlayerDeath((PlayerDeathEvent)event,(Player)entity,result);
    }
  }
 catch (  Exception e) {
    report.reportError(debugger,this,e,event);
  }
}"
89029,"private Action getAction(Configuration config,LivingEntity entity,Player killer){
  if (entity instanceof Player) {
    Player entityPlayer=(Player)entity;
    PlayerQuery query=PlayerQuery.fromExact(entityPlayer.getName(),playerGroups.getPlayerGroups(entityPlayer),entityPlayer.getLastDamageCause().getCause(),killer != null);
    if (config != null) {
      return config.getPlayerDeathDrop().get(query);
    }
 else {
      if (hasDebugger())       debugger.printDebug(this,""String_Node_Str"",entityPlayer.getName(),query);
      return null;
    }
  }
 else {
    Integer id=entity.getEntityId();
    MobQuery query=MobQuery.fromExact(entity,spawnReasonLookup.get(id),killer != null);
    if (config != null) {
      return config.getExperienceDrop().get(query);
    }
 else {
      if (hasDebugger())       debugger.printDebug(this,""String_Node_Str"",id,query);
      return null;
    }
  }
}","private Action getAction(Configuration config,LivingEntity entity,Player killer){
  if (entity instanceof Player) {
    Player entityPlayer=(Player)entity;
    PlayerQuery query=PlayerQuery.fromExact(entityPlayer,playerGroups.getPlayerGroups(entityPlayer),killer != null);
    if (config != null) {
      return config.getPlayerDeathDrop().get(query);
    }
 else {
      if (hasDebugger())       debugger.printDebug(this,""String_Node_Str"",entityPlayer.getName(),query);
      return null;
    }
  }
 else {
    Integer id=entity.getEntityId();
    MobQuery query=MobQuery.fromExact(entity,spawnReasonLookup.get(id),killer != null);
    if (config != null) {
      return config.getExperienceDrop().get(query);
    }
 else {
      if (hasDebugger())       debugger.printDebug(this,""String_Node_Str"",id,query);
      return null;
    }
  }
}"
89030,"@Override public boolean match(Query other){
  if (other instanceof PlayerQuery) {
    PlayerQuery query=(PlayerQuery)other;
    return QueryMatching.matchParameter(names,query.names) && QueryMatching.matchParameter(groups,query.groups) && QueryMatching.matchParameter(deathCause,query.deathCause);
  }
  return false;
}","@Override public boolean match(Query other){
  if (other instanceof PlayerQuery) {
    PlayerQuery query=(PlayerQuery)other;
    return QueryMatching.matchParameter(names,query.names) && QueryMatching.matchParameter(groups,query.groups) && QueryMatching.matchParameter(deathCause,query.deathCause)&& QueryMatching.matchParameter(murder,query.murder);
  }
  return false;
}"
89031,"@Test public void testExample() throws ParsingException {
  Debugger debugger=new MockDebugger();
  RewardProvider provider=new RewardProvider();
  provider.register(new RewardExperience());
  Configuration test=ConfigurationTest.createConfig(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",debugger,provider);
  PlayerTree tree=test.getPlayerDeathDrop();
  PlayerQuery aadnkQuery=PlayerQuery.fromExact(""String_Node_Str"",""String_Node_Str"");
  PlayerQuery vipQuery=PlayerQuery.fromExact(""String_Node_Str"",""String_Node_Str"");
  Action aadnkAction=new Action();
  aadnkAction.addReward(""String_Node_Str"",new ExperienceFactory(10));
  aadnkAction.setId(0);
  Action vipAction=new Action();
  vipAction.addReward(""String_Node_Str"",new ExperienceFactory(500));
  vipAction.setId(1);
  assertEquals(aadnkAction,tree.get(aadnkQuery));
  assertEquals(vipAction,tree.get(vipQuery));
}","@Test public void testExample() throws ParsingException {
  Debugger debugger=new MockDebugger();
  RewardProvider provider=new RewardProvider();
  provider.register(new RewardExperience());
  Configuration test=ConfigurationTest.createConfig(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",debugger,provider);
  PlayerTree tree=test.getPlayerDeathDrop();
  PlayerQuery aadnkQuery=PlayerQuery.fromExact(""String_Node_Str"",new String[]{""String_Node_Str""},DamageCause.ENTITY_ATTACK,true);
  PlayerQuery vipQuery=PlayerQuery.fromExact(""String_Node_Str"",""String_Node_Str"");
  Action aadnkAction=new Action();
  aadnkAction.addReward(""String_Node_Str"",new ExperienceFactory(10));
  aadnkAction.setId(0);
  Action vipAction=new Action();
  vipAction.addReward(""String_Node_Str"",new ExperienceFactory(500));
  vipAction.setId(1);
  assertEquals(aadnkAction,tree.get(aadnkQuery));
  assertEquals(vipAction,tree.get(vipQuery));
}"
89032,"/** 
 * Initialize configuration from a configuration section.
 * @param config - configuration section to load from.
 */
public void loadFromConfig(ConfigurationSection config){
  if (config.isDouble(MULTIPLIER_SETTING))   multiplier=config.getDouble(MULTIPLIER_SETTING,1);
 else   multiplier=config.getInt(MULTIPLIER_SETTING,1);
  StringListParser listParser=new StringListParser();
  MobSectionParser mobsParser=new MobSectionParser(actionParser,mobParser,multiplier);
  ItemsSectionParser itemsParser=new ItemsSectionParser(itemParser,actionParser,actionTypes,multiplier);
  PlayerSectionParser playerParser=new PlayerSectionParser(actionParser,multiplier);
  LevelsSectionParser levelsParser=new LevelsSectionParser();
  mobsParser.setDebugger(logger);
  itemsParser.setDebugger(logger);
  playerParser.setDebugger(logger);
  levelsParser.setDebugger(logger);
  maximumEnchantLevel=config.getInt(MAXIMUM_ENCHANT_LEVEL_SETTING,DEFAULT_MAXIMUM_ENCHANT_LEVEL);
  maximumBookcaseCount=config.getInt(MAXIMUM_BOOKCASE_COUNT_SETTING,DEFAULT_MAXIMUM_BOOKCASE_COUNT);
  if (maximumBookcaseCount > MAXIMUM_BOOKCASE_COUNT) {
    maximumBookcaseCount=MAXIMUM_BOOKCASE_COUNT;
    logger.printWarning(this,""String_Node_Str"");
  }
  defaultRewardsDisabled=config.getBoolean(DEFAULT_REWARDS_SETTING,true);
  scanRadiusSetting=readDouble(config,VIRTUAL_SCAN_RADIUS_SETTING,DEFAULT_SCAN_RADIUS);
  economyItemWorth=config.getInt(ECONOMY_WORTH_SETTING,1);
  economyDropItem=null;
  try {
    String text=config.getString(ECONOMY_DROPS_SETTING,null);
    Query drop=text != null ? itemParser.parse(text) : null;
    if (drop != null && drop instanceof ItemQuery) {
      economyDropItem=((ItemQuery)drop).toItemStack(1);
    }
  }
 catch (  ParsingException e) {
    logger.printWarning(this,""String_Node_Str"",e.getMessage());
  }
  channelProvider.setDefaultChannels(listParser.parseSafe(config,DEFAULT_CHANNELS_SETTING));
  String defaultReward=loadReward(config.getString(REWARD_TYPE_SETTING,null));
  if (defaultReward != null)   setDefaultRewardName(defaultReward);
  loadRate(config);
  try {
    experienceDrop=mobsParser.parse(config,""String_Node_Str"");
    ItemsSectionResult result=itemsParser.parse(config,""String_Node_Str"");
    actionRewards=result.getActionRewards();
    complexRewards=result.getComplexRewards();
    playerRewards=playerParser.parse(config,""String_Node_Str"");
    levelingRate=levelsParser.parse(config,""String_Node_Str"");
  }
 catch (  ParsingException e) {
    ErrorReporting.DEFAULT.reportError(logger,this,e);
  }
  checkRewards();
}","/** 
 * Initialize configuration from a configuration section.
 * @param config - configuration section to load from.
 */
public void loadFromConfig(ConfigurationSection config){
  if (config.isDouble(MULTIPLIER_SETTING))   multiplier=config.getDouble(MULTIPLIER_SETTING,1);
 else   multiplier=config.getInt(MULTIPLIER_SETTING,1);
  StringListParser listParser=new StringListParser();
  MobSectionParser mobsParser=new MobSectionParser(actionParser,mobParser,multiplier);
  ItemsSectionParser itemsParser=new ItemsSectionParser(itemParser,actionParser,actionTypes,multiplier);
  PlayerSectionParser playerParser=new PlayerSectionParser(actionParser,multiplier);
  LevelsSectionParser levelsParser=new LevelsSectionParser();
  mobsParser.setDebugger(logger);
  itemsParser.setDebugger(logger);
  playerParser.setDebugger(logger);
  levelsParser.setDebugger(logger);
  maximumEnchantLevel=config.getInt(MAXIMUM_ENCHANT_LEVEL_SETTING,DEFAULT_MAXIMUM_ENCHANT_LEVEL);
  maximumBookcaseCount=config.getInt(MAXIMUM_BOOKCASE_COUNT_SETTING,DEFAULT_MAXIMUM_BOOKCASE_COUNT);
  if (maximumBookcaseCount > MAXIMUM_BOOKCASE_COUNT) {
    maximumBookcaseCount=MAXIMUM_BOOKCASE_COUNT;
    logger.printWarning(this,""String_Node_Str"");
  }
  defaultRewardsDisabled=config.getBoolean(DEFAULT_REWARDS_SETTING,true);
  scanRadiusSetting=readDouble(config,VIRTUAL_SCAN_RADIUS_SETTING,DEFAULT_SCAN_RADIUS);
  economyItemWorth=config.getInt(ECONOMY_WORTH_SETTING,1);
  economyDropItem=null;
  try {
    String text=config.getString(ECONOMY_DROPS_SETTING,null);
    Query drop=text != null ? itemParser.parse(text) : null;
    if (drop != null && drop instanceof ItemQuery) {
      economyDropItem=((ItemQuery)drop).toItemStack(1);
    }
  }
 catch (  ParsingException e) {
    logger.printWarning(this,""String_Node_Str"",e.getMessage());
  }
  channelProvider.setDefaultChannels(listParser.parseSafe(config,DEFAULT_CHANNELS_SETTING));
  String defaultReward=loadReward(config.getString(REWARD_TYPE_SETTING,null));
  if (defaultReward != null)   setDefaultRewardName(defaultReward);
  loadRate(config);
  try {
    experienceDrop=mobsParser.parse(config,""String_Node_Str"");
    ItemsSectionResult result=itemsParser.parse(config,""String_Node_Str"");
    actionRewards=result.getActionRewards();
    complexRewards=result.getComplexRewards();
    playerRewards=playerParser.parse(config,""String_Node_Str"");
    levelingRate=levelsParser.parse(config,""String_Node_Str"");
  }
 catch (  ParsingException e) {
    ErrorReporting.DEFAULT.reportError(logger,this,e);
  }
  initializeReferences();
  checkRewards();
}"
89033,"private void setExp(double base,double amt){
  int xp=(int)(base + amt);
  if (xp < 0)   xp=0;
  Player player=getPlayer();
  int curLvl=player.getLevel();
  int newLvl=getLevelForExp(xp);
  if (curLvl != newLvl) {
    player.setLevel(newLvl);
    player.setTotalExperience(player.getTotalExperience() + xpRequiredForNextLevel[curLvl]);
  }
  double pct=(base - getXpForLevel(newLvl) + amt) / (double)(xpRequiredForNextLevel[newLvl]);
  player.setExp((float)pct);
}","private void setExp(double base,double amt){
  int xp=(int)(base + amt);
  if (xp < 0)   xp=0;
  Player player=getPlayer();
  int curLvl=player.getLevel();
  int newLvl=getLevelForExp(xp);
  if (curLvl != newLvl) {
    player.setLevel(newLvl);
  }
  if (xp > base) {
    player.setTotalExperience(player.getTotalExperience() + xp - (int)base);
  }
  double pct=(base - getXpForLevel(newLvl) + amt) / (double)(xpRequiredForNextLevel[newLvl]);
  player.setExp((float)pct);
}"
89034,"public RewardEconomy(Economy economy,Debugger debugger,ItemRewardListener listener){
  if (economy == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (debugger == null)   throw new NullArgumentException(""String_Node_Str"");
  if (listener == null)   throw new NullArgumentException(""String_Node_Str"");
  this.listener=listener;
  this.economy=economy;
}","public RewardEconomy(Economy economy,Debugger debugger,ItemRewardListener listener){
  if (economy == null)   throw new IllegalArgumentException(""String_Node_Str"");
  if (listener == null)   throw new NullArgumentException(""String_Node_Str"");
  this.listener=listener;
  this.economy=economy;
}"
89035,"private static int getExpToLevel(final int level){
  return 17 + Math.max(3 * (level - 16),0);
}","private static int getExpToLevel(final int level){
  return 17 + Math.max(3 * (level - 15),0);
}"
89036,"private SyncMessageDelayer(String p,String[] msgs){
  this.p=p;
  this.msgs=msgs;
}","private SyncMessageDelayer(String player,String prefix,List<String> list){
  this.player=player;
  this.prefix=prefix;
  this.msgs=list;
}"
89037,"private void printStackTraceSync(Throwable t,boolean expected){
  BukkitScheduler bs=plugin.getServer().getScheduler();
  try {
    String prefix=plugin.getName() + ""String_Node_Str"";
    StringWriter sw=new StringWriter();
    PrintWriter pw=new PrintWriter(sw);
    t.printStackTrace(pw);
    String[] sts=sw.toString().replace(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
    String[] out;
    if (expected)     out=new String[sts.length + 31];
 else     out=new String[sts.length + 33];
    out[0]=prefix;
    out[1]=prefix + ""String_Node_Str"";
    out[2]=prefix + ""String_Node_Str"" + SUPPORT_URL;
    out[3]=prefix + ""String_Node_Str"";
    out[4]=prefix + ""String_Node_Str"";
    int i=5;
    for (; i - 5 < sts.length; i++)     out[i]=prefix + sts[i - 5];
    out[++i]=prefix + ""String_Node_Str"";
    out[++i]=prefix + ""String_Node_Str"" + version;
    out[++i]=prefix + ""String_Node_Str"" + delay;
    out[++i]=prefix + ""String_Node_Str"" + ymlPrefix;
    out[++i]=prefix + ""String_Node_Str"" + ymlSuffix;
    out[++i]=prefix + ""String_Node_Str"" + bukkitdevPrefix;
    out[++i]=prefix + ""String_Node_Str"" + bukkitdevSuffix;
    out[++i]=prefix + ""String_Node_Str"" + bukkitdevSlug;
    out[++i]=prefix + ""String_Node_Str"" + COLOR_INFO.name();
    out[++i]=prefix + ""String_Node_Str"" + COLOR_OK.name();
    out[++i]=prefix + ""String_Node_Str"" + COLOR_ERROR.name();
    out[++i]=prefix + ""String_Node_Str"" + bukget;
    out[++i]=prefix + ""String_Node_Str"" + bukgetFallback;
    out[++i]=prefix + ""String_Node_Str"" + pid;
    out[++i]=prefix + ""String_Node_Str"" + av;
    out[++i]=prefix + ""String_Node_Str"" + config;
    out[++i]=prefix + ""String_Node_Str"" + lock.get();
    out[++i]=prefix + ""String_Node_Str"" + needUpdate;
    out[++i]=prefix + ""String_Node_Str"" + updatePending;
    out[++i]=prefix + ""String_Node_Str"" + updateURL;
    out[++i]=prefix + ""String_Node_Str"" + updateVersion;
    out[++i]=prefix + ""String_Node_Str"" + pluginURL;
    out[++i]=prefix + ""String_Node_Str"" + type;
    out[++i]=prefix + ""String_Node_Str"";
    out[++i]=prefix;
    if (!expected) {
      out[++i]=prefix + ""String_Node_Str"";
      out[++i]=prefix;
    }
    bs.scheduleSyncDelayedTask(plugin,new SyncMessageDelayer(null,out));
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  if (!expected) {
    bs.cancelTask(pid);
    bs.scheduleAsyncDelayedTask(plugin,new Runnable(){
      public void run(){
        while (!lock.compareAndSet(false,true)) {
          try {
            Thread.sleep(1L);
          }
 catch (          InterruptedException e) {
          }
        }
        pid=-1;
        config=null;
        needUpdate=updatePending=false;
        updateURL=updateVersion=pluginURL=type=null;
      }
    }
);
  }
}","private void printStackTraceSync(Throwable t,boolean expected){
  BukkitScheduler bs=plugin.getServer().getScheduler();
  try {
    List<String> lines=new ArrayList<String>();
    String prefix=""String_Node_Str"";
    lines.add(String.format(""String_Node_Str"",plugin.getName()));
    lines.add(""String_Node_Str"");
    lines.add(""String_Node_Str"");
    lines.add(""String_Node_Str"" + SUPPORT_URL);
    lines.add(""String_Node_Str"");
    lines.add(""String_Node_Str"");
    addMultiString(lines,ExceptionUtils.getFullStackTrace(t));
    lines.add(""String_Node_Str"");
    addMultiString(lines,ToStringBuilder.reflectionToString(this,ToStringStyle.MULTI_LINE_STYLE).replace(ChatColor.COLOR_CHAR,'&'));
    if (!expected) {
      lines.add(""String_Node_Str"");
      lines.add(""String_Node_Str"");
    }
    lines.add(""String_Node_Str"");
    lines.add(""String_Node_Str"");
    bs.scheduleSyncDelayedTask(plugin,new SyncMessageDelayer(null,prefix,lines));
  }
 catch (  Throwable e) {
    e.printStackTrace();
  }
  if (!expected) {
    bs.cancelTask(pid);
    bs.scheduleAsyncDelayedTask(plugin,new Runnable(){
      public void run(){
        while (!lock.compareAndSet(false,true)) {
          try {
            Thread.sleep(1L);
          }
 catch (          InterruptedException e) {
          }
        }
        pid=-1;
        config=null;
        needUpdate=updatePending=false;
        updateURL=updateVersion=pluginURL=type=null;
      }
    }
);
  }
}"
89038,"public PotionQuery(ItemQuery query){
  if (!query.match(Material.POTION))   throw new IllegalArgumentException(""String_Node_Str"");
  if (!query.hasDurability())   throw new IllegalArgumentException(""String_Node_Str"");
  List<Potion> potions=new ArrayList<Potion>();
  for (  Integer durability : query.getDurability()) {
    potions.add(Potion.fromDamage(durability));
  }
  loadFromPotions(potions);
}","public PotionQuery(ItemQuery query){
  if (!query.match(Material.POTION))   throw new IllegalArgumentException(""String_Node_Str"");
  if (!query.hasDurability())   throw new IllegalArgumentException(""String_Node_Str"");
  reset();
  for (  Integer durability : query.getDurability()) {
    if (durability == 0) {
      type.add(PotionType.WATER);
    }
 else {
      addPotion(Potion.fromDamage(durability));
    }
  }
}"
89039,"@Override public void onEnable(){
  informer=new ExperienceInformerListener();
  interactionListener=new PlayerInteractionListener();
  commandExperienceMod=new CommandExperienceMod(this);
  commandSpawn=new CommandSpawnExp(this);
  customProvider.setLastInteraction(interactionListener);
  if (hasEconomy()) {
    manager.registerEvents(itemListener,this);
  }
  try {
    loadDefaults(false);
    manager.registerEvents(interactionListener,this);
    manager.registerEvents(xpBlockListener,this);
    manager.registerEvents(xpItemListener,this);
    manager.registerEvents(xpMobListener,this);
    manager.registerEvents(xpEnchancer,this);
    manager.registerEvents(xpCleanup,this);
    manager.registerEvents(informer,this);
  }
 catch (  IOException e) {
    currentLogger.severe(""String_Node_Str"" + e.getMessage());
  }
  Permissions.setGlobakSettings(globalSettings);
  historyProviders.register(new MemoryService(globalSettings.getMaxBlocksInHistory(),globalSettings.getMaxAgeInHistory()));
  if (LogBlockService.exists(manager)) {
    if (!historyProviders.containsService(LogBlockService.NAME)) {
      historyProviders.register(LogBlockService.create(manager));
    }
    currentLogger.info(""String_Node_Str"");
  }
 else {
    currentLogger.info(""String_Node_Str"");
  }
  disableServices(historyProviders,globalSettings.getDisabledServices());
  disableServices(channelProvider,globalSettings.getDisabledServices());
  disableServices(rewardProvider,globalSettings.getDisabledServices());
  disableServices(customProvider,globalSettings.getDisabledServices());
  getCommand(commandReload).setExecutor(commandExperienceMod);
  getCommand(commandSpawnExp).setExecutor(commandSpawn);
  serverTickTask=getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
    public void run(){
      onServerTick();
    }
  }
,TICK_DELAY,TICK_DELAY);
  if (serverTickTask < 0)   printWarning(this,""String_Node_Str"");
}","@Override public void onEnable(){
  informer=new ExperienceInformerListener();
  interactionListener=new PlayerInteractionListener();
  commandExperienceMod=new CommandExperienceMod(this);
  commandSpawn=new CommandSpawnExp(this);
  customProvider.setLastInteraction(interactionListener);
  if (hasEconomy()) {
    manager.registerEvents(itemListener,this);
  }
  try {
    loadDefaults(false);
    manager.registerEvents(interactionListener,this);
    manager.registerEvents(xpBlockListener,this);
    manager.registerEvents(xpItemListener,this);
    manager.registerEvents(xpMobListener,this);
    manager.registerEvents(xpEnchancer,this);
    manager.registerEvents(xpCleanup,this);
    manager.registerEvents(informer,this);
  }
 catch (  IOException e) {
    currentLogger.severe(""String_Node_Str"" + e.getMessage());
  }
  historyProviders.register(new MemoryService(globalSettings.getMaxBlocksInHistory(),globalSettings.getMaxAgeInHistory()));
  if (LogBlockService.exists(manager)) {
    if (!historyProviders.containsService(LogBlockService.NAME)) {
      historyProviders.register(LogBlockService.create(manager));
    }
    currentLogger.info(""String_Node_Str"");
  }
 else {
    currentLogger.info(""String_Node_Str"");
  }
  disableServices(historyProviders,globalSettings.getDisabledServices());
  disableServices(channelProvider,globalSettings.getDisabledServices());
  disableServices(rewardProvider,globalSettings.getDisabledServices());
  disableServices(customProvider,globalSettings.getDisabledServices());
  getCommand(commandReload).setExecutor(commandExperienceMod);
  getCommand(commandSpawnExp).setExecutor(commandSpawn);
  serverTickTask=getServer().getScheduler().scheduleSyncRepeatingTask(this,new Runnable(){
    public void run(){
      onServerTick();
    }
  }
,TICK_DELAY,TICK_DELAY);
  if (serverTickTask < 0)   printWarning(this,""String_Node_Str"");
}"
89040,"/** 
 * Reloads (if reload is TRUE) configurations. There's no need to call this after adding reward providers.
 * @param reload - if TRUE; reload configuration.
 * @throws IOException An I/O error occurred.
 */
public void loadDefaults(boolean reload) throws IOException {
  if (reload || presets == null) {
    informer.clearMessages();
    configLoader.clearCache();
    globalSettings=new GlobalSettings(this);
    globalSettings.loadFromConfig(loadConfig(""String_Node_Str"",""String_Node_Str""));
    YamlConfiguration presetList=loadConfig(""String_Node_Str"",""String_Node_Str"");
    loadConfig(""String_Node_Str"",""String_Node_Str"");
    presets=new Presets(presetList,this,chat,configLoader);
    setPresets(presets);
    if (chat == null && presets.usesPresetParameters()) {
      printWarning(this,""String_Node_Str"");
    }
 else {
      checkIllegalPresets();
    }
  }
}","/** 
 * Reloads (if reload is TRUE) configurations. There's no need to call this after adding reward providers.
 * @param reload - if TRUE; reload configuration.
 * @throws IOException An I/O error occurred.
 */
public void loadDefaults(boolean reload) throws IOException {
  if (reload || presets == null) {
    informer.clearMessages();
    configLoader.clearCache();
    globalSettings=new GlobalSettings(this);
    globalSettings.loadFromConfig(loadConfig(""String_Node_Str"",""String_Node_Str""));
    Permissions.setGlobalSettings(globalSettings);
    YamlConfiguration presetList=loadConfig(""String_Node_Str"",""String_Node_Str"");
    loadConfig(""String_Node_Str"",""String_Node_Str"");
    presets=new Presets(presetList,this,chat,configLoader);
    setPresets(presets);
    if (chat == null && presets.usesPresetParameters()) {
      printWarning(this,""String_Node_Str"");
    }
 else {
      checkIllegalPresets();
    }
  }
}"
89041,"public static boolean hasRewardCrafting(Player player){
  return !globakSettings.isUsePermissions() || player.hasPermission(REWARDS_CRAFTING);
}","public static boolean hasRewardCrafting(Player player){
  return !globalSettings.isUsePermissions() || player.hasPermission(REWARDS_CRAFTING);
}"
89042,"public static boolean hasKeepExp(Player player){
  return !globakSettings.isUsePermissions() || player.hasPermission(KEEP_EXP);
}","public static boolean hasKeepExp(Player player){
  return !globalSettings.isUsePermissions() || player.hasPermission(KEEP_EXP);
}"
89043,"public static boolean hasRewardBrewing(Player player){
  return !globakSettings.isUsePermissions() || player.hasPermission(REWARDS_BREWING);
}","public static boolean hasRewardBrewing(Player player){
  return !globalSettings.isUsePermissions() || player.hasPermission(REWARDS_BREWING);
}"
89044,"public static boolean hasRewardFishing(Player player){
  return !globakSettings.isUsePermissions() || player.hasPermission(REWARDS_FISHING);
}","public static boolean hasRewardFishing(Player player){
  return !globalSettings.isUsePermissions() || player.hasPermission(REWARDS_FISHING);
}"
89045,"public static boolean hasRewardBlock(Player player){
  return !globakSettings.isUsePermissions() || player.hasPermission(REWARDS_BLOCK);
}","public static boolean hasRewardBlock(Player player){
  return !globalSettings.isUsePermissions() || player.hasPermission(REWARDS_BLOCK);
}"
89046,"public static boolean hasMaxEnchant(Player player){
  return !globakSettings.isUsePermissions() || player.hasPermission(MAX_ENCHANT);
}","public static boolean hasMaxEnchant(Player player){
  return !globalSettings.isUsePermissions() || player.hasPermission(MAX_ENCHANT);
}"
89047,"public static boolean hasRewardSmelting(Player player){
  return !globakSettings.isUsePermissions() || player.hasPermission(REWARDS_SMELTING);
}","public static boolean hasRewardSmelting(Player player){
  return !globalSettings.isUsePermissions() || player.hasPermission(REWARDS_SMELTING);
}"
89048,"public static boolean hasRewardPlacing(Player player){
  return !globakSettings.isUsePermissions() || player.hasPermission(REWARDS_PLACING);
}","public static boolean hasRewardPlacing(Player player){
  return !globalSettings.isUsePermissions() || player.hasPermission(REWARDS_PLACING);
}"
89049,"public static boolean hasUntouchable(Player player){
  return !globakSettings.isUsePermissions() || player.hasPermission(UNOUCHABLE);
}","public static boolean hasUntouchable(Player player){
  return !globalSettings.isUsePermissions() || player.hasPermission(UNOUCHABLE);
}"
89050,"public static boolean hasRewardBonus(Player player){
  return !globakSettings.isUsePermissions() || player.hasPermission(REWARDS_BONUS);
}","public static boolean hasRewardBonus(Player player){
  return !globalSettings.isUsePermissions() || player.hasPermission(REWARDS_BONUS);
}"
89051,"@Override public MobMatcher parse(String text) throws ParsingException {
  if (Utility.isNullOrIgnoreable(text))   throw new ParsingException(""String_Node_Str"");
  Category possibleCategory=MobMatcher.Category.fromName(text);
  EntityType type=EntityType.fromName(text);
  if (possibleCategory == null) {
    if (type == null) {
      throw ParsingException.fromFormat(""String_Node_Str"",text);
    }
 else     if (type != null) {
      if (!type.isAlive())       throw ParsingException.fromFormat(""String_Node_Str"",text);
    }
  }
 else {
    if (possibleCategory == Category.SPECIFIC)     throw ParsingException.fromFormat(""String_Node_Str"");
  }
  if (possibleCategory != null)   return new MobMatcher(possibleCategory);
 else   return new MobMatcher(type);
}","@Override public MobMatcher parse(String text) throws ParsingException {
  if (Utility.isNullOrIgnoreable(text))   throw new ParsingException(""String_Node_Str"");
  Category possibleCategory=MobMatcher.Category.fromName(text);
  Integer mobID=tryParse(text);
  String enumName=Utility.getEnumName(text);
  EntityType type=EntityType.valueOf(enumName);
  if (type == null && possibleCategory == null) {
    if (mobID != null) {
      type=EntityType.fromId(mobID);
      if (type == null)       throw ParsingException.fromFormat(""String_Node_Str"",mobID);
    }
 else {
      type=EntityType.fromName(text);
    }
  }
  if (possibleCategory == null) {
    if (type == null) {
      throw ParsingException.fromFormat(""String_Node_Str"",text);
    }
 else     if (type != null) {
      if (!type.isAlive())       throw ParsingException.fromFormat(""String_Node_Str"",text);
    }
  }
 else {
    if (possibleCategory == Category.SPECIFIC)     throw ParsingException.fromFormat(""String_Node_Str"");
  }
  if (possibleCategory != null)   return new MobMatcher(possibleCategory);
 else   return new MobMatcher(type);
}"
89052,"@Test public void testMerging(){
  Debugger debugger=new MockDebugger();
  RewardProvider provider=new RewardProvider();
  provider.register(new MockRewardable(RewardTypes.EXPERIENCE));
  provider.register(new MockRewardable(RewardTypes.VIRTUAL));
  provider.register(new MockRewardable(RewardTypes.ECONOMY));
  provider.setDefaultReward(RewardTypes.EXPERIENCE);
  String def=""String_Node_Str"";
  ActionParser.setCurrentID(0);
  Configuration first=createConfig(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",debugger,provider);
  Configuration second=createConfig(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",debugger,provider);
  Configuration result=Configuration.fromMultiple(Lists.newArrayList(first,second),debugger);
  MobQuery queryBlace=MobQuery.fromAny(EntityType.BLAZE,DamageCause.ENTITY_ATTACK);
  MobQuery queryZombie=MobQuery.fromAny(EntityType.ZOMBIE,DamageCause.ENTITY_ATTACK);
  Action blaceAction=new Action();
  blaceAction.addReward(def,new Range(5));
  blaceAction.addReward(""String_Node_Str"",new Range(1));
  blaceAction.setMessage(new Message(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Action zombieAction=new Action(def,new Range(0));
  zombieAction.setId(1);
  assertEquals(blaceAction,result.getExperienceDrop().get(queryBlace));
  assertEquals(zombieAction,result.getExperienceDrop().get(queryZombie));
}","@Test public void testMerging(){
  Debugger debugger=new MockDebugger();
  RewardProvider provider=new RewardProvider();
  provider.register(new MockRewardable(RewardTypes.EXPERIENCE));
  provider.register(new MockRewardable(RewardTypes.VIRTUAL));
  provider.register(new MockRewardable(RewardTypes.ECONOMY));
  provider.setDefaultReward(RewardTypes.EXPERIENCE);
  String def=""String_Node_Str"";
  ActionParser.setCurrentID(0);
  Configuration first=createConfig(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",debugger,provider);
  Configuration second=createConfig(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"",debugger,provider);
  Configuration result=Configuration.fromMultiple(Lists.newArrayList(first,second),debugger);
  MobQuery queryBlace=MobQuery.fromAny(EntityType.BLAZE,DamageCause.ENTITY_ATTACK);
  MobQuery queryZombie=MobQuery.fromAny(EntityType.ZOMBIE,DamageCause.ENTITY_ATTACK);
  Action blaceAction=new Action();
  blaceAction.addReward(def,new Range(5));
  blaceAction.addReward(""String_Node_Str"",new Range(1));
  blaceAction.setMessage(new Message(""String_Node_Str"",""String_Node_Str"",""String_Node_Str""));
  Action zombieAction=new Action(def,new Range(0));
  zombieAction.setId(1);
  assertEquals(blaceAction,result.getExperienceDrop().get(queryBlace));
  assertEquals(zombieAction,result.getExperienceDrop().get(queryZombie));
}"
89053,"/** 
 * Handles the given inventory event using the default behavior for the given inventory type.
 * @param event - inventory click event.
 * @param response - block response detailing how to process the inventory.
 */
public void processInventory(InventoryClickEvent event,BlockResponse response){
  if (!BlockResponse.isSuccessful(response))   throw new IllegalArgumentException(""String_Node_Str"");
  if (!response.hasDefaultBehavior())   throw new IllegalArgumentException(""String_Node_Str"");
  Player player=(Player)event.getWhoClicked();
  ItemStack toCraft=response.getOverridableCurrentItem(event);
  InventoryType type=response.getDefaultBehavior();
  if (player.hasPermission(response.getPermission())) {
    return;
  }
  Configuration config=getConfiguration(player);
  if (type == InventoryType.BREWING) {
    if (config == null) {
      if (debugger != null)       debugger.printDebug(this,""String_Node_Str"",player.getName(),toCraft);
      return;
    }
    RewardableAction potionFuture=potionItemReward(config);
    ItemTree simpleTree=config.getActionReward(response.getActionType());
    PotionTree complexTree=config.getComplexReward(response.getActionType());
    if (simpleTree != null)     handleInventory(event,response,simpleTree,potionFuture,true);
 else     debugger.printDebug(this,""String_Node_Str"",response.getActionType());
    if (complexTree != null)     handleInventory(event,response,complexTree.getItemQueryAdaptor(),potionFuture,true);
 else     debugger.printDebug(this,""String_Node_Str"",response.getActionType());
  }
 else {
    if (config != null) {
      RewardableAction itemFuture=genericItemReward(config);
      ItemTree craftingTree=config.getActionReward(response.getActionType());
      handleInventory(event,response,craftingTree,itemFuture,false);
    }
 else     if (debugger != null) {
      debugger.printDebug(this,""String_Node_Str"",player.getName(),toCraft);
    }
  }
}","/** 
 * Handles the given inventory event using the default behavior for the given inventory type.
 * @param event - inventory click event.
 * @param response - block response detailing how to process the inventory.
 */
public void processInventory(InventoryClickEvent event,BlockResponse response){
  if (!BlockResponse.isSuccessful(response))   throw new IllegalArgumentException(""String_Node_Str"");
  if (!response.hasDefaultBehavior())   throw new IllegalArgumentException(""String_Node_Str"");
  Player player=(Player)event.getWhoClicked();
  ItemStack toCraft=response.getOverridableCurrentItem(event);
  InventoryType type=response.getDefaultBehavior();
  if (!player.hasPermission(response.getPermission())) {
    debugger.printDebug(this,""String_Node_Str"",response.getPermission(),response.getActionType());
    return;
  }
  Configuration config=getConfiguration(player);
  if (type == InventoryType.BREWING) {
    if (config == null) {
      if (debugger != null)       debugger.printDebug(this,""String_Node_Str"",player.getName(),toCraft);
      return;
    }
    RewardableAction potionFuture=potionItemReward(config);
    ItemTree simpleTree=config.getActionReward(response.getActionType());
    PotionTree complexTree=config.getComplexReward(response.getActionType());
    if (simpleTree != null)     handleInventory(event,response,simpleTree,potionFuture,true);
 else     debugger.printDebug(this,""String_Node_Str"",response.getActionType());
    if (complexTree != null)     handleInventory(event,response,complexTree.getItemQueryAdaptor(),potionFuture,true);
 else     debugger.printDebug(this,""String_Node_Str"",response.getActionType());
  }
 else {
    boolean partial=(type == InventoryType.FURNACE);
    if (config != null) {
      RewardableAction itemFuture=genericItemReward(config);
      ItemTree craftingTree=config.getActionReward(response.getActionType());
      handleInventory(event,response,craftingTree,itemFuture,partial);
    }
 else     if (debugger != null) {
      debugger.printDebug(this,""String_Node_Str"",player.getName(),toCraft);
    }
  }
}"
89054,"private void loadItemActions(ConfigurationSection config){
  if (config == null)   return;
  for (  String key : config.getKeys(false)) {
    try {
      Query item=itemParser.parse(key);
      ConfigurationSection itemSection=config.getConfigurationSection(key);
      Types queryType=item.getQueryType();
      for (      String action : itemSection.getKeys(false)) {
        Integer type=actionTypes.getType(action);
        if (type == null) {
          if (action.equalsIgnoreCase(""String_Node_Str"") || action.equalsIgnoreCase(""String_Node_Str"")) {
            logger.printWarning(this,""String_Node_Str"");
          }
 else {
            logger.printWarning(this,""String_Node_Str"",action,key);
          }
          break;
        }
switch (queryType) {
case Items:
          loadActionOnItem(itemSection,action,item,getActionReward(type),queryType);
case Potions:
        loadActionOnItem(itemSection,action,item,getComplexReward(type),queryType);
    }
  }
}
 catch (ParsingException ex) {
  logger.printWarning(this,""String_Node_Str"",key,ex.getMessage());
}
}
}","private void loadItemActions(ConfigurationSection config){
  if (config == null)   return;
  for (  String key : config.getKeys(false)) {
    try {
      Query item=itemParser.parse(key);
      ConfigurationSection itemSection=config.getConfigurationSection(key);
      Types queryType=item.getQueryType();
      for (      String action : itemSection.getKeys(false)) {
        Integer type=actionTypes.getType(action);
        if (type == null) {
          if (action.equalsIgnoreCase(""String_Node_Str"") || action.equalsIgnoreCase(""String_Node_Str"")) {
            logger.printWarning(this,""String_Node_Str"");
          }
 else {
            logger.printWarning(this,""String_Node_Str"",action,key);
          }
          break;
        }
switch (queryType) {
case Items:
          loadActionOnItem(itemSection,action,item,getActionReward(type),queryType);
        break;
case Potions:
      loadActionOnItem(itemSection,action,item,getComplexReward(type),queryType);
    break;
}
}
}
 catch (ParsingException ex) {
logger.printWarning(this,""String_Node_Str"",key,ex.getMessage());
}
}
}"
89055,"public static boolean hasMaxEnchant(Player player){
  return player.hasPermission(permissionMaxEnchant);
}","public static boolean hasMaxEnchant(Player player){
  return player.hasPermission(MAX_ENCHANT);
}"
89056,"public static boolean hasRewardSmelting(Player player){
  return player.hasPermission(permissionRewardSmelting);
}","public static boolean hasRewardSmelting(Player player){
  return player.hasPermission(REWARDS_SMELTING);
}"
89057,"public static boolean hasRewardPlacing(Player player){
  return player.hasPermission(permissionRewardPlacing);
}","public static boolean hasRewardPlacing(Player player){
  return player.hasPermission(REWARDS_PLACING);
}"
89058,"public static boolean hasRewardCrafting(Player player){
  return player.hasPermission(permissionRewardCrafting);
}","public static boolean hasRewardCrafting(Player player){
  return player.hasPermission(REWARDS_CRAFTING);
}"
89059,"public static boolean hasKeepExp(Player player){
  return player.hasPermission(permissionKeepExp);
}","public static boolean hasKeepExp(Player player){
  return player.hasPermission(KEEP_EXP);
}"
89060,"public static boolean hasRewardBrewing(Player player){
  return player.hasPermission(permissionRewardBrewing);
}","public static boolean hasRewardBrewing(Player player){
  return player.hasPermission(REWARDS_BREWING);
}"
89061,"public static boolean hasUntouchable(Player player){
  return player.hasPermission(permissionUntouchable);
}","public static boolean hasUntouchable(Player player){
  return player.hasPermission(UNOUCHABLE);
}"
89062,"public static boolean hasRewardFishing(Player player){
  return player.hasPermission(permissionRewardFishing);
}","public static boolean hasRewardFishing(Player player){
  return player.hasPermission(REWARDS_FISHING);
}"
89063,"public static boolean hasRewardBonus(Player player){
  return player.hasPermission(permissionRewardBonus);
}","public static boolean hasRewardBonus(Player player){
  return player.hasPermission(REWARDS_BONUS);
}"
89064,"public static boolean hasRewardBlock(Player player){
  return player.hasPermission(permissionRewardBlock);
}","public static boolean hasRewardBlock(Player player){
  return player.hasPermission(REWARDS_BLOCK);
}"
89065,"@Override public BlockResponse processClickEvent(InventoryClickEvent event,ItemQuery block){
  boolean isCraftResult=event.getSlotType() == SlotType.RESULT;
  boolean isPotionResult=event.getSlot() < 3;
  InventoryType type=event.getInventory().getType();
  ItemStack toCraft=event.getCurrentItem();
  if (!ItemQuery.hasItems(toCraft))   return BlockResponse.FAILURE;
switch (type) {
case BREWING:
    if (isPotionResult && block.match(Material.BREWING_STAND)) {
      return new BlockResponse(type,ActionTypes.BREWING,Permissions.permissionRewardBrewing);
    }
case CRAFTING:
  if (isCraftResult) {
    return new BlockResponse(type,ActionTypes.CRAFTING,Permissions.permissionRewardCrafting);
  }
case WORKBENCH:
if (isCraftResult && block.match(Material.WORKBENCH)) {
  return new BlockResponse(type,ActionTypes.CRAFTING,Permissions.permissionRewardCrafting);
}
case FURNACE:
if (isCraftResult && (block.match(Material.FURNACE) || block.match(Material.BURNING_FURNACE))) {
return new BlockResponse(type,ActionTypes.SMELTING,Permissions.permissionRewardSmelting);
}
}
return BlockResponse.FAILURE;
}","@Override public BlockResponse processClickEvent(InventoryClickEvent event,ItemQuery block){
  boolean isCraftResult=event.getSlotType() == SlotType.RESULT;
  boolean isPotionResult=event.getSlot() < 3;
  InventoryType type=event.getInventory().getType();
  ItemStack toCraft=event.getCurrentItem();
  if (!ItemQuery.hasItems(toCraft))   return BlockResponse.FAILURE;
switch (type) {
case BREWING:
    if (isPotionResult && block.match(Material.BREWING_STAND)) {
      return new BlockResponse(type,ActionTypes.BREWING,Permissions.REWARDS_BREWING);
    }
case CRAFTING:
  if (isCraftResult) {
    return new BlockResponse(type,ActionTypes.CRAFTING,Permissions.REWARDS_CRAFTING);
  }
case WORKBENCH:
if (isCraftResult && block.match(Material.WORKBENCH)) {
  return new BlockResponse(type,ActionTypes.CRAFTING,Permissions.REWARDS_CRAFTING);
}
case FURNACE:
if (isCraftResult && (block.match(Material.FURNACE) || block.match(Material.BURNING_FURNACE))) {
return new BlockResponse(type,ActionTypes.SMELTING,Permissions.REWARDS_SMELTING);
}
}
return BlockResponse.FAILURE;
}"
89066,"@Override public void run(){
  final ItemStack[] postInv=player.getInventory().getContents();
  int newItemsCount=0;
  for (int i=0; i < preInv.length; i++) {
    ItemStack pre=preInv[i];
    ItemStack post=postInv[i];
    if (hasSameItem(compareItem,post) && (hasSameItem(compareItem,pre) || pre == null)) {
      newItemsCount+=post.getAmount() - (pre != null ? pre.getAmount() : 0);
    }
  }
  if (newItemsCount > 0) {
    int exp=action.rewardPlayer(provider,random,player,newItemsCount);
    action.emoteMessages(channelsProvider,channelsProvider.getFormatter(player,exp),player);
    if (debugger != null)     debugger.printDebug(this,""String_Node_Str"",player.getName(),permissionRewardCrafting,exp,newItemsCount,compareItem.getType());
  }
}","@Override public void run(){
  final ItemStack[] postInv=player.getInventory().getContents();
  int newItemsCount=0;
  for (int i=0; i < preInv.length; i++) {
    ItemStack pre=preInv[i];
    ItemStack post=postInv[i];
    if (hasSameItem(compareItem,post) && (hasSameItem(compareItem,pre) || pre == null)) {
      newItemsCount+=post.getAmount() - (pre != null ? pre.getAmount() : 0);
    }
  }
  if (newItemsCount > 0) {
    int exp=action.rewardPlayer(provider,random,player,newItemsCount);
    action.emoteMessages(channelsProvider,channelsProvider.getFormatter(player,exp),player);
    if (debugger != null)     debugger.printDebug(this,""String_Node_Str"",player.getName(),exp,newItemsCount,compareItem.getType());
  }
}"
89067,"private void schedulePostCraftingReward(final Player player,final RewardProvider provider,final ChannelProvider channelsProvider,final Action action,final ItemStack compareItem){
  final ItemStack[] preInv=player.getInventory().getContents();
  final int ticks=1;
  for (int i=0; i < preInv.length; i++) {
    preInv[i]=preInv[i] != null ? preInv[i].clone() : null;
  }
  Bukkit.getScheduler().scheduleSyncDelayedTask(parentPlugin,new Runnable(){
    @Override public void run(){
      final ItemStack[] postInv=player.getInventory().getContents();
      int newItemsCount=0;
      for (int i=0; i < preInv.length; i++) {
        ItemStack pre=preInv[i];
        ItemStack post=postInv[i];
        if (hasSameItem(compareItem,post) && (hasSameItem(compareItem,pre) || pre == null)) {
          newItemsCount+=post.getAmount() - (pre != null ? pre.getAmount() : 0);
        }
      }
      if (newItemsCount > 0) {
        int exp=action.rewardPlayer(provider,random,player,newItemsCount);
        action.emoteMessages(channelsProvider,channelsProvider.getFormatter(player,exp),player);
        if (debugger != null)         debugger.printDebug(this,""String_Node_Str"",player.getName(),permissionRewardCrafting,exp,newItemsCount,compareItem.getType());
      }
    }
  }
,ticks);
}","private void schedulePostCraftingReward(final Player player,final RewardProvider provider,final ChannelProvider channelsProvider,final Action action,final ItemStack compareItem){
  final ItemStack[] preInv=player.getInventory().getContents();
  final int ticks=1;
  for (int i=0; i < preInv.length; i++) {
    preInv[i]=preInv[i] != null ? preInv[i].clone() : null;
  }
  Bukkit.getScheduler().scheduleSyncDelayedTask(parentPlugin,new Runnable(){
    @Override public void run(){
      final ItemStack[] postInv=player.getInventory().getContents();
      int newItemsCount=0;
      for (int i=0; i < preInv.length; i++) {
        ItemStack pre=preInv[i];
        ItemStack post=postInv[i];
        if (hasSameItem(compareItem,post) && (hasSameItem(compareItem,pre) || pre == null)) {
          newItemsCount+=post.getAmount() - (pre != null ? pre.getAmount() : 0);
        }
      }
      if (newItemsCount > 0) {
        int exp=action.rewardPlayer(provider,random,player,newItemsCount);
        action.emoteMessages(channelsProvider,channelsProvider.getFormatter(player,exp),player);
        if (debugger != null)         debugger.printDebug(this,""String_Node_Str"",player.getName(),exp,newItemsCount,compareItem.getType());
      }
    }
  }
,ticks);
}"
89068,"/** 
 * Returns a shallow copy of this object with a different experience multiplier.
 * @param - newMultiplier New multiplier value.
 * @return Shallow copy of this object.
 */
public T withMultiplier(double newMultiplier);","/** 
 * Returns a shallow copy of this object with a different experience multiplier.
 * @param newMultiplier - New multiplier value.
 * @return Shallow copy of this object.
 */
public T withMultiplier(double newMultiplier);"
89069,"/** 
 * Creates a copy of this channel provider with shallow references to the same list of channel services, except with a different internal default reward type. 
 * @param config Configuration settings for the different services.
 * @return A shallow copy of this reward service provider.
 */
public ChannelProvider createView(){
  return new ChannelProvider(this);
}","/** 
 * Creates a copy of this channel provider with shallow references to the same list of channel services, except with a different internal default reward type. 
 * @return A shallow copy of this reward service provider.
 */
public ChannelProvider createView(){
  return new ChannelProvider(this);
}"
89070,"/** 
 * Retrieves the specific or single entity type of this matcher.
 * @return
 */
public EntityType getSpecific(){
  return specific;
}","/** 
 * Retrieves the specific or single entity type of this matcher.
 */
public EntityType getSpecific(){
  return specific;
}"
89071,"/** 
 * Whether or not the player actually can be rewarded (or penalized, if negative)  with the given amount of resources.
 * @param player - player to test.
 * @param amount - amount of resources to given or take away.
 * @return
 */
public boolean canReward(Player player,int amount);","/** 
 * Whether or not the player actually can be rewarded (or penalized, if negative)  with the given amount of resources.
 * @param player - player to test.
 * @param amount - amount of resources to given or take away.
 */
public boolean canReward(Player player,int amount);"
89072,"@Override public void onEnable(){
  RewardEconomy rewardEconomy;
  manager=getServer().getPluginManager();
  currentLogger=this.getLogger();
  informer=new ExperienceInformer();
  commandExperienceMod=new CommandExperienceMod(this);
  commandSpawn=new CommandSpawnExp(this);
  rewardProvider=new RewardProvider();
  channelProvider=new ChannelProvider();
  if (!hasEconomy())   economy=getRegistration(Economy.class);
  if (!hasChat())   chat=getRegistration(Chat.class);
  rewardProvider.register(new RewardExperience(),true);
  rewardProvider.register(new RewardVirtual(),true);
  rewardProvider.setDefaultReward(RewardTypes.EXPERIENCE);
  channelProvider.register(new HeroService(),true);
  if (hasEconomy()) {
    itemListener=new ItemRewardListener(this);
    rewardEconomy=new RewardEconomy(economy,this,itemListener);
    rewardProvider.register(rewardEconomy,true);
    itemListener.setReward(rewardEconomy);
    manager.registerEvents(itemListener,this);
  }
  try {
    loadDefaults(false);
    manager.registerEvents(listener,this);
    manager.registerEvents(informer,this);
  }
 catch (  IOException e) {
    currentLogger.severe(""String_Node_Str"" + e.getMessage());
  }
  getCommand(commandReload).setExecutor(commandExperienceMod);
  getCommand(commandSpawnExp).setExecutor(commandSpawn);
}","@Override public void onEnable(){
  RewardEconomy rewardEconomy;
  manager=getServer().getPluginManager();
  currentLogger=this.getLogger();
  informer=new ExperienceInformer();
  commandExperienceMod=new CommandExperienceMod(this);
  commandSpawn=new CommandSpawnExp(this);
  rewardProvider=new RewardProvider();
  channelProvider=new ChannelProvider();
  if (!hasEconomy())   economy=getRegistration(Economy.class);
  if (!hasChat())   chat=getRegistration(Chat.class);
  rewardProvider.register(new RewardExperience());
  rewardProvider.register(new RewardVirtual());
  rewardProvider.setDefaultReward(RewardTypes.EXPERIENCE);
  channelProvider.register(new HeroService());
  channelProvider.setDefaultService(HeroService.NAME);
  if (hasEconomy()) {
    itemListener=new ItemRewardListener(this);
    rewardEconomy=new RewardEconomy(economy,this,itemListener);
    rewardProvider.register(rewardEconomy);
    itemListener.setReward(rewardEconomy);
    manager.registerEvents(itemListener,this);
  }
  try {
    loadDefaults(false);
    manager.registerEvents(listener,this);
    manager.registerEvents(informer,this);
  }
 catch (  IOException e) {
    currentLogger.severe(""String_Node_Str"" + e.getMessage());
  }
  getCommand(commandReload).setExecutor(commandExperienceMod);
  getCommand(commandSpawnExp).setExecutor(commandSpawn);
}"
89073,"/** 
 * Determines whether or not the given service has been registered.
 * @param serviceName - name of the service to find.
 * @return TRUE if it has, FALSE otherwise.
 */
public boolean containsService(String serviceName){
  if (serviceName.equalsIgnoreCase(defaultService))   return nameLookup.containsKey(getDefaultService());
  return nameLookup.containsKey(serviceName);
}","/** 
 * Determines whether or not the given service has been registered.
 * @param serviceName - name of the service to find.
 * @return TRUE if it has, FALSE otherwise.
 */
public boolean containsService(String serviceName){
  if (serviceName.equalsIgnoreCase(defaultServiceName))   return nameLookup.containsKey(getDefaultService());
  return nameLookup.containsKey(serviceName);
}"
89074,"/** 
 * Registers a service in the system.
 * @param service - the service to register.
 * @param setDefault - TRUE to make this service default if the registration is successful. 
 * @return The previously registered service with this name, or NULL otherwise.
 * @throws NullArgumentException If service is null.
 */
public TService register(TService service,boolean setDefault){
  if (service == null)   throw new NullArgumentException(""String_Node_Str"");
  String name=service.getServiceName();
  if (name.equalsIgnoreCase(defaultService))   throw new IllegalArgumentException(""String_Node_Str"");
  TService result=setByName(name,service);
  if (result != null) {
    setDefaultService(name);
  }
  return result;
}","/** 
 * Registers a service in the system.
 * @param service - the service to register.
 * @return The previously registered service with this name, or NULL otherwise.
 * @throws NullArgumentException If service is null.
 */
public TService register(TService service){
  if (service == null)   throw new NullArgumentException(""String_Node_Str"");
  String name=service.getServiceName();
  if (name.equalsIgnoreCase(defaultServiceName))   throw new IllegalArgumentException(""String_Node_Str"");
  return setByName(name,service);
}"
89075,"@Override public String getServiceName(){
  return ""String_Node_Str"";
}","@Override public String getServiceName(){
  return NAME;
}"
89076,"@Override public RewardService register(RewardService reward,boolean setDefault){
  if (reward == null)   throw new NullArgumentException(""String_Node_Str"");
  RewardTypes type=reward.getRewardType();
  if (type != RewardTypes.CUSTOM) {
    enumLookup.put(type,reward);
  }
 else   if (type == RewardTypes.DEFAULT) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return super.register(reward,setDefault);
}","@Override public RewardService register(RewardService reward){
  if (reward == null)   throw new NullArgumentException(""String_Node_Str"");
  RewardTypes type=reward.getRewardType();
  if (type != RewardTypes.CUSTOM) {
    enumLookup.put(type,reward);
  }
 else   if (type == RewardTypes.DEFAULT) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  return super.register(reward);
}"
89077,"@Test public void testMerging(){
  Debugger debugger=new MockDebugger();
  RewardProvider provider=new RewardProvider();
  provider.register(new MockRewardable(RewardTypes.EXPERIENCE),false);
  provider.register(new MockRewardable(RewardTypes.VIRTUAL),false);
  provider.register(new MockRewardable(RewardTypes.ECONOMY),false);
  provider.setDefaultReward(RewardTypes.EXPERIENCE);
  String def=""String_Node_Str"";
  Configuration first=createConfig(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",debugger,provider);
  Configuration second=createConfig(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",debugger,provider);
  Configuration result=Configuration.fromMultiple(Lists.newArrayList(first,second),debugger);
  MobQuery queryBlace=MobQuery.fromAny(EntityType.BLAZE,DamageCause.ENTITY_ATTACK);
  MobQuery queryZombie=MobQuery.fromAny(EntityType.ZOMBIE,DamageCause.ENTITY_ATTACK);
  Action blaceAction=new Action();
  blaceAction.addReward(def,new Range(5));
  blaceAction.addReward(""String_Node_Str"",new Range(1));
  Action zombieAction=new Action(def,new Range(0));
  assertEquals(blaceAction,result.getExperienceDrop().get(queryBlace));
  assertEquals(zombieAction,result.getExperienceDrop().get(queryZombie));
}","@Test public void testMerging(){
  Debugger debugger=new MockDebugger();
  RewardProvider provider=new RewardProvider();
  provider.register(new MockRewardable(RewardTypes.EXPERIENCE));
  provider.register(new MockRewardable(RewardTypes.VIRTUAL));
  provider.register(new MockRewardable(RewardTypes.ECONOMY));
  provider.setDefaultReward(RewardTypes.EXPERIENCE);
  String def=""String_Node_Str"";
  Configuration first=createConfig(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"",debugger,provider);
  Configuration second=createConfig(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"",debugger,provider);
  Configuration result=Configuration.fromMultiple(Lists.newArrayList(first,second),debugger);
  MobQuery queryBlace=MobQuery.fromAny(EntityType.BLAZE,DamageCause.ENTITY_ATTACK);
  MobQuery queryZombie=MobQuery.fromAny(EntityType.ZOMBIE,DamageCause.ENTITY_ATTACK);
  Action blaceAction=new Action();
  blaceAction.addReward(def,new Range(5));
  blaceAction.addReward(""String_Node_Str"",new Range(1));
  Action zombieAction=new Action(def,new Range(0));
  assertEquals(blaceAction,result.getExperienceDrop().get(queryBlace));
  assertEquals(zombieAction,result.getExperienceDrop().get(queryZombie));
}"
89078,"private String getSafe(String[] args,int index){
  return args.length > 0 ? args[0] : ""String_Node_Str"";
}","private String getSafe(String[] args,int index){
  return args.length > index ? args[index] : ""String_Node_Str"";
}"
89079,"@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockBreakEvent(PlayerLoginEvent event){
  Player player=event.getPlayer();
  if (event != null && player != null) {
    displayWarnings(player);
  }
}","@EventHandler(priority=EventPriority.HIGH,ignoreCancelled=true) public void onBlockBreakEvent(PlayerLoginEvent event){
  Player player=event.getPlayer();
  if (player != null) {
    displayWarnings(player);
  }
}"
89080,"@Override public void printWarning(Object sender,String message,Object... params){
  String warningMessage=Color.RED + ""String_Node_Str"" + message;
  currentLogger.warning(String.format(warningMessage,params));
  informer.addWarningMessage(String.format(message,params));
}","@Override public void printWarning(Object sender,String message,Object... params){
  String warningMessage=ChatColor.RED + ""String_Node_Str"" + message;
  currentLogger.warning(String.format(warningMessage,params));
  informer.addWarningMessage(String.format(message,params));
}"
89081,"private void loadFromConfig(FileConfiguration config){
  experienceDrop=new MobTree();
  simpleBlockReward=new ItemTree();
  simpleBonusReward=new ItemTree();
  simplePlacingReward=new ItemTree();
  simpleSmeltingReward=new ItemTree();
  simpleCraftingReward=new ItemTree();
  simpleBrewingReward=new ItemTree();
  complexBrewingReward=new PotionTree();
  if (config.isDouble(multiplierSetting))   multiplier=config.getDouble(multiplierSetting,1);
 else   multiplier=config.getInt(multiplierSetting,1);
  defaultRewardsDisabled=config.getBoolean(defaultRewardsSetting,true);
  loadMobs(config.getConfigurationSection(""String_Node_Str""));
  loadItemActions(config.getConfigurationSection(""String_Node_Str""));
}","private void loadFromConfig(FileConfiguration config){
  experienceDrop=new MobTree();
  simpleBlockReward=new ItemTree();
  simpleBonusReward=new ItemTree();
  simplePlacingReward=new ItemTree();
  simpleSmeltingReward=new ItemTree();
  simpleCraftingReward=new ItemTree();
  simpleBrewingReward=new ItemTree();
  complexBrewingReward=new PotionTree();
  if (config.isDouble(multiplierSetting))   multiplier=config.getDouble(multiplierSetting,1);
 else   multiplier=config.getInt(multiplierSetting,1);
  defaultRewardsDisabled=config.getBoolean(defaultRewardsSetting,true);
  rewardType=loadReward(config.getString(rewardTypeSetting));
  loadMobs(config.getConfigurationSection(""String_Node_Str""));
  loadItemActions(config.getConfigurationSection(""String_Node_Str""));
}"
89082,"private void loadDefaults(){
  FileConfiguration config=getConfig();
  File path=new File(getDataFolder(),""String_Node_Str"");
  if (!path.exists()) {
    config.options().copyDefaults(true);
    saveConfig();
    currentLogger.info(""String_Node_Str"");
  }
  configuration=new Configuration(config,currentLogger);
}","private void loadDefaults(){
  FileConfiguration config=getConfig();
  File path=new File(getDataFolder(),""String_Node_Str"");
  if (!path.exists()) {
    config.options().copyDefaults(true);
    saveConfig();
    currentLogger.info(""String_Node_Str"");
  }
  configuration=new Configuration(config,currentLogger);
  listener.setConfiguration(configuration);
switch (configuration.getRewardType()) {
case EXPERIENCE:
    listener.setRewardManager(new RewardExperience());
default :
  currentLogger.warning(""String_Node_Str"");
break;
}
}"
89083,"public static void spawnExperience(World world,Location corner,int amount){
  int xpSplit=getXPSplit(Math.abs(amount));
  int sign=amount > 0 ? 1 : -1;
  for (int current=0; current < amount; current+=xpSplit) {
    ExperienceOrb orb=world.spawn(corner,ExperienceOrb.class);
    orb.setExperience(sign * Math.min(amount - current,xpSplit));
  }
}","public static void spawnExperience(World world,Location corner,int amount){
  int xpSplit=getXPSplit(amount);
  if (amount < 0)   return;
  for (int current=0; current < amount; current+=xpSplit) {
    ExperienceOrb orb=world.spawn(corner,ExperienceOrb.class);
    orb.setExperience(Math.min(amount - current,xpSplit));
  }
}"
89084,"@EventHandler(priority=EventPriority.HIGHEST,ignoreCancelled=true) public void onEntityDeathEvent(EntityDeathEvent event){
  LivingEntity entity=event.getEntity();
  if (entity != null && entity.getKiller() != null) {
    Integer id=entity.getEntityId();
    MobQuery query=new MobQuery(entity,spawnReasonLookup.get(id));
    Range reward=configuration.getExperienceDrop().get(query);
    if (reward != null) {
      int xp=reward.sampleInt(random);
      event.setDroppedExp(xp);
      parentPlugin.printDebug(""String_Node_Str"" + id + ""String_Node_Str""+ xp);
    }
 else     if (configuration.isDefaultRewardsDisabled()) {
      event.setDroppedExp(0);
      parentPlugin.printDebug(""String_Node_Str"" + id + ""String_Node_Str"");
    }
 else     if (!configuration.isDefaultRewardsDisabled()) {
      int expDropped=event.getDroppedExp();
      if (configuration.getMultiplier() != 1) {
        Range increase=new Range(expDropped * configuration.getMultiplier());
        int expChanged=increase.sampleInt(random);
        parentPlugin.printDebug(""String_Node_Str"" + id + ""String_Node_Str""+ expChanged);
        event.setDroppedExp(expChanged);
      }
    }
    spawnReasonLookup.remove(id);
  }
}","@EventHandler(priority=EventPriority.HIGHEST,ignoreCancelled=true) public void onEntityDeathEvent(EntityDeathEvent event){
  LivingEntity entity=event.getEntity();
  boolean hasKiller=entity.getKiller() != null;
  if (entity != null) {
    Integer id=entity.getEntityId();
    MobQuery query=new MobQuery(entity,spawnReasonLookup.get(id));
    Range reward=configuration.getExperienceDrop().get(query);
    if (reward != null) {
      int xp=reward.sampleInt(random);
      event.setDroppedExp(xp);
      parentPlugin.printDebug(""String_Node_Str"" + id + ""String_Node_Str""+ xp);
    }
 else     if (configuration.isDefaultRewardsDisabled() && hasKiller) {
      event.setDroppedExp(0);
      parentPlugin.printDebug(""String_Node_Str"" + id + ""String_Node_Str"");
    }
 else     if (!configuration.isDefaultRewardsDisabled() && hasKiller) {
      int expDropped=event.getDroppedExp();
      if (configuration.getMultiplier() != 1) {
        Range increase=new Range(expDropped * configuration.getMultiplier());
        int expChanged=increase.sampleInt(random);
        parentPlugin.printDebug(""String_Node_Str"" + id + ""String_Node_Str""+ expChanged);
        event.setDroppedExp(expChanged);
      }
    }
    spawnReasonLookup.remove(id);
  }
}"
89085,"public void detachServicePolicy(String policyMap,String portProfile) throws CloudRuntimeException {
  String command=VsmCommand.getServicePolicy(policyMap,portProfile,false);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void detachServicePolicy(String policyMap,String portProfile) throws CloudRuntimeException {
  String command=VsmCommand.getServicePolicy(policyMap,portProfile,false);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    parseOkReply(sendAndReceive(command));
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}"
89086,"public void attachServicePolicy(String policyMap,String portProfile) throws CloudRuntimeException {
  String command=VsmCommand.getServicePolicy(policyMap,portProfile,true);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void attachServicePolicy(String policyMap,String portProfile) throws CloudRuntimeException {
  String command=VsmCommand.getServicePolicy(policyMap,portProfile,true);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    parseOkReply(sendAndReceive(command));
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}"
89087,"public void addPortProfile(String name,PortProfileType type,BindingType binding,SwitchPortMode mode,int vlanid) throws CloudRuntimeException {
  String command=VsmCommand.getAddPortProfile(name,type,binding,mode,vlanid);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    for (int i=0; i < s_retryCount; ++i) {
      send(command);
      VsmOkResponse response=new VsmOkResponse(receive().trim());
      if (!response.isResponseOk()) {
        if (i >= s_retryCount) {
          throw new CloudRuntimeException(response.toString());
        }
        try {
          Thread.sleep(1000);
        }
 catch (        final InterruptedException e) {
          s_logger.debug(""String_Node_Str"");
        }
      }
 else {
        break;
      }
    }
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void addPortProfile(String name,PortProfileType type,BindingType binding,SwitchPortMode mode,int vlanid) throws CloudRuntimeException {
  String command=VsmCommand.getAddPortProfile(name,type,binding,mode,vlanid);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    parseOkReply(sendAndReceive(command));
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}"
89088,"public PortProfile getPortProfileByName(String name) throws CloudRuntimeException {
  String command=VsmCommand.getPortProfile(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    String received=receive();
    VsmPortProfileResponse response=new VsmPortProfileResponse(received.trim());
    if (!response.isResponseOk()) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
 else {
      return response.getPortProfile();
    }
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public PortProfile getPortProfileByName(String name) throws CloudRuntimeException {
  String command=VsmCommand.getPortProfile(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    String received=sendAndReceive(command);
    VsmPortProfileResponse response=new VsmPortProfileResponse(received.trim());
    if (!response.isResponseOk()) {
      throw new CloudRuntimeException(response.toString());
    }
 else {
      return response.getPortProfile();
    }
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}"
89089,"public PolicyMap getPolicyMapByName(String name) throws CloudRuntimeException {
  String command=VsmCommand.getPolicyMap(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    String received=receive();
    VsmPolicyMapResponse response=new VsmPolicyMapResponse(received.trim());
    if (!response.isResponseOk()) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
 else {
      return response.getPolicyMap();
    }
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public PolicyMap getPolicyMapByName(String name) throws CloudRuntimeException {
  String command=VsmCommand.getPolicyMap(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    String received=sendAndReceive(command);
    VsmPolicyMapResponse response=new VsmPolicyMapResponse(received.trim());
    if (!response.isResponseOk()) {
      throw new CloudRuntimeException(response.toString());
    }
 else {
      return response.getPolicyMap();
    }
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}"
89090,"public void deletePolicyMap(String name) throws CloudRuntimeException {
  String command=VsmCommand.getDeletePolicyMap(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void deletePolicyMap(String name) throws CloudRuntimeException {
  String command=VsmCommand.getDeletePolicyMap(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    parseOkReply(sendAndReceive(command));
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}"
89091,"public void addPolicyMap(String name,int averageRate,int maxRate,int burstRate) throws CloudRuntimeException {
  String command=VsmCommand.getAddPolicyMap(name,averageRate,maxRate,burstRate);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void addPolicyMap(String name,int averageRate,int maxRate,int burstRate) throws CloudRuntimeException {
  String command=VsmCommand.getAddPolicyMap(name,averageRate,maxRate,burstRate);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    parseOkReply(sendAndReceive(command));
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}"
89092,"public void deletePortProfile(String name) throws CloudRuntimeException {
  String command=VsmCommand.getDeletePortProfile(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void deletePortProfile(String name) throws CloudRuntimeException {
  String command=VsmCommand.getDeletePortProfile(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    parseOkReply(sendAndReceive(command));
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}"
89093,"public void updatePortProfile(String name,SwitchPortMode mode,List<Pair<VsmCommand.OperationType,String>> params) throws CloudRuntimeException {
  String command=VsmCommand.getUpdatePortProfile(name,mode,params);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void updatePortProfile(String name,SwitchPortMode mode,List<Pair<VsmCommand.OperationType,String>> params) throws CloudRuntimeException {
  String command=VsmCommand.getUpdatePortProfile(name,mode,params);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    parseOkReply(sendAndReceive(command));
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}"
89094,"private static Element policyMapDetails(Document doc,String name,int averageRate,int maxRate,int burstRate){
  Element configure=doc.createElementNS(s_ciscons,""String_Node_Str"");
  Element modeConfigure=doc.createElement(""String_Node_Str"" + s_configuremode);
  configure.appendChild(modeConfigure);
  Element policyMap=doc.createElement(""String_Node_Str"");
  modeConfigure.appendChild(policyMap);
  Element policyDetails=doc.createElement(""String_Node_Str"");
  policyMap.appendChild(policyDetails);
  Element value=doc.createElement(s_paramvalue);
  value.setAttribute(""String_Node_Str"",""String_Node_Str"");
  value.setTextContent(name);
  policyDetails.appendChild(value);
  Element policyMapMode=doc.createElement(s_policymapmode);
  policyDetails.appendChild(policyMapMode);
  Element classRoot=doc.createElement(""String_Node_Str"");
  Element classDefault=doc.createElement(""String_Node_Str"");
  policyMapMode.appendChild(classRoot);
  classRoot.appendChild(classDefault);
  Element classMode=doc.createElement(s_classtypemode);
  classDefault.appendChild(classMode);
  Element police=doc.createElement(""String_Node_Str"");
  classMode.appendChild(police);
  Element cir=doc.createElement(""String_Node_Str"");
  police.appendChild(cir);
  Element cirValue=doc.createElement(s_paramvalue);
  Element mbps=doc.createElement(""String_Node_Str"");
  cirValue.setTextContent(Integer.toString(averageRate));
  cir.appendChild(cirValue);
  cir.appendChild(mbps);
  modeConfigure.appendChild(persistConfiguration(doc));
  return configure;
}","private static Element policyMapDetails(Document doc,String name,int averageRate,int maxRate,int burstRate){
  Element configure=doc.createElementNS(s_ciscons,""String_Node_Str"");
  Element modeConfigure=doc.createElement(""String_Node_Str"" + s_configuremode);
  configure.appendChild(modeConfigure);
  Element policyMap=doc.createElement(""String_Node_Str"");
  modeConfigure.appendChild(policyMap);
  Element policyDetails=doc.createElement(""String_Node_Str"");
  policyMap.appendChild(policyDetails);
  Element value=doc.createElement(s_paramvalue);
  value.setAttribute(""String_Node_Str"",""String_Node_Str"");
  value.setTextContent(name);
  policyDetails.appendChild(value);
  Element policyMapMode=doc.createElement(s_policymapmode);
  policyDetails.appendChild(policyMapMode);
  Element classRoot=doc.createElement(""String_Node_Str"");
  Element classDefault=doc.createElement(""String_Node_Str"");
  policyMapMode.appendChild(classRoot);
  classRoot.appendChild(classDefault);
  Element classMode=doc.createElement(s_classtypemode);
  classDefault.appendChild(classMode);
  Element police=doc.createElement(""String_Node_Str"");
  classMode.appendChild(police);
  Element cir=doc.createElement(""String_Node_Str"");
  police.appendChild(cir);
  Element cirValue=doc.createElement(""String_Node_Str"");
  cir.appendChild(cirValue);
  Element value2=doc.createElement(s_paramvalue);
  Element mbps=doc.createElement(""String_Node_Str"");
  value2.setTextContent(Integer.toString(averageRate));
  cirValue.appendChild(value2);
  cirValue.appendChild(mbps);
  modeConfigure.appendChild(persistConfiguration(doc));
  return configure;
}"
89095,"private String receive(){
  byte[] buffer=new byte[8192];
  InputStream inputStream=_session.getStdout();
  try {
    while (true) {
      if (inputStream.available() == 0) {
        int conditions=_session.waitForCondition(ChannelCondition.STDOUT_DATA | ChannelCondition.STDERR_DATA | ChannelCondition.EOF,3000);
        if ((conditions & ChannelCondition.TIMEOUT) != 0) {
          break;
        }
        if ((conditions & ChannelCondition.EOF) != 0) {
          if ((conditions & (ChannelCondition.STDOUT_DATA | ChannelCondition.STDERR_DATA)) == 0) {
            break;
          }
        }
      }
      while (inputStream.available() > 0) {
        inputStream.read(buffer);
      }
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage());
    throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage());
  }
  return new String(buffer);
}","private String receive(){
  String response=new String(""String_Node_Str"");
  InputStream inputStream=_session.getStdout();
  try {
    Delimiter delimiter=new Delimiter();
    byte[] buffer=new byte[1024];
    int count=0;
    while (true) {
      int data=inputStream.read();
      if (data != -1) {
        byte[] dataStream=delimiter.parse(data);
        if (delimiter.endReached()) {
          response+=new String(buffer,0,count);
          break;
        }
        if (dataStream != null) {
          for (int i=0; i < dataStream.length; i++) {
            buffer[count]=dataStream[i];
            count++;
            if (count == 1024) {
              response+=new String(buffer,0,count);
              count=0;
            }
          }
        }
      }
 else {
        break;
      }
    }
  }
 catch (  final Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"" + e.getMessage());
  }
  return response;
}"
89096,"public void detachServicePolicy(String policyMap,String portProfile) throws CloudRuntimeException {
  String command=VsmCommand.getServicePolicy(policyMap,portProfile,false);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void detachServicePolicy(String policyMap,String portProfile) throws CloudRuntimeException {
  String command=VsmCommand.getServicePolicy(policyMap,portProfile,false);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}"
89097,"public void attachServicePolicy(String policyMap,String portProfile) throws CloudRuntimeException {
  String command=VsmCommand.getServicePolicy(policyMap,portProfile,true);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void attachServicePolicy(String policyMap,String portProfile) throws CloudRuntimeException {
  String command=VsmCommand.getServicePolicy(policyMap,portProfile,true);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}"
89098,"public void addPortProfile(String name,PortProfileType type,BindingType binding,SwitchPortMode mode,int vlanid) throws CloudRuntimeException {
  String command=VsmCommand.getAddPortProfile(name,type,binding,mode,vlanid);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void addPortProfile(String name,PortProfileType type,BindingType binding,SwitchPortMode mode,int vlanid) throws CloudRuntimeException {
  String command=VsmCommand.getAddPortProfile(name,type,binding,mode,vlanid);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    for (int i=0; i < s_retryCount; ++i) {
      send(command);
      VsmOkResponse response=new VsmOkResponse(receive().trim());
      if (!response.isResponseOk()) {
        if (i >= s_retryCount) {
          throw new CloudRuntimeException(response.toString());
        }
        try {
          Thread.sleep(1000);
        }
 catch (        final InterruptedException e) {
          s_logger.debug(""String_Node_Str"");
        }
      }
 else {
        break;
      }
    }
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}"
89099,"public void queryStatus() throws CloudRuntimeException {
  String status=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ SSH_NETCONF_TERMINATOR;
  send(status);
  parseReply(receive());
}","public void queryStatus() throws CloudRuntimeException {
  String status=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ SSH_NETCONF_TERMINATOR;
  send(status);
  parseOkReply(receive());
}"
89100,"public void deletePolicyMap(String name) throws CloudRuntimeException {
  String command=VsmCommand.getDeletePolicyMap(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void deletePolicyMap(String name) throws CloudRuntimeException {
  String command=VsmCommand.getDeletePolicyMap(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}"
89101,"public void addPolicyMap(String name,int averageRate,int maxRate,int burstRate) throws CloudRuntimeException {
  String command=VsmCommand.getPolicyMap(name,averageRate,maxRate,burstRate);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void addPolicyMap(String name,int averageRate,int maxRate,int burstRate) throws CloudRuntimeException {
  String command=VsmCommand.getPolicyMap(name,averageRate,maxRate,burstRate);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}"
89102,"public void deletePortProfile(String name) throws CloudRuntimeException {
  String command=VsmCommand.getDeletePortProfile(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void deletePortProfile(String name) throws CloudRuntimeException {
  String command=VsmCommand.getDeletePortProfile(name);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}"
89103,"public void updatePortProfile(String name,SwitchPortMode mode,List<Pair<VsmCommand.OperationType,String>> params) throws CloudRuntimeException {
  String command=VsmCommand.getUpdatePortProfile(name,mode,params);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}","public void updatePortProfile(String name,SwitchPortMode mode,List<Pair<VsmCommand.OperationType,String>> params) throws CloudRuntimeException {
  String command=VsmCommand.getUpdatePortProfile(name,mode,params);
  if (command != null) {
    command=command.concat(SSH_NETCONF_TERMINATOR);
    send(command);
    parseOkReply(receive());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
}"
89104,"private void encryptVNCPassword(Connection conn){
  s_logger.debug(""String_Node_Str"");
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  try {
    int numRows=0;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    rs=pstmt.executeQuery();
    if (rs.next()) {
      numRows=rs.getInt(1);
    }
    rs.close();
    pstmt.close();
    int offset=0;
    while (offset < numRows) {
      pstmt=conn.prepareStatement(""String_Node_Str"" + offset + ""String_Node_Str"");
      rs=pstmt.executeQuery();
      while (rs.next()) {
        long id=rs.getLong(1);
        String value=rs.getString(2);
        if (value == null) {
          continue;
        }
        String encryptedValue=DBEncryptionUtil.encrypt(value);
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setBytes(1,encryptedValue.getBytes(""String_Node_Str""));
        pstmt.setLong(2,id);
        pstmt.executeUpdate();
        pstmt.close();
      }
      rs.close();
      offset+=500;
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
catch (  UnsupportedEncodingException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
  s_logger.debug(""String_Node_Str"");
}","private void encryptVNCPassword(Connection conn){
}"
89105,"private void setupPhysicalNetworks(Connection conn){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  PreparedStatement pstmtUpdate=null;
  try {
    String xenPublicLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String xenPrivateLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String xenStorageLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String xenGuestLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String kvmPublicLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String kvmPrivateLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String kvmGuestLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String vmwarePublicLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String vmwarePrivateLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String vmwareGuestLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    pstmt=conn.prepareStatement(""String_Node_Str"");
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long zoneId=rs.getLong(1);
      Long domainId=rs.getLong(2);
      String networkType=rs.getString(3);
      String vnet=rs.getString(4);
      String zoneName=rs.getString(5);
      PreparedStatement pstmt2=conn.prepareStatement(""String_Node_Str"" + zoneId);
      ResultSet rsTags=pstmt2.executeQuery();
      if (rsTags.next()) {
        boolean isFirstPhysicalNtwk=true;
        do {
          s_logger.debug(""String_Node_Str"");
          String guestNetworkTag=rsTags.getString(1);
          long physicalNetworkId=addPhysicalNetworkToZone(conn,zoneId,zoneName,networkType,(isFirstPhysicalNtwk) ? vnet : null,domainId);
          if (isFirstPhysicalNtwk) {
            addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenPublicLabel,kvmPublicLabel,vmwarePublicLabel);
            addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenPrivateLabel,kvmPrivateLabel,vmwarePrivateLabel);
            addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenStorageLabel,null,null);
          }
          addTrafficType(conn,physicalNetworkId,""String_Node_Str"",guestNetworkTag,kvmGuestLabel,vmwareGuestLabel);
          addDefaultServiceProviders(conn,physicalNetworkId,zoneId);
          PreparedStatement pstmt3=conn.prepareStatement(""String_Node_Str"" + guestNetworkTag + ""String_Node_Str"");
          ResultSet rsNet=pstmt3.executeQuery();
          s_logger.debug(""String_Node_Str"");
          s_logger.debug(""String_Node_Str"");
          s_logger.debug(""String_Node_Str"");
          while (rsNet.next()) {
            Long networkId=rsNet.getLong(1);
            addPhysicalNtwk_To_Ntwk_IP_Vlan(conn,physicalNetworkId,networkId);
          }
          pstmt3.close();
          if (isFirstPhysicalNtwk) {
            s_logger.debug(""String_Node_Str"");
            String updateVnet=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId;
            pstmtUpdate=conn.prepareStatement(updateVnet);
            pstmtUpdate.executeUpdate();
            pstmtUpdate.close();
          }
          isFirstPhysicalNtwk=false;
        }
 while (rsTags.next());
        pstmt2.close();
      }
 else {
        long physicalNetworkId=addPhysicalNetworkToZone(conn,zoneId,zoneName,networkType,vnet,domainId);
        addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenPublicLabel,kvmPublicLabel,vmwarePublicLabel);
        addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenPrivateLabel,kvmPrivateLabel,vmwarePrivateLabel);
        addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenStorageLabel,null,null);
        addTrafficType(conn,physicalNetworkId,""String_Node_Str"",xenGuestLabel,kvmGuestLabel,vmwareGuestLabel);
        addDefaultServiceProviders(conn,physicalNetworkId,zoneId);
        s_logger.debug(""String_Node_Str"");
        String updateVnet=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId;
        pstmtUpdate=conn.prepareStatement(updateVnet);
        pstmtUpdate.executeUpdate();
        pstmtUpdate.close();
        s_logger.debug(""String_Node_Str"");
        String updateVLAN=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId;
        pstmtUpdate=conn.prepareStatement(updateVLAN);
        pstmtUpdate.executeUpdate();
        pstmtUpdate.close();
        s_logger.debug(""String_Node_Str"");
        String updateUsrIp=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId;
        pstmtUpdate=conn.prepareStatement(updateUsrIp);
        pstmtUpdate.executeUpdate();
        pstmtUpdate.close();
        s_logger.debug(""String_Node_Str"");
        String updateNet=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId+ ""String_Node_Str"";
        pstmtUpdate=conn.prepareStatement(updateNet);
        pstmtUpdate.executeUpdate();
        pstmtUpdate.close();
      }
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    if (pstmtUpdate != null) {
      try {
        pstmtUpdate.close();
      }
 catch (      SQLException e) {
      }
    }
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
      }
    }
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      SQLException e) {
      }
    }
  }
}","private void setupPhysicalNetworks(Connection conn){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  PreparedStatement pstmtUpdate=null;
  try {
    String getNextNetworkSequenceSql=""String_Node_Str"";
    String advanceNetworkSequenceSql=""String_Node_Str"";
    String xenPublicLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String xenPrivateLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String xenStorageLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String xenGuestLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String kvmPublicLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String kvmPrivateLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String kvmGuestLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String vmwarePublicLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String vmwarePrivateLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    String vmwareGuestLabel=getNetworkLabelFromConfig(conn,""String_Node_Str"");
    pstmt=conn.prepareStatement(""String_Node_Str"");
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long zoneId=rs.getLong(1);
      Long domainId=rs.getLong(2);
      String networkType=rs.getString(3);
      String vnet=rs.getString(4);
      String zoneName=rs.getString(5);
      PreparedStatement pstmt2=conn.prepareStatement(getNextNetworkSequenceSql);
      ResultSet rsSeq=pstmt2.executeQuery();
      rsSeq.next();
      long physicalNetworkId=rsSeq.getLong(1);
      rsSeq.close();
      pstmt2.close();
      pstmt2=conn.prepareStatement(advanceNetworkSequenceSql);
      pstmt2.executeUpdate();
      pstmt2.close();
      String uuid=UUID.randomUUID().toString();
      String broadcastDomainRange=""String_Node_Str"";
      if (""String_Node_Str"".equals(networkType)) {
        broadcastDomainRange=""String_Node_Str"";
      }
      String values=null;
      values=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str"";
      values+=""String_Node_Str"" + uuid + ""String_Node_Str"";
      values+=""String_Node_Str"" + zoneId + ""String_Node_Str"";
      values+=""String_Node_Str"" + vnet + ""String_Node_Str"";
      values+=""String_Node_Str"" + domainId + ""String_Node_Str"";
      values+=""String_Node_Str"" + broadcastDomainRange + ""String_Node_Str"";
      values+=""String_Node_Str"";
      values+=""String_Node_Str"" + zoneName + ""String_Node_Str"";
      values+=""String_Node_Str"";
      s_logger.debug(""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId);
      String sql=""String_Node_Str"" + values;
      pstmtUpdate=conn.prepareStatement(sql);
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      s_logger.debug(""String_Node_Str"");
      String insertTraficType=""String_Node_Str"";
      pstmtUpdate=conn.prepareStatement(insertTraficType);
      pstmtUpdate.setLong(1,physicalNetworkId);
      pstmtUpdate.setString(2,""String_Node_Str"");
      pstmtUpdate.setString(3,xenPublicLabel);
      pstmtUpdate.setString(4,kvmPublicLabel);
      pstmtUpdate.setString(5,vmwarePublicLabel);
      pstmtUpdate.setString(6,UUID.randomUUID().toString());
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      pstmtUpdate=conn.prepareStatement(insertTraficType);
      pstmtUpdate.setLong(1,physicalNetworkId);
      pstmtUpdate.setString(2,""String_Node_Str"");
      pstmtUpdate.setString(3,xenPrivateLabel);
      pstmtUpdate.setString(4,kvmPrivateLabel);
      pstmtUpdate.setString(5,vmwarePrivateLabel);
      pstmtUpdate.setString(6,UUID.randomUUID().toString());
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      pstmtUpdate=conn.prepareStatement(insertTraficType);
      pstmtUpdate.setLong(1,physicalNetworkId);
      pstmtUpdate.setString(2,""String_Node_Str"");
      pstmtUpdate.setString(3,xenStorageLabel);
      pstmtUpdate.setString(4,null);
      pstmtUpdate.setString(5,null);
      pstmtUpdate.setString(6,UUID.randomUUID().toString());
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      pstmtUpdate=conn.prepareStatement(insertTraficType);
      pstmtUpdate.setLong(1,physicalNetworkId);
      pstmtUpdate.setString(2,""String_Node_Str"");
      pstmtUpdate.setString(3,xenGuestLabel);
      pstmtUpdate.setString(4,kvmGuestLabel);
      pstmtUpdate.setString(5,vmwareGuestLabel);
      pstmtUpdate.setString(6,UUID.randomUUID().toString());
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      s_logger.debug(""String_Node_Str"");
      String insertPNSP=""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"";
      pstmtUpdate=conn.prepareStatement(insertPNSP);
      pstmtUpdate.setString(1,UUID.randomUUID().toString());
      pstmtUpdate.setLong(2,physicalNetworkId);
      pstmtUpdate.setString(3,""String_Node_Str"");
      pstmtUpdate.setString(4,""String_Node_Str"");
      pstmtUpdate.setLong(5,0);
      pstmtUpdate.setInt(6,1);
      pstmtUpdate.setInt(7,1);
      pstmtUpdate.setInt(8,1);
      pstmtUpdate.setInt(9,1);
      pstmtUpdate.setInt(10,1);
      pstmtUpdate.setInt(11,1);
      pstmtUpdate.setInt(12,1);
      pstmtUpdate.setInt(13,1);
      pstmtUpdate.setInt(14,1);
      pstmtUpdate.setInt(15,1);
      pstmtUpdate.setInt(16,0);
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      String fetchNSPid=""String_Node_Str"" + physicalNetworkId;
      pstmt2=conn.prepareStatement(fetchNSPid);
      ResultSet rsNSPid=pstmt2.executeQuery();
      rsNSPid.next();
      long nspId=rsNSPid.getLong(1);
      rsSeq.close();
      pstmt2.close();
      String insertRouter=""String_Node_Str"" + ""String_Node_Str"";
      pstmtUpdate=conn.prepareStatement(insertRouter);
      pstmtUpdate.setLong(1,nspId);
      pstmtUpdate.setString(2,UUID.randomUUID().toString());
      pstmtUpdate.setString(3,""String_Node_Str"");
      pstmtUpdate.setInt(4,1);
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      s_logger.debug(""String_Node_Str"");
      String updateVnet=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId;
      pstmtUpdate=conn.prepareStatement(updateVnet);
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      s_logger.debug(""String_Node_Str"");
      String updateVLAN=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId;
      pstmtUpdate=conn.prepareStatement(updateVLAN);
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      s_logger.debug(""String_Node_Str"");
      String updateUsrIp=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId;
      pstmtUpdate=conn.prepareStatement(updateUsrIp);
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
      s_logger.debug(""String_Node_Str"");
      String updateNet=""String_Node_Str"" + physicalNetworkId + ""String_Node_Str""+ zoneId+ ""String_Node_Str"";
      pstmtUpdate=conn.prepareStatement(updateNet);
      pstmtUpdate.executeUpdate();
      pstmtUpdate.close();
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    if (pstmtUpdate != null) {
      try {
        pstmtUpdate.close();
      }
 catch (      SQLException e) {
      }
    }
    if (rs != null) {
      try {
        rs.close();
      }
 catch (      SQLException e) {
      }
    }
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      SQLException e) {
      }
    }
  }
}"
89106,"@Override @DB public void postCreateSnapshot(Long volumeId,Long snapshotId,Long policyId,boolean backedUp){
  Long userId=getSnapshotUserId();
  SnapshotVO snapshot=_snapshotDao.findByIdIncludingRemoved(snapshotId);
  if (snapshot.isRecursive()) {
    postCreateRecurringSnapshotForPolicy(userId,volumeId,snapshotId,policyId);
  }
}","@Override @DB public void postCreateSnapshot(Long volumeId,Long snapshotId,Long policyId,boolean backedUp){
  Long userId=getSnapshotUserId();
  SnapshotVO snapshot=_snapshotDao.findById(snapshotId);
  if (snapshot != null && snapshot.isRecursive()) {
    postCreateRecurringSnapshotForPolicy(userId,volumeId,snapshotId,policyId);
  }
}"
89107,"@DB protected void CheckAndCreateTunnel(VirtualMachine instance,Network nw,DeployDestination dest){
  if (!_isEnabled) {
    return;
  }
  s_logger.debug(""String_Node_Str"");
  if (instance.getType() != VirtualMachine.Type.User && instance.getType() != VirtualMachine.Type.DomainRouter) {
    s_logger.debug(""String_Node_Str"");
    return;
  }
  long hostId=dest.getHost().getId();
  int key=getGreKey(nw);
  List<UserVmVO> vms=_userVmDao.listByNetworkIdAndStates(nw.getId(),State.Running,State.Starting,State.Stopping,State.Unknown,State.Migrating);
  List<DomainRouterVO> routers=_routerDao.findByNetwork(nw.getId());
  List<VMInstanceVO> ins=new ArrayList<VMInstanceVO>();
  if (vms != null) {
    ins.addAll(vms);
  }
  if (routers.size() != 0) {
    ins.addAll(routers);
  }
  s_logger.debug(""String_Node_Str"" + vms.size());
  s_logger.debug(""String_Node_Str"" + routers.size());
  List<Long> toHostIds=new ArrayList<Long>();
  List<Long> fromHostIds=new ArrayList<Long>();
  for (  VMInstanceVO v : ins) {
    Long rh=v.getHostId();
    if (rh == null || rh.longValue() == hostId) {
      continue;
    }
    OvsTunnelNetworkVO ta=_tunnelNetworkDao.getByFromToNetwork(hostId,rh.longValue(),nw.getId());
    if (ta == null || ta.getState().equals(""String_Node_Str"")) {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ rh.longValue());
      if (ta == null) {
        this.createTunnelRecord(hostId,rh.longValue(),nw.getId());
      }
      if (!toHostIds.contains(rh)) {
        toHostIds.add(rh);
      }
    }
    ta=_tunnelNetworkDao.getByFromToNetwork(rh.longValue(),hostId,nw.getId());
    if (ta == null || ta.getState().equals(""String_Node_Str"")) {
      s_logger.debug(""String_Node_Str"" + rh.longValue() + ""String_Node_Str""+ hostId);
      if (ta == null) {
        this.createTunnelRecord(rh.longValue(),hostId,nw.getId());
      }
      if (!fromHostIds.contains(rh)) {
        fromHostIds.add(rh);
      }
    }
  }
  try {
    String myIp=getGreEndpointIP(dest.getHost(),nw);
    boolean noHost=true;
    for (    Long i : toHostIds) {
      HostVO rHost=_hostDao.findById(i);
      String otherIp=getGreEndpointIP(rHost,nw);
      Commands cmds=new Commands(new OvsCreateTunnelCommand(otherIp,key,Long.valueOf(hostId),i,nw.getId(),myIp));
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ i);
      Answer[] answers=_agentMgr.send(hostId,cmds);
      handleCreateTunnelAnswer(answers);
      noHost=false;
    }
    for (    Long i : fromHostIds) {
      HostVO rHost=_hostDao.findById(i);
      String otherIp=getGreEndpointIP(rHost,nw);
      Commands cmds=new Commands(new OvsCreateTunnelCommand(myIp,key,i,Long.valueOf(hostId),nw.getId(),otherIp));
      s_logger.debug(""String_Node_Str"" + i + ""String_Node_Str""+ hostId);
      Answer[] answers=_agentMgr.send(i,cmds);
      handleCreateTunnelAnswer(answers);
      noHost=false;
    }
    if (noHost) {
      Commands cmds=new Commands(new OvsSetupBridgeCommand(key,hostId,nw.getId()));
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ nw.getId());
      Answer[] answers=_agentMgr.send(hostId,cmds);
      handleSetupBridgeAnswer(answers);
    }
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
  }
}","@DB protected void CheckAndCreateTunnel(VirtualMachine instance,Network nw,DeployDestination dest){
  if (!_isEnabled) {
    return;
  }
  s_logger.debug(""String_Node_Str"");
  if (instance.getType() != VirtualMachine.Type.User && instance.getType() != VirtualMachine.Type.DomainRouter) {
    s_logger.debug(""String_Node_Str"");
    return;
  }
  long hostId=dest.getHost().getId();
  int key=getGreKey(nw);
  List<UserVmVO> vms=_userVmDao.listByNetworkIdAndStates(nw.getId(),State.Running,State.Starting,State.Stopping,State.Unknown,State.Migrating);
  List<DomainRouterVO> routers=_routerDao.findByNetwork(nw.getId());
  List<VMInstanceVO> ins=new ArrayList<VMInstanceVO>();
  if (vms != null) {
    ins.addAll(vms);
  }
  if (routers.size() != 0) {
    ins.addAll(routers);
  }
  s_logger.debug(""String_Node_Str"" + vms.size());
  s_logger.debug(""String_Node_Str"" + routers.size());
  List<Long> toHostIds=new ArrayList<Long>();
  List<Long> fromHostIds=new ArrayList<Long>();
  for (  VMInstanceVO v : ins) {
    Long rh=v.getHostId();
    if (rh == null || rh.longValue() == hostId) {
      continue;
    }
    OvsTunnelNetworkVO ta=_tunnelNetworkDao.getByFromToNetwork(hostId,rh.longValue(),nw.getId());
    if (ta == null || ta.getState().equals(""String_Node_Str"")) {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ rh.longValue());
      if (ta == null) {
        this.createTunnelRecord(hostId,rh.longValue(),nw.getId(),key);
      }
      if (!toHostIds.contains(rh)) {
        toHostIds.add(rh);
      }
    }
    ta=_tunnelNetworkDao.getByFromToNetwork(rh.longValue(),hostId,nw.getId());
    if (ta == null || ta.getState().equals(""String_Node_Str"")) {
      s_logger.debug(""String_Node_Str"" + rh.longValue() + ""String_Node_Str""+ hostId);
      if (ta == null) {
        this.createTunnelRecord(rh.longValue(),hostId,nw.getId(),key);
      }
      if (!fromHostIds.contains(rh)) {
        fromHostIds.add(rh);
      }
    }
  }
  try {
    String myIp=getGreEndpointIP(dest.getHost(),nw);
    boolean noHost=true;
    for (    Long i : toHostIds) {
      HostVO rHost=_hostDao.findById(i);
      String otherIp=getGreEndpointIP(rHost,nw);
      Commands cmds=new Commands(new OvsCreateTunnelCommand(otherIp,key,Long.valueOf(hostId),i,nw.getId(),myIp));
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ i);
      Answer[] answers=_agentMgr.send(hostId,cmds);
      handleCreateTunnelAnswer(answers);
      noHost=false;
    }
    for (    Long i : fromHostIds) {
      HostVO rHost=_hostDao.findById(i);
      String otherIp=getGreEndpointIP(rHost,nw);
      Commands cmds=new Commands(new OvsCreateTunnelCommand(myIp,key,i,Long.valueOf(hostId),nw.getId(),otherIp));
      s_logger.debug(""String_Node_Str"" + i + ""String_Node_Str""+ hostId);
      Answer[] answers=_agentMgr.send(i,cmds);
      handleCreateTunnelAnswer(answers);
      noHost=false;
    }
    if (noHost) {
      Commands cmds=new Commands(new OvsSetupBridgeCommand(key,hostId,nw.getId()));
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ nw.getId());
      Answer[] answers=_agentMgr.send(hostId,cmds);
      handleSetupBridgeAnswer(answers);
    }
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"",e);
  }
}"
89108,"/** 
 * This method just creates a XenServer network following the tunnel network naming convention
 */
private synchronized Network findOrCreateTunnelNetwork(Connection conn,long networkId){
  try {
    String nwName=""String_Node_Str"" + networkId;
    Network nw=null;
    Network.Record rec=new Network.Record();
    Set<Network> networks=Network.getByNameLabel(conn,nwName);
    if (networks.size() == 0) {
      rec.nameDescription=""String_Node_Str"" + networkId;
      rec.nameLabel=nwName;
      Map<String,String> otherConfig=new HashMap<String,String>();
      otherConfig.put(""String_Node_Str"",""String_Node_Str"");
      rec.otherConfig=otherConfig;
      nw=Network.create(conn,rec);
      enableXenServerNetwork(conn,nw,nwName,""String_Node_Str"" + networkId);
      s_logger.debug(""String_Node_Str"" + nwName);
    }
 else {
      nw=networks.iterator().next();
      s_logger.debug(""String_Node_Str"" + nwName);
    }
    return nw;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
}","/** 
 * This method just creates a XenServer network following the tunnel network naming convention
 */
private synchronized Network findOrCreateTunnelNetwork(Connection conn,long key){
  try {
    String nwName=""String_Node_Str"" + key;
    Network nw=null;
    Network.Record rec=new Network.Record();
    Set<Network> networks=Network.getByNameLabel(conn,nwName);
    if (networks.size() == 0) {
      rec.nameDescription=""String_Node_Str"" + key;
      rec.nameLabel=nwName;
      Map<String,String> otherConfig=new HashMap<String,String>();
      otherConfig.put(""String_Node_Str"",""String_Node_Str"");
      rec.otherConfig=otherConfig;
      nw=Network.create(conn,rec);
      enableXenServerNetwork(conn,nw,nwName,""String_Node_Str"" + key);
      s_logger.debug(""String_Node_Str"" + nwName);
    }
 else {
      nw=networks.iterator().next();
      s_logger.debug(""String_Node_Str"" + nwName);
    }
    return nw;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
}"
89109,"/** 
 * This method creates a XenServer network and configures it for being used as a L2-in-L3 tunneled network
 */
private synchronized Network configureTunnelNetwork(Connection conn,long networkId,long hostId,int key){
  try {
    Network nw=findOrCreateTunnelNetwork(conn,networkId);
    String nwName=""String_Node_Str"" + key;
    String bridge=nw.getBridge(conn);
    Map<String,String> nwOtherConfig=nw.getOtherConfig(conn);
    String configuredHosts=nwOtherConfig.get(""String_Node_Str"");
    boolean configured=false;
    if (configuredHosts != null) {
      String hostIdsStr[]=configuredHosts.split(""String_Node_Str"");
      for (      String hostIdStr : hostIdsStr) {
        if (hostIdStr.equals(((Long)hostId).toString())) {
          configured=true;
          break;
        }
      }
    }
    if (!configured) {
      enableXenServerNetwork(conn,nw,nwName,""String_Node_Str"" + key);
      String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bridge,""String_Node_Str"",String.valueOf(key),""String_Node_Str"",nw.getUuid(conn),""String_Node_Str"",((Long)hostId).toString());
      String[] res=result.split(""String_Node_Str"");
      if (res.length != 2 || !res[0].equalsIgnoreCase(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"" + bridge + ""String_Node_Str""+ networkId+ ""String_Node_Str""+ res);
      }
    }
    return nw;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
}","/** 
 * This method creates a XenServer network and configures it for being used as a L2-in-L3 tunneled network
 */
private synchronized Network configureTunnelNetwork(Connection conn,long networkId,long hostId,int key){
  try {
    Network nw=findOrCreateTunnelNetwork(conn,key);
    String nwName=""String_Node_Str"" + key;
    String bridge=nw.getBridge(conn);
    Map<String,String> nwOtherConfig=nw.getOtherConfig(conn);
    String configuredHosts=nwOtherConfig.get(""String_Node_Str"");
    boolean configured=false;
    if (configuredHosts != null) {
      String hostIdsStr[]=configuredHosts.split(""String_Node_Str"");
      for (      String hostIdStr : hostIdsStr) {
        if (hostIdStr.equals(((Long)hostId).toString())) {
          configured=true;
          break;
        }
      }
    }
    if (!configured) {
      enableXenServerNetwork(conn,nw,nwName,""String_Node_Str"" + key);
      String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bridge,""String_Node_Str"",String.valueOf(key),""String_Node_Str"",nw.getUuid(conn),""String_Node_Str"",((Long)hostId).toString());
      String[] res=result.split(""String_Node_Str"");
      if (res.length != 2 || !res[0].equalsIgnoreCase(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"" + bridge + ""String_Node_Str""+ networkId+ ""String_Node_Str""+ res);
      }
    }
    return nw;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
}"
89110,"private String handleFetchInterfaceAnswer(Answer[] answers,Long hostId){
  OvsFetchInterfaceAnswer ans=(OvsFetchInterfaceAnswer)answers[0];
  String s=String.format(""String_Node_Str"",ans.getIp(),ans.getNetmask(),ans.getMac(),ans.getLabel(),hostId);
  s_logger.debug(""String_Node_Str"" + s);
  OvsTunnelInterfaceVO ti=createInterfaceRecord(ans.getIp(),ans.getNetmask(),ans.getMac(),hostId,ans.getLabel());
  s_logger.debug(""String_Node_Str"" + ti.getId());
  return ti.getIp();
}","private String handleFetchInterfaceAnswer(Answer[] answers,Long hostId){
  OvsFetchInterfaceAnswer ans=(OvsFetchInterfaceAnswer)answers[0];
  OvsTunnelInterfaceVO ti=createInterfaceRecord(ans.getIp(),ans.getNetmask(),ans.getMac(),hostId,ans.getLabel());
  s_logger.debug(""String_Node_Str"" + ti.getId());
  return ti.getIp();
}"
89111,"@Override public Answer executeRequest(Command cmd){
  Class<? extends Command> clazz=cmd.getClass();
  if (clazz == CreateCommand.class) {
    return execute((CreateCommand)cmd);
  }
 else   if (clazz == SetPortForwardingRulesCommand.class) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (clazz == SetStaticNatRulesCommand.class) {
    return execute((SetStaticNatRulesCommand)cmd);
  }
 else   if (clazz == LoadBalancerConfigCommand.class) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (clazz == IpAssocCommand.class) {
    return execute((IpAssocCommand)cmd);
  }
 else   if (clazz == CheckConsoleProxyLoadCommand.class) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == WatchConsoleProxyLoadCommand.class) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == SavePasswordCommand.class) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (clazz == DhcpEntryCommand.class) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (clazz == VmDataCommand.class) {
    return execute((VmDataCommand)cmd);
  }
 else   if (clazz == ReadyCommand.class) {
    return execute((ReadyCommand)cmd);
  }
 else   if (clazz == GetHostStatsCommand.class) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (clazz == GetVmStatsCommand.class) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (clazz == CheckHealthCommand.class) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (clazz == StopCommand.class) {
    return execute((StopCommand)cmd);
  }
 else   if (clazz == RebootRouterCommand.class) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (clazz == RebootCommand.class) {
    return execute((RebootCommand)cmd);
  }
 else   if (clazz == CheckVirtualMachineCommand.class) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (clazz == PrepareForMigrationCommand.class) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (clazz == MigrateCommand.class) {
    return execute((MigrateCommand)cmd);
  }
 else   if (clazz == DestroyCommand.class) {
    return execute((DestroyCommand)cmd);
  }
 else   if (clazz == CreateStoragePoolCommand.class) {
    return execute((CreateStoragePoolCommand)cmd);
  }
 else   if (clazz == ModifyStoragePoolCommand.class) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (clazz == DeleteStoragePoolCommand.class) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (clazz == CopyVolumeCommand.class) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (clazz == AttachVolumeCommand.class) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (clazz == AttachIsoCommand.class) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (clazz == ManageSnapshotCommand.class) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (clazz == BackupSnapshotCommand.class) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (clazz == CreateVolumeFromSnapshotCommand.class) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (clazz == CreatePrivateTemplateFromVolumeCommand.class) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (clazz == CreatePrivateTemplateFromSnapshotCommand.class) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (clazz == UpgradeSnapshotCommand.class) {
    return execute((UpgradeSnapshotCommand)cmd);
  }
 else   if (clazz == GetStorageStatsCommand.class) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (clazz == PrimaryStorageDownloadCommand.class) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (clazz == GetVncPortCommand.class) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (clazz == SetupCommand.class) {
    return execute((SetupCommand)cmd);
  }
 else   if (clazz == MaintainCommand.class) {
    return execute((MaintainCommand)cmd);
  }
 else   if (clazz == PingTestCommand.class) {
    return execute((PingTestCommand)cmd);
  }
 else   if (clazz == CheckOnHostCommand.class) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (clazz == ModifySshKeysCommand.class) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (clazz == PoolEjectCommand.class) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (clazz == StartCommand.class) {
    return execute((StartCommand)cmd);
  }
 else   if (clazz == RemoteAccessVpnCfgCommand.class) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (clazz == VpnUsersCfgCommand.class) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (clazz == CheckSshCommand.class) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (clazz == SecurityGroupRulesCmd.class) {
    return execute((SecurityGroupRulesCmd)cmd);
  }
 else   if (clazz == OvsCreateGreTunnelCommand.class) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (clazz == OvsSetTagAndFlowCommand.class) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else   if (clazz == OvsDeleteFlowCommand.class) {
    return execute((OvsDeleteFlowCommand)cmd);
  }
 else   if (clazz == CleanupNetworkRulesCmd.class) {
    return execute((CleanupNetworkRulesCmd)cmd);
  }
 else   if (clazz == NetworkRulesSystemVmCommand.class) {
    return execute((NetworkRulesSystemVmCommand)cmd);
  }
 else   if (clazz == OvsCreateTunnelCommand.class) {
    return execute((OvsCreateTunnelCommand)cmd);
  }
 else   if (clazz == OvsDestroyBridgeCommand.class) {
    return execute((OvsDestroyBridgeCommand)cmd);
  }
 else   if (clazz == OvsDestroyTunnelCommand.class) {
    return execute((OvsDestroyTunnelCommand)cmd);
  }
 else   if (clazz == UpdateHostPasswordCommand.class) {
    return execute((UpdateHostPasswordCommand)cmd);
  }
 else   if (cmd instanceof CheckRouterCommand) {
    return execute((CheckRouterCommand)cmd);
  }
 else   if (cmd instanceof SetFirewallRulesCommand) {
    return execute((SetFirewallRulesCommand)cmd);
  }
 else   if (cmd instanceof BumpUpPriorityCommand) {
    return execute((BumpUpPriorityCommand)cmd);
  }
 else   if (cmd instanceof ClusterSyncCommand) {
    return execute((ClusterSyncCommand)cmd);
  }
 else   if (cmd instanceof GetDomRVersionCmd) {
    return execute((GetDomRVersionCmd)cmd);
  }
 else   if (clazz == CheckNetworkCommand.class) {
    return execute((CheckNetworkCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}","@Override public Answer executeRequest(Command cmd){
  Class<? extends Command> clazz=cmd.getClass();
  if (clazz == CreateCommand.class) {
    return execute((CreateCommand)cmd);
  }
 else   if (clazz == SetPortForwardingRulesCommand.class) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (clazz == SetStaticNatRulesCommand.class) {
    return execute((SetStaticNatRulesCommand)cmd);
  }
 else   if (clazz == LoadBalancerConfigCommand.class) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (clazz == IpAssocCommand.class) {
    return execute((IpAssocCommand)cmd);
  }
 else   if (clazz == CheckConsoleProxyLoadCommand.class) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == WatchConsoleProxyLoadCommand.class) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == SavePasswordCommand.class) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (clazz == DhcpEntryCommand.class) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (clazz == VmDataCommand.class) {
    return execute((VmDataCommand)cmd);
  }
 else   if (clazz == ReadyCommand.class) {
    return execute((ReadyCommand)cmd);
  }
 else   if (clazz == GetHostStatsCommand.class) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (clazz == GetVmStatsCommand.class) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (clazz == CheckHealthCommand.class) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (clazz == StopCommand.class) {
    return execute((StopCommand)cmd);
  }
 else   if (clazz == RebootRouterCommand.class) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (clazz == RebootCommand.class) {
    return execute((RebootCommand)cmd);
  }
 else   if (clazz == CheckVirtualMachineCommand.class) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (clazz == PrepareForMigrationCommand.class) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (clazz == MigrateCommand.class) {
    return execute((MigrateCommand)cmd);
  }
 else   if (clazz == DestroyCommand.class) {
    return execute((DestroyCommand)cmd);
  }
 else   if (clazz == CreateStoragePoolCommand.class) {
    return execute((CreateStoragePoolCommand)cmd);
  }
 else   if (clazz == ModifyStoragePoolCommand.class) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (clazz == DeleteStoragePoolCommand.class) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (clazz == CopyVolumeCommand.class) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (clazz == AttachVolumeCommand.class) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (clazz == AttachIsoCommand.class) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (clazz == ManageSnapshotCommand.class) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (clazz == BackupSnapshotCommand.class) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (clazz == CreateVolumeFromSnapshotCommand.class) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (clazz == CreatePrivateTemplateFromVolumeCommand.class) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (clazz == CreatePrivateTemplateFromSnapshotCommand.class) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (clazz == UpgradeSnapshotCommand.class) {
    return execute((UpgradeSnapshotCommand)cmd);
  }
 else   if (clazz == GetStorageStatsCommand.class) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (clazz == PrimaryStorageDownloadCommand.class) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (clazz == GetVncPortCommand.class) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (clazz == SetupCommand.class) {
    return execute((SetupCommand)cmd);
  }
 else   if (clazz == MaintainCommand.class) {
    return execute((MaintainCommand)cmd);
  }
 else   if (clazz == PingTestCommand.class) {
    return execute((PingTestCommand)cmd);
  }
 else   if (clazz == CheckOnHostCommand.class) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (clazz == ModifySshKeysCommand.class) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (clazz == PoolEjectCommand.class) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (clazz == StartCommand.class) {
    return execute((StartCommand)cmd);
  }
 else   if (clazz == RemoteAccessVpnCfgCommand.class) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (clazz == VpnUsersCfgCommand.class) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (clazz == CheckSshCommand.class) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (clazz == SecurityGroupRulesCmd.class) {
    return execute((SecurityGroupRulesCmd)cmd);
  }
 else   if (clazz == OvsCreateGreTunnelCommand.class) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (clazz == OvsSetTagAndFlowCommand.class) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else   if (clazz == OvsDeleteFlowCommand.class) {
    return execute((OvsDeleteFlowCommand)cmd);
  }
 else   if (clazz == CleanupNetworkRulesCmd.class) {
    return execute((CleanupNetworkRulesCmd)cmd);
  }
 else   if (clazz == NetworkRulesSystemVmCommand.class) {
    return execute((NetworkRulesSystemVmCommand)cmd);
  }
 else   if (clazz == OvsCreateTunnelCommand.class) {
    return execute((OvsCreateTunnelCommand)cmd);
  }
 else   if (clazz == OvsSetupBridgeCommand.class) {
    return execute((OvsSetupBridgeCommand)cmd);
  }
 else   if (clazz == OvsDestroyBridgeCommand.class) {
    return execute((OvsDestroyBridgeCommand)cmd);
  }
 else   if (clazz == OvsDestroyTunnelCommand.class) {
    return execute((OvsDestroyTunnelCommand)cmd);
  }
 else   if (clazz == UpdateHostPasswordCommand.class) {
    return execute((UpdateHostPasswordCommand)cmd);
  }
 else   if (cmd instanceof CheckRouterCommand) {
    return execute((CheckRouterCommand)cmd);
  }
 else   if (cmd instanceof SetFirewallRulesCommand) {
    return execute((SetFirewallRulesCommand)cmd);
  }
 else   if (cmd instanceof BumpUpPriorityCommand) {
    return execute((BumpUpPriorityCommand)cmd);
  }
 else   if (cmd instanceof ClusterSyncCommand) {
    return execute((ClusterSyncCommand)cmd);
  }
 else   if (cmd instanceof GetDomRVersionCmd) {
    return execute((GetDomRVersionCmd)cmd);
  }
 else   if (clazz == CheckNetworkCommand.class) {
    return execute((CheckNetworkCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}"
89112,"public long getNetworkId(){
  return networkId;
}","public Long getNetworkId(){
  return networkId;
}"
89113,"public OvsDestroyBridgeCommand(long networkId){
  this.networkId=networkId;
}","public OvsDestroyBridgeCommand(Long networkId,Integer key){
  this.networkId=networkId;
  this.key=key;
}"
89114,"public long getNetworkId(){
  return networkId;
}","public Long getNetworkId(){
  return networkId;
}"
89115,"public OvsDestroyTunnelCommand(long networkId,String inPortName){
  this.networkId=networkId;
  this.inPortName=inPortName;
}","public OvsDestroyTunnelCommand(Long networkId,Integer key,String inPortName){
  this.networkId=networkId;
  this.inPortName=inPortName;
  this.key=key;
}"
89116,"private synchronized void destroyTunnelNetwork(Connection conn,long networkId){
  try {
    Network nw=findOrCreateTunnelNetwork(conn,networkId);
    String bridge=nw.getBridge(conn);
    String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bridge);
    String[] res=result.split(""String_Node_Str"");
    if (res.length != 2 || !res[0].equalsIgnoreCase(""String_Node_Str"")) {
      throw new CloudRuntimeException(""String_Node_Str"" + bridge + ""String_Node_Str""+ res);
    }
    return;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return;
  }
}","private synchronized void destroyTunnelNetwork(Connection conn,int key){
  try {
    Network nw=findOrCreateTunnelNetwork(conn,key);
    String bridge=nw.getBridge(conn);
    String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bridge);
    String[] res=result.split(""String_Node_Str"");
    if (res.length != 2 || !res[0].equalsIgnoreCase(""String_Node_Str"")) {
      throw new CloudRuntimeException(""String_Node_Str"" + bridge + ""String_Node_Str""+ res);
    }
    return;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return;
  }
}"
89117,"/** 
 * This method just creates a XenServer network following the tunnel network naming convention
 */
private synchronized Network findOrCreateTunnelNetwork(Connection conn,long networkId){
  try {
    String nwName=""String_Node_Str"" + networkId;
    Network nw=null;
    Network.Record rec=new Network.Record();
    Set<Network> networks=Network.getByNameLabel(conn,nwName);
    if (networks.size() == 0) {
      rec.nameDescription=""String_Node_Str"" + networkId;
      rec.nameLabel=nwName;
      Map<String,String> otherConfig=new HashMap<String,String>();
      otherConfig.put(""String_Node_Str"",""String_Node_Str"");
      rec.otherConfig=otherConfig;
      nw=Network.create(conn,rec);
      enableXenServerNetwork(conn,nw,nwName,""String_Node_Str"" + networkId);
      s_logger.debug(""String_Node_Str"" + nwName);
    }
 else {
      nw=networks.iterator().next();
      s_logger.debug(""String_Node_Str"" + nwName);
    }
    return nw;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
}","/** 
 * This method just creates a XenServer network following the tunnel network naming convention
 */
private synchronized Network findOrCreateTunnelNetwork(Connection conn,long vnetId){
  try {
    String nwName=""String_Node_Str"" + vnetId;
    Network nw=null;
    Network.Record rec=new Network.Record();
    Set<Network> networks=Network.getByNameLabel(conn,nwName);
    if (networks.size() == 0) {
      rec.nameDescription=""String_Node_Str"" + vnetId;
      rec.nameLabel=nwName;
      Map<String,String> otherConfig=new HashMap<String,String>();
      otherConfig.put(""String_Node_Str"",""String_Node_Str"");
      rec.otherConfig=otherConfig;
      nw=Network.create(conn,rec);
      s_logger.debug(""String_Node_Str"" + nwName);
    }
 else {
      nw=networks.iterator().next();
      s_logger.debug(""String_Node_Str"" + nwName);
    }
    return nw;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
}"
89118,"/** 
 * This method creates a XenServer network and configures it for being used as a L2-in-L3 tunneled network
 */
private synchronized Network configureTunnelNetwork(Connection conn,long networkId,long hostId,int key){
  try {
    Network nw=findOrCreateTunnelNetwork(conn,networkId);
    String bridge=nw.getBridge(conn);
    Map<String,String> nwOtherConfig=nw.getOtherConfig(conn);
    String configuredHosts=nwOtherConfig.get(""String_Node_Str"");
    boolean configured=false;
    if (configuredHosts != null) {
      String hostIdsStr[]=configuredHosts.split(""String_Node_Str"");
      for (      String hostIdStr : hostIdsStr) {
        if (hostIdStr.equals(((Long)hostId).toString())) {
          configured=true;
          break;
        }
      }
    }
    if (!configured) {
      String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bridge,""String_Node_Str"",String.valueOf(key),""String_Node_Str"",nw.getUuid(conn),""String_Node_Str"",((Long)hostId).toString());
      String[] res=result.split(""String_Node_Str"");
      if (res.length != 2 || !res[0].equalsIgnoreCase(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"" + bridge + ""String_Node_Str""+ networkId+ ""String_Node_Str""+ res);
      }
    }
    return nw;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
}","/** 
 * This method creates a XenServer network and configures it for being used as a L2-in-L3 tunneled network
 */
private synchronized Network configureTunnelNetwork(Connection conn,long networkId,long hostId,int key){
  try {
    Network nw=findOrCreateTunnelNetwork(conn,key);
    String nwName=""String_Node_Str"" + key;
    String bridge=nw.getBridge(conn);
    Map<String,String> nwOtherConfig=nw.getOtherConfig(conn);
    String configuredHosts=nwOtherConfig.get(""String_Node_Str"");
    boolean configured=false;
    if (configuredHosts != null) {
      String hostIdsStr[]=configuredHosts.split(""String_Node_Str"");
      for (      String hostIdStr : hostIdsStr) {
        if (hostIdStr.equals(((Long)hostId).toString())) {
          configured=true;
          break;
        }
      }
    }
    if (!configured) {
      enableXenServerNetwork(conn,nw,nwName,""String_Node_Str"" + key);
      String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bridge,""String_Node_Str"",String.valueOf(key),""String_Node_Str"",nw.getUuid(conn),""String_Node_Str"",((Long)hostId).toString());
      String[] res=result.split(""String_Node_Str"");
      if (res.length != 2 || !res[0].equalsIgnoreCase(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"" + bridge + ""String_Node_Str""+ networkId+ ""String_Node_Str""+ res);
      }
    }
    return nw;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
}"
89119,"public String getKey(){
  return key;
}","public int getKey(){
  return key;
}"
89120,"/** 
 * This method creates a XenServer network and configures it for being used as a L2-in-L3 tunneled network
 */
private synchronized Network configureTunnelNetwork(Connection conn,long networkId,long hostId,int key){
  try {
    Network nw=findOrCreateTunnelNetwork(conn,networkId);
    String bridge=nw.getBridge(conn);
    Map<String,String> nwOtherConfig=nw.getOtherConfig(conn);
    String configuredHosts=nwOtherConfig.get(""String_Node_Str"");
    boolean configured=false;
    if (configuredHosts != null) {
      String hostIdsStr[]=configuredHosts.split(""String_Node_Str"");
      for (      String hostIdStr : hostIdsStr) {
        if (hostIdStr.equals(((Long)hostId).toString())) {
          configured=true;
          break;
        }
      }
    }
    if (!configured) {
      enableXenServerNetwork(conn,nw,nwName,""String_Node_Str"" + key);
      String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bridge,""String_Node_Str"",String.valueOf(key),""String_Node_Str"",nw.getUuid(conn),""String_Node_Str"",((Long)hostId).toString());
      String[] res=result.split(""String_Node_Str"");
      if (res.length != 2 || !res[0].equalsIgnoreCase(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"" + bridge + ""String_Node_Str""+ networkId+ ""String_Node_Str""+ res);
      }
    }
    return nw;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
}","/** 
 * This method creates a XenServer network and configures it for being used as a L2-in-L3 tunneled network
 */
private synchronized Network configureTunnelNetwork(Connection conn,long networkId,long hostId,int key){
  try {
    Network nw=findOrCreateTunnelNetwork(conn,networkId);
    String nwName=""String_Node_Str"" + key;
    String bridge=nw.getBridge(conn);
    Map<String,String> nwOtherConfig=nw.getOtherConfig(conn);
    String configuredHosts=nwOtherConfig.get(""String_Node_Str"");
    boolean configured=false;
    if (configuredHosts != null) {
      String hostIdsStr[]=configuredHosts.split(""String_Node_Str"");
      for (      String hostIdStr : hostIdsStr) {
        if (hostIdStr.equals(((Long)hostId).toString())) {
          configured=true;
          break;
        }
      }
    }
    if (!configured) {
      enableXenServerNetwork(conn,nw,nwName,""String_Node_Str"" + key);
      String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",bridge,""String_Node_Str"",String.valueOf(key),""String_Node_Str"",nw.getUuid(conn),""String_Node_Str"",((Long)hostId).toString());
      String[] res=result.split(""String_Node_Str"");
      if (res.length != 2 || !res[0].equalsIgnoreCase(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"" + bridge + ""String_Node_Str""+ networkId+ ""String_Node_Str""+ res);
      }
    }
    return nw;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
}"
89121,"@Override @DB public boolean updateLDAP(LDAPConfigCmd cmd){
  try {
    String hostname=cmd.getHostname();
    Integer port=cmd.getPort();
    String queryFilter=cmd.getQueryFilter();
    String searchBase=cmd.getSearchBase();
    Boolean useSSL=cmd.getUseSSL();
    String bindDN=cmd.getBindDN();
    String bindPasswd=cmd.getBindPassword();
    String trustStore=cmd.getTrustStore();
    String trustStorePassword=cmd.getTrustStorePassword();
    if (bindDN != null && bindPasswd == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Hashtable<String,String> env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    String protocol=""String_Node_Str"";
    if (new Boolean(useSSL)) {
      env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
      protocol=""String_Node_Str"";
      if (trustStore == null || trustStorePassword == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      System.setProperty(""String_Node_Str"",trustStore);
      System.setProperty(""String_Node_Str"",trustStorePassword);
    }
    env.put(Context.PROVIDER_URL,protocol + hostname + ""String_Node_Str""+ port);
    if (bindDN != null && bindPasswd != null) {
      env.put(Context.SECURITY_AUTHENTICATION,""String_Node_Str"");
      env.put(Context.SECURITY_PRINCIPAL,bindDN);
      env.put(Context.SECURITY_CREDENTIALS,bindPasswd);
    }
    DirContext ctx=new InitialDirContext(env);
    ctx.close();
    ConfigurationVO cvo=_configDao.findByName(LDAPParams.hostname.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.hostname.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(hostname);
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.port.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.port.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(port.toString());
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.queryfilter.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.queryfilter.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(queryFilter);
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.searchbase.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.searchbase.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(searchBase);
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.usessl.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.usessl.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(useSSL.toString());
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.dn.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.dn.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(bindDN);
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.passwd.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.passwd.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(bindPasswd));
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.truststore.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.truststore.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(trustStore);
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.truststorepass.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.truststorepass.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(trustStorePassword));
    _configDao.persist(cvo);
    s_logger.debug(""String_Node_Str"" + hostname);
  }
 catch (  NamingException ne) {
    ne.printStackTrace();
    throw new InvalidParameterValueException(""String_Node_Str"" + ne.getMessage() + (ne.getCause() != null ? (""String_Node_Str"" + ne.getCause().getMessage()) : ""String_Node_Str""));
  }
  return true;
}","@Override @DB public boolean updateLDAP(LDAPConfigCmd cmd){
  try {
    String hostname=cmd.getHostname();
    Integer port=cmd.getPort();
    String queryFilter=cmd.getQueryFilter();
    String searchBase=cmd.getSearchBase();
    Boolean useSSL=cmd.getUseSSL();
    String bindDN=cmd.getBindDN();
    String bindPasswd=cmd.getBindPassword();
    String trustStore=cmd.getTrustStore();
    String trustStorePassword=cmd.getTrustStorePassword();
    if (bindDN != null && bindPasswd == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Hashtable<String,String> env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    String protocol=""String_Node_Str"";
    if (new Boolean(useSSL)) {
      env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
      protocol=""String_Node_Str"";
      if (trustStore == null || trustStorePassword == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      System.setProperty(""String_Node_Str"",trustStore);
      System.setProperty(""String_Node_Str"",trustStorePassword);
    }
    env.put(Context.PROVIDER_URL,protocol + hostname + ""String_Node_Str""+ port);
    if (bindDN != null && bindPasswd != null) {
      env.put(Context.SECURITY_AUTHENTICATION,""String_Node_Str"");
      env.put(Context.SECURITY_PRINCIPAL,bindDN);
      env.put(Context.SECURITY_CREDENTIALS,bindPasswd);
    }
    DirContext ctx=new InitialDirContext(env);
    ctx.close();
    ConfigurationVO cvo=_configDao.findByName(LDAPParams.hostname.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.hostname.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(hostname));
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.port.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.port.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(port.toString()));
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.queryfilter.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.queryfilter.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(queryFilter));
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.searchbase.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.searchbase.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(searchBase));
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.usessl.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.usessl.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(useSSL.toString()));
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.dn.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.dn.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(bindDN));
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.passwd.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.passwd.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(bindPasswd));
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.truststore.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.truststore.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(trustStore));
    _configDao.persist(cvo);
    cvo=_configDao.findByName(LDAPParams.truststorepass.toString());
    if (cvo == null) {
      cvo=new ConfigurationVO(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",LDAPParams.truststorepass.toString(),null,""String_Node_Str"");
    }
    cvo.setValue(DBEncryptionUtil.encrypt(trustStorePassword));
    _configDao.persist(cvo);
    s_logger.debug(""String_Node_Str"" + hostname);
  }
 catch (  NamingException ne) {
    ne.printStackTrace();
    throw new InvalidParameterValueException(""String_Node_Str"" + ne.getMessage() + (ne.getCause() != null ? (""String_Node_Str"" + ne.getCause().getMessage()) : ""String_Node_Str""));
  }
  return true;
}"
89122,"@Override public boolean authenticate(String username,String password,Long domainId,Map<String,Object[]> requestParameters){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + username);
  }
  UserAccount user=_userAccountDao.getUserAccount(username,domainId);
  if (user == null) {
    s_logger.debug(""String_Node_Str"" + username + ""String_Node_Str""+ domainId);
    return false;
  }
  String url=_configDao.getValue(LDAPParams.hostname.toString());
  if (url == null) {
    s_logger.debug(""String_Node_Str"");
    return false;
  }
  String port=_configDao.getValue(LDAPParams.port.toString());
  String queryFilter=_configDao.getValue(LDAPParams.queryfilter.toString());
  String searchBase=_configDao.getValue(LDAPParams.searchbase.toString());
  String useSSL=_configDao.getValue(LDAPParams.usessl.toString());
  String bindDN=_configDao.getValue(LDAPParams.dn.toString());
  String bindPasswd=DBEncryptionUtil.decrypt(_configDao.getValue(LDAPParams.passwd.toString()));
  String trustStore=_configDao.getValue(LDAPParams.truststore.toString());
  String trustStorePassword=DBEncryptionUtil.decrypt(_configDao.getValue(LDAPParams.truststorepass.toString()));
  try {
    Hashtable<String,String> env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    String protocol=""String_Node_Str"";
    if (new Boolean(useSSL)) {
      env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
      protocol=""String_Node_Str"";
      System.setProperty(""String_Node_Str"",trustStore);
      System.setProperty(""String_Node_Str"",trustStorePassword);
    }
    env.put(Context.PROVIDER_URL,protocol + url + ""String_Node_Str""+ port);
    if (bindDN != null && bindPasswd != null) {
      env.put(Context.SECURITY_PRINCIPAL,bindDN);
      env.put(Context.SECURITY_CREDENTIALS,bindPasswd);
    }
 else {
      env.put(Context.SECURITY_AUTHENTICATION,""String_Node_Str"");
    }
    DirContext ctx=new InitialDirContext(env);
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",username);
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",user.getFirstname() + ""String_Node_Str"" + user.getLastname());
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",user.getEmail());
    SearchControls sc=new SearchControls();
    String[] searchFilter={""String_Node_Str""};
    sc.setReturningAttributes(new String[0]);
    sc.setReturningAttributes(searchFilter);
    sc.setSearchScope(SearchControls.SUBTREE_SCOPE);
    sc.setCountLimit(1);
    NamingEnumeration<SearchResult> answer=ctx.search(searchBase,queryFilter,sc);
    SearchResult sr=(SearchResult)answer.next();
    String cn=sr.getName();
    answer.close();
    ctx.close();
    s_logger.info(""String_Node_Str"" + cn);
    env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    protocol=""String_Node_Str"";
    if (new Boolean(useSSL)) {
      env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
      protocol=""String_Node_Str"";
    }
    env.put(Context.PROVIDER_URL,protocol + url + ""String_Node_Str""+ port);
    env.put(Context.SECURITY_PRINCIPAL,cn + ""String_Node_Str"" + searchBase);
    env.put(Context.SECURITY_CREDENTIALS,password);
    ctx=new InitialDirContext(env);
    ctx.close();
  }
 catch (  NamingException ne) {
    ne.printStackTrace();
    s_logger.warn(""String_Node_Str"" + ne.getMessage());
    return false;
  }
catch (  Exception e) {
    e.printStackTrace();
    s_logger.warn(""String_Node_Str"" + e.getMessage());
    return false;
  }
  return true;
}","@Override public boolean authenticate(String username,String password,Long domainId,Map<String,Object[]> requestParameters){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + username);
  }
  UserAccount user=_userAccountDao.getUserAccount(username,domainId);
  if (user == null) {
    s_logger.debug(""String_Node_Str"" + username + ""String_Node_Str""+ domainId);
    return false;
  }
  String url=_configDao.getValue(LDAPParams.hostname.toString());
  if (url == null) {
    s_logger.debug(""String_Node_Str"");
    return false;
  }
  String port=_configDao.getValue(LDAPParams.port.toString());
  String queryFilter=_configDao.getValue(LDAPParams.queryfilter.toString());
  String searchBase=_configDao.getValue(LDAPParams.searchbase.toString());
  String useSSL=_configDao.getValue(LDAPParams.usessl.toString());
  String bindDN=_configDao.getValue(LDAPParams.dn.toString());
  String bindPasswd=_configDao.getValue(LDAPParams.passwd.toString());
  String trustStore=_configDao.getValue(LDAPParams.truststore.toString());
  String trustStorePassword=_configDao.getValue(LDAPParams.truststorepass.toString());
  try {
    Hashtable<String,String> env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    String protocol=""String_Node_Str"";
    if (new Boolean(useSSL)) {
      env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
      protocol=""String_Node_Str"";
      System.setProperty(""String_Node_Str"",trustStore);
      System.setProperty(""String_Node_Str"",trustStorePassword);
    }
    env.put(Context.PROVIDER_URL,protocol + url + ""String_Node_Str""+ port);
    if (bindDN != null && bindPasswd != null) {
      env.put(Context.SECURITY_PRINCIPAL,bindDN);
      env.put(Context.SECURITY_CREDENTIALS,bindPasswd);
    }
 else {
      env.put(Context.SECURITY_AUTHENTICATION,""String_Node_Str"");
    }
    DirContext ctx=new InitialDirContext(env);
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",username);
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",user.getFirstname() + ""String_Node_Str"" + user.getLastname());
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",user.getEmail());
    SearchControls sc=new SearchControls();
    String[] searchFilter={""String_Node_Str""};
    sc.setReturningAttributes(new String[0]);
    sc.setReturningAttributes(searchFilter);
    sc.setSearchScope(SearchControls.SUBTREE_SCOPE);
    sc.setCountLimit(1);
    NamingEnumeration<SearchResult> answer=ctx.search(searchBase,queryFilter,sc);
    SearchResult sr=(SearchResult)answer.next();
    String cn=sr.getName();
    answer.close();
    ctx.close();
    s_logger.info(""String_Node_Str"" + cn);
    env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    protocol=""String_Node_Str"";
    if (new Boolean(useSSL)) {
      env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
      protocol=""String_Node_Str"";
    }
    env.put(Context.PROVIDER_URL,protocol + url + ""String_Node_Str""+ port);
    env.put(Context.SECURITY_PRINCIPAL,cn + ""String_Node_Str"" + searchBase);
    env.put(Context.SECURITY_CREDENTIALS,password);
    ctx=new InitialDirContext(env);
    ctx.close();
  }
 catch (  NamingException ne) {
    ne.printStackTrace();
    s_logger.warn(""String_Node_Str"" + ne.getMessage());
    return false;
  }
catch (  Exception e) {
    e.printStackTrace();
    s_logger.warn(""String_Node_Str"" + e.getMessage());
    return false;
  }
  return true;
}"
89123,"protected Pair<String,String> createVDIFromSnapshot(long userId,SnapshotVO snapshot,StoragePoolVO pool){
  String vdiUUID=null;
  Long snapshotId=snapshot.getId();
  Long volumeId=snapshot.getVolumeId();
  String primaryStoragePoolNameLabel=pool.getUuid();
  Long dcId=snapshot.getDataCenterId();
  String secondaryStoragePoolUrl=_snapMgr.getSecondaryStorageURL(snapshot);
  long accountId=snapshot.getAccountId();
  String backedUpSnapshotUuid=snapshot.getBackupSnapshotId();
  snapshot=_snapshotDao.findById(snapshotId);
  if (snapshot.getVersion().trim().equals(""String_Node_Str"")) {
    VolumeVO volume=_volsDao.findByIdIncludingRemoved(volumeId);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ volumeId+ ""String_Node_Str"");
    }
    if (volume.getTemplateId() == null) {
      _snapshotDao.updateSnapshotVersion(volumeId,""String_Node_Str"",""String_Node_Str"");
    }
 else {
      VMTemplateVO template=_templateDao.findByIdIncludingRemoved(volume.getTemplateId());
      if (template == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ volume.getTemplateId()+ ""String_Node_Str"");
      }
      Long templateId=template.getId();
      Long tmpltAccountId=template.getAccountId();
      if (!_snapshotDao.lockInLockTable(snapshotId.toString(),10)) {
        throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
      UpgradeSnapshotCommand cmd=new UpgradeSnapshotCommand(null,secondaryStoragePoolUrl,dcId,accountId,volumeId,templateId,tmpltAccountId,null,snapshot.getBackupSnapshotId(),snapshot.getName(),""String_Node_Str"");
      Answer answer=null;
      try {
        answer=sendToPool(pool,cmd);
      }
 catch (      StorageUnavailableException e) {
      }
 finally {
        _snapshotDao.unlockFromLockTable(snapshotId.toString());
      }
      if ((answer != null) && answer.getResult()) {
        _snapshotDao.updateSnapshotVersion(volumeId,""String_Node_Str"",""String_Node_Str"");
      }
 else {
        return new Pair<String,String>(null,""String_Node_Str"" + snapshot.getId());
      }
    }
  }
  String basicErrMsg=""String_Node_Str"" + snapshot.getName() + ""String_Node_Str""+ pool;
  try {
    if (snapshot.getSwiftId() != null) {
      _snapshotMgr.downloadSnapshotsFromSwift(snapshot);
    }
    CreateVolumeFromSnapshotCommand createVolumeFromSnapshotCommand=new CreateVolumeFromSnapshotCommand(primaryStoragePoolNameLabel,secondaryStoragePoolUrl,dcId,accountId,volumeId,backedUpSnapshotUuid,snapshot.getName(),_createVolumeFromSnapshotWait);
    CreateVolumeFromSnapshotAnswer answer;
    if (!_snapshotDao.lockInLockTable(snapshotId.toString(),10)) {
      throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
    }
    answer=(CreateVolumeFromSnapshotAnswer)sendToPool(pool,createVolumeFromSnapshotCommand);
    if (answer != null && answer.getResult()) {
      vdiUUID=answer.getVdi();
    }
 else {
      s_logger.error(basicErrMsg + ""String_Node_Str"" + ((answer == null) ? ""String_Node_Str"" : answer.getDetails()));
      throw new CloudRuntimeException(basicErrMsg);
    }
  }
 catch (  StorageUnavailableException e) {
    s_logger.error(basicErrMsg);
  }
 finally {
    if (snapshot.getSwiftId() != null) {
      _snapshotMgr.deleteSnapshotsDirForVolume(secondaryStoragePoolUrl,dcId,accountId,volumeId);
    }
    _snapshotDao.unlockFromLockTable(snapshotId.toString());
  }
  return new Pair<String,String>(vdiUUID,basicErrMsg);
}","protected Pair<String,String> createVDIFromSnapshot(long userId,SnapshotVO snapshot,StoragePoolVO pool){
  String vdiUUID=null;
  Long snapshotId=snapshot.getId();
  Long volumeId=snapshot.getVolumeId();
  String primaryStoragePoolNameLabel=pool.getUuid();
  Long dcId=snapshot.getDataCenterId();
  String secondaryStoragePoolUrl=_snapMgr.getSecondaryStorageURL(snapshot);
  long accountId=snapshot.getAccountId();
  String backedUpSnapshotUuid=snapshot.getBackupSnapshotId();
  snapshot=_snapshotDao.findById(snapshotId);
  if (snapshot.getVersion().trim().equals(""String_Node_Str"")) {
    VolumeVO volume=_volsDao.findByIdIncludingRemoved(volumeId);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ volumeId+ ""String_Node_Str"");
    }
    if (volume.getTemplateId() == null) {
      _snapshotDao.updateSnapshotVersion(volumeId,""String_Node_Str"",""String_Node_Str"");
    }
 else {
      VMTemplateVO template=_templateDao.findByIdIncludingRemoved(volume.getTemplateId());
      if (template == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ volume.getTemplateId()+ ""String_Node_Str"");
      }
      Long templateId=template.getId();
      Long tmpltAccountId=template.getAccountId();
      if (!_snapshotDao.lockInLockTable(snapshotId.toString(),10)) {
        throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
      UpgradeSnapshotCommand cmd=new UpgradeSnapshotCommand(null,secondaryStoragePoolUrl,dcId,accountId,volumeId,templateId,tmpltAccountId,null,snapshot.getBackupSnapshotId(),snapshot.getName(),""String_Node_Str"");
      Answer answer=null;
      try {
        answer=sendToPool(pool,cmd);
      }
 catch (      StorageUnavailableException e) {
      }
 finally {
        _snapshotDao.unlockFromLockTable(snapshotId.toString());
      }
      if ((answer != null) && answer.getResult()) {
        _snapshotDao.updateSnapshotVersion(volumeId,""String_Node_Str"",""String_Node_Str"");
      }
 else {
        return new Pair<String,String>(null,""String_Node_Str"" + snapshot.getId());
      }
    }
  }
  String basicErrMsg=""String_Node_Str"" + snapshot.getName() + ""String_Node_Str""+ pool;
  try {
    if (snapshot.getSwiftId() != null && snapshot.getSwiftId() != 0) {
      _snapshotMgr.downloadSnapshotsFromSwift(snapshot);
    }
    CreateVolumeFromSnapshotCommand createVolumeFromSnapshotCommand=new CreateVolumeFromSnapshotCommand(primaryStoragePoolNameLabel,secondaryStoragePoolUrl,dcId,accountId,volumeId,backedUpSnapshotUuid,snapshot.getName(),_createVolumeFromSnapshotWait);
    CreateVolumeFromSnapshotAnswer answer;
    if (!_snapshotDao.lockInLockTable(snapshotId.toString(),10)) {
      throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
    }
    answer=(CreateVolumeFromSnapshotAnswer)sendToPool(pool,createVolumeFromSnapshotCommand);
    if (answer != null && answer.getResult()) {
      vdiUUID=answer.getVdi();
    }
 else {
      s_logger.error(basicErrMsg + ""String_Node_Str"" + ((answer == null) ? ""String_Node_Str"" : answer.getDetails()));
      throw new CloudRuntimeException(basicErrMsg);
    }
  }
 catch (  StorageUnavailableException e) {
    s_logger.error(basicErrMsg);
  }
 finally {
    if (snapshot.getSwiftId() != null) {
      _snapshotMgr.deleteSnapshotsDirForVolume(secondaryStoragePoolUrl,dcId,accountId,volumeId);
    }
    _snapshotDao.unlockFromLockTable(snapshotId.toString());
  }
  return new Pair<String,String>(vdiUUID,basicErrMsg);
}"
89124,"protected void createVbd(Connect conn,VirtualMachineTO vmSpec,String vmName,LibvirtVMDef vm) throws InternalErrorException, LibvirtException, URISyntaxException {
  List<DiskDef> disks=new ArrayList<DiskDef>();
  for (  VolumeTO volume : vmSpec.getDisks()) {
    KVMPhysicalDisk physicalDisk=null;
    KVMStoragePool pool=null;
    if (volume.getType() == Volume.Type.ISO && volume.getPath() != null) {
      String volPath=volume.getPath();
      int index=volPath.lastIndexOf(""String_Node_Str"");
      String volDir=volPath.substring(0,index);
      String volName=volPath.substring(index + 1);
      KVMStoragePool secondaryStorage=_storagePoolMgr.getStoragePoolByURI(volDir);
      physicalDisk=secondaryStorage.getPhysicalDisk(volName);
    }
 else     if (volume.getType() != Volume.Type.ISO) {
      pool=_storagePoolMgr.getStoragePool(volume.getPoolUuid());
      physicalDisk=pool.getPhysicalDisk(volume.getPath());
    }
    String volPath=null;
    if (physicalDisk != null) {
      volPath=physicalDisk.getPath();
    }
    DiskDef.diskBus diskBusType=getGuestDiskModel(vmSpec.getOs());
    DiskDef disk=new DiskDef();
    if (volume.getType() == Volume.Type.ISO) {
      if (volPath == null) {
        disk.defISODisk(null);
      }
 else {
        disk.defISODisk(volPath);
      }
    }
 else {
      int devId=(int)volume.getDeviceId();
      if (pool.getType() == StoragePoolType.CLVM) {
        disk.defBlockBasedDisk(physicalDisk.getPath(),devId,diskBusType);
      }
 else {
        if (volume.getType() == Volume.Type.DATADISK) {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,DiskDef.diskBus.VIRTIO,DiskDef.diskFmtType.QCOW2);
        }
 else {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,diskBusType,DiskDef.diskFmtType.QCOW2);
        }
      }
      disks.add(devId,disk);
      continue;
    }
    vm.getDevices().addDevice(disk);
  }
  for (  DiskDef disk : disks) {
    vm.getDevices().addDevice(disk);
  }
  if (vmSpec.getType() != VirtualMachine.Type.User) {
    if (_sysvmISOPath != null) {
      DiskDef iso=new DiskDef();
      iso.defISODisk(_sysvmISOPath);
      vm.getDevices().addDevice(iso);
    }
    createPatchVbd(conn,vmName,vm,vmSpec);
  }
}","protected void createVbd(Connect conn,VirtualMachineTO vmSpec,String vmName,LibvirtVMDef vm) throws InternalErrorException, LibvirtException, URISyntaxException {
  List<VolumeTO> disks=Arrays.asList(vmSpec.getDisks());
  Collections.sort(disks,new Comparator<VolumeTO>(){
    @Override public int compare(    VolumeTO arg0,    VolumeTO arg1){
      return arg0.getDeviceId() > arg1.getDeviceId() ? 1 : -1;
    }
  }
);
  for (  VolumeTO volume : disks) {
    KVMPhysicalDisk physicalDisk=null;
    KVMStoragePool pool=null;
    if (volume.getType() == Volume.Type.ISO && volume.getPath() != null) {
      String volPath=volume.getPath();
      int index=volPath.lastIndexOf(""String_Node_Str"");
      String volDir=volPath.substring(0,index);
      String volName=volPath.substring(index + 1);
      KVMStoragePool secondaryStorage=_storagePoolMgr.getStoragePoolByURI(volDir);
      physicalDisk=secondaryStorage.getPhysicalDisk(volName);
    }
 else     if (volume.getType() != Volume.Type.ISO) {
      pool=_storagePoolMgr.getStoragePool(volume.getPoolUuid());
      physicalDisk=pool.getPhysicalDisk(volume.getPath());
    }
    String volPath=null;
    if (physicalDisk != null) {
      volPath=physicalDisk.getPath();
    }
    DiskDef.diskBus diskBusType=getGuestDiskModel(vmSpec.getOs());
    DiskDef disk=new DiskDef();
    if (volume.getType() == Volume.Type.ISO) {
      if (volPath == null) {
        disk.defISODisk(null);
      }
 else {
        disk.defISODisk(volPath);
      }
    }
 else {
      int devId=(int)volume.getDeviceId();
      if (pool.getType() == StoragePoolType.CLVM) {
        disk.defBlockBasedDisk(physicalDisk.getPath(),devId,diskBusType);
      }
 else {
        if (volume.getType() == Volume.Type.DATADISK) {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,DiskDef.diskBus.VIRTIO,DiskDef.diskFmtType.QCOW2);
        }
 else {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,diskBusType,DiskDef.diskFmtType.QCOW2);
        }
      }
    }
    vm.getDevices().addDevice(disk);
  }
  if (vmSpec.getType() != VirtualMachine.Type.User) {
    if (_sysvmISOPath != null) {
      DiskDef iso=new DiskDef();
      iso.defISODisk(_sysvmISOPath);
      vm.getDevices().addDevice(iso);
    }
    createPatchVbd(conn,vmName,vm,vmSpec);
  }
}"
89125,"public void OnReceiveClusterServicePdu(ClusterServicePdu pdu){
  try {
    _clusterPduIncomingQueue.put(pdu);
  }
 catch (  InterruptedException e) {
    s_logger.warn(""String_Node_Str"" + _gson.toJson(pdu) + ""String_Node_Str"");
  }
}","public void OnReceiveClusterServicePdu(ClusterServicePdu pdu){
  addIncomingClusterPdu(pdu);
}"
89126,"private void onSendingClusterPdu(){
  while (true) {
    try {
      ClusterServicePdu pdu=_clusterPduOutgoingQueue.take();
      ClusterService peerService=null;
      for (int i=0; i < 2; i++) {
        try {
          peerService=getPeerService(pdu.getDestPeer());
        }
 catch (        RemoteException e) {
          s_logger.error(""String_Node_Str"" + pdu.getDestPeer());
        }
        if (peerService != null) {
          try {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + getSelfPeerName() + ""String_Node_Str""+ pdu.getDestPeer()+ ""String_Node_Str""+ pdu.getAgentId()+ ""String_Node_Str""+ pdu.getSequenceId()+ ""String_Node_Str""+ pdu.getAckSequenceId()+ ""String_Node_Str""+ pdu.getJsonPackage());
            }
            long startTick=System.currentTimeMillis();
            String strResult=peerService.execute(pdu);
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + getSelfPeerName() + ""String_Node_Str""+ pdu.getDestPeer()+ ""String_Node_Str""+ (System.currentTimeMillis() - startTick)+ ""String_Node_Str""+ pdu.getAgentId()+ ""String_Node_Str""+ pdu.getSequenceId()+ ""String_Node_Str""+ pdu.getAckSequenceId()+ ""String_Node_Str""+ pdu.getJsonPackage());
            }
            if (""String_Node_Str"".equals(strResult))             break;
          }
 catch (          RemoteException e) {
            invalidatePeerService(pdu.getDestPeer());
            if (s_logger.isInfoEnabled()) {
              s_logger.info(""String_Node_Str"" + pdu.getDestPeer() + ""String_Node_Str""+ i+ ""String_Node_Str""+ e.getMessage());
            }
          }
        }
      }
    }
 catch (    InterruptedException e) {
    }
catch (    Throwable e) {
      s_logger.error(""String_Node_Str"",e);
    }
  }
}","private void onSendingClusterPdu(){
  while (true) {
    try {
      ClusterServicePdu pdu=popOutgoingClusterPdu(1000);
      if (pdu == null)       continue;
      ClusterService peerService=null;
      for (int i=0; i < 2; i++) {
        try {
          peerService=getPeerService(pdu.getDestPeer());
        }
 catch (        RemoteException e) {
          s_logger.error(""String_Node_Str"" + pdu.getDestPeer());
        }
        if (peerService != null) {
          try {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + getSelfPeerName() + ""String_Node_Str""+ pdu.getDestPeer()+ ""String_Node_Str""+ pdu.getAgentId()+ ""String_Node_Str""+ pdu.getSequenceId()+ ""String_Node_Str""+ pdu.getAckSequenceId()+ ""String_Node_Str""+ pdu.getJsonPackage());
            }
            long startTick=System.currentTimeMillis();
            String strResult=peerService.execute(pdu);
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + getSelfPeerName() + ""String_Node_Str""+ pdu.getDestPeer()+ ""String_Node_Str""+ (System.currentTimeMillis() - startTick)+ ""String_Node_Str""+ pdu.getAgentId()+ ""String_Node_Str""+ pdu.getSequenceId()+ ""String_Node_Str""+ pdu.getAckSequenceId()+ ""String_Node_Str""+ pdu.getJsonPackage());
            }
            if (""String_Node_Str"".equals(strResult))             break;
          }
 catch (          RemoteException e) {
            invalidatePeerService(pdu.getDestPeer());
            if (s_logger.isInfoEnabled()) {
              s_logger.info(""String_Node_Str"" + pdu.getDestPeer() + ""String_Node_Str""+ i+ ""String_Node_Str""+ e.getMessage());
            }
          }
        }
      }
    }
 catch (    Throwable e) {
      s_logger.error(""String_Node_Str"",e);
    }
  }
}"
89127,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + name);
  }
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  _agentMgr=locator.getManager(AgentManager.class);
  if (_agentMgr == null) {
    throw new ConfigurationException(""String_Node_Str"" + AgentManager.class.getName());
  }
  _mshostDao=locator.getDao(ManagementServerHostDao.class);
  if (_mshostDao == null) {
    throw new ConfigurationException(""String_Node_Str"" + ManagementServerHostDao.class.getName());
  }
  _mshostPeerDao=locator.getDao(ManagementServerHostPeerDao.class);
  if (_mshostPeerDao == null) {
    throw new ConfigurationException(""String_Node_Str"" + ManagementServerHostPeerDao.class.getName());
  }
  _hostDao=locator.getDao(HostDao.class);
  if (_hostDao == null) {
    throw new ConfigurationException(""String_Node_Str"" + HostDao.class.getName());
  }
  _hostTransferDao=locator.getDao(HostTransferMapDao.class);
  if (_hostTransferDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String value=configs.get(""String_Node_Str"");
  if (value != null) {
    _heartbeatInterval=NumbersUtil.parseInt(value,ClusterManager.DEFAULT_HEARTBEAT_INTERVAL);
  }
  value=configs.get(""String_Node_Str"");
  if (value != null) {
    _heartbeatThreshold=NumbersUtil.parseInt(value,ClusterManager.DEFAULT_HEARTBEAT_THRESHOLD);
  }
  File dbPropsFile=PropertiesUtil.findConfigFile(""String_Node_Str"");
  Properties dbProps=new Properties();
  try {
    dbProps.load(new FileInputStream(dbPropsFile));
  }
 catch (  FileNotFoundException e) {
    throw new ConfigurationException(""String_Node_Str"");
  }
catch (  IOException e) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _clusterNodeIP=dbProps.getProperty(""String_Node_Str"");
  if (_clusterNodeIP == null) {
    _clusterNodeIP=""String_Node_Str"";
  }
  _clusterNodeIP=_clusterNodeIP.trim();
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + _clusterNodeIP);
  }
  if (!NetUtils.isLocalAddress(_clusterNodeIP)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Adapters<ClusterServiceAdapter> adapters=locator.getAdapters(ClusterServiceAdapter.class);
  if (adapters == null || !adapters.isSet()) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Enumeration<ClusterServiceAdapter> it=adapters.enumeration();
  if (it.hasMoreElements()) {
    _currentServiceAdapter=it.nextElement();
  }
  if (_currentServiceAdapter == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _agentLBEnabled=Boolean.valueOf(configDao.getValue(Config.AgentLbEnable.key()));
  String connectedAgentsThreshold=configs.get(""String_Node_Str"");
  if (connectedAgentsThreshold != null) {
    _connectedAgentsThreshold=Double.parseDouble(connectedAgentsThreshold);
  }
  this.registerListener(new LockMasterListener(_msId));
  checkConflicts();
  _executor.execute(getClusterPduSendingTask());
  for (int i=0; i < 5; i++)   _executor.execute(getClusterPduNotificationTask());
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"");
  }
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + name);
  }
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  _agentMgr=locator.getManager(AgentManager.class);
  if (_agentMgr == null) {
    throw new ConfigurationException(""String_Node_Str"" + AgentManager.class.getName());
  }
  _mshostDao=locator.getDao(ManagementServerHostDao.class);
  if (_mshostDao == null) {
    throw new ConfigurationException(""String_Node_Str"" + ManagementServerHostDao.class.getName());
  }
  _mshostPeerDao=locator.getDao(ManagementServerHostPeerDao.class);
  if (_mshostPeerDao == null) {
    throw new ConfigurationException(""String_Node_Str"" + ManagementServerHostPeerDao.class.getName());
  }
  _hostDao=locator.getDao(HostDao.class);
  if (_hostDao == null) {
    throw new ConfigurationException(""String_Node_Str"" + HostDao.class.getName());
  }
  _hostTransferDao=locator.getDao(HostTransferMapDao.class);
  if (_hostTransferDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String value=configs.get(""String_Node_Str"");
  if (value != null) {
    _heartbeatInterval=NumbersUtil.parseInt(value,ClusterManager.DEFAULT_HEARTBEAT_INTERVAL);
  }
  value=configs.get(""String_Node_Str"");
  if (value != null) {
    _heartbeatThreshold=NumbersUtil.parseInt(value,ClusterManager.DEFAULT_HEARTBEAT_THRESHOLD);
  }
  File dbPropsFile=PropertiesUtil.findConfigFile(""String_Node_Str"");
  Properties dbProps=new Properties();
  try {
    dbProps.load(new FileInputStream(dbPropsFile));
  }
 catch (  FileNotFoundException e) {
    throw new ConfigurationException(""String_Node_Str"");
  }
catch (  IOException e) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _clusterNodeIP=dbProps.getProperty(""String_Node_Str"");
  if (_clusterNodeIP == null) {
    _clusterNodeIP=""String_Node_Str"";
  }
  _clusterNodeIP=_clusterNodeIP.trim();
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + _clusterNodeIP);
  }
  if (!NetUtils.isLocalAddress(_clusterNodeIP)) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _executor.execute(getClusterPduSendingTask());
  for (int i=0; i < 5; i++)   _executor.execute(getClusterPduNotificationTask());
  Adapters<ClusterServiceAdapter> adapters=locator.getAdapters(ClusterServiceAdapter.class);
  if (adapters == null || !adapters.isSet()) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Enumeration<ClusterServiceAdapter> it=adapters.enumeration();
  if (it.hasMoreElements()) {
    _currentServiceAdapter=it.nextElement();
  }
  if (_currentServiceAdapter == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _agentLBEnabled=Boolean.valueOf(configDao.getValue(Config.AgentLbEnable.key()));
  String connectedAgentsThreshold=configs.get(""String_Node_Str"");
  if (connectedAgentsThreshold != null) {
    _connectedAgentsThreshold=Double.parseDouble(connectedAgentsThreshold);
  }
  this.registerListener(new LockMasterListener(_msId));
  checkConflicts();
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"");
  }
  return true;
}"
89128,"private void onNotifyingClusterPdu(){
  while (true) {
    try {
      ClusterServicePdu pdu=_clusterPduOutgoingQueue.take();
      if (pdu.isRequest()) {
        String result=dispatchClusterServicePdu(pdu);
        if (result == null)         result=""String_Node_Str"";
        ClusterServicePdu responsePdu=new ClusterServicePdu();
        responsePdu.setSourcePeer(pdu.getDestPeer());
        responsePdu.setDestPeer(pdu.getSourcePeer());
        responsePdu.setAckSequenceId(pdu.getSequenceId());
        responsePdu.setJsonPackage(result);
        _clusterPduOutgoingQueue.put(responsePdu);
      }
 else {
        ClusterServiceRequestPdu requestPdu=popRequestPdu(pdu.getAckSequenceId());
        if (requestPdu != null) {
          requestPdu.setResponseResult(pdu.getJsonPackage());
synchronized (requestPdu) {
            requestPdu.notifyAll();
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + _gson.toJson(pdu));
        }
      }
    }
 catch (    InterruptedException e) {
    }
catch (    Throwable e) {
      s_logger.error(""String_Node_Str"",e);
    }
  }
}","private void onNotifyingClusterPdu(){
  while (true) {
    try {
      ClusterServicePdu pdu=popIncomingClusterPdu(1000);
      if (pdu == null)       continue;
      if (pdu.isRequest()) {
        String result=dispatchClusterServicePdu(pdu);
        if (result == null)         result=""String_Node_Str"";
        ClusterServicePdu responsePdu=new ClusterServicePdu();
        responsePdu.setSourcePeer(pdu.getDestPeer());
        responsePdu.setDestPeer(pdu.getSourcePeer());
        responsePdu.setAckSequenceId(pdu.getSequenceId());
        responsePdu.setJsonPackage(result);
        addOutgoingClusterPdu(responsePdu);
      }
 else {
        ClusterServiceRequestPdu requestPdu=popRequestPdu(pdu.getAckSequenceId());
        if (requestPdu != null) {
          requestPdu.setResponseResult(pdu.getJsonPackage());
synchronized (requestPdu) {
            requestPdu.notifyAll();
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + _gson.toJson(pdu));
        }
      }
    }
 catch (    Throwable e) {
      s_logger.error(""String_Node_Str"",e);
    }
  }
}"
89129,"public void run(){
  HttpContext context=new BasicHttpContext(null);
  try {
    if (s_logger.isTraceEnabled())     s_logger.trace(""String_Node_Str"" + conn.getRemoteAddress().toString());
    _httpService.handleRequest(conn,context);
    if (s_logger.isTraceEnabled())     s_logger.trace(""String_Node_Str"" + conn.getRemoteAddress().toString() + ""String_Node_Str"");
  }
 catch (  ConnectionClosedException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
catch (  HttpException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
 finally {
    try {
      conn.shutdown();
      conn.close();
    }
 catch (    IOException ignore) {
    }
  }
}","public void run(){
  HttpContext context=new BasicHttpContext(null);
  try {
    if (s_logger.isTraceEnabled())     s_logger.trace(""String_Node_Str"" + conn.getRemoteAddress().toString());
    _httpService.handleRequest(conn,context);
    if (s_logger.isTraceEnabled())     s_logger.trace(""String_Node_Str"" + conn.getRemoteAddress().toString() + ""String_Node_Str"");
  }
 catch (  ConnectionClosedException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
catch (  IOException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
catch (  HttpException ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
 finally {
    try {
      conn.close();
    }
 catch (    IOException ignore) {
      s_logger.error(""String_Node_Str"",ignore);
    }
  }
}"
89130,"@Override public boolean ping(String callingPeer) throws RemoteException {
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + _serviceUrl);
  }
  HttpClient client=getHttpClient();
  PostMethod method=new PostMethod(_serviceUrl);
  method.addParameter(""String_Node_Str"",Integer.toString(RemoteMethodConstants.METHOD_PING));
  method.addParameter(""String_Node_Str"",callingPeer);
  String returnVal=executePostMethod(client,method);
  if (""String_Node_Str"".equalsIgnoreCase(returnVal)) {
    return true;
  }
  return false;
}","@Override public boolean ping(String callingPeer) throws RemoteException {
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + _serviceUrl);
  }
  HttpClient client=getHttpClient();
  PostMethod method=new PostMethod(_serviceUrl);
  method.addParameter(""String_Node_Str"",Integer.toString(RemoteMethodConstants.METHOD_PING));
  method.addParameter(""String_Node_Str"",callingPeer);
  try {
    String returnVal=executePostMethod(client,method);
    if (""String_Node_Str"".equalsIgnoreCase(returnVal)) {
      return true;
    }
    return false;
  }
  finally {
    method.releaseConnection();
  }
}"
89131,"private HttpClient getHttpClient(){
  HttpClient client=new HttpClient();
  HttpClientParams clientParams=new HttpClientParams();
  clientParams.setSoTimeout(this._requestTimeoutSeconds * 1000);
  client.setParams(clientParams);
  return client;
}","private HttpClient getHttpClient(){
  if (s_client == null) {
    MultiThreadedHttpConnectionManager mgr=new MultiThreadedHttpConnectionManager();
    mgr.getParams().setDefaultMaxConnectionsPerHost(1);
    mgr.getParams().setMaxTotalConnections(1000);
    s_client=new HttpClient(mgr);
    HttpClientParams clientParams=new HttpClientParams();
    clientParams.setSoTimeout(_requestTimeoutSeconds * 1000);
    s_client.setParams(clientParams);
  }
  return s_client;
}"
89132,"@Override public String execute(ClusterServicePdu pdu) throws RemoteException {
  HttpClient client=getHttpClient();
  PostMethod method=new PostMethod(_serviceUrl);
  method.addParameter(""String_Node_Str"",Integer.toString(RemoteMethodConstants.METHOD_DELIVER_PDU));
  method.addParameter(""String_Node_Str"",pdu.getSourcePeer());
  method.addParameter(""String_Node_Str"",pdu.getDestPeer());
  method.addParameter(""String_Node_Str"",Long.toString(pdu.getSequenceId()));
  method.addParameter(""String_Node_Str"",Long.toString(pdu.getAckSequenceId()));
  method.addParameter(""String_Node_Str"",Long.toString(pdu.getAgentId()));
  method.addParameter(""String_Node_Str"",pdu.getJsonPackage());
  method.addParameter(""String_Node_Str"",pdu.isStopOnError() ? ""String_Node_Str"" : ""String_Node_Str"");
  method.addParameter(""String_Node_Str"",pdu.isRequest() ? ""String_Node_Str"" : ""String_Node_Str"");
  return executePostMethod(client,method);
}","@Override public String execute(ClusterServicePdu pdu) throws RemoteException {
  HttpClient client=getHttpClient();
  PostMethod method=new PostMethod(_serviceUrl);
  method.addParameter(""String_Node_Str"",Integer.toString(RemoteMethodConstants.METHOD_DELIVER_PDU));
  method.addParameter(""String_Node_Str"",pdu.getSourcePeer());
  method.addParameter(""String_Node_Str"",pdu.getDestPeer());
  method.addParameter(""String_Node_Str"",Long.toString(pdu.getSequenceId()));
  method.addParameter(""String_Node_Str"",Long.toString(pdu.getAckSequenceId()));
  method.addParameter(""String_Node_Str"",Long.toString(pdu.getAgentId()));
  method.addParameter(""String_Node_Str"",pdu.getJsonPackage());
  method.addParameter(""String_Node_Str"",pdu.isStopOnError() ? ""String_Node_Str"" : ""String_Node_Str"");
  method.addParameter(""String_Node_Str"",pdu.isRequest() ? ""String_Node_Str"" : ""String_Node_Str"");
  try {
    return executePostMethod(client,method);
  }
  finally {
    method.releaseConnection();
  }
}"
89133,"@Override @DB public boolean associateIpAddressListToAccount(long userId,long accountId,long zoneId,Long vlanId,Network network) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, ResourceAllocationException {
  Account owner=_accountMgr.getActiveAccountById(accountId);
  boolean createNetwork=false;
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (network == null) {
    List<? extends Network> networks=getIsolatedNetworksOwnedByAccountInZone(zoneId,owner);
    if (networks.size() == 0) {
      createNetwork=true;
    }
 else {
      network=networks.get(0);
    }
  }
  if (createNetwork) {
    List<? extends NetworkOffering> offerings=_configMgr.listNetworkOfferings(TrafficType.Guest,false);
    PhysicalNetwork physicalNetwork=translateZoneIdToPhysicalNetwork(zoneId);
    network=createGuestNetwork(offerings.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",null,null,null,null,owner,false,null,physicalNetwork,zoneId,ACLType.Account,null);
    if (network == null) {
      s_logger.warn(""String_Node_Str"" + accountId + ""String_Node_Str""+ zoneId);
      return false;
    }
  }
  boolean allocateSourceNat=false;
  List<IPAddressVO> sourceNat=_ipAddressDao.listByAssociatedNetwork(network.getId(),true);
  if (sourceNat.isEmpty()) {
    allocateSourceNat=true;
  }
  List<IPAddressVO> ips=_ipAddressDao.listByVlanId(vlanId);
  boolean isSourceNatAllocated=false;
  for (  IPAddressVO addr : ips) {
    if (addr.getState() != State.Allocated) {
      if (!isSourceNatAllocated && allocateSourceNat) {
        addr.setSourceNat(true);
        isSourceNatAllocated=true;
      }
 else {
        addr.setSourceNat(false);
      }
      addr.setAssociatedWithNetworkId(network.getId());
      addr.setAllocatedTime(new Date());
      addr.setAllocatedInDomainId(owner.getDomainId());
      addr.setAllocatedToAccountId(owner.getId());
      addr.setSystem(false);
      addr.setState(IpAddress.State.Allocating);
      markPublicIpAsAllocated(addr);
    }
  }
  txn.commit();
  return true;
}","@Override @DB public boolean associateIpAddressListToAccount(long userId,long accountId,long zoneId,Long vlanId,Network network) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, ResourceAllocationException {
  Account owner=_accountMgr.getActiveAccountById(accountId);
  boolean createNetwork=false;
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (network == null) {
    List<? extends Network> networks=getIsolatedNetworksWithSourceNATOwnedByAccountInZone(zoneId,owner);
    if (networks.size() == 0) {
      createNetwork=true;
    }
 else     if (networks.size() == 1) {
      network=networks.get(0);
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (createNetwork) {
    List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    if (requiredOfferings.size() < 1) {
      throw new CloudRuntimeException(""String_Node_Str"" + Availability.Required + ""String_Node_Str"");
    }
    PhysicalNetwork physicalNetwork=translateZoneIdToPhysicalNetwork(zoneId);
    if (requiredOfferings.get(0).getState() == NetworkOffering.State.Enabled) {
      s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str""+ requiredOfferings.get(0).getId()+ ""String_Node_Str"");
      network=createGuestNetwork(requiredOfferings.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",null,null,null,null,owner,false,null,physicalNetwork,zoneId,ACLType.Account,null);
      if (network == null) {
        s_logger.warn(""String_Node_Str"" + accountId + ""String_Node_Str""+ zoneId);
        throw new CloudRuntimeException(""String_Node_Str"" + accountId + ""String_Node_Str""+ zoneId);
      }
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + requiredOfferings.get(0).getId() + ""String_Node_Str""+ NetworkOffering.State.Enabled);
    }
  }
  boolean allocateSourceNat=false;
  List<IPAddressVO> sourceNat=_ipAddressDao.listByAssociatedNetwork(network.getId(),true);
  if (sourceNat.isEmpty()) {
    allocateSourceNat=true;
  }
  List<IPAddressVO> ips=_ipAddressDao.listByVlanId(vlanId);
  boolean isSourceNatAllocated=false;
  for (  IPAddressVO addr : ips) {
    if (addr.getState() != State.Allocated) {
      if (!isSourceNatAllocated && allocateSourceNat) {
        addr.setSourceNat(true);
        isSourceNatAllocated=true;
      }
 else {
        addr.setSourceNat(false);
      }
      addr.setAssociatedWithNetworkId(network.getId());
      addr.setAllocatedTime(new Date());
      addr.setAllocatedInDomainId(owner.getDomainId());
      addr.setAllocatedToAccountId(owner.getId());
      addr.setSystem(false);
      addr.setState(IpAddress.State.Allocating);
      markPublicIpAsAllocated(addr);
    }
  }
  txn.commit();
  return true;
}"
89134,"protected NetworkDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getTrafficType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getCidr(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getBroadcastDomainType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getNetworkOfferingId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getDataCenterId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getAccountId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getRelated(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getGuestType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getPhysicalNetworkId(),Op.EQ);
  AllFieldsSearch.done();
  AccountSearch=createSearchBuilder();
  AccountSearch.and(""String_Node_Str"",AccountSearch.entity().getNetworkOfferingId(),Op.EQ);
  SearchBuilder<NetworkAccountVO> join=_accountsDao.createSearchBuilder();
  join.and(""String_Node_Str"",join.entity().getAccountId(),Op.EQ);
  AccountSearch.join(""String_Node_Str"",join,AccountSearch.entity().getId(),join.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  AccountSearch.and(""String_Node_Str"",AccountSearch.entity().getDataCenterId(),Op.EQ);
  AccountSearch.and(""String_Node_Str"",AccountSearch.entity().getCidr(),Op.EQ);
  AccountSearch.done();
  RelatedConfigSearch=createSearchBuilder();
  RelatedConfigSearch.and(""String_Node_Str"",RelatedConfigSearch.entity().getNetworkOfferingId(),Op.EQ);
  RelatedConfigSearch.and(""String_Node_Str"",RelatedConfigSearch.entity().getDataCenterId(),Op.EQ);
  SearchBuilder<NetworkAccountVO> join2=_accountsDao.createSearchBuilder();
  join2.and(""String_Node_Str"",join2.entity().getAccountId(),Op.EQ);
  RelatedConfigSearch.join(""String_Node_Str"",join2,join2.entity().getNetworkId(),RelatedConfigSearch.entity().getId(),JoinType.INNER);
  RelatedConfigSearch.done();
  AccountNetworkSearch=createSearchBuilder();
  AccountNetworkSearch.and(""String_Node_Str"",AccountNetworkSearch.entity().getId(),Op.EQ);
  SearchBuilder<NetworkAccountVO> mapJoin=_accountsDao.createSearchBuilder();
  mapJoin.and(""String_Node_Str"",mapJoin.entity().getAccountId(),Op.EQ);
  AccountNetworkSearch.join(""String_Node_Str"",mapJoin,AccountNetworkSearch.entity().getId(),mapJoin.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  AccountNetworkSearch.done();
  ZoneBroadcastUriSearch=createSearchBuilder();
  ZoneBroadcastUriSearch.and(""String_Node_Str"",ZoneBroadcastUriSearch.entity().getDataCenterId(),Op.EQ);
  ZoneBroadcastUriSearch.and(""String_Node_Str"",ZoneBroadcastUriSearch.entity().getBroadcastUri(),Op.EQ);
  ZoneBroadcastUriSearch.done();
  ZoneSecurityGroupSearch=createSearchBuilder();
  ZoneSecurityGroupSearch.and(""String_Node_Str"",ZoneSecurityGroupSearch.entity().getDataCenterId(),Op.EQ);
  SearchBuilder<NetworkServiceMapVO> join1=_ntwkSvcMap.createSearchBuilder();
  join1.and(""String_Node_Str"",join1.entity().getService(),Op.EQ);
  ZoneSecurityGroupSearch.join(""String_Node_Str"",join1,ZoneSecurityGroupSearch.entity().getId(),join1.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  ZoneSecurityGroupSearch.done();
  CountByOfferingId=createSearchBuilder(Long.class);
  CountByOfferingId.select(null,Func.COUNT,CountByOfferingId.entity().getId());
  CountByOfferingId.and(""String_Node_Str"",CountByOfferingId.entity().getNetworkOfferingId(),Op.EQ);
  CountByOfferingId.and(""String_Node_Str"",CountByOfferingId.entity().getRemoved(),Op.NULL);
  CountByOfferingId.done();
  PhysicalNetworkSearch=createSearchBuilder();
  PhysicalNetworkSearch.and(""String_Node_Str"",PhysicalNetworkSearch.entity().getPhysicalNetworkId(),Op.EQ);
  PhysicalNetworkSearch.done();
  SecurityGroupSearch=createSearchBuilder();
  SearchBuilder<NetworkServiceMapVO> join3=_ntwkSvcMap.createSearchBuilder();
  join3.and(""String_Node_Str"",join3.entity().getService(),Op.EQ);
  SecurityGroupSearch.join(""String_Node_Str"",join3,SecurityGroupSearch.entity().getId(),join3.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  SecurityGroupSearch.done();
  NetworksCount=createSearchBuilder(Integer.class);
  NetworksCount.select(null,Func.COUNT,NetworksCount.entity().getId());
  NetworksCount.and(""String_Node_Str"",NetworksCount.entity().getNetworkOfferingId(),SearchCriteria.Op.EQ);
  NetworksCount.done();
  NetworksRegularUserCanCreateSearch=createSearchBuilder(Long.class);
  NetworksRegularUserCanCreateSearch.and(""String_Node_Str"",NetworksRegularUserCanCreateSearch.entity().getAclType(),Op.EQ);
  NetworksRegularUserCanCreateSearch.select(null,Func.COUNT,NetworksRegularUserCanCreateSearch.entity().getId());
  SearchBuilder<NetworkAccountVO> join4=_accountsDao.createSearchBuilder();
  join4.and(""String_Node_Str"",join4.entity().getAccountId(),Op.EQ);
  join4.and(""String_Node_Str"",join4.entity().isOwner(),Op.EQ);
  NetworksRegularUserCanCreateSearch.join(""String_Node_Str"",join4,NetworksRegularUserCanCreateSearch.entity().getId(),join4.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<NetworkOfferingVO> join5=_ntwkOffDao.createSearchBuilder();
  join5.and(""String_Node_Str"",join5.entity().getSpecifyVlan(),Op.EQ);
  NetworksRegularUserCanCreateSearch.join(""String_Node_Str"",join5,NetworksRegularUserCanCreateSearch.entity().getNetworkOfferingId(),join5.entity().getId(),JoinBuilder.JoinType.INNER);
  NetworksRegularUserCanCreateSearch.done();
  _tgMacAddress=_tgs.get(""String_Node_Str"");
}","protected NetworkDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getTrafficType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getCidr(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getBroadcastDomainType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getNetworkOfferingId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getDataCenterId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getAccountId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getRelated(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getGuestType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getPhysicalNetworkId(),Op.EQ);
  AllFieldsSearch.done();
  AccountSearch=createSearchBuilder();
  AccountSearch.and(""String_Node_Str"",AccountSearch.entity().getNetworkOfferingId(),Op.EQ);
  SearchBuilder<NetworkAccountVO> join=_accountsDao.createSearchBuilder();
  join.and(""String_Node_Str"",join.entity().getAccountId(),Op.EQ);
  AccountSearch.join(""String_Node_Str"",join,AccountSearch.entity().getId(),join.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  AccountSearch.and(""String_Node_Str"",AccountSearch.entity().getDataCenterId(),Op.EQ);
  AccountSearch.and(""String_Node_Str"",AccountSearch.entity().getCidr(),Op.EQ);
  AccountSearch.done();
  RelatedConfigSearch=createSearchBuilder();
  RelatedConfigSearch.and(""String_Node_Str"",RelatedConfigSearch.entity().getNetworkOfferingId(),Op.EQ);
  RelatedConfigSearch.and(""String_Node_Str"",RelatedConfigSearch.entity().getDataCenterId(),Op.EQ);
  SearchBuilder<NetworkAccountVO> join2=_accountsDao.createSearchBuilder();
  join2.and(""String_Node_Str"",join2.entity().getAccountId(),Op.EQ);
  RelatedConfigSearch.join(""String_Node_Str"",join2,join2.entity().getNetworkId(),RelatedConfigSearch.entity().getId(),JoinType.INNER);
  RelatedConfigSearch.done();
  AccountNetworkSearch=createSearchBuilder();
  AccountNetworkSearch.and(""String_Node_Str"",AccountNetworkSearch.entity().getId(),Op.EQ);
  SearchBuilder<NetworkAccountVO> mapJoin=_accountsDao.createSearchBuilder();
  mapJoin.and(""String_Node_Str"",mapJoin.entity().getAccountId(),Op.EQ);
  AccountNetworkSearch.join(""String_Node_Str"",mapJoin,AccountNetworkSearch.entity().getId(),mapJoin.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  AccountNetworkSearch.done();
  ZoneBroadcastUriSearch=createSearchBuilder();
  ZoneBroadcastUriSearch.and(""String_Node_Str"",ZoneBroadcastUriSearch.entity().getDataCenterId(),Op.EQ);
  ZoneBroadcastUriSearch.and(""String_Node_Str"",ZoneBroadcastUriSearch.entity().getBroadcastUri(),Op.EQ);
  ZoneBroadcastUriSearch.done();
  ZoneSecurityGroupSearch=createSearchBuilder();
  ZoneSecurityGroupSearch.and(""String_Node_Str"",ZoneSecurityGroupSearch.entity().getDataCenterId(),Op.EQ);
  SearchBuilder<NetworkServiceMapVO> join1=_ntwkSvcMap.createSearchBuilder();
  join1.and(""String_Node_Str"",join1.entity().getService(),Op.EQ);
  ZoneSecurityGroupSearch.join(""String_Node_Str"",join1,ZoneSecurityGroupSearch.entity().getId(),join1.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  ZoneSecurityGroupSearch.done();
  CountByOfferingId=createSearchBuilder(Long.class);
  CountByOfferingId.select(null,Func.COUNT,CountByOfferingId.entity().getId());
  CountByOfferingId.and(""String_Node_Str"",CountByOfferingId.entity().getNetworkOfferingId(),Op.EQ);
  CountByOfferingId.and(""String_Node_Str"",CountByOfferingId.entity().getRemoved(),Op.NULL);
  CountByOfferingId.done();
  PhysicalNetworkSearch=createSearchBuilder();
  PhysicalNetworkSearch.and(""String_Node_Str"",PhysicalNetworkSearch.entity().getPhysicalNetworkId(),Op.EQ);
  PhysicalNetworkSearch.done();
  SecurityGroupSearch=createSearchBuilder();
  SearchBuilder<NetworkServiceMapVO> join3=_ntwkSvcMap.createSearchBuilder();
  join3.and(""String_Node_Str"",join3.entity().getService(),Op.EQ);
  SecurityGroupSearch.join(""String_Node_Str"",join3,SecurityGroupSearch.entity().getId(),join3.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  SecurityGroupSearch.done();
  NetworksCount=createSearchBuilder(Integer.class);
  NetworksCount.select(null,Func.COUNT,NetworksCount.entity().getId());
  NetworksCount.and(""String_Node_Str"",NetworksCount.entity().getNetworkOfferingId(),SearchCriteria.Op.EQ);
  NetworksCount.done();
  NetworksRegularUserCanCreateSearch=createSearchBuilder(Long.class);
  NetworksRegularUserCanCreateSearch.and(""String_Node_Str"",NetworksRegularUserCanCreateSearch.entity().getAclType(),Op.EQ);
  NetworksRegularUserCanCreateSearch.select(null,Func.COUNT,NetworksRegularUserCanCreateSearch.entity().getId());
  SearchBuilder<NetworkAccountVO> join4=_accountsDao.createSearchBuilder();
  join4.and(""String_Node_Str"",join4.entity().getAccountId(),Op.EQ);
  join4.and(""String_Node_Str"",join4.entity().isOwner(),Op.EQ);
  NetworksRegularUserCanCreateSearch.join(""String_Node_Str"",join4,NetworksRegularUserCanCreateSearch.entity().getId(),join4.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<NetworkOfferingVO> join5=_ntwkOffDao.createSearchBuilder();
  join5.and(""String_Node_Str"",join5.entity().getSpecifyVlan(),Op.EQ);
  NetworksRegularUserCanCreateSearch.join(""String_Node_Str"",join5,NetworksRegularUserCanCreateSearch.entity().getNetworkOfferingId(),join5.entity().getId(),JoinBuilder.JoinType.INNER);
  NetworksRegularUserCanCreateSearch.done();
  _tgMacAddress=_tgs.get(""String_Node_Str"");
  SourceNATSearch=createSearchBuilder();
  SourceNATSearch.and(""String_Node_Str"",SourceNATSearch.entity().getAccountId(),Op.EQ);
  SourceNATSearch.and(""String_Node_Str"",SourceNATSearch.entity().getDataCenterId(),Op.EQ);
  SourceNATSearch.and(""String_Node_Str"",SourceNATSearch.entity().getGuestType(),Op.EQ);
  SearchBuilder<NetworkServiceMapVO> join6=_ntwkSvcMap.createSearchBuilder();
  join6.and(""String_Node_Str"",join6.entity().getService(),Op.EQ);
  SourceNATSearch.join(""String_Node_Str"",join6,SourceNATSearch.entity().getId(),join6.entity().getNetworkId(),JoinBuilder.JoinType.INNER);
  SourceNATSearch.done();
}"
89135,"private StoragePool createCLVMStoragePool(Connect conn,String uuid,String host,String path){
  String volgroupPath=""String_Node_Str"" + path;
  LibvirtStoragePoolDef spd=new LibvirtStoragePoolDef(poolType.LOGICAL,uuid,uuid,host,volgroupPath,volgroupPath);
  StoragePool sp=null;
  try {
    s_logger.debug(spd.toString());
    sp=conn.storagePoolDefineXML(spd.toString(),0);
    sp.create(0);
    return sp;
  }
 catch (  LibvirtException e) {
    s_logger.debug(e.toString());
    if (sp != null) {
      try {
        sp.undefine();
        sp.free();
      }
 catch (      LibvirtException l) {
        s_logger.debug(""String_Node_Str"" + l.toString());
      }
    }
    return null;
  }
}","private StoragePool createCLVMStoragePool(Connect conn,String uuid,String host,String path){
  String volgroupPath=""String_Node_Str"" + path;
  String volgroupName=path;
  volgroupName=volgroupName.replaceFirst(""String_Node_Str"",""String_Node_Str"");
  LibvirtStoragePoolDef spd=new LibvirtStoragePoolDef(poolType.LOGICAL,volgroupName,uuid,host,volgroupPath,volgroupPath);
  StoragePool sp=null;
  try {
    s_logger.debug(spd.toString());
    sp=conn.storagePoolDefineXML(spd.toString(),0);
    sp.create(0);
    return sp;
  }
 catch (  LibvirtException e) {
    s_logger.debug(e.toString());
    if (sp != null) {
      try {
        sp.undefine();
        sp.free();
      }
 catch (      LibvirtException l) {
        s_logger.debug(""String_Node_Str"" + l.toString());
      }
    }
    return null;
  }
}"
89136,public long getDataCenterId();,public Long getDataCenterId();
89137,"public CapacityVO(long dataCenterId,Long podId,Long clusterId,short capacityType,float usedPercentage){
  this.dataCenterId=dataCenterId;
  this.podId=podId;
  this.clusterId=clusterId;
  this.capacityType=capacityType;
  this.usedPercentage=usedPercentage;
}","public CapacityVO(Long dataCenterId,Long podId,Long clusterId,short capacityType,float usedPercentage){
  this.dataCenterId=dataCenterId;
  this.podId=podId;
  this.clusterId=clusterId;
  this.capacityType=capacityType;
  this.usedPercentage=usedPercentage;
}"
89138,"public void setDataCenterId(long dataCenterId){
  this.dataCenterId=dataCenterId;
}","public void setDataCenterId(Long dataCenterId){
  this.dataCenterId=dataCenterId;
}"
89139,"@Override public long getDataCenterId(){
  return dataCenterId;
}","@Override public Long getDataCenterId(){
  return dataCenterId;
}"
89140,"@Override public List<CapacityVO> listCapacities(ListCapacityCmd cmd){
  Integer capacityType=cmd.getType();
  Long zoneId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  Long clusterId=cmd.getClusterId();
  Boolean fetchLatest=cmd.getFetchLatest();
  zoneId=_accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),zoneId);
  if (fetchLatest != null && fetchLatest) {
    _alertMgr.recalculateCapacity();
  }
  List<SummedCapacity> summedCapacities=_capacityDao.findCapacityBy(capacityType,zoneId,podId,clusterId);
  List<CapacityVO> capacities=new ArrayList<CapacityVO>();
  for (  SummedCapacity summedCapacity : summedCapacities) {
    CapacityVO capacity=new CapacityVO(null,summedCapacity.getDataCenterId(),podId,clusterId,summedCapacity.getUsedCapacity() + summedCapacity.getReservedCapacity(),summedCapacity.getTotalCapacity(),summedCapacity.getCapacityType());
    if (summedCapacity.getCapacityType() == Capacity.CAPACITY_TYPE_CPU) {
      capacity.setTotalCapacity((long)(summedCapacity.getTotalCapacity() * ApiDBUtils.getCpuOverprovisioningFactor()));
    }
    capacities.add(capacity);
  }
  List<DataCenterVO> dcList=new ArrayList<DataCenterVO>();
  if (zoneId == null && podId == null && clusterId == null) {
    dcList=ApiDBUtils.listZones();
  }
 else   if (zoneId != null) {
    dcList.add(ApiDBUtils.findZoneById(zoneId));
  }
 else {
    if (capacityType == null || capacityType == Capacity.CAPACITY_TYPE_STORAGE) {
      capacities.add(_storageMgr.getStoragePoolUsedStats(null,clusterId,podId,zoneId));
    }
  }
  for (  DataCenterVO zone : dcList) {
    zoneId=zone.getId();
    if ((capacityType == null || capacityType == Capacity.CAPACITY_TYPE_SECONDARY_STORAGE) && podId == null && clusterId == null) {
      capacities.add(_storageMgr.getSecondaryStorageUsedStats(null,zoneId));
    }
    if (capacityType == null || capacityType == Capacity.CAPACITY_TYPE_STORAGE) {
      capacities.add(_storageMgr.getStoragePoolUsedStats(null,clusterId,podId,zoneId));
    }
  }
  return capacities;
}","@Override public List<CapacityVO> listCapacities(ListCapacityCmd cmd){
  Integer capacityType=cmd.getType();
  Long zoneId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  Long clusterId=cmd.getClusterId();
  Boolean fetchLatest=cmd.getFetchLatest();
  zoneId=_accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),zoneId);
  if (fetchLatest != null && fetchLatest) {
    _alertMgr.recalculateCapacity();
  }
  List<SummedCapacity> summedCapacities=_capacityDao.findCapacityBy(capacityType,zoneId,podId,clusterId);
  List<CapacityVO> capacities=new ArrayList<CapacityVO>();
  for (  SummedCapacity summedCapacity : summedCapacities) {
    CapacityVO capacity=new CapacityVO(null,summedCapacity.getDataCenterId(),podId,clusterId,summedCapacity.getUsedCapacity() + summedCapacity.getReservedCapacity(),summedCapacity.getTotalCapacity(),summedCapacity.getCapacityType());
    if (summedCapacity.getCapacityType() == Capacity.CAPACITY_TYPE_CPU) {
      capacity.setTotalCapacity((long)(summedCapacity.getTotalCapacity() * ApiDBUtils.getCpuOverprovisioningFactor()));
    }
    capacities.add(capacity);
  }
  List<DataCenterVO> dcList=new ArrayList<DataCenterVO>();
  if (zoneId == null && podId == null && clusterId == null) {
    dcList=ApiDBUtils.listZones();
  }
 else   if (zoneId != null) {
    dcList.add(ApiDBUtils.findZoneById(zoneId));
  }
 else {
    if (clusterId != null) {
      zoneId=ApiDBUtils.findClusterById(clusterId).getDataCenterId();
    }
 else {
      zoneId=ApiDBUtils.findPodById(podId).getDataCenterId();
    }
    if (capacityType == null || capacityType == Capacity.CAPACITY_TYPE_STORAGE) {
      capacities.add(_storageMgr.getStoragePoolUsedStats(null,clusterId,podId,zoneId));
    }
  }
  for (  DataCenterVO zone : dcList) {
    zoneId=zone.getId();
    if ((capacityType == null || capacityType == Capacity.CAPACITY_TYPE_SECONDARY_STORAGE) && podId == null && clusterId == null) {
      capacities.add(_storageMgr.getSecondaryStorageUsedStats(null,zoneId));
    }
    if (capacityType == null || capacityType == Capacity.CAPACITY_TYPE_STORAGE) {
      capacities.add(_storageMgr.getStoragePoolUsedStats(null,clusterId,podId,zoneId));
    }
  }
  return capacities;
}"
89141,"protected synchronized String attachOrDetachISO(Connect conn,String vmName,String isoPath,boolean isAttach) throws LibvirtException, URISyntaxException, InternalErrorException {
  String isoXml=null;
  if (isoPath != null && isAttach) {
    int index=isoPath.lastIndexOf(""String_Node_Str"");
    String path=isoPath.substring(0,index);
    String name=isoPath.substring(index + 1);
    KVMStoragePool secondaryPool=_storagePoolMgr.getStoragePoolByURI(path);
    KVMPhysicalDisk isoVol=secondaryPool.getPhysicalDisk(name);
    isoPath=isoVol.getPath();
    DiskDef iso=new DiskDef();
    iso.defISODisk(isoPath);
    isoXml=iso.toString();
  }
 else {
    DiskDef iso=new DiskDef();
    iso.defISODisk(null);
    isoXml=iso.toString();
  }
  List<DiskDef> disks=getDisks(conn,vmName);
  String result=attachOrDetachDevice(conn,true,vmName,isoXml);
  if (result == null && !isAttach) {
    for (    DiskDef disk : disks) {
      if (disk.getDeviceType() == DiskDef.deviceType.CDROM) {
        cleanupDisk(conn,disk);
      }
    }
  }
  return result;
}","protected synchronized String attachOrDetachISO(Connect conn,String vmName,String isoPath,boolean isAttach) throws LibvirtException, URISyntaxException, InternalErrorException {
  String isoXml=null;
  if (isoPath != null && isAttach) {
    int index=isoPath.lastIndexOf(""String_Node_Str"");
    String path=isoPath.substring(0,index);
    String name=isoPath.substring(index + 1);
    KVMStoragePool secondaryPool=_storagePoolMgr.getStoragePoolByURI(path,UUID.nameUUIDFromBytes(isoPath.getBytes()).toString());
    KVMPhysicalDisk isoVol=secondaryPool.getPhysicalDisk(name);
    isoPath=isoVol.getPath();
    DiskDef iso=new DiskDef();
    iso.defISODisk(isoPath);
    isoXml=iso.toString();
  }
 else {
    DiskDef iso=new DiskDef();
    iso.defISODisk(null);
    isoXml=iso.toString();
  }
  List<DiskDef> disks=getDisks(conn,vmName);
  String result=attachOrDetachDevice(conn,true,vmName,isoXml);
  if (result == null && !isAttach) {
    for (    DiskDef disk : disks) {
      if (disk.getDeviceType() == DiskDef.deviceType.CDROM) {
        cleanupDisk(conn,disk);
      }
    }
  }
  return result;
}"
89142,"private String getVolumePath(Connect conn,VolumeTO volume) throws LibvirtException, URISyntaxException {
  if (volume.getType() == Volume.Type.ISO && volume.getPath() != null) {
    String isoPath=volume.getPath();
    int index=isoPath.lastIndexOf(""String_Node_Str"");
    String path=isoPath.substring(0,index);
    String name=isoPath.substring(index + 1);
    KVMStoragePool secondaryPool=_storagePoolMgr.getStoragePoolByURI(path);
    KVMPhysicalDisk isoVol=secondaryPool.getPhysicalDisk(name);
    return isoVol.getPath();
  }
 else {
    return volume.getPath();
  }
}","private String getVolumePath(Connect conn,VolumeTO volume) throws LibvirtException, URISyntaxException {
  if (volume.getType() == Volume.Type.ISO && volume.getPath() != null) {
    String isoPath=volume.getPath();
    int index=isoPath.lastIndexOf(""String_Node_Str"");
    String path=isoPath.substring(0,index);
    String name=isoPath.substring(index + 1);
    KVMStoragePool secondaryPool=_storagePoolMgr.getStoragePoolByURI(path,UUID.nameUUIDFromBytes(isoPath.getBytes()).toString());
    KVMPhysicalDisk isoVol=secondaryPool.getPhysicalDisk(name);
    return isoVol.getPath();
  }
 else {
    return volume.getPath();
  }
}"
89143,"public KVMStoragePool getStoragePoolByURI(String uri){
  return this._storageAdaptor.getStoragePoolByUri(uri);
}","public KVMStoragePool getStoragePoolByURI(String uri,String uuid){
  return this._storageAdaptor.getStoragePoolByUri(uri,uuid);
}"
89144,"@Override public KVMStoragePool getStoragePoolByUri(String uri){
  URI storageUri=null;
  try {
    storageUri=new URI(uri);
  }
 catch (  URISyntaxException e) {
    throw new CloudRuntimeException(e.toString());
  }
  String sourcePath=null;
  String uuid=null;
  String sourceHost=""String_Node_Str"";
  StoragePoolType protocal=null;
  if (storageUri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
    sourcePath=storageUri.getPath();
    sourcePath=sourcePath.replace(""String_Node_Str"",""String_Node_Str"");
    sourceHost=storageUri.getHost();
    uuid=UUID.randomUUID().toString();
    protocal=StoragePoolType.NetworkFilesystem;
  }
  return createStoragePool(uuid,sourceHost,sourcePath,protocal);
}","@Override public KVMStoragePool getStoragePoolByUri(String uri,String name){
  URI storageUri=null;
  try {
    storageUri=new URI(uri);
  }
 catch (  URISyntaxException e) {
    throw new CloudRuntimeException(e.toString());
  }
  String sourcePath=null;
  String sourceHost=""String_Node_Str"";
  StoragePoolType protocal=null;
  if (storageUri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
    sourcePath=storageUri.getPath();
    sourcePath=sourcePath.replace(""String_Node_Str"",""String_Node_Str"");
    sourceHost=storageUri.getHost();
    protocal=StoragePoolType.NetworkFilesystem;
  }
  return createStoragePool(name,sourceHost,sourcePath,protocal);
}"
89145,public KVMStoragePool getStoragePoolByUri(String uri);,"public KVMStoragePool getStoragePoolByUri(String uri,String name);"
89146,"private void dropKeysIfExist(Connection conn){
  HashMap<String,List<String>> uniqueKeys=new HashMap<String,List<String>>();
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  uniqueKeys.put(""String_Node_Str"",keys);
  uniqueKeys.put(""String_Node_Str"",keys);
  s_logger.debug(""String_Node_Str"");
  for (  String tableName : uniqueKeys.keySet()) {
    DbUpgradeUtils.dropKeysIfExist(conn,tableName,uniqueKeys.get(tableName),true);
  }
}","private void dropKeysIfExist(Connection conn){
  HashMap<String,List<String>> uniqueKeys=new HashMap<String,List<String>>();
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  uniqueKeys.put(""String_Node_Str"",keys);
  uniqueKeys.put(""String_Node_Str"",keys);
  s_logger.debug(""String_Node_Str"");
  for (  String tableName : uniqueKeys.keySet()) {
    DbUpgradeUtils.dropKeysIfExist(conn,tableName,uniqueKeys.get(tableName),false);
  }
}"
89147,"@Override public UserVm startVirtualMachine(long vmId) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {
  return null;
}","@Override public UserVm startVirtualMachine(long vmId,Long hostId) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {
  return null;
}"
89148,"@Override public boolean associateIP(Network network,List<? extends PublicIpAddress> ipAddress,List<? extends VirtualRouter> routers) throws ResourceUnavailableException {
  if (routers == null || routers.isEmpty()) {
    s_logger.warn(""String_Node_Str"" + network.getId());
    throw new ResourceUnavailableException(""String_Node_Str"",DataCenter.class,network.getDataCenterId());
  }
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  boolean result=true;
  String msg=""String_Node_Str"";
  for (  VirtualRouter router : routers) {
    if (router.getState() == State.Running) {
      if (router.isStopPending()) {
        if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
          throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",VirtualRouter.class,router.getId());
        }
        s_logger.debug(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"");
        continue;
      }
      Commands cmds=new Commands(OnError.Continue);
      createAssociateIPCommands(router,ipAddress,cmds,0);
      try {
        result=sendCommandsToRouter(router,cmds);
        connectedRouters.add(router);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(msg + router.getInstanceName(),e);
        disconnectedRouters.add(router);
      }
      if (!result) {
        throw new ResourceUnavailableException(""String_Node_Str"",VirtualRouter.class,router.getId());
      }
    }
 else     if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
      s_logger.debug(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str""+ router.getState()+ ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + router.getState());
      throw new ResourceUnavailableException(""String_Node_Str"" + router.getState(),DataCenter.class,network.getDataCenterId());
    }
  }
  if (!connectedRouters.isEmpty()) {
    handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,VirtualRouter.class,disconnectedRouters.get(0).getId());
  }
  return result;
}","@Override public boolean associateIP(Network network,List<? extends PublicIpAddress> ipAddress,List<? extends VirtualRouter> routers) throws ResourceUnavailableException {
  if (routers == null || routers.isEmpty()) {
    s_logger.warn(""String_Node_Str"" + network.getId());
    throw new ResourceUnavailableException(""String_Node_Str"",DataCenter.class,network.getDataCenterId());
  }
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  boolean result=true;
  String msg=""String_Node_Str"";
  for (  VirtualRouter router : routers) {
    if (router.getState() == State.Running) {
      if (router.isStopPending()) {
        if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
          throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",DataCenter.class,router.getDataCenterIdToDeployIn());
        }
        s_logger.debug(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"");
        continue;
      }
      Commands cmds=new Commands(OnError.Continue);
      createAssociateIPCommands(router,ipAddress,cmds,0);
      try {
        result=sendCommandsToRouter(router,cmds);
        connectedRouters.add(router);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(msg + router.getInstanceName(),e);
        disconnectedRouters.add(router);
      }
      if (!result) {
        throw new ResourceUnavailableException(""String_Node_Str"",DataCenter.class,router.getDataCenterIdToDeployIn());
      }
    }
 else     if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
      s_logger.debug(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str""+ router.getState()+ ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + router.getState());
      throw new ResourceUnavailableException(""String_Node_Str"" + router.getState(),DataCenter.class,network.getDataCenterId());
    }
  }
  if (!connectedRouters.isEmpty()) {
    handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,DataCenter.class,disconnectedRouters.get(0).getDataCenterIdToDeployIn());
  }
  return result;
}"
89149,"@Override public List<VirtualRouter> applyUserData(Network network,NicProfile nic,VirtualMachineProfile<UserVm> profile,DeployDestination dest,ReservationContext context,List<DomainRouterVO> routers) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  List<VirtualRouter> rets=new ArrayList<VirtualRouter>(routers.size());
  _userVmDao.loadDetails((UserVmVO)profile.getVirtualMachine());
  DataCenter dc=dest.getDataCenter();
  String serviceOffering=_serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();
  String zoneName=_dcDao.findById(network.getDataCenterId()).getName();
  boolean isZoneBasic=(dc.getNetworkType() == NetworkType.Basic);
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  for (  DomainRouterVO router : routers) {
    boolean sendPasswordAndVmData=true;
    if (router.getState() != State.Running) {
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    if (router.isStopPending()) {
      if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
        throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",VirtualRouter.class,router.getId());
      }
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    Long podId=null;
    if (isZoneBasic) {
      podId=dest.getPod().getId();
      if (router.getPodIdToDeployIn().longValue() != podId.longValue()) {
        sendPasswordAndVmData=false;
      }
    }
    Commands cmds=new Commands(OnError.Stop);
    if (sendPasswordAndVmData) {
      String password=(String)profile.getParameter(VirtualMachineProfile.Param.VmPassword);
      String userData=profile.getVirtualMachine().getUserData();
      String sshPublicKey=profile.getVirtualMachine().getDetail(""String_Node_Str"");
      if (password != null && nic.isDefaultNic()) {
        final String encodedPassword=PasswordGenerator.rot13(password);
        SavePasswordCommand cmd=new SavePasswordCommand(encodedPassword,nic.getIp4Address(),profile.getVirtualMachine().getHostName());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
        cmds.addCommand(""String_Node_Str"",cmd);
      }
      cmds.addCommand(""String_Node_Str"",generateVmDataCommand(router,nic.getIp4Address(),userData,serviceOffering,zoneName,nic.getIp4Address(),profile.getVirtualMachine().getHostName(),profile.getVirtualMachine().getInstanceName(),profile.getId(),sshPublicKey));
    }
    if (cmds.size() > 0) {
      boolean podLevelException=false;
      if (isZoneBasic && podId != null && profile.getVirtualMachine().getType() == VirtualMachine.Type.User && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == Network.GuestType.Shared) {
        podLevelException=true;
      }
      try {
        _agentMgr.send(router.getHostId(),cmds);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
catch (      OperationTimedoutException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
      connectedRouters.add(router);
      Answer answer=cmds.getAnswer(""String_Node_Str"");
      if (answer != null && !answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
      answer=cmds.getAnswer(""String_Node_Str"");
      if (answer != null && !answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
    }
    rets.add(router);
  }
  String msg=""String_Node_Str"";
  if (!connectedRouters.isEmpty()) {
    handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,VirtualRouter.class,disconnectedRouters.get(0).getId());
  }
  return rets;
}","@Override public List<VirtualRouter> applyUserData(Network network,NicProfile nic,VirtualMachineProfile<UserVm> profile,DeployDestination dest,ReservationContext context,List<DomainRouterVO> routers) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  List<VirtualRouter> rets=new ArrayList<VirtualRouter>(routers.size());
  _userVmDao.loadDetails((UserVmVO)profile.getVirtualMachine());
  DataCenter dc=dest.getDataCenter();
  String serviceOffering=_serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();
  String zoneName=_dcDao.findById(network.getDataCenterId()).getName();
  boolean isZoneBasic=(dc.getNetworkType() == NetworkType.Basic);
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  Long podId=null;
  if (isZoneBasic) {
    podId=dest.getPod().getId();
  }
  boolean podLevelException=false;
  if (isZoneBasic && podId != null && profile.getVirtualMachine().getType() == VirtualMachine.Type.User && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == Network.GuestType.Shared) {
    podLevelException=true;
  }
  for (  DomainRouterVO router : routers) {
    boolean sendPasswordAndVmData=true;
    if (router.getState() != State.Running) {
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    if (router.isStopPending()) {
      if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
        throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",DataCenter.class,router.getDataCenterIdToDeployIn());
      }
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    if (isZoneBasic) {
      if (router.getPodIdToDeployIn().longValue() != podId.longValue()) {
        sendPasswordAndVmData=false;
      }
    }
    Commands cmds=new Commands(OnError.Stop);
    if (sendPasswordAndVmData) {
      String password=(String)profile.getParameter(VirtualMachineProfile.Param.VmPassword);
      String userData=profile.getVirtualMachine().getUserData();
      String sshPublicKey=profile.getVirtualMachine().getDetail(""String_Node_Str"");
      if (password != null && nic.isDefaultNic()) {
        final String encodedPassword=PasswordGenerator.rot13(password);
        SavePasswordCommand cmd=new SavePasswordCommand(encodedPassword,nic.getIp4Address(),profile.getVirtualMachine().getHostName());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
        cmds.addCommand(""String_Node_Str"",cmd);
      }
      cmds.addCommand(""String_Node_Str"",generateVmDataCommand(router,nic.getIp4Address(),userData,serviceOffering,zoneName,nic.getIp4Address(),profile.getVirtualMachine().getHostName(),profile.getVirtualMachine().getInstanceName(),profile.getId(),sshPublicKey));
    }
    if (cmds.size() > 0) {
      try {
        _agentMgr.send(router.getHostId(),cmds);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
catch (      OperationTimedoutException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
      connectedRouters.add(router);
      Answer answer=cmds.getAnswer(""String_Node_Str"");
      if (answer != null && !answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),DataCenter.class,dc.getId());
      }
      answer=cmds.getAnswer(""String_Node_Str"");
      if (answer != null && !answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),DataCenter.class,dc.getId());
      }
    }
    rets.add(router);
  }
  String msg=""String_Node_Str"";
  if (!connectedRouters.isEmpty()) {
    if (!isZoneBasic) {
      handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
    }
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    if (podLevelException) {
      throw new ResourceUnavailableException(msg,Pod.class,podId);
    }
    throw new ResourceUnavailableException(msg,DataCenter.class,dc.getId());
  }
  return rets;
}"
89150,"@Override public List<VirtualRouter> applyDhcpEntry(Network network,NicProfile nic,VirtualMachineProfile<UserVm> profile,DeployDestination dest,ReservationContext context,List<DomainRouterVO> routers) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  List<VirtualRouter> rets=new ArrayList<VirtualRouter>(routers.size());
  _userVmDao.loadDetails((UserVmVO)profile.getVirtualMachine());
  DataCenter dc=dest.getDataCenter();
  String serviceOffering=_serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();
  String zoneName=_dcDao.findById(network.getDataCenterId()).getName();
  boolean isZoneBasic=(dc.getNetworkType() == NetworkType.Basic);
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  for (  DomainRouterVO router : routers) {
    boolean sendDnsDhcpData=true;
    if (router.getState() != State.Running) {
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    if (router.isStopPending()) {
      if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
        throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",VirtualRouter.class,router.getId());
      }
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    Long podId=null;
    if (isZoneBasic) {
      podId=dest.getPod().getId();
      if (router.getPodIdToDeployIn().longValue() != podId.longValue()) {
        if (_dnsBasicZoneUpdates.equalsIgnoreCase(""String_Node_Str"")) {
          sendDnsDhcpData=false;
        }
      }
    }
    Commands cmds=new Commands(OnError.Stop);
    String routerControlIpAddress=null;
    List<NicVO> nics=_nicDao.listByVmId(router.getId());
    for (    NicVO n : nics) {
      NetworkVO nc=_networkDao.findById(n.getNetworkId());
      if (nc.getTrafficType() == TrafficType.Control) {
        routerControlIpAddress=n.getIp4Address();
      }
    }
    if (sendDnsDhcpData) {
      DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),profile.getVirtualMachine().getHostName());
      dhcpCommand.setDefaultRouter(findGatewayIp(profile.getVirtualMachine().getId()));
      dhcpCommand.setDefaultDns(findDefaultDnsIp(profile.getVirtualMachine().getId()));
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
      cmds.addCommand(""String_Node_Str"",dhcpCommand);
    }
    if (cmds.size() > 0) {
      boolean podLevelException=false;
      if (isZoneBasic && podId != null && profile.getVirtualMachine().getType() == VirtualMachine.Type.User && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == Network.GuestType.Shared) {
        podLevelException=true;
      }
      try {
        _agentMgr.send(router.getHostId(),cmds);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
catch (      OperationTimedoutException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
      connectedRouters.add(router);
      Answer answer=cmds.getAnswer(""String_Node_Str"");
      if (!answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ router.getHostName()+ ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
    }
    rets.add(router);
  }
  String msg=""String_Node_Str"";
  if (!connectedRouters.isEmpty()) {
    handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,VirtualRouter.class,disconnectedRouters.get(0).getId());
  }
  return rets;
}","@Override public List<VirtualRouter> applyDhcpEntry(Network network,NicProfile nic,VirtualMachineProfile<UserVm> profile,DeployDestination dest,ReservationContext context,List<DomainRouterVO> routers) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  List<VirtualRouter> rets=new ArrayList<VirtualRouter>(routers.size());
  _userVmDao.loadDetails((UserVmVO)profile.getVirtualMachine());
  DataCenter dc=dest.getDataCenter();
  String serviceOffering=_serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();
  String zoneName=_dcDao.findById(network.getDataCenterId()).getName();
  boolean isZoneBasic=(dc.getNetworkType() == NetworkType.Basic);
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  Long podId=null;
  if (isZoneBasic) {
    podId=dest.getPod().getId();
  }
  boolean podLevelException=false;
  if (isZoneBasic && podId != null && profile.getVirtualMachine().getType() == VirtualMachine.Type.User && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == Network.GuestType.Shared) {
    podLevelException=true;
  }
  for (  DomainRouterVO router : routers) {
    boolean sendDnsDhcpData=true;
    if (router.getState() != State.Running) {
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    if (router.isStopPending()) {
      if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
        throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",DataCenter.class,router.getDataCenterIdToDeployIn());
      }
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    if (isZoneBasic) {
      if (router.getPodIdToDeployIn().longValue() != podId.longValue()) {
        if (_dnsBasicZoneUpdates.equalsIgnoreCase(""String_Node_Str"")) {
          sendDnsDhcpData=false;
        }
      }
    }
    Commands cmds=new Commands(OnError.Stop);
    String routerControlIpAddress=null;
    List<NicVO> nics=_nicDao.listByVmId(router.getId());
    for (    NicVO n : nics) {
      NetworkVO nc=_networkDao.findById(n.getNetworkId());
      if (nc.getTrafficType() == TrafficType.Control) {
        routerControlIpAddress=n.getIp4Address();
      }
    }
    if (sendDnsDhcpData) {
      DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),profile.getVirtualMachine().getHostName());
      dhcpCommand.setDefaultRouter(findGatewayIp(profile.getVirtualMachine().getId()));
      dhcpCommand.setDefaultDns(findDefaultDnsIp(profile.getVirtualMachine().getId()));
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP,getRouterControlIp(router.getId()));
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
      cmds.addCommand(""String_Node_Str"",dhcpCommand);
    }
    if (cmds.size() > 0) {
      try {
        _agentMgr.send(router.getHostId(),cmds);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
catch (      OperationTimedoutException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
      connectedRouters.add(router);
      Answer answer=cmds.getAnswer(""String_Node_Str"");
      if (!answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ router.getHostName()+ ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),DataCenter.class,dc.getId());
      }
    }
    rets.add(router);
  }
  String msg=""String_Node_Str"";
  if (!connectedRouters.isEmpty()) {
    if (!isZoneBasic) {
      handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
    }
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    if (podLevelException) {
      throw new ResourceUnavailableException(msg,Pod.class,podId);
    }
    throw new ResourceUnavailableException(msg,DataCenter.class,dc.getId());
  }
  return rets;
}"
89151,"@Override public boolean applyStaticNats(Network network,List<? extends StaticNat> rules,List<? extends VirtualRouter> routers) throws ResourceUnavailableException {
  if (routers == null || routers.isEmpty()) {
    s_logger.warn(""String_Node_Str"" + network.getId());
    throw new ResourceUnavailableException(""String_Node_Str"",DataCenter.class,network.getDataCenterId());
  }
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  boolean result=true;
  String msg=""String_Node_Str"";
  for (  VirtualRouter router : routers) {
    if (router.getState() == State.Running) {
      s_logger.debug(""String_Node_Str"" + rules.size() + ""String_Node_Str""+ network);
      if (router.isStopPending()) {
        if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
          throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",VirtualRouter.class,router.getId());
        }
        s_logger.debug(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"");
        continue;
      }
      try {
        result=applyStaticNat(router,rules);
        connectedRouters.add(router);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(msg + router.getInstanceName(),e);
        disconnectedRouters.add(router);
      }
      if (!result) {
        throw new ResourceUnavailableException(""String_Node_Str"",VirtualRouter.class,router.getId());
      }
    }
 else     if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
      s_logger.debug(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str""+ router.getState()+ ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + router.getState());
      throw new ResourceUnavailableException(""String_Node_Str"",VirtualRouter.class,router.getId());
    }
  }
  if (!connectedRouters.isEmpty()) {
    handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,VirtualRouter.class,disconnectedRouters.get(0).getId());
  }
  return true;
}","@Override public boolean applyStaticNats(Network network,List<? extends StaticNat> rules,List<? extends VirtualRouter> routers) throws ResourceUnavailableException {
  if (routers == null || routers.isEmpty()) {
    s_logger.warn(""String_Node_Str"" + network.getId());
    throw new ResourceUnavailableException(""String_Node_Str"",DataCenter.class,network.getDataCenterId());
  }
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  boolean result=true;
  String msg=""String_Node_Str"";
  for (  VirtualRouter router : routers) {
    if (router.getState() == State.Running) {
      s_logger.debug(""String_Node_Str"" + rules.size() + ""String_Node_Str""+ network);
      if (router.isStopPending()) {
        if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
          throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",DataCenter.class,router.getDataCenterIdToDeployIn());
        }
        s_logger.debug(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"");
        continue;
      }
      try {
        result=applyStaticNat(router,rules);
        connectedRouters.add(router);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(msg + router.getInstanceName(),e);
        disconnectedRouters.add(router);
      }
      if (!result) {
        throw new ResourceUnavailableException(""String_Node_Str"",DataCenter.class,router.getDataCenterIdToDeployIn());
      }
    }
 else     if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
      s_logger.debug(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str""+ router.getState()+ ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + router.getState());
      throw new ResourceUnavailableException(""String_Node_Str"",DataCenter.class,router.getDataCenterIdToDeployIn());
    }
  }
  if (!connectedRouters.isEmpty()) {
    handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,DataCenter.class,disconnectedRouters.get(0).getDataCenterIdToDeployIn());
  }
  return true;
}"
89152,"@DB protected List<DomainRouterVO> findOrDeployVirtualRouters(Network guestNetwork,DeployDestination dest,Account owner,boolean isRedundant,Map<Param,Object> params) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  Network network=_networkDao.acquireInLockTable(guestNetwork.getId());
  if (network == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + guestNetwork.getId());
  }
  long dcId=dest.getDataCenter().getId();
  DataCenterDeployment plan=new DataCenterDeployment(dcId);
  boolean isPodBased=(dest.getDataCenter().getNetworkType() == NetworkType.Basic || _networkMgr.areServicesSupportedInNetwork(guestNetwork.getId(),Service.SecurityGroup)) && guestNetwork.getTrafficType() == TrafficType.Guest;
  boolean publicNetwork=false;
  if (_networkMgr.areServicesSupportedInNetwork(guestNetwork.getId(),Service.SourceNat)) {
    publicNetwork=true;
  }
  if (isRedundant && !publicNetwork) {
    s_logger.error(""String_Node_Str"");
    return null;
  }
  List<DomainRouterVO> routers;
  Long podId=null;
  if (isPodBased) {
    Pod pod=dest.getPod();
    if (pod != null) {
      podId=pod.getId();
    }
  }
  if (publicNetwork) {
    routers=_routerDao.listByNetworkAndRole(guestNetwork.getId(),Role.VIRTUAL_ROUTER);
  }
 else {
    if (isPodBased && podId != null) {
      routers=_routerDao.listByNetworkAndPodAndRole(guestNetwork.getId(),podId,Role.VIRTUAL_ROUTER);
      plan=new DataCenterDeployment(dcId,podId,null,null,null,null);
    }
 else {
      routers=_routerDao.listByNetworkAndRole(guestNetwork.getId(),Role.VIRTUAL_ROUTER);
      plan=new DataCenterDeployment(dcId);
    }
  }
  try {
    int routerCount=1;
    if (isRedundant) {
      routerCount=2;
    }
    for (    DomainRouterVO router : routers) {
      if (!router.getIsRedundantRouter()) {
        routerCount=1;
      }
    }
    if (routers.size() >= routerCount || (isPodBased && podId == null)) {
      return routers;
    }
    if (routers.size() >= 5) {
      s_logger.error(""String_Node_Str"");
    }
    NicProfile defaultNic=new NicProfile();
    if (publicNetwork) {
      PublicIp sourceNatIp=_networkMgr.assignSourceNatIpAddress(owner,guestNetwork,_accountMgr.getSystemUser().getId());
      defaultNic.setDefaultNic(true);
      defaultNic.setIp4Address(sourceNatIp.getAddress().addr());
      defaultNic.setGateway(sourceNatIp.getGateway());
      defaultNic.setNetmask(sourceNatIp.getNetmask());
      defaultNic.setMacAddress(sourceNatIp.getMacAddress());
      defaultNic.setBroadcastType(BroadcastDomainType.Vlan);
      defaultNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(sourceNatIp.getVlanTag()));
      defaultNic.setIsolationUri(IsolationType.Vlan.toUri(sourceNatIp.getVlanTag()));
      defaultNic.setDeviceId(2);
    }
    int count=routerCount - routers.size();
    for (int i=0; i < count; i++) {
      long id=_routerDao.getNextInSequence(Long.class,""String_Node_Str"");
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + id);
      }
      DomainRouterVO router=null;
      List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork);
      NetworkOfferingVO controlOffering=offerings.get(0);
      NetworkVO controlConfig=_networkMgr.setupNetwork(_systemAcct,controlOffering,plan,null,null,false).get(0);
      List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(3);
      if (publicNetwork) {
        NetworkOfferingVO publicOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemPublicNetwork).get(0);
        List<NetworkVO> publicNetworks=_networkMgr.setupNetwork(_systemAcct,publicOffering,plan,null,null,false);
        networks.add(new Pair<NetworkVO,NicProfile>(publicNetworks.get(0),defaultNic));
      }
      String defaultNetworkStartIp=null;
      if (guestNetwork.getCidr() != null && !publicNetwork) {
        String startIp=_networkMgr.getStartIpAddress(guestNetwork.getId());
        if (startIp != null && _ipAddressDao.findByIpAndSourceNetworkId(guestNetwork.getId(),startIp).getAllocatedTime() == null) {
          defaultNetworkStartIp=startIp;
        }
 else         if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + startIp + ""String_Node_Str""+ guestNetwork.getId()+ ""String_Node_Str"");
        }
      }
      NicProfile gatewayNic=new NicProfile(defaultNetworkStartIp);
      if (publicNetwork) {
        if (isRedundant) {
          gatewayNic.setIp4Address(_networkMgr.acquireGuestIpAddress(guestNetwork,null));
        }
 else {
          gatewayNic.setIp4Address(guestNetwork.getGateway());
        }
        gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());
        gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());
        gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());
        gatewayNic.setMode(guestNetwork.getMode());
        String gatewayCidr=guestNetwork.getCidr();
        gatewayNic.setNetmask(NetUtils.getCidrNetmask(gatewayCidr));
      }
 else {
        gatewayNic.setDefaultNic(true);
      }
      networks.add(new Pair<NetworkVO,NicProfile>((NetworkVO)guestNetwork,gatewayNic));
      networks.add(new Pair<NetworkVO,NicProfile>(controlConfig,null));
      Long offering_id=_networkOfferingDao.findById(guestNetwork.getNetworkOfferingId()).getServiceOfferingId();
      if (offering_id == null) {
        offering_id=_offering.getId();
      }
      VirtualRouterProviderType type=VirtualRouterProviderType.VirtualRouter;
      Long physicalNetworkId=_networkMgr.getPhysicalNetworkId(network);
      PhysicalNetworkServiceProvider provider=_physicalProviderDao.findByServiceProvider(physicalNetworkId,type.toString());
      if (provider == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + type.toString() + ""String_Node_Str""+ physicalNetworkId);
      }
      VirtualRouterProvider vrProvider=_vrProviderDao.findByNspIdAndType(provider.getId(),type);
      if (vrProvider == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + type.toString() + ""String_Node_Str""+ provider.getId());
      }
      ServiceOfferingVO routerOffering=_serviceOfferingDao.findById(offering_id);
      List<HypervisorType> supportedHypervisors=new ArrayList<HypervisorType>();
      HypervisorType defaults=_resourceMgr.getDefaultHypervisor(dest.getDataCenter().getId());
      if (defaults != HypervisorType.None) {
        supportedHypervisors.add(defaults);
      }
      if (dest.getCluster() != null) {
        if (dest.getCluster().getHypervisorType() == HypervisorType.Ovm) {
          supportedHypervisors.add(getClusterToStartDomainRouterForOvm(dest.getCluster().getPodId()));
        }
 else {
          supportedHypervisors.add(dest.getCluster().getHypervisorType());
        }
      }
 else {
        supportedHypervisors=_resourceMgr.getSupportedHypervisorTypes(dest.getDataCenter().getId(),true,podId);
      }
      if (supportedHypervisors.isEmpty()) {
        if (podId != null) {
          throw new InsufficientServerCapacityException(""String_Node_Str"",Pod.class,podId);
        }
        throw new InsufficientServerCapacityException(""String_Node_Str"",DataCenter.class,dest.getDataCenter().getId());
      }
      int allocateRetry=0;
      int startRetry=0;
      for (Iterator<HypervisorType> iter=supportedHypervisors.iterator(); iter.hasNext(); ) {
        HypervisorType hType=iter.next();
        try {
          s_logger.debug(""String_Node_Str"" + hType);
          VMTemplateVO template=_templateDao.findRoutingTemplate(hType);
          if (template == null) {
            s_logger.debug(hType + ""String_Node_Str"");
            continue;
          }
          boolean offerHA=routerOffering.getOfferHA();
          if (isRedundant) {
            offerHA=false;
          }
          router=new DomainRouterVO(id,routerOffering.getId(),vrProvider.getId(),VirtualMachineName.getRouterName(id,_instance),template.getId(),template.getHypervisorType(),template.getGuestOSId(),owner.getDomainId(),owner.getId(),guestNetwork.getId(),isRedundant,0,false,RedundantState.UNKNOWN,offerHA,false);
          router.setRole(Role.VIRTUAL_ROUTER);
          router=_itMgr.allocate(router,template,routerOffering,networks,plan,null,owner);
        }
 catch (        InsufficientCapacityException ex) {
          if (allocateRetry < 2 && iter.hasNext()) {
            s_logger.debug(""String_Node_Str"" + hType + ""String_Node_Str"");
            continue;
          }
 else {
            throw ex;
          }
        }
 finally {
          allocateRetry++;
        }
        try {
          router=startVirtualRouter(router,_accountMgr.getSystemUser(),_accountMgr.getSystemAccount(),params);
          break;
        }
 catch (        InsufficientCapacityException ex) {
          if (startRetry < 2 && iter.hasNext()) {
            s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str""+ hType+ ""String_Node_Str"");
            destroyRouter(router.getId());
            continue;
          }
 else {
            throw ex;
          }
        }
 finally {
          startRetry++;
        }
      }
      routers.add(router);
      UserStatisticsVO stats=_userStatsDao.findBy(owner.getId(),dcId,router.getNetworkId(),null,router.getId(),router.getType().toString());
      if (stats == null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + owner.getId() + ""String_Node_Str""+ router.getId());
        }
        stats=new UserStatisticsVO(owner.getId(),dcId,null,router.getId(),router.getType().toString(),guestNetwork.getId());
        _userStatsDao.persist(stats);
      }
    }
  }
  finally {
    if (network != null) {
      _networkDao.releaseFromLockTable(network.getId());
    }
  }
  return routers;
}","@DB protected List<DomainRouterVO> findOrDeployVirtualRouters(Network guestNetwork,DeployDestination dest,Account owner,boolean isRedundant,Map<Param,Object> params) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  Network network=_networkDao.acquireInLockTable(guestNetwork.getId());
  if (network == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + guestNetwork.getId());
  }
  long dcId=dest.getDataCenter().getId();
  DataCenterDeployment plan=new DataCenterDeployment(dcId);
  boolean isPodBased=(dest.getDataCenter().getNetworkType() == NetworkType.Basic || _networkMgr.areServicesSupportedInNetwork(guestNetwork.getId(),Service.SecurityGroup)) && guestNetwork.getTrafficType() == TrafficType.Guest;
  boolean publicNetwork=false;
  if (_networkMgr.isProviderSupportServiceInNetwork(guestNetwork.getId(),Service.SourceNat,Provider.VirtualRouter)) {
    publicNetwork=true;
  }
  if (isRedundant && !publicNetwork) {
    s_logger.error(""String_Node_Str"");
    return null;
  }
  List<DomainRouterVO> routers;
  Long podId=null;
  if (isPodBased) {
    Pod pod=dest.getPod();
    if (pod != null) {
      podId=pod.getId();
    }
  }
  if (publicNetwork) {
    routers=_routerDao.listByNetworkAndRole(guestNetwork.getId(),Role.VIRTUAL_ROUTER);
  }
 else {
    if (isPodBased && podId != null) {
      routers=_routerDao.listByNetworkAndPodAndRole(guestNetwork.getId(),podId,Role.VIRTUAL_ROUTER);
      plan=new DataCenterDeployment(dcId,podId,null,null,null,null);
    }
 else {
      routers=_routerDao.listByNetworkAndRole(guestNetwork.getId(),Role.VIRTUAL_ROUTER);
      plan=new DataCenterDeployment(dcId);
    }
  }
  try {
    int routerCount=1;
    if (isRedundant) {
      routerCount=2;
    }
    for (    DomainRouterVO router : routers) {
      if (!router.getIsRedundantRouter()) {
        routerCount=1;
      }
    }
    if (routers.size() >= routerCount || (isPodBased && podId == null)) {
      return routers;
    }
    if (routers.size() >= 5) {
      s_logger.error(""String_Node_Str"");
    }
    NicProfile defaultNic=new NicProfile();
    if (publicNetwork) {
      PublicIp sourceNatIp=_networkMgr.assignSourceNatIpAddress(owner,guestNetwork,_accountMgr.getSystemUser().getId());
      defaultNic.setDefaultNic(true);
      defaultNic.setIp4Address(sourceNatIp.getAddress().addr());
      defaultNic.setGateway(sourceNatIp.getGateway());
      defaultNic.setNetmask(sourceNatIp.getNetmask());
      defaultNic.setMacAddress(sourceNatIp.getMacAddress());
      defaultNic.setBroadcastType(BroadcastDomainType.Vlan);
      defaultNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(sourceNatIp.getVlanTag()));
      defaultNic.setIsolationUri(IsolationType.Vlan.toUri(sourceNatIp.getVlanTag()));
      defaultNic.setDeviceId(2);
    }
    int count=routerCount - routers.size();
    for (int i=0; i < count; i++) {
      long id=_routerDao.getNextInSequence(Long.class,""String_Node_Str"");
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + id);
      }
      DomainRouterVO router=null;
      List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork);
      NetworkOfferingVO controlOffering=offerings.get(0);
      NetworkVO controlConfig=_networkMgr.setupNetwork(_systemAcct,controlOffering,plan,null,null,false).get(0);
      List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(3);
      if (publicNetwork) {
        NetworkOfferingVO publicOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemPublicNetwork).get(0);
        List<NetworkVO> publicNetworks=_networkMgr.setupNetwork(_systemAcct,publicOffering,plan,null,null,false);
        networks.add(new Pair<NetworkVO,NicProfile>(publicNetworks.get(0),defaultNic));
      }
      String defaultNetworkStartIp=null;
      if (guestNetwork.getCidr() != null && !publicNetwork) {
        String startIp=_networkMgr.getStartIpAddress(guestNetwork.getId());
        if (startIp != null && _ipAddressDao.findByIpAndSourceNetworkId(guestNetwork.getId(),startIp).getAllocatedTime() == null) {
          defaultNetworkStartIp=startIp;
        }
 else         if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + startIp + ""String_Node_Str""+ guestNetwork.getId()+ ""String_Node_Str"");
        }
      }
      NicProfile gatewayNic=new NicProfile(defaultNetworkStartIp);
      if (publicNetwork) {
        if (isRedundant) {
          gatewayNic.setIp4Address(_networkMgr.acquireGuestIpAddress(guestNetwork,null));
        }
 else {
          gatewayNic.setIp4Address(guestNetwork.getGateway());
        }
        gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());
        gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());
        gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());
        gatewayNic.setMode(guestNetwork.getMode());
        String gatewayCidr=guestNetwork.getCidr();
        gatewayNic.setNetmask(NetUtils.getCidrNetmask(gatewayCidr));
      }
 else {
        gatewayNic.setDefaultNic(true);
      }
      networks.add(new Pair<NetworkVO,NicProfile>((NetworkVO)guestNetwork,gatewayNic));
      networks.add(new Pair<NetworkVO,NicProfile>(controlConfig,null));
      Long offering_id=_networkOfferingDao.findById(guestNetwork.getNetworkOfferingId()).getServiceOfferingId();
      if (offering_id == null) {
        offering_id=_offering.getId();
      }
      VirtualRouterProviderType type=VirtualRouterProviderType.VirtualRouter;
      Long physicalNetworkId=_networkMgr.getPhysicalNetworkId(network);
      PhysicalNetworkServiceProvider provider=_physicalProviderDao.findByServiceProvider(physicalNetworkId,type.toString());
      if (provider == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + type.toString() + ""String_Node_Str""+ physicalNetworkId);
      }
      VirtualRouterProvider vrProvider=_vrProviderDao.findByNspIdAndType(provider.getId(),type);
      if (vrProvider == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + type.toString() + ""String_Node_Str""+ provider.getId());
      }
      ServiceOfferingVO routerOffering=_serviceOfferingDao.findById(offering_id);
      List<HypervisorType> supportedHypervisors=new ArrayList<HypervisorType>();
      HypervisorType defaults=_resourceMgr.getDefaultHypervisor(dest.getDataCenter().getId());
      if (defaults != HypervisorType.None) {
        supportedHypervisors.add(defaults);
      }
      if (dest.getCluster() != null) {
        if (dest.getCluster().getHypervisorType() == HypervisorType.Ovm) {
          supportedHypervisors.add(getClusterToStartDomainRouterForOvm(dest.getCluster().getPodId()));
        }
 else {
          supportedHypervisors.add(dest.getCluster().getHypervisorType());
        }
      }
 else {
        supportedHypervisors=_resourceMgr.getSupportedHypervisorTypes(dest.getDataCenter().getId(),true,podId);
      }
      if (supportedHypervisors.isEmpty()) {
        if (podId != null) {
          throw new InsufficientServerCapacityException(""String_Node_Str"",Pod.class,podId);
        }
        throw new InsufficientServerCapacityException(""String_Node_Str"",DataCenter.class,dest.getDataCenter().getId());
      }
      int allocateRetry=0;
      int startRetry=0;
      for (Iterator<HypervisorType> iter=supportedHypervisors.iterator(); iter.hasNext(); ) {
        HypervisorType hType=iter.next();
        try {
          s_logger.debug(""String_Node_Str"" + hType);
          VMTemplateVO template=_templateDao.findRoutingTemplate(hType);
          if (template == null) {
            s_logger.debug(hType + ""String_Node_Str"");
            continue;
          }
          boolean offerHA=routerOffering.getOfferHA();
          if (isRedundant) {
            offerHA=false;
          }
          router=new DomainRouterVO(id,routerOffering.getId(),vrProvider.getId(),VirtualMachineName.getRouterName(id,_instance),template.getId(),template.getHypervisorType(),template.getGuestOSId(),owner.getDomainId(),owner.getId(),guestNetwork.getId(),isRedundant,0,false,RedundantState.UNKNOWN,offerHA,false);
          router.setRole(Role.VIRTUAL_ROUTER);
          router=_itMgr.allocate(router,template,routerOffering,networks,plan,null,owner);
        }
 catch (        InsufficientCapacityException ex) {
          if (allocateRetry < 2 && iter.hasNext()) {
            s_logger.debug(""String_Node_Str"" + hType + ""String_Node_Str"");
            continue;
          }
 else {
            throw ex;
          }
        }
 finally {
          allocateRetry++;
        }
        try {
          router=startVirtualRouter(router,_accountMgr.getSystemUser(),_accountMgr.getSystemAccount(),params);
          break;
        }
 catch (        InsufficientCapacityException ex) {
          if (startRetry < 2 && iter.hasNext()) {
            s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str""+ hType+ ""String_Node_Str"");
            destroyRouter(router.getId());
            continue;
          }
 else {
            throw ex;
          }
        }
 finally {
          startRetry++;
        }
      }
      routers.add(router);
      UserStatisticsVO stats=_userStatsDao.findBy(owner.getId(),dcId,router.getNetworkId(),null,router.getId(),router.getType().toString());
      if (stats == null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + owner.getId() + ""String_Node_Str""+ router.getId());
        }
        stats=new UserStatisticsVO(owner.getId(),dcId,null,router.getId(),router.getType().toString(),guestNetwork.getId());
        _userStatsDao.persist(stats);
      }
    }
  }
  finally {
    if (network != null) {
      _networkDao.releaseFromLockTable(network.getId());
    }
  }
  return routers;
}"
89153,"@Override public boolean manageGuestNetworkWithExternalFirewall(boolean add,Network network) throws ResourceUnavailableException, InsufficientCapacityException {
  if (network.getTrafficType() != TrafficType.Guest) {
    s_logger.trace(""String_Node_Str"");
    return false;
  }
  long zoneId=network.getDataCenterId();
  DataCenterVO zone=_dcDao.findById(zoneId);
  HostVO externalFirewall=null;
  if (add) {
    GlobalLock deviceMapLock=GlobalLock.getInternLock(""String_Node_Str"");
    try {
      if (deviceMapLock.lock(120)) {
        try {
          ExternalFirewallDeviceVO device=findSuitableFirewallForNetwork(network);
          long externalFirewallId=device.getId();
          NetworkExternalFirewallVO networkFW=new NetworkExternalFirewallVO(network.getId(),externalFirewallId);
          _networkExternalFirewallDao.persist(networkFW);
          externalFirewall=_hostDao.findById(device.getHostId());
        }
  finally {
          deviceMapLock.unlock();
        }
      }
    }
  finally {
      deviceMapLock.releaseRef();
    }
  }
 else {
    ExternalFirewallDeviceVO fwDeviceVO=getExternalFirewallForNetwork(network);
    externalFirewall=_hostDao.findById(fwDeviceVO.getHostId());
  }
  Account account=_accountDao.findByIdIncludingRemoved(network.getAccountId());
  NetworkOffering offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
  boolean sharedSourceNat=offering.getSharedSourceNat();
  IPAddressVO sourceNatIp=null;
  if (!sharedSourceNat) {
    List<IPAddressVO> sourceNatIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(network.getAccountId(),zoneId,true,null);
    if (sourceNatIps.size() != 1) {
      String errorMsg=""String_Node_Str"" + account.getAccountName();
      s_logger.error(errorMsg);
      return true;
    }
 else {
      sourceNatIp=sourceNatIps.get(0);
    }
  }
  long guestVlanTag=Long.parseLong(network.getBroadcastUri().getHost());
  String guestVlanGateway=network.getGateway();
  String guestVlanCidr=network.getCidr();
  String sourceNatIpAddress=null;
  String publicVlanTag=null;
  if (sourceNatIp != null) {
    sourceNatIpAddress=sourceNatIp.getAddress().addr();
    VlanVO publicVlan=_vlanDao.findById(sourceNatIp.getVlanId());
    publicVlanTag=publicVlan.getVlanTag();
  }
  Integer networkRate=_networkMgr.getNetworkRate(network.getId(),null);
  IpAddressTO ip=new IpAddressTO(account.getAccountId(),sourceNatIpAddress,add,false,!sharedSourceNat,publicVlanTag,null,null,null,null,networkRate,false);
  IpAddressTO[] ips=new IpAddressTO[1];
  ips[0]=ip;
  IpAssocCommand cmd=new IpAssocCommand(ips);
  cmd.setAccessDetail(NetworkElementCommand.GUEST_NETWORK_GATEWAY,guestVlanGateway);
  cmd.setAccessDetail(NetworkElementCommand.GUEST_NETWORK_CIDR,guestVlanCidr);
  cmd.setAccessDetail(NetworkElementCommand.GUEST_VLAN_TAG,String.valueOf(guestVlanTag));
  Answer answer=_agentMgr.easySend(externalFirewall.getId(),cmd);
  if (answer == null || !answer.getResult()) {
    String action=add ? ""String_Node_Str"" : ""String_Node_Str"";
    String answerDetails=(answer != null) ? answer.getDetails() : ""String_Node_Str"";
    String msg=""String_Node_Str"" + action + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str""+ answerDetails;
    s_logger.error(msg);
    throw new ResourceUnavailableException(msg,DataCenter.class,zoneId);
  }
  List<String> reservedIpAddressesForGuestNetwork=_nicDao.listIpAddressInNetwork(network.getId());
  if (add && (!reservedIpAddressesForGuestNetwork.contains(network.getGateway()))) {
    savePlaceholderNic(network,network.getGateway());
  }
  List<NicVO> nicsInNetwork=_nicDao.listByNetworkId(network.getId());
  for (  NicVO nic : nicsInNetwork) {
    InlineLoadBalancerNicMapVO mapping=_inlineLoadBalancerNicMapDao.findByNicId(nic.getId());
    if (mapping != null) {
      _nicDao.expunge(mapping.getNicId());
      _inlineLoadBalancerNicMapDao.expunge(mapping.getId());
    }
  }
  String action=add ? ""String_Node_Str"" : ""String_Node_Str"";
  s_logger.debug(""String_Node_Str"" + action + ""String_Node_Str""+ account.getAccountName()+ ""String_Node_Str""+ account.getAccountId()+ ""String_Node_Str""+ guestVlanTag);
  return true;
}","@Override public boolean manageGuestNetworkWithExternalFirewall(boolean add,Network network) throws ResourceUnavailableException, InsufficientCapacityException {
  if (network.getTrafficType() != TrafficType.Guest) {
    s_logger.trace(""String_Node_Str"");
    return false;
  }
  long zoneId=network.getDataCenterId();
  DataCenterVO zone=_dcDao.findById(zoneId);
  HostVO externalFirewall=null;
  if (add) {
    GlobalLock deviceMapLock=GlobalLock.getInternLock(""String_Node_Str"");
    try {
      if (deviceMapLock.lock(120)) {
        try {
          ExternalFirewallDeviceVO device=findSuitableFirewallForNetwork(network);
          long externalFirewallId=device.getId();
          NetworkExternalFirewallVO networkFW=new NetworkExternalFirewallVO(network.getId(),externalFirewallId);
          _networkExternalFirewallDao.persist(networkFW);
          externalFirewall=_hostDao.findById(device.getHostId());
        }
  finally {
          deviceMapLock.unlock();
        }
      }
    }
  finally {
      deviceMapLock.releaseRef();
    }
  }
 else {
    ExternalFirewallDeviceVO fwDeviceVO=getExternalFirewallForNetwork(network);
    if (fwDeviceVO == null) {
      s_logger.warn(""String_Node_Str"" + ""String_Node_Str"");
      return true;
    }
    externalFirewall=_hostDao.findById(fwDeviceVO.getHostId());
  }
  Account account=_accountDao.findByIdIncludingRemoved(network.getAccountId());
  NetworkOffering offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
  boolean sharedSourceNat=offering.getSharedSourceNat();
  IPAddressVO sourceNatIp=null;
  if (!sharedSourceNat) {
    List<IPAddressVO> sourceNatIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(network.getAccountId(),zoneId,true,null);
    if (sourceNatIps.size() != 1) {
      String errorMsg=""String_Node_Str"" + account.getAccountName();
      s_logger.error(errorMsg);
      return true;
    }
 else {
      sourceNatIp=sourceNatIps.get(0);
    }
  }
  long guestVlanTag=Long.parseLong(network.getBroadcastUri().getHost());
  String guestVlanGateway=network.getGateway();
  String guestVlanCidr=network.getCidr();
  String sourceNatIpAddress=null;
  String publicVlanTag=null;
  if (sourceNatIp != null) {
    sourceNatIpAddress=sourceNatIp.getAddress().addr();
    VlanVO publicVlan=_vlanDao.findById(sourceNatIp.getVlanId());
    publicVlanTag=publicVlan.getVlanTag();
  }
  Integer networkRate=_networkMgr.getNetworkRate(network.getId(),null);
  IpAddressTO ip=new IpAddressTO(account.getAccountId(),sourceNatIpAddress,add,false,!sharedSourceNat,publicVlanTag,null,null,null,null,networkRate,false);
  IpAddressTO[] ips=new IpAddressTO[1];
  ips[0]=ip;
  IpAssocCommand cmd=new IpAssocCommand(ips);
  cmd.setAccessDetail(NetworkElementCommand.GUEST_NETWORK_GATEWAY,guestVlanGateway);
  cmd.setAccessDetail(NetworkElementCommand.GUEST_NETWORK_CIDR,guestVlanCidr);
  cmd.setAccessDetail(NetworkElementCommand.GUEST_VLAN_TAG,String.valueOf(guestVlanTag));
  Answer answer=_agentMgr.easySend(externalFirewall.getId(),cmd);
  if (answer == null || !answer.getResult()) {
    String action=add ? ""String_Node_Str"" : ""String_Node_Str"";
    String answerDetails=(answer != null) ? answer.getDetails() : ""String_Node_Str"";
    String msg=""String_Node_Str"" + action + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str""+ answerDetails;
    s_logger.error(msg);
    throw new ResourceUnavailableException(msg,DataCenter.class,zoneId);
  }
  List<String> reservedIpAddressesForGuestNetwork=_nicDao.listIpAddressInNetwork(network.getId());
  if (add && (!reservedIpAddressesForGuestNetwork.contains(network.getGateway()))) {
    savePlaceholderNic(network,network.getGateway());
  }
  List<NicVO> nicsInNetwork=_nicDao.listByNetworkId(network.getId());
  for (  NicVO nic : nicsInNetwork) {
    InlineLoadBalancerNicMapVO mapping=_inlineLoadBalancerNicMapDao.findByNicId(nic.getId());
    if (mapping != null) {
      _nicDao.expunge(mapping.getNicId());
      _inlineLoadBalancerNicMapDao.expunge(mapping.getId());
    }
  }
  String action=add ? ""String_Node_Str"" : ""String_Node_Str"";
  s_logger.debug(""String_Node_Str"" + action + ""String_Node_Str""+ account.getAccountName()+ ""String_Node_Str""+ account.getAccountId()+ ""String_Node_Str""+ guestVlanTag);
  return true;
}"
89154,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_PHYSICAL_NETWORK_UPDATE,eventDescription=""String_Node_Str"",async=true) public PhysicalNetwork updatePhysicalNetwork(Long id,String networkSpeed,List<String> tags,String newVnetRangeString,String state){
  PhysicalNetworkVO network=_physicalNetworkDao.findById(id);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  DataCenter zone=_dcDao.findById(network.getDataCenterId());
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + network.getDataCenterId() + ""String_Node_Str"");
  }
  if (newVnetRangeString != null) {
    if (zone.getNetworkType() == NetworkType.Basic || (zone.getNetworkType() == NetworkType.Advanced && zone.isSecurityGroupEnabled())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str""+ zone.isSecurityGroupEnabled());
    }
  }
  if (tags != null && tags.size() > 1) {
    throw new InvalidParameterException(""String_Node_Str"");
  }
  PhysicalNetwork.State networkState=null;
  if (state != null && !state.isEmpty()) {
    try {
      networkState=PhysicalNetwork.State.valueOf(state);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + state + ""String_Node_Str"");
    }
  }
  if (state != null) {
    network.setState(networkState);
  }
  if (tags != null) {
    network.setTags(tags);
  }
  if (networkSpeed != null) {
    network.setSpeed(networkSpeed);
  }
  boolean replaceVnet=false;
  ArrayList<Pair<Integer,Integer>> vnetsToAdd=new ArrayList<Pair<Integer,Integer>>(2);
  if (newVnetRangeString != null) {
    Integer newStartVnet=0;
    Integer newEndVnet=0;
    String[] newVnetRange=newVnetRangeString.split(""String_Node_Str"");
    if (newVnetRange.length < 2) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (newVnetRange[0] == null || newVnetRange[1] == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    try {
      newStartVnet=Integer.parseInt(newVnetRange[0]);
      newEndVnet=Integer.parseInt(newVnetRange[1]);
    }
 catch (    NumberFormatException e) {
      s_logger.warn(""String_Node_Str"",e);
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (newStartVnet < 0 || newEndVnet > 4096) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (newStartVnet > newEndVnet) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (physicalNetworkHasAllocatedVnets(network.getDataCenterId(),network.getId())) {
      String[] existingRange=network.getVnet().split(""String_Node_Str"");
      int existingStartVnet=Integer.parseInt(existingRange[0]);
      int existingEndVnet=Integer.parseInt(existingRange[1]);
      if (!(newStartVnet.intValue() > existingStartVnet && newEndVnet.intValue() < existingEndVnet)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (newStartVnet < existingStartVnet) {
        vnetsToAdd.add(new Pair<Integer,Integer>(newStartVnet,existingStartVnet - 1));
      }
      if (newEndVnet > existingEndVnet) {
        vnetsToAdd.add(new Pair<Integer,Integer>(existingEndVnet + 1,newEndVnet));
      }
    }
 else {
      vnetsToAdd.add(new Pair<Integer,Integer>(newStartVnet,newEndVnet));
      replaceVnet=true;
    }
  }
  if (newVnetRangeString != null) {
    network.setVnet(newVnetRangeString);
  }
  _physicalNetworkDao.update(id,network);
  if (replaceVnet) {
    s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str""+ network.getDataCenterId()+ ""String_Node_Str"");
    _dcDao.deleteVnet(network.getId());
  }
  for (  Pair<Integer,Integer> vnetToAdd : vnetsToAdd) {
    s_logger.debug(""String_Node_Str"" + vnetToAdd.first() + ""String_Node_Str""+ vnetToAdd.second()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ network.getDataCenterId()+ ""String_Node_Str"");
    _dcDao.addVnet(network.getDataCenterId(),network.getId(),vnetToAdd.first(),vnetToAdd.second());
  }
  return network;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_PHYSICAL_NETWORK_UPDATE,eventDescription=""String_Node_Str"",async=true) public PhysicalNetwork updatePhysicalNetwork(Long id,String networkSpeed,List<String> tags,String newVnetRangeString,String state){
  PhysicalNetworkVO network=_physicalNetworkDao.findById(id);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  DataCenter zone=_dcDao.findById(network.getDataCenterId());
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + network.getDataCenterId() + ""String_Node_Str"");
  }
  if (newVnetRangeString != null) {
    if (zone.getNetworkType() == NetworkType.Basic || (zone.getNetworkType() == NetworkType.Advanced && zone.isSecurityGroupEnabled())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str""+ zone.isSecurityGroupEnabled());
    }
  }
  if (tags != null && tags.size() > 1) {
    throw new InvalidParameterException(""String_Node_Str"");
  }
  PhysicalNetwork.State networkState=null;
  if (state != null && !state.isEmpty()) {
    try {
      networkState=PhysicalNetwork.State.valueOf(state);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + state + ""String_Node_Str"");
    }
  }
  if (state != null) {
    network.setState(networkState);
  }
  if (tags != null) {
    network.setTags(tags);
  }
  if (networkSpeed != null) {
    network.setSpeed(networkSpeed);
  }
  boolean replaceVnet=false;
  ArrayList<Pair<Integer,Integer>> vnetsToAdd=new ArrayList<Pair<Integer,Integer>>(2);
  if (newVnetRangeString != null) {
    Integer newStartVnet=0;
    Integer newEndVnet=0;
    String[] newVnetRange=newVnetRangeString.split(""String_Node_Str"");
    if (newVnetRange.length < 2) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (newVnetRange[0] == null || newVnetRange[1] == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    try {
      newStartVnet=Integer.parseInt(newVnetRange[0]);
      newEndVnet=Integer.parseInt(newVnetRange[1]);
    }
 catch (    NumberFormatException e) {
      s_logger.warn(""String_Node_Str"",e);
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (newStartVnet < 0 || newEndVnet > 4096) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (newStartVnet > newEndVnet) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (physicalNetworkHasAllocatedVnets(network.getDataCenterId(),network.getId())) {
      String[] existingRange=network.getVnet().split(""String_Node_Str"");
      int existingStartVnet=Integer.parseInt(existingRange[0]);
      int existingEndVnet=Integer.parseInt(existingRange[1]);
      if (newStartVnet.intValue() > existingStartVnet || newEndVnet.intValue() < existingEndVnet) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (newStartVnet < existingStartVnet) {
        vnetsToAdd.add(new Pair<Integer,Integer>(newStartVnet,existingStartVnet - 1));
      }
      if (newEndVnet > existingEndVnet) {
        vnetsToAdd.add(new Pair<Integer,Integer>(existingEndVnet + 1,newEndVnet));
      }
    }
 else {
      vnetsToAdd.add(new Pair<Integer,Integer>(newStartVnet,newEndVnet));
      replaceVnet=true;
    }
  }
  if (newVnetRangeString != null) {
    network.setVnet(newVnetRangeString);
  }
  _physicalNetworkDao.update(id,network);
  if (replaceVnet) {
    s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str""+ network.getDataCenterId()+ ""String_Node_Str"");
    _dcDao.deleteVnet(network.getId());
  }
  for (  Pair<Integer,Integer> vnetToAdd : vnetsToAdd) {
    s_logger.debug(""String_Node_Str"" + vnetToAdd.first() + ""String_Node_Str""+ vnetToAdd.second()+ ""String_Node_Str""+ id+ ""String_Node_Str""+ network.getDataCenterId()+ ""String_Node_Str"");
    _dcDao.addVnet(network.getDataCenterId(),network.getId(),vnetToAdd.first(),vnetToAdd.second());
  }
  return network;
}"
89155,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_SNAPSHOT_DELETE,eventDescription=""String_Node_Str"",async=true) public boolean deleteSnapshot(long snapshotId){
  Account caller=UserContext.current().getCaller();
  Snapshot snapshotCheck=_snapshotDao.findByIdIncludingRemoved(snapshotId);
  if (snapshotCheck == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId);
  }
  _accountMgr.checkAccess(caller,null,true,snapshotCheck);
  if (!Status.BackedUp.equals(snapshotCheck.getStatus())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
  }
  return deleteSnapshotInternal(snapshotId);
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_SNAPSHOT_DELETE,eventDescription=""String_Node_Str"",async=true) public boolean deleteSnapshot(long snapshotId){
  Account caller=UserContext.current().getCaller();
  Snapshot snapshotCheck=_snapshotDao.findById(snapshotId);
  if (snapshotCheck == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId);
  }
  _accountMgr.checkAccess(caller,null,true,snapshotCheck);
  if (!Status.BackedUp.equals(snapshotCheck.getStatus())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
  }
  return deleteSnapshotInternal(snapshotId);
}"
89156,"@Override public List<? extends NetworkOffering> searchForNetworkOfferings(ListNetworkOfferingsCmd cmd){
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  isAscending=(isAscending == null ? true : isAscending);
  Filter searchFilter=new Filter(NetworkOfferingVO.class,""String_Node_Str"",isAscending,cmd.getStartIndex(),cmd.getPageSizeVal());
  Account caller=UserContext.current().getCaller();
  SearchCriteria<NetworkOfferingVO> sc=_networkOfferingDao.createSearchCriteria();
  Long id=cmd.getId();
  Object name=cmd.getNetworkOfferingName();
  Object displayText=cmd.getDisplayText();
  Object trafficType=cmd.getTrafficType();
  Object isDefault=cmd.getIsDefault();
  Object specifyVlan=cmd.getSpecifyVlan();
  Object availability=cmd.getAvailability();
  Object state=cmd.getState();
  Long zoneId=cmd.getZoneId();
  DataCenter zone=null;
  Long networkId=cmd.getNetworkId();
  String guestIpType=cmd.getGuestIpType();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  Object specifyIpRanges=cmd.getSpecifyIpRanges();
  if (zoneId != null) {
    zone=getZone(zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
  }
  Object keyword=cmd.getKeyword();
  if (keyword != null) {
    SearchCriteria<NetworkOfferingVO> ssc=_networkOfferingDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (guestIpType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,guestIpType);
  }
  if (displayText != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + displayText + ""String_Node_Str"");
  }
  if (trafficType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,trafficType);
  }
  if (isDefault != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isDefault);
  }
  if (specifyVlan != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,specifyVlan);
  }
  if (availability != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,availability);
  }
  if (state != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,state);
  }
  if (specifyIpRanges != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,specifyIpRanges);
  }
  if (zone != null) {
    if (zone.getNetworkType() == NetworkType.Basic) {
      return new ArrayList<NetworkOffering>();
    }
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  if (networkId != null) {
    Network network=_networkMgr.getNetwork(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
    NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
    if (offering.isSystemOnly()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,network);
    List<Long> offeringIds=_networkMgr.listNetworkOfferingsForUpgrade(networkId);
    if (!offeringIds.isEmpty()) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,offeringIds.toArray());
    }
 else {
      return new ArrayList<NetworkOffering>();
    }
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  List<NetworkOfferingVO> offerings=_networkOfferingDao.search(sc,searchFilter);
  Boolean sourceNatSupported=cmd.getSourceNatSupported();
  boolean listBySupportedServices=(supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty());
  boolean checkIfProvidersAreEnabled=(zoneId != null);
  boolean parseOfferings=(listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled);
  if (parseOfferings) {
    List<NetworkOfferingVO> supportedOfferings=new ArrayList<NetworkOfferingVO>();
    Service[] supportedServices=null;
    if (listBySupportedServices) {
      supportedServices=new Service[supportedServicesStr.size()];
      int i=0;
      for (      String supportedServiceStr : supportedServicesStr) {
        Service service=Service.getService(supportedServiceStr);
        if (service == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + supportedServiceStr);
        }
 else {
          supportedServices[i]=service;
        }
        i++;
      }
    }
    for (    NetworkOfferingVO offering : offerings) {
      boolean addOffering=true;
      List<Service> checkForProviders=new ArrayList<Service>();
      if (listBySupportedServices) {
        addOffering=addOffering && _networkMgr.areServicesSupportedByNetworkOffering(offering.getId(),supportedServices);
      }
      if (checkIfProvidersAreEnabled) {
        if (supportedServices != null && supportedServices.length > 0) {
          checkForProviders=Arrays.asList(supportedServices);
        }
 else {
          checkForProviders=_networkMgr.listNetworkOfferingServices(offering.getId());
        }
        addOffering=addOffering && _networkMgr.areServicesEnabledInZone(zoneId,offering.getId(),offering.getTags(),checkForProviders);
      }
      if (sourceNatSupported != null) {
        addOffering=addOffering && (_networkMgr.areServicesSupportedByNetworkOffering(offering.getId(),Network.Service.SourceNat) == sourceNatSupported);
      }
      if (addOffering) {
        supportedOfferings.add(offering);
      }
    }
    return supportedOfferings;
  }
 else {
    return offerings;
  }
}","@Override public List<? extends NetworkOffering> searchForNetworkOfferings(ListNetworkOfferingsCmd cmd){
  Boolean isAscending=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  isAscending=(isAscending == null ? true : isAscending);
  Filter searchFilter=new Filter(NetworkOfferingVO.class,""String_Node_Str"",isAscending,cmd.getStartIndex(),cmd.getPageSizeVal());
  Account caller=UserContext.current().getCaller();
  SearchCriteria<NetworkOfferingVO> sc=_networkOfferingDao.createSearchCriteria();
  Long id=cmd.getId();
  Object name=cmd.getNetworkOfferingName();
  Object displayText=cmd.getDisplayText();
  Object trafficType=cmd.getTrafficType();
  Object isDefault=cmd.getIsDefault();
  Object specifyVlan=cmd.getSpecifyVlan();
  Object availability=cmd.getAvailability();
  Object state=cmd.getState();
  Long zoneId=cmd.getZoneId();
  DataCenter zone=null;
  Long networkId=cmd.getNetworkId();
  String guestIpType=cmd.getGuestIpType();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  Object specifyIpRanges=cmd.getSpecifyIpRanges();
  if (zoneId != null) {
    zone=getZone(zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
  }
  Object keyword=cmd.getKeyword();
  if (keyword != null) {
    SearchCriteria<NetworkOfferingVO> ssc=_networkOfferingDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (guestIpType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,guestIpType);
  }
  if (displayText != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + displayText + ""String_Node_Str"");
  }
  if (trafficType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,trafficType);
  }
  if (isDefault != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isDefault);
  }
  if (specifyVlan != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,specifyVlan);
  }
  if (availability != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,availability);
  }
  if (state != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,state);
  }
  if (specifyIpRanges != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,specifyIpRanges);
  }
  if (zone != null) {
    if (zone.getNetworkType() == NetworkType.Basic) {
      return new ArrayList<NetworkOffering>();
    }
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  if (networkId != null) {
    Network network=_networkMgr.getNetwork(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
    NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
    if (offering.isSystemOnly()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,network);
    List<Long> offeringIds=_networkMgr.listNetworkOfferingsForUpgrade(networkId);
    if (!offeringIds.isEmpty()) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,offeringIds.toArray());
    }
 else {
      return new ArrayList<NetworkOffering>();
    }
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  List<NetworkOfferingVO> offerings=_networkOfferingDao.search(sc,searchFilter);
  Boolean sourceNatSupported=cmd.getSourceNatSupported();
  boolean listBySupportedServices=(supportedServicesStr != null && !supportedServicesStr.isEmpty() && !offerings.isEmpty());
  boolean checkIfProvidersAreEnabled=(zoneId != null);
  boolean parseOfferings=(listBySupportedServices || sourceNatSupported != null || checkIfProvidersAreEnabled);
  if (parseOfferings) {
    List<NetworkOfferingVO> supportedOfferings=new ArrayList<NetworkOfferingVO>();
    Service[] supportedServices=null;
    if (listBySupportedServices) {
      supportedServices=new Service[supportedServicesStr.size()];
      int i=0;
      for (      String supportedServiceStr : supportedServicesStr) {
        Service service=Service.getService(supportedServiceStr);
        if (service == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + supportedServiceStr);
        }
 else {
          supportedServices[i]=service;
        }
        i++;
      }
    }
    for (    NetworkOfferingVO offering : offerings) {
      boolean addOffering=true;
      List<Service> checkForProviders=new ArrayList<Service>();
      if (listBySupportedServices) {
        addOffering=addOffering && _networkMgr.areServicesSupportedByNetworkOffering(offering.getId(),supportedServices);
      }
      if (checkIfProvidersAreEnabled) {
        if (supportedServices != null && supportedServices.length > 0) {
          checkForProviders=Arrays.asList(supportedServices);
        }
 else {
          checkForProviders=_networkMgr.listNetworkOfferingServices(offering.getId());
        }
        addOffering=addOffering && _networkMgr.areServicesEnabledInZone(zoneId,offering,checkForProviders);
      }
      if (sourceNatSupported != null) {
        addOffering=addOffering && (_networkMgr.areServicesSupportedByNetworkOffering(offering.getId(),Network.Service.SourceNat) == sourceNatSupported);
      }
      if (addOffering) {
        supportedOfferings.add(offering);
      }
    }
    return supportedOfferings;
  }
 else {
    return offerings;
  }
}"
89157,"boolean areServicesEnabledInZone(long zoneId,long networkOfferingId,String tags,List<Service> services);","boolean areServicesEnabledInZone(long zoneId,NetworkOffering offering,List<Service> services);"
89158,"@Override public boolean areServicesEnabledInZone(long zoneId,long networkOfferingId,String tags,List<Service> services){
  long physicalNtwkId=findPhysicalNetworkId(zoneId,tags,null);
  boolean result=true;
  List<String> checkedProvider=new ArrayList<String>();
  for (  Service service : services) {
    List<String> providerNames=_ntwkOfferingSrvcDao.listProvidersForServiceForNetworkOffering(networkOfferingId,service);
    for (    String providerName : providerNames) {
      if (!checkedProvider.contains(providerName)) {
        result=result && isProviderEnabledInPhysicalNetwork(physicalNtwkId,providerName);
      }
    }
  }
  return result;
}","@Override public boolean areServicesEnabledInZone(long zoneId,NetworkOffering offering,List<Service> services){
  long physicalNtwkId=findPhysicalNetworkId(zoneId,offering.getTags(),offering.getTrafficType());
  boolean result=true;
  List<String> checkedProvider=new ArrayList<String>();
  for (  Service service : services) {
    List<String> providerNames=_ntwkOfferingSrvcDao.listProvidersForServiceForNetworkOffering(offering.getId(),service);
    for (    String providerName : providerNames) {
      if (!checkedProvider.contains(providerName)) {
        result=result && isProviderEnabledInPhysicalNetwork(physicalNtwkId,providerName);
      }
    }
  }
  return result;
}"
89159,"@Override public boolean areServicesEnabledInZone(long zoneId,long networkOfferingId,String tags,List<Service> services){
  return false;
}","@Override public boolean areServicesEnabledInZone(long zoneId,NetworkOffering offering,List<Service> services){
  return false;
}"
89160,"@Override public void startAgentHttpHandlerInVM(StartupProxyCommand startupCmd){
  StartConsoleProxyAgentHttpHandlerCommand cmd=null;
  if (_configDao.isPremium()) {
    String storePassword=String.valueOf(_random.nextLong());
    byte[] ksBits=_ksMgr.getKeystoreBits(ConsoleProxyManager.CERTIFICATE_NAME,ConsoleProxyManager.CERTIFICATE_NAME,storePassword);
    assert(ksBits != null);
    if (ksBits == null) {
      s_logger.error(""String_Node_Str"");
    }
    cmd=new StartConsoleProxyAgentHttpHandlerCommand(ksBits,storePassword);
  }
 else {
    cmd=new StartConsoleProxyAgentHttpHandlerCommand();
  }
  try {
    long proxyVmId=startupCmd.getProxyVmId();
    ConsoleProxyVO consoleProxy=_consoleProxyDao.findById(proxyVmId);
    assert(consoleProxy != null);
    HostVO consoleProxyHost=findConsoleProxyHostByName(consoleProxy.getHostName());
    Answer answer=_agentMgr.send(consoleProxyHost.getId(),cmd);
    if (answer == null || !answer.getResult()) {
      s_logger.error(""String_Node_Str"");
    }
 else {
      s_logger.info(""String_Node_Str"");
    }
  }
 catch (  AgentUnavailableException e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
catch (  OperationTimedoutException e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
catch (  OutOfMemoryError e) {
    s_logger.error(""String_Node_Str"");
    System.exit(1);
  }
catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
}","@Override public void startAgentHttpHandlerInVM(StartupProxyCommand startupCmd){
  StartConsoleProxyAgentHttpHandlerCommand cmd=null;
  if (_configDao.isPremium()) {
    String storePassword=String.valueOf(_random.nextLong());
    byte[] ksBits=_ksMgr.getKeystoreBits(ConsoleProxyManager.CERTIFICATE_NAME,ConsoleProxyManager.CERTIFICATE_NAME,storePassword);
    assert(ksBits != null);
    if (ksBits == null) {
      s_logger.error(""String_Node_Str"");
    }
    cmd=new StartConsoleProxyAgentHttpHandlerCommand(ksBits,storePassword);
  }
 else {
    cmd=new StartConsoleProxyAgentHttpHandlerCommand();
  }
  try {
    long proxyVmId=startupCmd.getProxyVmId();
    ConsoleProxyVO consoleProxy=_consoleProxyDao.findById(proxyVmId);
    if (consoleProxy == null) {
      s_logger.info(""String_Node_Str"" + proxyVmId + ""String_Node_Str"");
      return;
    }
    assert(consoleProxy != null);
    HostVO consoleProxyHost=findConsoleProxyHostByName(consoleProxy.getHostName());
    Answer answer=_agentMgr.send(consoleProxyHost.getId(),cmd);
    if (answer == null || !answer.getResult()) {
      s_logger.error(""String_Node_Str"");
    }
 else {
      s_logger.info(""String_Node_Str"");
    }
  }
 catch (  AgentUnavailableException e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
catch (  OperationTimedoutException e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
catch (  OutOfMemoryError e) {
    s_logger.error(""String_Node_Str"");
    System.exit(1);
  }
catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + startupCmd.getProxyVmId(),e);
  }
}"
89161,"@Override public NicProfile allocate(Network config,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException {
  if (_networkMgr.networkIsConfiguredForExternalNetworking(config.getDataCenterId(),config.getId()) && nic != null && nic.getRequestedIp() != null) {
    throw new CloudRuntimeException(""String_Node_Str"" + nic);
  }
  NicProfile profile=super.allocate(config,nic,vm);
  if (_ovsNetworkMgr.isOvsNetworkEnabled() || _tunnelMgr.isOvsTunnelEnabled()) {
    return null;
  }
  if (_networkMgr.networkIsConfiguredForExternalNetworking(config.getDataCenterId(),config.getId())) {
    profile.setStrategy(ReservationStrategy.Start);
    profile.setIp4Address(null);
    profile.setGateway(null);
    profile.setNetmask(null);
  }
  return profile;
}","@Override public NicProfile allocate(Network config,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException {
  if (_networkMgr.networkIsConfiguredForExternalNetworking(config.getDataCenterId(),config.getId()) && nic != null && nic.getRequestedIp() != null) {
    throw new CloudRuntimeException(""String_Node_Str"" + nic);
  }
  NicProfile profile=super.allocate(config,nic,vm);
  if (_ovsNetworkMgr.isOvsNetworkEnabled() || _tunnelMgr.isOvsTunnelEnabled()) {
    return null;
  }
  if (_networkMgr.networkIsConfiguredForExternalNetworking(config.getDataCenterId(),config.getId())) {
    profile.setStrategy(ReservationStrategy.Start);
    profile.setGateway(null);
    profile.setNetmask(null);
  }
  return profile;
}"
89162,"@Override public KVMStoragePool createStoragePool(String name,String host,String path,StoragePoolType type){
  StoragePool sp=null;
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.toString());
  }
  try {
    sp=conn.storagePoolLookupByUUIDString(name);
  }
 catch (  LibvirtException e) {
  }
  if (sp == null) {
    if (type == StoragePoolType.NetworkFilesystem) {
      sp=createNfsStoragePool(conn,name,host,path);
    }
 else     if (type == StoragePoolType.SharedMountPoint || type == StoragePoolType.Filesystem) {
      sp=CreateSharedStoragePool(conn,name,host,path);
    }
 else     if (type == StoragePoolType.CLVM) {
      sp=createCLVMStoragePool(conn,name,host,path);
    }
  }
  try {
    StoragePoolInfo spi=sp.getInfo();
    if (spi.state != StoragePoolState.VIR_STORAGE_POOL_RUNNING) {
      sp.create(0);
    }
    LibvirtStoragePoolDef spd=getStoragePoolDef(conn,sp);
    LibvirtStoragePool pool=new LibvirtStoragePool(name,sp.getName(),type,this,sp);
    pool.setLocalPath(spd.getTargetPath());
    if (pool.getType() == StoragePoolType.CLVM) {
      pool.setCapacity(sp.getInfo().capacity);
      pool.setUsed(sp.getInfo().allocation);
    }
 else {
      getStats(pool);
    }
    return pool;
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.toString());
  }
}","@Override public KVMStoragePool createStoragePool(String name,String host,String path,StoragePoolType type){
  StoragePool sp=null;
  Connect conn=null;
  try {
    conn=LibvirtConnection.getConnection();
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.toString());
  }
  try {
    sp=conn.storagePoolLookupByUUIDString(name);
    if (sp.getInfo().state != StoragePoolState.VIR_STORAGE_POOL_RUNNING) {
      sp.undefine();
      sp=null;
    }
  }
 catch (  LibvirtException e) {
  }
  if (sp == null) {
    if (type == StoragePoolType.NetworkFilesystem) {
      sp=createNfsStoragePool(conn,name,host,path);
    }
 else     if (type == StoragePoolType.SharedMountPoint || type == StoragePoolType.Filesystem) {
      sp=CreateSharedStoragePool(conn,name,host,path);
    }
 else     if (type == StoragePoolType.CLVM) {
      sp=createCLVMStoragePool(conn,name,host,path);
    }
  }
  try {
    StoragePoolInfo spi=sp.getInfo();
    if (spi.state != StoragePoolState.VIR_STORAGE_POOL_RUNNING) {
      sp.create(0);
    }
    LibvirtStoragePoolDef spd=getStoragePoolDef(conn,sp);
    LibvirtStoragePool pool=new LibvirtStoragePool(name,sp.getName(),type,this,sp);
    pool.setLocalPath(spd.getTargetPath());
    if (pool.getType() == StoragePoolType.CLVM) {
      pool.setCapacity(sp.getInfo().capacity);
      pool.setUsed(sp.getInfo().allocation);
    }
 else {
      getStats(pool);
    }
    return pool;
  }
 catch (  LibvirtException e) {
    throw new CloudRuntimeException(e.toString());
  }
}"
89163,"public StorageVol getVolumeFromURI(Connect conn,String volPath) throws LibvirtException, URISyntaxException {
  int index=volPath.lastIndexOf(""String_Node_Str"");
  URI volDir=null;
  StoragePool sp=null;
  StorageVol vol=null;
  try {
    volDir=new URI(volPath.substring(0,index));
    String volName=volPath.substring(index + 1);
    sp=getStoragePoolbyURI(conn,volDir);
    vol=sp.storageVolLookupByName(volName);
    return vol;
  }
 catch (  LibvirtException e) {
    s_logger.debug(""String_Node_Str"" + e.toString());
    throw e;
  }
 finally {
    try {
      if (sp != null) {
        sp.free();
      }
    }
 catch (    LibvirtException e) {
    }
  }
}","public StorageVol getVolumeFromURI(Connect conn,String volPath) throws LibvirtException, URISyntaxException {
}"
89164,"public Command[] getCommands(){
  if (_cmds == null) {
    try {
      _cmds=s_gson.fromJson(_content,Command[].class);
    }
 catch (    RuntimeException e) {
      s_logger.error(""String_Node_Str"" + _content,e);
      throw e;
    }
  }
  return _cmds;
}","public Command[] getCommands(){
  if (_cmds == null) {
    try {
      StringReader reader=new StringReader(_content);
      JsonReader jsonReader=new JsonReader(reader);
      jsonReader.setLenient(true);
      _cmds=s_gson.fromJson(jsonReader,(Type)Command[].class);
    }
 catch (    RuntimeException e) {
      s_logger.error(""String_Node_Str"" + _content,e);
      throw e;
    }
  }
  return _cmds;
}"
89165,"@Override public List<? extends FirewallRule> listFirewallRules(ListFirewallRulesCmd cmd){
  Long ipId=cmd.getIpAddressId();
  Long id=cmd.getId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipId != null) {
    IPAddressVO ipAddressVO=_ipAddressDao.findById(ipId);
    if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,ipAddressVO);
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter filter=new Filter(FirewallRuleVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<FirewallRuleVO> sb=_firewallDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getSourceIpAddressId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPurpose(),Op.EQ);
  SearchCriteria<FirewallRuleVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  sc.setParameters(""String_Node_Str"",Purpose.Firewall);
  return _firewallDao.search(sc,filter);
}","@Override public List<? extends FirewallRule> listFirewallRules(ListFirewallRulesCmd cmd){
  Long ipId=cmd.getIpAddressId();
  Long id=cmd.getId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipId != null) {
    IPAddressVO ipAddressVO=_ipAddressDao.findById(ipId);
    if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,ipAddressVO);
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter filter=new Filter(FirewallRuleVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<FirewallRuleVO> sb=_firewallDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getSourceIpAddressId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPurpose(),Op.EQ);
  SearchCriteria<FirewallRuleVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  sc.setParameters(""String_Node_Str"",Purpose.Firewall);
  return _firewallDao.search(sc,filter);
}"
89166,"@Override public List<LoadBalancerVO> searchForLoadBalancers(ListLoadBalancerRulesCmd cmd){
  Long ipId=cmd.getPublicIpId();
  Long zoneId=cmd.getZoneId();
  Long id=cmd.getId();
  String name=cmd.getLoadBalancerRuleName();
  String keyword=cmd.getKeyword();
  Long instanceId=cmd.getVirtualMachineId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(LoadBalancerVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<LoadBalancerVO> sb=_lbDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getSourceIpAddressId(),SearchCriteria.Op.EQ);
  if (instanceId != null) {
    SearchBuilder<LoadBalancerVMMapVO> lbVMSearch=_lb2VmMapDao.createSearchBuilder();
    lbVMSearch.and(""String_Node_Str"",lbVMSearch.entity().getInstanceId(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",lbVMSearch,sb.entity().getId(),lbVMSearch.entity().getLoadBalancerId(),JoinBuilder.JoinType.INNER);
  }
  if (zoneId != null) {
    SearchBuilder<IPAddressVO> ipSearch=_ipAddressDao.createSearchBuilder();
    ipSearch.and(""String_Node_Str"",ipSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",ipSearch,sb.entity().getSourceIpAddressId(),ipSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<LoadBalancerVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (keyword != null) {
    SearchCriteria<LoadBalancerVO> ssc=_lbDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  if (instanceId != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",instanceId);
  }
  if (zoneId != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",zoneId);
  }
  return _lbDao.search(sc,searchFilter);
}","@Override public List<LoadBalancerVO> searchForLoadBalancers(ListLoadBalancerRulesCmd cmd){
  Long ipId=cmd.getPublicIpId();
  Long zoneId=cmd.getZoneId();
  Long id=cmd.getId();
  String name=cmd.getLoadBalancerRuleName();
  String keyword=cmd.getKeyword();
  Long instanceId=cmd.getVirtualMachineId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(LoadBalancerVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<LoadBalancerVO> sb=_lbDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getSourceIpAddressId(),SearchCriteria.Op.EQ);
  if (instanceId != null) {
    SearchBuilder<LoadBalancerVMMapVO> lbVMSearch=_lb2VmMapDao.createSearchBuilder();
    lbVMSearch.and(""String_Node_Str"",lbVMSearch.entity().getInstanceId(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",lbVMSearch,sb.entity().getId(),lbVMSearch.entity().getLoadBalancerId(),JoinBuilder.JoinType.INNER);
  }
  if (zoneId != null) {
    SearchBuilder<IPAddressVO> ipSearch=_ipAddressDao.createSearchBuilder();
    ipSearch.and(""String_Node_Str"",ipSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",ipSearch,sb.entity().getSourceIpAddressId(),ipSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<LoadBalancerVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (keyword != null) {
    SearchCriteria<LoadBalancerVO> ssc=_lbDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  if (instanceId != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",instanceId);
  }
  if (zoneId != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",zoneId);
  }
  return _lbDao.search(sc,searchFilter);
}"
89167,"@Override public List<? extends FirewallRule> searchStaticNatRules(Long ipId,Long id,Long vmId,Long start,Long size,String accountName,Long domainId,Long projectId,boolean isRecursive,boolean listAll){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipId != null) {
    IPAddressVO ipAddressVO=_ipAddressDao.findById(ipId);
    if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,ipAddressVO);
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(domainId,isRecursive,null);
  _accountMgr.buildACLSearchParameters(caller,id,accountName,projectId,permittedAccounts,domainIdRecursiveListProject,listAll);
  domainId=domainIdRecursiveListProject.first();
  isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter filter=new Filter(PortForwardingRuleVO.class,""String_Node_Str"",false,start,size);
  SearchBuilder<FirewallRuleVO> sb=_firewallDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getSourceIpAddressId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPurpose(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),Op.EQ);
  if (vmId != null) {
    SearchBuilder<IPAddressVO> ipSearch=_ipAddressDao.createSearchBuilder();
    ipSearch.and(""String_Node_Str"",ipSearch.entity().getAssociatedWithVmId(),Op.EQ);
    sb.join(""String_Node_Str"",ipSearch,sb.entity().getSourceIpAddressId(),ipSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<FirewallRuleVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setParameters(""String_Node_Str"",Purpose.StaticNat);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  if (vmId != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",vmId);
  }
  return _firewallDao.search(sc,filter);
}","@Override public List<? extends FirewallRule> searchStaticNatRules(Long ipId,Long id,Long vmId,Long start,Long size,String accountName,Long domainId,Long projectId,boolean isRecursive,boolean listAll){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipId != null) {
    IPAddressVO ipAddressVO=_ipAddressDao.findById(ipId);
    if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,ipAddressVO);
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(domainId,isRecursive,null);
  _accountMgr.buildACLSearchParameters(caller,id,accountName,projectId,permittedAccounts,domainIdRecursiveListProject,listAll,false);
  domainId=domainIdRecursiveListProject.first();
  isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter filter=new Filter(PortForwardingRuleVO.class,""String_Node_Str"",false,start,size);
  SearchBuilder<FirewallRuleVO> sb=_firewallDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getSourceIpAddressId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPurpose(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),Op.EQ);
  if (vmId != null) {
    SearchBuilder<IPAddressVO> ipSearch=_ipAddressDao.createSearchBuilder();
    ipSearch.and(""String_Node_Str"",ipSearch.entity().getAssociatedWithVmId(),Op.EQ);
    sb.join(""String_Node_Str"",ipSearch,sb.entity().getSourceIpAddressId(),ipSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<FirewallRuleVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setParameters(""String_Node_Str"",Purpose.StaticNat);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  if (vmId != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",vmId);
  }
  return _firewallDao.search(sc,filter);
}"
89168,"@Override public List<? extends PortForwardingRule> listPortForwardingRules(ListPortForwardingRulesCmd cmd){
  Long ipId=cmd.getIpAddressId();
  Long id=cmd.getId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipId != null) {
    IPAddressVO ipAddressVO=_ipAddressDao.findById(ipId);
    if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,ipAddressVO);
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter filter=new Filter(PortForwardingRuleVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<PortForwardingRuleVO> sb=_portForwardingDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getSourceIpAddressId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPurpose(),Op.EQ);
  SearchCriteria<PortForwardingRuleVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  sc.setParameters(""String_Node_Str"",Purpose.PortForwarding);
  return _portForwardingDao.search(sc,filter);
}","@Override public List<? extends PortForwardingRule> listPortForwardingRules(ListPortForwardingRulesCmd cmd){
  Long ipId=cmd.getIpAddressId();
  Long id=cmd.getId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipId != null) {
    IPAddressVO ipAddressVO=_ipAddressDao.findById(ipId);
    if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,ipAddressVO);
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter filter=new Filter(PortForwardingRuleVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<PortForwardingRuleVO> sb=_portForwardingDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getSourceIpAddressId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPurpose(),Op.EQ);
  SearchCriteria<PortForwardingRuleVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  sc.setParameters(""String_Node_Str"",Purpose.PortForwarding);
  return _portForwardingDao.search(sc,filter);
}"
89169,"@Override public List<SecurityGroupRulesVO> searchForSecurityGroupRules(ListSecurityGroupsCmd cmd) throws PermissionDeniedException, InvalidParameterValueException {
  Account caller=UserContext.current().getCaller();
  Long instanceId=cmd.getVirtualMachineId();
  String securityGroup=cmd.getSecurityGroupName();
  Long id=cmd.getId();
  Object keyword=cmd.getKeyword();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (instanceId != null) {
    UserVmVO userVM=_userVMDao.findById(instanceId);
    if (userVM == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + instanceId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,userVM);
    return listSecurityGroupRulesByVM(instanceId.longValue());
  }
  List<SecurityGroupRulesVO> securityRulesList=new ArrayList<SecurityGroupRulesVO>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(SecurityGroupVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<SecurityGroupVO> sb=_securityGroupDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.EQ);
  SearchCriteria<SecurityGroupVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (securityGroup != null) {
    sc.setParameters(""String_Node_Str"",securityGroup);
  }
  if (keyword != null) {
    SearchCriteria<SecurityGroupRulesVO> ssc=_securityGroupRulesDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  List<SecurityGroupVO> securityGroups=_securityGroupDao.search(sc,searchFilter);
  for (  SecurityGroupVO group : securityGroups) {
    securityRulesList.addAll(_securityGroupRulesDao.listSecurityRulesByGroupId(group.getId()));
  }
  return securityRulesList;
}","@Override public List<SecurityGroupRulesVO> searchForSecurityGroupRules(ListSecurityGroupsCmd cmd) throws PermissionDeniedException, InvalidParameterValueException {
  Account caller=UserContext.current().getCaller();
  Long instanceId=cmd.getVirtualMachineId();
  String securityGroup=cmd.getSecurityGroupName();
  Long id=cmd.getId();
  Object keyword=cmd.getKeyword();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (instanceId != null) {
    UserVmVO userVM=_userVMDao.findById(instanceId);
    if (userVM == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + instanceId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,null,true,userVM);
    return listSecurityGroupRulesByVM(instanceId.longValue());
  }
  List<SecurityGroupRulesVO> securityRulesList=new ArrayList<SecurityGroupRulesVO>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(SecurityGroupVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<SecurityGroupVO> sb=_securityGroupDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.EQ);
  SearchCriteria<SecurityGroupVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (securityGroup != null) {
    sc.setParameters(""String_Node_Str"",securityGroup);
  }
  if (keyword != null) {
    SearchCriteria<SecurityGroupRulesVO> ssc=_securityGroupRulesDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  List<SecurityGroupVO> securityGroups=_securityGroupDao.search(sc,searchFilter);
  for (  SecurityGroupVO group : securityGroups) {
    securityRulesList.addAll(_securityGroupRulesDao.listSecurityRulesByGroupId(group.getId()));
  }
  return securityRulesList;
}"
89170,"@Override public List<RemoteAccessVpnVO> searchForRemoteAccessVpns(ListRemoteAccessVpnsCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long ipAddressId=cmd.getPublicIpId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipAddressId != null) {
    PublicIpAddress publicIp=_networkMgr.getPublicIpAddress(ipAddressId);
    if (publicIp == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipAddressId + ""String_Node_Str"");
    }
 else {
      Long ipAddrAcctId=publicIp.getAccountId();
      if (ipAddrAcctId == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ipAddressId + ""String_Node_Str"");
      }
    }
    _accountMgr.checkAccess(caller,null,true,publicIp);
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,null,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter filter=new Filter(RemoteAccessVpnVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<RemoteAccessVpnVO> sb=_remoteAccessVpnDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getServerAddressId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),Op.EQ);
  SearchCriteria<RemoteAccessVpnVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setParameters(""String_Node_Str"",RemoteAccessVpn.State.Running);
  if (ipAddressId != null) {
    sc.setParameters(""String_Node_Str"",ipAddressId);
  }
  return _remoteAccessVpnDao.search(sc,filter);
}","@Override public List<RemoteAccessVpnVO> searchForRemoteAccessVpns(ListRemoteAccessVpnsCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long ipAddressId=cmd.getPublicIpId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (ipAddressId != null) {
    PublicIpAddress publicIp=_networkMgr.getPublicIpAddress(ipAddressId);
    if (publicIp == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ipAddressId + ""String_Node_Str"");
    }
 else {
      Long ipAddrAcctId=publicIp.getAccountId();
      if (ipAddrAcctId == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ipAddressId + ""String_Node_Str"");
      }
    }
    _accountMgr.checkAccess(caller,null,true,publicIp);
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,null,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter filter=new Filter(RemoteAccessVpnVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<RemoteAccessVpnVO> sb=_remoteAccessVpnDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getServerAddressId(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),Op.EQ);
  SearchCriteria<RemoteAccessVpnVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setParameters(""String_Node_Str"",RemoteAccessVpn.State.Running);
  if (ipAddressId != null) {
    sc.setParameters(""String_Node_Str"",ipAddressId);
  }
  return _remoteAccessVpnDao.search(sc,filter);
}"
89171,"@Override public List<VpnUserVO> searchForVpnUsers(ListVpnUsersCmd cmd){
  String username=cmd.getUsername();
  Long id=cmd.getId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(VpnUserVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<VpnUserVO> sb=_vpnUsersDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getUsername(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  SearchCriteria<VpnUserVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setParameters(""String_Node_Str"",State.Active);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (username != null) {
    sc.setParameters(""String_Node_Str"",username);
  }
  return _vpnUsersDao.search(sc,searchFilter);
}","@Override public List<VpnUserVO> searchForVpnUsers(ListVpnUsersCmd cmd){
  String username=cmd.getUsername();
  Long id=cmd.getId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(VpnUserVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<VpnUserVO> sb=_vpnUsersDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getUsername(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  SearchCriteria<VpnUserVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setParameters(""String_Node_Str"",State.Active);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (username != null) {
    sc.setParameters(""String_Node_Str"",username);
  }
  return _vpnUsersDao.search(sc,searchFilter);
}"
89172,"@Override public List<? extends ProjectInvitation> listProjectInvitations(Long id,Long projectId,String accountName,Long domainId,String state,boolean activeOnly,Long startIndex,Long pageSizeVal,boolean isRecursive,boolean listAll){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(domainId,isRecursive,null);
  _accountMgr.buildACLSearchParameters(caller,id,accountName,projectId,permittedAccounts,domainIdRecursiveListProject,listAll);
  domainId=domainIdRecursiveListProject.first();
  isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(ProjectInvitationVO.class,""String_Node_Str"",true,startIndex,pageSizeVal);
  SearchBuilder<ProjectInvitationVO> sb=_projectInvitationDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getProjectId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getCreated(),SearchCriteria.Op.GT);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  SearchCriteria<ProjectInvitationVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (projectId != null) {
    sc.setParameters(""String_Node_Str"",projectId);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (activeOnly) {
    sc.setParameters(""String_Node_Str"",ProjectInvitation.State.Pending);
    sc.setParameters(""String_Node_Str"",new Date((DateUtil.currentGMTTime().getTime()) - _invitationTimeOut));
  }
  return _projectInvitationDao.search(sc,searchFilter);
}","@Override public List<? extends ProjectInvitation> listProjectInvitations(Long id,Long projectId,String accountName,Long domainId,String state,boolean activeOnly,Long startIndex,Long pageSizeVal,boolean isRecursive,boolean listAll){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(domainId,isRecursive,null);
  _accountMgr.buildACLSearchParameters(caller,id,accountName,projectId,permittedAccounts,domainIdRecursiveListProject,listAll,true);
  domainId=domainIdRecursiveListProject.first();
  isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(ProjectInvitationVO.class,""String_Node_Str"",true,startIndex,pageSizeVal);
  SearchBuilder<ProjectInvitationVO> sb=_projectInvitationDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getProjectId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getCreated(),SearchCriteria.Op.GT);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  SearchCriteria<ProjectInvitationVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (projectId != null) {
    sc.setParameters(""String_Node_Str"",projectId);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (activeOnly) {
    sc.setParameters(""String_Node_Str"",ProjectInvitation.State.Pending);
    sc.setParameters(""String_Node_Str"",new Date((DateUtil.currentGMTTime().getTime()) - _invitationTimeOut));
  }
  return _projectInvitationDao.search(sc,searchFilter);
}"
89173,"@Override public List<? extends SSHKeyPair> listSSHKeyPairs(ListSSHKeyPairsCmd cmd){
  String name=cmd.getName();
  String fingerPrint=cmd.getFingerprint();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,null,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  SearchBuilder<SSHKeyPairVO> sb=_sshKeyPairDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  Filter searchFilter=new Filter(SSHKeyPairVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<SSHKeyPairVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,name);
  }
  if (fingerPrint != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,fingerPrint);
  }
  return _sshKeyPairDao.search(sc,searchFilter);
}","@Override public List<? extends SSHKeyPair> listSSHKeyPairs(ListSSHKeyPairsCmd cmd){
  String name=cmd.getName();
  String fingerPrint=cmd.getFingerprint();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,null,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  SearchBuilder<SSHKeyPairVO> sb=_sshKeyPairDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  Filter searchFilter=new Filter(SSHKeyPairVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<SSHKeyPairVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,name);
  }
  if (fingerPrint != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,fingerPrint);
  }
  return _sshKeyPairDao.search(sc,searchFilter);
}"
89174,"@Override public List<EventVO> searchForEvents(ListEventsCmd cmd){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Long id=cmd.getId();
  String type=cmd.getType();
  String level=cmd.getLevel();
  Date startDate=cmd.getStartDate();
  Date endDate=cmd.getEndDate();
  String keyword=cmd.getKeyword();
  Integer entryTime=cmd.getEntryTime();
  Integer duration=cmd.getDuration();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(EventVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<EventVO> sb=_eventDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (listProjectResourcesCriteria != null) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.ListProjectResourcesOnly) {
      accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.EQ);
      sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    }
 else     if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.SkipProjectResources) {
      accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
      sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    }
  }
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getLevel(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getLevel(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getCreateDate(),SearchCriteria.Op.BETWEEN);
  sb.and(""String_Node_Str"",sb.entity().getCreateDate(),SearchCriteria.Op.GTEQ);
  sb.and(""String_Node_Str"",sb.entity().getCreateDate(),SearchCriteria.Op.LTEQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  sb.and(""String_Node_Str"",sb.entity().getStartId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getCreateDate(),SearchCriteria.Op.BETWEEN);
  SearchCriteria<EventVO> sc=sb.create();
  if (listProjectResourcesCriteria != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (keyword != null) {
    SearchCriteria<EventVO> ssc=_eventDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (level != null) {
    sc.setParameters(""String_Node_Str"",level);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (startDate != null && endDate != null) {
    sc.setParameters(""String_Node_Str"",startDate,endDate);
  }
 else   if (startDate != null) {
    sc.setParameters(""String_Node_Str"",startDate);
  }
 else   if (endDate != null) {
    sc.setParameters(""String_Node_Str"",endDate);
  }
  if ((entryTime != null) && (duration != null)) {
    if (entryTime <= duration) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Calendar calMin=Calendar.getInstance();
    Calendar calMax=Calendar.getInstance();
    calMin.add(Calendar.SECOND,-entryTime);
    calMax.add(Calendar.SECOND,-duration);
    Date minTime=calMin.getTime();
    Date maxTime=calMax.getTime();
    sc.setParameters(""String_Node_Str"",com.cloud.event.Event.State.Completed);
    sc.setParameters(""String_Node_Str"",0);
    sc.setParameters(""String_Node_Str"",minTime,maxTime);
    List<EventVO> startedEvents=_eventDao.searchAllEvents(sc,searchFilter);
    List<EventVO> pendingEvents=new ArrayList<EventVO>();
    for (    EventVO event : startedEvents) {
      EventVO completedEvent=_eventDao.findCompletedEvent(event.getId());
      if (completedEvent == null) {
        pendingEvents.add(event);
      }
    }
    return pendingEvents;
  }
 else {
    return _eventDao.searchAllEvents(sc,searchFilter);
  }
}","@Override public List<EventVO> searchForEvents(ListEventsCmd cmd){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Long id=cmd.getId();
  String type=cmd.getType();
  String level=cmd.getLevel();
  Date startDate=cmd.getStartDate();
  Date endDate=cmd.getEndDate();
  String keyword=cmd.getKeyword();
  Integer entryTime=cmd.getEntryTime();
  Integer duration=cmd.getDuration();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(EventVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<EventVO> sb=_eventDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (listProjectResourcesCriteria != null) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.ListProjectResourcesOnly) {
      accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.EQ);
      sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    }
 else     if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.SkipProjectResources) {
      accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
      sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    }
  }
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getLevel(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getLevel(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getCreateDate(),SearchCriteria.Op.BETWEEN);
  sb.and(""String_Node_Str"",sb.entity().getCreateDate(),SearchCriteria.Op.GTEQ);
  sb.and(""String_Node_Str"",sb.entity().getCreateDate(),SearchCriteria.Op.LTEQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  sb.and(""String_Node_Str"",sb.entity().getStartId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getCreateDate(),SearchCriteria.Op.BETWEEN);
  SearchCriteria<EventVO> sc=sb.create();
  if (listProjectResourcesCriteria != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (keyword != null) {
    SearchCriteria<EventVO> ssc=_eventDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (level != null) {
    sc.setParameters(""String_Node_Str"",level);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (startDate != null && endDate != null) {
    sc.setParameters(""String_Node_Str"",startDate,endDate);
  }
 else   if (startDate != null) {
    sc.setParameters(""String_Node_Str"",startDate);
  }
 else   if (endDate != null) {
    sc.setParameters(""String_Node_Str"",endDate);
  }
  if ((entryTime != null) && (duration != null)) {
    if (entryTime <= duration) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Calendar calMin=Calendar.getInstance();
    Calendar calMax=Calendar.getInstance();
    calMin.add(Calendar.SECOND,-entryTime);
    calMax.add(Calendar.SECOND,-duration);
    Date minTime=calMin.getTime();
    Date maxTime=calMax.getTime();
    sc.setParameters(""String_Node_Str"",com.cloud.event.Event.State.Completed);
    sc.setParameters(""String_Node_Str"",0);
    sc.setParameters(""String_Node_Str"",minTime,maxTime);
    List<EventVO> startedEvents=_eventDao.searchAllEvents(sc,searchFilter);
    List<EventVO> pendingEvents=new ArrayList<EventVO>();
    for (    EventVO event : startedEvents) {
      EventVO completedEvent=_eventDao.findCompletedEvent(event.getId());
      if (completedEvent == null) {
        pendingEvents.add(event);
      }
    }
    return pendingEvents;
  }
 else {
    return _eventDao.searchAllEvents(sc,searchFilter);
  }
}"
89175,"@Override public List<IPAddressVO> searchForIPAddresses(ListPublicIpAddressesCmd cmd){
  Object keyword=cmd.getKeyword();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  Long associatedNetworkId=cmd.getAssociatedNetworkId();
  Long zone=cmd.getZoneId();
  String address=cmd.getIpAddress();
  Long vlan=cmd.getVlanId();
  Boolean forVirtualNetwork=cmd.isForVirtualNetwork();
  Boolean forLoadBalancing=cmd.isForLoadBalancing();
  Long ipId=cmd.getId();
  Boolean sourceNat=cmd.getIsSourceNat();
  Boolean staticNat=cmd.getIsStaticNat();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Boolean isAllocated=cmd.isAllocatedOnly();
  if (isAllocated == null) {
    isAllocated=Boolean.TRUE;
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,cmd.getId(),cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(IPAddressVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<IPAddressVO> sb=_publicIpAddressDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAddress(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getVlanId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPhysicalNetworkId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAssociatedWithNetworkId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().isSourceNat(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().isOneToOneNat(),SearchCriteria.Op.EQ);
  if (forLoadBalancing != null && (Boolean)forLoadBalancing) {
    SearchBuilder<LoadBalancerVO> lbSearch=_loadbalancerDao.createSearchBuilder();
    sb.join(""String_Node_Str"",lbSearch,sb.entity().getId(),lbSearch.entity().getSourceIpAddressId(),JoinType.INNER);
    sb.groupBy(sb.entity().getId());
  }
  if (keyword != null && address == null) {
    sb.and(""String_Node_Str"",sb.entity().getAddress(),SearchCriteria.Op.LIKE);
  }
  SearchBuilder<VlanVO> vlanSearch=_vlanDao.createSearchBuilder();
  vlanSearch.and(""String_Node_Str"",vlanSearch.entity().getVlanType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",vlanSearch,sb.entity().getVlanId(),vlanSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  boolean allocatedOnly=false;
  if ((isAllocated != null) && (isAllocated == true)) {
    sb.and(""String_Node_Str"",sb.entity().getAllocatedTime(),SearchCriteria.Op.NNULL);
    allocatedOnly=true;
  }
  VlanType vlanType=null;
  if (forVirtualNetwork != null) {
    vlanType=(Boolean)forVirtualNetwork ? VlanType.VirtualNetwork : VlanType.DirectAttached;
  }
 else {
    vlanType=VlanType.VirtualNetwork;
  }
  if (vlanType == VlanType.VirtualNetwork && (allocatedOnly)) {
    sb.and(""String_Node_Str"",sb.entity().getAssociatedWithNetworkId(),SearchCriteria.Op.NNULL);
  }
  SearchCriteria<IPAddressVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",vlanType);
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  if (sourceNat != null) {
    sc.setParameters(""String_Node_Str"",sourceNat);
  }
  if (staticNat != null) {
    sc.setParameters(""String_Node_Str"",staticNat);
  }
  if (address == null && keyword != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + keyword + ""String_Node_Str"");
  }
  if (address != null) {
    sc.setParameters(""String_Node_Str"",address);
  }
  if (vlan != null) {
    sc.setParameters(""String_Node_Str"",vlan);
  }
  if (physicalNetworkId != null) {
    sc.setParameters(""String_Node_Str"",physicalNetworkId);
  }
  if (associatedNetworkId != null) {
    sc.setParameters(""String_Node_Str"",associatedNetworkId);
  }
  return _publicIpAddressDao.search(sc,searchFilter);
}","@Override public List<IPAddressVO> searchForIPAddresses(ListPublicIpAddressesCmd cmd){
  Object keyword=cmd.getKeyword();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  Long associatedNetworkId=cmd.getAssociatedNetworkId();
  Long zone=cmd.getZoneId();
  String address=cmd.getIpAddress();
  Long vlan=cmd.getVlanId();
  Boolean forVirtualNetwork=cmd.isForVirtualNetwork();
  Boolean forLoadBalancing=cmd.isForLoadBalancing();
  Long ipId=cmd.getId();
  Boolean sourceNat=cmd.getIsSourceNat();
  Boolean staticNat=cmd.getIsStaticNat();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Boolean isAllocated=cmd.isAllocatedOnly();
  if (isAllocated == null) {
    isAllocated=Boolean.TRUE;
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,cmd.getId(),cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(IPAddressVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<IPAddressVO> sb=_publicIpAddressDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAddress(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getVlanId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPhysicalNetworkId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAssociatedWithNetworkId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().isSourceNat(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().isOneToOneNat(),SearchCriteria.Op.EQ);
  if (forLoadBalancing != null && (Boolean)forLoadBalancing) {
    SearchBuilder<LoadBalancerVO> lbSearch=_loadbalancerDao.createSearchBuilder();
    sb.join(""String_Node_Str"",lbSearch,sb.entity().getId(),lbSearch.entity().getSourceIpAddressId(),JoinType.INNER);
    sb.groupBy(sb.entity().getId());
  }
  if (keyword != null && address == null) {
    sb.and(""String_Node_Str"",sb.entity().getAddress(),SearchCriteria.Op.LIKE);
  }
  SearchBuilder<VlanVO> vlanSearch=_vlanDao.createSearchBuilder();
  vlanSearch.and(""String_Node_Str"",vlanSearch.entity().getVlanType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",vlanSearch,sb.entity().getVlanId(),vlanSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  boolean allocatedOnly=false;
  if ((isAllocated != null) && (isAllocated == true)) {
    sb.and(""String_Node_Str"",sb.entity().getAllocatedTime(),SearchCriteria.Op.NNULL);
    allocatedOnly=true;
  }
  VlanType vlanType=null;
  if (forVirtualNetwork != null) {
    vlanType=(Boolean)forVirtualNetwork ? VlanType.VirtualNetwork : VlanType.DirectAttached;
  }
 else {
    vlanType=VlanType.VirtualNetwork;
  }
  if (vlanType == VlanType.VirtualNetwork && (allocatedOnly)) {
    sb.and(""String_Node_Str"",sb.entity().getAssociatedWithNetworkId(),SearchCriteria.Op.NNULL);
  }
  SearchCriteria<IPAddressVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",vlanType);
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (ipId != null) {
    sc.setParameters(""String_Node_Str"",ipId);
  }
  if (sourceNat != null) {
    sc.setParameters(""String_Node_Str"",sourceNat);
  }
  if (staticNat != null) {
    sc.setParameters(""String_Node_Str"",staticNat);
  }
  if (address == null && keyword != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + keyword + ""String_Node_Str"");
  }
  if (address != null) {
    sc.setParameters(""String_Node_Str"",address);
  }
  if (vlan != null) {
    sc.setParameters(""String_Node_Str"",vlan);
  }
  if (physicalNetworkId != null) {
    sc.setParameters(""String_Node_Str"",physicalNetworkId);
  }
  if (associatedNetworkId != null) {
    sc.setParameters(""String_Node_Str"",associatedNetworkId);
  }
  return _publicIpAddressDao.search(sc,searchFilter);
}"
89176,"@Override public List<InstanceGroupVO> searchForVmGroups(ListVMGroupsCmd cmd){
  Long id=cmd.getId();
  String name=cmd.getGroupName();
  String keyword=cmd.getKeyword();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(InstanceGroupVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<InstanceGroupVO> sb=_vmGroupDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (listProjectResourcesCriteria != null) {
    if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.ListProjectResourcesOnly) {
      sb.and(""String_Node_Str"",sb.entity().getAccountType(),SearchCriteria.Op.EQ);
    }
 else     if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.SkipProjectResources) {
      sb.and(""String_Node_Str"",sb.entity().getAccountType(),SearchCriteria.Op.NEQ);
    }
  }
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  SearchCriteria<InstanceGroupVO> sc=sb.create();
  if (listProjectResourcesCriteria != null) {
    sc.setParameters(""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
  if (keyword != null) {
    SearchCriteria<InstanceGroupVO> ssc=_vmGroupDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  return _vmGroupDao.search(sc,searchFilter);
}","@Override public List<InstanceGroupVO> searchForVmGroups(ListVMGroupsCmd cmd){
  Long id=cmd.getId();
  String name=cmd.getGroupName();
  String keyword=cmd.getKeyword();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(InstanceGroupVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<InstanceGroupVO> sb=_vmGroupDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (listProjectResourcesCriteria != null) {
    if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.ListProjectResourcesOnly) {
      sb.and(""String_Node_Str"",sb.entity().getAccountType(),SearchCriteria.Op.EQ);
    }
 else     if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.SkipProjectResources) {
      sb.and(""String_Node_Str"",sb.entity().getAccountType(),SearchCriteria.Op.NEQ);
    }
  }
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  SearchCriteria<InstanceGroupVO> sc=sb.create();
  if (listProjectResourcesCriteria != null) {
    sc.setParameters(""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
  if (keyword != null) {
    SearchCriteria<InstanceGroupVO> ssc=_vmGroupDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  return _vmGroupDao.search(sc,searchFilter);
}"
89177,"@Override public List<DomainRouterVO> searchForRouters(ListRoutersCmd cmd){
  Long id=cmd.getId();
  String name=cmd.getRouterName();
  String state=cmd.getState();
  Long zone=cmd.getZoneId();
  Long pod=cmd.getPodId();
  Long hostId=cmd.getHostId();
  String keyword=cmd.getKeyword();
  Long networkId=cmd.getNetworkId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(DomainRouterVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<DomainRouterVO> sb=_routerDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getHostName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterIdToDeployIn(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodIdToDeployIn(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getHostId(),SearchCriteria.Op.EQ);
  if (networkId != null) {
    SearchBuilder<NicVO> nicSearch=_nicDao.createSearchBuilder();
    nicSearch.and(""String_Node_Str"",nicSearch.entity().getNetworkId(),SearchCriteria.Op.EQ);
    SearchBuilder<NetworkVO> networkSearch=_networkDao.createSearchBuilder();
    networkSearch.and(""String_Node_Str"",networkSearch.entity().getId(),SearchCriteria.Op.EQ);
    nicSearch.join(""String_Node_Str"",networkSearch,nicSearch.entity().getNetworkId(),networkSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    sb.join(""String_Node_Str"",nicSearch,sb.entity().getId(),nicSearch.entity().getInstanceId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<DomainRouterVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (keyword != null) {
    SearchCriteria<DomainRouterVO> ssc=_routerDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  if (hostId != null) {
    sc.setParameters(""String_Node_Str"",hostId);
  }
  if (networkId != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",networkId);
  }
  return _routerDao.search(sc,searchFilter);
}","@Override public List<DomainRouterVO> searchForRouters(ListRoutersCmd cmd){
  Long id=cmd.getId();
  String name=cmd.getRouterName();
  String state=cmd.getState();
  Long zone=cmd.getZoneId();
  Long pod=cmd.getPodId();
  Long hostId=cmd.getHostId();
  String keyword=cmd.getKeyword();
  Long networkId=cmd.getNetworkId();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(DomainRouterVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<DomainRouterVO> sb=_routerDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getHostName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterIdToDeployIn(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodIdToDeployIn(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getHostId(),SearchCriteria.Op.EQ);
  if (networkId != null) {
    SearchBuilder<NicVO> nicSearch=_nicDao.createSearchBuilder();
    nicSearch.and(""String_Node_Str"",nicSearch.entity().getNetworkId(),SearchCriteria.Op.EQ);
    SearchBuilder<NetworkVO> networkSearch=_networkDao.createSearchBuilder();
    networkSearch.and(""String_Node_Str"",networkSearch.entity().getId(),SearchCriteria.Op.EQ);
    nicSearch.join(""String_Node_Str"",networkSearch,nicSearch.entity().getNetworkId(),networkSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    sb.join(""String_Node_Str"",nicSearch,sb.entity().getId(),nicSearch.entity().getInstanceId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<DomainRouterVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (keyword != null) {
    SearchCriteria<DomainRouterVO> ssc=_routerDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  if (hostId != null) {
    sc.setParameters(""String_Node_Str"",hostId);
  }
  if (networkId != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",networkId);
  }
  return _routerDao.search(sc,searchFilter);
}"
89178,"@Override public List<AsyncJobVO> searchForAsyncJobs(ListAsyncJobsCmd cmd){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,null,cmd.getAccountName(),null,permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(AsyncJobVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<AsyncJobVO> sb=_jobDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  SearchBuilder<AccountVO> accountSearch=null;
  boolean accountJoinIsDone=false;
  if (permittedAccounts.isEmpty() && domainId != null) {
    accountSearch=_accountDao.createSearchBuilder();
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getId(),SearchCriteria.Op.EQ);
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    accountJoinIsDone=true;
    accountSearch.join(""String_Node_Str"",domainSearch,accountSearch.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (listProjectResourcesCriteria != null) {
    if (accountSearch == null) {
      accountSearch=_accountDao.createSearchBuilder();
    }
    if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.ListProjectResourcesOnly) {
      accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.EQ);
    }
 else     if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.SkipProjectResources) {
      accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
    }
    if (!accountJoinIsDone) {
      sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    }
  }
  Object keyword=cmd.getKeyword();
  Object startDate=cmd.getStartDate();
  SearchCriteria<AsyncJobVO> sc=sb.create();
  if (listProjectResourcesCriteria != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domainId);
    }
  }
  if (keyword != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
  }
  if (startDate != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.GTEQ,startDate);
  }
  return _jobDao.search(sc,searchFilter);
}","@Override public List<AsyncJobVO> searchForAsyncJobs(ListAsyncJobsCmd cmd){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,null,cmd.getAccountName(),null,permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(AsyncJobVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<AsyncJobVO> sb=_jobDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  SearchBuilder<AccountVO> accountSearch=null;
  boolean accountJoinIsDone=false;
  if (permittedAccounts.isEmpty() && domainId != null) {
    accountSearch=_accountDao.createSearchBuilder();
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getId(),SearchCriteria.Op.EQ);
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    accountJoinIsDone=true;
    accountSearch.join(""String_Node_Str"",domainSearch,accountSearch.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (listProjectResourcesCriteria != null) {
    if (accountSearch == null) {
      accountSearch=_accountDao.createSearchBuilder();
    }
    if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.ListProjectResourcesOnly) {
      accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.EQ);
    }
 else     if (listProjectResourcesCriteria == Project.ListProjectResourcesCriteria.SkipProjectResources) {
      accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
    }
    if (!accountJoinIsDone) {
      sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
    }
  }
  Object keyword=cmd.getKeyword();
  Object startDate=cmd.getStartDate();
  SearchCriteria<AsyncJobVO> sc=sb.create();
  if (listProjectResourcesCriteria != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domainId);
    }
  }
  if (keyword != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
  }
  if (startDate != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.GTEQ,startDate);
  }
  return _jobDao.search(sc,searchFilter);
}"
89179,"@Override public Set<Pair<Long,Long>> listIsos(ListIsosCmd cmd) throws IllegalArgumentException, InvalidParameterValueException {
  TemplateFilter isoFilter=TemplateFilter.valueOf(cmd.getIsoFilter());
  Account caller=UserContext.current().getCaller();
  boolean listAll=(caller.getType() != Account.ACCOUNT_TYPE_NORMAL && (isoFilter != null && isoFilter == TemplateFilter.all));
  List<Long> permittedAccountIds=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,cmd.getId(),cmd.getAccountName(),cmd.getProjectId(),permittedAccountIds,domainIdRecursiveListProject,listAll);
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  List<Account> permittedAccounts=new ArrayList<Account>();
  for (  Long accountId : permittedAccountIds) {
    permittedAccounts.add(_accountMgr.getAccount(accountId));
  }
  HypervisorType hypervisorType=HypervisorType.getType(cmd.getHypervisor());
  return listTemplates(cmd.getId(),cmd.getIsoName(),cmd.getKeyword(),isoFilter,true,cmd.isBootable(),cmd.getPageSizeVal(),cmd.getStartIndex(),cmd.getZoneId(),hypervisorType,true,cmd.listInReadyState(),permittedAccounts,caller,listProjectResourcesCriteria);
}","@Override public Set<Pair<Long,Long>> listIsos(ListIsosCmd cmd) throws IllegalArgumentException, InvalidParameterValueException {
  TemplateFilter isoFilter=TemplateFilter.valueOf(cmd.getIsoFilter());
  Account caller=UserContext.current().getCaller();
  boolean listAll=(caller.getType() != Account.ACCOUNT_TYPE_NORMAL && (isoFilter != null && isoFilter == TemplateFilter.all));
  List<Long> permittedAccountIds=new ArrayList<Long>();
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,cmd.getId(),cmd.getAccountName(),cmd.getProjectId(),permittedAccountIds,domainIdRecursiveListProject,listAll,false);
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  List<Account> permittedAccounts=new ArrayList<Account>();
  for (  Long accountId : permittedAccountIds) {
    permittedAccounts.add(_accountMgr.getAccount(accountId));
  }
  HypervisorType hypervisorType=HypervisorType.getType(cmd.getHypervisor());
  return listTemplates(cmd.getId(),cmd.getIsoName(),cmd.getKeyword(),isoFilter,true,cmd.isBootable(),cmd.getPageSizeVal(),cmd.getStartIndex(),cmd.getZoneId(),hypervisorType,true,cmd.listInReadyState(),permittedAccounts,caller,listProjectResourcesCriteria);
}"
89180,"@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Long id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  String name=cmd.getVolumeName();
  String keyword=cmd.getKeyword();
  String type=cmd.getType();
  Long zoneId=cmd.getZoneId();
  Long podId=null;
  if (_accountMgr.isAdmin(caller.getType())) {
    podId=cmd.getPodId();
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  SearchBuilder<DiskOfferingVO> diskOfferingSearch=_diskOfferingDao.createSearchBuilder();
  diskOfferingSearch.and(""String_Node_Str"",diskOfferingSearch.entity().getSystemUse(),SearchCriteria.Op.NEQ);
  sb.join(""String_Node_Str"",diskOfferingSearch,sb.entity().getDiskOfferingId(),diskOfferingSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchBuilder<VMInstanceVO> vmSearch=_vmInstanceDao.createSearchBuilder();
  vmSearch.and(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NIN);
  vmSearch.or(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NULL);
  sb.join(""String_Node_Str"",vmSearch,sb.entity().getInstanceId(),vmSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchCriteria<VolumeVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",1);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zoneId != null) {
    sc.setParameters(""String_Node_Str"",zoneId);
  }
  if (podId != null) {
    sc.setParameters(""String_Node_Str"",podId);
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}","@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd){
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  Long id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  String name=cmd.getVolumeName();
  String keyword=cmd.getKeyword();
  String type=cmd.getType();
  Long zoneId=cmd.getZoneId();
  Long podId=null;
  if (_accountMgr.isAdmin(caller.getType())) {
    podId=cmd.getPodId();
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  SearchBuilder<DiskOfferingVO> diskOfferingSearch=_diskOfferingDao.createSearchBuilder();
  diskOfferingSearch.and(""String_Node_Str"",diskOfferingSearch.entity().getSystemUse(),SearchCriteria.Op.NEQ);
  sb.join(""String_Node_Str"",diskOfferingSearch,sb.entity().getDiskOfferingId(),diskOfferingSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchBuilder<VMInstanceVO> vmSearch=_vmInstanceDao.createSearchBuilder();
  vmSearch.and(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NIN);
  vmSearch.or(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NULL);
  sb.join(""String_Node_Str"",vmSearch,sb.entity().getInstanceId(),vmSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchCriteria<VolumeVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",1);
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zoneId != null) {
    sc.setParameters(""String_Node_Str"",zoneId);
  }
  if (podId != null) {
    sc.setParameters(""String_Node_Str"",podId);
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}"
89181,"@Override public List<SnapshotVO> listSnapshots(ListSnapshotsCmd cmd){
  Long volumeId=cmd.getVolumeId();
  String name=cmd.getSnapshotName();
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  String snapshotTypeStr=cmd.getSnapshotType();
  String intervalTypeStr=cmd.getIntervalType();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (volumeId != null) {
    VolumeVO volume=_volsDao.findById(volumeId);
    if (volume != null) {
      _accountMgr.checkAccess(UserContext.current().getCaller(),null,true,volume);
    }
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll());
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(SnapshotVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<SnapshotVO> sb=_snapshotDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getVolumeId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getsnapshotType(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getsnapshotType(),SearchCriteria.Op.NEQ);
  SearchCriteria<SnapshotVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (volumeId != null) {
    sc.setParameters(""String_Node_Str"",volumeId);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (keyword != null) {
    SearchCriteria<SnapshotVO> ssc=_snapshotDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (snapshotTypeStr != null) {
    Type snapshotType=SnapshotVO.getSnapshotType((String)snapshotTypeStr);
    if (snapshotType == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotTypeStr);
    }
    if (snapshotType == Type.RECURRING) {
      sc.setParameters(""String_Node_Str"",Type.HOURLY.ordinal(),Type.DAILY.ordinal(),Type.WEEKLY.ordinal(),Type.MONTHLY.ordinal());
    }
 else {
      sc.setParameters(""String_Node_Str"",snapshotType.ordinal());
    }
  }
 else   if (intervalTypeStr != null && volumeId != null) {
    Type type=SnapshotVO.getSnapshotType((String)intervalTypeStr);
    if (type == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + intervalTypeStr);
    }
    sc.setParameters(""String_Node_Str"",type.ordinal());
  }
 else {
    sc.setParameters(""String_Node_Str"",Snapshot.Type.TEMPLATE.ordinal());
  }
  return _snapshotDao.search(sc,searchFilter);
}","@Override public List<SnapshotVO> listSnapshots(ListSnapshotsCmd cmd){
  Long volumeId=cmd.getVolumeId();
  String name=cmd.getSnapshotName();
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  String snapshotTypeStr=cmd.getSnapshotType();
  String intervalTypeStr=cmd.getIntervalType();
  Account caller=UserContext.current().getCaller();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if (volumeId != null) {
    VolumeVO volume=_volsDao.findById(volumeId);
    if (volume != null) {
      _accountMgr.checkAccess(UserContext.current().getCaller(),null,true,volume);
    }
  }
  Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject=new Ternary<Long,Boolean,ListProjectResourcesCriteria>(cmd.getDomainId(),cmd.isRecursive(),null);
  _accountMgr.buildACLSearchParameters(caller,id,cmd.getAccountName(),cmd.getProjectId(),permittedAccounts,domainIdRecursiveListProject,cmd.listAll(),false);
  Long domainId=domainIdRecursiveListProject.first();
  Boolean isRecursive=domainIdRecursiveListProject.second();
  ListProjectResourcesCriteria listProjectResourcesCriteria=domainIdRecursiveListProject.third();
  Filter searchFilter=new Filter(SnapshotVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<SnapshotVO> sb=_snapshotDao.createSearchBuilder();
  _accountMgr.buildACLSearchBuilder(sb,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getVolumeId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getsnapshotType(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getsnapshotType(),SearchCriteria.Op.NEQ);
  SearchCriteria<SnapshotVO> sc=sb.create();
  _accountMgr.buildACLSearchCriteria(sc,domainId,isRecursive,permittedAccounts,listProjectResourcesCriteria);
  if (volumeId != null) {
    sc.setParameters(""String_Node_Str"",volumeId);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (keyword != null) {
    SearchCriteria<SnapshotVO> ssc=_snapshotDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (snapshotTypeStr != null) {
    Type snapshotType=SnapshotVO.getSnapshotType((String)snapshotTypeStr);
    if (snapshotType == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotTypeStr);
    }
    if (snapshotType == Type.RECURRING) {
      sc.setParameters(""String_Node_Str"",Type.HOURLY.ordinal(),Type.DAILY.ordinal(),Type.WEEKLY.ordinal(),Type.MONTHLY.ordinal());
    }
 else {
      sc.setParameters(""String_Node_Str"",snapshotType.ordinal());
    }
  }
 else   if (intervalTypeStr != null && volumeId != null) {
    Type type=SnapshotVO.getSnapshotType((String)intervalTypeStr);
    if (type == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + intervalTypeStr);
    }
    sc.setParameters(""String_Node_Str"",type.ordinal());
  }
 else {
    sc.setParameters(""String_Node_Str"",Snapshot.Type.TEMPLATE.ordinal());
  }
  return _snapshotDao.search(sc,searchFilter);
}"
89182,"void buildACLSearchParameters(Account caller,Long id,String accountName,Long projectId,List<Long> permittedAccounts,Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject,boolean listAll);","void buildACLSearchParameters(Account caller,Long id,String accountName,Long projectId,List<Long> permittedAccounts,Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject,boolean listAll,boolean forProjectInvitation);"
89183,"@Override public void buildACLSearchParameters(Account caller,Long id,String accountName,Long projectId,List<Long> permittedAccounts,Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject,boolean listAll){
  Long domainId=domainIdRecursiveListProject.first();
  if (domainId != null) {
    Domain domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
    }
    checkAccess(caller,domain);
  }
  if (accountName != null) {
    if (projectId != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Account userAccount=null;
    if (domainId != null) {
      userAccount=_accountDao.findActiveAccount(accountName,domainId);
    }
 else {
      userAccount=_accountDao.findActiveAccount(accountName,caller.getDomainId());
    }
    if (userAccount != null) {
      permittedAccounts.add(userAccount.getId());
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
  }
  if (projectId != null) {
    if (projectId == -1) {
      if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
        permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
      }
 else {
        domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.ListProjectResourcesOnly);
      }
    }
 else {
      Project project=_projectMgr.getProject(projectId);
      if (project == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
      }
      if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
        throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
      }
      permittedAccounts.add(project.getProjectAccountId());
    }
  }
 else {
    if (id == null) {
      domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.SkipProjectResources);
    }
    if (permittedAccounts.isEmpty() && domainId == null) {
      if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
        permittedAccounts.add(caller.getId());
      }
 else       if (!listAll) {
        if (id == null) {
          permittedAccounts.add(caller.getId());
        }
 else         if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
          domainIdRecursiveListProject.first(caller.getDomainId());
          domainIdRecursiveListProject.second(true);
        }
      }
 else       if (domainId == null) {
        if (caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
          domainIdRecursiveListProject.first(caller.getDomainId());
          domainIdRecursiveListProject.second(true);
        }
      }
    }
  }
}","@Override public void buildACLSearchParameters(Account caller,Long id,String accountName,Long projectId,List<Long> permittedAccounts,Ternary<Long,Boolean,ListProjectResourcesCriteria> domainIdRecursiveListProject,boolean listAll,boolean forProjectInvitation){
  Long domainId=domainIdRecursiveListProject.first();
  if (domainId != null) {
    Domain domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
    }
    checkAccess(caller,domain);
  }
  if (accountName != null) {
    if (projectId != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    Account userAccount=null;
    if (domainId != null) {
      userAccount=_accountDao.findActiveAccount(accountName,domainId);
    }
 else {
      userAccount=_accountDao.findActiveAccount(accountName,caller.getDomainId());
    }
    if (userAccount != null) {
      permittedAccounts.add(userAccount.getId());
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
  }
  if (projectId != null) {
    if (!forProjectInvitation) {
      if (projectId == -1) {
        if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
          permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
        }
 else {
          domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.ListProjectResourcesOnly);
        }
      }
 else {
        Project project=_projectMgr.getProject(projectId);
        if (project == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
        }
        if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
        }
        permittedAccounts.add(project.getProjectAccountId());
      }
    }
  }
 else {
    if (id == null) {
      domainIdRecursiveListProject.third(Project.ListProjectResourcesCriteria.SkipProjectResources);
    }
    if (permittedAccounts.isEmpty() && domainId == null) {
      if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
        permittedAccounts.add(caller.getId());
      }
 else       if (!listAll) {
        if (id == null) {
          permittedAccounts.add(caller.getId());
        }
 else         if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
          domainIdRecursiveListProject.first(caller.getDomainId());
          domainIdRecursiveListProject.second(true);
        }
      }
 else       if (domainId == null) {
        if (caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
          domainIdRecursiveListProject.first(caller.getDomainId());
          domainIdRecursiveListProject.second(true);
        }
      }
    }
  }
}"
89184,"private void fixIndexes(Connection conn){
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  DbUpgradeUtils.dropPrimaryKeyIfExists(conn,""String_Node_Str"");
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private void fixIndexes(Connection conn){
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  DbUpgradeUtils.dropPrimaryKeyIfExists(conn,""String_Node_Str"");
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}"
89185,"private void fixIndexes(Connection conn){
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  DbUpgradeUtils.dropPrimaryKeyIfExists(conn,""String_Node_Str"");
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private void fixIndexes(Connection conn){
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  DbUpgradeUtils.dropPrimaryKeyIfExists(conn,""String_Node_Str"");
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}"
89186,"private void fixIndexes(Connection conn){
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  DbUpgradeUtils.dropPrimaryKeyIfExists(conn,""String_Node_Str"");
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private void fixIndexes(Connection conn){
  List<String> keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  DbUpgradeUtils.dropPrimaryKeyIfExists(conn,""String_Node_Str"");
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  try {
    PreparedStatement pstmt;
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  keys=new ArrayList<String>();
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  keys.add(""String_Node_Str"");
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,true);
  DbUpgradeUtils.dropKeysIfExist(conn,""String_Node_Str"",keys,false);
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}"
89187,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NETWORK_UPDATE,eventDescription=""String_Node_Str"",async=true) public Network updateGuestNetwork(long networkId,String name,String displayText,Account callerAccount,User callerUser,String domainSuffix,Long networkOfferingId){
  boolean restartNetwork=false;
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
  }
  if (network.getState() == Network.State.Destroy) {
    throw new InvalidParameterValueException(""String_Node_Str"" + Network.State.Destroy);
  }
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (offering.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (network.getTrafficType() != Networks.TrafficType.Guest) {
    throw new InvalidParameterValueException(""String_Node_Str"" + TrafficType.Guest);
  }
  _accountMgr.checkAccess(callerAccount,null,true,network);
  if (name != null) {
    network.setName(name);
  }
  if (displayText != null) {
    network.setDisplayText(displayText);
  }
  if ((networkOfferingId != null || domainSuffix != null) && network.getGuestType() != GuestType.Isolated) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  boolean networkOfferingChanged=false;
  long oldNetworkOfferingId=network.getNetworkOfferingId();
  if (networkOfferingId != null) {
    NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
    if (networkOffering == null || networkOffering.isSystemOnly()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkOfferingId);
    }
    if (networkOffering.getState() != NetworkOffering.State.Enabled) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkOffering + ""String_Node_Str""+ NetworkOffering.State.Enabled+ ""String_Node_Str"");
    }
    if (networkOfferingId != oldNetworkOfferingId) {
      if (network.isSpecifiedCidr() && networkOfferingIsConfiguredForExternalNetworking(networkOfferingId)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkOffering + ""String_Node_Str"");
      }
      if (!canUpgrade(network,oldNetworkOfferingId,networkOfferingId)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + oldNetworkOfferingId + ""String_Node_Str""+ networkOfferingId+ ""String_Node_Str"");
      }
      restartNetwork=true;
      networkOfferingChanged=true;
    }
  }
  Map<String,String> newSvcProviders=new HashMap<String,String>();
  if (networkOfferingChanged) {
    newSvcProviders=finalizeServicesAndProvidersForNetwork(_configMgr.getNetworkOffering(networkOfferingId),network.getPhysicalNetworkId());
  }
  if (domainSuffix != null) {
    if (!NetUtils.verifyDomainName(domainSuffix)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
    long offeringId=oldNetworkOfferingId;
    if (networkOfferingId != null) {
      offeringId=networkOfferingId;
    }
    Map<Network.Capability,String> dnsCapabilities=getNetworkOfferingServiceCapabilities(_configMgr.getNetworkOffering(offeringId),Service.Dns);
    String isUpdateDnsSupported=dnsCapabilities.get(Capability.AllowDnsSuffixModification);
    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkOfferingId);
    }
    network.setNetworkDomain(domainSuffix);
    restartNetwork=true;
  }
  ReservationContext context=new ReservationContextImpl(null,null,callerUser,callerAccount);
  boolean validStateToShutdown=(network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup || network.getState() == Network.State.Allocated);
  if (restartNetwork) {
    if (validStateToShutdown) {
      s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
      if (!shutdownNetworkElementsAndResources(context,true,network)) {
        s_logger.warn(""String_Node_Str"" + network);
        throw new CloudRuntimeException(""String_Node_Str"" + network);
      }
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + network + ""String_Node_Str""+ network.getState());
    }
  }
  network=_networksDao.findById(networkId);
  boolean validStateToImplement=(network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup || network.getState() == Network.State.Allocated);
  if (restartNetwork && !validStateToImplement) {
    throw new CloudRuntimeException(""String_Node_Str"" + network + ""String_Node_Str""+ network.getState());
  }
  if (networkOfferingId != null) {
    if (networkOfferingChanged) {
      Transaction txn=Transaction.currentTxn();
      txn.start();
      network.setNetworkOfferingId(networkOfferingId);
      _networksDao.update(networkId,network,newSvcProviders);
      List<NicVO> nics=_nicDao.listByNetworkId(networkId);
      for (      NicVO nic : nics) {
        long vmId=nic.getInstanceId();
        VMInstanceVO vm=_vmDao.findById(vmId);
        if (vm == null) {
          s_logger.error(""String_Node_Str"" + nic.getId() + ""String_Node_Str""+ vmId);
          continue;
        }
        long isDefault=(nic.isDefaultNic()) ? 1 : 0;
        UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_NETWORK_OFFERING_REMOVE,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),null,oldNetworkOfferingId,null,0L);
        _usageEventDao.persist(usageEvent);
        usageEvent=new UsageEventVO(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName(),networkOfferingId,null,isDefault);
        _usageEventDao.persist(usageEvent);
      }
      txn.commit();
    }
 else {
      network.setNetworkOfferingId(networkOfferingId);
      _networksDao.update(networkId,network,finalizeServicesAndProvidersForNetwork(_configMgr.getNetworkOffering(networkOfferingId),network.getPhysicalNetworkId()));
    }
  }
 else {
    _networksDao.update(networkId,network);
  }
  if (restartNetwork) {
    if (network.getState() != Network.State.Allocated) {
      DeployDestination dest=new DeployDestination(_dcDao.findById(network.getDataCenterId()),null,null,null);
      s_logger.debug(""String_Node_Str"" + network + ""String_Node_Str"");
      try {
        implementNetworkElementsAndResources(dest,context,network,_networkOfferingDao.findById(network.getNetworkOfferingId()));
      }
 catch (      Exception ex) {
        s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str"",ex);
        throw new CloudRuntimeException(""String_Node_Str"" + network + ""String_Node_Str"");
      }
    }
  }
  return getNetwork(network.getId());
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NETWORK_UPDATE,eventDescription=""String_Node_Str"",async=true) public Network updateGuestNetwork(long networkId,String name,String displayText,Account callerAccount,User callerUser,String domainSuffix,Long networkOfferingId){
  boolean restartNetwork=false;
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
  }
  if (network.getState() == Network.State.Destroy) {
    throw new InvalidParameterValueException(""String_Node_Str"" + Network.State.Destroy);
  }
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (offering.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (network.getTrafficType() != Networks.TrafficType.Guest) {
    throw new InvalidParameterValueException(""String_Node_Str"" + TrafficType.Guest);
  }
  _accountMgr.checkAccess(callerAccount,null,true,network);
  if (name != null) {
    network.setName(name);
  }
  if (displayText != null) {
    network.setDisplayText(displayText);
  }
  if ((networkOfferingId != null || domainSuffix != null) && network.getGuestType() != GuestType.Isolated) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  boolean networkOfferingChanged=false;
  long oldNetworkOfferingId=network.getNetworkOfferingId();
  if (networkOfferingId != null) {
    NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
    if (networkOffering == null || networkOffering.isSystemOnly()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkOfferingId);
    }
    if (networkOffering.getState() != NetworkOffering.State.Enabled) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkOffering + ""String_Node_Str""+ NetworkOffering.State.Enabled+ ""String_Node_Str"");
    }
    if (networkOfferingId != oldNetworkOfferingId) {
      if (network.isSpecifiedCidr() && networkOfferingIsConfiguredForExternalNetworking(networkOfferingId)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkOffering + ""String_Node_Str"");
      }
      if (!canUpgrade(network,oldNetworkOfferingId,networkOfferingId)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + oldNetworkOfferingId + ""String_Node_Str""+ networkOfferingId+ ""String_Node_Str"");
      }
      restartNetwork=true;
      networkOfferingChanged=true;
    }
  }
  Map<String,String> newSvcProviders=new HashMap<String,String>();
  if (networkOfferingChanged) {
    newSvcProviders=finalizeServicesAndProvidersForNetwork(_configMgr.getNetworkOffering(networkOfferingId),network.getPhysicalNetworkId());
  }
  if (domainSuffix != null) {
    if (!NetUtils.verifyDomainName(domainSuffix)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
    long offeringId=oldNetworkOfferingId;
    if (networkOfferingId != null) {
      offeringId=networkOfferingId;
    }
    Map<Network.Capability,String> dnsCapabilities=getNetworkOfferingServiceCapabilities(_configMgr.getNetworkOffering(offeringId),Service.Dns);
    String isUpdateDnsSupported=dnsCapabilities.get(Capability.AllowDnsSuffixModification);
    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkOfferingId);
    }
    network.setNetworkDomain(domainSuffix);
    restartNetwork=true;
  }
  ReservationContext context=new ReservationContextImpl(null,null,callerUser,callerAccount);
  boolean validStateToShutdown=(network.getState() == Network.State.Implemented || network.getState() == Network.State.Setup || network.getState() == Network.State.Allocated);
  if (restartNetwork) {
    if (validStateToShutdown) {
      s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
      if (!shutdownNetworkElementsAndResources(context,true,network)) {
        s_logger.warn(""String_Node_Str"" + network);
        throw new CloudRuntimeException(""String_Node_Str"" + network);
      }
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + network + ""String_Node_Str""+ network.getState());
    }
  }
  Network.State networkState=_networksDao.findById(networkId).getState();
  boolean validStateToImplement=(networkState == Network.State.Implemented || networkState == Network.State.Setup || networkState == Network.State.Allocated);
  if (restartNetwork && !validStateToImplement) {
    throw new CloudRuntimeException(""String_Node_Str"" + network + ""String_Node_Str""+ networkState);
  }
  if (networkOfferingId != null) {
    if (networkOfferingChanged) {
      Transaction txn=Transaction.currentTxn();
      txn.start();
      network.setNetworkOfferingId(networkOfferingId);
      _networksDao.update(networkId,network,newSvcProviders);
      List<NicVO> nics=_nicDao.listByNetworkId(networkId);
      for (      NicVO nic : nics) {
        long vmId=nic.getInstanceId();
        VMInstanceVO vm=_vmDao.findById(vmId);
        if (vm == null) {
          s_logger.error(""String_Node_Str"" + nic.getId() + ""String_Node_Str""+ vmId);
          continue;
        }
        long isDefault=(nic.isDefaultNic()) ? 1 : 0;
        UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_NETWORK_OFFERING_REMOVE,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),null,oldNetworkOfferingId,null,0L);
        _usageEventDao.persist(usageEvent);
        usageEvent=new UsageEventVO(EventTypes.EVENT_NETWORK_OFFERING_ASSIGN,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName(),networkOfferingId,null,isDefault);
        _usageEventDao.persist(usageEvent);
      }
      txn.commit();
    }
 else {
      network.setNetworkOfferingId(networkOfferingId);
      _networksDao.update(networkId,network,finalizeServicesAndProvidersForNetwork(_configMgr.getNetworkOffering(networkOfferingId),network.getPhysicalNetworkId()));
    }
  }
 else {
    _networksDao.update(networkId,network);
  }
  if (restartNetwork) {
    if (network.getState() != Network.State.Allocated) {
      DeployDestination dest=new DeployDestination(_dcDao.findById(network.getDataCenterId()),null,null,null);
      s_logger.debug(""String_Node_Str"" + network + ""String_Node_Str"");
      try {
        implementNetworkElementsAndResources(dest,context,network,_networkOfferingDao.findById(network.getNetworkOfferingId()));
      }
 catch (      Exception ex) {
        s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str"",ex);
        throw new CloudRuntimeException(""String_Node_Str"" + network + ""String_Node_Str"");
      }
    }
  }
  return getNetwork(network.getId());
}"
89188,"protected HashMap<String,Pair<String,State>> fullClusterSync(Connection conn){
  XenServerPoolVms vms=new XenServerPoolVms();
  try {
    Map<VM,VM.Record> vm_map=VM.getAllRecords(conn);
    for (    VM.Record record : vm_map.values()) {
      if (record.isControlDomain || record.isASnapshot || record.isATemplate) {
        continue;
      }
      String vm_name=record.nameLabel;
      VmPowerState ps=record.powerState;
      final State state=convertToState(ps);
      Host host=record.residentOn;
      String host_uuid=null;
      if (!isRefNull(host)) {
        host_uuid=host.getUuid(conn);
        vms.put(_cluster,host_uuid,vm_name,state);
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm_name + ""String_Node_Str""+ ps+ ""String_Node_Str""+ state.toString());
      }
    }
  }
 catch (  final Throwable e) {
    String msg=""String_Node_Str"" + _host.uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg);
  }
  return vms.getClusterVmState(_cluster);
}","protected HashMap<String,Pair<String,State>> fullClusterSync(Connection conn){
synchronized (_cluster.intern()) {
    s_vms.clear(_cluster);
  }
  try {
    Map<VM,VM.Record> vm_map=VM.getAllRecords(conn);
    for (    VM.Record record : vm_map.values()) {
      if (record.isControlDomain || record.isASnapshot || record.isATemplate) {
        continue;
      }
      String vm_name=record.nameLabel;
      VmPowerState ps=record.powerState;
      final State state=convertToState(ps);
      Host host=record.residentOn;
      String host_uuid=null;
      if (!isRefNull(host)) {
        host_uuid=host.getUuid(conn);
synchronized (_cluster.intern()) {
          s_vms.put(_cluster,host_uuid,vm_name,state);
        }
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm_name + ""String_Node_Str""+ ps+ ""String_Node_Str""+ state.toString());
      }
    }
  }
 catch (  final Throwable e) {
    String msg=""String_Node_Str"" + _host.uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg);
  }
  return s_vms.getClusterVmState(_cluster);
}"
89189,"@Override protected FenceAnswer execute(FenceCommand cmd){
  Connection conn=getConnection();
  try {
    String result=callHostPluginPremium(conn,""String_Node_Str"",""String_Node_Str"",cmd.getHostGuid(),""String_Node_Str"",Integer.toString(_heartbeatInterval * 2));
    if (!result.contains(""String_Node_Str"")) {
      s_logger.debug(""String_Node_Str"");
      return new FenceAnswer(cmd,false,""String_Node_Str"");
    }
    Set<VM> vms=VM.getByNameLabel(conn,cmd.getVmName());
    for (    VM vm : vms) {
      Set<VDI> vdis=new HashSet<VDI>();
      Set<VBD> vbds=vm.getVBDs(conn);
      for (      VBD vbd : vbds) {
        VDI vdi=vbd.getVDI(conn);
        if (!isRefNull(vdi)) {
          vdis.add(vdi);
        }
      }
      vm.powerStateReset(conn);
      vm.destroy(conn);
      for (      VDI vdi : vdis) {
        Map<String,String> smConfig=vdi.getSmConfig(conn);
        for (        String key : smConfig.keySet()) {
          if (key.startsWith(""String_Node_Str"")) {
            vdi.removeFromSmConfig(conn,key);
            break;
          }
        }
      }
    }
    return new FenceAnswer(cmd);
  }
 catch (  XmlRpcException e) {
    s_logger.warn(""String_Node_Str"",e);
    return new FenceAnswer(cmd,false,e.getMessage());
  }
catch (  XenAPIException e) {
    s_logger.warn(""String_Node_Str"",e);
    return new FenceAnswer(cmd,false,e.getMessage());
  }
}","@Override protected FenceAnswer execute(FenceCommand cmd){
  Connection conn=getConnection();
  try {
    String result=callHostPluginPremium(conn,""String_Node_Str"",""String_Node_Str"",cmd.getHostGuid(),""String_Node_Str"",Integer.toString(_heartbeatInterval * 2));
    if (!result.contains(""String_Node_Str"")) {
      s_logger.debug(""String_Node_Str"");
      return new FenceAnswer(cmd,false,""String_Node_Str"");
    }
    Set<VM> vms=VM.getByNameLabel(conn,cmd.getVmName());
    for (    VM vm : vms) {
      Set<VDI> vdis=new HashSet<VDI>();
      Set<VBD> vbds=vm.getVBDs(conn);
      for (      VBD vbd : vbds) {
        VDI vdi=vbd.getVDI(conn);
        if (!isRefNull(vdi)) {
          vdis.add(vdi);
        }
      }
synchronized (_cluster.intern()) {
        s_vms.remove(_cluster,_name,vm.getNameLabel(conn));
      }
      s_logger.info(""String_Node_Str"" + cmd.getVmName());
      vm.powerStateReset(conn);
      vm.destroy(conn);
      for (      VDI vdi : vdis) {
        Map<String,String> smConfig=vdi.getSmConfig(conn);
        for (        String key : smConfig.keySet()) {
          if (key.startsWith(""String_Node_Str"")) {
            vdi.removeFromSmConfig(conn,key);
            break;
          }
        }
      }
    }
    return new FenceAnswer(cmd);
  }
 catch (  XmlRpcException e) {
    s_logger.warn(""String_Node_Str"",e);
    return new FenceAnswer(cmd,false,e.getMessage());
  }
catch (  XenAPIException e) {
    s_logger.warn(""String_Node_Str"",e);
    return new FenceAnswer(cmd,false,e.getMessage());
  }
}"
89190,"protected AgentAttache notifyMonitorsOfConnection(AgentAttache attache,final StartupCommand[] cmd,boolean forRebalance) throws ConnectionException {
  long hostId=attache.getId();
  HostVO host=_hostDao.findById(hostId);
  for (  Pair<Integer,Listener> monitor : _hostMonitors) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + monitor.second().getClass().getSimpleName());
    }
    for (int i=0; i < cmd.length; i++) {
      try {
        monitor.second().processConnect(host,cmd[i],forRebalance);
      }
 catch (      Exception e) {
        if (e instanceof ConnectionException) {
          ConnectionException ce=(ConnectionException)e;
          if (ce.isSetupError()) {
            s_logger.warn(""String_Node_Str"" + monitor.second().getClass().getSimpleName() + ""String_Node_Str""+ hostId+ ""String_Node_Str""+ e.getMessage());
            handleDisconnectWithoutInvestigation(attache,Event.AgentDisconnected);
            throw ce;
          }
 else {
            s_logger.info(""String_Node_Str"" + monitor.second().getClass().getSimpleName() + ""String_Node_Str""+ hostId+ ""String_Node_Str""+ e.getMessage());
            handleDisconnectWithoutInvestigation(attache,Event.ShutdownRequested);
            return attache;
          }
        }
 else         if (e instanceof HypervisorVersionChangedException) {
          handleDisconnectWithoutInvestigation(attache,Event.ShutdownRequested);
          throw new CloudRuntimeException(""String_Node_Str"" + attache.getId(),e);
        }
 else {
          s_logger.error(""String_Node_Str"" + monitor.second().getClass().getSimpleName() + ""String_Node_Str""+ hostId+ ""String_Node_Str""+ e.getMessage(),e);
          handleDisconnectWithoutInvestigation(attache,Event.AgentDisconnected);
          throw new CloudRuntimeException(""String_Node_Str"" + attache.getId(),e);
        }
      }
    }
  }
  Long dcId=host.getDataCenterId();
  ReadyCommand ready=new ReadyCommand(dcId);
  Answer answer=easySend(hostId,ready);
  if (answer == null || !answer.getResult()) {
    handleDisconnectWithoutInvestigation(attache,Event.AgentDisconnected);
    throw new CloudRuntimeException(""String_Node_Str"" + attache.getId());
  }
  agentStatusTransitTo(host,Event.Ready,_nodeId);
  attache.ready();
  return attache;
}","protected AgentAttache notifyMonitorsOfConnection(AgentAttache attache,final StartupCommand[] cmd,boolean forRebalance) throws ConnectionException {
  long hostId=attache.getId();
  HostVO host=_hostDao.findById(hostId);
  for (  Pair<Integer,Listener> monitor : _hostMonitors) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + monitor.second().getClass().getSimpleName());
    }
    for (int i=0; i < cmd.length; i++) {
      try {
        monitor.second().processConnect(host,cmd[i],forRebalance);
      }
 catch (      Exception e) {
        if (e instanceof ConnectionException) {
          ConnectionException ce=(ConnectionException)e;
          if (ce.isSetupError()) {
            s_logger.warn(""String_Node_Str"" + monitor.second().getClass().getSimpleName() + ""String_Node_Str""+ hostId+ ""String_Node_Str""+ e.getMessage());
            handleDisconnectWithoutInvestigation(attache,Event.AgentDisconnected);
            throw ce;
          }
 else {
            s_logger.info(""String_Node_Str"" + monitor.second().getClass().getSimpleName() + ""String_Node_Str""+ hostId+ ""String_Node_Str""+ e.getMessage());
            handleDisconnectWithoutInvestigation(attache,Event.ShutdownRequested);
            return attache;
          }
        }
 else         if (e instanceof HypervisorVersionChangedException) {
          handleDisconnectWithoutInvestigation(attache,Event.ShutdownRequested);
          throw new CloudRuntimeException(""String_Node_Str"" + attache.getId(),e);
        }
 else {
          s_logger.error(""String_Node_Str"" + monitor.second().getClass().getSimpleName() + ""String_Node_Str""+ hostId+ ""String_Node_Str""+ e.getMessage(),e);
          handleDisconnectWithoutInvestigation(attache,Event.AgentDisconnected);
          throw new CloudRuntimeException(""String_Node_Str"" + attache.getId(),e);
        }
      }
    }
  }
  Long dcId=host.getDataCenterId();
  ReadyCommand ready=new ReadyCommand(dcId);
  Answer answer=easySend(hostId,ready);
  if (answer == null || !answer.getResult()) {
    handleDisconnectWithoutInvestigation(attache,Event.AgentDisconnected);
  }
  agentStatusTransitTo(host,Event.Ready,_nodeId);
  attache.ready();
  return attache;
}"
89191,"@Override @ActionEvent(eventType=EventTypes.EVENT_NETWORK_OFFERING_EDIT,eventDescription=""String_Node_Str"") public NetworkOffering updateNetworkOffering(UpdateNetworkOfferingCmd cmd){
  String displayText=cmd.getDisplayText();
  Long id=cmd.getId();
  String name=cmd.getNetworkOfferingName();
  String availabilityStr=cmd.getAvailability();
  Integer sortKey=cmd.getSortKey();
  Availability availability=null;
  String state=cmd.getState();
  UserContext.current().setEventDetails(""String_Node_Str"" + id);
  NetworkOfferingVO offeringToUpdate=_networkOfferingDao.findById(id);
  if (offeringToUpdate == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + id);
  }
  if (offeringToUpdate.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  NetworkOfferingVO offering=_networkOfferingDao.createForUpdate(id);
  if (name != null) {
    offering.setName(name);
  }
  if (displayText != null) {
    offering.setDisplayText(displayText);
  }
  if (sortKey != null) {
    offering.setSortKey(sortKey);
  }
  if (state != null) {
    boolean validState=false;
    for (    NetworkOffering.State st : NetworkOffering.State.values()) {
      if (st.name().equalsIgnoreCase(state)) {
        validState=true;
        offering.setState(st);
      }
    }
    if (!validState) {
      throw new InvalidParameterValueException(""String_Node_Str"" + state);
    }
  }
  if (availabilityStr != null) {
    for (    Availability avlb : Availability.values()) {
      if (avlb.name().equalsIgnoreCase(availabilityStr)) {
        availability=avlb;
      }
    }
    if (availability == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + Availability.Required + ""String_Node_Str""+ Availability.Optional);
    }
 else {
      if (availability == NetworkOffering.Availability.Required) {
        boolean canOffBeRequired=(offering.getGuestType() == GuestType.Isolated && _networkMgr.areServicesSupportedByNetworkOffering(offering.getId(),Service.SourceNat));
        if (!canOffBeRequired) {
          throw new InvalidParameterValueException(""String_Node_Str"" + NetworkOffering.Availability.Required + ""String_Node_Str""+ GuestType.Isolated+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
        }
        List<NetworkOfferingVO> offerings=_networkOfferingDao.listByAvailability(Availability.Required,false);
        if (!offerings.isEmpty() || offerings.get(0).getId() != offering.getId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offerings.get(0).getId() + ""String_Node_Str""+ Availability.Required);
        }
      }
      offering.setAvailability(availability);
    }
  }
  if (_networkOfferingDao.update(id,offering)) {
    return _networkOfferingDao.findById(id);
  }
 else {
    return null;
  }
}","@Override @ActionEvent(eventType=EventTypes.EVENT_NETWORK_OFFERING_EDIT,eventDescription=""String_Node_Str"") public NetworkOffering updateNetworkOffering(UpdateNetworkOfferingCmd cmd){
  String displayText=cmd.getDisplayText();
  Long id=cmd.getId();
  String name=cmd.getNetworkOfferingName();
  String availabilityStr=cmd.getAvailability();
  Integer sortKey=cmd.getSortKey();
  Availability availability=null;
  String state=cmd.getState();
  UserContext.current().setEventDetails(""String_Node_Str"" + id);
  NetworkOfferingVO offeringToUpdate=_networkOfferingDao.findById(id);
  if (offeringToUpdate == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + id);
  }
  if (offeringToUpdate.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  NetworkOfferingVO offering=_networkOfferingDao.createForUpdate(id);
  if (name != null) {
    offering.setName(name);
  }
  if (displayText != null) {
    offering.setDisplayText(displayText);
  }
  if (sortKey != null) {
    offering.setSortKey(sortKey);
  }
  if (state != null) {
    boolean validState=false;
    for (    NetworkOffering.State st : NetworkOffering.State.values()) {
      if (st.name().equalsIgnoreCase(state)) {
        validState=true;
        offering.setState(st);
      }
    }
    if (!validState) {
      throw new InvalidParameterValueException(""String_Node_Str"" + state);
    }
  }
  if (availabilityStr != null) {
    for (    Availability avlb : Availability.values()) {
      if (avlb.name().equalsIgnoreCase(availabilityStr)) {
        availability=avlb;
      }
    }
    if (availability == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + Availability.Required + ""String_Node_Str""+ Availability.Optional);
    }
 else {
      if (availability == NetworkOffering.Availability.Required) {
        boolean canOffBeRequired=(offeringToUpdate.getGuestType() == GuestType.Isolated && _networkMgr.areServicesSupportedByNetworkOffering(offeringToUpdate.getId(),Service.SourceNat));
        if (!canOffBeRequired) {
          throw new InvalidParameterValueException(""String_Node_Str"" + NetworkOffering.Availability.Required + ""String_Node_Str""+ GuestType.Isolated+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
        }
        List<NetworkOfferingVO> offerings=_networkOfferingDao.listByAvailability(Availability.Required,false);
        if (!offerings.isEmpty() && offerings.get(0).getId() != offeringToUpdate.getId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offerings.get(0).getId() + ""String_Node_Str""+ Availability.Required);
        }
      }
      offering.setAvailability(availability);
    }
  }
  if (_networkOfferingDao.update(id,offering)) {
    return _networkOfferingDao.findById(id);
  }
 else {
    return null;
  }
}"
89192,"@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String guestIpType=cmd.getGuestIpType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  String aclType=cmd.getAclType();
  Long projectId=cmd.getProjectId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  String path=null;
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  Boolean restartRequired=cmd.getRestartRequired();
  boolean listAll=cmd.listAll();
  boolean isRecursive=cmd.isRecursive();
  Boolean specifyIpRanges=cmd.getSpecifyIpRanges();
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,domain);
    if (accountName != null) {
      Account owner=_accountMgr.getActiveAccountByName(accountName,domainId);
      if (owner == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
      _accountMgr.checkAccess(caller,null,true,owner);
      permittedAccounts.add(owner.getId());
    }
  }
  if (!_accountMgr.isAdmin(caller.getType()) || !listAll) {
    permittedAccounts.add(caller.getId());
    domainId=caller.getDomainId();
  }
  boolean skipProjectNetworks=true;
  if (projectId != null) {
    if (projectId == -1) {
      permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
    }
 else {
      permittedAccounts.clear();
      Project project=_projectMgr.getProject(projectId);
      if (project == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
      }
      if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
        throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
      }
      permittedAccounts.add(project.getProjectAccountId());
    }
    skipProjectNetworks=false;
  }
  path=_domainDao.findById(caller.getDomainId()).getPath();
  if (listAll) {
    isRecursive=true;
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (permittedAccounts.isEmpty()) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (skipProjectNetworks) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
  if (isSystem == null || !isSystem) {
    if (domainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges),searchFilter,domainId));
    }
    if (!permittedAccounts.isEmpty()) {
      networksToReturn.addAll(listAccountSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges),searchFilter,permittedAccounts));
    }
 else     if (domainId == null) {
      networksToReturn.addAll(listAccountSpecificNetworksByDomainPath(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges),searchFilter,path,isRecursive));
    }
  }
 else {
    networksToReturn=_networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,null,skipProjectNetworks,restartRequired,specifyIpRanges),searchFilter);
  }
  if (supportedServicesStr != null && !supportedServicesStr.isEmpty() && !networksToReturn.isEmpty()) {
    List<NetworkVO> supportedNetworks=new ArrayList<NetworkVO>();
    Service[] suppportedServices=new Service[supportedServicesStr.size()];
    int i=0;
    for (    String supportedServiceStr : supportedServicesStr) {
      Service service=Service.getService(supportedServiceStr);
      if (service == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + supportedServiceStr);
      }
 else {
        suppportedServices[i]=service;
      }
      i++;
    }
    for (    NetworkVO network : networksToReturn) {
      if (areServicesSupportedInNetwork(network.getId(),suppportedServices)) {
        supportedNetworks.add(network);
      }
    }
    return supportedNetworks;
  }
 else {
    return networksToReturn;
  }
}","@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String guestIpType=cmd.getGuestIpType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  String aclType=cmd.getAclType();
  Long projectId=cmd.getProjectId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  String path=null;
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  Boolean restartRequired=cmd.getRestartRequired();
  boolean listAll=cmd.listAll();
  boolean isRecursive=cmd.isRecursive();
  Boolean specifyIpRanges=cmd.getSpecifyIpRanges();
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,domain);
    if (accountName != null) {
      Account owner=_accountMgr.getActiveAccountByName(accountName,domainId);
      if (owner == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
      _accountMgr.checkAccess(caller,null,true,owner);
      permittedAccounts.add(owner.getId());
    }
  }
  if (!_accountMgr.isAdmin(caller.getType()) || !listAll) {
    permittedAccounts.add(caller.getId());
    domainId=caller.getDomainId();
  }
  if (caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
    domainId=caller.getDomainId();
  }
  boolean skipProjectNetworks=true;
  if (projectId != null) {
    if (projectId == -1) {
      permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
    }
 else {
      permittedAccounts.clear();
      Project project=_projectMgr.getProject(projectId);
      if (project == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
      }
      if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
        throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
      }
      permittedAccounts.add(project.getProjectAccountId());
    }
    skipProjectNetworks=false;
  }
  path=_domainDao.findById(caller.getDomainId()).getPath();
  if (listAll) {
    isRecursive=true;
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (permittedAccounts.isEmpty()) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (skipProjectNetworks) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
  if (isSystem == null || !isSystem) {
    if (domainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges),searchFilter,domainId));
    }
    if (!permittedAccounts.isEmpty()) {
      networksToReturn.addAll(listAccountSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges),searchFilter,permittedAccounts));
    }
 else     if (domainId == null || listAll) {
      networksToReturn.addAll(listAccountSpecificNetworksByDomainPath(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks,restartRequired,specifyIpRanges),searchFilter,path,isRecursive));
    }
  }
 else {
    networksToReturn=_networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,null,skipProjectNetworks,restartRequired,specifyIpRanges),searchFilter);
  }
  if (supportedServicesStr != null && !supportedServicesStr.isEmpty() && !networksToReturn.isEmpty()) {
    List<NetworkVO> supportedNetworks=new ArrayList<NetworkVO>();
    Service[] suppportedServices=new Service[supportedServicesStr.size()];
    int i=0;
    for (    String supportedServiceStr : supportedServicesStr) {
      Service service=Service.getService(supportedServiceStr);
      if (service == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + supportedServiceStr);
      }
 else {
        suppportedServices[i]=service;
      }
      i++;
    }
    for (    NetworkVO network : networksToReturn) {
      if (areServicesSupportedInNetwork(network.getId(),suppportedServices)) {
        supportedNetworks.add(network);
      }
    }
    return supportedNetworks;
  }
 else {
    return networksToReturn;
  }
}"
89193,"@Override public void performDataMigration(Connection conn){
  encryptData(conn);
  dropKeysIfExist(conn);
  setupPhysicalNetworks(conn);
}","@Override public void performDataMigration(Connection conn){
  encryptData(conn);
  dropKeysIfExist(conn);
  setupPhysicalNetworks(conn);
  createNetworkOfferingServices(conn);
}"
89194,"private void encryptData(Connection conn){
  encryptConfigValues(conn);
  encryptHostDetails(conn);
  encryptVNCPassword(conn);
  encryptUserCredentials(conn);
  createNetworkOfferingServices(conn);
}","private void encryptData(Connection conn){
  encryptConfigValues(conn);
  encryptHostDetails(conn);
  encryptVNCPassword(conn);
  encryptUserCredentials(conn);
}"
89195,"public void test2213to30Upgrade() throws SQLException {
}","public void test2213to30Upgrade() throws SQLException {
  s_logger.debug(""String_Node_Str"");
  DbTestUtils.executeScript(""String_Node_Str"",false,true);
  DatabaseUpgradeChecker checker=ComponentLocator.inject(DatabaseUpgradeChecker.class);
  checker.upgrade(""String_Node_Str"",""String_Node_Str"");
  Connection conn=Transaction.getStandaloneConnection();
  try {
    checkPhysicalNetworks(conn);
    checkNetworkOfferings(conn);
  }
  finally {
    try {
      conn.close();
    }
 catch (    SQLException e) {
    }
  }
}"
89196,"@Override @DB public SnapshotPolicyVO createPolicy(CreateSnapshotPolicyCmd cmd,Account policyOwner){
  Long volumeId=cmd.getVolumeId();
  VolumeVO volume=_volsDao.findById(cmd.getVolumeId());
  if (volume == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId);
  }
  _accountMgr.checkAccess(UserContext.current().getCaller(),null,true,volume);
  if (volume.getState() != Volume.State.Ready) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ Volume.State.Ready+ ""String_Node_Str""+ volume.getState()+ ""String_Node_Str"");
  }
  if (volume.getTemplateId() != null) {
    VMTemplateVO template=_templateDao.findById(volume.getTemplateId());
    if (template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  AccountVO owner=_accountDao.findById(volume.getAccountId());
  Long instanceId=volume.getInstanceId();
  if (instanceId != null) {
    if (_vmDao.findById(instanceId) == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  IntervalType intvType=DateUtil.IntervalType.getIntervalType(cmd.getIntervalType());
  if (intvType == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getIntervalType());
  }
  Type type=getSnapshotType(intvType);
  TimeZone timeZone=TimeZone.getTimeZone(cmd.getTimezone());
  String timezoneId=timeZone.getID();
  if (!timezoneId.equals(cmd.getTimezone())) {
    s_logger.warn(""String_Node_Str"" + timezoneId + ""String_Node_Str""+ cmd.getTimezone());
  }
  try {
    DateUtil.getNextRunTime(intvType,cmd.getSchedule(),timezoneId,null);
  }
 catch (  Exception e) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getSchedule() + ""String_Node_Str""+ cmd.getIntervalType());
  }
  if (cmd.getMaxSnaps() <= 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  int intervalMaxSnaps=type.getMax();
  if (cmd.getMaxSnaps() > intervalMaxSnaps) {
    throw new InvalidParameterValueException(""String_Node_Str"" + intervalMaxSnaps + ""String_Node_Str""+ cmd.getIntervalType());
  }
  long accountLimit=_resourceLimitMgr.findCorrectResourceLimitForAccount(owner,ResourceType.snapshot);
  long domainLimit=_resourceLimitMgr.findCorrectResourceLimitForDomain(_domainMgr.getDomain(owner.getDomainId()),ResourceType.snapshot);
  int max=cmd.getMaxSnaps().intValue();
  if (owner.getType() != Account.ACCOUNT_TYPE_ADMIN && ((accountLimit != -1 && max > accountLimit) || (domainLimit != -1 && max > domainLimit))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  SnapshotPolicyVO policy=_snapshotPolicyDao.findOneByVolumeInterval(volumeId,intvType);
  if (policy == null) {
    policy=new SnapshotPolicyVO(volumeId,cmd.getSchedule(),timezoneId,intvType,cmd.getMaxSnaps());
    policy=_snapshotPolicyDao.persist(policy);
    _snapSchedMgr.scheduleNextSnapshotJob(policy);
  }
 else {
    try {
      policy=_snapshotPolicyDao.acquireInLockTable(policy.getId());
      policy.setSchedule(cmd.getSchedule());
      policy.setTimezone(timezoneId);
      policy.setInterval((short)intvType.ordinal());
      policy.setMaxSnaps(cmd.getMaxSnaps());
      policy.setActive(true);
      _snapshotPolicyDao.update(policy.getId(),policy);
    }
  finally {
      if (policy != null) {
        _snapshotPolicyDao.releaseFromLockTable(policy.getId());
      }
    }
  }
  return policy;
}","@Override @DB public SnapshotPolicyVO createPolicy(CreateSnapshotPolicyCmd cmd,Account policyOwner){
  Long volumeId=cmd.getVolumeId();
  VolumeVO volume=_volsDao.findById(cmd.getVolumeId());
  if (volume == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId);
  }
  _accountMgr.checkAccess(UserContext.current().getCaller(),null,true,volume);
  if (volume.getState() != Volume.State.Ready) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ Volume.State.Ready+ ""String_Node_Str""+ volume.getState()+ ""String_Node_Str"");
  }
  if (volume.getTemplateId() != null) {
    VMTemplateVO template=_templateDao.findById(volume.getTemplateId());
    if (template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  AccountVO owner=_accountDao.findById(volume.getAccountId());
  Long instanceId=volume.getInstanceId();
  if (instanceId != null) {
    if (_vmDao.findById(instanceId) == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  IntervalType intvType=DateUtil.IntervalType.getIntervalType(cmd.getIntervalType());
  if (intvType == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getIntervalType());
  }
  Type type=getSnapshotType(intvType);
  TimeZone timeZone=TimeZone.getTimeZone(cmd.getTimezone());
  String timezoneId=timeZone.getID();
  if (!timezoneId.equals(cmd.getTimezone())) {
    s_logger.warn(""String_Node_Str"" + timezoneId + ""String_Node_Str""+ cmd.getTimezone());
  }
  try {
    DateUtil.getNextRunTime(intvType,cmd.getSchedule(),timezoneId,null);
  }
 catch (  Exception e) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getSchedule() + ""String_Node_Str""+ cmd.getIntervalType());
  }
  if (cmd.getMaxSnaps() <= 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  int intervalMaxSnaps=type.getMax();
  if (cmd.getMaxSnaps() > intervalMaxSnaps) {
    throw new InvalidParameterValueException(""String_Node_Str"" + intervalMaxSnaps + ""String_Node_Str""+ cmd.getIntervalType());
  }
  long accountLimit=_resourceLimitMgr.findCorrectResourceLimitForAccount(owner,ResourceType.snapshot);
  long domainLimit=_resourceLimitMgr.findCorrectResourceLimitForDomain(_domainMgr.getDomain(owner.getDomainId()),ResourceType.snapshot);
  int max=cmd.getMaxSnaps().intValue();
  if (owner.getType() != Account.ACCOUNT_TYPE_ADMIN && ((accountLimit != -1 && max > accountLimit) || (domainLimit != -1 && max > domainLimit))) {
    String message=""String_Node_Str"";
    if (owner.getType() == Account.ACCOUNT_TYPE_PROJECT) {
      message=""String_Node_Str"";
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + message + ""String_Node_Str"");
  }
  SnapshotPolicyVO policy=_snapshotPolicyDao.findOneByVolumeInterval(volumeId,intvType);
  if (policy == null) {
    policy=new SnapshotPolicyVO(volumeId,cmd.getSchedule(),timezoneId,intvType,cmd.getMaxSnaps());
    policy=_snapshotPolicyDao.persist(policy);
    _snapSchedMgr.scheduleNextSnapshotJob(policy);
  }
 else {
    try {
      policy=_snapshotPolicyDao.acquireInLockTable(policy.getId());
      policy.setSchedule(cmd.getSchedule());
      policy.setTimezone(timezoneId);
      policy.setInterval((short)intvType.ordinal());
      policy.setMaxSnaps(cmd.getMaxSnaps());
      policy.setActive(true);
      _snapshotPolicyDao.update(policy.getId(),policy);
    }
  finally {
      if (policy != null) {
        _snapshotPolicyDao.releaseFromLockTable(policy.getId());
      }
    }
  }
  return policy;
}"
89197,"@Override @DB public void cleanupSecondaryStorage(boolean recurring){
  try {
    List<HostVO> secondaryStorageHosts=_hostDao.listSecondaryStorageHosts();
    for (    HostVO secondaryStorageHost : secondaryStorageHosts) {
      try {
        long hostId=secondaryStorageHost.getId();
        List<VMTemplateHostVO> destroyedTemplateHostVOs=_vmTemplateHostDao.listDestroyed(hostId);
        s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVOs.size() + ""String_Node_Str""+ secondaryStorageHost.getName());
        for (        VMTemplateHostVO destroyedTemplateHostVO : destroyedTemplateHostVOs) {
          if (!_tmpltMgr.templateIsDeleteable(destroyedTemplateHostVO)) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVO);
            }
            continue;
          }
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVO);
          }
          String installPath=destroyedTemplateHostVO.getInstallPath();
          if (installPath != null) {
            Answer answer=_agentMgr.sendToSecStorage(secondaryStorageHost,new DeleteTemplateCommand(secondaryStorageHost.getStorageUrl(),destroyedTemplateHostVO.getInstallPath()));
            if (answer == null || !answer.getResult()) {
              s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVO + ""String_Node_Str""+ ((answer == null) ? ""String_Node_Str"" : answer.getDetails()));
            }
 else {
              _vmTemplateHostDao.remove(destroyedTemplateHostVO.getId());
              s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVO.getInstallPath());
            }
          }
 else {
            _vmTemplateHostDao.remove(destroyedTemplateHostVO.getId());
          }
        }
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + secondaryStorageHost,e);
      }
    }
    for (    HostVO secondaryStorageHost : secondaryStorageHosts) {
      try {
        long hostId=secondaryStorageHost.getId();
        List<Long> vIDs=findAllVolumeIdInSnapshotTable(hostId);
        if (vIDs == null) {
          continue;
        }
        for (        Long volumeId : vIDs) {
          boolean lock=false;
          try {
            VolumeVO volume=_volsDao.findByIdIncludingRemoved(volumeId);
            if (volume.getRemoved() == null) {
              volume=_volsDao.acquireInLockTable(volumeId,10);
              if (volume == null) {
                continue;
              }
              lock=true;
            }
            List<String> snapshots=findAllSnapshotForVolume(volumeId);
            if (snapshots == null) {
              continue;
            }
            CleanupSnapshotBackupCommand cmd=new CleanupSnapshotBackupCommand(secondaryStorageHost.getStorageUrl(),secondaryStorageHost.getDataCenterId(),volume.getAccountId(),volumeId,snapshots);
            Answer answer=_agentMgr.sendToSecStorage(secondaryStorageHost,cmd);
            if ((answer == null) || !answer.getResult()) {
              String details=""String_Node_Str"" + volumeId + ""String_Node_Str""+ (answer == null ? ""String_Node_Str"" : answer.getDetails());
              s_logger.warn(details);
            }
          }
 catch (          Exception e1) {
            s_logger.warn(""String_Node_Str"" + secondaryStorageHost,e1);
          }
 finally {
            if (lock) {
              _volsDao.releaseFromLockTable(volumeId);
            }
          }
        }
      }
 catch (      Exception e2) {
        s_logger.warn(""String_Node_Str"" + secondaryStorageHost,e2);
      }
    }
  }
 catch (  Exception e3) {
    s_logger.warn(""String_Node_Str"",e3);
  }
}","@Override @DB public void cleanupSecondaryStorage(boolean recurring){
  try {
    List<HostVO> secondaryStorageHosts=_ssvmMgr.listSecondaryStorageHostsInAllZones();
    for (    HostVO secondaryStorageHost : secondaryStorageHosts) {
      try {
        long hostId=secondaryStorageHost.getId();
        List<VMTemplateHostVO> destroyedTemplateHostVOs=_vmTemplateHostDao.listDestroyed(hostId);
        s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVOs.size() + ""String_Node_Str""+ secondaryStorageHost.getName());
        for (        VMTemplateHostVO destroyedTemplateHostVO : destroyedTemplateHostVOs) {
          if (!_tmpltMgr.templateIsDeleteable(destroyedTemplateHostVO)) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVO);
            }
            continue;
          }
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVO);
          }
          String installPath=destroyedTemplateHostVO.getInstallPath();
          if (installPath != null) {
            Answer answer=_agentMgr.sendToSecStorage(secondaryStorageHost,new DeleteTemplateCommand(secondaryStorageHost.getStorageUrl(),destroyedTemplateHostVO.getInstallPath()));
            if (answer == null || !answer.getResult()) {
              s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVO + ""String_Node_Str""+ ((answer == null) ? ""String_Node_Str"" : answer.getDetails()));
            }
 else {
              _vmTemplateHostDao.remove(destroyedTemplateHostVO.getId());
              s_logger.debug(""String_Node_Str"" + destroyedTemplateHostVO.getInstallPath());
            }
          }
 else {
            _vmTemplateHostDao.remove(destroyedTemplateHostVO.getId());
          }
        }
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + secondaryStorageHost,e);
      }
    }
    for (    HostVO secondaryStorageHost : secondaryStorageHosts) {
      try {
        long hostId=secondaryStorageHost.getId();
        List<Long> vIDs=findAllVolumeIdInSnapshotTable(hostId);
        if (vIDs == null) {
          continue;
        }
        for (        Long volumeId : vIDs) {
          boolean lock=false;
          try {
            VolumeVO volume=_volsDao.findByIdIncludingRemoved(volumeId);
            if (volume.getRemoved() == null) {
              volume=_volsDao.acquireInLockTable(volumeId,10);
              if (volume == null) {
                continue;
              }
              lock=true;
            }
            List<String> snapshots=findAllSnapshotForVolume(volumeId);
            if (snapshots == null) {
              continue;
            }
            CleanupSnapshotBackupCommand cmd=new CleanupSnapshotBackupCommand(secondaryStorageHost.getStorageUrl(),secondaryStorageHost.getDataCenterId(),volume.getAccountId(),volumeId,snapshots);
            Answer answer=_agentMgr.sendToSecStorage(secondaryStorageHost,cmd);
            if ((answer == null) || !answer.getResult()) {
              String details=""String_Node_Str"" + volumeId + ""String_Node_Str""+ (answer == null ? ""String_Node_Str"" : answer.getDetails());
              s_logger.warn(details);
            }
          }
 catch (          Exception e1) {
            s_logger.warn(""String_Node_Str"" + secondaryStorageHost,e1);
          }
 finally {
            if (lock) {
              _volsDao.releaseFromLockTable(volumeId);
            }
          }
        }
      }
 catch (      Exception e2) {
        s_logger.warn(""String_Node_Str"" + secondaryStorageHost,e2);
      }
    }
  }
 catch (  Exception e3) {
    s_logger.warn(""String_Node_Str"",e3);
  }
}"
89198,"private boolean restartNetwork(long networkId,Account callerAccount,User callerUser,boolean cleanup) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {
  NetworkVO network=_networksDao.findById(networkId);
  s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
  ReservationContext context=new ReservationContextImpl(null,null,callerUser,callerAccount);
  if (cleanup) {
    s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
    if (!shutdownNetworkElementsAndResources(context,true,network)) {
      s_logger.debug(""String_Node_Str"" + network.getState());
      setRestartRequired(network,true);
      return false;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + networkId);
  }
  DeployDestination dest=new DeployDestination(_dcDao.findById(network.getDataCenterId()),null,null,null);
  s_logger.debug(""String_Node_Str"" + network + ""String_Node_Str"");
  NetworkOfferingVO offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
  try {
    implementNetworkElementsAndResources(dest,context,network,offering);
    setRestartRequired(network,true);
  }
 catch (  Exception ex) {
    s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str"",ex);
    return false;
  }
  setRestartRequired(network,false);
  return true;
}","private boolean restartNetwork(long networkId,Account callerAccount,User callerUser,boolean cleanup) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {
  NetworkVO network=_networksDao.findById(networkId);
  s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
  ReservationContext context=new ReservationContextImpl(null,null,callerUser,callerAccount);
  if (cleanup) {
    if (network.getGuestType() != GuestType.Isolated) {
      s_logger.warn(""String_Node_Str"");
      return false;
    }
    s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
    if (!shutdownNetworkElementsAndResources(context,true,network)) {
      s_logger.debug(""String_Node_Str"" + network.getState());
      setRestartRequired(network,true);
      return false;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + networkId);
  }
  DeployDestination dest=new DeployDestination(_dcDao.findById(network.getDataCenterId()),null,null,null);
  s_logger.debug(""String_Node_Str"" + network + ""String_Node_Str"");
  NetworkOfferingVO offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
  try {
    implementNetworkElementsAndResources(dest,context,network,offering);
    setRestartRequired(network,true);
  }
 catch (  Exception ex) {
    s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str"",ex);
    return false;
  }
  setRestartRequired(network,false);
  return true;
}"
89199,"@Override public List<AccountVO> searchForAccounts(ListAccountsCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  Long accountId=cmd.getId();
  String accountName=cmd.getSearchName();
  boolean isRecursive=cmd.isRecursive();
  boolean listAll=cmd.listAll();
  Boolean listForDomain=false;
  if (accountId != null) {
    Account account=_accountDao.findById(accountId);
    if (account == null || account.getId() == Account.ACCOUNT_ID_SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountId);
    }
    checkAccess(caller,null,account);
  }
  if (domainId != null) {
    Domain domain=_domainMgr.getDomain(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    checkAccess(caller,domain);
    if (accountName != null) {
      Account account=_accountDao.findActiveAccount(accountName,domainId);
      if (account == null || account.getId() == Account.ACCOUNT_ID_SYSTEM) {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
      checkAccess(caller,null,account);
    }
  }
  if (accountId == null) {
    if (isAdmin(caller.getType()) && listAll && domainId == null) {
      listForDomain=true;
      if (domainId == null) {
        domainId=caller.getDomainId();
      }
    }
 else     if (domainId != null) {
      listForDomain=true;
    }
 else {
      accountId=caller.getAccountId();
    }
  }
  Filter searchFilter=new Filter(AccountVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object type=cmd.getAccountType();
  Object state=cmd.getState();
  Object isCleanupRequired=cmd.isCleanupRequired();
  Object keyword=cmd.getKeyword();
  SearchBuilder<AccountVO> sb=_accountDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountName(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getNeedsCleanup(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.NEQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.NEQ);
  if (listForDomain && isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<AccountVO> sc=sb.create();
  sc.setParameters(""String_Node_Str"",Account.ACCOUNT_ID_SYSTEM);
  if (keyword != null) {
    SearchCriteria<AccountVO> ssc=_accountDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (isCleanupRequired != null) {
    sc.setParameters(""String_Node_Str"",isCleanupRequired);
  }
  if (accountName != null) {
    sc.setParameters(""String_Node_Str"",accountName);
  }
  sc.setParameters(""String_Node_Str"",5);
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
  if (listForDomain) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
  return _accountDao.search(sc,searchFilter);
}","@Override public List<AccountVO> searchForAccounts(ListAccountsCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  Long accountId=cmd.getId();
  String accountName=cmd.getSearchName();
  boolean isRecursive=cmd.isRecursive();
  boolean listAll=cmd.listAll();
  Boolean listForDomain=false;
  if (accountId != null) {
    Account account=_accountDao.findById(accountId);
    if (account == null || account.getId() == Account.ACCOUNT_ID_SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountId);
    }
    checkAccess(caller,null,account);
  }
  if (domainId != null) {
    Domain domain=_domainMgr.getDomain(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    checkAccess(caller,domain);
    if (accountName != null) {
      Account account=_accountDao.findActiveAccount(accountName,domainId);
      if (account == null || account.getId() == Account.ACCOUNT_ID_SYSTEM) {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
      checkAccess(caller,null,account);
    }
  }
  if (accountId == null) {
    if (isAdmin(caller.getType()) && listAll && domainId == null) {
      listForDomain=true;
      isRecursive=true;
      if (domainId == null) {
        domainId=caller.getDomainId();
      }
    }
 else     if (domainId != null) {
      listForDomain=true;
    }
 else {
      accountId=caller.getAccountId();
    }
  }
  Filter searchFilter=new Filter(AccountVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object type=cmd.getAccountType();
  Object state=cmd.getState();
  Object isCleanupRequired=cmd.isCleanupRequired();
  Object keyword=cmd.getKeyword();
  SearchBuilder<AccountVO> sb=_accountDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountName(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getNeedsCleanup(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.NEQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.NEQ);
  if (listForDomain && isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<AccountVO> sc=sb.create();
  sc.setParameters(""String_Node_Str"",Account.ACCOUNT_ID_SYSTEM);
  if (keyword != null) {
    SearchCriteria<AccountVO> ssc=_accountDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (isCleanupRequired != null) {
    sc.setParameters(""String_Node_Str"",isCleanupRequired);
  }
  if (accountName != null) {
    sc.setParameters(""String_Node_Str"",accountName);
  }
  sc.setParameters(""String_Node_Str"",5);
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
  if (listForDomain) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
  return _accountDao.search(sc,searchFilter);
}"
89200,"protected void createVbd(Connect conn,VirtualMachineTO vmSpec,String vmName,LibvirtVMDef vm) throws InternalErrorException, LibvirtException, URISyntaxException {
  for (  VolumeTO volume : vmSpec.getDisks()) {
    KVMPhysicalDisk physicalDisk=null;
    KVMStoragePool pool=null;
    if (volume.getType() == Volume.Type.ISO && volume.getPath() != null) {
      String volPath=volume.getPath();
      int index=volPath.lastIndexOf(""String_Node_Str"");
      String volDir=volPath.substring(0,index);
      String volName=volPath.substring(index + 1);
      KVMStoragePool secondaryStorage=_storagePoolMgr.getStoragePoolByURI(volDir);
      physicalDisk=secondaryStorage.getPhysicalDisk(volName);
    }
 else     if (volume.getType() != Volume.Type.ISO) {
      pool=_storagePoolMgr.getStoragePool(volume.getPoolUuid());
      physicalDisk=pool.getPhysicalDisk(volume.getPath());
    }
    String volPath=null;
    if (physicalDisk != null) {
      volPath=physicalDisk.getPath();
    }
    DiskDef.diskBus diskBusType=getGuestDiskModel(vmSpec.getOs());
    DiskDef disk=new DiskDef();
    if (volume.getType() == Volume.Type.ISO) {
      if (volPath == null) {
        disk.defISODisk(null);
      }
 else {
        disk.defISODisk(volPath);
      }
    }
 else {
      int devId=(int)volume.getDeviceId();
      if (pool.getType() == StoragePoolType.CLVM) {
        disk.defBlockBasedDisk(physicalDisk.getPath(),devId,diskBusType);
      }
 else {
        if (volume.getType() == Volume.Type.DATADISK) {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,DiskDef.diskBus.VIRTIO,DiskDef.diskFmtType.QCOW2);
        }
 else {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,diskBusType,DiskDef.diskFmtType.QCOW2);
        }
      }
    }
    vm.getDevices().addDevice(disk);
  }
  if (vmSpec.getType() != VirtualMachine.Type.User) {
    if (_sysvmISOPath != null) {
      DiskDef iso=new DiskDef();
      iso.defISODisk(_sysvmISOPath);
      vm.getDevices().addDevice(iso);
    }
    createPatchVbd(conn,vmName,vm,vmSpec);
  }
}","protected void createVbd(Connect conn,VirtualMachineTO vmSpec,String vmName,LibvirtVMDef vm) throws InternalErrorException, LibvirtException, URISyntaxException {
  List<DiskDef> disks=new ArrayList<DiskDef>();
  for (  VolumeTO volume : vmSpec.getDisks()) {
    KVMPhysicalDisk physicalDisk=null;
    KVMStoragePool pool=null;
    if (volume.getType() == Volume.Type.ISO && volume.getPath() != null) {
      String volPath=volume.getPath();
      int index=volPath.lastIndexOf(""String_Node_Str"");
      String volDir=volPath.substring(0,index);
      String volName=volPath.substring(index + 1);
      KVMStoragePool secondaryStorage=_storagePoolMgr.getStoragePoolByURI(volDir);
      physicalDisk=secondaryStorage.getPhysicalDisk(volName);
    }
 else     if (volume.getType() != Volume.Type.ISO) {
      pool=_storagePoolMgr.getStoragePool(volume.getPoolUuid());
      physicalDisk=pool.getPhysicalDisk(volume.getPath());
    }
    String volPath=null;
    if (physicalDisk != null) {
      volPath=physicalDisk.getPath();
    }
    DiskDef.diskBus diskBusType=getGuestDiskModel(vmSpec.getOs());
    DiskDef disk=new DiskDef();
    if (volume.getType() == Volume.Type.ISO) {
      if (volPath == null) {
        disk.defISODisk(null);
      }
 else {
        disk.defISODisk(volPath);
      }
    }
 else {
      int devId=(int)volume.getDeviceId();
      if (pool.getType() == StoragePoolType.CLVM) {
        disk.defBlockBasedDisk(physicalDisk.getPath(),devId,diskBusType);
      }
 else {
        if (volume.getType() == Volume.Type.DATADISK) {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,DiskDef.diskBus.VIRTIO,DiskDef.diskFmtType.QCOW2);
        }
 else {
          disk.defFileBasedDisk(physicalDisk.getPath(),devId,diskBusType,DiskDef.diskFmtType.QCOW2);
        }
      }
      disks.add(devId,disk);
      continue;
    }
    vm.getDevices().addDevice(disk);
  }
  for (  DiskDef disk : disks) {
    vm.getDevices().addDevice(disk);
  }
  if (vmSpec.getType() != VirtualMachine.Type.User) {
    if (_sysvmISOPath != null) {
      DiskDef iso=new DiskDef();
      iso.defISODisk(_sysvmISOPath);
      vm.getDevices().addDevice(iso);
    }
    createPatchVbd(conn,vmName,vm,vmSpec);
  }
}"
89201,"protected void processRequest(final Request request,final Link link){
  boolean requestLogged=false;
  Response response=null;
  try {
    final Command[] cmds=request.getCommands();
    final Answer[] answers=new Answer[cmds.length];
    for (int i=0; i < cmds.length; i++) {
      final Command cmd=cmds[i];
      Answer answer;
      try {
        if (s_logger.isDebugEnabled()) {
          if ((cmd instanceof ModifySshKeysCommand)) {
            s_logger.debug(""String_Node_Str"");
          }
 else {
            if (!requestLogged) {
              s_logger.debug(""String_Node_Str"" + request.toString());
              requestLogged=true;
            }
          }
          s_logger.debug(""String_Node_Str"" + cmd.toString());
        }
        if (cmd instanceof CronCommand) {
          final CronCommand watch=(CronCommand)cmd;
          scheduleWatch(link,request,watch.getInterval() * 1000,watch.getInterval() * 1000);
          answer=new Answer(cmd,true,null);
        }
 else         if (cmd instanceof UpgradeCommand) {
          final UpgradeCommand upgrade=(UpgradeCommand)cmd;
          answer=upgradeAgent(upgrade.getUpgradeUrl(),upgrade);
        }
 else         if (cmd instanceof ShutdownCommand) {
          ShutdownCommand shutdown=(ShutdownCommand)cmd;
          s_logger.debug(""String_Node_Str"" + shutdown.getReason());
          cancelTasks();
          _reconnectAllowed=false;
          answer=new Answer(cmd,true,null);
        }
 else         if (cmd instanceof AgentControlCommand) {
          answer=null;
synchronized (_controlListeners) {
            for (            IAgentControlListener listener : _controlListeners) {
              answer=listener.processControlRequest(request,(AgentControlCommand)cmd);
              if (answer != null) {
                break;
              }
            }
          }
          if (answer == null) {
            s_logger.warn(""String_Node_Str"" + cmd.toString());
            answer=new AgentControlAnswer(cmd);
          }
        }
 else {
          _inProgress.incrementAndGet();
          try {
            answer=_resource.executeRequest(cmd);
          }
  finally {
            _inProgress.decrementAndGet();
          }
          if (answer == null) {
            s_logger.debug(""String_Node_Str"" + cmd.toString());
            answer=Answer.createUnsupportedCommandAnswer(cmd);
          }
        }
      }
 catch (      final Throwable th) {
        s_logger.warn(""String_Node_Str"",th);
        final StringWriter writer=new StringWriter();
        th.printStackTrace(new PrintWriter(writer));
        answer=new Answer(cmd,false,writer.toString());
      }
      answers[i]=answer;
      if (!answer.getResult() && request.stopOnError()) {
        for (i++; i < cmds.length; i++) {
          answers[i]=new Answer(cmds[i],false,""String_Node_Str"");
        }
        break;
      }
    }
    response=new Response(request,answers);
  }
  finally {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(response != null ? response.toString() : ""String_Node_Str"");
    }
    if (response != null) {
      try {
        link.send(response.toBytes());
      }
 catch (      final ClosedChannelException e) {
        s_logger.warn(""String_Node_Str"" + response.toString());
      }
    }
  }
}","protected void processRequest(final Request request,final Link link){
  boolean requestLogged=false;
  Response response=null;
  try {
    final Command[] cmds=request.getCommands();
    final Answer[] answers=new Answer[cmds.length];
    for (int i=0; i < cmds.length; i++) {
      final Command cmd=cmds[i];
      Answer answer;
      try {
        if (s_logger.isDebugEnabled()) {
          if ((cmd instanceof ModifySshKeysCommand)) {
            s_logger.debug(""String_Node_Str"");
          }
 else {
            if (!requestLogged) {
              s_logger.debug(""String_Node_Str"" + request.toString());
              requestLogged=true;
            }
          }
          s_logger.debug(""String_Node_Str"" + cmd.toString());
        }
        if (cmd instanceof CronCommand) {
          final CronCommand watch=(CronCommand)cmd;
          scheduleWatch(link,request,watch.getInterval() * 1000,watch.getInterval() * 1000);
          answer=new Answer(cmd,true,null);
        }
 else         if (cmd instanceof UpgradeCommand) {
          final UpgradeCommand upgrade=(UpgradeCommand)cmd;
          answer=upgradeAgent(upgrade.getUpgradeUrl(),upgrade);
        }
 else         if (cmd instanceof ShutdownCommand) {
          ShutdownCommand shutdown=(ShutdownCommand)cmd;
          s_logger.debug(""String_Node_Str"" + shutdown.getReason());
          cancelTasks();
          _reconnectAllowed=false;
          answer=new Answer(cmd,true,null);
        }
 else         if (cmd instanceof MaintainCommand) {
          s_logger.debug(""String_Node_Str"");
          cancelTasks();
          _reconnectAllowed=false;
          answer=new MaintainAnswer((MaintainCommand)cmd);
        }
 else         if (cmd instanceof AgentControlCommand) {
          answer=null;
synchronized (_controlListeners) {
            for (            IAgentControlListener listener : _controlListeners) {
              answer=listener.processControlRequest(request,(AgentControlCommand)cmd);
              if (answer != null) {
                break;
              }
            }
          }
          if (answer == null) {
            s_logger.warn(""String_Node_Str"" + cmd.toString());
            answer=new AgentControlAnswer(cmd);
          }
        }
 else {
          _inProgress.incrementAndGet();
          try {
            answer=_resource.executeRequest(cmd);
          }
  finally {
            _inProgress.decrementAndGet();
          }
          if (answer == null) {
            s_logger.debug(""String_Node_Str"" + cmd.toString());
            answer=Answer.createUnsupportedCommandAnswer(cmd);
          }
        }
      }
 catch (      final Throwable th) {
        s_logger.warn(""String_Node_Str"",th);
        final StringWriter writer=new StringWriter();
        th.printStackTrace(new PrintWriter(writer));
        answer=new Answer(cmd,false,writer.toString());
      }
      answers[i]=answer;
      if (!answer.getResult() && request.stopOnError()) {
        for (i++; i < cmds.length; i++) {
          answers[i]=new Answer(cmds[i],false,""String_Node_Str"");
        }
        break;
      }
    }
    response=new Response(request,answers);
  }
  finally {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(response != null ? response.toString() : ""String_Node_Str"");
    }
    if (response != null) {
      try {
        link.send(response.toBytes());
      }
 catch (      final ClosedChannelException e) {
        s_logger.warn(""String_Node_Str"" + response.toString());
      }
    }
  }
}"
89202,"@Override public Map<? extends ServerResource,Map<String,String>> find(long dcId,Long podId,Long clusterId,URI uri,String username,String password,List<String> hostTags) throws DiscoveryException {
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (cluster == null || cluster.getHypervisorType() != HypervisorType.KVM) {
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"");
    return null;
  }
  Map<KvmDummyResourceBase,Map<String,String>> resources=new HashMap<KvmDummyResourceBase,Map<String,String>>();
  Map<String,String> details=new HashMap<String,String>();
  if (!uri.getScheme().equals(""String_Node_Str"")) {
    String msg=""String_Node_Str"" + uri;
    s_logger.debug(msg);
    return null;
  }
  com.trilead.ssh2.Connection sshConnection=null;
  String agentIp=null;
  try {
    String hostname=uri.getHost();
    InetAddress ia=InetAddress.getByName(hostname);
    agentIp=ia.getHostAddress();
    String guid=UUID.nameUUIDFromBytes(agentIp.getBytes()).toString();
    String guidWithTail=guid + ""String_Node_Str"";
    if (_resourceMgr.findHostByGuid(guidWithTail) != null) {
      s_logger.debug(""String_Node_Str"" + agentIp + ""String_Node_Str""+ guidWithTail+ ""String_Node_Str"");
      return null;
    }
    sshConnection=new com.trilead.ssh2.Connection(agentIp,22);
    sshConnection.connect(null,60000,60000);
    if (!sshConnection.authenticateWithPassword(username,password)) {
      s_logger.debug(""String_Node_Str"");
      throw new DiscoveredWithErrorException(""String_Node_Str"");
    }
    if (!SSHCmdHelper.sshExecuteCmd(sshConnection,""String_Node_Str"",3)) {
      s_logger.debug(""String_Node_Str"");
      return null;
    }
    List<PhysicalNetworkSetupInfo> networks=_networkMgr.getPhysicalNetworkInfo(dcId,HypervisorType.KVM);
    if (networks.size() < 1) {
      _kvmPublicNic=""String_Node_Str"";
      _kvmPrivateNic=""String_Node_Str"";
      _kvmGuestNic=""String_Node_Str"";
      s_logger.debug(""String_Node_Str"" + dcId + ""String_Node_Str"");
    }
 else {
      PhysicalNetworkSetupInfo network=networks.get(0);
      _kvmPublicNic=network.getPublicNetworkName();
      if (_kvmPublicNic == null) {
        _kvmPublicNic=""String_Node_Str"";
      }
      _kvmPrivateNic=network.getPrivateNetworkName();
      if (_kvmPrivateNic == null) {
        _kvmPrivateNic=_kvmPublicNic;
      }
      _kvmGuestNic=network.getGuestNetworkName();
      if (_kvmGuestNic == null) {
        _kvmGuestNic=_kvmPrivateNic;
      }
    }
    String parameters=""String_Node_Str"" + _hostIp + ""String_Node_Str""+ dcId+ ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ guid+ ""String_Node_Str"";
    if (_kvmPublicNic != null) {
      parameters+=""String_Node_Str"" + _kvmPublicNic;
    }
    if (_kvmPrivateNic != null) {
      parameters+=""String_Node_Str"" + _kvmPrivateNic;
    }
    if (_kvmGuestNic != null) {
      parameters+=""String_Node_Str"" + _kvmGuestNic;
    }
    SSHCmdHelper.sshExecuteCmd(sshConnection,""String_Node_Str"" + parameters,3);
    KvmDummyResourceBase kvmResource=new KvmDummyResourceBase();
    Map<String,Object> params=new HashMap<String,Object>();
    params.put(""String_Node_Str"",Long.toString(dcId));
    params.put(""String_Node_Str"",Long.toString(podId));
    params.put(""String_Node_Str"",Long.toString(clusterId));
    params.put(""String_Node_Str"",guid);
    params.put(""String_Node_Str"",agentIp);
    kvmResource.configure(""String_Node_Str"",params);
    resources.put(kvmResource,details);
    HostVO connectedHost=waitForHostConnect(dcId,podId,clusterId,guidWithTail);
    if (connectedHost == null)     return null;
    details.put(""String_Node_Str"",guidWithTail);
    if (cluster.getGuid() == null) {
      cluster.setGuid(UUID.nameUUIDFromBytes(String.valueOf(clusterId).getBytes()).toString());
      _clusterDao.update(clusterId,cluster);
    }
    return resources;
  }
 catch (  DiscoveredWithErrorException e) {
    throw e;
  }
catch (  Exception e) {
    String msg=""String_Node_Str"" + e.toString() + ""String_Node_Str""+ e.getMessage();
    s_logger.warn(msg);
  }
 finally {
    if (sshConnection != null)     sshConnection.close();
  }
  return null;
}","@Override public Map<? extends ServerResource,Map<String,String>> find(long dcId,Long podId,Long clusterId,URI uri,String username,String password,List<String> hostTags) throws DiscoveryException {
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (cluster == null || cluster.getHypervisorType() != HypervisorType.KVM) {
    if (s_logger.isInfoEnabled())     s_logger.info(""String_Node_Str"");
    return null;
  }
  Map<KvmDummyResourceBase,Map<String,String>> resources=new HashMap<KvmDummyResourceBase,Map<String,String>>();
  Map<String,String> details=new HashMap<String,String>();
  if (!uri.getScheme().equals(""String_Node_Str"")) {
    String msg=""String_Node_Str"" + uri;
    s_logger.debug(msg);
    return null;
  }
  com.trilead.ssh2.Connection sshConnection=null;
  String agentIp=null;
  try {
    String hostname=uri.getHost();
    InetAddress ia=InetAddress.getByName(hostname);
    agentIp=ia.getHostAddress();
    String guid=UUID.nameUUIDFromBytes(agentIp.getBytes()).toString();
    String guidWithTail=guid + ""String_Node_Str"";
    if (_resourceMgr.findHostByGuid(guidWithTail) != null) {
      s_logger.debug(""String_Node_Str"" + agentIp + ""String_Node_Str""+ guidWithTail+ ""String_Node_Str"");
      return null;
    }
    sshConnection=new com.trilead.ssh2.Connection(agentIp,22);
    sshConnection.connect(null,60000,60000);
    if (!sshConnection.authenticateWithPassword(username,password)) {
      s_logger.debug(""String_Node_Str"");
      throw new DiscoveredWithErrorException(""String_Node_Str"");
    }
    if (!SSHCmdHelper.sshExecuteCmd(sshConnection,""String_Node_Str"",3)) {
      s_logger.debug(""String_Node_Str"");
      return null;
    }
    List<PhysicalNetworkSetupInfo> networks=_networkMgr.getPhysicalNetworkInfo(dcId,HypervisorType.KVM);
    if (networks.size() < 1) {
      _kvmPublicNic=""String_Node_Str"";
      _kvmPrivateNic=""String_Node_Str"";
      _kvmGuestNic=""String_Node_Str"";
      s_logger.debug(""String_Node_Str"" + dcId + ""String_Node_Str"");
    }
 else {
      PhysicalNetworkSetupInfo network=networks.get(0);
      _kvmPublicNic=network.getPublicNetworkName();
      if (_kvmPublicNic == null) {
        _kvmPublicNic=""String_Node_Str"";
      }
      _kvmPrivateNic=network.getPrivateNetworkName();
      if (_kvmPrivateNic == null) {
        _kvmPrivateNic=_kvmPublicNic;
      }
      _kvmGuestNic=network.getGuestNetworkName();
      if (_kvmGuestNic == null) {
        _kvmGuestNic=_kvmPrivateNic;
      }
    }
    String parameters=""String_Node_Str"" + _hostIp + ""String_Node_Str""+ dcId+ ""String_Node_Str""+ podId+ ""String_Node_Str""+ clusterId+ ""String_Node_Str""+ guid+ ""String_Node_Str"";
    if (_kvmPublicNic != null) {
      parameters+=""String_Node_Str"" + _kvmPublicNic;
    }
    if (_kvmPrivateNic != null) {
      parameters+=""String_Node_Str"" + _kvmPrivateNic;
    }
    if (_kvmGuestNic != null) {
      parameters+=""String_Node_Str"" + _kvmGuestNic;
    }
    SSHCmdHelper.sshExecuteCmd(sshConnection,""String_Node_Str"" + parameters,3);
    KvmDummyResourceBase kvmResource=new KvmDummyResourceBase();
    Map<String,Object> params=new HashMap<String,Object>();
    params.put(""String_Node_Str"",Long.toString(dcId));
    params.put(""String_Node_Str"",Long.toString(podId));
    params.put(""String_Node_Str"",Long.toString(clusterId));
    params.put(""String_Node_Str"",guid);
    params.put(""String_Node_Str"",agentIp);
    kvmResource.configure(""String_Node_Str"",params);
    resources.put(kvmResource,details);
    HostVO connectedHost=waitForHostConnect(dcId,podId,clusterId,guidWithTail);
    if (connectedHost == null)     return null;
    details.put(""String_Node_Str"",guidWithTail);
    if (cluster.getGuid() == null) {
      cluster.setGuid(UUID.nameUUIDFromBytes(String.valueOf(clusterId).getBytes()).toString());
      _clusterDao.update(clusterId,cluster);
    }
    _hostDao.loadDetails(connectedHost);
    Map<String,String> hostDetails=connectedHost.getDetails();
    hostDetails.put(""String_Node_Str"",password);
    hostDetails.put(""String_Node_Str"",username);
    _hostDao.saveDetails(connectedHost);
    return resources;
  }
 catch (  DiscoveredWithErrorException e) {
    throw e;
  }
catch (  Exception e) {
    String msg=""String_Node_Str"" + e.toString() + ""String_Node_Str""+ e.getMessage();
    s_logger.warn(msg);
  }
 finally {
    if (sshConnection != null)     sshConnection.close();
  }
  return null;
}"
89203,"private boolean doMaintain(final long hostId){
  HostVO host=_hostDao.findById(hostId);
  MaintainAnswer answer=(MaintainAnswer)_agentMgr.easySend(hostId,new MaintainCommand());
  if (answer == null || !answer.getResult()) {
    s_logger.warn(""String_Node_Str"" + hostId);
    return false;
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.AdminAskMaintenace,_nodeId);
  }
 catch (  NoTransitionException e) {
    String err=""String_Node_Str"" + host.getId() + ""String_Node_Str""+ ResourceState.Maintenance;
    s_logger.debug(err,e);
    throw new CloudRuntimeException(err + e.getMessage());
  }
  _agentMgr.pullAgentToMaintenance(hostId);
  if (host.getType() == Host.Type.Routing) {
    final List<VMInstanceVO> vms=_vmDao.listByHostId(hostId);
    if (vms.size() == 0) {
      return true;
    }
    List<HostVO> hosts=listAllUpAndEnabledHosts(Host.Type.Routing,host.getClusterId(),host.getPodId(),host.getDataCenterId());
    for (    final VMInstanceVO vm : vms) {
      if (hosts == null || hosts.size() <= 1 || !answer.getMigrate()) {
        _haMgr.scheduleStop(vm,hostId,WorkType.ForceStop);
      }
 else {
        _haMgr.scheduleMigration(vm);
      }
    }
  }
  return true;
}","private boolean doMaintain(final long hostId){
  HostVO host=_hostDao.findById(hostId);
  MaintainAnswer answer=(MaintainAnswer)_agentMgr.easySend(hostId,new MaintainCommand());
  if (answer == null || !answer.getResult()) {
    s_logger.warn(""String_Node_Str"" + hostId);
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.AdminAskMaintenace,_nodeId);
  }
 catch (  NoTransitionException e) {
    String err=""String_Node_Str"" + host.getId() + ""String_Node_Str""+ ResourceState.Maintenance;
    s_logger.debug(err,e);
    throw new CloudRuntimeException(err + e.getMessage());
  }
  _agentMgr.pullAgentToMaintenance(hostId);
  if (host.getType() == Host.Type.Routing) {
    final List<VMInstanceVO> vms=_vmDao.listByHostId(hostId);
    if (vms.size() == 0) {
      return true;
    }
    List<HostVO> hosts=listAllUpAndEnabledHosts(Host.Type.Routing,host.getClusterId(),host.getPodId(),host.getDataCenterId());
    for (    final VMInstanceVO vm : vms) {
      if (hosts == null || hosts.size() <= 1 || !answer.getMigrate()) {
        _haMgr.scheduleStop(vm,hostId,WorkType.ForceStop);
      }
 else {
        _haMgr.scheduleMigration(vm);
      }
    }
  }
  return true;
}"
89204,"private boolean doCancelMaintenance(long hostId){
  HostVO host;
  host=_hostDao.findById(hostId);
  if (host == null || host.getRemoved() != null) {
    s_logger.warn(""String_Node_Str"" + hostId);
    return true;
  }
  if (host.getResourceState() != ResourceState.PrepareForMaintenance && host.getResourceState() != ResourceState.Maintenance && host.getResourceState() != ResourceState.ErrorInMaintenance) {
    throw new CloudRuntimeException(""String_Node_Str"" + host.getResourceState() + ""String_Node_Str""+ hostId);
  }
  _haMgr.cancelScheduledMigrations(host);
  List<VMInstanceVO> vms=_haMgr.findTakenMigrationWork();
  for (  VMInstanceVO vm : vms) {
    if (vm.getHostId() != null && vm.getHostId() == hostId) {
      s_logger.info(""String_Node_Str"" + vm);
      return false;
    }
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.AdminCancelMaintenance,_nodeId);
    _agentMgr.pullAgentOutMaintenance(hostId);
    return true;
  }
 catch (  NoTransitionException e) {
    s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
    return false;
  }
}","private boolean doCancelMaintenance(long hostId){
  HostVO host;
  host=_hostDao.findById(hostId);
  if (host == null || host.getRemoved() != null) {
    s_logger.warn(""String_Node_Str"" + hostId);
    return true;
  }
  if (host.getResourceState() != ResourceState.PrepareForMaintenance && host.getResourceState() != ResourceState.Maintenance && host.getResourceState() != ResourceState.ErrorInMaintenance) {
    throw new CloudRuntimeException(""String_Node_Str"" + host.getResourceState() + ""String_Node_Str""+ hostId);
  }
  _haMgr.cancelScheduledMigrations(host);
  List<VMInstanceVO> vms=_haMgr.findTakenMigrationWork();
  for (  VMInstanceVO vm : vms) {
    if (vm.getHostId() != null && vm.getHostId() == hostId) {
      s_logger.info(""String_Node_Str"" + vm);
      return false;
    }
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.AdminCancelMaintenance,_nodeId);
    _agentMgr.pullAgentOutMaintenance(hostId);
    if (host.getHypervisorType() == HypervisorType.KVM) {
      _hostDao.loadDetails(host);
      String password=host.getDetail(""String_Node_Str"");
      String username=host.getDetail(""String_Node_Str"");
      if (password == null || username == null) {
        s_logger.debug(""String_Node_Str"");
        return false;
      }
      com.trilead.ssh2.Connection connection=SSHCmdHelper.acquireAuthorizedConnection(host.getPrivateIpAddress(),22,username,password);
      if (connection == null) {
        s_logger.debug(""String_Node_Str"" + host.getPrivateIpAddress());
        return false;
      }
      try {
        SSHCmdHelper.sshExecuteCmdOneShot(connection,""String_Node_Str"");
      }
 catch (      sshException e) {
        return false;
      }
    }
    return true;
  }
 catch (  NoTransitionException e) {
    s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
    return false;
  }
}"
89205,"@Override public boolean authenticate(String username,String password,Long domainId,Map<String,Object[]> requestParameters){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + username);
  }
  UserAccount user=_userAccountDao.getUserAccount(username,domainId);
  if (user == null) {
    s_logger.debug(""String_Node_Str"" + username + ""String_Node_Str""+ domainId);
    return false;
  }
  String url=_configDao.getValue(LDAPParams.hostname.toString());
  if (url == null) {
    s_logger.debug(""String_Node_Str"");
    return false;
  }
  String port=_configDao.getValue(LDAPParams.port.toString());
  String queryFilter=_configDao.getValue(LDAPParams.queryfilter.toString());
  String searchBase=_configDao.getValue(LDAPParams.searchbase.toString());
  String useSSL=_configDao.getValue(LDAPParams.usessl.toString());
  String bindDN=_configDao.getValue(LDAPParams.dn.toString());
  String bindPasswd=_configDao.getValue(LDAPParams.passwd.toString());
  try {
    Hashtable<String,String> env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    env.put(Context.PROVIDER_URL,""String_Node_Str"" + url + ""String_Node_Str""+ port);
    if (new Boolean(useSSL) == Boolean.TRUE)     env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
    env.put(Context.SECURITY_PRINCIPAL,bindDN);
    env.put(Context.SECURITY_CREDENTIALS,bindPasswd);
    DirContext ctx=new InitialDirContext(env);
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",username);
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",user.getFirstname() + ""String_Node_Str"" + user.getLastname());
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",user.getEmail());
    SearchControls sc=new SearchControls();
    String[] searchFilter={""String_Node_Str""};
    sc.setReturningAttributes(new String[0]);
    sc.setReturningAttributes(searchFilter);
    sc.setSearchScope(SearchControls.SUBTREE_SCOPE);
    sc.setCountLimit(1);
    NamingEnumeration<SearchResult> answer=ctx.search(searchBase,queryFilter,sc);
    SearchResult sr=(SearchResult)answer.next();
    String cn=sr.getName();
    answer.close();
    ctx.close();
    s_logger.info(""String_Node_Str"" + cn);
    env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    env.put(Context.PROVIDER_URL,""String_Node_Str"" + url + ""String_Node_Str""+ port);
    if (new Boolean(useSSL) == Boolean.TRUE)     env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
    env.put(Context.SECURITY_PRINCIPAL,cn + ""String_Node_Str"" + searchBase);
    env.put(Context.SECURITY_CREDENTIALS,password);
    ctx=new InitialDirContext(env);
    ctx.close();
  }
 catch (  NamingException ne) {
    ne.printStackTrace();
    s_logger.warn(""String_Node_Str"" + ne.getMessage());
    return false;
  }
catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + e.getMessage());
    return false;
  }
  return true;
}","@Override public boolean authenticate(String username,String password,Long domainId,Map<String,Object[]> requestParameters){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + username);
  }
  UserAccount user=_userAccountDao.getUserAccount(username,domainId);
  if (user == null) {
    s_logger.debug(""String_Node_Str"" + username + ""String_Node_Str""+ domainId);
    return false;
  }
  String url=_configDao.getValue(LDAPParams.hostname.toString());
  if (url == null) {
    s_logger.debug(""String_Node_Str"");
    return false;
  }
  String port=_configDao.getValue(LDAPParams.port.toString());
  String queryFilter=_configDao.getValue(LDAPParams.queryfilter.toString());
  String searchBase=_configDao.getValue(LDAPParams.searchbase.toString());
  String useSSL=_configDao.getValue(LDAPParams.usessl.toString());
  String bindDN=_configDao.getValue(LDAPParams.dn.toString());
  String bindPasswd=_configDao.getValue(LDAPParams.passwd.toString());
  try {
    Hashtable<String,String> env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    String protocol=""String_Node_Str"";
    if (new Boolean(useSSL)) {
      env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
      protocol=""String_Node_Str"";
    }
    env.put(Context.PROVIDER_URL,protocol + url + ""String_Node_Str""+ port);
    env.put(Context.SECURITY_PRINCIPAL,bindDN);
    env.put(Context.SECURITY_CREDENTIALS,bindPasswd);
    DirContext ctx=new InitialDirContext(env);
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",username);
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",user.getFirstname() + ""String_Node_Str"" + user.getLastname());
    queryFilter=queryFilter.replaceAll(""String_Node_Str"",user.getEmail());
    SearchControls sc=new SearchControls();
    String[] searchFilter={""String_Node_Str""};
    sc.setReturningAttributes(new String[0]);
    sc.setReturningAttributes(searchFilter);
    sc.setSearchScope(SearchControls.SUBTREE_SCOPE);
    sc.setCountLimit(1);
    NamingEnumeration<SearchResult> answer=ctx.search(searchBase,queryFilter,sc);
    SearchResult sr=(SearchResult)answer.next();
    String cn=sr.getName();
    answer.close();
    ctx.close();
    s_logger.info(""String_Node_Str"" + cn);
    env=new Hashtable<String,String>(11);
    env.put(Context.INITIAL_CONTEXT_FACTORY,""String_Node_Str"");
    env.put(Context.PROVIDER_URL,""String_Node_Str"" + url + ""String_Node_Str""+ port);
    if (new Boolean(useSSL) == Boolean.TRUE)     env.put(Context.SECURITY_PROTOCOL,""String_Node_Str"");
    env.put(Context.SECURITY_PRINCIPAL,cn + ""String_Node_Str"" + searchBase);
    env.put(Context.SECURITY_CREDENTIALS,password);
    ctx=new InitialDirContext(env);
    ctx.close();
  }
 catch (  NamingException ne) {
    ne.printStackTrace();
    s_logger.warn(""String_Node_Str"" + ne.getMessage());
    return false;
  }
catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + e.getMessage());
    return false;
  }
  return true;
}"
89206,"public void uploadVmdkFile(String httpMethod,String urlString,String localFileName,long totalBytesUpdated,ActionDelegate progressUpdater) throws Exception {
  HttpURLConnection conn=getRawHTTPConnection(urlString);
  conn.setDoOutput(true);
  conn.setUseCaches(false);
  conn.setChunkedStreamingMode(_CHUNKSIZE);
  conn.setRequestMethod(httpMethod);
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  conn.setRequestProperty(""String_Node_Str"",Long.toString(new File(localFileName).length()));
  conn.connect();
  BufferedOutputStream bos=null;
  BufferedInputStream is=null;
  try {
    bos=new BufferedOutputStream(conn.getOutputStream());
    is=new BufferedInputStream(new FileInputStream(localFileName));
    int bytesAvailable=is.available();
    int bufferSize=Math.min(bytesAvailable,_CHUNKSIZE);
    byte[] buffer=new byte[bufferSize];
    while (true) {
      int bytesRead=is.read(buffer,0,bufferSize);
      if (bytesRead == -1) {
        break;
      }
      bos.write(buffer,0,bufferSize);
      totalBytesUpdated+=bytesRead;
      bos.flush();
      if (progressUpdater != null)       progressUpdater.action(new Long(totalBytesUpdated));
    }
    bos.flush();
  }
  finally {
    if (is != null)     is.close();
    if (bos != null)     bos.close();
    conn.disconnect();
  }
}","public void uploadVmdkFile(String httpMethod,String urlString,String localFileName,long totalBytesUpdated,ActionDelegate progressUpdater) throws Exception {
  HttpURLConnection conn=getRawHTTPConnection(urlString);
  conn.setDoOutput(true);
  conn.setUseCaches(false);
  conn.setChunkedStreamingMode(_CHUNKSIZE);
  conn.setRequestMethod(httpMethod);
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
  conn.setRequestProperty(""String_Node_Str"",Long.toString(new File(localFileName).length()));
  conn.connect();
  BufferedOutputStream bos=null;
  BufferedInputStream is=null;
  try {
    bos=new BufferedOutputStream(conn.getOutputStream());
    is=new BufferedInputStream(new FileInputStream(localFileName));
    int bufferSize=_CHUNKSIZE;
    byte[] buffer=new byte[bufferSize];
    while (true) {
      int bytesRead=is.read(buffer,0,bufferSize);
      if (bytesRead == -1) {
        break;
      }
      bos.write(buffer,0,bytesRead);
      totalBytesUpdated+=bytesRead;
      bos.flush();
      if (progressUpdater != null)       progressUpdater.action(new Long(totalBytesUpdated));
    }
    bos.flush();
  }
  finally {
    if (is != null)     is.close();
    if (bos != null)     bos.close();
    conn.disconnect();
  }
}"
89207,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NETWORK_CREATE,eventDescription=""String_Node_Str"") public Network createNetwork(CreateNetworkCmd cmd) throws InsufficientCapacityException, ConcurrentOperationException {
  Long networkOfferingId=cmd.getNetworkOfferingId();
  String gateway=cmd.getGateway();
  String startIP=cmd.getStartIp();
  String endIP=cmd.getEndIp();
  String netmask=cmd.getNetmask();
  String networkDomain=cmd.getNetworkDomain();
  String vlanId=cmd.getVlan();
  String name=cmd.getNetworkName();
  String displayText=cmd.getDisplayText();
  Long userId=UserContext.current().getCallerUserId();
  Account caller=UserContext.current().getCaller();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  Long zoneId=cmd.getZoneId();
  String aclTypeStr=cmd.getAclType();
  Long domainId=cmd.getDomainId();
  boolean isDomainSpecific=false;
  Boolean subdomainAccess=cmd.getSubdomainAccess();
  NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
  if (networkOffering == null || networkOffering.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkOfferingId);
  }
  PhysicalNetwork pNtwk=null;
  if (physicalNetworkId != null) {
    pNtwk=_physicalNetworkDao.findById(physicalNetworkId);
    if (pNtwk == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
    }
  }
  if (zoneId == null) {
    zoneId=pNtwk.getDataCenterId();
  }
  DataCenter zone=_dcDao.findById(zoneId);
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zone.getId());
  }
  ACLType aclType=null;
  if (aclTypeStr != null) {
    if (aclTypeStr.equalsIgnoreCase(ACLType.Account.toString())) {
      aclType=ACLType.Account;
    }
 else     if (aclTypeStr.equalsIgnoreCase(ACLType.Domain.toString())) {
      aclType=ACLType.Domain;
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (networkOffering.getGuestType() == GuestType.Isolated) {
      if (aclType != ACLType.Account) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ACLType.Account + ""String_Node_Str""+ Network.GuestType.Isolated);
      }
    }
 else     if (networkOffering.getGuestType() == GuestType.Shared) {
      if (aclType != ACLType.Domain) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ACLType.Domain + ""String_Node_Str""+ Network.GuestType.Shared);
      }
    }
  }
 else {
    if (networkOffering.getGuestType() == GuestType.Isolated) {
      aclType=ACLType.Account;
    }
 else     if (networkOffering.getGuestType() == GuestType.Shared) {
      aclType=ACLType.Domain;
    }
  }
  if (aclType == ACLType.Domain) {
    if (!_accountMgr.isAdmin(caller.getType())) {
      throw new PermissionDeniedException(""String_Node_Str"");
    }
    if (networkOffering.getGuestType() != GuestType.Shared) {
      throw new InvalidParameterValueException(""String_Node_Str"" + GuestType.Shared + ""String_Node_Str""+ ACLType.Domain);
    }
    if (domainId != null) {
      if (networkOffering.getTrafficType() != TrafficType.Guest || networkOffering.getGuestType() != Network.GuestType.Shared) {
        throw new InvalidParameterValueException(""String_Node_Str"" + TrafficType.Guest + ""String_Node_Str""+ Network.GuestType.Shared);
      }
      DomainVO domain=_domainDao.findById(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
      }
      _accountMgr.checkAccess(caller,domain);
    }
    isDomainSpecific=true;
  }
 else   if (subdomainAccess != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account owner=null;
  if ((cmd.getAccountName() != null && domainId != null) || cmd.getProjectId() != null) {
    owner=_accountMgr.finalizeOwner(caller,cmd.getAccountName(),domainId,cmd.getProjectId());
  }
 else {
    owner=caller;
  }
  UserContext.current().setAccountId(owner.getAccountId());
  if (startIP != null) {
    if (!NetUtils.isValidIp(startIP)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (endIP == null) {
      endIP=startIP;
    }
 else     if (!NetUtils.isValidIp(endIP)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (startIP != null && endIP != null) {
    if (!(gateway != null && netmask != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String cidr=null;
  if (gateway != null && netmask != null) {
    if (!NetUtils.isValidIp(gateway)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (!NetUtils.isValidNetmask(netmask)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    cidr=NetUtils.ipAndNetMaskToCidr(gateway,netmask);
  }
  if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL && (networkOffering.getTrafficType() != TrafficType.Guest || networkOffering.getGuestType() != Network.GuestType.Isolated && areServicesSupportedByNetworkOffering(networkOffering.getId(),Service.SourceNat))) {
    throw new InvalidParameterValueException(""String_Node_Str"" + TrafficType.Guest + ""String_Node_Str""+ Network.GuestType.Isolated+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
  }
  if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL && (cidr != null || vlanId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && cidr != null) {
    String[] cidrPair=cidr.split(""String_Node_Str"");
    int cidrSize=Integer.valueOf(cidrPair[1]);
    if (cidrSize < _cidrLimit) {
      throw new InvalidParameterValueException(""String_Node_Str"" + _cidrLimit);
    }
  }
  if (cidr != null && networkOfferingIsConfiguredForExternalNetworking(networkOfferingId)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  checkVirtualNetworkCidrOverlap(zoneId,cidr);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Long sharedDomainId=null;
  if (isDomainSpecific) {
    if (domainId != null) {
      sharedDomainId=domainId;
    }
 else {
      sharedDomainId=_domainMgr.getDomain(Domain.ROOT_DOMAIN).getId();
      subdomainAccess=true;
    }
  }
  if (aclType == ACLType.Domain) {
    owner=_accountMgr.getAccount(Account.ACCOUNT_ID_SYSTEM);
  }
  Network network=createGuestNetwork(networkOfferingId,name,displayText,gateway,cidr,vlanId,networkDomain,owner,false,sharedDomainId,pNtwk,zoneId,aclType,subdomainAccess);
  boolean createVlan=(startIP != null && endIP != null && zone.getNetworkType() == NetworkType.Advanced && ((network.getGuestType() == Network.GuestType.Shared) || (network.getGuestType() == GuestType.Isolated && !areServicesSupportedByNetworkOffering(networkOffering.getId(),Service.SourceNat))));
  if (caller.getType() == Account.ACCOUNT_TYPE_ADMIN && createVlan) {
    _configMgr.createVlanAndPublicIpRange(userId,pNtwk.getDataCenterId(),null,startIP,endIP,gateway,netmask,false,vlanId,null,network.getId(),physicalNetworkId);
  }
  txn.commit();
  return network;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NETWORK_CREATE,eventDescription=""String_Node_Str"") public Network createNetwork(CreateNetworkCmd cmd) throws InsufficientCapacityException, ConcurrentOperationException {
  Long networkOfferingId=cmd.getNetworkOfferingId();
  String gateway=cmd.getGateway();
  String startIP=cmd.getStartIp();
  String endIP=cmd.getEndIp();
  String netmask=cmd.getNetmask();
  String networkDomain=cmd.getNetworkDomain();
  String vlanId=cmd.getVlan();
  String name=cmd.getNetworkName();
  String displayText=cmd.getDisplayText();
  Long userId=UserContext.current().getCallerUserId();
  Account caller=UserContext.current().getCaller();
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  Long zoneId=cmd.getZoneId();
  String aclTypeStr=cmd.getAclType();
  Long domainId=cmd.getDomainId();
  boolean isDomainSpecific=false;
  Boolean subdomainAccess=cmd.getSubdomainAccess();
  NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
  if (networkOffering == null || networkOffering.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkOfferingId);
  }
  PhysicalNetwork pNtwk=null;
  if (physicalNetworkId != null) {
    pNtwk=_physicalNetworkDao.findById(physicalNetworkId);
    if (pNtwk == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId);
    }
  }
  if (zoneId == null) {
    zoneId=pNtwk.getDataCenterId();
  }
  DataCenter zone=_dcDao.findById(zoneId);
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zone.getId());
  }
  ACLType aclType=null;
  if (aclTypeStr != null) {
    if (aclTypeStr.equalsIgnoreCase(ACLType.Account.toString())) {
      aclType=ACLType.Account;
    }
 else     if (aclTypeStr.equalsIgnoreCase(ACLType.Domain.toString())) {
      aclType=ACLType.Domain;
    }
 else {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (networkOffering.getGuestType() == GuestType.Isolated) {
      if (aclType != ACLType.Account) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ACLType.Account + ""String_Node_Str""+ Network.GuestType.Isolated);
      }
    }
 else     if (networkOffering.getGuestType() == GuestType.Shared) {
      if (aclType != ACLType.Domain) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ACLType.Domain + ""String_Node_Str""+ Network.GuestType.Shared);
      }
    }
  }
 else {
    if (networkOffering.getGuestType() == GuestType.Isolated) {
      aclType=ACLType.Account;
    }
 else     if (networkOffering.getGuestType() == GuestType.Shared) {
      aclType=ACLType.Domain;
    }
  }
  if (aclType == ACLType.Domain) {
    if (!_accountMgr.isAdmin(caller.getType())) {
      throw new PermissionDeniedException(""String_Node_Str"");
    }
    if (networkOffering.getGuestType() != GuestType.Shared) {
      throw new InvalidParameterValueException(""String_Node_Str"" + GuestType.Shared + ""String_Node_Str""+ ACLType.Domain);
    }
    if (domainId != null) {
      if (networkOffering.getTrafficType() != TrafficType.Guest || networkOffering.getGuestType() != Network.GuestType.Shared) {
        throw new InvalidParameterValueException(""String_Node_Str"" + TrafficType.Guest + ""String_Node_Str""+ Network.GuestType.Shared);
      }
      DomainVO domain=_domainDao.findById(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
      }
      _accountMgr.checkAccess(caller,domain);
    }
    isDomainSpecific=true;
  }
 else   if (subdomainAccess != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account owner=null;
  if ((cmd.getAccountName() != null && domainId != null) || cmd.getProjectId() != null) {
    owner=_accountMgr.finalizeOwner(caller,cmd.getAccountName(),domainId,cmd.getProjectId());
  }
 else {
    owner=caller;
  }
  UserContext.current().setAccountId(owner.getAccountId());
  if (startIP != null) {
    if (!NetUtils.isValidIp(startIP)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (endIP == null) {
      endIP=startIP;
    }
 else     if (!NetUtils.isValidIp(endIP)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (startIP != null && endIP != null) {
    if (!(gateway != null && netmask != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String cidr=null;
  if (gateway != null && netmask != null) {
    if (!NetUtils.isValidIp(gateway)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (!NetUtils.isValidNetmask(netmask)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    cidr=NetUtils.ipAndNetMaskToCidr(gateway,netmask);
  }
  if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL && (networkOffering.getTrafficType() != TrafficType.Guest || networkOffering.getGuestType() != Network.GuestType.Isolated && areServicesSupportedByNetworkOffering(networkOffering.getId(),Service.SourceNat))) {
    throw new InvalidParameterValueException(""String_Node_Str"" + TrafficType.Guest + ""String_Node_Str""+ Network.GuestType.Isolated+ ""String_Node_Str""+ Service.SourceNat.getName()+ ""String_Node_Str"");
  }
  if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL && (cidr != null || vlanId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && cidr != null) {
    String[] cidrPair=cidr.split(""String_Node_Str"");
    int cidrSize=Integer.valueOf(cidrPair[1]);
    if (cidrSize < _cidrLimit) {
      throw new InvalidParameterValueException(""String_Node_Str"" + _cidrLimit);
    }
  }
  if (cidr != null && networkOfferingIsConfiguredForExternalNetworking(networkOfferingId)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cidr != null) {
    checkVirtualNetworkCidrOverlap(zoneId,cidr);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Long sharedDomainId=null;
  if (isDomainSpecific) {
    if (domainId != null) {
      sharedDomainId=domainId;
    }
 else {
      sharedDomainId=_domainMgr.getDomain(Domain.ROOT_DOMAIN).getId();
      subdomainAccess=true;
    }
  }
  if (aclType == ACLType.Domain) {
    owner=_accountMgr.getAccount(Account.ACCOUNT_ID_SYSTEM);
  }
  Network network=createGuestNetwork(networkOfferingId,name,displayText,gateway,cidr,vlanId,networkDomain,owner,false,sharedDomainId,pNtwk,zoneId,aclType,subdomainAccess);
  boolean createVlan=(startIP != null && endIP != null && zone.getNetworkType() == NetworkType.Advanced && ((network.getGuestType() == Network.GuestType.Shared) || (network.getGuestType() == GuestType.Isolated && !areServicesSupportedByNetworkOffering(networkOffering.getId(),Service.SourceNat))));
  if (caller.getType() == Account.ACCOUNT_TYPE_ADMIN && createVlan) {
    _configMgr.createVlanAndPublicIpRange(userId,pNtwk.getDataCenterId(),null,startIP,endIP,gateway,netmask,false,vlanId,null,network.getId(),physicalNetworkId);
  }
  txn.commit();
  return network;
}"
89208,"@Override public void checkVirtualNetworkCidrOverlap(Long zoneId,String cidr){
  if (zoneId == null) {
    return;
  }
  List<NetworkVO> networks=_networksDao.listByZone((long)zoneId);
  Map<Long,String> networkToCidr=new HashMap<Long,String>();
  for (  NetworkVO network : networks) {
    if (network.getGuestType() != GuestType.Isolated) {
      continue;
    }
    networkToCidr.put(network.getId(),network.getCidr());
  }
  if (networkToCidr == null || networkToCidr.isEmpty()) {
    return;
  }
  String currCidrAddress=getCidrAddress(cidr);
  int currCidrSize=getCidrSize(cidr);
  for (  long networkId : networkToCidr.keySet()) {
    String ntwkCidr=networkToCidr.get(networkId);
    String ntwkCidrAddress=getCidrAddress(ntwkCidr);
    int ntwkCidrSize=getCidrSize(ntwkCidr);
    long cidrSizeToUse=currCidrSize < ntwkCidrSize ? currCidrSize : ntwkCidrSize;
    String ntwkCidrSubnet=NetUtils.getCidrSubNet(getCidrAddress(ntwkCidr),cidrSizeToUse);
    String cidrSubnet=NetUtils.getCidrSubNet(currCidrAddress,cidrSizeToUse);
    if (cidrSubnet.equals(ntwkCidrSubnet)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
    }
  }
}","@Override public void checkVirtualNetworkCidrOverlap(Long zoneId,String cidr){
  if (zoneId == null) {
    return;
  }
  if (cidr == null) {
    return;
  }
  List<NetworkVO> networks=_networksDao.listByZone((long)zoneId);
  Map<Long,String> networkToCidr=new HashMap<Long,String>();
  for (  NetworkVO network : networks) {
    if (network.getGuestType() != GuestType.Isolated) {
      continue;
    }
    networkToCidr.put(network.getId(),network.getCidr());
  }
  if (networkToCidr == null || networkToCidr.isEmpty()) {
    return;
  }
  String currCidrAddress=getCidrAddress(cidr);
  int currCidrSize=getCidrSize(cidr);
  for (  long networkId : networkToCidr.keySet()) {
    String ntwkCidr=networkToCidr.get(networkId);
    String ntwkCidrAddress=getCidrAddress(ntwkCidr);
    int ntwkCidrSize=getCidrSize(ntwkCidr);
    long cidrSizeToUse=currCidrSize < ntwkCidrSize ? currCidrSize : ntwkCidrSize;
    String ntwkCidrSubnet=NetUtils.getCidrSubNet(getCidrAddress(ntwkCidr),cidrSizeToUse);
    String cidrSubnet=NetUtils.getCidrSubNet(currCidrAddress,cidrSizeToUse);
    if (cidrSubnet.equals(ntwkCidrSubnet)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
    }
  }
}"
89209,"@Override public boolean enableStaticNat(long ipId,long vmId) throws NetworkRuleConflictException {
  Account caller=UserContext.current().getCaller();
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
  }
  IPAddressVO ipAddress=_ipAddressDao.findById(ipId);
  if (ipAddress == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  checkIpAndUserVm(ipAddress,vm,caller);
  Long networkId=ipAddress.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  Nic guestNic=_networkMgr.getNicInNetwork(vmId,networkId);
  if (guestNic == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Network network=_networkMgr.getNetwork(networkId);
  if (!_networkMgr.areServicesSupportedInNetwork(network.getId(),Service.Firewall)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  if (ipAddress.isSourceNat()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  if (!ipAddress.isOneToOneNat()) {
    List<FirewallRuleVO> portForwardingRules=_firewallDao.listByIpAndPurposeAndNotRevoked(ipId,Purpose.PortForwarding);
    if (portForwardingRules != null && !portForwardingRules.isEmpty()) {
      throw new NetworkRuleConflictException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
    List<FirewallRuleVO> loadBalancingRules=_firewallDao.listByIpAndPurposeAndNotRevoked(ipId,Purpose.LoadBalancing);
    if (loadBalancingRules != null && !loadBalancingRules.isEmpty()) {
      throw new NetworkRuleConflictException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
  }
 else {
    if (ipAddress.getAssociatedWithVmId() != null && ipAddress.getAssociatedWithVmId().longValue() != vmId) {
      throw new NetworkRuleConflictException(""String_Node_Str"" + ipId + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
    }
  }
  IPAddressVO ip=_ipAddressDao.findByAssociatedVmId(vmId);
  if (ip != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str""+ vmId+ ""String_Node_Str""+ ip.getId());
  }
  _networkMgr.checkIpForService(ip,Service.StaticNat);
  ipAddress.setOneToOneNat(true);
  ipAddress.setAssociatedWithVmId(vmId);
  if (_ipAddressDao.update(ipAddress.getId(),ipAddress)) {
    s_logger.trace(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
    if (applyStaticNatForIp(ipId,false,caller,false)) {
      return true;
    }
 else {
      ipAddress.setOneToOneNat(false);
      ipAddress.setAssociatedWithVmId(null);
      _ipAddressDao.update(ipAddress.getId(),ipAddress);
      s_logger.warn(""String_Node_Str"" + ipId + ""String_Node_Str"");
      return false;
    }
  }
 else {
    s_logger.warn(""String_Node_Str"" + ipAddress + ""String_Node_Str"");
    return false;
  }
}","@Override public boolean enableStaticNat(long ipId,long vmId) throws NetworkRuleConflictException {
  Account caller=UserContext.current().getCaller();
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
  }
  IPAddressVO ipAddress=_ipAddressDao.findById(ipId);
  if (ipAddress == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  checkIpAndUserVm(ipAddress,vm,caller);
  Long networkId=ipAddress.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  Nic guestNic=_networkMgr.getNicInNetwork(vmId,networkId);
  if (guestNic == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Network network=_networkMgr.getNetwork(networkId);
  if (!_networkMgr.areServicesSupportedInNetwork(network.getId(),Service.Firewall)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  if (ipAddress.isSourceNat()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  if (!ipAddress.isOneToOneNat()) {
    List<FirewallRuleVO> portForwardingRules=_firewallDao.listByIpAndPurposeAndNotRevoked(ipId,Purpose.PortForwarding);
    if (portForwardingRules != null && !portForwardingRules.isEmpty()) {
      throw new NetworkRuleConflictException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
    List<FirewallRuleVO> loadBalancingRules=_firewallDao.listByIpAndPurposeAndNotRevoked(ipId,Purpose.LoadBalancing);
    if (loadBalancingRules != null && !loadBalancingRules.isEmpty()) {
      throw new NetworkRuleConflictException(""String_Node_Str"" + ipId + ""String_Node_Str"");
    }
  }
 else {
    if (ipAddress.getAssociatedWithVmId() != null && ipAddress.getAssociatedWithVmId().longValue() != vmId) {
      throw new NetworkRuleConflictException(""String_Node_Str"" + ipId + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
    }
  }
  IPAddressVO ip=_ipAddressDao.findByAssociatedVmId(vmId);
  if (ip != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str""+ vmId+ ""String_Node_Str""+ ip.getId());
  }
  _networkMgr.checkIpForService(ipAddress,Service.StaticNat);
  ipAddress.setOneToOneNat(true);
  ipAddress.setAssociatedWithVmId(vmId);
  if (_ipAddressDao.update(ipAddress.getId(),ipAddress)) {
    s_logger.trace(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
    if (applyStaticNatForIp(ipId,false,caller,false)) {
      return true;
    }
 else {
      ipAddress.setOneToOneNat(false);
      ipAddress.setAssociatedWithVmId(null);
      _ipAddressDao.update(ipAddress.getId(),ipAddress);
      s_logger.warn(""String_Node_Str"" + ipId + ""String_Node_Str"");
      return false;
    }
  }
 else {
    s_logger.warn(""String_Node_Str"" + ipAddress + ""String_Node_Str"");
    return false;
  }
}"
89210,"public Integer getPageSize(){
  if (pageSize != null && MAX_PAGESIZE != null && pageSize.longValue() > MAX_PAGESIZE.longValue()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + MAX_PAGESIZE.longValue());
  }
  if (pageSize != null && pageSize.longValue() == -1 && page != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  return pageSize;
}","public Integer getPageSize(){
  if (pageSize != null && MAX_PAGESIZE != null && pageSize.longValue() > MAX_PAGESIZE.longValue()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + MAX_PAGESIZE.longValue());
  }
  if (pageSize != null && pageSize.longValue() == PAGESIZE_UNLIMITED && page != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  return pageSize;
}"
89211,"static void configure(){
  if (_configService.getDefaultPageSize().longValue() != -1) {
    MAX_PAGESIZE=_configService.getDefaultPageSize();
  }
}","static void configure(){
  if (_configService.getDefaultPageSize().longValue() != PAGESIZE_UNLIMITED) {
    MAX_PAGESIZE=_configService.getDefaultPageSize();
  }
}"
89212,"public Long getPageSizeVal(){
  Long defaultPageSize=MAX_PAGESIZE;
  Integer pageSizeInt=getPageSize();
  if (pageSizeInt != null && pageSizeInt.intValue() != -1) {
    defaultPageSize=pageSizeInt.longValue();
  }
  return defaultPageSize;
}","public Long getPageSizeVal(){
  Long defaultPageSize=MAX_PAGESIZE;
  Integer pageSizeInt=getPageSize();
  if (pageSizeInt != null) {
    if (pageSizeInt.longValue() == PAGESIZE_UNLIMITED) {
      defaultPageSize=null;
    }
 else {
      defaultPageSize=pageSizeInt.longValue();
    }
  }
  return defaultPageSize;
}"
89213,"public static void setupParameters(BaseCmd cmd,Map<String,String> params){
  Map<String,Object> unpackedParams=cmd.unpackParams(params);
  if (cmd instanceof BaseListCmd) {
    if ((unpackedParams.get(ApiConstants.PAGE) == null) && (unpackedParams.get(ApiConstants.PAGE_SIZE) != null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
 else     if ((unpackedParams.get(ApiConstants.PAGE_SIZE) == null) && (unpackedParams.get(ApiConstants.PAGE) != null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
  }
  Field[] fields=cmd.getClass().getDeclaredFields();
  Class<?> superClass=cmd.getClass().getSuperclass();
  while (BaseCmd.class.isAssignableFrom(superClass)) {
    Field[] superClassFields=superClass.getDeclaredFields();
    if (superClassFields != null) {
      Field[] tmpFields=new Field[fields.length + superClassFields.length];
      System.arraycopy(fields,0,tmpFields,0,fields.length);
      System.arraycopy(superClassFields,0,tmpFields,fields.length,superClassFields.length);
      fields=tmpFields;
    }
    superClass=superClass.getSuperclass();
  }
  for (  Field field : fields) {
    Parameter parameterAnnotation=field.getAnnotation(Parameter.class);
    if ((parameterAnnotation == null) || !parameterAnnotation.expose()) {
      continue;
    }
    IdentityMapper identityMapper=field.getAnnotation(IdentityMapper.class);
    Object paramObj=unpackedParams.get(parameterAnnotation.name());
    if (paramObj == null) {
      if (parameterAnnotation.required()) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ parameterAnnotation.name());
      }
      continue;
    }
    try {
      setFieldValue(field,cmd,paramObj,parameterAnnotation,identityMapper);
    }
 catch (    IllegalArgumentException argEx) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ paramObj+ ""String_Node_Str""+ parameterAnnotation.name());
      }
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ paramObj+ ""String_Node_Str""+ parameterAnnotation.name());
    }
catch (    ParseException parseEx) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + paramObj + ""String_Node_Str""+ cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8));
      }
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + paramObj + ""String_Node_Str""+ cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8)+ ""String_Node_Str"");
    }
catch (    InvalidParameterValueException invEx) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ invEx.getMessage());
    }
catch (    CloudRuntimeException cloudEx) {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8));
    }
  }
}","public static void setupParameters(BaseCmd cmd,Map<String,String> params){
  Map<String,Object> unpackedParams=cmd.unpackParams(params);
  if (cmd instanceof BaseListCmd) {
    Object pageSizeObj=unpackedParams.get(ApiConstants.PAGE_SIZE);
    Long pageSize=null;
    if (pageSizeObj != null) {
      pageSize=Long.valueOf((String)pageSizeObj);
    }
    if ((unpackedParams.get(ApiConstants.PAGE) == null) && (pageSize != null && pageSize != BaseListCmd.PAGESIZE_UNLIMITED)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
 else     if (pageSize == null && (unpackedParams.get(ApiConstants.PAGE) != null)) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
    }
  }
  Field[] fields=cmd.getClass().getDeclaredFields();
  Class<?> superClass=cmd.getClass().getSuperclass();
  while (BaseCmd.class.isAssignableFrom(superClass)) {
    Field[] superClassFields=superClass.getDeclaredFields();
    if (superClassFields != null) {
      Field[] tmpFields=new Field[fields.length + superClassFields.length];
      System.arraycopy(fields,0,tmpFields,0,fields.length);
      System.arraycopy(superClassFields,0,tmpFields,fields.length,superClassFields.length);
      fields=tmpFields;
    }
    superClass=superClass.getSuperclass();
  }
  for (  Field field : fields) {
    Parameter parameterAnnotation=field.getAnnotation(Parameter.class);
    if ((parameterAnnotation == null) || !parameterAnnotation.expose()) {
      continue;
    }
    IdentityMapper identityMapper=field.getAnnotation(IdentityMapper.class);
    Object paramObj=unpackedParams.get(parameterAnnotation.name());
    if (paramObj == null) {
      if (parameterAnnotation.required()) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ parameterAnnotation.name());
      }
      continue;
    }
    try {
      setFieldValue(field,cmd,paramObj,parameterAnnotation,identityMapper);
    }
 catch (    IllegalArgumentException argEx) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + cmd.getCommandName() + ""String_Node_Str""+ paramObj+ ""String_Node_Str""+ parameterAnnotation.name());
      }
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ paramObj+ ""String_Node_Str""+ parameterAnnotation.name());
    }
catch (    ParseException parseEx) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + paramObj + ""String_Node_Str""+ cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8));
      }
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + paramObj + ""String_Node_Str""+ cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8)+ ""String_Node_Str"");
    }
catch (    InvalidParameterValueException invEx) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8) + ""String_Node_Str""+ invEx.getMessage());
    }
catch (    CloudRuntimeException cloudEx) {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + cmd.getCommandName().substring(0,cmd.getCommandName().length() - 8));
    }
  }
}"
89214,"@Override public String toString(){
  StringBuilder storageVolBuilder=new StringBuilder();
  storageVolBuilder.append(""String_Node_Str"");
  storageVolBuilder.append(""String_Node_Str"" + _volName + ""String_Node_Str"");
  if (_volSize != null) {
    storageVolBuilder.append(""String_Node_Str"" + _volSize + ""String_Node_Str"");
  }
  storageVolBuilder.append(""String_Node_Str"");
  storageVolBuilder.append(""String_Node_Str"" + _volFormat + ""String_Node_Str"");
  storageVolBuilder.append(""String_Node_Str"");
  if (_backingPath != null) {
    storageVolBuilder.append(""String_Node_Str"");
    storageVolBuilder.append(""String_Node_Str"" + _backingPath + ""String_Node_Str"");
    storageVolBuilder.append(""String_Node_Str"" + _backingFormat + ""String_Node_Str"");
    storageVolBuilder.append(""String_Node_Str"");
  }
  storageVolBuilder.append(""String_Node_Str"");
  return storageVolBuilder.toString();
}","@Override public String toString(){
  StringBuilder storageVolBuilder=new StringBuilder();
  storageVolBuilder.append(""String_Node_Str"");
  storageVolBuilder.append(""String_Node_Str"" + _volName + ""String_Node_Str"");
  if (_volSize != null) {
    storageVolBuilder.append(""String_Node_Str"" + _volSize + ""String_Node_Str"");
  }
  storageVolBuilder.append(""String_Node_Str"");
  storageVolBuilder.append(""String_Node_Str"" + _volFormat + ""String_Node_Str"");
  storageVolBuilder.append(""String_Node_Str"");
  storageVolBuilder.append(""String_Node_Str"");
  storageVolBuilder.append(""String_Node_Str"");
  storageVolBuilder.append(""String_Node_Str"");
  if (_backingPath != null) {
    storageVolBuilder.append(""String_Node_Str"");
    storageVolBuilder.append(""String_Node_Str"" + _backingPath + ""String_Node_Str"");
    storageVolBuilder.append(""String_Node_Str"" + _backingFormat + ""String_Node_Str"");
    storageVolBuilder.append(""String_Node_Str"");
  }
  storageVolBuilder.append(""String_Node_Str"");
  return storageVolBuilder.toString();
}"
89215,"@Override public String getProviderForServiceInNetwork(long networkId,Service service){
  SearchCriteria<NetworkServiceMapVO> sc=AllFieldsSearch.create();
  sc.setParameters(""String_Node_Str"",networkId);
  sc.setParameters(""String_Node_Str"",service.getName());
  NetworkServiceMapVO ntwkSvc=findOneBy(sc);
  if (ntwkSvc == null) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service + ""String_Node_Str""+ networkId);
  }
  return ntwkSvc.getProvider();
}","@Override public String getProviderForServiceInNetwork(long networkId,Service service){
  SearchCriteria<NetworkServiceMapVO> sc=AllFieldsSearch.create();
  sc.setParameters(""String_Node_Str"",networkId);
  sc.setParameters(""String_Node_Str"",service.getName());
  NetworkServiceMapVO ntwkSvc=findOneBy(sc);
  if (ntwkSvc == null) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ networkId);
  }
  return ntwkSvc.getProvider();
}"
89216,"@Override public ExtractResponse createExtractResponse(Long uploadId,Long id,Long zoneId,Long accountId,String mode){
  UploadVO uploadInfo=ApiDBUtils.findUploadById(uploadId);
  ExtractResponse response=new ExtractResponse();
  response.setObjectName(""String_Node_Str"");
  response.setId(id);
  response.setName(ApiDBUtils.findTemplateById(id).getName());
  response.setZoneId(zoneId);
  response.setZoneName(ApiDBUtils.findZoneById(zoneId).getName());
  response.setMode(mode);
  response.setUploadId(uploadId);
  response.setState(uploadInfo.getUploadState().toString());
  response.setAccountId(accountId);
  response.setUrl(uploadInfo.getUploadUrl());
  return response;
}","@Override public ExtractResponse createExtractResponse(Long uploadId,Long id,Long zoneId,Long accountId,String mode){
  UploadVO uploadInfo=ApiDBUtils.findUploadById(uploadId);
  ExtractResponse response=new ExtractResponse();
  response.setObjectName(""String_Node_Str"");
  response.setId(id);
  response.setName(ApiDBUtils.findTemplateById(id).getName());
  if (zoneId != null) {
    response.setZoneId(zoneId);
    response.setZoneName(ApiDBUtils.findZoneById(zoneId).getName());
  }
  response.setMode(mode);
  response.setUploadId(uploadId);
  response.setState(uploadInfo.getUploadState().toString());
  response.setAccountId(accountId);
  response.setUrl(uploadInfo.getUploadUrl());
  return response;
}"
89217,"private Long extract(Account caller,Long templateId,String url,Long zoneId,String mode,Long eventId,boolean isISO,AsyncJobVO job,AsyncJobManager mgr){
  String desc=Upload.Type.TEMPLATE.toString();
  if (isISO) {
    desc=Upload.Type.ISO.toString();
  }
  eventId=eventId == null ? 0 : eventId;
  if (!_accountMgr.isRootAdmin(caller.getType()) && _disableExtraction) {
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ templateId);
  }
  if (template.getTemplateType() == Storage.TemplateType.SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
 else   if (template.getTemplateType() == Storage.TemplateType.PERHOST) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
  if (isISO) {
    if (template.getFormat() != ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (template.getFormat() == ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (_dcDao.findById(zoneId) == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!_accountMgr.isRootAdmin(caller.getType()) && !template.isExtractable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + templateId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,AccessType.ModifyEntry,template);
  List<HostVO> sservers=_storageMgr.getSecondaryStorageHosts(zoneId);
  VMTemplateHostVO tmpltHostRef=null;
  if (sservers != null) {
    for (    HostVO secondaryStorageHost : sservers) {
      tmpltHostRef=_tmpltHostDao.findByHostTemplate(secondaryStorageHost.getId(),templateId);
      if (tmpltHostRef != null) {
        if (tmpltHostRef.getDownloadState() != com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
          tmpltHostRef=null;
        }
 else {
          break;
        }
      }
    }
  }
  if (tmpltHostRef == null && _swiftMgr.isSwiftEnabled()) {
    SwiftTO swift=_swiftMgr.getSwiftTO(templateId);
    if (swift != null && sservers != null) {
      for (      HostVO secondaryStorageHost : sservers) {
        downloadTemplateFromSwiftToSecondaryStorageCommand cmd=new downloadTemplateFromSwiftToSecondaryStorageCommand(swift,secondaryStorageHost.getName(),zoneId,template.getAccountId(),templateId,_primaryStorageDownloadWait);
        try {
          Answer answer=_agentMgr.sendToSSVM(zoneId,cmd);
          if (answer == null || !answer.getResult()) {
            String errMsg=""String_Node_Str"" + (answer == null ? ""String_Node_Str"" : answer.getDetails());
            s_logger.warn(errMsg);
            throw new CloudRuntimeException(errMsg);
          }
          tmpltHostRef=_tmpltHostDao.findByHostTemplate(secondaryStorageHost.getId(),templateId);
          if (tmpltHostRef != null) {
            if (tmpltHostRef.getDownloadState() != com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
              tmpltHostRef=null;
            }
 else {
              break;
            }
          }
        }
 catch (        Exception e) {
          String errMsg=""String_Node_Str"" + e.toString();
          s_logger.warn(errMsg);
          throw new CloudRuntimeException(errMsg);
        }
      }
    }
  }
  if (tmpltHostRef == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str"");
  }
  Upload.Mode extractMode;
  if (mode == null || (!mode.equalsIgnoreCase(Upload.Mode.FTP_UPLOAD.toString()) && !mode.equalsIgnoreCase(Upload.Mode.HTTP_DOWNLOAD.toString()))) {
    throw new InvalidParameterValueException(""String_Node_Str"" + Upload.Mode.FTP_UPLOAD + ""String_Node_Str""+ Upload.Mode.HTTP_DOWNLOAD);
  }
 else {
    extractMode=mode.equalsIgnoreCase(Upload.Mode.FTP_UPLOAD.toString()) ? Upload.Mode.FTP_UPLOAD : Upload.Mode.HTTP_DOWNLOAD;
  }
  if (extractMode == Upload.Mode.FTP_UPLOAD) {
    URI uri=null;
    try {
      uri=new URI(url);
      if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase(""String_Node_Str""))) {
        throw new InvalidParameterValueException(""String_Node_Str"" + url);
      }
    }
 catch (    Exception ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + url);
    }
    String host=uri.getHost();
    try {
      InetAddress hostAddr=InetAddress.getByName(host);
      if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (hostAddr instanceof Inet6Address) {
        throw new InvalidParameterValueException(""String_Node_Str"" + hostAddr.getHostAddress() + ""String_Node_Str"");
      }
    }
 catch (    UnknownHostException uhe) {
      throw new InvalidParameterValueException(""String_Node_Str"" + host);
    }
    if (_uploadMonitor.isTypeUploadInProgress(templateId,isISO ? Type.ISO : Type.TEMPLATE)) {
      throw new IllegalArgumentException(template.getName() + ""String_Node_Str"");
    }
    return _uploadMonitor.extractTemplate(template,url,tmpltHostRef,zoneId,eventId,job.getId(),mgr);
  }
  UploadVO vo=_uploadMonitor.createEntityDownloadURL(template,tmpltHostRef,zoneId,eventId);
  if (vo != null) {
    return vo.getId();
  }
 else {
    return null;
  }
}","private Long extract(Account caller,Long templateId,String url,Long zoneId,String mode,Long eventId,boolean isISO,AsyncJobVO job,AsyncJobManager mgr){
  String desc=Upload.Type.TEMPLATE.toString();
  if (isISO) {
    desc=Upload.Type.ISO.toString();
  }
  eventId=eventId == null ? 0 : eventId;
  if (!_accountMgr.isRootAdmin(caller.getType()) && _disableExtraction) {
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ templateId);
  }
  if (template.getTemplateType() == Storage.TemplateType.SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
 else   if (template.getTemplateType() == Storage.TemplateType.PERHOST) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
  if (isISO) {
    if (template.getFormat() != ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (template.getFormat() == ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (zoneId == null) {
    zoneId=_swiftMgr.chooseZoneForTmpltExtract(templateId);
  }
  if (_dcDao.findById(zoneId) == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!_accountMgr.isRootAdmin(caller.getType()) && !template.isExtractable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + templateId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,AccessType.ModifyEntry,template);
  List<HostVO> sservers=_storageMgr.getSecondaryStorageHosts(zoneId);
  VMTemplateHostVO tmpltHostRef=null;
  if (sservers != null) {
    for (    HostVO secondaryStorageHost : sservers) {
      tmpltHostRef=_tmpltHostDao.findByHostTemplate(secondaryStorageHost.getId(),templateId);
      if (tmpltHostRef != null) {
        if (tmpltHostRef.getDownloadState() != com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
          tmpltHostRef=null;
        }
 else {
          break;
        }
      }
    }
  }
  if (tmpltHostRef == null && _swiftMgr.isSwiftEnabled()) {
    SwiftTO swift=_swiftMgr.getSwiftTO(templateId);
    if (swift != null && sservers != null) {
      for (      HostVO secondaryStorageHost : sservers) {
        downloadTemplateFromSwiftToSecondaryStorageCommand cmd=new downloadTemplateFromSwiftToSecondaryStorageCommand(swift,secondaryStorageHost.getName(),zoneId,template.getAccountId(),templateId,_primaryStorageDownloadWait);
        try {
          Answer answer=_agentMgr.sendToSSVM(zoneId,cmd);
          if (answer == null || !answer.getResult()) {
            String errMsg=""String_Node_Str"" + (answer == null ? ""String_Node_Str"" : answer.getDetails());
            s_logger.warn(errMsg);
            throw new CloudRuntimeException(errMsg);
          }
          tmpltHostRef=_tmpltHostDao.findByHostTemplate(secondaryStorageHost.getId(),templateId);
          if (tmpltHostRef != null) {
            if (tmpltHostRef.getDownloadState() != com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
              tmpltHostRef=null;
            }
 else {
              break;
            }
          }
        }
 catch (        Exception e) {
          String errMsg=""String_Node_Str"" + e.toString();
          s_logger.warn(errMsg);
          throw new CloudRuntimeException(errMsg);
        }
      }
    }
  }
  if (tmpltHostRef == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str"");
  }
  Upload.Mode extractMode;
  if (mode == null || (!mode.equalsIgnoreCase(Upload.Mode.FTP_UPLOAD.toString()) && !mode.equalsIgnoreCase(Upload.Mode.HTTP_DOWNLOAD.toString()))) {
    throw new InvalidParameterValueException(""String_Node_Str"" + Upload.Mode.FTP_UPLOAD + ""String_Node_Str""+ Upload.Mode.HTTP_DOWNLOAD);
  }
 else {
    extractMode=mode.equalsIgnoreCase(Upload.Mode.FTP_UPLOAD.toString()) ? Upload.Mode.FTP_UPLOAD : Upload.Mode.HTTP_DOWNLOAD;
  }
  if (extractMode == Upload.Mode.FTP_UPLOAD) {
    URI uri=null;
    try {
      uri=new URI(url);
      if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase(""String_Node_Str""))) {
        throw new InvalidParameterValueException(""String_Node_Str"" + url);
      }
    }
 catch (    Exception ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + url);
    }
    String host=uri.getHost();
    try {
      InetAddress hostAddr=InetAddress.getByName(host);
      if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (hostAddr instanceof Inet6Address) {
        throw new InvalidParameterValueException(""String_Node_Str"" + hostAddr.getHostAddress() + ""String_Node_Str"");
      }
    }
 catch (    UnknownHostException uhe) {
      throw new InvalidParameterValueException(""String_Node_Str"" + host);
    }
    if (_uploadMonitor.isTypeUploadInProgress(templateId,isISO ? Type.ISO : Type.TEMPLATE)) {
      throw new IllegalArgumentException(template.getName() + ""String_Node_Str"");
    }
    return _uploadMonitor.extractTemplate(template,url,tmpltHostRef,zoneId,eventId,job.getId(),mgr);
  }
  UploadVO vo=_uploadMonitor.createEntityDownloadURL(template,tmpltHostRef,zoneId,eventId);
  if (vo != null) {
    return vo.getId();
  }
 else {
    return null;
  }
}"
89218,"@Override public Map<Capability,String> getNetworkServiceCapabilities(long networkId,Service service){
  if (!areServicesSupportedInNetwork(networkId,service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ networkId);
  }
  Map<Capability,String> serviceCapabilities=new HashMap<Capability,String>();
  String provider=_ntwkSrvcDao.getProviderForServiceInNetwork(networkId,service);
  NetworkElement element=getElementImplementingProvider(provider);
  if (element != null) {
    Map<Service,Map<Capability,String>> elementCapabilities=element.getCapabilities();
    ;
    if (elementCapabilities == null || elementCapabilities.get(service) == null) {
      throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ element.getName()+ ""String_Node_Str""+ provider);
    }
    serviceCapabilities=elementCapabilities.get(service);
  }
  return serviceCapabilities;
}","@Override public Map<Capability,String> getNetworkServiceCapabilities(long networkId,Service service){
  if (!areServicesSupportedInNetwork(networkId,service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ networkId);
  }
  Map<Capability,String> serviceCapabilities=new HashMap<Capability,String>();
  String provider=_ntwkSrvcDao.getProviderForServiceInNetwork(networkId,service);
  NetworkElement element=getElementImplementingProvider(provider);
  if (element != null) {
    Map<Service,Map<Capability,String>> elementCapabilities=element.getCapabilities();
    ;
    if (elementCapabilities == null || !elementCapabilities.containsKey(service)) {
      throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ element.getName()+ ""String_Node_Str""+ provider);
    }
    serviceCapabilities=elementCapabilities.get(service);
  }
  return serviceCapabilities;
}"
89219,"@Override public Map<Capability,String> getNetworkOfferingServiceCapabilities(NetworkOffering offering,Service service){
  if (!areServicesSupportedByNetworkOffering(offering.getId(),service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ offering);
  }
  Map<Capability,String> serviceCapabilities=new HashMap<Capability,String>();
  List<String> providers=_ntwkOfferingSrvcDao.listProvidersForServiceForNetworkOffering(offering.getId(),service);
  if (providers.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ offering);
  }
  String provider=providers.get(0);
  NetworkElement element=getElementImplementingProvider(provider);
  if (element != null) {
    Map<Service,Map<Capability,String>> elementCapabilities=element.getCapabilities();
    ;
    if (elementCapabilities == null || elementCapabilities.get(service) == null) {
      throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ element.getName()+ ""String_Node_Str""+ provider);
    }
    serviceCapabilities=elementCapabilities.get(service);
  }
  return serviceCapabilities;
}","@Override public Map<Capability,String> getNetworkOfferingServiceCapabilities(NetworkOffering offering,Service service){
  if (!areServicesSupportedByNetworkOffering(offering.getId(),service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ offering);
  }
  Map<Capability,String> serviceCapabilities=new HashMap<Capability,String>();
  List<String> providers=_ntwkOfferingSrvcDao.listProvidersForServiceForNetworkOffering(offering.getId(),service);
  if (providers.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ offering);
  }
  String provider=providers.get(0);
  NetworkElement element=getElementImplementingProvider(provider);
  if (element != null) {
    Map<Service,Map<Capability,String>> elementCapabilities=element.getCapabilities();
    ;
    if (elementCapabilities == null || !elementCapabilities.containsKey(service)) {
      throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ element.getName()+ ""String_Node_Str""+ provider);
    }
    serviceCapabilities=elementCapabilities.get(service);
  }
  return serviceCapabilities;
}"
89220,"@Override public Map<Capability,String> getNetworkServiceCapabilities(long networkId,Service service){
  if (!areServicesSupportedInNetwork(networkId,service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ networkId);
  }
  Map<Capability,String> serviceCapabilities=new HashMap<Capability,String>();
  String provider=_ntwkSrvcDao.getProviderForServiceInNetwork(networkId,service);
  NetworkElement element=getElementImplementingProvider(provider);
  if (element != null) {
    Map<Service,Map<Capability,String>> elementCapabilities=element.getCapabilities();
    ;
    if (elementCapabilities == null || elementCapabilities.get(service) == null) {
      throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ element.getName()+ ""String_Node_Str""+ provider);
    }
    serviceCapabilities=elementCapabilities.get(service);
  }
  return serviceCapabilities;
}","@Override public Map<Capability,String> getNetworkServiceCapabilities(long networkId,Service service){
  if (!areServicesSupportedInNetwork(networkId,service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ networkId);
  }
  Map<Capability,String> serviceCapabilities=new HashMap<Capability,String>();
  String provider=_ntwkSrvcDao.getProviderForServiceInNetwork(networkId,service);
  NetworkElement element=getElementImplementingProvider(provider);
  if (element != null) {
    Map<Service,Map<Capability,String>> elementCapabilities=element.getCapabilities();
    ;
    if (elementCapabilities == null || !elementCapabilities.containsKey(service)) {
      throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ element.getName()+ ""String_Node_Str""+ provider);
    }
    serviceCapabilities=elementCapabilities.get(service);
  }
  return serviceCapabilities;
}"
89221,"@Override public Map<Capability,String> getNetworkOfferingServiceCapabilities(NetworkOffering offering,Service service){
  if (!areServicesSupportedByNetworkOffering(offering.getId(),service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ offering);
  }
  Map<Capability,String> serviceCapabilities=new HashMap<Capability,String>();
  List<String> providers=_ntwkOfferingSrvcDao.listProvidersForServiceForNetworkOffering(offering.getId(),service);
  if (providers.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ offering);
  }
  String provider=providers.get(0);
  NetworkElement element=getElementImplementingProvider(provider);
  if (element != null) {
    Map<Service,Map<Capability,String>> elementCapabilities=element.getCapabilities();
    ;
    if (elementCapabilities == null || elementCapabilities.get(service) == null) {
      throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ element.getName()+ ""String_Node_Str""+ provider);
    }
    serviceCapabilities=elementCapabilities.get(service);
  }
  return serviceCapabilities;
}","@Override public Map<Capability,String> getNetworkOfferingServiceCapabilities(NetworkOffering offering,Service service){
  if (!areServicesSupportedByNetworkOffering(offering.getId(),service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ offering);
  }
  Map<Capability,String> serviceCapabilities=new HashMap<Capability,String>();
  List<String> providers=_ntwkOfferingSrvcDao.listProvidersForServiceForNetworkOffering(offering.getId(),service);
  if (providers.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ offering);
  }
  String provider=providers.get(0);
  NetworkElement element=getElementImplementingProvider(provider);
  if (element != null) {
    Map<Service,Map<Capability,String>> elementCapabilities=element.getCapabilities();
    ;
    if (elementCapabilities == null || !elementCapabilities.containsKey(service)) {
      throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ element.getName()+ ""String_Node_Str""+ provider);
    }
    serviceCapabilities=elementCapabilities.get(service);
  }
  return serviceCapabilities;
}"
89222,"String swiftUpload(SwiftTO swift,String container,String lDir,String lFilename){
  Script command=new Script(""String_Node_Str"",s_logger);
  long SWIFT_MAX_SIZE=5L * 1024L * 1024L* 1024L;
  command.add(""String_Node_Str"");
  File file=new File(lDir + ""String_Node_Str"" + lFilename);
  long size=file.length();
  if (size <= SWIFT_MAX_SIZE) {
    command.add(""String_Node_Str"" + lDir + ""String_Node_Str""+ swift.getUrl()+ ""String_Node_Str""+ swift.getAccount()+ ""String_Node_Str""+ swift.getUserName()+ ""String_Node_Str""+ swift.getKey()+ ""String_Node_Str""+ container+ ""String_Node_Str""+ lFilename);
  }
 else {
    command.add(""String_Node_Str"" + lDir + ""String_Node_Str""+ swift.getUrl()+ ""String_Node_Str""+ swift.getAccount()+ ""String_Node_Str""+ swift.getUserName()+ ""String_Node_Str""+ swift.getKey()+ ""String_Node_Str""+ SWIFT_MAX_SIZE+ ""String_Node_Str""+ container+ ""String_Node_Str""+ lFilename);
  }
  OutputInterpreter.AllLinesParser parser=new OutputInterpreter.AllLinesParser();
  String result=command.execute(parser);
  if (result != null) {
    String errMsg=""String_Node_Str"" + result;
    s_logger.warn(errMsg);
    return errMsg;
  }
  if (parser.getLines() != null) {
    String[] lines=parser.getLines().split(""String_Node_Str"");
    for (    String line : lines) {
      if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")) {
        String errMsg=""String_Node_Str"" + lines.toString();
        s_logger.warn(errMsg);
        return errMsg;
      }
    }
  }
  return null;
}","String swiftUpload(SwiftTO swift,String container,String lDir,String lFilename){
  Script command=new Script(""String_Node_Str"",s_logger);
  long SWIFT_MAX_SIZE=5L * 1024L * 1024L* 1024L;
  command.add(""String_Node_Str"");
  List<String> files=new ArrayList<String>();
  if (lFilename.equals(""String_Node_Str"")) {
    File dir=new File(lDir);
    for (    String file : dir.list()) {
      if (file.startsWith(""String_Node_Str"")) {
        continue;
      }
      files.add(file);
    }
  }
 else {
    files.add(lFilename);
  }
  for (  String file : files) {
    long size=file.length();
    if (size <= SWIFT_MAX_SIZE) {
      command.add(""String_Node_Str"" + lDir + ""String_Node_Str""+ swift.getUrl()+ ""String_Node_Str""+ swift.getAccount()+ ""String_Node_Str""+ swift.getUserName()+ ""String_Node_Str""+ swift.getKey()+ ""String_Node_Str""+ container+ ""String_Node_Str""+ lFilename);
    }
 else {
      command.add(""String_Node_Str"" + lDir + ""String_Node_Str""+ swift.getUrl()+ ""String_Node_Str""+ swift.getAccount()+ ""String_Node_Str""+ swift.getUserName()+ ""String_Node_Str""+ swift.getKey()+ ""String_Node_Str""+ SWIFT_MAX_SIZE+ ""String_Node_Str""+ container+ ""String_Node_Str""+ lFilename);
    }
  }
  OutputInterpreter.AllLinesParser parser=new OutputInterpreter.AllLinesParser();
  String result=command.execute(parser);
  if (result != null) {
    String errMsg=""String_Node_Str"" + result;
    s_logger.warn(errMsg);
    return errMsg;
  }
  if (parser.getLines() != null) {
    String[] lines=parser.getLines().split(""String_Node_Str"");
    for (    String line : lines) {
      if (line.contains(""String_Node_Str"") || line.contains(""String_Node_Str"")) {
        String errMsg=""String_Node_Str"" + lines.toString();
        s_logger.warn(errMsg);
        return errMsg;
      }
    }
  }
  return null;
}"
89223,"@Override public Set<Pair<Long,Long>> searchTemplates(String name,String keyword,TemplateFilter templateFilter,boolean isIso,List<HypervisorType> hypers,Boolean bootable,DomainVO domain,Long pageSize,Long startIndex,Long zoneId,HypervisorType hyperType,boolean onlyReady,boolean showDomr,List<Account> permittedAccounts,Account caller,boolean skipProjectTemplates){
  StringBuilder builder=new StringBuilder();
  if (!permittedAccounts.isEmpty()) {
    for (    Account permittedAccount : permittedAccounts) {
      builder.append(permittedAccount.getAccountId() + ""String_Node_Str"");
    }
  }
  String permittedAccountsStr=builder.toString();
  if (permittedAccountsStr.length() > 0) {
    permittedAccountsStr=permittedAccountsStr.substring(0,permittedAccountsStr.length() - 1);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Set<Pair<Long,Long>> templateZonePairList=new LinkedHashSet<Pair<Long,Long>>();
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  StringBuilder relatedDomainIds=new StringBuilder();
  String sql=SELECT_TEMPLATE_ZONE_REF;
  String groupByClause=""String_Node_Str"";
  try {
    String guestOSJoin=""String_Node_Str"";
    StringBuilder templateHostRefJoin=new StringBuilder();
    String dataCenterJoin=""String_Node_Str"";
    if (isIso && !hyperType.equals(HypervisorType.None)) {
      guestOSJoin=""String_Node_Str"";
    }
    if (onlyReady) {
      templateHostRefJoin.append(""String_Node_Str"");
      sql=SELECT_TEMPLATE_HOST_REF;
      groupByClause=""String_Node_Str"";
    }
    if ((templateFilter == TemplateFilter.featured) || (templateFilter == TemplateFilter.community)) {
      dataCenterJoin=""String_Node_Str"";
    }
    sql+=guestOSJoin + templateHostRefJoin + dataCenterJoin;
    String whereClause=""String_Node_Str"";
    boolean joinedWithAccounts=false;
    if (skipProjectTemplates || (!permittedAccounts.isEmpty() && !(templateFilter == TemplateFilter.community || templateFilter == TemplateFilter.featured))) {
      whereClause+=""String_Node_Str"";
      joinedWithAccounts=true;
      if ((templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) && (caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN)) {
        whereClause+=""String_Node_Str"" + domain.getPath() + ""String_Node_Str"";
        if (skipProjectTemplates) {
          whereClause+=""String_Node_Str"" + Account.ACCOUNT_TYPE_PROJECT;
        }
      }
 else       if (skipProjectTemplates) {
        whereClause+=""String_Node_Str"" + Account.ACCOUNT_TYPE_PROJECT;
      }
    }
    if (!isIso) {
      if (hypers.isEmpty()) {
        return templateZonePairList;
      }
 else {
        StringBuilder relatedHypers=new StringBuilder();
        for (        HypervisorType hyper : hypers) {
          relatedHypers.append(""String_Node_Str"");
          relatedHypers.append(hyper.toString());
          relatedHypers.append(""String_Node_Str"");
          relatedHypers.append(""String_Node_Str"");
        }
        relatedHypers.setLength(relatedHypers.length() - 1);
        whereClause+=""String_Node_Str"" + relatedHypers + ""String_Node_Str"";
      }
    }
    if (!permittedAccounts.isEmpty()) {
      for (      Account account : permittedAccounts) {
        DomainVO accountDomain=_domainDao.findById(account.getDomainId());
        DomainVO domainTreeNode=accountDomain;
        while (true) {
          relatedDomainIds.append(domainTreeNode.getId());
          relatedDomainIds.append(""String_Node_Str"");
          if (domainTreeNode.getParent() != null) {
            domainTreeNode=_domainDao.findById(domainTreeNode.getParent());
          }
 else {
            break;
          }
        }
        if (isAdmin(account.getType())) {
          List<DomainVO> allChildDomains=_domainDao.findAllChildren(accountDomain.getPath(),accountDomain.getId());
          for (          DomainVO childDomain : allChildDomains) {
            relatedDomainIds.append(childDomain.getId());
            relatedDomainIds.append(""String_Node_Str"");
          }
        }
        relatedDomainIds.setLength(relatedDomainIds.length() - 1);
      }
    }
    String attr=""String_Node_Str"";
    if (whereClause.endsWith(""String_Node_Str"")) {
      attr+=""String_Node_Str"";
    }
    if (!permittedAccounts.isEmpty() && !(templateFilter == TemplateFilter.featured || templateFilter == TemplateFilter.community) && !isAdmin(caller.getType())) {
      whereClause+=attr + ""String_Node_Str"" + permittedAccountsStr+ ""String_Node_Str"";
    }
    if (templateFilter == TemplateFilter.featured) {
      whereClause+=attr + ""String_Node_Str"";
      if (!permittedAccounts.isEmpty()) {
        whereClause+=attr + ""String_Node_Str"" + relatedDomainIds+ ""String_Node_Str"";
      }
    }
 else     if (templateFilter == TemplateFilter.sharedexecutable && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
      if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
        whereClause+=""String_Node_Str"" + ""String_Node_Str"" + permittedAccountsStr + ""String_Node_Str""+ ""String_Node_Str""+ permittedAccountsStr+ ""String_Node_Str"";
      }
 else {
        if (!joinedWithAccounts) {
          whereClause+=""String_Node_Str"";
        }
        whereClause+=""String_Node_Str"" + domain.getPath() + ""String_Node_Str"";
      }
    }
 else     if ((templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    }
 else     if (templateFilter == TemplateFilter.executable && !permittedAccounts.isEmpty()) {
      whereClause+=attr + ""String_Node_Str"" + permittedAccountsStr+ ""String_Node_Str"";
    }
 else     if (templateFilter == TemplateFilter.community) {
      whereClause+=attr + ""String_Node_Str"";
      if (!permittedAccounts.isEmpty()) {
        whereClause+=attr + ""String_Node_Str"" + relatedDomainIds+ ""String_Node_Str"";
      }
    }
 else     if (templateFilter == TemplateFilter.all && caller.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      whereClause+=attr;
    }
 else     if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
      return templateZonePairList;
    }
    if (whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
 else     if (!whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
    sql+=whereClause + getExtrasWhere(templateFilter,name,keyword,isIso,bootable,hyperType,zoneId,onlyReady,showDomr) + groupByClause+ getOrderByLimit(pageSize,startIndex);
    pstmt=txn.prepareStatement(sql);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      Pair<Long,Long> templateZonePair=new Pair<Long,Long>(rs.getLong(1),rs.getLong(2));
      templateZonePairList.add(templateZonePair);
    }
    if (isIso && templateZonePairList.size() < (pageSize != null ? pageSize : 500) && templateFilter != TemplateFilter.community && !(templateFilter == TemplateFilter.self && !BaseCmd.isRootAdmin(caller.getType()))) {
      List<VMTemplateVO> publicIsos=publicIsoSearch(bootable,false);
      for (int i=0; i < publicIsos.size(); i++) {
        if (keyword != null && publicIsos.get(i).getName().contains(keyword)) {
          templateZonePairList.add(new Pair<Long,Long>(publicIsos.get(i).getId(),null));
          continue;
        }
 else         if (name != null && publicIsos.get(i).getName().contains(name)) {
          templateZonePairList.add(new Pair<Long,Long>(publicIsos.get(i).getId(),null));
          continue;
        }
 else         if (keyword == null && name == null) {
          templateZonePairList.add(new Pair<Long,Long>(publicIsos.get(i).getId(),null));
        }
      }
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
      txn.commit();
    }
 catch (    SQLException sqle) {
      s_logger.warn(""String_Node_Str"",sqle);
    }
  }
  return templateZonePairList;
}","@Override public Set<Pair<Long,Long>> searchTemplates(String name,String keyword,TemplateFilter templateFilter,boolean isIso,List<HypervisorType> hypers,Boolean bootable,DomainVO domain,Long pageSize,Long startIndex,Long zoneId,HypervisorType hyperType,boolean onlyReady,boolean showDomr,List<Account> permittedAccounts,Account caller,boolean skipProjectTemplates){
  StringBuilder builder=new StringBuilder();
  if (!permittedAccounts.isEmpty()) {
    for (    Account permittedAccount : permittedAccounts) {
      builder.append(permittedAccount.getAccountId() + ""String_Node_Str"");
    }
  }
  String permittedAccountsStr=builder.toString();
  if (permittedAccountsStr.length() > 0) {
    permittedAccountsStr=permittedAccountsStr.substring(0,permittedAccountsStr.length() - 1);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Set<Pair<Long,Long>> templateZonePairList=new LinkedHashSet<Pair<Long,Long>>();
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  StringBuilder relatedDomainIds=new StringBuilder();
  String sql=SELECT_TEMPLATE_ZONE_REF;
  String groupByClause=""String_Node_Str"";
  try {
    String guestOSJoin=""String_Node_Str"";
    StringBuilder templateHostRefJoin=new StringBuilder();
    String dataCenterJoin=""String_Node_Str"";
    if (isIso && !hyperType.equals(HypervisorType.None)) {
      guestOSJoin=""String_Node_Str"";
    }
    if (onlyReady) {
      templateHostRefJoin.append(""String_Node_Str"");
      sql=SELECT_TEMPLATE_HOST_REF;
      groupByClause=""String_Node_Str"";
    }
    if ((templateFilter == TemplateFilter.featured) || (templateFilter == TemplateFilter.community)) {
      dataCenterJoin=""String_Node_Str"";
    }
    sql+=guestOSJoin + templateHostRefJoin + dataCenterJoin;
    String whereClause=""String_Node_Str"";
    boolean joinedWithAccounts=false;
    if (skipProjectTemplates || (!permittedAccounts.isEmpty() && !(templateFilter == TemplateFilter.community || templateFilter == TemplateFilter.featured))) {
      whereClause+=""String_Node_Str"";
      joinedWithAccounts=true;
      if ((templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) && (caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN)) {
        whereClause+=""String_Node_Str"" + domain.getPath() + ""String_Node_Str"";
        if (skipProjectTemplates) {
          whereClause+=""String_Node_Str"" + Account.ACCOUNT_TYPE_PROJECT;
        }
      }
 else       if (skipProjectTemplates) {
        whereClause+=""String_Node_Str"" + Account.ACCOUNT_TYPE_PROJECT;
      }
    }
    if (!isIso) {
      if (hypers.isEmpty()) {
        return templateZonePairList;
      }
 else {
        StringBuilder relatedHypers=new StringBuilder();
        for (        HypervisorType hyper : hypers) {
          relatedHypers.append(""String_Node_Str"");
          relatedHypers.append(hyper.toString());
          relatedHypers.append(""String_Node_Str"");
          relatedHypers.append(""String_Node_Str"");
        }
        relatedHypers.setLength(relatedHypers.length() - 1);
        whereClause+=""String_Node_Str"" + relatedHypers + ""String_Node_Str"";
      }
    }
    if (!permittedAccounts.isEmpty()) {
      for (      Account account : permittedAccounts) {
        DomainVO accountDomain=_domainDao.findById(account.getDomainId());
        DomainVO domainTreeNode=accountDomain;
        while (true) {
          relatedDomainIds.append(domainTreeNode.getId());
          relatedDomainIds.append(""String_Node_Str"");
          if (domainTreeNode.getParent() != null) {
            domainTreeNode=_domainDao.findById(domainTreeNode.getParent());
          }
 else {
            break;
          }
        }
        if (isAdmin(account.getType())) {
          List<DomainVO> allChildDomains=_domainDao.findAllChildren(accountDomain.getPath(),accountDomain.getId());
          for (          DomainVO childDomain : allChildDomains) {
            relatedDomainIds.append(childDomain.getId());
            relatedDomainIds.append(""String_Node_Str"");
          }
        }
        relatedDomainIds.setLength(relatedDomainIds.length() - 1);
      }
    }
    String attr=""String_Node_Str"";
    if (whereClause.endsWith(""String_Node_Str"")) {
      attr+=""String_Node_Str"";
    }
    if (!permittedAccounts.isEmpty() && !(templateFilter == TemplateFilter.featured || templateFilter == TemplateFilter.community) && !isAdmin(caller.getType())) {
      whereClause+=attr + ""String_Node_Str"" + permittedAccountsStr+ ""String_Node_Str"";
    }
    if (templateFilter == TemplateFilter.featured) {
      whereClause+=attr + ""String_Node_Str"";
      if (!permittedAccounts.isEmpty()) {
        whereClause+=attr + ""String_Node_Str"" + relatedDomainIds+ ""String_Node_Str"";
      }
    }
 else     if (templateFilter == TemplateFilter.sharedexecutable && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
      if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
        whereClause+=""String_Node_Str"" + ""String_Node_Str"" + permittedAccountsStr + ""String_Node_Str""+ ""String_Node_Str""+ permittedAccountsStr+ ""String_Node_Str"";
      }
 else {
        if (!joinedWithAccounts) {
          whereClause+=""String_Node_Str"";
        }
        whereClause+=""String_Node_Str"" + domain.getPath() + ""String_Node_Str"";
      }
    }
 else     if ((templateFilter == TemplateFilter.self || templateFilter == TemplateFilter.selfexecutable) && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    }
 else     if (templateFilter == TemplateFilter.executable && !permittedAccounts.isEmpty()) {
      whereClause+=attr + ""String_Node_Str"" + permittedAccountsStr+ ""String_Node_Str"";
    }
 else     if (templateFilter == TemplateFilter.community) {
      whereClause+=attr + ""String_Node_Str"";
      if (!permittedAccounts.isEmpty()) {
        whereClause+=attr + ""String_Node_Str"" + relatedDomainIds+ ""String_Node_Str"";
      }
    }
 else     if (templateFilter == TemplateFilter.all && caller.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      whereClause+=attr;
    }
 else     if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && !isIso) {
      return templateZonePairList;
    }
    if (whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
 else     if (!whereClause.equals(""String_Node_Str"")) {
      whereClause+=""String_Node_Str"";
    }
    sql+=whereClause + getExtrasWhere(templateFilter,name,keyword,isIso,bootable,hyperType,zoneId,onlyReady,showDomr) + groupByClause+ getOrderByLimit(pageSize,startIndex);
    pstmt=txn.prepareStatement(sql);
    rs=pstmt.executeQuery();
    while (rs.next()) {
      Pair<Long,Long> templateZonePair=new Pair<Long,Long>(rs.getLong(1),rs.getLong(2));
      templateZonePairList.add(templateZonePair);
    }
    if (isIso && templateZonePairList.size() < (pageSize != null ? pageSize : 500) && templateFilter != TemplateFilter.community && !(templateFilter == TemplateFilter.self && !BaseCmd.isRootAdmin(caller.getType()))) {
      List<VMTemplateVO> publicIsos=publicIsoSearch(bootable,false);
      for (int i=0; i < publicIsos.size(); i++) {
        if (keyword != null && publicIsos.get(i).getName().contains(keyword)) {
          templateZonePairList.add(new Pair<Long,Long>(publicIsos.get(i).getId(),null));
          continue;
        }
 else         if (name != null && publicIsos.get(i).getName().contains(name)) {
          templateZonePairList.add(new Pair<Long,Long>(publicIsos.get(i).getId(),null));
          continue;
        }
 else         if (keyword == null && name == null) {
          templateZonePairList.add(new Pair<Long,Long>(publicIsos.get(i).getId(),null));
        }
      }
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
      txn.commit();
    }
 catch (    SQLException sqle) {
      s_logger.warn(""String_Node_Str"",sqle);
    }
  }
  return templateZonePairList;
}"
89224,"@Override public long findCorrectResourceLimitForAccount(Account account,ResourceType type){
  long max=-1;
  ResourceLimitVO limit=_resourceLimitDao.findByOwnerIdAndType(account.getId(),ResourceOwnerType.Account,type);
  if (limit != null) {
    max=limit.getMax().longValue();
  }
 else {
    Long value=null;
    if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
      value=projectResourceLimitMap.get(type);
    }
 else {
      value=accountResourceLimitMap.get(type);
    }
    if (value != null) {
      return value;
    }
  }
  return max;
}","@Override public long findCorrectResourceLimitForAccount(Account account,ResourceType type){
  long max=Resource.RESOURCE_UNLIMITED;
  ResourceLimitVO limit=_resourceLimitDao.findByOwnerIdAndType(account.getId(),ResourceOwnerType.Account,type);
  if (limit != null) {
    max=limit.getMax().longValue();
  }
 else {
    Long value=null;
    if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
      value=projectResourceLimitMap.get(type);
    }
 else {
      value=accountResourceLimitMap.get(type);
    }
    if (value != null) {
      return value;
    }
  }
  return max;
}"
89225,"@Override public long findCorrectResourceLimitForDomain(Domain domain,ResourceType type){
  long max=-1;
  ResourceLimitVO limit=_resourceLimitDao.findByOwnerIdAndType(domain.getId(),ResourceOwnerType.Domain,type);
  if (limit != null) {
    max=limit.getMax().longValue();
  }
 else {
    Long domainId=domain.getParent();
    while ((domainId != null) && (limit == null)) {
      limit=_resourceLimitDao.findByOwnerIdAndType(domainId,ResourceOwnerType.Domain,type);
      DomainVO tmpDomain=_domainDao.findById(domainId);
      domainId=tmpDomain.getParent();
    }
    if (limit != null) {
      max=limit.getMax().longValue();
    }
  }
  return max;
}","@Override public long findCorrectResourceLimitForDomain(Domain domain,ResourceType type){
  long max=Resource.RESOURCE_UNLIMITED;
  ResourceLimitVO limit=_resourceLimitDao.findByOwnerIdAndType(domain.getId(),ResourceOwnerType.Domain,type);
  if (limit != null) {
    max=limit.getMax().longValue();
  }
 else {
    Long domainId=domain.getParent();
    while ((domainId != null) && (limit == null)) {
      limit=_resourceLimitDao.findByOwnerIdAndType(domainId,ResourceOwnerType.Domain,type);
      DomainVO tmpDomain=_domainDao.findById(domainId);
      domainId=tmpDomain.getParent();
    }
    if (limit != null) {
      max=limit.getMax().longValue();
    }
  }
  return max;
}"
89226,"@Override public ResourceLimitVO updateResourceLimit(Long accountId,Long domainId,Integer typeId,Long max){
  Account caller=UserContext.current().getCaller();
  if (max == null) {
    max=new Long(-1);
  }
 else   if (max < -1) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  ResourceType resourceType=null;
  if (typeId != null) {
    for (    ResourceType type : Resource.ResourceType.values()) {
      if (type.getOrdinal() == typeId.intValue()) {
        resourceType=type;
      }
    }
    if (resourceType == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  ResourceOwnerType ownerType=null;
  Long ownerId=null;
  if (accountId != null) {
    Account account=_entityMgr.findById(Account.class,accountId);
    if (account.getType() == Account.ACCOUNT_ID_SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
      _accountMgr.checkAccess(caller,AccessType.ModifyProject,account);
    }
 else {
      _accountMgr.checkAccess(caller,null,account);
    }
    ownerType=ResourceOwnerType.Account;
    ownerId=accountId;
  }
 else   if (domainId != null) {
    Domain domain=_entityMgr.findById(Domain.class,domainId);
    _accountMgr.checkAccess(caller,domain);
    if ((caller.getDomainId() == domainId.longValue()) && caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
      throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    Long parentDomainId=domain.getParent();
    if (parentDomainId != null) {
      DomainVO parentDomain=_domainDao.findById(parentDomainId);
      long parentMaximum=findCorrectResourceLimitForDomain(parentDomain,resourceType);
      if ((parentMaximum >= 0) && (max.longValue() > parentMaximum)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domain.getName() + ""String_Node_Str""+ parentDomain.getId()+ ""String_Node_Str""+ parentMaximum+ ""String_Node_Str""+ resourceType+ ""String_Node_Str""+ parentMaximum);
      }
    }
    ownerType=ResourceOwnerType.Domain;
    ownerId=domainId;
  }
  if (ownerId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  ResourceLimitVO limit=_resourceLimitDao.findByOwnerIdAndType(ownerId,ownerType,resourceType);
  if (limit != null) {
    _resourceLimitDao.update(limit.getId(),max);
    return _resourceLimitDao.findById(limit.getId());
  }
 else {
    return _resourceLimitDao.persist(new ResourceLimitVO(resourceType,max,ownerId,ownerType));
  }
}","@Override public ResourceLimitVO updateResourceLimit(Long accountId,Long domainId,Integer typeId,Long max){
  Account caller=UserContext.current().getCaller();
  if (max == null) {
    max=new Long(Resource.RESOURCE_UNLIMITED);
  }
 else   if (max.longValue() < Resource.RESOURCE_UNLIMITED) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  ResourceType resourceType=null;
  if (typeId != null) {
    for (    ResourceType type : Resource.ResourceType.values()) {
      if (type.getOrdinal() == typeId.intValue()) {
        resourceType=type;
      }
    }
    if (resourceType == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  ResourceOwnerType ownerType=null;
  Long ownerId=null;
  if (accountId != null) {
    Account account=_entityMgr.findById(Account.class,accountId);
    if (account.getType() == Account.ACCOUNT_ID_SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
      _accountMgr.checkAccess(caller,AccessType.ModifyProject,account);
    }
 else {
      _accountMgr.checkAccess(caller,null,account);
    }
    ownerType=ResourceOwnerType.Account;
    ownerId=accountId;
  }
 else   if (domainId != null) {
    Domain domain=_entityMgr.findById(Domain.class,domainId);
    _accountMgr.checkAccess(caller,domain);
    if ((caller.getDomainId() == domainId.longValue()) && caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
      throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    Long parentDomainId=domain.getParent();
    if (parentDomainId != null) {
      DomainVO parentDomain=_domainDao.findById(parentDomainId);
      long parentMaximum=findCorrectResourceLimitForDomain(parentDomain,resourceType);
      if ((parentMaximum >= 0) && (max.longValue() > parentMaximum)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domain.getName() + ""String_Node_Str""+ parentDomain.getId()+ ""String_Node_Str""+ parentMaximum+ ""String_Node_Str""+ resourceType+ ""String_Node_Str""+ parentMaximum);
      }
    }
    ownerType=ResourceOwnerType.Domain;
    ownerId=domainId;
  }
  if (ownerId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  ResourceLimitVO limit=_resourceLimitDao.findByOwnerIdAndType(ownerId,ownerType,resourceType);
  if (limit != null) {
    _resourceLimitDao.update(limit.getId(),max);
    return _resourceLimitDao.findById(limit.getId());
  }
 else {
    return _resourceLimitDao.persist(new ResourceLimitVO(resourceType,max,ownerId,ownerType));
  }
}"
89227,"@Override @DB public void checkResourceLimit(Account account,ResourceType type,long... count) throws ResourceAllocationException {
  long numResources=((count.length == 0) ? 1 : count[0]);
  Project project=null;
  if (_accountMgr.isAdmin(account.getType())) {
    return;
  }
  if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    project=_projectDao.findByProjectAccountId(account.getId());
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  try {
    Set<Long> rowIdsToLock=_resourceCountDao.listAllRowsToUpdate(account.getId(),ResourceOwnerType.Account,type);
    SearchCriteria<ResourceCountVO> sc=ResourceCountSearch.create();
    sc.setParameters(""String_Node_Str"",rowIdsToLock.toArray());
    _resourceCountDao.lockRows(sc,null,true);
    long accountLimit=findCorrectResourceLimitForAccount(account,type);
    long potentialCount=_resourceCountDao.getResourceCount(account.getId(),ResourceOwnerType.Account,type) + numResources;
    if (accountLimit != -1 && potentialCount > accountLimit) {
      String message=""String_Node_Str"" + type + ""String_Node_Str""+ account.getAccountName()+ ""String_Node_Str""+ account.getDomainId()+ ""String_Node_Str"";
      if (project != null) {
        message=""String_Node_Str"" + type + ""String_Node_Str""+ project.getName()+ ""String_Node_Str""+ account.getDomainId()+ ""String_Node_Str"";
      }
      throw new ResourceAllocationException(message,type);
    }
    Long domainId=null;
    if (project != null) {
      domainId=project.getDomainId();
    }
 else {
      domainId=account.getDomainId();
    }
    while (domainId != null) {
      DomainVO domain=_domainDao.findById(domainId);
      ResourceLimitVO domainLimit=_resourceLimitDao.findByOwnerIdAndType(domainId,ResourceOwnerType.Domain,type);
      if (domainLimit != null) {
        long domainCount=_resourceCountDao.getResourceCount(domainId,ResourceOwnerType.Domain,type);
        if ((domainCount + numResources) > domainLimit.getMax().longValue()) {
          throw new ResourceAllocationException(""String_Node_Str"" + type + ""String_Node_Str""+ domainId+ ""String_Node_Str"",type);
        }
      }
      domainId=domain.getParent();
    }
  }
  finally {
    txn.commit();
  }
}","@Override @DB public void checkResourceLimit(Account account,ResourceType type,long... count) throws ResourceAllocationException {
  long numResources=((count.length == 0) ? 1 : count[0]);
  Project project=null;
  if (_accountMgr.isAdmin(account.getType())) {
    return;
  }
  if (account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    project=_projectDao.findByProjectAccountId(account.getId());
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  try {
    Set<Long> rowIdsToLock=_resourceCountDao.listAllRowsToUpdate(account.getId(),ResourceOwnerType.Account,type);
    SearchCriteria<ResourceCountVO> sc=ResourceCountSearch.create();
    sc.setParameters(""String_Node_Str"",rowIdsToLock.toArray());
    _resourceCountDao.lockRows(sc,null,true);
    long accountLimit=findCorrectResourceLimitForAccount(account,type);
    long potentialCount=_resourceCountDao.getResourceCount(account.getId(),ResourceOwnerType.Account,type) + numResources;
    if (accountLimit != Resource.RESOURCE_UNLIMITED && potentialCount > accountLimit) {
      String message=""String_Node_Str"" + type + ""String_Node_Str""+ account.getAccountName()+ ""String_Node_Str""+ account.getDomainId()+ ""String_Node_Str"";
      if (project != null) {
        message=""String_Node_Str"" + type + ""String_Node_Str""+ project.getName()+ ""String_Node_Str""+ account.getDomainId()+ ""String_Node_Str"";
      }
      throw new ResourceAllocationException(message,type);
    }
    Long domainId=null;
    if (project != null) {
      domainId=project.getDomainId();
    }
 else {
      domainId=account.getDomainId();
    }
    while (domainId != null) {
      DomainVO domain=_domainDao.findById(domainId);
      ResourceLimitVO domainLimit=_resourceLimitDao.findByOwnerIdAndType(domainId,ResourceOwnerType.Domain,type);
      if (domainLimit != null && domainLimit.getMax().longValue() != Resource.RESOURCE_UNLIMITED) {
        long domainCount=_resourceCountDao.getResourceCount(domainId,ResourceOwnerType.Domain,type);
        if ((domainCount + numResources) > domainLimit.getMax().longValue()) {
          throw new ResourceAllocationException(""String_Node_Str"" + type + ""String_Node_Str""+ domainId+ ""String_Node_Str"",type);
        }
      }
      domainId=domain.getParent();
    }
  }
  finally {
    txn.commit();
  }
}"
89228,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_ZONE_EDIT,eventDescription=""String_Node_Str"",async=false) public DataCenter editZone(UpdateZoneCmd cmd){
  Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  List<String> dnsSearchOrder=cmd.getDnsSearchOrder();
  Boolean isPublic=cmd.isPublic();
  String allocationStateStr=cmd.getAllocationState();
  String dhcpProvider=cmd.getDhcpProvider();
  Map<?,?> detailsMap=cmd.getDetails();
  String networkDomain=cmd.getDomain();
  Map<String,String> newDetails=new HashMap<String,String>();
  if (detailsMap != null) {
    Collection<?> zoneDetailsCollection=detailsMap.values();
    Iterator<?> iter=zoneDetailsCollection.iterator();
    while (iter.hasNext()) {
      HashMap<?,?> detail=(HashMap<?,?>)iter.next();
      String key=(String)detail.get(""String_Node_Str"");
      String value=(String)detail.get(""String_Node_Str"");
      if ((key == null) || (value == null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      newDetails.put(key,value);
    }
  }
  if (dnsSearchOrder != null) {
    for (    String dom : dnsSearchOrder) {
      if (!NetUtils.verifyDomainName(dom)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    newDetails.put(ZoneConfig.DnsSearchOrder.getName(),StringUtils.join(dnsSearchOrder,""String_Node_Str""));
  }
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (networkDomain != null) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
 else {
    networkDomain=zone.getDomain();
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null,allocationStateStr);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  zone.setDomain(networkDomain);
  if (isPublic != null && isPublic) {
    zone.setDomainId(null);
    zone.setDomain(null);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Map<String,String> updatedDetails=new HashMap<String,String>();
  _zoneDao.loadDetails(zone);
  if (zone.getDetails() != null) {
    updatedDetails.putAll(zone.getDetails());
  }
  updatedDetails.putAll(newDetails);
  zone.setDetails(updatedDetails);
  if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
    Grouping.AllocationState allocationState=Grouping.AllocationState.valueOf(allocationStateStr);
    zone.setAllocationState(allocationState);
  }
  if (dhcpProvider != null) {
    zone.setDhcpProvider(dhcpProvider);
  }
  if (!_zoneDao.update(zoneId,zone)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  txn.commit();
  return zone;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_ZONE_EDIT,eventDescription=""String_Node_Str"",async=false) public DataCenter editZone(UpdateZoneCmd cmd){
  Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  List<String> dnsSearchOrder=cmd.getDnsSearchOrder();
  Boolean isPublic=cmd.isPublic();
  String allocationStateStr=cmd.getAllocationState();
  String dhcpProvider=cmd.getDhcpProvider();
  Map<?,?> detailsMap=cmd.getDetails();
  String networkDomain=cmd.getDomain();
  Map<String,String> newDetails=new HashMap<String,String>();
  if (detailsMap != null) {
    Collection<?> zoneDetailsCollection=detailsMap.values();
    Iterator<?> iter=zoneDetailsCollection.iterator();
    while (iter.hasNext()) {
      HashMap<?,?> detail=(HashMap<?,?>)iter.next();
      String key=(String)detail.get(""String_Node_Str"");
      String value=(String)detail.get(""String_Node_Str"");
      if ((key == null) || (value == null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      newDetails.put(key,value);
    }
  }
  if (dnsSearchOrder != null) {
    for (    String dom : dnsSearchOrder) {
      if (!NetUtils.verifyDomainName(dom)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
    newDetails.put(ZoneConfig.DnsSearchOrder.getName(),StringUtils.join(dnsSearchOrder,""String_Node_Str""));
  }
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (networkDomain != null && !networkDomain.isEmpty()) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null,allocationStateStr);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  if (networkDomain != null) {
    if (networkDomain.isEmpty()) {
      zone.setDomain(null);
    }
 else {
      zone.setDomain(networkDomain);
    }
  }
  if (isPublic != null && isPublic) {
    zone.setDomainId(null);
    zone.setDomain(null);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Map<String,String> updatedDetails=new HashMap<String,String>();
  _zoneDao.loadDetails(zone);
  if (zone.getDetails() != null) {
    updatedDetails.putAll(zone.getDetails());
  }
  updatedDetails.putAll(newDetails);
  zone.setDetails(updatedDetails);
  if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
    Grouping.AllocationState allocationState=Grouping.AllocationState.valueOf(allocationStateStr);
    zone.setAllocationState(allocationState);
  }
  if (dhcpProvider != null) {
    zone.setDhcpProvider(dhcpProvider);
  }
  if (!_zoneDao.update(zoneId,zone)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  txn.commit();
  return zone;
}"
89229,"@Override @ActionEvent(eventType=EventTypes.EVENT_DOMAIN_UPDATE,eventDescription=""String_Node_Str"") @DB public DomainVO updateDomain(UpdateDomainCmd cmd){
  Long domainId=cmd.getId();
  String domainName=cmd.getDomainName();
  String networkDomain=cmd.getNetworkDomain();
  DomainVO domain=_domainDao.findById(domainId);
  if (domain == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
  }
 else   if (domain.getParent() == null && domainName != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account caller=UserContext.current().getCaller();
  _accountMgr.checkAccess(caller,domain);
  if (domainName != null) {
    SearchCriteria<DomainVO> sc=_domainDao.createSearchCriteria();
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainName);
    List<DomainVO> domains=_domainDao.search(sc,null);
    if (!domains.isEmpty()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str""+ domainName+ ""String_Node_Str"");
    }
  }
  if (networkDomain != null) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (domainName != null) {
    String updatedDomainPath=getUpdatedDomainPath(domain.getPath(),domainName);
    updateDomainChildren(domain,updatedDomainPath);
    domain.setName(domainName);
    domain.setPath(updatedDomainPath);
  }
  if (networkDomain != null) {
    domain.setNetworkDomain(networkDomain);
  }
  _domainDao.update(domainId,domain);
  txn.commit();
  return _domainDao.findById(domainId);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_DOMAIN_UPDATE,eventDescription=""String_Node_Str"") @DB public DomainVO updateDomain(UpdateDomainCmd cmd){
  Long domainId=cmd.getId();
  String domainName=cmd.getDomainName();
  String networkDomain=cmd.getNetworkDomain();
  DomainVO domain=_domainDao.findById(domainId);
  if (domain == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + domainId);
  }
 else   if (domain.getParent() == null && domainName != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account caller=UserContext.current().getCaller();
  _accountMgr.checkAccess(caller,domain);
  if (domainName != null) {
    SearchCriteria<DomainVO> sc=_domainDao.createSearchCriteria();
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainName);
    List<DomainVO> domains=_domainDao.search(sc,null);
    boolean sameDomain=(domains.size() == 1 && domains.get(0).getId() == domainId);
    if (!domains.isEmpty() && !sameDomain) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str""+ domainName+ ""String_Node_Str"");
    }
  }
  if (networkDomain != null && !networkDomain.isEmpty()) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (domainName != null) {
    String updatedDomainPath=getUpdatedDomainPath(domain.getPath(),domainName);
    updateDomainChildren(domain,updatedDomainPath);
    domain.setName(domainName);
    domain.setPath(updatedDomainPath);
  }
  if (networkDomain != null) {
    if (networkDomain.isEmpty()) {
      domain.setNetworkDomain(null);
    }
 else {
      domain.setNetworkDomain(networkDomain);
    }
  }
  _domainDao.update(domainId,domain);
  txn.commit();
  return _domainDao.findById(domainId);
}"
89230,"@Override public AccountVO updateAccount(UpdateAccountCmd cmd){
  Long accountId=cmd.getId();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String newAccountName=cmd.getNewName();
  String networkDomain=cmd.getNetworkDomain();
  Map<String,String> details=cmd.getDetails();
  boolean success=false;
  Account account=null;
  if (accountId != null) {
    account=_accountDao.findById(accountId);
  }
 else {
    account=_accountDao.findEnabledAccount(accountName,domainId);
  }
  if (account == null || account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    s_logger.error(""String_Node_Str"" + accountId + ""String_Node_Str""+ accountName+ ""String_Node_Str""+ domainId);
    throw new InvalidParameterValueException(""String_Node_Str"" + accountId + ""String_Node_Str""+ accountName+ ""String_Node_Str""+ domainId);
  }
  if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),_domainMgr.getDomain(account.getDomainId()));
  Account duplicateAcccount=_accountDao.findActiveAccount(newAccountName,domainId);
  if (duplicateAcccount != null && duplicateAcccount.getId() != account.getId()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + newAccountName + ""String_Node_Str""+ domainId+ ""String_Node_Str""+ duplicateAcccount.getId());
  }
  if (networkDomain != null) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  AccountVO acctForUpdate=_accountDao.findById(account.getId());
  acctForUpdate.setAccountName(newAccountName);
  if (networkDomain != null) {
    acctForUpdate.setNetworkDomain(networkDomain);
  }
  success=_accountDao.update(account.getId(),acctForUpdate);
  if (details != null) {
    _accountDetailsDao.update(account.getId(),details);
  }
  if (success) {
    return _accountDao.findById(account.getId());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"" + accountId + ""String_Node_Str""+ accountName+ ""String_Node_Str""+ domainId);
  }
}","@Override @DB public AccountVO updateAccount(UpdateAccountCmd cmd){
  Long accountId=cmd.getId();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String newAccountName=cmd.getNewName();
  String networkDomain=cmd.getNetworkDomain();
  Map<String,String> details=cmd.getDetails();
  boolean success=false;
  Account account=null;
  if (accountId != null) {
    account=_accountDao.findById(accountId);
  }
 else {
    account=_accountDao.findEnabledAccount(accountName,domainId);
  }
  if (account == null || account.getType() == Account.ACCOUNT_TYPE_PROJECT) {
    s_logger.error(""String_Node_Str"" + accountId + ""String_Node_Str""+ accountName+ ""String_Node_Str""+ domainId);
    throw new InvalidParameterValueException(""String_Node_Str"" + accountId + ""String_Node_Str""+ accountName+ ""String_Node_Str""+ domainId);
  }
  if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),_domainMgr.getDomain(account.getDomainId()));
  Account duplicateAcccount=_accountDao.findActiveAccount(newAccountName,domainId);
  if (duplicateAcccount != null && duplicateAcccount.getId() != account.getId()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + newAccountName + ""String_Node_Str""+ domainId+ ""String_Node_Str""+ duplicateAcccount.getId());
  }
  if (networkDomain != null && !networkDomain.isEmpty()) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  AccountVO acctForUpdate=_accountDao.findById(account.getId());
  acctForUpdate.setAccountName(newAccountName);
  if (networkDomain != null) {
    if (networkDomain.isEmpty()) {
      acctForUpdate.setNetworkDomain(null);
    }
 else {
      acctForUpdate.setNetworkDomain(networkDomain);
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  success=_accountDao.update(account.getId(),acctForUpdate);
  if (details != null && success) {
    _accountDetailsDao.update(account.getId(),details);
  }
  txn.commit();
  if (success) {
    return _accountDao.findById(account.getId());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"" + accountId + ""String_Node_Str""+ accountName+ ""String_Node_Str""+ domainId);
  }
}"
89231,"@Override public List<? extends ProjectAccount> listProjectAccounts(long projectId,String accountName,String role,Long startIndex,Long pageSizeVal){
  Account caller=UserContext.current().getCaller();
  Project project=getProject(projectId);
  if (project == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
  }
  if (!_accountMgr.isAdmin(caller.getType()) && _projectAccountDao.findByProjectIdAccountId(projectId,caller.getAccountId()) == null) {
    throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
  }
  Filter searchFilter=new Filter(ProjectAccountVO.class,""String_Node_Str"",false,startIndex,pageSizeVal);
  SearchBuilder<ProjectAccountVO> sb=_projectAccountDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountRole(),Op.EQ);
  SearchBuilder<AccountVO> accountSearch;
  if (accountName != null) {
    accountSearch=_accountDao.createSearchBuilder();
    accountSearch.and(""String_Node_Str"",accountSearch.entity().getAccountName(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<ProjectAccountVO> sc=sb.create();
  if (role != null) {
    sc.setParameters(""String_Node_Str"",role);
  }
  if (accountName != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",accountName);
  }
  return _projectAccountDao.search(sc,searchFilter);
}","@Override public List<? extends ProjectAccount> listProjectAccounts(long projectId,String accountName,String role,Long startIndex,Long pageSizeVal){
  Account caller=UserContext.current().getCaller();
  Project project=getProject(projectId);
  if (project == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
  }
  if (!_accountMgr.isAdmin(caller.getType()) && _projectAccountDao.findByProjectIdAccountId(projectId,caller.getAccountId()) == null) {
    throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
  }
  Filter searchFilter=new Filter(ProjectAccountVO.class,""String_Node_Str"",false,startIndex,pageSizeVal);
  SearchBuilder<ProjectAccountVO> sb=_projectAccountDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountRole(),Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getProjectId(),Op.EQ);
  SearchBuilder<AccountVO> accountSearch;
  if (accountName != null) {
    accountSearch=_accountDao.createSearchBuilder();
    accountSearch.and(""String_Node_Str"",accountSearch.entity().getAccountName(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<ProjectAccountVO> sc=sb.create();
  sc.setParameters(""String_Node_Str"",projectId);
  if (role != null) {
    sc.setParameters(""String_Node_Str"",role);
  }
  if (accountName != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",accountName);
  }
  return _projectAccountDao.search(sc,searchFilter);
}"
89232,"private VmDataCommand generateVmDataCommand(DomainRouterVO router,String vmPrivateIpAddress,String userData,String serviceOffering,String zoneName,String guestIpAddress,String vmName,String vmInstanceName,long vmId,String publicKey){
  VmDataCommand cmd=new VmDataCommand(vmPrivateIpAddress,vmName);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
  DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
  cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",userData);
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",StringUtils.unicodeEscape(serviceOffering));
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",StringUtils.unicodeEscape(zoneName));
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",guestIpAddress);
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",StringUtils.unicodeEscape(vmName));
  if (dcVo.getNetworkType() == NetworkType.Basic) {
    cmd.addVmData(""String_Node_Str"",""String_Node_Str"",guestIpAddress);
    cmd.addVmData(""String_Node_Str"",""String_Node_Str"",StringUtils.unicodeEscape(vmName));
  }
 else {
    cmd.addVmData(""String_Node_Str"",""String_Node_Str"",router.getPublicIpAddress());
    cmd.addVmData(""String_Node_Str"",""String_Node_Str"",router.getPublicIpAddress());
  }
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",vmInstanceName);
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",String.valueOf(vmId));
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",publicKey);
  String cloudIdentifier=_configDao.getValue(""String_Node_Str"");
  if (cloudIdentifier == null) {
    cloudIdentifier=""String_Node_Str"";
  }
 else {
    cloudIdentifier=""String_Node_Str"" + cloudIdentifier + ""String_Node_Str"";
  }
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",cloudIdentifier);
  return cmd;
}","private VmDataCommand generateVmDataCommand(DomainRouterVO router,String vmPrivateIpAddress,String userData,String serviceOffering,String zoneName,String guestIpAddress,String vmName,String vmInstanceName,long vmId,String publicKey){
  VmDataCommand cmd=new VmDataCommand(vmPrivateIpAddress,vmName);
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
  cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
  DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
  cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",userData);
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",StringUtils.unicodeEscape(serviceOffering));
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",StringUtils.unicodeEscape(zoneName));
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",guestIpAddress);
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",StringUtils.unicodeEscape(vmName));
  if (dcVo.getNetworkType() == NetworkType.Basic) {
    cmd.addVmData(""String_Node_Str"",""String_Node_Str"",guestIpAddress);
    cmd.addVmData(""String_Node_Str"",""String_Node_Str"",StringUtils.unicodeEscape(vmName));
  }
 else {
    if (router.getPublicIpAddress() == null) {
      cmd.addVmData(""String_Node_Str"",""String_Node_Str"",guestIpAddress);
    }
 else {
      cmd.addVmData(""String_Node_Str"",""String_Node_Str"",router.getPublicIpAddress());
    }
    cmd.addVmData(""String_Node_Str"",""String_Node_Str"",router.getPublicIpAddress());
  }
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",vmInstanceName);
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",String.valueOf(vmId));
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",publicKey);
  String cloudIdentifier=_configDao.getValue(""String_Node_Str"");
  if (cloudIdentifier == null) {
    cloudIdentifier=""String_Node_Str"";
  }
 else {
    cloudIdentifier=""String_Node_Str"" + cloudIdentifier + ""String_Node_Str"";
  }
  cmd.addVmData(""String_Node_Str"",""String_Node_Str"",cloudIdentifier);
  return cmd;
}"
89233,"String swiftUpload(SwiftTO swift,String container,String lDir,String lFilename){
  Script command=new Script(""String_Node_Str"",s_logger);
  command.add(""String_Node_Str"");
  command.add(""String_Node_Str"" + lDir + ""String_Node_Str""+ swift.getUrl()+ ""String_Node_Str""+ swift.getAccount()+ ""String_Node_Str""+ swift.getUserName()+ ""String_Node_Str""+ swift.getKey()+ ""String_Node_Str""+ container+ ""String_Node_Str""+ lFilename);
  String result=command.execute();
  if (result != null) {
    String errMsg=""String_Node_Str"" + result;
    s_logger.warn(errMsg);
    return errMsg;
  }
  return null;
}","String swiftUpload(SwiftTO swift,String container,String lDir,String lFilename){
  Script command=new Script(""String_Node_Str"",s_logger);
  command.add(""String_Node_Str"");
  command.add(""String_Node_Str"" + lDir + ""String_Node_Str""+ swift.getUrl()+ ""String_Node_Str""+ swift.getAccount()+ ""String_Node_Str""+ swift.getUserName()+ ""String_Node_Str""+ swift.getKey()+ ""String_Node_Str""+ container+ ""String_Node_Str""+ lFilename);
  OutputInterpreter.AllLinesParser parser=new OutputInterpreter.AllLinesParser();
  String result=command.execute(parser);
  if (result != null) {
    String errMsg=""String_Node_Str"" + result;
    s_logger.warn(errMsg);
    return errMsg;
  }
  if (parser.getLines() != null) {
    String[] lines=parser.getLines().split(""String_Node_Str"");
    for (    String line : lines) {
      if (line.contains(""String_Node_Str"")) {
        String errMsg=""String_Node_Str"" + lines.toString();
        s_logger.warn(errMsg);
        return errMsg;
      }
    }
  }
  return null;
}"
89234,"String swiftDelete(SwiftTO swift,String container,String rFilename){
  Script command=new Script(""String_Node_Str"",s_logger);
  command.add(""String_Node_Str"");
  command.add(""String_Node_Str"" + swift.getUrl() + ""String_Node_Str""+ swift.getAccount()+ ""String_Node_Str""+ swift.getUserName()+ ""String_Node_Str""+ swift.getKey()+ ""String_Node_Str""+ container+ ""String_Node_Str""+ rFilename);
  String result=command.execute();
  if (result != null) {
    String errMsg=""String_Node_Str"" + result;
    s_logger.warn(errMsg);
    return errMsg;
  }
  return null;
}","String swiftDelete(SwiftTO swift,String container,String rFilename){
  Script command=new Script(""String_Node_Str"",s_logger);
  command.add(""String_Node_Str"");
  command.add(""String_Node_Str"" + swift.getUrl() + ""String_Node_Str""+ swift.getAccount()+ ""String_Node_Str""+ swift.getUserName()+ ""String_Node_Str""+ swift.getKey()+ ""String_Node_Str""+ container+ ""String_Node_Str""+ rFilename);
  OutputInterpreter.AllLinesParser parser=new OutputInterpreter.AllLinesParser();
  String result=command.execute(parser);
  if (result != null) {
    String errMsg=""String_Node_Str"" + result;
    s_logger.warn(errMsg);
    return errMsg;
  }
  if (parser.getLines() != null) {
    String[] lines=parser.getLines().split(""String_Node_Str"");
    for (    String line : lines) {
      if (line.contains(""String_Node_Str"")) {
        String errMsg=""String_Node_Str"" + lines.toString();
        s_logger.warn(errMsg);
        return errMsg;
      }
    }
  }
  return null;
}"
89235,"@Override public void handleTemplateSync(HostVO ssHost){
  if (ssHost == null) {
    s_logger.warn(""String_Node_Str"");
    return;
  }
  long sserverId=ssHost.getId();
  long zoneId=ssHost.getDataCenterId();
  if (!(ssHost.getType() == Host.Type.SecondaryStorage || ssHost.getType() == Host.Type.LocalSecondaryStorage)) {
    s_logger.warn(""String_Node_Str"" + sserverId + ""String_Node_Str"");
    return;
  }
  Map<String,TemplateInfo> templateInfos=listTemplate(ssHost);
  if (templateInfos == null) {
    return;
  }
  Set<VMTemplateVO> toBeDownloaded=new HashSet<VMTemplateVO>();
  List<VMTemplateVO> allTemplates=_templateDao.listAllInZone(zoneId);
  List<VMTemplateVO> rtngTmplts=_templateDao.listAllSystemVMTemplates();
  List<VMTemplateVO> defaultBuiltin=_templateDao.listDefaultBuiltinTemplates();
  if (rtngTmplts != null) {
    for (    VMTemplateVO rtngTmplt : rtngTmplts) {
      if (!allTemplates.contains(rtngTmplt)) {
        allTemplates.add(rtngTmplt);
      }
    }
  }
  if (defaultBuiltin != null) {
    for (    VMTemplateVO builtinTmplt : defaultBuiltin) {
      if (!allTemplates.contains(builtinTmplt)) {
        allTemplates.add(builtinTmplt);
      }
    }
  }
  toBeDownloaded.addAll(allTemplates);
  for (  VMTemplateVO tmplt : allTemplates) {
    String uniqueName=tmplt.getUniqueName();
    VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(sserverId,tmplt.getId());
    if (templateInfos.containsKey(uniqueName)) {
      TemplateInfo tmpltInfo=templateInfos.remove(uniqueName);
      toBeDownloaded.remove(tmplt);
      if (tmpltHost != null) {
        s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str"");
        if (tmpltHost.getDownloadState() != Status.DOWNLOADED) {
          tmpltHost.setErrorString(""String_Node_Str"");
        }
        if (tmpltInfo.isCorrupted()) {
          tmpltHost.setDownloadState(Status.DOWNLOAD_ERROR);
          String msg=""String_Node_Str"" + tmplt.getName() + ""String_Node_Str""+ tmplt.getId()+ ""String_Node_Str""+ tmpltHost.getId();
          tmpltHost.setErrorString(msg);
          s_logger.info(""String_Node_Str"");
          if (tmplt.getUrl() == null) {
            msg=""String_Node_Str"" + tmplt + ""String_Node_Str""+ tmpltInfo.getInstallPath()+ ""String_Node_Str""+ tmpltHost.getHostId();
            s_logger.warn(msg);
          }
 else {
            toBeDownloaded.add(tmplt);
          }
        }
 else {
          tmpltHost.setDownloadPercent(100);
          tmpltHost.setDownloadState(Status.DOWNLOADED);
          tmpltHost.setInstallPath(tmpltInfo.getInstallPath());
          tmpltHost.setSize(tmpltInfo.getSize());
          tmpltHost.setPhysicalSize(tmpltInfo.getPhysicalSize());
          tmpltHost.setLastUpdated(new Date());
        }
        _vmTemplateHostDao.update(tmpltHost.getId(),tmpltHost);
      }
 else {
        tmpltHost=new VMTemplateHostVO(sserverId,tmplt.getId(),new Date(),100,Status.DOWNLOADED,null,null,null,tmpltInfo.getInstallPath(),tmplt.getUrl());
        tmpltHost.setSize(tmpltInfo.getSize());
        tmpltHost.setPhysicalSize(tmpltInfo.getPhysicalSize());
        _vmTemplateHostDao.persist(tmpltHost);
        VMTemplateZoneVO tmpltZoneVO=_vmTemplateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
        if (tmpltZoneVO == null) {
          tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
          _vmTemplateZoneDao.persist(tmpltZoneVO);
        }
 else {
          tmpltZoneVO.setLastUpdated(new Date());
          _vmTemplateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
        }
      }
      continue;
    }
    if (tmpltHost != null && tmpltHost.getDownloadState() != Status.DOWNLOADED) {
      s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str""+ sserverId+ ""String_Node_Str"");
    }
 else     if (tmpltHost == null) {
      s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str""+ sserverId+ ""String_Node_Str"");
      VMTemplateHostVO templtHost=new VMTemplateHostVO(sserverId,tmplt.getId(),new Date(),0,Status.NOT_DOWNLOADED,null,null,null,null,tmplt.getUrl());
      _vmTemplateHostDao.persist(templtHost);
      VMTemplateZoneVO tmpltZoneVO=_vmTemplateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
      if (tmpltZoneVO == null) {
        tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
        _vmTemplateZoneDao.persist(tmpltZoneVO);
      }
 else {
        tmpltZoneVO.setLastUpdated(new Date());
        _vmTemplateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
      }
    }
  }
  if (toBeDownloaded.size() > 0) {
    List<HypervisorType> availHypers=_clusterDao.getAvailableHypervisorInZone(zoneId);
    if (availHypers.isEmpty()) {
      availHypers.add(HypervisorType.KVM);
    }
    availHypers.remove(HypervisorType.BareMetal);
    availHypers.add(HypervisorType.None);
    for (    VMTemplateVO tmplt : toBeDownloaded) {
      if (tmplt.getUrl() == null) {
        continue;
      }
      if (!tmplt.isPublicTemplate() && !tmplt.isFeatured()) {
        VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(sserverId,tmplt.getId());
        if (tmpltHost == null) {
          continue;
        }
      }
      if (availHypers.contains(tmplt.getHypervisorType())) {
        s_logger.debug(""String_Node_Str"" + tmplt.getName() + ""String_Node_Str""+ ssHost.getName());
        downloadTemplateToStorage(tmplt,ssHost);
      }
    }
  }
  for (  String uniqueName : templateInfos.keySet()) {
    TemplateInfo tInfo=templateInfos.get(uniqueName);
    DeleteTemplateCommand dtCommand=new DeleteTemplateCommand(ssHost.getStorageUrl(),tInfo.getInstallPath());
    try {
      _agentMgr.sendToSecStorage(ssHost,dtCommand,null);
    }
 catch (    AgentUnavailableException e) {
      String err=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ sserverId+ ""String_Node_Str"";
      s_logger.error(err);
      return;
    }
    String description=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ sserverId+ ""String_Node_Str"";
    s_logger.info(description);
  }
}","@Override public void handleTemplateSync(HostVO ssHost){
  if (ssHost == null) {
    s_logger.warn(""String_Node_Str"");
    return;
  }
  long sserverId=ssHost.getId();
  long zoneId=ssHost.getDataCenterId();
  if (!(ssHost.getType() == Host.Type.SecondaryStorage || ssHost.getType() == Host.Type.LocalSecondaryStorage)) {
    s_logger.warn(""String_Node_Str"" + sserverId + ""String_Node_Str"");
    return;
  }
  Map<String,TemplateInfo> templateInfos=listTemplate(ssHost);
  if (templateInfos == null) {
    return;
  }
  Set<VMTemplateVO> toBeDownloaded=new HashSet<VMTemplateVO>();
  List<VMTemplateVO> allTemplates=_templateDao.listAllInZone(zoneId);
  List<VMTemplateVO> rtngTmplts=_templateDao.listAllSystemVMTemplates();
  List<VMTemplateVO> defaultBuiltin=_templateDao.listDefaultBuiltinTemplates();
  if (rtngTmplts != null) {
    for (    VMTemplateVO rtngTmplt : rtngTmplts) {
      if (!allTemplates.contains(rtngTmplt)) {
        allTemplates.add(rtngTmplt);
      }
    }
  }
  if (defaultBuiltin != null) {
    for (    VMTemplateVO builtinTmplt : defaultBuiltin) {
      if (!allTemplates.contains(builtinTmplt)) {
        allTemplates.add(builtinTmplt);
      }
    }
  }
  toBeDownloaded.addAll(allTemplates);
  for (  VMTemplateVO tmplt : allTemplates) {
    String uniqueName=tmplt.getUniqueName();
    VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(sserverId,tmplt.getId());
    if (templateInfos.containsKey(uniqueName)) {
      TemplateInfo tmpltInfo=templateInfos.remove(uniqueName);
      toBeDownloaded.remove(tmplt);
      if (tmpltHost != null) {
        s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str"");
        if (tmpltHost.getDownloadState() != Status.DOWNLOADED) {
          tmpltHost.setErrorString(""String_Node_Str"");
        }
        if (tmpltInfo.isCorrupted()) {
          tmpltHost.setDownloadState(Status.DOWNLOAD_ERROR);
          String msg=""String_Node_Str"" + tmplt.getName() + ""String_Node_Str""+ tmplt.getId()+ ""String_Node_Str""+ tmpltHost.getId();
          tmpltHost.setErrorString(msg);
          s_logger.info(""String_Node_Str"");
          if (tmplt.getUrl() == null) {
            msg=""String_Node_Str"" + tmplt + ""String_Node_Str""+ tmpltInfo.getInstallPath()+ ""String_Node_Str""+ tmpltHost.getHostId();
            s_logger.warn(msg);
          }
 else {
            toBeDownloaded.add(tmplt);
          }
        }
 else {
          tmpltHost.setDownloadPercent(100);
          tmpltHost.setDownloadState(Status.DOWNLOADED);
          tmpltHost.setInstallPath(tmpltInfo.getInstallPath());
          tmpltHost.setSize(tmpltInfo.getSize());
          tmpltHost.setPhysicalSize(tmpltInfo.getPhysicalSize());
          tmpltHost.setLastUpdated(new Date());
        }
        _vmTemplateHostDao.update(tmpltHost.getId(),tmpltHost);
      }
 else {
        tmpltHost=new VMTemplateHostVO(sserverId,tmplt.getId(),new Date(),100,Status.DOWNLOADED,null,null,null,tmpltInfo.getInstallPath(),tmplt.getUrl());
        tmpltHost.setSize(tmpltInfo.getSize());
        tmpltHost.setPhysicalSize(tmpltInfo.getPhysicalSize());
        _vmTemplateHostDao.persist(tmpltHost);
        VMTemplateZoneVO tmpltZoneVO=_vmTemplateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
        if (tmpltZoneVO == null) {
          tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
          _vmTemplateZoneDao.persist(tmpltZoneVO);
        }
 else {
          tmpltZoneVO.setLastUpdated(new Date());
          _vmTemplateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
        }
      }
      continue;
    }
    if (tmpltHost != null && tmpltHost.getDownloadState() != Status.DOWNLOADED) {
      s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str""+ sserverId+ ""String_Node_Str"");
    }
 else     if (tmpltHost == null) {
      s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str""+ sserverId+ ""String_Node_Str"");
      VMTemplateHostVO templtHost=new VMTemplateHostVO(sserverId,tmplt.getId(),new Date(),0,Status.NOT_DOWNLOADED,null,null,null,null,tmplt.getUrl());
      _vmTemplateHostDao.persist(templtHost);
      VMTemplateZoneVO tmpltZoneVO=_vmTemplateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
      if (tmpltZoneVO == null) {
        tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
        _vmTemplateZoneDao.persist(tmpltZoneVO);
      }
 else {
        tmpltZoneVO.setLastUpdated(new Date());
        _vmTemplateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
      }
    }
  }
  if (toBeDownloaded.size() > 0) {
    List<HypervisorType> availHypers=_clusterDao.getAvailableHypervisorInZone(zoneId);
    if (availHypers.isEmpty()) {
      availHypers.add(HypervisorType.KVM);
    }
    availHypers.remove(HypervisorType.BareMetal);
    availHypers.add(HypervisorType.None);
    for (    VMTemplateVO tmplt : toBeDownloaded) {
      if (tmplt.getUrl() == null) {
        continue;
      }
      if (!tmplt.isPublicTemplate() && !tmplt.isFeatured()) {
        VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(sserverId,tmplt.getId());
        if (tmpltHost == null) {
          continue;
        }
      }
      if (availHypers.contains(tmplt.getHypervisorType())) {
        if (_swiftMgr.isSwiftEnabled()) {
          if (_swiftMgr.isTemplateInstalled(tmplt.getId())) {
            continue;
          }
        }
        s_logger.debug(""String_Node_Str"" + tmplt.getName() + ""String_Node_Str""+ ssHost.getName());
        downloadTemplateToStorage(tmplt,ssHost);
      }
    }
  }
  for (  String uniqueName : templateInfos.keySet()) {
    TemplateInfo tInfo=templateInfos.get(uniqueName);
    DeleteTemplateCommand dtCommand=new DeleteTemplateCommand(ssHost.getStorageUrl(),tInfo.getInstallPath());
    try {
      _agentMgr.sendToSecStorage(ssHost,dtCommand,null);
    }
 catch (    AgentUnavailableException e) {
      String err=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ sserverId+ ""String_Node_Str"";
      s_logger.error(err);
      return;
    }
    String description=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ sserverId+ ""String_Node_Str"";
    s_logger.info(description);
  }
}"
89236,"protected HashMap<String,Pair<String,State>> fullClusterSync(Connection conn){
  XenServerPoolVms vms=new XenServerPoolVms();
  try {
    Host lhost=Host.getByUuid(conn,_host.uuid);
    Map<VM,VM.Record> vm_map=VM.getAllRecords(conn);
    for (    VM.Record record : vm_map.values()) {
      if (record.isControlDomain || record.isASnapshot || record.isATemplate) {
        continue;
      }
      String vm_name=record.nameLabel;
      VmPowerState ps=record.powerState;
      final State state=convertToState(ps);
      Host host=record.residentOn;
      String host_uuid=null;
      if (!isRefNull(host)) {
        host_uuid=host.getUuid(conn);
        vms.put(_cluster,host_uuid,vm_name,state);
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm_name + ""String_Node_Str""+ ps+ ""String_Node_Str""+ state.toString());
      }
    }
  }
 catch (  final Throwable e) {
    String msg=""String_Node_Str"" + _host.uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg);
  }
  return vms.getClusterVmState(_cluster);
}","protected HashMap<String,Pair<String,State>> fullClusterSync(Connection conn){
  XenServerPoolVms vms=new XenServerPoolVms();
  try {
    Map<VM,VM.Record> vm_map=VM.getAllRecords(conn);
    for (    VM.Record record : vm_map.values()) {
      if (record.isControlDomain || record.isASnapshot || record.isATemplate) {
        continue;
      }
      String vm_name=record.nameLabel;
      VmPowerState ps=record.powerState;
      final State state=convertToState(ps);
      Host host=record.residentOn;
      String host_uuid=null;
      if (!isRefNull(host)) {
        host_uuid=host.getUuid(conn);
        vms.put(_cluster,host_uuid,vm_name,state);
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm_name + ""String_Node_Str""+ ps+ ""String_Node_Str""+ state.toString());
      }
    }
  }
 catch (  final Throwable e) {
    String msg=""String_Node_Str"" + _host.uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg);
  }
  return vms.getClusterVmState(_cluster);
}"
89237,"protected HashMap<String,Pair<String,State>> deltaClusterSync(Connection conn){
  HashMap<String,Pair<String,State>> newStates;
  HashMap<String,Pair<String,State>> oldStates=null;
  final HashMap<String,Pair<String,State>> changes=new HashMap<String,Pair<String,State>>();
  newStates=getAllVms(conn);
  if (newStates == null) {
    s_logger.warn(""String_Node_Str"");
    return null;
  }
synchronized (s_vms) {
    oldStates=new HashMap<String,Pair<String,State>>(s_vms.size(_cluster));
    oldStates.putAll(s_vms.getClusterVmState(_cluster));
    for (    final Map.Entry<String,Pair<String,State>> entry : newStates.entrySet()) {
      final String vm=entry.getKey();
      State newState=entry.getValue().second();
      String host_uuid=entry.getValue().first();
      final Pair<String,State> oldState=oldStates.remove(vm);
      if (host_uuid != null && oldState != null) {
        if (!host_uuid.equals(oldState.first()) && newState != State.Stopped && newState != State.Stopping) {
          changes.put(vm,new Pair<String,State>(host_uuid,newState));
          s_vms.put(_cluster,host_uuid,vm,newState);
          continue;
        }
      }
      if (newState == State.Stopped && oldState != null && oldState.second() != State.Stopping && oldState.second() != State.Stopped) {
        newState=getRealPowerState(conn,vm);
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm + ""String_Node_Str""+ newState+ ""String_Node_Str""+ (oldState != null ? oldState.toString() : ""String_Node_Str""));
      }
      if (vm.startsWith(""String_Node_Str"")) {
        s_logger.warn(""String_Node_Str"");
        continue;
      }
      if (oldState == null) {
        s_vms.put(_cluster,host_uuid,vm,newState);
        s_logger.warn(""String_Node_Str"" + vm);
        changes.put(vm,new Pair<String,State>(host_uuid,newState));
      }
 else       if (oldState.second() == State.Starting) {
        if (newState == State.Running) {
          s_vms.put(_cluster,host_uuid,vm,newState);
        }
 else         if (newState == State.Stopped) {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
      }
 else       if (oldState.second() == State.Migrating) {
        if (newState == State.Running) {
          s_logger.debug(""String_Node_Str"" + vm);
          s_vms.put(_cluster,host_uuid,vm,newState);
        }
      }
 else       if (oldState.second() == State.Stopping) {
        if (newState == State.Stopped) {
          s_vms.put(_cluster,host_uuid,vm,newState);
        }
 else         if (newState == State.Running) {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
      }
 else       if (oldState.second() != newState) {
        s_vms.put(_cluster,host_uuid,vm,newState);
        if (newState == State.Stopped) {
        }
        changes.put(vm,new Pair<String,State>(host_uuid,newState));
      }
    }
    for (    final Map.Entry<String,Pair<String,State>> entry : oldStates.entrySet()) {
      final String vm=entry.getKey();
      final State oldState=entry.getValue().second();
      String host_uuid=entry.getValue().first();
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm + ""String_Node_Str"");
      }
      if (oldState == State.Stopping) {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        s_vms.remove(_cluster,host_uuid,vm);
      }
 else       if (oldState == State.Starting) {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
      }
 else       if (oldState == State.Stopped) {
        s_vms.remove(_cluster,host_uuid,vm);
      }
 else       if (oldState == State.Migrating) {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
      }
 else {
      }
    }
  }
  return changes;
}","protected HashMap<String,Pair<String,State>> deltaClusterSync(Connection conn){
  HashMap<String,Pair<String,State>> newStates;
  HashMap<String,Pair<String,State>> oldStates=null;
  final HashMap<String,Pair<String,State>> changes=new HashMap<String,Pair<String,State>>();
  newStates=getAllVms(conn);
  if (newStates == null) {
    s_logger.warn(""String_Node_Str"");
    return null;
  }
synchronized (s_vms) {
    oldStates=new HashMap<String,Pair<String,State>>(s_vms.size(_cluster));
    oldStates.putAll(s_vms.getClusterVmState(_cluster));
    for (    final Map.Entry<String,Pair<String,State>> entry : newStates.entrySet()) {
      final String vm=entry.getKey();
      State newState=entry.getValue().second();
      String host_uuid=entry.getValue().first();
      final Pair<String,State> oldState=oldStates.remove(vm);
      if (host_uuid != null && oldState != null) {
        if (!host_uuid.equals(oldState.first()) && newState != State.Stopped && newState != State.Stopping) {
          s_logger.warn(""String_Node_Str"" + vm);
          changes.put(vm,new Pair<String,State>(host_uuid,newState));
          s_vms.put(_cluster,host_uuid,vm,newState);
          continue;
        }
      }
      if (newState == State.Stopped && oldState != null && oldState.second() != State.Stopping && oldState.second() != State.Stopped) {
        newState=getRealPowerState(conn,vm);
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm + ""String_Node_Str""+ newState+ ""String_Node_Str""+ (oldState != null ? oldState.toString() : ""String_Node_Str""));
      }
      if (vm.startsWith(""String_Node_Str"")) {
        s_logger.warn(""String_Node_Str"");
        continue;
      }
      if (oldState == null) {
        s_vms.put(_cluster,host_uuid,vm,newState);
        s_logger.warn(""String_Node_Str"" + vm);
        changes.put(vm,new Pair<String,State>(host_uuid,newState));
      }
 else       if (oldState.second() == State.Starting) {
        if (newState == State.Running) {
          s_vms.put(_cluster,host_uuid,vm,newState);
        }
 else         if (newState == State.Stopped) {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
      }
 else       if (oldState.second() == State.Migrating) {
        if (newState == State.Running) {
          s_logger.debug(""String_Node_Str"" + vm);
          s_vms.put(_cluster,host_uuid,vm,newState);
        }
      }
 else       if (oldState.second() == State.Stopping) {
        if (newState == State.Stopped) {
          s_vms.put(_cluster,host_uuid,vm,newState);
        }
 else         if (newState == State.Running) {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
      }
 else       if (oldState.second() != newState) {
        s_vms.put(_cluster,host_uuid,vm,newState);
        if (newState == State.Stopped) {
        }
        changes.put(vm,new Pair<String,State>(host_uuid,newState));
      }
    }
    for (    final Map.Entry<String,Pair<String,State>> entry : oldStates.entrySet()) {
      final String vm=entry.getKey();
      final State oldState=entry.getValue().second();
      String host_uuid=entry.getValue().first();
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm + ""String_Node_Str"");
      }
      if (oldState == State.Stopping) {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
        s_vms.remove(_cluster,host_uuid,vm);
      }
 else       if (oldState == State.Starting) {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
      }
 else       if (oldState == State.Stopped) {
        s_vms.remove(_cluster,host_uuid,vm);
      }
 else       if (oldState == State.Migrating) {
        s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
      }
 else {
        State newState=State.Stopped;
        changes.put(vm,new Pair<String,State>(host_uuid,newState));
      }
    }
  }
  return changes;
}"
89238,"public Commands fullHostSync(final long hostId,StartupRoutingCommand startup){
  Commands commands=new Commands(OnError.Continue);
  Map<Long,AgentVmInfo> infos=convertToInfos(startup);
  final List<? extends VMInstanceVO> vms=_vmDao.listByHostId(hostId);
  s_logger.debug(""String_Node_Str"" + vms.size() + ""String_Node_Str""+ hostId);
  for (  VMInstanceVO vm : vms) {
    AgentVmInfo info=infos.remove(vm.getId());
    VMInstanceVO castedVm=null;
    if (info == null) {
      info=new AgentVmInfo(vm.getInstanceName(),getVmGuru(vm),vm,State.Stopped);
      castedVm=info.guru.findById(vm.getId());
    }
 else {
      castedVm=info.vm;
    }
    HypervisorGuru hvGuru=_hvGuruMgr.getGuru(castedVm.getHypervisorType());
    Command command=compareState(hostId,castedVm,info,true,hvGuru.trackVmHostChange());
    if (command != null) {
      commands.addCommand(command);
    }
  }
  for (  final AgentVmInfo left : infos.values()) {
    boolean found=false;
    for (    VirtualMachineGuru<? extends VMInstanceVO> vmGuru : _vmGurus.values()) {
      VMInstanceVO vm=vmGuru.findByName(left.name);
      if (vm != null) {
        found=true;
        HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
        if (hvGuru.trackVmHostChange()) {
          Command command=compareState(hostId,vm,left,true,true);
          if (command != null) {
            commands.addCommand(command);
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + left.name + ""String_Node_Str""+ vm.getHostId()+ ""String_Node_Str""+ hostId);
          commands.addCommand(cleanup(left.name));
        }
        break;
      }
    }
    if (!found) {
      s_logger.warn(""String_Node_Str"" + left.name);
      commands.addCommand(cleanup(left.name));
    }
  }
  return commands;
}","public Commands fullHostSync(final long hostId,StartupRoutingCommand startup){
  Commands commands=new Commands(OnError.Continue);
  Map<Long,AgentVmInfo> infos=convertToInfos(startup);
  final List<? extends VMInstanceVO> vms=_vmDao.listByHostId(hostId);
  s_logger.debug(""String_Node_Str"" + vms.size() + ""String_Node_Str""+ hostId);
  for (  VMInstanceVO vm : vms) {
    AgentVmInfo info=infos.remove(vm.getId());
    VMInstanceVO castedVm=null;
    if (info == null) {
      info=new AgentVmInfo(vm.getInstanceName(),getVmGuru(vm),vm,State.Stopped);
      castedVm=info.guru.findById(vm.getId());
    }
 else {
      castedVm=info.vm;
    }
    HypervisorGuru hvGuru=_hvGuruMgr.getGuru(castedVm.getHypervisorType());
    Command command=compareState(hostId,castedVm,info,true,hvGuru.trackVmHostChange());
    if (command != null) {
      commands.addCommand(command);
    }
  }
  final List<? extends VMInstanceVO> vmsz=_vmDao.listByHostId(hostId);
  s_logger.debug(""String_Node_Str"" + vmsz.size() + ""String_Node_Str""+ hostId);
  for (  VMInstanceVO vm : vmsz) {
    AgentVmInfo info=infos.remove(vm.getId());
    VMInstanceVO castedVm=null;
    if (info == null) {
      info=new AgentVmInfo(vm.getInstanceName(),getVmGuru(vm),vm,State.Stopped);
      castedVm=info.guru.findById(vm.getId());
    }
 else {
      castedVm=info.vm;
    }
    HypervisorGuru hvGuru=_hvGuruMgr.getGuru(castedVm.getHypervisorType());
    Command command=compareState(hostId,castedVm,info,true,hvGuru.trackVmHostChange());
    if (command != null) {
      commands.addCommand(command);
    }
  }
  for (  final AgentVmInfo left : infos.values()) {
    boolean found=false;
    for (    VirtualMachineGuru<? extends VMInstanceVO> vmGuru : _vmGurus.values()) {
      VMInstanceVO vm=vmGuru.findByName(left.name);
      if (vm != null) {
        found=true;
        HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
        if (hvGuru.trackVmHostChange()) {
          Command command=compareState(hostId,vm,left,true,true);
          if (command != null) {
            commands.addCommand(command);
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + left.name + ""String_Node_Str""+ vm.getHostId()+ ""String_Node_Str""+ hostId);
          commands.addCommand(cleanup(left.name));
        }
        break;
      }
    }
    if (!found) {
      s_logger.warn(""String_Node_Str"" + left.name);
      commands.addCommand(cleanup(left.name));
    }
  }
  return commands;
}"
89239,"public Commands fullSync(final long clusterId,Map<String,Pair<String,State>> newStates){
  Commands commands=new Commands(OnError.Continue);
  Map<Long,AgentVmInfo> infos=convertToInfos(newStates);
  long hId=0;
  final List<VMInstanceVO> vms=_vmDao.listByClusterId(clusterId);
  for (  VMInstanceVO vm : vms) {
    AgentVmInfo info=infos.remove(vm.getId());
  }
  for (  final AgentVmInfo left : infos.values()) {
    s_logger.warn(""String_Node_Str"" + left.name);
    commands.addCommand(cleanup(left.name));
  }
  return commands;
}","public void fullSync(final long clusterId,Map<String,Pair<String,State>> newStates){
  Map<Long,AgentVmInfo> infos=convertToInfos(newStates);
  List<VMInstanceVO> vms=_vmDao.listByClusterId(clusterId);
  for (  VMInstanceVO vm : vms) {
    if (vm.isRemoved() || vm.getState() == State.Destroyed || vm.getState() == State.Expunging)     continue;
    infos.remove(vm.getId());
  }
  vms=_vmDao.listStartingByClusterId(clusterId);
  for (  VMInstanceVO vm : vms) {
    if (vm.isRemoved() || vm.getState() == State.Destroyed || vm.getState() == State.Expunging)     continue;
    infos.remove(vm.getId());
  }
  for (  final AgentVmInfo left : infos.values()) {
    try {
      Host host=_resourceMgr.findHostByGuid(left.getHostUuid());
      if (host != null) {
        s_logger.warn(""String_Node_Str"" + left.name);
        Answer answer=_agentMgr.send(host.getId(),cleanup(left.name));
        if (!answer.getResult()) {
          s_logger.warn(""String_Node_Str"" + answer.getDetails());
        }
      }
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + e.getMessage());
    }
  }
}"
89240,"public Commands deltaSync(Map<String,Pair<String,State>> newStates){
  Map<Long,AgentVmInfo> states=convertToInfos(newStates);
  Commands commands=new Commands(OnError.Continue);
  for (  Map.Entry<Long,AgentVmInfo> entry : states.entrySet()) {
    AgentVmInfo info=entry.getValue();
    VMInstanceVO vm=info.vm;
    Command command=null;
    if (vm != null) {
      String hostGuid=info.getHostUuid();
      Host host=_resourceMgr.findHostByGuid(hostGuid);
      long hId=host.getId();
      HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
      command=compareState(hId,vm,info,false,hvGuru.trackVmHostChange());
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + info.name);
      }
      command=cleanup(info.name);
    }
    if (command != null) {
      commands.addCommand(command);
    }
  }
  return commands;
}","public void deltaSync(Map<String,Pair<String,State>> newStates){
  Map<Long,AgentVmInfo> states=convertToInfos(newStates);
  for (  Map.Entry<Long,AgentVmInfo> entry : states.entrySet()) {
    AgentVmInfo info=entry.getValue();
    VMInstanceVO vm=info.vm;
    Command command=null;
    if (vm != null) {
      Host host=_resourceMgr.findHostByGuid(info.getHostUuid());
      long hId=host.getId();
      HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
      command=compareState(hId,vm,info,false,hvGuru.trackVmHostChange());
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + info.name);
      }
      command=cleanup(info.name);
    }
    if (command != null) {
      try {
        Host host=_resourceMgr.findHostByGuid(info.getHostUuid());
        if (host != null) {
          Answer answer=_agentMgr.send(host.getId(),cleanup(info.name));
          if (!answer.getResult()) {
            s_logger.warn(""String_Node_Str"" + answer.getDetails());
          }
        }
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.getMessage());
      }
    }
  }
}"
89241,"@Override public boolean processAnswers(long agentId,long seq,Answer[] answers){
  for (  final Answer answer : answers) {
    if (answer instanceof ClusterSyncAnswer) {
      ClusterSyncAnswer hs=(ClusterSyncAnswer)answer;
      if (hs.isFull()) {
        deltaSync(hs.getNewStates());
        fullSync(hs.getClusterId(),hs.getAllStates());
      }
 else       if (hs.isDelta()) {
        deltaSync(hs.getNewStates());
      }
    }
 else     if (!answer.getResult()) {
      s_logger.warn(""String_Node_Str"" + answer.getDetails());
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + answer.getDetails());
      }
    }
  }
  return true;
}","@Override public boolean processAnswers(long agentId,long seq,Answer[] answers){
  for (  final Answer answer : answers) {
    if (answer instanceof ClusterSyncAnswer) {
      ClusterSyncAnswer hs=(ClusterSyncAnswer)answer;
      if (!hs.isExceuted()) {
        if (hs.isFull()) {
          deltaSync(hs.getNewStates());
          fullSync(hs.getClusterId(),hs.getAllStates());
        }
 else         if (hs.isDelta()) {
          deltaSync(hs.getNewStates());
        }
        hs.setExecuted();
      }
    }
 else     if (!answer.getResult()) {
      s_logger.warn(""String_Node_Str"" + answer.getDetails());
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + answer.getDetails());
      }
    }
  }
  return true;
}"
89242,"@DB private boolean doDeleteHost(long hostId,boolean isForced,boolean isForceDeleteStorage){
  User caller=_accountMgr.getActiveUser(UserContext.current().getCallerUserId());
  HostVO host=_hostDao.findById(hostId);
  if (host == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + hostId + ""String_Node_Str"");
  }
  _accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),host.getDataCenterId());
  AgentAttache attache=_agentMgr.findAttache(hostId);
  List<StoragePoolHostVO> pools=_storagePoolHostDao.listByHostIdIncludingRemoved(hostId);
  ResourceStateAdapter.DeleteHostAnswer answer=(ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST,false,host,new Boolean(isForced),new Boolean(isForceDeleteStorage));
  if (answer == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ hostId+ ""String_Node_Str""+ host.getHypervisorType()+ ""String_Node_Str""+ host.getType());
  }
  if (answer.getIsException()) {
    return false;
  }
  if (!answer.getIsContinue()) {
    return true;
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(),host.getDataCenterId(),null);
  _agentMgr.disconnectWithoutInvestigation(hostId,Status.Event.Remove);
  _hostDetailsDao.deleteDetails(hostId);
  host.setGuid(null);
  Long clusterId=host.getClusterId();
  host.setClusterId(null);
  _hostDao.update(host.getId(),host);
  _hostDao.remove(hostId);
  if (clusterId != null) {
    List<HostVO> hosts=listAllHostsInCluster(clusterId);
    if (hosts.size() == 0) {
      ClusterVO cluster=_clusterDao.findById(clusterId);
      cluster.setGuid(null);
      _clusterDao.update(clusterId,cluster);
    }
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.DeleteHost,_nodeId);
  }
 catch (  NoTransitionException e) {
    s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
  }
  _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);
  for (  StoragePoolHostVO pool : pools) {
    Long poolId=pool.getPoolId();
    StoragePoolVO storagePool=_storagePoolDao.findById(poolId);
    if (storagePool.isLocal() && isForceDeleteStorage) {
      storagePool.setUuid(null);
      storagePool.setClusterId(null);
      _storagePoolDao.update(poolId,storagePool);
      _storagePoolDao.remove(poolId);
      s_logger.debug(""String_Node_Str"" + poolId + ""String_Node_Str""+ hostId);
    }
  }
  Object[] capacityTypes={Capacity.CAPACITY_TYPE_CPU,Capacity.CAPACITY_TYPE_MEMORY};
  SearchCriteria<CapacityVO> hostCapacitySC=_capacityDao.createSearchCriteria();
  hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hostId);
  hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,capacityTypes);
  _capacityDao.remove(hostCapacitySC);
  txn.commit();
  return true;
}","@DB protected boolean doDeleteHost(long hostId,boolean isForced,boolean isForceDeleteStorage){
  User caller=_accountMgr.getActiveUser(UserContext.current().getCallerUserId());
  HostVO host=_hostDao.findById(hostId);
  if (host == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + hostId + ""String_Node_Str"");
  }
  _accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),host.getDataCenterId());
  AgentAttache attache=_agentMgr.findAttache(hostId);
  List<StoragePoolHostVO> pools=_storagePoolHostDao.listByHostIdIncludingRemoved(hostId);
  ResourceStateAdapter.DeleteHostAnswer answer=(ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST,false,host,new Boolean(isForced),new Boolean(isForceDeleteStorage));
  if (answer == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + host.getName() + ""String_Node_Str""+ hostId+ ""String_Node_Str""+ host.getHypervisorType()+ ""String_Node_Str""+ host.getType());
  }
  if (answer.getIsException()) {
    return false;
  }
  if (!answer.getIsContinue()) {
    return true;
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(),host.getDataCenterId(),null);
  _agentMgr.disconnectWithoutInvestigation(hostId,Status.Event.Remove);
  _hostDetailsDao.deleteDetails(hostId);
  host.setGuid(null);
  Long clusterId=host.getClusterId();
  host.setClusterId(null);
  _hostDao.update(host.getId(),host);
  _hostDao.remove(hostId);
  if (clusterId != null) {
    List<HostVO> hosts=listAllHostsInCluster(clusterId);
    if (hosts.size() == 0) {
      ClusterVO cluster=_clusterDao.findById(clusterId);
      cluster.setGuid(null);
      _clusterDao.update(clusterId,cluster);
    }
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.DeleteHost,_nodeId);
  }
 catch (  NoTransitionException e) {
    s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
  }
  _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);
  for (  StoragePoolHostVO pool : pools) {
    Long poolId=pool.getPoolId();
    StoragePoolVO storagePool=_storagePoolDao.findById(poolId);
    if (storagePool.isLocal() && isForceDeleteStorage) {
      storagePool.setUuid(null);
      storagePool.setClusterId(null);
      _storagePoolDao.update(poolId,storagePool);
      _storagePoolDao.remove(poolId);
      s_logger.debug(""String_Node_Str"" + poolId + ""String_Node_Str""+ hostId);
    }
  }
  Object[] capacityTypes={Capacity.CAPACITY_TYPE_CPU,Capacity.CAPACITY_TYPE_MEMORY};
  SearchCriteria<CapacityVO> hostCapacitySC=_capacityDao.createSearchCriteria();
  hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hostId);
  hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,capacityTypes);
  _capacityDao.remove(hostCapacitySC);
  txn.commit();
  return true;
}"
89243,"private SearchCriteria<NetworkVO> buildNetworkSearchCriteria(SearchBuilder<NetworkVO> sb,String keyword,Long id,Boolean isSystem,Long zoneId,String guestIpType,String trafficType,Long physicalNetworkId,String aclType){
  SearchCriteria<NetworkVO> sc=sb.create();
  if (isSystem != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",isSystem);
  }
  if (keyword != null) {
    SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (zoneId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
  }
  if (guestIpType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,guestIpType);
  }
  if (trafficType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,trafficType);
  }
  if (aclType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,aclType.toString());
  }
  if (physicalNetworkId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,physicalNetworkId);
  }
  return sc;
}","private SearchCriteria<NetworkVO> buildNetworkSearchCriteria(SearchBuilder<NetworkVO> sb,String keyword,Long id,Boolean isSystem,Long zoneId,String guestIpType,String trafficType,Long physicalNetworkId,String aclType,boolean skipProjectNetworks){
  SearchCriteria<NetworkVO> sc=sb.create();
  if (isSystem != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",isSystem);
  }
  if (keyword != null) {
    SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (zoneId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
  }
  if (guestIpType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,guestIpType);
  }
  if (trafficType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,trafficType);
  }
  if (aclType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,aclType.toString());
  }
  if (physicalNetworkId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,physicalNetworkId);
  }
  if (skipProjectNetworks) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  return sc;
}"
89244,"@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String guestIpType=cmd.getGuestIpType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  String aclType=cmd.getAclType();
  Long projectId=cmd.getProjectId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  String path=null;
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,domain);
    if (accountName != null) {
      Account owner=_accountMgr.getActiveAccountByName(accountName,domainId);
      if (owner == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
      _accountMgr.checkAccess(caller,null,owner);
      permittedAccounts.add(owner.getId());
    }
  }
  if (!_accountMgr.isAdmin(caller.getType())) {
    permittedAccounts.add(caller.getId());
    domainId=caller.getDomainId();
  }
  if (projectId != null) {
    permittedAccounts.clear();
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
    }
    if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
    }
    permittedAccounts.add(project.getProjectAccountId());
  }
 else   if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
    permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
  }
  path=_domainDao.findById(caller.getDomainId()).getPath();
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (permittedAccounts.isEmpty()) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
  if (isSystem == null || !isSystem) {
    if (domainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType),searchFilter,domainId));
    }
 else     if (permittedAccounts.isEmpty()) {
      networksToReturn.addAll(listAccountSpecificNetworksByDomainPath(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType),searchFilter,path));
    }
    if (!permittedAccounts.isEmpty()) {
      networksToReturn.addAll(listAccountSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType),searchFilter,permittedAccounts));
    }
  }
 else {
    networksToReturn=_networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,null),searchFilter);
  }
  if (supportedServicesStr != null && !supportedServicesStr.isEmpty() && !networksToReturn.isEmpty()) {
    List<NetworkVO> supportedNetworks=new ArrayList<NetworkVO>();
    Service[] suppportedServices=new Service[supportedServicesStr.size()];
    int i=0;
    for (    String supportedServiceStr : supportedServicesStr) {
      Service service=Service.getService(supportedServiceStr);
      if (service == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + supportedServiceStr);
      }
 else {
        suppportedServices[i]=service;
      }
      i++;
    }
    for (    NetworkVO network : networksToReturn) {
      if (areServicesSupportedInNetwork(network.getId(),suppportedServices)) {
        supportedNetworks.add(network);
      }
    }
    return supportedNetworks;
  }
 else {
    return networksToReturn;
  }
}","@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String guestIpType=cmd.getGuestIpType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  String aclType=cmd.getAclType();
  Long projectId=cmd.getProjectId();
  List<Long> permittedAccounts=new ArrayList<Long>();
  String path=null;
  Long physicalNetworkId=cmd.getPhysicalNetworkId();
  List<String> supportedServicesStr=cmd.getSupportedServices();
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,domain);
    if (accountName != null) {
      Account owner=_accountMgr.getActiveAccountByName(accountName,domainId);
      if (owner == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
      _accountMgr.checkAccess(caller,null,owner);
      permittedAccounts.add(owner.getId());
    }
  }
  if (!_accountMgr.isAdmin(caller.getType())) {
    permittedAccounts.add(caller.getId());
    domainId=caller.getDomainId();
  }
  boolean skipProjectNetworks=true;
  if (projectId != null) {
    if (projectId == -1) {
      permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
    }
 else {
      permittedAccounts.clear();
      Project project=_projectMgr.getProject(projectId);
      if (project == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
      }
      if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
        throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
      }
      permittedAccounts.add(project.getProjectAccountId());
    }
    skipProjectNetworks=false;
  }
  path=_domainDao.findById(caller.getDomainId()).getPath();
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (permittedAccounts.isEmpty()) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (skipProjectNetworks) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
  if (isSystem == null || !isSystem) {
    if (domainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks),searchFilter,domainId));
    }
 else     if (permittedAccounts.isEmpty()) {
      networksToReturn.addAll(listAccountSpecificNetworksByDomainPath(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks),searchFilter,path));
    }
    if (!permittedAccounts.isEmpty()) {
      networksToReturn.addAll(listAccountSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,aclType,skipProjectNetworks),searchFilter,permittedAccounts));
    }
  }
 else {
    networksToReturn=_networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,guestIpType,trafficType,physicalNetworkId,null,skipProjectNetworks),searchFilter);
  }
  if (supportedServicesStr != null && !supportedServicesStr.isEmpty() && !networksToReturn.isEmpty()) {
    List<NetworkVO> supportedNetworks=new ArrayList<NetworkVO>();
    Service[] suppportedServices=new Service[supportedServicesStr.size()];
    int i=0;
    for (    String supportedServiceStr : supportedServicesStr) {
      Service service=Service.getService(supportedServiceStr);
      if (service == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + supportedServiceStr);
      }
 else {
        suppportedServices[i]=service;
      }
      i++;
    }
    for (    NetworkVO network : networksToReturn) {
      if (areServicesSupportedInNetwork(network.getId(),suppportedServices)) {
        supportedNetworks.add(network);
      }
    }
    return supportedNetworks;
  }
 else {
    return networksToReturn;
  }
}"
89245,"@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  List<Long> permittedAccounts=new ArrayList<Long>();
  boolean isAdmin=false;
  Boolean isRecursive=cmd.isRecursive();
  Long projectId=cmd.getProjectId();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if ((caller == null) || isAdmin(caller.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((caller != null) && !_domainDao.isChildDomain(caller.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          permittedAccounts.add(userAccount.getId());
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((caller == null) ? DomainVO.ROOT_DOMAIN : caller.getDomainId());
      isRecursive=true;
    }
  }
 else {
    permittedAccounts.add(caller.getId());
  }
  if (projectId != null) {
    permittedAccounts.clear();
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
    }
    if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
    }
    permittedAccounts.add(project.getProjectAccountId());
  }
 else   if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
    permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zoneId=cmd.getZoneId();
  Object pod=null;
  if (isAdmin) {
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  SearchBuilder<DiskOfferingVO> diskOfferingSearch=_diskOfferingDao.createSearchBuilder();
  diskOfferingSearch.and(""String_Node_Str"",diskOfferingSearch.entity().getSystemUse(),SearchCriteria.Op.NEQ);
  sb.join(""String_Node_Str"",diskOfferingSearch,sb.entity().getDiskOfferingId(),diskOfferingSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((permittedAccounts.isEmpty()) && (domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchBuilder<VMInstanceVO> vmSearch=_vmInstanceDao.createSearchBuilder();
  vmSearch.and(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NIN);
  vmSearch.or(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NULL);
  sb.join(""String_Node_Str"",vmSearch,sb.entity().getInstanceId(),vmSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",1);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zoneId != null) {
    sc.setParameters(""String_Node_Str"",zoneId);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}","@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  List<Long> permittedAccounts=new ArrayList<Long>();
  boolean isAdmin=false;
  Boolean isRecursive=cmd.isRecursive();
  Long projectId=cmd.getProjectId();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if ((caller == null) || isAdmin(caller.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((caller != null) && !_domainDao.isChildDomain(caller.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          permittedAccounts.add(userAccount.getId());
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((caller == null) ? DomainVO.ROOT_DOMAIN : caller.getDomainId());
      isRecursive=true;
    }
  }
 else {
    permittedAccounts.add(caller.getId());
  }
  boolean skipProjectVolumes=true;
  if (projectId != null) {
    if (projectId == -1) {
      permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
    }
 else {
      permittedAccounts.clear();
      Project project=_projectMgr.getProject(projectId);
      if (project == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
      }
      if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
        throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
      }
      permittedAccounts.add(project.getProjectAccountId());
    }
    skipProjectVolumes=false;
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zoneId=cmd.getZoneId();
  Object pod=null;
  if (isAdmin) {
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  SearchBuilder<DiskOfferingVO> diskOfferingSearch=_diskOfferingDao.createSearchBuilder();
  diskOfferingSearch.and(""String_Node_Str"",diskOfferingSearch.entity().getSystemUse(),SearchCriteria.Op.NEQ);
  sb.join(""String_Node_Str"",diskOfferingSearch,sb.entity().getDiskOfferingId(),diskOfferingSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((permittedAccounts.isEmpty()) && (domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  if (skipProjectVolumes) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchBuilder<VMInstanceVO> vmSearch=_vmInstanceDao.createSearchBuilder();
  vmSearch.and(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NIN);
  vmSearch.or(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NULL);
  sb.join(""String_Node_Str"",vmSearch,sb.entity().getInstanceId(),vmSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (skipProjectVolumes) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",1);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zoneId != null) {
    sc.setParameters(""String_Node_Str"",zoneId);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}"
89246,"@Override public List<SnapshotVO> listSnapshots(ListSnapshotsCmd cmd){
  Long volumeId=cmd.getVolumeId();
  Boolean isRecursive=cmd.isRecursive();
  Long projectId=cmd.getProjectId();
  if (volumeId != null) {
    VolumeVO volume=_volsDao.findById(volumeId);
    if (volume != null) {
      _accountMgr.checkAccess(UserContext.current().getCaller(),null,volume);
    }
  }
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if ((caller == null) || _accountMgr.isAdmin(caller.getType())) {
    if (domainId != null) {
      if ((caller != null) && !_domainDao.isChildDomain(caller.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
    }
 else     if ((caller != null) && ((caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || (caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN))) {
      domainId=caller.getDomainId();
      isRecursive=true;
    }
    if (domainId != null && accountName != null) {
      Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
      if (userAccount != null) {
        permittedAccounts.add(userAccount.getId());
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
    }
  }
 else {
    permittedAccounts.add(caller.getId());
  }
  if (isRecursive == null) {
    isRecursive=false;
  }
  if (projectId != null) {
    permittedAccounts.clear();
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
    }
    if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
    }
    permittedAccounts.add(project.getProjectAccountId());
  }
 else {
    permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
  }
  Object name=cmd.getSnapshotName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Object snapshotTypeStr=cmd.getSnapshotType();
  Object intervalTypeStr=cmd.getIntervalType();
  Filter searchFilter=new Filter(SnapshotVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<SnapshotVO> sb=_snapshotDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getVolumeId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getsnapshotType(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getsnapshotType(),SearchCriteria.Op.NEQ);
  if ((permittedAccounts.isEmpty()) && (domainId != null)) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinType.INNER);
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    if (isRecursive) {
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    }
 else {
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    }
    accountSearch.join(""String_Node_Str"",domainSearch,accountSearch.entity().getDomainId(),domainSearch.entity().getId(),JoinType.INNER);
  }
  SearchCriteria<SnapshotVO> sc=sb.create();
  if (volumeId != null) {
    sc.setParameters(""String_Node_Str"",volumeId);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (keyword != null) {
    SearchCriteria<SnapshotVO> ssc=_snapshotDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    SearchCriteria<?> joinSearch=sc.getJoin(""String_Node_Str"");
    if (isRecursive) {
      joinSearch.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      joinSearch.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (snapshotTypeStr != null) {
    Type snapshotType=SnapshotVO.getSnapshotType((String)snapshotTypeStr);
    if (snapshotType == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotTypeStr);
    }
    if (snapshotType == Type.RECURRING) {
      sc.setParameters(""String_Node_Str"",Type.HOURLY.ordinal(),Type.DAILY.ordinal(),Type.WEEKLY.ordinal(),Type.MONTHLY.ordinal());
    }
 else {
      sc.setParameters(""String_Node_Str"",snapshotType.ordinal());
    }
  }
 else   if (intervalTypeStr != null && volumeId != null) {
    Type type=SnapshotVO.getSnapshotType((String)intervalTypeStr);
    if (type == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + intervalTypeStr);
    }
    sc.setParameters(""String_Node_Str"",type.ordinal());
  }
 else {
    sc.setParameters(""String_Node_Str"",Snapshot.Type.TEMPLATE.ordinal());
  }
  return _snapshotDao.search(sc,searchFilter);
}","@Override public List<SnapshotVO> listSnapshots(ListSnapshotsCmd cmd){
  Long volumeId=cmd.getVolumeId();
  Boolean isRecursive=cmd.isRecursive();
  Long projectId=cmd.getProjectId();
  if (volumeId != null) {
    VolumeVO volume=_volsDao.findById(volumeId);
    if (volume != null) {
      _accountMgr.checkAccess(UserContext.current().getCaller(),null,volume);
    }
  }
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  List<Long> permittedAccounts=new ArrayList<Long>();
  if ((caller == null) || _accountMgr.isAdmin(caller.getType())) {
    if (domainId != null) {
      if ((caller != null) && !_domainDao.isChildDomain(caller.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
    }
 else     if ((caller != null) && ((caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || (caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN))) {
      domainId=caller.getDomainId();
      isRecursive=true;
    }
    if (domainId != null && accountName != null) {
      Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
      if (userAccount != null) {
        permittedAccounts.add(userAccount.getId());
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
      }
    }
  }
 else {
    permittedAccounts.add(caller.getId());
  }
  if (isRecursive == null) {
    isRecursive=false;
  }
  boolean skipProjectSnapshots=true;
  if (projectId != null) {
    if (projectId == -1) {
      permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
    }
 else {
      permittedAccounts.clear();
      Project project=_projectMgr.getProject(projectId);
      if (project == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
      }
      if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
        throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
      }
      permittedAccounts.add(project.getProjectAccountId());
    }
    skipProjectSnapshots=false;
  }
  Object name=cmd.getSnapshotName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Object snapshotTypeStr=cmd.getSnapshotType();
  Object intervalTypeStr=cmd.getIntervalType();
  Filter searchFilter=new Filter(SnapshotVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<SnapshotVO> sb=_snapshotDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getVolumeId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getsnapshotType(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getsnapshotType(),SearchCriteria.Op.NEQ);
  if ((permittedAccounts.isEmpty()) && (domainId != null)) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinType.INNER);
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    if (isRecursive) {
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    }
 else {
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    }
    accountSearch.join(""String_Node_Str"",domainSearch,accountSearch.entity().getDomainId(),domainSearch.entity().getId(),JoinType.INNER);
  }
  if (skipProjectSnapshots) {
    SearchBuilder<AccountVO> accountSearch=_accountDao.createSearchBuilder();
    accountSearch.and(""String_Node_Str"",accountSearch.entity().getType(),SearchCriteria.Op.NEQ);
    sb.join(""String_Node_Str"",accountSearch,sb.entity().getAccountId(),accountSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<SnapshotVO> sc=sb.create();
  if (skipProjectSnapshots) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",Account.ACCOUNT_TYPE_PROJECT);
  }
  if (volumeId != null) {
    sc.setParameters(""String_Node_Str"",volumeId);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (keyword != null) {
    SearchCriteria<SnapshotVO> ssc=_snapshotDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    SearchCriteria<?> joinSearch=sc.getJoin(""String_Node_Str"");
    if (isRecursive) {
      joinSearch.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      joinSearch.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (snapshotTypeStr != null) {
    Type snapshotType=SnapshotVO.getSnapshotType((String)snapshotTypeStr);
    if (snapshotType == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotTypeStr);
    }
    if (snapshotType == Type.RECURRING) {
      sc.setParameters(""String_Node_Str"",Type.HOURLY.ordinal(),Type.DAILY.ordinal(),Type.WEEKLY.ordinal(),Type.MONTHLY.ordinal());
    }
 else {
      sc.setParameters(""String_Node_Str"",snapshotType.ordinal());
    }
  }
 else   if (intervalTypeStr != null && volumeId != null) {
    Type type=SnapshotVO.getSnapshotType((String)intervalTypeStr);
    if (type == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + intervalTypeStr);
    }
    sc.setParameters(""String_Node_Str"",type.ordinal());
  }
 else {
    sc.setParameters(""String_Node_Str"",Snapshot.Type.TEMPLATE.ordinal());
  }
  return _snapshotDao.search(sc,searchFilter);
}"
89247,"@DB private boolean doDeleteHost(long hostId,boolean isForced,boolean isForceDeleteStorage){
  User caller=_accountMgr.getActiveUser(UserContext.current().getCallerUserId());
  HostVO host=_hostDao.findById(hostId);
  if (host == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + hostId + ""String_Node_Str"");
  }
  _accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),host.getDataCenterId());
  AgentAttache attache=_agentMgr.findAttache(hostId);
  List<StoragePoolHostVO> pools=_storagePoolHostDao.listByHostIdIncludingRemoved(hostId);
  ResourceStateAdapter.DeleteHostAnswer answer=(ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST,false,host,new Boolean(isForced),new Boolean(isForceDeleteStorage));
  if (answer.getIsException()) {
    return false;
  }
  if (!answer.getIsContinue()) {
    return true;
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(),host.getDataCenterId(),null);
  _agentMgr.disconnectWithoutInvestigation(hostId,Status.Event.Remove);
  _hostDetailsDao.deleteDetails(hostId);
  host.setGuid(null);
  Long clusterId=host.getClusterId();
  host.setClusterId(null);
  _hostDao.update(host.getId(),host);
  _hostDao.remove(hostId);
  if (clusterId != null) {
    List<HostVO> hosts=listAllHostsInCluster(clusterId);
    if (hosts.size() == 0) {
      ClusterVO cluster=_clusterDao.findById(clusterId);
      cluster.setGuid(null);
      _clusterDao.update(clusterId,cluster);
    }
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.DeleteHost,_nodeId);
  }
 catch (  NoTransitionException e) {
    s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
  }
  _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);
  for (  StoragePoolHostVO pool : pools) {
    Long poolId=pool.getPoolId();
    StoragePoolVO storagePool=_storagePoolDao.findById(poolId);
    if (storagePool.isLocal() && isForceDeleteStorage) {
      storagePool.setUuid(null);
      storagePool.setClusterId(null);
      _storagePoolDao.update(poolId,storagePool);
      _storagePoolDao.remove(poolId);
      s_logger.debug(""String_Node_Str"" + poolId + ""String_Node_Str""+ hostId);
    }
  }
  Object[] capacityTypes={Capacity.CAPACITY_TYPE_CPU,Capacity.CAPACITY_TYPE_MEMORY};
  SearchCriteria<CapacityVO> hostCapacitySC=_capacityDao.createSearchCriteria();
  hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hostId);
  hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,capacityTypes);
  _capacityDao.remove(hostCapacitySC);
  txn.commit();
  return true;
}","@DB private boolean doDeleteHost(long hostId,boolean isForced,boolean isForceDeleteStorage){
  User caller=_accountMgr.getActiveUser(UserContext.current().getCallerUserId());
  HostVO host=_hostDao.findById(hostId);
  if (host == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + hostId + ""String_Node_Str"");
  }
  _accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),host.getDataCenterId());
  AgentAttache attache=_agentMgr.findAttache(hostId);
  List<StoragePoolHostVO> pools=_storagePoolHostDao.listByHostIdIncludingRemoved(hostId);
  ResourceStateAdapter.DeleteHostAnswer answer=(ResourceStateAdapter.DeleteHostAnswer)dispatchToStateAdapters(ResourceStateAdapter.Event.DELETE_HOST,false,host,new Boolean(isForced),new Boolean(isForceDeleteStorage));
  if (answer == null) {
    s_logger.warn(""String_Node_Str"" + hostId);
    return false;
  }
  if (answer.getIsException()) {
    return false;
  }
  if (!answer.getIsContinue()) {
    return true;
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _dcDao.releasePrivateIpAddress(host.getPrivateIpAddress(),host.getDataCenterId(),null);
  _agentMgr.disconnectWithoutInvestigation(hostId,Status.Event.Remove);
  _hostDetailsDao.deleteDetails(hostId);
  host.setGuid(null);
  Long clusterId=host.getClusterId();
  host.setClusterId(null);
  _hostDao.update(host.getId(),host);
  _hostDao.remove(hostId);
  if (clusterId != null) {
    List<HostVO> hosts=listAllHostsInCluster(clusterId);
    if (hosts.size() == 0) {
      ClusterVO cluster=_clusterDao.findById(clusterId);
      cluster.setGuid(null);
      _clusterDao.update(clusterId,cluster);
    }
  }
  try {
    resourceStateTransitTo(host,ResourceState.Event.DeleteHost,_nodeId);
  }
 catch (  NoTransitionException e) {
    s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str"",e);
  }
  _storagePoolHostDao.deletePrimaryRecordsForHost(hostId);
  for (  StoragePoolHostVO pool : pools) {
    Long poolId=pool.getPoolId();
    StoragePoolVO storagePool=_storagePoolDao.findById(poolId);
    if (storagePool.isLocal() && isForceDeleteStorage) {
      storagePool.setUuid(null);
      storagePool.setClusterId(null);
      _storagePoolDao.update(poolId,storagePool);
      _storagePoolDao.remove(poolId);
      s_logger.debug(""String_Node_Str"" + poolId + ""String_Node_Str""+ hostId);
    }
  }
  Object[] capacityTypes={Capacity.CAPACITY_TYPE_CPU,Capacity.CAPACITY_TYPE_MEMORY};
  SearchCriteria<CapacityVO> hostCapacitySC=_capacityDao.createSearchCriteria();
  hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hostId);
  hostCapacitySC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,capacityTypes);
  _capacityDao.remove(hostCapacitySC);
  txn.commit();
  return true;
}"
89248,"@Override public boolean addVirtualMachineIntoNetwork(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> profile,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException {
  Long zoneId=profile.getVirtualMachine().getDataCenterIdToDeployIn();
  Long podId=profile.getVirtualMachine().getPodIdToDeployIn();
  List<HostVO> hosts=_resourceMgr.listAllUpAndEnabledHosts(Type.ExternalDhcp,null,podId,zoneId);
  if (hosts.size() == 0) {
    throw new CloudRuntimeException(""String_Node_Str"" + zoneId + ""String_Node_Str""+ podId);
  }
  if (hosts.size() > 1) {
    throw new CloudRuntimeException(""String_Node_Str"" + zoneId + ""String_Node_Str""+ podId);
  }
  HostVO h=hosts.get(0);
  String dns=nic.getDns1();
  if (dns == null) {
    dns=nic.getDns2();
  }
  DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),profile.getVirtualMachine().getHostName(),dns,nic.getGateway());
  dhcpCommand.setDefaultRouter(_nicDao.findDefaultNicForVM(profile.getVirtualMachine().getId()).getGateway());
  String errMsg=String.format(""String_Node_Str"",h.getPrivateIpAddress(),nic.getIp4Address(),nic.getMacAddress(),profile.getVirtualMachine().getHostName());
  try {
    Answer ans=_agentMgr.send(h.getId(),dhcpCommand);
    if (ans.getResult()) {
      s_logger.debug(String.format(""String_Node_Str"",h.getPrivateIpAddress(),nic.getIp4Address(),nic.getMacAddress(),profile.getVirtualMachine().getHostName()));
      return true;
    }
 else {
      s_logger.debug(errMsg + ""String_Node_Str"" + ans.getDetails());
      throw new ResourceUnavailableException(errMsg,DataCenter.class,zoneId);
    }
  }
 catch (  Exception e) {
    s_logger.debug(errMsg,e);
    throw new ResourceUnavailableException(errMsg + e.getMessage(),DataCenter.class,zoneId);
  }
}","@Override public boolean addVirtualMachineIntoNetwork(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> profile,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException {
  Long zoneId=profile.getVirtualMachine().getDataCenterIdToDeployIn();
  Long podId=profile.getVirtualMachine().getPodIdToDeployIn();
  List<HostVO> hosts=_resourceMgr.listAllUpAndEnabledHosts(Type.ExternalDhcp,null,podId,zoneId);
  if (hosts.size() == 0) {
    throw new CloudRuntimeException(""String_Node_Str"" + zoneId + ""String_Node_Str""+ podId);
  }
  if (hosts.size() > 1) {
    throw new CloudRuntimeException(""String_Node_Str"" + zoneId + ""String_Node_Str""+ podId);
  }
  HostVO h=hosts.get(0);
  String dns=nic.getDns1();
  if (dns == null) {
    dns=nic.getDns2();
  }
  DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),profile.getVirtualMachine().getHostName(),dns,nic.getGateway());
  String errMsg=String.format(""String_Node_Str"",h.getPrivateIpAddress(),nic.getIp4Address(),nic.getMacAddress(),profile.getVirtualMachine().getHostName());
  try {
    Answer ans=_agentMgr.send(h.getId(),dhcpCommand);
    if (ans.getResult()) {
      s_logger.debug(String.format(""String_Node_Str"",h.getPrivateIpAddress(),nic.getIp4Address(),nic.getMacAddress(),profile.getVirtualMachine().getHostName()));
      return true;
    }
 else {
      s_logger.debug(errMsg + ""String_Node_Str"" + ans.getDetails());
      throw new ResourceUnavailableException(errMsg,DataCenter.class,zoneId);
    }
  }
 catch (  Exception e) {
    s_logger.debug(errMsg,e);
    throw new ResourceUnavailableException(errMsg + e.getMessage(),DataCenter.class,zoneId);
  }
}"
89249,"@Override public List<VirtualRouter> applyDhcpEntry(Network network,NicProfile nic,VirtualMachineProfile<UserVm> profile,DeployDestination dest,ReservationContext context,List<DomainRouterVO> routers) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  List<VirtualRouter> rets=new ArrayList<VirtualRouter>(routers.size());
  _userVmDao.loadDetails((UserVmVO)profile.getVirtualMachine());
  DataCenter dc=dest.getDataCenter();
  String serviceOffering=_serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();
  String zoneName=_dcDao.findById(network.getDataCenterId()).getName();
  boolean isZoneBasic=(dc.getNetworkType() == NetworkType.Basic);
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  for (  DomainRouterVO router : routers) {
    boolean sendDnsDhcpData=true;
    if (router.getState() != State.Running) {
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    if (router.isStopPending()) {
      if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
        throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",VirtualRouter.class,router.getId());
      }
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    Long podId=null;
    if (isZoneBasic) {
      podId=dest.getPod().getId();
      if (router.getPodIdToDeployIn().longValue() != podId.longValue()) {
        if (_dnsBasicZoneUpdates.equalsIgnoreCase(""String_Node_Str"")) {
          sendDnsDhcpData=false;
        }
      }
    }
    Commands cmds=new Commands(OnError.Stop);
    String routerControlIpAddress=null;
    List<NicVO> nics=_nicDao.listByVmId(router.getId());
    for (    NicVO n : nics) {
      NetworkVO nc=_networkDao.findById(n.getNetworkId());
      if (nc.getTrafficType() == TrafficType.Control) {
        routerControlIpAddress=n.getIp4Address();
      }
    }
    if (sendDnsDhcpData) {
      DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),profile.getVirtualMachine().getHostName());
      dhcpCommand.setDefaultRouter(_nicDao.findDefaultNicForVM(profile.getVirtualMachine().getId()).getGateway());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP,routerControlIpAddress);
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
      cmds.addCommand(""String_Node_Str"",dhcpCommand);
    }
    if (cmds.size() > 0) {
      boolean podLevelException=false;
      if (isZoneBasic && podId != null && profile.getVirtualMachine().getType() == VirtualMachine.Type.User && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == Network.GuestType.Shared) {
        podLevelException=true;
      }
      try {
        _agentMgr.send(router.getHostId(),cmds);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
catch (      OperationTimedoutException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
      connectedRouters.add(router);
      Answer answer=cmds.getAnswer(""String_Node_Str"");
      if (!answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ router.getHostName()+ ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
    }
    rets.add(router);
  }
  String msg=""String_Node_Str"";
  if (!connectedRouters.isEmpty()) {
    handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,VirtualRouter.class,disconnectedRouters.get(0).getId());
  }
  return rets;
}","@Override public List<VirtualRouter> applyDhcpEntry(Network network,NicProfile nic,VirtualMachineProfile<UserVm> profile,DeployDestination dest,ReservationContext context,List<DomainRouterVO> routers) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  List<VirtualRouter> rets=new ArrayList<VirtualRouter>(routers.size());
  _userVmDao.loadDetails((UserVmVO)profile.getVirtualMachine());
  DataCenter dc=dest.getDataCenter();
  String serviceOffering=_serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();
  String zoneName=_dcDao.findById(network.getDataCenterId()).getName();
  boolean isZoneBasic=(dc.getNetworkType() == NetworkType.Basic);
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  for (  DomainRouterVO router : routers) {
    boolean sendDnsDhcpData=true;
    if (router.getState() != State.Running) {
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    if (router.isStopPending()) {
      if (_hostDao.findById(router.getHostId()).getStatus() == Status.Up) {
        throw new ResourceUnavailableException(""String_Node_Str"" + router.getInstanceName() + ""String_Node_Str"",VirtualRouter.class,router.getId());
      }
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    Long podId=null;
    if (isZoneBasic) {
      podId=dest.getPod().getId();
      if (router.getPodIdToDeployIn().longValue() != podId.longValue()) {
        if (_dnsBasicZoneUpdates.equalsIgnoreCase(""String_Node_Str"")) {
          sendDnsDhcpData=false;
        }
      }
    }
    Commands cmds=new Commands(OnError.Stop);
    String routerControlIpAddress=null;
    List<NicVO> nics=_nicDao.listByVmId(router.getId());
    for (    NicVO n : nics) {
      NetworkVO nc=_networkDao.findById(n.getNetworkId());
      if (nc.getTrafficType() == TrafficType.Control) {
        routerControlIpAddress=n.getIp4Address();
      }
    }
    if (sendDnsDhcpData) {
      DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),profile.getVirtualMachine().getHostName());
      String defaultDhcpIp=findDefaultDhcpIp(profile.getVirtualMachine().getId());
      dhcpCommand.setDefaultRouter(defaultDhcpIp);
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP,routerControlIpAddress);
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
      cmds.addCommand(""String_Node_Str"",dhcpCommand);
    }
    if (cmds.size() > 0) {
      boolean podLevelException=false;
      if (isZoneBasic && podId != null && profile.getVirtualMachine().getType() == VirtualMachine.Type.User && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == Network.GuestType.Shared) {
        podLevelException=true;
      }
      try {
        _agentMgr.send(router.getHostId(),cmds);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
catch (      OperationTimedoutException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
      connectedRouters.add(router);
      Answer answer=cmds.getAnswer(""String_Node_Str"");
      if (!answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ router.getHostName()+ ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
    }
    rets.add(router);
  }
  String msg=""String_Node_Str"";
  if (!connectedRouters.isEmpty()) {
    handleSingleWorkingRedundantRouter(connectedRouters,disconnectedRouters,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,VirtualRouter.class,disconnectedRouters.get(0).getId());
  }
  return rets;
}"
89250,"private void createDhcpEntriesCommands(DomainRouterVO router,Commands cmds){
  long networkId=router.getNetworkId();
  List<UserVmVO> vms=_userVmDao.listByNetworkIdAndStates(networkId,State.Running,State.Migrating,State.Stopping);
  DataCenterVO dc=_dcDao.findById(router.getDataCenterIdToDeployIn());
  for (  UserVmVO vm : vms) {
    boolean createDhcp=true;
    if (dc.getNetworkType() == NetworkType.Basic && router.getPodIdToDeployIn().longValue() != vm.getPodIdToDeployIn().longValue() && _dnsBasicZoneUpdates.equalsIgnoreCase(""String_Node_Str"")) {
      createDhcp=false;
    }
    if (createDhcp) {
      NicVO nic=_nicDao.findByInstanceIdAndNetworkId(networkId,vm.getId());
      if (nic != null) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ router+ ""String_Node_Str"");
        DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),vm.getHostName());
        dhcpCommand.setDefaultRouter(_nicDao.findDefaultNicForVM(vm.getId()).getGateway());
        dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
        dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
        DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
        dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
        cmds.addCommand(""String_Node_Str"",dhcpCommand);
      }
    }
  }
}","private void createDhcpEntriesCommands(DomainRouterVO router,Commands cmds){
  long networkId=router.getNetworkId();
  List<UserVmVO> vms=_userVmDao.listByNetworkIdAndStates(networkId,State.Running,State.Migrating,State.Stopping);
  DataCenterVO dc=_dcDao.findById(router.getDataCenterIdToDeployIn());
  for (  UserVmVO vm : vms) {
    boolean createDhcp=true;
    if (dc.getNetworkType() == NetworkType.Basic && router.getPodIdToDeployIn().longValue() != vm.getPodIdToDeployIn().longValue() && _dnsBasicZoneUpdates.equalsIgnoreCase(""String_Node_Str"")) {
      createDhcp=false;
    }
    if (createDhcp) {
      NicVO nic=_nicDao.findByInstanceIdAndNetworkId(networkId,vm.getId());
      if (nic != null) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ router+ ""String_Node_Str"");
        DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),vm.getHostName());
        dhcpCommand.setDefaultRouter(findDefaultDhcpIp(vm.getId()));
        dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
        dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
        DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
        dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
        cmds.addCommand(""String_Node_Str"",dhcpCommand);
      }
    }
  }
}"
89251,"@Override public String getConsoleAccessUrlRoot(long vmId){
  VMInstanceVO vm=_vmMgr.findById(vmId);
  if (vm != null) {
    ConsoleProxyInfo proxy=getConsoleProxyForUserVm(vm.getDataCenterIdToDeployIn(),vmId);
    if (proxy != null) {
      return proxy.getProxyImageUrl();
    }
  }
  return null;
}","@Override public String getConsoleAccessUrlRoot(long vmId){
  VMInstanceVO vm=_vmInstanceDao.findById(vmId);
  if (vm != null) {
    ConsoleProxyInfo proxy=getConsoleProxyForVm(vm.getDataCenterIdToDeployIn(),vmId);
    if (proxy != null) {
      return proxy.getProxyImageUrl();
    }
  }
  return null;
}"
89252,"@Override public void create() throws ResourceAllocationException {
  try {
    IpAddress ip=_networkService.allocateIP(this);
    if (ip != null) {
      this.setEntityId(ip.getId());
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
catch (  InsufficientAddressCapacityException ex) {
    s_logger.info(ex);
    s_logger.trace(ex);
    throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
}","@Override public void create() throws ResourceAllocationException {
  try {
    IpAddress ip=_networkService.allocateIP(getNetworkId(),_accountService.getAccount(getEntityOwnerId()));
    if (ip != null) {
      this.setEntityId(ip.getId());
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
catch (  InsufficientAddressCapacityException ex) {
    s_logger.info(ex);
    s_logger.trace(ex);
    throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
}"
89253,"IpAddress allocateIP(AssociateIPAddrCmd cmd) throws ResourceAllocationException, InsufficientAddressCapacityException, ConcurrentOperationException ;","IpAddress allocateIP(long networkId,Account ipOwner) throws ResourceAllocationException, InsufficientAddressCapacityException, ConcurrentOperationException ;"
89254,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NET_IP_ASSIGN,eventDescription=""String_Node_Str"",create=true) public IpAddress allocateIP(AssociateIPAddrCmd cmd) throws ResourceAllocationException, InsufficientAddressCapacityException, ConcurrentOperationException {
  String accountName=cmd.getAccountName();
  long domainId=cmd.getDomainId();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  long userId=UserContext.current().getCallerUserId();
  Account ipOwner=_accountMgr.getActiveAccountByName(accountName,domainId);
  if (ipOwner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId+ ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,null,ipOwner);
  DataCenterVO zone=null;
  if (zoneId != null) {
    zone=_dcDao.findById(zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
    if (zone.getNetworkType() == NetworkType.Basic) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getType())) {
      throw new PermissionDeniedException(""String_Node_Str"" + zoneId);
    }
  }
  long ownerId=ipOwner.getId();
  Long networkId=cmd.getNetworkId();
  Network network=null;
  if (networkId != null) {
    network=_networksDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
  }
  if (zone.getNetworkType() != NetworkType.Basic && network.getAccountId() != ipOwner.getId()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  VlanType vlanType=VlanType.VirtualNetwork;
  boolean assign=false;
  if (zone.getNetworkType() == NetworkType.Basic) {
    if (network.getTrafficType() == TrafficType.Guest) {
      vlanType=VlanType.DirectAttached;
      assign=true;
    }
  }
  PublicIp ip=null;
  Transaction txn=Transaction.currentTxn();
  Account accountToLock=null;
  try {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + userId + ""String_Node_Str""+ ownerId);
    }
    accountToLock=_accountDao.acquireInLockTable(ownerId);
    if (accountToLock == null) {
      s_logger.warn(""String_Node_Str"" + ownerId);
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    _resourceLimitMgr.checkResourceLimit(accountToLock,ResourceType.public_ip);
    boolean isSourceNat=false;
    txn.start();
    boolean sharedSourceNat=false;
    Map<Network.Capability,String> sourceNatCapabilities=getNetworkServiceCapabilities(network.getId(),Service.SourceNat);
    if (sourceNatCapabilities != null) {
      String supportedSourceNatTypes=sourceNatCapabilities.get(Capability.SupportedSourceNatTypes).toLowerCase();
      if (supportedSourceNatTypes.contains(""String_Node_Str"")) {
        sharedSourceNat=true;
      }
    }
    if (!sharedSourceNat) {
      List<IPAddressVO> addrs=listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,true,networkId);
      if (addrs.isEmpty() && network.getGuestType() == Network.GuestType.Isolated) {
        isSourceNat=true;
      }
    }
    ip=fetchNewPublicIp(zoneId,null,null,ipOwner,vlanType,network.getId(),isSourceNat,assign,null);
    if (ip == null) {
      throw new InsufficientAddressCapacityException(""String_Node_Str"",DataCenter.class,zoneId);
    }
    UserContext.current().setEventDetails(""String_Node_Str"" + ip.getId());
    Ip ipAddress=ip.getAddress();
    s_logger.debug(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ ipOwner.getId()+ ""String_Node_Str""+ network.getDataCenterId());
    txn.commit();
  }
  finally {
    if (accountToLock != null) {
      _accountDao.releaseFromLockTable(ownerId);
      s_logger.debug(""String_Node_Str"");
    }
  }
  return ip;
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NET_IP_ASSIGN,eventDescription=""String_Node_Str"",create=true) public IpAddress allocateIP(long networkId,Account ipOwner) throws ResourceAllocationException, InsufficientAddressCapacityException, ConcurrentOperationException {
  Account caller=UserContext.current().getCaller();
  long userId=UserContext.current().getCallerUserId();
  _accountMgr.checkAccess(caller,null,ipOwner);
  long ownerId=ipOwner.getId();
  Network network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  DataCenter zone=_configMgr.getZone(network.getDataCenterId());
  if (zone.getNetworkType() != NetworkType.Basic && network.getAccountId() != ipOwner.getId()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  VlanType vlanType=VlanType.VirtualNetwork;
  boolean assign=false;
  if (zone.getNetworkType() == NetworkType.Basic) {
    if (network.getTrafficType() == TrafficType.Guest) {
      vlanType=VlanType.DirectAttached;
      assign=true;
    }
  }
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(caller.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zone.getId());
  }
  PublicIp ip=null;
  Transaction txn=Transaction.currentTxn();
  Account accountToLock=null;
  try {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + userId + ""String_Node_Str""+ ownerId);
    }
    accountToLock=_accountDao.acquireInLockTable(ownerId);
    if (accountToLock == null) {
      s_logger.warn(""String_Node_Str"" + ownerId);
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    _resourceLimitMgr.checkResourceLimit(accountToLock,ResourceType.public_ip);
    boolean isSourceNat=false;
    txn.start();
    boolean sharedSourceNat=false;
    Map<Network.Capability,String> sourceNatCapabilities=getNetworkServiceCapabilities(network.getId(),Service.SourceNat);
    if (sourceNatCapabilities != null) {
      String supportedSourceNatTypes=sourceNatCapabilities.get(Capability.SupportedSourceNatTypes).toLowerCase();
      if (supportedSourceNatTypes.contains(""String_Node_Str"")) {
        sharedSourceNat=true;
      }
    }
    if (!sharedSourceNat) {
      List<IPAddressVO> addrs=listPublicIpAddressesInVirtualNetwork(ownerId,zone.getId(),true,networkId);
      if (addrs.isEmpty() && network.getGuestType() == Network.GuestType.Isolated) {
        isSourceNat=true;
      }
    }
    ip=fetchNewPublicIp(zone.getId(),null,null,ipOwner,vlanType,network.getId(),isSourceNat,assign,null);
    if (ip == null) {
      throw new InsufficientAddressCapacityException(""String_Node_Str"",DataCenter.class,zone.getId());
    }
    UserContext.current().setEventDetails(""String_Node_Str"" + ip.getId());
    Ip ipAddress=ip.getAddress();
    s_logger.debug(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ ipOwner.getId()+ ""String_Node_Str""+ network.getDataCenterId());
    txn.commit();
  }
  finally {
    if (accountToLock != null) {
      _accountDao.releaseFromLockTable(ownerId);
      s_logger.debug(""String_Node_Str"");
    }
  }
  return ip;
}"
89255,"@Override public IpAddress allocateIP(AssociateIPAddrCmd cmd) throws ResourceAllocationException, InsufficientAddressCapacityException, ConcurrentOperationException {
  return null;
}","@Override public IpAddress allocateIP(long networkId,Account ipOwner) throws ResourceAllocationException, InsufficientAddressCapacityException, ConcurrentOperationException {
  return null;
}"
89256,"public Long getSourceIpAddressId(){
  return publicIpId;
}","public Long getSourceIpAddressId(){
  IpAddress ipAddr=_networkService.getIp(publicIpId);
  if (ipAddr == null || !ipAddr.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddr.getId());
  }
  return publicIpId;
}"
89257,"public long getDomainId(){
  if (publicIpId != null)   return _networkService.getIp(getPublicIpId()).getDomainId();
  if (domainId != null) {
    return domainId;
  }
  return UserContext.current().getCaller().getDomainId();
}","public long getDomainId(){
  if (publicIpId != null)   return _networkService.getIp(getSourceIpAddressId()).getDomainId();
  if (domainId != null) {
    return domainId;
  }
  return UserContext.current().getCaller().getDomainId();
}"
89258,"public long getAccountId(){
  if (publicIpId != null)   return _networkService.getIp(getPublicIpId()).getAccountId();
  Account account=UserContext.current().getCaller();
  if ((account == null)) {
    if ((domainId != null) && (accountName != null)) {
      Account userAccount=_responseGenerator.findAccountByNameDomain(accountName,domainId);
      if (userAccount != null) {
        return userAccount.getId();
      }
    }
  }
  if (account != null) {
    return account.getId();
  }
  return Account.ACCOUNT_ID_SYSTEM;
}","public long getAccountId(){
  if (publicIpId != null)   return _networkService.getIp(getSourceIpAddressId()).getAccountId();
  Account account=UserContext.current().getCaller();
  if ((account == null)) {
    if ((domainId != null) && (accountName != null)) {
      Account userAccount=_responseGenerator.findAccountByNameDomain(accountName,domainId);
      if (userAccount != null) {
        return userAccount.getId();
      }
    }
  }
  if (account != null) {
    return account.getId();
  }
  return Account.ACCOUNT_ID_SYSTEM;
}"
89259,"@DB public PublicIp allocIp(CreateLoadBalancerRuleCmd lb,Account account) throws InsufficientAddressCapacityException {
  List<NetworkVO> networks=_networkDao.listByZoneAndTrafficType(lb.getZoneId(),TrafficType.Guest);
  if (networks.isEmpty()) {
    s_logger.warn(""String_Node_Str"" + TrafficType.Guest + ""String_Node_Str""+ lb.getZoneId());
    return null;
  }
  Network frontEndNetwork=networks.get(0);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  PublicIp ip=_networkMgr.assignPublicIpAddress(lb.getZoneId(),null,account,VlanType.DirectAttached,frontEndNetwork.getId(),null);
  IPAddressVO ipvo=_ipAddressDao.findById(ip.getId());
  ipvo.setAssociatedWithNetworkId(frontEndNetwork.getId());
  _ipAddressDao.update(ipvo.getId(),ipvo);
  txn.commit();
  s_logger.info(""String_Node_Str"" + ip);
  return ip;
}","@DB public PublicIp allocIp(CreateLoadBalancerRuleCmd lb,Account account) throws InsufficientAddressCapacityException {
  if (lb.getZoneId() == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + Network.Provider.ElasticLoadBalancerVm.getName());
  }
  List<NetworkVO> networks=_networkDao.listByZoneAndTrafficType(lb.getZoneId(),TrafficType.Guest);
  if (networks.isEmpty()) {
    s_logger.warn(""String_Node_Str"" + TrafficType.Guest + ""String_Node_Str""+ lb.getZoneId());
    return null;
  }
  Network frontEndNetwork=networks.get(0);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  PublicIp ip=_networkMgr.assignPublicIpAddress(lb.getZoneId(),null,account,VlanType.DirectAttached,frontEndNetwork.getId(),null);
  IPAddressVO ipvo=_ipAddressDao.findById(ip.getId());
  ipvo.setAssociatedWithNetworkId(frontEndNetwork.getId());
  _ipAddressDao.update(ipvo.getId(),ipvo);
  txn.commit();
  s_logger.info(""String_Node_Str"" + ip);
  return ip;
}"
89260,"public boolean listInReadyState(){
  Account account=UserContext.current().getCaller();
  boolean isAccountSpecific=(account == null || isAdmin(account.getType())) && (getAccountName() != null) && (getDomainId() != null);
  TemplateFilter templateFilter=TemplateFilter.valueOf(getIsoFilter());
  boolean onlyReady=(templateFilter == TemplateFilter.featured) || (templateFilter == TemplateFilter.selfexecutable) || (templateFilter == TemplateFilter.sharedexecutable)|| (templateFilter == TemplateFilter.executable && isAccountSpecific)|| (templateFilter == TemplateFilter.community);
  return onlyReady;
}","public boolean listInReadyState(){
  Account account=UserContext.current().getCaller();
  boolean isAccountSpecific=(account == null || isAdmin(account.getType())) && (getAccountName() != null) && (getDomainId() != null);
  TemplateFilter templateFilter=TemplateFilter.valueOf(getIsoFilter());
  boolean onlyReady=(templateFilter == TemplateFilter.featured) || (templateFilter == TemplateFilter.selfexecutable) || (templateFilter == TemplateFilter.sharedexecutable)|| (templateFilter == TemplateFilter.executable && isAccountSpecific)|| (templateFilter == TemplateFilter.community);
  if (!onlyReady) {
    if (isReady() != null && isReady().booleanValue() != onlyReady) {
      onlyReady=isReady().booleanValue();
    }
  }
  return onlyReady;
}"
89261,"@Override @DB public long addTemplateToZone(VMTemplateVO tmplt,long zoneId){
  Transaction txn=Transaction.currentTxn();
  txn.start();
  VMTemplateVO tmplt2=findById(tmplt.getId());
  if (tmplt2 == null) {
    persist(tmplt);
    if (tmplt.getDetails() != null) {
      _templateDetailsDao.persist(tmplt.getId(),tmplt.getDetails());
    }
  }
  VMTemplateZoneVO tmpltZoneVO=_templateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
  if (tmpltZoneVO == null) {
    tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
    _templateZoneDao.persist(tmpltZoneVO);
  }
 else {
    tmpltZoneVO.setRemoved(null);
    tmpltZoneVO.setLastUpdated(new Date());
    _templateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
  }
  txn.commit();
  return tmplt.getId();
}","@Override @DB public long addTemplateToZone(VMTemplateVO tmplt,long zoneId){
  Transaction txn=Transaction.currentTxn();
  txn.start();
  VMTemplateVO tmplt2=findById(tmplt.getId());
  if (tmplt2 == null) {
    if (persist(tmplt) == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + tmplt);
    }
    if (tmplt.getDetails() != null) {
      _templateDetailsDao.persist(tmplt.getId(),tmplt.getDetails());
    }
  }
  VMTemplateZoneVO tmpltZoneVO=_templateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
  if (tmpltZoneVO == null) {
    tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
    _templateZoneDao.persist(tmpltZoneVO);
  }
 else {
    tmpltZoneVO.setRemoved(null);
    tmpltZoneVO.setLastUpdated(new Date());
    _templateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
  }
  txn.commit();
  return tmplt.getId();
}"
89262,"@Override public VMTemplateVO create(TemplateProfile profile){
  VMTemplateVO template=persistTemplate(profile);
  _downloadMonitor.downloadTemplateToStorage(template,profile.getZoneId());
  _resourceLimitMgr.incrementResourceCount(profile.getAccountId(),ResourceType.template);
  return template;
}","@Override public VMTemplateVO create(TemplateProfile profile){
  VMTemplateVO template=persistTemplate(profile);
  if (template == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + profile.getTemplate());
  }
  _downloadMonitor.downloadTemplateToStorage(template,profile.getZoneId());
  _resourceLimitMgr.incrementResourceCount(profile.getAccountId(),ResourceType.template);
  return template;
}"
89263,"protected VMTemplateVO persistTemplate(TemplateProfile profile){
  Long zoneId=profile.getZoneId();
  VMTemplateVO template=new VMTemplateVO(profile.getTemplateId(),profile.getName(),profile.getFormat(),profile.getIsPublic(),profile.getFeatured(),profile.getIsExtractable(),TemplateType.USER,profile.getUrl(),profile.getRequiresHVM(),profile.getBits(),profile.getAccountId(),profile.getCheckSum(),profile.getDisplayText(),profile.getPasswordEnabled(),profile.getGuestOsId(),profile.getBootable(),profile.getHypervisorType(),profile.getTemplateTag(),profile.getDetails());
  if (zoneId == null || zoneId == -1) {
    List<DataCenterVO> dcs=_dcDao.listAllIncludingRemoved();
    for (    DataCenterVO dc : dcs) {
      _tmpltDao.addTemplateToZone(template,dc.getId());
    }
    template.setCrossZones(true);
  }
 else {
    _tmpltDao.addTemplateToZone(template,zoneId);
  }
  return template;
}","protected VMTemplateVO persistTemplate(TemplateProfile profile){
  Long zoneId=profile.getZoneId();
  VMTemplateVO template=new VMTemplateVO(profile.getTemplateId(),profile.getName(),profile.getFormat(),profile.getIsPublic(),profile.getFeatured(),profile.getIsExtractable(),TemplateType.USER,profile.getUrl(),profile.getRequiresHVM(),profile.getBits(),profile.getAccountId(),profile.getCheckSum(),profile.getDisplayText(),profile.getPasswordEnabled(),profile.getGuestOsId(),profile.getBootable(),profile.getHypervisorType(),profile.getTemplateTag(),profile.getDetails());
  if (zoneId == null || zoneId == -1) {
    List<DataCenterVO> dcs=_dcDao.listAll();
    if (dcs.isEmpty()) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    for (    DataCenterVO dc : dcs) {
      _tmpltDao.addTemplateToZone(template,dc.getId());
    }
    template.setCrossZones(true);
  }
 else {
    _tmpltDao.addTemplateToZone(template,zoneId);
  }
  return _tmpltDao.findById(template.getId());
}"
89264,"@Override @DB public SnapshotPolicyVO createPolicy(CreateSnapshotPolicyCmd cmd){
  Long volumeId=cmd.getVolumeId();
  VolumeVO volume=_volsDao.findById(cmd.getVolumeId());
  if (volume == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId);
  }
  _accountMgr.checkAccess(UserContext.current().getCaller(),null,volume);
  if (volume.getState() != Volume.State.Ready) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ Volume.State.Ready+ ""String_Node_Str""+ volume.getState()+ ""String_Node_Str"");
  }
  if (volume.getTemplateId() != null) {
    VMTemplateVO template=_templateDao.findById(volume.getTemplateId());
    if (template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  AccountVO owner=_accountDao.findById(volume.getAccountId());
  Long instanceId=volume.getInstanceId();
  if (instanceId != null) {
    if (_vmDao.findById(instanceId) == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  IntervalType intvType=DateUtil.IntervalType.getIntervalType(cmd.getIntervalType());
  if (intvType == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getIntervalType());
  }
  Type type=getSnapshotType(intvType);
  TimeZone timeZone=TimeZone.getTimeZone(cmd.getTimezone());
  String timezoneId=timeZone.getID();
  if (!timezoneId.equals(cmd.getTimezone())) {
    s_logger.warn(""String_Node_Str"" + timezoneId + ""String_Node_Str""+ cmd.getTimezone());
  }
  try {
    DateUtil.getNextRunTime(intvType,cmd.getSchedule(),timezoneId,null);
  }
 catch (  Exception e) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getSchedule() + ""String_Node_Str""+ cmd.getIntervalType());
  }
  if (cmd.getMaxSnaps() <= 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  int intervalMaxSnaps=type.getMax();
  if (cmd.getMaxSnaps() > intervalMaxSnaps) {
    throw new InvalidParameterValueException(""String_Node_Str"" + intervalMaxSnaps + ""String_Node_Str""+ cmd.getIntervalType());
  }
  long accountLimit=_resourceLimitMgr.findCorrectResourceLimitForAccount(owner,ResourceType.snapshot);
  long domainLimit=_resourceLimitMgr.findCorrectResourceLimitForDomain(null,ResourceType.snapshot);
  int max=cmd.getMaxSnaps().intValue();
  if (owner.getType() != Account.ACCOUNT_TYPE_ADMIN && ((accountLimit != -1 && max > accountLimit) || (domainLimit != -1 && max > domainLimit))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  SnapshotPolicyVO policy=_snapshotPolicyDao.findOneByVolumeInterval(volumeId,intvType);
  if (policy == null) {
    policy=new SnapshotPolicyVO(volumeId,cmd.getSchedule(),timezoneId,intvType,cmd.getMaxSnaps());
    policy=_snapshotPolicyDao.persist(policy);
    _snapSchedMgr.scheduleNextSnapshotJob(policy);
  }
 else {
    try {
      policy=_snapshotPolicyDao.acquireInLockTable(policy.getId());
      policy.setSchedule(cmd.getSchedule());
      policy.setTimezone(timezoneId);
      policy.setInterval((short)intvType.ordinal());
      policy.setMaxSnaps(cmd.getMaxSnaps());
      policy.setActive(true);
      _snapshotPolicyDao.update(policy.getId(),policy);
    }
  finally {
      if (policy != null) {
        _snapshotPolicyDao.releaseFromLockTable(policy.getId());
      }
    }
  }
  return policy;
}","@Override @DB public SnapshotPolicyVO createPolicy(CreateSnapshotPolicyCmd cmd){
  Long volumeId=cmd.getVolumeId();
  VolumeVO volume=_volsDao.findById(cmd.getVolumeId());
  if (volume == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId);
  }
  _accountMgr.checkAccess(UserContext.current().getCaller(),null,volume);
  if (volume.getState() != Volume.State.Ready) {
    throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str""+ Volume.State.Ready+ ""String_Node_Str""+ volume.getState()+ ""String_Node_Str"");
  }
  if (volume.getTemplateId() != null) {
    VMTemplateVO template=_templateDao.findById(volume.getTemplateId());
    if (template != null && template.getTemplateType() == Storage.TemplateType.SYSTEM) {
      throw new InvalidParameterValueException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  AccountVO owner=_accountDao.findById(volume.getAccountId());
  Long instanceId=volume.getInstanceId();
  if (instanceId != null) {
    if (_vmDao.findById(instanceId) == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  IntervalType intvType=DateUtil.IntervalType.getIntervalType(cmd.getIntervalType());
  if (intvType == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getIntervalType());
  }
  Type type=getSnapshotType(intvType);
  TimeZone timeZone=TimeZone.getTimeZone(cmd.getTimezone());
  String timezoneId=timeZone.getID();
  if (!timezoneId.equals(cmd.getTimezone())) {
    s_logger.warn(""String_Node_Str"" + timezoneId + ""String_Node_Str""+ cmd.getTimezone());
  }
  try {
    DateUtil.getNextRunTime(intvType,cmd.getSchedule(),timezoneId,null);
  }
 catch (  Exception e) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getSchedule() + ""String_Node_Str""+ cmd.getIntervalType());
  }
  if (cmd.getMaxSnaps() <= 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  int intervalMaxSnaps=type.getMax();
  if (cmd.getMaxSnaps() > intervalMaxSnaps) {
    throw new InvalidParameterValueException(""String_Node_Str"" + intervalMaxSnaps + ""String_Node_Str""+ cmd.getIntervalType());
  }
  long accountLimit=_resourceLimitMgr.findCorrectResourceLimitForAccount(owner,ResourceType.snapshot);
  long domainLimit=_resourceLimitMgr.findCorrectResourceLimitForDomain(_domainMgr.getDomain(owner.getDomainId()),ResourceType.snapshot);
  int max=cmd.getMaxSnaps().intValue();
  if (owner.getType() != Account.ACCOUNT_TYPE_ADMIN && ((accountLimit != -1 && max > accountLimit) || (domainLimit != -1 && max > domainLimit))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  SnapshotPolicyVO policy=_snapshotPolicyDao.findOneByVolumeInterval(volumeId,intvType);
  if (policy == null) {
    policy=new SnapshotPolicyVO(volumeId,cmd.getSchedule(),timezoneId,intvType,cmd.getMaxSnaps());
    policy=_snapshotPolicyDao.persist(policy);
    _snapSchedMgr.scheduleNextSnapshotJob(policy);
  }
 else {
    try {
      policy=_snapshotPolicyDao.acquireInLockTable(policy.getId());
      policy.setSchedule(cmd.getSchedule());
      policy.setTimezone(timezoneId);
      policy.setInterval((short)intvType.ordinal());
      policy.setMaxSnaps(cmd.getMaxSnaps());
      policy.setActive(true);
      _snapshotPolicyDao.update(policy.getId(),policy);
    }
  finally {
      if (policy != null) {
        _snapshotPolicyDao.releaseFromLockTable(policy.getId());
      }
    }
  }
  return policy;
}"
89265,"@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  List<Long> permittedAccounts=new ArrayList<Long>();
  boolean isAdmin=false;
  Boolean isRecursive=cmd.isRecursive();
  Long projectId=cmd.getProjectId();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if ((caller == null) || isAdmin(caller.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((caller != null) && !_domainDao.isChildDomain(caller.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          permittedAccounts.add(userAccount.getId());
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((caller == null) ? DomainVO.ROOT_DOMAIN : caller.getDomainId());
      isRecursive=true;
    }
  }
 else {
    permittedAccounts.add(caller.getId());
  }
  if (projectId != null) {
    permittedAccounts.clear();
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
    }
    if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
    }
    permittedAccounts.add(project.getProjectAccountId());
  }
 else   if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
    permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zone=null;
  Object pod=null;
  if (isAdmin) {
    zone=cmd.getZoneId();
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  SearchBuilder<DiskOfferingVO> diskOfferingSearch=_diskOfferingDao.createSearchBuilder();
  diskOfferingSearch.and(""String_Node_Str"",diskOfferingSearch.entity().getSystemUse(),SearchCriteria.Op.NEQ);
  sb.join(""String_Node_Str"",diskOfferingSearch,sb.entity().getDiskOfferingId(),diskOfferingSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((permittedAccounts.isEmpty()) && (domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchBuilder<VMInstanceVO> vmSearch=_vmInstanceDao.createSearchBuilder();
  vmSearch.and(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NIN);
  vmSearch.or(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NULL);
  sb.join(""String_Node_Str"",vmSearch,sb.entity().getInstanceId(),vmSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",1);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}","@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  List<Long> permittedAccounts=new ArrayList<Long>();
  boolean isAdmin=false;
  Boolean isRecursive=cmd.isRecursive();
  Long projectId=cmd.getProjectId();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if ((caller == null) || isAdmin(caller.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((caller != null) && !_domainDao.isChildDomain(caller.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          permittedAccounts.add(userAccount.getId());
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((caller == null) ? DomainVO.ROOT_DOMAIN : caller.getDomainId());
      isRecursive=true;
    }
  }
 else {
    permittedAccounts.add(caller.getId());
  }
  if (projectId != null) {
    permittedAccounts.clear();
    Project project=_projectMgr.getProject(projectId);
    if (project == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + projectId);
    }
    if (!_projectMgr.canAccessProjectAccount(caller,project.getProjectAccountId())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + caller + ""String_Node_Str""+ projectId);
    }
    permittedAccounts.add(project.getProjectAccountId());
  }
 else   if (caller.getType() == Account.ACCOUNT_TYPE_NORMAL) {
    permittedAccounts.addAll(_projectMgr.listPermittedProjectAccounts(caller.getId()));
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zoneId=cmd.getZoneId();
  Object pod=null;
  if (isAdmin) {
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  SearchBuilder<DiskOfferingVO> diskOfferingSearch=_diskOfferingDao.createSearchBuilder();
  diskOfferingSearch.and(""String_Node_Str"",diskOfferingSearch.entity().getSystemUse(),SearchCriteria.Op.NEQ);
  sb.join(""String_Node_Str"",diskOfferingSearch,sb.entity().getDiskOfferingId(),diskOfferingSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  if (((permittedAccounts.isEmpty()) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((permittedAccounts.isEmpty()) && (domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchBuilder<VMInstanceVO> vmSearch=_vmInstanceDao.createSearchBuilder();
  vmSearch.and(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NIN);
  vmSearch.or(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NULL);
  sb.join(""String_Node_Str"",vmSearch,sb.entity().getInstanceId(),vmSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (!permittedAccounts.isEmpty()) {
    sc.setParameters(""String_Node_Str"",permittedAccounts.toArray());
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",1);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zoneId != null) {
    sc.setParameters(""String_Node_Str"",zoneId);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}"
89266,"@Override public boolean disableStaticNat(long ipId) throws ResourceUnavailableException {
  boolean success=true;
  UserContext ctx=UserContext.current();
  Account caller=ctx.getCaller();
  IPAddressVO ipAddress=_ipAddressDao.findById(ipId);
  checkIpAndUserVm(ipAddress,null,caller);
  if (!ipAddress.isOneToOneNat()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  try {
    s_logger.debug(""String_Node_Str"" + Purpose.Firewall + ""String_Node_Str""+ ipId+ ""String_Node_Str"");
    if (!_firewallMgr.revokeFirewallRulesForIp(ipId,ctx.getCallerUserId(),caller)) {
      s_logger.warn(""String_Node_Str"" + ipId + ""String_Node_Str"");
      success=false;
    }
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + ipId + ""String_Node_Str"",e);
    success=false;
  }
  if (!revokeAllPFAndStaticNatRulesForIp(ipId,UserContext.current().getCallerUserId(),caller)) {
    s_logger.warn(""String_Node_Str"" + ipAddress);
    success=false;
  }
  if (success) {
    ipAddress.setOneToOneNat(false);
    ipAddress.setAssociatedWithVmId(null);
    _ipAddressDao.update(ipAddress.getId(),ipAddress);
    return true;
  }
 else {
    s_logger.warn(""String_Node_Str"" + ipId);
    return false;
  }
}","@Override public boolean disableStaticNat(long ipId) throws ResourceUnavailableException {
  boolean success=true;
  UserContext ctx=UserContext.current();
  Account caller=ctx.getCaller();
  IPAddressVO ipAddress=_ipAddressDao.findById(ipId);
  checkIpAndUserVm(ipAddress,null,caller);
  if (!ipAddress.isOneToOneNat()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  try {
    s_logger.debug(""String_Node_Str"" + Purpose.Firewall + ""String_Node_Str""+ ipId);
    if (!_firewallMgr.revokeFirewallRulesForIp(ipId,ctx.getCallerUserId(),caller)) {
      s_logger.warn(""String_Node_Str"" + ipId + ""String_Node_Str"");
      success=false;
    }
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + ipId + ""String_Node_Str"",e);
    success=false;
  }
  if (!revokeAllPFAndStaticNatRulesForIp(ipId,UserContext.current().getCallerUserId(),caller)) {
    s_logger.warn(""String_Node_Str"" + ipAddress);
    success=false;
  }
  if (success) {
    ipAddress.setOneToOneNat(false);
    ipAddress.setAssociatedWithVmId(null);
    _ipAddressDao.update(ipAddress.getId(),ipAddress);
    return true;
  }
 else {
    s_logger.warn(""String_Node_Str"" + ipId);
    return false;
  }
}"
89267,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NET_IP_RELEASE,eventDescription=""String_Node_Str"",async=true) public boolean disassociateIpAddress(long ipAddressId){
  Long userId=UserContext.current().getCallerUserId();
  Account caller=UserContext.current().getCaller();
  IPAddressVO ipVO=_ipAddressDao.findById(ipAddressId);
  if (ipVO == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddressId);
  }
  if (ipVO.getAllocatedTime() == null) {
    s_logger.debug(""String_Node_Str"" + ipAddressId + ""String_Node_Str"");
    return true;
  }
  if (ipVO.getAllocatedToAccountId() != null) {
    _accountMgr.checkAccess(caller,null,ipVO);
  }
  Network associatedNetwork=getNetwork(ipVO.getAssociatedWithNetworkId());
  if (areServicesSupportedInNetwork(associatedNetwork.getId(),Service.SourceNat)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  VlanVO vlan=_vlanDao.findById(ipVO.getVlanId());
  if (!vlan.getVlanType().equals(VlanType.VirtualNetwork)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (_accountVlanMapDao.findAccountVlanMap(ipVO.getAccountId(),ipVO.getVlanId()) != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddressId + ""String_Node_Str"");
  }
  return releasePublicIpAddress(ipAddressId,userId,caller);
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NET_IP_RELEASE,eventDescription=""String_Node_Str"",async=true) public boolean disassociateIpAddress(long ipAddressId){
  Long userId=UserContext.current().getCallerUserId();
  Account caller=UserContext.current().getCaller();
  IPAddressVO ipVO=_ipAddressDao.findById(ipAddressId);
  if (ipVO == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddressId);
  }
  if (ipVO.getAllocatedTime() == null) {
    s_logger.debug(""String_Node_Str"" + ipAddressId + ""String_Node_Str"");
    return true;
  }
  if (ipVO.getAllocatedToAccountId() != null) {
    _accountMgr.checkAccess(caller,null,ipVO);
  }
  Network associatedNetwork=getNetwork(ipVO.getAssociatedWithNetworkId());
  if (ipVO.isSourceNat() && areServicesSupportedInNetwork(associatedNetwork.getId(),Service.SourceNat)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  VlanVO vlan=_vlanDao.findById(ipVO.getVlanId());
  if (!vlan.getVlanType().equals(VlanType.VirtualNetwork)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (_accountVlanMapDao.findAccountVlanMap(ipVO.getAccountId(),ipVO.getVlanId()) != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddressId + ""String_Node_Str"");
  }
  return releasePublicIpAddress(ipAddressId,userId,caller);
}"
89268,"@Override public ExternalFirewallDeviceVO addSrxFirewall(AddSrxFirewallCmd cmd){
  String deviceName=cmd.getDeviceType();
  if (deviceName.equalsIgnoreCase(NetworkDevice.JuniperSRXFirewall.getName())) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  return addExternalFirewall(cmd.getPhysicalNetworkId(),cmd.getUrl(),cmd.getUsername(),cmd.getPassword(),deviceName,(ServerResource)new JuniperSrxResource());
}","@Override public ExternalFirewallDeviceVO addSrxFirewall(AddSrxFirewallCmd cmd){
  String deviceName=cmd.getDeviceType();
  if (!deviceName.equalsIgnoreCase(NetworkDevice.JuniperSRXFirewall.getName())) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  return addExternalFirewall(cmd.getPhysicalNetworkId(),cmd.getUrl(),cmd.getUsername(),cmd.getPassword(),deviceName,(ServerResource)new JuniperSrxResource());
}"
89269,"public RebootAnswer(RebootCommand cmd,String details){
  super(cmd,false,details);
  bytesSent=null;
  bytesReceived=null;
}","public RebootAnswer(RebootCommand cmd,Exception e){
  super(cmd,e);
}"
89270,"public Integer getVncPort(){
  return vncPort;
}","@Override public Integer getVncPort(){
  return vncPort;
}"
89271,"public StopAnswer(StopCommand cmd,String details){
  super(cmd,details);
  vncPort=null;
}","public StopAnswer(StopCommand cmd,Exception e){
  super(cmd,e);
}"
89272,"public byte[] read(SocketChannel ch) throws IOException {
  if (_readHeader) {
    if (_readBuffer.position() == 0) {
      _readBuffer.limit(4);
    }
    if (ch.read(_readBuffer) == -1) {
      throw new IOException(""String_Node_Str"");
    }
    if (_readBuffer.hasRemaining()) {
      s_logger.trace(""String_Node_Str"");
      return null;
    }
    _readBuffer.flip();
    int header=_readBuffer.getInt();
    int readSize=(short)header;
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + readSize);
    }
    if (readSize > MAX_SIZE_PER_PACKET) {
      throw new IOException(""String_Node_Str"" + readSize);
    }
    if (!_gotFollowingPacket) {
      _plaintextBuffer=ByteBuffer.allocate(2000);
    }
    if ((header & HEADER_FLAG_FOLLOWING) != 0) {
      _gotFollowingPacket=true;
    }
 else {
      _gotFollowingPacket=false;
    }
    _readBuffer.clear();
    _readHeader=false;
    if (_readBuffer.capacity() < readSize) {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + _readBuffer.capacity());
      }
      _readBuffer=ByteBuffer.allocate(readSize);
    }
    _readBuffer.limit(readSize);
  }
  if (ch.read(_readBuffer) == -1) {
    throw new IOException(""String_Node_Str"");
  }
  if (_readBuffer.hasRemaining()) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + _readBuffer.remaining());
    }
    return null;
  }
  _readBuffer.flip();
  ByteBuffer appBuf;
  SSLSession sslSession=_sslEngine.getSession();
  SSLEngineResult engResult;
  appBuf=ByteBuffer.allocate(sslSession.getApplicationBufferSize() + 40);
  engResult=_sslEngine.unwrap(_readBuffer,appBuf);
  if (engResult.getHandshakeStatus() != HandshakeStatus.FINISHED && engResult.getHandshakeStatus() != HandshakeStatus.NOT_HANDSHAKING && engResult.getStatus() != SSLEngineResult.Status.OK) {
    throw new IOException(""String_Node_Str"" + engResult);
  }
  appBuf.flip();
  if (_plaintextBuffer.remaining() < appBuf.limit()) {
    ByteBuffer newBuffer=ByteBuffer.allocate(_plaintextBuffer.capacity() + appBuf.limit() * 5);
    _plaintextBuffer.flip();
    newBuffer.put(_plaintextBuffer);
    _plaintextBuffer=newBuffer;
  }
  _plaintextBuffer.put(appBuf);
  _readBuffer.clear();
  _readHeader=true;
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"" + appBuf.limit());
  }
  if (!_gotFollowingPacket) {
    _plaintextBuffer.flip();
    byte[] result=new byte[_plaintextBuffer.limit()];
    _plaintextBuffer.get(result);
    return result;
  }
 else {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"");
    }
    return null;
  }
}","public byte[] read(SocketChannel ch) throws IOException {
  if (_readHeader) {
    if (_readBuffer.position() == 0) {
      _readBuffer.limit(4);
    }
    if (ch.read(_readBuffer) == -1) {
      throw new IOException(""String_Node_Str"");
    }
    if (_readBuffer.hasRemaining()) {
      s_logger.trace(""String_Node_Str"");
      return null;
    }
    _readBuffer.flip();
    int header=_readBuffer.getInt();
    int readSize=(short)header;
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + readSize);
    }
    if (readSize > MAX_SIZE_PER_PACKET) {
      throw new IOException(""String_Node_Str"" + readSize);
    }
    if (!_gotFollowingPacket) {
      _plaintextBuffer=ByteBuffer.allocate(2000);
    }
    if ((header & HEADER_FLAG_FOLLOWING) != 0) {
      _gotFollowingPacket=true;
    }
 else {
      _gotFollowingPacket=false;
    }
    _readBuffer.clear();
    _readHeader=false;
    if (_readBuffer.capacity() < readSize) {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + _readBuffer.capacity());
      }
      _readBuffer=ByteBuffer.allocate(readSize);
    }
    _readBuffer.limit(readSize);
  }
  if (ch.read(_readBuffer) == -1) {
    throw new IOException(""String_Node_Str"");
  }
  if (_readBuffer.hasRemaining()) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + _readBuffer.remaining());
    }
    return null;
  }
  _readBuffer.flip();
  ByteBuffer appBuf;
  SSLSession sslSession=_sslEngine.getSession();
  SSLEngineResult engResult;
  int remaining=0;
  while (_readBuffer.hasRemaining()) {
    remaining=_readBuffer.remaining();
    appBuf=ByteBuffer.allocate(sslSession.getApplicationBufferSize() + 40);
    engResult=_sslEngine.unwrap(_readBuffer,appBuf);
    if (engResult.getHandshakeStatus() != HandshakeStatus.FINISHED && engResult.getHandshakeStatus() != HandshakeStatus.NOT_HANDSHAKING && engResult.getStatus() != SSLEngineResult.Status.OK) {
      throw new IOException(""String_Node_Str"" + engResult);
    }
    if (remaining == _readBuffer.remaining()) {
      throw new IOException(""String_Node_Str"" + remaining + ""String_Node_Str"");
    }
    appBuf.flip();
    if (_plaintextBuffer.remaining() < appBuf.limit()) {
      ByteBuffer newBuffer=ByteBuffer.allocate(_plaintextBuffer.capacity() + appBuf.limit() * 5);
      _plaintextBuffer.flip();
      newBuffer.put(_plaintextBuffer);
      _plaintextBuffer=newBuffer;
    }
    _plaintextBuffer.put(appBuf);
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + appBuf.limit());
    }
  }
  _readBuffer.clear();
  _readHeader=true;
  if (!_gotFollowingPacket) {
    _plaintextBuffer.flip();
    byte[] result=new byte[_plaintextBuffer.limit()];
    _plaintextBuffer.get(result);
    return result;
  }
 else {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"");
    }
    return null;
  }
}"
89273,"@Override public ExternalLoadBalancerDeviceVO getExternalLoadBalancerForNetwork(Network network){
  NetworkExternalLoadBalancerVO lbDeviceForNetwork=_networkExternalLBDao.findByNetworkId(network.getId());
  if (lbDeviceForNetwork != null) {
    long lbDeviceId=lbDeviceForNetwork.getExternalLBDeviceId();
    ExternalLoadBalancerDeviceVO lbDeviceVo=_externalLoadBalancerDeviceDao.findById(lbDeviceId);
    assert(lbDeviceVo != null);
  }
  return null;
}","@Override public ExternalLoadBalancerDeviceVO getExternalLoadBalancerForNetwork(Network network){
  NetworkExternalLoadBalancerVO lbDeviceForNetwork=_networkExternalLBDao.findByNetworkId(network.getId());
  if (lbDeviceForNetwork != null) {
    long lbDeviceId=lbDeviceForNetwork.getExternalLBDeviceId();
    ExternalLoadBalancerDeviceVO lbDeviceVo=_externalLoadBalancerDeviceDao.findById(lbDeviceId);
    assert(lbDeviceVo != null);
    return lbDeviceVo;
  }
  return null;
}"
89274,"private boolean canHandle(Network config){
  DataCenter zone=_configMgr.getZone(config.getDataCenterId());
  if ((zone.getNetworkType() == NetworkType.Advanced && config.getGuestType() != Network.GuestType.Isolated) || (zone.getNetworkType() == NetworkType.Basic && config.getGuestType() != Network.GuestType.Shared)) {
    s_logger.trace(""String_Node_Str"" + config.getGuestType());
    return false;
  }
  return _networkManager.networkIsConfiguredForExternalNetworking(zone.getId(),config.getId());
}","private boolean canHandle(Network config){
  DataCenter zone=_configMgr.getZone(config.getDataCenterId());
  if ((zone.getNetworkType() == NetworkType.Advanced && config.getGuestType() != Network.GuestType.Isolated) || (zone.getNetworkType() == NetworkType.Basic && config.getGuestType() != Network.GuestType.Shared)) {
    s_logger.trace(""String_Node_Str"" + config.getGuestType());
    return false;
  }
  return _networkManager.networkIsConfiguredForExternalNetworking(zone.getId(),config.getId()) && _ntwkSrvcDao.isProviderSupportedInNetwork(config.getId(),Service.Lb,Network.Provider.JuniperSRX);
}"
89275,"private List<NetworkVO> listDomainLevelNetworks(SearchCriteria<NetworkVO> sc,Filter searchFilter,long domainId){
  List<Long> networkIds=new ArrayList<Long>();
  Set<Long> allowedDomains=_domainMgr.getDomainParentIds(domainId);
  List<NetworkDomainVO> maps=_networkDomainDao.listDomainNetworkMapByDomain(allowedDomains.toArray());
  for (  NetworkDomainVO map : maps) {
    boolean subdomainAccess=(map.isSubdomainAccess() != null) ? map.isSubdomainAccess() : getAllowSubdomainAccessGlobal();
    if (map.getDomainId() == domainId || subdomainAccess) {
      networkIds.add(map.getNetworkId());
    }
  }
  SearchCriteria<NetworkVO> domainSC=_networksDao.createSearchCriteria();
  domainSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,networkIds.toArray());
  domainSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ACLType.Domain.toString());
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,domainSC);
  return _networksDao.search(sc,searchFilter);
}","private List<NetworkVO> listDomainLevelNetworks(SearchCriteria<NetworkVO> sc,Filter searchFilter,long domainId){
  List<Long> networkIds=new ArrayList<Long>();
  Set<Long> allowedDomains=_domainMgr.getDomainParentIds(domainId);
  List<NetworkDomainVO> maps=_networkDomainDao.listDomainNetworkMapByDomain(allowedDomains.toArray());
  for (  NetworkDomainVO map : maps) {
    boolean subdomainAccess=(map.isSubdomainAccess() != null) ? map.isSubdomainAccess() : getAllowSubdomainAccessGlobal();
    if (map.getDomainId() == domainId || subdomainAccess) {
      networkIds.add(map.getNetworkId());
    }
  }
  if (!networkIds.isEmpty()) {
    SearchCriteria<NetworkVO> domainSC=_networksDao.createSearchCriteria();
    domainSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,networkIds.toArray());
    domainSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,ACLType.Domain.toString());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,domainSC);
    return _networksDao.search(sc,searchFilter);
  }
 else {
    return new ArrayList<NetworkVO>();
  }
}"
89276,"@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof CreateCommand) {
    return execute((CreateCommand)cmd);
  }
 else   if (cmd instanceof SetPortForwardingRulesCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof SetStaticNatRulesCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof LoadBalancerConfigCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof IpAssocCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof SavePasswordCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof DhcpEntryCommand) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (cmd instanceof VmDataCommand) {
  }
 else   if (cmd instanceof ReadyCommand) {
    s_logger.info(""String_Node_Str"" + _gson.toJson(cmd));
    return new ReadyAnswer((ReadyCommand)cmd);
  }
 else   if (cmd instanceof GetHostStatsCommand) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (cmd instanceof GetVmStatsCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof CheckHealthCommand) {
  }
 else   if (cmd instanceof StopCommand) {
  }
 else   if (cmd instanceof RebootRouterCommand) {
  }
 else   if (cmd instanceof RebootCommand) {
  }
 else   if (cmd instanceof CheckVirtualMachineCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof PrepareForMigrationCommand) {
  }
 else   if (cmd instanceof MigrateCommand) {
  }
 else   if (cmd instanceof DestroyCommand) {
  }
 else   if (cmd instanceof ModifyStoragePoolCommand) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof DeleteStoragePoolCommand) {
    s_logger.info(""String_Node_Str"");
    Answer answer=new Answer(cmd,true,""String_Node_Str"");
    return answer;
  }
 else   if (cmd instanceof CopyVolumeCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof AttachVolumeCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof AttachIsoCommand) {
  }
 else   if (cmd instanceof ValidateSnapshotCommand) {
  }
 else   if (cmd instanceof ManageSnapshotCommand) {
  }
 else   if (cmd instanceof BackupSnapshotCommand) {
  }
 else   if (cmd instanceof CreateVolumeFromSnapshotCommand) {
  }
 else   if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
  }
 else   if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
  }
 else   if (cmd instanceof GetStorageStatsCommand) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (cmd instanceof PrimaryStorageDownloadCommand) {
    s_logger.info(""String_Node_Str"");
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (cmd instanceof GetVncPortCommand) {
  }
 else   if (cmd instanceof SetupCommand) {
  }
 else   if (cmd instanceof MaintainCommand) {
  }
 else   if (cmd instanceof PingTestCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof CheckOnHostCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof ModifySshKeysCommand) {
  }
 else   if (cmd instanceof PoolEjectCommand) {
  }
 else   if (cmd instanceof NetworkUsageCommand) {
  }
 else   if (cmd instanceof StartCommand) {
    return execute((StartCommand)cmd);
  }
 else   if (cmd instanceof RemoteAccessVpnCfgCommand) {
  }
 else   if (cmd instanceof VpnUsersCfgCommand) {
  }
 else   if (cmd instanceof CheckSshCommand) {
    return execute((CheckSshCommand)cmd);
  }
 else {
    s_logger.info(""String_Node_Str"" + _gson.toJson(cmd));
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
  return Answer.createUnsupportedCommandAnswer(cmd);
}","@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof CreateCommand) {
    return execute((CreateCommand)cmd);
  }
 else   if (cmd instanceof SetPortForwardingRulesCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof SetStaticNatRulesCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof LoadBalancerConfigCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof IpAssocCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof SavePasswordCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof DhcpEntryCommand) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (cmd instanceof VmDataCommand) {
  }
 else   if (cmd instanceof ReadyCommand) {
    s_logger.info(""String_Node_Str"" + _gson.toJson(cmd));
    return new ReadyAnswer((ReadyCommand)cmd);
  }
 else   if (cmd instanceof GetHostStatsCommand) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (cmd instanceof GetVmStatsCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof CheckHealthCommand) {
  }
 else   if (cmd instanceof StopCommand) {
  }
 else   if (cmd instanceof RebootRouterCommand) {
  }
 else   if (cmd instanceof RebootCommand) {
  }
 else   if (cmd instanceof CheckVirtualMachineCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof PrepareForMigrationCommand) {
  }
 else   if (cmd instanceof MigrateCommand) {
  }
 else   if (cmd instanceof DestroyCommand) {
  }
 else   if (cmd instanceof ModifyStoragePoolCommand) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof DeleteStoragePoolCommand) {
    s_logger.info(""String_Node_Str"");
    Answer answer=new Answer(cmd,true,""String_Node_Str"");
    return answer;
  }
 else   if (cmd instanceof CopyVolumeCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof AttachVolumeCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof AttachIsoCommand) {
  }
 else   if (cmd instanceof ValidateSnapshotCommand) {
  }
 else   if (cmd instanceof ManageSnapshotCommand) {
  }
 else   if (cmd instanceof BackupSnapshotCommand) {
  }
 else   if (cmd instanceof CreateVolumeFromSnapshotCommand) {
  }
 else   if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
  }
 else   if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
  }
 else   if (cmd instanceof GetStorageStatsCommand) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (cmd instanceof PrimaryStorageDownloadCommand) {
    s_logger.info(""String_Node_Str"");
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (cmd instanceof GetVncPortCommand) {
  }
 else   if (cmd instanceof SetupCommand) {
  }
 else   if (cmd instanceof MaintainCommand) {
  }
 else   if (cmd instanceof PingTestCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof CheckOnHostCommand) {
    s_logger.info(""String_Node_Str"");
  }
 else   if (cmd instanceof ModifySshKeysCommand) {
  }
 else   if (cmd instanceof PoolEjectCommand) {
  }
 else   if (cmd instanceof NetworkUsageCommand) {
  }
 else   if (cmd instanceof StartCommand) {
    return execute((StartCommand)cmd);
  }
 else   if (cmd instanceof RemoteAccessVpnCfgCommand) {
  }
 else   if (cmd instanceof VpnUsersCfgCommand) {
  }
 else   if (cmd instanceof CheckSshCommand) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (cmd instanceof CheckNetworkCommand) {
  }
 else {
    s_logger.info(""String_Node_Str"" + _gson.toJson(cmd));
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
  return Answer.createUnsupportedCommandAnswer(cmd);
}"
89277,"@Override public Answer executeRequest(Command cmd){
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + cmd.getClass().getSimpleName());
  Answer answer=null;
  NDC.push(_hostName != null ? _hostName : _guid + ""String_Node_Str"" + ComponentLocator.class.getPackage().getImplementationVersion()+ ""String_Node_Str"");
  try {
    long cmdSequence=_cmdSequence++;
    Date startTime=DateUtil.currentGMTTime();
    PropertyMapDynamicBean mbean=new PropertyMapDynamicBean();
    mbean.addProp(""String_Node_Str"",DateUtil.getDateDisplayString(TimeZone.getDefault(),startTime));
    mbean.addProp(""String_Node_Str"",_gson.toJson(cmd));
    mbean.addProp(""String_Node_Str"",String.valueOf(cmdSequence));
    mbean.addProp(""String_Node_Str"",cmd.getClass().getSimpleName());
    if (cmd instanceof CreateCommand) {
      answer=execute((CreateCommand)cmd);
    }
 else     if (cmd instanceof SetPortForwardingRulesCommand) {
      answer=execute((SetPortForwardingRulesCommand)cmd);
    }
 else     if (cmd instanceof SetStaticNatRulesCommand) {
      answer=execute((SetStaticNatRulesCommand)cmd);
    }
 else     if (cmd instanceof LoadBalancerConfigCommand) {
      answer=execute((LoadBalancerConfigCommand)cmd);
    }
 else     if (cmd instanceof IpAssocCommand) {
      answer=execute((IpAssocCommand)cmd);
    }
 else     if (cmd instanceof SavePasswordCommand) {
      answer=execute((SavePasswordCommand)cmd);
    }
 else     if (cmd instanceof DhcpEntryCommand) {
      answer=execute((DhcpEntryCommand)cmd);
    }
 else     if (cmd instanceof VmDataCommand) {
      answer=execute((VmDataCommand)cmd);
    }
 else     if (cmd instanceof ReadyCommand) {
      answer=execute((ReadyCommand)cmd);
    }
 else     if (cmd instanceof GetHostStatsCommand) {
      answer=execute((GetHostStatsCommand)cmd);
    }
 else     if (cmd instanceof GetVmStatsCommand) {
      answer=execute((GetVmStatsCommand)cmd);
    }
 else     if (cmd instanceof CheckHealthCommand) {
      answer=execute((CheckHealthCommand)cmd);
    }
 else     if (cmd instanceof StopCommand) {
      answer=execute((StopCommand)cmd);
    }
 else     if (cmd instanceof RebootRouterCommand) {
      answer=execute((RebootRouterCommand)cmd);
    }
 else     if (cmd instanceof RebootCommand) {
      answer=execute((RebootCommand)cmd);
    }
 else     if (cmd instanceof CheckVirtualMachineCommand) {
      answer=execute((CheckVirtualMachineCommand)cmd);
    }
 else     if (cmd instanceof PrepareForMigrationCommand) {
      answer=execute((PrepareForMigrationCommand)cmd);
    }
 else     if (cmd instanceof MigrateCommand) {
      answer=execute((MigrateCommand)cmd);
    }
 else     if (cmd instanceof DestroyCommand) {
      answer=execute((DestroyCommand)cmd);
    }
 else     if (cmd instanceof CreateStoragePoolCommand) {
      return execute((CreateStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof ModifyStoragePoolCommand) {
      answer=execute((ModifyStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof DeleteStoragePoolCommand) {
      answer=execute((DeleteStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof CopyVolumeCommand) {
      answer=execute((CopyVolumeCommand)cmd);
    }
 else     if (cmd instanceof AttachVolumeCommand) {
      answer=execute((AttachVolumeCommand)cmd);
    }
 else     if (cmd instanceof AttachIsoCommand) {
      answer=execute((AttachIsoCommand)cmd);
    }
 else     if (cmd instanceof ValidateSnapshotCommand) {
      answer=execute((ValidateSnapshotCommand)cmd);
    }
 else     if (cmd instanceof ManageSnapshotCommand) {
      answer=execute((ManageSnapshotCommand)cmd);
    }
 else     if (cmd instanceof BackupSnapshotCommand) {
      answer=execute((BackupSnapshotCommand)cmd);
    }
 else     if (cmd instanceof CreateVolumeFromSnapshotCommand) {
      answer=execute((CreateVolumeFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
      answer=execute((CreatePrivateTemplateFromVolumeCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
      answer=execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof UpgradeSnapshotCommand) {
      answer=execute((UpgradeSnapshotCommand)cmd);
    }
 else     if (cmd instanceof GetStorageStatsCommand) {
      answer=execute((GetStorageStatsCommand)cmd);
    }
 else     if (cmd instanceof PrimaryStorageDownloadCommand) {
      answer=execute((PrimaryStorageDownloadCommand)cmd);
    }
 else     if (cmd instanceof GetVncPortCommand) {
      answer=execute((GetVncPortCommand)cmd);
    }
 else     if (cmd instanceof SetupCommand) {
      answer=execute((SetupCommand)cmd);
    }
 else     if (cmd instanceof MaintainCommand) {
      answer=execute((MaintainCommand)cmd);
    }
 else     if (cmd instanceof PingTestCommand) {
      answer=execute((PingTestCommand)cmd);
    }
 else     if (cmd instanceof CheckOnHostCommand) {
      answer=execute((CheckOnHostCommand)cmd);
    }
 else     if (cmd instanceof ModifySshKeysCommand) {
      answer=execute((ModifySshKeysCommand)cmd);
    }
 else     if (cmd instanceof PoolEjectCommand) {
      answer=execute((PoolEjectCommand)cmd);
    }
 else     if (cmd instanceof NetworkUsageCommand) {
      answer=execute((NetworkUsageCommand)cmd);
    }
 else     if (cmd instanceof StartCommand) {
      answer=execute((StartCommand)cmd);
    }
 else     if (cmd instanceof RemoteAccessVpnCfgCommand) {
      answer=execute((RemoteAccessVpnCfgCommand)cmd);
    }
 else     if (cmd instanceof VpnUsersCfgCommand) {
      answer=execute((VpnUsersCfgCommand)cmd);
    }
 else     if (cmd instanceof CheckSshCommand) {
      answer=execute((CheckSshCommand)cmd);
    }
 else     if (cmd instanceof CheckRouterCommand) {
      answer=execute((CheckRouterCommand)cmd);
    }
 else     if (cmd instanceof SetFirewallRulesCommand) {
      answer=execute((SetFirewallRulesCommand)cmd);
    }
 else     if (cmd instanceof BumpUpPriorityCommand) {
      answer=execute((BumpUpPriorityCommand)cmd);
    }
 else     if (cmd instanceof GetDomRVersionCmd) {
      answer=execute((GetDomRVersionCmd)cmd);
    }
 else {
      answer=Answer.createUnsupportedCommandAnswer(cmd);
    }
    if (cmd.getContextParam(""String_Node_Str"") != null) {
      answer.setContextParam(""String_Node_Str"",cmd.getContextParam(""String_Node_Str""));
    }
    Date doneTime=DateUtil.currentGMTTime();
    mbean.addProp(""String_Node_Str"",DateUtil.getDateDisplayString(TimeZone.getDefault(),doneTime));
    mbean.addProp(""String_Node_Str"",_gson.toJson(answer));
synchronized (this) {
      try {
        JmxUtil.registerMBean(""String_Node_Str"" + _morHyperHost.get_value(),""String_Node_Str"" + cmdSequence + ""String_Node_Str""+ cmd.getClass().getSimpleName(),mbean);
        _cmdMBeans.add(mbean);
        if (_cmdMBeans.size() >= MAX_CMD_MBEAN) {
          PropertyMapDynamicBean mbeanToRemove=_cmdMBeans.get(0);
          _cmdMBeans.remove(0);
          JmxUtil.unregisterMBean(""String_Node_Str"" + _morHyperHost.get_value(),""String_Node_Str"" + mbeanToRemove.getProp(""String_Node_Str"") + ""String_Node_Str""+ mbeanToRemove.getProp(""String_Node_Str""));
        }
      }
 catch (      Exception e) {
        if (s_logger.isTraceEnabled())         s_logger.trace(""String_Node_Str"" + ExceptionUtil.toString(e));
      }
    }
  }
  finally {
    NDC.pop();
  }
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + cmd.getClass().getSimpleName());
  return answer;
}","@Override public Answer executeRequest(Command cmd){
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + cmd.getClass().getSimpleName());
  Answer answer=null;
  NDC.push(_hostName != null ? _hostName : _guid + ""String_Node_Str"" + ComponentLocator.class.getPackage().getImplementationVersion()+ ""String_Node_Str"");
  try {
    long cmdSequence=_cmdSequence++;
    Date startTime=DateUtil.currentGMTTime();
    PropertyMapDynamicBean mbean=new PropertyMapDynamicBean();
    mbean.addProp(""String_Node_Str"",DateUtil.getDateDisplayString(TimeZone.getDefault(),startTime));
    mbean.addProp(""String_Node_Str"",_gson.toJson(cmd));
    mbean.addProp(""String_Node_Str"",String.valueOf(cmdSequence));
    mbean.addProp(""String_Node_Str"",cmd.getClass().getSimpleName());
    if (cmd instanceof CreateCommand) {
      answer=execute((CreateCommand)cmd);
    }
 else     if (cmd instanceof SetPortForwardingRulesCommand) {
      answer=execute((SetPortForwardingRulesCommand)cmd);
    }
 else     if (cmd instanceof SetStaticNatRulesCommand) {
      answer=execute((SetStaticNatRulesCommand)cmd);
    }
 else     if (cmd instanceof LoadBalancerConfigCommand) {
      answer=execute((LoadBalancerConfigCommand)cmd);
    }
 else     if (cmd instanceof IpAssocCommand) {
      answer=execute((IpAssocCommand)cmd);
    }
 else     if (cmd instanceof SavePasswordCommand) {
      answer=execute((SavePasswordCommand)cmd);
    }
 else     if (cmd instanceof DhcpEntryCommand) {
      answer=execute((DhcpEntryCommand)cmd);
    }
 else     if (cmd instanceof VmDataCommand) {
      answer=execute((VmDataCommand)cmd);
    }
 else     if (cmd instanceof ReadyCommand) {
      answer=execute((ReadyCommand)cmd);
    }
 else     if (cmd instanceof GetHostStatsCommand) {
      answer=execute((GetHostStatsCommand)cmd);
    }
 else     if (cmd instanceof GetVmStatsCommand) {
      answer=execute((GetVmStatsCommand)cmd);
    }
 else     if (cmd instanceof CheckHealthCommand) {
      answer=execute((CheckHealthCommand)cmd);
    }
 else     if (cmd instanceof StopCommand) {
      answer=execute((StopCommand)cmd);
    }
 else     if (cmd instanceof RebootRouterCommand) {
      answer=execute((RebootRouterCommand)cmd);
    }
 else     if (cmd instanceof RebootCommand) {
      answer=execute((RebootCommand)cmd);
    }
 else     if (cmd instanceof CheckVirtualMachineCommand) {
      answer=execute((CheckVirtualMachineCommand)cmd);
    }
 else     if (cmd instanceof PrepareForMigrationCommand) {
      answer=execute((PrepareForMigrationCommand)cmd);
    }
 else     if (cmd instanceof MigrateCommand) {
      answer=execute((MigrateCommand)cmd);
    }
 else     if (cmd instanceof DestroyCommand) {
      answer=execute((DestroyCommand)cmd);
    }
 else     if (cmd instanceof CreateStoragePoolCommand) {
      return execute((CreateStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof ModifyStoragePoolCommand) {
      answer=execute((ModifyStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof DeleteStoragePoolCommand) {
      answer=execute((DeleteStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof CopyVolumeCommand) {
      answer=execute((CopyVolumeCommand)cmd);
    }
 else     if (cmd instanceof AttachVolumeCommand) {
      answer=execute((AttachVolumeCommand)cmd);
    }
 else     if (cmd instanceof AttachIsoCommand) {
      answer=execute((AttachIsoCommand)cmd);
    }
 else     if (cmd instanceof ValidateSnapshotCommand) {
      answer=execute((ValidateSnapshotCommand)cmd);
    }
 else     if (cmd instanceof ManageSnapshotCommand) {
      answer=execute((ManageSnapshotCommand)cmd);
    }
 else     if (cmd instanceof BackupSnapshotCommand) {
      answer=execute((BackupSnapshotCommand)cmd);
    }
 else     if (cmd instanceof CreateVolumeFromSnapshotCommand) {
      answer=execute((CreateVolumeFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
      answer=execute((CreatePrivateTemplateFromVolumeCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
      answer=execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof UpgradeSnapshotCommand) {
      answer=execute((UpgradeSnapshotCommand)cmd);
    }
 else     if (cmd instanceof GetStorageStatsCommand) {
      answer=execute((GetStorageStatsCommand)cmd);
    }
 else     if (cmd instanceof PrimaryStorageDownloadCommand) {
      answer=execute((PrimaryStorageDownloadCommand)cmd);
    }
 else     if (cmd instanceof GetVncPortCommand) {
      answer=execute((GetVncPortCommand)cmd);
    }
 else     if (cmd instanceof SetupCommand) {
      answer=execute((SetupCommand)cmd);
    }
 else     if (cmd instanceof MaintainCommand) {
      answer=execute((MaintainCommand)cmd);
    }
 else     if (cmd instanceof PingTestCommand) {
      answer=execute((PingTestCommand)cmd);
    }
 else     if (cmd instanceof CheckOnHostCommand) {
      answer=execute((CheckOnHostCommand)cmd);
    }
 else     if (cmd instanceof ModifySshKeysCommand) {
      answer=execute((ModifySshKeysCommand)cmd);
    }
 else     if (cmd instanceof PoolEjectCommand) {
      answer=execute((PoolEjectCommand)cmd);
    }
 else     if (cmd instanceof NetworkUsageCommand) {
      answer=execute((NetworkUsageCommand)cmd);
    }
 else     if (cmd instanceof StartCommand) {
      answer=execute((StartCommand)cmd);
    }
 else     if (cmd instanceof RemoteAccessVpnCfgCommand) {
      answer=execute((RemoteAccessVpnCfgCommand)cmd);
    }
 else     if (cmd instanceof VpnUsersCfgCommand) {
      answer=execute((VpnUsersCfgCommand)cmd);
    }
 else     if (cmd instanceof CheckSshCommand) {
      answer=execute((CheckSshCommand)cmd);
    }
 else     if (cmd instanceof CheckRouterCommand) {
      answer=execute((CheckRouterCommand)cmd);
    }
 else     if (cmd instanceof SetFirewallRulesCommand) {
      answer=execute((SetFirewallRulesCommand)cmd);
    }
 else     if (cmd instanceof BumpUpPriorityCommand) {
      answer=execute((BumpUpPriorityCommand)cmd);
    }
 else     if (cmd instanceof GetDomRVersionCmd) {
      answer=execute((GetDomRVersionCmd)cmd);
    }
 else     if (cmd instanceof CheckNetworkCommand) {
    }
 else {
      answer=Answer.createUnsupportedCommandAnswer(cmd);
    }
    if (cmd.getContextParam(""String_Node_Str"") != null) {
      answer.setContextParam(""String_Node_Str"",cmd.getContextParam(""String_Node_Str""));
    }
    Date doneTime=DateUtil.currentGMTTime();
    mbean.addProp(""String_Node_Str"",DateUtil.getDateDisplayString(TimeZone.getDefault(),doneTime));
    mbean.addProp(""String_Node_Str"",_gson.toJson(answer));
synchronized (this) {
      try {
        JmxUtil.registerMBean(""String_Node_Str"" + _morHyperHost.get_value(),""String_Node_Str"" + cmdSequence + ""String_Node_Str""+ cmd.getClass().getSimpleName(),mbean);
        _cmdMBeans.add(mbean);
        if (_cmdMBeans.size() >= MAX_CMD_MBEAN) {
          PropertyMapDynamicBean mbeanToRemove=_cmdMBeans.get(0);
          _cmdMBeans.remove(0);
          JmxUtil.unregisterMBean(""String_Node_Str"" + _morHyperHost.get_value(),""String_Node_Str"" + mbeanToRemove.getProp(""String_Node_Str"") + ""String_Node_Str""+ mbeanToRemove.getProp(""String_Node_Str""));
        }
      }
 catch (      Exception e) {
        if (s_logger.isTraceEnabled())         s_logger.trace(""String_Node_Str"" + ExceptionUtil.toString(e));
      }
    }
  }
  finally {
    NDC.pop();
  }
  if (s_logger.isTraceEnabled())   s_logger.trace(""String_Node_Str"" + cmd.getClass().getSimpleName());
  return answer;
}"
89278,"@Override @ActionEvent(eventType=EventTypes.EVENT_PHYSICAL_NETWORK_DELETE,eventDescription=""String_Node_Str"",async=true) public boolean deletePhysicalNetwork(Long physicalNetworkId){
  PhysicalNetworkVO pNetwork=_physicalNetworkDao.findById(physicalNetworkId);
  if (pNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId + ""String_Node_Str"");
  }
  checkIfPhysicalNetworkIsDeletable(physicalNetworkId);
  List<VlanVO> vlans=_vlanDao.listVlansByPhysicalNetworkId(physicalNetworkId);
  for (  VlanVO vlan : vlans) {
    _vlanDao.remove(vlan.getId());
  }
  List<NetworkVO> networks=_networksDao.listByPhysicalNetworkIncludingRemoved(physicalNetworkId);
  if (networks != null && !networks.isEmpty()) {
    for (    NetworkVO network : networks) {
      _networksDao.remove(network.getId());
    }
  }
  _dcDao.deleteVnet(physicalNetworkId);
  _pNSPDao.deleteProviders(physicalNetworkId);
  boolean success=_physicalNetworkDao.remove(physicalNetworkId);
  return success;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_PHYSICAL_NETWORK_DELETE,eventDescription=""String_Node_Str"",async=true) public boolean deletePhysicalNetwork(Long physicalNetworkId){
  PhysicalNetworkVO pNetwork=_physicalNetworkDao.findById(physicalNetworkId);
  if (pNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + physicalNetworkId + ""String_Node_Str"");
  }
  checkIfPhysicalNetworkIsDeletable(physicalNetworkId);
  List<VlanVO> vlans=_vlanDao.listVlansByPhysicalNetworkId(physicalNetworkId);
  for (  VlanVO vlan : vlans) {
    _vlanDao.remove(vlan.getId());
  }
  List<NetworkVO> networks=_networksDao.listByPhysicalNetwork(physicalNetworkId);
  if (networks != null && !networks.isEmpty()) {
    for (    NetworkVO network : networks) {
      _networksDao.remove(network.getId());
    }
  }
  _dcDao.deleteVnet(physicalNetworkId);
  _pNSPDao.deleteProviders(physicalNetworkId);
  boolean success=_physicalNetworkDao.remove(physicalNetworkId);
  return success;
}"
89279,"@Override @ActionEvent(eventType=EventTypes.EVENT_SERVICE_PROVIDER_UPDATE,eventDescription=""String_Node_Str"",async=true) public PhysicalNetworkServiceProvider updateNetworkServiceProvider(Long id,String stateStr,List<String> enabledServices){
  PhysicalNetworkServiceProviderVO provider=_pNSPDao.findById(id);
  if (provider == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  NetworkElement element=getElementImplementingProvider(provider.getProviderName());
  if (element == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + provider.getProviderName() + ""String_Node_Str"");
  }
  PhysicalNetworkServiceProvider.State state=null;
  if (stateStr != null && !stateStr.isEmpty()) {
    try {
      state=PhysicalNetworkServiceProvider.State.valueOf(stateStr);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + stateStr + ""String_Node_Str"");
    }
  }
  boolean update=false;
  if (state != null) {
    if (state == PhysicalNetworkServiceProvider.State.Shutdown) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str""+ provider.getPhysicalNetworkId()+ ""String_Node_Str""+ stateStr);
    }
switch (state) {
case Enabled:
      if (element != null && element.isReady(provider)) {
        provider.setState(PhysicalNetworkServiceProvider.State.Enabled);
        update=true;
      }
    break;
case Disabled:
  provider.setState(PhysicalNetworkServiceProvider.State.Disabled);
update=true;
break;
}
}
if (enabledServices != null) {
if (!element.canEnableIndividualServices()) {
throw new InvalidParameterValueException(""String_Node_Str"" + provider.getProviderName() + ""String_Node_Str"");
}
List<Service> services=new ArrayList<Service>();
for (String serviceName : enabledServices) {
Network.Service service=Network.Service.getService(serviceName);
if (service == null) {
throw new InvalidParameterValueException(""String_Node_Str"" + serviceName);
}
services.add(service);
}
provider.setEnabledServices(services);
update=true;
}
if (update) {
_pNSPDao.update(id,provider);
}
return provider;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_SERVICE_PROVIDER_UPDATE,eventDescription=""String_Node_Str"",async=true) public PhysicalNetworkServiceProvider updateNetworkServiceProvider(Long id,String stateStr,List<String> enabledServices){
  PhysicalNetworkServiceProviderVO provider=_pNSPDao.findById(id);
  if (provider == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  NetworkElement element=getElementImplementingProvider(provider.getProviderName());
  if (element == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + provider.getProviderName() + ""String_Node_Str"");
  }
  PhysicalNetworkServiceProvider.State state=null;
  if (stateStr != null && !stateStr.isEmpty()) {
    try {
      state=PhysicalNetworkServiceProvider.State.valueOf(stateStr);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + stateStr + ""String_Node_Str"");
    }
  }
  boolean update=false;
  if (state != null) {
    if (state == PhysicalNetworkServiceProvider.State.Shutdown) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str""+ provider.getPhysicalNetworkId()+ ""String_Node_Str""+ stateStr);
    }
switch (state) {
case Enabled:
      if (element != null && element.isReady(provider)) {
        provider.setState(PhysicalNetworkServiceProvider.State.Enabled);
        update=true;
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
    break;
case Disabled:
  provider.setState(PhysicalNetworkServiceProvider.State.Disabled);
update=true;
break;
}
}
if (enabledServices != null) {
if (!element.canEnableIndividualServices()) {
throw new InvalidParameterValueException(""String_Node_Str"" + provider.getProviderName() + ""String_Node_Str"");
}
List<Service> services=new ArrayList<Service>();
for (String serviceName : enabledServices) {
Network.Service service=Network.Service.getService(serviceName);
if (service == null) {
throw new InvalidParameterValueException(""String_Node_Str"" + serviceName);
}
services.add(service);
}
provider.setEnabledServices(services);
update=true;
}
if (update) {
_pNSPDao.update(id,provider);
}
return provider;
}"
89280,"public static String getDefaultHostIp(){
  NetworkInterface nic=null;
  String pubNic=getDefaultEthDevice();
  if (pubNic == null) {
    return null;
  }
  try {
    nic=NetworkInterface.getByName(pubNic);
  }
 catch (  final SocketException e) {
    return null;
  }
  String[] info=NetUtils.getNetworkParams(nic);
  return info[0];
}","public static String getDefaultHostIp(){
  if (isWindows()) {
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    try {
      Process result=Runtime.getRuntime().exec(""String_Node_Str"");
      BufferedReader output=new BufferedReader(new InputStreamReader(result.getInputStream()));
      String line=output.readLine();
      while (line != null) {
        Matcher matcher=pattern.matcher(line);
        if (matcher.find()) {
          return matcher.group(2);
        }
        line=output.readLine();
      }
    }
 catch (    Exception e) {
    }
    return null;
  }
 else {
    NetworkInterface nic=null;
    String pubNic=getDefaultEthDevice();
    if (pubNic == null) {
      return null;
    }
    try {
      nic=NetworkInterface.getByName(pubNic);
    }
 catch (    final SocketException e) {
      return null;
    }
    String[] info=NetUtils.getNetworkParams(nic);
    return info[0];
  }
}"
89281,"private static ArrayList<Argument> setResponseFields(Field[] responseFields){
  ArrayList<Argument> arguments=new ArrayList<Argument>();
  ArrayList<Argument> sortedChildlessArguments=new ArrayList<Argument>();
  ArrayList<Argument> sortedArguments=new ArrayList<Argument>();
  Argument id=null;
  for (  Field responseField : responseFields) {
    SerializedName nameAnnotation=responseField.getAnnotation(SerializedName.class);
    Param paramAnnotation=responseField.getAnnotation(Param.class);
    Argument respArg=new Argument(nameAnnotation.value());
    boolean hasChildren=false;
    if (paramAnnotation != null && paramAnnotation.includeInApiDoc()) {
      String description=paramAnnotation.description();
      Class fieldClass=paramAnnotation.responseObject();
      if (description != null && !description.isEmpty()) {
        respArg.setDescription(description);
      }
      if (fieldClass != null) {
        Class<?> superClass=fieldClass.getSuperclass();
        if (superClass != null) {
          String superName=superClass.getName();
          if (superName.equals(BaseResponse.class.getName())) {
            ArrayList<Argument> fieldArguments=new ArrayList<Argument>();
            Field[] fields=fieldClass.getDeclaredFields();
            fieldArguments=setResponseFields(fields);
            respArg.setArguments(fieldArguments);
            hasChildren=true;
          }
        }
      }
    }
    if (paramAnnotation != null && paramAnnotation.includeInApiDoc()) {
      if (nameAnnotation.value().equals(""String_Node_Str"")) {
        id=respArg;
      }
 else {
        if (hasChildren) {
          respArg.setName(nameAnnotation.value() + ""String_Node_Str"");
          sortedArguments.add(respArg);
        }
 else {
          sortedChildlessArguments.add(respArg);
        }
      }
    }
  }
  Collections.sort(sortedArguments);
  Collections.sort(sortedChildlessArguments);
  if (id != null) {
    arguments.add(id);
  }
  arguments.addAll(sortedChildlessArguments);
  arguments.addAll(sortedArguments);
  return arguments;
}","private static ArrayList<Argument> setResponseFields(Field[] responseFields){
  ArrayList<Argument> arguments=new ArrayList<Argument>();
  ArrayList<Argument> sortedChildlessArguments=new ArrayList<Argument>();
  ArrayList<Argument> sortedArguments=new ArrayList<Argument>();
  Argument id=null;
  for (  Field responseField : responseFields) {
    SerializedName nameAnnotation=responseField.getAnnotation(SerializedName.class);
    if (nameAnnotation != null) {
      Param paramAnnotation=responseField.getAnnotation(Param.class);
      Argument respArg=new Argument(nameAnnotation.value());
      boolean hasChildren=false;
      if (paramAnnotation != null && paramAnnotation.includeInApiDoc()) {
        String description=paramAnnotation.description();
        Class fieldClass=paramAnnotation.responseObject();
        if (description != null && !description.isEmpty()) {
          respArg.setDescription(description);
        }
        if (fieldClass != null) {
          Class<?> superClass=fieldClass.getSuperclass();
          if (superClass != null) {
            String superName=superClass.getName();
            if (superName.equals(BaseResponse.class.getName())) {
              ArrayList<Argument> fieldArguments=new ArrayList<Argument>();
              Field[] fields=fieldClass.getDeclaredFields();
              fieldArguments=setResponseFields(fields);
              respArg.setArguments(fieldArguments);
              hasChildren=true;
            }
          }
        }
      }
      if (paramAnnotation != null && paramAnnotation.includeInApiDoc()) {
        if (nameAnnotation.value().equals(""String_Node_Str"")) {
          id=respArg;
        }
 else {
          if (hasChildren) {
            respArg.setName(nameAnnotation.value() + ""String_Node_Str"");
            sortedArguments.add(respArg);
          }
 else {
            sortedChildlessArguments.add(respArg);
          }
        }
      }
    }
  }
  Collections.sort(sortedArguments);
  Collections.sort(sortedChildlessArguments);
  if (id != null) {
    arguments.add(id);
  }
  arguments.addAll(sortedChildlessArguments);
  arguments.addAll(sortedArguments);
  return arguments;
}"
89282,"private String queueCommand(BaseCmd cmdObj,Map<String,String> params){
  UserContext ctx=UserContext.current();
  Long callerUserId=ctx.getCallerUserId();
  Account caller=ctx.getCaller();
  if (cmdObj instanceof BaseAsyncCmd) {
    Long objectId=null;
    String objectEntityTable=null;
    if (cmdObj instanceof BaseAsyncCreateCmd) {
      BaseAsyncCreateCmd createCmd=(BaseAsyncCreateCmd)cmdObj;
      _dispatcher.dispatchCreateCmd(createCmd,params);
      objectId=createCmd.getEntityId();
      objectEntityTable=createCmd.getEntityTable();
      params.put(""String_Node_Str"",objectId.toString());
    }
 else {
      ApiDispatcher.setupParameters(cmdObj,params);
    }
    BaseAsyncCmd asyncCmd=(BaseAsyncCmd)cmdObj;
    if (callerUserId != null) {
      params.put(""String_Node_Str"",callerUserId.toString());
    }
    if (caller != null) {
      params.put(""String_Node_Str"",String.valueOf(caller.getId()));
    }
    long startEventId=ctx.getStartEventId();
    asyncCmd.setStartEventId(startEventId);
    Long eventId=EventUtils.saveScheduledEvent((callerUserId == null) ? User.UID_SYSTEM : callerUserId,asyncCmd.getEntityOwnerId(),asyncCmd.getEventType(),asyncCmd.getEventDescription(),startEventId);
    if (startEventId == 0) {
      startEventId=eventId;
    }
    params.put(""String_Node_Str"",String.valueOf(startEventId));
    ctx.setAccountId(asyncCmd.getEntityOwnerId());
    AsyncJobVO job=new AsyncJobVO();
    job.setInstanceId((objectId == null) ? asyncCmd.getInstanceId() : objectId);
    job.setInstanceType(asyncCmd.getInstanceType());
    job.setUserId(callerUserId);
    job.setAccountId(caller.getId());
    job.setCmd(cmdObj.getClass().getName());
    job.setCmdInfo(ApiGsonHelper.getBuilder().create().toJson(params));
    long jobId=_asyncMgr.submitAsyncJob(job);
    if (jobId == 0L) {
      String errorMsg=""String_Node_Str"" + job.getCmd();
      s_logger.warn(errorMsg);
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,errorMsg);
    }
    if (objectId != null) {
      return ((BaseAsyncCreateCmd)asyncCmd).getResponse(jobId,objectId,objectEntityTable);
    }
    SerializationContext.current().setUuidTranslation(true);
    return ApiResponseSerializer.toSerializedString(asyncCmd.getResponse(jobId),asyncCmd.getResponseType());
  }
 else {
    _dispatcher.dispatch(cmdObj,params);
    if (cmdObj instanceof BaseListCmd) {
      buildAsyncListResponse((BaseListCmd)cmdObj,caller);
    }
    SerializationContext.current().setUuidTranslation(true);
    return ApiResponseSerializer.toSerializedString((ResponseObject)cmdObj.getResponseObject(),cmdObj.getResponseType());
  }
}","private String queueCommand(BaseCmd cmdObj,Map<String,String> params){
  UserContext ctx=UserContext.current();
  Long callerUserId=ctx.getCallerUserId();
  Account caller=ctx.getCaller();
  if (cmdObj instanceof BaseAsyncCmd) {
    Long objectId=null;
    String objectEntityTable=null;
    if (cmdObj instanceof BaseAsyncCreateCmd) {
      BaseAsyncCreateCmd createCmd=(BaseAsyncCreateCmd)cmdObj;
      _dispatcher.dispatchCreateCmd(createCmd,params);
      objectId=createCmd.getEntityId();
      objectEntityTable=createCmd.getEntityTable();
      params.put(""String_Node_Str"",objectId.toString());
    }
 else {
      ApiDispatcher.setupParameters(cmdObj,params);
    }
    BaseAsyncCmd asyncCmd=(BaseAsyncCmd)cmdObj;
    if (callerUserId != null) {
      params.put(""String_Node_Str"",callerUserId.toString());
    }
    if (caller != null) {
      params.put(""String_Node_Str"",String.valueOf(caller.getId()));
    }
    long startEventId=ctx.getStartEventId();
    asyncCmd.setStartEventId(startEventId);
    Long eventId=EventUtils.saveScheduledEvent((callerUserId == null) ? User.UID_SYSTEM : callerUserId,asyncCmd.getEntityOwnerId(),asyncCmd.getEventType(),asyncCmd.getEventDescription(),startEventId);
    if (startEventId == 0) {
      startEventId=eventId;
    }
    params.put(""String_Node_Str"",String.valueOf(startEventId));
    ctx.setAccountId(asyncCmd.getEntityOwnerId());
    AsyncJobVO job=new AsyncJobVO();
    job.setInstanceId((objectId == null) ? asyncCmd.getInstanceId() : objectId);
    job.setInstanceType(asyncCmd.getInstanceType());
    job.setUserId(callerUserId);
    job.setAccountId(caller.getId());
    job.setCmd(cmdObj.getClass().getName());
    job.setCmdInfo(ApiGsonHelper.getBuilder().create().toJson(params));
    long jobId=_asyncMgr.submitAsyncJob(job);
    if (jobId == 0L) {
      String errorMsg=""String_Node_Str"" + job.getCmd();
      s_logger.warn(errorMsg);
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,errorMsg);
    }
    if (objectId != null) {
      SerializationContext.current().setUuidTranslation(true);
      return ((BaseAsyncCreateCmd)asyncCmd).getResponse(jobId,objectId,objectEntityTable);
    }
    SerializationContext.current().setUuidTranslation(true);
    return ApiResponseSerializer.toSerializedString(asyncCmd.getResponse(jobId),asyncCmd.getResponseType());
  }
 else {
    _dispatcher.dispatch(cmdObj,params);
    if (cmdObj instanceof BaseListCmd) {
      buildAsyncListResponse((BaseListCmd)cmdObj,caller);
    }
    SerializationContext.current().setUuidTranslation(true);
    return ApiResponseSerializer.toSerializedString((ResponseObject)cmdObj.getResponseObject(),cmdObj.getResponseType());
  }
}"
89283,"@DB public Long getIdentityId(String tableName,String identityString){
  assert(tableName != null);
  assert(identityString != null);
  PreparedStatement pstmt=null;
  Transaction txn=Transaction.open(Transaction.CLOUD_DB);
  try {
    try {
      pstmt=txn.prepareAutoCloseStatement(String.format(""String_Node_Str"",tableName));
      long id=0;
      try {
        id=Long.parseLong(identityString);
      }
 catch (      NumberFormatException e) {
      }
      pstmt.setLong(1,id);
      pstmt.setString(2,identityString);
      ResultSet rs=pstmt.executeQuery();
      if (rs.next()) {
        return rs.getLong(1);
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"" + tableName + ""String_Node_Str""+ identityString+ ""String_Node_Str"");
      }
    }
 catch (    SQLException e) {
      s_logger.error(""String_Node_Str"",e);
    }
  }
  finally {
    txn.close();
  }
  return null;
}","@DB public Long getIdentityId(String tableName,String identityString){
  assert(tableName != null);
  assert(identityString != null);
  PreparedStatement pstmt=null;
  Transaction txn=Transaction.open(Transaction.CLOUD_DB);
  try {
    try {
      pstmt=txn.prepareAutoCloseStatement(String.format(""String_Node_Str"",tableName));
      long id=0;
      try {
        id=Long.parseLong(identityString);
      }
 catch (      NumberFormatException e) {
      }
      pstmt.setLong(1,id);
      pstmt.setString(2,identityString);
      ResultSet rs=pstmt.executeQuery();
      if (rs.next()) {
        return rs.getLong(1);
      }
 else {
        if (id != 0)         return id;
        throw new InvalidParameterValueException(""String_Node_Str"" + tableName + ""String_Node_Str""+ identityString+ ""String_Node_Str"");
      }
    }
 catch (    SQLException e) {
      s_logger.error(""String_Node_Str"",e);
    }
  }
  finally {
    txn.close();
  }
  return null;
}"
89284,"public String getResponse(long jobId,long objectId){
  CreateCmdResponse response=new CreateCmdResponse();
  response.setJobId(jobId);
  response.setId(objectId);
  response.setResponseName(getCommandName());
  return _responseGenerator.toSerializedString(response,getResponseType());
}","public String getResponse(long jobId,long objectId,String objectEntityTable){
  CreateCmdResponse response=new CreateCmdResponse();
  response.setJobId(jobId);
  response.setId(objectId);
  response.setIdEntityTable(objectEntityTable);
  response.setResponseName(getCommandName());
  return _responseGenerator.toSerializedString(response,getResponseType());
}"
89285,"public Long getId(){
  return id.getValue();
}","public Long getId(){
  return getJobId();
}"
89286,"public void setJobInstanceType(String jobInstanceType){
  this.jobInstanceType=jobInstanceType;
  if (jobInstanceType != null) {
    if (jobInstanceType.equalsIgnoreCase(""String_Node_Str"")) {
      this.jobInstanceIdProxy.setTableName(""String_Node_Str"");
    }
 else     if (jobInstanceType.equalsIgnoreCase(""String_Node_Str"")) {
      this.jobInstanceIdProxy.setTableName(""String_Node_Str"");
    }
 else     if (jobInstanceType.equalsIgnoreCase(""String_Node_Str"")) {
      this.jobInstanceIdProxy.setTableName(""String_Node_Str"");
    }
 else {
      assert(false);
    }
  }
}","public void setJobInstanceType(String jobInstanceType){
  this.jobInstanceType=jobInstanceType;
  if (jobInstanceType != null) {
    if (jobInstanceType.equalsIgnoreCase(""String_Node_Str"")) {
      this.jobInstanceId.setTableName(""String_Node_Str"");
    }
 else     if (jobInstanceType.equalsIgnoreCase(""String_Node_Str"")) {
      this.jobInstanceId.setTableName(""String_Node_Str"");
    }
 else     if (jobInstanceType.equalsIgnoreCase(""String_Node_Str"")) {
      this.jobInstanceId.setTableName(""String_Node_Str"");
    }
 else {
      assert(false);
    }
  }
}"
89287,"public void setJobInstanceId(Long jobInstanceId){
  this.jobInstanceIdProxy.setValue(jobInstanceId);
}","public void setJobInstanceId(Long jobInstanceId){
  this.jobInstanceId.setValue(jobInstanceId);
}"
89288,"public void setId(Long id){
  this.id.setValue(id);
}","public void setId(Long id){
  setJobId(id);
}"
89289,"public Long getJobInstanceId(){
  return jobInstanceIdProxy.getValue();
}","public Long getJobInstanceId(){
  return this.jobInstanceId.getValue();
}"
89290,"public void setJobId(Long jobId){
  this.jobId=jobId;
}","public void setJobId(Long jobId){
  this.jobId.setValue(jobId);
}"
89291,"public Long getJobId(){
  return jobId;
}","public Long getJobId(){
  return jobId.getValue();
}"
89292,"public void setId(Long id){
  this.id=id;
}","public void setId(Long id){
  this.id.setValue(id);
}"
89293,"public Long getId(){
  return id;
}","public Long getId(){
  return id.getValue();
}"
89294,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String emailAddressList=configs.get(""String_Node_Str"");
  String[] emailAddresses=null;
  if (emailAddressList != null) {
    emailAddresses=emailAddressList.split(""String_Node_Str"");
  }
  String smtpHost=configs.get(""String_Node_Str"");
  int smtpPort=NumbersUtil.parseInt(configs.get(""String_Node_Str""),25);
  String useAuthStr=configs.get(""String_Node_Str"");
  boolean useAuth=((useAuthStr == null) ? false : Boolean.parseBoolean(useAuthStr));
  String smtpUsername=configs.get(""String_Node_Str"");
  String smtpPassword=configs.get(""String_Node_Str"");
  String emailSender=configs.get(""String_Node_Str"");
  String smtpDebugStr=configs.get(""String_Node_Str"");
  boolean smtpDebug=false;
  if (smtpDebugStr != null) {
    smtpDebug=Boolean.parseBoolean(smtpDebugStr);
  }
  _emailAlert=new EmailAlert(emailAddresses,smtpHost,smtpPort,useAuth,smtpUsername,smtpPassword,emailSender,smtpDebug);
  String storageCapacityThreshold=_configDao.getValue(Config.StorageCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  String cpuCapacityThreshold=_configDao.getValue(Config.CPUCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  String memoryCapacityThreshold=_configDao.getValue(Config.MemoryCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  String storageAllocCapacityThreshold=_configDao.getValue(Config.StorageAllocatedCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  String publicIPCapacityThreshold=_configDao.getValue(Config.PublicIpCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  String privateIPCapacityThreshold=_configDao.getValue(Config.PrivateIpCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  String secondaryStorageCapacityThreshold=_configDao.getValue(Config.SecondaryStorageCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  String vlanCapacityThreshold=_configDao.getValue(Config.VlanCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  String directNetworkPublicIpCapacityThreshold=_configDao.getValue(Config.DirectNetworkPublicIpCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  String localStorageCapacityThreshold=_configDao.getValue(Config.LocalStorageCapacityThreshold.key());
  configs.get(""String_Node_Str"");
  if (storageCapacityThreshold != null) {
    _storageCapacityThreshold=Double.parseDouble(storageCapacityThreshold);
  }
  if (storageAllocCapacityThreshold != null) {
    _storageAllocCapacityThreshold=Double.parseDouble(storageAllocCapacityThreshold);
  }
  if (cpuCapacityThreshold != null) {
    _cpuCapacityThreshold=Double.parseDouble(cpuCapacityThreshold);
  }
  if (memoryCapacityThreshold != null) {
    _memoryCapacityThreshold=Double.parseDouble(memoryCapacityThreshold);
  }
  if (publicIPCapacityThreshold != null) {
    _publicIPCapacityThreshold=Double.parseDouble(publicIPCapacityThreshold);
  }
  if (privateIPCapacityThreshold != null) {
    _privateIPCapacityThreshold=Double.parseDouble(privateIPCapacityThreshold);
  }
  if (secondaryStorageCapacityThreshold != null) {
    _secondaryStorageCapacityThreshold=Double.parseDouble(secondaryStorageCapacityThreshold);
  }
  if (vlanCapacityThreshold != null) {
    _vlanCapacityThreshold=Double.parseDouble(vlanCapacityThreshold);
  }
  if (directNetworkPublicIpCapacityThreshold != null) {
    _directNetworkPublicIpCapacityThreshold=Double.parseDouble(directNetworkPublicIpCapacityThreshold);
  }
  if (localStorageCapacityThreshold != null) {
    _localStorageCapacityThreshold=Double.parseDouble(localStorageCapacityThreshold);
  }
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_STORAGE,_storageCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED,_storageAllocCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_CPU,_cpuCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_MEMORY,_memoryCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP,_publicIPCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_PRIVATE_IP,_privateIPCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_SECONDARY_STORAGE,_secondaryStorageCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_VLAN,_vlanCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP,_directNetworkPublicIpCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_LOCAL_STORAGE,_localStorageCapacityThreshold);
  String capacityCheckPeriodStr=configs.get(""String_Node_Str"");
  if (capacityCheckPeriodStr != null) {
    _capacityCheckPeriod=Long.parseLong(capacityCheckPeriodStr);
    if (_capacityCheckPeriod <= 0)     _capacityCheckPeriod=Long.parseLong(Config.CapacityCheckPeriod.getDefaultValue());
  }
  String cpuOverProvisioningFactorStr=configs.get(""String_Node_Str"");
  if (cpuOverProvisioningFactorStr != null) {
    _cpuOverProvisioningFactor=NumbersUtil.parseFloat(cpuOverProvisioningFactorStr,1);
    if (_cpuOverProvisioningFactor < 1) {
      _cpuOverProvisioningFactor=1;
    }
  }
  _timer=new Timer(""String_Node_Str"");
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String emailAddressList=configs.get(""String_Node_Str"");
  String[] emailAddresses=null;
  if (emailAddressList != null) {
    emailAddresses=emailAddressList.split(""String_Node_Str"");
  }
  String smtpHost=configs.get(""String_Node_Str"");
  int smtpPort=NumbersUtil.parseInt(configs.get(""String_Node_Str""),25);
  String useAuthStr=configs.get(""String_Node_Str"");
  boolean useAuth=((useAuthStr == null) ? false : Boolean.parseBoolean(useAuthStr));
  String smtpUsername=configs.get(""String_Node_Str"");
  String smtpPassword=configs.get(""String_Node_Str"");
  String emailSender=configs.get(""String_Node_Str"");
  String smtpDebugStr=configs.get(""String_Node_Str"");
  boolean smtpDebug=false;
  if (smtpDebugStr != null) {
    smtpDebug=Boolean.parseBoolean(smtpDebugStr);
  }
  _emailAlert=new EmailAlert(emailAddresses,smtpHost,smtpPort,useAuth,smtpUsername,smtpPassword,emailSender,smtpDebug);
  String storageCapacityThreshold=_configDao.getValue(Config.StorageCapacityThreshold.key());
  String cpuCapacityThreshold=_configDao.getValue(Config.CPUCapacityThreshold.key());
  String memoryCapacityThreshold=_configDao.getValue(Config.MemoryCapacityThreshold.key());
  String storageAllocCapacityThreshold=_configDao.getValue(Config.StorageAllocatedCapacityThreshold.key());
  String publicIPCapacityThreshold=_configDao.getValue(Config.PublicIpCapacityThreshold.key());
  String privateIPCapacityThreshold=_configDao.getValue(Config.PrivateIpCapacityThreshold.key());
  String secondaryStorageCapacityThreshold=_configDao.getValue(Config.SecondaryStorageCapacityThreshold.key());
  String vlanCapacityThreshold=_configDao.getValue(Config.VlanCapacityThreshold.key());
  String directNetworkPublicIpCapacityThreshold=_configDao.getValue(Config.DirectNetworkPublicIpCapacityThreshold.key());
  String localStorageCapacityThreshold=_configDao.getValue(Config.LocalStorageCapacityThreshold.key());
  if (storageCapacityThreshold != null) {
    _storageCapacityThreshold=Double.parseDouble(storageCapacityThreshold);
  }
  if (storageAllocCapacityThreshold != null) {
    _storageAllocCapacityThreshold=Double.parseDouble(storageAllocCapacityThreshold);
  }
  if (cpuCapacityThreshold != null) {
    _cpuCapacityThreshold=Double.parseDouble(cpuCapacityThreshold);
  }
  if (memoryCapacityThreshold != null) {
    _memoryCapacityThreshold=Double.parseDouble(memoryCapacityThreshold);
  }
  if (publicIPCapacityThreshold != null) {
    _publicIPCapacityThreshold=Double.parseDouble(publicIPCapacityThreshold);
  }
  if (privateIPCapacityThreshold != null) {
    _privateIPCapacityThreshold=Double.parseDouble(privateIPCapacityThreshold);
  }
  if (secondaryStorageCapacityThreshold != null) {
    _secondaryStorageCapacityThreshold=Double.parseDouble(secondaryStorageCapacityThreshold);
  }
  if (vlanCapacityThreshold != null) {
    _vlanCapacityThreshold=Double.parseDouble(vlanCapacityThreshold);
  }
  if (directNetworkPublicIpCapacityThreshold != null) {
    _directNetworkPublicIpCapacityThreshold=Double.parseDouble(directNetworkPublicIpCapacityThreshold);
  }
  if (localStorageCapacityThreshold != null) {
    _localStorageCapacityThreshold=Double.parseDouble(localStorageCapacityThreshold);
  }
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_STORAGE,_storageCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED,_storageAllocCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_CPU,_cpuCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_MEMORY,_memoryCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP,_publicIPCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_PRIVATE_IP,_privateIPCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_SECONDARY_STORAGE,_secondaryStorageCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_VLAN,_vlanCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP,_directNetworkPublicIpCapacityThreshold);
  _capacityTypeThresholdMap.put(Capacity.CAPACITY_TYPE_LOCAL_STORAGE,_localStorageCapacityThreshold);
  String capacityCheckPeriodStr=configs.get(""String_Node_Str"");
  if (capacityCheckPeriodStr != null) {
    _capacityCheckPeriod=Long.parseLong(capacityCheckPeriodStr);
    if (_capacityCheckPeriod <= 0)     _capacityCheckPeriod=Long.parseLong(Config.CapacityCheckPeriod.getDefaultValue());
  }
  String cpuOverProvisioningFactorStr=configs.get(""String_Node_Str"");
  if (cpuOverProvisioningFactorStr != null) {
    _cpuOverProvisioningFactor=NumbersUtil.parseFloat(cpuOverProvisioningFactorStr,1);
    if (_cpuOverProvisioningFactor < 1) {
      _cpuOverProvisioningFactor=1;
    }
  }
  _timer=new Timer(""String_Node_Str"");
  return true;
}"
89295,"private void generateEmailAlert(DataCenterVO dc,HostPodVO pod,ClusterVO cluster,double totalCapacity,double usedCapacity,short capacityType){
  String msgSubject=null;
  String msgContent=null;
  String totalStr;
  String usedStr;
  String pctStr=formatPercent(usedCapacity / totalCapacity);
  short alertType=-1;
  Long podId=pod == null ? null : pod.getId();
  Long clusterId=cluster == null ? null : cluster.getId();
switch (capacityType) {
case CapacityVO.CAPACITY_TYPE_MEMORY:
    msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
  totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_MEMORY;
break;
case CapacityVO.CAPACITY_TYPE_CPU:
msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
totalStr=_dfWhole.format(totalCapacity);
usedStr=_dfWhole.format(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_CPU;
break;
case CapacityVO.CAPACITY_TYPE_STORAGE:
msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_STORAGE;
break;
case CapacityVO.CAPACITY_TYPE_STORAGE_ALLOCATED:
msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_STORAGE_ALLOCATED;
break;
case CapacityVO.CAPACITY_TYPE_LOCAL_STORAGE:
msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_LOCAL_STORAGE;
break;
case CapacityVO.CAPACITY_TYPE_PRIVATE_IP:
msgSubject=""String_Node_Str"" + pod.getName() + ""String_Node_Str""+ dc.getName();
totalStr=Double.toString(totalCapacity);
usedStr=Double.toString(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_PRIVATE_IP;
break;
case CapacityVO.CAPACITY_TYPE_SECONDARY_STORAGE:
msgSubject=""String_Node_Str"" + dc.getName();
totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_SECONDARY_STORAGE;
break;
case CapacityVO.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP:
msgSubject=""String_Node_Str"" + dc.getName();
totalStr=Double.toString(totalCapacity);
usedStr=Double.toString(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_VIRTUAL_NETWORK_PUBLIC_IP;
break;
case CapacityVO.CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP:
msgSubject=""String_Node_Str"" + dc.getName();
totalStr=Double.toString(totalCapacity);
usedStr=Double.toString(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_DIRECT_ATTACHED_PUBLIC_IP;
break;
case CapacityVO.CAPACITY_TYPE_VLAN:
msgSubject=""String_Node_Str"" + dc.getName();
totalStr=Double.toString(totalCapacity);
usedStr=Double.toString(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_VLAN;
break;
}
try {
_emailAlert.sendAlert(alertType,dc.getId(),podId,clusterId,msgSubject,msgContent);
}
 catch (Exception ex) {
s_logger.error(""String_Node_Str"",ex);
}
}","private void generateEmailAlert(DataCenterVO dc,HostPodVO pod,ClusterVO cluster,double totalCapacity,double usedCapacity,short capacityType){
  String msgSubject=null;
  String msgContent=null;
  String totalStr;
  String usedStr;
  String pctStr=formatPercent(usedCapacity / totalCapacity);
  short alertType=-1;
  Long podId=pod == null ? null : pod.getId();
  Long clusterId=cluster == null ? null : cluster.getId();
switch (capacityType) {
case CapacityVO.CAPACITY_TYPE_MEMORY:
    msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
  totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_MEMORY;
break;
case CapacityVO.CAPACITY_TYPE_CPU:
msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
totalStr=_dfWhole.format(totalCapacity);
usedStr=_dfWhole.format(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_CPU;
break;
case CapacityVO.CAPACITY_TYPE_STORAGE:
msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_STORAGE;
break;
case CapacityVO.CAPACITY_TYPE_STORAGE_ALLOCATED:
msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_STORAGE_ALLOCATED;
break;
case CapacityVO.CAPACITY_TYPE_LOCAL_STORAGE:
msgSubject=""String_Node_Str"" + cluster.getName() + ""String_Node_Str""+ pod.getName()+ ""String_Node_Str""+ dc.getName();
totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_LOCAL_STORAGE;
break;
case CapacityVO.CAPACITY_TYPE_PRIVATE_IP:
msgSubject=""String_Node_Str"" + pod.getName() + ""String_Node_Str""+ dc.getName();
totalStr=Double.toString(totalCapacity);
usedStr=Double.toString(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_PRIVATE_IP;
break;
case CapacityVO.CAPACITY_TYPE_SECONDARY_STORAGE:
msgSubject=""String_Node_Str"" + dc.getName();
totalStr=formatBytesToMegabytes(totalCapacity);
usedStr=formatBytesToMegabytes(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_SECONDARY_STORAGE;
break;
case CapacityVO.CAPACITY_TYPE_VIRTUAL_NETWORK_PUBLIC_IP:
msgSubject=""String_Node_Str"" + dc.getName();
totalStr=Double.toString(totalCapacity);
usedStr=Double.toString(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_VIRTUAL_NETWORK_PUBLIC_IP;
break;
case CapacityVO.CAPACITY_TYPE_DIRECT_ATTACHED_PUBLIC_IP:
msgSubject=""String_Node_Str"" + dc.getName();
totalStr=Double.toString(totalCapacity);
usedStr=Double.toString(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_DIRECT_ATTACHED_PUBLIC_IP;
break;
case CapacityVO.CAPACITY_TYPE_VLAN:
msgSubject=""String_Node_Str"" + dc.getName();
totalStr=Double.toString(totalCapacity);
usedStr=Double.toString(usedCapacity);
msgContent=""String_Node_Str"" + totalStr + ""String_Node_Str""+ usedStr+ ""String_Node_Str""+ pctStr+ ""String_Node_Str"";
alertType=ALERT_TYPE_VLAN;
break;
}
try {
if (s_logger.isDebugEnabled()) {
s_logger.debug(msgSubject);
s_logger.debug(msgContent);
}
_emailAlert.sendAlert(alertType,dc.getId(),podId,clusterId,msgSubject,msgContent);
}
 catch (Exception ex) {
s_logger.error(""String_Node_Str"",ex);
}
}"
89296,"public void checkForAlerts(){
  recalculateCapacity();
  if (_emailAlert == null) {
    return;
  }
  List<DataCenterVO> dataCenterList=_dcDao.listAll();
  List<ClusterVO> clusterList=_clusterDao.listAll();
  List<HostPodVO> podList=_podDao.listAll();
  List<Short> dataCenterCapacityTypes=getCapacityTypesAtZoneLevel();
  List<Short> podCapacityTypes=getCapacityTypesAtPodLevel();
  List<Short> clusterCapacityTypes=getCapacityTypesAtClusterLevel();
  for (  DataCenterVO dc : dataCenterList) {
    for (    Short capacityType : dataCenterCapacityTypes) {
      List<SummedCapacity> capacity=_capacityDao.findCapacityBy(capacityType.intValue(),dc.getId(),null,null);
      if (capacity == null || capacity.size() == 0) {
        continue;
      }
      double totalCapacity=capacity.get(0).getTotalCapacity();
      double usedCapacity=capacity.get(0).getUsedCapacity();
      if (totalCapacity != 0 && usedCapacity / totalCapacity > _capacityTypeThresholdMap.get(capacityType)) {
        generateEmailAlert(dc,null,null,totalCapacity,usedCapacity,capacityType);
      }
    }
  }
  for (  HostPodVO pod : podList) {
    for (    Short capacityType : podCapacityTypes) {
      List<SummedCapacity> capacity=_capacityDao.findCapacityBy(capacityType.intValue(),pod.getDataCenterId(),pod.getId(),null);
      if (capacity == null || capacity.size() == 0) {
        continue;
      }
      double totalCapacity=capacity.get(0).getTotalCapacity();
      double usedCapacity=capacity.get(0).getUsedCapacity();
      if (totalCapacity != 0 && usedCapacity / totalCapacity > _capacityTypeThresholdMap.get(capacityType)) {
        generateEmailAlert(ApiDBUtils.findZoneById(pod.getDataCenterId()),pod,null,totalCapacity,usedCapacity,capacityType);
      }
    }
  }
  for (  ClusterVO cluster : clusterList) {
    for (    Short capacityType : clusterCapacityTypes) {
      List<SummedCapacity> capacity=_capacityDao.findCapacityBy(capacityType.intValue(),cluster.getDataCenterId(),null,cluster.getId());
      if (capacity == null || capacity.size() == 0) {
        continue;
      }
      double totalCapacity=capacity.get(0).getTotalCapacity();
      double usedCapacity=capacity.get(0).getUsedCapacity();
      if (totalCapacity != 0 && usedCapacity / totalCapacity > _capacityTypeThresholdMap.get(capacityType)) {
        generateEmailAlert(ApiDBUtils.findZoneById(cluster.getDataCenterId()),ApiDBUtils.findPodById(cluster.getPodId()),cluster,totalCapacity,usedCapacity,capacityType);
      }
    }
  }
}","public void checkForAlerts(){
  recalculateCapacity();
  if (_emailAlert == null) {
    return;
  }
  List<DataCenterVO> dataCenterList=_dcDao.listAll();
  List<ClusterVO> clusterList=_clusterDao.listAll();
  List<HostPodVO> podList=_podDao.listAll();
  List<Short> dataCenterCapacityTypes=getCapacityTypesAtZoneLevel();
  List<Short> podCapacityTypes=getCapacityTypesAtPodLevel();
  List<Short> clusterCapacityTypes=getCapacityTypesAtClusterLevel();
  for (  DataCenterVO dc : dataCenterList) {
    for (    Short capacityType : dataCenterCapacityTypes) {
      List<SummedCapacity> capacity=new ArrayList<SummedCapacity>();
      capacity=_capacityDao.findCapacityBy(capacityType.intValue(),dc.getId(),null,null);
      if (capacityType == Capacity.CAPACITY_TYPE_SECONDARY_STORAGE) {
        capacity.add(getUsedStats(capacityType,dc.getId(),null,null));
      }
      if (capacity == null || capacity.size() == 0) {
        continue;
      }
      double totalCapacity=capacity.get(0).getTotalCapacity();
      double usedCapacity=capacity.get(0).getUsedCapacity();
      if (totalCapacity != 0 && usedCapacity / totalCapacity > _capacityTypeThresholdMap.get(capacityType)) {
        generateEmailAlert(dc,null,null,totalCapacity,usedCapacity,capacityType);
      }
    }
  }
  for (  HostPodVO pod : podList) {
    for (    Short capacityType : podCapacityTypes) {
      List<SummedCapacity> capacity=_capacityDao.findCapacityBy(capacityType.intValue(),pod.getDataCenterId(),pod.getId(),null);
      if (capacity == null || capacity.size() == 0) {
        continue;
      }
      double totalCapacity=capacity.get(0).getTotalCapacity();
      double usedCapacity=capacity.get(0).getUsedCapacity();
      if (totalCapacity != 0 && usedCapacity / totalCapacity > _capacityTypeThresholdMap.get(capacityType)) {
        generateEmailAlert(ApiDBUtils.findZoneById(pod.getDataCenterId()),pod,null,totalCapacity,usedCapacity,capacityType);
      }
    }
  }
  for (  ClusterVO cluster : clusterList) {
    for (    Short capacityType : clusterCapacityTypes) {
      List<SummedCapacity> capacity=new ArrayList<SummedCapacity>();
      float overProvFactor=1f;
      capacity=_capacityDao.findCapacityBy(capacityType.intValue(),cluster.getDataCenterId(),null,cluster.getId());
      if (capacityType == Capacity.CAPACITY_TYPE_STORAGE) {
        capacity.add(getUsedStats(capacityType,cluster.getDataCenterId(),cluster.getPodId(),cluster.getId()));
      }
      if (capacity == null || capacity.size() == 0) {
        continue;
      }
      if (capacityType == Capacity.CAPACITY_TYPE_CPU) {
        overProvFactor=ApiDBUtils.getCpuOverprovisioningFactor();
      }
      double totalCapacity=capacity.get(0).getTotalCapacity() * overProvFactor;
      double usedCapacity=capacity.get(0).getUsedCapacity() + capacity.get(0).getReservedCapacity();
      if (totalCapacity != 0 && usedCapacity / totalCapacity > _capacityTypeThresholdMap.get(capacityType)) {
        generateEmailAlert(ApiDBUtils.findZoneById(cluster.getDataCenterId()),ApiDBUtils.findPodById(cluster.getPodId()),cluster,totalCapacity,usedCapacity,capacityType);
      }
    }
  }
}"
89297,"@Override public ClusterResponse createClusterResponse(Cluster cluster,Boolean showCapacities){
  ClusterResponse clusterResponse=new ClusterResponse();
  clusterResponse.setId(cluster.getId());
  clusterResponse.setName(cluster.getName());
  clusterResponse.setPodId(cluster.getPodId());
  clusterResponse.setZoneId(cluster.getDataCenterId());
  clusterResponse.setHypervisorType(cluster.getHypervisorType().toString());
  clusterResponse.setClusterType(cluster.getClusterType().toString());
  clusterResponse.setAllocationState(cluster.getAllocationState().toString());
  clusterResponse.setManagedState(cluster.getManagedState().toString());
  HostPodVO pod=ApiDBUtils.findPodById(cluster.getPodId());
  if (pod != null) {
    clusterResponse.setPodName(pod.getName());
  }
  DataCenterVO zone=ApiDBUtils.findZoneById(cluster.getDataCenterId());
  clusterResponse.setZoneName(zone.getName());
  if (showCapacities != null && showCapacities) {
    List<SummedCapacity> capacities=ApiDBUtils.getCapacityByClusterPodZone(null,null,cluster.getId());
    Set<CapacityResponse> capacityResponses=new HashSet<CapacityResponse>();
    float cpuOverprovisioningFactor=ApiDBUtils.getCpuOverprovisioningFactor();
    for (    SummedCapacity capacity : capacities) {
      CapacityResponse capacityResponse=new CapacityResponse();
      capacityResponse.setCapacityType(capacity.getCapacityType());
      capacityResponse.setCapacityUsed(capacity.getUsedCapacity());
      if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_CPU) {
        capacityResponse.setCapacityTotal(new Long((long)(capacity.getTotalCapacity() * cpuOverprovisioningFactor)));
      }
 else       if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {
        List<SummedCapacity> c=ApiDBUtils.findNonSharedStorageForClusterPodZone(null,null,cluster.getId());
        capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());
        capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());
      }
 else {
        capacityResponse.setCapacityTotal(capacity.getTotalCapacity());
      }
      if (capacityResponse.getCapacityTotal() != 0) {
        capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));
      }
 else {
        capacityResponse.setPercentUsed(s_percentFormat.format(0L));
      }
      capacityResponses.add(capacityResponse);
    }
    capacityResponses.addAll(getStatsCapacityresponse(null,null,pod.getId(),pod.getDataCenterId()));
    clusterResponse.setCapacitites(new ArrayList<CapacityResponse>(capacityResponses));
  }
  clusterResponse.setObjectName(""String_Node_Str"");
  return clusterResponse;
}","@Override public ClusterResponse createClusterResponse(Cluster cluster,Boolean showCapacities){
  ClusterResponse clusterResponse=new ClusterResponse();
  clusterResponse.setId(cluster.getId());
  clusterResponse.setName(cluster.getName());
  clusterResponse.setPodId(cluster.getPodId());
  clusterResponse.setZoneId(cluster.getDataCenterId());
  clusterResponse.setHypervisorType(cluster.getHypervisorType().toString());
  clusterResponse.setClusterType(cluster.getClusterType().toString());
  clusterResponse.setAllocationState(cluster.getAllocationState().toString());
  clusterResponse.setManagedState(cluster.getManagedState().toString());
  HostPodVO pod=ApiDBUtils.findPodById(cluster.getPodId());
  if (pod != null) {
    clusterResponse.setPodName(pod.getName());
  }
  DataCenterVO zone=ApiDBUtils.findZoneById(cluster.getDataCenterId());
  clusterResponse.setZoneName(zone.getName());
  if (showCapacities != null && showCapacities) {
    List<SummedCapacity> capacities=ApiDBUtils.getCapacityByClusterPodZone(null,null,cluster.getId());
    Set<CapacityResponse> capacityResponses=new HashSet<CapacityResponse>();
    float cpuOverprovisioningFactor=ApiDBUtils.getCpuOverprovisioningFactor();
    for (    SummedCapacity capacity : capacities) {
      CapacityResponse capacityResponse=new CapacityResponse();
      capacityResponse.setCapacityType(capacity.getCapacityType());
      capacityResponse.setCapacityUsed(capacity.getUsedCapacity());
      if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_CPU) {
        capacityResponse.setCapacityTotal(new Long((long)(capacity.getTotalCapacity() * cpuOverprovisioningFactor)));
      }
 else       if (capacity.getCapacityType() == Capacity.CAPACITY_TYPE_STORAGE_ALLOCATED) {
        List<SummedCapacity> c=ApiDBUtils.findNonSharedStorageForClusterPodZone(null,null,cluster.getId());
        capacityResponse.setCapacityTotal(capacity.getTotalCapacity() - c.get(0).getTotalCapacity());
        capacityResponse.setCapacityUsed(capacity.getUsedCapacity() - c.get(0).getUsedCapacity());
      }
 else {
        capacityResponse.setCapacityTotal(capacity.getTotalCapacity());
      }
      if (capacityResponse.getCapacityTotal() != 0) {
        capacityResponse.setPercentUsed(s_percentFormat.format((float)capacityResponse.getCapacityUsed() / (float)capacityResponse.getCapacityTotal() * 100f));
      }
 else {
        capacityResponse.setPercentUsed(s_percentFormat.format(0L));
      }
      capacityResponses.add(capacityResponse);
    }
    capacityResponses.addAll(getStatsCapacityresponse(null,cluster.getId(),pod.getId(),pod.getDataCenterId()));
    clusterResponse.setCapacitites(new ArrayList<CapacityResponse>(capacityResponses));
  }
  clusterResponse.setObjectName(""String_Node_Str"");
  return clusterResponse;
}"
89298,"public SummedCapacity(){
}","public SummedCapacity(long sumUsed,long sumReserved,long sumTotal,short capacityType,Long clusterId,Long podId){
  super();
  this.sumUsed=sumUsed;
  this.sumReserved=sumReserved;
  this.sumTotal=sumTotal;
  this.capacityType=capacityType;
  this.clusterId=clusterId;
  this.podId=podId;
}"
89299,"protected void populateDaos(){
  addDao(""String_Node_Str"",StackMaidDaoImpl.class);
  addDao(""String_Node_Str"",VMTemplateZoneDaoImpl.class);
  addDao(""String_Node_Str"",DomainRouterDaoImpl.class);
  addDao(""String_Node_Str"",HostDaoImpl.class);
  addDao(""String_Node_Str"",VMInstanceDaoImpl.class);
  addDao(""String_Node_Str"",UserVmDaoImpl.class);
  ComponentInfo<? extends GenericDao<?,? extends Serializable>> info=addDao(""String_Node_Str"",ServiceOfferingDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info=addDao(""String_Node_Str"",DiskOfferingDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info=addDao(""String_Node_Str"",DataCenterDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info=addDao(""String_Node_Str"",HostPodDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  addDao(""String_Node_Str"",IPAddressDaoImpl.class);
  info=addDao(""String_Node_Str"",VlanDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  addDao(""String_Node_Str"",PodVlanMapDaoImpl.class);
  addDao(""String_Node_Str"",AccountVlanMapDaoImpl.class);
  addDao(""String_Node_Str"",VolumeDaoImpl.class);
  addDao(""String_Node_Str"",EventDaoImpl.class);
  info=addDao(""String_Node_Str"",UserDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  addDao(""String_Node_Str"",UserStatisticsDaoImpl.class);
  addDao(""String_Node_Str"",FirewallRulesDaoImpl.class);
  addDao(""String_Node_Str"",LoadBalancerDaoImpl.class);
  addDao(""String_Node_Str"",NetworkRuleConfigDaoImpl.class);
  addDao(""String_Node_Str"",LoadBalancerVMMapDaoImpl.class);
  addDao(""String_Node_Str"",DataCenterIpAddressDaoImpl.class);
  addDao(""String_Node_Str"",SecurityGroupDaoImpl.class);
  addDao(""String_Node_Str"",IngressRuleDaoImpl.class);
  addDao(""String_Node_Str"",SecurityGroupVMMapDaoImpl.class);
  addDao(""String_Node_Str"",SecurityGroupRulesDaoImpl.class);
  addDao(""String_Node_Str"",SecurityGroupWorkDaoImpl.class);
  addDao(""String_Node_Str"",VmRulesetLogDaoImpl.class);
  addDao(""String_Node_Str"",AlertDaoImpl.class);
  addDao(""String_Node_Str"",CapacityDaoImpl.class);
  addDao(""String_Node_Str"",DomainDaoImpl.class);
  addDao(""String_Node_Str"",AccountDaoImpl.class);
  addDao(""String_Node_Str"",ResourceLimitDaoImpl.class);
  addDao(""String_Node_Str"",ResourceCountDaoImpl.class);
  addDao(""String_Node_Str"",UserAccountDaoImpl.class);
  addDao(""String_Node_Str"",VMTemplateHostDaoImpl.class);
  addDao(""String_Node_Str"",UploadDaoImpl.class);
  addDao(""String_Node_Str"",VMTemplatePoolDaoImpl.class);
  addDao(""String_Node_Str"",LaunchPermissionDaoImpl.class);
  addDao(""String_Node_Str"",ConfigurationDaoImpl.class);
  info=addDao(""String_Node_Str"",VMTemplateDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  addDao(""String_Node_Str"",HighAvailabilityDaoImpl.class);
  addDao(""String_Node_Str"",ConsoleProxyDaoImpl.class);
  addDao(""String_Node_Str"",SecondaryStorageVmDaoImpl.class);
  addDao(""String_Node_Str"",ManagementServerHostDaoImpl.class);
  addDao(""String_Node_Str"",AgentUpgradeDaoImpl.class);
  addDao(""String_Node_Str"",SnapshotDaoImpl.class);
  addDao(""String_Node_Str"",AsyncJobDaoImpl.class);
  addDao(""String_Node_Str"",SyncQueueDaoImpl.class);
  addDao(""String_Node_Str"",SyncQueueItemDaoImpl.class);
  addDao(""String_Node_Str"",GuestOSDaoImpl.class);
  addDao(""String_Node_Str"",GuestOSCategoryDaoImpl.class);
  addDao(""String_Node_Str"",StoragePoolDaoImpl.class);
  addDao(""String_Node_Str"",StoragePoolHostDaoImpl.class);
  addDao(""String_Node_Str"",HostDetailsDaoImpl.class);
  addDao(""String_Node_Str"",SnapshotPolicyDaoImpl.class);
  addDao(""String_Node_Str"",SnapshotScheduleDaoImpl.class);
  addDao(""String_Node_Str"",ClusterDaoImpl.class);
  addDao(""String_Node_Str"",CertificateDaoImpl.class);
  addDao(""String_Node_Str"",NetworkDaoImpl.class);
  addDao(""String_Node_Str"",NetworkOfferingDaoImpl.class);
  addDao(""String_Node_Str"",NicDaoImpl.class);
  addDao(""String_Node_Str"",InstanceGroupDaoImpl.class);
  addDao(""String_Node_Str"",InstanceGroupVMMapDaoImpl.class);
  addDao(""String_Node_Str"",RemoteAccessVpnDaoImpl.class);
  addDao(""String_Node_Str"",VpnUserDaoImpl.class);
  addDao(""String_Node_Str"",ItWorkDaoImpl.class);
  addDao(""String_Node_Str"",FirewallRulesDaoImpl.class);
  addDao(""String_Node_Str"",PortForwardingRulesDaoImpl.class);
  addDao(""String_Node_Str"",FirewallRulesCidrsDaoImpl.class);
  addDao(""String_Node_Str"",SSHKeyPairDaoImpl.class);
  addDao(""String_Node_Str"",UsageEventDaoImpl.class);
  addDao(""String_Node_Str"",ClusterDetailsDaoImpl.class);
  addDao(""String_Node_Str"",UserVmDetailsDaoImpl.class);
  addDao(""String_Node_Str"",VlanMappingDaoImpl.class);
  addDao(""String_Node_Str"",VlanMappingDirtyDaoImpl.class);
  addDao(""String_Node_Str"",OvsWorkDaoImpl.class);
  addDao(""String_Node_Str"",VmFlowLogDaoImpl.class);
  addDao(""String_Node_Str"",GreTunnelDaoImpl.class);
  addDao(""String_Node_Str"",OvsTunnelDaoImpl.class);
  addDao(""String_Node_Str"",OvsTunnelAccountDaoImpl.class);
  addDao(""String_Node_Str"",StoragePoolWorkDaoImpl.class);
  addDao(""String_Node_Str"",HostTagsDaoImpl.class);
  addDao(""String_Node_Str"",NetworkDomainDaoImpl.class);
  addDao(""String_Node_Str"",KeystoreDaoImpl.class);
  addDao(""String_Node_Str"",DcDetailsDaoImpl.class);
  addDao(""String_Node_Str"",SwiftDaoImpl.class);
  addDao(""String_Node_Str"",HostTransferMapDaoImpl.class);
  addDao(""String_Node_Str"",ProjectDaoImpl.class);
  addDao(""String_Node_Str"",InlineLoadBalancerNicMapDaoImpl.class);
  addDao(""String_Node_Str"",ElasticLbVmMapDaoImpl.class);
  addDao(""String_Node_Str"",ProjectAccountDaoImpl.class);
  addDao(""String_Node_Str"",ProjectInvitationDaoImpl.class);
  info=addDao(""String_Node_Str"",HypervisorCapabilitiesDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
}","protected void populateDaos(){
  addDao(""String_Node_Str"",StackMaidDaoImpl.class);
  addDao(""String_Node_Str"",VMTemplateZoneDaoImpl.class);
  addDao(""String_Node_Str"",DomainRouterDaoImpl.class);
  addDao(""String_Node_Str"",HostDaoImpl.class);
  addDao(""String_Node_Str"",VMInstanceDaoImpl.class);
  addDao(""String_Node_Str"",UserVmDaoImpl.class);
  ComponentInfo<? extends GenericDao<?,? extends Serializable>> info=addDao(""String_Node_Str"",ServiceOfferingDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info=addDao(""String_Node_Str"",DiskOfferingDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info=addDao(""String_Node_Str"",DataCenterDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info=addDao(""String_Node_Str"",HostPodDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  addDao(""String_Node_Str"",IPAddressDaoImpl.class);
  info=addDao(""String_Node_Str"",VlanDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  addDao(""String_Node_Str"",PodVlanMapDaoImpl.class);
  addDao(""String_Node_Str"",AccountVlanMapDaoImpl.class);
  addDao(""String_Node_Str"",VolumeDaoImpl.class);
  addDao(""String_Node_Str"",EventDaoImpl.class);
  info=addDao(""String_Node_Str"",UserDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  addDao(""String_Node_Str"",UserStatisticsDaoImpl.class);
  addDao(""String_Node_Str"",FirewallRulesDaoImpl.class);
  addDao(""String_Node_Str"",LoadBalancerDaoImpl.class);
  addDao(""String_Node_Str"",NetworkRuleConfigDaoImpl.class);
  addDao(""String_Node_Str"",LoadBalancerVMMapDaoImpl.class);
  addDao(""String_Node_Str"",DataCenterIpAddressDaoImpl.class);
  addDao(""String_Node_Str"",SecurityGroupDaoImpl.class);
  addDao(""String_Node_Str"",IngressRuleDaoImpl.class);
  addDao(""String_Node_Str"",SecurityGroupVMMapDaoImpl.class);
  addDao(""String_Node_Str"",SecurityGroupRulesDaoImpl.class);
  addDao(""String_Node_Str"",SecurityGroupWorkDaoImpl.class);
  addDao(""String_Node_Str"",VmRulesetLogDaoImpl.class);
  addDao(""String_Node_Str"",AlertDaoImpl.class);
  addDao(""String_Node_Str"",CapacityDaoImpl.class);
  addDao(""String_Node_Str"",DomainDaoImpl.class);
  addDao(""String_Node_Str"",AccountDaoImpl.class);
  addDao(""String_Node_Str"",ResourceLimitDaoImpl.class);
  addDao(""String_Node_Str"",ResourceCountDaoImpl.class);
  addDao(""String_Node_Str"",UserAccountDaoImpl.class);
  addDao(""String_Node_Str"",VMTemplateHostDaoImpl.class);
  addDao(""String_Node_Str"",VMTemplateSwiftDaoImpl.class);
  addDao(""String_Node_Str"",UploadDaoImpl.class);
  addDao(""String_Node_Str"",VMTemplatePoolDaoImpl.class);
  addDao(""String_Node_Str"",LaunchPermissionDaoImpl.class);
  addDao(""String_Node_Str"",ConfigurationDaoImpl.class);
  info=addDao(""String_Node_Str"",VMTemplateDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  addDao(""String_Node_Str"",HighAvailabilityDaoImpl.class);
  addDao(""String_Node_Str"",ConsoleProxyDaoImpl.class);
  addDao(""String_Node_Str"",SecondaryStorageVmDaoImpl.class);
  addDao(""String_Node_Str"",ManagementServerHostDaoImpl.class);
  addDao(""String_Node_Str"",AgentUpgradeDaoImpl.class);
  addDao(""String_Node_Str"",SnapshotDaoImpl.class);
  addDao(""String_Node_Str"",AsyncJobDaoImpl.class);
  addDao(""String_Node_Str"",SyncQueueDaoImpl.class);
  addDao(""String_Node_Str"",SyncQueueItemDaoImpl.class);
  addDao(""String_Node_Str"",GuestOSDaoImpl.class);
  addDao(""String_Node_Str"",GuestOSCategoryDaoImpl.class);
  addDao(""String_Node_Str"",StoragePoolDaoImpl.class);
  addDao(""String_Node_Str"",StoragePoolHostDaoImpl.class);
  addDao(""String_Node_Str"",HostDetailsDaoImpl.class);
  addDao(""String_Node_Str"",SnapshotPolicyDaoImpl.class);
  addDao(""String_Node_Str"",SnapshotScheduleDaoImpl.class);
  addDao(""String_Node_Str"",ClusterDaoImpl.class);
  addDao(""String_Node_Str"",CertificateDaoImpl.class);
  addDao(""String_Node_Str"",NetworkDaoImpl.class);
  addDao(""String_Node_Str"",NetworkOfferingDaoImpl.class);
  addDao(""String_Node_Str"",NicDaoImpl.class);
  addDao(""String_Node_Str"",InstanceGroupDaoImpl.class);
  addDao(""String_Node_Str"",InstanceGroupVMMapDaoImpl.class);
  addDao(""String_Node_Str"",RemoteAccessVpnDaoImpl.class);
  addDao(""String_Node_Str"",VpnUserDaoImpl.class);
  addDao(""String_Node_Str"",ItWorkDaoImpl.class);
  addDao(""String_Node_Str"",FirewallRulesDaoImpl.class);
  addDao(""String_Node_Str"",PortForwardingRulesDaoImpl.class);
  addDao(""String_Node_Str"",FirewallRulesCidrsDaoImpl.class);
  addDao(""String_Node_Str"",SSHKeyPairDaoImpl.class);
  addDao(""String_Node_Str"",UsageEventDaoImpl.class);
  addDao(""String_Node_Str"",ClusterDetailsDaoImpl.class);
  addDao(""String_Node_Str"",UserVmDetailsDaoImpl.class);
  addDao(""String_Node_Str"",VlanMappingDaoImpl.class);
  addDao(""String_Node_Str"",VlanMappingDirtyDaoImpl.class);
  addDao(""String_Node_Str"",OvsWorkDaoImpl.class);
  addDao(""String_Node_Str"",VmFlowLogDaoImpl.class);
  addDao(""String_Node_Str"",GreTunnelDaoImpl.class);
  addDao(""String_Node_Str"",OvsTunnelDaoImpl.class);
  addDao(""String_Node_Str"",OvsTunnelAccountDaoImpl.class);
  addDao(""String_Node_Str"",StoragePoolWorkDaoImpl.class);
  addDao(""String_Node_Str"",HostTagsDaoImpl.class);
  addDao(""String_Node_Str"",NetworkDomainDaoImpl.class);
  addDao(""String_Node_Str"",KeystoreDaoImpl.class);
  addDao(""String_Node_Str"",DcDetailsDaoImpl.class);
  addDao(""String_Node_Str"",SwiftDaoImpl.class);
  addDao(""String_Node_Str"",HostTransferMapDaoImpl.class);
  addDao(""String_Node_Str"",ProjectDaoImpl.class);
  addDao(""String_Node_Str"",InlineLoadBalancerNicMapDaoImpl.class);
  addDao(""String_Node_Str"",ElasticLbVmMapDaoImpl.class);
  addDao(""String_Node_Str"",ProjectAccountDaoImpl.class);
  addDao(""String_Node_Str"",ProjectInvitationDaoImpl.class);
  info=addDao(""String_Node_Str"",HypervisorCapabilitiesDaoImpl.class);
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
  info.addParameter(""String_Node_Str"",""String_Node_Str"");
}"
89300,"@Override public boolean deleteSnapshotDirsForAccount(long accountId){
  List<VolumeVO> volumes=_volsDao.findByAccount(accountId);
  boolean success=true;
  for (  VolumeVO volume : volumes) {
    if (volume.getPoolId() == null) {
      continue;
    }
    Long volumeId=volume.getId();
    Long dcId=volume.getDataCenterId();
    if (_snapshotDao.listByVolumeIdIncludingRemoved(volumeId).isEmpty()) {
      continue;
    }
    List<HostVO> ssHosts=_hostDao.listSecondaryStorageHosts(dcId);
    SwiftTO swift=getSwiftTO(null);
    if (swift == null) {
      for (      HostVO ssHost : ssHosts) {
        DeleteSnapshotBackupCommand cmd=new DeleteSnapshotBackupCommand(null,ssHost.getStorageUrl(),dcId,accountId,volumeId,""String_Node_Str"",true);
        Answer answer=null;
        try {
          answer=_agentMgr.sendToSSVM(dcId,cmd);
        }
 catch (        Exception e) {
          s_logger.warn(""String_Node_Str"" + volumeId + ""String_Node_Str""+ ssHost.getStorageUrl());
        }
        if ((answer != null) && answer.getResult()) {
          s_logger.debug(""String_Node_Str"" + volumeId + ""String_Node_Str""+ accountId);
        }
 else {
          success=false;
          if (answer != null) {
            s_logger.error(answer.getDetails());
          }
        }
      }
    }
 else {
      DeleteSnapshotBackupCommand cmd=new DeleteSnapshotBackupCommand(swift,""String_Node_Str"",dcId,accountId,volumeId,""String_Node_Str"",true);
      Answer answer=null;
      try {
        answer=_agentMgr.sendToSSVM(dcId,cmd);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + volumeId + ""String_Node_Str"");
      }
      if ((answer != null) && answer.getResult()) {
        s_logger.debug(""String_Node_Str"" + volumeId + ""String_Node_Str""+ accountId);
      }
 else {
        success=false;
        if (answer != null) {
          s_logger.error(answer.getDetails());
        }
      }
    }
    List<SnapshotVO> snapshots=listSnapsforVolume(volumeId);
    for (    SnapshotVO snapshot : snapshots) {
      if (_snapshotDao.expunge(snapshot.getId())) {
        if (snapshot.getType() == Type.MANUAL) {
          _resourceLimitMgr.decrementResourceCount(accountId,ResourceType.snapshot);
        }
        UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_DELETE,snapshot.getAccountId(),volume.getDataCenterId(),snapshot.getId(),snapshot.getName(),null,null,volume.getSize());
        _usageEventDao.persist(usageEvent);
      }
    }
  }
  return success;
}","@Override public boolean deleteSnapshotDirsForAccount(long accountId){
  List<VolumeVO> volumes=_volsDao.findByAccount(accountId);
  boolean success=true;
  for (  VolumeVO volume : volumes) {
    if (volume.getPoolId() == null) {
      continue;
    }
    Long volumeId=volume.getId();
    Long dcId=volume.getDataCenterId();
    if (_snapshotDao.listByVolumeIdIncludingRemoved(volumeId).isEmpty()) {
      continue;
    }
    List<HostVO> ssHosts=_hostDao.listSecondaryStorageHosts(dcId);
    SwiftTO swift=_swiftDao.getSwiftTO(null);
    if (swift == null) {
      for (      HostVO ssHost : ssHosts) {
        DeleteSnapshotBackupCommand cmd=new DeleteSnapshotBackupCommand(null,ssHost.getStorageUrl(),dcId,accountId,volumeId,""String_Node_Str"",true);
        Answer answer=null;
        try {
          answer=_agentMgr.sendToSSVM(dcId,cmd);
        }
 catch (        Exception e) {
          s_logger.warn(""String_Node_Str"" + volumeId + ""String_Node_Str""+ ssHost.getStorageUrl());
        }
        if ((answer != null) && answer.getResult()) {
          s_logger.debug(""String_Node_Str"" + volumeId + ""String_Node_Str""+ accountId);
        }
 else {
          success=false;
          if (answer != null) {
            s_logger.error(answer.getDetails());
          }
        }
      }
    }
 else {
      DeleteSnapshotBackupCommand cmd=new DeleteSnapshotBackupCommand(swift,""String_Node_Str"",dcId,accountId,volumeId,""String_Node_Str"",true);
      Answer answer=null;
      try {
        answer=_agentMgr.sendToSSVM(dcId,cmd);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + volumeId + ""String_Node_Str"");
      }
      if ((answer != null) && answer.getResult()) {
        s_logger.debug(""String_Node_Str"" + volumeId + ""String_Node_Str""+ accountId);
      }
 else {
        success=false;
        if (answer != null) {
          s_logger.error(answer.getDetails());
        }
      }
    }
    List<SnapshotVO> snapshots=listSnapsforVolume(volumeId);
    for (    SnapshotVO snapshot : snapshots) {
      if (_snapshotDao.expunge(snapshot.getId())) {
        if (snapshot.getType() == Type.MANUAL) {
          _resourceLimitMgr.decrementResourceCount(accountId,ResourceType.snapshot);
        }
        UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_DELETE,snapshot.getAccountId(),volume.getDataCenterId(),snapshot.getId(),snapshot.getName(),null,null,volume.getSize());
        _usageEventDao.persist(usageEvent);
      }
    }
  }
  return success;
}"
89301,"@Override @DB public boolean destroySnapshotBackUp(long snapshotId){
  boolean success=false;
  String details;
  SnapshotVO snapshot=_snapshotDao.findByIdIncludingRemoved(snapshotId);
  if (snapshot == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
  }
  String secondaryStoragePoolUrl=getSecondaryStorageURL(snapshot);
  Long dcId=snapshot.getDataCenterId();
  Long accountId=snapshot.getAccountId();
  Long volumeId=snapshot.getVolumeId();
  HypervisorType hvType=snapshot.getHypervisorType();
  String backupOfSnapshot=snapshot.getBackupSnapshotId();
  if (backupOfSnapshot == null) {
    return true;
  }
  SwiftTO swift=getSwiftTO(null);
  DeleteSnapshotBackupCommand cmd=new DeleteSnapshotBackupCommand(swift,secondaryStoragePoolUrl,dcId,accountId,volumeId,backupOfSnapshot,false);
  Answer answer=_agentMgr.sendToSSVM(dcId,cmd);
  if ((answer != null) && answer.getResult()) {
    snapshot.setBackupSnapshotId(null);
    _snapshotDao.update(snapshotId,snapshot);
    success=true;
    details=""String_Node_Str"" + snapshotId + ""String_Node_Str""+ volumeId;
    s_logger.debug(details);
  }
 else   if (answer != null) {
    details=""String_Node_Str"" + snapshotId + ""String_Node_Str""+ volumeId+ ""String_Node_Str"";
    if (answer.getDetails() != null) {
      details+=answer.getDetails();
    }
    s_logger.error(details);
  }
  return success;
}","@Override @DB public boolean destroySnapshotBackUp(long snapshotId){
  boolean success=false;
  String details;
  SnapshotVO snapshot=_snapshotDao.findByIdIncludingRemoved(snapshotId);
  if (snapshot == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
  }
  String secondaryStoragePoolUrl=getSecondaryStorageURL(snapshot);
  Long dcId=snapshot.getDataCenterId();
  Long accountId=snapshot.getAccountId();
  Long volumeId=snapshot.getVolumeId();
  HypervisorType hvType=snapshot.getHypervisorType();
  String backupOfSnapshot=snapshot.getBackupSnapshotId();
  if (backupOfSnapshot == null) {
    return true;
  }
  SwiftTO swift=_swiftDao.getSwiftTO(null);
  DeleteSnapshotBackupCommand cmd=new DeleteSnapshotBackupCommand(swift,secondaryStoragePoolUrl,dcId,accountId,volumeId,backupOfSnapshot,false);
  Answer answer=_agentMgr.sendToSSVM(dcId,cmd);
  if ((answer != null) && answer.getResult()) {
    snapshot.setBackupSnapshotId(null);
    _snapshotDao.update(snapshotId,snapshot);
    success=true;
    details=""String_Node_Str"" + snapshotId + ""String_Node_Str""+ volumeId;
    s_logger.debug(details);
  }
 else   if (answer != null) {
    details=""String_Node_Str"" + snapshotId + ""String_Node_Str""+ volumeId+ ""String_Node_Str"";
    if (answer.getDetails() != null) {
      details+=answer.getDetails();
    }
    s_logger.error(details);
  }
  return success;
}"
89302,"String downloadTemplateFromSwiftToSecondaryStorage(long dcId,long templateId){
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null) {
    String errMsg=""String_Node_Str"" + templateId;
    s_logger.warn(errMsg);
    return errMsg;
  }
  VMTemplateSwiftVO tmpltSwift=_tmpltSwiftDao.findOneByTemplateId(templateId);
  if (tmpltSwift == null) {
    String errMsg=""String_Node_Str"" + templateId + ""String_Node_Str"";
    s_logger.warn(errMsg);
    return errMsg;
  }
  SwiftTO swift=_snapshotMgr.getSwiftTO(tmpltSwift.getSwiftId());
  if (swift == null) {
    String errMsg=""String_Node_Str"" + tmpltSwift.getSwiftId() + ""String_Node_Str"";
    s_logger.warn(errMsg);
    return errMsg;
  }
  HostVO secHost=_hostDao.findSecondaryStorageHost(dcId);
  if (secHost == null) {
    String errMsg=""String_Node_Str"" + dcId;
    s_logger.warn(errMsg);
    return errMsg;
  }
  downloadTemplateFromSwiftToSecondaryStorageCommand cmd=new downloadTemplateFromSwiftToSecondaryStorageCommand(swift,secHost.getName(),dcId,template.getAccountId(),templateId,_primaryStorageDownloadWait);
  try {
    _agentMgr.sendToSSVM(dcId,cmd);
  }
 catch (  Exception e) {
    String errMsg=""String_Node_Str"" + e.toString();
    s_logger.warn(errMsg);
    throw new CloudRuntimeException(errMsg);
  }
  return null;
}","String downloadTemplateFromSwiftToSecondaryStorage(long dcId,long templateId){
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null) {
    String errMsg=""String_Node_Str"" + templateId;
    s_logger.warn(errMsg);
    return errMsg;
  }
  VMTemplateSwiftVO tmpltSwift=_tmpltSwiftDao.findOneByTemplateId(templateId);
  if (tmpltSwift == null) {
    String errMsg=""String_Node_Str"" + templateId + ""String_Node_Str"";
    s_logger.warn(errMsg);
    return errMsg;
  }
  SwiftTO swift=_swiftDao.getSwiftTO(tmpltSwift.getSwiftId());
  if (swift == null) {
    String errMsg=""String_Node_Str"" + tmpltSwift.getSwiftId() + ""String_Node_Str"";
    s_logger.warn(errMsg);
    return errMsg;
  }
  HostVO secHost=_hostDao.findSecondaryStorageHost(dcId);
  if (secHost == null) {
    String errMsg=""String_Node_Str"" + dcId;
    s_logger.warn(errMsg);
    return errMsg;
  }
  downloadTemplateFromSwiftToSecondaryStorageCommand cmd=new downloadTemplateFromSwiftToSecondaryStorageCommand(swift,secHost.getName(),dcId,template.getAccountId(),templateId,_primaryStorageDownloadWait);
  try {
    _agentMgr.sendToSSVM(dcId,cmd);
  }
 catch (  Exception e) {
    String errMsg=""String_Node_Str"" + e.toString();
    s_logger.warn(errMsg);
    throw new CloudRuntimeException(errMsg);
  }
  return null;
}"
89303,"String uploadTemplateToSwiftFromSecondaryStorage(VMTemplateHostVO templateHostRef){
  Long templateId=templateHostRef.getTemplateId();
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null) {
    String errMsg=""String_Node_Str"" + templateId;
    s_logger.warn(errMsg);
    return errMsg;
  }
  SwiftTO swift=_snapshotMgr.getSwiftTO(null);
  if (swift == null) {
    String errMsg=""String_Node_Str"";
    s_logger.warn(errMsg);
    return errMsg;
  }
  HostVO secHost=_hostDao.findById(templateHostRef.getHostId());
  if (secHost == null) {
    String errMsg=""String_Node_Str"" + templateHostRef.getHostId();
    s_logger.warn(errMsg);
    return errMsg;
  }
  uploadTemplateToSwiftFromSecondaryStorageCommand cmd=new uploadTemplateToSwiftFromSecondaryStorageCommand(swift,secHost.getName(),secHost.getDataCenterId(),template.getAccountId(),templateId,_primaryStorageDownloadWait);
  Answer answer=null;
  try {
    answer=_agentMgr.sendToSSVM(secHost.getDataCenterId(),cmd);
    if (answer == null || !answer.getResult()) {
      String errMsg=""String_Node_Str"" + ((answer == null) ? ""String_Node_Str"" : answer.getDetails());
      s_logger.warn(errMsg);
      throw new CloudRuntimeException(errMsg);
    }
    VMTemplateSwiftVO tmpltSwift=new VMTemplateSwiftVO(swift.getId(),secHost.getId(),new Date(),templateHostRef.getSize(),templateHostRef.getPhysicalSize());
    _tmpltSwiftDao.persist(tmpltSwift);
  }
 catch (  Exception e) {
    String errMsg=""String_Node_Str"" + e.toString();
    s_logger.warn(errMsg);
    throw new CloudRuntimeException(errMsg);
  }
  return null;
}","String uploadTemplateToSwiftFromSecondaryStorage(VMTemplateHostVO templateHostRef){
  Long templateId=templateHostRef.getTemplateId();
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null) {
    String errMsg=""String_Node_Str"" + templateId;
    s_logger.warn(errMsg);
    return errMsg;
  }
  SwiftTO swift=_swiftDao.getSwiftTO(null);
  if (swift == null) {
    String errMsg=""String_Node_Str"";
    s_logger.warn(errMsg);
    return errMsg;
  }
  HostVO secHost=_hostDao.findById(templateHostRef.getHostId());
  if (secHost == null) {
    String errMsg=""String_Node_Str"" + templateHostRef.getHostId();
    s_logger.warn(errMsg);
    return errMsg;
  }
  uploadTemplateToSwiftFromSecondaryStorageCommand cmd=new uploadTemplateToSwiftFromSecondaryStorageCommand(swift,secHost.getName(),secHost.getDataCenterId(),template.getAccountId(),templateId,_primaryStorageDownloadWait);
  Answer answer=null;
  try {
    answer=_agentMgr.sendToSSVM(secHost.getDataCenterId(),cmd);
    if (answer == null || !answer.getResult()) {
      String errMsg=""String_Node_Str"" + ((answer == null) ? ""String_Node_Str"" : answer.getDetails());
      s_logger.warn(errMsg);
      throw new CloudRuntimeException(errMsg);
    }
    VMTemplateSwiftVO tmpltSwift=new VMTemplateSwiftVO(swift.getId(),secHost.getId(),new Date(),templateHostRef.getSize(),templateHostRef.getPhysicalSize());
    _tmpltSwiftDao.persist(tmpltSwift);
  }
 catch (  Exception e) {
    String errMsg=""String_Node_Str"" + e.toString();
    s_logger.warn(errMsg);
    throw new CloudRuntimeException(errMsg);
  }
  return null;
}"
89304,"void swiftTemplateSync(){
  GlobalLock swiftTemplateSyncLock=GlobalLock.getInternLock(""String_Node_Str"");
  try {
    if (swiftTemplateSyncLock.lock(3)) {
      try {
        List<VMTemplateHostVO> templtHostRefs=_tmpltHostDao.listByState(VMTemplateHostVO.Status.DOWNLOADED);
        List<VMTemplateSwiftVO> templtSwiftRefs=_tmpltSwiftDao.listAll();
        for (        VMTemplateHostVO templtHostRef : templtHostRefs) {
          boolean found=false;
          for (          VMTemplateSwiftVO templtSwiftRef : templtSwiftRefs) {
            if (templtHostRef.getTemplateId() == templtSwiftRef.getTemplateId()) {
              found=true;
              break;
            }
          }
          if (!found) {
            try {
              uploadTemplateToSwiftFromSecondaryStorage(templtHostRef);
            }
 catch (            Exception e) {
              s_logger.debug(""String_Node_Str"" + templtHostRef.getTemplateId() + ""String_Node_Str""+ e.toString());
            }
          }
        }
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"" + e.toString(),e);
      }
 finally {
        swiftTemplateSyncLock.unlock();
      }
    }
  }
  finally {
    swiftTemplateSyncLock.releaseRef();
  }
}","void swiftTemplateSync(){
  Boolean swiftEnable=Boolean.valueOf(_configDao.getValue(Config.SwiftEnable.key()));
  if (!swiftEnable) {
    return;
  }
  GlobalLock swiftTemplateSyncLock=GlobalLock.getInternLock(""String_Node_Str"");
  try {
    if (swiftTemplateSyncLock.lock(3)) {
      try {
        List<VMTemplateHostVO> templtHostRefs=_tmpltHostDao.listByState(VMTemplateHostVO.Status.DOWNLOADED);
        List<VMTemplateSwiftVO> templtSwiftRefs=_tmpltSwiftDao.listAll();
        for (        VMTemplateHostVO templtHostRef : templtHostRefs) {
          boolean found=false;
          for (          VMTemplateSwiftVO templtSwiftRef : templtSwiftRefs) {
            if (templtHostRef.getTemplateId() == templtSwiftRef.getTemplateId()) {
              found=true;
              break;
            }
          }
          if (!found) {
            try {
              uploadTemplateToSwiftFromSecondaryStorage(templtHostRef);
            }
 catch (            Exception e) {
              s_logger.debug(""String_Node_Str"" + templtHostRef.getTemplateId() + ""String_Node_Str""+ e.toString());
            }
          }
        }
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"" + e.toString(),e);
      }
 finally {
        swiftTemplateSyncLock.unlock();
      }
    }
  }
  finally {
    swiftTemplateSyncLock.releaseRef();
  }
}"
89305,"@Override public boolean start(){
  _swiftTemplateSyncExecutor.scheduleAtFixedRate(getSwiftTemplateSyncTask(),120,300,TimeUnit.SECONDS);
  return true;
}","@Override public boolean start(){
  _swiftTemplateSyncExecutor.scheduleAtFixedRate(getSwiftTemplateSyncTask(),60,60,TimeUnit.SECONDS);
  return true;
}"
89306,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  final Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  _routerTemplateId=NumbersUtil.parseInt(configs.get(""String_Node_Str""),1);
  String value=configDao.getValue(Config.PrimaryStorageDownloadWait.toString());
  _primaryStorageDownloadWait=NumbersUtil.parseInt(value,Integer.parseInt(Config.PrimaryStorageDownloadWait.getDefaultValue()));
  HostTemplateStatesSearch=_tmpltHostDao.createSearchBuilder();
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getTemplateId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> HostSearch=_hostDao.createSearchBuilder();
  HostSearch.and(""String_Node_Str"",HostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.join(""String_Node_Str"",HostSearch,HostSearch.entity().getId(),HostTemplateStatesSearch.entity().getHostId(),JoinBuilder.JoinType.INNER);
  HostSearch.done();
  HostTemplateStatesSearch.done();
  _storagePoolMaxWaitSeconds=NumbersUtil.parseInt(configDao.getValue(Config.StoragePoolMaxWaitSeconds.key()),3600);
  _preloadExecutor=Executors.newFixedThreadPool(8,new NamedThreadFactory(""String_Node_Str""));
  _swiftTemplateSyncExecutor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  return false;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  final Map<String,String> configs=_configDao.getConfiguration(""String_Node_Str"",params);
  _routerTemplateId=NumbersUtil.parseInt(configs.get(""String_Node_Str""),1);
  String value=_configDao.getValue(Config.PrimaryStorageDownloadWait.toString());
  _primaryStorageDownloadWait=NumbersUtil.parseInt(value,Integer.parseInt(Config.PrimaryStorageDownloadWait.getDefaultValue()));
  HostTemplateStatesSearch=_tmpltHostDao.createSearchBuilder();
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getTemplateId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> HostSearch=_hostDao.createSearchBuilder();
  HostSearch.and(""String_Node_Str"",HostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.join(""String_Node_Str"",HostSearch,HostSearch.entity().getId(),HostTemplateStatesSearch.entity().getHostId(),JoinBuilder.JoinType.INNER);
  HostSearch.done();
  HostTemplateStatesSearch.done();
  _storagePoolMaxWaitSeconds=NumbersUtil.parseInt(_configDao.getValue(Config.StoragePoolMaxWaitSeconds.key()),3600);
  _preloadExecutor=Executors.newFixedThreadPool(8,new NamedThreadFactory(""String_Node_Str""));
  _swiftTemplateSyncExecutor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  return false;
}"
89307,"@Override public List<CapacityResponse> createCapacityResponse(List<? extends Capacity> result,DecimalFormat format){
  List<CapacityResponse> capacityResponses=new ArrayList<CapacityResponse>();
  List<CapacityVO> summedCapacities=sumCapacities(result);
  for (  CapacityVO summedCapacity : summedCapacities) {
    CapacityResponse capacityResponse=new CapacityResponse();
    capacityResponse.setCapacityTotal(summedCapacity.getTotalCapacity());
    capacityResponse.setCapacityType(summedCapacity.getCapacityType());
    capacityResponse.setCapacityUsed(summedCapacity.getUsedCapacity());
    if (summedCapacity.getPodId() != null) {
      capacityResponse.setPodId(summedCapacity.getPodId());
      if (summedCapacity.getPodId() > 0) {
        HostPodVO pod=ApiDBUtils.findPodById(summedCapacity.getPodId());
        if (pod != null) {
          capacityResponse.setPodName(pod.getName());
        }
      }
 else {
        capacityResponse.setPodName(""String_Node_Str"");
      }
    }
    capacityResponse.setZoneId(summedCapacity.getDataCenterId());
    capacityResponse.setZoneName(ApiDBUtils.findZoneById(summedCapacity.getDataCenterId()).getName());
    if (summedCapacity.getTotalCapacity() != 0) {
      capacityResponse.setPercentUsed(format.format((float)summedCapacity.getUsedCapacity() / (float)summedCapacity.getTotalCapacity() * 100f));
    }
 else {
      capacityResponse.setPercentUsed(format.format(0L));
    }
    capacityResponse.setObjectName(""String_Node_Str"");
    capacityResponses.add(capacityResponse);
  }
  return capacityResponses;
}","@Override public List<CapacityResponse> createCapacityResponse(List<? extends Capacity> result,DecimalFormat format){
  List<CapacityResponse> capacityResponses=new ArrayList<CapacityResponse>();
  for (  Capacity summedCapacity : result) {
    CapacityResponse capacityResponse=new CapacityResponse();
    capacityResponse.setCapacityTotal(summedCapacity.getTotalCapacity());
    capacityResponse.setCapacityType(summedCapacity.getCapacityType());
    capacityResponse.setCapacityUsed(summedCapacity.getUsedCapacity());
    if (summedCapacity.getPodId() != null) {
      capacityResponse.setPodId(summedCapacity.getPodId());
      if (summedCapacity.getPodId() > 0) {
        HostPodVO pod=ApiDBUtils.findPodById(summedCapacity.getPodId());
        if (pod != null) {
          capacityResponse.setPodName(pod.getName());
        }
      }
 else {
        capacityResponse.setPodName(""String_Node_Str"");
      }
    }
    capacityResponse.setZoneId(summedCapacity.getDataCenterId());
    capacityResponse.setZoneName(ApiDBUtils.findZoneById(summedCapacity.getDataCenterId()).getName());
    if (summedCapacity.getTotalCapacity() != 0) {
      capacityResponse.setPercentUsed(format.format((float)summedCapacity.getUsedCapacity() / (float)summedCapacity.getTotalCapacity() * 100f));
    }
 else {
      capacityResponse.setPercentUsed(format.format(0L));
    }
    capacityResponse.setObjectName(""String_Node_Str"");
    capacityResponses.add(capacityResponse);
  }
  return capacityResponses;
}"
89308,"@Override public List<CapacityVO> listCapacities(ListCapacityCmd cmd){
  Filter searchFilter=new Filter(CapacityVO.class,""String_Node_Str"",true,null,null);
  SearchCriteria<CapacityVO> sc=_capacityDao.createSearchCriteria();
  List<CapacityVO> capacities=new LinkedList<CapacityVO>();
  Integer type=cmd.getType();
  Long zoneId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  Long hostId=cmd.getHostId();
  zoneId=_accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),zoneId);
  if (type != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,type);
  }
  if (zoneId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
  }
  if (podId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,podId);
  }
  if (hostId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,hostId);
  }
  capacities=_capacityDao.search(sc,searchFilter);
  if (type == null || type == Capacity.CAPACITY_TYPE_SECONDARY_STORAGE) {
    capacities.addAll(_storageMgr.getSecondaryStorageUsedStats(hostId,podId,zoneId));
  }
  if (type == null || type == Capacity.CAPACITY_TYPE_STORAGE) {
    capacities.addAll(_storageMgr.getStoragePoolUsedStats(hostId,podId,zoneId));
  }
  return capacities;
}","@Override public List<CapacityVO> listCapacities(ListCapacityCmd cmd){
  Integer capacityType=cmd.getType();
  Long zoneId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  Long clusterId=cmd.getClusterId();
  zoneId=_accountMgr.checkAccessAndSpecifyAuthority(UserContext.current().getCaller(),zoneId);
  List<SummedCapacity> summedCapacities=_capacityDao.findCapacityBy(capacityType,zoneId,podId,clusterId);
  List<CapacityVO> capacities=new ArrayList<CapacityVO>();
  for (  SummedCapacity summedCapacity : summedCapacities) {
    CapacityVO capacity=new CapacityVO(null,zoneId,podId,clusterId,summedCapacity.getUsedCapacity(),summedCapacity.getTotalCapacity(),summedCapacity.getCapacityType());
    capacities.add(capacity);
  }
  if (capacityType == null || capacityType == Capacity.CAPACITY_TYPE_SECONDARY_STORAGE) {
    capacities.addAll(_storageMgr.getSecondaryStorageUsedStats(null,podId,zoneId));
  }
  if (capacityType == null || capacityType == Capacity.CAPACITY_TYPE_STORAGE) {
    capacities.addAll(_storageMgr.getStoragePoolUsedStats(null,podId,zoneId));
  }
  return capacities;
}"
89309,"private List<NetworkVO> listAccountSpecificAndZoneLevelNetworks(SearchCriteria<NetworkVO> sc,Filter searchFilter,String path,List<Long> permittedAccounts){
  SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
  SearchCriteria<NetworkVO> accountSC=_networksDao.createSearchCriteria();
  if (!permittedAccounts.isEmpty()) {
    accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccounts);
  }
  accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  if (path != null) {
    Set<Long> allowedDomains=_domainMgr.getDomainChildrenIds(path);
    accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,allowedDomains.toArray());
  }
  ssc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,accountSC);
  SearchCriteria<NetworkVO> zoneSC=_networksDao.createSearchCriteria();
  zoneSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  zoneSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
  ssc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,zoneSC);
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  return _networksDao.search(sc,searchFilter);
}","private List<NetworkVO> listAccountSpecificAndZoneLevelNetworks(SearchCriteria<NetworkVO> sc,Filter searchFilter,String path,List<Long> permittedAccounts){
  SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
  SearchCriteria<NetworkVO> accountSC=_networksDao.createSearchCriteria();
  if (!permittedAccounts.isEmpty()) {
    accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccounts.toArray());
  }
  accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  if (path != null) {
    Set<Long> allowedDomains=_domainMgr.getDomainChildrenIds(path);
    accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,allowedDomains.toArray());
  }
  ssc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,accountSC);
  SearchCriteria<NetworkVO> zoneSC=_networksDao.createSearchCriteria();
  zoneSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  zoneSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
  ssc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,zoneSC);
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  return _networksDao.search(sc,searchFilter);
}"
89310,"public UserVmData newUserVmData(UserVm userVm){
  UserVmData userVmData=new UserVmData();
  userVmData.setId(userVm.getId());
  userVmData.setName(userVm.getInstanceName());
  userVmData.setCreated(userVm.getCreated());
  userVmData.setGuestOsId(userVm.getGuestOSId());
  userVmData.setHaEnable(userVm.isHaEnabled());
  if (userVm.getState() != null) {
    userVmData.setState(userVm.getState().toString());
  }
  if (userVm.getDisplayName() != null) {
    userVmData.setDisplayName(userVm.getDisplayName());
  }
 else {
    userVmData.setDisplayName(userVm.getHostName());
  }
  userVmData.setDomainId(userVm.getDomainId());
  if (userVm.getHypervisorType() != null) {
    userVmData.setHypervisor(userVm.getHypervisorType().toString());
  }
  if (userVm.getPassword() != null) {
    userVmData.setPassword(userVm.getPassword());
  }
  return userVmData;
}","public UserVmData newUserVmData(UserVm userVm){
  UserVmData userVmData=new UserVmData();
  userVmData.setId(userVm.getId());
  userVmData.setName(userVm.getHostName());
  userVmData.setCreated(userVm.getCreated());
  userVmData.setGuestOsId(userVm.getGuestOSId());
  userVmData.setHaEnable(userVm.isHaEnabled());
  if (userVm.getState() != null) {
    userVmData.setState(userVm.getState().toString());
  }
  if (userVm.getDisplayName() != null) {
    userVmData.setDisplayName(userVm.getDisplayName());
  }
 else {
    userVmData.setDisplayName(userVm.getHostName());
  }
  userVmData.setDomainId(userVm.getDomainId());
  if (userVm.getHypervisorType() != null) {
    userVmData.setHypervisor(userVm.getHypervisorType().toString());
  }
  if (userVm.getPassword() != null) {
    userVmData.setPassword(userVm.getPassword());
  }
  return userVmData;
}"
89311,"@Override public void processConnect(HostVO agent,StartupCommand cmd,boolean forRebalance) throws ConnectionException {
  if (!(cmd instanceof StartupRoutingCommand)) {
    return;
  }
  long agentId=agent.getId();
  StartupRoutingCommand startup=(StartupRoutingCommand)cmd;
  if (startup.getHypervisorType() != HypervisorType.XenServer) {
    s_logger.debug(""String_Node_Str"");
    return;
  }
  HostVO host=_hostDao.findById(agentId);
  ClusterVO cluster=_clusterDao.findById(host.getClusterId());
  if (cluster.getGuid() == null) {
    cluster.setGuid(startup.getPool());
    _clusterDao.update(cluster.getId(),cluster);
  }
 else   if (!cluster.getGuid().equals(startup.getPool())) {
    String msg=""String_Node_Str"" + cluster.getId() + ""String_Node_Str""+ cluster.getGuid()+ ""String_Node_Str""+ cmd.getPod();
    s_logger.warn(msg);
    throw new CloudRuntimeException(msg);
  }
  String resource=null;
  Map<String,String> details=startup.getHostDetails();
  String prodBrand=details.get(""String_Node_Str"").trim();
  String prodVersion=details.get(""String_Node_Str"").trim();
  if (prodBrand.equals(""String_Node_Str"") && prodVersion.equals(""String_Node_Str"")) {
    resource=XcpServerResource.class.getName();
  }
 else   if (prodBrand.equals(""String_Node_Str"") && prodVersion.equals(""String_Node_Str"")) {
    resource=XenServer56Resource.class.getName();
  }
 else   if (prodBrand.equals(""String_Node_Str"") && prodVersion.equals(""String_Node_Str"")) {
    resource=XenServer60Resource.class.getName();
  }
 else   if (prodBrand.equals(""String_Node_Str"") && prodVersion.equals(""String_Node_Str"")) {
    String prodVersionTextShort=details.get(""String_Node_Str"").trim();
    if (""String_Node_Str"".equals(prodVersionTextShort)) {
      resource=XenServer56SP2Resource.class.getName();
    }
 else     if (""String_Node_Str"".equals(prodVersionTextShort)) {
      resource=XenServer56FP1Resource.class.getName();
    }
  }
  if (resource == null) {
    String msg=""String_Node_Str"" + prodBrand + ""String_Node_Str""+ prodVersion;
    s_logger.debug(msg);
    throw new RuntimeException(msg);
  }
  if (!resource.equals(host.getResource())) {
    host.setResource(resource);
    host.setSetup(false);
    _hostDao.update(agentId,host);
    String msg=""String_Node_Str"" + host.getPrivateIpAddress() + ""String_Node_Str""+ host.getResource()+ ""String_Node_Str""+ resource;
    s_logger.debug(msg);
    throw new HypervisorVersionChangedException(msg);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + agentId);
  }
  HostEnvironment env=new HostEnvironment();
  SetupCommand setup=new SetupCommand(env);
  if (_setupMultipath) {
    setup.setMultipathOn();
  }
  if (!host.isSetup()) {
    setup.setNeedSetup(true);
  }
  try {
    SetupAnswer answer=(SetupAnswer)_agentMgr.send(agentId,setup);
    if (answer != null && answer.getResult()) {
      host.setSetup(true);
      host.setLastPinged((System.currentTimeMillis() >> 10) - 5 * 60);
      _hostDao.update(host.getId(),host);
      if (answer.needReconnect()) {
        throw new ConnectionException(false,""String_Node_Str"");
      }
      return;
    }
 else {
      s_logger.warn(""String_Node_Str"" + agentId + ""String_Node_Str""+ ((answer != null) ? answer.getDetails() : ""String_Node_Str""));
    }
  }
 catch (  AgentUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + agentId + ""String_Node_Str"",e);
  }
catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + agentId + ""String_Node_Str"",e);
  }
  throw new ConnectionException(true,""String_Node_Str"");
}","@Override public void processConnect(HostVO agent,StartupCommand cmd,boolean forRebalance) throws ConnectionException {
  if (!(cmd instanceof StartupRoutingCommand)) {
    return;
  }
  long agentId=agent.getId();
  StartupRoutingCommand startup=(StartupRoutingCommand)cmd;
  if (startup.getHypervisorType() != HypervisorType.XenServer) {
    s_logger.debug(""String_Node_Str"");
    return;
  }
  HostVO host=_hostDao.findById(agentId);
  ClusterVO cluster=_clusterDao.findById(host.getClusterId());
  if (cluster.getGuid() == null) {
    cluster.setGuid(startup.getPool());
    _clusterDao.update(cluster.getId(),cluster);
  }
 else   if (!cluster.getGuid().equals(startup.getPool())) {
    String msg=""String_Node_Str"" + cluster.getId() + ""String_Node_Str""+ cluster.getGuid()+ ""String_Node_Str""+ cmd.getPod();
    s_logger.warn(msg);
    throw new CloudRuntimeException(msg);
  }
  String resource=null;
  Map<String,String> details=startup.getHostDetails();
  String prodBrand=details.get(""String_Node_Str"").trim();
  String prodVersion=details.get(""String_Node_Str"").trim();
  if (prodBrand.equals(""String_Node_Str"") && (prodVersion.equals(""String_Node_Str"") || prodVersion.equals(""String_Node_Str""))) {
    resource=XcpServerResource.class.getName();
  }
 else   if (prodBrand.equals(""String_Node_Str"") && prodVersion.equals(""String_Node_Str"")) {
    resource=XenServer56Resource.class.getName();
  }
 else   if (prodBrand.equals(""String_Node_Str"") && prodVersion.equals(""String_Node_Str"")) {
    resource=XenServer60Resource.class.getName();
  }
 else   if (prodBrand.equals(""String_Node_Str"") && prodVersion.equals(""String_Node_Str"")) {
    String prodVersionTextShort=details.get(""String_Node_Str"").trim();
    if (""String_Node_Str"".equals(prodVersionTextShort)) {
      resource=XenServer56SP2Resource.class.getName();
    }
 else     if (""String_Node_Str"".equals(prodVersionTextShort)) {
      resource=XenServer56FP1Resource.class.getName();
    }
  }
  if (resource == null) {
    String msg=""String_Node_Str"" + prodBrand + ""String_Node_Str""+ prodVersion;
    s_logger.debug(msg);
    throw new RuntimeException(msg);
  }
  if (!resource.equals(host.getResource())) {
    host.setResource(resource);
    host.setSetup(false);
    _hostDao.update(agentId,host);
    String msg=""String_Node_Str"" + host.getPrivateIpAddress() + ""String_Node_Str""+ host.getResource()+ ""String_Node_Str""+ resource;
    s_logger.debug(msg);
    throw new HypervisorVersionChangedException(msg);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + agentId);
  }
  HostEnvironment env=new HostEnvironment();
  SetupCommand setup=new SetupCommand(env);
  if (_setupMultipath) {
    setup.setMultipathOn();
  }
  if (!host.isSetup()) {
    setup.setNeedSetup(true);
  }
  try {
    SetupAnswer answer=(SetupAnswer)_agentMgr.send(agentId,setup);
    if (answer != null && answer.getResult()) {
      host.setSetup(true);
      host.setLastPinged((System.currentTimeMillis() >> 10) - 5 * 60);
      _hostDao.update(host.getId(),host);
      if (answer.needReconnect()) {
        throw new ConnectionException(false,""String_Node_Str"");
      }
      return;
    }
 else {
      s_logger.warn(""String_Node_Str"" + agentId + ""String_Node_Str""+ ((answer != null) ? answer.getDetails() : ""String_Node_Str""));
    }
  }
 catch (  AgentUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + agentId + ""String_Node_Str"",e);
  }
catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + agentId + ""String_Node_Str"",e);
  }
  throw new ConnectionException(true,""String_Node_Str"");
}"
89312,"@Override public void performDataMigration(Connection conn){
}","@Override public void performDataMigration(Connection conn){
  fixForeignKeys(conn);
}"
89313,"private List<NetworkVO> listAccountSpecificAndZoneLevelNetworks(SearchCriteria<NetworkVO> sc,Filter searchFilter,String path,List<Long> permittedAccounts){
  SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
  SearchCriteria<NetworkVO> accountSC=_networksDao.createSearchCriteria();
  if (!permittedAccounts.isEmpty()) {
    accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccounts);
  }
  accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  if (path != null) {
    Set<Long> allowedDomains=_domainMgr.getDomainChildrenIds(path);
    accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,allowedDomains.toArray());
  }
  ssc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,accountSC);
  SearchCriteria<NetworkVO> zoneSC=_networksDao.createSearchCriteria();
  zoneSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  zoneSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
  ssc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,zoneSC);
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  return _networksDao.search(sc,searchFilter);
}","private List<NetworkVO> listAccountSpecificAndZoneLevelNetworks(SearchCriteria<NetworkVO> sc,Filter searchFilter,String path,List<Long> permittedAccounts){
  SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
  SearchCriteria<NetworkVO> accountSC=_networksDao.createSearchCriteria();
  if (!permittedAccounts.isEmpty()) {
    accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,permittedAccounts.toArray());
  }
  accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  if (path != null) {
    Set<Long> allowedDomains=_domainMgr.getDomainChildrenIds(path);
    accountSC.addAnd(""String_Node_Str"",SearchCriteria.Op.IN,allowedDomains.toArray());
  }
  ssc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,accountSC);
  SearchCriteria<NetworkVO> zoneSC=_networksDao.createSearchCriteria();
  zoneSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  zoneSC.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
  ssc.addOr(""String_Node_Str"",SearchCriteria.Op.SC,zoneSC);
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  return _networksDao.search(sc,searchFilter);
}"
89314,"@DB public LoadBalancer createLoadBalancer(CreateLoadBalancerRuleCmd lb,boolean openFirewall) throws NetworkRuleConflictException {
  long ipId=lb.getSourceIpAddressId();
  UserContext caller=UserContext.current();
  int srcPortStart=lb.getSourcePortStart();
  int defPortStart=lb.getDefaultPortStart();
  int srcPortEnd=lb.getSourcePortEnd();
  IPAddressVO ipAddr=_ipAddressDao.findById(lb.getSourceIpAddressId());
  Long networkId=ipAddr.getSourceNetworkId();
  if (ipAddr == null || !ipAddr.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  _firewallMgr.validateFirewallRule(caller.getCaller(),ipAddr,srcPortStart,srcPortEnd,lb.getProtocol(),Purpose.LoadBalancing);
  networkId=ipAddr.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  NetworkVO network=_networkDao.findById(networkId);
  _accountMgr.checkAccess(caller.getCaller(),null,ipAddr);
  if (!_networkMgr.isServiceSupported(network.getNetworkOfferingId(),Service.Lb)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  LoadBalancerVO newRule=new LoadBalancerVO(lb.getXid(),lb.getName(),lb.getDescription(),lb.getSourceIpAddressId(),lb.getSourcePortEnd(),lb.getDefaultPortStart(),lb.getAlgorithm(),network.getId(),ipAddr.getAccountId(),ipAddr.getDomainId());
  newRule=_lbDao.persist(newRule);
  if (openFirewall) {
    _firewallMgr.createRuleForAllCidrs(ipId,caller.getCaller(),lb.getSourcePortStart(),lb.getSourcePortEnd(),lb.getProtocol(),null,null,newRule.getId());
  }
  boolean success=true;
  try {
    _firewallMgr.detectRulesConflict(newRule,ipAddr);
    if (!_firewallDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    s_logger.debug(""String_Node_Str"" + newRule.getId() + ""String_Node_Str""+ ipId+ ""String_Node_Str""+ srcPortStart+ ""String_Node_Str""+ defPortStart+ ""String_Node_Str"");
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_CREATE,ipAddr.getAllocatedToAccountId(),ipAddr.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    txn.commit();
    return newRule;
  }
 catch (  Exception e) {
    success=false;
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
 finally {
    if (!success) {
      txn.start();
      _firewallMgr.revokeRelatedFirewallRule(newRule.getId(),false);
      _lbDao.remove(newRule.getId());
      txn.commit();
    }
  }
}","@DB public LoadBalancer createLoadBalancer(CreateLoadBalancerRuleCmd lb,boolean openFirewall) throws NetworkRuleConflictException {
  long ipId=lb.getSourceIpAddressId();
  UserContext caller=UserContext.current();
  int srcPortStart=lb.getSourcePortStart();
  int defPortStart=lb.getDefaultPortStart();
  int srcPortEnd=lb.getSourcePortEnd();
  IPAddressVO ipAddr=_ipAddressDao.findById(lb.getSourceIpAddressId());
  Long networkId=ipAddr.getSourceNetworkId();
  if (ipAddr == null || !ipAddr.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  _firewallMgr.validateFirewallRule(caller.getCaller(),ipAddr,srcPortStart,srcPortEnd,lb.getProtocol(),Purpose.LoadBalancing);
  networkId=ipAddr.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  NetworkVO network=_networkDao.findById(networkId);
  _accountMgr.checkAccess(caller.getCaller(),null,ipAddr);
  if (!_networkMgr.isServiceSupported(network.getNetworkOfferingId(),Service.Lb)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  LoadBalancerVO newRule=new LoadBalancerVO(lb.getXid(),lb.getName(),lb.getDescription(),lb.getSourceIpAddressId(),lb.getSourcePortEnd(),lb.getDefaultPortStart(),lb.getAlgorithm(),network.getId(),ipAddr.getAccountId(),ipAddr.getDomainId());
  newRule=_lbDao.persist(newRule);
  if (openFirewall) {
    _firewallMgr.createRuleForAllCidrs(ipId,caller.getCaller(),lb.getSourcePortStart(),lb.getSourcePortEnd(),lb.getProtocol(),null,null,newRule.getId());
  }
  boolean success=true;
  try {
    _firewallMgr.detectRulesConflict(newRule,ipAddr);
    if (!_firewallDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    s_logger.debug(""String_Node_Str"" + newRule.getId() + ""String_Node_Str""+ ipId+ ""String_Node_Str""+ srcPortStart+ ""String_Node_Str""+ defPortStart+ ""String_Node_Str"");
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_CREATE,ipAddr.getAllocatedToAccountId(),ipAddr.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    txn.commit();
    return newRule;
  }
 catch (  Exception e) {
    success=false;
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
 finally {
    if (!success && newRule != null) {
      txn.start();
      _firewallMgr.revokeRelatedFirewallRule(newRule.getId(),false);
      _lbDao.remove(newRule.getId());
      txn.commit();
    }
  }
}"
89315,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NET_RULE_ADD,eventDescription=""String_Node_Str"",create=true) public StaticNatRule createStaticNatRule(StaticNatRule rule,boolean openFirewall) throws NetworkRuleConflictException {
  Account caller=UserContext.current().getCaller();
  Long ipAddrId=rule.getSourceIpAddressId();
  IPAddressVO ipAddress=_ipAddressDao.findById(ipAddrId);
  if (ipAddress == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddrId + ""String_Node_Str"");
  }
 else   if (ipAddress.isSourceNat() || !ipAddress.isOneToOneNat() || ipAddress.getAssociatedWithVmId() == null) {
    throw new NetworkRuleConflictException(""String_Node_Str"" + ipAddress.getAddress());
  }
  _firewallMgr.validateFirewallRule(caller,ipAddress,rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol(),Purpose.StaticNat);
  Long networkId=ipAddress.getAssociatedWithNetworkId();
  Long accountId=ipAddress.getAccountId();
  Long domainId=ipAddress.getDomainId();
  String dstIp=_networkMgr.getIpInNetwork(ipAddress.getAssociatedWithVmId(),networkId);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  FirewallRuleVO newRule=new FirewallRuleVO(rule.getXid(),rule.getSourceIpAddressId(),rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol().toLowerCase(),networkId,accountId,domainId,rule.getPurpose(),null,null,null,null);
  newRule=_firewallDao.persist(newRule);
  if (openFirewall) {
    _firewallMgr.createRuleForAllCidrs(ipAddrId,caller,rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol(),null,null,newRule.getId());
  }
  try {
    _firewallMgr.detectRulesConflict(newRule,ipAddress);
    if (!_firewallDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_NET_RULE_ADD,newRule.getAccountId(),0,newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    txn.commit();
    StaticNatRule staticNatRule=new StaticNatRuleImpl(newRule,dstIp);
    return staticNatRule;
  }
 catch (  Exception e) {
    txn.start();
    _firewallMgr.revokeRelatedFirewallRule(newRule.getId(),false);
    _forwardingDao.remove(newRule.getId());
    txn.commit();
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NET_RULE_ADD,eventDescription=""String_Node_Str"",create=true) public StaticNatRule createStaticNatRule(StaticNatRule rule,boolean openFirewall) throws NetworkRuleConflictException {
  Account caller=UserContext.current().getCaller();
  Long ipAddrId=rule.getSourceIpAddressId();
  IPAddressVO ipAddress=_ipAddressDao.findById(ipAddrId);
  if (ipAddress == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddrId + ""String_Node_Str"");
  }
 else   if (ipAddress.isSourceNat() || !ipAddress.isOneToOneNat() || ipAddress.getAssociatedWithVmId() == null) {
    throw new NetworkRuleConflictException(""String_Node_Str"" + ipAddress.getAddress());
  }
  _firewallMgr.validateFirewallRule(caller,ipAddress,rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol(),Purpose.StaticNat);
  Long networkId=ipAddress.getAssociatedWithNetworkId();
  Long accountId=ipAddress.getAccountId();
  Long domainId=ipAddress.getDomainId();
  String dstIp=_networkMgr.getIpInNetwork(ipAddress.getAssociatedWithVmId(),networkId);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  FirewallRuleVO newRule=new FirewallRuleVO(rule.getXid(),rule.getSourceIpAddressId(),rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol().toLowerCase(),networkId,accountId,domainId,rule.getPurpose(),null,null,null,null);
  newRule=_firewallDao.persist(newRule);
  if (openFirewall) {
    _firewallMgr.createRuleForAllCidrs(ipAddrId,caller,rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol(),null,null,newRule.getId());
  }
  try {
    _firewallMgr.detectRulesConflict(newRule,ipAddress);
    if (!_firewallDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_NET_RULE_ADD,newRule.getAccountId(),0,newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    txn.commit();
    StaticNatRule staticNatRule=new StaticNatRuleImpl(newRule,dstIp);
    return staticNatRule;
  }
 catch (  Exception e) {
    if (newRule != null) {
      txn.start();
      _firewallMgr.revokeRelatedFirewallRule(newRule.getId(),false);
      _forwardingDao.remove(newRule.getId());
      txn.commit();
    }
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
}"
89316,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NET_RULE_ADD,eventDescription=""String_Node_Str"",create=true) public PortForwardingRule createPortForwardingRule(PortForwardingRule rule,Long vmId,boolean openFirewall) throws NetworkRuleConflictException {
  UserContext ctx=UserContext.current();
  Account caller=ctx.getCaller();
  Long ipAddrId=rule.getSourceIpAddressId();
  IPAddressVO ipAddress=_ipAddressDao.findById(ipAddrId);
  if (ipAddress == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddrId + ""String_Node_Str"");
  }
 else   if (ipAddress.isOneToOneNat()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddrId + ""String_Node_Str"");
  }
  _firewallMgr.validateFirewallRule(caller,ipAddress,rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol(),Purpose.PortForwarding);
  Long networkId=ipAddress.getAssociatedWithNetworkId();
  Long accountId=ipAddress.getAccountId();
  Long domainId=ipAddress.getDomainId();
  if (rule.getDestinationPortStart() > rule.getDestinationPortEnd()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((rule.getDestinationPortEnd() - rule.getDestinationPortStart()) != (rule.getSourcePortEnd() - rule.getSourcePortStart())) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  UserVm vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
  }
 else {
    checkRuleAndUserVm(rule,vm,caller);
  }
  Ip dstIp=rule.getDestinationIpAddress();
  Nic guestNic=_networkMgr.getNicInNetwork(vmId,networkId);
  if (guestNic == null || guestNic.getIp4Address() == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else {
    dstIp=new Ip(guestNic.getIp4Address());
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  PortForwardingRuleVO newRule=new PortForwardingRuleVO(rule.getXid(),rule.getSourceIpAddressId(),rule.getSourcePortStart(),rule.getSourcePortEnd(),dstIp,rule.getDestinationPortStart(),rule.getDestinationPortEnd(),rule.getProtocol().toLowerCase(),networkId,accountId,domainId,vmId);
  newRule=_forwardingDao.persist(newRule);
  if (openFirewall) {
    _firewallMgr.createRuleForAllCidrs(ipAddrId,caller,rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol(),null,null,newRule.getId());
  }
  try {
    _firewallMgr.detectRulesConflict(newRule,ipAddress);
    if (!_firewallDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_NET_RULE_ADD,newRule.getAccountId(),ipAddress.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    txn.commit();
    return newRule;
  }
 catch (  Exception e) {
    txn.start();
    _firewallMgr.revokeRelatedFirewallRule(newRule.getId(),false);
    _forwardingDao.remove(newRule.getId());
    txn.commit();
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + ipAddrId,e);
  }
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_NET_RULE_ADD,eventDescription=""String_Node_Str"",create=true) public PortForwardingRule createPortForwardingRule(PortForwardingRule rule,Long vmId,boolean openFirewall) throws NetworkRuleConflictException {
  UserContext ctx=UserContext.current();
  Account caller=ctx.getCaller();
  Long ipAddrId=rule.getSourceIpAddressId();
  IPAddressVO ipAddress=_ipAddressDao.findById(ipAddrId);
  if (ipAddress == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddrId + ""String_Node_Str"");
  }
 else   if (ipAddress.isOneToOneNat()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddrId + ""String_Node_Str"");
  }
  _firewallMgr.validateFirewallRule(caller,ipAddress,rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol(),Purpose.PortForwarding);
  Long networkId=ipAddress.getAssociatedWithNetworkId();
  Long accountId=ipAddress.getAccountId();
  Long domainId=ipAddress.getDomainId();
  if (rule.getDestinationPortStart() > rule.getDestinationPortEnd()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((rule.getDestinationPortEnd() - rule.getDestinationPortStart()) != (rule.getSourcePortEnd() - rule.getSourcePortStart())) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  UserVm vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddress + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
  }
 else {
    checkRuleAndUserVm(rule,vm,caller);
  }
  Ip dstIp=rule.getDestinationIpAddress();
  Nic guestNic=_networkMgr.getNicInNetwork(vmId,networkId);
  if (guestNic == null || guestNic.getIp4Address() == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else {
    dstIp=new Ip(guestNic.getIp4Address());
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  PortForwardingRuleVO newRule=new PortForwardingRuleVO(rule.getXid(),rule.getSourceIpAddressId(),rule.getSourcePortStart(),rule.getSourcePortEnd(),dstIp,rule.getDestinationPortStart(),rule.getDestinationPortEnd(),rule.getProtocol().toLowerCase(),networkId,accountId,domainId,vmId);
  newRule=_forwardingDao.persist(newRule);
  if (openFirewall) {
    _firewallMgr.createRuleForAllCidrs(ipAddrId,caller,rule.getSourcePortStart(),rule.getSourcePortEnd(),rule.getProtocol(),null,null,newRule.getId());
  }
  try {
    _firewallMgr.detectRulesConflict(newRule,ipAddress);
    if (!_firewallDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_NET_RULE_ADD,newRule.getAccountId(),ipAddress.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    txn.commit();
    return newRule;
  }
 catch (  Exception e) {
    if (newRule != null) {
      txn.start();
      _firewallMgr.revokeRelatedFirewallRule(newRule.getId(),false);
      _forwardingDao.remove(newRule.getId());
      txn.commit();
    }
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + ipAddrId,e);
  }
}"
89317,"@Override public NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  DataCenter dc=_dcDao.findById(network.getDataCenterId());
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  if (nic != null && nic.getRequestedIp() != null) {
    throw new CloudRuntimeException(""String_Node_Str"" + nic);
  }
  if (nic == null) {
    nic=new NicProfile(ReservationStrategy.Create,null,null,null,null);
  }
  getIp(nic,dc,vm,network);
  if (nic.getIp4Address() == null) {
    nic.setStrategy(ReservationStrategy.Start);
  }
 else {
    nic.setStrategy(ReservationStrategy.Managed);
  }
  return nic;
}","@Override public NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  DataCenter dc=_dcDao.findById(network.getDataCenterId());
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  if (nic != null && nic.getRequestedIp() != null) {
    throw new CloudRuntimeException(""String_Node_Str"" + nic);
  }
  if (nic == null) {
    nic=new NicProfile(ReservationStrategy.Create,null,null,null,null);
  }
  getIp(nic,dc,vm,network);
  if (nic.getIp4Address() == null) {
    nic.setStrategy(ReservationStrategy.Start);
  }
 else   if (vm.getVirtualMachine().getType() == VirtualMachine.Type.DomainRouter) {
    nic.setStrategy(ReservationStrategy.Managed);
  }
 else {
    nic.setStrategy(ReservationStrategy.Create);
  }
  return nic;
}"
89318,"@Override public void execute(){
  List<? extends ResourceLimit> result=_accountService.searchForLimits(this);
  ListResponse<ResourceLimitResponse> response=new ListResponse<ResourceLimitResponse>();
  List<ResourceLimitResponse> limitResponses=new ArrayList<ResourceLimitResponse>();
  for (  ResourceLimit limit : result) {
    ResourceLimitResponse resourceLimitResponse=_responseGenerator.createResourceLimitResponse(limit);
    resourceLimitResponse.setObjectName(""String_Node_Str"");
    limitResponses.add(resourceLimitResponse);
  }
  response.setResponses(limitResponses);
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}","@Override public void execute(){
  List<? extends ResourceLimit> result=_accountService.searchForLimits(id,accountName,domainId,resourceType,this.getStartIndex(),this.getPageSizeVal());
  ListResponse<ResourceLimitResponse> response=new ListResponse<ResourceLimitResponse>();
  List<ResourceLimitResponse> limitResponses=new ArrayList<ResourceLimitResponse>();
  for (  ResourceLimit limit : result) {
    ResourceLimitResponse resourceLimitResponse=_responseGenerator.createResourceLimitResponse(limit);
    resourceLimitResponse.setObjectName(""String_Node_Str"");
    limitResponses.add(resourceLimitResponse);
  }
  response.setResponses(limitResponses);
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}"
89319,"@Override public void execute(){
  ResourceLimit result=_accountService.updateResourceLimit(this);
  if (result != null || (result == null && max != null && max.longValue() == -1L)) {
    ResourceLimitResponse response=_responseGenerator.createResourceLimitResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute(){
  ResourceLimit result=_accountService.updateResourceLimit(accountName,domainId,resourceType,max);
  if (result != null || (result == null && max != null && max.longValue() == -1L)) {
    ResourceLimitResponse response=_responseGenerator.createResourceLimitResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}"
89320,"/** 
 * Search for resource limits for the given id and/or account and/or type and/or domain.
 * @param cmd the command wrapping the id, type, account, and domain
 * @return a list of limits that match the criteria
 */
List<? extends ResourceLimit> searchForLimits(ListResourceLimitsCmd cmd);","/** 
 * Search for resource limits for the given id and/or account and/or type and/or domain.
 * @param id TODO
 * @param accountName TODO
 * @param domainId TODO
 * @param type TODO
 * @param startIndex TODO
 * @param pageSizeVal TODO
 * @return a list of limits that match the criteria
 */
List<? extends ResourceLimit> searchForLimits(Long id,String accountName,Long domainId,Integer type,Long startIndex,Long pageSizeVal);"
89321,"/** 
 * Updates an existing resource limit with the specified details. If a limit doesn't exist, will create one.
 * @param cmd the command that wraps the domainId, accountId, type, and max parameters
 * @return the updated/created resource limit
 */
ResourceLimit updateResourceLimit(UpdateResourceLimitCmd cmd);","/** 
 * Updates an existing resource limit with the specified details. If a limit doesn't exist, will create one.
 * @param accountName TODO
 * @param domainId TODO
 * @param typeId TODO
 * @param max TODO
 * @return the updated/created resource limit
 */
ResourceLimit updateResourceLimit(String accountName,Long domainId,int typeId,Long max);"
89322,"@Override public List<VirtualRouter> addVirtualMachineIntoNetwork(Network network,NicProfile nic,VirtualMachineProfile<UserVm> profile,DeployDestination dest,ReservationContext context,List<DomainRouterVO> routers) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  List<VirtualRouter> rets=new ArrayList<VirtualRouter>(routers.size());
  boolean sendPasswordAndVmData=true;
  boolean sendDnsDhcpData=true;
  _userVmDao.loadDetails((UserVmVO)profile.getVirtualMachine());
  DataCenter dc=dest.getDataCenter();
  String serviceOffering=_serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();
  String zoneName=_dcDao.findById(network.getDataCenterId()).getName();
  boolean isZoneBasic=(dc.getNetworkType() == NetworkType.Basic);
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  for (  DomainRouterVO router : routers) {
    if (router.getState() != State.Running) {
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    Long podId=null;
    if (isZoneBasic) {
      podId=dest.getPod().getId();
      if (router.getPodIdToDeployIn().longValue() != podId.longValue()) {
        sendPasswordAndVmData=false;
        if (_dnsBasicZoneUpdates.equalsIgnoreCase(""String_Node_Str"")) {
          sendDnsDhcpData=false;
        }
      }
    }
    Commands cmds=new Commands(OnError.Stop);
    String routerControlIpAddress=null;
    List<NicVO> nics=_nicDao.listByVmId(router.getId());
    for (    NicVO n : nics) {
      NetworkVO nc=_networkDao.findById(n.getNetworkId());
      if (nc.getTrafficType() == TrafficType.Control) {
        routerControlIpAddress=n.getIp4Address();
      }
    }
    if (sendDnsDhcpData) {
      DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),profile.getVirtualMachine().getHostName());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP,routerControlIpAddress);
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
      cmds.addCommand(""String_Node_Str"",dhcpCommand);
    }
    if (sendPasswordAndVmData) {
      String password=(String)profile.getParameter(VirtualMachineProfile.Param.VmPassword);
      String userData=profile.getVirtualMachine().getUserData();
      String sshPublicKey=profile.getVirtualMachine().getDetail(""String_Node_Str"");
      if (password != null && network.isDefault()) {
        final String encodedPassword=PasswordGenerator.rot13(password);
        SavePasswordCommand cmd=new SavePasswordCommand(encodedPassword,nic.getIp4Address(),profile.getVirtualMachine().getHostName());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
        cmds.addCommand(""String_Node_Str"",cmd);
      }
      cmds.addCommand(""String_Node_Str"",generateVmDataCommand(router,nic.getIp4Address(),userData,serviceOffering,zoneName,nic.getIp4Address(),profile.getVirtualMachine().getHostName(),profile.getVirtualMachine().getInstanceName(),profile.getId(),sshPublicKey));
    }
    if (cmds.size() > 0) {
      boolean podLevelException=false;
      if (isZoneBasic && podId != null && profile.getVirtualMachine().getType() == VirtualMachine.Type.User && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == GuestIpType.Direct) {
        podLevelException=true;
      }
      try {
        _agentMgr.send(router.getHostId(),cmds);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
catch (      OperationTimedoutException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
      connectedRouters.add(router);
      Answer answer=cmds.getAnswer(""String_Node_Str"");
      if (!answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ router.getHostName()+ ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
      answer=cmds.getAnswer(""String_Node_Str"");
      if (answer != null && !answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
      answer=cmds.getAnswer(""String_Node_Str"");
      if (answer != null && !answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
    }
    rets.add(router);
  }
  String msg=""String_Node_Str"";
  if (!connectedRouters.isEmpty()) {
    stopDisconnectedRouters(disconnectedRouters,true,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,VirtualRouter.class,disconnectedRouters.get(0).getId());
  }
  return rets;
}","@Override public List<VirtualRouter> addVirtualMachineIntoNetwork(Network network,NicProfile nic,VirtualMachineProfile<UserVm> profile,DeployDestination dest,ReservationContext context,List<DomainRouterVO> routers) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  List<VirtualRouter> rets=new ArrayList<VirtualRouter>(routers.size());
  _userVmDao.loadDetails((UserVmVO)profile.getVirtualMachine());
  DataCenter dc=dest.getDataCenter();
  String serviceOffering=_serviceOfferingDao.findByIdIncludingRemoved(profile.getServiceOfferingId()).getDisplayText();
  String zoneName=_dcDao.findById(network.getDataCenterId()).getName();
  boolean isZoneBasic=(dc.getNetworkType() == NetworkType.Basic);
  List<VirtualRouter> connectedRouters=new ArrayList<VirtualRouter>();
  List<VirtualRouter> disconnectedRouters=new ArrayList<VirtualRouter>();
  for (  DomainRouterVO router : routers) {
    boolean sendPasswordAndVmData=true;
    boolean sendDnsDhcpData=true;
    if (router.getState() != State.Running) {
      s_logger.warn(""String_Node_Str"" + profile.getVirtualMachine() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      continue;
    }
    Long podId=null;
    if (isZoneBasic) {
      podId=dest.getPod().getId();
      if (router.getPodIdToDeployIn().longValue() != podId.longValue()) {
        sendPasswordAndVmData=false;
        if (_dnsBasicZoneUpdates.equalsIgnoreCase(""String_Node_Str"")) {
          sendDnsDhcpData=false;
        }
      }
    }
    Commands cmds=new Commands(OnError.Stop);
    String routerControlIpAddress=null;
    List<NicVO> nics=_nicDao.listByVmId(router.getId());
    for (    NicVO n : nics) {
      NetworkVO nc=_networkDao.findById(n.getNetworkId());
      if (nc.getTrafficType() == TrafficType.Control) {
        routerControlIpAddress=n.getIp4Address();
      }
    }
    if (sendDnsDhcpData) {
      DhcpEntryCommand dhcpCommand=new DhcpEntryCommand(nic.getMacAddress(),nic.getIp4Address(),profile.getVirtualMachine().getHostName());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_IP,routerControlIpAddress);
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
      dhcpCommand.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
      cmds.addCommand(""String_Node_Str"",dhcpCommand);
    }
    if (sendPasswordAndVmData) {
      String password=(String)profile.getParameter(VirtualMachineProfile.Param.VmPassword);
      String userData=profile.getVirtualMachine().getUserData();
      String sshPublicKey=profile.getVirtualMachine().getDetail(""String_Node_Str"");
      if (password != null && network.isDefault()) {
        final String encodedPassword=PasswordGenerator.rot13(password);
        SavePasswordCommand cmd=new SavePasswordCommand(encodedPassword,nic.getIp4Address(),profile.getVirtualMachine().getHostName());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
        cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
        cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dc.getNetworkType().toString());
        cmds.addCommand(""String_Node_Str"",cmd);
      }
      cmds.addCommand(""String_Node_Str"",generateVmDataCommand(router,nic.getIp4Address(),userData,serviceOffering,zoneName,nic.getIp4Address(),profile.getVirtualMachine().getHostName(),profile.getVirtualMachine().getInstanceName(),profile.getId(),sshPublicKey));
    }
    if (cmds.size() > 0) {
      boolean podLevelException=false;
      if (isZoneBasic && podId != null && profile.getVirtualMachine().getType() == VirtualMachine.Type.User && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == GuestIpType.Direct) {
        podLevelException=true;
      }
      try {
        _agentMgr.send(router.getHostId(),cmds);
      }
 catch (      AgentUnavailableException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
catch (      OperationTimedoutException e) {
        s_logger.warn(""String_Node_Str"" + router.getHostId(),e);
        disconnectedRouters.add(router);
        continue;
      }
      connectedRouters.add(router);
      Answer answer=cmds.getAnswer(""String_Node_Str"");
      if (!answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ router.getHostName()+ ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
      answer=cmds.getAnswer(""String_Node_Str"");
      if (answer != null && !answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
      answer=cmds.getAnswer(""String_Node_Str"");
      if (answer != null && !answer.getResult()) {
        s_logger.error(""String_Node_Str"" + profile + ""String_Node_Str""+ answer.getDetails());
        if (podLevelException) {
          throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),Pod.class,podId);
        }
        throw new ResourceUnavailableException(""String_Node_Str"" + answer.getDetails(),DataCenter.class,router.getDataCenterIdToDeployIn());
      }
    }
    rets.add(router);
  }
  String msg=""String_Node_Str"";
  if (!connectedRouters.isEmpty()) {
    stopDisconnectedRouters(disconnectedRouters,true,msg);
  }
 else   if (!disconnectedRouters.isEmpty()) {
    for (    VirtualRouter router : disconnectedRouters) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(msg + router.getInstanceName() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
      }
    }
    throw new ResourceUnavailableException(msg,VirtualRouter.class,disconnectedRouters.get(0).getId());
  }
  return rets;
}"
89323,"protected StoragePoolDaoImpl(){
  AllFieldSearch=createSearchBuilder();
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getName(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getUuid(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getHostAddress(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getStatus(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getPath(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getPodId(),Op.EQ);
  AllFieldSearch.done();
  DcPodSearch=createSearchBuilder();
  DcPodSearch.and(""String_Node_Str"",DcPodSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  DcPodSearch.and().op(""String_Node_Str"",DcPodSearch.entity().getPodId(),SearchCriteria.Op.NULL);
  DcPodSearch.or(""String_Node_Str"",DcPodSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  DcPodSearch.cp();
  DcPodSearch.and().op(""String_Node_Str"",DcPodSearch.entity().getClusterId(),SearchCriteria.Op.NULL);
  DcPodSearch.or(""String_Node_Str"",DcPodSearch.entity().getClusterId(),SearchCriteria.Op.EQ);
  DcPodSearch.cp();
  DcPodSearch.done();
  DcPodAnyClusterSearch=createSearchBuilder();
  DcPodAnyClusterSearch.and(""String_Node_Str"",DcPodAnyClusterSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  DcPodAnyClusterSearch.and().op(""String_Node_Str"",DcPodAnyClusterSearch.entity().getPodId(),SearchCriteria.Op.NULL);
  DcPodAnyClusterSearch.or(""String_Node_Str"",DcPodAnyClusterSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  DcPodAnyClusterSearch.cp();
  DcPodAnyClusterSearch.done();
  DeleteLvmSearch=createSearchBuilder();
  DeleteLvmSearch.and(""String_Node_Str"",DeleteLvmSearch.entity().getId(),SearchCriteria.Op.IN);
  DeleteLvmSearch.and().op(""String_Node_Str"",DeleteLvmSearch.entity().getPoolType(),SearchCriteria.Op.EQ);
  DeleteLvmSearch.or(""String_Node_Str"",DeleteLvmSearch.entity().getPoolType(),SearchCriteria.Op.EQ);
  DeleteLvmSearch.cp();
  DeleteLvmSearch.done();
  MaintenanceCountSearch=createSearchBuilder(Long.class);
  MaintenanceCountSearch.and(""String_Node_Str"",MaintenanceCountSearch.entity().getId(),SearchCriteria.Op.EQ);
  MaintenanceCountSearch.select(null,Func.COUNT,null);
  MaintenanceCountSearch.and(""String_Node_Str"",MaintenanceCountSearch.entity().getStatus(),SearchCriteria.Op.IN);
  MaintenanceCountSearch.done();
  _detailsDao=ComponentLocator.inject(StoragePoolDetailsDaoImpl.class);
}","protected StoragePoolDaoImpl(){
  AllFieldSearch=createSearchBuilder();
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getName(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getUuid(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getHostAddress(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getStatus(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getPath(),SearchCriteria.Op.EQ);
  AllFieldSearch.and(""String_Node_Str"",AllFieldSearch.entity().getPodId(),Op.EQ);
  AllFieldSearch.done();
  DcPodSearch=createSearchBuilder();
  DcPodSearch.and(""String_Node_Str"",DcPodSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  DcPodSearch.and().op(""String_Node_Str"",DcPodSearch.entity().getPodId(),SearchCriteria.Op.NULL);
  DcPodSearch.or(""String_Node_Str"",DcPodSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  DcPodSearch.cp();
  DcPodSearch.and().op(""String_Node_Str"",DcPodSearch.entity().getClusterId(),SearchCriteria.Op.NULL);
  DcPodSearch.or(""String_Node_Str"",DcPodSearch.entity().getClusterId(),SearchCriteria.Op.EQ);
  DcPodSearch.cp();
  DcPodSearch.done();
  DcPodAnyClusterSearch=createSearchBuilder();
  DcPodAnyClusterSearch.and(""String_Node_Str"",DcPodAnyClusterSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  DcPodAnyClusterSearch.and().op(""String_Node_Str"",DcPodAnyClusterSearch.entity().getPodId(),SearchCriteria.Op.NULL);
  DcPodAnyClusterSearch.or(""String_Node_Str"",DcPodAnyClusterSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  DcPodAnyClusterSearch.cp();
  DcPodAnyClusterSearch.done();
  DeleteLvmSearch=createSearchBuilder();
  DeleteLvmSearch.and(""String_Node_Str"",DeleteLvmSearch.entity().getId(),SearchCriteria.Op.IN);
  DeleteLvmSearch.and().op(""String_Node_Str"",DeleteLvmSearch.entity().getPoolType(),SearchCriteria.Op.EQ);
  DeleteLvmSearch.or(""String_Node_Str"",DeleteLvmSearch.entity().getPoolType(),SearchCriteria.Op.EQ);
  DeleteLvmSearch.cp();
  DeleteLvmSearch.done();
  StatusCountSearch=createSearchBuilder(Long.class);
  StatusCountSearch.and(""String_Node_Str"",StatusCountSearch.entity().getStatus(),SearchCriteria.Op.IN);
  StatusCountSearch.select(null,Func.COUNT,null);
  StatusCountSearch.done();
  _detailsDao=ComponentLocator.inject(StoragePoolDetailsDaoImpl.class);
}"
89324,"@Override public HostResponse createHostResponse(Host host){
  HostResponse hostResponse=new HostResponse();
  hostResponse.setId(host.getId());
  hostResponse.setCapabilities(host.getCapabilities());
  hostResponse.setClusterId(host.getClusterId());
  hostResponse.setCpuNumber(host.getCpus());
  hostResponse.setZoneId(host.getDataCenterId());
  hostResponse.setDisconnectedOn(host.getDisconnectedOn());
  hostResponse.setHypervisor(host.getHypervisorType());
  hostResponse.setHostType(host.getType());
  hostResponse.setLastPinged(new Date(host.getLastPinged()));
  hostResponse.setManagementServerId(host.getManagementServerId());
  hostResponse.setName(host.getName());
  hostResponse.setPodId(host.getPodId());
  hostResponse.setRemoved(host.getRemoved());
  hostResponse.setCpuSpeed(host.getSpeed());
  hostResponse.setState(host.getStatus());
  hostResponse.setIpAddress(host.getPrivateIpAddress());
  hostResponse.setVersion(host.getVersion());
  hostResponse.setCreated(host.getCreated());
  GuestOSCategoryVO guestOSCategory=ApiDBUtils.getHostGuestOSCategory(host.getId());
  if (guestOSCategory != null) {
    hostResponse.setOsCategoryId(guestOSCategory.getId());
    hostResponse.setOsCategoryName(guestOSCategory.getName());
  }
  hostResponse.setZoneName(ApiDBUtils.findZoneById(host.getDataCenterId()).getName());
  if (host.getPodId() != null) {
    HostPodVO pod=ApiDBUtils.findPodById(host.getPodId());
    if (pod != null) {
      hostResponse.setPodName(pod.getName());
    }
  }
  DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
  if ((host.getCpus() != null) && (host.getSpeed() != null)) {
    int cpu=0;
    String cpuAlloc=null;
    List<UserVmVO> instances=ApiDBUtils.listUserVMsByHostId(host.getId());
    for (    UserVmVO vm : instances) {
      ServiceOffering so=ApiDBUtils.findServiceOfferingById(vm.getServiceOfferingId());
      cpu+=so.getCpu() * so.getSpeed();
    }
    cpuAlloc=decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + ""String_Node_Str"";
    hostResponse.setCpuAllocated(cpuAlloc);
    String cpuWithOverprovisioning=new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor()).toString();
    hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning);
  }
  String cpuUsed=null;
  HostStats hostStats=ApiDBUtils.getHostStatistics(host.getId());
  if (hostStats != null) {
    float cpuUtil=(float)hostStats.getCpuUtilization();
    cpuUsed=decimalFormat.format(cpuUtil) + ""String_Node_Str"";
    hostResponse.setCpuUsed(cpuUsed);
    hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());
    hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());
  }
  if (host.getType() == Host.Type.Routing) {
    hostResponse.setMemoryTotal(host.getTotalMemory());
    Long mem=ApiDBUtils.getMemoryUsagebyHost(host.getId());
    hostResponse.setMemoryAllocated(mem);
    hostResponse.setMemoryUsed(mem);
    hostResponse.setHostTags(ApiDBUtils.getHostTags(host.getId()));
    hostResponse.setHypervisorVersion(host.getHypervisorVersion());
  }
 else   if (host.getType().toString().equals(""String_Node_Str"")) {
    hostResponse.setDiskSizeTotal(host.getTotalSize());
    hostResponse.setDiskSizeAllocated(0L);
  }
  if (host.getClusterId() != null) {
    ClusterVO cluster=ApiDBUtils.findClusterById(host.getClusterId());
    hostResponse.setClusterName(cluster.getName());
    hostResponse.setClusterType(cluster.getClusterType().toString());
  }
  hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host));
  Set<com.cloud.host.Status.Event> possibleEvents=host.getStatus().getPossibleEvents();
  if ((possibleEvents != null) && !possibleEvents.isEmpty()) {
    String events=""String_Node_Str"";
    Iterator<com.cloud.host.Status.Event> iter=possibleEvents.iterator();
    while (iter.hasNext()) {
      com.cloud.host.Status.Event event=iter.next();
      events+=event.toString();
      if (iter.hasNext()) {
        events+=""String_Node_Str"";
      }
    }
    hostResponse.setEvents(events);
  }
  hostResponse.setAllocationState(host.getHostAllocationState().toString());
  hostResponse.setObjectName(""String_Node_Str"");
  return hostResponse;
}","@Override public HostResponse createHostResponse(Host host){
  HostResponse hostResponse=new HostResponse();
  hostResponse.setId(host.getId());
  hostResponse.setCapabilities(host.getCapabilities());
  hostResponse.setClusterId(host.getClusterId());
  hostResponse.setCpuNumber(host.getCpus());
  hostResponse.setZoneId(host.getDataCenterId());
  hostResponse.setDisconnectedOn(host.getDisconnectedOn());
  hostResponse.setHypervisor(host.getHypervisorType());
  hostResponse.setHostType(host.getType());
  hostResponse.setLastPinged(new Date(host.getLastPinged()));
  hostResponse.setManagementServerId(host.getManagementServerId());
  hostResponse.setName(host.getName());
  hostResponse.setPodId(host.getPodId());
  hostResponse.setRemoved(host.getRemoved());
  hostResponse.setCpuSpeed(host.getSpeed());
  hostResponse.setState(host.getStatus());
  hostResponse.setIpAddress(host.getPrivateIpAddress());
  hostResponse.setVersion(host.getVersion());
  hostResponse.setCreated(host.getCreated());
  GuestOSCategoryVO guestOSCategory=ApiDBUtils.getHostGuestOSCategory(host.getId());
  if (guestOSCategory != null) {
    hostResponse.setOsCategoryId(guestOSCategory.getId());
    hostResponse.setOsCategoryName(guestOSCategory.getName());
  }
  hostResponse.setZoneName(ApiDBUtils.findZoneById(host.getDataCenterId()).getName());
  if (host.getPodId() != null) {
    HostPodVO pod=ApiDBUtils.findPodById(host.getPodId());
    if (pod != null) {
      hostResponse.setPodName(pod.getName());
    }
  }
  DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
  if (host.getType() == Host.Type.Routing) {
    Long mem=ApiDBUtils.getMemoryOrCpuCapacitybyHost(host.getId(),Capacity.CAPACITY_TYPE_MEMORY);
    Long cpu=ApiDBUtils.getMemoryOrCpuCapacitybyHost(host.getId(),Capacity.CAPACITY_TYPE_CPU);
    hostResponse.setMemoryAllocated(mem);
    hostResponse.setMemoryTotal(host.getTotalMemory());
    hostResponse.setHostTags(ApiDBUtils.getHostTags(host.getId()));
    hostResponse.setHypervisorVersion(host.getHypervisorVersion());
    String cpuAlloc=decimalFormat.format(((float)cpu / (float)(host.getCpus() * host.getSpeed())) * 100f) + ""String_Node_Str"";
    hostResponse.setCpuAllocated(cpuAlloc);
    String cpuWithOverprovisioning=new Float(host.getCpus() * host.getSpeed() * ApiDBUtils.getCpuOverprovisioningFactor()).toString();
    hostResponse.setCpuWithOverprovisioning(cpuWithOverprovisioning);
    String cpuUsed=null;
    HostStats hostStats=ApiDBUtils.getHostStatistics(host.getId());
    if (hostStats != null) {
      float cpuUtil=(float)hostStats.getCpuUtilization();
      cpuUsed=decimalFormat.format(cpuUtil) + ""String_Node_Str"";
      hostResponse.setCpuUsed(cpuUsed);
      hostResponse.setMemoryUsed((new Double(hostStats.getUsedMemory())).longValue());
      hostResponse.setNetworkKbsRead((new Double(hostStats.getNetworkReadKBs())).longValue());
      hostResponse.setNetworkKbsWrite((new Double(hostStats.getNetworkWriteKBs())).longValue());
    }
  }
  if (host.getClusterId() != null) {
    ClusterVO cluster=ApiDBUtils.findClusterById(host.getClusterId());
    hostResponse.setClusterName(cluster.getName());
    hostResponse.setClusterType(cluster.getClusterType().toString());
  }
  hostResponse.setLocalStorageActive(ApiDBUtils.isLocalStorageActiveOnHost(host));
  Set<com.cloud.host.Status.Event> possibleEvents=host.getStatus().getPossibleEvents();
  if ((possibleEvents != null) && !possibleEvents.isEmpty()) {
    String events=""String_Node_Str"";
    Iterator<com.cloud.host.Status.Event> iter=possibleEvents.iterator();
    while (iter.hasNext()) {
      com.cloud.host.Status.Event event=iter.next();
      events+=event.toString();
      if (iter.hasNext()) {
        events+=""String_Node_Str"";
      }
    }
    hostResponse.setEvents(events);
  }
  hostResponse.setAllocationState(host.getHostAllocationState().toString());
  hostResponse.setObjectName(""String_Node_Str"");
  return hostResponse;
}"
89325,"@Override public List<HostVO> getHostsToRebalance(long msId,int avLoad){
  List<HostVO> allHosts=_hostDao.listByManagementServer(msId);
  if (allHosts.size() <= avLoad) {
    s_logger.debug(""String_Node_Str"" + allHosts.size() + ""String_Node_Str""+ msId+ ""String_Node_Str""+ avLoad+ ""String_Node_Str"");
    return null;
  }
  List<HostVO> directHosts=_hostDao.listDirectHostsBy(msId,Status.Up);
  if (directHosts.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + Status.Up + ""String_Node_Str""+ msId+ ""String_Node_Str"");
    return null;
  }
  Map<Long,List<HostVO>> hostToClusterMap=new HashMap<Long,List<HostVO>>();
  for (  HostVO directHost : directHosts) {
    Long clusterId=directHost.getClusterId();
    List<HostVO> directHostsPerCluster=null;
    if (!hostToClusterMap.containsKey(clusterId)) {
      directHostsPerCluster=new ArrayList<HostVO>();
    }
 else {
      directHostsPerCluster=hostToClusterMap.get(clusterId);
    }
    directHostsPerCluster.add(directHost);
    hostToClusterMap.put(clusterId,directHostsPerCluster);
  }
  hostToClusterMap=sortByClusterSize(hostToClusterMap);
  int hostsToGive=allHosts.size() - avLoad;
  int hostsLeftToGive=hostsToGive;
  int hostsLeft=directHosts.size();
  List<HostVO> hostsToReturn=new ArrayList<HostVO>();
  for (  Long cluster : hostToClusterMap.keySet()) {
    List<HostVO> hostsInCluster=hostToClusterMap.get(cluster);
    hostsLeft=hostsLeft - hostsInCluster.size();
    if (hostsToReturn.size() < hostsToGive) {
      s_logger.debug(""String_Node_Str"" + cluster);
      if (hostsInCluster.size() > hostsLeftToGive) {
        if (hostsLeft >= hostsLeftToGive) {
          s_logger.debug(""String_Node_Str"" + cluster + ""String_Node_Str""+ hostsInCluster.size()+ ""String_Node_Str""+ hostsLeftToGive);
          continue;
        }
 else {
          s_logger.debug(""String_Node_Str"" + hostsLeftToGive + ""String_Node_Str""+ cluster);
          for (int i=0; i < hostsLeftToGive; i++) {
            hostsToReturn.add(hostsInCluster.get(i));
          }
          break;
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + hostsInCluster.size() + ""String_Node_Str""+ hostsInCluster+ ""String_Node_Str""+ cluster);
        hostsToReturn.addAll(hostsInCluster);
        hostsLeftToGive=hostsLeftToGive - hostsInCluster.size();
      }
    }
 else {
      break;
    }
  }
  return hostsToReturn;
}","@Override public List<HostVO> getHostsToRebalance(long msId,int avLoad){
  List<HostVO> allHosts=_hostDao.listRoutingHostsByManagementServer(msId);
  if (allHosts.size() <= avLoad) {
    s_logger.debug(""String_Node_Str"" + allHosts.size() + ""String_Node_Str""+ msId+ ""String_Node_Str""+ avLoad+ ""String_Node_Str"");
    return null;
  }
  List<HostVO> directHosts=_hostDao.listDirectHostsBy(msId,Status.Up);
  if (directHosts.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + Status.Up + ""String_Node_Str""+ msId+ ""String_Node_Str"");
    return null;
  }
  Map<Long,List<HostVO>> hostToClusterMap=new HashMap<Long,List<HostVO>>();
  for (  HostVO directHost : directHosts) {
    Long clusterId=directHost.getClusterId();
    List<HostVO> directHostsPerCluster=null;
    if (!hostToClusterMap.containsKey(clusterId)) {
      directHostsPerCluster=new ArrayList<HostVO>();
    }
 else {
      directHostsPerCluster=hostToClusterMap.get(clusterId);
    }
    directHostsPerCluster.add(directHost);
    hostToClusterMap.put(clusterId,directHostsPerCluster);
  }
  hostToClusterMap=sortByClusterSize(hostToClusterMap);
  int hostsToGive=allHosts.size() - avLoad;
  int hostsLeftToGive=hostsToGive;
  int hostsLeft=directHosts.size();
  List<HostVO> hostsToReturn=new ArrayList<HostVO>();
  s_logger.debug(""String_Node_Str"" + msId + ""String_Node_Str""+ hostsToGive+ ""String_Node_Str""+ allHosts.size()+ ""String_Node_Str""+ avLoad+ ""String_Node_Str"");
  for (  Long cluster : hostToClusterMap.keySet()) {
    List<HostVO> hostsInCluster=hostToClusterMap.get(cluster);
    hostsLeft=hostsLeft - hostsInCluster.size();
    if (hostsToReturn.size() < hostsToGive) {
      s_logger.debug(""String_Node_Str"" + cluster);
      if (hostsInCluster.size() > hostsLeftToGive) {
        if (hostsLeft >= hostsLeftToGive) {
          s_logger.debug(""String_Node_Str"" + cluster + ""String_Node_Str""+ hostsInCluster.size()+ ""String_Node_Str""+ hostsLeftToGive);
          continue;
        }
 else {
          s_logger.debug(""String_Node_Str"" + hostsLeftToGive + ""String_Node_Str""+ cluster);
          for (int i=0; i < hostsLeftToGive; i++) {
            s_logger.trace(""String_Node_Str"" + hostsInCluster.get(i) + ""String_Node_Str""+ cluster);
            hostsToReturn.add(hostsInCluster.get(i));
          }
          break;
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + hostsInCluster.size() + ""String_Node_Str""+ hostsInCluster+ ""String_Node_Str""+ cluster);
        hostsToReturn.addAll(hostsInCluster);
        hostsLeftToGive=hostsLeftToGive - hostsInCluster.size();
      }
    }
 else {
      break;
    }
  }
  s_logger.debug(""String_Node_Str"" + msId + ""String_Node_Str""+ hostsToReturn.size()+ ""String_Node_Str"");
  return hostsToReturn;
}"
89326,"protected HashMap<String,State> sync(){
  HashMap<String,State> changes=new HashMap<String,State>();
  HashMap<String,State> oldStates=null;
  try {
synchronized (_vms) {
      HashMap<String,State> newStates=getVmStates();
      oldStates=new HashMap<String,State>(_vms.size());
      oldStates.putAll(_vms);
      for (      final Map.Entry<String,State> entry : newStates.entrySet()) {
        final String vm=entry.getKey();
        State newState=entry.getValue();
        final State oldState=oldStates.remove(vm);
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + vm + ""String_Node_Str""+ newState+ ""String_Node_Str""+ (oldState != null ? oldState.toString() : ""String_Node_Str""));
        }
        if (vm.startsWith(""String_Node_Str"")) {
          s_logger.debug(""String_Node_Str"");
          continue;
        }
        if (oldState == null) {
          _vms.put(vm,newState);
          s_logger.debug(""String_Node_Str"" + vm);
          changes.put(vm,newState);
        }
 else         if (oldState == State.Starting) {
          if (newState == State.Running) {
            _vms.put(vm,newState);
          }
 else           if (newState == State.Stopped) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
        }
 else         if (oldState == State.Migrating) {
          if (newState == State.Running) {
            s_logger.debug(""String_Node_Str"" + vm);
            _vms.put(vm,newState);
          }
        }
 else         if (oldState == State.Stopping) {
          if (newState == State.Stopped) {
            _vms.put(vm,newState);
          }
 else           if (newState == State.Running) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
        }
 else         if (oldState != newState) {
          _vms.put(vm,newState);
          if (newState == State.Stopped) {
          }
          changes.put(vm,newState);
        }
      }
      for (      final Map.Entry<String,State> entry : oldStates.entrySet()) {
        final String vm=entry.getKey();
        final State oldState=entry.getValue();
        if (isVmInCluster(vm)) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
          if (oldState != State.Starting && oldState != State.Migrating) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
            _vms.remove(vm);
          }
 else {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ vm+ ""String_Node_Str""+ oldState);
          }
          continue;
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
        if (oldState == State.Stopping) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          _vms.remove(vm);
        }
 else         if (oldState == State.Starting) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
 else         if (oldState == State.Stopped) {
          _vms.remove(vm);
        }
 else         if (oldState == State.Migrating) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
 else {
          State state=State.Stopped;
          changes.put(entry.getKey(),state);
        }
      }
    }
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      s_logger.warn(""String_Node_Str"");
      invalidateServiceContext();
    }
    s_logger.error(""String_Node_Str"" + VmwareHelper.getExceptionMessage(e));
    return null;
  }
  return changes;
}","protected HashMap<String,State> sync(){
  HashMap<String,State> changes=new HashMap<String,State>();
  HashMap<String,State> oldStates=null;
  try {
synchronized (_vms) {
      HashMap<String,State> newStates=getVmStates();
      oldStates=new HashMap<String,State>(_vms.size());
      oldStates.putAll(_vms);
      for (      final Map.Entry<String,State> entry : newStates.entrySet()) {
        final String vm=entry.getKey();
        State newState=entry.getValue();
        final State oldState=oldStates.remove(vm);
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + vm + ""String_Node_Str""+ newState+ ""String_Node_Str""+ (oldState != null ? oldState.toString() : ""String_Node_Str""));
        }
        if (vm.startsWith(""String_Node_Str"")) {
          s_logger.debug(""String_Node_Str"");
          continue;
        }
        if (oldState == null) {
          _vms.put(vm,newState);
          s_logger.debug(""String_Node_Str"" + vm);
          changes.put(vm,newState);
        }
 else         if (oldState == State.Starting) {
          if (newState == State.Running) {
            _vms.put(vm,newState);
          }
 else           if (newState == State.Stopped) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
        }
 else         if (oldState == State.Migrating) {
          if (newState == State.Running) {
            s_logger.debug(""String_Node_Str"" + vm);
            _vms.put(vm,newState);
          }
        }
 else         if (oldState == State.Stopping) {
          if (newState == State.Stopped) {
            _vms.put(vm,newState);
          }
 else           if (newState == State.Running) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
        }
 else         if (oldState != newState) {
          _vms.put(vm,newState);
          if (newState == State.Stopped) {
          }
          changes.put(vm,newState);
        }
      }
      for (      final Map.Entry<String,State> entry : oldStates.entrySet()) {
        final String vm=entry.getKey();
        final State oldState=entry.getValue();
        if (isVmInCluster(vm)) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
          if (oldState != State.Starting && oldState != State.Migrating) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ oldState);
            _vms.remove(vm);
          }
 else {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ vm+ ""String_Node_Str""+ oldState);
          }
          continue;
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
        if (oldState == State.Stopping) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          _vms.remove(vm);
        }
 else         if (oldState == State.Starting) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
 else         if (oldState == State.Stopped) {
          _vms.remove(vm);
        }
 else         if (oldState == State.Migrating) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
 else {
          State state=State.Stopped;
          changes.put(entry.getKey(),state);
        }
      }
    }
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      s_logger.warn(""String_Node_Str"");
      invalidateServiceContext();
    }
    s_logger.error(""String_Node_Str"" + VmwareHelper.getExceptionMessage(e));
    return null;
  }
  return changes;
}"
89327,"private boolean powerOffNoCheck() throws Exception {
  ManagedObjectReference morTask=_context.getService().powerOffVM_Task(_mor);
  String result=_context.getServiceUtil().waitForTask(morTask);
  if (result.equals(""String_Node_Str"")) {
    _context.waitForTaskProgressDone(morTask);
    return true;
  }
 else {
    s_logger.error(""String_Node_Str"" + TaskMO.getTaskFailureInfo(_context,morTask));
  }
  return false;
}","private boolean powerOffNoCheck() throws Exception {
  ManagedObjectReference morTask=_context.getService().powerOffVM_Task(_mor);
  String result=_context.getServiceUtil().waitForTask(morTask);
  if (result.equals(""String_Node_Str"")) {
    _context.waitForTaskProgressDone(morTask);
    long startTick=System.currentTimeMillis();
    while (getPowerState() != VirtualMachinePowerState.poweredOff && System.currentTimeMillis() - startTick < 5000) {
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
      }
    }
    return true;
  }
 else {
    if (getPowerState() == VirtualMachinePowerState.poweredOff) {
      s_logger.info(""String_Node_Str"");
      return true;
    }
    s_logger.error(""String_Node_Str"" + TaskMO.getTaskFailureInfo(_context,morTask));
  }
  return false;
}"
89328,"protected HashMap<String,State> sync(){
  HashMap<String,State> changes=new HashMap<String,State>();
  HashMap<String,State> oldStates=null;
  try {
synchronized (_vms) {
      HashMap<String,State> newStates=getVmStates();
      oldStates=new HashMap<String,State>(_vms.size());
      oldStates.putAll(_vms);
      for (      final Map.Entry<String,State> entry : newStates.entrySet()) {
        final String vm=entry.getKey();
        State newState=entry.getValue();
        final State oldState=oldStates.remove(vm);
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + vm + ""String_Node_Str""+ newState+ ""String_Node_Str""+ (oldState != null ? oldState.toString() : ""String_Node_Str""));
        }
        if (vm.startsWith(""String_Node_Str"")) {
          s_logger.debug(""String_Node_Str"");
          continue;
        }
        if (oldState == null) {
          _vms.put(vm,newState);
          s_logger.debug(""String_Node_Str"" + vm);
          changes.put(vm,newState);
        }
 else         if (oldState == State.Starting) {
          if (newState == State.Running) {
            _vms.put(vm,newState);
          }
 else           if (newState == State.Stopped) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
        }
 else         if (oldState == State.Migrating) {
          if (newState == State.Running) {
            s_logger.debug(""String_Node_Str"" + vm);
            _vms.put(vm,newState);
          }
        }
 else         if (oldState == State.Stopping) {
          if (newState == State.Stopped) {
            _vms.put(vm,newState);
          }
 else           if (newState == State.Running) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
        }
 else         if (oldState != newState) {
          _vms.put(vm,newState);
          if (newState == State.Stopped) {
          }
          changes.put(vm,newState);
        }
      }
      for (      final Map.Entry<String,State> entry : oldStates.entrySet()) {
        final String vm=entry.getKey();
        final State oldState=entry.getValue();
        if (isVmInCluster(vm)) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
          _vms.remove(vm);
          continue;
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
        if (oldState == State.Stopping) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          _vms.remove(vm);
        }
 else         if (oldState == State.Starting) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
 else         if (oldState == State.Stopped) {
          _vms.remove(vm);
        }
 else         if (oldState == State.Migrating) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
 else {
          State state=State.Stopped;
          changes.put(entry.getKey(),state);
        }
      }
    }
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      s_logger.warn(""String_Node_Str"");
      invalidateServiceContext();
    }
    s_logger.error(""String_Node_Str"" + VmwareHelper.getExceptionMessage(e));
    return null;
  }
  return changes;
}","protected HashMap<String,State> sync(){
  HashMap<String,State> changes=new HashMap<String,State>();
  HashMap<String,State> oldStates=null;
  try {
synchronized (_vms) {
      HashMap<String,State> newStates=getVmStates();
      oldStates=new HashMap<String,State>(_vms.size());
      oldStates.putAll(_vms);
      for (      final Map.Entry<String,State> entry : newStates.entrySet()) {
        final String vm=entry.getKey();
        State newState=entry.getValue();
        final State oldState=oldStates.remove(vm);
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + vm + ""String_Node_Str""+ newState+ ""String_Node_Str""+ (oldState != null ? oldState.toString() : ""String_Node_Str""));
        }
        if (vm.startsWith(""String_Node_Str"")) {
          s_logger.debug(""String_Node_Str"");
          continue;
        }
        if (oldState == null) {
          _vms.put(vm,newState);
          s_logger.debug(""String_Node_Str"" + vm);
          changes.put(vm,newState);
        }
 else         if (oldState == State.Starting) {
          if (newState == State.Running) {
            _vms.put(vm,newState);
          }
 else           if (newState == State.Stopped) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
        }
 else         if (oldState == State.Migrating) {
          if (newState == State.Running) {
            s_logger.debug(""String_Node_Str"" + vm);
            _vms.put(vm,newState);
          }
        }
 else         if (oldState == State.Stopping) {
          if (newState == State.Stopped) {
            _vms.put(vm,newState);
          }
 else           if (newState == State.Running) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
        }
 else         if (oldState != newState) {
          _vms.put(vm,newState);
          if (newState == State.Stopped) {
          }
          changes.put(vm,newState);
        }
      }
      for (      final Map.Entry<String,State> entry : oldStates.entrySet()) {
        final String vm=entry.getKey();
        final State oldState=entry.getValue();
        if (isVmInCluster(vm)) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          }
          if (oldState != State.Starting && oldState != State.Migrating) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
            _vms.remove(vm);
          }
 else {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ vm+ ""String_Node_Str""+ oldState);
          }
          continue;
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
        if (oldState == State.Stopping) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
          _vms.remove(vm);
        }
 else         if (oldState == State.Starting) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
 else         if (oldState == State.Stopped) {
          _vms.remove(vm);
        }
 else         if (oldState == State.Migrating) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str"");
        }
 else {
          State state=State.Stopped;
          changes.put(entry.getKey(),state);
        }
      }
    }
  }
 catch (  Throwable e) {
    if (e instanceof RemoteException) {
      s_logger.warn(""String_Node_Str"");
      invalidateServiceContext();
    }
    s_logger.error(""String_Node_Str"" + VmwareHelper.getExceptionMessage(e));
    return null;
  }
  return changes;
}"
89329,"public static VirtualDevice prepareDiskDevice(VirtualMachineMO vmMo,int controllerKey,String vmdkDatastorePathChain[],ManagedObjectReference morDs,int deviceNumber,int contextNumber) throws Exception {
  assert(vmdkDatastorePathChain != null);
  assert(vmdkDatastorePathChain.length >= 1);
  if (controllerKey < 0)   controllerKey=vmMo.getIDEDeviceControllerKey();
  VirtualDisk disk=new VirtualDisk();
  VirtualDiskFlatVer2BackingInfo backingInfo=new VirtualDiskFlatVer2BackingInfo();
  backingInfo.setDatastore(morDs);
  backingInfo.setFileName(vmdkDatastorePathChain[0]);
  backingInfo.setDiskMode(VirtualDiskMode.persistent.toString());
  if (vmdkDatastorePathChain.length > 1) {
    String[] parentDisks=new String[vmdkDatastorePathChain.length - 1];
    for (int i=0; i < vmdkDatastorePathChain.length - 1; i++)     parentDisks[i]=vmdkDatastorePathChain[i + 1];
    setParentBackingInfo(backingInfo,morDs,parentDisks);
  }
  disk.setBacking(backingInfo);
  if (deviceNumber < 0)   deviceNumber=vmMo.getNextDeviceNumber(controllerKey);
  disk.setControllerKey(controllerKey);
  disk.setKey(-contextNumber);
  disk.setUnitNumber(deviceNumber);
  VirtualDeviceConnectInfo connectInfo=new VirtualDeviceConnectInfo();
  connectInfo.setConnected(true);
  connectInfo.setStartConnected(true);
  disk.setConnectable(connectInfo);
  return disk;
}","public static VirtualDevice prepareDiskDevice(VirtualMachineMO vmMo,int controllerKey,String vmdkDatastorePathChain[],ManagedObjectReference morDs,int deviceNumber,int contextNumber) throws Exception {
  assert(vmdkDatastorePathChain != null);
  assert(vmdkDatastorePathChain.length >= 1);
  VirtualDisk disk=new VirtualDisk();
  VirtualDiskFlatVer2BackingInfo backingInfo=new VirtualDiskFlatVer2BackingInfo();
  backingInfo.setDatastore(morDs);
  backingInfo.setFileName(vmdkDatastorePathChain[0]);
  backingInfo.setDiskMode(VirtualDiskMode.persistent.toString());
  if (vmdkDatastorePathChain.length > 1) {
    String[] parentDisks=new String[vmdkDatastorePathChain.length - 1];
    for (int i=0; i < vmdkDatastorePathChain.length - 1; i++)     parentDisks[i]=vmdkDatastorePathChain[i + 1];
    setParentBackingInfo(backingInfo,morDs,parentDisks);
  }
  disk.setBacking(backingInfo);
  if (controllerKey < 0)   controllerKey=vmMo.getIDEDeviceControllerKey();
  if (deviceNumber < 0)   deviceNumber=vmMo.getNextDeviceNumber(controllerKey);
  disk.setControllerKey(controllerKey);
  disk.setKey(-contextNumber);
  disk.setUnitNumber(deviceNumber);
  VirtualDeviceConnectInfo connectInfo=new VirtualDeviceConnectInfo();
  connectInfo.setConnected(true);
  connectInfo.setStartConnected(true);
  disk.setConnectable(connectInfo);
  return disk;
}"
89330,"public static VirtualDevice prepareNicDevice(VirtualMachineMO vmMo,ManagedObjectReference morNetwork,VirtualEthernetCardType deviceType,String portGroupName,String macAddress,int deviceNumber,int contextNumber,boolean conntected,boolean connectOnStart) throws Exception {
  VirtualEthernetCard nic;
switch (deviceType) {
case E1000:
    nic=new VirtualE1000();
  break;
case PCNet32:
nic=new VirtualPCNet32();
break;
case Vmxnet2:
nic=new VirtualVmxnet2();
break;
case Vmxnet3:
nic=new VirtualVmxnet3();
break;
default :
assert(false);
nic=new VirtualE1000();
}
VirtualEthernetCardNetworkBackingInfo nicBacking=new VirtualEthernetCardNetworkBackingInfo();
nicBacking.setDeviceName(portGroupName);
nicBacking.setNetwork(morNetwork);
nic.setBacking(nicBacking);
VirtualDeviceConnectInfo connectInfo=new VirtualDeviceConnectInfo();
connectInfo.setAllowGuestControl(true);
connectInfo.setConnected(conntected);
connectInfo.setStartConnected(connectOnStart);
nic.setAddressType(""String_Node_Str"");
nic.setConnectable(connectInfo);
nic.setMacAddress(macAddress);
nic.setControllerKey(vmMo.getPCIDeviceControllerKey());
if (deviceNumber < 0) deviceNumber=vmMo.getNextPCIDeviceNumber();
nic.setUnitNumber(deviceNumber);
nic.setKey(-contextNumber);
return nic;
}","public static VirtualDevice prepareNicDevice(VirtualMachineMO vmMo,ManagedObjectReference morNetwork,VirtualEthernetCardType deviceType,String portGroupName,String macAddress,int deviceNumber,int contextNumber,boolean conntected,boolean connectOnStart) throws Exception {
  VirtualEthernetCard nic;
switch (deviceType) {
case E1000:
    nic=new VirtualE1000();
  break;
case PCNet32:
nic=new VirtualPCNet32();
break;
case Vmxnet2:
nic=new VirtualVmxnet2();
break;
case Vmxnet3:
nic=new VirtualVmxnet3();
break;
default :
assert(false);
nic=new VirtualE1000();
}
VirtualEthernetCardNetworkBackingInfo nicBacking=new VirtualEthernetCardNetworkBackingInfo();
nicBacking.setDeviceName(portGroupName);
nicBacking.setNetwork(morNetwork);
nic.setBacking(nicBacking);
VirtualDeviceConnectInfo connectInfo=new VirtualDeviceConnectInfo();
connectInfo.setAllowGuestControl(true);
connectInfo.setConnected(conntected);
connectInfo.setStartConnected(connectOnStart);
nic.setAddressType(""String_Node_Str"");
nic.setConnectable(connectInfo);
nic.setMacAddress(macAddress);
nic.setUnitNumber(deviceNumber);
nic.setKey(-contextNumber);
return nic;
}"
89331,"@Override public void onManagementNodeLeft(List<ManagementServerHostVO> nodeList,long selfNodeId){
  for (  ManagementServerHostVO msHost : nodeList) {
    Transaction txn=Transaction.open(Transaction.CLOUD_DB);
    try {
      txn.start();
      List<SyncQueueItemVO> items=_queueMgr.getActiveQueueItems(msHost.getId(),true);
      cleanupPendingJobs(items);
      _queueMgr.resetQueueProcess(msHost.getId());
      _jobDao.resetJobProcess(msHost.getId(),BaseCmd.INTERNAL_ERROR,getResetResultMessage(""String_Node_Str""));
      txn.commit();
    }
 catch (    Throwable e) {
      s_logger.warn(""String_Node_Str"",e);
      txn.rollback();
    }
 finally {
      txn.close();
    }
  }
}","@Override public void onManagementNodeLeft(List<ManagementServerHostVO> nodeList,long selfNodeId){
  for (  ManagementServerHostVO msHost : nodeList) {
    Transaction txn=Transaction.open(Transaction.CLOUD_DB);
    try {
      txn.start();
      List<SyncQueueItemVO> items=_queueMgr.getActiveQueueItems(msHost.getId(),true);
      cleanupPendingJobs(items);
      _queueMgr.resetQueueProcess(msHost.getId());
      _jobDao.resetJobProcess(msHost.getId(),BaseCmd.INTERNAL_ERROR,getSerializedErrorMessage(""String_Node_Str""));
      txn.commit();
    }
 catch (    Throwable e) {
      s_logger.warn(""String_Node_Str"",e);
      txn.rollback();
    }
 finally {
      txn.close();
    }
  }
}"
89332,"private void reallyRun(){
  try {
    s_logger.trace(""String_Node_Str"");
    Date cutTime=new Date(DateUtil.currentGMTTime().getTime() - _jobExpireSeconds * 1000);
    List<AsyncJobVO> l=_jobDao.getExpiredJobs(cutTime,100);
    if (l != null && l.size() > 0) {
      for (      AsyncJobVO job : l) {
        _jobDao.expunge(job.getId());
      }
    }
    List<SyncQueueItemVO> blockItems=_queueMgr.getBlockedQueueItems(_jobCancelThresholdSeconds * 1000,false);
    if (blockItems != null && blockItems.size() > 0) {
      for (      SyncQueueItemVO item : blockItems) {
        if (item.getContentType().equalsIgnoreCase(""String_Node_Str"")) {
          completeAsyncJob(item.getContentId(),2,0,getResetResultMessage(""String_Node_Str""));
        }
        _queueMgr.purgeItem(item.getId());
      }
    }
    s_logger.trace(""String_Node_Str"");
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
  }
 finally {
    StackMaid.current().exitCleanup();
  }
}","private void reallyRun(){
  try {
    s_logger.trace(""String_Node_Str"");
    Date cutTime=new Date(DateUtil.currentGMTTime().getTime() - _jobExpireSeconds * 1000);
    List<AsyncJobVO> l=_jobDao.getExpiredJobs(cutTime,100);
    if (l != null && l.size() > 0) {
      for (      AsyncJobVO job : l) {
        _jobDao.expunge(job.getId());
      }
    }
    List<SyncQueueItemVO> blockItems=_queueMgr.getBlockedQueueItems(_jobCancelThresholdSeconds * 1000,false);
    if (blockItems != null && blockItems.size() > 0) {
      for (      SyncQueueItemVO item : blockItems) {
        if (item.getContentType().equalsIgnoreCase(""String_Node_Str"")) {
          completeAsyncJob(item.getContentId(),2,0,getResetResultResponse(""String_Node_Str""));
        }
        _queueMgr.purgeItem(item.getId());
      }
    }
    s_logger.trace(""String_Node_Str"");
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
  }
 finally {
    StackMaid.current().exitCleanup();
  }
}"
89333,"private void cleanupPendingJobs(List<SyncQueueItemVO> l){
  if (l != null && l.size() > 0) {
    for (    SyncQueueItemVO item : l) {
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + item.toString());
      }
      String contentType=item.getContentType();
      if (contentType != null && contentType.equals(""String_Node_Str"")) {
        Long jobId=item.getContentId();
        if (jobId != null) {
          s_logger.warn(""String_Node_Str"" + jobId);
          completeAsyncJob(jobId,AsyncJobResult.STATUS_FAILED,0,getResetResultMessage(""String_Node_Str""));
        }
      }
      _queueMgr.purgeItem(item.getId());
    }
  }
}","private void cleanupPendingJobs(List<SyncQueueItemVO> l){
  if (l != null && l.size() > 0) {
    for (    SyncQueueItemVO item : l) {
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + item.toString());
      }
      String contentType=item.getContentType();
      if (contentType != null && contentType.equals(""String_Node_Str"")) {
        Long jobId=item.getContentId();
        if (jobId != null) {
          s_logger.warn(""String_Node_Str"" + jobId);
          completeAsyncJob(jobId,AsyncJobResult.STATUS_FAILED,0,getResetResultResponse(""String_Node_Str""));
        }
      }
      _queueMgr.purgeItem(item.getId());
    }
  }
}"
89334,"@DB private Runnable getGCTask(){
  return new Runnable(){
    @Override public void run(){
      GlobalLock scanLock=GlobalLock.getInternLock(""String_Node_Str"");
      try {
        if (scanLock.lock(ACQUIRE_GLOBAL_LOCK_TIMEOUT_FOR_COOPERATION)) {
          try {
            reallyRun();
          }
  finally {
            scanLock.unlock();
          }
        }
      }
  finally {
        scanLock.releaseRef();
      }
    }
    private void reallyRun(){
      try {
        s_logger.trace(""String_Node_Str"");
        Date cutTime=new Date(DateUtil.currentGMTTime().getTime() - _jobExpireSeconds * 1000);
        List<AsyncJobVO> l=_jobDao.getExpiredJobs(cutTime,100);
        if (l != null && l.size() > 0) {
          for (          AsyncJobVO job : l) {
            _jobDao.expunge(job.getId());
          }
        }
        List<SyncQueueItemVO> blockItems=_queueMgr.getBlockedQueueItems(_jobCancelThresholdSeconds * 1000,false);
        if (blockItems != null && blockItems.size() > 0) {
          for (          SyncQueueItemVO item : blockItems) {
            if (item.getContentType().equalsIgnoreCase(""String_Node_Str"")) {
              completeAsyncJob(item.getContentId(),2,0,getResetResultMessage(""String_Node_Str""));
            }
            _queueMgr.purgeItem(item.getId());
          }
        }
        s_logger.trace(""String_Node_Str"");
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"",e);
      }
 finally {
        StackMaid.current().exitCleanup();
      }
    }
  }
;
}","@DB private Runnable getGCTask(){
  return new Runnable(){
    @Override public void run(){
      GlobalLock scanLock=GlobalLock.getInternLock(""String_Node_Str"");
      try {
        if (scanLock.lock(ACQUIRE_GLOBAL_LOCK_TIMEOUT_FOR_COOPERATION)) {
          try {
            reallyRun();
          }
  finally {
            scanLock.unlock();
          }
        }
      }
  finally {
        scanLock.releaseRef();
      }
    }
    private void reallyRun(){
      try {
        s_logger.trace(""String_Node_Str"");
        Date cutTime=new Date(DateUtil.currentGMTTime().getTime() - _jobExpireSeconds * 1000);
        List<AsyncJobVO> l=_jobDao.getExpiredJobs(cutTime,100);
        if (l != null && l.size() > 0) {
          for (          AsyncJobVO job : l) {
            _jobDao.expunge(job.getId());
          }
        }
        List<SyncQueueItemVO> blockItems=_queueMgr.getBlockedQueueItems(_jobCancelThresholdSeconds * 1000,false);
        if (blockItems != null && blockItems.size() > 0) {
          for (          SyncQueueItemVO item : blockItems) {
            if (item.getContentType().equalsIgnoreCase(""String_Node_Str"")) {
              completeAsyncJob(item.getContentId(),2,0,getResetResultResponse(""String_Node_Str""));
            }
            _queueMgr.purgeItem(item.getId());
          }
        }
        s_logger.trace(""String_Node_Str"");
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"",e);
      }
 finally {
        StackMaid.current().exitCleanup();
      }
    }
  }
;
}"
89335,"@Override public boolean start(){
  try {
    List<SyncQueueItemVO> l=_queueMgr.getActiveQueueItems(getMsid(),false);
    cleanupPendingJobs(l);
    _queueMgr.resetQueueProcess(getMsid());
    _jobDao.resetJobProcess(getMsid(),BaseCmd.INTERNAL_ERROR,getResetResultMessage(""String_Node_Str""));
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
  _heartbeatScheduler.scheduleAtFixedRate(getHeartbeatTask(),HEARTBEAT_INTERVAL,HEARTBEAT_INTERVAL,TimeUnit.MILLISECONDS);
  _heartbeatScheduler.scheduleAtFixedRate(getGCTask(),GC_INTERVAL,GC_INTERVAL,TimeUnit.MILLISECONDS);
  return true;
}","@Override public boolean start(){
  try {
    List<SyncQueueItemVO> l=_queueMgr.getActiveQueueItems(getMsid(),false);
    cleanupPendingJobs(l);
    _queueMgr.resetQueueProcess(getMsid());
    _jobDao.resetJobProcess(getMsid(),BaseCmd.INTERNAL_ERROR,getSerializedErrorMessage(""String_Node_Str""));
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
  _heartbeatScheduler.scheduleAtFixedRate(getHeartbeatTask(),HEARTBEAT_INTERVAL,HEARTBEAT_INTERVAL,TimeUnit.MILLISECONDS);
  _heartbeatScheduler.scheduleAtFixedRate(getGCTask(),GC_INTERVAL,GC_INTERVAL,TimeUnit.MILLISECONDS);
  return true;
}"
89336,"private Long extract(Account caller,Long templateId,String url,Long zoneId,String mode,Long eventId,boolean isISO,AsyncJobVO job,AsyncJobManager mgr){
  String desc=""String_Node_Str"";
  if (isISO) {
    desc=""String_Node_Str"";
  }
  eventId=eventId == null ? 0 : eventId;
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ templateId);
  }
  if (template.getTemplateType() == Storage.TemplateType.SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
  if (template.getTemplateType() == Storage.TemplateType.PERHOST) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
  if (isISO) {
    if (template.getFormat() != ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (template.getFormat() == ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (_dcDao.findById(zoneId) == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!template.isExtractable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + templateId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,AccessType.ModifyEntry,template);
  List<HostVO> sservers=_storageMgr.getSecondaryStorageHosts(zoneId);
  VMTemplateHostVO tmpltHostRef=null;
  if (sservers != null) {
    for (    HostVO secondaryStorageHost : sservers) {
      tmpltHostRef=_tmpltHostDao.findByHostTemplate(secondaryStorageHost.getId(),templateId);
      if (tmpltHostRef != null) {
        if (tmpltHostRef.getDownloadState() != com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
          tmpltHostRef=null;
        }
 else {
          break;
        }
      }
    }
  }
  if (tmpltHostRef == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str"");
  }
  Upload.Mode extractMode;
  if (mode == null || (!mode.equals(Upload.Mode.FTP_UPLOAD.toString()) && !mode.equals(Upload.Mode.HTTP_DOWNLOAD.toString()))) {
    throw new InvalidParameterValueException(""String_Node_Str"" + Upload.Mode.values());
  }
 else {
    extractMode=mode.equals(Upload.Mode.FTP_UPLOAD.toString()) ? Upload.Mode.FTP_UPLOAD : Upload.Mode.HTTP_DOWNLOAD;
  }
  if (extractMode == Upload.Mode.FTP_UPLOAD) {
    URI uri=null;
    try {
      uri=new URI(url);
      if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase(""String_Node_Str""))) {
        throw new InvalidParameterValueException(""String_Node_Str"" + url);
      }
    }
 catch (    Exception ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + url);
    }
    String host=uri.getHost();
    try {
      InetAddress hostAddr=InetAddress.getByName(host);
      if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (hostAddr instanceof Inet6Address) {
        throw new InvalidParameterValueException(""String_Node_Str"" + hostAddr.getHostAddress() + ""String_Node_Str"");
      }
    }
 catch (    UnknownHostException uhe) {
      throw new InvalidParameterValueException(""String_Node_Str"" + host);
    }
    if (_uploadMonitor.isTypeUploadInProgress(templateId,isISO ? Type.ISO : Type.TEMPLATE)) {
      throw new IllegalArgumentException(template.getName() + ""String_Node_Str"");
    }
    return _uploadMonitor.extractTemplate(template,url,tmpltHostRef,zoneId,eventId,job.getId(),mgr);
  }
  UploadVO vo=_uploadMonitor.createEntityDownloadURL(template,tmpltHostRef,zoneId,eventId);
  if (vo != null) {
    return vo.getId();
  }
 else {
    return null;
  }
}","private Long extract(Account caller,Long templateId,String url,Long zoneId,String mode,Long eventId,boolean isISO,AsyncJobVO job,AsyncJobManager mgr){
  String desc=Upload.Type.TEMPLATE.toString();
  if (isISO) {
    desc=Upload.Type.ISO.toString();
  }
  eventId=eventId == null ? 0 : eventId;
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ templateId);
  }
  if (template.getTemplateType() == Storage.TemplateType.SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
 else   if (template.getTemplateType() == Storage.TemplateType.PERHOST) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str""+ template.getName()+ ""String_Node_Str"");
  }
  if (isISO) {
    if (template.getFormat() != ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (template.getFormat() == ImageFormat.ISO) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  if (_dcDao.findById(zoneId) == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!template.isExtractable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + templateId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,AccessType.ModifyEntry,template);
  List<HostVO> sservers=_storageMgr.getSecondaryStorageHosts(zoneId);
  VMTemplateHostVO tmpltHostRef=null;
  if (sservers != null) {
    for (    HostVO secondaryStorageHost : sservers) {
      tmpltHostRef=_tmpltHostDao.findByHostTemplate(secondaryStorageHost.getId(),templateId);
      if (tmpltHostRef != null) {
        if (tmpltHostRef.getDownloadState() != com.cloud.storage.VMTemplateStorageResourceAssoc.Status.DOWNLOADED) {
          tmpltHostRef=null;
        }
 else {
          break;
        }
      }
    }
  }
  if (tmpltHostRef == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + desc + ""String_Node_Str"");
  }
  Upload.Mode extractMode;
  if (mode == null || (!mode.equalsIgnoreCase(Upload.Mode.FTP_UPLOAD.toString()) && !mode.equalsIgnoreCase(Upload.Mode.HTTP_DOWNLOAD.toString()))) {
    throw new InvalidParameterValueException(""String_Node_Str"" + Upload.Mode.FTP_UPLOAD + ""String_Node_Str""+ Upload.Mode.HTTP_DOWNLOAD);
  }
 else {
    extractMode=mode.equalsIgnoreCase(Upload.Mode.FTP_UPLOAD.toString()) ? Upload.Mode.FTP_UPLOAD : Upload.Mode.HTTP_DOWNLOAD;
  }
  if (extractMode == Upload.Mode.FTP_UPLOAD) {
    URI uri=null;
    try {
      uri=new URI(url);
      if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase(""String_Node_Str""))) {
        throw new InvalidParameterValueException(""String_Node_Str"" + url);
      }
    }
 catch (    Exception ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + url);
    }
    String host=uri.getHost();
    try {
      InetAddress hostAddr=InetAddress.getByName(host);
      if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (hostAddr instanceof Inet6Address) {
        throw new InvalidParameterValueException(""String_Node_Str"" + hostAddr.getHostAddress() + ""String_Node_Str"");
      }
    }
 catch (    UnknownHostException uhe) {
      throw new InvalidParameterValueException(""String_Node_Str"" + host);
    }
    if (_uploadMonitor.isTypeUploadInProgress(templateId,isISO ? Type.ISO : Type.TEMPLATE)) {
      throw new IllegalArgumentException(template.getName() + ""String_Node_Str"");
    }
    return _uploadMonitor.extractTemplate(template,url,tmpltHostRef,zoneId,eventId,job.getId(),mgr);
  }
  UploadVO vo=_uploadMonitor.createEntityDownloadURL(template,tmpltHostRef,zoneId,eventId);
  if (vo != null) {
    return vo.getId();
  }
 else {
    return null;
  }
}"
89337,"@Override public Integer getNetworkRate(long networkId,Long vmId){
  VMInstanceVO vm=null;
  if (vmId != null) {
    vm=_vmDao.findById(vmId);
  }
  Network network=getNetwork(networkId);
  NetworkOffering networkOffering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
  boolean isUserVmsDefaultNetwork=false;
  boolean isDomRGuestOrPublicNetwork=false;
  if (vm != null) {
    if (vm.getType() == Type.User && network.isDefault()) {
      isUserVmsDefaultNetwork=true;
    }
 else     if (vm.getType() == Type.DomainRouter && networkOffering.getTrafficType() == TrafficType.Public && networkOffering.getGuestType() == null) {
      isDomRGuestOrPublicNetwork=true;
    }
  }
  if (isUserVmsDefaultNetwork || isDomRGuestOrPublicNetwork) {
    return _configMgr.getServiceOfferingNetworkRate(vm.getServiceOfferingId());
  }
 else {
    return _configMgr.getNetworkOfferingNetworkRate(networkOffering.getId());
  }
}","@Override public Integer getNetworkRate(long networkId,Long vmId){
  VMInstanceVO vm=null;
  if (vmId != null) {
    vm=_vmDao.findById(vmId);
  }
  Network network=getNetwork(networkId);
  NetworkOffering ntwkOff=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
  boolean isUserVmsDefaultNetwork=false;
  boolean isDomRGuestOrPublicNetwork=false;
  if (vm != null) {
    if (vm.getType() == Type.User && network.isDefault()) {
      isUserVmsDefaultNetwork=true;
    }
 else     if (vm.getType() == Type.DomainRouter && ((ntwkOff.getTrafficType() == TrafficType.Public && ntwkOff.getGuestType() == null) || (ntwkOff.getGuestType() != null && ntwkOff.getTrafficType() == TrafficType.Guest))) {
      isDomRGuestOrPublicNetwork=true;
    }
  }
  if (isUserVmsDefaultNetwork || isDomRGuestOrPublicNetwork) {
    return _configMgr.getServiceOfferingNetworkRate(vm.getServiceOfferingId());
  }
 else {
    return _configMgr.getNetworkOfferingNetworkRate(ntwkOff.getId());
  }
}"
89338,"public static Pair<ManagedObjectReference,String> prepareGuestNetwork(String vSwitchName,HostMO hostMo,String vlanId,Integer networkRateMbps,Integer networkRateMulticastMbps,long timeOutMs,boolean syncPeerHosts) throws Exception {
  HostVirtualSwitch vSwitch;
  vSwitch=hostMo.getHostVirtualSwitchByName(vSwitchName);
  if (vSwitch == null) {
    String msg=""String_Node_Str"";
    s_logger.error(msg);
    throw new Exception(msg);
  }
  boolean createGCTag=false;
  String networkName;
  Integer vid=null;
  if (vlanId != null && !UNTAGGED_VLAN_NAME.equalsIgnoreCase(vlanId)) {
    createGCTag=true;
    vid=Integer.parseInt(vlanId);
  }
  networkName=composeCloudNetworkName(""String_Node_Str"",vlanId,networkRateMbps,vSwitchName);
  HostNetworkTrafficShapingPolicy shapingPolicy=null;
  if (networkRateMbps != null && networkRateMbps.intValue() > 0) {
    shapingPolicy=new HostNetworkTrafficShapingPolicy();
    shapingPolicy.setEnabled(true);
    shapingPolicy.setAverageBandwidth((long)networkRateMbps.intValue() * 1024L * 1024L);
    shapingPolicy.setPeakBandwidth((long)(shapingPolicy.getAverageBandwidth() * 1.5));
    shapingPolicy.setBurstSize(5 * shapingPolicy.getAverageBandwidth() / 8);
  }
  if (!hostMo.hasPortGroup(vSwitch,networkName)) {
    hostMo.createPortGroup(vSwitch,networkName,vid,shapingPolicy);
  }
 else {
    hostMo.updatePortGroup(vSwitch,networkName,vid,shapingPolicy);
  }
  ManagedObjectReference morNetwork=waitForNetworkReady(hostMo,networkName,timeOutMs);
  if (morNetwork == null) {
    String msg=""String_Node_Str"" + networkName;
    s_logger.error(msg);
    throw new Exception(msg);
  }
  if (createGCTag) {
    NetworkMO networkMo=new NetworkMO(hostMo.getContext(),morNetwork);
    networkMo.setCustomFieldValue(CustomFieldConstants.CLOUD_GC,""String_Node_Str"");
  }
  if (syncPeerHosts) {
    ManagedObjectReference morParent=hostMo.getParentMor();
    if (morParent != null && morParent.getType().equals(""String_Node_Str"")) {
      GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"" + morParent.get_value());
      try {
        if (lock.lock(DEFAULT_LOCK_TIMEOUT_SECONDS)) {
          try {
            ManagedObjectReference[] hosts=(ManagedObjectReference[])hostMo.getContext().getServiceUtil().getDynamicProperty(morParent,""String_Node_Str"");
            if (hosts != null) {
              for (              ManagedObjectReference otherHost : hosts) {
                if (!otherHost.get_value().equals(hostMo.getMor().get_value())) {
                  HostMO otherHostMo=new HostMO(hostMo.getContext(),otherHost);
                  try {
                    if (s_logger.isDebugEnabled())                     s_logger.debug(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                    prepareGuestNetwork(vSwitchName,otherHostMo,vlanId,networkRateMbps,networkRateMulticastMbps,timeOutMs,false);
                  }
 catch (                  Exception e) {
                    s_logger.warn(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                  }
                }
              }
            }
          }
  finally {
            lock.unlock();
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + vlanId);
        }
      }
  finally {
        lock.releaseRef();
      }
    }
  }
  s_logger.info(""String_Node_Str"" + networkName + ""String_Node_Str""+ vSwitchName);
  return new Pair<ManagedObjectReference,String>(morNetwork,networkName);
}","public static Pair<ManagedObjectReference,String> prepareGuestNetwork(String vSwitchName,HostMO hostMo,String vlanId,Integer networkRateMbps,Integer networkRateMulticastMbps,long timeOutMs,boolean syncPeerHosts) throws Exception {
  HostVirtualSwitch vSwitch;
  vSwitch=hostMo.getHostVirtualSwitchByName(vSwitchName);
  if (vSwitch == null) {
    String msg=""String_Node_Str"";
    s_logger.error(msg);
    throw new Exception(msg);
  }
  boolean createGCTag=false;
  String networkName;
  Integer vid=null;
  if (vlanId != null && !UNTAGGED_VLAN_NAME.equalsIgnoreCase(vlanId)) {
    createGCTag=true;
    vid=Integer.parseInt(vlanId);
  }
  networkName=composeCloudNetworkName(""String_Node_Str"",vlanId,networkRateMbps,vSwitchName);
  HostNetworkTrafficShapingPolicy shapingPolicy=null;
  if (networkRateMbps != null && networkRateMbps.intValue() > 0) {
    shapingPolicy=new HostNetworkTrafficShapingPolicy();
    shapingPolicy.setEnabled(true);
    shapingPolicy.setAverageBandwidth((long)networkRateMbps.intValue() * 1024L * 1024L);
    shapingPolicy.setPeakBandwidth((long)(shapingPolicy.getAverageBandwidth() * 1.5));
    shapingPolicy.setBurstSize(5 * shapingPolicy.getAverageBandwidth() / 8);
  }
  boolean bWaitPortGroupReady=false;
  if (!hostMo.hasPortGroup(vSwitch,networkName)) {
    hostMo.createPortGroup(vSwitch,networkName,vid,shapingPolicy);
    bWaitPortGroupReady=true;
  }
 else {
    HostPortGroupSpec spec=hostMo.getPortGroupSpec(networkName);
    if (!isSpecMatch(spec,vid,shapingPolicy)) {
      hostMo.updatePortGroup(vSwitch,networkName,vid,shapingPolicy);
      bWaitPortGroupReady=true;
    }
  }
  ManagedObjectReference morNetwork;
  if (bWaitPortGroupReady)   morNetwork=waitForNetworkReady(hostMo,networkName,timeOutMs);
 else   morNetwork=hostMo.getNetworkMor(networkName);
  if (morNetwork == null) {
    String msg=""String_Node_Str"" + networkName;
    s_logger.error(msg);
    throw new Exception(msg);
  }
  if (createGCTag) {
    NetworkMO networkMo=new NetworkMO(hostMo.getContext(),morNetwork);
    networkMo.setCustomFieldValue(CustomFieldConstants.CLOUD_GC,""String_Node_Str"");
  }
  if (syncPeerHosts) {
    ManagedObjectReference morParent=hostMo.getParentMor();
    if (morParent != null && morParent.getType().equals(""String_Node_Str"")) {
      GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"" + morParent.get_value());
      try {
        if (lock.lock(DEFAULT_LOCK_TIMEOUT_SECONDS)) {
          try {
            ManagedObjectReference[] hosts=(ManagedObjectReference[])hostMo.getContext().getServiceUtil().getDynamicProperty(morParent,""String_Node_Str"");
            if (hosts != null) {
              for (              ManagedObjectReference otherHost : hosts) {
                if (!otherHost.get_value().equals(hostMo.getMor().get_value())) {
                  HostMO otherHostMo=new HostMO(hostMo.getContext(),otherHost);
                  try {
                    if (s_logger.isDebugEnabled())                     s_logger.debug(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                    prepareGuestNetwork(vSwitchName,otherHostMo,vlanId,networkRateMbps,networkRateMulticastMbps,timeOutMs,false);
                  }
 catch (                  Exception e) {
                    s_logger.warn(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                  }
                }
              }
            }
          }
  finally {
            lock.unlock();
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + vlanId);
        }
      }
  finally {
        lock.releaseRef();
      }
    }
  }
  s_logger.info(""String_Node_Str"" + networkName + ""String_Node_Str""+ vSwitchName);
  return new Pair<ManagedObjectReference,String>(morNetwork,networkName);
}"
89339,"public static synchronized Pair<ManagedObjectReference,String> preparePublicNetwork(String vSwitchName,HostMO hostMo,String vlanId,Integer networkRateMbps,Integer networkRateMulticastMbps,long timeOutMs,boolean syncPeerHosts) throws Exception {
  HostVirtualSwitch vSwitch=hostMo.getHostVirtualSwitchByName(vSwitchName);
  if (vSwitch == null) {
    String msg=""String_Node_Str"";
    s_logger.error(msg);
    throw new Exception(msg);
  }
  boolean createGCTag=false;
  String networkName;
  Integer vid=null;
  if (vlanId != null && !UNTAGGED_VLAN_NAME.equalsIgnoreCase(vlanId)) {
    createGCTag=true;
    vid=Integer.parseInt(vlanId);
  }
  networkName=composeCloudNetworkName(""String_Node_Str"",vlanId,networkRateMbps,vSwitchName);
  HostNetworkTrafficShapingPolicy shapingPolicy=null;
  if (networkRateMbps != null && networkRateMbps.intValue() > 0) {
    shapingPolicy=new HostNetworkTrafficShapingPolicy();
    shapingPolicy.setEnabled(true);
    shapingPolicy.setAverageBandwidth((long)networkRateMbps.intValue() * 1024L * 1024L);
    shapingPolicy.setPeakBandwidth((long)(shapingPolicy.getAverageBandwidth() * 1.5));
    shapingPolicy.setBurstSize(5 * shapingPolicy.getAverageBandwidth() / 8);
  }
  if (!hostMo.hasPortGroup(vSwitch,networkName)) {
    hostMo.createPortGroup(vSwitch,networkName,vid,shapingPolicy);
  }
 else {
    hostMo.updatePortGroup(vSwitch,networkName,vid,shapingPolicy);
  }
  ManagedObjectReference morNetwork=waitForNetworkReady(hostMo,networkName,timeOutMs);
  if (morNetwork == null) {
    String msg=""String_Node_Str"" + vSwitchName;
    s_logger.error(msg);
    throw new Exception(msg);
  }
  if (createGCTag) {
    NetworkMO networkMo=new NetworkMO(hostMo.getContext(),morNetwork);
    networkMo.setCustomFieldValue(CustomFieldConstants.CLOUD_GC,""String_Node_Str"");
  }
  if (syncPeerHosts) {
    ManagedObjectReference morParent=hostMo.getParentMor();
    if (morParent != null && morParent.getType().equals(""String_Node_Str"")) {
      GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"" + morParent.get_value());
      try {
        if (lock.lock(DEFAULT_LOCK_TIMEOUT_SECONDS)) {
          try {
            ManagedObjectReference[] hosts=(ManagedObjectReference[])hostMo.getContext().getServiceUtil().getDynamicProperty(morParent,""String_Node_Str"");
            if (hosts != null) {
              for (              ManagedObjectReference otherHost : hosts) {
                if (!otherHost.get_value().equals(hostMo.getMor().get_value())) {
                  HostMO otherHostMo=new HostMO(hostMo.getContext(),otherHost);
                  try {
                    if (s_logger.isDebugEnabled())                     s_logger.debug(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                    preparePublicNetwork(vSwitchName,otherHostMo,vlanId,networkRateMbps,networkRateMulticastMbps,timeOutMs,false);
                  }
 catch (                  Exception e) {
                    s_logger.warn(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                  }
                }
              }
            }
          }
  finally {
            lock.unlock();
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + vlanId);
        }
      }
  finally {
        lock.releaseRef();
      }
    }
  }
  s_logger.info(""String_Node_Str"" + networkName + ""String_Node_Str""+ vSwitchName);
  return new Pair<ManagedObjectReference,String>(morNetwork,networkName);
}","public static synchronized Pair<ManagedObjectReference,String> preparePublicNetwork(String vSwitchName,HostMO hostMo,String vlanId,Integer networkRateMbps,Integer networkRateMulticastMbps,long timeOutMs,boolean syncPeerHosts) throws Exception {
  HostVirtualSwitch vSwitch=hostMo.getHostVirtualSwitchByName(vSwitchName);
  if (vSwitch == null) {
    String msg=""String_Node_Str"";
    s_logger.error(msg);
    throw new Exception(msg);
  }
  boolean createGCTag=false;
  String networkName;
  Integer vid=null;
  if (vlanId != null && !UNTAGGED_VLAN_NAME.equalsIgnoreCase(vlanId)) {
    createGCTag=true;
    vid=Integer.parseInt(vlanId);
  }
  networkName=composeCloudNetworkName(""String_Node_Str"",vlanId,networkRateMbps,vSwitchName);
  HostNetworkTrafficShapingPolicy shapingPolicy=null;
  if (networkRateMbps != null && networkRateMbps.intValue() > 0) {
    shapingPolicy=new HostNetworkTrafficShapingPolicy();
    shapingPolicy.setEnabled(true);
    shapingPolicy.setAverageBandwidth((long)networkRateMbps.intValue() * 1024L * 1024L);
    shapingPolicy.setPeakBandwidth((long)(shapingPolicy.getAverageBandwidth() * 1.5));
    shapingPolicy.setBurstSize(5 * shapingPolicy.getAverageBandwidth() / 8);
  }
  boolean bWaitPortGroupReady=false;
  if (!hostMo.hasPortGroup(vSwitch,networkName)) {
    hostMo.createPortGroup(vSwitch,networkName,vid,shapingPolicy);
    bWaitPortGroupReady=true;
  }
 else {
    HostPortGroupSpec spec=hostMo.getPortGroupSpec(networkName);
    if (!isSpecMatch(spec,vid,shapingPolicy)) {
      hostMo.updatePortGroup(vSwitch,networkName,vid,shapingPolicy);
      bWaitPortGroupReady=true;
    }
  }
  ManagedObjectReference morNetwork;
  if (bWaitPortGroupReady)   morNetwork=waitForNetworkReady(hostMo,networkName,timeOutMs);
 else   morNetwork=hostMo.getNetworkMor(networkName);
  if (morNetwork == null) {
    String msg=""String_Node_Str"" + vSwitchName;
    s_logger.error(msg);
    throw new Exception(msg);
  }
  if (createGCTag) {
    NetworkMO networkMo=new NetworkMO(hostMo.getContext(),morNetwork);
    networkMo.setCustomFieldValue(CustomFieldConstants.CLOUD_GC,""String_Node_Str"");
  }
  if (syncPeerHosts) {
    ManagedObjectReference morParent=hostMo.getParentMor();
    if (morParent != null && morParent.getType().equals(""String_Node_Str"")) {
      GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"" + morParent.get_value());
      try {
        if (lock.lock(DEFAULT_LOCK_TIMEOUT_SECONDS)) {
          try {
            ManagedObjectReference[] hosts=(ManagedObjectReference[])hostMo.getContext().getServiceUtil().getDynamicProperty(morParent,""String_Node_Str"");
            if (hosts != null) {
              for (              ManagedObjectReference otherHost : hosts) {
                if (!otherHost.get_value().equals(hostMo.getMor().get_value())) {
                  HostMO otherHostMo=new HostMO(hostMo.getContext(),otherHost);
                  try {
                    if (s_logger.isDebugEnabled())                     s_logger.debug(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                    preparePublicNetwork(vSwitchName,otherHostMo,vlanId,networkRateMbps,networkRateMulticastMbps,timeOutMs,false);
                  }
 catch (                  Exception e) {
                    s_logger.warn(""String_Node_Str"" + vlanId + ""String_Node_Str""+ otherHostMo.getHostName());
                  }
                }
              }
            }
          }
  finally {
            lock.unlock();
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + vlanId);
        }
      }
  finally {
        lock.releaseRef();
      }
    }
  }
  s_logger.info(""String_Node_Str"" + networkName + ""String_Node_Str""+ vSwitchName);
  return new Pair<ManagedObjectReference,String>(morNetwork,networkName);
}"
89340,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  _url=(String)params.get(""String_Node_Str"");
  _username=(String)params.get(""String_Node_Str"");
  _password=(String)params.get(""String_Node_Str"");
  _dcId=(String)params.get(""String_Node_Str"");
  _pod=(String)params.get(""String_Node_Str"");
  _cluster=(String)params.get(""String_Node_Str"");
  _guid=(String)params.get(""String_Node_Str"");
  String value=(String)params.get(""String_Node_Str"");
  if (value != null)   _cpuOverprovisioningFactor=Float.parseFloat(value);
  value=(String)params.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str""))   _reserveCpu=true;
  String[] tokens=_guid.split(""String_Node_Str"");
  _vCenterAddress=tokens[1];
  _morHyperHost=new ManagedObjectReference();
  String[] hostTokens=tokens[0].split(""String_Node_Str"");
  _morHyperHost.setType(hostTokens[0]);
  _morHyperHost.set_value(hostTokens[1]);
  VmwareContext context=getServiceContext();
  try {
    VmwareManager mgr=context.getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
    mgr.setupResourceStartupParams(params);
    CustomFieldsManagerMO cfmMo=new CustomFieldsManagerMO(context,context.getServiceContent().getCustomFieldsManager());
    cfmMo.ensureCustomFieldDef(""String_Node_Str"",CustomFieldConstants.CLOUD_UUID);
    cfmMo.ensureCustomFieldDef(""String_Node_Str"",CustomFieldConstants.CLOUD_GC);
    cfmMo.ensureCustomFieldDef(""String_Node_Str"",CustomFieldConstants.CLOUD_UUID);
    VmwareHypervisorHost hostMo=this.getHyperHost(context);
    _hostName=hostMo.getHyperHostName();
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"",e);
  }
  _privateNetworkVSwitchName=(String)params.get(""String_Node_Str"");
  _publicNetworkVSwitchName=(String)params.get(""String_Node_Str"");
  _guestNetworkVSwitchName=(String)params.get(""String_Node_Str"");
  s_logger.info(""String_Node_Str"" + _privateNetworkVSwitchName + ""String_Node_Str""+ _publicNetworkVSwitchName+ ""String_Node_Str""+ _guestNetworkVSwitchName);
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  _url=(String)params.get(""String_Node_Str"");
  _username=(String)params.get(""String_Node_Str"");
  _password=(String)params.get(""String_Node_Str"");
  _dcId=(String)params.get(""String_Node_Str"");
  _pod=(String)params.get(""String_Node_Str"");
  _cluster=(String)params.get(""String_Node_Str"");
  _guid=(String)params.get(""String_Node_Str"");
  String value=(String)params.get(""String_Node_Str"");
  if (value != null)   _cpuOverprovisioningFactor=Float.parseFloat(value);
  value=(String)params.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str""))   _reserveCpu=true;
  value=(String)params.get(""String_Node_Str"");
  if (value != null)   _memOverprovisioningFactor=Float.parseFloat(value);
  value=(String)params.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str""))   _reserveMem=true;
  String[] tokens=_guid.split(""String_Node_Str"");
  _vCenterAddress=tokens[1];
  _morHyperHost=new ManagedObjectReference();
  String[] hostTokens=tokens[0].split(""String_Node_Str"");
  _morHyperHost.setType(hostTokens[0]);
  _morHyperHost.set_value(hostTokens[1]);
  VmwareContext context=getServiceContext();
  try {
    VmwareManager mgr=context.getStockObject(VmwareManager.CONTEXT_STOCK_NAME);
    mgr.setupResourceStartupParams(params);
    CustomFieldsManagerMO cfmMo=new CustomFieldsManagerMO(context,context.getServiceContent().getCustomFieldsManager());
    cfmMo.ensureCustomFieldDef(""String_Node_Str"",CustomFieldConstants.CLOUD_UUID);
    cfmMo.ensureCustomFieldDef(""String_Node_Str"",CustomFieldConstants.CLOUD_GC);
    cfmMo.ensureCustomFieldDef(""String_Node_Str"",CustomFieldConstants.CLOUD_UUID);
    VmwareHypervisorHost hostMo=this.getHyperHost(context);
    _hostName=hostMo.getHyperHostName();
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"",e);
  }
  _privateNetworkVSwitchName=(String)params.get(""String_Node_Str"");
  _publicNetworkVSwitchName=(String)params.get(""String_Node_Str"");
  _guestNetworkVSwitchName=(String)params.get(""String_Node_Str"");
  s_logger.info(""String_Node_Str"" + _privateNetworkVSwitchName + ""String_Node_Str""+ _publicNetworkVSwitchName+ ""String_Node_Str""+ _guestNetworkVSwitchName);
  return true;
}"
89341,"@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  Boolean isShared=cmd.getIsShared();
  Boolean isDefault=cmd.isDefault();
  Long accountId=null;
  String path=null;
  Long sharedNetworkDomainId=null;
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (_accountMgr.isAdmin(caller.getType())) {
    if (domainId != null) {
      DomainVO domain=_domainDao.findById(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      _accountMgr.checkAccess(caller,domain);
      if (accountName != null) {
        Account owner=_accountMgr.getActiveAccount(accountName,domainId);
        if (owner == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=owner.getId();
      }
    }
    DomainVO domain=_domainDao.findById(caller.getDomainId());
    path=domain.getPath();
  }
 else {
    accountId=caller.getId();
  }
  if ((isSystem == null || !isSystem) && (isShared == null || isShared)) {
    sharedNetworkDomainId=domainId;
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  if (sharedNetworkDomainId != null) {
    SearchBuilder<NetworkDomainVO> domainNetworkSearch=_networkDomainDao.createSearchBuilder();
    sb.join(""String_Node_Str"",domainNetworkSearch,sb.entity().getId(),domainNetworkSearch.entity().getNetworkId(),JoinBuilder.JoinType.LEFTOUTER);
  }
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (isSystem == null || !isSystem) {
    List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
    if (sharedNetworkDomainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,sharedNetworkDomainId));
    }
 else {
      SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
      sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
      networksToReturn.addAll(listDomainSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,path));
    }
    if (accountId != null || (domainId == null && accountName == null)) {
      networksToReturn.addAll(listAccountSpecificAndZoneLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,accountId,path));
    }
    return networksToReturn;
  }
 else {
    return _networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter);
  }
}","@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  Boolean isShared=cmd.getIsShared();
  Boolean isDefault=cmd.isDefault();
  Long accountId=null;
  String path=null;
  Long sharedNetworkDomainId=null;
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DomainVO domain=null;
  if (domainId != null) {
    domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,domain);
  }
  if (_accountMgr.isAdmin(caller.getType())) {
    if (domainId != null) {
      if (accountName != null) {
        Account owner=_accountMgr.getActiveAccount(accountName,domainId);
        if (owner == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=owner.getId();
      }
    }
  }
 else {
    accountId=caller.getId();
  }
  path=_domainDao.findById(caller.getDomainId()).getPath();
  if (domainId == null) {
    domainId=caller.getDomainId();
  }
  if ((isSystem == null || !isSystem) && (isShared == null || isShared)) {
    sharedNetworkDomainId=domainId;
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  if (sharedNetworkDomainId != null) {
    SearchBuilder<NetworkDomainVO> domainNetworkSearch=_networkDomainDao.createSearchBuilder();
    sb.join(""String_Node_Str"",domainNetworkSearch,sb.entity().getId(),domainNetworkSearch.entity().getNetworkId(),JoinBuilder.JoinType.LEFTOUTER);
  }
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (isSystem == null || !isSystem) {
    List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
    if (sharedNetworkDomainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,sharedNetworkDomainId));
    }
 else {
      SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
      sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
      networksToReturn.addAll(listDomainSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,path));
    }
    if (!(isShared != null && isShared && cmd.getDomainId() != null) && (accountId != null || (domainId == null && accountName == null))) {
      networksToReturn.addAll(listAccountSpecificAndZoneLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,accountId,path));
    }
    return networksToReturn;
  }
 else {
    return _networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter);
  }
}"
89342,"@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  Boolean isShared=cmd.getIsShared();
  Boolean isDefault=cmd.isDefault();
  Long accountId=null;
  String path=null;
  Long sharedNetworkDomainId=null;
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (_accountMgr.isAdmin(caller.getType())) {
    if (domainId != null) {
      DomainVO domain=_domainDao.findById(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      _accountMgr.checkAccess(caller,domain);
      if (accountName != null) {
        Account owner=_accountMgr.getActiveAccount(accountName,domainId);
        if (owner == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=owner.getId();
      }
    }
    DomainVO domain=_domainDao.findById(caller.getDomainId());
    path=domain.getPath();
  }
 else {
    accountId=caller.getId();
  }
  if ((isSystem == null || !isSystem) && (isShared == null || isShared)) {
    sharedNetworkDomainId=domainId;
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  if (sharedNetworkDomainId != null) {
    SearchBuilder<NetworkDomainVO> domainNetworkSearch=_networkDomainDao.createSearchBuilder();
    sb.join(""String_Node_Str"",domainNetworkSearch,sb.entity().getId(),domainNetworkSearch.entity().getNetworkId(),JoinBuilder.JoinType.LEFTOUTER);
  }
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (isSystem == null || !isSystem) {
    List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
    if (sharedNetworkDomainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,sharedNetworkDomainId));
    }
 else {
      SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
      sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
      networksToReturn.addAll(listDomainSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,path));
    }
    if (accountId != null || (domainId == null && accountName == null)) {
      networksToReturn.addAll(listAccountSpecificAndZoneLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,accountId,path));
    }
    return networksToReturn;
  }
 else {
    return _networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter);
  }
}","@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  Boolean isShared=cmd.getIsShared();
  Boolean isDefault=cmd.isDefault();
  Long accountId=null;
  String path=null;
  Long sharedNetworkDomainId=null;
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DomainVO domain=null;
  if (domainId != null) {
    domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,domain);
  }
  if (_accountMgr.isAdmin(caller.getType())) {
    if (domainId != null) {
      if (accountName != null) {
        Account owner=_accountMgr.getActiveAccount(accountName,domainId);
        if (owner == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=owner.getId();
      }
    }
  }
 else {
    accountId=caller.getId();
  }
  path=_domainDao.findById(caller.getDomainId()).getPath();
  if (domainId == null) {
    domainId=caller.getDomainId();
  }
  if ((isSystem == null || !isSystem) && (isShared == null || isShared)) {
    sharedNetworkDomainId=domainId;
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  if (sharedNetworkDomainId != null) {
    SearchBuilder<NetworkDomainVO> domainNetworkSearch=_networkDomainDao.createSearchBuilder();
    sb.join(""String_Node_Str"",domainNetworkSearch,sb.entity().getId(),domainNetworkSearch.entity().getNetworkId(),JoinBuilder.JoinType.LEFTOUTER);
  }
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (isSystem == null || !isSystem) {
    List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
    if (sharedNetworkDomainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,sharedNetworkDomainId));
    }
 else {
      SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
      sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
      networksToReturn.addAll(listDomainSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,path));
    }
    if (!(isShared != null && isShared && cmd.getDomainId() != null) && (accountId != null || (domainId == null && accountName == null))) {
      networksToReturn.addAll(listAccountSpecificAndZoneLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,accountId,path));
    }
    return networksToReturn;
  }
 else {
    return _networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter);
  }
}"
89343,"@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  Boolean isShared=cmd.getIsShared();
  Boolean isDefault=cmd.isDefault();
  Long accountId=null;
  String path=null;
  Long sharedNetworkDomainId=null;
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (_accountMgr.isAdmin(caller.getType())) {
    if (domainId != null) {
      DomainVO domain=_domainDao.findById(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      _accountMgr.checkAccess(caller,domain);
      if (accountName != null) {
        Account owner=_accountMgr.getActiveAccount(accountName,domainId);
        if (owner == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=owner.getId();
      }
    }
    DomainVO domain=_domainDao.findById(caller.getDomainId());
    path=domain.getPath();
  }
 else {
    accountId=caller.getId();
  }
  if ((isSystem == null || !isSystem) && (isShared == null || isShared)) {
    sharedNetworkDomainId=domainId;
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  if (sharedNetworkDomainId != null) {
    SearchBuilder<NetworkDomainVO> domainNetworkSearch=_networkDomainDao.createSearchBuilder();
    sb.join(""String_Node_Str"",domainNetworkSearch,sb.entity().getId(),domainNetworkSearch.entity().getNetworkId(),JoinBuilder.JoinType.LEFTOUTER);
  }
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (isSystem == null || !isSystem) {
    List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
    if (sharedNetworkDomainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,sharedNetworkDomainId));
    }
 else {
      SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
      sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
      networksToReturn.addAll(listDomainSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,path));
    }
    if (accountId != null || (domainId == null && accountName == null)) {
      networksToReturn.addAll(listAccountSpecificAndZoneLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,accountId,path));
    }
    return networksToReturn;
  }
 else {
    return _networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter);
  }
}","@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Long id=cmd.getId();
  String keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  Boolean isShared=cmd.getIsShared();
  Boolean isDefault=cmd.isDefault();
  Long accountId=null;
  String path=null;
  Long sharedNetworkDomainId=null;
  if ((isSystem == null || caller.getType() == Account.ACCOUNT_TYPE_NORMAL) && id == null) {
    isSystem=false;
  }
  if (isSystem != null && isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DomainVO domain=null;
  if (domainId != null) {
    domain=_domainDao.findById(domainId);
    if (domain == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
    _accountMgr.checkAccess(caller,domain);
  }
  if (_accountMgr.isAdmin(caller.getType())) {
    if (domainId != null) {
      if (accountName != null) {
        Account owner=_accountMgr.getActiveAccount(accountName,domainId);
        if (owner == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=owner.getId();
      }
    }
  }
 else {
    accountId=caller.getId();
  }
  path=_domainDao.findById(caller.getDomainId()).getPath();
  if (domainId == null) {
    domainId=caller.getDomainId();
  }
  if ((isSystem == null || !isSystem) && (isShared == null || isShared)) {
    sharedNetworkDomainId=domainId;
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem != null && isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  if (sharedNetworkDomainId != null) {
    SearchBuilder<NetworkDomainVO> domainNetworkSearch=_networkDomainDao.createSearchBuilder();
    sb.join(""String_Node_Str"",domainNetworkSearch,sb.entity().getId(),domainNetworkSearch.entity().getNetworkId(),JoinBuilder.JoinType.LEFTOUTER);
  }
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  if (isSystem == null || !isSystem) {
    List<NetworkVO> networksToReturn=new ArrayList<NetworkVO>();
    if (sharedNetworkDomainId != null) {
      networksToReturn.addAll(listDomainLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,sharedNetworkDomainId));
    }
 else {
      SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
      domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
      sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
      networksToReturn.addAll(listDomainSpecificNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,path));
    }
    if (!(isShared != null && isShared && cmd.getDomainId() != null) && (accountId != null || (domainId == null && accountName == null))) {
      networksToReturn.addAll(listAccountSpecificAndZoneLevelNetworks(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter,accountId,path));
    }
    return networksToReturn;
  }
 else {
    return _networksDao.search(buildNetworkSearchCriteria(sb,keyword,id,isSystem,zoneId,type,isDefault,trafficType,isShared),searchFilter);
  }
}"
89344,"private Merovingian2(long msId){
  super(MerovingianMBean.class,false);
  _msId=msId;
  Connection conn=null;
  try {
    conn=Transaction.getStandaloneConnectionWithException();
    conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
    conn.setAutoCommit(true);
    _concierge=new ConnectionConcierge(""String_Node_Str"",conn,false);
  }
 catch (  SQLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private Merovingian2(long msId){
  super(MerovingianMBean.class,false);
  _msId=msId;
  Connection conn=null;
  try {
    conn=Transaction.getStandaloneConnectionWithException();
    conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
    conn.setAutoCommit(true);
    _concierge=new ConnectionConcierge(""String_Node_Str"",conn,true);
  }
 catch (  SQLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}"
89345,"private Merovingian2(long msId){
  super(MerovingianMBean.class,false);
  _msId=msId;
  Connection conn=null;
  try {
    conn=Transaction.getStandaloneConnectionWithException();
    conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
    conn.setAutoCommit(true);
    _concierge=new ConnectionConcierge(""String_Node_Str"",conn,false);
  }
 catch (  SQLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private Merovingian2(long msId){
  super(MerovingianMBean.class,false);
  _msId=msId;
  Connection conn=null;
  try {
    conn=Transaction.getStandaloneConnectionWithException();
    conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
    conn.setAutoCommit(true);
    _concierge=new ConnectionConcierge(""String_Node_Str"",conn,true);
  }
 catch (  SQLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}"
89346,"private Merovingian2(long msId){
  super(MerovingianMBean.class,false);
  _msId=msId;
  Connection conn=null;
  try {
    conn=Transaction.getStandaloneConnectionWithException();
    conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
    conn.setAutoCommit(true);
    _concierge=new ConnectionConcierge(""String_Node_Str"",conn,false);
  }
 catch (  SQLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private Merovingian2(long msId){
  super(MerovingianMBean.class,false);
  _msId=msId;
  Connection conn=null;
  try {
    conn=Transaction.getStandaloneConnectionWithException();
    conn.setTransactionIsolation(Connection.TRANSACTION_READ_COMMITTED);
    conn.setAutoCommit(true);
    _concierge=new ConnectionConcierge(""String_Node_Str"",conn,true);
  }
 catch (  SQLException e) {
    s_logger.error(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}"
89347,"@Override public DeployDestination plan(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws InsufficientServerCapacityException {
  String _allocationAlgorithm=_configDao.getValue(Config.VmAllocationAlgorithm.key());
  VirtualMachine vm=vmProfile.getVirtualMachine();
  ServiceOffering offering=vmProfile.getServiceOffering();
  DataCenter dc=_dcDao.findById(vm.getDataCenterIdToDeployIn());
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId() + ""String_Node_Str""+ plan.getPodId()+ ""String_Node_Str""+ plan.getClusterId()+ ""String_Node_Str""+ cpu_requested+ ""String_Node_Str""+ ram_requested);
    s_logger.debug(""String_Node_Str"" + (plan.getPoolId() != null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (plan.getHostId() != null) {
    Long hostIdSpecified=plan.getHostId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostIdSpecified);
    }
    HostVO host=_hostDao.findById(hostIdSpecified);
    if (s_logger.isDebugEnabled()) {
      if (host == null) {
        s_logger.debug(""String_Node_Str"");
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
      }
    }
    DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),hostIdSpecified,plan.getPoolId());
    Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
    Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
    List<Volume> readyAndReusedVolumes=result.second();
    if (!suitableVolumeStoragePools.isEmpty()) {
      List<Host> suitableHosts=new ArrayList<Host>();
      suitableHosts.add(host);
      Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
      if (potentialResources != null) {
        Pod pod=_podDao.findById(host.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        Map<Volume,StoragePool> storageVolMap=potentialResources.second();
        for (        Volume vol : readyAndReusedVolumes) {
          storageVolMap.remove(vol);
        }
        DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
        s_logger.debug(""String_Node_Str"" + dest);
        return dest;
      }
    }
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  if (vm.getLastHostId() != null) {
    s_logger.debug(""String_Node_Str"" + vm.getLastHostId());
    HostVO host=_hostDao.findById(vm.getLastHostId());
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      if (host.getStatus() == Status.Up && host.getHostAllocationState() == Host.HostAllocationState.Enabled) {
        if (isEnabledForAllocation(host.getDataCenterId(),host.getPodId(),host.getClusterId())) {
          if (_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOverprovisioningFactor)) {
            s_logger.debug(""String_Node_Str"");
            s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
            DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId());
            Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
            Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
            List<Volume> readyAndReusedVolumes=result.second();
            if (!suitableVolumeStoragePools.isEmpty()) {
              List<Host> suitableHosts=new ArrayList<Host>();
              suitableHosts.add(host);
              Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
              if (potentialResources != null) {
                Pod pod=_podDao.findById(host.getPodId());
                Cluster cluster=_clusterDao.findById(host.getClusterId());
                Map<Volume,StoragePool> storageVolMap=potentialResources.second();
                for (                Volume vol : readyAndReusedVolumes) {
                  storageVolMap.remove(vol);
                }
                DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
                s_logger.debug(""String_Node_Str"" + dest);
                return dest;
              }
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getStatus().name() + ""String_Node_Str""+ host.getHostAllocationState().name());
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
  if (!isEnabledForAllocation(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId())) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  List<Long> clusterList=new ArrayList<Long>();
  if (plan.getClusterId() != null) {
    Long clusterIdSpecified=plan.getClusterId();
    s_logger.debug(""String_Node_Str"" + clusterIdSpecified);
    ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
    if (cluster != null) {
      clusterList.add(clusterIdSpecified);
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getClusterId());
      return null;
    }
  }
 else   if (plan.getPodId() != null) {
    Long podIdSpecified=plan.getPodId();
    s_logger.debug(""String_Node_Str"" + podIdSpecified);
    HostPodVO pod=_podDao.findById(podIdSpecified);
    if (pod != null) {
      clusterList=listClustersByCapacity(podIdSpecified,cpu_requested,ram_requested,avoid,false,cpuOverprovisioningFactor);
      if (!clusterList.isEmpty()) {
        if (avoid.getClustersToAvoid() != null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
          }
          clusterList.removeAll(avoid.getClustersToAvoid());
        }
        List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),podIdSpecified);
        if (!disabledClusters.isEmpty()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + disabledClusters);
          }
          clusterList.removeAll(disabledClusters);
        }
        DeployDestination dest=checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
        if (dest == null) {
          avoid.addPod(plan.getPodId());
        }
        return dest;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        avoid.addPod(plan.getPodId());
        return null;
      }
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getPodId());
      return null;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId());
    List<Long> prioritizedClusterIds=listClustersByCapacity(plan.getDataCenterId(),cpu_requested,ram_requested,avoid,true,cpuOverprovisioningFactor);
    if (!prioritizedClusterIds.isEmpty()) {
      if (avoid.getClustersToAvoid() != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
        }
        prioritizedClusterIds.removeAll(avoid.getClustersToAvoid());
      }
      List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),null);
      if (!disabledClusters.isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + disabledClusters);
        }
        prioritizedClusterIds.removeAll(disabledClusters);
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
    if (!prioritizedClusterIds.isEmpty()) {
      boolean applyUserConcentrationPodHeuristic=Boolean.parseBoolean(_configDao.getValue(Config.UseUserConcentratedPodAllocation.key()));
      if (applyUserConcentrationPodHeuristic && vmProfile.getOwner() != null) {
        long accountId=vmProfile.getOwner().getAccountId();
        List<Long> podIds=listPodsByUserConcentration(plan.getDataCenterId(),accountId);
        if (!podIds.isEmpty()) {
          if (avoid.getPodsToAvoid() != null) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + avoid.getPodsToAvoid());
            }
            podIds.removeAll(avoid.getPodsToAvoid());
          }
          clusterList=reorderClustersByPods(prioritizedClusterIds,podIds);
        }
 else {
          clusterList=prioritizedClusterIds;
        }
      }
 else {
        clusterList=prioritizedClusterIds;
      }
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
  }
}","@Override public DeployDestination plan(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws InsufficientServerCapacityException {
  String _allocationAlgorithm=_configDao.getValue(Config.VmAllocationAlgorithm.key());
  VirtualMachine vm=vmProfile.getVirtualMachine();
  ServiceOffering offering=vmProfile.getServiceOffering();
  DataCenter dc=_dcDao.findById(vm.getDataCenterIdToDeployIn());
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId() + ""String_Node_Str""+ plan.getPodId()+ ""String_Node_Str""+ plan.getClusterId()+ ""String_Node_Str""+ cpu_requested+ ""String_Node_Str""+ ram_requested);
    s_logger.debug(""String_Node_Str"" + (plan.getPoolId() != null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (plan.getHostId() != null) {
    Long hostIdSpecified=plan.getHostId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostIdSpecified);
    }
    HostVO host=_hostDao.findById(hostIdSpecified);
    if (s_logger.isDebugEnabled()) {
      if (host == null) {
        s_logger.debug(""String_Node_Str"");
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
      }
    }
    DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),hostIdSpecified,plan.getPoolId());
    Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
    Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
    List<Volume> readyAndReusedVolumes=result.second();
    if (!suitableVolumeStoragePools.isEmpty()) {
      List<Host> suitableHosts=new ArrayList<Host>();
      suitableHosts.add(host);
      Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
      if (potentialResources != null) {
        Pod pod=_podDao.findById(host.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        Map<Volume,StoragePool> storageVolMap=potentialResources.second();
        for (        Volume vol : readyAndReusedVolumes) {
          storageVolMap.remove(vol);
        }
        DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
        s_logger.debug(""String_Node_Str"" + dest);
        return dest;
      }
    }
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  if (vm.getLastHostId() != null) {
    s_logger.debug(""String_Node_Str"" + vm.getLastHostId());
    HostVO host=_hostDao.findById(vm.getLastHostId());
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      if (host.getStatus() == Status.Up && host.getHostAllocationState() == Host.HostAllocationState.Enabled) {
        if (isEnabledForAllocation(host.getDataCenterId(),host.getPodId(),host.getClusterId())) {
          if (_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOverprovisioningFactor)) {
            s_logger.debug(""String_Node_Str"");
            s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
            DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId());
            Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
            Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
            List<Volume> readyAndReusedVolumes=result.second();
            if (!suitableVolumeStoragePools.isEmpty()) {
              List<Host> suitableHosts=new ArrayList<Host>();
              suitableHosts.add(host);
              Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
              if (potentialResources != null) {
                Pod pod=_podDao.findById(host.getPodId());
                Cluster cluster=_clusterDao.findById(host.getClusterId());
                Map<Volume,StoragePool> storageVolMap=potentialResources.second();
                for (                Volume vol : readyAndReusedVolumes) {
                  storageVolMap.remove(vol);
                }
                DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
                s_logger.debug(""String_Node_Str"" + dest);
                return dest;
              }
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getStatus().name() + ""String_Node_Str""+ host.getHostAllocationState().name());
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
  if (!isEnabledForAllocation(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId())) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  List<Long> clusterList=new ArrayList<Long>();
  if (plan.getClusterId() != null) {
    Long clusterIdSpecified=plan.getClusterId();
    s_logger.debug(""String_Node_Str"" + clusterIdSpecified);
    ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
    if (cluster != null) {
      clusterList.add(clusterIdSpecified);
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addCluster(plan.getClusterId());
      return null;
    }
  }
 else   if (plan.getPodId() != null) {
    Long podIdSpecified=plan.getPodId();
    s_logger.debug(""String_Node_Str"" + podIdSpecified);
    HostPodVO pod=_podDao.findById(podIdSpecified);
    if (pod != null) {
      clusterList=listClustersByCapacity(podIdSpecified,cpu_requested,ram_requested,avoid,false,cpuOverprovisioningFactor);
      if (!clusterList.isEmpty()) {
        if (avoid.getClustersToAvoid() != null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
          }
          clusterList.removeAll(avoid.getClustersToAvoid());
        }
        List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),podIdSpecified);
        if (!disabledClusters.isEmpty()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + disabledClusters);
          }
          clusterList.removeAll(disabledClusters);
        }
        DeployDestination dest=checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
        if (dest == null) {
          avoid.addPod(plan.getPodId());
        }
        return dest;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        avoid.addPod(plan.getPodId());
        return null;
      }
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getPodId());
      return null;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId());
    List<Long> prioritizedClusterIds=listClustersByCapacity(plan.getDataCenterId(),cpu_requested,ram_requested,avoid,true,cpuOverprovisioningFactor);
    if (!prioritizedClusterIds.isEmpty()) {
      if (avoid.getClustersToAvoid() != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
        }
        prioritizedClusterIds.removeAll(avoid.getClustersToAvoid());
      }
      List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),null);
      if (!disabledClusters.isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + disabledClusters);
        }
        prioritizedClusterIds.removeAll(disabledClusters);
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
    if (!prioritizedClusterIds.isEmpty()) {
      boolean applyUserConcentrationPodHeuristic=Boolean.parseBoolean(_configDao.getValue(Config.UseUserConcentratedPodAllocation.key()));
      if (applyUserConcentrationPodHeuristic && vmProfile.getOwner() != null) {
        long accountId=vmProfile.getOwner().getAccountId();
        List<Long> podIds=listPodsByUserConcentration(plan.getDataCenterId(),accountId);
        if (!podIds.isEmpty()) {
          if (avoid.getPodsToAvoid() != null) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + avoid.getPodsToAvoid());
            }
            podIds.removeAll(avoid.getPodsToAvoid());
          }
          clusterList=reorderClustersByPods(prioritizedClusterIds,podIds);
        }
 else {
          clusterList=prioritizedClusterIds;
        }
      }
 else {
        clusterList=prioritizedClusterIds;
      }
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
  }
}"
89348,"@Override public DeployDestination plan(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws InsufficientServerCapacityException {
  String _allocationAlgorithm=_configDao.getValue(Config.VmAllocationAlgorithm.key());
  VirtualMachine vm=vmProfile.getVirtualMachine();
  ServiceOffering offering=vmProfile.getServiceOffering();
  DataCenter dc=_dcDao.findById(vm.getDataCenterIdToDeployIn());
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId() + ""String_Node_Str""+ plan.getPodId()+ ""String_Node_Str""+ plan.getClusterId()+ ""String_Node_Str""+ cpu_requested+ ""String_Node_Str""+ ram_requested);
    s_logger.debug(""String_Node_Str"" + (plan.getPoolId() != null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (plan.getHostId() != null) {
    Long hostIdSpecified=plan.getHostId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostIdSpecified);
    }
    HostVO host=_hostDao.findById(hostIdSpecified);
    if (s_logger.isDebugEnabled()) {
      if (host == null) {
        s_logger.debug(""String_Node_Str"");
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
      }
    }
    DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),hostIdSpecified,plan.getPoolId());
    Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
    Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
    List<Volume> readyAndReusedVolumes=result.second();
    if (!suitableVolumeStoragePools.isEmpty()) {
      List<Host> suitableHosts=new ArrayList<Host>();
      suitableHosts.add(host);
      Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
      if (potentialResources != null) {
        Pod pod=_podDao.findById(host.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        Map<Volume,StoragePool> storageVolMap=potentialResources.second();
        for (        Volume vol : readyAndReusedVolumes) {
          storageVolMap.remove(vol);
        }
        DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
        s_logger.debug(""String_Node_Str"" + dest);
        return dest;
      }
    }
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  if (vm.getLastHostId() != null) {
    s_logger.debug(""String_Node_Str"" + vm.getLastHostId());
    HostVO host=_hostDao.findById(vm.getLastHostId());
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      if (host.getStatus() == Status.Up && host.getHostAllocationState() == Host.HostAllocationState.Enabled) {
        if (isEnabledForAllocation(host.getDataCenterId(),host.getPodId(),host.getClusterId())) {
          if (_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOverprovisioningFactor)) {
            s_logger.debug(""String_Node_Str"");
            s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
            DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId());
            Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
            Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
            List<Volume> readyAndReusedVolumes=result.second();
            if (!suitableVolumeStoragePools.isEmpty()) {
              List<Host> suitableHosts=new ArrayList<Host>();
              suitableHosts.add(host);
              Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
              if (potentialResources != null) {
                Pod pod=_podDao.findById(host.getPodId());
                Cluster cluster=_clusterDao.findById(host.getClusterId());
                Map<Volume,StoragePool> storageVolMap=potentialResources.second();
                for (                Volume vol : readyAndReusedVolumes) {
                  storageVolMap.remove(vol);
                }
                DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
                s_logger.debug(""String_Node_Str"" + dest);
                return dest;
              }
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getStatus().name() + ""String_Node_Str""+ host.getHostAllocationState().name());
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
  if (!isEnabledForAllocation(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId())) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  List<Long> clusterList=new ArrayList<Long>();
  if (plan.getClusterId() != null) {
    Long clusterIdSpecified=plan.getClusterId();
    s_logger.debug(""String_Node_Str"" + clusterIdSpecified);
    ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
    if (cluster != null) {
      clusterList.add(clusterIdSpecified);
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getClusterId());
      return null;
    }
  }
 else   if (plan.getPodId() != null) {
    Long podIdSpecified=plan.getPodId();
    s_logger.debug(""String_Node_Str"" + podIdSpecified);
    HostPodVO pod=_podDao.findById(podIdSpecified);
    if (pod != null) {
      clusterList=listClustersByCapacity(podIdSpecified,cpu_requested,ram_requested,avoid,false,cpuOverprovisioningFactor);
      if (!clusterList.isEmpty()) {
        if (avoid.getClustersToAvoid() != null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
          }
          clusterList.removeAll(avoid.getClustersToAvoid());
        }
        List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),podIdSpecified);
        if (!disabledClusters.isEmpty()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + disabledClusters);
          }
          clusterList.removeAll(disabledClusters);
        }
        DeployDestination dest=checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
        if (dest == null) {
          avoid.addPod(plan.getPodId());
        }
        return dest;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        avoid.addPod(plan.getPodId());
        return null;
      }
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getPodId());
      return null;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId());
    List<Long> prioritizedClusterIds=listClustersByCapacity(plan.getDataCenterId(),cpu_requested,ram_requested,avoid,true,cpuOverprovisioningFactor);
    if (!prioritizedClusterIds.isEmpty()) {
      if (avoid.getClustersToAvoid() != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
        }
        prioritizedClusterIds.removeAll(avoid.getClustersToAvoid());
      }
      List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),null);
      if (!disabledClusters.isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + disabledClusters);
        }
        prioritizedClusterIds.removeAll(disabledClusters);
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
    if (!prioritizedClusterIds.isEmpty()) {
      boolean applyUserConcentrationPodHeuristic=Boolean.parseBoolean(_configDao.getValue(Config.UseUserConcentratedPodAllocation.key()));
      if (applyUserConcentrationPodHeuristic && vmProfile.getOwner() != null) {
        long accountId=vmProfile.getOwner().getAccountId();
        List<Long> podIds=listPodsByUserConcentration(plan.getDataCenterId(),accountId);
        if (!podIds.isEmpty()) {
          if (avoid.getPodsToAvoid() != null) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + avoid.getPodsToAvoid());
            }
            podIds.removeAll(avoid.getPodsToAvoid());
          }
          clusterList=reorderClustersByPods(prioritizedClusterIds,podIds);
        }
 else {
          clusterList=prioritizedClusterIds;
        }
      }
 else {
        clusterList=prioritizedClusterIds;
      }
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
  }
}","@Override public DeployDestination plan(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws InsufficientServerCapacityException {
  String _allocationAlgorithm=_configDao.getValue(Config.VmAllocationAlgorithm.key());
  VirtualMachine vm=vmProfile.getVirtualMachine();
  ServiceOffering offering=vmProfile.getServiceOffering();
  DataCenter dc=_dcDao.findById(vm.getDataCenterIdToDeployIn());
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId() + ""String_Node_Str""+ plan.getPodId()+ ""String_Node_Str""+ plan.getClusterId()+ ""String_Node_Str""+ cpu_requested+ ""String_Node_Str""+ ram_requested);
    s_logger.debug(""String_Node_Str"" + (plan.getPoolId() != null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (plan.getHostId() != null) {
    Long hostIdSpecified=plan.getHostId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostIdSpecified);
    }
    HostVO host=_hostDao.findById(hostIdSpecified);
    if (s_logger.isDebugEnabled()) {
      if (host == null) {
        s_logger.debug(""String_Node_Str"");
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
      }
    }
    DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),hostIdSpecified,plan.getPoolId());
    Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
    Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
    List<Volume> readyAndReusedVolumes=result.second();
    if (!suitableVolumeStoragePools.isEmpty()) {
      List<Host> suitableHosts=new ArrayList<Host>();
      suitableHosts.add(host);
      Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
      if (potentialResources != null) {
        Pod pod=_podDao.findById(host.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        Map<Volume,StoragePool> storageVolMap=potentialResources.second();
        for (        Volume vol : readyAndReusedVolumes) {
          storageVolMap.remove(vol);
        }
        DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
        s_logger.debug(""String_Node_Str"" + dest);
        return dest;
      }
    }
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  if (vm.getLastHostId() != null) {
    s_logger.debug(""String_Node_Str"" + vm.getLastHostId());
    HostVO host=_hostDao.findById(vm.getLastHostId());
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      if (host.getStatus() == Status.Up && host.getHostAllocationState() == Host.HostAllocationState.Enabled) {
        if (isEnabledForAllocation(host.getDataCenterId(),host.getPodId(),host.getClusterId())) {
          if (_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOverprovisioningFactor)) {
            s_logger.debug(""String_Node_Str"");
            s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
            DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId());
            Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
            Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
            List<Volume> readyAndReusedVolumes=result.second();
            if (!suitableVolumeStoragePools.isEmpty()) {
              List<Host> suitableHosts=new ArrayList<Host>();
              suitableHosts.add(host);
              Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
              if (potentialResources != null) {
                Pod pod=_podDao.findById(host.getPodId());
                Cluster cluster=_clusterDao.findById(host.getClusterId());
                Map<Volume,StoragePool> storageVolMap=potentialResources.second();
                for (                Volume vol : readyAndReusedVolumes) {
                  storageVolMap.remove(vol);
                }
                DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
                s_logger.debug(""String_Node_Str"" + dest);
                return dest;
              }
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getStatus().name() + ""String_Node_Str""+ host.getHostAllocationState().name());
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
  if (!isEnabledForAllocation(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId())) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  List<Long> clusterList=new ArrayList<Long>();
  if (plan.getClusterId() != null) {
    Long clusterIdSpecified=plan.getClusterId();
    s_logger.debug(""String_Node_Str"" + clusterIdSpecified);
    ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
    if (cluster != null) {
      clusterList.add(clusterIdSpecified);
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addCluster(plan.getClusterId());
      return null;
    }
  }
 else   if (plan.getPodId() != null) {
    Long podIdSpecified=plan.getPodId();
    s_logger.debug(""String_Node_Str"" + podIdSpecified);
    HostPodVO pod=_podDao.findById(podIdSpecified);
    if (pod != null) {
      clusterList=listClustersByCapacity(podIdSpecified,cpu_requested,ram_requested,avoid,false,cpuOverprovisioningFactor);
      if (!clusterList.isEmpty()) {
        if (avoid.getClustersToAvoid() != null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
          }
          clusterList.removeAll(avoid.getClustersToAvoid());
        }
        List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),podIdSpecified);
        if (!disabledClusters.isEmpty()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + disabledClusters);
          }
          clusterList.removeAll(disabledClusters);
        }
        DeployDestination dest=checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
        if (dest == null) {
          avoid.addPod(plan.getPodId());
        }
        return dest;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        avoid.addPod(plan.getPodId());
        return null;
      }
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getPodId());
      return null;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId());
    List<Long> prioritizedClusterIds=listClustersByCapacity(plan.getDataCenterId(),cpu_requested,ram_requested,avoid,true,cpuOverprovisioningFactor);
    if (!prioritizedClusterIds.isEmpty()) {
      if (avoid.getClustersToAvoid() != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
        }
        prioritizedClusterIds.removeAll(avoid.getClustersToAvoid());
      }
      List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),null);
      if (!disabledClusters.isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + disabledClusters);
        }
        prioritizedClusterIds.removeAll(disabledClusters);
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
    if (!prioritizedClusterIds.isEmpty()) {
      boolean applyUserConcentrationPodHeuristic=Boolean.parseBoolean(_configDao.getValue(Config.UseUserConcentratedPodAllocation.key()));
      if (applyUserConcentrationPodHeuristic && vmProfile.getOwner() != null) {
        long accountId=vmProfile.getOwner().getAccountId();
        List<Long> podIds=listPodsByUserConcentration(plan.getDataCenterId(),accountId);
        if (!podIds.isEmpty()) {
          if (avoid.getPodsToAvoid() != null) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + avoid.getPodsToAvoid());
            }
            podIds.removeAll(avoid.getPodsToAvoid());
          }
          clusterList=reorderClustersByPods(prioritizedClusterIds,podIds);
        }
 else {
          clusterList=prioritizedClusterIds;
        }
      }
 else {
        clusterList=prioritizedClusterIds;
      }
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
  }
}"
89349,"@Override public DeployDestination plan(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws InsufficientServerCapacityException {
  String _allocationAlgorithm=_configDao.getValue(Config.VmAllocationAlgorithm.key());
  VirtualMachine vm=vmProfile.getVirtualMachine();
  ServiceOffering offering=vmProfile.getServiceOffering();
  DataCenter dc=_dcDao.findById(vm.getDataCenterIdToDeployIn());
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId() + ""String_Node_Str""+ plan.getPodId()+ ""String_Node_Str""+ plan.getClusterId()+ ""String_Node_Str""+ cpu_requested+ ""String_Node_Str""+ ram_requested);
    s_logger.debug(""String_Node_Str"" + (plan.getPoolId() != null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (plan.getHostId() != null) {
    Long hostIdSpecified=plan.getHostId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostIdSpecified);
    }
    HostVO host=_hostDao.findById(hostIdSpecified);
    if (s_logger.isDebugEnabled()) {
      if (host == null) {
        s_logger.debug(""String_Node_Str"");
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
      }
    }
    DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),hostIdSpecified,plan.getPoolId());
    Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
    Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
    List<Volume> readyAndReusedVolumes=result.second();
    if (!suitableVolumeStoragePools.isEmpty()) {
      List<Host> suitableHosts=new ArrayList<Host>();
      suitableHosts.add(host);
      Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
      if (potentialResources != null) {
        Pod pod=_podDao.findById(host.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        Map<Volume,StoragePool> storageVolMap=potentialResources.second();
        for (        Volume vol : readyAndReusedVolumes) {
          storageVolMap.remove(vol);
        }
        DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
        s_logger.debug(""String_Node_Str"" + dest);
        return dest;
      }
    }
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  if (vm.getLastHostId() != null) {
    s_logger.debug(""String_Node_Str"" + vm.getLastHostId());
    HostVO host=_hostDao.findById(vm.getLastHostId());
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      if (host.getStatus() == Status.Up && host.getHostAllocationState() == Host.HostAllocationState.Enabled) {
        if (isEnabledForAllocation(host.getDataCenterId(),host.getPodId(),host.getClusterId())) {
          if (_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOverprovisioningFactor)) {
            s_logger.debug(""String_Node_Str"");
            s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
            DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId());
            Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
            Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
            List<Volume> readyAndReusedVolumes=result.second();
            if (!suitableVolumeStoragePools.isEmpty()) {
              List<Host> suitableHosts=new ArrayList<Host>();
              suitableHosts.add(host);
              Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
              if (potentialResources != null) {
                Pod pod=_podDao.findById(host.getPodId());
                Cluster cluster=_clusterDao.findById(host.getClusterId());
                Map<Volume,StoragePool> storageVolMap=potentialResources.second();
                for (                Volume vol : readyAndReusedVolumes) {
                  storageVolMap.remove(vol);
                }
                DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
                s_logger.debug(""String_Node_Str"" + dest);
                return dest;
              }
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getStatus().name() + ""String_Node_Str""+ host.getHostAllocationState().name());
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
  if (!isEnabledForAllocation(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId())) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  List<Long> clusterList=new ArrayList<Long>();
  if (plan.getClusterId() != null) {
    Long clusterIdSpecified=plan.getClusterId();
    s_logger.debug(""String_Node_Str"" + clusterIdSpecified);
    ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
    if (cluster != null) {
      clusterList.add(clusterIdSpecified);
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getClusterId());
      return null;
    }
  }
 else   if (plan.getPodId() != null) {
    Long podIdSpecified=plan.getPodId();
    s_logger.debug(""String_Node_Str"" + podIdSpecified);
    HostPodVO pod=_podDao.findById(podIdSpecified);
    if (pod != null) {
      clusterList=listClustersByCapacity(podIdSpecified,cpu_requested,ram_requested,avoid,false,cpuOverprovisioningFactor);
      if (!clusterList.isEmpty()) {
        if (avoid.getClustersToAvoid() != null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
          }
          clusterList.removeAll(avoid.getClustersToAvoid());
        }
        List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),podIdSpecified);
        if (!disabledClusters.isEmpty()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + disabledClusters);
          }
          clusterList.removeAll(disabledClusters);
        }
        DeployDestination dest=checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
        if (dest == null) {
          avoid.addPod(plan.getPodId());
        }
        return dest;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        avoid.addPod(plan.getPodId());
        return null;
      }
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getPodId());
      return null;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId());
    List<Long> prioritizedClusterIds=listClustersByCapacity(plan.getDataCenterId(),cpu_requested,ram_requested,avoid,true,cpuOverprovisioningFactor);
    if (!prioritizedClusterIds.isEmpty()) {
      if (avoid.getClustersToAvoid() != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
        }
        prioritizedClusterIds.removeAll(avoid.getClustersToAvoid());
      }
      List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),null);
      if (!disabledClusters.isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + disabledClusters);
        }
        prioritizedClusterIds.removeAll(disabledClusters);
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
    if (!prioritizedClusterIds.isEmpty()) {
      boolean applyUserConcentrationPodHeuristic=Boolean.parseBoolean(_configDao.getValue(Config.UseUserConcentratedPodAllocation.key()));
      if (applyUserConcentrationPodHeuristic && vmProfile.getOwner() != null) {
        long accountId=vmProfile.getOwner().getAccountId();
        List<Long> podIds=listPodsByUserConcentration(plan.getDataCenterId(),accountId);
        if (!podIds.isEmpty()) {
          if (avoid.getPodsToAvoid() != null) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + avoid.getPodsToAvoid());
            }
            podIds.removeAll(avoid.getPodsToAvoid());
          }
          clusterList=reorderClustersByPods(prioritizedClusterIds,podIds);
        }
 else {
          clusterList=prioritizedClusterIds;
        }
      }
 else {
        clusterList=prioritizedClusterIds;
      }
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
  }
}","@Override public DeployDestination plan(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws InsufficientServerCapacityException {
  String _allocationAlgorithm=_configDao.getValue(Config.VmAllocationAlgorithm.key());
  VirtualMachine vm=vmProfile.getVirtualMachine();
  ServiceOffering offering=vmProfile.getServiceOffering();
  DataCenter dc=_dcDao.findById(vm.getDataCenterIdToDeployIn());
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId() + ""String_Node_Str""+ plan.getPodId()+ ""String_Node_Str""+ plan.getClusterId()+ ""String_Node_Str""+ cpu_requested+ ""String_Node_Str""+ ram_requested);
    s_logger.debug(""String_Node_Str"" + (plan.getPoolId() != null ? ""String_Node_Str"" : ""String_Node_Str""));
  }
  if (plan.getHostId() != null) {
    Long hostIdSpecified=plan.getHostId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostIdSpecified);
    }
    HostVO host=_hostDao.findById(hostIdSpecified);
    if (s_logger.isDebugEnabled()) {
      if (host == null) {
        s_logger.debug(""String_Node_Str"");
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
      }
    }
    DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),hostIdSpecified,plan.getPoolId());
    Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
    Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
    List<Volume> readyAndReusedVolumes=result.second();
    if (!suitableVolumeStoragePools.isEmpty()) {
      List<Host> suitableHosts=new ArrayList<Host>();
      suitableHosts.add(host);
      Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
      if (potentialResources != null) {
        Pod pod=_podDao.findById(host.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        Map<Volume,StoragePool> storageVolMap=potentialResources.second();
        for (        Volume vol : readyAndReusedVolumes) {
          storageVolMap.remove(vol);
        }
        DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
        s_logger.debug(""String_Node_Str"" + dest);
        return dest;
      }
    }
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  if (vm.getLastHostId() != null) {
    s_logger.debug(""String_Node_Str"" + vm.getLastHostId());
    HostVO host=_hostDao.findById(vm.getLastHostId());
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      if (host.getStatus() == Status.Up && host.getHostAllocationState() == Host.HostAllocationState.Enabled) {
        if (isEnabledForAllocation(host.getDataCenterId(),host.getPodId(),host.getClusterId())) {
          if (_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOverprovisioningFactor)) {
            s_logger.debug(""String_Node_Str"");
            s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
            DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId());
            Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
            Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
            List<Volume> readyAndReusedVolumes=result.second();
            if (!suitableVolumeStoragePools.isEmpty()) {
              List<Host> suitableHosts=new ArrayList<Host>();
              suitableHosts.add(host);
              Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
              if (potentialResources != null) {
                Pod pod=_podDao.findById(host.getPodId());
                Cluster cluster=_clusterDao.findById(host.getClusterId());
                Map<Volume,StoragePool> storageVolMap=potentialResources.second();
                for (                Volume vol : readyAndReusedVolumes) {
                  storageVolMap.remove(vol);
                }
                DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
                s_logger.debug(""String_Node_Str"" + dest);
                return dest;
              }
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getStatus().name() + ""String_Node_Str""+ host.getHostAllocationState().name());
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
  if (!isEnabledForAllocation(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId())) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  List<Long> clusterList=new ArrayList<Long>();
  if (plan.getClusterId() != null) {
    Long clusterIdSpecified=plan.getClusterId();
    s_logger.debug(""String_Node_Str"" + clusterIdSpecified);
    ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
    if (cluster != null) {
      clusterList.add(clusterIdSpecified);
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addCluster(plan.getClusterId());
      return null;
    }
  }
 else   if (plan.getPodId() != null) {
    Long podIdSpecified=plan.getPodId();
    s_logger.debug(""String_Node_Str"" + podIdSpecified);
    HostPodVO pod=_podDao.findById(podIdSpecified);
    if (pod != null) {
      clusterList=listClustersByCapacity(podIdSpecified,cpu_requested,ram_requested,avoid,false,cpuOverprovisioningFactor);
      if (!clusterList.isEmpty()) {
        if (avoid.getClustersToAvoid() != null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
          }
          clusterList.removeAll(avoid.getClustersToAvoid());
        }
        List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),podIdSpecified);
        if (!disabledClusters.isEmpty()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + disabledClusters);
          }
          clusterList.removeAll(disabledClusters);
        }
        DeployDestination dest=checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
        if (dest == null) {
          avoid.addPod(plan.getPodId());
        }
        return dest;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        avoid.addPod(plan.getPodId());
        return null;
      }
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getPodId());
      return null;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId());
    List<Long> prioritizedClusterIds=listClustersByCapacity(plan.getDataCenterId(),cpu_requested,ram_requested,avoid,true,cpuOverprovisioningFactor);
    if (!prioritizedClusterIds.isEmpty()) {
      if (avoid.getClustersToAvoid() != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
        }
        prioritizedClusterIds.removeAll(avoid.getClustersToAvoid());
      }
      List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),null);
      if (!disabledClusters.isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + disabledClusters);
        }
        prioritizedClusterIds.removeAll(disabledClusters);
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
    if (!prioritizedClusterIds.isEmpty()) {
      boolean applyUserConcentrationPodHeuristic=Boolean.parseBoolean(_configDao.getValue(Config.UseUserConcentratedPodAllocation.key()));
      if (applyUserConcentrationPodHeuristic && vmProfile.getOwner() != null) {
        long accountId=vmProfile.getOwner().getAccountId();
        List<Long> podIds=listPodsByUserConcentration(plan.getDataCenterId(),accountId);
        if (!podIds.isEmpty()) {
          if (avoid.getPodsToAvoid() != null) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + avoid.getPodsToAvoid());
            }
            podIds.removeAll(avoid.getPodsToAvoid());
          }
          clusterList=reorderClustersByPods(prioritizedClusterIds,podIds);
        }
 else {
          clusterList=prioritizedClusterIds;
        }
      }
 else {
        clusterList=prioritizedClusterIds;
      }
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
  }
}"
89350,"private void updateFirewallRules(Connection conn){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  long currentRuleId=0;
  try {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      long ipId=rs.getLong(2);
      int startPort=rs.getInt(3);
      int endPort=rs.getInt(4);
      String protocol=rs.getString(5);
      long accountId=rs.getLong(6);
      long domainId=rs.getLong(7);
      long networkId=rs.getLong(8);
      currentRuleId=id;
      Long firewallRuleId=null;
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,ipId);
      pstmt.setInt(2,startPort);
      pstmt.setInt(3,endPort);
      pstmt.setString(4,protocol);
      pstmt.setLong(5,accountId);
      pstmt.setLong(6,domainId);
      pstmt.setLong(7,networkId);
      pstmt.setString(8,UUID.randomUUID().toString());
      pstmt.setLong(9,id);
      s_logger.debug(""String_Node_Str"" + pstmt);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setInt(1,startPort);
      pstmt.setInt(2,endPort);
      pstmt.setString(3,protocol);
      ResultSet rs1=pstmt.executeQuery();
      if (rs1.next()) {
        firewallRuleId=rs1.getLong(1);
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + protocol + ""String_Node_Str""+ startPort+ ""String_Node_Str""+ endPort);
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,id);
      ResultSet rs2=pstmt.executeQuery();
      if (rs2.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,firewallRuleId);
        pstmt.setLong(2,id);
        s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str""+ firewallRuleId+ ""String_Node_Str""+ pstmt);
        pstmt.executeUpdate();
      }
 else {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,firewallRuleId);
        s_logger.debug(""String_Node_Str"" + firewallRuleId + ""String_Node_Str""+ pstmt);
        pstmt.executeUpdate();
      }
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + currentRuleId,e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}","private void updateFirewallRules(Connection conn){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  long currentRuleId=0;
  try {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      long ipId=rs.getLong(2);
      int startPort=rs.getInt(3);
      int endPort=rs.getInt(4);
      String protocol=rs.getString(5);
      long accountId=rs.getLong(6);
      long domainId=rs.getLong(7);
      long networkId=rs.getLong(8);
      currentRuleId=id;
      Long firewallRuleId=null;
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,ipId);
      pstmt.setInt(2,startPort);
      pstmt.setInt(3,endPort);
      pstmt.setString(4,protocol);
      pstmt.setLong(5,accountId);
      pstmt.setLong(6,domainId);
      pstmt.setLong(7,networkId);
      pstmt.setString(8,UUID.randomUUID().toString());
      pstmt.setLong(9,id);
      s_logger.debug(""String_Node_Str"" + pstmt);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setInt(1,startPort);
      pstmt.setInt(2,endPort);
      pstmt.setString(3,protocol);
      pstmt.setLong(4,ipId);
      pstmt.setLong(5,networkId);
      ResultSet rs1=pstmt.executeQuery();
      if (rs1.next()) {
        firewallRuleId=rs1.getLong(1);
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + protocol + ""String_Node_Str""+ startPort+ ""String_Node_Str""+ endPort);
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,id);
      ResultSet rs2=pstmt.executeQuery();
      if (rs2.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,firewallRuleId);
        pstmt.setLong(2,id);
        s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str""+ firewallRuleId+ ""String_Node_Str""+ pstmt);
        pstmt.executeUpdate();
      }
 else {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,firewallRuleId);
        s_logger.debug(""String_Node_Str"" + firewallRuleId + ""String_Node_Str""+ pstmt);
        pstmt.executeUpdate();
      }
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + currentRuleId,e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}"
89351,"protected Pair<Map<Volume,List<StoragePool>>,List<Volume>> findSuitablePoolsForVolumes(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid,int returnUpTo){
  List<VolumeVO> volumesTobeCreated=_volsDao.findUsableVolumesForInstance(vmProfile.getId());
  Map<Volume,List<StoragePool>> suitableVolumeStoragePools=new HashMap<Volume,List<StoragePool>>();
  List<Volume> readyAndReusedVolumes=new ArrayList<Volume>();
  for (  VolumeVO toBeCreated : volumesTobeCreated) {
    s_logger.debug(""String_Node_Str"" + toBeCreated.getId() + ""String_Node_Str""+ toBeCreated.getVolumeType().name()+ ""String_Node_Str"");
    if (plan.getPoolId() != null) {
      if (toBeCreated.getState() == Volume.State.Ready && toBeCreated.getPoolId() != null) {
        s_logger.debug(""String_Node_Str"" + toBeCreated.getPoolId());
        List<StoragePool> suitablePools=new ArrayList<StoragePool>();
        StoragePoolVO pool=_storagePoolDao.findById(toBeCreated.getPoolId());
        if (!pool.isInMaintenance()) {
          if (!avoid.shouldAvoid(pool)) {
            long exstPoolDcId=pool.getDataCenterId();
            Long exstPoolPodId=pool.getPodId();
            Long exstPoolClusterId=pool.getClusterId();
            if (plan.getDataCenterId() == exstPoolDcId && plan.getPodId() == exstPoolPodId && plan.getClusterId() == exstPoolClusterId) {
              s_logger.debug(""String_Node_Str"");
              suitablePools.add(pool);
              suitableVolumeStoragePools.put(toBeCreated,suitablePools);
              readyAndReusedVolumes.add(toBeCreated);
              continue;
            }
 else {
              s_logger.debug(""String_Node_Str"");
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
 else {
          s_logger.debug(""String_Node_Str"");
        }
      }
    }
    s_logger.debug(""String_Node_Str"");
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(toBeCreated.getDiskOfferingId());
    DiskProfile diskProfile=new DiskProfile(toBeCreated,diskOffering,vmProfile.getHypervisorType());
    boolean useLocalStorage=false;
    if (vmProfile.getType() != VirtualMachine.Type.User) {
      String ssvmUseLocalStorage=_configDao.getValue(Config.SystemVMUseLocalStorage.key());
      if (ssvmUseLocalStorage.equalsIgnoreCase(""String_Node_Str"")) {
        useLocalStorage=true;
      }
    }
 else {
      useLocalStorage=diskOffering.getUseLocalStorage();
    }
    diskProfile.setUseLocalStorage(useLocalStorage);
    boolean foundPotentialPools=false;
    Enumeration<StoragePoolAllocator> enPool=_storagePoolAllocators.enumeration();
    while (enPool.hasMoreElements()) {
      final StoragePoolAllocator allocator=enPool.nextElement();
      final List<StoragePool> suitablePools=allocator.allocateToPool(diskProfile,vmProfile.getTemplate(),plan,avoid,returnUpTo);
      if (suitablePools != null && !suitablePools.isEmpty()) {
        suitableVolumeStoragePools.put(toBeCreated,suitablePools);
        foundPotentialPools=true;
        break;
      }
    }
    if (!foundPotentialPools) {
      s_logger.debug(""String_Node_Str"" + toBeCreated + ""String_Node_Str""+ plan.getClusterId());
      suitableVolumeStoragePools.clear();
      break;
    }
  }
  if (suitableVolumeStoragePools.isEmpty()) {
    s_logger.debug(""String_Node_Str"");
  }
  return new Pair<Map<Volume,List<StoragePool>>,List<Volume>>(suitableVolumeStoragePools,readyAndReusedVolumes);
}","protected Pair<Map<Volume,List<StoragePool>>,List<Volume>> findSuitablePoolsForVolumes(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid,int returnUpTo){
  List<VolumeVO> volumesTobeCreated=_volsDao.findUsableVolumesForInstance(vmProfile.getId());
  Map<Volume,List<StoragePool>> suitableVolumeStoragePools=new HashMap<Volume,List<StoragePool>>();
  List<Volume> readyAndReusedVolumes=new ArrayList<Volume>();
  for (  VolumeVO toBeCreated : volumesTobeCreated) {
    s_logger.debug(""String_Node_Str"" + toBeCreated.getId() + ""String_Node_Str""+ toBeCreated.getVolumeType().name()+ ""String_Node_Str"");
    if (plan.getPoolId() != null) {
      if (toBeCreated.getState() == Volume.State.Ready && toBeCreated.getPoolId() != null) {
        s_logger.debug(""String_Node_Str"" + toBeCreated.getPoolId());
        List<StoragePool> suitablePools=new ArrayList<StoragePool>();
        StoragePoolVO pool=_storagePoolDao.findById(toBeCreated.getPoolId());
        if (!pool.isInMaintenance()) {
          if (!avoid.shouldAvoid(pool)) {
            long exstPoolDcId=pool.getDataCenterId();
            long exstPoolPodId=pool.getPodId() != null ? pool.getPodId() : -1;
            long exstPoolClusterId=pool.getClusterId() != null ? pool.getClusterId() : -1;
            if (plan.getDataCenterId() == exstPoolDcId && plan.getPodId() == exstPoolPodId && plan.getClusterId() == exstPoolClusterId) {
              s_logger.debug(""String_Node_Str"");
              suitablePools.add(pool);
              suitableVolumeStoragePools.put(toBeCreated,suitablePools);
              readyAndReusedVolumes.add(toBeCreated);
              continue;
            }
 else {
              s_logger.debug(""String_Node_Str"");
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
 else {
          s_logger.debug(""String_Node_Str"");
        }
      }
    }
    s_logger.debug(""String_Node_Str"");
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(toBeCreated.getDiskOfferingId());
    DiskProfile diskProfile=new DiskProfile(toBeCreated,diskOffering,vmProfile.getHypervisorType());
    boolean useLocalStorage=false;
    if (vmProfile.getType() != VirtualMachine.Type.User) {
      String ssvmUseLocalStorage=_configDao.getValue(Config.SystemVMUseLocalStorage.key());
      if (ssvmUseLocalStorage.equalsIgnoreCase(""String_Node_Str"")) {
        useLocalStorage=true;
      }
    }
 else {
      useLocalStorage=diskOffering.getUseLocalStorage();
    }
    diskProfile.setUseLocalStorage(useLocalStorage);
    boolean foundPotentialPools=false;
    Enumeration<StoragePoolAllocator> enPool=_storagePoolAllocators.enumeration();
    while (enPool.hasMoreElements()) {
      final StoragePoolAllocator allocator=enPool.nextElement();
      final List<StoragePool> suitablePools=allocator.allocateToPool(diskProfile,vmProfile.getTemplate(),plan,avoid,returnUpTo);
      if (suitablePools != null && !suitablePools.isEmpty()) {
        suitableVolumeStoragePools.put(toBeCreated,suitablePools);
        foundPotentialPools=true;
        break;
      }
    }
    if (!foundPotentialPools) {
      s_logger.debug(""String_Node_Str"" + toBeCreated + ""String_Node_Str""+ plan.getClusterId());
      suitableVolumeStoragePools.clear();
      break;
    }
  }
  if (suitableVolumeStoragePools.isEmpty()) {
    s_logger.debug(""String_Node_Str"");
  }
  return new Pair<Map<Volume,List<StoragePool>>,List<Volume>>(suitableVolumeStoragePools,readyAndReusedVolumes);
}"
89352,"@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    NetworkOffering offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters(),offering.getRedundantRouter());
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}","@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    NetworkOffering offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters(),offering.getRedundantRouter());
    if ((routers == null) || (routers.size() == 0)) {
      throw new ResourceUnavailableException(""String_Node_Str"",this.getClass(),0);
    }
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}"
89353,"@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    boolean isRedundant=_configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"");
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters(),isRedundant);
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}","@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    boolean isRedundant=_configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"");
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters(),isRedundant);
    if ((routers == null) || (routers.size() == 0)) {
      throw new ResourceUnavailableException(""String_Node_Str"",this.getClass(),0);
    }
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}"
89354,"private void updateFirewallRules(Connection conn){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  long currentRuleId=0;
  try {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      long ipId=rs.getLong(2);
      int startPort=rs.getInt(3);
      int endPort=rs.getInt(4);
      String protocol=rs.getString(5);
      long accountId=rs.getLong(6);
      long domainId=rs.getLong(7);
      long networkId=rs.getLong(8);
      currentRuleId=id;
      Long firewallRuleId=null;
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,ipId);
      pstmt.setInt(2,startPort);
      pstmt.setInt(3,endPort);
      pstmt.setString(4,protocol);
      pstmt.setLong(5,accountId);
      pstmt.setLong(6,domainId);
      pstmt.setLong(7,networkId);
      pstmt.setString(8,UUID.randomUUID().toString());
      pstmt.setLong(9,id);
      s_logger.debug(""String_Node_Str"" + pstmt);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setInt(1,startPort);
      pstmt.setInt(2,endPort);
      pstmt.setString(3,protocol);
      ResultSet rs1=pstmt.executeQuery();
      if (rs1.next()) {
        firewallRuleId=rs1.getLong(1);
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + protocol + ""String_Node_Str""+ startPort+ ""String_Node_Str""+ endPort);
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,id);
      ResultSet rs2=pstmt.executeQuery();
      if (rs2.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,firewallRuleId);
        pstmt.setLong(2,id);
        s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str""+ firewallRuleId+ ""String_Node_Str""+ pstmt);
        pstmt.executeUpdate();
      }
 else {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,firewallRuleId);
        s_logger.debug(""String_Node_Str"" + firewallRuleId + ""String_Node_Str""+ pstmt);
        pstmt.executeUpdate();
      }
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + currentRuleId,e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}","private void updateFirewallRules(Connection conn){
  PreparedStatement pstmt=null;
  ResultSet rs=null;
  long currentRuleId=0;
  try {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    rs=pstmt.executeQuery();
    while (rs.next()) {
      long id=rs.getLong(1);
      long ipId=rs.getLong(2);
      int startPort=rs.getInt(3);
      int endPort=rs.getInt(4);
      String protocol=rs.getString(5);
      long accountId=rs.getLong(6);
      long domainId=rs.getLong(7);
      long networkId=rs.getLong(8);
      currentRuleId=id;
      Long firewallRuleId=null;
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,ipId);
      pstmt.setInt(2,startPort);
      pstmt.setInt(3,endPort);
      pstmt.setString(4,protocol);
      pstmt.setLong(5,accountId);
      pstmt.setLong(6,domainId);
      pstmt.setLong(7,networkId);
      pstmt.setString(8,UUID.randomUUID().toString());
      pstmt.setLong(9,id);
      s_logger.debug(""String_Node_Str"" + pstmt);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setInt(1,startPort);
      pstmt.setInt(2,endPort);
      pstmt.setString(3,protocol);
      pstmt.setLong(4,ipId);
      pstmt.setLong(5,networkId);
      ResultSet rs1=pstmt.executeQuery();
      if (rs1.next()) {
        firewallRuleId=rs1.getLong(1);
      }
 else {
        throw new CloudRuntimeException(""String_Node_Str"" + protocol + ""String_Node_Str""+ startPort+ ""String_Node_Str""+ endPort);
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,id);
      ResultSet rs2=pstmt.executeQuery();
      if (rs2.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,firewallRuleId);
        pstmt.setLong(2,id);
        s_logger.debug(""String_Node_Str"" + id + ""String_Node_Str""+ firewallRuleId+ ""String_Node_Str""+ pstmt);
        pstmt.executeUpdate();
      }
 else {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,firewallRuleId);
        s_logger.debug(""String_Node_Str"" + firewallRuleId + ""String_Node_Str""+ pstmt);
        pstmt.executeUpdate();
      }
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + currentRuleId,e);
  }
 finally {
    try {
      if (rs != null) {
        rs.close();
      }
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}"
89355,"@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    boolean isRedundant=_configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"");
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters(),isRedundant);
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}","@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    boolean isRedundant=_configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"");
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters(),isRedundant);
    if ((routers == null) || (routers.size() == 0)) {
      throw new ResourceUnavailableException(""String_Node_Str"",this.getClass(),0);
    }
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}"
89356,"public List<String> getSourceCidrList(){
  return null;
}","@Override public List<String> getSourceCidrList(){
  return null;
}"
89357,"public String[][] generateFwRules(){
  String[][] result=new String[2][];
  Set<String> toAdd=new HashSet<String>();
  for (  FirewallRuleTO fwTO : rules) {
    if (fwTO.revoked() == true)     continue;
    List<String> cidr;
    StringBuilder sb=new StringBuilder();
    sb.append(fwTO.getSrcIp()).append(""String_Node_Str"").append(fwTO.getProtocol()).append(""String_Node_Str"");
    if (""String_Node_Str"".compareTo(fwTO.getProtocol()) == 0) {
      sb.append(fwTO.getIcmpType()).append(""String_Node_Str"").append(fwTO.getIcmpCode()).append(""String_Node_Str"");
    }
 else     if (fwTO.getStringSrcPortRange() == null)     sb.append(""String_Node_Str"").append(""String_Node_Str"");
 else     sb.append(fwTO.getStringSrcPortRange()).append(""String_Node_Str"");
    cidr=fwTO.getSourceCidrList();
    if (cidr == null || cidr.isEmpty()) {
      sb.append(""String_Node_Str"");
    }
 else {
      Boolean firstEntry=true;
      for (      String tag : cidr) {
        if (!firstEntry)         sb.append(""String_Node_Str"");
        sb.append(tag);
        firstEntry=false;
      }
    }
    sb.append(""String_Node_Str"");
    String fwRuleEntry=sb.toString();
    toAdd.add(fwRuleEntry);
  }
  result[0]=toAdd.toArray(new String[toAdd.size()]);
  return result;
}","public String[][] generateFwRules(){
  String[][] result=new String[2][];
  Set<String> toAdd=new HashSet<String>();
  for (  FirewallRuleTO fwTO : rules) {
    if (fwTO.revoked() == true) {
      StringBuilder sb=new StringBuilder();
      sb.append(fwTO.getSrcIp()).append(""String_Node_Str"");
      String fwRuleEntry=sb.toString();
      toAdd.add(fwRuleEntry);
      continue;
    }
    List<String> cidr;
    StringBuilder sb=new StringBuilder();
    sb.append(fwTO.getSrcIp()).append(""String_Node_Str"").append(fwTO.getProtocol()).append(""String_Node_Str"");
    if (""String_Node_Str"".compareTo(fwTO.getProtocol()) == 0) {
      sb.append(fwTO.getIcmpType()).append(""String_Node_Str"").append(fwTO.getIcmpCode()).append(""String_Node_Str"");
    }
 else     if (fwTO.getStringSrcPortRange() == null)     sb.append(""String_Node_Str"").append(""String_Node_Str"");
 else     sb.append(fwTO.getStringSrcPortRange()).append(""String_Node_Str"");
    cidr=fwTO.getSourceCidrList();
    if (cidr == null || cidr.isEmpty()) {
      sb.append(""String_Node_Str"");
    }
 else {
      Boolean firstEntry=true;
      for (      String tag : cidr) {
        if (!firstEntry)         sb.append(""String_Node_Str"");
        sb.append(tag);
        firstEntry=false;
      }
    }
    sb.append(""String_Node_Str"");
    String fwRuleEntry=sb.toString();
    toAdd.add(fwRuleEntry);
  }
  result[0]=toAdd.toArray(new String[toAdd.size()]);
  return result;
}"
89358,"void updateNicProfile(NicProfile profile,Network network);","/** 
 * @deprecated This method should not be here in the first place. What does this really mean? Is it always persistedin the nic? When is it persisted in the nic? When is it called? No Idea.
 * @param profile
 * @param network
 */
@Deprecated void updateNicProfile(NicProfile profile,Network network);"
89359,"/** 
 * allocate a nic in this network.  This method implementation cannot take a long time as  it is meant to allocate for the DB.
 * @param network configuration to allocate the nic in.
 * @param nic user specified 
 * @param vm virtual machine the network configuraiton will be in.
 * @return NicProfile.
 * @throws InsufficientVirtualNetworkCapcityException
 * @throws InsufficientAddressCapacityException
 */
NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException ;","/** 
 * allocate a nic in this network. This method implementation cannot take a long time as it is meant to allocate for the DB.
 * @param network configuration to allocate the nic in.
 * @param nic user specified
 * @param vm virtual machine the network configuration will be in.
 * @return NicProfile.
 * @throws InsufficientVirtualNetworkCapcityException
 * @throws InsufficientAddressCapacityException
 */
NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException ;"
89360,"/** 
 * Fully implement the network configuration as specified.
 * @param network network configuration 
 * @param offering offering that the network configuration was based on.
 * @param destination where were deploying to.
 * @return a fully implemented NetworkConfiguration.
 * @throws InsufficientVirtualNetworkCapcityException TODO
 */
Network implement(Network network,NetworkOffering offering,DeployDestination destination,ReservationContext context) throws InsufficientVirtualNetworkCapcityException ;","/** 
 * Fully implement the network configuration as specified.
 * @param network network configuration
 * @param offering offering that the network configuration was based on.
 * @param destination where were deploying to.
 * @return a fully implemented NetworkConfiguration.
 * @throws InsufficientVirtualNetworkCapcityException
 */
Network implement(Network network,NetworkOffering offering,DeployDestination destination,ReservationContext context) throws InsufficientVirtualNetworkCapcityException ;"
89361,"void updateNicProfile(NicProfile profile,Network network);","/** 
 * @deprecated This method should not be here in the first place. What does this really mean? Is it always persistedin the nic? When is it persisted in the nic? When is it called? No Idea.
 * @param profile
 * @param network
 */
@Deprecated void updateNicProfile(NicProfile profile,Network network);"
89362,"/** 
 * allocate a nic in this network.  This method implementation cannot take a long time as  it is meant to allocate for the DB.
 * @param network configuration to allocate the nic in.
 * @param nic user specified 
 * @param vm virtual machine the network configuraiton will be in.
 * @return NicProfile.
 * @throws InsufficientVirtualNetworkCapcityException
 * @throws InsufficientAddressCapacityException
 */
NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException ;","/** 
 * allocate a nic in this network. This method implementation cannot take a long time as it is meant to allocate for the DB.
 * @param network configuration to allocate the nic in.
 * @param nic user specified
 * @param vm virtual machine the network configuration will be in.
 * @return NicProfile.
 * @throws InsufficientVirtualNetworkCapcityException
 * @throws InsufficientAddressCapacityException
 */
NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException ;"
89363,"/** 
 * Fully implement the network configuration as specified.
 * @param network network configuration 
 * @param offering offering that the network configuration was based on.
 * @param destination where were deploying to.
 * @return a fully implemented NetworkConfiguration.
 * @throws InsufficientVirtualNetworkCapcityException TODO
 */
Network implement(Network network,NetworkOffering offering,DeployDestination destination,ReservationContext context) throws InsufficientVirtualNetworkCapcityException ;","/** 
 * Fully implement the network configuration as specified.
 * @param network network configuration
 * @param offering offering that the network configuration was based on.
 * @param destination where were deploying to.
 * @return a fully implemented NetworkConfiguration.
 * @throws InsufficientVirtualNetworkCapcityException
 */
Network implement(Network network,NetworkOffering offering,DeployDestination destination,ReservationContext context) throws InsufficientVirtualNetworkCapcityException ;"
89364,"void updateNicProfile(NicProfile profile,Network network);","/** 
 * @deprecated This method should not be here in the first place. What does this really mean? Is it always persistedin the nic? When is it persisted in the nic? When is it called? No Idea.
 * @param profile
 * @param network
 */
@Deprecated void updateNicProfile(NicProfile profile,Network network);"
89365,"/** 
 * allocate a nic in this network.  This method implementation cannot take a long time as  it is meant to allocate for the DB.
 * @param network configuration to allocate the nic in.
 * @param nic user specified 
 * @param vm virtual machine the network configuraiton will be in.
 * @return NicProfile.
 * @throws InsufficientVirtualNetworkCapcityException
 * @throws InsufficientAddressCapacityException
 */
NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException ;","/** 
 * allocate a nic in this network. This method implementation cannot take a long time as it is meant to allocate for the DB.
 * @param network configuration to allocate the nic in.
 * @param nic user specified
 * @param vm virtual machine the network configuration will be in.
 * @return NicProfile.
 * @throws InsufficientVirtualNetworkCapcityException
 * @throws InsufficientAddressCapacityException
 */
NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException ;"
89366,"/** 
 * Fully implement the network configuration as specified.
 * @param network network configuration 
 * @param offering offering that the network configuration was based on.
 * @param destination where were deploying to.
 * @return a fully implemented NetworkConfiguration.
 * @throws InsufficientVirtualNetworkCapcityException TODO
 */
Network implement(Network network,NetworkOffering offering,DeployDestination destination,ReservationContext context) throws InsufficientVirtualNetworkCapcityException ;","/** 
 * Fully implement the network configuration as specified.
 * @param network network configuration
 * @param offering offering that the network configuration was based on.
 * @param destination where were deploying to.
 * @return a fully implemented NetworkConfiguration.
 * @throws InsufficientVirtualNetworkCapcityException
 */
Network implement(Network network,NetworkOffering offering,DeployDestination destination,ReservationContext context) throws InsufficientVirtualNetworkCapcityException ;"
89367,"@Override public void run(){
  final List<DomainRouterVO> routers=_routerDao.listVirtualUpByHostId(null);
  s_logger.debug(""String_Node_Str"" + routers.size() + ""String_Node_Str"");
  updateRoutersRedundantState(routers);
  checkDuplicateMaster(routers);
}","@Override public void run(){
  try {
    final List<DomainRouterVO> routers=_routerDao.listVirtualUpByHostId(null);
    s_logger.debug(""String_Node_Str"" + routers.size() + ""String_Node_Str"");
    updateRoutersRedundantState(routers);
    checkDuplicateMaster(routers);
  }
 catch (  Exception ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
}"
89368,"@Override public void run(){
  final List<DomainRouterVO> routers=_routerDao.listVirtualUpByHostId(null);
  s_logger.debug(""String_Node_Str"" + routers.size() + ""String_Node_Str"");
  updateRoutersRedundantState(routers);
  checkDuplicateMaster(routers);
}","@Override public void run(){
  try {
    final List<DomainRouterVO> routers=_routerDao.listVirtualUpByHostId(null);
    s_logger.debug(""String_Node_Str"" + routers.size() + ""String_Node_Str"");
    updateRoutersRedundantState(routers);
    checkDuplicateMaster(routers);
  }
 catch (  Exception ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
}"
89369,"@Override public void run(){
  final List<DomainRouterVO> routers=_routerDao.listVirtualUpByHostId(null);
  s_logger.debug(""String_Node_Str"" + routers.size() + ""String_Node_Str"");
  updateRoutersRedundantState(routers);
  checkDuplicateMaster(routers);
}","@Override public void run(){
  try {
    final List<DomainRouterVO> routers=_routerDao.listVirtualUpByHostId(null);
    s_logger.debug(""String_Node_Str"" + routers.size() + ""String_Node_Str"");
    updateRoutersRedundantState(routers);
    checkDuplicateMaster(routers);
  }
 catch (  Exception ex) {
    s_logger.error(""String_Node_Str"",ex);
  }
}"
89370,"@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest,network.getTrafficType())) {
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
    params.put(VirtualMachineProfile.Param.RestartNetwork,true);
    List<DomainRouterVO> routers=_routerMgr.deployDhcp(network,dest,uservm.getOwner(),uservm.getParameters());
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}","@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest,network.getTrafficType())) {
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
    params.put(VirtualMachineProfile.Param.RestartNetwork,true);
    List<DomainRouterVO> routers=_routerMgr.deployDhcp(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters());
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}"
89371,"@Override public boolean implement(Network network,NetworkOffering offering,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  if (!canHandle(network.getGuestType(),dest,offering.getTrafficType())) {
    return false;
  }
  Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
  params.put(VirtualMachineProfile.Param.RestartNetwork,true);
  _routerMgr.deployDhcp(network,dest,context.getAccount(),params);
  return true;
}","@Override public boolean implement(Network network,NetworkOffering offering,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  if (!canHandle(network.getGuestType(),dest,offering.getTrafficType())) {
    return false;
  }
  Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
  params.put(VirtualMachineProfile.Param.RestartNetwork,true);
  _routerMgr.deployDhcp(network,dest,_accountMgr.getAccount(network.getAccountId()),params);
  return true;
}"
89372,"@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    NetworkOffering offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,uservm.getOwner(),uservm.getParameters(),offering.getRedundantRouter());
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}","@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    NetworkOffering offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters(),offering.getRedundantRouter());
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}"
89373,"@Override public boolean implement(Network guestConfig,NetworkOffering offering,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  if (!canHandle(guestConfig.getGuestType(),dest.getDataCenter())) {
    return false;
  }
  Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
  params.put(VirtualMachineProfile.Param.RestartNetwork,true);
  _routerMgr.deployVirtualRouter(guestConfig,dest,context.getAccount(),params,offering.getRedundantRouter());
  return true;
}","@Override public boolean implement(Network guestConfig,NetworkOffering offering,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  if (!canHandle(guestConfig.getGuestType(),dest.getDataCenter())) {
    return false;
  }
  Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
  params.put(VirtualMachineProfile.Param.RestartNetwork,true);
  _routerMgr.deployVirtualRouter(guestConfig,dest,_accountMgr.getAccount(guestConfig.getAccountId()),params,offering.getRedundantRouter());
  return true;
}"
89374,"@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest,network.getTrafficType())) {
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
    params.put(VirtualMachineProfile.Param.RestartNetwork,true);
    List<DomainRouterVO> routers=_routerMgr.deployDhcp(network,dest,uservm.getOwner(),uservm.getParameters());
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}","@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest,network.getTrafficType())) {
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
    params.put(VirtualMachineProfile.Param.RestartNetwork,true);
    List<DomainRouterVO> routers=_routerMgr.deployDhcp(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters());
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}"
89375,"@Override public boolean implement(Network network,NetworkOffering offering,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  if (!canHandle(network.getGuestType(),dest,offering.getTrafficType())) {
    return false;
  }
  Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
  params.put(VirtualMachineProfile.Param.RestartNetwork,true);
  _routerMgr.deployDhcp(network,dest,context.getAccount(),params);
  return true;
}","@Override public boolean implement(Network network,NetworkOffering offering,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  if (!canHandle(network.getGuestType(),dest,offering.getTrafficType())) {
    return false;
  }
  Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
  params.put(VirtualMachineProfile.Param.RestartNetwork,true);
  _routerMgr.deployDhcp(network,dest,_accountMgr.getAccount(network.getAccountId()),params);
  return true;
}"
89376,"@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    boolean isRedundant=_configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"");
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,uservm.getOwner(),uservm.getParameters(),isRedundant);
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}","@Override public boolean prepare(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, InsufficientCapacityException, ResourceUnavailableException {
  if (canHandle(network.getGuestType(),dest.getDataCenter())) {
    boolean isRedundant=_configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"");
    if (vm.getType() != VirtualMachine.Type.User) {
      return false;
    }
    @SuppressWarnings(""String_Node_Str"") VirtualMachineProfile<UserVm> uservm=(VirtualMachineProfile<UserVm>)vm;
    List<DomainRouterVO> routers=_routerMgr.deployVirtualRouter(network,dest,_accountMgr.getAccount(network.getAccountId()),uservm.getParameters(),isRedundant);
    List<VirtualRouter> rets=_routerMgr.addVirtualMachineIntoNetwork(network,nic,uservm,dest,context,routers);
    return (rets != null) && (!rets.isEmpty());
  }
 else {
    return false;
  }
}"
89377,"@Override public boolean implement(Network guestConfig,NetworkOffering offering,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  boolean isRedundant=_configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"");
  if (!canHandle(guestConfig.getGuestType(),dest.getDataCenter())) {
    return false;
  }
  Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
  params.put(VirtualMachineProfile.Param.RestartNetwork,true);
  _routerMgr.deployVirtualRouter(guestConfig,dest,context.getAccount(),params,isRedundant);
  return true;
}","@Override public boolean implement(Network guestConfig,NetworkOffering offering,DeployDestination dest,ReservationContext context) throws ResourceUnavailableException, ConcurrentOperationException, InsufficientCapacityException {
  boolean isRedundant=_configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"");
  if (!canHandle(guestConfig.getGuestType(),dest.getDataCenter())) {
    return false;
  }
  Map<VirtualMachineProfile.Param,Object> params=new HashMap<VirtualMachineProfile.Param,Object>(1);
  params.put(VirtualMachineProfile.Param.RestartNetwork,true);
  _routerMgr.deployVirtualRouter(guestConfig,dest,_accountMgr.getAccount(guestConfig.getAccountId()),params,isRedundant);
  return true;
}"
89378,"@Override public Integer getIcmpCode(){
  return null;
}","public Integer getIcmpCode(){
  return null;
}"
89379,"@Override public Integer getIcmpType(){
  return null;
}","public Integer getIcmpType(){
  return null;
}"
89380,"@Override @DB public LoadBalancer handleCreateLoadBalancerRule(CreateLoadBalancerRuleCmd lb,Account account) throws InsufficientAddressCapacityException, NetworkRuleConflictException {
  Long ipId=lb.getSourceIpAddressId();
  if (ipId != null && getNetworkToDeployLb(ipId) == null) {
    return null;
  }
  boolean newIp=false;
  account=_accountDao.acquireInLockTable(account.getId());
  if (account == null) {
    s_logger.warn(""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  try {
    List<LoadBalancerVO> existingLbs=findExistingLoadBalancers(lb.getName(),lb.getSourceIpAddressId(),lb.getAccountId(),lb.getDomainId(),lb.getSourcePortStart());
    if (existingLbs == null) {
      existingLbs=findExistingLoadBalancers(lb.getName(),lb.getSourceIpAddressId(),lb.getAccountId(),lb.getDomainId(),null);
      if (existingLbs == null) {
        if (lb.getSourceIpAddressId() != null) {
          existingLbs=findExistingLoadBalancers(lb.getName(),null,lb.getAccountId(),lb.getDomainId(),null);
          if (existingLbs != null) {
            throw new InvalidParameterValueException(""String_Node_Str"" + lb.getName() + ""String_Node_Str""+ lb.getSourceIpAddressId());
          }
        }
 else {
          s_logger.debug(""String_Node_Str"");
          PublicIp ip=allocIp(lb,account);
          ipId=ip.getId();
          newIp=true;
        }
      }
 else {
        ipId=existingLbs.get(0).getSourceIpAddressId();
        s_logger.debug(""String_Node_Str"" + ipId);
      }
    }
 else {
      s_logger.warn(""String_Node_Str"");
      throw new NetworkRuleConflictException(""String_Node_Str"");
    }
    NetworkVO network=getNetworkToDeployLb(ipId);
    IPAddressVO ipAddr=_ipAddressDao.findById(ipId);
    long networkId=network.getId();
    LoadBalancer result=null;
    try {
      lb.setSourceIpAddressId(ipId);
      result=_lbMgr.createLoadBalancer(lb);
    }
 catch (    NetworkRuleConflictException e) {
      s_logger.warn(""String_Node_Str"");
      if (newIp) {
        releaseIp(ipId,UserContext.current().getCallerUserId(),account);
      }
      throw e;
    }
    DomainRouterVO elbVm=null;
    if (existingLbs == null) {
      elbVm=findELBVmWithCapacity(network,ipAddr);
      if (elbVm == null) {
        elbVm=deployLoadBalancerVM(networkId,ipAddr,account.getId());
        if (elbVm == null) {
          s_logger.warn(""String_Node_Str"" + ipAddr + ""String_Node_Str""+ network+ ""String_Node_Str""+ lb.getName());
          if (newIp)           releaseIp(ipId,UserContext.current().getCallerUserId(),account);
        }
      }
    }
 else {
      ElasticLbVmMapVO elbVmMap=_elbVmMapDao.findOneByIp(ipId);
      if (elbVmMap != null) {
        elbVm=_routerDao.findById(elbVmMap.getElbVmId());
      }
    }
    if (elbVm == null) {
      s_logger.warn(""String_Node_Str"");
      s_logger.warn(""String_Node_Str"");
      _lbDao.remove(result.getId());
      return null;
    }
    ElasticLbVmMapVO mapping=new ElasticLbVmMapVO(ipId,elbVm.getId(),result.getId());
    _elbVmMapDao.persist(mapping);
    return result;
  }
  finally {
    if (account != null) {
      _accountDao.releaseFromLockTable(account.getId());
    }
  }
}","@Override @DB public LoadBalancer handleCreateLoadBalancerRule(CreateLoadBalancerRuleCmd lb,Account account) throws InsufficientAddressCapacityException, NetworkRuleConflictException {
  Long ipId=lb.getSourceIpAddressId();
  if (ipId != null && getNetworkToDeployLb(ipId) == null) {
    return null;
  }
  boolean newIp=false;
  account=_accountDao.acquireInLockTable(account.getId());
  if (account == null) {
    s_logger.warn(""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  try {
    List<LoadBalancerVO> existingLbs=findExistingLoadBalancers(lb.getName(),lb.getSourceIpAddressId(),lb.getAccountId(),lb.getDomainId(),lb.getSourcePortStart());
    if (existingLbs == null) {
      existingLbs=findExistingLoadBalancers(lb.getName(),lb.getSourceIpAddressId(),lb.getAccountId(),lb.getDomainId(),null);
      if (existingLbs == null) {
        if (lb.getSourceIpAddressId() != null) {
          existingLbs=findExistingLoadBalancers(lb.getName(),null,lb.getAccountId(),lb.getDomainId(),null);
          if (existingLbs != null) {
            throw new InvalidParameterValueException(""String_Node_Str"" + lb.getName() + ""String_Node_Str""+ lb.getSourceIpAddressId());
          }
        }
 else {
          s_logger.debug(""String_Node_Str"");
          PublicIp ip=allocIp(lb,account);
          ipId=ip.getId();
          newIp=true;
        }
      }
 else {
        ipId=existingLbs.get(0).getSourceIpAddressId();
        s_logger.debug(""String_Node_Str"" + ipId);
      }
    }
 else {
      s_logger.warn(""String_Node_Str"");
      throw new NetworkRuleConflictException(""String_Node_Str"");
    }
    NetworkVO network=getNetworkToDeployLb(ipId);
    IPAddressVO ipAddr=_ipAddressDao.findById(ipId);
    long networkId=network.getId();
    LoadBalancer result=null;
    try {
      lb.setSourceIpAddressId(ipId);
      result=_lbMgr.createLoadBalancer(lb,false);
    }
 catch (    NetworkRuleConflictException e) {
      s_logger.warn(""String_Node_Str"");
      if (newIp) {
        releaseIp(ipId,UserContext.current().getCallerUserId(),account);
      }
      throw e;
    }
    DomainRouterVO elbVm=null;
    if (existingLbs == null) {
      elbVm=findELBVmWithCapacity(network,ipAddr);
      if (elbVm == null) {
        elbVm=deployLoadBalancerVM(networkId,ipAddr,account.getId());
        if (elbVm == null) {
          s_logger.warn(""String_Node_Str"" + ipAddr + ""String_Node_Str""+ network+ ""String_Node_Str""+ lb.getName());
          if (newIp)           releaseIp(ipId,UserContext.current().getCallerUserId(),account);
        }
      }
    }
 else {
      ElasticLbVmMapVO elbVmMap=_elbVmMapDao.findOneByIp(ipId);
      if (elbVmMap != null) {
        elbVm=_routerDao.findById(elbVmMap.getElbVmId());
      }
    }
    if (elbVm == null) {
      s_logger.warn(""String_Node_Str"");
      s_logger.warn(""String_Node_Str"");
      _lbDao.remove(result.getId());
      return null;
    }
    ElasticLbVmMapVO mapping=new ElasticLbVmMapVO(ipId,elbVm.getId(),result.getId());
    _elbVmMapDao.persist(mapping);
    return result;
  }
  finally {
    if (account != null) {
      _accountDao.releaseFromLockTable(account.getId());
    }
  }
}"
89381,LoadBalancer createLoadBalancer(CreateLoadBalancerRuleCmd lb) throws NetworkRuleConflictException ;,"LoadBalancer createLoadBalancer(CreateLoadBalancerRuleCmd lb,boolean openFirewall) throws NetworkRuleConflictException ;"
89382,"@Override @DB @ActionEvent(eventType=EventTypes.EVENT_LOAD_BALANCER_CREATE,eventDescription=""String_Node_Str"") public LoadBalancer createLoadBalancerRule(CreateLoadBalancerRuleCmd lb){
}","@Override @DB @ActionEvent(eventType=EventTypes.EVENT_LOAD_BALANCER_CREATE,eventDescription=""String_Node_Str"") public LoadBalancer createLoadBalancerRule(CreateLoadBalancerRuleCmd lb,boolean openFirewall) throws NetworkRuleConflictException, InsufficientAddressCapacityException {
  UserContext caller=UserContext.current();
  int defPortStart=lb.getDefaultPortStart();
  int defPortEnd=lb.getDefaultPortEnd();
  if (!NetUtils.isValidPort(defPortEnd)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortEnd);
  }
  if (defPortStart > defPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortStart + ""String_Node_Str""+ defPortEnd);
  }
  if ((lb.getAlgorithm() == null) || !NetUtils.isValidAlgorithm(lb.getAlgorithm())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + lb.getAlgorithm());
  }
  LoadBalancer result=_elbMgr.handleCreateLoadBalancerRule(lb,caller.getCaller());
  if (result == null) {
    result=createLoadBalancer(lb,openFirewall);
  }
  return result;
}"
89383,"@DB public LoadBalancer createLoadBalancer(CreateLoadBalancerRuleCmd lb) throws NetworkRuleConflictException {
  long ipId=lb.getSourceIpAddressId();
  UserContext caller=UserContext.current();
  int srcPortStart=lb.getSourcePortStart();
  int defPortStart=lb.getDefaultPortStart();
  IPAddressVO ipAddr=_ipAddressDao.findById(lb.getSourceIpAddressId());
  Long networkId=ipAddr.getSourceNetworkId();
  NetworkVO network=_networkDao.findById(networkId);
  if (ipAddr == null || !ipAddr.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  networkId=ipAddr.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller.getCaller(),ipAddr);
  if (!_networkMgr.isServiceSupported(network.getNetworkOfferingId(),Service.Lb)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (openFirewall) {
    _firewallMgr.createRuleForAllCidrs(ipId,caller.getCaller(),lb.getSourcePortStart(),lb.getSourcePortEnd(),lb.getProtocol(),null,null);
  }
  LoadBalancerVO newRule=new LoadBalancerVO(lb.getXid(),lb.getName(),lb.getDescription(),lb.getSourceIpAddressId(),lb.getSourcePortEnd(),lb.getDefaultPortStart(),lb.getSourceCidrList(),lb.getAlgorithm(),network.getId(),ipAddr.getAccountId(),ipAddr.getDomainId());
  newRule=_lbDao.persist(newRule);
  boolean success=true;
  try {
    _firewallMgr.detectRulesConflict(newRule,ipAddr);
    if (!_rulesDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    s_logger.debug(""String_Node_Str"" + newRule.getId() + ""String_Node_Str""+ ipId+ ""String_Node_Str""+ srcPortStart+ ""String_Node_Str""+ defPortStart+ ""String_Node_Str"");
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_CREATE,ipAddr.getAllocatedToAccountId(),ipAddr.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    txn.commit();
    if (openFirewall) {
      success=success && _firewallMgr.applyFirewallRules(lb.getSourceIpAddressId(),caller.getCaller());
    }
    return newRule;
  }
 catch (  Exception e) {
    success=false;
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
 finally {
    if (!success) {
      _lbDao.remove(newRule.getId());
    }
  }
}","@DB public LoadBalancer createLoadBalancer(CreateLoadBalancerRuleCmd lb,boolean openFirewall) throws NetworkRuleConflictException {
  long ipId=lb.getSourceIpAddressId();
  UserContext caller=UserContext.current();
  int srcPortStart=lb.getSourcePortStart();
  int defPortStart=lb.getDefaultPortStart();
  int srcPortEnd=lb.getSourcePortEnd();
  IPAddressVO ipAddr=_ipAddressDao.findById(lb.getSourceIpAddressId());
  Long networkId=ipAddr.getSourceNetworkId();
  NetworkVO network=_networkDao.findById(networkId);
  if (ipAddr == null || !ipAddr.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  _firewallMgr.validateFirewallRule(caller.getCaller(),ipAddr,srcPortStart,srcPortEnd,lb.getProtocol());
  networkId=ipAddr.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller.getCaller(),ipAddr);
  if (!_networkMgr.isServiceSupported(network.getNetworkOfferingId(),Service.Lb)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (openFirewall) {
    _firewallMgr.createRuleForAllCidrs(ipId,caller.getCaller(),lb.getSourcePortStart(),lb.getSourcePortEnd(),lb.getProtocol(),null,null);
  }
  LoadBalancerVO newRule=new LoadBalancerVO(lb.getXid(),lb.getName(),lb.getDescription(),lb.getSourceIpAddressId(),lb.getSourcePortEnd(),lb.getDefaultPortStart(),lb.getSourceCidrList(),lb.getAlgorithm(),network.getId(),ipAddr.getAccountId(),ipAddr.getDomainId());
  newRule=_lbDao.persist(newRule);
  boolean success=true;
  try {
    _firewallMgr.detectRulesConflict(newRule,ipAddr);
    if (!_rulesDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    s_logger.debug(""String_Node_Str"" + newRule.getId() + ""String_Node_Str""+ ipId+ ""String_Node_Str""+ srcPortStart+ ""String_Node_Str""+ defPortStart+ ""String_Node_Str"");
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_CREATE,ipAddr.getAllocatedToAccountId(),ipAddr.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    txn.commit();
    if (openFirewall) {
      success=success && _firewallMgr.applyFirewallRules(lb.getSourceIpAddressId(),caller.getCaller());
    }
    return newRule;
  }
 catch (  Exception e) {
    success=false;
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
 finally {
    if (!success) {
      _lbDao.remove(newRule.getId());
    }
  }
}"
89384,"private static void releaseInternLock(String name){
synchronized (s_lockMap) {
    GlobalLock lock=s_lockMap.get(name);
    assert(lock != null);
    if (lock.referenceCount == 0)     s_lockMap.remove(name);
  }
}","private static void releaseInternLock(String name){
synchronized (s_lockMap) {
    GlobalLock lock=s_lockMap.get(name);
    if (lock != null) {
      if (lock.referenceCount == 0)       s_lockMap.remove(name);
    }
 else {
      s_logger.warn(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}"
89385,"private static void releaseInternLock(String name){
synchronized (s_lockMap) {
    GlobalLock lock=s_lockMap.get(name);
    assert(lock != null);
    if (lock.referenceCount == 0)     s_lockMap.remove(name);
  }
}","private static void releaseInternLock(String name){
synchronized (s_lockMap) {
    GlobalLock lock=s_lockMap.get(name);
    if (lock != null) {
      if (lock.referenceCount == 0)       s_lockMap.remove(name);
    }
 else {
      s_logger.warn(""String_Node_Str"" + name + ""String_Node_Str"");
    }
  }
}"
89386,"@Override public SystemVmResponse createSystemVmResponse(VirtualMachine vm){
  SystemVmResponse vmResponse=new SystemVmResponse();
  if (vm.getType() == Type.SecondaryStorageVm || vm.getType() == Type.ConsoleProxy) {
    vmResponse.setId(vm.getId());
    vmResponse.setSystemVmType(vm.getType().toString().toLowerCase());
    vmResponse.setZoneId(vm.getDataCenterIdToDeployIn());
    vmResponse.setName(vm.getHostName());
    vmResponse.setPodId(vm.getPodIdToDeployIn());
    vmResponse.setTemplateId(vm.getTemplateId());
    vmResponse.setCreated(vm.getCreated());
    if (vm.getHostId() != null) {
      vmResponse.setHostId(vm.getHostId());
      vmResponse.setHostName(ApiDBUtils.findHostById(vm.getHostId()).getName());
    }
    if (vm.getState() != null) {
      vmResponse.setState(vm.getState().toString());
    }
    if (vm.getType() == Type.ConsoleProxy) {
      ConsoleProxyVO proxy=ApiDBUtils.findConsoleProxy(vm.getId());
      vmResponse.setActiveViewerSessions(proxy.getActiveSession());
    }
    DataCenter zone=ApiDBUtils.findZoneById(vm.getDataCenterIdToDeployIn());
    if (zone != null) {
      vmResponse.setZoneName(zone.getName());
      vmResponse.setDns1(zone.getDns1());
      vmResponse.setDns2(zone.getDns2());
    }
    List<NicProfile> nicProfiles=ApiDBUtils.getNics(vm);
    for (    NicProfile singleNicProfile : nicProfiles) {
      Network network=ApiDBUtils.findNetworkById(singleNicProfile.getNetworkId());
      if (network != null) {
        TrafficType trafficType=TrafficType.Public;
        if (zone.getNetworkType() == NetworkType.Basic || zone.isSecurityGroupEnabled()) {
          trafficType=TrafficType.Guest;
        }
        if (network.getTrafficType() == trafficType) {
          vmResponse.setPublicIp(singleNicProfile.getIp4Address());
          vmResponse.setPublicMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setPublicNetmask(singleNicProfile.getNetmask());
          vmResponse.setGateway(singleNicProfile.getGateway());
        }
 else         if (network.getTrafficType() == TrafficType.Management) {
          vmResponse.setPrivateIp(singleNicProfile.getIp4Address());
          vmResponse.setPrivateMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setPrivateNetmask(singleNicProfile.getNetmask());
        }
 else         if (network.getTrafficType() == TrafficType.Control) {
          vmResponse.setLinkLocalIp(singleNicProfile.getIp4Address());
          vmResponse.setLinkLocalMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setLinkLocalNetmask(singleNicProfile.getNetmask());
        }
      }
    }
  }
  vmResponse.setObjectName(""String_Node_Str"");
  return vmResponse;
}","@Override public SystemVmResponse createSystemVmResponse(VirtualMachine vm){
  SystemVmResponse vmResponse=new SystemVmResponse();
  if (vm.getType() == Type.SecondaryStorageVm || vm.getType() == Type.ConsoleProxy) {
    vmResponse.setId(vm.getId());
    vmResponse.setSystemVmType(vm.getType().toString().toLowerCase());
    vmResponse.setZoneId(vm.getDataCenterIdToDeployIn());
    vmResponse.setName(vm.getHostName());
    vmResponse.setPodId(vm.getPodIdToDeployIn());
    vmResponse.setTemplateId(vm.getTemplateId());
    vmResponse.setCreated(vm.getCreated());
    if (vm.getHostId() != null) {
      vmResponse.setHostId(vm.getHostId());
      vmResponse.setHostName(ApiDBUtils.findHostById(vm.getHostId()).getName());
    }
    if (vm.getState() != null) {
      vmResponse.setState(vm.getState().toString());
    }
    if (vm.getType() == Type.ConsoleProxy) {
      ConsoleProxyVO proxy=ApiDBUtils.findConsoleProxy(vm.getId());
      if (proxy != null) {
        vmResponse.setActiveViewerSessions(proxy.getActiveSession());
      }
    }
    DataCenter zone=ApiDBUtils.findZoneById(vm.getDataCenterIdToDeployIn());
    if (zone != null) {
      vmResponse.setZoneName(zone.getName());
      vmResponse.setDns1(zone.getDns1());
      vmResponse.setDns2(zone.getDns2());
    }
    List<NicProfile> nicProfiles=ApiDBUtils.getNics(vm);
    for (    NicProfile singleNicProfile : nicProfiles) {
      Network network=ApiDBUtils.findNetworkById(singleNicProfile.getNetworkId());
      if (network != null) {
        TrafficType trafficType=TrafficType.Public;
        if (zone.getNetworkType() == NetworkType.Basic || zone.isSecurityGroupEnabled()) {
          trafficType=TrafficType.Guest;
        }
        if (network.getTrafficType() == trafficType) {
          vmResponse.setPublicIp(singleNicProfile.getIp4Address());
          vmResponse.setPublicMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setPublicNetmask(singleNicProfile.getNetmask());
          vmResponse.setGateway(singleNicProfile.getGateway());
        }
 else         if (network.getTrafficType() == TrafficType.Management) {
          vmResponse.setPrivateIp(singleNicProfile.getIp4Address());
          vmResponse.setPrivateMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setPrivateNetmask(singleNicProfile.getNetmask());
        }
 else         if (network.getTrafficType() == TrafficType.Control) {
          vmResponse.setLinkLocalIp(singleNicProfile.getIp4Address());
          vmResponse.setLinkLocalMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setLinkLocalNetmask(singleNicProfile.getNetmask());
        }
      }
    }
  }
  vmResponse.setObjectName(""String_Node_Str"");
  return vmResponse;
}"
89387,"@Override public SystemVmResponse createSystemVmResponse(VirtualMachine vm){
  SystemVmResponse vmResponse=new SystemVmResponse();
  if (vm.getType() == Type.SecondaryStorageVm || vm.getType() == Type.ConsoleProxy) {
    vmResponse.setId(vm.getId());
    vmResponse.setSystemVmType(vm.getType().toString().toLowerCase());
    vmResponse.setZoneId(vm.getDataCenterIdToDeployIn());
    vmResponse.setName(vm.getHostName());
    vmResponse.setPodId(vm.getPodIdToDeployIn());
    vmResponse.setTemplateId(vm.getTemplateId());
    vmResponse.setCreated(vm.getCreated());
    if (vm.getHostId() != null) {
      vmResponse.setHostId(vm.getHostId());
      vmResponse.setHostName(ApiDBUtils.findHostById(vm.getHostId()).getName());
    }
    if (vm.getState() != null) {
      vmResponse.setState(vm.getState().toString());
    }
    if (vm.getType() == Type.ConsoleProxy) {
      ConsoleProxyVO proxy=ApiDBUtils.findConsoleProxy(vm.getId());
      vmResponse.setActiveViewerSessions(proxy.getActiveSession());
    }
    DataCenter zone=ApiDBUtils.findZoneById(vm.getDataCenterIdToDeployIn());
    if (zone != null) {
      vmResponse.setZoneName(zone.getName());
      vmResponse.setDns1(zone.getDns1());
      vmResponse.setDns2(zone.getDns2());
    }
    List<NicProfile> nicProfiles=ApiDBUtils.getNics(vm);
    for (    NicProfile singleNicProfile : nicProfiles) {
      Network network=ApiDBUtils.findNetworkById(singleNicProfile.getNetworkId());
      if (network != null) {
        TrafficType trafficType=TrafficType.Public;
        if (zone.getNetworkType() == NetworkType.Basic || zone.isSecurityGroupEnabled()) {
          trafficType=TrafficType.Guest;
        }
        if (network.getTrafficType() == trafficType) {
          vmResponse.setPublicIp(singleNicProfile.getIp4Address());
          vmResponse.setPublicMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setPublicNetmask(singleNicProfile.getNetmask());
          vmResponse.setGateway(singleNicProfile.getGateway());
        }
 else         if (network.getTrafficType() == TrafficType.Management) {
          vmResponse.setPrivateIp(singleNicProfile.getIp4Address());
          vmResponse.setPrivateMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setPrivateNetmask(singleNicProfile.getNetmask());
        }
 else         if (network.getTrafficType() == TrafficType.Control) {
          vmResponse.setLinkLocalIp(singleNicProfile.getIp4Address());
          vmResponse.setLinkLocalMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setLinkLocalNetmask(singleNicProfile.getNetmask());
        }
      }
    }
  }
  vmResponse.setObjectName(""String_Node_Str"");
  return vmResponse;
}","@Override public SystemVmResponse createSystemVmResponse(VirtualMachine vm){
  SystemVmResponse vmResponse=new SystemVmResponse();
  if (vm.getType() == Type.SecondaryStorageVm || vm.getType() == Type.ConsoleProxy) {
    vmResponse.setId(vm.getId());
    vmResponse.setSystemVmType(vm.getType().toString().toLowerCase());
    vmResponse.setZoneId(vm.getDataCenterIdToDeployIn());
    vmResponse.setName(vm.getHostName());
    vmResponse.setPodId(vm.getPodIdToDeployIn());
    vmResponse.setTemplateId(vm.getTemplateId());
    vmResponse.setCreated(vm.getCreated());
    if (vm.getHostId() != null) {
      vmResponse.setHostId(vm.getHostId());
      vmResponse.setHostName(ApiDBUtils.findHostById(vm.getHostId()).getName());
    }
    if (vm.getState() != null) {
      vmResponse.setState(vm.getState().toString());
    }
    if (vm.getType() == Type.ConsoleProxy) {
      ConsoleProxyVO proxy=ApiDBUtils.findConsoleProxy(vm.getId());
      if (proxy != null) {
        vmResponse.setActiveViewerSessions(proxy.getActiveSession());
      }
    }
    DataCenter zone=ApiDBUtils.findZoneById(vm.getDataCenterIdToDeployIn());
    if (zone != null) {
      vmResponse.setZoneName(zone.getName());
      vmResponse.setDns1(zone.getDns1());
      vmResponse.setDns2(zone.getDns2());
    }
    List<NicProfile> nicProfiles=ApiDBUtils.getNics(vm);
    for (    NicProfile singleNicProfile : nicProfiles) {
      Network network=ApiDBUtils.findNetworkById(singleNicProfile.getNetworkId());
      if (network != null) {
        TrafficType trafficType=TrafficType.Public;
        if (zone.getNetworkType() == NetworkType.Basic || zone.isSecurityGroupEnabled()) {
          trafficType=TrafficType.Guest;
        }
        if (network.getTrafficType() == trafficType) {
          vmResponse.setPublicIp(singleNicProfile.getIp4Address());
          vmResponse.setPublicMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setPublicNetmask(singleNicProfile.getNetmask());
          vmResponse.setGateway(singleNicProfile.getGateway());
        }
 else         if (network.getTrafficType() == TrafficType.Management) {
          vmResponse.setPrivateIp(singleNicProfile.getIp4Address());
          vmResponse.setPrivateMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setPrivateNetmask(singleNicProfile.getNetmask());
        }
 else         if (network.getTrafficType() == TrafficType.Control) {
          vmResponse.setLinkLocalIp(singleNicProfile.getIp4Address());
          vmResponse.setLinkLocalMacAddress(singleNicProfile.getMacAddress());
          vmResponse.setLinkLocalNetmask(singleNicProfile.getNetmask());
        }
      }
    }
  }
  vmResponse.setObjectName(""String_Node_Str"");
  return vmResponse;
}"
89388,"protected void fullSync(StartupRoutingCommand cmd,Connection conn){
synchronized (_vms) {
    _vms.clear();
  }
  try {
    final HashMap<String,VmState> vmStates=new HashMap<String,VmState>();
    Map<VM,VM.Record> vmRs=VM.getAllRecords(conn);
    for (    VM.Record record : vmRs.values()) {
      if (record.isControlDomain || record.isASnapshot || record.isATemplate) {
        continue;
      }
      String vm_name=record.nameLabel;
      VmPowerState ps=record.powerState;
      final State state=convertToState(ps);
      Host host=record.residentOn;
      String host_uuid=null;
      if (host != null) {
        host_uuid=host.getUuid(conn);
        if (host_uuid.equals(_host.uuid)) {
synchronized (_vms) {
            _vms.put(vm_name,state);
          }
        }
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm_name + ""String_Node_Str""+ ps+ ""String_Node_Str""+ state.toString());
      }
      VmState vm_state=cmd.new VmState(state,host_uuid);
      vmStates.put(vm_name,vm_state);
    }
    cmd.setChanges(vmStates);
  }
 catch (  final Throwable e) {
    String msg=""String_Node_Str"" + _host.uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg);
  }
}","protected void fullSync(StartupRoutingCommand cmd,Connection conn){
synchronized (_vms) {
    _vms.clear();
  }
  try {
    final HashMap<String,VmState> vmStates=new HashMap<String,VmState>();
    Map<VM,VM.Record> vmRs=VM.getAllRecords(conn);
    for (    VM.Record record : vmRs.values()) {
      if (record.isControlDomain || record.isASnapshot || record.isATemplate) {
        continue;
      }
      String vm_name=record.nameLabel;
      VmPowerState ps=record.powerState;
      final State state=convertToState(ps);
      Host host=record.residentOn;
      String host_uuid=null;
      if (host != null) {
        host_uuid=host.getUuid(conn);
        if (host_uuid.equals(_host.uuid)) {
synchronized (_vms) {
            _vms.put(vm_name,state);
          }
        }
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm_name + ""String_Node_Str""+ ps+ ""String_Node_Str""+ state.toString());
      }
      VmState vm_state=new StartupRoutingCommand.VmState(state,host_uuid);
      vmStates.put(vm_name,vm_state);
    }
    cmd.setChanges(vmStates);
  }
 catch (  final Throwable e) {
    String msg=""String_Node_Str"" + _host.uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg);
  }
}"
89389,"@Override public void create() throws ResourceAllocationException {
  try {
    Account owner=_accountService.getActiveAccount(getAccountName(),getDomainId());
    if (owner == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
    DataCenter zone=_configService.getZone(zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
    ServiceOffering serviceOffering=_configService.getServiceOffering(serviceOfferingId);
    if (serviceOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
    }
    VirtualMachineTemplate template=_templateService.getTemplate(templateId);
    if (template == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + templateId);
    }
    if (diskOfferingId != null) {
      DiskOffering diskOffering=_configService.getDiskOffering(diskOfferingId);
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOfferingId);
      }
    }
    UserVm vm=null;
    if (getHypervisor() == HypervisorType.BareMetal) {
      vm=_bareMetalVmService.createVirtualMachine(this);
    }
 else {
      if (zone.getNetworkType() == NetworkType.Basic) {
        if (getNetworkIds() != null) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
 else {
          vm=_userVmService.createBasicSecurityGroupVirtualMachine(zone,serviceOffering,template,getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress);
        }
      }
 else {
        if (zone.isSecurityGroupEnabled()) {
          vm=_userVmService.createAdvancedSecurityGroupVirtualMachine(zone,serviceOffering,template,getNetworkIds(),getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress);
        }
 else {
          if (getSecurityGroupIdList() != null && !getSecurityGroupIdList().isEmpty()) {
            throw new InvalidParameterValueException(""String_Node_Str"");
          }
          vm=_userVmService.createAdvancedVirtualMachine(zone,serviceOffering,template,getNetworkIds(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress);
        }
      }
    }
    if (vm != null) {
      setEntityId(vm.getId());
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  InsufficientCapacityException ex) {
    s_logger.info(ex);
    s_logger.trace(ex);
    throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
catch (  ResourceUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
}","@Override public void create() throws ResourceAllocationException {
  try {
    Account owner=_accountService.getActiveAccount(getAccountName(),getDomainId());
    if (owner == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
    DataCenter zone=_configService.getZone(zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
    ServiceOffering serviceOffering=_configService.getServiceOffering(serviceOfferingId);
    if (serviceOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
    }
    VirtualMachineTemplate template=_templateService.getTemplate(templateId);
    if (template == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + templateId);
    }
    if (diskOfferingId != null) {
      DiskOffering diskOffering=_configService.getDiskOffering(diskOfferingId);
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOfferingId);
      }
    }
    UserVm vm=null;
    if (getHypervisor() == HypervisorType.BareMetal) {
      vm=_bareMetalVmService.createVirtualMachine(this);
    }
 else {
      if (zone.getNetworkType() == NetworkType.Basic) {
        if (getNetworkIds() != null) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
 else {
          vm=_userVmService.createBasicSecurityGroupVirtualMachine(zone,serviceOffering,template,getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress,keyboard);
        }
      }
 else {
        if (zone.isSecurityGroupEnabled()) {
          vm=_userVmService.createAdvancedSecurityGroupVirtualMachine(zone,serviceOffering,template,getNetworkIds(),getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress,keyboard);
        }
 else {
          if (getSecurityGroupIdList() != null && !getSecurityGroupIdList().isEmpty()) {
            throw new InvalidParameterValueException(""String_Node_Str"");
          }
          vm=_userVmService.createAdvancedVirtualMachine(zone,serviceOffering,template,getNetworkIds(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress,keyboard);
        }
      }
    }
    if (vm != null) {
      setEntityId(vm.getId());
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  InsufficientCapacityException ex) {
    s_logger.info(ex);
    s_logger.trace(ex);
    throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
catch (  ResourceUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
}"
89390,"/** 
 * Creates a Basic Zone User VM in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param securityGroupIdList - comma separated list of security groups id that going to be applied to the virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;","/** 
 * Creates a Basic Zone User VM in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param securityGroupIdList - comma separated list of security groups id that going to be applied to the virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;"
89391,"/** 
 * Creates a User VM in Advanced Zone (Security Group feature is disabled) in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param networkIdList - list of network ids used by virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;","/** 
 * Creates a User VM in Advanced Zone (Security Group feature is disabled) in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param networkIdList - list of network ids used by virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;"
89392,"/** 
 * Creates a User VM in Advanced Zone (Security Group feature is enabled) in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param networkIdList - list of network ids used by virtual machine
 * @param securityGroupIdList - comma separated list of security groups id that going to be applied to the virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createAdvancedSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;","/** 
 * Creates a User VM in Advanced Zone (Security Group feature is enabled) in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param networkIdList - list of network ids used by virtual machine
 * @param securityGroupIdList - comma separated list of security groups id that going to be applied to the virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createAdvancedSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;"
89393,"public Map<String,String> getDetails(){
  return details;
}","@Override public Map<String,String> getDetails(){
  return details;
}"
89394,"protected <T extends VirtualMachine>VirtualMachineTO toVirtualMachineTO(VirtualMachineProfile<T> vmProfile){
  ServiceOffering offering=vmProfile.getServiceOffering();
  VirtualMachine vm=vmProfile.getVirtualMachine();
  VirtualMachineTO to=new VirtualMachineTO(vm.getId(),vm.getInstanceName(),vm.getType(),offering.getCpu(),offering.getSpeed(),offering.getRamSize() * 1024l * 1024l,offering.getRamSize() * 1024l * 1024l,null,null,vm.isHaEnabled(),vm.limitCpuUse(),vm.getVncPassword());
  to.setBootArgs(vmProfile.getBootArgs());
  List<NicProfile> nicProfiles=vmProfile.getNics();
  NicTO[] nics=new NicTO[nicProfiles.size()];
  int i=0;
  for (  NicProfile nicProfile : nicProfiles) {
    nics[i++]=toNicTO(nicProfile);
  }
  to.setNics(nics);
  to.setDisks(vmProfile.getDisks().toArray(new VolumeTO[vmProfile.getDisks().size()]));
  if (vmProfile.getTemplate().getBits() == 32) {
    to.setArch(""String_Node_Str"");
  }
 else {
    to.setArch(""String_Node_Str"");
  }
  return to;
}","protected <T extends VirtualMachine>VirtualMachineTO toVirtualMachineTO(VirtualMachineProfile<T> vmProfile){
  ServiceOffering offering=vmProfile.getServiceOffering();
  VirtualMachine vm=vmProfile.getVirtualMachine();
  VirtualMachineTO to=new VirtualMachineTO(vm.getId(),vm.getInstanceName(),vm.getType(),offering.getCpu(),offering.getSpeed(),offering.getRamSize() * 1024l * 1024l,offering.getRamSize() * 1024l * 1024l,null,null,vm.isHaEnabled(),vm.limitCpuUse(),vm.getVncPassword());
  to.setBootArgs(vmProfile.getBootArgs());
  List<NicProfile> nicProfiles=vmProfile.getNics();
  NicTO[] nics=new NicTO[nicProfiles.size()];
  int i=0;
  for (  NicProfile nicProfile : nicProfiles) {
    nics[i++]=toNicTO(nicProfile);
  }
  to.setNics(nics);
  to.setDisks(vmProfile.getDisks().toArray(new VolumeTO[vmProfile.getDisks().size()]));
  if (vmProfile.getTemplate().getBits() == 32) {
    to.setArch(""String_Node_Str"");
  }
 else {
    to.setArch(""String_Node_Str"");
  }
  to.setDetails(vm.getDetails());
  return to;
}"
89395,"@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<UserVmVO> profile,DeployDestination dest,ReservationContext context){
  UserVmVO vm=profile.getVirtualMachine();
  Account owner=_accountDao.findById(vm.getAccountId());
  if (owner == null) {
    throw new PermissionDeniedException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  if (owner.getState() == Account.State.disabled) {
    throw new PermissionDeniedException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  VirtualMachineTemplate template=profile.getTemplate();
  if (vm.getIsoId() != null) {
    template=_templateDao.findById(vm.getIsoId());
  }
  if (template != null && template.getFormat() == ImageFormat.ISO && vm.getIsoId() != null) {
    String isoPath=null;
    Pair<String,String> isoPathPair=_storageMgr.getAbsoluteIsoPath(template.getId(),vm.getDataCenterIdToDeployIn());
    if (isoPathPair == null) {
      s_logger.warn(""String_Node_Str"");
      return false;
    }
 else {
      isoPath=isoPathPair.first();
    }
    if (template.isBootable()) {
      profile.setBootLoaderType(BootloaderType.CD);
    }
    GuestOSVO guestOS=_guestOSDao.findById(template.getGuestOSId());
    String displayName=null;
    if (guestOS != null) {
      displayName=guestOS.getDisplayName();
    }
    VolumeTO iso=new VolumeTO(profile.getId(),Volume.Type.ISO,StoragePoolType.ISO,null,template.getName(),null,isoPath,0,null,displayName);
    iso.setDeviceId(3);
    profile.addDisk(iso);
  }
 else {
    VolumeTO iso=new VolumeTO(profile.getId(),Volume.Type.ISO,StoragePoolType.ISO,null,template.getName(),null,null,0,null);
    iso.setDeviceId(3);
    profile.addDisk(iso);
  }
  return true;
}","@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<UserVmVO> profile,DeployDestination dest,ReservationContext context){
  UserVmVO vm=profile.getVirtualMachine();
  Map<String,String> details=_vmDetailsDao.findDetails(vm.getId());
  vm.setDetails(details);
  Account owner=_accountDao.findById(vm.getAccountId());
  if (owner == null) {
    throw new PermissionDeniedException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  if (owner.getState() == Account.State.disabled) {
    throw new PermissionDeniedException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  VirtualMachineTemplate template=profile.getTemplate();
  if (vm.getIsoId() != null) {
    template=_templateDao.findById(vm.getIsoId());
  }
  if (template != null && template.getFormat() == ImageFormat.ISO && vm.getIsoId() != null) {
    String isoPath=null;
    Pair<String,String> isoPathPair=_storageMgr.getAbsoluteIsoPath(template.getId(),vm.getDataCenterIdToDeployIn());
    if (isoPathPair == null) {
      s_logger.warn(""String_Node_Str"");
      return false;
    }
 else {
      isoPath=isoPathPair.first();
    }
    if (template.isBootable()) {
      profile.setBootLoaderType(BootloaderType.CD);
    }
    GuestOSVO guestOS=_guestOSDao.findById(template.getGuestOSId());
    String displayName=null;
    if (guestOS != null) {
      displayName=guestOS.getDisplayName();
    }
    VolumeTO iso=new VolumeTO(profile.getId(),Volume.Type.ISO,StoragePoolType.ISO,null,template.getName(),null,isoPath,0,null,displayName);
    iso.setDeviceId(3);
    profile.addDisk(iso);
  }
 else {
    VolumeTO iso=new VolumeTO(profile.getId(),Volume.Type.ISO,StoragePoolType.ISO,null,template.getName(),null,null,0,null);
    iso.setDeviceId(3);
    profile.addDisk(iso);
  }
  return true;
}"
89396,"@Override public UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    NetworkVO defaultNetwork=null;
    List<NetworkOfferingVO> defaultVirtualOffering=_networkOfferingDao.listByTrafficTypeAndGuestType(false,TrafficType.Guest,GuestIpType.Virtual);
    if (defaultVirtualOffering.get(0).getAvailability() == Availability.Required) {
      List<NetworkVO> virtualNetworks=_networkMgr.listNetworksForAccount(owner.getId(),zone.getId(),GuestIpType.Virtual,true);
      if (virtualNetworks.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
        Network newNetwork=_networkMgr.createNetwork(defaultVirtualOffering.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",false,null,zone.getId(),null,null,null,null,owner,false,null,null);
        defaultNetwork=_networkDao.findById(newNetwork.getId());
      }
 else       if (virtualNetworks.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
 else {
        defaultNetwork=virtualNetworks.get(0);
      }
    }
 else {
      List<NetworkVO> defaultNetworks=_networkMgr.listNetworksForAccount(owner.getId(),zone.getId(),null,true);
      if (defaultNetworks.isEmpty()) {
        if (defaultVirtualOffering.get(0).getAvailability() == Availability.Optional) {
          s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
          Network newNetwork=_networkMgr.createNetwork(defaultVirtualOffering.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",false,null,zone.getId(),null,null,null,null,owner,false,null,null);
          defaultNetwork=_networkDao.findById(newNetwork.getId());
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + owner);
        }
      }
 else       if (defaultNetworks.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"" + owner);
      }
 else {
        defaultNetwork=defaultNetworks.get(0);
      }
    }
    NetworkOffering networkOffering=_configMgr.getNetworkOffering(defaultNetwork.getNetworkOfferingId());
    if (networkOffering.getAvailability() == Availability.Unavailable) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    networkList.add(defaultNetwork);
  }
 else {
    boolean requiredNetworkOfferingIsPresent=false;
    List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    Long requiredOfferingId=null;
    if (!requiredOfferings.isEmpty()) {
      requiredOfferingId=requiredOfferings.get(0).getId();
    }
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (!network.getIsShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
 else {
        if (!_networkMgr.isNetworkAvailableInDomain(networkId,owner.getDomainId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + networkId + ""String_Node_Str""+ owner.getDomainId());
        }
      }
      NetworkOffering networkOffering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
      if (networkOffering.getAvailability() == Availability.Unavailable) {
        throw new InvalidParameterValueException(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ Availability.Unavailable);
      }
      if (networkOffering.isSystemOnly()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
      }
      if (requiredOfferingId != null && network.getNetworkOfferingId() == requiredOfferingId.longValue()) {
        requiredNetworkOfferingIsPresent=true;
      }
      networkList.add(network);
    }
    if (requiredOfferingId != null && !requiredNetworkOfferingIsPresent) {
      throw new InvalidParameterValueException(""String_Node_Str"" + requiredOfferingId + ""String_Node_Str"");
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,null,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp);
}","@Override public UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    NetworkVO defaultNetwork=null;
    List<NetworkOfferingVO> defaultVirtualOffering=_networkOfferingDao.listByTrafficTypeAndGuestType(false,TrafficType.Guest,GuestIpType.Virtual);
    if (defaultVirtualOffering.get(0).getAvailability() == Availability.Required) {
      List<NetworkVO> virtualNetworks=_networkMgr.listNetworksForAccount(owner.getId(),zone.getId(),GuestIpType.Virtual,true);
      if (virtualNetworks.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
        Network newNetwork=_networkMgr.createNetwork(defaultVirtualOffering.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",false,null,zone.getId(),null,null,null,null,owner,false,null,null);
        defaultNetwork=_networkDao.findById(newNetwork.getId());
      }
 else       if (virtualNetworks.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
 else {
        defaultNetwork=virtualNetworks.get(0);
      }
    }
 else {
      List<NetworkVO> defaultNetworks=_networkMgr.listNetworksForAccount(owner.getId(),zone.getId(),null,true);
      if (defaultNetworks.isEmpty()) {
        if (defaultVirtualOffering.get(0).getAvailability() == Availability.Optional) {
          s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
          Network newNetwork=_networkMgr.createNetwork(defaultVirtualOffering.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",false,null,zone.getId(),null,null,null,null,owner,false,null,null);
          defaultNetwork=_networkDao.findById(newNetwork.getId());
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + owner);
        }
      }
 else       if (defaultNetworks.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"" + owner);
      }
 else {
        defaultNetwork=defaultNetworks.get(0);
      }
    }
    NetworkOffering networkOffering=_configMgr.getNetworkOffering(defaultNetwork.getNetworkOfferingId());
    if (networkOffering.getAvailability() == Availability.Unavailable) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    networkList.add(defaultNetwork);
  }
 else {
    boolean requiredNetworkOfferingIsPresent=false;
    List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    Long requiredOfferingId=null;
    if (!requiredOfferings.isEmpty()) {
      requiredOfferingId=requiredOfferings.get(0).getId();
    }
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (!network.getIsShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
 else {
        if (!_networkMgr.isNetworkAvailableInDomain(networkId,owner.getDomainId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + networkId + ""String_Node_Str""+ owner.getDomainId());
        }
      }
      NetworkOffering networkOffering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
      if (networkOffering.getAvailability() == Availability.Unavailable) {
        throw new InvalidParameterValueException(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ Availability.Unavailable);
      }
      if (networkOffering.isSystemOnly()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
      }
      if (requiredOfferingId != null && network.getNetworkOfferingId() == requiredOfferingId.longValue()) {
        requiredNetworkOfferingIsPresent=true;
      }
      networkList.add(network);
    }
    if (requiredOfferingId != null && !requiredNetworkOfferingIsPresent) {
      throw new InvalidParameterValueException(""String_Node_Str"" + requiredOfferingId + ""String_Node_Str"");
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,null,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp,keyboard);
}"
89397,"@Override public UserVm createAdvancedSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  boolean isSecurityGroupEnabledNetworkUsed=false;
  boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware || (hypervisor != null && hypervisor == HypervisorType.VMware));
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    NetworkVO networkWithSecurityGroup=_networkMgr.getNetworkWithSecurityGroupEnabled(zone.getId());
    if (networkWithSecurityGroup == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId());
    }
    networkList.add(networkWithSecurityGroup);
  }
 else   if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {
    if (isVmWare) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (networkIdList.size() > 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    NetworkVO network=_networkDao.findById(networkIdList.get(0).longValue());
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
    }
    if (!network.isSecurityGroupEnabled()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + network.getId());
    }
    networkList.add(network);
    isSecurityGroupEnabledNetworkUsed=true;
  }
 else {
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (network.isSecurityGroupEnabled() && networkIdList.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (network.getTrafficType() != TrafficType.Guest || network.getGuestType() != GuestIpType.Direct || (network.getIsShared() && !network.isSecurityGroupEnabled())) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (!network.getIsShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
      networkList.add(network);
    }
  }
  if (isSecurityGroupEnabledNetworkUsed && !isVmWare) {
    if (securityGroupIdList == null) {
      securityGroupIdList=new ArrayList<Long>();
    }
    SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(owner.getId());
    if (defaultGroup != null) {
      boolean defaultGroupPresent=false;
      for (      Long securityGroupId : securityGroupIdList) {
        if (securityGroupId.longValue() == defaultGroup.getId()) {
          defaultGroupPresent=true;
          break;
        }
      }
      if (!defaultGroupPresent) {
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
      defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,owner.getDomainId(),owner.getId(),owner.getAccountName());
      securityGroupIdList.add(defaultGroup.getId());
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp);
}","@Override public UserVm createAdvancedSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  boolean isSecurityGroupEnabledNetworkUsed=false;
  boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware || (hypervisor != null && hypervisor == HypervisorType.VMware));
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    NetworkVO networkWithSecurityGroup=_networkMgr.getNetworkWithSecurityGroupEnabled(zone.getId());
    if (networkWithSecurityGroup == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId());
    }
    networkList.add(networkWithSecurityGroup);
  }
 else   if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {
    if (isVmWare) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (networkIdList.size() > 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    NetworkVO network=_networkDao.findById(networkIdList.get(0).longValue());
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
    }
    if (!network.isSecurityGroupEnabled()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + network.getId());
    }
    networkList.add(network);
    isSecurityGroupEnabledNetworkUsed=true;
  }
 else {
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (network.isSecurityGroupEnabled() && networkIdList.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (network.getTrafficType() != TrafficType.Guest || network.getGuestType() != GuestIpType.Direct || (network.getIsShared() && !network.isSecurityGroupEnabled())) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (!network.getIsShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
      networkList.add(network);
    }
  }
  if (isSecurityGroupEnabledNetworkUsed && !isVmWare) {
    if (securityGroupIdList == null) {
      securityGroupIdList=new ArrayList<Long>();
    }
    SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(owner.getId());
    if (defaultGroup != null) {
      boolean defaultGroupPresent=false;
      for (      Long securityGroupId : securityGroupIdList) {
        if (securityGroupId.longValue() == defaultGroup.getId()) {
          defaultGroupPresent=true;
          break;
        }
      }
      if (!defaultGroupPresent) {
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
      defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,owner.getDomainId(),owner.getId(),owner.getAccountName());
      securityGroupIdList.add(defaultGroup.getId());
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp,keyboard);
}"
89398,"@Override public UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  Network defaultNetwork=_networkMgr.getSystemNetworkByZoneAndTrafficType(zone.getId(),TrafficType.Guest);
  if (defaultNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else {
    networkList.add(_networkDao.findById(defaultNetwork.getId()));
  }
  boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware || (hypervisor != null && hypervisor == HypervisorType.VMware));
  if (securityGroupIdList != null && isVmWare) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (!isVmWare) {
    if (securityGroupIdList == null) {
      securityGroupIdList=new ArrayList<Long>();
    }
    SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(owner.getId());
    if (defaultGroup != null) {
      boolean defaultGroupPresent=false;
      for (      Long securityGroupId : securityGroupIdList) {
        if (securityGroupId.longValue() == defaultGroup.getId()) {
          defaultGroupPresent=true;
          break;
        }
      }
      if (!defaultGroupPresent) {
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
      defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,owner.getDomainId(),owner.getId(),owner.getAccountName());
      securityGroupIdList.add(defaultGroup.getId());
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp);
}","@Override public UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  Network defaultNetwork=_networkMgr.getSystemNetworkByZoneAndTrafficType(zone.getId(),TrafficType.Guest);
  if (defaultNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else {
    networkList.add(_networkDao.findById(defaultNetwork.getId()));
  }
  boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware || (hypervisor != null && hypervisor == HypervisorType.VMware));
  if (securityGroupIdList != null && isVmWare) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (!isVmWare) {
    if (securityGroupIdList == null) {
      securityGroupIdList=new ArrayList<Long>();
    }
    SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(owner.getId());
    if (defaultGroup != null) {
      boolean defaultGroupPresent=false;
      for (      Long securityGroupId : securityGroupIdList) {
        if (securityGroupId.longValue() == defaultGroup.getId()) {
          defaultGroupPresent=true;
          break;
        }
      }
      if (!defaultGroupPresent) {
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
      defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,owner.getDomainId(),owner.getId(),owner.getAccountName());
      securityGroupIdList.add(defaultGroup.getId());
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp,keyboard);
}"
89399,"protected void fullSync(StartupRoutingCommand cmd,Connection conn){
synchronized (_vms) {
    _vms.clear();
  }
  try {
    final HashMap<String,VmState> vmStates=new HashMap<String,VmState>();
    Map<VM,VM.Record> vmRs=VM.getAllRecords(conn);
    for (    VM.Record record : vmRs.values()) {
      if (record.isControlDomain || record.isASnapshot || record.isATemplate) {
        continue;
      }
      String vm_name=record.nameLabel;
      VmPowerState ps=record.powerState;
      final State state=convertToState(ps);
      Host host=record.residentOn;
      String host_uuid=null;
      if (host != null) {
        host_uuid=host.getUuid(conn);
        if (host_uuid.equals(_host.uuid)) {
synchronized (_vms) {
            _vms.put(vm_name,state);
          }
        }
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm_name + ""String_Node_Str""+ ps+ ""String_Node_Str""+ state.toString());
      }
      VmState vm_state=cmd.new VmState(state,host_uuid);
      vmStates.put(vm_name,vm_state);
    }
    cmd.setChanges(vmStates);
  }
 catch (  final Throwable e) {
    String msg=""String_Node_Str"" + _host.uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg);
  }
}","protected void fullSync(StartupRoutingCommand cmd,Connection conn){
synchronized (_vms) {
    _vms.clear();
  }
  try {
    final HashMap<String,VmState> vmStates=new HashMap<String,VmState>();
    Map<VM,VM.Record> vmRs=VM.getAllRecords(conn);
    for (    VM.Record record : vmRs.values()) {
      if (record.isControlDomain || record.isASnapshot || record.isATemplate) {
        continue;
      }
      String vm_name=record.nameLabel;
      VmPowerState ps=record.powerState;
      final State state=convertToState(ps);
      Host host=record.residentOn;
      String host_uuid=null;
      if (host != null) {
        host_uuid=host.getUuid(conn);
        if (host_uuid.equals(_host.uuid)) {
synchronized (_vms) {
            _vms.put(vm_name,state);
          }
        }
      }
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + vm_name + ""String_Node_Str""+ ps+ ""String_Node_Str""+ state.toString());
      }
      VmState vm_state=new StartupRoutingCommand.VmState(state,host_uuid);
      vmStates.put(vm_name,vm_state);
    }
    cmd.setChanges(vmStates);
  }
 catch (  final Throwable e) {
    String msg=""String_Node_Str"" + _host.uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg);
  }
}"
89400,"@Override public void create() throws ResourceAllocationException {
  try {
    Account owner=_accountService.getActiveAccount(getAccountName(),getDomainId());
    if (owner == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
    DataCenter zone=_configService.getZone(zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
    ServiceOffering serviceOffering=_configService.getServiceOffering(serviceOfferingId);
    if (serviceOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
    }
    VirtualMachineTemplate template=_templateService.getTemplate(templateId);
    if (template == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + templateId);
    }
    if (diskOfferingId != null) {
      DiskOffering diskOffering=_configService.getDiskOffering(diskOfferingId);
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOfferingId);
      }
    }
    UserVm vm=null;
    if (getHypervisor() == HypervisorType.BareMetal) {
      vm=_bareMetalVmService.createVirtualMachine(this);
    }
 else {
      if (zone.getNetworkType() == NetworkType.Basic) {
        if (getNetworkIds() != null) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
 else {
          vm=_userVmService.createBasicSecurityGroupVirtualMachine(zone,serviceOffering,template,getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress);
        }
      }
 else {
        if (zone.isSecurityGroupEnabled()) {
          vm=_userVmService.createAdvancedSecurityGroupVirtualMachine(zone,serviceOffering,template,getNetworkIds(),getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress);
        }
 else {
          if (getSecurityGroupIdList() != null && !getSecurityGroupIdList().isEmpty()) {
            throw new InvalidParameterValueException(""String_Node_Str"");
          }
          vm=_userVmService.createAdvancedVirtualMachine(zone,serviceOffering,template,getNetworkIds(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress);
        }
      }
    }
    if (vm != null) {
      setEntityId(vm.getId());
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  InsufficientCapacityException ex) {
    s_logger.info(ex);
    s_logger.trace(ex);
    throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
catch (  ResourceUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
}","@Override public void create() throws ResourceAllocationException {
  try {
    Account owner=_accountService.getActiveAccount(getAccountName(),getDomainId());
    if (owner == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
    DataCenter zone=_configService.getZone(zoneId);
    if (zone == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
    }
    ServiceOffering serviceOffering=_configService.getServiceOffering(serviceOfferingId);
    if (serviceOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
    }
    VirtualMachineTemplate template=_templateService.getTemplate(templateId);
    if (template == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + templateId);
    }
    if (diskOfferingId != null) {
      DiskOffering diskOffering=_configService.getDiskOffering(diskOfferingId);
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOfferingId);
      }
    }
    UserVm vm=null;
    if (getHypervisor() == HypervisorType.BareMetal) {
      vm=_bareMetalVmService.createVirtualMachine(this);
    }
 else {
      if (zone.getNetworkType() == NetworkType.Basic) {
        if (getNetworkIds() != null) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
 else {
          vm=_userVmService.createBasicSecurityGroupVirtualMachine(zone,serviceOffering,template,getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress,keyboard);
        }
      }
 else {
        if (zone.isSecurityGroupEnabled()) {
          vm=_userVmService.createAdvancedSecurityGroupVirtualMachine(zone,serviceOffering,template,getNetworkIds(),getSecurityGroupIdList(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress,keyboard);
        }
 else {
          if (getSecurityGroupIdList() != null && !getSecurityGroupIdList().isEmpty()) {
            throw new InvalidParameterValueException(""String_Node_Str"");
          }
          vm=_userVmService.createAdvancedVirtualMachine(zone,serviceOffering,template,getNetworkIds(),owner,name,displayName,diskOfferingId,size,group,getHypervisor(),userData,sshKeyPairName,getIpToNetworkMap(),ipAddress,keyboard);
        }
      }
    }
    if (vm != null) {
      setEntityId(vm.getId());
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  InsufficientCapacityException ex) {
    s_logger.info(ex);
    s_logger.trace(ex);
    throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
catch (  ResourceUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
}"
89401,"/** 
 * Creates a Basic Zone User VM in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param securityGroupIdList - comma separated list of security groups id that going to be applied to the virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;","/** 
 * Creates a Basic Zone User VM in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param securityGroupIdList - comma separated list of security groups id that going to be applied to the virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;"
89402,"/** 
 * Creates a User VM in Advanced Zone (Security Group feature is disabled) in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param networkIdList - list of network ids used by virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;","/** 
 * Creates a User VM in Advanced Zone (Security Group feature is disabled) in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param networkIdList - list of network ids used by virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;"
89403,"/** 
 * Creates a User VM in Advanced Zone (Security Group feature is enabled) in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param networkIdList - list of network ids used by virtual machine
 * @param securityGroupIdList - comma separated list of security groups id that going to be applied to the virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createAdvancedSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;","/** 
 * Creates a User VM in Advanced Zone (Security Group feature is enabled) in the database and returns the VM to the caller.
 * @param zone - availability zone for the virtual machine
 * @param serviceOffering - the service offering for the virtual machine
 * @param template - the template for the virtual machine
 * @param networkIdList - list of network ids used by virtual machine
 * @param securityGroupIdList - comma separated list of security groups id that going to be applied to the virtual machine
 * @param hostName - host name for the virtual machine
 * @param displayName - an optional user generated name for the virtual machine
 * @param diskOfferingId - the ID of the disk offering for the virtual machine. If the template is of ISO format, the diskOfferingId is for the root disk volume. Otherwise this parameter is used to indicate the offering for the data disk volume. If the templateId parameter passed is from a Template object, the diskOfferingId refers to a DATA Disk Volume created. If the templateId parameter passed is from an ISO object, the diskOfferingId refers to a ROOT Disk Volume created
 * @param diskSize - the arbitrary size for the DATADISK volume. Mutually exclusive with diskOfferingId
 * @param group - an optional group for the virtual machine
 * @param hypervisor - the hypervisor on which to deploy the virtual machine
 * @param userData - an optional binary data that can be sent to the virtual machine upon a successful deployment. This binary data must be base64 encoded before adding it to the request. Currently only HTTP GET is supported. Using HTTP GET (via querystring), you can send up to 2KB of data after base64 encoding
 * @param sshKeyPair - name of the ssh key pair used to login to the virtual machine
 * @param requestedIps TODO
 * @param defaultIp TODO
 * @param accountName - an optional account for the virtual machine. Must be used with domainId
 * @param domainId - an optional domainId for the virtual machine. If the account parameter is used, domainId must also be used
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException
 */
UserVm createAdvancedSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException ;"
89404,"public Map<String,String> getDetails(){
  return details;
}","@Override public Map<String,String> getDetails(){
  return details;
}"
89405,"protected <T extends VirtualMachine>VirtualMachineTO toVirtualMachineTO(VirtualMachineProfile<T> vmProfile){
  ServiceOffering offering=vmProfile.getServiceOffering();
  VirtualMachine vm=vmProfile.getVirtualMachine();
  VirtualMachineTO to=new VirtualMachineTO(vm.getId(),vm.getInstanceName(),vm.getType(),offering.getCpu(),offering.getSpeed(),offering.getRamSize() * 1024l * 1024l,offering.getRamSize() * 1024l * 1024l,null,null,vm.isHaEnabled(),vm.limitCpuUse(),vm.getVncPassword());
  to.setBootArgs(vmProfile.getBootArgs());
  List<NicProfile> nicProfiles=vmProfile.getNics();
  NicTO[] nics=new NicTO[nicProfiles.size()];
  int i=0;
  for (  NicProfile nicProfile : nicProfiles) {
    nics[i++]=toNicTO(nicProfile);
  }
  to.setNics(nics);
  to.setDisks(vmProfile.getDisks().toArray(new VolumeTO[vmProfile.getDisks().size()]));
  if (vmProfile.getTemplate().getBits() == 32) {
    to.setArch(""String_Node_Str"");
  }
 else {
    to.setArch(""String_Node_Str"");
  }
  return to;
}","protected <T extends VirtualMachine>VirtualMachineTO toVirtualMachineTO(VirtualMachineProfile<T> vmProfile){
  ServiceOffering offering=vmProfile.getServiceOffering();
  VirtualMachine vm=vmProfile.getVirtualMachine();
  VirtualMachineTO to=new VirtualMachineTO(vm.getId(),vm.getInstanceName(),vm.getType(),offering.getCpu(),offering.getSpeed(),offering.getRamSize() * 1024l * 1024l,offering.getRamSize() * 1024l * 1024l,null,null,vm.isHaEnabled(),vm.limitCpuUse(),vm.getVncPassword());
  to.setBootArgs(vmProfile.getBootArgs());
  List<NicProfile> nicProfiles=vmProfile.getNics();
  NicTO[] nics=new NicTO[nicProfiles.size()];
  int i=0;
  for (  NicProfile nicProfile : nicProfiles) {
    nics[i++]=toNicTO(nicProfile);
  }
  to.setNics(nics);
  to.setDisks(vmProfile.getDisks().toArray(new VolumeTO[vmProfile.getDisks().size()]));
  if (vmProfile.getTemplate().getBits() == 32) {
    to.setArch(""String_Node_Str"");
  }
 else {
    to.setArch(""String_Node_Str"");
  }
  to.setDetails(vm.getDetails());
  return to;
}"
89406,"@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<UserVmVO> profile,DeployDestination dest,ReservationContext context){
  UserVmVO vm=profile.getVirtualMachine();
  Account owner=_accountDao.findById(vm.getAccountId());
  if (owner == null) {
    throw new PermissionDeniedException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  if (owner.getState() == Account.State.disabled) {
    throw new PermissionDeniedException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  VirtualMachineTemplate template=profile.getTemplate();
  if (vm.getIsoId() != null) {
    template=_templateDao.findById(vm.getIsoId());
  }
  if (template != null && template.getFormat() == ImageFormat.ISO && vm.getIsoId() != null) {
    String isoPath=null;
    Pair<String,String> isoPathPair=_storageMgr.getAbsoluteIsoPath(template.getId(),vm.getDataCenterIdToDeployIn());
    if (isoPathPair == null) {
      s_logger.warn(""String_Node_Str"");
      return false;
    }
 else {
      isoPath=isoPathPair.first();
    }
    if (template.isBootable()) {
      profile.setBootLoaderType(BootloaderType.CD);
    }
    GuestOSVO guestOS=_guestOSDao.findById(template.getGuestOSId());
    String displayName=null;
    if (guestOS != null) {
      displayName=guestOS.getDisplayName();
    }
    VolumeTO iso=new VolumeTO(profile.getId(),Volume.Type.ISO,StoragePoolType.ISO,null,template.getName(),null,isoPath,0,null,displayName);
    iso.setDeviceId(3);
    profile.addDisk(iso);
  }
 else {
    VolumeTO iso=new VolumeTO(profile.getId(),Volume.Type.ISO,StoragePoolType.ISO,null,template.getName(),null,null,0,null);
    iso.setDeviceId(3);
    profile.addDisk(iso);
  }
  return true;
}","@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<UserVmVO> profile,DeployDestination dest,ReservationContext context){
  UserVmVO vm=profile.getVirtualMachine();
  Map<String,String> details=_vmDetailsDao.findDetails(vm.getId());
  vm.setDetails(details);
  Account owner=_accountDao.findById(vm.getAccountId());
  if (owner == null) {
    throw new PermissionDeniedException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  if (owner.getState() == Account.State.disabled) {
    throw new PermissionDeniedException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getAccountId());
  }
  VirtualMachineTemplate template=profile.getTemplate();
  if (vm.getIsoId() != null) {
    template=_templateDao.findById(vm.getIsoId());
  }
  if (template != null && template.getFormat() == ImageFormat.ISO && vm.getIsoId() != null) {
    String isoPath=null;
    Pair<String,String> isoPathPair=_storageMgr.getAbsoluteIsoPath(template.getId(),vm.getDataCenterIdToDeployIn());
    if (isoPathPair == null) {
      s_logger.warn(""String_Node_Str"");
      return false;
    }
 else {
      isoPath=isoPathPair.first();
    }
    if (template.isBootable()) {
      profile.setBootLoaderType(BootloaderType.CD);
    }
    GuestOSVO guestOS=_guestOSDao.findById(template.getGuestOSId());
    String displayName=null;
    if (guestOS != null) {
      displayName=guestOS.getDisplayName();
    }
    VolumeTO iso=new VolumeTO(profile.getId(),Volume.Type.ISO,StoragePoolType.ISO,null,template.getName(),null,isoPath,0,null,displayName);
    iso.setDeviceId(3);
    profile.addDisk(iso);
  }
 else {
    VolumeTO iso=new VolumeTO(profile.getId(),Volume.Type.ISO,StoragePoolType.ISO,null,template.getName(),null,null,0,null);
    iso.setDeviceId(3);
    profile.addDisk(iso);
  }
  return true;
}"
89407,"@Override public UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    NetworkVO defaultNetwork=null;
    List<NetworkOfferingVO> defaultVirtualOffering=_networkOfferingDao.listByTrafficTypeAndGuestType(false,TrafficType.Guest,GuestIpType.Virtual);
    if (defaultVirtualOffering.get(0).getAvailability() == Availability.Required) {
      List<NetworkVO> virtualNetworks=_networkMgr.listNetworksForAccount(owner.getId(),zone.getId(),GuestIpType.Virtual,true);
      if (virtualNetworks.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
        Network newNetwork=_networkMgr.createNetwork(defaultVirtualOffering.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",false,null,zone.getId(),null,null,null,null,owner,false,null,null);
        defaultNetwork=_networkDao.findById(newNetwork.getId());
      }
 else       if (virtualNetworks.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
 else {
        defaultNetwork=virtualNetworks.get(0);
      }
    }
 else {
      List<NetworkVO> defaultNetworks=_networkMgr.listNetworksForAccount(owner.getId(),zone.getId(),null,true);
      if (defaultNetworks.isEmpty()) {
        if (defaultVirtualOffering.get(0).getAvailability() == Availability.Optional) {
          s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
          Network newNetwork=_networkMgr.createNetwork(defaultVirtualOffering.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",false,null,zone.getId(),null,null,null,null,owner,false,null,null);
          defaultNetwork=_networkDao.findById(newNetwork.getId());
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + owner);
        }
      }
 else       if (defaultNetworks.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"" + owner);
      }
 else {
        defaultNetwork=defaultNetworks.get(0);
      }
    }
    NetworkOffering networkOffering=_configMgr.getNetworkOffering(defaultNetwork.getNetworkOfferingId());
    if (networkOffering.getAvailability() == Availability.Unavailable) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    networkList.add(defaultNetwork);
  }
 else {
    boolean requiredNetworkOfferingIsPresent=false;
    List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    Long requiredOfferingId=null;
    if (!requiredOfferings.isEmpty()) {
      requiredOfferingId=requiredOfferings.get(0).getId();
    }
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (!network.getIsShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
 else {
        if (!_networkMgr.isNetworkAvailableInDomain(networkId,owner.getDomainId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + networkId + ""String_Node_Str""+ owner.getDomainId());
        }
      }
      NetworkOffering networkOffering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
      if (networkOffering.getAvailability() == Availability.Unavailable) {
        throw new InvalidParameterValueException(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ Availability.Unavailable);
      }
      if (networkOffering.isSystemOnly()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
      }
      if (requiredOfferingId != null && network.getNetworkOfferingId() == requiredOfferingId.longValue()) {
        requiredNetworkOfferingIsPresent=true;
      }
      networkList.add(network);
    }
    if (requiredOfferingId != null && !requiredNetworkOfferingIsPresent) {
      throw new InvalidParameterValueException(""String_Node_Str"" + requiredOfferingId + ""String_Node_Str"");
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,null,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp);
}","@Override public UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    NetworkVO defaultNetwork=null;
    List<NetworkOfferingVO> defaultVirtualOffering=_networkOfferingDao.listByTrafficTypeAndGuestType(false,TrafficType.Guest,GuestIpType.Virtual);
    if (defaultVirtualOffering.get(0).getAvailability() == Availability.Required) {
      List<NetworkVO> virtualNetworks=_networkMgr.listNetworksForAccount(owner.getId(),zone.getId(),GuestIpType.Virtual,true);
      if (virtualNetworks.isEmpty()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
        Network newNetwork=_networkMgr.createNetwork(defaultVirtualOffering.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",false,null,zone.getId(),null,null,null,null,owner,false,null,null);
        defaultNetwork=_networkDao.findById(newNetwork.getId());
      }
 else       if (virtualNetworks.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
 else {
        defaultNetwork=virtualNetworks.get(0);
      }
    }
 else {
      List<NetworkVO> defaultNetworks=_networkMgr.listNetworksForAccount(owner.getId(),zone.getId(),null,true);
      if (defaultNetworks.isEmpty()) {
        if (defaultVirtualOffering.get(0).getAvailability() == Availability.Optional) {
          s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
          Network newNetwork=_networkMgr.createNetwork(defaultVirtualOffering.get(0).getId(),owner.getAccountName() + ""String_Node_Str"",owner.getAccountName() + ""String_Node_Str"",false,null,zone.getId(),null,null,null,null,owner,false,null,null);
          defaultNetwork=_networkDao.findById(newNetwork.getId());
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + owner);
        }
      }
 else       if (defaultNetworks.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"" + owner);
      }
 else {
        defaultNetwork=defaultNetworks.get(0);
      }
    }
    NetworkOffering networkOffering=_configMgr.getNetworkOffering(defaultNetwork.getNetworkOfferingId());
    if (networkOffering.getAvailability() == Availability.Unavailable) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    networkList.add(defaultNetwork);
  }
 else {
    boolean requiredNetworkOfferingIsPresent=false;
    List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    Long requiredOfferingId=null;
    if (!requiredOfferings.isEmpty()) {
      requiredOfferingId=requiredOfferings.get(0).getId();
    }
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (!network.getIsShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
 else {
        if (!_networkMgr.isNetworkAvailableInDomain(networkId,owner.getDomainId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + networkId + ""String_Node_Str""+ owner.getDomainId());
        }
      }
      NetworkOffering networkOffering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
      if (networkOffering.getAvailability() == Availability.Unavailable) {
        throw new InvalidParameterValueException(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ Availability.Unavailable);
      }
      if (networkOffering.isSystemOnly()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
      }
      if (requiredOfferingId != null && network.getNetworkOfferingId() == requiredOfferingId.longValue()) {
        requiredNetworkOfferingIsPresent=true;
      }
      networkList.add(network);
    }
    if (requiredOfferingId != null && !requiredNetworkOfferingIsPresent) {
      throw new InvalidParameterValueException(""String_Node_Str"" + requiredOfferingId + ""String_Node_Str"");
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,null,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp,keyboard);
}"
89408,"@Override public UserVm createAdvancedSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  boolean isSecurityGroupEnabledNetworkUsed=false;
  boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware || (hypervisor != null && hypervisor == HypervisorType.VMware));
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    NetworkVO networkWithSecurityGroup=_networkMgr.getNetworkWithSecurityGroupEnabled(zone.getId());
    if (networkWithSecurityGroup == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId());
    }
    networkList.add(networkWithSecurityGroup);
  }
 else   if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {
    if (isVmWare) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (networkIdList.size() > 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    NetworkVO network=_networkDao.findById(networkIdList.get(0).longValue());
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
    }
    if (!network.isSecurityGroupEnabled()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + network.getId());
    }
    networkList.add(network);
    isSecurityGroupEnabledNetworkUsed=true;
  }
 else {
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (network.isSecurityGroupEnabled() && networkIdList.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (network.getTrafficType() != TrafficType.Guest || network.getGuestType() != GuestIpType.Direct || (network.getIsShared() && !network.isSecurityGroupEnabled())) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (!network.getIsShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
      networkList.add(network);
    }
  }
  if (isSecurityGroupEnabledNetworkUsed && !isVmWare) {
    if (securityGroupIdList == null) {
      securityGroupIdList=new ArrayList<Long>();
    }
    SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(owner.getId());
    if (defaultGroup != null) {
      boolean defaultGroupPresent=false;
      for (      Long securityGroupId : securityGroupIdList) {
        if (securityGroupId.longValue() == defaultGroup.getId()) {
          defaultGroupPresent=true;
          break;
        }
      }
      if (!defaultGroupPresent) {
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
      defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,owner.getDomainId(),owner.getId(),owner.getAccountName());
      securityGroupIdList.add(defaultGroup.getId());
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp);
}","@Override public UserVm createAdvancedSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  boolean isSecurityGroupEnabledNetworkUsed=false;
  boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware || (hypervisor != null && hypervisor == HypervisorType.VMware));
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    NetworkVO networkWithSecurityGroup=_networkMgr.getNetworkWithSecurityGroupEnabled(zone.getId());
    if (networkWithSecurityGroup == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId());
    }
    networkList.add(networkWithSecurityGroup);
  }
 else   if (securityGroupIdList != null && !securityGroupIdList.isEmpty()) {
    if (isVmWare) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (networkIdList.size() > 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    NetworkVO network=_networkDao.findById(networkIdList.get(0).longValue());
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
    }
    if (!network.isSecurityGroupEnabled()) {
      throw new InvalidParameterValueException(""String_Node_Str"" + network.getId());
    }
    networkList.add(network);
    isSecurityGroupEnabledNetworkUsed=true;
  }
 else {
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (network.isSecurityGroupEnabled() && networkIdList.size() > 1) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (network.getTrafficType() != TrafficType.Guest || network.getGuestType() != GuestIpType.Direct || (network.getIsShared() && !network.isSecurityGroupEnabled())) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (!network.getIsShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
      networkList.add(network);
    }
  }
  if (isSecurityGroupEnabledNetworkUsed && !isVmWare) {
    if (securityGroupIdList == null) {
      securityGroupIdList=new ArrayList<Long>();
    }
    SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(owner.getId());
    if (defaultGroup != null) {
      boolean defaultGroupPresent=false;
      for (      Long securityGroupId : securityGroupIdList) {
        if (securityGroupId.longValue() == defaultGroup.getId()) {
          defaultGroupPresent=true;
          break;
        }
      }
      if (!defaultGroupPresent) {
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
      defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,owner.getDomainId(),owner.getId(),owner.getAccountName());
      securityGroupIdList.add(defaultGroup.getId());
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp,keyboard);
}"
89409,"@Override public UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  Network defaultNetwork=_networkMgr.getSystemNetworkByZoneAndTrafficType(zone.getId(),TrafficType.Guest);
  if (defaultNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else {
    networkList.add(_networkDao.findById(defaultNetwork.getId()));
  }
  boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware || (hypervisor != null && hypervisor == HypervisorType.VMware));
  if (securityGroupIdList != null && isVmWare) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (!isVmWare) {
    if (securityGroupIdList == null) {
      securityGroupIdList=new ArrayList<Long>();
    }
    SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(owner.getId());
    if (defaultGroup != null) {
      boolean defaultGroupPresent=false;
      for (      Long securityGroupId : securityGroupIdList) {
        if (securityGroupId.longValue() == defaultGroup.getId()) {
          defaultGroupPresent=true;
          break;
        }
      }
      if (!defaultGroupPresent) {
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
      defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,owner.getDomainId(),owner.getId(),owner.getAccountName());
      securityGroupIdList.add(defaultGroup.getId());
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp);
}","@Override public UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair,Map<Long,String> requestedIps,String defaultIp,String keyboard) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  Network defaultNetwork=_networkMgr.getSystemNetworkByZoneAndTrafficType(zone.getId(),TrafficType.Guest);
  if (defaultNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else {
    networkList.add(_networkDao.findById(defaultNetwork.getId()));
  }
  boolean isVmWare=(template.getHypervisorType() == HypervisorType.VMware || (hypervisor != null && hypervisor == HypervisorType.VMware));
  if (securityGroupIdList != null && isVmWare) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (!isVmWare) {
    if (securityGroupIdList == null) {
      securityGroupIdList=new ArrayList<Long>();
    }
    SecurityGroup defaultGroup=_securityGroupMgr.getDefaultSecurityGroup(owner.getId());
    if (defaultGroup != null) {
      boolean defaultGroupPresent=false;
      for (      Long securityGroupId : securityGroupIdList) {
        if (securityGroupId.longValue() == defaultGroup.getId()) {
          defaultGroupPresent=true;
          break;
        }
      }
      if (!defaultGroupPresent) {
        securityGroupIdList.add(defaultGroup.getId());
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner + ""String_Node_Str"");
      }
      defaultGroup=_securityGroupMgr.createSecurityGroup(SecurityGroupManager.DEFAULT_GROUP_NAME,SecurityGroupManager.DEFAULT_GROUP_DESCRIPTION,owner.getDomainId(),owner.getId(),owner.getAccountName());
      securityGroupIdList.add(defaultGroup.getId());
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller,requestedIps,defaultIp,keyboard);
}"
89410,"@DB public void work(){
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  final SecurityGroupWorkVO work=_workDao.take(_serverId);
  if (work == null) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"");
    }
    return;
  }
  Long userVmId=work.getInstanceId();
  if (work.getStep() == Step.Done) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + userVmId);
    }
    Set<Long> affectedVms=new HashSet<Long>();
    affectedVms.add(userVmId);
    scheduleRulesetUpdateToHosts(affectedVms,true,_timeBetweenCleanups * 1000l);
  }
  UserVm vm=null;
  Long seqnum=null;
  s_logger.debug(""String_Node_Str"" + work);
  final Transaction txn=Transaction.currentTxn();
  txn.start();
  try {
    vm=_userVMDao.acquireInLockTable(work.getInstanceId());
    if (vm == null) {
      s_logger.warn(""String_Node_Str"" + userVmId);
      return;
    }
    Long agentId=null;
    VmRulesetLogVO log=_rulesetLogDao.findByVmId(userVmId);
    if (log == null) {
      s_logger.warn(""String_Node_Str"" + userVmId);
      return;
    }
    seqnum=log.getLogsequence();
    if (vm != null && vm.getState() == State.Running) {
      Map<PortAndProto,Set<String>> rules=generateRulesForVM(userVmId);
      agentId=vm.getHostId();
      if (agentId != null) {
        _rulesetLogDao.findByVmId(work.getInstanceId());
        SecurityIngressRulesCmd cmd=generateRulesetCmd(vm.getInstanceName(),vm.getPrivateIpAddress(),vm.getPrivateMacAddress(),vm.getId(),generateRulesetSignature(rules),seqnum,rules);
        Commands cmds=new Commands(cmd);
        try {
          _agentMgr.send(agentId,cmds,_answerListener);
        }
 catch (        AgentUnavailableException e) {
          s_logger.debug(""String_Node_Str"" + userVmId + ""String_Node_Str""+ agentId+ ""String_Node_Str"");
          _workDao.updateStep(work.getInstanceId(),seqnum,Step.Done);
        }
      }
    }
  }
  finally {
    if (vm != null) {
      _userVMDao.releaseFromLockTable(userVmId);
      _workDao.updateStep(work.getId(),Step.Done);
    }
    txn.commit();
  }
}","@DB public void work(){
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  final SecurityGroupWorkVO work=_workDao.take(_serverId);
  if (work == null) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"");
    }
    return;
  }
  Long userVmId=work.getInstanceId();
  if (work.getStep() == Step.Done) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + userVmId);
    }
    Set<Long> affectedVms=new HashSet<Long>();
    affectedVms.add(userVmId);
    scheduleRulesetUpdateToHosts(affectedVms,true,_timeBetweenCleanups * 1000l);
  }
  UserVm vm=null;
  Long seqnum=null;
  s_logger.debug(""String_Node_Str"" + work);
  final Transaction txn=Transaction.currentTxn();
  txn.start();
  boolean locked=false;
  try {
    vm=_userVMDao.acquireInLockTable(work.getInstanceId());
    if (vm == null) {
      vm=_userVMDao.findById(work.getInstanceId());
      if (vm == null) {
        s_logger.info(""String_Node_Str"" + work.getInstanceId() + ""String_Node_Str"");
        locked=true;
        return;
      }
      s_logger.warn(""String_Node_Str"" + userVmId);
      return;
    }
    locked=true;
    Long agentId=null;
    VmRulesetLogVO log=_rulesetLogDao.findByVmId(userVmId);
    if (log == null) {
      s_logger.warn(""String_Node_Str"" + userVmId);
      return;
    }
    seqnum=log.getLogsequence();
    if (vm != null && vm.getState() == State.Running) {
      Map<PortAndProto,Set<String>> rules=generateRulesForVM(userVmId);
      agentId=vm.getHostId();
      if (agentId != null) {
        _rulesetLogDao.findByVmId(work.getInstanceId());
        SecurityIngressRulesCmd cmd=generateRulesetCmd(vm.getInstanceName(),vm.getPrivateIpAddress(),vm.getPrivateMacAddress(),vm.getId(),generateRulesetSignature(rules),seqnum,rules);
        Commands cmds=new Commands(cmd);
        try {
          _agentMgr.send(agentId,cmds,_answerListener);
        }
 catch (        AgentUnavailableException e) {
          s_logger.debug(""String_Node_Str"" + userVmId + ""String_Node_Str""+ agentId+ ""String_Node_Str"");
          _workDao.updateStep(work.getInstanceId(),seqnum,Step.Done);
        }
      }
    }
  }
  finally {
    if (locked) {
      _userVMDao.releaseFromLockTable(userVmId);
      _workDao.updateStep(work.getId(),Step.Done);
    }
    txn.commit();
  }
}"
89411,"@Override @DB public Cluster updateCluster(Cluster clusterToUpdate,String clusterType,String hypervisor,String allocationState,String managedstate){
  ClusterVO cluster=(ClusterVO)clusterToUpdate;
  boolean doUpdate=false;
  if (hypervisor != null && !hypervisor.isEmpty()) {
    Hypervisor.HypervisorType hypervisorType=Hypervisor.HypervisorType.getType(hypervisor);
    if (hypervisorType == null) {
      s_logger.error(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
    }
 else {
      cluster.setHypervisorType(hypervisor);
      doUpdate=true;
    }
  }
  Cluster.ClusterType newClusterType=null;
  if (clusterType != null && !clusterType.isEmpty()) {
    try {
      newClusterType=Cluster.ClusterType.valueOf(clusterType);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + clusterType + ""String_Node_Str"");
    }
    if (newClusterType == null) {
      s_logger.error(""String_Node_Str"" + clusterType + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + clusterType + ""String_Node_Str"");
    }
 else {
      cluster.setClusterType(newClusterType);
      doUpdate=true;
    }
  }
  Grouping.AllocationState newAllocationState=null;
  if (allocationState != null && !allocationState.isEmpty()) {
    try {
      newAllocationState=Grouping.AllocationState.valueOf(allocationState);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + allocationState + ""String_Node_Str"");
    }
    if (newAllocationState == null) {
      s_logger.error(""String_Node_Str"" + allocationState + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + allocationState + ""String_Node_Str"");
    }
 else {
      cluster.setAllocationState(newAllocationState);
      doUpdate=true;
    }
  }
  Managed.ManagedState newManagedState=null;
  Managed.ManagedState oldManagedState=cluster.getManagedState();
  if (managedstate != null && !managedstate.isEmpty()) {
    try {
      newManagedState=Managed.ManagedState.valueOf(managedstate);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + managedstate + ""String_Node_Str"");
    }
    if (newManagedState == null) {
      s_logger.error(""String_Node_Str"" + managedstate + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + managedstate + ""String_Node_Str"");
    }
 else {
      doUpdate=true;
    }
  }
  if (doUpdate) {
    Transaction txn=Transaction.currentTxn();
    try {
      txn.start();
      _clusterDao.update(cluster.getId(),cluster);
      txn.commit();
    }
 catch (    Exception e) {
      s_logger.error(""String_Node_Str"" + e.getMessage(),e);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
  if (newManagedState != null && !newManagedState.equals(oldManagedState)) {
    Transaction txn=Transaction.currentTxn();
    if (newManagedState.equals(Managed.ManagedState.Unmanaged)) {
      boolean success=true;
      try {
        txn.start();
        cluster.setManagedState(Managed.ManagedState.PrepareUnmanaged);
        _clusterDao.update(cluster.getId(),cluster);
        txn.commit();
        List<HostVO> hosts=_hostDao.listBy(cluster.getId(),cluster.getPodId(),cluster.getDataCenterId());
        for (        HostVO host : hosts) {
          if (!host.getStatus().equals(Status.Down) && !host.getStatus().equals(Status.Disconnected) && !host.getStatus().equals(Status.Up)&& !host.getStatus().equals(Status.Alert)) {
            String msg=""String_Node_Str"" + host.getPrivateIpAddress() + ""String_Node_Str""+ host.getStatus().toString()+ ""String_Node_Str"";
            throw new CloudRuntimeException(""String_Node_Str"" + msg);
          }
        }
        for (        HostVO host : hosts) {
          if (host.getStatus().equals(Status.Up)) {
            _agentMgr.disconnect(host.getId());
          }
        }
        int retry=10;
        for (int i=0; i < retry; i++) {
          success=true;
          try {
            Thread.sleep(20 * 1000);
          }
 catch (          Exception e) {
          }
          hosts=_hostDao.listBy(cluster.getId(),cluster.getPodId(),cluster.getDataCenterId());
          for (          HostVO host : hosts) {
            if (!host.getStatus().equals(Status.Down) && !host.getStatus().equals(Status.Disconnected) && !host.getStatus().equals(Status.Alert)) {
              success=false;
              break;
            }
          }
          if (success == true) {
            break;
          }
        }
        if (success == false) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
      }
  finally {
        if (success == false) {
          txn.start();
          cluster.setManagedState(success ? Managed.ManagedState.Unmanaged : Managed.ManagedState.PrepareUnmanagedError);
          _clusterDao.update(cluster.getId(),cluster);
          txn.commit();
        }
      }
    }
 else     if (newManagedState.equals(Managed.ManagedState.Managed)) {
      txn.start();
      cluster.setManagedState(Managed.ManagedState.Managed);
      _clusterDao.update(cluster.getId(),cluster);
      txn.commit();
    }
  }
  return cluster;
}","@Override @DB public Cluster updateCluster(Cluster clusterToUpdate,String clusterType,String hypervisor,String allocationState,String managedstate){
  ClusterVO cluster=(ClusterVO)clusterToUpdate;
  boolean doUpdate=false;
  if (hypervisor != null && !hypervisor.isEmpty()) {
    Hypervisor.HypervisorType hypervisorType=Hypervisor.HypervisorType.getType(hypervisor);
    if (hypervisorType == null) {
      s_logger.error(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
    }
 else {
      cluster.setHypervisorType(hypervisor);
      doUpdate=true;
    }
  }
  Cluster.ClusterType newClusterType=null;
  if (clusterType != null && !clusterType.isEmpty()) {
    try {
      newClusterType=Cluster.ClusterType.valueOf(clusterType);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + clusterType + ""String_Node_Str"");
    }
    if (newClusterType == null) {
      s_logger.error(""String_Node_Str"" + clusterType + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + clusterType + ""String_Node_Str"");
    }
 else {
      cluster.setClusterType(newClusterType);
      doUpdate=true;
    }
  }
  Grouping.AllocationState newAllocationState=null;
  if (allocationState != null && !allocationState.isEmpty()) {
    try {
      newAllocationState=Grouping.AllocationState.valueOf(allocationState);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + allocationState + ""String_Node_Str"");
    }
    if (newAllocationState == null) {
      s_logger.error(""String_Node_Str"" + allocationState + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + allocationState + ""String_Node_Str"");
    }
 else {
      cluster.setAllocationState(newAllocationState);
      doUpdate=true;
    }
  }
  Managed.ManagedState newManagedState=null;
  Managed.ManagedState oldManagedState=cluster.getManagedState();
  if (managedstate != null && !managedstate.isEmpty()) {
    try {
      newManagedState=Managed.ManagedState.valueOf(managedstate);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + managedstate + ""String_Node_Str"");
    }
    if (newManagedState == null) {
      s_logger.error(""String_Node_Str"" + managedstate + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + managedstate + ""String_Node_Str"");
    }
 else {
      doUpdate=true;
    }
  }
  if (doUpdate) {
    Transaction txn=Transaction.currentTxn();
    try {
      txn.start();
      _clusterDao.update(cluster.getId(),cluster);
      txn.commit();
    }
 catch (    Exception e) {
      s_logger.error(""String_Node_Str"" + e.getMessage(),e);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
  if (newManagedState != null && !newManagedState.equals(oldManagedState)) {
    Transaction txn=Transaction.currentTxn();
    if (newManagedState.equals(Managed.ManagedState.Unmanaged)) {
      boolean success=false;
      try {
        txn.start();
        cluster.setManagedState(Managed.ManagedState.PrepareUnmanaged);
        _clusterDao.update(cluster.getId(),cluster);
        txn.commit();
        List<HostVO> hosts=_hostDao.listBy(Host.Type.Routing,cluster.getId(),cluster.getPodId(),cluster.getDataCenterId());
        for (        HostVO host : hosts) {
          if (host.getType().equals(Host.Type.Routing) && !host.getStatus().equals(Status.Down) && !host.getStatus().equals(Status.Disconnected)&& !host.getStatus().equals(Status.Up)&& !host.getStatus().equals(Status.Alert)) {
            String msg=""String_Node_Str"" + host.getPrivateIpAddress() + ""String_Node_Str""+ host.getStatus().toString()+ ""String_Node_Str"";
            throw new CloudRuntimeException(""String_Node_Str"" + msg);
          }
        }
        for (        HostVO host : hosts) {
          if (host.getStatus().equals(Status.Up)) {
            _agentMgr.disconnect(host.getId());
          }
        }
        int retry=10;
        boolean lsuccess=true;
        for (int i=0; i < retry; i++) {
          lsuccess=true;
          try {
            Thread.sleep(20 * 1000);
          }
 catch (          Exception e) {
          }
          hosts=_hostDao.listBy(Host.Type.Routing,cluster.getId(),cluster.getPodId(),cluster.getDataCenterId());
          for (          HostVO host : hosts) {
            if (!host.getStatus().equals(Status.Down) && !host.getStatus().equals(Status.Disconnected) && !host.getStatus().equals(Status.Alert)) {
              lsuccess=false;
              break;
            }
          }
          if (lsuccess == true) {
            success=true;
            break;
          }
        }
        if (success == false) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
      }
  finally {
        txn.start();
        cluster.setManagedState(success ? Managed.ManagedState.Unmanaged : Managed.ManagedState.PrepareUnmanagedError);
        _clusterDao.update(cluster.getId(),cluster);
        txn.commit();
      }
    }
 else     if (newManagedState.equals(Managed.ManagedState.Managed)) {
      txn.start();
      cluster.setManagedState(Managed.ManagedState.Managed);
      _clusterDao.update(cluster.getId(),cluster);
      txn.commit();
    }
  }
  return cluster;
}"
89412,"@Override @DB public VMTemplateStoragePoolVO prepareTemplateForCreate(VMTemplateVO template,StoragePool pool){
  template=_tmpltDao.findById(template.getId(),true);
  long poolId=pool.getId();
  long templateId=template.getId();
  VMTemplateStoragePoolVO templateStoragePoolRef=null;
  VMTemplateHostVO templateHostRef=null;
  long templateStoragePoolRefId;
  String origUrl=null;
  templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
  if (templateStoragePoolRef != null) {
    templateStoragePoolRef.setMarkedForGC(false);
    _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
      }
      return templateStoragePoolRef;
    }
  }
  templateHostRef=_storageMgr.findVmTemplateHost(templateId,pool);
  if (templateHostRef == null) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  HostVO sh=_hostDao.findById(templateHostRef.getHostId());
  origUrl=sh.getStorageUrl();
  if (origUrl == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + sh.toString());
  }
  if (templateStoragePoolRef == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
    }
    templateStoragePoolRef=new VMTemplateStoragePoolVO(poolId,templateId);
    try {
      templateStoragePoolRef=_tmpltPoolDao.persist(templateStoragePoolRef);
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + e.getMessage());
      templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
      if (templateStoragePoolRef == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + poolId + ""String_Node_Str""+ templateId);
      }
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
  }
 else {
    templateStoragePoolRefId=templateStoragePoolRef.getId();
  }
  List<StoragePoolHostVO> vos=_poolHostDao.listByPoolId(poolId);
  templateStoragePoolRef=_tmpltPoolDao.acquireInLockTable(templateStoragePoolRefId,1200);
  if (templateStoragePoolRef == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + templateStoragePoolRefId);
  }
  try {
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      return templateStoragePoolRef;
    }
    String url=origUrl + ""String_Node_Str"" + templateHostRef.getInstallPath();
    PrimaryStorageDownloadCommand dcmd=new PrimaryStorageDownloadCommand(template.getUniqueName(),url,template.getFormat(),template.getAccountId(),pool.getId(),pool.getUuid());
    HostVO secondaryStorageHost=_hostDao.findById(templateHostRef.getHostId());
    assert(secondaryStorageHost != null);
    dcmd.setSecondaryStorageUrl(secondaryStorageHost.getStorageUrl());
    dcmd.setPrimaryStorageUrl(""String_Node_Str"" + pool.getHostAddress() + pool.getPath());
    for (    StoragePoolHostVO vo : vos) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
      }
      dcmd.setLocalPath(vo.getLocalPath());
      PrimaryStorageDownloadAnswer answer=(PrimaryStorageDownloadAnswer)_agentMgr.easySend(_hvGuruMgr.getGuruProcessedCommandTargetHost(vo.getHostId(),dcmd),dcmd,120 * 60 * 1000);
      if (answer != null && answer.getResult()) {
        templateStoragePoolRef.setDownloadPercent(100);
        templateStoragePoolRef.setDownloadState(Status.DOWNLOADED);
        templateStoragePoolRef.setLocalDownloadPath(answer.getInstallPath());
        templateStoragePoolRef.setInstallPath(answer.getInstallPath());
        templateStoragePoolRef.setTemplateSize(answer.getTemplateSize());
        _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
        }
        return templateStoragePoolRef;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getPoolId()+ ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
        }
      }
    }
  }
  finally {
    _tmpltPoolDao.releaseFromLockTable(templateStoragePoolRefId);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
  }
  return null;
}","@Override @DB public VMTemplateStoragePoolVO prepareTemplateForCreate(VMTemplateVO template,StoragePool pool){
  template=_tmpltDao.findById(template.getId(),true);
  long poolId=pool.getId();
  long templateId=template.getId();
  VMTemplateStoragePoolVO templateStoragePoolRef=null;
  VMTemplateHostVO templateHostRef=null;
  long templateStoragePoolRefId;
  String origUrl=null;
  templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
  if (templateStoragePoolRef != null) {
    templateStoragePoolRef.setMarkedForGC(false);
    _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
      }
      return templateStoragePoolRef;
    }
  }
  templateHostRef=_storageMgr.findVmTemplateHost(templateId,pool);
  if (templateHostRef == null) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  HostVO sh=_hostDao.findById(templateHostRef.getHostId());
  origUrl=sh.getStorageUrl();
  if (origUrl == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + sh.toString());
  }
  if (templateStoragePoolRef == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
    }
    templateStoragePoolRef=new VMTemplateStoragePoolVO(poolId,templateId);
    try {
      templateStoragePoolRef=_tmpltPoolDao.persist(templateStoragePoolRef);
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + e.getMessage());
      templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
      if (templateStoragePoolRef == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + poolId + ""String_Node_Str""+ templateId);
      }
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
  }
 else {
    templateStoragePoolRefId=templateStoragePoolRef.getId();
  }
  List<StoragePoolHostVO> vos=_poolHostDao.listByHostStatus(poolId,com.cloud.host.Status.Up);
  templateStoragePoolRef=_tmpltPoolDao.acquireInLockTable(templateStoragePoolRefId,1200);
  if (templateStoragePoolRef == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + templateStoragePoolRefId);
  }
  try {
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      return templateStoragePoolRef;
    }
    String url=origUrl + ""String_Node_Str"" + templateHostRef.getInstallPath();
    PrimaryStorageDownloadCommand dcmd=new PrimaryStorageDownloadCommand(template.getUniqueName(),url,template.getFormat(),template.getAccountId(),pool.getId(),pool.getUuid());
    HostVO secondaryStorageHost=_hostDao.findById(templateHostRef.getHostId());
    assert(secondaryStorageHost != null);
    dcmd.setSecondaryStorageUrl(secondaryStorageHost.getStorageUrl());
    dcmd.setPrimaryStorageUrl(""String_Node_Str"" + pool.getHostAddress() + pool.getPath());
    for (    StoragePoolHostVO vo : vos) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
      }
      dcmd.setLocalPath(vo.getLocalPath());
      PrimaryStorageDownloadAnswer answer=(PrimaryStorageDownloadAnswer)_agentMgr.easySend(_hvGuruMgr.getGuruProcessedCommandTargetHost(vo.getHostId(),dcmd),dcmd,120 * 60 * 1000);
      if (answer != null && answer.getResult()) {
        templateStoragePoolRef.setDownloadPercent(100);
        templateStoragePoolRef.setDownloadState(Status.DOWNLOADED);
        templateStoragePoolRef.setLocalDownloadPath(answer.getInstallPath());
        templateStoragePoolRef.setInstallPath(answer.getInstallPath());
        templateStoragePoolRef.setTemplateSize(answer.getTemplateSize());
        _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
        }
        return templateStoragePoolRef;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getPoolId()+ ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
        }
      }
    }
  }
  finally {
    _tmpltPoolDao.releaseFromLockTable(templateStoragePoolRefId);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
  }
  return null;
}"
89413,"@Override public void run(){
  cleanupFinishedWork();
  cleanupUnfinishedWork();
}","@Override public void run(){
  try {
    Transaction txn=Transaction.open(""String_Node_Str"");
    try {
      cleanupFinishedWork();
      cleanupUnfinishedWork();
    }
  finally {
      txn.close(""String_Node_Str"");
    }
  }
 catch (  Throwable th) {
    try {
      s_logger.error(""String_Node_Str"",th);
    }
 catch (    Throwable th2) {
    }
  }
}"
89414,"@DB public void work(){
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  final SecurityGroupWorkVO work=_workDao.take(_serverId);
  if (work == null) {
    return;
  }
  Long userVmId=work.getInstanceId();
  UserVm vm=null;
  Long seqnum=null;
  s_logger.info(""String_Node_Str"" + work.toString());
  final Transaction txn=Transaction.currentTxn();
  txn.start();
  try {
    vm=_userVMDao.acquireInLockTable(work.getInstanceId());
    if (vm == null) {
      s_logger.warn(""String_Node_Str"" + userVmId);
      return;
    }
    Long agentId=null;
    VmRulesetLogVO log=_rulesetLogDao.findByVmId(userVmId);
    if (log == null) {
      s_logger.warn(""String_Node_Str"" + userVmId);
      return;
    }
    seqnum=log.getLogsequence();
    if (vm != null && vm.getState() == State.Running) {
      Map<PortAndProto,Set<String>> rules=generateRulesForVM(userVmId);
      agentId=vm.getHostId();
      if (agentId != null) {
        _rulesetLogDao.findByVmId(work.getInstanceId());
        SecurityIngressRulesCmd cmd=generateRulesetCmd(vm.getInstanceName(),vm.getPrivateIpAddress(),vm.getPrivateMacAddress(),vm.getId(),generateRulesetSignature(rules),seqnum,rules);
        Commands cmds=new Commands(cmd);
        try {
          _agentMgr.send(agentId,cmds,_answerListener);
        }
 catch (        AgentUnavailableException e) {
          s_logger.debug(""String_Node_Str"" + userVmId + ""String_Node_Str""+ agentId+ ""String_Node_Str"");
          _workDao.updateStep(work.getInstanceId(),seqnum,Step.Done);
        }
      }
    }
  }
  finally {
    if (vm != null) {
      _userVMDao.releaseFromLockTable(userVmId);
      _workDao.updateStep(work.getId(),Step.Done);
    }
    txn.commit();
  }
}","@DB public void work(){
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  final SecurityGroupWorkVO work=_workDao.take(_serverId);
  if (work == null) {
    return;
  }
  Long userVmId=work.getInstanceId();
  UserVm vm=null;
  Long seqnum=null;
  s_logger.debug(""String_Node_Str"" + work);
  final Transaction txn=Transaction.currentTxn();
  txn.start();
  try {
    vm=_userVMDao.acquireInLockTable(work.getInstanceId());
    if (vm == null) {
      s_logger.warn(""String_Node_Str"" + userVmId);
      return;
    }
    Long agentId=null;
    VmRulesetLogVO log=_rulesetLogDao.findByVmId(userVmId);
    if (log == null) {
      s_logger.warn(""String_Node_Str"" + userVmId);
      return;
    }
    seqnum=log.getLogsequence();
    if (vm != null && vm.getState() == State.Running) {
      Map<PortAndProto,Set<String>> rules=generateRulesForVM(userVmId);
      agentId=vm.getHostId();
      if (agentId != null) {
        _rulesetLogDao.findByVmId(work.getInstanceId());
        SecurityIngressRulesCmd cmd=generateRulesetCmd(vm.getInstanceName(),vm.getPrivateIpAddress(),vm.getPrivateMacAddress(),vm.getId(),generateRulesetSignature(rules),seqnum,rules);
        Commands cmds=new Commands(cmd);
        try {
          _agentMgr.send(agentId,cmds,_answerListener);
        }
 catch (        AgentUnavailableException e) {
          s_logger.debug(""String_Node_Str"" + userVmId + ""String_Node_Str""+ agentId+ ""String_Node_Str"");
          _workDao.updateStep(work.getInstanceId(),seqnum,Step.Done);
        }
      }
    }
  }
  finally {
    if (vm != null) {
      _userVMDao.releaseFromLockTable(userVmId);
      _workDao.updateStep(work.getId(),Step.Done);
    }
    txn.commit();
  }
}"
89415,"@Override @DB public Cluster updateCluster(Cluster clusterToUpdate,String clusterType,String hypervisor,String allocationState,String managedstate){
  ClusterVO cluster=(ClusterVO)clusterToUpdate;
  boolean doUpdate=false;
  if (hypervisor != null && !hypervisor.isEmpty()) {
    Hypervisor.HypervisorType hypervisorType=Hypervisor.HypervisorType.getType(hypervisor);
    if (hypervisorType == null) {
      s_logger.error(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
    }
 else {
      cluster.setHypervisorType(hypervisor);
      doUpdate=true;
    }
  }
  Cluster.ClusterType newClusterType=null;
  if (clusterType != null && !clusterType.isEmpty()) {
    try {
      newClusterType=Cluster.ClusterType.valueOf(clusterType);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + clusterType + ""String_Node_Str"");
    }
    if (newClusterType == null) {
      s_logger.error(""String_Node_Str"" + clusterType + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + clusterType + ""String_Node_Str"");
    }
 else {
      cluster.setClusterType(newClusterType);
      doUpdate=true;
    }
  }
  Grouping.AllocationState newAllocationState=null;
  if (allocationState != null && !allocationState.isEmpty()) {
    try {
      newAllocationState=Grouping.AllocationState.valueOf(allocationState);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + allocationState + ""String_Node_Str"");
    }
    if (newAllocationState == null) {
      s_logger.error(""String_Node_Str"" + allocationState + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + allocationState + ""String_Node_Str"");
    }
 else {
      cluster.setAllocationState(newAllocationState);
      doUpdate=true;
    }
  }
  Managed.ManagedState newManagedState=null;
  Managed.ManagedState oldManagedState=cluster.getManagedState();
  if (managedstate != null && !managedstate.isEmpty()) {
    try {
      newManagedState=Managed.ManagedState.valueOf(managedstate);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + managedstate + ""String_Node_Str"");
    }
    if (newManagedState == null) {
      s_logger.error(""String_Node_Str"" + managedstate + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + managedstate + ""String_Node_Str"");
    }
 else {
      doUpdate=true;
    }
  }
  if (doUpdate) {
    Transaction txn=Transaction.currentTxn();
    try {
      txn.start();
      _clusterDao.update(cluster.getId(),cluster);
      txn.commit();
    }
 catch (    Exception e) {
      s_logger.error(""String_Node_Str"" + e.getMessage(),e);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
  if (newManagedState != null && !newManagedState.equals(oldManagedState)) {
    Transaction txn=Transaction.currentTxn();
    if (newManagedState.equals(Managed.ManagedState.Unmanaged)) {
      boolean success=true;
      try {
        txn.start();
        cluster.setManagedState(Managed.ManagedState.PrepareUnmanaged);
        _clusterDao.update(cluster.getId(),cluster);
        txn.commit();
        List<HostVO> hosts=_hostDao.listBy(cluster.getId(),cluster.getPodId(),cluster.getDataCenterId());
        for (        HostVO host : hosts) {
          if (!host.getStatus().equals(Status.Down) && !host.getStatus().equals(Status.Disconnected) && !host.getStatus().equals(Status.Up)&& !host.getStatus().equals(Status.Alert)) {
            String msg=""String_Node_Str"" + host.getPrivateIpAddress() + ""String_Node_Str""+ host.getStatus().toString()+ ""String_Node_Str"";
            throw new CloudRuntimeException(""String_Node_Str"" + msg);
          }
        }
        for (        HostVO host : hosts) {
          if (host.getStatus().equals(Status.Up)) {
            _agentMgr.disconnect(host.getId());
          }
        }
        int retry=10;
        for (int i=0; i < retry; i++) {
          success=true;
          try {
            Thread.sleep(20 * 1000);
          }
 catch (          Exception e) {
          }
          hosts=_hostDao.listBy(cluster.getId(),cluster.getPodId(),cluster.getDataCenterId());
          for (          HostVO host : hosts) {
            if (!host.getStatus().equals(Status.Down) && !host.getStatus().equals(Status.Disconnected) && !host.getStatus().equals(Status.Alert)) {
              success=false;
              break;
            }
          }
          if (success == true) {
            break;
          }
        }
        if (success == false) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
      }
  finally {
        if (success == false) {
          txn.start();
          cluster.setManagedState(success ? Managed.ManagedState.Unmanaged : Managed.ManagedState.PrepareUnmanagedError);
          _clusterDao.update(cluster.getId(),cluster);
          txn.commit();
        }
      }
    }
 else     if (newManagedState.equals(Managed.ManagedState.Managed)) {
      txn.start();
      cluster.setManagedState(Managed.ManagedState.Managed);
      _clusterDao.update(cluster.getId(),cluster);
      txn.commit();
    }
  }
  return cluster;
}","@Override @DB public Cluster updateCluster(Cluster clusterToUpdate,String clusterType,String hypervisor,String allocationState,String managedstate){
  ClusterVO cluster=(ClusterVO)clusterToUpdate;
  boolean doUpdate=false;
  if (hypervisor != null && !hypervisor.isEmpty()) {
    Hypervisor.HypervisorType hypervisorType=Hypervisor.HypervisorType.getType(hypervisor);
    if (hypervisorType == null) {
      s_logger.error(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + hypervisor + ""String_Node_Str"");
    }
 else {
      cluster.setHypervisorType(hypervisor);
      doUpdate=true;
    }
  }
  Cluster.ClusterType newClusterType=null;
  if (clusterType != null && !clusterType.isEmpty()) {
    try {
      newClusterType=Cluster.ClusterType.valueOf(clusterType);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + clusterType + ""String_Node_Str"");
    }
    if (newClusterType == null) {
      s_logger.error(""String_Node_Str"" + clusterType + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + clusterType + ""String_Node_Str"");
    }
 else {
      cluster.setClusterType(newClusterType);
      doUpdate=true;
    }
  }
  Grouping.AllocationState newAllocationState=null;
  if (allocationState != null && !allocationState.isEmpty()) {
    try {
      newAllocationState=Grouping.AllocationState.valueOf(allocationState);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + allocationState + ""String_Node_Str"");
    }
    if (newAllocationState == null) {
      s_logger.error(""String_Node_Str"" + allocationState + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + allocationState + ""String_Node_Str"");
    }
 else {
      cluster.setAllocationState(newAllocationState);
      doUpdate=true;
    }
  }
  Managed.ManagedState newManagedState=null;
  Managed.ManagedState oldManagedState=cluster.getManagedState();
  if (managedstate != null && !managedstate.isEmpty()) {
    try {
      newManagedState=Managed.ManagedState.valueOf(managedstate);
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + managedstate + ""String_Node_Str"");
    }
    if (newManagedState == null) {
      s_logger.error(""String_Node_Str"" + managedstate + ""String_Node_Str"");
      throw new InvalidParameterValueException(""String_Node_Str"" + managedstate + ""String_Node_Str"");
    }
 else {
      doUpdate=true;
    }
  }
  if (doUpdate) {
    Transaction txn=Transaction.currentTxn();
    try {
      txn.start();
      _clusterDao.update(cluster.getId(),cluster);
      txn.commit();
    }
 catch (    Exception e) {
      s_logger.error(""String_Node_Str"" + e.getMessage(),e);
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
  if (newManagedState != null && !newManagedState.equals(oldManagedState)) {
    Transaction txn=Transaction.currentTxn();
    if (newManagedState.equals(Managed.ManagedState.Unmanaged)) {
      boolean success=false;
      try {
        txn.start();
        cluster.setManagedState(Managed.ManagedState.PrepareUnmanaged);
        _clusterDao.update(cluster.getId(),cluster);
        txn.commit();
        List<HostVO> hosts=_hostDao.listBy(Host.Type.Routing,cluster.getId(),cluster.getPodId(),cluster.getDataCenterId());
        for (        HostVO host : hosts) {
          if (host.getType().equals(Host.Type.Routing) && !host.getStatus().equals(Status.Down) && !host.getStatus().equals(Status.Disconnected)&& !host.getStatus().equals(Status.Up)&& !host.getStatus().equals(Status.Alert)) {
            String msg=""String_Node_Str"" + host.getPrivateIpAddress() + ""String_Node_Str""+ host.getStatus().toString()+ ""String_Node_Str"";
            throw new CloudRuntimeException(""String_Node_Str"" + msg);
          }
        }
        for (        HostVO host : hosts) {
          if (host.getStatus().equals(Status.Up)) {
            _agentMgr.disconnect(host.getId());
          }
        }
        int retry=10;
        boolean lsuccess=true;
        for (int i=0; i < retry; i++) {
          lsuccess=true;
          try {
            Thread.sleep(20 * 1000);
          }
 catch (          Exception e) {
          }
          hosts=_hostDao.listBy(Host.Type.Routing,cluster.getId(),cluster.getPodId(),cluster.getDataCenterId());
          for (          HostVO host : hosts) {
            if (!host.getStatus().equals(Status.Down) && !host.getStatus().equals(Status.Disconnected) && !host.getStatus().equals(Status.Alert)) {
              lsuccess=false;
              break;
            }
          }
          if (lsuccess == true) {
            success=true;
            break;
          }
        }
        if (success == false) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
      }
  finally {
        txn.start();
        cluster.setManagedState(success ? Managed.ManagedState.Unmanaged : Managed.ManagedState.PrepareUnmanagedError);
        _clusterDao.update(cluster.getId(),cluster);
        txn.commit();
      }
    }
 else     if (newManagedState.equals(Managed.ManagedState.Managed)) {
      txn.start();
      cluster.setManagedState(Managed.ManagedState.Managed);
      _clusterDao.update(cluster.getId(),cluster);
      txn.commit();
    }
  }
  return cluster;
}"
89416,"@Override @DB public VMTemplateStoragePoolVO prepareTemplateForCreate(VMTemplateVO template,StoragePool pool){
  template=_tmpltDao.findById(template.getId(),true);
  long poolId=pool.getId();
  long templateId=template.getId();
  VMTemplateStoragePoolVO templateStoragePoolRef=null;
  VMTemplateHostVO templateHostRef=null;
  long templateStoragePoolRefId;
  String origUrl=null;
  templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
  if (templateStoragePoolRef != null) {
    templateStoragePoolRef.setMarkedForGC(false);
    _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
      }
      return templateStoragePoolRef;
    }
  }
  templateHostRef=_storageMgr.findVmTemplateHost(templateId,pool);
  if (templateHostRef == null) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  HostVO sh=_hostDao.findById(templateHostRef.getHostId());
  origUrl=sh.getStorageUrl();
  if (origUrl == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + sh.toString());
  }
  if (templateStoragePoolRef == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
    }
    templateStoragePoolRef=new VMTemplateStoragePoolVO(poolId,templateId);
    try {
      templateStoragePoolRef=_tmpltPoolDao.persist(templateStoragePoolRef);
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + e.getMessage());
      templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
      if (templateStoragePoolRef == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + poolId + ""String_Node_Str""+ templateId);
      }
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
  }
 else {
    templateStoragePoolRefId=templateStoragePoolRef.getId();
  }
  List<StoragePoolHostVO> vos=_poolHostDao.listByPoolId(poolId);
  templateStoragePoolRef=_tmpltPoolDao.acquireInLockTable(templateStoragePoolRefId,1200);
  if (templateStoragePoolRef == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + templateStoragePoolRefId);
  }
  try {
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      return templateStoragePoolRef;
    }
    String url=origUrl + ""String_Node_Str"" + templateHostRef.getInstallPath();
    PrimaryStorageDownloadCommand dcmd=new PrimaryStorageDownloadCommand(template.getUniqueName(),url,template.getFormat(),template.getAccountId(),pool.getId(),pool.getUuid());
    HostVO secondaryStorageHost=_hostDao.findById(templateHostRef.getHostId());
    assert(secondaryStorageHost != null);
    dcmd.setSecondaryStorageUrl(secondaryStorageHost.getStorageUrl());
    dcmd.setPrimaryStorageUrl(""String_Node_Str"" + pool.getHostAddress() + pool.getPath());
    for (    StoragePoolHostVO vo : vos) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
      }
      dcmd.setLocalPath(vo.getLocalPath());
      PrimaryStorageDownloadAnswer answer=(PrimaryStorageDownloadAnswer)_agentMgr.easySend(_hvGuruMgr.getGuruProcessedCommandTargetHost(vo.getHostId(),dcmd),dcmd,120 * 60 * 1000);
      if (answer != null && answer.getResult()) {
        templateStoragePoolRef.setDownloadPercent(100);
        templateStoragePoolRef.setDownloadState(Status.DOWNLOADED);
        templateStoragePoolRef.setLocalDownloadPath(answer.getInstallPath());
        templateStoragePoolRef.setInstallPath(answer.getInstallPath());
        templateStoragePoolRef.setTemplateSize(answer.getTemplateSize());
        _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
        }
        return templateStoragePoolRef;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getPoolId()+ ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
        }
      }
    }
  }
  finally {
    _tmpltPoolDao.releaseFromLockTable(templateStoragePoolRefId);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
  }
  return null;
}","@Override @DB public VMTemplateStoragePoolVO prepareTemplateForCreate(VMTemplateVO template,StoragePool pool){
  template=_tmpltDao.findById(template.getId(),true);
  long poolId=pool.getId();
  long templateId=template.getId();
  VMTemplateStoragePoolVO templateStoragePoolRef=null;
  VMTemplateHostVO templateHostRef=null;
  long templateStoragePoolRefId;
  String origUrl=null;
  templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
  if (templateStoragePoolRef != null) {
    templateStoragePoolRef.setMarkedForGC(false);
    _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
      }
      return templateStoragePoolRef;
    }
  }
  templateHostRef=_storageMgr.findVmTemplateHost(templateId,pool);
  if (templateHostRef == null) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  HostVO sh=_hostDao.findById(templateHostRef.getHostId());
  origUrl=sh.getStorageUrl();
  if (origUrl == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + sh.toString());
  }
  if (templateStoragePoolRef == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
    }
    templateStoragePoolRef=new VMTemplateStoragePoolVO(poolId,templateId);
    try {
      templateStoragePoolRef=_tmpltPoolDao.persist(templateStoragePoolRef);
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + e.getMessage());
      templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
      if (templateStoragePoolRef == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + poolId + ""String_Node_Str""+ templateId);
      }
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
  }
 else {
    templateStoragePoolRefId=templateStoragePoolRef.getId();
  }
  List<StoragePoolHostVO> vos=_poolHostDao.listByHostStatus(poolId,com.cloud.host.Status.Up);
  templateStoragePoolRef=_tmpltPoolDao.acquireInLockTable(templateStoragePoolRefId,1200);
  if (templateStoragePoolRef == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + templateStoragePoolRefId);
  }
  try {
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      return templateStoragePoolRef;
    }
    String url=origUrl + ""String_Node_Str"" + templateHostRef.getInstallPath();
    PrimaryStorageDownloadCommand dcmd=new PrimaryStorageDownloadCommand(template.getUniqueName(),url,template.getFormat(),template.getAccountId(),pool.getId(),pool.getUuid());
    HostVO secondaryStorageHost=_hostDao.findById(templateHostRef.getHostId());
    assert(secondaryStorageHost != null);
    dcmd.setSecondaryStorageUrl(secondaryStorageHost.getStorageUrl());
    dcmd.setPrimaryStorageUrl(""String_Node_Str"" + pool.getHostAddress() + pool.getPath());
    for (    StoragePoolHostVO vo : vos) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
      }
      dcmd.setLocalPath(vo.getLocalPath());
      PrimaryStorageDownloadAnswer answer=(PrimaryStorageDownloadAnswer)_agentMgr.easySend(_hvGuruMgr.getGuruProcessedCommandTargetHost(vo.getHostId(),dcmd),dcmd,120 * 60 * 1000);
      if (answer != null && answer.getResult()) {
        templateStoragePoolRef.setDownloadPercent(100);
        templateStoragePoolRef.setDownloadState(Status.DOWNLOADED);
        templateStoragePoolRef.setLocalDownloadPath(answer.getInstallPath());
        templateStoragePoolRef.setInstallPath(answer.getInstallPath());
        templateStoragePoolRef.setTemplateSize(answer.getTemplateSize());
        _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
        }
        return templateStoragePoolRef;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getPoolId()+ ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
        }
      }
    }
  }
  finally {
    _tmpltPoolDao.releaseFromLockTable(templateStoragePoolRefId);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
  }
  return null;
}"
89417,"public AgentMonitor(long msId,HostDao hostDao,VMInstanceDao vmDao,DataCenterDao dcDao,HostPodDao podDao,AgentManagerImpl agentMgr,AlertManager alertMgr,long pingTimeout){
  super(""String_Node_Str"");
  _msId=msId;
  _pingTimeout=pingTimeout;
  _hostDao=hostDao;
  _agentMgr=agentMgr;
  _stop=false;
  _vmDao=vmDao;
  _dcDao=dcDao;
  _podDao=podDao;
  _alertMgr=alertMgr;
  Connection conn=Transaction.getStandaloneConnection();
  if (conn == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  _concierge=new ConnectionConcierge(""String_Node_Str"",conn,true,true);
}","public AgentMonitor(long msId,HostDao hostDao,VMInstanceDao vmDao,DataCenterDao dcDao,HostPodDao podDao,AgentManagerImpl agentMgr,AlertManager alertMgr,long pingTimeout){
  super(""String_Node_Str"");
  _msId=msId;
  _pingTimeout=pingTimeout;
  _hostDao=hostDao;
  _agentMgr=agentMgr;
  _stop=false;
  _vmDao=vmDao;
  _dcDao=dcDao;
  _podDao=podDao;
  _alertMgr=alertMgr;
  try {
    Connection conn=Transaction.getStandaloneConnectionWithException();
    conn.setAutoCommit(true);
    _concierge=new ConnectionConcierge(""String_Node_Str"",conn,false);
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}"
89418,"private Connection getHeartbeatConnection() throws SQLException {
  if (_heartbeatConnection == null) {
    Connection conn=Transaction.getStandaloneConnectionWithException();
    _heartbeatConnection=new ConnectionConcierge(""String_Node_Str"",conn,false,false);
  }
  return _heartbeatConnection.conn();
}","private Connection getHeartbeatConnection() throws SQLException {
  if (_heartbeatConnection == null) {
    Connection conn=Transaction.getStandaloneConnectionWithException();
    _heartbeatConnection=new ConnectionConcierge(""String_Node_Str"",conn,false);
  }
  return _heartbeatConnection.conn();
}"
89419,"public Attribute findAttribute(String name){
  for (  Attribute attr : _attributes) {
    if (attr.columnName.equals(GenericDao.REMOVED) && attr.isUpdatable()) {
      return null;
    }
    if (attr.columnName.equals(name)) {
      return attr;
    }
  }
  return null;
}","public Attribute findAttribute(String name){
  for (  Attribute attr : _attributes) {
    if (attr.columnName.equalsIgnoreCase(name)) {
      if (attr.columnName.equalsIgnoreCase(GenericDao.REMOVED) && attr.isUpdatable()) {
        return null;
      }
      return attr;
    }
  }
  return null;
}"
89420,"public Attribute findAttribute(String name){
  for (  Attribute attr : _attributes) {
    if (attr.columnName.equals(GenericDao.REMOVED) && attr.isUpdatable()) {
      return null;
    }
    if (attr.columnName.equals(name)) {
      return attr;
    }
  }
  return null;
}","public Attribute findAttribute(String name){
  for (  Attribute attr : _attributes) {
    if (attr.columnName.equalsIgnoreCase(name)) {
      if (attr.columnName.equalsIgnoreCase(GenericDao.REMOVED) && attr.isUpdatable()) {
        return null;
      }
      return attr;
    }
  }
  return null;
}"
89421,"public Attribute findAttribute(String name){
  for (  Attribute attr : _attributes) {
    if (attr.columnName.equals(GenericDao.REMOVED) && attr.isUpdatable()) {
      return null;
    }
    if (attr.columnName.equals(name)) {
      return attr;
    }
  }
  return null;
}","public Attribute findAttribute(String name){
  for (  Attribute attr : _attributes) {
    if (attr.columnName.equalsIgnoreCase(name)) {
      if (attr.columnName.equalsIgnoreCase(GenericDao.REMOVED) && attr.isUpdatable()) {
        return null;
      }
      return attr;
    }
  }
  return null;
}"
89422,"public static ByteBuffer doDecompress(ByteBuffer buffer){
  byte[] byteArrayIn=new byte[1024];
  ByteArrayInputStream byteIn;
  if (buffer.hasArray()) {
    byteIn=new ByteArrayInputStream(buffer.array(),buffer.position() + buffer.arrayOffset(),buffer.remaining());
  }
 else {
    byte[] array=new byte[buffer.limit() - buffer.position()];
    buffer.get(array);
    byteIn=new ByteArrayInputStream(array);
  }
  ByteBuffer retBuff=ByteBuffer.allocate(65535);
  int len=0;
  try {
    GZIPInputStream in=new GZIPInputStream(byteIn);
    while ((len=in.read(byteArrayIn)) > 0) {
      retBuff.put(byteArrayIn,0,len);
    }
    in.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  retBuff.flip();
  return retBuff;
}","public static ByteBuffer doDecompress(ByteBuffer buffer,int length){
  byte[] byteArrayIn=new byte[1024];
  ByteArrayInputStream byteIn;
  if (buffer.hasArray()) {
    byteIn=new ByteArrayInputStream(buffer.array(),buffer.position() + buffer.arrayOffset(),buffer.remaining());
  }
 else {
    byte[] array=new byte[buffer.limit() - buffer.position()];
    buffer.get(array);
    byteIn=new ByteArrayInputStream(array);
  }
  ByteBuffer retBuff=ByteBuffer.allocate(length);
  int len=0;
  try {
    GZIPInputStream in=new GZIPInputStream(byteIn);
    while ((len=in.read(byteArrayIn)) > 0) {
      retBuff.put(byteArrayIn,0,len);
    }
    in.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  retBuff.flip();
  return retBuff;
}"
89423,"public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  ByteBuffer tmp;
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  tmp=ByteBuffer.wrap(_content.getBytes());
  if (tmp.capacity() >= 8192) {
    tmp=doCompress(tmp);
    _flags|=FLAG_COMPRESSED;
  }
  buffers[1]=tmp;
  buffers[0]=serializeHeader(buffers[1].capacity());
  return buffers;
}","public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  ByteBuffer tmp;
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  tmp=ByteBuffer.wrap(_content.getBytes());
  int capacity=tmp.capacity();
  if (capacity >= 8192) {
    tmp=doCompress(tmp,capacity);
    _flags|=FLAG_COMPRESSED;
  }
  buffers[1]=tmp;
  buffers[0]=serializeHeader(capacity);
  return buffers;
}"
89424,"/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  if ((flags & FLAG_COMPRESSED) != 0) {
    buff=doDecompress(buff);
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}","/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  if ((flags & FLAG_COMPRESSED) != 0) {
    buff=doDecompress(buff,size);
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}"
89425,"public static ByteBuffer doCompress(ByteBuffer buffer){
  ByteArrayOutputStream byteOut=new ByteArrayOutputStream(65535);
  byte[] array=new byte[buffer.capacity()];
  buffer.get(array);
  try {
    GZIPOutputStream out=new GZIPOutputStream(byteOut,65535);
    out.write(array);
    out.finish();
    out.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  return ByteBuffer.wrap(byteOut.toByteArray());
}","public static ByteBuffer doCompress(ByteBuffer buffer,int length){
  ByteArrayOutputStream byteOut=new ByteArrayOutputStream(length);
  byte[] array;
  if (buffer.hasArray()) {
    array=buffer.array();
  }
 else {
    array=new byte[buffer.capacity()];
    buffer.get(array);
  }
  try {
    GZIPOutputStream out=new GZIPOutputStream(byteOut,length);
    out.write(array);
    out.finish();
    out.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  return ByteBuffer.wrap(byteOut.toByteArray());
}"
89426,"@Override public List<ServiceOfferingVO> searchForServiceOfferings(ListServiceOfferingsCmd cmd){
  Filter searchFilter=new Filter(ServiceOfferingVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
  Account account=UserContext.current().getCaller();
  Object name=cmd.getServiceOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long vmId=cmd.getVirtualMachineId();
  Long domainId=cmd.getDomainId();
  Boolean issystem=cmd.getIsSystem();
  String vm_type_str=cmd.getSystemVmType();
  if (domainId != null) {
    if (account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      if (account.getDomainId() != 1 && issystem) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      return _offeringsDao.findSystemOffering(domainId,issystem,vm_type_str);
    }
 else {
      if (issystem) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (isPermissible(account.getDomainId(),domainId)) {
        return _offeringsDao.findSystemOffering(domainId,false,vm_type_str);
      }
 else {
        throw new PermissionDeniedException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
      }
    }
  }
  if ((account.getType() == Account.ACCOUNT_TYPE_NORMAL || account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || account.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
    if (issystem) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    return searchServiceOfferingsInternal(account,name,id,vmId,keyword,searchFilter);
  }
  if (account.getDomainId() != 1 && issystem) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (keyword != null) {
    SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
 else   if (vmId != null) {
    UserVmVO vmInstance=_userVmDao.findById(vmId);
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
    if ((account != null) && !isAdmin(account.getType())) {
      if (account.getId() != vmInstance.getAccountId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
      }
    }
    ServiceOfferingVO offering=_offeringsDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (vm_type_str != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,vm_type_str);
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,issystem);
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NULL);
  return _offeringsDao.search(sc,searchFilter);
}","@Override public List<ServiceOfferingVO> searchForServiceOfferings(ListServiceOfferingsCmd cmd){
  Filter searchFilter=new Filter(ServiceOfferingVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
  Account caller=UserContext.current().getCaller();
  Object name=cmd.getServiceOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long vmId=cmd.getVirtualMachineId();
  Long domainId=cmd.getDomainId();
  Boolean isSystem=cmd.getIsSystem();
  String vm_type_str=cmd.getSystemVmType();
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && isSystem) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId != null && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    if (!isPermissible(caller.getDomainId(),domainId)) {
      throw new PermissionDeniedException(""String_Node_Str"" + caller.getAccountName() + ""String_Node_Str"");
    }
  }
  if ((caller.getType() == Account.ACCOUNT_TYPE_NORMAL || caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
    if (isSystem) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    return searchServiceOfferingsInternal(caller,name,id,vmId,keyword,searchFilter);
  }
  if (caller.getDomainId() != 1 && isSystem) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (keyword != null) {
    SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
 else   if (vmId != null) {
    UserVmVO vmInstance=_userVmDao.findById(vmId);
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
    if ((caller != null) && !isAdmin(caller.getType())) {
      if (caller.getId() != vmInstance.getAccountId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
      }
    }
    ServiceOfferingVO offering=_offeringsDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (isSystem != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isSystem);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (domainId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainId);
  }
  if (vm_type_str != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,vm_type_str);
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isSystem);
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NULL);
  return _offeringsDao.search(sc,searchFilter);
}"
89427,"@Override @ActionEvent(eventType=EventTypes.EVENT_USER_UPDATE,eventDescription=""String_Node_Str"") public UserAccount updateUser(UpdateUserCmd cmd){
  Long id=cmd.getId();
  String apiKey=cmd.getApiKey();
  String firstName=cmd.getFirstname();
  String email=cmd.getEmail();
  String lastName=cmd.getLastname();
  String password=cmd.getPassword();
  String secretKey=cmd.getSecretKey();
  String timeZone=cmd.getTimezone();
  String userName=cmd.getUsername();
  UserVO user=_userDao.getUser(id);
  if (user == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((apiKey == null && secretKey != null) || (apiKey != null && secretKey == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if (account != null && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new PermissionDeniedException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),account);
  if (firstName == null) {
    firstName=user.getFirstname();
  }
  if (lastName == null) {
    lastName=user.getLastname();
  }
  if (userName == null) {
    userName=user.getUsername();
  }
  if (password == null) {
    password=user.getPassword();
  }
  if (email == null) {
    email=user.getEmail();
  }
  if (timeZone == null) {
    timeZone=user.getTimezone();
  }
  if (apiKey == null) {
    apiKey=user.getApiKey();
  }
  if (secretKey == null) {
    secretKey=user.getSecretKey();
  }
  Long accountId=user.getAccountId();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  try {
    if (apiKey != null && secretKey != null) {
      Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
      if (apiKeyOwner != null) {
        User usr=apiKeyOwner.first();
        if (usr.getId() != id) {
          throw new InvalidParameterValueException(""String_Node_Str"" + apiKey + ""String_Node_Str""+ id+ ""String_Node_Str"");
        }
 else {
        }
      }
    }
    _userDao.update(id,userName,password,firstName,lastName,email,accountId,timeZone,apiKey,secretKey);
  }
 catch (  Throwable th) {
    s_logger.error(""String_Node_Str"",th);
    throw new CloudRuntimeException(""String_Node_Str"" + id);
  }
  return _userAccountDao.findById(id);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_USER_UPDATE,eventDescription=""String_Node_Str"") public UserAccount updateUser(UpdateUserCmd cmd){
  Long id=cmd.getId();
  String apiKey=cmd.getApiKey();
  String firstName=cmd.getFirstname();
  String email=cmd.getEmail();
  String lastName=cmd.getLastname();
  String password=cmd.getPassword();
  String secretKey=cmd.getSecretKey();
  String timeZone=cmd.getTimezone();
  String userName=cmd.getUsername();
  UserVO user=_userDao.getUser(id);
  if (user == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((apiKey == null && secretKey != null) || (apiKey != null && secretKey == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if (account != null && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new PermissionDeniedException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),account);
  if (firstName != null) {
    user.setFirstname(firstName);
  }
  if (lastName != null) {
    user.setLastname(lastName);
  }
  if (userName != null) {
    List<UserVO> duplicatedUsers=_userDao.findUsersLike(userName);
    for (    UserVO duplicatedUser : duplicatedUsers) {
      if (duplicatedUser.getId() != user.getId()) {
        Account duplicatedUserAccount=_accountDao.findById(duplicatedUser.getAccountId());
        if (duplicatedUserAccount.getDomainId() == account.getDomainId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + userName + ""String_Node_Str""+ duplicatedUserAccount.getDomainId());
        }
      }
    }
    user.setUsername(userName);
  }
  if (password != null) {
    user.setPassword(password);
  }
  if (email != null) {
    user.setEmail(email);
  }
  if (timeZone != null) {
    user.setTimezone(timeZone);
  }
  if (apiKey != null) {
    user.setApiKey(apiKey);
  }
  if (secretKey != null) {
    user.setSecretKey(secretKey);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  try {
    if (apiKey != null && secretKey != null) {
      Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
      if (apiKeyOwner != null) {
        User usr=apiKeyOwner.first();
        if (usr.getId() != id) {
          throw new InvalidParameterValueException(""String_Node_Str"" + apiKey + ""String_Node_Str""+ id+ ""String_Node_Str"");
        }
 else {
        }
      }
    }
    _userDao.update(id,user);
  }
 catch (  Throwable th) {
    s_logger.error(""String_Node_Str"",th);
    throw new CloudRuntimeException(""String_Node_Str"" + id);
  }
  return _userAccountDao.findById(id);
}"
89428,"public static ByteBuffer doDecompress(ByteBuffer buffer){
  byte[] byteArrayIn=new byte[1024];
  ByteArrayInputStream byteIn;
  if (buffer.hasArray()) {
    byteIn=new ByteArrayInputStream(buffer.array(),buffer.position() + buffer.arrayOffset(),buffer.remaining());
  }
 else {
    byte[] array=new byte[buffer.limit() - buffer.position()];
    buffer.get(array);
    byteIn=new ByteArrayInputStream(array);
  }
  ByteBuffer retBuff=ByteBuffer.allocate(65535);
  int len=0;
  try {
    GZIPInputStream in=new GZIPInputStream(byteIn);
    while ((len=in.read(byteArrayIn)) > 0) {
      retBuff.put(byteArrayIn,0,len);
    }
    in.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  retBuff.flip();
  return retBuff;
}","public static ByteBuffer doDecompress(ByteBuffer buffer,int length){
  byte[] byteArrayIn=new byte[1024];
  ByteArrayInputStream byteIn;
  if (buffer.hasArray()) {
    byteIn=new ByteArrayInputStream(buffer.array(),buffer.position() + buffer.arrayOffset(),buffer.remaining());
  }
 else {
    byte[] array=new byte[buffer.limit() - buffer.position()];
    buffer.get(array);
    byteIn=new ByteArrayInputStream(array);
  }
  ByteBuffer retBuff=ByteBuffer.allocate(length);
  int len=0;
  try {
    GZIPInputStream in=new GZIPInputStream(byteIn);
    while ((len=in.read(byteArrayIn)) > 0) {
      retBuff.put(byteArrayIn,0,len);
    }
    in.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  retBuff.flip();
  return retBuff;
}"
89429,"public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  ByteBuffer tmp;
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  tmp=ByteBuffer.wrap(_content.getBytes());
  if (tmp.capacity() >= 8192) {
    tmp=doCompress(tmp);
    _flags|=FLAG_COMPRESSED;
  }
  buffers[1]=tmp;
  buffers[0]=serializeHeader(buffers[1].capacity());
  return buffers;
}","public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  ByteBuffer tmp;
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  tmp=ByteBuffer.wrap(_content.getBytes());
  int capacity=tmp.capacity();
  if (capacity >= 8192) {
    tmp=doCompress(tmp,capacity);
    _flags|=FLAG_COMPRESSED;
  }
  buffers[1]=tmp;
  buffers[0]=serializeHeader(capacity);
  return buffers;
}"
89430,"/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  if ((flags & FLAG_COMPRESSED) != 0) {
    buff=doDecompress(buff);
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}","/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  if ((flags & FLAG_COMPRESSED) != 0) {
    buff=doDecompress(buff,size);
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}"
89431,"public static ByteBuffer doCompress(ByteBuffer buffer){
  ByteArrayOutputStream byteOut=new ByteArrayOutputStream(65535);
  byte[] array=new byte[buffer.capacity()];
  buffer.get(array);
  try {
    GZIPOutputStream out=new GZIPOutputStream(byteOut,65535);
    out.write(array);
    out.finish();
    out.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  return ByteBuffer.wrap(byteOut.toByteArray());
}","public static ByteBuffer doCompress(ByteBuffer buffer,int length){
  ByteArrayOutputStream byteOut=new ByteArrayOutputStream(length);
  byte[] array;
  if (buffer.hasArray()) {
    array=buffer.array();
  }
 else {
    array=new byte[buffer.capacity()];
    buffer.get(array);
  }
  try {
    GZIPOutputStream out=new GZIPOutputStream(byteOut,length);
    out.write(array);
    out.finish();
    out.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  return ByteBuffer.wrap(byteOut.toByteArray());
}"
89432,"@Override public AccountResponse createAccountResponse(Account account){
  boolean accountIsAdmin=(account.getType() == Account.ACCOUNT_TYPE_ADMIN);
  AccountResponse accountResponse=new AccountResponse();
  accountResponse.setId(account.getId());
  accountResponse.setName(account.getAccountName());
  accountResponse.setAccountType(account.getType());
  accountResponse.setDomainId(account.getDomainId());
  accountResponse.setDomainName(ApiDBUtils.findDomainById(account.getDomainId()).getName());
  accountResponse.setState(account.getState().toString());
  List<UserStatisticsVO> stats=ApiDBUtils.listUserStatsBy(account.getId());
  if (stats == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
  Long bytesSent=0L;
  Long bytesReceived=0L;
  for (  UserStatisticsVO stat : stats) {
    Long rx=stat.getNetBytesReceived() + stat.getCurrentBytesReceived();
    Long tx=stat.getNetBytesSent() + stat.getCurrentBytesSent();
    bytesReceived=bytesReceived + Long.valueOf(rx);
    bytesSent=bytesSent + Long.valueOf(tx);
  }
  accountResponse.setBytesReceived(bytesReceived);
  accountResponse.setBytesSent(bytesSent);
  Long vmLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.user_vm,account.getId());
  String vmLimitDisplay=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit);
  Long vmTotal=ApiDBUtils.getResourceCount(ResourceType.user_vm,account.getId());
  String vmAvail=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit - vmTotal);
  accountResponse.setVmLimit(vmLimitDisplay);
  accountResponse.setVmTotal(vmTotal);
  accountResponse.setVmAvailable(vmAvail);
  Long ipLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.public_ip,account.getId());
  String ipLimitDisplay=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit);
  Long ipTotal=ApiDBUtils.getResourceCount(ResourceType.public_ip,account.getId());
  String ipAvail=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit - ipTotal);
  accountResponse.setIpLimit(ipLimitDisplay);
  accountResponse.setIpTotal(ipTotal);
  accountResponse.setIpAvailable(ipAvail);
  Long volumeLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.volume,account.getId());
  String volumeLimitDisplay=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit);
  Long volumeTotal=ApiDBUtils.getResourceCount(ResourceType.volume,account.getId());
  String volumeAvail=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit - volumeTotal);
  accountResponse.setVolumeLimit(volumeLimitDisplay);
  accountResponse.setVolumeTotal(volumeTotal);
  accountResponse.setVolumeAvailable(volumeAvail);
  Long snapshotLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.snapshot,account.getId());
  String snapshotLimitDisplay=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit);
  Long snapshotTotal=ApiDBUtils.getResourceCount(ResourceType.snapshot,account.getId());
  String snapshotAvail=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit - snapshotTotal);
  accountResponse.setSnapshotLimit(snapshotLimitDisplay);
  accountResponse.setSnapshotTotal(snapshotTotal);
  accountResponse.setSnapshotAvailable(snapshotAvail);
  Long templateLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.template,account.getId());
  String templateLimitDisplay=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit);
  Long templateTotal=ApiDBUtils.getResourceCount(ResourceType.template,account.getId());
  String templateAvail=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit - templateTotal);
  accountResponse.setTemplateLimit(templateLimitDisplay);
  accountResponse.setTemplateTotal(templateTotal);
  accountResponse.setTemplateAvailable(templateAvail);
  int vmStopped=0;
  int vmRunning=0;
  Long[] accountIds=new Long[1];
  accountIds[0]=account.getId();
  Criteria c1=new Criteria();
  c1.addCriteria(Criteria.ACCOUNTID,accountIds);
  List<? extends UserVm> virtualMachines=ApiDBUtils.searchForUserVMs(c1);
  for (Iterator<? extends UserVm> iter=virtualMachines.iterator(); iter.hasNext(); ) {
    UserVm vm=iter.next();
    if (vm.getState() == State.Stopped) {
      vmStopped++;
    }
 else     if (vm.getState() == State.Running) {
      vmRunning++;
    }
  }
  accountResponse.setVmStopped(vmStopped);
  accountResponse.setVmRunning(vmRunning);
  accountResponse.setObjectName(""String_Node_Str"");
  List<UserVO> usersForAccount=ApiDBUtils.listUsersByAccount(account.getAccountId());
  List<UserResponse> userResponseList=new ArrayList<UserResponse>();
  for (  UserVO user : usersForAccount) {
    UserResponse userResponse=new UserResponse();
    userResponse.setAccountName(account.getAccountName());
    userResponse.setAccountType(account.getType());
    userResponse.setApiKey(user.getApiKey());
    userResponse.setCreated(user.getCreated());
    userResponse.setDomainId(account.getDomainId());
    userResponse.setDomainName(ApiDBUtils.findDomainById(account.getDomainId()).getName());
    userResponse.setEmail(user.getEmail());
    userResponse.setFirstname(user.getFirstname());
    userResponse.setId(user.getId());
    userResponse.setSecretKey(user.getSecretKey());
    userResponse.setLastname(user.getLastname());
    userResponse.setState(user.getState().toString());
    userResponse.setTimezone(user.getTimezone());
    userResponse.setUsername(user.getUsername());
    userResponseList.add(userResponse);
  }
  accountResponse.setUsers(userResponseList);
  return accountResponse;
}","@Override public AccountResponse createAccountResponse(Account account){
  boolean accountIsAdmin=(account.getType() == Account.ACCOUNT_TYPE_ADMIN);
  AccountResponse accountResponse=new AccountResponse();
  accountResponse.setId(account.getId());
  accountResponse.setName(account.getAccountName());
  accountResponse.setAccountType(account.getType());
  accountResponse.setDomainId(account.getDomainId());
  accountResponse.setDomainName(ApiDBUtils.findDomainById(account.getDomainId()).getName());
  accountResponse.setState(account.getState().toString());
  accountResponse.setNetworkDomain(account.getNetworkDomain());
  List<UserStatisticsVO> stats=ApiDBUtils.listUserStatsBy(account.getId());
  if (stats == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
  Long bytesSent=0L;
  Long bytesReceived=0L;
  for (  UserStatisticsVO stat : stats) {
    Long rx=stat.getNetBytesReceived() + stat.getCurrentBytesReceived();
    Long tx=stat.getNetBytesSent() + stat.getCurrentBytesSent();
    bytesReceived=bytesReceived + Long.valueOf(rx);
    bytesSent=bytesSent + Long.valueOf(tx);
  }
  accountResponse.setBytesReceived(bytesReceived);
  accountResponse.setBytesSent(bytesSent);
  Long vmLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.user_vm,account.getId());
  String vmLimitDisplay=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit);
  Long vmTotal=ApiDBUtils.getResourceCount(ResourceType.user_vm,account.getId());
  String vmAvail=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit - vmTotal);
  accountResponse.setVmLimit(vmLimitDisplay);
  accountResponse.setVmTotal(vmTotal);
  accountResponse.setVmAvailable(vmAvail);
  Long ipLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.public_ip,account.getId());
  String ipLimitDisplay=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit);
  Long ipTotal=ApiDBUtils.getResourceCount(ResourceType.public_ip,account.getId());
  String ipAvail=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit - ipTotal);
  accountResponse.setIpLimit(ipLimitDisplay);
  accountResponse.setIpTotal(ipTotal);
  accountResponse.setIpAvailable(ipAvail);
  Long volumeLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.volume,account.getId());
  String volumeLimitDisplay=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit);
  Long volumeTotal=ApiDBUtils.getResourceCount(ResourceType.volume,account.getId());
  String volumeAvail=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit - volumeTotal);
  accountResponse.setVolumeLimit(volumeLimitDisplay);
  accountResponse.setVolumeTotal(volumeTotal);
  accountResponse.setVolumeAvailable(volumeAvail);
  Long snapshotLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.snapshot,account.getId());
  String snapshotLimitDisplay=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit);
  Long snapshotTotal=ApiDBUtils.getResourceCount(ResourceType.snapshot,account.getId());
  String snapshotAvail=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit - snapshotTotal);
  accountResponse.setSnapshotLimit(snapshotLimitDisplay);
  accountResponse.setSnapshotTotal(snapshotTotal);
  accountResponse.setSnapshotAvailable(snapshotAvail);
  Long templateLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.template,account.getId());
  String templateLimitDisplay=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit);
  Long templateTotal=ApiDBUtils.getResourceCount(ResourceType.template,account.getId());
  String templateAvail=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit - templateTotal);
  accountResponse.setTemplateLimit(templateLimitDisplay);
  accountResponse.setTemplateTotal(templateTotal);
  accountResponse.setTemplateAvailable(templateAvail);
  int vmStopped=0;
  int vmRunning=0;
  Long[] accountIds=new Long[1];
  accountIds[0]=account.getId();
  Criteria c1=new Criteria();
  c1.addCriteria(Criteria.ACCOUNTID,accountIds);
  List<? extends UserVm> virtualMachines=ApiDBUtils.searchForUserVMs(c1);
  for (Iterator<? extends UserVm> iter=virtualMachines.iterator(); iter.hasNext(); ) {
    UserVm vm=iter.next();
    if (vm.getState() == State.Stopped) {
      vmStopped++;
    }
 else     if (vm.getState() == State.Running) {
      vmRunning++;
    }
  }
  accountResponse.setVmStopped(vmStopped);
  accountResponse.setVmRunning(vmRunning);
  accountResponse.setObjectName(""String_Node_Str"");
  List<UserVO> usersForAccount=ApiDBUtils.listUsersByAccount(account.getAccountId());
  List<UserResponse> userResponseList=new ArrayList<UserResponse>();
  for (  UserVO user : usersForAccount) {
    UserResponse userResponse=new UserResponse();
    userResponse.setAccountName(account.getAccountName());
    userResponse.setAccountType(account.getType());
    userResponse.setApiKey(user.getApiKey());
    userResponse.setCreated(user.getCreated());
    userResponse.setDomainId(account.getDomainId());
    userResponse.setDomainName(ApiDBUtils.findDomainById(account.getDomainId()).getName());
    userResponse.setEmail(user.getEmail());
    userResponse.setFirstname(user.getFirstname());
    userResponse.setId(user.getId());
    userResponse.setSecretKey(user.getSecretKey());
    userResponse.setLastname(user.getLastname());
    userResponse.setState(user.getState().toString());
    userResponse.setTimezone(user.getTimezone());
    userResponse.setUsername(user.getUsername());
    userResponseList.add(userResponse);
  }
  accountResponse.setUsers(userResponseList);
  return accountResponse;
}"
89433,"@Override public DomainResponse createDomainResponse(Domain domain){
  DomainResponse domainResponse=new DomainResponse();
  domainResponse.setDomainName(domain.getName());
  domainResponse.setId(domain.getId());
  domainResponse.setLevel(domain.getLevel());
  domainResponse.setParentDomainId(domain.getParent());
  if (domain.getParent() != null) {
    domainResponse.setParentDomainName(ApiDBUtils.findDomainById(domain.getParent()).getName());
  }
  if (domain.getChildCount() > 0) {
    domainResponse.setHasChild(true);
  }
  domainResponse.setObjectName(""String_Node_Str"");
  return domainResponse;
}","@Override public DomainResponse createDomainResponse(Domain domain){
  DomainResponse domainResponse=new DomainResponse();
  domainResponse.setDomainName(domain.getName());
  domainResponse.setId(domain.getId());
  domainResponse.setLevel(domain.getLevel());
  domainResponse.setNetworkDomain(domain.getNetworkDomain());
  domainResponse.setParentDomainId(domain.getParent());
  if (domain.getParent() != null) {
    domainResponse.setParentDomainName(ApiDBUtils.findDomainById(domain.getParent()).getName());
  }
  if (domain.getChildCount() > 0) {
    domainResponse.setHasChild(true);
  }
  domainResponse.setObjectName(""String_Node_Str"");
  return domainResponse;
}"
89434,"/** 
 * Creates a new zone
 * @param userId
 * @param zoneName
 * @param dns1
 * @param dns2
 * @param internalDns1
 * @param internalDns2
 * @param vnetRange
 * @param guestCidr
 * @param zoneType
 * @param allocationState
 * @return
 * @throws 
     * @throws 
 */
DataCenterVO createZone(long userId,String zoneName,String dns1,String dns2,String internalDns1,String internalDns2,String vnetRange,String guestCidr,String domain,Long domainId,NetworkType zoneType,boolean isSecurityGroupEnabled,String allocationState);","/** 
 * Creates a new zone
 * @param userId
 * @param zoneName
 * @param dns1
 * @param dns2
 * @param internalDns1
 * @param internalDns2
 * @param vnetRange
 * @param guestCidr
 * @param zoneType
 * @param allocationState
 * @param networkDomain TODO
 * @return
 * @throws 
     * @throws 
 */
DataCenterVO createZone(long userId,String zoneName,String dns1,String dns2,String internalDns1,String internalDns2,String vnetRange,String guestCidr,String domain,Long domainId,NetworkType zoneType,boolean isSecurityGroupEnabled,String allocationState,String networkDomain);"
89435,"@Override public DataCenter editZone(UpdateZoneCmd cmd){
  Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long userId=UserContext.current().getCallerUserId();
  int startVnetRange=0;
  int stopVnetRange=0;
  Boolean isPublic=cmd.isPublic();
  String allocationStateStr=cmd.getAllocationState();
  String dhcpProvider=cmd.getDhcpProvider();
  Map detailsMap=cmd.getDetails();
  Map<String,String> newDetails=new HashMap<String,String>();
  if (detailsMap != null) {
    Collection zoneDetailsCollection=detailsMap.values();
    Iterator iter=zoneDetailsCollection.iterator();
    while (iter.hasNext()) {
      HashMap detail=(HashMap)iter.next();
      String key=(String)detail.get(""String_Node_Str"");
      String value=(String)detail.get(""String_Node_Str"");
      if ((key == null) || (value == null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      newDetails.put(key,value);
    }
  }
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    if (vnetRange != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str"");
    }
 else     if (guestCidr != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str"");
    }
  }
  if ((guestCidr != null) && !NetUtils.validateGuestCidr(guestCidr)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  if (vnetRange != null) {
    if (zoneHasAllocatedVnets(zoneId)) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    String[] startStopRange=new String[2];
    startStopRange=vnetRange.split(""String_Node_Str"");
    if (startStopRange.length == 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startStopRange[0] == null || startStopRange[1] == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    try {
      startVnetRange=Integer.parseInt(startStopRange[0]);
      stopVnetRange=Integer.parseInt(startStopRange[1]);
    }
 catch (    NumberFormatException e) {
      s_logger.warn(""String_Node_Str"",e);
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange < 0 || stopVnetRange > 4096) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange > stopVnetRange) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  boolean dnsUpdate=false;
  if (dns1 != null || dns2 != null) {
    dnsUpdate=true;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (guestCidr == null) {
    guestCidr=zone.getGuestNetworkCidr();
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null,allocationStateStr);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  zone.setGuestNetworkCidr(guestCidr);
  if (vnetRange != null) {
    zone.setVnet(vnetRange);
  }
  if (isPublic != null && isPublic) {
    zone.setDomainId(null);
    zone.setDomain(null);
  }
  Map<String,String> updatedDetails=new HashMap<String,String>();
  _zoneDao.loadDetails(zone);
  if (zone.getDetails() != null) {
    updatedDetails.putAll(zone.getDetails());
  }
  updatedDetails.putAll(newDetails);
  zone.setDetails(updatedDetails);
  if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
    Grouping.AllocationState allocationState=Grouping.AllocationState.valueOf(allocationStateStr);
    zone.setAllocationState(allocationState);
  }
  if (dhcpProvider != null) {
    zone.setDhcpProvider(dhcpProvider);
  }
  if (!_zoneDao.update(zoneId,zone)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (vnetRange != null) {
    String[] tokens=vnetRange.split(""String_Node_Str"");
    int begin=Integer.parseInt(tokens[0]);
    int end=tokens.length == 1 ? (begin) : Integer.parseInt(tokens[1]);
    _zoneDao.deleteVnet(zoneId);
    _zoneDao.addVnet(zone.getId(),begin,end);
  }
  return zone;
}","@Override public DataCenter editZone(UpdateZoneCmd cmd){
  Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long userId=UserContext.current().getCallerUserId();
  int startVnetRange=0;
  int stopVnetRange=0;
  Boolean isPublic=cmd.isPublic();
  String allocationStateStr=cmd.getAllocationState();
  String dhcpProvider=cmd.getDhcpProvider();
  Map detailsMap=cmd.getDetails();
  String networkDomain=cmd.getDomain();
  Map<String,String> newDetails=new HashMap<String,String>();
  if (detailsMap != null) {
    Collection zoneDetailsCollection=detailsMap.values();
    Iterator iter=zoneDetailsCollection.iterator();
    while (iter.hasNext()) {
      HashMap detail=(HashMap)iter.next();
      String key=(String)detail.get(""String_Node_Str"");
      String value=(String)detail.get(""String_Node_Str"");
      if ((key == null) || (value == null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      newDetails.put(key,value);
    }
  }
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    if (vnetRange != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str"");
    }
 else     if (guestCidr != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str"");
    }
  }
  if ((guestCidr != null) && !NetUtils.validateGuestCidr(guestCidr)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  if (vnetRange != null) {
    if (zoneHasAllocatedVnets(zoneId)) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    String[] startStopRange=new String[2];
    startStopRange=vnetRange.split(""String_Node_Str"");
    if (startStopRange.length == 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startStopRange[0] == null || startStopRange[1] == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    try {
      startVnetRange=Integer.parseInt(startStopRange[0]);
      stopVnetRange=Integer.parseInt(startStopRange[1]);
    }
 catch (    NumberFormatException e) {
      s_logger.warn(""String_Node_Str"",e);
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange < 0 || stopVnetRange > 4096) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange > stopVnetRange) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  boolean dnsUpdate=false;
  if (dns1 != null || dns2 != null) {
    dnsUpdate=true;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (guestCidr == null) {
    guestCidr=zone.getGuestNetworkCidr();
  }
  if (networkDomain != null) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
 else {
    networkDomain=zone.getDomain();
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null,allocationStateStr);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  zone.setGuestNetworkCidr(guestCidr);
  zone.setDomain(networkDomain);
  if (vnetRange != null) {
    zone.setVnet(vnetRange);
  }
  if (isPublic != null && isPublic) {
    zone.setDomainId(null);
    zone.setDomain(null);
  }
  Map<String,String> updatedDetails=new HashMap<String,String>();
  _zoneDao.loadDetails(zone);
  if (zone.getDetails() != null) {
    updatedDetails.putAll(zone.getDetails());
  }
  updatedDetails.putAll(newDetails);
  zone.setDetails(updatedDetails);
  if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
    Grouping.AllocationState allocationState=Grouping.AllocationState.valueOf(allocationStateStr);
    zone.setAllocationState(allocationState);
  }
  if (dhcpProvider != null) {
    zone.setDhcpProvider(dhcpProvider);
  }
  if (!_zoneDao.update(zoneId,zone)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (vnetRange != null) {
    String[] tokens=vnetRange.split(""String_Node_Str"");
    int begin=Integer.parseInt(tokens[0]);
    int end=tokens.length == 1 ? (begin) : Integer.parseInt(tokens[1]);
    _zoneDao.deleteVnet(zoneId);
    _zoneDao.addVnet(zone.getId(),begin,end);
  }
  return zone;
}"
89436,"@Override public DataCenter createZone(CreateZoneCmd cmd){
  Long userId=UserContext.current().getCallerUserId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long domainId=cmd.getDomainId();
  String type=cmd.getNetworkType();
  Boolean isBasic=false;
  String allocationState=cmd.getAllocationState();
  if (allocationState == null) {
    allocationState=Grouping.AllocationState.Enabled.toString();
  }
  if (!(type.equalsIgnoreCase(NetworkType.Basic.toString())) && !(type.equalsIgnoreCase(NetworkType.Advanced.toString()))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (type.equalsIgnoreCase(NetworkType.Basic.toString())) {
    isBasic=true;
  }
  Boolean securityGroupEnabled=cmd.isSecurityGroupEnabled();
  NetworkType zoneType=isBasic ? NetworkType.Basic : NetworkType.Advanced;
  if (zoneType == NetworkType.Advanced && guestCidr == null && !securityGroupEnabled) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (zoneType == NetworkType.Basic && guestCidr != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DomainVO domainVO=null;
  if (userId == null) {
    userId=User.UID_SYSTEM;
  }
  if (domainId != null) {
    domainVO=_domainDao.findById(domainId);
  }
  if (zoneType == NetworkType.Basic && vnetRange != null) {
    vnetRange=null;
  }
  if (zoneType == NetworkType.Basic) {
    securityGroupEnabled=true;
  }
  return createZone(userId,zoneName,dns1,dns2,internalDns1,internalDns2,vnetRange,guestCidr,domainVO != null ? domainVO.getName() : null,domainId,zoneType,securityGroupEnabled,allocationState);
}","@Override public DataCenter createZone(CreateZoneCmd cmd){
  Long userId=UserContext.current().getCallerUserId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long domainId=cmd.getDomainId();
  String type=cmd.getNetworkType();
  Boolean isBasic=false;
  String allocationState=cmd.getAllocationState();
  String networkDomain=cmd.getDomain();
  if (allocationState == null) {
    allocationState=Grouping.AllocationState.Enabled.toString();
  }
  if (!(type.equalsIgnoreCase(NetworkType.Basic.toString())) && !(type.equalsIgnoreCase(NetworkType.Advanced.toString()))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (type.equalsIgnoreCase(NetworkType.Basic.toString())) {
    isBasic=true;
  }
  Boolean securityGroupEnabled=cmd.isSecurityGroupEnabled();
  NetworkType zoneType=isBasic ? NetworkType.Basic : NetworkType.Advanced;
  if (zoneType == NetworkType.Advanced && guestCidr == null && !securityGroupEnabled) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (zoneType == NetworkType.Basic && guestCidr != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DomainVO domainVO=null;
  if (userId == null) {
    userId=User.UID_SYSTEM;
  }
  if (domainId != null) {
    domainVO=_domainDao.findById(domainId);
  }
  if (zoneType == NetworkType.Basic && vnetRange != null) {
    vnetRange=null;
  }
  if (zoneType == NetworkType.Basic) {
    securityGroupEnabled=true;
  }
  return createZone(userId,zoneName,dns1,dns2,internalDns1,internalDns2,vnetRange,guestCidr,domainVO != null ? domainVO.getName() : null,domainId,zoneType,securityGroupEnabled,allocationState,networkDomain);
}"
89437,"@Override public void createDefaultNetworks(long zoneId,boolean isSecurityGroupEnabled) throws ConcurrentOperationException {
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone != null) {
    List<NetworkOfferingVO> ntwkOff=_networkOfferingDao.listSystemNetworkOfferings();
    for (    NetworkOfferingVO offering : ntwkOff) {
      DataCenterDeployment plan=new DataCenterDeployment(zone.getId(),null,null,null,null);
      NetworkVO userNetwork=new NetworkVO();
      Account systemAccount=_accountDao.findById(Account.ACCOUNT_ID_SYSTEM);
      BroadcastDomainType broadcastDomainType=null;
      boolean isNetworkDefault=false;
      if (offering.getTrafficType() == TrafficType.Management) {
        broadcastDomainType=BroadcastDomainType.Native;
      }
 else       if (offering.getTrafficType() == TrafficType.Control) {
        broadcastDomainType=BroadcastDomainType.LinkLocal;
      }
 else       if (offering.getTrafficType() == TrafficType.Public) {
        if ((zone.getNetworkType() == NetworkType.Advanced && !zone.isSecurityGroupEnabled()) || zone.getNetworkType() == NetworkType.Basic) {
          broadcastDomainType=BroadcastDomainType.Vlan;
        }
 else {
          continue;
        }
      }
 else       if (offering.getTrafficType() == TrafficType.Guest) {
        if (zone.getNetworkType() == NetworkType.Basic) {
          isNetworkDefault=true;
          broadcastDomainType=BroadcastDomainType.Native;
          userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
        }
 else         if (offering.getGuestType() == GuestIpType.Direct && isSecurityGroupEnabled) {
          isNetworkDefault=true;
          userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
        }
 else {
          continue;
        }
      }
      userNetwork.setBroadcastDomainType(broadcastDomainType);
      _networkMgr.setupNetwork(systemAccount,offering,userNetwork,plan,null,null,true,isNetworkDefault,false,null,null);
    }
  }
}","@Override public void createDefaultNetworks(long zoneId,boolean isSecurityGroupEnabled) throws ConcurrentOperationException {
  DataCenterVO zone=_zoneDao.findById(zoneId);
  String networkDomain=null;
  if (zone != null) {
    List<NetworkOfferingVO> ntwkOff=_networkOfferingDao.listSystemNetworkOfferings();
    for (    NetworkOfferingVO offering : ntwkOff) {
      DataCenterDeployment plan=new DataCenterDeployment(zone.getId(),null,null,null,null);
      NetworkVO userNetwork=new NetworkVO();
      Account systemAccount=_accountDao.findById(Account.ACCOUNT_ID_SYSTEM);
      BroadcastDomainType broadcastDomainType=null;
      boolean isNetworkDefault=false;
      if (offering.getTrafficType() == TrafficType.Management) {
        broadcastDomainType=BroadcastDomainType.Native;
      }
 else       if (offering.getTrafficType() == TrafficType.Control) {
        broadcastDomainType=BroadcastDomainType.LinkLocal;
      }
 else       if (offering.getTrafficType() == TrafficType.Public) {
        if ((zone.getNetworkType() == NetworkType.Advanced && !zone.isSecurityGroupEnabled()) || zone.getNetworkType() == NetworkType.Basic) {
          broadcastDomainType=BroadcastDomainType.Vlan;
        }
 else {
          continue;
        }
      }
 else       if (offering.getTrafficType() == TrafficType.Guest) {
        if (zone.getNetworkType() == NetworkType.Basic) {
          isNetworkDefault=true;
          broadcastDomainType=BroadcastDomainType.Native;
          userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
        }
 else         if (offering.getGuestType() == GuestIpType.Direct && isSecurityGroupEnabled) {
          isNetworkDefault=true;
          userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
        }
 else {
          continue;
        }
        networkDomain=""String_Node_Str"" + Long.toHexString(Account.ACCOUNT_ID_SYSTEM) + _networkMgr.getGlobalGuestDomainSuffix();
      }
      userNetwork.setBroadcastDomainType(broadcastDomainType);
      userNetwork.setNetworkDomain(networkDomain);
      _networkMgr.setupNetwork(systemAccount,offering,userNetwork,plan,null,null,true,isNetworkDefault,false,null,null);
    }
  }
}"
89438,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Map<String,String> configs=configDao.getConfiguration();
  String value=configs.get(""String_Node_Str"");
  _maxSessionCount=NumbersUtil.parseInt(value,ConsoleProxyManager.DEFAULT_PROXY_CAPACITY);
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Map<String,String> configs=configDao.getConfiguration();
  return true;
}"
89439,"public static ByteBuffer doDecompress(ByteBuffer buffer){
  byte[] byteArrayIn=new byte[1024];
  ByteArrayInputStream byteIn;
  if (buffer.hasArray()) {
    byteIn=new ByteArrayInputStream(buffer.array(),buffer.position() + buffer.arrayOffset(),buffer.remaining());
  }
 else {
    byte[] array=new byte[buffer.limit() - buffer.position()];
    buffer.get(array);
    byteIn=new ByteArrayInputStream(array);
  }
  ByteBuffer retBuff=ByteBuffer.allocate(65535);
  int len=0;
  try {
    GZIPInputStream in=new GZIPInputStream(byteIn);
    while ((len=in.read(byteArrayIn)) > 0) {
      retBuff.put(byteArrayIn,0,len);
    }
    in.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  retBuff.flip();
  return retBuff;
}","public static ByteBuffer doDecompress(ByteBuffer buffer,int length){
  byte[] byteArrayIn=new byte[1024];
  ByteArrayInputStream byteIn;
  if (buffer.hasArray()) {
    byteIn=new ByteArrayInputStream(buffer.array(),buffer.position() + buffer.arrayOffset(),buffer.remaining());
  }
 else {
    byte[] array=new byte[buffer.limit() - buffer.position()];
    buffer.get(array);
    byteIn=new ByteArrayInputStream(array);
  }
  ByteBuffer retBuff=ByteBuffer.allocate(length);
  int len=0;
  try {
    GZIPInputStream in=new GZIPInputStream(byteIn);
    while ((len=in.read(byteArrayIn)) > 0) {
      retBuff.put(byteArrayIn,0,len);
    }
    in.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  retBuff.flip();
  return retBuff;
}"
89440,"public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  ByteBuffer tmp;
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  tmp=ByteBuffer.wrap(_content.getBytes());
  if (tmp.capacity() >= 8192) {
    tmp=doCompress(tmp);
    _flags|=FLAG_COMPRESSED;
  }
  buffers[1]=tmp;
  buffers[0]=serializeHeader(buffers[1].capacity());
  return buffers;
}","public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  ByteBuffer tmp;
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  tmp=ByteBuffer.wrap(_content.getBytes());
  int capacity=tmp.capacity();
  if (capacity >= 8192) {
    tmp=doCompress(tmp,capacity);
    _flags|=FLAG_COMPRESSED;
  }
  buffers[1]=tmp;
  buffers[0]=serializeHeader(capacity);
  return buffers;
}"
89441,"/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  if ((flags & FLAG_COMPRESSED) != 0) {
    buff=doDecompress(buff);
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}","/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  if ((flags & FLAG_COMPRESSED) != 0) {
    buff=doDecompress(buff,size);
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}"
89442,"public static ByteBuffer doCompress(ByteBuffer buffer){
  ByteArrayOutputStream byteOut=new ByteArrayOutputStream(65535);
  byte[] array=new byte[buffer.capacity()];
  buffer.get(array);
  try {
    GZIPOutputStream out=new GZIPOutputStream(byteOut,65535);
    out.write(array);
    out.finish();
    out.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  return ByteBuffer.wrap(byteOut.toByteArray());
}","public static ByteBuffer doCompress(ByteBuffer buffer,int length){
  ByteArrayOutputStream byteOut=new ByteArrayOutputStream(length);
  byte[] array;
  if (buffer.hasArray()) {
    array=buffer.array();
  }
 else {
    array=new byte[buffer.capacity()];
    buffer.get(array);
  }
  try {
    GZIPOutputStream out=new GZIPOutputStream(byteOut,length);
    out.write(array);
    out.finish();
    out.close();
  }
 catch (  IOException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  return ByteBuffer.wrap(byteOut.toByteArray());
}"
89443,"@Override public ConsoleProxyVO allocProxy(List<ConsoleProxyVO> candidates,Map<Long,Integer> loadInfo,long dataCenterId){
  if (candidates != null) {
    List<ConsoleProxyVO> allocationList=new ArrayList<ConsoleProxyVO>();
    for (    ConsoleProxyVO proxy : candidates) {
      Integer load=loadInfo.get(proxy.getId());
      if (load == null || load < _maxSessionCount) {
        allocationList.add(proxy);
      }
    }
    if (allocationList.size() > 0)     return allocationList.get(_rand.nextInt(allocationList.size()));
  }
  return null;
}","@Override public ConsoleProxyVO allocProxy(List<ConsoleProxyVO> candidates,final Map<Long,Integer> loadInfo,long dataCenterId){
  if (candidates != null) {
    List<ConsoleProxyVO> allocationList=new ArrayList<ConsoleProxyVO>();
    for (    ConsoleProxyVO proxy : candidates) {
      allocationList.add(proxy);
    }
    Collections.sort(candidates,new Comparator<ConsoleProxyVO>(){
      @Override public int compare(      ConsoleProxyVO x,      ConsoleProxyVO y){
        Integer loadOfX=loadInfo.get(x.getId());
        Integer loadOfY=loadInfo.get(y.getId());
        if (loadOfX != null && loadOfY != null) {
          if (loadOfX < loadOfY)           return -1;
 else           if (loadOfX > loadOfY)           return 1;
          return 0;
        }
 else         if (loadOfX == null && loadOfY == null) {
          return 0;
        }
 else {
          if (loadOfX == null)           return -1;
          return 1;
        }
      }
    }
);
    if (allocationList.size() > 0)     return allocationList.get(0);
  }
  return null;
}"
89444,"@Override public ConsoleProxyVO allocProxy(List<ConsoleProxyVO> candidates,Map<Long,Integer> loadInfo,long dataCenterId){
  if (candidates != null) {
    List<ConsoleProxyVO> allocationList=new ArrayList<ConsoleProxyVO>();
    for (    ConsoleProxyVO proxy : candidates) {
      Integer load=loadInfo.get(proxy.getId());
      if (load == null || load < _maxSessionCount) {
        allocationList.add(proxy);
      }
    }
    if (allocationList.size() > 0)     return allocationList.get(_rand.nextInt(allocationList.size()));
  }
  return null;
}","@Override public ConsoleProxyVO allocProxy(List<ConsoleProxyVO> candidates,final Map<Long,Integer> loadInfo,long dataCenterId){
  if (candidates != null) {
    List<ConsoleProxyVO> allocationList=new ArrayList<ConsoleProxyVO>();
    for (    ConsoleProxyVO proxy : candidates) {
      allocationList.add(proxy);
    }
    Collections.sort(candidates,new Comparator<ConsoleProxyVO>(){
      @Override public int compare(      ConsoleProxyVO x,      ConsoleProxyVO y){
        Integer loadOfX=loadInfo.get(x.getId());
        Integer loadOfY=loadInfo.get(y.getId());
        if (loadOfX != null && loadOfY != null) {
          if (loadOfX < loadOfY)           return -1;
 else           if (loadOfX > loadOfY)           return 1;
          return 0;
        }
 else         if (loadOfX == null && loadOfY == null) {
          return 0;
        }
 else {
          if (loadOfX == null)           return -1;
          return 1;
        }
      }
    }
);
    if (allocationList.size() > 0)     return allocationList.get(0);
  }
  return null;
}"
89445,"@Override public void performDataMigration(Connection conn){
}","@Override public void performDataMigration(Connection conn){
  dropKeysIfExist(conn);
}"
89446,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Map<String,String> configs=configDao.getConfiguration();
  String value=configs.get(""String_Node_Str"");
  _maxSessionCount=NumbersUtil.parseInt(value,ConsoleProxyManager.DEFAULT_PROXY_CAPACITY);
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Map<String,String> configs=configDao.getConfiguration();
  return true;
}"
89447,"@Override public void performDataMigration(Connection conn){
}","@Override public void performDataMigration(Connection conn){
  dropKeysIfExist(conn);
}"
89448,"@DB protected VolumeVO createVolumeFromSnapshot(VolumeVO volume,long snapshotId){
  VolumeVO createdVolume=null;
  SnapshotVO snapshot=_snapshotDao.findById(snapshotId);
  Pair<VolumeVO,String> volumeDetails=createVolumeFromSnapshot(volume,snapshot);
  createdVolume=volumeDetails.first();
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Long diskOfferingId=volume.getDiskOfferingId();
  if (createdVolume.getPath() != null) {
    Long offeringId=null;
    if (diskOfferingId != null) {
      DiskOfferingVO offering=_diskOfferingDao.findById(diskOfferingId);
      if (offering != null && (offering.getType() == DiskOfferingVO.Type.Disk)) {
        offeringId=offering.getId();
      }
    }
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),offeringId,null,createdVolume.getSize());
    _usageEventDao.persist(usageEvent);
  }
  txn.commit();
  return createdVolume;
}","protected VolumeVO createVolumeFromSnapshot(VolumeVO volume,long snapshotId){
  VolumeVO createdVolume=null;
  SnapshotVO snapshot=_snapshotDao.findById(snapshotId);
  Pair<VolumeVO,String> volumeDetails=createVolumeFromSnapshot(volume,snapshot);
  createdVolume=volumeDetails.first();
  return createdVolume;
}"
89449,"@Override public void cleanupForServer(long msId){
  s_logger.info(""String_Node_Str"" + msId);
  PreparedStatement pstmt=null;
  try {
    pstmt=_conn.prepareStatement(CLEANUP_MGMT_LOCKS_SQL);
    pstmt.setLong(1,_msId);
    int rows=pstmt.executeUpdate();
    s_logger.info(""String_Node_Str"" + rows + ""String_Node_Str""+ msId);
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}","@Override public void cleanupForServer(long msId){
  s_logger.info(""String_Node_Str"" + msId);
  PreparedStatement pstmt=null;
  try {
    pstmt=_conn.prepareStatement(CLEANUP_MGMT_LOCKS_SQL);
    pstmt.setLong(1,msId);
    int rows=pstmt.executeUpdate();
    s_logger.info(""String_Node_Str"" + rows + ""String_Node_Str""+ msId);
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}"
89450,"public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  buffers[1]=ByteBuffer.wrap(_content.getBytes());
  buffers[0]=serializeHeader(buffers[1].capacity());
  return buffers;
}","public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  ByteBuffer tmp;
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  tmp=ByteBuffer.wrap(_content.getBytes());
  if (tmp.capacity() >= 8192) {
    tmp=doCompress(tmp);
    _flags|=FLAG_COMPRESSED;
  }
  buffers[1]=tmp;
  buffers[0]=serializeHeader(buffers[1].capacity());
  return buffers;
}"
89451,"/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  final ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}","/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  if ((flags & FLAG_COMPRESSED) != 0) {
    buff=doDecompress(buff);
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}"
89452,"@DB protected VolumeVO createVolumeFromSnapshot(VolumeVO volume,long snapshotId){
  VolumeVO createdVolume=null;
  SnapshotVO snapshot=_snapshotDao.findById(snapshotId);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Pair<VolumeVO,String> volumeDetails=createVolumeFromSnapshot(volume,snapshot);
  createdVolume=volumeDetails.first();
  Long diskOfferingId=volume.getDiskOfferingId();
  if (createdVolume.getPath() != null) {
    Long offeringId=null;
    if (diskOfferingId != null) {
      DiskOfferingVO offering=_diskOfferingDao.findById(diskOfferingId);
      if (offering != null && (offering.getType() == DiskOfferingVO.Type.Disk)) {
        offeringId=offering.getId();
      }
    }
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),offeringId,null,createdVolume.getSize());
    _usageEventDao.persist(usageEvent);
  }
  txn.commit();
  return createdVolume;
}","protected VolumeVO createVolumeFromSnapshot(VolumeVO volume,long snapshotId){
  VolumeVO createdVolume=null;
  SnapshotVO snapshot=_snapshotDao.findById(snapshotId);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Pair<VolumeVO,String> volumeDetails=createVolumeFromSnapshot(volume,snapshot);
  createdVolume=volumeDetails.first();
  return createdVolume;
}"
89453,"public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  buffers[1]=ByteBuffer.wrap(_content.getBytes());
  buffers[0]=serializeHeader(buffers[1].capacity());
  return buffers;
}","public ByteBuffer[] toBytes(){
  final ByteBuffer[] buffers=new ByteBuffer[2];
  ByteBuffer tmp;
  if (_content == null) {
    _content=s_gson.toJson(_cmds,_cmds.getClass());
  }
  tmp=ByteBuffer.wrap(_content.getBytes());
  if (tmp.capacity() >= 8192) {
    tmp=doCompress(tmp);
    _flags|=FLAG_COMPRESSED;
  }
  buffers[1]=tmp;
  buffers[0]=serializeHeader(buffers[1].capacity());
  return buffers;
}"
89454,"/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  final ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}","/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  if ((flags & FLAG_COMPRESSED) != 0) {
    buff=doDecompress(buff);
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}"
89455,"@Override public void cleanupForServer(long msId){
  PreparedStatement pstmt=null;
  try {
    pstmt=_concierge.conn().prepareStatement(CLEANUP_MGMT_LOCKS_SQL);
    pstmt.setLong(1,_msId);
    pstmt.executeUpdate();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}","@Override public void cleanupForServer(long msId){
  s_logger.info(""String_Node_Str"" + msId);
  PreparedStatement pstmt=null;
  try {
    pstmt=_concierge.conn().prepareStatement(CLEANUP_MGMT_LOCKS_SQL);
    pstmt.setLong(1,msId);
    int rows=pstmt.executeUpdate();
    s_logger.info(""String_Node_Str"" + rows + ""String_Node_Str""+ msId);
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    try {
      if (pstmt != null) {
        pstmt.close();
      }
    }
 catch (    SQLException e) {
    }
  }
}"
89456,"protected void accept(SelectionKey key) throws IOException {
  ServerSocketChannel serverSocketChannel=(ServerSocketChannel)key.channel();
  SocketChannel socketChannel=serverSocketChannel.accept();
  Socket socket=socketChannel.socket();
  socket.setKeepAlive(true);
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"" + socket);
  }
  socketChannel.configureBlocking(true);
  SSLEngine sslEngine=null;
  try {
    SSLContext sslContext=Link.initSSLContext(false);
    sslEngine=sslContext.createSSLEngine();
    sslEngine.setUseClientMode(false);
    sslEngine.setNeedClientAuth(false);
    Link.doHandshake(socketChannel,sslEngine,false);
  }
 catch (  Exception e) {
    logDebug(e,key,0);
    terminate(key);
    return;
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  socketChannel.configureBlocking(false);
  InetSocketAddress saddr=(InetSocketAddress)socket.getRemoteSocketAddress();
  Link link=new Link(saddr,this);
  link.setSSLEngine(sslEngine);
  link.setKey(socketChannel.register(key.selector(),SelectionKey.OP_READ,link));
  Task task=_factory.create(Task.Type.CONNECT,link,null);
  registerLink(saddr,link);
  _executor.execute(task);
}","protected void accept(SelectionKey key) throws IOException {
  ServerSocketChannel serverSocketChannel=(ServerSocketChannel)key.channel();
  SocketChannel socketChannel=serverSocketChannel.accept();
  Socket socket=socketChannel.socket();
  socket.setKeepAlive(true);
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"" + socket);
  }
  socketChannel.configureBlocking(true);
  SSLEngine sslEngine=null;
  try {
    SSLContext sslContext=Link.initSSLContext(false);
    sslEngine=sslContext.createSSLEngine();
    sslEngine.setUseClientMode(false);
    sslEngine.setNeedClientAuth(false);
    Link.doHandshake(socketChannel,sslEngine,false);
  }
 catch (  Exception e) {
    s_logger.debug(""String_Node_Str"" + socket + ""String_Node_Str""+ e.getMessage());
    terminate(key);
    return;
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  socketChannel.configureBlocking(false);
  InetSocketAddress saddr=(InetSocketAddress)socket.getRemoteSocketAddress();
  Link link=new Link(saddr,this);
  link.setSSLEngine(sslEngine);
  link.setKey(socketChannel.register(key.selector(),SelectionKey.OP_READ,link));
  Task task=_factory.create(Task.Type.CONNECT,link,null);
  registerLink(saddr,link);
  _executor.execute(task);
}"
89457,"@Override public Long checkAccessAndSpecifyAuthority(Account caller,Long zoneId){
  if (isResourceDomainAdmin(caller.getType())) {
    if (zoneId == null)     return getZoneIdForAccount(caller);
 else     if (getZoneIdForAccount(caller) != zoneId)     throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ zoneId);
 else     return zoneId;
  }
 else   return zoneId;
}","@Override public Long checkAccessAndSpecifyAuthority(Account caller,Long zoneId){
  if (isResourceDomainAdmin(caller.getType())) {
    if (zoneId == null)     return getZoneIdForAccount(caller);
 else     if (zoneId.compareTo(getZoneIdForAccount(caller)) != 0)     throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ zoneId);
 else     return zoneId;
  }
 else   return zoneId;
}"
89458,"@Override public <T extends VMInstanceVO>boolean advanceStop(T vm,boolean forced,User user,Account account) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return true;
  }
  Long hostId=vm.getHostId();
  if (hostId == null) {
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    NoTransitionException e) {
      s_logger.warn(e.getMessage());
    }
    return true;
  }
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  try {
    if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId(),null)) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  if ((vm.getState() == State.Starting || vm.getState() == State.Stopping || vm.getState() == State.Migrating) && forced) {
    ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
    if (work != null) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl<T>(vm),work,Event.StopRequested,forced,user,account)) {
        try {
          return stateTransitTo(vm,Event.AgentReportStopped,null);
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          return false;
        }
      }
    }
  }
  if (vm.getHostId() != null) {
    String routerPrivateIp=null;
    if (vm.getType() == VirtualMachine.Type.DomainRouter) {
      routerPrivateIp=vm.getPrivateIpAddress();
    }
    StopCommand stop=new StopCommand(vm,vm.getInstanceName(),null,routerPrivateIp);
    boolean stopped=false;
    StopAnswer answer=null;
    try {
      answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
    }
 catch (    AgentUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
 finally {
      if (!stopped) {
        if (!forced) {
          s_logger.warn(""String_Node_Str"" + vm);
          try {
            stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
          }
 catch (          NoTransitionException e) {
            s_logger.warn(""String_Node_Str"" + vm);
          }
          return false;
        }
 else {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
          vmGuru.finalizeStop(profile,answer);
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,forced);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      _storageMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    return stateTransitTo(vm,Event.OperationSucceeded,null,null);
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    return false;
  }
}","@Override public <T extends VMInstanceVO>boolean advanceStop(T vm,boolean forced,User user,Account account) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return true;
  }
  Long hostId=vm.getHostId();
  if (hostId == null) {
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    NoTransitionException e) {
      s_logger.warn(e.getMessage());
    }
    return true;
  }
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  try {
    if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId(),null)) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    if (!forced) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
    }
    s_logger.debug(""String_Node_Str"");
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  if ((vm.getState() == State.Starting || vm.getState() == State.Stopping || vm.getState() == State.Migrating) && forced) {
    ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
    if (work != null) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl<T>(vm),work,Event.StopRequested,forced,user,account)) {
        try {
          return stateTransitTo(vm,Event.AgentReportStopped,null);
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          return false;
        }
      }
    }
  }
  if (vm.getHostId() != null) {
    String routerPrivateIp=null;
    if (vm.getType() == VirtualMachine.Type.DomainRouter) {
      routerPrivateIp=vm.getPrivateIpAddress();
    }
    StopCommand stop=new StopCommand(vm,vm.getInstanceName(),null,routerPrivateIp);
    boolean stopped=false;
    StopAnswer answer=null;
    try {
      answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
    }
 catch (    AgentUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
 finally {
      if (!stopped) {
        if (!forced) {
          s_logger.warn(""String_Node_Str"" + vm);
          try {
            stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
          }
 catch (          NoTransitionException e) {
            s_logger.warn(""String_Node_Str"" + vm);
          }
          return false;
        }
 else {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
          vmGuru.finalizeStop(profile,answer);
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,forced);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      _storageMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    return stateTransitTo(vm,Event.OperationSucceeded,null,null);
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    return false;
  }
}"
89459,"@Override public UserVmResponse listVmDetails(UserVm userVm,boolean show_host){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    String sql=VM_DETAILS;
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,userVm.getIsoId() == null ? -1 : userVm.getIsoId());
    pstmt.setLong(2,userVm.getId());
    ResultSet rs=pstmt.executeQuery();
    boolean is_data_center_security_group_enabled=false;
    Set<SecurityGroupResponse> securityGroupResponse=new HashSet<SecurityGroupResponse>();
    Set<NicResponse> nicResponses=new HashSet<NicResponse>();
    UserVmResponse userVmResponse=null;
    while (rs.next()) {
      if (userVmResponse == null) {
        userVmResponse=new UserVmResponse();
        userVmResponse.setId(userVm.getId());
        userVmResponse.setName(userVm.getDisplayName());
        userVmResponse.setCreated(userVm.getCreated());
        userVmResponse.setGuestOsId(userVm.getGuestOSId());
        userVmResponse.setHaEnable(userVm.isHaEnabled());
        if (userVm.getState() != null) {
          userVmResponse.setState(userVm.getState().toString());
        }
        if (userVm.getDisplayName() != null) {
          userVmResponse.setDisplayName(userVm.getDisplayName());
        }
 else {
          userVmResponse.setDisplayName(userVm.getHostName());
        }
        userVmResponse.setAccountName(rs.getString(""String_Node_Str""));
        userVmResponse.setDomainId(userVm.getDomainId());
        userVmResponse.setDomainName(rs.getString(""String_Node_Str""));
        long grp_id=rs.getLong(""String_Node_Str"");
        if (grp_id > 0) {
          userVmResponse.setGroupId(grp_id);
          userVmResponse.setGroup(rs.getString(""String_Node_Str""));
        }
        userVmResponse.setZoneId(rs.getLong(""String_Node_Str""));
        userVmResponse.setZoneName(rs.getString(""String_Node_Str""));
        if (show_host) {
          userVmResponse.setHostId(rs.getLong(""String_Node_Str""));
          userVmResponse.setHostName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getHypervisorType() != null) {
          userVmResponse.setHypervisor(userVm.getHypervisorType().toString());
        }
        long template_id=rs.getLong(""String_Node_Str"");
        if (template_id > 0) {
          userVmResponse.setTemplateId(template_id);
          userVmResponse.setTemplateName(rs.getString(""String_Node_Str""));
          userVmResponse.setTemplateDisplayText(rs.getString(""String_Node_Str""));
          userVmResponse.setPasswordEnabled(rs.getBoolean(""String_Node_Str""));
        }
 else {
          userVmResponse.setTemplateId(-1L);
          userVmResponse.setTemplateName(""String_Node_Str"");
          userVmResponse.setTemplateDisplayText(""String_Node_Str"");
          userVmResponse.setPasswordEnabled(false);
        }
        long iso_id=rs.getLong(""String_Node_Str"");
        if (iso_id > 0) {
          userVmResponse.setIsoId(iso_id);
          userVmResponse.setIsoName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getPassword() != null) {
          userVmResponse.setPassword(userVm.getPassword());
        }
        userVmResponse.setServiceOfferingId(rs.getLong(""String_Node_Str""));
        userVmResponse.setServiceOfferingName(rs.getString(""String_Node_Str""));
        userVmResponse.setCpuNumber(rs.getInt(""String_Node_Str""));
        userVmResponse.setCpuSpeed(rs.getInt(""String_Node_Str""));
        userVmResponse.setMemory(rs.getInt(""String_Node_Str""));
        long vol_id=rs.getLong(""String_Node_Str"");
        if (vol_id > 0) {
          userVmResponse.setRootDeviceId(rs.getLong(""String_Node_Str""));
          userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          long pool_id=rs.getLong(""String_Node_Str"");
          if (pool_id > 0) {
            userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          }
 else {
            userVmResponse.setRootDeviceType(""String_Node_Str"");
          }
        }
        is_data_center_security_group_enabled=rs.getBoolean(""String_Node_Str"");
      }
      if (is_data_center_security_group_enabled) {
        SecurityGroupResponse resp=new SecurityGroupResponse();
        resp.setId(rs.getLong(""String_Node_Str""));
        resp.setName(""String_Node_Str"");
        resp.setDescription(""String_Node_Str"");
        resp.setObjectName(""String_Node_Str"");
        securityGroupResponse.add(resp);
      }
      long nic_id=rs.getLong(""String_Node_Str"");
      if (nic_id > 0) {
        NicResponse nicResponse=new NicResponse();
        nicResponse.setId(nic_id);
        nicResponse.setIpaddress(rs.getString(""String_Node_Str""));
        nicResponse.setGateway(rs.getString(""String_Node_Str""));
        nicResponse.setNetmask(rs.getString(""String_Node_Str""));
        nicResponse.setNetworkid(rs.getLong(""String_Node_Str""));
        nicResponse.setMacAddress(rs.getString(""String_Node_Str""));
        int account_type=rs.getInt(""String_Node_Str"");
        if (account_type == Account.ACCOUNT_TYPE_ADMIN) {
          nicResponse.setBroadcastUri(rs.getString(""String_Node_Str""));
          nicResponse.setIsolationUri(rs.getString(""String_Node_Str""));
        }
        nicResponse.setTrafficType(rs.getString(""String_Node_Str""));
        nicResponse.setType(rs.getString(""String_Node_Str""));
        nicResponse.setIsDefault(rs.getBoolean(""String_Node_Str""));
        nicResponse.setObjectName(""String_Node_Str"");
        nicResponses.add(nicResponse);
      }
    }
    userVmResponse.setSecurityGroupList(new ArrayList(securityGroupResponse));
    userVmResponse.setNics(new ArrayList(nicResponses));
    return userVmResponse;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
}","@Override public UserVmResponse listVmDetails(UserVm userVm,boolean show_host){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    String sql=VM_DETAILS;
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,userVm.getIsoId() == null ? -1 : userVm.getIsoId());
    pstmt.setLong(2,userVm.getId());
    ResultSet rs=pstmt.executeQuery();
    boolean is_data_center_security_group_enabled=false;
    Set<SecurityGroupResponse> securityGroupResponse=new HashSet<SecurityGroupResponse>();
    Set<NicResponse> nicResponses=new HashSet<NicResponse>();
    UserVmResponse userVmResponse=null;
    while (rs.next()) {
      if (userVmResponse == null) {
        userVmResponse=new UserVmResponse();
        userVmResponse.setId(userVm.getId());
        userVmResponse.setName(userVm.getDisplayName());
        userVmResponse.setCreated(userVm.getCreated());
        userVmResponse.setGuestOsId(userVm.getGuestOSId());
        userVmResponse.setHaEnable(userVm.isHaEnabled());
        if (userVm.getState() != null) {
          userVmResponse.setState(userVm.getState().toString());
        }
        if (userVm.getDisplayName() != null) {
          userVmResponse.setDisplayName(userVm.getDisplayName());
        }
 else {
          userVmResponse.setDisplayName(userVm.getHostName());
        }
        userVmResponse.setAccountName(rs.getString(""String_Node_Str""));
        userVmResponse.setDomainId(userVm.getDomainId());
        userVmResponse.setDomainName(rs.getString(""String_Node_Str""));
        long grp_id=rs.getLong(""String_Node_Str"");
        if (grp_id > 0) {
          userVmResponse.setGroupId(grp_id);
          userVmResponse.setGroup(rs.getString(""String_Node_Str""));
        }
        userVmResponse.setZoneId(rs.getLong(""String_Node_Str""));
        userVmResponse.setZoneName(rs.getString(""String_Node_Str""));
        if (show_host) {
          userVmResponse.setHostId(rs.getLong(""String_Node_Str""));
          userVmResponse.setHostName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getHypervisorType() != null) {
          userVmResponse.setHypervisor(userVm.getHypervisorType().toString());
        }
        long template_id=rs.getLong(""String_Node_Str"");
        if (template_id > 0) {
          userVmResponse.setTemplateId(template_id);
          userVmResponse.setTemplateName(rs.getString(""String_Node_Str""));
          userVmResponse.setTemplateDisplayText(rs.getString(""String_Node_Str""));
          userVmResponse.setPasswordEnabled(rs.getBoolean(""String_Node_Str""));
        }
 else {
          userVmResponse.setTemplateId(-1L);
          userVmResponse.setTemplateName(""String_Node_Str"");
          userVmResponse.setTemplateDisplayText(""String_Node_Str"");
          userVmResponse.setPasswordEnabled(false);
        }
        long iso_id=rs.getLong(""String_Node_Str"");
        if (iso_id > 0) {
          userVmResponse.setIsoId(iso_id);
          userVmResponse.setIsoName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getPassword() != null) {
          userVmResponse.setPassword(userVm.getPassword());
        }
        userVmResponse.setServiceOfferingId(rs.getLong(""String_Node_Str""));
        userVmResponse.setServiceOfferingName(rs.getString(""String_Node_Str""));
        userVmResponse.setCpuNumber(rs.getInt(""String_Node_Str""));
        userVmResponse.setCpuSpeed(rs.getInt(""String_Node_Str""));
        userVmResponse.setMemory(rs.getInt(""String_Node_Str""));
        long vol_id=rs.getLong(""String_Node_Str"");
        if (vol_id > 0) {
          userVmResponse.setRootDeviceId(rs.getLong(""String_Node_Str""));
          userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          long pool_id=rs.getLong(""String_Node_Str"");
          if (pool_id > 0) {
            userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          }
 else {
            userVmResponse.setRootDeviceType(""String_Node_Str"");
          }
        }
        is_data_center_security_group_enabled=rs.getBoolean(""String_Node_Str"");
      }
      if (is_data_center_security_group_enabled) {
        SecurityGroupResponse resp=new SecurityGroupResponse();
        resp.setId(rs.getLong(""String_Node_Str""));
        resp.setName(rs.getString(""String_Node_Str""));
        resp.setDescription(rs.getString(""String_Node_Str""));
        resp.setObjectName(""String_Node_Str"");
        securityGroupResponse.add(resp);
      }
      long nic_id=rs.getLong(""String_Node_Str"");
      if (nic_id > 0) {
        NicResponse nicResponse=new NicResponse();
        nicResponse.setId(nic_id);
        nicResponse.setIpaddress(rs.getString(""String_Node_Str""));
        nicResponse.setGateway(rs.getString(""String_Node_Str""));
        nicResponse.setNetmask(rs.getString(""String_Node_Str""));
        nicResponse.setNetworkid(rs.getLong(""String_Node_Str""));
        nicResponse.setMacAddress(rs.getString(""String_Node_Str""));
        int account_type=rs.getInt(""String_Node_Str"");
        if (account_type == Account.ACCOUNT_TYPE_ADMIN) {
          nicResponse.setBroadcastUri(rs.getString(""String_Node_Str""));
          nicResponse.setIsolationUri(rs.getString(""String_Node_Str""));
        }
        nicResponse.setTrafficType(rs.getString(""String_Node_Str""));
        nicResponse.setType(rs.getString(""String_Node_Str""));
        nicResponse.setIsDefault(rs.getBoolean(""String_Node_Str""));
        nicResponse.setObjectName(""String_Node_Str"");
        nicResponses.add(nicResponse);
      }
    }
    userVmResponse.setSecurityGroupList(new ArrayList(securityGroupResponse));
    userVmResponse.setNics(new ArrayList(nicResponses));
    return userVmResponse;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
}"
89460,"@Override public UserVmResponse listVmDetails(UserVm userVm,boolean show_host){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    String sql=VM_DETAILS;
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,userVm.getIsoId() == null ? -1 : userVm.getIsoId());
    pstmt.setLong(2,userVm.getId());
    ResultSet rs=pstmt.executeQuery();
    boolean is_data_center_security_group_enabled=false;
    Set<SecurityGroupResponse> securityGroupResponse=new HashSet<SecurityGroupResponse>();
    Set<NicResponse> nicResponses=new HashSet<NicResponse>();
    UserVmResponse userVmResponse=null;
    while (rs.next()) {
      if (userVmResponse == null) {
        userVmResponse=new UserVmResponse();
        userVmResponse.setId(userVm.getId());
        userVmResponse.setName(userVm.getDisplayName());
        userVmResponse.setCreated(userVm.getCreated());
        userVmResponse.setGuestOsId(userVm.getGuestOSId());
        userVmResponse.setHaEnable(userVm.isHaEnabled());
        if (userVm.getState() != null) {
          userVmResponse.setState(userVm.getState().toString());
        }
        if (userVm.getDisplayName() != null) {
          userVmResponse.setDisplayName(userVm.getDisplayName());
        }
 else {
          userVmResponse.setDisplayName(userVm.getHostName());
        }
        userVmResponse.setAccountName(rs.getString(""String_Node_Str""));
        userVmResponse.setDomainId(userVm.getDomainId());
        userVmResponse.setDomainName(rs.getString(""String_Node_Str""));
        long grp_id=rs.getLong(""String_Node_Str"");
        if (grp_id > 0) {
          userVmResponse.setGroupId(grp_id);
          userVmResponse.setGroup(rs.getString(""String_Node_Str""));
        }
        userVmResponse.setZoneId(rs.getLong(""String_Node_Str""));
        userVmResponse.setZoneName(rs.getString(""String_Node_Str""));
        if (show_host) {
          userVmResponse.setHostId(rs.getLong(""String_Node_Str""));
          userVmResponse.setHostName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getHypervisorType() != null) {
          userVmResponse.setHypervisor(userVm.getHypervisorType().toString());
        }
        long template_id=rs.getLong(""String_Node_Str"");
        if (template_id > 0) {
          userVmResponse.setTemplateId(template_id);
          userVmResponse.setTemplateName(rs.getString(""String_Node_Str""));
          userVmResponse.setTemplateDisplayText(rs.getString(""String_Node_Str""));
          userVmResponse.setPasswordEnabled(rs.getBoolean(""String_Node_Str""));
        }
 else {
          userVmResponse.setTemplateId(-1L);
          userVmResponse.setTemplateName(""String_Node_Str"");
          userVmResponse.setTemplateDisplayText(""String_Node_Str"");
          userVmResponse.setPasswordEnabled(false);
        }
        long iso_id=rs.getLong(""String_Node_Str"");
        if (iso_id > 0) {
          userVmResponse.setIsoId(iso_id);
          userVmResponse.setIsoName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getPassword() != null) {
          userVmResponse.setPassword(userVm.getPassword());
        }
        userVmResponse.setServiceOfferingId(rs.getLong(""String_Node_Str""));
        userVmResponse.setServiceOfferingName(rs.getString(""String_Node_Str""));
        userVmResponse.setCpuNumber(rs.getInt(""String_Node_Str""));
        userVmResponse.setCpuSpeed(rs.getInt(""String_Node_Str""));
        userVmResponse.setMemory(rs.getInt(""String_Node_Str""));
        long vol_id=rs.getLong(""String_Node_Str"");
        if (vol_id > 0) {
          userVmResponse.setRootDeviceId(rs.getLong(""String_Node_Str""));
          userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          long pool_id=rs.getLong(""String_Node_Str"");
          if (pool_id > 0) {
            userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          }
 else {
            userVmResponse.setRootDeviceType(""String_Node_Str"");
          }
        }
        is_data_center_security_group_enabled=rs.getBoolean(""String_Node_Str"");
      }
      if (is_data_center_security_group_enabled) {
        SecurityGroupResponse resp=new SecurityGroupResponse();
        resp.setId(rs.getLong(""String_Node_Str""));
        resp.setName(""String_Node_Str"");
        resp.setDescription(""String_Node_Str"");
        resp.setObjectName(""String_Node_Str"");
        securityGroupResponse.add(resp);
      }
      long nic_id=rs.getLong(""String_Node_Str"");
      if (nic_id > 0) {
        NicResponse nicResponse=new NicResponse();
        nicResponse.setId(nic_id);
        nicResponse.setIpaddress(rs.getString(""String_Node_Str""));
        nicResponse.setGateway(rs.getString(""String_Node_Str""));
        nicResponse.setNetmask(rs.getString(""String_Node_Str""));
        nicResponse.setNetworkid(rs.getLong(""String_Node_Str""));
        nicResponse.setMacAddress(rs.getString(""String_Node_Str""));
        int account_type=rs.getInt(""String_Node_Str"");
        if (account_type == Account.ACCOUNT_TYPE_ADMIN) {
          nicResponse.setBroadcastUri(rs.getString(""String_Node_Str""));
          nicResponse.setIsolationUri(rs.getString(""String_Node_Str""));
        }
        nicResponse.setTrafficType(rs.getString(""String_Node_Str""));
        nicResponse.setType(rs.getString(""String_Node_Str""));
        nicResponse.setIsDefault(rs.getBoolean(""String_Node_Str""));
        nicResponse.setObjectName(""String_Node_Str"");
        nicResponses.add(nicResponse);
      }
    }
    userVmResponse.setSecurityGroupList(new ArrayList(securityGroupResponse));
    userVmResponse.setNics(new ArrayList(nicResponses));
    return userVmResponse;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
}","@Override public UserVmResponse listVmDetails(UserVm userVm,boolean show_host){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    String sql=VM_DETAILS;
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,userVm.getIsoId() == null ? -1 : userVm.getIsoId());
    pstmt.setLong(2,userVm.getId());
    ResultSet rs=pstmt.executeQuery();
    boolean is_data_center_security_group_enabled=false;
    Set<SecurityGroupResponse> securityGroupResponse=new HashSet<SecurityGroupResponse>();
    Set<NicResponse> nicResponses=new HashSet<NicResponse>();
    UserVmResponse userVmResponse=null;
    while (rs.next()) {
      if (userVmResponse == null) {
        userVmResponse=new UserVmResponse();
        userVmResponse.setId(userVm.getId());
        userVmResponse.setName(userVm.getDisplayName());
        userVmResponse.setCreated(userVm.getCreated());
        userVmResponse.setGuestOsId(userVm.getGuestOSId());
        userVmResponse.setHaEnable(userVm.isHaEnabled());
        if (userVm.getState() != null) {
          userVmResponse.setState(userVm.getState().toString());
        }
        if (userVm.getDisplayName() != null) {
          userVmResponse.setDisplayName(userVm.getDisplayName());
        }
 else {
          userVmResponse.setDisplayName(userVm.getHostName());
        }
        userVmResponse.setAccountName(rs.getString(""String_Node_Str""));
        userVmResponse.setDomainId(userVm.getDomainId());
        userVmResponse.setDomainName(rs.getString(""String_Node_Str""));
        long grp_id=rs.getLong(""String_Node_Str"");
        if (grp_id > 0) {
          userVmResponse.setGroupId(grp_id);
          userVmResponse.setGroup(rs.getString(""String_Node_Str""));
        }
        userVmResponse.setZoneId(rs.getLong(""String_Node_Str""));
        userVmResponse.setZoneName(rs.getString(""String_Node_Str""));
        if (show_host) {
          userVmResponse.setHostId(rs.getLong(""String_Node_Str""));
          userVmResponse.setHostName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getHypervisorType() != null) {
          userVmResponse.setHypervisor(userVm.getHypervisorType().toString());
        }
        long template_id=rs.getLong(""String_Node_Str"");
        if (template_id > 0) {
          userVmResponse.setTemplateId(template_id);
          userVmResponse.setTemplateName(rs.getString(""String_Node_Str""));
          userVmResponse.setTemplateDisplayText(rs.getString(""String_Node_Str""));
          userVmResponse.setPasswordEnabled(rs.getBoolean(""String_Node_Str""));
        }
 else {
          userVmResponse.setTemplateId(-1L);
          userVmResponse.setTemplateName(""String_Node_Str"");
          userVmResponse.setTemplateDisplayText(""String_Node_Str"");
          userVmResponse.setPasswordEnabled(false);
        }
        long iso_id=rs.getLong(""String_Node_Str"");
        if (iso_id > 0) {
          userVmResponse.setIsoId(iso_id);
          userVmResponse.setIsoName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getPassword() != null) {
          userVmResponse.setPassword(userVm.getPassword());
        }
        userVmResponse.setServiceOfferingId(rs.getLong(""String_Node_Str""));
        userVmResponse.setServiceOfferingName(rs.getString(""String_Node_Str""));
        userVmResponse.setCpuNumber(rs.getInt(""String_Node_Str""));
        userVmResponse.setCpuSpeed(rs.getInt(""String_Node_Str""));
        userVmResponse.setMemory(rs.getInt(""String_Node_Str""));
        long vol_id=rs.getLong(""String_Node_Str"");
        if (vol_id > 0) {
          userVmResponse.setRootDeviceId(rs.getLong(""String_Node_Str""));
          userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          long pool_id=rs.getLong(""String_Node_Str"");
          if (pool_id > 0) {
            userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          }
 else {
            userVmResponse.setRootDeviceType(""String_Node_Str"");
          }
        }
        is_data_center_security_group_enabled=rs.getBoolean(""String_Node_Str"");
      }
      if (is_data_center_security_group_enabled) {
        SecurityGroupResponse resp=new SecurityGroupResponse();
        resp.setId(rs.getLong(""String_Node_Str""));
        resp.setName(rs.getString(""String_Node_Str""));
        resp.setDescription(rs.getString(""String_Node_Str""));
        resp.setObjectName(""String_Node_Str"");
        securityGroupResponse.add(resp);
      }
      long nic_id=rs.getLong(""String_Node_Str"");
      if (nic_id > 0) {
        NicResponse nicResponse=new NicResponse();
        nicResponse.setId(nic_id);
        nicResponse.setIpaddress(rs.getString(""String_Node_Str""));
        nicResponse.setGateway(rs.getString(""String_Node_Str""));
        nicResponse.setNetmask(rs.getString(""String_Node_Str""));
        nicResponse.setNetworkid(rs.getLong(""String_Node_Str""));
        nicResponse.setMacAddress(rs.getString(""String_Node_Str""));
        int account_type=rs.getInt(""String_Node_Str"");
        if (account_type == Account.ACCOUNT_TYPE_ADMIN) {
          nicResponse.setBroadcastUri(rs.getString(""String_Node_Str""));
          nicResponse.setIsolationUri(rs.getString(""String_Node_Str""));
        }
        nicResponse.setTrafficType(rs.getString(""String_Node_Str""));
        nicResponse.setType(rs.getString(""String_Node_Str""));
        nicResponse.setIsDefault(rs.getBoolean(""String_Node_Str""));
        nicResponse.setObjectName(""String_Node_Str"");
        nicResponses.add(nicResponse);
      }
    }
    userVmResponse.setSecurityGroupList(new ArrayList(securityGroupResponse));
    userVmResponse.setNics(new ArrayList(nicResponses));
    return userVmResponse;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
}"
89461,"@Override public <T extends VMInstanceVO>boolean advanceStop(T vm,boolean forced,User user,Account account) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return true;
  }
  Long hostId=vm.getHostId();
  if (hostId == null) {
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    NoTransitionException e) {
      s_logger.warn(e.getMessage());
    }
    return true;
  }
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  try {
    if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId(),null)) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  if ((vm.getState() == State.Starting || vm.getState() == State.Stopping || vm.getState() == State.Migrating) && forced) {
    ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
    if (work != null) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl<T>(vm),work,Event.StopRequested,forced,user,account)) {
        try {
          return stateTransitTo(vm,Event.AgentReportStopped,null);
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          return false;
        }
      }
    }
  }
  if (vm.getHostId() != null) {
    String routerPrivateIp=null;
    if (vm.getType() == VirtualMachine.Type.DomainRouter) {
      routerPrivateIp=vm.getPrivateIpAddress();
    }
    StopCommand stop=new StopCommand(vm,vm.getInstanceName(),null,routerPrivateIp);
    boolean stopped=false;
    StopAnswer answer=null;
    try {
      answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
    }
 catch (    AgentUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
 finally {
      if (!stopped) {
        if (!forced) {
          s_logger.warn(""String_Node_Str"" + vm);
          try {
            stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
          }
 catch (          NoTransitionException e) {
            s_logger.warn(""String_Node_Str"" + vm);
          }
          return false;
        }
 else {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
          vmGuru.finalizeStop(profile,answer);
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,forced);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      _storageMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    return stateTransitTo(vm,Event.OperationSucceeded,null,null);
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    return false;
  }
}","@Override public <T extends VMInstanceVO>boolean advanceStop(T vm,boolean forced,User user,Account account) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return true;
  }
  Long hostId=vm.getHostId();
  if (hostId == null) {
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    NoTransitionException e) {
      s_logger.warn(e.getMessage());
    }
    return true;
  }
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  try {
    if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId(),null)) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    if (!forced) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
    }
    s_logger.debug(""String_Node_Str"");
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  if ((vm.getState() == State.Starting || vm.getState() == State.Stopping || vm.getState() == State.Migrating) && forced) {
    ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
    if (work != null) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl<T>(vm),work,Event.StopRequested,forced,user,account)) {
        try {
          return stateTransitTo(vm,Event.AgentReportStopped,null);
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          return false;
        }
      }
    }
  }
  if (vm.getHostId() != null) {
    String routerPrivateIp=null;
    if (vm.getType() == VirtualMachine.Type.DomainRouter) {
      routerPrivateIp=vm.getPrivateIpAddress();
    }
    StopCommand stop=new StopCommand(vm,vm.getInstanceName(),null,routerPrivateIp);
    boolean stopped=false;
    StopAnswer answer=null;
    try {
      answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
    }
 catch (    AgentUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
 finally {
      if (!stopped) {
        if (!forced) {
          s_logger.warn(""String_Node_Str"" + vm);
          try {
            stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
          }
 catch (          NoTransitionException e) {
            s_logger.warn(""String_Node_Str"" + vm);
          }
          return false;
        }
 else {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
          vmGuru.finalizeStop(profile,answer);
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,forced);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      _storageMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    return stateTransitTo(vm,Event.OperationSucceeded,null,null);
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    return false;
  }
}"
89462,"@Override public UserVmResponse listVmDetails(UserVm userVm,boolean show_host){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    String sql=VM_DETAILS;
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,userVm.getId());
    ResultSet rs=pstmt.executeQuery();
    boolean is_data_center_security_group_enabled=false;
    Set<SecurityGroupResponse> securityGroupResponse=new HashSet<SecurityGroupResponse>();
    Set<NicResponse> nicResponses=new HashSet<NicResponse>();
    UserVmResponse userVmResponse=null;
    while (rs.next()) {
      if (userVmResponse == null) {
        userVmResponse=new UserVmResponse();
        userVmResponse.setId(userVm.getId());
        userVmResponse.setName(userVm.getDisplayName());
        userVmResponse.setCreated(userVm.getCreated());
        userVmResponse.setGuestOsId(userVm.getGuestOSId());
        userVmResponse.setHaEnable(userVm.isHaEnabled());
        if (userVm.getState() != null) {
          userVmResponse.setState(userVm.getState().toString());
        }
        if (userVm.getDisplayName() != null) {
          userVmResponse.setDisplayName(userVm.getDisplayName());
        }
 else {
          userVmResponse.setDisplayName(userVm.getHostName());
        }
        userVmResponse.setAccountName(rs.getString(""String_Node_Str""));
        userVmResponse.setDomainId(userVm.getDomainId());
        userVmResponse.setDomainName(rs.getString(""String_Node_Str""));
        long grp_id=rs.getLong(""String_Node_Str"");
        if (grp_id > 0) {
          userVmResponse.setGroupId(grp_id);
          userVmResponse.setGroup(rs.getString(""String_Node_Str""));
        }
        userVmResponse.setZoneId(rs.getLong(""String_Node_Str""));
        userVmResponse.setZoneName(rs.getString(""String_Node_Str""));
        if (show_host) {
          userVmResponse.setHostId(rs.getLong(""String_Node_Str""));
          userVmResponse.setHostName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getHypervisorType() != null) {
          userVmResponse.setHypervisor(userVm.getHypervisorType().toString());
        }
        long template_id=rs.getLong(""String_Node_Str"");
        if (template_id > 0) {
          userVmResponse.setTemplateId(template_id);
          userVmResponse.setTemplateName(rs.getString(""String_Node_Str""));
          userVmResponse.setTemplateDisplayText(rs.getString(""String_Node_Str""));
          userVmResponse.setPasswordEnabled(rs.getBoolean(""String_Node_Str""));
        }
 else {
          userVmResponse.setTemplateId(-1L);
          userVmResponse.setTemplateName(""String_Node_Str"");
          userVmResponse.setTemplateDisplayText(""String_Node_Str"");
          userVmResponse.setPasswordEnabled(false);
        }
        if (userVm.getPassword() != null) {
          userVmResponse.setPassword(userVm.getPassword());
        }
        userVmResponse.setServiceOfferingId(rs.getLong(""String_Node_Str""));
        userVmResponse.setServiceOfferingName(rs.getString(""String_Node_Str""));
        userVmResponse.setCpuNumber(rs.getInt(""String_Node_Str""));
        userVmResponse.setCpuSpeed(rs.getInt(""String_Node_Str""));
        userVmResponse.setMemory(rs.getInt(""String_Node_Str""));
        long vol_id=rs.getLong(""String_Node_Str"");
        if (vol_id > 0) {
          userVmResponse.setRootDeviceId(rs.getLong(""String_Node_Str""));
          userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          long pool_id=rs.getLong(""String_Node_Str"");
          if (pool_id > 0) {
            userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          }
 else {
            userVmResponse.setRootDeviceType(""String_Node_Str"");
          }
        }
        is_data_center_security_group_enabled=rs.getBoolean(""String_Node_Str"");
      }
      if (is_data_center_security_group_enabled) {
        SecurityGroupResponse resp=new SecurityGroupResponse();
        resp.setId(rs.getLong(""String_Node_Str""));
        resp.setName(""String_Node_Str"");
        resp.setDescription(""String_Node_Str"");
        resp.setObjectName(""String_Node_Str"");
        securityGroupResponse.add(resp);
      }
      long nic_id=rs.getLong(""String_Node_Str"");
      if (nic_id > 0) {
        NicResponse nicResponse=new NicResponse();
        nicResponse.setId(nic_id);
        nicResponse.setIpaddress(rs.getString(""String_Node_Str""));
        nicResponse.setGateway(rs.getString(""String_Node_Str""));
        nicResponse.setNetmask(rs.getString(""String_Node_Str""));
        nicResponse.setNetworkid(rs.getLong(""String_Node_Str""));
        nicResponse.setMacAddress(rs.getString(""String_Node_Str""));
        int account_type=rs.getInt(""String_Node_Str"");
        if (account_type == Account.ACCOUNT_TYPE_ADMIN) {
          nicResponse.setBroadcastUri(rs.getString(""String_Node_Str""));
          nicResponse.setIsolationUri(rs.getString(""String_Node_Str""));
        }
        nicResponse.setTrafficType(rs.getString(""String_Node_Str""));
        nicResponse.setType(rs.getString(""String_Node_Str""));
        nicResponse.setIsDefault(rs.getBoolean(""String_Node_Str""));
        nicResponse.setObjectName(""String_Node_Str"");
        nicResponses.add(nicResponse);
      }
    }
    userVmResponse.setSecurityGroupList(new ArrayList(securityGroupResponse));
    userVmResponse.setNics(new ArrayList(nicResponses));
    return userVmResponse;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
}","@Override public UserVmResponse listVmDetails(UserVm userVm,boolean show_host){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    String sql=VM_DETAILS;
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,userVm.getIsoId() == null ? -1 : userVm.getIsoId());
    pstmt.setLong(2,userVm.getId());
    ResultSet rs=pstmt.executeQuery();
    boolean is_data_center_security_group_enabled=false;
    Set<SecurityGroupResponse> securityGroupResponse=new HashSet<SecurityGroupResponse>();
    Set<NicResponse> nicResponses=new HashSet<NicResponse>();
    UserVmResponse userVmResponse=null;
    while (rs.next()) {
      if (userVmResponse == null) {
        userVmResponse=new UserVmResponse();
        userVmResponse.setId(userVm.getId());
        userVmResponse.setName(userVm.getDisplayName());
        userVmResponse.setCreated(userVm.getCreated());
        userVmResponse.setGuestOsId(userVm.getGuestOSId());
        userVmResponse.setHaEnable(userVm.isHaEnabled());
        if (userVm.getState() != null) {
          userVmResponse.setState(userVm.getState().toString());
        }
        if (userVm.getDisplayName() != null) {
          userVmResponse.setDisplayName(userVm.getDisplayName());
        }
 else {
          userVmResponse.setDisplayName(userVm.getHostName());
        }
        userVmResponse.setAccountName(rs.getString(""String_Node_Str""));
        userVmResponse.setDomainId(userVm.getDomainId());
        userVmResponse.setDomainName(rs.getString(""String_Node_Str""));
        long grp_id=rs.getLong(""String_Node_Str"");
        if (grp_id > 0) {
          userVmResponse.setGroupId(grp_id);
          userVmResponse.setGroup(rs.getString(""String_Node_Str""));
        }
        userVmResponse.setZoneId(rs.getLong(""String_Node_Str""));
        userVmResponse.setZoneName(rs.getString(""String_Node_Str""));
        if (show_host) {
          userVmResponse.setHostId(rs.getLong(""String_Node_Str""));
          userVmResponse.setHostName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getHypervisorType() != null) {
          userVmResponse.setHypervisor(userVm.getHypervisorType().toString());
        }
        long template_id=rs.getLong(""String_Node_Str"");
        if (template_id > 0) {
          userVmResponse.setTemplateId(template_id);
          userVmResponse.setTemplateName(rs.getString(""String_Node_Str""));
          userVmResponse.setTemplateDisplayText(rs.getString(""String_Node_Str""));
          userVmResponse.setPasswordEnabled(rs.getBoolean(""String_Node_Str""));
        }
 else {
          userVmResponse.setTemplateId(-1L);
          userVmResponse.setTemplateName(""String_Node_Str"");
          userVmResponse.setTemplateDisplayText(""String_Node_Str"");
          userVmResponse.setPasswordEnabled(false);
        }
        long iso_id=rs.getLong(""String_Node_Str"");
        if (iso_id > 0) {
          userVmResponse.setIsoId(iso_id);
          userVmResponse.setIsoName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getPassword() != null) {
          userVmResponse.setPassword(userVm.getPassword());
        }
        userVmResponse.setServiceOfferingId(rs.getLong(""String_Node_Str""));
        userVmResponse.setServiceOfferingName(rs.getString(""String_Node_Str""));
        userVmResponse.setCpuNumber(rs.getInt(""String_Node_Str""));
        userVmResponse.setCpuSpeed(rs.getInt(""String_Node_Str""));
        userVmResponse.setMemory(rs.getInt(""String_Node_Str""));
        long vol_id=rs.getLong(""String_Node_Str"");
        if (vol_id > 0) {
          userVmResponse.setRootDeviceId(rs.getLong(""String_Node_Str""));
          userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          long pool_id=rs.getLong(""String_Node_Str"");
          if (pool_id > 0) {
            userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          }
 else {
            userVmResponse.setRootDeviceType(""String_Node_Str"");
          }
        }
        is_data_center_security_group_enabled=rs.getBoolean(""String_Node_Str"");
      }
      if (is_data_center_security_group_enabled) {
        SecurityGroupResponse resp=new SecurityGroupResponse();
        resp.setId(rs.getLong(""String_Node_Str""));
        resp.setName(""String_Node_Str"");
        resp.setDescription(""String_Node_Str"");
        resp.setObjectName(""String_Node_Str"");
        securityGroupResponse.add(resp);
      }
      long nic_id=rs.getLong(""String_Node_Str"");
      if (nic_id > 0) {
        NicResponse nicResponse=new NicResponse();
        nicResponse.setId(nic_id);
        nicResponse.setIpaddress(rs.getString(""String_Node_Str""));
        nicResponse.setGateway(rs.getString(""String_Node_Str""));
        nicResponse.setNetmask(rs.getString(""String_Node_Str""));
        nicResponse.setNetworkid(rs.getLong(""String_Node_Str""));
        nicResponse.setMacAddress(rs.getString(""String_Node_Str""));
        int account_type=rs.getInt(""String_Node_Str"");
        if (account_type == Account.ACCOUNT_TYPE_ADMIN) {
          nicResponse.setBroadcastUri(rs.getString(""String_Node_Str""));
          nicResponse.setIsolationUri(rs.getString(""String_Node_Str""));
        }
        nicResponse.setTrafficType(rs.getString(""String_Node_Str""));
        nicResponse.setType(rs.getString(""String_Node_Str""));
        nicResponse.setIsDefault(rs.getBoolean(""String_Node_Str""));
        nicResponse.setObjectName(""String_Node_Str"");
        nicResponses.add(nicResponse);
      }
    }
    userVmResponse.setSecurityGroupList(new ArrayList(securityGroupResponse));
    userVmResponse.setNics(new ArrayList(nicResponses));
    return userVmResponse;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
}"
89463,"@Override public UserVmResponse listVmDetails(UserVm userVm,boolean show_host){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    String sql=VM_DETAILS;
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,userVm.getId());
    ResultSet rs=pstmt.executeQuery();
    boolean is_data_center_security_group_enabled=false;
    Set<SecurityGroupResponse> securityGroupResponse=new HashSet<SecurityGroupResponse>();
    Set<NicResponse> nicResponses=new HashSet<NicResponse>();
    UserVmResponse userVmResponse=null;
    while (rs.next()) {
      if (userVmResponse == null) {
        userVmResponse=new UserVmResponse();
        userVmResponse.setId(userVm.getId());
        userVmResponse.setName(userVm.getDisplayName());
        userVmResponse.setCreated(userVm.getCreated());
        userVmResponse.setGuestOsId(userVm.getGuestOSId());
        userVmResponse.setHaEnable(userVm.isHaEnabled());
        if (userVm.getState() != null) {
          userVmResponse.setState(userVm.getState().toString());
        }
        if (userVm.getDisplayName() != null) {
          userVmResponse.setDisplayName(userVm.getDisplayName());
        }
 else {
          userVmResponse.setDisplayName(userVm.getHostName());
        }
        userVmResponse.setAccountName(rs.getString(""String_Node_Str""));
        userVmResponse.setDomainId(userVm.getDomainId());
        userVmResponse.setDomainName(rs.getString(""String_Node_Str""));
        long grp_id=rs.getLong(""String_Node_Str"");
        if (grp_id > 0) {
          userVmResponse.setGroupId(grp_id);
          userVmResponse.setGroup(rs.getString(""String_Node_Str""));
        }
        userVmResponse.setZoneId(rs.getLong(""String_Node_Str""));
        userVmResponse.setZoneName(rs.getString(""String_Node_Str""));
        if (show_host) {
          userVmResponse.setHostId(rs.getLong(""String_Node_Str""));
          userVmResponse.setHostName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getHypervisorType() != null) {
          userVmResponse.setHypervisor(userVm.getHypervisorType().toString());
        }
        long template_id=rs.getLong(""String_Node_Str"");
        if (template_id > 0) {
          userVmResponse.setTemplateId(template_id);
          userVmResponse.setTemplateName(rs.getString(""String_Node_Str""));
          userVmResponse.setTemplateDisplayText(rs.getString(""String_Node_Str""));
          userVmResponse.setPasswordEnabled(rs.getBoolean(""String_Node_Str""));
        }
 else {
          userVmResponse.setTemplateId(-1L);
          userVmResponse.setTemplateName(""String_Node_Str"");
          userVmResponse.setTemplateDisplayText(""String_Node_Str"");
          userVmResponse.setPasswordEnabled(false);
        }
        if (userVm.getPassword() != null) {
          userVmResponse.setPassword(userVm.getPassword());
        }
        userVmResponse.setServiceOfferingId(rs.getLong(""String_Node_Str""));
        userVmResponse.setServiceOfferingName(rs.getString(""String_Node_Str""));
        userVmResponse.setCpuNumber(rs.getInt(""String_Node_Str""));
        userVmResponse.setCpuSpeed(rs.getInt(""String_Node_Str""));
        userVmResponse.setMemory(rs.getInt(""String_Node_Str""));
        long vol_id=rs.getLong(""String_Node_Str"");
        if (vol_id > 0) {
          userVmResponse.setRootDeviceId(rs.getLong(""String_Node_Str""));
          userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          long pool_id=rs.getLong(""String_Node_Str"");
          if (pool_id > 0) {
            userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          }
 else {
            userVmResponse.setRootDeviceType(""String_Node_Str"");
          }
        }
        is_data_center_security_group_enabled=rs.getBoolean(""String_Node_Str"");
      }
      if (is_data_center_security_group_enabled) {
        SecurityGroupResponse resp=new SecurityGroupResponse();
        resp.setId(rs.getLong(""String_Node_Str""));
        resp.setName(""String_Node_Str"");
        resp.setDescription(""String_Node_Str"");
        resp.setObjectName(""String_Node_Str"");
        securityGroupResponse.add(resp);
      }
      long nic_id=rs.getLong(""String_Node_Str"");
      if (nic_id > 0) {
        NicResponse nicResponse=new NicResponse();
        nicResponse.setId(nic_id);
        nicResponse.setIpaddress(rs.getString(""String_Node_Str""));
        nicResponse.setGateway(rs.getString(""String_Node_Str""));
        nicResponse.setNetmask(rs.getString(""String_Node_Str""));
        nicResponse.setNetworkid(rs.getLong(""String_Node_Str""));
        nicResponse.setMacAddress(rs.getString(""String_Node_Str""));
        int account_type=rs.getInt(""String_Node_Str"");
        if (account_type == Account.ACCOUNT_TYPE_ADMIN) {
          nicResponse.setBroadcastUri(rs.getString(""String_Node_Str""));
          nicResponse.setIsolationUri(rs.getString(""String_Node_Str""));
        }
        nicResponse.setTrafficType(rs.getString(""String_Node_Str""));
        nicResponse.setType(rs.getString(""String_Node_Str""));
        nicResponse.setIsDefault(rs.getBoolean(""String_Node_Str""));
        nicResponse.setObjectName(""String_Node_Str"");
        nicResponses.add(nicResponse);
      }
    }
    userVmResponse.setSecurityGroupList(new ArrayList(securityGroupResponse));
    userVmResponse.setNics(new ArrayList(nicResponses));
    return userVmResponse;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
}","@Override public UserVmResponse listVmDetails(UserVm userVm,boolean show_host){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    String sql=VM_DETAILS;
    pstmt=txn.prepareAutoCloseStatement(sql);
    pstmt.setLong(1,userVm.getIsoId() == null ? -1 : userVm.getIsoId());
    pstmt.setLong(2,userVm.getId());
    ResultSet rs=pstmt.executeQuery();
    boolean is_data_center_security_group_enabled=false;
    Set<SecurityGroupResponse> securityGroupResponse=new HashSet<SecurityGroupResponse>();
    Set<NicResponse> nicResponses=new HashSet<NicResponse>();
    UserVmResponse userVmResponse=null;
    while (rs.next()) {
      if (userVmResponse == null) {
        userVmResponse=new UserVmResponse();
        userVmResponse.setId(userVm.getId());
        userVmResponse.setName(userVm.getDisplayName());
        userVmResponse.setCreated(userVm.getCreated());
        userVmResponse.setGuestOsId(userVm.getGuestOSId());
        userVmResponse.setHaEnable(userVm.isHaEnabled());
        if (userVm.getState() != null) {
          userVmResponse.setState(userVm.getState().toString());
        }
        if (userVm.getDisplayName() != null) {
          userVmResponse.setDisplayName(userVm.getDisplayName());
        }
 else {
          userVmResponse.setDisplayName(userVm.getHostName());
        }
        userVmResponse.setAccountName(rs.getString(""String_Node_Str""));
        userVmResponse.setDomainId(userVm.getDomainId());
        userVmResponse.setDomainName(rs.getString(""String_Node_Str""));
        long grp_id=rs.getLong(""String_Node_Str"");
        if (grp_id > 0) {
          userVmResponse.setGroupId(grp_id);
          userVmResponse.setGroup(rs.getString(""String_Node_Str""));
        }
        userVmResponse.setZoneId(rs.getLong(""String_Node_Str""));
        userVmResponse.setZoneName(rs.getString(""String_Node_Str""));
        if (show_host) {
          userVmResponse.setHostId(rs.getLong(""String_Node_Str""));
          userVmResponse.setHostName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getHypervisorType() != null) {
          userVmResponse.setHypervisor(userVm.getHypervisorType().toString());
        }
        long template_id=rs.getLong(""String_Node_Str"");
        if (template_id > 0) {
          userVmResponse.setTemplateId(template_id);
          userVmResponse.setTemplateName(rs.getString(""String_Node_Str""));
          userVmResponse.setTemplateDisplayText(rs.getString(""String_Node_Str""));
          userVmResponse.setPasswordEnabled(rs.getBoolean(""String_Node_Str""));
        }
 else {
          userVmResponse.setTemplateId(-1L);
          userVmResponse.setTemplateName(""String_Node_Str"");
          userVmResponse.setTemplateDisplayText(""String_Node_Str"");
          userVmResponse.setPasswordEnabled(false);
        }
        long iso_id=rs.getLong(""String_Node_Str"");
        if (iso_id > 0) {
          userVmResponse.setIsoId(iso_id);
          userVmResponse.setIsoName(rs.getString(""String_Node_Str""));
        }
        if (userVm.getPassword() != null) {
          userVmResponse.setPassword(userVm.getPassword());
        }
        userVmResponse.setServiceOfferingId(rs.getLong(""String_Node_Str""));
        userVmResponse.setServiceOfferingName(rs.getString(""String_Node_Str""));
        userVmResponse.setCpuNumber(rs.getInt(""String_Node_Str""));
        userVmResponse.setCpuSpeed(rs.getInt(""String_Node_Str""));
        userVmResponse.setMemory(rs.getInt(""String_Node_Str""));
        long vol_id=rs.getLong(""String_Node_Str"");
        if (vol_id > 0) {
          userVmResponse.setRootDeviceId(rs.getLong(""String_Node_Str""));
          userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          long pool_id=rs.getLong(""String_Node_Str"");
          if (pool_id > 0) {
            userVmResponse.setRootDeviceType(rs.getString(""String_Node_Str""));
          }
 else {
            userVmResponse.setRootDeviceType(""String_Node_Str"");
          }
        }
        is_data_center_security_group_enabled=rs.getBoolean(""String_Node_Str"");
      }
      if (is_data_center_security_group_enabled) {
        SecurityGroupResponse resp=new SecurityGroupResponse();
        resp.setId(rs.getLong(""String_Node_Str""));
        resp.setName(""String_Node_Str"");
        resp.setDescription(""String_Node_Str"");
        resp.setObjectName(""String_Node_Str"");
        securityGroupResponse.add(resp);
      }
      long nic_id=rs.getLong(""String_Node_Str"");
      if (nic_id > 0) {
        NicResponse nicResponse=new NicResponse();
        nicResponse.setId(nic_id);
        nicResponse.setIpaddress(rs.getString(""String_Node_Str""));
        nicResponse.setGateway(rs.getString(""String_Node_Str""));
        nicResponse.setNetmask(rs.getString(""String_Node_Str""));
        nicResponse.setNetworkid(rs.getLong(""String_Node_Str""));
        nicResponse.setMacAddress(rs.getString(""String_Node_Str""));
        int account_type=rs.getInt(""String_Node_Str"");
        if (account_type == Account.ACCOUNT_TYPE_ADMIN) {
          nicResponse.setBroadcastUri(rs.getString(""String_Node_Str""));
          nicResponse.setIsolationUri(rs.getString(""String_Node_Str""));
        }
        nicResponse.setTrafficType(rs.getString(""String_Node_Str""));
        nicResponse.setType(rs.getString(""String_Node_Str""));
        nicResponse.setIsDefault(rs.getBoolean(""String_Node_Str""));
        nicResponse.setObjectName(""String_Node_Str"");
        nicResponses.add(nicResponse);
      }
    }
    userVmResponse.setSecurityGroupList(new ArrayList(securityGroupResponse));
    userVmResponse.setNics(new ArrayList(nicResponses));
    return userVmResponse;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
catch (  Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + VM_DETAILS,e);
  }
}"
89464,"@Override public AccountResponse createAccountResponse(Account account){
  boolean accountIsAdmin=(account.getType() == Account.ACCOUNT_TYPE_ADMIN);
  AccountResponse accountResponse=new AccountResponse();
  accountResponse.setId(account.getId());
  accountResponse.setName(account.getAccountName());
  accountResponse.setAccountType(account.getType());
  accountResponse.setDomainId(account.getDomainId());
  accountResponse.setDomainName(ApiDBUtils.findDomainById(account.getDomainId()).getName());
  accountResponse.setState(account.getState().toString());
  List<UserStatisticsVO> stats=ApiDBUtils.listUserStatsBy(account.getId());
  if (stats == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
  Long bytesSent=0L;
  Long bytesReceived=0L;
  for (  UserStatisticsVO stat : stats) {
    Long rx=stat.getNetBytesReceived() + stat.getCurrentBytesReceived();
    Long tx=stat.getNetBytesSent() + stat.getCurrentBytesSent();
    bytesReceived=bytesReceived + Long.valueOf(rx);
    bytesSent=bytesSent + Long.valueOf(tx);
  }
  accountResponse.setBytesReceived(bytesReceived);
  accountResponse.setBytesSent(bytesSent);
  Long vmLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.user_vm,account.getId());
  String vmLimitDisplay=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit);
  Long vmTotal=ApiDBUtils.getResourceCount(ResourceType.user_vm,account.getId());
  String vmAvail=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit - vmTotal);
  accountResponse.setVmLimit(vmLimitDisplay);
  accountResponse.setVmTotal(vmTotal);
  accountResponse.setVmAvailable(vmAvail);
  Long ipLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.public_ip,account.getId());
  String ipLimitDisplay=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit);
  Long ipTotal=ApiDBUtils.getResourceCount(ResourceType.public_ip,account.getId());
  String ipAvail=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit - ipTotal);
  accountResponse.setIpLimit(ipLimitDisplay);
  accountResponse.setIpTotal(ipTotal);
  accountResponse.setIpAvailable(ipAvail);
  Long volumeLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.volume,account.getId());
  String volumeLimitDisplay=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit);
  Long volumeTotal=ApiDBUtils.getResourceCount(ResourceType.volume,account.getId());
  String volumeAvail=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit - volumeTotal);
  accountResponse.setVolumeLimit(volumeLimitDisplay);
  accountResponse.setVolumeTotal(volumeTotal);
  accountResponse.setVolumeAvailable(volumeAvail);
  Long snapshotLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.snapshot,account.getId());
  String snapshotLimitDisplay=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit);
  Long snapshotTotal=ApiDBUtils.getResourceCount(ResourceType.snapshot,account.getId());
  String snapshotAvail=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit - snapshotTotal);
  accountResponse.setSnapshotLimit(snapshotLimitDisplay);
  accountResponse.setSnapshotTotal(snapshotTotal);
  accountResponse.setSnapshotAvailable(snapshotAvail);
  Long templateLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.template,account.getId());
  String templateLimitDisplay=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit);
  Long templateTotal=ApiDBUtils.getResourceCount(ResourceType.template,account.getId());
  String templateAvail=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit - templateTotal);
  accountResponse.setTemplateLimit(templateLimitDisplay);
  accountResponse.setTemplateTotal(templateTotal);
  accountResponse.setTemplateAvailable(templateAvail);
  int vmStopped=0;
  int vmRunning=0;
  Long[] accountIds=new Long[1];
  accountIds[0]=account.getId();
  Criteria c1=new Criteria();
  c1.addCriteria(Criteria.ACCOUNTID,accountIds);
  List<? extends UserVm> virtualMachines=ApiDBUtils.searchForUserVMs(c1);
  for (Iterator<? extends UserVm> iter=virtualMachines.iterator(); iter.hasNext(); ) {
    UserVm vm=iter.next();
    if (vm.getState() == State.Stopped) {
      vmStopped++;
    }
 else     if (vm.getState() == State.Running) {
      vmRunning++;
    }
  }
  accountResponse.setVmStopped(vmStopped);
  accountResponse.setVmRunning(vmRunning);
  accountResponse.setObjectName(""String_Node_Str"");
  List<UserVO> usersForAccount=ApiDBUtils.listUsersByAccount(account.getAccountId());
  List<UserResponse> userResponseList=new ArrayList<UserResponse>();
  for (  UserVO user : usersForAccount) {
    UserResponse userResponse=new UserResponse();
    userResponse.setAccountName(account.getAccountName());
    userResponse.setAccountType(account.getType());
    userResponse.setApiKey(user.getApiKey());
    userResponse.setCreated(user.getCreated());
    userResponse.setDomainId(account.getDomainId());
    userResponse.setDomainName(ApiDBUtils.findDomainById(account.getDomainId()).getName());
    userResponse.setEmail(user.getEmail());
    userResponse.setFirstname(user.getFirstname());
    userResponse.setId(user.getId());
    userResponse.setSecretKey(user.getSecretKey());
    userResponse.setLastname(user.getLastname());
    userResponse.setState(user.getState().toString());
    userResponse.setTimezone(user.getTimezone());
    userResponse.setUsername(user.getUsername());
    userResponseList.add(userResponse);
  }
  accountResponse.setUsers(userResponseList);
  return accountResponse;
}","@Override public AccountResponse createAccountResponse(Account account){
  boolean accountIsAdmin=(account.getType() == Account.ACCOUNT_TYPE_ADMIN);
  AccountResponse accountResponse=new AccountResponse();
  accountResponse.setId(account.getId());
  accountResponse.setName(account.getAccountName());
  accountResponse.setAccountType(account.getType());
  accountResponse.setDomainId(account.getDomainId());
  accountResponse.setDomainName(ApiDBUtils.findDomainById(account.getDomainId()).getName());
  accountResponse.setState(account.getState().toString());
  accountResponse.setNetworkDomain(account.getNetworkDomain());
  List<UserStatisticsVO> stats=ApiDBUtils.listUserStatsBy(account.getId());
  if (stats == null) {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
  Long bytesSent=0L;
  Long bytesReceived=0L;
  for (  UserStatisticsVO stat : stats) {
    Long rx=stat.getNetBytesReceived() + stat.getCurrentBytesReceived();
    Long tx=stat.getNetBytesSent() + stat.getCurrentBytesSent();
    bytesReceived=bytesReceived + Long.valueOf(rx);
    bytesSent=bytesSent + Long.valueOf(tx);
  }
  accountResponse.setBytesReceived(bytesReceived);
  accountResponse.setBytesSent(bytesSent);
  Long vmLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.user_vm,account.getId());
  String vmLimitDisplay=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit);
  Long vmTotal=ApiDBUtils.getResourceCount(ResourceType.user_vm,account.getId());
  String vmAvail=(accountIsAdmin || vmLimit == -1) ? ""String_Node_Str"" : String.valueOf(vmLimit - vmTotal);
  accountResponse.setVmLimit(vmLimitDisplay);
  accountResponse.setVmTotal(vmTotal);
  accountResponse.setVmAvailable(vmAvail);
  Long ipLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.public_ip,account.getId());
  String ipLimitDisplay=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit);
  Long ipTotal=ApiDBUtils.getResourceCount(ResourceType.public_ip,account.getId());
  String ipAvail=(accountIsAdmin || ipLimit == -1) ? ""String_Node_Str"" : String.valueOf(ipLimit - ipTotal);
  accountResponse.setIpLimit(ipLimitDisplay);
  accountResponse.setIpTotal(ipTotal);
  accountResponse.setIpAvailable(ipAvail);
  Long volumeLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.volume,account.getId());
  String volumeLimitDisplay=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit);
  Long volumeTotal=ApiDBUtils.getResourceCount(ResourceType.volume,account.getId());
  String volumeAvail=(accountIsAdmin || volumeLimit == -1) ? ""String_Node_Str"" : String.valueOf(volumeLimit - volumeTotal);
  accountResponse.setVolumeLimit(volumeLimitDisplay);
  accountResponse.setVolumeTotal(volumeTotal);
  accountResponse.setVolumeAvailable(volumeAvail);
  Long snapshotLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.snapshot,account.getId());
  String snapshotLimitDisplay=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit);
  Long snapshotTotal=ApiDBUtils.getResourceCount(ResourceType.snapshot,account.getId());
  String snapshotAvail=(accountIsAdmin || snapshotLimit == -1) ? ""String_Node_Str"" : String.valueOf(snapshotLimit - snapshotTotal);
  accountResponse.setSnapshotLimit(snapshotLimitDisplay);
  accountResponse.setSnapshotTotal(snapshotTotal);
  accountResponse.setSnapshotAvailable(snapshotAvail);
  Long templateLimit=ApiDBUtils.findCorrectResourceLimit(ResourceType.template,account.getId());
  String templateLimitDisplay=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit);
  Long templateTotal=ApiDBUtils.getResourceCount(ResourceType.template,account.getId());
  String templateAvail=(accountIsAdmin || templateLimit == -1) ? ""String_Node_Str"" : String.valueOf(templateLimit - templateTotal);
  accountResponse.setTemplateLimit(templateLimitDisplay);
  accountResponse.setTemplateTotal(templateTotal);
  accountResponse.setTemplateAvailable(templateAvail);
  int vmStopped=0;
  int vmRunning=0;
  Long[] accountIds=new Long[1];
  accountIds[0]=account.getId();
  Criteria c1=new Criteria();
  c1.addCriteria(Criteria.ACCOUNTID,accountIds);
  List<? extends UserVm> virtualMachines=ApiDBUtils.searchForUserVMs(c1);
  for (Iterator<? extends UserVm> iter=virtualMachines.iterator(); iter.hasNext(); ) {
    UserVm vm=iter.next();
    if (vm.getState() == State.Stopped) {
      vmStopped++;
    }
 else     if (vm.getState() == State.Running) {
      vmRunning++;
    }
  }
  accountResponse.setVmStopped(vmStopped);
  accountResponse.setVmRunning(vmRunning);
  accountResponse.setObjectName(""String_Node_Str"");
  List<UserVO> usersForAccount=ApiDBUtils.listUsersByAccount(account.getAccountId());
  List<UserResponse> userResponseList=new ArrayList<UserResponse>();
  for (  UserVO user : usersForAccount) {
    UserResponse userResponse=new UserResponse();
    userResponse.setAccountName(account.getAccountName());
    userResponse.setAccountType(account.getType());
    userResponse.setApiKey(user.getApiKey());
    userResponse.setCreated(user.getCreated());
    userResponse.setDomainId(account.getDomainId());
    userResponse.setDomainName(ApiDBUtils.findDomainById(account.getDomainId()).getName());
    userResponse.setEmail(user.getEmail());
    userResponse.setFirstname(user.getFirstname());
    userResponse.setId(user.getId());
    userResponse.setSecretKey(user.getSecretKey());
    userResponse.setLastname(user.getLastname());
    userResponse.setState(user.getState().toString());
    userResponse.setTimezone(user.getTimezone());
    userResponse.setUsername(user.getUsername());
    userResponseList.add(userResponse);
  }
  accountResponse.setUsers(userResponseList);
  return accountResponse;
}"
89465,"@Override public DomainResponse createDomainResponse(Domain domain){
  DomainResponse domainResponse=new DomainResponse();
  domainResponse.setDomainName(domain.getName());
  domainResponse.setId(domain.getId());
  domainResponse.setLevel(domain.getLevel());
  domainResponse.setParentDomainId(domain.getParent());
  if (domain.getParent() != null) {
    domainResponse.setParentDomainName(ApiDBUtils.findDomainById(domain.getParent()).getName());
  }
  if (domain.getChildCount() > 0) {
    domainResponse.setHasChild(true);
  }
  domainResponse.setObjectName(""String_Node_Str"");
  return domainResponse;
}","@Override public DomainResponse createDomainResponse(Domain domain){
  DomainResponse domainResponse=new DomainResponse();
  domainResponse.setDomainName(domain.getName());
  domainResponse.setId(domain.getId());
  domainResponse.setLevel(domain.getLevel());
  domainResponse.setNetworkDomain(domain.getNetworkDomain());
  domainResponse.setParentDomainId(domain.getParent());
  if (domain.getParent() != null) {
    domainResponse.setParentDomainName(ApiDBUtils.findDomainById(domain.getParent()).getName());
  }
  if (domain.getChildCount() > 0) {
    domainResponse.setHasChild(true);
  }
  domainResponse.setObjectName(""String_Node_Str"");
  return domainResponse;
}"
89466,"/** 
 * Creates a new zone
 * @param userId
 * @param zoneName
 * @param dns1
 * @param dns2
 * @param internalDns1
 * @param internalDns2
 * @param vnetRange
 * @param guestCidr
 * @param zoneType
 * @param allocationState
 * @return
 * @throws 
     * @throws 
 */
DataCenterVO createZone(long userId,String zoneName,String dns1,String dns2,String internalDns1,String internalDns2,String vnetRange,String guestCidr,String domain,Long domainId,NetworkType zoneType,boolean isSecurityGroupEnabled,String allocationState);","/** 
 * Creates a new zone
 * @param userId
 * @param zoneName
 * @param dns1
 * @param dns2
 * @param internalDns1
 * @param internalDns2
 * @param vnetRange
 * @param guestCidr
 * @param zoneType
 * @param allocationState
 * @param networkDomain TODO
 * @return
 * @throws 
     * @throws 
 */
DataCenterVO createZone(long userId,String zoneName,String dns1,String dns2,String internalDns1,String internalDns2,String vnetRange,String guestCidr,String domain,Long domainId,NetworkType zoneType,boolean isSecurityGroupEnabled,String allocationState,String networkDomain);"
89467,"@Override public DataCenter editZone(UpdateZoneCmd cmd){
  Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long userId=UserContext.current().getCallerUserId();
  int startVnetRange=0;
  int stopVnetRange=0;
  Boolean isPublic=cmd.isPublic();
  String allocationStateStr=cmd.getAllocationState();
  String dhcpProvider=cmd.getDhcpProvider();
  Map detailsMap=cmd.getDetails();
  Map<String,String> newDetails=new HashMap<String,String>();
  if (detailsMap != null) {
    Collection zoneDetailsCollection=detailsMap.values();
    Iterator iter=zoneDetailsCollection.iterator();
    while (iter.hasNext()) {
      HashMap detail=(HashMap)iter.next();
      String key=(String)detail.get(""String_Node_Str"");
      String value=(String)detail.get(""String_Node_Str"");
      if ((key == null) || (value == null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      newDetails.put(key,value);
    }
  }
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    if (vnetRange != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str"");
    }
 else     if (guestCidr != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str"");
    }
  }
  if ((guestCidr != null) && !NetUtils.validateGuestCidr(guestCidr)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  if (vnetRange != null) {
    if (zoneHasAllocatedVnets(zoneId)) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    String[] startStopRange=new String[2];
    startStopRange=vnetRange.split(""String_Node_Str"");
    if (startStopRange.length == 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startStopRange[0] == null || startStopRange[1] == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    try {
      startVnetRange=Integer.parseInt(startStopRange[0]);
      stopVnetRange=Integer.parseInt(startStopRange[1]);
    }
 catch (    NumberFormatException e) {
      s_logger.warn(""String_Node_Str"",e);
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange < 0 || stopVnetRange > 4096) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange > stopVnetRange) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  boolean dnsUpdate=false;
  if (dns1 != null || dns2 != null) {
    dnsUpdate=true;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (guestCidr == null) {
    guestCidr=zone.getGuestNetworkCidr();
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null,allocationStateStr);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  zone.setGuestNetworkCidr(guestCidr);
  if (vnetRange != null) {
    zone.setVnet(vnetRange);
  }
  if (isPublic != null && isPublic) {
    zone.setDomainId(null);
    zone.setDomain(null);
  }
  Map<String,String> updatedDetails=new HashMap<String,String>();
  _zoneDao.loadDetails(zone);
  if (zone.getDetails() != null) {
    updatedDetails.putAll(zone.getDetails());
  }
  updatedDetails.putAll(newDetails);
  zone.setDetails(updatedDetails);
  if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
    Grouping.AllocationState allocationState=Grouping.AllocationState.valueOf(allocationStateStr);
    zone.setAllocationState(allocationState);
  }
  if (dhcpProvider != null) {
    zone.setDhcpProvider(dhcpProvider);
  }
  if (!_zoneDao.update(zoneId,zone)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (vnetRange != null) {
    String[] tokens=vnetRange.split(""String_Node_Str"");
    int begin=Integer.parseInt(tokens[0]);
    int end=tokens.length == 1 ? (begin) : Integer.parseInt(tokens[1]);
    _zoneDao.deleteVnet(zoneId);
    _zoneDao.addVnet(zone.getId(),begin,end);
  }
  return zone;
}","@Override public DataCenter editZone(UpdateZoneCmd cmd){
  Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long userId=UserContext.current().getCallerUserId();
  int startVnetRange=0;
  int stopVnetRange=0;
  Boolean isPublic=cmd.isPublic();
  String allocationStateStr=cmd.getAllocationState();
  String dhcpProvider=cmd.getDhcpProvider();
  Map detailsMap=cmd.getDetails();
  String networkDomain=cmd.getDomain();
  Map<String,String> newDetails=new HashMap<String,String>();
  if (detailsMap != null) {
    Collection zoneDetailsCollection=detailsMap.values();
    Iterator iter=zoneDetailsCollection.iterator();
    while (iter.hasNext()) {
      HashMap detail=(HashMap)iter.next();
      String key=(String)detail.get(""String_Node_Str"");
      String value=(String)detail.get(""String_Node_Str"");
      if ((key == null) || (value == null)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      newDetails.put(key,value);
    }
  }
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    if (vnetRange != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str"");
    }
 else     if (guestCidr != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getNetworkType() + ""String_Node_Str"");
    }
  }
  if ((guestCidr != null) && !NetUtils.validateGuestCidr(guestCidr)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  if (vnetRange != null) {
    if (zoneHasAllocatedVnets(zoneId)) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    String[] startStopRange=new String[2];
    startStopRange=vnetRange.split(""String_Node_Str"");
    if (startStopRange.length == 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startStopRange[0] == null || startStopRange[1] == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    try {
      startVnetRange=Integer.parseInt(startStopRange[0]);
      stopVnetRange=Integer.parseInt(startStopRange[1]);
    }
 catch (    NumberFormatException e) {
      s_logger.warn(""String_Node_Str"",e);
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange < 0 || stopVnetRange > 4096) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange > stopVnetRange) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  boolean dnsUpdate=false;
  if (dns1 != null || dns2 != null) {
    dnsUpdate=true;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (guestCidr == null) {
    guestCidr=zone.getGuestNetworkCidr();
  }
  if (networkDomain != null) {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
 else {
    networkDomain=zone.getDomain();
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null,allocationStateStr);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  zone.setGuestNetworkCidr(guestCidr);
  zone.setDomain(networkDomain);
  if (vnetRange != null) {
    zone.setVnet(vnetRange);
  }
  if (isPublic != null && isPublic) {
    zone.setDomainId(null);
    zone.setDomain(null);
  }
  Map<String,String> updatedDetails=new HashMap<String,String>();
  _zoneDao.loadDetails(zone);
  if (zone.getDetails() != null) {
    updatedDetails.putAll(zone.getDetails());
  }
  updatedDetails.putAll(newDetails);
  zone.setDetails(updatedDetails);
  if (allocationStateStr != null && !allocationStateStr.isEmpty()) {
    Grouping.AllocationState allocationState=Grouping.AllocationState.valueOf(allocationStateStr);
    zone.setAllocationState(allocationState);
  }
  if (dhcpProvider != null) {
    zone.setDhcpProvider(dhcpProvider);
  }
  if (!_zoneDao.update(zoneId,zone)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (vnetRange != null) {
    String[] tokens=vnetRange.split(""String_Node_Str"");
    int begin=Integer.parseInt(tokens[0]);
    int end=tokens.length == 1 ? (begin) : Integer.parseInt(tokens[1]);
    _zoneDao.deleteVnet(zoneId);
    _zoneDao.addVnet(zone.getId(),begin,end);
  }
  return zone;
}"
89468,"@Override public DataCenter createZone(CreateZoneCmd cmd){
  Long userId=UserContext.current().getCallerUserId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long domainId=cmd.getDomainId();
  String type=cmd.getNetworkType();
  Boolean isBasic=false;
  String allocationState=cmd.getAllocationState();
  if (allocationState == null) {
    allocationState=Grouping.AllocationState.Enabled.toString();
  }
  if (!(type.equalsIgnoreCase(NetworkType.Basic.toString())) && !(type.equalsIgnoreCase(NetworkType.Advanced.toString()))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (type.equalsIgnoreCase(NetworkType.Basic.toString())) {
    isBasic=true;
  }
  Boolean securityGroupEnabled=cmd.isSecurityGroupEnabled();
  NetworkType zoneType=isBasic ? NetworkType.Basic : NetworkType.Advanced;
  if (zoneType == NetworkType.Advanced && guestCidr == null && !securityGroupEnabled) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (zoneType == NetworkType.Basic && guestCidr != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DomainVO domainVO=null;
  if (userId == null) {
    userId=User.UID_SYSTEM;
  }
  if (domainId != null) {
    domainVO=_domainDao.findById(domainId);
  }
  if (zoneType == NetworkType.Basic && vnetRange != null) {
    vnetRange=null;
  }
  if (zoneType == NetworkType.Basic) {
    securityGroupEnabled=true;
  }
  return createZone(userId,zoneName,dns1,dns2,internalDns1,internalDns2,vnetRange,guestCidr,domainVO != null ? domainVO.getName() : null,domainId,zoneType,securityGroupEnabled,allocationState);
}","@Override public DataCenter createZone(CreateZoneCmd cmd){
  Long userId=UserContext.current().getCallerUserId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long domainId=cmd.getDomainId();
  String type=cmd.getNetworkType();
  Boolean isBasic=false;
  String allocationState=cmd.getAllocationState();
  String networkDomain=cmd.getDomain();
  if (allocationState == null) {
    allocationState=Grouping.AllocationState.Enabled.toString();
  }
  if (!(type.equalsIgnoreCase(NetworkType.Basic.toString())) && !(type.equalsIgnoreCase(NetworkType.Advanced.toString()))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (type.equalsIgnoreCase(NetworkType.Basic.toString())) {
    isBasic=true;
  }
  Boolean securityGroupEnabled=cmd.isSecurityGroupEnabled();
  NetworkType zoneType=isBasic ? NetworkType.Basic : NetworkType.Advanced;
  if (zoneType == NetworkType.Advanced && guestCidr == null && !securityGroupEnabled) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (zoneType == NetworkType.Basic && guestCidr != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  DomainVO domainVO=null;
  if (userId == null) {
    userId=User.UID_SYSTEM;
  }
  if (domainId != null) {
    domainVO=_domainDao.findById(domainId);
  }
  if (zoneType == NetworkType.Basic && vnetRange != null) {
    vnetRange=null;
  }
  if (zoneType == NetworkType.Basic) {
    securityGroupEnabled=true;
  }
  return createZone(userId,zoneName,dns1,dns2,internalDns1,internalDns2,vnetRange,guestCidr,domainVO != null ? domainVO.getName() : null,domainId,zoneType,securityGroupEnabled,allocationState,networkDomain);
}"
89469,"@Override public void createDefaultNetworks(long zoneId,boolean isSecurityGroupEnabled) throws ConcurrentOperationException {
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone != null) {
    List<NetworkOfferingVO> ntwkOff=_networkOfferingDao.listSystemNetworkOfferings();
    for (    NetworkOfferingVO offering : ntwkOff) {
      DataCenterDeployment plan=new DataCenterDeployment(zone.getId(),null,null,null,null);
      NetworkVO userNetwork=new NetworkVO();
      Account systemAccount=_accountDao.findById(Account.ACCOUNT_ID_SYSTEM);
      BroadcastDomainType broadcastDomainType=null;
      boolean isNetworkDefault=false;
      if (offering.getTrafficType() == TrafficType.Management) {
        broadcastDomainType=BroadcastDomainType.Native;
      }
 else       if (offering.getTrafficType() == TrafficType.Control) {
        broadcastDomainType=BroadcastDomainType.LinkLocal;
      }
 else       if (offering.getTrafficType() == TrafficType.Public) {
        if ((zone.getNetworkType() == NetworkType.Advanced && !zone.isSecurityGroupEnabled()) || zone.getNetworkType() == NetworkType.Basic) {
          broadcastDomainType=BroadcastDomainType.Vlan;
        }
 else {
          continue;
        }
      }
 else       if (offering.getTrafficType() == TrafficType.Guest) {
        if (zone.getNetworkType() == NetworkType.Basic) {
          isNetworkDefault=true;
          broadcastDomainType=BroadcastDomainType.Native;
          userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
        }
 else         if (offering.getGuestType() == GuestIpType.Direct && isSecurityGroupEnabled) {
          isNetworkDefault=true;
          userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
        }
 else {
          continue;
        }
      }
      userNetwork.setBroadcastDomainType(broadcastDomainType);
      _networkMgr.setupNetwork(systemAccount,offering,userNetwork,plan,null,null,true,isNetworkDefault,false,null,null);
    }
  }
}","@Override public void createDefaultNetworks(long zoneId,boolean isSecurityGroupEnabled) throws ConcurrentOperationException {
  DataCenterVO zone=_zoneDao.findById(zoneId);
  String networkDomain=null;
  if (zone != null) {
    List<NetworkOfferingVO> ntwkOff=_networkOfferingDao.listSystemNetworkOfferings();
    for (    NetworkOfferingVO offering : ntwkOff) {
      DataCenterDeployment plan=new DataCenterDeployment(zone.getId(),null,null,null,null);
      NetworkVO userNetwork=new NetworkVO();
      Account systemAccount=_accountDao.findById(Account.ACCOUNT_ID_SYSTEM);
      BroadcastDomainType broadcastDomainType=null;
      boolean isNetworkDefault=false;
      if (offering.getTrafficType() == TrafficType.Management) {
        broadcastDomainType=BroadcastDomainType.Native;
      }
 else       if (offering.getTrafficType() == TrafficType.Control) {
        broadcastDomainType=BroadcastDomainType.LinkLocal;
      }
 else       if (offering.getTrafficType() == TrafficType.Public) {
        if ((zone.getNetworkType() == NetworkType.Advanced && !zone.isSecurityGroupEnabled()) || zone.getNetworkType() == NetworkType.Basic) {
          broadcastDomainType=BroadcastDomainType.Vlan;
        }
 else {
          continue;
        }
      }
 else       if (offering.getTrafficType() == TrafficType.Guest) {
        if (zone.getNetworkType() == NetworkType.Basic) {
          isNetworkDefault=true;
          broadcastDomainType=BroadcastDomainType.Native;
          userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
        }
 else         if (offering.getGuestType() == GuestIpType.Direct && isSecurityGroupEnabled) {
          isNetworkDefault=true;
          userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
        }
 else {
          continue;
        }
        networkDomain=""String_Node_Str"" + Long.toHexString(Account.ACCOUNT_ID_SYSTEM) + _networkMgr.getGlobalGuestDomainSuffix();
      }
      userNetwork.setBroadcastDomainType(broadcastDomainType);
      userNetwork.setNetworkDomain(networkDomain);
      _networkMgr.setupNetwork(systemAccount,offering,userNetwork,plan,null,null,true,isNetworkDefault,false,null,null);
    }
  }
}"
89470,"@Override public void run(){
  while (true) {
synchronized (_notificationMsgs) {
      try {
        _notificationMsgs.wait(1000);
      }
 catch (      InterruptedException e) {
      }
    }
    ClusterManagerMessage msg=null;
    while ((msg=getNextNotificationMessage()) != null) {
      try {
switch (msg.getMessageType()) {
case nodeAdded:
          if (msg.getNodes() != null && msg.getNodes().size() > 0) {
            Profiler profiler=new Profiler();
            profiler.start();
            notifyNodeJoined(msg.getNodes());
            profiler.stop();
            if (profiler.getDuration() > 1000) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
              }
            }
 else {
              s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
            }
          }
        break;
case nodeRemoved:
      if (msg.getNodes() != null && msg.getNodes().size() > 0) {
        Profiler profiler=new Profiler();
        profiler.start();
        notifyNodeLeft(msg.getNodes());
        profiler.stop();
        if (profiler.getDuration() > 1000) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
        }
      }
    break;
case nodeIsolated:
  notifyNodeIsolated();
break;
default :
assert(false);
break;
}
}
 catch (Throwable e) {
s_logger.warn(""String_Node_Str"",e);
}
}
try {
Thread.currentThread().sleep(1000);
}
 catch (InterruptedException e) {
}
}
}","@Override public void run(){
  while (true) {
synchronized (_notificationMsgs) {
      try {
        _notificationMsgs.wait(1000);
      }
 catch (      InterruptedException e) {
      }
    }
    ClusterManagerMessage msg=null;
    while ((msg=getNextNotificationMessage()) != null) {
      try {
switch (msg.getMessageType()) {
case nodeAdded:
          if (msg.getNodes() != null && msg.getNodes().size() > 0) {
            Profiler profiler=new Profiler();
            profiler.start();
            notifyNodeJoined(msg.getNodes());
            profiler.stop();
            if (profiler.getDuration() > 1000) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
              }
            }
 else {
              s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
            }
          }
        break;
case nodeRemoved:
      if (msg.getNodes() != null && msg.getNodes().size() > 0) {
        Profiler profiler=new Profiler();
        profiler.start();
        notifyNodeLeft(msg.getNodes());
        profiler.stop();
        if (profiler.getDuration() > 1000) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
        }
      }
    break;
case nodeIsolated:
  notifyNodeIsolated();
break;
default :
assert(false);
break;
}
}
 catch (Throwable e) {
s_logger.warn(""String_Node_Str"",e);
}
}
try {
Thread.sleep(1000);
}
 catch (InterruptedException e) {
}
}
}"
89471,"private void initPeerScan(Connection conn){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> inactiveList=_mshostDao.getInactiveList(conn,new Date(cutTime.getTime() - heartbeatThreshold));
  if (inactiveList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,inactiveList));
  }
}","private void initPeerScan(){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> inactiveList=_mshostDao.getInactiveList(new Date(cutTime.getTime() - heartbeatThreshold));
  if (inactiveList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,inactiveList));
  }
}"
89472,"private Runnable getHeartbeatTask(){
  return new Runnable(){
    @Override public void run(){
      try {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _mshostId);
        }
        Connection conn=getHeartbeatConnection();
        _mshostDao.update(conn,_mshostId,getCurrentRunId(),DateUtil.currentGMTTime());
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _mshostId);
        }
        if (!_peerScanInited) {
          _peerScanInited=true;
          initPeerScan(conn);
        }
        peerScan(conn);
      }
 catch (      CloudRuntimeException e) {
        s_logger.error(""String_Node_Str"",e.getCause());
        if (e.getCause() instanceof ClusterInvalidSessionException) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        if (isRootCauseConnectionRelated(e.getCause())) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        invalidHeartbeatConnection();
      }
catch (      Throwable e) {
        if (isRootCauseConnectionRelated(e.getCause())) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        s_logger.error(""String_Node_Str"",e);
      }
    }
  }
;
}","private Runnable getHeartbeatTask(){
  return new Runnable(){
    @Override public void run(){
      Transaction txn=Transaction.open(""String_Node_Str"");
      try {
        txn.transitToUserManagedConnection(getHeartbeatConnection());
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _mshostId);
        }
        _mshostDao.update(_mshostId,getCurrentRunId(),DateUtil.currentGMTTime());
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _mshostId);
        }
        if (!_peerScanInited) {
          _peerScanInited=true;
          initPeerScan();
        }
        peerScan();
      }
 catch (      CloudRuntimeException e) {
        s_logger.error(""String_Node_Str"",e.getCause());
        if (e.getCause() instanceof ClusterInvalidSessionException) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        if (isRootCauseConnectionRelated(e.getCause())) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        invalidHeartbeatConnection();
      }
catch (      Throwable e) {
        if (isRootCauseConnectionRelated(e.getCause())) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        s_logger.error(""String_Node_Str"",e);
      }
 finally {
        txn.close(""String_Node_Str"");
      }
    }
  }
;
}"
89473,"private void peerScan(Connection conn){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> currentList=_mshostDao.getActiveList(conn,new Date(cutTime.getTime() - heartbeatThreshold));
  List<ManagementServerHostVO> removedNodeList=new ArrayList<ManagementServerHostVO>();
  List<ManagementServerHostVO> invalidatedNodeList=new ArrayList<ManagementServerHostVO>();
  if (_mshostId != null) {
    for (    Map.Entry<Long,ManagementServerHostVO> entry : activePeers.entrySet()) {
      ManagementServerHostVO current=getInListById(entry.getKey(),currentList);
      if (current == null) {
        if (entry.getKey().longValue() != _mshostId.longValue()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
          }
          removedNodeList.add(entry.getValue());
        }
      }
 else {
        if (current.getRunid() == 0) {
          if (entry.getKey().longValue() != _mshostId.longValue()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
            }
            invalidatedNodeList.add(entry.getValue());
          }
        }
 else {
          if (entry.getValue().getRunid() != current.getRunid()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
            }
            entry.getValue().setRunid(current.getRunid());
          }
        }
      }
    }
  }
  if (invalidatedNodeList.size() > 0) {
    for (    ManagementServerHostVO mshost : invalidatedNodeList) {
      activePeers.remove(mshost.getId());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,invalidatedNodeList));
  }
  Iterator<ManagementServerHostVO> it=removedNodeList.iterator();
  while (it.hasNext()) {
    ManagementServerHostVO mshost=it.next();
    if (!pingManagementNode(mshost)) {
      s_logger.warn(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      activePeers.remove(mshost.getId());
      _mshostDao.invalidateRunSession(conn,mshost.getId(),mshost.getRunid());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      it.remove();
    }
  }
  if (removedNodeList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,removedNodeList));
  }
  List<ManagementServerHostVO> newNodeList=new ArrayList<ManagementServerHostVO>();
  for (  ManagementServerHostVO mshost : currentList) {
    if (!activePeers.containsKey(mshost.getId())) {
      activePeers.put(mshost.getId(),mshost);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + mshost.getId() + ""String_Node_Str""+ mshost.getServiceIP());
      }
      newNodeList.add(mshost);
      try {
        JmxUtil.registerMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId(),new ClusterManagerMBeanImpl(this,mshost));
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + ExceptionUtil.toString(e));
      }
    }
  }
  if (newNodeList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeAdded,newNodeList));
  }
}","private void peerScan(){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> currentList=_mshostDao.getActiveList(new Date(cutTime.getTime() - heartbeatThreshold));
  List<ManagementServerHostVO> removedNodeList=new ArrayList<ManagementServerHostVO>();
  List<ManagementServerHostVO> invalidatedNodeList=new ArrayList<ManagementServerHostVO>();
  if (_mshostId != null) {
    for (    Map.Entry<Long,ManagementServerHostVO> entry : activePeers.entrySet()) {
      ManagementServerHostVO current=getInListById(entry.getKey(),currentList);
      if (current == null) {
        if (entry.getKey().longValue() != _mshostId.longValue()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
          }
          removedNodeList.add(entry.getValue());
        }
      }
 else {
        if (current.getRunid() == 0) {
          if (entry.getKey().longValue() != _mshostId.longValue()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
            }
            invalidatedNodeList.add(entry.getValue());
          }
        }
 else {
          if (entry.getValue().getRunid() != current.getRunid()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
            }
            entry.getValue().setRunid(current.getRunid());
          }
        }
      }
    }
  }
  if (invalidatedNodeList.size() > 0) {
    for (    ManagementServerHostVO mshost : invalidatedNodeList) {
      activePeers.remove(mshost.getId());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,invalidatedNodeList));
  }
  Iterator<ManagementServerHostVO> it=removedNodeList.iterator();
  while (it.hasNext()) {
    ManagementServerHostVO mshost=it.next();
    if (!pingManagementNode(mshost)) {
      s_logger.warn(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      activePeers.remove(mshost.getId());
      _mshostDao.invalidateRunSession(mshost.getId(),mshost.getRunid());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      it.remove();
    }
  }
  if (removedNodeList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,removedNodeList));
  }
  List<ManagementServerHostVO> newNodeList=new ArrayList<ManagementServerHostVO>();
  for (  ManagementServerHostVO mshost : currentList) {
    if (!activePeers.containsKey(mshost.getId())) {
      activePeers.put(mshost.getId(),mshost);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + mshost.getId() + ""String_Node_Str""+ mshost.getServiceIP());
      }
      newNodeList.add(mshost);
      try {
        JmxUtil.registerMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId(),new ClusterManagerMBeanImpl(this,mshost));
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + ExceptionUtil.toString(e));
      }
    }
  }
  if (newNodeList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeAdded,newNodeList));
  }
}"
89474,"private Runnable getNotificationTask(){
  return new Runnable(){
    @Override public void run(){
      while (true) {
synchronized (_notificationMsgs) {
          try {
            _notificationMsgs.wait(1000);
          }
 catch (          InterruptedException e) {
          }
        }
        ClusterManagerMessage msg=null;
        while ((msg=getNextNotificationMessage()) != null) {
          try {
switch (msg.getMessageType()) {
case nodeAdded:
              if (msg.getNodes() != null && msg.getNodes().size() > 0) {
                Profiler profiler=new Profiler();
                profiler.start();
                notifyNodeJoined(msg.getNodes());
                profiler.stop();
                if (profiler.getDuration() > 1000) {
                  if (s_logger.isDebugEnabled()) {
                    s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
                  }
                }
 else {
                  s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
                }
              }
            break;
case nodeRemoved:
          if (msg.getNodes() != null && msg.getNodes().size() > 0) {
            Profiler profiler=new Profiler();
            profiler.start();
            notifyNodeLeft(msg.getNodes());
            profiler.stop();
            if (profiler.getDuration() > 1000) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
              }
            }
 else {
              s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
            }
          }
        break;
case nodeIsolated:
      notifyNodeIsolated();
    break;
default :
  assert(false);
break;
}
}
 catch (Throwable e) {
s_logger.warn(""String_Node_Str"",e);
}
}
try {
Thread.currentThread().sleep(1000);
}
 catch (InterruptedException e) {
}
}
}
}
;
}","private Runnable getNotificationTask(){
  return new Runnable(){
    @Override public void run(){
      while (true) {
synchronized (_notificationMsgs) {
          try {
            _notificationMsgs.wait(1000);
          }
 catch (          InterruptedException e) {
          }
        }
        ClusterManagerMessage msg=null;
        while ((msg=getNextNotificationMessage()) != null) {
          try {
switch (msg.getMessageType()) {
case nodeAdded:
              if (msg.getNodes() != null && msg.getNodes().size() > 0) {
                Profiler profiler=new Profiler();
                profiler.start();
                notifyNodeJoined(msg.getNodes());
                profiler.stop();
                if (profiler.getDuration() > 1000) {
                  if (s_logger.isDebugEnabled()) {
                    s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
                  }
                }
 else {
                  s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
                }
              }
            break;
case nodeRemoved:
          if (msg.getNodes() != null && msg.getNodes().size() > 0) {
            Profiler profiler=new Profiler();
            profiler.start();
            notifyNodeLeft(msg.getNodes());
            profiler.stop();
            if (profiler.getDuration() > 1000) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
              }
            }
 else {
              s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
            }
          }
        break;
case nodeIsolated:
      notifyNodeIsolated();
    break;
default :
  assert(false);
break;
}
}
 catch (Throwable e) {
s_logger.warn(""String_Node_Str"",e);
}
}
try {
Thread.sleep(1000);
}
 catch (InterruptedException e) {
}
}
}
}
;
}"
89475,"void invalidateRunSession(Connection conn,long id,long runid);","void invalidateRunSession(long id,long runid);"
89476,"void update(Connection conn,long id,long runId,State state,Date lastUpdate);","void update(long id,long runId,State state,Date lastUpdate);"
89477,"List<ManagementServerHostVO> getActiveList(Connection conn,Date cutTime);",List<ManagementServerHostVO> getActiveList(Date cutTime);
89478,"List<ManagementServerHostVO> getInactiveList(Connection conn,Date cutTime);",List<ManagementServerHostVO> getInactiveList(Date cutTime);
89479,"@Override public void invalidateRunSession(Connection conn,long id,long runid){
  PreparedStatement pstmt=null;
  try {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setLong(1,id);
    pstmt.setLong(2,runid);
    pstmt.executeUpdate();
    conn.commit();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
 finally {
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
  }
}","@Override public void invalidateRunSession(long id,long runid){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(""String_Node_Str"");
    pstmt.setLong(1,id);
    pstmt.setLong(2,runid);
    pstmt.executeUpdate();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
}"
89480,"@Override public void update(Connection conn,long id,long runId,State state,Date lastUpdate){
  PreparedStatement pstmt=null;
  try {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setString(1,state.toString());
    pstmt.setString(2,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),lastUpdate));
    pstmt.setLong(3,id);
    pstmt.setLong(4,runId);
    int count=pstmt.executeUpdate();
    conn.commit();
    if (count < 1) {
      throw new CloudRuntimeException(""String_Node_Str"",new ClusterInvalidSessionException(""String_Node_Str"" + runId + ""String_Node_Str""));
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
 finally {
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
  }
}","@Override public void update(long id,long runId,State state,Date lastUpdate){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(""String_Node_Str"");
    pstmt.setString(1,state.toString());
    pstmt.setString(2,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),lastUpdate));
    pstmt.setLong(3,id);
    pstmt.setLong(4,runId);
    int count=pstmt.executeUpdate();
    if (count < 1) {
      throw new CloudRuntimeException(""String_Node_Str"",new ClusterInvalidSessionException(""String_Node_Str"" + runId + ""String_Node_Str""));
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
}"
89481,"@Override @DB public boolean remove(Long id){
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    ManagementServerHostVO msHost=findById(id);
    msHost.setState(ManagementServerHost.State.Down);
    super.remove(id);
    txn.commit();
    return true;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    txn.rollback();
  }
  return false;
}","@Override @DB public boolean remove(Long id){
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    ManagementServerHostVO msHost=findById(id);
    msHost.setState(ManagementServerHost.State.Down);
    super.remove(id);
    txn.commit();
    return true;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  return false;
}"
89482,"@Override @SuppressWarnings(""String_Node_Str"") @DB public <M>List<M> customSearchIncludingRemoved(SearchCriteria<M> sc,final Filter filter){
  String clause=sc != null ? sc.getWhereClause() : null;
  if (clause != null && clause.length() == 0) {
    clause=null;
  }
  final StringBuilder str=createPartialSelectSql(sc,clause != null);
  if (clause != null) {
    str.append(clause);
  }
  Collection<JoinBuilder<SearchCriteria<?>>> joins=null;
  if (sc != null) {
    joins=sc.getJoins();
    if (joins != null) {
      addJoins(str,joins);
    }
  }
  List<Object> groupByValues=addGroupBy(str,sc);
  addFilter(str,filter);
  final String sql=str.toString();
  final Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql);
    int i=0;
    if (clause != null) {
      for (      final Pair<Attribute,Object> value : sc.getValues()) {
        prepareAttribute(++i,pstmt,value.first(),value.second());
      }
    }
    if (joins != null) {
      i=addJoinAttributes(i,pstmt,joins);
    }
    if (groupByValues != null) {
      for (      Object value : groupByValues) {
        pstmt.setObject(i++,value);
      }
    }
    ResultSet rs=pstmt.executeQuery();
    SelectType st=sc.getSelectType();
    ArrayList<M> results=new ArrayList<M>();
    List<Field> fields=sc.getSelectFields();
    while (rs.next()) {
      if (st == SelectType.Entity) {
        results.add((M)toEntityBean(rs,false));
      }
 else       if (st == SelectType.Fields || st == SelectType.Result) {
        M m=sc.getResultType().newInstance();
        for (int j=1; j <= fields.size(); j++) {
          setField(m,fields.get(j - 1),rs,j);
        }
        results.add(m);
      }
 else       if (st == SelectType.Single) {
        results.add(getObject(sc.getResultType(),rs,1));
      }
    }
    return results;
  }
 catch (  final SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt,e);
  }
catch (  final Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt,e);
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public <M>List<M> customSearchIncludingRemoved(SearchCriteria<M> sc,final Filter filter){
  String clause=sc != null ? sc.getWhereClause() : null;
  if (clause != null && clause.length() == 0) {
    clause=null;
  }
  final StringBuilder str=createPartialSelectSql(sc,clause != null);
  if (clause != null) {
    str.append(clause);
  }
  Collection<JoinBuilder<SearchCriteria<?>>> joins=null;
  if (sc != null) {
    joins=sc.getJoins();
    if (joins != null) {
      addJoins(str,joins);
    }
  }
  List<Object> groupByValues=addGroupBy(str,sc);
  addFilter(str,filter);
  final String sql=str.toString();
  final Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql);
    int i=0;
    if (clause != null) {
      for (      final Pair<Attribute,Object> value : sc.getValues()) {
        prepareAttribute(++i,pstmt,value.first(),value.second());
      }
    }
    if (joins != null) {
      i=addJoinAttributes(i,pstmt,joins);
    }
    if (groupByValues != null) {
      for (      Object value : groupByValues) {
        pstmt.setObject(i++,value);
      }
    }
    ResultSet rs=pstmt.executeQuery();
    SelectType st=sc.getSelectType();
    ArrayList<M> results=new ArrayList<M>();
    List<Field> fields=sc.getSelectFields();
    while (rs.next()) {
      if (st == SelectType.Entity) {
        results.add((M)toEntityBean(rs,false));
      }
 else       if (st == SelectType.Fields || st == SelectType.Result) {
        M m=sc.getResultType().newInstance();
        for (int j=1; j <= fields.size(); j++) {
          setField(m,fields.get(j - 1),rs,j);
        }
        results.add(m);
      }
 else       if (st == SelectType.Single) {
        results.add(getObject(sc.getResultType(),rs,1));
      }
    }
    return results;
  }
 catch (  final SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt,e);
  }
catch (  final Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt,e);
  }
}"
89483,"@Override public <K>K getNextInSequence(final Class<K> clazz,final String name){
}","@Override @DB(txn=false) public <K>K getNextInSequence(final Class<K> clazz,final String name){
}"
89484,"public static Transaction open(final String name,final short databaseId,final boolean forceDbChange){
  Transaction txn=tls.get();
  boolean isNew=false;
  if (txn == null) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + name);
    }
    txn=new Transaction(name,false,databaseId);
    tls.set(txn);
    isNew=true;
  }
 else   if (forceDbChange) {
    final short currentDbId=txn.getDatabaseId();
    if (currentDbId != databaseId) {
      txn.close(txn.getName());
      txn=new Transaction(name,false,databaseId);
      tls.set(txn);
      isNew=true;
    }
  }
  txn.takeOver(name,false);
  if (isNew) {
    s_logger.debug(""String_Node_Str"" + txn.getId());
    s_mbean.addTransaction(txn);
  }
  return txn;
}","public static Transaction open(final String name,final short databaseId,final boolean forceDbChange){
  Transaction txn=tls.get();
  boolean isNew=false;
  if (txn == null) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + name);
    }
    txn=new Transaction(name,false,databaseId);
    tls.set(txn);
    isNew=true;
  }
 else   if (forceDbChange) {
    final short currentDbId=txn.getDatabaseId();
    if (currentDbId != databaseId) {
      txn.close(txn.getName());
      txn=new Transaction(name,false,databaseId);
      tls.set(txn);
      isNew=true;
    }
  }
  txn.takeOver(name,false);
  if (isNew) {
    s_mbean.addTransaction(txn);
  }
  return txn;
}"
89485,"@Override public void run(){
  while (true) {
synchronized (_notificationMsgs) {
      try {
        _notificationMsgs.wait(1000);
      }
 catch (      InterruptedException e) {
      }
    }
    ClusterManagerMessage msg=null;
    while ((msg=getNextNotificationMessage()) != null) {
      try {
switch (msg.getMessageType()) {
case nodeAdded:
          if (msg.getNodes() != null && msg.getNodes().size() > 0) {
            Profiler profiler=new Profiler();
            profiler.start();
            notifyNodeJoined(msg.getNodes());
            profiler.stop();
            if (profiler.getDuration() > 1000) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
              }
            }
 else {
              s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
            }
          }
        break;
case nodeRemoved:
      if (msg.getNodes() != null && msg.getNodes().size() > 0) {
        Profiler profiler=new Profiler();
        profiler.start();
        notifyNodeLeft(msg.getNodes());
        profiler.stop();
        if (profiler.getDuration() > 1000) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
        }
      }
    break;
case nodeIsolated:
  notifyNodeIsolated();
break;
default :
assert(false);
break;
}
}
 catch (Throwable e) {
s_logger.warn(""String_Node_Str"",e);
}
}
try {
Thread.currentThread().sleep(1000);
}
 catch (InterruptedException e) {
}
}
}","@Override public void run(){
  while (true) {
synchronized (_notificationMsgs) {
      try {
        _notificationMsgs.wait(1000);
      }
 catch (      InterruptedException e) {
      }
    }
    ClusterManagerMessage msg=null;
    while ((msg=getNextNotificationMessage()) != null) {
      try {
switch (msg.getMessageType()) {
case nodeAdded:
          if (msg.getNodes() != null && msg.getNodes().size() > 0) {
            Profiler profiler=new Profiler();
            profiler.start();
            notifyNodeJoined(msg.getNodes());
            profiler.stop();
            if (profiler.getDuration() > 1000) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
              }
            }
 else {
              s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
            }
          }
        break;
case nodeRemoved:
      if (msg.getNodes() != null && msg.getNodes().size() > 0) {
        Profiler profiler=new Profiler();
        profiler.start();
        notifyNodeLeft(msg.getNodes());
        profiler.stop();
        if (profiler.getDuration() > 1000) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
          }
        }
 else {
          s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
        }
      }
    break;
case nodeIsolated:
  notifyNodeIsolated();
break;
default :
assert(false);
break;
}
}
 catch (Throwable e) {
s_logger.warn(""String_Node_Str"",e);
}
}
try {
Thread.sleep(1000);
}
 catch (InterruptedException e) {
}
}
}"
89486,"private void initPeerScan(Connection conn){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> inactiveList=_mshostDao.getInactiveList(conn,new Date(cutTime.getTime() - heartbeatThreshold));
  if (inactiveList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,inactiveList));
  }
}","private void initPeerScan(){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> inactiveList=_mshostDao.getInactiveList(new Date(cutTime.getTime() - heartbeatThreshold));
  if (inactiveList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,inactiveList));
  }
}"
89487,"private Runnable getHeartbeatTask(){
  return new Runnable(){
    @Override public void run(){
      try {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _mshostId);
        }
        Connection conn=getHeartbeatConnection();
        _mshostDao.update(conn,_mshostId,getCurrentRunId(),DateUtil.currentGMTTime());
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _mshostId);
        }
        if (!_peerScanInited) {
          _peerScanInited=true;
          initPeerScan(conn);
        }
        peerScan(conn);
      }
 catch (      CloudRuntimeException e) {
        s_logger.error(""String_Node_Str"",e.getCause());
        if (e.getCause() instanceof ClusterInvalidSessionException) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        if (isRootCauseConnectionRelated(e.getCause())) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        invalidHeartbeatConnection();
      }
catch (      Throwable e) {
        if (isRootCauseConnectionRelated(e.getCause())) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        s_logger.error(""String_Node_Str"",e);
      }
    }
  }
;
}","private Runnable getHeartbeatTask(){
  return new Runnable(){
    @Override public void run(){
      Transaction txn=Transaction.open(""String_Node_Str"");
      try {
        txn.transitToUserManagedConnection(getHeartbeatConnection());
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _mshostId);
        }
        _mshostDao.update(_mshostId,getCurrentRunId(),DateUtil.currentGMTTime());
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _mshostId);
        }
        if (!_peerScanInited) {
          _peerScanInited=true;
          initPeerScan();
        }
        peerScan();
      }
 catch (      CloudRuntimeException e) {
        s_logger.error(""String_Node_Str"",e.getCause());
        if (e.getCause() instanceof ClusterInvalidSessionException) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        if (isRootCauseConnectionRelated(e.getCause())) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        invalidHeartbeatConnection();
      }
catch (      Throwable e) {
        if (isRootCauseConnectionRelated(e.getCause())) {
          s_logger.error(""String_Node_Str"");
          queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeIsolated));
        }
        s_logger.error(""String_Node_Str"",e);
      }
 finally {
        txn.close(""String_Node_Str"");
      }
    }
  }
;
}"
89488,"private void peerScan(Connection conn){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> currentList=_mshostDao.getActiveList(conn,new Date(cutTime.getTime() - heartbeatThreshold));
  List<ManagementServerHostVO> removedNodeList=new ArrayList<ManagementServerHostVO>();
  List<ManagementServerHostVO> invalidatedNodeList=new ArrayList<ManagementServerHostVO>();
  if (_mshostId != null) {
    for (    Map.Entry<Long,ManagementServerHostVO> entry : activePeers.entrySet()) {
      ManagementServerHostVO current=getInListById(entry.getKey(),currentList);
      if (current == null) {
        if (entry.getKey().longValue() != _mshostId.longValue()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
          }
          removedNodeList.add(entry.getValue());
        }
      }
 else {
        if (current.getRunid() == 0) {
          if (entry.getKey().longValue() != _mshostId.longValue()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
            }
            invalidatedNodeList.add(entry.getValue());
          }
        }
 else {
          if (entry.getValue().getRunid() != current.getRunid()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
            }
            entry.getValue().setRunid(current.getRunid());
          }
        }
      }
    }
  }
  if (invalidatedNodeList.size() > 0) {
    for (    ManagementServerHostVO mshost : invalidatedNodeList) {
      activePeers.remove(mshost.getId());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,invalidatedNodeList));
  }
  Iterator<ManagementServerHostVO> it=removedNodeList.iterator();
  while (it.hasNext()) {
    ManagementServerHostVO mshost=it.next();
    if (!pingManagementNode(mshost)) {
      s_logger.warn(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      activePeers.remove(mshost.getId());
      _mshostDao.invalidateRunSession(conn,mshost.getId(),mshost.getRunid());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      it.remove();
    }
  }
  if (removedNodeList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,removedNodeList));
  }
  List<ManagementServerHostVO> newNodeList=new ArrayList<ManagementServerHostVO>();
  for (  ManagementServerHostVO mshost : currentList) {
    if (!activePeers.containsKey(mshost.getId())) {
      activePeers.put(mshost.getId(),mshost);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + mshost.getId() + ""String_Node_Str""+ mshost.getServiceIP());
      }
      newNodeList.add(mshost);
      try {
        JmxUtil.registerMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId(),new ClusterManagerMBeanImpl(this,mshost));
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + ExceptionUtil.toString(e));
      }
    }
  }
  if (newNodeList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeAdded,newNodeList));
  }
}","private void peerScan(){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> currentList=_mshostDao.getActiveList(new Date(cutTime.getTime() - heartbeatThreshold));
  List<ManagementServerHostVO> removedNodeList=new ArrayList<ManagementServerHostVO>();
  List<ManagementServerHostVO> invalidatedNodeList=new ArrayList<ManagementServerHostVO>();
  if (_mshostId != null) {
    for (    Map.Entry<Long,ManagementServerHostVO> entry : activePeers.entrySet()) {
      ManagementServerHostVO current=getInListById(entry.getKey(),currentList);
      if (current == null) {
        if (entry.getKey().longValue() != _mshostId.longValue()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
          }
          removedNodeList.add(entry.getValue());
        }
      }
 else {
        if (current.getRunid() == 0) {
          if (entry.getKey().longValue() != _mshostId.longValue()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
            }
            invalidatedNodeList.add(entry.getValue());
          }
        }
 else {
          if (entry.getValue().getRunid() != current.getRunid()) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
            }
            entry.getValue().setRunid(current.getRunid());
          }
        }
      }
    }
  }
  if (invalidatedNodeList.size() > 0) {
    for (    ManagementServerHostVO mshost : invalidatedNodeList) {
      activePeers.remove(mshost.getId());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,invalidatedNodeList));
  }
  Iterator<ManagementServerHostVO> it=removedNodeList.iterator();
  while (it.hasNext()) {
    ManagementServerHostVO mshost=it.next();
    if (!pingManagementNode(mshost)) {
      s_logger.warn(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      activePeers.remove(mshost.getId());
      _mshostDao.invalidateRunSession(mshost.getId(),mshost.getRunid());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      it.remove();
    }
  }
  if (removedNodeList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeRemoved,removedNodeList));
  }
  List<ManagementServerHostVO> newNodeList=new ArrayList<ManagementServerHostVO>();
  for (  ManagementServerHostVO mshost : currentList) {
    if (!activePeers.containsKey(mshost.getId())) {
      activePeers.put(mshost.getId(),mshost);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + mshost.getId() + ""String_Node_Str""+ mshost.getServiceIP());
      }
      newNodeList.add(mshost);
      try {
        JmxUtil.registerMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId(),new ClusterManagerMBeanImpl(this,mshost));
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + ExceptionUtil.toString(e));
      }
    }
  }
  if (newNodeList.size() > 0) {
    this.queueNotification(new ClusterManagerMessage(ClusterManagerMessage.MessageType.nodeAdded,newNodeList));
  }
}"
89489,"private Runnable getNotificationTask(){
  return new Runnable(){
    @Override public void run(){
      while (true) {
synchronized (_notificationMsgs) {
          try {
            _notificationMsgs.wait(1000);
          }
 catch (          InterruptedException e) {
          }
        }
        ClusterManagerMessage msg=null;
        while ((msg=getNextNotificationMessage()) != null) {
          try {
switch (msg.getMessageType()) {
case nodeAdded:
              if (msg.getNodes() != null && msg.getNodes().size() > 0) {
                Profiler profiler=new Profiler();
                profiler.start();
                notifyNodeJoined(msg.getNodes());
                profiler.stop();
                if (profiler.getDuration() > 1000) {
                  if (s_logger.isDebugEnabled()) {
                    s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
                  }
                }
 else {
                  s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
                }
              }
            break;
case nodeRemoved:
          if (msg.getNodes() != null && msg.getNodes().size() > 0) {
            Profiler profiler=new Profiler();
            profiler.start();
            notifyNodeLeft(msg.getNodes());
            profiler.stop();
            if (profiler.getDuration() > 1000) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
              }
            }
 else {
              s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
            }
          }
        break;
case nodeIsolated:
      notifyNodeIsolated();
    break;
default :
  assert(false);
break;
}
}
 catch (Throwable e) {
s_logger.warn(""String_Node_Str"",e);
}
}
try {
Thread.currentThread().sleep(1000);
}
 catch (InterruptedException e) {
}
}
}
}
;
}","private Runnable getNotificationTask(){
  return new Runnable(){
    @Override public void run(){
      while (true) {
synchronized (_notificationMsgs) {
          try {
            _notificationMsgs.wait(1000);
          }
 catch (          InterruptedException e) {
          }
        }
        ClusterManagerMessage msg=null;
        while ((msg=getNextNotificationMessage()) != null) {
          try {
switch (msg.getMessageType()) {
case nodeAdded:
              if (msg.getNodes() != null && msg.getNodes().size() > 0) {
                Profiler profiler=new Profiler();
                profiler.start();
                notifyNodeJoined(msg.getNodes());
                profiler.stop();
                if (profiler.getDuration() > 1000) {
                  if (s_logger.isDebugEnabled()) {
                    s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
                  }
                }
 else {
                  s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
                }
              }
            break;
case nodeRemoved:
          if (msg.getNodes() != null && msg.getNodes().size() > 0) {
            Profiler profiler=new Profiler();
            profiler.start();
            notifyNodeLeft(msg.getNodes());
            profiler.stop();
            if (profiler.getDuration() > 1000) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
              }
            }
 else {
              s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
            }
          }
        break;
case nodeIsolated:
      notifyNodeIsolated();
    break;
default :
  assert(false);
break;
}
}
 catch (Throwable e) {
s_logger.warn(""String_Node_Str"",e);
}
}
try {
Thread.sleep(1000);
}
 catch (InterruptedException e) {
}
}
}
}
;
}"
89490,"void invalidateRunSession(Connection conn,long id,long runid);","void invalidateRunSession(long id,long runid);"
89491,"void update(Connection conn,long id,long runId,State state,Date lastUpdate);","void update(long id,long runId,State state,Date lastUpdate);"
89492,"List<ManagementServerHostVO> getActiveList(Connection conn,Date cutTime);",List<ManagementServerHostVO> getActiveList(Date cutTime);
89493,"List<ManagementServerHostVO> getInactiveList(Connection conn,Date cutTime);",List<ManagementServerHostVO> getInactiveList(Date cutTime);
89494,"@Override public void invalidateRunSession(Connection conn,long id,long runid){
  PreparedStatement pstmt=null;
  try {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setLong(1,id);
    pstmt.setLong(2,runid);
    pstmt.executeUpdate();
    conn.commit();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
 finally {
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
  }
}","@Override public void invalidateRunSession(long id,long runid){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(""String_Node_Str"");
    pstmt.setLong(1,id);
    pstmt.setLong(2,runid);
    pstmt.executeUpdate();
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
}"
89495,"@Override public void update(Connection conn,long id,long runId,State state,Date lastUpdate){
  PreparedStatement pstmt=null;
  try {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setString(1,state.toString());
    pstmt.setString(2,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),lastUpdate));
    pstmt.setLong(3,id);
    pstmt.setLong(4,runId);
    int count=pstmt.executeUpdate();
    conn.commit();
    if (count < 1) {
      throw new CloudRuntimeException(""String_Node_Str"",new ClusterInvalidSessionException(""String_Node_Str"" + runId + ""String_Node_Str""));
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
 finally {
    if (pstmt != null) {
      try {
        pstmt.close();
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"",e);
      }
    }
  }
}","@Override public void update(long id,long runId,State state,Date lastUpdate){
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(""String_Node_Str"");
    pstmt.setString(1,state.toString());
    pstmt.setString(2,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),lastUpdate));
    pstmt.setLong(3,id);
    pstmt.setLong(4,runId);
    int count=pstmt.executeUpdate();
    if (count < 1) {
      throw new CloudRuntimeException(""String_Node_Str"",new ClusterInvalidSessionException(""String_Node_Str"" + runId + ""String_Node_Str""));
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
}"
89496,"@Override @DB public boolean remove(Long id){
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    ManagementServerHostVO msHost=findById(id);
    msHost.setState(ManagementServerHost.State.Down);
    super.remove(id);
    txn.commit();
    return true;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    txn.rollback();
  }
  return false;
}","@Override @DB public boolean remove(Long id){
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    ManagementServerHostVO msHost=findById(id);
    msHost.setState(ManagementServerHost.State.Down);
    super.remove(id);
    txn.commit();
    return true;
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  return false;
}"
89497,"@Override @SuppressWarnings(""String_Node_Str"") @DB public <M>List<M> customSearchIncludingRemoved(SearchCriteria<M> sc,final Filter filter){
  String clause=sc != null ? sc.getWhereClause() : null;
  if (clause != null && clause.length() == 0) {
    clause=null;
  }
  final StringBuilder str=createPartialSelectSql(sc,clause != null);
  if (clause != null) {
    str.append(clause);
  }
  Collection<JoinBuilder<SearchCriteria<?>>> joins=null;
  if (sc != null) {
    joins=sc.getJoins();
    if (joins != null) {
      addJoins(str,joins);
    }
  }
  List<Object> groupByValues=addGroupBy(str,sc);
  addFilter(str,filter);
  final String sql=str.toString();
  final Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql);
    int i=0;
    if (clause != null) {
      for (      final Pair<Attribute,Object> value : sc.getValues()) {
        prepareAttribute(++i,pstmt,value.first(),value.second());
      }
    }
    if (joins != null) {
      i=addJoinAttributes(i,pstmt,joins);
    }
    if (groupByValues != null) {
      for (      Object value : groupByValues) {
        pstmt.setObject(i++,value);
      }
    }
    ResultSet rs=pstmt.executeQuery();
    SelectType st=sc.getSelectType();
    ArrayList<M> results=new ArrayList<M>();
    List<Field> fields=sc.getSelectFields();
    while (rs.next()) {
      if (st == SelectType.Entity) {
        results.add((M)toEntityBean(rs,false));
      }
 else       if (st == SelectType.Fields || st == SelectType.Result) {
        M m=sc.getResultType().newInstance();
        for (int j=1; j <= fields.size(); j++) {
          setField(m,fields.get(j - 1),rs,j);
        }
        results.add(m);
      }
 else       if (st == SelectType.Single) {
        results.add(getObject(sc.getResultType(),rs,1));
      }
    }
    return results;
  }
 catch (  final SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt,e);
  }
catch (  final Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt,e);
  }
}","@Override @SuppressWarnings(""String_Node_Str"") public <M>List<M> customSearchIncludingRemoved(SearchCriteria<M> sc,final Filter filter){
  String clause=sc != null ? sc.getWhereClause() : null;
  if (clause != null && clause.length() == 0) {
    clause=null;
  }
  final StringBuilder str=createPartialSelectSql(sc,clause != null);
  if (clause != null) {
    str.append(clause);
  }
  Collection<JoinBuilder<SearchCriteria<?>>> joins=null;
  if (sc != null) {
    joins=sc.getJoins();
    if (joins != null) {
      addJoins(str,joins);
    }
  }
  List<Object> groupByValues=addGroupBy(str,sc);
  addFilter(str,filter);
  final String sql=str.toString();
  final Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=null;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql);
    int i=0;
    if (clause != null) {
      for (      final Pair<Attribute,Object> value : sc.getValues()) {
        prepareAttribute(++i,pstmt,value.first(),value.second());
      }
    }
    if (joins != null) {
      i=addJoinAttributes(i,pstmt,joins);
    }
    if (groupByValues != null) {
      for (      Object value : groupByValues) {
        pstmt.setObject(i++,value);
      }
    }
    ResultSet rs=pstmt.executeQuery();
    SelectType st=sc.getSelectType();
    ArrayList<M> results=new ArrayList<M>();
    List<Field> fields=sc.getSelectFields();
    while (rs.next()) {
      if (st == SelectType.Entity) {
        results.add((M)toEntityBean(rs,false));
      }
 else       if (st == SelectType.Fields || st == SelectType.Result) {
        M m=sc.getResultType().newInstance();
        for (int j=1; j <= fields.size(); j++) {
          setField(m,fields.get(j - 1),rs,j);
        }
        results.add(m);
      }
 else       if (st == SelectType.Single) {
        results.add(getObject(sc.getResultType(),rs,1));
      }
    }
    return results;
  }
 catch (  final SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt,e);
  }
catch (  final Throwable e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt,e);
  }
}"
89498,"@Override public <K>K getNextInSequence(final Class<K> clazz,final String name){
}","@Override @DB(txn=false) public <K>K getNextInSequence(final Class<K> clazz,final String name){
}"
89499,"public static Transaction open(final String name,final short databaseId,final boolean forceDbChange){
  Transaction txn=tls.get();
  boolean isNew=false;
  if (txn == null) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + name);
    }
    txn=new Transaction(name,false,databaseId);
    tls.set(txn);
    isNew=true;
  }
 else   if (forceDbChange) {
    final short currentDbId=txn.getDatabaseId();
    if (currentDbId != databaseId) {
      txn.close(txn.getName());
      txn=new Transaction(name,false,databaseId);
      tls.set(txn);
      isNew=true;
    }
  }
  txn.takeOver(name,false);
  if (isNew) {
    s_logger.debug(""String_Node_Str"" + txn.getId());
    s_mbean.addTransaction(txn);
  }
  return txn;
}","public static Transaction open(final String name,final short databaseId,final boolean forceDbChange){
  Transaction txn=tls.get();
  boolean isNew=false;
  if (txn == null) {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + name);
    }
    txn=new Transaction(name,false,databaseId);
    tls.set(txn);
    isNew=true;
  }
 else   if (forceDbChange) {
    final short currentDbId=txn.getDatabaseId();
    if (currentDbId != databaseId) {
      txn.close(txn.getName());
      txn=new Transaction(name,false,databaseId);
      tls.set(txn);
      isNew=true;
    }
  }
  txn.takeOver(name,false);
  if (isNew) {
    s_mbean.addTransaction(txn);
  }
  return txn;
}"
89500,"private void scanDirectAgentToLoad(){
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  long cutSeconds=(System.currentTimeMillis() >> 10) - (_pingInterval * 3);
  List<HostVO> hosts=_hostDao.findDirectAgentToLoad(cutSeconds,_loadSize);
  if (hosts != null && hosts.size() == _loadSize) {
    Long clusterId=hosts.get((int)(_loadSize - 1)).getClusterId();
    if (clusterId != null) {
      for (int i=(int)(_loadSize - 1); i > 0; i--) {
        if (hosts.get(i).getClusterId() == clusterId) {
          hosts.remove(i);
        }
 else {
          break;
        }
      }
    }
  }
  if (hosts != null && hosts.size() > 0) {
    s_logger.debug(""String_Node_Str"" + hosts.size() + ""String_Node_Str"");
    for (    HostVO host : hosts) {
      try {
        AgentAttache agentattache=findAttache(host.getId());
        if (agentattache != null) {
          if (agentattache.forForward()) {
            if (s_logger.isInfoEnabled()) {
              s_logger.info(host + ""String_Node_Str"");
            }
            removeAgent(agentattache,Status.Disconnected);
          }
 else {
            continue;
          }
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"");
        }
        loadDirectlyConnectedHost(host,false);
      }
 catch (      Throwable e) {
        s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str""+ e.toString());
      }
    }
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
}","private void scanDirectAgentToLoad(){
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  long cutSeconds=(System.currentTimeMillis() >> 10) - (_pingInterval * 3);
  List<HostVO> hosts=_hostDao.findDirectAgentToLoad(cutSeconds,_loadSize);
  if (hosts != null && hosts.size() == _loadSize) {
    if (hosts.size() > 1 && hosts.get(0).getClusterId().longValue() != hosts.get(hosts.size() - 1).getClusterId().longValue()) {
      Long clusterId=hosts.get((int)(_loadSize - 1)).getClusterId();
      if (clusterId != null) {
        for (int i=(int)(_loadSize - 1); i > 0; i--) {
          if (hosts.get(i).getClusterId().longValue() == clusterId.longValue()) {
            hosts.remove(i);
          }
 else {
            break;
          }
        }
      }
    }
  }
  if (hosts != null && hosts.size() > 0) {
    s_logger.debug(""String_Node_Str"" + hosts.size() + ""String_Node_Str"");
    for (    HostVO host : hosts) {
      try {
        AgentAttache agentattache=findAttache(host.getId());
        if (agentattache != null) {
          if (agentattache.forForward()) {
            if (s_logger.isInfoEnabled()) {
              s_logger.info(host + ""String_Node_Str"");
            }
            removeAgent(agentattache,Status.Disconnected);
          }
 else {
            continue;
          }
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"");
        }
        loadDirectlyConnectedHost(host,false);
      }
 catch (      Throwable e) {
        s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"",e);
      }
    }
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
}"
89501,"ListResponse<TemplateResponse> createIsoResponses(VirtualMachineTemplate template,Long zoneId);","List<TemplateResponse> createIsoResponses(long isoId,long zoneId,boolean readyOnly);"
89502,"@Override public void execute() throws ResourceAllocationException {
  try {
    VirtualMachineTemplate template=_templateService.copyTemplate(this);
    TemplateResponse templateResponse=_responseGenerator.createTemplateResponse(template,destZoneId);
    templateResponse.setResponseName(getCommandName());
    this.setResponseObject(templateResponse);
  }
 catch (  StorageUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
}","@Override public void execute() throws ResourceAllocationException {
  try {
    VirtualMachineTemplate template=_templateService.copyTemplate(this);
    if (template != null) {
      ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
      List<TemplateResponse> templateResponses=_responseGenerator.createTemplateResponses(template.getId(),getDestinationZoneId(),false);
      response.setResponses(templateResponses);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  StorageUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
}"
89503,"@Override public void execute(){
  VirtualMachineTemplate template=_userVmService.createPrivateTemplate(this);
  if (template != null) {
    TemplateResponse response=_responseGenerator.createTemplateResponse(template,snapshotId,volumeId);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute(){
  VirtualMachineTemplate template=_userVmService.createPrivateTemplate(this);
  if (template != null) {
    ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
    List<TemplateResponse> templateResponses=_responseGenerator.createTemplateResponses(template.getId(),snapshotId,volumeId,false);
    response.setResponses(templateResponses);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}"
89504,"@Override public void execute(){
  Set<Pair<Long,Long>> isoZonePairSet=_mgr.listIsos(this);
  TemplateFilter isoFilterObj=null;
  try {
    if (isoFilter == null) {
      isoFilterObj=TemplateFilter.selfexecutable;
    }
 else {
      isoFilterObj=TemplateFilter.valueOf(isoFilter);
    }
  }
 catch (  IllegalArgumentException e) {
    isoFilterObj=TemplateFilter.selfexecutable;
  }
  boolean isAdmin=false;
  Account account=UserContext.current().getCaller();
  if ((account == null) || BaseCmd.isAdmin(account.getType())) {
    isAdmin=true;
  }
  ListResponse<TemplateResponse> response=_responseGenerator.createIsoResponse(isoZonePairSet,isAdmin,account,bootable,listInReadyState());
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}","@Override public void execute(){
  Set<Pair<Long,Long>> isoZonePairSet=_mgr.listIsos(this);
  ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
  List<TemplateResponse> templateResponses=new ArrayList<TemplateResponse>();
  for (  Pair<Long,Long> iso : isoZonePairSet) {
    List<TemplateResponse> responses=new ArrayList<TemplateResponse>();
    responses=_responseGenerator.createIsoResponses(iso.first(),iso.second(),listInReadyState());
    templateResponses.addAll(responses);
  }
  response.setResponses(templateResponses);
  response.setResponseName(getCommandName());
}"
89505,"public boolean listInReadyState(){
  return true;
}","public boolean listInReadyState(){
  Account account=UserContext.current().getCaller();
  boolean isAccountSpecific=(account == null || isAdmin(account.getType())) && (getAccountName() != null) && (getDomainId() != null);
  TemplateFilter templateFilter=TemplateFilter.valueOf(getIsoFilter());
  boolean onlyReady=(templateFilter == TemplateFilter.featured) || (templateFilter == TemplateFilter.selfexecutable) || (templateFilter == TemplateFilter.sharedexecutable)|| (templateFilter == TemplateFilter.executable && isAccountSpecific)|| (templateFilter == TemplateFilter.community);
  return onlyReady;
}"
89506,"@Override public void execute(){
  Set<Pair<Long,Long>> templateZonePairSet=_mgr.listTemplates(this);
  boolean isAdmin=false;
  Account account=UserContext.current().getCaller();
  if ((account == null) || BaseCmd.isAdmin(account.getType())) {
    isAdmin=true;
  }
  ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
  List<TemplateResponse> templateResponses=new ArrayList<TemplateResponse>();
  for (  Pair<Long,Long> template : templateZonePairSet) {
    _responseGenerator.createTemplateResponse(templateResponses,template,isAdmin,account,listInReadyState());
  }
  response.setResponses(templateResponses);
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}","@Override public void execute(){
  Set<Pair<Long,Long>> templateZonePairSet=_mgr.listTemplates(this);
  ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
  List<TemplateResponse> templateResponses=new ArrayList<TemplateResponse>();
  for (  Pair<Long,Long> template : templateZonePairSet) {
    List<TemplateResponse> responses=new ArrayList<TemplateResponse>();
    responses=_responseGenerator.createTemplateResponses(template.first(),template.second(),listInReadyState());
    templateResponses.addAll(responses);
  }
  response.setResponses(templateResponses);
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}"
89507,"public boolean listInReadyState(){
  return true;
}","public boolean listInReadyState(){
  Account account=UserContext.current().getCaller();
  boolean isAccountSpecific=(account == null || isAdmin(account.getType())) && (getAccountName() != null) && (getDomainId() != null);
  TemplateFilter templateFilter=TemplateFilter.valueOf(getTemplateFilter());
  boolean onlyReady=(templateFilter == TemplateFilter.featured) || (templateFilter == TemplateFilter.selfexecutable) || (templateFilter == TemplateFilter.sharedexecutable)|| (templateFilter == TemplateFilter.executable && isAccountSpecific)|| (templateFilter == TemplateFilter.community);
  return onlyReady;
}"
89508,"@Override public void execute() throws ResourceAllocationException {
  VirtualMachineTemplate template=_templateService.registerIso(this);
  if (template != null) {
    ListResponse<TemplateResponse> response=_responseGenerator.createIsoResponses(template,zoneId);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute() throws ResourceAllocationException {
  VirtualMachineTemplate template=_templateService.registerIso(this);
  if (template != null) {
    ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
    List<TemplateResponse> templateResponses=_responseGenerator.createIsoResponses(template.getId(),zoneId,false);
    response.setResponses(templateResponses);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}"
89509,"@Override public void execute() throws ResourceAllocationException {
  try {
    VirtualMachineTemplate template=_templateService.registerTemplate(this);
    if (template != null) {
      ListResponse<TemplateResponse> response=_responseGenerator.createTemplateResponse2(template,zoneId);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  URISyntaxException ex1) {
    s_logger.info(ex1);
    throw new ServerApiException(BaseCmd.PARAM_ERROR,ex1.getMessage());
  }
}","@Override public void execute() throws ResourceAllocationException {
  try {
    VirtualMachineTemplate template=_templateService.registerTemplate(this);
    if (template != null) {
      ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
      List<TemplateResponse> templateResponses=_responseGenerator.createTemplateResponses(template.getId(),zoneId,false);
      response.setResponses(templateResponses);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  URISyntaxException ex1) {
    s_logger.info(ex1);
    throw new ServerApiException(BaseCmd.PARAM_ERROR,ex1.getMessage());
  }
}"
89510,"public static VMTemplateHostVO findTemplateHostRef(long templateId,long zoneId){
  VMTemplateVO vmTemplate=findTemplateById(templateId);
  if (vmTemplate.getHypervisorType() == HypervisorType.BareMetal) {
    return _templateHostDao.listByTemplateId(templateId).get(0);
  }
 else {
    return _storageMgr.getTemplateHostRef(zoneId,templateId);
  }
}","public static VMTemplateHostVO findTemplateHostRef(long templateId,long zoneId,boolean readyOnly){
  VMTemplateVO vmTemplate=findTemplateById(templateId);
  if (vmTemplate.getHypervisorType() == HypervisorType.BareMetal) {
    return _templateHostDao.listByTemplateId(templateId).get(0);
  }
 else {
    return _storageMgr.getTemplateHostRef(zoneId,templateId,readyOnly);
  }
}"
89511,"ListResponse<TemplateResponse> createIsoResponses(VirtualMachineTemplate template,Long zoneId);","List<TemplateResponse> createIsoResponses(long isoId,long zoneId,boolean readyOnly);"
89512,"@Override public void execute() throws ResourceAllocationException {
  try {
    VirtualMachineTemplate template=_templateService.copyTemplate(this);
    TemplateResponse templateResponse=_responseGenerator.createTemplateResponse(template,destZoneId);
    templateResponse.setResponseName(getCommandName());
    this.setResponseObject(templateResponse);
  }
 catch (  StorageUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
}","@Override public void execute() throws ResourceAllocationException {
  try {
    VirtualMachineTemplate template=_templateService.copyTemplate(this);
    if (template != null) {
      ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
      List<TemplateResponse> templateResponses=_responseGenerator.createTemplateResponses(template.getId(),getDestinationZoneId(),false);
      response.setResponses(templateResponses);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  StorageUnavailableException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,ex.getMessage());
  }
}"
89513,"@Override public void execute(){
  VirtualMachineTemplate template=_userVmService.createPrivateTemplate(this);
  if (template != null) {
    TemplateResponse response=_responseGenerator.createTemplateResponse(template,snapshotId,volumeId);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute(){
  VirtualMachineTemplate template=_userVmService.createPrivateTemplate(this);
  if (template != null) {
    ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
    List<TemplateResponse> templateResponses=_responseGenerator.createTemplateResponses(template.getId(),snapshotId,volumeId,false);
    response.setResponses(templateResponses);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}"
89514,"@Override public void execute(){
  Set<Pair<Long,Long>> isoZonePairSet=_mgr.listIsos(this);
  TemplateFilter isoFilterObj=null;
  try {
    if (isoFilter == null) {
      isoFilterObj=TemplateFilter.selfexecutable;
    }
 else {
      isoFilterObj=TemplateFilter.valueOf(isoFilter);
    }
  }
 catch (  IllegalArgumentException e) {
    isoFilterObj=TemplateFilter.selfexecutable;
  }
  boolean isAdmin=false;
  Account account=UserContext.current().getCaller();
  if ((account == null) || BaseCmd.isAdmin(account.getType())) {
    isAdmin=true;
  }
  ListResponse<TemplateResponse> response=_responseGenerator.createIsoResponse(isoZonePairSet,isAdmin,account,bootable,listInReadyState());
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}","@Override public void execute(){
  Set<Pair<Long,Long>> isoZonePairSet=_mgr.listIsos(this);
  ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
  List<TemplateResponse> templateResponses=new ArrayList<TemplateResponse>();
  for (  Pair<Long,Long> iso : isoZonePairSet) {
    List<TemplateResponse> responses=new ArrayList<TemplateResponse>();
    responses=_responseGenerator.createIsoResponses(iso.first(),iso.second(),listInReadyState());
    templateResponses.addAll(responses);
  }
  response.setResponses(templateResponses);
  response.setResponseName(getCommandName());
}"
89515,"public boolean listInReadyState(){
  return true;
}","public boolean listInReadyState(){
  Account account=UserContext.current().getCaller();
  boolean isAccountSpecific=(account == null || isAdmin(account.getType())) && (getAccountName() != null) && (getDomainId() != null);
  TemplateFilter templateFilter=TemplateFilter.valueOf(getIsoFilter());
  boolean onlyReady=(templateFilter == TemplateFilter.featured) || (templateFilter == TemplateFilter.selfexecutable) || (templateFilter == TemplateFilter.sharedexecutable)|| (templateFilter == TemplateFilter.executable && isAccountSpecific)|| (templateFilter == TemplateFilter.community);
  return onlyReady;
}"
89516,"@Override public void execute(){
  Set<Pair<Long,Long>> templateZonePairSet=_mgr.listTemplates(this);
  boolean isAdmin=false;
  Account account=UserContext.current().getCaller();
  if ((account == null) || BaseCmd.isAdmin(account.getType())) {
    isAdmin=true;
  }
  ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
  List<TemplateResponse> templateResponses=new ArrayList<TemplateResponse>();
  for (  Pair<Long,Long> template : templateZonePairSet) {
    _responseGenerator.createTemplateResponse(templateResponses,template,isAdmin,account,listInReadyState());
  }
  response.setResponses(templateResponses);
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}","@Override public void execute(){
  Set<Pair<Long,Long>> templateZonePairSet=_mgr.listTemplates(this);
  ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
  List<TemplateResponse> templateResponses=new ArrayList<TemplateResponse>();
  for (  Pair<Long,Long> template : templateZonePairSet) {
    List<TemplateResponse> responses=new ArrayList<TemplateResponse>();
    responses=_responseGenerator.createTemplateResponses(template.first(),template.second(),listInReadyState());
    templateResponses.addAll(responses);
  }
  response.setResponses(templateResponses);
  response.setResponseName(getCommandName());
  this.setResponseObject(response);
}"
89517,"public boolean listInReadyState(){
  return true;
}","public boolean listInReadyState(){
  Account account=UserContext.current().getCaller();
  boolean isAccountSpecific=(account == null || isAdmin(account.getType())) && (getAccountName() != null) && (getDomainId() != null);
  TemplateFilter templateFilter=TemplateFilter.valueOf(getTemplateFilter());
  boolean onlyReady=(templateFilter == TemplateFilter.featured) || (templateFilter == TemplateFilter.selfexecutable) || (templateFilter == TemplateFilter.sharedexecutable)|| (templateFilter == TemplateFilter.executable && isAccountSpecific)|| (templateFilter == TemplateFilter.community);
  return onlyReady;
}"
89518,"@Override public void execute() throws ResourceAllocationException {
  VirtualMachineTemplate template=_templateService.registerIso(this);
  if (template != null) {
    ListResponse<TemplateResponse> response=_responseGenerator.createIsoResponses(template,zoneId);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute() throws ResourceAllocationException {
  VirtualMachineTemplate template=_templateService.registerIso(this);
  if (template != null) {
    ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
    List<TemplateResponse> templateResponses=_responseGenerator.createIsoResponses(template.getId(),zoneId,false);
    response.setResponses(templateResponses);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}"
89519,"@Override public void execute() throws ResourceAllocationException {
  try {
    VirtualMachineTemplate template=_templateService.registerTemplate(this);
    if (template != null) {
      ListResponse<TemplateResponse> response=_responseGenerator.createTemplateResponse2(template,zoneId);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  URISyntaxException ex1) {
    s_logger.info(ex1);
    throw new ServerApiException(BaseCmd.PARAM_ERROR,ex1.getMessage());
  }
}","@Override public void execute() throws ResourceAllocationException {
  try {
    VirtualMachineTemplate template=_templateService.registerTemplate(this);
    if (template != null) {
      ListResponse<TemplateResponse> response=new ListResponse<TemplateResponse>();
      List<TemplateResponse> templateResponses=_responseGenerator.createTemplateResponses(template.getId(),zoneId,false);
      response.setResponses(templateResponses);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  URISyntaxException ex1) {
    s_logger.info(ex1);
    throw new ServerApiException(BaseCmd.PARAM_ERROR,ex1.getMessage());
  }
}"
89520,"public static VMTemplateHostVO findTemplateHostRef(long templateId,long zoneId){
  VMTemplateVO vmTemplate=findTemplateById(templateId);
  if (vmTemplate.getHypervisorType() == HypervisorType.BareMetal) {
    return _templateHostDao.listByTemplateId(templateId).get(0);
  }
 else {
    return _storageMgr.getTemplateHostRef(zoneId,templateId);
  }
}","public static VMTemplateHostVO findTemplateHostRef(long templateId,long zoneId,boolean readyOnly){
  VMTemplateVO vmTemplate=findTemplateById(templateId);
  if (vmTemplate.getHypervisorType() == HypervisorType.BareMetal) {
    return _templateHostDao.listByTemplateId(templateId).get(0);
  }
 else {
    return _storageMgr.getTemplateHostRef(zoneId,templateId,readyOnly);
  }
}"
89521,"private void scanDirectAgentToLoad(){
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  long cutSeconds=(System.currentTimeMillis() >> 10) - (_pingInterval * 3);
  List<HostVO> hosts=_hostDao.findDirectAgentToLoad(cutSeconds,_loadSize);
  if (hosts != null && hosts.size() == _loadSize) {
    Long clusterId=hosts.get((int)(_loadSize - 1)).getClusterId();
    if (clusterId != null) {
      for (int i=(int)(_loadSize - 1); i > 0; i--) {
        if (hosts.get(i).getClusterId() == clusterId) {
          hosts.remove(i);
        }
 else {
          break;
        }
      }
    }
  }
  if (hosts != null && hosts.size() > 0) {
    s_logger.debug(""String_Node_Str"" + hosts.size() + ""String_Node_Str"");
    for (    HostVO host : hosts) {
      try {
        AgentAttache agentattache=findAttache(host.getId());
        if (agentattache != null) {
          if (agentattache.forForward()) {
            if (s_logger.isInfoEnabled()) {
              s_logger.info(host + ""String_Node_Str"");
            }
            removeAgent(agentattache,Status.Disconnected);
          }
 else {
            continue;
          }
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"");
        }
        loadDirectlyConnectedHost(host,false);
      }
 catch (      Throwable e) {
        s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str""+ e.toString());
      }
    }
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
}","private void scanDirectAgentToLoad(){
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
  long cutSeconds=(System.currentTimeMillis() >> 10) - (_pingInterval * 3);
  List<HostVO> hosts=_hostDao.findDirectAgentToLoad(cutSeconds,_loadSize);
  if (hosts != null && hosts.size() == _loadSize) {
    if (hosts.size() > 1 && hosts.get(0).getClusterId().longValue() != hosts.get(hosts.size() - 1).getClusterId().longValue()) {
      Long clusterId=hosts.get((int)(_loadSize - 1)).getClusterId();
      if (clusterId != null) {
        for (int i=(int)(_loadSize - 1); i > 0; i--) {
          if (hosts.get(i).getClusterId().longValue() == clusterId.longValue()) {
            hosts.remove(i);
          }
 else {
            break;
          }
        }
      }
    }
  }
  if (hosts != null && hosts.size() > 0) {
    s_logger.debug(""String_Node_Str"" + hosts.size() + ""String_Node_Str"");
    for (    HostVO host : hosts) {
      try {
        AgentAttache agentattache=findAttache(host.getId());
        if (agentattache != null) {
          if (agentattache.forForward()) {
            if (s_logger.isInfoEnabled()) {
              s_logger.info(host + ""String_Node_Str"");
            }
            removeAgent(agentattache,Status.Disconnected);
          }
 else {
            continue;
          }
        }
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"");
        }
        loadDirectlyConnectedHost(host,false);
      }
 catch (      Throwable e) {
        s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"",e);
      }
    }
  }
  if (s_logger.isTraceEnabled()) {
    s_logger.trace(""String_Node_Str"");
  }
}"
89522,"@Override public String[] getUpgradableVersionRange(){
  return new String[]{""String_Node_Str""};
}","@Override public String[] getUpgradableVersionRange(){
  return new String[]{""String_Node_Str"",""String_Node_Str""};
}"
89523,"@Override public String[] getUpgradableVersionRange(){
  return new String[]{""String_Node_Str""};
}","@Override public String[] getUpgradableVersionRange(){
  return new String[]{""String_Node_Str"",""String_Node_Str""};
}"
89524,"@DB protected DomainRouterVO findOrCreateDhcpServer(Network guestNetwork,DeployDestination dest,Account owner) throws InsufficientCapacityException, ConcurrentOperationException {
  DataCenterDeployment plan=null;
  long dcId=dest.getDataCenter().getId();
  DataCenter dc=dest.getDataCenter();
  DomainRouterVO router=null;
  Long podId=dest.getPod().getId();
  if ((dc.getNetworkType() == NetworkType.Basic || guestNetwork.isSecurityGroupEnabled()) && guestNetwork.getTrafficType() == TrafficType.Guest) {
    router=_routerDao.findByNetworkAndPod(guestNetwork.getId(),podId);
    plan=new DataCenterDeployment(dcId,podId,null,null,null);
  }
 else {
    router=_routerDao.findByNetwork(guestNetwork.getId());
    plan=new DataCenterDeployment(dcId);
  }
  if (router != null) {
    return router;
  }
  long id=_routerDao.getNextInSequence(Long.class,""String_Node_Str"");
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork);
  NetworkOfferingVO controlOffering=offerings.get(0);
  NetworkVO controlConfig=_networkMgr.setupNetwork(_systemAcct,controlOffering,plan,null,null,false,false).get(0);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(3);
  NicProfile gatewayNic=new NicProfile();
  gatewayNic.setDefaultNic(true);
  networks.add(new Pair<NetworkVO,NicProfile>((NetworkVO)guestNetwork,gatewayNic));
  networks.add(new Pair<NetworkVO,NicProfile>(controlConfig,null));
  VMTemplateVO template=_templateDao.findRoutingTemplate(dest.getCluster().getHypervisorType());
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Network network=_networkDao.lockRow(guestNetwork.getId(),true);
  if (network == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + guestNetwork.getId());
  }
  if ((dc.getNetworkType() == NetworkType.Basic || guestNetwork.isSecurityGroupEnabled()) && guestNetwork.getTrafficType() == TrafficType.Guest) {
    router=_routerDao.findByNetworkAndPod(guestNetwork.getId(),podId);
    plan=new DataCenterDeployment(dcId,podId,null,null,null);
  }
 else {
    router=_routerDao.findByNetwork(guestNetwork.getId());
    plan=new DataCenterDeployment(dcId);
  }
  if (router != null) {
    return router;
  }
  router=new DomainRouterVO(id,_offering.getId(),VirtualMachineName.getRouterName(id,_instance),template.getId(),template.getHypervisorType(),template.getGuestOSId(),owner.getDomainId(),owner.getId(),guestNetwork.getId(),_offering.getOfferHA());
  router.setRole(Role.DHCP_USERDATA);
  router=_itMgr.allocate(router,template,_offering,networks,plan,null,owner);
  UserStatisticsVO stats=_userStatsDao.findBy(owner.getId(),dcId,router.getNetworkId(),null,router.getId(),router.getType().toString());
  if (stats == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + owner.getId() + ""String_Node_Str""+ router.getId());
    }
    stats=new UserStatisticsVO(owner.getId(),dcId,null,router.getId(),router.getType().toString(),guestNetwork.getId());
    _userStatsDao.persist(stats);
  }
  txn.commit();
  return router;
}","@DB protected DomainRouterVO findOrCreateDhcpServer(Network guestNetwork,DeployDestination dest,Account owner) throws InsufficientCapacityException, ConcurrentOperationException {
  DataCenterDeployment plan=null;
  long dcId=dest.getDataCenter().getId();
  DataCenter dc=dest.getDataCenter();
  DomainRouterVO router=null;
  Long podId=dest.getPod().getId();
  if ((dc.getNetworkType() == NetworkType.Basic || guestNetwork.isSecurityGroupEnabled()) && guestNetwork.getTrafficType() == TrafficType.Guest) {
    router=_routerDao.findByNetworkAndPod(guestNetwork.getId(),podId);
    plan=new DataCenterDeployment(dcId,podId,null,null,null);
  }
 else {
    router=_routerDao.findByNetwork(guestNetwork.getId());
    plan=new DataCenterDeployment(dcId);
  }
  if (router != null) {
    return router;
  }
  long id=_routerDao.getNextInSequence(Long.class,""String_Node_Str"");
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork);
  NetworkOfferingVO controlOffering=offerings.get(0);
  NetworkVO controlConfig=_networkMgr.setupNetwork(_systemAcct,controlOffering,plan,null,null,false,false).get(0);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(3);
  NicProfile gatewayNic=new NicProfile();
  gatewayNic.setDefaultNic(true);
  networks.add(new Pair<NetworkVO,NicProfile>((NetworkVO)guestNetwork,gatewayNic));
  networks.add(new Pair<NetworkVO,NicProfile>(controlConfig,null));
  VMTemplateVO template=_templateDao.findRoutingTemplate(dest.getCluster().getHypervisorType());
  Transaction txn=Transaction.currentTxn();
  Network network=_networkDao.acquireInLockTable(guestNetwork.getId());
  if (network == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + guestNetwork.getId());
  }
  try {
    txn.start();
    if ((dc.getNetworkType() == NetworkType.Basic || guestNetwork.isSecurityGroupEnabled()) && guestNetwork.getTrafficType() == TrafficType.Guest) {
      router=_routerDao.findByNetworkAndPod(guestNetwork.getId(),podId);
      plan=new DataCenterDeployment(dcId,podId,null,null,null);
    }
 else {
      router=_routerDao.findByNetwork(guestNetwork.getId());
      plan=new DataCenterDeployment(dcId);
    }
    if (router != null) {
      return router;
    }
    router=new DomainRouterVO(id,_offering.getId(),VirtualMachineName.getRouterName(id,_instance),template.getId(),template.getHypervisorType(),template.getGuestOSId(),owner.getDomainId(),owner.getId(),guestNetwork.getId(),_offering.getOfferHA());
    router.setRole(Role.DHCP_USERDATA);
    router=_itMgr.allocate(router,template,_offering,networks,plan,null,owner);
    UserStatisticsVO stats=_userStatsDao.findBy(owner.getId(),dcId,router.getNetworkId(),null,router.getId(),router.getType().toString());
    if (stats == null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner.getId() + ""String_Node_Str""+ router.getId());
      }
      stats=new UserStatisticsVO(owner.getId(),dcId,null,router.getId(),router.getType().toString(),guestNetwork.getId());
      _userStatsDao.persist(stats);
    }
    txn.commit();
  }
  finally {
    if (network != null) {
      _networkDao.releaseFromLockTable(network.getId());
    }
  }
  return router;
}"
89525,"@DB protected DomainRouterVO findOrCreateVirtualRouter(Network guestNetwork,DataCenterDeployment plan,HypervisorType type,Account owner) throws ConcurrentOperationException, InsufficientCapacityException {
  DomainRouterVO router=_routerDao.findByNetwork(guestNetwork.getId());
  if (router != null) {
    return router;
  }
  VMTemplateVO template=_templateDao.findRoutingTemplate(type);
  List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork);
  NetworkOfferingVO controlOffering=offerings.get(0);
  NetworkVO controlConfig=_networkMgr.setupNetwork(_systemAcct,controlOffering,plan,null,null,false,false).get(0);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(3);
  NetworkOfferingVO publicOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemPublicNetwork).get(0);
  List<NetworkVO> publicNetworks=_networkMgr.setupNetwork(_systemAcct,publicOffering,plan,null,null,false,false);
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Network network=_networkDao.lockRow(guestNetwork.getId(),true);
  if (network == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + guestNetwork.getId());
  }
  router=_routerDao.findByNetwork(guestNetwork.getId());
  if (router != null) {
    return router;
  }
  long id=_routerDao.getNextInSequence(Long.class,""String_Node_Str"");
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  PublicIp sourceNatIp=_networkMgr.assignSourceNatIpAddress(owner,guestNetwork,_accountService.getSystemUser().getId());
  NicProfile defaultNic=new NicProfile();
  defaultNic.setDefaultNic(true);
  defaultNic.setIp4Address(sourceNatIp.getAddress().addr());
  defaultNic.setGateway(sourceNatIp.getGateway());
  defaultNic.setNetmask(sourceNatIp.getNetmask());
  defaultNic.setMacAddress(sourceNatIp.getMacAddress());
  defaultNic.setBroadcastType(BroadcastDomainType.Vlan);
  defaultNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(sourceNatIp.getVlanTag()));
  defaultNic.setIsolationUri(IsolationType.Vlan.toUri(sourceNatIp.getVlanTag()));
  defaultNic.setDeviceId(2);
  networks.add(new Pair<NetworkVO,NicProfile>(publicNetworks.get(0),defaultNic));
  NicProfile gatewayNic=new NicProfile();
  gatewayNic.setIp4Address(guestNetwork.getGateway());
  gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());
  gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());
  gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());
  gatewayNic.setMode(guestNetwork.getMode());
  String gatewayCidr=guestNetwork.getCidr();
  gatewayNic.setNetmask(NetUtils.getCidrNetmask(gatewayCidr));
  networks.add(new Pair<NetworkVO,NicProfile>((NetworkVO)guestNetwork,gatewayNic));
  networks.add(new Pair<NetworkVO,NicProfile>(controlConfig,null));
  router=new DomainRouterVO(id,_offering.getId(),VirtualMachineName.getRouterName(id,_instance),template.getId(),template.getHypervisorType(),template.getGuestOSId(),owner.getDomainId(),owner.getId(),guestNetwork.getId(),_offering.getOfferHA());
  router=_itMgr.allocate(router,template,_offering,networks,plan,null,owner);
  UserStatisticsVO stats=_userStatsDao.findBy(owner.getId(),plan.getDataCenterId(),router.getNetworkId(),null,router.getId(),router.getType().toString());
  if (stats == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + owner.getId() + ""String_Node_Str""+ router.getId());
    }
    stats=new UserStatisticsVO(owner.getId(),plan.getDataCenterId(),null,router.getId(),router.getType().toString(),guestNetwork.getId());
    _userStatsDao.persist(stats);
  }
  txn.commit();
  return router;
}","@DB protected DomainRouterVO findOrCreateVirtualRouter(Network guestNetwork,DataCenterDeployment plan,HypervisorType type,Account owner) throws ConcurrentOperationException, InsufficientCapacityException {
  DomainRouterVO router=_routerDao.findByNetwork(guestNetwork.getId());
  if (router != null) {
    return router;
  }
  VMTemplateVO template=_templateDao.findRoutingTemplate(type);
  List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemControlNetwork);
  NetworkOfferingVO controlOffering=offerings.get(0);
  NetworkVO controlConfig=_networkMgr.setupNetwork(_systemAcct,controlOffering,plan,null,null,false,false).get(0);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(3);
  NetworkOfferingVO publicOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemPublicNetwork).get(0);
  List<NetworkVO> publicNetworks=_networkMgr.setupNetwork(_systemAcct,publicOffering,plan,null,null,false,false);
  Transaction txn=Transaction.currentTxn();
  Network network=_networkDao.acquireInLockTable(guestNetwork.getId());
  if (network == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + guestNetwork.getId());
  }
  try {
    txn.start();
    router=_routerDao.findByNetwork(guestNetwork.getId());
    if (router != null) {
      return router;
    }
    long id=_routerDao.getNextInSequence(Long.class,""String_Node_Str"");
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + id);
    }
    PublicIp sourceNatIp=_networkMgr.assignSourceNatIpAddress(owner,guestNetwork,_accountService.getSystemUser().getId());
    NicProfile defaultNic=new NicProfile();
    defaultNic.setDefaultNic(true);
    defaultNic.setIp4Address(sourceNatIp.getAddress().addr());
    defaultNic.setGateway(sourceNatIp.getGateway());
    defaultNic.setNetmask(sourceNatIp.getNetmask());
    defaultNic.setMacAddress(sourceNatIp.getMacAddress());
    defaultNic.setBroadcastType(BroadcastDomainType.Vlan);
    defaultNic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(sourceNatIp.getVlanTag()));
    defaultNic.setIsolationUri(IsolationType.Vlan.toUri(sourceNatIp.getVlanTag()));
    defaultNic.setDeviceId(2);
    networks.add(new Pair<NetworkVO,NicProfile>(publicNetworks.get(0),defaultNic));
    NicProfile gatewayNic=new NicProfile();
    gatewayNic.setIp4Address(guestNetwork.getGateway());
    gatewayNic.setBroadcastUri(guestNetwork.getBroadcastUri());
    gatewayNic.setBroadcastType(guestNetwork.getBroadcastDomainType());
    gatewayNic.setIsolationUri(guestNetwork.getBroadcastUri());
    gatewayNic.setMode(guestNetwork.getMode());
    String gatewayCidr=guestNetwork.getCidr();
    gatewayNic.setNetmask(NetUtils.getCidrNetmask(gatewayCidr));
    networks.add(new Pair<NetworkVO,NicProfile>((NetworkVO)guestNetwork,gatewayNic));
    networks.add(new Pair<NetworkVO,NicProfile>(controlConfig,null));
    router=new DomainRouterVO(id,_offering.getId(),VirtualMachineName.getRouterName(id,_instance),template.getId(),template.getHypervisorType(),template.getGuestOSId(),owner.getDomainId(),owner.getId(),guestNetwork.getId(),_offering.getOfferHA());
    router=_itMgr.allocate(router,template,_offering,networks,plan,null,owner);
    UserStatisticsVO stats=_userStatsDao.findBy(owner.getId(),plan.getDataCenterId(),router.getNetworkId(),null,router.getId(),router.getType().toString());
    if (stats == null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + owner.getId() + ""String_Node_Str""+ router.getId());
      }
      stats=new UserStatisticsVO(owner.getId(),plan.getDataCenterId(),null,router.getId(),router.getType().toString(),guestNetwork.getId());
      _userStatsDao.persist(stats);
    }
    txn.commit();
  }
  finally {
    if (network != null) {
      _networkDao.releaseFromLockTable(network.getId());
    }
  }
  return router;
}"
89526,"@Override public void run(){
  s_logger.info(""String_Node_Str"");
  try {
    Thread.sleep(_pingTimeout * 2000);
  }
 catch (  InterruptedException e) {
    s_logger.info(""String_Node_Str"");
  }
  while (!_stop) {
    try {
      Thread.sleep(60 * 1000);
    }
 catch (    InterruptedException e) {
      s_logger.info(""String_Node_Str"");
    }
    GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"");
    if (lock == null) {
      s_logger.error(""String_Node_Str"");
      continue;
    }
    if (!lock.lock(10)) {
      s_logger.info(""String_Node_Str"");
      continue;
    }
    try {
      long time=(System.currentTimeMillis() >> 10) - _pingTimeout;
      List<HostVO> hosts=_hostDao.findLostHosts(time);
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + hosts.size() + ""String_Node_Str""+ _pingTimeout+ ""String_Node_Str""+ time);
      }
      for (      HostVO host : hosts) {
        if (host.getType().equals(Host.Type.ExternalFirewall) || host.getType().equals(Host.Type.ExternalLoadBalancer) || host.getType().equals(Host.Type.TrafficMonitor)|| host.getType().equals(Host.Type.SecondaryStorage)) {
          continue;
        }
        if (host.getManagementServerId() == null || host.getManagementServerId() == _msId) {
          if (s_logger.isInfoEnabled()) {
            s_logger.info(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getLastPinged());
          }
          _agentMgr.disconnect(host.getId(),Event.PingTimeout,true);
        }
      }
      hosts=_hostDao.listByStatus(Status.PrepareForMaintenance,Status.ErrorInMaintenance);
      for (      HostVO host : hosts) {
        long hostId=host.getId();
        DataCenterVO dcVO=_dcDao.findById(host.getDataCenterId());
        HostPodVO podVO=_podDao.findById(host.getPodId());
        String hostDesc=""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ dcVO.getName()+ ""String_Node_Str""+ podVO.getName();
        if (host.getType() != Host.Type.Storage) {
          List<VMInstanceVO> vos=_vmDao.listByHostId(host.getId());
          if (vos.size() == 0) {
            _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,host.getDataCenterId(),host.getPodId(),""String_Node_Str"" + hostDesc,""String_Node_Str"" + hostDesc + ""String_Node_Str"");
            _hostDao.updateStatus(host,Event.PreparationComplete,_msId);
          }
        }
      }
    }
 catch (    Throwable th) {
      s_logger.error(""String_Node_Str"",th);
    }
 finally {
      lock.unlock();
    }
  }
  s_logger.info(""String_Node_Str"");
}","@Override public void run(){
  s_logger.info(""String_Node_Str"");
  while (!_stop) {
    try {
      Thread.sleep(60 * 1000);
    }
 catch (    InterruptedException e) {
      s_logger.info(""String_Node_Str"");
    }
    GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"");
    if (lock == null) {
      s_logger.error(""String_Node_Str"");
      continue;
    }
    if (!lock.lock(10)) {
      s_logger.info(""String_Node_Str"");
      continue;
    }
    try {
      long time=(System.currentTimeMillis() >> 10) - _pingTimeout;
      List<HostVO> hosts=_hostDao.findLostHosts(time);
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + hosts.size() + ""String_Node_Str""+ _pingTimeout+ ""String_Node_Str""+ time);
      }
      for (      HostVO host : hosts) {
        if (host.getType().equals(Host.Type.ExternalFirewall) || host.getType().equals(Host.Type.ExternalLoadBalancer) || host.getType().equals(Host.Type.TrafficMonitor)|| host.getType().equals(Host.Type.SecondaryStorage)) {
          continue;
        }
        if (host.getManagementServerId() == null || host.getManagementServerId() == _msId) {
          if (s_logger.isInfoEnabled()) {
            s_logger.info(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getLastPinged());
          }
          _agentMgr.disconnect(host.getId(),Event.PingTimeout,true);
        }
      }
      hosts=_hostDao.listByStatus(Status.PrepareForMaintenance,Status.ErrorInMaintenance);
      for (      HostVO host : hosts) {
        long hostId=host.getId();
        DataCenterVO dcVO=_dcDao.findById(host.getDataCenterId());
        HostPodVO podVO=_podDao.findById(host.getPodId());
        String hostDesc=""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ dcVO.getName()+ ""String_Node_Str""+ podVO.getName();
        if (host.getType() != Host.Type.Storage) {
          List<VMInstanceVO> vos=_vmDao.listByHostId(host.getId());
          if (vos.size() == 0) {
            _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,host.getDataCenterId(),host.getPodId(),""String_Node_Str"" + hostDesc,""String_Node_Str"" + hostDesc + ""String_Node_Str"");
            _hostDao.updateStatus(host,Event.PreparationComplete,_msId);
          }
        }
      }
    }
 catch (    Throwable th) {
      s_logger.error(""String_Node_Str"",th);
    }
 finally {
      lock.unlock();
    }
  }
  s_logger.info(""String_Node_Str"");
}"
89527,"@Override public List<HostVO> findDirectAgentToLoad(long lastPingSecondsAfter,Long limit){
  SearchCriteria<HostVO> sc=UnmanagedDirectConnectSearch.create();
  sc.setParameters(""String_Node_Str"",lastPingSecondsAfter);
  return search(sc,new Filter(HostVO.class,""String_Node_Str"",true,0L,limit));
}","@Override public List<HostVO> findDirectAgentToLoad(long lastPingSecondsAfter,Long limit){
  SearchCriteria<HostVO> sc=UnmanagedDirectConnectSearch.create();
  sc.setParameters(""String_Node_Str"",lastPingSecondsAfter);
  sc.setParameters(""String_Node_Str"",Status.ErrorInMaintenance,Status.Maintenance,Status.PrepareForMaintenance);
  return search(sc,new Filter(HostVO.class,""String_Node_Str"",true,0L,limit));
}"
89528,"@Override public void markHostsAsDisconnected(long msId){
  SearchCriteria<HostVO> sc=MsStatusSearch.create();
  sc.setParameters(""String_Node_Str"",msId);
  HostVO host=createForUpdate();
  host.setManagementServerId(null);
  host.setLastPinged((System.currentTimeMillis() >> 10) - (10 * 60));
  host.setDisconnectedOn(new Date());
  UpdateBuilder ub=getUpdateBuilder(host);
  ub.set(host,""String_Node_Str"",Status.Disconnected);
  update(ub,sc,null);
}","@Override public void markHostsAsDisconnected(long msId){
  SearchCriteria<HostVO> sc=MsStatusSearch.create();
  sc.setParameters(""String_Node_Str"",msId);
  sc.setParameters(""String_Node_Str"",Status.ErrorInMaintenance,Status.Maintenance,Status.PrepareForMaintenance);
  HostVO host=createForUpdate();
  host.setLastPinged((System.currentTimeMillis() >> 10) - (10 * 60));
  host.setDisconnectedOn(new Date());
  UpdateBuilder ub=getUpdateBuilder(host);
  ub.set(host,""String_Node_Str"",Status.Disconnected);
  update(ub,sc,null);
  sc=MsStatusSearch.create();
  sc.setParameters(""String_Node_Str"",msId);
  host=createForUpdate();
  host.setManagementServerId(null);
  host.setLastPinged((System.currentTimeMillis() >> 10) - (10 * 60));
  host.setDisconnectedOn(new Date());
  ub=getUpdateBuilder(host);
  update(ub,sc,null);
}"
89529,"@Override public void run(){
  s_logger.info(""String_Node_Str"");
  try {
    Thread.sleep(_pingTimeout * 2000);
  }
 catch (  InterruptedException e) {
    s_logger.info(""String_Node_Str"");
  }
  while (!_stop) {
    try {
      Thread.sleep(60 * 1000);
    }
 catch (    InterruptedException e) {
      s_logger.info(""String_Node_Str"");
    }
    GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"");
    if (lock == null) {
      s_logger.error(""String_Node_Str"");
      continue;
    }
    if (!lock.lock(10)) {
      s_logger.info(""String_Node_Str"");
      continue;
    }
    try {
      long time=(System.currentTimeMillis() >> 10) - _pingTimeout;
      List<HostVO> hosts=_hostDao.findLostHosts(time);
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + hosts.size() + ""String_Node_Str""+ _pingTimeout+ ""String_Node_Str""+ time);
      }
      for (      HostVO host : hosts) {
        if (host.getType().equals(Host.Type.ExternalFirewall) || host.getType().equals(Host.Type.ExternalLoadBalancer) || host.getType().equals(Host.Type.TrafficMonitor)|| host.getType().equals(Host.Type.SecondaryStorage)) {
          continue;
        }
        if (host.getManagementServerId() == null || host.getManagementServerId() == _msId) {
          if (s_logger.isInfoEnabled()) {
            s_logger.info(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getLastPinged());
          }
          _agentMgr.disconnect(host.getId(),Event.PingTimeout,true);
        }
      }
      hosts=_hostDao.listByStatus(Status.PrepareForMaintenance,Status.ErrorInMaintenance);
      for (      HostVO host : hosts) {
        long hostId=host.getId();
        DataCenterVO dcVO=_dcDao.findById(host.getDataCenterId());
        HostPodVO podVO=_podDao.findById(host.getPodId());
        String hostDesc=""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ dcVO.getName()+ ""String_Node_Str""+ podVO.getName();
        if (host.getType() != Host.Type.Storage) {
          List<VMInstanceVO> vos=_vmDao.listByHostId(host.getId());
          if (vos.size() == 0) {
            _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,host.getDataCenterId(),host.getPodId(),""String_Node_Str"" + hostDesc,""String_Node_Str"" + hostDesc + ""String_Node_Str"");
            _hostDao.updateStatus(host,Event.PreparationComplete,_msId);
          }
        }
      }
    }
 catch (    Throwable th) {
      s_logger.error(""String_Node_Str"",th);
    }
 finally {
      lock.unlock();
    }
  }
  s_logger.info(""String_Node_Str"");
}","@Override public void run(){
  s_logger.info(""String_Node_Str"");
  while (!_stop) {
    try {
      Thread.sleep(60 * 1000);
    }
 catch (    InterruptedException e) {
      s_logger.info(""String_Node_Str"");
    }
    GlobalLock lock=GlobalLock.getInternLock(""String_Node_Str"");
    if (lock == null) {
      s_logger.error(""String_Node_Str"");
      continue;
    }
    if (!lock.lock(10)) {
      s_logger.info(""String_Node_Str"");
      continue;
    }
    try {
      long time=(System.currentTimeMillis() >> 10) - _pingTimeout;
      List<HostVO> hosts=_hostDao.findLostHosts(time);
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + hosts.size() + ""String_Node_Str""+ _pingTimeout+ ""String_Node_Str""+ time);
      }
      for (      HostVO host : hosts) {
        if (host.getType().equals(Host.Type.ExternalFirewall) || host.getType().equals(Host.Type.ExternalLoadBalancer) || host.getType().equals(Host.Type.TrafficMonitor)|| host.getType().equals(Host.Type.SecondaryStorage)) {
          continue;
        }
        if (host.getManagementServerId() == null || host.getManagementServerId() == _msId) {
          if (s_logger.isInfoEnabled()) {
            s_logger.info(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getLastPinged());
          }
          _agentMgr.disconnect(host.getId(),Event.PingTimeout,true);
        }
      }
      hosts=_hostDao.listByStatus(Status.PrepareForMaintenance,Status.ErrorInMaintenance);
      for (      HostVO host : hosts) {
        long hostId=host.getId();
        DataCenterVO dcVO=_dcDao.findById(host.getDataCenterId());
        HostPodVO podVO=_podDao.findById(host.getPodId());
        String hostDesc=""String_Node_Str"" + host.getName() + ""String_Node_Str""+ host.getId()+ ""String_Node_Str""+ dcVO.getName()+ ""String_Node_Str""+ podVO.getName();
        if (host.getType() != Host.Type.Storage) {
          List<VMInstanceVO> vos=_vmDao.listByHostId(host.getId());
          if (vos.size() == 0) {
            _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,host.getDataCenterId(),host.getPodId(),""String_Node_Str"" + hostDesc,""String_Node_Str"" + hostDesc + ""String_Node_Str"");
            _hostDao.updateStatus(host,Event.PreparationComplete,_msId);
          }
        }
      }
    }
 catch (    Throwable th) {
      s_logger.error(""String_Node_Str"",th);
    }
 finally {
      lock.unlock();
    }
  }
  s_logger.info(""String_Node_Str"");
}"
89530,"@Override public List<HostVO> findDirectAgentToLoad(long lastPingSecondsAfter,Long limit){
  SearchCriteria<HostVO> sc=UnmanagedDirectConnectSearch.create();
  sc.setParameters(""String_Node_Str"",lastPingSecondsAfter);
  return search(sc,new Filter(HostVO.class,""String_Node_Str"",true,0L,limit));
}","@Override public List<HostVO> findDirectAgentToLoad(long lastPingSecondsAfter,Long limit){
  SearchCriteria<HostVO> sc=UnmanagedDirectConnectSearch.create();
  sc.setParameters(""String_Node_Str"",lastPingSecondsAfter);
  sc.setParameters(""String_Node_Str"",Status.ErrorInMaintenance,Status.Maintenance,Status.PrepareForMaintenance);
  return search(sc,new Filter(HostVO.class,""String_Node_Str"",true,0L,limit));
}"
89531,"@Override public void markHostsAsDisconnected(long msId){
  SearchCriteria<HostVO> sc=MsStatusSearch.create();
  sc.setParameters(""String_Node_Str"",msId);
  HostVO host=createForUpdate();
  host.setManagementServerId(null);
  host.setLastPinged((System.currentTimeMillis() >> 10) - (10 * 60));
  host.setDisconnectedOn(new Date());
  UpdateBuilder ub=getUpdateBuilder(host);
  ub.set(host,""String_Node_Str"",Status.Disconnected);
  update(ub,sc,null);
}","@Override public void markHostsAsDisconnected(long msId){
  SearchCriteria<HostVO> sc=MsStatusSearch.create();
  sc.setParameters(""String_Node_Str"",msId);
  sc.setParameters(""String_Node_Str"",Status.ErrorInMaintenance,Status.Maintenance,Status.PrepareForMaintenance);
  HostVO host=createForUpdate();
  host.setLastPinged((System.currentTimeMillis() >> 10) - (10 * 60));
  host.setDisconnectedOn(new Date());
  UpdateBuilder ub=getUpdateBuilder(host);
  ub.set(host,""String_Node_Str"",Status.Disconnected);
  update(ub,sc,null);
  sc=MsStatusSearch.create();
  sc.setParameters(""String_Node_Str"",msId);
  host=createForUpdate();
  host.setManagementServerId(null);
  host.setLastPinged((System.currentTimeMillis() >> 10) - (10 * 60));
  host.setDisconnectedOn(new Date());
  ub=getUpdateBuilder(host);
  update(ub,sc,null);
}"
89532,"private void updateUserStats(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
    s_logger.debug(""String_Node_Str"");
    pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      Long id=rs.getLong(1);
      Long accountId=rs.getLong(2);
      Long dataCenterId=rs.getLong(3);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,dataCenterId);
      ResultSet dcSet=pstmt.executeQuery();
      if (!dcSet.next()) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      String dataCenterType=dcSet.getString(1);
      if (dataCenterType.equalsIgnoreCase(""String_Node_Str"")) {
        accountId=1L;
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,accountId);
      pstmt.setLong(2,dataCenterId);
      ResultSet rs1=pstmt.executeQuery();
      if (!rs1.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,accountId);
        pstmt.setLong(2,dataCenterId);
        ResultSet nonRemovedVms=pstmt.executeQuery();
        if (nonRemovedVms.next()) {
          s_logger.error(""String_Node_Str"");
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
          continue;
        }
      }
      Long deviceId=rs1.getLong(1);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,deviceId);
      pstmt.setLong(2,id);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private void updateUserStats(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
    s_logger.debug(""String_Node_Str"");
    pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      Long id=rs.getLong(1);
      Long accountId=rs.getLong(2);
      Long dataCenterId=rs.getLong(3);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,dataCenterId);
      ResultSet dcSet=pstmt.executeQuery();
      if (!dcSet.next()) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      String dataCenterType=dcSet.getString(1);
      if (dataCenterType.equalsIgnoreCase(""String_Node_Str"")) {
        accountId=1L;
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,accountId);
      pstmt.setLong(2,dataCenterId);
      ResultSet rs1=pstmt.executeQuery();
      Long deviceId=0L;
      if (!rs1.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,accountId);
        pstmt.setLong(2,dataCenterId);
        ResultSet nonRemovedVms=pstmt.executeQuery();
        if (nonRemovedVms.next()) {
          s_logger.warn(""String_Node_Str"" + accountId + ""String_Node_Str""+ dataCenterId+ ""String_Node_Str"");
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,accountId);
          pstmt.setLong(2,dataCenterId);
          ResultSet userVmSet=pstmt.executeQuery();
          if (!userVmSet.next()) {
            s_logger.warn(""String_Node_Str"" + accountId + ""String_Node_Str""+ dataCenterId);
            continue;
          }
          deviceId=userVmSet.getLong(1);
        }
 else {
          s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
          continue;
        }
      }
 else {
        deviceId=rs1.getLong(1);
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,deviceId);
      pstmt.setLong(2,id);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}"
89533,"private void updateUserStats(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
    s_logger.debug(""String_Node_Str"");
    pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      Long id=rs.getLong(1);
      Long accountId=rs.getLong(2);
      Long dataCenterId=rs.getLong(3);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,dataCenterId);
      ResultSet dcSet=pstmt.executeQuery();
      if (!dcSet.next()) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      String dataCenterType=dcSet.getString(1);
      if (dataCenterType.equalsIgnoreCase(""String_Node_Str"")) {
        accountId=1L;
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,accountId);
      pstmt.setLong(2,dataCenterId);
      ResultSet rs1=pstmt.executeQuery();
      if (!rs1.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,accountId);
        pstmt.setLong(2,dataCenterId);
        ResultSet nonRemovedVms=pstmt.executeQuery();
        if (nonRemovedVms.next()) {
          s_logger.error(""String_Node_Str"");
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
          continue;
        }
      }
      Long deviceId=rs1.getLong(1);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,deviceId);
      pstmt.setLong(2,id);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private void updateUserStats(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
    s_logger.debug(""String_Node_Str"");
    pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      Long id=rs.getLong(1);
      Long accountId=rs.getLong(2);
      Long dataCenterId=rs.getLong(3);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,dataCenterId);
      ResultSet dcSet=pstmt.executeQuery();
      if (!dcSet.next()) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      String dataCenterType=dcSet.getString(1);
      if (dataCenterType.equalsIgnoreCase(""String_Node_Str"")) {
        accountId=1L;
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,accountId);
      pstmt.setLong(2,dataCenterId);
      ResultSet rs1=pstmt.executeQuery();
      Long deviceId=0L;
      if (!rs1.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,accountId);
        pstmt.setLong(2,dataCenterId);
        ResultSet nonRemovedVms=pstmt.executeQuery();
        if (nonRemovedVms.next()) {
          s_logger.warn(""String_Node_Str"" + accountId + ""String_Node_Str""+ dataCenterId+ ""String_Node_Str"");
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,accountId);
          pstmt.setLong(2,dataCenterId);
          ResultSet userVmSet=pstmt.executeQuery();
          if (!userVmSet.next()) {
            s_logger.warn(""String_Node_Str"" + accountId + ""String_Node_Str""+ dataCenterId);
            continue;
          }
          deviceId=userVmSet.getLong(1);
        }
 else {
          s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
          continue;
        }
      }
 else {
        deviceId=rs1.getLong(1);
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,deviceId);
      pstmt.setLong(2,id);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}"
89534,"@Override public List<HostVO> getHostsToRebalance(long msId,int avLoad){
  List<HostVO> allHosts=_hostDao.listByManagementServer(msId);
  if (allHosts.size() <= avLoad) {
    s_logger.debug(""String_Node_Str"" + allHosts.size() + ""String_Node_Str""+ msId+ ""String_Node_Str""+ avLoad+ ""String_Node_Str"");
    return null;
  }
  List<HostVO> directHosts=_hostDao.listDirectHostsBy(msId,Status.Up);
  if (directHosts.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + Status.Up + ""String_Node_Str""+ msId+ ""String_Node_Str"");
    return null;
  }
  Map<Long,List<HostVO>> hostToClusterMap=new HashMap<Long,List<HostVO>>();
  for (  HostVO directHost : directHosts) {
    Long clusterId=directHost.getClusterId();
    List<HostVO> directHostsPerCluster=null;
    if (!hostToClusterMap.containsKey(clusterId)) {
      directHostsPerCluster=new ArrayList<HostVO>();
    }
 else {
      directHostsPerCluster=hostToClusterMap.get(clusterId);
    }
    directHostsPerCluster.add(directHost);
    hostToClusterMap.put(clusterId,directHostsPerCluster);
  }
  hostToClusterMap=sortByClusterSize(hostToClusterMap);
  int hostsToGive=allHosts.size() - avLoad;
  int hostsLeftToGive=hostsToGive;
  int hostsLeft=directHosts.size();
  List<HostVO> hostsToReturn=new ArrayList<HostVO>();
  int count=0;
  for (  Long cluster : hostToClusterMap.keySet()) {
    List<HostVO> hostsInCluster=hostToClusterMap.get(cluster);
    hostsLeft=hostsLeft - hostsInCluster.size();
    count++;
    if (hostsToReturn.size() < hostsToGive) {
      s_logger.debug(""String_Node_Str"" + cluster);
      if (hostsInCluster.size() > hostsLeftToGive) {
        if (hostsLeft >= hostsLeftToGive) {
          s_logger.debug(""String_Node_Str"" + cluster + ""String_Node_Str""+ hostsInCluster.size()+ ""String_Node_Str""+ hostsLeftToGive);
          continue;
        }
 else {
          if (count == hostToClusterMap.size()) {
            for (int i=0; i <= hostsLeftToGive; i++) {
              hostsToReturn.add(hostsInCluster.get(i));
              hostsLeftToGive=hostsLeftToGive - 1;
              s_logger.debug(""String_Node_Str"" + hostsInCluster.get(i) + ""String_Node_Str""+ cluster);
            }
          }
          break;
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + hostsInCluster.size() + ""String_Node_Str""+ hostsInCluster+ ""String_Node_Str""+ cluster);
        hostsToReturn.addAll(hostsInCluster);
        hostsLeftToGive=hostsLeftToGive - hostsInCluster.size();
      }
    }
 else {
      break;
    }
  }
  return hostsToReturn;
}","@Override public List<HostVO> getHostsToRebalance(long msId,int avLoad){
  List<HostVO> allHosts=_hostDao.listByManagementServer(msId);
  if (allHosts.size() <= avLoad) {
    s_logger.debug(""String_Node_Str"" + allHosts.size() + ""String_Node_Str""+ msId+ ""String_Node_Str""+ avLoad+ ""String_Node_Str"");
    return null;
  }
  List<HostVO> directHosts=_hostDao.listDirectHostsBy(msId,Status.Up);
  if (directHosts.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + Status.Up + ""String_Node_Str""+ msId+ ""String_Node_Str"");
    return null;
  }
  Map<Long,List<HostVO>> hostToClusterMap=new HashMap<Long,List<HostVO>>();
  for (  HostVO directHost : directHosts) {
    Long clusterId=directHost.getClusterId();
    List<HostVO> directHostsPerCluster=null;
    if (!hostToClusterMap.containsKey(clusterId)) {
      directHostsPerCluster=new ArrayList<HostVO>();
    }
 else {
      directHostsPerCluster=hostToClusterMap.get(clusterId);
    }
    directHostsPerCluster.add(directHost);
    hostToClusterMap.put(clusterId,directHostsPerCluster);
  }
  hostToClusterMap=sortByClusterSize(hostToClusterMap);
  int hostsToGive=allHosts.size() - avLoad;
  int hostsLeftToGive=hostsToGive;
  int hostsLeft=directHosts.size();
  List<HostVO> hostsToReturn=new ArrayList<HostVO>();
  for (  Long cluster : hostToClusterMap.keySet()) {
    List<HostVO> hostsInCluster=hostToClusterMap.get(cluster);
    hostsLeft=hostsLeft - hostsInCluster.size();
    if (hostsToReturn.size() < hostsToGive) {
      s_logger.debug(""String_Node_Str"" + cluster);
      if (hostsInCluster.size() > hostsLeftToGive) {
        if (hostsLeft >= hostsLeftToGive) {
          s_logger.debug(""String_Node_Str"" + cluster + ""String_Node_Str""+ hostsInCluster.size()+ ""String_Node_Str""+ hostsLeftToGive);
          continue;
        }
 else {
          s_logger.debug(""String_Node_Str"" + hostsLeftToGive + ""String_Node_Str""+ cluster);
          for (int i=0; i < hostsLeftToGive; i++) {
            hostsToReturn.add(hostsInCluster.get(i));
          }
          break;
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + hostsInCluster.size() + ""String_Node_Str""+ hostsInCluster+ ""String_Node_Str""+ cluster);
        hostsToReturn.addAll(hostsInCluster);
        hostsLeftToGive=hostsLeftToGive - hostsInCluster.size();
      }
    }
 else {
      break;
    }
  }
  return hostsToReturn;
}"
89535,"private Runnable getTransferScanTask(){
  return new Runnable(){
    @Override public void run(){
      try {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _nodeId);
        }
        if (_agentToTransferIds.size() > 0) {
          s_logger.debug(""String_Node_Str"" + _agentToTransferIds.size() + ""String_Node_Str"");
          for (          Long hostId : _agentToTransferIds) {
            AgentAttache attache=findAttache(hostId);
            Date cutTime=DateUtil.currentGMTTime();
            if (_hostTransferDao.isNotActive(hostId,new Date(cutTime.getTime() - rebalanceTimeOut))) {
              s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
              failStartRebalance(hostId);
              return;
            }
            HostTransferMapVO transferMap=_hostTransferDao.findByIdAndCurrentOwnerId(hostId,_nodeId);
            if (transferMap == null) {
              s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
              failStartRebalance(hostId);
              return;
            }
            ManagementServerHostVO ms=_mshostDao.findByMsid(transferMap.getFutureOwner());
            if (ms != null && ms.getState() != ManagementServerHost.State.Up) {
              s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ ms+ ""String_Node_Str"");
              failStartRebalance(hostId);
              return;
            }
            if (attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
              rebalanceHost(hostId,transferMap.getInitialOwner(),transferMap.getFutureOwner());
            }
 else {
              s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize());
            }
          }
        }
 else {
          if (s_logger.isTraceEnabled()) {
            s_logger.trace(""String_Node_Str"" + _nodeId);
          }
        }
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"",e);
      }
    }
  }
;
}","private Runnable getTransferScanTask(){
  return new Runnable(){
    @Override public void run(){
      try {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _nodeId);
        }
synchronized (_agentToTransferIds) {
          if (_agentToTransferIds.size() > 0) {
            s_logger.debug(""String_Node_Str"" + _agentToTransferIds.size() + ""String_Node_Str"");
            for (Iterator<Long> iterator=_agentToTransferIds.iterator(); iterator.hasNext(); ) {
              Long hostId=iterator.next();
              AgentAttache attache=findAttache(hostId);
              Date cutTime=DateUtil.currentGMTTime();
              if (_hostTransferDao.isNotActive(hostId,new Date(cutTime.getTime() - rebalanceTimeOut))) {
                s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
                iterator.remove();
                _hostTransferDao.completeAgentTransfer(hostId);
                continue;
              }
              HostTransferMapVO transferMap=_hostTransferDao.findByIdAndCurrentOwnerId(hostId,_nodeId);
              if (transferMap == null) {
                s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
                iterator.remove();
                _hostTransferDao.completeAgentTransfer(hostId);
                continue;
              }
              ManagementServerHostVO ms=_mshostDao.findByMsid(transferMap.getFutureOwner());
              if (ms != null && ms.getState() != ManagementServerHost.State.Up) {
                s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ ms+ ""String_Node_Str"");
                iterator.remove();
                _hostTransferDao.completeAgentTransfer(hostId);
                continue;
              }
              if (attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
                iterator.remove();
                rebalanceHost(hostId,transferMap.getInitialOwner(),transferMap.getFutureOwner());
              }
 else {
                s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize());
              }
            }
          }
 else {
            if (s_logger.isTraceEnabled()) {
              s_logger.trace(""String_Node_Str"" + _nodeId);
            }
          }
        }
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"",e);
      }
    }
  }
;
}"
89536,"@Override public void run(){
  try {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + _nodeId);
    }
    if (_agentToTransferIds.size() > 0) {
      s_logger.debug(""String_Node_Str"" + _agentToTransferIds.size() + ""String_Node_Str"");
      for (      Long hostId : _agentToTransferIds) {
        AgentAttache attache=findAttache(hostId);
        Date cutTime=DateUtil.currentGMTTime();
        if (_hostTransferDao.isNotActive(hostId,new Date(cutTime.getTime() - rebalanceTimeOut))) {
          s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
          failStartRebalance(hostId);
          return;
        }
        HostTransferMapVO transferMap=_hostTransferDao.findByIdAndCurrentOwnerId(hostId,_nodeId);
        if (transferMap == null) {
          s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
          failStartRebalance(hostId);
          return;
        }
        ManagementServerHostVO ms=_mshostDao.findByMsid(transferMap.getFutureOwner());
        if (ms != null && ms.getState() != ManagementServerHost.State.Up) {
          s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ ms+ ""String_Node_Str"");
          failStartRebalance(hostId);
          return;
        }
        if (attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
          rebalanceHost(hostId,transferMap.getInitialOwner(),transferMap.getFutureOwner());
        }
 else {
          s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize());
        }
      }
    }
 else {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + _nodeId);
      }
    }
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
  }
}","@Override public void run(){
  try {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + _nodeId);
    }
synchronized (_agentToTransferIds) {
      if (_agentToTransferIds.size() > 0) {
        s_logger.debug(""String_Node_Str"" + _agentToTransferIds.size() + ""String_Node_Str"");
        for (Iterator<Long> iterator=_agentToTransferIds.iterator(); iterator.hasNext(); ) {
          Long hostId=iterator.next();
          AgentAttache attache=findAttache(hostId);
          Date cutTime=DateUtil.currentGMTTime();
          if (_hostTransferDao.isNotActive(hostId,new Date(cutTime.getTime() - rebalanceTimeOut))) {
            s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
            iterator.remove();
            _hostTransferDao.completeAgentTransfer(hostId);
            continue;
          }
          HostTransferMapVO transferMap=_hostTransferDao.findByIdAndCurrentOwnerId(hostId,_nodeId);
          if (transferMap == null) {
            s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
            iterator.remove();
            _hostTransferDao.completeAgentTransfer(hostId);
            continue;
          }
          ManagementServerHostVO ms=_mshostDao.findByMsid(transferMap.getFutureOwner());
          if (ms != null && ms.getState() != ManagementServerHost.State.Up) {
            s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ ms+ ""String_Node_Str"");
            iterator.remove();
            _hostTransferDao.completeAgentTransfer(hostId);
            continue;
          }
          if (attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
            iterator.remove();
            rebalanceHost(hostId,transferMap.getInitialOwner(),transferMap.getFutureOwner());
          }
 else {
            s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize());
          }
        }
      }
 else {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _nodeId);
        }
      }
    }
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
  }
}"
89537,"protected boolean rebalanceHost(final long hostId,long currentOwnerId,long futureOwnerId) throws AgentUnavailableException {
  boolean result=true;
  if (currentOwnerId == _nodeId) {
    _agentToTransferIds.remove(hostId);
    if (!startRebalance(hostId)) {
      s_logger.debug(""String_Node_Str"");
      failRebalance(hostId);
      return false;
    }
    try {
      Answer[] answer=sendRebalanceCommand(futureOwnerId,hostId,currentOwnerId,futureOwnerId,Event.StartAgentRebalance);
      if (answer == null || !answer[0].getResult()) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId+ ""String_Node_Str"");
        result=false;
      }
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId+ ""String_Node_Str"",ex);
      result=false;
    }
    if (result) {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId);
      finishRebalance(hostId,futureOwnerId,Event.RebalanceCompleted);
    }
 else {
      finishRebalance(hostId,futureOwnerId,Event.RebalanceFailed);
    }
  }
 else   if (futureOwnerId == _nodeId) {
    HostVO host=_hostDao.findById(hostId);
    try {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"");
      }
      result=loadDirectlyConnectedHost(host,true);
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str"",ex);
      result=false;
    }
  }
  return result;
}","protected boolean rebalanceHost(final long hostId,long currentOwnerId,long futureOwnerId) throws AgentUnavailableException {
  boolean result=true;
  if (currentOwnerId == _nodeId) {
    if (!startRebalance(hostId)) {
      s_logger.debug(""String_Node_Str"");
      failRebalance(hostId);
      return false;
    }
    try {
      Answer[] answer=sendRebalanceCommand(futureOwnerId,hostId,currentOwnerId,futureOwnerId,Event.StartAgentRebalance);
      if (answer == null || !answer[0].getResult()) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId+ ""String_Node_Str"");
        result=false;
      }
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId+ ""String_Node_Str"",ex);
      result=false;
    }
    if (result) {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId);
      finishRebalance(hostId,futureOwnerId,Event.RebalanceCompleted);
    }
 else {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId);
      finishRebalance(hostId,futureOwnerId,Event.RebalanceFailed);
    }
  }
 else   if (futureOwnerId == _nodeId) {
    HostVO host=_hostDao.findById(hostId);
    try {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"");
      }
      result=loadDirectlyConnectedHost(host,true);
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str"",ex);
      result=false;
    }
  }
  return result;
}"
89538,"@DB protected boolean startRebalance(final long hostId){
  HostVO host=_hostDao.findById(hostId);
  if (host == null || host.getRemoved() != null) {
    s_logger.warn(""String_Node_Str"");
    return false;
  }
synchronized (_agents) {
    ClusteredDirectAgentAttache attache=(ClusteredDirectAgentAttache)_agents.get(hostId);
    if (attache != null && attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
      _agentToTransferIds.remove(hostId);
      removeAgent(attache,Status.Rebalancing);
      ClusteredAgentAttache forwardAttache=(ClusteredAgentAttache)createAttache(hostId);
      if (forwardAttache == null) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str"");
        return false;
      }
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      forwardAttache.setTransferMode(true);
      _agents.put(hostId,forwardAttache);
    }
 else {
      if (attache == null) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ _nodeId+ ""String_Node_Str"");
      }
 else {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize()+ ""String_Node_Str"");
      }
      return false;
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ Status.Rebalancing);
  host.setManagementServerId(null);
  _hostDao.updateStatus(host,Event.StartAgentRebalance,_nodeId);
  _hostTransferDao.startAgentTransfer(hostId);
  txn.commit();
  return true;
}","@DB protected boolean startRebalance(final long hostId){
  HostVO host=_hostDao.findById(hostId);
  if (host == null || host.getRemoved() != null) {
    s_logger.warn(""String_Node_Str"");
    return false;
  }
synchronized (_agents) {
    ClusteredDirectAgentAttache attache=(ClusteredDirectAgentAttache)_agents.get(hostId);
    if (attache != null && attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
      removeAgent(attache,Status.Rebalancing);
      ClusteredAgentAttache forwardAttache=(ClusteredAgentAttache)createAttache(hostId);
      if (forwardAttache == null) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str"");
        return false;
      }
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      forwardAttache.setTransferMode(true);
      _agents.put(hostId,forwardAttache);
    }
 else {
      if (attache == null) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ _nodeId+ ""String_Node_Str"");
      }
 else {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize()+ ""String_Node_Str"");
      }
      return false;
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ Status.Rebalancing);
  host.setManagementServerId(null);
  _hostDao.updateStatus(host,Event.StartAgentRebalance,_nodeId);
  _hostTransferDao.startAgentTransfer(hostId);
  txn.commit();
  return true;
}"
89539,"protected static String buildName(){
  if (s_logger.isDebugEnabled()) {
    final StackTraceElement[] stacks=Thread.currentThread().getStackTrace();
    final StringBuilder str=new StringBuilder();
    int i=3, j=3;
    while (j < 7 && j < stacks.length) {
      StackTraceElement element=stacks[i];
      String filename=element.getFileName();
      String method=element.getMethodName();
      if ((filename != null && filename.equals(""String_Node_Str"")) || (method != null && method.equals(""String_Node_Str""))) {
        i++;
        continue;
      }
      str.append(""String_Node_Str"").append(stacks[i].getClassName().substring(stacks[i].getClassName().lastIndexOf(""String_Node_Str"") + 1)).append(""String_Node_Str"").append(stacks[i].getMethodName()).append(""String_Node_Str"").append(stacks[i].getLineNumber());
      j++;
      i++;
    }
    return str.toString();
  }
  return ""String_Node_Str"";
}","protected static String buildName(){
  if (s_logger.isDebugEnabled()) {
    final StackTraceElement[] stacks=Thread.currentThread().getStackTrace();
    final StringBuilder str=new StringBuilder();
    int i=3, j=3;
    while (j < 7 && i < stacks.length) {
      StackTraceElement element=stacks[i];
      String filename=element.getFileName();
      String method=element.getMethodName();
      if ((filename != null && filename.equals(""String_Node_Str"")) || (method != null && method.equals(""String_Node_Str""))) {
        i++;
        continue;
      }
      str.append(""String_Node_Str"").append(stacks[i].getClassName().substring(stacks[i].getClassName().lastIndexOf(""String_Node_Str"") + 1)).append(""String_Node_Str"").append(stacks[i].getMethodName()).append(""String_Node_Str"").append(stacks[i].getLineNumber());
      j++;
      i++;
    }
    return str.toString();
  }
  return ""String_Node_Str"";
}"
89540,"private Runnable getTransferScanTask(){
  return new Runnable(){
    @Override public void run(){
      try {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _nodeId);
        }
        if (_agentToTransferIds.size() > 0) {
          s_logger.debug(""String_Node_Str"" + _agentToTransferIds.size() + ""String_Node_Str"");
          for (          Long hostId : _agentToTransferIds) {
            AgentAttache attache=findAttache(hostId);
            Date cutTime=DateUtil.currentGMTTime();
            if (_hostTransferDao.isNotActive(hostId,new Date(cutTime.getTime() - rebalanceTimeOut))) {
              s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
              failStartRebalance(hostId);
              return;
            }
            HostTransferMapVO transferMap=_hostTransferDao.findByIdAndCurrentOwnerId(hostId,_nodeId);
            if (transferMap == null) {
              s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
              failStartRebalance(hostId);
              return;
            }
            ManagementServerHostVO ms=_mshostDao.findByMsid(transferMap.getFutureOwner());
            if (ms != null && ms.getState() != ManagementServerHost.State.Up) {
              s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ ms+ ""String_Node_Str"");
              failStartRebalance(hostId);
              return;
            }
            if (attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
              rebalanceHost(hostId,transferMap.getInitialOwner(),transferMap.getFutureOwner());
            }
 else {
              s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize());
            }
          }
        }
 else {
          if (s_logger.isTraceEnabled()) {
            s_logger.trace(""String_Node_Str"" + _nodeId);
          }
        }
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"",e);
      }
    }
  }
;
}","private Runnable getTransferScanTask(){
  return new Runnable(){
    @Override public void run(){
      try {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _nodeId);
        }
synchronized (_agentToTransferIds) {
          if (_agentToTransferIds.size() > 0) {
            s_logger.debug(""String_Node_Str"" + _agentToTransferIds.size() + ""String_Node_Str"");
            for (Iterator<Long> iterator=_agentToTransferIds.iterator(); iterator.hasNext(); ) {
              Long hostId=iterator.next();
              AgentAttache attache=findAttache(hostId);
              Date cutTime=DateUtil.currentGMTTime();
              if (_hostTransferDao.isNotActive(hostId,new Date(cutTime.getTime() - rebalanceTimeOut))) {
                s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
                iterator.remove();
                _hostTransferDao.completeAgentTransfer(hostId);
                continue;
              }
              HostTransferMapVO transferMap=_hostTransferDao.findByIdAndCurrentOwnerId(hostId,_nodeId);
              if (transferMap == null) {
                s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
                iterator.remove();
                _hostTransferDao.completeAgentTransfer(hostId);
                continue;
              }
              ManagementServerHostVO ms=_mshostDao.findByMsid(transferMap.getFutureOwner());
              if (ms != null && ms.getState() != ManagementServerHost.State.Up) {
                s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ ms+ ""String_Node_Str"");
                iterator.remove();
                _hostTransferDao.completeAgentTransfer(hostId);
                continue;
              }
              if (attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
                iterator.remove();
                rebalanceHost(hostId,transferMap.getInitialOwner(),transferMap.getFutureOwner());
              }
 else {
                s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize());
              }
            }
          }
 else {
            if (s_logger.isTraceEnabled()) {
              s_logger.trace(""String_Node_Str"" + _nodeId);
            }
          }
        }
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"",e);
      }
    }
  }
;
}"
89541,"@Override public void run(){
  try {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + _nodeId);
    }
    if (_agentToTransferIds.size() > 0) {
      s_logger.debug(""String_Node_Str"" + _agentToTransferIds.size() + ""String_Node_Str"");
      for (      Long hostId : _agentToTransferIds) {
        AgentAttache attache=findAttache(hostId);
        Date cutTime=DateUtil.currentGMTTime();
        if (_hostTransferDao.isNotActive(hostId,new Date(cutTime.getTime() - rebalanceTimeOut))) {
          s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
          failStartRebalance(hostId);
          return;
        }
        HostTransferMapVO transferMap=_hostTransferDao.findByIdAndCurrentOwnerId(hostId,_nodeId);
        if (transferMap == null) {
          s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
          failStartRebalance(hostId);
          return;
        }
        ManagementServerHostVO ms=_mshostDao.findByMsid(transferMap.getFutureOwner());
        if (ms != null && ms.getState() != ManagementServerHost.State.Up) {
          s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ ms+ ""String_Node_Str"");
          failStartRebalance(hostId);
          return;
        }
        if (attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
          rebalanceHost(hostId,transferMap.getInitialOwner(),transferMap.getFutureOwner());
        }
 else {
          s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize());
        }
      }
    }
 else {
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"" + _nodeId);
      }
    }
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
  }
}","@Override public void run(){
  try {
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(""String_Node_Str"" + _nodeId);
    }
synchronized (_agentToTransferIds) {
      if (_agentToTransferIds.size() > 0) {
        s_logger.debug(""String_Node_Str"" + _agentToTransferIds.size() + ""String_Node_Str"");
        for (Iterator<Long> iterator=_agentToTransferIds.iterator(); iterator.hasNext(); ) {
          Long hostId=iterator.next();
          AgentAttache attache=findAttache(hostId);
          Date cutTime=DateUtil.currentGMTTime();
          if (_hostTransferDao.isNotActive(hostId,new Date(cutTime.getTime() - rebalanceTimeOut))) {
            s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
            iterator.remove();
            _hostTransferDao.completeAgentTransfer(hostId);
            continue;
          }
          HostTransferMapVO transferMap=_hostTransferDao.findByIdAndCurrentOwnerId(hostId,_nodeId);
          if (transferMap == null) {
            s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
            iterator.remove();
            _hostTransferDao.completeAgentTransfer(hostId);
            continue;
          }
          ManagementServerHostVO ms=_mshostDao.findByMsid(transferMap.getFutureOwner());
          if (ms != null && ms.getState() != ManagementServerHost.State.Up) {
            s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ ms+ ""String_Node_Str"");
            iterator.remove();
            _hostTransferDao.completeAgentTransfer(hostId);
            continue;
          }
          if (attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
            iterator.remove();
            rebalanceHost(hostId,transferMap.getInitialOwner(),transferMap.getFutureOwner());
          }
 else {
            s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize());
          }
        }
      }
 else {
        if (s_logger.isTraceEnabled()) {
          s_logger.trace(""String_Node_Str"" + _nodeId);
        }
      }
    }
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
  }
}"
89542,"protected boolean rebalanceHost(final long hostId,long currentOwnerId,long futureOwnerId) throws AgentUnavailableException {
  boolean result=true;
  if (currentOwnerId == _nodeId) {
    _agentToTransferIds.remove(hostId);
    if (!startRebalance(hostId)) {
      s_logger.debug(""String_Node_Str"");
      failRebalance(hostId);
      return false;
    }
    try {
      Answer[] answer=sendRebalanceCommand(futureOwnerId,hostId,currentOwnerId,futureOwnerId,Event.StartAgentRebalance);
      if (answer == null || !answer[0].getResult()) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId+ ""String_Node_Str"");
        result=false;
      }
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId+ ""String_Node_Str"",ex);
      result=false;
    }
    if (result) {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId);
      finishRebalance(hostId,futureOwnerId,Event.RebalanceCompleted);
    }
 else {
      finishRebalance(hostId,futureOwnerId,Event.RebalanceFailed);
    }
  }
 else   if (futureOwnerId == _nodeId) {
    HostVO host=_hostDao.findById(hostId);
    try {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"");
      }
      result=loadDirectlyConnectedHost(host,true);
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str"",ex);
      result=false;
    }
  }
  return result;
}","protected boolean rebalanceHost(final long hostId,long currentOwnerId,long futureOwnerId) throws AgentUnavailableException {
  boolean result=true;
  if (currentOwnerId == _nodeId) {
    if (!startRebalance(hostId)) {
      s_logger.debug(""String_Node_Str"");
      failRebalance(hostId);
      return false;
    }
    try {
      Answer[] answer=sendRebalanceCommand(futureOwnerId,hostId,currentOwnerId,futureOwnerId,Event.StartAgentRebalance);
      if (answer == null || !answer[0].getResult()) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId+ ""String_Node_Str"");
        result=false;
      }
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId+ ""String_Node_Str"",ex);
      result=false;
    }
    if (result) {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId);
      finishRebalance(hostId,futureOwnerId,Event.RebalanceCompleted);
    }
 else {
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ futureOwnerId);
      finishRebalance(hostId,futureOwnerId,Event.RebalanceFailed);
    }
  }
 else   if (futureOwnerId == _nodeId) {
    HostVO host=_hostDao.findById(hostId);
    try {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + host.getId() + ""String_Node_Str""+ host.getName()+ ""String_Node_Str"");
      }
      result=loadDirectlyConnectedHost(host,true);
    }
 catch (    Exception ex) {
      s_logger.warn(""String_Node_Str"" + host.getId() + ""String_Node_Str"",ex);
      result=false;
    }
  }
  return result;
}"
89543,"@DB protected boolean startRebalance(final long hostId){
  HostVO host=_hostDao.findById(hostId);
  if (host == null || host.getRemoved() != null) {
    s_logger.warn(""String_Node_Str"");
    return false;
  }
synchronized (_agents) {
    ClusteredDirectAgentAttache attache=(ClusteredDirectAgentAttache)_agents.get(hostId);
    if (attache != null && attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
      _agentToTransferIds.remove(hostId);
      removeAgent(attache,Status.Rebalancing);
      ClusteredAgentAttache forwardAttache=(ClusteredAgentAttache)createAttache(hostId);
      if (forwardAttache == null) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str"");
        return false;
      }
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      forwardAttache.setTransferMode(true);
      _agents.put(hostId,forwardAttache);
    }
 else {
      if (attache == null) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ _nodeId+ ""String_Node_Str"");
      }
 else {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize()+ ""String_Node_Str"");
      }
      return false;
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ Status.Rebalancing);
  host.setManagementServerId(null);
  _hostDao.updateStatus(host,Event.StartAgentRebalance,_nodeId);
  _hostTransferDao.startAgentTransfer(hostId);
  txn.commit();
  return true;
}","@DB protected boolean startRebalance(final long hostId){
  HostVO host=_hostDao.findById(hostId);
  if (host == null || host.getRemoved() != null) {
    s_logger.warn(""String_Node_Str"");
    return false;
  }
synchronized (_agents) {
    ClusteredDirectAgentAttache attache=(ClusteredDirectAgentAttache)_agents.get(hostId);
    if (attache != null && attache.getQueueSize() == 0 && attache.getNonRecurringListenersSize() == 0) {
      removeAgent(attache,Status.Rebalancing);
      ClusteredAgentAttache forwardAttache=(ClusteredAgentAttache)createAttache(hostId);
      if (forwardAttache == null) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str"");
        return false;
      }
      s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
      forwardAttache.setTransferMode(true);
      _agents.put(hostId,forwardAttache);
    }
 else {
      if (attache == null) {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ _nodeId+ ""String_Node_Str"");
      }
 else {
        s_logger.warn(""String_Node_Str"" + hostId + ""String_Node_Str""+ attache.getQueueSize()+ ""String_Node_Str""+ attache.getNonRecurringListenersSize()+ ""String_Node_Str"");
      }
      return false;
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ Status.Rebalancing);
  host.setManagementServerId(null);
  _hostDao.updateStatus(host,Event.StartAgentRebalance,_nodeId);
  _hostTransferDao.startAgentTransfer(hostId);
  txn.commit();
  return true;
}"
89544,"@Override public List<HostVO> getHostsToRebalance(long msId,int avLoad){
  List<HostVO> allHosts=_hostDao.listByManagementServer(msId);
  if (allHosts.size() <= avLoad) {
    s_logger.debug(""String_Node_Str"" + allHosts.size() + ""String_Node_Str""+ msId+ ""String_Node_Str""+ avLoad+ ""String_Node_Str"");
    return null;
  }
  List<HostVO> directHosts=_hostDao.listDirectHostsBy(msId,Status.Up);
  if (directHosts.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + Status.Up + ""String_Node_Str""+ msId+ ""String_Node_Str"");
    return null;
  }
  Map<Long,List<HostVO>> hostToClusterMap=new HashMap<Long,List<HostVO>>();
  for (  HostVO directHost : directHosts) {
    Long clusterId=directHost.getClusterId();
    List<HostVO> directHostsPerCluster=null;
    if (!hostToClusterMap.containsKey(clusterId)) {
      directHostsPerCluster=new ArrayList<HostVO>();
    }
 else {
      directHostsPerCluster=hostToClusterMap.get(clusterId);
    }
    directHostsPerCluster.add(directHost);
    hostToClusterMap.put(clusterId,directHostsPerCluster);
  }
  hostToClusterMap=sortByClusterSize(hostToClusterMap);
  int hostsToGive=allHosts.size() - avLoad;
  int hostsLeftToGive=hostsToGive;
  int hostsLeft=directHosts.size();
  List<HostVO> hostsToReturn=new ArrayList<HostVO>();
  int count=0;
  for (  Long cluster : hostToClusterMap.keySet()) {
    List<HostVO> hostsInCluster=hostToClusterMap.get(cluster);
    hostsLeft=hostsLeft - hostsInCluster.size();
    count++;
    if (hostsToReturn.size() < hostsToGive) {
      s_logger.debug(""String_Node_Str"" + cluster);
      if (hostsInCluster.size() > hostsLeftToGive) {
        if (hostsLeft >= hostsLeftToGive) {
          s_logger.debug(""String_Node_Str"" + cluster + ""String_Node_Str""+ hostsInCluster.size()+ ""String_Node_Str""+ hostsLeftToGive);
          continue;
        }
 else {
          if (count == hostToClusterMap.size()) {
            for (int i=0; i <= hostsLeftToGive; i++) {
              hostsToReturn.add(hostsInCluster.get(i));
              hostsLeftToGive=hostsLeftToGive - 1;
              s_logger.debug(""String_Node_Str"" + hostsInCluster.get(i) + ""String_Node_Str""+ cluster);
            }
          }
          break;
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + hostsInCluster.size() + ""String_Node_Str""+ hostsInCluster+ ""String_Node_Str""+ cluster);
        hostsToReturn.addAll(hostsInCluster);
        hostsLeftToGive=hostsLeftToGive - hostsInCluster.size();
      }
    }
 else {
      break;
    }
  }
  return hostsToReturn;
}","@Override public List<HostVO> getHostsToRebalance(long msId,int avLoad){
  List<HostVO> allHosts=_hostDao.listByManagementServer(msId);
  if (allHosts.size() <= avLoad) {
    s_logger.debug(""String_Node_Str"" + allHosts.size() + ""String_Node_Str""+ msId+ ""String_Node_Str""+ avLoad+ ""String_Node_Str"");
    return null;
  }
  List<HostVO> directHosts=_hostDao.listDirectHostsBy(msId,Status.Up);
  if (directHosts.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + Status.Up + ""String_Node_Str""+ msId+ ""String_Node_Str"");
    return null;
  }
  Map<Long,List<HostVO>> hostToClusterMap=new HashMap<Long,List<HostVO>>();
  for (  HostVO directHost : directHosts) {
    Long clusterId=directHost.getClusterId();
    List<HostVO> directHostsPerCluster=null;
    if (!hostToClusterMap.containsKey(clusterId)) {
      directHostsPerCluster=new ArrayList<HostVO>();
    }
 else {
      directHostsPerCluster=hostToClusterMap.get(clusterId);
    }
    directHostsPerCluster.add(directHost);
    hostToClusterMap.put(clusterId,directHostsPerCluster);
  }
  hostToClusterMap=sortByClusterSize(hostToClusterMap);
  int hostsToGive=allHosts.size() - avLoad;
  int hostsLeftToGive=hostsToGive;
  int hostsLeft=directHosts.size();
  List<HostVO> hostsToReturn=new ArrayList<HostVO>();
  for (  Long cluster : hostToClusterMap.keySet()) {
    List<HostVO> hostsInCluster=hostToClusterMap.get(cluster);
    hostsLeft=hostsLeft - hostsInCluster.size();
    if (hostsToReturn.size() < hostsToGive) {
      s_logger.debug(""String_Node_Str"" + cluster);
      if (hostsInCluster.size() > hostsLeftToGive) {
        if (hostsLeft >= hostsLeftToGive) {
          s_logger.debug(""String_Node_Str"" + cluster + ""String_Node_Str""+ hostsInCluster.size()+ ""String_Node_Str""+ hostsLeftToGive);
          continue;
        }
 else {
          s_logger.debug(""String_Node_Str"" + hostsLeftToGive + ""String_Node_Str""+ cluster);
          for (int i=0; i < hostsLeftToGive; i++) {
            hostsToReturn.add(hostsInCluster.get(i));
          }
          break;
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + hostsInCluster.size() + ""String_Node_Str""+ hostsInCluster+ ""String_Node_Str""+ cluster);
        hostsToReturn.addAll(hostsInCluster);
        hostsLeftToGive=hostsLeftToGive - hostsInCluster.size();
      }
    }
 else {
      break;
    }
  }
  return hostsToReturn;
}"
89545,"protected static String buildName(){
  if (s_logger.isDebugEnabled()) {
    final StackTraceElement[] stacks=Thread.currentThread().getStackTrace();
    final StringBuilder str=new StringBuilder();
    int i=3, j=3;
    while (j < 7 && j < stacks.length) {
      StackTraceElement element=stacks[i];
      String filename=element.getFileName();
      String method=element.getMethodName();
      if ((filename != null && filename.equals(""String_Node_Str"")) || (method != null && method.equals(""String_Node_Str""))) {
        i++;
        continue;
      }
      str.append(""String_Node_Str"").append(stacks[i].getClassName().substring(stacks[i].getClassName().lastIndexOf(""String_Node_Str"") + 1)).append(""String_Node_Str"").append(stacks[i].getMethodName()).append(""String_Node_Str"").append(stacks[i].getLineNumber());
      j++;
      i++;
    }
    return str.toString();
  }
  return ""String_Node_Str"";
}","protected static String buildName(){
  if (s_logger.isDebugEnabled()) {
    final StackTraceElement[] stacks=Thread.currentThread().getStackTrace();
    final StringBuilder str=new StringBuilder();
    int i=3, j=3;
    while (j < 7 && i < stacks.length) {
      StackTraceElement element=stacks[i];
      String filename=element.getFileName();
      String method=element.getMethodName();
      if ((filename != null && filename.equals(""String_Node_Str"")) || (method != null && method.equals(""String_Node_Str""))) {
        i++;
        continue;
      }
      str.append(""String_Node_Str"").append(stacks[i].getClassName().substring(stacks[i].getClassName().lastIndexOf(""String_Node_Str"") + 1)).append(""String_Node_Str"").append(stacks[i].getMethodName()).append(""String_Node_Str"").append(stacks[i].getLineNumber());
      j++;
      i++;
    }
    return str.toString();
  }
  return ""String_Node_Str"";
}"
89546,"@DB protected <T extends VMInstanceVO>Ternary<T,ReservationContext,ItWorkVO> changeToStartState(VirtualMachineGuru<T> vmGuru,T vm,User caller,Account account) throws ConcurrentOperationException {
  long vmId=vm.getId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Starting,vm.getType(),vm.getId());
  int retry=_lockStateRetry;
  while (retry-- != 0) {
    Transaction txn=Transaction.currentTxn();
    txn.start();
    try {
      if (stateTransitTo(vm,Event.StartRequested,null,work.getId())) {
        Journal journal=new Journal.LogJournal(""String_Node_Str"" + vm,s_logger);
        work=_workDao.persist(work);
        ReservationContextImpl context=new ReservationContextImpl(work.getId(),journal,caller,account);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ work.getId());
        }
        Ternary<T,ReservationContext,ItWorkVO> result=new Ternary<T,ReservationContext,ItWorkVO>(vmGuru.findById(vmId),context,work);
        txn.commit();
        return result;
      }
    }
 catch (    NoTransitionException e) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + e.getMessage());
      }
    }
    VMInstanceVO instance=_vmDao.findById(vmId);
    if (instance == null) {
      throw new ConcurrentOperationException(""String_Node_Str"" + vm);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + instance + ""String_Node_Str""+ retry);
    }
    State state=instance.getState();
    if (state == State.Running) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm);
      }
      return null;
    }
    if (state.isTransitional()) {
      if (!checkWorkItems(vm,state)) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
 else {
        continue;
      }
    }
    if (state != State.Stopped) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
      return null;
    }
  }
  throw new ConcurrentOperationException(""String_Node_Str"" + vm);
}","protected <T extends VMInstanceVO>Ternary<T,ReservationContext,ItWorkVO> changeToStartState(VirtualMachineGuru<T> vmGuru,T vm,User caller,Account account) throws ConcurrentOperationException {
  long vmId=vm.getId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Starting,vm.getType(),vm.getId());
  int retry=_lockStateRetry;
  while (retry-- != 0) {
    Transaction txn=Transaction.currentTxn();
    Ternary<T,ReservationContext,ItWorkVO> result=null;
    txn.start();
    try {
      Journal journal=new Journal.LogJournal(""String_Node_Str"" + vm,s_logger);
      work=_workDao.persist(work);
      ReservationContextImpl context=new ReservationContextImpl(work.getId(),journal,caller,account);
      if (stateTransitTo(vm,Event.StartRequested,null,work.getId())) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ work.getId());
        }
        result=new Ternary<T,ReservationContext,ItWorkVO>(vmGuru.findById(vmId),context,work);
        txn.commit();
        return result;
      }
    }
 catch (    NoTransitionException e) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + e.getMessage());
      }
    }
 finally {
      if (result == null) {
        txn.rollback();
      }
    }
    VMInstanceVO instance=_vmDao.findById(vmId);
    if (instance == null) {
      throw new ConcurrentOperationException(""String_Node_Str"" + vm);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + instance + ""String_Node_Str""+ retry);
    }
    State state=instance.getState();
    if (state == State.Running) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm);
      }
      return null;
    }
    if (state.isTransitional()) {
      if (!checkWorkItems(vm,state)) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
 else {
        continue;
      }
    }
    if (state != State.Stopped) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
      return null;
    }
  }
  throw new ConcurrentOperationException(""String_Node_Str"" + vm);
}"
89547,"@Override public Long checkAccessAndSpecifyAuthority(Account caller,Long zoneId){
  if (isResourceDomainAdmin(caller.getType())) {
    if (zoneId == null)     return getZoneIdForAccount(caller);
 else     if (getZoneIdForAccount(caller) != zoneId)     throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ zoneId);
 else     return zoneId;
  }
 else   return zoneId;
}","@Override public Long checkAccessAndSpecifyAuthority(Account caller,Long zoneId){
  if (isResourceDomainAdmin(caller.getType())) {
    if (zoneId == null)     return getZoneIdForAccount(caller);
 else     if (zoneId.compareTo(getZoneIdForAccount(caller)) != 0)     throw new PermissionDeniedException(""String_Node_Str"" + caller + ""String_Node_Str""+ zoneId);
 else     return zoneId;
  }
 else   return zoneId;
}"
89548,"@Override @ActionEvent(eventType=EventTypes.EVENT_USER_UPDATE,eventDescription=""String_Node_Str"") public UserAccount updateUser(UpdateUserCmd cmd){
  Long id=cmd.getId();
  String apiKey=cmd.getApiKey();
  String firstName=cmd.getFirstname();
  String email=cmd.getEmail();
  String lastName=cmd.getLastname();
  String password=cmd.getPassword();
  String secretKey=cmd.getSecretKey();
  String timeZone=cmd.getTimezone();
  String userName=cmd.getUsername();
  UserVO user=_userDao.getUser(id);
  if (user == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((apiKey == null && secretKey != null) || (apiKey != null && secretKey == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if (account != null && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new PermissionDeniedException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),account);
  if (firstName == null) {
    firstName=user.getFirstname();
  }
  if (lastName == null) {
    lastName=user.getLastname();
  }
  if (userName == null) {
    userName=user.getUsername();
  }
  if (password == null) {
    password=user.getPassword();
  }
  if (email == null) {
    email=user.getEmail();
  }
  if (timeZone == null) {
    timeZone=user.getTimezone();
  }
  if (apiKey == null) {
    apiKey=user.getApiKey();
  }
  if (secretKey == null) {
    secretKey=user.getSecretKey();
  }
  Long accountId=user.getAccountId();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  try {
    if (apiKey != null && secretKey != null) {
      Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
      if (apiKeyOwner != null) {
        User usr=apiKeyOwner.first();
        if (usr.getId() != id) {
          throw new InvalidParameterValueException(""String_Node_Str"" + apiKey + ""String_Node_Str""+ id+ ""String_Node_Str"");
        }
 else {
        }
      }
    }
    _userDao.update(id,userName,password,firstName,lastName,email,accountId,timeZone,apiKey,secretKey);
  }
 catch (  Throwable th) {
    s_logger.error(""String_Node_Str"",th);
    throw new CloudRuntimeException(""String_Node_Str"" + id);
  }
  return _userAccountDao.findById(id);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_USER_UPDATE,eventDescription=""String_Node_Str"") public UserAccount updateUser(UpdateUserCmd cmd){
  Long id=cmd.getId();
  String apiKey=cmd.getApiKey();
  String firstName=cmd.getFirstname();
  String email=cmd.getEmail();
  String lastName=cmd.getLastname();
  String password=cmd.getPassword();
  String secretKey=cmd.getSecretKey();
  String timeZone=cmd.getTimezone();
  String userName=cmd.getUsername();
  UserVO user=_userDao.getUser(id);
  if (user == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((apiKey == null && secretKey != null) || (apiKey != null && secretKey == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if (account != null && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new PermissionDeniedException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),account);
  if (firstName != null) {
    user.setFirstname(firstName);
  }
  if (lastName != null) {
    user.setLastname(lastName);
  }
  if (userName != null) {
    List<UserVO> duplicatedUsers=_userDao.findUsersLike(userName);
    for (    UserVO duplicatedUser : duplicatedUsers) {
      if (duplicatedUser.getId() != user.getId()) {
        Account duplicatedUserAccount=_accountDao.findById(duplicatedUser.getAccountId());
        if (duplicatedUserAccount.getDomainId() == account.getDomainId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + userName + ""String_Node_Str""+ duplicatedUserAccount.getDomainId());
        }
      }
    }
    user.setUsername(userName);
  }
  if (password != null) {
    user.setPassword(password);
  }
  if (email != null) {
    user.setEmail(email);
  }
  if (timeZone != null) {
    user.setTimezone(timeZone);
  }
  if (apiKey != null) {
    user.setApiKey(apiKey);
  }
  if (secretKey != null) {
    user.setSecretKey(secretKey);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  try {
    if (apiKey != null && secretKey != null) {
      Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
      if (apiKeyOwner != null) {
        User usr=apiKeyOwner.first();
        if (usr.getId() != id) {
          throw new InvalidParameterValueException(""String_Node_Str"" + apiKey + ""String_Node_Str""+ id+ ""String_Node_Str"");
        }
 else {
        }
      }
    }
    _userDao.update(id,user);
  }
 catch (  Throwable th) {
    s_logger.error(""String_Node_Str"",th);
    throw new CloudRuntimeException(""String_Node_Str"" + id);
  }
  return _userAccountDao.findById(id);
}"
89549,"@Override public List<ServiceOfferingVO> searchForServiceOfferings(ListServiceOfferingsCmd cmd){
  Filter searchFilter=new Filter(ServiceOfferingVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
  Account account=UserContext.current().getCaller();
  Object name=cmd.getServiceOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long vmId=cmd.getVirtualMachineId();
  Long domainId=cmd.getDomainId();
  Boolean issystem=cmd.getIsSystem();
  String vm_type_str=cmd.getSystemVmType();
  if (domainId != null) {
    if (account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      if (account.getDomainId() != 1 && issystem) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      return _offeringsDao.findSystemOffering(domainId,issystem,vm_type_str);
    }
 else {
      if (issystem) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      if (isPermissible(account.getDomainId(),domainId)) {
        return _offeringsDao.findSystemOffering(domainId,false,vm_type_str);
      }
 else {
        throw new PermissionDeniedException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
      }
    }
  }
  if ((account.getType() == Account.ACCOUNT_TYPE_NORMAL || account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || account.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
    if (issystem) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    return searchServiceOfferingsInternal(account,name,id,vmId,keyword,searchFilter);
  }
  if (account.getDomainId() != 1 && issystem) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (keyword != null) {
    SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
 else   if (vmId != null) {
    UserVmVO vmInstance=_userVmDao.findById(vmId);
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
    if ((account != null) && !isAdmin(account.getType())) {
      if (account.getId() != vmInstance.getAccountId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
      }
    }
    ServiceOfferingVO offering=_offeringsDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (vm_type_str != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,vm_type_str);
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,issystem);
  return _offeringsDao.search(sc,searchFilter);
}","@Override public List<ServiceOfferingVO> searchForServiceOfferings(ListServiceOfferingsCmd cmd){
  Filter searchFilter=new Filter(ServiceOfferingVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
  Account caller=UserContext.current().getCaller();
  Object name=cmd.getServiceOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long vmId=cmd.getVirtualMachineId();
  Long domainId=cmd.getDomainId();
  Boolean isSystem=cmd.getIsSystem();
  String vm_type_str=cmd.getSystemVmType();
  if (caller.getType() != Account.ACCOUNT_TYPE_ADMIN && isSystem) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainId != null && caller.getType() != Account.ACCOUNT_TYPE_ADMIN) {
    if (!isPermissible(caller.getDomainId(),domainId)) {
      throw new PermissionDeniedException(""String_Node_Str"" + caller.getAccountName() + ""String_Node_Str"");
    }
  }
  if ((caller.getType() == Account.ACCOUNT_TYPE_NORMAL || caller.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || caller.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
    if (isSystem) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    return searchServiceOfferingsInternal(caller,name,id,vmId,keyword,searchFilter);
  }
  if (caller.getDomainId() != 1 && isSystem) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (keyword != null) {
    SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
 else   if (vmId != null) {
    UserVmVO vmInstance=_userVmDao.findById(vmId);
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
    if ((caller != null) && !isAdmin(caller.getType())) {
      if (caller.getId() != vmInstance.getAccountId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
      }
    }
    ServiceOfferingVO offering=_offeringsDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (isSystem != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isSystem);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (domainId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainId);
  }
  if (vm_type_str != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,vm_type_str);
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isSystem);
  return _offeringsDao.search(sc,searchFilter);
}"
89550,"@DB protected <T extends VMInstanceVO>Ternary<T,ReservationContext,ItWorkVO> changeToStartState(VirtualMachineGuru<T> vmGuru,T vm,User caller,Account account) throws ConcurrentOperationException {
  long vmId=vm.getId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Starting,vm.getType(),vm.getId());
  int retry=_lockStateRetry;
  while (retry-- != 0) {
    Transaction txn=Transaction.currentTxn();
    txn.start();
    try {
      if (stateTransitTo(vm,Event.StartRequested,null,work.getId())) {
        Journal journal=new Journal.LogJournal(""String_Node_Str"" + vm,s_logger);
        work=_workDao.persist(work);
        ReservationContextImpl context=new ReservationContextImpl(work.getId(),journal,caller,account);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ work.getId());
        }
        Ternary<T,ReservationContext,ItWorkVO> result=new Ternary<T,ReservationContext,ItWorkVO>(vmGuru.findById(vmId),context,work);
        txn.commit();
        return result;
      }
    }
 catch (    NoTransitionException e) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + e.getMessage());
      }
    }
    VMInstanceVO instance=_vmDao.findById(vmId);
    if (instance == null) {
      throw new ConcurrentOperationException(""String_Node_Str"" + vm);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + instance + ""String_Node_Str""+ retry);
    }
    State state=instance.getState();
    if (state == State.Running) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm);
      }
      return null;
    }
    if (state.isTransitional()) {
      if (!checkWorkItems(vm,state)) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
 else {
        continue;
      }
    }
    if (state != State.Stopped) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
      return null;
    }
  }
  throw new ConcurrentOperationException(""String_Node_Str"" + vm);
}","protected <T extends VMInstanceVO>Ternary<T,ReservationContext,ItWorkVO> changeToStartState(VirtualMachineGuru<T> vmGuru,T vm,User caller,Account account) throws ConcurrentOperationException {
  long vmId=vm.getId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Starting,vm.getType(),vm.getId());
  int retry=_lockStateRetry;
  while (retry-- != 0) {
    Transaction txn=Transaction.currentTxn();
    Ternary<T,ReservationContext,ItWorkVO> result=null;
    txn.start();
    try {
      Journal journal=new Journal.LogJournal(""String_Node_Str"" + vm,s_logger);
      work=_workDao.persist(work);
      ReservationContextImpl context=new ReservationContextImpl(work.getId(),journal,caller,account);
      if (stateTransitTo(vm,Event.StartRequested,null,work.getId())) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ work.getId());
        }
        result=new Ternary<T,ReservationContext,ItWorkVO>(vmGuru.findById(vmId),context,work);
        txn.commit();
        return result;
      }
    }
 catch (    NoTransitionException e) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + e.getMessage());
      }
    }
 finally {
      if (result == null) {
        txn.rollback();
      }
    }
    VMInstanceVO instance=_vmDao.findById(vmId);
    if (instance == null) {
      throw new ConcurrentOperationException(""String_Node_Str"" + vm);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + instance + ""String_Node_Str""+ retry);
    }
    State state=instance.getState();
    if (state == State.Running) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm);
      }
      return null;
    }
    if (state.isTransitional()) {
      if (!checkWorkItems(vm,state)) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
 else {
        continue;
      }
    }
    if (state != State.Stopped) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
      return null;
    }
  }
  throw new ConcurrentOperationException(""String_Node_Str"" + vm);
}"
89551,"@DB protected <T extends VMInstanceVO>Ternary<T,ReservationContext,ItWorkVO> changeToStartState(VirtualMachineGuru<T> vmGuru,T vm,User caller,Account account) throws ConcurrentOperationException {
  long vmId=vm.getId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Starting,vm.getType(),vm.getId());
  int retry=_lockStateRetry;
  while (retry-- != 0) {
    Transaction txn=Transaction.currentTxn();
    txn.start();
    try {
      try {
        if (stateTransitTo(vm,Event.StartRequested,null,work.getId())) {
          Journal journal=new Journal.LogJournal(""String_Node_Str"" + vm,s_logger);
          work=_workDao.persist(work);
          ReservationContextImpl context=new ReservationContextImpl(work.getId(),journal,caller,account);
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ work.getId());
          }
          return new Ternary<T,ReservationContext,ItWorkVO>(vmGuru.findById(vmId),context,work);
        }
      }
 catch (      NoTransitionException e) {
        throw new CloudRuntimeException(e.getMessage());
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm);
      }
      VMInstanceVO instance=_vmDao.findById(vmId);
      if (instance == null) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
      State state=instance.getState();
      if (state == State.Running) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm);
        }
        return null;
      }
      if (state.isTransitional()) {
        if (!checkWorkItems(vm,state)) {
          throw new ConcurrentOperationException(""String_Node_Str"" + vm);
        }
 else {
          continue;
        }
      }
      if (state != State.Stopped) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
        return null;
      }
    }
  finally {
      txn.commit();
    }
  }
  throw new ConcurrentOperationException(""String_Node_Str"" + vm);
}","@DB protected <T extends VMInstanceVO>Ternary<T,ReservationContext,ItWorkVO> changeToStartState(VirtualMachineGuru<T> vmGuru,T vm,User caller,Account account) throws ConcurrentOperationException {
  long vmId=vm.getId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Starting,vm.getType(),vm.getId());
  int retry=_lockStateRetry;
  while (retry-- != 0) {
    Transaction txn=Transaction.currentTxn();
    txn.start();
    try {
      try {
        if (stateTransitTo(vm,Event.StartRequested,null,work.getId())) {
          Journal journal=new Journal.LogJournal(""String_Node_Str"" + vm,s_logger);
          work=_workDao.persist(work);
          ReservationContextImpl context=new ReservationContextImpl(work.getId(),journal,caller,account);
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ work.getId());
          }
          return new Ternary<T,ReservationContext,ItWorkVO>(vmGuru.findById(vmId),context,work);
        }
      }
 catch (      NoTransitionException e) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + e.getMessage());
        }
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm);
      }
      VMInstanceVO instance=_vmDao.findById(vmId);
      if (instance == null) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
      State state=instance.getState();
      if (state == State.Running) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm);
        }
        return null;
      }
      if (state.isTransitional()) {
        if (!checkWorkItems(vm,state)) {
          throw new ConcurrentOperationException(""String_Node_Str"" + vm);
        }
 else {
          continue;
        }
      }
      if (state != State.Stopped) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
        return null;
      }
    }
  finally {
      txn.commit();
    }
  }
  throw new ConcurrentOperationException(""String_Node_Str"" + vm);
}"
89552,"@DB protected <T extends VMInstanceVO>Ternary<T,ReservationContext,ItWorkVO> changeToStartState(VirtualMachineGuru<T> vmGuru,T vm,User caller,Account account) throws ConcurrentOperationException {
  long vmId=vm.getId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Starting,vm.getType(),vm.getId());
  int retry=_lockStateRetry;
  while (retry-- != 0) {
    Transaction txn=Transaction.currentTxn();
    txn.start();
    try {
      try {
        if (stateTransitTo(vm,Event.StartRequested,null,work.getId())) {
          Journal journal=new Journal.LogJournal(""String_Node_Str"" + vm,s_logger);
          work=_workDao.persist(work);
          ReservationContextImpl context=new ReservationContextImpl(work.getId(),journal,caller,account);
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ work.getId());
          }
          return new Ternary<T,ReservationContext,ItWorkVO>(vmGuru.findById(vmId),context,work);
        }
      }
 catch (      NoTransitionException e) {
        throw new CloudRuntimeException(e.getMessage());
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm);
      }
      VMInstanceVO instance=_vmDao.findById(vmId);
      if (instance == null) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
      State state=instance.getState();
      if (state == State.Running) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm);
        }
        return null;
      }
      if (state.isTransitional()) {
        if (!checkWorkItems(vm,state)) {
          throw new ConcurrentOperationException(""String_Node_Str"" + vm);
        }
 else {
          continue;
        }
      }
      if (state != State.Stopped) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
        return null;
      }
    }
  finally {
      txn.commit();
    }
  }
  throw new ConcurrentOperationException(""String_Node_Str"" + vm);
}","@DB protected <T extends VMInstanceVO>Ternary<T,ReservationContext,ItWorkVO> changeToStartState(VirtualMachineGuru<T> vmGuru,T vm,User caller,Account account) throws ConcurrentOperationException {
  long vmId=vm.getId();
  ItWorkVO work=new ItWorkVO(UUID.randomUUID().toString(),_nodeId,State.Starting,vm.getType(),vm.getId());
  int retry=_lockStateRetry;
  while (retry-- != 0) {
    Transaction txn=Transaction.currentTxn();
    txn.start();
    try {
      try {
        if (stateTransitTo(vm,Event.StartRequested,null,work.getId())) {
          Journal journal=new Journal.LogJournal(""String_Node_Str"" + vm,s_logger);
          work=_workDao.persist(work);
          ReservationContextImpl context=new ReservationContextImpl(work.getId(),journal,caller,account);
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ work.getId());
          }
          return new Ternary<T,ReservationContext,ItWorkVO>(vmGuru.findById(vmId),context,work);
        }
      }
 catch (      NoTransitionException e) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + e.getMessage());
        }
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vm);
      }
      VMInstanceVO instance=_vmDao.findById(vmId);
      if (instance == null) {
        throw new ConcurrentOperationException(""String_Node_Str"" + vm);
      }
      State state=instance.getState();
      if (state == State.Running) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vm);
        }
        return null;
      }
      if (state.isTransitional()) {
        if (!checkWorkItems(vm,state)) {
          throw new ConcurrentOperationException(""String_Node_Str"" + vm);
        }
 else {
          continue;
        }
      }
      if (state != State.Stopped) {
        s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
        return null;
      }
    }
  finally {
      txn.commit();
    }
  }
  throw new ConcurrentOperationException(""String_Node_Str"" + vm);
}"
89553,"@Override @ActionEvent(eventType=EventTypes.EVENT_USER_UPDATE,eventDescription=""String_Node_Str"") public UserAccount updateUser(UpdateUserCmd cmd){
  Long id=cmd.getId();
  String apiKey=cmd.getApiKey();
  String firstName=cmd.getFirstname();
  String email=cmd.getEmail();
  String lastName=cmd.getLastname();
  String password=cmd.getPassword();
  String secretKey=cmd.getSecretKey();
  String timeZone=cmd.getTimezone();
  String userName=cmd.getUsername();
  UserVO user=_userDao.getUser(id);
  if (user == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((apiKey == null && secretKey != null) || (apiKey != null && secretKey == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if (account != null && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new PermissionDeniedException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),account);
  if (firstName == null) {
    firstName=user.getFirstname();
  }
  if (lastName == null) {
    lastName=user.getLastname();
  }
  if (userName == null) {
    userName=user.getUsername();
  }
  if (password == null) {
    password=user.getPassword();
  }
  if (email == null) {
    email=user.getEmail();
  }
  if (timeZone == null) {
    timeZone=user.getTimezone();
  }
  if (apiKey == null) {
    apiKey=user.getApiKey();
  }
  if (secretKey == null) {
    secretKey=user.getSecretKey();
  }
  Long accountId=user.getAccountId();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  try {
    if (apiKey != null && secretKey != null) {
      Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
      if (apiKeyOwner != null) {
        User usr=apiKeyOwner.first();
        if (usr.getId() != id) {
          throw new InvalidParameterValueException(""String_Node_Str"" + apiKey + ""String_Node_Str""+ id+ ""String_Node_Str"");
        }
 else {
        }
      }
    }
    _userDao.update(id,userName,password,firstName,lastName,email,accountId,timeZone,apiKey,secretKey);
  }
 catch (  Throwable th) {
    s_logger.error(""String_Node_Str"",th);
    throw new CloudRuntimeException(""String_Node_Str"" + id);
  }
  return _userAccountDao.findById(id);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_USER_UPDATE,eventDescription=""String_Node_Str"") public UserAccount updateUser(UpdateUserCmd cmd){
  Long id=cmd.getId();
  String apiKey=cmd.getApiKey();
  String firstName=cmd.getFirstname();
  String email=cmd.getEmail();
  String lastName=cmd.getLastname();
  String password=cmd.getPassword();
  String secretKey=cmd.getSecretKey();
  String timeZone=cmd.getTimezone();
  String userName=cmd.getUsername();
  long callerUserId=UserContext.current().getCallerUserId();
  UserVO user=_userDao.getUser(id);
  if (user == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (apiKey != null) {
    Long apiKeyOwnerId=null;
    Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
    if (apiKeyOwner != null) {
      apiKeyOwnerId=apiKeyOwner.first().getId();
    }
    if ((apiKeyOwnerId == null || callerUserId != apiKeyOwnerId) && secretKey == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if (apiKeyOwnerId != null && callerUserId == apiKeyOwnerId && id != callerUserId) {
      apiKey=null;
    }
  }
  if (apiKey == null && secretKey != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if (account != null && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new PermissionDeniedException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),account);
  if (firstName == null) {
    firstName=user.getFirstname();
  }
  if (lastName == null) {
    lastName=user.getLastname();
  }
  if (userName == null) {
    userName=user.getUsername();
  }
  if (password == null) {
    password=user.getPassword();
  }
  if (email == null) {
    email=user.getEmail();
  }
  if (timeZone == null) {
    timeZone=user.getTimezone();
  }
  if (apiKey == null) {
    apiKey=user.getApiKey();
  }
  if (secretKey == null) {
    secretKey=user.getSecretKey();
  }
  Long accountId=user.getAccountId();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  try {
    if (apiKey != null && secretKey != null) {
      Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
      if (apiKeyOwner != null) {
        User usr=apiKeyOwner.first();
        if (usr.getId() != id) {
          throw new InvalidParameterValueException(""String_Node_Str"" + apiKey + ""String_Node_Str""+ id+ ""String_Node_Str"");
        }
 else {
        }
      }
    }
    _userDao.update(id,userName,password,firstName,lastName,email,accountId,timeZone,apiKey,secretKey);
  }
 catch (  Throwable th) {
    s_logger.error(""String_Node_Str"",th);
    throw new CloudRuntimeException(""String_Node_Str"" + id);
  }
  return _userAccountDao.findById(id);
}"
89554,"public void testTags(){
  NetworkDaoImpl dao=ComponentLocator.inject(NetworkDaoImpl.class);
  dao.expunge(1001l);
  NetworkVO network=new NetworkVO(1001,TrafficType.Control,GuestIpType.Direct,Mode.Dhcp,BroadcastDomainType.Native,1,1,1,1,1001,""String_Node_Str"",""String_Node_Str"",false,true,true);
  network.setGuruName(""String_Node_Str"");
  List<String> tags=new ArrayList<String>();
  tags.add(""String_Node_Str"");
  tags.add(""String_Node_Str"");
  network.setTags(tags);
  network=dao.persist(network);
  List<String> saveTags=network.getTags();
  Assert.assertTrue(saveTags.size() == 2 && saveTags.contains(""String_Node_Str"") && saveTags.contains(""String_Node_Str""));
  NetworkVO retrieved=dao.findById(1001l);
  List<String> retrievedTags=retrieved.getTags();
  Assert.assertTrue(retrievedTags.size() == 2 && retrievedTags.contains(""String_Node_Str"") && retrievedTags.contains(""String_Node_Str""));
  List<String> updateTags=new ArrayList<String>();
  updateTags.add(""String_Node_Str"");
  updateTags.add(""String_Node_Str"");
  retrieved.setTags(updateTags);
  dao.update(retrieved.getId(),retrieved);
  retrieved=dao.findById(1001l);
  retrievedTags=retrieved.getTags();
  Assert.assertTrue(""String_Node_Str"",retrievedTags.size() == 2 && retrievedTags.contains(""String_Node_Str"") && retrievedTags.contains(""String_Node_Str""));
  dao.expunge(1001l);
}","public void testTags(){
  NetworkDaoImpl dao=ComponentLocator.inject(NetworkDaoImpl.class);
  dao.expunge(1001l);
  NetworkVO network=new NetworkVO(1001,TrafficType.Control,GuestIpType.Direct,Mode.Dhcp,BroadcastDomainType.Native,1,1,1,1,1001,""String_Node_Str"",""String_Node_Str"",false,true,true,null);
  network.setGuruName(""String_Node_Str"");
  List<String> tags=new ArrayList<String>();
  tags.add(""String_Node_Str"");
  tags.add(""String_Node_Str"");
  network.setTags(tags);
  network=dao.persist(network);
  List<String> saveTags=network.getTags();
  Assert.assertTrue(saveTags.size() == 2 && saveTags.contains(""String_Node_Str"") && saveTags.contains(""String_Node_Str""));
  NetworkVO retrieved=dao.findById(1001l);
  List<String> retrievedTags=retrieved.getTags();
  Assert.assertTrue(retrievedTags.size() == 2 && retrievedTags.contains(""String_Node_Str"") && retrievedTags.contains(""String_Node_Str""));
  List<String> updateTags=new ArrayList<String>();
  updateTags.add(""String_Node_Str"");
  updateTags.add(""String_Node_Str"");
  retrieved.setTags(updateTags);
  dao.update(retrieved.getId(),retrieved);
  retrieved=dao.findById(1001l);
  retrievedTags=retrieved.getTags();
  Assert.assertTrue(""String_Node_Str"",retrievedTags.size() == 2 && retrievedTags.contains(""String_Node_Str"") && retrievedTags.contains(""String_Node_Str""));
  dao.expunge(1001l);
}"
89555,"@Override @ActionEvent(eventType=EventTypes.EVENT_USER_UPDATE,eventDescription=""String_Node_Str"") public UserAccount updateUser(UpdateUserCmd cmd){
  Long id=cmd.getId();
  String apiKey=cmd.getApiKey();
  String firstName=cmd.getFirstname();
  String email=cmd.getEmail();
  String lastName=cmd.getLastname();
  String password=cmd.getPassword();
  String secretKey=cmd.getSecretKey();
  String timeZone=cmd.getTimezone();
  String userName=cmd.getUsername();
  UserVO user=_userDao.getUser(id);
  if (user == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((apiKey == null && secretKey != null) || (apiKey != null && secretKey == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if (account != null && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new PermissionDeniedException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),account);
  if (firstName == null) {
    firstName=user.getFirstname();
  }
  if (lastName == null) {
    lastName=user.getLastname();
  }
  if (userName == null) {
    userName=user.getUsername();
  }
  if (password == null) {
    password=user.getPassword();
  }
  if (email == null) {
    email=user.getEmail();
  }
  if (timeZone == null) {
    timeZone=user.getTimezone();
  }
  if (apiKey == null) {
    apiKey=user.getApiKey();
  }
  if (secretKey == null) {
    secretKey=user.getSecretKey();
  }
  Long accountId=user.getAccountId();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  try {
    if (apiKey != null && secretKey != null) {
      Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
      if (apiKeyOwner != null) {
        User usr=apiKeyOwner.first();
        if (usr.getId() != id) {
          throw new InvalidParameterValueException(""String_Node_Str"" + apiKey + ""String_Node_Str""+ id+ ""String_Node_Str"");
        }
 else {
        }
      }
    }
    _userDao.update(id,userName,password,firstName,lastName,email,accountId,timeZone,apiKey,secretKey);
  }
 catch (  Throwable th) {
    s_logger.error(""String_Node_Str"",th);
    throw new CloudRuntimeException(""String_Node_Str"" + id);
  }
  return _userAccountDao.findById(id);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_USER_UPDATE,eventDescription=""String_Node_Str"") public UserAccount updateUser(UpdateUserCmd cmd){
  Long id=cmd.getId();
  String apiKey=cmd.getApiKey();
  String firstName=cmd.getFirstname();
  String email=cmd.getEmail();
  String lastName=cmd.getLastname();
  String password=cmd.getPassword();
  String secretKey=cmd.getSecretKey();
  String timeZone=cmd.getTimezone();
  String userName=cmd.getUsername();
  long callerUserId=UserContext.current().getCallerUserId();
  UserVO user=_userDao.getUser(id);
  if (user == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (apiKey != null) {
    Long apiKeyOwnerId=null;
    Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
    if (apiKeyOwner != null) {
      apiKeyOwnerId=apiKeyOwner.first().getId();
    }
    if ((apiKeyOwnerId == null || callerUserId != apiKeyOwnerId) && secretKey == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else     if (apiKeyOwnerId != null && callerUserId == apiKeyOwnerId && id != callerUserId) {
      apiKey=null;
    }
  }
  if (apiKey == null && secretKey != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account account=_accountDao.findById(user.getAccountId());
  if (account != null && (account.getId() == Account.ACCOUNT_ID_SYSTEM)) {
    throw new PermissionDeniedException(""String_Node_Str"" + id + ""String_Node_Str"");
  }
  checkAccess(UserContext.current().getCaller(),account);
  if (firstName == null) {
    firstName=user.getFirstname();
  }
  if (lastName == null) {
    lastName=user.getLastname();
  }
  if (userName == null) {
    userName=user.getUsername();
  }
  if (password == null) {
    password=user.getPassword();
  }
  if (email == null) {
    email=user.getEmail();
  }
  if (timeZone == null) {
    timeZone=user.getTimezone();
  }
  if (apiKey == null) {
    apiKey=user.getApiKey();
  }
  if (secretKey == null) {
    secretKey=user.getSecretKey();
  }
  Long accountId=user.getAccountId();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + id);
  }
  try {
    if (apiKey != null && secretKey != null) {
      Pair<User,Account> apiKeyOwner=_accountDao.findUserAccountByApiKey(apiKey);
      if (apiKeyOwner != null) {
        User usr=apiKeyOwner.first();
        if (usr.getId() != id) {
          throw new InvalidParameterValueException(""String_Node_Str"" + apiKey + ""String_Node_Str""+ id+ ""String_Node_Str"");
        }
 else {
        }
      }
    }
    _userDao.update(id,userName,password,firstName,lastName,email,accountId,timeZone,apiKey,secretKey);
  }
 catch (  Throwable th) {
    s_logger.error(""String_Node_Str"",th);
    throw new CloudRuntimeException(""String_Node_Str"" + id);
  }
  return _userAccountDao.findById(id);
}"
89556,"@Override public <T extends VMInstanceVO>T advanceStart(T vm,Map<VirtualMachineProfile.Param,Object> params,User caller,Account account,DeploymentPlan planToDeploy) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  long vmId=vm.getId();
  VirtualMachineGuru<T> vmGuru;
  if (vm.getHypervisorType() == HypervisorType.BareMetal) {
    vmGuru=getBareMetalVmGuru(vm);
  }
 else {
    vmGuru=getVmGuru(vm);
  }
  vm=vmGuru.findById(vm.getId());
  Ternary<T,ReservationContext,ItWorkVO> start=changeToStartState(vmGuru,vm,caller,account);
  if (start == null) {
    return vmGuru.findById(vmId);
  }
  vm=start.first();
  ReservationContext ctx=start.second();
  ItWorkVO work=start.third();
  T startedVm=null;
  ServiceOfferingVO offering=_offeringDao.findById(vm.getServiceOfferingId());
  VMTemplateVO template=_templateDao.findById(vm.getTemplateId());
  DataCenterDeployment plan=new DataCenterDeployment(vm.getDataCenterIdToDeployIn(),vm.getPodIdToDeployIn(),null,null,null);
  if (planToDeploy != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    plan=(DataCenterDeployment)planToDeploy;
  }
  HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
  boolean canRetry=true;
  try {
    Journal journal=start.second().getJournal();
    List<VolumeVO> vols=_volsDao.findReadyRootVolumesByInstance(vm.getId());
    for (    VolumeVO vol : vols) {
      Long volTemplateId=vol.getTemplateId();
      if (volTemplateId != null && volTemplateId.longValue() != template.getId()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(vol + ""String_Node_Str"" + vm+ ""String_Node_Str"");
        }
        continue;
      }
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      if (!pool.isInMaintenance()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        long rootVolDcId=pool.getDataCenterId();
        Long rootVolPodId=pool.getPodId();
        Long rootVolClusterId=pool.getClusterId();
        if (planToDeploy != null) {
          Long clusterIdSpecified=planToDeploy.getClusterId();
          if (clusterIdSpecified != null && rootVolClusterId != null) {
            if (rootVolClusterId.longValue() != clusterIdSpecified.longValue()) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + rootVolClusterId + ""String_Node_Str""+ clusterIdSpecified);
              }
              throw new ResourceUnavailableException(""String_Node_Str"" + vm,Cluster.class,clusterIdSpecified);
            }
          }
          plan=new DataCenterDeployment(planToDeploy.getDataCenterId(),planToDeploy.getPodId(),planToDeploy.getClusterId(),planToDeploy.getHostId(),vol.getPoolId());
        }
 else {
          plan=new DataCenterDeployment(rootVolDcId,rootVolPodId,rootVolClusterId,null,vol.getPoolId());
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(vol + ""String_Node_Str"" + rootVolDcId+ ""String_Node_Str""+ rootVolPodId+ ""String_Node_Str""+ rootVolClusterId);
          }
        }
      }
    }
    ExcludeList avoids=new ExcludeList();
    if (vm.getType().equals(VirtualMachine.Type.DomainRouter)) {
      List<DomainRouterVO> routers=_routerDao.findBy(vm.getAccountId(),vm.getDataCenterIdToDeployIn());
      for (      DomainRouterVO router : routers) {
        if (router.hostId != null) {
          avoids.addHost(router.hostId);
          s_logger.info(""String_Node_Str"" + router.hostId);
        }
      }
    }
    int retry=_retry;
    while (retry-- != 0) {
      VirtualMachineProfileImpl<T> vmProfile=new VirtualMachineProfileImpl<T>(vm,template,offering,account,params);
      DeployDestination dest=null;
      for (      DeploymentPlanner planner : _planners) {
        if (planner.canHandle(vmProfile,plan,avoids)) {
          dest=planner.plan(vmProfile,plan,avoids);
        }
 else {
          continue;
        }
        if (dest != null) {
          avoids.addHost(dest.getHost().getId());
          journal.record(""String_Node_Str"",vmProfile,dest);
          break;
        }
      }
      if (dest == null) {
        if (vm.getType().equals(VirtualMachine.Type.DomainRouter)) {
          avoids=new ExcludeList();
          s_logger.info(""String_Node_Str"");
          for (          DeploymentPlanner planner : _planners) {
            if (planner.canHandle(vmProfile,plan,avoids)) {
              dest=planner.plan(vmProfile,plan,avoids);
            }
 else {
              continue;
            }
            if (dest != null) {
              avoids.addHost(dest.getHost().getId());
              journal.record(""String_Node_Str"",vmProfile,dest);
              break;
            }
          }
        }
        if (dest == null)         throw new InsufficientServerCapacityException(""String_Node_Str"" + vmProfile,DataCenter.class,plan.getDataCenterId());
      }
      long destHostId=dest.getHost().getId();
      try {
        if (!changeState(vm,Event.OperationRetry,destHostId,work,Step.Prepare)) {
          throw new ConcurrentOperationException(""String_Node_Str"");
        }
      }
 catch (      NoTransitionException e1) {
        throw new ConcurrentOperationException(e1.getMessage());
      }
      try {
        _networkMgr.prepare(vmProfile,dest,ctx);
        if (vm.getHypervisorType() != HypervisorType.BareMetal) {
          _storageMgr.prepare(vmProfile,dest);
        }
        vmGuru.finalizeVirtualMachineProfile(vmProfile,dest,ctx);
        VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
        Commands cmds=new Commands(OnError.Stop);
        cmds.addCommand(new StartCommand(vmTO));
        vmGuru.finalizeDeployment(cmds,vmProfile,dest,ctx);
        vm.setPodId(dest.getPod().getId());
        work=_workDao.findById(work.getId());
        if (work == null || work.getStep() != Step.Prepare) {
          throw new ConcurrentOperationException(""String_Node_Str"" + work);
        }
        _workDao.updateStep(work,Step.Starting);
        _agentMgr.send(destHostId,cmds);
        _workDao.updateStep(work,Step.Started);
        Answer startAnswer=cmds.getAnswer(StartAnswer.class);
        if (startAnswer != null && startAnswer.getResult()) {
          if (vmGuru.finalizeStart(vmProfile,destHostId,cmds,ctx)) {
            if (!changeState(vm,Event.OperationSucceeded,destHostId,work,Step.Done)) {
              throw new ConcurrentOperationException(""String_Node_Str"");
            }
            startedVm=vm;
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + vm);
            }
            return startedVm;
          }
 else {
            if (s_logger.isDebugEnabled()) {
              s_logger.info(""String_Node_Str"" + vm);
            }
            StopCommand cmd=new StopCommand(vm.getInstanceName());
            StopAnswer answer=(StopAnswer)_agentMgr.easySend(destHostId,cmd);
            if (answer == null || !answer.getResult()) {
              s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
              canRetry=false;
              _haMgr.scheduleStop(vm,destHostId,WorkType.ForceStop);
              throw new ExecutionException(""String_Node_Str"" + vm + ""String_Node_Str"");
            }
          }
        }
        s_logger.info(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ (startAnswer == null ? ""String_Node_Str"" : startAnswer.getDetails()));
      }
 catch (      OperationTimedoutException e) {
        s_logger.debug(""String_Node_Str"" + dest.getHost());
        if (e.isActive()) {
          _haMgr.scheduleStop(vm,destHostId,WorkType.CheckStop);
        }
        canRetry=false;
        throw new AgentUnavailableException(""String_Node_Str"" + vm.getHostName(),destHostId,e);
      }
catch (      ResourceUnavailableException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
            throw e;
          }
        }
      }
catch (      InsufficientCapacityException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
          }
        }
      }
catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + vm,e);
        throw new AgentUnavailableException(""String_Node_Str"",destHostId,e);
      }
 finally {
        if (startedVm == null && canRetry) {
          _workDao.updateStep(work,Step.Release);
          cleanup(vmGuru,vmProfile,work,Event.OperationFailed,false,caller,account);
        }
      }
    }
  }
  finally {
    if (startedVm == null) {
      if (vm.getType().equals(VirtualMachine.Type.User) && (vm.getLastHostId() == null)) {
        _accountMgr.decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
      }
      if (canRetry) {
        try {
          changeState(vm,Event.OperationFailed,null,work,Step.Done);
        }
 catch (        NoTransitionException e) {
          throw new ConcurrentOperationException(e.getMessage());
        }
      }
    }
  }
  return startedVm;
}","@Override public <T extends VMInstanceVO>T advanceStart(T vm,Map<VirtualMachineProfile.Param,Object> params,User caller,Account account,DeploymentPlan planToDeploy) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  long vmId=vm.getId();
  VirtualMachineGuru<T> vmGuru;
  if (vm.getHypervisorType() == HypervisorType.BareMetal) {
    vmGuru=getBareMetalVmGuru(vm);
  }
 else {
    vmGuru=getVmGuru(vm);
  }
  vm=vmGuru.findById(vm.getId());
  Ternary<T,ReservationContext,ItWorkVO> start=changeToStartState(vmGuru,vm,caller,account);
  if (start == null) {
    return vmGuru.findById(vmId);
  }
  vm=start.first();
  ReservationContext ctx=start.second();
  ItWorkVO work=start.third();
  T startedVm=null;
  ServiceOfferingVO offering=_offeringDao.findById(vm.getServiceOfferingId());
  VMTemplateVO template=_templateDao.findById(vm.getTemplateId());
  DataCenterDeployment plan=new DataCenterDeployment(vm.getDataCenterIdToDeployIn(),vm.getPodIdToDeployIn(),null,null,null);
  if (planToDeploy != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    plan=(DataCenterDeployment)planToDeploy;
  }
  HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
  boolean canRetry=true;
  try {
    Journal journal=start.second().getJournal();
    ExcludeList avoids=new ExcludeList();
    if (vm.getType().equals(VirtualMachine.Type.DomainRouter)) {
      List<DomainRouterVO> routers=_routerDao.findBy(vm.getAccountId(),vm.getDataCenterIdToDeployIn());
      for (      DomainRouterVO router : routers) {
        if (router.hostId != null) {
          avoids.addHost(router.hostId);
          s_logger.info(""String_Node_Str"" + router.hostId);
        }
      }
    }
    int retry=_retry;
    while (retry-- != 0) {
      List<VolumeVO> vols=_volsDao.findReadyRootVolumesByInstance(vm.getId());
      for (      VolumeVO vol : vols) {
        Long volTemplateId=vol.getTemplateId();
        if (volTemplateId != null && volTemplateId.longValue() != template.getId()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(vol + ""String_Node_Str"" + vm+ ""String_Node_Str"");
          }
          continue;
        }
        StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
        if (!pool.isInMaintenance()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"");
          }
          long rootVolDcId=pool.getDataCenterId();
          Long rootVolPodId=pool.getPodId();
          Long rootVolClusterId=pool.getClusterId();
          if (planToDeploy != null) {
            Long clusterIdSpecified=planToDeploy.getClusterId();
            if (clusterIdSpecified != null && rootVolClusterId != null) {
              if (rootVolClusterId.longValue() != clusterIdSpecified.longValue()) {
                if (s_logger.isDebugEnabled()) {
                  s_logger.debug(""String_Node_Str"" + rootVolClusterId + ""String_Node_Str""+ clusterIdSpecified);
                }
                throw new ResourceUnavailableException(""String_Node_Str"" + vm,Cluster.class,clusterIdSpecified);
              }
            }
            plan=new DataCenterDeployment(planToDeploy.getDataCenterId(),planToDeploy.getPodId(),planToDeploy.getClusterId(),planToDeploy.getHostId(),vol.getPoolId());
          }
 else {
            plan=new DataCenterDeployment(rootVolDcId,rootVolPodId,rootVolClusterId,null,vol.getPoolId());
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(vol + ""String_Node_Str"" + rootVolDcId+ ""String_Node_Str""+ rootVolPodId+ ""String_Node_Str""+ rootVolClusterId);
            }
          }
        }
      }
      VirtualMachineProfileImpl<T> vmProfile=new VirtualMachineProfileImpl<T>(vm,template,offering,account,params);
      DeployDestination dest=null;
      for (      DeploymentPlanner planner : _planners) {
        if (planner.canHandle(vmProfile,plan,avoids)) {
          dest=planner.plan(vmProfile,plan,avoids);
        }
 else {
          continue;
        }
        if (dest != null) {
          avoids.addHost(dest.getHost().getId());
          journal.record(""String_Node_Str"",vmProfile,dest);
          break;
        }
      }
      if (dest == null) {
        if (vm.getType().equals(VirtualMachine.Type.DomainRouter)) {
          avoids=new ExcludeList();
          s_logger.info(""String_Node_Str"");
          for (          DeploymentPlanner planner : _planners) {
            if (planner.canHandle(vmProfile,plan,avoids)) {
              dest=planner.plan(vmProfile,plan,avoids);
            }
 else {
              continue;
            }
            if (dest != null) {
              avoids.addHost(dest.getHost().getId());
              journal.record(""String_Node_Str"",vmProfile,dest);
              break;
            }
          }
        }
        if (dest == null) {
          throw new InsufficientServerCapacityException(""String_Node_Str"" + vmProfile,DataCenter.class,plan.getDataCenterId());
        }
      }
      long destHostId=dest.getHost().getId();
      try {
        if (!changeState(vm,Event.OperationRetry,destHostId,work,Step.Prepare)) {
          throw new ConcurrentOperationException(""String_Node_Str"");
        }
      }
 catch (      NoTransitionException e1) {
        throw new ConcurrentOperationException(e1.getMessage());
      }
      try {
        _networkMgr.prepare(vmProfile,dest,ctx);
        if (vm.getHypervisorType() != HypervisorType.BareMetal) {
          _storageMgr.prepare(vmProfile,dest);
        }
        vmGuru.finalizeVirtualMachineProfile(vmProfile,dest,ctx);
        VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
        Commands cmds=new Commands(OnError.Stop);
        cmds.addCommand(new StartCommand(vmTO));
        vmGuru.finalizeDeployment(cmds,vmProfile,dest,ctx);
        vm.setPodId(dest.getPod().getId());
        work=_workDao.findById(work.getId());
        if (work == null || work.getStep() != Step.Prepare) {
          throw new ConcurrentOperationException(""String_Node_Str"" + work);
        }
        _workDao.updateStep(work,Step.Starting);
        _agentMgr.send(destHostId,cmds);
        _workDao.updateStep(work,Step.Started);
        Answer startAnswer=cmds.getAnswer(StartAnswer.class);
        if (startAnswer != null && startAnswer.getResult()) {
          if (vmGuru.finalizeStart(vmProfile,destHostId,cmds,ctx)) {
            if (!changeState(vm,Event.OperationSucceeded,destHostId,work,Step.Done)) {
              throw new ConcurrentOperationException(""String_Node_Str"");
            }
            startedVm=vm;
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + vm);
            }
            return startedVm;
          }
 else {
            if (s_logger.isDebugEnabled()) {
              s_logger.info(""String_Node_Str"" + vm);
            }
            StopCommand cmd=new StopCommand(vm.getInstanceName());
            StopAnswer answer=(StopAnswer)_agentMgr.easySend(destHostId,cmd);
            if (answer == null || !answer.getResult()) {
              s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
              canRetry=false;
              _haMgr.scheduleStop(vm,destHostId,WorkType.ForceStop);
              throw new ExecutionException(""String_Node_Str"" + vm + ""String_Node_Str"");
            }
          }
        }
        s_logger.info(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ (startAnswer == null ? ""String_Node_Str"" : startAnswer.getDetails()));
      }
 catch (      OperationTimedoutException e) {
        s_logger.debug(""String_Node_Str"" + dest.getHost());
        if (e.isActive()) {
          _haMgr.scheduleStop(vm,destHostId,WorkType.CheckStop);
        }
        canRetry=false;
        throw new AgentUnavailableException(""String_Node_Str"" + vm.getHostName(),destHostId,e);
      }
catch (      ResourceUnavailableException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
            throw e;
          }
        }
      }
catch (      InsufficientCapacityException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
          }
        }
      }
catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + vm,e);
        throw new AgentUnavailableException(""String_Node_Str"",destHostId,e);
      }
 finally {
        if (startedVm == null && canRetry) {
          _workDao.updateStep(work,Step.Release);
          cleanup(vmGuru,vmProfile,work,Event.OperationFailed,false,caller,account);
        }
      }
    }
  }
  finally {
    if (startedVm == null) {
      if (vm.getType().equals(VirtualMachine.Type.User) && (vm.getLastHostId() == null)) {
        _accountMgr.decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
      }
      if (canRetry) {
        try {
          changeState(vm,Event.OperationFailed,null,work,Step.Done);
        }
 catch (        NoTransitionException e) {
          throw new ConcurrentOperationException(e.getMessage());
        }
      }
    }
  }
  return startedVm;
}"
89557,"@Override public void scheduleRestart(VMInstanceVO vm,final boolean investigate){
  Long hostId=vm.getHostId();
  if (hostId == null) {
    _itMgr.stateTransitTo(vm,Event.OperationFailed,null);
    return;
  }
  if (!investigate) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm.toString());
    }
    short alertType=AlertManager.ALERT_TYPE_USERVM;
    if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {
      alertType=AlertManager.ALERT_TYPE_DOMAIN_ROUTER;
    }
 else     if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {
      alertType=AlertManager.ALERT_TYPE_CONSOLE_PROXY;
    }
    if (!(_forceHA || vm.isHaEnabled())) {
      String hostDesc=""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ vm.getDataCenterIdToDeployIn()+ ""String_Node_Str""+ vm.getPodIdToDeployIn();
      _alertMgr.sendAlert(alertType,vm.getDataCenterIdToDeployIn(),vm.getPodIdToDeployIn(),""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ hostDesc,""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ vm.getHostId()+ ""String_Node_Str"");
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
    }
    try {
      _itMgr.advanceStop(vm,true,_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
    }
 catch (    ResourceUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
catch (    ConcurrentOperationException e) {
    }
  }
  List<HaWorkVO> items=_haDao.findPreviousHA(vm.getId());
  int maxRetries=0;
  for (  HaWorkVO item : items) {
    if (maxRetries < item.getTimesTried() && !item.canScheduleNew(_timeBetweenFailures)) {
      maxRetries=item.getTimesTried();
      break;
    }
  }
  HaWorkVO work=new HaWorkVO(vm.getId(),vm.getType(),WorkType.HA,investigate ? Step.Investigating : Step.Scheduled,hostId,vm.getState(),maxRetries + 1,vm.getUpdated());
  _haDao.persist(work);
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + vm);
  }
  wakeupWorkers();
}","@Override public void scheduleRestart(VMInstanceVO vm,boolean investigate){
  Long hostId=vm.getHostId();
  if (hostId == null) {
    try {
      s_logger.debug(""String_Node_Str"" + vm);
      _itMgr.stateTransitTo(vm,Event.OperationFailed,null);
    }
 catch (    NoTransitionException e) {
    }
    return;
  }
  if (!investigate) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm.toString());
    }
    short alertType=AlertManager.ALERT_TYPE_USERVM;
    if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {
      alertType=AlertManager.ALERT_TYPE_DOMAIN_ROUTER;
    }
 else     if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {
      alertType=AlertManager.ALERT_TYPE_CONSOLE_PROXY;
    }
    if (!(_forceHA || vm.isHaEnabled())) {
      String hostDesc=""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ vm.getDataCenterIdToDeployIn()+ ""String_Node_Str""+ vm.getPodIdToDeployIn();
      _alertMgr.sendAlert(alertType,vm.getDataCenterIdToDeployIn(),vm.getPodIdToDeployIn(),""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ hostDesc,""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ vm.getHostId()+ ""String_Node_Str"");
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
    }
    try {
      _itMgr.advanceStop(vm,true,_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
    }
 catch (    ResourceUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
catch (    ConcurrentOperationException e) {
    }
  }
  List<HaWorkVO> items=_haDao.findPreviousHA(vm.getId());
  int maxRetries=0;
  for (  HaWorkVO item : items) {
    if (maxRetries < item.getTimesTried() && !item.canScheduleNew(_timeBetweenFailures)) {
      maxRetries=item.getTimesTried();
      break;
    }
  }
  HaWorkVO work=new HaWorkVO(vm.getId(),vm.getType(),WorkType.HA,investigate ? Step.Investigating : Step.Scheduled,hostId,vm.getState(),maxRetries + 1,vm.getUpdated());
  _haDao.persist(work);
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + vm);
  }
  wakeupWorkers();
}"
89558,"@Override @DB public UserVm recoverVirtualMachine(RecoverVMCmd cmd) throws ResourceAllocationException, CloudRuntimeException {
  Long vmId=cmd.getId();
  Account accountHandle=UserContext.current().getCaller();
  if (accountHandle != null && accountHandle.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountHandle.getId() + ""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId.longValue());
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if ((accountHandle != null) && !_domainDao.isChildDomain(accountHandle.getDomainId(),vm.getDomainId())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (vm.getState() != State.Destroyed) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  Transaction txn=Transaction.currentTxn();
  AccountVO account=null;
  txn.start();
  account=_accountDao.lockRow(vm.getAccountId(),true);
  if (account.getRemoved() != null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (_accountMgr.resourceLimitExceeded(account,ResourceType.user_vm)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    txn.commit();
    throw rae;
  }
  _haMgr.cancelDestroy(vm,vm.getHostId());
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.user_vm);
  if (!_itMgr.stateTransitTo(vm,VirtualMachine.Event.RecoveryRequested,null)) {
    s_logger.debug(""String_Node_Str"" + vmId);
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
  for (  VolumeVO volume : volumes) {
    if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
      Long templateId=volume.getTemplateId();
      Long diskOfferingId=volume.getDiskOfferingId();
      Long offeringId=null;
      if (diskOfferingId != null) {
        DiskOfferingVO offering=_diskOfferingDao.findById(diskOfferingId);
        if (offering != null && (offering.getType() == DiskOfferingVO.Type.Disk)) {
          offeringId=offering.getId();
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),offeringId,templateId,volume.getSize());
      _usageEventDao.persist(usageEvent);
    }
  }
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.volume,new Long(volumes.size()));
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName(),vm.getServiceOfferingId(),vm.getTemplateId(),vm.getHypervisorType().toString());
  _usageEventDao.persist(usageEvent);
  txn.commit();
  return _vmDao.findById(vmId);
}","@Override @DB public UserVm recoverVirtualMachine(RecoverVMCmd cmd) throws ResourceAllocationException, CloudRuntimeException {
  Long vmId=cmd.getId();
  Account accountHandle=UserContext.current().getCaller();
  if (accountHandle != null && accountHandle.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountHandle.getId() + ""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId.longValue());
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if ((accountHandle != null) && !_domainDao.isChildDomain(accountHandle.getDomainId(),vm.getDomainId())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (vm.getState() != State.Destroyed) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  Transaction txn=Transaction.currentTxn();
  AccountVO account=null;
  txn.start();
  account=_accountDao.lockRow(vm.getAccountId(),true);
  if (account.getRemoved() != null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (_accountMgr.resourceLimitExceeded(account,ResourceType.user_vm)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    txn.commit();
    throw rae;
  }
  _haMgr.cancelDestroy(vm,vm.getHostId());
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.user_vm);
  try {
    if (!_itMgr.stateTransitTo(vm,VirtualMachine.Event.RecoveryRequested,null)) {
      s_logger.debug(""String_Node_Str"" + vmId);
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
  }
 catch (  NoTransitionException e) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
  for (  VolumeVO volume : volumes) {
    if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
      Long templateId=volume.getTemplateId();
      Long diskOfferingId=volume.getDiskOfferingId();
      Long offeringId=null;
      if (diskOfferingId != null) {
        DiskOfferingVO offering=_diskOfferingDao.findById(diskOfferingId);
        if (offering != null && (offering.getType() == DiskOfferingVO.Type.Disk)) {
          offeringId=offering.getId();
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),offeringId,templateId,volume.getSize());
      _usageEventDao.persist(usageEvent);
    }
  }
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.volume,new Long(volumes.size()));
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName(),vm.getServiceOfferingId(),vm.getTemplateId(),vm.getHypervisorType().toString());
  _usageEventDao.persist(usageEvent);
  txn.commit();
  return _vmDao.findById(vmId);
}"
89559,"private void updateVmStateForFailedVmCreation(Long vmId){
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm != null) {
    if (vm.getState().equals(State.Stopped)) {
      _itMgr.stateTransitTo(vm,VirtualMachine.Event.OperationFailed,null);
      List<VolumeVO> volumesForThisVm=_volsDao.findByInstance(vm.getId());
      for (      VolumeVO volume : volumesForThisVm) {
        try {
          if (volume.getState() != Volume.State.Destroy) {
            _storageMgr.destroyVolume(volume);
          }
          if (volume.getState() == Volume.State.Ready) {
            UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName());
            _usageEventDao.persist(usageEvent);
          }
        }
 catch (        ConcurrentOperationException e) {
          s_logger.warn(""String_Node_Str"" + volume.getId() + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName());
      _usageEventDao.persist(usageEvent);
    }
  }
}","private void updateVmStateForFailedVmCreation(Long vmId){
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm != null) {
    if (vm.getState().equals(State.Stopped)) {
      try {
        _itMgr.stateTransitTo(vm,VirtualMachine.Event.OperationFailed,null);
      }
 catch (      NoTransitionException e1) {
        s_logger.warn(e1.getMessage());
      }
      List<VolumeVO> volumesForThisVm=_volsDao.findByInstance(vm.getId());
      for (      VolumeVO volume : volumesForThisVm) {
        try {
          if (volume.getState() != Volume.State.Destroy) {
            _storageMgr.destroyVolume(volume);
          }
          if (volume.getState() == Volume.State.Ready) {
            UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName());
            _usageEventDao.persist(usageEvent);
          }
        }
 catch (        ConcurrentOperationException e) {
          s_logger.warn(""String_Node_Str"" + volume.getId() + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName());
      _usageEventDao.persist(usageEvent);
    }
  }
}"
89560,"boolean stateTransitTo(VMInstanceVO vm,VirtualMachine.Event e,Long hostId);","boolean stateTransitTo(VMInstanceVO vm,VirtualMachine.Event e,Long hostId) throws NoTransitionException ;"
89561,"@Override public <T extends VMInstanceVO>boolean advanceStop(T vm,boolean forced,User user,Account account) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  long vmId=vm.getId();
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return true;
  }
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  try {
    if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId())) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    if (!forced) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
    vm=vmGuru.findById(vmId);
    if (vm == null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vmId);
      }
      return true;
    }
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  if ((vm.getState() == State.Starting || vm.getState() == State.Stopping || vm.getState() == State.Migrating) && forced) {
    ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
    if (work != null) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl<T>(vm),work,Event.StopRequested,forced,user,account)) {
        try {
          return stateTransitTo(vm,Event.AgentReportStopped,null);
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          return false;
        }
      }
    }
  }
  if (vm.getHostId() != null) {
    String routerPrivateIp=null;
    if (vm.getType() == VirtualMachine.Type.DomainRouter) {
      routerPrivateIp=vm.getPrivateIpAddress();
    }
    StopCommand stop=new StopCommand(vm,vm.getInstanceName(),null,routerPrivateIp);
    boolean stopped=false;
    StopAnswer answer=null;
    try {
      answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
    }
 catch (    AgentUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
 finally {
      if (!stopped) {
        if (!forced) {
          s_logger.warn(""String_Node_Str"" + vm);
          try {
            stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
          }
 catch (          NoTransitionException e) {
            s_logger.warn(""String_Node_Str"" + vm);
          }
          return false;
        }
 else {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
          vmGuru.finalizeStop(profile,answer);
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,forced);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      _storageMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  vm.setReservationId(null);
  try {
    return stateTransitTo(vm,Event.OperationSucceeded,null);
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    return false;
  }
}","@Override public <T extends VMInstanceVO>boolean advanceStop(T vm,boolean forced,User user,Account account) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return true;
  }
  Long hostId=vm.getHostId();
  if (hostId == null) {
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    NoTransitionException e) {
      s_logger.warn(e.getMessage());
    }
    return true;
  }
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  try {
    if (!stateTransitTo(vm,forced ? Event.AgentReportStopped : Event.StopRequested,vm.getHostId(),null)) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  if ((vm.getState() == State.Starting || vm.getState() == State.Stopping || vm.getState() == State.Migrating) && forced) {
    ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
    if (work != null) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl<T>(vm),work,Event.StopRequested,forced,user,account)) {
        try {
          return stateTransitTo(vm,Event.AgentReportStopped,null);
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          return false;
        }
      }
    }
  }
  if (vm.getHostId() != null) {
    String routerPrivateIp=null;
    if (vm.getType() == VirtualMachine.Type.DomainRouter) {
      routerPrivateIp=vm.getPrivateIpAddress();
    }
    StopCommand stop=new StopCommand(vm,vm.getInstanceName(),null,routerPrivateIp);
    boolean stopped=false;
    StopAnswer answer=null;
    try {
      answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
    }
 catch (    AgentUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
 finally {
      if (!stopped) {
        if (!forced) {
          s_logger.warn(""String_Node_Str"" + vm);
          try {
            stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
          }
 catch (          NoTransitionException e) {
            s_logger.warn(""String_Node_Str"" + vm);
          }
          return false;
        }
 else {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
          vmGuru.finalizeStop(profile,answer);
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,forced);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      _storageMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  vm.setReservationId(null);
  try {
    return stateTransitTo(vm,Event.OperationSucceeded,null);
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    return false;
  }
}"
89562,"@Override public boolean updateState(State oldState,Event event,State newState,VirtualMachine vm,Long hostId){
  if (newState == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + oldState.toString() + ""String_Node_Str""+ event.toString());
    }
    return false;
  }
  VMInstanceVO vmi=(VMInstanceVO)vm;
  Long oldHostId=vmi.getHostId();
  SearchCriteria<VMInstanceVO> sc=StateChangeSearch.create();
  sc.setParameters(""String_Node_Str"",vmi.getId());
  sc.setParameters(""String_Node_Str"",oldState);
  sc.setParameters(""String_Node_Str"",vmi.getHostId());
  sc.setParameters(""String_Node_Str"",vmi.getUpdated());
  vmi.incrUpdated();
  UpdateBuilder ub=getUpdateBuilder(vmi);
  ub.set(vmi,""String_Node_Str"",newState);
  ub.set(vmi,""String_Node_Str"",hostId);
  ub.set(vmi,_updateTimeAttr,new Date());
  int result=update(vmi,sc);
  if (result == 0 && s_logger.isDebugEnabled()) {
    vmi.setState(oldState);
    vmi.setHostId(oldHostId);
    vmi.decrUpdated();
    VMInstanceVO vo=findById(vm.getId());
    StringBuilder str=new StringBuilder(""String_Node_Str"").append(vo.toString());
    str.append(""String_Node_Str"").append(vo.getHostId()).append(""String_Node_Str"").append(vo.getState().toString()).append(""String_Node_Str"").append(vo.getUpdated());
    str.append(""String_Node_Str"").append(vm.getHostId()).append(""String_Node_Str"").append(vm.getState().toString()).append(""String_Node_Str"").append(vmi.getUpdated()).append(""String_Node_Str"");
    s_logger.debug(str.toString());
  }
  return result > 0;
}","@Override public boolean updateState(State oldState,Event event,State newState,VirtualMachine vm,Long hostId){
  if (newState == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + oldState.toString() + ""String_Node_Str""+ event.toString());
    }
    return false;
  }
  VMInstanceVO vmi=(VMInstanceVO)vm;
  Long oldHostId=vmi.getHostId();
  Long oldUpdated=vmi.getUpdated();
  Date oldUpdateDate=vmi.getUpdateTime();
  SearchCriteria<VMInstanceVO> sc=StateChangeSearch.create();
  sc.setParameters(""String_Node_Str"",vmi.getId());
  sc.setParameters(""String_Node_Str"",oldState);
  sc.setParameters(""String_Node_Str"",vmi.getHostId());
  sc.setParameters(""String_Node_Str"",vmi.getUpdated());
  vmi.incrUpdated();
  UpdateBuilder ub=getUpdateBuilder(vmi);
  ub.set(vmi,""String_Node_Str"",newState);
  ub.set(vmi,""String_Node_Str"",hostId);
  ub.set(vmi,_updateTimeAttr,new Date());
  int result=update(vmi,sc);
  if (result == 0 && s_logger.isDebugEnabled()) {
    VMInstanceVO vo=findById(vm.getId());
    StringBuilder str=new StringBuilder(""String_Node_Str"").append(vo.toString());
    str.append(""String_Node_Str"").append(vo.getHostId()).append(""String_Node_Str"").append(vo.getState().toString()).append(""String_Node_Str"").append(vo.getUpdated()).append(""String_Node_Str"").append(vo.getUpdateTime());
    str.append(""String_Node_Str"").append(vm.getHostId()).append(""String_Node_Str"").append(vm.getState().toString()).append(""String_Node_Str"").append(vmi.getUpdated()).append(""String_Node_Str"").append(vo.getUpdateTime());
    str.append(""String_Node_Str"").append(oldHostId).append(""String_Node_Str"").append(oldState).append(""String_Node_Str"").append(oldUpdated).append(""String_Node_Str"").append(oldUpdateDate).append(""String_Node_Str"");
    s_logger.debug(str.toString());
  }
  return result > 0;
}"
89563,"protected void clear(){
  _changes.clear();
  if (_collectionChanges != null) {
    _collectionChanges.clear();
    _collectionChanges=null;
  }
}","public void clear(){
  _changes.clear();
  if (_collectionChanges != null) {
    _collectionChanges.clear();
    _collectionChanges=null;
  }
}"
89564,"public boolean transitTo(V vo,E e,Long id,StateDao<S,E,V> dao) throws NoTransitionException {
  S currentState=vo.getState();
  S nextState=getNextState(currentState,e);
  boolean transitionStatus=true;
  if (nextState == null) {
    transitionStatus=false;
  }
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.preStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,id);
  }
  Long oldHostId=vo.getHostId();
  transitionStatus=dao.updateState(currentState,e,nextState,vo,id);
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.postStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,oldHostId);
  }
  return transitionStatus;
}","public boolean transitTo(V vo,E e,Long id,StateDao<S,E,V> dao) throws NoTransitionException {
  S currentState=vo.getState();
  S nextState=getNextState(currentState,e);
  boolean transitionStatus=true;
  if (nextState == null) {
    transitionStatus=false;
  }
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.preStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,id);
  }
  Long oldHostId=vo.getHostId();
  transitionStatus=dao.updateState(currentState,e,nextState,vo,id);
  if (!transitionStatus) {
    return false;
  }
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.postStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,oldHostId);
  }
  return true;
}"
89565,"@Override public JsonElement serialize(List<PortConfig> src,Type typeOfSrc,JsonSerializationContext context){
  if (src.size() == 0) {
    s_logger.info(""String_Node_Str"");
    return new JsonNull();
  }
  s_logger.debug(""String_Node_Str"");
  JsonArray array=new JsonArray();
  for (  PortConfig pc : src) {
    array.add(s_gson.toJsonTree(pc));
  }
  return array;
}","@Override public JsonElement serialize(List<PortConfig> src,Type typeOfSrc,JsonSerializationContext context){
  if (src.size() == 0) {
    return new JsonNull();
  }
  JsonArray array=new JsonArray();
  for (  PortConfig pc : src) {
    array.add(s_gson.toJsonTree(pc));
  }
  return array;
}"
89566,"protected VIF getCorrectVif(Connection conn,VM router,String vlanId){
  try {
    Set<VIF> routerVIFs=router.getVIFs(conn);
    for (    VIF vif : routerVIFs) {
      Network vifNetwork=vif.getNetwork(conn);
      if (vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
        if (vifNetwork.getUuid(conn).equals(_host.publicNetwork)) {
          return vif;
        }
      }
 else {
        if (vifNetwork.getNameLabel(conn).equals(""String_Node_Str"" + vlanId)) {
          return vif;
        }
      }
    }
  }
 catch (  XmlRpcException e) {
    String msg=""String_Node_Str"" + e.getMessage();
    s_logger.warn(msg,e);
  }
catch (  XenAPIException e) {
    String msg=""String_Node_Str"" + e.toString();
    s_logger.warn(msg,e);
  }
  return null;
}","protected VIF getCorrectVif(Connection conn,VM router,Network network) throws XmlRpcException, XenAPIException {
  Set<VIF> routerVIFs=router.getVIFs(conn);
  for (  VIF vif : routerVIFs) {
    Network vifNetwork=vif.getNetwork(conn);
    if (vifNetwork.getUuid(conn).equals(network.getUuid(conn))) {
      return vif;
    }
  }
  return null;
}"
89567,"@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof CreateCommand) {
    return execute((CreateCommand)cmd);
  }
 else   if (cmd instanceof SetPortForwardingRulesCommand) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (cmd instanceof SetStaticNatRulesCommand) {
    return execute((SetStaticNatRulesCommand)cmd);
  }
 else   if (cmd instanceof LoadBalancerConfigCommand) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (cmd instanceof IPAssocCommand) {
    return execute((IPAssocCommand)cmd);
  }
 else   if (cmd instanceof CheckConsoleProxyLoadCommand) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof WatchConsoleProxyLoadCommand) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof SavePasswordCommand) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (cmd instanceof DhcpEntryCommand) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (cmd instanceof VmDataCommand) {
    return execute((VmDataCommand)cmd);
  }
 else   if (cmd instanceof ReadyCommand) {
    return execute((ReadyCommand)cmd);
  }
 else   if (cmd instanceof GetHostStatsCommand) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (cmd instanceof GetVmStatsCommand) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (cmd instanceof CheckHealthCommand) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (cmd instanceof StopCommand) {
    return execute((StopCommand)cmd);
  }
 else   if (cmd instanceof RebootRouterCommand) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (cmd instanceof RebootCommand) {
    return execute((RebootCommand)cmd);
  }
 else   if (cmd instanceof CheckVirtualMachineCommand) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (cmd instanceof PrepareForMigrationCommand) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (cmd instanceof MigrateCommand) {
    return execute((MigrateCommand)cmd);
  }
 else   if (cmd instanceof DestroyCommand) {
    return execute((DestroyCommand)cmd);
  }
 else   if (cmd instanceof CreateStoragePoolCommand) {
    return execute((CreateStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof ModifyStoragePoolCommand) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof DeleteStoragePoolCommand) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof CopyVolumeCommand) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachVolumeCommand) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachIsoCommand) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (cmd instanceof ManageSnapshotCommand) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (cmd instanceof BackupSnapshotCommand) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotBackupCommand) {
    return execute((DeleteSnapshotBackupCommand)cmd);
  }
 else   if (cmd instanceof CreateVolumeFromSnapshotCommand) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotsDirCommand) {
    return execute((DeleteSnapshotsDirCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof UpgradeSnapshotCommand) {
    return execute((UpgradeSnapshotCommand)cmd);
  }
 else   if (cmd instanceof GetStorageStatsCommand) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (cmd instanceof PrimaryStorageDownloadCommand) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (cmd instanceof GetVncPortCommand) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (cmd instanceof SetupCommand) {
    return execute((SetupCommand)cmd);
  }
 else   if (cmd instanceof MaintainCommand) {
    return execute((MaintainCommand)cmd);
  }
 else   if (cmd instanceof PingTestCommand) {
    return execute((PingTestCommand)cmd);
  }
 else   if (cmd instanceof CheckOnHostCommand) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (cmd instanceof ModifySshKeysCommand) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (cmd instanceof PoolEjectCommand) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (cmd instanceof StartCommand) {
    return execute((StartCommand)cmd);
  }
 else   if (cmd instanceof RemoteAccessVpnCfgCommand) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (cmd instanceof VpnUsersCfgCommand) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (cmd instanceof CheckSshCommand) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (cmd instanceof SecurityIngressRulesCmd) {
    return execute((SecurityIngressRulesCmd)cmd);
  }
 else   if (cmd instanceof OvsCreateGreTunnelCommand) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (cmd instanceof OvsSetTagAndFlowCommand) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else   if (cmd instanceof OvsDeleteFlowCommand) {
    return execute((OvsDeleteFlowCommand)cmd);
  }
 else   if (cmd instanceof CleanupNetworkRulesCmd) {
    return execute((CleanupNetworkRulesCmd)cmd);
  }
 else   if (cmd instanceof NetworkRulesSystemVmCommand) {
    return execute((NetworkRulesSystemVmCommand)cmd);
  }
 else   if (cmd instanceof OvsCreateTunnelCommand) {
    return execute((OvsCreateTunnelCommand)cmd);
  }
 else   if (cmd instanceof OvsDestroyTunnelCommand) {
    return execute((OvsDestroyTunnelCommand)cmd);
  }
 else   if (cmd instanceof UpdateHostPasswordCommand) {
    return execute((UpdateHostPasswordCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}","@Override public Answer executeRequest(Command cmd){
  Class<? extends Command> clazz=cmd.getClass();
  if (clazz == CreateCommand.class) {
    return execute((CreateCommand)cmd);
  }
 else   if (clazz == SetPortForwardingRulesCommand.class) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (clazz == SetStaticNatRulesCommand.class) {
    return execute((SetStaticNatRulesCommand)cmd);
  }
 else   if (clazz == LoadBalancerConfigCommand.class) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (clazz == IPAssocCommand.class) {
    return execute((IPAssocCommand)cmd);
  }
 else   if (clazz == CheckConsoleProxyLoadCommand.class) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == WatchConsoleProxyLoadCommand.class) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == SavePasswordCommand.class) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (clazz == DhcpEntryCommand.class) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (clazz == VmDataCommand.class) {
    return execute((VmDataCommand)cmd);
  }
 else   if (clazz == ReadyCommand.class) {
    return execute((ReadyCommand)cmd);
  }
 else   if (clazz == GetHostStatsCommand.class) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (clazz == GetVmStatsCommand.class) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (clazz == CheckHealthCommand.class) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (clazz == StopCommand.class) {
    return execute((StopCommand)cmd);
  }
 else   if (clazz == RebootRouterCommand.class) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (clazz == RebootCommand.class) {
    return execute((RebootCommand)cmd);
  }
 else   if (clazz == CheckVirtualMachineCommand.class) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (clazz == PrepareForMigrationCommand.class) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (clazz == MigrateCommand.class) {
    return execute((MigrateCommand)cmd);
  }
 else   if (clazz == DestroyCommand.class) {
    return execute((DestroyCommand)cmd);
  }
 else   if (clazz == CreateStoragePoolCommand.class) {
    return execute((CreateStoragePoolCommand)cmd);
  }
 else   if (clazz == ModifyStoragePoolCommand.class) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (clazz == DeleteStoragePoolCommand.class) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (clazz == CopyVolumeCommand.class) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (clazz == AttachVolumeCommand.class) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (clazz == AttachIsoCommand.class) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (clazz == ManageSnapshotCommand.class) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (clazz == BackupSnapshotCommand.class) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (clazz == DeleteSnapshotBackupCommand.class) {
    return execute((DeleteSnapshotBackupCommand)cmd);
  }
 else   if (clazz == CreateVolumeFromSnapshotCommand.class) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (clazz == DeleteSnapshotsDirCommand.class) {
    return execute((DeleteSnapshotsDirCommand)cmd);
  }
 else   if (clazz == CreatePrivateTemplateFromVolumeCommand.class) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (clazz == CreatePrivateTemplateFromSnapshotCommand.class) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (clazz == UpgradeSnapshotCommand.class) {
    return execute((UpgradeSnapshotCommand)cmd);
  }
 else   if (clazz == GetStorageStatsCommand.class) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (clazz == PrimaryStorageDownloadCommand.class) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (clazz == GetVncPortCommand.class) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (clazz == SetupCommand.class) {
    return execute((SetupCommand)cmd);
  }
 else   if (clazz == MaintainCommand.class) {
    return execute((MaintainCommand)cmd);
  }
 else   if (clazz == PingTestCommand.class) {
    return execute((PingTestCommand)cmd);
  }
 else   if (clazz == CheckOnHostCommand.class) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (clazz == ModifySshKeysCommand.class) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (clazz == PoolEjectCommand.class) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (clazz == StartCommand.class) {
    return execute((StartCommand)cmd);
  }
 else   if (clazz == RemoteAccessVpnCfgCommand.class) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (clazz == VpnUsersCfgCommand.class) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (clazz == CheckSshCommand.class) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (clazz == SecurityIngressRulesCmd.class) {
    return execute((SecurityIngressRulesCmd)cmd);
  }
 else   if (clazz == OvsCreateGreTunnelCommand.class) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (clazz == OvsSetTagAndFlowCommand.class) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else   if (clazz == OvsDeleteFlowCommand.class) {
    return execute((OvsDeleteFlowCommand)cmd);
  }
 else   if (clazz == CleanupNetworkRulesCmd.class) {
    return execute((CleanupNetworkRulesCmd)cmd);
  }
 else   if (clazz == NetworkRulesSystemVmCommand.class) {
    return execute((NetworkRulesSystemVmCommand)cmd);
  }
 else   if (clazz == OvsCreateTunnelCommand.class) {
    return execute((OvsCreateTunnelCommand)cmd);
  }
 else   if (clazz == OvsDestroyTunnelCommand.class) {
    return execute((OvsDestroyTunnelCommand)cmd);
  }
 else   if (clazz == UpdateHostPasswordCommand.class) {
    return execute((UpdateHostPasswordCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}"
89568,"protected void assignPublicIpAddress(Connection conn,final String vmName,final String privateIpAddress,final String publicIpAddress,final boolean add,final boolean firstIP,final boolean sourceNat,final String vlanId,final String vlanGateway,final String vlanNetmask,final String vifMacAddress,String guestIp,Integer networkRate) throws InternalErrorException {
  try {
    VM router=getVM(conn,vmName);
    VIF correctVif=getCorrectVif(conn,router,vlanId);
    boolean addVif=false;
    boolean removeVif=false;
    if (add && correctVif == null) {
      addVif=true;
    }
 else     if (!add && firstIP) {
      removeVif=true;
    }
    if (addVif) {
      String vifDeviceNum=getLowestAvailableVIFDeviceNum(conn,router);
      if (vifDeviceNum == null) {
        throw new InternalErrorException(""String_Node_Str"" + router.getNameLabel(conn));
      }
      NicTO nic=new NicTO();
      nic.setMac(vifMacAddress);
      nic.setType(TrafficType.Public);
      if (vlanId == null) {
        nic.setBroadcastType(BroadcastDomainType.Native);
      }
 else {
        nic.setBroadcastType(BroadcastDomainType.Vlan);
        nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(vlanId));
      }
      nic.setDeviceId(Integer.parseInt(vifDeviceNum));
      nic.setNetworkRateMbps(networkRate);
      correctVif=createVif(conn,vmName,router,nic);
      correctVif.plug(conn);
      networkUsage(conn,privateIpAddress,""String_Node_Str"",""String_Node_Str"" + correctVif.getDevice(conn));
    }
    if (correctVif == null) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    String args=privateIpAddress;
    if (add) {
      args+=""String_Node_Str"";
    }
 else {
      args+=""String_Node_Str"";
    }
    String cidrSize=Long.toString(NetUtils.getCidrSize(vlanNetmask));
    if (sourceNat) {
      args+=""String_Node_Str"";
      args+=""String_Node_Str"";
      args+=publicIpAddress + ""String_Node_Str"" + cidrSize;
    }
 else     if (firstIP) {
      args+=""String_Node_Str"";
      args+=""String_Node_Str"";
      args+=publicIpAddress + ""String_Node_Str"" + cidrSize;
    }
 else {
      args+=""String_Node_Str"";
      args+=publicIpAddress;
    }
    args+=""String_Node_Str"";
    args+=""String_Node_Str"" + correctVif.getDevice(conn);
    String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",args);
    if (result == null || result.isEmpty()) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    if (removeVif) {
      Network network=correctVif.getNetwork(conn);
      networkUsage(conn,privateIpAddress,""String_Node_Str"",""String_Node_Str"" + correctVif.getDevice(conn));
      correctVif.unplug(conn);
      correctVif.destroy(conn);
      disableVlanNetwork(conn,network);
    }
  }
 catch (  XenAPIException e) {
    String msg=""String_Node_Str"" + e.toString();
    s_logger.warn(msg,e);
    throw new InternalErrorException(msg);
  }
catch (  final XmlRpcException e) {
    String msg=""String_Node_Str"" + e.getMessage();
    s_logger.warn(msg,e);
    throw new InternalErrorException(msg);
  }
}","protected void assignPublicIpAddress(Connection conn,String vmName,String privateIpAddress,String publicIpAddress,boolean add,boolean firstIP,boolean sourceNat,String vlanId,String vlanGateway,String vlanNetmask,String vifMacAddress,String guestIp,Integer networkRate,TrafficType trafficType,String[] tags) throws InternalErrorException {
  try {
    String tag=tags != null && tags.length > 0 ? tags[0] : null;
    VM router=getVM(conn,vmName);
    NicTO nic=new NicTO();
    nic.setMac(vifMacAddress);
    nic.setType(trafficType);
    if (vlanId == null) {
      nic.setBroadcastType(BroadcastDomainType.Native);
    }
 else {
      nic.setBroadcastType(BroadcastDomainType.Vlan);
      nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(vlanId));
    }
    nic.setDeviceId(0);
    nic.setNetworkRateMbps(networkRate);
    if (tags != null) {
      nic.setTags(Arrays.asList(tags));
    }
    Network network=getNetwork(conn,nic);
    VIF correctVif=getCorrectVif(conn,router,network);
    boolean addVif=false;
    boolean removeVif=false;
    if (add && correctVif == null) {
      addVif=true;
    }
 else     if (!add && firstIP) {
      removeVif=true;
    }
    if (addVif) {
      String vifDeviceNum=getLowestAvailableVIFDeviceNum(conn,router);
      if (vifDeviceNum == null) {
        throw new InternalErrorException(""String_Node_Str"" + router.getNameLabel(conn));
      }
      nic.setDeviceId(Integer.parseInt(vifDeviceNum));
      correctVif=createVif(conn,vmName,router,nic);
      correctVif.plug(conn);
      networkUsage(conn,privateIpAddress,""String_Node_Str"",""String_Node_Str"" + correctVif.getDevice(conn));
    }
    if (correctVif == null) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    String args=privateIpAddress;
    if (add) {
      args+=""String_Node_Str"";
    }
 else {
      args+=""String_Node_Str"";
    }
    String cidrSize=Long.toString(NetUtils.getCidrSize(vlanNetmask));
    if (sourceNat) {
      args+=""String_Node_Str"";
      args+=""String_Node_Str"";
      args+=publicIpAddress + ""String_Node_Str"" + cidrSize;
    }
 else     if (firstIP) {
      args+=""String_Node_Str"";
      args+=""String_Node_Str"";
      args+=publicIpAddress + ""String_Node_Str"" + cidrSize;
    }
 else {
      args+=""String_Node_Str"";
      args+=publicIpAddress;
    }
    args+=""String_Node_Str"";
    args+=""String_Node_Str"" + correctVif.getDevice(conn);
    String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",args);
    if (result == null || result.isEmpty()) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    if (removeVif) {
      network=correctVif.getNetwork(conn);
      networkUsage(conn,privateIpAddress,""String_Node_Str"",""String_Node_Str"" + correctVif.getDevice(conn));
      correctVif.unplug(conn);
      correctVif.destroy(conn);
      disableVlanNetwork(conn,network);
    }
  }
 catch (  XenAPIException e) {
    String msg=""String_Node_Str"" + e.toString();
    s_logger.warn(msg,e);
    throw new InternalErrorException(msg);
  }
catch (  final XmlRpcException e) {
    String msg=""String_Node_Str"" + e.getMessage();
    s_logger.warn(msg,e);
    throw new InternalErrorException(msg);
  }
}"
89569,"@Override public <T extends VMInstanceVO>boolean advanceStop(T vm,boolean forced,User user,Account account) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  long vmId=vm.getId();
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return true;
  }
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  try {
    if (!stateTransitTo(vm,Event.StopRequested,vm.getHostId())) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    if (!forced) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
    vm=vmGuru.findById(vmId);
    if (vm == null) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vmId);
      }
      return true;
    }
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  if ((vm.getState() == State.Starting || vm.getState() == State.Stopping || vm.getState() == State.Migrating) && forced) {
    ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
    if (work != null) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl<T>(vm),work,Event.StopRequested,forced,user,account)) {
        try {
          return stateTransitTo(vm,Event.AgentReportStopped,null);
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          return false;
        }
      }
    }
  }
  if (vm.getHostId() != null) {
    String routerPrivateIp=null;
    if (vm.getType() == VirtualMachine.Type.DomainRouter) {
      routerPrivateIp=vm.getPrivateIpAddress();
    }
    StopCommand stop=new StopCommand(vm,vm.getInstanceName(),null,routerPrivateIp);
    boolean stopped=false;
    StopAnswer answer=null;
    try {
      answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
    }
 catch (    AgentUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
 finally {
      if (!stopped) {
        if (!forced) {
          s_logger.warn(""String_Node_Str"" + vm);
          try {
            stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
          }
 catch (          NoTransitionException e) {
            s_logger.warn(""String_Node_Str"" + vm);
          }
          return false;
        }
 else {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
          vmGuru.finalizeStop(profile,answer);
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,forced);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      _storageMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  vm.setReservationId(null);
  try {
    return stateTransitTo(vm,Event.OperationSucceeded,null);
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    return false;
  }
}","@Override public <T extends VMInstanceVO>boolean advanceStop(T vm,boolean forced,User user,Account account) throws AgentUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  State state=vm.getState();
  if (state == State.Stopped) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (state == State.Destroyed || state == State.Expunging || state == State.Error) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm + ""String_Node_Str""+ state);
    }
    return true;
  }
  Long hostId=vm.getHostId();
  if (hostId == null) {
    try {
      stateTransitTo(vm,Event.AgentReportStopped,null,null);
    }
 catch (    NoTransitionException e) {
      s_logger.warn(e.getMessage());
    }
    return true;
  }
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  try {
    if (!stateTransitTo(vm,forced ? Event.AgentReportStopped : Event.StopRequested,vm.getHostId(),null)) {
      throw new ConcurrentOperationException(""String_Node_Str"");
    }
  }
 catch (  NoTransitionException e1) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState());
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  if ((vm.getState() == State.Starting || vm.getState() == State.Stopping || vm.getState() == State.Migrating) && forced) {
    ItWorkVO work=_workDao.findByOutstandingWork(vm.getId(),vm.getState());
    if (work != null) {
      if (cleanup(vmGuru,new VirtualMachineProfileImpl<T>(vm),work,Event.StopRequested,forced,user,account)) {
        try {
          return stateTransitTo(vm,Event.AgentReportStopped,null);
        }
 catch (        NoTransitionException e) {
          s_logger.warn(""String_Node_Str"" + vm);
          return false;
        }
      }
    }
  }
  if (vm.getHostId() != null) {
    String routerPrivateIp=null;
    if (vm.getType() == VirtualMachine.Type.DomainRouter) {
      routerPrivateIp=vm.getPrivateIpAddress();
    }
    StopCommand stop=new StopCommand(vm,vm.getInstanceName(),null,routerPrivateIp);
    boolean stopped=false;
    StopAnswer answer=null;
    try {
      answer=(StopAnswer)_agentMgr.send(vm.getHostId(),stop);
      stopped=answer.getResult();
      if (!stopped) {
        throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
      }
      vmGuru.finalizeStop(profile,answer);
    }
 catch (    AgentUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
 finally {
      if (!stopped) {
        if (!forced) {
          s_logger.warn(""String_Node_Str"" + vm);
          try {
            stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
          }
 catch (          NoTransitionException e) {
            s_logger.warn(""String_Node_Str"" + vm);
          }
          return false;
        }
 else {
          s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str"");
          vmGuru.finalizeStop(profile,answer);
        }
      }
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(vm + ""String_Node_Str"");
  }
  try {
    _networkMgr.release(profile,forced);
    s_logger.debug(""String_Node_Str"" + vm);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  try {
    if (vm.getHypervisorType() != HypervisorType.BareMetal) {
      _storageMgr.release(profile);
      s_logger.debug(""String_Node_Str"" + vm);
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
  vm.setReservationId(null);
  try {
    return stateTransitTo(vm,Event.OperationSucceeded,null);
  }
 catch (  NoTransitionException e) {
    s_logger.warn(e.getMessage());
    return false;
  }
}"
89570,"@Override public boolean updateState(State oldState,Event event,State newState,VirtualMachine vm,Long hostId){
  if (newState == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + oldState.toString() + ""String_Node_Str""+ event.toString());
    }
    return false;
  }
  VMInstanceVO vmi=(VMInstanceVO)vm;
  Long oldHostId=vmi.getHostId();
  SearchCriteria<VMInstanceVO> sc=StateChangeSearch.create();
  sc.setParameters(""String_Node_Str"",vmi.getId());
  sc.setParameters(""String_Node_Str"",oldState);
  sc.setParameters(""String_Node_Str"",vmi.getHostId());
  sc.setParameters(""String_Node_Str"",vmi.getUpdated());
  vmi.incrUpdated();
  UpdateBuilder ub=getUpdateBuilder(vmi);
  ub.set(vmi,""String_Node_Str"",newState);
  ub.set(vmi,""String_Node_Str"",hostId);
  ub.set(vmi,_updateTimeAttr,new Date());
  int result=update(vmi,sc);
  if (result == 0 && s_logger.isDebugEnabled()) {
    vmi.setState(oldState);
    vmi.setHostId(oldHostId);
    vmi.decrUpdated();
    VMInstanceVO vo=findById(vm.getId());
    StringBuilder str=new StringBuilder(""String_Node_Str"").append(vo.toString());
    str.append(""String_Node_Str"").append(vo.getHostId()).append(""String_Node_Str"").append(vo.getState().toString()).append(""String_Node_Str"").append(vo.getUpdated());
    str.append(""String_Node_Str"").append(vm.getHostId()).append(""String_Node_Str"").append(vm.getState().toString()).append(""String_Node_Str"").append(vmi.getUpdated()).append(""String_Node_Str"");
    s_logger.debug(str.toString());
  }
  return result > 0;
}","@Override public boolean updateState(State oldState,Event event,State newState,VirtualMachine vm,Long hostId){
  if (newState == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + oldState.toString() + ""String_Node_Str""+ event.toString());
    }
    return false;
  }
  VMInstanceVO vmi=(VMInstanceVO)vm;
  Long oldHostId=vmi.getHostId();
  Long oldUpdated=vmi.getUpdated();
  Date oldUpdateDate=vmi.getUpdateTime();
  SearchCriteria<VMInstanceVO> sc=StateChangeSearch.create();
  sc.setParameters(""String_Node_Str"",vmi.getId());
  sc.setParameters(""String_Node_Str"",oldState);
  sc.setParameters(""String_Node_Str"",vmi.getHostId());
  sc.setParameters(""String_Node_Str"",vmi.getUpdated());
  vmi.incrUpdated();
  UpdateBuilder ub=getUpdateBuilder(vmi);
  ub.set(vmi,""String_Node_Str"",newState);
  ub.set(vmi,""String_Node_Str"",hostId);
  ub.set(vmi,_updateTimeAttr,new Date());
  int result=update(vmi,sc);
  if (result == 0 && s_logger.isDebugEnabled()) {
    VMInstanceVO vo=findById(vm.getId());
    StringBuilder str=new StringBuilder(""String_Node_Str"").append(vo.toString());
    str.append(""String_Node_Str"").append(vo.getHostId()).append(""String_Node_Str"").append(vo.getState().toString()).append(""String_Node_Str"").append(vo.getUpdated()).append(""String_Node_Str"").append(vo.getUpdateTime());
    str.append(""String_Node_Str"").append(vm.getHostId()).append(""String_Node_Str"").append(vm.getState().toString()).append(""String_Node_Str"").append(vmi.getUpdated()).append(""String_Node_Str"").append(vo.getUpdateTime());
    str.append(""String_Node_Str"").append(oldHostId).append(""String_Node_Str"").append(oldState).append(""String_Node_Str"").append(oldUpdated).append(""String_Node_Str"").append(oldUpdateDate).append(""String_Node_Str"");
    s_logger.debug(str.toString());
  }
  return result > 0;
}"
89571,"protected void clear(){
  _changes.clear();
  if (_collectionChanges != null) {
    _collectionChanges.clear();
    _collectionChanges=null;
  }
}","public void clear(){
  _changes.clear();
  if (_collectionChanges != null) {
    _collectionChanges.clear();
    _collectionChanges=null;
  }
}"
89572,"public boolean transitTo(V vo,E e,Long id,StateDao<S,E,V> dao) throws NoTransitionException {
  S currentState=vo.getState();
  S nextState=getNextState(currentState,e);
  boolean transitionStatus=true;
  if (nextState == null) {
    transitionStatus=false;
  }
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.preStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,id);
  }
  Long oldHostId=vo.getHostId();
  transitionStatus=dao.updateState(currentState,e,nextState,vo,id);
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.postStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,oldHostId);
  }
  return transitionStatus;
}","public boolean transitTo(V vo,E e,Long id,StateDao<S,E,V> dao) throws NoTransitionException {
  S currentState=vo.getState();
  S nextState=getNextState(currentState,e);
  boolean transitionStatus=true;
  if (nextState == null) {
    transitionStatus=false;
  }
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.preStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,id);
  }
  Long oldHostId=vo.getHostId();
  transitionStatus=dao.updateState(currentState,e,nextState,vo,id);
  if (!transitionStatus) {
    return false;
  }
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.postStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,oldHostId);
  }
  return true;
}"
89573,"@Override public JsonElement serialize(List<PortConfig> src,Type typeOfSrc,JsonSerializationContext context){
  if (src.size() == 0) {
    s_logger.info(""String_Node_Str"");
    return new JsonNull();
  }
  s_logger.debug(""String_Node_Str"");
  JsonArray array=new JsonArray();
  for (  PortConfig pc : src) {
    array.add(s_gson.toJsonTree(pc));
  }
  return array;
}","@Override public JsonElement serialize(List<PortConfig> src,Type typeOfSrc,JsonSerializationContext context){
  if (src.size() == 0) {
    return new JsonNull();
  }
  JsonArray array=new JsonArray();
  for (  PortConfig pc : src) {
    array.add(s_gson.toJsonTree(pc));
  }
  return array;
}"
89574,"protected VIF getCorrectVif(Connection conn,VM router,String vlanId){
  try {
    Set<VIF> routerVIFs=router.getVIFs(conn);
    for (    VIF vif : routerVIFs) {
      Network vifNetwork=vif.getNetwork(conn);
      if (vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
        if (vifNetwork.getUuid(conn).equals(_host.publicNetwork)) {
          return vif;
        }
      }
 else {
        if (vifNetwork.getNameLabel(conn).equals(""String_Node_Str"" + vlanId)) {
          return vif;
        }
      }
    }
  }
 catch (  XmlRpcException e) {
    String msg=""String_Node_Str"" + e.getMessage();
    s_logger.warn(msg,e);
  }
catch (  XenAPIException e) {
    String msg=""String_Node_Str"" + e.toString();
    s_logger.warn(msg,e);
  }
  return null;
}","protected VIF getCorrectVif(Connection conn,VM router,Network network) throws XmlRpcException, XenAPIException {
  Set<VIF> routerVIFs=router.getVIFs(conn);
  for (  VIF vif : routerVIFs) {
    Network vifNetwork=vif.getNetwork(conn);
    if (vifNetwork.getUuid(conn).equals(network.getUuid(conn))) {
      return vif;
    }
  }
  return null;
}"
89575,"@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof CreateCommand) {
    return execute((CreateCommand)cmd);
  }
 else   if (cmd instanceof SetPortForwardingRulesCommand) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (cmd instanceof SetStaticNatRulesCommand) {
    return execute((SetStaticNatRulesCommand)cmd);
  }
 else   if (cmd instanceof LoadBalancerConfigCommand) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (cmd instanceof IPAssocCommand) {
    return execute((IPAssocCommand)cmd);
  }
 else   if (cmd instanceof CheckConsoleProxyLoadCommand) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof WatchConsoleProxyLoadCommand) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof SavePasswordCommand) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (cmd instanceof DhcpEntryCommand) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (cmd instanceof VmDataCommand) {
    return execute((VmDataCommand)cmd);
  }
 else   if (cmd instanceof ReadyCommand) {
    return execute((ReadyCommand)cmd);
  }
 else   if (cmd instanceof GetHostStatsCommand) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (cmd instanceof GetVmStatsCommand) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (cmd instanceof CheckHealthCommand) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (cmd instanceof StopCommand) {
    return execute((StopCommand)cmd);
  }
 else   if (cmd instanceof RebootRouterCommand) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (cmd instanceof RebootCommand) {
    return execute((RebootCommand)cmd);
  }
 else   if (cmd instanceof CheckVirtualMachineCommand) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (cmd instanceof PrepareForMigrationCommand) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (cmd instanceof MigrateCommand) {
    return execute((MigrateCommand)cmd);
  }
 else   if (cmd instanceof DestroyCommand) {
    return execute((DestroyCommand)cmd);
  }
 else   if (cmd instanceof CreateStoragePoolCommand) {
    return execute((CreateStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof ModifyStoragePoolCommand) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof DeleteStoragePoolCommand) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof CopyVolumeCommand) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachVolumeCommand) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachIsoCommand) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (cmd instanceof ManageSnapshotCommand) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (cmd instanceof BackupSnapshotCommand) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotBackupCommand) {
    return execute((DeleteSnapshotBackupCommand)cmd);
  }
 else   if (cmd instanceof CreateVolumeFromSnapshotCommand) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotsDirCommand) {
    return execute((DeleteSnapshotsDirCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof UpgradeSnapshotCommand) {
    return execute((UpgradeSnapshotCommand)cmd);
  }
 else   if (cmd instanceof GetStorageStatsCommand) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (cmd instanceof PrimaryStorageDownloadCommand) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (cmd instanceof GetVncPortCommand) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (cmd instanceof SetupCommand) {
    return execute((SetupCommand)cmd);
  }
 else   if (cmd instanceof MaintainCommand) {
    return execute((MaintainCommand)cmd);
  }
 else   if (cmd instanceof PingTestCommand) {
    return execute((PingTestCommand)cmd);
  }
 else   if (cmd instanceof CheckOnHostCommand) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (cmd instanceof ModifySshKeysCommand) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (cmd instanceof PoolEjectCommand) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (cmd instanceof StartCommand) {
    return execute((StartCommand)cmd);
  }
 else   if (cmd instanceof RemoteAccessVpnCfgCommand) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (cmd instanceof VpnUsersCfgCommand) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (cmd instanceof CheckSshCommand) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (cmd instanceof SecurityIngressRulesCmd) {
    return execute((SecurityIngressRulesCmd)cmd);
  }
 else   if (cmd instanceof OvsCreateGreTunnelCommand) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (cmd instanceof OvsSetTagAndFlowCommand) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else   if (cmd instanceof OvsDeleteFlowCommand) {
    return execute((OvsDeleteFlowCommand)cmd);
  }
 else   if (cmd instanceof CleanupNetworkRulesCmd) {
    return execute((CleanupNetworkRulesCmd)cmd);
  }
 else   if (cmd instanceof NetworkRulesSystemVmCommand) {
    return execute((NetworkRulesSystemVmCommand)cmd);
  }
 else   if (cmd instanceof OvsCreateTunnelCommand) {
    return execute((OvsCreateTunnelCommand)cmd);
  }
 else   if (cmd instanceof OvsDestroyTunnelCommand) {
    return execute((OvsDestroyTunnelCommand)cmd);
  }
 else   if (cmd instanceof UpdateHostPasswordCommand) {
    return execute((UpdateHostPasswordCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}","@Override public Answer executeRequest(Command cmd){
  Class<? extends Command> clazz=cmd.getClass();
  if (clazz == CreateCommand.class) {
    return execute((CreateCommand)cmd);
  }
 else   if (clazz == SetPortForwardingRulesCommand.class) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (clazz == SetStaticNatRulesCommand.class) {
    return execute((SetStaticNatRulesCommand)cmd);
  }
 else   if (clazz == LoadBalancerConfigCommand.class) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (clazz == IPAssocCommand.class) {
    return execute((IPAssocCommand)cmd);
  }
 else   if (clazz == CheckConsoleProxyLoadCommand.class) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == WatchConsoleProxyLoadCommand.class) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (clazz == SavePasswordCommand.class) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (clazz == DhcpEntryCommand.class) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (clazz == VmDataCommand.class) {
    return execute((VmDataCommand)cmd);
  }
 else   if (clazz == ReadyCommand.class) {
    return execute((ReadyCommand)cmd);
  }
 else   if (clazz == GetHostStatsCommand.class) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (clazz == GetVmStatsCommand.class) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (clazz == CheckHealthCommand.class) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (clazz == StopCommand.class) {
    return execute((StopCommand)cmd);
  }
 else   if (clazz == RebootRouterCommand.class) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (clazz == RebootCommand.class) {
    return execute((RebootCommand)cmd);
  }
 else   if (clazz == CheckVirtualMachineCommand.class) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (clazz == PrepareForMigrationCommand.class) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (clazz == MigrateCommand.class) {
    return execute((MigrateCommand)cmd);
  }
 else   if (clazz == DestroyCommand.class) {
    return execute((DestroyCommand)cmd);
  }
 else   if (clazz == CreateStoragePoolCommand.class) {
    return execute((CreateStoragePoolCommand)cmd);
  }
 else   if (clazz == ModifyStoragePoolCommand.class) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (clazz == DeleteStoragePoolCommand.class) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (clazz == CopyVolumeCommand.class) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (clazz == AttachVolumeCommand.class) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (clazz == AttachIsoCommand.class) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (clazz == ManageSnapshotCommand.class) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (clazz == BackupSnapshotCommand.class) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (clazz == DeleteSnapshotBackupCommand.class) {
    return execute((DeleteSnapshotBackupCommand)cmd);
  }
 else   if (clazz == CreateVolumeFromSnapshotCommand.class) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (clazz == DeleteSnapshotsDirCommand.class) {
    return execute((DeleteSnapshotsDirCommand)cmd);
  }
 else   if (clazz == CreatePrivateTemplateFromVolumeCommand.class) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (clazz == CreatePrivateTemplateFromSnapshotCommand.class) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (clazz == UpgradeSnapshotCommand.class) {
    return execute((UpgradeSnapshotCommand)cmd);
  }
 else   if (clazz == GetStorageStatsCommand.class) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (clazz == PrimaryStorageDownloadCommand.class) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (clazz == GetVncPortCommand.class) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (clazz == SetupCommand.class) {
    return execute((SetupCommand)cmd);
  }
 else   if (clazz == MaintainCommand.class) {
    return execute((MaintainCommand)cmd);
  }
 else   if (clazz == PingTestCommand.class) {
    return execute((PingTestCommand)cmd);
  }
 else   if (clazz == CheckOnHostCommand.class) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (clazz == ModifySshKeysCommand.class) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (clazz == PoolEjectCommand.class) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (clazz == StartCommand.class) {
    return execute((StartCommand)cmd);
  }
 else   if (clazz == RemoteAccessVpnCfgCommand.class) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (clazz == VpnUsersCfgCommand.class) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (clazz == CheckSshCommand.class) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (clazz == SecurityIngressRulesCmd.class) {
    return execute((SecurityIngressRulesCmd)cmd);
  }
 else   if (clazz == OvsCreateGreTunnelCommand.class) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (clazz == OvsSetTagAndFlowCommand.class) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else   if (clazz == OvsDeleteFlowCommand.class) {
    return execute((OvsDeleteFlowCommand)cmd);
  }
 else   if (clazz == CleanupNetworkRulesCmd.class) {
    return execute((CleanupNetworkRulesCmd)cmd);
  }
 else   if (clazz == NetworkRulesSystemVmCommand.class) {
    return execute((NetworkRulesSystemVmCommand)cmd);
  }
 else   if (clazz == OvsCreateTunnelCommand.class) {
    return execute((OvsCreateTunnelCommand)cmd);
  }
 else   if (clazz == OvsDestroyTunnelCommand.class) {
    return execute((OvsDestroyTunnelCommand)cmd);
  }
 else   if (clazz == UpdateHostPasswordCommand.class) {
    return execute((UpdateHostPasswordCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}"
89576,"protected void assignPublicIpAddress(Connection conn,final String vmName,final String privateIpAddress,final String publicIpAddress,final boolean add,final boolean firstIP,final boolean sourceNat,final String vlanId,final String vlanGateway,final String vlanNetmask,final String vifMacAddress,String guestIp,Integer networkRate) throws InternalErrorException {
  try {
    VM router=getVM(conn,vmName);
    VIF correctVif=getCorrectVif(conn,router,vlanId);
    boolean addVif=false;
    boolean removeVif=false;
    if (add && correctVif == null) {
      addVif=true;
    }
 else     if (!add && firstIP) {
      removeVif=true;
    }
    if (addVif) {
      String vifDeviceNum=getLowestAvailableVIFDeviceNum(conn,router);
      if (vifDeviceNum == null) {
        throw new InternalErrorException(""String_Node_Str"" + router.getNameLabel(conn));
      }
      NicTO nic=new NicTO();
      nic.setMac(vifMacAddress);
      nic.setType(TrafficType.Public);
      if (vlanId == null) {
        nic.setBroadcastType(BroadcastDomainType.Native);
      }
 else {
        nic.setBroadcastType(BroadcastDomainType.Vlan);
        nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(vlanId));
      }
      nic.setDeviceId(Integer.parseInt(vifDeviceNum));
      nic.setNetworkRateMbps(networkRate);
      correctVif=createVif(conn,vmName,router,nic);
      correctVif.plug(conn);
      networkUsage(conn,privateIpAddress,""String_Node_Str"",""String_Node_Str"" + correctVif.getDevice(conn));
    }
    if (correctVif == null) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    String args=privateIpAddress;
    if (add) {
      args+=""String_Node_Str"";
    }
 else {
      args+=""String_Node_Str"";
    }
    String cidrSize=Long.toString(NetUtils.getCidrSize(vlanNetmask));
    if (sourceNat) {
      args+=""String_Node_Str"";
      args+=""String_Node_Str"";
      args+=publicIpAddress + ""String_Node_Str"" + cidrSize;
    }
 else     if (firstIP) {
      args+=""String_Node_Str"";
      args+=""String_Node_Str"";
      args+=publicIpAddress + ""String_Node_Str"" + cidrSize;
    }
 else {
      args+=""String_Node_Str"";
      args+=publicIpAddress;
    }
    args+=""String_Node_Str"";
    args+=""String_Node_Str"" + correctVif.getDevice(conn);
    String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",args);
    if (result == null || result.isEmpty()) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    if (removeVif) {
      Network network=correctVif.getNetwork(conn);
      networkUsage(conn,privateIpAddress,""String_Node_Str"",""String_Node_Str"" + correctVif.getDevice(conn));
      correctVif.unplug(conn);
      correctVif.destroy(conn);
      disableVlanNetwork(conn,network);
    }
  }
 catch (  XenAPIException e) {
    String msg=""String_Node_Str"" + e.toString();
    s_logger.warn(msg,e);
    throw new InternalErrorException(msg);
  }
catch (  final XmlRpcException e) {
    String msg=""String_Node_Str"" + e.getMessage();
    s_logger.warn(msg,e);
    throw new InternalErrorException(msg);
  }
}","protected void assignPublicIpAddress(Connection conn,String vmName,String privateIpAddress,String publicIpAddress,boolean add,boolean firstIP,boolean sourceNat,String vlanId,String vlanGateway,String vlanNetmask,String vifMacAddress,String guestIp,Integer networkRate,TrafficType trafficType,String[] tags) throws InternalErrorException {
  try {
    String tag=tags != null && tags.length > 0 ? tags[0] : null;
    VM router=getVM(conn,vmName);
    NicTO nic=new NicTO();
    nic.setMac(vifMacAddress);
    nic.setType(trafficType);
    if (vlanId == null) {
      nic.setBroadcastType(BroadcastDomainType.Native);
    }
 else {
      nic.setBroadcastType(BroadcastDomainType.Vlan);
      nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(vlanId));
    }
    nic.setDeviceId(0);
    nic.setNetworkRateMbps(networkRate);
    if (tags != null) {
      nic.setTags(Arrays.asList(tags));
    }
    Network network=getNetwork(conn,nic);
    VIF correctVif=getCorrectVif(conn,router,network);
    boolean addVif=false;
    boolean removeVif=false;
    if (add && correctVif == null) {
      addVif=true;
    }
 else     if (!add && firstIP) {
      removeVif=true;
    }
    if (addVif) {
      String vifDeviceNum=getLowestAvailableVIFDeviceNum(conn,router);
      if (vifDeviceNum == null) {
        throw new InternalErrorException(""String_Node_Str"" + router.getNameLabel(conn));
      }
      nic.setDeviceId(Integer.parseInt(vifDeviceNum));
      correctVif=createVif(conn,vmName,router,nic);
      correctVif.plug(conn);
      networkUsage(conn,privateIpAddress,""String_Node_Str"",""String_Node_Str"" + correctVif.getDevice(conn));
    }
    if (correctVif == null) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    String args=privateIpAddress;
    if (add) {
      args+=""String_Node_Str"";
    }
 else {
      args+=""String_Node_Str"";
    }
    String cidrSize=Long.toString(NetUtils.getCidrSize(vlanNetmask));
    if (sourceNat) {
      args+=""String_Node_Str"";
      args+=""String_Node_Str"";
      args+=publicIpAddress + ""String_Node_Str"" + cidrSize;
    }
 else     if (firstIP) {
      args+=""String_Node_Str"";
      args+=""String_Node_Str"";
      args+=publicIpAddress + ""String_Node_Str"" + cidrSize;
    }
 else {
      args+=""String_Node_Str"";
      args+=publicIpAddress;
    }
    args+=""String_Node_Str"";
    args+=""String_Node_Str"" + correctVif.getDevice(conn);
    String result=callHostPlugin(conn,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",args);
    if (result == null || result.isEmpty()) {
      throw new InternalErrorException(""String_Node_Str"");
    }
    if (removeVif) {
      network=correctVif.getNetwork(conn);
      networkUsage(conn,privateIpAddress,""String_Node_Str"",""String_Node_Str"" + correctVif.getDevice(conn));
      correctVif.unplug(conn);
      correctVif.destroy(conn);
      disableVlanNetwork(conn,network);
    }
  }
 catch (  XenAPIException e) {
    String msg=""String_Node_Str"" + e.toString();
    s_logger.warn(msg,e);
    throw new InternalErrorException(msg);
  }
catch (  final XmlRpcException e) {
    String msg=""String_Node_Str"" + e.getMessage();
    s_logger.warn(msg,e);
    throw new InternalErrorException(msg);
  }
}"
89577,"@Override public void scheduleRestart(VMInstanceVO vm,final boolean investigate){
  Long hostId=vm.getHostId();
  if (hostId == null) {
    _itMgr.stateTransitTo(vm,Event.OperationFailed,null);
    return;
  }
  if (!investigate) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm.toString());
    }
    short alertType=AlertManager.ALERT_TYPE_USERVM;
    if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {
      alertType=AlertManager.ALERT_TYPE_DOMAIN_ROUTER;
    }
 else     if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {
      alertType=AlertManager.ALERT_TYPE_CONSOLE_PROXY;
    }
    if (!(_forceHA || vm.isHaEnabled())) {
      String hostDesc=""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ vm.getDataCenterIdToDeployIn()+ ""String_Node_Str""+ vm.getPodIdToDeployIn();
      _alertMgr.sendAlert(alertType,vm.getDataCenterIdToDeployIn(),vm.getPodIdToDeployIn(),""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ hostDesc,""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ vm.getHostId()+ ""String_Node_Str"");
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
    }
    try {
      _itMgr.advanceStop(vm,true,_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
    }
 catch (    ResourceUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
catch (    ConcurrentOperationException e) {
    }
  }
  List<HaWorkVO> items=_haDao.findPreviousHA(vm.getId());
  int maxRetries=0;
  for (  HaWorkVO item : items) {
    if (maxRetries < item.getTimesTried() && !item.canScheduleNew(_timeBetweenFailures)) {
      maxRetries=item.getTimesTried();
      break;
    }
  }
  HaWorkVO work=new HaWorkVO(vm.getId(),vm.getType(),WorkType.HA,investigate ? Step.Investigating : Step.Scheduled,hostId,vm.getState(),maxRetries + 1,vm.getUpdated());
  _haDao.persist(work);
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + vm);
  }
  wakeupWorkers();
}","@Override public void scheduleRestart(VMInstanceVO vm,boolean investigate){
  Long hostId=vm.getHostId();
  if (hostId == null) {
    try {
      s_logger.debug(""String_Node_Str"" + vm);
      _itMgr.stateTransitTo(vm,Event.OperationFailed,null);
    }
 catch (    NoTransitionException e) {
    }
    return;
  }
  if (!investigate) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm.toString());
    }
    short alertType=AlertManager.ALERT_TYPE_USERVM;
    if (VirtualMachine.Type.DomainRouter.equals(vm.getType())) {
      alertType=AlertManager.ALERT_TYPE_DOMAIN_ROUTER;
    }
 else     if (VirtualMachine.Type.ConsoleProxy.equals(vm.getType())) {
      alertType=AlertManager.ALERT_TYPE_CONSOLE_PROXY;
    }
    if (!(_forceHA || vm.isHaEnabled())) {
      String hostDesc=""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ vm.getDataCenterIdToDeployIn()+ ""String_Node_Str""+ vm.getPodIdToDeployIn();
      _alertMgr.sendAlert(alertType,vm.getDataCenterIdToDeployIn(),vm.getPodIdToDeployIn(),""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ hostDesc,""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ vm.getHostId()+ ""String_Node_Str"");
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
    }
    try {
      _itMgr.advanceStop(vm,true,_accountMgr.getSystemUser(),_accountMgr.getSystemAccount());
    }
 catch (    ResourceUnavailableException e) {
    }
catch (    OperationTimedoutException e) {
    }
catch (    ConcurrentOperationException e) {
    }
  }
  List<HaWorkVO> items=_haDao.findPreviousHA(vm.getId());
  int maxRetries=0;
  for (  HaWorkVO item : items) {
    if (maxRetries < item.getTimesTried() && !item.canScheduleNew(_timeBetweenFailures)) {
      maxRetries=item.getTimesTried();
      break;
    }
  }
  HaWorkVO work=new HaWorkVO(vm.getId(),vm.getType(),WorkType.HA,investigate ? Step.Investigating : Step.Scheduled,hostId,vm.getState(),maxRetries + 1,vm.getUpdated());
  _haDao.persist(work);
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + vm);
  }
  wakeupWorkers();
}"
89578,"@Override @DB public UserVm recoverVirtualMachine(RecoverVMCmd cmd) throws ResourceAllocationException, CloudRuntimeException {
  Long vmId=cmd.getId();
  Account accountHandle=UserContext.current().getCaller();
  if (accountHandle != null && accountHandle.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountHandle.getId() + ""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId.longValue());
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if ((accountHandle != null) && !_domainDao.isChildDomain(accountHandle.getDomainId(),vm.getDomainId())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (vm.getState() != State.Destroyed) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  Transaction txn=Transaction.currentTxn();
  AccountVO account=null;
  txn.start();
  account=_accountDao.lockRow(vm.getAccountId(),true);
  if (account.getRemoved() != null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (_accountMgr.resourceLimitExceeded(account,ResourceType.user_vm)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    txn.commit();
    throw rae;
  }
  _haMgr.cancelDestroy(vm,vm.getHostId());
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.user_vm);
  if (!_itMgr.stateTransitTo(vm,VirtualMachine.Event.RecoveryRequested,null)) {
    s_logger.debug(""String_Node_Str"" + vmId);
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
  for (  VolumeVO volume : volumes) {
    if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
      Long templateId=volume.getTemplateId();
      Long diskOfferingId=volume.getDiskOfferingId();
      Long offeringId=null;
      if (diskOfferingId != null) {
        DiskOfferingVO offering=_diskOfferingDao.findById(diskOfferingId);
        if (offering != null && (offering.getType() == DiskOfferingVO.Type.Disk)) {
          offeringId=offering.getId();
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),offeringId,templateId,volume.getSize());
      _usageEventDao.persist(usageEvent);
    }
  }
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.volume,new Long(volumes.size()));
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName(),vm.getServiceOfferingId(),vm.getTemplateId(),vm.getHypervisorType().toString());
  _usageEventDao.persist(usageEvent);
  txn.commit();
  return _vmDao.findById(vmId);
}","@Override @DB public UserVm recoverVirtualMachine(RecoverVMCmd cmd) throws ResourceAllocationException, CloudRuntimeException {
  Long vmId=cmd.getId();
  Account accountHandle=UserContext.current().getCaller();
  if (accountHandle != null && accountHandle.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountHandle.getId() + ""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId.longValue());
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if ((accountHandle != null) && !_domainDao.isChildDomain(accountHandle.getDomainId(),vm.getDomainId())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (vm.getState() != State.Destroyed) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  Transaction txn=Transaction.currentTxn();
  AccountVO account=null;
  txn.start();
  account=_accountDao.lockRow(vm.getAccountId(),true);
  if (account.getRemoved() != null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (_accountMgr.resourceLimitExceeded(account,ResourceType.user_vm)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    txn.commit();
    throw rae;
  }
  _haMgr.cancelDestroy(vm,vm.getHostId());
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.user_vm);
  try {
    if (!_itMgr.stateTransitTo(vm,VirtualMachine.Event.RecoveryRequested,null)) {
      s_logger.debug(""String_Node_Str"" + vmId);
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
  }
 catch (  NoTransitionException e) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
  for (  VolumeVO volume : volumes) {
    if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
      Long templateId=volume.getTemplateId();
      Long diskOfferingId=volume.getDiskOfferingId();
      Long offeringId=null;
      if (diskOfferingId != null) {
        DiskOfferingVO offering=_diskOfferingDao.findById(diskOfferingId);
        if (offering != null && (offering.getType() == DiskOfferingVO.Type.Disk)) {
          offeringId=offering.getId();
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),offeringId,templateId,volume.getSize());
      _usageEventDao.persist(usageEvent);
    }
  }
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.volume,new Long(volumes.size()));
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName(),vm.getServiceOfferingId(),vm.getTemplateId(),vm.getHypervisorType().toString());
  _usageEventDao.persist(usageEvent);
  txn.commit();
  return _vmDao.findById(vmId);
}"
89579,"private void updateVmStateForFailedVmCreation(Long vmId){
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm != null) {
    if (vm.getState().equals(State.Stopped)) {
      _itMgr.stateTransitTo(vm,VirtualMachine.Event.OperationFailed,null);
      List<VolumeVO> volumesForThisVm=_volsDao.findByInstance(vm.getId());
      for (      VolumeVO volume : volumesForThisVm) {
        try {
          if (volume.getState() != Volume.State.Destroy) {
            _storageMgr.destroyVolume(volume);
          }
          if (volume.getState() == Volume.State.Ready) {
            UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName());
            _usageEventDao.persist(usageEvent);
          }
        }
 catch (        ConcurrentOperationException e) {
          s_logger.warn(""String_Node_Str"" + volume.getId() + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName());
      _usageEventDao.persist(usageEvent);
    }
  }
}","private void updateVmStateForFailedVmCreation(Long vmId){
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm != null) {
    if (vm.getState().equals(State.Stopped)) {
      try {
        _itMgr.stateTransitTo(vm,VirtualMachine.Event.OperationFailed,null);
      }
 catch (      NoTransitionException e1) {
        s_logger.warn(e1.getMessage());
      }
      List<VolumeVO> volumesForThisVm=_volsDao.findByInstance(vm.getId());
      for (      VolumeVO volume : volumesForThisVm) {
        try {
          if (volume.getState() != Volume.State.Destroy) {
            _storageMgr.destroyVolume(volume);
          }
          if (volume.getState() == Volume.State.Ready) {
            UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName());
            _usageEventDao.persist(usageEvent);
          }
        }
 catch (        ConcurrentOperationException e) {
          s_logger.warn(""String_Node_Str"" + volume.getId() + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterIdToDeployIn(),vm.getId(),vm.getHostName());
      _usageEventDao.persist(usageEvent);
    }
  }
}"
89580,"boolean stateTransitTo(VMInstanceVO vm,VirtualMachine.Event e,Long hostId);","boolean stateTransitTo(VMInstanceVO vm,VirtualMachine.Event e,Long hostId) throws NoTransitionException ;"
89581,"@Override public <T extends VMInstanceVO>T advanceStart(T vm,Map<VirtualMachineProfile.Param,Object> params,User caller,Account account,DeploymentPlan planToDeploy) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  long vmId=vm.getId();
  VirtualMachineGuru<T> vmGuru;
  if (vm.getHypervisorType() == HypervisorType.BareMetal) {
    vmGuru=getBareMetalVmGuru(vm);
  }
 else {
    vmGuru=getVmGuru(vm);
  }
  vm=vmGuru.findById(vm.getId());
  Ternary<T,ReservationContext,ItWorkVO> start=changeToStartState(vmGuru,vm,caller,account);
  if (start == null) {
    return vmGuru.findById(vmId);
  }
  vm=start.first();
  ReservationContext ctx=start.second();
  ItWorkVO work=start.third();
  T startedVm=null;
  ServiceOfferingVO offering=_offeringDao.findById(vm.getServiceOfferingId());
  VMTemplateVO template=_templateDao.findById(vm.getTemplateId());
  DataCenterDeployment plan=new DataCenterDeployment(vm.getDataCenterIdToDeployIn(),vm.getPodIdToDeployIn(),null,null,null);
  if (planToDeploy != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    plan=(DataCenterDeployment)planToDeploy;
  }
  HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
  boolean canRetry=true;
  try {
    Journal journal=start.second().getJournal();
    List<VolumeVO> vols=_volsDao.findReadyRootVolumesByInstance(vm.getId());
    for (    VolumeVO vol : vols) {
      Long volTemplateId=vol.getTemplateId();
      if (volTemplateId != null && volTemplateId.longValue() != template.getId()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(vol + ""String_Node_Str"" + vm+ ""String_Node_Str"");
        }
        continue;
      }
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      if (!pool.isInMaintenance()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        long rootVolDcId=pool.getDataCenterId();
        Long rootVolPodId=pool.getPodId();
        Long rootVolClusterId=pool.getClusterId();
        if (planToDeploy != null) {
          Long clusterIdSpecified=planToDeploy.getClusterId();
          if (clusterIdSpecified != null && rootVolClusterId != null) {
            if (rootVolClusterId.longValue() != clusterIdSpecified.longValue()) {
              if (s_logger.isDebugEnabled()) {
                s_logger.debug(""String_Node_Str"" + rootVolClusterId + ""String_Node_Str""+ clusterIdSpecified);
              }
              throw new ResourceUnavailableException(""String_Node_Str"" + vm,Cluster.class,clusterIdSpecified);
            }
          }
          plan=new DataCenterDeployment(planToDeploy.getDataCenterId(),planToDeploy.getPodId(),planToDeploy.getClusterId(),planToDeploy.getHostId(),vol.getPoolId());
        }
 else {
          plan=new DataCenterDeployment(rootVolDcId,rootVolPodId,rootVolClusterId,null,vol.getPoolId());
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(vol + ""String_Node_Str"" + rootVolDcId+ ""String_Node_Str""+ rootVolPodId+ ""String_Node_Str""+ rootVolClusterId);
          }
        }
      }
    }
    ExcludeList avoids=new ExcludeList();
    int retry=_retry;
    while (retry-- != 0) {
      VirtualMachineProfileImpl<T> vmProfile=new VirtualMachineProfileImpl<T>(vm,template,offering,account,params);
      DeployDestination dest=null;
      for (      DeploymentPlanner planner : _planners) {
        if (planner.canHandle(vmProfile,plan,avoids)) {
          dest=planner.plan(vmProfile,plan,avoids);
        }
 else {
          continue;
        }
        if (dest != null) {
          avoids.addHost(dest.getHost().getId());
          journal.record(""String_Node_Str"",vmProfile,dest);
          break;
        }
      }
      if (dest == null) {
        throw new InsufficientServerCapacityException(""String_Node_Str"" + vmProfile,DataCenter.class,plan.getDataCenterId());
      }
      long destHostId=dest.getHost().getId();
      try {
        if (!changeState(vm,Event.OperationRetry,destHostId,work,Step.Prepare)) {
          throw new ConcurrentOperationException(""String_Node_Str"");
        }
      }
 catch (      NoTransitionException e1) {
        throw new ConcurrentOperationException(e1.getMessage());
      }
      try {
        _networkMgr.prepare(vmProfile,dest,ctx);
        if (vm.getHypervisorType() != HypervisorType.BareMetal) {
          _storageMgr.prepare(vmProfile,dest);
        }
        vmGuru.finalizeVirtualMachineProfile(vmProfile,dest,ctx);
        VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
        Commands cmds=new Commands(OnError.Stop);
        cmds.addCommand(new StartCommand(vmTO));
        vmGuru.finalizeDeployment(cmds,vmProfile,dest,ctx);
        vm.setPodId(dest.getPod().getId());
        work=_workDao.findById(work.getId());
        if (work == null || work.getStep() != Step.Prepare) {
          throw new ConcurrentOperationException(""String_Node_Str"" + work);
        }
        _workDao.updateStep(work,Step.Starting);
        _agentMgr.send(destHostId,cmds);
        _workDao.updateStep(work,Step.Started);
        Answer startAnswer=cmds.getAnswer(StartAnswer.class);
        if (startAnswer != null && startAnswer.getResult()) {
          if (vmGuru.finalizeStart(vmProfile,destHostId,cmds,ctx)) {
            if (!changeState(vm,Event.OperationSucceeded,destHostId,work,Step.Done)) {
              throw new ConcurrentOperationException(""String_Node_Str"");
            }
            startedVm=vm;
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + vm);
            }
            return startedVm;
          }
 else {
            if (s_logger.isDebugEnabled()) {
              s_logger.info(""String_Node_Str"" + vm);
            }
            StopCommand cmd=new StopCommand(vm.getInstanceName());
            StopAnswer answer=(StopAnswer)_agentMgr.easySend(destHostId,cmd);
            if (answer == null || !answer.getResult()) {
              s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
              canRetry=false;
              _haMgr.scheduleStop(vm,destHostId,WorkType.ForceStop);
              throw new ExecutionException(""String_Node_Str"" + vm + ""String_Node_Str"");
            }
          }
        }
        s_logger.info(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ (startAnswer == null ? ""String_Node_Str"" : startAnswer.getDetails()));
      }
 catch (      OperationTimedoutException e) {
        s_logger.debug(""String_Node_Str"" + dest.getHost());
        if (e.isActive()) {
          _haMgr.scheduleStop(vm,destHostId,WorkType.CheckStop);
        }
        canRetry=false;
        throw new AgentUnavailableException(""String_Node_Str"" + vm.getHostName(),destHostId,e);
      }
catch (      ResourceUnavailableException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
            throw e;
          }
        }
      }
catch (      InsufficientCapacityException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
          }
        }
      }
catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + vm,e);
        throw new AgentUnavailableException(""String_Node_Str"",destHostId,e);
      }
 finally {
        if (startedVm == null && canRetry) {
          _workDao.updateStep(work,Step.Release);
          cleanup(vmGuru,vmProfile,work,Event.OperationFailed,false,caller,account);
        }
      }
    }
  }
  finally {
    if (startedVm == null) {
      if (vm.getType().equals(VirtualMachine.Type.User) && (vm.getLastHostId() == null)) {
        _accountMgr.decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
      }
      if (canRetry) {
        try {
          changeState(vm,Event.OperationFailed,null,work,Step.Done);
        }
 catch (        NoTransitionException e) {
          throw new ConcurrentOperationException(e.getMessage());
        }
      }
    }
  }
  return startedVm;
}","@Override public <T extends VMInstanceVO>T advanceStart(T vm,Map<VirtualMachineProfile.Param,Object> params,User caller,Account account,DeploymentPlan planToDeploy) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  long vmId=vm.getId();
  VirtualMachineGuru<T> vmGuru;
  if (vm.getHypervisorType() == HypervisorType.BareMetal) {
    vmGuru=getBareMetalVmGuru(vm);
  }
 else {
    vmGuru=getVmGuru(vm);
  }
  vm=vmGuru.findById(vm.getId());
  Ternary<T,ReservationContext,ItWorkVO> start=changeToStartState(vmGuru,vm,caller,account);
  if (start == null) {
    return vmGuru.findById(vmId);
  }
  vm=start.first();
  ReservationContext ctx=start.second();
  ItWorkVO work=start.third();
  T startedVm=null;
  ServiceOfferingVO offering=_offeringDao.findById(vm.getServiceOfferingId());
  VMTemplateVO template=_templateDao.findById(vm.getTemplateId());
  DataCenterDeployment plan=new DataCenterDeployment(vm.getDataCenterIdToDeployIn(),vm.getPodIdToDeployIn(),null,null,null);
  if (planToDeploy != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    plan=(DataCenterDeployment)planToDeploy;
  }
  HypervisorGuru hvGuru=_hvGuruMgr.getGuru(vm.getHypervisorType());
  boolean canRetry=true;
  try {
    Journal journal=start.second().getJournal();
    ExcludeList avoids=new ExcludeList();
    int retry=_retry;
    while (retry-- != 0) {
      List<VolumeVO> vols=_volsDao.findReadyRootVolumesByInstance(vm.getId());
      for (      VolumeVO vol : vols) {
        Long volTemplateId=vol.getTemplateId();
        if (volTemplateId != null && volTemplateId.longValue() != template.getId()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(vol + ""String_Node_Str"" + vm+ ""String_Node_Str"");
          }
          continue;
        }
        StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
        if (!pool.isInMaintenance()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"");
          }
          long rootVolDcId=pool.getDataCenterId();
          Long rootVolPodId=pool.getPodId();
          Long rootVolClusterId=pool.getClusterId();
          if (planToDeploy != null) {
            Long clusterIdSpecified=planToDeploy.getClusterId();
            if (clusterIdSpecified != null && rootVolClusterId != null) {
              if (rootVolClusterId.longValue() != clusterIdSpecified.longValue()) {
                if (s_logger.isDebugEnabled()) {
                  s_logger.debug(""String_Node_Str"" + rootVolClusterId + ""String_Node_Str""+ clusterIdSpecified);
                }
                throw new ResourceUnavailableException(""String_Node_Str"" + vm,Cluster.class,clusterIdSpecified);
              }
            }
            plan=new DataCenterDeployment(planToDeploy.getDataCenterId(),planToDeploy.getPodId(),planToDeploy.getClusterId(),planToDeploy.getHostId(),vol.getPoolId());
          }
 else {
            plan=new DataCenterDeployment(rootVolDcId,rootVolPodId,rootVolClusterId,null,vol.getPoolId());
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(vol + ""String_Node_Str"" + rootVolDcId+ ""String_Node_Str""+ rootVolPodId+ ""String_Node_Str""+ rootVolClusterId);
            }
          }
        }
      }
      VirtualMachineProfileImpl<T> vmProfile=new VirtualMachineProfileImpl<T>(vm,template,offering,account,params);
      DeployDestination dest=null;
      for (      DeploymentPlanner planner : _planners) {
        if (planner.canHandle(vmProfile,plan,avoids)) {
          dest=planner.plan(vmProfile,plan,avoids);
        }
 else {
          continue;
        }
        if (dest != null) {
          avoids.addHost(dest.getHost().getId());
          journal.record(""String_Node_Str"",vmProfile,dest);
          break;
        }
      }
      if (dest == null) {
        throw new InsufficientServerCapacityException(""String_Node_Str"" + vmProfile,DataCenter.class,plan.getDataCenterId());
      }
      long destHostId=dest.getHost().getId();
      try {
        if (!changeState(vm,Event.OperationRetry,destHostId,work,Step.Prepare)) {
          throw new ConcurrentOperationException(""String_Node_Str"");
        }
      }
 catch (      NoTransitionException e1) {
        throw new ConcurrentOperationException(e1.getMessage());
      }
      try {
        _networkMgr.prepare(vmProfile,dest,ctx);
        if (vm.getHypervisorType() != HypervisorType.BareMetal) {
          _storageMgr.prepare(vmProfile,dest);
        }
        vmGuru.finalizeVirtualMachineProfile(vmProfile,dest,ctx);
        VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
        Commands cmds=new Commands(OnError.Stop);
        cmds.addCommand(new StartCommand(vmTO));
        vmGuru.finalizeDeployment(cmds,vmProfile,dest,ctx);
        vm.setPodId(dest.getPod().getId());
        work=_workDao.findById(work.getId());
        if (work == null || work.getStep() != Step.Prepare) {
          throw new ConcurrentOperationException(""String_Node_Str"" + work);
        }
        _workDao.updateStep(work,Step.Starting);
        _agentMgr.send(destHostId,cmds);
        _workDao.updateStep(work,Step.Started);
        Answer startAnswer=cmds.getAnswer(StartAnswer.class);
        if (startAnswer != null && startAnswer.getResult()) {
          if (vmGuru.finalizeStart(vmProfile,destHostId,cmds,ctx)) {
            if (!changeState(vm,Event.OperationSucceeded,destHostId,work,Step.Done)) {
              throw new ConcurrentOperationException(""String_Node_Str"");
            }
            startedVm=vm;
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + vm);
            }
            return startedVm;
          }
 else {
            if (s_logger.isDebugEnabled()) {
              s_logger.info(""String_Node_Str"" + vm);
            }
            StopCommand cmd=new StopCommand(vm.getInstanceName());
            StopAnswer answer=(StopAnswer)_agentMgr.easySend(destHostId,cmd);
            if (answer == null || !answer.getResult()) {
              s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
              canRetry=false;
              _haMgr.scheduleStop(vm,destHostId,WorkType.ForceStop);
              throw new ExecutionException(""String_Node_Str"" + vm + ""String_Node_Str"");
            }
          }
        }
        s_logger.info(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ (startAnswer == null ? ""String_Node_Str"" : startAnswer.getDetails()));
      }
 catch (      OperationTimedoutException e) {
        s_logger.debug(""String_Node_Str"" + dest.getHost());
        if (e.isActive()) {
          _haMgr.scheduleStop(vm,destHostId,WorkType.CheckStop);
        }
        canRetry=false;
        throw new AgentUnavailableException(""String_Node_Str"" + vm.getHostName(),destHostId,e);
      }
catch (      ResourceUnavailableException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
            throw e;
          }
        }
      }
catch (      InsufficientCapacityException e) {
        s_logger.info(""String_Node_Str"",e);
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            s_logger.warn(""String_Node_Str"" + e.getScope().getName(),e);
          }
        }
      }
catch (      Exception e) {
        s_logger.error(""String_Node_Str"" + vm,e);
        throw new AgentUnavailableException(""String_Node_Str"",destHostId,e);
      }
 finally {
        if (startedVm == null && canRetry) {
          _workDao.updateStep(work,Step.Release);
          cleanup(vmGuru,vmProfile,work,Event.OperationFailed,false,caller,account);
        }
      }
    }
  }
  finally {
    if (startedVm == null) {
      if (vm.getType().equals(VirtualMachine.Type.User) && (vm.getLastHostId() == null)) {
        _accountMgr.decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
      }
      if (canRetry) {
        try {
          changeState(vm,Event.OperationFailed,null,work,Step.Done);
        }
 catch (        NoTransitionException e) {
          throw new ConcurrentOperationException(e.getMessage());
        }
      }
    }
  }
  return startedVm;
}"
89582,"private void createAssociateIPCommands(final DomainRouterVO router,final List<? extends PublicIpAddress> ips,Commands cmds,long vmId){
  Map<String,ArrayList<PublicIpAddress>> vlanIpMap=new HashMap<String,ArrayList<PublicIpAddress>>();
  for (  final PublicIpAddress ipAddress : ips) {
    String vlanTag=ipAddress.getVlanTag();
    ArrayList<PublicIpAddress> ipList=vlanIpMap.get(vlanTag);
    if (ipList == null) {
      ipList=new ArrayList<PublicIpAddress>();
    }
    ipList.add(ipAddress);
    vlanIpMap.put(vlanTag,ipList);
  }
  for (  Map.Entry<String,ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {
    List<PublicIpAddress> ipAddrList=vlanAndIp.getValue();
    Collections.sort(ipAddrList,new Comparator<PublicIpAddress>(){
      @Override public int compare(      PublicIpAddress o1,      PublicIpAddress o2){
        boolean s1=o1.isSourceNat();
        boolean s2=o2.isSourceNat();
        return (s1 ^ s2) ? ((s1 ^ true) ? 1 : -1) : 0;
      }
    }
);
    IpAddressTO[] ipsToSend=new IpAddressTO[ipAddrList.size()];
    int i=0;
    boolean firstIP=true;
    for (    final PublicIpAddress ipAddr : ipAddrList) {
      boolean add=(ipAddr.getState() == IpAddress.State.Releasing ? false : true);
      boolean sourceNat=ipAddr.isSourceNat();
      String vlanId=ipAddr.getVlanTag();
      String vlanGateway=ipAddr.getGateway();
      String vlanNetmask=ipAddr.getNetmask();
      String vifMacAddress=ipAddr.getMacAddress();
      String vmGuestAddress=null;
      Integer networkRate=_networkMgr.getNetworkRate(ipAddr.getNetworkId(),null);
      IpAddressTO ip=new IpAddressTO(ipAddr.getAddress().addr(),add,firstIP,sourceNat,vlanId,vlanGateway,vlanNetmask,vifMacAddress,vmGuestAddress,networkRate);
      ipsToSend[i++]=ip;
      firstIP=false;
    }
    IPAssocCommand cmd=new IPAssocCommand(ipsToSend);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
    cmds.addCommand(""String_Node_Str"",cmd);
  }
}","private void createAssociateIPCommands(final DomainRouterVO router,final List<? extends PublicIpAddress> ips,Commands cmds,long vmId){
  Map<String,ArrayList<PublicIpAddress>> vlanIpMap=new HashMap<String,ArrayList<PublicIpAddress>>();
  for (  final PublicIpAddress ipAddress : ips) {
    String vlanTag=ipAddress.getVlanTag();
    ArrayList<PublicIpAddress> ipList=vlanIpMap.get(vlanTag);
    if (ipList == null) {
      ipList=new ArrayList<PublicIpAddress>();
    }
    ipList.add(ipAddress);
    vlanIpMap.put(vlanTag,ipList);
  }
  for (  Map.Entry<String,ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {
    List<PublicIpAddress> ipAddrList=vlanAndIp.getValue();
    Collections.sort(ipAddrList,new Comparator<PublicIpAddress>(){
      @Override public int compare(      PublicIpAddress o1,      PublicIpAddress o2){
        boolean s1=o1.isSourceNat();
        boolean s2=o2.isSourceNat();
        return (s1 ^ s2) ? ((s1 ^ true) ? 1 : -1) : 0;
      }
    }
);
    IpAddressTO[] ipsToSend=new IpAddressTO[ipAddrList.size()];
    int i=0;
    boolean firstIP=true;
    for (    final PublicIpAddress ipAddr : ipAddrList) {
      boolean add=(ipAddr.getState() == IpAddress.State.Releasing ? false : true);
      boolean sourceNat=ipAddr.isSourceNat();
      String vlanId=ipAddr.getVlanTag();
      String vlanGateway=ipAddr.getGateway();
      String vlanNetmask=ipAddr.getNetmask();
      String vifMacAddress=ipAddr.getMacAddress();
      String vmGuestAddress=null;
      Integer networkRate=_networkMgr.getNetworkRate(ipAddr.getNetworkId(),router.getId());
      IpAddressTO ip=new IpAddressTO(ipAddr.getAddress().addr(),add,firstIP,sourceNat,vlanId,vlanGateway,vlanNetmask,vifMacAddress,vmGuestAddress,networkRate);
      ipsToSend[i++]=ip;
      firstIP=false;
    }
    IPAssocCommand cmd=new IPAssocCommand(ipsToSend);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
    cmds.addCommand(""String_Node_Str"",cmd);
  }
}"
89583,"private void createAssociateIPCommands(final DomainRouterVO router,final List<? extends PublicIpAddress> ips,Commands cmds,long vmId){
  Map<String,ArrayList<PublicIpAddress>> vlanIpMap=new HashMap<String,ArrayList<PublicIpAddress>>();
  for (  final PublicIpAddress ipAddress : ips) {
    String vlanTag=ipAddress.getVlanTag();
    ArrayList<PublicIpAddress> ipList=vlanIpMap.get(vlanTag);
    if (ipList == null) {
      ipList=new ArrayList<PublicIpAddress>();
    }
    ipList.add(ipAddress);
    vlanIpMap.put(vlanTag,ipList);
  }
  for (  Map.Entry<String,ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {
    List<PublicIpAddress> ipAddrList=vlanAndIp.getValue();
    Collections.sort(ipAddrList,new Comparator<PublicIpAddress>(){
      @Override public int compare(      PublicIpAddress o1,      PublicIpAddress o2){
        boolean s1=o1.isSourceNat();
        boolean s2=o2.isSourceNat();
        return (s1 ^ s2) ? ((s1 ^ true) ? 1 : -1) : 0;
      }
    }
);
    IpAddressTO[] ipsToSend=new IpAddressTO[ipAddrList.size()];
    int i=0;
    boolean firstIP=true;
    for (    final PublicIpAddress ipAddr : ipAddrList) {
      boolean add=(ipAddr.getState() == IpAddress.State.Releasing ? false : true);
      boolean sourceNat=ipAddr.isSourceNat();
      String vlanId=ipAddr.getVlanTag();
      String vlanGateway=ipAddr.getGateway();
      String vlanNetmask=ipAddr.getNetmask();
      String vifMacAddress=ipAddr.getMacAddress();
      String vmGuestAddress=null;
      Integer networkRate=_networkMgr.getNetworkRate(ipAddr.getNetworkId(),null);
      IpAddressTO ip=new IpAddressTO(ipAddr.getAddress().addr(),add,firstIP,sourceNat,vlanId,vlanGateway,vlanNetmask,vifMacAddress,vmGuestAddress,networkRate);
      ipsToSend[i++]=ip;
      firstIP=false;
    }
    IPAssocCommand cmd=new IPAssocCommand(ipsToSend);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
    cmds.addCommand(""String_Node_Str"",cmd);
  }
}","private void createAssociateIPCommands(final DomainRouterVO router,final List<? extends PublicIpAddress> ips,Commands cmds,long vmId){
  Map<String,ArrayList<PublicIpAddress>> vlanIpMap=new HashMap<String,ArrayList<PublicIpAddress>>();
  for (  final PublicIpAddress ipAddress : ips) {
    String vlanTag=ipAddress.getVlanTag();
    ArrayList<PublicIpAddress> ipList=vlanIpMap.get(vlanTag);
    if (ipList == null) {
      ipList=new ArrayList<PublicIpAddress>();
    }
    ipList.add(ipAddress);
    vlanIpMap.put(vlanTag,ipList);
  }
  for (  Map.Entry<String,ArrayList<PublicIpAddress>> vlanAndIp : vlanIpMap.entrySet()) {
    List<PublicIpAddress> ipAddrList=vlanAndIp.getValue();
    Collections.sort(ipAddrList,new Comparator<PublicIpAddress>(){
      @Override public int compare(      PublicIpAddress o1,      PublicIpAddress o2){
        boolean s1=o1.isSourceNat();
        boolean s2=o2.isSourceNat();
        return (s1 ^ s2) ? ((s1 ^ true) ? 1 : -1) : 0;
      }
    }
);
    IpAddressTO[] ipsToSend=new IpAddressTO[ipAddrList.size()];
    int i=0;
    boolean firstIP=true;
    for (    final PublicIpAddress ipAddr : ipAddrList) {
      boolean add=(ipAddr.getState() == IpAddress.State.Releasing ? false : true);
      boolean sourceNat=ipAddr.isSourceNat();
      String vlanId=ipAddr.getVlanTag();
      String vlanGateway=ipAddr.getGateway();
      String vlanNetmask=ipAddr.getNetmask();
      String vifMacAddress=ipAddr.getMacAddress();
      String vmGuestAddress=null;
      Integer networkRate=_networkMgr.getNetworkRate(ipAddr.getNetworkId(),router.getId());
      IpAddressTO ip=new IpAddressTO(ipAddr.getAddress().addr(),add,firstIP,sourceNat,vlanId,vlanGateway,vlanNetmask,vifMacAddress,vmGuestAddress,networkRate);
      ipsToSend[i++]=ip;
      firstIP=false;
    }
    IPAssocCommand cmd=new IPAssocCommand(ipsToSend);
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_IP,router.getPrivateIpAddress());
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_GUEST_IP,router.getGuestIpAddress());
    cmd.setAccessDetail(NetworkElementCommand.ROUTER_NAME,router.getInstanceName());
    DataCenterVO dcVo=_dcDao.findById(router.getDataCenterIdToDeployIn());
    cmd.setAccessDetail(NetworkElementCommand.ZONE_NETWORK_TYPE,dcVo.getNetworkType().toString());
    cmds.addCommand(""String_Node_Str"",cmd);
  }
}"
89584,"@Override public void execute() throws InsufficientCapacityException, ConcurrentOperationException {
  Network result=_networkService.updateNetwork(getId(),getNetworkName(),getDisplayText(),tags,UserContext.current().getCaller());
  if (result != null) {
    NetworkResponse response=_responseGenerator.createNetworkResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute() throws InsufficientCapacityException, ConcurrentOperationException {
  Network result=_networkService.updateNetwork(getId(),getNetworkName(),getDisplayText(),tags,UserContext.current().getCaller(),getNetworkDomain());
  if (result != null) {
    NetworkResponse response=_responseGenerator.createNetworkResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}"
89585,"Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkId);","Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkId,long zoneId);"
89586,"Network updateNetwork(long networkId,String name,String displayText,List<String> tags,Account caller);","Network updateNetwork(long networkId,String name,String displayText,List<String> tags,Account caller,String domainSuffix);"
89587,"public static Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkId){
  return _networkMgr.getNetworkCapabilities(networkId);
}","public static Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkOfferingId,long zoneId){
  return _networkMgr.getNetworkCapabilities(networkOfferingId,zoneId);
}"
89588,"@Override public NetworkResponse createNetworkResponse(Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getId());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getBroadcastUri() != null) {
    response.setBroadcastUri(network.getBroadcastUri().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().name());
  }
  List<? extends Vlan> vlan=ApiDBUtils.listVlanByNetworkId(network.getId());
  if (vlan != null && !vlan.isEmpty()) {
    Vlan singleVlan=vlan.get(0);
    String ipRange=singleVlan.getIpRange();
    String[] range=ipRange.split(""String_Node_Str"");
    response.setStartIp(range[0]);
    response.setEndIp(range[1]);
    response.setGateway(singleVlan.getVlanGateway());
    response.setNetmask(singleVlan.getVlanNetmask());
    response.setVlan(singleVlan.getVlanTag());
  }
  response.setZoneId(network.getDataCenterId());
  NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
  if (networkOffering != null) {
    response.setNetworkOfferingId(networkOffering.getId());
    response.setNetworkOfferingName(networkOffering.getName());
    response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
    response.setIsSystem(networkOffering.isSystemOnly());
    response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
  }
  response.setIsShared(network.getIsShared());
  response.setIsDefault(network.isDefault());
  response.setState(network.getState().toString());
  response.setRelated(network.getRelated());
  response.setNetworkDomain(network.getNetworkDomain());
  response.setDns1(profile.getDns1());
  response.setDns2(profile.getDns2());
  response.setIsSecurityGroupEnabled(network.isSecurityGroupEnabled());
  response.setTags(network.getTags());
  Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(network.getId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  if (serviceCapabilitiesMap != null) {
    for (    Service service : serviceCapabilitiesMap.keySet()) {
      ServiceResponse serviceResponse=new ServiceResponse();
      serviceResponse.setName(service.getName());
      List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
      Map<Capability,String> serviceCapabilities=serviceCapabilitiesMap.get(service);
      if (serviceCapabilities != null) {
        for (        Capability capability : serviceCapabilities.keySet()) {
          CapabilityResponse capabilityResponse=new CapabilityResponse();
          String capabilityValue=serviceCapabilities.get(capability);
          capabilityResponse.setName(capability.getName());
          capabilityResponse.setValue(capabilityValue);
          capabilityResponse.setObjectName(""String_Node_Str"");
          capabilityResponses.add(capabilityResponse);
        }
        serviceResponse.setCapabilities(capabilityResponses);
      }
      serviceResponse.setObjectName(""String_Node_Str"");
      serviceResponses.add(serviceResponse);
    }
  }
  response.setServices(serviceResponses);
  Account account=ApiDBUtils.findAccountById(network.getAccountId());
  if (account != null && !network.getIsShared()) {
    response.setAccountName(account.getAccountName());
    Domain domain=ApiDBUtils.findDomainById(account.getDomainId());
    response.setDomainId(domain.getId());
    response.setDomain(domain.getName());
  }
  Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
  if (dedicatedDomainId != null) {
    Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
    response.setDomainId(dedicatedDomainId);
    response.setDomain(domain.getName());
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public NetworkResponse createNetworkResponse(Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getId());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getBroadcastUri() != null) {
    response.setBroadcastUri(network.getBroadcastUri().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().name());
  }
  List<? extends Vlan> vlan=ApiDBUtils.listVlanByNetworkId(network.getId());
  if (vlan != null && !vlan.isEmpty()) {
    Vlan singleVlan=vlan.get(0);
    String ipRange=singleVlan.getIpRange();
    String[] range=ipRange.split(""String_Node_Str"");
    response.setStartIp(range[0]);
    response.setEndIp(range[1]);
    response.setGateway(singleVlan.getVlanGateway());
    response.setNetmask(singleVlan.getVlanNetmask());
    response.setVlan(singleVlan.getVlanTag());
  }
  response.setZoneId(network.getDataCenterId());
  NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
  if (networkOffering != null) {
    response.setNetworkOfferingId(networkOffering.getId());
    response.setNetworkOfferingName(networkOffering.getName());
    response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
    response.setIsSystem(networkOffering.isSystemOnly());
    response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
  }
  response.setIsShared(network.getIsShared());
  response.setIsDefault(network.isDefault());
  response.setState(network.getState().toString());
  response.setRelated(network.getRelated());
  response.setNetworkDomain(network.getNetworkDomain());
  response.setDns1(profile.getDns1());
  response.setDns2(profile.getDns2());
  response.setIsSecurityGroupEnabled(network.isSecurityGroupEnabled());
  response.setTags(network.getTags());
  Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(networkOffering.getId(),network.getDataCenterId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  if (serviceCapabilitiesMap != null) {
    for (    Service service : serviceCapabilitiesMap.keySet()) {
      ServiceResponse serviceResponse=new ServiceResponse();
      serviceResponse.setName(service.getName());
      List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
      Map<Capability,String> serviceCapabilities=serviceCapabilitiesMap.get(service);
      if (serviceCapabilities != null) {
        for (        Capability capability : serviceCapabilities.keySet()) {
          CapabilityResponse capabilityResponse=new CapabilityResponse();
          String capabilityValue=serviceCapabilities.get(capability);
          capabilityResponse.setName(capability.getName());
          capabilityResponse.setValue(capabilityValue);
          capabilityResponse.setObjectName(""String_Node_Str"");
          capabilityResponses.add(capabilityResponse);
        }
        serviceResponse.setCapabilities(capabilityResponses);
      }
      serviceResponse.setObjectName(""String_Node_Str"");
      serviceResponses.add(serviceResponse);
    }
  }
  response.setServices(serviceResponses);
  Account account=ApiDBUtils.findAccountById(network.getAccountId());
  if (account != null && !network.getIsShared()) {
    response.setAccountName(account.getAccountName());
    Domain domain=ApiDBUtils.findDomainById(account.getDomainId());
    response.setDomainId(domain.getId());
    response.setDomain(domain.getName());
  }
  Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
  if (dedicatedDomainId != null) {
    Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
    response.setDomainId(dedicatedDomainId);
    response.setDomain(domain.getName());
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}"
89589,"Map<Capability,String> getServiceCapabilities(long zoneId,Service service);","Map<Capability,String> getServiceCapabilities(long zoneId,Long networkOfferingId,Service service);"
89590,"@Override @ActionEvent(eventType=EventTypes.EVENT_NETWORK_UPDATE,eventDescription=""String_Node_Str"",async=false) public Network updateNetwork(long networkId,String name,String displayText,List<String> tags,Account caller){
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
  }
  if (tags != null && tags.size() > 1) {
    throw new InvalidParameterException(""String_Node_Str"");
  }
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (offering.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,network);
  if (name != null) {
    network.setName(name);
  }
  if (displayText != null) {
    network.setDisplayText(displayText);
  }
  if (tags != null) {
    network.setTags(tags);
  }
  _networksDao.update(networkId,network);
  return network;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_NETWORK_UPDATE,eventDescription=""String_Node_Str"",async=false) public Network updateNetwork(long networkId,String name,String displayText,List<String> tags,Account caller,String domainSuffix){
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
  }
  if (tags != null && tags.size() > 1) {
    throw new InvalidParameterException(""String_Node_Str"");
  }
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (offering.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainSuffix != null) {
    Map<Network.Capability,String> dnsCapabilities=getServiceCapabilities(network.getDataCenterId(),network.getNetworkOfferingId(),Service.Dns);
    String isUpdateDnsSupported=dnsCapabilities.get(Capability.AllowDnsSuffixModification);
    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + network.getNetworkOfferingId() + ""String_Node_Str""+ network.getDataCenterId());
    }
    List<DomainRouterVO> routers=_routerDao.listActive(networkId);
    if (!routers.isEmpty()) {
      throw new CloudRuntimeException(""String_Node_Str"" + networkId + ""String_Node_Str"");
    }
    network.setNetworkDomain(domainSuffix);
  }
  _accountMgr.checkAccess(caller,network);
  if (name != null) {
    network.setName(name);
  }
  if (displayText != null) {
    network.setDisplayText(displayText);
  }
  if (tags != null) {
    network.setTags(tags);
  }
  _networksDao.update(networkId,network);
  return network;
}"
89591,"@Override @DB public List<NetworkVO> setupNetwork(Account owner,NetworkOfferingVO offering,Network predefined,DeploymentPlan plan,String name,String displayText,boolean isShared,boolean isDefault,boolean errorIfAlreadySetup,Long domainId,List<String> tags) throws ConcurrentOperationException {
  Account locked=_accountDao.acquireInLockTable(owner.getId());
  if (locked == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + owner);
  }
  try {
    if (predefined == null || (predefined.getCidr() == null && predefined.getBroadcastUri() == null && predefined.getBroadcastDomainType() != BroadcastDomainType.Vlan)) {
      List<NetworkVO> configs=_networksDao.listBy(owner.getId(),offering.getId(),plan.getDataCenterId());
      if (configs.size() > 0) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
        if (errorIfAlreadySetup) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
 else {
          return configs;
        }
      }
    }
 else     if (predefined != null && predefined.getCidr() != null && predefined.getBroadcastUri() == null && predefined.getBroadcastUri() == null) {
      List<NetworkVO> configs=_networksDao.listBy(owner.getId(),offering.getId(),plan.getDataCenterId(),predefined.getCidr());
      if (configs.size() > 0) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
        if (errorIfAlreadySetup) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
 else {
          return configs;
        }
      }
    }
    List<NetworkVO> networks=new ArrayList<NetworkVO>();
    long related=-1;
    for (    NetworkGuru guru : _networkGurus) {
      Network network=guru.design(offering,plan,predefined,owner);
      if (network == null) {
        continue;
      }
      if (network.getId() != -1) {
        if (network instanceof NetworkVO) {
          networks.add((NetworkVO)network);
        }
 else {
          networks.add(_networksDao.findById(network.getId()));
        }
        continue;
      }
      long id=_networksDao.getNextInSequence(Long.class,""String_Node_Str"");
      if (related == -1) {
        related=id;
      }
      NetworkVO vo=new NetworkVO(id,network,offering.getId(),plan.getDataCenterId(),guru.getName(),owner.getDomainId(),owner.getId(),related,name,displayText,isShared,isDefault,predefined.isSecurityGroupEnabled(),(domainId != null));
      vo.setTags(tags);
      networks.add(_networksDao.persist(vo,vo.getGuestType() != null));
      if (domainId != null) {
        _networksDao.addDomainToNetwork(id,domainId);
      }
    }
    if (networks.size() < 1) {
      throw new CloudRuntimeException(""String_Node_Str"" + offering.getId());
    }
    return networks;
  }
  finally {
    s_logger.debug(""String_Node_Str"" + locked);
    _accountDao.releaseFromLockTable(locked.getId());
  }
}","@Override @DB public List<NetworkVO> setupNetwork(Account owner,NetworkOfferingVO offering,Network predefined,DeploymentPlan plan,String name,String displayText,boolean isShared,boolean isDefault,boolean errorIfAlreadySetup,Long domainId,List<String> tags) throws ConcurrentOperationException {
  Account locked=_accountDao.acquireInLockTable(owner.getId());
  if (locked == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + owner);
  }
  try {
    if (predefined == null || (predefined.getCidr() == null && predefined.getBroadcastUri() == null && predefined.getBroadcastDomainType() != BroadcastDomainType.Vlan)) {
      List<NetworkVO> configs=_networksDao.listBy(owner.getId(),offering.getId(),plan.getDataCenterId());
      if (configs.size() > 0) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
        if (errorIfAlreadySetup) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
 else {
          return configs;
        }
      }
    }
 else     if (predefined != null && predefined.getCidr() != null && predefined.getBroadcastUri() == null && predefined.getBroadcastUri() == null) {
      List<NetworkVO> configs=_networksDao.listBy(owner.getId(),offering.getId(),plan.getDataCenterId(),predefined.getCidr());
      if (configs.size() > 0) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
        if (errorIfAlreadySetup) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
 else {
          return configs;
        }
      }
    }
    List<NetworkVO> networks=new ArrayList<NetworkVO>();
    long related=-1;
    for (    NetworkGuru guru : _networkGurus) {
      Network network=guru.design(offering,plan,predefined,owner);
      if (network == null) {
        continue;
      }
      if (network.getId() != -1) {
        if (network instanceof NetworkVO) {
          networks.add((NetworkVO)network);
        }
 else {
          networks.add(_networksDao.findById(network.getId()));
        }
        continue;
      }
      long id=_networksDao.getNextInSequence(Long.class,""String_Node_Str"");
      if (related == -1) {
        related=id;
      }
      NetworkVO vo=new NetworkVO(id,network,offering.getId(),plan.getDataCenterId(),guru.getName(),owner.getDomainId(),owner.getId(),related,name,displayText,isShared,isDefault,predefined.isSecurityGroupEnabled(),(domainId != null),predefined.getNetworkDomain());
      vo.setTags(tags);
      networks.add(_networksDao.persist(vo,vo.getGuestType() != null));
      if (domainId != null) {
        _networksDao.addDomainToNetwork(id,domainId);
      }
    }
    if (networks.size() < 1) {
      throw new CloudRuntimeException(""String_Node_Str"" + offering.getId());
    }
    return networks;
  }
  finally {
    s_logger.debug(""String_Node_Str"" + locked);
    _accountDao.releaseFromLockTable(locked.getId());
  }
}"
89592,"@Override public Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkId){
  Network network=getNetwork(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Map<Service,Map<Capability,String>> zoneCapabilities=getZoneCapabilities(network.getDataCenterId());
  Map<Service,Map<Capability,String>> networkCapabilities=new HashMap<Service,Map<Capability,String>>();
  for (  Service service : zoneCapabilities.keySet()) {
    if (isServiceSupported(networkId,service)) {
      networkCapabilities.put(service,zoneCapabilities.get(service));
    }
  }
  return networkCapabilities;
}","@Override public Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkOfferingId,long zoneId){
  Map<Service,Map<Capability,String>> zoneCapabilities=getZoneCapabilities(zoneId);
  Map<Service,Map<Capability,String>> networkCapabilities=new HashMap<Service,Map<Capability,String>>();
  for (  Service service : zoneCapabilities.keySet()) {
    if (isServiceSupported(networkOfferingId,service)) {
      networkCapabilities.put(service,zoneCapabilities.get(service));
    }
  }
  return networkCapabilities;
}"
89593,"@Override @DB public Network createNetwork(long networkOfferingId,String name,String displayText,Boolean isShared,Boolean isDefault,Long zoneId,String gateway,String cidr,String vlanId,String networkDomain,Account owner,boolean isSecurityGroupEnabled,Long domainId,List<String> tags) throws ConcurrentOperationException, InsufficientCapacityException {
  NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone.isSecurityGroupEnabled() && (networkOffering.getGuestType() == GuestIpType.Virtual || (isShared != null && isShared))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Basic);
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual) {
    if (isDefault != null && !isDefault) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      isDefault=true;
    }
    if (isShared != null && isShared) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (isDefault == null) {
      isDefault=false;
    }
  }
  if (isShared) {
    owner=_accountMgr.getSystemAccount();
  }
  if (vlanId != null) {
    String uri=""String_Node_Str"" + vlanId;
    List<NetworkVO> networks=_networksDao.listBy(zoneId,uri);
    if ((networks != null && !networks.isEmpty())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlanId + ""String_Node_Str""+ zoneId);
    }
  }
  if (vlanId != null && !networkOffering.getSpecifyVlan()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual && vlanId != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + GuestIpType.Virtual);
  }
  if (networkDomain == null) {
    networkDomain=""String_Node_Str"" + Long.toHexString(owner.getId()) + _networkDomain;
  }
 else {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  if (cidr == null && networkOffering.getTrafficType() == TrafficType.Guest && networkOffering.getGuestType() == GuestIpType.Direct) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cidr != null && networkOffering.getGuestType() == GuestIpType.Virtual && networkOffering.getTrafficType() == TrafficType.Guest) {
    if (!NetUtils.validateGuestCidr(cidr)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cidr + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  DataCenterDeployment plan=new DataCenterDeployment(zoneId,null,null,null,null);
  NetworkVO userNetwork=new NetworkVO();
  userNetwork.setNetworkDomain(networkDomain);
  userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
  if (cidr != null && gateway != null) {
    userNetwork.setCidr(cidr);
    userNetwork.setGateway(gateway);
    if (vlanId != null) {
      userNetwork.setBroadcastUri(URI.create(""String_Node_Str"" + vlanId));
      userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      if (!vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      }
 else {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Native);
      }
    }
  }
  List<NetworkVO> networks=setupNetwork(owner,networkOffering,userNetwork,plan,name,displayText,isShared,isDefault,true,domainId,tags);
  Network network=null;
  if (networks == null || networks.isEmpty()) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
 else {
    if (networks.size() > 0 && networks.get(0).getGuestType() == GuestIpType.Virtual && networks.get(0).getTrafficType() == TrafficType.Guest) {
      Network defaultGuestNetwork=networks.get(0);
      for (      Network nw : networks) {
        if (nw.getCidr() != null && nw.getCidr().equals(zone.getGuestNetworkCidr())) {
          defaultGuestNetwork=nw;
        }
      }
      network=defaultGuestNetwork;
    }
 else {
      network=networks.get(0);
    }
  }
  txn.commit();
  UserContext.current().setEventDetails(""String_Node_Str"" + network.getId());
  return network;
}","@Override @DB public Network createNetwork(long networkOfferingId,String name,String displayText,Boolean isShared,Boolean isDefault,Long zoneId,String gateway,String cidr,String vlanId,String networkDomain,Account owner,boolean isSecurityGroupEnabled,Long domainId,List<String> tags) throws ConcurrentOperationException, InsufficientCapacityException {
  NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone.isSecurityGroupEnabled() && (networkOffering.getGuestType() == GuestIpType.Virtual || (isShared != null && isShared))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Basic);
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual) {
    if (isDefault != null && !isDefault) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      isDefault=true;
    }
    if (isShared != null && isShared) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (isDefault == null) {
      isDefault=false;
    }
  }
  if (isShared) {
    owner=_accountMgr.getSystemAccount();
  }
  if (vlanId != null) {
    String uri=""String_Node_Str"" + vlanId;
    List<NetworkVO> networks=_networksDao.listBy(zoneId,uri);
    if ((networks != null && !networks.isEmpty())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlanId + ""String_Node_Str""+ zoneId);
    }
  }
  if (vlanId != null && !networkOffering.getSpecifyVlan()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual && vlanId != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + GuestIpType.Virtual);
  }
  Map<Network.Capability,String> dnsCapabilities=getServiceCapabilities(zoneId,networkOfferingId,Service.Dns);
  String isUpdateDnsSupported=dnsCapabilities.get(Capability.AllowDnsSuffixModification);
  if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {
    if (networkDomain != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkOfferingId + ""String_Node_Str""+ zoneId);
    }
  }
 else {
    if (networkDomain == null) {
      networkDomain=""String_Node_Str"" + Long.toHexString(owner.getId()) + _networkDomain;
    }
 else {
      if (!NetUtils.verifyDomainName(networkDomain)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
  }
  if (cidr == null && networkOffering.getTrafficType() == TrafficType.Guest && networkOffering.getGuestType() == GuestIpType.Direct) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cidr != null && networkOffering.getGuestType() == GuestIpType.Virtual && networkOffering.getTrafficType() == TrafficType.Guest) {
    if (!NetUtils.validateGuestCidr(cidr)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cidr + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  DataCenterDeployment plan=new DataCenterDeployment(zoneId,null,null,null,null);
  NetworkVO userNetwork=new NetworkVO();
  userNetwork.setNetworkDomain(networkDomain);
  userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
  if (cidr != null && gateway != null) {
    userNetwork.setCidr(cidr);
    userNetwork.setGateway(gateway);
    if (vlanId != null) {
      userNetwork.setBroadcastUri(URI.create(""String_Node_Str"" + vlanId));
      userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      if (!vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      }
 else {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Native);
      }
    }
  }
  List<NetworkVO> networks=setupNetwork(owner,networkOffering,userNetwork,plan,name,displayText,isShared,isDefault,true,domainId,tags);
  Network network=null;
  if (networks == null || networks.isEmpty()) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
 else {
    if (networks.size() > 0 && networks.get(0).getGuestType() == GuestIpType.Virtual && networks.get(0).getTrafficType() == TrafficType.Guest) {
      Network defaultGuestNetwork=networks.get(0);
      for (      Network nw : networks) {
        if (nw.getCidr() != null && nw.getCidr().equals(zone.getGuestNetworkCidr())) {
          defaultGuestNetwork=nw;
        }
      }
      network=defaultGuestNetwork;
    }
 else {
      network=networks.get(0);
    }
  }
  txn.commit();
  UserContext.current().setEventDetails(""String_Node_Str"" + network.getId());
  return network;
}"
89594,"@Override public Map<Capability,String> getServiceCapabilities(long zoneId,Service service){
  Map<Service,Map<Capability,String>> networkCapabilities=getZoneCapabilities(zoneId);
  if (networkCapabilities.get(service) == null) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ zoneId);
  }
  return networkCapabilities.get(service);
}","@Override public Map<Capability,String> getServiceCapabilities(long zoneId,Long networkOfferingId,Service service){
  if (!isServiceSupported(networkOfferingId,service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ networkOfferingId);
  }
  Map<Service,Map<Capability,String>> networkCapabilities=getZoneCapabilities(zoneId);
  if (networkCapabilities.get(service) == null) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ zoneId);
  }
  return networkCapabilities.get(service);
}"
89595,"@Override public boolean isServiceSupported(long networkId,Network.Service service){
  Network network=getNetwork(networkId);
  NetworkOffering offering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
  if (service == Service.Lb) {
    return offering.isLbService();
  }
 else   if (service == Service.Dhcp) {
    return offering.isDhcpService();
  }
 else   if (service == Service.Dns) {
    return offering.isDnsService();
  }
 else   if (service == Service.Firewall) {
    return offering.isFirewallService();
  }
 else   if (service == Service.UserData) {
    return offering.isUserdataService();
  }
 else   if (service == Service.Vpn) {
    return offering.isVpnService();
  }
 else   if (service == Service.Gateway) {
    return offering.isGatewayService();
  }
  return false;
}","@Override public boolean isServiceSupported(long networkOfferingId,Network.Service service){
  NetworkOffering offering=_configMgr.getNetworkOffering(networkOfferingId);
  if (service == Service.Lb) {
    return offering.isLbService();
  }
 else   if (service == Service.Dhcp) {
    return offering.isDhcpService();
  }
 else   if (service == Service.Dns) {
    return offering.isDnsService();
  }
 else   if (service == Service.Firewall) {
    return offering.isFirewallService();
  }
 else   if (service == Service.UserData) {
    return offering.isUserdataService();
  }
 else   if (service == Service.Vpn) {
    return offering.isVpnService();
  }
 else   if (service == Service.Gateway) {
    return offering.isGatewayService();
  }
  return false;
}"
89596,"@Override public List<NetworkVO> listNetworksForAccount(long accountId,long zoneId,GuestIpType guestType,Boolean isDefault){
  List<NetworkVO> accountNetworks=new ArrayList<NetworkVO>();
  List<NetworkVO> zoneNetworks=_networksDao.listByZone(zoneId);
  for (  NetworkVO network : zoneNetworks) {
    NetworkOfferingVO no=_networkOfferingDao.findById(network.getNetworkOfferingId());
    if (!no.isSystemOnly()) {
      if (network.getIsShared() || !_networksDao.listBy(accountId,network.getId()).isEmpty()) {
        if ((guestType == null || guestType == network.getGuestType()) && (isDefault == null || isDefault == network.isDefault)) {
          accountNetworks.add(network);
        }
      }
    }
  }
  return accountNetworks;
}","@Override public List<NetworkVO> listNetworksForAccount(long accountId,long zoneId,GuestIpType guestType,Boolean isDefault){
  List<NetworkVO> accountNetworks=new ArrayList<NetworkVO>();
  List<NetworkVO> zoneNetworks=_networksDao.listByZone(zoneId);
  for (  NetworkVO network : zoneNetworks) {
    NetworkOfferingVO no=_networkOfferingDao.findById(network.getNetworkOfferingId());
    if (!no.isSystemOnly()) {
      if (network.getIsShared() || !_networksDao.listBy(accountId,network.getId()).isEmpty()) {
        if ((guestType == null || guestType == network.getGuestType()) && (isDefault == null || isDefault.booleanValue() == network.isDefault)) {
          accountNetworks.add(network);
        }
      }
    }
  }
  return accountNetworks;
}"
89597,"/** 
 * Constructor for the actual DAO object.
 * @param trafficType
 * @param mode
 * @param broadcastDomainType
 * @param networkOfferingId
 * @param dataCenterId
 * @param domainId
 * @param accountId
 * @param name
 * @param displayText
 * @param isShared
 * @param isDefault
 * @param isDomainSpecific
 */
public NetworkVO(long id,TrafficType trafficType,GuestIpType guestType,Mode mode,BroadcastDomainType broadcastDomainType,long networkOfferingId,long dataCenterId,long domainId,long accountId,long related,String name,String displayText,Boolean isShared,boolean isDefault,boolean isDomainSpecific){
  this(trafficType,guestType,mode,broadcastDomainType,networkOfferingId,dataCenterId,State.Allocated);
  this.domainId=domainId;
  this.accountId=accountId;
  this.related=related;
  this.id=id;
  this.name=name;
  this.displayText=displayText;
  this.isShared=isShared;
  this.isDefault=isDefault;
  this.isDomainSpecific=isDomainSpecific;
}","/** 
 * Constructor for the actual DAO object.
 * @param trafficType
 * @param mode
 * @param broadcastDomainType
 * @param networkOfferingId
 * @param dataCenterId
 * @param domainId
 * @param accountId
 * @param name
 * @param displayText
 * @param isShared
 * @param isDefault
 * @param isDomainSpecific
 * @param networkDomain
 */
public NetworkVO(long id,TrafficType trafficType,GuestIpType guestType,Mode mode,BroadcastDomainType broadcastDomainType,long networkOfferingId,long dataCenterId,long domainId,long accountId,long related,String name,String displayText,Boolean isShared,boolean isDefault,boolean isDomainSpecific,String networkDomain){
  this(trafficType,guestType,mode,broadcastDomainType,networkOfferingId,dataCenterId,State.Allocated);
  this.domainId=domainId;
  this.accountId=accountId;
  this.related=related;
  this.id=id;
  this.name=name;
  this.displayText=displayText;
  this.isShared=isShared;
  this.isDefault=isDefault;
  this.isDomainSpecific=isDomainSpecific;
  this.networkDomain=networkDomain;
}"
89598,"private static Map<Service,Map<Capability,String>> setCapabilities(){
  Map<Service,Map<Capability,String>> capabilities=new HashMap<Service,Map<Capability,String>>();
  capabilities.put(Service.Dns,null);
  capabilities.put(Service.UserData,null);
  capabilities.put(Service.Dhcp,null);
  return capabilities;
}","private static Map<Service,Map<Capability,String>> setCapabilities(){
  Map<Service,Map<Capability,String>> capabilities=new HashMap<Service,Map<Capability,String>>();
  Map<Capability,String> dnsCapabilities=new HashMap<Capability,String>();
  dnsCapabilities.put(Capability.AllowDnsSuffixModification,""String_Node_Str"");
  capabilities.put(Service.Dns,dnsCapabilities);
  capabilities.put(Service.UserData,null);
  capabilities.put(Service.Dhcp,null);
  return capabilities;
}"
89599,"private static Map<Service,Map<Capability,String>> setCapabilities(){
  Map<Service,Map<Capability,String>> capabilities=new HashMap<Service,Map<Capability,String>>();
  Map<Capability,String> lbCapabilities=new HashMap<Capability,String>();
  lbCapabilities.put(Capability.SupportedLBAlgorithms,""String_Node_Str"");
  lbCapabilities.put(Capability.SupportedProtocols,""String_Node_Str"");
  capabilities.put(Service.Lb,lbCapabilities);
  Map<Capability,String> firewallCapabilities=new HashMap<Capability,String>();
  firewallCapabilities.put(Capability.PortForwarding,""String_Node_Str"");
  firewallCapabilities.put(Capability.TrafficStatistics,""String_Node_Str"");
  firewallCapabilities.put(Capability.StaticNat,""String_Node_Str"");
  firewallCapabilities.put(Capability.SupportedProtocols,""String_Node_Str"");
  firewallCapabilities.put(Capability.MultipleIps,""String_Node_Str"");
  firewallCapabilities.put(Capability.SupportedSourceNatTypes,""String_Node_Str"");
  capabilities.put(Service.Firewall,firewallCapabilities);
  Map<Capability,String> vpnCapabilities=new HashMap<Capability,String>();
  vpnCapabilities.put(Capability.SupportedVpnTypes,""String_Node_Str"");
  capabilities.put(Service.Vpn,vpnCapabilities);
  capabilities.put(Service.Dns,null);
  capabilities.put(Service.UserData,null);
  capabilities.put(Service.Dhcp,null);
  capabilities.put(Service.Gateway,null);
  return capabilities;
}","private static Map<Service,Map<Capability,String>> setCapabilities(){
  Map<Service,Map<Capability,String>> capabilities=new HashMap<Service,Map<Capability,String>>();
  Map<Capability,String> lbCapabilities=new HashMap<Capability,String>();
  lbCapabilities.put(Capability.SupportedLBAlgorithms,""String_Node_Str"");
  lbCapabilities.put(Capability.SupportedProtocols,""String_Node_Str"");
  capabilities.put(Service.Lb,lbCapabilities);
  Map<Capability,String> firewallCapabilities=new HashMap<Capability,String>();
  firewallCapabilities.put(Capability.PortForwarding,""String_Node_Str"");
  firewallCapabilities.put(Capability.TrafficStatistics,""String_Node_Str"");
  firewallCapabilities.put(Capability.StaticNat,""String_Node_Str"");
  firewallCapabilities.put(Capability.SupportedProtocols,""String_Node_Str"");
  firewallCapabilities.put(Capability.MultipleIps,""String_Node_Str"");
  firewallCapabilities.put(Capability.SupportedSourceNatTypes,""String_Node_Str"");
  capabilities.put(Service.Firewall,firewallCapabilities);
  Map<Capability,String> vpnCapabilities=new HashMap<Capability,String>();
  vpnCapabilities.put(Capability.SupportedVpnTypes,""String_Node_Str"");
  capabilities.put(Service.Vpn,vpnCapabilities);
  Map<Capability,String> dnsCapabilities=new HashMap<Capability,String>();
  dnsCapabilities.put(Capability.AllowDnsSuffixModification,""String_Node_Str"");
  capabilities.put(Service.Dns,dnsCapabilities);
  capabilities.put(Service.UserData,null);
  capabilities.put(Service.Dhcp,null);
  capabilities.put(Service.Gateway,null);
  return capabilities;
}"
89600,"@Override public Network design(NetworkOffering offering,DeploymentPlan plan,Network userSpecified,Account owner){
  DataCenter dc=_dcDao.findById(plan.getDataCenterId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  NetworkVO network=new NetworkVO(offering.getTrafficType(),offering.getGuestType(),Mode.Dhcp,BroadcastDomainType.Vlan,offering.getId(),plan.getDataCenterId(),State.Allocated);
  if (userSpecified != null) {
    if ((userSpecified.getCidr() == null && userSpecified.getGateway() != null) || (userSpecified.getCidr() != null && userSpecified.getGateway() == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (userSpecified.getCidr() != null) {
      network.setCidr(userSpecified.getCidr());
      network.setGateway(userSpecified.getGateway());
    }
 else {
      String guestNetworkCidr=dc.getGuestNetworkCidr();
      if (guestNetworkCidr != null) {
        String[] cidrTuple=guestNetworkCidr.split(""String_Node_Str"");
        network.setGateway(NetUtils.getIpRangeStartIpFromCidr(cidrTuple[0],Long.parseLong(cidrTuple[1])));
        network.setCidr(guestNetworkCidr);
      }
    }
    if (userSpecified.getBroadcastUri() != null) {
      network.setBroadcastUri(userSpecified.getBroadcastUri());
      network.setState(State.Setup);
    }
    if (userSpecified.getNetworkDomain() != null) {
      network.setNetworkDomain(userSpecified.getNetworkDomain());
    }
  }
 else {
    String guestNetworkCidr=dc.getGuestNetworkCidr();
    String[] cidrTuple=guestNetworkCidr.split(""String_Node_Str"");
    network.setGateway(NetUtils.getIpRangeStartIpFromCidr(cidrTuple[0],Long.parseLong(cidrTuple[1])));
    network.setCidr(guestNetworkCidr);
    ;
  }
  return network;
}","@Override public Network design(NetworkOffering offering,DeploymentPlan plan,Network userSpecified,Account owner){
  DataCenter dc=_dcDao.findById(plan.getDataCenterId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  NetworkVO network=new NetworkVO(offering.getTrafficType(),offering.getGuestType(),Mode.Dhcp,BroadcastDomainType.Vlan,offering.getId(),plan.getDataCenterId(),State.Allocated);
  if (userSpecified != null) {
    if ((userSpecified.getCidr() == null && userSpecified.getGateway() != null) || (userSpecified.getCidr() != null && userSpecified.getGateway() == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (userSpecified.getCidr() != null) {
      network.setCidr(userSpecified.getCidr());
      network.setGateway(userSpecified.getGateway());
    }
 else {
      String guestNetworkCidr=dc.getGuestNetworkCidr();
      if (guestNetworkCidr != null) {
        String[] cidrTuple=guestNetworkCidr.split(""String_Node_Str"");
        network.setGateway(NetUtils.getIpRangeStartIpFromCidr(cidrTuple[0],Long.parseLong(cidrTuple[1])));
        network.setCidr(guestNetworkCidr);
      }
    }
    if (userSpecified.getBroadcastUri() != null) {
      network.setBroadcastUri(userSpecified.getBroadcastUri());
      network.setState(State.Setup);
    }
  }
 else {
    String guestNetworkCidr=dc.getGuestNetworkCidr();
    String[] cidrTuple=guestNetworkCidr.split(""String_Node_Str"");
    network.setGateway(NetUtils.getIpRangeStartIpFromCidr(cidrTuple[0],Long.parseLong(cidrTuple[1])));
    network.setCidr(guestNetworkCidr);
    ;
  }
  return network;
}"
89601,"@Override @ActionEvent(eventType=EventTypes.EVENT_LOAD_BALANCER_CREATE,eventDescription=""String_Node_Str"") public LoadBalancer createLoadBalancerRule(LoadBalancer lb) throws NetworkRuleConflictException {
  UserContext caller=UserContext.current();
  long ipId=lb.getSourceIpAddressId();
  IPAddressVO ipAddr=_ipAddressDao.findById(ipId);
  if (ipAddr == null || !ipAddr.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  int srcPortStart=lb.getSourcePortStart();
  int srcPortEnd=lb.getSourcePortEnd();
  int defPortStart=lb.getDefaultPortStart();
  int defPortEnd=lb.getDefaultPortEnd();
  if (!NetUtils.isValidPort(srcPortStart)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortStart);
  }
  if (!NetUtils.isValidPort(srcPortEnd)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortEnd);
  }
  if (srcPortStart > srcPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortStart + ""String_Node_Str""+ srcPortEnd);
  }
  if (!NetUtils.isValidPort(defPortStart)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortStart);
  }
  if (!NetUtils.isValidPort(defPortEnd)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortEnd);
  }
  if (defPortStart > defPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortStart + ""String_Node_Str""+ defPortEnd);
  }
  if ((lb.getAlgorithm() == null) || !NetUtils.isValidAlgorithm(lb.getAlgorithm())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + lb.getAlgorithm());
  }
  Long networkId=ipAddr.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller.getCaller(),ipAddr);
  if (!_networkMgr.isServiceSupported(networkId,Service.Lb)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  LoadBalancerVO newRule=new LoadBalancerVO(lb.getXid(),lb.getName(),lb.getDescription(),lb.getSourceIpAddressId(),lb.getSourcePortEnd(),lb.getDefaultPortStart(),lb.getAlgorithm(),networkId,ipAddr.getAccountId(),ipAddr.getDomainId());
  newRule=_lbDao.persist(newRule);
  try {
    _rulesMgr.detectRulesConflict(newRule,ipAddr);
    if (!_rulesDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    s_logger.debug(""String_Node_Str"" + newRule.getId() + ""String_Node_Str""+ ipId+ ""String_Node_Str""+ srcPortStart+ ""String_Node_Str""+ defPortStart+ ""String_Node_Str"");
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_CREATE,ipAddr.getAllocatedToAccountId(),ipAddr.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    return newRule;
  }
 catch (  Exception e) {
    _lbDao.remove(newRule.getId());
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
}","@Override @ActionEvent(eventType=EventTypes.EVENT_LOAD_BALANCER_CREATE,eventDescription=""String_Node_Str"") public LoadBalancer createLoadBalancerRule(LoadBalancer lb) throws NetworkRuleConflictException {
  UserContext caller=UserContext.current();
  long ipId=lb.getSourceIpAddressId();
  IPAddressVO ipAddr=_ipAddressDao.findById(ipId);
  if (ipAddr == null || !ipAddr.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  int srcPortStart=lb.getSourcePortStart();
  int srcPortEnd=lb.getSourcePortEnd();
  int defPortStart=lb.getDefaultPortStart();
  int defPortEnd=lb.getDefaultPortEnd();
  if (!NetUtils.isValidPort(srcPortStart)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortStart);
  }
  if (!NetUtils.isValidPort(srcPortEnd)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortEnd);
  }
  if (srcPortStart > srcPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortStart + ""String_Node_Str""+ srcPortEnd);
  }
  if (!NetUtils.isValidPort(defPortStart)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortStart);
  }
  if (!NetUtils.isValidPort(defPortEnd)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortEnd);
  }
  if (defPortStart > defPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortStart + ""String_Node_Str""+ defPortEnd);
  }
  if ((lb.getAlgorithm() == null) || !NetUtils.isValidAlgorithm(lb.getAlgorithm())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + lb.getAlgorithm());
  }
  Long networkId=ipAddr.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller.getCaller(),ipAddr);
  Network network=_networkMgr.getNetwork(networkId);
  if (!_networkMgr.isServiceSupported(network.getNetworkOfferingId(),Service.Lb)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  LoadBalancerVO newRule=new LoadBalancerVO(lb.getXid(),lb.getName(),lb.getDescription(),lb.getSourceIpAddressId(),lb.getSourcePortEnd(),lb.getDefaultPortStart(),lb.getAlgorithm(),networkId,ipAddr.getAccountId(),ipAddr.getDomainId());
  newRule=_lbDao.persist(newRule);
  try {
    _rulesMgr.detectRulesConflict(newRule,ipAddr);
    if (!_rulesDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    s_logger.debug(""String_Node_Str"" + newRule.getId() + ""String_Node_Str""+ ipId+ ""String_Node_Str""+ srcPortStart+ ""String_Node_Str""+ defPortStart+ ""String_Node_Str"");
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_CREATE,ipAddr.getAllocatedToAccountId(),ipAddr.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    return newRule;
  }
 catch (  Exception e) {
    _lbDao.remove(newRule.getId());
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
}"
89602,"@Override public void execute() throws InsufficientCapacityException, ConcurrentOperationException {
  Network result=_networkService.updateNetwork(getId(),getNetworkName(),getDisplayText(),tags,UserContext.current().getCaller());
  if (result != null) {
    NetworkResponse response=_responseGenerator.createNetworkResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute() throws InsufficientCapacityException, ConcurrentOperationException {
  Network result=_networkService.updateNetwork(getId(),getNetworkName(),getDisplayText(),tags,UserContext.current().getCaller(),getNetworkDomain());
  if (result != null) {
    NetworkResponse response=_responseGenerator.createNetworkResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}"
89603,"Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkId);","Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkId,long zoneId);"
89604,"Network updateNetwork(long networkId,String name,String displayText,List<String> tags,Account caller);","Network updateNetwork(long networkId,String name,String displayText,List<String> tags,Account caller,String domainSuffix);"
89605,"public static Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkId){
  return _networkMgr.getNetworkCapabilities(networkId);
}","public static Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkOfferingId,long zoneId){
  return _networkMgr.getNetworkCapabilities(networkOfferingId,zoneId);
}"
89606,"@Override public NetworkResponse createNetworkResponse(Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getId());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getBroadcastUri() != null) {
    response.setBroadcastUri(network.getBroadcastUri().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().name());
  }
  List<? extends Vlan> vlan=ApiDBUtils.listVlanByNetworkId(network.getId());
  if (vlan != null && !vlan.isEmpty()) {
    Vlan singleVlan=vlan.get(0);
    String ipRange=singleVlan.getIpRange();
    String[] range=ipRange.split(""String_Node_Str"");
    response.setStartIp(range[0]);
    response.setEndIp(range[1]);
    response.setGateway(singleVlan.getVlanGateway());
    response.setNetmask(singleVlan.getVlanNetmask());
    response.setVlan(singleVlan.getVlanTag());
  }
  response.setZoneId(network.getDataCenterId());
  NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
  if (networkOffering != null) {
    response.setNetworkOfferingId(networkOffering.getId());
    response.setNetworkOfferingName(networkOffering.getName());
    response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
    response.setIsSystem(networkOffering.isSystemOnly());
    response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
  }
  response.setIsShared(network.getIsShared());
  response.setIsDefault(network.isDefault());
  response.setState(network.getState().toString());
  response.setRelated(network.getRelated());
  response.setNetworkDomain(network.getNetworkDomain());
  response.setDns1(profile.getDns1());
  response.setDns2(profile.getDns2());
  response.setIsSecurityGroupEnabled(network.isSecurityGroupEnabled());
  Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(network.getId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  if (serviceCapabilitiesMap != null) {
    for (    Service service : serviceCapabilitiesMap.keySet()) {
      ServiceResponse serviceResponse=new ServiceResponse();
      serviceResponse.setName(service.getName());
      List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
      Map<Capability,String> serviceCapabilities=serviceCapabilitiesMap.get(service);
      if (serviceCapabilities != null) {
        for (        Capability capability : serviceCapabilities.keySet()) {
          CapabilityResponse capabilityResponse=new CapabilityResponse();
          String capabilityValue=serviceCapabilities.get(capability);
          capabilityResponse.setName(capability.getName());
          capabilityResponse.setValue(capabilityValue);
          capabilityResponse.setObjectName(""String_Node_Str"");
          capabilityResponses.add(capabilityResponse);
        }
        serviceResponse.setCapabilities(capabilityResponses);
      }
      serviceResponse.setObjectName(""String_Node_Str"");
      serviceResponses.add(serviceResponse);
    }
  }
  response.setServices(serviceResponses);
  Account account=ApiDBUtils.findAccountById(network.getAccountId());
  if (account != null && !network.getIsShared()) {
    response.setAccountName(account.getAccountName());
    Domain domain=ApiDBUtils.findDomainById(account.getDomainId());
    response.setDomainId(domain.getId());
    response.setDomain(domain.getName());
  }
  Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
  if (dedicatedDomainId != null) {
    Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
    response.setDomainId(dedicatedDomainId);
    response.setDomain(domain.getName());
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public NetworkResponse createNetworkResponse(Network network){
  NetworkProfile profile=ApiDBUtils.getNetworkProfile(network.getId());
  NetworkResponse response=new NetworkResponse();
  response.setId(network.getId());
  response.setName(network.getName());
  response.setDisplaytext(network.getDisplayText());
  if (network.getBroadcastDomainType() != null) {
    response.setBroadcastDomainType(network.getBroadcastDomainType().toString());
  }
  if (network.getBroadcastUri() != null) {
    response.setBroadcastUri(network.getBroadcastUri().toString());
  }
  if (network.getTrafficType() != null) {
    response.setTrafficType(network.getTrafficType().name());
  }
  if (network.getGuestType() != null) {
    response.setType(network.getGuestType().name());
  }
  List<? extends Vlan> vlan=ApiDBUtils.listVlanByNetworkId(network.getId());
  if (vlan != null && !vlan.isEmpty()) {
    Vlan singleVlan=vlan.get(0);
    String ipRange=singleVlan.getIpRange();
    String[] range=ipRange.split(""String_Node_Str"");
    response.setStartIp(range[0]);
    response.setEndIp(range[1]);
    response.setGateway(singleVlan.getVlanGateway());
    response.setNetmask(singleVlan.getVlanNetmask());
    response.setVlan(singleVlan.getVlanTag());
  }
  response.setZoneId(network.getDataCenterId());
  NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
  if (networkOffering != null) {
    response.setNetworkOfferingId(networkOffering.getId());
    response.setNetworkOfferingName(networkOffering.getName());
    response.setNetworkOfferingDisplayText(networkOffering.getDisplayText());
    response.setIsSystem(networkOffering.isSystemOnly());
    response.setNetworkOfferingAvailability(networkOffering.getAvailability().toString());
  }
  response.setIsShared(network.getIsShared());
  response.setIsDefault(network.isDefault());
  response.setState(network.getState().toString());
  response.setRelated(network.getRelated());
  response.setNetworkDomain(network.getNetworkDomain());
  response.setDns1(profile.getDns1());
  response.setDns2(profile.getDns2());
  response.setIsSecurityGroupEnabled(network.isSecurityGroupEnabled());
  Map<Service,Map<Capability,String>> serviceCapabilitiesMap=ApiDBUtils.getNetworkCapabilities(networkOffering.getId(),network.getDataCenterId());
  List<ServiceResponse> serviceResponses=new ArrayList<ServiceResponse>();
  if (serviceCapabilitiesMap != null) {
    for (    Service service : serviceCapabilitiesMap.keySet()) {
      ServiceResponse serviceResponse=new ServiceResponse();
      serviceResponse.setName(service.getName());
      List<CapabilityResponse> capabilityResponses=new ArrayList<CapabilityResponse>();
      Map<Capability,String> serviceCapabilities=serviceCapabilitiesMap.get(service);
      if (serviceCapabilities != null) {
        for (        Capability capability : serviceCapabilities.keySet()) {
          CapabilityResponse capabilityResponse=new CapabilityResponse();
          String capabilityValue=serviceCapabilities.get(capability);
          capabilityResponse.setName(capability.getName());
          capabilityResponse.setValue(capabilityValue);
          capabilityResponse.setObjectName(""String_Node_Str"");
          capabilityResponses.add(capabilityResponse);
        }
        serviceResponse.setCapabilities(capabilityResponses);
      }
      serviceResponse.setObjectName(""String_Node_Str"");
      serviceResponses.add(serviceResponse);
    }
  }
  response.setServices(serviceResponses);
  Account account=ApiDBUtils.findAccountById(network.getAccountId());
  if (account != null && !network.getIsShared()) {
    response.setAccountName(account.getAccountName());
    Domain domain=ApiDBUtils.findDomainById(account.getDomainId());
    response.setDomainId(domain.getId());
    response.setDomain(domain.getName());
  }
  Long dedicatedDomainId=ApiDBUtils.getDedicatedNetworkDomain(network.getId());
  if (dedicatedDomainId != null) {
    Domain domain=ApiDBUtils.findDomainById(dedicatedDomainId);
    response.setDomainId(dedicatedDomainId);
    response.setDomain(domain.getName());
  }
  response.setObjectName(""String_Node_Str"");
  return response;
}"
89607,"Map<Capability,String> getServiceCapabilities(long zoneId,Service service);","Map<Capability,String> getServiceCapabilities(long zoneId,Long networkOfferingId,Service service);"
89608,"@Override @ActionEvent(eventType=EventTypes.EVENT_NETWORK_UPDATE,eventDescription=""String_Node_Str"",async=false) public Network updateNetwork(long networkId,String name,String displayText,List<String> tags,Account caller){
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
  }
  if (tags != null && tags.size() > 1) {
    throw new InvalidParameterException(""String_Node_Str"");
  }
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (offering.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller,network);
  if (name != null) {
    network.setName(name);
  }
  if (displayText != null) {
    network.setDisplayText(displayText);
  }
  if (tags != null) {
    network.setTags(tags);
  }
  _networksDao.update(networkId,network);
  return network;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_NETWORK_UPDATE,eventDescription=""String_Node_Str"",async=false) public Network updateNetwork(long networkId,String name,String displayText,List<String> tags,Account caller,String domainSuffix){
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
  }
  if (tags != null && tags.size() > 1) {
    throw new InvalidParameterException(""String_Node_Str"");
  }
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (offering.isSystemOnly()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (domainSuffix != null) {
    Map<Network.Capability,String> dnsCapabilities=getServiceCapabilities(network.getDataCenterId(),network.getNetworkOfferingId(),Service.Dns);
    String isUpdateDnsSupported=dnsCapabilities.get(Capability.AllowDnsSuffixModification);
    if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + network.getNetworkOfferingId() + ""String_Node_Str""+ network.getDataCenterId());
    }
    List<DomainRouterVO> routers=_routerDao.listActive(networkId);
    if (!routers.isEmpty()) {
      throw new CloudRuntimeException(""String_Node_Str"" + networkId + ""String_Node_Str"");
    }
    network.setNetworkDomain(domainSuffix);
  }
  _accountMgr.checkAccess(caller,network);
  if (name != null) {
    network.setName(name);
  }
  if (displayText != null) {
    network.setDisplayText(displayText);
  }
  if (tags != null) {
    network.setTags(tags);
  }
  _networksDao.update(networkId,network);
  return network;
}"
89609,"@Override @DB public List<NetworkVO> setupNetwork(Account owner,NetworkOfferingVO offering,Network predefined,DeploymentPlan plan,String name,String displayText,boolean isShared,boolean isDefault,boolean errorIfAlreadySetup,Long domainId,List<String> tags) throws ConcurrentOperationException {
  Account locked=_accountDao.acquireInLockTable(owner.getId());
  if (locked == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + owner);
  }
  try {
    if (predefined == null || (predefined.getCidr() == null && predefined.getBroadcastUri() == null && predefined.getBroadcastDomainType() != BroadcastDomainType.Vlan)) {
      List<NetworkVO> configs=_networksDao.listBy(owner.getId(),offering.getId(),plan.getDataCenterId());
      if (configs.size() > 0) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
        if (errorIfAlreadySetup) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
 else {
          return configs;
        }
      }
    }
 else     if (predefined != null && predefined.getCidr() != null && predefined.getBroadcastUri() == null && predefined.getBroadcastUri() == null) {
      List<NetworkVO> configs=_networksDao.listBy(owner.getId(),offering.getId(),plan.getDataCenterId(),predefined.getCidr());
      if (configs.size() > 0) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
        if (errorIfAlreadySetup) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
 else {
          return configs;
        }
      }
    }
    List<NetworkVO> networks=new ArrayList<NetworkVO>();
    long related=-1;
    for (    NetworkGuru guru : _networkGurus) {
      Network network=guru.design(offering,plan,predefined,owner);
      if (network == null) {
        continue;
      }
      if (network.getId() != -1) {
        if (network instanceof NetworkVO) {
          networks.add((NetworkVO)network);
        }
 else {
          networks.add(_networksDao.findById(network.getId()));
        }
        continue;
      }
      long id=_networksDao.getNextInSequence(Long.class,""String_Node_Str"");
      if (related == -1) {
        related=id;
      }
      NetworkVO vo=new NetworkVO(id,network,offering.getId(),plan.getDataCenterId(),guru.getName(),owner.getDomainId(),owner.getId(),related,name,displayText,isShared,isDefault,predefined.isSecurityGroupEnabled(),(domainId != null));
      vo.setTags(tags);
      networks.add(_networksDao.persist(vo,vo.getGuestType() != null));
      if (domainId != null) {
        _networksDao.addDomainToNetwork(id,domainId);
      }
    }
    if (networks.size() < 1) {
      throw new CloudRuntimeException(""String_Node_Str"" + offering.getId());
    }
    return networks;
  }
  finally {
    s_logger.debug(""String_Node_Str"" + locked);
    _accountDao.releaseFromLockTable(locked.getId());
  }
}","@Override @DB public List<NetworkVO> setupNetwork(Account owner,NetworkOfferingVO offering,Network predefined,DeploymentPlan plan,String name,String displayText,boolean isShared,boolean isDefault,boolean errorIfAlreadySetup,Long domainId,List<String> tags) throws ConcurrentOperationException {
  Account locked=_accountDao.acquireInLockTable(owner.getId());
  if (locked == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + owner);
  }
  try {
    if (predefined == null || (predefined.getCidr() == null && predefined.getBroadcastUri() == null && predefined.getBroadcastDomainType() != BroadcastDomainType.Vlan)) {
      List<NetworkVO> configs=_networksDao.listBy(owner.getId(),offering.getId(),plan.getDataCenterId());
      if (configs.size() > 0) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
        if (errorIfAlreadySetup) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
 else {
          return configs;
        }
      }
    }
 else     if (predefined != null && predefined.getCidr() != null && predefined.getBroadcastUri() == null && predefined.getBroadcastUri() == null) {
      List<NetworkVO> configs=_networksDao.listBy(owner.getId(),offering.getId(),plan.getDataCenterId(),predefined.getCidr());
      if (configs.size() > 0) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
        if (errorIfAlreadySetup) {
          throw new InvalidParameterValueException(""String_Node_Str"" + offering + ""String_Node_Str""+ configs.get(0));
        }
 else {
          return configs;
        }
      }
    }
    List<NetworkVO> networks=new ArrayList<NetworkVO>();
    long related=-1;
    for (    NetworkGuru guru : _networkGurus) {
      Network network=guru.design(offering,plan,predefined,owner);
      if (network == null) {
        continue;
      }
      if (network.getId() != -1) {
        if (network instanceof NetworkVO) {
          networks.add((NetworkVO)network);
        }
 else {
          networks.add(_networksDao.findById(network.getId()));
        }
        continue;
      }
      long id=_networksDao.getNextInSequence(Long.class,""String_Node_Str"");
      if (related == -1) {
        related=id;
      }
      NetworkVO vo=new NetworkVO(id,network,offering.getId(),plan.getDataCenterId(),guru.getName(),owner.getDomainId(),owner.getId(),related,name,displayText,isShared,isDefault,predefined.isSecurityGroupEnabled(),(domainId != null),predefined.getNetworkDomain());
      vo.setTags(tags);
      networks.add(_networksDao.persist(vo,vo.getGuestType() != null));
      if (domainId != null) {
        _networksDao.addDomainToNetwork(id,domainId);
      }
    }
    if (networks.size() < 1) {
      throw new CloudRuntimeException(""String_Node_Str"" + offering.getId());
    }
    return networks;
  }
  finally {
    s_logger.debug(""String_Node_Str"" + locked);
    _accountDao.releaseFromLockTable(locked.getId());
  }
}"
89610,"@Override public Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkId){
  Network network=getNetwork(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Map<Service,Map<Capability,String>> zoneCapabilities=getZoneCapabilities(network.getDataCenterId());
  Map<Service,Map<Capability,String>> networkCapabilities=new HashMap<Service,Map<Capability,String>>();
  for (  Service service : zoneCapabilities.keySet()) {
    if (isServiceSupported(networkId,service)) {
      networkCapabilities.put(service,zoneCapabilities.get(service));
    }
  }
  return networkCapabilities;
}","@Override public Map<Service,Map<Capability,String>> getNetworkCapabilities(long networkOfferingId,long zoneId){
  Map<Service,Map<Capability,String>> zoneCapabilities=getZoneCapabilities(zoneId);
  Map<Service,Map<Capability,String>> networkCapabilities=new HashMap<Service,Map<Capability,String>>();
  for (  Service service : zoneCapabilities.keySet()) {
    if (isServiceSupported(networkOfferingId,service)) {
      networkCapabilities.put(service,zoneCapabilities.get(service));
    }
  }
  return networkCapabilities;
}"
89611,"@Override @DB public Network createNetwork(long networkOfferingId,String name,String displayText,Boolean isShared,Boolean isDefault,Long zoneId,String gateway,String cidr,String vlanId,String networkDomain,Account owner,boolean isSecurityGroupEnabled,Long domainId,List<String> tags) throws ConcurrentOperationException, InsufficientCapacityException {
  NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone.isSecurityGroupEnabled() && (networkOffering.getGuestType() == GuestIpType.Virtual || (isShared != null && isShared))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Basic);
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual) {
    if (isDefault != null && !isDefault) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      isDefault=true;
    }
    if (isShared != null && isShared) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (isDefault == null) {
      isDefault=false;
    }
  }
  if (isShared) {
    owner=_accountMgr.getSystemAccount();
  }
  if (vlanId != null) {
    String uri=""String_Node_Str"" + vlanId;
    List<NetworkVO> networks=_networksDao.listBy(zoneId,uri);
    if ((networks != null && !networks.isEmpty())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlanId + ""String_Node_Str""+ zoneId);
    }
  }
  if (vlanId != null && !networkOffering.getSpecifyVlan()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual && vlanId != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + GuestIpType.Virtual);
  }
  if (networkDomain == null) {
    networkDomain=""String_Node_Str"" + Long.toHexString(owner.getId()) + _networkDomain;
  }
 else {
    if (!NetUtils.verifyDomainName(networkDomain)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  if (cidr == null && networkOffering.getTrafficType() == TrafficType.Guest && networkOffering.getGuestType() == GuestIpType.Direct) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cidr != null && networkOffering.getGuestType() == GuestIpType.Virtual && networkOffering.getTrafficType() == TrafficType.Guest) {
    if (!NetUtils.validateGuestCidr(cidr)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cidr + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  DataCenterDeployment plan=new DataCenterDeployment(zoneId,null,null,null,null);
  NetworkVO userNetwork=new NetworkVO();
  userNetwork.setNetworkDomain(networkDomain);
  userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
  if (cidr != null && gateway != null) {
    userNetwork.setCidr(cidr);
    userNetwork.setGateway(gateway);
    if (vlanId != null) {
      userNetwork.setBroadcastUri(URI.create(""String_Node_Str"" + vlanId));
      userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      if (!vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      }
 else {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Native);
      }
    }
  }
  List<NetworkVO> networks=setupNetwork(owner,networkOffering,userNetwork,plan,name,displayText,isShared,isDefault,true,domainId,tags);
  Network network=null;
  if (networks == null || networks.isEmpty()) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
 else {
    if (networks.size() > 0 && networks.get(0).getGuestType() == GuestIpType.Virtual && networks.get(0).getTrafficType() == TrafficType.Guest) {
      Network defaultGuestNetwork=networks.get(0);
      for (      Network nw : networks) {
        if (nw.getCidr() != null && nw.getCidr().equals(zone.getGuestNetworkCidr())) {
          defaultGuestNetwork=nw;
        }
      }
      network=defaultGuestNetwork;
    }
 else {
      network=networks.get(0);
    }
  }
  txn.commit();
  UserContext.current().setEventDetails(""String_Node_Str"" + network.getId());
  return network;
}","@Override @DB public Network createNetwork(long networkOfferingId,String name,String displayText,Boolean isShared,Boolean isDefault,Long zoneId,String gateway,String cidr,String vlanId,String networkDomain,Account owner,boolean isSecurityGroupEnabled,Long domainId,List<String> tags) throws ConcurrentOperationException, InsufficientCapacityException {
  NetworkOfferingVO networkOffering=_networkOfferingDao.findById(networkOfferingId);
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone.isSecurityGroupEnabled() && (networkOffering.getGuestType() == GuestIpType.Virtual || (isShared != null && isShared))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (zone.getNetworkType() == NetworkType.Basic) {
    throw new InvalidParameterValueException(""String_Node_Str"" + NetworkType.Basic);
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual) {
    if (isDefault != null && !isDefault) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      isDefault=true;
    }
    if (isShared != null && isShared) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
 else {
    if (isDefault == null) {
      isDefault=false;
    }
  }
  if (isShared) {
    owner=_accountMgr.getSystemAccount();
  }
  if (vlanId != null) {
    String uri=""String_Node_Str"" + vlanId;
    List<NetworkVO> networks=_networksDao.listBy(zoneId,uri);
    if ((networks != null && !networks.isEmpty())) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlanId + ""String_Node_Str""+ zoneId);
    }
  }
  if (vlanId != null && !networkOffering.getSpecifyVlan()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (networkOffering.getGuestType() == GuestIpType.Virtual && vlanId != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + GuestIpType.Virtual);
  }
  Map<Network.Capability,String> dnsCapabilities=getServiceCapabilities(zoneId,networkOfferingId,Service.Dns);
  String isUpdateDnsSupported=dnsCapabilities.get(Capability.AllowDnsSuffixModification);
  if (isUpdateDnsSupported == null || !Boolean.valueOf(isUpdateDnsSupported)) {
    if (networkDomain != null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkOfferingId + ""String_Node_Str""+ zoneId);
    }
  }
 else {
    if (networkDomain == null) {
      networkDomain=""String_Node_Str"" + Long.toHexString(owner.getId()) + _networkDomain;
    }
 else {
      if (!NetUtils.verifyDomainName(networkDomain)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
      }
    }
  }
  if (cidr == null && networkOffering.getTrafficType() == TrafficType.Guest && networkOffering.getGuestType() == GuestIpType.Direct) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cidr != null && networkOffering.getGuestType() == GuestIpType.Virtual && networkOffering.getTrafficType() == TrafficType.Guest) {
    if (!NetUtils.validateGuestCidr(cidr)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cidr + ""String_Node_Str"");
    }
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  DataCenterDeployment plan=new DataCenterDeployment(zoneId,null,null,null,null);
  NetworkVO userNetwork=new NetworkVO();
  userNetwork.setNetworkDomain(networkDomain);
  userNetwork.setSecurityGroupEnabled(isSecurityGroupEnabled);
  if (cidr != null && gateway != null) {
    userNetwork.setCidr(cidr);
    userNetwork.setGateway(gateway);
    if (vlanId != null) {
      userNetwork.setBroadcastUri(URI.create(""String_Node_Str"" + vlanId));
      userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      if (!vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Vlan);
      }
 else {
        userNetwork.setBroadcastDomainType(BroadcastDomainType.Native);
      }
    }
  }
  List<NetworkVO> networks=setupNetwork(owner,networkOffering,userNetwork,plan,name,displayText,isShared,isDefault,true,domainId,tags);
  Network network=null;
  if (networks == null || networks.isEmpty()) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
 else {
    if (networks.size() > 0 && networks.get(0).getGuestType() == GuestIpType.Virtual && networks.get(0).getTrafficType() == TrafficType.Guest) {
      Network defaultGuestNetwork=networks.get(0);
      for (      Network nw : networks) {
        if (nw.getCidr() != null && nw.getCidr().equals(zone.getGuestNetworkCidr())) {
          defaultGuestNetwork=nw;
        }
      }
      network=defaultGuestNetwork;
    }
 else {
      network=networks.get(0);
    }
  }
  txn.commit();
  UserContext.current().setEventDetails(""String_Node_Str"" + network.getId());
  return network;
}"
89612,"@Override public Map<Capability,String> getServiceCapabilities(long zoneId,Service service){
  Map<Service,Map<Capability,String>> networkCapabilities=getZoneCapabilities(zoneId);
  if (networkCapabilities.get(service) == null) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ zoneId);
  }
  return networkCapabilities.get(service);
}","@Override public Map<Capability,String> getServiceCapabilities(long zoneId,Long networkOfferingId,Service service){
  if (!isServiceSupported(networkOfferingId,service)) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ networkOfferingId);
  }
  Map<Service,Map<Capability,String>> networkCapabilities=getZoneCapabilities(zoneId);
  if (networkCapabilities.get(service) == null) {
    throw new UnsupportedServiceException(""String_Node_Str"" + service.getName() + ""String_Node_Str""+ zoneId);
  }
  return networkCapabilities.get(service);
}"
89613,"@Override public boolean isServiceSupported(long networkId,Network.Service service){
  Network network=getNetwork(networkId);
  NetworkOffering offering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
  if (service == Service.Lb) {
    return offering.isLbService();
  }
 else   if (service == Service.Dhcp) {
    return offering.isDhcpService();
  }
 else   if (service == Service.Dns) {
    return offering.isDnsService();
  }
 else   if (service == Service.Firewall) {
    return offering.isFirewallService();
  }
 else   if (service == Service.UserData) {
    return offering.isUserdataService();
  }
 else   if (service == Service.Vpn) {
    return offering.isVpnService();
  }
 else   if (service == Service.Gateway) {
    return offering.isGatewayService();
  }
  return false;
}","@Override public boolean isServiceSupported(long networkOfferingId,Network.Service service){
  NetworkOffering offering=_configMgr.getNetworkOffering(networkOfferingId);
  if (service == Service.Lb) {
    return offering.isLbService();
  }
 else   if (service == Service.Dhcp) {
    return offering.isDhcpService();
  }
 else   if (service == Service.Dns) {
    return offering.isDnsService();
  }
 else   if (service == Service.Firewall) {
    return offering.isFirewallService();
  }
 else   if (service == Service.UserData) {
    return offering.isUserdataService();
  }
 else   if (service == Service.Vpn) {
    return offering.isVpnService();
  }
 else   if (service == Service.Gateway) {
    return offering.isGatewayService();
  }
  return false;
}"
89614,"@Override public List<NetworkVO> listNetworksForAccount(long accountId,long zoneId,GuestIpType guestType,Boolean isDefault){
  List<NetworkVO> accountNetworks=new ArrayList<NetworkVO>();
  List<NetworkVO> zoneNetworks=_networksDao.listByZone(zoneId);
  for (  NetworkVO network : zoneNetworks) {
    NetworkOfferingVO no=_networkOfferingDao.findById(network.getNetworkOfferingId());
    if (!no.isSystemOnly()) {
      if (network.getIsShared() || !_networksDao.listBy(accountId,network.getId()).isEmpty()) {
        if ((guestType == null || guestType == network.getGuestType()) && (isDefault == null || isDefault == network.isDefault)) {
          accountNetworks.add(network);
        }
      }
    }
  }
  return accountNetworks;
}","@Override public List<NetworkVO> listNetworksForAccount(long accountId,long zoneId,GuestIpType guestType,Boolean isDefault){
  List<NetworkVO> accountNetworks=new ArrayList<NetworkVO>();
  List<NetworkVO> zoneNetworks=_networksDao.listByZone(zoneId);
  for (  NetworkVO network : zoneNetworks) {
    NetworkOfferingVO no=_networkOfferingDao.findById(network.getNetworkOfferingId());
    if (!no.isSystemOnly()) {
      if (network.getIsShared() || !_networksDao.listBy(accountId,network.getId()).isEmpty()) {
        if ((guestType == null || guestType == network.getGuestType()) && (isDefault == null || isDefault.booleanValue() == network.isDefault)) {
          accountNetworks.add(network);
        }
      }
    }
  }
  return accountNetworks;
}"
89615,"/** 
 * Constructor for the actual DAO object.
 * @param trafficType
 * @param mode
 * @param broadcastDomainType
 * @param networkOfferingId
 * @param dataCenterId
 * @param domainId
 * @param accountId
 * @param name
 * @param displayText
 * @param isShared
 * @param isDefault
 * @param isDomainSpecific
 */
public NetworkVO(long id,TrafficType trafficType,GuestIpType guestType,Mode mode,BroadcastDomainType broadcastDomainType,long networkOfferingId,long dataCenterId,long domainId,long accountId,long related,String name,String displayText,Boolean isShared,boolean isDefault,boolean isDomainSpecific){
  this(trafficType,guestType,mode,broadcastDomainType,networkOfferingId,dataCenterId,State.Allocated);
  this.domainId=domainId;
  this.accountId=accountId;
  this.related=related;
  this.id=id;
  this.name=name;
  this.displayText=displayText;
  this.isShared=isShared;
  this.isDefault=isDefault;
  this.isDomainSpecific=isDomainSpecific;
}","/** 
 * Constructor for the actual DAO object.
 * @param trafficType
 * @param mode
 * @param broadcastDomainType
 * @param networkOfferingId
 * @param dataCenterId
 * @param domainId
 * @param accountId
 * @param name
 * @param displayText
 * @param isShared
 * @param isDefault
 * @param isDomainSpecific
 * @param networkDomain
 */
public NetworkVO(long id,TrafficType trafficType,GuestIpType guestType,Mode mode,BroadcastDomainType broadcastDomainType,long networkOfferingId,long dataCenterId,long domainId,long accountId,long related,String name,String displayText,Boolean isShared,boolean isDefault,boolean isDomainSpecific,String networkDomain){
  this(trafficType,guestType,mode,broadcastDomainType,networkOfferingId,dataCenterId,State.Allocated);
  this.domainId=domainId;
  this.accountId=accountId;
  this.related=related;
  this.id=id;
  this.name=name;
  this.displayText=displayText;
  this.isShared=isShared;
  this.isDefault=isDefault;
  this.isDomainSpecific=isDomainSpecific;
  this.networkDomain=networkDomain;
}"
89616,"private static Map<Service,Map<Capability,String>> setCapabilities(){
  Map<Service,Map<Capability,String>> capabilities=new HashMap<Service,Map<Capability,String>>();
  capabilities.put(Service.Dns,null);
  capabilities.put(Service.UserData,null);
  capabilities.put(Service.Dhcp,null);
  return capabilities;
}","private static Map<Service,Map<Capability,String>> setCapabilities(){
  Map<Service,Map<Capability,String>> capabilities=new HashMap<Service,Map<Capability,String>>();
  Map<Capability,String> dnsCapabilities=new HashMap<Capability,String>();
  dnsCapabilities.put(Capability.AllowDnsSuffixModification,""String_Node_Str"");
  capabilities.put(Service.Dns,dnsCapabilities);
  capabilities.put(Service.UserData,null);
  capabilities.put(Service.Dhcp,null);
  return capabilities;
}"
89617,"private static Map<Service,Map<Capability,String>> setCapabilities(){
  Map<Service,Map<Capability,String>> capabilities=new HashMap<Service,Map<Capability,String>>();
  Map<Capability,String> lbCapabilities=new HashMap<Capability,String>();
  lbCapabilities.put(Capability.SupportedLBAlgorithms,""String_Node_Str"");
  lbCapabilities.put(Capability.SupportedProtocols,""String_Node_Str"");
  capabilities.put(Service.Lb,lbCapabilities);
  Map<Capability,String> firewallCapabilities=new HashMap<Capability,String>();
  firewallCapabilities.put(Capability.PortForwarding,""String_Node_Str"");
  firewallCapabilities.put(Capability.TrafficStatistics,""String_Node_Str"");
  firewallCapabilities.put(Capability.StaticNat,""String_Node_Str"");
  firewallCapabilities.put(Capability.SupportedProtocols,""String_Node_Str"");
  firewallCapabilities.put(Capability.MultipleIps,""String_Node_Str"");
  firewallCapabilities.put(Capability.SupportedSourceNatTypes,""String_Node_Str"");
  capabilities.put(Service.Firewall,firewallCapabilities);
  Map<Capability,String> vpnCapabilities=new HashMap<Capability,String>();
  vpnCapabilities.put(Capability.SupportedVpnTypes,""String_Node_Str"");
  capabilities.put(Service.Vpn,vpnCapabilities);
  capabilities.put(Service.Dns,null);
  capabilities.put(Service.UserData,null);
  capabilities.put(Service.Dhcp,null);
  capabilities.put(Service.Gateway,null);
  return capabilities;
}","private static Map<Service,Map<Capability,String>> setCapabilities(){
  Map<Service,Map<Capability,String>> capabilities=new HashMap<Service,Map<Capability,String>>();
  Map<Capability,String> lbCapabilities=new HashMap<Capability,String>();
  lbCapabilities.put(Capability.SupportedLBAlgorithms,""String_Node_Str"");
  lbCapabilities.put(Capability.SupportedProtocols,""String_Node_Str"");
  capabilities.put(Service.Lb,lbCapabilities);
  Map<Capability,String> firewallCapabilities=new HashMap<Capability,String>();
  firewallCapabilities.put(Capability.PortForwarding,""String_Node_Str"");
  firewallCapabilities.put(Capability.TrafficStatistics,""String_Node_Str"");
  firewallCapabilities.put(Capability.StaticNat,""String_Node_Str"");
  firewallCapabilities.put(Capability.SupportedProtocols,""String_Node_Str"");
  firewallCapabilities.put(Capability.MultipleIps,""String_Node_Str"");
  firewallCapabilities.put(Capability.SupportedSourceNatTypes,""String_Node_Str"");
  capabilities.put(Service.Firewall,firewallCapabilities);
  Map<Capability,String> vpnCapabilities=new HashMap<Capability,String>();
  vpnCapabilities.put(Capability.SupportedVpnTypes,""String_Node_Str"");
  capabilities.put(Service.Vpn,vpnCapabilities);
  Map<Capability,String> dnsCapabilities=new HashMap<Capability,String>();
  dnsCapabilities.put(Capability.AllowDnsSuffixModification,""String_Node_Str"");
  capabilities.put(Service.Dns,dnsCapabilities);
  capabilities.put(Service.UserData,null);
  capabilities.put(Service.Dhcp,null);
  capabilities.put(Service.Gateway,null);
  return capabilities;
}"
89618,"@Override public Network design(NetworkOffering offering,DeploymentPlan plan,Network userSpecified,Account owner){
  DataCenter dc=_dcDao.findById(plan.getDataCenterId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  NetworkVO network=new NetworkVO(offering.getTrafficType(),offering.getGuestType(),Mode.Dhcp,BroadcastDomainType.Vlan,offering.getId(),plan.getDataCenterId(),State.Allocated);
  if (userSpecified != null) {
    if ((userSpecified.getCidr() == null && userSpecified.getGateway() != null) || (userSpecified.getCidr() != null && userSpecified.getGateway() == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (userSpecified.getCidr() != null) {
      network.setCidr(userSpecified.getCidr());
      network.setGateway(userSpecified.getGateway());
    }
 else {
      String guestNetworkCidr=dc.getGuestNetworkCidr();
      if (guestNetworkCidr != null) {
        String[] cidrTuple=guestNetworkCidr.split(""String_Node_Str"");
        network.setGateway(NetUtils.getIpRangeStartIpFromCidr(cidrTuple[0],Long.parseLong(cidrTuple[1])));
        network.setCidr(guestNetworkCidr);
      }
    }
    if (userSpecified.getBroadcastUri() != null) {
      network.setBroadcastUri(userSpecified.getBroadcastUri());
      network.setState(State.Setup);
    }
    if (userSpecified.getNetworkDomain() != null) {
      network.setNetworkDomain(userSpecified.getNetworkDomain());
    }
  }
 else {
    String guestNetworkCidr=dc.getGuestNetworkCidr();
    String[] cidrTuple=guestNetworkCidr.split(""String_Node_Str"");
    network.setGateway(NetUtils.getIpRangeStartIpFromCidr(cidrTuple[0],Long.parseLong(cidrTuple[1])));
    network.setCidr(guestNetworkCidr);
    ;
  }
  return network;
}","@Override public Network design(NetworkOffering offering,DeploymentPlan plan,Network userSpecified,Account owner){
  DataCenter dc=_dcDao.findById(plan.getDataCenterId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  NetworkVO network=new NetworkVO(offering.getTrafficType(),offering.getGuestType(),Mode.Dhcp,BroadcastDomainType.Vlan,offering.getId(),plan.getDataCenterId(),State.Allocated);
  if (userSpecified != null) {
    if ((userSpecified.getCidr() == null && userSpecified.getGateway() != null) || (userSpecified.getCidr() != null && userSpecified.getGateway() == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (userSpecified.getCidr() != null) {
      network.setCidr(userSpecified.getCidr());
      network.setGateway(userSpecified.getGateway());
    }
 else {
      String guestNetworkCidr=dc.getGuestNetworkCidr();
      if (guestNetworkCidr != null) {
        String[] cidrTuple=guestNetworkCidr.split(""String_Node_Str"");
        network.setGateway(NetUtils.getIpRangeStartIpFromCidr(cidrTuple[0],Long.parseLong(cidrTuple[1])));
        network.setCidr(guestNetworkCidr);
      }
    }
    if (userSpecified.getBroadcastUri() != null) {
      network.setBroadcastUri(userSpecified.getBroadcastUri());
      network.setState(State.Setup);
    }
  }
 else {
    String guestNetworkCidr=dc.getGuestNetworkCidr();
    String[] cidrTuple=guestNetworkCidr.split(""String_Node_Str"");
    network.setGateway(NetUtils.getIpRangeStartIpFromCidr(cidrTuple[0],Long.parseLong(cidrTuple[1])));
    network.setCidr(guestNetworkCidr);
    ;
  }
  return network;
}"
89619,"@Override @ActionEvent(eventType=EventTypes.EVENT_LOAD_BALANCER_CREATE,eventDescription=""String_Node_Str"") public LoadBalancer createLoadBalancerRule(LoadBalancer lb) throws NetworkRuleConflictException {
  UserContext caller=UserContext.current();
  long ipId=lb.getSourceIpAddressId();
  IPAddressVO ipAddr=_ipAddressDao.findById(ipId);
  if (ipAddr == null || !ipAddr.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  int srcPortStart=lb.getSourcePortStart();
  int srcPortEnd=lb.getSourcePortEnd();
  int defPortStart=lb.getDefaultPortStart();
  int defPortEnd=lb.getDefaultPortEnd();
  if (!NetUtils.isValidPort(srcPortStart)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortStart);
  }
  if (!NetUtils.isValidPort(srcPortEnd)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortEnd);
  }
  if (srcPortStart > srcPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortStart + ""String_Node_Str""+ srcPortEnd);
  }
  if (!NetUtils.isValidPort(defPortStart)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortStart);
  }
  if (!NetUtils.isValidPort(defPortEnd)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortEnd);
  }
  if (defPortStart > defPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortStart + ""String_Node_Str""+ defPortEnd);
  }
  if ((lb.getAlgorithm() == null) || !NetUtils.isValidAlgorithm(lb.getAlgorithm())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + lb.getAlgorithm());
  }
  Long networkId=ipAddr.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller.getCaller(),ipAddr);
  if (!_networkMgr.isServiceSupported(networkId,Service.Lb)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  LoadBalancerVO newRule=new LoadBalancerVO(lb.getXid(),lb.getName(),lb.getDescription(),lb.getSourceIpAddressId(),lb.getSourcePortEnd(),lb.getDefaultPortStart(),lb.getAlgorithm(),networkId,ipAddr.getAccountId(),ipAddr.getDomainId());
  newRule=_lbDao.persist(newRule);
  try {
    _rulesMgr.detectRulesConflict(newRule,ipAddr);
    if (!_rulesDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    s_logger.debug(""String_Node_Str"" + newRule.getId() + ""String_Node_Str""+ ipId+ ""String_Node_Str""+ srcPortStart+ ""String_Node_Str""+ defPortStart+ ""String_Node_Str"");
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_CREATE,ipAddr.getAllocatedToAccountId(),ipAddr.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    return newRule;
  }
 catch (  Exception e) {
    _lbDao.remove(newRule.getId());
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
}","@Override @ActionEvent(eventType=EventTypes.EVENT_LOAD_BALANCER_CREATE,eventDescription=""String_Node_Str"") public LoadBalancer createLoadBalancerRule(LoadBalancer lb) throws NetworkRuleConflictException {
  UserContext caller=UserContext.current();
  long ipId=lb.getSourceIpAddressId();
  IPAddressVO ipAddr=_ipAddressDao.findById(ipId);
  if (ipAddr == null || !ipAddr.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId);
  }
  int srcPortStart=lb.getSourcePortStart();
  int srcPortEnd=lb.getSourcePortEnd();
  int defPortStart=lb.getDefaultPortStart();
  int defPortEnd=lb.getDefaultPortEnd();
  if (!NetUtils.isValidPort(srcPortStart)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortStart);
  }
  if (!NetUtils.isValidPort(srcPortEnd)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortEnd);
  }
  if (srcPortStart > srcPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"" + srcPortStart + ""String_Node_Str""+ srcPortEnd);
  }
  if (!NetUtils.isValidPort(defPortStart)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortStart);
  }
  if (!NetUtils.isValidPort(defPortEnd)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortEnd);
  }
  if (defPortStart > defPortEnd) {
    throw new InvalidParameterValueException(""String_Node_Str"" + defPortStart + ""String_Node_Str""+ defPortEnd);
  }
  if ((lb.getAlgorithm() == null) || !NetUtils.isValidAlgorithm(lb.getAlgorithm())) {
    throw new InvalidParameterValueException(""String_Node_Str"" + lb.getAlgorithm());
  }
  Long networkId=ipAddr.getAssociatedWithNetworkId();
  if (networkId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipId + ""String_Node_Str"");
  }
  _accountMgr.checkAccess(caller.getCaller(),ipAddr);
  Network network=_networkMgr.getNetwork(networkId);
  if (!_networkMgr.isServiceSupported(network.getNetworkOfferingId(),Service.Lb)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  LoadBalancerVO newRule=new LoadBalancerVO(lb.getXid(),lb.getName(),lb.getDescription(),lb.getSourceIpAddressId(),lb.getSourcePortEnd(),lb.getDefaultPortStart(),lb.getAlgorithm(),networkId,ipAddr.getAccountId(),ipAddr.getDomainId());
  newRule=_lbDao.persist(newRule);
  try {
    _rulesMgr.detectRulesConflict(newRule,ipAddr);
    if (!_rulesDao.setStateToAdd(newRule)) {
      throw new CloudRuntimeException(""String_Node_Str"" + newRule);
    }
    s_logger.debug(""String_Node_Str"" + newRule.getId() + ""String_Node_Str""+ ipId+ ""String_Node_Str""+ srcPortStart+ ""String_Node_Str""+ defPortStart+ ""String_Node_Str"");
    UserContext.current().setEventDetails(""String_Node_Str"" + newRule.getId());
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_LOAD_BALANCER_CREATE,ipAddr.getAllocatedToAccountId(),ipAddr.getDataCenterId(),newRule.getId(),null);
    _usageEventDao.persist(usageEvent);
    return newRule;
  }
 catch (  Exception e) {
    _lbDao.remove(newRule.getId());
    if (e instanceof NetworkRuleConflictException) {
      throw (NetworkRuleConflictException)e;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + newRule.getSourceIpAddressId(),e);
  }
}"
89620,"/** 
 * Returns the secondary storage host
 * @param zoneId
 * @return secondary storage host
 */
public VMTemplateHostVO findVmTemplateHost(long templateId,long dcId,Long podId);","/** 
 * Returns the secondary storage host
 * @param zoneId
 * @return secondary storage host
 */
public VMTemplateHostVO findVmTemplateHost(long templateId,StoragePool pool);"
89621,"@Override public VMTemplateHostVO findVmTemplateHost(long templateId,long dcId,Long podId){
  List<HostVO> secHosts=_hostDao.listSecondaryStorageHosts(dcId);
  if (secHosts.size() == 1) {
    VMTemplateHostVO templateHostVO=_templateHostDao.findByHostTemplate(secHosts.get(0).getId(),templateId);
    return templateHostVO;
  }
  if (podId != null) {
    List<VMTemplateHostVO> templHosts=_templateHostDao.listByTemplateStatus(templateId,dcId,podId,VMTemplateStorageResourceAssoc.Status.DOWNLOADED);
    if (templHosts != null && !templHosts.isEmpty()) {
      Collections.shuffle(templHosts);
      return templHosts.get(0);
    }
  }
  List<VMTemplateHostVO> templHosts=_templateHostDao.listByTemplateStatus(templateId,dcId,VMTemplateStorageResourceAssoc.Status.DOWNLOADED);
  if (templHosts != null && !templHosts.isEmpty()) {
    Collections.shuffle(templHosts);
    return templHosts.get(0);
  }
  return null;
}","@Override public VMTemplateHostVO findVmTemplateHost(long templateId,StoragePool pool){
  long dcId=pool.getDataCenterId();
  Long podId=pool.getPodId();
  if (pool.isLocal() && pool.getPoolType() == StoragePoolType.Filesystem) {
    List<StoragePoolHostVO> sphs=_storagePoolHostDao.listByPoolId(pool.getId());
    if (!sphs.isEmpty()) {
      StoragePoolHostVO localStoragePoolHost=sphs.get(0);
      return _templateHostDao.findLocalSecondaryStorageByHostTemplate(localStoragePoolHost.getHostId(),templateId);
    }
 else {
      return null;
    }
  }
  List<HostVO> secHosts=_hostDao.listSecondaryStorageHosts(dcId);
  if (secHosts.size() == 1) {
    VMTemplateHostVO templateHostVO=_templateHostDao.findByHostTemplate(secHosts.get(0).getId(),templateId);
    return templateHostVO;
  }
  if (podId != null) {
    List<VMTemplateHostVO> templHosts=_templateHostDao.listByTemplateStatus(templateId,dcId,podId,VMTemplateStorageResourceAssoc.Status.DOWNLOADED);
    if (templHosts != null && !templHosts.isEmpty()) {
      Collections.shuffle(templHosts);
      return templHosts.get(0);
    }
  }
  List<VMTemplateHostVO> templHosts=_templateHostDao.listByTemplateStatus(templateId,dcId,VMTemplateStorageResourceAssoc.Status.DOWNLOADED);
  if (templHosts != null && !templHosts.isEmpty()) {
    Collections.shuffle(templHosts);
    return templHosts.get(0);
  }
  return null;
}"
89622,"protected boolean checkPool(ExcludeList avoid,StoragePoolVO pool,DiskProfile dskCh,VMTemplateVO template,List<VMTemplateStoragePoolVO> templatesInPool,StatsCollector sc,DeploymentPlan plan){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (dskCh.getType().equals(Type.ROOT) && pool.getPoolType().equals(StoragePoolType.Iscsi)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (!pool.getStatus().equals(StoragePoolStatus.Up)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getStatus().name() + ""String_Node_Str"");
    }
    return false;
  }
  if (!poolIsCorrectType(dskCh,pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (!(cluster.getHypervisorType() == dskCh.getHypersorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (sc != null) {
    long totalSize=pool.getCapacityBytes();
    StorageStats stats=sc.getStoragePoolStats(pool.getId());
    if (stats == null) {
      stats=sc.getStorageStats(pool.getId());
    }
    if (stats != null) {
      double usedPercentage=((double)stats.getByteUsed() / (double)totalSize);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ pool.getCapacityBytes()+ ""String_Node_Str""+ stats.getByteUsed()+ ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold);
      }
      if (usedPercentage >= _storageUsedThreshold) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold+ ""String_Node_Str"");
        }
        return false;
      }
    }
  }
  Pair<Long,Long> sizes=_volumeDao.getCountAndTotalByPool(pool.getId());
  long totalAllocatedSize=sizes.second() + sizes.first() * _extraBytesPerVolume;
  boolean tmpinstalled=false;
  List<VMTemplateStoragePoolVO> templatePoolVOs;
  if (templatesInPool != null) {
    templatePoolVOs=templatesInPool;
  }
 else {
    templatePoolVOs=_templatePoolDao.listByPoolId(pool.getId());
  }
  for (  VMTemplateStoragePoolVO templatePoolVO : templatePoolVOs) {
    if ((template != null) && !tmpinstalled && (templatePoolVO.getTemplateId() == template.getId())) {
      tmpinstalled=true;
    }
    long templateSize=templatePoolVO.getTemplateSize();
    totalAllocatedSize+=templateSize + _extraBytesPerVolume;
  }
  if ((template != null) && !tmpinstalled) {
    VMTemplateHostVO templateHostVO=_storageMgr.findVmTemplateHost(template.getId(),plan.getDataCenterId(),plan.getPodId());
    if (templateHostVO == null) {
      s_logger.info(""String_Node_Str"" + plan.getDataCenterId());
      return false;
    }
 else {
      s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ 2);
      long templateSize=templateHostVO.getSize();
      long templatePhysicalSize=templateHostVO.getPhysicalSize();
      totalAllocatedSize+=(templateSize + _extraBytesPerVolume) + (templatePhysicalSize + _extraBytesPerVolume);
    }
  }
  long askingSize=dskCh.getSize();
  float storageOverprovisioningFactor=1.0f;
  if (pool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    storageOverprovisioningFactor=_storageOverprovisioningFactor;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
  }
  if ((pool.getCapacityBytes() * storageOverprovisioningFactor) < (totalAllocatedSize + askingSize)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
    }
    return false;
  }
  return true;
}","protected boolean checkPool(ExcludeList avoid,StoragePoolVO pool,DiskProfile dskCh,VMTemplateVO template,List<VMTemplateStoragePoolVO> templatesInPool,StatsCollector sc,DeploymentPlan plan){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (dskCh.getType().equals(Type.ROOT) && pool.getPoolType().equals(StoragePoolType.Iscsi)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (!pool.getStatus().equals(StoragePoolStatus.Up)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getStatus().name() + ""String_Node_Str"");
    }
    return false;
  }
  if (!poolIsCorrectType(dskCh,pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (!(cluster.getHypervisorType() == dskCh.getHypersorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (sc != null) {
    long totalSize=pool.getCapacityBytes();
    StorageStats stats=sc.getStoragePoolStats(pool.getId());
    if (stats == null) {
      stats=sc.getStorageStats(pool.getId());
    }
    if (stats != null) {
      double usedPercentage=((double)stats.getByteUsed() / (double)totalSize);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ pool.getCapacityBytes()+ ""String_Node_Str""+ stats.getByteUsed()+ ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold);
      }
      if (usedPercentage >= _storageUsedThreshold) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold+ ""String_Node_Str"");
        }
        return false;
      }
    }
  }
  Pair<Long,Long> sizes=_volumeDao.getCountAndTotalByPool(pool.getId());
  long totalAllocatedSize=sizes.second() + sizes.first() * _extraBytesPerVolume;
  boolean tmpinstalled=false;
  List<VMTemplateStoragePoolVO> templatePoolVOs;
  if (templatesInPool != null) {
    templatePoolVOs=templatesInPool;
  }
 else {
    templatePoolVOs=_templatePoolDao.listByPoolId(pool.getId());
  }
  for (  VMTemplateStoragePoolVO templatePoolVO : templatePoolVOs) {
    if ((template != null) && !tmpinstalled && (templatePoolVO.getTemplateId() == template.getId())) {
      tmpinstalled=true;
    }
    long templateSize=templatePoolVO.getTemplateSize();
    totalAllocatedSize+=templateSize + _extraBytesPerVolume;
  }
  if ((template != null) && !tmpinstalled) {
    VMTemplateHostVO templateHostVO=_storageMgr.findVmTemplateHost(template.getId(),pool);
    if (templateHostVO == null) {
      s_logger.info(""String_Node_Str"" + plan.getDataCenterId());
      return false;
    }
 else {
      s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ 2);
      long templateSize=templateHostVO.getSize();
      long templatePhysicalSize=templateHostVO.getPhysicalSize();
      totalAllocatedSize+=(templateSize + _extraBytesPerVolume) + (templatePhysicalSize + _extraBytesPerVolume);
    }
  }
  long askingSize=dskCh.getSize();
  float storageOverprovisioningFactor=1.0f;
  if (pool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    storageOverprovisioningFactor=_storageOverprovisioningFactor;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
  }
  if ((pool.getCapacityBytes() * storageOverprovisioningFactor) < (totalAllocatedSize + askingSize)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
    }
    return false;
  }
  return true;
}"
89623,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean result=super.configure(name,params);
  ZONE_TEMPLATE_SEARCH=createSearchBuilder();
  ZONE_TEMPLATE_SEARCH.and(""String_Node_Str"",ZONE_TEMPLATE_SEARCH.entity().getTemplateId(),SearchCriteria.Op.EQ);
  ZONE_TEMPLATE_SEARCH.and(""String_Node_Str"",ZONE_TEMPLATE_SEARCH.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  ZONE_TEMPLATE_SEARCH.join(""String_Node_Str"",hostSearch,hostSearch.entity().getId(),ZONE_TEMPLATE_SEARCH.entity().getHostId(),JoinBuilder.JoinType.INNER);
  ZONE_TEMPLATE_SEARCH.done();
  return result;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean result=super.configure(name,params);
  ZONE_TEMPLATE_SEARCH=createSearchBuilder();
  ZONE_TEMPLATE_SEARCH.and(""String_Node_Str"",ZONE_TEMPLATE_SEARCH.entity().getTemplateId(),SearchCriteria.Op.EQ);
  ZONE_TEMPLATE_SEARCH.and(""String_Node_Str"",ZONE_TEMPLATE_SEARCH.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  ZONE_TEMPLATE_SEARCH.join(""String_Node_Str"",hostSearch,hostSearch.entity().getId(),ZONE_TEMPLATE_SEARCH.entity().getHostId(),JoinBuilder.JoinType.INNER);
  ZONE_TEMPLATE_SEARCH.done();
  LOCAL_SECONDARY_STORAGE_SEARCH=createSearchBuilder();
  LOCAL_SECONDARY_STORAGE_SEARCH.and(""String_Node_Str"",LOCAL_SECONDARY_STORAGE_SEARCH.entity().getTemplateId(),SearchCriteria.Op.EQ);
  LOCAL_SECONDARY_STORAGE_SEARCH.and(""String_Node_Str"",LOCAL_SECONDARY_STORAGE_SEARCH.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> localSecondaryHost=_hostDao.createSearchBuilder();
  localSecondaryHost.and(""String_Node_Str"",localSecondaryHost.entity().getPrivateIpAddress(),SearchCriteria.Op.EQ);
  localSecondaryHost.and(""String_Node_Str"",localSecondaryHost.entity().getStatus(),SearchCriteria.Op.EQ);
  localSecondaryHost.and(""String_Node_Str"",localSecondaryHost.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  localSecondaryHost.and(""String_Node_Str"",localSecondaryHost.entity().getType(),SearchCriteria.Op.EQ);
  LOCAL_SECONDARY_STORAGE_SEARCH.join(""String_Node_Str"",localSecondaryHost,localSecondaryHost.entity().getId(),LOCAL_SECONDARY_STORAGE_SEARCH.entity().getHostId(),JoinBuilder.JoinType.INNER);
  LOCAL_SECONDARY_STORAGE_SEARCH.done();
  return result;
}"
89624,"@Override public List<VMTemplateHostVO> listByZoneTemplate(long dcId,long templateId,boolean readyOnly){
  SearchCriteria<VMTemplateHostVO> sc=ZONE_TEMPLATE_SEARCH.create();
  sc.setParameters(""String_Node_Str"",templateId);
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",dcId);
  if (readyOnly) {
    sc.setParameters(""String_Node_Str"",VMTemplateHostVO.Status.DOWNLOADED);
    List<VMTemplateHostVO> tmplHost=new ArrayList<VMTemplateHostVO>();
    tmplHost.add(findOneBy(sc));
    return tmplHost;
  }
 else {
    return listBy(sc);
  }
}","@Override public List<VMTemplateHostVO> listByZoneTemplate(long dcId,long templateId,boolean readyOnly){
  SearchCriteria<VMTemplateHostVO> sc=ZONE_TEMPLATE_SEARCH.create();
  sc.setParameters(""String_Node_Str"",templateId);
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",dcId);
  if (readyOnly) {
    sc.setParameters(""String_Node_Str"",VMTemplateHostVO.Status.DOWNLOADED);
  }
  return listBy(sc);
}"
89625,"@Override @DB public VMTemplateStoragePoolVO prepareTemplateForCreate(VMTemplateVO template,StoragePool pool){
  template=_tmpltDao.findById(template.getId(),true);
  long poolId=pool.getId();
  long templateId=template.getId();
  VMTemplateStoragePoolVO templateStoragePoolRef=null;
  VMTemplateHostVO templateHostRef=null;
  long templateStoragePoolRefId;
  String origUrl=null;
  templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
  if (templateStoragePoolRef != null) {
    templateStoragePoolRef.setMarkedForGC(false);
    _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
      }
      return templateStoragePoolRef;
    }
  }
  templateHostRef=_storageMgr.findVmTemplateHost(templateId,pool.getDataCenterId(),pool.getPodId());
  if (templateHostRef == null) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  HostVO sh=_hostDao.findById(templateHostRef.getHostId());
  origUrl=sh.getStorageUrl();
  if (origUrl == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + sh.toString());
  }
  if (templateStoragePoolRef == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
    }
    templateStoragePoolRef=new VMTemplateStoragePoolVO(poolId,templateId);
    try {
      templateStoragePoolRef=_tmpltPoolDao.persist(templateStoragePoolRef);
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + e.getMessage());
      templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
      if (templateStoragePoolRef == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + poolId + ""String_Node_Str""+ templateId);
      }
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
  }
 else {
    templateStoragePoolRefId=templateStoragePoolRef.getId();
  }
  List<StoragePoolHostVO> vos=_poolHostDao.listByPoolId(poolId);
  templateStoragePoolRef=_tmpltPoolDao.acquireInLockTable(templateStoragePoolRefId,1200);
  if (templateStoragePoolRef == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + templateStoragePoolRefId);
  }
  try {
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      return templateStoragePoolRef;
    }
    String url=origUrl + ""String_Node_Str"" + templateHostRef.getInstallPath();
    PrimaryStorageDownloadCommand dcmd=new PrimaryStorageDownloadCommand(template.getUniqueName(),url,template.getFormat(),template.getAccountId(),pool.getId(),pool.getUuid());
    HostVO secondaryStorageHost=_hostDao.findById(templateHostRef.getHostId());
    assert(secondaryStorageHost != null);
    dcmd.setSecondaryStorageUrl(secondaryStorageHost.getStorageUrl());
    dcmd.setPrimaryStorageUrl(""String_Node_Str"" + pool.getHostAddress() + pool.getPath());
    for (    StoragePoolHostVO vo : vos) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
      }
      dcmd.setLocalPath(vo.getLocalPath());
      PrimaryStorageDownloadAnswer answer=(PrimaryStorageDownloadAnswer)_agentMgr.easySend(_hvGuruMgr.getGuruProcessedCommandTargetHost(vo.getHostId(),dcmd),dcmd,120 * 60 * 1000);
      if (answer != null && answer.getResult()) {
        templateStoragePoolRef.setDownloadPercent(100);
        templateStoragePoolRef.setDownloadState(Status.DOWNLOADED);
        templateStoragePoolRef.setLocalDownloadPath(answer.getInstallPath());
        templateStoragePoolRef.setInstallPath(answer.getInstallPath());
        templateStoragePoolRef.setTemplateSize(answer.getTemplateSize());
        _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
        }
        return templateStoragePoolRef;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getPoolId()+ ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
        }
      }
    }
  }
  finally {
    _tmpltPoolDao.releaseFromLockTable(templateStoragePoolRefId);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
  }
  return null;
}","@Override @DB public VMTemplateStoragePoolVO prepareTemplateForCreate(VMTemplateVO template,StoragePool pool){
  template=_tmpltDao.findById(template.getId(),true);
  long poolId=pool.getId();
  long templateId=template.getId();
  VMTemplateStoragePoolVO templateStoragePoolRef=null;
  VMTemplateHostVO templateHostRef=null;
  long templateStoragePoolRefId;
  String origUrl=null;
  templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
  if (templateStoragePoolRef != null) {
    templateStoragePoolRef.setMarkedForGC(false);
    _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
      }
      return templateStoragePoolRef;
    }
  }
  templateHostRef=_storageMgr.findVmTemplateHost(templateId,pool);
  if (templateHostRef == null) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  HostVO sh=_hostDao.findById(templateHostRef.getHostId());
  origUrl=sh.getStorageUrl();
  if (origUrl == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + sh.toString());
  }
  if (templateStoragePoolRef == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
    }
    templateStoragePoolRef=new VMTemplateStoragePoolVO(poolId,templateId);
    try {
      templateStoragePoolRef=_tmpltPoolDao.persist(templateStoragePoolRef);
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + e.getMessage());
      templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
      if (templateStoragePoolRef == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + poolId + ""String_Node_Str""+ templateId);
      }
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
  }
 else {
    templateStoragePoolRefId=templateStoragePoolRef.getId();
  }
  List<StoragePoolHostVO> vos=_poolHostDao.listByPoolId(poolId);
  templateStoragePoolRef=_tmpltPoolDao.acquireInLockTable(templateStoragePoolRefId,1200);
  if (templateStoragePoolRef == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + templateStoragePoolRefId);
  }
  try {
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      return templateStoragePoolRef;
    }
    String url=origUrl + ""String_Node_Str"" + templateHostRef.getInstallPath();
    PrimaryStorageDownloadCommand dcmd=new PrimaryStorageDownloadCommand(template.getUniqueName(),url,template.getFormat(),template.getAccountId(),pool.getId(),pool.getUuid());
    HostVO secondaryStorageHost=_hostDao.findById(templateHostRef.getHostId());
    assert(secondaryStorageHost != null);
    dcmd.setSecondaryStorageUrl(secondaryStorageHost.getStorageUrl());
    dcmd.setPrimaryStorageUrl(""String_Node_Str"" + pool.getHostAddress() + pool.getPath());
    for (    StoragePoolHostVO vo : vos) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
      }
      dcmd.setLocalPath(vo.getLocalPath());
      PrimaryStorageDownloadAnswer answer=(PrimaryStorageDownloadAnswer)_agentMgr.easySend(_hvGuruMgr.getGuruProcessedCommandTargetHost(vo.getHostId(),dcmd),dcmd,120 * 60 * 1000);
      if (answer != null && answer.getResult()) {
        templateStoragePoolRef.setDownloadPercent(100);
        templateStoragePoolRef.setDownloadState(Status.DOWNLOADED);
        templateStoragePoolRef.setLocalDownloadPath(answer.getInstallPath());
        templateStoragePoolRef.setInstallPath(answer.getInstallPath());
        templateStoragePoolRef.setTemplateSize(answer.getTemplateSize());
        _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
        }
        return templateStoragePoolRef;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getPoolId()+ ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
        }
      }
    }
  }
  finally {
    _tmpltPoolDao.releaseFromLockTable(templateStoragePoolRefId);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
  }
  return null;
}"
89626,"/** 
 * Returns the secondary storage host
 * @param zoneId
 * @return secondary storage host
 */
public VMTemplateHostVO findVmTemplateHost(long templateId,long dcId,Long podId);","/** 
 * Returns the secondary storage host
 * @param zoneId
 * @return secondary storage host
 */
public VMTemplateHostVO findVmTemplateHost(long templateId,StoragePool pool);"
89627,"@Override public VMTemplateHostVO findVmTemplateHost(long templateId,long dcId,Long podId){
  List<HostVO> secHosts=_hostDao.listSecondaryStorageHosts(dcId);
  if (secHosts.size() == 1) {
    VMTemplateHostVO templateHostVO=_templateHostDao.findByHostTemplate(secHosts.get(0).getId(),templateId);
    return templateHostVO;
  }
  if (podId != null) {
    List<VMTemplateHostVO> templHosts=_templateHostDao.listByTemplateStatus(templateId,dcId,podId,VMTemplateStorageResourceAssoc.Status.DOWNLOADED);
    if (templHosts != null && !templHosts.isEmpty()) {
      Collections.shuffle(templHosts);
      return templHosts.get(0);
    }
  }
  List<VMTemplateHostVO> templHosts=_templateHostDao.listByTemplateStatus(templateId,dcId,VMTemplateStorageResourceAssoc.Status.DOWNLOADED);
  if (templHosts != null && !templHosts.isEmpty()) {
    Collections.shuffle(templHosts);
    return templHosts.get(0);
  }
  return null;
}","@Override public VMTemplateHostVO findVmTemplateHost(long templateId,StoragePool pool){
  long dcId=pool.getDataCenterId();
  Long podId=pool.getPodId();
  if (pool.isLocal() && pool.getPoolType() == StoragePoolType.Filesystem) {
    List<StoragePoolHostVO> sphs=_storagePoolHostDao.listByPoolId(pool.getId());
    if (!sphs.isEmpty()) {
      StoragePoolHostVO localStoragePoolHost=sphs.get(0);
      return _templateHostDao.findLocalSecondaryStorageByHostTemplate(localStoragePoolHost.getHostId(),templateId);
    }
 else {
      return null;
    }
  }
  List<HostVO> secHosts=_hostDao.listSecondaryStorageHosts(dcId);
  if (secHosts.size() == 1) {
    VMTemplateHostVO templateHostVO=_templateHostDao.findByHostTemplate(secHosts.get(0).getId(),templateId);
    return templateHostVO;
  }
  if (podId != null) {
    List<VMTemplateHostVO> templHosts=_templateHostDao.listByTemplateStatus(templateId,dcId,podId,VMTemplateStorageResourceAssoc.Status.DOWNLOADED);
    if (templHosts != null && !templHosts.isEmpty()) {
      Collections.shuffle(templHosts);
      return templHosts.get(0);
    }
  }
  List<VMTemplateHostVO> templHosts=_templateHostDao.listByTemplateStatus(templateId,dcId,VMTemplateStorageResourceAssoc.Status.DOWNLOADED);
  if (templHosts != null && !templHosts.isEmpty()) {
    Collections.shuffle(templHosts);
    return templHosts.get(0);
  }
  return null;
}"
89628,"protected boolean checkPool(ExcludeList avoid,StoragePoolVO pool,DiskProfile dskCh,VMTemplateVO template,List<VMTemplateStoragePoolVO> templatesInPool,StatsCollector sc,DeploymentPlan plan){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (dskCh.getType().equals(Type.ROOT) && pool.getPoolType().equals(StoragePoolType.Iscsi)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (!pool.getStatus().equals(StoragePoolStatus.Up)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getStatus().name() + ""String_Node_Str"");
    }
    return false;
  }
  if (!poolIsCorrectType(dskCh,pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (!(cluster.getHypervisorType() == dskCh.getHypersorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (sc != null) {
    long totalSize=pool.getCapacityBytes();
    StorageStats stats=sc.getStoragePoolStats(pool.getId());
    if (stats == null) {
      stats=sc.getStorageStats(pool.getId());
    }
    if (stats != null) {
      double usedPercentage=((double)stats.getByteUsed() / (double)totalSize);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ pool.getCapacityBytes()+ ""String_Node_Str""+ stats.getByteUsed()+ ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold);
      }
      if (usedPercentage >= _storageUsedThreshold) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold+ ""String_Node_Str"");
        }
        return false;
      }
    }
  }
  Pair<Long,Long> sizes=_volumeDao.getCountAndTotalByPool(pool.getId());
  long totalAllocatedSize=sizes.second() + sizes.first() * _extraBytesPerVolume;
  boolean tmpinstalled=false;
  List<VMTemplateStoragePoolVO> templatePoolVOs;
  if (templatesInPool != null) {
    templatePoolVOs=templatesInPool;
  }
 else {
    templatePoolVOs=_templatePoolDao.listByPoolId(pool.getId());
  }
  for (  VMTemplateStoragePoolVO templatePoolVO : templatePoolVOs) {
    if ((template != null) && !tmpinstalled && (templatePoolVO.getTemplateId() == template.getId())) {
      tmpinstalled=true;
    }
    long templateSize=templatePoolVO.getTemplateSize();
    totalAllocatedSize+=templateSize + _extraBytesPerVolume;
  }
  if ((template != null) && !tmpinstalled) {
    VMTemplateHostVO templateHostVO=_storageMgr.findVmTemplateHost(template.getId(),plan.getDataCenterId(),plan.getPodId());
    if (templateHostVO == null) {
      s_logger.info(""String_Node_Str"" + plan.getDataCenterId());
      return false;
    }
 else {
      s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ 2);
      long templateSize=templateHostVO.getSize();
      long templatePhysicalSize=templateHostVO.getPhysicalSize();
      totalAllocatedSize+=(templateSize + _extraBytesPerVolume) + (templatePhysicalSize + _extraBytesPerVolume);
    }
  }
  long askingSize=dskCh.getSize();
  float storageOverprovisioningFactor=1.0f;
  if (pool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    storageOverprovisioningFactor=_storageOverprovisioningFactor;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
  }
  if ((pool.getCapacityBytes() * storageOverprovisioningFactor) < (totalAllocatedSize + askingSize)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
    }
    return false;
  }
  return true;
}","protected boolean checkPool(ExcludeList avoid,StoragePoolVO pool,DiskProfile dskCh,VMTemplateVO template,List<VMTemplateStoragePoolVO> templatesInPool,StatsCollector sc,DeploymentPlan plan){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (dskCh.getType().equals(Type.ROOT) && pool.getPoolType().equals(StoragePoolType.Iscsi)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (!pool.getStatus().equals(StoragePoolStatus.Up)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getStatus().name() + ""String_Node_Str"");
    }
    return false;
  }
  if (!poolIsCorrectType(dskCh,pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (!(cluster.getHypervisorType() == dskCh.getHypersorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (sc != null) {
    long totalSize=pool.getCapacityBytes();
    StorageStats stats=sc.getStoragePoolStats(pool.getId());
    if (stats == null) {
      stats=sc.getStorageStats(pool.getId());
    }
    if (stats != null) {
      double usedPercentage=((double)stats.getByteUsed() / (double)totalSize);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ pool.getCapacityBytes()+ ""String_Node_Str""+ stats.getByteUsed()+ ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold);
      }
      if (usedPercentage >= _storageUsedThreshold) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold+ ""String_Node_Str"");
        }
        return false;
      }
    }
  }
  Pair<Long,Long> sizes=_volumeDao.getCountAndTotalByPool(pool.getId());
  long totalAllocatedSize=sizes.second() + sizes.first() * _extraBytesPerVolume;
  boolean tmpinstalled=false;
  List<VMTemplateStoragePoolVO> templatePoolVOs;
  if (templatesInPool != null) {
    templatePoolVOs=templatesInPool;
  }
 else {
    templatePoolVOs=_templatePoolDao.listByPoolId(pool.getId());
  }
  for (  VMTemplateStoragePoolVO templatePoolVO : templatePoolVOs) {
    if ((template != null) && !tmpinstalled && (templatePoolVO.getTemplateId() == template.getId())) {
      tmpinstalled=true;
    }
    long templateSize=templatePoolVO.getTemplateSize();
    totalAllocatedSize+=templateSize + _extraBytesPerVolume;
  }
  if ((template != null) && !tmpinstalled) {
    VMTemplateHostVO templateHostVO=_storageMgr.findVmTemplateHost(template.getId(),pool);
    if (templateHostVO == null) {
      s_logger.info(""String_Node_Str"" + plan.getDataCenterId());
      return false;
    }
 else {
      s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ 2);
      long templateSize=templateHostVO.getSize();
      long templatePhysicalSize=templateHostVO.getPhysicalSize();
      totalAllocatedSize+=(templateSize + _extraBytesPerVolume) + (templatePhysicalSize + _extraBytesPerVolume);
    }
  }
  long askingSize=dskCh.getSize();
  float storageOverprovisioningFactor=1.0f;
  if (pool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    storageOverprovisioningFactor=_storageOverprovisioningFactor;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
  }
  if ((pool.getCapacityBytes() * storageOverprovisioningFactor) < (totalAllocatedSize + askingSize)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
    }
    return false;
  }
  return true;
}"
89629,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean result=super.configure(name,params);
  ZONE_TEMPLATE_SEARCH=createSearchBuilder();
  ZONE_TEMPLATE_SEARCH.and(""String_Node_Str"",ZONE_TEMPLATE_SEARCH.entity().getTemplateId(),SearchCriteria.Op.EQ);
  ZONE_TEMPLATE_SEARCH.and(""String_Node_Str"",ZONE_TEMPLATE_SEARCH.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  ZONE_TEMPLATE_SEARCH.join(""String_Node_Str"",hostSearch,hostSearch.entity().getId(),ZONE_TEMPLATE_SEARCH.entity().getHostId(),JoinBuilder.JoinType.INNER);
  ZONE_TEMPLATE_SEARCH.done();
  return result;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  boolean result=super.configure(name,params);
  ZONE_TEMPLATE_SEARCH=createSearchBuilder();
  ZONE_TEMPLATE_SEARCH.and(""String_Node_Str"",ZONE_TEMPLATE_SEARCH.entity().getTemplateId(),SearchCriteria.Op.EQ);
  ZONE_TEMPLATE_SEARCH.and(""String_Node_Str"",ZONE_TEMPLATE_SEARCH.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  ZONE_TEMPLATE_SEARCH.join(""String_Node_Str"",hostSearch,hostSearch.entity().getId(),ZONE_TEMPLATE_SEARCH.entity().getHostId(),JoinBuilder.JoinType.INNER);
  ZONE_TEMPLATE_SEARCH.done();
  LOCAL_SECONDARY_STORAGE_SEARCH=createSearchBuilder();
  LOCAL_SECONDARY_STORAGE_SEARCH.and(""String_Node_Str"",LOCAL_SECONDARY_STORAGE_SEARCH.entity().getTemplateId(),SearchCriteria.Op.EQ);
  LOCAL_SECONDARY_STORAGE_SEARCH.and(""String_Node_Str"",LOCAL_SECONDARY_STORAGE_SEARCH.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> localSecondaryHost=_hostDao.createSearchBuilder();
  localSecondaryHost.and(""String_Node_Str"",localSecondaryHost.entity().getPrivateIpAddress(),SearchCriteria.Op.EQ);
  localSecondaryHost.and(""String_Node_Str"",localSecondaryHost.entity().getStatus(),SearchCriteria.Op.EQ);
  localSecondaryHost.and(""String_Node_Str"",localSecondaryHost.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  localSecondaryHost.and(""String_Node_Str"",localSecondaryHost.entity().getType(),SearchCriteria.Op.EQ);
  LOCAL_SECONDARY_STORAGE_SEARCH.join(""String_Node_Str"",localSecondaryHost,localSecondaryHost.entity().getId(),LOCAL_SECONDARY_STORAGE_SEARCH.entity().getHostId(),JoinBuilder.JoinType.INNER);
  LOCAL_SECONDARY_STORAGE_SEARCH.done();
  return result;
}"
89630,"@Override public List<VMTemplateHostVO> listByZoneTemplate(long dcId,long templateId,boolean readyOnly){
  SearchCriteria<VMTemplateHostVO> sc=ZONE_TEMPLATE_SEARCH.create();
  sc.setParameters(""String_Node_Str"",templateId);
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",dcId);
  if (readyOnly) {
    sc.setParameters(""String_Node_Str"",VMTemplateHostVO.Status.DOWNLOADED);
    List<VMTemplateHostVO> tmplHost=new ArrayList<VMTemplateHostVO>();
    tmplHost.add(findOneBy(sc));
    return tmplHost;
  }
 else {
    return listBy(sc);
  }
}","@Override public List<VMTemplateHostVO> listByZoneTemplate(long dcId,long templateId,boolean readyOnly){
  SearchCriteria<VMTemplateHostVO> sc=ZONE_TEMPLATE_SEARCH.create();
  sc.setParameters(""String_Node_Str"",templateId);
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",dcId);
  if (readyOnly) {
    sc.setParameters(""String_Node_Str"",VMTemplateHostVO.Status.DOWNLOADED);
  }
  return listBy(sc);
}"
89631,"@Override @DB public VMTemplateStoragePoolVO prepareTemplateForCreate(VMTemplateVO template,StoragePool pool){
  template=_tmpltDao.findById(template.getId(),true);
  long poolId=pool.getId();
  long templateId=template.getId();
  VMTemplateStoragePoolVO templateStoragePoolRef=null;
  VMTemplateHostVO templateHostRef=null;
  long templateStoragePoolRefId;
  String origUrl=null;
  templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
  if (templateStoragePoolRef != null) {
    templateStoragePoolRef.setMarkedForGC(false);
    _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
      }
      return templateStoragePoolRef;
    }
  }
  templateHostRef=_storageMgr.findVmTemplateHost(templateId,pool.getDataCenterId(),pool.getPodId());
  if (templateHostRef == null) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  HostVO sh=_hostDao.findById(templateHostRef.getHostId());
  origUrl=sh.getStorageUrl();
  if (origUrl == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + sh.toString());
  }
  if (templateStoragePoolRef == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
    }
    templateStoragePoolRef=new VMTemplateStoragePoolVO(poolId,templateId);
    try {
      templateStoragePoolRef=_tmpltPoolDao.persist(templateStoragePoolRef);
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + e.getMessage());
      templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
      if (templateStoragePoolRef == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + poolId + ""String_Node_Str""+ templateId);
      }
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
  }
 else {
    templateStoragePoolRefId=templateStoragePoolRef.getId();
  }
  List<StoragePoolHostVO> vos=_poolHostDao.listByPoolId(poolId);
  templateStoragePoolRef=_tmpltPoolDao.acquireInLockTable(templateStoragePoolRefId,1200);
  if (templateStoragePoolRef == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + templateStoragePoolRefId);
  }
  try {
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      return templateStoragePoolRef;
    }
    String url=origUrl + ""String_Node_Str"" + templateHostRef.getInstallPath();
    PrimaryStorageDownloadCommand dcmd=new PrimaryStorageDownloadCommand(template.getUniqueName(),url,template.getFormat(),template.getAccountId(),pool.getId(),pool.getUuid());
    HostVO secondaryStorageHost=_hostDao.findById(templateHostRef.getHostId());
    assert(secondaryStorageHost != null);
    dcmd.setSecondaryStorageUrl(secondaryStorageHost.getStorageUrl());
    dcmd.setPrimaryStorageUrl(""String_Node_Str"" + pool.getHostAddress() + pool.getPath());
    for (    StoragePoolHostVO vo : vos) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
      }
      dcmd.setLocalPath(vo.getLocalPath());
      PrimaryStorageDownloadAnswer answer=(PrimaryStorageDownloadAnswer)_agentMgr.easySend(_hvGuruMgr.getGuruProcessedCommandTargetHost(vo.getHostId(),dcmd),dcmd,120 * 60 * 1000);
      if (answer != null && answer.getResult()) {
        templateStoragePoolRef.setDownloadPercent(100);
        templateStoragePoolRef.setDownloadState(Status.DOWNLOADED);
        templateStoragePoolRef.setLocalDownloadPath(answer.getInstallPath());
        templateStoragePoolRef.setInstallPath(answer.getInstallPath());
        templateStoragePoolRef.setTemplateSize(answer.getTemplateSize());
        _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
        }
        return templateStoragePoolRef;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getPoolId()+ ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
        }
      }
    }
  }
  finally {
    _tmpltPoolDao.releaseFromLockTable(templateStoragePoolRefId);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
  }
  return null;
}","@Override @DB public VMTemplateStoragePoolVO prepareTemplateForCreate(VMTemplateVO template,StoragePool pool){
  template=_tmpltDao.findById(template.getId(),true);
  long poolId=pool.getId();
  long templateId=template.getId();
  VMTemplateStoragePoolVO templateStoragePoolRef=null;
  VMTemplateHostVO templateHostRef=null;
  long templateStoragePoolRefId;
  String origUrl=null;
  templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
  if (templateStoragePoolRef != null) {
    templateStoragePoolRef.setMarkedForGC(false);
    _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
      }
      return templateStoragePoolRef;
    }
  }
  templateHostRef=_storageMgr.findVmTemplateHost(templateId,pool);
  if (templateHostRef == null) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  HostVO sh=_hostDao.findById(templateHostRef.getHostId());
  origUrl=sh.getStorageUrl();
  if (origUrl == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + sh.toString());
  }
  if (templateStoragePoolRef == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
    }
    templateStoragePoolRef=new VMTemplateStoragePoolVO(poolId,templateId);
    try {
      templateStoragePoolRef=_tmpltPoolDao.persist(templateStoragePoolRef);
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
 catch (    Exception e) {
      s_logger.debug(""String_Node_Str"" + e.getMessage());
      templateStoragePoolRef=_tmpltPoolDao.findByPoolTemplate(poolId,templateId);
      if (templateStoragePoolRef == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + poolId + ""String_Node_Str""+ templateId);
      }
      templateStoragePoolRefId=templateStoragePoolRef.getId();
    }
  }
 else {
    templateStoragePoolRefId=templateStoragePoolRef.getId();
  }
  List<StoragePoolHostVO> vos=_poolHostDao.listByPoolId(poolId);
  templateStoragePoolRef=_tmpltPoolDao.acquireInLockTable(templateStoragePoolRefId,1200);
  if (templateStoragePoolRef == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + templateStoragePoolRefId);
  }
  try {
    if (templateStoragePoolRef.getDownloadState() == Status.DOWNLOADED) {
      return templateStoragePoolRef;
    }
    String url=origUrl + ""String_Node_Str"" + templateHostRef.getInstallPath();
    PrimaryStorageDownloadCommand dcmd=new PrimaryStorageDownloadCommand(template.getUniqueName(),url,template.getFormat(),template.getAccountId(),pool.getId(),pool.getUuid());
    HostVO secondaryStorageHost=_hostDao.findById(templateHostRef.getHostId());
    assert(secondaryStorageHost != null);
    dcmd.setSecondaryStorageUrl(secondaryStorageHost.getStorageUrl());
    dcmd.setPrimaryStorageUrl(""String_Node_Str"" + pool.getHostAddress() + pool.getPath());
    for (    StoragePoolHostVO vo : vos) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
      }
      dcmd.setLocalPath(vo.getLocalPath());
      PrimaryStorageDownloadAnswer answer=(PrimaryStorageDownloadAnswer)_agentMgr.easySend(_hvGuruMgr.getGuruProcessedCommandTargetHost(vo.getHostId(),dcmd),dcmd,120 * 60 * 1000);
      if (answer != null && answer.getResult()) {
        templateStoragePoolRef.setDownloadPercent(100);
        templateStoragePoolRef.setDownloadState(Status.DOWNLOADED);
        templateStoragePoolRef.setLocalDownloadPath(answer.getInstallPath());
        templateStoragePoolRef.setInstallPath(answer.getInstallPath());
        templateStoragePoolRef.setTemplateSize(answer.getTemplateSize());
        _tmpltPoolDao.update(templateStoragePoolRef.getId(),templateStoragePoolRef);
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getHostId());
        }
        return templateStoragePoolRef;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ vo.getPoolId()+ ""String_Node_Str""+ (answer != null ? answer.getDetails() : ""String_Node_Str""));
        }
      }
    }
  }
  finally {
    _tmpltPoolDao.releaseFromLockTable(templateStoragePoolRefId);
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + templateId + ""String_Node_Str""+ poolId);
  }
  return null;
}"
89632,"public static long getAgentId(final byte[] bytes){
  return NumbersUtil.bytesToLong(bytes,28);
}","public static long getAgentId(final byte[] bytes){
  return NumbersUtil.bytesToLong(bytes,24);
}"
89633,"/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  final ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  final long via=buff.getLong();
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}","/** 
 */
public static Request parse(final byte[] bytes) throws ClassNotFoundException, UnsupportedVersionException {
  final ByteBuffer buff=ByteBuffer.wrap(bytes);
  final byte ver=buff.get();
  final Version version=Version.get(ver);
  if (version.ordinal() != Version.v1.ordinal() && version.ordinal() != Version.v3.ordinal()) {
    throw new UnsupportedVersionException(""String_Node_Str"" + version.toString(),UnsupportedVersionException.IncompatibleVersion);
  }
  final byte reserved=buff.get();
  final short flags=buff.getShort();
  final boolean isRequest=(flags & FLAG_REQUEST) > 0;
  final long seq=buff.getLong();
  final int size=buff.getInt();
  final long mgmtId=buff.getLong();
  final long agentId=buff.getLong();
  long via;
  if (version.ordinal() == Version.v1.ordinal()) {
    via=buff.getLong();
  }
 else {
    via=agentId;
  }
  byte[] command=null;
  int offset=0;
  if (buff.hasArray()) {
    command=buff.array();
    offset=buff.arrayOffset() + buff.position();
  }
 else {
    command=new byte[buff.remaining()];
    buff.get(command);
    offset=0;
  }
  final String content=new String(command,offset,command.length - offset);
  if (isRequest) {
    return new Request(version,seq,agentId,mgmtId,via,flags,content);
  }
 else {
    return new Response(Version.get(ver),seq,agentId,mgmtId,via,flags,content);
  }
}"
89634,"public static long getViaAgentId(final byte[] bytes){
  return NumbersUtil.bytesToLong(bytes,24);
}","public static long getViaAgentId(final byte[] bytes){
  return NumbersUtil.bytesToLong(bytes,32);
}"
89635,"private StatsCollector(Map<String,String> configs){
  ComponentLocator locator=ComponentLocator.getLocator(ManagementServer.Name);
  _agentMgr=locator.getManager(AgentManager.class);
  _userVmMgr=locator.getManager(UserVmManager.class);
  _hostDao=locator.getDao(HostDao.class);
  _userVmDao=locator.getDao(UserVmDao.class);
  _volsDao=locator.getDao(VolumeDao.class);
  _capacityDao=locator.getDao(CapacityDao.class);
  _storagePoolDao=locator.getDao(StoragePoolDao.class);
  _storageManager=locator.getManager(StorageManager.class);
  _storagePoolHostDao=locator.getDao(StoragePoolHostDao.class);
  _executor=Executors.newScheduledThreadPool(3,new NamedThreadFactory(""String_Node_Str""));
  hostStatsInterval=NumbersUtil.parseLong(configs.get(""String_Node_Str""),60000L);
  hostAndVmStatsInterval=NumbersUtil.parseLong(configs.get(""String_Node_Str""),60000L);
  storageStatsInterval=NumbersUtil.parseLong(configs.get(""String_Node_Str""),60000L);
  volumeStatsInterval=NumbersUtil.parseLong(configs.get(""String_Node_Str""),-1L);
  _executor.scheduleWithFixedDelay(new HostCollector(),15000L,hostStatsInterval,TimeUnit.MILLISECONDS);
  _executor.scheduleWithFixedDelay(new VmStatsCollector(),15000L,hostAndVmStatsInterval,TimeUnit.MILLISECONDS);
  _executor.scheduleWithFixedDelay(new StorageCollector(),15000L,storageStatsInterval,TimeUnit.MILLISECONDS);
  if (volumeStatsInterval > 0) {
    _executor.scheduleWithFixedDelay(new VolumeCollector(),15000L,volumeStatsInterval,TimeUnit.MILLISECONDS);
  }
 else {
    s_logger.info(""String_Node_Str"");
  }
}","private StatsCollector(Map<String,String> configs){
  ComponentLocator locator=ComponentLocator.getLocator(ManagementServer.Name);
  _agentMgr=locator.getManager(AgentManager.class);
  _userVmMgr=locator.getManager(UserVmManager.class);
  _hostDao=locator.getDao(HostDao.class);
  _userVmDao=locator.getDao(UserVmDao.class);
  _volsDao=locator.getDao(VolumeDao.class);
  _capacityDao=locator.getDao(CapacityDao.class);
  _storagePoolDao=locator.getDao(StoragePoolDao.class);
  _storageManager=locator.getManager(StorageManager.class);
  _storagePoolHostDao=locator.getDao(StoragePoolHostDao.class);
  _executor=Executors.newScheduledThreadPool(3,new NamedThreadFactory(""String_Node_Str""));
  hostStatsInterval=NumbersUtil.parseLong(configs.get(""String_Node_Str""),60000L);
  hostAndVmStatsInterval=NumbersUtil.parseLong(configs.get(""String_Node_Str""),60000L);
  storageStatsInterval=NumbersUtil.parseLong(configs.get(""String_Node_Str""),60000L);
  volumeStatsInterval=NumbersUtil.parseLong(configs.get(""String_Node_Str""),-1L);
  if (hostStatsInterval > 0) {
    _executor.scheduleWithFixedDelay(new HostCollector(),15000L,hostStatsInterval,TimeUnit.MILLISECONDS);
  }
  if (hostAndVmStatsInterval > 0) {
    _executor.scheduleWithFixedDelay(new VmStatsCollector(),15000L,hostAndVmStatsInterval,TimeUnit.MILLISECONDS);
  }
  if (storageStatsInterval > 0) {
    _executor.scheduleWithFixedDelay(new StorageCollector(),15000L,storageStatsInterval,TimeUnit.MILLISECONDS);
  }
  if (volumeStatsInterval > 0) {
    _executor.scheduleWithFixedDelay(new VolumeCollector(),15000L,volumeStatsInterval,TimeUnit.MILLISECONDS);
  }
 else {
    s_logger.info(""String_Node_Str"");
  }
}"
89636,"@Override protected void doTask(final Task task) throws Exception {
  Transaction txn=Transaction.open(Transaction.CLOUD_DB);
  try {
    if (task.getType() != Task.Type.DATA) {
      super.doTask(task);
      return;
    }
    final byte[] data=task.getData();
    Version ver=Request.getVersion(data);
    if (ver.ordinal() < Version.v3.ordinal()) {
      super.doTask(task);
      return;
    }
    long hostId=Request.getAgentId(data);
    Link link=task.getLink();
    if (Request.fromServer(data)) {
      AgentAttache agent=findAttache(hostId);
      if (Request.isControl(data)) {
        if (agent == null) {
          logD(data,""String_Node_Str"");
          return;
        }
        Request req=Request.parse(data);
        Command[] cmds=req.getCommands();
        CancelCommand cancel=(CancelCommand)cmds[0];
        if (s_logger.isDebugEnabled()) {
          logD(data,""String_Node_Str"");
        }
        agent.cancel(cancel.getSequence());
        return;
      }
      try {
        if (agent == null || agent.isClosed()) {
          throw new AgentUnavailableException(""String_Node_Str"",hostId);
        }
        if (Request.isRequest(data) && Request.requiresSequentialExecution(data)) {
          Request req=Request.parse(data);
          agent.send(req,null);
          return;
        }
 else {
          if (agent instanceof Routable) {
            Routable cluster=(Routable)agent;
            cluster.routeToAgent(data);
          }
 else {
            agent.send(Request.parse(data));
          }
          return;
        }
      }
 catch (      AgentUnavailableException e) {
        logD(data,e.getMessage());
        cancel(Long.toString(Request.getManagementServerId(data)),hostId,Request.getSequence(data),e.getMessage());
      }
    }
 else {
      long mgmtId=Request.getManagementServerId(data);
      if (mgmtId != -1 && mgmtId != _nodeId) {
        routeToPeer(Long.toString(mgmtId),data);
        if (Request.requiresSequentialExecution(data)) {
          AgentAttache attache=(AgentAttache)link.attachment();
          if (attache != null) {
            attache.sendNext(Request.getSequence(data));
          }
 else           if (s_logger.isDebugEnabled()) {
            logD(data,""String_Node_Str"" + Request.parse(data).toString());
          }
        }
        return;
      }
 else {
        if (Request.isRequest(data)) {
          super.doTask(task);
        }
 else {
          final Response response=Response.parse(data);
          AgentAttache attache=findAttache(response.getAgentId());
          if (attache == null) {
            s_logger.info(""String_Node_Str"" + response.getAgentId() + ""String_Node_Str""+ response.getSequence()+ ""String_Node_Str""+ response.toString());
            return;
          }
          if (!attache.processAnswers(response.getSequence(),response)) {
            s_logger.info(""String_Node_Str"" + attache.getId() + ""String_Node_Str""+ response.getSequence()+ ""String_Node_Str""+ response.toString());
          }
        }
        return;
      }
    }
  }
  finally {
    txn.close();
  }
}","@Override protected void doTask(final Task task) throws Exception {
  Transaction txn=Transaction.open(Transaction.CLOUD_DB);
  try {
    if (task.getType() != Task.Type.DATA) {
      super.doTask(task);
      return;
    }
    final byte[] data=task.getData();
    Version ver=Request.getVersion(data);
    if (ver.ordinal() != Version.v1.ordinal()) {
      s_logger.warn(""String_Node_Str"");
      super.doTask(task);
      return;
    }
    long hostId=Request.getAgentId(data);
    Link link=task.getLink();
    if (Request.fromServer(data)) {
      AgentAttache agent=findAttache(hostId);
      if (Request.isControl(data)) {
        if (agent == null) {
          logD(data,""String_Node_Str"");
          return;
        }
        Request req=Request.parse(data);
        Command[] cmds=req.getCommands();
        CancelCommand cancel=(CancelCommand)cmds[0];
        if (s_logger.isDebugEnabled()) {
          logD(data,""String_Node_Str"");
        }
        agent.cancel(cancel.getSequence());
        return;
      }
      try {
        if (agent == null || agent.isClosed()) {
          throw new AgentUnavailableException(""String_Node_Str"",hostId);
        }
        if (Request.isRequest(data) && Request.requiresSequentialExecution(data)) {
          Request req=Request.parse(data);
          agent.send(req,null);
          return;
        }
 else {
          if (agent instanceof Routable) {
            Routable cluster=(Routable)agent;
            cluster.routeToAgent(data);
          }
 else {
            agent.send(Request.parse(data));
          }
          return;
        }
      }
 catch (      AgentUnavailableException e) {
        logD(data,e.getMessage());
        cancel(Long.toString(Request.getManagementServerId(data)),hostId,Request.getSequence(data),e.getMessage());
      }
    }
 else {
      long mgmtId=Request.getManagementServerId(data);
      if (mgmtId != -1 && mgmtId != _nodeId) {
        routeToPeer(Long.toString(mgmtId),data);
        if (Request.requiresSequentialExecution(data)) {
          AgentAttache attache=(AgentAttache)link.attachment();
          if (attache != null) {
            attache.sendNext(Request.getSequence(data));
          }
 else           if (s_logger.isDebugEnabled()) {
            logD(data,""String_Node_Str"" + Request.parse(data).toString());
          }
        }
        return;
      }
 else {
        if (Request.isRequest(data)) {
          super.doTask(task);
        }
 else {
          final Response response=Response.parse(data);
          AgentAttache attache=findAttache(response.getAgentId());
          if (attache == null) {
            s_logger.info(""String_Node_Str"" + response.getAgentId() + ""String_Node_Str""+ response.getSequence()+ ""String_Node_Str""+ response.toString());
            return;
          }
          if (!attache.processAnswers(response.getSequence(),response)) {
            s_logger.info(""String_Node_Str"" + attache.getId() + ""String_Node_Str""+ response.getSequence()+ ""String_Node_Str""+ response.toString());
          }
        }
        return;
      }
    }
  }
  finally {
    txn.close();
  }
}"
89637,"protected Status investigate(AgentAttache agent){
  Long hostId=agent.getId();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
  }
  try {
    Request req=new Request(hostId,_nodeId,new CheckHealthCommand(),true);
    Answer[] answers=agent.send(req,50 * 1000);
    if (answers != null && answers[0] != null) {
      Status status=answers[0].getResult() ? Status.Up : Status.Down;
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ status);
      }
      return status;
    }
  }
 catch (  AgentUnavailableException e) {
    s_logger.debug(""String_Node_Str"");
  }
catch (  OperationTimedoutException e) {
    s_logger.debug(""String_Node_Str"" + e.getMessage());
  }
  return _haMgr.investigate(hostId);
}","protected Status investigate(AgentAttache agent){
  Long hostId=agent.getId();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
  }
  try {
    Request req=new Request(hostId,_nodeId,new CheckHealthCommand(),true);
    req.setSequence(agent.getNextSequence());
    Answer[] answers=agent.send(req,50 * 1000);
    if (answers != null && answers[0] != null) {
      Status status=answers[0].getResult() ? Status.Up : Status.Down;
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str""+ status);
      }
      return status;
    }
  }
 catch (  AgentUnavailableException e) {
    s_logger.debug(""String_Node_Str"");
  }
catch (  OperationTimedoutException e) {
    s_logger.debug(""String_Node_Str"" + e.getMessage());
  }
  return _haMgr.investigate(hostId);
}"
89638,"@Override protected void doTask(final Task task) throws Exception {
  Transaction txn=Transaction.open(Transaction.CLOUD_DB);
  try {
    if (task.getType() != Task.Type.DATA) {
      super.doTask(task);
      return;
    }
    final byte[] data=task.getData();
    Version ver=Request.getVersion(data);
    if (ver.ordinal() != Version.v1.ordinal()) {
      s_logger.warn(""String_Node_Str"");
      super.doTask(task);
      return;
    }
    long hostId=Request.getAgentId(data);
    Link link=task.getLink();
    if (Request.fromServer(data)) {
      AgentAttache agent=findAttache(hostId);
      if (Request.isControl(data)) {
        if (agent == null) {
          logD(data,""String_Node_Str"");
          return;
        }
        Request req=Request.parse(data);
        Command[] cmds=req.getCommands();
        CancelCommand cancel=(CancelCommand)cmds[0];
        if (s_logger.isDebugEnabled()) {
          logD(data,""String_Node_Str"");
        }
        agent.cancel(cancel.getSequence());
        return;
      }
      try {
        if (agent == null || agent.isClosed()) {
          throw new AgentUnavailableException(""String_Node_Str"",hostId);
        }
        if (Request.isRequest(data) && Request.requiresSequentialExecution(data)) {
          Request req=Request.parse(data);
          agent.send(req,null);
          return;
        }
 else {
          if (agent instanceof Routable) {
            Routable cluster=(Routable)agent;
            cluster.routeToAgent(data);
          }
 else {
            agent.send(Request.parse(data));
          }
          return;
        }
      }
 catch (      AgentUnavailableException e) {
        logD(data,e.getMessage());
        cancel(Long.toString(Request.getManagementServerId(data)),hostId,Request.getSequence(data),e.getMessage());
      }
    }
 else {
      long mgmtId=Request.getManagementServerId(data);
      if (mgmtId != -1 && mgmtId != _nodeId) {
        routeToPeer(Long.toString(mgmtId),data);
        if (Request.requiresSequentialExecution(data)) {
          AgentAttache attache=(AgentAttache)link.attachment();
          if (attache != null) {
            attache.sendNext(Request.getSequence(data));
          }
 else           if (s_logger.isDebugEnabled()) {
            logD(data,""String_Node_Str"" + Request.parse(data).toString());
          }
        }
        return;
      }
 else {
        if (Request.isRequest(data)) {
          super.doTask(task);
        }
 else {
          final Response response=Response.parse(data);
          AgentAttache attache=findAttache(response.getAgentId());
          if (attache == null) {
            s_logger.info(""String_Node_Str"" + response.getAgentId() + ""String_Node_Str""+ response.getSequence()+ ""String_Node_Str""+ response.toString());
            return;
          }
          if (!attache.processAnswers(response.getSequence(),response)) {
            s_logger.info(""String_Node_Str"" + attache.getId() + ""String_Node_Str""+ response.getSequence()+ ""String_Node_Str""+ response.toString());
          }
        }
        return;
      }
    }
  }
  finally {
    txn.close();
  }
}","@Override protected void doTask(final Task task) throws Exception {
  Transaction txn=Transaction.open(Transaction.CLOUD_DB);
  try {
    if (task.getType() != Task.Type.DATA) {
      super.doTask(task);
      return;
    }
    final byte[] data=task.getData();
    Version ver=Request.getVersion(data);
    if (ver.ordinal() != Version.v1.ordinal() && ver.ordinal() != Version.v3.ordinal()) {
      s_logger.warn(""String_Node_Str"");
      super.doTask(task);
      return;
    }
    long hostId=Request.getAgentId(data);
    Link link=task.getLink();
    if (Request.fromServer(data)) {
      AgentAttache agent=findAttache(hostId);
      if (Request.isControl(data)) {
        if (agent == null) {
          logD(data,""String_Node_Str"");
          return;
        }
        Request req=Request.parse(data);
        Command[] cmds=req.getCommands();
        CancelCommand cancel=(CancelCommand)cmds[0];
        if (s_logger.isDebugEnabled()) {
          logD(data,""String_Node_Str"");
        }
        agent.cancel(cancel.getSequence());
        return;
      }
      try {
        if (agent == null || agent.isClosed()) {
          throw new AgentUnavailableException(""String_Node_Str"",hostId);
        }
        if (Request.isRequest(data) && Request.requiresSequentialExecution(data)) {
          Request req=Request.parse(data);
          agent.send(req,null);
          return;
        }
 else {
          if (agent instanceof Routable) {
            Routable cluster=(Routable)agent;
            cluster.routeToAgent(data);
          }
 else {
            agent.send(Request.parse(data));
          }
          return;
        }
      }
 catch (      AgentUnavailableException e) {
        logD(data,e.getMessage());
        cancel(Long.toString(Request.getManagementServerId(data)),hostId,Request.getSequence(data),e.getMessage());
      }
    }
 else {
      long mgmtId=Request.getManagementServerId(data);
      if (mgmtId != -1 && mgmtId != _nodeId) {
        routeToPeer(Long.toString(mgmtId),data);
        if (Request.requiresSequentialExecution(data)) {
          AgentAttache attache=(AgentAttache)link.attachment();
          if (attache != null) {
            attache.sendNext(Request.getSequence(data));
          }
 else           if (s_logger.isDebugEnabled()) {
            logD(data,""String_Node_Str"" + Request.parse(data).toString());
          }
        }
        return;
      }
 else {
        if (Request.isRequest(data)) {
          super.doTask(task);
        }
 else {
          final Response response=Response.parse(data);
          AgentAttache attache=findAttache(response.getAgentId());
          if (attache == null) {
            s_logger.info(""String_Node_Str"" + response.getAgentId() + ""String_Node_Str""+ response.getSequence()+ ""String_Node_Str""+ response.toString());
            return;
          }
          if (!attache.processAnswers(response.getSequence(),response)) {
            s_logger.info(""String_Node_Str"" + attache.getId() + ""String_Node_Str""+ response.getSequence()+ ""String_Node_Str""+ response.toString());
          }
        }
        return;
      }
    }
  }
  finally {
    txn.close();
  }
}"
89639,"@Override public Map<String,TemplateInfo> gatherTemplateInfo(String rootDir){
  Map<String,TemplateInfo> result=new HashMap<String,TemplateInfo>();
  String templateDir=rootDir + File.separator + _templateDir;
  List<String> publicTmplts=listTemplates(templateDir);
  for (  String tmplt : publicTmplts) {
    String path=tmplt.substring(0,tmplt.lastIndexOf(File.separator));
    TemplateLocation loc=new TemplateLocation(_storage,path);
    try {
      if (!loc.load()) {
        s_logger.warn(""String_Node_Str"" + path);
        _storage.cleanup(path,templateDir);
        continue;
      }
    }
 catch (    IOException e) {
      s_logger.warn(""String_Node_Str"" + path,e);
      try {
        _storage.cleanup(path,templateDir);
      }
 catch (      IOException e1) {
        s_logger.warn(""String_Node_Str"" + path,e1);
      }
      continue;
    }
    TemplateInfo tInfo=loc.getTemplateInfo();
    result.put(tInfo.templateName,tInfo);
    s_logger.debug(""String_Node_Str"" + tInfo.templateName + ""String_Node_Str""+ tmplt);
  }
  return result;
}","@Override public Map<String,TemplateInfo> gatherTemplateInfo(String rootDir){
  Map<String,TemplateInfo> result=new HashMap<String,TemplateInfo>();
  String templateDir=rootDir + File.separator + _templateDir;
  if (!_storage.exists(templateDir)) {
    _storage.mkdirs(templateDir);
  }
  List<String> publicTmplts=listTemplates(templateDir);
  for (  String tmplt : publicTmplts) {
    String path=tmplt.substring(0,tmplt.lastIndexOf(File.separator));
    TemplateLocation loc=new TemplateLocation(_storage,path);
    try {
      if (!loc.load()) {
        s_logger.warn(""String_Node_Str"" + path);
        _storage.cleanup(path,templateDir);
        continue;
      }
    }
 catch (    IOException e) {
      s_logger.warn(""String_Node_Str"" + path,e);
      try {
        _storage.cleanup(path,templateDir);
      }
 catch (      IOException e1) {
        s_logger.warn(""String_Node_Str"" + path,e1);
      }
      continue;
    }
    TemplateInfo tInfo=loc.getTemplateInfo();
    result.put(tInfo.templateName,tInfo);
    s_logger.debug(""String_Node_Str"" + tInfo.templateName + ""String_Node_Str""+ tmplt);
  }
  return result;
}"
89640,"private boolean validateVolumeSizeRange(long size){
  if (size < 0 || (size > 0 && size < (1024 * 1024 * 1024))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (size > _maxVolumeSizeInGb) {
    throw new InvalidParameterValueException(""String_Node_Str"" + _maxVolumeSizeInGb + ""String_Node_Str"");
  }
  return true;
}","private boolean validateVolumeSizeRange(long size){
  if (size < 0 || (size > 0 && size < (1024 * 1024 * 1024))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (size > (_maxVolumeSizeInGb * 1024 * 1024* 1024)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + size + ""String_Node_Str""+ _maxVolumeSizeInGb+ ""String_Node_Str"");
  }
  return true;
}"
89641,"@Override @ActionEvent(eventType=EventTypes.EVENT_VOLUME_CREATE,eventDescription=""String_Node_Str"",create=true) public VolumeVO allocVolume(CreateVolumeCmd cmd) throws ResourceAllocationException {
  Account account=UserContext.current().getCaller();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account targetAccount=null;
  if ((account == null) || isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      targetAccount=_accountDao.findActiveAccount(accountName,domainId);
    }
 else {
      targetAccount=account;
    }
    if (targetAccount == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
  }
 else {
    targetAccount=account;
  }
  if (_accountMgr.resourceLimitExceeded(targetAccount,ResourceType.volume)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + targetAccount.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    throw rae;
  }
  Long zoneId=null;
  Long diskOfferingId=null;
  Long size=null;
  if ((cmd.getSnapshotId() == null && cmd.getDiskOfferingId() == null) || (cmd.getSnapshotId() != null && cmd.getDiskOfferingId() != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cmd.getSnapshotId() == null) {
    zoneId=cmd.getZoneId();
    if ((zoneId == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    diskOfferingId=cmd.getDiskOfferingId();
    size=cmd.getSize() * 1024 * 1024* 1024;
    if (diskOfferingId == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
    if ((diskOffering == null) || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if ((diskOffering.isCustomized() && size == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (!diskOffering.isCustomized() && size != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (diskOffering.getDomainId() == null) {
    }
 else {
      _configMgr.checkDiskOfferingAccess(account,diskOffering);
    }
    if (diskOffering.getDiskSize() > 0) {
      size=diskOffering.getDiskSize();
    }
    if (!validateVolumeSizeRange(size)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + size + ""String_Node_Str""+ _maxVolumeSizeInGb);
    }
  }
 else {
    Long snapshotId=cmd.getSnapshotId();
    SnapshotVO snapshotCheck=_snapshotDao.findById(snapshotId);
    if (snapshotCheck == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId);
    }
    if (snapshotCheck.getStatus() != Snapshot.Status.BackedUp) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ Snapshot.Status.BackedUp+ ""String_Node_Str"");
    }
    diskOfferingId=(cmd.getDiskOfferingId() != null) ? cmd.getDiskOfferingId() : snapshotCheck.getDiskOfferingId();
    zoneId=snapshotCheck.getDataCenterId();
    size=snapshotCheck.getSize();
    if (account != null) {
      if (isAdmin(account.getType())) {
        Account snapshotOwner=_accountDao.findById(snapshotCheck.getAccountId());
        if (!_domainDao.isChildDomain(account.getDomainId(),snapshotOwner.getDomainId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
        }
      }
 else       if (account.getId() != snapshotCheck.getAccountId()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zoneId);
  }
  List<StoragePoolVO> storagePools=_storagePoolDao.listByDataCenterId(zoneId);
  boolean sharedPoolExists=false;
  for (  StoragePoolVO storagePool : storagePools) {
    if (storagePool.isShared()) {
      sharedPoolExists=true;
    }
  }
  List<HostVO> hosts=_hostDao.listByDataCenter(zoneId);
  if (hosts.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!sharedPoolExists) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String userSpecifiedName=cmd.getVolumeName();
  if (userSpecifiedName == null) {
    userSpecifiedName=getRandomVolumeName();
  }
  VolumeVO volume=new VolumeVO(userSpecifiedName,-1,-1,-1,-1,new Long(-1),null,null,0,Volume.Type.DATADISK);
  volume.setPoolId(null);
  volume.setDataCenterId(zoneId);
  volume.setPodId(null);
  volume.setAccountId(targetAccount.getId());
  volume.setDomainId(((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId()));
  volume.setDiskOfferingId(diskOfferingId);
  volume.setSize(size);
  volume.setInstanceId(null);
  volume.setUpdated(new Date());
  volume.setDomainId((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId());
  volume.setState(Volume.State.Allocated);
  volume=_volsDao.persist(volume);
  UserContext.current().setEventDetails(""String_Node_Str"" + volume.getId());
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),diskOfferingId,null,size);
  _usageEventDao.persist(usageEvent);
  _accountMgr.incrementResourceCount(volume.getAccountId(),ResourceType.volume);
  return volume;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_VOLUME_CREATE,eventDescription=""String_Node_Str"",create=true) public VolumeVO allocVolume(CreateVolumeCmd cmd) throws ResourceAllocationException {
  Account account=UserContext.current().getCaller();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account targetAccount=null;
  if ((account == null) || isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      targetAccount=_accountDao.findActiveAccount(accountName,domainId);
    }
 else {
      targetAccount=account;
    }
    if (targetAccount == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
  }
 else {
    targetAccount=account;
  }
  if (_accountMgr.resourceLimitExceeded(targetAccount,ResourceType.volume)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + targetAccount.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    throw rae;
  }
  Long zoneId=null;
  Long diskOfferingId=null;
  Long size=null;
  if ((cmd.getSnapshotId() == null && cmd.getDiskOfferingId() == null) || (cmd.getSnapshotId() != null && cmd.getDiskOfferingId() != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cmd.getSnapshotId() == null) {
    zoneId=cmd.getZoneId();
    if ((zoneId == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    diskOfferingId=cmd.getDiskOfferingId();
    size=cmd.getSize();
    if (size != null) {
      if (size > 0) {
        size=size * 1024 * 1024* 1024;
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
    if (diskOfferingId == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
    if ((diskOffering == null) || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if ((diskOffering.isCustomized() && size == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (!diskOffering.isCustomized() && size != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (diskOffering.getDomainId() == null) {
    }
 else {
      _configMgr.checkDiskOfferingAccess(account,diskOffering);
    }
    if (diskOffering.getDiskSize() > 0) {
      size=diskOffering.getDiskSize();
    }
    if (!validateVolumeSizeRange(size)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + size + ""String_Node_Str""+ _maxVolumeSizeInGb);
    }
  }
 else {
    Long snapshotId=cmd.getSnapshotId();
    SnapshotVO snapshotCheck=_snapshotDao.findById(snapshotId);
    if (snapshotCheck == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId);
    }
    if (snapshotCheck.getStatus() != Snapshot.Status.BackedUp) {
      throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId + ""String_Node_Str""+ Snapshot.Status.BackedUp+ ""String_Node_Str"");
    }
    diskOfferingId=(cmd.getDiskOfferingId() != null) ? cmd.getDiskOfferingId() : snapshotCheck.getDiskOfferingId();
    zoneId=snapshotCheck.getDataCenterId();
    size=snapshotCheck.getSize();
    if (account != null) {
      if (isAdmin(account.getType())) {
        Account snapshotOwner=_accountDao.findById(snapshotCheck.getAccountId());
        if (!_domainDao.isChildDomain(account.getDomainId(),snapshotOwner.getDomainId())) {
          throw new PermissionDeniedException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
        }
      }
 else       if (account.getId() != snapshotCheck.getAccountId()) {
        throw new InvalidParameterValueException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
  DataCenterVO zone=_dcDao.findById(zoneId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zoneId);
  }
  List<StoragePoolVO> storagePools=_storagePoolDao.listByDataCenterId(zoneId);
  boolean sharedPoolExists=false;
  for (  StoragePoolVO storagePool : storagePools) {
    if (storagePool.isShared()) {
      sharedPoolExists=true;
    }
  }
  List<HostVO> hosts=_hostDao.listByDataCenter(zoneId);
  if (hosts.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!sharedPoolExists) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String userSpecifiedName=cmd.getVolumeName();
  if (userSpecifiedName == null) {
    userSpecifiedName=getRandomVolumeName();
  }
  VolumeVO volume=new VolumeVO(userSpecifiedName,-1,-1,-1,-1,new Long(-1),null,null,0,Volume.Type.DATADISK);
  volume.setPoolId(null);
  volume.setDataCenterId(zoneId);
  volume.setPodId(null);
  volume.setAccountId(targetAccount.getId());
  volume.setDomainId(((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId()));
  volume.setDiskOfferingId(diskOfferingId);
  volume.setSize(size);
  volume.setInstanceId(null);
  volume.setUpdated(new Date());
  volume.setDomainId((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId());
  volume.setState(Volume.State.Allocated);
  volume=_volsDao.persist(volume);
  UserContext.current().setEventDetails(""String_Node_Str"" + volume.getId());
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),diskOfferingId,null,size);
  _usageEventDao.persist(usageEvent);
  _accountMgr.incrementResourceCount(volume.getAccountId(),ResourceType.volume);
  return volume;
}"
89642,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String overProvisioningFactorStr=configs.get(""String_Node_Str"");
  if (overProvisioningFactorStr != null) {
    _overProvisioningFactor=Float.parseFloat(overProvisioningFactorStr);
  }
  _retry=NumbersUtil.parseInt(configs.get(Config.StartRetry.key()),10);
  _pingInterval=NumbersUtil.parseInt(configs.get(""String_Node_Str""),60);
  _hostRetry=NumbersUtil.parseInt(configs.get(""String_Node_Str""),2);
  _snapshotTimeout=NumbersUtil.parseInt(Config.CmdsWait.key(),2 * 60 * 60* 1000);
  _storagePoolAcquisitionWaitSeconds=NumbersUtil.parseInt(configs.get(""String_Node_Str""),1800);
  s_logger.info(""String_Node_Str"" + _storagePoolAcquisitionWaitSeconds + ""String_Node_Str"");
  _agentMgr.registerForHostEvents(new StoragePoolMonitor(this,_storagePoolDao),true,false,true);
  String storageCleanupEnabled=configs.get(""String_Node_Str"");
  _storageCleanupEnabled=(storageCleanupEnabled == null) ? true : Boolean.parseBoolean(storageCleanupEnabled);
  String time=configs.get(""String_Node_Str"");
  _storageCleanupInterval=NumbersUtil.parseInt(time,86400);
  String workers=configs.get(""String_Node_Str"");
  int wrks=NumbersUtil.parseInt(workers,10);
  _executor=Executors.newScheduledThreadPool(wrks,new NamedThreadFactory(""String_Node_Str""));
  boolean localStorage=Boolean.parseBoolean(configs.get(Config.UseLocalStorage.key()));
  if (localStorage) {
    _agentMgr.registerForHostEvents(ComponentLocator.inject(LocalStoragePoolListener.class),true,false,false);
  }
  String maxVolumeSizeInGbString=configDao.getValue(""String_Node_Str"");
  _maxVolumeSizeInGb=NumbersUtil.parseInt(maxVolumeSizeInGbString,2000);
  HostTemplateStatesSearch=_vmTemplateHostDao.createSearchBuilder();
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getTemplateId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> HostSearch=_hostDao.createSearchBuilder();
  HostSearch.and(""String_Node_Str"",HostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.join(""String_Node_Str"",HostSearch,HostSearch.entity().getId(),HostTemplateStatesSearch.entity().getHostId(),JoinBuilder.JoinType.INNER);
  HostSearch.done();
  HostTemplateStatesSearch.done();
  _serverId=((ManagementServer)ComponentLocator.getComponent(ManagementServer.Name)).getId();
  UpHostsInPoolSearch=_storagePoolHostDao.createSearchBuilder(Long.class);
  UpHostsInPoolSearch.selectField(UpHostsInPoolSearch.entity().getHostId());
  SearchBuilder<HostVO> hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getStatus(),Op.EQ);
  UpHostsInPoolSearch.join(""String_Node_Str"",hostSearch,hostSearch.entity().getId(),UpHostsInPoolSearch.entity().getHostId(),JoinType.INNER);
  UpHostsInPoolSearch.and(""String_Node_Str"",UpHostsInPoolSearch.entity().getPoolId(),Op.EQ);
  UpHostsInPoolSearch.done();
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String overProvisioningFactorStr=configs.get(""String_Node_Str"");
  if (overProvisioningFactorStr != null) {
    _overProvisioningFactor=Float.parseFloat(overProvisioningFactorStr);
  }
  _retry=NumbersUtil.parseInt(configs.get(Config.StartRetry.key()),10);
  _pingInterval=NumbersUtil.parseInt(configs.get(""String_Node_Str""),60);
  _hostRetry=NumbersUtil.parseInt(configs.get(""String_Node_Str""),2);
  _snapshotTimeout=NumbersUtil.parseInt(Config.CmdsWait.key(),2 * 60 * 60* 1000);
  _storagePoolAcquisitionWaitSeconds=NumbersUtil.parseInt(configs.get(""String_Node_Str""),1800);
  s_logger.info(""String_Node_Str"" + _storagePoolAcquisitionWaitSeconds + ""String_Node_Str"");
  _agentMgr.registerForHostEvents(new StoragePoolMonitor(this,_storagePoolDao),true,false,true);
  String storageCleanupEnabled=configs.get(""String_Node_Str"");
  _storageCleanupEnabled=(storageCleanupEnabled == null) ? true : Boolean.parseBoolean(storageCleanupEnabled);
  String time=configs.get(""String_Node_Str"");
  _storageCleanupInterval=NumbersUtil.parseInt(time,86400);
  String workers=configs.get(""String_Node_Str"");
  int wrks=NumbersUtil.parseInt(workers,10);
  _executor=Executors.newScheduledThreadPool(wrks,new NamedThreadFactory(""String_Node_Str""));
  boolean localStorage=Boolean.parseBoolean(configs.get(Config.UseLocalStorage.key()));
  if (localStorage) {
    _agentMgr.registerForHostEvents(ComponentLocator.inject(LocalStoragePoolListener.class),true,false,false);
  }
  String maxVolumeSizeInGbString=configDao.getValue(""String_Node_Str"");
  _maxVolumeSizeInGb=NumbersUtil.parseLong(maxVolumeSizeInGbString,2000);
  HostTemplateStatesSearch=_vmTemplateHostDao.createSearchBuilder();
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getTemplateId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> HostSearch=_hostDao.createSearchBuilder();
  HostSearch.and(""String_Node_Str"",HostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.join(""String_Node_Str"",HostSearch,HostSearch.entity().getId(),HostTemplateStatesSearch.entity().getHostId(),JoinBuilder.JoinType.INNER);
  HostSearch.done();
  HostTemplateStatesSearch.done();
  _serverId=((ManagementServer)ComponentLocator.getComponent(ManagementServer.Name)).getId();
  UpHostsInPoolSearch=_storagePoolHostDao.createSearchBuilder(Long.class);
  UpHostsInPoolSearch.selectField(UpHostsInPoolSearch.entity().getHostId());
  SearchBuilder<HostVO> hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getStatus(),Op.EQ);
  UpHostsInPoolSearch.join(""String_Node_Str"",hostSearch,hostSearch.entity().getId(),UpHostsInPoolSearch.entity().getHostId(),JoinType.INNER);
  UpHostsInPoolSearch.and(""String_Node_Str"",UpHostsInPoolSearch.entity().getPoolId(),Op.EQ);
  UpHostsInPoolSearch.done();
  return true;
}"
89643,"@Override public DeployDestination plan(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws InsufficientServerCapacityException {
  String _allocationAlgorithm=_configDao.getValue(Config.VmAllocationAlgorithm.key());
  VirtualMachine vm=vmProfile.getVirtualMachine();
  ServiceOffering offering=vmProfile.getServiceOffering();
  DataCenter dc=_dcDao.findById(vm.getDataCenterId());
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  s_logger.debug(""String_Node_Str"");
  s_logger.debug(""String_Node_Str"" + plan.getDataCenterId() + ""String_Node_Str""+ plan.getPodId()+ ""String_Node_Str""+ plan.getClusterId()+ ""String_Node_Str""+ cpu_requested+ ""String_Node_Str""+ ram_requested);
  s_logger.debug(""String_Node_Str"" + (plan.getPoolId() != null ? ""String_Node_Str"" : ""String_Node_Str""));
  if (plan.getHostId() != null) {
    Long hostIdSpecified=plan.getHostId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostIdSpecified);
    }
    HostVO host=_hostDao.findById(hostIdSpecified);
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
    }
    DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),hostIdSpecified,plan.getPoolId());
    Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
    Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
    List<Volume> readyAndReusedVolumes=result.second();
    if (!suitableVolumeStoragePools.isEmpty()) {
      List<Host> suitableHosts=new ArrayList<Host>();
      suitableHosts.add(host);
      Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
      if (potentialResources != null) {
        Pod pod=_podDao.findById(vm.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        Map<Volume,StoragePool> storageVolMap=potentialResources.second();
        for (        Volume vol : readyAndReusedVolumes) {
          storageVolMap.remove(vol);
        }
        DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
        s_logger.debug(""String_Node_Str"" + dest);
        return dest;
      }
    }
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  if (vm.getLastHostId() != null) {
    s_logger.debug(""String_Node_Str"" + vm.getLastHostId());
    HostVO host=_hostDao.findById(vm.getLastHostId());
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      if (host.getStatus() == Status.Up && host.getHostAllocationState() == Host.HostAllocationState.Enabled) {
        if (isEnabledForAllocation(host.getDataCenterId(),host.getPodId(),host.getClusterId())) {
          if (_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOverprovisioningFactor)) {
            s_logger.debug(""String_Node_Str"");
            s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
            DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId());
            Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
            Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
            List<Volume> readyAndReusedVolumes=result.second();
            if (!suitableVolumeStoragePools.isEmpty()) {
              List<Host> suitableHosts=new ArrayList<Host>();
              suitableHosts.add(host);
              Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
              if (potentialResources != null) {
                Pod pod=_podDao.findById(vm.getPodId());
                Cluster cluster=_clusterDao.findById(host.getClusterId());
                Map<Volume,StoragePool> storageVolMap=potentialResources.second();
                for (                Volume vol : readyAndReusedVolumes) {
                  storageVolMap.remove(vol);
                }
                DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
                s_logger.debug(""String_Node_Str"" + dest);
                return dest;
              }
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getStatus().name() + ""String_Node_Str""+ host.getHostAllocationState().name());
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
  if (!isEnabledForAllocation(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId())) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  List<Long> clusterList=new ArrayList<Long>();
  if (plan.getClusterId() != null) {
    Long clusterIdSpecified=plan.getClusterId();
    s_logger.debug(""String_Node_Str"" + clusterIdSpecified);
    ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
    if (cluster != null) {
      clusterList.add(clusterIdSpecified);
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getClusterId());
      return null;
    }
  }
 else   if (plan.getPodId() != null) {
    Long podIdSpecified=plan.getPodId();
    s_logger.debug(""String_Node_Str"" + podIdSpecified);
    HostPodVO pod=_podDao.findById(podIdSpecified);
    if (pod != null) {
      clusterList=listClustersByCapacity(podIdSpecified,cpu_requested,ram_requested,avoid,false,cpuOverprovisioningFactor);
      if (!clusterList.isEmpty()) {
        if (avoid.getClustersToAvoid() != null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
          }
          clusterList.removeAll(avoid.getClustersToAvoid());
        }
        List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),podIdSpecified);
        if (!disabledClusters.isEmpty()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + disabledClusters);
          }
          clusterList.removeAll(disabledClusters);
        }
        DeployDestination dest=checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
        if (dest == null) {
          avoid.addPod(plan.getPodId());
        }
        return dest;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        avoid.addPod(plan.getPodId());
        return null;
      }
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getPodId());
      return null;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId());
    List<Long> prioritizedClusterIds=listClustersByCapacity(plan.getDataCenterId(),cpu_requested,ram_requested,avoid,true,cpuOverprovisioningFactor);
    if (!prioritizedClusterIds.isEmpty()) {
      if (avoid.getClustersToAvoid() != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
        }
        prioritizedClusterIds.removeAll(avoid.getClustersToAvoid());
      }
      List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),null);
      if (!disabledClusters.isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + disabledClusters);
        }
        prioritizedClusterIds.removeAll(disabledClusters);
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
    if (!prioritizedClusterIds.isEmpty()) {
      boolean applyUserConcentrationPodHeuristic=Boolean.parseBoolean(_configDao.getValue(Config.UseUserConcentratedPodAllocation.key()));
      if (applyUserConcentrationPodHeuristic && vmProfile.getOwner() != null) {
        long accountId=vmProfile.getOwner().getAccountId();
        List<Long> podIds=listPodsByUserConcentration(plan.getDataCenterId(),accountId);
        if (!podIds.isEmpty()) {
          if (avoid.getPodsToAvoid() != null) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + avoid.getPodsToAvoid());
            }
            podIds.removeAll(avoid.getPodsToAvoid());
          }
          clusterList=reorderClustersByPods(prioritizedClusterIds,podIds);
        }
 else {
          clusterList=prioritizedClusterIds;
        }
      }
 else {
        clusterList=prioritizedClusterIds;
      }
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
  }
}","@Override public DeployDestination plan(VirtualMachineProfile<? extends VirtualMachine> vmProfile,DeploymentPlan plan,ExcludeList avoid) throws InsufficientServerCapacityException {
  String _allocationAlgorithm=_configDao.getValue(Config.VmAllocationAlgorithm.key());
  VirtualMachine vm=vmProfile.getVirtualMachine();
  ServiceOffering offering=vmProfile.getServiceOffering();
  DataCenter dc=_dcDao.findById(vm.getDataCenterId());
  int cpu_requested=offering.getCpu() * offering.getSpeed();
  long ram_requested=offering.getRamSize() * 1024L * 1024L;
  String opFactor=_configDao.getValue(Config.CPUOverprovisioningFactor.key());
  float cpuOverprovisioningFactor=NumbersUtil.parseFloat(opFactor,1);
  s_logger.debug(""String_Node_Str"");
  s_logger.debug(""String_Node_Str"" + plan.getDataCenterId() + ""String_Node_Str""+ plan.getPodId()+ ""String_Node_Str""+ plan.getClusterId()+ ""String_Node_Str""+ cpu_requested+ ""String_Node_Str""+ ram_requested);
  s_logger.debug(""String_Node_Str"" + (plan.getPoolId() != null ? ""String_Node_Str"" : ""String_Node_Str""));
  if (plan.getHostId() != null) {
    Long hostIdSpecified=plan.getHostId();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + hostIdSpecified);
    }
    HostVO host=_hostDao.findById(hostIdSpecified);
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
    }
    DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),hostIdSpecified,plan.getPoolId());
    Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
    Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
    List<Volume> readyAndReusedVolumes=result.second();
    if (!suitableVolumeStoragePools.isEmpty()) {
      List<Host> suitableHosts=new ArrayList<Host>();
      suitableHosts.add(host);
      Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
      if (potentialResources != null) {
        Pod pod=_podDao.findById(vm.getPodId());
        Cluster cluster=_clusterDao.findById(host.getClusterId());
        Map<Volume,StoragePool> storageVolMap=potentialResources.second();
        for (        Volume vol : readyAndReusedVolumes) {
          storageVolMap.remove(vol);
        }
        DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
        s_logger.debug(""String_Node_Str"" + dest);
        return dest;
      }
    }
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  if (vm.getLastHostId() != null) {
    s_logger.debug(""String_Node_Str"" + vm.getLastHostId());
    HostVO host=_hostDao.findById(vm.getLastHostId());
    if (host == null) {
      s_logger.debug(""String_Node_Str"");
    }
 else {
      if (host.getStatus() == Status.Up && host.getHostAllocationState() == Host.HostAllocationState.Enabled) {
        if (isEnabledForAllocation(host.getDataCenterId(),host.getPodId(),host.getClusterId())) {
          if (_capacityMgr.checkIfHostHasCapacity(host.getId(),cpu_requested,ram_requested,true,cpuOverprovisioningFactor)) {
            s_logger.debug(""String_Node_Str"");
            s_logger.debug(""String_Node_Str"" + host.getDataCenterId() + ""String_Node_Str""+ host.getPodId()+ ""String_Node_Str""+ host.getClusterId());
            DataCenterDeployment lastPlan=new DataCenterDeployment(host.getDataCenterId(),host.getPodId(),host.getClusterId(),host.getId(),plan.getPoolId());
            Pair<Map<Volume,List<StoragePool>>,List<Volume>> result=findSuitablePoolsForVolumes(vmProfile,lastPlan,avoid,RETURN_UPTO_ALL);
            Map<Volume,List<StoragePool>> suitableVolumeStoragePools=result.first();
            List<Volume> readyAndReusedVolumes=result.second();
            if (!suitableVolumeStoragePools.isEmpty()) {
              List<Host> suitableHosts=new ArrayList<Host>();
              suitableHosts.add(host);
              Pair<Host,Map<Volume,StoragePool>> potentialResources=findPotentialDeploymentResources(suitableHosts,suitableVolumeStoragePools);
              if (potentialResources != null) {
                Pod pod=_podDao.findById(host.getPodId());
                Cluster cluster=_clusterDao.findById(host.getClusterId());
                Map<Volume,StoragePool> storageVolMap=potentialResources.second();
                for (                Volume vol : readyAndReusedVolumes) {
                  storageVolMap.remove(vol);
                }
                DeployDestination dest=new DeployDestination(dc,pod,cluster,host,storageVolMap);
                s_logger.debug(""String_Node_Str"" + dest);
                return dest;
              }
            }
          }
 else {
            s_logger.debug(""String_Node_Str"");
          }
        }
      }
 else {
        s_logger.debug(""String_Node_Str"" + host.getStatus().name() + ""String_Node_Str""+ host.getHostAllocationState().name());
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
  if (!isEnabledForAllocation(plan.getDataCenterId(),plan.getPodId(),plan.getClusterId())) {
    s_logger.debug(""String_Node_Str"");
    return null;
  }
  List<Long> clusterList=new ArrayList<Long>();
  if (plan.getClusterId() != null) {
    Long clusterIdSpecified=plan.getClusterId();
    s_logger.debug(""String_Node_Str"" + clusterIdSpecified);
    ClusterVO cluster=_clusterDao.findById(plan.getClusterId());
    if (cluster != null) {
      clusterList.add(clusterIdSpecified);
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getClusterId());
      return null;
    }
  }
 else   if (plan.getPodId() != null) {
    Long podIdSpecified=plan.getPodId();
    s_logger.debug(""String_Node_Str"" + podIdSpecified);
    HostPodVO pod=_podDao.findById(podIdSpecified);
    if (pod != null) {
      clusterList=listClustersByCapacity(podIdSpecified,cpu_requested,ram_requested,avoid,false,cpuOverprovisioningFactor);
      if (!clusterList.isEmpty()) {
        if (avoid.getClustersToAvoid() != null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
          }
          clusterList.removeAll(avoid.getClustersToAvoid());
        }
        List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),podIdSpecified);
        if (!disabledClusters.isEmpty()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + disabledClusters);
          }
          clusterList.removeAll(disabledClusters);
        }
        DeployDestination dest=checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
        if (dest == null) {
          avoid.addPod(plan.getPodId());
        }
        return dest;
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"");
        }
        avoid.addPod(plan.getPodId());
        return null;
      }
    }
 else {
      s_logger.debug(""String_Node_Str"");
      avoid.addPod(plan.getPodId());
      return null;
    }
  }
 else {
    s_logger.debug(""String_Node_Str"" + plan.getDataCenterId());
    List<Long> prioritizedClusterIds=listClustersByCapacity(plan.getDataCenterId(),cpu_requested,ram_requested,avoid,true,cpuOverprovisioningFactor);
    if (!prioritizedClusterIds.isEmpty()) {
      if (avoid.getClustersToAvoid() != null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + avoid.getClustersToAvoid());
        }
        prioritizedClusterIds.removeAll(avoid.getClustersToAvoid());
      }
      List<Long> disabledClusters=listDisabledClusters(plan.getDataCenterId(),null);
      if (!disabledClusters.isEmpty()) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + disabledClusters);
        }
        prioritizedClusterIds.removeAll(disabledClusters);
      }
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
    if (!prioritizedClusterIds.isEmpty()) {
      boolean applyUserConcentrationPodHeuristic=Boolean.parseBoolean(_configDao.getValue(Config.UseUserConcentratedPodAllocation.key()));
      if (applyUserConcentrationPodHeuristic && vmProfile.getOwner() != null) {
        long accountId=vmProfile.getOwner().getAccountId();
        List<Long> podIds=listPodsByUserConcentration(plan.getDataCenterId(),accountId);
        if (!podIds.isEmpty()) {
          if (avoid.getPodsToAvoid() != null) {
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + avoid.getPodsToAvoid());
            }
            podIds.removeAll(avoid.getPodsToAvoid());
          }
          clusterList=reorderClustersByPods(prioritizedClusterIds,podIds);
        }
 else {
          clusterList=prioritizedClusterIds;
        }
      }
 else {
        clusterList=prioritizedClusterIds;
      }
      return checkClustersforDestination(clusterList,vmProfile,plan,avoid,dc,_allocationAlgorithm);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"");
      }
      return null;
    }
  }
}"
89644,"@Override public <T extends VMInstanceVO>T advanceReboot(T vm,Map<VirtualMachineProfile.Param,Object> params,User caller,Account account) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  T rebootedVm=null;
  DataCenter dc=_configMgr.getZone(vm.getDataCenterId());
  HostPodVO pod=_configMgr.getPod(vm.getPodId());
  Host host=_hostDao.findById(vm.getHostId());
  Cluster cluster=null;
  if (host != null) {
    cluster=_configMgr.getCluster(host.getClusterId());
  }
  DeployDestination dest=new DeployDestination(dc,pod,cluster,host);
  try {
    Commands cmds=new Commands(OnError.Revert);
    cmds.addCommand(new RebootCommand(vm.getInstanceName()));
    _agentMgr.send(host.getId(),cmds);
    Answer rebootAnswer=cmds.getAnswer(RebootAnswer.class);
    if (rebootAnswer != null && rebootAnswer.getResult()) {
      rebootedVm=vm;
      return rebootedVm;
    }
    s_logger.info(""String_Node_Str"" + vm + ""String_Node_Str""+ dest.getHost()+ ""String_Node_Str""+ (rebootAnswer == null ? ""String_Node_Str"" : rebootAnswer.getDetails()));
  }
 catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ vm+ ""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"" + dest.getHost());
  }
  return rebootedVm;
}","@Override public <T extends VMInstanceVO>T advanceReboot(T vm,Map<VirtualMachineProfile.Param,Object> params,User caller,Account account) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  T rebootedVm=null;
  DataCenter dc=_configMgr.getZone(vm.getDataCenterId());
  Host host=_hostDao.findById(vm.getHostId());
  Cluster cluster=null;
  if (host != null) {
    cluster=_configMgr.getCluster(host.getClusterId());
  }
  HostPodVO pod=_configMgr.getPod(host.getPodId());
  DeployDestination dest=new DeployDestination(dc,pod,cluster,host);
  try {
    Commands cmds=new Commands(OnError.Revert);
    cmds.addCommand(new RebootCommand(vm.getInstanceName()));
    _agentMgr.send(host.getId(),cmds);
    Answer rebootAnswer=cmds.getAnswer(RebootAnswer.class);
    if (rebootAnswer != null && rebootAnswer.getResult()) {
      rebootedVm=vm;
      return rebootedVm;
    }
    s_logger.info(""String_Node_Str"" + vm + ""String_Node_Str""+ dest.getHost()+ ""String_Node_Str""+ (rebootAnswer == null ? ""String_Node_Str"" : rebootAnswer.getDetails()));
  }
 catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ vm+ ""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"" + dest.getHost());
  }
  return rebootedVm;
}"
89645,"@Override @ActionEvent(eventType=EventTypes.EVENT_VOLUME_ATTACH,eventDescription=""String_Node_Str"",async=true) public Volume attachVolumeToVM(AttachVolumeCmd command){
  Long vmId=command.getVirtualMachineId();
  Long volumeId=command.getId();
  Long deviceId=command.getDeviceId();
  Account account=UserContext.current().getCaller();
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null || volume.getVolumeType() != Volume.Type.DATADISK) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!Volume.State.Allocated.equals(volume.getState()) && !_storageMgr.volumeOnSharedStoragePool(volume)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getInstanceId() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getState() == Volume.State.Destroy) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null || vm.getType() != VirtualMachine.Type.User) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vm.getState() != State.Running && vm.getState() != State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (deviceId != null) {
    if (deviceId.longValue() == 0) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  List<VolumeVO> existingDataVolumes=_volsDao.findByInstanceAndType(vmId,Volume.Type.DATADISK);
  if (existingDataVolumes.size() >= 6) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vm.getDataCenterId() != volume.getDataCenterId()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getAccountId() != vm.getAccountId()) {
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  _accountMgr.checkAccess(account,volume);
  VolumeVO rootVolumeOfVm=null;
  List<VolumeVO> rootVolumesOfVm=_volsDao.findByInstanceAndType(vmId,Volume.Type.ROOT);
  if (rootVolumesOfVm.size() != 1) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm.getHostName() + ""String_Node_Str"");
  }
 else {
    rootVolumeOfVm=rootVolumesOfVm.get(0);
  }
  HypervisorType rootDiskHyperType=_volsDao.getHypervisorType(rootVolumeOfVm.getId());
  if (volume.getState().equals(Volume.State.Allocated)) {
    VMTemplateVO rootDiskTmplt=_templateDao.findById(vm.getTemplateId());
    DataCenterVO dcVO=_dcDao.findById(vm.getDataCenterId());
    HostPodVO pod=_podDao.findById(vm.getPodId());
    StoragePoolVO rootDiskPool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
    ServiceOfferingVO svo=_serviceOfferingDao.findById(vm.getServiceOfferingId());
    DiskOfferingVO diskVO=_diskOfferingDao.findById(volume.getDiskOfferingId());
    volume=_storageMgr.createVolume(volume,vm,rootDiskTmplt,dcVO,pod,rootDiskPool.getClusterId(),svo,diskVO,new ArrayList<StoragePoolVO>(),volume.getSize(),rootDiskHyperType);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm.getHostName());
    }
  }
  HypervisorType dataDiskHyperType=_volsDao.getHypervisorType(volume.getId());
  if (rootDiskHyperType != dataDiskHyperType) {
    throw new InvalidParameterValueException(""String_Node_Str"" + dataDiskHyperType + ""String_Node_Str""+ rootDiskHyperType+ ""String_Node_Str"");
  }
  List<VolumeVO> vols=_volsDao.findByInstance(vmId);
  if (deviceId != null) {
    if (deviceId.longValue() > 15 || deviceId.longValue() == 0 || deviceId.longValue() == 3) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (    VolumeVO vol : vols) {
      if (vol.getDeviceId().equals(deviceId)) {
        throw new RuntimeException(""String_Node_Str"" + deviceId + ""String_Node_Str""+ vm.getHostName());
      }
    }
  }
 else {
    List<String> devIds=new ArrayList<String>();
    for (int i=1; i < 15; i++) {
      devIds.add(String.valueOf(i));
    }
    devIds.remove(""String_Node_Str"");
    for (    VolumeVO vol : vols) {
      devIds.remove(vol.getDeviceId().toString().trim());
    }
    deviceId=Long.parseLong(devIds.iterator().next());
  }
  StoragePoolVO vmRootVolumePool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
  DiskOfferingVO volumeDiskOffering=_diskOfferingDao.findById(volume.getDiskOfferingId());
  String[] volumeTags=volumeDiskOffering.getTagsArray();
  StoragePoolVO sourcePool=_storagePoolDao.findById(volume.getPoolId());
  List<StoragePoolVO> sharedVMPools=_storagePoolDao.findPoolsByTags(vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId(),volumeTags,true);
  boolean moveVolumeNeeded=true;
  if (sharedVMPools.size() == 0) {
    String poolType;
    if (vmRootVolumePool.getClusterId() != null) {
      poolType=""String_Node_Str"";
    }
 else     if (vmRootVolumePool.getPodId() != null) {
      poolType=""String_Node_Str"";
    }
 else {
      poolType=""String_Node_Str"";
    }
    throw new CloudRuntimeException(""String_Node_Str"" + poolType + ""String_Node_Str""+ volumeDiskOffering.getTags()+ ""String_Node_Str"");
  }
 else {
    Long sourcePoolDcId=sourcePool.getDataCenterId();
    Long sourcePoolPodId=sourcePool.getPodId();
    Long sourcePoolClusterId=sourcePool.getClusterId();
    for (    StoragePoolVO vmPool : sharedVMPools) {
      Long vmPoolDcId=vmPool.getDataCenterId();
      Long vmPoolPodId=vmPool.getPodId();
      Long vmPoolClusterId=vmPool.getClusterId();
      if (sourcePoolDcId == vmPoolDcId && sourcePoolPodId == vmPoolPodId && sourcePoolClusterId == vmPoolClusterId) {
        moveVolumeNeeded=false;
        break;
      }
    }
  }
  if (moveVolumeNeeded) {
    volume=_storageMgr.moveVolume(volume,vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId(),dataDiskHyperType);
  }
  AsyncJobExecutor asyncExecutor=BaseAsyncJobExecutor.getCurrentExecutor();
  if (asyncExecutor != null) {
    AsyncJobVO job=asyncExecutor.getJob();
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + volumeId + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ job.getId()+ ""String_Node_Str"");
    }
    _asyncMgr.updateAsyncJobAttachment(job.getId(),""String_Node_Str"",volumeId);
    _asyncMgr.updateAsyncJobStatus(job.getId(),BaseCmd.PROGRESS_INSTANCE_CREATED,volumeId);
  }
  String errorMsg=""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ vm.getHostName();
  boolean sendCommand=(vm.getState() == State.Running);
  AttachVolumeAnswer answer=null;
  Long hostId=vm.getHostId();
  if (hostId == null) {
    hostId=vm.getLastHostId();
    HostVO host=_hostDao.findById(hostId);
    if (host != null && host.getHypervisorType() == HypervisorType.VMware) {
      sendCommand=true;
    }
  }
  if (sendCommand) {
    StoragePoolVO volumePool=_storagePoolDao.findById(volume.getPoolId());
    AttachVolumeCommand cmd=new AttachVolumeCommand(true,vm.getInstanceName(),volume.getPoolType(),volume.getFolder(),volume.getPath(),volume.getName(),deviceId,volume.getChainInfo());
    cmd.setPoolUuid(volumePool.getUuid());
    try {
      answer=(AttachVolumeAnswer)_agentMgr.send(hostId,cmd);
    }
 catch (    Exception e) {
      throw new CloudRuntimeException(errorMsg + ""String_Node_Str"" + e.getMessage());
    }
  }
  if (!sendCommand || (answer != null && answer.getResult())) {
    if (sendCommand) {
      _volsDao.attachVolume(volume.getId(),vmId,answer.getDeviceId());
    }
 else {
      _volsDao.attachVolume(volume.getId(),vmId,deviceId);
    }
    return _volsDao.findById(volumeId);
  }
 else {
    if (answer != null) {
      String details=answer.getDetails();
      if (details != null && !details.isEmpty()) {
        errorMsg+=""String_Node_Str"" + details;
      }
    }
    throw new CloudRuntimeException(errorMsg);
  }
}","@Override @ActionEvent(eventType=EventTypes.EVENT_VOLUME_ATTACH,eventDescription=""String_Node_Str"",async=true) public Volume attachVolumeToVM(AttachVolumeCmd command){
  Long vmId=command.getVirtualMachineId();
  Long volumeId=command.getId();
  Long deviceId=command.getDeviceId();
  Account account=UserContext.current().getCaller();
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null || volume.getVolumeType() != Volume.Type.DATADISK) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!Volume.State.Allocated.equals(volume.getState()) && !_storageMgr.volumeOnSharedStoragePool(volume)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getInstanceId() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getState() == Volume.State.Destroy) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null || vm.getType() != VirtualMachine.Type.User) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vm.getState() != State.Running && vm.getState() != State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (deviceId != null) {
    if (deviceId.longValue() == 0) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  List<VolumeVO> existingDataVolumes=_volsDao.findByInstanceAndType(vmId,Volume.Type.DATADISK);
  if (existingDataVolumes.size() >= 6) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (vm.getDataCenterId() != volume.getDataCenterId()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getAccountId() != vm.getAccountId()) {
    throw new PermissionDeniedException(""String_Node_Str"");
  }
  _accountMgr.checkAccess(account,volume);
  VolumeVO rootVolumeOfVm=null;
  List<VolumeVO> rootVolumesOfVm=_volsDao.findByInstanceAndType(vmId,Volume.Type.ROOT);
  if (rootVolumesOfVm.size() != 1) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm.getHostName() + ""String_Node_Str"");
  }
 else {
    rootVolumeOfVm=rootVolumesOfVm.get(0);
  }
  HypervisorType rootDiskHyperType=_volsDao.getHypervisorType(rootVolumeOfVm.getId());
  if (volume.getState().equals(Volume.State.Allocated)) {
    VMTemplateVO rootDiskTmplt=_templateDao.findById(vm.getTemplateId());
    DataCenterVO dcVO=_dcDao.findById(vm.getDataCenterId());
    HostPodVO pod=_podDao.findById(rootVolumeOfVm.getPodId());
    StoragePoolVO rootDiskPool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
    ServiceOfferingVO svo=_serviceOfferingDao.findById(vm.getServiceOfferingId());
    DiskOfferingVO diskVO=_diskOfferingDao.findById(volume.getDiskOfferingId());
    volume=_storageMgr.createVolume(volume,vm,rootDiskTmplt,dcVO,pod,rootDiskPool.getClusterId(),svo,diskVO,new ArrayList<StoragePoolVO>(),volume.getSize(),rootDiskHyperType);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + vm.getHostName());
    }
  }
  HypervisorType dataDiskHyperType=_volsDao.getHypervisorType(volume.getId());
  if (rootDiskHyperType != dataDiskHyperType) {
    throw new InvalidParameterValueException(""String_Node_Str"" + dataDiskHyperType + ""String_Node_Str""+ rootDiskHyperType+ ""String_Node_Str"");
  }
  List<VolumeVO> vols=_volsDao.findByInstance(vmId);
  if (deviceId != null) {
    if (deviceId.longValue() > 15 || deviceId.longValue() == 0 || deviceId.longValue() == 3) {
      throw new RuntimeException(""String_Node_Str"");
    }
    for (    VolumeVO vol : vols) {
      if (vol.getDeviceId().equals(deviceId)) {
        throw new RuntimeException(""String_Node_Str"" + deviceId + ""String_Node_Str""+ vm.getHostName());
      }
    }
  }
 else {
    List<String> devIds=new ArrayList<String>();
    for (int i=1; i < 15; i++) {
      devIds.add(String.valueOf(i));
    }
    devIds.remove(""String_Node_Str"");
    for (    VolumeVO vol : vols) {
      devIds.remove(vol.getDeviceId().toString().trim());
    }
    deviceId=Long.parseLong(devIds.iterator().next());
  }
  StoragePoolVO vmRootVolumePool=_storagePoolDao.findById(rootVolumeOfVm.getPoolId());
  DiskOfferingVO volumeDiskOffering=_diskOfferingDao.findById(volume.getDiskOfferingId());
  String[] volumeTags=volumeDiskOffering.getTagsArray();
  StoragePoolVO sourcePool=_storagePoolDao.findById(volume.getPoolId());
  List<StoragePoolVO> sharedVMPools=_storagePoolDao.findPoolsByTags(vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId(),volumeTags,true);
  boolean moveVolumeNeeded=true;
  if (sharedVMPools.size() == 0) {
    String poolType;
    if (vmRootVolumePool.getClusterId() != null) {
      poolType=""String_Node_Str"";
    }
 else     if (vmRootVolumePool.getPodId() != null) {
      poolType=""String_Node_Str"";
    }
 else {
      poolType=""String_Node_Str"";
    }
    throw new CloudRuntimeException(""String_Node_Str"" + poolType + ""String_Node_Str""+ volumeDiskOffering.getTags()+ ""String_Node_Str"");
  }
 else {
    Long sourcePoolDcId=sourcePool.getDataCenterId();
    Long sourcePoolPodId=sourcePool.getPodId();
    Long sourcePoolClusterId=sourcePool.getClusterId();
    for (    StoragePoolVO vmPool : sharedVMPools) {
      Long vmPoolDcId=vmPool.getDataCenterId();
      Long vmPoolPodId=vmPool.getPodId();
      Long vmPoolClusterId=vmPool.getClusterId();
      if (sourcePoolDcId == vmPoolDcId && sourcePoolPodId == vmPoolPodId && sourcePoolClusterId == vmPoolClusterId) {
        moveVolumeNeeded=false;
        break;
      }
    }
  }
  if (moveVolumeNeeded) {
    volume=_storageMgr.moveVolume(volume,vmRootVolumePool.getDataCenterId(),vmRootVolumePool.getPodId(),vmRootVolumePool.getClusterId(),dataDiskHyperType);
  }
  AsyncJobExecutor asyncExecutor=BaseAsyncJobExecutor.getCurrentExecutor();
  if (asyncExecutor != null) {
    AsyncJobVO job=asyncExecutor.getJob();
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + volumeId + ""String_Node_Str""+ vm.getId()+ ""String_Node_Str""+ job.getId()+ ""String_Node_Str"");
    }
    _asyncMgr.updateAsyncJobAttachment(job.getId(),""String_Node_Str"",volumeId);
    _asyncMgr.updateAsyncJobStatus(job.getId(),BaseCmd.PROGRESS_INSTANCE_CREATED,volumeId);
  }
  String errorMsg=""String_Node_Str"" + volume.getName() + ""String_Node_Str""+ vm.getHostName();
  boolean sendCommand=(vm.getState() == State.Running);
  AttachVolumeAnswer answer=null;
  Long hostId=vm.getHostId();
  if (hostId == null) {
    hostId=vm.getLastHostId();
    HostVO host=_hostDao.findById(hostId);
    if (host != null && host.getHypervisorType() == HypervisorType.VMware) {
      sendCommand=true;
    }
  }
  if (sendCommand) {
    StoragePoolVO volumePool=_storagePoolDao.findById(volume.getPoolId());
    AttachVolumeCommand cmd=new AttachVolumeCommand(true,vm.getInstanceName(),volume.getPoolType(),volume.getFolder(),volume.getPath(),volume.getName(),deviceId,volume.getChainInfo());
    cmd.setPoolUuid(volumePool.getUuid());
    try {
      answer=(AttachVolumeAnswer)_agentMgr.send(hostId,cmd);
    }
 catch (    Exception e) {
      throw new CloudRuntimeException(errorMsg + ""String_Node_Str"" + e.getMessage());
    }
  }
  if (!sendCommand || (answer != null && answer.getResult())) {
    if (sendCommand) {
      _volsDao.attachVolume(volume.getId(),vmId,answer.getDeviceId());
    }
 else {
      _volsDao.attachVolume(volume.getId(),vmId,deviceId);
    }
    return _volsDao.findById(volumeId);
  }
 else {
    if (answer != null) {
      String details=answer.getDetails();
      if (details != null && !details.isEmpty()) {
        errorMsg+=""String_Node_Str"" + details;
      }
    }
    throw new CloudRuntimeException(errorMsg);
  }
}"
89646,"protected void upgrade(String dbVersion,String currentVersion){
  s_logger.info(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
  String trimmedDbVersion=Version.trimToPatch(dbVersion);
  String trimmedCurrentVersion=Version.trimToPatch(currentVersion);
  DbUpgrade[] upgrades=_upgradeMap.get(trimmedDbVersion);
  if (upgrades == null) {
    s_logger.error(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
    throw new CloudRuntimeException(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
  }
  if (Version.compare(trimmedCurrentVersion,upgrades[upgrades.length - 1].getUpgradedVersion()) != 0) {
    s_logger.error(""String_Node_Str"" + upgrades[upgrades.length - 1].getUpgradedVersion() + ""String_Node_Str""+ currentVersion);
    throw new CloudRuntimeException(""String_Node_Str"" + upgrades[upgrades.length - 1].getUpgradedVersion() + ""String_Node_Str""+ currentVersion);
  }
  boolean supportsRollingUpgrade=true;
  for (  DbUpgrade upgrade : upgrades) {
    if (!upgrade.supportsRollingUpgrade()) {
      supportsRollingUpgrade=false;
      break;
    }
  }
  if (!supportsRollingUpgrade && ClusterManagerImpl.arePeersRunning(null)) {
    s_logger.error(""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  for (  DbUpgrade upgrade : upgrades) {
    s_logger.debug(""String_Node_Str"" + upgrade.getClass().getSimpleName() + ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[0]+ ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[1]+ ""String_Node_Str""+ upgrade.getUpgradedVersion());
    Transaction txn=Transaction.open(""String_Node_Str"");
    txn.start();
    try {
      Connection conn;
      try {
        conn=txn.getConnection();
      }
 catch (      SQLException e) {
        s_logger.error(""String_Node_Str"",e);
        throw new CloudRuntimeException(""String_Node_Str"",e);
      }
      File[] scripts=upgrade.getPrepareScripts();
      if (scripts != null) {
        for (        File script : scripts) {
          runScript(script);
        }
      }
      upgrade.performDataMigration(conn);
      boolean upgradeVersion=true;
      if (upgrade.getUpgradedVersion().equals(""String_Node_Str"")) {
        upgradeVersion=false;
      }
 else       if (upgrade.getUpgradedVersion().equals(""String_Node_Str"")) {
        try {
          PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
          ResultSet rs=pstmt.executeQuery();
          if (rs.next()) {
            upgradeVersion=false;
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException(""String_Node_Str"",e);
        }
      }
      if (upgradeVersion) {
        VersionVO version=new VersionVO(upgrade.getUpgradedVersion());
        _dao.persist(version);
      }
      txn.commit();
    }
  finally {
      txn.close();
    }
  }
  if (!ClusterManagerImpl.arePeersRunning(trimmedCurrentVersion)) {
    s_logger.info(""String_Node_Str"");
    TreeMap<String,List<DbUpgrade>> upgradedVersions=new TreeMap<String,List<DbUpgrade>>();
    for (    DbUpgrade upgrade : upgrades) {
      String upgradedVerson=upgrade.getUpgradedVersion();
      List<DbUpgrade> upgradeList=upgradedVersions.get(upgradedVerson);
      if (upgradeList == null) {
        upgradeList=new ArrayList<DbUpgrade>();
      }
      upgradeList.add(upgrade);
      upgradedVersions.put(upgradedVerson,upgradeList);
    }
    for (    String upgradedVersion : upgradedVersions.keySet()) {
      List<DbUpgrade> versionUpgrades=upgradedVersions.get(upgradedVersion);
      VersionVO version=_dao.findByVersion(upgradedVersion,Step.Upgrade);
      s_logger.debug(""String_Node_Str"" + upgradedVersion + ""String_Node_Str"");
      Transaction txn=Transaction.open(""String_Node_Str"");
      try {
        if (version != null) {
          for (          DbUpgrade upgrade : versionUpgrades) {
            s_logger.info(""String_Node_Str"" + upgrade.getClass().getSimpleName() + ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[0]+ ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[1]+ ""String_Node_Str""+ upgrade.getUpgradedVersion());
            txn.start();
            File[] scripts=upgrade.getCleanupScripts();
            if (scripts != null) {
              for (              File script : scripts) {
                runScript(script);
                s_logger.debug(""String_Node_Str"" + script.getAbsolutePath() + ""String_Node_Str"");
              }
            }
            txn.commit();
          }
          txn.start();
          version.setStep(Step.Complete);
          s_logger.debug(""String_Node_Str"" + upgradedVersion);
          version.setUpdated(new Date());
          _dao.update(version.getId(),version);
          txn.commit();
        }
      }
  finally {
        txn.close();
      }
    }
  }
}","protected void upgrade(String dbVersion,String currentVersion){
  s_logger.info(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
  String trimmedDbVersion=Version.trimToPatch(dbVersion);
  String trimmedCurrentVersion=Version.trimToPatch(currentVersion);
  DbUpgrade[] upgrades=_upgradeMap.get(trimmedDbVersion);
  if (upgrades == null) {
    s_logger.error(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
    throw new CloudRuntimeException(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
  }
  if (Version.compare(trimmedCurrentVersion,upgrades[upgrades.length - 1].getUpgradedVersion()) != 0) {
    s_logger.error(""String_Node_Str"" + upgrades[upgrades.length - 1].getUpgradedVersion() + ""String_Node_Str""+ currentVersion);
    throw new CloudRuntimeException(""String_Node_Str"" + upgrades[upgrades.length - 1].getUpgradedVersion() + ""String_Node_Str""+ currentVersion);
  }
  boolean supportsRollingUpgrade=true;
  for (  DbUpgrade upgrade : upgrades) {
    if (!upgrade.supportsRollingUpgrade()) {
      supportsRollingUpgrade=false;
      break;
    }
  }
  if (!supportsRollingUpgrade && ClusterManagerImpl.arePeersRunning(null)) {
    s_logger.error(""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  for (  DbUpgrade upgrade : upgrades) {
    s_logger.debug(""String_Node_Str"" + upgrade.getClass().getSimpleName() + ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[0]+ ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[1]+ ""String_Node_Str""+ upgrade.getUpgradedVersion());
    Transaction txn=Transaction.open(""String_Node_Str"");
    txn.start();
    try {
      Connection conn;
      try {
        conn=txn.getConnection();
      }
 catch (      SQLException e) {
        s_logger.error(""String_Node_Str"",e);
        throw new CloudRuntimeException(""String_Node_Str"",e);
      }
      File[] scripts=upgrade.getPrepareScripts();
      if (scripts != null) {
        for (        File script : scripts) {
          runScript(conn,script);
        }
      }
      upgrade.performDataMigration(conn);
      boolean upgradeVersion=true;
      if (upgrade.getUpgradedVersion().equals(""String_Node_Str"")) {
        upgradeVersion=false;
      }
 else       if (upgrade.getUpgradedVersion().equals(""String_Node_Str"")) {
        try {
          PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
          ResultSet rs=pstmt.executeQuery();
          if (rs.next()) {
            upgradeVersion=false;
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException(""String_Node_Str"",e);
        }
      }
      if (upgradeVersion) {
        VersionVO version=new VersionVO(upgrade.getUpgradedVersion());
        _dao.persist(version);
      }
      txn.commit();
    }
  finally {
      txn.close();
    }
  }
  if (!ClusterManagerImpl.arePeersRunning(trimmedCurrentVersion)) {
    s_logger.info(""String_Node_Str"");
    TreeMap<String,List<DbUpgrade>> upgradedVersions=new TreeMap<String,List<DbUpgrade>>();
    for (    DbUpgrade upgrade : upgrades) {
      String upgradedVerson=upgrade.getUpgradedVersion();
      List<DbUpgrade> upgradeList=upgradedVersions.get(upgradedVerson);
      if (upgradeList == null) {
        upgradeList=new ArrayList<DbUpgrade>();
      }
      upgradeList.add(upgrade);
      upgradedVersions.put(upgradedVerson,upgradeList);
    }
    for (    String upgradedVersion : upgradedVersions.keySet()) {
      List<DbUpgrade> versionUpgrades=upgradedVersions.get(upgradedVersion);
      VersionVO version=_dao.findByVersion(upgradedVersion,Step.Upgrade);
      s_logger.debug(""String_Node_Str"" + upgradedVersion + ""String_Node_Str"");
      Transaction txn=Transaction.open(""String_Node_Str"");
      try {
        if (version != null) {
          for (          DbUpgrade upgrade : versionUpgrades) {
            s_logger.info(""String_Node_Str"" + upgrade.getClass().getSimpleName() + ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[0]+ ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[1]+ ""String_Node_Str""+ upgrade.getUpgradedVersion());
            txn.start();
            Connection conn;
            try {
              conn=txn.getConnection();
            }
 catch (            SQLException e) {
              s_logger.error(""String_Node_Str"",e);
              throw new CloudRuntimeException(""String_Node_Str"",e);
            }
            File[] scripts=upgrade.getCleanupScripts();
            if (scripts != null) {
              for (              File script : scripts) {
                runScript(conn,script);
                s_logger.debug(""String_Node_Str"" + script.getAbsolutePath() + ""String_Node_Str"");
              }
            }
            txn.commit();
          }
          txn.start();
          version.setStep(Step.Complete);
          s_logger.debug(""String_Node_Str"" + upgradedVersion);
          version.setUpdated(new Date());
          _dao.update(version.getId(),version);
          txn.commit();
        }
      }
  finally {
        txn.close();
      }
    }
  }
}"
89647,"protected void runScript(File file){
  try {
    FileReader reader=new FileReader(file);
    Connection conn=Transaction.getStandaloneConnection();
    ScriptRunner runner=new ScriptRunner(conn,false,true);
    runner.runScript(reader);
  }
 catch (  FileNotFoundException e) {
    s_logger.error(""String_Node_Str"" + file.getAbsolutePath(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + file.getAbsolutePath(),e);
  }
catch (  IOException e) {
    s_logger.error(""String_Node_Str"" + file.getAbsolutePath(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + file.getAbsolutePath(),e);
  }
catch (  SQLException e) {
    s_logger.error(""String_Node_Str"" + file.getAbsolutePath(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + file.getAbsolutePath(),e);
  }
}","protected void runScript(Connection conn,File file){
  try {
    FileReader reader=new FileReader(file);
    ScriptRunner runner=new ScriptRunner(conn,false,true);
    runner.runScript(reader);
  }
 catch (  FileNotFoundException e) {
    s_logger.error(""String_Node_Str"" + file.getAbsolutePath(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + file.getAbsolutePath(),e);
  }
catch (  IOException e) {
    s_logger.error(""String_Node_Str"" + file.getAbsolutePath(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + file.getAbsolutePath(),e);
  }
catch (  SQLException e) {
    s_logger.error(""String_Node_Str"" + file.getAbsolutePath(),e);
    throw new CloudRuntimeException(""String_Node_Str"" + file.getAbsolutePath(),e);
  }
}"
89648,"@Override public List<ServiceOfferingVO> searchForServiceOfferings(ListServiceOfferingsCmd cmd){
  Filter searchFilter=new Filter(ServiceOfferingVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
  Account account=UserContext.current().getCaller();
  Object name=cmd.getServiceOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long vmId=cmd.getVirtualMachineId();
  Long domainId=cmd.getDomainId();
  Boolean issystem=cmd.getIsSystem();
  if (domainId != null) {
    if (account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      return _offeringsDao.findServiceOfferingByDomainIdAndIsSystem(domainId,issystem);
    }
 else {
      if (isPermissible(account.getDomainId(),domainId)) {
        return _offeringsDao.findServiceOfferingByDomainId(domainId);
      }
 else {
        throw new PermissionDeniedException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
      }
    }
  }
  if ((account.getType() == Account.ACCOUNT_TYPE_NORMAL || account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || account.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
    return searchServiceOfferingsInternal(account,name,id,vmId,keyword,searchFilter);
  }
  if (keyword != null) {
    SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
 else   if (vmId != null) {
    UserVmVO vmInstance=_userVmDao.findById(vmId);
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
    if ((account != null) && !isAdmin(account.getType())) {
      if (account.getId() != vmInstance.getAccountId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
      }
    }
    ServiceOfferingVO offering=_offeringsDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  return _offeringsDao.search(sc,searchFilter);
}","@Override public List<ServiceOfferingVO> searchForServiceOfferings(ListServiceOfferingsCmd cmd){
  Filter searchFilter=new Filter(ServiceOfferingVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
  Account account=UserContext.current().getCaller();
  Object name=cmd.getServiceOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long vmId=cmd.getVirtualMachineId();
  Long domainId=cmd.getDomainId();
  Boolean issystem=cmd.getIsSystem();
  if (domainId != null) {
    if (account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      return _offeringsDao.findServiceOfferingByDomainIdAndIsSystem(domainId,issystem);
    }
 else {
      if (isPermissible(account.getDomainId(),domainId)) {
        return _offeringsDao.findServiceOfferingByDomainId(domainId);
      }
 else {
        throw new PermissionDeniedException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
      }
    }
  }
  if ((account.getType() == Account.ACCOUNT_TYPE_NORMAL || account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) || account.getType() == Account.ACCOUNT_TYPE_RESOURCE_DOMAIN_ADMIN) {
    return searchServiceOfferingsInternal(account,name,id,vmId,keyword,searchFilter);
  }
  if (keyword != null) {
    SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
 else   if (vmId != null) {
    UserVmVO vmInstance=_userVmDao.findById(vmId);
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
    if ((account != null) && !isAdmin(account.getType())) {
      if (account.getId() != vmInstance.getAccountId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
      }
    }
    ServiceOfferingVO offering=_offeringsDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,issystem);
  return _offeringsDao.search(sc,searchFilter);
}"
89649,"@Override public VolumeResponse createVolumeResponse(Volume volume){
  VolumeResponse volResponse=new VolumeResponse();
  volResponse.setId(volume.getId());
  if (volume.getName() != null) {
    volResponse.setName(volume.getName());
  }
 else {
    volResponse.setName(""String_Node_Str"");
  }
  volResponse.setZoneId(volume.getDataCenterId());
  volResponse.setZoneName(ApiDBUtils.findZoneById(volume.getDataCenterId()).getName());
  volResponse.setVolumeType(volume.getVolumeType().toString());
  volResponse.setDeviceId(volume.getDeviceId());
  Long instanceId=volume.getInstanceId();
  if (instanceId != null && volume.getState() != Volume.State.Destroy) {
    VMInstanceVO vm=ApiDBUtils.findVMInstanceById(instanceId);
    volResponse.setVirtualMachineId(vm.getId());
    volResponse.setVirtualMachineName(vm.getHostName());
    UserVm userVm=ApiDBUtils.findUserVmById(vm.getId());
    volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());
    volResponse.setVirtualMachineState(vm.getState().toString());
  }
  volResponse.setSize(volume.getSize());
  volResponse.setCreated(volume.getCreated());
  volResponse.setState(volume.getState().toString());
  Account accountTemp=ApiDBUtils.findAccountById(volume.getAccountId());
  if (accountTemp != null) {
    volResponse.setAccountName(accountTemp.getAccountName());
    volResponse.setDomainId(accountTemp.getDomainId());
    volResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
  }
  String storageType;
  try {
    if (volume.getPoolId() == null) {
      if (volume.getState() == Volume.State.Allocated) {
        storageType=""String_Node_Str"";
      }
 else {
        storageType=""String_Node_Str"";
      }
    }
 else {
      storageType=ApiDBUtils.volumeIsOnSharedStorage(volume.getId()) ? ""String_Node_Str"" : ""String_Node_Str"";
    }
  }
 catch (  InvalidParameterValueException e) {
    s_logger.error(e.getMessage(),e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + volume.getName() + ""String_Node_Str"");
  }
  volResponse.setStorageType(storageType);
  if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
    volResponse.setServiceOfferingId(volume.getDiskOfferingId());
  }
 else {
    volResponse.setDiskOfferingId(volume.getDiskOfferingId());
  }
  DiskOfferingVO diskOffering=ApiDBUtils.findDiskOfferingById(volume.getDiskOfferingId());
  if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
    volResponse.setServiceOfferingName(diskOffering.getName());
    volResponse.setServiceOfferingDisplayText(diskOffering.getDisplayText());
  }
 else {
    volResponse.setDiskOfferingName(diskOffering.getName());
    volResponse.setDiskOfferingDisplayText(diskOffering.getDisplayText());
  }
  Long poolId=volume.getPoolId();
  String poolName=(poolId == null) ? ""String_Node_Str"" : ApiDBUtils.findStoragePoolById(poolId).getName();
  volResponse.setStoragePoolName(poolName);
  volResponse.setHypervisor(ApiDBUtils.getVolumeHyperType(volume.getId()).toString());
  volResponse.setAttached(volume.getAttached());
  volResponse.setDestroyed(volume.getState() == Volume.State.Destroy);
  VMTemplateVO template=ApiDBUtils.findTemplateById(volume.getTemplateId());
  boolean isExtractable=template != null && template.isExtractable() && !(template.getTemplateType() == TemplateType.SYSTEM);
  volResponse.setExtractable(isExtractable);
  volResponse.setObjectName(""String_Node_Str"");
  return volResponse;
}","@Override public VolumeResponse createVolumeResponse(Volume volume){
  VolumeResponse volResponse=new VolumeResponse();
  volResponse.setId(volume.getId());
  if (volume.getName() != null) {
    volResponse.setName(volume.getName());
  }
 else {
    volResponse.setName(""String_Node_Str"");
  }
  volResponse.setZoneId(volume.getDataCenterId());
  volResponse.setZoneName(ApiDBUtils.findZoneById(volume.getDataCenterId()).getName());
  volResponse.setVolumeType(volume.getVolumeType().toString());
  volResponse.setDeviceId(volume.getDeviceId());
  Long instanceId=volume.getInstanceId();
  if (instanceId != null && volume.getState() != Volume.State.Destroy) {
    VMInstanceVO vm=ApiDBUtils.findVMInstanceById(instanceId);
    volResponse.setVirtualMachineId(vm.getId());
    volResponse.setVirtualMachineName(vm.getHostName());
    UserVm userVm=ApiDBUtils.findUserVmById(vm.getId());
    if (userVm != null) {
      volResponse.setVirtualMachineDisplayName(userVm.getDisplayName());
      volResponse.setVirtualMachineState(vm.getState().toString());
    }
  }
  volResponse.setSize(volume.getSize());
  volResponse.setCreated(volume.getCreated());
  volResponse.setState(volume.getState().toString());
  Account accountTemp=ApiDBUtils.findAccountById(volume.getAccountId());
  if (accountTemp != null) {
    volResponse.setAccountName(accountTemp.getAccountName());
    volResponse.setDomainId(accountTemp.getDomainId());
    volResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
  }
  String storageType;
  try {
    if (volume.getPoolId() == null) {
      if (volume.getState() == Volume.State.Allocated) {
        storageType=""String_Node_Str"";
      }
 else {
        storageType=""String_Node_Str"";
      }
    }
 else {
      storageType=ApiDBUtils.volumeIsOnSharedStorage(volume.getId()) ? ""String_Node_Str"" : ""String_Node_Str"";
    }
  }
 catch (  InvalidParameterValueException e) {
    s_logger.error(e.getMessage(),e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + volume.getName() + ""String_Node_Str"");
  }
  volResponse.setStorageType(storageType);
  if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
    volResponse.setServiceOfferingId(volume.getDiskOfferingId());
  }
 else {
    volResponse.setDiskOfferingId(volume.getDiskOfferingId());
  }
  DiskOfferingVO diskOffering=ApiDBUtils.findDiskOfferingById(volume.getDiskOfferingId());
  if (volume.getVolumeType().equals(Volume.Type.ROOT)) {
    volResponse.setServiceOfferingName(diskOffering.getName());
    volResponse.setServiceOfferingDisplayText(diskOffering.getDisplayText());
  }
 else {
    volResponse.setDiskOfferingName(diskOffering.getName());
    volResponse.setDiskOfferingDisplayText(diskOffering.getDisplayText());
  }
  Long poolId=volume.getPoolId();
  String poolName=(poolId == null) ? ""String_Node_Str"" : ApiDBUtils.findStoragePoolById(poolId).getName();
  volResponse.setStoragePoolName(poolName);
  volResponse.setHypervisor(ApiDBUtils.getVolumeHyperType(volume.getId()).toString());
  volResponse.setAttached(volume.getAttached());
  volResponse.setDestroyed(volume.getState() == Volume.State.Destroy);
  VMTemplateVO template=ApiDBUtils.findTemplateById(volume.getTemplateId());
  boolean isExtractable=template != null && template.isExtractable() && !(template.getTemplateType() == TemplateType.SYSTEM);
  volResponse.setExtractable(isExtractable);
  volResponse.setObjectName(""String_Node_Str"");
  return volResponse;
}"
89650,"@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd){
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Long accountId=null;
  boolean isAdmin=false;
  Boolean isRecursive=cmd.isRecursive();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
      isRecursive=true;
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zone=null;
  Object pod=null;
  if (isAdmin) {
    zone=cmd.getZoneId();
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  SearchBuilder<DiskOfferingVO> diskOfferingSearch=_diskOfferingDao.createSearchBuilder();
  diskOfferingSearch.and(""String_Node_Str"",diskOfferingSearch.entity().isSystemUse(),SearchCriteria.Op.NEQ);
  sb.join(""String_Node_Str"",diskOfferingSearch,sb.entity().getDiskOfferingId(),diskOfferingSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  if (((accountId == null) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((accountId == null) && (domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchBuilder<VMInstanceVO> vmSearch=_vmInstanceDao.createSearchBuilder();
  vmSearch.and(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NIN);
  sb.join(""String_Node_Str"",vmSearch,sb.entity().getInstanceId(),vmSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",1);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}","@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd){
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Long accountId=null;
  boolean isAdmin=false;
  Boolean isRecursive=cmd.isRecursive();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
      isRecursive=true;
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zone=null;
  Object pod=null;
  if (isAdmin) {
    zone=cmd.getZoneId();
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  SearchBuilder<DiskOfferingVO> diskOfferingSearch=_diskOfferingDao.createSearchBuilder();
  diskOfferingSearch.and(""String_Node_Str"",diskOfferingSearch.entity().isSystemUse(),SearchCriteria.Op.NEQ);
  sb.join(""String_Node_Str"",diskOfferingSearch,sb.entity().getDiskOfferingId(),diskOfferingSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  if (((accountId == null) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((accountId == null) && (domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchBuilder<VMInstanceVO> vmSearch=_vmInstanceDao.createSearchBuilder();
  vmSearch.and(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NIN);
  vmSearch.or(""String_Node_Str"",vmSearch.entity().getType(),SearchCriteria.Op.NULL);
  sb.join(""String_Node_Str"",vmSearch,sb.entity().getInstanceId(),vmSearch.entity().getId(),JoinBuilder.JoinType.LEFTOUTER);
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",1);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",VirtualMachine.Type.ConsoleProxy,VirtualMachine.Type.SecondaryStorageVm,VirtualMachine.Type.DomainRouter);
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}"
89651,"@Override @DB public boolean backupSnapshotToSecondaryStorage(SnapshotVO ss){
  long snapshotId=ss.getId();
  SnapshotVO snapshot=_snapshotDao.acquireInLockTable(snapshotId);
  if (snapshot == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + ss);
  }
  try {
    snapshot.setStatus(Snapshot.Status.BackingUp);
    _snapshotDao.update(snapshot.getId(),snapshot);
    long volumeId=snapshot.getVolumeId();
    VolumeVO volume=_volsDao.lockRow(volumeId,true);
    String primaryStoragePoolNameLabel=_storageMgr.getPrimaryStorageNameLabel(volume);
    Long dcId=volume.getDataCenterId();
    Long accountId=volume.getAccountId();
    HostVO secHost=getSecHost(volumeId,volume.getDataCenterId());
    String secondaryStoragePoolUrl=secHost.getStorageUrl();
    String snapshotUuid=snapshot.getPath();
    SnapshotVO prevSnapshot=null;
    String prevSnapshotUuid=null;
    String prevBackupUuid=null;
    SwiftVO swift=_swiftDao.findById(1L);
    long prevSnapshotId=snapshot.getPrevSnapshotId();
    if (prevSnapshotId > 0) {
      prevSnapshot=_snapshotDao.findByIdIncludingRemoved(prevSnapshotId);
      if (prevSnapshot.getBackupSnapshotId() != null && swift == null) {
        if (prevSnapshot.getVersion() != null && prevSnapshot.getVersion().equals(""String_Node_Str"")) {
          prevBackupUuid=prevSnapshot.getBackupSnapshotId();
          prevSnapshotUuid=prevSnapshot.getPath();
        }
      }
 else       if (prevSnapshot.getSwiftName() != null && swift != null) {
        prevBackupUuid=prevSnapshot.getSwiftName();
        prevSnapshotUuid=prevSnapshot.getPath();
      }
    }
    boolean isVolumeInactive=_storageMgr.volumeInactive(volume);
    String vmName=_storageMgr.getVmNameOnVolume(volume);
    BackupSnapshotCommand backupSnapshotCommand=new BackupSnapshotCommand(primaryStoragePoolNameLabel,secondaryStoragePoolUrl,dcId,accountId,volumeId,snapshot.getId(),volume.getPath(),snapshotUuid,snapshot.getName(),prevSnapshotUuid,prevBackupUuid,isVolumeInactive,vmName);
    if (swift != null) {
      backupSnapshotCommand.setSwift(toSwiftTO(swift));
    }
    String backedUpSnapshotUuid=null;
    boolean backedUp=false;
    BackupSnapshotAnswer answer=(BackupSnapshotAnswer)sendToPool(volume,backupSnapshotCommand);
    if (answer != null && answer.getResult()) {
      backedUpSnapshotUuid=answer.getBackupSnapshotName();
      if (backedUpSnapshotUuid != null) {
        backedUp=true;
      }
    }
 else     if (answer != null) {
      s_logger.error(answer.getDetails());
    }
    Transaction txn=Transaction.currentTxn();
    txn.start();
    if (backedUp) {
      if (backupSnapshotCommand.getSwift() != null) {
        snapshot.setSwiftId(1L);
        snapshot.setSwiftName(backedUpSnapshotUuid);
      }
 else {
        snapshot.setBackupSnapshotId(backedUpSnapshotUuid);
      }
      if (answer.isFull()) {
        snapshot.setPrevSnapshotId(0);
      }
      snapshot.setStatus(Snapshot.Status.BackedUp);
      _snapshotDao.update(snapshotId,snapshot);
      if (snapshot.getType() == Type.RECURRING) {
        _accountMgr.incrementResourceCount(snapshot.getAccountId(),ResourceType.snapshot);
      }
    }
 else {
      s_logger.warn(""String_Node_Str"");
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_DELETE,snapshot.getAccountId(),snapshot.getDataCenterId(),snapshotId,snapshot.getName(),null,null,0L);
      _usageEventDao.persist(usageEvent);
      _snapshotDao.remove(snapshotId);
    }
    txn.commit();
    return backedUp;
  }
  finally {
    if (snapshot != null) {
      _snapshotDao.releaseFromLockTable(snapshotId);
    }
  }
}","@Override @DB public boolean backupSnapshotToSecondaryStorage(SnapshotVO ss){
  long snapshotId=ss.getId();
  SnapshotVO snapshot=_snapshotDao.acquireInLockTable(snapshotId);
  if (snapshot == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + ss);
  }
  try {
    snapshot.setStatus(Snapshot.Status.BackingUp);
    _snapshotDao.update(snapshot.getId(),snapshot);
    long volumeId=snapshot.getVolumeId();
    VolumeVO volume=_volsDao.lockRow(volumeId,true);
    String primaryStoragePoolNameLabel=_storageMgr.getPrimaryStorageNameLabel(volume);
    Long dcId=volume.getDataCenterId();
    Long accountId=volume.getAccountId();
    HostVO secHost=getSecHost(volumeId,volume.getDataCenterId());
    String secondaryStoragePoolUrl=secHost.getStorageUrl();
    String snapshotUuid=snapshot.getPath();
    SnapshotVO prevSnapshot=null;
    String prevSnapshotUuid=null;
    String prevBackupUuid=null;
    SwiftVO swift=_swiftDao.findById(1L);
    long prevSnapshotId=snapshot.getPrevSnapshotId();
    if (prevSnapshotId > 0) {
      prevSnapshot=_snapshotDao.findByIdIncludingRemoved(prevSnapshotId);
      if (prevSnapshot.getBackupSnapshotId() != null && swift == null) {
        if (prevSnapshot.getVersion() != null && prevSnapshot.getVersion().equals(""String_Node_Str"")) {
          prevBackupUuid=prevSnapshot.getBackupSnapshotId();
          prevSnapshotUuid=prevSnapshot.getPath();
        }
      }
 else       if (prevSnapshot.getSwiftName() != null && swift != null) {
        prevBackupUuid=prevSnapshot.getSwiftName();
        prevSnapshotUuid=prevSnapshot.getPath();
      }
    }
    boolean isVolumeInactive=_storageMgr.volumeInactive(volume);
    String vmName=_storageMgr.getVmNameOnVolume(volume);
    BackupSnapshotCommand backupSnapshotCommand=new BackupSnapshotCommand(primaryStoragePoolNameLabel,secondaryStoragePoolUrl,dcId,accountId,volumeId,snapshot.getId(),volume.getPath(),snapshotUuid,snapshot.getName(),prevSnapshotUuid,prevBackupUuid,isVolumeInactive,vmName);
    if (swift != null) {
      backupSnapshotCommand.setSwift(toSwiftTO(swift));
    }
    String backedUpSnapshotUuid=null;
    boolean backedUp=false;
    BackupSnapshotAnswer answer=(BackupSnapshotAnswer)sendToPool(volume,backupSnapshotCommand);
    if (answer != null && answer.getResult()) {
      backedUpSnapshotUuid=answer.getBackupSnapshotName();
      if (backedUpSnapshotUuid != null) {
        backedUp=true;
      }
    }
 else     if (answer != null) {
      s_logger.error(answer.getDetails());
    }
    Transaction txn=Transaction.currentTxn();
    txn.start();
    if (backedUp) {
      if (backupSnapshotCommand.getSwift() != null) {
        snapshot.setSwiftId(1L);
        snapshot.setSwiftName(backedUpSnapshotUuid);
      }
 else {
        snapshot.setBackupSnapshotId(backedUpSnapshotUuid);
      }
      if (answer.isFull()) {
        snapshot.setPrevSnapshotId(0);
      }
      snapshot.setStatus(Snapshot.Status.BackedUp);
      _snapshotDao.update(snapshotId,snapshot);
      if (snapshot.isRecursive()) {
        _accountMgr.incrementResourceCount(snapshot.getAccountId(),ResourceType.snapshot);
      }
    }
 else {
      s_logger.warn(""String_Node_Str"");
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_DELETE,snapshot.getAccountId(),snapshot.getDataCenterId(),snapshotId,snapshot.getName(),null,null,0L);
      _usageEventDao.persist(usageEvent);
      _snapshotDao.remove(snapshotId);
    }
    txn.commit();
    return backedUp;
  }
  finally {
    if (snapshot != null) {
      _snapshotDao.releaseFromLockTable(snapshotId);
    }
  }
}"
89652,"private void dropTableColumnsIfExist(Connection conn,String tableName,List<String> columns){
  try {
    for (    String column : columns) {
      try {
        PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"" + column + ""String_Node_Str""+ tableName);
        pstmt.executeQuery();
      }
 catch (      SQLException e) {
        s_logger.trace(""String_Node_Str"" + column + ""String_Node_Str""+ tableName);
        continue;
      }
      PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"" + tableName + ""String_Node_Str""+ column);
      pstmt.executeUpdate();
      s_logger.debug(""String_Node_Str"" + column + ""String_Node_Str""+ tableName);
      pstmt.close();
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private void dropTableColumnsIfExist(Connection conn,String tableName,List<String> columns){
  PreparedStatement pstmt=null;
  try {
    for (    String column : columns) {
      try {
        pstmt=conn.prepareStatement(""String_Node_Str"" + column + ""String_Node_Str""+ tableName);
        pstmt.executeQuery();
      }
 catch (      SQLException e) {
        s_logger.trace(""String_Node_Str"" + column + ""String_Node_Str""+ tableName);
        continue;
      }
      pstmt=conn.prepareStatement(""String_Node_Str"" + tableName + ""String_Node_Str""+ column);
      pstmt.executeUpdate();
      s_logger.debug(""String_Node_Str"" + column + ""String_Node_Str""+ tableName);
      pstmt.close();
    }
  }
 catch (  SQLException e) {
    s_logger.warn(""String_Node_Str"" + pstmt + ""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}"
89653,"@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof DownloadProgressCommand) {
    return _dlMgr.handleDownloadCommand(this,(DownloadProgressCommand)cmd);
  }
 else   if (cmd instanceof DownloadCommand) {
    return _dlMgr.handleDownloadCommand(this,(DownloadCommand)cmd);
  }
 else   if (cmd instanceof CheckHealthCommand) {
    return new CheckHealthAnswer((CheckHealthCommand)cmd,true);
  }
 else   if (cmd instanceof SecStorageSetupCommand) {
    return new Answer(cmd,true,""String_Node_Str"");
  }
 else   if (cmd instanceof ReadyCommand) {
    return new ReadyAnswer((ReadyCommand)cmd);
  }
 else   if (cmd instanceof ListTemplateCommand) {
    return execute((ListTemplateCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}","@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof DownloadProgressCommand) {
    return _dlMgr.handleDownloadCommand(this,(DownloadProgressCommand)cmd);
  }
 else   if (cmd instanceof DownloadCommand) {
    return _dlMgr.handleDownloadCommand(this,(DownloadCommand)cmd);
  }
 else   if (cmd instanceof CheckHealthCommand) {
    return new CheckHealthAnswer((CheckHealthCommand)cmd,true);
  }
 else   if (cmd instanceof SecStorageSetupCommand) {
    return new Answer(cmd,true,""String_Node_Str"");
  }
 else   if (cmd instanceof ReadyCommand) {
    return new ReadyAnswer((ReadyCommand)cmd);
  }
 else   if (cmd instanceof ListTemplateCommand) {
    return execute((ListTemplateCommand)cmd);
  }
 else   if (cmd instanceof ComputeChecksumCommand) {
    return execute((ComputeChecksumCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}"
89654,"private List<HostVO> searchForServers(Long startIndex,Long pageSize,Object name,Object type,Object state,Object zone,Object pod,Object cluster,Object id,Object keyword,Object allocationState){
  Filter searchFilter=new Filter(HostVO.class,""String_Node_Str"",Boolean.TRUE,startIndex,pageSize);
  SearchCriteria<HostVO> sc=_hostDao.createSearchCriteria();
  if (keyword != null) {
    SearchCriteria<HostVO> ssc=_hostDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (type != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,type);
  }
  if (state != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,state);
  }
  if (zone != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zone);
  }
  if (pod != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,pod);
  }
  if (cluster != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,cluster);
  }
  if (allocationState != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,allocationState);
  }
  return _hostDao.search(sc,searchFilter);
}","private List<HostVO> searchForServers(Long startIndex,Long pageSize,Object name,Object type,Object state,Object zone,Object pod,Object cluster,Object id,Object keyword,Object allocationState){
  Filter searchFilter=new Filter(HostVO.class,""String_Node_Str"",Boolean.TRUE,startIndex,pageSize);
  SearchCriteria<HostVO> sc=_hostDao.createSearchCriteria();
  if (keyword != null) {
    SearchCriteria<HostVO> ssc=_hostDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (type != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (state != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,state);
  }
  if (zone != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zone);
  }
  if (pod != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,pod);
  }
  if (cluster != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,cluster);
  }
  if (allocationState != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,allocationState);
  }
  return _hostDao.search(sc,searchFilter);
}"
89655,"@Override public HostVO getSecondaryStorageHost(long zoneId){
  List<HostVO> hosts=_hostDao.listSecondaryStorageHosts(zoneId);
  if (hosts == null || hosts.size() == 0) {
    return null;
  }
  int size=hosts.size();
  Random rn=new Random();
  int index=rn.nextInt(size);
  return hosts.get(index);
}","@Override public HostVO getSecondaryStorageHost(long zoneId){
  List<HostVO> hosts=_hostDao.listSecondaryStorageHosts(zoneId);
  if (hosts == null || hosts.size() == 0) {
    hosts=_hostDao.listLocalSecondaryStorageHosts(zoneId);
    if (hosts.isEmpty()) {
      return null;
    }
  }
  int size=hosts.size();
  Random rn=new Random();
  int index=rn.nextInt(size);
  return hosts.get(index);
}"
89656,"@Override public boolean downloadTemplateToStorage(Long templateId,Long zoneId){
  List<DataCenterVO> dcs=new ArrayList<DataCenterVO>();
  if (zoneId == null) {
    dcs.addAll(_dcDao.listAll());
  }
 else {
    dcs.add(_dcDao.findById(zoneId));
  }
  for (  DataCenterVO dc : dcs) {
    List<HostVO> ssHosts=_hostDao.listBy(Host.Type.SecondaryStorage,dc.getId());
    for (    HostVO ssHost : ssHosts) {
      if (isTemplateUpdateable(ssHost.getId(),templateId)) {
        initiateTemplateDownload(templateId,ssHost);
      }
    }
  }
  return true;
}","@Override public boolean downloadTemplateToStorage(Long templateId,Long zoneId){
  List<DataCenterVO> dcs=new ArrayList<DataCenterVO>();
  if (zoneId == null) {
    dcs.addAll(_dcDao.listAll());
  }
 else {
    dcs.add(_dcDao.findById(zoneId));
  }
  for (  DataCenterVO dc : dcs) {
    List<HostVO> ssHosts=_hostDao.listAllSecondaryStorageHosts(dc.getId());
    for (    HostVO ssHost : ssHosts) {
      if (isTemplateUpdateable(ssHost.getId(),templateId)) {
        initiateTemplateDownload(templateId,ssHost);
      }
    }
  }
  return true;
}"
89657,"@Override public void handleTemplateSync(HostVO ssHost){
  Long sserverId=ssHost.getId();
  if (ssHost == null) {
    s_logger.warn(""String_Node_Str"" + sserverId + ""String_Node_Str"");
    return;
  }
  if (ssHost.getType() != Host.Type.SecondaryStorage) {
    s_logger.warn(""String_Node_Str"" + sserverId + ""String_Node_Str"");
    return;
  }
  Map<String,TemplateInfo> templateInfos=listTemplate(ssHost);
  if (templateInfos == null) {
    return;
  }
  long zoneId=ssHost.getDataCenterId();
  Set<VMTemplateVO> toBeDownloaded=new HashSet<VMTemplateVO>();
  List<VMTemplateVO> allTemplates=_templateDao.listAllInZone(ssHost.getDataCenterId());
  List<VMTemplateVO> rtngTmplts=_templateDao.listAllSystemVMTemplates();
  List<VMTemplateVO> defaultBuiltin=_templateDao.listDefaultBuiltinTemplates();
  if (rtngTmplts != null) {
    for (    VMTemplateVO rtngTmplt : rtngTmplts) {
      if (!allTemplates.contains(rtngTmplt)) {
        allTemplates.add(rtngTmplt);
      }
    }
  }
  if (defaultBuiltin != null) {
    for (    VMTemplateVO builtinTmplt : defaultBuiltin) {
      if (!allTemplates.contains(builtinTmplt)) {
        allTemplates.add(builtinTmplt);
      }
    }
  }
  toBeDownloaded.addAll(allTemplates);
  for (  VMTemplateVO tmplt : allTemplates) {
    String uniqueName=tmplt.getUniqueName();
    VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(sserverId,tmplt.getId());
    if (templateInfos.containsKey(uniqueName)) {
      TemplateInfo tmpltInfo=templateInfos.remove(uniqueName);
      toBeDownloaded.remove(tmplt);
      if (tmpltHost != null) {
        s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str"");
        if (tmpltHost.getDownloadState() != Status.DOWNLOADED) {
          tmpltHost.setErrorString(""String_Node_Str"");
        }
        if (tmpltInfo.isCorrupted()) {
          tmpltHost.setDownloadState(Status.DOWNLOAD_ERROR);
          tmpltHost.setErrorString(""String_Node_Str"");
          toBeDownloaded.add(tmplt);
          s_logger.info(""String_Node_Str"" + tmplt + ""String_Node_Str"");
          if (tmplt.getUrl() == null) {
            String msg=""String_Node_Str"" + tmplt + ""String_Node_Str""+ tmpltInfo.getInstallPath()+ ""String_Node_Str""+ tmpltHost.getHostId();
            s_logger.warn(msg);
          }
 else {
            toBeDownloaded.add(tmplt);
          }
        }
 else {
          tmpltHost.setDownloadPercent(100);
          tmpltHost.setDownloadState(Status.DOWNLOADED);
          tmpltHost.setInstallPath(tmpltInfo.getInstallPath());
          tmpltHost.setSize(tmpltInfo.getSize());
          tmpltHost.setPhysicalSize(tmpltInfo.getPhysicalSize());
          tmpltHost.setLastUpdated(new Date());
        }
        _vmTemplateHostDao.update(tmpltHost.getId(),tmpltHost);
      }
 else {
        tmpltHost=new VMTemplateHostVO(sserverId,tmplt.getId(),new Date(),100,Status.DOWNLOADED,null,null,null,tmpltInfo.getInstallPath(),tmplt.getUrl());
        tmpltHost.setSize(tmpltInfo.getSize());
        tmpltHost.setPhysicalSize(tmpltInfo.getPhysicalSize());
        _vmTemplateHostDao.persist(tmpltHost);
        VMTemplateZoneVO tmpltZoneVO=_vmTemplateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
        if (tmpltZoneVO == null) {
          tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
          _vmTemplateZoneDao.persist(tmpltZoneVO);
        }
 else {
          tmpltZoneVO.setLastUpdated(new Date());
          _vmTemplateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
        }
      }
      continue;
    }
    if (tmpltHost != null && tmpltHost.getDownloadState() != Status.DOWNLOADED) {
      s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str""+ sserverId+ ""String_Node_Str"");
    }
 else     if (tmpltHost == null) {
      s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str""+ sserverId+ ""String_Node_Str"");
      VMTemplateHostVO templtHost=new VMTemplateHostVO(sserverId,tmplt.getId(),new Date(),0,Status.NOT_DOWNLOADED,null,null,null,null,tmplt.getUrl());
      _vmTemplateHostDao.persist(templtHost);
      VMTemplateZoneVO tmpltZoneVO=_vmTemplateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
      if (tmpltZoneVO == null) {
        tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
        _vmTemplateZoneDao.persist(tmpltZoneVO);
      }
 else {
        tmpltZoneVO.setLastUpdated(new Date());
        _vmTemplateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
      }
    }
  }
  if (toBeDownloaded.size() > 0) {
    List<HypervisorType> availHypers=_clusterDao.getAvailableHypervisorInZone(ssHost.getDataCenterId());
    availHypers.remove(HypervisorType.BareMetal);
    availHypers.add(HypervisorType.None);
    for (    VMTemplateVO tmplt : toBeDownloaded) {
      if (tmplt.getUrl() == null) {
        VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(ssHost.getId(),tmplt.getId());
        if (tmpltHost != null) {
          tmpltHost.setDownloadState(Status.DOWNLOAD_ERROR);
          tmpltHost.setDownloadPercent(0);
          tmpltHost.setErrorString(""String_Node_Str"");
          _vmTemplateHostDao.update(tmpltHost.getId(),tmpltHost);
        }
        continue;
      }
      if (availHypers.contains(tmplt.getHypervisorType())) {
        s_logger.debug(""String_Node_Str"" + tmplt.getName() + ""String_Node_Str""+ ssHost.getName());
        downloadTemplateToStorage(tmplt,ssHost);
      }
    }
  }
  for (  String uniqueName : templateInfos.keySet()) {
    TemplateInfo tInfo=templateInfos.get(uniqueName);
    DeleteTemplateCommand dtCommand=new DeleteTemplateCommand(ssHost.getStorageUrl(),tInfo.getInstallPath());
    long result=_agentMgr.sendToSecStorage(ssHost,dtCommand,null);
    if (result == -1) {
      String description=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ sserverId+ ""String_Node_Str"";
      s_logger.error(description);
      return;
    }
    String description=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ sserverId+ ""String_Node_Str""+ result;
    s_logger.info(description);
  }
  checksumSync(sserverId);
}","@Override public void handleTemplateSync(HostVO ssHost){
  Long sserverId=ssHost.getId();
  if (ssHost == null) {
    s_logger.warn(""String_Node_Str"" + sserverId + ""String_Node_Str"");
    return;
  }
  if (!(ssHost.getType() == Host.Type.SecondaryStorage || ssHost.getType() == Host.Type.LocalSecondaryStorage)) {
    s_logger.warn(""String_Node_Str"" + sserverId + ""String_Node_Str"");
    return;
  }
  Map<String,TemplateInfo> templateInfos=listTemplate(ssHost);
  if (templateInfos == null) {
    return;
  }
  long zoneId=ssHost.getDataCenterId();
  Set<VMTemplateVO> toBeDownloaded=new HashSet<VMTemplateVO>();
  List<VMTemplateVO> allTemplates=_templateDao.listAllInZone(ssHost.getDataCenterId());
  List<VMTemplateVO> rtngTmplts=_templateDao.listAllSystemVMTemplates();
  List<VMTemplateVO> defaultBuiltin=_templateDao.listDefaultBuiltinTemplates();
  if (rtngTmplts != null) {
    for (    VMTemplateVO rtngTmplt : rtngTmplts) {
      if (!allTemplates.contains(rtngTmplt)) {
        allTemplates.add(rtngTmplt);
      }
    }
  }
  if (defaultBuiltin != null) {
    for (    VMTemplateVO builtinTmplt : defaultBuiltin) {
      if (!allTemplates.contains(builtinTmplt)) {
        allTemplates.add(builtinTmplt);
      }
    }
  }
  toBeDownloaded.addAll(allTemplates);
  for (  VMTemplateVO tmplt : allTemplates) {
    String uniqueName=tmplt.getUniqueName();
    VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(sserverId,tmplt.getId());
    if (templateInfos.containsKey(uniqueName)) {
      TemplateInfo tmpltInfo=templateInfos.remove(uniqueName);
      toBeDownloaded.remove(tmplt);
      if (tmpltHost != null) {
        s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str"");
        if (tmpltHost.getDownloadState() != Status.DOWNLOADED) {
          tmpltHost.setErrorString(""String_Node_Str"");
        }
        if (tmpltInfo.isCorrupted()) {
          tmpltHost.setDownloadState(Status.DOWNLOAD_ERROR);
          tmpltHost.setErrorString(""String_Node_Str"");
          toBeDownloaded.add(tmplt);
          s_logger.info(""String_Node_Str"" + tmplt + ""String_Node_Str"");
          if (tmplt.getUrl() == null) {
            String msg=""String_Node_Str"" + tmplt + ""String_Node_Str""+ tmpltInfo.getInstallPath()+ ""String_Node_Str""+ tmpltHost.getHostId();
            s_logger.warn(msg);
          }
 else {
            toBeDownloaded.add(tmplt);
          }
        }
 else {
          tmpltHost.setDownloadPercent(100);
          tmpltHost.setDownloadState(Status.DOWNLOADED);
          tmpltHost.setInstallPath(tmpltInfo.getInstallPath());
          tmpltHost.setSize(tmpltInfo.getSize());
          tmpltHost.setPhysicalSize(tmpltInfo.getPhysicalSize());
          tmpltHost.setLastUpdated(new Date());
        }
        _vmTemplateHostDao.update(tmpltHost.getId(),tmpltHost);
      }
 else {
        tmpltHost=new VMTemplateHostVO(sserverId,tmplt.getId(),new Date(),100,Status.DOWNLOADED,null,null,null,tmpltInfo.getInstallPath(),tmplt.getUrl());
        tmpltHost.setSize(tmpltInfo.getSize());
        tmpltHost.setPhysicalSize(tmpltInfo.getPhysicalSize());
        _vmTemplateHostDao.persist(tmpltHost);
        VMTemplateZoneVO tmpltZoneVO=_vmTemplateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
        if (tmpltZoneVO == null) {
          tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
          _vmTemplateZoneDao.persist(tmpltZoneVO);
        }
 else {
          tmpltZoneVO.setLastUpdated(new Date());
          _vmTemplateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
        }
      }
      continue;
    }
    if (tmpltHost != null && tmpltHost.getDownloadState() != Status.DOWNLOADED) {
      s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str""+ sserverId+ ""String_Node_Str"");
    }
 else     if (tmpltHost == null) {
      s_logger.info(""String_Node_Str"" + uniqueName + ""String_Node_Str""+ sserverId+ ""String_Node_Str"");
      VMTemplateHostVO templtHost=new VMTemplateHostVO(sserverId,tmplt.getId(),new Date(),0,Status.NOT_DOWNLOADED,null,null,null,null,tmplt.getUrl());
      _vmTemplateHostDao.persist(templtHost);
      VMTemplateZoneVO tmpltZoneVO=_vmTemplateZoneDao.findByZoneTemplate(zoneId,tmplt.getId());
      if (tmpltZoneVO == null) {
        tmpltZoneVO=new VMTemplateZoneVO(zoneId,tmplt.getId(),new Date());
        _vmTemplateZoneDao.persist(tmpltZoneVO);
      }
 else {
        tmpltZoneVO.setLastUpdated(new Date());
        _vmTemplateZoneDao.update(tmpltZoneVO.getId(),tmpltZoneVO);
      }
    }
  }
  if (toBeDownloaded.size() > 0) {
    List<HypervisorType> availHypers=_clusterDao.getAvailableHypervisorInZone(ssHost.getDataCenterId());
    availHypers.remove(HypervisorType.BareMetal);
    availHypers.add(HypervisorType.None);
    for (    VMTemplateVO tmplt : toBeDownloaded) {
      if (tmplt.getUrl() == null) {
        VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(ssHost.getId(),tmplt.getId());
        if (tmpltHost != null) {
          tmpltHost.setDownloadState(Status.DOWNLOAD_ERROR);
          tmpltHost.setDownloadPercent(0);
          tmpltHost.setErrorString(""String_Node_Str"");
          _vmTemplateHostDao.update(tmpltHost.getId(),tmpltHost);
        }
        continue;
      }
      if (availHypers.contains(tmplt.getHypervisorType())) {
        s_logger.debug(""String_Node_Str"" + tmplt.getName() + ""String_Node_Str""+ ssHost.getName());
        downloadTemplateToStorage(tmplt,ssHost);
      }
    }
  }
  for (  String uniqueName : templateInfos.keySet()) {
    TemplateInfo tInfo=templateInfos.get(uniqueName);
    DeleteTemplateCommand dtCommand=new DeleteTemplateCommand(ssHost.getStorageUrl(),tInfo.getInstallPath());
    long result=_agentMgr.sendToSecStorage(ssHost,dtCommand,null);
    if (result == -1) {
      String description=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ sserverId+ ""String_Node_Str"";
      s_logger.error(description);
      return;
    }
    String description=""String_Node_Str"" + tInfo.getTemplateName() + ""String_Node_Str""+ sserverId+ ""String_Node_Str""+ result;
    s_logger.info(description);
  }
  if (ssHost.getType() == Host.Type.SecondaryStorage)   checksumSync(sserverId);
}"
89658,"@Override public String getChecksum(Long hostId,String templatePath){
  HostVO ssHost=_hostDao.findById(hostId);
  Host.Type type=ssHost.getType();
  if (type != Host.Type.SecondaryStorage && type != Host.Type.LocalSecondaryStorage) {
    return null;
  }
  String secUrl=ssHost.getStorageUrl();
  Answer answer;
  answer=_agentMgr.sendToSecStorage(ssHost,new ComputeChecksumCommand(secUrl,templatePath));
  if (answer.getResult()) {
    return answer.getDetails();
  }
  return null;
}","@Override public String getChecksum(Long hostId,String templatePath){
  HostVO ssHost=_hostDao.findById(hostId);
  Host.Type type=ssHost.getType();
  if (type != Host.Type.SecondaryStorage && type != Host.Type.LocalSecondaryStorage) {
    return null;
  }
  String secUrl=ssHost.getStorageUrl();
  Answer answer;
  answer=_agentMgr.sendToSecStorage(ssHost,new ComputeChecksumCommand(secUrl,templatePath));
  if (answer != null && answer.getResult()) {
    return answer.getDetails();
  }
  return null;
}"
89659,"@Override public void performDataMigration(Connection conn){
  createSecurityGroups(conn);
}","@Override public void performDataMigration(Connection conn){
  createSecurityGroups(conn);
  dropKeysIfExist(conn);
  dropTableColumnsIfExist(conn);
  addMissingKeys(conn);
  addMissingOvsAccount(conn);
}"
89660,"@Override public File[] getCleanupScripts(){
  return null;
}","@Override public File[] getCleanupScripts(){
  String file=Script.findScript(""String_Node_Str"",""String_Node_Str"");
  if (file == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  return new File[]{new File(file)};
}"
89661,"@Override public long getEntityOwnerId(){
  VirtualMachineTemplate iso=_responseGenerator.findTemplateById(getId());
  if (iso == null) {
    return Account.ACCOUNT_ID_SYSTEM;
  }
  return iso.getAccountId();
}","@Override public long getEntityOwnerId(){
  UserVm vm=_entityMgr.findById(UserVm.class,getVirtualMachineId());
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + getVirtualMachineId());
  }
  return vm.getAccountId();
}"
89662,"@Override public long getEntityOwnerId(){
  UserVm vm=_entityMgr.findById(UserVm.class,getVirtualMachineId());
  if (vm != null) {
    return vm.getAccountId();
  }
  return Account.ACCOUNT_ID_SYSTEM;
}","@Override public long getEntityOwnerId(){
  UserVm vm=_entityMgr.findById(UserVm.class,getVirtualMachineId());
  if (vm != null) {
    return vm.getAccountId();
  }
 else {
    throw new InvalidParameterValueException(""String_Node_Str"" + getVirtualMachineId());
  }
}"
89663,"@Override public long getEntityOwnerId(){
  Account account=UserContext.current().getCaller();
  if ((account == null) || isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      Account userAccount=_responseGenerator.findAccountByNameDomain(accountName,domainId);
      if (userAccount != null) {
        return userAccount.getId();
      }
    }
  }
  if (account != null) {
    return account.getId();
  }
  return Account.ACCOUNT_ID_SYSTEM;
}","@Override public long getEntityOwnerId(){
  Account account=UserContext.current().getCaller();
  if (isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      Account userAccount=_responseGenerator.findAccountByNameDomain(accountName,domainId);
      if (userAccount != null) {
        return userAccount.getId();
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"" + getAccountName() + ""String_Node_Str""+ getDomainId());
      }
    }
  }
  return account.getId();
}"
89664,"@Override public long getEntityOwnerId(){
  Account account=UserContext.current().getCaller();
  if ((account == null) || isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      Account userAccount=_responseGenerator.findAccountByNameDomain(accountName,domainId);
      if (userAccount != null) {
        return userAccount.getId();
      }
    }
  }
  if (account != null) {
    return account.getId();
  }
  return Account.ACCOUNT_ID_SYSTEM;
}","@Override public long getEntityOwnerId(){
  Account account=UserContext.current().getCaller();
  if (isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      Account userAccount=_responseGenerator.findAccountByNameDomain(accountName,domainId);
      if (userAccount != null) {
        return userAccount.getId();
      }
 else {
        throw new InvalidParameterValueException(""String_Node_Str"" + getAccountName() + ""String_Node_Str""+ getDomainId());
      }
    }
  }
  return account.getId();
}"
89665,"private Long accountAndUserValidation(Account account,Long userId,UserVmVO vmInstanceCheck,VMTemplateVO template,String msg) throws PermissionDeniedException {
  if (account != null) {
    if (!isAdmin(account.getType())) {
      if ((vmInstanceCheck != null) && (account.getId() != vmInstanceCheck.getAccountId())) {
        throw new PermissionDeniedException(msg + ""String_Node_Str"");
      }
      if ((template != null) && (!template.isPublicTemplate() && (account.getId() != template.getAccountId()) && (template.getTemplateType() != TemplateType.PERHOST))) {
        throw new PermissionDeniedException(msg + ""String_Node_Str"");
      }
    }
 else {
      if ((vmInstanceCheck != null) && !_domainDao.isChildDomain(account.getDomainId(),vmInstanceCheck.getDomainId())) {
        throw new PermissionDeniedException(msg + ""String_Node_Str"");
      }
      if (template != null) {
        Account templateOwner=_accountDao.findById(template.getAccountId());
        if ((templateOwner != null) && !_domainDao.isChildDomain(account.getDomainId(),templateOwner.getDomainId())) {
          throw new PermissionDeniedException(msg + ""String_Node_Str"");
        }
      }
    }
  }
  if (userId == null) {
    userId=new Long(1);
  }
  return userId;
}","private Long accountAndUserValidation(Account caller,Long userId,UserVmVO userVm,VMTemplateVO template,String msg) throws PermissionDeniedException {
  if (caller != null) {
    if (!isAdmin(caller.getType())) {
      if ((userVm != null) && (caller.getId() != userVm.getAccountId())) {
        throw new PermissionDeniedException(msg + ""String_Node_Str"");
      }
      if ((template != null) && (!template.isPublicTemplate() && (caller.getId() != template.getAccountId()) && (template.getTemplateType() != TemplateType.PERHOST))) {
        throw new PermissionDeniedException(msg + ""String_Node_Str"");
      }
    }
 else {
      if (userVm != null) {
        _accountMgr.checkAccess(caller,userVm);
      }
      if (template != null && !template.isPublicTemplate()) {
        Account templateOwner=_accountDao.findById(template.getAccountId());
        _accountMgr.checkAccess(caller,templateOwner);
      }
    }
  }
  return userId;
}"
89666,"@Override public boolean attachIso(AttachIsoCmd cmd){
  Account account=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  Long vmId=cmd.getVirtualMachineId();
  Long isoId=cmd.getId();
  UserVmVO vmInstanceCheck=_userVmDao.findById(vmId);
  if (vmInstanceCheck == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  VMTemplateVO iso=_tmpltDao.findById(isoId);
  if (iso == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + isoId);
  }
  State vmState=vmInstanceCheck.getState();
  if (vmState != State.Running && vmState != State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String errMsg=""String_Node_Str"" + isoId + ""String_Node_Str""+ vmId;
  userId=accountAndUserValidation(account,userId,vmInstanceCheck,iso,errMsg);
  if (""String_Node_Str"".equals(iso.getDisplayText()) && vmInstanceCheck.getHypervisorType() != Hypervisor.HypervisorType.XenServer) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmInstanceCheck.getHypervisorType());
  }
  return attachISOToVM(vmId,userId,isoId,true);
}","@Override public boolean attachIso(AttachIsoCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  Long vmId=cmd.getVirtualMachineId();
  Long isoId=cmd.getId();
  UserVmVO vm=_userVmDao.findById(vmId);
  if (vm == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  VMTemplateVO iso=_tmpltDao.findById(isoId);
  if (iso == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + isoId);
  }
  State vmState=vm.getState();
  if (vmState != State.Running && vmState != State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String errMsg=""String_Node_Str"" + isoId + ""String_Node_Str""+ vmId;
  userId=accountAndUserValidation(caller,userId,vm,iso,errMsg);
  if (""String_Node_Str"".equals(iso.getDisplayText()) && vm.getHypervisorType() != Hypervisor.HypervisorType.XenServer) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vm.getHypervisorType());
  }
  return attachISOToVM(vmId,userId,isoId,true);
}"
89667,"@Override public void handleSysTemplateDownload(HostVO host){
  List<HypervisorType> hypers=_hostDao.getAvailHypervisorInZone(host.getId(),host.getDataCenterId());
  HypervisorType hostHyper=host.getHypervisorType();
  if (hypers.contains(hostHyper)) {
    return;
  }
  Set<VMTemplateVO> toBeDownloaded=new HashSet<VMTemplateVO>();
  List<HostVO> ssHosts=_hostDao.listBy(Host.Type.SecondaryStorage,host.getDataCenterId());
  if (ssHosts == null || ssHosts.isEmpty()) {
    return;
  }
  HostVO sshost=ssHosts.get(0);
  List<VMTemplateVO> rtngTmplts=_templateDao.listAllSystemVMTemplates();
  List<VMTemplateVO> defaultBuiltin=_templateDao.listDefaultBuiltinTemplates();
  for (  VMTemplateVO rtngTmplt : rtngTmplts) {
    if (rtngTmplt.getHypervisorType() == hostHyper) {
      toBeDownloaded.add(rtngTmplt);
    }
  }
  for (  VMTemplateVO builtinTmplt : defaultBuiltin) {
    if (builtinTmplt.getHypervisorType() == hostHyper) {
      toBeDownloaded.add(builtinTmplt);
    }
  }
  for (  VMTemplateVO template : toBeDownloaded) {
    VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(sshost.getId(),template.getId());
    if (tmpltHost == null || tmpltHost.getDownloadState() != Status.DOWNLOADED) {
      downloadTemplateToStorage(template,sshost);
    }
  }
}","@Override public void handleSysTemplateDownload(HostVO host){
  List<HypervisorType> hypers=_hostDao.getAvailHypervisorInZone(host.getId(),host.getDataCenterId());
  HypervisorType hostHyper=host.getHypervisorType();
  if (hypers.contains(hostHyper)) {
    return;
  }
  Set<VMTemplateVO> toBeDownloaded=new HashSet<VMTemplateVO>();
  List<HostVO> ssHosts=_hostDao.listBy(Host.Type.SecondaryStorage,host.getDataCenterId());
  if (ssHosts == null || ssHosts.isEmpty()) {
    return;
  }
  HostVO sshost=ssHosts.get(0);
  List<VMTemplateVO> rtngTmplts=_templateDao.listAllSystemVMTemplates();
  List<VMTemplateVO> defaultBuiltin=_templateDao.listDefaultBuiltinTemplates();
  for (  VMTemplateVO rtngTmplt : rtngTmplts) {
    if (rtngTmplt.getHypervisorType() == hostHyper) {
      toBeDownloaded.add(rtngTmplt);
    }
  }
  for (  VMTemplateVO builtinTmplt : defaultBuiltin) {
    if (builtinTmplt.getHypervisorType() == hostHyper) {
      toBeDownloaded.add(builtinTmplt);
    }
  }
  for (  VMTemplateVO template : toBeDownloaded) {
    VMTemplateHostVO tmpltHost=_vmTemplateHostDao.findByHostTemplate(sshost.getId(),template.getId());
    if (tmpltHost == null || tmpltHost.getDownloadState() != Status.DOWNLOADED) {
      if (_vmTemplateZoneDao.findByZoneTemplate(sshost.getDataCenterId(),template.getId()) == null) {
        _templateDao.addTemplateToZone(template,sshost.getDataCenterId());
      }
      downloadTemplateToStorage(template,sshost);
    }
  }
}"
89668,"@Override public NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  DataCenter dc=_dcDao.findById(network.getDataCenterId());
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  if (nic == null) {
    nic=new NicProfile(ReservationStrategy.Create,null,null,null,null);
  }
 else   if (nic.getIp4Address() == null) {
    nic.setStrategy(ReservationStrategy.Start);
  }
 else {
    nic.setStrategy(ReservationStrategy.Create);
  }
  getIp(nic,dc,vm,network);
  if (network.isSecurityGroupEnabled() && nic.getIp4Address() != null) {
    nic.setStrategy(ReservationStrategy.Create);
  }
  return nic;
}","@Override public NicProfile allocate(Network network,NicProfile nic,VirtualMachineProfile<? extends VirtualMachine> vm) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  DataCenter dc=_dcDao.findById(network.getDataCenterId());
  NetworkOffering offering=_networkOfferingDao.findByIdIncludingRemoved(network.getNetworkOfferingId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  if (nic == null) {
    nic=new NicProfile(ReservationStrategy.Create,null,null,null,null);
  }
 else   if (nic.getIp4Address() == null) {
    nic.setStrategy(ReservationStrategy.Start);
  }
 else {
    nic.setStrategy(ReservationStrategy.Create);
  }
  getIp(nic,dc,vm,network);
  nic.setStrategy(ReservationStrategy.Create);
  return nic;
}"
89669,"@Override public void reserve(NicProfile nic,Network network,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  if (nic.getIp4Address() == null) {
    getIp(nic,dest.getDataCenter(),vm,network);
  }
}","@Override public void reserve(NicProfile nic,Network network,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  if (nic.getIp4Address() == null) {
    getIp(nic,dest.getDataCenter(),vm,network);
    nic.setStrategy(ReservationStrategy.Create);
  }
}"
89670,"@Override public List<AccountVO> searchForAccounts(ListAccountsCmd cmd){
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  Long accountId=cmd.getId();
  String accountName=null;
  Boolean isRecursive=cmd.isRecursive();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if (accountId != null && accountId == 1) {
    List<AccountVO> emptyList=new ArrayList<AccountVO>();
    return emptyList;
  }
  if ((account == null) || isAdmin(account.getType())) {
    accountName=cmd.getSearchName();
    if (domainId == null) {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
      isRecursive=true;
    }
 else     if (account != null) {
      if (!_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
    }
  }
 else {
    accountId=account.getId();
    accountName=account.getAccountName();
  }
  Filter searchFilter=new Filter(AccountVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object type=cmd.getAccountType();
  Object state=cmd.getState();
  Object isCleanupRequired=cmd.isCleanupRequired();
  Object keyword=cmd.getKeyword();
  SearchBuilder<AccountVO> sb=_accountDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.NEQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getNeedsCleanup(),SearchCriteria.Op.EQ);
  if ((accountId == null) && (domainId != null) && isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((accountId == null) && (domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<AccountVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<AccountVO> ssc=_accountDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (accountName != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + accountName + ""String_Node_Str"");
  }
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
    sc.setParameters(""String_Node_Str"",1L);
  }
 else {
    sc.setParameters(""String_Node_Str"",1L);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (isCleanupRequired != null) {
    sc.setParameters(""String_Node_Str"",isCleanupRequired);
  }
  return _accountDao.search(sc,searchFilter);
}","@Override public List<AccountVO> searchForAccounts(ListAccountsCmd cmd){
  Account caller=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  Long accountId=cmd.getId();
  String accountName=cmd.getSearchName();
  Boolean isRecursive=cmd.isRecursive();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if (accountId != null && accountId.longValue() == 1L) {
    List<AccountVO> emptyList=new ArrayList<AccountVO>();
    return emptyList;
  }
  if (isAdmin(caller.getType())) {
    if (domainId == null) {
      domainId=caller.getDomainId();
      isRecursive=true;
    }
 else {
      Domain domain=_domainDao.findById(domainId);
      if (domain == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      _accountMgr.checkAccess(caller,domain);
      if (accountName != null) {
        Account account=_accountDao.findActiveAccount(accountName,domainId);
        if (account == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        _accountMgr.checkAccess(caller,account);
      }
    }
  }
 else {
    accountId=caller.getId();
  }
  Filter searchFilter=new Filter(AccountVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object type=cmd.getAccountType();
  Object state=cmd.getState();
  Object isCleanupRequired=cmd.isCleanupRequired();
  Object keyword=cmd.getKeyword();
  SearchBuilder<AccountVO> sb=_accountDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getAccountName(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.NEQ);
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getNeedsCleanup(),SearchCriteria.Op.EQ);
  if ((domainId != null) && isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<AccountVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<AccountVO> ssc=_accountDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (accountName != null) {
    sc.setParameters(""String_Node_Str"",accountName);
  }
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
  if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
    sc.setParameters(""String_Node_Str"",1L);
  }
 else {
    sc.setParameters(""String_Node_Str"",1L);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  if (isCleanupRequired != null) {
    sc.setParameters(""String_Node_Str"",isCleanupRequired);
  }
  return _accountDao.search(sc,searchFilter);
}"
89671,"public void upgradeLoadBalancingRules(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    ArrayList<Object[]> lbs=new ArrayList<Object[]>();
    while (rs.next()) {
      Object[] lb=new Object[10];
      lb[0]=rs.getString(1);
      lb[1]=rs.getString(2);
      lb[2]=rs.getString(3);
      lb[3]=rs.getString(4);
      lb[4]=rs.getString(5);
      lb[5]=rs.getLong(6);
      lbs.add(lb);
    }
    rs.close();
    pstmt.close();
    if (!lbs.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + lbs.size() + ""String_Node_Str"");
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      long newLbId=0;
      while (rs.next()) {
        newLbId=rs.getLong(1);
      }
      rs.close();
      pstmt.close();
      for (      Object[] lb : lbs) {
        String name=(String)lb[0];
        String publicIp=(String)lb[1];
        String sourcePort=(String)lb[2];
        String destPort=(String)lb[3];
        String algorithm=(String)lb[4];
        Long originalLbId=(Long)lb[5];
        newLbId=newLbId + 1;
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setString(1,publicIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.warn(""String_Node_Str"" + publicIp + ""String_Node_Str""+ originalLbId+ ""String_Node_Str"");
          continue;
        }
        int ipAddressId=rs.getInt(1);
        long accountId=rs.getLong(2);
        long domainId=rs.getLong(3);
        long networkId=rs.getLong(4);
        rs.close();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setInt(2,ipAddressId);
        pstmt.setInt(3,Integer.valueOf(sourcePort));
        pstmt.setInt(4,Integer.valueOf(sourcePort));
        pstmt.setString(5,""String_Node_Str"");
        pstmt.setLong(6,accountId);
        pstmt.setLong(7,domainId);
        pstmt.setLong(8,networkId);
        pstmt.setString(9,UUID.randomUUID().toString());
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setString(2,name);
        pstmt.setInt(3,Integer.valueOf(destPort));
        pstmt.setInt(4,Integer.valueOf(destPort));
        pstmt.setString(5,algorithm);
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,originalLbId);
        rs=pstmt.executeQuery();
        ArrayList<Object[]> lbMaps=new ArrayList<Object[]>();
        while (rs.next()) {
          Object[] lbMap=new Object[10];
          lbMap[0]=rs.getLong(1);
          lbMaps.add(lbMap);
        }
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setLong(2,originalLbId);
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","public void upgradeLoadBalancingRules(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    ArrayList<Object[]> lbs=new ArrayList<Object[]>();
    while (rs.next()) {
      Object[] lb=new Object[10];
      lb[0]=rs.getString(1);
      lb[1]=rs.getString(2);
      lb[2]=rs.getString(3);
      lb[3]=rs.getString(4);
      lb[4]=rs.getString(5);
      lb[5]=rs.getLong(6);
      lbs.add(lb);
    }
    rs.close();
    pstmt.close();
    if (!lbs.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + lbs.size() + ""String_Node_Str"");
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      long newLbId=0;
      while (rs.next()) {
        newLbId=rs.getLong(1);
      }
      rs.close();
      pstmt.close();
      for (      Object[] lb : lbs) {
        String name=(String)lb[0];
        String publicIp=(String)lb[1];
        String sourcePort=(String)lb[2];
        String destPort=(String)lb[3];
        String algorithm=(String)lb[4];
        Long originalLbId=(Long)lb[5];
        newLbId=newLbId + 1;
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setString(1,publicIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.warn(""String_Node_Str"" + publicIp + ""String_Node_Str""+ originalLbId+ ""String_Node_Str"");
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,originalLbId);
          pstmt.executeUpdate();
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,originalLbId);
          pstmt.executeUpdate();
          continue;
        }
        int ipAddressId=rs.getInt(1);
        long accountId=rs.getLong(2);
        long domainId=rs.getLong(3);
        long networkId=rs.getLong(4);
        rs.close();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setInt(2,ipAddressId);
        pstmt.setInt(3,Integer.valueOf(sourcePort));
        pstmt.setInt(4,Integer.valueOf(sourcePort));
        pstmt.setString(5,""String_Node_Str"");
        pstmt.setLong(6,accountId);
        pstmt.setLong(7,domainId);
        pstmt.setLong(8,networkId);
        pstmt.setString(9,UUID.randomUUID().toString());
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setString(2,name);
        pstmt.setInt(3,Integer.valueOf(destPort));
        pstmt.setInt(4,Integer.valueOf(destPort));
        pstmt.setString(5,algorithm);
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,originalLbId);
        rs=pstmt.executeQuery();
        ArrayList<Object[]> lbMaps=new ArrayList<Object[]>();
        while (rs.next()) {
          Object[] lbMap=new Object[10];
          lbMap[0]=rs.getLong(1);
          lbMaps.add(lbMap);
        }
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,newLbId);
        pstmt.setLong(2,originalLbId);
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}"
89672,"protected void upgradeDomR(Connection conn,long dcId,long domrId,Long publicNetworkId,long guestNetworkId,long controlNetworkId,String zoneType) throws SQLException {
  s_logger.debug(""String_Node_Str"" + domrId);
  PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,domrId);
  ResultSet rs=pstmt.executeQuery();
  if (!rs.next()) {
    throw new CloudRuntimeException(""String_Node_Str"" + domrId);
  }
  long id=rs.getLong(1);
  String state=rs.getString(2);
  boolean running=state.equals(""String_Node_Str"") | state.equals(""String_Node_Str"") | state.equals(""String_Node_Str"");
  String privateMac=rs.getString(3);
  String privateIp=rs.getString(4);
  String privateNetmask=rs.getString(5);
  String publicMac=rs.getString(6);
  String publicIp=rs.getString(7);
  String publicNetmask=rs.getString(8);
  String guestMac=rs.getString(9);
  String guestIp=rs.getString(10);
  String guestNetmask=rs.getString(11);
  String vnet=rs.getString(12);
  String gateway=rs.getString(13);
  String type=rs.getString(14);
  rs.close();
  pstmt.close();
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setString(1,publicIp);
  rs=pstmt.executeQuery();
  String publicVlan=null;
  while (rs.next()) {
    publicVlan=rs.getString(1);
  }
  if (zoneType.equalsIgnoreCase(""String_Node_Str"")) {
    long controlNicId=insertNic(conn,controlNetworkId,domrId,running,privateMac,privateIp,privateNetmask,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",false,1,""String_Node_Str"",privateIp != null ? (domrId + privateIp) : null);
    if (privateIp != null) {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,controlNicId);
      pstmt.setString(2,privateIp);
      pstmt.setLong(3,dcId);
      pstmt.executeUpdate();
      pstmt.close();
    }
    insertNic(conn,guestNetworkId,domrId,running,guestMac,guestIp,guestNetmask,""String_Node_Str"",gateway,vnet,""String_Node_Str"",true,0,""String_Node_Str"",null);
  }
 else {
    insertNic(conn,publicNetworkId,domrId,running,publicMac,publicIp,publicNetmask,""String_Node_Str"",gateway,publicVlan,""String_Node_Str"",true,2,""String_Node_Str"",null);
    long controlNicId=insertNic(conn,controlNetworkId,domrId,running,privateMac,privateIp,privateNetmask,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",false,1,""String_Node_Str"",privateIp != null ? (domrId + privateIp) : null);
    if (privateIp != null) {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,controlNicId);
      pstmt.setString(2,privateIp);
      pstmt.setLong(3,dcId);
      pstmt.executeUpdate();
      pstmt.close();
    }
    insertNic(conn,guestNetworkId,domrId,running,guestMac,guestIp,guestNetmask,""String_Node_Str"",null,vnet,""String_Node_Str"",false,0,""String_Node_Str"",null);
  }
}","protected void upgradeDomR(Connection conn,long dcId,long domrId,Long publicNetworkId,long guestNetworkId,long controlNetworkId,String zoneType) throws SQLException {
  s_logger.debug(""String_Node_Str"" + domrId);
  PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,domrId);
  ResultSet rs=pstmt.executeQuery();
  if (!rs.next()) {
    throw new CloudRuntimeException(""String_Node_Str"" + domrId);
  }
  long id=rs.getLong(1);
  String state=rs.getString(2);
  boolean running=state.equals(""String_Node_Str"") | state.equals(""String_Node_Str"") | state.equals(""String_Node_Str"");
  String privateMac=rs.getString(3);
  String privateIp=rs.getString(4);
  String privateNetmask=rs.getString(5);
  String publicMac=rs.getString(6);
  String publicIp=rs.getString(7);
  String publicNetmask=rs.getString(8);
  String guestMac=rs.getString(9);
  String guestIp=rs.getString(10);
  String guestNetmask=rs.getString(11);
  String vnet=rs.getString(12);
  String gateway=rs.getString(13);
  String type=rs.getString(14);
  rs.close();
  pstmt.close();
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setString(1,publicIp);
  rs=pstmt.executeQuery();
  String publicVlan=null;
  while (rs.next()) {
    publicVlan=rs.getString(1);
  }
  if (zoneType.equalsIgnoreCase(""String_Node_Str"")) {
    long controlNicId=insertNic(conn,controlNetworkId,domrId,running,privateMac,privateIp,privateNetmask,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",false,1,""String_Node_Str"",privateIp != null ? (domrId + privateIp) : null);
    if (privateIp != null) {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,controlNicId);
      pstmt.setString(2,privateIp);
      pstmt.setLong(3,dcId);
      pstmt.executeUpdate();
      pstmt.close();
    }
    insertNic(conn,guestNetworkId,domrId,running,guestMac,guestIp,guestNetmask,""String_Node_Str"",gateway,vnet,""String_Node_Str"",true,0,""String_Node_Str"",null);
  }
 else   if (publicIp != null) {
    insertNic(conn,publicNetworkId,domrId,running,publicMac,publicIp,publicNetmask,""String_Node_Str"",gateway,publicVlan,""String_Node_Str"",true,2,""String_Node_Str"",null);
    long controlNicId=insertNic(conn,controlNetworkId,domrId,running,privateMac,privateIp,privateNetmask,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",false,1,""String_Node_Str"",privateIp != null ? (domrId + privateIp) : null);
    if (privateIp != null) {
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,controlNicId);
      pstmt.setString(2,privateIp);
      pstmt.setLong(3,dcId);
      pstmt.executeUpdate();
      pstmt.close();
    }
    insertNic(conn,guestNetworkId,domrId,running,guestMac,guestIp,guestNetmask,""String_Node_Str"",null,vnet,""String_Node_Str"",false,0,""String_Node_Str"",null);
  }
}"
89673,"private UsageEventVO convertSnapshotEvent(EventVO event,Connection conn) throws IOException, SQLException {
  Properties snapEventParams=new Properties();
  long snapId=-1L;
  long snapSize=-1L;
  Long zoneId=null;
  UsageEventVO usageEvent=null;
  snapEventParams.load(new StringReader(event.getParameters()));
  snapId=Long.parseLong(snapEventParams.getProperty(""String_Node_Str""));
  String snapshotName=snapEventParams.getProperty(""String_Node_Str"");
  String size=snapEventParams.getProperty(""String_Node_Str"");
  if (size != null) {
    snapSize=Long.parseLong(size);
  }
  String zoneString=snapEventParams.getProperty(""String_Node_Str"");
  if (zoneString != null) {
    zoneId=Long.parseLong(zoneString);
  }
  Long accountId=event.getAccountId();
  if (accountId.longValue() == 0L || zoneId == null) {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setLong(1,snapId);
    s_logger.debug(""String_Node_Str"" + pstmt);
    ResultSet rs=pstmt.executeQuery();
    if (rs.next()) {
      zoneId=rs.getLong(1);
      accountId=rs.getLong(2);
    }
    rs.close();
    pstmt.close();
  }
  if (EventTypes.EVENT_SNAPSHOT_CREATE.equals(event.getType())) {
    usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_CREATE,accountId,zoneId,snapId,snapshotName,null,null,snapSize);
  }
 else   if (EventTypes.EVENT_SNAPSHOT_DELETE.equals(event.getType())) {
    usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_DELETE,accountId,zoneId,snapId,snapshotName,null,null,0L);
  }
  return usageEvent;
}","private UsageEventVO convertSnapshotEvent(EventVO event,Connection conn) throws IOException, SQLException {
  Properties snapEventParams=new Properties();
  long snapId=-1L;
  long snapSize=-1L;
  Long zoneId=0L;
  UsageEventVO usageEvent=null;
  snapEventParams.load(new StringReader(event.getParameters()));
  snapId=Long.parseLong(snapEventParams.getProperty(""String_Node_Str""));
  String snapshotName=snapEventParams.getProperty(""String_Node_Str"");
  String size=snapEventParams.getProperty(""String_Node_Str"");
  if (size != null) {
    snapSize=Long.parseLong(size);
  }
  String zoneString=snapEventParams.getProperty(""String_Node_Str"");
  if (zoneString != null) {
    zoneId=Long.parseLong(zoneString);
  }
  Long accountId=event.getAccountId();
  if (accountId.longValue() == 0L || zoneId.longValue() == 0L) {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setLong(1,snapId);
    s_logger.debug(""String_Node_Str"" + pstmt);
    ResultSet rs=pstmt.executeQuery();
    if (rs.next()) {
      zoneId=rs.getLong(1);
      accountId=rs.getLong(2);
    }
    rs.close();
    pstmt.close();
  }
  if (EventTypes.EVENT_SNAPSHOT_CREATE.equals(event.getType())) {
    usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_CREATE,accountId,zoneId,snapId,snapshotName,null,null,snapSize);
  }
 else   if (EventTypes.EVENT_SNAPSHOT_DELETE.equals(event.getType())) {
    usageEvent=new UsageEventVO(EventTypes.EVENT_SNAPSHOT_DELETE,accountId,zoneId,snapId,snapshotName,null,null,0L);
  }
  return usageEvent;
}"
89674,"@Override public List<? extends Cluster> discoverCluster(AddClusterCmd cmd) throws IllegalArgumentException, DiscoveryException {
  Long dcId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  String clusterName=cmd.getClusterName();
  String url=cmd.getUrl();
  String username=cmd.getUsername();
  String password=cmd.getPassword();
  url=URLDecoder.decode(url);
  URI uri=null;
  DataCenterVO zone=_dcDao.findById(dcId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + dcId);
  }
  Account account=UserContext.current().getCaller();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + dcId);
  }
  if (podId != null) {
    if (_podDao.findById(podId) == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + podId);
    }
    HostPodVO pod=_podDao.findById(podId);
    if (!Long.valueOf(pod.getDataCenterId()).equals(dcId)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + podId + ""String_Node_Str""+ dcId);
    }
  }
  if (clusterName == null || clusterName.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cmd.getHypervisor() == null || cmd.getHypervisor().isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Hypervisor.HypervisorType hypervisorType=Hypervisor.HypervisorType.getType(cmd.getHypervisor());
  if (hypervisorType == null) {
    s_logger.error(""String_Node_Str"" + cmd.getHypervisor() + ""String_Node_Str"");
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getHypervisor() + ""String_Node_Str"");
  }
  Cluster.ClusterType clusterType=null;
  if (cmd.getClusterType() != null && !cmd.getClusterType().isEmpty()) {
    clusterType=Cluster.ClusterType.valueOf(cmd.getClusterType());
  }
  if (clusterType == null) {
    clusterType=Cluster.ClusterType.CloudManaged;
  }
  Grouping.AllocationState allocationState=null;
  if (cmd.getAllocationState() != null && !cmd.getAllocationState().isEmpty()) {
    try {
      allocationState=Grouping.AllocationState.valueOf(cmd.getAllocationState());
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getAllocationState() + ""String_Node_Str"");
    }
  }
  if (allocationState == null) {
    allocationState=Grouping.AllocationState.Enabled;
  }
  Discoverer discoverer=getMatchingDiscover(hypervisorType);
  if (discoverer == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getHypervisor());
  }
  List<ClusterVO> result=new ArrayList<ClusterVO>();
  long clusterId=0;
  ClusterVO cluster=new ClusterVO(dcId,podId,clusterName);
  cluster.setHypervisorType(cmd.getHypervisor());
  cluster.setClusterType(clusterType);
  cluster.setAllocationState(allocationState);
  try {
    cluster=_clusterDao.persist(cluster);
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"" + clusterName + ""String_Node_Str""+ podId+ ""String_Node_Str""+ dcId,e);
  }
  clusterId=cluster.getId();
  result.add(cluster);
  if (clusterType == Cluster.ClusterType.CloudManaged) {
    return result;
  }
  Map<String,String> details=new HashMap<String,String>();
  details.put(""String_Node_Str"",url);
  details.put(""String_Node_Str"",username);
  details.put(""String_Node_Str"",password);
  _clusterDetailsDao.persist(cluster.getId(),details);
  boolean success=false;
  try {
    try {
      uri=new URI(UriUtils.encodeURIComponent(url));
      if (uri.getScheme() == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + url + ""String_Node_Str"");
      }
 else       if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
        if (uri.getHost() == null || uri.getHost().equalsIgnoreCase(""String_Node_Str"") || uri.getPath() == null || uri.getPath().equalsIgnoreCase(""String_Node_Str"")) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
      }
    }
 catch (    URISyntaxException e) {
      throw new InvalidParameterValueException(url + ""String_Node_Str"");
    }
    List<HostVO> hosts=new ArrayList<HostVO>();
    Map<? extends ServerResource,Map<String,String>> resources=null;
    try {
      resources=discoverer.find(dcId,podId,clusterId,uri,username,password);
    }
 catch (    Exception e) {
      s_logger.info(""String_Node_Str"" + discoverer.getName());
    }
    if (resources != null) {
      for (      Map.Entry<? extends ServerResource,Map<String,String>> entry : resources.entrySet()) {
        ServerResource resource=entry.getKey();
        if (hypervisorType == Hypervisor.HypervisorType.Hyperv) {
          break;
        }
        AgentAttache attache=simulateStart(resource,entry.getValue(),true,null,null);
        if (attache != null) {
          hosts.add(_hostDao.findById(attache.getId()));
        }
        discoverer.postDiscovery(hosts,_nodeId);
      }
      s_logger.info(""String_Node_Str"" + discoverer.getName());
      success=true;
      return result;
    }
    s_logger.warn(""String_Node_Str"" + url);
    throw new DiscoveryException(""String_Node_Str"");
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
    throw new DiscoveryException(""String_Node_Str"");
  }
 finally {
    if (!success) {
      _clusterDetailsDao.deleteDetails(clusterId);
      _clusterDao.remove(clusterId);
    }
  }
}","@Override public List<? extends Cluster> discoverCluster(AddClusterCmd cmd) throws IllegalArgumentException, DiscoveryException {
  Long dcId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  String clusterName=cmd.getClusterName();
  String url=cmd.getUrl();
  String username=cmd.getUsername();
  String password=cmd.getPassword();
  if (url != null)   url=URLDecoder.decode(url);
  URI uri=null;
  DataCenterVO zone=_dcDao.findById(dcId);
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + dcId);
  }
  Account account=UserContext.current().getCaller();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + dcId);
  }
  if (podId != null) {
    if (_podDao.findById(podId) == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + podId);
    }
    HostPodVO pod=_podDao.findById(podId);
    if (!Long.valueOf(pod.getDataCenterId()).equals(dcId)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + podId + ""String_Node_Str""+ dcId);
    }
  }
  if (clusterName == null || clusterName.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cmd.getHypervisor() == null || cmd.getHypervisor().isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Hypervisor.HypervisorType hypervisorType=Hypervisor.HypervisorType.getType(cmd.getHypervisor());
  if (hypervisorType == null) {
    s_logger.error(""String_Node_Str"" + cmd.getHypervisor() + ""String_Node_Str"");
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getHypervisor() + ""String_Node_Str"");
  }
  Cluster.ClusterType clusterType=null;
  if (cmd.getClusterType() != null && !cmd.getClusterType().isEmpty()) {
    clusterType=Cluster.ClusterType.valueOf(cmd.getClusterType());
  }
  if (clusterType == null) {
    clusterType=Cluster.ClusterType.CloudManaged;
  }
  Grouping.AllocationState allocationState=null;
  if (cmd.getAllocationState() != null && !cmd.getAllocationState().isEmpty()) {
    try {
      allocationState=Grouping.AllocationState.valueOf(cmd.getAllocationState());
    }
 catch (    IllegalArgumentException ex) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getAllocationState() + ""String_Node_Str"");
    }
  }
  if (allocationState == null) {
    allocationState=Grouping.AllocationState.Enabled;
  }
  Discoverer discoverer=getMatchingDiscover(hypervisorType);
  if (discoverer == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getHypervisor());
  }
  List<ClusterVO> result=new ArrayList<ClusterVO>();
  long clusterId=0;
  ClusterVO cluster=new ClusterVO(dcId,podId,clusterName);
  cluster.setHypervisorType(cmd.getHypervisor());
  cluster.setClusterType(clusterType);
  cluster.setAllocationState(allocationState);
  try {
    cluster=_clusterDao.persist(cluster);
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"" + clusterName + ""String_Node_Str""+ podId+ ""String_Node_Str""+ dcId,e);
  }
  clusterId=cluster.getId();
  result.add(cluster);
  if (clusterType == Cluster.ClusterType.CloudManaged) {
    return result;
  }
  Map<String,String> details=new HashMap<String,String>();
  details.put(""String_Node_Str"",url);
  details.put(""String_Node_Str"",username);
  details.put(""String_Node_Str"",password);
  _clusterDetailsDao.persist(cluster.getId(),details);
  boolean success=false;
  try {
    try {
      uri=new URI(UriUtils.encodeURIComponent(url));
      if (uri.getScheme() == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + url + ""String_Node_Str"");
      }
 else       if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
        if (uri.getHost() == null || uri.getHost().equalsIgnoreCase(""String_Node_Str"") || uri.getPath() == null || uri.getPath().equalsIgnoreCase(""String_Node_Str"")) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
      }
    }
 catch (    URISyntaxException e) {
      throw new InvalidParameterValueException(url + ""String_Node_Str"");
    }
    List<HostVO> hosts=new ArrayList<HostVO>();
    Map<? extends ServerResource,Map<String,String>> resources=null;
    try {
      resources=discoverer.find(dcId,podId,clusterId,uri,username,password);
    }
 catch (    Exception e) {
      s_logger.info(""String_Node_Str"" + discoverer.getName());
    }
    if (resources != null) {
      for (      Map.Entry<? extends ServerResource,Map<String,String>> entry : resources.entrySet()) {
        ServerResource resource=entry.getKey();
        if (hypervisorType == Hypervisor.HypervisorType.Hyperv) {
          break;
        }
        AgentAttache attache=simulateStart(resource,entry.getValue(),true,null,null);
        if (attache != null) {
          hosts.add(_hostDao.findById(attache.getId()));
        }
        discoverer.postDiscovery(hosts,_nodeId);
      }
      s_logger.info(""String_Node_Str"" + discoverer.getName());
      success=true;
      return result;
    }
    s_logger.warn(""String_Node_Str"" + url);
    throw new DiscoveryException(""String_Node_Str"");
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
    throw new DiscoveryException(""String_Node_Str"");
  }
 finally {
    if (!success) {
      _clusterDetailsDao.deleteDetails(clusterId);
      _clusterDao.remove(clusterId);
    }
  }
}"
89675,"public DatabaseUpgradeChecker(){
  _dao=ComponentLocator.inject(VersionDaoImpl.class);
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade217to218(),new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to223(),new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to223(),new Upgrade222to224(),new Upgrade218to224DomainVlans()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to223(),new Upgrade222to224(),new Upgrade218to224DomainVlans()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade221to222(),new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224()});
}","public DatabaseUpgradeChecker(){
  _dao=ComponentLocator.inject(VersionDaoImpl.class);
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade217to218(),new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to224(),new Upgrade222to224(),new Upgrade218to224DomainVlans()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade221to222(),new UpgradeSnapshot223to224(),new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new UpgradeSnapshot223to224(),new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new UpgradeSnapshot223to224(),new Upgrade222to224()});
}"
89676,"@Override public Pair<AfterScanAction,Object> scanPool(Long pool){
  long dataCenterId=pool.longValue();
  ConsoleProxyLoadInfo proxyInfo=this._zoneProxyCountMap.get(dataCenterId);
  if (proxyInfo == null)   return new Pair<AfterScanAction,Object>(AfterScanAction.nop,null);
  ConsoleProxyLoadInfo vmInfo=this._zoneVmCountMap.get(dataCenterId);
  if (vmInfo == null)   vmInfo=new ConsoleProxyLoadInfo();
  if (!checkCapacity(proxyInfo,vmInfo)) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + proxyInfo.getName());
    return new Pair<AfterScanAction,Object>(AfterScanAction.expand,null);
  }
  return new Pair<AfterScanAction,Object>(AfterScanAction.nop,null);
}","@Override public Pair<AfterScanAction,Object> scanPool(Long pool){
  long dataCenterId=pool.longValue();
  ConsoleProxyLoadInfo proxyInfo=this._zoneProxyCountMap.get(dataCenterId);
  if (proxyInfo == null) {
    return new Pair<AfterScanAction,Object>(AfterScanAction.nop,null);
  }
  ConsoleProxyLoadInfo vmInfo=this._zoneVmCountMap.get(dataCenterId);
  if (vmInfo == null) {
    vmInfo=new ConsoleProxyLoadInfo();
  }
  if (!checkCapacity(proxyInfo,vmInfo)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + proxyInfo.getName());
    }
    return new Pair<AfterScanAction,Object>(AfterScanAction.expand,null);
  }
  return new Pair<AfterScanAction,Object>(AfterScanAction.nop,null);
}"
89677,"@Override public boolean isPoolReadyForScan(Long pool){
  long dataCenterId=pool.longValue();
  if (!isZoneReady(_zoneHostInfoMap,dataCenterId)) {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + dataCenterId + ""String_Node_Str"");
    return false;
  }
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + dataCenterId + ""String_Node_Str"");
  return true;
}","@Override public boolean isPoolReadyForScan(Long pool){
  long dataCenterId=pool.longValue();
  if (!isZoneReady(_zoneHostInfoMap,dataCenterId)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + dataCenterId + ""String_Node_Str"");
    }
    return false;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + dataCenterId + ""String_Node_Str"");
  }
  return true;
}"
89678,"private boolean reserveStandbyCapacity(){
  ConsoleProxyManagementState state=getManagementState();
  if (state == null || state != ConsoleProxyManagementState.Auto)   return false;
  return true;
}","private boolean reserveStandbyCapacity(){
  ConsoleProxyManagementState state=getManagementState();
  if (state == null || state != ConsoleProxyManagementState.Auto) {
    return false;
  }
  return true;
}"
89679,"@Override @DB public String uploadCertificate(UploadCustomCertificateCmd cmd){
  if (!_ksMgr.validateCertificate(cmd.getCertificate(),cmd.getPrivateKey(),cmd.getDomainSuffix()))   throw new InvalidParameterValueException(""String_Node_Str"");
  _ksMgr.saveCertificate(ConsoleProxyManager.CERTIFICATE_NAME,cmd.getCertificate(),cmd.getPrivateKey(),cmd.getDomainSuffix());
  _consoleProxyMgr.setManagementState(ConsoleProxyManagementState.ResetSuspending);
  return ""String_Node_Str"";
}","@Override @DB public String uploadCertificate(UploadCustomCertificateCmd cmd){
  if (!_ksMgr.validateCertificate(cmd.getCertificate(),cmd.getPrivateKey(),cmd.getDomainSuffix())) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  _ksMgr.saveCertificate(ConsoleProxyManager.CERTIFICATE_NAME,cmd.getCertificate(),cmd.getPrivateKey(),cmd.getDomainSuffix());
  _consoleProxyMgr.setManagementState(ConsoleProxyManagementState.ResetSuspending);
  return ""String_Node_Str"";
}"
89680,"@Override @SuppressWarnings(""String_Node_Str"") public StoragePoolVO createPool(CreateStoragePoolCmd cmd) throws ResourceInUseException, IllegalArgumentException, UnknownHostException, ResourceUnavailableException {
  Long clusterId=cmd.getClusterId();
  Long podId=cmd.getPodId();
  Map ds=cmd.getDetails();
  if (clusterId != null && podId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Map<String,String> details=new HashMap<String,String>();
  if (ds != null) {
    Collection detailsCollection=ds.values();
    Iterator it=detailsCollection.iterator();
    while (it.hasNext()) {
      HashMap d=(HashMap)it.next();
      Iterator it2=d.entrySet().iterator();
      while (it2.hasNext()) {
        Map.Entry entry=(Map.Entry)it2.next();
        details.put((String)entry.getKey(),(String)entry.getValue());
      }
    }
  }
  Long zoneId=cmd.getZoneId();
  DataCenterVO zone=_dcDao.findById(cmd.getZoneId());
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  Account account=UserContext.current().getCaller();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zoneId);
  }
  List<HostVO> allHosts=_hostDao.listBy(Host.Type.Routing,clusterId,podId,zoneId);
  if (allHosts.isEmpty()) {
    throw new ResourceUnavailableException(""String_Node_Str"" + clusterId,HostPodVO.class,podId);
  }
  URI uri=null;
  try {
    uri=new URI(cmd.getUrl());
    if (uri.getScheme() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getUrl() + ""String_Node_Str"");
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriHost=uri.getHost();
      String uriPath=uri.getPath();
      if (uriHost == null || uriPath == null || uriHost.trim().isEmpty() || uriPath.trim().isEmpty()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriPath=uri.getPath();
      if (uriPath == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new InvalidParameterValueException(cmd.getUrl() + ""String_Node_Str"");
  }
  String tags=cmd.getTags();
  if (tags != null) {
    String[] tokens=tags.split(""String_Node_Str"");
    for (    String tag : tokens) {
      tag=tag.trim();
      if (tag.length() == 0) {
        continue;
      }
      details.put(tag,""String_Node_Str"");
    }
  }
  String scheme=uri.getScheme();
  String storageHost=uri.getHost();
  String hostPath=uri.getPath();
  int port=uri.getPort();
  StoragePoolVO pool=null;
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + scheme + ""String_Node_Str""+ storageHost+ ""String_Node_Str""+ hostPath+ ""String_Node_Str""+ port);
  }
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.NetworkFilesystem,storageHost,port,hostPath);
    if (clusterId == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=0;
    }
    pool=new StoragePoolVO(StoragePoolType.Filesystem,""String_Node_Str"",0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.SharedMountPoint,storageHost,0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.PreSetup,storageHost,0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    String[] tokens=hostPath.split(""String_Node_Str"");
    int lun=NumbersUtil.parseInt(tokens[tokens.length - 1],-1);
    if (port == -1) {
      port=3260;
    }
    if (lun != -1) {
      if (clusterId == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      pool=new StoragePoolVO(StoragePoolType.IscsiLUN,storageHost,port,hostPath);
    }
 else {
      Enumeration<StoragePoolDiscoverer> en=_discoverers.enumeration();
      while (en.hasMoreElements()) {
        Map<StoragePoolVO,Map<String,String>> pools;
        try {
          pools=en.nextElement().find(cmd.getZoneId(),podId,uri,details);
        }
 catch (        DiscoveryException e) {
          throw new IllegalArgumentException(""String_Node_Str"" + uri,e);
        }
        if (pools != null) {
          Map.Entry<StoragePoolVO,Map<String,String>> entry=pools.entrySet().iterator().next();
          pool=entry.getKey();
          details=entry.getValue();
          break;
        }
      }
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.ISO,storageHost,port,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.VMFS,""String_Node_Str"" + hostPath,0,hostPath);
  }
 else {
    s_logger.warn(""String_Node_Str"" + uri);
    throw new IllegalArgumentException(""String_Node_Str"" + uri);
  }
  if (pool == null) {
    s_logger.warn(""String_Node_Str"" + uri);
    throw new IllegalArgumentException(""String_Node_Str"" + uri);
  }
  List<StoragePoolVO> pools=_storagePoolDao.listPoolByHostPath(storageHost,hostPath);
  if (!pools.isEmpty() && !scheme.equalsIgnoreCase(""String_Node_Str"")) {
    Long oldPodId=pools.get(0).getPodId();
    throw new ResourceInUseException(""String_Node_Str"" + uri + ""String_Node_Str""+ oldPodId+ ""String_Node_Str"",""String_Node_Str"",uri.toASCIIString());
  }
  long poolId=_storagePoolDao.getNextInSequence(Long.class,""String_Node_Str"");
  String uuid=null;
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=UUID.randomUUID().toString();
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=hostPath.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    uuid=UUID.nameUUIDFromBytes(new String(storageHost + hostPath).getBytes()).toString();
  }
  List<StoragePoolVO> spHandles=_storagePoolDao.findIfDuplicatePoolsExistByUUID(uuid);
  if ((spHandles != null) && (spHandles.size() > 0)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    throw new ResourceInUseException(""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + poolId + ""String_Node_Str""+ uuid+ ""String_Node_Str""+ zoneId+ ""String_Node_Str""+ podId+ ""String_Node_Str""+ cmd.getStoragePoolName());
  }
  pool.setId(poolId);
  pool.setUuid(uuid);
  pool.setDataCenterId(cmd.getZoneId());
  pool.setPodId(podId);
  pool.setName(cmd.getStoragePoolName());
  pool.setClusterId(clusterId);
  pool.setStatus(StoragePoolStatus.Up);
  pool=_storagePoolDao.persist(pool,details);
  boolean success=false;
  for (  HostVO h : allHosts) {
    success=createStoragePool(h.getId(),pool);
    if (success) {
      break;
    }
  }
  if (!success) {
    s_logger.warn(""String_Node_Str"" + pool + ""String_Node_Str""+ clusterId);
    _storagePoolDao.expunge(pool.getId());
    return null;
  }
  s_logger.debug(""String_Node_Str"");
  List<HostVO> poolHosts=new ArrayList<HostVO>();
  for (  HostVO h : allHosts) {
    try {
      addPoolToHost(h.getId(),pool);
      poolHosts.add(h);
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + h + ""String_Node_Str""+ pool,e);
    }
  }
  if (poolHosts.isEmpty()) {
    s_logger.warn(""String_Node_Str"" + pool + ""String_Node_Str""+ clusterId);
    _storagePoolDao.expunge(pool.getId());
    return null;
  }
 else {
    createCapacityEntry(pool);
  }
  _configMgr.updateConfiguration(UserContext.current().getCallerUserId(),""String_Node_Str"",""String_Node_Str"");
  return pool;
}","@Override @SuppressWarnings(""String_Node_Str"") public StoragePoolVO createPool(CreateStoragePoolCmd cmd) throws ResourceInUseException, IllegalArgumentException, UnknownHostException, ResourceUnavailableException {
  Long clusterId=cmd.getClusterId();
  Long podId=cmd.getPodId();
  Map ds=cmd.getDetails();
  if (clusterId != null && podId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Map<String,String> details=new HashMap<String,String>();
  if (ds != null) {
    Collection detailsCollection=ds.values();
    Iterator it=detailsCollection.iterator();
    while (it.hasNext()) {
      HashMap d=(HashMap)it.next();
      Iterator it2=d.entrySet().iterator();
      while (it2.hasNext()) {
        Map.Entry entry=(Map.Entry)it2.next();
        details.put((String)entry.getKey(),(String)entry.getValue());
      }
    }
  }
  Long zoneId=cmd.getZoneId();
  DataCenterVO zone=_dcDao.findById(cmd.getZoneId());
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  Account account=UserContext.current().getCaller();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zoneId);
  }
  List<HostVO> allHosts=_hostDao.listBy(Host.Type.Routing,clusterId,podId,zoneId);
  if (allHosts.isEmpty()) {
    throw new ResourceUnavailableException(""String_Node_Str"" + clusterId,HostPodVO.class,podId);
  }
  URI uri=null;
  try {
    uri=new URI(cmd.getUrl());
    if (uri.getScheme() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getUrl() + ""String_Node_Str"");
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriHost=uri.getHost();
      String uriPath=uri.getPath();
      if (uriHost == null || uriPath == null || uriHost.trim().isEmpty() || uriPath.trim().isEmpty()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriPath=uri.getPath();
      if (uriPath == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new InvalidParameterValueException(cmd.getUrl() + ""String_Node_Str"");
  }
  String tags=cmd.getTags();
  if (tags != null) {
    String[] tokens=tags.split(""String_Node_Str"");
    for (    String tag : tokens) {
      tag=tag.trim();
      if (tag.length() == 0) {
        continue;
      }
      details.put(tag,""String_Node_Str"");
    }
  }
  String scheme=uri.getScheme();
  String storageHost=uri.getHost();
  String hostPath=uri.getPath();
  int port=uri.getPort();
  StoragePoolVO pool=null;
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + scheme + ""String_Node_Str""+ storageHost+ ""String_Node_Str""+ hostPath+ ""String_Node_Str""+ port);
  }
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.NetworkFilesystem,storageHost,port,hostPath);
    if (clusterId == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=0;
    }
    pool=new StoragePoolVO(StoragePoolType.Filesystem,""String_Node_Str"",0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.SharedMountPoint,storageHost,0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.PreSetup,storageHost,0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    String[] tokens=hostPath.split(""String_Node_Str"");
    int lun=NumbersUtil.parseInt(tokens[tokens.length - 1],-1);
    if (port == -1) {
      port=3260;
    }
    if (lun != -1) {
      if (clusterId == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      pool=new StoragePoolVO(StoragePoolType.IscsiLUN,storageHost,port,hostPath);
    }
 else {
      Enumeration<StoragePoolDiscoverer> en=_discoverers.enumeration();
      while (en.hasMoreElements()) {
        Map<StoragePoolVO,Map<String,String>> pools;
        try {
          pools=en.nextElement().find(cmd.getZoneId(),podId,uri,details);
        }
 catch (        DiscoveryException e) {
          throw new IllegalArgumentException(""String_Node_Str"" + uri,e);
        }
        if (pools != null) {
          Map.Entry<StoragePoolVO,Map<String,String>> entry=pools.entrySet().iterator().next();
          pool=entry.getKey();
          details=entry.getValue();
          break;
        }
      }
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.ISO,storageHost,port,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.VMFS,""String_Node_Str"" + hostPath,0,hostPath);
  }
 else {
    s_logger.warn(""String_Node_Str"" + uri);
    throw new IllegalArgumentException(""String_Node_Str"" + uri);
  }
  if (pool == null) {
    s_logger.warn(""String_Node_Str"" + uri);
    throw new IllegalArgumentException(""String_Node_Str"" + uri);
  }
  List<StoragePoolVO> pools=_storagePoolDao.listPoolByHostPath(storageHost,hostPath);
  if (!pools.isEmpty() && !scheme.equalsIgnoreCase(""String_Node_Str"")) {
    Long oldPodId=pools.get(0).getPodId();
    throw new ResourceInUseException(""String_Node_Str"" + uri + ""String_Node_Str""+ oldPodId+ ""String_Node_Str"",""String_Node_Str"",uri.toASCIIString());
  }
  long poolId=_storagePoolDao.getNextInSequence(Long.class,""String_Node_Str"");
  String uuid=null;
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=UUID.randomUUID().toString();
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=hostPath.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    uuid=UUID.nameUUIDFromBytes(new String(storageHost + hostPath).getBytes()).toString();
  }
  List<StoragePoolVO> spHandles=_storagePoolDao.findIfDuplicatePoolsExistByUUID(uuid);
  if ((spHandles != null) && (spHandles.size() > 0)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    throw new ResourceInUseException(""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + poolId + ""String_Node_Str""+ uuid+ ""String_Node_Str""+ zoneId+ ""String_Node_Str""+ podId+ ""String_Node_Str""+ cmd.getStoragePoolName());
  }
  pool.setId(poolId);
  pool.setUuid(uuid);
  pool.setDataCenterId(cmd.getZoneId());
  pool.setPodId(podId);
  pool.setName(cmd.getStoragePoolName());
  pool.setClusterId(clusterId);
  pool.setStatus(StoragePoolStatus.Up);
  pool=_storagePoolDao.persist(pool,details);
  boolean success=false;
  for (  HostVO h : allHosts) {
    success=createStoragePool(h.getId(),pool);
    if (success) {
      break;
    }
  }
  if (!success) {
    s_logger.warn(""String_Node_Str"" + pool + ""String_Node_Str""+ clusterId);
    _storagePoolDao.expunge(pool.getId());
    return null;
  }
  s_logger.debug(""String_Node_Str"");
  List<HostVO> poolHosts=new ArrayList<HostVO>();
  for (  HostVO h : allHosts) {
    try {
      connectHostToSharedPool(h.getId(),pool);
      poolHosts.add(h);
    }
 catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + h + ""String_Node_Str""+ pool,e);
    }
  }
  if (poolHosts.isEmpty()) {
    s_logger.warn(""String_Node_Str"" + pool + ""String_Node_Str""+ clusterId);
    _storagePoolDao.expunge(pool.getId());
    return null;
  }
 else {
    createCapacityEntry(pool);
  }
  _configMgr.updateConfiguration(UserContext.current().getCallerUserId(),""String_Node_Str"",""String_Node_Str"");
  return pool;
}"
89681,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String overProvisioningFactorStr=configs.get(""String_Node_Str"");
  if (overProvisioningFactorStr != null) {
    _overProvisioningFactor=Float.parseFloat(overProvisioningFactorStr);
  }
  _retry=NumbersUtil.parseInt(configs.get(Config.StartRetry.key()),10);
  _pingInterval=NumbersUtil.parseInt(configs.get(""String_Node_Str""),60);
  _hostRetry=NumbersUtil.parseInt(configs.get(""String_Node_Str""),2);
  _snapshotTimeout=NumbersUtil.parseInt(Config.CmdsWait.key(),2 * 60 * 60* 1000);
  _storagePoolAcquisitionWaitSeconds=NumbersUtil.parseInt(configs.get(""String_Node_Str""),1800);
  s_logger.info(""String_Node_Str"" + _storagePoolAcquisitionWaitSeconds + ""String_Node_Str"");
  _agentMgr.registerForHostEvents(new StoragePoolMonitor(this,_hostDao,_storagePoolDao),true,false,true);
  String storageCleanupEnabled=configs.get(""String_Node_Str"");
  _storageCleanupEnabled=(storageCleanupEnabled == null) ? true : Boolean.parseBoolean(storageCleanupEnabled);
  String time=configs.get(""String_Node_Str"");
  _storageCleanupInterval=NumbersUtil.parseInt(time,86400);
  String workers=configs.get(""String_Node_Str"");
  int wrks=NumbersUtil.parseInt(workers,10);
  _executor=Executors.newScheduledThreadPool(wrks,new NamedThreadFactory(""String_Node_Str""));
  boolean localStorage=Boolean.parseBoolean(configs.get(Config.UseLocalStorage.key()));
  if (localStorage) {
    _agentMgr.registerForHostEvents(ComponentLocator.inject(LocalStoragePoolListener.class),true,false,false);
  }
  String maxVolumeSizeInGbString=configDao.getValue(""String_Node_Str"");
  _maxVolumeSizeInGb=NumbersUtil.parseInt(maxVolumeSizeInGbString,2000);
  HostTemplateStatesSearch=_vmTemplateHostDao.createSearchBuilder();
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getTemplateId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> HostSearch=_hostDao.createSearchBuilder();
  HostSearch.and(""String_Node_Str"",HostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.join(""String_Node_Str"",HostSearch,HostSearch.entity().getId(),HostTemplateStatesSearch.entity().getHostId(),JoinBuilder.JoinType.INNER);
  HostSearch.done();
  HostTemplateStatesSearch.done();
  _serverId=((ManagementServer)ComponentLocator.getComponent(ManagementServer.Name)).getId();
  UpHostsInPoolSearch=_storagePoolHostDao.createSearchBuilder(Long.class);
  UpHostsInPoolSearch.selectField(UpHostsInPoolSearch.entity().getHostId());
  SearchBuilder<HostVO> hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getStatus(),Op.EQ);
  UpHostsInPoolSearch.join(""String_Node_Str"",hostSearch,hostSearch.entity().getId(),UpHostsInPoolSearch.entity().getHostId(),JoinType.INNER);
  UpHostsInPoolSearch.and(""String_Node_Str"",UpHostsInPoolSearch.entity().getPoolId(),Op.EQ);
  UpHostsInPoolSearch.done();
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String overProvisioningFactorStr=configs.get(""String_Node_Str"");
  if (overProvisioningFactorStr != null) {
    _overProvisioningFactor=Float.parseFloat(overProvisioningFactorStr);
  }
  _retry=NumbersUtil.parseInt(configs.get(Config.StartRetry.key()),10);
  _pingInterval=NumbersUtil.parseInt(configs.get(""String_Node_Str""),60);
  _hostRetry=NumbersUtil.parseInt(configs.get(""String_Node_Str""),2);
  _snapshotTimeout=NumbersUtil.parseInt(Config.CmdsWait.key(),2 * 60 * 60* 1000);
  _storagePoolAcquisitionWaitSeconds=NumbersUtil.parseInt(configs.get(""String_Node_Str""),1800);
  s_logger.info(""String_Node_Str"" + _storagePoolAcquisitionWaitSeconds + ""String_Node_Str"");
  _agentMgr.registerForHostEvents(new StoragePoolMonitor(this,_storagePoolDao),true,false,true);
  String storageCleanupEnabled=configs.get(""String_Node_Str"");
  _storageCleanupEnabled=(storageCleanupEnabled == null) ? true : Boolean.parseBoolean(storageCleanupEnabled);
  String time=configs.get(""String_Node_Str"");
  _storageCleanupInterval=NumbersUtil.parseInt(time,86400);
  String workers=configs.get(""String_Node_Str"");
  int wrks=NumbersUtil.parseInt(workers,10);
  _executor=Executors.newScheduledThreadPool(wrks,new NamedThreadFactory(""String_Node_Str""));
  boolean localStorage=Boolean.parseBoolean(configs.get(Config.UseLocalStorage.key()));
  if (localStorage) {
    _agentMgr.registerForHostEvents(ComponentLocator.inject(LocalStoragePoolListener.class),true,false,false);
  }
  String maxVolumeSizeInGbString=configDao.getValue(""String_Node_Str"");
  _maxVolumeSizeInGb=NumbersUtil.parseInt(maxVolumeSizeInGbString,2000);
  HostTemplateStatesSearch=_vmTemplateHostDao.createSearchBuilder();
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getTemplateId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> HostSearch=_hostDao.createSearchBuilder();
  HostSearch.and(""String_Node_Str"",HostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.join(""String_Node_Str"",HostSearch,HostSearch.entity().getId(),HostTemplateStatesSearch.entity().getHostId(),JoinBuilder.JoinType.INNER);
  HostSearch.done();
  HostTemplateStatesSearch.done();
  _serverId=((ManagementServer)ComponentLocator.getComponent(ManagementServer.Name)).getId();
  UpHostsInPoolSearch=_storagePoolHostDao.createSearchBuilder(Long.class);
  UpHostsInPoolSearch.selectField(UpHostsInPoolSearch.entity().getHostId());
  SearchBuilder<HostVO> hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getStatus(),Op.EQ);
  UpHostsInPoolSearch.join(""String_Node_Str"",hostSearch,hostSearch.entity().getId(),UpHostsInPoolSearch.entity().getHostId(),JoinType.INNER);
  UpHostsInPoolSearch.and(""String_Node_Str"",UpHostsInPoolSearch.entity().getPoolId(),Op.EQ);
  UpHostsInPoolSearch.done();
  return true;
}"
89682,"public StoragePoolMonitor(StorageManager mgr,HostDao hostDao,StoragePoolDao poolDao){
  this._storageManager=mgr;
  this._hostDao=hostDao;
  this._poolDao=poolDao;
}","public StoragePoolMonitor(StorageManagerImpl mgr,StoragePoolDao poolDao){
  this._storageManager=mgr;
  this._poolDao=poolDao;
}"
89683,"@Override public void processConnect(HostVO host,StartupCommand cmd) throws ConnectionException {
  if (cmd instanceof StartupRoutingCommand) {
    StartupRoutingCommand scCmd=(StartupRoutingCommand)cmd;
    if (scCmd.getHypervisorType() == HypervisorType.XenServer || scCmd.getHypervisorType() == HypervisorType.KVM || scCmd.getHypervisorType() == HypervisorType.VMware) {
      List<StoragePoolVO> pools=_poolDao.listBy(host.getDataCenterId(),host.getPodId(),host.getClusterId());
      for (      StoragePoolVO pool : pools) {
        Long hostId=host.getId();
        s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
        try {
          _storageManager.addPoolToHost(hostId,pool);
          _storageManager.createCapacityEntry(pool);
        }
 catch (        Exception e) {
          throw new ConnectionException(true,""String_Node_Str"" + pool,e);
        }
      }
    }
  }
}","@Override public void processConnect(HostVO host,StartupCommand cmd) throws ConnectionException {
  if (cmd instanceof StartupRoutingCommand) {
    StartupRoutingCommand scCmd=(StartupRoutingCommand)cmd;
    if (scCmd.getHypervisorType() == HypervisorType.XenServer || scCmd.getHypervisorType() == HypervisorType.KVM || scCmd.getHypervisorType() == HypervisorType.VMware) {
      List<StoragePoolVO> pools=_poolDao.listBy(host.getDataCenterId(),host.getPodId(),host.getClusterId());
      for (      StoragePoolVO pool : pools) {
        if (!pool.getPoolType().isShared()) {
          continue;
        }
        Long hostId=host.getId();
        s_logger.debug(""String_Node_Str"" + hostId + ""String_Node_Str"");
        try {
          _storageManager.connectHostToSharedPool(hostId,pool);
          _storageManager.createCapacityEntry(pool);
        }
 catch (        Exception e) {
          throw new ConnectionException(true,""String_Node_Str"" + pool,e);
        }
      }
    }
  }
}"
89684,"public static void main(String[] args){
  String newFile=null;
  String oldFile=null;
  String dirName=""String_Node_Str"";
  LinkedHashMap<String,Command> commands=new LinkedHashMap<String,Command>();
  LinkedHashMap<String,Command> oldCommands=new LinkedHashMap<String,Command>();
  ArrayList<Command> addedCommands=new ArrayList<Command>();
  ArrayList<Command> removedCommands=new ArrayList<Command>();
  HashMap<String,Command> stableCommands=new HashMap<String,Command>();
  XStream xs=new XStream(new DomDriver());
  xs.alias(""String_Node_Str"",Command.class);
  xs.alias(""String_Node_Str"",Argument.class);
  List<String> argsList=Arrays.asList(args);
  Iterator<String> iter=argsList.iterator();
  while (iter.hasNext()) {
    String arg=iter.next();
    if (arg.equals(""String_Node_Str"")) {
      newFile=iter.next();
    }
    if (arg.equals(""String_Node_Str"")) {
      oldFile=iter.next();
    }
    if (arg.equals(""String_Node_Str"")) {
      dirName=iter.next();
    }
  }
  try {
    try {
      ObjectInputStream inOld=xs.createObjectInputStream(new FileReader(oldFile));
      while (true) {
        Command c1=(Command)inOld.readObject();
        oldCommands.put(c1.getName(),c1);
      }
    }
 catch (    EOFException ex) {
    }
    try {
      ObjectInputStream inNew=xs.createObjectInputStream(new FileReader(newFile));
      while (true) {
        Command c=(Command)inNew.readObject();
        commands.put(c.getName(),c);
      }
    }
 catch (    EOFException ex) {
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  for (  String key : commands.keySet()) {
    if (!oldCommands.containsKey(key)) {
      addedCommands.add(commands.get(key));
    }
 else {
      stableCommands.put(commands.get(key).getName(),commands.get(key));
    }
  }
  for (  String key : oldCommands.keySet()) {
    if (!commands.containsKey(key)) {
      removedCommands.add(oldCommands.get(key));
      if (stableCommands.get(key) != null) {
        stableCommands.remove(key);
      }
    }
  }
  try {
    FileWriter fstream=new FileWriter(dirName + ""String_Node_Str"");
    BufferedWriter out=new BufferedWriter(fstream);
    out.write(""String_Node_Str"");
    for (    Command c : addedCommands) {
      if (c.getDescription() != null && !c.getDescription().isEmpty()) {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str""+ c.getDescription()+ ""String_Node_Str"");
      }
 else {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
      }
    }
    out.write(""String_Node_Str"");
    for (    Command c : removedCommands) {
      if (c.getDescription() != null && !c.getDescription().isEmpty()) {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str""+ c.getDescription()+ ""String_Node_Str"");
      }
 else {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
      }
    }
    out.write(""String_Node_Str"");
    for (    String key : stableCommands.keySet()) {
      if (commands.get(key).isAsync() != oldCommands.get(key).isAsync()) {
        String type=""String_Node_Str"";
        if (commands.get(key).isAsync()) {
          type=""String_Node_Str"";
        }
        out.write(""String_Node_Str"" + stableCommands.get(key).getName() + ""String_Node_Str""+ type);
      }
    }
    out.write(""String_Node_Str"");
    for (    String key : stableCommands.keySet()) {
      ArrayList<Argument> newReqArgs=new ArrayList<Argument>();
      ArrayList<Argument> removedReqArgs=new ArrayList<Argument>();
      HashMap<String,Argument> stableReqArgs=new HashMap<String,Argument>();
      ArrayList<Argument> newRespArgs=new ArrayList<Argument>();
      ArrayList<Argument> removedRespArgs=new ArrayList<Argument>();
      HashMap<String,Argument> stableRespArgs=new HashMap<String,Argument>();
      Command newCommand=commands.get(key);
      Command oldCommand=oldCommands.get(key);
      for (      Argument arg : newCommand.getRequest()) {
        if (oldCommand.getReqArgByName(arg.getName()) == null) {
          newReqArgs.add(arg);
        }
 else {
          stableReqArgs.put(arg.getName(),arg);
        }
      }
      for (      Argument arg : oldCommand.getRequest()) {
        if (newCommand.getReqArgByName(arg.getName()) == null) {
          removedReqArgs.add(arg);
          if (stableReqArgs.get(arg.getName()) != null) {
            stableReqArgs.remove(arg.getName());
          }
        }
      }
      for (Iterator<String> i=stableReqArgs.keySet().iterator(); i.hasNext(); ) {
        String argName=i.next();
        if (oldCommand.getReqArgByName(argName).isRequired() == newCommand.getReqArgByName(argName).isRequired()) {
          i.remove();
        }
      }
      if (newCommand.getResponse() != null && oldCommand.getResponse() != null) {
        for (        Argument arg : newCommand.getResponse()) {
          if (oldCommand.getResArgByName(arg.getName()) == null) {
            newRespArgs.add(arg);
          }
        }
        for (        Argument arg : oldCommand.getResponse()) {
          if (newCommand.getResArgByName(arg.getName()) == null) {
            removedRespArgs.add(arg);
          }
        }
      }
      if (newReqArgs.size() != 0 || newRespArgs.size() != 0 || removedReqArgs.size() != 0 || removedRespArgs.size() != 0 || stableReqArgs.size() != 0 || stableReqArgs.size() != 0) {
        StringBuffer commandInfo=new StringBuffer();
        commandInfo.append(""String_Node_Str"" + key);
        out.write(commandInfo.toString());
        out.write(""String_Node_Str"");
        if (newReqArgs.size() != 0 || removedReqArgs.size() != 0) {
          StringBuffer request=new StringBuffer();
          request.append(""String_Node_Str"");
          out.write(request.toString());
          if (newReqArgs.size() != 0) {
            StringBuffer newParameters=new StringBuffer();
            newParameters.append(""String_Node_Str"");
            for (            Argument newArg : newReqArgs) {
              String isRequiredParam=""String_Node_Str"";
              if (newArg.isRequired()) {
                isRequiredParam=""String_Node_Str"";
              }
              newParameters.append(newArg.getName() + ""String_Node_Str"" + isRequiredParam+ ""String_Node_Str"");
            }
            newParameters.delete(newParameters.length() - 2,newParameters.length() - 1);
            out.write(newParameters.toString());
            out.write(""String_Node_Str"");
          }
          if (removedReqArgs.size() != 0) {
            StringBuffer removedParameters=new StringBuffer();
            removedParameters.append(""String_Node_Str"");
            for (            Argument removedArg : removedReqArgs) {
              removedParameters.append(removedArg.getName() + ""String_Node_Str"");
            }
            removedParameters.delete(removedParameters.length() - 2,removedParameters.length() - 1);
            out.write(removedParameters.toString());
            out.write(""String_Node_Str"");
          }
          if (stableReqArgs.size() != 0) {
            StringBuffer changedParameters=new StringBuffer();
            changedParameters.append(""String_Node_Str"");
            for (            Argument stableArg : stableReqArgs.values()) {
              String newRequired=""String_Node_Str"";
              String oldRequired=""String_Node_Str"";
              if (oldCommand.getReqArgByName(stableArg.getName()).isRequired() == true)               oldRequired=""String_Node_Str"";
              if (newCommand.getReqArgByName(stableArg.getName()).isRequired() == true)               newRequired=""String_Node_Str"";
              changedParameters.append(stableArg.getName() + ""String_Node_Str"" + oldRequired+ ""String_Node_Str""+ newRequired+ ""String_Node_Str"");
            }
            changedParameters.delete(changedParameters.length() - 2,changedParameters.length() - 1);
            out.write(changedParameters.toString());
            out.write(""String_Node_Str"");
          }
        }
        if (newRespArgs.size() != 0 || removedRespArgs.size() != 0) {
          StringBuffer changedResponseParams=new StringBuffer();
          changedResponseParams.append(""String_Node_Str"");
          out.write(changedResponseParams.toString());
          if (newRespArgs.size() != 0) {
            StringBuffer newRespParams=new StringBuffer();
            newRespParams.append(""String_Node_Str"");
            for (            Argument newArg : newRespArgs) {
              newRespParams.append(newArg.getName() + ""String_Node_Str"");
            }
            newRespParams.delete(newRespParams.length() - 2,newRespParams.length() - 1);
            out.write(newRespParams.toString());
            out.write(""String_Node_Str"");
          }
          if (removedRespArgs.size() != 0) {
            StringBuffer removedRespParams=new StringBuffer();
            removedRespParams.append(""String_Node_Str"");
            for (            Argument removedArg : removedRespArgs) {
              removedRespParams.append(removedArg.getName() + ""String_Node_Str"");
            }
            removedRespParams.delete(removedRespParams.length() - 2,removedRespParams.length() - 1);
            out.write(removedRespParams.toString());
            out.write(""String_Node_Str"");
          }
        }
      }
    }
    out.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public static void main(String[] args){
  String newFile=null;
  String oldFile=null;
  String dirName=""String_Node_Str"";
  LinkedHashMap<String,Command> commands=new LinkedHashMap<String,Command>();
  LinkedHashMap<String,Command> oldCommands=new LinkedHashMap<String,Command>();
  ArrayList<Command> addedCommands=new ArrayList<Command>();
  ArrayList<Command> removedCommands=new ArrayList<Command>();
  HashMap<String,Command> stableCommands=new HashMap<String,Command>();
  XStream xs=new XStream(new DomDriver());
  xs.alias(""String_Node_Str"",Command.class);
  xs.alias(""String_Node_Str"",Argument.class);
  List<String> argsList=Arrays.asList(args);
  Iterator<String> iter=argsList.iterator();
  while (iter.hasNext()) {
    String arg=iter.next();
    if (arg.equals(""String_Node_Str"")) {
      newFile=iter.next();
    }
    if (arg.equals(""String_Node_Str"")) {
      oldFile=iter.next();
    }
    if (arg.equals(""String_Node_Str"")) {
      dirName=iter.next();
    }
  }
  try {
    try {
      ObjectInputStream inOld=xs.createObjectInputStream(new FileReader(oldFile));
      while (true) {
        Command c1=(Command)inOld.readObject();
        oldCommands.put(c1.getName(),c1);
      }
    }
 catch (    EOFException ex) {
    }
    try {
      ObjectInputStream inNew=xs.createObjectInputStream(new FileReader(newFile));
      while (true) {
        Command c=(Command)inNew.readObject();
        commands.put(c.getName(),c);
      }
    }
 catch (    EOFException ex) {
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
  for (  String key : commands.keySet()) {
    if (!oldCommands.containsKey(key)) {
      addedCommands.add(commands.get(key));
    }
 else {
      stableCommands.put(commands.get(key).getName(),commands.get(key));
    }
  }
  for (  String key : oldCommands.keySet()) {
    if (!commands.containsKey(key)) {
      removedCommands.add(oldCommands.get(key));
      if (stableCommands.get(key) != null) {
        stableCommands.remove(key);
      }
    }
  }
  try {
    FileWriter fstream=new FileWriter(dirName + ""String_Node_Str"");
    BufferedWriter out=new BufferedWriter(fstream);
    out.write(""String_Node_Str"");
    for (    Command c : addedCommands) {
      if (c.getDescription() != null && !c.getDescription().isEmpty()) {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str""+ c.getDescription()+ ""String_Node_Str"");
      }
 else {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
      }
    }
    out.write(""String_Node_Str"");
    for (    Command c : removedCommands) {
      if (c.getDescription() != null && !c.getDescription().isEmpty()) {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str""+ c.getDescription()+ ""String_Node_Str"");
      }
 else {
        out.write(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
      }
    }
    out.write(""String_Node_Str"");
    for (    String key : stableCommands.keySet()) {
      if (commands.get(key).isAsync() != oldCommands.get(key).isAsync()) {
        String type=""String_Node_Str"";
        if (commands.get(key).isAsync()) {
          type=""String_Node_Str"";
        }
        out.write(""String_Node_Str"" + stableCommands.get(key).getName() + ""String_Node_Str""+ type);
      }
    }
    out.write(""String_Node_Str"");
    for (    String key : stableCommands.keySet()) {
      ArrayList<Argument> newReqArgs=new ArrayList<Argument>();
      ArrayList<Argument> removedReqArgs=new ArrayList<Argument>();
      HashMap<String,Argument> stableReqArgs=new HashMap<String,Argument>();
      ArrayList<Argument> newRespArgs=new ArrayList<Argument>();
      ArrayList<Argument> removedRespArgs=new ArrayList<Argument>();
      Command newCommand=commands.get(key);
      Command oldCommand=oldCommands.get(key);
      for (      Argument arg : newCommand.getRequest()) {
        if (oldCommand.getReqArgByName(arg.getName()) == null) {
          if (!(arg.getName().equals(""String_Node_Str"") || arg.getName().equals(""String_Node_Str"") || arg.getName().equals(""String_Node_Str""))) {
            newReqArgs.add(arg);
          }
        }
 else {
          stableReqArgs.put(arg.getName(),arg);
        }
      }
      for (      Argument arg : oldCommand.getRequest()) {
        if (newCommand.getReqArgByName(arg.getName()) == null) {
          removedReqArgs.add(arg);
          if (stableReqArgs.get(arg.getName()) != null) {
            stableReqArgs.remove(arg.getName());
          }
        }
      }
      for (Iterator<String> i=stableReqArgs.keySet().iterator(); i.hasNext(); ) {
        String argName=i.next();
        if (oldCommand.getReqArgByName(argName).isRequired() == newCommand.getReqArgByName(argName).isRequired()) {
          i.remove();
        }
      }
      if (newCommand.getResponse() != null && oldCommand.getResponse() != null) {
        for (        Argument arg : newCommand.getResponse()) {
          if (oldCommand.getResArgByName(arg.getName()) == null) {
            newRespArgs.add(arg);
          }
        }
        for (        Argument arg : oldCommand.getResponse()) {
          if (newCommand.getResArgByName(arg.getName()) == null) {
            removedRespArgs.add(arg);
          }
        }
      }
      if (newReqArgs.size() != 0 || newRespArgs.size() != 0 || removedReqArgs.size() != 0 || removedRespArgs.size() != 0 || stableReqArgs.size() != 0 || stableReqArgs.size() != 0) {
        StringBuffer commandInfo=new StringBuffer();
        commandInfo.append(""String_Node_Str"" + key);
        out.write(commandInfo.toString());
        out.write(""String_Node_Str"");
        if (newReqArgs.size() != 0 || removedReqArgs.size() != 0 || stableReqArgs.size() != 0) {
          StringBuffer request=new StringBuffer();
          request.append(""String_Node_Str"");
          out.write(request.toString());
          if (newReqArgs.size() != 0) {
            StringBuffer newParameters=new StringBuffer();
            newParameters.append(""String_Node_Str"");
            for (            Argument newArg : newReqArgs) {
              String isRequiredParam=""String_Node_Str"";
              if (newArg.isRequired()) {
                isRequiredParam=""String_Node_Str"";
              }
              newParameters.append(newArg.getName() + ""String_Node_Str"" + isRequiredParam+ ""String_Node_Str"");
            }
            newParameters.delete(newParameters.length() - 2,newParameters.length() - 1);
            out.write(newParameters.toString());
            out.write(""String_Node_Str"");
          }
          if (removedReqArgs.size() != 0) {
            StringBuffer removedParameters=new StringBuffer();
            removedParameters.append(""String_Node_Str"");
            for (            Argument removedArg : removedReqArgs) {
              removedParameters.append(removedArg.getName() + ""String_Node_Str"");
            }
            removedParameters.delete(removedParameters.length() - 2,removedParameters.length() - 1);
            out.write(removedParameters.toString());
            out.write(""String_Node_Str"");
          }
          if (stableReqArgs.size() != 0) {
            StringBuffer changedParameters=new StringBuffer();
            changedParameters.append(""String_Node_Str"");
            for (            Argument stableArg : stableReqArgs.values()) {
              String newRequired=""String_Node_Str"";
              String oldRequired=""String_Node_Str"";
              if (oldCommand.getReqArgByName(stableArg.getName()).isRequired() == true)               oldRequired=""String_Node_Str"";
              if (newCommand.getReqArgByName(stableArg.getName()).isRequired() == true)               newRequired=""String_Node_Str"";
              changedParameters.append(stableArg.getName() + ""String_Node_Str"" + oldRequired+ ""String_Node_Str""+ newRequired+ ""String_Node_Str"");
            }
            changedParameters.delete(changedParameters.length() - 2,changedParameters.length() - 1);
            out.write(changedParameters.toString());
            out.write(""String_Node_Str"");
          }
        }
        if (newRespArgs.size() != 0 || removedRespArgs.size() != 0) {
          StringBuffer changedResponseParams=new StringBuffer();
          changedResponseParams.append(""String_Node_Str"");
          out.write(changedResponseParams.toString());
          if (newRespArgs.size() != 0) {
            StringBuffer newRespParams=new StringBuffer();
            newRespParams.append(""String_Node_Str"");
            for (            Argument newArg : newRespArgs) {
              newRespParams.append(newArg.getName() + ""String_Node_Str"");
            }
            newRespParams.delete(newRespParams.length() - 2,newRespParams.length() - 1);
            out.write(newRespParams.toString());
            out.write(""String_Node_Str"");
          }
          if (removedRespArgs.size() != 0) {
            StringBuffer removedRespParams=new StringBuffer();
            removedRespParams.append(""String_Node_Str"");
            for (            Argument removedArg : removedRespArgs) {
              removedRespParams.append(removedArg.getName() + ""String_Node_Str"");
            }
            removedRespParams.delete(removedRespParams.length() - 2,removedRespParams.length() - 1);
            out.write(removedRespParams.toString());
            out.write(""String_Node_Str"");
          }
        }
      }
    }
    out.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}"
89685,"protected void upgrade(String dbVersion,String currentVersion){
  s_logger.info(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
  String trimmedDbVersion=Version.trimToPatch(dbVersion);
  String trimmedCurrentVersion=Version.trimToPatch(currentVersion);
  DbUpgrade[] upgrades=_upgradeMap.get(trimmedDbVersion);
  if (upgrades == null) {
    s_logger.error(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
    throw new CloudRuntimeException(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
  }
  if (Version.compare(trimmedCurrentVersion,upgrades[upgrades.length - 1].getUpgradedVersion()) != 0) {
    s_logger.error(""String_Node_Str"" + upgrades[upgrades.length - 1].getUpgradedVersion() + ""String_Node_Str""+ currentVersion);
    throw new CloudRuntimeException(""String_Node_Str"" + upgrades[upgrades.length - 1].getUpgradedVersion() + ""String_Node_Str""+ currentVersion);
  }
  boolean supportsRollingUpgrade=true;
  for (  DbUpgrade upgrade : upgrades) {
    if (!upgrade.supportsRollingUpgrade()) {
      supportsRollingUpgrade=false;
      break;
    }
  }
  if (!supportsRollingUpgrade && ClusterManagerImpl.arePeersRunning(null)) {
    s_logger.error(""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  for (  DbUpgrade upgrade : upgrades) {
    s_logger.info(""String_Node_Str"" + upgrade.getClass().getSimpleName() + ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[0]+ ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[1]+ ""String_Node_Str""+ upgrade.getUpgradedVersion());
    Transaction txn=Transaction.open(""String_Node_Str"");
    txn.start();
    try {
      Connection conn;
      try {
        conn=txn.getConnection();
      }
 catch (      SQLException e) {
        s_logger.error(""String_Node_Str"",e);
        throw new CloudRuntimeException(""String_Node_Str"",e);
      }
      File[] scripts=upgrade.getPrepareScripts();
      if (scripts != null) {
        for (        File script : scripts) {
          runScript(script);
        }
      }
      upgrade.performDataMigration(conn);
      boolean upgradeVersion=true;
      if (upgrade.getUpgradedVersion().equals(""String_Node_Str"")) {
        upgradeVersion=false;
      }
 else       if (upgrade.getUpgradedVersion().equals(""String_Node_Str"")) {
        try {
          PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
          ResultSet rs=pstmt.executeQuery();
          if (rs.next()) {
            upgradeVersion=false;
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException(""String_Node_Str"",e);
        }
      }
      if (upgradeVersion) {
        VersionVO version=new VersionVO(upgrade.getUpgradedVersion());
        _dao.persist(version);
      }
      txn.commit();
    }
  finally {
      txn.close();
    }
  }
  if (!ClusterManagerImpl.arePeersRunning(trimmedCurrentVersion)) {
    s_logger.info(""String_Node_Str"");
    for (    DbUpgrade upgrade : upgrades) {
      s_logger.info(""String_Node_Str"" + upgrade.getClass().getSimpleName() + ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[0]+ ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[1]+ ""String_Node_Str""+ upgrade.getUpgradedVersion());
      VersionVO version=_dao.findByVersion(upgrade.getUpgradedVersion(),Step.Upgrade);
      if (version != null) {
        Transaction txn=Transaction.open(""String_Node_Str"");
        txn.start();
        try {
          File[] scripts=upgrade.getCleanupScripts();
          if (scripts != null) {
            for (            File script : scripts) {
              runScript(script);
            }
          }
          version.setStep(Step.Complete);
          version.setUpdated(new Date());
          _dao.update(version.getId(),version);
          txn.commit();
        }
  finally {
          txn.close();
        }
      }
    }
  }
}","protected void upgrade(String dbVersion,String currentVersion){
  s_logger.info(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
  String trimmedDbVersion=Version.trimToPatch(dbVersion);
  String trimmedCurrentVersion=Version.trimToPatch(currentVersion);
  DbUpgrade[] upgrades=_upgradeMap.get(trimmedDbVersion);
  if (upgrades == null) {
    s_logger.error(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
    throw new CloudRuntimeException(""String_Node_Str"" + dbVersion + ""String_Node_Str""+ currentVersion);
  }
  if (Version.compare(trimmedCurrentVersion,upgrades[upgrades.length - 1].getUpgradedVersion()) != 0) {
    s_logger.error(""String_Node_Str"" + upgrades[upgrades.length - 1].getUpgradedVersion() + ""String_Node_Str""+ currentVersion);
    throw new CloudRuntimeException(""String_Node_Str"" + upgrades[upgrades.length - 1].getUpgradedVersion() + ""String_Node_Str""+ currentVersion);
  }
  boolean supportsRollingUpgrade=true;
  for (  DbUpgrade upgrade : upgrades) {
    if (!upgrade.supportsRollingUpgrade()) {
      supportsRollingUpgrade=false;
      break;
    }
  }
  if (!supportsRollingUpgrade && ClusterManagerImpl.arePeersRunning(null)) {
    s_logger.error(""String_Node_Str"");
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  for (  DbUpgrade upgrade : upgrades) {
    s_logger.info(""String_Node_Str"" + upgrade.getClass().getSimpleName() + ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[0]+ ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[1]+ ""String_Node_Str""+ upgrade.getUpgradedVersion());
    Transaction txn=Transaction.open(""String_Node_Str"");
    txn.start();
    try {
      Connection conn;
      try {
        conn=txn.getConnection();
      }
 catch (      SQLException e) {
        s_logger.error(""String_Node_Str"",e);
        throw new CloudRuntimeException(""String_Node_Str"",e);
      }
      File[] scripts=upgrade.getPrepareScripts();
      if (scripts != null) {
        for (        File script : scripts) {
          runScript(script);
        }
      }
      upgrade.performDataMigration(conn);
      boolean upgradeVersion=true;
      if (upgrade.getUpgradedVersion().equals(""String_Node_Str"")) {
        upgradeVersion=false;
      }
 else       if (upgrade.getUpgradedVersion().equals(""String_Node_Str"")) {
        try {
          PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
          ResultSet rs=pstmt.executeQuery();
          if (rs.next()) {
            upgradeVersion=false;
          }
        }
 catch (        SQLException e) {
          throw new CloudRuntimeException(""String_Node_Str"",e);
        }
      }
      if (upgradeVersion) {
        VersionVO version=new VersionVO(upgrade.getUpgradedVersion());
        _dao.persist(version);
      }
      txn.commit();
    }
  finally {
      txn.close();
    }
  }
  if (!ClusterManagerImpl.arePeersRunning(trimmedCurrentVersion)) {
    s_logger.info(""String_Node_Str"");
    TreeMap<String,List<DbUpgrade>> upgradedVersions=new TreeMap<String,List<DbUpgrade>>();
    for (    DbUpgrade upgrade : upgrades) {
      String upgradedVerson=upgrade.getUpgradedVersion();
      List<DbUpgrade> upgradeList=upgradedVersions.get(upgradedVerson);
      if (upgradeList == null) {
        upgradeList=new ArrayList<DbUpgrade>();
      }
      upgradeList.add(upgrade);
      upgradedVersions.put(upgradedVerson,upgradeList);
    }
    for (    String upgradedVersion : upgradedVersions.keySet()) {
      List<DbUpgrade> versionUpgrades=upgradedVersions.get(upgradedVersion);
      VersionVO version=_dao.findByVersion(upgradedVersion,Step.Upgrade);
      s_logger.debug(""String_Node_Str"" + upgradedVersion + ""String_Node_Str"");
      Transaction txn=Transaction.open(""String_Node_Str"");
      try {
        if (version != null) {
          for (          DbUpgrade upgrade : versionUpgrades) {
            s_logger.info(""String_Node_Str"" + upgrade.getClass().getSimpleName() + ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[0]+ ""String_Node_Str""+ upgrade.getUpgradableVersionRange()[1]+ ""String_Node_Str""+ upgrade.getUpgradedVersion());
            txn.start();
            File[] scripts=upgrade.getCleanupScripts();
            if (scripts != null) {
              for (              File script : scripts) {
                runScript(script);
                s_logger.debug(""String_Node_Str"" + script.getAbsolutePath() + ""String_Node_Str"");
              }
            }
            txn.commit();
          }
          txn.start();
          version.setStep(Step.Complete);
          s_logger.debug(""String_Node_Str"" + upgradedVersion);
          version.setUpdated(new Date());
          _dao.update(version.getId(),version);
          txn.commit();
        }
      }
  finally {
        txn.close();
      }
    }
  }
}"
89686,"@Override public void prepare(VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest) throws StorageUnavailableException, InsufficientStorageCapacityException {
  if (dest == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    throw new CloudRuntimeException(""String_Node_Str"" + vm);
  }
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  List<VolumeVO> recreateVols=new ArrayList<VolumeVO>(vols.size());
  for (  VolumeVO vol : vols) {
    StoragePool assignedPool=null;
    if (dest.getStorageForDisks() != null) {
      assignedPool=dest.getStorageForDisks().get(vol);
    }
    if (assignedPool != null) {
      Volume.State state=vol.getState();
      if (state == Volume.State.Allocated) {
        recreateVols.add(vol);
      }
 else {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ assignedPool+ ""String_Node_Str"");
          }
          recreateVols.add(vol);
        }
 else {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ assignedPool);
          }
          throw new StorageUnavailableException(""String_Node_Str"" + vol,Volume.class,vol.getId());
        }
      }
    }
 else {
      if (vol.getPoolId() == null) {
        throw new StorageUnavailableException(""String_Node_Str"" + vol,Volume.class,vol.getId());
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ vol.getPoolId()+ ""String_Node_Str"");
      }
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      vm.addDisk(new VolumeTO(vol,pool));
    }
  }
  for (  VolumeVO vol : recreateVols) {
    VolumeVO newVol;
    if (vol.getState() == Volume.State.Allocated) {
      vol.setRecreatable(true);
      newVol=vol;
    }
 else {
      newVol=switchVolume(vol,vm);
      newVol.setRecreatable(true);
      if (dest.getStorageForDisks() != null && dest.getStorageForDisks().containsKey(vol)) {
        StoragePool poolWithOldVol=dest.getStorageForDisks().get(vol);
        dest.getStorageForDisks().put(newVol,poolWithOldVol);
        dest.getStorageForDisks().remove(vol);
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ vol);
      }
    }
    try {
      _volsDao.update(newVol,Volume.Event.Create);
    }
 catch (    ConcurrentOperationException e) {
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol.getPoolId());
    }
    Pair<VolumeTO,StoragePool> created=createVolume(newVol,_diskOfferingDao.findById(newVol.getDiskOfferingId()),vm,vols,dest);
    if (created == null) {
      Long poolId=newVol.getPoolId();
      newVol.setPoolId(null);
      try {
        _volsDao.update(newVol,Volume.Event.OperationFailed);
      }
 catch (      ConcurrentOperationException e) {
        throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
      }
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,poolId == null ? -1L : poolId);
    }
    created.first().setDeviceId(newVol.getDeviceId().intValue());
    newVol.setFolder(created.second().getPath());
    newVol.setPath(created.first().getPath());
    newVol.setSize(created.first().getSize());
    newVol.setPoolType(created.second().getPoolType());
    newVol.setPodId(created.second().getPodId());
    try {
      _volsDao.update(newVol,Volume.Event.OperationSucceeded);
    }
 catch (    ConcurrentOperationException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ created.second());
    }
    vm.addDisk(created.first());
  }
}","@Override public void prepare(VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest) throws StorageUnavailableException, InsufficientStorageCapacityException {
  if (dest == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    throw new CloudRuntimeException(""String_Node_Str"" + vm);
  }
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  List<VolumeVO> recreateVols=new ArrayList<VolumeVO>(vols.size());
  for (  VolumeVO vol : vols) {
    StoragePool assignedPool=null;
    if (dest.getStorageForDisks() != null) {
      assignedPool=dest.getStorageForDisks().get(vol);
    }
    if (assignedPool != null) {
      Volume.State state=vol.getState();
      if (state == Volume.State.Allocated) {
        recreateVols.add(vol);
      }
 else {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ assignedPool+ ""String_Node_Str"");
          }
          recreateVols.add(vol);
        }
 else {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ assignedPool);
          }
          throw new StorageUnavailableException(""String_Node_Str"" + vol,Volume.class,vol.getId());
        }
      }
    }
 else {
      if (vol.getPoolId() == null) {
        throw new StorageUnavailableException(""String_Node_Str"" + vol,Volume.class,vol.getId());
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ vol.getPoolId()+ ""String_Node_Str"");
      }
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      vm.addDisk(new VolumeTO(vol,pool));
    }
  }
  for (  VolumeVO vol : recreateVols) {
    VolumeVO newVol;
    if (vol.getState() == Volume.State.Allocated) {
      newVol=vol;
    }
 else {
      newVol=switchVolume(vol,vm);
      if (dest.getStorageForDisks() != null && dest.getStorageForDisks().containsKey(vol)) {
        StoragePool poolWithOldVol=dest.getStorageForDisks().get(vol);
        dest.getStorageForDisks().put(newVol,poolWithOldVol);
        dest.getStorageForDisks().remove(vol);
      }
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ vol);
      }
    }
    try {
      _volsDao.update(newVol,Volume.Event.Create);
    }
 catch (    ConcurrentOperationException e) {
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol.getPoolId());
    }
    Pair<VolumeTO,StoragePool> created=createVolume(newVol,_diskOfferingDao.findById(newVol.getDiskOfferingId()),vm,vols,dest);
    if (created == null) {
      Long poolId=newVol.getPoolId();
      newVol.setPoolId(null);
      try {
        _volsDao.update(newVol,Volume.Event.OperationFailed);
      }
 catch (      ConcurrentOperationException e) {
        throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
      }
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,poolId == null ? -1L : poolId);
    }
    created.first().setDeviceId(newVol.getDeviceId().intValue());
    newVol.setFolder(created.second().getPath());
    newVol.setPath(created.first().getPath());
    newVol.setSize(created.first().getSize());
    newVol.setPoolType(created.second().getPoolType());
    newVol.setPodId(created.second().getPodId());
    try {
      _volsDao.update(newVol,Volume.Event.OperationSucceeded);
    }
 catch (    ConcurrentOperationException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ created.second());
    }
    vm.addDisk(created.first());
  }
}"
89687,"VolumeVO allocateDuplicateVolume(VolumeVO oldVol,Long templateId){
  VolumeVO newVol=new VolumeVO(oldVol.getVolumeType(),oldVol.getName(),oldVol.getDataCenterId(),oldVol.getDomainId(),oldVol.getAccountId(),oldVol.getDiskOfferingId(),oldVol.getSize());
  if (templateId != null) {
    newVol.setTemplateId(templateId);
  }
 else {
    newVol.setTemplateId(oldVol.getTemplateId());
  }
  newVol.setDeviceId(oldVol.getDeviceId());
  newVol.setInstanceId(oldVol.getInstanceId());
  return _volsDao.persist(newVol);
}","VolumeVO allocateDuplicateVolume(VolumeVO oldVol,Long templateId){
  VolumeVO newVol=new VolumeVO(oldVol.getVolumeType(),oldVol.getName(),oldVol.getDataCenterId(),oldVol.getDomainId(),oldVol.getAccountId(),oldVol.getDiskOfferingId(),oldVol.getSize());
  if (templateId != null) {
    newVol.setTemplateId(templateId);
  }
 else {
    newVol.setTemplateId(oldVol.getTemplateId());
  }
  newVol.setDeviceId(oldVol.getDeviceId());
  newVol.setInstanceId(oldVol.getInstanceId());
  newVol.setRecreatable(oldVol.isRecreatable());
  return _volsDao.persist(newVol);
}"
89688,"public DatabaseUpgradeChecker(){
  _dao=ComponentLocator.inject(VersionDaoImpl.class);
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade217to218(),new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to223(),new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to223(),new Upgrade222to224(),new Upgrade218to224DomainVlans()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to223(),new Upgrade222to224(),new Upgrade218to224DomainVlans()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224()});
}","public DatabaseUpgradeChecker(){
  _dao=ComponentLocator.inject(VersionDaoImpl.class);
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade217to218(),new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to223(),new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to223(),new Upgrade222to224(),new Upgrade218to224DomainVlans()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade218to22(),new Upgrade221to222(),new UpgradeSnapshot217to223(),new Upgrade222to224(),new Upgrade218to224DomainVlans()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade221to222(),new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224()});
  _upgradeMap.put(""String_Node_Str"",new DbUpgrade[]{new Upgrade222to224()});
}"
89689,"@Override public void performDataMigration(Connection conn){
  updateClusterIdInOpHostCapacity(conn);
  updateGuestOsType(conn);
  updateNicsWithMode(conn);
  updateUserStatsWithNetwork(conn);
  dropIndexIfExists(conn);
  fixBasicZoneNicCount(conn);
  updateTotalCPUInOpHostCapacity(conn);
  upgradeGuestOs(conn);
  upgradeAccountVlanMap(conn);
}","@Override public void performDataMigration(Connection conn){
  try {
    updateClusterIdInOpHostCapacity(conn);
    updateGuestOsType(conn);
    updateNicsWithMode(conn);
    updateUserStatsWithNetwork(conn);
    dropIndexIfExists(conn);
    fixBasicZoneNicCount(conn);
    updateTotalCPUInOpHostCapacity(conn);
    upgradeGuestOs(conn);
    upgradeAccountVlanMap(conn);
    fixRecreatableVolumesProblem(conn);
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}"
89690,"@Override public void performDataMigration(Connection conn){
  updateClusterIdInOpHostCapacity(conn);
  updateGuestOsType(conn);
  updateNicsWithMode(conn);
  updateUserStatsWithNetwork(conn);
  dropIndexIfExists(conn);
  fixBasicZoneNicCount(conn);
  updateTotalCPUInOpHostCapacity(conn);
}","@Override public void performDataMigration(Connection conn){
  updateClusterIdInOpHostCapacity(conn);
  updateGuestOsType(conn);
  updateNicsWithMode(conn);
  updateUserStatsWithNetwork(conn);
  dropIndexIfExists(conn);
  fixBasicZoneNicCount(conn);
  updateTotalCPUInOpHostCapacity(conn);
  upgradeGuestOs(conn);
  upgradeAccountVlanMap(conn);
}"
89691,"@Override public String getCurrentVersion(){
  Connection conn=null;
  try {
    s_logger.debug(""String_Node_Str"");
    conn=Transaction.getStandaloneConnection();
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    if (!rs.next()) {
      rs.close();
      pstmt.close();
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      if (!rs.next()) {
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        try {
          pstmt.executeQuery();
          return ""String_Node_Str"";
        }
 catch (        SQLException e) {
          s_logger.debug(""String_Node_Str"");
          s_logger.debug(""String_Node_Str"");
          return ""String_Node_Str"";
        }
 finally {
          pstmt.close();
        }
      }
 else {
        rs.close();
        pstmt.close();
        s_logger.debug(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        try {
          pstmt.executeQuery();
          return ""String_Node_Str"";
        }
 catch (        SQLException e) {
          s_logger.debug(""String_Node_Str"");
          return ""String_Node_Str"";
        }
 finally {
          pstmt.close();
        }
      }
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    try {
      conn.close();
    }
 catch (    SQLException e) {
    }
  }
  SearchCriteria<String> sc=CurrentVersionSearch.create();
  sc.setParameters(""String_Node_Str"",Step.Complete);
  Filter filter=new Filter(VersionVO.class,""String_Node_Str"",false,0l,1l);
  List<String> vers=customSearch(sc,filter);
  return vers.get(0);
}","@Override public String getCurrentVersion(){
  Connection conn=null;
  try {
    s_logger.debug(""String_Node_Str"");
    conn=Transaction.getStandaloneConnection();
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    if (!rs.next()) {
      rs.close();
      pstmt.close();
      pstmt=conn.prepareStatement(""String_Node_Str"");
      rs=pstmt.executeQuery();
      if (!rs.next()) {
        rs.close();
        pstmt.close();
        pstmt=conn.prepareStatement(""String_Node_Str"");
        try {
          pstmt.executeQuery();
          return ""String_Node_Str"";
        }
 catch (        SQLException e) {
          s_logger.debug(""String_Node_Str"");
          s_logger.debug(""String_Node_Str"");
          return ""String_Node_Str"";
        }
 finally {
          pstmt.close();
        }
      }
 else {
        rs.close();
        pstmt.close();
        s_logger.debug(""String_Node_Str"");
        return ""String_Node_Str"";
      }
    }
    SearchCriteria<String> sc=CurrentVersionSearch.create();
    sc.setParameters(""String_Node_Str"",Step.Complete);
    Filter filter=new Filter(VersionVO.class,""String_Node_Str"",false,0l,1l);
    List<String> upgradedVersions=customSearch(sc,filter);
    if (upgradedVersions.isEmpty()) {
      filter=new Filter(VersionVO.class,""String_Node_Str"",false,0l,1l);
      sc=CurrentVersionSearch.create();
      List<String> vers=customSearch(sc,filter);
      if (!vers.isEmpty()) {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      try {
        s_logger.debug(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.executeQuery();
          throw new CloudRuntimeException(""String_Node_Str"");
        }
      }
 catch (      SQLException e) {
        s_logger.debug(""String_Node_Str"");
        return ""String_Node_Str"";
      }
 finally {
        rs.close();
        pstmt.close();
      }
    }
 else {
      return upgradedVersions.get(0);
    }
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
 finally {
    try {
      conn.close();
    }
 catch (    SQLException e) {
    }
  }
}"
89692,"@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  Boolean isShared=cmd.getIsShared();
  Boolean isDefault=cmd.isDefault();
  Long accountId=null;
  String path=null;
  List<Long> avoidNetworks=new ArrayList<Long>();
  List<Long> allowedSharedNetworks=new ArrayList<Long>();
  if (isSystem == null) {
    isSystem=false;
  }
  if (isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (_accountMgr.isAdmin(account.getType())) {
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        account=_accountMgr.getActiveAccount(accountName,domainId);
        if (account == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=account.getId();
      }
    }
 else {
      accountId=account.getId();
    }
    if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
      DomainVO domain=_domainDao.findById(account.getDomainId());
      if (domain != null) {
        path=domain.getPath();
      }
    }
  }
 else {
    accountName=account.getAccountName();
    domainId=account.getDomainId();
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  if (path != null) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  SearchCriteria<NetworkVO> sc=sb.create();
  if (isSystem != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",isSystem);
  }
  if (keyword != null) {
    SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (zoneId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
  }
  if (type != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,type);
  }
  if (!isSystem) {
    if (accountName != null && domainId != null) {
      if (isShared == null) {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,accountId);
      }
 else       if (!isShared) {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,accountId);
      }
 else {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
      }
      if (isShared == null || isShared) {
        List<NetworkVO> allNetworks=_networksDao.listNetworksBy(true);
        for (        NetworkVO network : allNetworks) {
          if (!isNetworkAvailableInDomain(network.getId(),domainId)) {
            avoidNetworks.add(network.getId());
          }
 else {
            allowedSharedNetworks.add(network.getId());
          }
        }
      }
    }
 else     if (isShared != null) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isShared);
    }
  }
  if (domainId != null && accountName == null) {
    List<NetworkVO> allNetworks=_networksDao.listNetworksBy(true);
    for (    NetworkVO network : allNetworks) {
      if (!isNetworkAvailableInDomain(network.getId(),domainId)) {
        avoidNetworks.add(network.getId());
      }
    }
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
  }
  for (  Long avoidNetwork : avoidNetworks) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NOTIN,avoidNetwork);
  }
  for (  Long allowerdSharedNetwork : allowedSharedNetworks) {
    sc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,allowerdSharedNetwork);
  }
  if (isDefault != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isDefault);
  }
  if (trafficType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,trafficType);
  }
  if (!isSystem && path != null && (isShared == null || !isShared)) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",path + ""String_Node_Str"");
  }
  List<NetworkVO> networks=_networksDao.search(sc,searchFilter);
  return networks;
}","@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  String trafficType=cmd.getTrafficType();
  Boolean isSystem=cmd.getIsSystem();
  Boolean isShared=cmd.getIsShared();
  Boolean isDefault=cmd.isDefault();
  Long accountId=null;
  String path=null;
  List<Long> avoidNetworks=new ArrayList<Long>();
  List<Long> allowedSharedNetworks=new ArrayList<Long>();
  if (isSystem == null) {
    isSystem=false;
  }
  if (isSystem && (accountName != null || domainId != null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (_accountMgr.isAdmin(account.getType())) {
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        account=_accountMgr.getActiveAccount(accountName,domainId);
        if (account == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=account.getId();
      }
    }
 else {
      accountId=account.getId();
    }
    if (account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN) {
      DomainVO domain=_domainDao.findById(account.getDomainId());
      if (domain != null) {
        path=domain.getPath();
      }
    }
  }
 else {
    accountName=account.getAccountName();
    domainId=account.getDomainId();
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  if (path != null) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  sb.and(""String_Node_Str"",sb.entity().getRemoved(),Op.NULL);
  SearchCriteria<NetworkVO> sc=sb.create();
  if (isSystem != null) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",isSystem);
  }
  if (keyword != null) {
    SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (zoneId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
  }
  if (type != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,type);
  }
  if (!isSystem) {
    if (accountName != null && domainId != null) {
      if (isShared == null) {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,accountId);
      }
 else       if (!isShared) {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,accountId);
      }
 else {
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
      }
      if (isShared == null || isShared) {
        List<NetworkVO> allNetworks=_networksDao.listNetworksBy(true);
        for (        NetworkVO network : allNetworks) {
          NetworkOffering offering=_configMgr.getNetworkOffering(network.getNetworkOfferingId());
          if (!isNetworkAvailableInDomain(network.getId(),domainId) || offering.isSystemOnly()) {
            avoidNetworks.add(network.getId());
          }
 else {
            allowedSharedNetworks.add(network.getId());
          }
        }
      }
    }
 else     if (isShared != null) {
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isShared);
    }
  }
  if (domainId != null && accountName == null) {
    List<NetworkVO> allNetworks=_networksDao.listNetworksBy(true);
    for (    NetworkVO network : allNetworks) {
      if (!isNetworkAvailableInDomain(network.getId(),domainId)) {
        avoidNetworks.add(network.getId());
      }
    }
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,true);
  }
  for (  Long avoidNetwork : avoidNetworks) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NOTIN,avoidNetwork);
  }
  for (  Long allowerdSharedNetwork : allowedSharedNetworks) {
    sc.addOr(""String_Node_Str"",SearchCriteria.Op.IN,allowerdSharedNetwork);
  }
  if (isDefault != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,isDefault);
  }
  if (trafficType != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,trafficType);
  }
  if (!isSystem && path != null && (isShared == null || !isShared)) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",path + ""String_Node_Str"");
  }
  List<NetworkVO> networks=_networksDao.search(sc,searchFilter);
  return networks;
}"
89693,"private void upadteUserStats(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
    s_logger.debug(""String_Node_Str"");
    pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      Long id=rs.getLong(1);
      Long accountId=rs.getLong(2);
      Long dataCenterId=rs.getLong(3);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,dataCenterId);
      ResultSet dcSet=pstmt.executeQuery();
      if (!dcSet.next()) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      String dataCenterType=dcSet.getString(1);
      if (dataCenterType.equalsIgnoreCase(""String_Node_Str"")) {
        accountId=1L;
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,accountId);
      pstmt.setLong(2,dataCenterId);
      s_logger.debug(""String_Node_Str"" + pstmt);
      ResultSet rs1=pstmt.executeQuery();
      if (!rs1.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,accountId);
        pstmt.setLong(2,dataCenterId);
        ResultSet nonRemovedVms=pstmt.executeQuery();
        if (nonRemovedVms.next()) {
          s_logger.error(""String_Node_Str"");
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
          continue;
        }
      }
      Long deviceId=rs1.getLong(1);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,deviceId);
      pstmt.setLong(2,id);
      s_logger.debug(""String_Node_Str"" + pstmt);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","private void upadteUserStats(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.executeUpdate();
    pstmt.close();
    s_logger.debug(""String_Node_Str"");
    pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      Long id=rs.getLong(1);
      Long accountId=rs.getLong(2);
      Long dataCenterId=rs.getLong(3);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,dataCenterId);
      ResultSet dcSet=pstmt.executeQuery();
      if (!dcSet.next()) {
        s_logger.error(""String_Node_Str"");
        throw new CloudRuntimeException(""String_Node_Str"");
      }
      String dataCenterType=dcSet.getString(1);
      if (dataCenterType.equalsIgnoreCase(""String_Node_Str"")) {
        accountId=1L;
      }
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,accountId);
      pstmt.setLong(2,dataCenterId);
      ResultSet rs1=pstmt.executeQuery();
      if (!rs1.next()) {
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,accountId);
        pstmt.setLong(2,dataCenterId);
        ResultSet nonRemovedVms=pstmt.executeQuery();
        if (nonRemovedVms.next()) {
          s_logger.error(""String_Node_Str"");
          throw new CloudRuntimeException(""String_Node_Str"");
        }
 else {
          s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
          continue;
        }
      }
      Long deviceId=rs1.getLong(1);
      pstmt=conn.prepareStatement(""String_Node_Str"");
      pstmt.setLong(1,deviceId);
      pstmt.setLong(2,id);
      pstmt.executeUpdate();
      pstmt=conn.prepareStatement(""String_Node_Str"");
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}"
89694,"protected void upgradeBasicUserVms(Connection conn,long domainRouterId,long networkId,String gateway,String vnet) throws SQLException {
  PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,domainRouterId);
  ResultSet rs=pstmt.executeQuery();
  List<Object[]> vms=new ArrayList<Object[]>();
  while (rs.next()) {
    Object[] vm=new Object[10];
    vm[0]=rs.getLong(1);
    vm[1]=rs.getString(2);
    vm[2]=rs.getString(3);
    vm[3]=rs.getString(4);
    vm[4]=rs.getString(5);
    vm[5]=rs.getString(6);
    vms.add(vm);
  }
  rs.close();
  pstmt.close();
  s_logger.debug(""String_Node_Str"" + vms.size() + ""String_Node_Str""+ domainRouterId);
  int count=0;
  for (  Object[] vm : vms) {
    String state=(String)vm[4];
    boolean running=false;
    if (state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"")) {
      running=true;
      count++;
    }
    insertNic(conn,networkId,(Long)vm[0],running,(String)vm[1],(String)vm[2],(String)vm[3],""String_Node_Str"",gateway,vnet,""String_Node_Str"",true,0,""String_Node_Str"",null);
  }
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,domainRouterId);
  rs=pstmt.executeQuery();
  rs.next();
  String state=rs.getString(1);
  if (state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"")) {
    count++;
  }
  rs.close();
  pstmt.close();
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,count);
  if (count == 0) {
    pstmt.setBoolean(2,false);
  }
 else {
    pstmt.setBoolean(2,true);
  }
  pstmt.setLong(3,networkId);
  pstmt.executeUpdate();
  pstmt.close();
}","protected void upgradeBasicUserVms(Connection conn,long domainRouterId,long networkId,String gateway,String vnet) throws SQLException {
  PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,domainRouterId);
  ResultSet rs=pstmt.executeQuery();
  List<Object[]> vms=new ArrayList<Object[]>();
  while (rs.next()) {
    Object[] vm=new Object[10];
    vm[0]=rs.getLong(1);
    vm[1]=rs.getString(2);
    vm[2]=rs.getString(3);
    vm[3]=rs.getString(4);
    vm[4]=rs.getString(5);
    vm[5]=rs.getString(6);
    vms.add(vm);
  }
  rs.close();
  pstmt.close();
  s_logger.debug(""String_Node_Str"" + vms.size() + ""String_Node_Str""+ domainRouterId);
  int count=0;
  for (  Object[] vm : vms) {
    String state=(String)vm[4];
    boolean running=false;
    if (state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"")) {
      running=true;
      String type=(String)vm[5];
      if (type.equalsIgnoreCase(""String_Node_Str"")) {
        count++;
      }
    }
    insertNic(conn,networkId,(Long)vm[0],running,(String)vm[1],(String)vm[2],(String)vm[3],""String_Node_Str"",gateway,vnet,""String_Node_Str"",true,0,""String_Node_Str"",null);
  }
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,domainRouterId);
  rs=pstmt.executeQuery();
  rs.next();
  String state=rs.getString(1);
  if (state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"") || state.equals(""String_Node_Str"")) {
    count++;
  }
  rs.close();
  pstmt.close();
  Long originalNicsCount=0L;
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,networkId);
  ResultSet originalCountRs=pstmt.executeQuery();
  if (originalCountRs.next()) {
    originalNicsCount=originalCountRs.getLong(1);
  }
  Long resultCount=originalNicsCount + count;
  originalCountRs.close();
  pstmt.close();
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,resultCount);
  if (count == 0) {
    pstmt.setBoolean(2,false);
  }
 else {
    pstmt.setBoolean(2,true);
  }
  pstmt.setLong(3,networkId);
  pstmt.executeUpdate();
  pstmt.close();
}"
89695,"@Override public void performDataMigration(Connection conn){
  updateClusterIdInOpHostCapacity(conn);
  updateGuestOsType(conn);
  updateNicsWithMode(conn);
  updateUserStatsWithNetwork(conn);
  dropIndexIfExists(conn);
}","@Override public void performDataMigration(Connection conn){
  updateClusterIdInOpHostCapacity(conn);
  updateGuestOsType(conn);
  updateNicsWithMode(conn);
  updateUserStatsWithNetwork(conn);
  dropIndexIfExists(conn);
  fixBasicZoneNicCount(conn);
}"
89696,"protected HashMap<String,VmStatsEntry> getVmStats(Connection conn,GetVmStatsCommand cmd,List<String> vmUUIDs,String hostGuid){
  HashMap<String,VmStatsEntry> vmResponseMap=new HashMap<String,VmStatsEntry>();
  for (  String vmUUID : vmUUIDs) {
    vmResponseMap.put(vmUUID,new VmStatsEntry(0,0,0,0,""String_Node_Str""));
  }
  Object[] rrdData=getRRDData(conn,2);
  if (rrdData == null) {
    return null;
  }
  Integer numRows=(Integer)rrdData[0];
  Integer numColumns=(Integer)rrdData[1];
  Node legend=(Node)rrdData[2];
  Node dataNode=(Node)rrdData[3];
  NodeList legendChildren=legend.getChildNodes();
  for (int col=0; col < numColumns; col++) {
    if (legendChildren == null || legendChildren.item(col) == null) {
      continue;
    }
    String columnMetadata=getXMLNodeValue(legendChildren.item(col));
    if (columnMetadata == null) {
      continue;
    }
    String[] columnMetadataList=columnMetadata.split(""String_Node_Str"");
    if (columnMetadataList.length != 4) {
      continue;
    }
    String type=columnMetadataList[1];
    String uuid=columnMetadataList[2];
    String param=columnMetadataList[3];
    if (type.equals(""String_Node_Str"") && vmResponseMap.keySet().contains(uuid)) {
      VmStatsEntry vmStatsAnswer=vmResponseMap.get(uuid);
      vmStatsAnswer.setEntityType(""String_Node_Str"");
      if (param.contains(""String_Node_Str"")) {
        vmStatsAnswer.setNumCPUs(vmStatsAnswer.getNumCPUs() + 1);
        vmStatsAnswer.setCPUUtilization((vmStatsAnswer.getCPUUtilization() + getDataAverage(dataNode,col,numRows)) * 100);
      }
 else       if (param.equals(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkReadKBs(getDataAverage(dataNode,col,numRows) / (8 * 2));
      }
 else       if (param.equals(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkWriteKBs(getDataAverage(dataNode,col,numRows) / (8 * 2));
      }
    }
  }
  for (  String vmUUID : vmResponseMap.keySet()) {
    VmStatsEntry vmStatsAnswer=vmResponseMap.get(vmUUID);
    if (vmStatsAnswer.getNumCPUs() != 0) {
      vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() / vmStatsAnswer.getNumCPUs());
      s_logger.debug(""String_Node_Str"" + vmStatsAnswer.getCPUUtilization());
    }
  }
  return vmResponseMap;
}","protected HashMap<String,VmStatsEntry> getVmStats(Connection conn,GetVmStatsCommand cmd,List<String> vmUUIDs,String hostGuid){
  HashMap<String,VmStatsEntry> vmResponseMap=new HashMap<String,VmStatsEntry>();
  for (  String vmUUID : vmUUIDs) {
    vmResponseMap.put(vmUUID,new VmStatsEntry(0,0,0,0,""String_Node_Str""));
  }
  Object[] rrdData=getRRDData(conn,2);
  if (rrdData == null) {
    return null;
  }
  Integer numRows=(Integer)rrdData[0];
  Integer numColumns=(Integer)rrdData[1];
  Node legend=(Node)rrdData[2];
  Node dataNode=(Node)rrdData[3];
  NodeList legendChildren=legend.getChildNodes();
  for (int col=0; col < numColumns; col++) {
    if (legendChildren == null || legendChildren.item(col) == null) {
      continue;
    }
    String columnMetadata=getXMLNodeValue(legendChildren.item(col));
    if (columnMetadata == null) {
      continue;
    }
    String[] columnMetadataList=columnMetadata.split(""String_Node_Str"");
    if (columnMetadataList.length != 4) {
      continue;
    }
    String type=columnMetadataList[1];
    String uuid=columnMetadataList[2];
    String param=columnMetadataList[3];
    if (type.equals(""String_Node_Str"") && vmResponseMap.keySet().contains(uuid)) {
      VmStatsEntry vmStatsAnswer=vmResponseMap.get(uuid);
      vmStatsAnswer.setEntityType(""String_Node_Str"");
      if (param.contains(""String_Node_Str"")) {
        vmStatsAnswer.setNumCPUs(vmStatsAnswer.getNumCPUs() + 1);
        vmStatsAnswer.setCPUUtilization(((vmStatsAnswer.getCPUUtilization() + getDataAverage(dataNode,col,numRows))));
      }
 else       if (param.equals(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkReadKBs(getDataAverage(dataNode,col,numRows) / (8 * 2));
      }
 else       if (param.equals(""String_Node_Str"")) {
        vmStatsAnswer.setNetworkWriteKBs(getDataAverage(dataNode,col,numRows) / (8 * 2));
      }
    }
  }
  for (  String vmUUID : vmResponseMap.keySet()) {
    VmStatsEntry vmStatsAnswer=vmResponseMap.get(vmUUID);
    if (vmStatsAnswer.getNumCPUs() != 0) {
      vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() / vmStatsAnswer.getNumCPUs());
    }
    vmStatsAnswer.setCPUUtilization(vmStatsAnswer.getCPUUtilization() * 100);
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + vmStatsAnswer.getCPUUtilization());
  }
  return vmResponseMap;
}"
89697,"public void upgradePortForwardingRules(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    ArrayList<Object[]> rules=new ArrayList<Object[]>();
    while (rs.next()) {
      Object[] rule=new Object[10];
      rule[0]=rs.getLong(1);
      rule[1]=rs.getString(2);
      rule[2]=rs.getString(3);
      rule[3]=rs.getString(4);
      rule[4]=rs.getString(5);
      rule[5]=rs.getString(6);
      rules.add(rule);
    }
    rs.close();
    pstmt.close();
    if (!rules.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + rules.size() + ""String_Node_Str"");
      for (      Object[] rule : rules) {
        long id=(Long)rule[0];
        String sourcePort=(String)rule[2];
        String protocol=(String)rule[5];
        String publicIp=(String)rule[1];
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setString(1,publicIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          throw new CloudRuntimeException(""String_Node_Str"" + publicIp);
        }
        int ipAddressId=rs.getInt(1);
        long accountId=rs.getLong(2);
        long domainId=rs.getLong(3);
        long networkId=rs.getLong(4);
        rs.close();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,id);
        pstmt.setInt(2,ipAddressId);
        pstmt.setInt(3,Integer.valueOf(sourcePort));
        pstmt.setInt(4,Integer.valueOf(sourcePort));
        pstmt.setString(5,protocol);
        pstmt.setLong(6,accountId);
        pstmt.setLong(7,domainId);
        pstmt.setLong(8,networkId);
        pstmt.setString(9,UUID.randomUUID().toString());
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        s_logger.trace(""String_Node_Str"");
        String privateIp=(String)rule[3];
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,networkId);
        pstmt.setString(2,privateIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          throw new CloudRuntimeException(""String_Node_Str"" + privateIp + ""String_Node_Str""+ accountId);
        }
        long instanceId=rs.getLong(1);
        ;
        rs.close();
        pstmt.close();
        String privatePort=(String)rule[4];
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,id);
        pstmt.setLong(2,instanceId);
        pstmt.setString(3,privateIp);
        pstmt.setInt(4,Integer.valueOf(privatePort));
        pstmt.setInt(5,Integer.valueOf(privatePort));
        pstmt.executeUpdate();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}","public void upgradePortForwardingRules(Connection conn){
  try {
    PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
    ResultSet rs=pstmt.executeQuery();
    ArrayList<Object[]> rules=new ArrayList<Object[]>();
    while (rs.next()) {
      Object[] rule=new Object[10];
      rule[0]=rs.getLong(1);
      rule[1]=rs.getString(2);
      rule[2]=rs.getString(3);
      rule[3]=rs.getString(4);
      rule[4]=rs.getString(5);
      rule[5]=rs.getString(6);
      rules.add(rule);
    }
    rs.close();
    pstmt.close();
    if (!rules.isEmpty()) {
      s_logger.debug(""String_Node_Str"" + rules.size() + ""String_Node_Str"");
      for (      Object[] rule : rules) {
        long id=(Long)rule[0];
        String sourcePort=(String)rule[2];
        String protocol=(String)rule[5];
        String publicIp=(String)rule[1];
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setString(1,publicIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.error(""String_Node_Str"" + publicIp);
          throw new CloudRuntimeException(""String_Node_Str"" + publicIp);
        }
        int ipAddressId=rs.getInt(1);
        long accountId=rs.getLong(2);
        long domainId=rs.getLong(3);
        long networkId=rs.getLong(4);
        String privateIp=(String)rule[3];
        rs.close();
        pstmt.close();
        s_logger.trace(""String_Node_Str"");
        pstmt=conn.prepareStatement(""String_Node_Str"");
        pstmt.setLong(1,networkId);
        pstmt.setString(2,privateIp);
        rs=pstmt.executeQuery();
        if (!rs.next()) {
          s_logger.warn(""String_Node_Str"" + privateIp + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
        }
 else {
          long instanceId=rs.getLong(1);
          s_logger.debug(""String_Node_Str"" + instanceId);
          s_logger.trace(""String_Node_Str"");
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,id);
          pstmt.setInt(2,ipAddressId);
          pstmt.setInt(3,Integer.valueOf(sourcePort.trim()));
          pstmt.setInt(4,Integer.valueOf(sourcePort.trim()));
          pstmt.setString(5,protocol);
          pstmt.setLong(6,accountId);
          pstmt.setLong(7,domainId);
          pstmt.setLong(8,networkId);
          pstmt.setString(9,UUID.randomUUID().toString());
          pstmt.executeUpdate();
          pstmt.close();
          s_logger.trace(""String_Node_Str"");
          rs.close();
          pstmt.close();
          String privatePort=(String)rule[4];
          pstmt=conn.prepareStatement(""String_Node_Str"");
          pstmt.setLong(1,id);
          pstmt.setLong(2,instanceId);
          pstmt.setString(3,privateIp);
          pstmt.setInt(4,Integer.valueOf(privatePort.trim()));
          pstmt.setInt(5,Integer.valueOf(privatePort.trim()));
          pstmt.executeUpdate();
          pstmt.close();
          s_logger.trace(""String_Node_Str"");
        }
      }
    }
    s_logger.debug(""String_Node_Str"");
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
}"
89698,"protected void upgradeSsvm(Connection conn,long dataCenterId,long publicNetworkId,long managementNetworkId,long controlNetworkId,String zoneType) throws SQLException {
  s_logger.debug(""String_Node_Str"" + dataCenterId);
  PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,dataCenterId);
  ResultSet rs=pstmt.executeQuery();
  if (!rs.next()) {
    s_logger.debug(""String_Node_Str"" + dataCenterId);
    return;
  }
  long ssvmId=rs.getLong(1);
  String state=rs.getString(2);
  boolean running=state.equals(""String_Node_Str"") | state.equals(""String_Node_Str"") | state.equals(""String_Node_Str"");
  String privateMac=rs.getString(3);
  String privateIp=rs.getString(4);
  String privateNetmask=rs.getString(5);
  String publicMac=rs.getString(6);
  String publicIp=rs.getString(7);
  String publicNetmask=rs.getString(8);
  String guestMac=rs.getString(9);
  String guestIp=rs.getString(10);
  String guestNetmask=rs.getString(11);
  String gateway=rs.getString(12);
  String type=rs.getString(13);
  rs.close();
  pstmt.close();
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,dataCenterId);
  rs=pstmt.executeQuery();
  if (!rs.next()) {
    s_logger.debug(""String_Node_Str"" + dataCenterId);
    return;
  }
  String podGateway=rs.getString(1);
  rs.close();
  pstmt.close();
  s_logger.debug(""String_Node_Str"" + podGateway);
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setString(1,publicIp);
  rs=pstmt.executeQuery();
  String publicVlan=null;
  while (rs.next()) {
    publicVlan=rs.getString(1);
  }
  rs.close();
  pstmt.close();
  if (zoneType.equalsIgnoreCase(""String_Node_Str"")) {
    insertNic(conn,publicNetworkId,ssvmId,running,publicMac,publicIp,publicNetmask,""String_Node_Str"",gateway,publicVlan,""String_Node_Str"",true,2,""String_Node_Str"",null);
  }
 else {
    insertNic(conn,publicNetworkId,ssvmId,running,publicMac,publicIp,publicNetmask,""String_Node_Str"",gateway,publicVlan,""String_Node_Str"",true,2,""String_Node_Str"",null);
  }
  long controlNicId=insertNic(conn,controlNetworkId,ssvmId,running,guestMac,guestIp,guestNetmask,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",false,0,""String_Node_Str"",guestIp != null ? (ssvmId + guestIp) : null);
  if (guestIp != null) {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setLong(1,controlNicId);
    pstmt.setString(2,guestIp);
    pstmt.setLong(3,dataCenterId);
    pstmt.executeUpdate();
    pstmt.close();
  }
  long mgmtNicId=insertNic(conn,managementNetworkId,ssvmId,running,privateMac,privateIp,privateNetmask,""String_Node_Str"",podGateway,null,""String_Node_Str"",false,1,""String_Node_Str"",null);
  if (privateIp != null) {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setLong(1,mgmtNicId);
    pstmt.setString(2,privateIp);
    pstmt.setLong(3,dataCenterId);
    pstmt.executeUpdate();
    pstmt.close();
  }
}","protected void upgradeSsvm(Connection conn,long dataCenterId,long publicNetworkId,long managementNetworkId,long controlNetworkId,String zoneType) throws SQLException {
  s_logger.debug(""String_Node_Str"" + dataCenterId);
  PreparedStatement pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,dataCenterId);
  ResultSet rs=pstmt.executeQuery();
  if (!rs.next()) {
    s_logger.debug(""String_Node_Str"" + dataCenterId);
    return;
  }
  long ssvmId=rs.getLong(1);
  String state=rs.getString(2);
  boolean running=state.equals(""String_Node_Str"") | state.equals(""String_Node_Str"") | state.equals(""String_Node_Str"");
  String privateMac=rs.getString(3);
  String privateIp=rs.getString(4);
  String privateNetmask=rs.getString(5);
  String publicMac=rs.getString(6);
  String publicIp=rs.getString(7);
  String publicNetmask=rs.getString(8);
  String guestMac=rs.getString(9);
  String guestIp=rs.getString(10);
  String guestNetmask=rs.getString(11);
  String gateway=rs.getString(12);
  String type=rs.getString(13);
  rs.close();
  pstmt.close();
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setLong(1,dataCenterId);
  rs=pstmt.executeQuery();
  if (!rs.next()) {
    s_logger.debug(""String_Node_Str"" + dataCenterId);
    return;
  }
  String podGateway=rs.getString(1);
  rs.close();
  pstmt.close();
  pstmt=conn.prepareStatement(""String_Node_Str"");
  pstmt.setString(1,publicIp);
  rs=pstmt.executeQuery();
  String publicVlan=null;
  while (rs.next()) {
    publicVlan=rs.getString(1);
  }
  rs.close();
  pstmt.close();
  if (zoneType.equalsIgnoreCase(""String_Node_Str"")) {
    insertNic(conn,publicNetworkId,ssvmId,running,publicMac,publicIp,publicNetmask,""String_Node_Str"",gateway,publicVlan,""String_Node_Str"",true,2,""String_Node_Str"",null);
  }
 else {
    insertNic(conn,publicNetworkId,ssvmId,running,publicMac,publicIp,publicNetmask,""String_Node_Str"",gateway,publicVlan,""String_Node_Str"",true,2,""String_Node_Str"",null);
  }
  long controlNicId=insertNic(conn,controlNetworkId,ssvmId,running,guestMac,guestIp,guestNetmask,""String_Node_Str"",""String_Node_Str"",null,""String_Node_Str"",false,0,""String_Node_Str"",guestIp != null ? (ssvmId + guestIp) : null);
  if (guestIp != null) {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setLong(1,controlNicId);
    pstmt.setString(2,guestIp);
    pstmt.setLong(3,dataCenterId);
    pstmt.executeUpdate();
    pstmt.close();
  }
  long mgmtNicId=insertNic(conn,managementNetworkId,ssvmId,running,privateMac,privateIp,privateNetmask,""String_Node_Str"",podGateway,null,""String_Node_Str"",false,1,""String_Node_Str"",null);
  if (privateIp != null) {
    pstmt=conn.prepareStatement(""String_Node_Str"");
    pstmt.setLong(1,mgmtNicId);
    pstmt.setString(2,privateIp);
    pstmt.setLong(3,dataCenterId);
    pstmt.executeUpdate();
    pstmt.close();
  }
}"
89699,"@Override @DB public void destroyVolume(VolumeVO volume) throws ConcurrentOperationException {
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _volsDao.update(volume,Volume.Event.Destroy);
  long volumeId=volume.getId();
  _snapshotMgr.deletePoliciesForVolume(volumeId);
  VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
  if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
    _accountMgr.decrementResourceCount(volume.getAccountId(),ResourceType.volume);
  }
  txn.commit();
}","@Override @DB public void destroyVolume(VolumeVO volume) throws ConcurrentOperationException {
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _volsDao.update(volume,Volume.Event.Destroy);
  long volumeId=volume.getId();
  _snapshotMgr.deletePoliciesForVolume(volumeId);
  Long instanceId=volume.getInstanceId();
  VMInstanceVO vmInstance=null;
  if (instanceId != null) {
    vmInstance=_vmInstanceDao.findById(instanceId);
  }
  if (instanceId == null || (vmInstance.getType().equals(VirtualMachine.Type.User))) {
    _accountMgr.decrementResourceCount(volume.getAccountId(),ResourceType.volume);
  }
  txn.commit();
}"
89700,"@Override public boolean applyIpAssociations(Network network,boolean continueOnError) throws ResourceUnavailableException {
  List<IPAddressVO> userIps=_ipAddressDao.listByAssociatedNetwork(network.getId(),null);
  List<PublicIp> publicIps=new ArrayList<PublicIp>();
  if (userIps != null && !userIps.isEmpty()) {
    for (    IPAddressVO userIp : userIps) {
      PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),userIp.getMacAddress());
      publicIps.add(publicIp);
    }
  }
  boolean success=true;
  for (  NetworkElement element : _networkElements) {
    try {
      element.applyIps(network,publicIps);
    }
 catch (    ResourceUnavailableException e) {
      success=false;
      if (!continueOnError) {
        throw e;
      }
 else {
        s_logger.debug(""String_Node_Str"" + element.getName(),e);
      }
    }
  }
  if (success) {
    for (    IPAddressVO addr : userIps) {
      if (addr.getState() == IpAddress.State.Allocating) {
        addr.setAssociatedWithNetworkId(network.getId());
        markPublicIpAsAllocated(addr);
      }
 else       if (addr.getState() == IpAddress.State.Releasing) {
        if (cleanupIpResources(addr.getId(),Account.ACCOUNT_ID_SYSTEM,_accountMgr.getSystemAccount())) {
          _ipAddressDao.unassignIpAddress(addr.getId());
        }
 else {
          success=false;
          s_logger.warn(""String_Node_Str"" + addr.getId());
        }
      }
    }
  }
  return success;
}","@Override public boolean applyIpAssociations(Network network,boolean continueOnError) throws ResourceUnavailableException {
  List<IPAddressVO> userIps=_ipAddressDao.listByAssociatedNetwork(network.getId(),null);
  List<PublicIp> publicIps=new ArrayList<PublicIp>();
  if (userIps != null && !userIps.isEmpty()) {
    for (    IPAddressVO userIp : userIps) {
      PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),NetUtils.createSequenceBasedMacAddress(userIp.getMacAddress()));
      publicIps.add(publicIp);
    }
  }
  boolean success=true;
  for (  NetworkElement element : _networkElements) {
    try {
      element.applyIps(network,publicIps);
    }
 catch (    ResourceUnavailableException e) {
      success=false;
      if (!continueOnError) {
        throw e;
      }
 else {
        s_logger.debug(""String_Node_Str"" + element.getName(),e);
      }
    }
  }
  if (success) {
    for (    IPAddressVO addr : userIps) {
      if (addr.getState() == IpAddress.State.Allocating) {
        addr.setAssociatedWithNetworkId(network.getId());
        markPublicIpAsAllocated(addr);
      }
 else       if (addr.getState() == IpAddress.State.Releasing) {
        if (cleanupIpResources(addr.getId(),Account.ACCOUNT_ID_SYSTEM,_accountMgr.getSystemAccount())) {
          _ipAddressDao.unassignIpAddress(addr.getId());
        }
 else {
          success=false;
          s_logger.warn(""String_Node_Str"" + addr.getId());
        }
      }
    }
  }
  return success;
}"
89701,"@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile){
  DomainRouterVO router=profile.getVirtualMachine();
  NicProfile controlNic=null;
  for (  NicProfile nic : profile.getNics()) {
    if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {
      controlNic=nic;
    }
  }
  if (controlNic == null) {
    s_logger.error(""String_Node_Str"" + router);
    return false;
  }
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  boolean restartNetwork=true;
  if (profile.getParameter(Param.RestartNetwork) != null && (Boolean)profile.getParameter(Param.RestartNetwork) == false) {
    restartNetwork=false;
  }
  if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA && restartNetwork) {
    s_logger.debug(""String_Node_Str"");
    long networkId=router.getNetworkId();
    long ownerId=router.getAccountId();
    long zoneId=router.getDataCenterId();
    final List<IPAddressVO> userIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,null,null);
    List<PublicIpAddress> publicIps=new ArrayList<PublicIpAddress>();
    if (userIps != null && !userIps.isEmpty()) {
      for (      IPAddressVO userIp : userIps) {
        PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),userIp.getMacAddress());
        publicIps.add(publicIp);
      }
    }
    s_logger.debug(""String_Node_Str"" + publicIps.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
    if (!publicIps.isEmpty()) {
      createAssociateIPCommands(router,publicIps,cmds,0);
      List<RemoteAccessVpn> vpns=new ArrayList<RemoteAccessVpn>();
      List<PortForwardingRule> pfRules=new ArrayList<PortForwardingRule>();
      List<FirewallRule> staticNatFirewallRules=new ArrayList<FirewallRule>();
      for (      PublicIpAddress ip : publicIps) {
        pfRules.addAll(_pfRulesDao.listForApplication(ip.getId()));
        staticNatFirewallRules.addAll(_rulesDao.listByIpAndPurpose(ip.getId(),Purpose.StaticNat));
        RemoteAccessVpn vpn=_vpnDao.findById(ip.getId());
        if (vpn != null) {
          vpns.add(vpn);
        }
      }
      s_logger.debug(""String_Node_Str"" + pfRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!pfRules.isEmpty()) {
        createApplyPortForwardingRulesCommands(pfRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + staticNatFirewallRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!staticNatFirewallRules.isEmpty()) {
        List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
        for (        FirewallRule rule : staticNatFirewallRules) {
          staticNatRules.add(_rulesMgr.buildStaticNatRule(rule));
        }
        createApplyStaticNatRulesCommands(staticNatRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + vpns.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!vpns.isEmpty()) {
        for (        RemoteAccessVpn vpn : vpns) {
          createApplyVpnCommands(vpn,router,cmds);
        }
      }
      List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(networkId);
      List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
      for (      LoadBalancerVO lb : lbs) {
        List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
        lbRules.add(loadBalancing);
      }
      s_logger.debug(""String_Node_Str"" + lbRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!lbRules.isEmpty()) {
        createApplyLoadBalancingRulesCommands(lbRules,router,cmds);
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createDhcpEntriesCommands(router,cmds);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createVmDataCommands(router,cmds);
  cmds.addCommand(""String_Node_Str"",new NetworkUsageCommand(controlNic.getIp4Address(),router.getName(),""String_Node_Str""));
  return true;
}","@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile){
  DomainRouterVO router=profile.getVirtualMachine();
  NicProfile controlNic=null;
  for (  NicProfile nic : profile.getNics()) {
    if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {
      controlNic=nic;
    }
  }
  if (controlNic == null) {
    s_logger.error(""String_Node_Str"" + router);
    return false;
  }
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  boolean restartNetwork=true;
  if (profile.getParameter(Param.RestartNetwork) != null && (Boolean)profile.getParameter(Param.RestartNetwork) == false) {
    restartNetwork=false;
  }
  if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA && restartNetwork) {
    s_logger.debug(""String_Node_Str"");
    long networkId=router.getNetworkId();
    long ownerId=router.getAccountId();
    long zoneId=router.getDataCenterId();
    final List<IPAddressVO> userIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,null,null);
    List<PublicIpAddress> publicIps=new ArrayList<PublicIpAddress>();
    if (userIps != null && !userIps.isEmpty()) {
      for (      IPAddressVO userIp : userIps) {
        PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),NetUtils.createSequenceBasedMacAddress(userIp.getMacAddress()));
        publicIps.add(publicIp);
      }
    }
    s_logger.debug(""String_Node_Str"" + publicIps.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
    if (!publicIps.isEmpty()) {
      createAssociateIPCommands(router,publicIps,cmds,0);
      List<RemoteAccessVpn> vpns=new ArrayList<RemoteAccessVpn>();
      List<PortForwardingRule> pfRules=new ArrayList<PortForwardingRule>();
      List<FirewallRule> staticNatFirewallRules=new ArrayList<FirewallRule>();
      for (      PublicIpAddress ip : publicIps) {
        pfRules.addAll(_pfRulesDao.listForApplication(ip.getId()));
        staticNatFirewallRules.addAll(_rulesDao.listByIpAndPurpose(ip.getId(),Purpose.StaticNat));
        RemoteAccessVpn vpn=_vpnDao.findById(ip.getId());
        if (vpn != null) {
          vpns.add(vpn);
        }
      }
      s_logger.debug(""String_Node_Str"" + pfRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!pfRules.isEmpty()) {
        createApplyPortForwardingRulesCommands(pfRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + staticNatFirewallRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!staticNatFirewallRules.isEmpty()) {
        List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
        for (        FirewallRule rule : staticNatFirewallRules) {
          staticNatRules.add(_rulesMgr.buildStaticNatRule(rule));
        }
        createApplyStaticNatRulesCommands(staticNatRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + vpns.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!vpns.isEmpty()) {
        for (        RemoteAccessVpn vpn : vpns) {
          createApplyVpnCommands(vpn,router,cmds);
        }
      }
      List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(networkId);
      List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
      for (      LoadBalancerVO lb : lbs) {
        List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
        lbRules.add(loadBalancing);
      }
      s_logger.debug(""String_Node_Str"" + lbRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!lbRules.isEmpty()) {
        createApplyLoadBalancingRulesCommands(lbRules,router,cmds);
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createDhcpEntriesCommands(router,cmds);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createVmDataCommands(router,cmds);
  cmds.addCommand(""String_Node_Str"",new NetworkUsageCommand(controlNic.getIp4Address(),router.getName(),""String_Node_Str""));
  return true;
}"
89702,"@Override public boolean isVmSecurityGroupEnabled(Long vmId){
  VirtualMachine vm=_vmDao.findById(vmId);
  List<NicProfile> nics=_networkMgr.getNicProfiles(vm);
  for (  NicProfile nic : nics) {
    if (nic.isSecurityGroupEnabled() && vm.getHypervisorType() != HypervisorType.VMware) {
      return true;
    }
  }
  return false;
}","@Override public boolean isVmSecurityGroupEnabled(Long vmId){
  VirtualMachine vm=_vmDao.findByIdIncludingRemoved(vmId);
  List<NicProfile> nics=_networkMgr.getNicProfiles(vm);
  for (  NicProfile nic : nics) {
    if (nic.isSecurityGroupEnabled() && vm.getHypervisorType() != HypervisorType.VMware) {
      return true;
    }
  }
  return false;
}"
89703,"@Override public boolean isVmSecurityGroupEnabled(Long vmId){
  VirtualMachine vm=_vmDao.findById(vmId);
  List<NicProfile> nics=_networkMgr.getNicProfiles(vm);
  for (  NicProfile nic : nics) {
    if (nic.isSecurityGroupEnabled() && vm.getHypervisorType() != HypervisorType.VMware) {
      return true;
    }
  }
  return false;
}","@Override public boolean isVmSecurityGroupEnabled(Long vmId){
  VirtualMachine vm=_vmDao.findByIdIncludingRemoved(vmId);
  List<NicProfile> nics=_networkMgr.getNicProfiles(vm);
  for (  NicProfile nic : nics) {
    if (nic.isSecurityGroupEnabled() && vm.getHypervisorType() != HypervisorType.VMware) {
      return true;
    }
  }
  return false;
}"
89704,"@Override public boolean applyIpAssociations(Network network,boolean continueOnError) throws ResourceUnavailableException {
  List<IPAddressVO> userIps=_ipAddressDao.listByAssociatedNetwork(network.getId(),null);
  List<PublicIp> publicIps=new ArrayList<PublicIp>();
  if (userIps != null && !userIps.isEmpty()) {
    for (    IPAddressVO userIp : userIps) {
      PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),userIp.getMacAddress());
      publicIps.add(publicIp);
    }
  }
  boolean success=true;
  for (  NetworkElement element : _networkElements) {
    try {
      element.applyIps(network,publicIps);
    }
 catch (    ResourceUnavailableException e) {
      success=false;
      if (!continueOnError) {
        throw e;
      }
 else {
        s_logger.debug(""String_Node_Str"" + element.getName(),e);
      }
    }
  }
  if (success) {
    for (    IPAddressVO addr : userIps) {
      if (addr.getState() == IpAddress.State.Allocating) {
        addr.setAssociatedWithNetworkId(network.getId());
        markPublicIpAsAllocated(addr);
      }
 else       if (addr.getState() == IpAddress.State.Releasing) {
        if (cleanupIpResources(addr.getId(),Account.ACCOUNT_ID_SYSTEM,_accountMgr.getSystemAccount())) {
          _ipAddressDao.unassignIpAddress(addr.getId());
        }
 else {
          success=false;
          s_logger.warn(""String_Node_Str"" + addr.getId());
        }
      }
    }
  }
  return success;
}","@Override public boolean applyIpAssociations(Network network,boolean continueOnError) throws ResourceUnavailableException {
  List<IPAddressVO> userIps=_ipAddressDao.listByAssociatedNetwork(network.getId(),null);
  List<PublicIp> publicIps=new ArrayList<PublicIp>();
  if (userIps != null && !userIps.isEmpty()) {
    for (    IPAddressVO userIp : userIps) {
      PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),NetUtils.createSequenceBasedMacAddress(userIp.getMacAddress()));
      publicIps.add(publicIp);
    }
  }
  boolean success=true;
  for (  NetworkElement element : _networkElements) {
    try {
      element.applyIps(network,publicIps);
    }
 catch (    ResourceUnavailableException e) {
      success=false;
      if (!continueOnError) {
        throw e;
      }
 else {
        s_logger.debug(""String_Node_Str"" + element.getName(),e);
      }
    }
  }
  if (success) {
    for (    IPAddressVO addr : userIps) {
      if (addr.getState() == IpAddress.State.Allocating) {
        addr.setAssociatedWithNetworkId(network.getId());
        markPublicIpAsAllocated(addr);
      }
 else       if (addr.getState() == IpAddress.State.Releasing) {
        if (cleanupIpResources(addr.getId(),Account.ACCOUNT_ID_SYSTEM,_accountMgr.getSystemAccount())) {
          _ipAddressDao.unassignIpAddress(addr.getId());
        }
 else {
          success=false;
          s_logger.warn(""String_Node_Str"" + addr.getId());
        }
      }
    }
  }
  return success;
}"
89705,"@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile){
  DomainRouterVO router=profile.getVirtualMachine();
  NicProfile controlNic=null;
  for (  NicProfile nic : profile.getNics()) {
    if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {
      controlNic=nic;
    }
  }
  if (controlNic == null) {
    s_logger.error(""String_Node_Str"" + router);
    return false;
  }
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  boolean restartNetwork=true;
  if (profile.getParameter(Param.RestartNetwork) != null && (Boolean)profile.getParameter(Param.RestartNetwork) == false) {
    restartNetwork=false;
  }
  if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA && restartNetwork) {
    s_logger.debug(""String_Node_Str"");
    long networkId=router.getNetworkId();
    long ownerId=router.getAccountId();
    long zoneId=router.getDataCenterId();
    final List<IPAddressVO> userIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,null,null);
    List<PublicIpAddress> publicIps=new ArrayList<PublicIpAddress>();
    if (userIps != null && !userIps.isEmpty()) {
      for (      IPAddressVO userIp : userIps) {
        PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),userIp.getMacAddress());
        publicIps.add(publicIp);
      }
    }
    s_logger.debug(""String_Node_Str"" + publicIps.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
    if (!publicIps.isEmpty()) {
      createAssociateIPCommands(router,publicIps,cmds,0);
      List<RemoteAccessVpn> vpns=new ArrayList<RemoteAccessVpn>();
      List<PortForwardingRule> pfRules=new ArrayList<PortForwardingRule>();
      List<FirewallRule> staticNatFirewallRules=new ArrayList<FirewallRule>();
      for (      PublicIpAddress ip : publicIps) {
        pfRules.addAll(_pfRulesDao.listForApplication(ip.getId()));
        staticNatFirewallRules.addAll(_rulesDao.listByIpAndPurpose(ip.getId(),Purpose.StaticNat));
        RemoteAccessVpn vpn=_vpnDao.findById(ip.getId());
        if (vpn != null) {
          vpns.add(vpn);
        }
      }
      s_logger.debug(""String_Node_Str"" + pfRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!pfRules.isEmpty()) {
        createApplyPortForwardingRulesCommands(pfRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + staticNatFirewallRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!staticNatFirewallRules.isEmpty()) {
        List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
        for (        FirewallRule rule : staticNatFirewallRules) {
          staticNatRules.add(_rulesMgr.buildStaticNatRule(rule));
        }
        createApplyStaticNatRulesCommands(staticNatRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + vpns.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!vpns.isEmpty()) {
        for (        RemoteAccessVpn vpn : vpns) {
          createApplyVpnCommands(vpn,router,cmds);
        }
      }
      List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(networkId);
      List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
      for (      LoadBalancerVO lb : lbs) {
        List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
        lbRules.add(loadBalancing);
      }
      s_logger.debug(""String_Node_Str"" + lbRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!lbRules.isEmpty()) {
        createApplyLoadBalancingRulesCommands(lbRules,router,cmds);
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createDhcpEntriesCommands(router,cmds);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createVmDataCommands(router,cmds);
  cmds.addCommand(""String_Node_Str"",new NetworkUsageCommand(controlNic.getIp4Address(),router.getName(),""String_Node_Str""));
  return true;
}","@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile){
  DomainRouterVO router=profile.getVirtualMachine();
  NicProfile controlNic=null;
  for (  NicProfile nic : profile.getNics()) {
    if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {
      controlNic=nic;
    }
  }
  if (controlNic == null) {
    s_logger.error(""String_Node_Str"" + router);
    return false;
  }
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  boolean restartNetwork=true;
  if (profile.getParameter(Param.RestartNetwork) != null && (Boolean)profile.getParameter(Param.RestartNetwork) == false) {
    restartNetwork=false;
  }
  if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA && restartNetwork) {
    s_logger.debug(""String_Node_Str"");
    long networkId=router.getNetworkId();
    long ownerId=router.getAccountId();
    long zoneId=router.getDataCenterId();
    final List<IPAddressVO> userIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,null,null);
    List<PublicIpAddress> publicIps=new ArrayList<PublicIpAddress>();
    if (userIps != null && !userIps.isEmpty()) {
      for (      IPAddressVO userIp : userIps) {
        PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),NetUtils.createSequenceBasedMacAddress(userIp.getMacAddress()));
        publicIps.add(publicIp);
      }
    }
    s_logger.debug(""String_Node_Str"" + publicIps.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
    if (!publicIps.isEmpty()) {
      createAssociateIPCommands(router,publicIps,cmds,0);
      List<RemoteAccessVpn> vpns=new ArrayList<RemoteAccessVpn>();
      List<PortForwardingRule> pfRules=new ArrayList<PortForwardingRule>();
      List<FirewallRule> staticNatFirewallRules=new ArrayList<FirewallRule>();
      for (      PublicIpAddress ip : publicIps) {
        pfRules.addAll(_pfRulesDao.listForApplication(ip.getId()));
        staticNatFirewallRules.addAll(_rulesDao.listByIpAndPurpose(ip.getId(),Purpose.StaticNat));
        RemoteAccessVpn vpn=_vpnDao.findById(ip.getId());
        if (vpn != null) {
          vpns.add(vpn);
        }
      }
      s_logger.debug(""String_Node_Str"" + pfRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!pfRules.isEmpty()) {
        createApplyPortForwardingRulesCommands(pfRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + staticNatFirewallRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!staticNatFirewallRules.isEmpty()) {
        List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
        for (        FirewallRule rule : staticNatFirewallRules) {
          staticNatRules.add(_rulesMgr.buildStaticNatRule(rule));
        }
        createApplyStaticNatRulesCommands(staticNatRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + vpns.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!vpns.isEmpty()) {
        for (        RemoteAccessVpn vpn : vpns) {
          createApplyVpnCommands(vpn,router,cmds);
        }
      }
      List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(networkId);
      List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
      for (      LoadBalancerVO lb : lbs) {
        List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
        lbRules.add(loadBalancing);
      }
      s_logger.debug(""String_Node_Str"" + lbRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!lbRules.isEmpty()) {
        createApplyLoadBalancingRulesCommands(lbRules,router,cmds);
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createDhcpEntriesCommands(router,cmds);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createVmDataCommands(router,cmds);
  cmds.addCommand(""String_Node_Str"",new NetworkUsageCommand(controlNic.getIp4Address(),router.getName(),""String_Node_Str""));
  return true;
}"
89706,"protected AgentAttache(final long id,boolean maintenance){
  _id=id;
  _waitForList=new ConcurrentHashMap<Long,Listener>();
  _currentSequence=null;
  _maintenance=maintenance;
  _requests=new LinkedList<Request>();
}","protected AgentAttache(AgentManager agentMgr,final long id,boolean maintenance){
  _id=id;
  _waitForList=new ConcurrentHashMap<Long,Listener>();
  _currentSequence=null;
  _maintenance=maintenance;
  _requests=new LinkedList<Request>();
  _agentMgr=agentMgr;
}"
89707,"public boolean processAnswers(final long seq,final Response resp){
  resp.log(_id,""String_Node_Str"");
  final Answer[] answers=resp.getAnswers();
  boolean processed=false;
  Listener monitor=getListener(seq);
  if (monitor == null) {
    if (answers[0] != null && answers[0].getResult()) {
      processed=true;
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(log(seq,""String_Node_Str""));
    }
  }
 else {
    processed=monitor.processAnswers(_id,seq,answers);
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(log(seq,(processed ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""));
    }
    if (!monitor.isRecurring()) {
      unregisterListener(seq);
    }
  }
  if (resp.executeInSequence()) {
    sendNext(seq);
  }
  return processed;
}","public boolean processAnswers(final long seq,final Response resp){
  resp.log(_id,""String_Node_Str"");
  final Answer[] answers=resp.getAnswers();
  boolean processed=false;
  Listener monitor=getListener(seq);
  if (monitor == null) {
    if (answers[0] != null && answers[0].getResult()) {
      processed=true;
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(log(seq,""String_Node_Str""));
    }
  }
 else {
    processed=monitor.processAnswers(_id,seq,answers);
    if (s_logger.isTraceEnabled()) {
      s_logger.trace(log(seq,(processed ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str""));
    }
    if (!monitor.isRecurring()) {
      unregisterListener(seq);
    }
  }
  if (resp.executeInSequence()) {
    sendNext(seq);
  }
  _agentMgr.notifyAnswersFromAttache(_id,seq,answers);
  return processed;
}"
89708,"protected AgentAttache createAttache(long id,HostVO server,ServerResource resource){
  if (resource instanceof DummySecondaryStorageResource || resource instanceof KvmDummyResourceBase) {
    return new DummyAttache(id,false);
  }
  s_logger.debug(""String_Node_Str"" + id);
  final DirectAgentAttache attache=new DirectAgentAttache(id,resource,server.getStatus() == Status.Maintenance || server.getStatus() == Status.ErrorInMaintenance || server.getStatus() == Status.PrepareForMaintenance,this);
  AgentAttache old=null;
synchronized (_agents) {
    old=_agents.get(id);
    _agents.put(id,attache);
  }
  if (old != null) {
    old.disconnect(Status.Removed);
  }
  return attache;
}","protected AgentAttache createAttache(long id,HostVO server,ServerResource resource){
  if (resource instanceof DummySecondaryStorageResource || resource instanceof KvmDummyResourceBase) {
    return new DummyAttache(this,id,false);
  }
  s_logger.debug(""String_Node_Str"" + id);
  final DirectAgentAttache attache=new DirectAgentAttache(this,id,resource,server.getStatus() == Status.Maintenance || server.getStatus() == Status.ErrorInMaintenance || server.getStatus() == Status.PrepareForMaintenance,this);
  AgentAttache old=null;
synchronized (_agents) {
    old=_agents.get(id);
    _agents.put(id,attache);
  }
  if (old != null) {
    old.disconnect(Status.Removed);
  }
  return attache;
}"
89709,"public ClusteredAgentAttache(long id,Link link,boolean maintenance){
  super(id,link,maintenance);
  _forward=link == null;
}","public ClusteredAgentAttache(AgentManager agentMgr,long id,Link link,boolean maintenance){
  super(agentMgr,id,link,maintenance);
  _forward=link == null;
}"
89710,"@Override protected AgentAttache createAttache(long id,HostVO server,ServerResource resource){
  if (resource instanceof DummySecondaryStorageResource) {
    return new DummyAttache(id,false);
  }
  s_logger.debug(""String_Node_Str"" + id);
  final DirectAgentAttache attache=new ClusteredDirectAgentAttache(id,_nodeId,resource,server.getStatus() == Status.Maintenance || server.getStatus() == Status.ErrorInMaintenance || server.getStatus() == Status.PrepareForMaintenance,this);
  AgentAttache old=null;
synchronized (_agents) {
    old=_agents.get(id);
    _agents.put(id,attache);
  }
  if (old != null) {
    old.disconnect(Status.Removed);
  }
  return attache;
}","@Override protected AgentAttache createAttache(long id,HostVO server,ServerResource resource){
  if (resource instanceof DummySecondaryStorageResource) {
    return new DummyAttache(this,id,false);
  }
  s_logger.debug(""String_Node_Str"" + id);
  final DirectAgentAttache attache=new ClusteredDirectAgentAttache(this,id,_nodeId,resource,server.getStatus() == Status.Maintenance || server.getStatus() == Status.ErrorInMaintenance || server.getStatus() == Status.PrepareForMaintenance,this);
  AgentAttache old=null;
synchronized (_agents) {
    old=_agents.get(id);
    _agents.put(id,attache);
  }
  if (old != null) {
    old.disconnect(Status.Removed);
  }
  return attache;
}"
89711,"public ClusteredDirectAgentAttache(long id,long mgmtId,ServerResource resource,boolean maintenance,ClusteredAgentManagerImpl mgr){
  super(id,resource,maintenance,mgr);
  _mgr=mgr;
  _nodeId=mgmtId;
}","public ClusteredDirectAgentAttache(AgentManager agentMgr,long id,long mgmtId,ServerResource resource,boolean maintenance,ClusteredAgentManagerImpl mgr){
  super(agentMgr,id,resource,maintenance,mgr);
  _mgr=mgr;
  _nodeId=mgmtId;
}"
89712,"public ConnectedAgentAttache(final long id,final Link link,boolean maintenance){
  super(id,maintenance);
  _link=link;
}","public ConnectedAgentAttache(AgentManager agentMgr,final long id,final Link link,boolean maintenance){
  super(agentMgr,id,maintenance);
  _link=link;
}"
89713,"public DirectAgentAttache(long id,ServerResource resource,boolean maintenance,AgentManagerImpl mgr){
  super(id,maintenance);
  _resource=resource;
  _mgr=mgr;
}","public DirectAgentAttache(AgentManager agentMgr,long id,ServerResource resource,boolean maintenance,AgentManagerImpl mgr){
  super(agentMgr,id,maintenance);
  _resource=resource;
  _mgr=mgr;
}"
89714,"public DummyAttache(long id,boolean maintenance){
  super(id,maintenance);
}","public DummyAttache(AgentManager agentMgr,long id,boolean maintenance){
  super(agentMgr,id,maintenance);
}"
89715,"@Override public List<Long> listRunningSecStorageOrderByLoad(SecondaryStorageVm.Role role,long zoneId){
  List<Long> l=new ArrayList<Long>();
  Transaction txn=Transaction.currentTxn();
  ;
  PreparedStatement pstmt=null;
  try {
    String sql;
    if (role == null)     sql=""String_Node_Str"" + ""String_Node_Str"";
 else     sql=""String_Node_Str"" + ""String_Node_Str"";
    pstmt=txn.prepareAutoCloseStatement(sql);
    if (role == null) {
      pstmt.setLong(1,zoneId);
    }
 else {
      pstmt.setLong(1,zoneId);
      pstmt.setString(2,role.toString());
    }
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      l.add(rs.getLong(1));
    }
  }
 catch (  SQLException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  return l;
}","@Override public List<Long> listRunningSecStorageOrderByLoad(SecondaryStorageVm.Role role,long zoneId){
  List<Long> l=new ArrayList<Long>();
  Transaction txn=Transaction.currentTxn();
  ;
  PreparedStatement pstmt=null;
  try {
    String sql;
    if (role == null)     sql=""String_Node_Str"";
 else     sql=""String_Node_Str"";
    pstmt=txn.prepareAutoCloseStatement(sql);
    if (role == null) {
      pstmt.setLong(1,zoneId);
    }
 else {
      pstmt.setLong(1,zoneId);
      pstmt.setString(2,role.toString());
    }
    ResultSet rs=pstmt.executeQuery();
    while (rs.next()) {
      l.add(rs.getLong(1));
    }
  }
 catch (  SQLException e) {
    s_logger.error(""String_Node_Str"",e);
  }
  return l;
}"
89716,"@Override public ItWorkVO findByOutstandingWork(long instanceId,State state){
  SearchCriteria<ItWorkVO> sc=AllFieldsSearch.create();
  sc.setParameters(""String_Node_Str"",instanceId);
  sc.setParameters(""String_Node_Str"",state);
  sc.setParameters(""String_Node_Str"",Step.Done);
  return findOneBy(sc);
}","@Override public ItWorkVO findByOutstandingWork(long instanceId,State state){
  SearchCriteria<ItWorkVO> sc=OutstandingWorkSearch.create();
  sc.setParameters(""String_Node_Str"",instanceId);
  sc.setParameters(""String_Node_Str"",state);
  sc.setParameters(""String_Node_Str"",Step.Done);
  return findOneBy(sc);
}"
89717,"protected ItWorkDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getInstanceId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getStep(),Op.NEQ);
  AllFieldsSearch.done();
  CleanupSearch=createSearchBuilder();
  CleanupSearch.and(""String_Node_Str"",CleanupSearch.entity().getType(),Op.IN);
  CleanupSearch.and(""String_Node_Str"",CleanupSearch.entity().getUpdatedAt(),Op.LT);
  CleanupSearch.done();
  OutstandingWorkSearch=createSearchBuilder();
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getInstanceId(),Op.EQ);
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getType(),Op.EQ);
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getStep(),Op.NEQ);
  OutstandingWorkSearch.done();
  WorkInProgressSearch=createSearchBuilder();
  WorkInProgressSearch.and(""String_Node_Str"",WorkInProgressSearch.entity().getManagementServerId(),Op.EQ);
  WorkInProgressSearch.and(""String_Node_Str"",WorkInProgressSearch.entity().getStep(),Op.NIN);
  WorkInProgressSearch.done();
}","protected ItWorkDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getInstanceId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getStep(),Op.EQ);
  AllFieldsSearch.done();
  CleanupSearch=createSearchBuilder();
  CleanupSearch.and(""String_Node_Str"",CleanupSearch.entity().getType(),Op.IN);
  CleanupSearch.and(""String_Node_Str"",CleanupSearch.entity().getUpdatedAt(),Op.LT);
  CleanupSearch.done();
  OutstandingWorkSearch=createSearchBuilder();
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getInstanceId(),Op.EQ);
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getType(),Op.EQ);
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getStep(),Op.NEQ);
  OutstandingWorkSearch.done();
  WorkInProgressSearch=createSearchBuilder();
  WorkInProgressSearch.and(""String_Node_Str"",WorkInProgressSearch.entity().getManagementServerId(),Op.EQ);
  WorkInProgressSearch.and(""String_Node_Str"",WorkInProgressSearch.entity().getStep(),Op.NIN);
  WorkInProgressSearch.done();
}"
89718,"@Override public ItWorkVO findByOutstandingWork(long instanceId,State state){
  SearchCriteria<ItWorkVO> sc=AllFieldsSearch.create();
  sc.setParameters(""String_Node_Str"",instanceId);
  sc.setParameters(""String_Node_Str"",state);
  sc.setParameters(""String_Node_Str"",Step.Done);
  return findOneBy(sc);
}","@Override public ItWorkVO findByOutstandingWork(long instanceId,State state){
  SearchCriteria<ItWorkVO> sc=OutstandingWorkSearch.create();
  sc.setParameters(""String_Node_Str"",instanceId);
  sc.setParameters(""String_Node_Str"",state);
  sc.setParameters(""String_Node_Str"",Step.Done);
  return findOneBy(sc);
}"
89719,"protected ItWorkDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getInstanceId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getStep(),Op.NEQ);
  AllFieldsSearch.done();
  CleanupSearch=createSearchBuilder();
  CleanupSearch.and(""String_Node_Str"",CleanupSearch.entity().getType(),Op.IN);
  CleanupSearch.and(""String_Node_Str"",CleanupSearch.entity().getUpdatedAt(),Op.LT);
  CleanupSearch.done();
  OutstandingWorkSearch=createSearchBuilder();
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getInstanceId(),Op.EQ);
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getType(),Op.EQ);
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getStep(),Op.NEQ);
  OutstandingWorkSearch.done();
  WorkInProgressSearch=createSearchBuilder();
  WorkInProgressSearch.and(""String_Node_Str"",WorkInProgressSearch.entity().getManagementServerId(),Op.EQ);
  WorkInProgressSearch.and(""String_Node_Str"",WorkInProgressSearch.entity().getStep(),Op.NIN);
  WorkInProgressSearch.done();
}","protected ItWorkDaoImpl(){
  super();
  AllFieldsSearch=createSearchBuilder();
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getInstanceId(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getType(),Op.EQ);
  AllFieldsSearch.and(""String_Node_Str"",AllFieldsSearch.entity().getStep(),Op.EQ);
  AllFieldsSearch.done();
  CleanupSearch=createSearchBuilder();
  CleanupSearch.and(""String_Node_Str"",CleanupSearch.entity().getType(),Op.IN);
  CleanupSearch.and(""String_Node_Str"",CleanupSearch.entity().getUpdatedAt(),Op.LT);
  CleanupSearch.done();
  OutstandingWorkSearch=createSearchBuilder();
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getInstanceId(),Op.EQ);
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getType(),Op.EQ);
  OutstandingWorkSearch.and(""String_Node_Str"",OutstandingWorkSearch.entity().getStep(),Op.NEQ);
  OutstandingWorkSearch.done();
  WorkInProgressSearch=createSearchBuilder();
  WorkInProgressSearch.and(""String_Node_Str"",WorkInProgressSearch.entity().getManagementServerId(),Op.EQ);
  WorkInProgressSearch.and(""String_Node_Str"",WorkInProgressSearch.entity().getStep(),Op.NIN);
  WorkInProgressSearch.done();
}"
89720,"/** 
 * This is added to allow calling agent control service from within the resource
 * @return
 */
public IAgentControl getAgentControl();","/** 
 * This is added to allow calling agent control service from within the resource
 * @return
 */
IAgentControl getAgentControl();"
89721,"/** 
 * disconnected() is called when the connection is down between the agent and the management server.  If there are any cleanups, this is the time to do it.
 */
public void disconnected();","/** 
 * disconnected() is called when the connection is down between the agent and the management server.  If there are any cleanups, this is the time to do it.
 */
void disconnected();"
89722,public void setAgentControl(IAgentControl agentControl);,void setAgentControl(IAgentControl agentControl);
89723,"/** 
 * Generate a startup command containing information regarding the resource.
 * @return StartupCommand ready to be sent to the management server.
 */
public StartupCommand[] initialize();","/** 
 * Generate a startup command containing information regarding the resource.
 * @return StartupCommand ready to be sent to the management server.
 */
StartupCommand[] initialize();"
89724,"/** 
 * @param id id of the server to put in the PingCommand
 * @return PingCommand
 */
public PingCommand getCurrentStatus(long id);","/** 
 * @param id id of the server to put in the PingCommand
 * @return PingCommand
 */
PingCommand getCurrentStatus(long id);"
89725,"/** 
 * Execute the request coming from the computing server.
 * @param cmd Command to execute.
 * @return Answer
 */
public Answer executeRequest(Command cmd);","/** 
 * Execute the request coming from the computing server.
 * @param cmd Command to execute.
 * @return Answer
 */
Answer executeRequest(Command cmd);"
89726,"/** 
 * This is added to allow calling agent control service from within the resource
 * @return
 */
public IAgentControl getAgentControl();","/** 
 * This is added to allow calling agent control service from within the resource
 * @return
 */
IAgentControl getAgentControl();"
89727,"/** 
 * disconnected() is called when the connection is down between the agent and the management server.  If there are any cleanups, this is the time to do it.
 */
public void disconnected();","/** 
 * disconnected() is called when the connection is down between the agent and the management server.  If there are any cleanups, this is the time to do it.
 */
void disconnected();"
89728,public void setAgentControl(IAgentControl agentControl);,void setAgentControl(IAgentControl agentControl);
89729,"/** 
 * Generate a startup command containing information regarding the resource.
 * @return StartupCommand ready to be sent to the management server.
 */
public StartupCommand[] initialize();","/** 
 * Generate a startup command containing information regarding the resource.
 * @return StartupCommand ready to be sent to the management server.
 */
StartupCommand[] initialize();"
89730,"/** 
 * @param id id of the server to put in the PingCommand
 * @return PingCommand
 */
public PingCommand getCurrentStatus(long id);","/** 
 * @param id id of the server to put in the PingCommand
 * @return PingCommand
 */
PingCommand getCurrentStatus(long id);"
89731,"/** 
 * Execute the request coming from the computing server.
 * @param cmd Command to execute.
 * @return Answer
 */
public Answer executeRequest(Command cmd);","/** 
 * Execute the request coming from the computing server.
 * @param cmd Command to execute.
 * @return Answer
 */
Answer executeRequest(Command cmd);"
89732,"@Override @DB public boolean delete(long userId,long templateId,Long zoneId){
  boolean success=true;
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String zoneName;
  List<HostVO> secondaryStorageHosts;
  if (!template.isCrossZones() && zoneId != null) {
    DataCenterVO zone=_dcDao.findById(zoneId);
    zoneName=zone.getName();
    secondaryStorageHosts=new ArrayList<HostVO>();
    secondaryStorageHosts.add(_hostDao.findSecondaryStorageHost(zoneId));
  }
 else {
    zoneName=""String_Node_Str"";
    secondaryStorageHosts=_hostDao.listSecondaryStorageHosts();
  }
  s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zoneName);
  for (  HostVO secondaryStorageHost : secondaryStorageHosts) {
    long hostId=secondaryStorageHost.getId();
    List<VMTemplateHostVO> templateHostVOs=_tmpltHostDao.listByHostTemplate(hostId,templateId);
    for (    VMTemplateHostVO templateHostVO : templateHostVOs) {
      if (templateHostVO.getDownloadState() == Status.DOWNLOAD_IN_PROGRESS) {
        String errorMsg=""String_Node_Str"";
        s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ secondaryStorageHost.getName()+ ""String_Node_Str"");
        throw new CloudRuntimeException(errorMsg);
      }
    }
  }
  Account account=_accountDao.findById(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  for (  HostVO secondaryStorageHost : secondaryStorageHosts) {
    long hostId=secondaryStorageHost.getId();
    long sZoneId=secondaryStorageHost.getDataCenterId();
    List<VMTemplateHostVO> templateHostVOs=_tmpltHostDao.listByHostTemplate(hostId,templateId);
    for (    VMTemplateHostVO templateHostVO : templateHostVOs) {
      VMTemplateHostVO lock=_tmpltHostDao.acquireInLockTable(templateHostVO.getId());
      try {
        if (lock == null) {
          s_logger.debug(""String_Node_Str"" + templateHostVO.getId());
          success=false;
          break;
        }
        templateHostVO.setDestroyed(true);
        _tmpltHostDao.update(templateHostVO.getId(),templateHostVO);
        VMTemplateZoneVO templateZone=_tmpltZoneDao.findByZoneTemplate(sZoneId,templateId);
        if (templateZone != null) {
          _tmpltZoneDao.remove(templateZone.getId());
        }
        UsageEventVO usageEvent=new UsageEventVO(eventType,account.getId(),sZoneId,templateId,null);
        _usageEventDao.persist(usageEvent);
      }
  finally {
        if (lock != null) {
          _tmpltHostDao.releaseFromLockTable(lock.getId());
        }
      }
    }
    if (!success) {
      break;
    }
  }
  s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zoneName);
  if (success && (_tmpltHostDao.listByTemplateId(templateId).size() == 0)) {
    long accountId=template.getAccountId();
    VMTemplateVO lock=_tmpltDao.acquireInLockTable(templateId);
    try {
      if (lock == null) {
        s_logger.debug(""String_Node_Str"" + templateId);
        success=false;
      }
 else       if (_tmpltDao.remove(templateId)) {
        _accountMgr.decrementResourceCount(accountId,ResourceType.template);
      }
    }
  finally {
      if (lock != null) {
        _tmpltDao.releaseFromLockTable(lock.getId());
      }
    }
    s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str"");
  }
  return success;
}","@Override @DB public boolean delete(long userId,long templateId,Long zoneId){
  boolean success=true;
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String zoneName;
  List<HostVO> secondaryStorageHosts;
  if (!template.isCrossZones() && zoneId != null) {
    DataCenterVO zone=_dcDao.findById(zoneId);
    zoneName=zone.getName();
    secondaryStorageHosts=new ArrayList<HostVO>();
    secondaryStorageHosts.add(_hostDao.findSecondaryStorageHost(zoneId));
  }
 else {
    zoneName=""String_Node_Str"";
    secondaryStorageHosts=_hostDao.listSecondaryStorageHosts();
  }
  s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zoneName);
  for (  HostVO secondaryStorageHost : secondaryStorageHosts) {
    long hostId=secondaryStorageHost.getId();
    List<VMTemplateHostVO> templateHostVOs=_tmpltHostDao.listByHostTemplate(hostId,templateId);
    for (    VMTemplateHostVO templateHostVO : templateHostVOs) {
      if (templateHostVO.getDownloadState() == Status.DOWNLOAD_IN_PROGRESS) {
        String errorMsg=""String_Node_Str"";
        s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ secondaryStorageHost.getName()+ ""String_Node_Str"");
        throw new CloudRuntimeException(errorMsg);
      }
    }
  }
  Account account=_accountDao.findByIdIncludingRemoved(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  for (  HostVO secondaryStorageHost : secondaryStorageHosts) {
    long hostId=secondaryStorageHost.getId();
    long sZoneId=secondaryStorageHost.getDataCenterId();
    List<VMTemplateHostVO> templateHostVOs=_tmpltHostDao.listByHostTemplate(hostId,templateId);
    for (    VMTemplateHostVO templateHostVO : templateHostVOs) {
      VMTemplateHostVO lock=_tmpltHostDao.acquireInLockTable(templateHostVO.getId());
      try {
        if (lock == null) {
          s_logger.debug(""String_Node_Str"" + templateHostVO.getId());
          success=false;
          break;
        }
        templateHostVO.setDestroyed(true);
        _tmpltHostDao.update(templateHostVO.getId(),templateHostVO);
        VMTemplateZoneVO templateZone=_tmpltZoneDao.findByZoneTemplate(sZoneId,templateId);
        if (templateZone != null) {
          _tmpltZoneDao.remove(templateZone.getId());
        }
        UsageEventVO usageEvent=new UsageEventVO(eventType,account.getId(),sZoneId,templateId,null);
        _usageEventDao.persist(usageEvent);
      }
  finally {
        if (lock != null) {
          _tmpltHostDao.releaseFromLockTable(lock.getId());
        }
      }
    }
    if (!success) {
      break;
    }
  }
  s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zoneName);
  if (success && (_tmpltHostDao.listByTemplateId(templateId).size() == 0)) {
    long accountId=template.getAccountId();
    VMTemplateVO lock=_tmpltDao.acquireInLockTable(templateId);
    try {
      if (lock == null) {
        s_logger.debug(""String_Node_Str"" + templateId);
        success=false;
      }
 else       if (_tmpltDao.remove(templateId)) {
        _accountMgr.decrementResourceCount(accountId,ResourceType.template);
      }
    }
  finally {
      if (lock != null) {
        _tmpltDao.releaseFromLockTable(lock.getId());
      }
    }
    s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str"");
  }
  return success;
}"
89733,"@Override public List<ServiceOfferingVO> searchForServiceOfferings(ListServiceOfferingsCmd cmd){
  Filter searchFilter=new Filter(ServiceOfferingVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
  Account account=UserContext.current().getCaller();
  Object name=cmd.getServiceOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long vmId=cmd.getVirtualMachineId();
  Long domainId=cmd.getDomainId();
  if (domainId != null) {
    if (account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      return _offeringsDao.findServiceOfferingByDomainId(domainId);
    }
 else {
      if (isPermissible(account.getDomainId(),domainId)) {
        return _offeringsDao.findServiceOfferingByDomainId(domainId);
      }
 else {
        throw new PermissionDeniedException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
      }
    }
  }
  if ((account.getType() == Account.ACCOUNT_TYPE_NORMAL || account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN)) {
    return searchServiceOfferingsInternal(account,name,id,vmId,keyword,searchFilter);
  }
  if (keyword != null) {
    SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
 else   if (vmId != null) {
    UserVmVO vmInstance=_userVmDao.findById(vmId);
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
    if ((account != null) && !isAdmin(account.getType())) {
      if (account.getId() != vmInstance.getAccountId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
      }
    }
    ServiceOfferingVO offering=_offeringsDao.findById(vmInstance.getServiceOfferingId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  return _offeringsDao.search(sc,searchFilter);
}","@Override public List<ServiceOfferingVO> searchForServiceOfferings(ListServiceOfferingsCmd cmd){
  Filter searchFilter=new Filter(ServiceOfferingVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
  Account account=UserContext.current().getCaller();
  Object name=cmd.getServiceOfferingName();
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long vmId=cmd.getVirtualMachineId();
  Long domainId=cmd.getDomainId();
  if (domainId != null) {
    if (account.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      return _offeringsDao.findServiceOfferingByDomainId(domainId);
    }
 else {
      if (isPermissible(account.getDomainId(),domainId)) {
        return _offeringsDao.findServiceOfferingByDomainId(domainId);
      }
 else {
        throw new PermissionDeniedException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
      }
    }
  }
  if ((account.getType() == Account.ACCOUNT_TYPE_NORMAL || account.getType() == Account.ACCOUNT_TYPE_DOMAIN_ADMIN)) {
    return searchServiceOfferingsInternal(account,name,id,vmId,keyword,searchFilter);
  }
  if (keyword != null) {
    SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
 else   if (vmId != null) {
    UserVmVO vmInstance=_userVmDao.findById(vmId);
    if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
    }
    if ((account != null) && !isAdmin(account.getType())) {
      if (account.getId() != vmInstance.getAccountId()) {
        throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
      }
    }
    ServiceOfferingVO offering=_offeringsDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (name != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
  return _offeringsDao.search(sc,searchFilter);
}"
89734,"@Override @ActionEvent(eventType=EventTypes.EVENT_VM_UPGRADE,eventDescription=""String_Node_Str"") public UserVm upgradeVirtualMachine(UpgradeVMCmd cmd){
  Long virtualMachineId=cmd.getId();
  Long serviceOfferingId=cmd.getServiceOfferingId();
  Account account=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  UserVmVO vmInstance=_vmDao.findById(virtualMachineId);
  if (vmInstance == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + virtualMachineId);
  }
  userId=accountAndUserValidation(virtualMachineId,account,userId,vmInstance);
  ServiceOfferingVO newServiceOffering=_offeringDao.findById(serviceOfferingId);
  if (newServiceOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
  }
  if (!(vmInstance.getState().equals(State.Stopped) || vmInstance.getState().equals(State.Running))) {
    s_logger.warn(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ vmInstance.getState());
    throw new InvalidParameterValueException(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ vmInstance.getState()+ ""String_Node_Str"");
  }
  if (vmInstance.getServiceOfferingId() == newServiceOffering.getId()) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ newServiceOffering.getName()+ ""String_Node_Str"");
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ newServiceOffering.getName()+ ""String_Node_Str"");
  }
  ServiceOfferingVO currentServiceOffering=_offeringDao.findById(vmInstance.getServiceOfferingId());
  if (currentServiceOffering.getUseLocalStorage() != newServiceOffering.getUseLocalStorage()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ currentServiceOffering.getUseLocalStorage()+ ""String_Node_Str""+ newServiceOffering.getUseLocalStorage());
  }
  if (!_agentMgr.isVirtualMachineUpgradable(vmInstance,newServiceOffering)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + newServiceOffering.getCpu() + ""String_Node_Str""+ newServiceOffering.getSpeed()+ ""String_Node_Str""+ newServiceOffering.getRamSize()+ ""String_Node_Str"");
  }
  List<String> currentTags=_configMgr.csvTagsToList(currentServiceOffering.getTags());
  List<String> newTags=_configMgr.csvTagsToList(newServiceOffering.getTags());
  if (!newTags.containsAll(currentTags)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + currentTags + ""String_Node_Str""+ ""String_Node_Str""+ newTags);
  }
  UserVmVO vmForUpdate=_vmDao.createForUpdate();
  vmForUpdate.setServiceOfferingId(serviceOfferingId);
  vmForUpdate.setHaEnabled(_serviceOfferingDao.findById(serviceOfferingId).getOfferHA());
  _vmDao.update(vmInstance.getId(),vmForUpdate);
  return _vmDao.findById(vmInstance.getId());
}","@Override @ActionEvent(eventType=EventTypes.EVENT_VM_UPGRADE,eventDescription=""String_Node_Str"") public UserVm upgradeVirtualMachine(UpgradeVMCmd cmd){
  Long virtualMachineId=cmd.getId();
  Long serviceOfferingId=cmd.getServiceOfferingId();
  Account account=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  UserVmVO vmInstance=_vmDao.findById(virtualMachineId);
  if (vmInstance == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + virtualMachineId);
  }
  userId=accountAndUserValidation(virtualMachineId,account,userId,vmInstance);
  ServiceOfferingVO newServiceOffering=_offeringDao.findById(serviceOfferingId);
  if (newServiceOffering == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + serviceOfferingId);
  }
  if (!(vmInstance.getState().equals(State.Stopped) || vmInstance.getState().equals(State.Running))) {
    s_logger.warn(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ vmInstance.getState());
    throw new InvalidParameterValueException(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ vmInstance.getState()+ ""String_Node_Str"");
  }
  if (vmInstance.getServiceOfferingId() == newServiceOffering.getId()) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ newServiceOffering.getName()+ ""String_Node_Str"");
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ newServiceOffering.getName()+ ""String_Node_Str"");
  }
  ServiceOfferingVO currentServiceOffering=_offeringDao.findByIdIncludingRemoved(vmInstance.getServiceOfferingId());
  if (currentServiceOffering.getUseLocalStorage() != newServiceOffering.getUseLocalStorage()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmInstance.toString() + ""String_Node_Str""+ currentServiceOffering.getUseLocalStorage()+ ""String_Node_Str""+ newServiceOffering.getUseLocalStorage());
  }
  if (!_agentMgr.isVirtualMachineUpgradable(vmInstance,newServiceOffering)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + newServiceOffering.getCpu() + ""String_Node_Str""+ newServiceOffering.getSpeed()+ ""String_Node_Str""+ newServiceOffering.getRamSize()+ ""String_Node_Str"");
  }
  List<String> currentTags=_configMgr.csvTagsToList(currentServiceOffering.getTags());
  List<String> newTags=_configMgr.csvTagsToList(newServiceOffering.getTags());
  if (!newTags.containsAll(currentTags)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"" + currentTags + ""String_Node_Str""+ ""String_Node_Str""+ newTags);
  }
  UserVmVO vmForUpdate=_vmDao.createForUpdate();
  vmForUpdate.setServiceOfferingId(serviceOfferingId);
  vmForUpdate.setHaEnabled(_serviceOfferingDao.findById(serviceOfferingId).getOfferHA());
  _vmDao.update(vmInstance.getId(),vmForUpdate);
  return _vmDao.findById(vmInstance.getId());
}"
89735,"@Override @DB public boolean delete(long userId,long templateId,Long zoneId){
  boolean success=true;
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String zoneName;
  List<HostVO> secondaryStorageHosts;
  if (!template.isCrossZones() && zoneId != null) {
    DataCenterVO zone=_dcDao.findById(zoneId);
    zoneName=zone.getName();
    secondaryStorageHosts=new ArrayList<HostVO>();
    secondaryStorageHosts.add(_hostDao.findSecondaryStorageHost(zoneId));
  }
 else {
    zoneName=""String_Node_Str"";
    secondaryStorageHosts=_hostDao.listSecondaryStorageHosts();
  }
  s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zoneName);
  for (  HostVO secondaryStorageHost : secondaryStorageHosts) {
    long hostId=secondaryStorageHost.getId();
    List<VMTemplateHostVO> templateHostVOs=_tmpltHostDao.listByHostTemplate(hostId,templateId);
    for (    VMTemplateHostVO templateHostVO : templateHostVOs) {
      if (templateHostVO.getDownloadState() == Status.DOWNLOAD_IN_PROGRESS) {
        String errorMsg=""String_Node_Str"";
        s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ secondaryStorageHost.getName()+ ""String_Node_Str"");
        throw new CloudRuntimeException(errorMsg);
      }
    }
  }
  Account account=_accountDao.findById(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  for (  HostVO secondaryStorageHost : secondaryStorageHosts) {
    long hostId=secondaryStorageHost.getId();
    long sZoneId=secondaryStorageHost.getDataCenterId();
    List<VMTemplateHostVO> templateHostVOs=_tmpltHostDao.listByHostTemplate(hostId,templateId);
    for (    VMTemplateHostVO templateHostVO : templateHostVOs) {
      VMTemplateHostVO lock=_tmpltHostDao.acquireInLockTable(templateHostVO.getId());
      try {
        if (lock == null) {
          s_logger.debug(""String_Node_Str"" + templateHostVO.getId());
          success=false;
          break;
        }
        templateHostVO.setDestroyed(true);
        _tmpltHostDao.update(templateHostVO.getId(),templateHostVO);
        VMTemplateZoneVO templateZone=_tmpltZoneDao.findByZoneTemplate(sZoneId,templateId);
        if (templateZone != null) {
          _tmpltZoneDao.remove(templateZone.getId());
        }
        UsageEventVO usageEvent=new UsageEventVO(eventType,account.getId(),sZoneId,templateId,null);
        _usageEventDao.persist(usageEvent);
      }
  finally {
        if (lock != null) {
          _tmpltHostDao.releaseFromLockTable(lock.getId());
        }
      }
    }
    if (!success) {
      break;
    }
  }
  s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zoneName);
  if (success && (_tmpltHostDao.listByTemplateId(templateId).size() == 0)) {
    long accountId=template.getAccountId();
    VMTemplateVO lock=_tmpltDao.acquireInLockTable(templateId);
    try {
      if (lock == null) {
        s_logger.debug(""String_Node_Str"" + templateId);
        success=false;
      }
 else       if (_tmpltDao.remove(templateId)) {
        _accountMgr.decrementResourceCount(accountId,ResourceType.template);
      }
    }
  finally {
      if (lock != null) {
        _tmpltDao.releaseFromLockTable(lock.getId());
      }
    }
    s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str"");
  }
  return success;
}","@Override @DB public boolean delete(long userId,long templateId,Long zoneId){
  boolean success=true;
  VMTemplateVO template=_tmpltDao.findById(templateId);
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String zoneName;
  List<HostVO> secondaryStorageHosts;
  if (!template.isCrossZones() && zoneId != null) {
    DataCenterVO zone=_dcDao.findById(zoneId);
    zoneName=zone.getName();
    secondaryStorageHosts=new ArrayList<HostVO>();
    secondaryStorageHosts.add(_hostDao.findSecondaryStorageHost(zoneId));
  }
 else {
    zoneName=""String_Node_Str"";
    secondaryStorageHosts=_hostDao.listSecondaryStorageHosts();
  }
  s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zoneName);
  for (  HostVO secondaryStorageHost : secondaryStorageHosts) {
    long hostId=secondaryStorageHost.getId();
    List<VMTemplateHostVO> templateHostVOs=_tmpltHostDao.listByHostTemplate(hostId,templateId);
    for (    VMTemplateHostVO templateHostVO : templateHostVOs) {
      if (templateHostVO.getDownloadState() == Status.DOWNLOAD_IN_PROGRESS) {
        String errorMsg=""String_Node_Str"";
        s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ secondaryStorageHost.getName()+ ""String_Node_Str"");
        throw new CloudRuntimeException(errorMsg);
      }
    }
  }
  Account account=_accountDao.findByIdIncludingRemoved(template.getAccountId());
  String eventType=""String_Node_Str"";
  if (template.getFormat().equals(ImageFormat.ISO)) {
    eventType=EventTypes.EVENT_ISO_DELETE;
  }
 else {
    eventType=EventTypes.EVENT_TEMPLATE_DELETE;
  }
  for (  HostVO secondaryStorageHost : secondaryStorageHosts) {
    long hostId=secondaryStorageHost.getId();
    long sZoneId=secondaryStorageHost.getDataCenterId();
    List<VMTemplateHostVO> templateHostVOs=_tmpltHostDao.listByHostTemplate(hostId,templateId);
    for (    VMTemplateHostVO templateHostVO : templateHostVOs) {
      VMTemplateHostVO lock=_tmpltHostDao.acquireInLockTable(templateHostVO.getId());
      try {
        if (lock == null) {
          s_logger.debug(""String_Node_Str"" + templateHostVO.getId());
          success=false;
          break;
        }
        templateHostVO.setDestroyed(true);
        _tmpltHostDao.update(templateHostVO.getId(),templateHostVO);
        VMTemplateZoneVO templateZone=_tmpltZoneDao.findByZoneTemplate(sZoneId,templateId);
        if (templateZone != null) {
          _tmpltZoneDao.remove(templateZone.getId());
        }
        UsageEventVO usageEvent=new UsageEventVO(eventType,account.getId(),sZoneId,templateId,null);
        _usageEventDao.persist(usageEvent);
      }
  finally {
        if (lock != null) {
          _tmpltHostDao.releaseFromLockTable(lock.getId());
        }
      }
    }
    if (!success) {
      break;
    }
  }
  s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ zoneName);
  if (success && (_tmpltHostDao.listByTemplateId(templateId).size() == 0)) {
    long accountId=template.getAccountId();
    VMTemplateVO lock=_tmpltDao.acquireInLockTable(templateId);
    try {
      if (lock == null) {
        s_logger.debug(""String_Node_Str"" + templateId);
        success=false;
      }
 else       if (_tmpltDao.remove(templateId)) {
        _accountMgr.decrementResourceCount(accountId,ResourceType.template);
      }
    }
  finally {
      if (lock != null) {
        _tmpltDao.releaseFromLockTable(lock.getId());
      }
    }
    s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str"");
  }
  return success;
}"
89736,"@Override public Answer executeRequest(Command cmd){
  try {
    if (cmd instanceof StopCommand) {
      return execute((StopCommand)cmd);
    }
 else     if (cmd instanceof GetVmStatsCommand) {
      return execute((GetVmStatsCommand)cmd);
    }
 else     if (cmd instanceof RebootRouterCommand) {
      return execute((RebootRouterCommand)cmd);
    }
 else     if (cmd instanceof RebootCommand) {
      return execute((RebootCommand)cmd);
    }
 else     if (cmd instanceof GetHostStatsCommand) {
      return execute((GetHostStatsCommand)cmd);
    }
 else     if (cmd instanceof CheckStateCommand) {
      return executeRequest(cmd);
    }
 else     if (cmd instanceof CheckHealthCommand) {
      return execute((CheckHealthCommand)cmd);
    }
 else     if (cmd instanceof PrepareForMigrationCommand) {
      return execute((PrepareForMigrationCommand)cmd);
    }
 else     if (cmd instanceof MigrateCommand) {
      return execute((MigrateCommand)cmd);
    }
 else     if (cmd instanceof PingTestCommand) {
      return execute((PingTestCommand)cmd);
    }
 else     if (cmd instanceof CheckVirtualMachineCommand) {
      return execute((CheckVirtualMachineCommand)cmd);
    }
 else     if (cmd instanceof ReadyCommand) {
      return execute((ReadyCommand)cmd);
    }
 else     if (cmd instanceof AttachIsoCommand) {
      return execute((AttachIsoCommand)cmd);
    }
 else     if (cmd instanceof AttachVolumeCommand) {
      return execute((AttachVolumeCommand)cmd);
    }
 else     if (cmd instanceof StopCommand) {
      return execute((StopCommand)cmd);
    }
 else     if (cmd instanceof CheckConsoleProxyLoadCommand) {
      return execute((CheckConsoleProxyLoadCommand)cmd);
    }
 else     if (cmd instanceof WatchConsoleProxyLoadCommand) {
      return execute((WatchConsoleProxyLoadCommand)cmd);
    }
 else     if (cmd instanceof GetVncPortCommand) {
      return execute((GetVncPortCommand)cmd);
    }
 else     if (cmd instanceof ModifySshKeysCommand) {
      return execute((ModifySshKeysCommand)cmd);
    }
 else     if (cmd instanceof MaintainCommand) {
      return execute((MaintainCommand)cmd);
    }
 else     if (cmd instanceof CreateCommand) {
      return execute((CreateCommand)cmd);
    }
 else     if (cmd instanceof DestroyCommand) {
      return execute((DestroyCommand)cmd);
    }
 else     if (cmd instanceof PrimaryStorageDownloadCommand) {
      return execute((PrimaryStorageDownloadCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
      return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
    }
 else     if (cmd instanceof GetStorageStatsCommand) {
      return execute((GetStorageStatsCommand)cmd);
    }
 else     if (cmd instanceof ManageSnapshotCommand) {
      return execute((ManageSnapshotCommand)cmd);
    }
 else     if (cmd instanceof BackupSnapshotCommand) {
      return execute((BackupSnapshotCommand)cmd);
    }
 else     if (cmd instanceof DeleteSnapshotBackupCommand) {
      return execute((DeleteSnapshotBackupCommand)cmd);
    }
 else     if (cmd instanceof DeleteSnapshotsDirCommand) {
      return execute((DeleteSnapshotsDirCommand)cmd);
    }
 else     if (cmd instanceof CreateVolumeFromSnapshotCommand) {
      return execute((CreateVolumeFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
      return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof UpgradeSnapshotCommand) {
      return execute((UpgradeSnapshotCommand)cmd);
    }
 else     if (cmd instanceof ModifyStoragePoolCommand) {
      return execute((ModifyStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof SecurityIngressRulesCmd) {
      return execute((SecurityIngressRulesCmd)cmd);
    }
 else     if (cmd instanceof DeleteStoragePoolCommand) {
      return execute((DeleteStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof FenceCommand) {
      return execute((FenceCommand)cmd);
    }
 else     if (cmd instanceof StartCommand) {
      return execute((StartCommand)cmd);
    }
 else     if (cmd instanceof NetworkElementCommand) {
      return _virtRouterResource.executeRequest(cmd);
    }
 else     if (cmd instanceof CheckSshCommand) {
      return execute((CheckSshCommand)cmd);
    }
 else     if (cmd instanceof NetworkUsageCommand) {
      return execute((NetworkUsageCommand)cmd);
    }
 else     if (cmd instanceof NetworkRulesSystemVmCommand) {
      return execute((NetworkRulesSystemVmCommand)cmd);
    }
 else     if (cmd instanceof CleanupNetworkRulesCmd) {
      return execute((CleanupNetworkRulesCmd)cmd);
    }
 else {
      s_logger.warn(""String_Node_Str"");
      return Answer.createUnsupportedCommandAnswer(cmd);
    }
  }
 catch (  final IllegalArgumentException e) {
    return new Answer(cmd,false,e.getMessage());
  }
}","@Override public Answer executeRequest(Command cmd){
  try {
    if (cmd instanceof StopCommand) {
      return execute((StopCommand)cmd);
    }
 else     if (cmd instanceof GetVmStatsCommand) {
      return execute((GetVmStatsCommand)cmd);
    }
 else     if (cmd instanceof RebootRouterCommand) {
      return execute((RebootRouterCommand)cmd);
    }
 else     if (cmd instanceof RebootCommand) {
      return execute((RebootCommand)cmd);
    }
 else     if (cmd instanceof GetHostStatsCommand) {
      return execute((GetHostStatsCommand)cmd);
    }
 else     if (cmd instanceof CheckStateCommand) {
      return executeRequest(cmd);
    }
 else     if (cmd instanceof CheckHealthCommand) {
      return execute((CheckHealthCommand)cmd);
    }
 else     if (cmd instanceof PrepareForMigrationCommand) {
      return execute((PrepareForMigrationCommand)cmd);
    }
 else     if (cmd instanceof MigrateCommand) {
      return execute((MigrateCommand)cmd);
    }
 else     if (cmd instanceof PingTestCommand) {
      return execute((PingTestCommand)cmd);
    }
 else     if (cmd instanceof CheckVirtualMachineCommand) {
      return execute((CheckVirtualMachineCommand)cmd);
    }
 else     if (cmd instanceof ReadyCommand) {
      return execute((ReadyCommand)cmd);
    }
 else     if (cmd instanceof AttachIsoCommand) {
      return execute((AttachIsoCommand)cmd);
    }
 else     if (cmd instanceof AttachVolumeCommand) {
      return execute((AttachVolumeCommand)cmd);
    }
 else     if (cmd instanceof StopCommand) {
      return execute((StopCommand)cmd);
    }
 else     if (cmd instanceof CheckConsoleProxyLoadCommand) {
      return execute((CheckConsoleProxyLoadCommand)cmd);
    }
 else     if (cmd instanceof WatchConsoleProxyLoadCommand) {
      return execute((WatchConsoleProxyLoadCommand)cmd);
    }
 else     if (cmd instanceof GetVncPortCommand) {
      return execute((GetVncPortCommand)cmd);
    }
 else     if (cmd instanceof ModifySshKeysCommand) {
      return execute((ModifySshKeysCommand)cmd);
    }
 else     if (cmd instanceof MaintainCommand) {
      return execute((MaintainCommand)cmd);
    }
 else     if (cmd instanceof CreateCommand) {
      return execute((CreateCommand)cmd);
    }
 else     if (cmd instanceof DestroyCommand) {
      return execute((DestroyCommand)cmd);
    }
 else     if (cmd instanceof PrimaryStorageDownloadCommand) {
      return execute((PrimaryStorageDownloadCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
      return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
    }
 else     if (cmd instanceof GetStorageStatsCommand) {
      return execute((GetStorageStatsCommand)cmd);
    }
 else     if (cmd instanceof ManageSnapshotCommand) {
      return execute((ManageSnapshotCommand)cmd);
    }
 else     if (cmd instanceof BackupSnapshotCommand) {
      return execute((BackupSnapshotCommand)cmd);
    }
 else     if (cmd instanceof DeleteSnapshotBackupCommand) {
      return execute((DeleteSnapshotBackupCommand)cmd);
    }
 else     if (cmd instanceof DeleteSnapshotsDirCommand) {
      return execute((DeleteSnapshotsDirCommand)cmd);
    }
 else     if (cmd instanceof CreateVolumeFromSnapshotCommand) {
      return execute((CreateVolumeFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
      return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
    }
 else     if (cmd instanceof UpgradeSnapshotCommand) {
      return execute((UpgradeSnapshotCommand)cmd);
    }
 else     if (cmd instanceof CreateStoragePoolCommand) {
      return execute((CreateStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof ModifyStoragePoolCommand) {
      return execute((ModifyStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof SecurityIngressRulesCmd) {
      return execute((SecurityIngressRulesCmd)cmd);
    }
 else     if (cmd instanceof DeleteStoragePoolCommand) {
      return execute((DeleteStoragePoolCommand)cmd);
    }
 else     if (cmd instanceof FenceCommand) {
      return execute((FenceCommand)cmd);
    }
 else     if (cmd instanceof StartCommand) {
      return execute((StartCommand)cmd);
    }
 else     if (cmd instanceof NetworkElementCommand) {
      return _virtRouterResource.executeRequest(cmd);
    }
 else     if (cmd instanceof CheckSshCommand) {
      return execute((CheckSshCommand)cmd);
    }
 else     if (cmd instanceof NetworkUsageCommand) {
      return execute((NetworkUsageCommand)cmd);
    }
 else     if (cmd instanceof NetworkRulesSystemVmCommand) {
      return execute((NetworkRulesSystemVmCommand)cmd);
    }
 else     if (cmd instanceof CleanupNetworkRulesCmd) {
      return execute((CleanupNetworkRulesCmd)cmd);
    }
 else {
      s_logger.warn(""String_Node_Str"");
      return Answer.createUnsupportedCommandAnswer(cmd);
    }
  }
 catch (  final IllegalArgumentException e) {
    return new Answer(cmd,false,e.getMessage());
  }
}"
89737,"@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof CreateCommand) {
    return execute((CreateCommand)cmd);
  }
 else   if (cmd instanceof SetPortForwardingRulesCommand) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (cmd instanceof SetStaticNatRulesCommand) {
    return execute((SetStaticNatRulesCommand)cmd);
  }
 else   if (cmd instanceof LoadBalancerConfigCommand) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (cmd instanceof IPAssocCommand) {
    return execute((IPAssocCommand)cmd);
  }
 else   if (cmd instanceof CheckConsoleProxyLoadCommand) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof WatchConsoleProxyLoadCommand) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof SavePasswordCommand) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (cmd instanceof DhcpEntryCommand) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (cmd instanceof VmDataCommand) {
    return execute((VmDataCommand)cmd);
  }
 else   if (cmd instanceof ReadyCommand) {
    return execute((ReadyCommand)cmd);
  }
 else   if (cmd instanceof GetHostStatsCommand) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (cmd instanceof GetVmStatsCommand) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (cmd instanceof CheckHealthCommand) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (cmd instanceof StopCommand) {
    return execute((StopCommand)cmd);
  }
 else   if (cmd instanceof RebootRouterCommand) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (cmd instanceof RebootCommand) {
    return execute((RebootCommand)cmd);
  }
 else   if (cmd instanceof CheckVirtualMachineCommand) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (cmd instanceof PrepareForMigrationCommand) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (cmd instanceof MigrateCommand) {
    return execute((MigrateCommand)cmd);
  }
 else   if (cmd instanceof DestroyCommand) {
    return execute((DestroyCommand)cmd);
  }
 else   if (cmd instanceof ModifyStoragePoolCommand) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof DeleteStoragePoolCommand) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof CopyVolumeCommand) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachVolumeCommand) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachIsoCommand) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (cmd instanceof ManageSnapshotCommand) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (cmd instanceof BackupSnapshotCommand) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotBackupCommand) {
    return execute((DeleteSnapshotBackupCommand)cmd);
  }
 else   if (cmd instanceof CreateVolumeFromSnapshotCommand) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotsDirCommand) {
    return execute((DeleteSnapshotsDirCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof UpgradeSnapshotCommand) {
    return execute((UpgradeSnapshotCommand)cmd);
  }
 else   if (cmd instanceof GetStorageStatsCommand) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (cmd instanceof PrimaryStorageDownloadCommand) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (cmd instanceof GetVncPortCommand) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (cmd instanceof SetupCommand) {
    return execute((SetupCommand)cmd);
  }
 else   if (cmd instanceof MaintainCommand) {
    return execute((MaintainCommand)cmd);
  }
 else   if (cmd instanceof PingTestCommand) {
    return execute((PingTestCommand)cmd);
  }
 else   if (cmd instanceof CheckOnHostCommand) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (cmd instanceof ModifySshKeysCommand) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (cmd instanceof PoolEjectCommand) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (cmd instanceof StartCommand) {
    return execute((StartCommand)cmd);
  }
 else   if (cmd instanceof RemoteAccessVpnCfgCommand) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (cmd instanceof VpnUsersCfgCommand) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (cmd instanceof CheckSshCommand) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (cmd instanceof SecurityIngressRulesCmd) {
    return execute((SecurityIngressRulesCmd)cmd);
  }
 else   if (cmd instanceof OvsCreateGreTunnelCommand) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (cmd instanceof OvsSetTagAndFlowCommand) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else   if (cmd instanceof OvsDeleteFlowCommand) {
    return execute((OvsDeleteFlowCommand)cmd);
  }
 else   if (cmd instanceof CleanupNetworkRulesCmd) {
    return execute((CleanupNetworkRulesCmd)cmd);
  }
 else   if (cmd instanceof NetworkRulesSystemVmCommand) {
    return execute((NetworkRulesSystemVmCommand)cmd);
  }
 else   if (cmd instanceof OvsCreateTunnelCommand) {
    return execute((OvsCreateTunnelCommand)cmd);
  }
 else   if (cmd instanceof OvsDestroyTunnelCommand) {
    return execute((OvsDestroyTunnelCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}","@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof CreateCommand) {
    return execute((CreateCommand)cmd);
  }
 else   if (cmd instanceof SetPortForwardingRulesCommand) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (cmd instanceof SetStaticNatRulesCommand) {
    return execute((SetStaticNatRulesCommand)cmd);
  }
 else   if (cmd instanceof LoadBalancerConfigCommand) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (cmd instanceof IPAssocCommand) {
    return execute((IPAssocCommand)cmd);
  }
 else   if (cmd instanceof CheckConsoleProxyLoadCommand) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof WatchConsoleProxyLoadCommand) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof SavePasswordCommand) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (cmd instanceof DhcpEntryCommand) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (cmd instanceof VmDataCommand) {
    return execute((VmDataCommand)cmd);
  }
 else   if (cmd instanceof ReadyCommand) {
    return execute((ReadyCommand)cmd);
  }
 else   if (cmd instanceof GetHostStatsCommand) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (cmd instanceof GetVmStatsCommand) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (cmd instanceof CheckHealthCommand) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (cmd instanceof StopCommand) {
    return execute((StopCommand)cmd);
  }
 else   if (cmd instanceof RebootRouterCommand) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (cmd instanceof RebootCommand) {
    return execute((RebootCommand)cmd);
  }
 else   if (cmd instanceof CheckVirtualMachineCommand) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (cmd instanceof PrepareForMigrationCommand) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (cmd instanceof MigrateCommand) {
    return execute((MigrateCommand)cmd);
  }
 else   if (cmd instanceof DestroyCommand) {
    return execute((DestroyCommand)cmd);
  }
 else   if (cmd instanceof CreateStoragePoolCommand) {
    return execute((CreateStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof ModifyStoragePoolCommand) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof DeleteStoragePoolCommand) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof CopyVolumeCommand) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachVolumeCommand) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachIsoCommand) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (cmd instanceof ManageSnapshotCommand) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (cmd instanceof BackupSnapshotCommand) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotBackupCommand) {
    return execute((DeleteSnapshotBackupCommand)cmd);
  }
 else   if (cmd instanceof CreateVolumeFromSnapshotCommand) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotsDirCommand) {
    return execute((DeleteSnapshotsDirCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof UpgradeSnapshotCommand) {
    return execute((UpgradeSnapshotCommand)cmd);
  }
 else   if (cmd instanceof GetStorageStatsCommand) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (cmd instanceof PrimaryStorageDownloadCommand) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (cmd instanceof GetVncPortCommand) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (cmd instanceof SetupCommand) {
    return execute((SetupCommand)cmd);
  }
 else   if (cmd instanceof MaintainCommand) {
    return execute((MaintainCommand)cmd);
  }
 else   if (cmd instanceof PingTestCommand) {
    return execute((PingTestCommand)cmd);
  }
 else   if (cmd instanceof CheckOnHostCommand) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (cmd instanceof ModifySshKeysCommand) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (cmd instanceof PoolEjectCommand) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (cmd instanceof StartCommand) {
    return execute((StartCommand)cmd);
  }
 else   if (cmd instanceof RemoteAccessVpnCfgCommand) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (cmd instanceof VpnUsersCfgCommand) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (cmd instanceof CheckSshCommand) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (cmd instanceof SecurityIngressRulesCmd) {
    return execute((SecurityIngressRulesCmd)cmd);
  }
 else   if (cmd instanceof OvsCreateGreTunnelCommand) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (cmd instanceof OvsSetTagAndFlowCommand) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else   if (cmd instanceof OvsDeleteFlowCommand) {
    return execute((OvsDeleteFlowCommand)cmd);
  }
 else   if (cmd instanceof CleanupNetworkRulesCmd) {
    return execute((CleanupNetworkRulesCmd)cmd);
  }
 else   if (cmd instanceof NetworkRulesSystemVmCommand) {
    return execute((NetworkRulesSystemVmCommand)cmd);
  }
 else   if (cmd instanceof OvsCreateTunnelCommand) {
    return execute((OvsCreateTunnelCommand)cmd);
  }
 else   if (cmd instanceof OvsDestroyTunnelCommand) {
    return execute((OvsDestroyTunnelCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}"
89738,"protected SR getNfsSR(Connection conn,StorageFilerTO pool){
  Map<String,String> deviceConfig=new HashMap<String,String>();
  try {
    String server=pool.getHost();
    String serverpath=pool.getPath();
    serverpath=serverpath.replace(""String_Node_Str"",""String_Node_Str"");
    Set<SR> srs=SR.getAll(conn);
    for (    SR sr : srs) {
      if (!SRType.NFS.equals(sr.getType(conn))) {
        continue;
      }
      Set<PBD> pbds=sr.getPBDs(conn);
      if (pbds.isEmpty()) {
        continue;
      }
      PBD pbd=pbds.iterator().next();
      Map<String,String> dc=pbd.getDeviceConfig(conn);
      if (dc == null) {
        continue;
      }
      if (dc.get(""String_Node_Str"") == null) {
        continue;
      }
      if (dc.get(""String_Node_Str"") == null) {
        continue;
      }
      if (server.equals(dc.get(""String_Node_Str"")) && serverpath.equals(dc.get(""String_Node_Str""))) {
        if (checkSR(conn,sr)) {
          return sr;
        }
        throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid() + ""String_Node_Str""+ _host.uuid);
      }
    }
    deviceConfig.put(""String_Node_Str"",server);
    deviceConfig.put(""String_Node_Str"",serverpath);
    Host host=Host.getByUuid(conn,_host.uuid);
    SR sr=SR.create(conn,host,deviceConfig,new Long(0),pool.getUuid(),Long.toString(pool.getId()),SRType.NFS.toString(),""String_Node_Str"",true,new HashMap<String,String>());
    sr.scan(conn);
    return sr;
  }
 catch (  XenAPIException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.toString(),e);
  }
catch (  XmlRpcException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.toString(),e);
  }
}","protected SR getNfsSR(Connection conn,StorageFilerTO pool){
  Map<String,String> deviceConfig=new HashMap<String,String>();
  try {
    String server=pool.getHost();
    String serverpath=pool.getPath();
    serverpath=serverpath.replace(""String_Node_Str"",""String_Node_Str"");
    Set<SR> srs=SR.getAll(conn);
    for (    SR sr : srs) {
      if (!SRType.NFS.equals(sr.getType(conn))) {
        continue;
      }
      Set<PBD> pbds=sr.getPBDs(conn);
      if (pbds.isEmpty()) {
        continue;
      }
      PBD pbd=pbds.iterator().next();
      Map<String,String> dc=pbd.getDeviceConfig(conn);
      if (dc == null) {
        continue;
      }
      if (dc.get(""String_Node_Str"") == null) {
        continue;
      }
      if (dc.get(""String_Node_Str"") == null) {
        continue;
      }
      if (server.equals(dc.get(""String_Node_Str"")) && serverpath.equals(dc.get(""String_Node_Str""))) {
        throw new CloudRuntimeException(""String_Node_Str"" + dc.get(""String_Node_Str"") + ""String_Node_Str""+ dc.get(""String_Node_Str"")+ ""String_Node_Str""+ pool.getUuid()+ ""String_Node_Str""+ _host.uuid);
      }
    }
    deviceConfig.put(""String_Node_Str"",server);
    deviceConfig.put(""String_Node_Str"",serverpath);
    Host host=Host.getByUuid(conn,_host.uuid);
    SR sr=SR.create(conn,host,deviceConfig,new Long(0),pool.getUuid(),Long.toString(pool.getId()),SRType.NFS.toString(),""String_Node_Str"",true,new HashMap<String,String>());
    sr.scan(conn);
    return sr;
  }
 catch (  XenAPIException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.toString(),e);
  }
catch (  XmlRpcException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.toString(),e);
  }
}"
89739,"protected SR getStorageRepository(Connection conn,StorageFilerTO pool){
  Set<SR> srs;
  try {
    srs=SR.getByNameLabel(conn,pool.getUuid());
  }
 catch (  XenAPIException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid() + ""String_Node_Str""+ e.toString(),e);
  }
catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid() + ""String_Node_Str""+ e.getMessage(),e);
  }
  if (srs.size() > 1) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid());
  }
 else   if (srs.size() == 1) {
    SR sr=srs.iterator().next();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId());
    }
    if (checkSR(conn,sr)) {
      return sr;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid() + ""String_Node_Str""+ _host.uuid);
  }
 else {
    if (pool.getType() == StoragePoolType.NetworkFilesystem) {
      return getNfsSR(conn,pool);
    }
 else     if (pool.getType() == StoragePoolType.IscsiLUN) {
      return getIscsiSR(conn,pool);
    }
 else     if (pool.getType() == StoragePoolType.PreSetup) {
      throw new CloudRuntimeException(""String_Node_Str"" + pool.getType().name() + ""String_Node_Str""+ pool.getUuid()+ ""String_Node_Str"");
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + pool.getType().name() + ""String_Node_Str"");
    }
  }
}","protected SR getStorageRepository(Connection conn,StorageFilerTO pool){
  Set<SR> srs;
  try {
    srs=SR.getByNameLabel(conn,pool.getUuid());
  }
 catch (  XenAPIException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid() + ""String_Node_Str""+ e.toString(),e);
  }
catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid() + ""String_Node_Str""+ e.getMessage(),e);
  }
  if (srs.size() > 1) {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid());
  }
 else   if (srs.size() == 1) {
    SR sr=srs.iterator().next();
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId());
    }
    if (checkSR(conn,sr)) {
      return sr;
    }
    throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid() + ""String_Node_Str""+ _host.uuid);
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid() + ""String_Node_Str""+ _host.uuid);
  }
}"
89740,"protected SR getIscsiSR(Connection conn,StorageFilerTO pool){
synchronized (pool.getUuid().intern()) {
    Map<String,String> deviceConfig=new HashMap<String,String>();
    try {
      String target=pool.getHost();
      String path=pool.getPath();
      if (path.endsWith(""String_Node_Str"")) {
        path=path.substring(0,path.length() - 1);
      }
      String tmp[]=path.split(""String_Node_Str"");
      if (tmp.length != 3) {
        String msg=""String_Node_Str"" + pool.getPath() + ""String_Node_Str"";
        s_logger.warn(msg);
        throw new CloudRuntimeException(msg);
      }
      String targetiqn=tmp[1].trim();
      String lunid=tmp[2].trim();
      String scsiid=""String_Node_Str"";
      Set<SR> srs=SR.getByNameLabel(conn,pool.getUuid());
      for (      SR sr : srs) {
        if (!SRType.LVMOISCSI.equals(sr.getType(conn))) {
          continue;
        }
        Set<PBD> pbds=sr.getPBDs(conn);
        if (pbds.isEmpty()) {
          continue;
        }
        PBD pbd=pbds.iterator().next();
        Map<String,String> dc=pbd.getDeviceConfig(conn);
        if (dc == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (target.equals(dc.get(""String_Node_Str"")) && targetiqn.equals(dc.get(""String_Node_Str"")) && lunid.equals(dc.get(""String_Node_Str""))) {
          if (checkSR(conn,sr)) {
            return sr;
          }
          throw new CloudRuntimeException(""String_Node_Str"" + pool.getUuid() + ""String_Node_Str""+ _host.uuid);
        }
      }
      deviceConfig.put(""String_Node_Str"",target);
      deviceConfig.put(""String_Node_Str"",targetiqn);
      Host host=Host.getByUuid(conn,_host.uuid);
      Map<String,String> smConfig=new HashMap<String,String>();
      String type=SRType.LVMOISCSI.toString();
      String poolId=Long.toString(pool.getId());
      SR sr=null;
      try {
        sr=SR.create(conn,host,deviceConfig,new Long(0),pool.getUuid(),poolId,type,""String_Node_Str"",true,smConfig);
      }
 catch (      XenAPIException e) {
        String errmsg=e.toString();
        if (errmsg.contains(""String_Node_Str"")) {
          String lun[]=errmsg.split(""String_Node_Str"");
          boolean found=false;
          for (int i=1; i < lun.length; i++) {
            int blunindex=lun[i].indexOf(""String_Node_Str"") + 7;
            int elunindex=lun[i].indexOf(""String_Node_Str"");
            String ilun=lun[i].substring(blunindex,elunindex);
            ilun=ilun.trim();
            if (ilun.equals(lunid)) {
              int bscsiindex=lun[i].indexOf(""String_Node_Str"") + 8;
              int escsiindex=lun[i].indexOf(""String_Node_Str"");
              scsiid=lun[i].substring(bscsiindex,escsiindex);
              scsiid=scsiid.trim();
              found=true;
              break;
            }
          }
          if (!found) {
            String msg=""String_Node_Str"" + lunid + ""String_Node_Str""+ errmsg;
            s_logger.warn(msg);
            throw new CloudRuntimeException(msg);
          }
        }
 else {
          String msg=""String_Node_Str"" + deviceConfig + ""String_Node_Str""+ e.toString();
          s_logger.warn(msg,e);
          throw new CloudRuntimeException(msg,e);
        }
      }
      deviceConfig.put(""String_Node_Str"",scsiid);
      String result=SR.probe(conn,host,deviceConfig,type,smConfig);
      String pooluuid=null;
      if (result.indexOf(""String_Node_Str"") != -1) {
        pooluuid=result.substring(result.indexOf(""String_Node_Str"") + 6,result.indexOf(""String_Node_Str"")).trim();
      }
      if (pooluuid == null || pooluuid.length() != 36) {
        sr=SR.create(conn,host,deviceConfig,new Long(0),pool.getUuid(),poolId,type,""String_Node_Str"",true,smConfig);
      }
 else {
        sr=SR.introduce(conn,pooluuid,pool.getUuid(),poolId,type,""String_Node_Str"",true,smConfig);
        PBD.Record rec=new PBD.Record();
        rec.deviceConfig=deviceConfig;
        rec.host=host;
        rec.SR=sr;
        PBD pbd=PBD.create(conn,rec);
        pbd.plug(conn);
      }
      sr.scan(conn);
      return sr;
    }
 catch (    XenAPIException e) {
      String msg=""String_Node_Str"" + deviceConfig + ""String_Node_Str""+ e.toString();
      s_logger.warn(msg,e);
      throw new CloudRuntimeException(msg,e);
    }
catch (    Exception e) {
      String msg=""String_Node_Str"" + deviceConfig + ""String_Node_Str""+ e.getMessage();
      s_logger.warn(msg,e);
      throw new CloudRuntimeException(msg,e);
    }
  }
}","protected SR getIscsiSR(Connection conn,StorageFilerTO pool){
synchronized (pool.getUuid().intern()) {
    Map<String,String> deviceConfig=new HashMap<String,String>();
    try {
      String target=pool.getHost();
      String path=pool.getPath();
      if (path.endsWith(""String_Node_Str"")) {
        path=path.substring(0,path.length() - 1);
      }
      String tmp[]=path.split(""String_Node_Str"");
      if (tmp.length != 3) {
        String msg=""String_Node_Str"" + pool.getPath() + ""String_Node_Str"";
        s_logger.warn(msg);
        throw new CloudRuntimeException(msg);
      }
      String targetiqn=tmp[1].trim();
      String lunid=tmp[2].trim();
      String scsiid=""String_Node_Str"";
      Set<SR> srs=SR.getByNameLabel(conn,pool.getUuid());
      for (      SR sr : srs) {
        if (!SRType.LVMOISCSI.equals(sr.getType(conn))) {
          continue;
        }
        Set<PBD> pbds=sr.getPBDs(conn);
        if (pbds.isEmpty()) {
          continue;
        }
        PBD pbd=pbds.iterator().next();
        Map<String,String> dc=pbd.getDeviceConfig(conn);
        if (dc == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (dc.get(""String_Node_Str"") == null) {
          continue;
        }
        if (target.equals(dc.get(""String_Node_Str"")) && targetiqn.equals(dc.get(""String_Node_Str"")) && lunid.equals(dc.get(""String_Node_Str""))) {
          throw new CloudRuntimeException(""String_Node_Str"" + dc.get(""String_Node_Str"") + ""String_Node_Str""+ dc.get(""String_Node_Str"")+ ""String_Node_Str""+ dc.get(""String_Node_Str"")+ ""String_Node_Str""+ pool.getUuid()+ ""String_Node_Str""+ _host.uuid);
        }
      }
      deviceConfig.put(""String_Node_Str"",target);
      deviceConfig.put(""String_Node_Str"",targetiqn);
      Host host=Host.getByUuid(conn,_host.uuid);
      Map<String,String> smConfig=new HashMap<String,String>();
      String type=SRType.LVMOISCSI.toString();
      String poolId=Long.toString(pool.getId());
      SR sr=null;
      try {
        sr=SR.create(conn,host,deviceConfig,new Long(0),pool.getUuid(),poolId,type,""String_Node_Str"",true,smConfig);
      }
 catch (      XenAPIException e) {
        String errmsg=e.toString();
        if (errmsg.contains(""String_Node_Str"")) {
          String lun[]=errmsg.split(""String_Node_Str"");
          boolean found=false;
          for (int i=1; i < lun.length; i++) {
            int blunindex=lun[i].indexOf(""String_Node_Str"") + 7;
            int elunindex=lun[i].indexOf(""String_Node_Str"");
            String ilun=lun[i].substring(blunindex,elunindex);
            ilun=ilun.trim();
            if (ilun.equals(lunid)) {
              int bscsiindex=lun[i].indexOf(""String_Node_Str"") + 8;
              int escsiindex=lun[i].indexOf(""String_Node_Str"");
              scsiid=lun[i].substring(bscsiindex,escsiindex);
              scsiid=scsiid.trim();
              found=true;
              break;
            }
          }
          if (!found) {
            String msg=""String_Node_Str"" + lunid + ""String_Node_Str""+ errmsg;
            s_logger.warn(msg);
            throw new CloudRuntimeException(msg);
          }
        }
 else {
          String msg=""String_Node_Str"" + deviceConfig + ""String_Node_Str""+ e.toString();
          s_logger.warn(msg,e);
          throw new CloudRuntimeException(msg,e);
        }
      }
      deviceConfig.put(""String_Node_Str"",scsiid);
      String result=SR.probe(conn,host,deviceConfig,type,smConfig);
      String pooluuid=null;
      if (result.indexOf(""String_Node_Str"") != -1) {
        pooluuid=result.substring(result.indexOf(""String_Node_Str"") + 6,result.indexOf(""String_Node_Str"")).trim();
      }
      if (pooluuid == null || pooluuid.length() != 36) {
        sr=SR.create(conn,host,deviceConfig,new Long(0),pool.getUuid(),poolId,type,""String_Node_Str"",true,smConfig);
      }
 else {
        sr=SR.introduce(conn,pooluuid,pool.getUuid(),poolId,type,""String_Node_Str"",true,smConfig);
        PBD.Record rec=new PBD.Record();
        rec.deviceConfig=deviceConfig;
        rec.host=host;
        rec.SR=sr;
        PBD pbd=PBD.create(conn,rec);
        pbd.plug(conn);
      }
      sr.scan(conn);
      return sr;
    }
 catch (    XenAPIException e) {
      String msg=""String_Node_Str"" + deviceConfig + ""String_Node_Str""+ e.toString();
      s_logger.warn(msg,e);
      throw new CloudRuntimeException(msg,e);
    }
catch (    Exception e) {
      String msg=""String_Node_Str"" + deviceConfig + ""String_Node_Str""+ e.getMessage();
      s_logger.warn(msg,e);
      throw new CloudRuntimeException(msg,e);
    }
  }
}"
89741,"@Override @SuppressWarnings(""String_Node_Str"") public StoragePoolVO createPool(CreateStoragePoolCmd cmd) throws ResourceInUseException, IllegalArgumentException, UnknownHostException, ResourceUnavailableException {
  Long clusterId=cmd.getClusterId();
  Long podId=cmd.getPodId();
  Map ds=cmd.getDetails();
  if (clusterId != null && podId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Map<String,String> details=new HashMap<String,String>();
  if (ds != null) {
    Collection detailsCollection=ds.values();
    Iterator it=detailsCollection.iterator();
    while (it.hasNext()) {
      HashMap d=(HashMap)it.next();
      Iterator it2=d.entrySet().iterator();
      while (it2.hasNext()) {
        Map.Entry entry=(Map.Entry)it2.next();
        details.put((String)entry.getKey(),(String)entry.getValue());
      }
    }
  }
  Long zoneId=cmd.getZoneId();
  DataCenterVO zone=_dcDao.findById(cmd.getZoneId());
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  Account account=UserContext.current().getCaller();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zoneId);
  }
  URI uri=null;
  try {
    uri=new URI(cmd.getUrl());
    if (uri.getScheme() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getUrl() + ""String_Node_Str"");
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriHost=uri.getHost();
      String uriPath=uri.getPath();
      if (uriHost == null || uriPath == null || uriHost.trim().isEmpty() || uriPath.trim().isEmpty()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriPath=uri.getPath();
      if (uriPath == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new InvalidParameterValueException(cmd.getUrl() + ""String_Node_Str"");
  }
  String tags=cmd.getTags();
  if (tags != null) {
    String[] tokens=tags.split(""String_Node_Str"");
    for (    String tag : tokens) {
      tag=tag.trim();
      if (tag.length() == 0) {
        continue;
      }
      details.put(tag,""String_Node_Str"");
    }
  }
  String scheme=uri.getScheme();
  String storageHost=uri.getHost();
  String hostPath=uri.getPath();
  int port=uri.getPort();
  StoragePoolVO pool=null;
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + scheme + ""String_Node_Str""+ storageHost+ ""String_Node_Str""+ hostPath+ ""String_Node_Str""+ port);
  }
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.NetworkFilesystem,storageHost,port,hostPath);
    if (clusterId == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=0;
    }
    pool=new StoragePoolVO(StoragePoolType.Filesystem,""String_Node_Str"",0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.SharedMountPoint,storageHost,0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.PreSetup,storageHost,0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    String[] tokens=hostPath.split(""String_Node_Str"");
    int lun=NumbersUtil.parseInt(tokens[tokens.length - 1],-1);
    if (port == -1) {
      port=3260;
    }
    if (lun != -1) {
      if (clusterId == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      pool=new StoragePoolVO(StoragePoolType.IscsiLUN,storageHost,port,hostPath);
    }
 else {
      Enumeration<StoragePoolDiscoverer> en=_discoverers.enumeration();
      while (en.hasMoreElements()) {
        Map<StoragePoolVO,Map<String,String>> pools;
        try {
          pools=en.nextElement().find(cmd.getZoneId(),podId,uri,details);
        }
 catch (        DiscoveryException e) {
          throw new IllegalArgumentException(""String_Node_Str"" + uri,e);
        }
        if (pools != null) {
          Map.Entry<StoragePoolVO,Map<String,String>> entry=pools.entrySet().iterator().next();
          pool=entry.getKey();
          details=entry.getValue();
          break;
        }
      }
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.ISO,storageHost,port,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.VMFS,""String_Node_Str"" + hostPath,0,hostPath);
  }
 else {
    s_logger.warn(""String_Node_Str"" + uri);
    throw new IllegalArgumentException(""String_Node_Str"" + uri);
  }
  if (pool == null) {
    s_logger.warn(""String_Node_Str"" + uri);
    throw new IllegalArgumentException(""String_Node_Str"" + uri);
  }
  List<StoragePoolVO> pools=_storagePoolDao.listPoolByHostPath(storageHost,hostPath);
  if (!pools.isEmpty() && !scheme.equalsIgnoreCase(""String_Node_Str"")) {
    Long oldPodId=pools.get(0).getPodId();
    throw new ResourceInUseException(""String_Node_Str"" + uri + ""String_Node_Str""+ oldPodId+ ""String_Node_Str"",""String_Node_Str"",uri.toASCIIString());
  }
  List<HostVO> allHosts=_hostDao.listBy(Host.Type.Routing,clusterId,podId,zoneId);
  if (allHosts.isEmpty()) {
    throw new ResourceUnavailableException(""String_Node_Str"",HostPodVO.class,podId);
  }
  long poolId=_storagePoolDao.getNextInSequence(Long.class,""String_Node_Str"");
  String uuid=null;
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=UUID.randomUUID().toString();
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=hostPath.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    uuid=UUID.nameUUIDFromBytes(new String(storageHost + hostPath).getBytes()).toString();
  }
  List<StoragePoolVO> spHandles=_storagePoolDao.findIfDuplicatePoolsExistByUUID(uuid);
  if ((spHandles != null) && (spHandles.size() > 0)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    throw new ResourceInUseException(""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + poolId + ""String_Node_Str""+ uuid+ ""String_Node_Str""+ zoneId+ ""String_Node_Str""+ podId+ ""String_Node_Str""+ cmd.getStoragePoolName());
  }
  pool.setId(poolId);
  pool.setUuid(uuid);
  pool.setDataCenterId(cmd.getZoneId());
  pool.setPodId(podId);
  pool.setName(cmd.getStoragePoolName());
  pool.setClusterId(clusterId);
  pool.setStatus(StoragePoolStatus.Up);
  pool=_storagePoolDao.persist(pool,details);
  if (allHosts.isEmpty()) {
    return pool;
  }
  s_logger.debug(""String_Node_Str"");
  List<HostVO> poolHosts=new ArrayList<HostVO>();
  for (  HostVO h : allHosts) {
    boolean success=addPoolToHost(h.getId(),pool);
    if (success) {
      poolHosts.add(h);
    }
  }
  if (poolHosts.isEmpty()) {
    _storagePoolDao.expunge(pool.getId());
    pool=null;
  }
 else {
    createCapacityEntry(pool);
  }
  _configMgr.updateConfiguration(UserContext.current().getCallerUserId(),""String_Node_Str"",""String_Node_Str"");
  return pool;
}","@Override @SuppressWarnings(""String_Node_Str"") public StoragePoolVO createPool(CreateStoragePoolCmd cmd) throws ResourceInUseException, IllegalArgumentException, UnknownHostException, ResourceUnavailableException {
  Long clusterId=cmd.getClusterId();
  Long podId=cmd.getPodId();
  Map ds=cmd.getDetails();
  if (clusterId != null && podId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Map<String,String> details=new HashMap<String,String>();
  if (ds != null) {
    Collection detailsCollection=ds.values();
    Iterator it=detailsCollection.iterator();
    while (it.hasNext()) {
      HashMap d=(HashMap)it.next();
      Iterator it2=d.entrySet().iterator();
      while (it2.hasNext()) {
        Map.Entry entry=(Map.Entry)it2.next();
        details.put((String)entry.getKey(),(String)entry.getValue());
      }
    }
  }
  Long zoneId=cmd.getZoneId();
  DataCenterVO zone=_dcDao.findById(cmd.getZoneId());
  if (zone == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId);
  }
  Account account=UserContext.current().getCaller();
  if (Grouping.AllocationState.Disabled == zone.getAllocationState() && !_accountMgr.isRootAdmin(account.getType())) {
    throw new PermissionDeniedException(""String_Node_Str"" + zoneId);
  }
  List<HostVO> allHosts=_hostDao.listBy(Host.Type.Routing,clusterId,podId,zoneId);
  if (allHosts.isEmpty()) {
    throw new ResourceUnavailableException(""String_Node_Str"" + clusterId,HostPodVO.class,podId);
  }
  URI uri=null;
  try {
    uri=new URI(cmd.getUrl());
    if (uri.getScheme() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getUrl() + ""String_Node_Str"");
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriHost=uri.getHost();
      String uriPath=uri.getPath();
      if (uriHost == null || uriPath == null || uriHost.trim().isEmpty() || uriPath.trim().isEmpty()) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      String uriPath=uri.getPath();
      if (uriPath == null) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new InvalidParameterValueException(cmd.getUrl() + ""String_Node_Str"");
  }
  String tags=cmd.getTags();
  if (tags != null) {
    String[] tokens=tags.split(""String_Node_Str"");
    for (    String tag : tokens) {
      tag=tag.trim();
      if (tag.length() == 0) {
        continue;
      }
      details.put(tag,""String_Node_Str"");
    }
  }
  String scheme=uri.getScheme();
  String storageHost=uri.getHost();
  String hostPath=uri.getPath();
  int port=uri.getPort();
  StoragePoolVO pool=null;
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + scheme + ""String_Node_Str""+ storageHost+ ""String_Node_Str""+ hostPath+ ""String_Node_Str""+ port);
  }
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.NetworkFilesystem,storageHost,port,hostPath);
    if (clusterId == null) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=0;
    }
    pool=new StoragePoolVO(StoragePoolType.Filesystem,""String_Node_Str"",0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.SharedMountPoint,storageHost,0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.PreSetup,storageHost,0,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    String[] tokens=hostPath.split(""String_Node_Str"");
    int lun=NumbersUtil.parseInt(tokens[tokens.length - 1],-1);
    if (port == -1) {
      port=3260;
    }
    if (lun != -1) {
      if (clusterId == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      hostPath.replaceFirst(""String_Node_Str"",""String_Node_Str"");
      pool=new StoragePoolVO(StoragePoolType.IscsiLUN,storageHost,port,hostPath);
    }
 else {
      Enumeration<StoragePoolDiscoverer> en=_discoverers.enumeration();
      while (en.hasMoreElements()) {
        Map<StoragePoolVO,Map<String,String>> pools;
        try {
          pools=en.nextElement().find(cmd.getZoneId(),podId,uri,details);
        }
 catch (        DiscoveryException e) {
          throw new IllegalArgumentException(""String_Node_Str"" + uri,e);
        }
        if (pools != null) {
          Map.Entry<StoragePoolVO,Map<String,String>> entry=pools.entrySet().iterator().next();
          pool=entry.getKey();
          details=entry.getValue();
          break;
        }
      }
    }
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    if (port == -1) {
      port=2049;
    }
    pool=new StoragePoolVO(StoragePoolType.ISO,storageHost,port,hostPath);
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    pool=new StoragePoolVO(StoragePoolType.VMFS,""String_Node_Str"" + hostPath,0,hostPath);
  }
 else {
    s_logger.warn(""String_Node_Str"" + uri);
    throw new IllegalArgumentException(""String_Node_Str"" + uri);
  }
  if (pool == null) {
    s_logger.warn(""String_Node_Str"" + uri);
    throw new IllegalArgumentException(""String_Node_Str"" + uri);
  }
  List<StoragePoolVO> pools=_storagePoolDao.listPoolByHostPath(storageHost,hostPath);
  if (!pools.isEmpty() && !scheme.equalsIgnoreCase(""String_Node_Str"")) {
    Long oldPodId=pools.get(0).getPodId();
    throw new ResourceInUseException(""String_Node_Str"" + uri + ""String_Node_Str""+ oldPodId+ ""String_Node_Str"",""String_Node_Str"",uri.toASCIIString());
  }
  long poolId=_storagePoolDao.getNextInSequence(Long.class,""String_Node_Str"");
  String uuid=null;
  if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=UUID.randomUUID().toString();
  }
 else   if (scheme.equalsIgnoreCase(""String_Node_Str"")) {
    uuid=hostPath.replace(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    uuid=UUID.nameUUIDFromBytes(new String(storageHost + hostPath).getBytes()).toString();
  }
  List<StoragePoolVO> spHandles=_storagePoolDao.findIfDuplicatePoolsExistByUUID(uuid);
  if ((spHandles != null) && (spHandles.size() > 0)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    throw new ResourceInUseException(""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + poolId + ""String_Node_Str""+ uuid+ ""String_Node_Str""+ zoneId+ ""String_Node_Str""+ podId+ ""String_Node_Str""+ cmd.getStoragePoolName());
  }
  pool.setId(poolId);
  pool.setUuid(uuid);
  pool.setDataCenterId(cmd.getZoneId());
  pool.setPodId(podId);
  pool.setName(cmd.getStoragePoolName());
  pool.setClusterId(clusterId);
  pool.setStatus(StoragePoolStatus.Up);
  pool=_storagePoolDao.persist(pool,details);
  if (allHosts.isEmpty()) {
    return pool;
  }
  boolean success=false;
  for (  HostVO h : allHosts) {
    success=createStoragePool(h.getId(),pool);
    if (success) {
      break;
    }
  }
  if (!success) {
    s_logger.warn(""String_Node_Str"" + pool + ""String_Node_Str""+ clusterId);
    return null;
  }
  s_logger.debug(""String_Node_Str"");
  List<HostVO> poolHosts=new ArrayList<HostVO>();
  for (  HostVO h : allHosts) {
    success=addPoolToHost(h.getId(),pool);
    if (success) {
      poolHosts.add(h);
    }
  }
  if (poolHosts.isEmpty()) {
    _storagePoolDao.expunge(pool.getId());
    pool=null;
  }
 else {
    createCapacityEntry(pool);
  }
  _configMgr.updateConfiguration(UserContext.current().getCallerUserId(),""String_Node_Str"",""String_Node_Str"");
  return pool;
}"
89742,"@Override public boolean addPoolToHost(long hostId,StoragePoolVO pool){
  s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ hostId);
  if (pool.getPoolType() != StoragePoolType.NetworkFilesystem && pool.getPoolType() != StoragePoolType.Filesystem && pool.getPoolType() != StoragePoolType.IscsiLUN && pool.getPoolType() != StoragePoolType.Iscsi && pool.getPoolType() != StoragePoolType.VMFS && pool.getPoolType() != StoragePoolType.SharedMountPoint && pool.getPoolType() != StoragePoolType.PreSetup) {
    s_logger.warn(""String_Node_Str"" + pool.getPoolType());
    return true;
  }
  ModifyStoragePoolCommand cmd=new ModifyStoragePoolCommand(true,pool);
  final Answer answer=_agentMgr.easySend(hostId,cmd);
  if (answer != null) {
    if (answer.getResult() == false) {
      String msg=""String_Node_Str"" + answer.getDetails();
      _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,pool.getDataCenterId(),pool.getPodId(),msg,msg);
      s_logger.warn(msg);
      return false;
    }
    if (answer instanceof ModifyStoragePoolAnswer) {
      ModifyStoragePoolAnswer mspAnswer=(ModifyStoragePoolAnswer)answer;
      StoragePoolHostVO poolHost=_poolHostDao.findByPoolHost(pool.getId(),hostId);
      if (poolHost == null) {
        poolHost=new StoragePoolHostVO(pool.getId(),hostId,mspAnswer.getPoolInfo().getLocalPath().replaceAll(""String_Node_Str"",""String_Node_Str""));
        _poolHostDao.persist(poolHost);
      }
 else {
        poolHost.setLocalPath(mspAnswer.getPoolInfo().getLocalPath().replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
      pool.setAvailableBytes(mspAnswer.getPoolInfo().getAvailableBytes());
      pool.setCapacityBytes(mspAnswer.getPoolInfo().getCapacityBytes());
      _storagePoolDao.update(pool.getId(),pool);
      return true;
    }
  }
 else {
    return false;
  }
  return false;
}","@Override public boolean addPoolToHost(long hostId,StoragePoolVO pool){
  s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ hostId);
  if (pool.getPoolType() != StoragePoolType.NetworkFilesystem && pool.getPoolType() != StoragePoolType.Filesystem && pool.getPoolType() != StoragePoolType.IscsiLUN && pool.getPoolType() != StoragePoolType.Iscsi && pool.getPoolType() != StoragePoolType.VMFS && pool.getPoolType() != StoragePoolType.SharedMountPoint && pool.getPoolType() != StoragePoolType.PreSetup) {
    s_logger.warn(""String_Node_Str"" + pool.getPoolType());
    return false;
  }
  ModifyStoragePoolCommand cmd=new ModifyStoragePoolCommand(true,pool);
  final Answer answer=_agentMgr.easySend(hostId,cmd);
  if (answer != null) {
    if (answer.getResult() == false) {
      String msg=""String_Node_Str"" + answer.getDetails();
      _alertMgr.sendAlert(AlertManager.ALERT_TYPE_HOST,pool.getDataCenterId(),pool.getPodId(),msg,msg);
      s_logger.warn(msg);
      return false;
    }
    if (answer instanceof ModifyStoragePoolAnswer) {
      ModifyStoragePoolAnswer mspAnswer=(ModifyStoragePoolAnswer)answer;
      StoragePoolHostVO poolHost=_poolHostDao.findByPoolHost(pool.getId(),hostId);
      if (poolHost == null) {
        poolHost=new StoragePoolHostVO(pool.getId(),hostId,mspAnswer.getPoolInfo().getLocalPath().replaceAll(""String_Node_Str"",""String_Node_Str""));
        _poolHostDao.persist(poolHost);
      }
 else {
        poolHost.setLocalPath(mspAnswer.getPoolInfo().getLocalPath().replaceAll(""String_Node_Str"",""String_Node_Str""));
      }
      pool.setAvailableBytes(mspAnswer.getPoolInfo().getAvailableBytes());
      pool.setCapacityBytes(mspAnswer.getPoolInfo().getCapacityBytes());
      _storagePoolDao.update(pool.getId(),pool);
      return true;
    }
  }
 else {
    return false;
  }
  return false;
}"
89743,"@Override @DB public boolean deleteZone(DeleteZoneCmd cmd){
  Long userId=UserContext.current().getCallerUserId();
  Long zoneId=cmd.getId();
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  checkIfZoneIsDeletable(zoneId);
  boolean success=_zoneDao.expunge(zoneId);
  try {
    _zoneDao.deleteVnet(zoneId);
    List<NetworkVO> networks=_networkDao.listByZone(zoneId);
    if (networks != null && !networks.isEmpty()) {
      for (      NetworkVO network : networks) {
        _networkDao.remove(network.getId());
      }
    }
    List<VlanVO> vlans=_vlanDao.listByZone(zoneId);
    for (    VlanVO vlan : vlans) {
      _vlanDao.remove(vlan.getId());
    }
  }
 catch (  Exception ex) {
    s_logger.error(""String_Node_Str"" + zoneId);
    throw new CloudRuntimeException(""String_Node_Str"" + zoneId);
  }
  if (success) {
    return true;
  }
 else {
    return false;
  }
}","@Override @DB public boolean deleteZone(DeleteZoneCmd cmd){
  Transaction txn=Transaction.currentTxn();
  boolean success=false;
  Long userId=UserContext.current().getCallerUserId();
  Long zoneId=cmd.getId();
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  checkIfZoneIsDeletable(zoneId);
  txn.start();
  _zoneDao.deleteVnet(zoneId);
  List<VlanVO> vlans=_vlanDao.listByZone(zoneId);
  for (  VlanVO vlan : vlans) {
    _vlanDao.remove(vlan.getId());
  }
  List<NetworkVO> networks=_networkDao.listByZoneIncludingRemoved(zoneId);
  if (networks != null && !networks.isEmpty()) {
    for (    NetworkVO network : networks) {
      _networkDao.expunge(network.getId());
    }
  }
  success=_zoneDao.expunge(zoneId);
  txn.commit();
  return success;
}"
89744,"public static ObjectName registerMBean(String objTypeName,String objInstanceName,Object mbean) throws MalformedObjectNameException, InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException {
  String name=""String_Node_Str"" + objTypeName;
  if (objInstanceName != null && !objInstanceName.isEmpty())   name+=""String_Node_Str"" + objInstanceName;
  ObjectName objectName=new ObjectName(name);
  ArrayList<MBeanServer> server=MBeanServerFactory.findMBeanServer(null);
  if (server.size() > 0) {
    MBeanServer mBeanServer=server.get(0);
    mBeanServer.registerMBean(mbean,objectName);
    return objectName;
  }
 else {
    MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
    mBeanServer.registerMBean(mbean,objectName);
    return objectName;
  }
}","public static ObjectName registerMBean(String objTypeName,String objInstanceName,Object mbean) throws MalformedObjectNameException, InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException {
  String name=""String_Node_Str"" + objTypeName;
  if (objInstanceName != null && !objInstanceName.isEmpty())   name+=""String_Node_Str"" + objInstanceName;
  ObjectName objectName=new ObjectName(name);
  ArrayList<MBeanServer> server=MBeanServerFactory.findMBeanServer(null);
  if (server.size() > 0) {
    MBeanServer mBeanServer=server.get(0);
    if (!mBeanServer.isRegistered(objectName))     mBeanServer.registerMBean(mbean,objectName);
    return objectName;
  }
 else {
    MBeanServer mBeanServer=ManagementFactory.getPlatformMBeanServer();
    if (!mBeanServer.isRegistered(objectName))     mBeanServer.registerMBean(mbean,objectName);
    return objectName;
  }
}"
89745,"@Override public boolean deleteVlanIpRange(DeleteVlanIpRangeCmd cmd) throws InvalidParameterValueException {
  Long vlanDbId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  VlanVO vlan=_vlanDao.findById(vlanDbId);
  if (vlan == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  return deleteVlanAndPublicIpRange(userId,vlanDbId);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_VLAN_IP_RANGE_DELETE,eventDescription=""String_Node_Str"",async=false) public boolean deleteVlanIpRange(DeleteVlanIpRangeCmd cmd) throws InvalidParameterValueException {
  Long vlanDbId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  VlanVO vlan=_vlanDao.findById(vlanDbId);
  if (vlan == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  return deleteVlanAndPublicIpRange(userId,vlanDbId);
}"
89746,"@Override public UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    List<NetworkVO> networks=_networkDao.listByOwner(owner.getId());
    NetworkVO guestVirtualNetwork=null;
    for (    NetworkVO network : networks) {
      if (!network.isShared() && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == GuestIpType.Virtual) {
        guestVirtualNetwork=network;
        break;
      }
    }
    if (guestVirtualNetwork == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + owner.getId() + ""String_Node_Str"");
    }
    networkList.add(guestVirtualNetwork);
  }
 else {
    boolean requiredNetworkOfferingIsPresent=false;
    List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    Long requiredOfferingId=null;
    if (!requiredOfferings.isEmpty()) {
      requiredOfferingId=requiredOfferings.get(0).getId();
    }
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (!network.isShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
      if (requiredOfferingId != null && network.getNetworkOfferingId() == requiredOfferingId.longValue()) {
        requiredNetworkOfferingIsPresent=true;
      }
      networkList.add(network);
    }
    if (requiredOfferingId != null && !requiredNetworkOfferingIsPresent) {
      throw new InvalidParameterValueException(""String_Node_Str"" + requiredOfferingId + ""String_Node_Str"");
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,caller,diskOfferingId,diskSize,networkList,null,group,userData,sshKeyPair,hypervisor,caller);
}","@Override public UserVm createAdvancedVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> networkIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  if (networkIdList == null || networkIdList.isEmpty()) {
    List<NetworkVO> networks=_networkDao.listByOwner(owner.getId());
    NetworkVO guestVirtualNetwork=null;
    for (    NetworkVO network : networks) {
      if (!network.isShared() && network.getTrafficType() == TrafficType.Guest && network.getGuestType() == GuestIpType.Virtual) {
        guestVirtualNetwork=network;
        break;
      }
    }
    if (guestVirtualNetwork == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + owner.getId() + ""String_Node_Str"");
    }
    networkList.add(guestVirtualNetwork);
  }
 else {
    boolean requiredNetworkOfferingIsPresent=false;
    List<NetworkOfferingVO> requiredOfferings=_networkOfferingDao.listByAvailability(Availability.Required,false);
    Long requiredOfferingId=null;
    if (!requiredOfferings.isEmpty()) {
      requiredOfferingId=requiredOfferings.get(0).getId();
    }
    for (    Long networkId : networkIdList) {
      NetworkVO network=_networkDao.findById(networkId);
      if (network == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + networkIdList.get(0).longValue());
      }
      if (!network.isShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(owner.getId(),network.getId());
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + network.getId() + ""String_Node_Str"");
        }
      }
      if (requiredOfferingId != null && network.getNetworkOfferingId() == requiredOfferingId.longValue()) {
        requiredNetworkOfferingIsPresent=true;
      }
      networkList.add(network);
    }
    if (requiredOfferingId != null && !requiredNetworkOfferingIsPresent) {
      throw new InvalidParameterValueException(""String_Node_Str"" + requiredOfferingId + ""String_Node_Str"");
    }
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,null,group,userData,sshKeyPair,hypervisor,caller);
}"
89747,"@Override public UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  NetworkVO defaultNetwork=_networkMgr.getSystemNetworkByZoneAndTrafficType(zone.getId(),TrafficType.Guest);
  if (defaultNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else {
    networkList.add(defaultNetwork);
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,caller,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller);
}","@Override public UserVm createBasicSecurityGroupVirtualMachine(DataCenter zone,ServiceOffering serviceOffering,VirtualMachineTemplate template,List<Long> securityGroupIdList,Account owner,String hostName,String displayName,Long diskOfferingId,Long diskSize,String group,HypervisorType hypervisor,String userData,String sshKeyPair) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException, ResourceAllocationException {
  Account caller=UserContext.current().getCaller();
  List<NetworkVO> networkList=new ArrayList<NetworkVO>();
  _accountMgr.checkAccess(caller,owner);
  NetworkVO defaultNetwork=_networkMgr.getSystemNetworkByZoneAndTrafficType(zone.getId(),TrafficType.Guest);
  if (defaultNetwork == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else {
    networkList.add(defaultNetwork);
  }
  return createVirtualMachine(zone,serviceOffering,template,hostName,displayName,owner,diskOfferingId,diskSize,networkList,securityGroupIdList,group,userData,sshKeyPair,hypervisor,caller);
}"
89748,"private void checkConflicts() throws ConfigurationException {
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> peers=_mshostDao.getActiveList(new Date(cutTime.getTime() - heartbeatThreshold));
  for (  ManagementServerHostVO peer : peers) {
    if (_mshostId == peer.getMsid()) {
      continue;
    }
    if (_clusterNodeIP.equals(peer.getServiceIP().trim())) {
      if (""String_Node_Str"".equals(_clusterNodeIP)) {
        throw new ConfigurationException(""String_Node_Str"");
      }
 else {
        if (!pingManagementNode(peer.getId())) {
          throw new ConfigurationException(""String_Node_Str"" + peer.getServiceIP() + ""String_Node_Str"");
        }
      }
    }
  }
}","private void checkConflicts() throws ConfigurationException {
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> peers=_mshostDao.getActiveList(new Date(cutTime.getTime() - heartbeatThreshold));
  for (  ManagementServerHostVO peer : peers) {
    String peerIP=peer.getServiceIP().trim();
    if (_clusterNodeIP.equals(peerIP)) {
      if (""String_Node_Str"".equals(_clusterNodeIP)) {
        String msg=""String_Node_Str"";
        s_logger.error(msg);
        throw new ConfigurationException(msg);
      }
 else {
        if (!pingManagementNode(peer.getMsid())) {
          String msg=""String_Node_Str"" + peer.getServiceIP() + ""String_Node_Str"";
          s_logger.error(msg);
          throw new ConfigurationException(msg);
        }
      }
    }
  }
}"
89749,"@Override public String getSelfPeerName(){
  return Long.toString(_id);
}","@Override public String getSelfPeerName(){
  return Long.toString(_msid);
}"
89750,"private void peerScan(){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> currentList=_mshostDao.getActiveList(new Date(cutTime.getTime() - heartbeatThreshold));
  List<ManagementServerHostVO> removedNodeList=new ArrayList<ManagementServerHostVO>();
  if (_mshostId != null) {
    for (    Map.Entry<Long,ManagementServerHostVO> entry : activePeers.entrySet()) {
      if (!isIdInList(entry.getKey(),currentList)) {
        if (entry.getKey().longValue() != _mshostId.longValue()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
          }
          removedNodeList.add(entry.getValue());
        }
      }
    }
  }
  Iterator<ManagementServerHostVO> it=removedNodeList.iterator();
  while (it.hasNext()) {
    ManagementServerHostVO mshost=it.next();
    if (!pingManagementNode(mshost.getId())) {
      s_logger.warn(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      activePeers.remove(mshost.getId());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      it.remove();
    }
  }
  List<ManagementServerHostVO> newNodeList=new ArrayList<ManagementServerHostVO>();
  for (  ManagementServerHostVO mshost : currentList) {
    if (!activePeers.containsKey(mshost.getId())) {
      activePeers.put(mshost.getId(),mshost);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + mshost.getId() + ""String_Node_Str""+ mshost.getServiceIP());
      }
      newNodeList.add(mshost);
      try {
        JmxUtil.registerMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId(),new ClusterManagerMBeanImpl(this,mshost));
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
  }
  if (newNodeList.size() > 0) {
    Profiler profiler=new Profiler();
    profiler.start();
    notifyNodeJoined(newNodeList);
    profiler.stop();
    if (profiler.getDuration() > 1000) {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
    }
  }
  if (removedNodeList.size() > 0) {
    Profiler profiler=new Profiler();
    profiler.start();
    notifyNodeLeft(removedNodeList);
    profiler.stop();
    if (profiler.getDuration() > 1000) {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
    }
  }
}","private void peerScan(){
  Date cutTime=DateUtil.currentGMTTime();
  List<ManagementServerHostVO> currentList=_mshostDao.getActiveList(new Date(cutTime.getTime() - heartbeatThreshold));
  List<ManagementServerHostVO> removedNodeList=new ArrayList<ManagementServerHostVO>();
  if (_mshostId != null) {
    for (    Map.Entry<Long,ManagementServerHostVO> entry : activePeers.entrySet()) {
      if (!isIdInList(entry.getKey(),currentList)) {
        if (entry.getKey().longValue() != _mshostId.longValue()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + entry.getKey() + ""String_Node_Str""+ entry.getValue().getServiceIP());
          }
          removedNodeList.add(entry.getValue());
        }
      }
    }
  }
  Iterator<ManagementServerHostVO> it=removedNodeList.iterator();
  while (it.hasNext()) {
    ManagementServerHostVO mshost=it.next();
    if (!pingManagementNode(mshost.getMsid())) {
      s_logger.warn(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      activePeers.remove(mshost.getId());
      try {
        JmxUtil.unregisterMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId());
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
 else {
      s_logger.info(""String_Node_Str"" + mshost.getId() + ""String_Node_Str"");
      it.remove();
    }
  }
  List<ManagementServerHostVO> newNodeList=new ArrayList<ManagementServerHostVO>();
  for (  ManagementServerHostVO mshost : currentList) {
    if (!activePeers.containsKey(mshost.getId())) {
      activePeers.put(mshost.getId(),mshost);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + mshost.getId() + ""String_Node_Str""+ mshost.getServiceIP());
      }
      newNodeList.add(mshost);
      try {
        JmxUtil.registerMBean(""String_Node_Str"",""String_Node_Str"" + mshost.getId(),new ClusterManagerMBeanImpl(this,mshost));
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + e.toString());
      }
    }
  }
  if (newNodeList.size() > 0) {
    Profiler profiler=new Profiler();
    profiler.start();
    notifyNodeJoined(newNodeList);
    profiler.stop();
    if (profiler.getDuration() > 1000) {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
    }
  }
  if (removedNodeList.size() > 0) {
    Profiler profiler=new Profiler();
    profiler.start();
    notifyNodeLeft(removedNodeList);
    profiler.stop();
    if (profiler.getDuration() > 1000) {
      if (s_logger.isDebugEnabled())       s_logger.debug(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + profiler.getDuration() + ""String_Node_Str"");
    }
  }
}"
89751,"@Override @DB public boolean start(){
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + _id);
  }
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    final Class<?> c=this.getClass();
    String version=c.getPackage().getImplementationVersion();
    ManagementServerHostVO mshost=_mshostDao.findByMsid(_id);
    if (mshost == null) {
      mshost=new ManagementServerHostVO();
      mshost.setMsid(_id);
      mshost.setName(NetUtils.getHostName());
      mshost.setVersion(version);
      mshost.setServiceIP(_clusterNodeIP);
      mshost.setServicePort(_currentServiceAdapter.getServicePort());
      mshost.setLastUpdateTime(DateUtil.currentGMTTime());
      mshost.setRemoved(null);
      mshost.setAlertCount(0);
      _mshostDao.persist(mshost);
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + _id + ""String_Node_Str"");
      }
    }
 else {
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + _id + ""String_Node_Str"");
      }
      _mshostDao.update(mshost.getId(),NetUtils.getHostName(),version,_clusterNodeIP,_currentServiceAdapter.getServicePort(),DateUtil.currentGMTTime());
    }
    txn.commit();
    _mshostId=mshost.getId();
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + _mshostId + ""String_Node_Str""+ _clusterNodeIP+ ""String_Node_Str""+ _currentServiceAdapter.getServicePort());
    }
    _heartbeatScheduler.scheduleAtFixedRate(getHeartbeatTask(),heartbeatInterval,heartbeatInterval,TimeUnit.MILLISECONDS);
    _peerScanScheduler.scheduleAtFixedRate(getPeerScanTask(),heartbeatInterval,heartbeatInterval,TimeUnit.MILLISECONDS);
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
    txn.rollback();
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"");
  }
  return true;
}","@Override @DB public boolean start(){
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + _msid);
  }
  Transaction txn=Transaction.currentTxn();
  try {
    txn.start();
    final Class<?> c=this.getClass();
    String version=c.getPackage().getImplementationVersion();
    ManagementServerHostVO mshost=_mshostDao.findByMsid(_msid);
    if (mshost == null) {
      mshost=new ManagementServerHostVO();
      mshost.setMsid(_msid);
      mshost.setName(NetUtils.getHostName());
      mshost.setVersion(version);
      mshost.setServiceIP(_clusterNodeIP);
      mshost.setServicePort(_currentServiceAdapter.getServicePort());
      mshost.setLastUpdateTime(DateUtil.currentGMTTime());
      mshost.setRemoved(null);
      mshost.setAlertCount(0);
      _mshostDao.persist(mshost);
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + _msid + ""String_Node_Str"");
      }
    }
 else {
      if (s_logger.isInfoEnabled()) {
        s_logger.info(""String_Node_Str"" + _msid + ""String_Node_Str"");
      }
      _mshostDao.update(mshost.getId(),NetUtils.getHostName(),version,_clusterNodeIP,_currentServiceAdapter.getServicePort(),DateUtil.currentGMTTime());
    }
    txn.commit();
    _mshostId=mshost.getId();
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + _mshostId + ""String_Node_Str""+ _clusterNodeIP+ ""String_Node_Str""+ _currentServiceAdapter.getServicePort());
    }
    _heartbeatScheduler.scheduleAtFixedRate(getHeartbeatTask(),heartbeatInterval,heartbeatInterval,TimeUnit.MILLISECONDS);
    _peerScanScheduler.scheduleAtFixedRate(getPeerScanTask(),heartbeatInterval,heartbeatInterval,TimeUnit.MILLISECONDS);
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
    txn.rollback();
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"");
  }
  return true;
}"
89752,"@Override public long getManagementNodeId(){
  return _id;
}","@Override public long getManagementNodeId(){
  return _msid;
}"
89753,"@Override public boolean pingManagementNode(long msid){
  ManagementServerHostVO mshost=_mshostDao.findById(msid);
  if (mshost == null)   return false;
  String targetIp=mshost.getServiceIP();
  if (""String_Node_Str"".equals(targetIp) || ""String_Node_Str"".equals(targetIp)) {
    s_logger.info(""String_Node_Str"");
    return false;
  }
  String targetPeer=String.valueOf(msid);
  ClusterService peerService=null;
  for (int i=0; i < 2; i++) {
    try {
      peerService=getPeerService(targetPeer);
    }
 catch (    RemoteException e) {
      s_logger.error(""String_Node_Str"" + targetPeer + ""String_Node_Str"");
    }
    if (peerService != null) {
      try {
        return peerService.ping(getSelfPeerName());
      }
 catch (      RemoteException e) {
        s_logger.warn(""String_Node_Str"",e);
        invalidatePeerService(targetPeer);
      }
    }
 else {
      s_logger.warn(""String_Node_Str"" + msid + ""String_Node_Str"");
    }
  }
  return false;
}","@Override public boolean pingManagementNode(long msid){
  ManagementServerHostVO mshost=_mshostDao.findByMsid(msid);
  if (mshost == null)   return false;
  String targetIp=mshost.getServiceIP();
  if (""String_Node_Str"".equals(targetIp) || ""String_Node_Str"".equals(targetIp)) {
    s_logger.info(""String_Node_Str"");
    return false;
  }
  String targetPeer=String.valueOf(msid);
  ClusterService peerService=null;
  for (int i=0; i < 2; i++) {
    try {
      peerService=getPeerService(targetPeer);
    }
 catch (    RemoteException e) {
      s_logger.error(""String_Node_Str"" + targetPeer + ""String_Node_Str"");
    }
    if (peerService != null) {
      try {
        return peerService.ping(getSelfPeerName());
      }
 catch (      RemoteException e) {
        s_logger.warn(""String_Node_Str"",e);
        invalidatePeerService(targetPeer);
      }
    }
 else {
      s_logger.warn(""String_Node_Str"" + msid + ""String_Node_Str"");
    }
  }
  return false;
}"
89754,"@Override public ClusterService getPeerService(String strPeer) throws RemoteException {
  String serviceUrl=getServiceEndpointName(strPeer);
  return new ClusterServiceServletImpl(serviceUrl);
}","@Override public ClusterService getPeerService(String strPeer) throws RemoteException {
  String serviceUrl=getServiceEndpointName(strPeer);
  if (serviceUrl == null)   return null;
  return new ClusterServiceServletImpl(serviceUrl);
}"
89755,"protected boolean checkPool(ExcludeList avoid,StoragePoolVO pool,DiskProfile dskCh,VMTemplateVO template,List<VMTemplateStoragePoolVO> templatesInPool,StatsCollector sc){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (dskCh.getType().equals(VolumeType.ROOT) && pool.getPoolType().equals(StoragePoolType.Iscsi)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (!pool.getStatus().equals(StoragePoolStatus.Up)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getStatus().name() + ""String_Node_Str"");
    }
    return false;
  }
  if (!poolIsCorrectType(dskCh,pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (!(cluster.getHypervisorType() == dskCh.getHypersorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (sc != null) {
    long totalSize=pool.getCapacityBytes();
    StorageStats stats=sc.getStorageStats(pool.getId());
    if (stats != null) {
      double usedPercentage=((double)stats.getByteUsed() / (double)totalSize);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ pool.getCapacityBytes()+ ""String_Node_Str""+ stats.getByteUsed()+ ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold);
      }
      if (usedPercentage >= _storageUsedThreshold) {
        return false;
      }
    }
  }
  Pair<Long,Long> sizes=_volumeDao.getCountAndTotalByPool(pool.getId());
  long totalAllocatedSize=sizes.second() + sizes.first() * _extraBytesPerVolume;
  boolean tmpinstalled=false;
  List<VMTemplateStoragePoolVO> templatePoolVOs;
  if (templatesInPool != null) {
    templatePoolVOs=templatesInPool;
  }
 else {
    templatePoolVOs=_templatePoolDao.listByPoolId(pool.getId());
  }
  for (  VMTemplateStoragePoolVO templatePoolVO : templatePoolVOs) {
    if ((template != null) && !tmpinstalled && (templatePoolVO.getTemplateId() == template.getId())) {
      tmpinstalled=true;
    }
    long templateSize=templatePoolVO.getTemplateSize();
    totalAllocatedSize+=templateSize + _extraBytesPerVolume;
  }
  if ((template != null) && !tmpinstalled) {
    HostVO secondaryStorageHost=_storageMgr.getSecondaryStorageHost(pool.getDataCenterId());
    if (secondaryStorageHost == null) {
      return false;
    }
 else {
      VMTemplateHostVO templateHostVO=_templateHostDao.findByHostTemplate(secondaryStorageHost.getId(),template.getId());
      if (templateHostVO == null) {
        return false;
      }
 else {
        s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ 2);
        long templateSize=templateHostVO.getSize();
        long templatePhysicalSize=templateHostVO.getPhysicalSize();
        totalAllocatedSize+=(templateSize + _extraBytesPerVolume) + (templatePhysicalSize + _extraBytesPerVolume);
      }
    }
  }
  long askingSize=dskCh.getSize();
  int storageOverprovisioningFactor=1;
  if (pool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    storageOverprovisioningFactor=_storageOverprovisioningFactor;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
  }
  if ((pool.getCapacityBytes() * storageOverprovisioningFactor) < (totalAllocatedSize + askingSize)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
    }
    return false;
  }
  return true;
}","protected boolean checkPool(ExcludeList avoid,StoragePoolVO pool,DiskProfile dskCh,VMTemplateVO template,List<VMTemplateStoragePoolVO> templatesInPool,StatsCollector sc){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (dskCh.getType().equals(VolumeType.ROOT) && pool.getPoolType().equals(StoragePoolType.Iscsi)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (!pool.getStatus().equals(StoragePoolStatus.Up)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getStatus().name() + ""String_Node_Str"");
    }
    return false;
  }
  if (!poolIsCorrectType(dskCh,pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (!(cluster.getHypervisorType() == dskCh.getHypersorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (sc != null) {
    long totalSize=pool.getCapacityBytes();
    StorageStats stats=sc.getStoragePoolStats(pool.getId());
    if (stats == null) {
      stats=sc.getStorageStats(pool.getId());
    }
    if (stats != null) {
      double usedPercentage=((double)stats.getByteUsed() / (double)totalSize);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ pool.getCapacityBytes()+ ""String_Node_Str""+ stats.getByteUsed()+ ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold);
      }
      if (usedPercentage >= _storageUsedThreshold) {
        return false;
      }
    }
  }
  Pair<Long,Long> sizes=_volumeDao.getCountAndTotalByPool(pool.getId());
  long totalAllocatedSize=sizes.second() + sizes.first() * _extraBytesPerVolume;
  boolean tmpinstalled=false;
  List<VMTemplateStoragePoolVO> templatePoolVOs;
  if (templatesInPool != null) {
    templatePoolVOs=templatesInPool;
  }
 else {
    templatePoolVOs=_templatePoolDao.listByPoolId(pool.getId());
  }
  for (  VMTemplateStoragePoolVO templatePoolVO : templatePoolVOs) {
    if ((template != null) && !tmpinstalled && (templatePoolVO.getTemplateId() == template.getId())) {
      tmpinstalled=true;
    }
    long templateSize=templatePoolVO.getTemplateSize();
    totalAllocatedSize+=templateSize + _extraBytesPerVolume;
  }
  if ((template != null) && !tmpinstalled) {
    HostVO secondaryStorageHost=_storageMgr.getSecondaryStorageHost(pool.getDataCenterId());
    if (secondaryStorageHost == null) {
      return false;
    }
 else {
      VMTemplateHostVO templateHostVO=_templateHostDao.findByHostTemplate(secondaryStorageHost.getId(),template.getId());
      if (templateHostVO == null) {
        return false;
      }
 else {
        s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ 2);
        long templateSize=templateHostVO.getSize();
        long templatePhysicalSize=templateHostVO.getPhysicalSize();
        totalAllocatedSize+=(templateSize + _extraBytesPerVolume) + (templatePhysicalSize + _extraBytesPerVolume);
      }
    }
  }
  long askingSize=dskCh.getSize();
  int storageOverprovisioningFactor=1;
  if (pool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    storageOverprovisioningFactor=_storageOverprovisioningFactor;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
  }
  if ((pool.getCapacityBytes() * storageOverprovisioningFactor) < (totalAllocatedSize + askingSize)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
    }
    return false;
  }
  return true;
}"
89756,"protected boolean checkPool(ExcludeList avoid,StoragePoolVO pool,DiskProfile dskCh,VMTemplateVO template,List<VMTemplateStoragePoolVO> templatesInPool,StatsCollector sc){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (dskCh.getType().equals(VolumeType.ROOT) && pool.getPoolType().equals(StoragePoolType.Iscsi)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (!pool.getStatus().equals(StoragePoolStatus.Up)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getStatus().name() + ""String_Node_Str"");
    }
    return false;
  }
  if (!poolIsCorrectType(dskCh,pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (!(cluster.getHypervisorType() == dskCh.getHypersorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (sc != null) {
    long totalSize=pool.getCapacityBytes();
    StorageStats stats=sc.getStorageStats(pool.getId());
    if (stats != null) {
      double usedPercentage=((double)stats.getByteUsed() / (double)totalSize);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ pool.getCapacityBytes()+ ""String_Node_Str""+ stats.getByteUsed()+ ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold);
      }
      if (usedPercentage >= _storageUsedThreshold) {
        return false;
      }
    }
  }
  Pair<Long,Long> sizes=_volumeDao.getCountAndTotalByPool(pool.getId());
  long totalAllocatedSize=sizes.second() + sizes.first() * _extraBytesPerVolume;
  boolean tmpinstalled=false;
  List<VMTemplateStoragePoolVO> templatePoolVOs;
  if (templatesInPool != null) {
    templatePoolVOs=templatesInPool;
  }
 else {
    templatePoolVOs=_templatePoolDao.listByPoolId(pool.getId());
  }
  for (  VMTemplateStoragePoolVO templatePoolVO : templatePoolVOs) {
    VMTemplateVO templateInPool=_templateDao.findById(templatePoolVO.getTemplateId());
    if ((template != null) && !tmpinstalled && (templateInPool.getId() == template.getId())) {
      tmpinstalled=true;
    }
    long templateSize=templatePoolVO.getTemplateSize();
    totalAllocatedSize+=templateSize + _extraBytesPerVolume;
  }
  if ((template != null) && !tmpinstalled) {
    HostVO secondaryStorageHost=_storageMgr.getSecondaryStorageHost(pool.getDataCenterId());
    if (secondaryStorageHost == null) {
      return false;
    }
 else {
      VMTemplateHostVO templateHostVO=_templateHostDao.findByHostTemplate(secondaryStorageHost.getId(),template.getId());
      if (templateHostVO == null) {
        return false;
      }
 else {
        s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ 2);
        long templateSize=templateHostVO.getSize();
        long templatePhysicalSize=templateHostVO.getPhysicalSize();
        totalAllocatedSize+=(templateSize + _extraBytesPerVolume) + (templatePhysicalSize + _extraBytesPerVolume);
      }
    }
  }
  long askingSize=dskCh.getSize();
  int storageOverprovisioningFactor=1;
  if (pool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    storageOverprovisioningFactor=_storageOverprovisioningFactor;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
  }
  if ((pool.getCapacityBytes() * storageOverprovisioningFactor) < (totalAllocatedSize + askingSize)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
    }
    return false;
  }
  return true;
}","protected boolean checkPool(ExcludeList avoid,StoragePoolVO pool,DiskProfile dskCh,VMTemplateVO template,List<VMTemplateStoragePoolVO> templatesInPool,StatsCollector sc){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getName() + ""String_Node_Str""+ pool.getId());
  }
  if (avoid.shouldAvoid(pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (dskCh.getType().equals(VolumeType.ROOT) && pool.getPoolType().equals(StoragePoolType.Iscsi)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (!pool.getStatus().equals(StoragePoolStatus.Up)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getStatus().name() + ""String_Node_Str"");
    }
    return false;
  }
  if (!poolIsCorrectType(dskCh,pool)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  Long clusterId=pool.getClusterId();
  ClusterVO cluster=_clusterDao.findById(clusterId);
  if (!(cluster.getHypervisorType() == dskCh.getHypersorType())) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
    return false;
  }
  if (sc != null) {
    long totalSize=pool.getCapacityBytes();
    StorageStats stats=sc.getStorageStats(pool.getId());
    if (stats != null) {
      double usedPercentage=((double)stats.getByteUsed() / (double)totalSize);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ pool.getCapacityBytes()+ ""String_Node_Str""+ stats.getByteUsed()+ ""String_Node_Str""+ usedPercentage+ ""String_Node_Str""+ _storageUsedThreshold);
      }
      if (usedPercentage >= _storageUsedThreshold) {
        return false;
      }
    }
  }
  Pair<Long,Long> sizes=_volumeDao.getCountAndTotalByPool(pool.getId());
  long totalAllocatedSize=sizes.second() + sizes.first() * _extraBytesPerVolume;
  boolean tmpinstalled=false;
  List<VMTemplateStoragePoolVO> templatePoolVOs;
  if (templatesInPool != null) {
    templatePoolVOs=templatesInPool;
  }
 else {
    templatePoolVOs=_templatePoolDao.listByPoolId(pool.getId());
  }
  for (  VMTemplateStoragePoolVO templatePoolVO : templatePoolVOs) {
    if ((template != null) && !tmpinstalled && (templatePoolVO.getTemplateId() == template.getId())) {
      tmpinstalled=true;
    }
    long templateSize=templatePoolVO.getTemplateSize();
    totalAllocatedSize+=templateSize + _extraBytesPerVolume;
  }
  if ((template != null) && !tmpinstalled) {
    HostVO secondaryStorageHost=_storageMgr.getSecondaryStorageHost(pool.getDataCenterId());
    if (secondaryStorageHost == null) {
      return false;
    }
 else {
      VMTemplateHostVO templateHostVO=_templateHostDao.findByHostTemplate(secondaryStorageHost.getId(),template.getId());
      if (templateHostVO == null) {
        return false;
      }
 else {
        s_logger.debug(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ 2);
        long templateSize=templateHostVO.getSize();
        long templatePhysicalSize=templateHostVO.getPhysicalSize();
        totalAllocatedSize+=(templateSize + _extraBytesPerVolume) + (templatePhysicalSize + _extraBytesPerVolume);
      }
    }
  }
  long askingSize=dskCh.getSize();
  int storageOverprovisioningFactor=1;
  if (pool.getPoolType() == StoragePoolType.NetworkFilesystem) {
    storageOverprovisioningFactor=_storageOverprovisioningFactor;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
  }
  if ((pool.getCapacityBytes() * storageOverprovisioningFactor) < (totalAllocatedSize + askingSize)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pool.getId() + ""String_Node_Str""+ (pool.getCapacityBytes() * storageOverprovisioningFactor)+ ""String_Node_Str""+ totalAllocatedSize+ ""String_Node_Str""+ askingSize);
    }
    return false;
  }
  return true;
}"
89757,"protected ClusterDaoImpl(){
  super();
  HyTypeWithoutGuidSearch=createSearchBuilder();
  HyTypeWithoutGuidSearch.and(""String_Node_Str"",HyTypeWithoutGuidSearch.entity().getHypervisorType(),SearchCriteria.Op.EQ);
  HyTypeWithoutGuidSearch.and(""String_Node_Str"",HyTypeWithoutGuidSearch.entity().getGuid(),SearchCriteria.Op.NULL);
  HyTypeWithoutGuidSearch.done();
  ZoneHyTypeSearch=createSearchBuilder();
  ZoneHyTypeSearch.and(""String_Node_Str"",ZoneHyTypeSearch.entity().getHypervisorType(),SearchCriteria.Op.EQ);
  ZoneHyTypeSearch.and(""String_Node_Str"",ZoneHyTypeSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  ZoneHyTypeSearch.done();
  PodSearch=createSearchBuilder();
  PodSearch.and(""String_Node_Str"",PodSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  PodSearch.and(""String_Node_Str"",PodSearch.entity().getName(),SearchCriteria.Op.EQ);
  PodSearch.done();
  ZoneSearch=createSearchBuilder();
  ZoneSearch.and(""String_Node_Str"",ZoneSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  ZoneSearch.done();
  AvailHyperSearch=createSearchBuilder();
  AvailHyperSearch.and(""String_Node_Str"",AvailHyperSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  AvailHyperSearch.groupBy(AvailHyperSearch.entity().getHypervisorType());
  AvailHyperSearch.done();
}","protected ClusterDaoImpl(){
  super();
  HyTypeWithoutGuidSearch=createSearchBuilder();
  HyTypeWithoutGuidSearch.and(""String_Node_Str"",HyTypeWithoutGuidSearch.entity().getHypervisorType(),SearchCriteria.Op.EQ);
  HyTypeWithoutGuidSearch.and(""String_Node_Str"",HyTypeWithoutGuidSearch.entity().getGuid(),SearchCriteria.Op.NULL);
  HyTypeWithoutGuidSearch.done();
  ZoneHyTypeSearch=createSearchBuilder();
  ZoneHyTypeSearch.and(""String_Node_Str"",ZoneHyTypeSearch.entity().getHypervisorType(),SearchCriteria.Op.EQ);
  ZoneHyTypeSearch.and(""String_Node_Str"",ZoneHyTypeSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  ZoneHyTypeSearch.done();
  PodSearch=createSearchBuilder();
  PodSearch.and(""String_Node_Str"",PodSearch.entity().getPodId(),SearchCriteria.Op.EQ);
  PodSearch.and(""String_Node_Str"",PodSearch.entity().getName(),SearchCriteria.Op.EQ);
  PodSearch.done();
  ZoneSearch=createSearchBuilder();
  ZoneSearch.and(""String_Node_Str"",ZoneSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  ZoneSearch.done();
  AvailHyperSearch=createSearchBuilder();
  AvailHyperSearch.and(""String_Node_Str"",AvailHyperSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  AvailHyperSearch.groupBy(AvailHyperSearch.entity().getHypervisorType());
  AvailHyperSearch.done();
}"
89758,"@Override public String[] getHypervisors(ListHypervisorsCmd cmd){
  Long zoneId=cmd.getZoneId();
  if (zoneId == null) {
    String hypers=_configDao.getValue(Config.HypervisorList.key());
    if (hypers == ""String_Node_Str"" || hypers == null) {
      return null;
    }
    return hypers.split(""String_Node_Str"");
  }
 else {
    String[] result=null;
    List<ClusterVO> clustersForZone=_clusterDao.listByZoneId(zoneId);
    if (clustersForZone != null && clustersForZone.size() > 0) {
      result=new String[clustersForZone.size()];
      int i=0;
      for (      ClusterVO cluster : clustersForZone) {
        result[i++]=cluster.getHypervisorType().toString();
      }
    }
    return result;
  }
}","@Override public String[] getHypervisors(ListHypervisorsCmd cmd){
  Long zoneId=cmd.getZoneId();
  if (zoneId == null) {
    String hypers=_configDao.getValue(Config.HypervisorList.key());
    if (hypers == ""String_Node_Str"" || hypers == null) {
      return null;
    }
    return hypers.split(""String_Node_Str"");
  }
 else {
    int i=0;
    List<ClusterVO> clustersForZone=_clusterDao.listByZoneId(zoneId);
    if (clustersForZone != null && clustersForZone.size() > 0) {
      Set<String> result=new HashSet<String>();
      for (      ClusterVO cluster : clustersForZone) {
        result.add(cluster.getHypervisorType().toString());
      }
      String[] resultArray=new String[result.size()];
      for (      String entity : result) {
        resultArray[i++]=entity;
      }
      return resultArray;
    }
  }
  return null;
}"
89759,"@Override @ActionEvent(eventType=EventTypes.EVENT_NETWORK_DELETE,eventDescription=""String_Node_Str"",async=true) public boolean deleteNetwork(long networkId){
  int nicCount=getActiveNicsInNetwork(networkId);
  if (nicCount > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId + ""String_Node_Str"");
  }
  Account caller=UserContext.current().getCaller();
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Account owner=_accountMgr.getAccount(network.getAccountId());
  if (!_accountMgr.isAdmin(caller.getType())) {
    if (network.getAccountId() != caller.getId()) {
      throw new PermissionDeniedException(""String_Node_Str"" + caller.getAccountName() + ""String_Node_Str""+ networkId+ ""String_Node_Str"");
    }
  }
 else {
    _accountMgr.checkAccess(caller,owner);
  }
  List<UserVmVO> userVms=_vmDao.listByNetworkId(networkId);
  for (  UserVmVO vm : userVms) {
    if (!(vm.getState() == VirtualMachine.State.Error || (vm.getState() == VirtualMachine.State.Expunging && vm.getRemoved() != null))) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  User callerUser=_accountMgr.getActiveUser(UserContext.current().getCallerUserId());
  ReservationContext context=new ReservationContextImpl(null,null,callerUser,owner);
  return deleteNetworkInternal(networkId,context);
}","@Override @ActionEvent(eventType=EventTypes.EVENT_NETWORK_DELETE,eventDescription=""String_Node_Str"",async=true) public boolean deleteNetwork(long networkId){
  Account caller=UserContext.current().getCaller();
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
  Account owner=_accountMgr.getAccount(network.getAccountId());
  if (!_accountMgr.isAdmin(caller.getType())) {
    if (network.getAccountId() != caller.getId()) {
      throw new PermissionDeniedException(""String_Node_Str"" + caller.getAccountName() + ""String_Node_Str""+ networkId+ ""String_Node_Str"");
    }
  }
 else {
    _accountMgr.checkAccess(caller,owner);
  }
  User callerUser=_accountMgr.getActiveUser(UserContext.current().getCallerUserId());
  ReservationContext context=new ReservationContextImpl(null,null,callerUser,owner);
  return destroyNetwork(networkId,context);
}"
89760,"@Override @DB public boolean destroyNetwork(long networkId,ReservationContext context){
  Account callerAccount=_accountMgr.getAccount(context.getCaller().getAccountId());
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    s_logger.debug(""String_Node_Str"" + networkId);
    return false;
  }
  shutdownNetwork(networkId,context);
  network=_networksDao.findById(networkId);
  if (network.getState() != Network.State.Allocated && network.getState() != Network.State.Setup) {
    s_logger.debug(""String_Node_Str"" + network.getState());
    return false;
  }
  boolean success=true;
  cleanupNetworkResources(networkId,callerAccount,context.getCaller().getId());
  for (  NetworkElement element : _networkElements) {
    try {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + element);
      }
      element.destroy(network);
    }
 catch (    ResourceUnavailableException e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
catch (    ConcurrentOperationException e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
  }
  if (success) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
    }
    NetworkGuru guru=_networkGurus.get(network.getGuruName());
    Account owner=_accountMgr.getAccount(network.getAccountId());
    Transaction txn=Transaction.currentTxn();
    txn.start();
    guru.trash(network,_networkOfferingDao.findById(network.getNetworkOfferingId()),owner);
    if (!deleteVlansInNetwork(network.getId(),context.getCaller().getId())) {
      success=false;
      s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str"");
    }
 else {
      network.setState(Network.State.Destroy);
      _networksDao.update(network.getId(),network);
      _networksDao.remove(network.getId());
      txn.commit();
    }
  }
  return success;
}","@Override @DB public boolean destroyNetwork(long networkId,ReservationContext context){
  Account callerAccount=_accountMgr.getAccount(context.getCaller().getAccountId());
  NetworkVO network=_networksDao.findById(networkId);
  if (network == null) {
    s_logger.debug(""String_Node_Str"" + networkId);
    return false;
  }
  int nicCount=getActiveNicsInNetwork(networkId);
  if (nicCount > 0) {
    s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
    return false;
  }
  List<UserVmVO> userVms=_vmDao.listByNetworkId(networkId);
  for (  UserVmVO vm : userVms) {
    if (!(vm.getState() == VirtualMachine.State.Error || (vm.getState() == VirtualMachine.State.Expunging && vm.getRemoved() != null))) {
      s_logger.warn(""String_Node_Str"" + vm + ""String_Node_Str""+ vm.getState()+ ""String_Node_Str"");
      return false;
    }
  }
  shutdownNetwork(networkId,context);
  network=_networksDao.findById(networkId);
  if (network.getState() != Network.State.Allocated && network.getState() != Network.State.Setup) {
    s_logger.debug(""String_Node_Str"" + network.getState());
    return false;
  }
  boolean success=true;
  cleanupNetworkResources(networkId,callerAccount,context.getCaller().getId());
  for (  NetworkElement element : _networkElements) {
    try {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + element);
      }
      element.destroy(network);
    }
 catch (    ResourceUnavailableException e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
catch (    ConcurrentOperationException e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
  }
  if (success) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
    }
    NetworkGuru guru=_networkGurus.get(network.getGuruName());
    Account owner=_accountMgr.getAccount(network.getAccountId());
    Transaction txn=Transaction.currentTxn();
    txn.start();
    guru.trash(network,_networkOfferingDao.findById(network.getNetworkOfferingId()),owner);
    if (!deleteVlansInNetwork(network.getId(),context.getCaller().getId())) {
      success=false;
      s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str"");
    }
 else {
      network.setState(Network.State.Destroy);
      _networksDao.update(network.getId(),network);
      _networksDao.remove(network.getId());
      txn.commit();
    }
  }
  return success;
}"
89761,"@Override public boolean applyFirewallRules(Network network,List<? extends FirewallRule> rules) throws ResourceUnavailableException {
  DomainRouterVO router=_routerDao.findByNetwork(network.getId());
  if (router == null) {
    s_logger.warn(""String_Node_Str"" + network.getId());
    throw new ResourceUnavailableException(""String_Node_Str"",DataCenter.class,network.getDataCenterId());
  }
  if (router.getState() == State.Running) {
    if (rules != null && !rules.isEmpty()) {
      if (rules.get(0).getPurpose() == Purpose.LoadBalancing) {
        List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(network.getId());
        List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
        for (        LoadBalancerVO lb : lbs) {
          List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
          LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
          lbRules.add(loadBalancing);
        }
        return applyLBRules(router,lbRules);
      }
 else       if (rules.get(0).getPurpose() == Purpose.PortForwarding) {
        return applyPortForwardingRules(router,(List<PortForwardingRule>)rules);
      }
 else       if (rules.get(0).getPurpose() == Purpose.StaticNat) {
        return applyStaticNatRules(router,(List<StaticNatRule>)rules);
      }
 else {
        s_logger.warn(""String_Node_Str"" + rules.get(0).getPurpose());
        return false;
      }
    }
 else {
      return true;
    }
  }
 else   if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
    s_logger.debug(""String_Node_Str"" + router.getState() + ""String_Node_Str"");
    return true;
  }
 else {
    s_logger.warn(""String_Node_Str"" + router.getState());
    throw new CloudRuntimeException(""String_Node_Str"" + router.getState());
  }
}","@Override public boolean applyFirewallRules(Network network,List<? extends FirewallRule> rules) throws ResourceUnavailableException {
  DomainRouterVO router=_routerDao.findByNetwork(network.getId());
  if (router == null) {
    s_logger.warn(""String_Node_Str"" + network.getId());
    throw new ResourceUnavailableException(""String_Node_Str"",DataCenter.class,network.getDataCenterId());
  }
  if (router.getState() == State.Running) {
    if (rules != null && !rules.isEmpty()) {
      if (rules.get(0).getPurpose() == Purpose.LoadBalancing) {
        List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(network.getId());
        List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
        for (        LoadBalancerVO lb : lbs) {
          List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
          LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
          lbRules.add(loadBalancing);
        }
        return applyLBRules(router,lbRules);
      }
 else       if (rules.get(0).getPurpose() == Purpose.PortForwarding) {
        return applyPortForwardingRules(router,(List<PortForwardingRule>)rules);
      }
 else       if (rules.get(0).getPurpose() == Purpose.StaticNat) {
        return applyStaticNatRules(router,(List<StaticNatRule>)rules);
      }
 else {
        s_logger.warn(""String_Node_Str"" + rules.get(0).getPurpose());
        return false;
      }
    }
 else {
      return true;
    }
  }
 else   if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
    s_logger.debug(""String_Node_Str"" + router.getState() + ""String_Node_Str"");
    return true;
  }
 else {
    s_logger.warn(""String_Node_Str"" + router.getState());
    throw new ResourceUnavailableException(""String_Node_Str"",VirtualRouter.class,router.getId());
  }
}"
89762,"@Override public boolean revokePortForwardingRulesForVm(long vmId){
  UserVmVO vm=_vmDao.findByIdIncludingRemoved(vmId);
  if (vm == null) {
    return false;
  }
  List<PortForwardingRuleVO> rules=_forwardingDao.listByVm(vmId);
  Set<Long> ipsToReprogram=new HashSet<Long>();
  if (rules == null || rules.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + vmId);
    return true;
  }
  for (  PortForwardingRuleVO rule : rules) {
    revokePortForwardingRuleInternal(rule.getId(),_accountMgr.getSystemAccount(),Account.ACCOUNT_ID_SYSTEM,false);
    ipsToReprogram.add(rule.getSourceIpAddressId());
  }
  for (  Long ipId : ipsToReprogram) {
    s_logger.debug(""String_Node_Str"" + ipId + ""String_Node_Str"");
    applyPortForwardingRules(ipId,true,_accountMgr.getSystemAccount());
  }
  return true;
}","@Override public boolean revokePortForwardingRulesForVm(long vmId){
  boolean success=true;
  UserVmVO vm=_vmDao.findByIdIncludingRemoved(vmId);
  if (vm == null) {
    return false;
  }
  List<PortForwardingRuleVO> rules=_forwardingDao.listByVm(vmId);
  Set<Long> ipsToReprogram=new HashSet<Long>();
  if (rules == null || rules.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + vmId);
    return true;
  }
  for (  PortForwardingRuleVO rule : rules) {
    revokePortForwardingRuleInternal(rule.getId(),_accountMgr.getSystemAccount(),Account.ACCOUNT_ID_SYSTEM,false);
    ipsToReprogram.add(rule.getSourceIpAddressId());
  }
  for (  Long ipId : ipsToReprogram) {
    s_logger.debug(""String_Node_Str"" + ipId + ""String_Node_Str"");
    if (!applyPortForwardingRules(ipId,true,_accountMgr.getSystemAccount())) {
      s_logger.warn(""String_Node_Str"" + ipId);
      success=false;
    }
  }
  return success;
}"
89763,"@Override public boolean revokeStaticNatRulesForVm(long vmId){
  UserVmVO vm=_vmDao.findByIdIncludingRemoved(vmId);
  if (vm == null) {
    return false;
  }
  List<FirewallRuleVO> rules=_firewallDao.listStaticNatByVmId(vm.getId());
  Set<Long> ipsToReprogram=new HashSet<Long>();
  if (rules == null || rules.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + vmId);
    return true;
  }
  for (  FirewallRuleVO rule : rules) {
    revokeStaticNatRuleInternal(rule.getId(),_accountMgr.getSystemAccount(),Account.ACCOUNT_ID_SYSTEM,false);
    ipsToReprogram.add(rule.getSourceIpAddressId());
  }
  for (  Long ipId : ipsToReprogram) {
    s_logger.debug(""String_Node_Str"" + ipId + ""String_Node_Str"");
    applyStaticNatRules(ipId,true,_accountMgr.getSystemAccount());
  }
  return true;
}","@Override public boolean revokeStaticNatRulesForVm(long vmId){
  boolean success=true;
  UserVmVO vm=_vmDao.findByIdIncludingRemoved(vmId);
  if (vm == null) {
    return false;
  }
  List<FirewallRuleVO> rules=_firewallDao.listStaticNatByVmId(vm.getId());
  Set<Long> ipsToReprogram=new HashSet<Long>();
  if (rules == null || rules.isEmpty()) {
    s_logger.debug(""String_Node_Str"" + vmId);
    return true;
  }
  for (  FirewallRuleVO rule : rules) {
    revokeStaticNatRuleInternal(rule.getId(),_accountMgr.getSystemAccount(),Account.ACCOUNT_ID_SYSTEM,false);
    ipsToReprogram.add(rule.getSourceIpAddressId());
  }
  for (  Long ipId : ipsToReprogram) {
    s_logger.debug(""String_Node_Str"" + ipId + ""String_Node_Str"");
    if (!applyStaticNatRules(ipId,true,_accountMgr.getSystemAccount())) {
      success=false;
      s_logger.warn(""String_Node_Str"" + ipId);
    }
  }
  return success;
}"
89764,"boolean cleanupAccount(AccountVO account,long callerUserId,Account caller) throws ConcurrentOperationException, ResourceUnavailableException ;","boolean cleanupAccount(AccountVO account,long callerUserId,Account caller);"
89765,"@Override public boolean cleanupAccount(AccountVO account,long callerUserId,Account caller) throws ConcurrentOperationException, ResourceUnavailableException {
  long accountId=account.getId();
  boolean accountCleanupNeeded=false;
  try {
    List<InstanceGroupVO> groups=_vmGroupDao.listByAccountId(accountId);
    for (    InstanceGroupVO group : groups) {
      if (!_vmMgr.deleteVmGroup(group.getId())) {
        s_logger.error(""String_Node_Str"" + group.getId());
        accountCleanupNeeded=true;
      }
    }
    boolean success=_snapMgr.deleteSnapshotDirsForAccount(accountId);
    if (success) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
    }
    List<VMTemplateVO> userTemplates=_templateDao.listByAccountId(accountId);
    boolean allTemplatesDeleted=true;
    for (    VMTemplateVO template : userTemplates) {
      try {
        allTemplatesDeleted=_tmpltMgr.delete(callerUserId,template.getId(),null);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + template.getName() + ""String_Node_Str"",e);
        allTemplatesDeleted=false;
      }
    }
    if (!allTemplatesDeleted) {
      s_logger.warn(""String_Node_Str"" + accountId);
      accountCleanupNeeded=true;
    }
    List<UserVmVO> vms=_userVmDao.listByAccountId(accountId);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str""+ vms.size());
    }
    for (    UserVmVO vm : vms) {
      if (!_vmMgr.expunge(vm,callerUserId,caller)) {
        s_logger.error(""String_Node_Str"" + vm.getId());
        accountCleanupNeeded=true;
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),vm.getHypervisorType().toString());
      _usageEventDao.persist(usageEvent);
    }
    List<VolumeVO> volumes=_volumeDao.findDetachedByAccount(accountId);
    for (    VolumeVO volume : volumes) {
      if (!volume.getState().equals(Volume.State.Destroy)) {
        _storageMgr.destroyVolume(volume);
        if (volume.getPoolId() != null) {
          UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName());
          _usageEventDao.persist(usageEvent);
        }
      }
    }
    List<RemoteAccessVpnVO> remoteAccessVpns=_remoteAccessVpnDao.findByAccount(accountId);
    List<VpnUserVO> vpnUsers=_vpnUser.listByAccount(accountId);
    for (    VpnUserVO vpnUser : vpnUsers) {
      _remoteAccessVpnMgr.removeVpnUser(accountId,vpnUser.getUsername());
    }
    for (    RemoteAccessVpnVO vpn : remoteAccessVpns) {
      _remoteAccessVpnMgr.destroyRemoteAccessVpn(vpn.getServerAddressId());
    }
    int numRemoved=_securityGroupDao.removeByAccountId(accountId);
    s_logger.info(""String_Node_Str"" + numRemoved + ""String_Node_Str""+ accountId);
    boolean networksDeleted=true;
    s_logger.debug(""String_Node_Str"" + account.getId());
    List<NetworkVO> networks=_networkDao.listByOwner(accountId);
    if (networks != null) {
      for (      NetworkVO network : networks) {
        ReservationContext context=new ReservationContextImpl(null,null,getActiveUser(callerUserId),account);
        if (!_networkMgr.deleteNetworkInternal(network.getId(),context)) {
          s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
          accountCleanupNeeded=true;
          networksDeleted=false;
        }
 else {
          s_logger.debug(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
        }
      }
    }
    if (networksDeleted) {
      if (!_configMgr.deleteAccountSpecificVirtualRanges(accountId)) {
        accountCleanupNeeded=true;
      }
 else {
        s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + accountId + ""String_Node_Str"");
      }
    }
    return true;
  }
  finally {
    s_logger.info(""String_Node_Str"" + account.getId() + (accountCleanupNeeded ? ""String_Node_Str"" : ""String_Node_Str""));
    if (accountCleanupNeeded) {
      _accountDao.markForCleanup(accountId);
    }
  }
}","@Override public boolean cleanupAccount(AccountVO account,long callerUserId,Account caller){
  long accountId=account.getId();
  boolean accountCleanupNeeded=false;
  try {
    List<InstanceGroupVO> groups=_vmGroupDao.listByAccountId(accountId);
    for (    InstanceGroupVO group : groups) {
      if (!_vmMgr.deleteVmGroup(group.getId())) {
        s_logger.error(""String_Node_Str"" + group.getId());
        accountCleanupNeeded=true;
      }
    }
    boolean success=_snapMgr.deleteSnapshotDirsForAccount(accountId);
    if (success) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
    }
    List<VMTemplateVO> userTemplates=_templateDao.listByAccountId(accountId);
    boolean allTemplatesDeleted=true;
    for (    VMTemplateVO template : userTemplates) {
      try {
        allTemplatesDeleted=_tmpltMgr.delete(callerUserId,template.getId(),null);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + template.getName() + ""String_Node_Str"",e);
        allTemplatesDeleted=false;
      }
    }
    if (!allTemplatesDeleted) {
      s_logger.warn(""String_Node_Str"" + accountId);
      accountCleanupNeeded=true;
    }
    List<UserVmVO> vms=_userVmDao.listByAccountId(accountId);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str""+ vms.size());
    }
    for (    UserVmVO vm : vms) {
      if (!_vmMgr.expunge(vm,callerUserId,caller)) {
        s_logger.error(""String_Node_Str"" + vm.getId());
        accountCleanupNeeded=true;
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),vm.getHypervisorType().toString());
      _usageEventDao.persist(usageEvent);
    }
    List<VolumeVO> volumes=_volumeDao.findDetachedByAccount(accountId);
    for (    VolumeVO volume : volumes) {
      if (!volume.getState().equals(Volume.State.Destroy)) {
        try {
          _storageMgr.destroyVolume(volume);
          if (volume.getPoolId() != null) {
            UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName());
            _usageEventDao.persist(usageEvent);
          }
        }
 catch (        ConcurrentOperationException ex) {
          s_logger.warn(""String_Node_Str"" + accountId + ""String_Node_Str"",ex);
          accountCleanupNeeded=true;
        }
      }
    }
    List<RemoteAccessVpnVO> remoteAccessVpns=_remoteAccessVpnDao.findByAccount(accountId);
    List<VpnUserVO> vpnUsers=_vpnUser.listByAccount(accountId);
    for (    VpnUserVO vpnUser : vpnUsers) {
      _remoteAccessVpnMgr.removeVpnUser(accountId,vpnUser.getUsername());
    }
    try {
      for (      RemoteAccessVpnVO vpn : remoteAccessVpns) {
        _remoteAccessVpnMgr.destroyRemoteAccessVpn(vpn.getServerAddressId());
      }
    }
 catch (    ResourceUnavailableException ex) {
      s_logger.warn(""String_Node_Str"" + accountId + ""String_Node_Str"",ex);
      accountCleanupNeeded=true;
    }
    int numRemoved=_securityGroupDao.removeByAccountId(accountId);
    s_logger.info(""String_Node_Str"" + numRemoved + ""String_Node_Str""+ accountId);
    boolean networksDeleted=true;
    s_logger.debug(""String_Node_Str"" + account.getId());
    List<NetworkVO> networks=_networkDao.listByOwner(accountId);
    if (networks != null) {
      for (      NetworkVO network : networks) {
        ReservationContext context=new ReservationContextImpl(null,null,getActiveUser(callerUserId),account);
        if (!_networkMgr.destroyNetwork(network.getId(),context)) {
          s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
          accountCleanupNeeded=true;
          networksDeleted=false;
        }
 else {
          s_logger.debug(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
        }
      }
    }
    if (networksDeleted) {
      if (!_configMgr.deleteAccountSpecificVirtualRanges(accountId)) {
        accountCleanupNeeded=true;
      }
 else {
        s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + accountId + ""String_Node_Str"");
      }
    }
    return true;
  }
  finally {
    s_logger.info(""String_Node_Str"" + account.getId() + (accountCleanupNeeded ? ""String_Node_Str"" : ""String_Node_Str""));
    if (accountCleanupNeeded) {
      _accountDao.markForCleanup(accountId);
    }
  }
}"
89766,"@Override public boolean deleteAccount(AccountVO account,long callerUserId,Account caller){
  long accountId=account.getId();
  try {
    if (!_accountDao.remove(accountId)) {
      s_logger.error(""String_Node_Str"" + accountId);
      return false;
    }
    List<UserVO> users=_userDao.listByAccount(accountId);
    for (    UserVO user : users) {
      _userDao.remove(user.getId());
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + accountId);
    }
    cleanupAccount(account,callerUserId,caller);
    return true;
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + accountId,e);
    return false;
  }
}","@Override public boolean deleteAccount(AccountVO account,long callerUserId,Account caller){
  long accountId=account.getId();
  if (!_accountDao.remove(accountId)) {
    s_logger.error(""String_Node_Str"" + accountId);
    return false;
  }
  List<UserVO> users=_userDao.listByAccount(accountId);
  for (  UserVO user : users) {
    _userDao.remove(user.getId());
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + accountId);
  }
  return cleanupAccount(account,callerUserId,caller);
}"
89767,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  _host.uuid=(String)params.get(""String_Node_Str"");
  try {
    _dcId=Long.parseLong((String)params.get(""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
    throw new ConfigurationException(""String_Node_Str"" + params.get(""String_Node_Str""));
  }
  _name=_host.uuid;
  _host.ip=(String)params.get(""String_Node_Str"");
  _host.pool=(String)params.get(""String_Node_Str"");
  _username=(String)params.get(""String_Node_Str"");
  _password=(String)params.get(""String_Node_Str"");
  _pod=(String)params.get(""String_Node_Str"");
  _cluster=(String)params.get(""String_Node_Str"");
  _privateNetworkName=(String)params.get(""String_Node_Str"");
  _publicNetworkName=(String)params.get(""String_Node_Str"");
  _guestNetworkName=(String)params.get(""String_Node_Str"");
  _linkLocalPrivateNetworkName=(String)params.get(""String_Node_Str"");
  if (_linkLocalPrivateNetworkName == null) {
    _linkLocalPrivateNetworkName=""String_Node_Str"";
  }
  _storageNetworkName1=(String)params.get(""String_Node_Str"");
  _storageNetworkName2=(String)params.get(""String_Node_Str"");
  String value=(String)params.get(""String_Node_Str"");
  _wait=NumbersUtil.parseInt(value,600);
  if (_pod == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_host.ip == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_username == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_password == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_host.uuid == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  _host.uuid=(String)params.get(""String_Node_Str"");
  try {
    _dcId=Long.parseLong((String)params.get(""String_Node_Str""));
  }
 catch (  NumberFormatException e) {
    throw new ConfigurationException(""String_Node_Str"" + params.get(""String_Node_Str""));
  }
  _name=_host.uuid;
  _host.ip=(String)params.get(""String_Node_Str"");
  _host.pool=(String)params.get(""String_Node_Str"");
  _username=(String)params.get(""String_Node_Str"");
  _password=(String)params.get(""String_Node_Str"");
  _pod=(String)params.get(""String_Node_Str"");
  _cluster=(String)params.get(""String_Node_Str"");
  _privateNetworkName=(String)params.get(""String_Node_Str"");
  _publicNetworkName=(String)params.get(""String_Node_Str"");
  _guestNetworkName=(String)params.get(""String_Node_Str"");
  _instance=(String)params.get(""String_Node_Str"");
  _linkLocalPrivateNetworkName=(String)params.get(""String_Node_Str"");
  if (_linkLocalPrivateNetworkName == null) {
    _linkLocalPrivateNetworkName=""String_Node_Str"";
  }
  _storageNetworkName1=(String)params.get(""String_Node_Str"");
  _storageNetworkName2=(String)params.get(""String_Node_Str"");
  String value=(String)params.get(""String_Node_Str"");
  _wait=NumbersUtil.parseInt(value,600);
  if (_pod == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_host.ip == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_username == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_password == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  if (_host.uuid == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  return true;
}"
89768,"private static String getResetResultMessage(){
  ExceptionResponse resultObject=new ExceptionResponse();
  resultObject.setErrorCode(BaseCmd.INTERNAL_ERROR);
  resultObject.setErrorText(""String_Node_Str"");
  return ApiSerializerHelper.toSerializedStringOld(resultObject);
}","private static String getResetResultMessage(String messageText){
  ExceptionResponse resultObject=new ExceptionResponse();
  resultObject.setErrorCode(BaseCmd.INTERNAL_ERROR);
  resultObject.setErrorText(messageText);
  return ApiSerializerHelper.toSerializedStringOld(resultObject);
}"
89769,"@Override public void onManagementNodeLeft(List<ManagementServerHostVO> nodeList,long selfNodeId){
  for (  ManagementServerHostVO msHost : nodeList) {
    Transaction txn=Transaction.open(Transaction.CLOUD_DB);
    try {
      txn.start();
      List<SyncQueueItemVO> items=_queueMgr.getActiveQueueItems(msHost.getId(),true);
      cleanupPendingJobs(items);
      _queueMgr.resetQueueProcess(msHost.getId());
      _jobDao.resetJobProcess(msHost.getId(),BaseCmd.INTERNAL_ERROR,getResetResultMessage());
      txn.commit();
    }
 catch (    Throwable e) {
      s_logger.warn(""String_Node_Str"",e);
      txn.rollback();
    }
 finally {
      txn.close();
    }
  }
}","@Override public void onManagementNodeLeft(List<ManagementServerHostVO> nodeList,long selfNodeId){
  for (  ManagementServerHostVO msHost : nodeList) {
    Transaction txn=Transaction.open(Transaction.CLOUD_DB);
    try {
      txn.start();
      List<SyncQueueItemVO> items=_queueMgr.getActiveQueueItems(msHost.getId(),true);
      cleanupPendingJobs(items);
      _queueMgr.resetQueueProcess(msHost.getId());
      _jobDao.resetJobProcess(msHost.getId(),BaseCmd.INTERNAL_ERROR,getResetResultMessage(""String_Node_Str""));
      txn.commit();
    }
 catch (    Throwable e) {
      s_logger.warn(""String_Node_Str"",e);
      txn.rollback();
    }
 finally {
      txn.close();
    }
  }
}"
89770,"private void reallyRun(){
  try {
    s_logger.trace(""String_Node_Str"");
    Date cutTime=new Date(DateUtil.currentGMTTime().getTime() - _jobExpireSeconds * 1000);
    List<AsyncJobVO> l=_jobDao.getExpiredJobs(cutTime,100);
    if (l != null && l.size() > 0) {
      for (      AsyncJobVO job : l) {
        _jobDao.expunge(job.getId());
      }
    }
    List<SyncQueueItemVO> blockItems=_queueMgr.getBlockedQueueItems(_jobCancelThresholdSeconds * 1000,false);
    if (blockItems != null && blockItems.size() > 0) {
      for (      SyncQueueItemVO item : blockItems) {
        if (item.getContentType().equalsIgnoreCase(""String_Node_Str""))         completeAsyncJob(item.getContentId(),2,0,""String_Node_Str"");
        _queueMgr.purgeItem(item.getId());
      }
    }
    s_logger.trace(""String_Node_Str"");
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
  }
 finally {
    StackMaid.current().exitCleanup();
  }
}","private void reallyRun(){
  try {
    s_logger.trace(""String_Node_Str"");
    Date cutTime=new Date(DateUtil.currentGMTTime().getTime() - _jobExpireSeconds * 1000);
    List<AsyncJobVO> l=_jobDao.getExpiredJobs(cutTime,100);
    if (l != null && l.size() > 0) {
      for (      AsyncJobVO job : l) {
        _jobDao.expunge(job.getId());
      }
    }
    List<SyncQueueItemVO> blockItems=_queueMgr.getBlockedQueueItems(_jobCancelThresholdSeconds * 1000,false);
    if (blockItems != null && blockItems.size() > 0) {
      for (      SyncQueueItemVO item : blockItems) {
        if (item.getContentType().equalsIgnoreCase(""String_Node_Str""))         completeAsyncJob(item.getContentId(),2,0,getResetResultMessage(""String_Node_Str""));
        _queueMgr.purgeItem(item.getId());
      }
    }
    s_logger.trace(""String_Node_Str"");
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"",e);
  }
 finally {
    StackMaid.current().exitCleanup();
  }
}"
89771,"private void cleanupPendingJobs(List<SyncQueueItemVO> l){
  if (l != null && l.size() > 0) {
    for (    SyncQueueItemVO item : l) {
      if (s_logger.isInfoEnabled())       s_logger.info(""String_Node_Str"" + item.toString());
      String contentType=item.getContentType();
      if (contentType != null && contentType.equals(""String_Node_Str"")) {
        Long jobId=item.getContentId();
        if (jobId != null) {
          s_logger.warn(""String_Node_Str"" + jobId);
          completeAsyncJob(jobId,AsyncJobResult.STATUS_FAILED,0,""String_Node_Str"");
        }
      }
      _queueMgr.purgeItem(item.getId());
    }
  }
}","private void cleanupPendingJobs(List<SyncQueueItemVO> l){
  if (l != null && l.size() > 0) {
    for (    SyncQueueItemVO item : l) {
      if (s_logger.isInfoEnabled())       s_logger.info(""String_Node_Str"" + item.toString());
      String contentType=item.getContentType();
      if (contentType != null && contentType.equals(""String_Node_Str"")) {
        Long jobId=item.getContentId();
        if (jobId != null) {
          s_logger.warn(""String_Node_Str"" + jobId);
          completeAsyncJob(jobId,AsyncJobResult.STATUS_FAILED,0,getResetResultMessage(""String_Node_Str""));
        }
      }
      _queueMgr.purgeItem(item.getId());
    }
  }
}"
89772,"@DB private Runnable getGCTask(){
  return new Runnable(){
    @Override public void run(){
      GlobalLock scanLock=GlobalLock.getInternLock(""String_Node_Str"");
      try {
        if (scanLock.lock(ACQUIRE_GLOBAL_LOCK_TIMEOUT_FOR_COOPERATION)) {
          try {
            reallyRun();
          }
  finally {
            scanLock.unlock();
          }
        }
      }
  finally {
        scanLock.releaseRef();
      }
    }
    private void reallyRun(){
      try {
        s_logger.trace(""String_Node_Str"");
        Date cutTime=new Date(DateUtil.currentGMTTime().getTime() - _jobExpireSeconds * 1000);
        List<AsyncJobVO> l=_jobDao.getExpiredJobs(cutTime,100);
        if (l != null && l.size() > 0) {
          for (          AsyncJobVO job : l) {
            _jobDao.expunge(job.getId());
          }
        }
        List<SyncQueueItemVO> blockItems=_queueMgr.getBlockedQueueItems(_jobCancelThresholdSeconds * 1000,false);
        if (blockItems != null && blockItems.size() > 0) {
          for (          SyncQueueItemVO item : blockItems) {
            if (item.getContentType().equalsIgnoreCase(""String_Node_Str""))             completeAsyncJob(item.getContentId(),2,0,""String_Node_Str"");
            _queueMgr.purgeItem(item.getId());
          }
        }
        s_logger.trace(""String_Node_Str"");
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"",e);
      }
 finally {
        StackMaid.current().exitCleanup();
      }
    }
  }
;
}","@DB private Runnable getGCTask(){
  return new Runnable(){
    @Override public void run(){
      GlobalLock scanLock=GlobalLock.getInternLock(""String_Node_Str"");
      try {
        if (scanLock.lock(ACQUIRE_GLOBAL_LOCK_TIMEOUT_FOR_COOPERATION)) {
          try {
            reallyRun();
          }
  finally {
            scanLock.unlock();
          }
        }
      }
  finally {
        scanLock.releaseRef();
      }
    }
    private void reallyRun(){
      try {
        s_logger.trace(""String_Node_Str"");
        Date cutTime=new Date(DateUtil.currentGMTTime().getTime() - _jobExpireSeconds * 1000);
        List<AsyncJobVO> l=_jobDao.getExpiredJobs(cutTime,100);
        if (l != null && l.size() > 0) {
          for (          AsyncJobVO job : l) {
            _jobDao.expunge(job.getId());
          }
        }
        List<SyncQueueItemVO> blockItems=_queueMgr.getBlockedQueueItems(_jobCancelThresholdSeconds * 1000,false);
        if (blockItems != null && blockItems.size() > 0) {
          for (          SyncQueueItemVO item : blockItems) {
            if (item.getContentType().equalsIgnoreCase(""String_Node_Str""))             completeAsyncJob(item.getContentId(),2,0,getResetResultMessage(""String_Node_Str""));
            _queueMgr.purgeItem(item.getId());
          }
        }
        s_logger.trace(""String_Node_Str"");
      }
 catch (      Throwable e) {
        s_logger.error(""String_Node_Str"",e);
      }
 finally {
        StackMaid.current().exitCleanup();
      }
    }
  }
;
}"
89773,"@Override public boolean start(){
  try {
    List<SyncQueueItemVO> l=_queueMgr.getActiveQueueItems(getMsid(),false);
    cleanupPendingJobs(l);
    _queueMgr.resetQueueProcess(getMsid());
    _jobDao.resetJobProcess(getMsid(),BaseCmd.INTERNAL_ERROR,getResetResultMessage());
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
  _heartbeatScheduler.scheduleAtFixedRate(getHeartbeatTask(),HEARTBEAT_INTERVAL,HEARTBEAT_INTERVAL,TimeUnit.MILLISECONDS);
  _heartbeatScheduler.scheduleAtFixedRate(getGCTask(),GC_INTERVAL,GC_INTERVAL,TimeUnit.MILLISECONDS);
  return true;
}","@Override public boolean start(){
  try {
    List<SyncQueueItemVO> l=_queueMgr.getActiveQueueItems(getMsid(),false);
    cleanupPendingJobs(l);
    _queueMgr.resetQueueProcess(getMsid());
    _jobDao.resetJobProcess(getMsid(),BaseCmd.INTERNAL_ERROR,getResetResultMessage(""String_Node_Str""));
  }
 catch (  Throwable e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
  _heartbeatScheduler.scheduleAtFixedRate(getHeartbeatTask(),HEARTBEAT_INTERVAL,HEARTBEAT_INTERVAL,TimeUnit.MILLISECONDS);
  _heartbeatScheduler.scheduleAtFixedRate(getGCTask(),GC_INTERVAL,GC_INTERVAL,TimeUnit.MILLISECONDS);
  return true;
}"
89774,"private boolean default_network_rules_for_systemvm(Connect conn,String vmName){
  if (!_can_bridge_firewall) {
    return false;
  }
  List<InterfaceDef> intfs=getInterfaces(conn,vmName);
  if (intfs.size() < 1) {
    return false;
  }
  InterfaceDef intf=intfs.get(intfs.size() - 1);
  String brname=intf.getBrName();
  Script cmd=new Script(_securityGroupPath,_timeout,s_logger);
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"",vmName);
  cmd.add(""String_Node_Str"",brname);
  String result=cmd.execute();
  if (result != null) {
    return false;
  }
  return true;
}","private boolean default_network_rules_for_systemvm(Connect conn,String vmName){
  if (!_can_bridge_firewall) {
    return false;
  }
  List<InterfaceDef> intfs=getInterfaces(conn,vmName);
  if (intfs.size() < 1) {
    return false;
  }
  String brname=null;
  if (vmName.startsWith(""String_Node_Str"")) {
    InterfaceDef intf=intfs.get(0);
    brname=intf.getBrName();
  }
 else {
    InterfaceDef intf=intfs.get(intfs.size() - 1);
    brname=intf.getBrName();
  }
  Script cmd=new Script(_securityGroupPath,_timeout,s_logger);
  cmd.add(""String_Node_Str"");
  cmd.add(""String_Node_Str"",vmName);
  cmd.add(""String_Node_Str"",brname);
  String result=cmd.execute();
  if (result != null) {
    return false;
  }
  return true;
}"
89775,"@Override public Network design(NetworkOffering offering,DeploymentPlan plan,Network userSpecified,Account owner){
  DataCenter dc=_dcDao.findById(plan.getDataCenterId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  State state=State.Allocated;
  if (offering.isSystemOnly()) {
    state=State.Setup;
  }
  NetworkVO config=new NetworkVO(offering.getTrafficType(),offering.getGuestType(),Mode.Dhcp,BroadcastDomainType.Vlan,offering.getId(),plan.getDataCenterId(),state);
  if (userSpecified != null) {
    if ((userSpecified.getCidr() == null && userSpecified.getGateway() != null) || (userSpecified.getCidr() != null && userSpecified.getGateway() == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    config.setSecurityGroupEnabled(userSpecified.isSecurityGroupEnabled());
    if (userSpecified.getCidr() != null) {
      config.setCidr(userSpecified.getCidr());
      config.setGateway(userSpecified.getGateway());
    }
    if (userSpecified.getBroadcastUri() != null) {
      config.setBroadcastUri(userSpecified.getBroadcastUri());
      config.setState(State.Setup);
    }
    if (userSpecified.getBroadcastDomainType() != null) {
      config.setBroadcastDomainType(userSpecified.getBroadcastDomainType());
    }
  }
  return config;
}","@Override public Network design(NetworkOffering offering,DeploymentPlan plan,Network userSpecified,Account owner){
  DataCenter dc=_dcDao.findById(plan.getDataCenterId());
  if (!canHandle(offering,dc)) {
    return null;
  }
  State state=State.Allocated;
  if (offering.isSystemOnly()) {
    state=State.Setup;
  }
  NetworkVO config=new NetworkVO(offering.getTrafficType(),offering.getGuestType(),Mode.Dhcp,BroadcastDomainType.Vlan,offering.getId(),plan.getDataCenterId(),state);
  if (userSpecified != null) {
    if ((userSpecified.getCidr() == null && userSpecified.getGateway() != null) || (userSpecified.getCidr() != null && userSpecified.getGateway() == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    config.setSecurityGroupEnabled(userSpecified.isSecurityGroupEnabled());
    if (userSpecified.getCidr() != null) {
      config.setCidr(userSpecified.getCidr());
      config.setGateway(userSpecified.getGateway());
    }
    if (userSpecified.getBroadcastUri() != null) {
      config.setBroadcastUri(userSpecified.getBroadcastUri());
      config.setState(State.Setup);
    }
    if (userSpecified.getBroadcastDomainType() != null) {
      config.setBroadcastDomainType(userSpecified.getBroadcastDomainType());
    }
  }
  if (config.isSecurityGroupEnabled()) {
    config.setName(""String_Node_Str"");
    config.setDisplayText(""String_Node_Str"");
  }
  return config;
}"
89776,"protected void handleVmMigrated(VMInstanceVO vm){
  if (vm.getType() == VirtualMachine.Type.User)   return;
  NetworkRulesSystemVmCommand nrc=new NetworkRulesSystemVmCommand(vm.getInstanceName(),vm.getType());
  Commands cmds=new Commands(nrc);
  try {
    _agentMgr.send(vm.getHostId(),cmds);
  }
 catch (  AgentUnavailableException e) {
    s_logger.debug(e.toString());
  }
catch (  OperationTimedoutException e) {
    s_logger.debug(e.toString());
  }
}","protected void handleVmMigrated(VMInstanceVO vm){
  if (vm.getType() == VirtualMachine.Type.User || !isVmSecurityGroupEnabled(vm.getId()))   return;
  NetworkRulesSystemVmCommand nrc=new NetworkRulesSystemVmCommand(vm.getInstanceName(),vm.getType());
  Commands cmds=new Commands(nrc);
  try {
    _agentMgr.send(vm.getHostId(),cmds);
  }
 catch (  AgentUnavailableException e) {
    s_logger.debug(e.toString());
  }
catch (  OperationTimedoutException e) {
    s_logger.debug(e.toString());
  }
}"
89777,"@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<ConsoleProxyVO> profile){
  NicProfile controlNic=(NicProfile)profile.getParameter(VirtualMachineProfile.Param.ControlNic);
  CheckSshCommand check=new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20);
  cmds.addCommand(""String_Node_Str"",check);
  return true;
}","@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<ConsoleProxyVO> profile){
  NicProfile managementNic=null;
  NicProfile controlNic=null;
  for (  NicProfile nic : profile.getNics()) {
    if (nic.getTrafficType() == TrafficType.Management) {
      managementNic=nic;
    }
 else     if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {
      controlNic=nic;
    }
  }
  if (controlNic == null) {
    assert(managementNic != null);
    controlNic=managementNic;
  }
  CheckSshCommand check=new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20);
  cmds.addCommand(""String_Node_Str"",check);
  return true;
}"
89778,"@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<ConsoleProxyVO> profile,DeployDestination dest,ReservationContext context){
  StringBuilder buf=profile.getBootArgsBuilder();
  buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(_mgmt_host);
  buf.append(""String_Node_Str"").append(_mgmt_port);
  buf.append(""String_Node_Str"").append(profile.getVirtualMachine().getName());
  if (_sslEnabled) {
    buf.append(""String_Node_Str"");
  }
  buf.append(""String_Node_Str"").append(dest.getDataCenter().getId());
  buf.append(""String_Node_Str"").append(dest.getPod().getId());
  buf.append(""String_Node_Str"").append(profile.getId());
  buf.append(""String_Node_Str"").append(profile.getId());
  if (_disable_rp_filter) {
    buf.append(""String_Node_Str"");
  }
  boolean externalDhcp=false;
  String externalDhcpStr=_configDao.getValue(""String_Node_Str"");
  if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(""String_Node_Str"")) {
    externalDhcp=true;
  }
  NicProfile controlNic=null;
  NicProfile managementNic=null;
  for (  NicProfile nic : profile.getNics()) {
    int deviceId=nic.getDeviceId();
    if (nic.getIp4Address() == null) {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getIp4Address());
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    }
    if (nic.isDefaultNic()) {
      buf.append(""String_Node_Str"").append(nic.getGateway());
      buf.append(""String_Node_Str"").append(nic.getDns1());
      if (nic.getDns2() != null) {
        buf.append(""String_Node_Str"").append(nic.getDns2());
      }
    }
    if (nic.getTrafficType() == TrafficType.Management) {
      buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
      managementNic=nic;
    }
 else     if (nic.getTrafficType() == TrafficType.Control) {
      if (nic.getIp4Address() != null) {
        controlNic=nic;
      }
    }
  }
  if (externalDhcp) {
    buf.append(""String_Node_Str"");
  }
  if (controlNic == null) {
    assert(managementNic != null);
    controlNic=managementNic;
  }
  String bootArgs=buf.toString();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + profile + ""String_Node_Str""+ bootArgs);
  }
  profile.setParameter(VirtualMachineProfile.Param.ControlNic,controlNic);
  return true;
}","@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<ConsoleProxyVO> profile,DeployDestination dest,ReservationContext context){
  StringBuilder buf=profile.getBootArgsBuilder();
  buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(_mgmt_host);
  buf.append(""String_Node_Str"").append(_mgmt_port);
  buf.append(""String_Node_Str"").append(profile.getVirtualMachine().getName());
  if (_sslEnabled) {
    buf.append(""String_Node_Str"");
  }
  buf.append(""String_Node_Str"").append(dest.getDataCenter().getId());
  buf.append(""String_Node_Str"").append(dest.getPod().getId());
  buf.append(""String_Node_Str"").append(profile.getId());
  buf.append(""String_Node_Str"").append(profile.getId());
  if (_disable_rp_filter) {
    buf.append(""String_Node_Str"");
  }
  boolean externalDhcp=false;
  String externalDhcpStr=_configDao.getValue(""String_Node_Str"");
  if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(""String_Node_Str"")) {
    externalDhcp=true;
  }
  for (  NicProfile nic : profile.getNics()) {
    int deviceId=nic.getDeviceId();
    if (nic.getIp4Address() == null) {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getIp4Address());
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    }
    if (nic.isDefaultNic()) {
      buf.append(""String_Node_Str"").append(nic.getGateway());
      buf.append(""String_Node_Str"").append(nic.getDns1());
      if (nic.getDns2() != null) {
        buf.append(""String_Node_Str"").append(nic.getDns2());
      }
    }
    if (nic.getTrafficType() == TrafficType.Management) {
      buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
    }
  }
  if (externalDhcp) {
    buf.append(""String_Node_Str"");
  }
  String bootArgs=buf.toString();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + profile + ""String_Node_Str""+ bootArgs);
  }
  return true;
}"
89779,"@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile){
  DomainRouterVO router=profile.getVirtualMachine();
  NicProfile controlNic=(NicProfile)profile.getParameter(VirtualMachineProfile.Param.ControlNic);
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  boolean restartNetwork=true;
  if (profile.getParameter(Param.RestartNetwork) != null && (Boolean)profile.getParameter(Param.RestartNetwork) == false) {
    restartNetwork=false;
  }
  if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA && restartNetwork) {
    s_logger.debug(""String_Node_Str"");
    long networkId=router.getNetworkId();
    long ownerId=router.getAccountId();
    long zoneId=router.getDataCenterId();
    final List<IPAddressVO> userIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,null);
    List<PublicIpAddress> publicIps=new ArrayList<PublicIpAddress>();
    if (userIps != null && !userIps.isEmpty()) {
      for (      IPAddressVO userIp : userIps) {
        PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),userIp.getMacAddress());
        publicIps.add(publicIp);
      }
    }
    s_logger.debug(""String_Node_Str"" + publicIps.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
    if (!publicIps.isEmpty()) {
      createAssociateIPCommands(router,publicIps,cmds,0);
      List<RemoteAccessVpn> vpns=new ArrayList<RemoteAccessVpn>();
      List<PortForwardingRule> pfRules=new ArrayList<PortForwardingRule>();
      List<FirewallRule> staticNatFirewallRules=new ArrayList<FirewallRule>();
      for (      PublicIpAddress ip : publicIps) {
        pfRules.addAll(_pfRulesDao.listForApplication(ip.getId()));
        staticNatFirewallRules.addAll(_rulesDao.listByIpAndPurpose(ip.getId(),Purpose.StaticNat));
        RemoteAccessVpn vpn=_vpnDao.findById(ip.getId());
        if (vpn != null) {
          vpns.add(vpn);
        }
      }
      s_logger.debug(""String_Node_Str"" + pfRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!pfRules.isEmpty()) {
        createApplyPortForwardingRulesCommands(pfRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + staticNatFirewallRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!staticNatFirewallRules.isEmpty()) {
        List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
        for (        FirewallRule rule : staticNatFirewallRules) {
          staticNatRules.add(_rulesMgr.buildStaticNatRule(rule));
        }
        createApplyStaticNatRulesCommands(staticNatRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + vpns.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!vpns.isEmpty()) {
        for (        RemoteAccessVpn vpn : vpns) {
          createApplyVpnCommands(vpn,router,cmds);
        }
      }
      List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(networkId);
      List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
      for (      LoadBalancerVO lb : lbs) {
        List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
        lbRules.add(loadBalancing);
      }
      s_logger.debug(""String_Node_Str"" + lbRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!lbRules.isEmpty()) {
        createApplyLoadBalancingRulesCommands(lbRules,router,cmds);
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createDhcpEntriesCommands(router,cmds);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createUserDataCommands(router,cmds);
  cmds.addCommand(""String_Node_Str"",new NetworkUsageCommand(controlNic.getIp4Address(),router.getName(),""String_Node_Str""));
  return true;
}","@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile){
  DomainRouterVO router=profile.getVirtualMachine();
  NicProfile controlNic=null;
  for (  NicProfile nic : profile.getNics()) {
    if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {
      controlNic=nic;
    }
  }
  if (controlNic == null) {
    s_logger.error(""String_Node_Str"" + router);
    return false;
  }
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  boolean restartNetwork=true;
  if (profile.getParameter(Param.RestartNetwork) != null && (Boolean)profile.getParameter(Param.RestartNetwork) == false) {
    restartNetwork=false;
  }
  if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA && restartNetwork) {
    s_logger.debug(""String_Node_Str"");
    long networkId=router.getNetworkId();
    long ownerId=router.getAccountId();
    long zoneId=router.getDataCenterId();
    final List<IPAddressVO> userIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,null);
    List<PublicIpAddress> publicIps=new ArrayList<PublicIpAddress>();
    if (userIps != null && !userIps.isEmpty()) {
      for (      IPAddressVO userIp : userIps) {
        PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),userIp.getMacAddress());
        publicIps.add(publicIp);
      }
    }
    s_logger.debug(""String_Node_Str"" + publicIps.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
    if (!publicIps.isEmpty()) {
      createAssociateIPCommands(router,publicIps,cmds,0);
      List<RemoteAccessVpn> vpns=new ArrayList<RemoteAccessVpn>();
      List<PortForwardingRule> pfRules=new ArrayList<PortForwardingRule>();
      List<FirewallRule> staticNatFirewallRules=new ArrayList<FirewallRule>();
      for (      PublicIpAddress ip : publicIps) {
        pfRules.addAll(_pfRulesDao.listForApplication(ip.getId()));
        staticNatFirewallRules.addAll(_rulesDao.listByIpAndPurpose(ip.getId(),Purpose.StaticNat));
        RemoteAccessVpn vpn=_vpnDao.findById(ip.getId());
        if (vpn != null) {
          vpns.add(vpn);
        }
      }
      s_logger.debug(""String_Node_Str"" + pfRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!pfRules.isEmpty()) {
        createApplyPortForwardingRulesCommands(pfRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + staticNatFirewallRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!staticNatFirewallRules.isEmpty()) {
        List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
        for (        FirewallRule rule : staticNatFirewallRules) {
          staticNatRules.add(_rulesMgr.buildStaticNatRule(rule));
        }
        createApplyStaticNatRulesCommands(staticNatRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + vpns.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!vpns.isEmpty()) {
        for (        RemoteAccessVpn vpn : vpns) {
          createApplyVpnCommands(vpn,router,cmds);
        }
      }
      List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(networkId);
      List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
      for (      LoadBalancerVO lb : lbs) {
        List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
        lbRules.add(loadBalancing);
      }
      s_logger.debug(""String_Node_Str"" + lbRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!lbRules.isEmpty()) {
        createApplyLoadBalancingRulesCommands(lbRules,router,cmds);
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createDhcpEntriesCommands(router,cmds);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createUserDataCommands(router,cmds);
  cmds.addCommand(""String_Node_Str"",new NetworkUsageCommand(controlNic.getIp4Address(),router.getName(),""String_Node_Str""));
  return true;
}"
89780,"@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<DomainRouterVO> profile,DeployDestination dest,ReservationContext context){
  DomainRouterVO router=profile.getVirtualMachine();
  NetworkVO network=_networkDao.findById(router.getNetworkId());
  String type=null;
  String dhcpRange=null;
  DataCenter dc=dest.getDataCenter();
  if (dc.getNetworkType() == NetworkType.Advanced) {
    String cidr=network.getCidr();
    if (cidr != null) {
      dhcpRange=NetUtils.getDhcpRange(cidr);
    }
  }
  if (router.getRole() == Role.DHCP_USERDATA) {
    type=""String_Node_Str"";
  }
 else {
    type=""String_Node_Str"";
  }
  StringBuilder buf=profile.getBootArgsBuilder();
  buf.append(""String_Node_Str"" + type);
  buf.append(""String_Node_Str"").append(profile.getHostName());
  NicProfile controlNic=null;
  for (  NicProfile nic : profile.getNics()) {
    int deviceId=nic.getDeviceId();
    buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getIp4Address());
    buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    if (nic.isDefaultNic()) {
      buf.append(""String_Node_Str"").append(nic.getGateway());
      buf.append(""String_Node_Str"").append(nic.getDns1());
      if (nic.getDns2() != null) {
        buf.append(""String_Node_Str"").append(nic.getDns2());
      }
      if (dc.getNetworkType() == NetworkType.Basic) {
        long cidrSize=NetUtils.getCidrSize(nic.getNetmask());
        String cidr=NetUtils.getCidrSubNet(nic.getGateway(),cidrSize);
        if (cidr != null) {
          dhcpRange=NetUtils.getIpRangeStartIpFromCidr(cidr,cidrSize);
        }
      }
    }
    if (nic.getTrafficType() == TrafficType.Management) {
      buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
    }
 else     if (nic.getTrafficType() == TrafficType.Control) {
      if (dest.getHost().getHypervisorType() == HypervisorType.VMware) {
        if (s_logger.isInfoEnabled()) {
          s_logger.info(""String_Node_Str"" + dest.getPod().getCidrAddress() + ""String_Node_Str""+ dest.getPod().getCidrSize()+ ""String_Node_Str""+ dest.getPod().getGateway()+ ""String_Node_Str""+ _mgmt_host);
        }
        if (!NetUtils.sameSubnetCIDR(_mgmt_host,dest.getPod().getGateway(),dest.getPod().getCidrSize())) {
          if (s_logger.isInfoEnabled()) {
            s_logger.info(""String_Node_Str"");
          }
          buf.append(""String_Node_Str"").append(_mgmt_host);
          buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
        }
 else {
          if (s_logger.isInfoEnabled()) {
            s_logger.info(""String_Node_Str"");
          }
        }
      }
      controlNic=nic;
    }
  }
  if (dhcpRange != null) {
    buf.append(""String_Node_Str"" + dhcpRange);
  }
  String domain=network.getNetworkDomain();
  if (domain != null) {
    buf.append(""String_Node_Str"" + domain);
  }
  if (!network.isDefault() && network.getGuestType() == GuestIpType.Direct) {
    buf.append(""String_Node_Str"");
  }
 else {
    buf.append(""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + profile + ""String_Node_Str""+ buf.toString());
  }
  if (controlNic == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  profile.setParameter(VirtualMachineProfile.Param.ControlNic,controlNic);
  return true;
}","@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<DomainRouterVO> profile,DeployDestination dest,ReservationContext context){
  DomainRouterVO router=profile.getVirtualMachine();
  NetworkVO network=_networkDao.findById(router.getNetworkId());
  String type=null;
  String dhcpRange=null;
  DataCenter dc=dest.getDataCenter();
  if (dc.getNetworkType() == NetworkType.Advanced) {
    String cidr=network.getCidr();
    if (cidr != null) {
      dhcpRange=NetUtils.getDhcpRange(cidr);
    }
  }
  if (router.getRole() == Role.DHCP_USERDATA) {
    type=""String_Node_Str"";
  }
 else {
    type=""String_Node_Str"";
  }
  StringBuilder buf=profile.getBootArgsBuilder();
  buf.append(""String_Node_Str"" + type);
  buf.append(""String_Node_Str"").append(profile.getHostName());
  NicProfile controlNic=null;
  for (  NicProfile nic : profile.getNics()) {
    int deviceId=nic.getDeviceId();
    buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getIp4Address());
    buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    if (nic.isDefaultNic()) {
      buf.append(""String_Node_Str"").append(nic.getGateway());
      buf.append(""String_Node_Str"").append(nic.getDns1());
      if (nic.getDns2() != null) {
        buf.append(""String_Node_Str"").append(nic.getDns2());
      }
      if (dc.getNetworkType() == NetworkType.Basic) {
        long cidrSize=NetUtils.getCidrSize(nic.getNetmask());
        String cidr=NetUtils.getCidrSubNet(nic.getGateway(),cidrSize);
        if (cidr != null) {
          dhcpRange=NetUtils.getIpRangeStartIpFromCidr(cidr,cidrSize);
        }
      }
    }
    if (nic.getTrafficType() == TrafficType.Management) {
      buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
    }
 else     if (nic.getTrafficType() == TrafficType.Control) {
      if (dest.getHost().getHypervisorType() == HypervisorType.VMware) {
        if (s_logger.isInfoEnabled()) {
          s_logger.info(""String_Node_Str"" + dest.getPod().getCidrAddress() + ""String_Node_Str""+ dest.getPod().getCidrSize()+ ""String_Node_Str""+ dest.getPod().getGateway()+ ""String_Node_Str""+ _mgmt_host);
        }
        if (!NetUtils.sameSubnetCIDR(_mgmt_host,dest.getPod().getGateway(),dest.getPod().getCidrSize())) {
          if (s_logger.isInfoEnabled()) {
            s_logger.info(""String_Node_Str"");
          }
          buf.append(""String_Node_Str"").append(_mgmt_host);
          buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
        }
 else {
          if (s_logger.isInfoEnabled()) {
            s_logger.info(""String_Node_Str"");
          }
        }
      }
      controlNic=nic;
    }
  }
  if (dhcpRange != null) {
    buf.append(""String_Node_Str"" + dhcpRange);
  }
  String domain=network.getNetworkDomain();
  if (domain != null) {
    buf.append(""String_Node_Str"" + domain);
  }
  if (!network.isDefault() && network.getGuestType() == GuestIpType.Direct) {
    buf.append(""String_Node_Str"");
  }
 else {
    buf.append(""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + profile + ""String_Node_Str""+ buf.toString());
  }
  if (controlNic == null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  return true;
}"
89781,"@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<SecondaryStorageVmVO> profile){
  NicProfile controlNic=(NicProfile)profile.getParameter(VirtualMachineProfile.Param.ControlNic);
  CheckSshCommand check=new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20);
  cmds.addCommand(""String_Node_Str"",check);
  return true;
}","@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<SecondaryStorageVmVO> profile){
  NicProfile managementNic=null;
  NicProfile controlNic=null;
  for (  NicProfile nic : profile.getNics()) {
    if (nic.getTrafficType() == TrafficType.Management) {
      managementNic=nic;
    }
 else     if (nic.getTrafficType() == TrafficType.Control && nic.getIp4Address() != null) {
      controlNic=nic;
    }
  }
  if (controlNic == null) {
    assert(managementNic != null);
    controlNic=managementNic;
  }
  CheckSshCommand check=new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20);
  cmds.addCommand(""String_Node_Str"",check);
  return true;
}"
89782,"@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<SecondaryStorageVmVO> profile,DeployDestination dest,ReservationContext context){
  HostVO secHost=_hostDao.findSecondaryStorageHost(dest.getDataCenter().getId());
  assert(secHost != null);
  StringBuilder buf=profile.getBootArgsBuilder();
  buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(_mgmt_host);
  buf.append(""String_Node_Str"").append(_mgmt_port);
  buf.append(""String_Node_Str"").append(profile.getVirtualMachine().getName());
  buf.append(""String_Node_Str"").append(dest.getDataCenter().getId());
  buf.append(""String_Node_Str"").append(dest.getPod().getId());
  buf.append(""String_Node_Str"").append(secHost.getGuid());
  String nfsMountPoint=null;
  try {
    nfsMountPoint=NfsUtils.url2Mount(secHost.getStorageUrl());
  }
 catch (  Exception e) {
  }
  buf.append(""String_Node_Str"").append(nfsMountPoint);
  if (_configDao.isPremium())   buf.append(""String_Node_Str"");
 else   buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(Boolean.toString(_useSSlCopy));
  NicProfile controlNic=null;
  NicProfile managementNic=null;
  boolean externalDhcp=false;
  String externalDhcpStr=_configDao.getValue(""String_Node_Str"");
  if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(""String_Node_Str"")) {
    externalDhcp=true;
  }
  for (  NicProfile nic : profile.getNics()) {
    int deviceId=nic.getDeviceId();
    if (nic.getIp4Address() == null) {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getIp4Address());
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    }
    buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    if (nic.isDefaultNic()) {
      buf.append(""String_Node_Str"").append(nic.getGateway());
    }
    if (nic.getTrafficType() == TrafficType.Management) {
      buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
      managementNic=nic;
      buf.append(""String_Node_Str"").append(""String_Node_Str"").append(deviceId);
    }
 else     if (nic.getTrafficType() == TrafficType.Control) {
      if (nic.getIp4Address() != null) {
        controlNic=nic;
      }
    }
 else     if (nic.getTrafficType() == TrafficType.Public) {
      buf.append(""String_Node_Str"").append(""String_Node_Str"").append(deviceId);
    }
  }
  if (externalDhcp) {
    buf.append(""String_Node_Str"");
  }
  if (controlNic == null) {
    assert(managementNic != null);
    controlNic=managementNic;
  }
  DataCenterVO dc=_dcDao.findById(profile.getVirtualMachine().getDataCenterId());
  buf.append(""String_Node_Str"").append(dc.getInternalDns1());
  if (dc.getInternalDns2() != null) {
    buf.append(""String_Node_Str"").append(dc.getInternalDns2());
  }
  String bootArgs=buf.toString();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + profile + ""String_Node_Str""+ bootArgs);
  }
  profile.setParameter(VirtualMachineProfile.Param.ControlNic,controlNic);
  return true;
}","@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<SecondaryStorageVmVO> profile,DeployDestination dest,ReservationContext context){
  HostVO secHost=_hostDao.findSecondaryStorageHost(dest.getDataCenter().getId());
  assert(secHost != null);
  StringBuilder buf=profile.getBootArgsBuilder();
  buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(_mgmt_host);
  buf.append(""String_Node_Str"").append(_mgmt_port);
  buf.append(""String_Node_Str"").append(profile.getVirtualMachine().getName());
  buf.append(""String_Node_Str"").append(dest.getDataCenter().getId());
  buf.append(""String_Node_Str"").append(dest.getPod().getId());
  buf.append(""String_Node_Str"").append(secHost.getGuid());
  String nfsMountPoint=null;
  try {
    nfsMountPoint=NfsUtils.url2Mount(secHost.getStorageUrl());
  }
 catch (  Exception e) {
  }
  buf.append(""String_Node_Str"").append(nfsMountPoint);
  if (_configDao.isPremium())   buf.append(""String_Node_Str"");
 else   buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(Boolean.toString(_useSSlCopy));
  boolean externalDhcp=false;
  String externalDhcpStr=_configDao.getValue(""String_Node_Str"");
  if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(""String_Node_Str"")) {
    externalDhcp=true;
  }
  for (  NicProfile nic : profile.getNics()) {
    int deviceId=nic.getDeviceId();
    if (nic.getIp4Address() == null) {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getIp4Address());
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    }
    buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    if (nic.isDefaultNic()) {
      buf.append(""String_Node_Str"").append(nic.getGateway());
    }
    if (nic.getTrafficType() == TrafficType.Management) {
      buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
      buf.append(""String_Node_Str"").append(""String_Node_Str"").append(deviceId);
    }
 else     if (nic.getTrafficType() == TrafficType.Public) {
      buf.append(""String_Node_Str"").append(""String_Node_Str"").append(deviceId);
    }
  }
  if (externalDhcp) {
    buf.append(""String_Node_Str"");
  }
  DataCenterVO dc=_dcDao.findById(profile.getVirtualMachine().getDataCenterId());
  buf.append(""String_Node_Str"").append(dc.getInternalDns1());
  if (dc.getInternalDns2() != null) {
    buf.append(""String_Node_Str"").append(dc.getInternalDns2());
  }
  String bootArgs=buf.toString();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + profile + ""String_Node_Str""+ bootArgs);
  }
  return true;
}"
89783,"@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd) throws InvalidParameterValueException, PermissionDeniedException {
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Long accountId=null;
  boolean isAdmin=false;
  Boolean isRecursive=cmd.isRecursive();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
      isRecursive=true;
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zone=null;
  Object pod=null;
  if (isAdmin) {
    zone=cmd.getZoneId();
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  if (((accountId == null) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((accountId == null) && (domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  List<VolumeVO> allVolumes=_volumeDao.search(sc,searchFilter);
  List<VolumeVO> returnableVolumes=new ArrayList<VolumeVO>();
  for (  VolumeVO v : allVolumes) {
    VMTemplateVO template=_templateDao.findById(v.getTemplateId());
    if (template != null && (template.getTemplateType() == TemplateType.SYSTEM)) {
    }
 else {
      if (v.getInstanceId() == null) {
        returnableVolumes.add(v);
      }
 else {
        if (account.getType() == Account.ACCOUNT_TYPE_NORMAL) {
          VMInstanceVO owningVm=_vmInstanceDao.findById(v.getInstanceId());
          if (owningVm != null && owningVm.getType().equals(VirtualMachine.Type.User) && owningVm.getState().equals(VirtualMachine.State.Destroyed)) {
          }
 else {
            returnableVolumes.add(v);
          }
        }
 else {
          returnableVolumes.add(v);
        }
      }
    }
  }
  return returnableVolumes;
}","@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd) throws InvalidParameterValueException, PermissionDeniedException {
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Long accountId=null;
  boolean isAdmin=false;
  Boolean isRecursive=cmd.isRecursive();
  if (isRecursive == null) {
    isRecursive=false;
  }
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
      isRecursive=true;
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zone=null;
  Object pod=null;
  if (isAdmin) {
    zone=cmd.getZoneId();
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.NEQ);
  if (((accountId == null) && (domainId != null) && isRecursive)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
 else   if ((accountId == null) && (domainId != null) && !isRecursive) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.EQ);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    if (isRecursive) {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
    }
 else {
      sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath());
    }
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setParameters(""String_Node_Str"",Volume.State.Destroy);
  return _volumeDao.search(sc,searchFilter);
}"
89784,"List<FirewallRuleVO> listByIpAndPurpose(long ipAddressId,FirewallRule.Purpose purpose);","List<? extends FirewallRule> listByIpAndPurpose(long ipAddressId,FirewallRule.Purpose purpose);"
89785,"@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile){
  DomainRouterVO router=profile.getVirtualMachine();
  NicProfile controlNic=(NicProfile)profile.getParameter(VirtualMachineProfile.Param.ControlNic);
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  boolean restartNetwork=true;
  if (profile.getParameter(Param.RestartNetwork) != null && (Boolean)profile.getParameter(Param.RestartNetwork) == false) {
    restartNetwork=false;
  }
  if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA && restartNetwork) {
    s_logger.debug(""String_Node_Str"");
    long networkId=router.getNetworkId();
    long ownerId=router.getAccountId();
    long zoneId=router.getDataCenterId();
    final List<IPAddressVO> userIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,null);
    List<PublicIpAddress> publicIps=new ArrayList<PublicIpAddress>();
    if (userIps != null && !userIps.isEmpty()) {
      for (      IPAddressVO userIp : userIps) {
        PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),userIp.getMacAddress());
        publicIps.add(publicIp);
      }
    }
    s_logger.debug(""String_Node_Str"" + publicIps.size() + ""String_Node_Str""+ router.getId()+ ""String_Node_Str"");
    if (!publicIps.isEmpty()) {
      createAssociateIPCommands(router,publicIps,cmds,0);
      List<RemoteAccessVpn> vpns=new ArrayList<RemoteAccessVpn>();
      List<? extends PortForwardingRule> pfRules=null;
      List<? extends FirewallRule> staticNatFirewallRules=null;
      for (      PublicIpAddress ip : publicIps) {
        pfRules=_pfRulesDao.listForApplication(ip.getId());
        staticNatFirewallRules=_rulesDao.listByIpAndPurpose(ip.getId(),Purpose.StaticNat);
        RemoteAccessVpn vpn=_vpnDao.findById(ip.getId());
        if (vpn != null) {
          vpns.add(vpn);
        }
      }
      s_logger.debug(""String_Node_Str"" + pfRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!pfRules.isEmpty()) {
        createApplyPortForwardingRulesCommands(pfRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + staticNatFirewallRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!staticNatFirewallRules.isEmpty()) {
        List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
        for (        FirewallRule rule : staticNatFirewallRules) {
          staticNatRules.add(_rulesMgr.buildStaticNatRule(rule));
        }
        createApplyStaticNatRulesCommands(staticNatRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + vpns.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!vpns.isEmpty()) {
        for (        RemoteAccessVpn vpn : vpns) {
          createApplyVpnCommands(vpn,router,cmds);
        }
      }
      List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(networkId);
      List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
      for (      LoadBalancerVO lb : lbs) {
        List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
        lbRules.add(loadBalancing);
      }
      s_logger.debug(""String_Node_Str"" + lbRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!lbRules.isEmpty()) {
        createApplyLoadBalancingRulesCommands(lbRules,router,cmds);
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createDhcpEntriesCommands(router,cmds);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createUserDataCommands(router,cmds);
  cmds.addCommand(""String_Node_Str"",new NetworkUsageCommand(controlNic.getIp4Address(),router.getName(),""String_Node_Str""));
  return true;
}","@Override public boolean finalizeCommandsOnStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile){
  DomainRouterVO router=profile.getVirtualMachine();
  NicProfile controlNic=(NicProfile)profile.getParameter(VirtualMachineProfile.Param.ControlNic);
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  boolean restartNetwork=true;
  if (profile.getParameter(Param.RestartNetwork) != null && (Boolean)profile.getParameter(Param.RestartNetwork) == false) {
    restartNetwork=false;
  }
  if (router.getRole() == VirtualRouter.Role.DHCP_FIREWALL_LB_PASSWD_USERDATA && restartNetwork) {
    s_logger.debug(""String_Node_Str"");
    long networkId=router.getNetworkId();
    long ownerId=router.getAccountId();
    long zoneId=router.getDataCenterId();
    final List<IPAddressVO> userIps=_networkMgr.listPublicIpAddressesInVirtualNetwork(ownerId,zoneId,null);
    List<PublicIpAddress> publicIps=new ArrayList<PublicIpAddress>();
    if (userIps != null && !userIps.isEmpty()) {
      for (      IPAddressVO userIp : userIps) {
        PublicIp publicIp=new PublicIp(userIp,_vlanDao.findById(userIp.getVlanId()),userIp.getMacAddress());
        publicIps.add(publicIp);
      }
    }
    s_logger.debug(""String_Node_Str"" + publicIps.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
    if (!publicIps.isEmpty()) {
      createAssociateIPCommands(router,publicIps,cmds,0);
      List<RemoteAccessVpn> vpns=new ArrayList<RemoteAccessVpn>();
      List<PortForwardingRule> pfRules=new ArrayList<PortForwardingRule>();
      List<FirewallRule> staticNatFirewallRules=new ArrayList<FirewallRule>();
      for (      PublicIpAddress ip : publicIps) {
        pfRules.addAll(_pfRulesDao.listForApplication(ip.getId()));
        staticNatFirewallRules.addAll(_rulesDao.listByIpAndPurpose(ip.getId(),Purpose.StaticNat));
        RemoteAccessVpn vpn=_vpnDao.findById(ip.getId());
        if (vpn != null) {
          vpns.add(vpn);
        }
      }
      s_logger.debug(""String_Node_Str"" + pfRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!pfRules.isEmpty()) {
        createApplyPortForwardingRulesCommands(pfRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + staticNatFirewallRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!staticNatFirewallRules.isEmpty()) {
        List<StaticNatRule> staticNatRules=new ArrayList<StaticNatRule>();
        for (        FirewallRule rule : staticNatFirewallRules) {
          staticNatRules.add(_rulesMgr.buildStaticNatRule(rule));
        }
        createApplyStaticNatRulesCommands(staticNatRules,router,cmds);
      }
      s_logger.debug(""String_Node_Str"" + vpns.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!vpns.isEmpty()) {
        for (        RemoteAccessVpn vpn : vpns) {
          createApplyVpnCommands(vpn,router,cmds);
        }
      }
      List<LoadBalancerVO> lbs=_loadBalancerDao.listByNetworkId(networkId);
      List<LoadBalancingRule> lbRules=new ArrayList<LoadBalancingRule>();
      for (      LoadBalancerVO lb : lbs) {
        List<LbDestination> dstList=_lbMgr.getExistingDestinations(lb.getId());
        LoadBalancingRule loadBalancing=new LoadBalancingRule(lb,dstList);
        lbRules.add(loadBalancing);
      }
      s_logger.debug(""String_Node_Str"" + lbRules.size() + ""String_Node_Str""+ router+ ""String_Node_Str"");
      if (!lbRules.isEmpty()) {
        createApplyLoadBalancingRulesCommands(lbRules,router,cmds);
      }
    }
  }
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createDhcpEntriesCommands(router,cmds);
  s_logger.debug(""String_Node_Str"" + router + ""String_Node_Str"");
  createUserDataCommands(router,cmds);
  cmds.addCommand(""String_Node_Str"",new NetworkUsageCommand(controlNic.getIp4Address(),router.getName(),""String_Node_Str""));
  return true;
}"
89786,"private boolean canHandle(GuestIpType ipType,DeployDestination dest,TrafficType trafficType){
  DataCenter dc=dest.getDataCenter();
  String provider=dc.getGatewayProvider();
  if (provider.equals(Provider.VirtualRouter.getName())) {
    if (dc.getNetworkType() == NetworkType.Basic) {
      return (ipType == GuestIpType.Direct && trafficType == TrafficType.Guest);
    }
 else {
      return (ipType == GuestIpType.Direct);
    }
  }
 else {
    return (ipType == GuestIpType.Virtual);
  }
}","private boolean canHandle(GuestIpType ipType,DeployDestination dest,TrafficType trafficType){
  DataCenter dc=dest.getDataCenter();
  String provider=dc.getGatewayProvider();
  if (provider.equalsIgnoreCase(Provider.JuniperSRX.getName()) && ipType == GuestIpType.Virtual) {
    return true;
  }
 else {
    if (dc.getNetworkType() == NetworkType.Basic) {
      return (ipType == GuestIpType.Direct && trafficType == TrafficType.Guest);
    }
 else {
      return (ipType == GuestIpType.Direct);
    }
  }
}"
89787,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  _hostCapacityCheckerDelay=NumbersUtil.parseInt(_configDao.getValue(Config.HostCapacityCheckerWait.key()),3600);
  _hostCapacityCheckerInterval=NumbersUtil.parseInt(_configDao.getValue(Config.HostCapacityCheckerInterval.key()),3600);
  _vmCapacityReleaseInterval=NumbersUtil.parseInt(_configDao.getValue(Config.VmHostCapacityReleaseInterval.key()),86400);
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  _hostCapacityCheckerDelay=NumbersUtil.parseInt(_configDao.getValue(Config.HostCapacityCheckerWait.key()),3600);
  _hostCapacityCheckerInterval=NumbersUtil.parseInt(_configDao.getValue(Config.HostCapacityCheckerInterval.key()),3600);
  _vmCapacityReleaseInterval=NumbersUtil.parseInt(_configDao.getValue(Config.VmHostCapacityReleaseInterval.key()),86400);
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  VirtualMachine.State.getStateMachine().registerListener(this);
  return true;
}"
89788,"@Override public boolean postStateTransitionEvent(State oldState,Event event,State newState,VirtualMachine vm,boolean status){
  if (!_isEnabled || !status || (vm.getType() != VirtualMachine.Type.User && vm.getType() != VirtualMachine.Type.DomainRouter)) {
    return false;
  }
  if (VirtualMachine.State.isVmStarted(oldState,event,newState)) {
    _mgr.handleVmStateTransition((VMInstanceVO)vm,State.Running);
  }
 else   if (VirtualMachine.State.isVmMigrated(oldState,event,newState)) {
  }
  return true;
}","@Override public boolean postStateTransitionEvent(State oldState,Event event,State newState,VirtualMachine vm,boolean status,Long oldHostId){
  if (!_isEnabled || !status || (vm.getType() != VirtualMachine.Type.User && vm.getType() != VirtualMachine.Type.DomainRouter)) {
    return false;
  }
  if (VirtualMachine.State.isVmStarted(oldState,event,newState)) {
    _mgr.handleVmStateTransition((VMInstanceVO)vm,State.Running);
  }
 else   if (VirtualMachine.State.isVmMigrated(oldState,event,newState)) {
  }
  return true;
}"
89789,"@Override public boolean postStateTransitionEvent(State oldState,Event event,State newState,VirtualMachine vm,boolean status){
  if (!status) {
    return false;
  }
  if (VirtualMachine.State.isVmStarted(oldState,event,newState)) {
    handleVmStarted((VMInstanceVO)vm);
  }
 else   if (VirtualMachine.State.isVmStopped(oldState,event,newState)) {
    handleVmStopped((VMInstanceVO)vm);
  }
 else   if (VirtualMachine.State.isVmMigrated(oldState,event,newState)) {
    handleVmMigrated((VMInstanceVO)vm);
  }
  return true;
}","@Override public boolean postStateTransitionEvent(State oldState,Event event,State newState,VirtualMachine vm,boolean status,Long oldHostId){
  if (!status) {
    return false;
  }
  if (VirtualMachine.State.isVmStarted(oldState,event,newState)) {
    handleVmStarted((VMInstanceVO)vm);
  }
 else   if (VirtualMachine.State.isVmStopped(oldState,event,newState)) {
    handleVmStopped((VMInstanceVO)vm);
  }
 else   if (VirtualMachine.State.isVmMigrated(oldState,event,newState)) {
    handleVmMigrated((VMInstanceVO)vm);
  }
  return true;
}"
89790,"@Override public boolean stateTransitTo(VMInstanceVO vm,VirtualMachine.Event e,Long hostId){
  return _stateMachine.transitTo(vm,e,hostId,_vmDao);
}","@Override public boolean stateTransitTo(VMInstanceVO vm,VirtualMachine.Event e,Long hostId){
  State oldState=vm.getState();
  if (oldState == State.Starting) {
    if (e == Event.OperationSucceeded) {
      vm.setLastHostId(hostId);
    }
  }
  return _stateMachine.transitTo(vm,e,hostId,_vmDao);
}"
89791,"@Override public boolean configure(String name,Map<String,Object> xmlParams) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  Map<String,String> params=configDao.getConfiguration(xmlParams);
  _retry=NumbersUtil.parseInt(params.get(Config.StartRetry.key()),10);
  ReservationContextImpl.setComponents(_userDao,_domainDao,_accountDao);
  VirtualMachineProfileImpl.setComponents(_offeringDao,_templateDao,_accountDao);
  Adapters<HypervisorGuru> hvGurus=locator.getAdapters(HypervisorGuru.class);
  for (  HypervisorGuru guru : hvGurus) {
    _hvGurus.put(guru.getHypervisorType(),guru);
  }
  _cancelWait=NumbersUtil.parseLong(params.get(Config.VmOpCancelInterval.key()),3600);
  _cleanupWait=NumbersUtil.parseLong(params.get(Config.VmOpCleanupWait.key()),3600);
  _cleanupInterval=NumbersUtil.parseLong(params.get(Config.VmOpCleanupInterval.key()),86400) * 1000;
  _opWaitInterval=NumbersUtil.parseLong(params.get(Config.VmOpWaitInterval.key()),120) * 1000;
  _lockStateRetry=NumbersUtil.parseInt(params.get(Config.VmOpLockStateRetry.key()),5);
  _operationTimeout=NumbersUtil.parseInt(params.get(Config.Wait.key()),1800) * 2;
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  _nodeId=_clusterMgr.getId();
  _stateMachine.registerListener(this);
  _agentMgr.registerForHostEvents(this,true,true,true);
  return true;
}","@Override public boolean configure(String name,Map<String,Object> xmlParams) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  Map<String,String> params=configDao.getConfiguration(xmlParams);
  _retry=NumbersUtil.parseInt(params.get(Config.StartRetry.key()),10);
  ReservationContextImpl.setComponents(_userDao,_domainDao,_accountDao);
  VirtualMachineProfileImpl.setComponents(_offeringDao,_templateDao,_accountDao);
  Adapters<HypervisorGuru> hvGurus=locator.getAdapters(HypervisorGuru.class);
  for (  HypervisorGuru guru : hvGurus) {
    _hvGurus.put(guru.getHypervisorType(),guru);
  }
  _cancelWait=NumbersUtil.parseLong(params.get(Config.VmOpCancelInterval.key()),3600);
  _cleanupWait=NumbersUtil.parseLong(params.get(Config.VmOpCleanupWait.key()),3600);
  _cleanupInterval=NumbersUtil.parseLong(params.get(Config.VmOpCleanupInterval.key()),86400) * 1000;
  _opWaitInterval=NumbersUtil.parseLong(params.get(Config.VmOpWaitInterval.key()),120) * 1000;
  _lockStateRetry=NumbersUtil.parseInt(params.get(Config.VmOpLockStateRetry.key()),5);
  _operationTimeout=NumbersUtil.parseInt(params.get(Config.Wait.key()),1800) * 2;
  _executor=Executors.newScheduledThreadPool(1,new NamedThreadFactory(""String_Node_Str""));
  _nodeId=_clusterMgr.getId();
  _agentMgr.registerForHostEvents(this,true,true,true);
  return true;
}"
89792,"/** 
 * Event is triggered after state machine transition finished
 * @param oldState VM's old state
 * @param event that triggered this VM state change
 * @param newState VM's new state
 * @param vo the VM instance
 * @param status the state transition is allowed or not
 * @return
 */
public boolean postStateTransitionEvent(S oldState,E event,S newState,V vo,boolean status);","/** 
 * Event is triggered after state machine transition finished
 * @param oldState VM's old state
 * @param event that triggered this VM state change
 * @param newState VM's new state
 * @param vo the VM instance
 * @param status the state transition is allowed or not
 * @return
 */
public boolean postStateTransitionEvent(S oldState,E event,S newState,V vo,boolean status,Long id);"
89793,"public boolean transitTo(V vo,E e,Long id,StateDao<S,E,V> dao){
  S currentState=vo.getState();
  S nextState=getNextState(currentState,e);
  boolean transitionStatus=true;
  if (nextState == null) {
    transitionStatus=false;
  }
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.preStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,id);
  }
  transitionStatus=dao.updateState(currentState,e,nextState,vo,id);
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.postStateTransitionEvent(currentState,e,nextState,vo,transitionStatus);
  }
  return transitionStatus;
}","public boolean transitTo(V vo,E e,Long id,StateDao<S,E,V> dao){
  S currentState=vo.getState();
  S nextState=getNextState(currentState,e);
  boolean transitionStatus=true;
  if (nextState == null) {
    transitionStatus=false;
  }
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.preStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,id);
  }
  Long oldHostId=vo.getHostId();
  transitionStatus=dao.updateState(currentState,e,nextState,vo,id);
  for (  StateListener<S,E,V> listener : _listeners) {
    listener.postStateTransitionEvent(currentState,e,nextState,vo,transitionStatus,oldHostId);
  }
  return transitionStatus;
}"
89794,"public String assignPublicIpAddress(final String vmName,final String privateIpAddress,final String publicIpAddress,final boolean add,final boolean sourceNat,final String vlanId,final String vlanGateway,final String vlanNetmask){
  final Script command=new Script(_ipassocPath,_timeout,s_logger);
  if (add) {
    command.add(""String_Node_Str"");
  }
 else {
    command.add(""String_Node_Str"");
  }
  if (sourceNat) {
    command.add(""String_Node_Str"");
  }
  command.add(""String_Node_Str"",privateIpAddress);
  command.add(""String_Node_Str"",publicIpAddress);
  command.add(""String_Node_Str"",vmName);
  command.add(""String_Node_Str"",vlanNetmask);
  command.add(""String_Node_Str"",""String_Node_Str"");
  if (vlanId != null) {
    command.add(""String_Node_Str"",vlanId);
    command.add(""String_Node_Str"",vlanGateway);
  }
  return command.execute();
}","protected String assignPublicIpAddress(final String vmName,final String privateIpAddress,final String publicIpAddress,final boolean add,final boolean firstIP,final boolean sourceNat,final String vlanId,final String vlanGateway,final String vlanNetmask,final String vifMacAddress,String guestIp){
  final Script command=new Script(_ipassocPath,_timeout,s_logger);
  command.add(privateIpAddress);
  if (add) {
    command.add(""String_Node_Str"");
  }
 else {
    command.add(""String_Node_Str"");
  }
  String cidrSize=Long.toString(NetUtils.getCidrSize(vlanNetmask));
  if (sourceNat) {
    command.add(""String_Node_Str"");
    command.add(""String_Node_Str"",publicIpAddress + ""String_Node_Str"" + cidrSize);
  }
 else   if (firstIP) {
    command.add(""String_Node_Str"");
    command.add(""String_Node_Str"",publicIpAddress + ""String_Node_Str"" + cidrSize);
  }
 else {
    command.add(""String_Node_Str"",publicIpAddress);
  }
  command.add(""String_Node_Str"",""String_Node_Str"");
  return command.execute();
}"
89795,"@SuppressWarnings(""String_Node_Str"") private String getLoginSuccessResponse(HttpSession session,String responseType){
  StringBuffer sb=new StringBuffer();
  int inactiveInterval=session.getMaxInactiveInterval();
  if (BaseCmd.RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) {
    sb.append(""String_Node_Str"");
    Enumeration attrNames=session.getAttributeNames();
    if (attrNames != null) {
      sb.append(""String_Node_Str"" + inactiveInterval + ""String_Node_Str"");
      while (attrNames.hasMoreElements()) {
        String attrName=(String)attrNames.nextElement();
        Object attrObj=session.getAttribute(attrName);
        if ((attrObj instanceof String) || (attrObj instanceof Long)) {
          sb.append(""String_Node_Str"" + attrName + ""String_Node_Str""+ attrObj.toString()+ ""String_Node_Str"");
        }
      }
    }
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"" + inactiveInterval + ""String_Node_Str"");
    Enumeration attrNames=session.getAttributeNames();
    if (attrNames != null) {
      while (attrNames.hasMoreElements()) {
        String attrName=(String)attrNames.nextElement();
        String attr=(String)session.getAttribute(attrName);
        sb.append(""String_Node_Str"" + attrName + ""String_Node_Str""+ attr+ ""String_Node_Str""+ attrName+ ""String_Node_Str"");
      }
    }
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}","@SuppressWarnings(""String_Node_Str"") private String getLoginSuccessResponse(HttpSession session,String responseType){
  StringBuffer sb=new StringBuffer();
  int inactiveInterval=session.getMaxInactiveInterval();
  if (BaseCmd.RESPONSE_TYPE_JSON.equalsIgnoreCase(responseType)) {
    sb.append(""String_Node_Str"");
    Enumeration attrNames=session.getAttributeNames();
    if (attrNames != null) {
      sb.append(""String_Node_Str"" + inactiveInterval + ""String_Node_Str"");
      while (attrNames.hasMoreElements()) {
        String attrName=(String)attrNames.nextElement();
        Object attrObj=session.getAttribute(attrName);
        if ((attrObj instanceof String) || (attrObj instanceof Long)) {
          sb.append(""String_Node_Str"" + attrName + ""String_Node_Str""+ attrObj.toString()+ ""String_Node_Str"");
        }
      }
    }
    sb.append(""String_Node_Str"");
  }
 else {
    sb.append(""String_Node_Str"");
    sb.append(""String_Node_Str"" + inactiveInterval + ""String_Node_Str"");
    Enumeration attrNames=session.getAttributeNames();
    if (attrNames != null) {
      while (attrNames.hasMoreElements()) {
        String attrName=(String)attrNames.nextElement();
        Object attrObj=session.getAttribute(attrName);
        if (attrObj instanceof String || attrObj instanceof Long || attrObj instanceof Short) {
          sb.append(""String_Node_Str"" + attrName + ""String_Node_Str""+ attrObj.toString()+ ""String_Node_Str""+ attrName+ ""String_Node_Str"");
        }
      }
    }
    sb.append(""String_Node_Str"");
  }
  return sb.toString();
}"
89796,"@Override @ActionEvent(eventType=EventTypes.EVENT_VOLUME_CREATE,eventDescription=""String_Node_Str"",create=true) public VolumeVO allocVolume(CreateVolumeCmd cmd) throws InvalidParameterValueException, PermissionDeniedException, ResourceAllocationException {
  Account account=UserContext.current().getCaller();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account targetAccount=null;
  if ((account == null) || isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      targetAccount=_accountDao.findActiveAccount(accountName,domainId);
    }
 else {
      targetAccount=account;
    }
    if (targetAccount == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
  }
 else {
    targetAccount=account;
  }
  if (_accountMgr.resourceLimitExceeded(targetAccount,ResourceType.volume)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + targetAccount.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    throw rae;
  }
  Long zoneId=null;
  Long diskOfferingId=null;
  Long size=null;
  if (cmd.getSnapshotId() == null && cmd.getDiskOfferingId() == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cmd.getSnapshotId() == null) {
    zoneId=cmd.getZoneId();
    if ((zoneId == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    diskOfferingId=cmd.getDiskOfferingId();
    size=cmd.getSize();
    if (diskOfferingId == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
    if ((diskOffering == null) || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if ((diskOffering.isCustomized() && size == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (diskOffering.isCustomized() && size != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (diskOffering.getDomainId() == null) {
    }
 else {
      _configMgr.checkDiskOfferingAccess(account,diskOffering);
    }
    if (!validateVolumeSizeRange(diskOffering.getDiskSize() / 1024)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + size + ""String_Node_Str""+ _maxVolumeSizeInGb);
    }
    if (diskOffering.getDiskSize() > 0) {
      size=(diskOffering.getDiskSize() * 1024 * 1024);
    }
 else {
      if (!validateVolumeSizeRange(size)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + size + ""String_Node_Str""+ _maxVolumeSizeInGb);
      }
      size=(size * 1024 * 1024* 1024);
    }
  }
 else {
    Long snapshotId=cmd.getSnapshotId();
    Snapshot snapshotCheck=_snapshotDao.findById(snapshotId);
    if (snapshotCheck == null) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + snapshotId);
    }
    VolumeVO vol=_volsDao.findById(snapshotCheck.getVolumeId());
    zoneId=vol.getDataCenterId();
    diskOfferingId=vol.getDiskOfferingId();
    size=vol.getSize();
    if (account != null) {
      if (isAdmin(account.getType())) {
        Account snapshotOwner=_accountDao.findById(snapshotCheck.getAccountId());
        if (!_domainDao.isChildDomain(account.getDomainId(),snapshotOwner.getDomainId())) {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
        }
      }
 else       if (account.getId() != snapshotCheck.getAccountId()) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
  List<StoragePoolVO> storagePools=_storagePoolDao.listByDataCenterId(zoneId);
  boolean sharedPoolExists=false;
  for (  StoragePoolVO storagePool : storagePools) {
    if (storagePool.isShared()) {
      sharedPoolExists=true;
    }
  }
  List<HostVO> hosts=_hostDao.listByDataCenter(zoneId);
  if (hosts.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!sharedPoolExists) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String userSpecifiedName=cmd.getVolumeName();
  if (userSpecifiedName == null) {
    userSpecifiedName=getRandomVolumeName();
  }
  VolumeVO volume=new VolumeVO(userSpecifiedName,-1,-1,-1,-1,new Long(-1),null,null,0,Volume.VolumeType.DATADISK);
  volume.setPoolId(null);
  volume.setDataCenterId(zoneId);
  volume.setPodId(null);
  volume.setAccountId(targetAccount.getId());
  volume.setDomainId(((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId()));
  volume.setDiskOfferingId(diskOfferingId);
  volume.setSize(size);
  volume.setStorageResourceType(StorageResourceType.STORAGE_POOL);
  volume.setInstanceId(null);
  volume.setUpdated(new Date());
  volume.setStatus(AsyncInstanceCreateStatus.Creating);
  volume.setDomainId((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId());
  volume.setState(Volume.State.Allocated);
  volume=_volsDao.persist(volume);
  UserContext.current().setEventDetails(""String_Node_Str"" + volume.getId());
  return volume;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_VOLUME_CREATE,eventDescription=""String_Node_Str"",create=true) public VolumeVO allocVolume(CreateVolumeCmd cmd) throws InvalidParameterValueException, PermissionDeniedException, ResourceAllocationException {
  Account account=UserContext.current().getCaller();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account targetAccount=null;
  if ((account == null) || isAdmin(account.getType())) {
    if ((domainId != null) && (accountName != null)) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      targetAccount=_accountDao.findActiveAccount(accountName,domainId);
    }
 else {
      targetAccount=account;
    }
    if (targetAccount == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    }
  }
 else {
    targetAccount=account;
  }
  if (_accountMgr.resourceLimitExceeded(targetAccount,ResourceType.volume)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + targetAccount.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    throw rae;
  }
  Long zoneId=null;
  Long diskOfferingId=null;
  Long size=null;
  if (cmd.getSnapshotId() == null && cmd.getDiskOfferingId() == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cmd.getSnapshotId() == null) {
    zoneId=cmd.getZoneId();
    if ((zoneId == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    diskOfferingId=cmd.getDiskOfferingId();
    size=cmd.getSize();
    if (diskOfferingId == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(diskOfferingId);
    if ((diskOffering == null) || !DiskOfferingVO.Type.Disk.equals(diskOffering.getType())) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if ((diskOffering.isCustomized() && size == null)) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (!diskOffering.isCustomized() && size != null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (diskOffering.getDomainId() == null) {
    }
 else {
      _configMgr.checkDiskOfferingAccess(account,diskOffering);
    }
    if (!validateVolumeSizeRange(diskOffering.getDiskSize() / 1024)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + size + ""String_Node_Str""+ _maxVolumeSizeInGb);
    }
    if (diskOffering.getDiskSize() > 0) {
      size=(diskOffering.getDiskSize() * 1024 * 1024);
    }
 else {
      if (!validateVolumeSizeRange(size)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + size + ""String_Node_Str""+ _maxVolumeSizeInGb);
      }
      size=(size * 1024 * 1024* 1024);
    }
  }
 else {
    Long snapshotId=cmd.getSnapshotId();
    Snapshot snapshotCheck=_snapshotDao.findById(snapshotId);
    if (snapshotCheck == null) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + snapshotId);
    }
    VolumeVO vol=_volsDao.findById(snapshotCheck.getVolumeId());
    zoneId=vol.getDataCenterId();
    diskOfferingId=vol.getDiskOfferingId();
    size=vol.getSize();
    if (account != null) {
      if (isAdmin(account.getType())) {
        Account snapshotOwner=_accountDao.findById(snapshotCheck.getAccountId());
        if (!_domainDao.isChildDomain(account.getDomainId(),snapshotOwner.getDomainId())) {
          throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
        }
      }
 else       if (account.getId() != snapshotCheck.getAccountId()) {
        throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
  List<StoragePoolVO> storagePools=_storagePoolDao.listByDataCenterId(zoneId);
  boolean sharedPoolExists=false;
  for (  StoragePoolVO storagePool : storagePools) {
    if (storagePool.isShared()) {
      sharedPoolExists=true;
    }
  }
  List<HostVO> hosts=_hostDao.listByDataCenter(zoneId);
  if (hosts.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!sharedPoolExists) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String userSpecifiedName=cmd.getVolumeName();
  if (userSpecifiedName == null) {
    userSpecifiedName=getRandomVolumeName();
  }
  VolumeVO volume=new VolumeVO(userSpecifiedName,-1,-1,-1,-1,new Long(-1),null,null,0,Volume.VolumeType.DATADISK);
  volume.setPoolId(null);
  volume.setDataCenterId(zoneId);
  volume.setPodId(null);
  volume.setAccountId(targetAccount.getId());
  volume.setDomainId(((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId()));
  volume.setDiskOfferingId(diskOfferingId);
  volume.setSize(size);
  volume.setStorageResourceType(StorageResourceType.STORAGE_POOL);
  volume.setInstanceId(null);
  volume.setUpdated(new Date());
  volume.setStatus(AsyncInstanceCreateStatus.Creating);
  volume.setDomainId((account == null) ? Domain.ROOT_DOMAIN : account.getDomainId());
  volume.setState(Volume.State.Allocated);
  volume=_volsDao.persist(volume);
  UserContext.current().setEventDetails(""String_Node_Str"" + volume.getId());
  return volume;
}"
89797,"@Override public boolean revokePortForwardingRule(long vmId){
  UserVmVO vm=_vmDao.findByIdIncludingRemoved(vmId);
  if (vm == null) {
    return false;
  }
  List<PortForwardingRuleVO> rules=_forwardingDao.listByVm(vmId);
  for (  PortForwardingRuleVO rule : rules) {
    revokePortForwardingRule(rule.getId(),true);
  }
  return true;
}","@Override public boolean revokePortForwardingRule(long vmId){
  UserVmVO vm=_vmDao.findByIdIncludingRemoved(vmId);
  if (vm == null) {
    return false;
  }
  List<PortForwardingRuleVO> rules=_forwardingDao.listByVm(vmId);
  if (rules == null || rules.isEmpty()) {
    return true;
  }
  for (  PortForwardingRuleVO rule : rules) {
    revokePortForwardingRule(rule.getId(),true);
  }
  return true;
}"
89798,"@Override public boolean expunge(UserVmVO vm,long callerUserId,Account caller){
  try {
    if (!_itMgr.advanceExpunge(vm,_accountMgr.getSystemUser(),caller)) {
      s_logger.info(""String_Node_Str"" + vm);
      return false;
    }
    _networkGroupMgr.removeInstanceFromGroups(vm.getId());
    removeInstanceFromInstanceGroup(vm.getId());
    long vmId=vm.getId();
    if (_rulesMgr.revokePortForwardingRule(vmId)) {
      s_logger.debug(""String_Node_Str"" + vmId + ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + vmId + ""String_Node_Str"");
    }
    if (_lbMgr.removeVmFromLoadBalancers(vmId)) {
      s_logger.debug(""String_Node_Str"" + vmId + ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + vmId + ""String_Node_Str"");
    }
    List<IPAddressVO> ips=_ipAddressDao.listByAssociatedVmId(vmId);
    if (ips != null) {
      for (      IPAddressVO ip : ips) {
        ip.setOneToOneNat(false);
        ip.setAssociatedWithVmId(null);
        _ipAddressDao.update(ip.getId(),ip);
        s_logger.debug(""String_Node_Str"" + ip + ""String_Node_Str""+ vm+ ""String_Node_Str"");
      }
    }
    _itMgr.remove(vm,_accountMgr.getSystemUser(),caller);
    return true;
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + vm,e);
    return false;
  }
catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + vm,e);
    return false;
  }
catch (  ConcurrentOperationException e) {
    s_logger.warn(""String_Node_Str"" + vm,e);
    return false;
  }
}","@Override public boolean expunge(UserVmVO vm,long callerUserId,Account caller){
  UserContext ctx=UserContext.current();
  ctx.setAccountId(vm.getAccountId());
  try {
    if (!_itMgr.advanceExpunge(vm,_accountMgr.getSystemUser(),caller)) {
      s_logger.info(""String_Node_Str"" + vm);
      return false;
    }
    _networkGroupMgr.removeInstanceFromGroups(vm.getId());
    removeInstanceFromInstanceGroup(vm.getId());
    long vmId=vm.getId();
    if (_rulesMgr.revokePortForwardingRule(vmId)) {
      s_logger.debug(""String_Node_Str"" + vmId + ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + vmId + ""String_Node_Str"");
    }
    if (_lbMgr.removeVmFromLoadBalancers(vmId)) {
      s_logger.debug(""String_Node_Str"" + vmId + ""String_Node_Str"");
    }
 else {
      s_logger.warn(""String_Node_Str"" + vmId + ""String_Node_Str"");
    }
    List<IPAddressVO> ips=_ipAddressDao.listByAssociatedVmId(vmId);
    if (ips != null) {
      for (      IPAddressVO ip : ips) {
        ip.setOneToOneNat(false);
        ip.setAssociatedWithVmId(null);
        _ipAddressDao.update(ip.getId(),ip);
        s_logger.debug(""String_Node_Str"" + ip + ""String_Node_Str""+ vm+ ""String_Node_Str"");
      }
    }
    _itMgr.remove(vm,_accountMgr.getSystemUser(),caller);
    return true;
  }
 catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"" + vm,e);
    return false;
  }
catch (  OperationTimedoutException e) {
    s_logger.warn(""String_Node_Str"" + vm,e);
    return false;
  }
catch (  ConcurrentOperationException e) {
    s_logger.warn(""String_Node_Str"" + vm,e);
    return false;
  }
}"
89799,"@Override public boolean attachIso(AttachIsoCmd cmd){
  Account account=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  Long vmId=cmd.getVirtualMachineId();
  Long isoId=cmd.getId();
  UserVmVO vmInstanceCheck=_userVmDao.findById(vmId);
  if (vmInstanceCheck == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  VMTemplateVO iso=_tmpltDao.findById(isoId);
  if (iso == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + isoId);
  }
  State vmState=vmInstanceCheck.getState();
  if (vmState != State.Running && vmState != State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String errMsg=""String_Node_Str"" + isoId + ""String_Node_Str""+ vmId;
  userId=accountAndUserValidation(account,userId,vmInstanceCheck,iso,errMsg);
  VMInstanceVO vm=ApiDBUtils.findVMInstanceById(vmId);
  VMTemplateVO vmTemplate=ApiDBUtils.findTemplateById(vm.getTemplateId());
  if (""String_Node_Str"".equals(iso.getDisplayText()) && vmTemplate.getHypervisorType() != Hypervisor.HypervisorType.XenServer) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmTemplate.getHypervisorType());
  }
  return attachISOToVM(vmId,userId,isoId,true);
}","@Override public boolean attachIso(AttachIsoCmd cmd){
  Account account=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  Long vmId=cmd.getVirtualMachineId();
  Long isoId=cmd.getId();
  UserVmVO vmInstanceCheck=_userVmDao.findById(vmId);
  if (vmInstanceCheck == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  VMTemplateVO iso=_tmpltDao.findById(isoId);
  if (iso == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + isoId);
  }
  State vmState=vmInstanceCheck.getState();
  if (vmState != State.Running && vmState != State.Stopped) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String errMsg=""String_Node_Str"" + isoId + ""String_Node_Str""+ vmId;
  userId=accountAndUserValidation(account,userId,vmInstanceCheck,iso,errMsg);
  if (""String_Node_Str"".equals(iso.getDisplayText()) && vmInstanceCheck.getHypervisorType() != Hypervisor.HypervisorType.XenServer) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vmInstanceCheck.getHypervisorType());
  }
  return attachISOToVM(vmId,userId,isoId,true);
}"
89800,"@Override public <T extends VMInstanceVO>T advanceStart(T vm,Map<VirtualMachineProfile.Param,Object> params,User caller,Account account) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  long vmId=vm.getId();
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  vm=vmGuru.findById(vm.getId());
  Ternary<T,ReservationContext,ItWorkVO> start=changeToStartState(vmGuru,vm,caller,account);
  if (start == null) {
    return vmGuru.findById(vmId);
  }
  vm=start.first();
  ReservationContext ctx=start.second();
  ItWorkVO work=start.third();
  T startedVm=null;
  ServiceOfferingVO offering=_offeringDao.findById(vm.getServiceOfferingId());
  VMTemplateVO template=_templateDao.findById(vm.getTemplateId());
  DataCenterDeployment plan=new DataCenterDeployment(vm.getDataCenterId(),vm.getPodId(),null,null);
  HypervisorGuru hvGuru=_hvGurus.get(vm.getHypervisorType());
  try {
    Journal journal=start.second().getJournal();
    ExcludeList avoids=new ExcludeList();
    int retry=_retry;
    while (retry-- != 0) {
      VirtualMachineProfileImpl<T> vmProfile=new VirtualMachineProfileImpl<T>(vm,template,offering,null,params);
      DeployDestination dest=null;
      for (      DeploymentPlanner planner : _planners) {
        dest=planner.plan(vmProfile,plan,avoids);
        if (dest != null) {
          avoids.addHost(dest.getHost().getId());
          journal.record(""String_Node_Str"",vmProfile,dest);
          break;
        }
      }
      if (dest == null) {
        throw new InsufficientServerCapacityException(""String_Node_Str"" + vmProfile,DataCenter.class,plan.getDataCenterId());
      }
      long destHostId=dest.getHost().getId();
      if (!changeState(vm,Event.OperationRetry,destHostId,work,Step.Prepare)) {
        throw new ConcurrentOperationException(""String_Node_Str"");
      }
      try {
        _storageMgr.prepare(vmProfile,dest);
        _networkMgr.prepare(vmProfile,dest,ctx);
        vmGuru.finalizeVirtualMachineProfile(vmProfile,dest,ctx);
        VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
        Commands cmds=new Commands(OnError.Revert);
        cmds.addCommand(new StartCommand(vmTO));
        vmGuru.finalizeDeployment(cmds,vmProfile,dest,ctx);
        vm.setPodId(dest.getPod().getId());
        work=_workDao.findById(work.getId());
        if (work == null || work.getStep() != Step.Prepare) {
          throw new ConcurrentOperationException(""String_Node_Str"" + work);
        }
        _workDao.updateStep(work,Step.Start);
        _agentMgr.send(destHostId,cmds);
        _workDao.updateStep(work,Step.Started);
        Answer startAnswer=cmds.getAnswer(StartAnswer.class);
        if (startAnswer != null && startAnswer.getResult()) {
          if (vmGuru.finalizeStart(vmProfile,destHostId,cmds,ctx)) {
            if (!changeState(vm,Event.OperationSucceeded,destHostId,work,Step.Done)) {
              throw new ConcurrentOperationException(""String_Node_Str"");
            }
            startedVm=vm;
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + vm);
            }
            return startedVm;
          }
        }
        s_logger.info(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ (startAnswer == null ? ""String_Node_Str"" : startAnswer.getDetails()));
      }
 catch (      OperationTimedoutException e) {
        s_logger.debug(""String_Node_Str"" + dest.getHost());
        if (e.isActive()) {
        }
        avoids.addHost(destHostId);
        continue;
      }
catch (      ResourceUnavailableException e) {
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            throw new CloudRuntimeException(""String_Node_Str"",e);
          }
        }
        s_logger.info(""String_Node_Str"",e);
        continue;
      }
catch (      InsufficientCapacityException e) {
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            throw new CloudRuntimeException(""String_Node_Str"",e);
          }
        }
        s_logger.info(""String_Node_Str"",e);
        continue;
      }
catch (      RuntimeException e) {
        s_logger.warn(""String_Node_Str"" + vm,e);
        throw e;
      }
 finally {
        if (startedVm == null) {
          _workDao.updateStep(work,Step.Release);
          cleanup(vmGuru,vmProfile,work,Event.OperationFailed,false,caller,account);
        }
      }
    }
  }
  finally {
    if (startedVm == null) {
      changeState(vm,Event.OperationFailed,null,work,Step.Done);
    }
  }
  return startedVm;
}","@Override public <T extends VMInstanceVO>T advanceStart(T vm,Map<VirtualMachineProfile.Param,Object> params,User caller,Account account) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  long vmId=vm.getId();
  VirtualMachineGuru<T> vmGuru=getVmGuru(vm);
  vm=vmGuru.findById(vm.getId());
  Ternary<T,ReservationContext,ItWorkVO> start=changeToStartState(vmGuru,vm,caller,account);
  if (start == null) {
    return vmGuru.findById(vmId);
  }
  vm=start.first();
  ReservationContext ctx=start.second();
  ItWorkVO work=start.third();
  T startedVm=null;
  ServiceOfferingVO offering=_offeringDao.findById(vm.getServiceOfferingId());
  VMTemplateVO template=_templateDao.findById(vm.getTemplateId());
  DataCenterDeployment plan=new DataCenterDeployment(vm.getDataCenterId(),vm.getPodId(),null,null);
  HypervisorGuru hvGuru=_hvGurus.get(vm.getHypervisorType());
  try {
    Journal journal=start.second().getJournal();
    ExcludeList avoids=new ExcludeList();
    int retry=_retry;
    while (retry-- != 0) {
      VirtualMachineProfileImpl<T> vmProfile=new VirtualMachineProfileImpl<T>(vm,template,offering,null,params);
      DeployDestination dest=null;
      for (      DeploymentPlanner planner : _planners) {
        dest=planner.plan(vmProfile,plan,avoids);
        if (dest != null) {
          avoids.addHost(dest.getHost().getId());
          journal.record(""String_Node_Str"",vmProfile,dest);
          break;
        }
      }
      if (dest == null) {
        throw new InsufficientServerCapacityException(""String_Node_Str"" + vmProfile,DataCenter.class,plan.getDataCenterId());
      }
      long destHostId=dest.getHost().getId();
      if (!changeState(vm,Event.OperationRetry,destHostId,work,Step.Prepare)) {
        throw new ConcurrentOperationException(""String_Node_Str"");
      }
      try {
        _storageMgr.prepare(vmProfile,dest);
        _networkMgr.prepare(vmProfile,dest,ctx);
        vmGuru.finalizeVirtualMachineProfile(vmProfile,dest,ctx);
        VirtualMachineTO vmTO=hvGuru.implement(vmProfile);
        Commands cmds=new Commands(OnError.Revert);
        cmds.addCommand(new StartCommand(vmTO));
        vmGuru.finalizeDeployment(cmds,vmProfile,dest,ctx);
        vm.setPodId(dest.getPod().getId());
        work=_workDao.findById(work.getId());
        if (work == null || work.getStep() != Step.Prepare) {
          throw new ConcurrentOperationException(""String_Node_Str"" + work);
        }
        _workDao.updateStep(work,Step.Start);
        _agentMgr.send(destHostId,cmds);
        _workDao.updateStep(work,Step.Started);
        Answer startAnswer=cmds.getAnswer(StartAnswer.class);
        if (startAnswer != null && startAnswer.getResult()) {
          if (vmGuru.finalizeStart(vmProfile,destHostId,cmds,ctx)) {
            if (!changeState(vm,Event.OperationSucceeded,destHostId,work,Step.Done)) {
              throw new ConcurrentOperationException(""String_Node_Str"");
            }
            startedVm=vm;
            if (s_logger.isDebugEnabled()) {
              s_logger.debug(""String_Node_Str"" + vm);
            }
            return startedVm;
          }
        }
        s_logger.info(""String_Node_Str"" + dest.getHost() + ""String_Node_Str""+ (startAnswer == null ? ""String_Node_Str"" : startAnswer.getDetails()));
      }
 catch (      OperationTimedoutException e) {
        s_logger.debug(""String_Node_Str"" + dest.getHost());
        if (e.isActive()) {
        }
        avoids.addHost(destHostId);
        continue;
      }
catch (      ResourceUnavailableException e) {
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            throw new CloudRuntimeException(""String_Node_Str"",e);
          }
        }
        s_logger.info(""String_Node_Str"",e);
        continue;
      }
catch (      InsufficientCapacityException e) {
        if (!avoids.add(e)) {
          if (e.getScope() == Volume.class || e.getScope() == Nic.class) {
            throw e;
          }
 else {
            throw new CloudRuntimeException(""String_Node_Str"",e);
          }
        }
        s_logger.info(""String_Node_Str"",e);
        continue;
      }
catch (      RuntimeException e) {
        s_logger.warn(""String_Node_Str"" + vm,e);
        throw e;
      }
 finally {
        if (startedVm == null) {
          _workDao.updateStep(work,Step.Release);
          cleanup(vmGuru,vmProfile,work,Event.OperationFailed,false,caller,account);
        }
      }
    }
  }
  finally {
    if (startedVm == null) {
      changeState(vm,Event.OperationFailed,null,work,Step.Done);
      throw new CloudRuntimeException(""String_Node_Str"" + vm);
    }
  }
  return startedVm;
}"
89801,"public static DomainVO findDomainById(Long domainId){
  return _domainDao.findById(domainId);
}","public static DomainVO findDomainById(Long domainId){
  return _domainDao.findByIdIncludingRemoved(domainId);
}"
89802,"public static HostVO findHostById(Long hostId){
  return _hostDao.findById(hostId);
}","public static HostVO findHostById(Long hostId){
  return _hostDao.findByIdIncludingRemoved(hostId);
}"
89803,"public static GuestOS findGuestOSById(Long id){
  return _guestOSDao.findById(id);
}","public static GuestOS findGuestOSById(Long id){
  return _guestOSDao.findByIdIncludingRemoved(id);
}"
89804,"public static DomainRouterVO findDomainRouterById(Long routerId){
  return _domainRouterDao.findById(routerId);
}","public static DomainRouterVO findDomainRouterById(Long routerId){
  return _domainRouterDao.findByIdIncludingRemoved(routerId);
}"
89805,"@Override @ActionEvent(eventType=EventTypes.EVENT_VOLUME_DELETE,eventDescription=""String_Node_Str"") public boolean deleteVolume(DeleteVolumeCmd cmd) throws ConcurrentOperationException {
  Account account=UserContext.current().getCaller();
  Long volumeId=cmd.getId();
  boolean isAdmin;
  if (account == null) {
    isAdmin=true;
  }
 else {
    isAdmin=isAdmin(account.getType());
  }
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId);
  }
  if (!isAdmin) {
    if (account.getId() != volume.getAccountId()) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str""+ account.getAccountName());
    }
  }
 else   if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),volume.getDomainId())) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  if (!isAdmin) {
    if (account.getId() != volume.getAccountId()) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str""+ account.getAccountName());
    }
  }
 else   if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),volume.getDomainId())) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  if (volume.getInstanceId() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getState() != Volume.State.Destroy) {
    destroyVolume(volume);
  }
  try {
    expungeVolume(volume);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return false;
  }
  return true;
}","@Override @ActionEvent(eventType=EventTypes.EVENT_VOLUME_DELETE,eventDescription=""String_Node_Str"") public boolean deleteVolume(DeleteVolumeCmd cmd) throws ConcurrentOperationException {
  Account account=UserContext.current().getCaller();
  Long volumeId=cmd.getId();
  boolean isAdmin;
  if (account == null) {
    isAdmin=true;
  }
 else {
    isAdmin=isAdmin(account.getType());
  }
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId);
  }
  if (!isAdmin) {
    if (account.getId() != volume.getAccountId()) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str""+ account.getAccountName());
    }
  }
 else   if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),volume.getDomainId())) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  if (!isAdmin) {
    if (account.getId() != volume.getAccountId()) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str""+ account.getAccountName());
    }
  }
 else   if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),volume.getDomainId())) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  if (volume.getInstanceId() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getState() != Volume.State.Destroy) {
    destroyVolume(volume);
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volumeId,volume.getName(),null,null,null);
    _usageEventDao.persist(usageEvent);
  }
  try {
    expungeVolume(volume);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return false;
  }
  return true;
}"
89806,"@Override @DB public void cleanupVolumes(long vmId) throws ConcurrentOperationException {
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  List<VolumeVO> volumesForVm=_volsDao.findByInstance(vmId);
  List<VolumeVO> toBeExpunged=new ArrayList<VolumeVO>();
  Transaction txn=Transaction.currentTxn();
  txn.start();
  for (  VolumeVO vol : volumesForVm) {
    if (vol.getVolumeType().equals(VolumeType.ROOT)) {
      if (!vol.getState().equals(Volume.State.Destroy))       destroyVolume(vol);
      toBeExpunged.add(vol);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol);
      }
      _volsDao.detachVolume(vol.getId());
    }
  }
  txn.commit();
  for (  VolumeVO expunge : toBeExpunged) {
    expungeVolume(expunge);
  }
}","@Override @DB public void cleanupVolumes(long vmId) throws ConcurrentOperationException {
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  List<VolumeVO> volumesForVm=_volsDao.findByInstance(vmId);
  List<VolumeVO> toBeExpunged=new ArrayList<VolumeVO>();
  Transaction txn=Transaction.currentTxn();
  txn.start();
  for (  VolumeVO vol : volumesForVm) {
    if (vol.getVolumeType().equals(VolumeType.ROOT)) {
      if (!vol.getState().equals(Volume.State.Destroy)) {
        destroyVolume(vol);
        VMInstanceVO vm=_vmInstanceDao.findById(vmId);
        if (vm.getType() == VirtualMachine.Type.User) {
          UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,vol.getAccountId(),vol.getDataCenterId(),vol.getId(),vol.getName(),null,null,null);
          _usageEventDao.persist(usageEvent);
        }
      }
      toBeExpunged.add(vol);
    }
 else {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol);
      }
      _volsDao.detachVolume(vol.getId());
    }
  }
  txn.commit();
  for (  VolumeVO expunge : toBeExpunged) {
    expungeVolume(expunge);
  }
}"
89807,"@Override @DB public void destroyVolume(VolumeVO volume) throws ConcurrentOperationException {
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _volsDao.update(volume,Volume.Event.Destroy);
  long volumeId=volume.getId();
  if (volume.getPoolId() != null) {
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volumeId,volume.getName(),null,null,null);
    _usageEventDao.persist(usageEvent);
  }
  _snapshotMgr.deletePoliciesForVolume(volumeId);
  _accountMgr.decrementResourceCount(volume.getAccountId(),ResourceType.volume);
  txn.commit();
}","@Override @DB public void destroyVolume(VolumeVO volume) throws ConcurrentOperationException {
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _volsDao.update(volume,Volume.Event.Destroy);
  long volumeId=volume.getId();
  _snapshotMgr.deletePoliciesForVolume(volumeId);
  _accountMgr.decrementResourceCount(volume.getAccountId(),ResourceType.volume);
  txn.commit();
}"
89808,"@Override public boolean cleanupAccount(AccountVO account,long callerUserId,Account caller) throws ConcurrentOperationException, ResourceUnavailableException {
  long accountId=account.getId();
  boolean accountCleanupNeeded=false;
  try {
    List<InstanceGroupVO> groups=_vmGroupDao.listByAccountId(accountId);
    for (    InstanceGroupVO group : groups) {
      if (!_vmMgr.deleteVmGroup(group.getId())) {
        s_logger.error(""String_Node_Str"" + group.getId());
        accountCleanupNeeded=true;
      }
    }
    boolean success=_snapMgr.deleteSnapshotDirsForAccount(accountId);
    if (success) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
    }
    List<VMTemplateVO> userTemplates=_templateDao.listByAccountId(accountId);
    boolean allTemplatesDeleted=true;
    for (    VMTemplateVO template : userTemplates) {
      try {
        allTemplatesDeleted=_tmpltMgr.delete(callerUserId,template.getId(),null);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ e.getMessage());
        allTemplatesDeleted=false;
      }
    }
    if (!allTemplatesDeleted) {
      s_logger.warn(""String_Node_Str"" + accountId);
      accountCleanupNeeded=true;
    }
    List<UserVmVO> vms=_userVmDao.listByAccountId(accountId);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str""+ vms.size());
    }
    for (    UserVmVO vm : vms) {
      if (!_vmMgr.expunge(vm,callerUserId,caller)) {
        s_logger.error(""String_Node_Str"" + vm.getId());
        accountCleanupNeeded=true;
      }
    }
    List<VolumeVO> volumes=_volumeDao.findDetachedByAccount(accountId);
    for (    VolumeVO volume : volumes) {
      if (!volume.getState().equals(Volume.State.Destroy)) {
        _storageMgr.destroyVolume(volume);
      }
    }
    int numRemoved=_securityGroupDao.removeByAccountId(accountId);
    s_logger.info(""String_Node_Str"" + numRemoved + ""String_Node_Str""+ accountId);
    boolean networksDeleted=true;
    s_logger.debug(""String_Node_Str"" + account.getId());
    List<NetworkVO> networks=_networkDao.listByOwner(accountId);
    if (networks != null) {
      for (      NetworkVO network : networks) {
        if (!_networkMgr.deleteNetworkInternal(network.getId(),callerUserId)) {
          s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
          accountCleanupNeeded=true;
          networksDeleted=false;
        }
 else {
          s_logger.debug(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
        }
      }
    }
    if (networksDeleted) {
      if (!_configMgr.deleteAccountSpecificVirtualRanges(accountId)) {
        accountCleanupNeeded=true;
      }
 else {
        s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + accountId + ""String_Node_Str"");
      }
    }
    return true;
  }
  finally {
    s_logger.info(""String_Node_Str"" + account.getId() + (accountCleanupNeeded ? ""String_Node_Str"" : ""String_Node_Str""));
    if (accountCleanupNeeded) {
      _accountDao.markForCleanup(accountId);
    }
  }
}","@Override public boolean cleanupAccount(AccountVO account,long callerUserId,Account caller) throws ConcurrentOperationException, ResourceUnavailableException {
  long accountId=account.getId();
  boolean accountCleanupNeeded=false;
  try {
    List<InstanceGroupVO> groups=_vmGroupDao.listByAccountId(accountId);
    for (    InstanceGroupVO group : groups) {
      if (!_vmMgr.deleteVmGroup(group.getId())) {
        s_logger.error(""String_Node_Str"" + group.getId());
        accountCleanupNeeded=true;
      }
    }
    boolean success=_snapMgr.deleteSnapshotDirsForAccount(accountId);
    if (success) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
    }
    List<VMTemplateVO> userTemplates=_templateDao.listByAccountId(accountId);
    boolean allTemplatesDeleted=true;
    for (    VMTemplateVO template : userTemplates) {
      try {
        allTemplatesDeleted=_tmpltMgr.delete(callerUserId,template.getId(),null);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ e.getMessage());
        allTemplatesDeleted=false;
      }
    }
    if (!allTemplatesDeleted) {
      s_logger.warn(""String_Node_Str"" + accountId);
      accountCleanupNeeded=true;
    }
    List<UserVmVO> vms=_userVmDao.listByAccountId(accountId);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str""+ vms.size());
    }
    for (    UserVmVO vm : vms) {
      if (!_vmMgr.expunge(vm,callerUserId,caller)) {
        s_logger.error(""String_Node_Str"" + vm.getId());
        accountCleanupNeeded=true;
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
      _usageEventDao.persist(usageEvent);
    }
    List<VolumeVO> volumes=_volumeDao.findDetachedByAccount(accountId);
    for (    VolumeVO volume : volumes) {
      if (!volume.getState().equals(Volume.State.Destroy)) {
        _storageMgr.destroyVolume(volume);
        if (volume.getPoolId() != null) {
          UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),null,null,null);
          _usageEventDao.persist(usageEvent);
        }
      }
    }
    int numRemoved=_securityGroupDao.removeByAccountId(accountId);
    s_logger.info(""String_Node_Str"" + numRemoved + ""String_Node_Str""+ accountId);
    boolean networksDeleted=true;
    s_logger.debug(""String_Node_Str"" + account.getId());
    List<NetworkVO> networks=_networkDao.listByOwner(accountId);
    if (networks != null) {
      for (      NetworkVO network : networks) {
        if (!_networkMgr.deleteNetworkInternal(network.getId(),callerUserId)) {
          s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
          accountCleanupNeeded=true;
          networksDeleted=false;
        }
 else {
          s_logger.debug(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
        }
      }
    }
    if (networksDeleted) {
      if (!_configMgr.deleteAccountSpecificVirtualRanges(accountId)) {
        accountCleanupNeeded=true;
      }
 else {
        s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + accountId + ""String_Node_Str"");
      }
    }
    return true;
  }
  finally {
    s_logger.info(""String_Node_Str"" + account.getId() + (accountCleanupNeeded ? ""String_Node_Str"" : ""String_Node_Str""));
    if (accountCleanupNeeded) {
      _accountDao.markForCleanup(accountId);
    }
  }
}"
89809,"@Override public UserVm destroyVm(long vmId) throws ResourceUnavailableException, ConcurrentOperationException {
  Account account=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + vmId);
  }
  userId=accountAndUserValidation(vmId,account,userId,vm);
  User caller=_userDao.findById(userId);
  boolean status;
  try {
    status=_itMgr.destroy(vm,caller,account);
  }
 catch (  OperationTimedoutException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm,e);
  }
  if (status) {
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
    _usageEventDao.persist(usageEvent);
    _accountMgr.decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
    return _vmDao.findById(vmId);
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"" + vmId);
  }
}","@Override public UserVm destroyVm(long vmId) throws ResourceUnavailableException, ConcurrentOperationException {
  Account account=UserContext.current().getCaller();
  Long userId=UserContext.current().getCallerUserId();
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + vmId);
  }
  userId=accountAndUserValidation(vmId,account,userId,vm);
  User caller=_userDao.findById(userId);
  boolean status;
  try {
    status=_itMgr.destroy(vm,caller,account);
  }
 catch (  OperationTimedoutException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + vm,e);
  }
  if (status) {
    List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
    for (    VolumeVO volume : volumes) {
      if (volume.getVolumeType().equals(VolumeType.ROOT)) {
        UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),null,null,null);
        _usageEventDao.persist(usageEvent);
      }
    }
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
    _usageEventDao.persist(usageEvent);
    _accountMgr.decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
    return _vmDao.findById(vmId);
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"" + vmId);
  }
}"
89810,"@Override @DB public UserVm recoverVirtualMachine(RecoverVMCmd cmd) throws ResourceAllocationException, CloudRuntimeException {
  Long vmId=cmd.getId();
  Account accountHandle=UserContext.current().getCaller();
  if (accountHandle != null && accountHandle.getRemoved() != null) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + accountHandle.getId() + ""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId.longValue());
  if (vm == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + vmId);
  }
  if ((accountHandle != null) && !_domainDao.isChildDomain(accountHandle.getDomainId(),vm.getDomainId())) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (vm.getState() != State.Destroyed) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  Transaction txn=Transaction.currentTxn();
  AccountVO account=null;
  txn.start();
  account=_accountDao.lockRow(vm.getAccountId(),true);
  if (account.getRemoved() != null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (_accountMgr.resourceLimitExceeded(account,ResourceType.user_vm)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    txn.commit();
    throw rae;
  }
  _haMgr.cancelDestroy(vm,vm.getHostId());
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.user_vm);
  if (!_itMgr.stateTransitTo(vm,VirtualMachine.Event.RecoveryRequested,null)) {
    s_logger.debug(""String_Node_Str"" + vmId);
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  List<VolumeVO> volumes=_volsDao.findByInstanceIdDestroyed(vmId);
  for (  VolumeVO volume : volumes) {
    Long templateId=volume.getTemplateId();
    Long diskOfferingId=volume.getDiskOfferingId();
    Long offeringId=null;
    if (diskOfferingId != null) {
      DiskOfferingVO offering=_diskOfferingDao.findById(diskOfferingId);
      if (offering != null && (offering.getType() == DiskOfferingVO.Type.Disk)) {
        offeringId=offering.getId();
      }
    }
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),offeringId,templateId,volume.getSize());
    _usageEventDao.persist(usageEvent);
  }
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.volume,new Long(volumes.size()));
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
  _usageEventDao.persist(usageEvent);
  txn.commit();
  return _vmDao.findById(vmId);
}","@Override @DB public UserVm recoverVirtualMachine(RecoverVMCmd cmd) throws ResourceAllocationException, CloudRuntimeException {
  Long vmId=cmd.getId();
  Account accountHandle=UserContext.current().getCaller();
  if (accountHandle != null && accountHandle.getRemoved() != null) {
    throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,""String_Node_Str"" + accountHandle.getId() + ""String_Node_Str"");
  }
  UserVmVO vm=_vmDao.findById(vmId.longValue());
  if (vm == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + vmId);
  }
  if ((accountHandle != null) && !_domainDao.isChildDomain(accountHandle.getDomainId(),vm.getDomainId())) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  if (vm.getState() != State.Destroyed) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId + ""String_Node_Str"");
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  Transaction txn=Transaction.currentTxn();
  AccountVO account=null;
  txn.start();
  account=_accountDao.lockRow(vm.getAccountId(),true);
  if (account.getRemoved() != null) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (_accountMgr.resourceLimitExceeded(account,ResourceType.user_vm)) {
    ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
    rae.setResourceType(""String_Node_Str"");
    txn.commit();
    throw rae;
  }
  _haMgr.cancelDestroy(vm,vm.getHostId());
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.user_vm);
  if (!_itMgr.stateTransitTo(vm,VirtualMachine.Event.RecoveryRequested,null)) {
    s_logger.debug(""String_Node_Str"" + vmId);
    throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
  }
  List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
  for (  VolumeVO volume : volumes) {
    if (volume.getVolumeType().equals(VolumeType.ROOT)) {
      Long templateId=volume.getTemplateId();
      Long diskOfferingId=volume.getDiskOfferingId();
      Long offeringId=null;
      if (diskOfferingId != null) {
        DiskOfferingVO offering=_diskOfferingDao.findById(diskOfferingId);
        if (offering != null && (offering.getType() == DiskOfferingVO.Type.Disk)) {
          offeringId=offering.getId();
        }
      }
      UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),offeringId,templateId,volume.getSize());
      _usageEventDao.persist(usageEvent);
    }
  }
  _accountMgr.incrementResourceCount(account.getId(),ResourceType.volume,new Long(volumes.size()));
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
  _usageEventDao.persist(usageEvent);
  txn.commit();
  return _vmDao.findById(vmId);
}"
89811,"private void updateVmStateForFailedVmCreation(Long vmId){
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm != null) {
    if (vm.getState().equals(State.Stopped)) {
      _itMgr.stateTransitTo(vm,VirtualMachine.Event.OperationFailed,null);
      List<VolumeVO> volumesForThisVm=_volsDao.findByInstance(vm.getId());
      for (      VolumeVO volume : volumesForThisVm) {
        try {
          _storageMgr.destroyVolume(volume);
        }
 catch (        ConcurrentOperationException e) {
          s_logger.warn(""String_Node_Str"" + volume.getId() + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
        }
      }
    }
  }
}","private void updateVmStateForFailedVmCreation(Long vmId){
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm != null) {
    if (vm.getState().equals(State.Stopped)) {
      _itMgr.stateTransitTo(vm,VirtualMachine.Event.OperationFailed,null);
      List<VolumeVO> volumesForThisVm=_volsDao.findByInstance(vm.getId());
      for (      VolumeVO volume : volumesForThisVm) {
        try {
          _storageMgr.destroyVolume(volume);
          if ((volume.getStatus() == AsyncInstanceCreateStatus.Created) && (volume.getVolumeType().equals(VolumeType.ROOT))) {
            UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_DELETE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),null,null,null);
            _usageEventDao.persist(usageEvent);
          }
        }
 catch (        ConcurrentOperationException e) {
          s_logger.warn(""String_Node_Str"" + volume.getId() + ""String_Node_Str""+ vmId+ ""String_Node_Str"");
        }
      }
    }
  }
}"
89812,"@Override public <T extends VMInstanceVO>boolean advanceExpunge(T vm,User caller,Account account) throws ResourceUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  if (vm == null || vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (!this.advanceStop(vm,false,caller,account)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
  }
  if (!stateTransitTo(vm,VirtualMachine.Event.ExpungeOperation,vm.getHostId())) {
    s_logger.debug(""String_Node_Str"" + vm.toString());
    return false;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  _networkMgr.cleanupNics(profile);
  _storageMgr.cleanupVolumes(vm.getId());
  VirtualMachineGuru<T> guru=getVmGuru(vm);
  guru.finalizeExpunge(vm);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
  _usageEventDao.persist(usageEvent);
  return true;
}","@Override public <T extends VMInstanceVO>boolean advanceExpunge(T vm,User caller,Account account) throws ResourceUnavailableException, OperationTimedoutException, ConcurrentOperationException {
  if (vm == null || vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vm);
    }
    return true;
  }
  if (!this.advanceStop(vm,false,caller,account)) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"");
    }
  }
  if (!stateTransitTo(vm,VirtualMachine.Event.ExpungeOperation,vm.getHostId())) {
    s_logger.debug(""String_Node_Str"" + vm.toString());
    return false;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  VirtualMachineProfile<T> profile=new VirtualMachineProfileImpl<T>(vm);
  _networkMgr.cleanupNics(profile);
  _storageMgr.cleanupVolumes(vm.getId());
  VirtualMachineGuru<T> guru=getVmGuru(vm);
  guru.finalizeExpunge(vm);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  return true;
}"
89813,"private List<ServiceOfferingVO> searchServiceOfferingsInternal(Account account,Object name,Object id,Long vmId,Object keyword,Filter searchFilter){
  List<ServiceOfferingVO> sol=new ArrayList<ServiceOfferingVO>();
  DomainVO domainRecord=_domainDao.findById(account.getDomainId());
  boolean includePublicOfferings=true;
  if (domainRecord != null) {
    while (true) {
      SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
      if (keyword != null) {
        includePublicOfferings=false;
        SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
        ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
        ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
      }
 else       if (vmId != null) {
        includePublicOfferings=false;
        UserVmVO vmInstance=_userVmDao.findById(vmId);
        if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
          throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
        }
        if ((account != null) && !isAdmin(account.getType())) {
          if (account.getId() != vmInstance.getAccountId()) {
            throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
          }
        }
        ServiceOfferingVO offering=_offeringsDao.findById(vmInstance.getServiceOfferingId());
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getGuestIpType());
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
      }
      if (id != null) {
        includePublicOfferings=false;
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
      }
      if (name != null) {
        includePublicOfferings=false;
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
      }
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainRecord.getId());
      sol.addAll(_offeringsDao.search(sc,searchFilter));
      if (domainRecord.getParent() != null) {
        domainRecord=_domainDao.findById(domainRecord.getParent());
      }
 else {
        break;
      }
    }
  }
 else {
    s_logger.error(""String_Node_Str"" + account.getAccountName());
    throw new CloudAuthenticationException(""String_Node_Str"" + account.getAccountName());
  }
  if (includePublicOfferings) {
    sol.addAll(_offeringsDao.findPublicServiceOfferings());
  }
  return sol;
}","private List<ServiceOfferingVO> searchServiceOfferingsInternal(Account account,Object name,Object id,Long vmId,Object keyword,Filter searchFilter){
  List<ServiceOfferingVO> sol=new ArrayList<ServiceOfferingVO>();
  DomainVO domainRecord=_domainDao.findById(account.getDomainId());
  boolean includePublicOfferings=true;
  if (domainRecord != null) {
    while (true) {
      SearchCriteria<ServiceOfferingVO> sc=_offeringsDao.createSearchCriteria();
      if (keyword != null) {
        includePublicOfferings=false;
        SearchCriteria<ServiceOfferingVO> ssc=_offeringsDao.createSearchCriteria();
        ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
        ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
      }
 else       if (vmId != null) {
        UserVmVO vmInstance=_userVmDao.findById(vmId);
        if ((vmInstance == null) || (vmInstance.getRemoved() != null)) {
          throw new InvalidParameterValueException(""String_Node_Str"" + vmId);
        }
        if ((account != null) && !isAdmin(account.getType())) {
          if (account.getId() != vmInstance.getAccountId()) {
            throw new PermissionDeniedException(""String_Node_Str"" + vmId + ""String_Node_Str"");
          }
        }
        ServiceOfferingVO offering=_offeringsDao.findById(vmInstance.getServiceOfferingId());
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.NEQ,offering.getId());
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getGuestIpType());
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,offering.getUseLocalStorage());
      }
      if (id != null) {
        includePublicOfferings=false;
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
      }
      if (name != null) {
        includePublicOfferings=false;
        sc.addAnd(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + name + ""String_Node_Str"");
      }
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,false);
      sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainRecord.getId());
      sol.addAll(_offeringsDao.search(sc,searchFilter));
      if (domainRecord.getParent() != null) {
        domainRecord=_domainDao.findById(domainRecord.getParent());
      }
 else {
        break;
      }
    }
  }
 else {
    s_logger.error(""String_Node_Str"" + account.getAccountName());
    throw new CloudAuthenticationException(""String_Node_Str"" + account.getAccountName());
  }
  if (includePublicOfferings) {
    sol.addAll(_offeringsDao.findPublicServiceOfferings());
  }
  return sol;
}"
89814,"private boolean cleanupDomain(Long domainId,Long ownerId) throws ConcurrentOperationException, ResourceUnavailableException {
  boolean success=true;
{
    SearchCriteria<DomainVO> sc=_domainDao.createSearchCriteria();
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainId);
    List<DomainVO> domains=_domainDao.search(sc,null);
    for (    DomainVO domain : domains) {
      success=(success && cleanupDomain(domain.getId(),domain.getAccountId()));
    }
  }
{
    SearchCriteria<AccountVO> sc=_accountDao.createSearchCriteria();
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainId);
    List<AccountVO> accounts=_accountDao.search(sc,null);
    for (    AccountVO account : accounts) {
      success=(success && _accountMgr.cleanupAccount(account,UserContext.current().getCallerUserId(),UserContext.current().getCaller()));
    }
  }
  boolean deleteDomainSuccess=_domainDao.remove(domainId);
  return success && deleteDomainSuccess;
}","private boolean cleanupDomain(Long domainId,Long ownerId) throws ConcurrentOperationException, ResourceUnavailableException {
  boolean success=true;
{
    SearchCriteria<DomainVO> sc=_domainDao.createSearchCriteria();
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainId);
    List<DomainVO> domains=_domainDao.search(sc,null);
    for (    DomainVO domain : domains) {
      success=(success && cleanupDomain(domain.getId(),domain.getAccountId()));
      if (!success) {
        s_logger.warn(""String_Node_Str"" + domain.getId());
      }
    }
  }
{
    SearchCriteria<AccountVO> sc=_accountDao.createSearchCriteria();
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,domainId);
    List<AccountVO> accounts=_accountDao.search(sc,null);
    for (    AccountVO account : accounts) {
      success=(success && _accountMgr.deleteAccount(account,UserContext.current().getCallerUserId(),UserContext.current().getCaller()));
      if (!success) {
        s_logger.warn(""String_Node_Str"" + account.getId() + ""String_Node_Str"");
      }
    }
  }
  boolean deleteDomainSuccess=_domainDao.remove(domainId);
  return success && deleteDomainSuccess;
}"
89815,"@Override public boolean cleanupAccount(AccountVO account,long callerUserId,Account caller) throws ConcurrentOperationException, ResourceUnavailableException {
  long accountId=account.getId();
  boolean accountCleanupNeeded=false;
  try {
    List<InstanceGroupVO> groups=_vmGroupDao.listByAccountId(accountId);
    for (    InstanceGroupVO group : groups) {
      if (!_vmMgr.deleteVmGroup(group.getId())) {
        s_logger.error(""String_Node_Str"" + group.getId());
        accountCleanupNeeded=true;
      }
    }
    boolean success=_snapMgr.deleteSnapshotDirsForAccount(accountId);
    if (success) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
    }
    List<VMTemplateVO> userTemplates=_templateDao.listByAccountId(accountId);
    boolean allTemplatesDeleted=true;
    for (    VMTemplateVO template : userTemplates) {
      try {
        allTemplatesDeleted=_tmpltMgr.delete(callerUserId,template.getId(),null);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ e.getMessage());
        allTemplatesDeleted=false;
      }
    }
    if (!allTemplatesDeleted) {
      accountCleanupNeeded=true;
    }
    List<UserVmVO> vms=_userVmDao.listByAccountId(accountId);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str""+ vms.size());
    }
    for (    UserVmVO vm : vms) {
      if (!_vmMgr.expunge(vm,callerUserId,caller)) {
        s_logger.error(""String_Node_Str"" + vm.getId());
        accountCleanupNeeded=true;
      }
    }
    List<VolumeVO> volumes=_volumeDao.findDetachedByAccount(accountId);
    for (    VolumeVO volume : volumes) {
      if (!volume.getState().equals(Volume.State.Destroy))       _storageMgr.destroyVolume(volume);
    }
    int numRemoved=_securityGroupDao.removeByAccountId(accountId);
    s_logger.info(""String_Node_Str"" + numRemoved + ""String_Node_Str""+ accountId);
    boolean networksDeleted=true;
    s_logger.debug(""String_Node_Str"" + account.getId());
    List<NetworkVO> networks=_networkDao.listByOwner(accountId);
    if (networks != null) {
      for (      NetworkVO network : networks) {
        if (!_networkMgr.deleteNetwork(network.getId())) {
          s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
          accountCleanupNeeded=true;
          networksDeleted=false;
        }
 else {
          s_logger.debug(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
        }
      }
    }
    if (networksDeleted) {
      if (!_configMgr.deleteAccountSpecificVirtualRanges(accountId)) {
        accountCleanupNeeded=true;
      }
 else {
        s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + accountId + ""String_Node_Str"");
      }
    }
    return true;
  }
  finally {
    s_logger.info(""String_Node_Str"" + account.getId() + (accountCleanupNeeded ? ""String_Node_Str"" : ""String_Node_Str""));
    if (accountCleanupNeeded) {
      _accountDao.markForCleanup(accountId);
    }
  }
}","@Override public boolean cleanupAccount(AccountVO account,long callerUserId,Account caller) throws ConcurrentOperationException, ResourceUnavailableException {
  long accountId=account.getId();
  boolean accountCleanupNeeded=false;
  try {
    List<InstanceGroupVO> groups=_vmGroupDao.listByAccountId(accountId);
    for (    InstanceGroupVO group : groups) {
      if (!_vmMgr.deleteVmGroup(group.getId())) {
        s_logger.error(""String_Node_Str"" + group.getId());
        accountCleanupNeeded=true;
      }
    }
    boolean success=_snapMgr.deleteSnapshotDirsForAccount(accountId);
    if (success) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str"");
    }
    List<VMTemplateVO> userTemplates=_templateDao.listByAccountId(accountId);
    boolean allTemplatesDeleted=true;
    for (    VMTemplateVO template : userTemplates) {
      try {
        allTemplatesDeleted=_tmpltMgr.delete(callerUserId,template.getId(),null);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + template.getName() + ""String_Node_Str""+ e.getMessage());
        allTemplatesDeleted=false;
      }
    }
    if (!allTemplatesDeleted) {
      s_logger.warn(""String_Node_Str"" + accountId);
      accountCleanupNeeded=true;
    }
    List<UserVmVO> vms=_userVmDao.listByAccountId(accountId);
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + accountId + ""String_Node_Str""+ vms.size());
    }
    for (    UserVmVO vm : vms) {
      if (!_vmMgr.expunge(vm,callerUserId,caller)) {
        s_logger.error(""String_Node_Str"" + vm.getId());
        accountCleanupNeeded=true;
      }
    }
    List<VolumeVO> volumes=_volumeDao.findDetachedByAccount(accountId);
    for (    VolumeVO volume : volumes) {
      if (!volume.getState().equals(Volume.State.Destroy))       _storageMgr.destroyVolume(volume);
    }
    int numRemoved=_securityGroupDao.removeByAccountId(accountId);
    s_logger.info(""String_Node_Str"" + numRemoved + ""String_Node_Str""+ accountId);
    boolean networksDeleted=true;
    s_logger.debug(""String_Node_Str"" + account.getId());
    List<NetworkVO> networks=_networkDao.listByOwner(accountId);
    if (networks != null) {
      for (      NetworkVO network : networks) {
        if (!_networkMgr.deleteNetwork(network.getId())) {
          s_logger.warn(""String_Node_Str"" + network + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
          accountCleanupNeeded=true;
          networksDeleted=false;
        }
 else {
          s_logger.debug(""String_Node_Str"" + network.getId() + ""String_Node_Str""+ accountId+ ""String_Node_Str"");
        }
      }
    }
    if (networksDeleted) {
      if (!_configMgr.deleteAccountSpecificVirtualRanges(accountId)) {
        accountCleanupNeeded=true;
      }
 else {
        s_logger.debug(""String_Node_Str"" + ""String_Node_Str"" + accountId + ""String_Node_Str"");
      }
    }
    return true;
  }
  finally {
    s_logger.info(""String_Node_Str"" + account.getId() + (accountCleanupNeeded ? ""String_Node_Str"" : ""String_Node_Str""));
    if (accountCleanupNeeded) {
      _accountDao.markForCleanup(accountId);
    }
  }
}"
89816,"@Override public void prepare(VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest) throws StorageUnavailableException, InsufficientStorageCapacityException {
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  List<VolumeVO> recreateVols=new ArrayList<VolumeVO>(vols.size());
  for (  VolumeVO vol : vols) {
    Volume.State state=vol.getState();
    if (state == Volume.State.Ready) {
      if (vol.getPoolId() == null) {
        s_logger.warn(""String_Node_Str"" + vol.getId() + ""String_Node_Str"");
        throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",vol.getPoolId());
      }
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      if (pool.getRemoved() != null || pool.isInMaintenance()) {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ pool+ ""String_Node_Str"");
          }
          recreateVols.add(vol);
        }
 else {
          throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",pool.getId());
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
        }
        vm.addDisk(new VolumeTO(vol,pool));
      }
    }
 else     if (state == Volume.State.Allocated) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
      }
      recreateVols.add(vol);
    }
 else     if (state == Volume.State.Creating && vol.isRecreatable()) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
      }
      recreateVols.add(vol);
    }
 else {
      throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",vol.getPoolId());
    }
  }
  for (  VolumeVO vol : recreateVols) {
    VolumeVO newVol;
    if (vol.getState() == Volume.State.Allocated) {
      vol.setRecreatable(true);
      newVol=vol;
    }
 else {
      newVol=switchVolume(vol);
      newVol.setRecreatable(true);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ vol);
      }
    }
    try {
      _volsDao.update(newVol,Volume.Event.Create);
    }
 catch (    ConcurrentOperationException e) {
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol.getPoolId());
    }
    Pair<VolumeTO,StoragePool> created=createVolume(newVol,_diskOfferingDao.findById(newVol.getDiskOfferingId()),vm,vols,dest);
    if (created == null) {
      Long poolId=newVol.getPoolId();
      newVol.setPoolId(null);
      try {
        _volsDao.update(newVol,Volume.Event.OperationFailed);
      }
 catch (      ConcurrentOperationException e) {
        throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
      }
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,poolId == null ? -1L : poolId);
    }
    created.first().setDeviceId(newVol.getDeviceId().intValue());
    newVol.setStatus(AsyncInstanceCreateStatus.Created);
    newVol.setFolder(created.second().getPath());
    newVol.setPath(created.first().getPath());
    newVol.setSize(created.first().getSize());
    newVol.setPoolType(created.second().getPoolType());
    newVol.setPodId(created.second().getPodId());
    try {
      _volsDao.update(newVol,Volume.Event.OperationSucceeded);
    }
 catch (    ConcurrentOperationException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ created.second());
    }
    vm.addDisk(created.first());
  }
}","@Override public void prepare(VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest) throws StorageUnavailableException, InsufficientStorageCapacityException {
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  List<VolumeVO> recreateVols=new ArrayList<VolumeVO>(vols.size());
  for (  VolumeVO vol : vols) {
    Volume.State state=vol.getState();
    if (state == Volume.State.Ready) {
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      if (pool.getRemoved() != null || pool.isInMaintenance()) {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ pool+ ""String_Node_Str"");
          }
          recreateVols.add(vol);
        }
 else {
          throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",pool.getId());
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
        }
        vm.addDisk(new VolumeTO(vol,pool));
      }
    }
 else     if (state == Volume.State.Allocated) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
      }
      recreateVols.add(vol);
    }
 else     if (state == Volume.State.Creating && vol.isRecreatable()) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
      }
      recreateVols.add(vol);
    }
 else {
      throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",vol.getPoolId() != null ? vol.getPoolId() : null);
    }
  }
  for (  VolumeVO vol : recreateVols) {
    VolumeVO newVol;
    if (vol.getState() == Volume.State.Allocated) {
      vol.setRecreatable(true);
      newVol=vol;
    }
 else {
      newVol=switchVolume(vol);
      newVol.setRecreatable(true);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ vol);
      }
    }
    try {
      _volsDao.update(newVol,Volume.Event.Create);
    }
 catch (    ConcurrentOperationException e) {
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol.getPoolId());
    }
    Pair<VolumeTO,StoragePool> created=createVolume(newVol,_diskOfferingDao.findById(newVol.getDiskOfferingId()),vm,vols,dest);
    if (created == null) {
      Long poolId=newVol.getPoolId();
      newVol.setPoolId(null);
      try {
        _volsDao.update(newVol,Volume.Event.OperationFailed);
      }
 catch (      ConcurrentOperationException e) {
        throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
      }
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,poolId == null ? -1L : poolId);
    }
    created.first().setDeviceId(newVol.getDeviceId().intValue());
    newVol.setStatus(AsyncInstanceCreateStatus.Created);
    newVol.setFolder(created.second().getPath());
    newVol.setPath(created.first().getPath());
    newVol.setSize(created.first().getSize());
    newVol.setPoolType(created.second().getPoolType());
    newVol.setPodId(created.second().getPodId());
    try {
      _volsDao.update(newVol,Volume.Event.OperationSucceeded);
    }
 catch (    ConcurrentOperationException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ created.second());
    }
    vm.addDisk(created.first());
  }
}"
89817,"@Override public StartupCommand[] initialize() throws IllegalArgumentException {
  Connection conn=getConnection();
  setupServer(conn);
  if (!getHostInfo(conn)) {
    s_logger.warn(""String_Node_Str"" + _host.ip);
    return null;
  }
  StartupRoutingCommand cmd=new StartupRoutingCommand();
  fillHostInfo(conn,cmd);
  Map<String,State> changes=null;
synchronized (_vms) {
    _vms.clear();
    changes=sync(conn);
  }
  cmd.setHypervisorType(HypervisorType.XenServer);
  cmd.setChanges(changes);
  cmd.setCluster(_cluster);
  StartupStorageCommand sscmd=initializeLocalSR(conn);
  if (sscmd != null) {
    return new StartupCommand[]{cmd,sscmd};
  }
  return new StartupCommand[]{cmd};
}","@Override public StartupCommand[] initialize() throws IllegalArgumentException {
  Connection conn=getConnection();
  setupServer(conn);
  if (!getHostInfo(conn)) {
    s_logger.warn(""String_Node_Str"" + _host.ip);
    return null;
  }
  try {
    cleanupHaltedVms(conn);
  }
 catch (  XenAPIException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
catch (  XmlRpcException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
  StartupRoutingCommand cmd=new StartupRoutingCommand();
  fillHostInfo(conn,cmd);
  Map<String,State> changes=null;
synchronized (_vms) {
    _vms.clear();
    changes=sync(conn);
  }
  cmd.setHypervisorType(HypervisorType.XenServer);
  cmd.setChanges(changes);
  cmd.setCluster(_cluster);
  StartupStorageCommand sscmd=initializeLocalSR(conn);
  if (sscmd != null) {
    return new StartupCommand[]{cmd,sscmd};
  }
  return new StartupCommand[]{cmd};
}"
89818,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String overProvisioningFactorStr=configs.get(""String_Node_Str"");
  if (overProvisioningFactorStr != null) {
    _overProvisioningFactor=Integer.parseInt(overProvisioningFactorStr);
  }
  _retry=NumbersUtil.parseInt(configs.get(Config.StartRetry.key()),10);
  _pingInterval=NumbersUtil.parseInt(configs.get(""String_Node_Str""),60);
  _hostRetry=NumbersUtil.parseInt(configs.get(""String_Node_Str""),2);
  _storagePoolAcquisitionWaitSeconds=NumbersUtil.parseInt(configs.get(""String_Node_Str""),1800);
  s_logger.info(""String_Node_Str"" + _storagePoolAcquisitionWaitSeconds + ""String_Node_Str"");
  _agentMgr.registerForHostEvents(new StoragePoolMonitor(this,_hostDao,_storagePoolDao),true,false,true);
  String storageCleanupEnabled=configs.get(""String_Node_Str"");
  _storageCleanupEnabled=(storageCleanupEnabled == null) ? true : Boolean.parseBoolean(storageCleanupEnabled);
  String time=configs.get(""String_Node_Str"");
  _storageCleanupInterval=NumbersUtil.parseInt(time,86400);
  String workers=configs.get(""String_Node_Str"");
  int wrks=NumbersUtil.parseInt(workers,10);
  _executor=Executors.newScheduledThreadPool(wrks,new NamedThreadFactory(""String_Node_Str""));
  boolean localStorage=Boolean.parseBoolean(configs.get(Config.UseLocalStorage.key()));
  if (localStorage) {
    _agentMgr.registerForHostEvents(ComponentLocator.inject(LocalStoragePoolListener.class),true,false,false);
  }
  String maxVolumeSizeInGbString=configDao.getValue(""String_Node_Str"");
  _maxVolumeSizeInGb=NumbersUtil.parseInt(maxVolumeSizeInGbString,2000);
  PoolsUsedByVmSearch=_storagePoolDao.createSearchBuilder();
  SearchBuilder<VolumeVO> volSearch=_volsDao.createSearchBuilder();
  PoolsUsedByVmSearch.join(""String_Node_Str"",volSearch,volSearch.entity().getPoolId(),PoolsUsedByVmSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  volSearch.and(""String_Node_Str"",volSearch.entity().getInstanceId(),SearchCriteria.Op.EQ);
  volSearch.and(""String_Node_Str"",volSearch.entity().getStatus(),SearchCriteria.Op.EQ);
  volSearch.done();
  PoolsUsedByVmSearch.done();
  HostTemplateStatesSearch=_vmTemplateHostDao.createSearchBuilder();
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getTemplateId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> HostSearch=_hostDao.createSearchBuilder();
  HostSearch.and(""String_Node_Str"",HostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.join(""String_Node_Str"",HostSearch,HostSearch.entity().getId(),HostTemplateStatesSearch.entity().getHostId(),JoinBuilder.JoinType.INNER);
  HostSearch.done();
  HostTemplateStatesSearch.done();
  _serverId=((ManagementServer)ComponentLocator.getComponent(ManagementServer.Name)).getId();
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    s_logger.error(""String_Node_Str"");
    return false;
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  String overProvisioningFactorStr=configs.get(""String_Node_Str"");
  if (overProvisioningFactorStr != null) {
    _overProvisioningFactor=Integer.parseInt(overProvisioningFactorStr);
  }
  _retry=NumbersUtil.parseInt(configs.get(Config.StartRetry.key()),10);
  _pingInterval=NumbersUtil.parseInt(configs.get(""String_Node_Str""),60);
  _hostRetry=NumbersUtil.parseInt(configs.get(""String_Node_Str""),2);
  _storagePoolAcquisitionWaitSeconds=NumbersUtil.parseInt(configs.get(""String_Node_Str""),1800);
  s_logger.info(""String_Node_Str"" + _storagePoolAcquisitionWaitSeconds + ""String_Node_Str"");
  _agentMgr.registerForHostEvents(new StoragePoolMonitor(this,_hostDao,_storagePoolDao),true,false,true);
  String storageCleanupEnabled=configs.get(""String_Node_Str"");
  _storageCleanupEnabled=(storageCleanupEnabled == null) ? true : Boolean.parseBoolean(storageCleanupEnabled);
  String time=configs.get(""String_Node_Str"");
  _storageCleanupInterval=NumbersUtil.parseInt(time,86400);
  String workers=configs.get(""String_Node_Str"");
  int wrks=NumbersUtil.parseInt(workers,10);
  _executor=Executors.newScheduledThreadPool(wrks,new NamedThreadFactory(""String_Node_Str""));
  boolean localStorage=Boolean.parseBoolean(configs.get(Config.UseLocalStorage.key()));
  if (localStorage) {
    _agentMgr.registerForHostEvents(ComponentLocator.inject(LocalStoragePoolListener.class),true,false,false);
  }
  String maxVolumeSizeInGbString=configDao.getValue(""String_Node_Str"");
  _maxVolumeSizeInGb=NumbersUtil.parseInt(maxVolumeSizeInGbString,2000);
  PoolsUsedByVmSearch=_storagePoolDao.createSearchBuilder();
  SearchBuilder<VolumeVO> volSearch=_volsDao.createSearchBuilder();
  PoolsUsedByVmSearch.join(""String_Node_Str"",volSearch,volSearch.entity().getPoolId(),PoolsUsedByVmSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  volSearch.and(""String_Node_Str"",volSearch.entity().getInstanceId(),SearchCriteria.Op.EQ);
  volSearch.and(""String_Node_Str"",volSearch.entity().getStatus(),SearchCriteria.Op.EQ);
  volSearch.done();
  PoolsUsedByVmSearch.done();
  HostTemplateStatesSearch=_vmTemplateHostDao.createSearchBuilder();
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getTemplateId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.and(""String_Node_Str"",HostTemplateStatesSearch.entity().getDownloadState(),SearchCriteria.Op.EQ);
  SearchBuilder<HostVO> HostSearch=_hostDao.createSearchBuilder();
  HostSearch.and(""String_Node_Str"",HostSearch.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  HostTemplateStatesSearch.join(""String_Node_Str"",HostSearch,HostSearch.entity().getId(),HostTemplateStatesSearch.entity().getHostId(),JoinBuilder.JoinType.INNER);
  HostSearch.done();
  HostTemplateStatesSearch.done();
  _serverId=((ManagementServer)ComponentLocator.getComponent(ManagementServer.Name)).getId();
  UpHostsInPoolSearch=_storagePoolHostDao.createSearchBuilder(Long.class);
  SearchBuilder<HostVO> hostSearch=_hostDao.createSearchBuilder();
  hostSearch.and(""String_Node_Str"",hostSearch.entity().getStatus(),Op.EQ);
  UpHostsInPoolSearch.join(""String_Node_Str"",hostSearch,hostSearch.entity().getId(),UpHostsInPoolSearch.entity().getHostId(),JoinType.INNER);
  UpHostsInPoolSearch.and(""String_Node_Str"",UpHostsInPoolSearch.entity().getPoolId(),Op.EQ);
  UpHostsInPoolSearch.done();
  return true;
}"
89819,"public SavePasswordCommand(String password,String vmIpAddress,String routerPrivateIpAddress,String vmName){
  this.password=password;
  this.vmIpAddress=vmIpAddress;
  this.routerPrivateIpAddress=routerPrivateIpAddress;
  this.vmName=vmName;
}","public SavePasswordCommand(String password,String vmIpAddress,String vmName){
  this.password=password;
  this.vmIpAddress=vmIpAddress;
  this.vmName=vmName;
}"
89820,"@Override public void execute() throws ResourceUnavailableException, InsufficientCapacityException {
  password=Long.toHexString(_rand.nextLong());
  UserVm result=_userVmService.resetVMPassword(this,password);
  if (result != null) {
    UserVmResponse response=_responseGenerator.createUserVmResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}","@Override public void execute() throws ResourceUnavailableException, InsufficientCapacityException {
  password=_mgr.generateRandomPassword();
  UserVm result=_userVmService.resetVMPassword(this,password);
  if (result != null) {
    UserVmResponse response=_responseGenerator.createUserVmResponse(result);
    response.setResponseName(getCommandName());
    this.setResponseObject(response);
  }
 else {
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
  }
}"
89821,"void setParameter(String name,Object value);","void setParameter(Param name,Object value);"
89822,"/** 
 * @return parameter specific for this type of virtual machine.
 */
Object getParameter(String name);","/** 
 * @return parameter specific for this type of virtual machine.
 */
Object getParameter(Param name);"
89823,"@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<ConsoleProxyVO> profile,DeployDestination dest,ReservationContext context){
  StringBuilder buf=profile.getBootArgsBuilder();
  buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(_mgmt_host);
  buf.append(""String_Node_Str"").append(_mgmt_port);
  buf.append(""String_Node_Str"").append(profile.getVirtualMachine().getName());
  if (_sslEnabled) {
    buf.append(""String_Node_Str"");
  }
  buf.append(""String_Node_Str"").append(dest.getDataCenter().getId());
  buf.append(""String_Node_Str"").append(dest.getPod().getId());
  buf.append(""String_Node_Str"").append(profile.getId());
  buf.append(""String_Node_Str"").append(profile.getId());
  if (_disable_rp_filter) {
    buf.append(""String_Node_Str"");
  }
  boolean externalDhcp=false;
  String externalDhcpStr=_configDao.getValue(""String_Node_Str"");
  if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(""String_Node_Str"")) {
    externalDhcp=true;
  }
  NicProfile controlNic=null;
  NicProfile managementNic=null;
  for (  NicProfile nic : profile.getNics()) {
    int deviceId=nic.getDeviceId();
    if (nic.getIp4Address() == null) {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getIp4Address());
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    }
    if (nic.isDefaultNic()) {
      buf.append(""String_Node_Str"").append(nic.getGateway());
      buf.append(""String_Node_Str"").append(nic.getDns1());
      if (nic.getDns2() != null) {
        buf.append(""String_Node_Str"").append(nic.getDns2());
      }
    }
    if (nic.getTrafficType() == TrafficType.Management) {
      buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
      managementNic=nic;
    }
 else     if (nic.getTrafficType() == TrafficType.Control) {
      if (nic.getIp4Address() != null) {
        controlNic=nic;
      }
    }
  }
  if (externalDhcp) {
    buf.append(""String_Node_Str"");
  }
  if (controlNic == null) {
    assert(managementNic != null);
    controlNic=managementNic;
  }
  String bootArgs=buf.toString();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + profile + ""String_Node_Str""+ bootArgs);
  }
  profile.setParameter(""String_Node_Str"",controlNic);
  return true;
}","@Override public boolean finalizeVirtualMachineProfile(VirtualMachineProfile<ConsoleProxyVO> profile,DeployDestination dest,ReservationContext context){
  StringBuilder buf=profile.getBootArgsBuilder();
  buf.append(""String_Node_Str"");
  buf.append(""String_Node_Str"").append(_mgmt_host);
  buf.append(""String_Node_Str"").append(_mgmt_port);
  buf.append(""String_Node_Str"").append(profile.getVirtualMachine().getName());
  if (_sslEnabled) {
    buf.append(""String_Node_Str"");
  }
  buf.append(""String_Node_Str"").append(dest.getDataCenter().getId());
  buf.append(""String_Node_Str"").append(dest.getPod().getId());
  buf.append(""String_Node_Str"").append(profile.getId());
  buf.append(""String_Node_Str"").append(profile.getId());
  if (_disable_rp_filter) {
    buf.append(""String_Node_Str"");
  }
  boolean externalDhcp=false;
  String externalDhcpStr=_configDao.getValue(""String_Node_Str"");
  if (externalDhcpStr != null && externalDhcpStr.equalsIgnoreCase(""String_Node_Str"")) {
    externalDhcp=true;
  }
  NicProfile controlNic=null;
  NicProfile managementNic=null;
  for (  NicProfile nic : profile.getNics()) {
    int deviceId=nic.getDeviceId();
    if (nic.getIp4Address() == null) {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(""String_Node_Str"");
    }
 else {
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getIp4Address());
      buf.append(""String_Node_Str"").append(deviceId).append(""String_Node_Str"").append(nic.getNetmask());
    }
    if (nic.isDefaultNic()) {
      buf.append(""String_Node_Str"").append(nic.getGateway());
      buf.append(""String_Node_Str"").append(nic.getDns1());
      if (nic.getDns2() != null) {
        buf.append(""String_Node_Str"").append(nic.getDns2());
      }
    }
    if (nic.getTrafficType() == TrafficType.Management) {
      buf.append(""String_Node_Str"").append(dest.getPod().getGateway());
      managementNic=nic;
    }
 else     if (nic.getTrafficType() == TrafficType.Control) {
      if (nic.getIp4Address() != null) {
        controlNic=nic;
      }
    }
  }
  if (externalDhcp) {
    buf.append(""String_Node_Str"");
  }
  if (controlNic == null) {
    assert(managementNic != null);
    controlNic=managementNic;
  }
  String bootArgs=buf.toString();
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + profile + ""String_Node_Str""+ bootArgs);
  }
  profile.setParameter(VirtualMachineProfile.Param.ControlNic,controlNic);
  return true;
}"
89824,"@Override public boolean finalizeDeployment(Commands cmds,VirtualMachineProfile<ConsoleProxyVO> profile,DeployDestination dest,ReservationContext context){
  NicProfile controlNic=(NicProfile)profile.getParameter(""String_Node_Str"");
  CheckSshCommand check=new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20);
  cmds.addCommand(""String_Node_Str"",check);
  ConsoleProxyVO proxy=profile.getVirtualMachine();
  DataCenter dc=dest.getDataCenter();
  List<NicVO> nics=_nicDao.listBy(proxy.getId());
  for (  NicVO nic : nics) {
    NetworkVO network=_networkDao.findById(nic.getNetworkId());
    if ((network.getTrafficType() == TrafficType.Public && dc.getNetworkType() == NetworkType.Advanced) || (network.getTrafficType() == TrafficType.Guest && dc.getNetworkType() == NetworkType.Basic)) {
      proxy.setPublicIpAddress(nic.getIp4Address());
      proxy.setPublicNetmask(nic.getNetmask());
      proxy.setPublicMacAddress(nic.getMacAddress());
    }
 else     if (network.getTrafficType() == TrafficType.Management) {
      proxy.setPrivateIpAddress(nic.getIp4Address());
      proxy.setPrivateMacAddress(nic.getMacAddress());
    }
  }
  _consoleProxyDao.update(proxy.getId(),proxy);
  return true;
}","@Override public boolean finalizeDeployment(Commands cmds,VirtualMachineProfile<ConsoleProxyVO> profile,DeployDestination dest,ReservationContext context){
  NicProfile controlNic=(NicProfile)profile.getParameter(VirtualMachineProfile.Param.ControlNic);
  CheckSshCommand check=new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20);
  cmds.addCommand(""String_Node_Str"",check);
  ConsoleProxyVO proxy=profile.getVirtualMachine();
  DataCenter dc=dest.getDataCenter();
  List<NicVO> nics=_nicDao.listBy(proxy.getId());
  for (  NicVO nic : nics) {
    NetworkVO network=_networkDao.findById(nic.getNetworkId());
    if ((network.getTrafficType() == TrafficType.Public && dc.getNetworkType() == NetworkType.Advanced) || (network.getTrafficType() == TrafficType.Guest && dc.getNetworkType() == NetworkType.Basic)) {
      proxy.setPublicIpAddress(nic.getIp4Address());
      proxy.setPublicNetmask(nic.getNetmask());
      proxy.setPublicMacAddress(nic.getMacAddress());
    }
 else     if (network.getTrafficType() == TrafficType.Management) {
      proxy.setPrivateIpAddress(nic.getIp4Address());
      proxy.setPrivateMacAddress(nic.getMacAddress());
    }
  }
  _consoleProxyDao.update(proxy.getId(),proxy);
  return true;
}"
89825,"protected Map<? extends ServerResource,Map<String,String>> createNfsSecondaryStorageResource(long dcId,Long podId,URI uri){
  if (_useServiceVM) {
    return createDummySecondaryStorageResource(dcId,podId,uri);
  }
  String mountStr=NfsUtils.uri2Mount(uri);
  Script script=new Script(true,""String_Node_Str"",_timeout,s_logger);
  String mntPoint=null;
  File file=null;
  do {
    mntPoint=_mountParent + File.separator + Integer.toHexString(_random.nextInt(Integer.MAX_VALUE));
    file=new File(mntPoint);
  }
 while (file.exists());
  if (!file.mkdirs()) {
    s_logger.warn(""String_Node_Str"" + mntPoint);
    return null;
  }
  script.add(mountStr,mntPoint);
  String result=script.execute();
  if (result != null && !result.contains(""String_Node_Str"")) {
    s_logger.warn(""String_Node_Str"" + uri.toString() + ""String_Node_Str""+ result);
    file.delete();
    return null;
  }
  script=new Script(true,""String_Node_Str"",0,s_logger);
  script.add(mntPoint);
  script.execute();
  file.delete();
  Map<NfsSecondaryStorageResource,Map<String,String>> srs=new HashMap<NfsSecondaryStorageResource,Map<String,String>>();
  NfsSecondaryStorageResource storage=new NfsSecondaryStorageResource();
  Map<String,String> details=new HashMap<String,String>();
  details.put(""String_Node_Str"",mountStr);
  details.put(""String_Node_Str"",uri.toString());
  details.put(""String_Node_Str"",_mountParent);
  Map<String,Object> params=new HashMap<String,Object>();
  params.putAll(details);
  params.put(""String_Node_Str"",Long.toString(dcId));
  if (podId != null) {
    params.put(""String_Node_Str"",podId.toString());
  }
  params.put(""String_Node_Str"",uri.toString());
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",_configDao.getValue(""String_Node_Str""));
  try {
    storage.configure(""String_Node_Str"",params);
  }
 catch (  ConfigurationException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
  srs.put(storage,details);
  return srs;
}","protected Map<? extends ServerResource,Map<String,String>> createNfsSecondaryStorageResource(long dcId,Long podId,URI uri){
  String mountStr=NfsUtils.uri2Mount(uri);
  Script script=new Script(true,""String_Node_Str"",_timeout,s_logger);
  String mntPoint=null;
  File file=null;
  do {
    mntPoint=_mountParent + File.separator + Integer.toHexString(_random.nextInt(Integer.MAX_VALUE));
    file=new File(mntPoint);
  }
 while (file.exists());
  if (!file.mkdirs()) {
    s_logger.warn(""String_Node_Str"" + mntPoint);
    return null;
  }
  script.add(mountStr,mntPoint);
  String result=script.execute();
  if (result != null && !result.contains(""String_Node_Str"")) {
    s_logger.warn(""String_Node_Str"" + uri.toString() + ""String_Node_Str""+ result);
    file.delete();
    return null;
  }
  script=new Script(true,""String_Node_Str"",0,s_logger);
  script.add(mntPoint);
  script.execute();
  file.delete();
  if (_useServiceVM) {
    return createDummySecondaryStorageResource(dcId,podId,uri);
  }
  Map<NfsSecondaryStorageResource,Map<String,String>> srs=new HashMap<NfsSecondaryStorageResource,Map<String,String>>();
  NfsSecondaryStorageResource storage=new NfsSecondaryStorageResource();
  Map<String,String> details=new HashMap<String,String>();
  details.put(""String_Node_Str"",mountStr);
  details.put(""String_Node_Str"",uri.toString());
  details.put(""String_Node_Str"",_mountParent);
  Map<String,Object> params=new HashMap<String,Object>();
  params.putAll(details);
  params.put(""String_Node_Str"",Long.toString(dcId));
  if (podId != null) {
    params.put(""String_Node_Str"",podId.toString());
  }
  params.put(""String_Node_Str"",uri.toString());
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",_configDao.getValue(""String_Node_Str""));
  try {
    storage.configure(""String_Node_Str"",params);
  }
 catch (  ConfigurationException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
  srs.put(storage,details);
  return srs;
}"
89826,"protected Map<? extends ServerResource,Map<String,String>> createNfsSecondaryStorageResource(long dcId,Long podId,URI uri){
  String mountStr=NfsUtils.uri2Mount(uri);
  Script script=new Script(true,""String_Node_Str"",_timeout,s_logger);
  String mntPoint=null;
  File file=null;
  do {
    mntPoint=_mountParent + File.separator + Integer.toHexString(_random.nextInt(Integer.MAX_VALUE));
    file=new File(mntPoint);
  }
 while (file.exists());
  if (!file.mkdirs()) {
    s_logger.warn(""String_Node_Str"" + mntPoint);
    return null;
  }
  script.add(mountStr,mntPoint);
  String result=script.execute();
  if (result != null && !result.contains(""String_Node_Str"")) {
    s_logger.warn(""String_Node_Str"" + uri.toString() + ""String_Node_Str""+ result);
    file.delete();
    return null;
  }
  script=new Script(true,""String_Node_Str"",0,s_logger);
  script.add(mntPoint);
  script.execute();
  file.delete();
  if (_useServiceVM) {
    return createDummySecondaryStorageResource(dcId,podId,uri);
  }
  Map<NfsSecondaryStorageResource,Map<String,String>> srs=new HashMap<NfsSecondaryStorageResource,Map<String,String>>();
  NfsSecondaryStorageResource storage=new NfsSecondaryStorageResource();
  Map<String,String> details=new HashMap<String,String>();
  details.put(""String_Node_Str"",mountStr);
  details.put(""String_Node_Str"",uri.toString());
  details.put(""String_Node_Str"",_mountParent);
  Map<String,Object> params=new HashMap<String,Object>();
  params.putAll(details);
  params.put(""String_Node_Str"",Long.toString(dcId));
  if (podId != null) {
    params.put(""String_Node_Str"",podId.toString());
  }
  params.put(""String_Node_Str"",uri.toString());
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",_configDao.getValue(""String_Node_Str""));
  try {
    storage.configure(""String_Node_Str"",params);
  }
 catch (  ConfigurationException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
  srs.put(storage,details);
  return srs;
}","protected Map<? extends ServerResource,Map<String,String>> createNfsSecondaryStorageResource(long dcId,Long podId,URI uri){
  if (_useServiceVM) {
    return createDummySecondaryStorageResource(dcId,podId,uri);
  }
  String mountStr=NfsUtils.uri2Mount(uri);
  Script script=new Script(true,""String_Node_Str"",_timeout,s_logger);
  String mntPoint=null;
  File file=null;
  do {
    mntPoint=_mountParent + File.separator + Integer.toHexString(_random.nextInt(Integer.MAX_VALUE));
    file=new File(mntPoint);
  }
 while (file.exists());
  if (!file.mkdirs()) {
    s_logger.warn(""String_Node_Str"" + mntPoint);
    return null;
  }
  script.add(mountStr,mntPoint);
  String result=script.execute();
  if (result != null && !result.contains(""String_Node_Str"")) {
    s_logger.warn(""String_Node_Str"" + uri.toString() + ""String_Node_Str""+ result);
    file.delete();
    return null;
  }
  script=new Script(true,""String_Node_Str"",0,s_logger);
  script.add(mntPoint);
  script.execute();
  file.delete();
  Map<NfsSecondaryStorageResource,Map<String,String>> srs=new HashMap<NfsSecondaryStorageResource,Map<String,String>>();
  NfsSecondaryStorageResource storage=new NfsSecondaryStorageResource();
  Map<String,String> details=new HashMap<String,String>();
  details.put(""String_Node_Str"",mountStr);
  details.put(""String_Node_Str"",uri.toString());
  details.put(""String_Node_Str"",_mountParent);
  Map<String,Object> params=new HashMap<String,Object>();
  params.putAll(details);
  params.put(""String_Node_Str"",Long.toString(dcId));
  if (podId != null) {
    params.put(""String_Node_Str"",podId.toString());
  }
  params.put(""String_Node_Str"",uri.toString());
  params.put(""String_Node_Str"",""String_Node_Str"");
  params.put(""String_Node_Str"",_configDao.getValue(""String_Node_Str""));
  try {
    storage.configure(""String_Node_Str"",params);
  }
 catch (  ConfigurationException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
  srs.put(storage,details);
  return srs;
}"
89827,"@Override public void execute(){
  try {
    Vlan result=_configService.createVlanAndPublicIpRange(this);
    if (result != null) {
      VlanIpRangeResponse response=_responseGenerator.createVlanIpRangeResponse(result);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
catch (  InsufficientCapacityException ex) {
    s_logger.info(ex);
    throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
}","@Override public void execute() throws ResourceUnavailableException {
  try {
    Vlan result=_configService.createVlanAndPublicIpRange(this);
    if (result != null) {
      VlanIpRangeResponse response=_responseGenerator.createVlanIpRangeResponse(result);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
 catch (  ConcurrentOperationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,ex.getMessage());
  }
catch (  InsufficientCapacityException ex) {
    s_logger.info(ex);
    throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,ex.getMessage());
  }
}"
89828,"/** 
 * Adds a VLAN to the database, along with an IP address range. Can add three types of VLANs: (1) zone-wide VLANs on the virtual public network (2) pod-wide direct attached VLANs (3) account-specific direct attached VLANs
 * @param userId
 * @param vlanType - either ""DomR"" (VLAN for a virtual public network) or ""DirectAttached"" (VLAN for IPs that will be directly attached to UserVMs)
 * @param zoneId
 * @param accountId
 * @param podId
 * @param add
 * @param vlanId
 * @param gateway
 * @param startIP
 * @param endIP
 * @throws 
     * @return The new Vlan object
 */
Vlan createVlanAndPublicIpRange(CreateVlanIpRangeCmd cmd) throws InsufficientCapacityException, ConcurrentOperationException, InvalidParameterValueException ;","/** 
 * Adds a VLAN to the database, along with an IP address range. Can add three types of VLANs: (1) zone-wide VLANs on the virtual public network (2) pod-wide direct attached VLANs (3) account-specific direct attached VLANs
 * @param userId
 * @param vlanType - either ""DomR"" (VLAN for a virtual public network) or ""DirectAttached"" (VLAN for IPs that will be directly attached to UserVMs)
 * @param zoneId
 * @param accountId
 * @param podId
 * @param add
 * @param vlanId
 * @param gateway
 * @param startIP
 * @param endIP
 * @throws 
     * @return The new Vlan object
 */
Vlan createVlanAndPublicIpRange(CreateVlanIpRangeCmd cmd) throws InsufficientCapacityException, ConcurrentOperationException, InvalidParameterValueException, ResourceUnavailableException ;"
89829,"Vlan createVlanAndPublicIpRange(Long userId,Long zoneId,Long podId,String startIP,String endIP,String vlanGateway,String vlanNetmask,boolean forVirtualNetwork,String vlanId,Account account,Long networkId) throws InsufficientCapacityException, ConcurrentOperationException, InvalidParameterValueException ;","Vlan createVlanAndPublicIpRange(Long userId,Long zoneId,Long podId,String startIP,String endIP,String vlanGateway,String vlanNetmask,boolean forVirtualNetwork,String vlanId,Account account,Long networkId) throws InsufficientCapacityException, ConcurrentOperationException, InvalidParameterValueException, ResourceUnavailableException ;"
89830,"@Override public Vlan createVlanAndPublicIpRange(Long userId,Long zoneId,Long podId,String startIP,String endIP,String vlanGateway,String vlanNetmask,boolean forVirtualNetwork,String vlanId,Account account,Long networkId) throws InsufficientCapacityException, ConcurrentOperationException, InvalidParameterValueException {
  if (podId != null && ((_podDao.findById(podId)) == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (podId != null && _podDao.findById(podId).getDataCenterId() != zoneId) {
    throw new InvalidParameterValueException(""String_Node_Str"" + podId + ""String_Node_Str""+ zoneId);
  }
  if (vlanId == null) {
    vlanId=Vlan.UNTAGGED;
  }
  DataCenterVO zone;
  if (zoneId == null || ((zone=_zoneDao.findById(zoneId)) == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (zone.getNetworkType() == NetworkType.Advanced && vlanId.equals(Vlan.UNTAGGED) && !forVirtualNetwork) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId() + ""String_Node_Str""+ zone.getNetworkType());
  }
 else   if (zone.getNetworkType() == NetworkType.Basic && !(vlanId.equals(Vlan.UNTAGGED) && !forVirtualNetwork)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId() + ""String_Node_Str""+ zone.getNetworkType());
  }
  if (zone.getVnet() == null && forVirtualNetwork) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId() + ""String_Node_Str"");
  }
  VlanType vlanType=forVirtualNetwork ? VlanType.VirtualNetwork : VlanType.DirectAttached;
  String hypervisorType=_configDao.getValue(""String_Node_Str"");
  if (hypervisorType.equalsIgnoreCase(""String_Node_Str"")) {
    if (vlanType.toString().equalsIgnoreCase(""String_Node_Str"") && vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
      if (_configDao.getValue(""String_Node_Str"") == null || _configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
    }
  }
  checkAccess(account,zone);
  boolean associateIpRangeToAccount=false;
  if (vlanType.equals(VlanType.VirtualNetwork)) {
    if (account != null) {
      long ipResourceLimit=_accountMgr.findCorrectResourceLimit((AccountVO)account,ResourceType.public_ip);
      long accountIpRange=NetUtils.ip2Long(endIP) - NetUtils.ip2Long(startIP) + 1;
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + ipResourceLimit + ""String_Node_Str""+ accountIpRange);
      }
      if (ipResourceLimit != -1 && accountIpRange > ipResourceLimit) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ipResourceLimit + ""String_Node_Str""+ accountIpRange+ ""String_Node_Str"");
      }
      associateIpRangeToAccount=true;
    }
  }
 else   if (vlanType.equals(VlanType.DirectAttached)) {
    if (account != null) {
      if (vlanId.equals(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      List<HostPodVO> podsInZone=_podDao.listByDataCenterId(zone.getId());
      for (      HostPodVO pod : podsInZone) {
        if (_podVlanMapDao.listPodVlanMapsByPod(pod.getId()).size() > 0) {
          throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
        }
      }
    }
 else     if (podId != null) {
      if (!vlanId.equals(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      List<AccountVlanMapVO> accountVlanMaps=_accountVlanMapDao.listAllIncludingRemoved();
      for (      AccountVlanMapVO accountVlanMap : accountVlanMaps) {
        VlanVO vlan=_vlanDao.findById(accountVlanMap.getVlanDbId());
        if (vlan.getDataCenterId() == zone.getId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
        }
      }
    }
  }
 else {
    throw new InvalidParameterValueException(""String_Node_Str"" + VlanType.values().toString());
  }
  if (!NetUtils.isValidIp(vlanGateway)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!NetUtils.isValidIp(vlanNetmask)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String newVlanSubnet=NetUtils.getSubNet(vlanGateway,vlanNetmask);
  String guestNetworkCidr=zone.getGuestNetworkCidr();
  if (guestNetworkCidr != null) {
    String[] cidrPair=guestNetworkCidr.split(""String_Node_Str"");
    String guestIpNetwork=NetUtils.getIpRangeStartIpFromCidr(cidrPair[0],Long.parseLong(cidrPair[1]));
    long guestCidrSize=Long.parseLong(cidrPair[1]);
    long vlanCidrSize=NetUtils.getCidrSize(vlanNetmask);
    long cidrSizeToUse=-1;
    if (vlanCidrSize < guestCidrSize) {
      cidrSizeToUse=vlanCidrSize;
    }
 else {
      cidrSizeToUse=guestCidrSize;
    }
    String guestSubnet=NetUtils.getCidrSubNet(guestIpNetwork,cidrSizeToUse);
    if (newVlanSubnet.equals(guestSubnet)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
    }
  }
  checkPublicIpRangeErrors(zoneId,vlanId,vlanGateway,vlanNetmask,startIP,endIP);
  List<VlanVO> vlans=_vlanDao.listByZone(zone.getId());
  for (  VlanVO vlan : vlans) {
    String otherVlanGateway=vlan.getVlanGateway();
    String otherVlanSubnet=NetUtils.getSubNet(vlan.getVlanGateway(),vlan.getVlanNetmask());
    String[] otherVlanIpRange=vlan.getIpRange().split(""String_Node_Str"");
    String otherVlanStartIP=otherVlanIpRange[0];
    String otherVlanEndIP=null;
    if (otherVlanIpRange.length > 1) {
      otherVlanEndIP=otherVlanIpRange[1];
    }
    if (!vlanId.equals(vlan.getVlanTag()) && newVlanSubnet.equals(otherVlanSubnet)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanTag() + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str"");
    }
    if (vlanId.equals(vlan.getVlanTag()) && newVlanSubnet.equals(otherVlanSubnet)) {
      if (NetUtils.ipRangesOverlap(startIP,endIP,otherVlanStartIP,otherVlanEndIP)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanTag() + ""String_Node_Str"");
      }
      if (!vlanGateway.equals(otherVlanGateway)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanTag() + ""String_Node_Str""+ otherVlanGateway+ ""String_Node_Str"");
      }
    }
  }
  if (_zoneDao.findVnet(zoneId,vlanId).size() > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vlanId + ""String_Node_Str""+ zone.getName());
  }
  if (zone.getNetworkType() == NetworkType.Basic && vlanId.equalsIgnoreCase(Vlan.UNTAGGED) && podId != null) {
    List<VlanVO> podVlans=_vlanDao.listVlansForPodByType(podId,VlanType.DirectAttached);
    if (podVlans != null && !podVlans.isEmpty()) {
      VlanVO podVlan=podVlans.get(0);
      if (!podVlan.getVlanNetmask().equals(vlanNetmask)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + podVlan.getId() + ""String_Node_Str""+ podId);
      }
 else       if (!podVlan.getVlanGateway().equals(vlanGateway)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + podVlan.getId() + ""String_Node_Str""+ podId);
      }
    }
  }
  String ipRange=startIP;
  if (endIP != null) {
    ipRange+=""String_Node_Str"" + endIP;
  }
  VlanVO vlan=new VlanVO(vlanType,vlanId,vlanGateway,vlanNetmask,zone.getId(),ipRange,networkId);
  vlan=_vlanDao.persist(vlan);
  if (account != null && vlanType.equals(VlanType.VirtualNetwork)) {
    if (!savePublicIPRangeForAccount(startIP,endIP,zoneId,vlan.getId(),account.getId(),account.getDomainId())) {
      deletePublicIPRange(vlan.getId());
      _vlanDao.expunge(vlan.getId());
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
 else   if (!savePublicIPRange(startIP,endIP,zoneId,vlan.getId())) {
    deletePublicIPRange(vlan.getId());
    _vlanDao.expunge(vlan.getId());
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (account != null) {
    AccountVlanMapVO accountVlanMapVO=new AccountVlanMapVO(account.getId(),vlan.getId());
    _accountVlanMapDao.persist(accountVlanMapVO);
  }
 else   if (podId != null) {
    PodVlanMapVO podVlanMapVO=new PodVlanMapVO(podId,vlan.getId());
    _podVlanMapDao.persist(podVlanMapVO);
  }
  String eventMsg=""String_Node_Str"" + vlanId + ""String_Node_Str""+ vlanGateway+ ""String_Node_Str""+ vlanNetmask+ ""String_Node_Str""+ startIP;
  if (endIP != null) {
    eventMsg+=""String_Node_Str"" + endIP;
  }
  eventMsg+=""String_Node_Str"";
  if (associateIpRangeToAccount) {
    associateIpAddressListToAccount(userId,account.getId(),zoneId,vlan.getId());
  }
  return vlan;
}","@Override public Vlan createVlanAndPublicIpRange(Long userId,Long zoneId,Long podId,String startIP,String endIP,String vlanGateway,String vlanNetmask,boolean forVirtualNetwork,String vlanId,Account account,Long networkId) throws InsufficientCapacityException, ConcurrentOperationException, InvalidParameterValueException, ResourceUnavailableException {
  if (podId != null && ((_podDao.findById(podId)) == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (podId != null && _podDao.findById(podId).getDataCenterId() != zoneId) {
    throw new InvalidParameterValueException(""String_Node_Str"" + podId + ""String_Node_Str""+ zoneId);
  }
  if (vlanId == null) {
    vlanId=Vlan.UNTAGGED;
  }
  DataCenterVO zone;
  if (zoneId == null || ((zone=_zoneDao.findById(zoneId)) == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (zone.getNetworkType() == NetworkType.Advanced && vlanId.equals(Vlan.UNTAGGED) && !forVirtualNetwork) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId() + ""String_Node_Str""+ zone.getNetworkType());
  }
 else   if (zone.getNetworkType() == NetworkType.Basic && !(vlanId.equals(Vlan.UNTAGGED) && !forVirtualNetwork)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId() + ""String_Node_Str""+ zone.getNetworkType());
  }
  if (zone.getVnet() == null && forVirtualNetwork) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zone.getId() + ""String_Node_Str"");
  }
  VlanType vlanType=forVirtualNetwork ? VlanType.VirtualNetwork : VlanType.DirectAttached;
  String hypervisorType=_configDao.getValue(""String_Node_Str"");
  if (hypervisorType.equalsIgnoreCase(""String_Node_Str"")) {
    if (vlanType.toString().equalsIgnoreCase(""String_Node_Str"") && vlanId.equalsIgnoreCase(Vlan.UNTAGGED)) {
      if (_configDao.getValue(""String_Node_Str"") == null || _configDao.getValue(""String_Node_Str"").equals(""String_Node_Str"")) {
        throw new CloudRuntimeException(""String_Node_Str"");
      }
    }
  }
  checkAccess(account,zone);
  boolean associateIpRangeToAccount=false;
  if (vlanType.equals(VlanType.VirtualNetwork)) {
    if (account != null) {
      long ipResourceLimit=_accountMgr.findCorrectResourceLimit((AccountVO)account,ResourceType.public_ip);
      long accountIpRange=NetUtils.ip2Long(endIP) - NetUtils.ip2Long(startIP) + 1;
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + ipResourceLimit + ""String_Node_Str""+ accountIpRange);
      }
      if (ipResourceLimit != -1 && accountIpRange > ipResourceLimit) {
        throw new InvalidParameterValueException(""String_Node_Str"" + ipResourceLimit + ""String_Node_Str""+ accountIpRange+ ""String_Node_Str"");
      }
      associateIpRangeToAccount=true;
    }
  }
 else   if (vlanType.equals(VlanType.DirectAttached)) {
    if (account != null) {
      if (vlanId.equals(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      List<HostPodVO> podsInZone=_podDao.listByDataCenterId(zone.getId());
      for (      HostPodVO pod : podsInZone) {
        if (_podVlanMapDao.listPodVlanMapsByPod(pod.getId()).size() > 0) {
          throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
        }
      }
    }
 else     if (podId != null) {
      if (!vlanId.equals(Vlan.UNTAGGED)) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
      List<AccountVlanMapVO> accountVlanMaps=_accountVlanMapDao.listAllIncludingRemoved();
      for (      AccountVlanMapVO accountVlanMap : accountVlanMaps) {
        VlanVO vlan=_vlanDao.findById(accountVlanMap.getVlanDbId());
        if (vlan.getDataCenterId() == zone.getId()) {
          throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
        }
      }
    }
  }
 else {
    throw new InvalidParameterValueException(""String_Node_Str"" + VlanType.values().toString());
  }
  if (!NetUtils.isValidIp(vlanGateway)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!NetUtils.isValidIp(vlanNetmask)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String newVlanSubnet=NetUtils.getSubNet(vlanGateway,vlanNetmask);
  String guestNetworkCidr=zone.getGuestNetworkCidr();
  if (guestNetworkCidr != null) {
    String[] cidrPair=guestNetworkCidr.split(""String_Node_Str"");
    String guestIpNetwork=NetUtils.getIpRangeStartIpFromCidr(cidrPair[0],Long.parseLong(cidrPair[1]));
    long guestCidrSize=Long.parseLong(cidrPair[1]);
    long vlanCidrSize=NetUtils.getCidrSize(vlanNetmask);
    long cidrSizeToUse=-1;
    if (vlanCidrSize < guestCidrSize) {
      cidrSizeToUse=vlanCidrSize;
    }
 else {
      cidrSizeToUse=guestCidrSize;
    }
    String guestSubnet=NetUtils.getCidrSubNet(guestIpNetwork,cidrSizeToUse);
    if (newVlanSubnet.equals(guestSubnet)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + zone.getName() + ""String_Node_Str"");
    }
  }
  checkPublicIpRangeErrors(zoneId,vlanId,vlanGateway,vlanNetmask,startIP,endIP);
  List<VlanVO> vlans=_vlanDao.listByZone(zone.getId());
  for (  VlanVO vlan : vlans) {
    String otherVlanGateway=vlan.getVlanGateway();
    String otherVlanSubnet=NetUtils.getSubNet(vlan.getVlanGateway(),vlan.getVlanNetmask());
    String[] otherVlanIpRange=vlan.getIpRange().split(""String_Node_Str"");
    String otherVlanStartIP=otherVlanIpRange[0];
    String otherVlanEndIP=null;
    if (otherVlanIpRange.length > 1) {
      otherVlanEndIP=otherVlanIpRange[1];
    }
    if (!vlanId.equals(vlan.getVlanTag()) && newVlanSubnet.equals(otherVlanSubnet)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanTag() + ""String_Node_Str""+ zone.getName()+ ""String_Node_Str"");
    }
    if (vlanId.equals(vlan.getVlanTag()) && newVlanSubnet.equals(otherVlanSubnet)) {
      if (NetUtils.ipRangesOverlap(startIP,endIP,otherVlanStartIP,otherVlanEndIP)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanTag() + ""String_Node_Str"");
      }
      if (!vlanGateway.equals(otherVlanGateway)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + vlan.getVlanTag() + ""String_Node_Str""+ otherVlanGateway+ ""String_Node_Str"");
      }
    }
  }
  if (_zoneDao.findVnet(zoneId,vlanId).size() > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"" + vlanId + ""String_Node_Str""+ zone.getName());
  }
  if (zone.getNetworkType() == NetworkType.Basic && vlanId.equalsIgnoreCase(Vlan.UNTAGGED) && podId != null) {
    List<VlanVO> podVlans=_vlanDao.listVlansForPodByType(podId,VlanType.DirectAttached);
    if (podVlans != null && !podVlans.isEmpty()) {
      VlanVO podVlan=podVlans.get(0);
      if (!podVlan.getVlanNetmask().equals(vlanNetmask)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + podVlan.getId() + ""String_Node_Str""+ podId);
      }
 else       if (!podVlan.getVlanGateway().equals(vlanGateway)) {
        throw new InvalidParameterValueException(""String_Node_Str"" + podVlan.getId() + ""String_Node_Str""+ podId);
      }
    }
  }
  String ipRange=startIP;
  if (endIP != null) {
    ipRange+=""String_Node_Str"" + endIP;
  }
  VlanVO vlan=new VlanVO(vlanType,vlanId,vlanGateway,vlanNetmask,zone.getId(),ipRange,networkId);
  vlan=_vlanDao.persist(vlan);
  if (!savePublicIPRange(startIP,endIP,zoneId,vlan.getId())) {
    deletePublicIPRange(vlan.getId());
    _vlanDao.expunge(vlan.getId());
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (account != null) {
    AccountVlanMapVO accountVlanMapVO=new AccountVlanMapVO(account.getId(),vlan.getId());
    _accountVlanMapDao.persist(accountVlanMapVO);
  }
 else   if (podId != null) {
    PodVlanMapVO podVlanMapVO=new PodVlanMapVO(podId,vlan.getId());
    _podVlanMapDao.persist(podVlanMapVO);
  }
  String eventMsg=""String_Node_Str"" + vlanId + ""String_Node_Str""+ vlanGateway+ ""String_Node_Str""+ vlanNetmask+ ""String_Node_Str""+ startIP;
  if (endIP != null) {
    eventMsg+=""String_Node_Str"" + endIP;
  }
  eventMsg+=""String_Node_Str"";
  if (associateIpRangeToAccount) {
    long ipCount=_publicIpAddressDao.countIPs(zoneId,vlan.getId(),false);
    _accountMgr.incrementResourceCount(account.getId(),ResourceType.public_ip,ipCount);
    s_logger.trace(""String_Node_Str"" + ResourceType.public_ip + ""String_Node_Str""+ ipCount+ ""String_Node_Str""+ account);
    _networkMgr.associateIpAddressListToAccount(userId,account.getId(),zoneId,vlan.getId());
  }
  return vlan;
}"
89831,"@Override public boolean deleteVlanAndPublicIpRange(long userId,long vlanDbId) throws InvalidParameterValueException {
  VlanVO vlan=_vlanDao.findById(vlanDbId);
  if (vlan == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (_publicIpAddressDao.countIPs(vlan.getDataCenterId(),vlanDbId,true) > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (_domrDao.listByVlanDbId(vlanDbId).size() > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!deletePublicIPRange(vlanDbId)) {
    return false;
  }
  return _vlanDao.expunge(vlanDbId);
}","@Override public boolean deleteVlanAndPublicIpRange(long userId,long vlanDbId) throws InvalidParameterValueException {
  VlanVO vlan=_vlanDao.findById(vlanDbId);
  if (vlan == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (_publicIpAddressDao.countIPs(vlan.getDataCenterId(),vlanDbId,true) > 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!deletePublicIPRange(vlanDbId)) {
    return false;
  }
  return _vlanDao.expunge(vlanDbId);
}"
89832,"@Override public List<UserAccountVO> searchForUsers(ListUsersCmd cmd) throws PermissionDeniedException {
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  if (domainId != null) {
    if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
      throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
  }
 else {
    domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
  }
  Filter searchFilter=new Filter(UserAccountVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Long id=cmd.getId();
  Object username=cmd.getUsername();
  Object type=cmd.getAccountType();
  Object accountName=cmd.getAccountName();
  Object state=cmd.getState();
  Object keyword=cmd.getKeyword();
  SearchBuilder<UserAccountVO> sb=_userAccountDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getUsername(),SearchCriteria.Op.LIKE);
  if (id != null && id == 1) {
    List<UserAccountVO> emptyList=new ArrayList<UserAccountVO>();
    return emptyList;
  }
 else   if (id != null) {
    sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  }
 else {
    sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.NEQ);
  }
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  if ((accountName == null) && (domainId != null)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<UserAccountVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<UserAccountVO> ssc=_userAccountDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (username != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + username + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
 else {
    sc.setParameters(""String_Node_Str"",1);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (accountName != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + accountName + ""String_Node_Str"");
    if (domainId != null) {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
 else   if (domainId != null) {
    DomainVO domainVO=_domainDao.findById(domainId);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domainVO.getPath() + ""String_Node_Str"");
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  return _userAccountDao.search(sc,searchFilter);
}","@Override public List<UserAccountVO> searchForUsers(ListUsersCmd cmd) throws PermissionDeniedException {
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  if (domainId != null) {
    if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
      throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
    }
  }
 else {
    domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
  }
  Filter searchFilter=new Filter(UserAccountVO.class,""String_Node_Str"",true,cmd.getStartIndex(),cmd.getPageSizeVal());
  Long id=cmd.getId();
  Object username=cmd.getUsername();
  Object type=cmd.getAccountType();
  Object accountName=cmd.getAccountName();
  Object state=cmd.getState();
  Object keyword=cmd.getKeyword();
  SearchBuilder<UserAccountVO> sb=_userAccountDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getUsername(),SearchCriteria.Op.LIKE);
  if (id != null && id == 1) {
    List<UserAccountVO> emptyList=new ArrayList<UserAccountVO>();
    return emptyList;
  }
 else   if (id != null) {
    sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  }
 else {
    sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.NEQ);
  }
  sb.and(""String_Node_Str"",sb.entity().getType(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDomainId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountName(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getState(),SearchCriteria.Op.EQ);
  if ((accountName == null) && (domainId != null)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<UserAccountVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<UserAccountVO> ssc=_userAccountDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (username != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + username + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
 else {
    sc.setParameters(""String_Node_Str"",1);
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",type);
  }
  if (accountName != null) {
    sc.setParameters(""String_Node_Str"",accountName);
    if (domainId != null) {
      sc.setParameters(""String_Node_Str"",domainId);
    }
  }
 else   if (domainId != null) {
    DomainVO domainVO=_domainDao.findById(domainId);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domainVO.getPath() + ""String_Node_Str"");
  }
  if (state != null) {
    sc.setParameters(""String_Node_Str"",state);
  }
  return _userAccountDao.search(sc,searchFilter);
}"
89833,"@Override public <T extends VMInstanceVO>DiskProfile allocateRawVolume(VolumeType type,String name,DiskOfferingVO offering,Long size,T vm,Account owner){
  long userId=UserContext.current().getCallerUserId();
  if (size == null) {
    size=offering.getDiskSizeInBytes();
  }
  VolumeVO vol=new VolumeVO(type,name,vm.getDataCenterId(),owner.getDomainId(),owner.getId(),offering.getId(),size);
  if (vm != null) {
    vol.setInstanceId(vm.getId());
  }
  if (type.equals(VolumeType.ROOT)) {
    vol.setDeviceId(0l);
  }
 else {
    vol.setDeviceId(1l);
  }
  vol=_volsDao.persist(vol);
  if (vm instanceof UserVm) {
    long sizeMB=size / (1024 * 1024);
    EventUtils.saveEvent(userId,vol.getAccountId(),EventTypes.EVENT_VOLUME_CREATE,""String_Node_Str"" + vol.getName() + ""String_Node_Str""+ sizeMB+ ""String_Node_Str"");
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,vol.getAccountId(),vol.getDataCenterId(),vol.getId(),vol.getName(),offering.getId(),null,sizeMB);
    _usageEventDao.persist(usageEvent);
    _accountMgr.incrementResourceCount(vm.getAccountId(),ResourceType.volume);
  }
  return toDiskProfile(vol,offering);
}","@Override public <T extends VMInstanceVO>DiskProfile allocateRawVolume(VolumeType type,String name,DiskOfferingVO offering,Long size,T vm,Account owner){
  long userId=UserContext.current().getCallerUserId();
  if (size == null) {
    size=offering.getDiskSizeInBytes();
  }
 else {
    size=(size * 1024 * 1024* 1024);
  }
  VolumeVO vol=new VolumeVO(type,name,vm.getDataCenterId(),owner.getDomainId(),owner.getId(),offering.getId(),size);
  if (vm != null) {
    vol.setInstanceId(vm.getId());
  }
  if (type.equals(VolumeType.ROOT)) {
    vol.setDeviceId(0l);
  }
 else {
    vol.setDeviceId(1l);
  }
  vol=_volsDao.persist(vol);
  if (vm instanceof UserVm) {
    long sizeMB=size / (1024 * 1024);
    EventUtils.saveEvent(userId,vol.getAccountId(),EventTypes.EVENT_VOLUME_CREATE,""String_Node_Str"" + vol.getName() + ""String_Node_Str""+ sizeMB+ ""String_Node_Str"");
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,vol.getAccountId(),vol.getDataCenterId(),vol.getId(),vol.getName(),offering.getId(),null,sizeMB);
    _usageEventDao.persist(usageEvent);
    _accountMgr.incrementResourceCount(vm.getAccountId(),ResourceType.volume);
  }
  return toDiskProfile(vol,offering);
}"
89834,"@Override @DB public synchronized StoragePoolVO preparePrimaryStorageForMaintenance(PreparePrimaryStorageForMaintenanceCmd cmd) throws ServerApiException {
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  boolean restart=true;
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ExecutionException(msg);
    }
    if (!primaryStorage.getStatus().equals(Status.Up) && !primaryStorage.getStatus().equals(Status.ErrorInMaintenance)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + primaryStorageId + ""String_Node_Str""+ primaryStorage.getStatus().toString());
    }
    primaryStorage.setStatus(Status.PrepareForMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<StoragePoolVO> upPools=_storagePoolDao.listPoolsByStatus(Status.Up);
    if (upPools == null || upPools.size() == 0) {
      restart=false;
    }
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
      if (vmInstance == null) {
        continue;
      }
      if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting) || vmInstance.getState().equals(State.Stopping)) {
        if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
          _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
          if (!_consoleProxyMgr.stopProxy(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
            if (_consoleProxyMgr.startProxy(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
          if (!_userVmMgr.stopVirtualMachine(userId,vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
          if (!_secStorageMgr.stopSecStorageVm(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {
          if (_routerMgr.stopRouter(vmInstance.getId()) == null) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_routerMgr.startRouter(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
      }
    }
    primaryStorage.setStatus(Status.Maintenance);
    _storagePoolDao.persist(primaryStorage);
    return _storagePoolDao.findById(primaryStorageId);
  }
 catch (  Exception e) {
    if (e instanceof ExecutionException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,e.getMessage());
    }
    if (e instanceof InvalidParameterValueException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
    }
    s_logger.error(""String_Node_Str"",e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}","@Override @DB public synchronized StoragePoolVO preparePrimaryStorageForMaintenance(PreparePrimaryStorageForMaintenanceCmd cmd) throws ServerApiException {
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  boolean restart=true;
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ExecutionException(msg);
    }
    if (!primaryStorage.getStatus().equals(Status.Up) && !primaryStorage.getStatus().equals(Status.ErrorInMaintenance)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + primaryStorageId + ""String_Node_Str""+ primaryStorage.getStatus().toString());
    }
    primaryStorage.setStatus(Status.PrepareForMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<StoragePoolVO> upPools=_storagePoolDao.listPoolsByStatus(Status.Up);
    if (upPools == null || upPools.size() == 0) {
      restart=false;
    }
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
      if (vmInstance == null) {
        continue;
      }
      if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting) || vmInstance.getState().equals(State.Stopping)) {
        if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
          _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
          if (!_consoleProxyMgr.stopProxy(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            setPoolStateToError(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
            if (_consoleProxyMgr.startProxy(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              setPoolStateToError(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
          if (!_userVmMgr.stopVirtualMachine(userId,vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            setPoolStateToError(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
          if (!_secStorageMgr.stopSecStorageVm(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            setPoolStateToError(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              setPoolStateToError(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {
          if (_routerMgr.stopRouter(vmInstance.getId()) == null) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            setPoolStateToError(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_routerMgr.startRouter(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              setPoolStateToError(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
      }
    }
    primaryStorage.setStatus(Status.Maintenance);
    _storagePoolDao.persist(primaryStorage);
    return _storagePoolDao.findById(primaryStorageId);
  }
 catch (  Exception e) {
    if (e instanceof ExecutionException || e instanceof ResourceUnavailableException) {
      s_logger.error(""String_Node_Str"",e);
      setPoolStateToError(primaryStorage);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,e.getMessage());
    }
    if (e instanceof InvalidParameterValueException) {
      s_logger.error(""String_Node_Str"",e);
      setPoolStateToError(primaryStorage);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
    }
    if (e instanceof InsufficientCapacityException) {
      s_logger.error(""String_Node_Str"",e);
      setPoolStateToError(primaryStorage);
      throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,e.getMessage());
    }
    s_logger.error(""String_Node_Str"",e);
    setPoolStateToError(primaryStorage);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}"
89835,"@Override @DB public synchronized StoragePoolVO cancelPrimaryStorageForMaintenance(CancelPrimaryStorageMaintenanceCmd cmd) throws ServerApiException {
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ExecutionException(msg);
    }
    if (primaryStorage.getStatus().equals(Status.Up) || primaryStorage.getStatus().equals(Status.PrepareForMaintenance)) {
      throw new StorageUnavailableException(""String_Node_Str"" + primaryStorageId + ""String_Node_Str""+ primaryStorage.getStatus().toString(),primaryStorageId);
    }
    primaryStorage.setStatus(Status.CancelMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      if ((!volume.destroyed) && (volume.removed == null)) {
        VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
        if (vmInstance.getState().equals(State.Stopping) || vmInstance.getState().equals(State.Stopped)) {
          if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
            if (_consoleProxyMgr.startProxy(vmInstance.getId()) == null) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg);
              throw new ExecutionException(msg);
            }
          }
          if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId()) == null) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg);
              throw new ExecutionException(msg);
            }
          }
          if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
            try {
              if (_userVmMgr.startUserVm(vmInstance.getId()) == null) {
                String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
                s_logger.warn(msg);
                throw new ExecutionException(msg);
              }
            }
 catch (            StorageUnavailableException e) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg,e);
              throw new ExecutionException(msg);
            }
catch (            InsufficientCapacityException e) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg,e);
              throw new ExecutionException(msg);
            }
catch (            ConcurrentOperationException e) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg,e);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new ExecutionException(msg);
            }
catch (            ExecutionException e) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg,e);
              throw new ExecutionException(msg);
            }
          }
        }
      }
    }
    try {
      _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
    }
 catch (    InvalidParameterValueException e) {
      String msg=""String_Node_Str"";
      s_logger.warn(msg,e);
      throw new ExecutionException(msg);
    }
catch (    CloudRuntimeException e) {
      String msg=""String_Node_Str"";
      s_logger.warn(msg,e);
      throw new ExecutionException(msg);
    }
    primaryStorage.setStatus(Status.Up);
    _storagePoolDao.persist(primaryStorage);
    return primaryStorage;
  }
 catch (  Exception e) {
    primaryStorage.setStatus(Status.ErrorInMaintenance);
    _storagePoolDao.persist(primaryStorage);
    if (e instanceof ExecutionException) {
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,e.getMessage());
    }
 else     if (e instanceof InvalidParameterValueException) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
    }
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}","@Override @DB public synchronized StoragePoolVO cancelPrimaryStorageForMaintenance(CancelPrimaryStorageMaintenanceCmd cmd) throws ServerApiException {
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ExecutionException(msg);
    }
    if (primaryStorage.getStatus().equals(Status.Up) || primaryStorage.getStatus().equals(Status.PrepareForMaintenance)) {
      throw new StorageUnavailableException(""String_Node_Str"" + primaryStorageId + ""String_Node_Str""+ primaryStorage.getStatus().toString(),primaryStorageId);
    }
    primaryStorage.setStatus(Status.CancelMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      if ((!volume.destroyed) && (volume.removed == null)) {
        VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
        if (vmInstance.getState().equals(State.Stopping) || vmInstance.getState().equals(State.Stopped)) {
          if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
            if (_consoleProxyMgr.startProxy(vmInstance.getId()) == null) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg);
              throw new ExecutionException(msg);
            }
          }
          if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId()) == null) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg);
              throw new ExecutionException(msg);
            }
          }
          if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
            try {
              if (_userVmMgr.startUserVm(vmInstance.getId()) == null) {
                String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
                s_logger.warn(msg);
                throw new ExecutionException(msg);
              }
            }
 catch (            StorageUnavailableException e) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg,e);
              throw new ExecutionException(msg);
            }
catch (            InsufficientCapacityException e) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg,e);
              throw new ExecutionException(msg);
            }
catch (            ConcurrentOperationException e) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg,e);
              setPoolStateToError(primaryStorage);
              throw new ExecutionException(msg);
            }
catch (            ExecutionException e) {
              String msg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(msg,e);
              throw new ExecutionException(msg);
            }
          }
        }
      }
    }
    try {
      _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
    }
 catch (    InvalidParameterValueException e) {
      String msg=""String_Node_Str"";
      s_logger.warn(msg,e);
      throw new ExecutionException(msg);
    }
catch (    CloudRuntimeException e) {
      String msg=""String_Node_Str"";
      s_logger.warn(msg,e);
      throw new ExecutionException(msg);
    }
    primaryStorage.setStatus(Status.Up);
    _storagePoolDao.persist(primaryStorage);
    return primaryStorage;
  }
 catch (  Exception e) {
    setPoolStateToError(primaryStorage);
    if (e instanceof ExecutionException) {
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,e.getMessage());
    }
 else     if (e instanceof InvalidParameterValueException) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
    }
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}"
89836,"@Override public SecondaryStorageVmVO startSecStorageVm(long secStorageVmId){
  boolean started=false;
  long startEventId=EventUtils.saveStartedEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_START,""String_Node_Str"" + secStorageVmId);
  try {
    SecondaryStorageVmVO ssvm=start(secStorageVmId);
    started=true;
    return ssvm;
  }
 catch (  StorageUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
catch (  InsufficientCapacityException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
catch (  ConcurrentOperationException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
catch (  ResourceUnavailableException e) {
    return null;
  }
 finally {
    if (started) {
      EventUtils.saveEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventVO.LEVEL_INFO,EventTypes.EVENT_SSVM_START,""String_Node_Str"" + secStorageVmId,startEventId);
    }
 else {
      EventUtils.saveEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventVO.LEVEL_ERROR,EventTypes.EVENT_SSVM_START,""String_Node_Str"" + secStorageVmId,startEventId);
    }
  }
}","@Override public SecondaryStorageVmVO startSecStorageVm(long secStorageVmId){
  boolean started=false;
  long startEventId=EventUtils.saveStartedEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_START,""String_Node_Str"" + secStorageVmId);
  try {
    SecondaryStorageVmVO ssvm=start(secStorageVmId);
    started=true;
    return ssvm;
  }
 catch (  StorageUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
catch (  InsufficientCapacityException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
catch (  ConcurrentOperationException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
    return null;
  }
 finally {
    if (started) {
      EventUtils.saveEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventVO.LEVEL_INFO,EventTypes.EVENT_SSVM_START,""String_Node_Str"" + secStorageVmId,startEventId);
    }
 else {
      EventUtils.saveEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventVO.LEVEL_ERROR,EventTypes.EVENT_SSVM_START,""String_Node_Str"" + secStorageVmId,startEventId);
    }
  }
}"
89837,"@Override @DB public synchronized StoragePoolVO preparePrimaryStorageForMaintenance(PreparePrimaryStorageForMaintenanceCmd cmd) throws ServerApiException {
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  boolean restart=true;
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ExecutionException(msg);
    }
    if (!primaryStorage.getStatus().equals(Status.Up) && !primaryStorage.getStatus().equals(Status.ErrorInMaintenance)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + primaryStorageId + ""String_Node_Str""+ primaryStorage.getStatus().toString());
    }
    primaryStorage.setStatus(Status.PrepareForMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<StoragePoolVO> upPools=_storagePoolDao.listPoolsByStatus(Status.Up);
    if (upPools == null || upPools.size() == 0) {
      restart=false;
    }
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
      if (vmInstance == null) {
        continue;
      }
      if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting) || vmInstance.getState().equals(State.Stopping)) {
        if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
          _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
          if (!_consoleProxyMgr.stopProxy(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
            if (_consoleProxyMgr.startProxy(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
          if (!_userVmMgr.stopVirtualMachine(userId,vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
          if (!_secStorageMgr.stopSecStorageVm(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {
          if (_routerMgr.stopRouter(vmInstance.getId()) == null) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_routerMgr.stopRouter(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
      }
    }
    primaryStorage.setStatus(Status.Maintenance);
    _storagePoolDao.persist(primaryStorage);
    return _storagePoolDao.findById(primaryStorageId);
  }
 catch (  Exception e) {
    if (e instanceof ExecutionException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,e.getMessage());
    }
    if (e instanceof InvalidParameterValueException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
    }
    s_logger.error(""String_Node_Str"",e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}","@Override @DB public synchronized StoragePoolVO preparePrimaryStorageForMaintenance(PreparePrimaryStorageForMaintenanceCmd cmd) throws ServerApiException {
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  boolean restart=true;
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ExecutionException(msg);
    }
    if (!primaryStorage.getStatus().equals(Status.Up) && !primaryStorage.getStatus().equals(Status.ErrorInMaintenance)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + primaryStorageId + ""String_Node_Str""+ primaryStorage.getStatus().toString());
    }
    primaryStorage.setStatus(Status.PrepareForMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<StoragePoolVO> upPools=_storagePoolDao.listPoolsByStatus(Status.Up);
    if (upPools == null || upPools.size() == 0) {
      restart=false;
    }
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
      if (vmInstance == null) {
        continue;
      }
      if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting) || vmInstance.getState().equals(State.Stopping)) {
        if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
          _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
          if (!_consoleProxyMgr.stopProxy(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
            if (_consoleProxyMgr.startProxy(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
          if (!_userVmMgr.stopVirtualMachine(userId,vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
          if (!_secStorageMgr.stopSecStorageVm(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {
          if (_routerMgr.stopRouter(vmInstance.getId()) == null) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_routerMgr.startRouter(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
      }
    }
    primaryStorage.setStatus(Status.Maintenance);
    _storagePoolDao.persist(primaryStorage);
    return _storagePoolDao.findById(primaryStorageId);
  }
 catch (  Exception e) {
    if (e instanceof ExecutionException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,e.getMessage());
    }
    if (e instanceof InvalidParameterValueException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
    }
    s_logger.error(""String_Node_Str"",e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}"
89838,"private void createVbd(Connect conn,VirtualMachineTO vmSpec,String vmName,LibvirtVMDef vm) throws InternalErrorException, LibvirtException, URISyntaxException {
  for (  VolumeTO volume : vmSpec.getDisks()) {
    String volPath=getVolumePath(conn,volume);
    DiskDef.diskBus diskBusType=getGuestDiskModel(vmSpec.getOs());
    DiskDef disk=new DiskDef();
    if (volume.getType() == VolumeType.ISO) {
      if (volPath == null) {
        disk.defISODisk(null);
      }
 else {
        disk.defISODisk(volPath);
      }
    }
 else {
      int devId=0;
      if (volume.getType() == VolumeType.ROOT) {
        devId=0;
      }
 else {
        devId=1;
      }
      disk.defFileBasedDisk(volume.getPath(),devId,diskBusType,DiskDef.diskFmtType.QCOW2);
    }
    if (volume.getType() == VolumeType.DATADISK && diskBusType != DiskDef.diskBus.VIRTIO) {
      disk.setAttachDeferred(true);
    }
    if (!disk.isAttachDeferred()) {
      vm.getDevices().addDevice(disk);
    }
  }
  if (vmSpec.getType() != VirtualMachine.Type.User) {
    DiskDef iso=new DiskDef();
    iso.defISODisk(_sysvmISOPath);
    vm.getDevices().addDevice(iso);
    createPatchVbd(conn,vmName,vm,vmSpec);
  }
}","private void createVbd(Connect conn,VirtualMachineTO vmSpec,String vmName,LibvirtVMDef vm) throws InternalErrorException, LibvirtException, URISyntaxException {
  for (  VolumeTO volume : vmSpec.getDisks()) {
    String volPath=getVolumePath(conn,volume);
    DiskDef.diskBus diskBusType=getGuestDiskModel(vmSpec.getOs());
    DiskDef disk=new DiskDef();
    if (volume.getType() == VolumeType.ISO) {
      if (volPath == null) {
        disk.defISODisk(null);
      }
 else {
        disk.defISODisk(volPath);
      }
    }
 else {
      int devId=(int)volume.getDeviceId();
      disk.defFileBasedDisk(volume.getPath(),devId,diskBusType,DiskDef.diskFmtType.QCOW2);
    }
    if (volume.getType() == VolumeType.DATADISK && diskBusType != DiskDef.diskBus.VIRTIO) {
      disk.setAttachDeferred(true);
    }
    if (!disk.isAttachDeferred()) {
      vm.getDevices().addDevice(disk);
    }
  }
  if (vmSpec.getType() != VirtualMachine.Type.User) {
    DiskDef iso=new DiskDef();
    iso.defISODisk(_sysvmISOPath);
    vm.getDevices().addDevice(iso);
    createPatchVbd(conn,vmName,vm,vmSpec);
  }
}"
89839,"private String getDevLabel(int devId,diskBus bus){
  char suffix=(char)('a' + devId);
  if (bus == diskBus.SCSI) {
    return ""String_Node_Str"" + suffix;
  }
 else   if (bus == diskBus.VIRTIO) {
    return ""String_Node_Str"" + suffix;
  }
  return ""String_Node_Str"" + suffix;
}","private String getDevLabel(int devId,diskBus bus){
  if (devId >= 2) {
    devId++;
  }
  char suffix=(char)('a' + devId);
  if (bus == diskBus.SCSI) {
    return ""String_Node_Str"" + suffix;
  }
 else   if (bus == diskBus.VIRTIO) {
    return ""String_Node_Str"" + suffix;
  }
  return ""String_Node_Str"" + suffix;
}"
89840,"@Override @DB public Pair<NetworkGuru,NetworkVO> implementNetwork(long networkId,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {
  Transaction.currentTxn();
  Pair<NetworkGuru,NetworkVO> implemented=new Pair<NetworkGuru,NetworkVO>(null,null);
  NetworkVO network=_networksDao.acquireInLockTable(networkId);
  if (network == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + networkId);
  }
  try {
    NetworkGuru guru=_networkGurus.get(network.getGuruName());
    Network.State state=network.getState();
    if (state == Network.State.Implemented || state == Network.State.Setup) {
      implemented.set(guru,network);
      return implemented;
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + guru + ""String_Node_Str""+ network);
    }
    NetworkOfferingVO offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
    network.setState(Network.State.Implementing);
    network.setReservationId(context.getReservationId());
    _networksDao.update(networkId,network);
    Network result=guru.implement(network,offering,dest,context);
    network.setCidr(result.getCidr());
    network.setBroadcastUri(result.getBroadcastUri());
    network.setGateway(result.getGateway());
    network.setDns1(result.getDns1());
    network.setDns2(result.getDns2());
    network.setMode(result.getMode());
    _networksDao.update(networkId,network);
    for (    NetworkElement element : _networkElements) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + element.getName() + ""String_Node_Str""+ network);
      }
      element.implement(network,offering,dest,context);
    }
    network.setState(Network.State.Implemented);
    _networksDao.update(network.getId(),network);
    implemented.set(guru,network);
    return implemented;
  }
  finally {
    if (implemented.first() == null) {
      s_logger.debug(""String_Node_Str"" + network);
    }
    _networksDao.releaseFromLockTable(networkId);
  }
}","@Override @DB public Pair<NetworkGuru,NetworkVO> implementNetwork(long networkId,DeployDestination dest,ReservationContext context) throws ConcurrentOperationException, ResourceUnavailableException, InsufficientCapacityException {
  Transaction.currentTxn();
  Pair<NetworkGuru,NetworkVO> implemented=new Pair<NetworkGuru,NetworkVO>(null,null);
  NetworkVO network=_networksDao.acquireInLockTable(networkId);
  if (network == null) {
    throw new ConcurrentOperationException(""String_Node_Str"" + networkId);
  }
  try {
    NetworkGuru guru=_networkGurus.get(network.getGuruName());
    Network.State state=network.getState();
    if (state == Network.State.Implemented || state == Network.State.Setup) {
      implemented.set(guru,network);
      return implemented;
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + guru + ""String_Node_Str""+ network);
    }
    NetworkOfferingVO offering=_networkOfferingDao.findById(network.getNetworkOfferingId());
    network.setState(Network.State.Implementing);
    _networksDao.update(networkId,network);
    Network result=guru.implement(network,offering,dest,context);
    network.setCidr(result.getCidr());
    network.setBroadcastUri(result.getBroadcastUri());
    network.setGateway(result.getGateway());
    network.setDns1(result.getDns1());
    network.setDns2(result.getDns2());
    network.setMode(result.getMode());
    _networksDao.update(networkId,network);
    for (    NetworkElement element : _networkElements) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + element.getName() + ""String_Node_Str""+ network);
      }
      element.implement(network,offering,dest,context);
    }
    network.setReservationId(context.getReservationId());
    network.setState(Network.State.Implemented);
    _networksDao.update(network.getId(),network);
    implemented.set(guru,network);
    return implemented;
  }
  finally {
    if (implemented.first() == null) {
      s_logger.debug(""String_Node_Str"" + network);
    }
    _networksDao.releaseFromLockTable(networkId);
  }
}"
89841,"@Override public void run(){
  try {
    List<Long> shutdownList=new ArrayList<Long>();
    long currentTime=System.currentTimeMillis() >> 10;
    HashMap<Long,Long> stillFree=new HashMap<Long,Long>();
    List<Long> networkIds=_networksDao.findNetworksToGarbageCollect();
    for (    Long networkId : networkIds) {
      Long time=_lastNetworkIdsToFree.remove(networkId);
      if (time == null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str""+ currentTime);
        }
        stillFree.put(networkId,currentTime);
      }
 else       if (time < (currentTime + _networkGcWait)) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str""+ time);
        }
        stillFree.put(networkId,time);
      }
 else {
        shutdownList.add(networkId);
      }
    }
    _lastNetworkIdsToFree=stillFree;
    for (    Long networkId : shutdownList) {
      try {
        shutdownNetwork(networkId);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + networkId);
      }
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
}","@Override public void run(){
  try {
    List<Long> shutdownList=new ArrayList<Long>();
    long currentTime=System.currentTimeMillis() >> 10;
    HashMap<Long,Long> stillFree=new HashMap<Long,Long>();
    List<Long> networkIds=_networksDao.findNetworksToGarbageCollect();
    for (    Long networkId : networkIds) {
      Long time=_lastNetworkIdsToFree.remove(networkId);
      if (time == null) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str""+ currentTime);
        }
        stillFree.put(networkId,currentTime);
      }
 else       if (time > (currentTime - _networkGcWait)) {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str""+ time);
        }
        stillFree.put(networkId,time);
      }
 else {
        shutdownList.add(networkId);
      }
    }
    _lastNetworkIdsToFree=stillFree;
    for (    Long networkId : shutdownList) {
      try {
        shutdownNetwork(networkId);
      }
 catch (      Exception e) {
        s_logger.warn(""String_Node_Str"" + networkId);
      }
    }
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"",e);
  }
}"
89842,"@DB public void shutdownNetwork(long networkId){
  Transaction txn=Transaction.currentTxn();
  txn.start();
  NetworkVO network=_networksDao.lockRow(networkId,true);
  if (network == null) {
    s_logger.debug(""String_Node_Str"" + networkId);
    return;
  }
  if (network.getState() != Network.State.Implemented && network.getState() != Network.State.Destroying) {
    s_logger.debug(""String_Node_Str"" + network);
    return;
  }
  network.setState(Network.State.Destroying);
  _networksDao.update(network.getId(),network);
  txn.commit();
  boolean success=true;
  for (  NetworkElement element : _networkElements) {
    try {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + element);
      }
      element.shutdown(network,null);
    }
 catch (    ResourceUnavailableException e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
catch (    ConcurrentOperationException e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
  }
  txn.start();
  if (success) {
    if (s_logger.isDebugEnabled()) {
    }
    NetworkGuru guru=_networkGurus.get(network.getGuruName());
    guru.destroy(network,_networkOfferingDao.findById(network.getNetworkOfferingId()));
    network.setState(Network.State.Allocated);
    _networksDao.update(network.getId(),network);
    _networksDao.clearCheckForGc(networkId);
  }
 else {
    network.setState(Network.State.Implemented);
    _networksDao.update(network.getId(),network);
  }
  txn.commit();
}","@DB public void shutdownNetwork(long networkId){
  Transaction txn=Transaction.currentTxn();
  txn.start();
  NetworkVO network=_networksDao.lockRow(networkId,true);
  if (network == null) {
    s_logger.debug(""String_Node_Str"" + networkId);
    return;
  }
  if (network.getState() != Network.State.Implemented && network.getState() != Network.State.Destroying) {
    s_logger.debug(""String_Node_Str"" + network);
    return;
  }
  network.setState(Network.State.Destroying);
  _networksDao.update(network.getId(),network);
  txn.commit();
  boolean success=true;
  for (  NetworkElement element : _networkElements) {
    try {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + element);
      }
      element.shutdown(network,null);
    }
 catch (    ResourceUnavailableException e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
catch (    ConcurrentOperationException e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
catch (    Exception e) {
      s_logger.warn(""String_Node_Str"" + element.getName(),e);
      success=false;
    }
  }
  txn.start();
  if (success) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + networkId + ""String_Node_Str"");
    }
    NetworkGuru guru=_networkGurus.get(network.getGuruName());
    guru.destroy(network,_networkOfferingDao.findById(network.getNetworkOfferingId()));
    network.setState(Network.State.Allocated);
    _networksDao.update(network.getId(),network);
    _networksDao.clearCheckForGc(networkId);
  }
 else {
    network.setState(Network.State.Implemented);
    _networksDao.update(network.getId(),network);
  }
  txn.commit();
}"
89843,"@Override public void destroy(Network network,NetworkOffering offering){
  _dcDao.releaseVnet(network.getBroadcastUri().getHost(),network.getDataCenterId(),network.getAccountId(),network.getReservationId());
}","@Override public void destroy(Network network,NetworkOffering offering){
  s_logger.debug(""String_Node_Str"" + network.getId());
  _dcDao.releaseVnet(network.getBroadcastUri().getHost(),network.getDataCenterId(),network.getAccountId(),network.getReservationId());
  _networkMgr.resetBroadcastUri(network.getId());
}"
89844,"protected VDI getVDIbyUuid(Connection conn,String uuid){
  try {
    return VDI.getByUuid(conn,uuid);
  }
 catch (  XenAPIException e) {
    String msg=""String_Node_Str"" + uuid + ""String_Node_Str""+ e.toString();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg,e);
  }
catch (  Exception e) {
    String msg=""String_Node_Str"" + uuid + ""String_Node_Str""+ e.getMessage();
    s_logger.warn(msg,e);
    throw new CloudRuntimeException(msg,e);
  }
}","protected VDI getVDIbyUuid(Connection conn,String uuid){
  try {
    return VDI.getByUuid(conn,uuid);
  }
 catch (  Exception e) {
    String msg=""String_Node_Str"" + e.getClass().getName() + ""String_Node_Str""+ uuid+ ""String_Node_Str""+ e.toString();
    s_logger.debug(msg);
    throw new CloudRuntimeException(msg,e);
  }
}"
89845,"/** 
 * Creates a User VM in the database and returns the VM to the caller.
 * @param cmd Command to deploy.
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws PermissionDeniedException if the caller doesn't have any access rights to the VM.
 * @throws InvalidParameterValueException if the parameters are incorrect. 
 */
UserVm createVirtualMachine(DeployVMCmd cmd) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException ;","/** 
 * Creates a User VM in the database and returns the VM to the caller.
 * @param cmd Command to deploy.
 * @return UserVm object if successful.
 * @throws InsufficientCapacityException if there is insufficient capacity to deploy the VM.
 * @throws ConcurrentOperationException if there are multiple users working on the same VM or in the same environment.
 * @throws ResourceUnavailableException if the resources required to deploy the VM is not currently available.
 * @throws InsufficientResourcesException 
 * @throws PermissionDeniedException if the caller doesn't have any access rights to the VM.
 * @throws InvalidParameterValueException if the parameters are incorrect. 
 */
UserVm createVirtualMachine(DeployVMCmd cmd) throws InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException, StorageUnavailableException ;"
89846,"public void dispatchCreateCmd(BaseAsyncCreateCmd cmd,Map<String,String> params){
  String errorMsg=""String_Node_Str"";
  setupParameters(cmd,params);
  try {
    cmd.create();
  }
 catch (  Throwable t) {
    if (t instanceof InvalidParameterValueException || t instanceof IllegalArgumentException) {
      s_logger.info(t.getMessage());
      throw new ServerApiException(BaseCmd.PARAM_ERROR,t.getMessage());
    }
 else     if (t instanceof PermissionDeniedException) {
      s_logger.info(""String_Node_Str"" + t.getMessage());
      throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,t.getMessage());
    }
 else     if (t instanceof AccountLimitException) {
      s_logger.info(t.getMessage());
      throw new ServerApiException(BaseCmd.ACCOUNT_RESOURCE_LIMIT_ERROR,t.getMessage());
    }
 else     if (t instanceof InsufficientCapacityException) {
      s_logger.info(t.getMessage());
      throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,t.getMessage());
    }
 else     if (t instanceof ResourceAllocationException) {
      s_logger.info(t.getMessage());
      throw new ServerApiException(BaseCmd.RESOURCE_ALLOCATION_ERROR,t.getMessage());
    }
 else     if (t instanceof ResourceUnavailableException) {
      s_logger.warn(""String_Node_Str"",t);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,t.getMessage());
    }
 else     if (t instanceof AsyncCommandQueued) {
      throw (AsyncCommandQueued)t;
    }
 else     if (t instanceof ServerApiException) {
      s_logger.warn(t.getClass() + ""String_Node_Str"" + ((ServerApiException)t).getDescription());
      if (UserContext.current().getCaller().getType() == Account.ACCOUNT_TYPE_ADMIN) {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,errorMsg);
      }
 else {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,BaseCmd.USER_ERROR_MESSAGE);
      }
    }
 else {
      s_logger.error(""String_Node_Str"" + cmd.getClass().getSimpleName() + ""String_Node_Str"",t);
      if (UserContext.current().getCaller().getType() == Account.ACCOUNT_TYPE_ADMIN) {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,t.getMessage());
      }
 else {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,BaseCmd.USER_ERROR_MESSAGE);
      }
    }
  }
}","public void dispatchCreateCmd(BaseAsyncCreateCmd cmd,Map<String,String> params){
  String errorMsg=""String_Node_Str"";
  setupParameters(cmd,params);
  try {
    cmd.create();
  }
 catch (  Throwable t) {
    if (t instanceof InvalidParameterValueException || t instanceof IllegalArgumentException) {
      s_logger.info(t.getMessage());
      throw new ServerApiException(BaseCmd.PARAM_ERROR,t.getMessage());
    }
 else     if (t instanceof PermissionDeniedException) {
      s_logger.info(""String_Node_Str"" + t.getMessage());
      throw new ServerApiException(BaseCmd.ACCOUNT_ERROR,t.getMessage());
    }
 else     if (t instanceof AccountLimitException) {
      s_logger.info(t.getMessage());
      throw new ServerApiException(BaseCmd.ACCOUNT_RESOURCE_LIMIT_ERROR,t.getMessage());
    }
 else     if (t instanceof InsufficientCapacityException) {
      s_logger.info(t.getMessage());
      throw new ServerApiException(BaseCmd.INSUFFICIENT_CAPACITY_ERROR,t.getMessage());
    }
 else     if (t instanceof ResourceAllocationException) {
      s_logger.info(t.getMessage());
      throw new ServerApiException(BaseCmd.RESOURCE_ALLOCATION_ERROR,t.getMessage());
    }
 else     if (t instanceof ResourceUnavailableException) {
      s_logger.warn(""String_Node_Str"",t);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,t.getMessage());
    }
 else     if (t instanceof AsyncCommandQueued) {
      throw (AsyncCommandQueued)t;
    }
 else     if (t instanceof ServerApiException) {
      s_logger.warn(t.getClass() + ""String_Node_Str"" + ((ServerApiException)t).getDescription());
      if (UserContext.current().getCaller().getType() == Account.ACCOUNT_TYPE_ADMIN) {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,errorMsg.length() > 0 ? errorMsg : ((ServerApiException)t).getDescription());
      }
 else {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,BaseCmd.USER_ERROR_MESSAGE);
      }
    }
 else {
      s_logger.error(""String_Node_Str"" + cmd.getClass().getSimpleName() + ""String_Node_Str"",t);
      if (UserContext.current().getCaller().getType() == Account.ACCOUNT_TYPE_ADMIN) {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,t.getMessage());
      }
 else {
        throw new ServerApiException(BaseCmd.INTERNAL_ERROR,BaseCmd.USER_ERROR_MESSAGE);
      }
    }
  }
}"
89847,"@Override @DB public UserVm createVirtualMachine(DeployVMCmd cmd) throws InsufficientCapacityException, ResourceUnavailableException, ConcurrentOperationException {
  Account caller=UserContext.current().getCaller();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  List<Long> networkList=cmd.getNetworkIds();
  String group=cmd.getGroup();
  Account owner=_accountDao.findActiveAccount(accountName,domainId);
  if (owner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
  _accountMgr.checkAccess(caller,owner);
  long accountId=owner.getId();
  DataCenterVO dc=_dcDao.findById(cmd.getZoneId());
  if (dc == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getZoneId());
  }
  if (dc.getDomainId() != null) {
    DomainVO domain=_domainDao.findById(dc.getDomainId());
    if (domain == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + dc.getDomainId() + ""String_Node_Str""+ dc);
    }
    _accountMgr.checkAccess(caller,domain);
    _accountMgr.checkAccess(owner,domain);
  }
  ServiceOfferingVO offering=_serviceOfferingDao.findById(cmd.getServiceOfferingId());
  if (offering == null || offering.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getServiceOfferingId());
  }
  VMTemplateVO template=_templateDao.findById(cmd.getTemplateId());
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getTemplateId());
  }
  boolean isIso=Storage.ImageFormat.ISO == template.getFormat();
  if (isIso && !template.isBootable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + template.getId());
  }
  Pair<DiskOfferingVO,Long> rootDiskOffering=new Pair<DiskOfferingVO,Long>(null,null);
  List<Pair<DiskOfferingVO,Long>> dataDiskOfferings=new ArrayList<Pair<DiskOfferingVO,Long>>();
  if (isIso) {
    if (cmd.getDiskOfferingId() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
    if (diskOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
    }
    Long size=null;
    if (diskOffering.getDiskSize() == 0) {
      size=cmd.getSize();
      if (size == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
      }
    }
    rootDiskOffering.first(diskOffering);
    rootDiskOffering.second(size);
  }
 else {
    rootDiskOffering.first(offering);
    if (cmd.getDiskOfferingId() != null) {
      DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
      }
      Long size=null;
      if (diskOffering.getDiskSize() == 0) {
        size=cmd.getSize();
        if (size == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
        }
      }
      dataDiskOfferings.add(new Pair<DiskOfferingVO,Long>(diskOffering,size));
    }
  }
  String password=PasswordGenerator.generateRandomPassword(6);
  if (!template.getEnablePassword()) {
    password=""String_Node_Str"";
  }
  if (password == null || password.equals(""String_Node_Str"") || (!validPassword(password))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String networkDomain=null;
  if (networkDomain == null) {
    networkDomain=""String_Node_Str"" + Long.toHexString(owner.getId()) + _defaultNetworkDomain;
  }
  String userData=cmd.getUserData();
  byte[] decodedUserData=null;
  if (userData != null) {
    if (userData.length() >= 2 * MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    decodedUserData=org.apache.commons.codec.binary.Base64.decodeBase64(userData.getBytes());
    if (decodedUserData.length > MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (decodedUserData.length < 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String sshPublicKey=null;
  if (cmd.getSSHKeyPairName() != null && !cmd.getSSHKeyPairName().equals(""String_Node_Str"")) {
    Account account=UserContext.current().getCaller();
    SSHKeyPair pair=_sshKeyPairDao.findByName(account.getAccountId(),account.getDomainId(),cmd.getSSHKeyPairName());
    if (pair == null)     throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getSSHKeyPairName() + ""String_Node_Str"");
    sshPublicKey=pair.getPublicKey();
  }
  _accountMgr.checkAccess(caller,template);
  DataCenterDeployment plan=new DataCenterDeployment(dc.getId());
  s_logger.debug(""String_Node_Str"");
  if (dc.getNetworkType() == NetworkType.Basic && networkList == null) {
    Network defaultNetwork=_networkMgr.getSystemNetworkByZoneAndTrafficType(dc.getId(),TrafficType.Guest);
    if (defaultNetwork == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      networkList=new ArrayList<Long>();
      networkList.add(defaultNetwork.getId());
    }
  }
  if (networkList == null || networkList.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>();
  short defaultNetworkNumber=0;
  for (  Long networkId : networkList) {
    NetworkVO network=_networkDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
 else {
      if (!network.isShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(accountId,networkId);
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + networkId + ""String_Node_Str"");
        }
      }
      if (network.isDefault()) {
        defaultNetworkNumber++;
      }
      networks.add(new Pair<NetworkVO,NicProfile>(network,null));
    }
  }
  if (defaultNetworkNumber == 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (defaultNetworkNumber > 1) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long id=_vmDao.getNextInSequence(Long.class,""String_Node_Str"");
  String hostName=cmd.getName();
  String instanceName=VirtualMachineName.getVmName(id,owner.getId(),_instance);
  if (hostName == null) {
    hostName=instanceName;
  }
 else {
    hostName=hostName.toLowerCase();
    UserVm vm=_vmDao.findVmByZoneIdAndName(dc.getId(),hostName);
    if (vm != null && !(vm.getState() == State.Expunging || vm.getState() == State.Error)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + hostName + ""String_Node_Str""+ dc.getId());
    }
 else     if (!NetUtils.verifyHostName(hostName)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  HypervisorType hypervisorType=null;
  if (template == null || template.getHypervisorType() == null || template.getHypervisorType() == HypervisorType.None) {
    hypervisorType=cmd.getHypervisor();
  }
 else {
    hypervisorType=template.getHypervisorType();
  }
  UserVmVO vm=new UserVmVO(id,instanceName,cmd.getDisplayName(),template.getId(),hypervisorType,template.getGuestOSId(),offering.getOfferHA(),domainId,owner.getId(),offering.getId(),userData,hostName);
  if (sshPublicKey != null)   vm.setDetail(""String_Node_Str"",sshPublicKey);
  if (_itMgr.allocate(vm,template,offering,rootDiskOffering,dataDiskOfferings,networks,null,plan,cmd.getHypervisor(),owner) == null) {
    return null;
  }
  _vmDao.saveDetails(vm);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,accountId,dc.getId(),vm.getId(),vm.getName(),offering.getId(),template.getId(),null);
  _usageEventDao.persist(usageEvent);
  _accountMgr.incrementResourceCount(accountId,ResourceType.user_vm);
  try {
    if (group != null) {
      boolean addToGroup=addInstanceToGroup(Long.valueOf(id),group);
      if (!addToGroup) {
        throw new CloudRuntimeException(""String_Node_Str"" + group);
      }
    }
  }
 catch (  Exception ex) {
    throw new CloudRuntimeException(""String_Node_Str"" + group);
  }
  return vm;
}","@Override @DB public UserVm createVirtualMachine(DeployVMCmd cmd) throws InsufficientCapacityException, ResourceUnavailableException, ConcurrentOperationException, StorageUnavailableException {
  Account caller=UserContext.current().getCaller();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  List<Long> networkList=cmd.getNetworkIds();
  String group=cmd.getGroup();
  Account owner=_accountDao.findActiveAccount(accountName,domainId);
  if (owner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
  _accountMgr.checkAccess(caller,owner);
  long accountId=owner.getId();
  DataCenterVO dc=_dcDao.findById(cmd.getZoneId());
  if (dc == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getZoneId());
  }
  if (dc.getDomainId() != null) {
    DomainVO domain=_domainDao.findById(dc.getDomainId());
    if (domain == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + dc.getDomainId() + ""String_Node_Str""+ dc);
    }
    _accountMgr.checkAccess(caller,domain);
    _accountMgr.checkAccess(owner,domain);
  }
  List<StoragePoolVO> availablePools=_storagePoolDao.listPoolsByStatus(com.cloud.host.Status.Up);
  if (availablePools == null || availablePools.size() < 1) {
    throw new StorageUnavailableException(""String_Node_Str"",-1);
  }
  ServiceOfferingVO offering=_serviceOfferingDao.findById(cmd.getServiceOfferingId());
  if (offering == null || offering.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getServiceOfferingId());
  }
  VMTemplateVO template=_templateDao.findById(cmd.getTemplateId());
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getTemplateId());
  }
  boolean isIso=Storage.ImageFormat.ISO == template.getFormat();
  if (isIso && !template.isBootable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + template.getId());
  }
  Pair<DiskOfferingVO,Long> rootDiskOffering=new Pair<DiskOfferingVO,Long>(null,null);
  List<Pair<DiskOfferingVO,Long>> dataDiskOfferings=new ArrayList<Pair<DiskOfferingVO,Long>>();
  if (isIso) {
    if (cmd.getDiskOfferingId() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
    if (diskOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
    }
    Long size=null;
    if (diskOffering.getDiskSize() == 0) {
      size=cmd.getSize();
      if (size == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
      }
    }
    rootDiskOffering.first(diskOffering);
    rootDiskOffering.second(size);
  }
 else {
    rootDiskOffering.first(offering);
    if (cmd.getDiskOfferingId() != null) {
      DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
      }
      Long size=null;
      if (diskOffering.getDiskSize() == 0) {
        size=cmd.getSize();
        if (size == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
        }
      }
      dataDiskOfferings.add(new Pair<DiskOfferingVO,Long>(diskOffering,size));
    }
  }
  String password=PasswordGenerator.generateRandomPassword(6);
  if (!template.getEnablePassword()) {
    password=""String_Node_Str"";
  }
  if (password == null || password.equals(""String_Node_Str"") || (!validPassword(password))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String networkDomain=null;
  if (networkDomain == null) {
    networkDomain=""String_Node_Str"" + Long.toHexString(owner.getId()) + _defaultNetworkDomain;
  }
  String userData=cmd.getUserData();
  byte[] decodedUserData=null;
  if (userData != null) {
    if (userData.length() >= 2 * MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    decodedUserData=org.apache.commons.codec.binary.Base64.decodeBase64(userData.getBytes());
    if (decodedUserData.length > MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (decodedUserData.length < 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String sshPublicKey=null;
  if (cmd.getSSHKeyPairName() != null && !cmd.getSSHKeyPairName().equals(""String_Node_Str"")) {
    Account account=UserContext.current().getCaller();
    SSHKeyPair pair=_sshKeyPairDao.findByName(account.getAccountId(),account.getDomainId(),cmd.getSSHKeyPairName());
    if (pair == null)     throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getSSHKeyPairName() + ""String_Node_Str"");
    sshPublicKey=pair.getPublicKey();
  }
  _accountMgr.checkAccess(caller,template);
  DataCenterDeployment plan=new DataCenterDeployment(dc.getId());
  s_logger.debug(""String_Node_Str"");
  if (dc.getNetworkType() == NetworkType.Basic && networkList == null) {
    Network defaultNetwork=_networkMgr.getSystemNetworkByZoneAndTrafficType(dc.getId(),TrafficType.Guest);
    if (defaultNetwork == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      networkList=new ArrayList<Long>();
      networkList.add(defaultNetwork.getId());
    }
  }
  if (networkList == null || networkList.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>();
  short defaultNetworkNumber=0;
  for (  Long networkId : networkList) {
    NetworkVO network=_networkDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
 else {
      if (!network.isShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(accountId,networkId);
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + networkId + ""String_Node_Str"");
        }
      }
      if (network.isDefault()) {
        defaultNetworkNumber++;
      }
      networks.add(new Pair<NetworkVO,NicProfile>(network,null));
    }
  }
  if (defaultNetworkNumber == 0) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
 else   if (defaultNetworkNumber > 1) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long id=_vmDao.getNextInSequence(Long.class,""String_Node_Str"");
  String hostName=cmd.getName();
  String instanceName=VirtualMachineName.getVmName(id,owner.getId(),_instance);
  if (hostName == null) {
    hostName=instanceName;
  }
 else {
    hostName=hostName.toLowerCase();
    UserVm vm=_vmDao.findVmByZoneIdAndName(dc.getId(),hostName);
    if (vm != null && !(vm.getState() == State.Expunging || vm.getState() == State.Error)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + hostName + ""String_Node_Str""+ dc.getId());
    }
 else     if (!NetUtils.verifyHostName(hostName)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  HypervisorType hypervisorType=null;
  if (template == null || template.getHypervisorType() == null || template.getHypervisorType() == HypervisorType.None) {
    hypervisorType=cmd.getHypervisor();
  }
 else {
    hypervisorType=template.getHypervisorType();
  }
  UserVmVO vm=new UserVmVO(id,instanceName,cmd.getDisplayName(),template.getId(),hypervisorType,template.getGuestOSId(),offering.getOfferHA(),domainId,owner.getId(),offering.getId(),userData,hostName);
  if (sshPublicKey != null)   vm.setDetail(""String_Node_Str"",sshPublicKey);
  if (_itMgr.allocate(vm,template,offering,rootDiskOffering,dataDiskOfferings,networks,null,plan,cmd.getHypervisor(),owner) == null) {
    return null;
  }
  _vmDao.saveDetails(vm);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,accountId,dc.getId(),vm.getId(),vm.getName(),offering.getId(),template.getId(),null);
  _usageEventDao.persist(usageEvent);
  _accountMgr.incrementResourceCount(accountId,ResourceType.user_vm);
  try {
    if (group != null) {
      boolean addToGroup=addInstanceToGroup(Long.valueOf(id),group);
      if (!addToGroup) {
        throw new CloudRuntimeException(""String_Node_Str"" + group);
      }
    }
  }
 catch (  Exception ex) {
    throw new CloudRuntimeException(""String_Node_Str"" + group);
  }
  return vm;
}"
89848,"@Override @DB public boolean deletePool(DeletePoolCmd command) throws InvalidParameterValueException {
  Long id=command.getId();
  boolean deleteFlag=false;
  StoragePoolVO sPool=_storagePoolDao.findById(id);
  if (sPool == null) {
    s_logger.warn(""String_Node_Str"" + id);
    throw new InvalidParameterValueException(""String_Node_Str"" + id);
  }
  if (sPool.getPoolType().equals(StoragePoolType.LVM)) {
    s_logger.warn(""String_Node_Str"" + id);
    throw new InvalidParameterValueException(""String_Node_Str"" + id);
  }
  List<StoragePoolHostVO> hostPoolRecords=_storagePoolHostDao.listByPoolId(id);
  if (hostPoolRecords.size() == 0) {
    sPool.setUuid(null);
    _storagePoolDao.update(id,sPool);
    _storagePoolDao.remove(id);
    return true;
  }
 else {
    Pair<Long,Long> volumeRecords=_volsDao.getCountAndTotalByPool(id);
    if (volumeRecords.first() > 0) {
      s_logger.warn(""String_Node_Str"" + sPool.getName() + ""String_Node_Str"");
      return false;
    }
 else {
      StoragePoolVO lock=_storagePoolDao.acquireInLockTable(sPool.getId());
      try {
        if (lock == null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + sPool.getId());
          }
          return false;
        }
        for (        StoragePoolHostVO host : hostPoolRecords) {
          DeleteStoragePoolCommand cmd=new DeleteStoragePoolCommand(sPool);
          final Answer answer=_agentMgr.easySend(host.getHostId(),cmd);
          if (answer != null && answer.getResult()) {
            deleteFlag=true;
            break;
          }
        }
      }
  finally {
        if (lock != null) {
          _storagePoolDao.releaseFromLockTable(lock.getId());
        }
      }
      if (deleteFlag) {
        for (        StoragePoolHostVO host : hostPoolRecords) {
          _storagePoolHostDao.deleteStoragePoolHostDetails(host.getHostId(),host.getPoolId());
        }
        sPool.setUuid(null);
        _storagePoolDao.update(id,sPool);
        _storagePoolDao.remove(id);
        return true;
      }
    }
  }
  return false;
}","@Override @DB public boolean deletePool(DeletePoolCmd command) throws InvalidParameterValueException {
  Long id=command.getId();
  boolean deleteFlag=false;
  StoragePoolVO sPool=_storagePoolDao.findById(id);
  if (sPool == null) {
    s_logger.warn(""String_Node_Str"" + id);
    throw new InvalidParameterValueException(""String_Node_Str"" + id);
  }
  if (sPool.getPoolType().equals(StoragePoolType.LVM)) {
    s_logger.warn(""String_Node_Str"" + id);
    throw new InvalidParameterValueException(""String_Node_Str"" + id);
  }
  List<StoragePoolHostVO> hostPoolRecords=_storagePoolHostDao.listByPoolId(id);
  if (hostPoolRecords.size() == 0) {
    sPool.setUuid(null);
    _storagePoolDao.update(id,sPool);
    _storagePoolDao.remove(id);
    return true;
  }
 else {
    Pair<Long,Long> volumeRecords=_volsDao.getCountAndTotalByPool(id);
    if (volumeRecords.first() > 0) {
      s_logger.warn(""String_Node_Str"" + sPool.getName() + ""String_Node_Str"");
      return false;
    }
 else {
      StoragePoolVO lock=_storagePoolDao.acquireInLockTable(sPool.getId());
      try {
        if (lock == null) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + sPool.getId());
          }
          return false;
        }
        for (        StoragePoolHostVO host : hostPoolRecords) {
          DeleteStoragePoolCommand cmd=new DeleteStoragePoolCommand(sPool);
          final Answer answer=_agentMgr.easySend(host.getHostId(),cmd);
          if (answer != null && answer.getResult()) {
            deleteFlag=true;
            break;
          }
        }
      }
  finally {
        if (lock != null) {
          _storagePoolDao.releaseFromLockTable(lock.getId());
        }
      }
      if (deleteFlag) {
        for (        StoragePoolHostVO host : hostPoolRecords) {
          _storagePoolHostDao.deleteStoragePoolHostDetails(host.getHostId(),host.getPoolId());
        }
        sPool.setUuid(null);
        sPool.setStatus(Status.Removed);
        _storagePoolDao.update(id,sPool);
        _storagePoolDao.remove(id);
        return true;
      }
    }
  }
  return false;
}"
89849,"public VolumeTO(Volume volume,StoragePool pool){
  this.id=volume.getId();
  this.name=volume.getName();
  this.path=volume.getPath();
  this.size=volume.getSize();
  this.type=volume.getVolumeType();
  this.resourceType=volume.getStorageResourceType();
  this.storagePoolType=pool.getPoolType();
  this.storagePoolUuid=pool.getUuid();
  this.mountPoint=volume.getFolder();
  this.chainInfo=volume.getChainInfo();
  this.deviceId=volume.getDeviceId();
}","public VolumeTO(Volume volume,StoragePool pool){
  this.id=volume.getId();
  this.name=volume.getName();
  this.path=volume.getPath();
  this.size=volume.getSize();
  this.type=volume.getVolumeType();
  this.resourceType=volume.getStorageResourceType();
  this.storagePoolType=pool.getPoolType();
  this.storagePoolUuid=pool.getUuid();
  this.mountPoint=volume.getFolder();
  this.chainInfo=volume.getChainInfo();
  if (volume.getDeviceId() != null)   this.deviceId=volume.getDeviceId();
}"
89850,"@Override public void prepare(VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest) throws StorageUnavailableException, InsufficientStorageCapacityException {
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  List<VolumeVO> recreateVols=new ArrayList<VolumeVO>(vols.size());
  int i=0;
  for (  VolumeVO vol : vols) {
    Volume.State state=vol.getState();
    if (state == Volume.State.Ready) {
      if (vol.getPoolId() == null) {
        s_logger.warn(""String_Node_Str"" + vol.getId() + ""String_Node_Str"");
        throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",vol.getPoolId());
      }
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      if (pool.getRemoved() != null || pool.isInMaintenance()) {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ pool+ ""String_Node_Str"");
          }
          recreateVols.add(vol);
        }
 else {
          throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",pool.getId());
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
        }
        vm.addDisk(new VolumeTO(vol,pool));
      }
    }
 else     if (state == Volume.State.Allocated) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
      }
      recreateVols.add(vol);
    }
 else {
      throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",vol.getPoolId());
    }
  }
  for (  VolumeVO vol : recreateVols) {
    VolumeVO newVol;
    if (vol.getState() == Volume.State.Allocated) {
      newVol=vol;
    }
 else {
      newVol=switchVolume(vol);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ vol);
      }
    }
    try {
      _volsDao.update(newVol,Volume.Event.Create);
    }
 catch (    ConcurrentOperationException e) {
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol.getPoolId());
    }
    Pair<VolumeTO,StoragePool> created=createVolume(newVol,_diskOfferingDao.findById(newVol.getDiskOfferingId()),vm,vols,dest);
    if (created == null) {
      long poolId=newVol.getPoolId();
      newVol.setPoolId(null);
      try {
        _volsDao.update(newVol,Volume.Event.OperationFailed);
      }
 catch (      ConcurrentOperationException e) {
        throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
      }
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,poolId);
    }
    created.first().setDeviceId(newVol.getDeviceId().intValue());
    newVol.setStatus(AsyncInstanceCreateStatus.Created);
    newVol.setFolder(created.second().getPath());
    newVol.setPath(created.first().getPath());
    newVol.setSize(created.first().getSize());
    newVol.setPoolType(created.second().getPoolType());
    newVol.setPodId(created.second().getPodId());
    try {
      _volsDao.update(newVol,Volume.Event.OperationSucceeded);
    }
 catch (    ConcurrentOperationException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ created.second());
    }
    vm.addDisk(created.first());
  }
}","@Override public void prepare(VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest) throws StorageUnavailableException, InsufficientStorageCapacityException {
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  List<VolumeVO> recreateVols=new ArrayList<VolumeVO>(vols.size());
  int i=0;
  for (  VolumeVO vol : vols) {
    Volume.State state=vol.getState();
    if (state == Volume.State.Ready) {
      if (vol.getPoolId() == null) {
        s_logger.warn(""String_Node_Str"" + vol.getId() + ""String_Node_Str"");
        throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",vol.getPoolId());
      }
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      if (pool.getRemoved() != null || pool.isInMaintenance()) {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ pool+ ""String_Node_Str"");
          }
          recreateVols.add(vol);
        }
 else {
          throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",pool.getId());
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
        }
        vm.addDisk(new VolumeTO(vol,pool));
      }
    }
 else     if (state == Volume.State.Allocated) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
      }
      recreateVols.add(vol);
    }
 else {
      throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",vol.getPoolId());
    }
  }
  for (  VolumeVO vol : recreateVols) {
    VolumeVO newVol;
    if (vol.getState() == Volume.State.Allocated) {
      newVol=vol;
    }
 else {
      newVol=switchVolume(vol);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ vol);
      }
    }
    try {
      _volsDao.update(newVol,Volume.Event.Create);
    }
 catch (    ConcurrentOperationException e) {
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol.getPoolId());
    }
    Pair<VolumeTO,StoragePool> created=createVolume(newVol,_diskOfferingDao.findById(newVol.getDiskOfferingId()),vm,vols,dest);
    if (created == null) {
      Long poolId=newVol.getPoolId();
      newVol.setPoolId(null);
      try {
        _volsDao.update(newVol,Volume.Event.OperationFailed);
      }
 catch (      ConcurrentOperationException e) {
        throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
      }
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,poolId == null ? -1L : poolId);
    }
    created.first().setDeviceId(newVol.getDeviceId().intValue());
    newVol.setStatus(AsyncInstanceCreateStatus.Created);
    newVol.setFolder(created.second().getPath());
    newVol.setPath(created.first().getPath());
    newVol.setSize(created.first().getSize());
    newVol.setPoolType(created.second().getPoolType());
    newVol.setPodId(created.second().getPodId());
    try {
      _volsDao.update(newVol,Volume.Event.OperationSucceeded);
    }
 catch (    ConcurrentOperationException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ created.second());
    }
    vm.addDisk(created.first());
  }
}"
89851,"@Override public boolean deleteVolume(DeleteVolumeCmd cmd) throws ConcurrentOperationException {
  Account account=UserContext.current().getCaller();
  Long volumeId=cmd.getId();
  boolean isAdmin;
  if (account == null) {
    isAdmin=true;
  }
 else {
    isAdmin=isAdmin(account.getType());
  }
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId);
  }
  if (!isAdmin) {
    if (account.getId() != volume.getAccountId()) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str""+ account.getAccountName());
    }
  }
 else   if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),volume.getDomainId())) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  if (volume.getInstanceId() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getState() != Volume.State.Destroy) {
    destroyVolume(volume);
  }
  expungeVolume(volume);
  return true;
}","@Override public boolean deleteVolume(DeleteVolumeCmd cmd) throws ConcurrentOperationException {
  Account account=UserContext.current().getCaller();
  Long volumeId=cmd.getId();
  boolean isAdmin;
  if (account == null) {
    isAdmin=true;
  }
 else {
    isAdmin=isAdmin(account.getType());
  }
  VolumeVO volume=_volsDao.findById(volumeId);
  if (volume == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId);
  }
  if (!isAdmin) {
    if (account.getId() != volume.getAccountId()) {
      throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str""+ account.getAccountName());
    }
  }
 else   if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),volume.getDomainId())) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  if (volume.getInstanceId() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (volume.getState() != Volume.State.Destroy) {
    destroyVolume(volume);
  }
  try {
    expungeVolume(volume);
  }
 catch (  Exception e) {
    s_logger.warn(""String_Node_Str"" + e);
    return false;
  }
  return true;
}"
89852,"@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof CreateCommand) {
    return execute((CreateCommand)cmd);
  }
 else   if (cmd instanceof SetPortForwardingRulesCommand) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (cmd instanceof LoadBalancerCfgCommand) {
    return execute((LoadBalancerCfgCommand)cmd);
  }
 else   if (cmd instanceof LoadBalancerConfigCommand) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (cmd instanceof IPAssocCommand) {
    return execute((IPAssocCommand)cmd);
  }
 else   if (cmd instanceof CheckConsoleProxyLoadCommand) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof WatchConsoleProxyLoadCommand) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof SavePasswordCommand) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (cmd instanceof DhcpEntryCommand) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (cmd instanceof VmDataCommand) {
    return execute((VmDataCommand)cmd);
  }
 else   if (cmd instanceof ReadyCommand) {
    return execute((ReadyCommand)cmd);
  }
 else   if (cmd instanceof GetHostStatsCommand) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (cmd instanceof GetVmStatsCommand) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (cmd instanceof CheckHealthCommand) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (cmd instanceof StopCommand) {
    return execute((StopCommand)cmd);
  }
 else   if (cmd instanceof RebootRouterCommand) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (cmd instanceof RebootCommand) {
    return execute((RebootCommand)cmd);
  }
 else   if (cmd instanceof CheckVirtualMachineCommand) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (cmd instanceof PrepareForMigrationCommand) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (cmd instanceof MigrateCommand) {
    return execute((MigrateCommand)cmd);
  }
 else   if (cmd instanceof DestroyCommand) {
    return execute((DestroyCommand)cmd);
  }
 else   if (cmd instanceof ShareCommand) {
    return execute((ShareCommand)cmd);
  }
 else   if (cmd instanceof ModifyStoragePoolCommand) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof DeleteStoragePoolCommand) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof CopyVolumeCommand) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachVolumeCommand) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachIsoCommand) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (cmd instanceof ManageSnapshotCommand) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (cmd instanceof BackupSnapshotCommand) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotBackupCommand) {
    return execute((DeleteSnapshotBackupCommand)cmd);
  }
 else   if (cmd instanceof CreateVolumeFromSnapshotCommand) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotsDirCommand) {
    return execute((DeleteSnapshotsDirCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof GetStorageStatsCommand) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (cmd instanceof PrimaryStorageDownloadCommand) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (cmd instanceof GetVncPortCommand) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (cmd instanceof SetupCommand) {
    return execute((SetupCommand)cmd);
  }
 else   if (cmd instanceof MaintainCommand) {
    return execute((MaintainCommand)cmd);
  }
 else   if (cmd instanceof PingTestCommand) {
    return execute((PingTestCommand)cmd);
  }
 else   if (cmd instanceof CheckOnHostCommand) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (cmd instanceof ModifySshKeysCommand) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (cmd instanceof PoolEjectCommand) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (cmd instanceof StartCommand) {
    return execute((StartCommand)cmd);
  }
 else   if (cmd instanceof RemoteAccessVpnCfgCommand) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (cmd instanceof VpnUsersCfgCommand) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (cmd instanceof CheckSshCommand) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (cmd instanceof SecurityIngressRulesCmd) {
    return execute((SecurityIngressRulesCmd)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}","@Override public Answer executeRequest(Command cmd){
  if (cmd instanceof CreateCommand) {
    return execute((CreateCommand)cmd);
  }
 else   if (cmd instanceof SetPortForwardingRulesCommand) {
    return execute((SetPortForwardingRulesCommand)cmd);
  }
 else   if (cmd instanceof LoadBalancerCfgCommand) {
    return execute((LoadBalancerCfgCommand)cmd);
  }
 else   if (cmd instanceof LoadBalancerConfigCommand) {
    return execute((LoadBalancerConfigCommand)cmd);
  }
 else   if (cmd instanceof IPAssocCommand) {
    return execute((IPAssocCommand)cmd);
  }
 else   if (cmd instanceof CheckConsoleProxyLoadCommand) {
    return execute((CheckConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof WatchConsoleProxyLoadCommand) {
    return execute((WatchConsoleProxyLoadCommand)cmd);
  }
 else   if (cmd instanceof SavePasswordCommand) {
    return execute((SavePasswordCommand)cmd);
  }
 else   if (cmd instanceof DhcpEntryCommand) {
    return execute((DhcpEntryCommand)cmd);
  }
 else   if (cmd instanceof VmDataCommand) {
    return execute((VmDataCommand)cmd);
  }
 else   if (cmd instanceof ReadyCommand) {
    return execute((ReadyCommand)cmd);
  }
 else   if (cmd instanceof GetHostStatsCommand) {
    return execute((GetHostStatsCommand)cmd);
  }
 else   if (cmd instanceof GetVmStatsCommand) {
    return execute((GetVmStatsCommand)cmd);
  }
 else   if (cmd instanceof CheckHealthCommand) {
    return execute((CheckHealthCommand)cmd);
  }
 else   if (cmd instanceof StopCommand) {
    return execute((StopCommand)cmd);
  }
 else   if (cmd instanceof RebootRouterCommand) {
    return execute((RebootRouterCommand)cmd);
  }
 else   if (cmd instanceof RebootCommand) {
    return execute((RebootCommand)cmd);
  }
 else   if (cmd instanceof CheckVirtualMachineCommand) {
    return execute((CheckVirtualMachineCommand)cmd);
  }
 else   if (cmd instanceof PrepareForMigrationCommand) {
    return execute((PrepareForMigrationCommand)cmd);
  }
 else   if (cmd instanceof MigrateCommand) {
    return execute((MigrateCommand)cmd);
  }
 else   if (cmd instanceof DestroyCommand) {
    return execute((DestroyCommand)cmd);
  }
 else   if (cmd instanceof ShareCommand) {
    return execute((ShareCommand)cmd);
  }
 else   if (cmd instanceof ModifyStoragePoolCommand) {
    return execute((ModifyStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof DeleteStoragePoolCommand) {
    return execute((DeleteStoragePoolCommand)cmd);
  }
 else   if (cmd instanceof CopyVolumeCommand) {
    return execute((CopyVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachVolumeCommand) {
    return execute((AttachVolumeCommand)cmd);
  }
 else   if (cmd instanceof AttachIsoCommand) {
    return execute((AttachIsoCommand)cmd);
  }
 else   if (cmd instanceof ManageSnapshotCommand) {
    return execute((ManageSnapshotCommand)cmd);
  }
 else   if (cmd instanceof BackupSnapshotCommand) {
    return execute((BackupSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotBackupCommand) {
    return execute((DeleteSnapshotBackupCommand)cmd);
  }
 else   if (cmd instanceof CreateVolumeFromSnapshotCommand) {
    return execute((CreateVolumeFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof DeleteSnapshotsDirCommand) {
    return execute((DeleteSnapshotsDirCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromVolumeCommand) {
    return execute((CreatePrivateTemplateFromVolumeCommand)cmd);
  }
 else   if (cmd instanceof CreatePrivateTemplateFromSnapshotCommand) {
    return execute((CreatePrivateTemplateFromSnapshotCommand)cmd);
  }
 else   if (cmd instanceof GetStorageStatsCommand) {
    return execute((GetStorageStatsCommand)cmd);
  }
 else   if (cmd instanceof PrimaryStorageDownloadCommand) {
    return execute((PrimaryStorageDownloadCommand)cmd);
  }
 else   if (cmd instanceof GetVncPortCommand) {
    return execute((GetVncPortCommand)cmd);
  }
 else   if (cmd instanceof SetupCommand) {
    return execute((SetupCommand)cmd);
  }
 else   if (cmd instanceof MaintainCommand) {
    return execute((MaintainCommand)cmd);
  }
 else   if (cmd instanceof PingTestCommand) {
    return execute((PingTestCommand)cmd);
  }
 else   if (cmd instanceof CheckOnHostCommand) {
    return execute((CheckOnHostCommand)cmd);
  }
 else   if (cmd instanceof ModifySshKeysCommand) {
    return execute((ModifySshKeysCommand)cmd);
  }
 else   if (cmd instanceof PoolEjectCommand) {
    return execute((PoolEjectCommand)cmd);
  }
 else   if (cmd instanceof StartCommand) {
    return execute((StartCommand)cmd);
  }
 else   if (cmd instanceof RemoteAccessVpnCfgCommand) {
    return execute((RemoteAccessVpnCfgCommand)cmd);
  }
 else   if (cmd instanceof VpnUsersCfgCommand) {
    return execute((VpnUsersCfgCommand)cmd);
  }
 else   if (cmd instanceof CheckSshCommand) {
    return execute((CheckSshCommand)cmd);
  }
 else   if (cmd instanceof SecurityIngressRulesCmd) {
    return execute((SecurityIngressRulesCmd)cmd);
  }
 else   if (cmd instanceof OvsCreateGreTunnelCommand) {
    return execute((OvsCreateGreTunnelCommand)cmd);
  }
 else   if (cmd instanceof OvsSetTagAndFlowCommand) {
    return execute((OvsSetTagAndFlowCommand)cmd);
  }
 else {
    return Answer.createUnsupportedCommandAnswer(cmd);
  }
}"
89853,"/** 
 * @return the type of IP address to allocate as the primary ip address to a guest
 */
NetworkOffering.GuestIpType getGuestIpType();","/** 
 * @return the type of IP address to allocate as the primary ip address to a guest
 */
Network.GuestIpType getGuestIpType();"
89854,"/** 
 * Creates a new network offering
 * @param name
 * @param displayText
 * @param type
 * @param trafficType
 * @param tags
 * @param maxConnections
 * @param id
 * @param specifyVlan;
 * @return network offering object
 */
NetworkOfferingVO createNetworkOffering(long userId,String name,String displayText,GuestIpType type,TrafficType trafficType,String tags,Integer maxConnections,boolean specifyVlan,Availability availability);","/** 
 * Creates a new network offering
 * @param name
 * @param displayText
 * @param trafficType
 * @param tags
 * @param maxConnections
 * @param id
 * @param specifyVlan;
 * @return network offering object
 */
NetworkOfferingVO createNetworkOffering(long userId,String name,String displayText,TrafficType trafficType,String tags,Integer maxConnections,boolean specifyVlan,Availability availability);"
89855,"@Override public NetworkOfferingVO createNetworkOffering(long userId,String name,String displayText,GuestIpType type,TrafficType trafficType,String tags,Integer maxConnections,boolean specifyVlan,Availability availability){
  String networkRateStr=_configDao.getValue(""String_Node_Str"");
  String multicastRateStr=_configDao.getValue(""String_Node_Str"");
  int networkRate=((networkRateStr == null) ? 200 : Integer.parseInt(networkRateStr));
  int multicastRate=((multicastRateStr == null) ? 10 : Integer.parseInt(multicastRateStr));
  tags=cleanupTags(tags);
  NetworkOfferingVO offering=new NetworkOfferingVO(name,displayText,trafficType,false,specifyVlan,networkRate,multicastRate,maxConnections,false,availability,false,false,false,false,false,false,false);
  if ((offering=_networkOfferingDao.persist(offering)) != null) {
    saveConfigurationEvent(userId,null,EventTypes.EVENT_NETWORK_OFFERING_CREATE,""String_Node_Str"" + name + ""String_Node_Str"",""String_Node_Str"" + offering.getId(),""String_Node_Str"" + name,""String_Node_Str"" + displayText,""String_Node_Str"" + tags);
    return offering;
  }
 else {
    return null;
  }
}","@Override public NetworkOfferingVO createNetworkOffering(long userId,String name,String displayText,TrafficType trafficType,String tags,Integer maxConnections,boolean specifyVlan,Availability availability){
  String networkRateStr=_configDao.getValue(""String_Node_Str"");
  String multicastRateStr=_configDao.getValue(""String_Node_Str"");
  int networkRate=((networkRateStr == null) ? 200 : Integer.parseInt(networkRateStr));
  int multicastRate=((multicastRateStr == null) ? 10 : Integer.parseInt(multicastRateStr));
  tags=cleanupTags(tags);
  NetworkOfferingVO offering=new NetworkOfferingVO(name,displayText,trafficType,false,specifyVlan,networkRate,multicastRate,maxConnections,false,availability,false,false,false,false,false,false,false);
  if ((offering=_networkOfferingDao.persist(offering)) != null) {
    saveConfigurationEvent(userId,null,EventTypes.EVENT_NETWORK_OFFERING_CREATE,""String_Node_Str"" + name + ""String_Node_Str"",""String_Node_Str"" + offering.getId(),""String_Node_Str"" + name,""String_Node_Str"" + displayText,""String_Node_Str"" + tags);
    return offering;
  }
 else {
    return null;
  }
}"
89856,"@Override public ServiceOfferingVO createServiceOffering(long userId,String name,int cpu,int ramSize,int speed,String displayText,boolean localStorageRequired,boolean offerHA,boolean useVirtualNetwork,String tags,Long domainId){
  String networkRateStr=_configDao.getValue(""String_Node_Str"");
  String multicastRateStr=_configDao.getValue(""String_Node_Str"");
  int networkRate=((networkRateStr == null) ? 200 : Integer.parseInt(networkRateStr));
  int multicastRate=((multicastRateStr == null) ? 10 : Integer.parseInt(multicastRateStr));
  NetworkOffering.GuestIpType guestIpType=useVirtualNetwork ? NetworkOffering.GuestIpType.Virtual : NetworkOffering.GuestIpType.Direct;
  tags=cleanupTags(tags);
  ServiceOfferingVO offering=new ServiceOfferingVO(name,cpu,ramSize,speed,networkRate,multicastRate,offerHA,displayText,guestIpType,localStorageRequired,false,tags,false,domainId);
  if ((offering=_serviceOfferingDao.persist(offering)) != null) {
    saveConfigurationEvent(userId,null,EventTypes.EVENT_SERVICE_OFFERING_CREATE,""String_Node_Str"" + name + ""String_Node_Str"",""String_Node_Str"" + offering.getId(),""String_Node_Str"" + name,""String_Node_Str"" + cpu,""String_Node_Str"" + ramSize,""String_Node_Str"" + speed,""String_Node_Str"" + displayText,""String_Node_Str"" + guestIpType,""String_Node_Str"" + localStorageRequired,""String_Node_Str"" + offerHA,""String_Node_Str"" + useVirtualNetwork,""String_Node_Str"" + tags);
    return offering;
  }
 else {
    return null;
  }
}","@Override public ServiceOfferingVO createServiceOffering(long userId,String name,int cpu,int ramSize,int speed,String displayText,boolean localStorageRequired,boolean offerHA,boolean useVirtualNetwork,String tags,Long domainId){
  String networkRateStr=_configDao.getValue(""String_Node_Str"");
  String multicastRateStr=_configDao.getValue(""String_Node_Str"");
  int networkRate=((networkRateStr == null) ? 200 : Integer.parseInt(networkRateStr));
  int multicastRate=((multicastRateStr == null) ? 10 : Integer.parseInt(multicastRateStr));
  Network.GuestIpType guestIpType=useVirtualNetwork ? Network.GuestIpType.Virtual : Network.GuestIpType.Direct;
  tags=cleanupTags(tags);
  ServiceOfferingVO offering=new ServiceOfferingVO(name,cpu,ramSize,speed,networkRate,multicastRate,offerHA,displayText,guestIpType,localStorageRequired,false,tags,false,domainId);
  if ((offering=_serviceOfferingDao.persist(offering)) != null) {
    saveConfigurationEvent(userId,null,EventTypes.EVENT_SERVICE_OFFERING_CREATE,""String_Node_Str"" + name + ""String_Node_Str"",""String_Node_Str"" + offering.getId(),""String_Node_Str"" + name,""String_Node_Str"" + cpu,""String_Node_Str"" + ramSize,""String_Node_Str"" + speed,""String_Node_Str"" + displayText,""String_Node_Str"" + guestIpType,""String_Node_Str"" + localStorageRequired,""String_Node_Str"" + offerHA,""String_Node_Str"" + useVirtualNetwork,""String_Node_Str"" + tags);
    return offering;
  }
 else {
    return null;
  }
}"
89857,"@Override public ServiceOffering updateServiceOffering(UpdateServiceOfferingCmd cmd){
  String displayText=cmd.getDisplayText();
  Long id=cmd.getId();
  String name=cmd.getServiceOfferingName();
  Boolean ha=cmd.getOfferHa();
  Long userId=UserContext.current().getCallerUserId();
  Long domainId=cmd.getDomainId();
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  ServiceOfferingVO offeringHandle=_serviceOfferingDao.findById(id);
  ;
  if (offeringHandle == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + id);
  }
  boolean updateNeeded=(name != null || displayText != null || ha != null || domainId != null);
  if (!updateNeeded) {
    return _serviceOfferingDao.findById(id);
  }
  ServiceOfferingVO offering=_serviceOfferingDao.createForUpdate(id);
  if (name != null) {
    offering.setName(name);
  }
  if (displayText != null) {
    offering.setDisplayText(displayText);
  }
  if (ha != null) {
    offering.setOfferHA(ha);
  }
  if (domainId != null) {
    offering.setDomainId(domainId);
  }
  if (_serviceOfferingDao.update(id,offering)) {
    offering=_serviceOfferingDao.findById(id);
    saveConfigurationEvent(userId,null,EventTypes.EVENT_SERVICE_OFFERING_EDIT,""String_Node_Str"" + offering.getName() + ""String_Node_Str"",""String_Node_Str"" + offering.getId(),""String_Node_Str"" + offering.getName(),""String_Node_Str"" + offering.getDisplayText(),""String_Node_Str"" + offering.getOfferHA(),""String_Node_Str"" + (offering.getGuestIpType() == NetworkOffering.GuestIpType.Virtual),""String_Node_Str"" + offering.getTags(),""String_Node_Str"" + offering.getDomainId());
    return offering;
  }
 else {
    return null;
  }
}","@Override public ServiceOffering updateServiceOffering(UpdateServiceOfferingCmd cmd){
  String displayText=cmd.getDisplayText();
  Long id=cmd.getId();
  String name=cmd.getServiceOfferingName();
  Boolean ha=cmd.getOfferHa();
  Long userId=UserContext.current().getCallerUserId();
  Long domainId=cmd.getDomainId();
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  ServiceOfferingVO offeringHandle=_serviceOfferingDao.findById(id);
  ;
  if (offeringHandle == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + id);
  }
  boolean updateNeeded=(name != null || displayText != null || ha != null || domainId != null);
  if (!updateNeeded) {
    return _serviceOfferingDao.findById(id);
  }
  ServiceOfferingVO offering=_serviceOfferingDao.createForUpdate(id);
  if (name != null) {
    offering.setName(name);
  }
  if (displayText != null) {
    offering.setDisplayText(displayText);
  }
  if (ha != null) {
    offering.setOfferHA(ha);
  }
  if (domainId != null) {
    offering.setDomainId(domainId);
  }
  if (_serviceOfferingDao.update(id,offering)) {
    offering=_serviceOfferingDao.findById(id);
    saveConfigurationEvent(userId,null,EventTypes.EVENT_SERVICE_OFFERING_EDIT,""String_Node_Str"" + offering.getName() + ""String_Node_Str"",""String_Node_Str"" + offering.getId(),""String_Node_Str"" + offering.getName(),""String_Node_Str"" + offering.getDisplayText(),""String_Node_Str"" + offering.getOfferHA(),""String_Node_Str"" + (offering.getGuestIpType() == Network.GuestIpType.Virtual),""String_Node_Str"" + offering.getTags(),""String_Node_Str"" + offering.getDomainId());
    return offering;
  }
 else {
    return null;
  }
}"
89858,"@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + name);
  }
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  _proxyRamSize=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_PROXY_VM_RAMSIZE);
  String value=configs.get(""String_Node_Str"");
  _proxyCmdPort=NumbersUtil.parseInt(value,DEFAULT_PROXY_CMD_PORT);
  value=configs.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str"")) {
    _sslEnabled=true;
  }
  value=configs.get(""String_Node_Str"");
  _capacityScanInterval=NumbersUtil.parseLong(value,DEFAULT_CAPACITY_SCAN_INTERVAL);
  _capacityPerProxy=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_PROXY_CAPACITY);
  _standbyCapacity=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_STANDBY_CAPACITY);
  _proxySessionTimeoutValue=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_PROXY_SESSION_TIMEOUT);
  value=configs.get(""String_Node_Str"");
  if (value != null) {
    _consoleProxyPort=NumbersUtil.parseInt(value,ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);
  }
  value=configs.get(""String_Node_Str"");
  if (value != null) {
    _consoleProxyUrlPort=NumbersUtil.parseInt(value,ConsoleProxyManager.DEFAULT_PROXY_URL_PORT);
  }
  value=configs.get(Config.ConsoleProxyDisableRpFilter.key());
  if (value != null && value.equalsIgnoreCase(""String_Node_Str"")) {
    _disable_rp_filter=true;
  }
  value=configs.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str"")) {
    _use_lvm=true;
  }
  value=configs.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str"")) {
    _use_storage_vm=true;
  }
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + _capacityPerProxy);
    s_logger.info(""String_Node_Str"" + _standbyCapacity);
  }
  _domain=configs.get(""String_Node_Str"");
  if (_domain == null) {
    _domain=""String_Node_Str"";
  }
  _instance=configs.get(""String_Node_Str"");
  if (_instance == null) {
    _instance=""String_Node_Str"";
  }
  value=(String)params.get(""String_Node_Str"");
  _ssh_sleep=NumbersUtil.parseInt(value,5) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _ssh_retry=NumbersUtil.parseInt(value,3);
  Map<String,String> agentMgrConfigs=configDao.getConfiguration(""String_Node_Str"",params);
  _mgmt_host=agentMgrConfigs.get(""String_Node_Str"");
  if (_mgmt_host == null) {
    s_logger.warn(""String_Node_Str"");
  }
  value=agentMgrConfigs.get(""String_Node_Str"");
  _mgmt_port=NumbersUtil.parseInt(value,8250);
  _consoleProxyAllocators=locator.getAdapters(ConsoleProxyAllocator.class);
  if (_consoleProxyAllocators == null || !_consoleProxyAllocators.isSet()) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _listener=new ConsoleProxyListener(this);
  _agentMgr.registerForHostEvents(_listener,true,true,false);
  HighAvailabilityManager haMgr=locator.getManager(HighAvailabilityManager.class);
  if (haMgr != null) {
    haMgr.registerHandler(VirtualMachine.Type.ConsoleProxy,this);
  }
  _itMgr.registerGuru(VirtualMachine.Type.ConsoleProxy,this);
  boolean useLocalStorage=Boolean.parseBoolean(configs.get(Config.SystemVMUseLocalStorage.key()));
  _serviceOffering=new ServiceOfferingVO(""String_Node_Str"",1,_proxyRamSize,0,0,0,true,null,NetworkOffering.GuestIpType.Virtual,useLocalStorage,true,null,true);
  _serviceOffering.setUniqueName(""String_Node_Str"");
  _serviceOffering=_offeringDao.persistSystemServiceOffering(_serviceOffering);
  _template=_templateDao.findConsoleProxyTemplate();
  if (_template == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _capacityScanScheduler.scheduleAtFixedRate(getCapacityScanTask(),STARTUP_DELAY,_capacityScanInterval,TimeUnit.MILLISECONDS);
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"");
  }
  return true;
}","@Override public boolean configure(String name,Map<String,Object> params) throws ConfigurationException {
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + name);
  }
  _name=name;
  ComponentLocator locator=ComponentLocator.getCurrentLocator();
  ConfigurationDao configDao=locator.getDao(ConfigurationDao.class);
  if (configDao == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  Map<String,String> configs=configDao.getConfiguration(""String_Node_Str"",params);
  _proxyRamSize=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_PROXY_VM_RAMSIZE);
  String value=configs.get(""String_Node_Str"");
  _proxyCmdPort=NumbersUtil.parseInt(value,DEFAULT_PROXY_CMD_PORT);
  value=configs.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str"")) {
    _sslEnabled=true;
  }
  value=configs.get(""String_Node_Str"");
  _capacityScanInterval=NumbersUtil.parseLong(value,DEFAULT_CAPACITY_SCAN_INTERVAL);
  _capacityPerProxy=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_PROXY_CAPACITY);
  _standbyCapacity=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_STANDBY_CAPACITY);
  _proxySessionTimeoutValue=NumbersUtil.parseInt(configs.get(""String_Node_Str""),DEFAULT_PROXY_SESSION_TIMEOUT);
  value=configs.get(""String_Node_Str"");
  if (value != null) {
    _consoleProxyPort=NumbersUtil.parseInt(value,ConsoleProxyManager.DEFAULT_PROXY_VNC_PORT);
  }
  value=configs.get(""String_Node_Str"");
  if (value != null) {
    _consoleProxyUrlPort=NumbersUtil.parseInt(value,ConsoleProxyManager.DEFAULT_PROXY_URL_PORT);
  }
  value=configs.get(Config.ConsoleProxyDisableRpFilter.key());
  if (value != null && value.equalsIgnoreCase(""String_Node_Str"")) {
    _disable_rp_filter=true;
  }
  value=configs.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str"")) {
    _use_lvm=true;
  }
  value=configs.get(""String_Node_Str"");
  if (value != null && value.equalsIgnoreCase(""String_Node_Str"")) {
    _use_storage_vm=true;
  }
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"" + _capacityPerProxy);
    s_logger.info(""String_Node_Str"" + _standbyCapacity);
  }
  _domain=configs.get(""String_Node_Str"");
  if (_domain == null) {
    _domain=""String_Node_Str"";
  }
  _instance=configs.get(""String_Node_Str"");
  if (_instance == null) {
    _instance=""String_Node_Str"";
  }
  value=(String)params.get(""String_Node_Str"");
  _ssh_sleep=NumbersUtil.parseInt(value,5) * 1000;
  value=(String)params.get(""String_Node_Str"");
  _ssh_retry=NumbersUtil.parseInt(value,3);
  Map<String,String> agentMgrConfigs=configDao.getConfiguration(""String_Node_Str"",params);
  _mgmt_host=agentMgrConfigs.get(""String_Node_Str"");
  if (_mgmt_host == null) {
    s_logger.warn(""String_Node_Str"");
  }
  value=agentMgrConfigs.get(""String_Node_Str"");
  _mgmt_port=NumbersUtil.parseInt(value,8250);
  _consoleProxyAllocators=locator.getAdapters(ConsoleProxyAllocator.class);
  if (_consoleProxyAllocators == null || !_consoleProxyAllocators.isSet()) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _listener=new ConsoleProxyListener(this);
  _agentMgr.registerForHostEvents(_listener,true,true,false);
  HighAvailabilityManager haMgr=locator.getManager(HighAvailabilityManager.class);
  if (haMgr != null) {
    haMgr.registerHandler(VirtualMachine.Type.ConsoleProxy,this);
  }
  _itMgr.registerGuru(VirtualMachine.Type.ConsoleProxy,this);
  boolean useLocalStorage=Boolean.parseBoolean(configs.get(Config.SystemVMUseLocalStorage.key()));
  _serviceOffering=new ServiceOfferingVO(""String_Node_Str"",1,_proxyRamSize,0,0,0,true,null,Network.GuestIpType.Virtual,useLocalStorage,true,null,true);
  _serviceOffering.setUniqueName(""String_Node_Str"");
  _serviceOffering=_offeringDao.persistSystemServiceOffering(_serviceOffering);
  _template=_templateDao.findConsoleProxyTemplate();
  if (_template == null) {
    throw new ConfigurationException(""String_Node_Str"");
  }
  _capacityScanScheduler.scheduleAtFixedRate(getCapacityScanTask(),STARTUP_DELAY,_capacityScanInterval,TimeUnit.MILLISECONDS);
  if (s_logger.isInfoEnabled()) {
    s_logger.info(""String_Node_Str"");
  }
  return true;
}"
89859,"private void migrateServiceOfferings(){
  System.out.println(""String_Node_Str"");
  long seq=getServiceOfferingStartSequence();
  List<ServiceOffering20VO> oldServiceOfferings=_serviceOffering20Dao.listAllIncludingRemoved();
  for (  ServiceOffering20VO so20 : oldServiceOfferings) {
    ServiceOffering21VO so21=new ServiceOffering21VO(so20.getName(),so20.getCpu(),so20.getRamSize(),so20.getSpeed(),so20.getRateMbps(),so20.getMulticastRateMbps(),so20.getOfferHA(),so20.getDisplayText(),so20.getGuestIpType(),so20.getUseLocalStorage(),false,null);
    so21.setId(seq++);
    so21.setDiskSize(0);
    so21=_serviceOffering21Dao.persist(so21);
    if (so20.getId().longValue() != so21.getId()) {
      updateServiceOfferingReferences(so20.getId().longValue(),so21.getId());
    }
  }
  boolean useLocalStorage=Boolean.parseBoolean(_configDao.getValue(Config.SystemVMUseLocalStorage.key()));
  int proxyRamSize=NumbersUtil.parseInt(_configDao.getValue(Config.ConsoleProxyRamSize.key()),ConsoleProxyManager.DEFAULT_PROXY_VM_RAMSIZE);
  ServiceOffering21VO soConsoleProxy=new ServiceOffering21VO(""String_Node_Str"",1,proxyRamSize,0,0,0,false,null,NetworkOffering.GuestIpType.Virtual,useLocalStorage,true,null);
  soConsoleProxy.setId(seq++);
  soConsoleProxy.setUniqueName(""String_Node_Str"");
  soConsoleProxy=_serviceOffering21Dao.persist(soConsoleProxy);
  _consoleProxyServiceOfferingId=soConsoleProxy.getId();
  int secStorageVmRamSize=NumbersUtil.parseInt(_configDao.getValue(Config.SecStorageVmRamSize.key()),SecondaryStorageVmManager.DEFAULT_SS_VM_RAMSIZE);
  ServiceOffering21VO soSecondaryVm=new ServiceOffering21VO(""String_Node_Str"",1,secStorageVmRamSize,0,0,0,false,null,NetworkOffering.GuestIpType.Virtual,useLocalStorage,true,null);
  soSecondaryVm.setId(seq++);
  soSecondaryVm.setUniqueName(""String_Node_Str"");
  soSecondaryVm=_serviceOffering21Dao.persist(soSecondaryVm);
  _secStorageServiceOfferingId=soSecondaryVm.getId();
  int routerRamSize=NumbersUtil.parseInt(_configDao.getValue(""String_Node_Str""),128);
  ServiceOffering21VO soDomainRouter=new ServiceOffering21VO(""String_Node_Str"",1,routerRamSize,0,0,0,false,null,NetworkOffering.GuestIpType.Virtual,useLocalStorage,true,null);
  soDomainRouter.setId(seq++);
  soDomainRouter.setUniqueName(""String_Node_Str"");
  soDomainRouter=_serviceOffering21Dao.persist(soDomainRouter);
  _domRServiceOfferingId=soDomainRouter.getId();
  System.out.println(""String_Node_Str"");
}","private void migrateServiceOfferings(){
  System.out.println(""String_Node_Str"");
  long seq=getServiceOfferingStartSequence();
  List<ServiceOffering20VO> oldServiceOfferings=_serviceOffering20Dao.listAllIncludingRemoved();
  for (  ServiceOffering20VO so20 : oldServiceOfferings) {
    ServiceOffering21VO so21=new ServiceOffering21VO(so20.getName(),so20.getCpu(),so20.getRamSize(),so20.getSpeed(),so20.getRateMbps(),so20.getMulticastRateMbps(),so20.getOfferHA(),so20.getDisplayText(),so20.getGuestIpType(),so20.getUseLocalStorage(),false,null);
    so21.setId(seq++);
    so21.setDiskSize(0);
    so21=_serviceOffering21Dao.persist(so21);
    if (so20.getId().longValue() != so21.getId()) {
      updateServiceOfferingReferences(so20.getId().longValue(),so21.getId());
    }
  }
  boolean useLocalStorage=Boolean.parseBoolean(_configDao.getValue(Config.SystemVMUseLocalStorage.key()));
  int proxyRamSize=NumbersUtil.parseInt(_configDao.getValue(Config.ConsoleProxyRamSize.key()),ConsoleProxyManager.DEFAULT_PROXY_VM_RAMSIZE);
  ServiceOffering21VO soConsoleProxy=new ServiceOffering21VO(""String_Node_Str"",1,proxyRamSize,0,0,0,false,null,Network.GuestIpType.Virtual,useLocalStorage,true,null);
  soConsoleProxy.setId(seq++);
  soConsoleProxy.setUniqueName(""String_Node_Str"");
  soConsoleProxy=_serviceOffering21Dao.persist(soConsoleProxy);
  _consoleProxyServiceOfferingId=soConsoleProxy.getId();
  int secStorageVmRamSize=NumbersUtil.parseInt(_configDao.getValue(Config.SecStorageVmRamSize.key()),SecondaryStorageVmManager.DEFAULT_SS_VM_RAMSIZE);
  ServiceOffering21VO soSecondaryVm=new ServiceOffering21VO(""String_Node_Str"",1,secStorageVmRamSize,0,0,0,false,null,Network.GuestIpType.Virtual,useLocalStorage,true,null);
  soSecondaryVm.setId(seq++);
  soSecondaryVm.setUniqueName(""String_Node_Str"");
  soSecondaryVm=_serviceOffering21Dao.persist(soSecondaryVm);
  _secStorageServiceOfferingId=soSecondaryVm.getId();
  int routerRamSize=NumbersUtil.parseInt(_configDao.getValue(""String_Node_Str""),128);
  ServiceOffering21VO soDomainRouter=new ServiceOffering21VO(""String_Node_Str"",1,routerRamSize,0,0,0,false,null,Network.GuestIpType.Virtual,useLocalStorage,true,null);
  soDomainRouter.setId(seq++);
  soDomainRouter.setUniqueName(""String_Node_Str"");
  soDomainRouter=_serviceOffering21Dao.persist(soDomainRouter);
  _domRServiceOfferingId=soDomainRouter.getId();
  System.out.println(""String_Node_Str"");
}"
89860,"public NetworkOffering.GuestIpType getGuestIpType(){
  return guestIpType;
}","public Network.GuestIpType getGuestIpType(){
  return guestIpType;
}"
89861,"public void setGuestIpType(NetworkOffering.GuestIpType guestIpType){
  this.guestIpType=guestIpType;
}","public void setGuestIpType(Network.GuestIpType guestIpType){
  this.guestIpType=guestIpType;
}"
89862,"public ServiceOffering20VO(Long id,String name,int cpu,int ramSize,int speed,int rateMbps,int multicastRateMbps,boolean offerHA,String displayText,NetworkOffering.GuestIpType guestIpType,boolean useLocalStorage){
  this.id=id;
  this.name=name;
  this.cpu=cpu;
  this.ramSize=ramSize;
  this.speed=speed;
  this.rateMbps=rateMbps;
  this.multicastRateMbps=multicastRateMbps;
  this.offerHA=offerHA;
  this.displayText=displayText;
  this.guestIpType=guestIpType;
  this.useLocalStorage=useLocalStorage;
}","public ServiceOffering20VO(Long id,String name,int cpu,int ramSize,int speed,int rateMbps,int multicastRateMbps,boolean offerHA,String displayText,Network.GuestIpType guestIpType,boolean useLocalStorage){
  this.id=id;
  this.name=name;
  this.cpu=cpu;
  this.ramSize=ramSize;
  this.speed=speed;
  this.rateMbps=rateMbps;
  this.multicastRateMbps=multicastRateMbps;
  this.offerHA=offerHA;
  this.displayText=displayText;
  this.guestIpType=guestIpType;
  this.useLocalStorage=useLocalStorage;
}"
89863,"@Override public NetworkOffering.GuestIpType getGuestIpType(){
  return guestIpType;
}","@Override public Network.GuestIpType getGuestIpType(){
  return guestIpType;
}"
89864,"public ServiceOffering21VO(String name,int cpu,int ramSize,int speed,int rateMbps,int multicastRateMbps,boolean offerHA,String displayText,NetworkOffering.GuestIpType guestIpType,boolean useLocalStorage,boolean recreatable,String tags){
  super(name,displayText,false,tags,recreatable,useLocalStorage);
  this.cpu=cpu;
  this.ramSize=ramSize;
  this.speed=speed;
  this.rateMbps=rateMbps;
  this.multicastRateMbps=multicastRateMbps;
  this.offerHA=offerHA;
  this.guestIpType=guestIpType;
}","public ServiceOffering21VO(String name,int cpu,int ramSize,int speed,int rateMbps,int multicastRateMbps,boolean offerHA,String displayText,Network.GuestIpType guestIpType,boolean useLocalStorage,boolean recreatable,String tags){
  super(name,displayText,false,tags,recreatable,useLocalStorage);
  this.cpu=cpu;
  this.ramSize=ramSize;
  this.speed=speed;
  this.rateMbps=rateMbps;
  this.multicastRateMbps=multicastRateMbps;
  this.offerHA=offerHA;
  this.guestIpType=guestIpType;
}"
89865,"public void setGuestIpType(NetworkOffering.GuestIpType guestIpType){
  this.guestIpType=guestIpType;
}","public void setGuestIpType(Network.GuestIpType guestIpType){
  this.guestIpType=guestIpType;
}"
89866,"@SuppressWarnings(""String_Node_Str"") private void processRequest(HttpServletRequest req,HttpServletResponse resp){
  StringBuffer auditTrailSb=new StringBuffer();
  auditTrailSb.append(""String_Node_Str"" + req.getRemoteAddr());
  auditTrailSb.append(""String_Node_Str"" + req.getMethod() + ""String_Node_Str"");
  String responseType=BaseCmd.RESPONSE_TYPE_XML;
  Map<String,Object[]> params=new HashMap<String,Object[]>();
  params.putAll(req.getParameterMap());
  try {
    HttpSession session=req.getSession(false);
    Object[] responseTypeParam=params.get(""String_Node_Str"");
    if (responseTypeParam != null) {
      responseType=(String)responseTypeParam[0];
    }
    Object[] commandObj=params.get(""String_Node_Str"");
    if (commandObj != null) {
      String command=(String)commandObj[0];
      if (""String_Node_Str"".equalsIgnoreCase(command)) {
        if (session != null) {
          Long userId=(Long)session.getAttribute(""String_Node_Str"");
          Account account=(Account)session.getAttribute(""String_Node_Str"");
          Long accountId=null;
          if (account != null) {
            accountId=account.getId();
          }
          auditTrailSb.insert(0,""String_Node_Str"" + userId + ""String_Node_Str""+ accountId+ ""String_Node_Str""+ session.getId()+ ""String_Node_Str"");
          if (userId != null) {
            _apiServer.logoutUser(userId);
          }
          try {
            session.invalidate();
          }
 catch (          IllegalStateException ise) {
          }
        }
        auditTrailSb.append(""String_Node_Str"");
        auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_OK);
        writeResponse(resp,getLogoutSuccessResponse(responseType),HttpServletResponse.SC_OK,responseType);
        return;
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(command)) {
        auditTrailSb.append(""String_Node_Str"");
        if (session != null) {
          try {
            session.invalidate();
          }
 catch (          IllegalStateException ise) {
          }
        }
        session=req.getSession(true);
        String[] username=(String[])params.get(""String_Node_Str"");
        String[] password=(String[])params.get(""String_Node_Str"");
        String[] domainIdArr=(String[])params.get(""String_Node_Str"");
        if (domainIdArr == null) {
          domainIdArr=(String[])params.get(""String_Node_Str"");
        }
        String[] domainName=(String[])params.get(""String_Node_Str"");
        Long domainId=null;
        if ((domainIdArr != null) && (domainIdArr.length > 0)) {
          try {
            domainId=new Long(Long.parseLong(domainIdArr[0]));
            auditTrailSb.append(""String_Node_Str"" + domainId);
          }
 catch (          NumberFormatException e) {
            s_logger.warn(""String_Node_Str"");
            auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
            String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"",params,responseType);
            writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
          }
        }
        String domain=null;
        if (domainName != null) {
          domain=domainName[0];
          auditTrailSb.append(""String_Node_Str"" + domain);
          if (domain != null) {
            if (!domain.endsWith(""String_Node_Str"")) {
              domain+='/';
            }
            if (!domain.startsWith(""String_Node_Str"")) {
              domain=""String_Node_Str"" + domain;
            }
          }
        }
        if (username != null) {
          String pwd=((password == null) ? null : password[0]);
          try {
            _apiServer.loginUser(session,username[0],pwd,domainId,domain,params);
            auditTrailSb.insert(0,""String_Node_Str"" + session.getAttribute(""String_Node_Str"") + ""String_Node_Str""+ ((Account)session.getAttribute(""String_Node_Str"")).getId()+ ""String_Node_Str""+ session.getId()+ ""String_Node_Str"");
            String loginResponse=getLoginSuccessResponse(session,responseType);
            writeResponse(resp,loginResponse,HttpServletResponse.SC_OK,responseType);
            return;
          }
 catch (          CloudAuthenticationException ex) {
            try {
              session.invalidate();
            }
 catch (            IllegalStateException ise) {
            }
            auditTrailSb.append(""String_Node_Str"" + BaseCmd.ACCOUNT_ERROR + ""String_Node_Str""+ ex.getMessage() != null ? ex.getMessage() : ""String_Node_Str"");
            String serializedResponse=_apiServer.getSerializedApiError(BaseCmd.ACCOUNT_ERROR,ex.getMessage() != null ? ex.getMessage() : ""String_Node_Str"",params,responseType);
            writeResponse(resp,serializedResponse,BaseCmd.ACCOUNT_ERROR,responseType);
            return;
          }
        }
      }
    }
    auditTrailSb.append(req.getQueryString());
    boolean isNew=((session == null) ? true : session.isNew());
    UserContext.registerContext(_accountMgr.getSystemUser().getId(),_accountMgr.getSystemAccount(),null,false);
    Long userId=null;
    if (!isNew) {
      userId=(Long)session.getAttribute(""String_Node_Str"");
      String account=(String)session.getAttribute(""String_Node_Str"");
      Long domainId=(Long)session.getAttribute(""String_Node_Str"");
      Object accountObj=session.getAttribute(""String_Node_Str"");
      String sessionKey=(String)session.getAttribute(""String_Node_Str"");
      String[] sessionKeyParam=(String[])params.get(""String_Node_Str"");
      if ((sessionKeyParam == null) || (sessionKey == null) || !sessionKey.equals(sessionKeyParam[0])) {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
        auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
        String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"",params,responseType);
        writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
        return;
      }
      if ((userId != null) && (account != null) && (accountObj != null)&& _apiServer.verifyUser(userId)) {
        String[] command=(String[])params.get(""String_Node_Str"");
        if (command == null) {
          s_logger.info(""String_Node_Str"");
          auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_BAD_REQUEST + ""String_Node_Str""+ ""String_Node_Str"");
          String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_BAD_REQUEST,""String_Node_Str"",params,responseType);
          writeResponse(resp,serializedResponse,HttpServletResponse.SC_BAD_REQUEST,responseType);
          return;
        }
        UserContext.updateContext(userId,(Account)accountObj,session.getId());
      }
 else {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
        auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
        String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"",params,responseType);
        writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
        return;
      }
    }
    if (_apiServer.verifyRequest(params,userId)) {
      auditTrailSb.insert(0,""String_Node_Str"" + UserContext.current().getCallerUserId() + ""String_Node_Str""+ UserContext.current().getCaller().getId()+ ""String_Node_Str""+ (session != null ? session.getId() : null)+ ""String_Node_Str"");
      try {
        String response=_apiServer.handleRequest(params,true,responseType,auditTrailSb);
        writeResponse(resp,response != null ? response : ""String_Node_Str"",HttpServletResponse.SC_OK,responseType);
      }
 catch (      ServerApiException se) {
        String serializedResponseText=_apiServer.getSerializedApiError(se.getErrorCode(),se.getDescription(),params,responseType);
        writeResponse(resp,serializedResponseText,se.getErrorCode(),responseType);
        auditTrailSb.append(""String_Node_Str"" + se.getErrorCode() + ""String_Node_Str""+ se.getDescription());
      }
    }
 else {
      if (session != null) {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
      }
      auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
      String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"",params,responseType);
      writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
    }
  }
 catch (  InvalidParameterException ipe) {
    auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_NOT_FOUND + ""String_Node_Str""+ ipe.getMessage());
    String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_NOT_FOUND,ipe.getMessage(),params,responseType);
    writeResponse(resp,serializedResponse,HttpServletResponse.SC_NOT_FOUND,responseType);
  }
catch (  Exception ex) {
    s_logger.error(""String_Node_Str"",ex);
    auditTrailSb.append(""String_Node_Str"");
  }
 finally {
    s_accessLogger.info(auditTrailSb.toString());
    UserContext.unregisterContext();
  }
}","@SuppressWarnings(""String_Node_Str"") private void processRequest(HttpServletRequest req,HttpServletResponse resp){
  StringBuffer auditTrailSb=new StringBuffer();
  auditTrailSb.append(""String_Node_Str"" + req.getRemoteAddr());
  auditTrailSb.append(""String_Node_Str"" + req.getMethod() + ""String_Node_Str"");
  String responseType=BaseCmd.RESPONSE_TYPE_XML;
  Map<String,Object[]> params=new HashMap<String,Object[]>();
  params.putAll(req.getParameterMap());
  try {
    HttpSession session=req.getSession(false);
    Object[] responseTypeParam=params.get(""String_Node_Str"");
    if (responseTypeParam != null) {
      responseType=(String)responseTypeParam[0];
    }
    Object[] commandObj=params.get(""String_Node_Str"");
    if (commandObj != null) {
      String command=(String)commandObj[0];
      if (""String_Node_Str"".equalsIgnoreCase(command)) {
        if (session != null) {
          Long userId=(Long)session.getAttribute(""String_Node_Str"");
          Account account=(Account)session.getAttribute(""String_Node_Str"");
          Long accountId=null;
          if (account != null) {
            accountId=account.getId();
          }
          auditTrailSb.insert(0,""String_Node_Str"" + userId + ""String_Node_Str""+ accountId+ ""String_Node_Str""+ session.getId()+ ""String_Node_Str"");
          if (userId != null) {
            _apiServer.logoutUser(userId);
          }
          try {
            session.invalidate();
          }
 catch (          IllegalStateException ise) {
          }
        }
        auditTrailSb.append(""String_Node_Str"");
        auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_OK);
        writeResponse(resp,getLogoutSuccessResponse(responseType),HttpServletResponse.SC_OK,responseType);
        return;
      }
 else       if (""String_Node_Str"".equalsIgnoreCase(command)) {
        auditTrailSb.append(""String_Node_Str"");
        if (session != null) {
          try {
            session.invalidate();
          }
 catch (          IllegalStateException ise) {
          }
        }
        session=req.getSession(true);
        String[] username=(String[])params.get(""String_Node_Str"");
        String[] password=(String[])params.get(""String_Node_Str"");
        String[] domainIdArr=(String[])params.get(""String_Node_Str"");
        if (domainIdArr == null) {
          domainIdArr=(String[])params.get(""String_Node_Str"");
        }
        String[] domainName=(String[])params.get(""String_Node_Str"");
        Long domainId=null;
        if ((domainIdArr != null) && (domainIdArr.length > 0)) {
          try {
            domainId=new Long(Long.parseLong(domainIdArr[0]));
            auditTrailSb.append(""String_Node_Str"" + domainId);
          }
 catch (          NumberFormatException e) {
            s_logger.warn(""String_Node_Str"");
            auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
            String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"",params,responseType);
            writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
          }
        }
        String domain=null;
        if (domainName != null) {
          domain=domainName[0];
          auditTrailSb.append(""String_Node_Str"" + domain);
          if (domain != null) {
            if (!domain.endsWith(""String_Node_Str"")) {
              domain+='/';
            }
            if (!domain.startsWith(""String_Node_Str"")) {
              domain=""String_Node_Str"" + domain;
            }
          }
        }
        if (username != null) {
          String pwd=((password == null) ? null : password[0]);
          try {
            _apiServer.loginUser(session,username[0],pwd,domainId,domain,params);
            auditTrailSb.insert(0,""String_Node_Str"" + session.getAttribute(""String_Node_Str"") + ""String_Node_Str""+ ((Account)session.getAttribute(""String_Node_Str"")).getId()+ ""String_Node_Str""+ session.getId()+ ""String_Node_Str"");
            String loginResponse=getLoginSuccessResponse(session,responseType);
            writeResponse(resp,loginResponse,HttpServletResponse.SC_OK,responseType);
            return;
          }
 catch (          CloudAuthenticationException ex) {
            try {
              session.invalidate();
            }
 catch (            IllegalStateException ise) {
            }
            auditTrailSb.append(""String_Node_Str"" + BaseCmd.ACCOUNT_ERROR + ""String_Node_Str""+ ex.getMessage() != null ? ex.getMessage() : ""String_Node_Str"");
            String serializedResponse=_apiServer.getSerializedApiError(BaseCmd.ACCOUNT_ERROR,ex.getMessage() != null ? ex.getMessage() : ""String_Node_Str"",params,responseType);
            writeResponse(resp,serializedResponse,BaseCmd.ACCOUNT_ERROR,responseType);
            return;
          }
        }
      }
    }
    auditTrailSb.append(req.getQueryString());
    boolean isNew=((session == null) ? true : session.isNew());
    UserContext.registerContext(_accountMgr.getSystemUser().getId(),_accountMgr.getSystemAccount(),null,false);
    Long userId=null;
    if (!isNew) {
      userId=(Long)session.getAttribute(""String_Node_Str"");
      String account=(String)session.getAttribute(""String_Node_Str"");
      Long domainId=(Long)session.getAttribute(""String_Node_Str"");
      Object accountObj=session.getAttribute(""String_Node_Str"");
      String sessionKey=(String)session.getAttribute(""String_Node_Str"");
      String[] sessionKeyParam=(String[])params.get(""String_Node_Str"");
      if ((sessionKeyParam == null) || (sessionKey == null) || !sessionKey.equals(sessionKeyParam[0])) {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
        auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
        String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"",params,responseType);
        writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
        return;
      }
      if ((userId != null) && (account != null) && (accountObj != null)&& _apiServer.verifyUser(userId)) {
        String[] command=(String[])params.get(""String_Node_Str"");
        if (command == null) {
          s_logger.info(""String_Node_Str"");
          auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_BAD_REQUEST + ""String_Node_Str""+ ""String_Node_Str"");
          String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_BAD_REQUEST,""String_Node_Str"",params,responseType);
          writeResponse(resp,serializedResponse,HttpServletResponse.SC_BAD_REQUEST,responseType);
          return;
        }
        UserContext.updateContext(userId,(Account)accountObj,session.getId());
      }
 else {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
        auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
        String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"",params,responseType);
        writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
        return;
      }
    }
    if (_apiServer.verifyRequest(params,userId)) {
      auditTrailSb.insert(0,""String_Node_Str"" + UserContext.current().getCallerUserId() + ""String_Node_Str""+ UserContext.current().getCaller().getId()+ ""String_Node_Str""+ (session != null ? session.getId() : null)+ ""String_Node_Str"");
      try {
        String response=_apiServer.handleRequest(params,false,responseType,auditTrailSb);
        writeResponse(resp,response != null ? response : ""String_Node_Str"",HttpServletResponse.SC_OK,responseType);
      }
 catch (      ServerApiException se) {
        String serializedResponseText=_apiServer.getSerializedApiError(se.getErrorCode(),se.getDescription(),params,responseType);
        writeResponse(resp,serializedResponseText,se.getErrorCode(),responseType);
        auditTrailSb.append(""String_Node_Str"" + se.getErrorCode() + ""String_Node_Str""+ se.getDescription());
      }
    }
 else {
      if (session != null) {
        try {
          session.invalidate();
        }
 catch (        IllegalStateException ise) {
        }
      }
      auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_UNAUTHORIZED + ""String_Node_Str""+ ""String_Node_Str"");
      String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_UNAUTHORIZED,""String_Node_Str"",params,responseType);
      writeResponse(resp,serializedResponse,HttpServletResponse.SC_UNAUTHORIZED,responseType);
    }
  }
 catch (  InvalidParameterException ipe) {
    auditTrailSb.append(""String_Node_Str"" + HttpServletResponse.SC_NOT_FOUND + ""String_Node_Str""+ ipe.getMessage());
    String serializedResponse=_apiServer.getSerializedApiError(HttpServletResponse.SC_NOT_FOUND,ipe.getMessage(),params,responseType);
    writeResponse(resp,serializedResponse,HttpServletResponse.SC_NOT_FOUND,responseType);
  }
catch (  Exception ex) {
    s_logger.error(""String_Node_Str"",ex);
    auditTrailSb.append(""String_Node_Str"");
  }
 finally {
    s_accessLogger.info(auditTrailSb.toString());
    UserContext.unregisterContext();
  }
}"
89867,"public Long getNetworkId(){
}","public Long getNetworkId(){
  Network network=_networkService.getNetwork(networkId);
  if (network == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
  }
 else {
    return network.getId();
  }
}"
89868,"public long getEntityOwnerId(){
}","public long getEntityOwnerId(){
  return _networkService.getNetwork(networkId).getAccountId();
}"
89869,"@Override @DB public synchronized StoragePoolVO preparePrimaryStorageForMaintenance(PreparePrimaryStorageForMaintenanceCmd cmd) throws ServerApiException {
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  boolean restart=true;
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ExecutionException(msg);
    }
    if (!primaryStorage.getStatus().equals(Status.Up) && !primaryStorage.getStatus().equals(Status.ErrorInMaintenance)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + primaryStorageId + ""String_Node_Str""+ primaryStorage.getStatus().toString());
    }
    primaryStorage.setStatus(Status.PrepareForMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<StoragePoolVO> upPools=_storagePoolDao.listPoolsByStatus(Status.Up);
    if (upPools == null || upPools.size() == 0) {
      restart=false;
    }
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
      if (vmInstance == null) {
        continue;
      }
      if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting)) {
        if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
          _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
          if (!_consoleProxyMgr.stopProxy(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
            if (_consoleProxyMgr.startProxy(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
          if (!_userVmMgr.stopVirtualMachine(userId,vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
          if (!_secStorageMgr.stopSecStorageVm(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {
          if (_routerMgr.stopRouterInternal(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_routerMgr.stopRouterInternal(vmInstance.getId())) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
      }
    }
    primaryStorage.setStatus(Status.Maintenance);
    _storagePoolDao.persist(primaryStorage);
    return _storagePoolDao.findById(primaryStorageId);
  }
 catch (  Exception e) {
    if (e instanceof ExecutionException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,e.getMessage());
    }
    if (e instanceof InvalidParameterValueException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
    }
    s_logger.error(""String_Node_Str"",e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}","@Override @DB public synchronized StoragePoolVO preparePrimaryStorageForMaintenance(PreparePrimaryStorageForMaintenanceCmd cmd) throws ServerApiException {
  Long primaryStorageId=cmd.getId();
  Long userId=UserContext.current().getCallerUserId();
  boolean restart=true;
  StoragePoolVO primaryStorage=null;
  try {
    Transaction.currentTxn();
    primaryStorage=_storagePoolDao.acquireInLockTable(primaryStorageId);
    if (primaryStorage == null) {
      String msg=""String_Node_Str"";
      s_logger.error(msg);
      throw new ExecutionException(msg);
    }
    if (!primaryStorage.getStatus().equals(Status.Up) && !primaryStorage.getStatus().equals(Status.ErrorInMaintenance)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + primaryStorageId + ""String_Node_Str""+ primaryStorage.getStatus().toString());
    }
    primaryStorage.setStatus(Status.PrepareForMaintenance);
    _storagePoolDao.persist(primaryStorage);
    List<StoragePoolVO> upPools=_storagePoolDao.listPoolsByStatus(Status.Up);
    if (upPools == null || upPools.size() == 0) {
      restart=false;
    }
    List<VolumeVO> allVolumes=_volsDao.findByPoolId(primaryStorageId);
    for (    VolumeVO volume : allVolumes) {
      VMInstanceVO vmInstance=_vmInstanceDao.findById(volume.getInstanceId());
      if (vmInstance == null) {
        continue;
      }
      if (vmInstance.getState().equals(State.Running) || vmInstance.getState().equals(State.Starting)) {
        if (vmInstance.getType().equals(VirtualMachine.Type.ConsoleProxy)) {
          _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
          if (!_consoleProxyMgr.stopProxy(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            _configMgr.updateConfiguration(userId,""String_Node_Str"",""String_Node_Str"");
            if (_consoleProxyMgr.startProxy(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.User)) {
          if (!_userVmMgr.stopVirtualMachine(userId,vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.SecondaryStorageVm)) {
          if (!_secStorageMgr.stopSecStorageVm(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (_secStorageMgr.startSecStorageVm(vmInstance.getId()) == null) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
        if (vmInstance.getType().equals(VirtualMachine.Type.DomainRouter)) {
          if (!_routerMgr.stopRouterInternal(vmInstance.getId())) {
            String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
            s_logger.warn(errorMsg);
            primaryStorage.setStatus(Status.ErrorInMaintenance);
            _storagePoolDao.persist(primaryStorage);
            throw new CloudRuntimeException(errorMsg);
          }
 else           if (restart) {
            if (!_routerMgr.stopRouterInternal(vmInstance.getId())) {
              String errorMsg=""String_Node_Str"" + vmInstance.getId() + ""String_Node_Str"";
              s_logger.warn(errorMsg);
              primaryStorage.setStatus(Status.ErrorInMaintenance);
              _storagePoolDao.persist(primaryStorage);
              throw new CloudRuntimeException(errorMsg);
            }
          }
        }
      }
    }
    primaryStorage.setStatus(Status.Maintenance);
    _storagePoolDao.persist(primaryStorage);
    return _storagePoolDao.findById(primaryStorageId);
  }
 catch (  Exception e) {
    if (e instanceof ExecutionException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.RESOURCE_UNAVAILABLE_ERROR,e.getMessage());
    }
    if (e instanceof InvalidParameterValueException) {
      s_logger.error(""String_Node_Str"",e);
      throw new ServerApiException(BaseCmd.PARAM_ERROR,e.getMessage());
    }
    s_logger.error(""String_Node_Str"",e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,e.getMessage());
  }
 finally {
    _storagePoolDao.releaseFromLockTable(primaryStorage.getId());
  }
}"
89870,"@Override public DataCenter editZone(UpdateZoneCmd cmd){
  Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long userId=UserContext.current().getCallerUserId();
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if (vnetRange != null && zone.getNetworkType() == NetworkType.Basic) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  if (vnetRange != null) {
    if (zoneHasAllocatedVnets(zoneId)) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  boolean dnsUpdate=false;
  if (dns1 != null || dns2 != null) {
    dnsUpdate=true;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (guestCidr == null) {
    guestCidr=zone.getGuestNetworkCidr();
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  zone.setGuestNetworkCidr(guestCidr);
  if (vnetRange != null) {
    zone.setVnet(vnetRange);
  }
  if (!_zoneDao.update(zoneId,zone)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (vnetRange != null) {
    String[] tokens=vnetRange.split(""String_Node_Str"");
    int begin=Integer.parseInt(tokens[0]);
    int end=tokens.length == 1 ? (begin) : Integer.parseInt(tokens[1]);
    _zoneDao.deleteVnet(zoneId);
    _zoneDao.addVnet(zone.getId(),begin,end);
  }
  if (dnsUpdate) {
    List<DomainRouterVO> DomainRouters=_domrDao.listByDataCenter(zoneId);
    for (    DomainRouterVO domR : DomainRouters) {
      domR.setDns1(dns1);
      domR.setDns2(dns2);
      _domrDao.update(domR.getId(),domR);
    }
    List<VMInstanceVO> ConsoleProxies=_vmInstanceDao.listByZoneIdAndType(zoneId,VirtualMachine.Type.ConsoleProxy);
    for (    VMInstanceVO consoleVm : ConsoleProxies) {
      ConsoleProxyVO proxy=_consoleDao.findById(consoleVm.getId());
      if (proxy != null) {
        proxy.setDns1(dns1);
        proxy.setDns2(dns2);
        _consoleDao.update(proxy.getId(),proxy);
      }
    }
    List<VMInstanceVO> storageVms=_vmInstanceDao.listByZoneIdAndType(zoneId,VirtualMachine.Type.SecondaryStorageVm);
    for (    VMInstanceVO storageVm : storageVms) {
      SecondaryStorageVmVO secStorageVm=_secStorageDao.findById(storageVm.getId());
      if (secStorageVm != null) {
        secStorageVm.setDns1(dns1);
        secStorageVm.setDns2(dns2);
        _secStorageDao.update(secStorageVm.getId(),secStorageVm);
      }
    }
  }
  saveConfigurationEvent(userId,null,EventTypes.EVENT_ZONE_EDIT,""String_Node_Str"" + zone.getName() + ""String_Node_Str"",""String_Node_Str"" + zone.getId(),""String_Node_Str"" + dns1,""String_Node_Str"" + dns2,""String_Node_Str"" + internalDns1,""String_Node_Str"" + internalDns2,""String_Node_Str"" + vnetRange,""String_Node_Str"" + guestCidr);
  return zone;
}","@Override public DataCenter editZone(UpdateZoneCmd cmd){
  Long zoneId=cmd.getId();
  String zoneName=cmd.getZoneName();
  String dns1=cmd.getDns1();
  String dns2=cmd.getDns2();
  String internalDns1=cmd.getInternalDns1();
  String internalDns2=cmd.getInternalDns2();
  String vnetRange=cmd.getVlan();
  String guestCidr=cmd.getGuestCidrAddress();
  Long userId=UserContext.current().getCallerUserId();
  int startVnetRange=0;
  int stopVnetRange=0;
  if (userId == null) {
    userId=Long.valueOf(User.UID_SYSTEM);
  }
  DataCenterVO zone=_zoneDao.findById(zoneId);
  if (zone == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + zoneId);
  }
  if (zoneName == null) {
    zoneName=zone.getName();
  }
  if (vnetRange != null && zone.getNetworkType() == NetworkType.Basic) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (!validZone(zoneId)) {
    throw new InvalidParameterValueException(""String_Node_Str"" + zoneId + ""String_Node_Str"");
  }
  if (vnetRange != null) {
    if (zoneHasAllocatedVnets(zoneId)) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
    String[] startStopRange=new String[2];
    startStopRange=vnetRange.split(""String_Node_Str"");
    if (startStopRange.length == 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startStopRange[0] == null || startStopRange[1] == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    try {
      startVnetRange=Integer.parseInt(startStopRange[0]);
      stopVnetRange=Integer.parseInt(startStopRange[1]);
    }
 catch (    NumberFormatException e) {
      s_logger.warn(""String_Node_Str"",e);
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange < 0 || stopVnetRange > 4096) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (startVnetRange > stopVnetRange) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  String oldZoneName=zone.getName();
  if (zoneName == null) {
    zoneName=oldZoneName;
  }
  boolean dnsUpdate=false;
  if (dns1 != null || dns2 != null) {
    dnsUpdate=true;
  }
  if (dns1 == null) {
    dns1=zone.getDns1();
  }
  if (dns2 == null) {
    dns2=zone.getDns2();
  }
  if (internalDns1 == null) {
    internalDns1=zone.getInternalDns1();
  }
  if (guestCidr == null) {
    guestCidr=zone.getGuestNetworkCidr();
  }
  boolean checkForDuplicates=!zoneName.equals(oldZoneName);
  checkZoneParameters(zoneName,dns1,dns2,internalDns1,internalDns2,checkForDuplicates,null);
  zone.setName(zoneName);
  zone.setDns1(dns1);
  zone.setDns2(dns2);
  zone.setInternalDns1(internalDns1);
  zone.setInternalDns2(internalDns2);
  zone.setGuestNetworkCidr(guestCidr);
  if (vnetRange != null) {
    zone.setVnet(vnetRange);
  }
  if (!_zoneDao.update(zoneId,zone)) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  if (vnetRange != null) {
    String[] tokens=vnetRange.split(""String_Node_Str"");
    int begin=Integer.parseInt(tokens[0]);
    int end=tokens.length == 1 ? (begin) : Integer.parseInt(tokens[1]);
    _zoneDao.deleteVnet(zoneId);
    _zoneDao.addVnet(zone.getId(),begin,end);
  }
  if (dnsUpdate) {
    List<DomainRouterVO> DomainRouters=_domrDao.listByDataCenter(zoneId);
    for (    DomainRouterVO domR : DomainRouters) {
      domR.setDns1(dns1);
      domR.setDns2(dns2);
      _domrDao.update(domR.getId(),domR);
    }
    List<VMInstanceVO> ConsoleProxies=_vmInstanceDao.listByZoneIdAndType(zoneId,VirtualMachine.Type.ConsoleProxy);
    for (    VMInstanceVO consoleVm : ConsoleProxies) {
      ConsoleProxyVO proxy=_consoleDao.findById(consoleVm.getId());
      if (proxy != null) {
        proxy.setDns1(dns1);
        proxy.setDns2(dns2);
        _consoleDao.update(proxy.getId(),proxy);
      }
    }
    List<VMInstanceVO> storageVms=_vmInstanceDao.listByZoneIdAndType(zoneId,VirtualMachine.Type.SecondaryStorageVm);
    for (    VMInstanceVO storageVm : storageVms) {
      SecondaryStorageVmVO secStorageVm=_secStorageDao.findById(storageVm.getId());
      if (secStorageVm != null) {
        secStorageVm.setDns1(dns1);
        secStorageVm.setDns2(dns2);
        _secStorageDao.update(secStorageVm.getId(),secStorageVm);
      }
    }
  }
  saveConfigurationEvent(userId,null,EventTypes.EVENT_ZONE_EDIT,""String_Node_Str"" + zone.getName() + ""String_Node_Str"",""String_Node_Str"" + zone.getId(),""String_Node_Str"" + dns1,""String_Node_Str"" + dns2,""String_Node_Str"" + internalDns1,""String_Node_Str"" + internalDns2,""String_Node_Str"" + vnetRange,""String_Node_Str"" + guestCidr);
  return zone;
}"
89871,"@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  Boolean isSystem=cmd.getIsSystem();
  Long accountId=null;
  if (isSystem == null) {
    isSystem=false;
  }
  if (isAdmin(account.getType())) {
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        account=_accountDao.findActiveAccount(accountName,domainId);
        if (account == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=account.getId();
      }
    }
 else {
      accountId=account.getId();
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchCriteria<NetworkVO> sc=sb.create();
  if (!isSystem) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",false);
  }
 else {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",true);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",TrafficType.Public);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",NetworkType.Advanced.toString());
  }
  if (keyword != null) {
    SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (zoneId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
  }
  if (type != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,type);
  }
  SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
  ssc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,accountId);
  if (accountName == null && domainId == null) {
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.EQ,1L);
  }
  sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  List<NetworkVO> networks=_networksDao.search(sc,searchFilter);
  return networks;
}","@Override public List<? extends Network> searchForNetworks(ListNetworksCmd cmd){
  Object id=cmd.getId();
  Object keyword=cmd.getKeyword();
  Long zoneId=cmd.getZoneId();
  Account account=UserContext.current().getCaller();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String type=cmd.getType();
  Boolean isSystem=cmd.getIsSystem();
  Long accountId=null;
  if (isSystem == null) {
    isSystem=false;
  }
  if (isAdmin(account.getType())) {
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        account=_accountDao.findActiveAccount(accountName,domainId);
        if (account == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=account.getId();
      }
    }
 else {
      accountId=account.getId();
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(NetworkVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  SearchBuilder<NetworkVO> sb=_networksDao.createSearchBuilder();
  SearchBuilder<NetworkOfferingVO> networkOfferingSearch=_networkOfferingDao.createSearchBuilder();
  networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().isSystemOnly(),SearchCriteria.Op.EQ);
  if (isSystem) {
    networkOfferingSearch.and(""String_Node_Str"",networkOfferingSearch.entity().getTrafficType(),SearchCriteria.Op.EQ);
  }
  sb.join(""String_Node_Str"",networkOfferingSearch,sb.entity().getNetworkOfferingId(),networkOfferingSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchBuilder<DataCenterVO> zoneSearch=_dcDao.createSearchBuilder();
  zoneSearch.and(""String_Node_Str"",zoneSearch.entity().getNetworkType(),SearchCriteria.Op.EQ);
  sb.join(""String_Node_Str"",zoneSearch,sb.entity().getDataCenterId(),zoneSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  SearchCriteria<NetworkVO> sc=sb.create();
  if (!isSystem) {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",false);
  }
 else {
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",true);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",TrafficType.Public);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",NetworkType.Advanced.toString());
  }
  if (keyword != null) {
    SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (id != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,id);
  }
  if (zoneId != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,zoneId);
  }
  if (type != null) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,type);
  }
  if (account.getType() != Account.ACCOUNT_TYPE_ADMIN || (accountName != null && domainId != null)) {
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.EQ,accountId);
  }
  SearchCriteria<NetworkVO> ssc=_networksDao.createSearchCriteria();
  List<NetworkVO> networks=_networksDao.search(sc,searchFilter);
  return networks;
}"
89872,"protected T findById(ID id,boolean removed,Boolean lock){
  StringBuilder sql=new StringBuilder(_selectByIdSql);
  if (!removed && _removed != null) {
    sql.append(""String_Node_Str"").append(_removed.first());
  }
  if (lock != null) {
    sql.append(lock ? FOR_UPDATE_CLAUSE : SHARE_MODE_CLAUSE);
  }
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=s_initStmt;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql.toString());
    if (_idField.getAnnotation(EmbeddedId.class) == null) {
      pstmt.setObject(1,id);
    }
    ResultSet rs=pstmt.executeQuery();
    return rs.next() ? toEntityBean(rs,true) : null;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
}","protected T findById(ID id,boolean removed,Boolean lock){
  StringBuilder sql=new StringBuilder(_selectByIdSql);
  if (!removed && _removed != null) {
    sql.append(""String_Node_Str"").append(_removed.first());
  }
  if (lock != null) {
    sql.append(lock ? FOR_UPDATE_CLAUSE : SHARE_MODE_CLAUSE);
  }
  Transaction txn=Transaction.currentTxn();
  PreparedStatement pstmt=s_initStmt;
  try {
    pstmt=txn.prepareAutoCloseStatement(sql.toString());
    if (_idField.getAnnotation(EmbeddedId.class) == null) {
      prepareAttribute(1,pstmt,_idAttributes.get(_table)[0],id);
    }
    ResultSet rs=pstmt.executeQuery();
    return rs.next() ? toEntityBean(rs,true) : null;
  }
 catch (  SQLException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + pstmt.toString(),e);
  }
}"
89873,"private UserAccount getUserAccount(String username,String password,Long domainId){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + username + ""String_Node_Str""+ domainId);
  }
  UserAccount userAccount=_userAccountDao.getUserAccount(username,domainId);
  if (userAccount == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + username + ""String_Node_Str""+ domainId);
    }
    return null;
  }
  DomainVO domain=_domainDao.findById(domainId);
  String domainName=null;
  if (domain != null) {
    domainName=domain.getName();
  }
  if (!userAccount.getState().equals(""String_Node_Str"") || !userAccount.getAccountState().equals(""String_Node_Str"")) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + username + ""String_Node_Str""+ domainName+ ""String_Node_Str"");
    }
    throw new CloudAuthenticationException(""String_Node_Str"" + username + ""String_Node_Str""+ domainName+ ""String_Node_Str"");
  }
  Enumeration<UserAuthenticator> en=_userAuthenticators.enumeration();
  UserAuthenticator authenticator=en.nextElement();
  boolean authenticated=authenticator.authenticate(username,password,domainId);
  if (authenticated) {
    return userAccount;
  }
 else {
    return null;
  }
}","private UserAccount getUserAccount(String username,String password,Long domainId){
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + username + ""String_Node_Str""+ domainId);
  }
  UserAccount userAccount=_userAccountDao.getUserAccount(username,domainId);
  if (userAccount == null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + username + ""String_Node_Str""+ domainId);
    }
    return null;
  }
  DomainVO domain=_domainDao.findById(domainId);
  String domainName=null;
  if (domain != null) {
    domainName=domain.getName();
  }
  if (!userAccount.getState().equalsIgnoreCase(Account.State.Enabled.toString()) || !userAccount.getAccountState().equalsIgnoreCase(Account.State.Enabled.toString())) {
    if (s_logger.isInfoEnabled()) {
      s_logger.info(""String_Node_Str"" + username + ""String_Node_Str""+ domainName+ ""String_Node_Str"");
    }
    throw new CloudAuthenticationException(""String_Node_Str"" + username + ""String_Node_Str""+ domainName+ ""String_Node_Str"");
  }
  Enumeration<UserAuthenticator> en=_userAuthenticators.enumeration();
  UserAuthenticator authenticator=en.nextElement();
  boolean authenticated=authenticator.authenticate(username,password,domainId);
  if (authenticated) {
    return userAccount;
  }
 else {
    return null;
  }
}"
89874,"@Override public void reserve(NicProfile nic,Network config,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException {
  Pod pod=dest.getPod();
  Pair<String,Long> ip=_dcDao.allocatePrivateIpAddress(dest.getDataCenter().getId(),dest.getPod().getId(),nic.getId(),context.getReservationId());
  if (ip == null) {
    throw new InsufficientAddressCapacityException(""String_Node_Str"",Pod.class,pod.getId());
  }
  nic.setIp4Address(ip.first());
  nic.setMacAddress(NetUtils.long2Mac(ip.second()));
  nic.setGateway(pod.getGateway());
  nic.setFormat(AddressFormat.Ip4);
  String netmask=NetUtils.getCidrSubNet(pod.getCidrAddress(),pod.getCidrSize());
  nic.setNetmask(netmask);
  nic.setBroadcastType(BroadcastDomainType.Native);
  nic.setBroadcastUri(null);
  nic.setIsolationUri(null);
  nic.setFormat(AddressFormat.Ip4);
  s_logger.debug(""String_Node_Str"" + nic + ""String_Node_Str""+ vm);
}","@Override public void reserve(NicProfile nic,Network config,VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest,ReservationContext context) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException {
  Pod pod=dest.getPod();
  Pair<String,Long> ip=_dcDao.allocatePrivateIpAddress(dest.getDataCenter().getId(),dest.getPod().getId(),nic.getId(),context.getReservationId());
  if (ip == null) {
    throw new InsufficientAddressCapacityException(""String_Node_Str"",Pod.class,pod.getId());
  }
  nic.setIp4Address(ip.first());
  nic.setMacAddress(NetUtils.long2Mac(ip.second()));
  nic.setGateway(pod.getGateway());
  nic.setFormat(AddressFormat.Ip4);
  String netmask=NetUtils.getCidrNetmask(pod.getCidrSize());
  nic.setNetmask(netmask);
  nic.setBroadcastType(BroadcastDomainType.Native);
  nic.setBroadcastUri(null);
  nic.setIsolationUri(null);
  nic.setFormat(AddressFormat.Ip4);
  s_logger.debug(""String_Node_Str"" + nic + ""String_Node_Str""+ vm);
}"
89875,"public SnapshotVO(long id,long accountId,long volumeId,String path,String name,short snapshotType,String typeDescription){
  this.id=id;
  this.accountId=accountId;
  this.volumeId=volumeId;
  this.path=path;
  this.name=name;
  this.snapshotType=snapshotType;
  this.typeDescription=typeDescription;
  this.status=Status.Creating;
  this.prevSnapshotId=0;
}","public SnapshotVO(long id,long accountId,long volumeId,String path,String name,short snapshotType,String typeDescription,HypervisorType hypervisorType){
  this.id=id;
  this.accountId=accountId;
  this.volumeId=volumeId;
  this.path=path;
  this.name=name;
  this.snapshotType=snapshotType;
  this.typeDescription=typeDescription;
  this.status=Status.Creating;
  this.prevSnapshotId=0;
  this.hypervisorType=hypervisorType;
}"
89876,"@DB protected VolumeVO createVolumeFromSnapshot(VolumeVO volume,long snapshotId){
  VolumeVO createdVolume=null;
  SnapshotVO snapshot=_snapshotDao.findById(snapshotId);
  Long origVolumeId=snapshot.getVolumeId();
  VolumeVO originalVolume=_volsDao.findById(origVolumeId);
  VMTemplateVO template=null;
  if (originalVolume != null) {
    template=_templateDao.findById(originalVolume.getTemplateId());
  }
  Pair<VolumeVO,String> volumeDetails=createVolumeFromSnapshot(volume,snapshot,template,originalVolume.getSize());
  createdVolume=volumeDetails.first();
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Long templateId=originalVolume.getTemplateId();
  ;
  Long diskOfferingId=originalVolume.getDiskOfferingId();
  long sizeMB=createdVolume.getSize() / (1024 * 1024);
  if (createdVolume.getPath() != null) {
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),diskOfferingId,templateId,sizeMB);
    _usageEventDao.persist(usageEvent);
  }
  txn.commit();
  return createdVolume;
}","@DB protected VolumeVO createVolumeFromSnapshot(VolumeVO volume,long snapshotId){
  VolumeVO createdVolume=null;
  SnapshotVO snapshot=_snapshotDao.findById(snapshotId);
  Long origVolumeId=snapshot.getVolumeId();
  VolumeVO originalVolume=_volsDao.findById(origVolumeId);
  VMTemplateVO template=null;
  if (originalVolume != null) {
    template=_templateDao.findById(originalVolume.getTemplateId());
  }
  Pair<VolumeVO,String> volumeDetails=createVolumeFromSnapshot(volume,snapshot,originalVolume.getSize());
  createdVolume=volumeDetails.first();
  Transaction txn=Transaction.currentTxn();
  txn.start();
  Long templateId=originalVolume.getTemplateId();
  ;
  Long diskOfferingId=originalVolume.getDiskOfferingId();
  long sizeMB=createdVolume.getSize() / (1024 * 1024);
  if (createdVolume.getPath() != null) {
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,volume.getAccountId(),volume.getDataCenterId(),volume.getId(),volume.getName(),diskOfferingId,templateId,sizeMB);
    _usageEventDao.persist(usageEvent);
  }
  txn.commit();
  return createdVolume;
}"
89877,"@Override @DB public VMTemplateVO createPrivateTemplate(CreateTemplateCmd command) throws CloudRuntimeException {
  Long userId=UserContext.current().getCallerUserId();
  if (userId == null) {
    userId=User.UID_SYSTEM;
  }
  long templateId=command.getEntityId();
  Long volumeId=command.getVolumeId();
  Long snapshotId=command.getSnapshotId();
  SnapshotVO snapshot=null;
  if (snapshotId != null) {
    snapshot=_snapshotDao.findById(snapshotId);
    volumeId=snapshot.getVolumeId();
  }
  VolumeVO volume=_volsDao.findById(volumeId);
  String vmName=_storageMgr.getVmNameOnVolume(volume);
  if (snapshotId == null && !_storageMgr.volumeInactive(volume)) {
    String msg=""String_Node_Str"" + volume.getName() + ""String_Node_Str"";
    if (s_logger.isInfoEnabled()) {
      s_logger.info(msg);
    }
    throw new CloudRuntimeException(msg);
  }
  SnapshotCommand cmd=null;
  VMTemplateVO privateTemplate=null;
  long zoneId=volume.getDataCenterId();
  String uniqueName=getRandomPrivateTemplateName();
  HostVO secondaryStorageHost=_storageMgr.getSecondaryStorageHost(zoneId);
  String secondaryStorageURL=_storageMgr.getSecondaryStorageURL(zoneId);
  if (secondaryStorageHost == null || secondaryStorageURL == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + zoneId);
  }
  if (snapshotId != null) {
    volume=_volsDao.findById(volumeId);
    StringBuilder userFolder=new StringBuilder();
    Formatter userFolderFormat=new Formatter(userFolder);
    userFolderFormat.format(""String_Node_Str"",snapshot.getAccountId());
    String name=command.getTemplateName();
    String backupSnapshotUUID=snapshot.getBackupSnapshotId();
    if (backupSnapshotUUID == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
    }
    Long dcId=volume.getDataCenterId();
    Long accountId=volume.getAccountId();
    String origTemplateInstallPath=null;
    cmd=new CreatePrivateTemplateFromSnapshotCommand(_storageMgr.getPrimaryStorageNameLabel(volume),secondaryStorageURL,dcId,accountId,snapshot.getVolumeId(),backupSnapshotUUID,snapshot.getName(),origTemplateInstallPath,templateId,name);
  }
 else   if (volumeId != null) {
    volume=_volsDao.findById(volumeId);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId);
    }
    if (volume.getPoolId() == null) {
      _templateDao.remove(templateId);
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
    Long instanceId=volume.getInstanceId();
    if (instanceId != null) {
      VMInstanceVO vm=_vmDao.findById(instanceId);
      State vmState=vm.getState();
      if (!vmState.equals(State.Stopped) && !vmState.equals(State.Destroyed)) {
        throw new CloudRuntimeException(""String_Node_Str"" + vm.getName() + ""String_Node_Str"");
      }
    }
    cmd=new CreatePrivateTemplateFromVolumeCommand(secondaryStorageURL,templateId,volume.getAccountId(),command.getTemplateName(),uniqueName,volume.getPath(),vmName);
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  CreatePrivateTemplateAnswer answer=(CreatePrivateTemplateAnswer)_storageMgr.sendToHostsOnStoragePool(volume.getPoolId(),cmd,null);
  if ((answer != null) && answer.getResult()) {
    privateTemplate=_templateDao.findById(templateId);
    Long origTemplateId=volume.getTemplateId();
    VMTemplateVO origTemplate=null;
    if (origTemplateId != null) {
      origTemplate=_templateDao.findById(origTemplateId);
    }
    if ((origTemplate != null) && !Storage.ImageFormat.ISO.equals(origTemplate.getFormat())) {
      privateTemplate.setRequiresHvm(origTemplate.requiresHvm());
      privateTemplate.setBits(origTemplate.getBits());
    }
 else {
      privateTemplate.setRequiresHvm(true);
      privateTemplate.setBits(64);
    }
    String answerUniqueName=answer.getUniqueName();
    if (answerUniqueName != null) {
      privateTemplate.setUniqueName(answerUniqueName);
    }
 else {
      privateTemplate.setUniqueName(uniqueName);
    }
    ImageFormat format=answer.getImageFormat();
    if (format != null) {
      privateTemplate.setFormat(format);
    }
 else {
      privateTemplate.setFormat(ImageFormat.RAW);
    }
    _templateDao.update(templateId,privateTemplate);
    _templateDao.addTemplateToZone(privateTemplate,zoneId);
    VMTemplateHostVO templateHostVO=new VMTemplateHostVO(secondaryStorageHost.getId(),templateId);
    templateHostVO.setDownloadPercent(100);
    templateHostVO.setDownloadState(Status.DOWNLOADED);
    templateHostVO.setInstallPath(answer.getPath());
    templateHostVO.setLastUpdated(new Date());
    templateHostVO.setSize(answer.getVirtualSize());
    templateHostVO.setPhysicalSize(answer.getphysicalSize());
    _templateHostDao.persist(templateHostVO);
    _accountMgr.incrementResourceCount(volume.getAccountId(),ResourceType.template);
  }
 else {
    _templateDao.remove(templateId);
    throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
  }
  return privateTemplate;
}","@Override @DB public VMTemplateVO createPrivateTemplate(CreateTemplateCmd command) throws CloudRuntimeException {
  Long userId=UserContext.current().getCallerUserId();
  if (userId == null) {
    userId=User.UID_SYSTEM;
  }
  long templateId=command.getEntityId();
  Long volumeId=command.getVolumeId();
  Long snapshotId=command.getSnapshotId();
  SnapshotVO snapshot=null;
  if (snapshotId != null) {
    snapshot=_snapshotDao.findById(snapshotId);
    volumeId=snapshot.getVolumeId();
  }
  VolumeVO volume=_volsDao.findById(volumeId);
  String vmName=_storageMgr.getVmNameOnVolume(volume);
  if (snapshotId == null && !_storageMgr.volumeInactive(volume)) {
    String msg=""String_Node_Str"" + volume.getName() + ""String_Node_Str"";
    if (s_logger.isInfoEnabled()) {
      s_logger.info(msg);
    }
    throw new CloudRuntimeException(msg);
  }
  SnapshotCommand cmd=null;
  VMTemplateVO privateTemplate=null;
  long zoneId=volume.getDataCenterId();
  String uniqueName=getRandomPrivateTemplateName();
  HostVO secondaryStorageHost=_storageMgr.getSecondaryStorageHost(zoneId);
  String secondaryStorageURL=_storageMgr.getSecondaryStorageURL(zoneId);
  if (secondaryStorageHost == null || secondaryStorageURL == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + zoneId);
  }
  if (snapshotId != null) {
    volume=_volsDao.findById(volumeId);
    StringBuilder userFolder=new StringBuilder();
    Formatter userFolderFormat=new Formatter(userFolder);
    userFolderFormat.format(""String_Node_Str"",snapshot.getAccountId());
    String name=command.getTemplateName();
    String backupSnapshotUUID=snapshot.getBackupSnapshotId();
    if (backupSnapshotUUID == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
    }
    Long dcId=volume.getDataCenterId();
    Long accountId=volume.getAccountId();
    String origTemplateInstallPath=null;
    cmd=new CreatePrivateTemplateFromSnapshotCommand(_storageMgr.getPrimaryStorageNameLabel(volume),secondaryStorageURL,dcId,accountId,snapshot.getVolumeId(),backupSnapshotUUID,snapshot.getName(),origTemplateInstallPath,templateId,name);
  }
 else   if (volumeId != null) {
    volume=_volsDao.findById(volumeId);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId);
    }
    if (volume.getPoolId() == null) {
      _templateDao.remove(templateId);
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
    Long instanceId=volume.getInstanceId();
    if (instanceId != null) {
      VMInstanceVO vm=_vmDao.findById(instanceId);
      State vmState=vm.getState();
      if (!vmState.equals(State.Stopped) && !vmState.equals(State.Destroyed)) {
        throw new CloudRuntimeException(""String_Node_Str"" + vm.getName() + ""String_Node_Str"");
      }
    }
    cmd=new CreatePrivateTemplateFromVolumeCommand(secondaryStorageURL,templateId,volume.getAccountId(),command.getTemplateName(),uniqueName,volume.getPath(),vmName);
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  CreatePrivateTemplateAnswer answer=(CreatePrivateTemplateAnswer)_storageMgr.sendToHostsOnStoragePool(volume.getPoolId(),cmd,null);
  if ((answer != null) && answer.getResult()) {
    privateTemplate=_templateDao.findById(templateId);
    Long origTemplateId=volume.getTemplateId();
    VMTemplateVO origTemplate=null;
    if (origTemplateId != null) {
      origTemplate=_templateDao.findById(origTemplateId);
    }
    if ((origTemplate != null) && !Storage.ImageFormat.ISO.equals(origTemplate.getFormat())) {
      privateTemplate.setRequiresHvm(origTemplate.requiresHvm());
      privateTemplate.setBits(origTemplate.getBits());
    }
 else {
      privateTemplate.setRequiresHvm(true);
      privateTemplate.setBits(64);
    }
    String answerUniqueName=answer.getUniqueName();
    if (answerUniqueName != null) {
      privateTemplate.setUniqueName(answerUniqueName);
    }
 else {
      privateTemplate.setUniqueName(uniqueName);
    }
    ImageFormat format=answer.getImageFormat();
    if (format != null) {
      privateTemplate.setFormat(format);
    }
 else {
      privateTemplate.setFormat(ImageFormat.RAW);
    }
    if (snapshot != null)     privateTemplate.setHypervisorType(snapshot.getHypervisorType());
    _templateDao.update(templateId,privateTemplate);
    _templateDao.addTemplateToZone(privateTemplate,zoneId);
    VMTemplateHostVO templateHostVO=new VMTemplateHostVO(secondaryStorageHost.getId(),templateId);
    templateHostVO.setDownloadPercent(100);
    templateHostVO.setDownloadState(Status.DOWNLOADED);
    templateHostVO.setInstallPath(answer.getPath());
    templateHostVO.setLastUpdated(new Date());
    templateHostVO.setSize(answer.getVirtualSize());
    templateHostVO.setPhysicalSize(answer.getphysicalSize());
    _templateHostDao.persist(templateHostVO);
    _accountMgr.incrementResourceCount(volume.getAccountId(),ResourceType.template);
  }
 else {
    _templateDao.remove(templateId);
    throw new CloudRuntimeException(""String_Node_Str"" + answer.getDetails());
  }
  return privateTemplate;
}"
89878,"boolean mark(long dcId,String ip);","boolean mark(long dcId,Ip ip);"
89879,"@Override public boolean mark(long dcId,String ip){
  SearchCriteria<IPAddressVO> sc=AllFieldsSearch.create();
  sc.setParameters(""String_Node_Str"",dcId);
  sc.setParameters(""String_Node_Str"",ip);
  IPAddressVO vo=createForUpdate();
  vo.setAllocatedTime(new Date());
  vo.setState(State.Allocated);
  return update(vo,sc) >= 1;
}","@Override public boolean mark(long dcId,Ip ip){
  SearchCriteria<IPAddressVO> sc=AllFieldsSearch.create();
  sc.setParameters(""String_Node_Str"",dcId);
  sc.setParameters(""String_Node_Str"",ip);
  IPAddressVO vo=createForUpdate();
  vo.setAllocatedTime(new Date());
  vo.setState(State.Allocated);
  return update(vo,sc) >= 1;
}"
89880,"private boolean canHandle(GuestIpType ipType,DeployDestination dest){
  DataCenter dc=dest.getDataCenter();
  String provider=dc.getGatewayProvider();
  if (!dc.getDhcpProvider().equals(Provider.VirtualRouter.getName())) {
    return false;
  }
  return ((ipType == GuestIpType.Virtual && !provider.equals(Provider.VirtualRouter.getName())) || (ipType == GuestIpType.Direct || ipType == GuestIpType.DirectPodBased));
}","private boolean canHandle(GuestIpType ipType,DeployDestination dest){
  DataCenter dc=dest.getDataCenter();
  String provider=dc.getGatewayProvider();
  return ((ipType == GuestIpType.Virtual && !provider.equals(Provider.VirtualRouter.getName())) || (provider.equals(Provider.VirtualRouter.getName()) && (ipType == GuestIpType.Direct || ipType == GuestIpType.DirectPodBased)));
}"
89881,"@Override public List<? extends PortForwardingRule> listPortForwardingRules(ListPortForwardingRulesCmd cmd){
  Ip ipAddress=new Ip(cmd.getIpAddress());
  Account caller=UserContext.current().getAccount();
  IPAddressVO ipAddressVO=_ipAddressDao.findById(ipAddress.addr());
  if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddress);
  }
  List<PortForwardingRuleVO> rules=_forwardingDao.listByIpAndNotRevoked(ipAddress);
  _accountMgr.checkAccess(caller,rules.toArray(new PortForwardingRuleVO[rules.size()]));
  return rules;
}","@Override public List<? extends PortForwardingRule> listPortForwardingRules(ListPortForwardingRulesCmd cmd){
  Ip ipAddress=new Ip(cmd.getIpAddress());
  Account caller=UserContext.current().getAccount();
  IPAddressVO ipAddressVO=_ipAddressDao.findById(ipAddress.addr());
  if (ipAddressVO == null || !ipAddressVO.readyToUse()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + ipAddress);
  }
  List<PortForwardingRuleVO> rules=_forwardingDao.listByIp(ipAddress);
  _accountMgr.checkAccess(caller,rules.toArray(new PortForwardingRuleVO[rules.size()]));
  return rules;
}"
89882,"@Override public <T extends VMInstanceVO>DiskProfile allocateRawVolume(VolumeType type,String name,DiskOfferingVO offering,Long size,T vm,Account owner){
  if (size == null) {
    size=offering.getDiskSizeInBytes();
  }
  VolumeVO vol=new VolumeVO(type,name,vm.getDataCenterId(),owner.getDomainId(),owner.getId(),offering.getId(),size);
  if (vm != null) {
    vol.setInstanceId(vm.getId());
  }
  if (type.equals(VolumeType.ROOT)) {
    vol.setDeviceId(0l);
  }
 else {
    vol.setDeviceId(1l);
  }
  vol=_volsDao.persist(vol);
  if (vm instanceof UserVm) {
    long sizeMB=size / (1024 * 1024);
    EventUtils.saveEvent(User.UID_SYSTEM,vol.getAccountId(),EventTypes.EVENT_VOLUME_CREATE,""String_Node_Str"" + vol.getName() + ""String_Node_Str""+ sizeMB+ ""String_Node_Str"");
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,vol.getAccountId(),vol.getDataCenterId(),vol.getId(),vol.getName(),offering.getId(),null,sizeMB);
    _usageEventDao.persist(usageEvent);
  }
  return toDiskProfile(vol,offering);
}","@Override public <T extends VMInstanceVO>DiskProfile allocateRawVolume(VolumeType type,String name,DiskOfferingVO offering,Long size,T vm,Account owner){
  long userId=UserContext.current().getUserId();
  if (size == null) {
    size=offering.getDiskSizeInBytes();
  }
  VolumeVO vol=new VolumeVO(type,name,vm.getDataCenterId(),owner.getDomainId(),owner.getId(),offering.getId(),size);
  if (vm != null) {
    vol.setInstanceId(vm.getId());
  }
  if (type.equals(VolumeType.ROOT)) {
    vol.setDeviceId(0l);
  }
 else {
    vol.setDeviceId(1l);
  }
  vol=_volsDao.persist(vol);
  if (vm instanceof UserVm) {
    long sizeMB=size / (1024 * 1024);
    EventUtils.saveEvent(userId,vol.getAccountId(),EventTypes.EVENT_VOLUME_CREATE,""String_Node_Str"" + vol.getName() + ""String_Node_Str""+ sizeMB+ ""String_Node_Str"");
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VOLUME_CREATE,vol.getAccountId(),vol.getDataCenterId(),vol.getId(),vol.getName(),offering.getId(),null,sizeMB);
    _usageEventDao.persist(usageEvent);
    _accountMgr.incrementResourceCount(vm.getAccountId(),ResourceType.volume);
  }
  return toDiskProfile(vol,offering);
}"
89883,"@Override @DB public UserVm createVirtualMachine(DeployVMCmd cmd) throws InsufficientCapacityException, ResourceUnavailableException, ConcurrentOperationException {
  Account caller=UserContext.current().getAccount();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  List<Long> networkList=cmd.getNetworkIds();
  Account owner=_accountDao.findActiveAccount(accountName,domainId);
  if (owner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
  _accountMgr.checkAccess(caller,owner);
  long accountId=owner.getId();
  DataCenterVO dc=_dcDao.findById(cmd.getZoneId());
  if (dc == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getZoneId());
  }
  if (dc.getDomainId() != null) {
    DomainVO domain=_domainDao.findById(dc.getDomainId());
    if (domain == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + dc.getDomainId() + ""String_Node_Str""+ dc);
    }
    _accountMgr.checkAccess(caller,domain);
    _accountMgr.checkAccess(owner,domain);
  }
  ServiceOfferingVO offering=_serviceOfferingDao.findById(cmd.getServiceOfferingId());
  if (offering == null || offering.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getServiceOfferingId());
  }
  VMTemplateVO template=_templateDao.findById(cmd.getTemplateId());
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getTemplateId());
  }
  boolean isIso=Storage.ImageFormat.ISO == template.getFormat();
  if (isIso && !template.isBootable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + template.getId());
  }
  Pair<DiskOfferingVO,Long> rootDiskOffering=new Pair<DiskOfferingVO,Long>(null,null);
  List<Pair<DiskOfferingVO,Long>> dataDiskOfferings=new ArrayList<Pair<DiskOfferingVO,Long>>();
  if (isIso) {
    if (cmd.getDiskOfferingId() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
    if (diskOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
    }
    Long size=null;
    if (diskOffering.getDiskSize() == 0) {
      size=cmd.getSize();
      if (size == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
      }
    }
    rootDiskOffering.first(diskOffering);
    rootDiskOffering.second(size);
  }
 else {
    rootDiskOffering.first(offering);
    if (cmd.getDiskOfferingId() != null) {
      DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
      }
      Long size=null;
      if (diskOffering.getDiskSize() == 0) {
        size=cmd.getSize();
        if (size == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
        }
      }
      dataDiskOfferings.add(new Pair<DiskOfferingVO,Long>(diskOffering,size));
    }
  }
  String password=PasswordGenerator.generateRandomPassword(6);
  if (!template.getEnablePassword()) {
    password=""String_Node_Str"";
  }
  if (password == null || password.equals(""String_Node_Str"") || (!validPassword(password))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String networkDomain=null;
  if (networkDomain == null) {
    networkDomain=""String_Node_Str"" + Long.toHexString(owner.getId()) + _defaultNetworkDomain;
  }
  String userData=cmd.getUserData();
  byte[] decodedUserData=null;
  if (userData != null) {
    if (userData.length() >= 2 * MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    decodedUserData=org.apache.commons.codec.binary.Base64.decodeBase64(userData.getBytes());
    if (decodedUserData.length > MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (decodedUserData.length < 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  _accountMgr.checkAccess(caller,template);
  DataCenterDeployment plan=new DataCenterDeployment(dc.getId());
  s_logger.debug(""String_Node_Str"");
  if (dc.getNetworkType() == NetworkType.Basic && networkList == null) {
    Long singleNetworkId=null;
    SearchBuilder<NetworkVO> sb=_networkDao.createSearchBuilder();
    sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
    sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.EQ);
    SearchCriteria<NetworkVO> sc=sb.create();
    sc.setParameters(""String_Node_Str"",BroadcastDomainType.Native);
    sc.setParameters(""String_Node_Str"",dc.getId());
    List<NetworkVO> networks=_networkDao.search(sc,null);
    if (networks != null && networks.isEmpty()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      networkList=new ArrayList<Long>();
      singleNetworkId=networks.get(0).getId();
      networkList.add(singleNetworkId);
    }
  }
  if (networkList == null || networkList.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>();
  for (  Long networkId : networkList) {
    NetworkVO network=_networkDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
 else {
      if (!network.isShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(accountId,networkId);
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + networkId + ""String_Node_Str"");
        }
      }
      networks.add(new Pair<NetworkVO,NicProfile>(network,null));
    }
  }
  long id=_vmDao.getNextInSequence(Long.class,""String_Node_Str"");
  String hostName=cmd.getName();
  String instanceName=VirtualMachineName.getVmName(id,owner.getId(),_instance);
  if (hostName == null) {
    hostName=instanceName;
  }
 else {
    hostName=hostName.toLowerCase();
    UserVm vm=_vmDao.findVmByZoneIdAndName(dc.getId(),hostName);
    if (vm != null && !(vm.getState() == State.Expunging || vm.getState() == State.Error)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + hostName + ""String_Node_Str""+ dc.getId());
    }
 else     if (!NetUtils.verifyHostName(hostName)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  UserVmVO vm=new UserVmVO(id,instanceName,cmd.getDisplayName(),template.getId(),template.getGuestOSId(),offering.getOfferHA(),domainId,owner.getId(),offering.getId(),userData,hostName);
  if (_itMgr.allocate(vm,template,offering,rootDiskOffering,dataDiskOfferings,networks,null,plan,cmd.getHypervisor(),owner) == null) {
    return null;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,accountId,dc.getId(),vm.getId(),vm.getName(),offering.getId(),template.getId(),null);
  _usageEventDao.persist(usageEvent);
  return vm;
}","@Override @DB public UserVm createVirtualMachine(DeployVMCmd cmd) throws InsufficientCapacityException, ResourceUnavailableException, ConcurrentOperationException {
  Account caller=UserContext.current().getAccount();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  List<Long> networkList=cmd.getNetworkIds();
  Account owner=_accountDao.findActiveAccount(accountName,domainId);
  if (owner == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
  _accountMgr.checkAccess(caller,owner);
  long accountId=owner.getId();
  DataCenterVO dc=_dcDao.findById(cmd.getZoneId());
  if (dc == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getZoneId());
  }
  if (dc.getDomainId() != null) {
    DomainVO domain=_domainDao.findById(dc.getDomainId());
    if (domain == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + dc.getDomainId() + ""String_Node_Str""+ dc);
    }
    _accountMgr.checkAccess(caller,domain);
    _accountMgr.checkAccess(owner,domain);
  }
  ServiceOfferingVO offering=_serviceOfferingDao.findById(cmd.getServiceOfferingId());
  if (offering == null || offering.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getServiceOfferingId());
  }
  VMTemplateVO template=_templateDao.findById(cmd.getTemplateId());
  if (template == null || template.getRemoved() != null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getTemplateId());
  }
  boolean isIso=Storage.ImageFormat.ISO == template.getFormat();
  if (isIso && !template.isBootable()) {
    throw new InvalidParameterValueException(""String_Node_Str"" + template.getId());
  }
  Pair<DiskOfferingVO,Long> rootDiskOffering=new Pair<DiskOfferingVO,Long>(null,null);
  List<Pair<DiskOfferingVO,Long>> dataDiskOfferings=new ArrayList<Pair<DiskOfferingVO,Long>>();
  if (isIso) {
    if (cmd.getDiskOfferingId() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
    if (diskOffering == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
    }
    Long size=null;
    if (diskOffering.getDiskSize() == 0) {
      size=cmd.getSize();
      if (size == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
      }
    }
    rootDiskOffering.first(diskOffering);
    rootDiskOffering.second(size);
  }
 else {
    rootDiskOffering.first(offering);
    if (cmd.getDiskOfferingId() != null) {
      DiskOfferingVO diskOffering=_diskOfferingDao.findById(cmd.getDiskOfferingId());
      if (diskOffering == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + cmd.getDiskOfferingId());
      }
      Long size=null;
      if (diskOffering.getDiskSize() == 0) {
        size=cmd.getSize();
        if (size == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + diskOffering + ""String_Node_Str"");
        }
      }
      dataDiskOfferings.add(new Pair<DiskOfferingVO,Long>(diskOffering,size));
    }
  }
  String password=PasswordGenerator.generateRandomPassword(6);
  if (!template.getEnablePassword()) {
    password=""String_Node_Str"";
  }
  if (password == null || password.equals(""String_Node_Str"") || (!validPassword(password))) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  String networkDomain=null;
  if (networkDomain == null) {
    networkDomain=""String_Node_Str"" + Long.toHexString(owner.getId()) + _defaultNetworkDomain;
  }
  String userData=cmd.getUserData();
  byte[] decodedUserData=null;
  if (userData != null) {
    if (userData.length() >= 2 * MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    decodedUserData=org.apache.commons.codec.binary.Base64.decodeBase64(userData.getBytes());
    if (decodedUserData.length > MAX_USER_DATA_LENGTH_BYTES) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    if (decodedUserData.length < 1) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
  }
  _accountMgr.checkAccess(caller,template);
  DataCenterDeployment plan=new DataCenterDeployment(dc.getId());
  s_logger.debug(""String_Node_Str"");
  if (dc.getNetworkType() == NetworkType.Basic && networkList == null) {
    Long singleNetworkId=null;
    SearchBuilder<NetworkVO> sb=_networkDao.createSearchBuilder();
    sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
    sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.EQ);
    SearchCriteria<NetworkVO> sc=sb.create();
    sc.setParameters(""String_Node_Str"",BroadcastDomainType.Native);
    sc.setParameters(""String_Node_Str"",dc.getId());
    List<NetworkVO> networks=_networkDao.search(sc,null);
    if (networks != null && networks.isEmpty()) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
 else {
      networkList=new ArrayList<Long>();
      singleNetworkId=networks.get(0).getId();
      networkList.add(singleNetworkId);
    }
  }
  if (networkList == null || networkList.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>();
  for (  Long networkId : networkList) {
    NetworkVO network=_networkDao.findById(networkId);
    if (network == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + networkId);
    }
 else {
      if (!network.isShared()) {
        List<NetworkVO> networkMap=_networkDao.listBy(accountId,networkId);
        if (networkMap == null || networkMap.isEmpty()) {
          throw new PermissionDeniedException(""String_Node_Str"" + networkId + ""String_Node_Str"");
        }
      }
      networks.add(new Pair<NetworkVO,NicProfile>(network,null));
    }
  }
  long id=_vmDao.getNextInSequence(Long.class,""String_Node_Str"");
  String hostName=cmd.getName();
  String instanceName=VirtualMachineName.getVmName(id,owner.getId(),_instance);
  if (hostName == null) {
    hostName=instanceName;
  }
 else {
    hostName=hostName.toLowerCase();
    UserVm vm=_vmDao.findVmByZoneIdAndName(dc.getId(),hostName);
    if (vm != null && !(vm.getState() == State.Expunging || vm.getState() == State.Error)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + hostName + ""String_Node_Str""+ dc.getId());
    }
 else     if (!NetUtils.verifyHostName(hostName)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  UserVmVO vm=new UserVmVO(id,instanceName,cmd.getDisplayName(),template.getId(),template.getGuestOSId(),offering.getOfferHA(),domainId,owner.getId(),offering.getId(),userData,hostName);
  if (_itMgr.allocate(vm,template,offering,rootDiskOffering,dataDiskOfferings,networks,null,plan,cmd.getHypervisor(),owner) == null) {
    return null;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vm);
  }
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_CREATE,accountId,dc.getId(),vm.getId(),vm.getName(),offering.getId(),template.getId(),null);
  _usageEventDao.persist(usageEvent);
  _accountMgr.incrementResourceCount(accountId,ResourceType.user_vm);
  return vm;
}"
89884,"@Override public UserVm destroyVm(long vmId) throws ResourceUnavailableException, ConcurrentOperationException {
  Account account=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + vmId);
  }
  userId=accountAndUserValidation(vmId,account,userId,vm);
  User caller=_userDao.findById(userId);
  boolean status;
  status=_itMgr.destroy(vm,caller,account);
  if (status) {
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
    _usageEventDao.persist(usageEvent);
    return _vmDao.findById(vmId);
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"" + vmId);
  }
}","@Override public UserVm destroyVm(long vmId) throws ResourceUnavailableException, ConcurrentOperationException {
  Account account=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + vmId);
  }
  userId=accountAndUserValidation(vmId,account,userId,vm);
  User caller=_userDao.findById(userId);
  boolean status;
  status=_itMgr.destroy(vm,caller,account);
  if (status) {
    UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
    _usageEventDao.persist(usageEvent);
    _accountMgr.decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
    return _vmDao.findById(vmId);
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"" + vmId);
  }
}"
89885,"@Override @DB public boolean destroyVirtualMachine(long userId,long vmId){
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null || vm.getState() == State.Destroyed || vm.getState() == State.Expunging || vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    return true;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  long startEventId=EventUtils.saveStartedEvent(userId,vm.getAccountId(),EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vmId);
  if (!stop(userId,vm)) {
    s_logger.error(""String_Node_Str"" + vmId);
    EventUtils.saveEvent(userId,vm.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vmId,startEventId);
    return false;
  }
 else {
    EventUtils.saveEvent(userId,vm.getAccountId(),EventVO.LEVEL_INFO,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vmId,startEventId);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  _accountMgr.decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
  if (!destroy(vm)) {
    return false;
  }
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
  _usageEventDao.persist(usageEvent);
  cleanNetworkRules(userId,vmId);
  List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
  for (  VolumeVO volume : volumes) {
    _storageMgr.destroyVolume(volume);
  }
  txn.commit();
  return true;
}","@Override @DB public boolean destroyVirtualMachine(long userId,long vmId){
  UserVmVO vm=_vmDao.findById(vmId);
  if (vm == null || vm.getState() == State.Destroyed || vm.getState() == State.Expunging || vm.getRemoved() != null) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + vmId);
    }
    return true;
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vmId);
  }
  long startEventId=EventUtils.saveStartedEvent(userId,vm.getAccountId(),EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vmId);
  if (!stop(userId,vm)) {
    s_logger.error(""String_Node_Str"" + vmId);
    EventUtils.saveEvent(userId,vm.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vmId,startEventId);
    return false;
  }
 else {
    EventUtils.saveEvent(userId,vm.getAccountId(),EventVO.LEVEL_INFO,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vmId,startEventId);
  }
  Transaction txn=Transaction.currentTxn();
  txn.start();
  if (!destroy(vm)) {
    return false;
  }
  UsageEventVO usageEvent=new UsageEventVO(EventTypes.EVENT_VM_DESTROY,vm.getAccountId(),vm.getDataCenterId(),vm.getId(),vm.getName(),vm.getServiceOfferingId(),vm.getTemplateId(),null);
  _usageEventDao.persist(usageEvent);
  cleanNetworkRules(userId,vmId);
  List<VolumeVO> volumes=_volsDao.findByInstance(vmId);
  for (  VolumeVO volume : volumes) {
    _storageMgr.destroyVolume(volume);
  }
  txn.commit();
  return true;
}"
89886,"@Override public void create(){
  long id=_snapshotService.getNextInSequence(this);
  this.setEntityId(id);
}","@Override public void create(){
  Long id=_snapshotService.getNextInSequence(this);
  this.setEntityId(id);
}"
89887,"@Override public void execute(){
  try {
    Snapshot snapshot=_snapshotService.createSnapshot(this);
    if (snapshot != null) {
      SnapshotResponse response=_responseGenerator.createSnapshotResponse(snapshot);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + volumeId);
    }
  }
 catch (  ResourceAllocationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_ALLOCATION_ERROR,ex.getMessage());
  }
}","@Override public void execute(){
  try {
    if (this.getEntityId() == null) {
      Long id=_snapshotService.getNextInSequence(this);
      this.setEntityId(id);
    }
    Snapshot snapshot=_snapshotService.createSnapshot(this);
    if (snapshot != null) {
      SnapshotResponse response=_responseGenerator.createSnapshotResponse(snapshot);
      response.setResponseName(getCommandName());
      this.setResponseObject(response);
    }
 else {
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + volumeId);
    }
  }
 catch (  ResourceAllocationException ex) {
    s_logger.warn(""String_Node_Str"",ex);
    throw new ServerApiException(BaseCmd.RESOURCE_ALLOCATION_ERROR,ex.getMessage());
  }
}"
89888,"@Override @DB public SnapshotVO createSnapshotImpl(Long volumeId,Long policyId,Long snapshotId) throws ResourceAllocationException {
  VolumeVO v=_volsDao.findById(volumeId);
  if (v != null && _volsDao.getHypervisorType(v.getId()).equals(HypervisorType.KVM)) {
    UserVmVO uservm=_vmDao.findById(v.getInstanceId());
    if (uservm != null) {
      UserVmVO vm=_vmDao.acquireInLockTable(uservm.getId(),10);
      if (vm == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
      }
    }
  }
  Long poolId=v.getPoolId();
  if (poolId == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  VolumeVO volume=_volsDao.acquireInLockTable(volumeId,10);
  if (volume == null) {
    volume=_volsDao.findById(volumeId);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  if (_volsDao.getHypervisorType(volume.getId()).equals(HypervisorType.KVM)) {
    StoragePoolVO storagePool=_storagePoolDao.findById(volume.getPoolId());
    ClusterVO cluster=_clusterDao.findById(storagePool.getClusterId());
    List<HostVO> hosts=_hostDao.listByCluster(cluster.getId());
    if (hosts != null && !hosts.isEmpty()) {
      HostVO host=hosts.get(0);
      _hostDao.loadDetails(host);
      String hostOS=host.getDetail(""String_Node_Str"");
      String hostOSVersion=host.getDetail(""String_Node_Str"");
      if (!(hostOS != null && hostOS.equalsIgnoreCase(""String_Node_Str"") && hostOSVersion != null && Integer.parseInt(hostOSVersion) >= 13)) {
        throw new CloudRuntimeException(""String_Node_Str"" + hostOS + ""String_Node_Str""+ hostOSVersion+ ""String_Node_Str"");
      }
    }
  }
  SnapshotVO snapshot=null;
  boolean backedUp=false;
  try {
    snapshot=createSnapshotOnPrimary(volume,policyId,snapshotId);
    if (snapshot != null && snapshot.getStatus() == Snapshot.Status.CreatedOnPrimary) {
      snapshotId=snapshot.getId();
      backedUp=backupSnapshotToSecondaryStorage(snapshot);
      if (!backedUp) {
        throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"" + e.toString());
  }
 finally {
    postCreateSnapshot(volumeId,snapshotId,policyId,backedUp);
    _volsDao.releaseFromLockTable(volumeId);
  }
  return snapshot;
}","@Override @DB public SnapshotVO createSnapshotImpl(Long volumeId,Long policyId,Long snapshotId) throws ResourceAllocationException {
  VolumeVO v=_volsDao.findById(volumeId);
  if (v != null && _volsDao.getHypervisorType(v.getId()).equals(HypervisorType.KVM)) {
    UserVmVO uservm=_vmDao.findById(v.getInstanceId());
    if (uservm != null) {
      UserVmVO vm=_vmDao.acquireInLockTable(uservm.getId(),10);
      if (vm == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
      }
    }
  }
  Long poolId=v.getPoolId();
  if (poolId == null) {
    throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
  }
  VolumeVO volume=_volsDao.acquireInLockTable(volumeId,10);
  if (volume == null) {
    volume=_volsDao.findById(volumeId);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  if (_volsDao.getHypervisorType(volume.getId()).equals(HypervisorType.KVM)) {
    StoragePoolVO storagePool=_storagePoolDao.findById(volume.getPoolId());
    ClusterVO cluster=_clusterDao.findById(storagePool.getClusterId());
    List<HostVO> hosts=_hostDao.listByCluster(cluster.getId());
    if (hosts != null && !hosts.isEmpty()) {
      HostVO host=hosts.get(0);
      _hostDao.loadDetails(host);
      String hostOS=host.getDetail(""String_Node_Str"");
      String hostOSVersion=host.getDetail(""String_Node_Str"");
      if (!(hostOS != null && hostOS.equalsIgnoreCase(""String_Node_Str"") && hostOSVersion != null && Integer.parseInt(hostOSVersion) >= 13)) {
        throw new CloudRuntimeException(""String_Node_Str"" + hostOS + ""String_Node_Str""+ hostOSVersion+ ""String_Node_Str"");
      }
    }
  }
  SnapshotVO snapshot=null;
  boolean backedUp=false;
  try {
    snapshot=createSnapshotOnPrimary(volume,policyId,snapshotId);
    if (snapshot != null && snapshot.getStatus() == Snapshot.Status.CreatedOnPrimary) {
      snapshotId=snapshot.getId();
      backedUp=backupSnapshotToSecondaryStorage(snapshot);
      if (!backedUp) {
        throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"" + e.toString());
  }
 finally {
    if (snapshotId != null) {
      postCreateSnapshot(volumeId,snapshotId,policyId,backedUp);
    }
    _volsDao.releaseFromLockTable(volumeId);
  }
  return snapshot;
}"
89889,"@DB protected void scheduleSnapshots(){
  String displayTime=DateUtil.displayDateInTimezone(DateUtil.GMT_TIMEZONE,_currentTimestamp);
  s_logger.debug(""String_Node_Str"" + displayTime);
  List<SnapshotScheduleVO> snapshotsToBeExecuted=_snapshotScheduleDao.getSchedulesToExecute(_currentTimestamp);
  s_logger.debug(""String_Node_Str"" + snapshotsToBeExecuted.size() + ""String_Node_Str""+ displayTime);
  long userId=1;
  for (  SnapshotScheduleVO snapshotToBeExecuted : snapshotsToBeExecuted) {
    long policyId=snapshotToBeExecuted.getPolicyId();
    long volumeId=snapshotToBeExecuted.getVolumeId();
    if (s_logger.isDebugEnabled()) {
      Date scheduledTimestamp=snapshotToBeExecuted.getScheduledTimestamp();
      displayTime=DateUtil.displayDateInTimezone(DateUtil.GMT_TIMEZONE,scheduledTimestamp);
      s_logger.debug(""String_Node_Str"" + volumeId + ""String_Node_Str""+ snapshotToBeExecuted.getId()+ ""String_Node_Str""+ displayTime);
    }
    long snapshotScheId=snapshotToBeExecuted.getId();
    SnapshotScheduleVO tmpSnapshotScheduleVO=null;
    try {
      tmpSnapshotScheduleVO=_snapshotScheduleDao.acquireInLockTable(snapshotScheId);
      Map<String,String> params=new HashMap<String,String>();
      params.put(""String_Node_Str"",""String_Node_Str"" + volumeId);
      params.put(""String_Node_Str"",""String_Node_Str"" + policyId);
      AsyncJobVO job=new AsyncJobVO();
      job.setUserId(userId);
      job.setAccountId(1L);
      job.setCmd(CreateSnapshotCmd.class.getName());
      job.setCmdInfo(GsonHelper.getBuilder().create().toJson(params));
      long jobId=_asyncMgr.submitAsyncJob(job);
      tmpSnapshotScheduleVO.setAsyncJobId(jobId);
      _snapshotScheduleDao.update(snapshotScheId,tmpSnapshotScheduleVO);
    }
  finally {
      if (tmpSnapshotScheduleVO != null) {
        _snapshotScheduleDao.releaseFromLockTable(snapshotScheId);
      }
    }
  }
}","@DB protected void scheduleSnapshots(){
  String displayTime=DateUtil.displayDateInTimezone(DateUtil.GMT_TIMEZONE,_currentTimestamp);
  s_logger.debug(""String_Node_Str"" + displayTime);
  List<SnapshotScheduleVO> snapshotsToBeExecuted=_snapshotScheduleDao.getSchedulesToExecute(_currentTimestamp);
  s_logger.debug(""String_Node_Str"" + snapshotsToBeExecuted.size() + ""String_Node_Str""+ displayTime);
  long userId=1;
  for (  SnapshotScheduleVO snapshotToBeExecuted : snapshotsToBeExecuted) {
    long policyId=snapshotToBeExecuted.getPolicyId();
    long volumeId=snapshotToBeExecuted.getVolumeId();
    if (s_logger.isDebugEnabled()) {
      Date scheduledTimestamp=snapshotToBeExecuted.getScheduledTimestamp();
      displayTime=DateUtil.displayDateInTimezone(DateUtil.GMT_TIMEZONE,scheduledTimestamp);
      s_logger.debug(""String_Node_Str"" + volumeId + ""String_Node_Str""+ snapshotToBeExecuted.getId()+ ""String_Node_Str""+ displayTime);
    }
    long snapshotScheId=snapshotToBeExecuted.getId();
    SnapshotScheduleVO tmpSnapshotScheduleVO=null;
    try {
      tmpSnapshotScheduleVO=_snapshotScheduleDao.acquireInLockTable(snapshotScheId);
      Map<String,String> params=new HashMap<String,String>();
      params.put(""String_Node_Str"",""String_Node_Str"" + volumeId);
      params.put(""String_Node_Str"",""String_Node_Str"" + policyId);
      params.put(""String_Node_Str"",""String_Node_Str"");
      params.put(""String_Node_Str"",""String_Node_Str"");
      AsyncJobVO job=new AsyncJobVO();
      job.setUserId(userId);
      job.setAccountId(1L);
      job.setCmd(CreateSnapshotCmd.class.getName());
      job.setCmdInfo(GsonHelper.getBuilder().create().toJson(params));
      long jobId=_asyncMgr.submitAsyncJob(job);
      tmpSnapshotScheduleVO.setAsyncJobId(jobId);
      _snapshotScheduleDao.update(snapshotScheId,tmpSnapshotScheduleVO);
    }
  finally {
      if (tmpSnapshotScheduleVO != null) {
        _snapshotScheduleDao.releaseFromLockTable(snapshotScheId);
      }
    }
  }
}"
89890,"@DB(txn=false) protected void prepareAttribute(final int j,final PreparedStatement pstmt,final Attribute attr,Object value) throws SQLException {
  if (attr.is(Attribute.Flag.DaoGenerated) && value == null) {
    value=generateValue(attr);
    if (attr.field == null) {
      pstmt.setObject(j,value);
      return;
    }
  }
  if (attr.field.getType() == String.class) {
    final String str=(String)value;
    if (str == null) {
      pstmt.setString(j,null);
      return;
    }
    final Column column=attr.field.getAnnotation(Column.class);
    final int length=column != null ? column.length() : 255;
    if (length < str.length()) {
      try {
        pstmt.setBytes(j,str.substring(0,column.length()).getBytes(""String_Node_Str""));
      }
 catch (      UnsupportedEncodingException e) {
        assert(false);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
    }
 else {
      try {
        pstmt.setBytes(j,str.getBytes(""String_Node_Str""));
      }
 catch (      UnsupportedEncodingException e) {
        assert(false);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
    }
  }
 else   if (attr.field.getType() == Date.class) {
    final Date date=(Date)value;
    if (date == null) {
      pstmt.setObject(j,null);
      return;
    }
    if (attr.is(Attribute.Flag.Date)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),date));
    }
 else     if (attr.is(Attribute.Flag.TimeStamp)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),date));
    }
 else     if (attr.is(Attribute.Flag.Time)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),date));
    }
  }
 else   if (attr.field.getType() == Calendar.class) {
    final Calendar cal=(Calendar)value;
    if (cal == null) {
      pstmt.setObject(j,null);
      return;
    }
    if (attr.is(Attribute.Flag.Date)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),cal.getTime()));
    }
 else     if (attr.is(Attribute.Flag.TimeStamp)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),cal.getTime()));
    }
 else     if (attr.is(Attribute.Flag.Time)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),cal.getTime()));
    }
  }
 else   if (attr.field.getType().isEnum()) {
    final Enumerated enumerated=attr.field.getType().getAnnotation(Enumerated.class);
    final EnumType type=(enumerated == null) ? EnumType.STRING : enumerated.value();
    if (type == EnumType.STRING) {
      pstmt.setString(j,value == null ? null : value.toString());
    }
 else     if (type == EnumType.ORDINAL) {
      pstmt.setInt(j,value == null ? null : ((Enum<?>)value).ordinal());
    }
  }
 else   if (attr.field.getType() == URI.class) {
    pstmt.setString(j,value == null ? null : value.toString());
  }
 else   if (attr.field.getType() == URL.class) {
    pstmt.setURL(j,(URL)value);
  }
 else   if (attr.field.getType() == byte[].class) {
    pstmt.setBytes(j,(byte[])value);
  }
 else   if (attr.field.getType() == Ip.class) {
    final Enumerated enumerated=attr.field.getType().getAnnotation(Enumerated.class);
    final EnumType type=(enumerated == null) ? EnumType.ORDINAL : enumerated.value();
    if (type == EnumType.STRING) {
      pstmt.setString(j,value == null ? null : value.toString());
    }
 else     if (type == EnumType.ORDINAL) {
      pstmt.setLong(j,value == null ? null : ((Ip)value).longValue());
    }
  }
 else {
    pstmt.setObject(j,value);
  }
}","@DB(txn=false) protected void prepareAttribute(final int j,final PreparedStatement pstmt,final Attribute attr,Object value) throws SQLException {
  if (attr.is(Attribute.Flag.DaoGenerated) && value == null) {
    value=generateValue(attr);
    if (attr.field == null) {
      pstmt.setObject(j,value);
      return;
    }
  }
  if (attr.field.getType() == String.class) {
    final String str=(String)value;
    if (str == null) {
      pstmt.setString(j,null);
      return;
    }
    final Column column=attr.field.getAnnotation(Column.class);
    final int length=column != null ? column.length() : 255;
    if (length < str.length()) {
      try {
        pstmt.setBytes(j,str.substring(0,column.length()).getBytes(""String_Node_Str""));
      }
 catch (      UnsupportedEncodingException e) {
        assert(false);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
    }
 else {
      try {
        pstmt.setBytes(j,str.getBytes(""String_Node_Str""));
      }
 catch (      UnsupportedEncodingException e) {
        assert(false);
        throw new CloudRuntimeException(""String_Node_Str"");
      }
    }
  }
 else   if (attr.field.getType() == Date.class) {
    final Date date=(Date)value;
    if (date == null) {
      pstmt.setObject(j,null);
      return;
    }
    if (attr.is(Attribute.Flag.Date)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),date));
    }
 else     if (attr.is(Attribute.Flag.TimeStamp)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),date));
    }
 else     if (attr.is(Attribute.Flag.Time)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),date));
    }
  }
 else   if (attr.field.getType() == Calendar.class) {
    final Calendar cal=(Calendar)value;
    if (cal == null) {
      pstmt.setObject(j,null);
      return;
    }
    if (attr.is(Attribute.Flag.Date)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),cal.getTime()));
    }
 else     if (attr.is(Attribute.Flag.TimeStamp)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),cal.getTime()));
    }
 else     if (attr.is(Attribute.Flag.Time)) {
      pstmt.setString(j,DateUtil.getDateDisplayString(TimeZone.getTimeZone(""String_Node_Str""),cal.getTime()));
    }
  }
 else   if (attr.field.getType().isEnum()) {
    final Enumerated enumerated=attr.field.getType().getAnnotation(Enumerated.class);
    final EnumType type=(enumerated == null) ? EnumType.STRING : enumerated.value();
    if (type == EnumType.STRING) {
      pstmt.setString(j,value == null ? null : value.toString());
    }
 else     if (type == EnumType.ORDINAL) {
      pstmt.setInt(j,value == null ? null : ((Enum<?>)value).ordinal());
    }
  }
 else   if (attr.field.getType() == URI.class) {
    pstmt.setString(j,value == null ? null : value.toString());
  }
 else   if (attr.field.getType() == URL.class) {
    pstmt.setURL(j,(URL)value);
  }
 else   if (attr.field.getType() == byte[].class) {
    pstmt.setBytes(j,(byte[])value);
  }
 else   if (attr.field.getType() == Ip.class) {
    final Enumerated enumerated=attr.field.getType().getAnnotation(Enumerated.class);
    final EnumType type=(enumerated == null) ? EnumType.ORDINAL : enumerated.value();
    if (type == EnumType.STRING) {
      pstmt.setString(j,value == null ? null : value.toString());
    }
 else     if (type == EnumType.ORDINAL) {
      pstmt.setLong(j,value == null ? null : (value instanceof Ip) ? ((Ip)value).longValue() : NetUtils.ip2Long((String)value));
    }
  }
 else {
    pstmt.setObject(j,value);
  }
}"
89891,"@SuppressWarnings(""String_Node_Str"") public String handleRequest(Map params,boolean decode,String responseType,StringBuffer auditTrailSb) throws ServerApiException {
  String response=null;
  String[] command=null;
  try {
    command=(String[])params.get(""String_Node_Str"");
    if (command == null) {
      s_logger.error(""String_Node_Str"");
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"");
        for (        Object key : params.keySet()) {
          String keyStr=(String)key;
          String[] value=(String[])params.get(key);
          s_logger.trace(""String_Node_Str"" + keyStr + ""String_Node_Str""+ ((value == null) ? ""String_Node_Str"" : value[0]));
        }
      }
      throw new ServerApiException(BaseCmd.UNSUPPORTED_ACTION_ERROR,""String_Node_Str"");
    }
 else {
      Map<String,String> paramMap=new HashMap<String,String>();
      Set keys=params.keySet();
      Iterator keysIter=keys.iterator();
      while (keysIter.hasNext()) {
        String key=(String)keysIter.next();
        if (""String_Node_Str"".equalsIgnoreCase(key)) {
          continue;
        }
        String[] value=(String[])params.get(key);
        String decodedValue=null;
        if (decode) {
          try {
            decodedValue=URLDecoder.decode(value[0],""String_Node_Str"");
          }
 catch (          UnsupportedEncodingException usex) {
            s_logger.warn(key + ""String_Node_Str"" + value[0]);
            throw new ServerApiException(BaseCmd.PARAM_ERROR,key + ""String_Node_Str"" + value[0]);
          }
        }
 else {
          decodedValue=value[0];
        }
        paramMap.put(key,decodedValue);
      }
      String cmdClassName=_apiCommands.getProperty(command[0]);
      if (cmdClassName != null) {
        Class<?> cmdClass=Class.forName(cmdClassName);
        BaseCmd cmdObj=(BaseCmd)cmdClass.newInstance();
        cmdObj.setResponseType(responseType);
        response=queueCommand(cmdObj,paramMap);
        buildAuditTrail(auditTrailSb,command[0],response);
      }
 else {
        String errorString=""String_Node_Str"" + ((command == null) ? ""String_Node_Str"" : command[0]);
        s_logger.warn(errorString);
        auditTrailSb.append(""String_Node_Str"" + errorString);
        throw new ServerApiException(BaseCmd.UNSUPPORTED_ACTION_ERROR,errorString);
      }
    }
  }
 catch (  Exception ex) {
    if (ex instanceof ServerApiException) {
      throw (ServerApiException)ex;
    }
 else {
      s_logger.error(""String_Node_Str"" + ((command == null) ? ""String_Node_Str"" : command[0]),ex);
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
  return response;
}","@SuppressWarnings(""String_Node_Str"") public String handleRequest(Map params,boolean decode,String responseType,StringBuffer auditTrailSb) throws ServerApiException {
  String response=null;
  String[] command=null;
  try {
    command=(String[])params.get(""String_Node_Str"");
    if (command == null) {
      s_logger.error(""String_Node_Str"");
      if (s_logger.isTraceEnabled()) {
        s_logger.trace(""String_Node_Str"");
        for (        Object key : params.keySet()) {
          String keyStr=(String)key;
          String[] value=(String[])params.get(key);
          s_logger.trace(""String_Node_Str"" + keyStr + ""String_Node_Str""+ ((value == null) ? ""String_Node_Str"" : value[0]));
        }
      }
      throw new ServerApiException(BaseCmd.UNSUPPORTED_ACTION_ERROR,""String_Node_Str"");
    }
 else {
      Map<String,String> paramMap=new HashMap<String,String>();
      Set keys=params.keySet();
      Iterator keysIter=keys.iterator();
      while (keysIter.hasNext()) {
        String key=(String)keysIter.next();
        if (""String_Node_Str"".equalsIgnoreCase(key)) {
          continue;
        }
        String[] value=(String[])params.get(key);
        String decodedValue=null;
        if (decode) {
          try {
            decodedValue=URLDecoder.decode(value[0],""String_Node_Str"");
          }
 catch (          UnsupportedEncodingException usex) {
            s_logger.warn(key + ""String_Node_Str"" + value[0]);
            throw new ServerApiException(BaseCmd.PARAM_ERROR,key + ""String_Node_Str"" + value[0]);
          }
catch (          IllegalArgumentException iae) {
            s_logger.warn(key + ""String_Node_Str"" + value[0]);
            throw new ServerApiException(BaseCmd.PARAM_ERROR,key + ""String_Node_Str"" + value[0]+ ""String_Node_Str"");
          }
        }
 else {
          decodedValue=value[0];
        }
        paramMap.put(key,decodedValue);
      }
      String cmdClassName=_apiCommands.getProperty(command[0]);
      if (cmdClassName != null) {
        Class<?> cmdClass=Class.forName(cmdClassName);
        BaseCmd cmdObj=(BaseCmd)cmdClass.newInstance();
        cmdObj.setResponseType(responseType);
        response=queueCommand(cmdObj,paramMap);
        buildAuditTrail(auditTrailSb,command[0],response);
      }
 else {
        String errorString=""String_Node_Str"" + ((command == null) ? ""String_Node_Str"" : command[0]);
        s_logger.warn(errorString);
        auditTrailSb.append(""String_Node_Str"" + errorString);
        throw new ServerApiException(BaseCmd.UNSUPPORTED_ACTION_ERROR,errorString);
      }
    }
  }
 catch (  Exception ex) {
    if (ex instanceof ServerApiException) {
      throw (ServerApiException)ex;
    }
 else {
      s_logger.error(""String_Node_Str"" + ((command == null) ? ""String_Node_Str"" : command[0]),ex);
      throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
    }
  }
  return response;
}"
89892,"@DB protected void checkIfPodIsDeletable(long podId){
  List<List<String>> tablesToCheck=new ArrayList<List<String>>();
  HostPodVO pod=_podDao.findById(podId);
  if (_privateIpAddressDao.countIPs(podId,pod.getDataCenterId(),true) != 0) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  List<String> volumes=new ArrayList<String>();
  volumes.add(0,""String_Node_Str"");
  volumes.add(1,""String_Node_Str"");
  volumes.add(2,""String_Node_Str"");
  tablesToCheck.add(volumes);
  List<String> host=new ArrayList<String>();
  host.add(0,""String_Node_Str"");
  host.add(1,""String_Node_Str"");
  host.add(2,""String_Node_Str"");
  tablesToCheck.add(host);
  List<String> vmInstance=new ArrayList<String>();
  vmInstance.add(0,""String_Node_Str"");
  vmInstance.add(1,""String_Node_Str"");
  vmInstance.add(2,""String_Node_Str"");
  tablesToCheck.add(vmInstance);
  List<String> alert=new ArrayList<String>();
  alert.add(0,""String_Node_Str"");
  alert.add(1,""String_Node_Str"");
  alert.add(2,""String_Node_Str"");
  tablesToCheck.add(alert);
  for (  List<String> table : tablesToCheck) {
    String tableName=table.get(0);
    String column=table.get(1);
    String errorMsg=table.get(2);
    String dbName;
    if (tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")) {
      dbName=""String_Node_Str"";
    }
 else {
      dbName=""String_Node_Str"";
    }
    String selectSql=""String_Node_Str"" + dbName + ""String_Node_Str""+ tableName+ ""String_Node_Str""+ column+ ""String_Node_Str"";
    Transaction txn=Transaction.currentTxn();
    try {
      PreparedStatement stmt=txn.prepareAutoCloseStatement(selectSql);
      stmt.setLong(1,podId);
      ResultSet rs=stmt.executeQuery();
      if (rs != null && rs.next()) {
        throw new CloudRuntimeException(""String_Node_Str"" + errorMsg);
      }
    }
 catch (    SQLException ex) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
}","@DB protected void checkIfPodIsDeletable(long podId){
  List<List<String>> tablesToCheck=new ArrayList<List<String>>();
  HostPodVO pod=_podDao.findById(podId);
  if (_privateIpAddressDao.countIPs(podId,pod.getDataCenterId(),true) != 0) {
    throw new CloudRuntimeException(""String_Node_Str"");
  }
  List<String> volumes=new ArrayList<String>();
  volumes.add(0,""String_Node_Str"");
  volumes.add(1,""String_Node_Str"");
  volumes.add(2,""String_Node_Str"");
  tablesToCheck.add(volumes);
  List<String> host=new ArrayList<String>();
  host.add(0,""String_Node_Str"");
  host.add(1,""String_Node_Str"");
  host.add(2,""String_Node_Str"");
  tablesToCheck.add(host);
  List<String> vmInstance=new ArrayList<String>();
  vmInstance.add(0,""String_Node_Str"");
  vmInstance.add(1,""String_Node_Str"");
  vmInstance.add(2,""String_Node_Str"");
  tablesToCheck.add(vmInstance);
  for (  List<String> table : tablesToCheck) {
    String tableName=table.get(0);
    String column=table.get(1);
    String errorMsg=table.get(2);
    String dbName;
    if (tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"") || tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")|| tableName.equals(""String_Node_Str"")) {
      dbName=""String_Node_Str"";
    }
 else {
      dbName=""String_Node_Str"";
    }
    String selectSql=""String_Node_Str"" + dbName + ""String_Node_Str""+ tableName+ ""String_Node_Str""+ column+ ""String_Node_Str"";
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    Transaction txn=Transaction.currentTxn();
    try {
      PreparedStatement stmt=txn.prepareAutoCloseStatement(selectSql);
      stmt.setLong(1,podId);
      ResultSet rs=stmt.executeQuery();
      if (rs != null && rs.next()) {
        throw new CloudRuntimeException(""String_Node_Str"" + errorMsg);
      }
    }
 catch (    SQLException ex) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
}"
89893,"private void setStateMachine(){
  _stateMachine=new StateMachine2<State,VirtualMachine.Event,VMInstanceVO>();
  _stateMachine.addTransition(null,VirtualMachine.Event.CreateRequested,State.Creating);
  _stateMachine.addTransition(State.Creating,VirtualMachine.Event.OperationSucceeded,State.Stopped);
  _stateMachine.addTransition(State.Creating,VirtualMachine.Event.OperationFailed,State.Error);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.StartRequested,State.Starting);
  _stateMachine.addTransition(State.Error,VirtualMachine.Event.DestroyRequested,State.Expunging);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.DestroyRequested,State.Destroyed);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.StopRequested,State.Stopped);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.OperationFailed,State.Error);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.OperationRetry,State.Starting);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.OperationSucceeded,State.Running);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.OperationFailed,State.Stopped);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.AgentReportRunning,State.Running);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Destroyed,VirtualMachine.Event.RecoveryRequested,State.Stopped);
  _stateMachine.addTransition(State.Destroyed,VirtualMachine.Event.ExpungeOperation,State.Expunging);
  _stateMachine.addTransition(State.Creating,VirtualMachine.Event.MigrationRequested,State.Destroyed);
  _stateMachine.addTransition(State.Running,VirtualMachine.Event.MigrationRequested,State.Migrating);
  _stateMachine.addTransition(State.Running,VirtualMachine.Event.AgentReportRunning,State.Running);
  _stateMachine.addTransition(State.Running,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Running,VirtualMachine.Event.StopRequested,State.Stopping);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.MigrationRequested,State.Migrating);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.OperationSucceeded,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.OperationFailed,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.MigrationFailedOnSource,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.MigrationFailedOnDest,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.AgentReportRunning,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.OperationSucceeded,State.Stopped);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.OperationFailed,State.Running);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.AgentReportRunning,State.Running);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.StopRequested,State.Stopping);
  _stateMachine.addTransition(State.Expunging,VirtualMachine.Event.OperationFailed,State.Expunging);
  _stateMachine.addTransition(State.Expunging,VirtualMachine.Event.ExpungeOperation,State.Expunging);
  _stateMachine.registerListeners(_stateListner);
}","private void setStateMachine(){
  _stateMachine=new StateMachine2<State,VirtualMachine.Event,VMInstanceVO>();
  _stateMachine.addTransition(null,VirtualMachine.Event.CreateRequested,State.Creating);
  _stateMachine.addTransition(State.Creating,VirtualMachine.Event.OperationSucceeded,State.Stopped);
  _stateMachine.addTransition(State.Creating,VirtualMachine.Event.OperationFailed,State.Error);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.StartRequested,State.Starting);
  _stateMachine.addTransition(State.Error,VirtualMachine.Event.DestroyRequested,State.Expunging);
  _stateMachine.addTransition(State.Error,VirtualMachine.Event.ExpungeOperation,State.Expunging);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.DestroyRequested,State.Destroyed);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.StopRequested,State.Stopped);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Stopped,VirtualMachine.Event.OperationFailed,State.Error);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.OperationRetry,State.Starting);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.OperationSucceeded,State.Running);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.OperationFailed,State.Stopped);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.AgentReportRunning,State.Running);
  _stateMachine.addTransition(State.Starting,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Destroyed,VirtualMachine.Event.RecoveryRequested,State.Stopped);
  _stateMachine.addTransition(State.Destroyed,VirtualMachine.Event.ExpungeOperation,State.Expunging);
  _stateMachine.addTransition(State.Creating,VirtualMachine.Event.MigrationRequested,State.Destroyed);
  _stateMachine.addTransition(State.Running,VirtualMachine.Event.MigrationRequested,State.Migrating);
  _stateMachine.addTransition(State.Running,VirtualMachine.Event.AgentReportRunning,State.Running);
  _stateMachine.addTransition(State.Running,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Running,VirtualMachine.Event.StopRequested,State.Stopping);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.MigrationRequested,State.Migrating);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.OperationSucceeded,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.OperationFailed,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.MigrationFailedOnSource,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.MigrationFailedOnDest,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.AgentReportRunning,State.Running);
  _stateMachine.addTransition(State.Migrating,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.OperationSucceeded,State.Stopped);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.OperationFailed,State.Running);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.AgentReportRunning,State.Running);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.AgentReportStopped,State.Stopped);
  _stateMachine.addTransition(State.Stopping,VirtualMachine.Event.StopRequested,State.Stopping);
  _stateMachine.addTransition(State.Expunging,VirtualMachine.Event.OperationFailed,State.Expunging);
  _stateMachine.addTransition(State.Expunging,VirtualMachine.Event.ExpungeOperation,State.Expunging);
  _stateMachine.registerListeners(_stateListner);
}"
89894,"@Override public void cleanupVolumes(Long vmId){
  List<VolumeVO> volumesForVm=_volsDao.findByInstance(vmId);
  for (  VolumeVO vol : volumesForVm) {
    destroyVolume(vol);
  }
}","@Override public void cleanupVolumes(Long vmId){
  List<VolumeVO> volumesForVm=_volsDao.findByInstance(vmId);
  for (  VolumeVO vol : volumesForVm) {
    if (vol.getVolumeType().equals(VolumeType.ROOT)) {
      destroyVolume(vol);
    }
 else {
      _volsDao.detachVolume(vol.getId());
    }
  }
}"
89895,"@DB protected void checkIfZoneIsDeletable(long zoneId){
  List<List<String>> tablesToCheck=new ArrayList<List<String>>();
  List<String> alert=new ArrayList<String>();
  alert.add(0,""String_Node_Str"");
  alert.add(1,""String_Node_Str"");
  alert.add(2,""String_Node_Str"");
  tablesToCheck.add(alert);
  List<String> host=new ArrayList<String>();
  host.add(0,""String_Node_Str"");
  host.add(1,""String_Node_Str"");
  host.add(2,""String_Node_Str"");
  tablesToCheck.add(host);
  List<String> hostPodRef=new ArrayList<String>();
  hostPodRef.add(0,""String_Node_Str"");
  hostPodRef.add(1,""String_Node_Str"");
  hostPodRef.add(2,""String_Node_Str"");
  tablesToCheck.add(hostPodRef);
  List<String> privateIP=new ArrayList<String>();
  privateIP.add(0,""String_Node_Str"");
  privateIP.add(1,""String_Node_Str"");
  privateIP.add(2,""String_Node_Str"");
  tablesToCheck.add(privateIP);
  List<String> publicIP=new ArrayList<String>();
  publicIP.add(0,""String_Node_Str"");
  publicIP.add(1,""String_Node_Str"");
  publicIP.add(2,""String_Node_Str"");
  tablesToCheck.add(publicIP);
  List<String> vmInstance=new ArrayList<String>();
  vmInstance.add(0,""String_Node_Str"");
  vmInstance.add(1,""String_Node_Str"");
  vmInstance.add(2,""String_Node_Str"");
  tablesToCheck.add(vmInstance);
  List<String> volumes=new ArrayList<String>();
  volumes.add(0,""String_Node_Str"");
  volumes.add(1,""String_Node_Str"");
  volumes.add(2,""String_Node_Str"");
  tablesToCheck.add(volumes);
  List<String> vnet=new ArrayList<String>();
  vnet.add(0,""String_Node_Str"");
  vnet.add(1,""String_Node_Str"");
  vnet.add(2,""String_Node_Str"");
  tablesToCheck.add(vnet);
  for (  List<String> table : tablesToCheck) {
    String tableName=table.get(0);
    String column=table.get(1);
    String errorMsg=table.get(2);
    String dbName=""String_Node_Str"";
    String selectSql=""String_Node_Str"" + dbName + ""String_Node_Str""+ tableName+ ""String_Node_Str""+ column+ ""String_Node_Str"";
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    Transaction txn=Transaction.currentTxn();
    try {
      PreparedStatement stmt=txn.prepareAutoCloseStatement(selectSql);
      stmt.setLong(1,zoneId);
      ResultSet rs=stmt.executeQuery();
      if (rs != null && rs.next()) {
        throw new CloudRuntimeException(""String_Node_Str"" + errorMsg);
      }
    }
 catch (    SQLException ex) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
}","@DB protected void checkIfZoneIsDeletable(long zoneId){
  List<List<String>> tablesToCheck=new ArrayList<List<String>>();
  List<String> alert=new ArrayList<String>();
  alert.add(0,""String_Node_Str"");
  alert.add(1,""String_Node_Str"");
  alert.add(2,""String_Node_Str"");
  tablesToCheck.add(alert);
  List<String> host=new ArrayList<String>();
  host.add(0,""String_Node_Str"");
  host.add(1,""String_Node_Str"");
  host.add(2,""String_Node_Str"");
  tablesToCheck.add(host);
  List<String> hostPodRef=new ArrayList<String>();
  hostPodRef.add(0,""String_Node_Str"");
  hostPodRef.add(1,""String_Node_Str"");
  hostPodRef.add(2,""String_Node_Str"");
  tablesToCheck.add(hostPodRef);
  List<String> privateIP=new ArrayList<String>();
  privateIP.add(0,""String_Node_Str"");
  privateIP.add(1,""String_Node_Str"");
  privateIP.add(2,""String_Node_Str"");
  tablesToCheck.add(privateIP);
  List<String> publicIP=new ArrayList<String>();
  publicIP.add(0,""String_Node_Str"");
  publicIP.add(1,""String_Node_Str"");
  publicIP.add(2,""String_Node_Str"");
  tablesToCheck.add(publicIP);
  List<String> vmInstance=new ArrayList<String>();
  vmInstance.add(0,""String_Node_Str"");
  vmInstance.add(1,""String_Node_Str"");
  vmInstance.add(2,""String_Node_Str"");
  tablesToCheck.add(vmInstance);
  List<String> volumes=new ArrayList<String>();
  volumes.add(0,""String_Node_Str"");
  volumes.add(1,""String_Node_Str"");
  volumes.add(2,""String_Node_Str"");
  tablesToCheck.add(volumes);
  List<String> vnet=new ArrayList<String>();
  vnet.add(0,""String_Node_Str"");
  vnet.add(1,""String_Node_Str"");
  vnet.add(2,""String_Node_Str"");
  tablesToCheck.add(vnet);
  for (  List<String> table : tablesToCheck) {
    String tableName=table.get(0);
    String column=table.get(1);
    String errorMsg=table.get(2);
    String dbName=""String_Node_Str"";
    String selectSql=""String_Node_Str"" + dbName + ""String_Node_Str""+ tableName+ ""String_Node_Str""+ column+ ""String_Node_Str"";
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    if (tableName.equals(""String_Node_Str"")) {
      selectSql+=""String_Node_Str"";
    }
    Transaction txn=Transaction.currentTxn();
    try {
      PreparedStatement stmt=txn.prepareAutoCloseStatement(selectSql);
      stmt.setLong(1,zoneId);
      ResultSet rs=stmt.executeQuery();
      if (rs != null && rs.next()) {
        throw new CloudRuntimeException(""String_Node_Str"" + errorMsg);
      }
    }
 catch (    SQLException ex) {
      throw new CloudRuntimeException(""String_Node_Str"");
    }
  }
}"
89896,"@Override public boolean applyLBRules(Network network,List<? extends FirewallRule> rules){
}","@Override public boolean applyLBRules(Network network,List<? extends FirewallRule> rules){
  DomainRouterVO router=_routerDao.findByNetworkConfiguration(network.getId());
  if (router == null) {
    s_logger.warn(""String_Node_Str"" + network.getId());
    throw new ResourceUnavailableException(""String_Node_Str"");
  }
  String routerControlIpAddress=router.getPrivateIpAddress();
  if (router.getState() == State.Running || router.getState() == State.Starting) {
    Commands cmds=new Commands(OnError.Continue);
    LoadBalancerTO[] lbs=new LoadBalancerTO[rules.size()];
    int i=0;
    for (    FirewallRule fwRule : rules) {
      LoadBalancingRule rule=(LoadBalancingRule)fwRule;
      boolean revoked=(rule.getState().equals(FirewallRule.State.Revoke));
      String protocol=rule.getProtocol();
      String algorithm=rule.getAlgorithm();
      String srcIp=rule.getSourceIpAddress().addr();
      int srcPort=rule.getSourcePortStart();
      List<LbDestination> destinations=rule.getDestinations();
      LoadBalancerTO lb=new LoadBalancerTO(srcIp,srcPort,protocol,algorithm,revoked,false,destinations);
      lbs[i++]=lb;
    }
    LoadBalancerConfigCommand cmd=new LoadBalancerConfigCommand(lbs);
    cmd.setAccessDetail(RoutingCommand.ROUTER_IP,router.getPrivateIpAddress());
    cmd.setAccessDetail(RoutingCommand.ROUTER_NAME,router.getInstanceName());
    cmds.addCommand(cmd);
    return sendCommandsToRouter(router,cmds);
  }
 else   if (router.getState() == State.Stopped || router.getState() == State.Stopping) {
    s_logger.debug(""String_Node_Str"" + router.getState() + ""String_Node_Str"");
    return true;
  }
 else {
    s_logger.warn(""String_Node_Str"" + router.getState());
    throw new ResourceUnavailableException(""String_Node_Str"" + router.getState());
  }
}"
89897,"public <T>URI toUri(T value){
  try {
    return new URI(scheme + ""String_Node_Str"" + value.toString());
  }
 catch (  URISyntaxException e) {
    throw new CloudRuntimeException(""String_Node_Str"" + value);
  }
}","public <T>URI toUri(T value){
}"
89898,"protected void getIp(NicProfile nic,DataCenter dc,VirtualMachineProfile<? extends VirtualMachine> vm,Network network) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  if (nic.getIp4Address() == null) {
    PublicIp ip=_networkMgr.assignPublicIpAddress(dc.getId(),vm.getOwner(),VlanType.VirtualNetwork,null);
    nic.setIp4Address(ip.getAddress());
    nic.setGateway(ip.getGateway());
    nic.setNetmask(ip.getNetmask());
    nic.setIsolationUri(IsolationType.Vlan.toUri(ip.getVlanTag()));
    nic.setBroadcastType(BroadcastDomainType.Vlan);
    nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(ip.getVlanTag()));
    nic.setFormat(AddressFormat.Ip4);
    nic.setReservationId(String.valueOf(ip.getVlanTag()));
    nic.setMacAddress(ip.getMacAddress());
  }
  nic.setDns1(dc.getDns1());
  nic.setDns2(dc.getDns2());
}","protected void getIp(NicProfile nic,DataCenter dc,VirtualMachineProfile<? extends VirtualMachine> vm,Network network) throws InsufficientVirtualNetworkCapcityException, InsufficientAddressCapacityException, ConcurrentOperationException {
  if (nic.getIp4Address() == null) {
    PublicIp ip=_networkMgr.assignPublicIpAddress(dc.getId(),vm.getOwner(),dc.getNetworkType().equals(NetworkType.Basic) ? VlanType.DirectAttached : VlanType.VirtualNetwork,null);
    nic.setIp4Address(ip.getAddress());
    nic.setGateway(ip.getGateway());
    nic.setNetmask(ip.getNetmask());
    nic.setIsolationUri(IsolationType.Vlan.toUri(ip.getVlanTag()));
    nic.setBroadcastType(BroadcastDomainType.Vlan);
    nic.setBroadcastUri(BroadcastDomainType.Vlan.toUri(ip.getVlanTag()));
    nic.setFormat(AddressFormat.Ip4);
    nic.setReservationId(String.valueOf(ip.getVlanTag()));
    nic.setMacAddress(ip.getMacAddress());
  }
  nic.setDns1(dc.getDns1());
  nic.setDns2(dc.getDns2());
}"
89899,"private String validateConfigurationValue(String name,String value) throws InvalidParameterValueException {
  if (value == null) {
    return null;
  }
  Config c=Config.getConfig(name);
  value=value.trim();
  if (c == null) {
    s_logger.error(""String_Node_Str"" + name + ""String_Node_Str"");
    return ""String_Node_Str"";
  }
  Class<?> type=c.getType();
  if (type.equals(Boolean.class)) {
    if (!(value.equals(""String_Node_Str"") || value.equals(""String_Node_Str""))) {
      s_logger.error(""String_Node_Str"" + name + ""String_Node_Str""+ value);
      return ""String_Node_Str"";
    }
    return null;
  }
  String range=c.getRange();
  if (range == null) {
    return null;
  }
  if (type.equals(String.class)) {
    if (range.equals(""String_Node_Str"")) {
      try {
        if (!NetUtils.isSiteLocalAddress(value)) {
          s_logger.error(""String_Node_Str"" + value + ""String_Node_Str""+ name);
          return ""String_Node_Str"";
        }
      }
 catch (      NullPointerException e) {
        s_logger.error(""String_Node_Str"" + name);
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (range.equals(""String_Node_Str"")) {
      if (!NetUtils.isValidNetmask(value)) {
        s_logger.error(""String_Node_Str"" + value + ""String_Node_Str""+ name);
        return ""String_Node_Str"";
      }
    }
 else     if (range.equals(""String_Node_Str"")) {
      String[] hypervisors=value.split(""String_Node_Str"");
      if (hypervisors == null) {
        return ""String_Node_Str"";
      }
      for (      String hypervisor : hypervisors) {
        if (HypervisorType.getType(hypervisor) == HypervisorType.Any || HypervisorType.getType(hypervisor) == HypervisorType.None) {
          return ""String_Node_Str"";
        }
      }
    }
 else {
      String[] options=range.split(""String_Node_Str"");
      for (      String option : options) {
        if (option.trim().equals(value)) {
          return null;
        }
      }
      s_logger.error(""String_Node_Str"" + name + ""String_Node_Str"");
      return ""String_Node_Str"" + range;
    }
  }
 else   if (type.equals(Integer.class)) {
    String[] options=range.split(""String_Node_Str"");
    if (options.length != 2) {
      String msg=""String_Node_Str"" + range + ""String_Node_Str""+ name+ ""String_Node_Str"";
      s_logger.error(msg);
      return msg;
    }
    int min=Integer.parseInt(options[0]);
    int max=Integer.parseInt(options[1]);
    int val=Integer.parseInt(value);
    if (val < min || val > max) {
      s_logger.error(""String_Node_Str"" + name + ""String_Node_Str"");
      return ""String_Node_Str"" + range;
    }
  }
  return null;
}","private String validateConfigurationValue(String name,String value) throws InvalidParameterValueException {
  if (value == null) {
    return null;
  }
  Config c=Config.getConfig(name);
  value=value.trim();
  if (c == null) {
    s_logger.error(""String_Node_Str"" + name + ""String_Node_Str"");
    return ""String_Node_Str"";
  }
  Class<?> type=c.getType();
  if (type.equals(Boolean.class)) {
    if (!(value.equals(""String_Node_Str"") || value.equals(""String_Node_Str""))) {
      s_logger.error(""String_Node_Str"" + name + ""String_Node_Str""+ value);
      return ""String_Node_Str"";
    }
    return null;
  }
  if (type.equals(Integer.class) && configValuesForValidation.contains(name)) {
    try {
      int val=Integer.parseInt(value);
      if (val <= 0) {
        throw new InvalidParameterValueException(""String_Node_Str"" + name);
      }
    }
 catch (    NumberFormatException e) {
      s_logger.error(""String_Node_Str"" + name);
      throw new InvalidParameterValueException(""String_Node_Str"" + name);
    }
  }
  String range=c.getRange();
  if (range == null) {
    return null;
  }
  if (type.equals(String.class)) {
    if (range.equals(""String_Node_Str"")) {
      try {
        if (!NetUtils.isSiteLocalAddress(value)) {
          s_logger.error(""String_Node_Str"" + value + ""String_Node_Str""+ name);
          return ""String_Node_Str"";
        }
      }
 catch (      NullPointerException e) {
        s_logger.error(""String_Node_Str"" + name);
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
 else     if (range.equals(""String_Node_Str"")) {
      if (!NetUtils.isValidNetmask(value)) {
        s_logger.error(""String_Node_Str"" + value + ""String_Node_Str""+ name);
        return ""String_Node_Str"";
      }
    }
 else     if (range.equals(""String_Node_Str"")) {
      String[] hypervisors=value.split(""String_Node_Str"");
      if (hypervisors == null) {
        return ""String_Node_Str"";
      }
      for (      String hypervisor : hypervisors) {
        if (HypervisorType.getType(hypervisor) == HypervisorType.Any || HypervisorType.getType(hypervisor) == HypervisorType.None) {
          return ""String_Node_Str"";
        }
      }
    }
 else {
      String[] options=range.split(""String_Node_Str"");
      for (      String option : options) {
        if (option.trim().equals(value)) {
          return null;
        }
      }
      s_logger.error(""String_Node_Str"" + name + ""String_Node_Str"");
      return ""String_Node_Str"" + range;
    }
  }
 else   if (type.equals(Integer.class)) {
    String[] options=range.split(""String_Node_Str"");
    if (options.length != 2) {
      String msg=""String_Node_Str"" + range + ""String_Node_Str""+ name+ ""String_Node_Str"";
      s_logger.error(msg);
      return msg;
    }
    int min=Integer.parseInt(options[0]);
    int max=Integer.parseInt(options[1]);
    int val=Integer.parseInt(value);
    if (val < min || val > max) {
      s_logger.error(""String_Node_Str"" + name + ""String_Node_Str"");
      return ""String_Node_Str"" + range;
    }
  }
  return null;
}"
89900,"@Override public boolean configure(final String name,final Map<String,Object> params) throws ConfigurationException {
  _name=name;
  String maxVolumeSizeInGbString=_configDao.getValue(""String_Node_Str"");
  _maxVolumeSizeInGb=NumbersUtil.parseInt(maxVolumeSizeInGbString,2000);
  return true;
}","@Override public boolean configure(final String name,final Map<String,Object> params) throws ConfigurationException {
  _name=name;
  String maxVolumeSizeInGbString=_configDao.getValue(""String_Node_Str"");
  _maxVolumeSizeInGb=NumbersUtil.parseInt(maxVolumeSizeInGbString,2000);
  populateConfigValuesForValidationSet();
  return true;
}"
89901,"@Override public AccountVO updateAccount(UpdateAccountCmd cmd) throws InvalidParameterValueException, PermissionDeniedException {
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String newAccountName=cmd.getNewName();
  boolean success=false;
  Account account=_accountDao.findAccount(accountName,domainId);
  if (account == null) {
    s_logger.error(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
  if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account adminAccount=UserContext.current().getAccount();
  if ((adminAccount != null) && (adminAccount.getType() != Account.ACCOUNT_TYPE_ADMIN) && _domainDao.isChildDomain(adminAccount.getDomainId(),account.getDomainId())) {
    throw new PermissionDeniedException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId+ ""String_Node_Str"");
  }
  Account duplicateAcccount=_accountDao.findAccount(newAccountName,domainId);
  if (duplicateAcccount != null && duplicateAcccount.getId() != account.getId()) {
    throw new PermissionDeniedException(""String_Node_Str"" + newAccountName + ""String_Node_Str""+ domainId+ ""String_Node_Str""+ duplicateAcccount.getId());
  }
  if (account.getAccountName().equals(newAccountName)) {
    success=true;
  }
 else {
    AccountVO acctForUpdate=_accountDao.createForUpdate();
    acctForUpdate.setAccountName(newAccountName);
    success=_accountDao.update(Long.valueOf(account.getId()),acctForUpdate);
  }
  if (success) {
    return _accountDao.findById(account.getId());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
}","@Override public AccountVO updateAccount(UpdateAccountCmd cmd) throws InvalidParameterValueException, PermissionDeniedException {
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  String newAccountName=cmd.getNewName();
  boolean success=false;
  Account account=_accountDao.findAccount(accountName,domainId);
  if (account == null) {
    s_logger.error(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
    throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
  if (account.getId() == Account.ACCOUNT_ID_SYSTEM) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Account adminAccount=UserContext.current().getAccount();
  if ((adminAccount != null) && (adminAccount.getType() != Account.ACCOUNT_TYPE_ADMIN) && _domainDao.isChildDomain(adminAccount.getDomainId(),account.getDomainId())) {
    throw new PermissionDeniedException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId+ ""String_Node_Str"");
  }
  Account duplicateAcccount=_accountDao.findAccount(newAccountName,domainId);
  if (duplicateAcccount != null && duplicateAcccount.getRemoved() == null && duplicateAcccount.getId() != account.getId()) {
    throw new PermissionDeniedException(""String_Node_Str"" + newAccountName + ""String_Node_Str""+ domainId+ ""String_Node_Str""+ duplicateAcccount.getId());
  }
  if (account.getAccountName().equals(newAccountName)) {
    success=true;
  }
 else {
    AccountVO acctForUpdate=_accountDao.createForUpdate();
    acctForUpdate.setAccountName(newAccountName);
    success=_accountDao.update(Long.valueOf(account.getId()),acctForUpdate);
  }
  if (success) {
    return _accountDao.findById(account.getId());
  }
 else {
    throw new CloudRuntimeException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
  }
}"
89902,"private Discoverer getMatchingDiscover(String hypervisorType){
  Enumeration<Discoverer> en=_discoverers.enumeration();
  while (en.hasMoreElements()) {
    Discoverer discoverer=en.nextElement();
    if (discoverer.matchHypervisor(hypervisorType))     return discoverer;
  }
  return null;
}","private Discoverer getMatchingDiscover(Hypervisor.HypervisorType hypervisorType){
  Enumeration<Discoverer> en=_discoverers.enumeration();
  while (en.hasMoreElements()) {
    Discoverer discoverer=en.nextElement();
    if (discoverer.getHypervisorType() == hypervisorType)     return discoverer;
  }
  return null;
}"
89903,"@Override public List<? extends Host> discoverExternalCluster(AddExternalClusterCmd cmd) throws IllegalArgumentException, DiscoveryException, InvalidParameterValueException {
  Long dcId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  String clusterName=cmd.getClusterName();
  String url=cmd.getUrl();
  String username=cmd.getUsername();
  String password=cmd.getPassword();
  URI uri=null;
  if (_dcDao.findById(dcId) == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + dcId);
  }
  if (podId != null) {
    if (_podDao.findById(podId) == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + podId);
    }
    HostPodVO pod=_podDao.findById(podId);
    if (!Long.valueOf(pod.getDataCenterId()).equals(dcId)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + podId + ""String_Node_Str""+ dcId);
    }
  }
  if (clusterName == null || clusterName.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cmd.getHypervisor() == null || cmd.getHypervisor().isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Hypervisor.HypervisorType hypervisorType=Hypervisor.HypervisorType.valueOf(cmd.getHypervisor());
  if (hypervisorType == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Discoverer discoverer=getMatchingDiscover(cmd.getHypervisor());
  if (discoverer == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long clusterId=0;
  if (clusterName != null) {
    ClusterVO cluster=new ClusterVO(dcId,podId,clusterName);
    cluster.setHypervisorType(cmd.getHypervisor());
    cluster.setClusterType(Cluster.ClusterType.ExternalManaged);
    try {
      cluster=_clusterDao.persist(cluster);
    }
 catch (    Exception e) {
      cluster=_clusterDao.findBy(clusterName,podId);
      if (cluster == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + clusterName + ""String_Node_Str""+ podId+ ""String_Node_Str""+ dcId,e);
      }
    }
    clusterId=cluster.getId();
  }
  try {
    uri=new URI(UriUtils.encodeURIComponent(url));
    if (uri.getScheme() == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + url + ""String_Node_Str"");
    }
 else     if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
      if (uri.getHost() == null || uri.getHost().equalsIgnoreCase(""String_Node_Str"") || uri.getPath() == null || uri.getPath().equalsIgnoreCase(""String_Node_Str"")) {
        throw new InvalidParameterValueException(""String_Node_Str"");
      }
    }
  }
 catch (  URISyntaxException e) {
    throw new InvalidParameterValueException(url + ""String_Node_Str"");
  }
  List<HostVO> hosts=new ArrayList<HostVO>();
  Map<? extends ServerResource,Map<String,String>> resources=null;
  try {
    resources=discoverer.find(dcId,podId,clusterId,uri,username,password);
  }
 catch (  Exception e) {
    s_logger.info(""String_Node_Str"" + discoverer.getName());
  }
  if (resources != null) {
    for (    Map.Entry<? extends ServerResource,Map<String,String>> entry : resources.entrySet()) {
      ServerResource resource=entry.getKey();
      AgentAttache attache=simulateStart(resource,entry.getValue(),true);
      if (attache != null) {
        hosts.add(_hostDao.findById(attache.getId()));
      }
      discoverer.postDiscovery(hosts,_nodeId);
    }
    s_logger.info(""String_Node_Str"" + discoverer.getName());
    return hosts;
  }
  s_logger.warn(""String_Node_Str"" + url);
  throw new DiscoveryException(""String_Node_Str"");
}","@Override public List<? extends Host> discoverExternalCluster(AddExternalClusterCmd cmd) throws IllegalArgumentException, DiscoveryException, InvalidParameterValueException {
  Long dcId=cmd.getZoneId();
  Long podId=cmd.getPodId();
  String clusterName=cmd.getClusterName();
  String url=cmd.getUrl();
  String username=cmd.getUsername();
  String password=cmd.getPassword();
  URI uri=null;
  if (_dcDao.findById(dcId) == null) {
    throw new InvalidParameterValueException(""String_Node_Str"" + dcId);
  }
  if (podId != null) {
    if (_podDao.findById(podId) == null) {
      throw new InvalidParameterValueException(""String_Node_Str"" + podId);
    }
    HostPodVO pod=_podDao.findById(podId);
    if (!Long.valueOf(pod.getDataCenterId()).equals(dcId)) {
      throw new InvalidParameterValueException(""String_Node_Str"" + podId + ""String_Node_Str""+ dcId);
    }
  }
  if (clusterName == null || clusterName.isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if (cmd.getHypervisor() == null || cmd.getHypervisor().isEmpty()) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Hypervisor.HypervisorType hypervisorType=Hypervisor.HypervisorType.valueOf(cmd.getHypervisor());
  if (hypervisorType == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  Discoverer discoverer=getMatchingDiscover(hypervisorType);
  if (discoverer == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  long clusterId=0;
  if (clusterName != null) {
    ClusterVO cluster=new ClusterVO(dcId,podId,clusterName);
    cluster.setHypervisorType(cmd.getHypervisor());
    cluster.setClusterType(Cluster.ClusterType.ExternalManaged);
    try {
      cluster=_clusterDao.persist(cluster);
    }
 catch (    Exception e) {
      cluster=_clusterDao.findBy(clusterName,podId);
      if (cluster == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + clusterName + ""String_Node_Str""+ podId+ ""String_Node_Str""+ dcId,e);
      }
    }
    clusterId=cluster.getId();
  }
  boolean success=false;
  try {
    try {
      uri=new URI(UriUtils.encodeURIComponent(url));
      if (uri.getScheme() == null) {
        throw new InvalidParameterValueException(""String_Node_Str"" + url + ""String_Node_Str"");
      }
 else       if (uri.getScheme().equalsIgnoreCase(""String_Node_Str"")) {
        if (uri.getHost() == null || uri.getHost().equalsIgnoreCase(""String_Node_Str"") || uri.getPath() == null || uri.getPath().equalsIgnoreCase(""String_Node_Str"")) {
          throw new InvalidParameterValueException(""String_Node_Str"");
        }
      }
    }
 catch (    URISyntaxException e) {
      throw new InvalidParameterValueException(url + ""String_Node_Str"");
    }
    List<HostVO> hosts=new ArrayList<HostVO>();
    Map<? extends ServerResource,Map<String,String>> resources=null;
    try {
      resources=discoverer.find(dcId,podId,clusterId,uri,username,password);
    }
 catch (    Exception e) {
      s_logger.info(""String_Node_Str"" + discoverer.getName());
    }
    if (resources != null) {
      for (      Map.Entry<? extends ServerResource,Map<String,String>> entry : resources.entrySet()) {
        ServerResource resource=entry.getKey();
        AgentAttache attache=simulateStart(resource,entry.getValue(),true);
        if (attache != null) {
          hosts.add(_hostDao.findById(attache.getId()));
        }
        discoverer.postDiscovery(hosts,_nodeId);
      }
      s_logger.info(""String_Node_Str"" + discoverer.getName());
      success=true;
      return hosts;
    }
    s_logger.warn(""String_Node_Str"" + url);
    throw new DiscoveryException(""String_Node_Str"");
  }
  finally {
    if (!success) {
      _clusterDao.remove(clusterId);
    }
  }
}"
89904,"@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd) throws InvalidParameterValueException, PermissionDeniedException {
  Account account=UserContext.current().getAccount();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Long accountId=null;
  boolean isAdmin=false;
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zone=null;
  Object pod=null;
  if (isAdmin) {
    zone=cmd.getZoneId();
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDestroyed(),SearchCriteria.Op.EQ);
  if ((accountId == null) && (domainId != null)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setParameters(""String_Node_Str"",false);
  List<VolumeVO> allVolumes=_volumeDao.search(sc,searchFilter);
  List<VolumeVO> returnableVolumes=new ArrayList<VolumeVO>();
  for (  VolumeVO v : allVolumes) {
    VMTemplateVO template=_templateDao.findById(v.getTemplateId());
    if (template != null && (template.getTemplateType() == TemplateType.SYSTEM)) {
    }
 else {
      returnableVolumes.add(v);
    }
  }
  return returnableVolumes;
}","@Override public List<VolumeVO> searchForVolumes(ListVolumesCmd cmd) throws InvalidParameterValueException, PermissionDeniedException {
  Account account=UserContext.current().getAccount();
  Long domainId=cmd.getDomainId();
  String accountName=cmd.getAccountName();
  Long accountId=null;
  boolean isAdmin=false;
  if ((account == null) || isAdmin(account.getType())) {
    isAdmin=true;
    if (domainId != null) {
      if ((account != null) && !_domainDao.isChildDomain(account.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        Account userAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (userAccount != null) {
          accountId=userAccount.getId();
        }
 else {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
      }
    }
 else {
      domainId=((account == null) ? DomainVO.ROOT_DOMAIN : account.getDomainId());
    }
  }
 else {
    accountId=account.getId();
  }
  Filter searchFilter=new Filter(VolumeVO.class,""String_Node_Str"",false,cmd.getStartIndex(),cmd.getPageSizeVal());
  Object id=cmd.getId();
  Long vmInstanceId=cmd.getVirtualMachineId();
  Object name=cmd.getVolumeName();
  Object keyword=cmd.getKeyword();
  Object type=cmd.getType();
  Object zone=null;
  Object pod=null;
  if (isAdmin) {
    zone=cmd.getZoneId();
    pod=cmd.getPodId();
  }
 else {
    domainId=null;
  }
  SearchBuilder<VolumeVO> sb=_volumeDao.createSearchBuilder();
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getAccountId(),SearchCriteria.Op.IN);
  sb.and(""String_Node_Str"",sb.entity().getVolumeType(),SearchCriteria.Op.LIKE);
  sb.and(""String_Node_Str"",sb.entity().getInstanceId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDataCenterId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getPodId(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getName(),SearchCriteria.Op.NLIKE);
  sb.and(""String_Node_Str"",sb.entity().getStatus(),SearchCriteria.Op.EQ);
  sb.and(""String_Node_Str"",sb.entity().getDestroyed(),SearchCriteria.Op.EQ);
  if ((accountId == null) && (domainId != null)) {
    SearchBuilder<DomainVO> domainSearch=_domainDao.createSearchBuilder();
    domainSearch.and(""String_Node_Str"",domainSearch.entity().getPath(),SearchCriteria.Op.LIKE);
    sb.join(""String_Node_Str"",domainSearch,sb.entity().getDomainId(),domainSearch.entity().getId(),JoinBuilder.JoinType.INNER);
  }
  SearchCriteria<VolumeVO> sc=sb.create();
  if (keyword != null) {
    SearchCriteria<VolumeVO> ssc=_volumeDao.createSearchCriteria();
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    ssc.addOr(""String_Node_Str"",SearchCriteria.Op.LIKE,""String_Node_Str"" + keyword + ""String_Node_Str"");
    sc.addAnd(""String_Node_Str"",SearchCriteria.Op.SC,ssc);
  }
  if (name != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + name + ""String_Node_Str"");
  }
  if (id != null) {
    sc.setParameters(""String_Node_Str"",id);
  }
  if (accountId != null) {
    sc.setParameters(""String_Node_Str"",accountId);
  }
 else   if (domainId != null) {
    DomainVO domain=_domainDao.findById(domainId);
    sc.setJoinParameters(""String_Node_Str"",""String_Node_Str"",domain.getPath() + ""String_Node_Str"");
  }
  if (type != null) {
    sc.setParameters(""String_Node_Str"",""String_Node_Str"" + type + ""String_Node_Str"");
  }
  if (vmInstanceId != null) {
    sc.setParameters(""String_Node_Str"",vmInstanceId);
  }
  if (zone != null) {
    sc.setParameters(""String_Node_Str"",zone);
  }
  if (pod != null) {
    sc.setParameters(""String_Node_Str"",pod);
  }
  sc.setParameters(""String_Node_Str"",false);
  List<VolumeVO> allVolumes=_volumeDao.search(sc,searchFilter);
  List<VolumeVO> returnableVolumes=new ArrayList<VolumeVO>();
  for (  VolumeVO v : allVolumes) {
    VMTemplateVO template=_templateDao.findById(v.getTemplateId());
    if (template != null && (template.getTemplateType() == TemplateType.SYSTEM)) {
    }
 else {
      returnableVolumes.add(v);
    }
  }
  return returnableVolumes;
}"
89905,"@Override public StoragePool allocateToPool(DiskProfile dskCh,DataCenterVO dc,HostPodVO pod,Long clusterId,VMInstanceVO vm,VMTemplateVO template,Set<? extends StoragePool> avoid){
  if (!allocatorIsCorrectType(dskCh,vm)) {
    return null;
  }
  List<StoragePoolVO> pools=_storagePoolDao.findPoolsByTags(dc.getId(),pod.getId(),clusterId,dskCh.getTags(),null);
  if (pools.size() == 0) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pod.getId());
    }
    return null;
  }
  StatsCollector sc=StatsCollector.getInstance();
  Collections.shuffle(pools);
  for (  StoragePoolVO pool : pools) {
    if (checkPool(avoid,pool,dskCh,template,null,vm,sc)) {
      return pool;
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
  }
  if (_dontMatter && pools.size() > 0) {
    return pools.get(0);
  }
 else {
    return null;
  }
}","@Override public StoragePool allocateToPool(DiskProfile dskCh,DataCenterVO dc,HostPodVO pod,Long clusterId,VMInstanceVO vm,VMTemplateVO template,Set<? extends StoragePool> avoid){
  if (!allocatorIsCorrectType(dskCh,vm)) {
    return null;
  }
  List<StoragePoolVO> pools=_storagePoolDao.findPoolsByTags(dc.getId(),pod.getId(),clusterId,dskCh.getTags(),null);
  if (pools.size() == 0) {
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + pod.getId());
    }
    return null;
  }
  StatsCollector sc=StatsCollector.getInstance();
  Collections.shuffle(pools);
  for (  StoragePoolVO pool : pools) {
    if (checkPool(avoid,pool,dskCh,template,null,vm,sc)) {
      return pool;
    }
 else {
      pools.remove(pool);
    }
  }
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"");
  }
  if (_dontMatter && pools.size() > 0) {
    return pools.get(0);
  }
 else {
    return null;
  }
}"
89906,"private void initialize(UserVm vm,ServiceOffering offering,int networkRate,int multicastRate,VirtualRouter router,String imagePath,String guestNetworkId,int utilization,int cpuWeight,int bits,String isoPath,boolean bootFromISO,String guestOSDescription){
  id=vm.getId();
  guestIpAddress=vm.getGuestIpAddress();
  if (router != null)   gateway=router.getPrivateIpAddress();
  ramSize=offering.getRamSize();
  cpu=offering.getCpu();
  this.utilization=utilization;
  this.cpuWeight=cpuWeight;
  this.imagePath=imagePath;
  this.guestNetworkId=guestNetworkId;
  guestMacAddress=vm.getGuestMacAddress();
  vncPassword=vm.getVncPassword();
  hostName=vm.getHostName();
  networkRateMbps=networkRate;
  networkRateMulticastMbps=multicastRate;
  if (bits == 32) {
    arch=""String_Node_Str"";
  }
 else {
    arch=""String_Node_Str"";
  }
  this.isoPath=isoPath;
  this.bootFromISO=bootFromISO;
  this.guestOSDescription=guestOSDescription;
}","private void initialize(UserVm vm,ServiceOffering offering,int networkRate,int multicastRate,VirtualRouter router,String imagePath,String guestNetworkId,int utilization,int cpuWeight,int bits,String isoPath,boolean bootFromISO,String guestOSDescription){
  id=vm.getId();
  guestIpAddress=vm.getGuestIpAddress();
  if (router != null)   gateway=router.getPrivateIpAddress();
  ramSize=offering.getRamSize();
  cpu=offering.getCpu();
  this.utilization=utilization;
  this.cpuWeight=cpuWeight;
  this.imagePath=imagePath;
  this.guestNetworkId=guestNetworkId;
  guestMacAddress=vm.getGuestMacAddress();
  vncPassword=vm.getVncPassword();
  hostName=vm.getName();
  networkRateMbps=networkRate;
  networkRateMulticastMbps=multicastRate;
  if (bits == 32) {
    arch=""String_Node_Str"";
  }
 else {
    arch=""String_Node_Str"";
  }
  this.isoPath=isoPath;
  this.bootFromISO=bootFromISO;
  this.guestOSDescription=guestOSDescription;
}"
89907,"public String getBootArgs(){
  String eth1Ip=(proxy.getPrivateIpAddress() == null) ? ""String_Node_Str"" : proxy.getPrivateIpAddress();
  String eth1NetMask=(proxy.getPrivateNetmask() == null) ? ""String_Node_Str"" : proxy.getPrivateNetmask();
  String eth2Ip=(proxy.getPublicIpAddress() == null) ? ""String_Node_Str"" : proxy.getPublicIpAddress();
  String eth2NetMask=(proxy.getPublicNetmask() == null) ? ""String_Node_Str"" : proxy.getPublicNetmask();
  String gateWay=(proxy.getGateway() == null) ? ""String_Node_Str"" : proxy.getGateway();
  String basic=""String_Node_Str"" + proxy.getGuestIpAddress() + ""String_Node_Str""+ proxy.getGuestNetmask()+ ""String_Node_Str""+ eth1Ip+ ""String_Node_Str""+ eth1NetMask+ ""String_Node_Str""+ eth2Ip+ ""String_Node_Str""+ eth2NetMask+ ""String_Node_Str""+ gateWay+ ""String_Node_Str""+ proxy.getDns1()+ ""String_Node_Str""+ ""String_Node_Str""+ proxy.getHostName()+ ""String_Node_Str"";
  if (proxy.getDns2() != null) {
    basic=basic + ""String_Node_Str"" + proxy.getDns2();
  }
  basic=basic + ""String_Node_Str"" + mgmt_host+ ""String_Node_Str""+ mgmt_port;
  if (sslEnabled)   basic=basic + ""String_Node_Str"";
  if (proxy.getPrivateIpAddress() == null || proxy.getPublicIpAddress() == null) {
    basic=basic + ""String_Node_Str"";
  }
  return basic;
}","public String getBootArgs(){
  String eth1Ip=(proxy.getPrivateIpAddress() == null) ? ""String_Node_Str"" : proxy.getPrivateIpAddress();
  String eth1NetMask=(proxy.getPrivateNetmask() == null) ? ""String_Node_Str"" : proxy.getPrivateNetmask();
  String eth2Ip=(proxy.getPublicIpAddress() == null) ? ""String_Node_Str"" : proxy.getPublicIpAddress();
  String eth2NetMask=(proxy.getPublicNetmask() == null) ? ""String_Node_Str"" : proxy.getPublicNetmask();
  String gateWay=(proxy.getGateway() == null) ? ""String_Node_Str"" : proxy.getGateway();
  String basic=""String_Node_Str"" + proxy.getGuestIpAddress() + ""String_Node_Str""+ proxy.getGuestNetmask()+ ""String_Node_Str""+ eth1Ip+ ""String_Node_Str""+ eth1NetMask+ ""String_Node_Str""+ eth2Ip+ ""String_Node_Str""+ eth2NetMask+ ""String_Node_Str""+ gateWay+ ""String_Node_Str""+ proxy.getDns1()+ ""String_Node_Str""+ ""String_Node_Str""+ proxy.getName()+ ""String_Node_Str"";
  if (proxy.getDns2() != null) {
    basic=basic + ""String_Node_Str"" + proxy.getDns2();
  }
  basic=basic + ""String_Node_Str"" + mgmt_host+ ""String_Node_Str""+ mgmt_port;
  if (sslEnabled)   basic=basic + ""String_Node_Str"";
  if (proxy.getPrivateIpAddress() == null || proxy.getPublicIpAddress() == null) {
    basic=basic + ""String_Node_Str"";
  }
  return basic;
}"
89908,"public String getBootArgs(){
  String eth2Ip=router.getPublicIpAddress() == null ? ""String_Node_Str"" : router.getPublicIpAddress();
  String basic=""String_Node_Str"" + router.getGuestIpAddress() + ""String_Node_Str""+ router.getGuestNetmask()+ ""String_Node_Str""+ router.getPrivateIpAddress()+ ""String_Node_Str""+ router.getPrivateNetmask()+ ""String_Node_Str""+ router.getGateway()+ ""String_Node_Str""+ router.getDns1()+ ""String_Node_Str""+ router.getHostName()+ ""String_Node_Str""+ mgmt_host;
  if (!router.getPublicMacAddress().equalsIgnoreCase(""String_Node_Str"")) {
    basic=basic + ""String_Node_Str"" + eth2Ip+ ""String_Node_Str""+ router.getPublicNetmask();
  }
  if (router.getDns2() != null) {
    basic=basic + ""String_Node_Str"" + router.getDns2();
  }
  if (getDhcpRange() != null) {
    basic=basic + ""String_Node_Str"" + getDhcpRange();
  }
  if (router.getRole() == Role.DHCP_FIREWALL_LB_PASSWD_USERDATA) {
    basic=basic + ""String_Node_Str"";
  }
 else   if (router.getRole() == Role.DHCP_USERDATA) {
    basic=basic + ""String_Node_Str"";
  }
  if (router.getDomain() != null) {
    basic+=""String_Node_Str"" + router.getDomain();
  }
  return basic;
}","public String getBootArgs(){
  String eth2Ip=router.getPublicIpAddress() == null ? ""String_Node_Str"" : router.getPublicIpAddress();
  String basic=""String_Node_Str"" + router.getGuestIpAddress() + ""String_Node_Str""+ router.getGuestNetmask()+ ""String_Node_Str""+ router.getPrivateIpAddress()+ ""String_Node_Str""+ router.getPrivateNetmask()+ ""String_Node_Str""+ router.getGateway()+ ""String_Node_Str""+ router.getDns1()+ ""String_Node_Str""+ router.getName()+ ""String_Node_Str""+ mgmt_host;
  if (!router.getPublicMacAddress().equalsIgnoreCase(""String_Node_Str"")) {
    basic=basic + ""String_Node_Str"" + eth2Ip+ ""String_Node_Str""+ router.getPublicNetmask();
  }
  if (router.getDns2() != null) {
    basic=basic + ""String_Node_Str"" + router.getDns2();
  }
  if (getDhcpRange() != null) {
    basic=basic + ""String_Node_Str"" + getDhcpRange();
  }
  if (router.getRole() == Role.DHCP_FIREWALL_LB_PASSWD_USERDATA) {
    basic=basic + ""String_Node_Str"";
  }
 else   if (router.getRole() == Role.DHCP_USERDATA) {
    basic=basic + ""String_Node_Str"";
  }
  if (router.getDomain() != null) {
    basic+=""String_Node_Str"" + router.getDomain();
  }
  return basic;
}"
89909,"public String getBootArgs(){
  String eth1Ip=(secStorageVm.getPrivateIpAddress() == null) ? ""String_Node_Str"" : secStorageVm.getPrivateIpAddress();
  String eth1NetMask=(secStorageVm.getPrivateNetmask() == null) ? ""String_Node_Str"" : secStorageVm.getPrivateNetmask();
  String eth2Ip=(secStorageVm.getPublicIpAddress() == null) ? ""String_Node_Str"" : secStorageVm.getPublicIpAddress();
  String eth2NetMask=(secStorageVm.getPublicNetmask() == null) ? ""String_Node_Str"" : secStorageVm.getPublicNetmask();
  String gateWay=(secStorageVm.getGateway() == null) ? ""String_Node_Str"" : secStorageVm.getGateway();
  String basic=""String_Node_Str"" + secStorageVm.getGuestIpAddress() + ""String_Node_Str""+ secStorageVm.getGuestNetmask()+ ""String_Node_Str""+ eth1Ip+ ""String_Node_Str""+ eth1NetMask+ ""String_Node_Str""+ eth2Ip+ ""String_Node_Str""+ eth2NetMask+ ""String_Node_Str""+ gateWay+ ""String_Node_Str""+ secStorageVm.getDns1()+ ""String_Node_Str""+ ""String_Node_Str""+ secStorageVm.getHostName()+ ""String_Node_Str"";
  if (secStorageVm.getDns2() != null) {
    basic=basic + ""String_Node_Str"" + secStorageVm.getDns2();
  }
  basic=basic + ""String_Node_Str"" + mgmt_host+ ""String_Node_Str""+ mgmt_port;
  String mountStr=null;
  try {
    mountStr=NfsUtils.url2Mount(secStorageVm.getNfsShare());
  }
 catch (  URISyntaxException e1) {
    throw new CloudRuntimeException(""String_Node_Str"" + secStorageVm.getNfsShare());
  }
  basic=basic + ""String_Node_Str"" + mountStr+ ""String_Node_Str""+ secStorageVm.getGuid();
  basic=basic + ""String_Node_Str"";
  basic=basic + ""String_Node_Str"";
  basic=basic + ""String_Node_Str"" + Boolean.toString(sslCopy);
  if (secStorageVm.getPrivateIpAddress() == null || secStorageVm.getPublicIpAddress() == null) {
    basic=basic + ""String_Node_Str"";
  }
  return basic;
}","public String getBootArgs(){
  String eth1Ip=(secStorageVm.getPrivateIpAddress() == null) ? ""String_Node_Str"" : secStorageVm.getPrivateIpAddress();
  String eth1NetMask=(secStorageVm.getPrivateNetmask() == null) ? ""String_Node_Str"" : secStorageVm.getPrivateNetmask();
  String eth2Ip=(secStorageVm.getPublicIpAddress() == null) ? ""String_Node_Str"" : secStorageVm.getPublicIpAddress();
  String eth2NetMask=(secStorageVm.getPublicNetmask() == null) ? ""String_Node_Str"" : secStorageVm.getPublicNetmask();
  String gateWay=(secStorageVm.getGateway() == null) ? ""String_Node_Str"" : secStorageVm.getGateway();
  String basic=""String_Node_Str"" + secStorageVm.getGuestIpAddress() + ""String_Node_Str""+ secStorageVm.getGuestNetmask()+ ""String_Node_Str""+ eth1Ip+ ""String_Node_Str""+ eth1NetMask+ ""String_Node_Str""+ eth2Ip+ ""String_Node_Str""+ eth2NetMask+ ""String_Node_Str""+ gateWay+ ""String_Node_Str""+ secStorageVm.getDns1()+ ""String_Node_Str""+ ""String_Node_Str""+ secStorageVm.getName()+ ""String_Node_Str"";
  if (secStorageVm.getDns2() != null) {
    basic=basic + ""String_Node_Str"" + secStorageVm.getDns2();
  }
  basic=basic + ""String_Node_Str"" + mgmt_host+ ""String_Node_Str""+ mgmt_port;
  String mountStr=null;
  try {
    mountStr=NfsUtils.url2Mount(secStorageVm.getNfsShare());
  }
 catch (  URISyntaxException e1) {
    throw new CloudRuntimeException(""String_Node_Str"" + secStorageVm.getNfsShare());
  }
  basic=basic + ""String_Node_Str"" + mountStr+ ""String_Node_Str""+ secStorageVm.getGuid();
  basic=basic + ""String_Node_Str"";
  basic=basic + ""String_Node_Str"";
  basic=basic + ""String_Node_Str"" + Boolean.toString(sslCopy);
  if (secStorageVm.getPrivateIpAddress() == null || secStorageVm.getPublicIpAddress() == null) {
    basic=basic + ""String_Node_Str"";
  }
  return basic;
}"
89910,"@Override public UserVmResponse createUserVmResponse(UserVm userVm){
  UserVmResponse userVmResponse=new UserVmResponse();
  Account acct=ApiDBUtils.findAccountById(Long.valueOf(userVm.getAccountId()));
  if ((acct != null) && (acct.getRemoved() == null)) {
    userVmResponse.setAccountName(acct.getAccountName());
    userVmResponse.setDomainId(acct.getDomainId());
    userVmResponse.setDomainName(ApiDBUtils.findDomainById(acct.getDomainId()).getName());
  }
 else {
    return null;
  }
  userVmResponse.setId(userVm.getId());
  userVmResponse.setName(userVm.getHostName());
  userVmResponse.setCreated(userVm.getCreated());
  if (userVm.getState() != null) {
    userVmResponse.setState(userVm.getState().toString());
  }
  userVmResponse.setHaEnable(userVm.isHaEnabled());
  if (userVm.getDisplayName() != null) {
    userVmResponse.setDisplayName(userVm.getDisplayName());
  }
 else {
    userVmResponse.setDisplayName(userVm.getHostName());
  }
  InstanceGroupVO group=ApiDBUtils.findInstanceGroupForVM(userVm.getId());
  if (group != null) {
    userVmResponse.setGroup(group.getName());
    userVmResponse.setGroupId(group.getId());
  }
  userVmResponse.setZoneId(userVm.getDataCenterId());
  userVmResponse.setZoneName(ApiDBUtils.findZoneById(userVm.getDataCenterId()).getName());
  Account account=UserContext.current().getAccount();
  if (((account == null) || (account.getType() == Account.ACCOUNT_TYPE_ADMIN)) && (userVm.getHostId() != null)) {
    userVmResponse.setHostId(userVm.getHostId());
    userVmResponse.setHostName(ApiDBUtils.findHostById(userVm.getHostId()).getName());
  }
  VMTemplateVO template=ApiDBUtils.findTemplateById(userVm.getTemplateId());
  if (template != null) {
    userVmResponse.setTemplateId(userVm.getTemplateId());
    userVmResponse.setTemplateName(template.getName());
    userVmResponse.setTemplateDisplayText(template.getDisplayText());
    userVmResponse.setPasswordEnabled(template.getEnablePassword());
  }
 else {
    userVmResponse.setTemplateId(-1L);
    userVmResponse.setTemplateName(""String_Node_Str"");
    userVmResponse.setTemplateDisplayText(""String_Node_Str"");
    userVmResponse.setPasswordEnabled(false);
  }
  if (userVm.getPassword() != null) {
    userVmResponse.setPassword(userVm.getPassword());
  }
  if (userVm.getIsoId() != null) {
    VMTemplateVO iso=ApiDBUtils.findTemplateById(userVm.getIsoId());
    if (iso != null) {
      userVmResponse.setIsoId(userVm.getIsoId());
      userVmResponse.setIsoName(iso.getName());
    }
  }
  ServiceOffering offering=ApiDBUtils.findServiceOfferingById(userVm.getServiceOfferingId());
  userVmResponse.setServiceOfferingId(userVm.getServiceOfferingId());
  userVmResponse.setServiceOfferingName(offering.getName());
  userVmResponse.setCpuNumber(offering.getCpu());
  userVmResponse.setCpuSpeed(offering.getSpeed());
  userVmResponse.setMemory(offering.getRamSize());
  VolumeVO rootVolume=ApiDBUtils.findRootVolume(userVm.getId());
  if (rootVolume != null) {
    userVmResponse.setRootDeviceId(rootVolume.getDeviceId());
    String rootDeviceType=""String_Node_Str"";
    if (rootVolume.getPoolId() != null) {
      StoragePoolVO storagePool=ApiDBUtils.findStoragePoolById(rootVolume.getPoolId());
      rootDeviceType=storagePool.getPoolType().toString();
    }
    userVmResponse.setRootDeviceType(rootDeviceType);
  }
  DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
  String cpuUsed=null;
  VmStats vmStats=ApiDBUtils.getVmStatistics(userVm.getId());
  if (vmStats != null) {
    float cpuUtil=(float)vmStats.getCPUUtilization();
    cpuUsed=decimalFormat.format(cpuUtil) + ""String_Node_Str"";
    userVmResponse.setCpuUsed(cpuUsed);
    Long networkKbRead=Double.doubleToLongBits(vmStats.getNetworkReadKBs());
    userVmResponse.setNetworkKbsRead(networkKbRead);
    Long networkKbWrite=Double.doubleToLongBits(vmStats.getNetworkWriteKBs());
    userVmResponse.setNetworkKbsWrite(networkKbWrite);
  }
  userVmResponse.setGuestOsId(userVm.getGuestOSId());
  userVmResponse.setNetworkGroupList(ApiDBUtils.getNetworkGroupsNamesForVm(userVm.getId()));
  List<? extends Nic> nics=ApiDBUtils.getNics(userVm);
  List<NicResponse> nicResponses=new ArrayList<NicResponse>();
  for (  Nic singleNic : nics) {
    NicResponse nicResponse=new NicResponse();
    nicResponse.setId(singleNic.getId());
    nicResponse.setIpaddress(singleNic.getIp4Address());
    nicResponse.setGateway(singleNic.getGateway());
    nicResponse.setNetmask(singleNic.getNetmask());
    nicResponse.setNetworkid(singleNic.getNetworkId());
    if (acct.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      if (singleNic.getBroadcastUri() != null) {
        nicResponse.setBroadcastUri(singleNic.getBroadcastUri().toString());
      }
      if (singleNic.getIsolationUri() != null) {
        nicResponse.setIsolationUri(singleNic.getIsolationUri().toString());
      }
    }
    Network network=ApiDBUtils.findNetworkById(singleNic.getNetworkId());
    nicResponse.setTrafficType(network.getTrafficType().toString());
    NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
    if (networkOffering.getGuestIpType() != null) {
      nicResponse.setType(networkOffering.getGuestIpType().toString());
    }
    nicResponse.setObjectName(""String_Node_Str"");
    nicResponses.add(nicResponse);
  }
  userVmResponse.setNics(nicResponses);
  userVmResponse.setObjectName(""String_Node_Str"");
  return userVmResponse;
}","@Override public UserVmResponse createUserVmResponse(UserVm userVm){
  UserVmResponse userVmResponse=new UserVmResponse();
  Account acct=ApiDBUtils.findAccountById(Long.valueOf(userVm.getAccountId()));
  if ((acct != null) && (acct.getRemoved() == null)) {
    userVmResponse.setAccountName(acct.getAccountName());
    userVmResponse.setDomainId(acct.getDomainId());
    userVmResponse.setDomainName(ApiDBUtils.findDomainById(acct.getDomainId()).getName());
  }
 else {
    return null;
  }
  userVmResponse.setId(userVm.getId());
  userVmResponse.setName(userVm.getName());
  userVmResponse.setCreated(userVm.getCreated());
  if (userVm.getState() != null) {
    userVmResponse.setState(userVm.getState().toString());
  }
  userVmResponse.setHaEnable(userVm.isHaEnabled());
  if (userVm.getDisplayName() != null) {
    userVmResponse.setDisplayName(userVm.getDisplayName());
  }
 else {
    userVmResponse.setDisplayName(userVm.getName());
  }
  InstanceGroupVO group=ApiDBUtils.findInstanceGroupForVM(userVm.getId());
  if (group != null) {
    userVmResponse.setGroup(group.getName());
    userVmResponse.setGroupId(group.getId());
  }
  userVmResponse.setZoneId(userVm.getDataCenterId());
  userVmResponse.setZoneName(ApiDBUtils.findZoneById(userVm.getDataCenterId()).getName());
  Account account=UserContext.current().getAccount();
  if (((account == null) || (account.getType() == Account.ACCOUNT_TYPE_ADMIN)) && (userVm.getHostId() != null)) {
    userVmResponse.setHostId(userVm.getHostId());
    userVmResponse.setHostName(ApiDBUtils.findHostById(userVm.getHostId()).getName());
  }
  VMTemplateVO template=ApiDBUtils.findTemplateById(userVm.getTemplateId());
  if (template != null) {
    userVmResponse.setTemplateId(userVm.getTemplateId());
    userVmResponse.setTemplateName(template.getName());
    userVmResponse.setTemplateDisplayText(template.getDisplayText());
    userVmResponse.setPasswordEnabled(template.getEnablePassword());
  }
 else {
    userVmResponse.setTemplateId(-1L);
    userVmResponse.setTemplateName(""String_Node_Str"");
    userVmResponse.setTemplateDisplayText(""String_Node_Str"");
    userVmResponse.setPasswordEnabled(false);
  }
  if (userVm.getPassword() != null) {
    userVmResponse.setPassword(userVm.getPassword());
  }
  if (userVm.getIsoId() != null) {
    VMTemplateVO iso=ApiDBUtils.findTemplateById(userVm.getIsoId());
    if (iso != null) {
      userVmResponse.setIsoId(userVm.getIsoId());
      userVmResponse.setIsoName(iso.getName());
    }
  }
  ServiceOffering offering=ApiDBUtils.findServiceOfferingById(userVm.getServiceOfferingId());
  userVmResponse.setServiceOfferingId(userVm.getServiceOfferingId());
  userVmResponse.setServiceOfferingName(offering.getName());
  userVmResponse.setCpuNumber(offering.getCpu());
  userVmResponse.setCpuSpeed(offering.getSpeed());
  userVmResponse.setMemory(offering.getRamSize());
  VolumeVO rootVolume=ApiDBUtils.findRootVolume(userVm.getId());
  if (rootVolume != null) {
    userVmResponse.setRootDeviceId(rootVolume.getDeviceId());
    String rootDeviceType=""String_Node_Str"";
    if (rootVolume.getPoolId() != null) {
      StoragePoolVO storagePool=ApiDBUtils.findStoragePoolById(rootVolume.getPoolId());
      rootDeviceType=storagePool.getPoolType().toString();
    }
    userVmResponse.setRootDeviceType(rootDeviceType);
  }
  DecimalFormat decimalFormat=new DecimalFormat(""String_Node_Str"");
  String cpuUsed=null;
  VmStats vmStats=ApiDBUtils.getVmStatistics(userVm.getId());
  if (vmStats != null) {
    float cpuUtil=(float)vmStats.getCPUUtilization();
    cpuUsed=decimalFormat.format(cpuUtil) + ""String_Node_Str"";
    userVmResponse.setCpuUsed(cpuUsed);
    Long networkKbRead=Double.doubleToLongBits(vmStats.getNetworkReadKBs());
    userVmResponse.setNetworkKbsRead(networkKbRead);
    Long networkKbWrite=Double.doubleToLongBits(vmStats.getNetworkWriteKBs());
    userVmResponse.setNetworkKbsWrite(networkKbWrite);
  }
  userVmResponse.setGuestOsId(userVm.getGuestOSId());
  userVmResponse.setNetworkGroupList(ApiDBUtils.getNetworkGroupsNamesForVm(userVm.getId()));
  List<? extends Nic> nics=ApiDBUtils.getNics(userVm);
  List<NicResponse> nicResponses=new ArrayList<NicResponse>();
  for (  Nic singleNic : nics) {
    NicResponse nicResponse=new NicResponse();
    nicResponse.setId(singleNic.getId());
    nicResponse.setIpaddress(singleNic.getIp4Address());
    nicResponse.setGateway(singleNic.getGateway());
    nicResponse.setNetmask(singleNic.getNetmask());
    nicResponse.setNetworkid(singleNic.getNetworkId());
    if (acct.getType() == Account.ACCOUNT_TYPE_ADMIN) {
      if (singleNic.getBroadcastUri() != null) {
        nicResponse.setBroadcastUri(singleNic.getBroadcastUri().toString());
      }
      if (singleNic.getIsolationUri() != null) {
        nicResponse.setIsolationUri(singleNic.getIsolationUri().toString());
      }
    }
    Network network=ApiDBUtils.findNetworkById(singleNic.getNetworkId());
    nicResponse.setTrafficType(network.getTrafficType().toString());
    NetworkOffering networkOffering=ApiDBUtils.findNetworkOfferingById(network.getNetworkOfferingId());
    if (networkOffering.getGuestIpType() != null) {
      nicResponse.setType(networkOffering.getGuestIpType().toString());
    }
    nicResponse.setObjectName(""String_Node_Str"");
    nicResponses.add(nicResponse);
  }
  userVmResponse.setNics(nicResponses);
  userVmResponse.setObjectName(""String_Node_Str"");
  return userVmResponse;
}"
89911,"@Override public DomainRouterResponse createDomainRouterResponse(VirtualRouter router){
  DomainRouterResponse routerResponse=new DomainRouterResponse();
  routerResponse.setId(router.getId());
  routerResponse.setZoneId(router.getDataCenterId());
  routerResponse.setName(router.getHostName());
  routerResponse.setPodId(router.getPodId());
  routerResponse.setTemplateId(router.getTemplateId());
  routerResponse.setCreated(router.getCreated());
  routerResponse.setState(router.getState());
  routerResponse.setNetworkDomain(router.getDomain());
  if (router.getHostId() != null) {
    routerResponse.setHostId(router.getHostId());
    routerResponse.setHostName(ApiDBUtils.findHostById(router.getHostId()).getName());
  }
  Account accountTemp=ApiDBUtils.findAccountById(router.getAccountId());
  if (accountTemp != null) {
    routerResponse.setAccountName(accountTemp.getAccountName());
    routerResponse.setDomainId(accountTemp.getDomainId());
    routerResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
  }
  List<? extends Nic> nics=ApiDBUtils.getNics(router);
  for (  Nic singleNic : nics) {
    Network network=ApiDBUtils.findNetworkById(singleNic.getNetworkId());
    if (network != null) {
      if (network.getTrafficType() == TrafficType.Public) {
        routerResponse.setPublicIp(singleNic.getIp4Address());
        routerResponse.setPublicMacAddress(singleNic.getMacAddress());
        routerResponse.setPublicNetmask(singleNic.getNetmask());
      }
 else       if (network.getTrafficType() == TrafficType.Control) {
        routerResponse.setPrivateIp(singleNic.getIp4Address());
        routerResponse.setPrivateMacAddress(singleNic.getMacAddress());
        routerResponse.setPrivateNetmask(singleNic.getNetmask());
      }
 else       if (network.getTrafficType() == TrafficType.Guest) {
        routerResponse.setGuestIpAddress(singleNic.getIp4Address());
        routerResponse.setGuestMacAddress(singleNic.getMacAddress());
        routerResponse.setGuestNetmask(singleNic.getNetmask());
      }
    }
  }
  DataCenter zone=ApiDBUtils.findZoneById(router.getDataCenterId());
  if (zone != null) {
    routerResponse.setZoneName(zone.getName());
    routerResponse.setDns1(zone.getDns1());
    routerResponse.setDns2(zone.getDns2());
  }
  routerResponse.setObjectName(""String_Node_Str"");
  return routerResponse;
}","@Override public DomainRouterResponse createDomainRouterResponse(VirtualRouter router){
  DomainRouterResponse routerResponse=new DomainRouterResponse();
  routerResponse.setId(router.getId());
  routerResponse.setZoneId(router.getDataCenterId());
  routerResponse.setName(router.getName());
  routerResponse.setPodId(router.getPodId());
  routerResponse.setTemplateId(router.getTemplateId());
  routerResponse.setCreated(router.getCreated());
  routerResponse.setState(router.getState());
  routerResponse.setNetworkDomain(router.getDomain());
  if (router.getHostId() != null) {
    routerResponse.setHostId(router.getHostId());
    routerResponse.setHostName(ApiDBUtils.findHostById(router.getHostId()).getName());
  }
  Account accountTemp=ApiDBUtils.findAccountById(router.getAccountId());
  if (accountTemp != null) {
    routerResponse.setAccountName(accountTemp.getAccountName());
    routerResponse.setDomainId(accountTemp.getDomainId());
    routerResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
  }
  List<? extends Nic> nics=ApiDBUtils.getNics(router);
  for (  Nic singleNic : nics) {
    Network network=ApiDBUtils.findNetworkById(singleNic.getNetworkId());
    if (network != null) {
      if (network.getTrafficType() == TrafficType.Public) {
        routerResponse.setPublicIp(singleNic.getIp4Address());
        routerResponse.setPublicMacAddress(singleNic.getMacAddress());
        routerResponse.setPublicNetmask(singleNic.getNetmask());
      }
 else       if (network.getTrafficType() == TrafficType.Control) {
        routerResponse.setPrivateIp(singleNic.getIp4Address());
        routerResponse.setPrivateMacAddress(singleNic.getMacAddress());
        routerResponse.setPrivateNetmask(singleNic.getNetmask());
      }
 else       if (network.getTrafficType() == TrafficType.Guest) {
        routerResponse.setGuestIpAddress(singleNic.getIp4Address());
        routerResponse.setGuestMacAddress(singleNic.getMacAddress());
        routerResponse.setGuestNetmask(singleNic.getNetmask());
      }
    }
  }
  DataCenter zone=ApiDBUtils.findZoneById(router.getDataCenterId());
  if (zone != null) {
    routerResponse.setZoneName(zone.getName());
    routerResponse.setDns1(zone.getDns1());
    routerResponse.setDns2(zone.getDns2());
  }
  routerResponse.setObjectName(""String_Node_Str"");
  return routerResponse;
}"
89912,"@Override public VolumeResponse createVolumeResponse(Volume volume){
  VolumeResponse volResponse=new VolumeResponse();
  volResponse.setId(volume.getId());
  if (volume.getName() != null) {
    volResponse.setName(volume.getName());
  }
 else {
    volResponse.setName(""String_Node_Str"");
  }
  volResponse.setZoneId(volume.getDataCenterId());
  volResponse.setZoneName(ApiDBUtils.findZoneById(volume.getDataCenterId()).getName());
  volResponse.setVolumeType(volume.getVolumeType().toString());
  volResponse.setDeviceId(volume.getDeviceId());
  Long instanceId=volume.getInstanceId();
  if (instanceId != null) {
    VMInstanceVO vm=ApiDBUtils.findVMInstanceById(instanceId);
    volResponse.setVirtualMachineId(vm.getId());
    volResponse.setVirtualMachineName(vm.getHostName());
    volResponse.setVirtualMachineDisplayName(vm.getHostName());
    volResponse.setVirtualMachineState(vm.getState().toString());
  }
  volResponse.setSize(volume.getSize());
  volResponse.setCreated(volume.getCreated());
  volResponse.setState(volume.getStatus().toString());
  Account accountTemp=ApiDBUtils.findAccountById(volume.getAccountId());
  if (accountTemp != null) {
    volResponse.setAccountName(accountTemp.getAccountName());
    volResponse.setDomainId(accountTemp.getDomainId());
    volResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
  }
  String storageType;
  try {
    if (volume.getPoolId() == null) {
      if (volume.getState() == Volume.State.Allocated) {
        storageType=""String_Node_Str"";
      }
 else {
        storageType=""String_Node_Str"";
      }
    }
 else {
      storageType=ApiDBUtils.volumeIsOnSharedStorage(volume.getId()) ? ""String_Node_Str"" : ""String_Node_Str"";
    }
  }
 catch (  InvalidParameterValueException e) {
    s_logger.error(e.getMessage(),e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + volume.getName() + ""String_Node_Str"");
  }
  volResponse.setStorageType(storageType);
  if (volume.getVolumeType().equals(Volume.VolumeType.ROOT)) {
    volResponse.setServiceOfferingId(volume.getDiskOfferingId());
  }
 else {
    volResponse.setDiskOfferingId(volume.getDiskOfferingId());
  }
  DiskOfferingVO diskOffering=ApiDBUtils.findDiskOfferingById(volume.getDiskOfferingId());
  if (volume.getVolumeType().equals(Volume.VolumeType.ROOT)) {
    volResponse.setServiceOfferingName(diskOffering.getName());
    volResponse.setServiceOfferingDisplayText(diskOffering.getDisplayText());
  }
 else {
    volResponse.setDiskOfferingName(diskOffering.getName());
    volResponse.setDiskOfferingDisplayText(diskOffering.getDisplayText());
  }
  Long poolId=volume.getPoolId();
  String poolName=(poolId == null) ? ""String_Node_Str"" : ApiDBUtils.findStoragePoolById(poolId).getName();
  volResponse.setStoragePoolName(poolName);
  volResponse.setSourceId(volume.getSourceId());
  if (volume.getSourceType() != null) {
    volResponse.setSourceType(volume.getSourceType().toString());
  }
  volResponse.setHypervisor(ApiDBUtils.getVolumeHyperType(volume.getId()).toString());
  volResponse.setAttached(volume.getAttached());
  volResponse.setDestroyed(volume.getDestroyed());
  volResponse.setObjectName(""String_Node_Str"");
  return volResponse;
}","@Override public VolumeResponse createVolumeResponse(Volume volume){
  VolumeResponse volResponse=new VolumeResponse();
  volResponse.setId(volume.getId());
  if (volume.getName() != null) {
    volResponse.setName(volume.getName());
  }
 else {
    volResponse.setName(""String_Node_Str"");
  }
  volResponse.setZoneId(volume.getDataCenterId());
  volResponse.setZoneName(ApiDBUtils.findZoneById(volume.getDataCenterId()).getName());
  volResponse.setVolumeType(volume.getVolumeType().toString());
  volResponse.setDeviceId(volume.getDeviceId());
  Long instanceId=volume.getInstanceId();
  if (instanceId != null) {
    VMInstanceVO vm=ApiDBUtils.findVMInstanceById(instanceId);
    volResponse.setVirtualMachineId(vm.getId());
    volResponse.setVirtualMachineName(vm.getName());
    volResponse.setVirtualMachineDisplayName(vm.getName());
    volResponse.setVirtualMachineState(vm.getState().toString());
  }
  volResponse.setSize(volume.getSize());
  volResponse.setCreated(volume.getCreated());
  volResponse.setState(volume.getStatus().toString());
  Account accountTemp=ApiDBUtils.findAccountById(volume.getAccountId());
  if (accountTemp != null) {
    volResponse.setAccountName(accountTemp.getAccountName());
    volResponse.setDomainId(accountTemp.getDomainId());
    volResponse.setDomainName(ApiDBUtils.findDomainById(accountTemp.getDomainId()).getName());
  }
  String storageType;
  try {
    if (volume.getPoolId() == null) {
      if (volume.getState() == Volume.State.Allocated) {
        storageType=""String_Node_Str"";
      }
 else {
        storageType=""String_Node_Str"";
      }
    }
 else {
      storageType=ApiDBUtils.volumeIsOnSharedStorage(volume.getId()) ? ""String_Node_Str"" : ""String_Node_Str"";
    }
  }
 catch (  InvalidParameterValueException e) {
    s_logger.error(e.getMessage(),e);
    throw new ServerApiException(BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + volume.getName() + ""String_Node_Str"");
  }
  volResponse.setStorageType(storageType);
  if (volume.getVolumeType().equals(Volume.VolumeType.ROOT)) {
    volResponse.setServiceOfferingId(volume.getDiskOfferingId());
  }
 else {
    volResponse.setDiskOfferingId(volume.getDiskOfferingId());
  }
  DiskOfferingVO diskOffering=ApiDBUtils.findDiskOfferingById(volume.getDiskOfferingId());
  if (volume.getVolumeType().equals(Volume.VolumeType.ROOT)) {
    volResponse.setServiceOfferingName(diskOffering.getName());
    volResponse.setServiceOfferingDisplayText(diskOffering.getDisplayText());
  }
 else {
    volResponse.setDiskOfferingName(diskOffering.getName());
    volResponse.setDiskOfferingDisplayText(diskOffering.getDisplayText());
  }
  Long poolId=volume.getPoolId();
  String poolName=(poolId == null) ? ""String_Node_Str"" : ApiDBUtils.findStoragePoolById(poolId).getName();
  volResponse.setStoragePoolName(poolName);
  volResponse.setSourceId(volume.getSourceId());
  if (volume.getSourceType() != null) {
    volResponse.setSourceType(volume.getSourceType().toString());
  }
  volResponse.setHypervisor(ApiDBUtils.getVolumeHyperType(volume.getId()).toString());
  volResponse.setAttached(volume.getAttached());
  volResponse.setDestroyed(volume.getDestroyed());
  volResponse.setObjectName(""String_Node_Str"");
  return volResponse;
}"
89913,"@Override public FirewallRuleResponse createFirewallRuleResponse(PortForwardingRule fwRule){
  FirewallRuleResponse response=new FirewallRuleResponse();
  response.setId(fwRule.getId());
  response.setPrivatePort(Integer.toString(fwRule.getDestinationPortStart()));
  response.setProtocol(fwRule.getProtocol());
  response.setPublicPort(Integer.toString(fwRule.getSourcePortStart()));
  response.setPublicIpAddress(fwRule.getSourceIpAddress().toString());
  if (fwRule.getSourceIpAddress() != null && fwRule.getDestinationIpAddress() != null) {
    UserVm vm=ApiDBUtils.findUserVmById(fwRule.getVirtualMachineId());
    if (vm != null) {
      response.setVirtualMachineId(vm.getId());
      response.setVirtualMachineName(vm.getHostName());
      response.setVirtualMachineDisplayName(vm.getDisplayName());
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  response.setState(stateToSet);
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public FirewallRuleResponse createFirewallRuleResponse(PortForwardingRule fwRule){
  FirewallRuleResponse response=new FirewallRuleResponse();
  response.setId(fwRule.getId());
  response.setPrivatePort(Integer.toString(fwRule.getDestinationPortStart()));
  response.setProtocol(fwRule.getProtocol());
  response.setPublicPort(Integer.toString(fwRule.getSourcePortStart()));
  response.setPublicIpAddress(fwRule.getSourceIpAddress().toString());
  if (fwRule.getSourceIpAddress() != null && fwRule.getDestinationIpAddress() != null) {
    UserVm vm=ApiDBUtils.findUserVmById(fwRule.getVirtualMachineId());
    if (vm != null) {
      response.setVirtualMachineId(vm.getId());
      response.setVirtualMachineName(vm.getName());
      response.setVirtualMachineDisplayName(vm.getDisplayName());
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  response.setState(stateToSet);
  response.setObjectName(""String_Node_Str"");
  return response;
}"
89914,"@Override public IpForwardingRuleResponse createIpForwardingRuleResponse(PortForwardingRule fwRule){
  IpForwardingRuleResponse response=new IpForwardingRuleResponse();
  response.setId(fwRule.getId());
  response.setProtocol(fwRule.getProtocol());
  response.setPublicIpAddress(fwRule.getSourceIpAddress().addr());
  if (fwRule.getSourceIpAddress() != null && fwRule.getDestinationIpAddress() != null) {
    UserVm vm=ApiDBUtils.findUserVmById(fwRule.getVirtualMachineId());
    if (vm != null) {
      response.setVirtualMachineId(vm.getId());
      response.setVirtualMachineName(vm.getHostName());
      response.setVirtualMachineDisplayName(vm.getDisplayName());
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  response.setState(stateToSet);
  response.setObjectName(""String_Node_Str"");
  return response;
}","@Override public IpForwardingRuleResponse createIpForwardingRuleResponse(PortForwardingRule fwRule){
  IpForwardingRuleResponse response=new IpForwardingRuleResponse();
  response.setId(fwRule.getId());
  response.setProtocol(fwRule.getProtocol());
  response.setPublicIpAddress(fwRule.getSourceIpAddress().addr());
  if (fwRule.getSourceIpAddress() != null && fwRule.getDestinationIpAddress() != null) {
    UserVm vm=ApiDBUtils.findUserVmById(fwRule.getVirtualMachineId());
    if (vm != null) {
      response.setVirtualMachineId(vm.getId());
      response.setVirtualMachineName(vm.getName());
      response.setVirtualMachineDisplayName(vm.getDisplayName());
    }
  }
  FirewallRule.State state=fwRule.getState();
  String stateToSet=state.toString();
  if (state.equals(FirewallRule.State.Revoke)) {
    stateToSet=""String_Node_Str"";
  }
  response.setState(stateToSet);
  response.setObjectName(""String_Node_Str"");
  return response;
}"
89915,"@Override public SystemVmResponse createSystemVmResponse(VirtualMachine systemVM){
  SystemVmResponse vmResponse=new SystemVmResponse();
  if (systemVM instanceof SystemVm) {
    SystemVm vm=(SystemVm)systemVM;
    vmResponse.setId(vm.getId());
    vmResponse.setSystemVmType(vm.getType().toString().toLowerCase());
    vmResponse.setZoneId(vm.getDataCenterId());
    vmResponse.setNetworkDomain(vm.getDomain());
    vmResponse.setName(vm.getHostName());
    vmResponse.setPodId(vm.getPodId());
    vmResponse.setTemplateId(vm.getTemplateId());
    vmResponse.setCreated(vm.getCreated());
    if (vm.getHostId() != null) {
      vmResponse.setHostId(vm.getHostId());
      vmResponse.setHostName(ApiDBUtils.findHostById(vm.getHostId()).getName());
    }
    if (vm.getState() != null) {
      vmResponse.setState(vm.getState().toString());
    }
    String instanceType=""String_Node_Str"";
    if (systemVM instanceof SecondaryStorageVmVO) {
      instanceType=""String_Node_Str"";
    }
    if (systemVM instanceof ConsoleProxyVO) {
      ConsoleProxyVO proxy=(ConsoleProxyVO)systemVM;
      vmResponse.setActiveViewerSessions(proxy.getActiveSession());
    }
    DataCenter zone=ApiDBUtils.findZoneById(vm.getDataCenterId());
    if (zone != null) {
      vmResponse.setZoneName(zone.getName());
      vmResponse.setDns1(zone.getDns1());
      vmResponse.setDns2(zone.getDns2());
    }
    List<? extends Nic> nics=ApiDBUtils.getNics(systemVM);
    for (    Nic singleNic : nics) {
      Network network=ApiDBUtils.findNetworkById(singleNic.getNetworkId());
      if (network != null) {
        if (network.getTrafficType() == TrafficType.Public) {
          vmResponse.setPublicIp(singleNic.getIp4Address());
          vmResponse.setPublicMacAddress(singleNic.getMacAddress());
          vmResponse.setPublicNetmask(singleNic.getNetmask());
        }
 else         if (network.getTrafficType() == TrafficType.Control) {
          vmResponse.setPrivateIp(singleNic.getIp4Address());
          vmResponse.setPrivateMacAddress(singleNic.getMacAddress());
          vmResponse.setPrivateNetmask(singleNic.getNetmask());
        }
      }
    }
  }
  vmResponse.setObjectName(""String_Node_Str"");
  return vmResponse;
}","@Override public SystemVmResponse createSystemVmResponse(VirtualMachine systemVM){
  SystemVmResponse vmResponse=new SystemVmResponse();
  if (systemVM instanceof SystemVm) {
    SystemVm vm=(SystemVm)systemVM;
    vmResponse.setId(vm.getId());
    vmResponse.setSystemVmType(vm.getType().toString().toLowerCase());
    vmResponse.setZoneId(vm.getDataCenterId());
    vmResponse.setNetworkDomain(vm.getDomain());
    vmResponse.setName(vm.getName());
    vmResponse.setPodId(vm.getPodId());
    vmResponse.setTemplateId(vm.getTemplateId());
    vmResponse.setCreated(vm.getCreated());
    if (vm.getHostId() != null) {
      vmResponse.setHostId(vm.getHostId());
      vmResponse.setHostName(ApiDBUtils.findHostById(vm.getHostId()).getName());
    }
    if (vm.getState() != null) {
      vmResponse.setState(vm.getState().toString());
    }
    String instanceType=""String_Node_Str"";
    if (systemVM instanceof SecondaryStorageVmVO) {
      instanceType=""String_Node_Str"";
    }
    if (systemVM instanceof ConsoleProxyVO) {
      ConsoleProxyVO proxy=(ConsoleProxyVO)systemVM;
      vmResponse.setActiveViewerSessions(proxy.getActiveSession());
    }
    DataCenter zone=ApiDBUtils.findZoneById(vm.getDataCenterId());
    if (zone != null) {
      vmResponse.setZoneName(zone.getName());
      vmResponse.setDns1(zone.getDns1());
      vmResponse.setDns2(zone.getDns2());
    }
    List<? extends Nic> nics=ApiDBUtils.getNics(systemVM);
    for (    Nic singleNic : nics) {
      Network network=ApiDBUtils.findNetworkById(singleNic.getNetworkId());
      if (network != null) {
        if (network.getTrafficType() == TrafficType.Public) {
          vmResponse.setPublicIp(singleNic.getIp4Address());
          vmResponse.setPublicMacAddress(singleNic.getMacAddress());
          vmResponse.setPublicNetmask(singleNic.getNetmask());
        }
 else         if (network.getTrafficType() == TrafficType.Control) {
          vmResponse.setPrivateIp(singleNic.getIp4Address());
          vmResponse.setPrivateMacAddress(singleNic.getMacAddress());
          vmResponse.setPrivateNetmask(singleNic.getNetmask());
        }
      }
    }
  }
  vmResponse.setObjectName(""String_Node_Str"");
  return vmResponse;
}"
89916,"public static ConsoleProxyOperationResultObject composeResultObject(ManagementServer managementServer,ConsoleProxyVO proxy){
  ConsoleProxyOperationResultObject result=new ConsoleProxyOperationResultObject();
  result.setId(proxy.getId());
  result.setName(proxy.getHostName());
  result.setZoneId(proxy.getDataCenterId());
  result.setZoneName(managementServer.findDataCenterById(proxy.getDataCenterId()).getName());
  result.setDns1(proxy.getDns1());
  result.setDns2(proxy.getDns2());
  result.setNetworkDomain(proxy.getDomain());
  result.setGateway(proxy.getGateway());
  result.setPodId(proxy.getPodId());
  result.setHostId(proxy.getHostId());
  if (proxy.getHostId() != null)   result.setHostName(managementServer.getHostBy(proxy.getHostId()).getName());
  result.setPrivateIp(proxy.getPrivateIpAddress());
  result.setPrivateMac(proxy.getPrivateMacAddress());
  result.setPrivateNetmask(proxy.getPrivateNetmask());
  result.setPublicIp(proxy.getPublicIpAddress());
  result.setPublicMac(proxy.getPublicMacAddress());
  result.setPublicNetmask(proxy.getPublicNetmask());
  result.setTemplateId(proxy.getTemplateId());
  result.setCreated(proxy.getCreated());
  result.setActionSessions(proxy.getActiveSession());
  result.setState(proxy.getState().toString());
  return result;
}","public static ConsoleProxyOperationResultObject composeResultObject(ManagementServer managementServer,ConsoleProxyVO proxy){
  ConsoleProxyOperationResultObject result=new ConsoleProxyOperationResultObject();
  result.setId(proxy.getId());
  result.setName(proxy.getName());
  result.setZoneId(proxy.getDataCenterId());
  result.setZoneName(managementServer.findDataCenterById(proxy.getDataCenterId()).getName());
  result.setDns1(proxy.getDns1());
  result.setDns2(proxy.getDns2());
  result.setNetworkDomain(proxy.getDomain());
  result.setGateway(proxy.getGateway());
  result.setPodId(proxy.getPodId());
  result.setHostId(proxy.getHostId());
  if (proxy.getHostId() != null)   result.setHostName(managementServer.getHostBy(proxy.getHostId()).getName());
  result.setPrivateIp(proxy.getPrivateIpAddress());
  result.setPrivateMac(proxy.getPrivateMacAddress());
  result.setPrivateNetmask(proxy.getPrivateNetmask());
  result.setPublicIp(proxy.getPublicIpAddress());
  result.setPublicMac(proxy.getPublicMacAddress());
  result.setPublicNetmask(proxy.getPublicNetmask());
  result.setTemplateId(proxy.getTemplateId());
  result.setCreated(proxy.getCreated());
  result.setActionSessions(proxy.getActiveSession());
  result.setState(proxy.getState().toString());
  return result;
}"
89917,"private DeployVMResultObject composeResultObject(long userId,UserVm vm,DeployVMParam param){
  DeployVMResultObject resultObject=new DeployVMResultObject();
  if (vm == null)   return resultObject;
  resultObject.setId(vm.getId());
  resultObject.setName(vm.getHostName());
  resultObject.setCreated(vm.getCreated());
  resultObject.setZoneId(vm.getDataCenterId());
  resultObject.setZoneName(getAsyncJobMgr().getExecutorContext().getManagementServer().findDataCenterById(vm.getDataCenterId()).getName());
  resultObject.setIpAddress(vm.getPrivateIpAddress());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setHaEnabled(vm.isHaEnabled());
  if (vm.getDisplayName() == null || vm.getDisplayName().length() == 0) {
    resultObject.setDisplayName(vm.getHostName());
  }
 else {
    resultObject.setDisplayName(vm.getDisplayName());
  }
  if (vm.getState() != null)   resultObject.setState(vm.getState().toString());
  ManagementServer managementServer=getAsyncJobMgr().getExecutorContext().getManagementServer();
  InstanceGroupVO group=managementServer.getGroupForVm(vm.getId());
  if (group != null) {
    resultObject.setGroupId(group.getId());
    resultObject.setGroup(group.getName());
  }
  VMTemplateVO template=managementServer.findTemplateById(vm.getTemplateId());
  Account acct=managementServer.findAccountById(Long.valueOf(vm.getAccountId()));
  if (acct != null) {
    resultObject.setAccount(acct.getAccountName());
    resultObject.setDomainId(acct.getDomainId());
  }
  User userExecutingCmd=managementServer.getUser(userId);
  Account acctForUserExecutingCmd=managementServer.findAccountById(Long.valueOf(userExecutingCmd.getAccountId()));
  if ((BaseCmd.isAdmin(acctForUserExecutingCmd.getType()) && (vm.getHostId() != null)) || (BaseCmd.isAdmin(acct.getType()) && (vm.getHostId() != null))) {
    resultObject.setHostname(managementServer.getHostBy(vm.getHostId()).getName());
    resultObject.setHostid(vm.getHostId());
  }
  String templateName=""String_Node_Str"";
  boolean templatePasswordEnabled=false;
  String templateDisplayText=null;
  if (template != null) {
    templateName=template.getName();
    templatePasswordEnabled=template.getEnablePassword();
    templateDisplayText=template.getDisplayText();
    if (templateDisplayText == null) {
      templateDisplayText=templateName;
    }
  }
  if (templatePasswordEnabled) {
    resultObject.setPassword(param.getPassword());
  }
  Long isoId=vm.getIsoId();
  if (isoId != null) {
    VMTemplateVO iso=getAsyncJobMgr().getExecutorContext().getManagementServer().findTemplateById(isoId.longValue());
    if (iso != null) {
      resultObject.setIsoId(isoId.longValue());
      resultObject.setIsoName(iso.getName());
      resultObject.setTemplateId(isoId.longValue());
      resultObject.setTemplateName(iso.getName());
      templateDisplayText=iso.getDisplayText();
      if (templateDisplayText == null)       templateDisplayText=iso.getName();
      resultObject.setIsoDisplayText(templateDisplayText);
      resultObject.setTemplateDisplayText(templateDisplayText);
    }
  }
 else {
    resultObject.setTemplateId(vm.getTemplateId());
    resultObject.setTemplateName(templateName);
    resultObject.setTemplateDisplayText(templateDisplayText);
    resultObject.setPasswordEnabled(templatePasswordEnabled);
  }
  ServiceOfferingVO offering=managementServer.findServiceOfferingById(vm.getServiceOfferingId());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setServiceOfferingName(offering.getName());
  resultObject.setCpuNumber(String.valueOf(offering.getCpu()));
  resultObject.setCpuSpeed(String.valueOf(offering.getSpeed()));
  resultObject.setMemory(String.valueOf(offering.getRamSize()));
  return resultObject;
}","private DeployVMResultObject composeResultObject(long userId,UserVm vm,DeployVMParam param){
  DeployVMResultObject resultObject=new DeployVMResultObject();
  if (vm == null)   return resultObject;
  resultObject.setId(vm.getId());
  resultObject.setName(vm.getName());
  resultObject.setCreated(vm.getCreated());
  resultObject.setZoneId(vm.getDataCenterId());
  resultObject.setZoneName(getAsyncJobMgr().getExecutorContext().getManagementServer().findDataCenterById(vm.getDataCenterId()).getName());
  resultObject.setIpAddress(vm.getPrivateIpAddress());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setHaEnabled(vm.isHaEnabled());
  if (vm.getDisplayName() == null || vm.getDisplayName().length() == 0) {
    resultObject.setDisplayName(vm.getName());
  }
 else {
    resultObject.setDisplayName(vm.getDisplayName());
  }
  if (vm.getState() != null)   resultObject.setState(vm.getState().toString());
  ManagementServer managementServer=getAsyncJobMgr().getExecutorContext().getManagementServer();
  InstanceGroupVO group=managementServer.getGroupForVm(vm.getId());
  if (group != null) {
    resultObject.setGroupId(group.getId());
    resultObject.setGroup(group.getName());
  }
  VMTemplateVO template=managementServer.findTemplateById(vm.getTemplateId());
  Account acct=managementServer.findAccountById(Long.valueOf(vm.getAccountId()));
  if (acct != null) {
    resultObject.setAccount(acct.getAccountName());
    resultObject.setDomainId(acct.getDomainId());
  }
  User userExecutingCmd=managementServer.getUser(userId);
  Account acctForUserExecutingCmd=managementServer.findAccountById(Long.valueOf(userExecutingCmd.getAccountId()));
  if ((BaseCmd.isAdmin(acctForUserExecutingCmd.getType()) && (vm.getHostId() != null)) || (BaseCmd.isAdmin(acct.getType()) && (vm.getHostId() != null))) {
    resultObject.setHostname(managementServer.getHostBy(vm.getHostId()).getName());
    resultObject.setHostid(vm.getHostId());
  }
  String templateName=""String_Node_Str"";
  boolean templatePasswordEnabled=false;
  String templateDisplayText=null;
  if (template != null) {
    templateName=template.getName();
    templatePasswordEnabled=template.getEnablePassword();
    templateDisplayText=template.getDisplayText();
    if (templateDisplayText == null) {
      templateDisplayText=templateName;
    }
  }
  if (templatePasswordEnabled) {
    resultObject.setPassword(param.getPassword());
  }
  Long isoId=vm.getIsoId();
  if (isoId != null) {
    VMTemplateVO iso=getAsyncJobMgr().getExecutorContext().getManagementServer().findTemplateById(isoId.longValue());
    if (iso != null) {
      resultObject.setIsoId(isoId.longValue());
      resultObject.setIsoName(iso.getName());
      resultObject.setTemplateId(isoId.longValue());
      resultObject.setTemplateName(iso.getName());
      templateDisplayText=iso.getDisplayText();
      if (templateDisplayText == null)       templateDisplayText=iso.getName();
      resultObject.setIsoDisplayText(templateDisplayText);
      resultObject.setTemplateDisplayText(templateDisplayText);
    }
  }
 else {
    resultObject.setTemplateId(vm.getTemplateId());
    resultObject.setTemplateName(templateName);
    resultObject.setTemplateDisplayText(templateDisplayText);
    resultObject.setPasswordEnabled(templatePasswordEnabled);
  }
  ServiceOfferingVO offering=managementServer.findServiceOfferingById(vm.getServiceOfferingId());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setServiceOfferingName(offering.getName());
  resultObject.setCpuNumber(String.valueOf(offering.getCpu()));
  resultObject.setCpuSpeed(String.valueOf(offering.getSpeed()));
  resultObject.setMemory(String.valueOf(offering.getRamSize()));
  return resultObject;
}"
89918,"private void processDisconnectAndTimeout(VMOperationListener listener,String resultMessage){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  EventVO event=new EventVO();
  event.setUserId(param.getUserId());
  event.setAccountId(vm.getAccountId());
  event.setType(EventTypes.EVENT_VM_DESTROY);
  event.setParameters(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getHostName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId());
  event.setDescription(""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ resultMessage);
  event.setLevel(EventVO.LEVEL_ERROR);
  boolean jobStatusUpdated=false;
  try {
    asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
    jobStatusUpdated=true;
    asyncMgr.getExecutorContext().getEventDao().persist(event);
  }
 catch (  Exception e) {
    if (!jobStatusUpdated)     asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}","private void processDisconnectAndTimeout(VMOperationListener listener,String resultMessage){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  EventVO event=new EventVO();
  event.setUserId(param.getUserId());
  event.setAccountId(vm.getAccountId());
  event.setType(EventTypes.EVENT_VM_DESTROY);
  event.setParameters(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId());
  event.setDescription(""String_Node_Str"" + vm.getName() + ""String_Node_Str""+ resultMessage);
  event.setLevel(EventVO.LEVEL_ERROR);
  boolean jobStatusUpdated=false;
  try {
    asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
    jobStatusUpdated=true;
    asyncMgr.getExecutorContext().getEventDao().persist(event);
  }
 catch (  Exception e) {
    if (!jobStatusUpdated)     asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}"
89919,"@Override @DB public void processAnswer(VMOperationListener listener,long agentId,long seq,Answer answer){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  ManagementServer managementServer=asyncMgr.getExecutorContext().getManagementServer();
  String params=""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getHostName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId();
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ seq);
  boolean stopped=false;
  if (answer != null && answer.getResult())   stopped=true;
  try {
    if (stopped) {
      asyncMgr.getExecutorContext().getVmMgr().completeStopCommand(param.getUserId(),vm,Event.OperationSucceeded,param.getChildEventId());
      Transaction txn=Transaction.currentTxn();
      txn.start();
      asyncMgr.getExecutorContext().getAccountMgr().decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
      if (!asyncMgr.getExecutorContext().getItMgr().stateTransitTo(vm,VirtualMachine.Event.DestroyRequested,vm.getHostId())) {
        s_logger.debug(""String_Node_Str"" + vm.toString());
        txn.rollback();
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,""String_Node_Str"");
        return;
      }
      asyncMgr.getExecutorContext().getVmMgr().cleanNetworkRules(param.getUserId(),vm.getId());
      List<VolumeVO> volumes=asyncMgr.getExecutorContext().getVolumeDao().findByInstanceAndType(vm.getId(),VolumeType.ROOT);
      for (      VolumeVO volume : volumes) {
        asyncMgr.getExecutorContext().getStorageMgr().destroyVolume(volume);
      }
      volumes=asyncMgr.getExecutorContext().getVolumeDao().findByInstanceAndType(vm.getId(),VolumeType.DATADISK);
      for (      VolumeVO volume : volumes) {
        asyncMgr.getExecutorContext().getVolumeDao().detachVolume(volume.getId());
      }
      txn.commit();
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,""String_Node_Str"");
    }
 else {
      asyncMgr.getExecutorContext().getItMgr().stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + vm.getHostName());
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}","@Override @DB public void processAnswer(VMOperationListener listener,long agentId,long seq,Answer answer){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  ManagementServer managementServer=asyncMgr.getExecutorContext().getManagementServer();
  String params=""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId();
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ seq);
  boolean stopped=false;
  if (answer != null && answer.getResult())   stopped=true;
  try {
    if (stopped) {
      asyncMgr.getExecutorContext().getVmMgr().completeStopCommand(param.getUserId(),vm,Event.OperationSucceeded,param.getChildEventId());
      Transaction txn=Transaction.currentTxn();
      txn.start();
      asyncMgr.getExecutorContext().getAccountMgr().decrementResourceCount(vm.getAccountId(),ResourceType.user_vm);
      if (!asyncMgr.getExecutorContext().getItMgr().stateTransitTo(vm,VirtualMachine.Event.DestroyRequested,vm.getHostId())) {
        s_logger.debug(""String_Node_Str"" + vm.toString());
        txn.rollback();
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,""String_Node_Str"");
        return;
      }
      asyncMgr.getExecutorContext().getVmMgr().cleanNetworkRules(param.getUserId(),vm.getId());
      List<VolumeVO> volumes=asyncMgr.getExecutorContext().getVolumeDao().findByInstanceAndType(vm.getId(),VolumeType.ROOT);
      for (      VolumeVO volume : volumes) {
        asyncMgr.getExecutorContext().getStorageMgr().destroyVolume(volume);
      }
      volumes=asyncMgr.getExecutorContext().getVolumeDao().findByInstanceAndType(vm.getId(),VolumeType.DATADISK);
      for (      VolumeVO volume : volumes) {
        asyncMgr.getExecutorContext().getVolumeDao().detachVolume(volume.getId());
      }
      txn.commit();
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,""String_Node_Str"");
    }
 else {
      asyncMgr.getExecutorContext().getItMgr().stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"" + vm.getName());
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}"
89920,"private void processDisconnectAndTimeout(VMOperationListener listener,String resultMessage){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  EventVO event=new EventVO();
  event.setUserId(param.getUserId());
  event.setAccountId(vm.getAccountId());
  event.setType(EventTypes.EVENT_VM_REBOOT);
  event.setParameters(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getHostName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId());
  event.setDescription(""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ resultMessage);
  event.setLevel(EventVO.LEVEL_ERROR);
  boolean jobStatusUpdated=false;
  try {
    asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
    jobStatusUpdated=true;
    asyncMgr.getExecutorContext().getEventDao().persist(event);
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
    if (!jobStatusUpdated)     asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}","private void processDisconnectAndTimeout(VMOperationListener listener,String resultMessage){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  EventVO event=new EventVO();
  event.setUserId(param.getUserId());
  event.setAccountId(vm.getAccountId());
  event.setType(EventTypes.EVENT_VM_REBOOT);
  event.setParameters(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId());
  event.setDescription(""String_Node_Str"" + vm.getName() + ""String_Node_Str""+ resultMessage);
  event.setLevel(EventVO.LEVEL_ERROR);
  boolean jobStatusUpdated=false;
  try {
    asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
    jobStatusUpdated=true;
    asyncMgr.getExecutorContext().getEventDao().persist(event);
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
    if (!jobStatusUpdated)     asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}"
89921,"public void processAnswer(VMOperationListener listener,long agentId,long seq,Answer answer){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  ManagementServer managementServer=asyncMgr.getExecutorContext().getManagementServer();
  String params=""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getHostName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId();
  boolean jobStatusUpdated=false;
  try {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ seq);
    if (answer != null) {
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,VMExecutorHelper.composeResultObject(asyncMgr.getExecutorContext().getManagementServer(),vm,null));
      jobStatusUpdated=true;
      EventUtils.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_INFO,EventTypes.EVENT_VM_REBOOT,""String_Node_Str"" + vm.getHostName(),params,param.getEventId());
    }
 else {
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
      jobStatusUpdated=true;
      EventUtils.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_REBOOT,""String_Node_Str"" + vm.getHostName(),params,param.getEventId());
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
    if (!jobStatusUpdated) {
      if (answer != null) {
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,VMExecutorHelper.composeResultObject(asyncMgr.getExecutorContext().getManagementServer(),vm,null));
      }
 else {
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
      }
    }
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}","public void processAnswer(VMOperationListener listener,long agentId,long seq,Answer answer){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  ManagementServer managementServer=asyncMgr.getExecutorContext().getManagementServer();
  String params=""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId();
  boolean jobStatusUpdated=false;
  try {
    if (s_logger.isDebugEnabled())     s_logger.debug(""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ seq);
    if (answer != null) {
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,VMExecutorHelper.composeResultObject(asyncMgr.getExecutorContext().getManagementServer(),vm,null));
      jobStatusUpdated=true;
      EventUtils.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_INFO,EventTypes.EVENT_VM_REBOOT,""String_Node_Str"" + vm.getName(),params,param.getEventId());
    }
 else {
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
      jobStatusUpdated=true;
      EventUtils.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_REBOOT,""String_Node_Str"" + vm.getName(),params,param.getEventId());
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
    if (!jobStatusUpdated) {
      if (answer != null) {
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,VMExecutorHelper.composeResultObject(asyncMgr.getExecutorContext().getManagementServer(),vm,null));
      }
 else {
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
      }
    }
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}"
89922,"public static RouterOperationResultObject composeResultObject(ManagementServer managementServer,VirtualRouter router){
  RouterOperationResultObject resultObject=new RouterOperationResultObject();
  resultObject.setId(router.getId());
  resultObject.setZoneId(router.getDataCenterId());
  resultObject.setZoneName(managementServer.findDataCenterById(router.getDataCenterId()).getName());
  resultObject.setDns1(router.getDns1());
  resultObject.setDns2(router.getDns2());
  resultObject.setNetworkDomain(router.getDomain());
  resultObject.setGateway(router.getGateway());
  resultObject.setName(router.getHostName());
  resultObject.setPodId(router.getPodId());
  resultObject.setPrivateIp(router.getPrivateIpAddress());
  resultObject.setPrivateMacAddress(router.getPrivateMacAddress());
  resultObject.setPrivateNetMask(router.getPrivateNetmask());
  resultObject.setPublicIp(router.getPublicIpAddress());
  resultObject.setPublicMacAddress(router.getPublicMacAddress());
  resultObject.setPublicNetMask(router.getPrivateNetmask());
  resultObject.setGuestIp(router.getGuestIpAddress());
  resultObject.setGuestMacAddress(router.getGuestMacAddress());
  resultObject.setTemplateId(router.getTemplateId());
  resultObject.setCreated(router.getCreated());
  resultObject.setGuestNetmask(router.getGuestNetmask());
  if (router.getHostId() != null) {
    resultObject.setHostname(managementServer.getHostBy(router.getHostId()).getName());
    resultObject.setHostId(router.getHostId());
  }
  Account acct=managementServer.findAccountById(Long.valueOf(router.getAccountId()));
  if (acct != null) {
    resultObject.setAccount(acct.getAccountName());
    resultObject.setDomainId(acct.getDomainId());
  }
  if (router.getState() != null)   resultObject.setState(router.getState().toString());
  return resultObject;
}","public static RouterOperationResultObject composeResultObject(ManagementServer managementServer,VirtualRouter router){
  RouterOperationResultObject resultObject=new RouterOperationResultObject();
  resultObject.setId(router.getId());
  resultObject.setZoneId(router.getDataCenterId());
  resultObject.setZoneName(managementServer.findDataCenterById(router.getDataCenterId()).getName());
  resultObject.setDns1(router.getDns1());
  resultObject.setDns2(router.getDns2());
  resultObject.setNetworkDomain(router.getDomain());
  resultObject.setGateway(router.getGateway());
  resultObject.setName(router.getName());
  resultObject.setPodId(router.getPodId());
  resultObject.setPrivateIp(router.getPrivateIpAddress());
  resultObject.setPrivateMacAddress(router.getPrivateMacAddress());
  resultObject.setPrivateNetMask(router.getPrivateNetmask());
  resultObject.setPublicIp(router.getPublicIpAddress());
  resultObject.setPublicMacAddress(router.getPublicMacAddress());
  resultObject.setPublicNetMask(router.getPrivateNetmask());
  resultObject.setGuestIp(router.getGuestIpAddress());
  resultObject.setGuestMacAddress(router.getGuestMacAddress());
  resultObject.setTemplateId(router.getTemplateId());
  resultObject.setCreated(router.getCreated());
  resultObject.setGuestNetmask(router.getGuestNetmask());
  if (router.getHostId() != null) {
    resultObject.setHostname(managementServer.getHostBy(router.getHostId()).getName());
    resultObject.setHostId(router.getHostId());
  }
  Account acct=managementServer.findAccountById(Long.valueOf(router.getAccountId()));
  if (acct != null) {
    resultObject.setAccount(acct.getAccountName());
    resultObject.setDomainId(acct.getDomainId());
  }
  if (router.getState() != null)   resultObject.setState(router.getState().toString());
  return resultObject;
}"
89923,"private void processDisconnectAndTimeout(VMOperationListener listener,String resultMessage){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  EventVO event=new EventVO();
  event.setUserId(param.getUserId());
  event.setAccountId(vm.getAccountId());
  event.setType(EventTypes.EVENT_VM_STOP);
  event.setParameters(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getHostName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId());
  event.setDescription(""String_Node_Str"" + vm.getHostName() + ""String_Node_Str""+ resultMessage);
  event.setLevel(EventVO.LEVEL_ERROR);
  asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
  asyncMgr.getExecutorContext().getEventDao().persist(event);
  asyncMgr.releaseSyncSource(this);
}","private void processDisconnectAndTimeout(VMOperationListener listener,String resultMessage){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  EventVO event=new EventVO();
  event.setUserId(param.getUserId());
  event.setAccountId(vm.getAccountId());
  event.setType(EventTypes.EVENT_VM_STOP);
  event.setParameters(""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId());
  event.setDescription(""String_Node_Str"" + vm.getName() + ""String_Node_Str""+ resultMessage);
  event.setLevel(EventVO.LEVEL_ERROR);
  asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,0,resultMessage);
  asyncMgr.getExecutorContext().getEventDao().persist(event);
  asyncMgr.releaseSyncSource(this);
}"
89924,"public void processAnswer(VMOperationListener listener,long agentId,long seq,Answer answer){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  ManagementServer managementServer=asyncMgr.getExecutorContext().getManagementServer();
  String params=""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getHostName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId();
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ seq);
  boolean stopped=false;
  if (answer != null && answer.getResult())   stopped=true;
  boolean jobStatusUpdated=false;
  try {
    if (stopped) {
      asyncMgr.getExecutorContext().getVmMgr().completeStopCommand(param.getUserId(),vm,Event.OperationSucceeded,param.getEventId());
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,VMExecutorHelper.composeResultObject(asyncMgr.getExecutorContext().getManagementServer(),vm,null));
      jobStatusUpdated=true;
    }
 else {
      asyncMgr.getExecutorContext().getItMgr().stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
      jobStatusUpdated=true;
      EventUtils.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vm.getHostName(),params,param.getEventId());
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
    if (!jobStatusUpdated) {
      if (stopped) {
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,VMExecutorHelper.composeResultObject(asyncMgr.getExecutorContext().getManagementServer(),vm,null));
      }
 else {
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
        EventUtils.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vm.getHostName(),params,param.getEventId());
      }
    }
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}","public void processAnswer(VMOperationListener listener,long agentId,long seq,Answer answer){
  UserVmVO vm=listener.getVm();
  VMOperationParam param=listener.getParam();
  AsyncJobManager asyncMgr=getAsyncJobMgr();
  ManagementServer managementServer=asyncMgr.getExecutorContext().getManagementServer();
  String params=""String_Node_Str"" + vm.getId() + ""String_Node_Str""+ vm.getName()+ ""String_Node_Str""+ vm.getServiceOfferingId()+ ""String_Node_Str""+ vm.getTemplateId()+ ""String_Node_Str""+ vm.getDataCenterId();
  if (s_logger.isDebugEnabled())   s_logger.debug(""String_Node_Str"" + vm.getHostId() + ""String_Node_Str""+ seq);
  boolean stopped=false;
  if (answer != null && answer.getResult())   stopped=true;
  boolean jobStatusUpdated=false;
  try {
    if (stopped) {
      asyncMgr.getExecutorContext().getVmMgr().completeStopCommand(param.getUserId(),vm,Event.OperationSucceeded,param.getEventId());
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,VMExecutorHelper.composeResultObject(asyncMgr.getExecutorContext().getManagementServer(),vm,null));
      jobStatusUpdated=true;
    }
 else {
      asyncMgr.getExecutorContext().getItMgr().stateTransitTo(vm,Event.OperationFailed,vm.getHostId());
      asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
      jobStatusUpdated=true;
      EventUtils.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vm.getName(),params,param.getEventId());
    }
  }
 catch (  Exception e) {
    s_logger.error(""String_Node_Str"" + e.getMessage(),e);
    if (!jobStatusUpdated) {
      if (stopped) {
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_SUCCEEDED,0,VMExecutorHelper.composeResultObject(asyncMgr.getExecutorContext().getManagementServer(),vm,null));
      }
 else {
        asyncMgr.completeAsyncJob(getJob().getId(),AsyncJobResult.STATUS_FAILED,BaseCmd.INTERNAL_ERROR,""String_Node_Str"");
        EventUtils.saveEvent(param.getUserId(),param.getAccountId(),EventVO.LEVEL_ERROR,EventTypes.EVENT_VM_STOP,""String_Node_Str"" + vm.getName(),params,param.getEventId());
      }
    }
  }
 finally {
    asyncMgr.releaseSyncSource(this);
  }
}"
89925,"private Object composeResultObject(ManagementServer managementServer,VMInstanceVO vm){
  SystemVmOperationResultObject result=new SystemVmOperationResultObject();
  if (vm instanceof SecondaryStorageVmVO) {
    SecondaryStorageVmVO ssVm=(SecondaryStorageVmVO)vm;
    result.setId(ssVm.getId());
    result.setName(vm.getHostName());
    result.setZoneId(ssVm.getDataCenterId());
    result.setZoneName(managementServer.findDataCenterById(ssVm.getDataCenterId()).getName());
    result.setDns1(ssVm.getDns1());
    result.setDns2(ssVm.getDns2());
    result.setNetworkDomain(ssVm.getDomain());
    result.setGateway(ssVm.getGateway());
    result.setPodId(ssVm.getPodId());
    result.setHostId(ssVm.getHostId());
    if (ssVm.getHostId() != null)     result.setHostName(managementServer.getHostBy(ssVm.getHostId()).getName());
    result.setPrivateIp(ssVm.getPrivateIpAddress());
    result.setPrivateMac(ssVm.getPrivateMacAddress());
    result.setPrivateNetmask(ssVm.getPrivateNetmask());
    result.setPublicIp(ssVm.getPublicIpAddress());
    result.setPublicMac(ssVm.getPublicMacAddress());
    result.setPublicNetmask(ssVm.getPublicNetmask());
    result.setTemplateId(ssVm.getTemplateId());
    result.setCreated(ssVm.getCreated());
    result.setState(ssVm.getState().toString());
  }
  return result;
}","private Object composeResultObject(ManagementServer managementServer,VMInstanceVO vm){
  SystemVmOperationResultObject result=new SystemVmOperationResultObject();
  if (vm instanceof SecondaryStorageVmVO) {
    SecondaryStorageVmVO ssVm=(SecondaryStorageVmVO)vm;
    result.setId(ssVm.getId());
    result.setName(vm.getName());
    result.setZoneId(ssVm.getDataCenterId());
    result.setZoneName(managementServer.findDataCenterById(ssVm.getDataCenterId()).getName());
    result.setDns1(ssVm.getDns1());
    result.setDns2(ssVm.getDns2());
    result.setNetworkDomain(ssVm.getDomain());
    result.setGateway(ssVm.getGateway());
    result.setPodId(ssVm.getPodId());
    result.setHostId(ssVm.getHostId());
    if (ssVm.getHostId() != null)     result.setHostName(managementServer.getHostBy(ssVm.getHostId()).getName());
    result.setPrivateIp(ssVm.getPrivateIpAddress());
    result.setPrivateMac(ssVm.getPrivateMacAddress());
    result.setPrivateNetmask(ssVm.getPrivateNetmask());
    result.setPublicIp(ssVm.getPublicIpAddress());
    result.setPublicMac(ssVm.getPublicMacAddress());
    result.setPublicNetmask(ssVm.getPublicNetmask());
    result.setTemplateId(ssVm.getTemplateId());
    result.setCreated(ssVm.getCreated());
    result.setState(ssVm.getState().toString());
  }
  return result;
}"
89926,"public static VMOperationResultObject composeResultObject(ManagementServer managementServer,UserVmVO vm,String vmPassword){
  VMOperationResultObject resultObject=new VMOperationResultObject();
  resultObject.setId(vm.getId());
  resultObject.setName(vm.getHostName());
  resultObject.setCreated(vm.getCreated());
  resultObject.setZoneId(vm.getDataCenterId());
  resultObject.setZoneName(managementServer.findDataCenterById(vm.getDataCenterId()).getName());
  resultObject.setIpAddress(vm.getPrivateIpAddress());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setHaEnabled(vm.isHaEnabled());
  if (vm.getDisplayName() == null || vm.getDisplayName().length() == 0) {
    resultObject.setDisplayName(vm.getHostName());
  }
 else {
    resultObject.setDisplayName(vm.getDisplayName());
  }
  if (vm.getState() != null)   resultObject.setState(vm.getState().toString());
  VMTemplateVO template=managementServer.findTemplateById(vm.getTemplateId());
  Account acct=managementServer.findAccountById(Long.valueOf(vm.getAccountId()));
  if (acct != null) {
    resultObject.setAccount(acct.getAccountName());
    resultObject.setDomainId(acct.getDomainId());
  }
  if (BaseCmd.isAdmin(acct.getType()) && (vm.getHostId() != null)) {
    resultObject.setHostname(managementServer.getHostBy(vm.getHostId()).getName());
    resultObject.setHostid(vm.getHostId());
  }
  String templateName=""String_Node_Str"";
  boolean templatePasswordEnabled=false;
  String templateDisplayText=""String_Node_Str"";
  if (template != null) {
    templateName=template.getName();
    templatePasswordEnabled=template.getEnablePassword();
    templateDisplayText=template.getDisplayText();
    if (templateDisplayText == null) {
      templateDisplayText=templateName;
    }
  }
  resultObject.setTemplateId(vm.getTemplateId());
  resultObject.setTemplateName(templateName);
  resultObject.setTemplateDisplayText(templateDisplayText);
  resultObject.setPasswordEnabled(templatePasswordEnabled);
  if (templatePasswordEnabled)   resultObject.setPassword(vmPassword);
  String isoName=null;
  if (vm.getIsoId() != null) {
    VMTemplateVO iso=managementServer.findTemplateById(vm.getIsoId().longValue());
    if (iso != null) {
      isoName=iso.getName();
    }
  }
  resultObject.setIsoId(vm.getIsoId());
  resultObject.setIsoName(isoName);
  ServiceOfferingVO offering=managementServer.findServiceOfferingById(vm.getServiceOfferingId());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setServiceOfferingName(offering.getName());
  resultObject.setCpuNumber(String.valueOf(offering.getCpu()));
  resultObject.setCpuSpeed(String.valueOf(offering.getSpeed()));
  resultObject.setMemory(String.valueOf(offering.getRamSize()));
  return resultObject;
}","public static VMOperationResultObject composeResultObject(ManagementServer managementServer,UserVmVO vm,String vmPassword){
  VMOperationResultObject resultObject=new VMOperationResultObject();
  resultObject.setId(vm.getId());
  resultObject.setName(vm.getName());
  resultObject.setCreated(vm.getCreated());
  resultObject.setZoneId(vm.getDataCenterId());
  resultObject.setZoneName(managementServer.findDataCenterById(vm.getDataCenterId()).getName());
  resultObject.setIpAddress(vm.getPrivateIpAddress());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setHaEnabled(vm.isHaEnabled());
  if (vm.getDisplayName() == null || vm.getDisplayName().length() == 0) {
    resultObject.setDisplayName(vm.getName());
  }
 else {
    resultObject.setDisplayName(vm.getDisplayName());
  }
  if (vm.getState() != null)   resultObject.setState(vm.getState().toString());
  VMTemplateVO template=managementServer.findTemplateById(vm.getTemplateId());
  Account acct=managementServer.findAccountById(Long.valueOf(vm.getAccountId()));
  if (acct != null) {
    resultObject.setAccount(acct.getAccountName());
    resultObject.setDomainId(acct.getDomainId());
  }
  if (BaseCmd.isAdmin(acct.getType()) && (vm.getHostId() != null)) {
    resultObject.setHostname(managementServer.getHostBy(vm.getHostId()).getName());
    resultObject.setHostid(vm.getHostId());
  }
  String templateName=""String_Node_Str"";
  boolean templatePasswordEnabled=false;
  String templateDisplayText=""String_Node_Str"";
  if (template != null) {
    templateName=template.getName();
    templatePasswordEnabled=template.getEnablePassword();
    templateDisplayText=template.getDisplayText();
    if (templateDisplayText == null) {
      templateDisplayText=templateName;
    }
  }
  resultObject.setTemplateId(vm.getTemplateId());
  resultObject.setTemplateName(templateName);
  resultObject.setTemplateDisplayText(templateDisplayText);
  resultObject.setPasswordEnabled(templatePasswordEnabled);
  if (templatePasswordEnabled)   resultObject.setPassword(vmPassword);
  String isoName=null;
  if (vm.getIsoId() != null) {
    VMTemplateVO iso=managementServer.findTemplateById(vm.getIsoId().longValue());
    if (iso != null) {
      isoName=iso.getName();
    }
  }
  resultObject.setIsoId(vm.getIsoId());
  resultObject.setIsoName(isoName);
  ServiceOfferingVO offering=managementServer.findServiceOfferingById(vm.getServiceOfferingId());
  resultObject.setServiceOfferingId(vm.getServiceOfferingId());
  resultObject.setServiceOfferingName(offering.getName());
  resultObject.setCpuNumber(String.valueOf(offering.getCpu()));
  resultObject.setCpuSpeed(String.valueOf(offering.getSpeed()));
  resultObject.setMemory(String.valueOf(offering.getRamSize()));
  return resultObject;
}"
89927,"private AttachVolumeOperationResultObject composeAttachResultObject(UserVm instance,VolumeVO vol){
  AttachVolumeOperationResultObject resultObject=new AttachVolumeOperationResultObject();
  resultObject.setVmName(instance.getHostName());
  resultObject.setVmDisplayName(instance.getDisplayName());
  resultObject.setVirtualMachineId(instance.getId());
  resultObject.setVmState(instance.getState().toString());
  resultObject.setStorageType(""String_Node_Str"");
  resultObject.setVolumeId(vol.getId());
  resultObject.setVolumeName(vol.getName());
  return resultObject;
}","private AttachVolumeOperationResultObject composeAttachResultObject(UserVm instance,VolumeVO vol){
  AttachVolumeOperationResultObject resultObject=new AttachVolumeOperationResultObject();
  resultObject.setVmName(instance.getName());
  resultObject.setVmDisplayName(instance.getDisplayName());
  resultObject.setVirtualMachineId(instance.getId());
  resultObject.setVmState(instance.getState().toString());
  resultObject.setStorageType(""String_Node_Str"");
  resultObject.setVolumeId(vol.getId());
  resultObject.setVolumeName(vol.getName());
  return resultObject;
}"
89928,"public int getVncPort(VMInstanceVO vm){
  if (vm.getHostId() == null) {
    return -1;
  }
  GetVncPortAnswer answer=(GetVncPortAnswer)_agentMgr.easySend(vm.getHostId(),new GetVncPortCommand(vm.getId(),vm.getHostName()));
  return answer == null ? -1 : answer.getPort();
}","public int getVncPort(VMInstanceVO vm){
  if (vm.getHostId() == null) {
    return -1;
  }
  GetVncPortAnswer answer=(GetVncPortAnswer)_agentMgr.easySend(vm.getHostId(),new GetVncPortCommand(vm.getId(),vm.getName()));
  return answer == null ? -1 : answer.getPort();
}"
89929,"@Override @DB public SnapshotVO createSnapshotImpl(Long volumeId,Long policyId,Long snapshotId,Long startEventId) throws ResourceAllocationException {
  VolumeVO volume=_volsDao.acquireInLockTable(volumeId,10);
  if (volume == null) {
    volume=_volsDao.findById(volumeId);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  if (_volsDao.getHypervisorType(volume.getId()).equals(HypervisorType.KVM)) {
    StoragePoolVO storagePool=_storagePoolDao.findById(volume.getPoolId());
    ClusterVO cluster=_clusterDao.findById(storagePool.getClusterId());
    List<HostVO> hosts=_hostDao.listByCluster(cluster.getId());
    if (hosts != null && !hosts.isEmpty()) {
      HostVO host=hosts.get(0);
      _hostDao.loadDetails(host);
      String hostOS=host.getDetail(""String_Node_Str"");
      String hostOSVersion=host.getDetail(""String_Node_Str"");
      if (!(hostOS != null && hostOS.equalsIgnoreCase(""String_Node_Str"") && hostOSVersion != null && Integer.parseInt(hostOSVersion) >= 13)) {
        throw new CloudRuntimeException(""String_Node_Str"" + hostOS + ""String_Node_Str""+ hostOSVersion+ ""String_Node_Str"");
      }
    }
  }
  SnapshotVO snapshot=null;
  boolean backedUp=false;
  try {
    snapshot=createSnapshotOnPrimary(volume,policyId,snapshotId);
    if (snapshot != null && snapshot.getStatus() == Snapshot.Status.CreatedOnPrimary) {
      snapshotId=snapshot.getId();
      backedUp=backupSnapshotToSecondaryStorage(snapshot,startEventId);
      if (!backedUp) {
        throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"" + e.toString());
  }
 finally {
    postCreateSnapshot(volumeId,snapshotId,policyId,backedUp);
    _volsDao.releaseFromLockTable(volumeId);
  }
  return snapshot;
}","@Override @DB public SnapshotVO createSnapshotImpl(Long volumeId,Long policyId,Long snapshotId,Long startEventId) throws ResourceAllocationException {
  VolumeVO v=_volsDao.findById(volumeId);
  if (v != null && _volsDao.getHypervisorType(v.getId()).equals(HypervisorType.KVM)) {
    UserVmVO uservm=_vmDao.findById(v.getInstanceId());
    if (uservm != null) {
      UserVmVO vm=_vmDao.acquireInLockTable(uservm.getId(),10);
      if (vm == null) {
        throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
      }
    }
  }
  VolumeVO volume=_volsDao.acquireInLockTable(volumeId,10);
  if (volume == null) {
    volume=_volsDao.findById(volumeId);
    if (volume == null) {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
 else {
      throw new CloudRuntimeException(""String_Node_Str"" + volumeId + ""String_Node_Str"");
    }
  }
  if (_volsDao.getHypervisorType(volume.getId()).equals(HypervisorType.KVM)) {
    StoragePoolVO storagePool=_storagePoolDao.findById(volume.getPoolId());
    ClusterVO cluster=_clusterDao.findById(storagePool.getClusterId());
    List<HostVO> hosts=_hostDao.listByCluster(cluster.getId());
    if (hosts != null && !hosts.isEmpty()) {
      HostVO host=hosts.get(0);
      _hostDao.loadDetails(host);
      String hostOS=host.getDetail(""String_Node_Str"");
      String hostOSVersion=host.getDetail(""String_Node_Str"");
      if (!(hostOS != null && hostOS.equalsIgnoreCase(""String_Node_Str"") && hostOSVersion != null && Integer.parseInt(hostOSVersion) >= 13)) {
        throw new CloudRuntimeException(""String_Node_Str"" + hostOS + ""String_Node_Str""+ hostOSVersion+ ""String_Node_Str"");
      }
    }
  }
  SnapshotVO snapshot=null;
  boolean backedUp=false;
  try {
    snapshot=createSnapshotOnPrimary(volume,policyId,snapshotId);
    if (snapshot != null && snapshot.getStatus() == Snapshot.Status.CreatedOnPrimary) {
      snapshotId=snapshot.getId();
      backedUp=backupSnapshotToSecondaryStorage(snapshot,startEventId);
      if (!backedUp) {
        throw new CloudRuntimeException(""String_Node_Str"" + snapshotId + ""String_Node_Str"");
      }
    }
  }
 catch (  Exception e) {
    throw new CloudRuntimeException(""String_Node_Str"" + e.toString());
  }
 finally {
    postCreateSnapshot(volumeId,snapshotId,policyId,backedUp);
    _volsDao.releaseFromLockTable(volumeId);
  }
  return snapshot;
}"
89930,"protected VBD createVbd(Connection conn,VolumeTO volume,String vmName,VM vm) throws XmlRpcException, XenAPIException {
  VolumeType type=volume.getType();
  VDI vdi=mount(conn,vmName,volume);
  VBD.Record vbdr=new VBD.Record();
  vbdr.VM=vm;
  if (vdi != null)   vbdr.VDI=vdi;
 else {
    vbdr.empty=true;
  }
  if (type == VolumeType.ROOT) {
    vbdr.bootable=true;
  }
  vbdr.userdevice=Long.toString(volume.getDeviceId());
  if (volume.getType() == VolumeType.ISO) {
    vbdr.mode=Types.VbdMode.RO;
    vbdr.type=Types.VbdType.CD;
  }
 else {
    vbdr.mode=Types.VbdMode.RW;
    vbdr.type=Types.VbdType.DISK;
  }
  VBD vbd=VBD.create(conn,vbdr);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vbd.getUuid(conn) + ""String_Node_Str""+ volume);
  }
  return vbd;
}","protected VBD createVbd(Connection conn,VolumeTO volume,String vmName,VM vm,BootloaderType bootLoaderType) throws XmlRpcException, XenAPIException {
  VolumeType type=volume.getType();
  VDI vdi=mount(conn,vmName,volume);
  VBD.Record vbdr=new VBD.Record();
  vbdr.VM=vm;
  if (vdi != null)   vbdr.VDI=vdi;
 else {
    vbdr.empty=true;
  }
  if (type == VolumeType.ROOT && bootLoaderType == BootloaderType.PyGrub) {
    vbdr.bootable=true;
  }
 else   if (type == VolumeType.ISO && bootLoaderType == BootloaderType.CD) {
    vbdr.bootable=true;
  }
  vbdr.userdevice=Long.toString(volume.getDeviceId());
  if (volume.getType() == VolumeType.ISO) {
    vbdr.mode=Types.VbdMode.RO;
    vbdr.type=Types.VbdType.CD;
  }
 else {
    vbdr.mode=Types.VbdMode.RW;
    vbdr.type=Types.VbdType.DISK;
  }
  VBD vbd=VBD.create(conn,vbdr);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vbd.getUuid(conn) + ""String_Node_Str""+ volume);
  }
  return vbd;
}"
89931,"@Override public boolean finalizeDeployment(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile,DeployDestination dest,ReservationContext context){
  NicProfile controlNic=(NicProfile)profile.getParameter(""String_Node_Str"");
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  return true;
}","@Override public boolean finalizeDeployment(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile,DeployDestination dest,ReservationContext context){
  NicProfile controlNic=(NicProfile)profile.getParameter(""String_Node_Str"");
  cmds.addCommand(""String_Node_Str"",new CheckSshCommand(profile.getInstanceName(),controlNic.getIp4Address(),3922,5,20));
  DomainRouterVO router=profile.getVirtualMachine();
  List<NicVO> nics=_nicDao.listBy(router.getId());
  for (  NicVO nic : nics) {
    NetworkVO network=_networkDao.findById(nic.getNetworkId());
    if (network.getTrafficType() == TrafficType.Public) {
      router.setPublicIpAddress(nic.getIp4Address());
      router.setPublicNetmask(nic.getNetmask());
      router.setPublicMacAddress(nic.getMacAddress());
    }
 else     if (network.getTrafficType() == TrafficType.Guest) {
      router.setGuestIpAddress(nic.getIp4Address());
      router.setGuestMacAddress(nic.getMacAddress());
    }
 else     if (network.getTrafficType() == TrafficType.Control) {
      router.setPrivateIpAddress(nic.getIp4Address());
      router.setPrivateNetmask(nic.getNetmask());
      router.setPrivateMacAddress(nic.getMacAddress());
    }
  }
  final List<IPAddressVO> ipAddrs=_networkMgr.listPublicIpAddressesInVirtualNetwork(router.getAccountId(),router.getDataCenterId(),null);
  final List<String> ipAddrList=new ArrayList<String>();
  for (  final IPAddressVO ipVO : ipAddrs) {
    ipAddrList.add(ipVO.getAddress());
  }
  if (!ipAddrList.isEmpty()) {
    _networkMgr.getAssociateIPCommands(router,ipAddrList,true,0,cmds);
  }
  return true;
}"
89932,"@Override public boolean finalizeStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile,DeployDestination dest,ReservationContext context){
  CheckSshAnswer answer=(CheckSshAnswer)cmds.getAnswer(""String_Node_Str"");
  if (!answer.getResult()) {
    s_logger.warn(""String_Node_Str"" + answer.getDetails());
    return false;
  }
  DomainRouterVO router=profile.getVirtualMachine();
  List<NicVO> nics=_nicDao.listBy(router.getId());
  for (  NicVO nic : nics) {
    NetworkVO network=_networkDao.findById(nic.getNetworkId());
    if (network.getTrafficType() == TrafficType.Public) {
      router.setPublicIpAddress(nic.getIp4Address());
      router.setPublicNetmask(nic.getNetmask());
      router.setPublicMacAddress(nic.getMacAddress());
    }
 else     if (network.getTrafficType() == TrafficType.Guest) {
      router.setGuestIpAddress(nic.getIp4Address());
      router.setGuestMacAddress(nic.getMacAddress());
    }
 else     if (network.getTrafficType() == TrafficType.Control) {
      router.setPrivateIpAddress(nic.getIp4Address());
      router.setPrivateNetmask(nic.getNetmask());
      router.setPrivateMacAddress(nic.getMacAddress());
    }
  }
  return true;
}","@Override public boolean finalizeStart(Commands cmds,VirtualMachineProfile<DomainRouterVO> profile,DeployDestination dest,ReservationContext context){
  CheckSshAnswer answer=(CheckSshAnswer)cmds.getAnswer(""String_Node_Str"");
  if (!answer.getResult()) {
    s_logger.warn(""String_Node_Str"" + answer.getDetails());
    return false;
  }
  return true;
}"
89933,"@Override public VirtualMachineTemplate registerTemplate(RegisterTemplateCmd cmd) throws URISyntaxException, ResourceAllocationException {
  Account ctxAccount=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  String name=cmd.getTemplateName();
  String displayText=cmd.getDisplayText();
  Integer bits=cmd.getBits();
  Boolean passwordEnabled=cmd.isPasswordEnabled();
  Boolean requiresHVM=cmd.getRequiresHvm();
  String url=cmd.getUrl();
  Boolean isPublic=cmd.isPublic();
  Boolean featured=cmd.isFeatured();
  Boolean isExtractable=cmd.isExtractable();
  String format=cmd.getFormat();
  Long guestOSId=cmd.getOsTypeId();
  Long zoneId=cmd.getZoneId();
  HypervisorType hypervisorType=HypervisorType.getType(cmd.getHypervisor());
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account resourceAccount=null;
  Long accountId=null;
  if (bits == null) {
    bits=Integer.valueOf(64);
  }
  if (passwordEnabled == null) {
    passwordEnabled=false;
  }
  if (requiresHVM == null) {
    requiresHVM=true;
  }
  if (isPublic == null) {
    isPublic=Boolean.FALSE;
  }
  if (isExtractable == null) {
    isExtractable=Boolean.TRUE;
  }
  if (zoneId.longValue() == -1) {
    zoneId=null;
  }
  if ((accountName == null) ^ (domainId == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((ctxAccount == null) || isAdmin(ctxAccount.getType())) {
    if (domainId != null) {
      if ((ctxAccount != null) && !_domainDao.isChildDomain(ctxAccount.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        resourceAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (resourceAccount == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=resourceAccount.getId();
      }
    }
 else {
      accountId=((ctxAccount != null) ? ctxAccount.getId() : null);
    }
  }
 else {
    accountId=ctxAccount.getId();
  }
  if (null == accountId && null == accountName && null == domainId && null == ctxAccount) {
    accountId=1L;
  }
  if (null == accountId) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  boolean isAdmin=_accountDao.findById(accountId).getType() == Account.ACCOUNT_TYPE_ADMIN;
  if (!isAdmin && zoneId == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if (url.toLowerCase().contains(""String_Node_Str"")) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if ((!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str""))&& (!url.toLowerCase().endsWith(""String_Node_Str"") && (!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str""))&& (!url.toLowerCase().endsWith(""String_Node_Str""))&& (!url.toLowerCase().endsWith(""String_Node_Str"")))) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + format.toLowerCase());
  }
  boolean allowPublicUserTemplates=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  if (!isAdmin && !allowPublicUserTemplates && isPublic) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if (!isAdmin || featured == null) {
    featured=Boolean.FALSE;
  }
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  return createTemplateOrIso(userId,accountId,zoneId,name,displayText,isPublic,featured,isExtractable,format,""String_Node_Str"",url,null,requiresHVM,bits,passwordEnabled,guestOSId,true,hypervisorType);
}","@Override public VirtualMachineTemplate registerTemplate(RegisterTemplateCmd cmd) throws URISyntaxException, ResourceAllocationException {
  Account ctxAccount=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  String name=cmd.getTemplateName();
  String displayText=cmd.getDisplayText();
  Integer bits=cmd.getBits();
  Boolean passwordEnabled=cmd.isPasswordEnabled();
  Boolean requiresHVM=cmd.getRequiresHvm();
  String url=cmd.getUrl();
  Boolean isPublic=cmd.isPublic();
  Boolean featured=cmd.isFeatured();
  Boolean isExtractable=cmd.isExtractable();
  String format=cmd.getFormat();
  Long guestOSId=cmd.getOsTypeId();
  Long zoneId=cmd.getZoneId();
  HypervisorType hypervisorType=HypervisorType.getType(cmd.getHypervisor());
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account resourceAccount=null;
  Long accountId=null;
  if (bits == null) {
    bits=Integer.valueOf(64);
  }
  if (passwordEnabled == null) {
    passwordEnabled=false;
  }
  if (requiresHVM == null) {
    requiresHVM=true;
  }
  if (isPublic == null) {
    isPublic=Boolean.FALSE;
  }
  if (isExtractable == null) {
    isExtractable=Boolean.TRUE;
  }
  if (zoneId.longValue() == -1) {
    zoneId=null;
  }
  if ((accountName == null) ^ (domainId == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((ctxAccount == null) || isAdmin(ctxAccount.getType())) {
    if (domainId != null) {
      if ((ctxAccount != null) && !_domainDao.isChildDomain(ctxAccount.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        resourceAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (resourceAccount == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=resourceAccount.getId();
      }
    }
 else {
      accountId=((ctxAccount != null) ? ctxAccount.getId() : null);
    }
  }
 else {
    accountId=ctxAccount.getId();
  }
  if (null == accountId && null == accountName && null == domainId && null == ctxAccount) {
    accountId=1L;
  }
  if (null == accountId) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  boolean isAdmin=_accountDao.findById(accountId).getType() == Account.ACCOUNT_TYPE_ADMIN;
  if (!isAdmin && zoneId == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if (url.toLowerCase().contains(""String_Node_Str"")) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if ((!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str""))&& (!url.toLowerCase().endsWith(""String_Node_Str"") && (!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str""))&& (!url.toLowerCase().endsWith(""String_Node_Str""))&& (!url.toLowerCase().endsWith(""String_Node_Str"")))) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"" + format.toLowerCase());
  }
  boolean allowPublicUserTemplates=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  if (!isAdmin && !allowPublicUserTemplates && isPublic) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if (!isAdmin || featured == null) {
    featured=Boolean.FALSE;
  }
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  return createTemplateOrIso(userId,accountId,zoneId,name,displayText,isPublic,featured,isExtractable,format,TemplateType.USER,url,null,requiresHVM,bits,passwordEnabled,guestOSId,true,hypervisorType);
}"
89934,"@Override public VirtualMachineTemplate registerIso(RegisterIsoCmd cmd) throws ResourceAllocationException {
  Account ctxAccount=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  String name=cmd.getIsoName();
  String displayText=cmd.getDisplayText();
  String url=cmd.getUrl();
  Boolean isPublic=cmd.isPublic();
  Boolean featured=cmd.isFeatured();
  Long guestOSId=cmd.getOsTypeId();
  Boolean bootable=cmd.isBootable();
  Long zoneId=cmd.getZoneId();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account resourceAccount=null;
  Long accountId=null;
  if (isPublic == null) {
    isPublic=Boolean.FALSE;
  }
  if (zoneId.longValue() == -1) {
    zoneId=null;
  }
  if ((accountName == null) ^ (domainId == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((ctxAccount == null) || isAdmin(ctxAccount.getType())) {
    if (domainId != null) {
      if ((ctxAccount != null) && !_domainDao.isChildDomain(ctxAccount.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        resourceAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (resourceAccount == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=resourceAccount.getId();
      }
    }
 else {
      accountId=((ctxAccount != null) ? ctxAccount.getId() : null);
    }
  }
 else {
    accountId=ctxAccount.getId();
  }
  if (null == accountId && null == accountName && null == domainId && null == ctxAccount) {
    accountId=1L;
  }
  if (accountId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  boolean isAdmin=_accountDao.findById(accountId).getType() == Account.ACCOUNT_TYPE_ADMIN;
  if (!isAdmin && zoneId == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if ((!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str""))&& (!url.toLowerCase().endsWith(""String_Node_Str""))) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  boolean allowPublicUserTemplates=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  if (!isAdmin && !allowPublicUserTemplates && isPublic) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if (!isAdmin || featured == null) {
    featured=Boolean.FALSE;
  }
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  if (bootable == null) {
    bootable=Boolean.TRUE;
  }
  if (url.toLowerCase().contains(""String_Node_Str"")) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  return createTemplateOrIso(userId,accountId,zoneId,name,displayText,isPublic.booleanValue(),featured.booleanValue(),true,ImageFormat.ISO.toString(),null,url,null,true,64,false,guestOSId,bootable,HypervisorType.None);
}","@Override public VirtualMachineTemplate registerIso(RegisterIsoCmd cmd) throws ResourceAllocationException {
  Account ctxAccount=UserContext.current().getAccount();
  Long userId=UserContext.current().getUserId();
  String name=cmd.getIsoName();
  String displayText=cmd.getDisplayText();
  String url=cmd.getUrl();
  Boolean isPublic=cmd.isPublic();
  Boolean featured=cmd.isFeatured();
  Long guestOSId=cmd.getOsTypeId();
  Boolean bootable=cmd.isBootable();
  Long zoneId=cmd.getZoneId();
  String accountName=cmd.getAccountName();
  Long domainId=cmd.getDomainId();
  Account resourceAccount=null;
  Long accountId=null;
  if (isPublic == null) {
    isPublic=Boolean.FALSE;
  }
  if (zoneId.longValue() == -1) {
    zoneId=null;
  }
  if ((accountName == null) ^ (domainId == null)) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  if ((ctxAccount == null) || isAdmin(ctxAccount.getType())) {
    if (domainId != null) {
      if ((ctxAccount != null) && !_domainDao.isChildDomain(ctxAccount.getDomainId(),domainId)) {
        throw new PermissionDeniedException(""String_Node_Str"" + domainId + ""String_Node_Str"");
      }
      if (accountName != null) {
        resourceAccount=_accountDao.findActiveAccount(accountName,domainId);
        if (resourceAccount == null) {
          throw new InvalidParameterValueException(""String_Node_Str"" + accountName + ""String_Node_Str""+ domainId);
        }
        accountId=resourceAccount.getId();
      }
    }
 else {
      accountId=((ctxAccount != null) ? ctxAccount.getId() : null);
    }
  }
 else {
    accountId=ctxAccount.getId();
  }
  if (null == accountId && null == accountName && null == domainId && null == ctxAccount) {
    accountId=1L;
  }
  if (accountId == null) {
    throw new InvalidParameterValueException(""String_Node_Str"");
  }
  boolean isAdmin=_accountDao.findById(accountId).getType() == Account.ACCOUNT_TYPE_ADMIN;
  if (!isAdmin && zoneId == null) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if ((!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str"")) && (!url.toLowerCase().endsWith(""String_Node_Str""))&& (!url.toLowerCase().endsWith(""String_Node_Str""))) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  boolean allowPublicUserTemplates=Boolean.parseBoolean(_configDao.getValue(""String_Node_Str""));
  if (!isAdmin && !allowPublicUserTemplates && isPublic) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  if (!isAdmin || featured == null) {
    featured=Boolean.FALSE;
  }
  if (userId == null) {
    userId=Long.valueOf(1);
  }
  if (bootable == null) {
    bootable=Boolean.TRUE;
  }
  if (url.toLowerCase().contains(""String_Node_Str"")) {
    throw new ServerApiException(BaseCmd.PARAM_ERROR,""String_Node_Str"");
  }
  return createTemplateOrIso(userId,accountId,zoneId,name,displayText,isPublic.booleanValue(),featured.booleanValue(),true,ImageFormat.ISO.toString(),TemplateType.USER,url,null,true,64,false,guestOSId,bootable,HypervisorType.None);
}"
89935,"private VMTemplateVO createTemplateOrIso(long userId,Long accountId,Long zoneId,String name,String displayText,boolean isPublic,boolean featured,boolean isExtractable,String format,String diskType,String url,String chksum,boolean requiresHvm,int bits,boolean enablePassword,long guestOSId,boolean bootable,HypervisorType hypervisorType) throws IllegalArgumentException, ResourceAllocationException {
  try {
    if (name.length() > 32) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    ImageFormat imgfmt=ImageFormat.valueOf(format.toUpperCase());
    if (imgfmt == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + format + ""String_Node_Str""+ EnumUtils.listValues(ImageFormat.values()));
    }
    URI uri=new URI(url);
    if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase(""String_Node_Str"") && !uri.getScheme().equalsIgnoreCase(""String_Node_Str"") && !uri.getScheme().equalsIgnoreCase(""String_Node_Str""))) {
      throw new IllegalArgumentException(""String_Node_Str"" + url);
    }
    int port=uri.getPort();
    if (!(port == 80 || port == 443 || port == -1)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    String host=uri.getHost();
    try {
      InetAddress hostAddr=InetAddress.getByName(host);
      if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      if (hostAddr instanceof Inet6Address) {
        throw new IllegalArgumentException(""String_Node_Str"" + hostAddr.getHostAddress() + ""String_Node_Str"");
      }
    }
 catch (    UnknownHostException uhe) {
      throw new IllegalArgumentException(""String_Node_Str"" + host);
    }
    UserVO user=_userDao.findById(userId);
    if (user == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + userId);
    }
    AccountVO account=_accountDao.findById(accountId);
    if (_accountMgr.resourceLimitExceeded(account,ResourceType.template)) {
      ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
      rae.setResourceType(""String_Node_Str"");
      throw rae;
    }
    if (zoneId != null) {
      if (_dcDao.findById(zoneId) == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
    VMTemplateVO systemvmTmplt=_tmpltDao.findRoutingTemplate();
    if (systemvmTmplt.getName().equalsIgnoreCase(name) || systemvmTmplt.getDisplayText().equalsIgnoreCase(displayText)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    return create(userId,accountId,zoneId,name,displayText,isPublic,featured,isExtractable,imgfmt,null,uri,chksum,requiresHvm,bits,enablePassword,guestOSId,bootable,hypervisorType);
  }
 catch (  URISyntaxException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + url);
  }
}","private VMTemplateVO createTemplateOrIso(long userId,Long accountId,Long zoneId,String name,String displayText,boolean isPublic,boolean featured,boolean isExtractable,String format,TemplateType diskType,String url,String chksum,boolean requiresHvm,int bits,boolean enablePassword,long guestOSId,boolean bootable,HypervisorType hypervisorType) throws IllegalArgumentException, ResourceAllocationException {
  try {
    if (name.length() > 32) {
      throw new InvalidParameterValueException(""String_Node_Str"");
    }
    ImageFormat imgfmt=ImageFormat.valueOf(format.toUpperCase());
    if (imgfmt == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + format + ""String_Node_Str""+ EnumUtils.listValues(ImageFormat.values()));
    }
    URI uri=new URI(url);
    if ((uri.getScheme() == null) || (!uri.getScheme().equalsIgnoreCase(""String_Node_Str"") && !uri.getScheme().equalsIgnoreCase(""String_Node_Str"") && !uri.getScheme().equalsIgnoreCase(""String_Node_Str""))) {
      throw new IllegalArgumentException(""String_Node_Str"" + url);
    }
    int port=uri.getPort();
    if (!(port == 80 || port == 443 || port == -1)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    String host=uri.getHost();
    try {
      InetAddress hostAddr=InetAddress.getByName(host);
      if (hostAddr.isAnyLocalAddress() || hostAddr.isLinkLocalAddress() || hostAddr.isLoopbackAddress()|| hostAddr.isMulticastAddress()) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      if (hostAddr instanceof Inet6Address) {
        throw new IllegalArgumentException(""String_Node_Str"" + hostAddr.getHostAddress() + ""String_Node_Str"");
      }
    }
 catch (    UnknownHostException uhe) {
      throw new IllegalArgumentException(""String_Node_Str"" + host);
    }
    UserVO user=_userDao.findById(userId);
    if (user == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + userId);
    }
    AccountVO account=_accountDao.findById(accountId);
    if (_accountMgr.resourceLimitExceeded(account,ResourceType.template)) {
      ResourceAllocationException rae=new ResourceAllocationException(""String_Node_Str"" + account.getAccountName() + ""String_Node_Str"");
      rae.setResourceType(""String_Node_Str"");
      throw rae;
    }
    if (zoneId != null) {
      if (_dcDao.findById(zoneId) == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
    }
    VMTemplateVO systemvmTmplt=_tmpltDao.findRoutingTemplate();
    if (systemvmTmplt.getName().equalsIgnoreCase(name) || systemvmTmplt.getDisplayText().equalsIgnoreCase(displayText)) {
      throw new IllegalArgumentException(""String_Node_Str"");
    }
    return create(userId,accountId,zoneId,name,displayText,isPublic,featured,isExtractable,imgfmt,diskType,uri,chksum,requiresHvm,bits,enablePassword,guestOSId,bootable,hypervisorType);
  }
 catch (  URISyntaxException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + url);
  }
}"
89936,"public VolumeTO(Volume volume,StoragePool pool){
  this.id=volume.getId();
  this.name=volume.getName();
  this.path=volume.getPath();
  this.size=volume.getSize();
  this.type=volume.getVolumeType();
  this.resourceType=volume.getStorageResourceType();
  this.storagePoolType=pool.getPoolType();
  this.storagePoolUuid=pool.getUuid();
  this.mountPoint=volume.getFolder();
  this.chainInfo=volume.getChainInfo();
}","public VolumeTO(Volume volume,StoragePool pool){
  this.id=volume.getId();
  this.name=volume.getName();
  this.path=volume.getPath();
  this.size=volume.getSize();
  this.type=volume.getVolumeType();
  this.resourceType=volume.getStorageResourceType();
  this.storagePoolType=pool.getPoolType();
  this.storagePoolUuid=pool.getUuid();
  this.mountPoint=volume.getFolder();
  this.chainInfo=volume.getChainInfo();
  this.deviceId=volume.getDeviceId().intValue();
}"
89937,"public String getHypervisor(){
  return hypervisor;
}","public HypervisorType getHypervisor(){
  return HypervisorType.getType(hypervisor);
}"
89938,"protected VBD createVbd(Connection conn,VolumeTO volume,String vmName,VM vm) throws XmlRpcException, XenAPIException {
  VolumeType type=volume.getType();
  VDI vdi=mount(conn,vmName,volume);
  VBD.Record vbdr=new VBD.Record();
  vbdr.VM=vm;
  vbdr.VDI=vdi;
  if (type == VolumeType.ROOT) {
    vbdr.bootable=true;
  }
  vbdr.userdevice=Long.toString(volume.getDeviceId());
  if (volume.getType() == VolumeType.ISO) {
    vbdr.mode=Types.VbdMode.RO;
    vbdr.type=Types.VbdType.CD;
  }
 else {
    vbdr.mode=Types.VbdMode.RW;
    vbdr.type=Types.VbdType.DISK;
  }
  VBD vbd=VBD.create(conn,vbdr);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vbd.getUuid(conn) + ""String_Node_Str""+ volume);
  }
  return vbd;
}","protected VBD createVbd(Connection conn,VolumeTO volume,String vmName,VM vm) throws XmlRpcException, XenAPIException {
  VolumeType type=volume.getType();
  VDI vdi=mount(conn,vmName,volume);
  VBD.Record vbdr=new VBD.Record();
  vbdr.VM=vm;
  if (vdi != null)   vbdr.VDI=vdi;
 else {
    vbdr.empty=true;
  }
  if (type == VolumeType.ROOT) {
    vbdr.bootable=true;
  }
  vbdr.userdevice=Long.toString(volume.getDeviceId());
  if (volume.getType() == VolumeType.ISO) {
    vbdr.mode=Types.VbdMode.RO;
    vbdr.type=Types.VbdType.CD;
  }
 else {
    vbdr.mode=Types.VbdMode.RW;
    vbdr.type=Types.VbdType.DISK;
  }
  VBD vbd=VBD.create(conn,vbdr);
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vbd.getUuid(conn) + ""String_Node_Str""+ volume);
  }
  return vbd;
}"
89939,"protected Map<String,Object> createProxyInstance2(long dataCenterId) throws ConcurrentOperationException {
  long id=_consoleProxyDao.getNextInSequence(Long.class,""String_Node_Str"");
  String name=VirtualMachineName.getConsoleProxyName(id,_instance);
  DataCenterVO dc=_dcDao.findById(dataCenterId);
  Account systemAcct=_accountMgr.getSystemAccount();
  DataCenterDeployment plan=new DataCenterDeployment(dataCenterId);
  List<NetworkOfferingVO> defaultOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemVmPublicNetwork);
  List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemVmControlNetwork,NetworkOfferingVO.SystemVmManagementNetwork);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(offerings.size() + 1);
  NicProfile defaultNic=new NicProfile();
  defaultNic.setDefaultNic(true);
  defaultNic.setDeviceId(2);
  networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,defaultOffering.get(0),plan,null,null,false).get(0),defaultNic));
  for (  NetworkOfferingVO offering : offerings) {
    networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,offering,plan,null,null,false).get(0),null));
  }
  ConsoleProxyVO proxy=new ConsoleProxyVO(id,_serviceOffering.getId(),name,_template.getId(),_template.getGuestOSId(),dataCenterId,systemAcct.getDomainId(),systemAcct.getId(),0);
  try {
    proxy=_itMgr.allocate(proxy,_template,_serviceOffering,networks,plan,systemAcct);
  }
 catch (  InsufficientCapacityException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
catch (  StorageUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  Map<String,Object> context=new HashMap<String,Object>();
  context.put(""String_Node_Str"",dc);
  HostPodVO pod=_podDao.findById(proxy.getPodId());
  context.put(""String_Node_Str"",pod);
  context.put(""String_Node_Str"",proxy.getId());
  return context;
}","protected Map<String,Object> createProxyInstance2(long dataCenterId) throws ConcurrentOperationException {
  long id=_consoleProxyDao.getNextInSequence(Long.class,""String_Node_Str"");
  String name=VirtualMachineName.getConsoleProxyName(id,_instance);
  DataCenterVO dc=_dcDao.findById(dataCenterId);
  Account systemAcct=_accountMgr.getSystemAccount();
  DataCenterDeployment plan=new DataCenterDeployment(dataCenterId);
  List<NetworkOfferingVO> defaultOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemVmPublicNetwork);
  List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemVmControlNetwork,NetworkOfferingVO.SystemVmManagementNetwork);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(offerings.size() + 1);
  NicProfile defaultNic=new NicProfile();
  defaultNic.setDefaultNic(true);
  defaultNic.setDeviceId(2);
  networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,defaultOffering.get(0),plan,null,null,false).get(0),defaultNic));
  for (  NetworkOfferingVO offering : offerings) {
    networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,offering,plan,null,null,false).get(0),null));
  }
  ConsoleProxyVO proxy=new ConsoleProxyVO(id,_serviceOffering.getId(),name,_template.getId(),_template.getGuestOSId(),dataCenterId,systemAcct.getDomainId(),systemAcct.getId(),0);
  try {
    proxy=_itMgr.allocate(proxy,_template,_serviceOffering,networks,plan,null,systemAcct);
  }
 catch (  InsufficientCapacityException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
catch (  StorageUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  Map<String,Object> context=new HashMap<String,Object>();
  context.put(""String_Node_Str"",dc);
  HostPodVO pod=_podDao.findById(proxy.getPodId());
  context.put(""String_Node_Str"",pod);
  context.put(""String_Node_Str"",proxy.getId());
  return context;
}"
89940,"public ConsoleProxyVO start2(long proxyVmId,long startEventId) throws ResourceUnavailableException, InsufficientCapacityException {
  if (!_useNewNetworking) {
    return start(proxyVmId,startEventId);
  }
  ConsoleProxyVO proxy=_consoleProxyDao.findById(proxyVmId);
  Account systemAcct=_accountMgr.getSystemAccount();
  User systemUser=_accountMgr.getSystemUser();
  return _itMgr.start(proxy,null,systemUser,systemAcct);
}","public ConsoleProxyVO start2(long proxyVmId,long startEventId) throws ResourceUnavailableException, InsufficientCapacityException {
  if (!_useNewNetworking) {
    return start(proxyVmId,startEventId);
  }
  ConsoleProxyVO proxy=_consoleProxyDao.findById(proxyVmId);
  Account systemAcct=_accountMgr.getSystemAccount();
  User systemUser=_accountMgr.getSystemUser();
  return _itMgr.start(proxy,null,systemUser,systemAcct,null);
}"
89941,"@Override public <T extends VirtualMachine>VirtualMachineTO implement(VirtualMachineProfile<T> vm){
  VirtualMachineTemplate template=vm.getTemplate();
  BootloaderType bt=BootloaderType.PyGrub;
  if (template.getFormat() == Storage.ImageFormat.ISO || template.isRequiresHvm()) {
    bt=BootloaderType.HVM;
  }
  VirtualMachineTO to=toVirtualMachineTO(vm);
  to.setBootloader(bt);
  GuestOSVO guestOS=_guestOsDao.findById(vm.getVirtualMachine().getGuestOSId());
  to.setOs(guestOS.getDisplayName());
  return to;
}","@Override public <T extends VirtualMachine>VirtualMachineTO implement(VirtualMachineProfile<T> vm){
  BootloaderType bt=BootloaderType.PyGrub;
  if (vm.getBootLoaderType() != null) {
    bt=vm.getBootLoaderType();
  }
  VirtualMachineTO to=toVirtualMachineTO(vm);
  to.setBootloader(bt);
  GuestOSVO guestOS=_guestOsDao.findById(vm.getVirtualMachine().getGuestOSId());
  to.setOs(guestOS.getDisplayName());
  return to;
}"
89942,"public DomainRouterVO start(DomainRouterVO router,User user,Account caller) throws StorageUnavailableException, InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  return _itMgr.start(router,null,user,caller);
}","public DomainRouterVO start(DomainRouterVO router,User user,Account caller) throws StorageUnavailableException, InsufficientCapacityException, ConcurrentOperationException, ResourceUnavailableException {
  return _itMgr.start(router,null,user,caller,null);
}"
89943,"@Override public void prepare(VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest) throws StorageUnavailableException, InsufficientStorageCapacityException {
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  List<VolumeVO> recreateVols=new ArrayList<VolumeVO>(vols.size());
  int i=0;
  for (  VolumeVO vol : vols) {
    Volume.State state=vol.getState();
    if (state == Volume.State.Ready) {
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      if (pool.getRemoved() != null || pool.isInMaintenance()) {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ pool+ ""String_Node_Str"");
          }
          recreateVols.add(vol);
        }
 else {
          throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",pool);
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
        }
        vm.addDisk(new VolumeTO(vol,pool));
      }
    }
 else     if (state == Volume.State.Allocated) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
      }
      recreateVols.add(vol);
    }
 else {
      throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",vol);
    }
  }
  for (  VolumeVO vol : recreateVols) {
    VolumeVO newVol;
    if (vol.getState() == Volume.State.Allocated) {
      newVol=vol;
    }
 else {
      newVol=switchVolume(vol);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ vol);
      }
    }
    try {
      _volsDao.update(newVol,Volume.Event.Create);
    }
 catch (    ConcurrentOperationException e) {
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol);
    }
    Pair<VolumeTO,StoragePool> created=createVolume(newVol,_diskOfferingDao.findById(newVol.getDiskOfferingId()),vm,vols,dest);
    if (created == null) {
      newVol.setPoolId(null);
      try {
        _volsDao.update(newVol,Volume.Event.OperationFailed);
      }
 catch (      ConcurrentOperationException e) {
        throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
      }
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol);
    }
    newVol.setStatus(AsyncInstanceCreateStatus.Created);
    newVol.setFolder(created.second().getPath());
    newVol.setPath(created.first().getPath());
    newVol.setSize(created.first().getSize());
    newVol.setPoolType(created.second().getPoolType());
    newVol.setPodId(created.second().getPodId());
    try {
      _volsDao.update(newVol,Volume.Event.OperationSucceeded);
    }
 catch (    ConcurrentOperationException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ created.second());
    }
    vm.addDisk(created.first());
  }
}","@Override public void prepare(VirtualMachineProfile<? extends VirtualMachine> vm,DeployDestination dest) throws StorageUnavailableException, InsufficientStorageCapacityException {
  List<VolumeVO> vols=_volsDao.findUsableVolumesForInstance(vm.getId());
  if (s_logger.isDebugEnabled()) {
    s_logger.debug(""String_Node_Str"" + vols.size() + ""String_Node_Str""+ vm);
  }
  List<VolumeVO> recreateVols=new ArrayList<VolumeVO>(vols.size());
  int i=0;
  for (  VolumeVO vol : vols) {
    Volume.State state=vol.getState();
    if (state == Volume.State.Ready) {
      StoragePoolVO pool=_storagePoolDao.findById(vol.getPoolId());
      if (pool.getRemoved() != null || pool.isInMaintenance()) {
        if (vol.isRecreatable()) {
          if (s_logger.isDebugEnabled()) {
            s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str""+ pool+ ""String_Node_Str"");
          }
          recreateVols.add(vol);
        }
 else {
          throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",pool);
        }
      }
 else {
        if (s_logger.isDebugEnabled()) {
          s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
        }
        vm.addDisk(new VolumeTO(vol,pool));
      }
    }
 else     if (state == Volume.State.Allocated) {
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + vol + ""String_Node_Str"");
      }
      recreateVols.add(vol);
    }
 else {
      throw new StorageUnavailableException(""String_Node_Str"" + vol + ""String_Node_Str"",vol);
    }
  }
  for (  VolumeVO vol : recreateVols) {
    VolumeVO newVol;
    if (vol.getState() == Volume.State.Allocated) {
      newVol=vol;
    }
 else {
      newVol=switchVolume(vol);
      if (s_logger.isDebugEnabled()) {
        s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ vol);
      }
    }
    try {
      _volsDao.update(newVol,Volume.Event.Create);
    }
 catch (    ConcurrentOperationException e) {
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol);
    }
    Pair<VolumeTO,StoragePool> created=createVolume(newVol,_diskOfferingDao.findById(newVol.getDiskOfferingId()),vm,vols,dest);
    if (created == null) {
      newVol.setPoolId(null);
      try {
        _volsDao.update(newVol,Volume.Event.OperationFailed);
      }
 catch (      ConcurrentOperationException e) {
        throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
      }
      throw new StorageUnavailableException(""String_Node_Str"" + newVol,newVol);
    }
    created.first().setDeviceId(newVol.getDeviceId().intValue());
    newVol.setStatus(AsyncInstanceCreateStatus.Created);
    newVol.setFolder(created.second().getPath());
    newVol.setPath(created.first().getPath());
    newVol.setSize(created.first().getSize());
    newVol.setPoolType(created.second().getPoolType());
    newVol.setPodId(created.second().getPodId());
    try {
      _volsDao.update(newVol,Volume.Event.OperationSucceeded);
    }
 catch (    ConcurrentOperationException e) {
      throw new CloudRuntimeException(""String_Node_Str"" + newVol,e);
    }
    if (s_logger.isDebugEnabled()) {
      s_logger.debug(""String_Node_Str"" + newVol + ""String_Node_Str""+ created.second());
    }
    vm.addDisk(created.first());
  }
}"
89944,"protected Map<String,Object> createSecStorageVmInstance2(long dataCenterId){
  long startEventId=saveStartedEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_CREATE,""String_Node_Str"" + dataCenterId,0);
  HostVO secHost=_hostDao.findSecondaryStorageHost(dataCenterId);
  if (secHost == null) {
    String msg=""String_Node_Str"" + dataCenterId + ""String_Node_Str"";
    s_logger.warn(msg);
    saveFailedEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_CREATE,msg,startEventId);
    throw new CloudRuntimeException(msg);
  }
  _secHostUuid=secHost.getGuid();
  _nfsShare=secHost.getStorageUrl();
  long id=_secStorageVmDao.getNextInSequence(Long.class,""String_Node_Str"");
  String name=VirtualMachineName.getSystemVmName(id,_instance,""String_Node_Str"").intern();
  Account systemAcct=_accountMgr.getSystemAccount();
  DataCenterDeployment plan=new DataCenterDeployment(dataCenterId);
  List<NetworkOfferingVO> defaultOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemVmPublicNetwork);
  List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemVmControlNetwork,NetworkOfferingVO.SystemVmManagementNetwork);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(offerings.size() + 1);
  NicProfile defaultNic=new NicProfile();
  defaultNic.setDefaultNic(true);
  defaultNic.setDeviceId(2);
  try {
    networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,defaultOffering.get(0),plan,null,null,false).get(0),defaultNic));
    for (    NetworkOfferingVO offering : offerings) {
      networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,offering,plan,null,null,false).get(0),null));
    }
  }
 catch (  ConcurrentOperationException e) {
    s_logger.info(""String_Node_Str"" + e);
    return new HashMap<String,Object>();
  }
  SecondaryStorageVmVO secStorageVm=new SecondaryStorageVmVO(id,_serviceOffering.getId(),name,_template.getId(),_template.getGuestOSId(),dataCenterId,systemAcct.getDomainId(),systemAcct.getId());
  try {
    secStorageVm=_itMgr.allocate(secStorageVm,_template,_serviceOffering,networks,plan,systemAcct);
  }
 catch (  InsufficientCapacityException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  Map<String,Object> context=new HashMap<String,Object>();
  context.put(""String_Node_Str"",secStorageVm.getId());
  return context;
}","protected Map<String,Object> createSecStorageVmInstance2(long dataCenterId){
  long startEventId=saveStartedEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_CREATE,""String_Node_Str"" + dataCenterId,0);
  HostVO secHost=_hostDao.findSecondaryStorageHost(dataCenterId);
  if (secHost == null) {
    String msg=""String_Node_Str"" + dataCenterId + ""String_Node_Str"";
    s_logger.warn(msg);
    saveFailedEvent(User.UID_SYSTEM,Account.ACCOUNT_ID_SYSTEM,EventTypes.EVENT_SSVM_CREATE,msg,startEventId);
    throw new CloudRuntimeException(msg);
  }
  _secHostUuid=secHost.getGuid();
  _nfsShare=secHost.getStorageUrl();
  long id=_secStorageVmDao.getNextInSequence(Long.class,""String_Node_Str"");
  String name=VirtualMachineName.getSystemVmName(id,_instance,""String_Node_Str"").intern();
  Account systemAcct=_accountMgr.getSystemAccount();
  DataCenterDeployment plan=new DataCenterDeployment(dataCenterId);
  List<NetworkOfferingVO> defaultOffering=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemVmPublicNetwork);
  List<NetworkOfferingVO> offerings=_networkMgr.getSystemAccountNetworkOfferings(NetworkOfferingVO.SystemVmControlNetwork,NetworkOfferingVO.SystemVmManagementNetwork);
  List<Pair<NetworkVO,NicProfile>> networks=new ArrayList<Pair<NetworkVO,NicProfile>>(offerings.size() + 1);
  NicProfile defaultNic=new NicProfile();
  defaultNic.setDefaultNic(true);
  defaultNic.setDeviceId(2);
  try {
    networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,defaultOffering.get(0),plan,null,null,false).get(0),defaultNic));
    for (    NetworkOfferingVO offering : offerings) {
      networks.add(new Pair<NetworkVO,NicProfile>(_networkMgr.setupNetwork(systemAcct,offering,plan,null,null,false).get(0),null));
    }
  }
 catch (  ConcurrentOperationException e) {
    s_logger.info(""String_Node_Str"" + e);
    return new HashMap<String,Object>();
  }
  SecondaryStorageVmVO secStorageVm=new SecondaryStorageVmVO(id,_serviceOffering.getId(),name,_template.getId(),_template.getGuestOSId(),dataCenterId,systemAcct.getDomainId(),systemAcct.getId());
  try {
    secStorageVm=_itMgr.allocate(secStorageVm,_template,_serviceOffering,networks,plan,null,systemAcct);
  }
 catch (  InsufficientCapacityException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
catch (  ResourceUnavailableException e) {
    s_logger.warn(""String_Node_Str"",e);
    throw new CloudRuntimeException(""String_Node_Str"",e);
  }
  Map<String,Object> context=new HashMap<String,Object>();
  context.put(""String_Node_Str"",secStorageVm.getId());
  return context;
}"
89945,"public SecondaryStorageVmVO start2(long secStorageVmId,long startEventId) throws ResourceUnavailableException, InsufficientCapacityException, ConcurrentOperationException {
  if (!_useNewNetworking) {
    return start(secStorageVmId,startEventId);
  }
  SecondaryStorageVmVO secStorageVm=_secStorageVmDao.findById(secStorageVmId);
  Account systemAcct=_accountMgr.getSystemAccount();
  User systemUser=_accountMgr.getSystemUser();
  return _itMgr.start(secStorageVm,null,systemUser,systemAcct);
}","public SecondaryStorageVmVO start2(long secStorageVmId,long startEventId) throws ResourceUnavailableException, InsufficientCapacityException, ConcurrentOperationException {
  if (!_useNewNetworking) {
    return start(secStorageVmId,startEventId);
  }
  SecondaryStorageVmVO secStorageVm=_secStorageVmDao.findById(secStorageVmId);
  Account systemAcct=_accountMgr.getSystemAccount();
  User systemUser=_accountMgr.getSystemUser();
  return _itMgr.start(secStorageVm,null,systemUser,systemAcct,null);
}"
89946,"/** 
 * Create an IconDrawable.
 * @param context Your activity or application context.
 * @param icon    The icon you want this drawable to display.
 */
public IconDrawable(Context context,Iconify.IconValue icon){
  this.context=context;
  this.icon=icon;
  paint=new TextPaint();
  paint.setTypeface(Iconify.getTypeface(context));
  paint.setStyle(Paint.Style.STROKE);
  paint.setTextAlign(Paint.Align.CENTER);
  paint.setUnderlineText(false);
  paint.setColor(Color.BLACK);
  paint.setAntiAlias(true);
}","/** 
 * Create an IconDrawable.
 * @param context Your activity or application context.
 * @param icon    The icon you want this drawable to display.
 */
public IconDrawable(Context context,Iconify.IconValue icon){
  this.context=context;
  this.icon=icon;
  paint=new TextPaint();
  paint.setTypeface(Iconify.getTypeface(context));
  paint.setStyle(Paint.Style.FILL);
  paint.setTextAlign(Paint.Align.CENTER);
  paint.setUnderlineText(false);
  paint.setColor(Color.BLACK);
  paint.setAntiAlias(true);
}"
89947,"private void init(){
  Iconify.addIcons(this);
}","private void init(){
  if (!isInEditMode())   Iconify.addIcons(this);
 else   this.setText(this.getText());
}"
89948,"private void init(){
  if (!isInEditMode())   Iconify.addIcons(this);
 else   this.setText(""String_Node_Str"");
}","private void init(){
  if (!isInEditMode())   Iconify.addIcons(this);
 else   this.setText(this.getText());
}"
89949,"private void init(){
  Iconify.addIcons(this);
}","private void init(){
  if (!isInEditMode())   Iconify.addIcons(this);
 else   this.setText(""String_Node_Str"");
}"
89950,"public IconDrawable(Context context,Iconify.IconValue icon){
  this.context=context;
  this.icon=icon;
  this.size=convertDpToPx(context,ANDROID_ACTIONBAR_ICON_SIZE_DP);
  paint=new TextPaint();
  paint.setTypeface(Iconify.getTypeface(context));
  paint.setStyle(Paint.Style.STROKE);
  paint.setTextAlign(Paint.Align.CENTER);
  paint.setUnderlineText(false);
  paint.setColor(Color.BLACK);
}","public IconDrawable(Context context,Iconify.IconValue icon){
  this.context=context;
  this.icon=icon;
  paint=new TextPaint();
  paint.setTypeface(Iconify.getTypeface(context));
  paint.setStyle(Paint.Style.STROKE);
  paint.setTextAlign(Paint.Align.CENTER);
  paint.setUnderlineText(false);
  paint.setColor(Color.BLACK);
}"
89951,"public Result process(long startMilli,boolean processDelayed,ProcessorConfig config,String[] items,Map<Product,ReadWriteData> usageDataByProduct,Map<Product,ReadWriteData> costDataByProduct,Map<String,Double> ondemandRate){
  if (StringUtils.isEmpty(items[accountIdIndex]) || StringUtils.isEmpty(items[productIndex]) || StringUtils.isEmpty(items[usageTypeIndex])|| StringUtils.isEmpty(items[operationIndex])|| StringUtils.isEmpty(items[usageQuantityIndex])|| StringUtils.isEmpty(items[costIndex]))   return Result.ignore;
  Account account=config.accountService.getAccountById(items[accountIdIndex]);
  if (account == null)   return Result.ignore;
  double usageValue=Double.parseDouble(items[usageQuantityIndex]);
  double costValue=Double.parseDouble(items[costIndex]);
  Product product=config.productService.getProductByAwsName(items[productIndex]);
  boolean reservationUsage=""String_Node_Str"".equals(items[reservedIndex]);
  ReformedMetaData reformedMetaData=reform(config,product,reservationUsage,items[operationIndex],items[usageTypeIndex],items[descriptionIndex],costValue);
  product=reformedMetaData.product;
  Operation operation=reformedMetaData.operation;
  UsageType usageType=reformedMetaData.usageType;
  Zone zone=Zone.getZone(items[zoneIndex],reformedMetaData.region);
  long millisStart;
  long millisEnd;
  try {
    millisStart=amazonBillingDateFormat.parseMillis(items[startTimeIndex]);
    millisEnd=amazonBillingDateFormat.parseMillis(items[endTimeIndex]);
  }
 catch (  IllegalArgumentException e) {
    millisStart=amazonBillingDateFormat2.parseMillis(items[startTimeIndex]);
    millisEnd=amazonBillingDateFormat2.parseMillis(items[endTimeIndex]);
  }
  int startIndex=(int)((millisStart - startMilli) / AwsUtils.hourMillis);
  int endIndex=(int)((millisEnd + 1000 - startMilli) / AwsUtils.hourMillis);
  Result result=Result.hourly;
  if (product == Product.ec2_instance) {
    result=processEc2Instance(processDelayed,reservationUsage,operation,zone);
  }
 else   if (product == Product.redshift) {
    result=processRedshift(processDelayed,reservationUsage,operation,costValue);
  }
 else   if (product == Product.data_transfer) {
    result=processDataTranfer(processDelayed,usageType);
  }
 else   if (product == Product.cloudhsm) {
    result=processCloudhsm(processDelayed,usageType);
  }
 else   if (product == Product.ebs) {
    result=processEbs(usageType);
  }
 else   if (product == Product.rds) {
    result=processRds(usageType);
  }
  if (result == Result.ignore || result == Result.delay)   return result;
  if (usageType.name.startsWith(""String_Node_Str""))   result=Result.daily;
  boolean monthlyCost=StringUtils.isEmpty(items[descriptionIndex]) ? false : items[descriptionIndex].toLowerCase().contains(""String_Node_Str"");
  ReadWriteData usageData=usageDataByProduct.get(null);
  ReadWriteData costData=costDataByProduct.get(null);
  ReadWriteData usageDataOfProduct=usageDataByProduct.get(product);
  ReadWriteData costDataOfProduct=costDataByProduct.get(product);
  if (result == Result.daily) {
    DateMidnight dm=new DateMidnight(millisStart,DateTimeZone.UTC);
    millisStart=dm.getMillis();
    startIndex=(int)((millisStart - startMilli) / AwsUtils.hourMillis);
    endIndex=startIndex + 24;
  }
 else   if (result == Result.monthly) {
    startIndex=0;
    endIndex=usageData.getNum();
    int numHoursInMonth=new DateTime(startMilli,DateTimeZone.UTC).dayOfMonth().getMaximumValue() * 24;
    usageValue=usageValue * endIndex / numHoursInMonth;
    costValue=costValue * endIndex / numHoursInMonth;
  }
  if (monthlyCost) {
    int numHoursInMonth=new DateTime(startMilli,DateTimeZone.UTC).dayOfMonth().getMaximumValue() * 24;
    usageValue=usageValue * numHoursInMonth;
  }
  int[] indexes;
  if (endIndex - startIndex > 1) {
    usageValue=usageValue / (endIndex - startIndex);
    costValue=costValue / (endIndex - startIndex);
    indexes=new int[endIndex - startIndex];
    for (int i=0; i < indexes.length; i++)     indexes[i]=startIndex + i;
  }
 else {
    indexes=new int[]{startIndex};
  }
  TagGroup tagGroup=TagGroup.getTagGroup(account,reformedMetaData.region,zone,product,operation,usageType,null);
  TagGroup resourceTagGroup=null;
  if (costValue > 0 && !reservationUsage && product == Product.ec2_instance && tagGroup.operation == Operation.ondemandInstances) {
    String key=operation + ""String_Node_Str"" + tagGroup.region+ ""String_Node_Str""+ usageType;
    ondemandRate.put(key,costValue / usageValue);
  }
  double resourceCostValue=costValue;
  if (items.length > resourceIndex && !StringUtils.isEmpty(items[resourceIndex]) && config.resourceService != null) {
    if (product == Product.ec2_instance && !reservationUsage && operation == Operation.ondemandInstances)     operation=Operation.getReservedInstances(config.reservationService.getDefaultReservationUtilization());
    if (product == Product.ec2_instance && operation instanceof Operation.ReservationOperation) {
      UsageType usageTypeForPrice=usageType;
      if (usageType.name.endsWith(InstanceOs.others.name())) {
        usageTypeForPrice=UsageType.getUsageType(usageType.name.replace(InstanceOs.others.name(),InstanceOs.windows.name()),usageType.unit);
      }
      try {
        resourceCostValue=usageValue * config.reservationService.getLatestHourlyTotalPrice(millisStart,tagGroup.region,usageTypeForPrice,config.reservationService.getDefaultReservationUtilization());
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"" + tagGroup.region + ""String_Node_Str""+ usageTypeForPrice);
        resourceCostValue=-1;
      }
    }
    String resourceGroupStr=config.resourceService.getResource(account,reformedMetaData.region,product,items[resourceIndex],items,millisStart);
    if (!StringUtils.isEmpty(resourceGroupStr)) {
      ResourceGroup resourceGroup=ResourceGroup.getResourceGroup(resourceGroupStr);
      resourceTagGroup=TagGroup.getTagGroup(account,reformedMetaData.region,zone,product,operation,usageType,resourceGroup);
      if (usageDataOfProduct == null) {
        usageDataOfProduct=new ReadWriteData();
        costDataOfProduct=new ReadWriteData();
        usageDataByProduct.put(product,usageDataOfProduct);
        costDataByProduct.put(product,costDataOfProduct);
      }
    }
  }
  if (config.randomizer != null && product == Product.monitor)   return result;
  for (  int i : indexes) {
    if (config.randomizer != null) {
      if (tagGroup.product != Product.rds && tagGroup.product != Product.s3 && usageData.getData(i).get(tagGroup) != null)       break;
      long time=millisStart + i * AwsUtils.hourMillis;
      usageValue=config.randomizer.randomizeUsage(time,resourceTagGroup == null ? tagGroup : resourceTagGroup,usageValue);
      costValue=usageValue * config.randomizer.randomizeCost(tagGroup);
    }
    if (product != Product.monitor) {
      Map<TagGroup,Double> usages=usageData.getData(i);
      Map<TagGroup,Double> costs=costData.getData(i);
      addValue(usages,tagGroup,usageValue,config.randomizer == null || tagGroup.product == Product.rds || tagGroup.product == Product.s3);
      addValue(costs,tagGroup,costValue,config.randomizer == null || tagGroup.product == Product.rds || tagGroup.product == Product.s3);
    }
 else {
      resourceCostValue=usageValue * config.costPerMonitorMetricPerHour;
    }
    if (resourceTagGroup != null) {
      Map<TagGroup,Double> usagesOfResource=usageDataOfProduct.getData(i);
      Map<TagGroup,Double> costsOfResource=costDataOfProduct.getData(i);
      if (config.randomizer == null || tagGroup.product == Product.rds || tagGroup.product == Product.s3) {
        addValue(usagesOfResource,resourceTagGroup,usageValue,product != Product.monitor);
        if (!config.useCostForResourceGroup.equals(""String_Node_Str"") || resourceCostValue < 0) {
          addValue(costsOfResource,resourceTagGroup,costValue,product != Product.monitor);
        }
 else {
          addValue(costsOfResource,resourceTagGroup,resourceCostValue,product != Product.monitor);
        }
      }
 else {
        Map<String,Double> distribution=config.randomizer.getDistribution(tagGroup);
        for (        Map.Entry<String,Double> entry : distribution.entrySet()) {
          String app=entry.getKey();
          double dist=entry.getValue();
          resourceTagGroup=TagGroup.getTagGroup(account,reformedMetaData.region,zone,product,operation,usageType,ResourceGroup.getResourceGroup(app));
          double usage=usageValue * dist;
          if (product == Product.ec2_instance)           usage=(int)usageValue * dist;
          addValue(usagesOfResource,resourceTagGroup,usage,false);
          addValue(costsOfResource,resourceTagGroup,usage * config.randomizer.randomizeCost(tagGroup),false);
        }
      }
    }
  }
  return result;
}","public Result process(long startMilli,boolean processDelayed,ProcessorConfig config,String[] items,Map<Product,ReadWriteData> usageDataByProduct,Map<Product,ReadWriteData> costDataByProduct,Map<String,Double> ondemandRate){
  if (StringUtils.isEmpty(items[accountIdIndex]) || StringUtils.isEmpty(items[productIndex]) || StringUtils.isEmpty(items[usageTypeIndex])|| StringUtils.isEmpty(items[operationIndex])|| StringUtils.isEmpty(items[usageQuantityIndex])|| StringUtils.isEmpty(items[costIndex]))   return Result.ignore;
  Account account=config.accountService.getAccountById(items[accountIdIndex]);
  if (account == null)   return Result.ignore;
  double usageValue=Double.parseDouble(items[usageQuantityIndex]);
  double costValue=Double.parseDouble(items[costIndex]);
  long millisStart;
  long millisEnd;
  try {
    millisStart=amazonBillingDateFormat.parseMillis(items[startTimeIndex]);
    millisEnd=amazonBillingDateFormat.parseMillis(items[endTimeIndex]);
  }
 catch (  IllegalArgumentException e) {
    millisStart=amazonBillingDateFormat2.parseMillis(items[startTimeIndex]);
    millisEnd=amazonBillingDateFormat2.parseMillis(items[endTimeIndex]);
  }
  Product product=config.productService.getProductByAwsName(items[productIndex]);
  boolean reservationUsage=""String_Node_Str"".equals(items[reservedIndex]);
  ReformedMetaData reformedMetaData=reform(millisStart,config,product,reservationUsage,items[operationIndex],items[usageTypeIndex],items[descriptionIndex],costValue);
  product=reformedMetaData.product;
  Operation operation=reformedMetaData.operation;
  UsageType usageType=reformedMetaData.usageType;
  Zone zone=Zone.getZone(items[zoneIndex],reformedMetaData.region);
  int startIndex=(int)((millisStart - startMilli) / AwsUtils.hourMillis);
  int endIndex=(int)((millisEnd + 1000 - startMilli) / AwsUtils.hourMillis);
  Result result=Result.hourly;
  if (product == Product.ec2_instance) {
    result=processEc2Instance(processDelayed,reservationUsage,operation,zone);
  }
 else   if (product == Product.redshift) {
    result=processRedshift(processDelayed,reservationUsage,operation,costValue);
  }
 else   if (product == Product.data_transfer) {
    result=processDataTranfer(processDelayed,usageType);
  }
 else   if (product == Product.cloudhsm) {
    result=processCloudhsm(processDelayed,usageType);
  }
 else   if (product == Product.ebs) {
    result=processEbs(usageType);
  }
 else   if (product == Product.rds) {
    result=processRds(usageType);
  }
  if (result == Result.ignore || result == Result.delay)   return result;
  if (usageType.name.startsWith(""String_Node_Str""))   result=Result.daily;
  boolean monthlyCost=StringUtils.isEmpty(items[descriptionIndex]) ? false : items[descriptionIndex].toLowerCase().contains(""String_Node_Str"");
  ReadWriteData usageData=usageDataByProduct.get(null);
  ReadWriteData costData=costDataByProduct.get(null);
  ReadWriteData usageDataOfProduct=usageDataByProduct.get(product);
  ReadWriteData costDataOfProduct=costDataByProduct.get(product);
  if (result == Result.daily) {
    DateMidnight dm=new DateMidnight(millisStart,DateTimeZone.UTC);
    millisStart=dm.getMillis();
    startIndex=(int)((millisStart - startMilli) / AwsUtils.hourMillis);
    endIndex=startIndex + 24;
  }
 else   if (result == Result.monthly) {
    startIndex=0;
    endIndex=usageData.getNum();
    int numHoursInMonth=new DateTime(startMilli,DateTimeZone.UTC).dayOfMonth().getMaximumValue() * 24;
    usageValue=usageValue * endIndex / numHoursInMonth;
    costValue=costValue * endIndex / numHoursInMonth;
  }
  if (monthlyCost) {
    int numHoursInMonth=new DateTime(startMilli,DateTimeZone.UTC).dayOfMonth().getMaximumValue() * 24;
    usageValue=usageValue * numHoursInMonth;
  }
  int[] indexes;
  if (endIndex - startIndex > 1) {
    usageValue=usageValue / (endIndex - startIndex);
    costValue=costValue / (endIndex - startIndex);
    indexes=new int[endIndex - startIndex];
    for (int i=0; i < indexes.length; i++)     indexes[i]=startIndex + i;
  }
 else {
    indexes=new int[]{startIndex};
  }
  TagGroup tagGroup=TagGroup.getTagGroup(account,reformedMetaData.region,zone,product,operation,usageType,null);
  TagGroup resourceTagGroup=null;
  if (costValue > 0 && !reservationUsage && product == Product.ec2_instance && tagGroup.operation == Operation.ondemandInstances) {
    String key=operation + ""String_Node_Str"" + tagGroup.region+ ""String_Node_Str""+ usageType;
    ondemandRate.put(key,costValue / usageValue);
  }
  double resourceCostValue=costValue;
  if (items.length > resourceIndex && !StringUtils.isEmpty(items[resourceIndex]) && config.resourceService != null) {
    if (product == Product.ec2_instance && !reservationUsage && operation == Operation.ondemandInstances)     operation=Operation.getReservedInstances(config.reservationService.getDefaultReservationUtilization(0L));
    if (product == Product.ec2_instance && operation instanceof Operation.ReservationOperation) {
      UsageType usageTypeForPrice=usageType;
      if (usageType.name.endsWith(InstanceOs.others.name())) {
        usageTypeForPrice=UsageType.getUsageType(usageType.name.replace(InstanceOs.others.name(),InstanceOs.windows.name()),usageType.unit);
      }
      try {
        resourceCostValue=usageValue * config.reservationService.getLatestHourlyTotalPrice(millisStart,tagGroup.region,usageTypeForPrice,config.reservationService.getDefaultReservationUtilization(0L));
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"" + tagGroup.region + ""String_Node_Str""+ usageTypeForPrice);
        resourceCostValue=-1;
      }
    }
    String resourceGroupStr=config.resourceService.getResource(account,reformedMetaData.region,product,items[resourceIndex],items,millisStart);
    if (!StringUtils.isEmpty(resourceGroupStr)) {
      ResourceGroup resourceGroup=ResourceGroup.getResourceGroup(resourceGroupStr);
      resourceTagGroup=TagGroup.getTagGroup(account,reformedMetaData.region,zone,product,operation,usageType,resourceGroup);
      if (usageDataOfProduct == null) {
        usageDataOfProduct=new ReadWriteData();
        costDataOfProduct=new ReadWriteData();
        usageDataByProduct.put(product,usageDataOfProduct);
        costDataByProduct.put(product,costDataOfProduct);
      }
    }
  }
  if (config.randomizer != null && product == Product.monitor)   return result;
  for (  int i : indexes) {
    if (config.randomizer != null) {
      if (tagGroup.product != Product.rds && tagGroup.product != Product.s3 && usageData.getData(i).get(tagGroup) != null)       break;
      long time=millisStart + i * AwsUtils.hourMillis;
      usageValue=config.randomizer.randomizeUsage(time,resourceTagGroup == null ? tagGroup : resourceTagGroup,usageValue);
      costValue=usageValue * config.randomizer.randomizeCost(tagGroup);
    }
    if (product != Product.monitor) {
      Map<TagGroup,Double> usages=usageData.getData(i);
      Map<TagGroup,Double> costs=costData.getData(i);
      addValue(usages,tagGroup,usageValue,config.randomizer == null || tagGroup.product == Product.rds || tagGroup.product == Product.s3);
      addValue(costs,tagGroup,costValue,config.randomizer == null || tagGroup.product == Product.rds || tagGroup.product == Product.s3);
    }
 else {
      resourceCostValue=usageValue * config.costPerMonitorMetricPerHour;
    }
    if (resourceTagGroup != null) {
      Map<TagGroup,Double> usagesOfResource=usageDataOfProduct.getData(i);
      Map<TagGroup,Double> costsOfResource=costDataOfProduct.getData(i);
      if (config.randomizer == null || tagGroup.product == Product.rds || tagGroup.product == Product.s3) {
        addValue(usagesOfResource,resourceTagGroup,usageValue,product != Product.monitor);
        if (!config.useCostForResourceGroup.equals(""String_Node_Str"") || resourceCostValue < 0) {
          addValue(costsOfResource,resourceTagGroup,costValue,product != Product.monitor);
        }
 else {
          addValue(costsOfResource,resourceTagGroup,resourceCostValue,product != Product.monitor);
        }
      }
 else {
        Map<String,Double> distribution=config.randomizer.getDistribution(tagGroup);
        for (        Map.Entry<String,Double> entry : distribution.entrySet()) {
          String app=entry.getKey();
          double dist=entry.getValue();
          resourceTagGroup=TagGroup.getTagGroup(account,reformedMetaData.region,zone,product,operation,usageType,ResourceGroup.getResourceGroup(app));
          double usage=usageValue * dist;
          if (product == Product.ec2_instance)           usage=(int)usageValue * dist;
          addValue(usagesOfResource,resourceTagGroup,usage,false);
          addValue(costsOfResource,resourceTagGroup,usage * config.randomizer.randomizeCost(tagGroup),false);
        }
      }
    }
  }
  return result;
}"
89952,"protected ReformedMetaData reform(ProcessorConfig config,Product product,boolean reservationUsage,String operationStr,String usageTypeStr,String description,double cost){
  Operation operation=null;
  UsageType usageType=null;
  InstanceOs os=null;
  int index=usageTypeStr.indexOf(""String_Node_Str"");
  String regionShortName=index > 0 ? usageTypeStr.substring(0,index) : ""String_Node_Str"";
  Region region=regionShortName.isEmpty() ? null : Region.getRegionByShortName(regionShortName);
  if (region != null) {
    usageTypeStr=usageTypeStr.substring(index + 1);
  }
 else {
    region=Region.US_EAST_1;
  }
  if (operationStr.equals(""String_Node_Str"")) {
    product=Product.ebs;
  }
  if (usageTypeStr.startsWith(""String_Node_Str"")) {
    product=Product.eip;
  }
 else   if (usageTypeStr.startsWith(""String_Node_Str""))   product=Product.ebs;
 else   if (usageTypeStr.startsWith(""String_Node_Str""))   product=Product.ebs;
 else   if (usageTypeStr.startsWith(""String_Node_Str""))   product=Product.cloudwatch;
 else   if (usageTypeStr.startsWith(""String_Node_Str"") && operationStr.startsWith(""String_Node_Str"")) {
    index=usageTypeStr.indexOf(""String_Node_Str"");
    usageTypeStr=index < 0 ? ""String_Node_Str"" : usageTypeStr.substring(index + 1);
    if (reservationUsage && product == Product.ec2 && cost == 0)     operation=Operation.reservedInstancesFixed;
 else     if (reservationUsage && product == Product.ec2)     operation=Operation.getReservedInstances(config.reservationService.getDefaultReservationUtilization());
 else     operation=Operation.ondemandInstances;
    os=getInstanceOs(operationStr);
  }
 else   if (usageTypeStr.startsWith(""String_Node_Str"") && operationStr.startsWith(""String_Node_Str"")) {
    index=usageTypeStr.indexOf(""String_Node_Str"");
    usageTypeStr=index < 0 ? ""String_Node_Str"" : usageTypeStr.substring(index + 1);
    operation=getOperation(operationStr,reservationUsage,null);
    os=getInstanceOs(operationStr);
  }
 else   if (usageTypeStr.startsWith(""String_Node_Str"") || usageTypeStr.startsWith(""String_Node_Str"") || usageTypeStr.startsWith(""String_Node_Str"")) {
    index=usageTypeStr.indexOf(""String_Node_Str"");
    String offeringType;
    if (index < 0) {
      offeringType=usageTypeStr;
      usageTypeStr=""String_Node_Str"";
    }
 else {
      offeringType=usageTypeStr;
      usageTypeStr=usageTypeStr.substring(index + 1);
    }
    operation=getOperation(operationStr,reservationUsage,Ec2InstanceReservationPrice.ReservationUtilization.get(offeringType));
    os=getInstanceOs(operationStr);
  }
  if (usageTypeStr.equals(""String_Node_Str"") || usageTypeStr.equals(""String_Node_Str"")) {
    usageTypeStr=product.name;
  }
  if (operation == null) {
    operation=Operation.getOperation(operationStr);
  }
  if (product == Product.ec2 && operation instanceof Operation.ReservationOperation) {
    product=Product.ec2_instance;
    if (operation instanceof Operation.ReservationOperation) {
      if (os != InstanceOs.linux) {
        usageTypeStr=usageTypeStr + ""String_Node_Str"" + os;
        operation=operation.name.startsWith(""String_Node_Str"") ? operation : Operation.ondemandInstances;
      }
    }
  }
  if (usageType == null) {
    usageType=UsageType.getUsageType(usageTypeStr,operation,description);
  }
  return new ReformedMetaData(region,product,operation,usageType);
}","protected ReformedMetaData reform(long millisStart,ProcessorConfig config,Product product,boolean reservationUsage,String operationStr,String usageTypeStr,String description,double cost){
  Operation operation=null;
  UsageType usageType=null;
  InstanceOs os=null;
  int index=usageTypeStr.indexOf(""String_Node_Str"");
  String regionShortName=index > 0 ? usageTypeStr.substring(0,index) : ""String_Node_Str"";
  Region region=regionShortName.isEmpty() ? null : Region.getRegionByShortName(regionShortName);
  if (region != null) {
    usageTypeStr=usageTypeStr.substring(index + 1);
  }
 else {
    region=Region.US_EAST_1;
  }
  if (operationStr.equals(""String_Node_Str"")) {
    product=Product.ebs;
  }
  if (usageTypeStr.startsWith(""String_Node_Str"")) {
    product=Product.eip;
  }
 else   if (usageTypeStr.startsWith(""String_Node_Str""))   product=Product.ebs;
 else   if (usageTypeStr.startsWith(""String_Node_Str""))   product=Product.ebs;
 else   if (usageTypeStr.startsWith(""String_Node_Str""))   product=Product.cloudwatch;
 else   if (usageTypeStr.startsWith(""String_Node_Str"") && operationStr.startsWith(""String_Node_Str"")) {
    index=usageTypeStr.indexOf(""String_Node_Str"");
    usageTypeStr=index < 0 ? ""String_Node_Str"" : usageTypeStr.substring(index + 1);
    if (reservationUsage && product == Product.ec2 && cost == 0)     operation=Operation.reservedInstancesFixed;
 else     if (reservationUsage && product == Product.ec2)     operation=Operation.getReservedInstances(config.reservationService.getDefaultReservationUtilization(millisStart));
 else     operation=Operation.ondemandInstances;
    os=getInstanceOs(operationStr);
  }
 else   if (usageTypeStr.startsWith(""String_Node_Str"") && operationStr.startsWith(""String_Node_Str"")) {
    index=usageTypeStr.indexOf(""String_Node_Str"");
    usageTypeStr=index < 0 ? ""String_Node_Str"" : usageTypeStr.substring(index + 1);
    operation=getOperation(operationStr,reservationUsage,null);
    os=getInstanceOs(operationStr);
  }
 else   if (usageTypeStr.startsWith(""String_Node_Str"") || usageTypeStr.startsWith(""String_Node_Str"") || usageTypeStr.startsWith(""String_Node_Str"")) {
    index=usageTypeStr.indexOf(""String_Node_Str"");
    String offeringType;
    if (index < 0) {
      offeringType=usageTypeStr;
      usageTypeStr=""String_Node_Str"";
    }
 else {
      offeringType=usageTypeStr;
      usageTypeStr=usageTypeStr.substring(index + 1);
    }
    operation=getOperation(operationStr,reservationUsage,Ec2InstanceReservationPrice.ReservationUtilization.get(offeringType));
    os=getInstanceOs(operationStr);
  }
  if (usageTypeStr.equals(""String_Node_Str"") || usageTypeStr.equals(""String_Node_Str"")) {
    usageTypeStr=product.name;
  }
  if (operation == null) {
    operation=Operation.getOperation(operationStr);
  }
  if (product == Product.ec2 && operation instanceof Operation.ReservationOperation) {
    product=Product.ec2_instance;
    if (operation instanceof Operation.ReservationOperation) {
      if (os != InstanceOs.linux) {
        usageTypeStr=usageTypeStr + ""String_Node_Str"" + os;
        operation=operation.name.startsWith(""String_Node_Str"") ? operation : Operation.ondemandInstances;
      }
    }
  }
  if (usageType == null) {
    usageType=UsageType.getUsageType(usageTypeStr,operation,description);
  }
  return new ReformedMetaData(region,product,operation,usageType);
}"
89953,"public ReservationUtilization getDefaultReservationUtilization(){
  return defaultUtilization;
}","public ReservationUtilization getDefaultReservationUtilization(long time){
  return defaultUtilization;
}"
89954,"/** 
 * @return
 */
Ec2InstanceReservationPrice.ReservationUtilization getDefaultReservationUtilization();","/** 
 * @return
 */
Ec2InstanceReservationPrice.ReservationUtilization getDefaultReservationUtilization(long time);"
89955,"private void processReservations(Ec2InstanceReservationPrice.ReservationUtilization utilization){
  if (config.reservationService.getTagGroups(utilization).size() == 0)   return;
  ReadWriteData usageData=usageDataByProduct.get(null);
  ReadWriteData costData=costDataByProduct.get(null);
  Map<Account,List<Account>> reservationAccounts=config.accountService.getReservationAccounts();
  Set<Account> reservationOwners=reservationAccounts.keySet();
  Map<Account,List<Account>> reservationBorrowers=Maps.newHashMap();
  for (  Account account : reservationAccounts.keySet()) {
    List<Account> list=reservationAccounts.get(account);
    for (    Account borrowingAccount : list) {
      if (borrowingAccount.name.equals(account.name))       continue;
      List<Account> from=reservationBorrowers.get(borrowingAccount);
      if (from == null) {
        from=Lists.newArrayList();
        reservationBorrowers.put(borrowingAccount,from);
      }
      from.add(account);
    }
  }
  Set<TagGroup> toMarkOwners=Sets.newTreeSet();
  for (  TagGroup tagGroup : config.reservationService.getTagGroups(utilization)) {
    for (int i=0; i < usageData.getNum(); i++) {
      Map<TagGroup,Double> usageMap=usageData.getData(i);
      Map<TagGroup,Double> costMap=costData.getData(i);
      Double existing=usageMap.get(tagGroup);
      double value=existing == null ? 0 : existing;
      ReservationService.ReservationInfo reservation=config.reservationService.getReservation(startMilli + i * AwsUtils.hourMillis,tagGroup,utilization);
      double reservedUsed=Math.min(value,reservation.capacity);
      double reservedUnused=reservation.capacity - reservedUsed;
      double bonusReserved=value > reservation.capacity ? value - reservation.capacity : 0;
      if (reservedUsed > 0 || existing != null) {
        usageMap.put(tagGroup,reservedUsed);
        costMap.put(tagGroup,reservedUsed * reservation.reservationHourlyCost);
      }
      if (reservedUnused > 0) {
        TagGroup unusedTagGroup=new TagGroup(tagGroup.account,tagGroup.region,tagGroup.zone,tagGroup.product,Operation.getUnusedInstances(utilization),tagGroup.usageType,null);
        usageMap.put(unusedTagGroup,reservedUnused);
        costMap.put(unusedTagGroup,reservedUnused * reservation.reservationHourlyCost);
      }
      if (bonusReserved > 0) {
        TagGroup bonusTagGroup=new TagGroup(tagGroup.account,tagGroup.region,tagGroup.zone,tagGroup.product,Operation.getBonusReservedInstances(utilization),tagGroup.usageType,null);
        usageMap.put(bonusTagGroup,bonusReserved);
        costMap.put(bonusTagGroup,bonusReserved * reservation.reservationHourlyCost);
      }
      if (reservation.capacity > 0) {
        TagGroup upfrontTagGroup=new TagGroup(tagGroup.account,tagGroup.region,tagGroup.zone,tagGroup.product,Operation.getUpfrontAmortized(utilization),tagGroup.usageType,null);
        costMap.put(upfrontTagGroup,reservation.capacity * reservation.upfrontAmortized);
      }
    }
    toMarkOwners.add(new TagGroup(tagGroup.account,tagGroup.region,tagGroup.zone,tagGroup.product,Operation.getReservedInstances(utilization),tagGroup.usageType,null));
  }
  Set<TagGroup> toMarkBorrowing=Sets.newTreeSet();
  for (  TagGroup tagGroup : usageData.getTagGroups()) {
    if (tagGroup.resourceGroup == null && tagGroup.product == Product.ec2_instance && (!toMarkOwners.contains(tagGroup) && tagGroup.operation == Operation.getReservedInstances(utilization) || toMarkOwners.contains(tagGroup) && tagGroup.operation == Operation.getBonusReservedInstances(utilization))) {
      toMarkBorrowing.add(tagGroup);
    }
  }
  for (  TagGroup tagGroup : toMarkBorrowing) {
    for (int i=0; i < usageData.getNum(); i++) {
      Map<TagGroup,Double> usageMap=usageData.getData(i);
      Map<TagGroup,Double> costMap=costData.getData(i);
      borrow(i,startMilli + i * AwsUtils.hourMillis,usageMap,costMap,reservationBorrowers.get(tagGroup.account),tagGroup,utilization,reservationOwners.contains(tagGroup.account));
    }
  }
}","private void processReservations(Ec2InstanceReservationPrice.ReservationUtilization utilization){
  if (config.reservationService.getTagGroups(utilization).size() == 0)   return;
  ReadWriteData usageData=usageDataByProduct.get(null);
  ReadWriteData costData=costDataByProduct.get(null);
  Map<Account,List<Account>> reservationAccounts=config.accountService.getReservationAccounts();
  Set<Account> reservationOwners=reservationAccounts.keySet();
  Map<Account,List<Account>> reservationBorrowers=Maps.newHashMap();
  for (  Account account : reservationAccounts.keySet()) {
    List<Account> list=reservationAccounts.get(account);
    for (    Account borrowingAccount : list) {
      if (borrowingAccount.name.equals(account.name))       continue;
      List<Account> from=reservationBorrowers.get(borrowingAccount);
      if (from == null) {
        from=Lists.newArrayList();
        reservationBorrowers.put(borrowingAccount,from);
      }
      from.add(account);
    }
  }
  Set<TagGroup> toMarkOwners=Sets.newTreeSet();
  for (  TagGroup tagGroup : config.reservationService.getTagGroups(utilization)) {
    for (int i=0; i < usageData.getNum(); i++) {
      Map<TagGroup,Double> usageMap=usageData.getData(i);
      Map<TagGroup,Double> costMap=costData.getData(i);
      Double existing=usageMap.get(tagGroup);
      double value=existing == null ? 0 : existing;
      ReservationService.ReservationInfo reservation=config.reservationService.getReservation(startMilli + i * AwsUtils.hourMillis,tagGroup,utilization);
      double reservedUsed=Math.min(value,reservation.capacity);
      double reservedUnused=reservation.capacity - reservedUsed;
      double bonusReserved=value > reservation.capacity ? value - reservation.capacity : 0;
      if (reservedUsed > 0 || existing != null) {
        usageMap.put(tagGroup,reservedUsed);
        costMap.put(tagGroup,reservedUsed * reservation.reservationHourlyCost);
      }
      if (reservedUnused > 0) {
        TagGroup unusedTagGroup=new TagGroup(tagGroup.account,tagGroup.region,tagGroup.zone,tagGroup.product,Operation.getUnusedInstances(utilization),tagGroup.usageType,null);
        usageMap.put(unusedTagGroup,reservedUnused);
        costMap.put(unusedTagGroup,reservedUnused * reservation.reservationHourlyCost);
      }
      if (bonusReserved > 0) {
        TagGroup bonusTagGroup=new TagGroup(tagGroup.account,tagGroup.region,tagGroup.zone,tagGroup.product,Operation.getBonusReservedInstances(utilization),tagGroup.usageType,null);
        usageMap.put(bonusTagGroup,bonusReserved);
        costMap.put(bonusTagGroup,bonusReserved * reservation.reservationHourlyCost);
      }
      if (reservation.capacity > 0) {
        TagGroup upfrontTagGroup=new TagGroup(tagGroup.account,tagGroup.region,tagGroup.zone,tagGroup.product,Operation.getUpfrontAmortized(utilization),tagGroup.usageType,null);
        costMap.put(upfrontTagGroup,reservation.capacity * reservation.upfrontAmortized);
      }
    }
    toMarkOwners.add(new TagGroup(tagGroup.account,tagGroup.region,tagGroup.zone,tagGroup.product,Operation.getReservedInstances(utilization),tagGroup.usageType,null));
  }
  Set<TagGroup> toMarkBorrowing=Sets.newTreeSet();
  for (  TagGroup tagGroup : usageData.getTagGroups()) {
    if (tagGroup.resourceGroup == null && tagGroup.product == Product.ec2_instance && (tagGroup.operation == Operation.getReservedInstances(utilization) && !toMarkOwners.contains(tagGroup) || tagGroup.operation == Operation.getBonusReservedInstances(utilization))) {
      toMarkBorrowing.add(tagGroup);
    }
  }
  for (  TagGroup tagGroup : toMarkBorrowing) {
    for (int i=0; i < usageData.getNum(); i++) {
      Map<TagGroup,Double> usageMap=usageData.getData(i);
      Map<TagGroup,Double> costMap=costData.getData(i);
      borrow(i,startMilli + i * AwsUtils.hourMillis,usageMap,costMap,reservationBorrowers.get(tagGroup.account),tagGroup,utilization,reservationOwners.contains(tagGroup.account));
    }
  }
}"
89956,"private void processReservations(Ec2InstanceReservationPrice.ReservationUtilization utilization){
  if (config.reservationService.getTagGroups(utilization).size() == 0)   return;
  ReadWriteData usageData=usageDataByProduct.get(null);
  ReadWriteData costData=costDataByProduct.get(null);
  Map<Account,List<Account>> reservationAccounts=config.accountService.getReservationAccounts();
  Set<Account> reservationOwners=reservationAccounts.keySet();
  Map<Account,List<Account>> reservationBorrowers=Maps.newHashMap();
  for (  Account account : reservationAccounts.keySet()) {
    List<Account> list=reservationAccounts.get(account);
    for (    Account borrowingAccount : list) {
      if (borrowingAccount.name.equals(account.name))       continue;
      List<Account> from=reservationBorrowers.get(borrowingAccount);
      if (from == null) {
        from=Lists.newArrayList();
        reservationBorrowers.put(borrowingAccount,from);
      }
      from.add(account);
    }
  }
  Set<TagGroup> toMarkOwners=Sets.newTreeSet();
  for (  TagGroup tagGroup : config.reservationService.getTagGroups(utilization)) {
    for (int i=0; i < usageData.getNum(); i++) {
      Map<TagGroup,Double> usageMap=usageData.getData(i);
      Map<TagGroup,Double> costMap=costData.getData(i);
      Double existing=usageMap.get(tagGroup);
      double value=existing == null ? 0 : existing;
      ReservationService.ReservationInfo reservation=config.reservationService.getReservation(startMilli + i * AwsUtils.hourMillis,tagGroup,utilization);
      double reservedUsed=Math.min(value,reservation.capacity);
      double reservedUnused=reservation.capacity - reservedUsed;
      double bonusReserved=value > reservation.capacity ? value - reservation.capacity : 0;
      if (reservedUsed > 0 || existing != null) {
        usageMap.put(tagGroup,reservedUsed);
        costMap.put(tagGroup,reservedUsed * reservation.reservationHourlyCost);
      }
      if (reservedUnused > 0) {
        TagGroup unusedTagGroup=new TagGroup(tagGroup.account,tagGroup.region,tagGroup.zone,tagGroup.product,Operation.getUnusedInstances(utilization),tagGroup.usageType,null);
        usageMap.put(unusedTagGroup,reservedUnused);
        costMap.put(unusedTagGroup,reservedUnused * reservation.reservationHourlyCost);
      }
      if (bonusReserved > 0) {
        TagGroup bonusTagGroup=new TagGroup(tagGroup.account,tagGroup.region,tagGroup.zone,tagGroup.product,Operation.getBonusReservedInstances(utilization),tagGroup.usageType,null);
        usageMap.put(bonusTagGroup,bonusReserved);
        costMap.put(bonusTagGroup,bonusReserved * reservation.reservationHourlyCost);
      }
      if (reservation.capacity > 0) {
        TagGroup upfrontTagGroup=new TagGroup(tagGroup.account,tagGroup.region,tagGroup.zone,tagGroup.product,Operation.getUpfrontAmortized(utilization),tagGroup.usageType,null);
        costMap.put(upfrontTagGroup,reservation.capacity * reservation.upfrontAmortized);
      }
    }
    toMarkOwners.add(new TagGroup(tagGroup.account,tagGroup.region,tagGroup.zone,tagGroup.product,Operation.getBonusReservedInstances(utilization),tagGroup.usageType,null));
  }
  Set<TagGroup> toMarkBorrowing=Sets.newTreeSet();
  for (  TagGroup tagGroup : usageData.getTagGroups()) {
    if (tagGroup.resourceGroup == null && tagGroup.product == Product.ec2_instance && (!toMarkOwners.contains(tagGroup) && tagGroup.operation == Operation.getReservedInstances(utilization) || toMarkOwners.contains(tagGroup) && tagGroup.operation == Operation.getBonusReservedInstances(utilization))) {
      toMarkBorrowing.add(tagGroup);
    }
  }
  for (  TagGroup tagGroup : toMarkBorrowing) {
    for (int i=0; i < usageData.getNum(); i++) {
      Map<TagGroup,Double> usageMap=usageData.getData(i);
      Map<TagGroup,Double> costMap=costData.getData(i);
      borrow(i,startMilli + i * AwsUtils.hourMillis,usageMap,costMap,reservationBorrowers.get(tagGroup.account),tagGroup,utilization,reservationOwners.contains(tagGroup.account));
    }
  }
}","private void processReservations(Ec2InstanceReservationPrice.ReservationUtilization utilization){
  if (config.reservationService.getTagGroups(utilization).size() == 0)   return;
  ReadWriteData usageData=usageDataByProduct.get(null);
  ReadWriteData costData=costDataByProduct.get(null);
  Map<Account,List<Account>> reservationAccounts=config.accountService.getReservationAccounts();
  Set<Account> reservationOwners=reservationAccounts.keySet();
  Map<Account,List<Account>> reservationBorrowers=Maps.newHashMap();
  for (  Account account : reservationAccounts.keySet()) {
    List<Account> list=reservationAccounts.get(account);
    for (    Account borrowingAccount : list) {
      if (borrowingAccount.name.equals(account.name))       continue;
      List<Account> from=reservationBorrowers.get(borrowingAccount);
      if (from == null) {
        from=Lists.newArrayList();
        reservationBorrowers.put(borrowingAccount,from);
      }
      from.add(account);
    }
  }
  Set<TagGroup> toMarkOwners=Sets.newTreeSet();
  for (  TagGroup tagGroup : config.reservationService.getTagGroups(utilization)) {
    for (int i=0; i < usageData.getNum(); i++) {
      Map<TagGroup,Double> usageMap=usageData.getData(i);
      Map<TagGroup,Double> costMap=costData.getData(i);
      Double existing=usageMap.get(tagGroup);
      double value=existing == null ? 0 : existing;
      ReservationService.ReservationInfo reservation=config.reservationService.getReservation(startMilli + i * AwsUtils.hourMillis,tagGroup,utilization);
      double reservedUsed=Math.min(value,reservation.capacity);
      double reservedUnused=reservation.capacity - reservedUsed;
      double bonusReserved=value > reservation.capacity ? value - reservation.capacity : 0;
      if (reservedUsed > 0 || existing != null) {
        usageMap.put(tagGroup,reservedUsed);
        costMap.put(tagGroup,reservedUsed * reservation.reservationHourlyCost);
      }
      if (reservedUnused > 0) {
        TagGroup unusedTagGroup=new TagGroup(tagGroup.account,tagGroup.region,tagGroup.zone,tagGroup.product,Operation.getUnusedInstances(utilization),tagGroup.usageType,null);
        usageMap.put(unusedTagGroup,reservedUnused);
        costMap.put(unusedTagGroup,reservedUnused * reservation.reservationHourlyCost);
      }
      if (bonusReserved > 0) {
        TagGroup bonusTagGroup=new TagGroup(tagGroup.account,tagGroup.region,tagGroup.zone,tagGroup.product,Operation.getBonusReservedInstances(utilization),tagGroup.usageType,null);
        usageMap.put(bonusTagGroup,bonusReserved);
        costMap.put(bonusTagGroup,bonusReserved * reservation.reservationHourlyCost);
      }
      if (reservation.capacity > 0) {
        TagGroup upfrontTagGroup=new TagGroup(tagGroup.account,tagGroup.region,tagGroup.zone,tagGroup.product,Operation.getUpfrontAmortized(utilization),tagGroup.usageType,null);
        costMap.put(upfrontTagGroup,reservation.capacity * reservation.upfrontAmortized);
      }
    }
    toMarkOwners.add(new TagGroup(tagGroup.account,tagGroup.region,tagGroup.zone,tagGroup.product,Operation.getReservedInstances(utilization),tagGroup.usageType,null));
  }
  Set<TagGroup> toMarkBorrowing=Sets.newTreeSet();
  for (  TagGroup tagGroup : usageData.getTagGroups()) {
    if (tagGroup.resourceGroup == null && tagGroup.product == Product.ec2_instance && (!toMarkOwners.contains(tagGroup) && tagGroup.operation == Operation.getReservedInstances(utilization) || toMarkOwners.contains(tagGroup) && tagGroup.operation == Operation.getBonusReservedInstances(utilization))) {
      toMarkBorrowing.add(tagGroup);
    }
  }
  for (  TagGroup tagGroup : toMarkBorrowing) {
    for (int i=0; i < usageData.getNum(); i++) {
      Map<TagGroup,Double> usageMap=usageData.getData(i);
      Map<TagGroup,Double> costMap=costData.getData(i);
      borrow(i,startMilli + i * AwsUtils.hourMillis,usageMap,costMap,reservationBorrowers.get(tagGroup.account),tagGroup,utilization,reservationOwners.contains(tagGroup.account));
    }
  }
}"
89957,"private void sendOndemandCostAlert(){
  if (ondemandThreshold == null || StringUtils.isEmpty(fromEmail) || StringUtils.isEmpty(alertEmails) || new Date().getTime() < lastAlertMillis() + AwsUtils.hourMillis * 24)   return;
  Map<Long,Map<Ec2InstanceReservationPrice.Key,Double>> ondemandCosts=getOndemandCosts(lastAlertMillis() + AwsUtils.hourMillis * 24);
  Long maxHour=null;
  double maxTotal=ondemandThreshold;
  for (  Long hour : ondemandCosts.keySet()) {
    double total=0;
    for (    Double value : ondemandCosts.get(hour).values())     total+=value;
    if (total > maxTotal) {
      maxHour=hour;
      maxTotal=total;
    }
  }
  if (maxHour != null) {
    NumberFormat numberFormat=NumberFormat.getNumberInstance(Locale.US);
    String subject=String.format(""String_Node_Str"",numberFormat.format(maxTotal),AwsUtils.dateFormatter.print(maxHour));
    StringBuilder body=new StringBuilder();
    body.append(String.format(""String_Node_Str"",numberFormat.format(maxTotal),AwsUtils.dateFormatter.print(maxHour)));
    TreeMap<Double,String> costs=Maps.newTreeMap();
    for (    Map.Entry<Ec2InstanceReservationPrice.Key,Double> entry : ondemandCosts.get(maxHour).entrySet()) {
      costs.put(entry.getValue(),entry.getKey().region + ""String_Node_Str"" + entry.getKey().usageType+ ""String_Node_Str"");
    }
    for (    Double cost : costs.descendingKeySet()) {
      if (cost > 0)       body.append(costs.get(cost)).append(""String_Node_Str"" + numberFormat.format(cost)).append(""String_Node_Str"");
    }
    body.append(""String_Node_Str"" + urlPrefix + ""String_Node_Str"");
    SendEmailRequest request=new SendEmailRequest();
    request.withSource(fromEmail);
    List<String> emails=Lists.newArrayList(alertEmails.split(""String_Node_Str""));
    request.withDestination(new Destination(emails));
    request.withMessage(new Message(new Content(subject),new Body().withHtml(new Content(body.toString()))));
    AmazonSimpleEmailServiceClient emailService=AwsUtils.getAmazonSimpleEmailServiceClient();
    try {
      emailService.sendEmail(request);
      updateLastAlertMillis(maxHour);
      logger.info(""String_Node_Str"" + maxHour);
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
}","private void sendOndemandCostAlert(){
  if (ondemandThreshold == null || StringUtils.isEmpty(fromEmail) || StringUtils.isEmpty(alertEmails) || endMilli < lastAlertMillis() + AwsUtils.hourMillis * 24)   return;
  Map<Long,Map<Ec2InstanceReservationPrice.Key,Double>> ondemandCosts=getOndemandCosts(lastAlertMillis() + AwsUtils.hourMillis);
  Long maxHour=null;
  double maxTotal=ondemandThreshold;
  for (  Long hour : ondemandCosts.keySet()) {
    double total=0;
    for (    Double value : ondemandCosts.get(hour).values())     total+=value;
    if (total > maxTotal) {
      maxHour=hour;
      maxTotal=total;
      logger.info(""String_Node_Str"" + AwsUtils.dateFormatter.print(hour) + ""String_Node_Str""+ NumberFormat.getNumberInstance(Locale.US).format(total));
    }
 else     logger.info(""String_Node_Str"" + AwsUtils.dateFormatter.print(hour) + ""String_Node_Str""+ NumberFormat.getNumberInstance(Locale.US).format(total));
  }
  if (maxHour != null) {
    NumberFormat numberFormat=NumberFormat.getNumberInstance(Locale.US);
    String subject=String.format(""String_Node_Str"",numberFormat.format(maxTotal),AwsUtils.dateFormatter.print(maxHour));
    StringBuilder body=new StringBuilder();
    body.append(String.format(""String_Node_Str"",numberFormat.format(maxTotal),AwsUtils.dateFormatter.print(maxHour)));
    TreeMap<Double,String> costs=Maps.newTreeMap();
    for (    Map.Entry<Ec2InstanceReservationPrice.Key,Double> entry : ondemandCosts.get(maxHour).entrySet()) {
      costs.put(entry.getValue(),entry.getKey().region + ""String_Node_Str"" + entry.getKey().usageType+ ""String_Node_Str"");
    }
    for (    Double cost : costs.descendingKeySet()) {
      if (cost > 0)       body.append(costs.get(cost)).append(""String_Node_Str"" + numberFormat.format(cost)).append(""String_Node_Str"");
    }
    body.append(""String_Node_Str"" + urlPrefix + ""String_Node_Str"");
    SendEmailRequest request=new SendEmailRequest();
    request.withSource(fromEmail);
    List<String> emails=Lists.newArrayList(alertEmails.split(""String_Node_Str""));
    request.withDestination(new Destination(emails));
    request.withMessage(new Message(new Content(subject),new Body().withHtml(new Content(body.toString()))));
    AmazonSimpleEmailServiceClient emailService=AwsUtils.getAmazonSimpleEmailServiceClient();
    try {
      emailService.sendEmail(request);
      updateLastAlertMillis(endMilli);
      logger.info(""String_Node_Str"" + endMilli);
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"",e);
    }
  }
}"
89958,"private Map<Long,Map<Ec2InstanceReservationPrice.Key,Double>> getOndemandCosts(long fromMillis){
  Map<Long,Map<Ec2InstanceReservationPrice.Key,Double>> ondemandCostsByHour=Maps.newHashMap();
  ReadWriteData costs=costDataByProduct.get(null);
  Collection<TagGroup> tagGroups=costs.getTagGroups();
  for (int i=0; i < costs.getNum(); i++) {
    Long millis=startMilli + i * AwsUtils.hourMillis;
    if (millis <= fromMillis)     continue;
    Map<Ec2InstanceReservationPrice.Key,Double> ondemandCosts=Maps.newHashMap();
    ondemandCostsByHour.put(millis,ondemandCosts);
    Map<TagGroup,Double> data=costs.getData(i);
    for (    TagGroup tagGroup : tagGroups) {
      if (tagGroup.product == Product.ec2_instance && tagGroup.operation == Operation.ondemandInstances && data.get(tagGroup) != null) {
        Ec2InstanceReservationPrice.Key key=new Ec2InstanceReservationPrice.Key(tagGroup.region,tagGroup.usageType);
        if (ondemandCosts.get(key) != null)         ondemandCosts.put(key,data.get(tagGroup) + ondemandCosts.get(key));
 else         ondemandCosts.put(key,data.get(tagGroup));
      }
    }
  }
  return ondemandCostsByHour;
}","private Map<Long,Map<Ec2InstanceReservationPrice.Key,Double>> getOndemandCosts(long fromMillis){
  Map<Long,Map<Ec2InstanceReservationPrice.Key,Double>> ondemandCostsByHour=Maps.newHashMap();
  ReadWriteData costs=costDataByProduct.get(null);
  Collection<TagGroup> tagGroups=costs.getTagGroups();
  for (int i=0; i < costs.getNum(); i++) {
    Long millis=startMilli + i * AwsUtils.hourMillis;
    if (millis < fromMillis)     continue;
    Map<Ec2InstanceReservationPrice.Key,Double> ondemandCosts=Maps.newHashMap();
    ondemandCostsByHour.put(millis,ondemandCosts);
    Map<TagGroup,Double> data=costs.getData(i);
    for (    TagGroup tagGroup : tagGroups) {
      if (tagGroup.product == Product.ec2_instance && tagGroup.operation == Operation.ondemandInstances && data.get(tagGroup) != null) {
        Ec2InstanceReservationPrice.Key key=new Ec2InstanceReservationPrice.Key(tagGroup.region,tagGroup.usageType);
        if (ondemandCosts.get(key) != null)         ondemandCosts.put(key,data.get(tagGroup) + ondemandCosts.get(key));
 else         ondemandCosts.put(key,data.get(tagGroup));
      }
    }
  }
  return ondemandCostsByHour;
}"
89959,"@Override public int compareTo(Tag t){
  if (t instanceof Operation) {
    Operation o=(Operation)t;
    int result=this.seq - o.seq;
    return result == 0 ? this.name.compareTo(t.name) : result;
  }
 else   return this.name.compareTo(t.name);
}","@Override public int compareTo(Tag t){
  if (t instanceof Operation) {
    Operation o=(Operation)t;
    int result=this.seq - o.seq;
    return result == 0 ? this.name.compareTo(t.name) : result;
  }
 else   return super.compareTo(t);
}"
89960,"public int compareTo(Tag t){
  int result=(""String_Node_Str"" + this.name).compareTo(""String_Node_Str"" + t.name);
  return result;
}","public int compareTo(Tag t){
  if (t == aggregated)   return -t.compareTo(this);
  int result=(""String_Node_Str"" + this.name).compareTo(""String_Node_Str"" + t.name);
  return result;
}"
89961,"private File createImage(ApplicationGroup appgroup) throws IOException {
  Map<String,Double> costs=Maps.newHashMap();
  DateTime end=new DateTime(DateTimeZone.UTC).withDayOfWeek(1).withMillisOfDay(0);
  Interval interval=new Interval(end.minusWeeks(numWeeks),end);
  for (  Product product : products) {
    List<ResourceGroup> resourceGroups=getResourceGroups(appgroup,product);
    if (resourceGroups.size() == 0)     continue;
    DataManager dataManager=config.managers.getCostManager(product,ConsolidateType.weekly);
    TagLists tagLists=new TagLists(accounts,regions,null,Lists.newArrayList(product),null,null,resourceGroups);
    Map<Tag,double[]> data=dataManager.getData(interval,tagLists,TagType.Product,AggregateType.none,false);
    for (    Tag tag : data.keySet()) {
      for (int week=0; week < numWeeks; week++) {
        String key=tag + ""String_Node_Str"" + week;
        if (costs.containsKey(key))         costs.put(key,data.get(tag)[week] + costs.get(key));
 else         costs.put(key,data.get(tag)[week]);
      }
    }
  }
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  for (  Product product : products) {
    for (int week=numWeeks - 1; week >= 0; week--) {
      String weekStr=String.format(""String_Node_Str"",formatter.print(end.minusWeeks(week + 1)).substring(5),formatter.print(end.minusWeeks(week)).substring(5));
      dataset.addValue(costs.get(product + ""String_Node_Str"" + week),product.name,weekStr);
    }
  }
  JFreeChart chart=ChartFactory.createBarChart3D(appgroup.getDisplayName() + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dataset,PlotOrientation.VERTICAL,true,false,false);
  CategoryPlot categoryplot=(CategoryPlot)chart.getPlot();
  BarRenderer3D renderer=(BarRenderer3D)categoryplot.getRenderer();
  renderer.setItemLabelAnchorOffset(10.0);
  TextTitle title=chart.getTitle();
  title.setFont(title.getFont().deriveFont((title.getFont().getSize() - 3)));
  renderer.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator(){
    public java.lang.String generateLabel(    org.jfree.data.category.CategoryDataset dataset,    int row,    int column){
      return costFormatter.format(dataset.getValue(row,column));
    }
  }
);
  renderer.setBaseItemLabelsVisible(true);
  renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.OUTSIDE12,TextAnchor.BASELINE_CENTER));
  NumberAxis numberaxis=(NumberAxis)categoryplot.getRangeAxis();
  numberaxis.setNumberFormatOverride(costFormatter);
  BufferedImage image=chart.createBufferedImage(1200,400);
  File outputfile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  ImageIO.write(image,""String_Node_Str"",outputfile);
  return outputfile;
}","private File createImage(ApplicationGroup appgroup) throws IOException {
  Map<String,Double> costs=Maps.newHashMap();
  DateTime end=new DateTime(DateTimeZone.UTC).withDayOfWeek(1).withMillisOfDay(0);
  Interval interval=new Interval(end.minusWeeks(numWeeks),end);
  for (  Product product : products) {
    List<ResourceGroup> resourceGroups=getResourceGroups(appgroup,product);
    if (resourceGroups.size() == 0)     continue;
    DataManager dataManager=config.managers.getCostManager(product,ConsolidateType.weekly);
    TagLists tagLists=new TagLists(accounts,regions,null,Lists.newArrayList(product),null,null,resourceGroups);
    Map<Tag,double[]> data=dataManager.getData(interval,tagLists,TagType.Product,AggregateType.none,false);
    for (    Tag tag : data.keySet()) {
      for (int week=0; week < numWeeks; week++) {
        String key=tag + ""String_Node_Str"" + week;
        if (costs.containsKey(key))         costs.put(key,data.get(tag)[week] + costs.get(key));
 else         costs.put(key,data.get(tag)[week]);
      }
    }
  }
  boolean hasData=false;
  for (  Map.Entry<String,Double> entry : costs.entrySet()) {
    if (!entry.getKey().contains(""String_Node_Str"") && entry.getValue() != null && entry.getValue() >= 0.1) {
      hasData=true;
      break;
    }
  }
  if (!hasData)   return null;
  DefaultCategoryDataset dataset=new DefaultCategoryDataset();
  for (  Product product : products) {
    for (int week=0; week < numWeeks; week++) {
      String weekStr=String.format(""String_Node_Str"",formatter.print(end.minusWeeks(numWeeks - week)).substring(5),formatter.print(end.minusWeeks(numWeeks - week - 1)).substring(5));
      dataset.addValue(costs.get(product + ""String_Node_Str"" + week),product.name,weekStr);
    }
  }
  JFreeChart chart=ChartFactory.createBarChart3D(appgroup.getDisplayName() + ""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",dataset,PlotOrientation.VERTICAL,true,false,false);
  CategoryPlot categoryplot=(CategoryPlot)chart.getPlot();
  BarRenderer3D renderer=(BarRenderer3D)categoryplot.getRenderer();
  renderer.setItemLabelAnchorOffset(10.0);
  TextTitle title=chart.getTitle();
  title.setFont(title.getFont().deriveFont((title.getFont().getSize() - 3)));
  renderer.setBaseItemLabelGenerator(new StandardCategoryItemLabelGenerator(){
    public java.lang.String generateLabel(    org.jfree.data.category.CategoryDataset dataset,    int row,    int column){
      return costFormatter.format(dataset.getValue(row,column));
    }
  }
);
  renderer.setBaseItemLabelsVisible(true);
  renderer.setBasePositiveItemLabelPosition(new ItemLabelPosition(ItemLabelAnchor.OUTSIDE12,TextAnchor.BASELINE_CENTER));
  NumberAxis numberaxis=(NumberAxis)categoryplot.getRangeAxis();
  numberaxis.setNumberFormatOverride(costFormatter);
  BufferedImage image=chart.createBufferedImage(1200,400);
  File outputfile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  ImageIO.write(image,""String_Node_Str"",outputfile);
  return outputfile;
}"
89962,"private MimeBodyPart constructEmail(int index,ApplicationGroup appGroup,StringBuilder body) throws IOException, MessagingException {
  if (index == 0 && !StringUtils.isEmpty(headerNote))   body.append(headerNote);
  numberFormatter.setMaximumFractionDigits(1);
  numberFormatter.setMinimumFractionDigits(1);
  File file=createImage(appGroup);
  DateTime end=new DateTime(DateTimeZone.UTC).withDayOfWeek(1).withMillisOfDay(0);
  String link=getLink(""String_Node_Str"",ConsolidateType.hourly,appGroup,accounts,regions,end.minusWeeks(numWeeks),end);
  body.append(String.format(""String_Node_Str"",link,appGroup.getDisplayName()));
  body.append(""String_Node_Str"");
  body.append(""String_Node_Str"");
  for (int i=0; i <= accounts.size(); i++) {
    int cols=i == accounts.size() ? 1 : regions.size();
    String accName=i == accounts.size() ? ""String_Node_Str"" : accounts.get(i).name;
    body.append(String.format(""String_Node_Str"",cols)).append(accName).append(""String_Node_Str"");
  }
  body.append(""String_Node_Str"");
  body.append(""String_Node_Str"");
  for (int i=0; i < accounts.size(); i++) {
    boolean first=true;
    for (    Region region : regions) {
      body.append(""String_Node_Str"" + (first ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"").append(region.name).append(""String_Node_Str"");
      first=false;
    }
  }
  body.append(""String_Node_Str"");
  Map<String,Double> costs=Maps.newHashMap();
  Interval interval=new Interval(end.minusWeeks(numWeeks),end);
  double[] total=new double[numWeeks];
  for (  Product product : products) {
    List<ResourceGroup> resourceGroups=getResourceGroups(appGroup,product);
    if (resourceGroups.size() == 0)     continue;
    DataManager dataManager=config.managers.getCostManager(product,ConsolidateType.weekly);
    for (int i=0; i < accounts.size(); i++) {
      List<Account> accountList=Lists.newArrayList(accounts.get(i));
      TagLists tagLists=new TagLists(accountList,regions,null,Lists.newArrayList(product),null,null,resourceGroups);
      Map<Tag,double[]> data=dataManager.getData(interval,tagLists,TagType.Region,AggregateType.none,false);
      for (      Tag tag : data.keySet()) {
        for (int week=0; week < numWeeks; week++) {
          String key=accounts.get(i) + ""String_Node_Str"" + tag+ ""String_Node_Str""+ week;
          if (costs.containsKey(key))           costs.put(key,data.get(tag)[week] + costs.get(key));
 else           costs.put(key,data.get(tag)[week]);
          total[week]+=data.get(tag)[week];
        }
      }
    }
  }
  boolean firstLine=true;
  DateTime currentWeekEnd=end;
  for (int week=0; week < numWeeks; week++) {
    String weekStr;
    if (week == 0)     weekStr=""String_Node_Str"";
 else     weekStr=week + ""String_Node_Str"";
    String background=week % 2 == 1 ? ""String_Node_Str"" : ""String_Node_Str"";
    body.append(String.format(""String_Node_Str"",background,weekStr,formatter.print(currentWeekEnd.minusWeeks(1)).substring(5),formatter.print(currentWeekEnd).substring(5)));
    for (int i=0; i < accounts.size(); i++) {
      Account account=accounts.get(i);
      for (int j=0; j < regions.size(); j++) {
        Region region=regions.get(j);
        String key=account + ""String_Node_Str"" + region+ ""String_Node_Str""+ week;
        double cost=costs.get(key) == null ? 0 : costs.get(key);
        Double lastCost=week == numWeeks - 1 ? null : costs.get(account + ""String_Node_Str"" + region+ ""String_Node_Str""+ (week + 1));
        link=getLink(""String_Node_Str"",ConsolidateType.daily,appGroup,Lists.newArrayList(account),Lists.newArrayList(region),currentWeekEnd.minusWeeks(1),currentWeekEnd);
        body.append(getValueCell(cost,lastCost,link,firstLine));
      }
    }
    link=getLink(""String_Node_Str"",ConsolidateType.daily,appGroup,accounts,regions,currentWeekEnd.minusWeeks(1),currentWeekEnd);
    body.append(getValueCell(total[week],week == numWeeks - 1 ? null : total[week + 1],link,firstLine));
    body.append(""String_Node_Str"");
    firstLine=false;
    currentWeekEnd=currentWeekEnd.minusWeeks(1);
  }
  body.append(""String_Node_Str"");
  numberFormatter.setMaximumFractionDigits(0);
  numberFormatter.setMinimumFractionDigits(0);
  if (!StringUtils.isEmpty(throughputMetrics))   body.append(throughputMetrics);
  body.append(""String_Node_Str"" + index + ""String_Node_Str"");
  for (  Map.Entry<String,List<String>> entry : appGroup.data.entrySet()) {
    String product=entry.getKey();
    List<String> selected=entry.getValue();
    if (selected == null || selected.size() == 0)     continue;
    link=getLink(""String_Node_Str"",ConsolidateType.hourly,appGroup,accounts,regions,end.minusWeeks(numWeeks),end);
    body.append(String.format(""String_Node_Str"",product,link,appGroup.getDisplayName()));
    for (    String name : selected)     body.append(""String_Node_Str"").append(name).append(""String_Node_Str"");
  }
  body.append(""String_Node_Str"");
  MimeBodyPart mimeBodyPart=new MimeBodyPart();
  mimeBodyPart.setFileName(file.getName());
  DataSource ds=new ByteArrayDataSource(new FileInputStream(file),""String_Node_Str"");
  mimeBodyPart.setDataHandler(new DataHandler(ds));
  mimeBodyPart.setHeader(""String_Node_Str"",""String_Node_Str"" + index + ""String_Node_Str"");
  mimeBodyPart.setHeader(""String_Node_Str"",""String_Node_Str"");
  mimeBodyPart.setDisposition(MimeBodyPart.INLINE);
  file.delete();
  return mimeBodyPart;
}","private MimeBodyPart constructEmail(int index,ApplicationGroup appGroup,StringBuilder body) throws IOException, MessagingException {
  if (index == 0 && !StringUtils.isEmpty(headerNote))   body.append(headerNote);
  numberFormatter.setMaximumFractionDigits(1);
  numberFormatter.setMinimumFractionDigits(1);
  File file=createImage(appGroup);
  if (file == null)   return null;
  DateTime end=new DateTime(DateTimeZone.UTC).withDayOfWeek(1).withMillisOfDay(0);
  String link=getLink(""String_Node_Str"",ConsolidateType.hourly,appGroup,accounts,regions,end.minusWeeks(numWeeks),end);
  body.append(String.format(""String_Node_Str"",link,appGroup.getDisplayName()));
  body.append(""String_Node_Str"");
  body.append(""String_Node_Str"");
  for (int i=0; i <= accounts.size(); i++) {
    int cols=i == accounts.size() ? 1 : regions.size();
    String accName=i == accounts.size() ? ""String_Node_Str"" : accounts.get(i).name;
    body.append(String.format(""String_Node_Str"",cols)).append(accName).append(""String_Node_Str"");
  }
  body.append(""String_Node_Str"");
  body.append(""String_Node_Str"");
  for (int i=0; i < accounts.size(); i++) {
    boolean first=true;
    for (    Region region : regions) {
      body.append(""String_Node_Str"" + (first ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"").append(region.name).append(""String_Node_Str"");
      first=false;
    }
  }
  body.append(""String_Node_Str"");
  Map<String,Double> costs=Maps.newHashMap();
  Interval interval=new Interval(end.minusWeeks(numWeeks),end);
  double[] total=new double[numWeeks];
  for (  Product product : products) {
    List<ResourceGroup> resourceGroups=getResourceGroups(appGroup,product);
    if (resourceGroups.size() == 0)     continue;
    DataManager dataManager=config.managers.getCostManager(product,ConsolidateType.weekly);
    for (int i=0; i < accounts.size(); i++) {
      List<Account> accountList=Lists.newArrayList(accounts.get(i));
      TagLists tagLists=new TagLists(accountList,regions,null,Lists.newArrayList(product),null,null,resourceGroups);
      Map<Tag,double[]> data=dataManager.getData(interval,tagLists,TagType.Region,AggregateType.none,false);
      for (      Tag tag : data.keySet()) {
        for (int week=0; week < numWeeks; week++) {
          String key=accounts.get(i) + ""String_Node_Str"" + tag+ ""String_Node_Str""+ week;
          if (costs.containsKey(key))           costs.put(key,data.get(tag)[week] + costs.get(key));
 else           costs.put(key,data.get(tag)[week]);
          total[week]+=data.get(tag)[week];
        }
      }
    }
  }
  boolean firstLine=true;
  DateTime currentWeekEnd=end;
  for (int week=numWeeks - 1; week >= 0; week--) {
    String weekStr;
    if (week == numWeeks - 1)     weekStr=""String_Node_Str"";
 else     weekStr=(numWeeks - week - 1) + ""String_Node_Str"";
    String background=week % 2 == 1 ? ""String_Node_Str"" : ""String_Node_Str"";
    body.append(String.format(""String_Node_Str"",background,weekStr,formatter.print(currentWeekEnd.minusWeeks(1)).substring(5),formatter.print(currentWeekEnd).substring(5)));
    for (int i=0; i < accounts.size(); i++) {
      Account account=accounts.get(i);
      for (int j=0; j < regions.size(); j++) {
        Region region=regions.get(j);
        String key=account + ""String_Node_Str"" + region+ ""String_Node_Str""+ week;
        double cost=costs.get(key) == null ? 0 : costs.get(key);
        Double lastCost=week == 0 ? null : costs.get(account + ""String_Node_Str"" + region+ ""String_Node_Str""+ (week - 1));
        link=getLink(""String_Node_Str"",ConsolidateType.daily,appGroup,Lists.newArrayList(account),Lists.newArrayList(region),currentWeekEnd.minusWeeks(1),currentWeekEnd);
        body.append(getValueCell(cost,lastCost,link,firstLine));
      }
    }
    link=getLink(""String_Node_Str"",ConsolidateType.daily,appGroup,accounts,regions,currentWeekEnd.minusWeeks(1),currentWeekEnd);
    body.append(getValueCell(total[week],week == 0 ? null : total[week - 1],link,firstLine));
    body.append(""String_Node_Str"");
    firstLine=false;
    currentWeekEnd=currentWeekEnd.minusWeeks(1);
  }
  body.append(""String_Node_Str"");
  numberFormatter.setMaximumFractionDigits(0);
  numberFormatter.setMinimumFractionDigits(0);
  if (!StringUtils.isEmpty(throughputMetrics))   body.append(throughputMetrics);
  body.append(""String_Node_Str"" + index + ""String_Node_Str"");
  for (  Map.Entry<String,List<String>> entry : appGroup.data.entrySet()) {
    String product=entry.getKey();
    List<String> selected=entry.getValue();
    if (selected == null || selected.size() == 0)     continue;
    link=getLink(""String_Node_Str"",ConsolidateType.hourly,appGroup,accounts,regions,end.minusWeeks(numWeeks),end);
    body.append(String.format(""String_Node_Str"",getResourceGroupsDisplayName(product),link,appGroup.getDisplayName()));
    for (    String name : selected)     body.append(""String_Node_Str"").append(name).append(""String_Node_Str"");
  }
  body.append(""String_Node_Str"");
  MimeBodyPart mimeBodyPart=new MimeBodyPart();
  mimeBodyPart.setFileName(file.getName());
  DataSource ds=new ByteArrayDataSource(new FileInputStream(file),""String_Node_Str"");
  mimeBodyPart.setDataHandler(new DataHandler(ds));
  mimeBodyPart.setHeader(""String_Node_Str"",""String_Node_Str"" + index + ""String_Node_Str"");
  mimeBodyPart.setHeader(""String_Node_Str"",""String_Node_Str"");
  mimeBodyPart.setDisposition(MimeBodyPart.INLINE);
  file.delete();
  return mimeBodyPart;
}"
89963,"/** 
 * We check if new data is available periodically
 * @throws Exception
 */
@Override protected void poll() throws Exception {
  logger.info(dbName + ""String_Node_Str"");
  for (  DateTime key : fileCache.keySet()) {
    File file=fileCache.get(key);
    try {
      logger.info(""String_Node_Str"" + file);
      boolean downloaded=downloadFile(file);
      if (downloaded) {
        ReadOnlyData newData=loadDataFromFile(file);
        data.put(key,newData);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"" + file,e);
    }
  }
}","/** 
 * We check if new data is available periodically
 * @throws Exception
 */
@Override protected void poll() throws Exception {
  logger.info(dbName + ""String_Node_Str"");
  for (  DateTime key : Sets.newHashSet(fileCache.keySet())) {
    File file=fileCache.get(key);
    try {
      logger.info(""String_Node_Str"" + file);
      boolean downloaded=downloadFile(file);
      if (downloaded) {
        ReadOnlyData newData=loadDataFromFile(file);
        data.put(key,newData);
        fileCache.put(key,file);
      }
    }
 catch (    Exception e) {
      logger.error(""String_Node_Str"" + file,e);
    }
  }
}"
89964,"@Override protected void poll() throws Exception {
  List<S3ObjectSummary> objectSummaries=AwsUtils.listAllObjects(config.billingS3BucketName,config.billingS3BucketPrefix);
  logger.info(""String_Node_Str"" + objectSummaries.size() + ""String_Node_Str"");
  TreeMap<DateTime,S3ObjectSummary> filesToProcess=Maps.newTreeMap();
  Map<DateTime,S3ObjectSummary> monitorFilesToProcess=Maps.newTreeMap();
  DateTime currentTime=new DateTime(DateTimeZone.UTC);
  for (  S3ObjectSummary objectSummary : objectSummaries) {
    String fileKey=objectSummary.getKey();
    DateTime dataTime=AwsUtils.getDateTimeFromFileNameWithTags(fileKey);
    boolean withTags=true;
    if (dataTime == null) {
      dataTime=AwsUtils.getDateTimeFromFileName(fileKey);
      withTags=false;
    }
    if (dataTime != null && !dataTime.isBefore(config.startDate)) {
      if (!filesToProcess.containsKey(dataTime) || withTags && config.resourceService != null || !withTags && config.resourceService == null)       filesToProcess.put(dataTime,objectSummary);
 else       logger.info(""String_Node_Str"" + objectSummary.getKey());
    }
 else {
      logger.info(""String_Node_Str"" + objectSummary.getKey());
    }
  }
  for (  S3ObjectSummary objectSummary : objectSummaries) {
    String fileKey=objectSummary.getKey();
    DateTime dataTime=AwsUtils.getDateTimeFromFileNameWithMonitoring(fileKey);
    if (dataTime != null && !dataTime.isBefore(config.startDate)) {
      monitorFilesToProcess.put(dataTime,objectSummary);
    }
  }
  for (  DateTime dataTime : filesToProcess.keySet()) {
    S3ObjectSummary objectSummary=filesToProcess.get(dataTime);
    startMilli=endMilli=dataTime.getMillis();
    init();
    long lastProcessed=AwsUtils.getLastModified(config.workS3BucketName,config.workS3BucketPrefix + ""String_Node_Str"" + AwsUtils.monthDateFormat.print(dataTime)) - 3 * 3600000L;
    if (objectSummary.getLastModified().getTime() < lastProcessed) {
      logger.info(""String_Node_Str"" + objectSummary.getKey() + ""String_Node_Str"");
      continue;
    }
    String fileKey=objectSummary.getKey();
    File file=new File(config.localDir,fileKey.substring(fileKey.lastIndexOf(""String_Node_Str"") + 1));
    logger.info(""String_Node_Str"" + fileKey + ""String_Node_Str"");
    boolean downloaded=AwsUtils.downloadFileIfChangedSince(config.billingS3BucketName,config.billingS3BucketPrefix,file,lastProcessed);
    if (downloaded)     logger.info(""String_Node_Str"" + fileKey);
 else {
      logger.info(""String_Node_Str"" + fileKey + ""String_Node_Str"");
    }
    logger.info(""String_Node_Str"" + fileKey + ""String_Node_Str"");
    boolean withTags=fileKey.contains(""String_Node_Str"");
    processingMonitor=false;
    processBillingZipFile(file,withTags);
    logger.info(""String_Node_Str"" + fileKey);
    S3ObjectSummary monitorObjectSummary=monitorFilesToProcess.get(dataTime);
    if (monitorObjectSummary != null) {
      String monitorFileKey=monitorObjectSummary.getKey();
      logger.info(""String_Node_Str"" + monitorFileKey + ""String_Node_Str"");
      File monitorFile=new File(config.localDir,monitorFileKey.substring(monitorFileKey.lastIndexOf(""String_Node_Str"") + 1));
      logger.info(""String_Node_Str"" + monitorFileKey + ""String_Node_Str"");
      downloaded=AwsUtils.downloadFileIfChangedSince(config.billingS3BucketName,config.billingS3BucketPrefix,monitorFile,lastProcessed);
      if (downloaded)       logger.info(""String_Node_Str"" + monitorFile);
 else       logger.warn(monitorFile + ""String_Node_Str"");
      FileInputStream in=new FileInputStream(monitorFile);
      try {
        processBillingFile(monitorFile.getName(),in,withTags);
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"" + monitorFile,e);
      }
 finally {
        in.close();
      }
    }
    if (Months.monthsBetween(dataTime,currentTime).getMonths() == 0) {
      int hours=(int)((endMilli - startMilli) / 3600000L);
      logger.info(""String_Node_Str"" + hours);
      cutData(hours);
    }
    processReservations();
    if (withTags)     config.resourceService.commit();
    logger.info(""String_Node_Str"" + dataTime + ""String_Node_Str"");
    archive();
    logger.info(""String_Node_Str"" + dataTime);
    if (dataTime.equals(filesToProcess.lastKey()))     sendOndemandCostAlert();
  }
  logger.info(""String_Node_Str"");
}","@Override protected void poll() throws Exception {
  List<S3ObjectSummary> objectSummaries=AwsUtils.listAllObjects(config.billingS3BucketName,config.billingS3BucketPrefix);
  logger.info(""String_Node_Str"" + objectSummaries.size() + ""String_Node_Str"");
  TreeMap<DateTime,S3ObjectSummary> filesToProcess=Maps.newTreeMap();
  Map<DateTime,S3ObjectSummary> monitorFilesToProcess=Maps.newTreeMap();
  DateTime currentTime=new DateTime(DateTimeZone.UTC);
  for (  S3ObjectSummary objectSummary : objectSummaries) {
    String fileKey=objectSummary.getKey();
    DateTime dataTime=AwsUtils.getDateTimeFromFileNameWithTags(fileKey);
    boolean withTags=true;
    if (dataTime == null) {
      dataTime=AwsUtils.getDateTimeFromFileName(fileKey);
      withTags=false;
    }
    if (dataTime != null && !dataTime.isBefore(config.startDate)) {
      if (!filesToProcess.containsKey(dataTime) || withTags && config.resourceService != null || !withTags && config.resourceService == null)       filesToProcess.put(dataTime,objectSummary);
 else       logger.info(""String_Node_Str"" + objectSummary.getKey());
    }
 else {
      logger.info(""String_Node_Str"" + objectSummary.getKey());
    }
  }
  for (  S3ObjectSummary objectSummary : objectSummaries) {
    String fileKey=objectSummary.getKey();
    DateTime dataTime=AwsUtils.getDateTimeFromFileNameWithMonitoring(fileKey);
    if (dataTime != null && !dataTime.isBefore(config.startDate)) {
      monitorFilesToProcess.put(dataTime,objectSummary);
    }
  }
  for (  DateTime dataTime : filesToProcess.keySet()) {
    S3ObjectSummary objectSummary=filesToProcess.get(dataTime);
    startMilli=endMilli=dataTime.getMillis();
    init();
    long lastProcessed=AwsUtils.getLastModified(config.workS3BucketName,config.workS3BucketPrefix + ""String_Node_Str"" + AwsUtils.monthDateFormat.print(dataTime)) - 3 * 3600000L;
    if (objectSummary.getLastModified().getTime() < lastProcessed) {
      logger.info(""String_Node_Str"" + objectSummary.getKey() + ""String_Node_Str"");
      continue;
    }
    String fileKey=objectSummary.getKey();
    File file=new File(config.localDir,fileKey.substring(fileKey.lastIndexOf(""String_Node_Str"") + 1));
    logger.info(""String_Node_Str"" + fileKey + ""String_Node_Str"");
    boolean downloaded=AwsUtils.downloadFileIfChangedSince(config.billingS3BucketName,config.billingS3BucketPrefix,file,lastProcessed);
    if (downloaded)     logger.info(""String_Node_Str"" + fileKey);
 else {
      logger.info(""String_Node_Str"" + fileKey + ""String_Node_Str"");
    }
    logger.info(""String_Node_Str"" + fileKey + ""String_Node_Str"");
    boolean withTags=fileKey.contains(""String_Node_Str"");
    processingMonitor=false;
    processBillingZipFile(file,withTags);
    logger.info(""String_Node_Str"" + fileKey);
    S3ObjectSummary monitorObjectSummary=monitorFilesToProcess.get(dataTime);
    if (monitorObjectSummary != null) {
      String monitorFileKey=monitorObjectSummary.getKey();
      logger.info(""String_Node_Str"" + monitorFileKey + ""String_Node_Str"");
      File monitorFile=new File(config.localDir,monitorFileKey.substring(monitorFileKey.lastIndexOf(""String_Node_Str"") + 1));
      logger.info(""String_Node_Str"" + monitorFileKey + ""String_Node_Str"");
      downloaded=AwsUtils.downloadFileIfChangedSince(config.billingS3BucketName,config.billingS3BucketPrefix,monitorFile,lastProcessed);
      if (downloaded)       logger.info(""String_Node_Str"" + monitorFile);
 else       logger.warn(monitorFile + ""String_Node_Str"");
      FileInputStream in=new FileInputStream(monitorFile);
      try {
        processBillingFile(monitorFile.getName(),in,withTags);
      }
 catch (      Exception e) {
        logger.error(""String_Node_Str"" + monitorFile,e);
      }
 finally {
        in.close();
      }
    }
    if (Months.monthsBetween(dataTime,currentTime).getMonths() == 0) {
      int hours=(int)((endMilli - startMilli) / 3600000L);
      logger.info(""String_Node_Str"" + hours);
      cutData(hours);
    }
    processReservations();
    if (withTags && config.resourceService != null)     config.resourceService.commit();
    logger.info(""String_Node_Str"" + dataTime + ""String_Node_Str"");
    archive();
    logger.info(""String_Node_Str"" + dataTime);
    if (dataTime.equals(filesToProcess.lastKey()))     sendOndemandCostAlert();
  }
  logger.info(""String_Node_Str"");
}"
89965,"/** 
 * Fetches the next location provider in the fallback list, and initializes it. If location updates have already been started, this restarts location updates.<br/><br/>If there are no location providers left, no action occurs.
 */
void fallbackProvider(){
  if (!providers.isEmpty()) {
    currentProvider=providers.poll();
    currentProvider.init(context,logger);
    if (shouldStart) {
      currentProvider.start(locationListener,locationParams,singleUpdate);
    }
  }
}","/** 
 * Fetches the next location provider in the fallback list, and initializes it. If location updates have already been started, this restarts location updates.<br/><br/>If there are no location providers left, no action occurs.
 */
void fallbackProvider(){
  if (!providers.isEmpty()) {
    currentProvider.stop();
    currentProvider=providers.poll();
    currentProvider.init(context,logger);
    if (shouldStart) {
      currentProvider.start(locationListener,locationParams,singleUpdate);
    }
  }
}"
89966,"@Test public void testMultiProviderRun(){
  TestServiceProvider testServiceProvider=new TestServiceProvider();
  ServiceConnectionListener mockListener=mock(ServiceConnectionListener.class);
  testServiceProvider.setServiceListener(mockListener);
  LocationProvider backupProvider=mock(LocationProvider.class);
  MultiFallbackProvider subject=new MultiFallbackProvider.Builder().withServiceProvider(testServiceProvider).withProvider(backupProvider).build();
  subject.init(mock(Context.class),mock(Logger.class));
  assertEquals(1,testServiceProvider.getInitCount());
  OnLocationUpdatedListener listenerMock=mock(OnLocationUpdatedListener.class);
  LocationParams paramsMock=mock(LocationParams.class);
  subject.start(listenerMock,paramsMock,false);
  assertEquals(1,testServiceProvider.getStartCount());
  testServiceProvider.simulateFailure();
  verify(mockListener).onConnectionFailed();
  verify(backupProvider).init(any(Context.class),any(Logger.class));
  verify(backupProvider).start(listenerMock,paramsMock,false);
  subject.stop();
  verify(backupProvider).stop();
  assertEquals(0,testServiceProvider.getStopCount());
  Location mockLocation=mock(Location.class);
  when(backupProvider.getLastLocation()).thenReturn(mockLocation);
  assertEquals(mockLocation,subject.getLastLocation());
  assertEquals(0,testServiceProvider.getLastLocCount());
}","@Test public void testMultiProviderRun(){
  TestServiceProvider testServiceProvider=new TestServiceProvider();
  ServiceConnectionListener mockListener=mock(ServiceConnectionListener.class);
  testServiceProvider.setServiceListener(mockListener);
  LocationProvider backupProvider=mock(LocationProvider.class);
  MultiFallbackProvider subject=new MultiFallbackProvider.Builder().withServiceProvider(testServiceProvider).withProvider(backupProvider).build();
  subject.init(mock(Context.class),mock(Logger.class));
  assertEquals(1,testServiceProvider.getInitCount());
  OnLocationUpdatedListener listenerMock=mock(OnLocationUpdatedListener.class);
  LocationParams paramsMock=mock(LocationParams.class);
  subject.start(listenerMock,paramsMock,false);
  assertEquals(1,testServiceProvider.getStartCount());
  testServiceProvider.simulateFailure();
  verify(mockListener).onConnectionFailed();
  assertEquals(1,testServiceProvider.getStopCount());
  verify(backupProvider).init(any(Context.class),any(Logger.class));
  verify(backupProvider).start(listenerMock,paramsMock,false);
  subject.stop();
  verify(backupProvider).stop();
  assertEquals(1,testServiceProvider.getStopCount());
  Location mockLocation=mock(Location.class);
  when(backupProvider.getLastLocation()).thenReturn(mockLocation);
  assertEquals(mockLocation,subject.getLastLocation());
  assertEquals(0,testServiceProvider.getLastLocCount());
}"
89967,"private Criteria getProvider(LocationParams params){
  final LocationAccuracy accuracy=params.getAccuracy();
  final Criteria criteria=new Criteria();
switch (accuracy) {
case HIGH:
    criteria.setAccuracy(Criteria.ACCURACY_HIGH);
  criteria.setPowerRequirement(Criteria.POWER_HIGH);
break;
case MEDIUM:
criteria.setAccuracy(Criteria.ACCURACY_MEDIUM);
criteria.setPowerRequirement(Criteria.POWER_MEDIUM);
break;
case LOW:
criteria.setAccuracy(Criteria.ACCURACY_LOW);
criteria.setPowerRequirement(Criteria.POWER_LOW);
}
return criteria;
}","private Criteria getProvider(LocationParams params){
  final LocationAccuracy accuracy=params.getAccuracy();
  final Criteria criteria=new Criteria();
switch (accuracy) {
case HIGH:
    criteria.setAccuracy(Criteria.ACCURACY_COARSE);
  criteria.setHorizontalAccuracy(Criteria.ACCURACY_HIGH);
criteria.setVerticalAccuracy(Criteria.ACCURACY_HIGH);
criteria.setBearingAccuracy(Criteria.ACCURACY_HIGH);
criteria.setSpeedAccuracy(Criteria.ACCURACY_HIGH);
criteria.setPowerRequirement(Criteria.POWER_HIGH);
break;
case MEDIUM:
criteria.setAccuracy(Criteria.ACCURACY_FINE);
criteria.setHorizontalAccuracy(Criteria.ACCURACY_MEDIUM);
criteria.setVerticalAccuracy(Criteria.ACCURACY_MEDIUM);
criteria.setBearingAccuracy(Criteria.ACCURACY_MEDIUM);
criteria.setSpeedAccuracy(Criteria.ACCURACY_MEDIUM);
criteria.setPowerRequirement(Criteria.POWER_MEDIUM);
break;
case LOW:
criteria.setAccuracy(Criteria.ACCURACY_FINE);
criteria.setHorizontalAccuracy(Criteria.ACCURACY_LOW);
criteria.setVerticalAccuracy(Criteria.ACCURACY_LOW);
criteria.setBearingAccuracy(Criteria.ACCURACY_LOW);
criteria.setSpeedAccuracy(Criteria.ACCURACY_LOW);
criteria.setPowerRequirement(Criteria.POWER_LOW);
}
return criteria;
}"
89968,"private void unbindService(Context context){
  if (isServiceBound) {
    try {
      context.unbindService(serviceConnection);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}","private void unbindService(Context context){
  if (isServiceBound) {
    try {
      context.unbindService(serviceConnection);
      isServiceBound=false;
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}"
89969,"/** 
 * Initializes the smart location with custom options
 * @param context
 */
public void start(Context context,SmartLocationOptions options){
  setOptions(options);
  bindService(context);
}","/** 
 * Initializes the smart location with custom options
 * @param context
 */
public void start(Context context,SmartLocationOptions options){
  setOptions(options);
  if (isServiceBound) {
    boundService.startLocation(smartLocationOptions);
  }
 else {
    bindService(context);
  }
}"
89970,"private void createServiceConnection(IBinder iBinder){
  boundService=((SmartLocationService.LocalBinder)iBinder).getService();
  isServiceConnected=(boundService != null);
  String packageName=null;
  if (smartLocationOptions != null) {
    packageName=smartLocationOptions.getPackageName();
  }
  if (boundService != null) {
    boundService.startLocation(smartLocationOptions);
  }
}","private void createServiceConnection(IBinder iBinder){
  boundService=((SmartLocationService.LocalBinder)iBinder).getService();
  isServiceConnected=(boundService != null);
  if (boundService != null) {
    boundService.startLocation(smartLocationOptions);
  }
}"
89971,"/** 
 * Convert a V4 Job Request DTO into a gRPC resolve job specification request to be sent to the server.
 * @param jobRequest The job request to convert
 * @return The request that should be sent to the server for a new Job Specification given the parameters
 * @throws JsonProcessingException if any serialization errors occur
 */
public static ResolveJobSpecificationRequest toProtoResolveJobSpecificationRequest(final AgentJobRequest jobRequest){
  final ResolveJobSpecificationRequest.Builder builder=ResolveJobSpecificationRequest.newBuilder().setIsInteractive(jobRequest.isInteractive()).setCriteria(toProtoExecutionResourceCriteria(jobRequest.getCriteria()));
  jobRequest.getRequestedId().ifPresent(builder::setId);
  jobRequest.getRequestedJobDirectoryLocation().ifPresent(location -> builder.setJobDirectoryLocation(location.getAbsolutePath()));
  return builder.build();
}","/** 
 * Convert a V4 Job Request DTO into a gRPC resolve job specification request to be sent to the server.
 * @param jobRequest The job request to convert
 * @return The request that should be sent to the server for a new Job Specification given the parameters
 */
public static ResolveJobSpecificationRequest toProtoResolveJobSpecificationRequest(final AgentJobRequest jobRequest){
  final ResolveJobSpecificationRequest.Builder builder=ResolveJobSpecificationRequest.newBuilder().setIsInteractive(jobRequest.isInteractive()).setCriteria(toProtoExecutionResourceCriteria(jobRequest.getCriteria()));
  jobRequest.getRequestedId().ifPresent(builder::setId);
  jobRequest.getRequestedJobDirectoryLocation().ifPresent(location -> builder.setJobDirectoryLocation(location.getAbsolutePath()));
  return builder.build();
}"
89972,"/** 
 * Set the ordered list of command line arguments to append to the command executable at runtime.
 * @param commandArgs The arguments in the order they should be placed on the command line. Maximum of 10,000characters per argument
 * @return The builder
 */
public Builder withCommandArgs(@Nullable final List<String> commandArgs){
  this.bCommandArgs=commandArgs == null ? ImmutableList.of() : ImmutableList.copyOf(commandArgs);
  return this;
}","/** 
 * Set the ordered list of command line arguments to append to the command executable at runtime.
 * @param commandArgs The arguments in the order they should be placed on the command line. Maximum of 10,000characters per argument. Blank strings are removed
 * @return The builder
 */
public Builder withCommandArgs(@Nullable final List<String> commandArgs){
  this.bCommandArgs=commandArgs == null ? ImmutableList.of() : ImmutableList.copyOf(commandArgs.stream().filter(StringUtils::isNotBlank).collect(Collectors.toList()));
  return this;
}"
89973,"/** 
 * Set the ordered list of command line arguments to append to the command executable at runtime.
 * @param commandArgs The arguments in the order they should be placed on the command line. Maximum of 10,000characters per argument
 * @return The builder
 */
public Builder withCommandArgs(@Nullable final List<String> commandArgs){
  this.bCommandArgs=commandArgs == null ? ImmutableList.of() : ImmutableList.copyOf(commandArgs);
  return this;
}","/** 
 * Set the ordered list of command line arguments to append to the command executable at runtime.
 * @param commandArgs The arguments in the order they should be placed on the command line. Maximum of 10,000characters per argument. Any blanks will be removed
 * @return The builder
 */
public Builder withCommandArgs(@Nullable final List<String> commandArgs){
  this.bCommandArgs=commandArgs == null ? ImmutableList.of() : ImmutableList.copyOf(commandArgs.stream().filter(StringUtils::isNotBlank).collect(Collectors.toList()));
  return this;
}"
89974,"/** 
 * Set the type of this application resource.
 * @param type The type (e.g. Hadoop, Spark, etc) for grouping applications
 * @return The builder
 */
public Builder withType(@Nullable final String type){
  this.bType=type;
  return this;
}","/** 
 * Set the type of this application resource.
 * @param type The type (e.g. Hadoop, Spark, etc) for grouping applications
 * @return The builder
 */
public Builder withType(@Nullable final String type){
  this.bType=StringUtils.isBlank(type) ? null : type;
  return this;
}"
89975,"/** 
 * Constructor.
 * @param id         The unique identifier of this command
 * @param created    The time this command was created in the system
 * @param updated    The last time this command was updated in the system
 * @param resources  The execution resources associated with this command
 * @param metadata   The metadata associated with this command
 * @param executable The executable command that will be used when a job is run with this command. Generallythis will start with the binary and be followed optionally by default arguments. Must have at least one
 * @param memory     The default memory that should be used to run a job with this command
 * @param checkDelay The amount of time (in milliseconds) to delay between checks of job status for jobs run usingthis command. Min 1 but preferably much more
 */
@JsonCreator public Command(@JsonProperty(value=""String_Node_Str"",required=true) final String id,@JsonProperty(value=""String_Node_Str"",required=true) final Instant created,@JsonProperty(value=""String_Node_Str"",required=true) final Instant updated,@JsonProperty(value=""String_Node_Str"") @Nullable final ExecutionEnvironment resources,@JsonProperty(value=""String_Node_Str"",required=true) final CommandMetadata metadata,@JsonProperty(value=""String_Node_Str"",required=true) final List<String> executable,@JsonProperty(value=""String_Node_Str"") @Nullable final Integer memory,@JsonProperty(value=""String_Node_Str"",required=true) final long checkDelay){
  super(id,created,updated,resources);
  this.metadata=metadata;
  this.executable=ImmutableList.copyOf(executable);
  this.memory=memory;
  this.checkDelay=checkDelay;
}","/** 
 * Constructor.
 * @param id         The unique identifier of this command
 * @param created    The time this command was created in the system
 * @param updated    The last time this command was updated in the system
 * @param resources  The execution resources associated with this command
 * @param metadata   The metadata associated with this command
 * @param executable The executable command that will be used when a job is run with this command. Generallythis will start with the binary and be followed optionally by default arguments. Must have at least one. Blanks will be removed
 * @param memory     The default memory that should be used to run a job with this command
 * @param checkDelay The amount of time (in milliseconds) to delay between checks of job status for jobs run usingthis command. Min 1 but preferably much more
 */
@JsonCreator public Command(@JsonProperty(value=""String_Node_Str"",required=true) final String id,@JsonProperty(value=""String_Node_Str"",required=true) final Instant created,@JsonProperty(value=""String_Node_Str"",required=true) final Instant updated,@JsonProperty(value=""String_Node_Str"") @Nullable final ExecutionEnvironment resources,@JsonProperty(value=""String_Node_Str"",required=true) final CommandMetadata metadata,@JsonProperty(value=""String_Node_Str"",required=true) final List<String> executable,@JsonProperty(value=""String_Node_Str"") @Nullable final Integer memory,@JsonProperty(value=""String_Node_Str"",required=true) final long checkDelay){
  super(id,created,updated,resources);
  this.metadata=metadata;
  this.executable=ImmutableList.copyOf(executable.stream().filter(StringUtils::isNotBlank).collect(Collectors.toList()));
  this.memory=memory;
  this.checkDelay=checkDelay;
}"
89976,"/** 
 * Constructor which has required fields.
 * @param metadata   The user supplied metadata about a command resource
 * @param executable The executable arguments to use on job process launch. Typically the binary path followedby optional default parameters for that given binary. Must have at least one
 */
@JsonCreator public Builder(@JsonProperty(value=""String_Node_Str"",required=true) final CommandMetadata metadata,@JsonProperty(value=""String_Node_Str"",required=true) final List<String> executable){
  super();
  this.bMetadata=metadata;
  this.bExecutable=ImmutableList.copyOf(executable);
}","/** 
 * Constructor which has required fields.
 * @param metadata   The user supplied metadata about a command resource
 * @param executable The executable arguments to use on job process launch. Typically the binary path followedby optional default parameters for that given binary. Must have at least one. Blanks will be removed
 */
@JsonCreator public Builder(@JsonProperty(value=""String_Node_Str"",required=true) final CommandMetadata metadata,@JsonProperty(value=""String_Node_Str"",required=true) final List<String> executable){
  super();
  this.bMetadata=metadata;
  this.bExecutable=ImmutableList.copyOf(executable.stream().filter(StringUtils::isNotBlank).collect(Collectors.toList()));
}"
89977,"/** 
 * Set the tags to use for the resource.
 * @param tags The tags to use
 * @return The builder
 */
public T withTags(@Nullable final Set<String> tags){
  this.bTags=tags == null ? ImmutableSet.of() : ImmutableSet.copyOf(tags);
  return (T)this;
}","/** 
 * Set the tags to use for the resource.
 * @param tags The tags to use. Blanks will be removed
 * @return The builder
 */
public T withTags(@Nullable final Set<String> tags){
  this.bTags=tags == null ? ImmutableSet.of() : ImmutableSet.copyOf(tags.stream().filter(StringUtils::isNotBlank).collect(Collectors.toSet()));
  return (T)this;
}"
89978,"/** 
 * Set the description for the resource.
 * @param description The description to use
 * @return The builder
 */
public T withDescription(@Nullable final String description){
  this.bDescription=description;
  return (T)this;
}","/** 
 * Set the description for the resource.
 * @param description The description to use
 * @return The builder
 */
public T withDescription(@Nullable final String description){
  this.bDescription=StringUtils.isBlank(description) ? null : description;
  return (T)this;
}"
89979,"/** 
 * Set the version of the resource.
 * @param version The version to set
 * @return The builder
 */
public T withVersion(@Nullable final String version){
  this.bVersion=version;
  return (T)this;
}","/** 
 * Set the version of the resource.
 * @param version The version to set
 * @return The builder
 */
public T withVersion(@Nullable final String version){
  this.bVersion=StringUtils.isBlank(version) ? null : version;
  return (T)this;
}"
89980,"/** 
 * Set the id being requested for the resource. Will be rejected if the ID is already used by another resource of the same type. If not included a GUID will be supplied.
 * @param requestedId The requested id. Max of 255 characters.
 * @return The builder
 */
public T withRequestedId(@Nullable final String requestedId){
  this.bRequestedId=requestedId;
  return (T)this;
}","/** 
 * Set the id being requested for the resource. Will be rejected if the ID is already used by another resource of the same type. If not included a GUID will be supplied.
 * @param requestedId The requested id. Max of 255 characters.
 * @return The builder
 */
public T withRequestedId(@Nullable final String requestedId){
  this.bRequestedId=StringUtils.isBlank(requestedId) ? null : requestedId;
  return (T)this;
}"
89981,"/** 
 * Set the status to search for. Overrides default status of resource in search algorithm.
 * @param status The status to override the default with
 * @return The builder
 */
public Builder withStatus(@Nullable final String status){
  this.bStatus=status;
  return this;
}","/** 
 * Set the status to search for. Overrides default status of resource in search algorithm.
 * @param status The status to override the default with
 * @return The builder
 */
public Builder withStatus(@Nullable final String status){
  this.bStatus=StringUtils.isBlank(status) ? null : status;
  return this;
}"
89982,"/** 
 * Set the tags to use in the search.
 * @param tags The tags
 * @return The builder
 */
public Builder withTags(@Nullable final Set<String> tags){
  this.bTags=tags == null ? ImmutableSet.of() : ImmutableSet.copyOf(tags);
  return this;
}","/** 
 * Set the tags to use in the search.
 * @param tags The tags. Any blanks will be removed
 * @return The builder
 */
public Builder withTags(@Nullable final Set<String> tags){
  this.bTags=tags == null ? ImmutableSet.of() : ImmutableSet.copyOf(tags.stream().filter(StringUtils::isNotBlank).collect(Collectors.toSet()));
  return this;
}"
89983,"Criterion(final Builder builder) throws GeniePreconditionException {
  this.id=builder.bId;
  this.name=builder.bName;
  this.status=builder.bStatus;
  this.tags=builder.bTags == null ? ImmutableSet.of() : ImmutableSet.copyOf(builder.bTags);
  if (StringUtils.isEmpty(this.id) && StringUtils.isEmpty(this.name) && StringUtils.isEmpty(this.status)&& this.tags.isEmpty()) {
    throw new GeniePreconditionException(""String_Node_Str"");
  }
}","private Criterion(final Builder builder) throws GeniePreconditionException {
  this.id=builder.bId;
  this.name=builder.bName;
  this.status=builder.bStatus;
  this.tags=builder.bTags == null ? ImmutableSet.of() : ImmutableSet.copyOf(builder.bTags);
  if (StringUtils.isEmpty(this.id) && StringUtils.isEmpty(this.name) && StringUtils.isEmpty(this.status)&& this.tags.isEmpty()) {
    throw new GeniePreconditionException(""String_Node_Str"");
  }
}"
89984,"/** 
 * Set the name of the resource (cluster, command, etc) to search for.
 * @param name The name of the resource
 * @return The builder
 */
public Builder withName(@Nullable final String name){
  this.bName=name;
  return this;
}","/** 
 * Set the name of the resource (cluster, command, etc) to search for.
 * @param name The name of the resource
 * @return The builder
 */
public Builder withName(@Nullable final String name){
  this.bName=StringUtils.isBlank(name) ? null : name;
  return this;
}"
89985,"/** 
 * Set the id of the resource (cluster, command, etc) to use.
 * @param id The id
 * @return The builder
 */
public Builder withId(@Nullable final String id){
  this.bId=id;
  return this;
}","/** 
 * Set the id of the resource (cluster, command, etc) to use.
 * @param id The id
 * @return The builder
 */
public Builder withId(@Nullable final String id){
  this.bId=StringUtils.isBlank(id) ? null : id;
  return this;
}"
89986,"/** 
 * Get the name of the resource desired if it exists.
 * @return {@link Optional<String>} wrapping the name
 */
public Optional<String> getName(){
  return Optional.ofNullable(this.name);
}","/** 
 * Get the name of the resource desired if it exists.
 * @return {@link Optional} wrapping the name
 */
public Optional<String> getName(){
  return Optional.ofNullable(this.name);
}"
89987,"/** 
 * Get the id of the resource desired if it exists.
 * @return {@link Optional<String>} wrapping the id
 */
public Optional<String> getId(){
  return Optional.ofNullable(this.id);
}","/** 
 * Get the id of the resource desired if it exists.
 * @return {@link Optional} wrapping the id
 */
public Optional<String> getId(){
  return Optional.ofNullable(this.id);
}"
89988,"/** 
 * Get the desired status of the resource if it has been set by the creator.
 * @return {@link Optional<String>} wrapping the status
 */
public Optional<String> getStatus(){
  return Optional.ofNullable(this.status);
}","/** 
 * Get the desired status of the resource if it has been set by the creator.
 * @return {@link Optional} wrapping the status
 */
public Optional<String> getStatus(){
  return Optional.ofNullable(this.status);
}"
89989,"/** 
 * Set the timeout (in seconds) that the job should be killed after by the service after it has started.
 * @param timeout The timeout. Must be greater >= 1 but preferably much higher
 * @return The builder
 */
public Builder withTimeout(@Nullable final Integer timeout){
  this.bTimeout=timeout;
  return this;
}","/** 
 * Set the timeout (in seconds) that the job should be killed after by the service after it has started.
 * @param timeout The timeout. Must be greater greater than or equal to 1 but preferably much higher
 * @return The builder
 */
public Builder withTimeout(@Nullable final Integer timeout){
  this.bTimeout=timeout;
  return this;
}"
89990,"/** 
 * Submit the job for appropriate execution based on environment.
 * @param jobRequest   of job to run
 * @param cluster      The cluster this job should run on
 * @param command      the command to run this job with
 * @param applications Any applications that are needed to run the command
 * @param memory       The amount of memory (in MB) to use to run the job
 * @throws GenieException if there is an error
 */
void submitJob(@Valid @NotNull(message=""String_Node_Str"") final JobRequest jobRequest,@Valid @NotNull(message=""String_Node_Str"") final Cluster cluster,@Valid @NotNull(message=""String_Node_Str"") final Command command,@NotNull(message=""String_Node_Str"") final List<Application> applications,@Min(value=1,message=""String_Node_Str"") final int memory) throws GenieException ;","/** 
 * Submit the job for appropriate execution based on environment.
 * @param jobRequest   of job to run
 * @param cluster      The cluster this job should run on
 * @param command      the command to run this job with
 * @param applications Any applications that are needed to run the command
 * @param memory       The amount of memory (in MB) to use to run the job
 * @throws GenieException if there is an error
 */
void submitJob(@NotNull(message=""String_Node_Str"") @Valid final JobRequest jobRequest,@NotNull(message=""String_Node_Str"") @Valid final Cluster cluster,@NotNull(message=""String_Node_Str"") @Valid final Command command,@NotNull(message=""String_Node_Str"") final List<Application> applications,@Min(value=1,message=""String_Node_Str"") final int memory) throws GenieException ;"
89991,"/** 
 * {@inheritDoc}
 */
@Override public String coordinateJob(@Valid @NotNull(message=""String_Node_Str"") final JobRequest jobRequest,@Valid @NotNull(message=""String_Node_Str"") final JobMetadata jobMetadata) throws GenieException {
  final long coordinationStart=System.nanoTime();
  final Map<String,String> tags=MetricsUtils.newSuccessTagsMap();
  final String jobId=jobRequest.getId().orElseThrow(() -> new GenieServerException(""String_Node_Str""));
  JobStatus jobStatus=JobStatus.FAILED;
  try {
    log.info(""String_Node_Str"",jobId);
    final Job.Builder jobBuilder=new Job.Builder(jobRequest.getName(),jobRequest.getUser(),jobRequest.getVersion(),jobRequest.getCommandArgs()).withId(jobId).withTags(jobRequest.getTags()).withStatus(JobStatus.INIT).withStatusMsg(""String_Node_Str"");
    jobRequest.getDescription().ifPresent(jobBuilder::withDescription);
    if (!jobRequest.isDisableLogArchival()) {
      jobBuilder.withArchiveLocation(this.jobsProperties.getLocations().getArchives() + JobConstants.FILE_PATH_DELIMITER + jobId+ ""String_Node_Str"");
    }
    final JobExecution jobExecution=new JobExecution.Builder(this.hostName).withId(jobId).build();
    this.jobPersistenceService.createJob(jobRequest,jobMetadata,jobBuilder.build(),jobExecution);
    jobStateService.init(jobId);
    final Cluster cluster=this.getCluster(jobRequest);
    final Command command=this.getCommand(jobRequest,cluster);
    final List<Application> applications=this.getApplications(jobRequest,command);
    final int memory=jobRequest.getMemory().orElse(command.getMemory().orElse(this.jobsProperties.getMemory().getDefaultJobMemory()));
    this.setRuntimeEnvironment(jobId,cluster,command,applications,memory);
    final int maxJobMemory=this.jobsProperties.getMemory().getMaxJobMemory();
    if (memory > maxJobMemory) {
      jobStatus=JobStatus.INVALID;
      throw new GeniePreconditionException(""String_Node_Str"" + memory + ""String_Node_Str""+ maxJobMemory+ ""String_Node_Str"");
    }
    log.info(""String_Node_Str"",jobRequest.getId(),jobRequest.getUser());
    final JobsUsersActiveLimitProperties activeLimit=this.jobsProperties.getUsers().getActiveLimit();
    if (activeLimit.isEnabled()) {
      final long activeJobsLimit=activeLimit.getCount();
      final long activeJobsCount=this.jobSearchService.getActiveJobCountForUser(jobRequest.getUser());
      if (activeJobsCount >= activeJobsLimit) {
        throw GenieUserLimitExceededException.createForActiveJobsLimit(jobRequest.getUser(),activeJobsCount,activeJobsLimit);
      }
    }
synchronized (this) {
      log.info(""String_Node_Str"",jobRequest.getId());
      final int maxSystemMemory=this.jobsProperties.getMemory().getMaxSystemMemory();
      final int usedMemory=this.jobStateService.getUsedMemory();
      if (usedMemory + memory <= maxSystemMemory) {
        log.info(""String_Node_Str"",jobId,usedMemory,maxSystemMemory,memory);
        log.info(""String_Node_Str"",jobId);
        jobStateService.schedule(jobId,jobRequest,cluster,command,applications,memory);
        return jobId;
      }
 else {
        throw new GenieServerUnavailableException(""String_Node_Str"" + jobId + ""String_Node_Str""+ usedMemory+ ""String_Node_Str""+ maxSystemMemory+ ""String_Node_Str""+ memory+ ""String_Node_Str"");
      }
    }
  }
 catch (  GenieConflictException e) {
    MetricsUtils.addFailureTagsWithException(tags,e);
    throw e;
  }
catch (  GenieException e) {
    MetricsUtils.addFailureTagsWithException(tags,e);
    if (jobStateService.jobExists(jobId)) {
      jobStateService.done(jobId);
      jobPersistenceService.updateJobStatus(jobId,jobStatus,e.getMessage());
    }
    throw e;
  }
catch (  Exception e) {
    MetricsUtils.addFailureTagsWithException(tags,e);
    if (jobStateService.jobExists(jobId)) {
      jobStateService.done(jobId);
      jobPersistenceService.updateJobStatus(jobId,jobStatus,e.getMessage());
    }
    throw new GenieServerException(""String_Node_Str"",e);
  }
catch (  Throwable t) {
    MetricsUtils.addFailureTagsWithException(tags,t);
    throw t;
  }
 finally {
    this.registry.timer(this.coordinationTimerId.withTags(tags)).record(System.nanoTime() - coordinationStart,TimeUnit.NANOSECONDS);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public String coordinateJob(@Valid @NotNull(message=""String_Node_Str"") final JobRequest jobRequest,@Valid @NotNull(message=""String_Node_Str"") final JobMetadata jobMetadata) throws GenieException {
  final long coordinationStart=System.nanoTime();
  final Map<String,String> tags=MetricsUtils.newSuccessTagsMap();
  final String jobId=jobRequest.getId().orElseThrow(() -> new GenieServerException(""String_Node_Str""));
  JobStatus jobStatus=JobStatus.FAILED;
  try {
    log.info(""String_Node_Str"",jobId);
    final Job.Builder jobBuilder=new Job.Builder(jobRequest.getName(),jobRequest.getUser(),jobRequest.getVersion(),jobRequest.getCommandArgs()).withId(jobId).withTags(jobRequest.getTags()).withStatus(JobStatus.INIT).withStatusMsg(""String_Node_Str"");
    jobRequest.getDescription().ifPresent(jobBuilder::withDescription);
    if (!jobRequest.isDisableLogArchival()) {
      jobBuilder.withArchiveLocation(this.jobsProperties.getLocations().getArchives() + JobConstants.FILE_PATH_DELIMITER + jobId+ ""String_Node_Str"");
    }
    final JobExecution jobExecution=new JobExecution.Builder(this.hostName).withId(jobId).build();
    this.jobPersistenceService.createJob(jobRequest,jobMetadata,jobBuilder.build(),jobExecution);
    this.jobStateService.init(jobId);
    final Cluster cluster=this.getCluster(jobRequest);
    final Command command=this.getCommand(jobRequest,cluster);
    final List<Application> applications=this.getApplications(jobRequest,command);
    final int memory=jobRequest.getMemory().orElse(command.getMemory().orElse(this.jobsProperties.getMemory().getDefaultJobMemory()));
    this.setRuntimeEnvironment(jobId,cluster,command,applications,memory);
    final int maxJobMemory=this.jobsProperties.getMemory().getMaxJobMemory();
    if (memory > maxJobMemory) {
      jobStatus=JobStatus.INVALID;
      throw new GeniePreconditionException(""String_Node_Str"" + memory + ""String_Node_Str""+ maxJobMemory+ ""String_Node_Str"");
    }
    log.info(""String_Node_Str"",jobRequest.getId(),jobRequest.getUser());
    final JobsUsersActiveLimitProperties activeLimit=this.jobsProperties.getUsers().getActiveLimit();
    if (activeLimit.isEnabled()) {
      final long activeJobsLimit=activeLimit.getCount();
      final long activeJobsCount=this.jobSearchService.getActiveJobCountForUser(jobRequest.getUser());
      if (activeJobsCount >= activeJobsLimit) {
        throw GenieUserLimitExceededException.createForActiveJobsLimit(jobRequest.getUser(),activeJobsCount,activeJobsLimit);
      }
    }
synchronized (this) {
      log.info(""String_Node_Str"",jobRequest.getId());
      final int maxSystemMemory=this.jobsProperties.getMemory().getMaxSystemMemory();
      final int usedMemory=this.jobStateService.getUsedMemory();
      if (usedMemory + memory <= maxSystemMemory) {
        log.info(""String_Node_Str"",jobId,usedMemory,maxSystemMemory,memory);
        log.info(""String_Node_Str"",jobId);
        this.jobStateService.schedule(jobId,jobRequest,cluster,command,applications,memory);
        return jobId;
      }
 else {
        throw new GenieServerUnavailableException(""String_Node_Str"" + jobId + ""String_Node_Str""+ usedMemory+ ""String_Node_Str""+ maxSystemMemory+ ""String_Node_Str""+ memory+ ""String_Node_Str"");
      }
    }
  }
 catch (  final GenieConflictException e) {
    MetricsUtils.addFailureTagsWithException(tags,e);
    throw e;
  }
catch (  final GenieException e) {
    MetricsUtils.addFailureTagsWithException(tags,e);
    if (this.jobStateService.jobExists(jobId)) {
      this.jobStateService.done(jobId);
      this.jobPersistenceService.updateJobStatus(jobId,jobStatus,e.getMessage());
    }
    throw e;
  }
catch (  final Exception e) {
    MetricsUtils.addFailureTagsWithException(tags,e);
    if (this.jobStateService.jobExists(jobId)) {
      this.jobStateService.done(jobId);
      this.jobPersistenceService.updateJobStatus(jobId,jobStatus,e.getMessage());
    }
    throw new GenieServerException(""String_Node_Str"",e);
  }
catch (  final Throwable t) {
    MetricsUtils.addFailureTagsWithException(tags,t);
    throw t;
  }
 finally {
    this.registry.timer(this.coordinationTimerId.withTags(tags)).record(System.nanoTime() - coordinationStart,TimeUnit.NANOSECONDS);
  }
}"
89992,"/** 
 * Test the coordinate job method.
 * @throws GenieException If there is any problem
 */
@Test(expected=GeniePreconditionException.class) public void cantCoordinateJobIfNoClustersSelected() throws GenieException {
  final Set<String> commandCriteria=Sets.newHashSet();
  final JobRequest jobRequest=this.getJobRequest(true,commandCriteria,null,null);
  final JobMetadata jobMetadata=this.getJobMetadata();
  Mockito.when(this.clusterService.chooseClusterForJobRequest(jobRequest)).thenReturn(Lists.newArrayList(Mockito.mock(Cluster.class),Mockito.mock(Cluster.class)));
  Mockito.verifyNoMoreInteractions(selectApplicationTimer,selectApplicationTimerId,selectClusterTimer,selectClusterTimerId,setJobEnvironmentTimer,setJobEnvironmentTimerId);
  try {
    this.jobCoordinatorService.coordinateJob(jobRequest,jobMetadata);
  }
  finally {
    Mockito.verify(this.coordinationTimer,Mockito.times(1)).record(Mockito.anyLong(),Mockito.eq(TimeUnit.NANOSECONDS));
    Mockito.verify(this.coordinationTimerId,Mockito.times(1)).withTags(MetricsUtils.newFailureTagsMapForException(new GeniePreconditionException(""String_Node_Str"")));
    Mockito.verify(this.noClusterSelectedCounter,Mockito.times(1)).increment();
    Mockito.verify(this.loadBalancerCounterId,Mockito.times(4)).withTags(tagsCaptor.capture());
    final String className=(String)tagsCaptor.getValue().get(MetricsConstants.TagKeys.CLASS_NAME);
    Assert.assertNotNull(className);
    Assert.assertTrue(className.startsWith(""String_Node_Str""));
    final String status=(String)tagsCaptor.getValue().get(MetricsConstants.TagKeys.STATUS);
    Assert.assertEquals(""String_Node_Str"",status);
    Mockito.verify(this.loadBalancerCounter,Mockito.times(4)).increment();
    Mockito.verify(this.selectClusterTimer,Mockito.times(1)).record(Mockito.anyLong(),Mockito.eq(TimeUnit.NANOSECONDS));
    Mockito.verify(this.selectClusterTimerId,Mockito.times(1)).withTags(MetricsUtils.newFailureTagsMapForException(new GeniePreconditionException(""String_Node_Str"")));
  }
}","/** 
 * Test the coordinate job method.
 * @throws GenieException If there is any problem
 */
@Test(expected=GeniePreconditionException.class) public void cantCoordinateJobIfNoClustersSelected() throws GenieException {
  final Set<String> commandCriteria=Sets.newHashSet();
  final JobRequest jobRequest=this.getJobRequest(true,commandCriteria,null,null);
  final JobMetadata jobMetadata=this.getJobMetadata();
  Mockito.when(this.clusterService.chooseClusterForJobRequest(jobRequest)).thenReturn(Lists.newArrayList(Mockito.mock(Cluster.class),Mockito.mock(Cluster.class)));
  Mockito.verifyNoMoreInteractions(selectApplicationTimer,selectApplicationTimerId,selectClusterTimer,selectClusterTimerId,setJobEnvironmentTimer,setJobEnvironmentTimerId);
  try {
    this.jobCoordinatorService.coordinateJob(jobRequest,jobMetadata);
  }
  finally {
    Mockito.verify(this.coordinationTimer,Mockito.times(1)).record(Mockito.anyLong(),Mockito.eq(TimeUnit.NANOSECONDS));
    Mockito.verify(this.coordinationTimerId,Mockito.times(1)).withTags(MetricsUtils.newFailureTagsMapForException(new GeniePreconditionException(""String_Node_Str"")));
    Mockito.verify(this.noClusterSelectedCounter,Mockito.times(1)).increment();
    Mockito.verify(this.loadBalancerCounterId,Mockito.times(4)).withTags(tagsCaptor.capture());
    final String className=this.tagsCaptor.getValue().get(MetricsConstants.TagKeys.CLASS_NAME);
    Assert.assertNotNull(className);
    Assert.assertTrue(className.startsWith(""String_Node_Str""));
    final String status=this.tagsCaptor.getValue().get(MetricsConstants.TagKeys.STATUS);
    Assert.assertEquals(""String_Node_Str"",status);
    Mockito.verify(this.loadBalancerCounter,Mockito.times(4)).increment();
    Mockito.verify(this.selectClusterTimer,Mockito.times(1)).record(Mockito.anyLong(),Mockito.eq(TimeUnit.NANOSECONDS));
    Mockito.verify(this.selectClusterTimerId,Mockito.times(1)).withTags(MetricsUtils.newFailureTagsMapForException(new GeniePreconditionException(""String_Node_Str"")));
  }
}"
89993,"/** 
 * Setup for the tests.
 */
@Before public void setup(){
  this.jobPersistenceService=Mockito.mock(JobPersistenceService.class);
  this.jobKillService=Mockito.mock(JobKillService.class);
  this.jobStateService=Mockito.mock(JobStateService.class);
  this.jobSearchService=Mockito.mock(JobSearchService.class);
  this.jobsProperties=new JobsProperties();
  this.jobsProperties.getLocations().setArchives(BASE_ARCHIVE_LOCATION);
  this.jobsProperties.getMemory().setDefaultJobMemory(MEMORY);
  this.jobsProperties.getUsers().getActiveLimit().setEnabled(ACTIVE_JOBS_LIMIT_ENABLED);
  this.applicationService=Mockito.mock(ApplicationService.class);
  this.clusterService=Mockito.mock(ClusterService.class);
  this.commandService=Mockito.mock(CommandService.class);
  this.clusterLoadBalancer1=Mockito.mock(ClusterLoadBalancer.class);
  this.clusterLoadBalancer2=Mockito.mock(ClusterLoadBalancer.class);
  this.clusterLoadBalancer3=Mockito.mock(ClusterLoadBalancer.class);
  this.clusterLoadBalancer4=Mockito.mock(ClusterLoadBalancer.class);
  this.registry=Mockito.mock(Registry.class);
  this.tagsCaptor=ArgumentCaptor.forClass(Map.class);
  this.coordinationTimerId=Mockito.mock(Id.class);
  this.coordinationTimer=Mockito.mock(Timer.class);
  Mockito.when(this.registry.createId(""String_Node_Str"")).thenReturn(coordinationTimerId);
  Mockito.when(coordinationTimerId.withTags(Mockito.any(Map.class))).thenReturn(coordinationTimerId);
  Mockito.when(this.registry.timer(Mockito.eq(coordinationTimerId))).thenReturn(coordinationTimer);
  this.selectClusterTimerId=Mockito.mock(Id.class);
  this.selectClusterTimer=Mockito.mock(Timer.class);
  Mockito.when(this.registry.createId(""String_Node_Str"")).thenReturn(selectClusterTimerId);
  Mockito.when(selectClusterTimerId.withTags(Mockito.any(Map.class))).thenReturn(selectClusterTimerId);
  Mockito.when(this.registry.timer(Mockito.eq(selectClusterTimerId))).thenReturn(selectClusterTimer);
  this.selectCommandTimerId=Mockito.mock(Id.class);
  this.selectCommandTimer=Mockito.mock(Timer.class);
  Mockito.when(this.registry.createId(""String_Node_Str"")).thenReturn(selectCommandTimerId);
  Mockito.when(selectCommandTimerId.withTags(Mockito.any(Map.class))).thenReturn(selectCommandTimerId);
  Mockito.when(this.registry.timer(Mockito.eq(selectCommandTimerId))).thenReturn(selectCommandTimer);
  this.selectApplicationTimerId=Mockito.mock(Id.class);
  this.selectApplicationTimer=Mockito.mock(Timer.class);
  Mockito.when(this.registry.createId(""String_Node_Str"")).thenReturn(selectApplicationTimerId);
  Mockito.when(selectApplicationTimerId.withTags(Mockito.any(Map.class))).thenReturn(selectApplicationTimerId);
  Mockito.when(this.registry.timer(Mockito.eq(selectApplicationTimerId))).thenReturn(selectApplicationTimer);
  this.setJobEnvironmentTimerId=Mockito.mock(Id.class);
  this.setJobEnvironmentTimer=Mockito.mock(Timer.class);
  Mockito.when(this.registry.createId(""String_Node_Str"")).thenReturn(setJobEnvironmentTimerId);
  Mockito.when(setJobEnvironmentTimerId.withTags(Mockito.any(Map.class))).thenReturn(setJobEnvironmentTimerId);
  Mockito.when(this.registry.timer(Mockito.eq(setJobEnvironmentTimerId))).thenReturn(setJobEnvironmentTimer);
  this.noClusterSelectedCounter=Mockito.mock(Counter.class);
  Mockito.when(this.registry.counter(""String_Node_Str"")).thenReturn(noClusterSelectedCounter);
  this.noMatchingClusterCounter=Mockito.mock(Counter.class);
  Mockito.when(registry.counter(""String_Node_Str"")).thenReturn(noMatchingClusterCounter);
  this.loadBalancerCounterId=Mockito.mock(Id.class);
  this.loadBalancerCounter=Mockito.mock(Counter.class);
  Mockito.when(this.registry.createId(""String_Node_Str"")).thenReturn(loadBalancerCounterId);
  Mockito.when(loadBalancerCounterId.withTags(Mockito.any(Map.class))).thenReturn(loadBalancerCounterId);
  Mockito.when(this.registry.counter(Mockito.eq(loadBalancerCounterId))).thenReturn(loadBalancerCounter);
  this.jobCoordinatorService=new JobCoordinatorServiceImpl(this.jobPersistenceService,this.jobKillService,this.jobStateService,jobsProperties,this.applicationService,this.jobSearchService,this.clusterService,this.commandService,Lists.newArrayList(this.clusterLoadBalancer1,this.clusterLoadBalancer2,this.clusterLoadBalancer3,this.clusterLoadBalancer4),this.registry,HOST_NAME);
}","/** 
 * Setup for the tests.
 */
@Before public void setup(){
  MockitoAnnotations.initMocks(this);
  this.jobPersistenceService=Mockito.mock(JobPersistenceService.class);
  this.jobKillService=Mockito.mock(JobKillService.class);
  this.jobStateService=Mockito.mock(JobStateService.class);
  this.jobSearchService=Mockito.mock(JobSearchService.class);
  this.jobsProperties=new JobsProperties();
  this.jobsProperties.getLocations().setArchives(BASE_ARCHIVE_LOCATION);
  this.jobsProperties.getMemory().setDefaultJobMemory(MEMORY);
  this.jobsProperties.getUsers().getActiveLimit().setEnabled(ACTIVE_JOBS_LIMIT_ENABLED);
  this.applicationService=Mockito.mock(ApplicationService.class);
  this.clusterService=Mockito.mock(ClusterService.class);
  this.commandService=Mockito.mock(CommandService.class);
  this.clusterLoadBalancer1=Mockito.mock(ClusterLoadBalancer.class);
  this.clusterLoadBalancer2=Mockito.mock(ClusterLoadBalancer.class);
  this.clusterLoadBalancer3=Mockito.mock(ClusterLoadBalancer.class);
  this.clusterLoadBalancer4=Mockito.mock(ClusterLoadBalancer.class);
  final Registry registry=Mockito.mock(Registry.class);
  this.coordinationTimerId=Mockito.mock(Id.class);
  this.coordinationTimer=Mockito.mock(Timer.class);
  Mockito.when(registry.createId(""String_Node_Str"")).thenReturn(this.coordinationTimerId);
  Mockito.when(this.coordinationTimerId.withTags(Mockito.anyMapOf(String.class,String.class))).thenReturn(this.coordinationTimerId);
  Mockito.when(registry.timer(Mockito.eq(this.coordinationTimerId))).thenReturn(this.coordinationTimer);
  this.selectClusterTimerId=Mockito.mock(Id.class);
  this.selectClusterTimer=Mockito.mock(Timer.class);
  Mockito.when(registry.createId(""String_Node_Str"")).thenReturn(this.selectClusterTimerId);
  Mockito.when(this.selectClusterTimerId.withTags(Mockito.anyMapOf(String.class,String.class))).thenReturn(this.selectClusterTimerId);
  Mockito.when(registry.timer(Mockito.eq(this.selectClusterTimerId))).thenReturn(this.selectClusterTimer);
  this.selectCommandTimerId=Mockito.mock(Id.class);
  this.selectCommandTimer=Mockito.mock(Timer.class);
  Mockito.when(registry.createId(""String_Node_Str"")).thenReturn(this.selectCommandTimerId);
  Mockito.when(this.selectCommandTimerId.withTags(Mockito.anyMapOf(String.class,String.class))).thenReturn(this.selectCommandTimerId);
  Mockito.when(registry.timer(Mockito.eq(this.selectCommandTimerId))).thenReturn(this.selectCommandTimer);
  this.selectApplicationTimerId=Mockito.mock(Id.class);
  this.selectApplicationTimer=Mockito.mock(Timer.class);
  Mockito.when(registry.createId(""String_Node_Str"")).thenReturn(this.selectApplicationTimerId);
  Mockito.when(this.selectApplicationTimerId.withTags(Mockito.anyMapOf(String.class,String.class))).thenReturn(this.selectApplicationTimerId);
  Mockito.when(registry.timer(Mockito.eq(selectApplicationTimerId))).thenReturn(selectApplicationTimer);
  this.setJobEnvironmentTimerId=Mockito.mock(Id.class);
  this.setJobEnvironmentTimer=Mockito.mock(Timer.class);
  Mockito.when(registry.createId(""String_Node_Str"")).thenReturn(this.setJobEnvironmentTimerId);
  Mockito.when(this.setJobEnvironmentTimerId.withTags(Mockito.anyMapOf(String.class,String.class))).thenReturn(this.setJobEnvironmentTimerId);
  Mockito.when(registry.timer(Mockito.eq(this.setJobEnvironmentTimerId))).thenReturn(this.setJobEnvironmentTimer);
  this.noClusterSelectedCounter=Mockito.mock(Counter.class);
  Mockito.when(registry.counter(""String_Node_Str"")).thenReturn(this.noClusterSelectedCounter);
  this.noMatchingClusterCounter=Mockito.mock(Counter.class);
  Mockito.when(registry.counter(""String_Node_Str"")).thenReturn(this.noMatchingClusterCounter);
  this.loadBalancerCounterId=Mockito.mock(Id.class);
  this.loadBalancerCounter=Mockito.mock(Counter.class);
  Mockito.when(registry.createId(""String_Node_Str"")).thenReturn(this.loadBalancerCounterId);
  Mockito.when(this.loadBalancerCounterId.withTags(Mockito.anyMapOf(String.class,String.class))).thenReturn(this.loadBalancerCounterId);
  Mockito.when(registry.counter(Mockito.eq(this.loadBalancerCounterId))).thenReturn(this.loadBalancerCounter);
  this.jobCoordinatorService=new JobCoordinatorServiceImpl(this.jobPersistenceService,this.jobKillService,this.jobStateService,jobsProperties,this.applicationService,this.jobSearchService,this.clusterService,this.commandService,Lists.newArrayList(this.clusterLoadBalancer1,this.clusterLoadBalancer2,this.clusterLoadBalancer3,this.clusterLoadBalancer4),registry,HOST_NAME);
}"
89994,"/** 
 * Setup the tests.
 * @throws GenieException If there is a problem.
 */
@Before public void setup() throws GenieException {
  this.registry=Mockito.mock(Registry.class);
  this.downloadTimer=Mockito.mock(Timer.class);
  this.downloadTimerId=Mockito.mock(Id.class);
  this.uploadTimer=Mockito.mock(Timer.class);
  this.uploadTimerId=Mockito.mock(Id.class);
  this.urlFailingStrictValidationCounter=Mockito.mock(Counter.class);
  Mockito.when(registry.createId(""String_Node_Str"")).thenReturn(this.downloadTimerId);
  Mockito.when(downloadTimerId.withTags(Mockito.anyMap())).thenReturn(downloadTimerId);
  Mockito.when(registry.timer(Mockito.eq(downloadTimerId))).thenReturn(downloadTimer);
  Mockito.when(registry.createId(""String_Node_Str"")).thenReturn(this.uploadTimerId);
  Mockito.when(uploadTimerId.withTags(Mockito.anyMap())).thenReturn(uploadTimerId);
  Mockito.when(registry.timer(Mockito.eq(uploadTimerId))).thenReturn(uploadTimer);
  Mockito.when(registry.counter(""String_Node_Str"")).thenReturn(urlFailingStrictValidationCounter);
  this.s3Client=Mockito.mock(AmazonS3Client.class);
  this.s3FileTransferProperties=Mockito.mock(S3FileTransferProperties.class);
  this.s3FileTransfer=new S3FileTransferImpl(this.s3Client,registry,s3FileTransferProperties);
  this.tagsCaptor=ArgumentCaptor.forClass(Map.class);
}","/** 
 * Setup the tests.
 * @throws GenieException If there is a problem.
 */
@Before public void setup() throws GenieException {
  MockitoAnnotations.initMocks(this);
  final Registry registry=Mockito.mock(Registry.class);
  this.downloadTimer=Mockito.mock(Timer.class);
  this.downloadTimerId=Mockito.mock(Id.class);
  this.uploadTimer=Mockito.mock(Timer.class);
  this.uploadTimerId=Mockito.mock(Id.class);
  this.urlFailingStrictValidationCounter=Mockito.mock(Counter.class);
  Mockito.when(registry.createId(""String_Node_Str"")).thenReturn(this.downloadTimerId);
  Mockito.when(this.downloadTimerId.withTags(Mockito.anyMapOf(String.class,String.class))).thenReturn(this.downloadTimerId);
  Mockito.when(registry.timer(Mockito.eq(this.downloadTimerId))).thenReturn(this.downloadTimer);
  Mockito.when(registry.createId(""String_Node_Str"")).thenReturn(this.uploadTimerId);
  Mockito.when(this.uploadTimerId.withTags(Mockito.anyMapOf(String.class,String.class))).thenReturn(this.uploadTimerId);
  Mockito.when(registry.timer(Mockito.eq(this.uploadTimerId))).thenReturn(this.uploadTimer);
  Mockito.when(registry.counter(""String_Node_Str"")).thenReturn(this.urlFailingStrictValidationCounter);
  this.s3Client=Mockito.mock(AmazonS3Client.class);
  this.s3FileTransferProperties=Mockito.mock(S3FileTransferProperties.class);
  this.s3FileTransfer=new S3FileTransferImpl(this.s3Client,registry,this.s3FileTransferProperties);
}"
89995,"private Void updateJob(final Job job,final JobFinishedEvent event,Map<String,String> tags) throws GenieException {
  try {
    final String jobId=event.getId();
    final JobStatus status=job.getStatus();
    JobStatus eventStatus=null;
    if (status == JobStatus.INIT) {
switch (event.getReason()) {
case KILLED:
        eventStatus=JobStatus.KILLED;
      break;
case INVALID:
    eventStatus=JobStatus.INVALID;
  break;
case FAILED_TO_INIT:
eventStatus=JobStatus.FAILED;
break;
case PROCESS_COMPLETED:
eventStatus=JobStatus.SUCCEEDED;
break;
case SYSTEM_CRASH:
eventStatus=JobStatus.FAILED;
break;
default :
eventStatus=JobStatus.INVALID;
log.warn(""String_Node_Str"",jobId);
}
}
 else {
if (event.getReason() != JobFinishedReason.SYSTEM_CRASH) {
try {
final String finalStatus=this.retryTemplate.execute(context -> updateFinalStatusForJob(jobId).toString());
tags.put(JOB_FINAL_STATE,finalStatus);
cleanupProcesses(jobId);
}
 catch (Exception e) {
log.error(""String_Node_Str"",jobId,e);
}
}
 else {
tags.put(JOB_FINAL_STATE,JobStatus.FAILED.toString());
eventStatus=JobStatus.FAILED;
}
}
if (eventStatus != null) {
tags.put(JOB_FINAL_STATE,status.toString());
this.jobPersistenceService.updateJobStatus(jobId,eventStatus,event.getMessage());
}
}
 catch (Throwable t) {
incrementErrorCounter(""String_Node_Str"",t);
throw t;
}
return null;
}","private Void updateJob(final Job job,final JobFinishedEvent event,final Map<String,String> tags) throws GenieException {
  try {
    final String jobId=event.getId();
    final JobStatus status=job.getStatus();
    JobStatus eventStatus=null;
    if (status == JobStatus.INIT) {
switch (event.getReason()) {
case KILLED:
        eventStatus=JobStatus.KILLED;
      break;
case INVALID:
    eventStatus=JobStatus.INVALID;
  break;
case FAILED_TO_INIT:
eventStatus=JobStatus.FAILED;
break;
case PROCESS_COMPLETED:
eventStatus=JobStatus.SUCCEEDED;
break;
case SYSTEM_CRASH:
eventStatus=JobStatus.FAILED;
break;
default :
eventStatus=JobStatus.INVALID;
log.warn(""String_Node_Str"",jobId);
}
}
 else {
if (event.getReason() != JobFinishedReason.SYSTEM_CRASH) {
try {
final String finalStatus=this.retryTemplate.execute(context -> updateFinalStatusForJob(jobId).toString());
tags.put(JOB_FINAL_STATE,finalStatus);
cleanupProcesses(jobId);
}
 catch (Exception e) {
log.error(""String_Node_Str"",jobId,e);
}
}
 else {
tags.put(JOB_FINAL_STATE,JobStatus.FAILED.toString());
eventStatus=JobStatus.FAILED;
}
}
if (eventStatus != null) {
tags.put(JOB_FINAL_STATE,status.toString());
this.jobPersistenceService.updateJobStatus(jobId,eventStatus,event.getMessage());
}
}
 catch (Throwable t) {
incrementErrorCounter(""String_Node_Str"",t);
throw t;
}
return null;
}"
89996,"private Cluster getCluster(final JobRequest jobRequest) throws GenieException {
  final long start=System.nanoTime();
  try {
    log.info(""String_Node_Str"",jobRequest.getId().orElse(NO_ID_FOUND));
    final List<Cluster> clusters=ImmutableList.copyOf(this.clusterService.chooseClusterForJobRequest(jobRequest));
    Cluster cluster=null;
    if (clusters.isEmpty()) {
      throw new GeniePreconditionException(""String_Node_Str"");
    }
 else     if (clusters.size() == 1) {
      cluster=clusters.get(0);
    }
 else {
      for (      final ClusterLoadBalancer loadBalancer : this.clusterLoadBalancers) {
        final String loadBalancerClass=loadBalancer.getClass().getCanonicalName();
        try {
          final Cluster selectedCluster=loadBalancer.selectCluster(clusters,jobRequest);
          if (selectedCluster != null) {
            if (clusters.contains(selectedCluster)) {
              log.debug(""String_Node_Str"",selectedCluster.getId().orElse(NO_ID_FOUND),loadBalancerClass);
              this.registry.counter(this.loadBalancerId.withTag(LOAD_BALANCER_CLASS_TAG,loadBalancerClass).withTag(LOAD_BALANCER_STATUS_TAG,LOAD_BALANCER_STATUS_SUCCESS)).increment();
              cluster=selectedCluster;
              break;
            }
 else {
              log.error(""String_Node_Str"" + ""String_Node_Str"",selectedCluster.getId().orElse(NO_ID_FOUND),loadBalancerClass,clusters);
              this.registry.counter(this.loadBalancerId.withTag(LOAD_BALANCER_CLASS_TAG,loadBalancerClass).withTag(LOAD_BALANCER_STATUS_TAG,LOAD_BALANCER_STATUS_INVALID)).increment();
            }
          }
 else {
            this.registry.counter(this.loadBalancerId.withTag(LOAD_BALANCER_CLASS_TAG,loadBalancerClass).withTag(LOAD_BALANCER_STATUS_TAG,LOAD_BALANCER_STATUS_NO_PREFERENCE)).increment();
          }
        }
 catch (        final Exception e) {
          log.error(""String_Node_Str"",loadBalancer,e);
          this.registry.counter(this.loadBalancerId.withTag(LOAD_BALANCER_CLASS_TAG,loadBalancerClass).withTag(LOAD_BALANCER_STATUS_TAG,LOAD_BALANCER_STATUS_EXCEPTION)).increment();
        }
      }
      if (cluster == null) {
        this.noClusterFoundCounter.increment();
        throw new GeniePreconditionException(""String_Node_Str"");
      }
    }
    log.info(""String_Node_Str"",cluster.getId().orElse(NO_ID_FOUND),jobRequest.getId().orElse(NO_ID_FOUND));
    return cluster;
  }
  finally {
    this.selectClusterTimer.record(System.nanoTime() - start,TimeUnit.NANOSECONDS);
  }
}","private Cluster getCluster(final JobRequest jobRequest) throws GenieException {
  final long start=System.nanoTime();
  try {
    log.info(""String_Node_Str"",jobRequest.getId().orElse(NO_ID_FOUND));
    final List<Cluster> clusters=ImmutableList.copyOf(this.clusterService.chooseClusterForJobRequest(jobRequest));
    Cluster cluster=null;
    if (clusters.isEmpty()) {
      throw new GeniePreconditionException(""String_Node_Str"");
    }
 else     if (clusters.size() == 1) {
      cluster=clusters.get(0);
    }
 else {
      for (      final ClusterLoadBalancer loadBalancer : this.clusterLoadBalancers) {
        final String loadBalancerClass=(loadBalancer instanceof TargetClassAware ? ((TargetClassAware)loadBalancer).getTargetClass() : loadBalancer.getClass()).getCanonicalName();
        try {
          final Cluster selectedCluster=loadBalancer.selectCluster(clusters,jobRequest);
          if (selectedCluster != null) {
            if (clusters.contains(selectedCluster)) {
              log.debug(""String_Node_Str"",selectedCluster.getId().orElse(NO_ID_FOUND),loadBalancerClass);
              this.registry.counter(this.loadBalancerId.withTag(LOAD_BALANCER_CLASS_TAG,loadBalancerClass).withTag(LOAD_BALANCER_STATUS_TAG,LOAD_BALANCER_STATUS_SUCCESS)).increment();
              cluster=selectedCluster;
              break;
            }
 else {
              log.error(""String_Node_Str"" + ""String_Node_Str"",selectedCluster.getId().orElse(NO_ID_FOUND),loadBalancerClass,clusters);
              this.registry.counter(this.loadBalancerId.withTag(LOAD_BALANCER_CLASS_TAG,loadBalancerClass).withTag(LOAD_BALANCER_STATUS_TAG,LOAD_BALANCER_STATUS_INVALID)).increment();
            }
          }
 else {
            this.registry.counter(this.loadBalancerId.withTag(LOAD_BALANCER_CLASS_TAG,loadBalancerClass).withTag(LOAD_BALANCER_STATUS_TAG,LOAD_BALANCER_STATUS_NO_PREFERENCE)).increment();
          }
        }
 catch (        final Exception e) {
          log.error(""String_Node_Str"",loadBalancer,e);
          this.registry.counter(this.loadBalancerId.withTag(LOAD_BALANCER_CLASS_TAG,loadBalancerClass).withTag(LOAD_BALANCER_STATUS_TAG,LOAD_BALANCER_STATUS_EXCEPTION)).increment();
        }
      }
      if (cluster == null) {
        this.noClusterFoundCounter.increment();
        throw new GeniePreconditionException(""String_Node_Str"");
      }
    }
    log.info(""String_Node_Str"",cluster.getId().orElse(NO_ID_FOUND),jobRequest.getId().orElse(NO_ID_FOUND));
    return cluster;
  }
  finally {
    this.selectClusterTimer.record(System.nanoTime() - start,TimeUnit.NANOSECONDS);
  }
}"
89997,"/** 
 * Constructor.
 * @param fileTransferFactory file transfer implementation factory
 * @param baseCacheLocation file cache location
 * @param localFileTransfer Local file transfer service
 * @param registry spectator registry
 * @throws GenieException If there is any problem
 */
public CacheGenieFileTransferService(@NotNull final FileTransferFactory fileTransferFactory,@NotNull final String baseCacheLocation,@NotNull final FileTransfer localFileTransfer,@NotNull final Registry registry) throws GenieException {
  super(fileTransferFactory);
  this.baseCacheLocation=createDirectories(baseCacheLocation).toString();
  this.localFileTransfer=localFileTransfer;
  registry.gauge(""String_Node_Str"",fileCache,(ToDoubleFunction<LoadingCache<String,File>>)value -> value.stats().hitRate());
  registry.gauge(""String_Node_Str"",fileCache,(ToDoubleFunction<LoadingCache<String,File>>)value -> value.stats().missRate());
  registry.gauge(""String_Node_Str"",fileCache,(ToDoubleFunction<LoadingCache<String,File>>)value -> value.stats().loadExceptionRate());
}","/** 
 * Constructor.
 * @param fileTransferFactory file transfer implementation factory
 * @param baseCacheLocation   file cache location
 * @param localFileTransfer   Local file transfer service
 * @param registry            spectator registry
 * @throws GenieException If there is any problem
 */
public CacheGenieFileTransferService(@NotNull final FileTransferFactory fileTransferFactory,@NotNull final String baseCacheLocation,@NotNull final FileTransfer localFileTransfer,@NotNull final Registry registry) throws GenieException {
  super(fileTransferFactory);
  this.baseCacheLocation=this.createDirectories(baseCacheLocation).toString();
  this.localFileTransfer=localFileTransfer;
  registry.gauge(""String_Node_Str"",fileCache,(ToDoubleFunction<LoadingCache<String,File>>)value -> value.stats().hitRate());
  registry.gauge(""String_Node_Str"",fileCache,(ToDoubleFunction<LoadingCache<String,File>>)value -> value.stats().missRate());
  registry.gauge(""String_Node_Str"",fileCache,(ToDoubleFunction<LoadingCache<String,File>>)value -> value.stats().loadExceptionRate());
}"
89998,"/** 
 * Get the file needed by Genie for job execution.
 * @param srcRemotePath Path of the file in the remote location to be fetched
 * @param dstLocalPath  Local path where the file needs to be placed
 * @throws GenieException If there is any problem
 */
public void getFile(@NotBlank(message=""String_Node_Str"") final String srcRemotePath,@NotBlank(message=""String_Node_Str"") final String dstLocalPath) throws GenieException {
  log.debug(""String_Node_Str"",srcRemotePath,dstLocalPath);
  File cachedFile=null;
  try {
    cachedFile=fileCache.get(srcRemotePath);
    final long lastModifiedTime=getFileTransfer(srcRemotePath).getLastModifiedTime(srcRemotePath);
    if (lastModifiedTime > cachedFile.lastModified()) {
synchronized (this) {
        if (lastModifiedTime > cachedFile.lastModified()) {
          fileCache.invalidate(srcRemotePath);
          deleteFile(cachedFile);
          cachedFile=fileCache.get(srcRemotePath);
        }
      }
    }
  }
 catch (  Exception e) {
    final String message=String.format(""String_Node_Str"",srcRemotePath);
    log.error(message);
    throw new GenieServerException(message,e);
  }
  localFileTransfer.getFile(cachedFile.getPath(),dstLocalPath);
}","/** 
 * Get the file needed by Genie for job execution.
 * @param srcRemotePath Path of the file in the remote location to be fetched
 * @param dstLocalPath  Local path where the file needs to be placed
 * @throws GenieException If there is any problem
 */
public void getFile(@NotBlank(message=""String_Node_Str"") final String srcRemotePath,@NotBlank(message=""String_Node_Str"") final String dstLocalPath) throws GenieException {
  log.debug(""String_Node_Str"",srcRemotePath,dstLocalPath);
  File cachedFile;
  try {
    cachedFile=fileCache.get(srcRemotePath);
    final long lastModifiedTime=getFileTransfer(srcRemotePath).getLastModifiedTime(srcRemotePath);
    if (lastModifiedTime > cachedFile.lastModified()) {
synchronized (this) {
        if (lastModifiedTime > cachedFile.lastModified()) {
          fileCache.invalidate(srcRemotePath);
          deleteFile(cachedFile);
          cachedFile=fileCache.get(srcRemotePath);
        }
      }
    }
  }
 catch (  Exception e) {
    final String message=String.format(""String_Node_Str"",srcRemotePath);
    log.error(message);
    throw new GenieServerException(message,e);
  }
  localFileTransfer.getFile(cachedFile.getPath(),dstLocalPath);
}"
89999,"protected Path createDirectories(final String path) throws GenieException {
  Path result=null;
  try {
    final File pathFile=new File(new URI(path).getPath());
    result=pathFile.toPath();
    if (!Files.exists(result)) {
      Files.createDirectories(result);
    }
  }
 catch (  Exception e) {
    throw new GenieServerException(""String_Node_Str"" + path,e);
  }
  return result;
}","protected Path createDirectories(final String path) throws GenieException {
  try {
    final File pathFile=new File(new URI(path).getPath());
    final Path result=pathFile.toPath();
    if (!Files.exists(result)) {
      Files.createDirectories(result);
    }
    return result;
  }
 catch (  Exception e) {
    throw new GenieServerException(""String_Node_Str"" + path,e);
  }
}"
90000,"/** 
 * Get the file needed by Genie for job execution.
 * @param srcRemotePath Path of the file in the remote location to be fetched
 * @param dstLocalPath  Local path where the file needs to be placed
 * @throws GenieException If there is any problem
 */
public void getFile(@NotBlank(message=""String_Node_Str"") final String srcRemotePath,@NotBlank(message=""String_Node_Str"") final String dstLocalPath) throws GenieException {
  log.debug(""String_Node_Str"",srcRemotePath,dstLocalPath);
  getFileTransfer(srcRemotePath).getFile(srcRemotePath,dstLocalPath);
}","/** 
 * Get the file needed by Genie for job execution.
 * @param srcRemotePath Path of the file in the remote location to be fetched
 * @param dstLocalPath  Local path where the file needs to be placed
 * @throws GenieException If there is any problem
 */
public void getFile(@NotBlank(message=""String_Node_Str"") final String srcRemotePath,@NotBlank(message=""String_Node_Str"") final String dstLocalPath) throws GenieException {
  log.debug(""String_Node_Str"",srcRemotePath,dstLocalPath);
  this.getFileTransfer(srcRemotePath).getFile(srcRemotePath,dstLocalPath);
}"
