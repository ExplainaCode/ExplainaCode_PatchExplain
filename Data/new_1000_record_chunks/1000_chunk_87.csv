record_number,buggy_code,fixed_code
86001,"/** 
 * Creates a new <a href=""PartMaster.html"">PartMaster</a>. Be aware that the created item will still be in checkout state when returned. Hence the calling client code has the opportunity to perform final modifications on the first, iteration number 1, <a href=""PartIteration.html"">PartIteration</a>.
 * @param workspaceId The workspace in which the part master will be created
 * @param number The part number of the item to create which is its id inside the workspace
 * @param name The user friendly name of the item
 * @param standardPart Boolean indicating if the item to create is a standard part
 * @param workflowModelId The id of the workflow template that will be instantiated and attached to the created part master. Actually, it's the first  <a href=""PartRevision.html"">PartRevision</a> that will hold the reference to the workflow. Obviously this parameter may be null, it's not mandatory to rely on workflows for product definitions. 
 * @param partRevisionDescription The description of the first revision, version A, of the item. This revision will be created in the same time than the <a href=""PartMaster.html"">PartMaster</a> itself.
 * @param templateId The id of the template to use to instantiate the part, may be null. Refers to a <a href=""PartMasterTemplate.html"">PartMasterTemplate</a>.
 * @param roleMappings Role mapping for the selected workflow model
 * @param userEntries ACL user entries
 * @param userGroupEntries ACL group entries
 * @return The created part master instance
 * @throws NotAllowedException
 * @throws UserNotFoundException
 * @throws WorkspaceNotFoundException
 * @throws AccessRightException
 * @throws WorkflowModelNotFoundException
 * @throws PartMasterAlreadyExistsException
 * @throws CreationException
 */
PartMaster createPartMaster(String workspaceId,String number,String name,boolean standardPart,String workflowModelId,String partRevisionDescription,String templateId,Map<String,String> roleMappings,ACLUserEntry[] userEntries,ACLUserGroupEntry[] userGroupEntries) throws NotAllowedException, UserNotFoundException, WorkspaceNotFoundException, AccessRightException, WorkflowModelNotFoundException, PartMasterAlreadyExistsException, CreationException, PartMasterTemplateNotFoundException, FileAlreadyExistsException, RoleNotFoundException ;","/** 
 * Creates a new <a href=""PartMaster.html"">PartMaster</a>. Be aware that the created item will still be in checkout state when returned. Hence the calling client code has the opportunity to perform final modifications on the first, iteration number 1, <a href=""PartIteration.html"">PartIteration</a>.
 * @param workspaceId The workspace in which the part master will be created
 * @param number The part number of the item to create which is its id inside the workspace
 * @param name The user friendly name of the item
 * @param standardPart Boolean indicating if the item to create is a standard part
 * @param workflowModelId The id of the workflow template that will be instantiated and attached to the created part master. Actually, it's the first  <a href=""PartRevision.html"">PartRevision</a> that will hold the reference to the workflow. Obviously this parameter may be null, it's not mandatory to rely on workflows for product definitions. 
 * @param partRevisionDescription The description of the first revision, version A, of the item. This revision will be created in the same time than the <a href=""PartMaster.html"">PartMaster</a> itself.
 * @param templateId The id of the template to use to instantiate the part, may be null. Refers to a <a href=""PartMasterTemplate.html"">PartMasterTemplate</a>.
 * @param roleMappings Role mapping for the selected workflow model
 * @param userEntries ACL user entries
 * @param userGroupEntries ACL group entries
 * @return The created part master instance
 * @throws NotAllowedException
 * @throws UserNotFoundException
 * @throws WorkspaceNotFoundException
 * @throws AccessRightException
 * @throws WorkflowModelNotFoundException
 * @throws PartMasterAlreadyExistsException
 * @throws CreationException
 * @throws PartMasterTemplateNotFoundException
 * @throws FileAlreadyExistsException
 * @throws RoleNotFoundException
 */
PartMaster createPartMaster(String workspaceId,String number,String name,boolean standardPart,String workflowModelId,String partRevisionDescription,String templateId,Map<String,String> roleMappings,ACLUserEntry[] userEntries,ACLUserGroupEntry[] userGroupEntries) throws NotAllowedException, UserNotFoundException, WorkspaceNotFoundException, AccessRightException, WorkflowModelNotFoundException, PartMasterAlreadyExistsException, CreationException, PartMasterTemplateNotFoundException, FileAlreadyExistsException, RoleNotFoundException ;"
86002,"/** 
 * Checks in the supplied part revision so its latest iteration, that carries the modifications realized since the checkout operation, will be published and made visible to all users.
 * @param partRPK The id of the part revision to check in
 * @return The part revision which has just been checked in
 * @throws PartRevisionNotFoundException
 * @throws UserNotFoundException
 * @throws WorkspaceNotFoundException
 * @throws AccessRightException
 * @throws NotAllowedException
 */
PartRevision checkInPart(PartRevisionKey partRPK) throws PartRevisionNotFoundException, UserNotFoundException, WorkspaceNotFoundException, AccessRightException, NotAllowedException, ESServerException ;","/** 
 * Checks in the supplied part revision so its latest iteration, that carries the modifications realized since the checkout operation, will be published and made visible to all users.
 * @param partRPK The id of the part revision to check in
 * @return The part revision which has just been checked in
 * @throws PartRevisionNotFoundException
 * @throws UserNotFoundException
 * @throws WorkspaceNotFoundException
 * @throws AccessRightException
 * @throws NotAllowedException
 * @throws ESServerException
 */
PartRevision checkInPart(PartRevisionKey partRPK) throws PartRevisionNotFoundException, UserNotFoundException, WorkspaceNotFoundException, AccessRightException, NotAllowedException, ESServerException ;"
86003,"/** 
 * Returns a specific <a href=""PartRevision.html"">PartRevision</a>.
 * @param partRPK The id of the part revision to get
 * @return The part revision
 * @throws UserNotFoundException
 * @throws UserNotActiveException
 * @throws WorkspaceNotFoundException
 * @throws PartRevisionNotFoundException
 */
PartRevision getPartRevision(PartRevisionKey partRPK) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, PartRevisionNotFoundException, AccessRightException ;","/** 
 * Returns a specific <a href=""PartRevision.html"">PartRevision</a>.
 * @param partRPK The id of the part revision to get
 * @return The part revision
 * @throws UserNotFoundException
 * @throws UserNotActiveException
 * @throws WorkspaceNotFoundException
 * @throws PartRevisionNotFoundException
 * @throws AccessRightException
 */
PartRevision getPartRevision(PartRevisionKey partRPK) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, PartRevisionNotFoundException, AccessRightException ;"
86004,"/** 
 * Remove the cad file from the part iteration.
 * @param partIKey The id of the part iteration from which the file will be deleted
 * @throws UserNotFoundException
 * @throws UserNotActiveException
 * @throws WorkspaceNotFoundException
 * @throws PartIterationNotFoundException
 */
void removeCADFileFromPartIteration(PartIterationKey partIKey) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, PartIterationNotFoundException, PartRevisionNotFoundException ;","/** 
 * Remove the cad file from the part iteration.
 * @param partIKey The id of the part iteration from which the file will be deleted
 * @throws UserNotFoundException
 * @throws UserNotActiveException
 * @throws WorkspaceNotFoundException
 * @throws PartIterationNotFoundException
 * @throws PartRevisionNotFoundException
 */
void removeCADFileFromPartIteration(PartIterationKey partIKey) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, PartIterationNotFoundException, PartRevisionNotFoundException ;"
86005,"/** 
 * Returns a specific <a href=""PartIteration.html"">PartIteration</a>.
 * @param pPartIPK The id of the part iteration to get
 * @return The part iteration
 * @throws UserNotFoundException
 * @throws UserNotActiveException
 * @throws WorkspaceNotFoundException
 * @throws PartIterationNotFoundException
 * @throws PartRevisionNotFoundException
 * @throws AccessRightException
 */
PartIteration getPartIteration(PartIterationKey pPartIPK) throws UserNotFoundException, WorkspaceNotFoundException, UserNotActiveException, PartRevisionNotFoundException, AccessRightException, PartIterationNotFoundException ;","/** 
 * Returns a specific <a href=""PartIteration.html"">PartIteration</a>.
 * @param pPartIPK The id of the part iteration to get
 * @return The part iteration
 * @throws UserNotFoundException
 * @throws UserNotActiveException
 * @throws WorkspaceNotFoundException
 * @throws PartIterationNotFoundException
 * @throws PartRevisionNotFoundException
 * @throws AccessRightException
 */
PartIteration getPartIteration(PartIterationKey pPartIPK) throws UserNotFoundException, WorkspaceNotFoundException, UserNotActiveException, PartIterationNotFoundException, PartRevisionNotFoundException, AccessRightException ;"
86006,"/** 
 * Creates a new product structure.
 * @param workspaceId The workspace in which the product structure will be created
 * @param id The id of the product structure which must be unique inside the workspace context
 * @param description The description of the product structure
 * @param designItemNumber The id of the part master that will be the root of the product structure
 * @return The newly created configuration item
 * @throws UserNotFoundException
 * @throws WorkspaceNotFoundException
 * @throws com.docdoku.core.exceptions.AccessRightException
 * @throws NotAllowedException
 * @throws com.docdoku.core.exceptions.ConfigurationItemAlreadyExistsException
 * @throws com.docdoku.core.exceptions.CreationException
 */
ConfigurationItem createConfigurationItem(String workspaceId,String id,String description,String designItemNumber) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, NotAllowedException, ConfigurationItemAlreadyExistsException, CreationException, PartMasterNotFoundException ;","/** 
 * Creates a new product structure.
 * @param workspaceId The workspace in which the product structure will be created
 * @param id The id of the product structure which must be unique inside the workspace context
 * @param description The description of the product structure
 * @param designItemNumber The id of the part master that will be the root of the product structure
 * @return The newly created configuration item
 * @throws UserNotFoundException
 * @throws WorkspaceNotFoundException
 * @throws AccessRightException
 * @throws NotAllowedException
 * @throws ConfigurationItemAlreadyExistsException
 * @throws CreationException
 * @throws PartMasterNotFoundException
 */
ConfigurationItem createConfigurationItem(String workspaceId,String id,String description,String designItemNumber) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, NotAllowedException, ConfigurationItemAlreadyExistsException, CreationException, PartMasterNotFoundException ;"
86007,"private List<PartUsageLink> createComponents(String workspaceId,List<PartUsageLinkDTO> pComponents) throws EntityNotFoundException, EntityAlreadyExistsException, AccessRightException, NotAllowedException, CreationException, UserNotActiveException {
  List<PartUsageLink> components=new ArrayList<>();
  for (  PartUsageLinkDTO partUsageLinkDTO : pComponents) {
    PartMaster component=findOrCreatePartMaster(workspaceId,partUsageLinkDTO.getComponent());
    if (component != null) {
      PartUsageLink partUsageLink=new PartUsageLink();
      List<CADInstance> cadInstances=new ArrayList<>();
      List<PartSubstituteLink> partSubstituteLinks=new ArrayList<>();
      if (partUsageLinkDTO.getCadInstances() != null) {
        for (        CADInstanceDTO cadInstanceDTO : partUsageLinkDTO.getCadInstances()) {
          cadInstances.add(new CADInstance(cadInstanceDTO.getTx(),cadInstanceDTO.getTy(),cadInstanceDTO.getTz(),cadInstanceDTO.getRx(),cadInstanceDTO.getRy(),cadInstanceDTO.getRz()));
        }
      }
 else       if (partUsageLinkDTO.getUnit() == null || partUsageLinkDTO.getUnit().isEmpty()) {
        for (double i=0; i < partUsageLinkDTO.getAmount(); i++) {
          cadInstances.add(new CADInstance(0,0,0,0,0,0));
        }
      }
 else {
        cadInstances.add(new CADInstance(0,0,0,0,0,0));
      }
      for (      PartSubstituteLinkDTO substituteLinkDTO : partUsageLinkDTO.getSubstitutes()) {
        PartMaster substitute=findOrCreatePartMaster(workspaceId,substituteLinkDTO.getSubstitute());
        if (substitute != null) {
          PartSubstituteLink partSubstituteLink=mapper.map(substituteLinkDTO,PartSubstituteLink.class);
          List<CADInstance> subCADInstances=new ArrayList<>();
          if (substituteLinkDTO.getCadInstances() != null) {
            for (            CADInstanceDTO cadInstanceDTO : substituteLinkDTO.getCadInstances()) {
              subCADInstances.add(new CADInstance(cadInstanceDTO.getTx(),cadInstanceDTO.getTy(),cadInstanceDTO.getTz(),cadInstanceDTO.getRx(),cadInstanceDTO.getRy(),cadInstanceDTO.getRz()));
            }
          }
 else           if (substituteLinkDTO.getUnit() == null || substituteLinkDTO.getUnit().isEmpty()) {
            for (double i=0; i < substituteLinkDTO.getAmount(); i++) {
              subCADInstances.add(new CADInstance(0,0,0,0,0,0));
            }
          }
 else {
            cadInstances.add(new CADInstance(0,0,0,0,0,0));
          }
          partSubstituteLink.setCadInstances(subCADInstances);
          partSubstituteLink.setSubstitute(substitute);
          partSubstituteLinks.add(partSubstituteLink);
        }
      }
      partUsageLink.setComponent(component);
      partUsageLink.setAmount(partUsageLinkDTO.getAmount());
      partUsageLink.setComment(partUsageLinkDTO.getComment());
      partUsageLink.setCadInstances(cadInstances);
      partUsageLink.setUnit(partUsageLinkDTO.getUnit());
      partUsageLink.setSubstitutes(partSubstituteLinks);
      components.add(partUsageLink);
    }
  }
  return components;
}","private List<PartUsageLink> createComponents(String workspaceId,List<PartUsageLinkDTO> pComponents) throws EntityNotFoundException, EntityAlreadyExistsException, AccessRightException, NotAllowedException, CreationException, UserNotActiveException {
  List<PartUsageLink> components=new ArrayList<>();
  for (  PartUsageLinkDTO partUsageLinkDTO : pComponents) {
    PartMaster component=findOrCreatePartMaster(workspaceId,partUsageLinkDTO.getComponent());
    if (component != null) {
      PartUsageLink partUsageLink=new PartUsageLink();
      List<CADInstance> cadInstances=new ArrayList<>();
      List<PartSubstituteLink> partSubstituteLinks=new ArrayList<>();
      if (partUsageLinkDTO.getCadInstances() != null) {
        for (        CADInstanceDTO cadInstanceDTO : partUsageLinkDTO.getCadInstances()) {
          cadInstances.add(new CADInstance(cadInstanceDTO.getTx(),cadInstanceDTO.getTy(),cadInstanceDTO.getTz(),cadInstanceDTO.getRx(),cadInstanceDTO.getRy(),cadInstanceDTO.getRz()));
        }
      }
 else       if (partUsageLinkDTO.getUnit() == null || partUsageLinkDTO.getUnit().isEmpty()) {
        for (double i=0; i < partUsageLinkDTO.getAmount(); i++) {
          cadInstances.add(new CADInstance(0,0,0,0,0,0));
        }
      }
 else {
        cadInstances.add(new CADInstance(0,0,0,0,0,0));
      }
      for (      PartSubstituteLinkDTO substituteLinkDTO : partUsageLinkDTO.getSubstitutes()) {
        PartMaster substitute=findOrCreatePartMaster(workspaceId,substituteLinkDTO.getSubstitute());
        if (substitute != null) {
          PartSubstituteLink partSubstituteLink=mapper.map(substituteLinkDTO,PartSubstituteLink.class);
          List<CADInstance> subCADInstances=new ArrayList<>();
          if (substituteLinkDTO.getCadInstances() != null) {
            for (            CADInstanceDTO cadInstanceDTO : substituteLinkDTO.getCadInstances()) {
              subCADInstances.add(new CADInstance(cadInstanceDTO.getTx(),cadInstanceDTO.getTy(),cadInstanceDTO.getTz(),cadInstanceDTO.getRx(),cadInstanceDTO.getRy(),cadInstanceDTO.getRz()));
            }
          }
 else           if (substituteLinkDTO.getUnit() == null || substituteLinkDTO.getUnit().isEmpty()) {
            for (double i=0; i < substituteLinkDTO.getAmount(); i++) {
              subCADInstances.add(new CADInstance(0,0,0,0,0,0));
            }
          }
 else {
            subCADInstances.add(new CADInstance(0,0,0,0,0,0));
          }
          partSubstituteLink.setCadInstances(subCADInstances);
          partSubstituteLink.setSubstitute(substitute);
          partSubstituteLinks.add(partSubstituteLink);
        }
      }
      partUsageLink.setComponent(component);
      partUsageLink.setAmount(partUsageLinkDTO.getAmount());
      partUsageLink.setComment(partUsageLinkDTO.getComment());
      partUsageLink.setCadInstances(cadInstances);
      partUsageLink.setUnit(partUsageLinkDTO.getUnit());
      partUsageLink.setSubstitutes(partSubstituteLinks);
      components.add(partUsageLink);
    }
  }
  return components;
}"
86008,"@Override public ActivityModel convertFrom(ActivityModelDTO activityModelDTO,ActivityModel pActivityModel){
  List<TaskModel> taskModels=new ArrayList<>();
  for (int i=0; i < activityModelDTO.getTaskModels().size(); i++) {
    taskModels.add(mapper.map(activityModelDTO.getTaskModels().get(i),TaskModel.class));
  }
  ActivityModel activityModel;
switch (activityModelDTO.getType()) {
case SERIAL:
{
      activityModel=new SerialActivityModel();
      break;
    }
case PARALLEL:
{
    activityModel=new ParallelActivityModel();
    ((ParallelActivityModel)activityModel).setTasksToComplete(activityModelDTO.getTasksToComplete());
    break;
  }
default :
{
  throw new IllegalArgumentException(""String_Node_Str"");
}
}
activityModel.setStep(activityModelDTO.getStep());
activityModel.setTaskModels(taskModels);
activityModel.setLifeCycleState(activityModelDTO.getLifeCycleState());
return activityModel;
}","@Override public ActivityModel convertFrom(ActivityModelDTO activityModelDTO,ActivityModel pActivityModel){
  List<TaskModel> taskModels=new ArrayList<>();
  for (int i=0; i < activityModelDTO.getTaskModels().size(); i++) {
    taskModels.add(mapper.map(activityModelDTO.getTaskModels().get(i),TaskModel.class));
  }
  ActivityModel activityModel;
switch (activityModelDTO.getType()) {
case SERIAL:
{
      activityModel=new SerialActivityModel();
      activityModel.setTaskModels(taskModels);
      break;
    }
case PARALLEL:
{
    activityModel=new ParallelActivityModel();
    activityModel.setTaskModels(taskModels);
    ((ParallelActivityModel)activityModel).setTasksToComplete(activityModelDTO.getTasksToComplete());
    break;
  }
default :
{
  throw new IllegalArgumentException(""String_Node_Str"");
}
}
activityModel.setStep(activityModelDTO.getStep());
activityModel.setLifeCycleState(activityModelDTO.getLifeCycleState());
return activityModel;
}"
86009,"public Object execImpl() throws Exception {
  if (partNumber == null || revision == null) {
    loadMetadata();
  }
  productS=ScriptingTools.createProductService(getServerURL(),user,password);
  String strRevision=revision == null ? null : revision.toString();
  ConfigSpec cs=null;
  if (baselineId != 0) {
    cs=new BaselineConfigSpec(productS.getBaselineById(baselineId));
  }
  checkoutPart(partNumber,strRevision,0,cs);
  return null;
}","public Object execImpl() throws Exception {
  if (partNumber == null || revision == null) {
    loadMetadata();
  }
  productS=ScriptingTools.createProductService(getServerURL(),user,password);
  String strRevision=revision == null ? null : revision.toString();
  ConfigSpec cs=null;
  if (baselineId != 0) {
    cs=productS.getConfigSpecForBaseline(baselineId);
  }
  checkoutPart(partNumber,strRevision,0,cs);
  return null;
}"
86010,"public Object execImpl() throws Exception {
  if (partNumber == null) {
    loadMetadata();
  }
  productS=ScriptingTools.createProductService(getServerURL(),user,password);
  String strRevision=revision == null ? null : revision.toString();
  ConfigSpec cs=null;
  if (baselineId != 0) {
    cs=new BaselineConfigSpec(productS.getBaselineById(baselineId));
  }
  getPart(partNumber,strRevision,iteration,cs);
  return null;
}","public Object execImpl() throws Exception {
  if (partNumber == null) {
    loadMetadata();
  }
  productS=ScriptingTools.createProductService(getServerURL(),user,password);
  String strRevision=revision == null ? null : revision.toString();
  ConfigSpec cs=null;
  if (baselineId != 0) {
    cs=productS.getConfigSpecForBaseline(baselineId);
  }
  getPart(partNumber,strRevision,iteration,cs);
  return null;
}"
86011,"public BaselineConfigSpec(Baseline baseline){
  this.baseline=baseline;
}","public BaselineConfigSpec(Baseline baseline,User user){
  this.baseline=baseline;
  this.user=user;
}"
86012,"@Override public PartIteration filterConfigSpec(PartMaster part){
  BaselinedPartKey baselinedRootPartKey=new BaselinedPartKey(baseline.getId(),part.getWorkspaceId(),part.getNumber());
  BaselinedPart baselinedRootPart=baseline.getBaselinedPart(baselinedRootPartKey);
  if (baselinedRootPart != null) {
    return baselinedRootPart.getTargetPart();
  }
 else {
    return part.getLastRevision().getLastIteration();
  }
}","@Override public PartIteration filterConfigSpec(PartMaster part){
  BaselinedPartKey baselinedRootPartKey=new BaselinedPartKey(baseline.getPartCollection().getId(),part.getWorkspaceId(),part.getNumber());
  BaselinedPart baselinedRootPart=baseline.getBaselinedPart(baselinedRootPartKey);
  if (baselinedRootPart != null) {
    return baselinedRootPart.getTargetPart();
  }
 else {
    PartIteration partI=part.getLastRevision().getLastIteration();
    PartRevision partRevision=partI.getPartRevision();
    if (partRevision.isCheckedOut() && !partRevision.getCheckOutUser().equals(user)) {
      partI=partRevision.getLastUncheckoutedIteration();
    }
    return partI;
  }
}"
86013,"public LatestConfigSpec(){
}","public LatestConfigSpec(User user){
  this.user=user;
}"
86014,"@Override public PartIteration filterConfigSpec(PartMaster part){
  PartRevision partR=part.getLastRevision();
  return partR.getLastIteration();
}","@Override public PartIteration filterConfigSpec(PartMaster part){
  PartIteration partI=part.getLastRevision().getLastIteration();
  PartRevision partRevision=partI.getPartRevision();
  if (partRevision.isCheckedOut() && !partRevision.getCheckOutUser().equals(user)) {
    partI=partRevision.getLastUncheckoutedIteration();
  }
  return partI;
}"
86015,"void createBaseline(ConfigurationItemKey configurationItemKey,String name,Baseline.BaselineType type,String description) throws UserNotFoundException, AccessRightException, WorkspaceNotFoundException, ConfigurationItemNotFoundException, ConfigurationItemNotReleasedException ;","BaselineCreation createBaseline(ConfigurationItemKey configurationItemKey,String name,Baseline.BaselineType type,String description) throws UserNotFoundException, AccessRightException, WorkspaceNotFoundException, ConfigurationItemNotFoundException, ConfigurationItemNotReleasedException, PartIterationNotFoundException, UserNotActiveException, NotAllowedException ;"
86016,"void createBaseline(ConfigurationItemKey configurationItemKey,String name,Baseline.BaselineType type,String description) throws UserNotFoundException, AccessRightException, WorkspaceNotFoundException, ConfigurationItemNotFoundException, ConfigurationItemNotReleasedException ;","BaselineCreation createBaseline(ConfigurationItemKey configurationItemKey,String name,Baseline.BaselineType type,String description) throws UserNotFoundException, AccessRightException, WorkspaceNotFoundException, ConfigurationItemNotFoundException, ConfigurationItemNotReleasedException, PartIterationNotFoundException, UserNotActiveException, NotAllowedException ;"
86017,"public Layer(String pName,User pAuthor,ConfigurationItem pConfigurationItem){
  this.name=pName;
  this.author=pAuthor;
  this.configurationItem=pConfigurationItem;
}","public Layer(String pName,User pAuthor,ConfigurationItem pConfigurationItem,String color){
  this.name=pName;
  this.author=pAuthor;
  this.configurationItem=pConfigurationItem;
  this.color=color;
}"
86018,"Layer createLayer(ConfigurationItemKey pKey,String pName) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, ConfigurationItemNotFoundException ;","Layer createLayer(ConfigurationItemKey pKey,String pName,String color) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, ConfigurationItemNotFoundException ;"
86019,"Layer updateLayer(ConfigurationItemKey pKey,int pId,String pName) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, ConfigurationItemNotFoundException, LayerNotFoundException, UserNotActiveException ;","Layer updateLayer(ConfigurationItemKey pKey,int pId,String pName,String color) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, ConfigurationItemNotFoundException, LayerNotFoundException, UserNotActiveException ;"
86020,"/** 
 * Creates a new layer on a given product structure.
 * @param key The identifier object of the configuration item wherein the layer will be created
 * @param name The user friendly name of the layer
 * @return The newly created layer
 * @throws UserNotFoundException
 * @throws WorkspaceNotFoundException
 * @throws AccessRightException
 * @throws ConfigurationItemNotFoundException
 */
Layer createLayer(ConfigurationItemKey key,String name) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, ConfigurationItemNotFoundException ;","/** 
 * Creates a new layer on a given product structure.
 * @param key The identifier object of the configuration item wherein the layer will be created
 * @param name The user friendly name of the layer
 * @return The newly created layer
 * @throws UserNotFoundException
 * @throws WorkspaceNotFoundException
 * @throws AccessRightException
 * @throws ConfigurationItemNotFoundException
 */
Layer createLayer(ConfigurationItemKey key,String name,String color) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, ConfigurationItemNotFoundException ;"
86021,"@RolesAllowed(""String_Node_Str"") @Override public Layer createLayer(ConfigurationItemKey pKey,String pName) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, ConfigurationItemNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(pKey.getWorkspace());
  ConfigurationItem ci=new ConfigurationItemDAO(new Locale(user.getLanguage()),em).loadConfigurationItem(pKey);
  Layer layer=new Layer(pName,user,ci);
  Date now=new Date();
  layer.setCreationDate(now);
  new LayerDAO(new Locale(user.getLanguage()),em).createLayer(layer);
  return layer;
}","@RolesAllowed(""String_Node_Str"") @Override public Layer createLayer(ConfigurationItemKey pKey,String pName,String color) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, ConfigurationItemNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(pKey.getWorkspace());
  ConfigurationItem ci=new ConfigurationItemDAO(new Locale(user.getLanguage()),em).loadConfigurationItem(pKey);
  Layer layer=new Layer(pName,user,ci,color);
  Date now=new Date();
  layer.setCreationDate(now);
  new LayerDAO(new Locale(user.getLanguage()),em).createLayer(layer);
  return layer;
}"
86022,"@RolesAllowed(""String_Node_Str"") @Override public Layer updateLayer(ConfigurationItemKey pKey,int pId,String pName) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, ConfigurationItemNotFoundException, LayerNotFoundException, UserNotActiveException {
  Layer layer=getLayer(pId);
  userManager.checkWorkspaceWriteAccess(layer.getConfigurationItem().getWorkspaceId());
  layer.setName(pName);
  return layer;
}","@RolesAllowed(""String_Node_Str"") @Override public Layer updateLayer(ConfigurationItemKey pKey,int pId,String pName,String color) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, ConfigurationItemNotFoundException, LayerNotFoundException, UserNotActiveException {
  Layer layer=getLayer(pId);
  userManager.checkWorkspaceWriteAccess(layer.getConfigurationItem().getWorkspaceId());
  layer.setName(pName);
  layer.setColor(color);
  return layer;
}"
86023,"@GET @Produces(MediaType.APPLICATION_JSON) public LayerDTO[] getLayersInProduct(@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String ciId){
  try {
    ConfigurationItemKey ciKey=new ConfigurationItemKey(workspaceId,ciId);
    List<Layer> layers=productService.getLayers(ciKey);
    LayerDTO[] layerDtos=new LayerDTO[layers.size()];
    for (int i=0; i < layers.size(); i++) {
      layerDtos[i]=new LayerDTO(layers.get(i).getId(),layers.get(i).getName());
    }
    return layerDtos;
  }
 catch (  ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}","@GET @Produces(MediaType.APPLICATION_JSON) public LayerDTO[] getLayersInProduct(@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String ciId){
  try {
    ConfigurationItemKey ciKey=new ConfigurationItemKey(workspaceId,ciId);
    List<Layer> layers=productService.getLayers(ciKey);
    LayerDTO[] layerDtos=new LayerDTO[layers.size()];
    for (int i=0; i < layers.size(); i++) {
      layerDtos[i]=new LayerDTO(layers.get(i).getId(),layers.get(i).getName(),layers.get(i).getColor());
    }
    return layerDtos;
  }
 catch (  ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}"
86024,"@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public LayerDTO createLayer(@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String ciId,LayerDTO layer){
  try {
    ConfigurationItemKey ciKey=new ConfigurationItemKey(workspaceId,ciId);
    Layer l=productService.createLayer(ciKey,layer.getName());
    return new LayerDTO(l.getId(),l.getName());
  }
 catch (  ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}","@POST @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public LayerDTO createLayer(@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String ciId,LayerDTO layer){
  try {
    ConfigurationItemKey ciKey=new ConfigurationItemKey(workspaceId,ciId);
    Layer l=productService.createLayer(ciKey,layer.getName(),layer.getColor());
    return new LayerDTO(l.getId(),l.getName(),l.getColor());
  }
 catch (  ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}"
86025,"@PUT @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public LayerDTO updateLayer(@PathParam(""String_Node_Str"") int layerId,@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String ciId,LayerDTO layer){
  try {
    ConfigurationItemKey ciKey=new ConfigurationItemKey(workspaceId,ciId);
    Layer l=productService.updateLayer(ciKey,layerId,layer.getName());
    return new LayerDTO(l.getId(),l.getName());
  }
 catch (  ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}","@PUT @Path(""String_Node_Str"") @Consumes(MediaType.APPLICATION_JSON) @Produces(MediaType.APPLICATION_JSON) public LayerDTO updateLayer(@PathParam(""String_Node_Str"") int layerId,@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String ciId,LayerDTO layer){
  try {
    ConfigurationItemKey ciKey=new ConfigurationItemKey(workspaceId,ciId);
    Layer l=productService.updateLayer(ciKey,layerId,layer.getName(),layer.getColor());
    return new LayerDTO(l.getId(),l.getName(),l.getColor());
  }
 catch (  ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}"
86026,"public LayerDTO(int pId,String pName){
  this.id=pId;
  this.name=pName;
}","public LayerDTO(int pId,String pName,String color){
  this.id=pId;
  this.name=pName;
  this.color=color;
}"
86027,"public void removeWorkspace(Workspace workspace) throws IOException, StorageException {
  String workspaceId=workspace.getId();
  String pathToMatch=workspaceId + ""String_Node_Str"";
  List<BinaryResource> binaryResourcesInWorkspace=em.createQuery(""String_Node_Str"",BinaryResource.class).setParameter(""String_Node_Str"",pathToMatch).getResultList();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.flush();
  List<DocumentIteration> documentsIteration=em.createQuery(""String_Node_Str"",DocumentIteration.class).setParameter(""String_Node_Str"",workspace).getResultList();
  List<PartIteration> partsIteration=em.createQuery(""String_Node_Str"",PartIteration.class).setParameter(""String_Node_Str"",workspace).getResultList();
  for (  DocumentIteration d : documentsIteration) {
    d.setLinkedDocuments(new HashSet<DocumentLink>());
  }
  for (  PartIteration p : partsIteration) {
    p.setLinkedDocuments(new HashSet<DocumentLink>());
  }
  em.flush();
  List<DocumentMaster> documentsMaster=em.createQuery(""String_Node_Str"",DocumentMaster.class).setParameter(""String_Node_Str"",workspace).getResultList();
  for (  DocumentMaster d : documentsMaster) {
    em.remove(d);
  }
  em.flush();
  List<PartMaster> partsMaster=em.createQuery(""String_Node_Str"",PartMaster.class).setParameter(""String_Node_Str"",workspace).getResultList();
  for (  PartMaster p : partsMaster) {
    em.remove(p);
  }
  em.flush();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspaceId).setParameter(""String_Node_Str"",pathToMatch).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspaceId).setParameter(""String_Node_Str"",pathToMatch).executeUpdate();
  List<WorkflowModel> workflowModels=em.createQuery(""String_Node_Str"",WorkflowModel.class).setParameter(""String_Node_Str"",workspace).getResultList();
  for (  WorkflowModel w : workflowModels) {
    em.remove(w);
  }
  em.flush();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  List<UserGroup> userGroups=em.createQuery(""String_Node_Str"",UserGroup.class).setParameter(""String_Node_Str"",workspace).getResultList();
  for (  UserGroup u : userGroups) {
    u.setUsers(new HashSet<User>());
    em.flush();
    em.remove(u);
  }
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.flush();
  em.remove(workspace);
  dataManager.deleteWorkspaceFolder(workspaceId,binaryResourcesInWorkspace);
}","public void removeWorkspace(Workspace workspace) throws IOException, StorageException {
  String workspaceId=workspace.getId();
  String pathToMatch=workspaceId + ""String_Node_Str"";
  List<BinaryResource> binaryResourcesInWorkspace=em.createQuery(""String_Node_Str"",BinaryResource.class).setParameter(""String_Node_Str"",pathToMatch).getResultList();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspaceId).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspaceId).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.flush();
  List<DocumentIteration> documentsIteration=em.createQuery(""String_Node_Str"",DocumentIteration.class).setParameter(""String_Node_Str"",workspace).getResultList();
  List<PartIteration> partsIteration=em.createQuery(""String_Node_Str"",PartIteration.class).setParameter(""String_Node_Str"",workspace).getResultList();
  for (  DocumentIteration d : documentsIteration) {
    d.setLinkedDocuments(new HashSet<DocumentLink>());
  }
  for (  PartIteration p : partsIteration) {
    p.setLinkedDocuments(new HashSet<DocumentLink>());
  }
  em.flush();
  List<DocumentMaster> documentsMaster=em.createQuery(""String_Node_Str"",DocumentMaster.class).setParameter(""String_Node_Str"",workspace).getResultList();
  for (  DocumentMaster d : documentsMaster) {
    em.remove(d);
  }
  em.flush();
  List<PartMaster> partsMaster=em.createQuery(""String_Node_Str"",PartMaster.class).setParameter(""String_Node_Str"",workspace).getResultList();
  for (  PartMaster p : partsMaster) {
    em.remove(p);
  }
  em.flush();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspaceId).setParameter(""String_Node_Str"",pathToMatch).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspaceId).setParameter(""String_Node_Str"",pathToMatch).executeUpdate();
  List<WorkflowModel> workflowModels=em.createQuery(""String_Node_Str"",WorkflowModel.class).setParameter(""String_Node_Str"",workspace).getResultList();
  for (  WorkflowModel w : workflowModels) {
    em.remove(w);
  }
  em.flush();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  List<UserGroup> userGroups=em.createQuery(""String_Node_Str"",UserGroup.class).setParameter(""String_Node_Str"",workspace).getResultList();
  for (  UserGroup u : userGroups) {
    u.setUsers(new HashSet<User>());
    em.flush();
    em.remove(u);
  }
  em.createQuery(""String_Node_Str"").setParameter(""String_Node_Str"",workspace).executeUpdate();
  em.flush();
  em.remove(workspace);
  dataManager.deleteWorkspaceFolder(workspaceId,binaryResourcesInWorkspace);
}"
86028,"private DocumentMasterDTO[] getDocumentsCheckedOutByUser(String workspaceId){
  try {
    DocumentMaster[] docMs=documentService.getCheckedOutDocumentMasters(workspaceId);
    DocumentMasterDTO[] docMsDTOs=new DocumentMasterDTO[docMs.length];
    for (int i=0; i < docMs.length; i++) {
      docMsDTOs[i]=mapper.map(docMs[i],DocumentMasterDTO.class);
      docMsDTOs[i].setPath(docMs[i].getLocation().getCompletePath());
      docMsDTOs[i]=Tools.createLightDocumentMasterDTO(docMsDTOs[i]);
      docMsDTOs[i].setIterationSubscription(documentService.isUserIterationChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
      docMsDTOs[i].setStateSubscription(documentService.isUserStateChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
      ACL acl=docMs[i].getACL();
      if (acl != null) {
        docMsDTOs[i].setAcl(Tools.mapACLtoACLDTO(acl));
      }
    }
    return docMsDTOs;
  }
 catch (  com.docdoku.core.exceptions.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}","private DocumentMasterDTO[] getDocumentsCheckedOutByUser(String workspaceId){
  try {
    DocumentMaster[] docMs=documentService.getCheckedOutDocumentMasters(workspaceId);
    DocumentMasterDTO[] docMsDTOs=new DocumentMasterDTO[docMs.length];
    for (int i=0; i < docMs.length; i++) {
      docMsDTOs[i]=mapper.map(docMs[i],DocumentMasterDTO.class);
      docMsDTOs[i].setPath(docMs[i].getLocation().getCompletePath());
      docMsDTOs[i]=Tools.createLightDocumentMasterDTO(docMsDTOs[i]);
      docMsDTOs[i].setIterationSubscription(documentService.isUserIterationChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
      docMsDTOs[i].setStateSubscription(documentService.isUserStateChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
    }
    return docMsDTOs;
  }
 catch (  com.docdoku.core.exceptions.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}"
86029,"private DocumentMasterDTO[] getDocumentsWithGivenTagIdAndWorkspaceId(String workspaceId,String tagId){
  try {
    DocumentMaster[] docMs=documentService.findDocumentMastersByTag(new TagKey(workspaceId,tagId));
    DocumentMasterDTO[] docMsDTOs=new DocumentMasterDTO[docMs.length];
    for (int i=0; i < docMs.length; i++) {
      docMsDTOs[i]=mapper.map(docMs[i],DocumentMasterDTO.class);
      docMsDTOs[i].setPath(docMs[i].getLocation().getCompletePath());
      docMsDTOs[i]=Tools.createLightDocumentMasterDTO(docMsDTOs[i]);
      docMsDTOs[i].setIterationSubscription(documentService.isUserIterationChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
      docMsDTOs[i].setStateSubscription(documentService.isUserStateChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
      ACL acl=docMs[i].getACL();
      if (acl != null) {
        docMsDTOs[i].setAcl(Tools.mapACLtoACLDTO(acl));
      }
    }
    return docMsDTOs;
  }
 catch (  com.docdoku.core.exceptions.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}","private DocumentMasterDTO[] getDocumentsWithGivenTagIdAndWorkspaceId(String workspaceId,String tagId){
  try {
    DocumentMaster[] docMs=documentService.findDocumentMastersByTag(new TagKey(workspaceId,tagId));
    DocumentMasterDTO[] docMsDTOs=new DocumentMasterDTO[docMs.length];
    for (int i=0; i < docMs.length; i++) {
      docMsDTOs[i]=mapper.map(docMs[i],DocumentMasterDTO.class);
      docMsDTOs[i].setPath(docMs[i].getLocation().getCompletePath());
      docMsDTOs[i]=Tools.createLightDocumentMasterDTO(docMsDTOs[i]);
      docMsDTOs[i].setIterationSubscription(documentService.isUserIterationChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
      docMsDTOs[i].setStateSubscription(documentService.isUserStateChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
    }
    return docMsDTOs;
  }
 catch (  com.docdoku.core.exceptions.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}"
86030,"private DocumentMasterDTO[] getDocumentsInWorkspace(String workspaceId,int start){
  int maxResult=20;
  try {
    DocumentMaster[] docMs=documentService.getAllDocumentsInWorkspace(workspaceId,start,maxResult);
    DocumentMasterDTO[] docMsDTOs=new DocumentMasterDTO[docMs.length];
    for (int i=0; i < docMs.length; i++) {
      docMsDTOs[i]=mapper.map(docMs[i],DocumentMasterDTO.class);
      docMsDTOs[i].setPath(docMs[i].getLocation().getCompletePath());
      docMsDTOs[i]=Tools.createLightDocumentMasterDTO(docMsDTOs[i]);
      docMsDTOs[i].setIterationSubscription(documentService.isUserIterationChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
      docMsDTOs[i].setStateSubscription(documentService.isUserStateChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
      ACL acl=docMs[i].getACL();
      if (acl != null) {
        docMsDTOs[i].setAcl(Tools.mapACLtoACLDTO(acl));
      }
    }
    return docMsDTOs;
  }
 catch (  com.docdoku.core.exceptions.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}","private DocumentMasterDTO[] getDocumentsInWorkspace(String workspaceId,int start){
  int maxResult=20;
  try {
    DocumentMaster[] docMs=documentService.getAllDocumentsInWorkspace(workspaceId,start,maxResult);
    DocumentMasterDTO[] docMsDTOs=new DocumentMasterDTO[docMs.length];
    for (int i=0; i < docMs.length; i++) {
      docMsDTOs[i]=mapper.map(docMs[i],DocumentMasterDTO.class);
      docMsDTOs[i].setPath(docMs[i].getLocation().getCompletePath());
      docMsDTOs[i]=Tools.createLightDocumentMasterDTO(docMsDTOs[i]);
      docMsDTOs[i].setIterationSubscription(documentService.isUserIterationChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
      docMsDTOs[i].setStateSubscription(documentService.isUserStateChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
    }
    return docMsDTOs;
  }
 catch (  com.docdoku.core.exceptions.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}"
86031,"private DocumentMasterDTO[] getDocumentsWhereGivenUserHasAssignedTasks(String workspaceId,String assignedUserLogin,String filter){
  try {
    DocumentMaster[] docMs;
    if (filter == null) {
      docMs=documentService.getDocumentMastersWithAssignedTasksForGivenUser(workspaceId,assignedUserLogin);
    }
 else {
switch (filter) {
case ""String_Node_Str"":
        docMs=documentService.getDocumentMastersWithOpenedTasksForGivenUser(workspaceId,assignedUserLogin);
      break;
default :
    docMs=documentService.getDocumentMastersWithAssignedTasksForGivenUser(workspaceId,assignedUserLogin);
  break;
}
}
ArrayList<DocumentMasterDTO> docMsDTOs=new ArrayList<DocumentMasterDTO>();
for (int i=0; i < docMs.length; i++) {
DocumentMasterDTO docDTO=mapper.map(docMs[i],DocumentMasterDTO.class);
docDTO.setPath(docMs[i].getLocation().getCompletePath());
docDTO=Tools.createLightDocumentMasterDTO(docDTO);
docDTO.setIterationSubscription(documentService.isUserIterationChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
docDTO.setStateSubscription(documentService.isUserStateChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
ACL acl=docMs[i].getACL();
if (acl != null) {
docDTO.setAcl(Tools.mapACLtoACLDTO(acl));
}
docMsDTOs.add(docDTO);
}
return docMsDTOs.toArray(new DocumentMasterDTO[docMsDTOs.size()]);
}
 catch (com.docdoku.core.exceptions.ApplicationException ex) {
throw new RestApiException(ex.toString(),ex.getMessage());
}
}","private DocumentMasterDTO[] getDocumentsWhereGivenUserHasAssignedTasks(String workspaceId,String assignedUserLogin,String filter){
  try {
    DocumentMaster[] docMs;
    if (filter == null) {
      docMs=documentService.getDocumentMastersWithAssignedTasksForGivenUser(workspaceId,assignedUserLogin);
    }
 else {
switch (filter) {
case ""String_Node_Str"":
        docMs=documentService.getDocumentMastersWithOpenedTasksForGivenUser(workspaceId,assignedUserLogin);
      break;
default :
    docMs=documentService.getDocumentMastersWithAssignedTasksForGivenUser(workspaceId,assignedUserLogin);
  break;
}
}
ArrayList<DocumentMasterDTO> docMsDTOs=new ArrayList<DocumentMasterDTO>();
for (int i=0; i < docMs.length; i++) {
DocumentMasterDTO docDTO=mapper.map(docMs[i],DocumentMasterDTO.class);
docDTO.setPath(docMs[i].getLocation().getCompletePath());
docDTO=Tools.createLightDocumentMasterDTO(docDTO);
docDTO.setIterationSubscription(documentService.isUserIterationChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
docDTO.setStateSubscription(documentService.isUserStateChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
docMsDTOs.add(docDTO);
}
return docMsDTOs.toArray(new DocumentMasterDTO[docMsDTOs.size()]);
}
 catch (com.docdoku.core.exceptions.ApplicationException ex) {
throw new RestApiException(ex.toString(),ex.getMessage());
}
}"
86032,"private DocumentMasterDTO[] getDocumentsWithSearchQuery(String workspaceId,String pStringQuery){
  try {
    DocumentSearchQuery documentSearchQuery=SearchQueryParser.parseDocumentStringQuery(workspaceId,pStringQuery);
    DocumentMaster[] docMs=com.docdoku.core.util.Tools.resetParentReferences(documentService.searchDocumentMasters(documentSearchQuery));
    DocumentMasterDTO[] docMsDTOs=new DocumentMasterDTO[docMs.length];
    for (int i=0; i < docMs.length; i++) {
      docMsDTOs[i]=mapper.map(docMs[i],DocumentMasterDTO.class);
      docMsDTOs[i].setPath(docMs[i].getLocation().getCompletePath());
      docMsDTOs[i]=Tools.createLightDocumentMasterDTO(docMsDTOs[i]);
      docMsDTOs[i].setIterationSubscription(documentService.isUserIterationChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
      docMsDTOs[i].setStateSubscription(documentService.isUserStateChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
      ACL acl=docMs[i].getACL();
      if (acl != null) {
        docMsDTOs[i].setAcl(Tools.mapACLtoACLDTO(acl));
      }
    }
    return docMsDTOs;
  }
 catch (  com.docdoku.core.exceptions.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}","private DocumentMasterDTO[] getDocumentsWithSearchQuery(String workspaceId,String pStringQuery){
  try {
    DocumentSearchQuery documentSearchQuery=SearchQueryParser.parseDocumentStringQuery(workspaceId,pStringQuery);
    DocumentMaster[] docMs=com.docdoku.core.util.Tools.resetParentReferences(documentService.searchDocumentMasters(documentSearchQuery));
    DocumentMasterDTO[] docMsDTOs=new DocumentMasterDTO[docMs.length];
    for (int i=0; i < docMs.length; i++) {
      docMsDTOs[i]=mapper.map(docMs[i],DocumentMasterDTO.class);
      docMsDTOs[i].setPath(docMs[i].getLocation().getCompletePath());
      docMsDTOs[i]=Tools.createLightDocumentMasterDTO(docMsDTOs[i]);
      docMsDTOs[i].setIterationSubscription(documentService.isUserIterationChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
      docMsDTOs[i].setStateSubscription(documentService.isUserStateChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
    }
    return docMsDTOs;
  }
 catch (  com.docdoku.core.exceptions.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}"
86033,"private DocumentMasterDTO[] getDocumentsWithGivenFolderIdAndWorkspaceId(String workspaceId,String folderId){
  try {
    String decodedCompletePath=getPathFromUrlParams(workspaceId,folderId);
    DocumentMaster[] docMs=documentService.findDocumentMastersByFolder(decodedCompletePath);
    DocumentMasterDTO[] docMsDTOs=new DocumentMasterDTO[docMs.length];
    for (int i=0; i < docMs.length; i++) {
      docMsDTOs[i]=mapper.map(docMs[i],DocumentMasterDTO.class);
      docMsDTOs[i].setPath(docMs[i].getLocation().getCompletePath());
      docMsDTOs[i]=Tools.createLightDocumentMasterDTO(docMsDTOs[i]);
      docMsDTOs[i].setLifeCycleState(docMs[i].getLifeCycleState());
      docMsDTOs[i].setIterationSubscription(documentService.isUserIterationChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
      docMsDTOs[i].setStateSubscription(documentService.isUserStateChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
      ACL acl=docMs[i].getACL();
      if (acl != null) {
        docMsDTOs[i].setAcl(Tools.mapACLtoACLDTO(acl));
      }
    }
    return docMsDTOs;
  }
 catch (  com.docdoku.core.exceptions.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}","private DocumentMasterDTO[] getDocumentsWithGivenFolderIdAndWorkspaceId(String workspaceId,String folderId){
  try {
    String decodedCompletePath=getPathFromUrlParams(workspaceId,folderId);
    DocumentMaster[] docMs=documentService.findDocumentMastersByFolder(decodedCompletePath);
    DocumentMasterDTO[] docMsDTOs=new DocumentMasterDTO[docMs.length];
    for (int i=0; i < docMs.length; i++) {
      docMsDTOs[i]=mapper.map(docMs[i],DocumentMasterDTO.class);
      docMsDTOs[i].setPath(docMs[i].getLocation().getCompletePath());
      docMsDTOs[i]=Tools.createLightDocumentMasterDTO(docMsDTOs[i]);
      docMsDTOs[i].setLifeCycleState(docMs[i].getLifeCycleState());
      docMsDTOs[i].setIterationSubscription(documentService.isUserIterationChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
      docMsDTOs[i].setStateSubscription(documentService.isUserStateChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
    }
    return docMsDTOs;
  }
 catch (  com.docdoku.core.exceptions.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}"
86034,"public static DocumentMasterDTO createLightDocumentMasterDTO(DocumentMasterDTO docMsDTO){
  if (docMsDTO.getLastIteration() != null) {
    DocumentIterationDTO lastIteration=docMsDTO.getLastIteration();
    List<DocumentIterationDTO> iterations=new ArrayList<DocumentIterationDTO>();
    iterations.add(lastIteration);
    docMsDTO.setDocumentIterations(iterations);
  }
  docMsDTO.setTags(null);
  docMsDTO.setWorkflow(null);
  docMsDTO.setAcl(null);
  return docMsDTO;
}","public static DocumentMasterDTO createLightDocumentMasterDTO(DocumentMasterDTO docMsDTO){
  if (docMsDTO.getLastIteration() != null) {
    DocumentIterationDTO lastIteration=docMsDTO.getLastIteration();
    List<DocumentIterationDTO> iterations=new ArrayList<DocumentIterationDTO>();
    iterations.add(lastIteration);
    docMsDTO.setDocumentIterations(iterations);
  }
  docMsDTO.setTags(null);
  docMsDTO.setWorkflow(null);
  return docMsDTO;
}"
86035,"@Override public ACLDTO convertTo(ACL acl,ACLDTO aclDTO){
  aclDTO=new ACLDTO();
  if (acl != null) {
    for (    Map.Entry<User,ACLUserEntry> entry : acl.getUserEntries().entrySet()) {
      ACLUserEntry aclEntry=entry.getValue();
      aclDTO.addUserEntry(aclEntry.getPrincipalLogin(),aclEntry.getPermission());
    }
    for (    Map.Entry<UserGroup,ACLUserGroupEntry> entry : acl.getGroupEntries().entrySet()) {
      ACLUserGroupEntry aclEntry=entry.getValue();
      aclDTO.addGroupEntry(aclEntry.getPrincipalId(),aclEntry.getPermission());
    }
  }
  return aclDTO;
}","@Override public ACLDTO convertTo(ACL acl,ACLDTO aclDTO){
  aclDTO=new ACLDTO();
  if (acl != null) {
    for (    Map.Entry<User,ACLUserEntry> entry : acl.getUserEntries().entrySet()) {
      ACLUserEntry aclEntry=entry.getValue();
      aclDTO.addUserEntry(aclEntry.getPrincipalLogin(),aclEntry.getPermission());
    }
    for (    Map.Entry<UserGroup,ACLUserGroupEntry> entry : acl.getGroupEntries().entrySet()) {
      ACLUserGroupEntry aclEntry=entry.getValue();
      aclDTO.addGroupEntry(aclEntry.getPrincipalId(),aclEntry.getPermission());
    }
    return aclDTO;
  }
  return null;
}"
86036,"public void logIn() throws ServletException, AccountNotFoundException, IOException {
  HttpServletRequest request=(HttpServletRequest)(FacesContext.getCurrentInstance().getExternalContext().getRequest());
  HttpSession session=(HttpSession)request.getSession();
  request.login(login,password);
  Account account=userManager.getAccount(login);
  if (!login.equals(account.getLogin())) {
    request.logout();
    throw new AccountNotFoundException(new Locale(account.getLanguage()),login);
  }
  session.setAttribute(""String_Node_Str"",account);
  Map<String,Workspace> administeredWorkspaces=new HashMap<String,Workspace>();
  for (  Workspace wks : userManager.getAdministratedWorkspaces()) {
    administeredWorkspaces.put(wks.getId(),wks);
  }
  session.setAttribute(""String_Node_Str"",administeredWorkspaces);
  Set<Workspace> regularWorkspaces=new HashSet<Workspace>();
  Workspace[] workspaces=userManager.getWorkspacesWhereCallerIsActive();
  regularWorkspaces.addAll(Arrays.asList(workspaces));
  regularWorkspaces.removeAll(administeredWorkspaces.values());
  session.setAttribute(""String_Node_Str"",regularWorkspaces);
  FacesContext fc=FacesContext.getCurrentInstance();
  ExternalContext ec=fc.getExternalContext();
  if (userManager.isCallerInRole(""String_Node_Str"")) {
    ec.redirect(request.getContextPath() + ""String_Node_Str"");
    session.setAttribute(""String_Node_Str"",true);
  }
 else {
    session.setAttribute(""String_Node_Str"",false);
    if (originURL != null && originURL.length() > 1)     ec.redirect(originURL);
 else     ec.redirect(request.getContextPath() + ""String_Node_Str"");
  }
}","public void logIn() throws ServletException, AccountNotFoundException, IOException {
  HttpServletRequest request=(HttpServletRequest)(FacesContext.getCurrentInstance().getExternalContext().getRequest());
  HttpSession session=(HttpSession)request.getSession();
  request.logout();
  request.login(login,password);
  Account account=userManager.getAccount(login);
  if (!login.equals(account.getLogin())) {
    request.logout();
    throw new AccountNotFoundException(new Locale(account.getLanguage()),login);
  }
  session.setAttribute(""String_Node_Str"",account);
  Map<String,Workspace> administeredWorkspaces=new HashMap<String,Workspace>();
  for (  Workspace wks : userManager.getAdministratedWorkspaces()) {
    administeredWorkspaces.put(wks.getId(),wks);
  }
  session.setAttribute(""String_Node_Str"",administeredWorkspaces);
  Set<Workspace> regularWorkspaces=new HashSet<Workspace>();
  Workspace[] workspaces=userManager.getWorkspacesWhereCallerIsActive();
  regularWorkspaces.addAll(Arrays.asList(workspaces));
  regularWorkspaces.removeAll(administeredWorkspaces.values());
  session.setAttribute(""String_Node_Str"",regularWorkspaces);
  FacesContext fc=FacesContext.getCurrentInstance();
  ExternalContext ec=fc.getExternalContext();
  if (userManager.isCallerInRole(""String_Node_Str"")) {
    ec.redirect(request.getContextPath() + ""String_Node_Str"");
    session.setAttribute(""String_Node_Str"",true);
  }
 else {
    session.setAttribute(""String_Node_Str"",false);
    if (originURL != null && originURL.length() > 1)     ec.redirect(originURL);
 else     ec.redirect(request.getContextPath() + ""String_Node_Str"");
  }
}"
86037,public void onProgressUpdate(int progress);,"@Override public void onProgressUpdate(Integer... values){
  float progress=values[0];
  float size=values[1];
  float advancement=progress / size * 100;
  if (listener != null) {
    listener.onUploadProgressUpdate((int)advancement);
  }
}"
86038,"public PhoneNumber(String number,String type){
  this.number=number;
  this.type=type;
}","public PhoneNumber(String number,String type,int typeCode){
  this.number=number;
  this.type=type;
  this.typeCode=typeCode;
}"
86039,"/** 
 * Searches the phone number provided for this <code>User</code>. If a mobile phone number is found, returns it. Otherwise, if a phone number is found, returns the first one in the <code>ArrayList</code>. If no phone numbers are found, returns an empty <code>String</code>.
 * @return the best phone number found for contact
 */
public String getPhoneNumber(){
  for (  PhoneNumber phoneNumber : phoneNumbers) {
    if (phoneNumber.type.equals(ContactsContract.CommonDataKinds.Phone.TYPE_MOBILE)) {
      Log.i(LOG_TAG,""String_Node_Str"" + name);
      return phoneNumber.getNumber();
    }
  }
  try {
    return phoneNumbers.get(0).getNumber();
  }
 catch (  IndexOutOfBoundsException e) {
    Log.i(LOG_TAG,""String_Node_Str"");
    return ""String_Node_Str"";
  }
}","/** 
 * Searches the phone number provided for this <code>User</code>. If a mobile phone number is found, returns it. Otherwise, if a phone number is found, returns the first one in the <code>ArrayList</code>. If no phone numbers are found, returns an empty <code>String</code>.
 * @return the best phone number found for contact
 */
public String getPhoneNumber(){
  for (  PhoneNumber phoneNumber : phoneNumbers) {
    if (phoneNumber.typeCode == ContactsContract.CommonDataKinds.Phone.TYPE_MOBILE) {
      Log.i(LOG_TAG,""String_Node_Str"" + name);
      return phoneNumber.getNumber();
    }
  }
  try {
    return phoneNumbers.get(0).getNumber();
  }
 catch (  IndexOutOfBoundsException e) {
    Log.i(LOG_TAG,""String_Node_Str"");
    return ""String_Node_Str"";
  }
}"
86040,"/** 
 * Add a phone number belonging to a contact on the phone to this user
 * @param number the phone number
 * @param type the type of phone number (mobile, home, ...)
 */
public void addPhoneNumber(String number,String type){
  phoneNumbers.add(new PhoneNumber(number,type));
}","/** 
 * Add a phone number belonging to a contact on the phone to this user
 * @param number the phone number
 * @param type the type of phone number (mobile, home, ...)
 * @param typeCode
 */
public void addPhoneNumber(String number,String type,int typeCode){
  phoneNumbers.add(new PhoneNumber(number,type,typeCode));
}"
86041,"/** 
 * Searches on the phone contacts for one that has an email address matching the   {@link User}'s. <p>If one is found, then the   {@code User} is notified through {@link User#setExistsOnPhone(boolean) setExistsOnPhone()}that it exists in the phone's contacts. All the phone numbers available for this contact are added to the  {@code User}'s   {@code ArrayList} of phone numbers.
 * @param user the user to search for on phone and that may be updated
 */
private void searchForContactOnPhone(User user){
  Cursor contacts=getContentResolver().query(ContactsContract.CommonDataKinds.Email.CONTENT_URI,null,ContactsContract.CommonDataKinds.Email.ADDRESS + ""String_Node_Str"",new String[]{user.getEmail()},null);
  if (contacts.moveToNext()) {
    user.setExistsOnPhone(true);
    String contactId=contacts.getString(contacts.getColumnIndex(ContactsContract.CommonDataKinds.Identity.CONTACT_ID));
    Cursor contactPhones=getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,null,ContactsContract.CommonDataKinds.Phone.CONTACT_ID + ""String_Node_Str"",new String[]{contactId},null);
    String result=""String_Node_Str"" + user.getEmail() + ""String_Node_Str""+ contactId+ ""String_Node_Str""+ contacts.getString(contacts.getColumnIndex(ContactsContract.CommonDataKinds.Identity.DISPLAY_NAME));
    while (contactPhones.moveToNext()) {
      String phoneNumber=contactPhones.getString(contactPhones.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
      int phoneTypeCode=contactPhones.getInt(contactPhones.getColumnIndex(ContactsContract.CommonDataKinds.Phone.TYPE));
      String phoneLabel=contactPhones.getString(contactPhones.getColumnIndex(ContactsContract.CommonDataKinds.Phone.LABEL));
      String phoneType=ContactsContract.CommonDataKinds.Phone.getTypeLabel(getResources(),phoneTypeCode,phoneLabel).toString();
      result+=""String_Node_Str"" + phoneNumber + ""String_Node_Str""+ phoneType;
      user.addPhoneNumber(phoneNumber,phoneType);
    }
    Log.i(LOG_TAG,result);
  }
}","/** 
 * Searches on the phone contacts for one that has an email address matching the   {@link User}'s. <p>If one is found, then the   {@code User} is notified through {@link User#setExistsOnPhone(boolean) setExistsOnPhone()}that it exists in the phone's contacts. All the phone numbers available for this contact are added to the  {@code User}'s   {@code ArrayList} of phone numbers.
 * @param user the user to search for on phone and that may be updated
 */
private void searchForContactOnPhone(User user){
  Cursor contacts=getContentResolver().query(ContactsContract.CommonDataKinds.Email.CONTENT_URI,null,ContactsContract.CommonDataKinds.Email.ADDRESS + ""String_Node_Str"",new String[]{user.getEmail()},null);
  if (contacts.moveToNext()) {
    user.setExistsOnPhone(true);
    String contactId=contacts.getString(contacts.getColumnIndex(ContactsContract.CommonDataKinds.Identity.CONTACT_ID));
    Cursor contactPhones=getContentResolver().query(ContactsContract.CommonDataKinds.Phone.CONTENT_URI,null,ContactsContract.CommonDataKinds.Phone.CONTACT_ID + ""String_Node_Str"",new String[]{contactId},null);
    String result=""String_Node_Str"" + user.getEmail() + ""String_Node_Str""+ contactId+ ""String_Node_Str""+ contacts.getString(contacts.getColumnIndex(ContactsContract.CommonDataKinds.Identity.DISPLAY_NAME));
    while (contactPhones.moveToNext()) {
      String phoneNumber=contactPhones.getString(contactPhones.getColumnIndex(ContactsContract.CommonDataKinds.Phone.NUMBER));
      int phoneTypeCode=contactPhones.getInt(contactPhones.getColumnIndex(ContactsContract.CommonDataKinds.Phone.TYPE));
      String phoneLabel=contactPhones.getString(contactPhones.getColumnIndex(ContactsContract.CommonDataKinds.Phone.LABEL));
      String phoneType=ContactsContract.CommonDataKinds.Phone.getTypeLabel(getResources(),phoneTypeCode,phoneLabel).toString();
      result+=""String_Node_Str"" + phoneNumber + ""String_Node_Str""+ phoneType;
      user.addPhoneNumber(phoneNumber,phoneType,phoneTypeCode);
    }
    Log.i(LOG_TAG,result);
  }
}"
86042,"@Override public boolean isEnabled(int position){
  Document document=documents.get(position);
  if (document == null || document.getAuthor() == null) {
    return false;
  }
 else {
    return true;
  }
}","@Override public boolean isEnabled(int position){
  try {
    Document document=documents.get(position);
    if (document == null || document.getAuthor() == null) {
      return false;
    }
 else {
      return true;
    }
  }
 catch (  IndexOutOfBoundsException e) {
    return false;
  }
}"
86043,"@Override public boolean isEnabled(int position){
  Part part=parts.get(position);
  if (part == null || part.getAuthor() == null) {
    return false;
  }
 else {
    return true;
  }
}","@Override public boolean isEnabled(int position){
  try {
    Part part=parts.get(position);
    if (part == null || part.getAuthor() == null) {
      return false;
    }
 else {
      return true;
    }
  }
 catch (  IndexOutOfBoundsException e) {
    return false;
  }
}"
86044,"private View createUploadFileRowView(){
  View rowView=getLayoutInflater().inflate(R.layout.adapter_upload_file,null);
  ImageButton takePicture=(ImageButton)rowView.findViewById(R.id.takePicture);
  takePicture.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
      String timeStamp=new SimpleDateFormat(""String_Node_Str"").format(new Date());
      File file=new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_PICTURES),""String_Node_Str"" + timeStamp + ""String_Node_Str"");
      try {
        file.createNewFile();
        pictureSavePath=file.getAbsolutePath();
        intent.putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(file));
        startActivityForResult(intent,INTENT_CODE_ACTIVITY_PICTURE);
      }
 catch (      IOException e) {
        Toast.makeText(DocumentActivity.this,R.string.documentPictureDirectoryFail,Toast.LENGTH_LONG).show();
        e.printStackTrace();
        Log.e(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ e.getCause()+ ""String_Node_Str""+ file.getAbsolutePath());
      }
    }
  }
);
  ImageButton uploadFile=(ImageButton)rowView.findViewById(R.id.uploadFile);
  uploadFile.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(Intent.ACTION_GET_CONTENT);
      intent.setType(""String_Node_Str"");
      intent.addCategory(Intent.CATEGORY_OPENABLE);
      try {
        startActivityForResult(Intent.createChooser(intent,""String_Node_Str""),INTENT_CODE_ACTIVITY_FILE_CHOOSER);
      }
 catch (      android.content.ActivityNotFoundException ex) {
        Toast.makeText(DocumentActivity.this,""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
    }
  }
);
  return rowView;
}","private View createUploadFileRowView(){
  View rowView=getLayoutInflater().inflate(R.layout.adapter_upload_file,null);
  ImageButton takePicture=(ImageButton)rowView.findViewById(R.id.takePicture);
  takePicture.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
      String timeStamp=new SimpleDateFormat(""String_Node_Str"").format(new Date());
      File file=new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DCIM),""String_Node_Str"" + timeStamp + ""String_Node_Str"");
      try {
        file.createNewFile();
        pictureSavePath=file.getAbsolutePath();
        intent.putExtra(MediaStore.EXTRA_OUTPUT,Uri.fromFile(file));
        startActivityForResult(intent,INTENT_CODE_ACTIVITY_PICTURE);
      }
 catch (      IOException e) {
        Toast.makeText(DocumentActivity.this,R.string.documentPictureDirectoryFail,Toast.LENGTH_LONG).show();
        e.printStackTrace();
        Log.e(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"" + e.getMessage() + ""String_Node_Str""+ e.getCause()+ ""String_Node_Str""+ file.getAbsolutePath());
      }
    }
  }
);
  ImageButton uploadFile=(ImageButton)rowView.findViewById(R.id.uploadFile);
  uploadFile.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      Intent intent=new Intent(Intent.ACTION_GET_CONTENT);
      intent.setType(""String_Node_Str"");
      intent.addCategory(Intent.CATEGORY_OPENABLE);
      try {
        startActivityForResult(Intent.createChooser(intent,""String_Node_Str""),INTENT_CODE_ACTIVITY_FILE_CHOOSER);
      }
 catch (      android.content.ActivityNotFoundException ex) {
        Toast.makeText(DocumentActivity.this,""String_Node_Str"",Toast.LENGTH_LONG).show();
      }
    }
  }
);
  return rowView;
}"
86045,"/** 
 * Result of taking a picture or video
 * @Override onActivityResult
 */
@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode == RESULT_OK) {
switch (requestCode) {
case INTENT_CODE_ACTIVITY_PICTURE:
      Toast.makeText(this,getResources().getString(R.string.imageSavedIn) + pictureSavePath,Toast.LENGTH_LONG).show();
    AlertDialog.Builder dialogBuilder=new AlertDialog.Builder(this);
  final View dialogView=getLayoutInflater().inflate(R.layout.dialog_upload_picture,null);
Bitmap picture=BitmapFactory.decodeFile(pictureSavePath);
((ImageView)dialogView.findViewById(R.id.image)).setImageBitmap(picture);
dialogBuilder.setView(dialogView);
dialogBuilder.setCancelable(false);
dialogBuilder.setPositiveButton(R.string.uploadImage,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialogInterface,int i){
String fileName=((EditText)dialogView.findViewById(R.id.imageName)).getText().toString();
if (fileName.length() == 0) fileName=""String_Node_Str"" + new SimpleDateFormat(""String_Node_Str"").format(new Date());
;
startUploadingFile(fileName + ""String_Node_Str"",pictureSavePath);
}
}
);
dialogBuilder.setNegativeButton(R.string.cancel,null);
dialogBuilder.create().show();
break;
case INTENT_CODE_ACTIVITY_VIDEO:
Toast.makeText(this,getResources().getString(R.string.videoSavedIn) + pictureSavePath,Toast.LENGTH_LONG).show();
break;
case INTENT_CODE_ACTIVITY_FILE_CHOOSER:
Uri uri=data.getData();
String path=getRealPathFromURI(uri);
String fileName=path.substring(path.lastIndexOf(""String_Node_Str"") + 1);
if (fileName.length() == 0) {
fileName=""String_Node_Str"";
}
Log.i(""String_Node_Str"",""String_Node_Str"" + fileName + ""String_Node_Str""+ path);
startUploadingFile(fileName,path);
break;
}
}
 else if (resultCode == RESULT_CANCELED) {
}
 else {
Toast.makeText(this,R.string.mediaError,Toast.LENGTH_LONG).show();
}
}","/** 
 * Result of taking a picture or video
 * @Override onActivityResult
 */
@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (resultCode == RESULT_OK) {
switch (requestCode) {
case INTENT_CODE_ACTIVITY_PICTURE:
      Toast.makeText(this,getResources().getString(R.string.imageSavedIn) + pictureSavePath,Toast.LENGTH_LONG).show();
    final View dialogView=getLayoutInflater().inflate(R.layout.dialog_upload_picture,null);
  Bitmap picture=BitmapFactory.decodeFile(pictureSavePath);
((ImageView)dialogView.findViewById(R.id.image)).setImageBitmap(picture);
new AlertDialog.Builder(this).setIcon(R.drawable.take_picture_light).setTitle(""String_Node_Str"").setView(dialogView).setCancelable(false).setPositiveButton(R.string.uploadImage,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialogInterface,int i){
  String fileName=((EditText)dialogView.findViewById(R.id.imageName)).getText().toString();
  if (fileName.length() == 0)   fileName=""String_Node_Str"" + new SimpleDateFormat(""String_Node_Str"").format(new Date());
  ;
  startUploadingFile(fileName + ""String_Node_Str"",pictureSavePath);
}
}
).setNegativeButton(R.string.cancel,null).create().show();
break;
case INTENT_CODE_ACTIVITY_VIDEO:
Toast.makeText(this,getResources().getString(R.string.videoSavedIn) + pictureSavePath,Toast.LENGTH_LONG).show();
break;
case INTENT_CODE_ACTIVITY_FILE_CHOOSER:
Uri uri=data.getData();
String path=getRealPathFromURI(uri);
String fileName=path.substring(path.lastIndexOf(""String_Node_Str"") + 1);
if (fileName.length() == 0) {
fileName=""String_Node_Str"";
}
Log.i(""String_Node_Str"",""String_Node_Str"" + fileName + ""String_Node_Str""+ path);
startUploadingFile(fileName,path);
break;
}
}
 else if (resultCode == RESULT_CANCELED) {
}
 else {
Toast.makeText(this,R.string.mediaError,Toast.LENGTH_LONG).show();
}
}"
86046,"public static int extractPortFromUrl(String url){
  String finalUrl=url;
  if (finalUrl.substring(0,7).equals(""String_Node_Str"")) {
    finalUrl=finalUrl.substring(7,finalUrl.length());
  }
  int semicolonIndex=finalUrl.indexOf(':');
  if (semicolonIndex != -1) {
    String portString=finalUrl.substring(semicolonIndex + 1);
    int port=Integer.parseInt(portString);
    Log.i(""String_Node_Str"",""String_Node_Str"" + port);
    return Integer.parseInt(portString);
  }
  return -1;
}","public static int extractPortFromUrl(String url){
  String finalUrl=url;
  if (finalUrl != null && finalUrl.length() > 0) {
    if (finalUrl.length() > 7 && finalUrl.substring(0,7).equals(""String_Node_Str"")) {
      finalUrl=finalUrl.substring(7,finalUrl.length());
    }
    int semicolonIndex=finalUrl.indexOf(':');
    if (semicolonIndex != -1) {
      String portString=finalUrl.substring(semicolonIndex + 1);
      int port=Integer.parseInt(portString);
      Log.i(""String_Node_Str"",""String_Node_Str"" + port);
      return Integer.parseInt(portString);
    }
  }
  return -1;
}"
86047,"public static String extractHostFromUrl(String url){
  String finalUrl=url;
  if (finalUrl.substring(0,7).equals(""String_Node_Str"")) {
    finalUrl=finalUrl.substring(7,finalUrl.length());
  }
  int semicolonIndex=finalUrl.indexOf(':');
  if (semicolonIndex != -1) {
    finalUrl=finalUrl.substring(0,semicolonIndex);
  }
  if (finalUrl.charAt(finalUrl.length() - 1) == '/') {
    finalUrl=finalUrl.substring(0,finalUrl.length() - 1);
  }
  return finalUrl;
}","public static String extractHostFromUrl(String url){
  String finalUrl=url;
  if (finalUrl != null && finalUrl.length() > 0) {
    if (finalUrl.length() > 7 && finalUrl.substring(0,7).equals(""String_Node_Str"")) {
      finalUrl=finalUrl.substring(7,finalUrl.length());
    }
    int semicolonIndex=finalUrl.indexOf(':');
    if (semicolonIndex != -1) {
      finalUrl=finalUrl.substring(0,semicolonIndex);
    }
    if (finalUrl.charAt(finalUrl.length() - 1) == '/') {
      finalUrl=finalUrl.substring(0,finalUrl.length() - 1);
    }
  }
  return finalUrl;
}"
86048,"@Override protected String doInBackground(String... strings){
  String result=ERROR_UNKNOWN;
  try {
    URL url=createURL(strings[0]);
    Log.i(""String_Node_Str"",""String_Node_Str"" + url);
    HttpURLConnection conn=(HttpURLConnection)url.openConnection();
    conn.setRequestMethod(""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + new String(id,""String_Node_Str""));
    conn.connect();
    int responseCode=conn.getResponseCode();
    Log.i(""String_Node_Str"",""String_Node_Str"" + responseCode);
    if (responseCode == 200) {
      Log.i(""String_Node_Str"",""String_Node_Str"" + conn.getHeaderFields());
      Log.i(""String_Node_Str"",""String_Node_Str"" + conn.getResponseMessage());
      InputStream in=(InputStream)conn.getContent();
      result=inputStreamToString(in);
      Log.i(""String_Node_Str"",""String_Node_Str"" + result);
      in.close();
    }
 else {
      result=analyzeHttpErrorCode(responseCode);
    }
    conn.disconnect();
  }
 catch (  MalformedURLException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    result=ERROR_URL;
    e.printStackTrace();
  }
catch (  ProtocolException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  UnsupportedEncodingException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  IOException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
    Log.e(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
  }
catch (  ArrayIndexOutOfBoundsException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  URISyntaxException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
  return result;
}","@Override protected String doInBackground(String... strings){
  String result=ERROR_UNKNOWN;
  try {
    URL url=createURL(strings[0]);
    Log.i(""String_Node_Str"",""String_Node_Str"" + url);
    HttpURLConnection conn=(HttpURLConnection)url.openConnection();
    conn.setRequestMethod(""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + new String(id,""String_Node_Str""));
    conn.connect();
    int responseCode=conn.getResponseCode();
    Log.i(""String_Node_Str"",""String_Node_Str"" + responseCode);
    if (responseCode == 200) {
      Log.i(""String_Node_Str"",""String_Node_Str"" + conn.getHeaderFields());
      Log.i(""String_Node_Str"",""String_Node_Str"" + conn.getResponseMessage());
      InputStream in=(InputStream)conn.getContent();
      result=inputStreamToString(in);
      Log.i(""String_Node_Str"",""String_Node_Str"" + result);
      in.close();
    }
 else {
      result=analyzeHttpErrorCode(responseCode);
    }
    conn.disconnect();
  }
 catch (  MalformedURLException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    result=ERROR_URL;
    e.printStackTrace();
  }
catch (  ProtocolException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  UnsupportedEncodingException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  IOException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
    Log.e(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
  }
catch (  ArrayIndexOutOfBoundsException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  URISyntaxException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
catch (  NullPointerException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
  return result;
}"
86049,"@Override protected String doInBackground(String... strings){
  String result=ERROR_UNKNOWN;
  try {
    URL url=createURL(strings[0]);
    Log.i(""String_Node_Str"",""String_Node_Str"" + url);
    HttpURLConnection conn=(HttpURLConnection)url.openConnection();
    conn.setRequestMethod(""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + new String(id,""String_Node_Str""));
    conn.connect();
    int responseCode=conn.getResponseCode();
    Log.i(""String_Node_Str"",""String_Node_Str"" + responseCode);
    if (responseCode == 200) {
      Log.i(""String_Node_Str"",""String_Node_Str"" + conn.getHeaderFields());
      Log.i(""String_Node_Str"",""String_Node_Str"" + conn.getResponseMessage());
      InputStream in=(InputStream)conn.getContent();
      result=inputStreamToString(in);
      Log.i(""String_Node_Str"",""String_Node_Str"" + result);
      in.close();
    }
 else {
      analyzeHttpErrorCode(responseCode);
    }
    conn.disconnect();
  }
 catch (  MalformedURLException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    result=ERROR_URL;
    e.printStackTrace();
  }
catch (  ProtocolException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  UnsupportedEncodingException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  IOException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
    Log.e(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
  }
catch (  ArrayIndexOutOfBoundsException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  URISyntaxException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
  return result;
}","@Override protected String doInBackground(String... strings){
  String result=ERROR_UNKNOWN;
  try {
    URL url=createURL(strings[0]);
    Log.i(""String_Node_Str"",""String_Node_Str"" + url);
    HttpURLConnection conn=(HttpURLConnection)url.openConnection();
    conn.setRequestMethod(""String_Node_Str"");
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + new String(id,""String_Node_Str""));
    conn.connect();
    int responseCode=conn.getResponseCode();
    Log.i(""String_Node_Str"",""String_Node_Str"" + responseCode);
    if (responseCode == 200) {
      Log.i(""String_Node_Str"",""String_Node_Str"" + conn.getHeaderFields());
      Log.i(""String_Node_Str"",""String_Node_Str"" + conn.getResponseMessage());
      InputStream in=(InputStream)conn.getContent();
      result=inputStreamToString(in);
      Log.i(""String_Node_Str"",""String_Node_Str"" + result);
      in.close();
    }
 else {
      result=analyzeHttpErrorCode(responseCode);
    }
    conn.disconnect();
  }
 catch (  MalformedURLException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    result=ERROR_URL;
    e.printStackTrace();
  }
catch (  ProtocolException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  UnsupportedEncodingException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  IOException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
    Log.e(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
  }
catch (  ArrayIndexOutOfBoundsException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  URISyntaxException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
  }
  return result;
}"
86050,"private boolean checkForWorkspaces(){
  if (DOWNLOADED_WORKSPACES == null) {
    SharedPreferences preferences=getActivity().getPreferences(Context.MODE_PRIVATE);
    Set<String> workspacesSet=preferences.getStringSet(PREFERENCE_KEY_DOWNLOADED_WORKSPACES,new HashSet<String>());
    DOWNLOADED_WORKSPACES=new String[workspacesSet.size()];
    Iterator<String> iterator=workspacesSet.iterator();
    int i=0;
    while (iterator.hasNext()) {
      String workspace=iterator.next();
      DOWNLOADED_WORKSPACES[i]=workspace;
      i++;
    }
  }
  if (DOWNLOADED_WORKSPACES.length == 0) {
    ((ViewGroup)expandRadioButtons.getParent()).removeView(expandRadioButtons);
    Log.e(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  return true;
}","private boolean checkForWorkspaces(){
  if (DOWNLOADED_WORKSPACES == null) {
    SharedPreferences preferences=getActivity().getPreferences(Context.MODE_PRIVATE);
    Set<String> workspacesSet=preferences.getStringSet(PREFERENCE_KEY_DOWNLOADED_WORKSPACES,new HashSet<String>());
    DOWNLOADED_WORKSPACES=new String[workspacesSet.size()];
    Iterator<String> iterator=workspacesSet.iterator();
    int i=0;
    while (iterator.hasNext()) {
      String workspace=iterator.next();
      DOWNLOADED_WORKSPACES[i]=workspace;
      i++;
    }
  }
  if (DOWNLOADED_WORKSPACES.length == 0) {
    if (expandRadioButtons != null) {
      ((ViewGroup)expandRadioButtons.getParent()).removeView(expandRadioButtons);
      Log.e(""String_Node_Str"",""String_Node_Str"");
    }
    return false;
  }
  return true;
}"
86051,"@Override protected Boolean doInBackground(String... strings){
  Boolean result=false;
  try {
    URL url=createURL(strings[0]);
    Log.i(""String_Node_Str"",""String_Node_Str"" + url);
    HttpURLConnection conn=(HttpURLConnection)url.openConnection();
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + new String(id,""String_Node_Str""));
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    byte[] messageBytes=null;
    try {
      String message=strings[1];
      try {
        JSONObject object=new JSONObject(message);
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
      messageBytes=message.getBytes();
      Log.i(""String_Node_Str"",""String_Node_Str"" + message);
      conn.setFixedLengthStreamingMode(messageBytes.length);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setAllowUserInteraction(true);
      conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    ArrayIndexOutOfBoundsException e) {
      Log.i(""String_Node_Str"",""String_Node_Str"");
    }
    conn.setRequestMethod(""String_Node_Str"");
    conn.connect();
    writeBytesToConnection(conn,messageBytes);
    int responseCode=conn.getResponseCode();
    Log.i(""String_Node_Str"",""String_Node_Str"" + conn.getResponseMessage());
    conn.disconnect();
    Log.i(""String_Node_Str"",""String_Node_Str"" + responseCode);
    if (responseCode == 200) {
      result=true;
    }
  }
 catch (  MalformedURLException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  ProtocolException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  UnsupportedEncodingException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  IOException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
    Log.e(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
  }
catch (  URISyntaxException e) {
    e.printStackTrace();
  }
  return result;
}","@Override protected Boolean doInBackground(String... strings){
  Boolean result=false;
  try {
    URL url=createURL(strings[0]);
    Log.i(""String_Node_Str"",""String_Node_Str"" + url);
    HttpURLConnection conn=(HttpURLConnection)url.openConnection();
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"" + new String(id,""String_Node_Str""));
    conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    byte[] messageBytes=null;
    try {
      String message=strings[1];
      messageBytes=message.getBytes();
      Log.i(""String_Node_Str"",""String_Node_Str"" + message);
      conn.setFixedLengthStreamingMode(messageBytes.length);
      conn.setDoOutput(true);
      conn.setUseCaches(false);
      conn.setAllowUserInteraction(true);
      conn.setRequestProperty(""String_Node_Str"",""String_Node_Str"");
    }
 catch (    ArrayIndexOutOfBoundsException e) {
      Log.i(""String_Node_Str"",""String_Node_Str"");
    }
    conn.setRequestMethod(""String_Node_Str"");
    conn.connect();
    if (messageBytes != null) {
      writeBytesToConnection(conn,messageBytes);
    }
    int responseCode=conn.getResponseCode();
    Log.i(""String_Node_Str"",""String_Node_Str"" + conn.getResponseMessage());
    conn.disconnect();
    Log.i(""String_Node_Str"",""String_Node_Str"" + responseCode);
    if (responseCode == 200) {
      result=true;
    }
  }
 catch (  MalformedURLException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  ProtocolException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  UnsupportedEncodingException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
catch (  IOException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
    Log.e(""String_Node_Str"",""String_Node_Str"" + e.getMessage());
  }
catch (  URISyntaxException e) {
    e.printStackTrace();
  }
  return result;
}"
86052,"@Override public void doFilter(ServletRequest pRequest,ServletResponse pResponse,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest httpRequest=(HttpServletRequest)pRequest;
  if (httpRequest.getMethod().equalsIgnoreCase(""String_Node_Str"")) {
    chain.doFilter(pRequest,pResponse);
    return;
  }
  HttpSession sessionHTTP=httpRequest.getSession();
  Account account=(Account)sessionHTTP.getAttribute(""String_Node_Str"");
  String qs=httpRequest.getQueryString();
  String originURL=httpRequest.getRequestURI() + (qs == null ? ""String_Node_Str"" : ""String_Node_Str"" + qs);
  int offset=httpRequest.getContextPath().equals(""String_Node_Str"") ? 2 : 3;
  String requestURI=httpRequest.getRequestURI();
  String[] pathInfo=Pattern.compile(""String_Node_Str"").split(requestURI);
  String fullName=""String_Node_Str"";
  String workspaceId=""String_Node_Str"";
  String elementType=""String_Node_Str"";
  String fileName=""String_Node_Str"";
  int iteration=0;
  BinaryResource binaryResource=null;
  DocumentIteration docI=null;
  User user=null;
  boolean isSubResource=false;
  boolean needsCacheHeaders=false;
  String outputFormat=pRequest.getParameter(""String_Node_Str"");
  boolean isDocumentAndOutputSpecified=outputFormat != null && !outputFormat.isEmpty();
  String subResourceVirtualPath=""String_Node_Str"";
  boolean isPrivateSharedFile=URLDecoder.decode(pathInfo[offset - 1],""String_Node_Str"").equals(""String_Node_Str"");
  if (!isPrivateSharedFile) {
    try {
      workspaceId=URLDecoder.decode(pathInfo[offset],""String_Node_Str"");
      elementType=URLDecoder.decode(pathInfo[offset + 1],""String_Node_Str"");
      if (elementType.equals(""String_Node_Str"")) {
        needsCacheHeaders=true;
        String docMId=URLDecoder.decode(pathInfo[offset + 2],""String_Node_Str"");
        String docMVersion=pathInfo[offset + 3];
        iteration=Integer.parseInt(pathInfo[offset + 4]);
        fileName=URLDecoder.decode(pathInfo[offset + 5],""String_Node_Str"");
        fullName=workspaceId + ""String_Node_Str"" + elementType+ ""String_Node_Str""+ docMId+ ""String_Node_Str""+ docMVersion+ ""String_Node_Str""+ iteration+ ""String_Node_Str""+ fileName;
        if (account != null) {
          binaryResource=documentService.getBinaryResource(fullName);
          docI=documentService.findDocumentIterationByBinaryResource(binaryResource);
          user=documentService.whoAmI(workspaceId);
        }
 else {
          DocumentMasterKey docMK=new DocumentMasterKey(workspaceId,docMId,docMVersion);
          binaryResource=guestProxy.getPublicBinaryResourceForDocument(docMK,fullName);
          docI=guestProxy.findDocumentIterationByBinaryResource(binaryResource);
          user=guestProxy.whoAmI();
        }
        if (pathInfo.length > offset + 6) {
          String[] pathInfosExtra=Arrays.copyOfRange(pathInfo,offset + 6,pathInfo.length);
          isSubResource=true;
          subResourceVirtualPath=documentResourceGetterService.getSubResourceVirtualPath(binaryResource,StringUtils.join(pathInfosExtra,'/'));
        }
      }
 else       if (elementType.equals(""String_Node_Str"")) {
        needsCacheHeaders=true;
        String partNumber=URLDecoder.decode(pathInfo[offset + 2],""String_Node_Str"");
        String version=pathInfo[offset + 3];
        iteration=Integer.parseInt(pathInfo[offset + 4]);
        if (pathInfo.length == offset + 7) {
          fileName=URLDecoder.decode(pathInfo[offset + 6],""String_Node_Str"");
          String subType=URLDecoder.decode(pathInfo[offset + 5],""String_Node_Str"");
          fullName=workspaceId + ""String_Node_Str"" + elementType+ ""String_Node_Str""+ partNumber+ ""String_Node_Str""+ version+ ""String_Node_Str""+ iteration+ ""String_Node_Str""+ subType+ ""String_Node_Str""+ fileName;
        }
 else {
          fileName=URLDecoder.decode(pathInfo[offset + 5],""String_Node_Str"");
          fullName=workspaceId + ""String_Node_Str"" + elementType+ ""String_Node_Str""+ partNumber+ ""String_Node_Str""+ version+ ""String_Node_Str""+ iteration+ ""String_Node_Str""+ fileName;
        }
        if (account != null) {
          binaryResource=productService.getBinaryResource(fullName);
        }
 else {
          PartRevisionKey partK=new PartRevisionKey(workspaceId,partNumber,version);
          binaryResource=guestProxy.getPublicBinaryResourceForPart(partK,fullName);
        }
      }
 else       if (elementType.equals(""String_Node_Str"")) {
        String templateID=URLDecoder.decode(pathInfo[offset + 2],""String_Node_Str"");
        fileName=URLDecoder.decode(pathInfo[offset + 3],""String_Node_Str"");
        fullName=workspaceId + ""String_Node_Str"" + elementType+ ""String_Node_Str""+ templateID+ ""String_Node_Str""+ fileName;
        binaryResource=documentService.getBinaryResource(fullName);
      }
 else       if (elementType.equals(""String_Node_Str"")) {
        String templateID=URLDecoder.decode(pathInfo[offset + 2],""String_Node_Str"");
        fileName=URLDecoder.decode(pathInfo[offset + 3],""String_Node_Str"");
        fullName=workspaceId + ""String_Node_Str"" + elementType+ ""String_Node_Str""+ templateID+ ""String_Node_Str""+ fileName;
        binaryResource=documentService.getBinaryResource(fullName);
      }
      pRequest.setAttribute(""String_Node_Str"",binaryResource);
      pRequest.setAttribute(""String_Node_Str"",isSubResource);
      pRequest.setAttribute(""String_Node_Str"",isDocumentAndOutputSpecified);
      pRequest.setAttribute(""String_Node_Str"",fullName);
      pRequest.setAttribute(""String_Node_Str"",outputFormat);
      pRequest.setAttribute(""String_Node_Str"",subResourceVirtualPath);
      pRequest.setAttribute(""String_Node_Str"",needsCacheHeaders);
      pRequest.setAttribute(""String_Node_Str"",user);
      pRequest.setAttribute(""String_Node_Str"",docI);
      chain.doFilter(pRequest,pResponse);
    }
 catch (    LoginException pEx) {
      httpRequest.getRequestDispatcher(""String_Node_Str"" + URLEncoder.encode(originURL,""String_Node_Str"")).forward(pRequest,pResponse);
    }
catch (    Exception pEx) {
      throw new ServletException(""String_Node_Str"",pEx);
    }
  }
 else {
    try {
      String uuid=URLDecoder.decode(pathInfo[offset],""String_Node_Str"");
      iteration=Integer.valueOf(URLDecoder.decode(pathInfo[offset + 1],""String_Node_Str""));
      SharedEntity sharedEntity=shareService.findSharedEntityForGivenUUID(uuid);
      workspaceId=sharedEntity.getWorkspace().getId();
      if (sharedEntity.getExpireDate() != null && sharedEntity.getExpireDate().getTime() < new Date().getTime()) {
        shareService.deleteSharedEntityIfExpired(sharedEntity);
        pRequest.getRequestDispatcher(""String_Node_Str"").forward(pRequest,pResponse);
        return;
      }
      if (sharedEntity instanceof SharedDocument) {
        DocumentMaster docM=((SharedDocument)sharedEntity).getDocumentMaster();
        docI=docM.getLastIteration();
        String docMId=docM.getId();
        String docMVersion=docM.getVersion();
        iteration=Integer.valueOf(URLDecoder.decode(pathInfo[offset + 1],""String_Node_Str""));
        fileName=URLDecoder.decode(pathInfo[offset + 2],""String_Node_Str"");
        fullName=workspaceId + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ docMId+ ""String_Node_Str""+ docMVersion+ ""String_Node_Str""+ iteration+ ""String_Node_Str""+ fileName;
        if (account != null) {
          binaryResource=documentService.getBinaryResource(fullName);
          docI=documentService.findDocumentIterationByBinaryResource(binaryResource);
          user=documentService.whoAmI(workspaceId);
        }
 else {
          binaryResource=guestProxy.getBinaryResourceForSharedDocument(fullName);
          docI=guestProxy.findDocumentIterationByBinaryResource(binaryResource);
          user=guestProxy.whoAmI();
        }
        if (pathInfo.length > offset + 3) {
          String[] pathInfosExtra=Arrays.copyOfRange(pathInfo,offset + 3,pathInfo.length);
          isSubResource=true;
          subResourceVirtualPath=documentResourceGetterService.getSubResourceVirtualPath(binaryResource,StringUtils.join(pathInfosExtra,'/'));
        }
      }
 else       if (sharedEntity instanceof SharedPart) {
        PartRevision partRevision=((SharedPart)sharedEntity).getPartRevision();
        String partNumber=partRevision.getPartNumber();
        String version=partRevision.getVersion();
        iteration=Integer.valueOf(URLDecoder.decode(pathInfo[offset + 1],""String_Node_Str""));
        if (pathInfo.length == offset + 4) {
          fileName=URLDecoder.decode(pathInfo[offset + 3],""String_Node_Str"");
          String subType=URLDecoder.decode(pathInfo[offset + 2],""String_Node_Str"");
          fullName=workspaceId + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ partNumber+ ""String_Node_Str""+ version+ ""String_Node_Str""+ iteration+ ""String_Node_Str""+ subType+ ""String_Node_Str""+ fileName;
        }
 else {
          fileName=URLDecoder.decode(pathInfo[offset + 2],""String_Node_Str"");
          fullName=workspaceId + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ partNumber+ ""String_Node_Str""+ version+ ""String_Node_Str""+ iteration+ ""String_Node_Str""+ fileName;
        }
        if (account != null) {
          binaryResource=productService.getBinaryResource(fullName);
        }
 else {
          binaryResource=guestProxy.getBinaryResourceForSharedPart(fullName);
        }
      }
      pRequest.setAttribute(""String_Node_Str"",binaryResource);
      pRequest.setAttribute(""String_Node_Str"",isSubResource);
      pRequest.setAttribute(""String_Node_Str"",isDocumentAndOutputSpecified);
      pRequest.setAttribute(""String_Node_Str"",fullName);
      pRequest.setAttribute(""String_Node_Str"",outputFormat);
      pRequest.setAttribute(""String_Node_Str"",subResourceVirtualPath);
      pRequest.setAttribute(""String_Node_Str"",needsCacheHeaders);
      pRequest.setAttribute(""String_Node_Str"",user);
      pRequest.setAttribute(""String_Node_Str"",docI);
      chain.doFilter(pRequest,pResponse);
    }
 catch (    Exception e) {
      httpRequest.getRequestDispatcher(""String_Node_Str"" + URLEncoder.encode(originURL,""String_Node_Str"")).forward(pRequest,pResponse);
    }
  }
}","@Override public void doFilter(ServletRequest pRequest,ServletResponse pResponse,FilterChain chain) throws IOException, ServletException {
  HttpServletRequest httpRequest=(HttpServletRequest)pRequest;
  if (httpRequest.getMethod().equalsIgnoreCase(""String_Node_Str"")) {
    chain.doFilter(pRequest,pResponse);
    return;
  }
  HttpSession sessionHTTP=httpRequest.getSession();
  Account account=(Account)sessionHTTP.getAttribute(""String_Node_Str"");
  String qs=httpRequest.getQueryString();
  String originURL=httpRequest.getRequestURI() + (qs == null ? ""String_Node_Str"" : ""String_Node_Str"" + qs);
  int offset=httpRequest.getContextPath().equals(""String_Node_Str"") ? 1 : 2;
  String requestURI=httpRequest.getRequestURI();
  String[] pathInfo=FilesFilter.removeEmptyEntries(requestURI.split(""String_Node_Str""));
  String fullName=""String_Node_Str"";
  String workspaceId=""String_Node_Str"";
  String elementType=""String_Node_Str"";
  String fileName=""String_Node_Str"";
  int iteration=0;
  BinaryResource binaryResource=null;
  DocumentIteration docI=null;
  User user=null;
  boolean isSubResource=false;
  boolean needsCacheHeaders=false;
  String outputFormat=pRequest.getParameter(""String_Node_Str"");
  boolean isDocumentAndOutputSpecified=outputFormat != null && !outputFormat.isEmpty();
  String subResourceVirtualPath=""String_Node_Str"";
  boolean isPrivateSharedFile=URLDecoder.decode(pathInfo[offset - 1],""String_Node_Str"").equals(""String_Node_Str"");
  if (!isPrivateSharedFile) {
    try {
      workspaceId=URLDecoder.decode(pathInfo[offset],""String_Node_Str"");
      elementType=URLDecoder.decode(pathInfo[offset + 1],""String_Node_Str"");
      if (elementType.equals(""String_Node_Str"")) {
        needsCacheHeaders=true;
        String docMId=URLDecoder.decode(pathInfo[offset + 2],""String_Node_Str"");
        String docMVersion=pathInfo[offset + 3];
        iteration=Integer.parseInt(pathInfo[offset + 4]);
        fileName=URLDecoder.decode(pathInfo[offset + 5],""String_Node_Str"");
        fullName=workspaceId + ""String_Node_Str"" + elementType+ ""String_Node_Str""+ docMId+ ""String_Node_Str""+ docMVersion+ ""String_Node_Str""+ iteration+ ""String_Node_Str""+ fileName;
        if (account != null) {
          binaryResource=documentService.getBinaryResource(fullName);
          docI=documentService.findDocumentIterationByBinaryResource(binaryResource);
          user=documentService.whoAmI(workspaceId);
        }
 else {
          DocumentMasterKey docMK=new DocumentMasterKey(workspaceId,docMId,docMVersion);
          binaryResource=guestProxy.getPublicBinaryResourceForDocument(docMK,fullName);
          docI=guestProxy.findDocumentIterationByBinaryResource(binaryResource);
          user=guestProxy.whoAmI();
        }
        if (pathInfo.length > offset + 6) {
          String[] pathInfosExtra=Arrays.copyOfRange(pathInfo,offset + 6,pathInfo.length);
          isSubResource=true;
          subResourceVirtualPath=documentResourceGetterService.getSubResourceVirtualPath(binaryResource,StringUtils.join(pathInfosExtra,'/'));
        }
      }
 else       if (elementType.equals(""String_Node_Str"")) {
        needsCacheHeaders=true;
        String partNumber=URLDecoder.decode(pathInfo[offset + 2],""String_Node_Str"");
        String version=pathInfo[offset + 3];
        iteration=Integer.parseInt(pathInfo[offset + 4]);
        if (pathInfo.length == offset + 7) {
          fileName=URLDecoder.decode(pathInfo[offset + 6],""String_Node_Str"");
          String subType=URLDecoder.decode(pathInfo[offset + 5],""String_Node_Str"");
          fullName=workspaceId + ""String_Node_Str"" + elementType+ ""String_Node_Str""+ partNumber+ ""String_Node_Str""+ version+ ""String_Node_Str""+ iteration+ ""String_Node_Str""+ subType+ ""String_Node_Str""+ fileName;
        }
 else {
          fileName=URLDecoder.decode(pathInfo[offset + 5],""String_Node_Str"");
          fullName=workspaceId + ""String_Node_Str"" + elementType+ ""String_Node_Str""+ partNumber+ ""String_Node_Str""+ version+ ""String_Node_Str""+ iteration+ ""String_Node_Str""+ fileName;
        }
        if (account != null) {
          binaryResource=productService.getBinaryResource(fullName);
        }
 else {
          PartRevisionKey partK=new PartRevisionKey(workspaceId,partNumber,version);
          binaryResource=guestProxy.getPublicBinaryResourceForPart(partK,fullName);
        }
      }
 else       if (elementType.equals(""String_Node_Str"")) {
        String templateID=URLDecoder.decode(pathInfo[offset + 2],""String_Node_Str"");
        fileName=URLDecoder.decode(pathInfo[offset + 3],""String_Node_Str"");
        fullName=workspaceId + ""String_Node_Str"" + elementType+ ""String_Node_Str""+ templateID+ ""String_Node_Str""+ fileName;
        binaryResource=documentService.getBinaryResource(fullName);
      }
 else       if (elementType.equals(""String_Node_Str"")) {
        String templateID=URLDecoder.decode(pathInfo[offset + 2],""String_Node_Str"");
        fileName=URLDecoder.decode(pathInfo[offset + 3],""String_Node_Str"");
        fullName=workspaceId + ""String_Node_Str"" + elementType+ ""String_Node_Str""+ templateID+ ""String_Node_Str""+ fileName;
        binaryResource=documentService.getBinaryResource(fullName);
      }
      pRequest.setAttribute(""String_Node_Str"",binaryResource);
      pRequest.setAttribute(""String_Node_Str"",isSubResource);
      pRequest.setAttribute(""String_Node_Str"",isDocumentAndOutputSpecified);
      pRequest.setAttribute(""String_Node_Str"",fullName);
      pRequest.setAttribute(""String_Node_Str"",outputFormat);
      pRequest.setAttribute(""String_Node_Str"",subResourceVirtualPath);
      pRequest.setAttribute(""String_Node_Str"",needsCacheHeaders);
      pRequest.setAttribute(""String_Node_Str"",user);
      pRequest.setAttribute(""String_Node_Str"",docI);
      chain.doFilter(pRequest,pResponse);
    }
 catch (    LoginException pEx) {
      httpRequest.getRequestDispatcher(""String_Node_Str"" + URLEncoder.encode(originURL,""String_Node_Str"")).forward(pRequest,pResponse);
    }
catch (    Exception pEx) {
      throw new ServletException(""String_Node_Str"",pEx);
    }
  }
 else {
    try {
      String uuid=URLDecoder.decode(pathInfo[offset],""String_Node_Str"");
      iteration=Integer.valueOf(URLDecoder.decode(pathInfo[offset + 1],""String_Node_Str""));
      SharedEntity sharedEntity=shareService.findSharedEntityForGivenUUID(uuid);
      workspaceId=sharedEntity.getWorkspace().getId();
      if (sharedEntity.getExpireDate() != null && sharedEntity.getExpireDate().getTime() < new Date().getTime()) {
        shareService.deleteSharedEntityIfExpired(sharedEntity);
        pRequest.getRequestDispatcher(""String_Node_Str"").forward(pRequest,pResponse);
        return;
      }
      if (sharedEntity instanceof SharedDocument) {
        DocumentMaster docM=((SharedDocument)sharedEntity).getDocumentMaster();
        docI=docM.getLastIteration();
        String docMId=docM.getId();
        String docMVersion=docM.getVersion();
        iteration=Integer.valueOf(URLDecoder.decode(pathInfo[offset + 1],""String_Node_Str""));
        fileName=URLDecoder.decode(pathInfo[offset + 2],""String_Node_Str"");
        fullName=workspaceId + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ docMId+ ""String_Node_Str""+ docMVersion+ ""String_Node_Str""+ iteration+ ""String_Node_Str""+ fileName;
        if (account != null) {
          binaryResource=documentService.getBinaryResource(fullName);
          docI=documentService.findDocumentIterationByBinaryResource(binaryResource);
          user=documentService.whoAmI(workspaceId);
        }
 else {
          binaryResource=guestProxy.getBinaryResourceForSharedDocument(fullName);
          docI=guestProxy.findDocumentIterationByBinaryResource(binaryResource);
          user=guestProxy.whoAmI();
        }
        if (pathInfo.length > offset + 3) {
          String[] pathInfosExtra=Arrays.copyOfRange(pathInfo,offset + 3,pathInfo.length);
          isSubResource=true;
          subResourceVirtualPath=documentResourceGetterService.getSubResourceVirtualPath(binaryResource,StringUtils.join(pathInfosExtra,'/'));
        }
      }
 else       if (sharedEntity instanceof SharedPart) {
        PartRevision partRevision=((SharedPart)sharedEntity).getPartRevision();
        String partNumber=partRevision.getPartNumber();
        String version=partRevision.getVersion();
        iteration=Integer.valueOf(URLDecoder.decode(pathInfo[offset + 1],""String_Node_Str""));
        if (pathInfo.length == offset + 4) {
          fileName=URLDecoder.decode(pathInfo[offset + 3],""String_Node_Str"");
          String subType=URLDecoder.decode(pathInfo[offset + 2],""String_Node_Str"");
          fullName=workspaceId + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ partNumber+ ""String_Node_Str""+ version+ ""String_Node_Str""+ iteration+ ""String_Node_Str""+ subType+ ""String_Node_Str""+ fileName;
        }
 else {
          fileName=URLDecoder.decode(pathInfo[offset + 2],""String_Node_Str"");
          fullName=workspaceId + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ partNumber+ ""String_Node_Str""+ version+ ""String_Node_Str""+ iteration+ ""String_Node_Str""+ fileName;
        }
        if (account != null) {
          binaryResource=productService.getBinaryResource(fullName);
        }
 else {
          binaryResource=guestProxy.getBinaryResourceForSharedPart(fullName);
        }
      }
      pRequest.setAttribute(""String_Node_Str"",binaryResource);
      pRequest.setAttribute(""String_Node_Str"",isSubResource);
      pRequest.setAttribute(""String_Node_Str"",isDocumentAndOutputSpecified);
      pRequest.setAttribute(""String_Node_Str"",fullName);
      pRequest.setAttribute(""String_Node_Str"",outputFormat);
      pRequest.setAttribute(""String_Node_Str"",subResourceVirtualPath);
      pRequest.setAttribute(""String_Node_Str"",needsCacheHeaders);
      pRequest.setAttribute(""String_Node_Str"",user);
      pRequest.setAttribute(""String_Node_Str"",docI);
      chain.doFilter(pRequest,pResponse);
    }
 catch (    Exception e) {
      httpRequest.getRequestDispatcher(""String_Node_Str"" + URLEncoder.encode(originURL,""String_Node_Str"")).forward(pRequest,pResponse);
    }
  }
}"
86053,"@RolesAllowed(""String_Node_Str"") @Override public PartUsageLink filterProductStructure(ConfigurationItemKey pKey,ConfigSpec configSpec,Integer partUsageLink,Integer depth) throws ConfigurationItemNotFoundException, WorkspaceNotFoundException, NotAllowedException, UserNotFoundException, UserNotActiveException, PartUsageLinkNotFoundException {
  User user=userManager.checkWorkspaceReadAccess(pKey.getWorkspace());
  PartUsageLink rootUsageLink;
  if (partUsageLink == null || partUsageLink == -1) {
    ConfigurationItem ci=new ConfigurationItemDAO(new Locale(user.getLanguage()),em).loadConfigurationItem(pKey);
    rootUsageLink=new PartUsageLink();
    rootUsageLink.setId(-1);
    rootUsageLink.setAmount(1d);
    List<CADInstance> cads=new ArrayList<CADInstance>();
    cads.add(new CADInstance(0d,0d,0d,0d,0d,0d,CADInstance.Positioning.ABSOLUTE));
    rootUsageLink.setCadInstances(cads);
    rootUsageLink.setComponent(ci.getDesignItem());
  }
 else {
    rootUsageLink=new PartUsageLinkDAO(new Locale(user.getLanguage()),em).loadPartUsageLink(partUsageLink);
  }
  if (configSpec instanceof LatestConfigSpec) {
    if (depth == null) {
      filterLatestConfigSpec(rootUsageLink.getComponent(),-1);
    }
 else {
      filterLatestConfigSpec(rootUsageLink.getComponent(),depth);
    }
  }
 else   if (configSpec instanceof BaselineConfigSpec) {
    if (depth == null) {
      filterBaselineConfigSpec(((BaselineConfigSpec)configSpec).getBaseline(),rootUsageLink.getComponent(),-1);
    }
 else {
      filterBaselineConfigSpec(((BaselineConfigSpec)configSpec).getBaseline(),rootUsageLink.getComponent(),depth);
    }
  }
  return rootUsageLink;
}","@RolesAllowed(""String_Node_Str"") @Override public PartUsageLink filterProductStructure(ConfigurationItemKey pKey,ConfigSpec configSpec,Integer partUsageLink,Integer depth) throws ConfigurationItemNotFoundException, WorkspaceNotFoundException, NotAllowedException, UserNotFoundException, UserNotActiveException, PartUsageLinkNotFoundException {
  User user=userManager.checkWorkspaceReadAccess(pKey.getWorkspace());
  PartUsageLink rootUsageLink;
  if (partUsageLink == null || partUsageLink == -1) {
    ConfigurationItem ci=new ConfigurationItemDAO(new Locale(user.getLanguage()),em).loadConfigurationItem(pKey);
    rootUsageLink=new PartUsageLink();
    rootUsageLink.setId(-1);
    rootUsageLink.setAmount(1d);
    List<CADInstance> cads=new ArrayList<CADInstance>();
    CADInstance cad=new CADInstance(0d,0d,0d,0d,0d,0d,CADInstance.Positioning.ABSOLUTE);
    cad.setId(-1);
    cads.add(cad);
    rootUsageLink.setCadInstances(cads);
    rootUsageLink.setComponent(ci.getDesignItem());
  }
 else {
    rootUsageLink=new PartUsageLinkDAO(new Locale(user.getLanguage()),em).loadPartUsageLink(partUsageLink);
  }
  if (configSpec instanceof LatestConfigSpec) {
    if (depth == null) {
      filterLatestConfigSpec(rootUsageLink.getComponent(),-1);
    }
 else {
      filterLatestConfigSpec(rootUsageLink.getComponent(),depth);
    }
  }
 else   if (configSpec instanceof BaselineConfigSpec) {
    if (depth == null) {
      filterBaselineConfigSpec(((BaselineConfigSpec)configSpec).getBaseline(),rootUsageLink.getComponent(),-1);
    }
 else {
      filterBaselineConfigSpec(((BaselineConfigSpec)configSpec).getBaseline(),rootUsageLink.getComponent(),depth);
    }
  }
  return rootUsageLink;
}"
86054,"private void generateInstanceStream(PartUsageLink usageLink,double tx,double ty,double tz,double rx,double ry,double rz,List<Integer> filteredPath,List<Integer> instanceIds) throws JAXBException, IOException {
  PartMaster pm=usageLink.getComponent();
  PartRevision partR=pm.getLastRevision();
  PartIteration partI=partR.getLastIteration();
  String partIterationId=new StringBuilder().append(pm.getNumber()).append(""String_Node_Str"").append(partR.getVersion()).append(""String_Node_Str"").append(partI.getIteration()).toString();
  List<GeometryDTO> files=new ArrayList<GeometryDTO>();
  List<InstanceAttributeDTO> attributes=new ArrayList<InstanceAttributeDTO>();
  for (  Geometry geometry : partI.getGeometries()) {
    files.add(mapper.map(geometry,GeometryDTO.class));
  }
  for (  InstanceAttribute attr : partI.getInstanceAttributes().values()) {
    attributes.add(mapper.map(attr,InstanceAttributeDTO.class));
  }
  for (  CADInstance instance : usageLink.getCadInstances()) {
    double atx=tx + getRelativeTxAfterParentRotation(rx,ry,rz,instance.getTx(),instance.getTy(),instance.getTz());
    double aty=ty + getRelativeTyAfterParentRotation(rx,ry,rz,instance.getTx(),instance.getTy(),instance.getTz());
    double atz=tz + getRelativeTzAfterParentRotation(rx,ry,rz,instance.getTx(),instance.getTy(),instance.getTz());
    double arx=rx + instance.getRx();
    double ary=ry + instance.getRy();
    double arz=rz + instance.getRz();
    instanceIds.add(instance.getId());
    String id=StringUtils.join(instanceIds.toArray(),""String_Node_Str"");
    if (!partI.isAssembly() && partI.getGeometries().size() > 0 && filteredPath.isEmpty()) {
      if (getAddComma())       getEntityStream().write(getComma());
      getMarshaller().marshallToJSON(new InstanceDTO(id,partIterationId,atx,aty,atz,arx,ary,arz,files,attributes),getEntityStream());
      setAddComma(true);
    }
 else {
      for (      PartUsageLink component : partI.getComponents()) {
        ArrayList<Integer> copyInstanceIds=new ArrayList<Integer>(instanceIds);
        if (filteredPath.isEmpty()) {
          generateInstanceStream(component,atx,aty,atz,arx,ary,arz,filteredPath,copyInstanceIds);
        }
 else         if (component.getId() == filteredPath.get(0)) {
          ArrayList<Integer> copyWithoutCurrentId=new ArrayList<Integer>(filteredPath);
          copyWithoutCurrentId.remove(0);
          generateInstanceStream(component,atx,aty,atz,arx,ary,arz,copyWithoutCurrentId,copyInstanceIds);
        }
      }
    }
  }
}","private void generateInstanceStream(PartUsageLink usageLink,double tx,double ty,double tz,double rx,double ry,double rz,List<Integer> filteredPath,List<Integer> instanceIds) throws JAXBException, IOException {
  PartMaster pm=usageLink.getComponent();
  PartRevision partR=pm.getLastRevision();
  PartIteration partI=partR.getLastIteration();
  String partIterationId=new StringBuilder().append(pm.getNumber()).append(""String_Node_Str"").append(partR.getVersion()).append(""String_Node_Str"").append(partI.getIteration()).toString();
  List<GeometryDTO> files=new ArrayList<GeometryDTO>();
  List<InstanceAttributeDTO> attributes=new ArrayList<InstanceAttributeDTO>();
  for (  Geometry geometry : partI.getGeometries()) {
    files.add(mapper.map(geometry,GeometryDTO.class));
  }
  for (  InstanceAttribute attr : partI.getInstanceAttributes().values()) {
    attributes.add(mapper.map(attr,InstanceAttributeDTO.class));
  }
  for (  CADInstance instance : usageLink.getCadInstances()) {
    ArrayList<Integer> copyInstanceIds=new ArrayList<Integer>(instanceIds);
    if (instance.getId() != -1)     copyInstanceIds.add(instance.getId());
    double atx=tx + getRelativeTxAfterParentRotation(rx,ry,rz,instance.getTx(),instance.getTy(),instance.getTz());
    double aty=ty + getRelativeTyAfterParentRotation(rx,ry,rz,instance.getTx(),instance.getTy(),instance.getTz());
    double atz=tz + getRelativeTzAfterParentRotation(rx,ry,rz,instance.getTx(),instance.getTy(),instance.getTz());
    double arx=rx + instance.getRx();
    double ary=ry + instance.getRy();
    double arz=rz + instance.getRz();
    String id=StringUtils.join(copyInstanceIds.toArray(),""String_Node_Str"");
    if (!partI.isAssembly() && partI.getGeometries().size() > 0 && filteredPath.isEmpty()) {
      if (getAddComma())       getEntityStream().write(getComma());
      getMarshaller().marshallToJSON(new InstanceDTO(id,partIterationId,atx,aty,atz,arx,ary,arz,files,attributes),getEntityStream());
      setAddComma(true);
    }
 else {
      for (      PartUsageLink component : partI.getComponents()) {
        ArrayList<Integer> copyInstanceIds2=new ArrayList<Integer>(copyInstanceIds);
        if (filteredPath.isEmpty()) {
          generateInstanceStream(component,atx,aty,atz,arx,ary,arz,filteredPath,copyInstanceIds2);
        }
 else         if (component.getId() == filteredPath.get(0)) {
          ArrayList<Integer> copyWithoutCurrentId=new ArrayList<Integer>(filteredPath);
          copyWithoutCurrentId.remove(0);
          generateInstanceStream(component,atx,aty,atz,arx,ary,arz,copyWithoutCurrentId,copyInstanceIds2);
        }
      }
    }
  }
}"
86055,"@GET @Path(""String_Node_Str"") @Produces(""String_Node_Str"") public Response getInstances(@Context Request request,@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String ciId,@QueryParam(""String_Node_Str"") String configSpecType,@QueryParam(""String_Node_Str"") String path){
  try {
    Calendar cal=new GregorianCalendar();
    cal.add(Calendar.MINUTE,-30);
    Response.ResponseBuilder rb=request.evaluatePreconditions(cal.getTime());
    if (rb != null) {
      return rb.build();
    }
 else {
      CacheControl cc=new CacheControl();
      cc.setMaxAge(60 * 30);
      ConfigurationItemKey ciKey=new ConfigurationItemKey(workspaceId,ciId);
      ConfigSpec cs;
      if (configSpecType == null || configSpecType.equals(""String_Node_Str"")) {
        cs=new LatestConfigSpec();
      }
 else {
        cs=productService.getConfigSpecForBaseline(ciKey,Integer.parseInt(configSpecType));
      }
      PartUsageLink rootUsageLink;
      List<Integer> usageLinkPaths=new ArrayList<Integer>();
      if (path != null && !path.equals(""String_Node_Str"")) {
        String[] partUsageIdsString=path.split(""String_Node_Str"");
        for (int i=0; i < partUsageIdsString.length; i++) {
          usageLinkPaths.add(Integer.parseInt(partUsageIdsString[i]));
        }
        rootUsageLink=productService.filterProductStructure(ciKey,cs,usageLinkPaths.get(0),0);
        usageLinkPaths.remove(0);
      }
 else {
        rootUsageLink=productService.filterProductStructure(ciKey,cs,null,0);
      }
      return Response.ok().lastModified(new Date()).cacheControl(cc).entity(new InstanceCollection(rootUsageLink,usageLinkPaths)).build();
    }
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}","@GET @Path(""String_Node_Str"") @Produces(""String_Node_Str"") public Response getInstances(@Context Request request,@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String ciId,@QueryParam(""String_Node_Str"") String configSpecType,@QueryParam(""String_Node_Str"") String path){
  try {
    Calendar cal=new GregorianCalendar();
    cal.add(Calendar.MINUTE,-30);
    Response.ResponseBuilder rb=request.evaluatePreconditions(cal.getTime());
    if (rb != null) {
      return rb.build();
    }
 else {
      CacheControl cc=new CacheControl();
      cc.setMaxAge(60 * 30);
      ConfigurationItemKey ciKey=new ConfigurationItemKey(workspaceId,ciId);
      ConfigSpec cs;
      if (configSpecType == null || configSpecType.equals(""String_Node_Str"") || configSpecType.equals(""String_Node_Str"")) {
        cs=new LatestConfigSpec();
      }
 else {
        cs=productService.getConfigSpecForBaseline(ciKey,Integer.parseInt(configSpecType));
      }
      PartUsageLink rootUsageLink;
      List<Integer> usageLinkPaths=new ArrayList<Integer>();
      if (path != null && !path.equals(""String_Node_Str"")) {
        String[] partUsageIdsString=path.split(""String_Node_Str"");
        for (int i=0; i < partUsageIdsString.length; i++) {
          usageLinkPaths.add(Integer.parseInt(partUsageIdsString[i]));
        }
        rootUsageLink=productService.filterProductStructure(ciKey,cs,usageLinkPaths.get(0),0);
        usageLinkPaths.remove(0);
      }
 else {
        rootUsageLink=productService.filterProductStructure(ciKey,cs,null,0);
      }
      return Response.ok().lastModified(new Date()).cacheControl(cc).entity(new InstanceCollection(rootUsageLink,usageLinkPaths)).build();
    }
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}"
86056,"public void logIn() throws ServletException, AccountNotFoundException, IOException {
  HttpServletRequest request=(HttpServletRequest)(FacesContext.getCurrentInstance().getExternalContext().getRequest());
  HttpSession session=(HttpSession)request.getSession();
  request.login(login,password);
  Account account=userManager.getAccount(login);
  if (!login.equals(account.getLogin())) {
    request.logout();
    throw new AccountNotFoundException(new Locale(account.getLanguage()),login);
  }
  session.setAttribute(""String_Node_Str"",account);
  Map<String,Workspace> administeredWorkspaces=new HashMap<String,Workspace>();
  for (  Workspace wks : userManager.getAdministratedWorkspaces()) {
    administeredWorkspaces.put(wks.getId(),wks);
  }
  session.setAttribute(""String_Node_Str"",administeredWorkspaces);
  Set<Workspace> regularWorkspaces=new HashSet<Workspace>();
  regularWorkspaces.addAll(Arrays.asList(userManager.getWorkspaces()));
  regularWorkspaces.removeAll(administeredWorkspaces.values());
  session.setAttribute(""String_Node_Str"",regularWorkspaces);
  FacesContext fc=FacesContext.getCurrentInstance();
  ExternalContext ec=fc.getExternalContext();
  if (originURL != null && originURL.length() > 1)   ec.redirect(URLDecoder.decode(originURL,""String_Node_Str""));
 else   ec.redirect(request.getContextPath() + ""String_Node_Str"");
}","public void logIn() throws ServletException, AccountNotFoundException, IOException {
  HttpServletRequest request=(HttpServletRequest)(FacesContext.getCurrentInstance().getExternalContext().getRequest());
  HttpSession session=(HttpSession)request.getSession();
  request.login(login,password);
  Account account=userManager.getAccount(login);
  if (!login.equals(account.getLogin())) {
    request.logout();
    throw new AccountNotFoundException(new Locale(account.getLanguage()),login);
  }
  session.setAttribute(""String_Node_Str"",account);
  Map<String,Workspace> administeredWorkspaces=new HashMap<String,Workspace>();
  for (  Workspace wks : userManager.getAdministratedWorkspaces()) {
    administeredWorkspaces.put(wks.getId(),wks);
  }
  session.setAttribute(""String_Node_Str"",administeredWorkspaces);
  Set<Workspace> regularWorkspaces=new HashSet<Workspace>();
  regularWorkspaces.addAll(Arrays.asList(userManager.getWorkspaces()));
  regularWorkspaces.removeAll(administeredWorkspaces.values());
  session.setAttribute(""String_Node_Str"",regularWorkspaces);
  FacesContext fc=FacesContext.getCurrentInstance();
  ExternalContext ec=fc.getExternalContext();
  if (originURL != null && originURL.length() > 1)   ec.redirect(originURL);
 else   ec.redirect(request.getContextPath() + ""String_Node_Str"");
}"
86057,"@Override protected void doGet(HttpServletRequest pRequest,HttpServletResponse pResponse) throws ServletException, IOException {
  String login=pRequest.getRemoteUser();
  String[] pathInfos=Pattern.compile(""String_Node_Str"").split(pRequest.getRequestURI());
  int offset;
  if (pRequest.getContextPath().equals(""String_Node_Str"")) {
    offset=2;
  }
 else {
    offset=3;
  }
  String workspaceID=null;
  String productID=null;
  try {
    workspaceID=URLDecoder.decode(pathInfos[offset],""String_Node_Str"");
  }
 catch (  IndexOutOfBoundsException ex) {
  }
  try {
    productID=URLDecoder.decode(pathInfos[offset + 1],""String_Node_Str"");
  }
 catch (  IndexOutOfBoundsException ex) {
  }
  if (workspaceID == null) {
    pResponse.sendRedirect(pRequest.getContextPath() + ""String_Node_Str"");
  }
 else   if (productID == null) {
    pResponse.sendRedirect(pRequest.getContextPath() + ""String_Node_Str"");
  }
 else {
    pRequest.setAttribute(""String_Node_Str"",getUrlRoot(pRequest));
    List<ConfigurationItem> products=null;
    try {
      products=productService.getConfigurationItems(workspaceID);
    }
 catch (    Exception ex) {
    }
    pRequest.setAttribute(""String_Node_Str"",products);
    pRequest.setAttribute(""String_Node_Str"",workspaceID);
    pRequest.setAttribute(""String_Node_Str"",productID);
    pRequest.setAttribute(""String_Node_Str"",login);
    pRequest.getRequestDispatcher(""String_Node_Str"").forward(pRequest,pResponse);
  }
}","@Override protected void doGet(HttpServletRequest pRequest,HttpServletResponse pResponse) throws ServletException, IOException {
  String login=pRequest.getRemoteUser();
  String[] pathInfos=Pattern.compile(""String_Node_Str"").split(pRequest.getRequestURI());
  int offset;
  if (pRequest.getContextPath().equals(""String_Node_Str"")) {
    offset=2;
  }
 else {
    offset=3;
  }
  String workspaceID=null;
  String productID=null;
  try {
    workspaceID=URLDecoder.decode(pathInfos[offset],""String_Node_Str"");
  }
 catch (  IndexOutOfBoundsException ex) {
  }
  try {
    productID=URLDecoder.decode(pathInfos[offset + 1],""String_Node_Str"");
  }
 catch (  IndexOutOfBoundsException ex) {
  }
  if (workspaceID == null) {
    pResponse.sendRedirect(pRequest.getContextPath() + ""String_Node_Str"");
  }
 else   if (productID == null) {
    pResponse.sendRedirect(pRequest.getContextPath() + ""String_Node_Str"");
  }
 else {
    pRequest.setAttribute(""String_Node_Str"",getUrlRoot(pRequest));
    pRequest.setAttribute(""String_Node_Str"",workspaceID);
    pRequest.setAttribute(""String_Node_Str"",productID);
    pRequest.setAttribute(""String_Node_Str"",login);
    pRequest.getRequestDispatcher(""String_Node_Str"").forward(pRequest,pResponse);
  }
}"
86058,"public void execImpl() throws Exception {
  productS=ScriptingTools.createProductService(getServerURL(),user,password);
  getPart(partNumber,revision.toString(),iteration);
}","public void execImpl() throws Exception {
  productS=ScriptingTools.createProductService(getServerURL(),user,password);
  String strRevision=revision == null ? null : revision.toString();
  getPart(partNumber,strRevision,iteration);
}"
86059,"@RolesAllowed(""String_Node_Str"") @Override public PartRevision updatePartIteration(PartIterationKey pKey,String pIterationNote,Source source,List<PartUsageLink> pUsageLinks,List<InstanceAttribute> pAttributes) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, NotAllowedException, PartRevisionNotFoundException, PartMasterNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(pKey.getWorkspaceId());
  PartMasterDAO partMDAO=new PartMasterDAO(new Locale(user.getLanguage()),em);
  PartRevisionDAO partRDAO=new PartRevisionDAO(new Locale(user.getLanguage()),em);
  PartRevision partRev=partRDAO.loadPartR(pKey.getPartRevision());
  PartIteration partIte=partRev.getLastIteration();
  if (partRev.isCheckedOut() && partRev.getCheckOutUser().equals(user) && partIte.getKey().equals(pKey)) {
    List<PartUsageLink> usageLinks=new LinkedList<PartUsageLink>();
    for (    PartUsageLink usageLink : pUsageLinks) {
      PartUsageLink ul=new PartUsageLink();
      ul.setAmount(usageLink.getAmount());
      ul.setCadInstances(usageLink.getCadInstances());
      ul.setComment(usageLink.getComment());
      ul.setReferenceDescription(usageLink.getReferenceDescription());
      ul.setUnit(usageLink.getUnit());
      PartMaster pm=usageLink.getComponent();
      PartMaster component=partMDAO.loadPartM(new PartMasterKey(pm.getWorkspaceId(),pm.getNumber()));
      ul.setComponent(component);
      List<PartSubstituteLink> substitutes=new LinkedList<PartSubstituteLink>();
      for (      PartSubstituteLink substitute : usageLink.getSubstitutes()) {
        PartSubstituteLink sub=new PartSubstituteLink();
        sub.setCadInstances(substitute.getCadInstances());
        sub.setComment(substitute.getComment());
        sub.setReferenceDescription(substitute.getReferenceDescription());
        PartMaster pmSub=substitute.getSubstitute();
        sub.setSubstitute(partMDAO.loadPartM(new PartMasterKey(pmSub.getWorkspaceId(),pmSub.getNumber())));
        substitutes.add(sub);
      }
      ul.setSubstitutes(substitutes);
      usageLinks.add(ul);
    }
    partIte.setComponents(usageLinks);
    Map<String,InstanceAttribute> attrs=new HashMap<String,InstanceAttribute>();
    for (    InstanceAttribute attr : pAttributes) {
      attrs.put(attr.getName(),attr);
    }
    Set<InstanceAttribute> currentAttrs=new HashSet<InstanceAttribute>(partIte.getInstanceAttributes().values());
    for (    InstanceAttribute attr : currentAttrs) {
      if (!attrs.containsKey(attr.getName())) {
        partIte.getInstanceAttributes().remove(attr.getName());
      }
    }
    for (    InstanceAttribute attr : attrs.values()) {
      if (!partIte.getInstanceAttributes().containsKey(attr.getName())) {
        partIte.getInstanceAttributes().put(attr.getName(),attr);
      }
 else {
        partIte.getInstanceAttributes().get(attr.getName()).setValue(attr.getValue());
      }
    }
    partIte.setIterationNote(pIterationNote);
    partIte.setSource(source);
    return partRev;
  }
 else {
    throw new NotAllowedException(new Locale(user.getLanguage()),""String_Node_Str"");
  }
}","@RolesAllowed(""String_Node_Str"") @Override public PartRevision updatePartIteration(PartIterationKey pKey,String pIterationNote,Source source,List<PartUsageLink> pUsageLinks,List<InstanceAttribute> pAttributes) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, NotAllowedException, PartRevisionNotFoundException, PartMasterNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(pKey.getWorkspaceId());
  PartMasterDAO partMDAO=new PartMasterDAO(new Locale(user.getLanguage()),em);
  PartRevisionDAO partRDAO=new PartRevisionDAO(new Locale(user.getLanguage()),em);
  PartRevision partRev=partRDAO.loadPartR(pKey.getPartRevision());
  PartIteration partIte=partRev.getLastIteration();
  if (partRev.isCheckedOut() && partRev.getCheckOutUser().equals(user) && partIte.getKey().equals(pKey)) {
    if (pUsageLinks != null) {
      List<PartUsageLink> usageLinks=new LinkedList<PartUsageLink>();
      for (      PartUsageLink usageLink : pUsageLinks) {
        PartUsageLink ul=new PartUsageLink();
        ul.setAmount(usageLink.getAmount());
        ul.setCadInstances(usageLink.getCadInstances());
        ul.setComment(usageLink.getComment());
        ul.setReferenceDescription(usageLink.getReferenceDescription());
        ul.setUnit(usageLink.getUnit());
        PartMaster pm=usageLink.getComponent();
        PartMaster component=partMDAO.loadPartM(new PartMasterKey(pm.getWorkspaceId(),pm.getNumber()));
        ul.setComponent(component);
        List<PartSubstituteLink> substitutes=new LinkedList<PartSubstituteLink>();
        for (        PartSubstituteLink substitute : usageLink.getSubstitutes()) {
          PartSubstituteLink sub=new PartSubstituteLink();
          sub.setCadInstances(substitute.getCadInstances());
          sub.setComment(substitute.getComment());
          sub.setReferenceDescription(substitute.getReferenceDescription());
          PartMaster pmSub=substitute.getSubstitute();
          sub.setSubstitute(partMDAO.loadPartM(new PartMasterKey(pmSub.getWorkspaceId(),pmSub.getNumber())));
          substitutes.add(sub);
        }
        ul.setSubstitutes(substitutes);
        usageLinks.add(ul);
      }
      partIte.setComponents(usageLinks);
    }
    if (pAttributes != null) {
      Map<String,InstanceAttribute> attrs=new HashMap<String,InstanceAttribute>();
      for (      InstanceAttribute attr : pAttributes) {
        attrs.put(attr.getName(),attr);
      }
      Set<InstanceAttribute> currentAttrs=new HashSet<InstanceAttribute>(partIte.getInstanceAttributes().values());
      for (      InstanceAttribute attr : currentAttrs) {
        if (!attrs.containsKey(attr.getName())) {
          partIte.getInstanceAttributes().remove(attr.getName());
        }
      }
      for (      InstanceAttribute attr : attrs.values()) {
        if (!partIte.getInstanceAttributes().containsKey(attr.getName())) {
          partIte.getInstanceAttributes().put(attr.getName(),attr);
        }
 else {
          partIte.getInstanceAttributes().get(attr.getName()).setValue(attr.getValue());
        }
      }
    }
    partIte.setIterationNote(pIterationNote);
    partIte.setSource(source);
    return partRev;
  }
 else {
    throw new NotAllowedException(new Locale(user.getLanguage()),""String_Node_Str"");
  }
}"
86060,"PartRevision updatePartIteration(PartIterationKey pKey,java.lang.String pIterationNote,PartIteration.Source source,java.util.List<PartUsageLink> pUsageLinks,java.util.List<InstanceAttribute> pAttributes) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, NotAllowedException, PartRevisionNotFoundException ;","PartRevision updatePartIteration(PartIterationKey pKey,java.lang.String pIterationNote,PartIteration.Source source,java.util.List<PartUsageLink> pUsageLinks,java.util.List<InstanceAttribute> pAttributes) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, NotAllowedException, PartRevisionNotFoundException, PartMasterNotFoundException ;"
86061,"/** 
 * Updates the specified <a href=""PartIteration.html"">PartIteration</a> with the properties passed as parameters. The corresponding part revision should be in checkout state.
 * @param key The id of the part iteration to modify
 * @param iterationNote A note to describe the iteration and thus the modifications made to the part
 * @param source The <a href=""PartIteration.Source.html"">PartIteration.Source</a> attribute of the part
 * @param usageLinks Links to other parts. Only assembly parts can define usage links
 * @param attributes Custom attributes that may be added to the part
 * @return The <a href=""PartRevision.html"">PartRevision</a> of the updated part iteration
 * @throws UserNotFoundException
 * @throws WorkspaceNotFoundException
 * @throws AccessRightException
 * @throws NotAllowedException
 * @throws PartRevisionNotFoundException
 */
PartRevision updatePartIteration(PartIterationKey key,java.lang.String iterationNote,PartIteration.Source source,java.util.List<PartUsageLink> usageLinks,java.util.List<InstanceAttribute> attributes) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, NotAllowedException, PartRevisionNotFoundException ;","/** 
 * Updates the specified <a href=""PartIteration.html"">PartIteration</a> with the properties passed as parameters. The corresponding part revision should be in checkout state.
 * @param key The id of the part iteration to modify
 * @param iterationNote A note to describe the iteration and thus the modifications made to the part
 * @param source The <a href=""PartIteration.Source.html"">PartIteration.Source</a> attribute of the part
 * @param usageLinks Links to other parts. Only assembly parts can define usage links
 * @param attributes Custom attributes that may be added to the part
 * @return The <a href=""PartRevision.html"">PartRevision</a> of the updated part iteration
 * @throws UserNotFoundException
 * @throws WorkspaceNotFoundException
 * @throws AccessRightException
 * @throws NotAllowedException
 * @throws PartRevisionNotFoundException
 * @throws PartMasterNotFoundException
 */
PartRevision updatePartIteration(PartIterationKey key,java.lang.String iterationNote,PartIteration.Source source,java.util.List<PartUsageLink> usageLinks,java.util.List<InstanceAttribute> attributes) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, NotAllowedException, PartRevisionNotFoundException, PartMasterNotFoundException ;"
86062,"@RolesAllowed(""String_Node_Str"") @Override public PartRevision updatePartIteration(PartIterationKey pKey,String pIterationNote,Source source,List<PartUsageLink> pUsageLinks,List<InstanceAttribute> pAttributes) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, NotAllowedException, PartRevisionNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(pKey.getWorkspaceId());
  PartRevisionDAO partRDAO=new PartRevisionDAO(new Locale(user.getLanguage()),em);
  PartRevision partRev=partRDAO.loadPartR(pKey.getPartRevision());
  PartIteration partIte=partRev.getLastIteration();
  if (partRev.isCheckedOut() && partRev.getCheckOutUser().equals(user) && partIte.getKey().equals(pKey)) {
    partIte.setComponents(pUsageLinks);
    Map<String,InstanceAttribute> attrs=new HashMap<String,InstanceAttribute>();
    for (    InstanceAttribute attr : pAttributes) {
      attrs.put(attr.getName(),attr);
    }
    Set<InstanceAttribute> currentAttrs=new HashSet<InstanceAttribute>(partIte.getInstanceAttributes().values());
    for (    InstanceAttribute attr : currentAttrs) {
      if (!attrs.containsKey(attr.getName())) {
        partIte.getInstanceAttributes().remove(attr.getName());
      }
    }
    for (    InstanceAttribute attr : attrs.values()) {
      if (!partIte.getInstanceAttributes().containsKey(attr.getName())) {
        partIte.getInstanceAttributes().put(attr.getName(),attr);
      }
 else {
        partIte.getInstanceAttributes().get(attr.getName()).setValue(attr.getValue());
      }
    }
    partIte.setIterationNote(pIterationNote);
    partIte.setSource(source);
    return partRev;
  }
 else {
    throw new NotAllowedException(new Locale(user.getLanguage()),""String_Node_Str"");
  }
}","@RolesAllowed(""String_Node_Str"") @Override public PartRevision updatePartIteration(PartIterationKey pKey,String pIterationNote,Source source,List<PartUsageLink> pUsageLinks,List<InstanceAttribute> pAttributes) throws UserNotFoundException, WorkspaceNotFoundException, AccessRightException, NotAllowedException, PartRevisionNotFoundException, PartMasterNotFoundException {
  User user=userManager.checkWorkspaceWriteAccess(pKey.getWorkspaceId());
  PartMasterDAO partMDAO=new PartMasterDAO(new Locale(user.getLanguage()),em);
  PartRevisionDAO partRDAO=new PartRevisionDAO(new Locale(user.getLanguage()),em);
  PartRevision partRev=partRDAO.loadPartR(pKey.getPartRevision());
  PartIteration partIte=partRev.getLastIteration();
  if (partRev.isCheckedOut() && partRev.getCheckOutUser().equals(user) && partIte.getKey().equals(pKey)) {
    List<PartUsageLink> usageLinks=new LinkedList<PartUsageLink>();
    for (    PartUsageLink usageLink : pUsageLinks) {
      PartUsageLink ul=new PartUsageLink();
      ul.setAmount(usageLink.getAmount());
      ul.setCadInstances(usageLink.getCadInstances());
      ul.setComment(usageLink.getComment());
      ul.setReferenceDescription(usageLink.getReferenceDescription());
      ul.setUnit(usageLink.getUnit());
      PartMaster pm=usageLink.getComponent();
      PartMaster component=partMDAO.loadPartM(new PartMasterKey(pm.getWorkspaceId(),pm.getNumber()));
      ul.setComponent(component);
      List<PartSubstituteLink> substitutes=new LinkedList<PartSubstituteLink>();
      for (      PartSubstituteLink substitute : usageLink.getSubstitutes()) {
        PartSubstituteLink sub=new PartSubstituteLink();
        sub.setCadInstances(substitute.getCadInstances());
        sub.setComment(substitute.getComment());
        sub.setReferenceDescription(substitute.getReferenceDescription());
        PartMaster pmSub=substitute.getSubstitute();
        sub.setSubstitute(partMDAO.loadPartM(new PartMasterKey(pmSub.getWorkspaceId(),pmSub.getNumber())));
        substitutes.add(sub);
      }
      ul.setSubstitutes(substitutes);
      usageLinks.add(ul);
    }
    partIte.setComponents(usageLinks);
    Map<String,InstanceAttribute> attrs=new HashMap<String,InstanceAttribute>();
    for (    InstanceAttribute attr : pAttributes) {
      attrs.put(attr.getName(),attr);
    }
    Set<InstanceAttribute> currentAttrs=new HashSet<InstanceAttribute>(partIte.getInstanceAttributes().values());
    for (    InstanceAttribute attr : currentAttrs) {
      if (!attrs.containsKey(attr.getName())) {
        partIte.getInstanceAttributes().remove(attr.getName());
      }
    }
    for (    InstanceAttribute attr : attrs.values()) {
      if (!partIte.getInstanceAttributes().containsKey(attr.getName())) {
        partIte.getInstanceAttributes().put(attr.getName(),attr);
      }
 else {
        partIte.getInstanceAttributes().get(attr.getName()).setValue(attr.getValue());
      }
    }
    partIte.setIterationNote(pIterationNote);
    partIte.setSource(source);
    return partRev;
  }
 else {
    throw new NotAllowedException(new Locale(user.getLanguage()),""String_Node_Str"");
  }
}"
86063,"private PartMaster filterLatestConfigSpec(PartMaster root,int depth){
  PartRevision partR=root.getLastRevision();
  PartIteration partI=null;
  if (partR != null) {
    partI=partR.getLastIteration();
  }
  em.detach(root);
  if (root.getPartRevisions().size() > 1) {
    root.getPartRevisions().retainAll(Collections.singleton(partR));
  }
  if (partR != null && partR.getNumberOfIterations() > 1) {
    partR.getPartIterations().retainAll(Collections.singleton(partI));
  }
  if (partI != null) {
    if (depth != 0) {
      depth--;
      for (      PartUsageLink usageLink : partI.getComponents()) {
        filterLatestConfigSpec(usageLink.getComponent(),depth);
        for (        PartSubstituteLink subLink : usageLink.getSubstitutes()) {
          filterLatestConfigSpec(subLink.getSubstitute(),0);
        }
      }
    }
  }
  for (  PartAlternateLink alternateLink : root.getAlternates()) {
    filterLatestConfigSpec(alternateLink.getAlternate(),0);
  }
  return root;
}","private PartMaster filterLatestConfigSpec(PartMaster root,int depth){
  PartRevision partR=root.getLastRevision();
  PartIteration partI=null;
  if (partR != null) {
    partI=partR.getLastIteration();
  }
  if (partI != null) {
    if (depth != 0) {
      depth--;
      for (      PartUsageLink usageLink : partI.getComponents()) {
        filterLatestConfigSpec(usageLink.getComponent(),depth);
        for (        PartSubstituteLink subLink : usageLink.getSubstitutes()) {
          filterLatestConfigSpec(subLink.getSubstitute(),0);
        }
      }
    }
  }
  for (  PartAlternateLink alternateLink : root.getAlternates()) {
    filterLatestConfigSpec(alternateLink.getAlternate(),0);
  }
  em.detach(root);
  if (root.getPartRevisions().size() > 1) {
    root.getPartRevisions().retainAll(Collections.singleton(partR));
  }
  if (partR != null && partR.getNumberOfIterations() > 1) {
    partR.getPartIterations().retainAll(Collections.singleton(partI));
  }
  return root;
}"
86064,"@PUT @Consumes(""String_Node_Str"") @Produces(""String_Node_Str"") @Path(""String_Node_Str"") public DocumentMasterDTO[] createNewVersion(@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String docKey,DocumentCreationDTO docCreationDTO){
  int lastDash=docKey.lastIndexOf('-');
  String pID=docKey.substring(0,lastDash);
  String pVersion=docKey.substring(lastDash + 1,docKey.length());
  String pWorkspaceId=workspaceId;
  String pTitle=docCreationDTO.getTitle();
  String pDescription=docCreationDTO.getDescription();
  String pWorkflowModelId=docCreationDTO.getWorkflowModelId();
  ACLDTO acl=null;
  try {
    ACLUserEntry[] userEntries=null;
    ACLUserGroupEntry[] userGroupEntries=null;
    if (acl != null) {
      userEntries=new ACLUserEntry[acl.getUserEntries().size()];
      userGroupEntries=new ACLUserGroupEntry[acl.getGroupEntries().size()];
      int i=0;
      for (      Map.Entry<String,ACLDTO.Permission> entry : acl.getUserEntries().entrySet()) {
        userEntries[i]=new ACLUserEntry();
        userEntries[i].setPrincipal(new User(new Workspace(pWorkspaceId),entry.getKey()));
        userEntries[i++].setPermission(ACL.Permission.valueOf(entry.getValue().name()));
      }
      i=0;
      for (      Map.Entry<String,ACLDTO.Permission> entry : acl.getGroupEntries().entrySet()) {
        userGroupEntries[i]=new ACLUserGroupEntry();
        userGroupEntries[i].setPrincipal(new UserGroup(new Workspace(pWorkspaceId),entry.getKey()));
        userGroupEntries[i++].setPermission(ACL.Permission.valueOf(entry.getValue().name()));
      }
    }
    DocumentMaster[] docM=documentService.createVersion(new DocumentMasterKey(pWorkspaceId,pID,pVersion),pTitle,pDescription,pWorkflowModelId,userEntries,userGroupEntries);
    DocumentMasterDTO[] dtos=new DocumentMasterDTO[docM.length];
    for (int i=0; i < docM.length; i++) {
      dtos[i]=mapper.map(docM[i],DocumentMasterDTO.class);
      dtos[i].setPath(docM[i].getLocation().getCompletePath());
      dtos[i].setLifeCycleState(docM[i].getLifeCycleState());
      dtos[i]=Tools.createLightDocumentMasterDTO(dtos[i]);
    }
    return dtos;
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}","@PUT @Consumes(""String_Node_Str"") @Produces(""String_Node_Str"") @Path(""String_Node_Str"") public DocumentMasterDTO[] createNewVersion(@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String docKey,DocumentCreationDTO docCreationDTO){
  int lastDash=docKey.lastIndexOf('-');
  String pID=docKey.substring(0,lastDash);
  String pVersion=docKey.substring(lastDash + 1,docKey.length());
  String pWorkspaceId=workspaceId;
  String pTitle=docCreationDTO.getTitle();
  String pDescription=docCreationDTO.getDescription();
  String pWorkflowModelId=docCreationDTO.getWorkflowModelId();
  ACLDTO acl=null;
  try {
    ACLUserEntry[] userEntries=null;
    ACLUserGroupEntry[] userGroupEntries=null;
    if (acl != null) {
      userEntries=new ACLUserEntry[acl.getUserEntries().size()];
      userGroupEntries=new ACLUserGroupEntry[acl.getGroupEntries().size()];
      int i=0;
      for (      Map.Entry<String,ACLDTO.Permission> entry : acl.getUserEntries().entrySet()) {
        userEntries[i]=new ACLUserEntry();
        userEntries[i].setPrincipal(new User(new Workspace(pWorkspaceId),entry.getKey()));
        userEntries[i++].setPermission(ACL.Permission.valueOf(entry.getValue().name()));
      }
      i=0;
      for (      Map.Entry<String,ACLDTO.Permission> entry : acl.getGroupEntries().entrySet()) {
        userGroupEntries[i]=new ACLUserGroupEntry();
        userGroupEntries[i].setPrincipal(new UserGroup(new Workspace(pWorkspaceId),entry.getKey()));
        userGroupEntries[i++].setPermission(ACL.Permission.valueOf(entry.getValue().name()));
      }
    }
    DocumentMaster[] docM=documentService.createVersion(new DocumentMasterKey(pWorkspaceId,pID,pVersion),pTitle,pDescription,pWorkflowModelId,userEntries,userGroupEntries);
    DocumentMasterDTO[] dtos=new DocumentMasterDTO[docM.length];
    for (int i=0; i < docM.length; i++) {
      dtos[i]=mapper.map(docM[i],DocumentMasterDTO.class);
      dtos[i].setPath(docM[i].getLocation().getCompletePath());
      dtos[i].setLifeCycleState(docM[i].getLifeCycleState());
      dtos[i]=Tools.createLightDocumentMasterDTO(dtos[i]);
      dtos[i].setIterationSubscription(documentService.isUserIterationChangeEventSubscribedForGivenDocument(workspaceId,docM[i]));
      dtos[i].setStateSubscription(documentService.isUserStateChangeEventSubscribedForGivenDocument(workspaceId,docM[i]));
    }
    return dtos;
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}"
86065,"@GET @Produces(""String_Node_Str"") public DocumentMasterDTO getDocumentMaster(@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String docKey){
  int lastDash=docKey.lastIndexOf('-');
  String id=docKey.substring(0,lastDash);
  String version=docKey.substring(lastDash + 1,docKey.length());
  try {
    DocumentMaster docM=documentService.getDocumentMaster(new DocumentMasterKey(workspaceId,id,version));
    DocumentMasterDTO docMsDTO=mapper.map(docM,DocumentMasterDTO.class);
    docMsDTO.setPath(docM.getLocation().getCompletePath());
    docMsDTO.setLifeCycleState(docM.getLifeCycleState());
    return docMsDTO;
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}","@GET @Produces(""String_Node_Str"") public DocumentMasterDTO getDocumentMaster(@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String docKey){
  int lastDash=docKey.lastIndexOf('-');
  String id=docKey.substring(0,lastDash);
  String version=docKey.substring(lastDash + 1,docKey.length());
  try {
    DocumentMaster docM=documentService.getDocumentMaster(new DocumentMasterKey(workspaceId,id,version));
    DocumentMasterDTO docMsDTO=mapper.map(docM,DocumentMasterDTO.class);
    docMsDTO.setPath(docM.getLocation().getCompletePath());
    docMsDTO.setLifeCycleState(docM.getLifeCycleState());
    docMsDTO.setIterationSubscription(documentService.isUserIterationChangeEventSubscribedForGivenDocument(workspaceId,docM));
    docMsDTO.setStateSubscription(documentService.isUserStateChangeEventSubscribedForGivenDocument(workspaceId,docM));
    return docMsDTO;
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}"
86066,"@GET @Path(""String_Node_Str"") @Produces(""String_Node_Str"") public DocumentMasterDTO[] getCheckedOutDocMs(@PathParam(""String_Node_Str"") String workspaceId) throws ApplicationException {
  try {
    DocumentMaster[] checkedOutdocMs=documentService.getCheckedOutDocumentMasters(workspaceId);
    DocumentMasterDTO[] checkedOutdocMsDTO=new DocumentMasterDTO[checkedOutdocMs.length];
    for (int i=0; i < checkedOutdocMs.length; i++) {
      checkedOutdocMsDTO[i]=mapper.map(checkedOutdocMs[i],DocumentMasterDTO.class);
      checkedOutdocMsDTO[i].setPath(checkedOutdocMs[i].getLocation().getCompletePath());
      checkedOutdocMsDTO[i]=Tools.createLightDocumentMasterDTO(checkedOutdocMsDTO[i]);
    }
    return checkedOutdocMsDTO;
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}","@GET @Path(""String_Node_Str"") @Produces(""String_Node_Str"") public DocumentMasterDTO[] getCheckedOutDocMs(@PathParam(""String_Node_Str"") String workspaceId) throws ApplicationException {
  try {
    DocumentMaster[] checkedOutdocMs=documentService.getCheckedOutDocumentMasters(workspaceId);
    DocumentMasterDTO[] checkedOutdocMsDTO=new DocumentMasterDTO[checkedOutdocMs.length];
    for (int i=0; i < checkedOutdocMs.length; i++) {
      checkedOutdocMsDTO[i]=mapper.map(checkedOutdocMs[i],DocumentMasterDTO.class);
      checkedOutdocMsDTO[i].setPath(checkedOutdocMs[i].getLocation().getCompletePath());
      checkedOutdocMsDTO[i]=Tools.createLightDocumentMasterDTO(checkedOutdocMsDTO[i]);
      checkedOutdocMsDTO[i].setIterationSubscription(documentService.isUserIterationChangeEventSubscribedForGivenDocument(workspaceId,checkedOutdocMs[i]));
      checkedOutdocMsDTO[i].setStateSubscription(documentService.isUserStateChangeEventSubscribedForGivenDocument(workspaceId,checkedOutdocMs[i]));
    }
    return checkedOutdocMsDTO;
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}"
86067,"private DocumentMasterDTO[] getDocumentsWithGivenTagIdAndWorkspaceId(String workspaceId,String tagId){
  try {
    DocumentMaster[] docMs=documentService.findDocumentMastersByTag(new TagKey(workspaceId,tagId));
    DocumentMasterDTO[] docMsDTOs=new DocumentMasterDTO[docMs.length];
    for (int i=0; i < docMs.length; i++) {
      docMsDTOs[i]=mapper.map(docMs[i],DocumentMasterDTO.class);
      docMsDTOs[i]=Tools.createLightDocumentMasterDTO(docMsDTOs[i]);
    }
    return docMsDTOs;
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}","private DocumentMasterDTO[] getDocumentsWithGivenTagIdAndWorkspaceId(String workspaceId,String tagId){
  try {
    DocumentMaster[] docMs=documentService.findDocumentMastersByTag(new TagKey(workspaceId,tagId));
    DocumentMasterDTO[] docMsDTOs=new DocumentMasterDTO[docMs.length];
    for (int i=0; i < docMs.length; i++) {
      docMsDTOs[i]=mapper.map(docMs[i],DocumentMasterDTO.class);
      docMsDTOs[i]=Tools.createLightDocumentMasterDTO(docMsDTOs[i]);
      docMsDTOs[i].setIterationSubscription(documentService.isUserIterationChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
      docMsDTOs[i].setStateSubscription(documentService.isUserStateChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
    }
    return docMsDTOs;
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}"
86068,"private DocumentMasterDTO[] getDocumentsWithGivenFolderIdAndWorkspaceId(String workspaceId,String folderId){
  try {
    String decodedCompletePath=getPathFromUrlParams(workspaceId,folderId);
    DocumentMaster[] docMs=documentService.findDocumentMastersByFolder(decodedCompletePath);
    DocumentMasterDTO[] docMsDTOs=new DocumentMasterDTO[docMs.length];
    for (int i=0; i < docMs.length; i++) {
      docMsDTOs[i]=mapper.map(docMs[i],DocumentMasterDTO.class);
      docMsDTOs[i].setPath(docMs[i].getLocation().getCompletePath());
      docMsDTOs[i]=Tools.createLightDocumentMasterDTO(docMsDTOs[i]);
    }
    return docMsDTOs;
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}","private DocumentMasterDTO[] getDocumentsWithGivenFolderIdAndWorkspaceId(String workspaceId,String folderId){
  try {
    String decodedCompletePath=getPathFromUrlParams(workspaceId,folderId);
    DocumentMaster[] docMs=documentService.findDocumentMastersByFolder(decodedCompletePath);
    DocumentMasterDTO[] docMsDTOs=new DocumentMasterDTO[docMs.length];
    for (int i=0; i < docMs.length; i++) {
      docMsDTOs[i]=mapper.map(docMs[i],DocumentMasterDTO.class);
      docMsDTOs[i].setPath(docMs[i].getLocation().getCompletePath());
      docMsDTOs[i]=Tools.createLightDocumentMasterDTO(docMsDTOs[i]);
      docMsDTOs[i].setIterationSubscription(documentService.isUserIterationChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
      docMsDTOs[i].setStateSubscription(documentService.isUserStateChangeEventSubscribedForGivenDocument(workspaceId,docMs[i]));
    }
    return docMsDTOs;
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}"
86069,"@Override public void init(ServletConfig config) throws ServletException {
  Logger.getLogger(MainChannelSocketServlet.class.getName()).log(Level.SEVERE,""String_Node_Str"");
  WebSocketEngine.getEngine().register(config.getServletContext().getContextPath() + ""String_Node_Str"",app);
  app.setUserManager(userManager);
}","@Override public void init(ServletConfig config) throws ServletException {
  WebSocketEngine.getEngine().register(config.getServletContext().getContextPath() + ""String_Node_Str"",app);
  app.setUserManager(userManager);
}"
86070,"@Override public void destroy(){
  System.out.println(""String_Node_Str"");
  WebSocketEngine.getEngine().unregister(app);
}","@Override public void destroy(){
  WebSocketEngine.getEngine().unregister(app);
}"
86071,"private void onWebRTCAcceptMessage(String callerLogin,JSONObject jsobj) throws JSONException {
  String remoteUser=jsobj.getString(""String_Node_Str"");
  String roomKey=jsobj.getString(""String_Node_Str"");
  Room room=Room.getByKeyName(roomKey);
  if (room != null) {
    room.addUser(callerLogin);
    boolean sent=send(remoteUser,ChatMessagesBuilder.BuildWebRTCAcceptMessage(callerLogin,room.key()));
  }
 else {
  }
}","private void onWebRTCAcceptMessage(String callerLogin,JSONObject jsobj) throws JSONException {
  String remoteUser=jsobj.getString(""String_Node_Str"");
  String roomKey=jsobj.getString(""String_Node_Str"");
  Room room=Room.getByKeyName(roomKey);
  if (room != null && room.hasUser(remoteUser)) {
    room.addUser(callerLogin);
    boolean sent=send(remoteUser,ChatMessagesBuilder.BuildWebRTCAcceptMessage(callerLogin,room.key()));
  }
 else {
  }
}"
86072,"@Override public void onMessage(WebSocket socket,String data){
  MainChannelWebSocket ws=(MainChannelWebSocket)socket;
  if (data.startsWith(""String_Node_Str"") && ws.getUserLogin() == null) {
    onPeerDeclarationMessage(data,ws);
  }
 else {
    String callerLogin=ws.getUserLogin();
    try {
      JSONObject jsobj=new JSONObject(data);
      String type=jsobj.getString(""String_Node_Str"");
switch (type) {
case ChannelMessagesType.USER_STATUS:
        onUserStatusRequestMessage(callerLogin,jsobj);
      break;
case ChannelMessagesType.WEBRTC_INVITE:
    onWebRTCInviteMessage(callerLogin,jsobj);
  break;
case ChannelMessagesType.WEBRTC_ACCEPT:
onWebRTCAcceptMessage(callerLogin,jsobj);
break;
case ChannelMessagesType.WEBRTC_REJECT:
onWebRTCRejectMessage(callerLogin,jsobj);
break;
case ChannelMessagesType.WEBRTC_HANGUP:
onWebRTCHangupMessage(callerLogin,jsobj);
break;
case ChannelMessagesType.WEBRTC_ANSWER:
case ChannelMessagesType.WEBRTC_OFFER:
case ChannelMessagesType.WEBRTC_CANDIDATE:
case ChannelMessagesType.WEBRTC_BYE:
onWebRTCSignalingMessage(callerLogin,jsobj,data);
break;
case ChannelMessagesType.CHAT_MESSAGE:
onChatMessage(callerLogin,jsobj);
break;
default :
onUnrecognizedMessageType(callerLogin);
break;
}
}
 catch (JSONException ex) {
send(callerLogin,ChatMessagesBuilder.BuildJsonExMessage());
}
}
}","@Override public void onMessage(WebSocket socket,String data){
  MainChannelWebSocket ws=(MainChannelWebSocket)socket;
  if (data.startsWith(""String_Node_Str"") && ws.getUserLogin() == null) {
    onPeerDeclarationMessage(data,ws);
  }
 else {
    String callerLogin=ws.getUserLogin();
    try {
      JSONObject jsobj=new JSONObject(data);
      String type=jsobj.getString(""String_Node_Str"");
switch (type) {
case ChannelMessagesType.USER_STATUS:
        onUserStatusRequestMessage(callerLogin,jsobj);
      break;
case ChannelMessagesType.WEBRTC_INVITE:
    onWebRTCInviteMessage(callerLogin,jsobj);
  break;
case ChannelMessagesType.WEBRTC_INVITE_TIMEOUT:
onWebRTCInviteTimeoutMessage(callerLogin,jsobj);
break;
case ChannelMessagesType.WEBRTC_ACCEPT:
onWebRTCAcceptMessage(callerLogin,jsobj);
break;
case ChannelMessagesType.WEBRTC_REJECT:
onWebRTCRejectMessage(callerLogin,jsobj);
break;
case ChannelMessagesType.WEBRTC_HANGUP:
onWebRTCHangupMessage(callerLogin,jsobj);
break;
case ChannelMessagesType.WEBRTC_ANSWER:
case ChannelMessagesType.WEBRTC_OFFER:
case ChannelMessagesType.WEBRTC_CANDIDATE:
case ChannelMessagesType.WEBRTC_BYE:
onWebRTCSignalingMessage(callerLogin,jsobj,data,type);
break;
case ChannelMessagesType.CHAT_MESSAGE:
onChatMessage(callerLogin,jsobj);
break;
default :
onUnrecognizedMessageType(callerLogin);
break;
}
}
 catch (JSONException ex) {
send(callerLogin,ChatMessagesBuilder.BuildJsonExMessage());
}
}
Room.debug();
}"
86073,"private void onWebRTCSignalingMessage(String callerLogin,JSONObject jsobj,String data) throws JSONException {
  String roomKey=jsobj.getString(""String_Node_Str"");
  Room room=Room.getByKeyName(roomKey);
  if (room != null) {
    if (room.hasUser(callerLogin)) {
      String remoteUser=room.getOtherUser(callerLogin);
      if (remoteUser != null) {
        send(remoteUser,data);
      }
 else {
      }
    }
 else {
    }
  }
 else {
  }
}","private void onWebRTCSignalingMessage(String callerLogin,JSONObject jsobj,String data,String messageType) throws JSONException {
  String roomKey=jsobj.getString(""String_Node_Str"");
  Room room=Room.getByKeyName(roomKey);
  if (room != null) {
    if (room.hasUser(callerLogin)) {
      String remoteUser=room.getOtherUser(callerLogin);
      if (remoteUser != null) {
        send(remoteUser,data);
        if (messageType.equals(ChannelMessagesType.WEBRTC_BYE)) {
          room.removeUser(callerLogin);
        }
      }
 else {
      }
    }
 else {
    }
  }
 else {
  }
}"
86074,"/** 
 * Add a new participant to this room
 * @return if participant is found 
 */
public boolean addUser(String user){
  boolean success=true;
  if (user1 == null || user1.equals(""String_Node_Str"")) {
    user1=user;
  }
 else   if (user2 == null || user2.equals(""String_Node_Str"")) {
    user2=user;
  }
 else {
    success=false;
  }
  return success;
}","/** 
 * Add a new participant to this room
 * @return if participant is found 
 */
public boolean addUser(String user){
  boolean success=true;
  if (this.hasUser(user)) {
    return success;
  }
  if (user1 == null || user1.equals(""String_Node_Str"")) {
    user1=user;
  }
 else   if (user2 == null || user2.equals(""String_Node_Str"")) {
    user2=user;
  }
 else {
    success=false;
  }
  return success;
}"
86075,"List<List<PartUsageLink>> findPartUsages(ConfigurationItemKey pKey,PartMasterKey pPartMKey) throws WorkspaceNotFoundException, UserNotFoundException, UserNotActiveException ;","List<PartUsageLink[]> findPartUsages(ConfigurationItemKey pKey,PartMasterKey pPartMKey) throws WorkspaceNotFoundException, UserNotFoundException, UserNotActiveException ;"
86076,"/** 
 * Searchs all instances of a part and returns their paths, defined by a serie of usage links, from the top of the structure to their own usage link.
 * @param ciKey The configuration item under which context the search is made
 * @param partMKey The id of the part master to search on the structure
 * @return The usage paths to all instances of the supplied part
 * @throws WorkspaceNotFoundException
 * @throws UserNotFoundException
 * @throws UserNotActiveException
 */
List<List<PartUsageLink>> findPartUsages(ConfigurationItemKey ciKey,PartMasterKey partMKey) throws WorkspaceNotFoundException, UserNotFoundException, UserNotActiveException ;","/** 
 * Searchs all instances of a part and returns their paths, defined by a serie of usage links, from the top of the structure to their own usage link.
 * @param ciKey The configuration item under which context the search is made
 * @param partMKey The id of the part master to search on the structure
 * @return The usage paths to all instances of the supplied part
 * @throws WorkspaceNotFoundException
 * @throws UserNotFoundException
 * @throws UserNotActiveException
 */
List<PartUsageLink[]> findPartUsages(ConfigurationItemKey ciKey,PartMasterKey partMKey) throws WorkspaceNotFoundException, UserNotFoundException, UserNotActiveException ;"
86077,"@RolesAllowed(""String_Node_Str"") @Override public List<List<PartUsageLink>> findPartUsages(ConfigurationItemKey pKey,PartMasterKey pPartMKey) throws WorkspaceNotFoundException, UserNotFoundException, UserNotActiveException {
  User user=userManager.checkWorkspaceReadAccess(pKey.getWorkspace());
  PartUsageLinkDAO linkDAO=new PartUsageLinkDAO(new Locale(user.getLanguage()),em);
  List<List<PartUsageLink>> usagePaths=linkDAO.findPartUsagePaths(pPartMKey);
  return usagePaths;
}","@RolesAllowed(""String_Node_Str"") @Override public List<PartUsageLink[]> findPartUsages(ConfigurationItemKey pKey,PartMasterKey pPartMKey) throws WorkspaceNotFoundException, UserNotFoundException, UserNotActiveException {
  User user=userManager.checkWorkspaceReadAccess(pKey.getWorkspace());
  PartUsageLinkDAO linkDAO=new PartUsageLinkDAO(new Locale(user.getLanguage()),em);
  List<PartUsageLink[]> usagePaths=linkDAO.findPartUsagePaths(pPartMKey);
  return usagePaths;
}"
86078,"public List<List<PartUsageLink>> findPartUsagePaths(PartMasterKey pPartMKey){
  List<PartUsageLink> usages=findPartUsages(pPartMKey.getWorkspace(),pPartMKey.getNumber());
  List<List<PartUsageLink>> usagePaths=new ArrayList<List<PartUsageLink>>();
  for (  PartUsageLink usage : usages) {
    List<PartUsageLink> path=new ArrayList<PartUsageLink>();
    path.add(usage);
    createPath(usage,path,usagePaths);
  }
  return usagePaths;
}","public List<PartUsageLink[]> findPartUsagePaths(PartMasterKey pPartMKey){
  List<PartUsageLink> usages=findPartUsages(pPartMKey.getWorkspace(),pPartMKey.getNumber());
  List<PartUsageLink[]> usagePaths=new ArrayList<PartUsageLink[]>();
  for (  PartUsageLink usage : usages) {
    List<PartUsageLink> path=new ArrayList<PartUsageLink>();
    path.add(usage);
    createPath(usage,path,usagePaths);
  }
  return usagePaths;
}"
86079,"private void createPath(PartUsageLink currentUsage,List<PartUsageLink> currentPath,List<List<PartUsageLink>> usagePaths){
  PartIteration owner=em.createNamedQuery(""String_Node_Str"",PartIteration.class).setParameter(""String_Node_Str"",currentUsage).getSingleResult();
  List<PartUsageLink> parentUsages=findPartUsages(owner.getWorkspaceId(),owner.getPartNumber());
  for (  PartUsageLink parentUsage : parentUsages) {
    List<PartUsageLink> newPath=new ArrayList<PartUsageLink>(currentPath);
    newPath.add(0,parentUsage);
    createPath(parentUsage,newPath,usagePaths);
  }
  if (parentUsages.isEmpty())   usagePaths.add(currentPath);
}","private void createPath(PartUsageLink currentUsage,List<PartUsageLink> currentPath,List<PartUsageLink[]> usagePaths){
  PartIteration owner=em.createNamedQuery(""String_Node_Str"",PartIteration.class).setParameter(""String_Node_Str"",currentUsage).getSingleResult();
  List<PartUsageLink> parentUsages=findPartUsages(owner.getWorkspaceId(),owner.getPartNumber());
  for (  PartUsageLink parentUsage : parentUsages) {
    List<PartUsageLink> newPath=new ArrayList<PartUsageLink>(currentPath);
    newPath.add(0,parentUsage);
    createPath(parentUsage,newPath,usagePaths);
  }
  if (parentUsages.isEmpty())   usagePaths.add(currentPath.toArray(new PartUsageLink[currentPath.size()]));
}"
86080,"@Override protected void doGet(HttpServletRequest pRequest,HttpServletResponse pResponse) throws ServletException, IOException {
  try {
    String login=pRequest.getRemoteUser();
    String[] pathInfos=UploadDownloadServlet.removeEmptyEntries(pRequest.getRequestURI().split(""String_Node_Str""));
    int offset;
    if (pRequest.getContextPath().equals(""String_Node_Str"")) {
      offset=1;
    }
 else {
      offset=2;
    }
    String workspaceId=URLDecoder.decode(pathInfos[offset],""String_Node_Str"");
    String elementType=pathInfos[offset + 1];
    String fullName=null;
    if (elementType.equals(""String_Node_Str"")) {
      String docMId=URLDecoder.decode(pathInfos[offset + 2],""String_Node_Str"");
      String docMVersion=pathInfos[offset + 3];
      int iteration=Integer.parseInt(pathInfos[offset + 4]);
      String fileName=URLDecoder.decode(pathInfos[offset + 5],""String_Node_Str"");
      fullName=workspaceId + ""String_Node_Str"" + elementType+ ""String_Node_Str""+ docMId+ ""String_Node_Str""+ docMVersion+ ""String_Node_Str""+ iteration+ ""String_Node_Str""+ fileName;
    }
 else     if (elementType.equals(""String_Node_Str"")) {
      String templateID=URLDecoder.decode(pathInfos[offset + 2],""String_Node_Str"");
      String fileName=URLDecoder.decode(pathInfos[offset + 3],""String_Node_Str"");
      fullName=workspaceId + ""String_Node_Str"" + elementType+ ""String_Node_Str""+ templateID+ ""String_Node_Str""+ fileName;
    }
 else     if (elementType.equals(""String_Node_Str"")) {
      String partNumber=URLDecoder.decode(pathInfos[offset + 2],""String_Node_Str"");
      String version=pathInfos[offset + 3];
      int iteration=Integer.parseInt(pathInfos[offset + 4]);
      String fileName=URLDecoder.decode(pathInfos[offset + 5],""String_Node_Str"");
      fullName=workspaceId + ""String_Node_Str"" + elementType+ ""String_Node_Str""+ partNumber+ ""String_Node_Str""+ version+ ""String_Node_Str""+ iteration+ ""String_Node_Str""+ fileName;
    }
    File dataFile=documentService.getDataFile(fullName);
    File fileToOutput;
    if (""String_Node_Str"".equals(pRequest.getParameter(""String_Node_Str""))) {
      pResponse.setContentType(""String_Node_Str"");
      String ooHome=getServletContext().getInitParameter(""String_Node_Str"");
      int ooPort=Integer.parseInt(getServletContext().getInitParameter(""String_Node_Str""));
      fileToOutput=new FileConverter(ooHome,ooPort).convertToPDF(dataFile);
    }
 else     if (""String_Node_Str"".equals(pRequest.getParameter(""String_Node_Str""))) {
      pResponse.setContentType(""String_Node_Str"");
      String pdf2SWFHome=getServletContext().getInitParameter(""String_Node_Str"");
      String ooHome=getServletContext().getInitParameter(""String_Node_Str"");
      int ooPort=Integer.parseInt(getServletContext().getInitParameter(""String_Node_Str""));
      FileConverter fileConverter=new FileConverter(pdf2SWFHome,ooHome,ooPort);
      fileToOutput=fileConverter.convertToSWF(dataFile);
    }
 else {
      String contentType=FileTypeMap.getDefaultFileTypeMap().getContentType(dataFile);
      pResponse.setContentType(contentType);
      fileToOutput=dataFile;
    }
    int cacheSeconds=86400;
    pResponse.setHeader(""String_Node_Str"",""String_Node_Str"" + cacheSeconds);
    DateFormat httpDateFormat=new SimpleDateFormat(""String_Node_Str"",Locale.US);
    httpDateFormat.setTimeZone(TimeZone.getTimeZone(""String_Node_Str""));
    Calendar cal=new GregorianCalendar();
    cal.add(Calendar.SECOND,cacheSeconds);
    pResponse.setHeader(""String_Node_Str"",httpDateFormat.format(cal.getTime()));
    pResponse.setHeader(""String_Node_Str"",""String_Node_Str"");
    pResponse.setContentLength((int)fileToOutput.length());
    ServletOutputStream httpOut=pResponse.getOutputStream();
    InputStream input=new BufferedInputStream(new FileInputStream(fileToOutput),BUFFER_CAPACITY);
    byte[] data=new byte[CHUNK_SIZE];
    int length;
    while ((length=input.read(data)) != -1) {
      httpOut.write(data,0,length);
    }
    input.close();
    httpOut.flush();
    httpOut.close();
  }
 catch (  Exception pEx) {
    throw new ServletException(""String_Node_Str"",pEx);
  }
}","@Override protected void doGet(HttpServletRequest pRequest,HttpServletResponse pResponse) throws ServletException, IOException {
  try {
    String login=pRequest.getRemoteUser();
    String[] pathInfos=UploadDownloadServlet.removeEmptyEntries(pRequest.getRequestURI().split(""String_Node_Str""));
    int offset;
    if (pRequest.getContextPath().equals(""String_Node_Str"")) {
      offset=1;
    }
 else {
      offset=2;
    }
    String workspaceId=URLDecoder.decode(pathInfos[offset],""String_Node_Str"");
    String elementType=pathInfos[offset + 1];
    String fullName=null;
    if (elementType.equals(""String_Node_Str"")) {
      setCacheHeaders(86400,pResponse);
      String docMId=URLDecoder.decode(pathInfos[offset + 2],""String_Node_Str"");
      String docMVersion=pathInfos[offset + 3];
      int iteration=Integer.parseInt(pathInfos[offset + 4]);
      String fileName=URLDecoder.decode(pathInfos[offset + 5],""String_Node_Str"");
      fullName=workspaceId + ""String_Node_Str"" + elementType+ ""String_Node_Str""+ docMId+ ""String_Node_Str""+ docMVersion+ ""String_Node_Str""+ iteration+ ""String_Node_Str""+ fileName;
    }
 else     if (elementType.equals(""String_Node_Str"")) {
      String templateID=URLDecoder.decode(pathInfos[offset + 2],""String_Node_Str"");
      String fileName=URLDecoder.decode(pathInfos[offset + 3],""String_Node_Str"");
      fullName=workspaceId + ""String_Node_Str"" + elementType+ ""String_Node_Str""+ templateID+ ""String_Node_Str""+ fileName;
    }
 else     if (elementType.equals(""String_Node_Str"")) {
      setCacheHeaders(86400,pResponse);
      String partNumber=URLDecoder.decode(pathInfos[offset + 2],""String_Node_Str"");
      String version=pathInfos[offset + 3];
      int iteration=Integer.parseInt(pathInfos[offset + 4]);
      String fileName=URLDecoder.decode(pathInfos[offset + 5],""String_Node_Str"");
      fullName=workspaceId + ""String_Node_Str"" + elementType+ ""String_Node_Str""+ partNumber+ ""String_Node_Str""+ version+ ""String_Node_Str""+ iteration+ ""String_Node_Str""+ fileName;
    }
    File dataFile=documentService.getDataFile(fullName);
    File fileToOutput;
    if (""String_Node_Str"".equals(pRequest.getParameter(""String_Node_Str""))) {
      pResponse.setContentType(""String_Node_Str"");
      String ooHome=getServletContext().getInitParameter(""String_Node_Str"");
      int ooPort=Integer.parseInt(getServletContext().getInitParameter(""String_Node_Str""));
      fileToOutput=new FileConverter(ooHome,ooPort).convertToPDF(dataFile);
    }
 else     if (""String_Node_Str"".equals(pRequest.getParameter(""String_Node_Str""))) {
      pResponse.setContentType(""String_Node_Str"");
      String pdf2SWFHome=getServletContext().getInitParameter(""String_Node_Str"");
      String ooHome=getServletContext().getInitParameter(""String_Node_Str"");
      int ooPort=Integer.parseInt(getServletContext().getInitParameter(""String_Node_Str""));
      FileConverter fileConverter=new FileConverter(pdf2SWFHome,ooHome,ooPort);
      fileToOutput=fileConverter.convertToSWF(dataFile);
    }
 else {
      String contentType=FileTypeMap.getDefaultFileTypeMap().getContentType(dataFile);
      pResponse.setContentType(contentType);
      fileToOutput=dataFile;
    }
    long lastModified=fileToOutput.lastModified();
    long ifModified=pRequest.getDateHeader(""String_Node_Str"");
    setLastModifiedHeaders(lastModified,pResponse);
    if (lastModified > ifModified) {
      pResponse.setContentLength((int)fileToOutput.length());
      ServletOutputStream httpOut=pResponse.getOutputStream();
      InputStream input=new BufferedInputStream(new FileInputStream(fileToOutput),BUFFER_CAPACITY);
      byte[] data=new byte[CHUNK_SIZE];
      int length;
      while ((length=input.read(data)) != -1) {
        httpOut.write(data,0,length);
      }
      input.close();
      httpOut.flush();
      httpOut.close();
    }
 else {
      pResponse.setStatus(HttpServletResponse.SC_NOT_MODIFIED);
    }
  }
 catch (  Exception pEx) {
    throw new ServletException(""String_Node_Str"",pEx);
  }
}"
86081,"@Override public void writeTo(InstanceCollection object,Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,Object> httpHeaders,OutputStream entityStream) throws IOException, WebApplicationException {
  try {
    this.entityStream=entityStream;
    this.marshaller=((JSONJAXBContext)getJAXBContext(InstanceDTO.class,mediaType)).createJSONMarshaller();
    Map<String,String> mediaTypeParameters=mediaType.getParameters();
    String charSet=""String_Node_Str"";
    if (mediaTypeParameters.containsKey(CHARSET)) {
      charSet=mediaTypeParameters.get(CHARSET);
      this.marshaller.setProperty(Marshaller.JAXB_ENCODING,charSet);
    }
    PartUsageLink rootUsageLink=object.getRootUsageLink();
    List<Integer> usageLinkPaths=object.getUsageLinkPaths();
    leftSquareBrace=""String_Node_Str"".getBytes(charSet);
    rightSquareBrace=""String_Node_Str"".getBytes(charSet);
    comma=""String_Node_Str"".getBytes(charSet);
    this.addComma=false;
    this.entityStream.write(leftSquareBrace);
    generateInstanceStream(rootUsageLink,0,0,0,0,0,0,usageLinkPaths);
    this.entityStream.write(rightSquareBrace);
  }
 catch (  JAXBException ex) {
    throw new WebApplicationException(ex);
  }
}","@Override public void writeTo(InstanceCollection object,Class<?> type,Type genericType,Annotation[] annotations,MediaType mediaType,MultivaluedMap<String,Object> httpHeaders,OutputStream entityStream) throws IOException, WebApplicationException {
  try {
    setEntityStream(entityStream);
    setMarshaller(((JSONJAXBContext)getJAXBContext(InstanceDTO.class,mediaType)).createJSONMarshaller());
    Map<String,String> mediaTypeParameters=mediaType.getParameters();
    String charSet=""String_Node_Str"";
    if (mediaTypeParameters.containsKey(CHARSET)) {
      charSet=mediaTypeParameters.get(CHARSET);
      getMarshaller().setProperty(Marshaller.JAXB_ENCODING,charSet);
    }
    PartUsageLink rootUsageLink=object.getRootUsageLink();
    List<Integer> usageLinkPaths=object.getUsageLinkPaths();
    byte[] leftSquareBrace=""String_Node_Str"".getBytes(charSet);
    byte[] rightSquareBrace=""String_Node_Str"".getBytes(charSet);
    setComma(""String_Node_Str"".getBytes(charSet));
    setAddComma(false);
    getEntityStream().write(leftSquareBrace);
    generateInstanceStream(rootUsageLink,0,0,0,0,0,0,usageLinkPaths);
    getEntityStream().write(rightSquareBrace);
  }
 catch (  JAXBException ex) {
    throw new WebApplicationException(ex);
  }
 finally {
    tlEntityStream.remove();
    tlMarshaller.remove();
    tlAddComma.remove();
    tlComma.remove();
  }
}"
86082,"private void generateInstanceStream(PartUsageLink usageLink,double tx,double ty,double tz,double rx,double ry,double rz,List<Integer> filteredPath) throws JAXBException, IOException {
  PartMaster pm=usageLink.getComponent();
  PartRevision partR=pm.getLastRevision();
  PartIteration partI=partR.getLastIteration();
  String partIterationId=new StringBuilder().append(pm.getNumber()).append(""String_Node_Str"").append(partR.getVersion()).append(""String_Node_Str"").append(partI.getIteration()).toString();
  List<GeometryDTO> files=new ArrayList<GeometryDTO>();
  List<InstanceAttributeDTO> attributes=new ArrayList<InstanceAttributeDTO>();
  for (  Geometry geometry : partI.getGeometries()) {
    files.add(mapper.map(geometry,GeometryDTO.class));
  }
  for (  InstanceAttribute attr : partI.getInstanceAttributes().values()) {
    attributes.add(mapper.map(attr,InstanceAttributeDTO.class));
  }
  for (  CADInstance instance : usageLink.getCadInstances()) {
    double atx=tx + getRelativeTxAfterParentRotation(rx,ry,rz,instance.getTx(),instance.getTy(),instance.getTz());
    double aty=ty + getRelativeTyAfterParentRotation(rx,ry,rz,instance.getTx(),instance.getTy(),instance.getTz());
    double atz=tz + getRelativeTzAfterParentRotation(rx,ry,rz,instance.getTx(),instance.getTy(),instance.getTz());
    double arx=rx + instance.getRx();
    double ary=ry + instance.getRy();
    double arz=rz + instance.getRz();
    if (partI.getGeometries().size() > 0 && filteredPath.isEmpty()) {
      if (addComma)       this.entityStream.write(comma);
      this.marshaller.marshallToJSON(new InstanceDTO(partIterationId,atx,aty,atz,arx,ary,arz,files,attributes),entityStream);
      addComma=true;
    }
 else {
      for (      PartUsageLink component : partI.getComponents()) {
        if (filteredPath.isEmpty()) {
          generateInstanceStream(component,atx,aty,atz,arx,ary,arz,filteredPath);
        }
 else         if (component.getId() == filteredPath.get(0)) {
          ArrayList<Integer> copyWithoutCurrentId=new ArrayList<Integer>(filteredPath);
          copyWithoutCurrentId.remove(0);
          generateInstanceStream(component,atx,aty,atz,arx,ary,arz,copyWithoutCurrentId);
        }
      }
    }
  }
}","private void generateInstanceStream(PartUsageLink usageLink,double tx,double ty,double tz,double rx,double ry,double rz,List<Integer> filteredPath) throws JAXBException, IOException {
  PartMaster pm=usageLink.getComponent();
  PartRevision partR=pm.getLastRevision();
  PartIteration partI=partR.getLastIteration();
  String partIterationId=new StringBuilder().append(pm.getNumber()).append(""String_Node_Str"").append(partR.getVersion()).append(""String_Node_Str"").append(partI.getIteration()).toString();
  List<GeometryDTO> files=new ArrayList<GeometryDTO>();
  List<InstanceAttributeDTO> attributes=new ArrayList<InstanceAttributeDTO>();
  for (  Geometry geometry : partI.getGeometries()) {
    files.add(mapper.map(geometry,GeometryDTO.class));
  }
  for (  InstanceAttribute attr : partI.getInstanceAttributes().values()) {
    attributes.add(mapper.map(attr,InstanceAttributeDTO.class));
  }
  for (  CADInstance instance : usageLink.getCadInstances()) {
    double atx=tx + getRelativeTxAfterParentRotation(rx,ry,rz,instance.getTx(),instance.getTy(),instance.getTz());
    double aty=ty + getRelativeTyAfterParentRotation(rx,ry,rz,instance.getTx(),instance.getTy(),instance.getTz());
    double atz=tz + getRelativeTzAfterParentRotation(rx,ry,rz,instance.getTx(),instance.getTy(),instance.getTz());
    double arx=rx + instance.getRx();
    double ary=ry + instance.getRy();
    double arz=rz + instance.getRz();
    if (partI.getGeometries().size() > 0 && filteredPath.isEmpty()) {
      if (getAddComma())       getEntityStream().write(getComma());
      getMarshaller().marshallToJSON(new InstanceDTO(partIterationId,atx,aty,atz,arx,ary,arz,files,attributes),getEntityStream());
      setAddComma(true);
    }
 else {
      for (      PartUsageLink component : partI.getComponents()) {
        if (filteredPath.isEmpty()) {
          generateInstanceStream(component,atx,aty,atz,arx,ary,arz,filteredPath);
        }
 else         if (component.getId() == filteredPath.get(0)) {
          ArrayList<Integer> copyWithoutCurrentId=new ArrayList<Integer>(filteredPath);
          copyWithoutCurrentId.remove(0);
          generateInstanceStream(component,atx,aty,atz,arx,ary,arz,copyWithoutCurrentId);
        }
      }
    }
  }
}"
86083,"@GET @Path(""String_Node_Str"") @Produces(""String_Node_Str"") public InstanceCollection getInstances(@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String ciId,@QueryParam(""String_Node_Str"") String configSpecType,@QueryParam(""String_Node_Str"") String path){
  try {
    ConfigurationItemKey ciKey=new ConfigurationItemKey(workspaceId,ciId);
    ConfigSpec cs=new LatestConfigSpec();
    String[] partUsageIdsString=path.split(""String_Node_Str"");
    List<Integer> usageLinkPaths=new ArrayList<Integer>();
    for (int i=0; i < partUsageIdsString.length; i++) {
      usageLinkPaths.add(Integer.parseInt(partUsageIdsString[i]));
    }
    PartUsageLink rootUsageLink=productService.filterProductStructure(ciKey,cs,usageLinkPaths.get(0),0);
    usageLinkPaths.remove(0);
    return new InstanceCollection(rootUsageLink,usageLinkPaths);
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}","@GET @Path(""String_Node_Str"") @Produces(""String_Node_Str"") public Response getInstances(@PathParam(""String_Node_Str"") String workspaceId,@PathParam(""String_Node_Str"") String ciId,@QueryParam(""String_Node_Str"") String configSpecType,@QueryParam(""String_Node_Str"") String path){
  try {
    ConfigurationItemKey ciKey=new ConfigurationItemKey(workspaceId,ciId);
    ConfigSpec cs=new LatestConfigSpec();
    String[] partUsageIdsString=path.split(""String_Node_Str"");
    List<Integer> usageLinkPaths=new ArrayList<Integer>();
    for (int i=0; i < partUsageIdsString.length; i++) {
      usageLinkPaths.add(Integer.parseInt(partUsageIdsString[i]));
    }
    PartUsageLink rootUsageLink=productService.filterProductStructure(ciKey,cs,usageLinkPaths.get(0),0);
    usageLinkPaths.remove(0);
    CacheControl cc=new CacheControl();
    cc.setMaxAge(60 * 60);
    cc.setNoCache(false);
    return Response.ok().cacheControl(cc).entity(new InstanceCollection(rootUsageLink,usageLinkPaths)).build();
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RestApiException(ex.toString(),ex.getMessage());
  }
}"
86084,"private static void init(){
  Toolkit.getDefaultToolkit().setDynamicLayout(true);
  Prefs.initLocale();
  FileIO.rmDir(Config.LOCAL_TEMP_FOLDER);
  try {
    String version=System.getProperty(""String_Node_Str"");
    if (version.startsWith(""String_Node_Str"")) {
      for (      UIManager.LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {
        if (""String_Node_Str"".equals(laf.getName())) {
          UIManager.setLookAndFeel(laf.getClassName());
        }
      }
    }
 else {
      UIManager.setLookAndFeel(""String_Node_Str"");
    }
  }
 catch (  Exception pEx) {
    System.err.println(""String_Node_Str"");
    System.err.println(pEx.getMessage());
  }
}","private static void init(){
  Toolkit.getDefaultToolkit().setDynamicLayout(true);
  Prefs.initLocale();
  FileIO.rmDir(Config.LOCAL_TEMP_FOLDER);
  try {
    String version=System.getProperty(""String_Node_Str"");
    if (version.startsWith(""String_Node_Str"")) {
      Config.HTTP_CLIENT_STREAMING_CHUNK_SIZE=Config.JAVA7_HTTP_CLIENT_STREAMING_CHUNK_SIZE;
      for (      UIManager.LookAndFeelInfo laf : UIManager.getInstalledLookAndFeels()) {
        if (""String_Node_Str"".equals(laf.getName())) {
          UIManager.setLookAndFeel(laf.getClassName());
        }
      }
    }
 else {
      Config.HTTP_CLIENT_STREAMING_CHUNK_SIZE=Config.JAVA6_HTTP_CLIENT_STREAMING_CHUNK_SIZE;
      UIManager.setLookAndFeel(""String_Node_Str"");
    }
  }
 catch (  Exception pEx) {
    System.err.println(""String_Node_Str"");
    System.err.println(pEx.getMessage());
  }
}"
86085,"public static void main(String[] args) throws MalformedURLException, Exception {
  Console c=System.console();
  login=c.readLine(""String_Node_Str"");
  password=new String(c.readPassword(""String_Node_Str""));
  workspace=c.readLine(""String_Node_Str"");
  String serverURL=c.readLine(""String_Node_Str"");
  pm=ScriptingTools.createProductService(serverURL + ""String_Node_Str"",login,password);
  fm=ScriptingTools.createFileManagerService(serverURL + ""String_Node_Str"",login,password);
  System.out.println(""String_Node_Str"");
  createBikeSampleProduct();
  System.out.println(""String_Node_Str"");
}","public static void main(String[] args) throws MalformedURLException, Exception {
  Console c=System.console();
  login=c.readLine(""String_Node_Str"");
  password=new String(c.readPassword(""String_Node_Str""));
  workspace=c.readLine(""String_Node_Str"");
  String serverURL=c.readLine(""String_Node_Str"");
  pm=ScriptingTools.createProductService(serverURL + ""String_Node_Str"",login,password);
  fm=ScriptingTools.createFileManagerService(serverURL + ""String_Node_Str"",login,password);
  System.out.println(""String_Node_Str"");
  createBuildingSampleProduct();
  System.out.println(""String_Node_Str"");
}"
86086,"/** 
 * Creates a regular file, <a href=""BinaryResource.html"">BinaryResource</a> object, and attachs it to the part iteration instance passed as parameter. The part must be in the checkout state and the calling user must have write access rights to the part.
 * @param partIPK The id of the part iteration on which the file will be attached
 * @param name The name of the binary resource to create
 * @param size Number of bytes of the physical file
 * @return The physical file, a java.io.File instance, that now needs to be created
 * @throws UserNotFoundException
 * @throws UserNotActiveException
 * @throws WorkspaceNotFoundException
 * @throws NotAllowedException
 * @throws PartRevisionNotFoundException
 * @throws FileAlreadyExistsException
 * @throws CreationException
 */
java.io.File saveFileInPartIteration(PartIterationKey pPartIPK,String name,long size) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, NotAllowedException, PartRevisionNotFoundException, FileAlreadyExistsException, CreationException ;","/** 
 * Creates a regular file, <a href=""BinaryResource.html"">BinaryResource</a> object, and attachs it to the part iteration instance passed as parameter. The part must be in the checkout state and the calling user must have write access rights to the part.
 * @param partIPK The id of the part iteration on which the file will be attached
 * @param name The name of the binary resource to create
 * @param size Number of bytes of the physical file
 * @return The physical file, a java.io.File instance, that now needs to be created
 * @throws UserNotFoundException
 * @throws UserNotActiveException
 * @throws WorkspaceNotFoundException
 * @throws NotAllowedException
 * @throws PartRevisionNotFoundException
 * @throws FileAlreadyExistsException
 * @throws CreationException
 */
java.io.File saveFileInPartIteration(PartIterationKey partIPK,String name,long size) throws UserNotFoundException, UserNotActiveException, WorkspaceNotFoundException, NotAllowedException, PartRevisionNotFoundException, FileAlreadyExistsException, CreationException ;"
86087,"public List<ConfigurationItem> findAllConfigurationItems(String pWorkspaceId){
  TypedQuery query=em.createQuery(""String_Node_Str"",ConfigurationItem.class);
  return query.setParameter(""String_Node_Str"",pWorkspaceId).getResultList();
}","public List<ConfigurationItem> findAllConfigurationItems(String pWorkspaceId){
  TypedQuery<ConfigurationItem> query=em.createQuery(""String_Node_Str"",ConfigurationItem.class);
  return query.setParameter(""String_Node_Str"",pWorkspaceId).getResultList();
}"
86088,"/** 
 * DELETE method for deleting an instance of FolderResource
 * @param parent folder path
 * @return the array of the documents that have also been deleted
 */
@DELETE @Path(""String_Node_Str"") @Produces(""String_Node_Str"") public DocumentMasterKey[] deleteJson(@PathParam(""String_Node_Str"") String completePath){
  try {
    return commandService.deleteFolder(completePath);
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RESTException(ex.toString(),ex.getMessage());
  }
}","/** 
 * DELETE method for deleting an instance of FolderResource
 * @param parent folder path
 * @return the array of the documents that have also been deleted
 */
@DELETE @Path(""String_Node_Str"") @Produces(""String_Node_Str"") public DocumentMasterKey[] deleteJson(@PathParam(""String_Node_Str"") String parentFolder,@PathParam(""String_Node_Str"") String folderName){
  try {
    String completePath=parentFolder + ""String_Node_Str"" + folderName;
    return commandService.deleteFolder(completePath);
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RESTException(ex.toString(),ex.getMessage());
  }
}"
86089,"/** 
 * Retrieves representation of an instance of FolderResource
 * @param parent folder path
 * @return the array of sub-folders
 */
@GET @Path(""String_Node_Str"") @Produces(""String_Node_Str"") public String[] getJson(@PathParam(""String_Node_Str"") String completePath){
  try {
    return commandService.getFolders(completePath);
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RESTException(ex.toString(),ex.getMessage());
  }
}","/** 
 * Retrieves representation of an instance of FolderResource
 * @param parent folder path
 * @return the array of sub-folders
 */
@GET @Path(""String_Node_Str"") @Produces(""String_Node_Str"") public String[] getJson(@PathParam(""String_Node_Str"") String parentFolder,@PathParam(""String_Node_Str"") String folderName){
  try {
    String completePath=parentFolder + ""String_Node_Str"" + folderName;
    return commandService.getFolders(completePath);
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RESTException(ex.toString(),ex.getMessage());
  }
}"
86090,"/** 
 * DELETE method for deleting an instance of FolderResource
 * @param parent folder path
 * @return the array of the documents that have also been deleted
 */
@DELETE @Path(""String_Node_Str"") @Produces(""String_Node_Str"") public DocumentMasterKey[] deleteJson(@PathParam(""String_Node_Str"") String parentFolder,@PathParam(""String_Node_Str"") String folderName){
  try {
    String completePath=parentFolder + ""String_Node_Str"" + folderName;
    return commandService.deleteFolder(completePath);
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RESTException(ex.toString(),ex.getMessage());
  }
}","/** 
 * DELETE method for deleting an instance of FolderResource
 * @param parent folder path
 * @return the array of the documents that have also been deleted
 */
@DELETE @Path(""String_Node_Str"") @Produces(""String_Node_Str"") public DocumentMasterKey[] deleteJson(@PathParam(""String_Node_Str"") String workspace,@PathParam(""String_Node_Str"") String folderPath){
  try {
    String completePath=workspace + ""String_Node_Str"" + folderPath;
    return commandService.deleteFolder(completePath);
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RESTException(ex.toString(),ex.getMessage());
  }
}"
86091,"/** 
 * Retrieves representation of an instance of FolderResource
 * @param parent folder path
 * @return the array of sub-folders
 */
@GET @Path(""String_Node_Str"") @Produces(""String_Node_Str"") public String[] getJson(@PathParam(""String_Node_Str"") String parentFolder,@PathParam(""String_Node_Str"") String folderName){
  try {
    String completePath=parentFolder + ""String_Node_Str"" + folderName;
    return commandService.getFolders(completePath);
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RESTException(ex.toString(),ex.getMessage());
  }
}","/** 
 * Retrieves representation of an instance of FolderResource
 * @param parent folder path
 * @return the array of sub-folders
 */
@GET @Path(""String_Node_Str"") @Produces(""String_Node_Str"") public String[] getJson(@PathParam(""String_Node_Str"") String workspace,@PathParam(""String_Node_Str"") String folderPath){
  try {
    String completePath=workspace;
    if (!""String_Node_Str"".equals(folderPath)) {
      completePath+=""String_Node_Str"" + folderPath;
    }
    if (completePath.charAt(completePath.length() - 1) == '/')     completePath=completePath.substring(0,completePath.length() - 1);
    return commandService.getFolders(completePath);
  }
 catch (  com.docdoku.core.services.ApplicationException ex) {
    throw new RESTException(ex.toString(),ex.getMessage());
  }
}"
86092,"public void onResize(ResizeEvent event){
  if (m_wfEditor.isVisible()) {
    m_wfEditor.setVisible(false);
    m_wfEditor.setWidth(inputPanel.getOffsetWidth() - 10);
    m_wfEditor.setVisible(true);
  }
}","public void onResize(ResizeEvent event){
  if (m_wfEditor.isVisible() && m_wfEditor.isAttached()) {
    m_wfEditor.setVisible(false);
    m_wfEditor.setWidth(inputPanel.getOffsetWidth() - 10);
    m_wfEditor.setVisible(true);
  }
}"
86093,"public void execute(Object... userObject){
  FileUpload upload=m_mainPage.getEditDocFilesPanel().getFileUpload();
  FormPanel form=m_mainPage.getEditDocFilesPanel().getForm();
  MasterDocumentDTO mdoc=m_mainPage.getLastOpenedMDoc();
  String fileName=upload.getFilename();
  int index=fileName.lastIndexOf('/');
  if (index == -1)   index=fileName.lastIndexOf('\\');
  if (index != -1)   fileName=fileName.substring(index + 1);
  String webappContext=HTMLUtil.getWebContext();
  String url=""String_Node_Str"" + webappContext + ""String_Node_Str""+ URL.encode(mdoc.getWorkspaceId())+ ""String_Node_Str""+ ""String_Node_Str""+ URL.encode(mdoc.getId())+ ""String_Node_Str""+ mdoc.getVersion()+ ""String_Node_Str""+ mdoc.getLastIteration().getIteration()+ ""String_Node_Str""+ URL.encode(fileName);
  form.setAction(url);
  form.submit();
}","public void execute(Object... userObject){
  FileUpload upload=m_mainPage.getEditDocFilesPanel().getFileUpload();
  FormPanel form=m_mainPage.getEditDocFilesPanel().getForm();
  MasterDocumentDTO mdoc=m_mainPage.getLastOpenedMDoc();
  String fileName=upload.getFilename();
  int index=fileName.lastIndexOf('/');
  if (index == -1)   index=fileName.lastIndexOf('\\');
  if (index != -1)   fileName=fileName.substring(index + 1);
  String webappContext=HTMLUtil.getWebContext();
  String url=""String_Node_Str"" + (webappContext == null ? ""String_Node_Str"" : webappContext + ""String_Node_Str"") + ""String_Node_Str""+ URL.encode(mdoc.getWorkspaceId())+ ""String_Node_Str""+ ""String_Node_Str""+ URL.encode(mdoc.getId())+ ""String_Node_Str""+ mdoc.getVersion()+ ""String_Node_Str""+ mdoc.getLastIteration().getIteration()+ ""String_Node_Str""+ URL.encode(fileName);
  form.setAction(url);
  form.submit();
}"
86094,"public void execute(Object... userObject){
  FileUpload upload=m_mainPage.getEditTemplateFilesPanel().getFileUpload();
  FormPanel form=m_mainPage.getEditTemplateFilesPanel().getForm();
  MasterDocumentTemplateDTO template=m_mainPage.getLastOpenedMDocTemplate();
  String webappContext=HTMLUtil.getWebContext();
  String url=""String_Node_Str"" + webappContext + ""String_Node_Str""+ URL.encode(template.getWorkspaceId())+ ""String_Node_Str""+ ""String_Node_Str""+ URL.encode(template.getId())+ ""String_Node_Str""+ URL.encode(upload.getFilename());
  form.setAction(url);
  form.submit();
}","public void execute(Object... userObject){
  FileUpload upload=m_mainPage.getEditTemplateFilesPanel().getFileUpload();
  FormPanel form=m_mainPage.getEditTemplateFilesPanel().getForm();
  MasterDocumentTemplateDTO template=m_mainPage.getLastOpenedMDocTemplate();
  String webappContext=HTMLUtil.getWebContext();
  String url=""String_Node_Str"" + (webappContext == null ? ""String_Node_Str"" : webappContext + ""String_Node_Str"") + ""String_Node_Str""+ URL.encode(template.getWorkspaceId())+ ""String_Node_Str""+ ""String_Node_Str""+ URL.encode(template.getId())+ ""String_Node_Str""+ URL.encode(upload.getFilename());
  form.setAction(url);
  form.submit();
}"
86095,"public void setMDoc(final MasterDocumentDTO mdoc,int it){
  m_mainPanel.setMDocAuthor(mdoc.getAuthor().toString());
  int iteration=0;
  String revision=""String_Node_Str"";
  if (it == mdoc.getIterations().size() - 1) {
    if (mdoc.getLastIteration() != null) {
      iteration=mdoc.getLastIteration().getIteration();
      revision=mdoc.getLastIteration().getRevisionNote();
    }
  }
 else {
    iteration=it + 1;
    revision=mdoc.getIterations().get(it).getRevisionNote();
  }
  String webappContext=HTMLUtil.getWebContext();
  String htmlLink=""String_Node_Str"" + webappContext + ""String_Node_Str""+ mdoc.getWorkspaceId()+ ""String_Node_Str""+ mdoc.getId()+ ""String_Node_Str""+ mdoc.getVersion()+ ""String_Node_Str""+ i18n.permaLink()+ ""String_Node_Str"";
  m_mainPanel.setPermaLink(htmlLink);
  m_mainPanel.setDocID(mdoc.getId() + ""String_Node_Str"" + mdoc.getVersion()+ ""String_Node_Str""+ iteration);
  m_mainPanel.setCreationDate(mdoc.getCreationDate());
  m_mainPanel.setModificationDate(mdoc.getCheckOutDate());
  m_mainPanel.setCheckOutUser(mdoc.getCheckOutUser());
  m_mainPanel.setMDocType(mdoc.getType());
  m_mainPanel.setMDocTitle(mdoc.getTitle());
  m_mainPanel.setLifeCycleState(mdoc.getLifeCycleState());
  m_mainPanel.setRevisionNote(revision);
  m_mainPanel.setTags(mdoc.getTags() == null ? ""String_Node_Str"" : Arrays.toString(mdoc.getTags()));
  m_iterationNavigator.setIterationsNumber(it,mdoc.getIterations().size() - 1);
  m_iterationNavigator.setVisible(mdoc.getIterations().size() != 1);
  if (mdoc.getWorkflow() != null) {
    m_mainPanel.setWorkflow(mdoc.getWorkflow());
  }
}","public void setMDoc(final MasterDocumentDTO mdoc,int it){
  m_mainPanel.setMDocAuthor(mdoc.getAuthor().toString());
  int iteration=0;
  String revision=""String_Node_Str"";
  if (it == mdoc.getIterations().size() - 1) {
    if (mdoc.getLastIteration() != null) {
      iteration=mdoc.getLastIteration().getIteration();
      revision=mdoc.getLastIteration().getRevisionNote();
    }
  }
 else {
    iteration=it + 1;
    revision=mdoc.getIterations().get(it).getRevisionNote();
  }
  String webappContext=HTMLUtil.getWebContext();
  String htmlLink=""String_Node_Str"" + (webappContext == null ? ""String_Node_Str"" : webappContext + ""String_Node_Str"") + ""String_Node_Str""+ mdoc.getWorkspaceId()+ ""String_Node_Str""+ mdoc.getId()+ ""String_Node_Str""+ mdoc.getVersion()+ ""String_Node_Str""+ i18n.permaLink()+ ""String_Node_Str"";
  m_mainPanel.setPermaLink(htmlLink);
  m_mainPanel.setDocID(mdoc.getId() + ""String_Node_Str"" + mdoc.getVersion()+ ""String_Node_Str""+ iteration);
  m_mainPanel.setCreationDate(mdoc.getCreationDate());
  m_mainPanel.setModificationDate(mdoc.getCheckOutDate());
  m_mainPanel.setCheckOutUser(mdoc.getCheckOutUser());
  m_mainPanel.setMDocType(mdoc.getType());
  m_mainPanel.setMDocTitle(mdoc.getTitle());
  m_mainPanel.setLifeCycleState(mdoc.getLifeCycleState());
  m_mainPanel.setRevisionNote(revision);
  m_mainPanel.setTags(mdoc.getTags() == null ? ""String_Node_Str"" : Arrays.toString(mdoc.getTags()));
  m_iterationNavigator.setIterationsNumber(it,mdoc.getIterations().size() - 1);
  m_iterationNavigator.setVisible(mdoc.getIterations().size() != 1);
  if (mdoc.getWorkflow() != null) {
    m_mainPanel.setWorkflow(mdoc.getWorkflow());
  }
}"
86096,"public void setFiles(Map<String,String> files){
  m_fileList.resize(files.size(),2);
  m_files=files;
  int i=0;
  for (  Map.Entry<String,String> file : files.entrySet()) {
    CheckBox fileCheckBox=new CheckBox();
    fileCheckBox.setVisible(m_editionMode);
    m_fileList.setWidget(i,0,fileCheckBox);
    String webappContext=HTMLUtil.getWebContext();
    String htmlLink=""String_Node_Str"" + webappContext + ""String_Node_Str""+ file.getValue()+ ""String_Node_Str""+ file.getKey()+ ""String_Node_Str"";
    m_fileList.setHTML(i,1,htmlLink);
    i++;
  }
}","public void setFiles(Map<String,String> files){
  m_fileList.resize(files.size(),2);
  m_files=files;
  int i=0;
  for (  Map.Entry<String,String> file : files.entrySet()) {
    CheckBox fileCheckBox=new CheckBox();
    fileCheckBox.setVisible(m_editionMode);
    m_fileList.setWidget(i,0,fileCheckBox);
    String webappContext=HTMLUtil.getWebContext();
    String htmlLink=""String_Node_Str"" + (webappContext == null ? ""String_Node_Str"" : webappContext + ""String_Node_Str"") + ""String_Node_Str""+ file.getValue()+ ""String_Node_Str""+ file.getKey()+ ""String_Node_Str"";
    m_fileList.setHTML(i,1,htmlLink);
    i++;
  }
}"
86097,"public static String getWebContext(){
  String moduleBaseURL=GWT.getModuleBaseURL();
  String moduleName=GWT.getModuleName();
  String webContext=moduleBaseURL.split(""String_Node_Str"")[3];
  if (webContext.equals(moduleName)) {
    return ""String_Node_Str"";
  }
 else {
    return webContext;
  }
}","public static String getWebContext(){
  String moduleBaseURL=GWT.getModuleBaseURL();
  String moduleName=GWT.getModuleName();
  String webContext=moduleBaseURL.split(""String_Node_Str"")[3];
  if (webContext.equals(moduleName)) {
    return null;
  }
 else {
    return webContext;
  }
}"
86098,"public void init(ExplorerPage mainPage){
  put(""String_Node_Str"",new CheckOutCommand(mainPage));
  put(""String_Node_Str"",new CheckInCommand(mainPage));
  put(""String_Node_Str"",new UndoCheckOutCommand(mainPage));
  put(""String_Node_Str"",new DeleteElementCommand(mainPage));
  put(""String_Node_Str"",new CreateFolderCommand(mainPage));
  put(""String_Node_Str"",new BackCommand(mainPage));
  put(""String_Node_Str"",new CreateMDocCommand(mainPage));
  put(""String_Node_Str"",new CreateMDocTemplateCommand(mainPage));
  put(""String_Node_Str"",new UpdateMDocTemplateCommand(mainPage));
  put(""String_Node_Str"",new CreateVersionCommand(mainPage));
  put(""String_Node_Str"",new DeleteDocFileCommand(mainPage));
  put(""String_Node_Str"",new DeleteTemplateFileCommand(mainPage));
  put(""String_Node_Str"",new UploadDocFileCommand(mainPage));
  put(""String_Node_Str"",new UploadTemplateFileCommand(mainPage));
  put(""String_Node_Str"",new UploadCompleteDocFileCommand(mainPage));
  put(""String_Node_Str"",new UploadCompleteTemplateFileCommand(mainPage));
  put(""String_Node_Str"",new EditElementCommand(mainPage));
  put(""String_Node_Str"",new IterationSubscriptionCommand(mainPage));
  put(""String_Node_Str"",new StateSubscriptionCommand(mainPage));
  put(""String_Node_Str"",new SaveTagsCommand(mainPage));
  put(""String_Node_Str"",new SaveWorkflowModelCommand(mainPage));
  put(""String_Node_Str"",new SearchCommand(mainPage));
  put(""String_Node_Str"",new MoveMDocCommand(mainPage));
  put(""String_Node_Str"",new ShowDocumentIterationCommand(mainPage));
  put(""String_Node_Str"",new ShowCreateVersionPanelCommand(mainPage));
}","public void init(ExplorerPage mainPage){
  put(""String_Node_Str"",new CheckOutCommand(mainPage));
  put(""String_Node_Str"",new CheckInCommand(mainPage));
  put(""String_Node_Str"",new UndoCheckOutCommand(mainPage));
  put(""String_Node_Str"",new DeleteElementCommand(mainPage));
  put(""String_Node_Str"",new CreateFolderCommand(mainPage));
  put(""String_Node_Str"",new BackCommand(mainPage));
  put(""String_Node_Str"",new CreateMDocCommand(mainPage));
  put(""String_Node_Str"",new CreateMDocTemplateCommand(mainPage));
  put(""String_Node_Str"",new UpdateMDocTemplateCommand(mainPage));
  put(""String_Node_Str"",new CreateVersionCommand(mainPage));
  put(""String_Node_Str"",new DeleteDocFileCommand(mainPage));
  put(""String_Node_Str"",new DeleteTemplateFileCommand(mainPage));
  put(""String_Node_Str"",new UploadDocFileCommand(mainPage));
  put(""String_Node_Str"",new UploadTemplateFileCommand(mainPage));
  put(""String_Node_Str"",new UploadCompleteDocFileCommand(mainPage));
  put(""String_Node_Str"",new UploadCompleteTemplateFileCommand(mainPage));
  put(""String_Node_Str"",new EditElementCommand(mainPage));
  put(""String_Node_Str"",new IterationSubscriptionCommand(mainPage));
  put(""String_Node_Str"",new StateSubscriptionCommand(mainPage));
  put(""String_Node_Str"",new SaveTagsCommand(mainPage));
  put(""String_Node_Str"",new SaveWorkflowModelCommand(mainPage));
  put(""String_Node_Str"",new SearchCommand(mainPage));
  put(""String_Node_Str"",new MoveMDocCommand(mainPage));
  put(""String_Node_Str"",new ShowDocumentIterationCommand(mainPage));
  put(""String_Node_Str"",new ShowCreateVersionPanelCommand(mainPage));
  put(""String_Node_Str"",new ApprouveTaskCommand(mainPage));
  put(""String_Node_Str"",new RejectTaskCommand(mainPage));
}"
86099,"public void setWorkflow(WorkflowDTO wk,String visitor){
  m_workflowPanel.setWorkflow(wk,visitor);
}","public void setWorkflow(WorkflowDTO wk){
  m_workflowPanel.setWorkflow(wk);
}"
86100,"public DocMainPanel(){
  createLayout();
}","public DocMainPanel(final Map<String,Action> cmds){
  createLayout();
  m_workflowPanel.setApproveAction(cmds.get(""String_Node_Str""));
  m_workflowPanel.setRejectAction(cmds.get(""String_Node_Str""));
}"
86101,"public void setMDoc(final MasterDocumentDTO mdoc,int it){
  m_mainPanel.setMDocAuthor(mdoc.getAuthor().toString());
  int iteration=0;
  String revision=""String_Node_Str"";
  if (it == mdoc.getIterations().size() - 1) {
    if (mdoc.getLastIteration() != null) {
      iteration=mdoc.getLastIteration().getIteration();
      revision=mdoc.getLastIteration().getRevisionNote();
    }
  }
 else {
    iteration=it + 1;
    revision=mdoc.getIterations().get(it).getRevisionNote();
  }
  String webappContext=""String_Node_Str"";
  String htmlLink=""String_Node_Str"" + webappContext + ""String_Node_Str""+ mdoc.getWorkspaceId()+ ""String_Node_Str""+ mdoc.getId()+ ""String_Node_Str""+ mdoc.getVersion()+ ""String_Node_Str""+ i18n.permaLink()+ ""String_Node_Str"";
  m_mainPanel.setPermaLink(htmlLink);
  m_mainPanel.setDocID(mdoc.getId() + ""String_Node_Str"" + mdoc.getVersion()+ ""String_Node_Str""+ iteration);
  m_mainPanel.setCreationDate(mdoc.getCreationDate());
  m_mainPanel.setModificationDate(mdoc.getCheckOutDate());
  m_mainPanel.setCheckOutUser(mdoc.getCheckOutUser());
  m_mainPanel.setMDocType(mdoc.getType());
  m_mainPanel.setMDocTitle(mdoc.getTitle());
  m_mainPanel.setLifeCycleState(mdoc.getLifeCycleState());
  m_mainPanel.setRevisionNote(revision);
  m_mainPanel.setTags(mdoc.getTags() == null ? ""String_Node_Str"" : Arrays.toString(mdoc.getTags()));
  m_iterationNavigator.setIterationsNumber(it,mdoc.getIterations().size() - 1);
  m_iterationNavigator.setVisible(mdoc.getIterations().size() != 1);
  if (mdoc.getWorkflow() != null) {
    AsyncCallback<UserDTO> callback=new AsyncCallback<UserDTO>(){
      public void onFailure(      Throwable caught){
        throw new UnsupportedOperationException(""String_Node_Str"");
      }
      public void onSuccess(      UserDTO result){
        m_mainPanel.setWorkflow(mdoc.getWorkflow(),result.getName());
      }
    }
;
    ServiceLocator.getInstance().getExplorerService().whoAmI(mdoc.getWorkspaceId(),callback);
  }
}","public void setMDoc(final MasterDocumentDTO mdoc,int it){
  m_mainPanel.setMDocAuthor(mdoc.getAuthor().toString());
  int iteration=0;
  String revision=""String_Node_Str"";
  if (it == mdoc.getIterations().size() - 1) {
    if (mdoc.getLastIteration() != null) {
      iteration=mdoc.getLastIteration().getIteration();
      revision=mdoc.getLastIteration().getRevisionNote();
    }
  }
 else {
    iteration=it + 1;
    revision=mdoc.getIterations().get(it).getRevisionNote();
  }
  String webappContext=""String_Node_Str"";
  String htmlLink=""String_Node_Str"" + webappContext + ""String_Node_Str""+ mdoc.getWorkspaceId()+ ""String_Node_Str""+ mdoc.getId()+ ""String_Node_Str""+ mdoc.getVersion()+ ""String_Node_Str""+ i18n.permaLink()+ ""String_Node_Str"";
  m_mainPanel.setPermaLink(htmlLink);
  m_mainPanel.setDocID(mdoc.getId() + ""String_Node_Str"" + mdoc.getVersion()+ ""String_Node_Str""+ iteration);
  m_mainPanel.setCreationDate(mdoc.getCreationDate());
  m_mainPanel.setModificationDate(mdoc.getCheckOutDate());
  m_mainPanel.setCheckOutUser(mdoc.getCheckOutUser());
  m_mainPanel.setMDocType(mdoc.getType());
  m_mainPanel.setMDocTitle(mdoc.getTitle());
  m_mainPanel.setLifeCycleState(mdoc.getLifeCycleState());
  m_mainPanel.setRevisionNote(revision);
  m_mainPanel.setTags(mdoc.getTags() == null ? ""String_Node_Str"" : Arrays.toString(mdoc.getTags()));
  m_iterationNavigator.setIterationsNumber(it,mdoc.getIterations().size() - 1);
  m_iterationNavigator.setVisible(mdoc.getIterations().size() != 1);
  if (mdoc.getWorkflow() != null) {
    m_mainPanel.setWorkflow(mdoc.getWorkflow());
  }
}"
86102,"public DocPanel(final Map<String,Action> cmds){
  FlexCellFormatter cellFormatter=getFlexCellFormatter();
  m_filesPanel=new FilesPanel();
  m_attributesPanel=new InstanceAttributesPanel();
  m_linksPanel=new LinksPanel();
  m_iterationNavigator=new IterationNavigator(cmds.get(""String_Node_Str""));
  m_filesPanel.injectDeleteAction(new ClickHandler(){
    public void onClick(    ClickEvent event){
      cmds.get(""String_Node_Str"").execute(m_filesPanel.getSelectedFiles());
    }
  }
);
  m_filesPanel.injectUploadAction(new ClickHandler(){
    public void onClick(    ClickEvent event){
      cmds.get(""String_Node_Str"").execute();
    }
  }
);
  m_filesPanel.injectFormHandler(new FormPanel.SubmitCompleteHandler(){
    public void onSubmitComplete(    SubmitCompleteEvent event){
      cmds.get(""String_Node_Str"").execute();
    }
  }
);
  m_mainPanel=new DocMainPanel();
  HorizontalPanel buttonsPanel=new HorizontalPanel();
  buttonsPanel.setSpacing(5);
  m_backAction=new Label(i18n.btnBack());
  m_backAction.setStyleName(""String_Node_Str"");
  m_backAction.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      cmds.get(""String_Node_Str"").execute();
    }
  }
);
  m_okBtn=new Button(i18n.btnSave());
  buttonsPanel.add(m_backAction);
  buttonsPanel.add(m_okBtn);
  m_okBtn.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      List<InstanceAttributeDTO> attributes=m_attributesPanel.getAttributes();
      DocumentDTO[] links=m_linksPanel.getLinks();
      cmds.get(""String_Node_Str"").execute(m_mainPanel.getRevisionNote(),attributes.toArray(new InstanceAttributeDTO[attributes.size()]),links);
    }
  }
);
  setWidget(0,0,m_mainPanel);
  setWidget(0,1,m_filesPanel);
  setWidget(1,0,m_attributesPanel);
  setWidget(1,1,m_linksPanel);
  setWidget(2,0,m_iterationNavigator);
  setWidget(3,0,buttonsPanel);
  cellFormatter.setColSpan(2,0,2);
  cellFormatter.setHorizontalAlignment(2,0,HasHorizontalAlignment.ALIGN_CENTER);
  cellFormatter.setVerticalAlignment(0,0,HasVerticalAlignment.ALIGN_TOP);
  cellFormatter.setVerticalAlignment(0,1,HasVerticalAlignment.ALIGN_TOP);
  cellFormatter.setVerticalAlignment(1,0,HasVerticalAlignment.ALIGN_TOP);
  cellFormatter.setVerticalAlignment(1,1,HasVerticalAlignment.ALIGN_TOP);
}","public DocPanel(final Map<String,Action> cmds){
  FlexCellFormatter cellFormatter=getFlexCellFormatter();
  m_filesPanel=new FilesPanel();
  m_attributesPanel=new InstanceAttributesPanel();
  m_linksPanel=new LinksPanel();
  m_iterationNavigator=new IterationNavigator(cmds.get(""String_Node_Str""));
  m_filesPanel.injectDeleteAction(new ClickHandler(){
    public void onClick(    ClickEvent event){
      cmds.get(""String_Node_Str"").execute(m_filesPanel.getSelectedFiles());
    }
  }
);
  m_filesPanel.injectUploadAction(new ClickHandler(){
    public void onClick(    ClickEvent event){
      cmds.get(""String_Node_Str"").execute();
    }
  }
);
  m_filesPanel.injectFormHandler(new FormPanel.SubmitCompleteHandler(){
    public void onSubmitComplete(    SubmitCompleteEvent event){
      cmds.get(""String_Node_Str"").execute();
    }
  }
);
  m_mainPanel=new DocMainPanel(cmds);
  HorizontalPanel buttonsPanel=new HorizontalPanel();
  buttonsPanel.setSpacing(5);
  m_backAction=new Label(i18n.btnBack());
  m_backAction.setStyleName(""String_Node_Str"");
  m_backAction.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      cmds.get(""String_Node_Str"").execute();
    }
  }
);
  m_okBtn=new Button(i18n.btnSave());
  buttonsPanel.add(m_backAction);
  buttonsPanel.add(m_okBtn);
  m_okBtn.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      List<InstanceAttributeDTO> attributes=m_attributesPanel.getAttributes();
      DocumentDTO[] links=m_linksPanel.getLinks();
      cmds.get(""String_Node_Str"").execute(m_mainPanel.getRevisionNote(),attributes.toArray(new InstanceAttributeDTO[attributes.size()]),links);
    }
  }
);
  setWidget(0,0,m_mainPanel);
  setWidget(0,1,m_filesPanel);
  setWidget(1,0,m_attributesPanel);
  setWidget(1,1,m_linksPanel);
  setWidget(2,0,m_iterationNavigator);
  setWidget(3,0,buttonsPanel);
  cellFormatter.setColSpan(2,0,2);
  cellFormatter.setHorizontalAlignment(2,0,HasHorizontalAlignment.ALIGN_CENTER);
  cellFormatter.setVerticalAlignment(0,0,HasVerticalAlignment.ALIGN_TOP);
  cellFormatter.setVerticalAlignment(0,1,HasVerticalAlignment.ALIGN_TOP);
  cellFormatter.setVerticalAlignment(1,0,HasVerticalAlignment.ALIGN_TOP);
  cellFormatter.setVerticalAlignment(1,1,HasVerticalAlignment.ALIGN_TOP);
}"
86103,"/** 
 * Gets the type associated with this event.
 * @return returns the handler type
 */
public static Type<PageHandler> getType(){
  if (TYPE == null) {
    TYPE=new Type<PageHandler>();
  }
  return TYPE;
}","/** 
 * Gets the type associated with this event.
 * @return returns the handler type
 */
@SuppressWarnings(value=""String_Node_Str"") public static Type<PageHandler> getType(){
  if (TYPE == null) {
    TYPE=new Type<PageHandler>();
  }
  return TYPE;
}"
86104,"public void onMouseMove(MouseMoveEvent event){
  tooltipPanel.setPopupPosition(event.getClientX() + 10,event.getClientY() + 10);
  if (!tooltipPanel.isShowing()) {
    tooltipPanel.show();
  }
}","public void onMouseMove(MouseMoveEvent event){
  if (!tooltipPanel.isShowing()) {
    tooltipPanel.showRelativeTo(this);
  }
}"
86105,"void dataReady(ExplorerServiceResponse response){
  currentModel=currentBackend.getTableModel();
  numberOfPages=response.getTotalSize() / pageSize + 1;
  currentPage=response.getChunckOffset() / pageSize;
  PageManagerEvent.fire(this,currentPage,numberOfPages,response.getChunckOffset() + 1,response.getChunckOffset() + response.getData().length,response.getTotalSize());
}","void dataReady(ExplorerServiceResponse response){
  currentModel=currentBackend.getTableModel();
  if (response.getTotalSize() % pageSize != 0) {
    numberOfPages=response.getTotalSize() / pageSize + 1;
  }
 else {
    numberOfPages=response.getTotalSize() / pageSize;
  }
  currentPage=response.getChunckOffset() / pageSize;
  PageManagerEvent.fire(this,currentPage,numberOfPages,response.getChunckOffset() + 1,response.getChunckOffset() + response.getData().length,response.getTotalSize());
}"
86106,"public void execute(Object... userObject){
  AsyncCallback<MasterDocumentDTO[]> callback=new AsyncCallback<MasterDocumentDTO[]>(){
    public void onFailure(    Throwable caught){
      HTMLUtil.showError(caught.getMessage());
    }
    public void onSuccess(    MasterDocumentDTO[] result){
      m_mainPage.showSearchResult(result);
    }
  }
;
  String workspaceId=(String)userObject[0];
  String mdocId=(String)userObject[1];
  String title=(String)userObject[2];
  String version=(String)userObject[3];
  String author=(String)userObject[4];
  String type=(String)userObject[5];
  Date fromDate=(Date)userObject[6];
  Date toDate=(Date)userObject[7];
  InstanceAttributeDTO[] attributes=(InstanceAttributeDTO[])userObject[8];
  String[] tags=(String[])userObject[9];
  String content=(String)userObject[10];
  ServiceLocator.getInstance().getExplorerService().searchMDocs(workspaceId,mdocId,title,version,author,type,fromDate,toDate,attributes,tags,content,callback);
}","public void execute(Object... userObject){
  String workspaceId=(String)userObject[0];
  String mdocId=(String)userObject[1];
  String title=(String)userObject[2];
  String version=(String)userObject[3];
  String author=(String)userObject[4];
  String type=(String)userObject[5];
  Date fromDate=(Date)userObject[6];
  Date toDate=(Date)userObject[7];
  InstanceAttributeDTO[] attributes=(InstanceAttributeDTO[])userObject[8];
  String[] tags=(String[])userObject[9];
  String content=(String)userObject[10];
  m_mainPage.showSearchResult(new MDocSearchBackend(m_mainPage.getLogin(),workspaceId,mdocId,title,version,author,type,fromDate,toDate,attributes,tags,content));
}"
86107,"public ExplorerPage(String workspaceId,String login){
  m_workspaceId=workspaceId;
  m_login=login;
  m_dndController=new DocDragController(RootPanel.get(),false);
  m_dndController.setBehaviorDragProxy(true);
  ExplorerConstants.init(workspaceId);
  Window.addResizeHandler(this);
}","public ExplorerPage(String workspaceId,String login){
  m_workspaceId=workspaceId;
  m_login=login;
  m_dndController=new DocDragController(RootPanel.get(),false);
  m_dndController.setBehaviorDragProxy(true);
  ExplorerConstants.init(workspaceId);
  Window.addResizeHandler(this);
  pageManager=new PageManager();
}"
86108,"public void init(Map<String,Action> cmds){
  setWidth(""String_Node_Str"");
  m_createFolderPanel=new CreateFolderPanel(cmds);
  m_createMDocPanel=new CreateMDocPanel(cmds);
  m_createVersionPanel=new CreateVersionPanel(cmds);
  m_mdocTemplatePanel=new MDocTemplatePanel(cmds);
  m_docPanel=new DocPanel(cmds);
  m_wfEditor=new WorkflowModelEditor(cmds);
  m_iconFactory=new IconFactory(cmds);
  m_tableProfiles=new ExplorerTableProfileCollection(m_iconFactory);
  m_folderTree=new FolderTree(cmds,m_workspaceId,m_login,m_dndController);
  m_elementTable=new TableWidget(m_dndController);
  m_elementTable.addTableClickHandler(new TableClickHandler(){
    public void onClick(    TableClickEvent event){
      TableModel model=m_elementTable.getTableModel();
      if (model instanceof MDocTableModel) {
        m_lastOpenedMDoc=((MDocTableModel)model).getValueAt(event.getTableModelIndex().getRow());
        showEditDocPanel();
      }
 else       if (model instanceof MDocTemplateTableModel) {
        m_lastOpenedMDocTemplate=((MDocTemplateTableModel)model).getValueAt(event.getTableModelIndex().getRow());
        showEditMDocTemplatePanel();
      }
 else       if (model instanceof WorkflowModelTableModel) {
        m_lastOpenedWorkflowModel=((WorkflowModelTableModel)model).getValueAt(event.getTableModelIndex().getRow());
        showEditWorkflowModelPanel();
      }
    }
  }
);
  m_dndController.setTable(m_elementTable);
  m_elementTable.setStyleName(""String_Node_Str"");
  m_menuDocumentBarTop=new ExplorerDocumentMenuBar(cmds,this,false);
  m_menuDocumentBarBottom=new ExplorerDocumentMenuBar(cmds,this,true);
  m_menuBarTop=new ExplorerMenuBar(cmds,this,false);
  m_menuBarBottom=new ExplorerMenuBar(cmds,this,true);
  m_searchPanel=new SearchPanel(cmds,this);
  m_completeSearchPanel=new CompleteSearchPanel(cmds,this);
  m_completeSearchPanel.setVisible(false);
  m_folderTree.addSelectionHandler(new SelectionHandler<TreeItem>(){
    public void onSelection(    SelectionEvent<TreeItem> event){
      if (!m_elementTable.isAttached()) {
        showTablePanel();
      }
      refreshElementTable(event.getSelectedItem());
    }
  }
);
  VerticalPanel northPanel=new VerticalPanel();
  northPanel.setHorizontalAlignment(ALIGN_RIGHT);
  northPanel.setWidth(""String_Node_Str"");
  northPanel.add(m_searchPanel);
  northPanel.add(m_completeSearchPanel);
  add(northPanel,DockPanel.NORTH);
  setCellHorizontalAlignment(northPanel,ALIGN_RIGHT);
  VerticalPanel menuPanel=new VerticalPanel();
  m_group=new TabMenuGroup();
  TabMenu newDocTab=new TabMenu(i18n.actionNewDocument(),m_group);
  newDocTab.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      showCreateMDocPanel();
    }
  }
);
  TabMenu newFolderTab=new TabMenu(i18n.actionNewFolder(),m_group);
  newFolderTab.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      showCreateFolderPanel();
    }
  }
);
  TabMenu newTemplateTab=new TabMenu(i18n.actionNewTemplate(),m_group);
  newTemplateTab.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      showCreateMDocTemplatePanel();
    }
  }
);
  TabMenu newWorkflowTab=new TabMenu(i18n.actionNewWorkflow(),m_group);
  newWorkflowTab.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      m_lastOpenedWorkflowModel=null;
      showCreateWorkflowModelPanel();
    }
  }
);
  Label emptySpace=new Label();
  menuPanel.add(emptySpace);
  menuPanel.add(newDocTab);
  menuPanel.add(newFolderTab);
  menuPanel.add(newTemplateTab);
  menuPanel.add(newWorkflowTab);
  menuPanel.setCellHeight(emptySpace,""String_Node_Str"");
  menuPanel.setCellHorizontalAlignment(newDocTab,ALIGN_RIGHT);
  menuPanel.setCellHorizontalAlignment(newFolderTab,ALIGN_RIGHT);
  menuPanel.setCellHorizontalAlignment(newTemplateTab,ALIGN_RIGHT);
  menuPanel.setCellHorizontalAlignment(newWorkflowTab,ALIGN_RIGHT);
  ScrollPanel folderScroll=new ScrollPanel(m_folderTree);
  folderScroll.setSize(""String_Node_Str"",""String_Node_Str"");
  DecoratorPanel folderTreeDecPanel=new DecoratorPanel();
  folderTreeDecPanel.setWidget(folderScroll);
  folderTreeDecPanel.addStyleName(""String_Node_Str"");
  menuPanel.add(folderTreeDecPanel);
  menuPanel.setWidth(""String_Node_Str"");
  menuPanel.setCellHorizontalAlignment(m_folderTree,ALIGN_LEFT);
  add(menuPanel,WEST);
  setCellHorizontalAlignment(menuPanel,ALIGN_RIGHT);
  setCellWidth(menuPanel,""String_Node_Str"");
  inputPanel=new SimplePanel();
  showTablePanel();
  inputPanel.setWidth(""String_Node_Str"");
  elementTableDecPanel=new DecoratorPanel();
  elementTableDecPanel.addStyleName(""String_Node_Str"");
  elementTableDecPanel.setWidget(inputPanel);
  elementTableDecPanel.setWidth(""String_Node_Str"");
  add(elementTableDecPanel,CENTER);
  setCellHorizontalAlignment(elementTableDecPanel,ALIGN_LEFT);
  setCellWidth(elementTableDecPanel,""String_Node_Str"");
  fetchMDocsByFolder(m_workspaceId);
  m_createMDocPanel.getTemplateListBox().addChangeHandler(new ChangeHandler(){
    public void onChange(    ChangeEvent event){
      fetchMDocId(m_workspaceId,m_createMDocPanel.getTemplateId());
    }
  }
);
}","public void init(Map<String,Action> cmds){
  setWidth(""String_Node_Str"");
  m_createFolderPanel=new CreateFolderPanel(cmds);
  m_createMDocPanel=new CreateMDocPanel(cmds);
  m_createVersionPanel=new CreateVersionPanel(cmds);
  m_mdocTemplatePanel=new MDocTemplatePanel(cmds);
  m_docPanel=new DocPanel(cmds);
  m_wfEditor=new WorkflowModelEditor(cmds);
  m_iconFactory=new IconFactory(cmds);
  m_tableProfiles=new ExplorerTableProfileCollection(m_iconFactory);
  m_folderTree=new FolderTree(cmds,m_workspaceId,m_login,m_dndController);
  m_menuDocumentBarTop=new ExplorerDocumentMenuBar(cmds,this,false);
  TableNavigator tmp1=new TableNavigator(pageManager);
  pageManager.addPageHandler(tmp1);
  m_menuDocumentBarTop.addExtension(tmp1);
  m_menuDocumentBarBottom=new ExplorerDocumentMenuBar(cmds,this,true);
  TableNavigator tmp2=new TableNavigator(pageManager);
  m_menuDocumentBarBottom.addExtension(tmp2);
  pageManager.addPageHandler(tmp2);
  m_menuBarTop=new ExplorerMenuBar(cmds,this,false);
  TableNavigator tmp3=new TableNavigator(pageManager);
  pageManager.addPageHandler(tmp3);
  m_menuBarTop.addExtension(tmp3);
  m_menuBarBottom=new ExplorerMenuBar(cmds,this,true);
  TableNavigator tmp4=new TableNavigator(pageManager);
  pageManager.addPageHandler(tmp4);
  m_menuBarBottom.addExtension(tmp4);
  m_elementTable=new ExplorerTable(m_menuBarTop,m_menuBarBottom,m_menuDocumentBarTop,m_menuDocumentBarBottom,m_dndController);
  m_elementTable.addTableClickHandler(new TableClickHandler(){
    public void onClick(    TableClickEvent event){
      TableModel model=m_elementTable.getTableModel();
      if (model instanceof MDocTableModel) {
        m_lastOpenedMDoc=((MDocTableModel)model).getValueAt(event.getTableModelIndex().getRow());
        showEditDocPanel();
      }
 else       if (model instanceof MDocTemplateTableModel) {
        m_lastOpenedMDocTemplate=((MDocTemplateTableModel)model).getValueAt(event.getTableModelIndex().getRow());
        showEditMDocTemplatePanel();
      }
 else       if (model instanceof WorkflowModelTableModel) {
        m_lastOpenedWorkflowModel=((WorkflowModelTableModel)model).getValueAt(event.getTableModelIndex().getRow());
        showEditWorkflowModelPanel();
      }
    }
  }
);
  m_dndController.setTable(m_elementTable.getInnerTable());
  m_elementTable.getInnerTable().setStyleName(""String_Node_Str"");
  m_elementTable.setWidth(""String_Node_Str"");
  m_searchPanel=new SearchPanel(cmds,this);
  m_completeSearchPanel=new CompleteSearchPanel(cmds,this);
  m_completeSearchPanel.setVisible(false);
  m_folderTree.addSelectionHandler(new SelectionHandler<TreeItem>(){
    public void onSelection(    SelectionEvent<TreeItem> event){
      if (!m_elementTable.isAttached()) {
        showTablePanel();
      }
      refreshElementTable(event.getSelectedItem());
    }
  }
);
  VerticalPanel northPanel=new VerticalPanel();
  northPanel.setHorizontalAlignment(ALIGN_RIGHT);
  northPanel.setWidth(""String_Node_Str"");
  northPanel.add(m_searchPanel);
  northPanel.add(m_completeSearchPanel);
  add(northPanel,DockPanel.NORTH);
  setCellHorizontalAlignment(northPanel,ALIGN_RIGHT);
  VerticalPanel menuPanel=new VerticalPanel();
  m_group=new TabMenuGroup();
  TabMenu newDocTab=new TabMenu(i18n.actionNewDocument(),m_group);
  newDocTab.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      showCreateMDocPanel();
    }
  }
);
  TabMenu newFolderTab=new TabMenu(i18n.actionNewFolder(),m_group);
  newFolderTab.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      showCreateFolderPanel();
    }
  }
);
  TabMenu newTemplateTab=new TabMenu(i18n.actionNewTemplate(),m_group);
  newTemplateTab.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      showCreateMDocTemplatePanel();
    }
  }
);
  TabMenu newWorkflowTab=new TabMenu(i18n.actionNewWorkflow(),m_group);
  newWorkflowTab.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      m_lastOpenedWorkflowModel=null;
      showCreateWorkflowModelPanel();
    }
  }
);
  Label emptySpace=new Label();
  menuPanel.add(emptySpace);
  menuPanel.add(newDocTab);
  menuPanel.add(newFolderTab);
  menuPanel.add(newTemplateTab);
  menuPanel.add(newWorkflowTab);
  menuPanel.setCellHeight(emptySpace,""String_Node_Str"");
  menuPanel.setCellHorizontalAlignment(newDocTab,ALIGN_RIGHT);
  menuPanel.setCellHorizontalAlignment(newFolderTab,ALIGN_RIGHT);
  menuPanel.setCellHorizontalAlignment(newTemplateTab,ALIGN_RIGHT);
  menuPanel.setCellHorizontalAlignment(newWorkflowTab,ALIGN_RIGHT);
  ScrollPanel folderScroll=new ScrollPanel(m_folderTree);
  folderScroll.setSize(""String_Node_Str"",""String_Node_Str"");
  DecoratorPanel folderTreeDecPanel=new DecoratorPanel();
  folderTreeDecPanel.setWidget(folderScroll);
  folderTreeDecPanel.addStyleName(""String_Node_Str"");
  menuPanel.add(folderTreeDecPanel);
  menuPanel.setWidth(""String_Node_Str"");
  menuPanel.setCellHorizontalAlignment(m_folderTree,ALIGN_LEFT);
  add(menuPanel,WEST);
  setCellHorizontalAlignment(menuPanel,ALIGN_RIGHT);
  setCellWidth(menuPanel,""String_Node_Str"");
  inputPanel=new SimplePanel();
  showTablePanel();
  inputPanel.setWidth(""String_Node_Str"");
  elementTableDecPanel=new DecoratorPanel();
  elementTableDecPanel.addStyleName(""String_Node_Str"");
  elementTableDecPanel.setWidget(inputPanel);
  elementTableDecPanel.setWidth(""String_Node_Str"");
  add(elementTableDecPanel,CENTER);
  setCellHorizontalAlignment(elementTableDecPanel,ALIGN_LEFT);
  setCellWidth(elementTableDecPanel,""String_Node_Str"");
  fetchMDocsByFolder(m_workspaceId);
  m_createMDocPanel.getTemplateListBox().addChangeHandler(new ChangeHandler(){
    public void onChange(    ChangeEvent event){
      fetchMDocId(m_workspaceId,m_createMDocPanel.getTemplateId());
    }
  }
);
  pageManager.addPageHandler(this);
}"
86109,"public void showSearchResult(MasterDocumentDTO[] result){
  inputPanel.clear();
  MDocTableModel source=new MDocTableModel(result,m_login,true);
  m_elementTable.setModel(source,m_tableProfiles.getProfile(""String_Node_Str""));
  m_menuDocumentBarBottom.setStyleName(""String_Node_Str"");
  m_menuDocumentBarTop.setStyleName(""String_Node_Str"");
  elementTableDecPanel.addStyleName(""String_Node_Str"");
  showTablePanel(false);
}","public void showSearchResult(PageManagerBackend backend){
  inputPanel.clear();
  desiredProfile=m_tableProfiles.getProfile(""String_Node_Str"");
  elementTableDecPanel.addStyleName(""String_Node_Str"");
  pageManager.setPageManagerBackend(backend);
}"
86110,"private void fetchCheckedOutMDocs(String workspaceId){
  AsyncCallback<MasterDocumentDTO[]> callback=new AsyncCallback<MasterDocumentDTO[]>(){
    public void onSuccess(    MasterDocumentDTO[] mdocs){
      MDocTableModel model=new MDocTableModel(mdocs,m_login,true);
      m_elementTable.setModel(model);
      showTablePanel();
    }
    public void onFailure(    Throwable caught){
      HTMLUtil.showError(caught.getMessage());
    }
  }
;
  ServiceLocator.getInstance().getExplorerService().getCheckedOutMDocs(workspaceId,callback);
}","private void fetchCheckedOutMDocs(String workspaceId){
  desiredProfile=m_tableProfiles.getProfile(""String_Node_Str"");
  elementTableDecPanel.removeStyleName(""String_Node_Str"");
  pageManager.setPageManagerBackend(new MDocCheckedOutBackend(m_login,workspaceId));
}"
86111,"private void fetchMDocTemplates(String workspaceId){
  AsyncCallback<MasterDocumentTemplateDTO[]> callback=new AsyncCallback<MasterDocumentTemplateDTO[]>(){
    public void onSuccess(    MasterDocumentTemplateDTO[] templates){
      m_elementTable.setModel(new MDocTemplateTableModel(templates),m_tableProfiles.getProfile(""String_Node_Str""));
      showTablePanel();
    }
    public void onFailure(    Throwable caught){
      HTMLUtil.showError(caught.getMessage());
    }
  }
;
  ServiceLocator.getInstance().getExplorerService().getMDocTemplates(workspaceId,callback);
}","private void fetchMDocTemplates(String workspaceId){
  desiredProfile=m_tableProfiles.getProfile(""String_Node_Str"");
  pageManager.setPageManagerBackend(new MDocTemplateBackend(workspaceId));
}"
86112,"public void showTablePanel(boolean maskSearchComplete){
  if (maskSearchComplete) {
    showBasicSearchPanel();
  }
  inputPanel.clear();
  m_group.unselect();
  VerticalPanel vp=new VerticalPanel();
  vp.setWidth(""String_Node_Str"");
  if (m_elementTable.getTableModel() instanceof MDocTableModel) {
    vp.add(m_menuDocumentBarTop);
    vp.add(m_elementTable);
    vp.add(m_menuDocumentBarBottom);
  }
 else {
    vp.add(m_menuBarTop);
    vp.add(m_elementTable);
    vp.add(m_menuBarBottom);
  }
  inputPanel.setWidget(vp);
}","public void showTablePanel(boolean maskSearchComplete){
  if (maskSearchComplete) {
    showBasicSearchPanel();
  }
  inputPanel.clear();
  m_group.unselect();
  inputPanel.setWidget(m_elementTable);
}"
86113,"private void fetchMDocsByFolder(String completePath){
  AsyncCallback<MasterDocumentDTO[]> callback=new AsyncCallback<MasterDocumentDTO[]>(){
    public void onSuccess(    MasterDocumentDTO[] mdocs){
      MDocTableModel mdocSource=new MDocTableModel(mdocs,m_login,true);
      m_elementTable.setModel(mdocSource,m_tableProfiles.getProfile(""String_Node_Str""));
      showTablePanel();
    }
    public void onFailure(    Throwable caught){
      HTMLUtil.showError(caught.getMessage());
    }
  }
;
  ServiceLocator.getInstance().getExplorerService().findMDocsByFolder(completePath,callback);
}","private void fetchMDocsByFolder(String completePath){
  desiredProfile=m_tableProfiles.getProfile(""String_Node_Str"");
  elementTableDecPanel.removeStyleName(""String_Node_Str"");
  pageManager.setPageManagerBackend(new MDocFolderBackend(completePath,m_login));
}"
86114,"private void fetchMDocsByTag(String workspaceId,String label){
  AsyncCallback<MasterDocumentDTO[]> callback=new AsyncCallback<MasterDocumentDTO[]>(){
    public void onSuccess(    MasterDocumentDTO[] mdocs){
      MDocTableModel mdocSource=new MDocTableModel(mdocs,m_login,true);
      m_elementTable.setModel(mdocSource,m_tableProfiles.getProfile(""String_Node_Str""));
      showTablePanel();
    }
    public void onFailure(    Throwable caught){
      HTMLUtil.showError(caught.getMessage());
    }
  }
;
  ServiceLocator.getInstance().getExplorerService().findMDocsByTag(workspaceId,label,callback);
}","private void fetchMDocsByTag(String workspaceId,String label){
  desiredProfile=m_tableProfiles.getProfile(""String_Node_Str"");
  pageManager.setPageManagerBackend(new MDocTagBackend(m_login,label,workspaceId));
}"
86115,"public void onPageChanged(PageManagerEvent event){
  first.setVisible(event.getCurrentPage() > 0);
  previous.setVisible(event.getCurrentPage() > 0);
  next.setVisible(event.getCurrentPage() < event.getNumberOfPages() - 2);
  last.setVisible(event.getCurrentPage() < event.getNumberOfPages() - 2);
}","public void onPageChanged(PageManagerEvent event){
  first.setVisible(event.getCurrentPage() > 0);
  previous.setVisible(event.getCurrentPage() > 0);
  next.setVisible(event.getCurrentPage() < event.getNumberOfPages() - 1);
  last.setVisible(event.getCurrentPage() < event.getNumberOfPages() - 1);
}"
86116,"public MDocCheckedOutBackend(String login,String workspaceId){
  this.login=login;
  this.workspaceId=workspaceId;
}","public MDocCheckedOutBackend(String login,String workspaceId){
  this.login=login;
  this.workspaceId=workspaceId;
  callback=new InternalCallback();
}"
86117,"public MDocTemplateResponse getMDocTemplates(String workspaceId,int startOffset,int chunkSize) throws ApplicationException {
  MasterDocumentTemplateDTO response[]=getMDocTemplates(workspaceId);
  if (startOffset < response.length) {
    MasterDocumentTemplateDTO chunk[];
    if (startOffset + chunkSize <= response.length) {
      chunk=new MasterDocumentTemplateDTO[chunkSize];
      int j=0;
      for (int i=startOffset; i < startOffset + chunkSize; i++) {
        chunk[j]=response[i];
        j++;
      }
    }
 else {
      chunk=new MasterDocumentTemplateDTO[response.length - startOffset];
      int j=0;
      for (int i=startOffset; i < response.length; i++) {
        chunk[j]=response[i];
        j++;
      }
    }
    MDocTemplateResponse result=new MDocTemplateResponse();
    result.setChunckOffset(startOffset);
    result.setTotalSize(response.length);
    result.setData(chunk);
    return result;
  }
  return null;
}","public MDocTemplateResponse getMDocTemplates(String workspaceId,int startOffset,int chunkSize) throws ApplicationException {
  MasterDocumentTemplateDTO response[]=getMDocTemplates(workspaceId);
  if (startOffset < response.length) {
    MasterDocumentTemplateDTO chunk[];
    if (startOffset + chunkSize <= response.length) {
      chunk=new MasterDocumentTemplateDTO[chunkSize];
      int j=0;
      for (int i=startOffset; i < startOffset + chunkSize; i++) {
        chunk[j]=response[i];
        j++;
      }
    }
 else {
      chunk=new MasterDocumentTemplateDTO[response.length - startOffset];
      int j=0;
      for (int i=startOffset; i < response.length; i++) {
        chunk[j]=response[i];
        j++;
      }
    }
    MDocTemplateResponse result=new MDocTemplateResponse();
    result.setChunckOffset(startOffset);
    result.setTotalSize(response.length);
    result.setData(chunk);
    return result;
  }
  MDocTemplateResponse defaultResponse=new MDocTemplateResponse();
  MasterDocumentTemplateDTO defaultChunk[]=new MasterDocumentTemplateDTO[0];
  defaultResponse.setTotalSize(0);
  defaultResponse.setChunckOffset(0);
  defaultResponse.setData(defaultChunk);
  return defaultResponse;
}"
86118,"public WorkflowResponse getWorkflowModels(String workspaceId,int startOffset,int chunkSize) throws ApplicationException {
  WorkflowModelDTO response[]=getWorkflowModels(workspaceId);
  if (startOffset < response.length) {
    WorkflowModelDTO chunk[];
    if (startOffset + chunkSize <= response.length) {
      chunk=new WorkflowModelDTO[chunkSize];
      int j=0;
      for (int i=startOffset; i < startOffset + chunkSize; i++) {
        chunk[j]=response[i];
        j++;
      }
    }
 else {
      chunk=new WorkflowModelDTO[response.length - startOffset];
      int j=0;
      for (int i=startOffset; i < response.length; i++) {
        chunk[j]=response[i];
        j++;
      }
    }
    WorkflowResponse result=new WorkflowResponse();
    result.setChunckOffset(startOffset);
    result.setTotalSize(response.length);
    result.setData(chunk);
    return result;
  }
  return null;
}","public WorkflowResponse getWorkflowModels(String workspaceId,int startOffset,int chunkSize) throws ApplicationException {
  WorkflowModelDTO response[]=getWorkflowModels(workspaceId);
  if (startOffset < response.length) {
    WorkflowModelDTO chunk[];
    if (startOffset + chunkSize <= response.length) {
      chunk=new WorkflowModelDTO[chunkSize];
      int j=0;
      for (int i=startOffset; i < startOffset + chunkSize; i++) {
        chunk[j]=response[i];
        j++;
      }
    }
 else {
      chunk=new WorkflowModelDTO[response.length - startOffset];
      int j=0;
      for (int i=startOffset; i < response.length; i++) {
        chunk[j]=response[i];
        j++;
      }
    }
    WorkflowResponse result=new WorkflowResponse();
    result.setChunckOffset(startOffset);
    result.setTotalSize(response.length);
    result.setData(chunk);
    return result;
  }
  WorkflowResponse defaultResponse=new WorkflowResponse();
  defaultResponse.setChunckOffset(0);
  defaultResponse.setTotalSize(0);
  WorkflowModelDTO defaultChunk[]=new WorkflowModelDTO[0];
  defaultResponse.setData(defaultChunk);
  return defaultResponse;
}"
86119,"private MDocResponse generateMDocResponse(MasterDocumentDTO response[],int startOffset,int chunkSize){
  if (startOffset < response.length) {
    MasterDocumentDTO chunk[];
    if (startOffset + chunkSize <= response.length) {
      chunk=new MasterDocumentDTO[chunkSize];
      int j=0;
      for (int i=startOffset; i < startOffset + chunkSize; i++) {
        chunk[j]=response[i];
        j++;
      }
    }
 else {
      chunk=new MasterDocumentDTO[response.length - startOffset];
      int j=0;
      for (int i=startOffset; i < response.length; i++) {
        chunk[j]=response[i];
        j++;
      }
    }
    MDocResponse result=new MDocResponse();
    result.setChunckOffset(startOffset);
    result.setTotalSize(response.length);
    result.setData(chunk);
    return result;
  }
  return null;
}","private MDocResponse generateMDocResponse(MasterDocumentDTO response[],int startOffset,int chunkSize){
  if (startOffset < response.length) {
    MasterDocumentDTO chunk[];
    if (startOffset + chunkSize <= response.length) {
      chunk=new MasterDocumentDTO[chunkSize];
      int j=0;
      for (int i=startOffset; i < startOffset + chunkSize; i++) {
        chunk[j]=response[i];
        j++;
      }
    }
 else {
      chunk=new MasterDocumentDTO[response.length - startOffset];
      int j=0;
      for (int i=startOffset; i < response.length; i++) {
        chunk[j]=response[i];
        j++;
      }
    }
    MDocResponse result=new MDocResponse();
    result.setChunckOffset(startOffset);
    result.setTotalSize(response.length);
    result.setData(chunk);
    return result;
  }
  MDocResponse defaultResponse=new MDocResponse();
  defaultResponse.setChunckOffset(0);
  defaultResponse.setTotalSize(0);
  MasterDocumentDTO defaultChunk[]=new MasterDocumentDTO[0];
  defaultResponse.setData(defaultChunk);
  return defaultResponse;
}"
86120,"public void addExtension(Widget w){
  if (!selectionTop) {
    mainPanel.setWidget(0,1,w);
  }
 else {
    mainPanel.setWidget(1,1,w);
  }
}","public void addExtension(Widget w){
  if (!selectionTop) {
    mainPanel.setWidget(0,1,w);
    mainPanel.getCellFormatter().setHorizontalAlignment(0,1,HasHorizontalAlignment.ALIGN_RIGHT);
  }
 else {
    mainPanel.setWidget(1,1,w);
    mainPanel.getCellFormatter().setHorizontalAlignment(1,1,HasHorizontalAlignment.ALIGN_RIGHT);
  }
}"
86121,"public void setSource(TableDataSource source,boolean dragNDrop){
  this.source=source;
  dragNDropEnabled=dragNDrop;
  pagesEntryCount=DEFAULT_ENTRIES_BY_PAGE;
  currentPage=0;
  for (int i=this.getRowCount(); i > 0; i--) {
    this.removeRow(0);
  }
  if (source == null) {
    return;
  }
 else {
    numberOfPages=source.getRowCount() / pagesEntryCount + 1;
  }
  int row=0;
  String[] headers=source.getHeaderRow();
  if (headers != null) {
    int col=0;
    for (; col < headers.length; col++) {
      this.setHTML(row,col + 4,headers[col]);
    }
    this.setText(row,col + 4,""String_Node_Str"");
    this.setText(row,col + 5,""String_Node_Str"");
    this.getRowFormatter().addStyleName(row,headerStyle);
    row++;
  }
  if (source.getRowCount() != 0) {
    int beginning=currentPage * pagesEntryCount;
    int end=pagesEntryCount * (currentPage + 1);
    if (end > source.getRowCount()) {
      end=source.getRowCount();
    }
    for (int i=0; i < source.getRowCount(); i++) {
      final CheckBox selection=new CheckBox();
      selection.setFormValue(i + ""String_Node_Str"");
      selection.addClickHandler(new ClickHandler(){
        public void onClick(        ClickEvent event){
          int row=Integer.parseInt(selection.getFormValue());
          if (selection.getValue()) {
            getRowFormatter().addStyleName(row + 1,selectedStyle);
          }
 else {
            getRowFormatter().removeStyleName(row + 1,selectedStyle);
          }
        }
      }
);
      if (dragNDropEnabled) {
        Image im=new DraggableDocIcon(row);
        dndController.makeDraggable(im,im);
        this.setWidget(row,0,im);
        this.setWidget(row,1,selection);
      }
 else {
        this.setWidget(row,0,selection);
      }
      String[] values=source.getRow(i);
      for (int col=0; col < values.length; col++) {
        if (source.getTooltipForRowColumn(i,col) != null) {
          this.setWidget(row,col + 4,new InteractiveEntry(values[col],source.getTooltipForRowColumn(i,col)));
        }
 else {
          this.setHTML(row,col + 4,values[col]);
        }
      }
      getFlexCellFormatter().setWidth(row,0,""String_Node_Str"");
      getFlexCellFormatter().setWidth(row,1,""String_Node_Str"");
      getFlexCellFormatter().setWidth(row,2,""String_Node_Str"");
      if (dragNDropEnabled) {
        getFlexCellFormatter().setWidth(row,0,""String_Node_Str"");
        getFlexCellFormatter().setWidth(row,3,""String_Node_Str"");
        getFlexCellFormatter().setHorizontalAlignment(row,0,HasHorizontalAlignment.ALIGN_CENTER);
        getFlexCellFormatter().setVerticalAlignment(row,0,HasVerticalAlignment.ALIGN_MIDDLE);
      }
      getRowFormatter().setVisible(row,i >= beginning && i < end);
      row++;
    }
  }
 else {
    Label l=new Label(source.getEmptyCaseMessage());
    this.setWidget(row,0,l);
    getFlexCellFormatter().setColSpan(row,0,getCellCount(0));
    getCellFormatter().setHorizontalAlignment(row,0,HasHorizontalAlignment.ALIGN_CENTER);
  }
  fireEvent();
}","public void setSource(TableDataSource source,boolean dragNDrop){
  this.source=source;
  dragNDropEnabled=dragNDrop;
  pagesEntryCount=DEFAULT_ENTRIES_BY_PAGE;
  currentPage=0;
  for (int i=this.getRowCount(); i > 0; i--) {
    this.removeRow(0);
  }
  if (source == null) {
    return;
  }
 else {
    if (source.getRowCount() % pagesEntryCount != 0) {
      numberOfPages=source.getRowCount() / pagesEntryCount + 1;
    }
 else {
      numberOfPages=source.getRowCount() / pagesEntryCount;
    }
  }
  int row=0;
  String[] headers=source.getHeaderRow();
  if (headers != null) {
    int col=0;
    for (; col < headers.length; col++) {
      this.setHTML(row,col + 4,headers[col]);
    }
    this.setText(row,col + 4,""String_Node_Str"");
    this.setText(row,col + 5,""String_Node_Str"");
    this.getRowFormatter().addStyleName(row,headerStyle);
    row++;
  }
  if (source.getRowCount() != 0) {
    int beginning=currentPage * pagesEntryCount;
    int end=pagesEntryCount * (currentPage + 1);
    if (end > source.getRowCount()) {
      end=source.getRowCount();
    }
    for (int i=0; i < source.getRowCount(); i++) {
      final CheckBox selection=new CheckBox();
      selection.setFormValue(i + ""String_Node_Str"");
      selection.addClickHandler(new ClickHandler(){
        public void onClick(        ClickEvent event){
          int row=Integer.parseInt(selection.getFormValue());
          if (selection.getValue()) {
            getRowFormatter().addStyleName(row + 1,selectedStyle);
          }
 else {
            getRowFormatter().removeStyleName(row + 1,selectedStyle);
          }
        }
      }
);
      if (dragNDropEnabled) {
        Image im=new DraggableDocIcon(row);
        dndController.makeDraggable(im,im);
        this.setWidget(row,0,im);
        this.setWidget(row,1,selection);
      }
 else {
        this.setWidget(row,0,selection);
      }
      String[] values=source.getRow(i);
      for (int col=0; col < values.length; col++) {
        if (source.getTooltipForRowColumn(i,col) != null) {
          this.setWidget(row,col + 4,new InteractiveEntry(values[col],source.getTooltipForRowColumn(i,col)));
        }
 else {
          this.setHTML(row,col + 4,values[col]);
        }
      }
      getFlexCellFormatter().setWidth(row,0,""String_Node_Str"");
      getFlexCellFormatter().setWidth(row,1,""String_Node_Str"");
      getFlexCellFormatter().setWidth(row,2,""String_Node_Str"");
      if (dragNDropEnabled) {
        getFlexCellFormatter().setWidth(row,0,""String_Node_Str"");
        getFlexCellFormatter().setWidth(row,3,""String_Node_Str"");
        getFlexCellFormatter().setHorizontalAlignment(row,0,HasHorizontalAlignment.ALIGN_CENTER);
        getFlexCellFormatter().setVerticalAlignment(row,0,HasVerticalAlignment.ALIGN_MIDDLE);
      }
      getRowFormatter().setVisible(row,i >= beginning && i < end);
      row++;
    }
  }
 else {
    Label l=new Label(source.getEmptyCaseMessage());
    this.setWidget(row,0,l);
    getFlexCellFormatter().setColSpan(row,0,getCellCount(0));
    getCellFormatter().setHorizontalAlignment(row,0,HasHorizontalAlignment.ALIGN_CENTER);
  }
  fireEvent();
}"
86122,"@Override public void requestSuggestions(final Request request,final Callback callback){
  AsyncCallback<MasterDocumentDTO[]> callbackService=new AsyncCallback<MasterDocumentDTO[]>(){
    public void onFailure(    Throwable caught){
      HTMLUtil.showError(caught.getMessage());
    }
    public void onSuccess(    MasterDocumentDTO[] result){
      SortedSet<MasterDocumentDTO> sorted=new TreeSet<MasterDocumentDTO>();
      for (      MasterDocumentDTO mdoc : result) {
        sorted.add(mdoc);
      }
      List<DocOracleSuggestion> responseList=new LinkedList<DocOracleSuggestion>();
      for (      MasterDocumentDTO mdoc : sorted) {
        DocOracleSuggestion suggestion=new DocOracleSuggestionImpl(mdoc);
        responseList.add(suggestion);
      }
      callback.onSuggestionsReady(request,new Response(responseList));
    }
  }
;
  if (request.getQuery().length() >= triggerSize) {
    String realQuery=request.getQuery();
    if (realQuery.endsWith(""String_Node_Str"")) {
      realQuery=realQuery.substring(0,realQuery.length() - 1);
    }
    ServiceLocator.getInstance().getExplorerService().searchMDocs(workspaceId,realQuery,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Date(DEFAULT_FROM_DATE),new Date(),null,null,""String_Node_Str"",callbackService);
  }
 else {
    List<DocOracleSuggestion> responses=new LinkedList<DocOracleSuggestion>();
    callback.onSuggestionsReady(request,new Response(responses));
  }
}","@Override public void requestSuggestions(final Request request,final Callback callback){
  AsyncCallback<MDocResponse> callbackServiceNew=new AsyncCallback<MDocResponse>(){
    public void onFailure(    Throwable caught){
      HTMLUtil.showError(caught.getMessage());
    }
    public void onSuccess(    MDocResponse resultS){
      MasterDocumentDTO[] result=resultS.getData();
      SortedSet<MasterDocumentDTO> sorted=new TreeSet<MasterDocumentDTO>();
      for (      MasterDocumentDTO mdoc : result) {
        sorted.add(mdoc);
      }
      List<DocOracleSuggestion> responseList=new LinkedList<DocOracleSuggestion>();
      for (      MasterDocumentDTO mdoc : sorted) {
        DocOracleSuggestion suggestion=new DocOracleSuggestionImpl(mdoc);
        responseList.add(suggestion);
      }
      callback.onSuggestionsReady(request,new Response(responseList));
    }
  }
;
  if (request.getQuery().length() >= triggerSize) {
    String realQuery=request.getQuery();
    if (realQuery.endsWith(""String_Node_Str"")) {
      realQuery=realQuery.substring(0,realQuery.length() - 1);
    }
    ServiceLocator.getInstance().getExplorerService().searchMDocs(workspaceId,realQuery,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",new Date(DEFAULT_FROM_DATE),new Date(),null,null,""String_Node_Str"",0,REQUEST_SIZE,callbackServiceNew);
  }
 else {
    List<DocOracleSuggestion> responses=new LinkedList<DocOracleSuggestion>();
    callback.onSuggestionsReady(request,new Response(responses));
  }
}"
86123,"public DocOracle(){
  triggerSize=DEFAULT_TRIGGER_SIZE;
}","public DocOracle(){
}"
86124,"public void onSuccess(MasterDocumentDTO[] result){
  SortedSet<MasterDocumentDTO> sorted=new TreeSet<MasterDocumentDTO>();
  for (  MasterDocumentDTO mdoc : result) {
    sorted.add(mdoc);
  }
  List<DocOracleSuggestion> responseList=new LinkedList<DocOracleSuggestion>();
  for (  MasterDocumentDTO mdoc : sorted) {
    DocOracleSuggestion suggestion=new DocOracleSuggestionImpl(mdoc);
    responseList.add(suggestion);
  }
  callback.onSuggestionsReady(request,new Response(responseList));
}","public void onSuccess(MDocResponse resultS){
  MasterDocumentDTO[] result=resultS.getData();
  SortedSet<MasterDocumentDTO> sorted=new TreeSet<MasterDocumentDTO>();
  for (  MasterDocumentDTO mdoc : result) {
    sorted.add(mdoc);
  }
  List<DocOracleSuggestion> responseList=new LinkedList<DocOracleSuggestion>();
  for (  MasterDocumentDTO mdoc : sorted) {
    DocOracleSuggestion suggestion=new DocOracleSuggestionImpl(mdoc);
    responseList.add(suggestion);
  }
  callback.onSuggestionsReady(request,new Response(responseList));
}"
86125,"public ExplorerPage(String workspaceId,String login){
  m_workspaceId=workspaceId;
  m_login=login;
  m_dndController=new DocDragController(RootPanel.get(),false);
  m_dndController.setBehaviorDragProxy(true);
  ExplorerConstants.init(workspaceId);
  Window.addResizeHandler(this);
  pageManager=new PageManager();
}","public ExplorerPage(String workspaceId,String login){
  m_workspaceId=workspaceId;
  m_login=login;
  m_dndController=new DocDragController(RootPanel.get(),false);
  m_dndController.setBehaviorDragProxy(true);
  ExplorerConstants.init(workspaceId);
  Window.addResizeHandler(this);
  pageManager=new PageManager();
  pageManager.setPageSize(TABLE_PAGE_SIZE);
}"
86126,"public void onPageChanged(PageManagerEvent event){
  infos.setText(event.getStart() + ""String_Node_Str"" + event.getEnd()+ ""String_Node_Str""+ ServiceLocator.getInstance().getExplorerI18NConstants().ofDocumentsLabel()+ ""String_Node_Str""+ event.getTotal());
  first.setVisible(event.getCurrentPage() > 0);
  previous.setVisible(event.getCurrentPage() > 0);
  next.setVisible(event.getCurrentPage() < event.getNumberOfPages() - 1);
  last.setVisible(event.getCurrentPage() < event.getNumberOfPages() - 1);
  infos.setVisible(event.getNumberOfPages() != 1);
}","public void onPageChanged(PageManagerEvent event){
  infos.setText(event.getStart() + ""String_Node_Str"" + event.getEnd()+ ""String_Node_Str""+ ServiceLocator.getInstance().getExplorerI18NConstants().ofDocumentsLabel()+ ""String_Node_Str""+ event.getTotal());
  first.setVisible(event.getCurrentPage() > 0);
  previous.setVisible(event.getCurrentPage() > 0);
  next.setVisible(event.getCurrentPage() < event.getNumberOfPages() - 1);
  last.setVisible(event.getCurrentPage() < event.getNumberOfPages() - 1);
  infos.setVisible(event.getNumberOfPages() > 1);
}"
86127,"public void showCreateWorkflowModelPanel(){
  if (elementTableDecPanel != null) {
    elementTableDecPanel.removeStyleName(""String_Node_Str"");
  }
  showBasicSearchPanel();
  int spaceAvailable=inputPanel.getOffsetWidth();
  inputPanel.clear();
  inputPanel.setWidget(m_wfEditor);
  m_wfEditor.setWidth(spaceAvailable);
  m_wfEditor.setWorkflowModel(new WorkflowModelModel(m_workspaceId));
}","public void showCreateWorkflowModelPanel(){
  if (elementTableDecPanel != null) {
    elementTableDecPanel.removeStyleName(""String_Node_Str"");
  }
  showBasicSearchPanel();
  int spaceAvailable=inputPanel.getOffsetWidth() - 10;
  inputPanel.clear();
  inputPanel.setWidget(m_wfEditor);
  m_wfEditor.setWidth(spaceAvailable);
  m_wfEditor.setWorkflowModel(new WorkflowModelModel(m_workspaceId));
}"
86128,"@Override public void onChange(ChangeEvent event){
  if (inputField.getText().matches(""String_Node_Str"")) {
    Integer tempValue=new Integer(inputField.getText());
    if (tempValue > minValue && tempValue < maxValue) {
      value=tempValue;
    }
 else {
      value=backupValue;
    }
  }
 else {
    value=backupValue;
  }
  onValueChanged();
}","@Override public void onChange(ChangeEvent event){
  if (inputField.getText().matches(""String_Node_Str"")) {
    Integer tempValue=new Integer(inputField.getText());
    if (tempValue >= minValue && tempValue <= maxValue) {
      value=tempValue;
    }
 else {
      value=backupValue;
    }
  }
 else {
    value=backupValue;
  }
  onValueChanged();
}"
86129,"public void onBlur(BlurEvent event){
  removeStyleName(selectedStyle);
  hasFocus=false;
  int x=event.getNativeEvent().getClientX();
  int y=event.getNativeEvent().getClientY();
  if (x < getOffsetWidth() + getAbsoluteLeft() && x > getAbsoluteLeft() && y < getOffsetHeight() + getAbsoluteTop() && y > getAbsoluteTop()) {
    addStyleName(overStyle);
  }
}","public void onBlur(BlurEvent event){
  removeStyleName(selectedStyle);
  hasFocus=false;
}"
86130,"@RolesAllowed(""String_Node_Str"") public MasterDocument updateDoc(DocumentKey pKey,String pRevisionNote,InstanceAttribute[] pAttributes,DocumentKey[] pLinkKeys) throws WorkspaceNotFoundException, NotAllowedException, MasterDocumentNotFoundException, AccessRightException, UserNotFoundException, UserNotActiveException {
  User user=checkWorkspaceWriteAccess(pKey.getWorkspaceId());
  MasterDocumentDAO mdocDAO=new MasterDocumentDAO(new Locale(user.getLanguage()),em);
  MasterDocument mdoc=mdocDAO.loadMDoc(new MasterDocumentKey(pKey.getWorkspaceId(),pKey.getMasterDocumentId(),pKey.getMasterDocumentVersion()));
  if (mdoc.isCheckedOut() && mdoc.getCheckOutUser().equals(user) && mdoc.getLastIteration().getKey().equals(pKey)) {
    Document doc=mdoc.getLastIteration();
    Set<DocumentToDocumentLink> links=new HashSet<DocumentToDocumentLink>();
    for (    DocumentKey key : pLinkKeys) {
      links.add(new DocumentToDocumentLink(doc,key));
    }
    Set<DocumentToDocumentLink> linksToRemove=new HashSet<DocumentToDocumentLink>(doc.getLinkedDocuments());
    linksToRemove.removeAll(links);
    DocumentToDocumentLinkDAO linkDAO=new DocumentToDocumentLinkDAO(em);
    for (    DocumentToDocumentLink linkToRemove : linksToRemove) {
      linkDAO.removeLink(linkToRemove);
    }
    doc.setInstanceAttributes(Arrays.asList(pAttributes));
    doc.setRevisionNote(pRevisionNote);
    doc.setLinkedDocuments(links);
    return mdoc;
  }
 else {
    throw new NotAllowedException(new Locale(user.getLanguage()),""String_Node_Str"");
  }
}","@RolesAllowed(""String_Node_Str"") public MasterDocument updateDoc(DocumentKey pKey,String pRevisionNote,InstanceAttribute[] pAttributes,DocumentKey[] pLinkKeys) throws WorkspaceNotFoundException, NotAllowedException, MasterDocumentNotFoundException, AccessRightException, UserNotFoundException, UserNotActiveException {
  User user=checkWorkspaceWriteAccess(pKey.getWorkspaceId());
  MasterDocumentDAO mdocDAO=new MasterDocumentDAO(new Locale(user.getLanguage()),em);
  MasterDocument mdoc=mdocDAO.loadMDoc(new MasterDocumentKey(pKey.getWorkspaceId(),pKey.getMasterDocumentId(),pKey.getMasterDocumentVersion()));
  if (mdoc.isCheckedOut() && mdoc.getCheckOutUser().equals(user) && mdoc.getLastIteration().getKey().equals(pKey)) {
    Document doc=mdoc.getLastIteration();
    Set<DocumentToDocumentLink> links=new HashSet<DocumentToDocumentLink>();
    for (    DocumentKey key : pLinkKeys) {
      links.add(new DocumentToDocumentLink(doc,key));
    }
    Set<DocumentToDocumentLink> linksToRemove=new HashSet<DocumentToDocumentLink>(doc.getLinkedDocuments());
    linksToRemove.removeAll(links);
    DocumentToDocumentLinkDAO linkDAO=new DocumentToDocumentLinkDAO(em);
    for (    DocumentToDocumentLink linkToRemove : linksToRemove) {
      linkDAO.removeLink(linkToRemove);
    }
    Map<String,InstanceAttribute> attrs=new HashMap<String,InstanceAttribute>();
    for (    InstanceAttribute attr : pAttributes) {
      attr.setDocument(doc);
      attrs.put(attr.getName(),attr);
    }
    List<String> keysToRemove=new LinkedList<String>();
    for (    Map.Entry<String,InstanceAttribute> entry : doc.getInstanceAttributes().entrySet()) {
      if (!attrs.containsKey(entry.getKey())) {
        keysToRemove.add(entry.getKey());
      }
    }
    for (    String key : keysToRemove) {
      doc.getInstanceAttributes().remove(key);
    }
    for (    InstanceAttribute attr : pAttributes) {
      InstanceAttribute attrToUpdate=doc.getInstanceAttributes().get(attr.getName());
      if (attrToUpdate != null) {
        attrToUpdate.setValue(attr.getValue());
      }
 else {
        attr.setDocument(doc);
        doc.getInstanceAttributes().put(attr.getName(),attr);
      }
    }
    doc.setRevisionNote(pRevisionNote);
    doc.setLinkedDocuments(links);
    return mdoc;
  }
 else {
    throw new NotAllowedException(new Locale(user.getLanguage()),""String_Node_Str"");
  }
}"
86131,"protected void parse_reslist(String type,List<ReservedItem> reservations,Document doc,int offset){
  Elements copytrs=doc.select(""String_Node_Str"");
  doc.setBaseUri(opac_url);
  int trs=copytrs.size();
  if (trs == 1) {
    return;
  }
  assert(trs > 0);
  for (int i=1; i < trs; i++) {
    Element tr=copytrs.get(i);
    ReservedItem item=new ReservedItem();
    if (tr.text().contains(""String_Node_Str"") || tr.children().size() == 1) {
      return;
    }
    item.setTitle(tr.child(1).select(""String_Node_Str"").text().trim());
    try {
      String[] rowsplit1=tr.child(1).html().split(""String_Node_Str"");
      String[] rowsplit2=tr.child(2).html().split(""String_Node_Str"");
      if (rowsplit1.length > 1)       item.setAuthor(rowsplit1[1].trim());
      if (rowsplit2.length > 2)       item.setBranch(rowsplit2[2].trim());
      if (rowsplit2.length > 2)       item.setStatus(rowsplit2[0].trim());
      if (tr.select(""String_Node_Str"").size() == 1) {
        item.setCancelData(type + ""String_Node_Str"" + offset+ ""String_Node_Str""+ tr.select(""String_Node_Str"").attr(""String_Node_Str"").split(""String_Node_Str"")[1]);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    reservations.add(item);
  }
  assert(reservations.size() == trs - 1);
}","protected static void parse_reslist(String type,List<ReservedItem> reservations,Document doc,int offset,JSONObject data){
  Elements copytrs=doc.select(""String_Node_Str"");
  doc.setBaseUri(data.optString(""String_Node_Str""));
  int trs=copytrs.size();
  if (trs == 1) {
    return;
  }
  assert(trs > 0);
  for (int i=1; i < trs; i++) {
    Element tr=copytrs.get(i);
    ReservedItem item=new ReservedItem();
    if (tr.text().contains(""String_Node_Str"") || tr.children().size() == 1) {
      return;
    }
    item.setTitle(tr.child(1).select(""String_Node_Str"").text().trim());
    try {
      String[] rowsplit1=tr.child(1).html().split(""String_Node_Str"");
      String[] rowsplit2=tr.child(2).html().split(""String_Node_Str"");
      if (rowsplit1.length > 1)       item.setAuthor(rowsplit1[1].trim());
      if (rowsplit2.length > 2)       item.setBranch(rowsplit2[2].trim());
      if (rowsplit2.length > 2)       item.setStatus(rowsplit2[0].trim());
      if (tr.select(""String_Node_Str"").size() == 1) {
        item.setCancelData(type + ""String_Node_Str"" + offset+ ""String_Node_Str""+ tr.select(""String_Node_Str"").attr(""String_Node_Str"").split(""String_Node_Str"")[1]);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    reservations.add(item);
  }
  assert(reservations.size() == trs - 1);
}"
86132,"@Override public AccountData account(Account acc) throws IOException, JSONException, OpacErrorException {
  start();
  int resultNum;
  if (!login(acc)) {
    return null;
  }
  String html=httpGet(opac_url + ""String_Node_Str"",ENCODING);
  List<LentItem> medien=new ArrayList<>();
  Document doc=Jsoup.parse(html);
  doc.setBaseUri(opac_url);
  parse_medialist(medien,doc,1,data);
  Map<String,Integer> links=getAccountPageLinks(doc);
  for (  Map.Entry<String,Integer> link : links.entrySet()) {
    html=httpGet(link.getKey(),ENCODING);
    parse_medialist(medien,Jsoup.parse(html),link.getValue(),data);
  }
  if (doc.select(""String_Node_Str"").size() > 0) {
    resultNum=0;
    String rNum=doc.select(""String_Node_Str"").first().text().trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (rNum.length() > 0) {
      resultNum=Integer.parseInt(rNum);
    }
    assert(resultNum == medien.size());
  }
  html=httpGet(opac_url + ""String_Node_Str"",ENCODING);
  List<ReservedItem> reserved=new ArrayList<>();
  doc=Jsoup.parse(html);
  doc.setBaseUri(opac_url);
  parse_reslist(""String_Node_Str"",reserved,doc,1);
  Elements label6=doc.select(""String_Node_Str"");
  links=getAccountPageLinks(doc);
  for (  Map.Entry<String,Integer> link : links.entrySet()) {
    html=httpGet(link.getKey(),ENCODING);
    parse_reslist(""String_Node_Str"",reserved,Jsoup.parse(html),link.getValue());
  }
  html=httpGet(opac_url + ""String_Node_Str"",ENCODING);
  doc=Jsoup.parse(html);
  doc.setBaseUri(opac_url);
  parse_reslist(""String_Node_Str"",reserved,doc,1);
  links=getAccountPageLinks(doc);
  for (  Map.Entry<String,Integer> link : links.entrySet()) {
    html=httpGet(link.getKey(),ENCODING);
    parse_reslist(""String_Node_Str"",reserved,Jsoup.parse(html),link.getValue());
  }
  if (label6.size() > 0 && doc.select(""String_Node_Str"").size() > 0) {
    resultNum=0;
    String rNum=label6.text().trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (rNum.length() > 0) {
      resultNum=Integer.parseInt(rNum);
    }
    rNum=doc.select(""String_Node_Str"").text().trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (rNum.length() > 0) {
      resultNum+=Integer.parseInt(rNum);
    }
    assert(resultNum == reserved.size());
  }
  AccountData res=new AccountData(acc.getId());
  parse_fees(doc,res);
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.MULTILINE);
  if (doc.select(""String_Node_Str"").size() > 0) {
    for (    Element box : doc.select(""String_Node_Str"")) {
      if (box.select(""String_Node_Str"").size() == 1) {
        String text=box.select(""String_Node_Str"").text();
        if (text.equals(""String_Node_Str"")) {
          text=box.text();
          text=p.matcher(text).replaceAll(""String_Node_Str"");
          res.setValidUntil(text);
        }
      }
    }
  }
  res.setLent(medien);
  res.setReservations(reserved);
  return res;
}","@Override public AccountData account(Account acc) throws IOException, JSONException, OpacErrorException {
  start();
  int resultNum;
  if (!login(acc)) {
    return null;
  }
  String html=httpGet(opac_url + ""String_Node_Str"",ENCODING);
  List<LentItem> medien=new ArrayList<>();
  Document doc=Jsoup.parse(html);
  doc.setBaseUri(opac_url);
  parse_medialist(medien,doc,1,data);
  loadPages(medien,doc,SISIS::parse_medialist);
  Map<String,Integer> links;
  if (doc.select(""String_Node_Str"").size() > 0) {
    resultNum=0;
    String rNum=doc.select(""String_Node_Str"").first().text().trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (rNum.length() > 0) {
      resultNum=Integer.parseInt(rNum);
    }
    assert(resultNum == medien.size());
  }
  html=httpGet(opac_url + ""String_Node_Str"",ENCODING);
  List<ReservedItem> reserved=new ArrayList<>();
  doc=Jsoup.parse(html);
  doc.setBaseUri(opac_url);
  parse_reslist(""String_Node_Str"",reserved,doc,1,data);
  Elements label6=doc.select(""String_Node_Str"");
  loadPages(reserved,doc,SISIS::parse_reslist6);
  html=httpGet(opac_url + ""String_Node_Str"",ENCODING);
  doc=Jsoup.parse(html);
  doc.setBaseUri(opac_url);
  parse_reslist(""String_Node_Str"",reserved,doc,1,data);
  loadPages(reserved,doc,SISIS::parse_reslist7);
  if (label6.size() > 0 && doc.select(""String_Node_Str"").size() > 0) {
    resultNum=0;
    String rNum=label6.text().trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (rNum.length() > 0) {
      resultNum=Integer.parseInt(rNum);
    }
    rNum=doc.select(""String_Node_Str"").text().trim().replaceAll(""String_Node_Str"",""String_Node_Str"");
    if (rNum.length() > 0) {
      resultNum+=Integer.parseInt(rNum);
    }
    assert(resultNum == reserved.size());
  }
  AccountData res=new AccountData(acc.getId());
  parse_fees(doc,res);
  Pattern p=Pattern.compile(""String_Node_Str"",Pattern.MULTILINE);
  if (doc.select(""String_Node_Str"").size() > 0) {
    for (    Element box : doc.select(""String_Node_Str"")) {
      if (box.select(""String_Node_Str"").size() == 1) {
        String text=box.select(""String_Node_Str"").text();
        if (text.equals(""String_Node_Str"")) {
          text=box.text();
          text=p.matcher(text).replaceAll(""String_Node_Str"");
          res.setValidUntil(text);
        }
      }
    }
  }
  res.setLent(medien);
  res.setReservations(reserved);
  return res;
}"
86133,"public static void parse_medialist(List<LentItem> media,Document doc,int offset,JSONObject data){
  Elements copytrs=doc.select(""String_Node_Str"");
  doc.setBaseUri(data.optString(""String_Node_Str""));
  DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"").withLocale(Locale.GERMAN);
  int trs=copytrs.size();
  if (trs == 1) {
    return;
  }
  assert(trs > 0);
  for (int i=1; i < trs; i++) {
    Element tr=copytrs.get(i);
    LentItem item=new LentItem();
    if (tr.text().contains(""String_Node_Str"") || (trs == 2 && tr.children().size() == 1)) {
      return;
    }
    item.setTitle(tr.child(1).select(""String_Node_Str"").text().trim());
    try {
      String[] col1split=tr.child(1).html().split(""String_Node_Str"");
      item.setAuthor(col1split[1].trim());
      if (col1split.length > 2 && col1split[2].contains(""String_Node_Str"")) {
        String[] barcodeAndJournalIssue=col1split[2].split(""String_Node_Str"");
        item.setBarcode(barcodeAndJournalIssue[0].trim());
        if (item.getTitle() == null || item.getTitle().equals(""String_Node_Str"")) {
          item.setTitle(barcodeAndJournalIssue[1].trim());
        }
      }
      String[] col2split=tr.child(2).html().split(""String_Node_Str"");
      String deadline=col2split[0].trim();
      if (deadline.contains(""String_Node_Str"")) {
        deadline=deadline.split(""String_Node_Str"")[1].trim();
      }
      try {
        item.setDeadline(fmt.parseLocalDate(deadline).toString());
      }
 catch (      IllegalArgumentException e1) {
        e1.printStackTrace();
      }
      if (col2split.length > 1) {
        item.setHomeBranch(col2split[1].trim());
      }
      if (tr.select(""String_Node_Str"").size() > 0) {
        for (        Element link : tr.select(""String_Node_Str"")) {
          String href=link.attr(""String_Node_Str"");
          Map<String,String> hrefq=getQueryParamsFirst(href);
          if (hrefq.get(""String_Node_Str"").equals(""String_Node_Str"")) {
            item.setProlongData(offset + ""String_Node_Str"" + href.split(""String_Node_Str"")[1]);
            item.setRenewable(true);
            break;
          }
        }
      }
 else       if (tr.select(""String_Node_Str"").size() > 0) {
        item.setProlongData(""String_Node_Str"" + tr.select(""String_Node_Str"").text());
        item.setRenewable(false);
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
    media.add(item);
  }
  assert(media.size() == trs - 1);
}","public static void parse_medialist(List<LentItem> media,Document doc,int offset,JSONObject data){
  Elements copytrs=doc.select(""String_Node_Str"");
  doc.setBaseUri(data.optString(""String_Node_Str""));
  DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"").withLocale(Locale.GERMAN);
  int trs=copytrs.size();
  if (trs == 1) {
    return;
  }
  assert(trs > 0);
  for (int i=1; i < trs; i++) {
    Element tr=copytrs.get(i);
    LentItem item=new LentItem();
    if (tr.text().contains(""String_Node_Str"") || (trs == 2 && tr.children().size() == 1)) {
      return;
    }
    item.setTitle(tr.child(1).select(""String_Node_Str"").text().trim());
    try {
      String[] col1split=tr.child(1).html().split(""String_Node_Str"");
      item.setAuthor(col1split[1].trim());
      if (col1split.length > 2 && col1split[2].contains(""String_Node_Str"")) {
        String[] barcodeAndJournalIssue=col1split[2].split(""String_Node_Str"");
        item.setBarcode(barcodeAndJournalIssue[0].trim());
        if (item.getTitle() == null || item.getTitle().equals(""String_Node_Str"")) {
          item.setTitle(barcodeAndJournalIssue[1].trim());
        }
      }
      String[] col2split=tr.child(2).html().split(""String_Node_Str"");
      String deadline=col2split[0].trim();
      if (deadline.contains(""String_Node_Str"")) {
        deadline=deadline.split(""String_Node_Str"")[1].trim();
      }
      try {
        item.setDeadline(fmt.parseLocalDate(deadline).toString());
      }
 catch (      IllegalArgumentException e1) {
        e1.printStackTrace();
      }
      if (col2split.length > 1) {
        item.setHomeBranch(col2split[1].trim());
      }
      if (tr.select(""String_Node_Str"").size() > 0) {
        for (        Element link : tr.select(""String_Node_Str"")) {
          String href=link.attr(""String_Node_Str"");
          Map<String,String> hrefq=getQueryParamsFirst(href);
          if (hrefq.get(""String_Node_Str"").equals(""String_Node_Str"")) {
            item.setProlongData(offset + ""String_Node_Str"" + href.split(""String_Node_Str"")[1]);
            item.setRenewable(true);
            break;
          }
        }
      }
 else       if (tr.select(""String_Node_Str"").size() > 0) {
        item.setProlongData(""String_Node_Str"" + tr.select(""String_Node_Str"").text());
        item.setRenewable(false);
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
    media.add(item);
  }
}"
86134,"/** 
 * Creates a customized keystore
 * @param keyStore      The keystore object that should be used in addition to the environmentsdefault key store.
 * @param socketFactory The class that should be used to instantiate a new socket factory, mustbe a subclass of  {@link SSLConnectionSocketFactory}.
 * @return a new {@link SSLConnectionSocketFactory}
 */
public static SSLConnectionSocketFactory create(Class<?> socketFactory,X509TrustManager trustManager) throws NoSuchAlgorithmException, KeyManagementException {
  SSLContext sslContext=SSLContext.getInstance(""String_Node_Str"");
  sslContext.init(null,new TrustManager[]{trustManager},null);
  if (socketFactory != null) {
    try {
      return (SSLConnectionSocketFactory)socketFactory.getDeclaredConstructor(SSLContext.class).newInstance(sslContext);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return new SSLConnectionSocketFactory(sslContext);
}","/** 
 * Creates a customized keystore
 * @param socketFactory The class that should be used to instantiate a new socket factory, mustbe a subclass of  {@link SSLConnectionSocketFactory}.
 * @return a new {@link SSLConnectionSocketFactory}
 */
public static SSLConnectionSocketFactory create(Class<?> socketFactory,X509TrustManager trustManager) throws NoSuchAlgorithmException, KeyManagementException {
  SSLContext sslContext=SSLContext.getInstance(""String_Node_Str"");
  sslContext.init(null,new TrustManager[]{trustManager},null);
  if (socketFactory != null) {
    try {
      return (SSLConnectionSocketFactory)socketFactory.getDeclaredConstructor(SSLContext.class).newInstance(sslContext);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return new SSLConnectionSocketFactory(sslContext);
}"
86135,"/** 
 * Creates a customized keystore
 * @param keyStore      The keystore object that should be used in addition to the environmentsdefault key store.
 * @param socketFactory The class that should be used to instantiate a new socket factory, mustbe a subclass of  {@link SSLConnectionSocketFactory}.
 * @return a new {@link SSLConnectionSocketFactory}
 */
public static SSLSocketFactory createForOkHttp(X509TrustManager trustManager) throws NoSuchAlgorithmException, KeyManagementException {
  SSLContext sslContext=SSLContext.getInstance(""String_Node_Str"");
  sslContext.init(null,new TrustManager[]{trustManager},null);
  return sslContext.getSocketFactory();
}","/** 
 * Creates a customized keystore for OkHttp
 * @return a new {@link SSLConnectionSocketFactory}
 */
public static SSLSocketFactory createForOkHttp(X509TrustManager trustManager) throws NoSuchAlgorithmException, KeyManagementException {
  SSLContext sslContext=SSLContext.getInstance(""String_Node_Str"");
  sslContext.init(null,new TrustManager[]{trustManager},null);
  return sslContext.getSocketFactory();
}"
86136,"public void download(final String a){
}","public void download(final String a){
  MultiStepResultHelper<String> msrhDownload=new MultiStepResultHelper<>(getActivity(),a,R.string.doing_download);
  msrhDownload.setCallback(new Callback<String>(){
    @Override public void onSuccess(    MultiStepResult res){
      final EbookServiceApi.DownloadResult result=(EbookServiceApi.DownloadResult)res;
      if (result.getUrl() != null) {
        if (result.getUrl().contains(""String_Node_Str"")) {
          String[] download_clients=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
          boolean found=false;
          PackageManager pm=getActivity().getPackageManager();
          for (          String id : download_clients) {
            try {
              pm.getPackageInfo(id,0);
              found=true;
            }
 catch (            NameNotFoundException e) {
            }
          }
          final SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
          if (!found && !sp.contains(""String_Node_Str"")) {
            int msg=R.string.reader_needed;
            if (result.getUrl().toLowerCase().contains(""String_Node_Str"")) {
              msg=R.string.reader_needed_overdrive;
            }
            AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
            builder.setMessage(msg).setCancelable(true).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
              @Override public void onClick(              DialogInterface dialog,              int id){
                dialog.cancel();
              }
            }
).setNeutralButton(R.string.reader_needed_ignore,new DialogInterface.OnClickListener(){
              @Override public void onClick(              DialogInterface dialog,              int id){
                Intent i=new Intent(Intent.ACTION_VIEW);
                i.setData(Uri.parse(result.getUrl()));
                sp.edit().putBoolean(""String_Node_Str"",true).commit();
                startActivity(i);
              }
            }
).setPositiveButton(R.string.download,new DialogInterface.OnClickListener(){
              @Override public void onClick(              DialogInterface dialog,              int id){
                dialog.cancel();
                String reader=""String_Node_Str"";
                if (result.getUrl().toLowerCase().contains(""String_Node_Str"")) {
                  reader=""String_Node_Str"";
                }
                Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + reader));
                startActivity(i);
              }
            }
);
            AlertDialog alert=builder.create();
            alert.show();
            return;
          }
        }
        Intent i=new Intent(Intent.ACTION_VIEW);
        i.setData(Uri.parse(result.getUrl()));
        startActivity(i);
      }
    }
    @Override public void onError(    MultiStepResult result){
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
      builder.setMessage(result.getMessage()).setCancelable(true).setNegativeButton(R.string.close,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface d,        int id){
          d.cancel();
        }
      }
).setOnCancelListener(new DialogInterface.OnCancelListener(){
        @Override public void onCancel(        DialogInterface d){
          if (d != null) {
            d.cancel();
          }
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
    }
    @Override public void onUnhandledResult(    MultiStepResult result){
    }
    @Override public void onUserCancel(){
    }
    @Override public StepTask<?> newTask(    MultiStepResultHelper helper,    int useraction,    String selection,    String argument){
      return dt=new DownloadTask(helper,useraction,selection,argument);
    }
  }
);
  msrhDownload.start();
}"
86137,"/** 
 * Create a new OkHttpClient.
 * @param tls_only If this is true, only TLS v1 and newer will be used, SSLv3 will be disabled.We highly recommend to set this to true, if possible. This is currently a no-op on the default implementation and only used in the Android implementation!
 */
public OkHttpClient getNewOkHttpClient(boolean customssl,boolean tls_only,boolean allCipherSuites){
  OkHttpClient.Builder builder=new OkHttpClient.Builder();
  if (customssl && ssl_store_path != null) {
    try {
      if (trust_store == null) {
        trust_store=getKeyStore();
      }
      X509TrustManager trustManager=new AdditionalKeyStoresSSLSocketFactory.AdditionalKeyStoresTrustManager(trust_store);
      SSLSocketFactory sf=AdditionalKeyStoresSSLSocketFactory.createForOkHttp(trustManager);
      builder.sslSocketFactory(sf,trustManager);
      builder.addNetworkInterceptor(new CustomRedirectInterceptor());
      List<ConnectionSpec> connectionSpecs=new ArrayList<ConnectionSpec>();
      connectionSpecs.add(ConnectionSpec.MODERN_TLS);
      connectionSpecs.add(new ConnectionSpec.Builder(ConnectionSpec.COMPATIBLE_TLS).allEnabledCipherSuites().build());
      if (!tls_only) {
        connectionSpecs.add(new ConnectionSpec.Builder(ConnectionSpec.COMPATIBLE_TLS).tlsVersions(TlsVersion.SSL_3_0,TlsVersion.TLS_1_0).allEnabledCipherSuites().build());
      }
 else       if (allCipherSuites) {
        connectionSpecs.add(new ConnectionSpec.Builder(ConnectionSpec.COMPATIBLE_TLS).allEnabledCipherSuites().build());
      }
      connectionSpecs.add(ConnectionSpec.CLEARTEXT);
      builder.connectionSpecs(connectionSpecs);
      CookieManager cookieManager=new CookieManager();
      cookieManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);
      builder.cookieJar(new JavaNetCookieJar(cookieManager));
      return builder.build();
    }
 catch (    Exception e) {
      e.printStackTrace();
      return builder.build();
    }
  }
 else {
    return builder.build();
  }
}","/** 
 * Create a new OkHttpClient.
 * @param tls_only If this is true, only TLS v1 and newer will be used, SSLv3 will be disabled.We highly recommend to set this to true, if possible. This is currently a no-op on the default implementation and only used in the Android implementation!
 */
public OkHttpClient getNewOkHttpClient(boolean customssl,boolean tls_only,boolean allCipherSuites){
  OkHttpClient.Builder builder=new OkHttpClient.Builder();
  CookieManager cookieManager=new CookieManager();
  cookieManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);
  builder.cookieJar(new JavaNetCookieJar(cookieManager));
  builder.addNetworkInterceptor(new CustomRedirectInterceptor());
  if (customssl && ssl_store_path != null) {
    try {
      if (trust_store == null) {
        trust_store=getKeyStore();
      }
      X509TrustManager trustManager=new AdditionalKeyStoresSSLSocketFactory.AdditionalKeyStoresTrustManager(trust_store);
      SSLSocketFactory sf=AdditionalKeyStoresSSLSocketFactory.createForOkHttp(trustManager);
      builder.sslSocketFactory(sf,trustManager);
      List<ConnectionSpec> connectionSpecs=new ArrayList<ConnectionSpec>();
      connectionSpecs.add(ConnectionSpec.MODERN_TLS);
      connectionSpecs.add(new ConnectionSpec.Builder(ConnectionSpec.COMPATIBLE_TLS).allEnabledCipherSuites().build());
      if (!tls_only) {
        connectionSpecs.add(new ConnectionSpec.Builder(ConnectionSpec.COMPATIBLE_TLS).tlsVersions(TlsVersion.SSL_3_0,TlsVersion.TLS_1_0).allEnabledCipherSuites().build());
      }
 else       if (allCipherSuites) {
        connectionSpecs.add(new ConnectionSpec.Builder(ConnectionSpec.COMPATIBLE_TLS).allEnabledCipherSuites().build());
      }
      connectionSpecs.add(ConnectionSpec.CLEARTEXT);
      builder.connectionSpecs(connectionSpecs);
      return builder.build();
    }
 catch (    Exception e) {
      e.printStackTrace();
      return builder.build();
    }
  }
 else {
    return builder.build();
  }
}"
86138,"protected boolean login(Account acc) throws OpacErrorException {
  String html;
  List<NameValuePair> nameValuePairs=new ArrayList<>(2);
  try {
    String loginPage;
    loginPage=httpGet(opac_url + ""String_Node_Str"",ENCODING);
    Document loginPageDoc=Jsoup.parse(loginPage);
    if (loginPageDoc.select(""String_Node_Str"").size() > 0) {
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",loginPageDoc.select(""String_Node_Str"").first().attr(""String_Node_Str"")));
    }
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getName()));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getPassword()));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",CSId));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  try {
    html=handleLoginMessage(httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),ENCODING));
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClientProtocolException e) {
    e.printStackTrace();
    return false;
  }
catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
  Document doc=Jsoup.parse(html);
  if (doc.getElementsByClass(""String_Node_Str"").size() > 0) {
    throw new OpacErrorException(doc.getElementsByClass(""String_Node_Str"").get(0).text());
  }
  logged_in=System.currentTimeMillis();
  logged_in_as=acc;
  return true;
}","protected boolean login(Account acc) throws OpacErrorException {
  String html;
  List<NameValuePair> nameValuePairs=new ArrayList<>(2);
  try {
    String loginPage;
    loginPage=httpGet(opac_url + ""String_Node_Str"",ENCODING);
    Document loginPageDoc=Jsoup.parse(loginPage);
    if (loginPageDoc.select(""String_Node_Str"").size() > 0) {
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",loginPageDoc.select(""String_Node_Str"").first().attr(""String_Node_Str"")));
    }
    CSId=loginPageDoc.select(""String_Node_Str"").val();
  }
 catch (  IOException e1) {
    e1.printStackTrace();
  }
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getName()));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getPassword()));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",CSId));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  try {
    html=handleLoginMessage(httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),ENCODING));
  }
 catch (  UnsupportedEncodingException e) {
    e.printStackTrace();
    return false;
  }
catch (  ClientProtocolException e) {
    e.printStackTrace();
    return false;
  }
catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
  Document doc=Jsoup.parse(html);
  if (doc.getElementsByClass(""String_Node_Str"").size() > 0) {
    throw new OpacErrorException(doc.getElementsByClass(""String_Node_Str"").get(0).text());
  }
  logged_in=System.currentTimeMillis();
  logged_in_as=acc;
  return true;
}"
86139,"@Override public ReservationResult reservation(DetailedItem item,Account acc,int useraction,String selection) throws IOException {
  String reservation_info=item.getReservation_info();
  final String branch_inputfield=""String_Node_Str"";
  Document doc=null;
  String action=""String_Node_Str"";
  if (reservation_info.contains(""String_Node_Str"")) {
    action=""String_Node_Str"";
  }
  if (useraction == MultiStepResult.ACTION_CONFIRMATION) {
    List<NameValuePair> nameValuePairs=new ArrayList<>(2);
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",action));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",CSId));
    String html=httpPost(opac_url + ""String_Node_Str"" + action+ ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),ENCODING);
    doc=Jsoup.parse(html);
  }
 else   if (selection == null || useraction == 0) {
    String html=httpGet(opac_url + ""String_Node_Str"" + reservation_info,ENCODING);
    doc=Jsoup.parse(html);
    if (doc.select(""String_Node_Str"").size() > 0) {
      List<NameValuePair> nameValuePairs=new ArrayList<>(2);
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getName()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getPassword()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",CSId));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      html=handleLoginMessage(httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),ENCODING));
      doc=Jsoup.parse(html);
      if (doc.getElementsByClass(""String_Node_Str"").size() == 0) {
        logged_in=System.currentTimeMillis();
        logged_in_as=acc;
      }
    }
    if (doc.select(""String_Node_Str"").size() > 0) {
      List<NameValuePair> nameValuePairs=new ArrayList<>(2);
      nameValuePairs.add(new BasicNameValuePair(branch_inputfield,selection));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",action));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",CSId));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      html=httpPost(opac_url + ""String_Node_Str"" + action+ ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),ENCODING);
      doc=Jsoup.parse(html);
    }
    if (doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").size() > 0) {
      List<Map<String,String>> branches=new ArrayList<>();
      for (      Element option : doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").first().parent().parent().parent().select(""String_Node_Str"")) {
        if (option.select(""String_Node_Str"").size() != 1) {
          continue;
        }
        String value=option.text().trim();
        String key=option.select(""String_Node_Str"").val();
        Map<String,String> selopt=new HashMap<>();
        selopt.put(""String_Node_Str"",key);
        selopt.put(""String_Node_Str"",value);
        branches.add(selopt);
      }
      ReservationResult result=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED);
      result.setActionIdentifier(ReservationResult.ACTION_BRANCH);
      result.setSelection(branches);
      return result;
    }
  }
 else   if (useraction == ReservationResult.ACTION_BRANCH) {
    List<NameValuePair> nameValuePairs=new ArrayList<>(2);
    nameValuePairs.add(new BasicNameValuePair(branch_inputfield,selection));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",action));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",CSId));
    String html=httpPost(opac_url + ""String_Node_Str"" + action+ ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),ENCODING);
    doc=Jsoup.parse(html);
  }
  if (doc == null) {
    return new ReservationResult(MultiStepResult.Status.ERROR);
  }
  if (doc.getElementsByClass(""String_Node_Str"").size() >= 1) {
    return new ReservationResult(MultiStepResult.Status.ERROR,doc.getElementsByClass(""String_Node_Str"").get(0).text());
  }
  if (doc.select(""String_Node_Str"").size() > 0 && doc.select(""String_Node_Str"").size() >= 2) {
    List<String[]> details=new ArrayList<>();
    for (    String row : doc.select(""String_Node_Str"").first().html().split(""String_Node_Str"")) {
      Document frag=Jsoup.parseBodyFragment(row);
      if (frag.text().contains(""String_Node_Str"")) {
        String[] split=frag.text().split(""String_Node_Str"");
        if (split.length >= 2) {
          details.add(new String[]{split[0].trim() + ""String_Node_Str"",split[1].trim()});
        }
      }
 else {
        details.add(new String[]{""String_Node_Str"",frag.text().trim()});
      }
    }
    ReservationResult result=new ReservationResult(Status.CONFIRMATION_NEEDED);
    result.setDetails(details);
    return result;
  }
  if (doc.select(""String_Node_Str"").size() >= 1) {
    String errmsg=doc.select(""String_Node_Str"").get(0).text();
    if (errmsg.contains(""String_Node_Str"")) {
      Copy best=null;
      for (      Copy copy : item.getCopies()) {
        if (copy.getResInfo() == null) {
          continue;
        }
        if (best == null) {
          best=copy;
          continue;
        }
        try {
          if (Integer.parseInt(copy.getReservations()) < Long.parseLong(best.getReservations())) {
            best=copy;
          }
 else           if (Integer.parseInt(copy.getReservations()) == Long.parseLong(best.getReservations())) {
            if (copy.getReturnDate().isBefore(best.getReturnDate())) {
              best=copy;
            }
          }
        }
 catch (        NumberFormatException e) {
        }
      }
      if (best != null) {
        item.setReservation_info(best.getResInfo());
        return reservation(item,acc,0,null);
      }
    }
    return new ReservationResult(MultiStepResult.Status.ERROR,errmsg);
  }
  if (doc.select(""String_Node_Str"").size() >= 1) {
    return new ReservationResult(MultiStepResult.Status.OK,doc.select(""String_Node_Str"").get(0).text());
  }
  return new ReservationResult(Status.OK);
}","@Override public ReservationResult reservation(DetailedItem item,Account acc,int useraction,String selection) throws IOException {
  String reservation_info=item.getReservation_info();
  final String branch_inputfield=""String_Node_Str"";
  Document doc=null;
  String action=""String_Node_Str"";
  if (reservation_info.contains(""String_Node_Str"")) {
    action=""String_Node_Str"";
  }
  if (useraction == MultiStepResult.ACTION_CONFIRMATION) {
    List<NameValuePair> nameValuePairs=new ArrayList<>(2);
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",action));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",CSId));
    String html=httpPost(opac_url + ""String_Node_Str"" + action+ ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),ENCODING);
    doc=Jsoup.parse(html);
  }
 else   if (selection == null || useraction == 0) {
    String html=httpGet(opac_url + ""String_Node_Str"" + reservation_info,ENCODING);
    doc=Jsoup.parse(html);
    if (doc.select(""String_Node_Str"").size() > 0) {
      CSId=doc.select(""String_Node_Str"").val();
      List<NameValuePair> nameValuePairs=new ArrayList<>(2);
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getName()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getPassword()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",CSId));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      html=handleLoginMessage(httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),ENCODING));
      doc=Jsoup.parse(html);
      if (doc.getElementsByClass(""String_Node_Str"").size() == 0) {
        logged_in=System.currentTimeMillis();
        logged_in_as=acc;
      }
    }
    if (doc.select(""String_Node_Str"").size() > 0) {
      List<NameValuePair> nameValuePairs=new ArrayList<>(2);
      nameValuePairs.add(new BasicNameValuePair(branch_inputfield,selection));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",action));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",CSId));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      html=httpPost(opac_url + ""String_Node_Str"" + action+ ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),ENCODING);
      doc=Jsoup.parse(html);
    }
    if (doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").size() > 0) {
      List<Map<String,String>> branches=new ArrayList<>();
      for (      Element option : doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").first().parent().parent().parent().select(""String_Node_Str"")) {
        if (option.select(""String_Node_Str"").size() != 1) {
          continue;
        }
        String value=option.text().trim();
        String key=option.select(""String_Node_Str"").val();
        Map<String,String> selopt=new HashMap<>();
        selopt.put(""String_Node_Str"",key);
        selopt.put(""String_Node_Str"",value);
        branches.add(selopt);
      }
      ReservationResult result=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED);
      result.setActionIdentifier(ReservationResult.ACTION_BRANCH);
      result.setSelection(branches);
      return result;
    }
  }
 else   if (useraction == ReservationResult.ACTION_BRANCH) {
    List<NameValuePair> nameValuePairs=new ArrayList<>(2);
    nameValuePairs.add(new BasicNameValuePair(branch_inputfield,selection));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",action));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",CSId));
    String html=httpPost(opac_url + ""String_Node_Str"" + action+ ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),ENCODING);
    doc=Jsoup.parse(html);
  }
  if (doc == null) {
    return new ReservationResult(MultiStepResult.Status.ERROR);
  }
  if (doc.getElementsByClass(""String_Node_Str"").size() >= 1) {
    return new ReservationResult(MultiStepResult.Status.ERROR,doc.getElementsByClass(""String_Node_Str"").get(0).text());
  }
  if (doc.html().contains(""String_Node_Str"")) {
    return new ReservationResult(MultiStepResult.Status.ERROR,doc.getElementsByTag(""String_Node_Str"").get(0).text());
  }
  if (doc.select(""String_Node_Str"").size() > 0 && doc.select(""String_Node_Str"").size() >= 2) {
    List<String[]> details=new ArrayList<>();
    for (    String row : doc.select(""String_Node_Str"").first().html().split(""String_Node_Str"")) {
      Document frag=Jsoup.parseBodyFragment(row);
      if (frag.text().contains(""String_Node_Str"")) {
        String[] split=frag.text().split(""String_Node_Str"");
        if (split.length >= 2) {
          details.add(new String[]{split[0].trim() + ""String_Node_Str"",split[1].trim()});
        }
      }
 else {
        details.add(new String[]{""String_Node_Str"",frag.text().trim()});
      }
    }
    ReservationResult result=new ReservationResult(Status.CONFIRMATION_NEEDED);
    result.setDetails(details);
    return result;
  }
  if (doc.select(""String_Node_Str"").size() >= 1) {
    String errmsg=doc.select(""String_Node_Str"").get(0).text();
    if (errmsg.contains(""String_Node_Str"")) {
      Copy best=null;
      for (      Copy copy : item.getCopies()) {
        if (copy.getResInfo() == null) {
          continue;
        }
        if (best == null) {
          best=copy;
          continue;
        }
        try {
          if (Integer.parseInt(copy.getReservations()) < Long.parseLong(best.getReservations())) {
            best=copy;
          }
 else           if (Integer.parseInt(copy.getReservations()) == Long.parseLong(best.getReservations())) {
            if (copy.getReturnDate().isBefore(best.getReturnDate())) {
              best=copy;
            }
          }
        }
 catch (        NumberFormatException e) {
        }
      }
      if (best != null) {
        item.setReservation_info(best.getResInfo());
        return reservation(item,acc,0,null);
      }
    }
    return new ReservationResult(MultiStepResult.Status.ERROR,errmsg);
  }
  if (doc.select(""String_Node_Str"").size() >= 1) {
    return new ReservationResult(MultiStepResult.Status.OK,doc.select(""String_Node_Str"").get(0).text());
  }
  return new ReservationResult(Status.OK);
}"
86140,"@Override public ReservationResult reservation(DetailledItem item,Account account,int useraction,String selection) throws IOException {
  Document doc;
  List<NameValuePair> nvpairs;
  ReservationResult res=null;
  if (selection != null && selection.equals(""String_Node_Str"")) {
    selection=null;
  }
  if (s_pageform == null) {
    return new ReservationResult(Status.ERROR);
  }
  nvpairs=s_pageform;
  int i=0;
  List<Integer> indexes=new ArrayList<>();
  for (  NameValuePair np : nvpairs) {
    if (np.getName().contains(""String_Node_Str"") || np.getName().contains(""String_Node_Str"")) {
      indexes.add(i);
    }
    i++;
  }
  for (int j=indexes.size() - 1; j >= 0; j--) {
    nvpairs.remove((int)indexes.get(j));
  }
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str"" + item.getReservation_info()));
  htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs);
  doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs);
  List<NameValuePair> form=new ArrayList<>();
  for (  Element input : doc.select(""String_Node_Str"")) {
    if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) || input.val().contains(""String_Node_Str"") || input.val().contains(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
      form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
    }
  }
  doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
  if (doc.select(""String_Node_Str"").size() > 0) {
    String msg=doc.select(""String_Node_Str"").text().trim();
    res=new ReservationResult(MultiStepResult.Status.ERROR,msg);
    form=new ArrayList<>();
    for (    Element input : doc.select(""String_Node_Str"")) {
      if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
        form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
      }
    }
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
  }
 else {
    try {
      doc=handleLoginForm(doc,account);
    }
 catch (    OpacErrorException e1) {
      return new ReservationResult(MultiStepResult.Status.ERROR,e1.getMessage());
    }
    if (useraction == 0 && selection == null) {
      res=new ReservationResult(MultiStepResult.Status.CONFIRMATION_NEEDED);
      List<String[]> details=new ArrayList<>();
      details.add(new String[]{doc.select(""String_Node_Str"").text()});
      res.setDetails(details);
    }
 else     if (doc.select(""String_Node_Str"").size() > 0 && (selection == null || ""String_Node_Str"".equals(selection))) {
      List<Map<String,String>> sel=new ArrayList<>();
      for (      Element opt : doc.select(""String_Node_Str"")) {
        if (opt.text().trim().length() > 0) {
          Map<String,String> selopt=new HashMap<>();
          selopt.put(""String_Node_Str"",opt.val());
          selopt.put(""String_Node_Str"",opt.text());
          sel.add(selopt);
        }
      }
      res=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED,doc.select(""String_Node_Str"").first().parent().select(""String_Node_Str"").text());
      res.setSelection(sel);
    }
 else     if (doc.select(""String_Node_Str"").size() > 0 && (selection == null || !selection.contains(""String_Node_Str""))) {
      List<Map<String,String>> sel=new ArrayList<>();
      for (      Element opt : doc.select(""String_Node_Str"")) {
        if (opt.text().trim().length() > 0) {
          Map<String,String> selopt=new HashMap<>();
          selopt.put(""String_Node_Str"",opt.text());
          if (selection != null) {
            selopt.put(""String_Node_Str"",opt.val() + ""String_Node_Str"" + selection);
          }
 else {
            selopt.put(""String_Node_Str"",opt.val());
          }
          sel.add(selopt);
        }
      }
      res=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED,doc.select(""String_Node_Str"").first().parent().select(""String_Node_Str"").text());
      res.setSelection(sel);
    }
 else     if (selection != null || doc.select(""String_Node_Str"").size() == 0) {
      if (doc.select(""String_Node_Str"").size() > 0 && selection != null) {
        if (selection.contains(""String_Node_Str"")) {
          doc.select(""String_Node_Str"").attr(""String_Node_Str"",selection.split(""String_Node_Str"")[1]);
        }
 else {
          doc.select(""String_Node_Str"").attr(""String_Node_Str"",selection);
        }
      }
      if (doc.select(""String_Node_Str"").size() > 0 && selection != null) {
        if (selection.contains(""String_Node_Str"")) {
          doc.select(""String_Node_Str"").attr(""String_Node_Str"",selection.split(""String_Node_Str"")[0]);
        }
 else {
          doc.select(""String_Node_Str"").attr(""String_Node_Str"",selection);
        }
      }
      if (doc.select(""String_Node_Str"").size() > 0) {
        doc.select(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str"");
      }
      if (doc.select(""String_Node_Str"").size() > 0) {
        String msg=doc.select(""String_Node_Str"").text().trim();
        form=new ArrayList<>();
        for (        Element input : doc.select(""String_Node_Str"")) {
          if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
            form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
          }
        }
        doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
        if (!msg.contains(""String_Node_Str"")) {
          res=new ReservationResult(MultiStepResult.Status.ERROR,msg);
        }
 else {
          res=new ReservationResult(MultiStepResult.Status.OK,msg);
        }
      }
 else {
        form=new ArrayList<>();
        for (        Element input : doc.select(""String_Node_Str"")) {
          if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
            form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
          }
        }
        form.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
        res=new ReservationResult(MultiStepResult.Status.OK);
        doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
        if (doc.select(""String_Node_Str"").attr(""String_Node_Str"").contains(""String_Node_Str"")) {
          form=new ArrayList<>();
          for (          Element input : doc.select(""String_Node_Str"")) {
            if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
              form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
            }
          }
          form.add(new BasicNameValuePair(""String_Node_Str"",doc.select(""String_Node_Str"").first().attr(""String_Node_Str"")));
          doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
        }
        if (doc.select(""String_Node_Str"").size() > 0) {
          String msg=doc.select(""String_Node_Str"").text().trim();
          form=new ArrayList<>();
          for (          Element input : doc.select(""String_Node_Str"")) {
            if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
              form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
            }
          }
          doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
          if (!msg.contains(""String_Node_Str"")) {
            res=new ReservationResult(MultiStepResult.Status.ERROR,msg);
          }
 else {
            res=new ReservationResult(MultiStepResult.Status.OK,msg);
          }
        }
 else         if (doc.select(""String_Node_Str"").text().contains(""String_Node_Str"")) {
          String msg=doc.select(""String_Node_Str"").text().trim();
          form=new ArrayList<>();
          for (          Element input : doc.select(""String_Node_Str"")) {
            if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
              form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
            }
          }
          doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
          if (!msg.contains(""String_Node_Str"")) {
            res=new ReservationResult(MultiStepResult.Status.ERROR,msg);
          }
 else {
            res=new ReservationResult(MultiStepResult.Status.OK,msg);
          }
        }
      }
    }
  }
  if (res == null || res.getStatus() == MultiStepResult.Status.SELECTION_NEEDED || res.getStatus() == MultiStepResult.Status.CONFIRMATION_NEEDED) {
    form=new ArrayList<>();
    for (    Element input : doc.select(""String_Node_Str"")) {
      if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
        form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
      }
    }
    Element button=doc.select(""String_Node_Str"").first();
    form.add(new BasicNameValuePair(button.attr(""String_Node_Str""),button.attr(""String_Node_Str"")));
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
  }
  updatePageform(doc);
  try {
    nvpairs=s_pageform;
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    parse_search_wrapped(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
    nvpairs=s_pageform;
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    parse_search_wrapped(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
  }
 catch (  OpacErrorException e) {
    e.printStackTrace();
  }
  return res;
}","@Override public ReservationResult reservation(DetailedItem item,Account account,int useraction,String selection) throws IOException {
  Document doc;
  List<NameValuePair> nvpairs;
  ReservationResult res=null;
  if (selection != null && selection.equals(""String_Node_Str"")) {
    selection=null;
  }
  if (s_pageform == null) {
    return new ReservationResult(Status.ERROR);
  }
  nvpairs=s_pageform;
  int i=0;
  List<Integer> indexes=new ArrayList<>();
  for (  NameValuePair np : nvpairs) {
    if (np.getName().contains(""String_Node_Str"") || np.getName().contains(""String_Node_Str"")) {
      indexes.add(i);
    }
    i++;
  }
  for (int j=indexes.size() - 1; j >= 0; j--) {
    nvpairs.remove((int)indexes.get(j));
  }
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str"" + item.getReservation_info()));
  htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs);
  doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs);
  List<NameValuePair> form=new ArrayList<>();
  for (  Element input : doc.select(""String_Node_Str"")) {
    if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) || input.val().contains(""String_Node_Str"") || input.val().contains(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
      form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
    }
  }
  doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
  if (doc.select(""String_Node_Str"").size() > 0) {
    String msg=doc.select(""String_Node_Str"").text().trim();
    res=new ReservationResult(MultiStepResult.Status.ERROR,msg);
    form=new ArrayList<>();
    for (    Element input : doc.select(""String_Node_Str"")) {
      if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
        form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
      }
    }
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
  }
 else {
    try {
      doc=handleLoginForm(doc,account);
    }
 catch (    OpacErrorException e1) {
      return new ReservationResult(MultiStepResult.Status.ERROR,e1.getMessage());
    }
    if (useraction == 0 && selection == null) {
      res=new ReservationResult(MultiStepResult.Status.CONFIRMATION_NEEDED);
      List<String[]> details=new ArrayList<>();
      details.add(new String[]{doc.select(""String_Node_Str"").text()});
      res.setDetails(details);
    }
 else     if (doc.select(""String_Node_Str"").size() > 0 && (selection == null || ""String_Node_Str"".equals(selection))) {
      List<Map<String,String>> sel=new ArrayList<>();
      for (      Element opt : doc.select(""String_Node_Str"")) {
        if (opt.text().trim().length() > 0) {
          Map<String,String> selopt=new HashMap<>();
          selopt.put(""String_Node_Str"",opt.val());
          selopt.put(""String_Node_Str"",opt.text());
          sel.add(selopt);
        }
      }
      res=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED,doc.select(""String_Node_Str"").first().parent().select(""String_Node_Str"").text());
      res.setSelection(sel);
    }
 else     if (doc.select(""String_Node_Str"").size() > 0 && (selection == null || !selection.contains(""String_Node_Str""))) {
      List<Map<String,String>> sel=new ArrayList<>();
      for (      Element opt : doc.select(""String_Node_Str"")) {
        if (opt.text().trim().length() > 0) {
          Map<String,String> selopt=new HashMap<>();
          selopt.put(""String_Node_Str"",opt.text());
          if (selection != null) {
            selopt.put(""String_Node_Str"",opt.val() + ""String_Node_Str"" + selection);
          }
 else {
            selopt.put(""String_Node_Str"",opt.val());
          }
          sel.add(selopt);
        }
      }
      res=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED,doc.select(""String_Node_Str"").first().parent().select(""String_Node_Str"").text());
      res.setSelection(sel);
    }
 else     if (selection != null || doc.select(""String_Node_Str"").size() == 0) {
      if (doc.select(""String_Node_Str"").size() > 0 && selection != null) {
        if (selection.contains(""String_Node_Str"")) {
          doc.select(""String_Node_Str"").attr(""String_Node_Str"",selection.split(""String_Node_Str"")[1]);
        }
 else {
          doc.select(""String_Node_Str"").attr(""String_Node_Str"",selection);
        }
      }
      if (doc.select(""String_Node_Str"").size() > 0 && selection != null) {
        if (selection.contains(""String_Node_Str"")) {
          doc.select(""String_Node_Str"").attr(""String_Node_Str"",selection.split(""String_Node_Str"")[0]);
        }
 else {
          doc.select(""String_Node_Str"").attr(""String_Node_Str"",selection);
        }
      }
      if (doc.select(""String_Node_Str"").size() > 0) {
        doc.select(""String_Node_Str"").attr(""String_Node_Str"",""String_Node_Str"");
      }
      if (doc.select(""String_Node_Str"").size() > 0) {
        String msg=doc.select(""String_Node_Str"").text().trim();
        form=new ArrayList<>();
        for (        Element input : doc.select(""String_Node_Str"")) {
          if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
            form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
          }
        }
        doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
        if (!msg.contains(""String_Node_Str"")) {
          res=new ReservationResult(MultiStepResult.Status.ERROR,msg);
        }
 else {
          res=new ReservationResult(MultiStepResult.Status.OK,msg);
        }
      }
 else {
        form=new ArrayList<>();
        for (        Element input : doc.select(""String_Node_Str"")) {
          if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
            form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
          }
        }
        form.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
        res=new ReservationResult(MultiStepResult.Status.OK);
        doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
        if (doc.select(""String_Node_Str"").attr(""String_Node_Str"").contains(""String_Node_Str"")) {
          form=new ArrayList<>();
          for (          Element input : doc.select(""String_Node_Str"")) {
            if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
              form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
            }
          }
          form.add(new BasicNameValuePair(""String_Node_Str"",doc.select(""String_Node_Str"").first().attr(""String_Node_Str"")));
          doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
        }
        if (doc.select(""String_Node_Str"").size() > 0) {
          String msg=doc.select(""String_Node_Str"").text().trim();
          form=new ArrayList<>();
          for (          Element input : doc.select(""String_Node_Str"")) {
            if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
              form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
            }
          }
          doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
          if (!msg.contains(""String_Node_Str"")) {
            res=new ReservationResult(MultiStepResult.Status.ERROR,msg);
          }
 else {
            res=new ReservationResult(MultiStepResult.Status.OK,msg);
          }
        }
 else         if (doc.select(""String_Node_Str"").text().contains(""String_Node_Str"")) {
          String msg=doc.select(""String_Node_Str"").text().trim();
          form=new ArrayList<>();
          for (          Element input : doc.select(""String_Node_Str"")) {
            if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
              form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
            }
          }
          doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
          if (!msg.contains(""String_Node_Str"")) {
            res=new ReservationResult(MultiStepResult.Status.ERROR,msg);
          }
 else {
            res=new ReservationResult(MultiStepResult.Status.OK,msg);
          }
        }
      }
    }
  }
  if (res == null || res.getStatus() == MultiStepResult.Status.SELECTION_NEEDED || res.getStatus() == MultiStepResult.Status.CONFIRMATION_NEEDED) {
    form=new ArrayList<>();
    for (    Element input : doc.select(""String_Node_Str"")) {
      if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
        form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
      }
    }
    Element button=doc.select(""String_Node_Str"").first();
    form.add(new BasicNameValuePair(button.attr(""String_Node_Str""),button.attr(""String_Node_Str"")));
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
  }
  updatePageform(doc);
  try {
    nvpairs=s_pageform;
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    parse_search_wrapped(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
    nvpairs=s_pageform;
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    parse_search_wrapped(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
  }
 catch (  OpacErrorException e) {
    e.printStackTrace();
  }
  return res;
}"
86141,"@Override public DetailledItem getResultById(String id,String homebranch) throws IOException, OpacErrorException {
  Document doc;
  List<NameValuePair> nvpairs;
  if (id == null && s_reusedoc != null) {
    doc=s_reusedoc;
  }
 else {
    nvpairs=s_pageform;
    int i=0;
    List<Integer> indexes=new ArrayList<>();
    for (    NameValuePair np : nvpairs) {
      if (np.getName().contains(""String_Node_Str"") || np.getName().contains(""String_Node_Str"")) {
        indexes.add(i);
      }
      i++;
    }
    for (int j=indexes.size() - 1; j >= 0; j--) {
      nvpairs.remove((int)indexes.get(j));
    }
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str"" + id));
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs);
    List<NameValuePair> form=new ArrayList<>();
    for (    Element input : doc.select(""String_Node_Str"")) {
      if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
        form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
      }
    }
    form.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str"" + id));
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
  }
  updatePageform(doc);
  nvpairs=s_pageform;
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  parse_search_wrapped(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
  nvpairs=s_pageform;
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  parse_search_wrapped(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
  return parseResult(id,doc);
}","@Override public DetailedItem getResultById(String id,String homebranch) throws IOException, OpacErrorException {
  Document doc;
  List<NameValuePair> nvpairs;
  if (id == null && s_reusedoc != null) {
    doc=s_reusedoc;
  }
 else {
    nvpairs=s_pageform;
    int i=0;
    List<Integer> indexes=new ArrayList<>();
    for (    NameValuePair np : nvpairs) {
      if (np.getName().contains(""String_Node_Str"") || np.getName().contains(""String_Node_Str"")) {
        indexes.add(i);
      }
      i++;
    }
    for (int j=indexes.size() - 1; j >= 0; j--) {
      nvpairs.remove((int)indexes.get(j));
    }
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str"" + id));
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs);
    List<NameValuePair> form=new ArrayList<>();
    for (    Element input : doc.select(""String_Node_Str"")) {
      if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
        form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
      }
    }
    form.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str"" + id));
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
  }
  updatePageform(doc);
  nvpairs=s_pageform;
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  parse_search_wrapped(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
  nvpairs=s_pageform;
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  parse_search_wrapped(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
  return parseResult(id,doc);
}"
86142,"@Override public DetailledItem getResult(int position) throws IOException, OpacErrorException {
  if (s_reusedoc != null) {
    return getResultById(null,null);
  }
  throw new UnsupportedOperationException();
}","@Override public DetailedItem getResult(int position) throws IOException, OpacErrorException {
  if (s_reusedoc != null) {
    return getResultById(null,null);
  }
  throw new UnsupportedOperationException();
}"
86143,"DetailledItem parseResult(String id,Document doc) throws IOException, OpacErrorException {
  List<NameValuePair> nvpairs;
  DetailledItem res=new DetailledItem();
  if (doc.select(""String_Node_Str"").size() == 1) {
    String cover_url=doc.select(""String_Node_Str"").first().absUrl(""String_Node_Str"");
    if (!cover_url.endsWith(""String_Node_Str"")) {
      res.setCover(cover_url);
    }
  }
  for (  Element tr : doc.select(""String_Node_Str"")) {
    if (tr.children().size() < 2) {
      continue;
    }
    String title=tr.child(0).text().trim();
    String value=tr.child(1).text().trim();
    if (value.contains(""String_Node_Str"") || value.startsWith(""String_Node_Str"") || title.contains(""String_Node_Str"")) {
      res.addDetail(new Detail(title,tr.child(1).select(""String_Node_Str"").first().absUrl(""String_Node_Str"")));
    }
 else {
      res.addDetail(new Detail(title,value));
    }
    if (title.contains(""String_Node_Str"") && res.getTitle() == null) {
      res.setTitle(value.split(""String_Node_Str"")[0].trim());
    }
  }
  if (res.getTitle() == null) {
    for (    Detail d : res.getDetails()) {
      if (d.getDesc().contains(""String_Node_Str"")) {
        res.setTitle(d.getContent());
        break;
      }
    }
  }
  if (doc.select(""String_Node_Str"").size() > 0 && id != null) {
    res.setReservable(true);
    res.setReservation_info(id);
  }
  DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"").withLocale(Locale.GERMAN);
  if (doc.select(""String_Node_Str"").size() > 0) {
    Element table=doc.select(""String_Node_Str"").first();
    Map<Integer,String> colmap=new HashMap<>();
    int i=0;
    for (    Element th : table.select(""String_Node_Str"")) {
      String head=th.text().trim();
      if (head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"")) {
        colmap.put(i,""String_Node_Str"");
      }
 else       if (head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"")) {
        colmap.put(i,""String_Node_Str"");
      }
 else       if (head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"")) {
        colmap.put(i,""String_Node_Str"");
      }
 else       if (head.contains(""String_Node_Str"")) {
        colmap.put(i,""String_Node_Str"");
      }
 else       if (head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"")|| head.matches(""String_Node_Str"")) {
        colmap.put(i,""String_Node_Str"");
      }
      i++;
    }
    for (    Element tr : table.select(""String_Node_Str"")) {
      Copy copy=new Copy();
      for (      Entry<Integer,String> entry : colmap.entrySet()) {
        if (entry.getValue().equals(""String_Node_Str"")) {
          String status=tr.child(entry.getKey()).text().trim();
          String currentStatus=copy.getStatus() != null ? copy.getStatus() + ""String_Node_Str"" : ""String_Node_Str"";
          if (status.contains(""String_Node_Str"")) {
            copy.setStatus(currentStatus + status.split(""String_Node_Str"")[0]);
            try {
              copy.setReturnDate(fmt.parseLocalDate(status.split(""String_Node_Str"")[1]));
            }
 catch (            IllegalArgumentException e) {
              e.printStackTrace();
            }
          }
 else {
            copy.setStatus(currentStatus + status);
          }
        }
 else {
          copy.set(entry.getValue(),tr.child(entry.getKey()).text().trim());
        }
      }
      res.addCopy(copy);
    }
  }
  res.setId(""String_Node_Str"");
  return res;
}","DetailedItem parseResult(String id,Document doc) throws IOException, OpacErrorException {
  List<NameValuePair> nvpairs;
  DetailedItem res=new DetailedItem();
  if (doc.select(""String_Node_Str"").size() == 1) {
    String cover_url=doc.select(""String_Node_Str"").first().absUrl(""String_Node_Str"");
    if (!cover_url.endsWith(""String_Node_Str"")) {
      res.setCover(cover_url);
    }
  }
  for (  Element tr : doc.select(""String_Node_Str"")) {
    if (tr.children().size() < 2) {
      continue;
    }
    String title=tr.child(0).text().trim();
    String value=tr.child(1).text().trim();
    if (value.contains(""String_Node_Str"") || value.startsWith(""String_Node_Str"") || title.contains(""String_Node_Str"")) {
      res.addDetail(new Detail(title,tr.child(1).select(""String_Node_Str"").first().absUrl(""String_Node_Str"")));
    }
 else {
      res.addDetail(new Detail(title,value));
    }
    if (title.contains(""String_Node_Str"") && res.getTitle() == null) {
      res.setTitle(value.split(""String_Node_Str"")[0].trim());
    }
  }
  if (res.getTitle() == null) {
    for (    Detail d : res.getDetails()) {
      if (d.getDesc().contains(""String_Node_Str"")) {
        res.setTitle(d.getContent());
        break;
      }
    }
  }
  if (doc.select(""String_Node_Str"").size() > 0 && id != null) {
    res.setReservable(true);
    res.setReservation_info(id);
  }
  DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"").withLocale(Locale.GERMAN);
  if (doc.select(""String_Node_Str"").size() > 0) {
    Element table=doc.select(""String_Node_Str"").first();
    Map<Integer,String> colmap=new HashMap<>();
    int i=0;
    for (    Element th : table.select(""String_Node_Str"")) {
      String head=th.text().trim();
      if (head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"")) {
        colmap.put(i,""String_Node_Str"");
      }
 else       if (head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"")) {
        colmap.put(i,""String_Node_Str"");
      }
 else       if (head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"")) {
        colmap.put(i,""String_Node_Str"");
      }
 else       if (head.contains(""String_Node_Str"")) {
        colmap.put(i,""String_Node_Str"");
      }
 else       if (head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"")|| head.matches(""String_Node_Str"")) {
        colmap.put(i,""String_Node_Str"");
      }
      i++;
    }
    for (    Element tr : table.select(""String_Node_Str"")) {
      Copy copy=new Copy();
      for (      Entry<Integer,String> entry : colmap.entrySet()) {
        if (entry.getValue().equals(""String_Node_Str"")) {
          String status=tr.child(entry.getKey()).text().trim();
          String currentStatus=copy.getStatus() != null ? copy.getStatus() + ""String_Node_Str"" : ""String_Node_Str"";
          if (status.contains(""String_Node_Str"")) {
            copy.setStatus(currentStatus + status.split(""String_Node_Str"")[0]);
            try {
              copy.setReturnDate(fmt.parseLocalDate(status.split(""String_Node_Str"")[1]));
            }
 catch (            IllegalArgumentException e) {
              e.printStackTrace();
            }
          }
 else {
            copy.setStatus(currentStatus + status);
          }
        }
 else {
          copy.set(entry.getValue(),tr.child(entry.getKey()).text().trim());
        }
      }
      res.addCopy(copy);
    }
  }
  res.setId(""String_Node_Str"");
  return res;
}"
86144,"private DetailledItem parse_result(String html){
  DetailledItem item=new DetailledItem();
  Document document=Jsoup.parse(html);
  Elements rows=document.select(""String_Node_Str"");
  Detail detail=null;
  Copy copy_last_content=null;
  int copy_row=0;
  String[] copy_keys=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  int[] copy_map=new int[]{3,1,-1,1,4,-1,-1};
  try {
    JSONObject map=data.getJSONObject(""String_Node_Str"");
    for (int i=0; i < copy_keys.length; i++) {
      if (map.has(copy_keys[i])) {
        copy_map[i]=map.getInt(copy_keys[i]);
      }
    }
  }
 catch (  Exception e) {
  }
  DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"").withLocale(Locale.GERMAN);
  for (  Element row : rows) {
    Elements columns=row.children();
    if (columns.size() == 2) {
      String firstColumn=columns.get(0).text().replace(""String_Node_Str"",""String_Node_Str"").trim();
      String secondColumn=columns.get(1).text().replace(""String_Node_Str"",""String_Node_Str"").trim();
      if (firstColumn.length() > 0) {
        if (firstColumn.equalsIgnoreCase(""String_Node_Str"")) {
          detail=null;
          item.setTitle(secondColumn);
        }
 else {
          if (secondColumn.contains(""String_Node_Str"") && columns.get(1).select(""String_Node_Str"").size() > 0) {
            secondColumn+=""String_Node_Str"" + columns.get(1).select(""String_Node_Str"").first().attr(""String_Node_Str"");
          }
          detail=new Detail(firstColumn,secondColumn);
          item.getDetails().add(detail);
        }
      }
 else {
        if (detail != null) {
          String content=detail.getContent() + ""String_Node_Str"" + secondColumn;
          detail.setContent(content);
        }
 else {
          if (columns.get(0).select(""String_Node_Str"").size() > 0) {
            item.setCover(columns.get(0).select(""String_Node_Str"").first().attr(""String_Node_Str""));
          }
        }
      }
    }
 else     if (columns.size() > 3) {
      if (copy_row > 0) {
        Copy copy=new Copy();
        for (int j=0; j < copy_keys.length; j++) {
          int col=copy_map[j];
          if (col > -1) {
            String text=""String_Node_Str"";
            if (copy_keys[j].equals(""String_Node_Str"")) {
              text=columns.get(col).ownText().replace(""String_Node_Str"",""String_Node_Str"").trim();
            }
            if (text.length() == 0) {
              text=columns.get(col).text().replace(""String_Node_Str"",""String_Node_Str"").trim();
            }
            if (text.length() == 0) {
              if (copy_keys[j].equals(""String_Node_Str"")) {
                text=""String_Node_Str"";
              }
 else {
                if (copy_last_content != null) {
                  text=copy_last_content.get(copy_keys[j]);
                }
 else {
                  text=""String_Node_Str"";
                }
              }
            }
            if (copy_keys[j].equals(""String_Node_Str"")) {
              text=text.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            }
            try {
              copy.set(copy_keys[j],text,fmt);
            }
 catch (            IllegalArgumentException e) {
              e.printStackTrace();
            }
          }
        }
        if (copy.getBranch() != null && copy.getLocation() != null && copy.getLocation().equals(copy.getBranch())) {
          copy.setLocation(null);
        }
        item.addCopy(copy);
        copy_last_content=copy;
      }
      copy_row++;
    }
  }
  item.setReservable(true);
  if (opacDir.contains(""String_Node_Str"")) {
    if (document.select(""String_Node_Str"").size() > 0) {
      item.setReservation_info(document.select(""String_Node_Str"").first().attr(""String_Node_Str""));
    }
 else     if (document.select(""String_Node_Str"" + opacSuffix + ""String_Node_Str"").size() > 0) {
      String href=document.select(""String_Node_Str"" + opacSuffix + ""String_Node_Str"").first().attr(""String_Node_Str"");
      item.setReservation_info(href.substring(href.indexOf(""String_Node_Str"")));
    }
 else {
      item.setReservable(false);
    }
  }
 else {
    item.setReservation_info(document.select(""String_Node_Str"").attr(""String_Node_Str""));
  }
  return item;
}","private DetailedItem parse_result(String html){
  DetailedItem item=new DetailedItem();
  Document document=Jsoup.parse(html);
  Elements rows=document.select(""String_Node_Str"");
  Detail detail=null;
  Copy copy_last_content=null;
  int copy_row=0;
  String[] copy_keys=new String[]{""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str""};
  int[] copy_map=new int[]{3,1,-1,1,4,-1,-1};
  try {
    JSONObject map=data.getJSONObject(""String_Node_Str"");
    for (int i=0; i < copy_keys.length; i++) {
      if (map.has(copy_keys[i])) {
        copy_map[i]=map.getInt(copy_keys[i]);
      }
    }
  }
 catch (  Exception e) {
  }
  DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"").withLocale(Locale.GERMAN);
  for (  Element row : rows) {
    Elements columns=row.children();
    if (columns.size() == 2) {
      String firstColumn=columns.get(0).text().replace(""String_Node_Str"",""String_Node_Str"").trim();
      String secondColumn=columns.get(1).text().replace(""String_Node_Str"",""String_Node_Str"").trim();
      if (firstColumn.length() > 0) {
        if (firstColumn.equalsIgnoreCase(""String_Node_Str"")) {
          detail=null;
          item.setTitle(secondColumn);
        }
 else {
          if (secondColumn.contains(""String_Node_Str"") && columns.get(1).select(""String_Node_Str"").size() > 0) {
            secondColumn+=""String_Node_Str"" + columns.get(1).select(""String_Node_Str"").first().attr(""String_Node_Str"");
          }
          detail=new Detail(firstColumn,secondColumn);
          item.getDetails().add(detail);
        }
      }
 else {
        if (detail != null) {
          String content=detail.getContent() + ""String_Node_Str"" + secondColumn;
          detail.setContent(content);
        }
 else {
          if (columns.get(0).select(""String_Node_Str"").size() > 0) {
            item.setCover(columns.get(0).select(""String_Node_Str"").first().attr(""String_Node_Str""));
          }
        }
      }
    }
 else     if (columns.size() > 3) {
      if (copy_row > 0) {
        Copy copy=new Copy();
        for (int j=0; j < copy_keys.length; j++) {
          int col=copy_map[j];
          if (col > -1) {
            String text=""String_Node_Str"";
            if (copy_keys[j].equals(""String_Node_Str"")) {
              text=columns.get(col).ownText().replace(""String_Node_Str"",""String_Node_Str"").trim();
            }
            if (text.length() == 0) {
              text=columns.get(col).text().replace(""String_Node_Str"",""String_Node_Str"").trim();
            }
            if (text.length() == 0) {
              if (copy_keys[j].equals(""String_Node_Str"")) {
                text=""String_Node_Str"";
              }
 else {
                if (copy_last_content != null) {
                  text=copy_last_content.get(copy_keys[j]);
                }
 else {
                  text=""String_Node_Str"";
                }
              }
            }
            if (copy_keys[j].equals(""String_Node_Str"")) {
              text=text.replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
            }
            try {
              copy.set(copy_keys[j],text,fmt);
            }
 catch (            IllegalArgumentException e) {
              e.printStackTrace();
            }
          }
        }
        if (copy.getBranch() != null && copy.getLocation() != null && copy.getLocation().equals(copy.getBranch())) {
          copy.setLocation(null);
        }
        item.addCopy(copy);
        copy_last_content=copy;
      }
      copy_row++;
    }
  }
  item.setReservable(true);
  if (opacDir.contains(""String_Node_Str"")) {
    if (document.select(""String_Node_Str"").size() > 0) {
      item.setReservation_info(document.select(""String_Node_Str"").first().attr(""String_Node_Str""));
    }
 else     if (document.select(""String_Node_Str"" + opacSuffix + ""String_Node_Str"").size() > 0) {
      String href=document.select(""String_Node_Str"" + opacSuffix + ""String_Node_Str"").first().attr(""String_Node_Str"");
      item.setReservation_info(href.substring(href.indexOf(""String_Node_Str"")));
    }
 else {
      item.setReservable(false);
    }
  }
 else {
    item.setReservation_info(document.select(""String_Node_Str"").attr(""String_Node_Str""));
  }
  return item;
}"
86145,"@Override public ReservationResult reservation(DetailledItem item,Account account,int useraction,String selection) throws IOException {
  String resinfo=item.getReservation_info();
  if (selection == null || selection.equals(""String_Node_Str"")) {
    String func=opacDir.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
    String id=opacDir.contains(""String_Node_Str"") ? (resinfo.contains(""String_Node_Str"") ? resinfo.substring(5) + ""String_Node_Str"" + resinfo : resinfo + ""String_Node_Str"" + resinfo) : ""String_Node_Str"" + resinfo;
    String html=httpGet(opacUrl + ""String_Node_Str"" + opacDir+ ""String_Node_Str""+ opacSuffix+ ""String_Node_Str""+ func+ ""String_Node_Str""+ id,getDefaultEncoding());
    Document doc=Jsoup.parse(html);
    newStyleReservations=doc.select(""String_Node_Str"" + resinfo.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"").val().length() > 4;
    Elements optionsElements=doc.select(""String_Node_Str"");
    if (optionsElements.size() > 0) {
      List<Map<String,String>> options=new ArrayList<>();
      for (      Element option : optionsElements) {
        if (""String_Node_Str"".equals(option.attr(""String_Node_Str""))) {
          continue;
        }
        Map<String,String> selopt=new HashMap<>();
        selopt.put(""String_Node_Str"",option.attr(""String_Node_Str"") + ""String_Node_Str"" + option.text());
        selopt.put(""String_Node_Str"",option.text());
        options.add(selopt);
      }
      if (options.size() > 1) {
        ReservationResult res=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED);
        res.setActionIdentifier(ReservationResult.ACTION_BRANCH);
        res.setSelection(options);
        return res;
      }
 else {
        return reservation(item,account,useraction,options.get(0).get(""String_Node_Str""));
      }
    }
 else {
      ReservationResult res=new ReservationResult(MultiStepResult.Status.ERROR);
      res.setMessage(""String_Node_Str"");
      return res;
    }
  }
 else {
    List<NameValuePair> nameValuePairs=new ArrayList<>();
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getPassword()));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    if (opacDir.contains(""String_Node_Str"")) {
      nameValuePairs.add(new BasicNameValuePair(resinfo.replace(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"" + (newStyleReservations ? resinfo.replace(""String_Node_Str"",""String_Node_Str"") : ""String_Node_Str"")));
    }
    if (newStyleReservations) {
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",selection.split(""String_Node_Str"")[1]));
    }
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",selection.split(""String_Node_Str"")[0]));
    String html=httpPost(opacUrl + ""String_Node_Str"" + opacDir+ ""String_Node_Str""+ opacSuffix,new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
    Document doc=Jsoup.parse(html);
    if (doc.select(""String_Node_Str"").text().contains(""String_Node_Str"")) {
      return new ReservationResult(MultiStepResult.Status.OK);
    }
 else {
      ReservationResult res=new ReservationResult(MultiStepResult.Status.ERROR);
      if (doc.select(""String_Node_Str"").size() > 0) {
        res.setMessage(doc.select(""String_Node_Str"").text());
      }
      return res;
    }
  }
}","@Override public ReservationResult reservation(DetailedItem item,Account account,int useraction,String selection) throws IOException {
  String resinfo=item.getReservation_info();
  if (selection == null || selection.equals(""String_Node_Str"")) {
    String func=opacDir.contains(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
    String id=opacDir.contains(""String_Node_Str"") ? (resinfo.contains(""String_Node_Str"") ? resinfo.substring(5) + ""String_Node_Str"" + resinfo : resinfo + ""String_Node_Str"" + resinfo) : ""String_Node_Str"" + resinfo;
    String html=httpGet(opacUrl + ""String_Node_Str"" + opacDir+ ""String_Node_Str""+ opacSuffix+ ""String_Node_Str""+ func+ ""String_Node_Str""+ id,getDefaultEncoding());
    Document doc=Jsoup.parse(html);
    newStyleReservations=doc.select(""String_Node_Str"" + resinfo.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"").val().length() > 4;
    Elements optionsElements=doc.select(""String_Node_Str"");
    if (optionsElements.size() > 0) {
      List<Map<String,String>> options=new ArrayList<>();
      for (      Element option : optionsElements) {
        if (""String_Node_Str"".equals(option.attr(""String_Node_Str""))) {
          continue;
        }
        Map<String,String> selopt=new HashMap<>();
        selopt.put(""String_Node_Str"",option.attr(""String_Node_Str"") + ""String_Node_Str"" + option.text());
        selopt.put(""String_Node_Str"",option.text());
        options.add(selopt);
      }
      if (options.size() > 1) {
        ReservationResult res=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED);
        res.setActionIdentifier(ReservationResult.ACTION_BRANCH);
        res.setSelection(options);
        return res;
      }
 else {
        return reservation(item,account,useraction,options.get(0).get(""String_Node_Str""));
      }
    }
 else {
      ReservationResult res=new ReservationResult(MultiStepResult.Status.ERROR);
      res.setMessage(""String_Node_Str"");
      return res;
    }
  }
 else {
    List<NameValuePair> nameValuePairs=new ArrayList<>();
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getPassword()));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    if (opacDir.contains(""String_Node_Str"")) {
      nameValuePairs.add(new BasicNameValuePair(resinfo.replace(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"" + (newStyleReservations ? resinfo.replace(""String_Node_Str"",""String_Node_Str"") : ""String_Node_Str"")));
    }
    if (newStyleReservations) {
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",selection.split(""String_Node_Str"")[1]));
    }
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",selection.split(""String_Node_Str"")[0]));
    String html=httpPost(opacUrl + ""String_Node_Str"" + opacDir+ ""String_Node_Str""+ opacSuffix,new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
    Document doc=Jsoup.parse(html);
    if (doc.select(""String_Node_Str"").text().contains(""String_Node_Str"")) {
      return new ReservationResult(MultiStepResult.Status.OK);
    }
 else {
      ReservationResult res=new ReservationResult(MultiStepResult.Status.ERROR);
      if (doc.select(""String_Node_Str"").size() > 0) {
        res.setMessage(doc.select(""String_Node_Str"").text());
      }
      return res;
    }
  }
}"
86146,"@Override public DetailledItem getResultById(String id,String homebranch) throws IOException {
  if (!initialised) {
    start();
  }
  if (!id.contains(""String_Node_Str"")) {
    id=""String_Node_Str"" + opacSuffix + ""String_Node_Str""+ id+ ""String_Node_Str"";
  }
  if (id.startsWith(opacUrl)) {
    id=id.substring(opacUrl.length());
  }
 else   if (!id.startsWith(""String_Node_Str"")) {
    id=""String_Node_Str"" + opacDir + ""String_Node_Str""+ id;
  }
  HttpGet httpget=new HttpGet(opacUrl + id);
  HttpResponse response=http_client.execute(httpget);
  String html=convertStreamToString(response.getEntity().getContent());
  HttpUtils.consume(response.getEntity());
  return parse_result(html);
}","@Override public DetailedItem getResultById(String id,String homebranch) throws IOException {
  if (!initialised) {
    start();
  }
  if (!id.contains(""String_Node_Str"")) {
    id=""String_Node_Str"" + opacSuffix + ""String_Node_Str""+ id+ ""String_Node_Str"";
  }
  if (id.startsWith(opacUrl)) {
    id=id.substring(opacUrl.length());
  }
 else   if (!id.startsWith(""String_Node_Str"")) {
    id=""String_Node_Str"" + opacDir + ""String_Node_Str""+ id;
  }
  HttpGet httpget=new HttpGet(opacUrl + id);
  HttpResponse response=http_client.execute(httpget);
  String html=convertStreamToString(response.getEntity().getContent());
  HttpUtils.consume(response.getEntity());
  return parse_result(html);
}"
86147,"@Override public DetailledItem getResult(int position) throws IOException {
  return null;
}","@Override public DetailedItem getResult(int position) throws IOException {
  return null;
}"
86148,"@Override public DetailledItem getResultById(String a,String homebranch) throws IOException {
  if (!initialised) {
    start();
  }
  String html=httpGet(opac_url + ""String_Node_Str"" + a,getDefaultEncoding());
  DetailledItem result=parseResult(html,data);
  if (result.getId() == null) {
    result.setId(a);
  }
  return result;
}","@Override public DetailedItem getResultById(String a,String homebranch) throws IOException {
  if (!initialised) {
    start();
  }
  String html=httpGet(opac_url + ""String_Node_Str"" + a,getDefaultEncoding());
  DetailedItem result=parseResult(html,data);
  if (result.getId() == null) {
    result.setId(a);
  }
  return result;
}"
86149,"@Override public DetailledItem getResult(int nr) throws IOException {
  String html=httpGet(opac_url + ""String_Node_Str"" + nr,getDefaultEncoding());
  return parseResult(html,data);
}","@Override public DetailedItem getResult(int nr) throws IOException {
  String html=httpGet(opac_url + ""String_Node_Str"" + nr,getDefaultEncoding());
  return parseResult(html,data);
}"
86150,"@Override public ReservationResult reservation(DetailledItem item,Account acc,int useraction,String selection) throws IOException {
  String reservation_info=item.getReservation_info();
  Document doc=null;
  if (useraction == MultiStepResult.ACTION_CONFIRMATION) {
    List<NameValuePair> nameValuePairs=new ArrayList<>(2);
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
    return new ReservationResult(MultiStepResult.Status.OK);
  }
 else   if (selection == null || useraction == 0) {
    String html=httpGet(opac_url + ""String_Node_Str"" + reservation_info,getDefaultEncoding());
    doc=Jsoup.parse(html);
    if (doc.select(""String_Node_Str"").size() > 0) {
      List<NameValuePair> nameValuePairs=new ArrayList<>(2);
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getName()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getPassword()));
      if (data.has(""String_Node_Str"")) {
        try {
          nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",data.getString(""String_Node_Str"")));
        }
 catch (        JSONException e) {
          e.printStackTrace();
        }
      }
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",doc.select(""String_Node_Str"").val()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
      doc=Jsoup.parse(html);
    }
    if (doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").size() == 0) {
      if (doc.select(""String_Node_Str"").size() > 0) {
        branch_inputfield=""String_Node_Str"";
      }
    }
    if (doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").size() > 0) {
      List<Map<String,String>> branches=new ArrayList<>();
      for (      Element option : doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").first().children()) {
        String value=option.text().trim();
        String key;
        if (option.hasAttr(""String_Node_Str"")) {
          key=option.attr(""String_Node_Str"");
        }
 else {
          key=value;
        }
        Map<String,String> selopt=new HashMap<>();
        selopt.put(""String_Node_Str"",key);
        selopt.put(""String_Node_Str"",value);
        branches.add(selopt);
      }
      _res_target=doc.select(""String_Node_Str"").attr(""String_Node_Str"");
      ReservationResult result=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED);
      result.setActionIdentifier(ReservationResult.ACTION_BRANCH);
      result.setSelection(branches);
      return result;
    }
  }
 else   if (useraction == ReservationResult.ACTION_BRANCH) {
    List<NameValuePair> nameValuePairs=new ArrayList<>(2);
    nameValuePairs.add(new BasicNameValuePair(branch_inputfield,selection));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",_res_target));
    String html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
    doc=Jsoup.parse(html);
  }
  if (doc == null) {
    return new ReservationResult(MultiStepResult.Status.ERROR);
  }
  if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").attr(""String_Node_Str"").equals(""String_Node_Str"")) {
      List<String[]> details=new ArrayList<>();
      if (doc.getElementsByClass(""String_Node_Str"").size() == 1) {
        details.add(new String[]{doc.getElementsByClass(""String_Node_Str"").get(0).text().trim()});
      }
      Pattern p=Pattern.compile(""String_Node_Str"",Pattern.MULTILINE | Pattern.CASE_INSENSITIVE);
      for (      Element div : doc.select(""String_Node_Str"")) {
        for (        String text : Jsoup.parse(div.html().replaceAll(""String_Node_Str"",""String_Node_Str"")).text().split(""String_Node_Str"")) {
          if (p.matcher(text).find() && !text.contains(""String_Node_Str"") && text.contains(""String_Node_Str"")) {
            details.add(new String[]{text.trim()});
          }
        }
      }
      if (doc.select(""String_Node_Str"").size() > 0 && doc.select(""String_Node_Str"").val().contains(""String_Node_Str"")) {
        details.add(new String[]{doc.select(""String_Node_Str"").val().trim()});
      }
      for (      Element row : doc.select(""String_Node_Str"")) {
        if (row.select(""String_Node_Str"").size() == 1 && row.select(""String_Node_Str"").size() == 1) {
          details.add(new String[]{row.select(""String_Node_Str"").text().trim(),row.select(""String_Node_Str"").text().trim()});
        }
      }
      ReservationResult result=new ReservationResult(MultiStepResult.Status.CONFIRMATION_NEEDED);
      result.setDetails(details);
      return result;
    }
  }
  if (doc.getElementsByClass(""String_Node_Str"").size() == 1) {
    return new ReservationResult(MultiStepResult.Status.ERROR,doc.getElementsByClass(""String_Node_Str"").get(0).text());
  }
  return new ReservationResult(MultiStepResult.Status.ERROR,stringProvider.getString(StringProvider.UNKNOWN_ERROR));
}","@Override public ReservationResult reservation(DetailedItem item,Account acc,int useraction,String selection) throws IOException {
  String reservation_info=item.getReservation_info();
  Document doc=null;
  if (useraction == MultiStepResult.ACTION_CONFIRMATION) {
    List<NameValuePair> nameValuePairs=new ArrayList<>(2);
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
    return new ReservationResult(MultiStepResult.Status.OK);
  }
 else   if (selection == null || useraction == 0) {
    String html=httpGet(opac_url + ""String_Node_Str"" + reservation_info,getDefaultEncoding());
    doc=Jsoup.parse(html);
    if (doc.select(""String_Node_Str"").size() > 0) {
      List<NameValuePair> nameValuePairs=new ArrayList<>(2);
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getName()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getPassword()));
      if (data.has(""String_Node_Str"")) {
        try {
          nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",data.getString(""String_Node_Str"")));
        }
 catch (        JSONException e) {
          e.printStackTrace();
        }
      }
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",doc.select(""String_Node_Str"").val()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
      doc=Jsoup.parse(html);
    }
    if (doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").size() == 0) {
      if (doc.select(""String_Node_Str"").size() > 0) {
        branch_inputfield=""String_Node_Str"";
      }
    }
    if (doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").size() > 0) {
      List<Map<String,String>> branches=new ArrayList<>();
      for (      Element option : doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").first().children()) {
        String value=option.text().trim();
        String key;
        if (option.hasAttr(""String_Node_Str"")) {
          key=option.attr(""String_Node_Str"");
        }
 else {
          key=value;
        }
        Map<String,String> selopt=new HashMap<>();
        selopt.put(""String_Node_Str"",key);
        selopt.put(""String_Node_Str"",value);
        branches.add(selopt);
      }
      _res_target=doc.select(""String_Node_Str"").attr(""String_Node_Str"");
      ReservationResult result=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED);
      result.setActionIdentifier(ReservationResult.ACTION_BRANCH);
      result.setSelection(branches);
      return result;
    }
  }
 else   if (useraction == ReservationResult.ACTION_BRANCH) {
    List<NameValuePair> nameValuePairs=new ArrayList<>(2);
    nameValuePairs.add(new BasicNameValuePair(branch_inputfield,selection));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",_res_target));
    String html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
    doc=Jsoup.parse(html);
  }
  if (doc == null) {
    return new ReservationResult(MultiStepResult.Status.ERROR);
  }
  if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").attr(""String_Node_Str"").equals(""String_Node_Str"")) {
      List<String[]> details=new ArrayList<>();
      if (doc.getElementsByClass(""String_Node_Str"").size() == 1) {
        details.add(new String[]{doc.getElementsByClass(""String_Node_Str"").get(0).text().trim()});
      }
      Pattern p=Pattern.compile(""String_Node_Str"",Pattern.MULTILINE | Pattern.CASE_INSENSITIVE);
      for (      Element div : doc.select(""String_Node_Str"")) {
        for (        String text : Jsoup.parse(div.html().replaceAll(""String_Node_Str"",""String_Node_Str"")).text().split(""String_Node_Str"")) {
          if (p.matcher(text).find() && !text.contains(""String_Node_Str"") && text.contains(""String_Node_Str"")) {
            details.add(new String[]{text.trim()});
          }
        }
      }
      if (doc.select(""String_Node_Str"").size() > 0 && doc.select(""String_Node_Str"").val().contains(""String_Node_Str"")) {
        details.add(new String[]{doc.select(""String_Node_Str"").val().trim()});
      }
      for (      Element row : doc.select(""String_Node_Str"")) {
        if (row.select(""String_Node_Str"").size() == 1 && row.select(""String_Node_Str"").size() == 1) {
          details.add(new String[]{row.select(""String_Node_Str"").text().trim(),row.select(""String_Node_Str"").text().trim()});
        }
      }
      ReservationResult result=new ReservationResult(MultiStepResult.Status.CONFIRMATION_NEEDED);
      result.setDetails(details);
      return result;
    }
  }
  if (doc.getElementsByClass(""String_Node_Str"").size() == 1) {
    return new ReservationResult(MultiStepResult.Status.ERROR,doc.getElementsByClass(""String_Node_Str"").get(0).text());
  }
  return new ReservationResult(MultiStepResult.Status.ERROR,stringProvider.getString(StringProvider.UNKNOWN_ERROR));
}"
86151,"static DetailledItem parseResult(String html,JSONObject data){
  Document doc=Jsoup.parse(html);
  doc.setBaseUri(data.optString(""String_Node_Str""));
  DetailledItem result=new DetailledItem();
  if (doc.select(""String_Node_Str"").size() == 1) {
    result.setCover(doc.select(""String_Node_Str"").get(0).attr(""String_Node_Str""));
  }
  result.setTitle(doc.select(""String_Node_Str"").text());
  Elements detailtrs=doc.select(""String_Node_Str"");
  for (int i=0; i < detailtrs.size(); i++) {
    Element tr=detailtrs.get(i);
    if (tr.child(0).hasClass(""String_Node_Str"")) {
      String title=tr.child(0).text();
      String content=tr.child(1).text();
      if (title.equals(""String_Node_Str"") || title.equals(""String_Node_Str"")) {
        try {
          if (tr.child(1).select(""String_Node_Str"").size() > 0) {
            Element link=tr.child(1).select(""String_Node_Str"").first();
            List<NameValuePair> query=URLEncodedUtils.parse(new URI(link.absUrl(""String_Node_Str"")),""String_Node_Str"");
            for (            NameValuePair q : query) {
              if (q.getName().equals(""String_Node_Str"")) {
                result.setCollectionId(q.getValue());
              }
            }
          }
        }
 catch (        URISyntaxException e) {
        }
      }
 else {
        if (content.contains(""String_Node_Str"") && tr.child(1).select(""String_Node_Str"").size() > 0) {
          content+=""String_Node_Str"" + tr.child(1).select(""String_Node_Str"").first().attr(""String_Node_Str"");
        }
        result.addDetail(new Detail(title,content));
      }
    }
  }
  Elements detailcenterlinks=doc.select(""String_Node_Str"");
  for (int i=0; i < detailcenterlinks.size(); i++) {
    Element a=detailcenterlinks.get(i);
    result.addDetail(new Detail(a.text().trim(),a.absUrl(""String_Node_Str"")));
  }
  try {
    JSONObject copymap=new JSONObject();
    if (data.has(""String_Node_Str"")) {
      copymap=data.getJSONObject(""String_Node_Str"");
    }
 else {
      Elements ths=doc.select(""String_Node_Str"");
      for (int i=0; i < ths.size(); i++) {
        Element th=ths.get(i);
        String head=th.text().trim();
        if (head.equals(""String_Node_Str"")) {
          copymap.put(""String_Node_Str"",i);
        }
 else         if (head.equals(""String_Node_Str"")) {
          copymap.put(""String_Node_Str"",i);
        }
 else         if (head.equals(""String_Node_Str"") || head.equals(""String_Node_Str"")) {
          copymap.put(""String_Node_Str"",i);
        }
 else         if (head.equals(""String_Node_Str"")) {
          copymap.put(""String_Node_Str"",i);
        }
 else         if (head.equals(""String_Node_Str"") || head.equals(""String_Node_Str"")) {
          copymap.put(""String_Node_Str"",i);
        }
 else         if (head.equals(""String_Node_Str"")) {
          copymap.put(""String_Node_Str"",i);
        }
 else         if (head.equals(""String_Node_Str"") || head.matches(""String_Node_Str"")) {
          copymap.put(""String_Node_Str"",i);
        }
 else         if (head.equals(""String_Node_Str"") || head.equals(""String_Node_Str"")) {
          copymap.put(""String_Node_Str"",i);
        }
      }
    }
    Elements exemplartrs=doc.select(""String_Node_Str"");
    DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"").withLocale(Locale.GERMAN);
    for (int i=0; i < exemplartrs.size(); i++) {
      Element tr=exemplartrs.get(i);
      Copy copy=new Copy();
      Iterator<?> keys=copymap.keys();
      while (keys.hasNext()) {
        String key=(String)keys.next();
        int index;
        try {
          index=copymap.has(key) ? copymap.getInt(key) : -1;
        }
 catch (        JSONException e1) {
          index=-1;
        }
        if (index >= 0) {
          try {
            copy.set(key,tr.child(index).text(),fmt);
          }
 catch (          IllegalArgumentException e) {
            e.printStackTrace();
          }
        }
      }
      result.addCopy(copy);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    Elements bandtrs=doc.select(""String_Node_Str"");
    for (int i=0; i < bandtrs.size(); i++) {
      Element tr=bandtrs.get(i);
      Volume volume=new Volume();
      volume.setId(tr.attr(""String_Node_Str"").split(""String_Node_Str"")[1]);
      volume.setTitle(tr.text());
      result.addVolume(volume);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (doc.select(""String_Node_Str"").size() == 1) {
    result.setReservable(true);
    result.setReservation_info(doc.select(""String_Node_Str"").attr(""String_Node_Str""));
  }
  return result;
}","static DetailedItem parseResult(String html,JSONObject data){
  Document doc=Jsoup.parse(html);
  doc.setBaseUri(data.optString(""String_Node_Str""));
  DetailedItem result=new DetailedItem();
  if (doc.select(""String_Node_Str"").size() == 1) {
    result.setCover(doc.select(""String_Node_Str"").get(0).attr(""String_Node_Str""));
  }
  result.setTitle(doc.select(""String_Node_Str"").text());
  Elements detailtrs=doc.select(""String_Node_Str"");
  for (int i=0; i < detailtrs.size(); i++) {
    Element tr=detailtrs.get(i);
    if (tr.child(0).hasClass(""String_Node_Str"")) {
      String title=tr.child(0).text();
      String content=tr.child(1).text();
      if (title.equals(""String_Node_Str"") || title.equals(""String_Node_Str"")) {
        try {
          if (tr.child(1).select(""String_Node_Str"").size() > 0) {
            Element link=tr.child(1).select(""String_Node_Str"").first();
            List<NameValuePair> query=URLEncodedUtils.parse(new URI(link.absUrl(""String_Node_Str"")),""String_Node_Str"");
            for (            NameValuePair q : query) {
              if (q.getName().equals(""String_Node_Str"")) {
                result.setCollectionId(q.getValue());
              }
            }
          }
        }
 catch (        URISyntaxException e) {
        }
      }
 else {
        if (content.contains(""String_Node_Str"") && tr.child(1).select(""String_Node_Str"").size() > 0) {
          content+=""String_Node_Str"" + tr.child(1).select(""String_Node_Str"").first().attr(""String_Node_Str"");
        }
        result.addDetail(new Detail(title,content));
      }
    }
  }
  Elements detailcenterlinks=doc.select(""String_Node_Str"");
  for (int i=0; i < detailcenterlinks.size(); i++) {
    Element a=detailcenterlinks.get(i);
    result.addDetail(new Detail(a.text().trim(),a.absUrl(""String_Node_Str"")));
  }
  try {
    JSONObject copymap=new JSONObject();
    if (data.has(""String_Node_Str"")) {
      copymap=data.getJSONObject(""String_Node_Str"");
    }
 else {
      Elements ths=doc.select(""String_Node_Str"");
      for (int i=0; i < ths.size(); i++) {
        Element th=ths.get(i);
        String head=th.text().trim();
        if (head.equals(""String_Node_Str"")) {
          copymap.put(""String_Node_Str"",i);
        }
 else         if (head.equals(""String_Node_Str"")) {
          copymap.put(""String_Node_Str"",i);
        }
 else         if (head.equals(""String_Node_Str"") || head.equals(""String_Node_Str"")) {
          copymap.put(""String_Node_Str"",i);
        }
 else         if (head.equals(""String_Node_Str"")) {
          copymap.put(""String_Node_Str"",i);
        }
 else         if (head.equals(""String_Node_Str"") || head.equals(""String_Node_Str"")) {
          copymap.put(""String_Node_Str"",i);
        }
 else         if (head.equals(""String_Node_Str"")) {
          copymap.put(""String_Node_Str"",i);
        }
 else         if (head.equals(""String_Node_Str"") || head.matches(""String_Node_Str"")) {
          copymap.put(""String_Node_Str"",i);
        }
 else         if (head.equals(""String_Node_Str"") || head.equals(""String_Node_Str"")) {
          copymap.put(""String_Node_Str"",i);
        }
      }
    }
    Elements exemplartrs=doc.select(""String_Node_Str"");
    DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"").withLocale(Locale.GERMAN);
    for (int i=0; i < exemplartrs.size(); i++) {
      Element tr=exemplartrs.get(i);
      Copy copy=new Copy();
      Iterator<?> keys=copymap.keys();
      while (keys.hasNext()) {
        String key=(String)keys.next();
        int index;
        try {
          index=copymap.has(key) ? copymap.getInt(key) : -1;
        }
 catch (        JSONException e1) {
          index=-1;
        }
        if (index >= 0) {
          try {
            copy.set(key,tr.child(index).text(),fmt);
          }
 catch (          IllegalArgumentException e) {
            e.printStackTrace();
          }
        }
      }
      result.addCopy(copy);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  try {
    Elements bandtrs=doc.select(""String_Node_Str"");
    for (int i=0; i < bandtrs.size(); i++) {
      Element tr=bandtrs.get(i);
      Volume volume=new Volume();
      volume.setId(tr.attr(""String_Node_Str"").split(""String_Node_Str"")[1]);
      volume.setTitle(tr.text());
      result.addVolume(volume);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (doc.select(""String_Node_Str"").size() == 1) {
    result.setReservable(true);
    result.setReservation_info(doc.select(""String_Node_Str"").attr(""String_Node_Str""));
  }
  return result;
}"
86152,"/** 
 * Book an electronical item identified by booking_info to the users account. booking_info is what you returned in your DetailledItem object in your getResult hook.
 */
public BookingResult booking(DetailledItem item,Account account,int useraction,String selection) throws IOException, OpacErrorException ;","/** 
 * Book an electronical item identified by booking_info to the users account. booking_info is what you returned in your DetailedItem object in your getResult hook.
 */
public BookingResult booking(DetailedItem item,Account account,int useraction,String selection) throws IOException, OpacErrorException ;"
86153,"/** 
 * Is this a supported downloadable ebook? May not do network requests.
 */
public boolean isEbook(DetailledItem item);","/** 
 * Is this a supported downloadable ebook? May not do network requests.
 */
public boolean isEbook(DetailedItem item);"
86154,"@Override public ReservationResult reservation(DetailledItem item,Account account,int useraction,String selection) throws IOException {
  String html=httpGet(opac_url + ""String_Node_Str"" + item.getId()+ ""String_Node_Str""+ sessid,ENCODING,false,cookieStore);
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").size() > 0) {
    List<NameValuePair> nameValuePairs=new ArrayList<>(2);
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getPassword()));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",sessid));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str"" + item.getId()));
    html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),ENCODING);
    doc=Jsoup.parse(html);
    if (doc.select(""String_Node_Str"").size() > 0) {
      return new ReservationResult(MultiStepResult.Status.ERROR,doc.select(""String_Node_Str"").text());
    }
  }
  if (doc.select(""String_Node_Str"").size() > 0) {
    if (selection != null) {
      List<NameValuePair> nameValuePairs=new ArrayList<>(2);
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",item.getId()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",selection));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",sessid));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),ENCODING);
      doc=Jsoup.parse(html);
    }
 else {
      List<Map<String,String>> options=new ArrayList<>();
      for (      Element input : doc.select(""String_Node_Str"")) {
        Element label=doc.select(""String_Node_Str"" + input.id() + ""String_Node_Str"").first();
        Map<String,String> selopt=new HashMap<>();
        selopt.put(""String_Node_Str"",input.attr(""String_Node_Str""));
        selopt.put(""String_Node_Str"",label.text());
        options.add(selopt);
      }
      ReservationResult res=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED);
      res.setSelection(options);
      return res;
    }
  }
  if (doc.select(""String_Node_Str"").size() > 0) {
    String text=doc.select(""String_Node_Str"").text();
    return new ReservationResult(MultiStepResult.Status.ERROR,text);
  }
  String text=doc.select(""String_Node_Str"").text();
  if (text.contains(""String_Node_Str"")) {
    return new ReservationResult(MultiStepResult.Status.OK,text);
  }
 else {
    return new ReservationResult(MultiStepResult.Status.ERROR,text);
  }
}","@Override public ReservationResult reservation(DetailedItem item,Account account,int useraction,String selection) throws IOException {
  String html=httpGet(opac_url + ""String_Node_Str"" + item.getId()+ ""String_Node_Str""+ sessid,ENCODING,false,cookieStore);
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").size() > 0) {
    List<NameValuePair> nameValuePairs=new ArrayList<>(2);
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getPassword()));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",sessid));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str"" + item.getId()));
    html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),ENCODING);
    doc=Jsoup.parse(html);
    if (doc.select(""String_Node_Str"").size() > 0) {
      return new ReservationResult(MultiStepResult.Status.ERROR,doc.select(""String_Node_Str"").text());
    }
  }
  if (doc.select(""String_Node_Str"").size() > 0) {
    if (selection != null) {
      List<NameValuePair> nameValuePairs=new ArrayList<>(2);
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",item.getId()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",selection));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",sessid));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),ENCODING);
      doc=Jsoup.parse(html);
    }
 else {
      List<Map<String,String>> options=new ArrayList<>();
      for (      Element input : doc.select(""String_Node_Str"")) {
        Element label=doc.select(""String_Node_Str"" + input.id() + ""String_Node_Str"").first();
        Map<String,String> selopt=new HashMap<>();
        selopt.put(""String_Node_Str"",input.attr(""String_Node_Str""));
        selopt.put(""String_Node_Str"",label.text());
        options.add(selopt);
      }
      ReservationResult res=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED);
      res.setSelection(options);
      return res;
    }
  }
  if (doc.select(""String_Node_Str"").size() > 0) {
    String text=doc.select(""String_Node_Str"").text();
    return new ReservationResult(MultiStepResult.Status.ERROR,text);
  }
  String text=doc.select(""String_Node_Str"").text();
  if (text.contains(""String_Node_Str"")) {
    return new ReservationResult(MultiStepResult.Status.OK,text);
  }
 else {
    return new ReservationResult(MultiStepResult.Status.ERROR,text);
  }
}"
86155,"@Override public DetailledItem getResultById(String id,final String homebranch) throws IOException {
  if (sessid == null) {
    start();
  }
  if (homebranch != null && !""String_Node_Str"".equals(homebranch)) {
    cookieStore.addCookie(new BasicClientCookie(""String_Node_Str"",homebranch));
  }
  String html=httpGet(opac_url + ""String_Node_Str"" + id+ ""String_Node_Str""+ sessid,ENCODING,false,cookieStore);
  Document doc=Jsoup.parse(html);
  DetailledItem item=new DetailledItem();
  item.setId(id);
  Elements table=doc.select(""String_Node_Str"");
  for (  Element tr : table) {
    if (tr.select(""String_Node_Str"").size() == 0 || tr.select(""String_Node_Str"").size() == 0) {
      continue;
    }
    String d=tr.select(""String_Node_Str"").first().text();
    String c=tr.select(""String_Node_Str"").first().text();
    if (d.equals(""String_Node_Str"")) {
      item.setTitle(c);
    }
 else     if ((d.contains(""String_Node_Str"") || d.contains(""String_Node_Str"")) && tr.select(""String_Node_Str"").size() > 0) {
      item.addDetail(new Detail(d,tr.select(""String_Node_Str"").first().attr(""String_Node_Str"")));
    }
 else {
      item.addDetail(new Detail(d,c));
    }
  }
  if (doc.select(""String_Node_Str"").size() > 0) {
    table=doc.select(""String_Node_Str"");
    DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"").withLocale(Locale.GERMAN);
    for (    Element tr : table) {
      if (tr.hasClass(""String_Node_Str"") || tr.select(""String_Node_Str"").size() == 0 || tr.select(""String_Node_Str"").size() == 0 || tr.select(""String_Node_Str"").size() == 0) {
        continue;
      }
      Copy copy=new Copy();
      copy.setShelfmark(tr.select(""String_Node_Str"").first().text());
      copy.setBranch(tr.select(""String_Node_Str"").first().text());
      String status=tr.select(""String_Node_Str"").first().text();
      if (status.contains(""String_Node_Str"")) {
        copy.setReturnDate(fmt.parseLocalDate(status.replaceAll(""String_Node_Str"",""String_Node_Str"")));
        copy.setReservations(status.replaceAll(""String_Node_Str"",""String_Node_Str""));
        copy.setStatus(""String_Node_Str"");
      }
 else {
        copy.setStatus(status);
      }
      item.addCopy(copy);
    }
  }
  for (  Element a : doc.select(""String_Node_Str"")) {
    if (a.attr(""String_Node_Str"").contains(""String_Node_Str"")) {
      item.setReservable(true);
      item.setReservation_info(id);
      break;
    }
  }
  for (  Element a : doc.select(""String_Node_Str"")) {
    if (a.text().trim().matches(""String_Node_Str"")) {
      Map<String,String> volumesearch=new HashMap<>();
      volumesearch.put(""String_Node_Str"",getQueryParamsFirst(a.attr(""String_Node_Str"")).get(""String_Node_Str""));
      item.setVolumesearch(volumesearch);
    }
  }
  return item;
}","@Override public DetailedItem getResultById(String id,final String homebranch) throws IOException {
  if (sessid == null) {
    start();
  }
  if (homebranch != null && !""String_Node_Str"".equals(homebranch)) {
    cookieStore.addCookie(new BasicClientCookie(""String_Node_Str"",homebranch));
  }
  String html=httpGet(opac_url + ""String_Node_Str"" + id+ ""String_Node_Str""+ sessid,ENCODING,false,cookieStore);
  Document doc=Jsoup.parse(html);
  DetailedItem item=new DetailedItem();
  item.setId(id);
  Elements table=doc.select(""String_Node_Str"");
  for (  Element tr : table) {
    if (tr.select(""String_Node_Str"").size() == 0 || tr.select(""String_Node_Str"").size() == 0) {
      continue;
    }
    String d=tr.select(""String_Node_Str"").first().text();
    String c=tr.select(""String_Node_Str"").first().text();
    if (d.equals(""String_Node_Str"")) {
      item.setTitle(c);
    }
 else     if ((d.contains(""String_Node_Str"") || d.contains(""String_Node_Str"")) && tr.select(""String_Node_Str"").size() > 0) {
      item.addDetail(new Detail(d,tr.select(""String_Node_Str"").first().attr(""String_Node_Str"")));
    }
 else {
      item.addDetail(new Detail(d,c));
    }
  }
  if (doc.select(""String_Node_Str"").size() > 0) {
    table=doc.select(""String_Node_Str"");
    DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"").withLocale(Locale.GERMAN);
    for (    Element tr : table) {
      if (tr.hasClass(""String_Node_Str"") || tr.select(""String_Node_Str"").size() == 0 || tr.select(""String_Node_Str"").size() == 0 || tr.select(""String_Node_Str"").size() == 0) {
        continue;
      }
      Copy copy=new Copy();
      copy.setShelfmark(tr.select(""String_Node_Str"").first().text());
      copy.setBranch(tr.select(""String_Node_Str"").first().text());
      String status=tr.select(""String_Node_Str"").first().text();
      if (status.contains(""String_Node_Str"")) {
        copy.setReturnDate(fmt.parseLocalDate(status.replaceAll(""String_Node_Str"",""String_Node_Str"")));
        copy.setReservations(status.replaceAll(""String_Node_Str"",""String_Node_Str""));
        copy.setStatus(""String_Node_Str"");
      }
 else {
        copy.setStatus(status);
      }
      item.addCopy(copy);
    }
  }
  for (  Element a : doc.select(""String_Node_Str"")) {
    if (a.attr(""String_Node_Str"").contains(""String_Node_Str"")) {
      item.setReservable(true);
      item.setReservation_info(id);
      break;
    }
  }
  for (  Element a : doc.select(""String_Node_Str"")) {
    if (a.text().trim().matches(""String_Node_Str"")) {
      Map<String,String> volumesearch=new HashMap<>();
      volumesearch.put(""String_Node_Str"",getQueryParamsFirst(a.attr(""String_Node_Str"")).get(""String_Node_Str""));
      item.setVolumesearch(volumesearch);
    }
  }
  return item;
}"
86156,"@Override public DetailledItem getResult(int position) throws IOException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}","@Override public DetailedItem getResult(int position) throws IOException {
  throw new UnsupportedOperationException(""String_Node_Str"");
}"
86157,"protected DetailledItem parse_result(String html) throws IOException {
  Document doc=Jsoup.parse(html);
  DetailledItem result=new DetailledItem();
  String id=null;
  if (doc.select(""String_Node_Str"").size() > 0) {
    id=doc.select(""String_Node_Str"").first().val().trim();
  }
 else   if (doc.select(""String_Node_Str"").size() > 0) {
    String href=doc.select(""String_Node_Str"").first().attr(""String_Node_Str"");
    id=getQueryParamsFirst(href).get(""String_Node_Str"").trim();
  }
  result.setId(id);
  newShareLinks=doc.select(""String_Node_Str"").size() > 0;
  Elements table=doc.select(""String_Node_Str"").get(1).select(""String_Node_Str"");
  String imgUrl=table.get(0).select(""String_Node_Str"" + ""String_Node_Str"").attr(""String_Node_Str"");
  result.setCover(imgUrl);
  Copy copy=new Copy();
  for (  Element element : table) {
    String detail=element.select(""String_Node_Str"").text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    String title=element.select(""String_Node_Str"").text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    if (!title.equals(""String_Node_Str"")) {
      if (title.contains(""String_Node_Str"")) {
        if (detail.equals(""String_Node_Str"")) {
          copy.setStatus(""String_Node_Str"");
        }
 else {
          copy.setStatus(""String_Node_Str"" + detail);
        }
      }
 else       if (title.contains(""String_Node_Str"")) {
        copy.setDepartment(detail);
      }
 else       if (title.contains(""String_Node_Str"")) {
        copy.setShelfmark(detail);
      }
 else       if (title.contains(""String_Node_Str"")) {
        result.setTitle(detail);
      }
 else       if (!title.contains(""String_Node_Str"")) {
        result.addDetail(new Detail(title,detail));
      }
    }
  }
  if (""String_Node_Str"".equals(copy.getStatus()) || doc.select(""String_Node_Str"").size() == 0) {
    result.setReservable(false);
  }
 else {
    result.setReservable(true);
    if (doc.select(""String_Node_Str"").size() > 0) {
      result.setReservation_info(doc.select(""String_Node_Str"").first().attr(""String_Node_Str"").substring(1).replace(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      Element form=doc.select(""String_Node_Str"").first().parent();
      result.setReservation_info(generateQuery(form));
    }
  }
  if (copy.notEmpty())   result.addCopy(copy);
  return result;
}","protected DetailedItem parse_result(String html) throws IOException {
  Document doc=Jsoup.parse(html);
  DetailedItem result=new DetailedItem();
  String id=null;
  if (doc.select(""String_Node_Str"").size() > 0) {
    id=doc.select(""String_Node_Str"").first().val().trim();
  }
 else   if (doc.select(""String_Node_Str"").size() > 0) {
    String href=doc.select(""String_Node_Str"").first().attr(""String_Node_Str"");
    id=getQueryParamsFirst(href).get(""String_Node_Str"").trim();
  }
  result.setId(id);
  newShareLinks=doc.select(""String_Node_Str"").size() > 0;
  Elements table=doc.select(""String_Node_Str"").get(1).select(""String_Node_Str"");
  String imgUrl=table.get(0).select(""String_Node_Str"" + ""String_Node_Str"").attr(""String_Node_Str"");
  result.setCover(imgUrl);
  Copy copy=new Copy();
  for (  Element element : table) {
    String detail=element.select(""String_Node_Str"").text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    String title=element.select(""String_Node_Str"").text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    if (!title.equals(""String_Node_Str"")) {
      if (title.contains(""String_Node_Str"")) {
        if (detail.equals(""String_Node_Str"")) {
          copy.setStatus(""String_Node_Str"");
        }
 else {
          copy.setStatus(""String_Node_Str"" + detail);
        }
      }
 else       if (title.contains(""String_Node_Str"")) {
        copy.setDepartment(detail);
      }
 else       if (title.contains(""String_Node_Str"")) {
        copy.setShelfmark(detail);
      }
 else       if (title.contains(""String_Node_Str"")) {
        result.setTitle(detail);
      }
 else       if (!title.contains(""String_Node_Str"")) {
        result.addDetail(new Detail(title,detail));
      }
    }
  }
  if (""String_Node_Str"".equals(copy.getStatus()) || doc.select(""String_Node_Str"").size() == 0) {
    result.setReservable(false);
  }
 else {
    result.setReservable(true);
    if (doc.select(""String_Node_Str"").size() > 0) {
      result.setReservation_info(doc.select(""String_Node_Str"").first().attr(""String_Node_Str"").substring(1).replace(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      Element form=doc.select(""String_Node_Str"").first().parent();
      result.setReservation_info(generateQuery(form));
    }
  }
  if (copy.notEmpty())   result.addCopy(copy);
  return result;
}"
86158,"@Override public ReservationResult reservation(DetailledItem item,Account account,int useraction,String selection) throws IOException {
  String reservation_info=item.getReservation_info();
  String html=httpGet(opac_url + ""String_Node_Str"" + reservation_info,getDefaultEncoding());
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").first().text().contains(""String_Node_Str"")) {
    return new ReservationResult(MultiStepResult.Status.ERROR,doc.select(""String_Node_Str"").first().text().trim());
  }
  if (doc.select(""String_Node_Str"").size() == 0) {
    return new ReservationResult(MultiStepResult.Status.ERROR);
  }
  Element form=doc.select(""String_Node_Str"").first();
  List<BasicNameValuePair> params=new ArrayList<>();
  params.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
  params.add(new BasicNameValuePair(""String_Node_Str"",account.getPassword()));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  for (  Element input : form.select(""String_Node_Str"")) {
    params.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
  }
  html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(params),getDefaultEncoding());
  doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").size() > 0) {
    form=doc.select(""String_Node_Str"").first();
    html=httpGet(opac_url + ""String_Node_Str"" + generateQuery(form),getDefaultEncoding());
    doc=Jsoup.parse(html);
  }
  if (doc.text().contains(""String_Node_Str"") || doc.text().contains(""String_Node_Str"") || doc.text().contains(""String_Node_Str"")) {
    return new ReservationResult(MultiStepResult.Status.ERROR,doc.select(""String_Node_Str"").first().text().trim());
  }
 else {
    return new ReservationResult(MultiStepResult.Status.OK);
  }
}","@Override public ReservationResult reservation(DetailedItem item,Account account,int useraction,String selection) throws IOException {
  String reservation_info=item.getReservation_info();
  String html=httpGet(opac_url + ""String_Node_Str"" + reservation_info,getDefaultEncoding());
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").first().text().contains(""String_Node_Str"")) {
    return new ReservationResult(MultiStepResult.Status.ERROR,doc.select(""String_Node_Str"").first().text().trim());
  }
  if (doc.select(""String_Node_Str"").size() == 0) {
    return new ReservationResult(MultiStepResult.Status.ERROR);
  }
  Element form=doc.select(""String_Node_Str"").first();
  List<BasicNameValuePair> params=new ArrayList<>();
  params.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
  params.add(new BasicNameValuePair(""String_Node_Str"",account.getPassword()));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  for (  Element input : form.select(""String_Node_Str"")) {
    params.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
  }
  html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(params),getDefaultEncoding());
  doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").size() > 0) {
    form=doc.select(""String_Node_Str"").first();
    html=httpGet(opac_url + ""String_Node_Str"" + generateQuery(form),getDefaultEncoding());
    doc=Jsoup.parse(html);
  }
  if (doc.text().contains(""String_Node_Str"") || doc.text().contains(""String_Node_Str"") || doc.text().contains(""String_Node_Str"")) {
    return new ReservationResult(MultiStepResult.Status.ERROR,doc.select(""String_Node_Str"").first().text().trim());
  }
 else {
    return new ReservationResult(MultiStepResult.Status.OK);
  }
}"
86159,"@Override public DetailledItem getResultById(String id,String homebranch) throws IOException {
  if (!initialised) {
    start();
  }
  if (id == null && reusehtml != null) {
    return parse_result(reusehtml);
  }
  String html=httpGet(opac_url + ""String_Node_Str"" + id+ ""String_Node_Str"",getDefaultEncoding());
  return parse_result(html);
}","@Override public DetailedItem getResultById(String id,String homebranch) throws IOException {
  if (!initialised) {
    start();
  }
  if (id == null && reusehtml != null) {
    return parse_result(reusehtml);
  }
  String html=httpGet(opac_url + ""String_Node_Str"" + id+ ""String_Node_Str"",getDefaultEncoding());
  return parse_result(html);
}"
86160,"@Override public DetailledItem getResult(int position) throws IOException {
  if (!initialised) {
    start();
  }
  int page=Double.valueOf(Math.floor(position / 10)).intValue() + 1;
  String html=httpGet(opac_url + ""String_Node_Str"" + page+ ""String_Node_Str""+ rechnr+ ""String_Node_Str""+ (position + 1)+ ""String_Node_Str"",getDefaultEncoding());
  return parse_result(html);
}","@Override public DetailedItem getResult(int position) throws IOException {
  if (!initialised) {
    start();
  }
  int page=Double.valueOf(Math.floor(position / 10)).intValue() + 1;
  String html=httpGet(opac_url + ""String_Node_Str"" + page+ ""String_Node_Str""+ rechnr+ ""String_Node_Str""+ (position + 1)+ ""String_Node_Str"",getDefaultEncoding());
  return parse_result(html);
}"
86161,"@Override public DetailledItem getResultById(String id,String homebranch) throws IOException, OpacErrorException {
  if (!initialised) {
    start();
  }
  final String html=httpGet(getApiUrl() + ""String_Node_Str"" + id,getDefaultEncoding());
  final Document doc=Jsoup.parse(html);
  final Element detailData=doc.select(""String_Node_Str"").first();
  final Element detailTable=detailData.select(""String_Node_Str"").first();
  final Element availabilityTable=doc.select(""String_Node_Str"").first();
  final DetailledItem result=new DetailledItem();
  final Copy copy=new Copy();
  result.addCopy(copy);
  result.setId(id);
  result.setCover(getCover(doc));
  result.setTitle(detailData.select(""String_Node_Str"").first().text());
  result.setMediaType(MEDIA_TYPES.get(getCellContent(detailTable,""String_Node_Str"")));
  copy.setStatus(getCellContent(availabilityTable,""String_Node_Str""));
  copy.setReturnDate(parseCopyReturn(getCellContent(availabilityTable,""String_Node_Str"")));
  copy.setReservations(getCellContent(availabilityTable,""String_Node_Str""));
  for (  final Element tr : detailTable.select(""String_Node_Str"")) {
    final String desc=tr.child(0).text();
    final String content=tr.child(1).text();
    if (desc != null && !desc.trim().equals(""String_Node_Str"")) {
      result.addDetail(new Detail(desc,content));
    }
 else     if (!result.getDetails().isEmpty()) {
      final Detail lastDetail=result.getDetails().get(result.getDetails().size() - 1);
      lastDetail.setHtml(true);
      lastDetail.setContent(lastDetail.getContent() + ""String_Node_Str"" + content);
    }
  }
  return result;
}","@Override public DetailedItem getResultById(String id,String homebranch) throws IOException, OpacErrorException {
  if (!initialised) {
    start();
  }
  final String html=httpGet(getApiUrl() + ""String_Node_Str"" + id,getDefaultEncoding());
  final Document doc=Jsoup.parse(html);
  final Element detailData=doc.select(""String_Node_Str"").first();
  final Element detailTable=detailData.select(""String_Node_Str"").first();
  final Element availabilityTable=doc.select(""String_Node_Str"").first();
  final DetailedItem result=new DetailedItem();
  final Copy copy=new Copy();
  result.addCopy(copy);
  result.setId(id);
  result.setCover(getCover(doc));
  result.setTitle(detailData.select(""String_Node_Str"").first().text());
  result.setMediaType(MEDIA_TYPES.get(getCellContent(detailTable,""String_Node_Str"")));
  copy.setStatus(getCellContent(availabilityTable,""String_Node_Str""));
  copy.setReturnDate(parseCopyReturn(getCellContent(availabilityTable,""String_Node_Str"")));
  copy.setReservations(getCellContent(availabilityTable,""String_Node_Str""));
  for (  final Element tr : detailTable.select(""String_Node_Str"")) {
    final String desc=tr.child(0).text();
    final String content=tr.child(1).text();
    if (desc != null && !desc.trim().equals(""String_Node_Str"")) {
      result.addDetail(new Detail(desc,content));
    }
 else     if (!result.getDetails().isEmpty()) {
      final Detail lastDetail=result.getDetails().get(result.getDetails().size() - 1);
      lastDetail.setHtml(true);
      lastDetail.setContent(lastDetail.getContent() + ""String_Node_Str"" + content);
    }
  }
  return result;
}"
86162,"@Override public DetailledItem getResult(int position) throws IOException, OpacErrorException {
  return null;
}","@Override public DetailedItem getResult(int position) throws IOException, OpacErrorException {
  return null;
}"
86163,"private SearchRequestResult parse_search(String html,int page){
  List<SearchResult> results=new ArrayList<>();
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").text().contains(""String_Node_Str"")) {
    return new SearchRequestResult(results,0,page);
  }
  Elements trList=doc.select(""String_Node_Str"");
  Elements elem;
  int rows_per_hit=2;
  if (trList.size() == 1 || (trList.size() > 1 && trList.get(0).select(""String_Node_Str"").size() > 0 && trList.get(1).select(""String_Node_Str"").size() > 0)) {
    rows_per_hit=1;
  }
  try {
    rows_per_hit=data.getInt(""String_Node_Str"");
  }
 catch (  JSONException e) {
  }
  int results_total;
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(html);
  if (matcher.find()) {
    results_total=Integer.parseInt(matcher.group(1));
  }
 else {
    results_total=-1;
  }
  int numOfEntries=trList.size() / rows_per_hit;
  if (numOfEntries > numOfResultsPerPage) {
    numOfEntries=numOfResultsPerPage;
  }
  for (int i=0; i < numOfEntries; i++) {
    Element tr=trList.get(i * rows_per_hit);
    SearchResult sr=new SearchResult();
    elem=tr.select(""String_Node_Str"");
    if (elem.size() > 0 && !elem.get(0).attr(""String_Node_Str"").contains(""String_Node_Str"")) {
      String hrefID=elem.get(0).attr(""String_Node_Str"");
      sr.setId(hrefID);
    }
 else {
      elem=tr.select(""String_Node_Str"");
      if (elem.size() > 0) {
        String nameID=elem.get(0).attr(""String_Node_Str"").trim();
        String hrefID=""String_Node_Str"" + opacDir + ""String_Node_Str""+ opacSuffix+ ""String_Node_Str""+ nameID+ ""String_Node_Str"";
        sr.setId(hrefID);
      }
    }
    elem=tr.select(""String_Node_Str"");
    if (elem.size() > 0) {
      sr.setType(getMediaTypeFromImageFilename(sr,elem.get(0).attr(""String_Node_Str""),data));
    }
    String desc=""String_Node_Str"";
    try {
      JSONArray searchtable=data.getJSONArray(""String_Node_Str"");
      for (int j=0; j < searchtable.length(); j++) {
        int colNum=searchtable.getInt(j);
        if (j > 0) {
          desc=desc + ""String_Node_Str"";
        }
        String c=tr.child(colNum).html();
        if (tr.child(colNum).childNodes().size() == 1 && tr.child(colNum).select(""String_Node_Str"").size() > 0) {
          c=tr.select(""String_Node_Str"").text();
        }
        desc=desc + c;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    desc=desc.replaceAll(""String_Node_Str"",""String_Node_Str"");
    desc=desc.replaceAll(""String_Node_Str"",""String_Node_Str"");
    desc=desc.replaceAll(""String_Node_Str"",""String_Node_Str"");
    desc=desc.replaceAll(""String_Node_Str"",""String_Node_Str"");
    desc=desc.replaceAll(""String_Node_Str"",""String_Node_Str"");
    sr.setInnerhtml(desc);
    if (tr.select(""String_Node_Str"").size() > 0 && tr.select(""String_Node_Str"").size() == 0) {
      sr.setStatus(Status.GREEN);
    }
 else     if (tr.select(""String_Node_Str"").size() == 0 && tr.select(""String_Node_Str"").size() > 0) {
      sr.setStatus(Status.RED);
    }
 else     if (tr.select(""String_Node_Str"").size() > 0 && tr.select(""String_Node_Str"").size() > 0) {
      sr.setStatus(Status.YELLOW);
    }
    sr.setNr(i / rows_per_hit);
    results.add(sr);
  }
  return new SearchRequestResult(results,results_total,page);
}","private SearchRequestResult parse_search(String html,int page){
  List<SearchResult> results=new ArrayList<>();
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").text().contains(""String_Node_Str"")) {
    return new SearchRequestResult(results,0,page);
  }
  Elements trList=doc.select(""String_Node_Str"");
  if (trList.size() == 0) {
    trList=doc.select(""String_Node_Str"");
  }
  Elements elem;
  int rows_per_hit=2;
  if (trList.size() == 1 || (trList.size() > 1 && trList.get(0).select(""String_Node_Str"").size() > 0 && trList.get(1).select(""String_Node_Str"").size() > 0)) {
    rows_per_hit=1;
  }
  try {
    rows_per_hit=data.getInt(""String_Node_Str"");
  }
 catch (  JSONException e) {
  }
  int results_total;
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(html);
  if (matcher.find()) {
    results_total=Integer.parseInt(matcher.group(1));
  }
 else {
    results_total=-1;
  }
  int numOfEntries=trList.size() / rows_per_hit;
  if (numOfEntries > numOfResultsPerPage) {
    numOfEntries=numOfResultsPerPage;
  }
  for (int i=0; i < numOfEntries; i++) {
    Element tr=trList.get(i * rows_per_hit);
    SearchResult sr=new SearchResult();
    elem=tr.select(""String_Node_Str"");
    if (elem.size() > 0 && !elem.get(0).attr(""String_Node_Str"").contains(""String_Node_Str"")) {
      String hrefID=elem.get(0).attr(""String_Node_Str"");
      sr.setId(hrefID);
    }
 else {
      elem=tr.select(""String_Node_Str"");
      if (elem.size() > 0) {
        String nameID=elem.get(0).attr(""String_Node_Str"").trim();
        String hrefID=""String_Node_Str"" + opacDir + ""String_Node_Str""+ opacSuffix+ ""String_Node_Str""+ nameID+ ""String_Node_Str"";
        sr.setId(hrefID);
      }
    }
    elem=tr.select(""String_Node_Str"");
    if (elem.size() > 0) {
      sr.setType(getMediaTypeFromImageFilename(sr,elem.get(0).attr(""String_Node_Str""),data));
    }
    String desc=""String_Node_Str"";
    try {
      JSONArray searchtable=data.getJSONArray(""String_Node_Str"");
      for (int j=0; j < searchtable.length(); j++) {
        int colNum=searchtable.getInt(j);
        if (j > 0) {
          desc=desc + ""String_Node_Str"";
        }
        String c=tr.child(colNum).html();
        if (tr.child(colNum).childNodes().size() == 1 && tr.child(colNum).select(""String_Node_Str"").size() > 0) {
          c=tr.select(""String_Node_Str"").text();
        }
        desc=desc + c;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    desc=desc.replaceAll(""String_Node_Str"",""String_Node_Str"");
    desc=desc.replaceAll(""String_Node_Str"",""String_Node_Str"");
    desc=desc.replaceAll(""String_Node_Str"",""String_Node_Str"");
    desc=desc.replaceAll(""String_Node_Str"",""String_Node_Str"");
    desc=desc.replaceAll(""String_Node_Str"",""String_Node_Str"");
    sr.setInnerhtml(desc);
    if (tr.select(""String_Node_Str"").size() > 0 && tr.select(""String_Node_Str"").size() == 0) {
      sr.setStatus(Status.GREEN);
    }
 else     if (tr.select(""String_Node_Str"").size() == 0 && tr.select(""String_Node_Str"").size() > 0) {
      sr.setStatus(Status.RED);
    }
 else     if (tr.select(""String_Node_Str"").size() > 0 && tr.select(""String_Node_Str"").size() > 0) {
      sr.setStatus(Status.YELLOW);
    }
    sr.setNr(i / rows_per_hit);
    results.add(sr);
  }
  return new SearchRequestResult(results,results_total,page);
}"
86164,"public void prolongAllDo(){
  MultiStepResultHelper<Void> msrhProlong=new MultiStepResultHelper<>(getActivity(),null,R.string.doing_prolong_all);
  msrhProlong.setCallback(new Callback<Void>(){
    @Override public void onSuccess(    MultiStepResult result){
      if (getActivity() == null) {
        return;
      }
      ProlongAllResult res=(ProlongAllResult)result;
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
      if (res.getResults() != null) {
        LayoutInflater inflater=getLayoutInflater(null);
        View view=inflater.inflate(R.layout.dialog_simple_list,null,false);
        ListView lv=(ListView)view.findViewById(R.id.lvBibs);
        lv.setAdapter(new ProlongAllResultAdapter(getActivity(),res.getResults()));
switch (result.getActionIdentifier()) {
case ReservationResult.ACTION_BRANCH:
          builder.setTitle(R.string.branch);
      }
      builder.setView(view).setNeutralButton(R.string.close,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int id){
          adialog.cancel();
          invalidateData();
        }
      }
);
    }
 else {
      builder.setMessage(result.getMessage()).setCancelable(true).setNegativeButton(R.string.close,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface d,        int id){
          d.cancel();
        }
      }
).setOnCancelListener(new DialogInterface.OnCancelListener(){
        @Override public void onCancel(        DialogInterface d){
          if (d != null) {
            d.cancel();
          }
        }
      }
);
    }
    adialog=builder.create();
    adialog.show();
  }
  @Override public void onError(  MultiStepResult result){
    if (getActivity() == null) {
      return;
    }
    AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
    builder.setMessage(result.getMessage()).setCancelable(true).setNegativeButton(R.string.close,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface d,      int id){
        d.cancel();
      }
    }
).setOnCancelListener(new DialogInterface.OnCancelListener(){
      @Override public void onCancel(      DialogInterface d){
        if (d != null) {
          d.cancel();
        }
      }
    }
);
    AlertDialog alert=builder.create();
    alert.show();
  }
  @Override public void onUnhandledResult(  MultiStepResult result){
  }
  @Override public void onUserCancel(){
  }
  @Override public StepTask<?> newTask(  MultiStepResultHelper helper,  int useraction,  String selection,  Void argument){
    return new ProlongAllTask(helper,useraction,selection);
  }
}
);
msrhProlong.start();
}","public void prolongAllDo(){
  MultiStepResultHelper<Void> msrhProlong=new MultiStepResultHelper<>(getActivity(),null,R.string.doing_prolong_all);
  msrhProlong.setCallback(new Callback<Void>(){
    @Override public void onSuccess(    MultiStepResult result){
      if (getActivity() == null) {
        return;
      }
      ProlongAllResult res=(ProlongAllResult)result;
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
      if (res.getResults() != null) {
        LayoutInflater inflater=getActivity().getLayoutInflater();
        View view=inflater.inflate(R.layout.dialog_simple_list,null,false);
        ListView lv=(ListView)view.findViewById(R.id.lvBibs);
        lv.setAdapter(new ProlongAllResultAdapter(getActivity(),res.getResults()));
switch (result.getActionIdentifier()) {
case ReservationResult.ACTION_BRANCH:
          builder.setTitle(R.string.branch);
      }
      builder.setView(view).setNeutralButton(R.string.close,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int id){
          adialog.cancel();
          invalidateData();
        }
      }
);
    }
 else {
      builder.setMessage(result.getMessage()).setCancelable(true).setNegativeButton(R.string.close,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface d,        int id){
          d.cancel();
        }
      }
).setOnCancelListener(new DialogInterface.OnCancelListener(){
        @Override public void onCancel(        DialogInterface d){
          if (d != null) {
            d.cancel();
          }
        }
      }
);
    }
    adialog=builder.create();
    adialog.show();
  }
  @Override public void onError(  MultiStepResult result){
    if (getActivity() == null) {
      return;
    }
    AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
    builder.setMessage(result.getMessage()).setCancelable(true).setNegativeButton(R.string.close,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface d,      int id){
        d.cancel();
      }
    }
).setOnCancelListener(new DialogInterface.OnCancelListener(){
      @Override public void onCancel(      DialogInterface d){
        if (d != null) {
          d.cancel();
        }
      }
    }
);
    AlertDialog alert=builder.create();
    alert.show();
  }
  @Override public void onUnhandledResult(  MultiStepResult result){
  }
  @Override public void onUserCancel(){
  }
  @Override public StepTask<?> newTask(  MultiStepResultHelper helper,  int useraction,  String selection,  Void argument){
    return new ProlongAllTask(helper,useraction,selection);
  }
}
);
msrhProlong.start();
}"
86165,"public void prolong(final String a){
  long age=System.currentTimeMillis() - refreshtime;
  if (refreshing || age > MAX_CACHE_AGE) {
    Toast.makeText(getActivity(),R.string.account_no_concurrent,Toast.LENGTH_LONG).show();
    if (!refreshing) {
      refresh();
    }
    return;
  }
  final SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  OpacApi api;
  try {
    api=app.getApi();
  }
 catch (  OpacClient.LibraryRemovedException e) {
    return;
  }
  if (sp.getBoolean(""String_Node_Str"",false) || (api.getSupportFlags() & OpacApi.SUPPORT_FLAG_WARN_PROLONG_FEES) > 0) {
    prolongPerform(a);
  }
 else {
    AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
    View content=getLayoutInflater(null).inflate(R.layout.dialog_prolong_confirm,null);
    final CheckBox check=(CheckBox)content.findViewById(R.id.check_box1);
    builder.setView(content).setCancelable(false).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        dialog.cancel();
      }
    }
).setPositiveButton(R.string.reservation_fee_continue,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        if (check.isChecked()) {
          sp.edit().putBoolean(""String_Node_Str"",true).apply();
        }
        prolongPerform(a);
      }
    }
);
    AlertDialog alert=builder.create();
    alert.show();
  }
}","public void prolong(final String a){
  long age=System.currentTimeMillis() - refreshtime;
  if (refreshing || age > MAX_CACHE_AGE) {
    Toast.makeText(getActivity(),R.string.account_no_concurrent,Toast.LENGTH_LONG).show();
    if (!refreshing) {
      refresh();
    }
    return;
  }
  final SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  OpacApi api;
  try {
    api=app.getApi();
  }
 catch (  OpacClient.LibraryRemovedException e) {
    return;
  }
  if (sp.getBoolean(""String_Node_Str"",false) || (api.getSupportFlags() & OpacApi.SUPPORT_FLAG_WARN_PROLONG_FEES) > 0) {
    prolongPerform(a);
  }
 else {
    AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
    View content=getActivity().getLayoutInflater().inflate(R.layout.dialog_prolong_confirm,null);
    final CheckBox check=(CheckBox)content.findViewById(R.id.check_box1);
    builder.setView(content).setCancelable(false).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        dialog.cancel();
      }
    }
).setPositiveButton(R.string.reservation_fee_continue,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        if (check.isChecked()) {
          sp.edit().putBoolean(""String_Node_Str"",true).apply();
        }
        prolongPerform(a);
      }
    }
);
    AlertDialog alert=builder.create();
    alert.show();
  }
}"
86166,"@Override public void onSuccess(MultiStepResult result){
  if (getActivity() == null) {
    return;
  }
  ProlongAllResult res=(ProlongAllResult)result;
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  if (res.getResults() != null) {
    LayoutInflater inflater=getLayoutInflater(null);
    View view=inflater.inflate(R.layout.dialog_simple_list,null,false);
    ListView lv=(ListView)view.findViewById(R.id.lvBibs);
    lv.setAdapter(new ProlongAllResultAdapter(getActivity(),res.getResults()));
switch (result.getActionIdentifier()) {
case ReservationResult.ACTION_BRANCH:
      builder.setTitle(R.string.branch);
  }
  builder.setView(view).setNeutralButton(R.string.close,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
      adialog.cancel();
      invalidateData();
    }
  }
);
}
 else {
  builder.setMessage(result.getMessage()).setCancelable(true).setNegativeButton(R.string.close,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface d,    int id){
      d.cancel();
    }
  }
).setOnCancelListener(new DialogInterface.OnCancelListener(){
    @Override public void onCancel(    DialogInterface d){
      if (d != null) {
        d.cancel();
      }
    }
  }
);
}
adialog=builder.create();
adialog.show();
}","@Override public void onSuccess(MultiStepResult result){
  if (getActivity() == null) {
    return;
  }
  ProlongAllResult res=(ProlongAllResult)result;
  AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
  if (res.getResults() != null) {
    LayoutInflater inflater=getActivity().getLayoutInflater();
    View view=inflater.inflate(R.layout.dialog_simple_list,null,false);
    ListView lv=(ListView)view.findViewById(R.id.lvBibs);
    lv.setAdapter(new ProlongAllResultAdapter(getActivity(),res.getResults()));
switch (result.getActionIdentifier()) {
case ReservationResult.ACTION_BRANCH:
      builder.setTitle(R.string.branch);
  }
  builder.setView(view).setNeutralButton(R.string.close,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
      adialog.cancel();
      invalidateData();
    }
  }
);
}
 else {
  builder.setMessage(result.getMessage()).setCancelable(true).setNegativeButton(R.string.close,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface d,    int id){
      d.cancel();
    }
  }
).setOnCancelListener(new DialogInterface.OnCancelListener(){
    @Override public void onCancel(    DialogInterface d){
      if (d != null) {
        d.cancel();
      }
    }
  }
);
}
adialog=builder.create();
adialog.show();
}"
86167,"protected void buildSearchForm(Map<String,String> restoreQuery){
  if (app.getLibrary().getReplacedBy() != null && sp.getInt(""String_Node_Str"",0) < 5) {
    rlReplaced.setVisibility(View.VISIBLE);
    ivReplacedStore.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        try {
          Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + app.getLibrary().getReplacedBy()));
          startActivity(i);
        }
 catch (        ActivityNotFoundException e) {
          Log.i(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
);
    sp.edit().putInt(""String_Node_Str"",sp.getInt(""String_Node_Str"",0) + 1).commit();
  }
 else {
    rlReplaced.setVisibility(View.GONE);
  }
  llFormFields.removeAllViews();
  llAdvancedFields.removeAllViews();
  llExpand.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      setAdvanced(!advanced);
    }
  }
);
  rlSimpleSearch.setVisibility(View.GONE);
  tvSearchAdvHeader.setVisibility(View.GONE);
  int i=0;
  if (fields == null) {
    return;
  }
  for (  final SearchField field : fields) {
    if (!field.isVisible()) {
      continue;
    }
    ViewGroup v=null;
    if (field instanceof TextSearchField) {
      TextSearchField textSearchField=(TextSearchField)field;
      if (textSearchField.isFreeSearch()) {
        rlSimpleSearch.setVisibility(View.VISIBLE);
        tvSearchAdvHeader.setVisibility(View.VISIBLE);
        etSimpleSearch.setHint(textSearchField.getHint());
      }
 else {
        v=(ViewGroup)getLayoutInflater(null).inflate(R.layout.searchfield_text,llFormFields,false);
        TextView title=(TextView)v.findViewById(R.id.title);
        title.setText(textSearchField.getDisplayName());
        EditText edittext=(EditText)v.findViewById(R.id.edittext);
        edittext.setHint(textSearchField.getHint());
        if (((TextSearchField)field).isNumber()) {
          edittext.setInputType(InputType.TYPE_CLASS_NUMBER);
        }
        if (((TextSearchField)field).isHalfWidth() && i >= 1 && !(fields.get(i - 1) instanceof TextSearchField && ((TextSearchField)fields.get(i - 1)).isFreeSearch())) {
          ViewGroup before=(ViewGroup)view.findViewWithTag(fields.get(i - 1).getId());
          llFormFields.removeView(before);
          llAdvancedFields.removeView(before);
          v.setTag(field.getId());
          View together=makeHalfWidth(before,v);
          v=null;
          if (field.isAdvanced()) {
            llAdvancedFields.addView(together);
          }
 else {
            llFormFields.addView(together);
          }
        }
      }
    }
 else     if (field instanceof BarcodeSearchField) {
      BarcodeSearchField bcSearchField=(BarcodeSearchField)field;
      v=(ViewGroup)getLayoutInflater(null).inflate(R.layout.searchfield_barcode,llFormFields,false);
      TextView title=(TextView)v.findViewById(R.id.title);
      title.setText(bcSearchField.getDisplayName());
      EditText edittext=(EditText)v.findViewById(R.id.edittext);
      edittext.setHint(bcSearchField.getHint());
      ImageView ivBarcode=(ImageView)v.findViewById(R.id.ivBarcode);
      ivBarcode.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View arg0){
          barcodeScanningField=field.getId();
          callback.scanBarcode();
        }
      }
);
      if (((BarcodeSearchField)field).isHalfWidth() && i >= 1 && !(fields.get(i - 1) instanceof TextSearchField && ((TextSearchField)fields.get(i - 1)).isFreeSearch())) {
        ViewGroup before=(ViewGroup)view.findViewWithTag(fields.get(i - 1).getId());
        llFormFields.removeView(before);
        llAdvancedFields.removeView(before);
        v=makeHalfWidth(before,v);
      }
    }
 else     if (field instanceof DropdownSearchField) {
      DropdownSearchField ddSearchField=(DropdownSearchField)field;
      if (ddSearchField.getDropdownValues() == null) {
        continue;
      }
      v=(ViewGroup)getLayoutInflater(null).inflate(R.layout.searchfield_dropdown,llFormFields,false);
      TextView title=(TextView)v.findViewById(R.id.title);
      title.setText(ddSearchField.getDisplayName());
      Spinner spinner=(Spinner)v.findViewById(R.id.spinner);
      spinner.setAdapter(((OpacActivity)getActivity()).new MetaAdapter<DropdownSearchField.Option>(getActivity(),ddSearchField.getDropdownValues(),R.layout.simple_spinner_item));
      if (field.getMeaning() == Meaning.HOME_BRANCH) {
        String selection;
        if (sp.contains(OpacClient.PREF_HOME_BRANCH_PREFIX + app.getAccount().getId())) {
          selection=sp.getString(OpacClient.PREF_HOME_BRANCH_PREFIX + app.getAccount().getId(),""String_Node_Str"");
        }
 else {
          try {
            selection=app.getLibrary().getData().getString(""String_Node_Str"");
          }
 catch (          JSONException e) {
            selection=""String_Node_Str"";
          }
        }
        if (!selection.equals(""String_Node_Str"")) {
          int j=0;
          for (          DropdownSearchField.Option row : ddSearchField.getDropdownValues()) {
            if (row.getKey().equals(selection)) {
              spinner.setSelection(j);
            }
            j++;
          }
        }
      }
    }
 else     if (field instanceof CheckboxSearchField) {
      CheckboxSearchField cbSearchField=(CheckboxSearchField)field;
      v=(ViewGroup)getLayoutInflater(null).inflate(R.layout.searchfield_checkbox,llFormFields,false);
      CheckBox checkbox=(CheckBox)v.findViewById(R.id.checkbox);
      checkbox.setText(cbSearchField.getDisplayName());
    }
    if (v != null) {
      v.setTag(field.getId());
      if (field.isAdvanced()) {
        llAdvancedFields.addView(v);
      }
 else {
        llFormFields.addView(v);
      }
    }
    i++;
  }
  llExpand.setVisibility(llAdvancedFields.getChildCount() == 0 ? View.GONE : View.VISIBLE);
  if (restoreQuery != null) {
    loadQuery(restoreQuery);
  }
}","protected void buildSearchForm(Map<String,String> restoreQuery){
  if (app.getLibrary().getReplacedBy() != null && sp.getInt(""String_Node_Str"",0) < 5) {
    rlReplaced.setVisibility(View.VISIBLE);
    ivReplacedStore.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        try {
          Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + app.getLibrary().getReplacedBy()));
          startActivity(i);
        }
 catch (        ActivityNotFoundException e) {
          Log.i(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
);
    sp.edit().putInt(""String_Node_Str"",sp.getInt(""String_Node_Str"",0) + 1).commit();
  }
 else {
    rlReplaced.setVisibility(View.GONE);
  }
  llFormFields.removeAllViews();
  llAdvancedFields.removeAllViews();
  llExpand.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      setAdvanced(!advanced);
    }
  }
);
  rlSimpleSearch.setVisibility(View.GONE);
  tvSearchAdvHeader.setVisibility(View.GONE);
  int i=0;
  if (fields == null) {
    return;
  }
  for (  final SearchField field : fields) {
    if (!field.isVisible()) {
      continue;
    }
    ViewGroup v=null;
    if (field instanceof TextSearchField) {
      TextSearchField textSearchField=(TextSearchField)field;
      if (textSearchField.isFreeSearch()) {
        rlSimpleSearch.setVisibility(View.VISIBLE);
        tvSearchAdvHeader.setVisibility(View.VISIBLE);
        etSimpleSearch.setHint(textSearchField.getHint());
      }
 else {
        v=(ViewGroup)getActivity().getLayoutInflater().inflate(R.layout.searchfield_text,llFormFields,false);
        TextView title=(TextView)v.findViewById(R.id.title);
        title.setText(textSearchField.getDisplayName());
        EditText edittext=(EditText)v.findViewById(R.id.edittext);
        edittext.setHint(textSearchField.getHint());
        if (((TextSearchField)field).isNumber()) {
          edittext.setInputType(InputType.TYPE_CLASS_NUMBER);
        }
        if (((TextSearchField)field).isHalfWidth() && i >= 1 && !(fields.get(i - 1) instanceof TextSearchField && ((TextSearchField)fields.get(i - 1)).isFreeSearch())) {
          ViewGroup before=(ViewGroup)view.findViewWithTag(fields.get(i - 1).getId());
          llFormFields.removeView(before);
          llAdvancedFields.removeView(before);
          v.setTag(field.getId());
          View together=makeHalfWidth(before,v);
          v=null;
          if (field.isAdvanced()) {
            llAdvancedFields.addView(together);
          }
 else {
            llFormFields.addView(together);
          }
        }
      }
    }
 else     if (field instanceof BarcodeSearchField) {
      BarcodeSearchField bcSearchField=(BarcodeSearchField)field;
      v=(ViewGroup)getActivity().getLayoutInflater().inflate(R.layout.searchfield_barcode,llFormFields,false);
      TextView title=(TextView)v.findViewById(R.id.title);
      title.setText(bcSearchField.getDisplayName());
      EditText edittext=(EditText)v.findViewById(R.id.edittext);
      edittext.setHint(bcSearchField.getHint());
      ImageView ivBarcode=(ImageView)v.findViewById(R.id.ivBarcode);
      ivBarcode.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View arg0){
          barcodeScanningField=field.getId();
          callback.scanBarcode();
        }
      }
);
      if (((BarcodeSearchField)field).isHalfWidth() && i >= 1 && !(fields.get(i - 1) instanceof TextSearchField && ((TextSearchField)fields.get(i - 1)).isFreeSearch())) {
        ViewGroup before=(ViewGroup)view.findViewWithTag(fields.get(i - 1).getId());
        llFormFields.removeView(before);
        llAdvancedFields.removeView(before);
        v=makeHalfWidth(before,v);
      }
    }
 else     if (field instanceof DropdownSearchField) {
      DropdownSearchField ddSearchField=(DropdownSearchField)field;
      if (ddSearchField.getDropdownValues() == null) {
        continue;
      }
      v=(ViewGroup)getActivity().getLayoutInflater().inflate(R.layout.searchfield_dropdown,llFormFields,false);
      TextView title=(TextView)v.findViewById(R.id.title);
      title.setText(ddSearchField.getDisplayName());
      Spinner spinner=(Spinner)v.findViewById(R.id.spinner);
      spinner.setAdapter(((OpacActivity)getActivity()).new MetaAdapter<DropdownSearchField.Option>(getActivity(),ddSearchField.getDropdownValues(),R.layout.simple_spinner_item));
      if (field.getMeaning() == Meaning.HOME_BRANCH) {
        String selection;
        if (sp.contains(OpacClient.PREF_HOME_BRANCH_PREFIX + app.getAccount().getId())) {
          selection=sp.getString(OpacClient.PREF_HOME_BRANCH_PREFIX + app.getAccount().getId(),""String_Node_Str"");
        }
 else {
          try {
            selection=app.getLibrary().getData().getString(""String_Node_Str"");
          }
 catch (          JSONException e) {
            selection=""String_Node_Str"";
          }
        }
        if (!selection.equals(""String_Node_Str"")) {
          int j=0;
          for (          DropdownSearchField.Option row : ddSearchField.getDropdownValues()) {
            if (row.getKey().equals(selection)) {
              spinner.setSelection(j);
            }
            j++;
          }
        }
      }
    }
 else     if (field instanceof CheckboxSearchField) {
      CheckboxSearchField cbSearchField=(CheckboxSearchField)field;
      v=(ViewGroup)getActivity().getLayoutInflater().inflate(R.layout.searchfield_checkbox,llFormFields,false);
      CheckBox checkbox=(CheckBox)v.findViewById(R.id.checkbox);
      checkbox.setText(cbSearchField.getDisplayName());
    }
    if (v != null) {
      v.setTag(field.getId());
      if (field.isAdvanced()) {
        llAdvancedFields.addView(v);
      }
 else {
        llFormFields.addView(v);
      }
    }
    i++;
  }
  llExpand.setVisibility(llAdvancedFields.getChildCount() == 0 ? View.GONE : View.VISIBLE);
  if (restoreQuery != null) {
    loadQuery(restoreQuery);
  }
}"
86168,"protected void reservationStart(){
  if (invalidated) {
    new RestoreSessionTask(false).execute();
  }
  OpacApi api=null;
  try {
    api=app.getApi();
  }
 catch (  OpacClient.LibraryRemovedException e) {
    return;
  }
  if (api instanceof EbookServiceApi) {
    SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
    if (sp.getString(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"") && ((EbookServiceApi)api).isEbook(item)) {
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
      builder.setMessage(getString(R.string.opac_error_email)).setCancelable(false).setNegativeButton(R.string.close,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int id){
          dialog.cancel();
        }
      }
).setPositiveButton(R.string.prefs,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int id){
          dialog.dismiss();
          app.toPrefs(getActivity());
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
      return;
    }
  }
  AccountDataSource data=new AccountDataSource(getActivity());
  final List<Account> accounts=data.getAccountsWithPassword(app.getLibrary().getIdent());
  if (accounts.size() == 0) {
    dialog_no_credentials();
  }
 else   if (accounts.size() > 1 && !getActivity().getIntent().getBooleanExtra(""String_Node_Str"",false) && (api.getSupportFlags() & OpacApi.SUPPORT_FLAG_CHANGE_ACCOUNT) != 0 && !(SearchResultDetailFragment.this.id == null || SearchResultDetailFragment.this.id.equals(""String_Node_Str"") || SearchResultDetailFragment.this.id.equals(""String_Node_Str""))) {
    AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
    LayoutInflater inflater=getLayoutInflater(null);
    View view=inflater.inflate(R.layout.dialog_simple_list,null,false);
    ListView lv=(ListView)view.findViewById(R.id.lvBibs);
    AccountListAdapter adapter=new AccountListAdapter(getActivity(),accounts);
    lv.setAdapter(adapter);
    lv.setOnItemClickListener(new OnItemClickListener(){
      @Override public void onItemClick(      AdapterView<?> parent,      View view,      int position,      long id){
        if (accounts.get(position).getId() != app.getAccount().getId() || account_switched) {
          if (SearchResultDetailFragment.this.id == null || SearchResultDetailFragment.this.id.equals(""String_Node_Str"") || SearchResultDetailFragment.this.id.equals(""String_Node_Str"")) {
            Toast.makeText(getActivity(),R.string.accchange_sorry,Toast.LENGTH_LONG).show();
          }
 else {
            if (app.getAccount().getId() != accounts.get(position).getId()) {
              app.setAccount(accounts.get(position).getId());
            }
            Intent intent=new Intent(getActivity(),SearchResultDetailActivity.class);
            intent.putExtra(SearchResultDetailFragment.ARG_ITEM_ID,SearchResultDetailFragment.this.id);
            intent.putExtra(""String_Node_Str"",true);
            startActivity(intent);
          }
        }
 else {
          reservationDo();
        }
        adialog.dismiss();
      }
    }
);
    builder.setTitle(R.string.account_select).setView(view).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        adialog.cancel();
      }
    }
);
    adialog=builder.create();
    adialog.show();
  }
 else {
    reservationDo();
  }
}","protected void reservationStart(){
  if (invalidated) {
    new RestoreSessionTask(false).execute();
  }
  OpacApi api=null;
  try {
    api=app.getApi();
  }
 catch (  OpacClient.LibraryRemovedException e) {
    return;
  }
  if (api instanceof EbookServiceApi) {
    SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
    if (sp.getString(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"") && ((EbookServiceApi)api).isEbook(item)) {
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
      builder.setMessage(getString(R.string.opac_error_email)).setCancelable(false).setNegativeButton(R.string.close,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int id){
          dialog.cancel();
        }
      }
).setPositiveButton(R.string.prefs,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int id){
          dialog.dismiss();
          app.toPrefs(getActivity());
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
      return;
    }
  }
  AccountDataSource data=new AccountDataSource(getActivity());
  final List<Account> accounts=data.getAccountsWithPassword(app.getLibrary().getIdent());
  if (accounts.size() == 0) {
    dialog_no_credentials();
  }
 else   if (accounts.size() > 1 && !getActivity().getIntent().getBooleanExtra(""String_Node_Str"",false) && (api.getSupportFlags() & OpacApi.SUPPORT_FLAG_CHANGE_ACCOUNT) != 0 && !(SearchResultDetailFragment.this.id == null || SearchResultDetailFragment.this.id.equals(""String_Node_Str"") || SearchResultDetailFragment.this.id.equals(""String_Node_Str""))) {
    AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
    LayoutInflater inflater=getActivity().getLayoutInflater();
    View view=inflater.inflate(R.layout.dialog_simple_list,null,false);
    ListView lv=(ListView)view.findViewById(R.id.lvBibs);
    AccountListAdapter adapter=new AccountListAdapter(getActivity(),accounts);
    lv.setAdapter(adapter);
    lv.setOnItemClickListener(new OnItemClickListener(){
      @Override public void onItemClick(      AdapterView<?> parent,      View view,      int position,      long id){
        if (accounts.get(position).getId() != app.getAccount().getId() || account_switched) {
          if (SearchResultDetailFragment.this.id == null || SearchResultDetailFragment.this.id.equals(""String_Node_Str"") || SearchResultDetailFragment.this.id.equals(""String_Node_Str"")) {
            Toast.makeText(getActivity(),R.string.accchange_sorry,Toast.LENGTH_LONG).show();
          }
 else {
            if (app.getAccount().getId() != accounts.get(position).getId()) {
              app.setAccount(accounts.get(position).getId());
            }
            Intent intent=new Intent(getActivity(),SearchResultDetailActivity.class);
            intent.putExtra(SearchResultDetailFragment.ARG_ITEM_ID,SearchResultDetailFragment.this.id);
            intent.putExtra(""String_Node_Str"",true);
            startActivity(intent);
          }
        }
 else {
          reservationDo();
        }
        adialog.dismiss();
      }
    }
);
    builder.setTitle(R.string.account_select).setView(view).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        adialog.cancel();
      }
    }
);
    adialog=builder.create();
    adialog.show();
  }
 else {
    reservationDo();
  }
}"
86169,"public void reservationDo(){
  final SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  OpacApi api;
  try {
    api=app.getApi();
  }
 catch (  OpacClient.LibraryRemovedException e) {
    return;
  }
  if (sp.getBoolean(""String_Node_Str"",false) || (api.getSupportFlags() & OpacApi.SUPPORT_FLAG_WARN_RESERVATION_FEES) > 0) {
    reservationPerform();
  }
 else {
    AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
    View content=getLayoutInflater(null).inflate(R.layout.dialog_reservation_fees,null);
    final CheckBox check=(CheckBox)content.findViewById(R.id.check_box1);
    builder.setView(content).setCancelable(false).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        dialog.cancel();
      }
    }
).setPositiveButton(R.string.reservation_fee_continue,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        if (check.isChecked()) {
          sp.edit().putBoolean(""String_Node_Str"",true).apply();
        }
        reservationPerform();
      }
    }
);
    AlertDialog alert=builder.create();
    alert.show();
  }
}","public void reservationDo(){
  final SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
  OpacApi api;
  try {
    api=app.getApi();
  }
 catch (  OpacClient.LibraryRemovedException e) {
    return;
  }
  if (sp.getBoolean(""String_Node_Str"",false) || (api.getSupportFlags() & OpacApi.SUPPORT_FLAG_WARN_RESERVATION_FEES) > 0) {
    reservationPerform();
  }
 else {
    AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
    View content=getActivity().getLayoutInflater().inflate(R.layout.dialog_reservation_fees,null);
    final CheckBox check=(CheckBox)content.findViewById(R.id.check_box1);
    builder.setView(content).setCancelable(false).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        dialog.cancel();
      }
    }
).setPositiveButton(R.string.reservation_fee_continue,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        if (check.isChecked()) {
          sp.edit().putBoolean(""String_Node_Str"",true).apply();
        }
        reservationPerform();
      }
    }
);
    AlertDialog alert=builder.create();
    alert.show();
  }
}"
86170,"protected void bookingStart(){
  AccountDataSource data=new AccountDataSource(getActivity());
  final List<Account> accounts=data.getAccountsWithPassword(app.getLibrary().getIdent());
  if (accounts.size() == 0) {
    dialog_no_credentials();
  }
 else   if (accounts.size() > 1) {
    AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
    LayoutInflater inflater=getLayoutInflater(null);
    View view=inflater.inflate(R.layout.dialog_simple_list,null,false);
    ListView lv=(ListView)view.findViewById(R.id.lvBibs);
    AccountListAdapter adapter=new AccountListAdapter(getActivity(),accounts);
    lv.setAdapter(adapter);
    lv.setOnItemClickListener(new OnItemClickListener(){
      @Override public void onItemClick(      AdapterView<?> parent,      View view,      int position,      long id){
        if (app.getAccount().getId() != accounts.get(position).getId()) {
          app.setAccount(accounts.get(position).getId());
        }
        bookingDo();
        adialog.dismiss();
      }
    }
);
    builder.setTitle(R.string.account_select).setView(view).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        adialog.cancel();
      }
    }
);
    adialog=builder.create();
    adialog.show();
  }
 else {
    bookingDo();
  }
}","protected void bookingStart(){
  AccountDataSource data=new AccountDataSource(getActivity());
  final List<Account> accounts=data.getAccountsWithPassword(app.getLibrary().getIdent());
  if (accounts.size() == 0) {
    dialog_no_credentials();
  }
 else   if (accounts.size() > 1) {
    AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
    LayoutInflater inflater=getActivity().getLayoutInflater();
    View view=inflater.inflate(R.layout.dialog_simple_list,null,false);
    ListView lv=(ListView)view.findViewById(R.id.lvBibs);
    AccountListAdapter adapter=new AccountListAdapter(getActivity(),accounts);
    lv.setAdapter(adapter);
    lv.setOnItemClickListener(new OnItemClickListener(){
      @Override public void onItemClick(      AdapterView<?> parent,      View view,      int position,      long id){
        if (app.getAccount().getId() != accounts.get(position).getId()) {
          app.setAccount(accounts.get(position).getId());
        }
        bookingDo();
        adialog.dismiss();
      }
    }
);
    builder.setTitle(R.string.account_select).setView(view).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        adialog.cancel();
      }
    }
);
    adialog=builder.create();
    adialog.show();
  }
 else {
    bookingDo();
  }
}"
86171,"@Override public String getShareUrl(String id,String title){
  try {
    return ""String_Node_Str"" + library.getIdent() + ""String_Node_Str""+ id+ ""String_Node_Str""+ URLEncoder.encode(title,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    return ""String_Node_Str"" + library.getIdent() + ""String_Node_Str""+ id+ ""String_Node_Str""+ title;
  }
}","@Override public String getShareUrl(String id,String title){
  try {
    return ""String_Node_Str"" + URLEncoder.encode(library.getIdent(),""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str""+ id+ ""String_Node_Str""+ URLEncoder.encode(title,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException ignored) {
    return null;
  }
}"
86172,"private Document accountHttpPost(Account account,String func) throws IOException, OpacErrorException {
  List<NameValuePair> nameValuePairs=new ArrayList<>(2);
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",func));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getPassword()));
  String html=httpPost(opacUrl + ""String_Node_Str"" + opacDir+ ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
  Document doc=Jsoup.parse(html);
  if (doc.title().contains(""String_Node_Str"") || (doc.select(""String_Node_Str"").size() > 0 && doc.select(""String_Node_Str"").text().contains(""String_Node_Str""))) {
    String errText=""String_Node_Str"";
    Elements elTable=doc.select(""String_Node_Str"");
    if (elTable.size() > 0) {
      errText=elTable.get(0).text();
    }
    throw new OpacErrorException(errText);
  }
  if (doc.select(""String_Node_Str"").size() == 1) {
    throw new OpacErrorException(doc.select(""String_Node_Str"").text());
  }
  if (doc.text().contains(""String_Node_Str"") || doc.text().contains(""String_Node_Str"") || doc.text().contains(""String_Node_Str"")) {
    throw new OpacErrorException(stringProvider.getString(StringProvider.WRONG_LOGIN_DATA));
  }
  return doc;
}","private Document accountHttpPost(Account account,String func) throws IOException, OpacErrorException {
  List<NameValuePair> nameValuePairs=new ArrayList<>(2);
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",func));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getPassword()));
  String html=httpPost(opacUrl + ""String_Node_Str"" + opacDir+ ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
  Document doc=Jsoup.parse(html);
  if (doc.title().contains(""String_Node_Str"") || (doc.select(""String_Node_Str"").size() > 0 && doc.select(""String_Node_Str"").text().contains(""String_Node_Str""))) {
    String errText=""String_Node_Str"";
    Elements elTable=doc.select(""String_Node_Str"");
    if (elTable.size() > 0) {
      errText=elTable.get(0).text();
    }
    throw new OpacErrorException(errText);
  }
  if (doc.select(""String_Node_Str"").size() == 1) {
    if (!doc.select(""String_Node_Str"").text().contains(""String_Node_Str"")) {
      throw new OpacErrorException(doc.select(""String_Node_Str"").text());
    }
  }
  if (doc.text().contains(""String_Node_Str"") || doc.text().contains(""String_Node_Str"") || doc.text().contains(""String_Node_Str"")) {
    throw new OpacErrorException(stringProvider.getString(StringProvider.WRONG_LOGIN_DATA));
  }
  return doc;
}"
86173,"@Override public SearchRequestResult searchGetPage(int page) throws IOException, OpacErrorException, JSONException {
  if (searchResultDoc == null)   throw new NotReachableException();
  Document doc=searchResultDoc;
  if (doc.select(""String_Node_Str"").size() == 0) {
    String href=doc.select(""String_Node_Str"").first().attr(""String_Node_Str"");
    String url=href.replaceFirst(""String_Node_Str"",""String_Node_Str"" + page);
    Document doc2=Jsoup.parse(httpGet(url,getDefaultEncoding()));
    return parse_search(doc2,page);
  }
 else {
    Elements pageLinks=doc.select(""String_Node_Str"").first().select(""String_Node_Str"");
    int from=Integer.valueOf(pageLinks.first().text());
    int to=Integer.valueOf(pageLinks.last().text());
    Element linkToClick;
    boolean willBeCorrectPage;
    if (page < from) {
      linkToClick=pageLinks.first();
      willBeCorrectPage=false;
    }
 else     if (page > to) {
      linkToClick=pageLinks.last();
      willBeCorrectPage=false;
    }
 else {
      linkToClick=pageLinks.get(page - from);
      willBeCorrectPage=true;
    }
    if (linkToClick.tagName().equals(""String_Node_Str"")) {
      return parse_search(searchResultDoc,page);
    }
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    Matcher matcher=pattern.matcher(linkToClick.attr(""String_Node_Str""));
    if (!matcher.find())     throw new OpacErrorException(StringProvider.INTERNAL_ERROR);
    FormElement form=(FormElement)doc.select(""String_Node_Str"").first();
    HttpEntity data=formData(form,null).addTextBody(""String_Node_Str"",matcher.group(1)).addTextBody(""String_Node_Str"",matcher.group(2)).build();
    String postUrl=form.attr(""String_Node_Str"");
    String html=httpPost(postUrl,data,""String_Node_Str"");
    if (willBeCorrectPage) {
      Document doc2=Jsoup.parse(html);
      doc2.setBaseUri(postUrl);
      return parse_search(doc2,page);
    }
 else {
      searchResultDoc=Jsoup.parse(html);
      searchResultDoc.setBaseUri(postUrl);
      return searchGetPage(page);
    }
  }
}","@Override public SearchRequestResult searchGetPage(int page) throws IOException, OpacErrorException, JSONException {
  if (searchResultDoc == null)   throw new NotReachableException();
  Document doc=searchResultDoc;
  if (doc.select(""String_Node_Str"").size() == 0) {
    if (doc.select(""String_Node_Str"").size() > 0) {
      String href=doc.select(""String_Node_Str"").first().attr(""String_Node_Str"");
      String url=href.replaceFirst(""String_Node_Str"",""String_Node_Str"" + page);
      Document doc2=Jsoup.parse(httpGet(url,getDefaultEncoding()));
      return parse_search(doc2,page);
    }
 else {
      int totalCount;
      try {
        totalCount=Integer.parseInt(doc.select(""String_Node_Str"").first().text());
      }
 catch (      Exception e) {
        totalCount=0;
      }
      return new SearchRequestResult(new ArrayList<SearchResult>(),0,totalCount);
    }
  }
 else {
    Elements pageLinks=doc.select(""String_Node_Str"").first().select(""String_Node_Str"");
    int from=Integer.valueOf(pageLinks.first().text());
    int to=Integer.valueOf(pageLinks.last().text());
    Element linkToClick;
    boolean willBeCorrectPage;
    if (page < from) {
      linkToClick=pageLinks.first();
      willBeCorrectPage=false;
    }
 else     if (page > to) {
      linkToClick=pageLinks.last();
      willBeCorrectPage=false;
    }
 else {
      linkToClick=pageLinks.get(page - from);
      willBeCorrectPage=true;
    }
    if (linkToClick.tagName().equals(""String_Node_Str"")) {
      return parse_search(searchResultDoc,page);
    }
    Pattern pattern=Pattern.compile(""String_Node_Str"");
    Matcher matcher=pattern.matcher(linkToClick.attr(""String_Node_Str""));
    if (!matcher.find())     throw new OpacErrorException(StringProvider.INTERNAL_ERROR);
    FormElement form=(FormElement)doc.select(""String_Node_Str"").first();
    HttpEntity data=formData(form,null).addTextBody(""String_Node_Str"",matcher.group(1)).addTextBody(""String_Node_Str"",matcher.group(2)).build();
    String postUrl=form.attr(""String_Node_Str"");
    String html=httpPost(postUrl,data,""String_Node_Str"");
    if (willBeCorrectPage) {
      Document doc2=Jsoup.parse(html);
      doc2.setBaseUri(postUrl);
      return parse_search(doc2,page);
    }
 else {
      searchResultDoc=Jsoup.parse(html);
      searchResultDoc.setBaseUri(postUrl);
      return searchGetPage(page);
    }
  }
}"
86174,"@Override public void accountSelected(Account account){
  errorView.removeAllViews();
  progress(false);
  if (!app.getLibrary().isActive()) {
    showConnectivityError(getString(R.string.library_removed_error),false);
    return;
  }
  SearchFieldDataSource dataSource=new JsonSearchFieldDataSource(app);
  int versionCode=BuildConfig.VERSION_CODE;
  String language=getActivity().getResources().getConfiguration().locale.getLanguage();
  if (dataSource.hasSearchFields(app.getLibrary().getIdent()) && dataSource.getLastSearchFieldUpdateVersion(app.getLibrary().getIdent()) == versionCode && language.equals(dataSource.getSearchFieldLanguage(app.getLibrary().getIdent()))) {
    if (task != null && !task.isCancelled()) {
      task.cancel(true);
    }
    fields=dataSource.getSearchFields(app.getLibrary().getIdent());
    buildSearchForm(savedState != null ? OpacClient.bundleToMap(savedState) : saveQuery());
    savedState=null;
  }
 else {
    executeNewLoadSearchFieldsTask();
  }
  setAdvanced(false);
}","@Override public void accountSelected(Account account){
  errorView.removeAllViews();
  progress(false);
  if (!app.getLibrary().isActive()) {
    showConnectivityError(getString(R.string.library_removed_error),false);
    return;
  }
  SearchFieldDataSource dataSource=new JsonSearchFieldDataSource(app);
  int versionCode=0;
  try {
    versionCode=getActivity().getPackageManager().getPackageInfo(getActivity().getPackageName(),0).versionCode;
  }
 catch (  NameNotFoundException e) {
  }
  String language=getActivity().getResources().getConfiguration().locale.getLanguage();
  if (dataSource.hasSearchFields(app.getLibrary().getIdent()) && dataSource.getLastSearchFieldUpdateVersion(app.getLibrary().getIdent()) == versionCode && language.equals(dataSource.getSearchFieldLanguage(app.getLibrary().getIdent()))) {
    if (task != null && !task.isCancelled()) {
      task.cancel(true);
    }
    fields=dataSource.getSearchFields(app.getLibrary().getIdent());
    buildSearchForm(savedState != null ? OpacClient.bundleToMap(savedState) : saveQuery());
    savedState=null;
  }
 else {
    executeNewLoadSearchFieldsTask();
  }
  setAdvanced(false);
}"
86175,"protected static void setTextOrHide(CharSequence value,TextView tv){
  if (!TextUtils.isEmpty(value)) {
    tv.setText(value);
  }
 else {
    tv.setVisibility(View.GONE);
  }
}","protected static void setTextOrHide(CharSequence value,TextView tv){
  if (!TextUtils.isEmpty(value)) {
    tv.setVisibility(View.VISIBLE);
    tv.setText(value);
  }
 else {
    tv.setVisibility(View.GONE);
  }
}"
86176,"@Override public void setItem(final ReservedItem item){
  super.setItem(item);
  DateTimeFormatter fmt=DateTimeFormat.shortDate();
  SpannableStringBuilder status=new SpannableStringBuilder();
  if (item.getStatus() != null) {
    int start=status.length();
    status.append(Html.fromHtml(item.getStatus()));
    status.setSpan(new ForegroundColorSpan(textColorPrimary),start,start + Html.fromHtml(item.getStatus()).length(),0);
    if (item.getReadyDate() != null || item.getExpirationDate() != null) {
      status.append(""String_Node_Str"");
    }
  }
  if (item.getReadyDate() != null) {
    status.append(context.getString(R.string.reservation_expire_until)).append(""String_Node_Str"").append(fmt.print(item.getReadyDate()));
  }
  if (item.getExpirationDate() != null) {
    if (item.getReadyDate() != null)     status.append(""String_Node_Str"");
    status.append(fmt.print(item.getExpirationDate()));
  }
  if (status.length() > 0) {
    tvStatus.setText(status);
  }
 else {
    tvStatus.setVisibility(View.GONE);
  }
  ivProlong.setVisibility(View.GONE);
  ivDownload.setVisibility(View.GONE);
  if (item.getBookingData() != null) {
    ivBooking.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View arg0){
        callback.bookingStart(item.getBookingData());
      }
    }
);
    ivBooking.setVisibility(View.VISIBLE);
    ivCancel.setVisibility(View.GONE);
  }
 else   if (item.getCancelData() != null) {
    ivCancel.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View arg0){
        callback.cancel(item.getCancelData());
      }
    }
);
    ivCancel.setVisibility(View.VISIBLE);
    ivBooking.setVisibility(View.GONE);
  }
 else {
    ivCancel.setVisibility(View.INVISIBLE);
    ivBooking.setVisibility(View.GONE);
  }
  itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      callback.onClick(item,ViewHolder.this);
    }
  }
);
}","@Override public void setItem(final ReservedItem item){
  super.setItem(item);
  DateTimeFormatter fmt=DateTimeFormat.shortDate();
  SpannableStringBuilder status=new SpannableStringBuilder();
  if (item.getStatus() != null) {
    int start=status.length();
    status.append(Html.fromHtml(item.getStatus()));
    status.setSpan(new ForegroundColorSpan(textColorPrimary),start,start + Html.fromHtml(item.getStatus()).length(),0);
    if (item.getReadyDate() != null || item.getExpirationDate() != null) {
      status.append(""String_Node_Str"");
    }
  }
  if (item.getReadyDate() != null) {
    status.append(fmt.print(item.getReadyDate()));
  }
  if (item.getExpirationDate() != null) {
    if (item.getReadyDate() != null)     status.append(""String_Node_Str"");
    status.append(context.getString(R.string.reservation_expire_until)).append(""String_Node_Str"").append(fmt.print(item.getExpirationDate()));
  }
  setTextOrHide(status,tvStatus);
  ivProlong.setVisibility(View.GONE);
  ivDownload.setVisibility(View.GONE);
  if (item.getBookingData() != null) {
    ivBooking.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View arg0){
        callback.bookingStart(item.getBookingData());
      }
    }
);
    ivBooking.setVisibility(View.VISIBLE);
    ivCancel.setVisibility(View.GONE);
  }
 else   if (item.getCancelData() != null) {
    ivCancel.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View arg0){
        callback.cancel(item.getCancelData());
      }
    }
);
    ivCancel.setVisibility(View.VISIBLE);
    ivBooking.setVisibility(View.GONE);
  }
 else {
    ivCancel.setVisibility(View.INVISIBLE);
    ivBooking.setVisibility(View.GONE);
  }
  itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      callback.onClick(item,ViewHolder.this);
    }
  }
);
}"
86177,"public void setItem(I item){
  if (item.getTitle() != null && item.getAuthor() != null) {
    tvTitleAndAuthor.setText(item.getTitle() + ""String_Node_Str"" + item.getAuthor());
  }
 else   if (item.getTitle() != null) {
    tvTitleAndAuthor.setText(item.getTitle());
  }
 else {
    setTextOrHide(item.getAuthor(),tvTitleAndAuthor);
  }
  if (coversHidden) {
    ivMediaType.setVisibility(View.GONE);
    ivCover.setVisibility(View.GONE);
  }
 else {
    if (item.getCover() != null) {
      ivCover.setVisibility(View.VISIBLE);
      ivMediaType.setVisibility(View.GONE);
      Glide.with(context).using(new ISBNToolsUrlLoader(context)).load(item.getCover()).placeholder(ContextCompat.getDrawable(context,R.drawable.ic_loading)).crossFade().into(ivCover);
    }
 else {
      ivCover.setVisibility(View.GONE);
      ivMediaType.setVisibility(View.VISIBLE);
      Glide.clear(ivCover);
    }
    if (item.getMediaType() != null) {
      ivMediaType.setImageResource(ResultsAdapter.getResourceByMediaType(item.getMediaType()));
      ivMediaType.setContentDescription(sp.getMediaTypeName(item.getMediaType()));
    }
  }
}","public void setItem(I item){
  if (item.getTitle() != null && item.getAuthor() != null) {
    tvTitleAndAuthor.setText(item.getTitle() + ""String_Node_Str"" + item.getAuthor());
  }
 else   if (item.getTitle() != null) {
    tvTitleAndAuthor.setText(item.getTitle());
  }
 else {
    setTextOrHide(item.getAuthor(),tvTitleAndAuthor);
  }
  if (coversHidden) {
    ivMediaType.setVisibility(View.GONE);
    ivCover.setVisibility(View.GONE);
  }
 else {
    if (item.getCover() != null) {
      ivCover.setVisibility(View.VISIBLE);
      ivMediaType.setVisibility(View.GONE);
      Glide.with(context).using(new ISBNToolsUrlLoader(context)).load(item.getCover()).placeholder(ContextCompat.getDrawable(context,R.drawable.ic_loading)).crossFade().into(ivCover);
    }
 else {
      ivCover.setVisibility(View.GONE);
      ivMediaType.setVisibility(View.VISIBLE);
      Glide.clear(ivCover);
    }
    if (item.getMediaType() != null) {
      ivMediaType.setImageResource(ResultsAdapter.getResourceByMediaType(item.getMediaType()));
      ivMediaType.setContentDescription(sp.getMediaTypeName(item.getMediaType()));
    }
 else {
      ivMediaType.setVisibility(View.INVISIBLE);
    }
  }
}"
86178,"public void setItem(I item){
  if (item.getTitle() != null && item.getAuthor() != null) {
    tvTitleAndAuthor.setText(item.getTitle() + ""String_Node_Str"" + item.getAuthor());
  }
 else   if (item.getTitle() != null) {
    tvTitleAndAuthor.setText(item.getTitle());
  }
 else {
    setTextOrHide(item.getAuthor(),tvTitleAndAuthor);
  }
  if (coversHidden) {
    ivMediaType.setVisibility(View.GONE);
    ivCover.setVisibility(View.GONE);
  }
 else {
    if (item.getCover() != null) {
      ivCover.setVisibility(View.VISIBLE);
      ivMediaType.setVisibility(View.GONE);
      Glide.with(context).using(new ISBNToolsUrlLoader(context)).load(item.getCover()).placeholder(ContextCompat.getDrawable(context,R.drawable.ic_loading)).crossFade().into(ivCover);
    }
 else {
      ivCover.setVisibility(View.GONE);
      ivMediaType.setVisibility(View.VISIBLE);
      Glide.clear(ivCover);
    }
    if (item.getMediaType() != null) {
      ivMediaType.setImageResource(ResultsAdapter.getResourceByMediaType(item.getMediaType()));
      ivMediaType.setContentDescription(sp.getMediaTypeName(item.getMediaType()));
    }
 else {
      ivMediaType.setVisibility(View.INVISIBLE);
    }
  }
}","public void setItem(I item){
  if (item.getTitle() != null && item.getAuthor() != null) {
    tvTitleAndAuthor.setText(item.getTitle() + ""String_Node_Str"" + item.getAuthor());
  }
 else   if (item.getTitle() != null) {
    tvTitleAndAuthor.setText(item.getTitle());
  }
 else {
    setTextOrHide(item.getAuthor(),tvTitleAndAuthor);
  }
  if (coversHidden) {
    ivMediaType.setVisibility(View.GONE);
    ivCover.setVisibility(View.GONE);
  }
 else {
    if (item.getCover() != null) {
      ivCover.setVisibility(View.VISIBLE);
      ivMediaType.setVisibility(View.GONE);
      Drawable loading=VectorDrawableCompat.create(context.getResources(),R.drawable.ic_loading,null);
      Glide.with(context).using(new ISBNToolsUrlLoader(context)).load(item.getCover()).placeholder(loading).crossFade().into(ivCover);
    }
 else {
      ivCover.setVisibility(View.GONE);
      ivMediaType.setVisibility(View.VISIBLE);
      Glide.clear(ivCover);
    }
    if (item.getMediaType() != null) {
      ivMediaType.setImageResource(ResultsAdapter.getResourceByMediaType(item.getMediaType()));
      ivMediaType.setContentDescription(sp.getMediaTypeName(item.getMediaType()));
    }
 else {
      ivMediaType.setVisibility(View.INVISIBLE);
    }
  }
}"
86179,"@Override public void setItem(final LentItem item){
  super.setItem(item);
  DateTimeFormatter fmt=DateTimeFormat.shortDate();
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(context);
  final int tolerance=Integer.parseInt(sp.getString(""String_Node_Str"",""String_Node_Str""));
  SpannableStringBuilder builder=new SpannableStringBuilder();
  if (item.getDeadline() != null) {
    builder.append(fmt.print(item.getDeadline()),new ForegroundColorSpan(textColorPrimary),0);
    if (item.getStatus() != null)     builder.append(""String_Node_Str"");
  }
  if (item.getStatus() != null) {
    builder.append(Html.fromHtml(item.getStatus()));
  }
  setTextOrHide(builder,tvStatus);
  if (item.getDeadline() != null) {
    if (item.getDeadline().equals(LocalDate.now()) || item.getDeadline().isBefore(LocalDate.now())) {
      vStatusColor.setBackgroundColor(ContextCompat.getColor(context,R.color.date_overdue));
    }
 else     if (Days.daysBetween(LocalDate.now(),item.getDeadline()).getDays() <= tolerance) {
      vStatusColor.setBackgroundColor(ContextCompat.getColor(context,R.color.date_warning));
    }
 else     if (item.getDownloadData() != null) {
      vStatusColor.setBackgroundColor(ContextCompat.getColor(context,R.color.account_downloadable));
    }
 else {
      vStatusColor.setBackground(null);
    }
  }
 else   if (item.getDownloadData() != null) {
    vStatusColor.setBackgroundColor(ContextCompat.getColor(context,R.color.account_downloadable));
  }
 else {
    vStatusColor.setBackground(null);
  }
  ivCancel.setVisibility(View.GONE);
  ivBooking.setVisibility(View.GONE);
  if (item.getProlongData() != null) {
    ivProlong.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View arg0){
        callback.prolong(item.getProlongData());
      }
    }
);
    ivProlong.setVisibility(View.VISIBLE);
    ViewCompat.setAlpha(ivProlong,item.isRenewable() ? 1f : 0.4f);
    ivDownload.setVisibility(View.GONE);
  }
 else   if (item.getDownloadData() != null && api != null && api instanceof EbookServiceApi) {
    ivDownload.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View arg0){
        callback.download(item.getDownloadData());
      }
    }
);
    ivProlong.setVisibility(View.GONE);
    ivDownload.setVisibility(View.VISIBLE);
  }
 else {
    ivProlong.setVisibility(View.INVISIBLE);
    ivDownload.setVisibility(View.GONE);
  }
  itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      callback.onClick(item,ViewHolder.this);
    }
  }
);
}","@Override public void setItem(final LentItem item){
  super.setItem(item);
  DateTimeFormatter fmt=DateTimeFormat.shortDate();
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(context);
  final int tolerance=Integer.parseInt(sp.getString(""String_Node_Str"",""String_Node_Str""));
  SpannableStringBuilder builder=new SpannableStringBuilder();
  if (item.getDeadline() != null) {
    int start=builder.length();
    builder.append(fmt.print(item.getDeadline()));
    builder.setSpan(new ForegroundColorSpan(textColorPrimary),start,start + fmt.print(item.getDeadline()).length(),0);
    if (item.getStatus() != null)     builder.append(""String_Node_Str"");
  }
  if (item.getStatus() != null) {
    builder.append(Html.fromHtml(item.getStatus()));
  }
  setTextOrHide(builder,tvStatus);
  if (item.getDeadline() != null) {
    if (item.getDeadline().equals(LocalDate.now()) || item.getDeadline().isBefore(LocalDate.now())) {
      vStatusColor.setBackgroundColor(ContextCompat.getColor(context,R.color.date_overdue));
    }
 else     if (Days.daysBetween(LocalDate.now(),item.getDeadline()).getDays() <= tolerance) {
      vStatusColor.setBackgroundColor(ContextCompat.getColor(context,R.color.date_warning));
    }
 else     if (item.getDownloadData() != null) {
      vStatusColor.setBackgroundColor(ContextCompat.getColor(context,R.color.account_downloadable));
    }
 else {
      vStatusColor.setBackground(null);
    }
  }
 else   if (item.getDownloadData() != null) {
    vStatusColor.setBackgroundColor(ContextCompat.getColor(context,R.color.account_downloadable));
  }
 else {
    vStatusColor.setBackground(null);
  }
  ivCancel.setVisibility(View.GONE);
  ivBooking.setVisibility(View.GONE);
  if (item.getProlongData() != null) {
    ivProlong.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View arg0){
        callback.prolong(item.getProlongData());
      }
    }
);
    ivProlong.setVisibility(View.VISIBLE);
    ViewCompat.setAlpha(ivProlong,item.isRenewable() ? 1f : 0.4f);
    ivDownload.setVisibility(View.GONE);
  }
 else   if (item.getDownloadData() != null && api != null && api instanceof EbookServiceApi) {
    ivDownload.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View arg0){
        callback.download(item.getDownloadData());
      }
    }
);
    ivProlong.setVisibility(View.GONE);
    ivDownload.setVisibility(View.VISIBLE);
  }
 else {
    ivProlong.setVisibility(View.INVISIBLE);
    ivDownload.setVisibility(View.GONE);
  }
  itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      callback.onClick(item,ViewHolder.this);
    }
  }
);
}"
86180,"@Override public void setItem(final ReservedItem item){
  super.setItem(item);
  DateTimeFormatter fmt=DateTimeFormat.shortDate();
  SpannableStringBuilder status=new SpannableStringBuilder();
  if (item.getStatus() != null) {
    status.append(Html.fromHtml(item.getStatus()),new ForegroundColorSpan(textColorPrimary),0);
    if (item.getReadyDate() != null || item.getExpirationDate() != null) {
      status.append(""String_Node_Str"");
    }
  }
  if (item.getReadyDate() != null) {
    status.append(context.getString(R.string.reservation_expire_until)).append(""String_Node_Str"").append(fmt.print(item.getReadyDate()));
  }
  if (item.getExpirationDate() != null) {
    if (item.getReadyDate() != null)     status.append(""String_Node_Str"");
    status.append(fmt.print(item.getExpirationDate()));
  }
  if (status.length() > 0) {
    tvStatus.setText(status);
  }
 else {
    tvStatus.setVisibility(View.GONE);
  }
  ivProlong.setVisibility(View.GONE);
  ivDownload.setVisibility(View.GONE);
  if (item.getBookingData() != null) {
    ivBooking.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View arg0){
        callback.bookingStart(item.getBookingData());
      }
    }
);
    ivBooking.setVisibility(View.VISIBLE);
    ivCancel.setVisibility(View.GONE);
  }
 else   if (item.getCancelData() != null) {
    ivCancel.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View arg0){
        callback.cancel(item.getCancelData());
      }
    }
);
    ivCancel.setVisibility(View.VISIBLE);
    ivBooking.setVisibility(View.GONE);
  }
 else {
    ivCancel.setVisibility(View.INVISIBLE);
    ivBooking.setVisibility(View.GONE);
  }
  itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      callback.onClick(item,ViewHolder.this);
    }
  }
);
}","@Override public void setItem(final ReservedItem item){
  super.setItem(item);
  DateTimeFormatter fmt=DateTimeFormat.shortDate();
  SpannableStringBuilder status=new SpannableStringBuilder();
  if (item.getStatus() != null) {
    int start=status.length();
    status.append(Html.fromHtml(item.getStatus()));
    status.setSpan(new ForegroundColorSpan(textColorPrimary),start,start + Html.fromHtml(item.getStatus()).length(),0);
    if (item.getReadyDate() != null || item.getExpirationDate() != null) {
      status.append(""String_Node_Str"");
    }
  }
  if (item.getReadyDate() != null) {
    status.append(context.getString(R.string.reservation_expire_until)).append(""String_Node_Str"").append(fmt.print(item.getReadyDate()));
  }
  if (item.getExpirationDate() != null) {
    if (item.getReadyDate() != null)     status.append(""String_Node_Str"");
    status.append(fmt.print(item.getExpirationDate()));
  }
  if (status.length() > 0) {
    tvStatus.setText(status);
  }
 else {
    tvStatus.setVisibility(View.GONE);
  }
  ivProlong.setVisibility(View.GONE);
  ivDownload.setVisibility(View.GONE);
  if (item.getBookingData() != null) {
    ivBooking.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View arg0){
        callback.bookingStart(item.getBookingData());
      }
    }
);
    ivBooking.setVisibility(View.VISIBLE);
    ivCancel.setVisibility(View.GONE);
  }
 else   if (item.getCancelData() != null) {
    ivCancel.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View arg0){
        callback.cancel(item.getCancelData());
      }
    }
);
    ivCancel.setVisibility(View.VISIBLE);
    ivBooking.setVisibility(View.GONE);
  }
 else {
    ivCancel.setVisibility(View.INVISIBLE);
    ivBooking.setVisibility(View.GONE);
  }
  itemView.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View view){
      callback.onClick(item,ViewHolder.this);
    }
  }
);
}"
86181,"public List<Library> getLibraries(ProgressCallback callback) throws IOException {
  AssetManager assets=getAssets();
  String[] files=assets.list(ASSETS_BIBSDIR);
  int num=files.length;
  List<Library> libs=new ArrayList<>();
  StringBuilder builder;
  BufferedReader reader;
  InputStream fis;
  String line;
  String json;
  for (int i=0; i < num; i++) {
    try {
      Library lib=getLibrary(files[i].substring(0,files[i].length() - ""String_Node_Str"".length()));
      if ((!lib.getApi().equals(""String_Node_Str"") || BuildConfig.DEBUG) && lib.isActive()) {
        libs.add(lib);
      }
    }
 catch (    JSONException e) {
      Log.w(""String_Node_Str"",""String_Node_Str"" + files[i]);
      e.printStackTrace();
    }
    if (callback != null && i % 10 == 0 && i > 0) {
      callback.publishProgress(((double)i) / num);
    }
  }
  return libs;
}","public List<Library> getLibraries(ProgressCallback callback) throws IOException {
  AssetManager assets=getAssets();
  String[] files=assets.list(ASSETS_BIBSDIR);
  String[] additionalFiles=getLibrariesDir().list();
  Set<String> allFiles=new HashSet<>();
  Collections.addAll(allFiles,files);
  Collections.addAll(allFiles,additionalFiles);
  int num=allFiles.size();
  List<Library> libs=new ArrayList<>();
  int i=0;
  for (  String file : allFiles) {
    try {
      Library lib=getLibrary(file.substring(0,file.length() - ""String_Node_Str"".length()));
      if ((!lib.getApi().equals(""String_Node_Str"") || BuildConfig.DEBUG) && lib.isActive()) {
        libs.add(lib);
      }
    }
 catch (    JSONException e) {
      Log.w(""String_Node_Str"",""String_Node_Str"" + file);
      e.printStackTrace();
    }
    if (callback != null && i % 10 == 0 && i > 0) {
      callback.publishProgress(((double)i) / num);
    }
    i++;
  }
  return libs;
}"
86182,"public JSONObject toJSON() throws JSONException {
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",api);
  json.put(""String_Node_Str"",city);
  json.put(""String_Node_Str"",title);
  json.put(""String_Node_Str"",country);
  json.put(""String_Node_Str"",state);
  json.put(""String_Node_Str"",data);
  json.put(""String_Node_Str"",account_supported);
  json.put(""String_Node_Str"",nfcSupported);
  json.put(""String_Node_Str"",information);
  if (displayName != null)   json.put(""String_Node_Str"",displayName);
  json.put(""String_Node_Str"",replacedby);
  JSONArray geoJson=new JSONArray();
  geoJson.put(geo[0]);
  geoJson.put(geo[1]);
  json.put(""String_Node_Str"",geoJson);
  return json;
}","public JSONObject toJSON() throws JSONException {
  JSONObject json=new JSONObject();
  json.put(""String_Node_Str"",api);
  json.put(""String_Node_Str"",city);
  json.put(""String_Node_Str"",title);
  json.put(""String_Node_Str"",country);
  json.put(""String_Node_Str"",state);
  json.put(""String_Node_Str"",data);
  json.put(""String_Node_Str"",account_supported);
  json.put(""String_Node_Str"",nfcSupported);
  json.put(""String_Node_Str"",information);
  if (displayName != null)   json.put(""String_Node_Str"",displayName);
  json.put(""String_Node_Str"",replacedby);
  if (geo != null) {
    JSONArray geoJson=new JSONArray();
    geoJson.put(geo[0]);
    geoJson.put(geo[1]);
    json.put(""String_Node_Str"",geoJson);
  }
 else {
    json.put(""String_Node_Str"",(Object)null);
  }
  return json;
}"
86183,"/** 
 * Create a Library object based on a <code>JSONObject</code>.
 * @param ident identifier
 * @param input input data
 * @return new Library object
 * @throws JSONException if parsing failed or objects were missing
 * @see #getIdent()
 */
public static Library fromJSON(String ident,JSONObject input) throws JSONException {
  Library lib=new Library();
  lib.setIdent(ident);
  lib.setApi(input.getString(""String_Node_Str""));
  lib.setCity(input.getString(""String_Node_Str""));
  lib.setTitle(input.getString(""String_Node_Str""));
  lib.setCountry(input.getString(""String_Node_Str""));
  lib.setState(input.getString(""String_Node_Str""));
  lib.setData(input.getJSONObject(""String_Node_Str""));
  lib.setAccountSupported(input.getBoolean(""String_Node_Str""));
  lib.setNfcSupported(input.optBoolean(""String_Node_Str"",false));
  lib.setInformation(input.getString(""String_Node_Str""));
  if (lib.getInformation() == null && lib.getData().has(""String_Node_Str"")) {
    lib.setInformation(lib.getData().getString(""String_Node_Str""));
  }
  if (input.has(""String_Node_Str""))   lib.setDisplayName(input.getString(""String_Node_Str""));
  if (input.has(""String_Node_Str""))   lib.setReplacedBy(input.getString(""String_Node_Str""));
  if (input.has(""String_Node_Str"")) {
    double[] geo=new double[2];
    geo[0]=input.getJSONArray(""String_Node_Str"").getDouble(0);
    geo[1]=input.getJSONArray(""String_Node_Str"").getDouble(1);
    lib.setGeo(geo);
  }
  if (lib.getTitle().equals(""String_Node_Str""))   lib.setTitle(null);
  return lib;
}","/** 
 * Create a Library object based on a <code>JSONObject</code>.
 * @param ident identifier
 * @param input input data
 * @return new Library object
 * @throws JSONException if parsing failed or objects were missing
 * @see #getIdent()
 */
public static Library fromJSON(String ident,JSONObject input) throws JSONException {
  Library lib=new Library();
  lib.setIdent(ident);
  lib.setApi(input.getString(""String_Node_Str""));
  lib.setCity(input.getString(""String_Node_Str""));
  lib.setTitle(input.getString(""String_Node_Str""));
  lib.setCountry(input.getString(""String_Node_Str""));
  lib.setState(input.getString(""String_Node_Str""));
  lib.setData(input.getJSONObject(""String_Node_Str""));
  lib.setAccountSupported(input.getBoolean(""String_Node_Str""));
  lib.setNfcSupported(input.optBoolean(""String_Node_Str"",false));
  lib.setInformation(input.getString(""String_Node_Str""));
  if (lib.getInformation() == null && lib.getData().has(""String_Node_Str"")) {
    lib.setInformation(lib.getData().getString(""String_Node_Str""));
  }
  if (input.has(""String_Node_Str""))   lib.setDisplayName(input.getString(""String_Node_Str""));
  if (input.has(""String_Node_Str""))   lib.setReplacedBy(input.getString(""String_Node_Str""));
  if (input.has(""String_Node_Str"") && !input.isNull(""String_Node_Str"")) {
    double[] geo=new double[2];
    geo[0]=input.getJSONArray(""String_Node_Str"").getDouble(0);
    geo[1]=input.getJSONArray(""String_Node_Str"").getDouble(1);
    lib.setGeo(geo);
  }
  if (lib.getTitle().equals(""String_Node_Str""))   lib.setTitle(null);
  return lib;
}"
86184,"@Override public SearchRequestResult search(List<SearchQuery> queries) throws IOException, OpacErrorException {
  start();
  Document doc=htmlGet(opac_url + ""String_Node_Str"" + s_sid+ ""String_Node_Str""+ s_service+ ""String_Node_Str""+ s_exts);
  int dropdownTextCount=0;
  int totalCount=0;
  List<NameValuePair> nvpairs=new ArrayList<>();
  for (  SearchQuery query : queries) {
    if (!query.getValue().equals(""String_Node_Str"")) {
      totalCount++;
      if (query.getSearchField() instanceof DropdownSearchField) {
        doc.select(""String_Node_Str"" + query.getKey()).val(query.getValue());
        continue;
      }
      if (query.getSearchField() instanceof TextSearchField && query.getSearchField().getData() != null && !query.getSearchField().getData().optBoolean(""String_Node_Str"",true) && doc.select(""String_Node_Str"" + query.getKey()).size() > 0) {
        doc.select(""String_Node_Str"" + query.getKey()).val(query.getValue());
        continue;
      }
      dropdownTextCount++;
      if (s_exts.equals(""String_Node_Str"") || (query.getSearchField().getData() != null && !query.getSearchField().getData().optBoolean(""String_Node_Str"",true))) {
        doc.select(""String_Node_Str"" + query.getKey()).val(query.getValue());
      }
 else {
        if (doc.select(""String_Node_Str"").size() == 0) {
          doc.select(""String_Node_Str"" + dropdownTextCount + ""String_Node_Str"").first().previousElementSibling().val(query.getKey());
          doc.select(""String_Node_Str"" + dropdownTextCount + ""String_Node_Str"").val(query.getValue());
        }
 else {
          doc.select(""String_Node_Str"" + dropdownTextCount).val(query.getKey());
          doc.select(""String_Node_Str"" + dropdownTextCount).val(query.getValue());
        }
      }
      if (dropdownTextCount > 4) {
        throw new OpacErrorException(stringProvider.getQuantityString(StringProvider.LIMITED_NUM_OF_CRITERIA,4,4));
      }
    }
  }
  for (  Element input : doc.select(""String_Node_Str"")) {
    if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
      nvpairs.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
    }
  }
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  if (totalCount == 0) {
    throw new OpacErrorException(stringProvider.getString(StringProvider.NO_CRITERIA_INPUT));
  }
  Document docresults=htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs);
  return parse_search_wrapped(docresults,1);
}","@Override public SearchRequestResult search(List<SearchQuery> queries) throws IOException, OpacErrorException {
  start();
  Document doc=htmlGet(opac_url + ""String_Node_Str"" + s_sid+ ""String_Node_Str""+ s_service+ ""String_Node_Str""+ s_exts);
  int dropdownTextCount=0;
  int totalCount=0;
  List<NameValuePair> nvpairs=new ArrayList<>();
  for (  SearchQuery query : queries) {
    if (!query.getValue().equals(""String_Node_Str"")) {
      totalCount++;
      if (query.getSearchField() instanceof DropdownSearchField) {
        doc.select(""String_Node_Str"" + query.getKey()).val(query.getValue());
        continue;
      }
      if (query.getSearchField() instanceof TextSearchField && query.getSearchField().getData() != null && !query.getSearchField().getData().optBoolean(""String_Node_Str"",true) && doc.select(""String_Node_Str"" + query.getKey()).size() > 0) {
        doc.select(""String_Node_Str"" + query.getKey()).val(query.getValue());
        continue;
      }
      dropdownTextCount++;
      if (s_exts.equals(""String_Node_Str"") || (query.getSearchField().getData() != null && !query.getSearchField().getData().optBoolean(""String_Node_Str"",true))) {
        doc.select(""String_Node_Str"" + query.getKey()).val(query.getValue());
      }
 else {
        if (doc.select(""String_Node_Str"").size() == 0 && doc.select(""String_Node_Str"" + dropdownTextCount + ""String_Node_Str"").size() == 0) {
          doc.select(""String_Node_Str"" + dropdownTextCount + ""String_Node_Str"").first().previousElementSibling().val(query.getKey());
          doc.select(""String_Node_Str"" + dropdownTextCount + ""String_Node_Str"").val(query.getValue());
        }
 else {
          doc.select(""String_Node_Str"" + dropdownTextCount).val(query.getKey());
          doc.select(""String_Node_Str"" + dropdownTextCount).val(query.getValue());
        }
      }
      if (dropdownTextCount > 4) {
        throw new OpacErrorException(stringProvider.getQuantityString(StringProvider.LIMITED_NUM_OF_CRITERIA,4,4));
      }
    }
  }
  for (  Element input : doc.select(""String_Node_Str"")) {
    if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
      nvpairs.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
    }
  }
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  if (totalCount == 0) {
    throw new OpacErrorException(stringProvider.getString(StringProvider.NO_CRITERIA_INPUT));
  }
  Document docresults=htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs);
  return parse_search_wrapped(docresults,1);
}"
86185,"@Override public DetailledItem getResultById(String id,String homebranch) throws IOException, OpacErrorException {
  Document doc;
  List<NameValuePair> nvpairs;
  if (id == null && s_reusedoc != null) {
    doc=s_reusedoc;
  }
 else {
    nvpairs=s_pageform;
    int i=0;
    List<Integer> indexes=new ArrayList<>();
    for (    NameValuePair np : nvpairs) {
      if (np.getName().contains(""String_Node_Str"") || np.getName().contains(""String_Node_Str"")) {
        indexes.add(i);
      }
      i++;
    }
    for (int j=indexes.size() - 1; j >= 0; j--) {
      nvpairs.remove((int)indexes.get(j));
    }
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str"" + id));
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs);
    List<NameValuePair> form=new ArrayList<>();
    for (    Element input : doc.select(""String_Node_Str"")) {
      if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
        form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
      }
    }
    form.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str"" + id));
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
  }
  DetailledItem res=new DetailledItem();
  if (doc.select(""String_Node_Str"").size() == 1) {
    res.setCover(doc.select(""String_Node_Str"").first().absUrl(""String_Node_Str""));
  }
  for (  Element tr : doc.select(""String_Node_Str"")) {
    if (tr.children().size() < 2) {
      continue;
    }
    String title=tr.child(0).text().trim();
    String value=tr.child(1).text().trim();
    if (value.contains(""String_Node_Str"") || value.startsWith(""String_Node_Str"") || title.contains(""String_Node_Str"")) {
      res.addDetail(new Detail(title,tr.child(1).select(""String_Node_Str"").first().absUrl(""String_Node_Str"")));
    }
 else {
      res.addDetail(new Detail(title,value));
    }
    if (title.contains(""String_Node_Str"") && res.getTitle() == null) {
      res.setTitle(value.split(""String_Node_Str"")[0].trim());
    }
  }
  if (res.getTitle() == null) {
    for (    Detail d : res.getDetails()) {
      if (d.getDesc().contains(""String_Node_Str"")) {
        res.setTitle(d.getContent());
        break;
      }
    }
  }
  if (doc.select(""String_Node_Str"").size() > 0 && id != null) {
    res.setReservable(true);
    res.setReservation_info(id);
  }
  Map<Integer,String> colmap=new HashMap<>();
  int i=0;
  for (  Element th : doc.select(""String_Node_Str"" + ""String_Node_Str"")) {
    String head=th.text().trim();
    if (head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"")) {
      colmap.put(i,""String_Node_Str"");
    }
 else     if (head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"")) {
      colmap.put(i,""String_Node_Str"");
    }
 else     if (head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"")) {
      colmap.put(i,""String_Node_Str"");
    }
 else     if (head.contains(""String_Node_Str"")) {
      colmap.put(i,""String_Node_Str"");
    }
 else     if (head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"") || head.matches(""String_Node_Str"")|| head.contains(""String_Node_Str"")) {
      colmap.put(i,""String_Node_Str"");
    }
    i++;
  }
  DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"").withLocale(Locale.GERMAN);
  for (  Element tr : doc.select(""String_Node_Str"" + ""String_Node_Str"")) {
    Copy copy=new Copy();
    for (    Entry<Integer,String> entry : colmap.entrySet()) {
      if (entry.getValue().equals(""String_Node_Str"")) {
        String status=tr.child(entry.getKey()).text().trim();
        if (status.contains(""String_Node_Str"")) {
          copy.setStatus(status.split(""String_Node_Str"")[0]);
          try {
            copy.setReturnDate(fmt.parseLocalDate(status.split(""String_Node_Str"")[1]));
          }
 catch (          IllegalArgumentException e) {
            e.printStackTrace();
          }
        }
 else {
          copy.setStatus(status);
        }
      }
 else {
        copy.set(entry.getValue(),tr.child(entry.getKey()).text().trim());
      }
    }
    res.addCopy(copy);
  }
  s_pageform=new ArrayList<>();
  for (  Element input : doc.select(""String_Node_Str"")) {
    if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
      s_pageform.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
    }
  }
  nvpairs=s_pageform;
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  parse_search(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
  nvpairs=s_pageform;
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  parse_search(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
  res.setId(""String_Node_Str"");
  return res;
}","@Override public DetailledItem getResultById(String id,String homebranch) throws IOException, OpacErrorException {
  Document doc;
  List<NameValuePair> nvpairs;
  if (id == null && s_reusedoc != null) {
    doc=s_reusedoc;
  }
 else {
    nvpairs=s_pageform;
    int i=0;
    List<Integer> indexes=new ArrayList<>();
    for (    NameValuePair np : nvpairs) {
      if (np.getName().contains(""String_Node_Str"") || np.getName().contains(""String_Node_Str"")) {
        indexes.add(i);
      }
      i++;
    }
    for (int j=indexes.size() - 1; j >= 0; j--) {
      nvpairs.remove((int)indexes.get(j));
    }
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str"" + id));
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs);
    List<NameValuePair> form=new ArrayList<>();
    for (    Element input : doc.select(""String_Node_Str"")) {
      if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
        form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
      }
    }
    form.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str"" + id));
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
  }
  DetailledItem res=new DetailledItem();
  if (doc.select(""String_Node_Str"").size() == 1) {
    String cover_url=doc.select(""String_Node_Str"").first().absUrl(""String_Node_Str"");
    if (!cover_url.endsWith(""String_Node_Str"")) {
      res.setCover(cover_url);
    }
  }
  for (  Element tr : doc.select(""String_Node_Str"")) {
    if (tr.children().size() < 2) {
      continue;
    }
    String title=tr.child(0).text().trim();
    String value=tr.child(1).text().trim();
    if (value.contains(""String_Node_Str"") || value.startsWith(""String_Node_Str"") || title.contains(""String_Node_Str"")) {
      res.addDetail(new Detail(title,tr.child(1).select(""String_Node_Str"").first().absUrl(""String_Node_Str"")));
    }
 else {
      res.addDetail(new Detail(title,value));
    }
    if (title.contains(""String_Node_Str"") && res.getTitle() == null) {
      res.setTitle(value.split(""String_Node_Str"")[0].trim());
    }
  }
  if (res.getTitle() == null) {
    for (    Detail d : res.getDetails()) {
      if (d.getDesc().contains(""String_Node_Str"")) {
        res.setTitle(d.getContent());
        break;
      }
    }
  }
  if (doc.select(""String_Node_Str"").size() > 0 && id != null) {
    res.setReservable(true);
    res.setReservation_info(id);
  }
  Map<Integer,String> colmap=new HashMap<>();
  int i=0;
  for (  Element th : doc.select(""String_Node_Str"" + ""String_Node_Str"")) {
    String head=th.text().trim();
    if (head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"")) {
      colmap.put(i,""String_Node_Str"");
    }
 else     if (head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"")) {
      colmap.put(i,""String_Node_Str"");
    }
 else     if (head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"")) {
      colmap.put(i,""String_Node_Str"");
    }
 else     if (head.contains(""String_Node_Str"")) {
      colmap.put(i,""String_Node_Str"");
    }
 else     if (head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"") || head.matches(""String_Node_Str"")|| head.contains(""String_Node_Str"")) {
      colmap.put(i,""String_Node_Str"");
    }
    i++;
  }
  DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"").withLocale(Locale.GERMAN);
  for (  Element tr : doc.select(""String_Node_Str"" + ""String_Node_Str"")) {
    Copy copy=new Copy();
    for (    Entry<Integer,String> entry : colmap.entrySet()) {
      if (entry.getValue().equals(""String_Node_Str"")) {
        String status=tr.child(entry.getKey()).text().trim();
        if (status.contains(""String_Node_Str"")) {
          copy.setStatus(status.split(""String_Node_Str"")[0]);
          try {
            copy.setReturnDate(fmt.parseLocalDate(status.split(""String_Node_Str"")[1]));
          }
 catch (          IllegalArgumentException e) {
            e.printStackTrace();
          }
        }
 else {
          copy.setStatus(status);
        }
      }
 else {
        copy.set(entry.getValue(),tr.child(entry.getKey()).text().trim());
      }
    }
    res.addCopy(copy);
  }
  s_pageform=new ArrayList<>();
  for (  Element input : doc.select(""String_Node_Str"")) {
    if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
      s_pageform.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
    }
  }
  nvpairs=s_pageform;
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  parse_search(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
  nvpairs=s_pageform;
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  parse_search(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
  res.setId(""String_Node_Str"");
  return res;
}"
86186,"public static AccountData parse_account(Account acc,Document doc,JSONObject data) throws JSONException, NotReachableException {
  JSONObject copymap=data.getJSONObject(""String_Node_Str"");
  List<LentItem> media=new ArrayList<>();
  if (doc.select(""String_Node_Str"").size() == 0) {
    throw new NotReachableException();
  }
  Elements exemplartrs=doc.select(""String_Node_Str"").get(0).select(""String_Node_Str"");
  DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"").withLocale(Locale.GERMAN);
  for (int i=0; i < exemplartrs.size(); i++) {
    Element tr=exemplartrs.get(i);
    LentItem item=new LentItem();
    Iterator<?> keys=copymap.keys();
    while (keys.hasNext()) {
      String key=(String)keys.next();
      int index;
      try {
        index=copymap.has(key) ? copymap.getInt(key) : -1;
      }
 catch (      JSONException e1) {
        index=-1;
      }
      if (index >= 0) {
        if (key.equals(""String_Node_Str"")) {
          if (tr.child(index).children().size() > 0) {
            item.setProlongData(tr.child(index).child(0).attr(""String_Node_Str""));
            item.setRenewable(!tr.child(index).child(0).attr(""String_Node_Str"").contains(""String_Node_Str""));
          }
        }
 else         if (key.equals(""String_Node_Str"")) {
          try {
            item.setDeadline(fmt.parseLocalDate(tr.child(index).text()));
          }
 catch (          IllegalArgumentException e1) {
            e1.printStackTrace();
          }
        }
 else {
          item.set(key,tr.child(index).text());
        }
      }
    }
    media.add(item);
  }
  assert(doc.select(""String_Node_Str"").get(0).select(""String_Node_Str"").size() > 0);
  assert(exemplartrs.size() == media.size());
  copymap=data.getJSONObject(""String_Node_Str"");
  List<ReservedItem> reservations=new ArrayList<>();
  exemplartrs=doc.select(""String_Node_Str"").get(1).select(""String_Node_Str"");
  for (int i=0; i < exemplartrs.size(); i++) {
    Element tr=exemplartrs.get(i);
    ReservedItem item=new ReservedItem();
    Iterator<?> keys=copymap.keys();
    while (keys.hasNext()) {
      String key=(String)keys.next();
      int index;
      try {
        index=copymap.has(key) ? copymap.getInt(key) : -1;
      }
 catch (      JSONException e1) {
        index=-1;
      }
      if (index >= 0) {
        if (key.equals(""String_Node_Str"")) {
          if (tr.child(index).children().size() > 0) {
            item.setCancelData(tr.child(index).child(0).attr(""String_Node_Str""));
          }
        }
 else         if (key.equals(""String_Node_Str"")) {
          try {
            item.setReadyDate(fmt.parseLocalDate(tr.child(index).text()));
          }
 catch (          IllegalArgumentException e1) {
            item.setStatus(tr.child(index).text());
          }
        }
 else         if (key.equals(""String_Node_Str"")) {
          try {
            item.setExpirationDate(fmt.parseLocalDate(tr.child(index).text()));
          }
 catch (          IllegalArgumentException e1) {
            item.setStatus(tr.child(index).text());
          }
        }
 else {
          item.set(key,tr.child(index).text());
        }
      }
    }
    reservations.add(item);
  }
  assert(doc.select(""String_Node_Str"").get(1).select(""String_Node_Str"").size() > 0);
  assert(exemplartrs.size() == reservations.size());
  AccountData res=new AccountData(acc.getId());
  for (  Element row : doc.select(""String_Node_Str"")) {
    String text=row.text().trim();
    if (text.matches(""String_Node_Str"")) {
      text=text.replaceAll(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"");
      res.setPendingFees(text);
    }
    if (text.matches(""String_Node_Str"")) {
      text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
      res.setValidUntil(text);
    }
 else     if (text.matches(""String_Node_Str"")) {
      text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
      res.setValidUntil(text);
    }
  }
  res.setLent(media);
  res.setReservations(reservations);
  return res;
}","public static AccountData parse_account(Account acc,Document doc,JSONObject data) throws JSONException, NotReachableException {
  JSONObject copymap=data.getJSONObject(""String_Node_Str"");
  List<LentItem> media=new ArrayList<>();
  if (doc.select(""String_Node_Str"").size() == 0) {
    throw new NotReachableException();
  }
  Elements exemplartrs=doc.select(""String_Node_Str"").get(0).select(""String_Node_Str"");
  DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"").withLocale(Locale.GERMAN);
  DateTimeFormatter fmt2=DateTimeFormat.forPattern(""String_Node_Str"").withLocale(Locale.GERMAN);
  for (int i=0; i < exemplartrs.size(); i++) {
    Element tr=exemplartrs.get(i);
    LentItem item=new LentItem();
    Iterator<?> keys=copymap.keys();
    while (keys.hasNext()) {
      String key=(String)keys.next();
      int index;
      try {
        index=copymap.has(key) ? copymap.getInt(key) : -1;
      }
 catch (      JSONException e1) {
        index=-1;
      }
      if (index >= 0) {
        if (key.equals(""String_Node_Str"")) {
          if (tr.child(index).children().size() > 0) {
            item.setProlongData(tr.child(index).child(0).attr(""String_Node_Str""));
            item.setRenewable(!tr.child(index).child(0).attr(""String_Node_Str"").contains(""String_Node_Str""));
          }
        }
 else         if (key.equals(""String_Node_Str"")) {
          try {
            item.setDeadline(fmt.parseLocalDate(tr.child(index).text()));
          }
 catch (          IllegalArgumentException e1) {
            try {
              item.setDeadline(fmt2.parseLocalDate(tr.child(index).text()));
            }
 catch (            IllegalArgumentException e2) {
              e2.printStackTrace();
            }
          }
        }
 else {
          item.set(key,tr.child(index).text());
        }
      }
    }
    media.add(item);
  }
  assert(doc.select(""String_Node_Str"").get(0).select(""String_Node_Str"").size() > 0);
  assert(exemplartrs.size() == media.size());
  copymap=data.getJSONObject(""String_Node_Str"");
  List<ReservedItem> reservations=new ArrayList<>();
  exemplartrs=doc.select(""String_Node_Str"").get(1).select(""String_Node_Str"");
  for (int i=0; i < exemplartrs.size(); i++) {
    Element tr=exemplartrs.get(i);
    ReservedItem item=new ReservedItem();
    Iterator<?> keys=copymap.keys();
    while (keys.hasNext()) {
      String key=(String)keys.next();
      int index;
      try {
        index=copymap.has(key) ? copymap.getInt(key) : -1;
      }
 catch (      JSONException e1) {
        index=-1;
      }
      if (index >= 0) {
        if (key.equals(""String_Node_Str"")) {
          if (tr.child(index).children().size() > 0) {
            item.setCancelData(tr.child(index).child(0).attr(""String_Node_Str""));
          }
        }
 else         if (key.equals(""String_Node_Str"")) {
          try {
            item.setReadyDate(fmt.parseLocalDate(tr.child(index).text()));
          }
 catch (          IllegalArgumentException e1) {
            try {
              item.setReadyDate(fmt2.parseLocalDate(tr.child(index).text()));
            }
 catch (            IllegalArgumentException e2) {
              e2.printStackTrace();
            }
          }
        }
 else         if (key.equals(""String_Node_Str"")) {
          try {
            item.setExpirationDate(fmt.parseLocalDate(tr.child(index).text()));
          }
 catch (          IllegalArgumentException e1) {
            try {
              item.setExpirationDate(fmt2.parseLocalDate(tr.child(index).text()));
            }
 catch (            IllegalArgumentException e2) {
              item.setStatus(tr.child(index).text());
            }
          }
        }
 else {
          item.set(key,tr.child(index).text());
        }
      }
    }
    reservations.add(item);
  }
  assert(doc.select(""String_Node_Str"").get(1).select(""String_Node_Str"").size() > 0);
  assert(exemplartrs.size() == reservations.size());
  AccountData res=new AccountData(acc.getId());
  for (  Element row : doc.select(""String_Node_Str"")) {
    String text=row.text().trim();
    if (text.matches(""String_Node_Str"")) {
      text=text.replaceAll(""String_Node_Str"" + ""String_Node_Str"",""String_Node_Str"");
      res.setPendingFees(text);
    }
    if (text.matches(""String_Node_Str"")) {
      text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
      res.setValidUntil(text);
    }
 else     if (text.matches(""String_Node_Str"")) {
      text=text.replaceAll(""String_Node_Str"",""String_Node_Str"");
      res.setValidUntil(text);
    }
  }
  res.setLent(media);
  res.setReservations(reservations);
  return res;
}"
86187,"@Test public void testParseReservationList() throws OpacApi.OpacErrorException, JSONException, NotReachableException {
  String html=readResource(""String_Node_Str"" + file);
  if (html == null)   return;
  if (file.equals(""String_Node_Str"") || file.equals(""String_Node_Str"") || file.equals(""String_Node_Str""))   return;
  AccountData data=Bibliotheca.parse_account(new Account(),Jsoup.parse(html),getData(file));
  assertTrue(data.getReservations().size() > 0);
  for (  ReservedItem item : data.getReservations()) {
    assertNotNull(item.getTitle());
    assertNotNull(item.getAuthor());
  }
}","@Test public void testParseReservationList() throws OpacApi.OpacErrorException, JSONException, NotReachableException {
  String html=readResource(""String_Node_Str"" + file);
  if (html == null)   return;
  if (file.equals(""String_Node_Str"") || file.equals(""String_Node_Str"") || file.equals(""String_Node_Str"")|| file.equals(""String_Node_Str""))   return;
  AccountData data=Bibliotheca.parse_account(new Account(),Jsoup.parse(html),getData(file));
  assertTrue(data.getReservations().size() > 0);
  for (  ReservedItem item : data.getReservations()) {
    assertNotNull(item.getTitle());
    assertNotNull(item.getAuthor());
  }
}"
86188,"private JSONObject getData(String file) throws JSONException {
  JSONObject json=new JSONObject();
  JSONObject accounttable=new JSONObject();
  JSONObject reservationtable=new JSONObject();
  if (file.equals(""String_Node_Str"")) {
    accounttable.put(""String_Node_Str"",0);
    accounttable.put(""String_Node_Str"",3);
    accounttable.put(""String_Node_Str"",-1);
    accounttable.put(""String_Node_Str"",-1);
    accounttable.put(""String_Node_Str"",4);
    accounttable.put(""String_Node_Str"",2);
    accounttable.put(""String_Node_Str"",-1);
    accounttable.put(""String_Node_Str"",1);
    reservationtable.put(""String_Node_Str"",0);
    reservationtable.put(""String_Node_Str"",2);
    reservationtable.put(""String_Node_Str"",-1);
    reservationtable.put(""String_Node_Str"",3);
    reservationtable.put(""String_Node_Str"",-1);
    reservationtable.put(""String_Node_Str"",1);
  }
 else   if (file.equals(""String_Node_Str"")) {
    accounttable.put(""String_Node_Str"",0);
    accounttable.put(""String_Node_Str"",3);
    accounttable.put(""String_Node_Str"",-1);
    accounttable.put(""String_Node_Str"",-1);
    accounttable.put(""String_Node_Str"",4);
    accounttable.put(""String_Node_Str"",2);
    accounttable.put(""String_Node_Str"",-1);
    accounttable.put(""String_Node_Str"",1);
    reservationtable.put(""String_Node_Str"",0);
    reservationtable.put(""String_Node_Str"",2);
    reservationtable.put(""String_Node_Str"",-1);
    reservationtable.put(""String_Node_Str"",3);
    reservationtable.put(""String_Node_Str"",-1);
    reservationtable.put(""String_Node_Str"",1);
  }
 else   if (file.equals(""String_Node_Str"")) {
    accounttable.put(""String_Node_Str"",1);
    accounttable.put(""String_Node_Str"",-1);
    accounttable.put(""String_Node_Str"",0);
    accounttable.put(""String_Node_Str"",-1);
    accounttable.put(""String_Node_Str"",6);
    accounttable.put(""String_Node_Str"",3);
    accounttable.put(""String_Node_Str"",5);
    accounttable.put(""String_Node_Str"",2);
    reservationtable.put(""String_Node_Str"",1);
    reservationtable.put(""String_Node_Str"",-1);
    reservationtable.put(""String_Node_Str"",0);
    reservationtable.put(""String_Node_Str"",3);
    reservationtable.put(""String_Node_Str"",-1);
    reservationtable.put(""String_Node_Str"",2);
  }
 else   if (file.equals(""String_Node_Str"")) {
    accounttable=new JSONObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    reservationtable=new JSONObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  json.put(""String_Node_Str"",accounttable);
  json.put(""String_Node_Str"",reservationtable);
  return json;
}","private JSONObject getData(String file) throws JSONException {
  JSONObject json=new JSONObject();
  JSONObject accounttable=new JSONObject();
  JSONObject reservationtable=new JSONObject();
  if (file.equals(""String_Node_Str"")) {
    accounttable.put(""String_Node_Str"",0);
    accounttable.put(""String_Node_Str"",3);
    accounttable.put(""String_Node_Str"",-1);
    accounttable.put(""String_Node_Str"",-1);
    accounttable.put(""String_Node_Str"",4);
    accounttable.put(""String_Node_Str"",2);
    accounttable.put(""String_Node_Str"",-1);
    accounttable.put(""String_Node_Str"",1);
    reservationtable.put(""String_Node_Str"",0);
    reservationtable.put(""String_Node_Str"",2);
    reservationtable.put(""String_Node_Str"",-1);
    reservationtable.put(""String_Node_Str"",3);
    reservationtable.put(""String_Node_Str"",-1);
    reservationtable.put(""String_Node_Str"",1);
  }
 else   if (file.equals(""String_Node_Str"")) {
    accounttable.put(""String_Node_Str"",0);
    accounttable.put(""String_Node_Str"",3);
    accounttable.put(""String_Node_Str"",-1);
    accounttable.put(""String_Node_Str"",-1);
    accounttable.put(""String_Node_Str"",4);
    accounttable.put(""String_Node_Str"",2);
    accounttable.put(""String_Node_Str"",-1);
    accounttable.put(""String_Node_Str"",1);
    reservationtable.put(""String_Node_Str"",0);
    reservationtable.put(""String_Node_Str"",2);
    reservationtable.put(""String_Node_Str"",-1);
    reservationtable.put(""String_Node_Str"",3);
    reservationtable.put(""String_Node_Str"",-1);
    reservationtable.put(""String_Node_Str"",1);
  }
 else   if (file.equals(""String_Node_Str"")) {
    accounttable.put(""String_Node_Str"",1);
    accounttable.put(""String_Node_Str"",-1);
    accounttable.put(""String_Node_Str"",0);
    accounttable.put(""String_Node_Str"",-1);
    accounttable.put(""String_Node_Str"",6);
    accounttable.put(""String_Node_Str"",3);
    accounttable.put(""String_Node_Str"",5);
    accounttable.put(""String_Node_Str"",2);
    reservationtable.put(""String_Node_Str"",1);
    reservationtable.put(""String_Node_Str"",-1);
    reservationtable.put(""String_Node_Str"",0);
    reservationtable.put(""String_Node_Str"",3);
    reservationtable.put(""String_Node_Str"",-1);
    reservationtable.put(""String_Node_Str"",2);
  }
 else   if (file.equals(""String_Node_Str"")) {
    accounttable=new JSONObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    reservationtable=new JSONObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
 else   if (file.equals(""String_Node_Str"")) {
    accounttable=new JSONObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    reservationtable=new JSONObject(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  json.put(""String_Node_Str"",accounttable);
  json.put(""String_Node_Str"",reservationtable);
  return json;
}"
86189,"private Document accountHttpPost(Account account,String func) throws IOException, OpacErrorException {
  List<NameValuePair> nameValuePairs=new ArrayList<>(2);
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",func));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getPassword()));
  String html=httpPost(opacUrl + ""String_Node_Str"" + opacDir+ ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
  Document doc=Jsoup.parse(html);
  if (doc.title().contains(""String_Node_Str"") || (doc.select(""String_Node_Str"").size() > 0 && doc.select(""String_Node_Str"").text().contains(""String_Node_Str""))) {
    String errText=""String_Node_Str"";
    Elements elTable=doc.select(""String_Node_Str"");
    if (elTable.size() > 0) {
      errText=elTable.get(0).text();
    }
    throw new OpacErrorException(errText);
  }
  if (doc.select(""String_Node_Str"").size() == 1) {
    throw new OpacErrorException(doc.select(""String_Node_Str"").text());
  }
  if (doc.text().contains(""String_Node_Str"") || doc.text().contains(""String_Node_Str"")) {
    throw new OpacErrorException(stringProvider.getString(StringProvider.WRONG_LOGIN_DATA));
  }
  return doc;
}","private Document accountHttpPost(Account account,String func) throws IOException, OpacErrorException {
  List<NameValuePair> nameValuePairs=new ArrayList<>(2);
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",func));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getPassword()));
  String html=httpPost(opacUrl + ""String_Node_Str"" + opacDir+ ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
  Document doc=Jsoup.parse(html);
  if (doc.title().contains(""String_Node_Str"") || (doc.select(""String_Node_Str"").size() > 0 && doc.select(""String_Node_Str"").text().contains(""String_Node_Str""))) {
    String errText=""String_Node_Str"";
    Elements elTable=doc.select(""String_Node_Str"");
    if (elTable.size() > 0) {
      errText=elTable.get(0).text();
    }
    throw new OpacErrorException(errText);
  }
  if (doc.select(""String_Node_Str"").size() == 1) {
    throw new OpacErrorException(doc.select(""String_Node_Str"").text());
  }
  if (doc.text().contains(""String_Node_Str"") || doc.text().contains(""String_Node_Str"") || doc.text().contains(""String_Node_Str"")) {
    throw new OpacErrorException(stringProvider.getString(StringProvider.WRONG_LOGIN_DATA));
  }
  return doc;
}"
86190,"public void urlintent(){
  Uri d=getIntent().getData();
  if (d.getHost().equals(""String_Node_Str"")) {
    String[] split=d.getPath().split(""String_Node_Str"");
    String bib;
    try {
      bib=URLDecoder.decode(split[1],""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException e) {
      throw new AssertionError(""String_Node_Str"");
    }
    if (!app.getLibrary().getIdent().equals(bib)) {
      AccountDataSource adata=new AccountDataSource(this);
      adata.open();
      List<Account> accounts=adata.getAllAccounts(bib);
      adata.close();
      if (accounts.size() > 0) {
        app.setAccount(accounts.get(0).getId());
      }
 else {
        Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + d.getPath()));
        startActivity(i);
        return;
      }
    }
    String medianr=split[2];
    if (medianr.length() > 1) {
      Intent intent=new Intent(MainActivity.this,SearchResultDetailActivity.class);
      intent.putExtra(SearchResultDetailFragment.ARG_ITEM_ID,medianr);
      startActivity(intent);
    }
 else {
      String title;
      try {
        title=URLDecoder.decode(split[3],""String_Node_Str"");
      }
 catch (      UnsupportedEncodingException e) {
        throw new AssertionError(""String_Node_Str"");
      }
      Bundle query=new Bundle();
      query.putString(""String_Node_Str"",title);
      Intent intent=new Intent(MainActivity.this,SearchResultListActivity.class);
      intent.putExtra(""String_Node_Str"",query);
      startActivity(intent);
    }
    finish();
  }
}","public void urlintent(){
  Uri d=getIntent().getData();
  if (d.getHost().equals(""String_Node_Str"")) {
    String[] split=d.getPath().split(""String_Node_Str"");
    String bib;
    try {
      bib=URLDecoder.decode(split[1],""String_Node_Str"");
    }
 catch (    UnsupportedEncodingException e) {
      throw new AssertionError(""String_Node_Str"");
    }
    if (app.getLibrary() == null || !app.getLibrary().getIdent().equals(bib)) {
      AccountDataSource adata=new AccountDataSource(this);
      adata.open();
      List<Account> accounts=adata.getAllAccounts(bib);
      adata.close();
      if (accounts.size() > 0) {
        app.setAccount(accounts.get(0).getId());
      }
 else {
        Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + d.getPath()));
        startActivity(i);
        return;
      }
    }
    String medianr=split[2];
    if (medianr.length() > 1) {
      Intent intent=new Intent(MainActivity.this,SearchResultDetailActivity.class);
      intent.putExtra(SearchResultDetailFragment.ARG_ITEM_ID,medianr);
      startActivity(intent);
    }
 else {
      String title;
      try {
        title=URLDecoder.decode(split[3],""String_Node_Str"");
      }
 catch (      UnsupportedEncodingException e) {
        throw new AssertionError(""String_Node_Str"");
      }
      Bundle query=new Bundle();
      query.putString(""String_Node_Str"",title);
      Intent intent=new Intent(MainActivity.this,SearchResultListActivity.class);
      intent.putExtra(""String_Node_Str"",query);
      startActivity(intent);
    }
    finish();
  }
}"
86191,"@Override public ReservationResult reservation(DetailledItem item,Account acc,int useraction,String selection) throws IOException {
  if (System.currentTimeMillis() - logged_in > SESSION_LIFETIME || logged_in_as == null) {
    try {
      login(acc);
    }
 catch (    OpacErrorException e) {
      return new ReservationResult(MultiStepResult.Status.ERROR,e.getMessage());
    }
  }
 else   if (logged_in_as.getId() != acc.getId()) {
    try {
      login(acc);
    }
 catch (    OpacErrorException e) {
      return new ReservationResult(MultiStepResult.Status.ERROR,e.getMessage());
    }
  }
  String html;
  if (reusehtml_reservation != null) {
    html=reusehtml_reservation;
  }
 else {
    html=httpGet(item.getReservation_info(),ENCODING);
  }
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").size() > 0) {
    return new ReservationResult(MultiStepResult.Status.ERROR,doc.select(""String_Node_Str"").first().text());
  }
  List<NameValuePair> nameValuePairs=new ArrayList<>();
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  if (doc.select(""String_Node_Str"").size() > 0) {
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",doc.select(""String_Node_Str"").val()));
  }
  if (doc.select(""String_Node_Str"").size() > 0 && selection == null) {
    Elements options=doc.select(""String_Node_Str"");
    ReservationResult res=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED);
    List<Map<String,String>> optionsMap=new ArrayList<>();
    for (    Element option : options) {
      Map<String,String> selopt=new HashMap<>();
      selopt.put(""String_Node_Str"",option.attr(""String_Node_Str""));
      selopt.put(""String_Node_Str"",option.text());
      optionsMap.add(selopt);
    }
    res.setSelection(optionsMap);
    res.setMessage(doc.select(""String_Node_Str"").text());
    reusehtml_reservation=html;
    return res;
  }
 else   if (selection != null) {
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",selection));
    reusehtml_reservation=null;
  }
  html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),ENCODING);
  doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").size() > 0) {
    return new ReservationResult(MultiStepResult.Status.OK);
  }
 else   if (doc.select(""String_Node_Str"").size() > 0) {
    return new ReservationResult(MultiStepResult.Status.ERROR,doc.select(""String_Node_Str"").text());
  }
 else {
    return new ReservationResult(MultiStepResult.Status.ERROR);
  }
}","@Override public ReservationResult reservation(DetailledItem item,Account acc,int useraction,String selection) throws IOException {
  try {
    login(acc);
  }
 catch (  OpacErrorException e) {
    return new ReservationResult(MultiStepResult.Status.ERROR,e.getMessage());
  }
  String html;
  if (reusehtml_reservation != null) {
    html=reusehtml_reservation;
  }
 else {
    html=httpGet(item.getReservation_info(),ENCODING);
  }
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").size() > 0) {
    return new ReservationResult(MultiStepResult.Status.ERROR,doc.select(""String_Node_Str"").first().text());
  }
  List<NameValuePair> nameValuePairs=new ArrayList<>();
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  if (doc.select(""String_Node_Str"").size() > 0) {
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",doc.select(""String_Node_Str"").val()));
  }
  if (doc.select(""String_Node_Str"").size() > 0 && selection == null) {
    Elements options=doc.select(""String_Node_Str"");
    ReservationResult res=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED);
    List<Map<String,String>> optionsMap=new ArrayList<>();
    for (    Element option : options) {
      Map<String,String> selopt=new HashMap<>();
      selopt.put(""String_Node_Str"",option.attr(""String_Node_Str""));
      selopt.put(""String_Node_Str"",option.text());
      optionsMap.add(selopt);
    }
    res.setSelection(optionsMap);
    res.setMessage(doc.select(""String_Node_Str"").text());
    reusehtml_reservation=html;
    return res;
  }
 else   if (selection != null) {
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",selection));
    reusehtml_reservation=null;
  }
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),ENCODING);
  doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").size() > 0) {
    return new ReservationResult(MultiStepResult.Status.OK);
  }
 else   if (doc.select(""String_Node_Str"").size() > 0) {
    return new ReservationResult(MultiStepResult.Status.ERROR,doc.select(""String_Node_Str"").text());
  }
 else {
    return new ReservationResult(MultiStepResult.Status.ERROR);
  }
}"
86192,"static LocalDate parseCopyReturn(String str){
  DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"").withLocale(Locale.GERMAN);
  final Matcher matcher=Pattern.compile(""String_Node_Str"").matcher(str);
  if (matcher.find()) {
    return fmt.parseLocalDate(matcher.group());
  }
 else {
    return null;
  }
}","static LocalDate parseCopyReturn(String str){
  if (str == null)   return null;
  DateTimeFormatter fmt=DateTimeFormat.forPattern(""String_Node_Str"").withLocale(Locale.GERMAN);
  final Matcher matcher=Pattern.compile(""String_Node_Str"").matcher(str);
  if (matcher.find()) {
    return fmt.parseLocalDate(matcher.group());
  }
 else {
    return null;
  }
}"
86193,"@Override public boolean onOptionsItemSelected(MenuItem item){
  final String bib=app.getLibrary().getIdent();
  if (item.getItemId() == R.id.action_reservation) {
    reservationStart();
    return true;
  }
 else   if (item.getItemId() == R.id.action_lendebook) {
    bookingStart();
    return true;
  }
 else   if (item.getItemId() == R.id.action_tocollection) {
    if (getActivity().getIntent().getBooleanExtra(""String_Node_Str"",false)) {
      getActivity().finish();
    }
 else {
      Intent intent=new Intent(getActivity(),SearchResultDetailActivity.class);
      intent.putExtra(SearchResultDetailFragment.ARG_ITEM_ID,getItem().getCollectionId());
      startActivity(intent);
      getActivity().finish();
    }
    return true;
  }
 else   if (item.getItemId() == R.id.action_share) {
    if (getItem() == null) {
      Toast toast=Toast.makeText(getActivity(),getString(R.string.share_wait),Toast.LENGTH_SHORT);
      toast.show();
    }
 else {
      final String title=getItem().getTitle();
      final String id=getItem().getId();
      final CharSequence[] items={getString(R.string.share_link),getString(R.string.share_details)};
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
      builder.setTitle(R.string.share_dialog_select);
      builder.setItems(items,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int di){
          if (di == 0) {
            Intent intent=new Intent(android.content.Intent.ACTION_SEND);
            intent.setType(""String_Node_Str"");
            intent.addFlags(CompatibilityUtils.getNewDocumentIntentFlag());
            intent.putExtra(Intent.EXTRA_SUBJECT,title);
            String t=title;
            try {
              t=java.net.URLEncoder.encode(t,""String_Node_Str"");
            }
 catch (            UnsupportedEncodingException e) {
            }
            String shareUrl=app.getApi().getShareUrl(id,t);
            if (shareUrl != null) {
              intent.putExtra(Intent.EXTRA_TEXT,shareUrl);
              startActivity(Intent.createChooser(intent,getResources().getString(R.string.share)));
            }
 else {
              Toast toast=Toast.makeText(getActivity(),getString(R.string.share_notsupported),Toast.LENGTH_SHORT);
              toast.show();
            }
          }
 else {
            Intent intent=new Intent(android.content.Intent.ACTION_SEND);
            intent.setType(""String_Node_Str"");
            intent.addFlags(CompatibilityUtils.getNewDocumentIntentFlag());
            intent.putExtra(Intent.EXTRA_SUBJECT,title);
            String t=title;
            try {
              t=t != null ? java.net.URLEncoder.encode(t,""String_Node_Str"") : ""String_Node_Str"";
            }
 catch (            UnsupportedEncodingException e) {
            }
            String text=t + ""String_Node_Str"";
            for (            Detail detail : getItem().getDetails()) {
              String colon=""String_Node_Str"";
              if (!detail.getDesc().endsWith(""String_Node_Str"")) {
                colon=""String_Node_Str"";
              }
              text+=detail.getDesc() + colon + ""String_Node_Str""+ detail.getContent()+ ""String_Node_Str"";
            }
            String shareUrl=app.getApi().getShareUrl(id,t);
            if (shareUrl != null) {
              text+=shareUrl;
            }
            intent.putExtra(Intent.EXTRA_TEXT,text);
            startActivity(Intent.createChooser(intent,getResources().getString(R.string.share)));
          }
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
    }
    return true;
  }
 else   if (item.getItemId() == R.id.action_star) {
    StarDataSource star=new StarDataSource(getActivity());
    if (getItem() == null) {
      Toast toast=Toast.makeText(getActivity(),getString(R.string.star_wait),Toast.LENGTH_SHORT);
      toast.show();
    }
 else     if (getItem().getId() == null || getItem().getId().equals(""String_Node_Str"")) {
      final String title=getItem().getTitle();
      if (star.isStarredTitle(bib,title)) {
        star.remove(star.getItemByTitle(bib,title));
        item.setIcon(R.drawable.ic_star_0_white_24dp);
      }
 else {
        star.star(null,title,bib,getItem().getMediaType());
        Toast toast=Toast.makeText(getActivity(),getString(R.string.starred),Toast.LENGTH_SHORT);
        toast.show();
        item.setIcon(R.drawable.ic_star_1_white_24dp);
      }
    }
 else {
      final String title=getItem().getTitle();
      final String id=getItem().getId();
      if (star.isStarred(bib,id)) {
        star.remove(star.getItem(bib,id));
        item.setIcon(R.drawable.ic_star_0_white_24dp);
      }
 else {
        star.star(id,title,bib,getItem().getMediaType());
        Toast toast=Toast.makeText(getActivity(),getString(R.string.starred),Toast.LENGTH_SHORT);
        toast.show();
        item.setIcon(R.drawable.ic_star_1_white_24dp);
      }
    }
    return true;
  }
 else {
    return super.onOptionsItemSelected(item);
  }
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  final String bib=app.getLibrary().getIdent();
  if (item.getItemId() == R.id.action_reservation) {
    reservationStart();
    return true;
  }
 else   if (item.getItemId() == R.id.action_lendebook) {
    bookingStart();
    return true;
  }
 else   if (item.getItemId() == R.id.action_tocollection) {
    if (getActivity().getIntent().getBooleanExtra(""String_Node_Str"",false)) {
      getActivity().finish();
    }
 else {
      Intent intent=new Intent(getActivity(),SearchResultDetailActivity.class);
      intent.putExtra(SearchResultDetailFragment.ARG_ITEM_ID,getItem().getCollectionId());
      startActivity(intent);
      getActivity().finish();
    }
    return true;
  }
 else   if (item.getItemId() == R.id.action_share) {
    if (getItem() == null) {
      Toast toast=Toast.makeText(getActivity(),getString(R.string.share_wait),Toast.LENGTH_SHORT);
      toast.show();
    }
 else {
      final String title=getItem().getTitle();
      final String id=getItem().getId();
      final CharSequence[] items={getString(R.string.share_link),getString(R.string.share_details)};
      AlertDialog.Builder builder=new AlertDialog.Builder(getActivity());
      builder.setTitle(R.string.share_dialog_select);
      builder.setItems(items,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int di){
          if (di == 0) {
            Intent intent=new Intent(android.content.Intent.ACTION_SEND);
            intent.setType(""String_Node_Str"");
            intent.addFlags(CompatibilityUtils.getNewDocumentIntentFlag());
            intent.putExtra(Intent.EXTRA_SUBJECT,title);
            String t=title;
            try {
              t=java.net.URLEncoder.encode(t,""String_Node_Str"");
            }
 catch (            UnsupportedEncodingException e) {
            }
            String shareUrl=app.getApi().getShareUrl(id,t);
            if (shareUrl != null) {
              intent.putExtra(Intent.EXTRA_TEXT,shareUrl);
              startActivity(Intent.createChooser(intent,getResources().getString(R.string.share)));
            }
 else {
              Toast toast=Toast.makeText(getActivity(),getString(R.string.share_notsupported),Toast.LENGTH_SHORT);
              toast.show();
            }
          }
 else {
            Intent intent=new Intent(android.content.Intent.ACTION_SEND);
            intent.setType(""String_Node_Str"");
            intent.addFlags(CompatibilityUtils.getNewDocumentIntentFlag());
            intent.putExtra(Intent.EXTRA_SUBJECT,title);
            String t=title;
            try {
              t=t != null ? java.net.URLEncoder.encode(t,""String_Node_Str"") : ""String_Node_Str"";
            }
 catch (            UnsupportedEncodingException e) {
            }
            String text=t + ""String_Node_Str"";
            for (            Detail detail : getItem().getDetails()) {
              String colon=""String_Node_Str"";
              if (!detail.getDesc().endsWith(""String_Node_Str"")) {
                colon=""String_Node_Str"";
              }
              text+=detail.getDesc() + colon + ""String_Node_Str""+ detail.getContent()+ ""String_Node_Str"";
            }
            String shareUrl=app.getApi().getShareUrl(id,t);
            if (shareUrl != null) {
              text+=shareUrl;
            }
            intent.putExtra(Intent.EXTRA_TEXT,text);
            startActivity(Intent.createChooser(intent,getResources().getString(R.string.share)));
          }
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
    }
    return true;
  }
 else   if (item.getItemId() == R.id.action_star) {
    StarDataSource star=new StarDataSource(getActivity());
    if (getItem() == null) {
      Toast toast=Toast.makeText(getActivity(),getString(R.string.star_wait),Toast.LENGTH_SHORT);
      toast.show();
    }
 else     if (getItem().getId() == null || getItem().getId().equals(""String_Node_Str"")) {
      final String title=getItem().getTitle();
      if (title == null || title.equals(""String_Node_Str"")) {
        Toast toast=Toast.makeText(getActivity(),getString(R.string.star_unsupported),Toast.LENGTH_LONG);
        toast.show();
      }
 else {
        if (star.isStarredTitle(bib,title)) {
          star.remove(star.getItemByTitle(bib,title));
          item.setIcon(R.drawable.ic_star_0_white_24dp);
        }
 else {
          star.star(null,title,bib,getItem().getMediaType());
          Toast toast=Toast.makeText(getActivity(),getString(R.string.starred),Toast.LENGTH_SHORT);
          toast.show();
          item.setIcon(R.drawable.ic_star_1_white_24dp);
        }
      }
    }
 else {
      final String title=getItem().getTitle();
      final String id=getItem().getId();
      if (star.isStarred(bib,id)) {
        star.remove(star.getItem(bib,id));
        item.setIcon(R.drawable.ic_star_0_white_24dp);
      }
 else {
        star.star(id,title,bib,getItem().getMediaType());
        Toast toast=Toast.makeText(getActivity(),getString(R.string.starred),Toast.LENGTH_SHORT);
        toast.show();
        item.setIcon(R.drawable.ic_star_1_white_24dp);
      }
    }
    return true;
  }
 else {
    return super.onOptionsItemSelected(item);
  }
}"
86194,"protected void refreshMenu(Menu menu){
  if (item != null) {
    if (item.isReservable()) {
      menu.findItem(R.id.action_reservation).setVisible(true);
    }
 else {
      menu.findItem(R.id.action_reservation).setVisible(false);
    }
    if (item.isBookable() && app.getApi() instanceof EbookServiceApi) {
      if (((EbookServiceApi)app.getApi()).isEbook(item)) {
        menu.findItem(R.id.action_lendebook).setVisible(true);
      }
 else {
        menu.findItem(R.id.action_lendebook).setVisible(false);
      }
    }
 else {
      menu.findItem(R.id.action_lendebook).setVisible(false);
    }
    menu.findItem(R.id.action_tocollection).setVisible(item.getCollectionId() != null);
  }
 else {
    menu.findItem(R.id.action_reservation).setVisible(false);
    menu.findItem(R.id.action_lendebook).setVisible(false);
    menu.findItem(R.id.action_tocollection).setVisible(false);
  }
  String bib=app.getLibrary().getIdent();
  StarDataSource data=new StarDataSource(getActivity());
  if ((id == null || id.equals(""String_Node_Str"")) && item != null) {
    if (data.isStarredTitle(bib,item.getTitle())) {
      menu.findItem(R.id.action_star).setIcon(R.drawable.ic_star_1_white_24dp);
    }
  }
 else {
    if (data.isStarred(bib,id)) {
      menu.findItem(R.id.action_star).setIcon(R.drawable.ic_star_1_white_24dp);
    }
  }
}","protected void refreshMenu(Menu menu){
  if (item != null) {
    if (item.isReservable()) {
      menu.findItem(R.id.action_reservation).setVisible(true);
    }
 else {
      menu.findItem(R.id.action_reservation).setVisible(false);
    }
    if (item.isBookable() && app.getApi() instanceof EbookServiceApi) {
      if (((EbookServiceApi)app.getApi()).isEbook(item)) {
        menu.findItem(R.id.action_lendebook).setVisible(true);
      }
 else {
        menu.findItem(R.id.action_lendebook).setVisible(false);
      }
    }
 else {
      menu.findItem(R.id.action_lendebook).setVisible(false);
    }
    menu.findItem(R.id.action_tocollection).setVisible(item.getCollectionId() != null);
  }
 else {
    menu.findItem(R.id.action_reservation).setVisible(false);
    menu.findItem(R.id.action_lendebook).setVisible(false);
    menu.findItem(R.id.action_tocollection).setVisible(false);
  }
  String bib=app.getLibrary().getIdent();
  StarDataSource data=new StarDataSource(getActivity());
  String _id=id;
  if (item != null) {
    _id=item.getId();
  }
  if ((_id == null || _id.equals(""String_Node_Str"")) && item != null) {
    if (data.isStarredTitle(bib,item.getTitle())) {
      menu.findItem(R.id.action_star).setIcon(R.drawable.ic_star_1_white_24dp);
    }
  }
 else {
    if (data.isStarred(bib,_id)) {
      menu.findItem(R.id.action_star).setIcon(R.drawable.ic_star_1_white_24dp);
    }
  }
}"
86195,"public void setIcon(int id){
  Drawable drawable=DrawableCompat.wrap(ContextCompat.getDrawable(context,id));
  DrawableCompat.setTint(drawable,Color.argb(138,0,0,0));
  icon.setImageDrawable(drawable);
}","public void setIcon(int id){
  Drawable drawable=DrawableCompat.wrap(VectorDrawableCompat.create(context.getResources(),id,context.getTheme()));
  DrawableCompat.setTint(drawable,Color.argb(138,0,0,0));
  icon.setImageDrawable(drawable);
}"
86196,"protected Class<?> getSocketFactoryClass(){
  return null;
}","protected Class<?> getSocketFactoryClass(boolean tls_only){
  return null;
}"
86197,"/** 
 * Create a new HttpClient.
 * @param tls_only If this is true, only TLS v1 and newer will be used, SSLv3 will be disabled.We highly recommend to set this to true, if possible. This is currently a no-op on the default implementation and only used in the Android implementation!
 */
public HttpClient getNewApacheHttpClient(boolean customssl,boolean tls_only,boolean disguise_app){
  HttpClientBuilder builder=HttpClientBuilder.create();
  builder.setRedirectStrategy(new CustomRedirectStrategy());
  if (disguise_app) {
    builder.setUserAgent(""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    builder.setUserAgent(user_agent);
  }
  if (customssl) {
    try {
      if (trust_store == null) {
        trust_store=getKeyStore();
      }
      SSLConnectionSocketFactory sf=AdditionalKeyStoresSSLSocketFactory.create(trust_store,getSocketFactoryClass());
      Registry<ConnectionSocketFactory> registry=RegistryBuilder.<ConnectionSocketFactory>create().register(""String_Node_Str"",PlainConnectionSocketFactory.getSocketFactory()).register(""String_Node_Str"",sf).build();
      HttpClientConnectionManager ccm=new PoolingHttpClientConnectionManager(registry);
      builder.setConnectionManager(ccm);
      return builder.build();
    }
 catch (    Exception e) {
      e.printStackTrace();
      return builder.build();
    }
  }
 else {
    return builder.build();
  }
}","/** 
 * Create a new HttpClient.
 * @param tls_only If this is true, only TLS v1 and newer will be used, SSLv3 will be disabled.We highly recommend to set this to true, if possible. This is currently a no-op on the default implementation and only used in the Android implementation!
 */
public HttpClient getNewApacheHttpClient(boolean customssl,boolean tls_only,boolean disguise_app){
  HttpClientBuilder builder=HttpClientBuilder.create();
  builder.setRedirectStrategy(new CustomRedirectStrategy());
  if (disguise_app) {
    builder.setUserAgent(""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    builder.setUserAgent(user_agent);
  }
  if (customssl) {
    try {
      if (trust_store == null) {
        trust_store=getKeyStore();
      }
      SSLConnectionSocketFactory sf=AdditionalKeyStoresSSLSocketFactory.create(trust_store,true,getSocketFactoryClass(tls_only));
      Registry<ConnectionSocketFactory> registry=RegistryBuilder.<ConnectionSocketFactory>create().register(""String_Node_Str"",PlainConnectionSocketFactory.getSocketFactory()).register(""String_Node_Str"",sf).build();
      HttpClientConnectionManager ccm=new PoolingHttpClientConnectionManager(registry);
      builder.setConnectionManager(ccm);
      return builder.build();
    }
 catch (    Exception e) {
      e.printStackTrace();
      return builder.build();
    }
  }
 else {
    return builder.build();
  }
}"
86198,"public HttpClient getNewApacheHttpClient(boolean customssl,boolean tls_only,boolean disguise_app){
  HttpClientBuilder builder=HttpClientBuilder.create();
  builder.setRedirectStrategy(new CustomRedirectStrategy());
  if (disguise_app) {
    builder.setUserAgent(""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    builder.setUserAgent(user_agent);
  }
  if (customssl) {
    try {
      if (trust_store == null) {
        trust_store=getKeyStore();
      }
      SSLConnectionSocketFactory sf=AdditionalKeyStoresSSLSocketFactory.create(trust_store,tls_only,getSocketFactoryClass());
      Registry<ConnectionSocketFactory> registry=RegistryBuilder.<ConnectionSocketFactory>create().register(""String_Node_Str"",PlainConnectionSocketFactory.getSocketFactory()).register(""String_Node_Str"",sf).build();
      HttpClientConnectionManager ccm=new PoolingHttpClientConnectionManager(registry);
      builder.setConnectionManager(ccm);
      return builder.build();
    }
 catch (    Exception e) {
      e.printStackTrace();
      return builder.build();
    }
  }
 else {
    return builder.build();
  }
}","public HttpClient getNewApacheHttpClient(boolean customssl,boolean tls_only,boolean disguise_app){
  HttpClientBuilder builder=HttpClientBuilder.create();
  builder.setRedirectStrategy(new CustomRedirectStrategy());
  if (disguise_app) {
    builder.setUserAgent(""String_Node_Str"" + ""String_Node_Str"");
  }
 else {
    builder.setUserAgent(user_agent);
  }
  if (customssl) {
    try {
      if (trust_store == null) {
        trust_store=getKeyStore();
      }
      SSLConnectionSocketFactory sf=AdditionalKeyStoresSSLSocketFactory.create(trust_store,getSocketFactoryClass());
      Registry<ConnectionSocketFactory> registry=RegistryBuilder.<ConnectionSocketFactory>create().register(""String_Node_Str"",PlainConnectionSocketFactory.getSocketFactory()).register(""String_Node_Str"",sf).build();
      HttpClientConnectionManager ccm=new PoolingHttpClientConnectionManager(registry);
      builder.setConnectionManager(ccm);
      return builder.build();
    }
 catch (    Exception e) {
      e.printStackTrace();
      return builder.build();
    }
  }
 else {
    return builder.build();
  }
}"
86199,"protected Class<?> getSocketFactoryClass(){
  return TlsSniSocketFactory.class;
}","protected Class<?> getSocketFactoryClass(boolean tls_only){
  if (tls_only)   return TlsSniSocketFactory.class;
 else   return TlsSniSocketFactoryWithSSL3.class;
}"
86200,"public TlsSniSocketFactory(final SSLContext sslContext,boolean tls_only){
  super(sslContext,BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);
  this.tls_only=tls_only;
  socketfactory=sslContext.getSocketFactory();
  hostnameVerifier=BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;
}","public TlsSniSocketFactory(final SSLContext sslContext){
  super(sslContext,BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);
  socketfactory=sslContext.getSocketFactory();
  hostnameVerifier=BROWSER_COMPATIBLE_HOSTNAME_VERIFIER;
}"
86201,"private void setAccountSwitcherVisible(boolean accountSwitcherVisible){
  if (accountSwitcherVisible == this.accountSwitcherVisible)   return;
  this.accountSwitcherVisible=accountSwitcherVisible;
  drawer.setAccountsVisible(accountSwitcherVisible);
  accountExpand.setActivated(accountSwitcherVisible);
  if (!accountSwitcherVisible) {
    fixNavigationSelection();
  }
}","private void setAccountSwitcherVisible(boolean accountSwitcherVisible){
  if (accountSwitcherVisible == this.accountSwitcherVisible)   return;
  this.accountSwitcherVisible=accountSwitcherVisible;
  drawer.setAccountsVisible(accountSwitcherVisible);
  if (Build.VERSION.SDK_INT >= 11)   accountExpand.setActivated(accountSwitcherVisible);
  if (!accountSwitcherVisible) {
    fixNavigationSelection();
  }
}"
86202,"private void init(){
  accountsList=new RecyclerView(getContext());
  accountsList.setLayoutManager(new LinearLayoutManager(getContext()));
  addView(accountsList);
  LayoutParams params=(FrameLayout.LayoutParams)accountsList.getLayoutParams();
  params.setMargins(0,getResources().getDimensionPixelSize(R.dimen.navigation_drawer_header_height),0,0);
  accountsList.setBackgroundResource(R.color.background_material_light);
  accountsList.setVisibility(View.GONE);
}","private void init(){
  accountsList=new RecyclerView(getContext());
  accountsList.setLayoutManager(new LinearLayoutManager(getContext()));
  addView(accountsList);
  LayoutParams params=(FrameLayout.LayoutParams)accountsList.getLayoutParams();
  params.setMargins(0,getResources().getDimensionPixelSize(R.dimen.navigation_drawer_header_height),0,0);
  params.gravity=Gravity.BOTTOM;
  accountsList.setBackgroundResource(R.color.background_material_light);
  accountsList.setVisibility(View.GONE);
}"
86203,"public void setAccountsVisible(boolean visible){
  if (visible == accountsVisible)   return;
  accountsVisible=visible;
  if (accountsVisible) {
    accountsList.setVisibility(View.VISIBLE);
    accountsList.setAlpha(0.0f);
    ViewPropertyAnimator.animate(accountsList).alpha(1.0f).setListener(null);
  }
 else {
    ViewPropertyAnimator.animate(accountsList).alpha(0.0f).setListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        if (accountsList != null) {
          accountsList.setVisibility(View.GONE);
        }
      }
    }
);
  }
}","public void setAccountsVisible(boolean visible){
  if (visible == accountsVisible)   return;
  accountsVisible=visible;
  if (accountsVisible) {
    accountsList.setVisibility(View.VISIBLE);
    if (Build.VERSION.SDK_INT >= 12) {
      accountsList.setAlpha(0);
      accountsList.animate().alpha(1.0f).setListener(null);
    }
  }
 else {
    if (Build.VERSION.SDK_INT >= 12) {
      accountsList.animate().alpha(0.0f).setListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          if (accountsList != null) {
            accountsList.clearAnimation();
            accountsList.setVisibility(View.GONE);
          }
        }
      }
);
    }
 else {
      accountsList.setVisibility(View.GONE);
    }
  }
}"
86204,"@Override public void onAnimationEnd(Animator animation){
  if (accountsList != null) {
    accountsList.setVisibility(View.GONE);
  }
}","@Override public void onAnimationEnd(Animator animation){
  if (accountsList != null) {
    accountsList.clearAnimation();
    accountsList.setVisibility(View.GONE);
  }
}"
86205,"@Override public int getItemCount(){
  return accountsWithoutCurrent.size() + 1 + FOOTER_COUNT;
}","@Override public int getItemCount(){
  return accountsWithoutCurrent.size() + (accountsWithoutCurrent.size() > 0 ? 1 : 0) + FOOTER_COUNT;
}"
86206,"@Override public int getItemViewType(int position){
  if (position < accountsWithoutCurrent.size()) {
    return TYPE_ACCOUNT;
  }
 else   if (position == accountsWithoutCurrent.size()) {
    return TYPE_SEPARATOR;
  }
 else {
    return TYPE_FOOTER;
  }
}","@Override public int getItemViewType(int position){
  if (position < accountsWithoutCurrent.size()) {
    return TYPE_ACCOUNT;
  }
 else   if (position == accountsWithoutCurrent.size() && accountsWithoutCurrent.size() > 0) {
    return TYPE_SEPARATOR;
  }
 else {
    return TYPE_FOOTER;
  }
}"
86207,"@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){
  if (holder instanceof AccountViewHolder) {
    Account account=accountsWithoutCurrent.get(position);
    ((AccountViewHolder)holder).setData(account,expiring.get(account));
  }
 else   if (holder instanceof FooterViewHolder) {
    FooterViewHolder footer=(FooterViewHolder)holder;
    if (position == accountsWithoutCurrent.size() + 1) {
      footer.setTitle(R.string.account_add);
      footer.setIcon(R.drawable.ic_add_24dp);
      footer.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          if (listener != null)           listener.onAddAccountClicked();
        }
      }
);
    }
 else     if (position == accountsWithoutCurrent.size() + 2) {
      footer.setTitle(R.string.accounts);
      footer.setIcon(R.drawable.ic_settings_24dp);
      footer.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          if (listener != null)           listener.onManageAccountsClicked();
        }
      }
);
    }
  }
}","@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){
  if (holder instanceof AccountViewHolder) {
    Account account=accountsWithoutCurrent.get(position);
    ((AccountViewHolder)holder).setData(account,expiring.get(account));
  }
 else   if (holder instanceof FooterViewHolder) {
    FooterViewHolder footer=(FooterViewHolder)holder;
    if (position == accountsWithoutCurrent.size() + (accountsWithoutCurrent.size() > 0 ? 1 : 0)) {
      footer.setTitle(R.string.account_add);
      footer.setIcon(R.drawable.ic_add_24dp);
      footer.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          if (listener != null)           listener.onAddAccountClicked();
        }
      }
);
    }
 else     if (position == accountsWithoutCurrent.size() + (accountsWithoutCurrent.size() > 0 ? 2 : 1)) {
      footer.setTitle(R.string.accounts);
      footer.setIcon(R.drawable.ic_settings_24dp);
      footer.setOnClickListener(new View.OnClickListener(){
        @Override public void onClick(        View view){
          if (listener != null)           listener.onManageAccountsClicked();
        }
      }
);
    }
  }
}"
86208,"private void init(){
  accountsList=new RecyclerView(getContext());
  accountsList.setLayoutManager(new LinearLayoutManager(getContext()));
  addView(accountsList);
  LayoutParams params=(FrameLayout.LayoutParams)accountsList.getLayoutParams();
  params.setMargins(0,getResources().getDimensionPixelSize(R.dimen.navigation_drawer_header_height),0,0);
  params.gravity=Gravity.BOTTOM;
  TypedArray a=getContext().obtainStyledAttributes(new int[]{android.R.attr.windowBackground});
  accountsList.setBackgroundResource(a.getResourceId(0,0));
  a.recycle();
  accountsList.setVisibility(View.GONE);
}","private void init(){
  accountsList=new RecyclerView(getContext());
  accountsList.setLayoutManager(new LinearLayoutManager(getContext()));
  addView(accountsList);
  LayoutParams params=(FrameLayout.LayoutParams)accountsList.getLayoutParams();
  params.setMargins(0,getResources().getDimensionPixelSize(R.dimen.navigation_drawer_header_height),0,0);
  params.gravity=Gravity.BOTTOM;
  TypedArray a=getContext().obtainStyledAttributes(new int[]{android.R.attr.windowBackground});
  accountsList.setBackgroundResource(a.getResourceId(0,0));
  a.recycle();
  accountsList.setPadding(0,getResources().getDimensionPixelSize(R.dimen.list_top_padding),0,0);
  accountsList.setClipToPadding(false);
  accountsList.setVisibility(View.GONE);
}"
86209,"@Override public ProlongResult prolong(String media,Account account,int useraction,String Selection) throws IOException {
  if (accountobj == null) {
    try {
      login(account);
    }
 catch (    OpacErrorException e) {
      return new ProlongResult(MultiStepResult.Status.ERROR,e.getMessage());
    }
  }
  String html=httpGet(opac_url + ""String_Node_Str"" + media,getDefaultEncoding());
  Document doc=Jsoup.parse(html);
  if ((html.contains(""String_Node_Str"") || html.contains(""String_Node_Str"")) && useraction == 0) {
    try {
      login(account);
    }
 catch (    OpacErrorException e) {
      return new ProlongResult(MultiStepResult.Status.ERROR,e.getMessage());
    }
    prolong(media,account,1,null);
  }
  String dialog=doc.select(""String_Node_Str"").text();
  if (dialog.contains(""String_Node_Str"")) {
    return new ProlongResult(MultiStepResult.Status.OK,dialog);
  }
 else {
    return new ProlongResult(MultiStepResult.Status.ERROR,dialog);
  }
}","@Override public ProlongResult prolong(String media,Account account,int useraction,String Selection) throws IOException {
  if (media.startsWith(""String_Node_Str"")) {
    String message=media.split(""String_Node_Str"")[1];
    return new ProlongResult(MultiStepResult.Status.ERROR,message);
  }
  if (accountobj == null) {
    try {
      login(account);
    }
 catch (    OpacErrorException e) {
      return new ProlongResult(MultiStepResult.Status.ERROR,e.getMessage());
    }
  }
  String html=httpGet(opac_url + ""String_Node_Str"" + media,getDefaultEncoding());
  Document doc=Jsoup.parse(html);
  if ((html.contains(""String_Node_Str"") || html.contains(""String_Node_Str"")) && useraction == 0) {
    try {
      login(account);
    }
 catch (    OpacErrorException e) {
      return new ProlongResult(MultiStepResult.Status.ERROR,e.getMessage());
    }
    prolong(media,account,1,null);
  }
  String dialog=doc.select(""String_Node_Str"").text();
  if (dialog.contains(""String_Node_Str"")) {
    return new ProlongResult(MultiStepResult.Status.OK,dialog);
  }
 else {
    return new ProlongResult(MultiStepResult.Status.ERROR,dialog);
  }
}"
86210,"@Override public AccountData account(Account acc) throws IOException, JSONException, OpacErrorException {
  Document login=login(acc);
  if (login == null) {
    return null;
  }
  AccountData res=new AccountData(acc.getId());
  String lent_link=null;
  String res_link=null;
  int lent_cnt=-1;
  int res_cnt=-1;
  for (  Element td : login.select(""String_Node_Str"" + ""String_Node_Str"")) {
    String section=td.text().trim();
    if (section.contains(""String_Node_Str"")) {
      lent_link=td.select(""String_Node_Str"").attr(""String_Node_Str"");
      lent_cnt=Integer.parseInt(td.nextElementSibling().text().trim());
    }
 else     if (section.contains(""String_Node_Str"")) {
      res_link=td.select(""String_Node_Str"").attr(""String_Node_Str"");
      res_cnt=Integer.parseInt(td.nextElementSibling().text().trim());
    }
 else     if (section.contains(""String_Node_Str"")) {
      res.setPendingFees(td.nextElementSibling().text().trim());
    }
 else     if (section.matches(""String_Node_Str"")) {
      res.setValidUntil(td.nextElementSibling().text().trim());
    }
  }
  for (  Element a : login.select(""String_Node_Str"")) {
    if (a.text().contains(""String_Node_Str"")) {
      lent_link=a.attr(""String_Node_Str"");
    }
 else     if (a.text().contains(""String_Node_Str"")) {
      res_link=a.attr(""String_Node_Str"");
    }
  }
  if (lent_link == null) {
    return null;
  }
  String lent_html=httpGet(opac_url + ""String_Node_Str"" + lent_link.replace(""String_Node_Str"",""String_Node_Str""),getDefaultEncoding());
  Document lent_doc=Jsoup.parse(lent_html);
  List<Map<String,String>> lent=new ArrayList<>();
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.GERMAN);
  Pattern id_pat=Pattern.compile(""String_Node_Str"");
  for (  Element table : lent_doc.select(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"")) {
    Map<String,String> item=new HashMap<>();
    for (    Element tr : table.select(""String_Node_Str"")) {
      String desc=tr.select(""String_Node_Str"").text().trim();
      String value=tr.select(""String_Node_Str"").text().trim();
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_LENT_TITLE,value);
      }
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_LENT_AUTHOR,value);
      }
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_LENT_BARCODE,value);
      }
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_LENT_BRANCH,value);
      }
      if (desc.matches(""String_Node_Str"")) {
        value=value.split(""String_Node_Str"")[0];
        item.put(AccountData.KEY_LENT_DEADLINE,value);
        try {
          item.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,String.valueOf(sdf.parse(value).getTime()));
        }
 catch (        ParseException e) {
          e.printStackTrace();
        }
      }
    }
    if (table.select(""String_Node_Str"").size() == 1) {
      Matcher matcher1=id_pat.matcher(table.select(""String_Node_Str"").attr(""String_Node_Str""));
      if (matcher1.matches()) {
        item.put(AccountData.KEY_LENT_LINK,matcher1.group(1));
      }
    }
    lent.add(item);
  }
  res.setLent(lent);
  List<Map<String,String>> reservations=new ArrayList<>();
  String res_html=httpGet(opac_url + ""String_Node_Str"" + res_link,getDefaultEncoding());
  Document res_doc=Jsoup.parse(res_html);
  for (  Element table : res_doc.select(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"")) {
    Map<String,String> item=new HashMap<>();
    for (    Element tr : table.select(""String_Node_Str"")) {
      String desc=tr.select(""String_Node_Str"").text().trim();
      String value=tr.select(""String_Node_Str"").text().trim();
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_RESERVATION_TITLE,value);
      }
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_RESERVATION_FORMAT,value);
      }
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_RESERVATION_BRANCH,value);
      }
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_RESERVATION_READY,value);
      }
    }
    if (""String_Node_Str"".equals(item.get(AccountData.KEY_RESERVATION_READY))) {
      continue;
    }
    reservations.add(item);
  }
  res.setReservations(reservations);
  return res;
}","@Override public AccountData account(Account acc) throws IOException, JSONException, OpacErrorException {
  Document login=login(acc);
  if (login == null) {
    return null;
  }
  AccountData res=new AccountData(acc.getId());
  String lentLink=null;
  String resLink=null;
  int lent_cnt=-1;
  int res_cnt=-1;
  for (  Element td : login.select(""String_Node_Str"" + ""String_Node_Str"")) {
    String section=td.text().trim();
    if (section.contains(""String_Node_Str"")) {
      lentLink=td.select(""String_Node_Str"").attr(""String_Node_Str"");
      lent_cnt=Integer.parseInt(td.nextElementSibling().text().trim());
    }
 else     if (section.contains(""String_Node_Str"")) {
      resLink=td.select(""String_Node_Str"").attr(""String_Node_Str"");
      res_cnt=Integer.parseInt(td.nextElementSibling().text().trim());
    }
 else     if (section.contains(""String_Node_Str"")) {
      res.setPendingFees(td.nextElementSibling().text().trim());
    }
 else     if (section.matches(""String_Node_Str"")) {
      res.setValidUntil(td.nextElementSibling().text().trim());
    }
  }
  for (  Element a : login.select(""String_Node_Str"")) {
    if (a.text().contains(""String_Node_Str"")) {
      lentLink=a.attr(""String_Node_Str"");
    }
 else     if (a.text().contains(""String_Node_Str"")) {
      resLink=a.attr(""String_Node_Str"");
    }
  }
  if (lentLink == null) {
    return null;
  }
  String lentHtml=httpGet(opac_url + ""String_Node_Str"" + lentLink.replace(""String_Node_Str"",""String_Node_Str""),getDefaultEncoding());
  Document lentDoc=Jsoup.parse(lentHtml);
  res.setLent(parseMediaList(lentDoc));
  if (resLink == null) {
    for (    Element a : lentDoc.select(""String_Node_Str"")) {
      if (a.text().contains(""String_Node_Str"")) {
        resLink=a.attr(""String_Node_Str"");
      }
    }
  }
  String resHtml=httpGet(opac_url + ""String_Node_Str"" + resLink,getDefaultEncoding());
  Document resDoc=Jsoup.parse(resHtml);
  res.setReservations(parseResList(resDoc));
  return res;
}"
86211,"@Override public List<SearchField> getSearchFields() throws IOException, JSONException {
  if (!initialised) {
    start();
  }
  Document doc=htmlGet(opac_url + ""String_Node_Str"" + s_sid+ ""String_Node_Str""+ s_service+ ""String_Node_Str""+ s_exts);
  List<SearchField> fields=new ArrayList<>();
  Elements searchoptions=doc.select(""String_Node_Str"");
  if (searchoptions.size() == 0) {
    searchoptions=doc.select(""String_Node_Str"").first().previousElementSibling().select(""String_Node_Str"");
  }
  for (  Element opt : searchoptions) {
    TextSearchField field=new TextSearchField();
    field.setId(opt.attr(""String_Node_Str""));
    field.setDisplayName(opt.text());
    field.setHint(""String_Node_Str"");
    fields.add(field);
  }
  JSONObject selectableData=new JSONObject();
  selectableData.put(""String_Node_Str"",false);
  for (  Element row : doc.select(""String_Node_Str"")) {
    if (row.select(""String_Node_Str"").size() == 1 && row.select(""String_Node_Str"").first().tagName().equals(""String_Node_Str"")) {
      Element input=row.select(""String_Node_Str"").first();
      TextSearchField field=new TextSearchField();
      field.setId(input.attr(""String_Node_Str""));
      field.setDisplayName(row.select(""String_Node_Str"").first().text());
      field.setHint(""String_Node_Str"");
      field.setData(selectableData);
      fields.add(field);
    }
 else     if (row.select(""String_Node_Str"").size() == 1 && row.select(""String_Node_Str"").size() == 0) {
      Element select=row.select(""String_Node_Str"").first();
      DropdownSearchField field=new DropdownSearchField();
      field.setId(select.id());
      field.setDisplayName(row.select(""String_Node_Str"").first().text());
      List<Map<String,String>> values=new ArrayList<>();
      for (      Element opt : select.select(""String_Node_Str"")) {
        field.addDropdownValue(opt.attr(""String_Node_Str""),opt.text());
      }
      fields.add(field);
    }
 else     if (row.select(""String_Node_Str"").size() == 0 && row.select(""String_Node_Str"").size() == 3 && row.select(""String_Node_Str"").size() == 3) {
      String name1=row.select(""String_Node_Str"").get(0).text();
      String name2=row.select(""String_Node_Str"").get(1).text();
      String name3=row.select(""String_Node_Str"").get(2).text();
      Element input1=row.select(""String_Node_Str"").get(0);
      Element input2=row.select(""String_Node_Str"").get(1);
      Element input3=row.select(""String_Node_Str"").get(2);
      if (name2.contains(""String_Node_Str"") && name3.contains(""String_Node_Str"")) {
        TextSearchField field1=new TextSearchField();
        field1.setId(input1.id());
        field1.setDisplayName(name1);
        field1.setHint(""String_Node_Str"");
        field1.setData(selectableData);
        fields.add(field1);
        TextSearchField field2=new TextSearchField();
        field2.setId(input2.id());
        field2.setDisplayName(name2.replace(""String_Node_Str"",""String_Node_Str"").trim());
        field2.setHint(""String_Node_Str"");
        field2.setData(selectableData);
        fields.add(field2);
        TextSearchField field3=new TextSearchField();
        field3.setId(input3.id());
        field3.setDisplayName(name3.replace(""String_Node_Str"",""String_Node_Str"").trim());
        field3.setHint(""String_Node_Str"");
        field3.setHalfWidth(true);
        field3.setData(selectableData);
        fields.add(field3);
      }
 else {
        TextSearchField field1=new TextSearchField();
        field1.setId(input1.id());
        field1.setDisplayName(name1);
        field1.setHint(""String_Node_Str"");
        field1.setData(selectableData);
        fields.add(field1);
        TextSearchField field2=new TextSearchField();
        field2.setId(input2.id());
        field2.setDisplayName(name2);
        field2.setHint(""String_Node_Str"");
        field2.setData(selectableData);
        fields.add(field2);
        TextSearchField field3=new TextSearchField();
        field3.setId(input3.id());
        field3.setDisplayName(name3);
        field3.setHint(""String_Node_Str"");
        field3.setData(selectableData);
        fields.add(field3);
      }
    }
  }
  for (Iterator<SearchField> iterator=fields.iterator(); iterator.hasNext(); ) {
    SearchField field=iterator.next();
    if (ignoredFieldNames.contains(field.getDisplayName())) {
      iterator.remove();
    }
  }
  return fields;
}","@Override public List<SearchField> getSearchFields() throws IOException, JSONException {
  if (!initialised) {
    start();
  }
  Document doc=htmlGet(opac_url + ""String_Node_Str"" + s_sid+ ""String_Node_Str""+ s_service+ ""String_Node_Str""+ s_exts);
  List<SearchField> fields=new ArrayList<>();
  Elements searchoptions=doc.select(""String_Node_Str"");
  if (searchoptions.size() == 0 && doc.select(""String_Node_Str"").size() > 0) {
    searchoptions=doc.select(""String_Node_Str"").first().previousElementSibling().select(""String_Node_Str"");
  }
  for (  Element opt : searchoptions) {
    TextSearchField field=new TextSearchField();
    field.setId(opt.attr(""String_Node_Str""));
    field.setDisplayName(opt.text());
    field.setHint(""String_Node_Str"");
    fields.add(field);
  }
  JSONObject selectableData=new JSONObject();
  selectableData.put(""String_Node_Str"",false);
  for (  Element row : doc.select(""String_Node_Str"")) {
    if (row.select(""String_Node_Str"").size() == 1 && row.select(""String_Node_Str"").first().tagName().equals(""String_Node_Str"")) {
      Element input=row.select(""String_Node_Str"").first();
      TextSearchField field=new TextSearchField();
      field.setId(input.attr(""String_Node_Str""));
      field.setDisplayName(row.select(""String_Node_Str"").first().text());
      field.setHint(""String_Node_Str"");
      field.setData(selectableData);
      fields.add(field);
    }
 else     if (row.select(""String_Node_Str"").size() == 1 && row.select(""String_Node_Str"").size() == 0) {
      Element select=row.select(""String_Node_Str"").first();
      DropdownSearchField field=new DropdownSearchField();
      field.setId(select.id());
      field.setDisplayName(row.select(""String_Node_Str"").first().text());
      List<Map<String,String>> values=new ArrayList<>();
      for (      Element opt : select.select(""String_Node_Str"")) {
        field.addDropdownValue(opt.attr(""String_Node_Str""),opt.text());
      }
      fields.add(field);
    }
 else     if (row.select(""String_Node_Str"").size() == 0 && row.select(""String_Node_Str"").size() == 3 && row.select(""String_Node_Str"").size() == 3) {
      String name1=row.select(""String_Node_Str"").get(0).text();
      String name2=row.select(""String_Node_Str"").get(1).text();
      String name3=row.select(""String_Node_Str"").get(2).text();
      Element input1=row.select(""String_Node_Str"").get(0);
      Element input2=row.select(""String_Node_Str"").get(1);
      Element input3=row.select(""String_Node_Str"").get(2);
      if (name2.contains(""String_Node_Str"") && name3.contains(""String_Node_Str"")) {
        TextSearchField field1=new TextSearchField();
        field1.setId(input1.id());
        field1.setDisplayName(name1);
        field1.setHint(""String_Node_Str"");
        field1.setData(selectableData);
        fields.add(field1);
        TextSearchField field2=new TextSearchField();
        field2.setId(input2.id());
        field2.setDisplayName(name2.replace(""String_Node_Str"",""String_Node_Str"").trim());
        field2.setHint(""String_Node_Str"");
        field2.setData(selectableData);
        fields.add(field2);
        TextSearchField field3=new TextSearchField();
        field3.setId(input3.id());
        field3.setDisplayName(name3.replace(""String_Node_Str"",""String_Node_Str"").trim());
        field3.setHint(""String_Node_Str"");
        field3.setHalfWidth(true);
        field3.setData(selectableData);
        fields.add(field3);
      }
 else {
        TextSearchField field1=new TextSearchField();
        field1.setId(input1.id());
        field1.setDisplayName(name1);
        field1.setHint(""String_Node_Str"");
        field1.setData(selectableData);
        fields.add(field1);
        TextSearchField field2=new TextSearchField();
        field2.setId(input2.id());
        field2.setDisplayName(name2);
        field2.setHint(""String_Node_Str"");
        field2.setData(selectableData);
        fields.add(field2);
        TextSearchField field3=new TextSearchField();
        field3.setId(input3.id());
        field3.setDisplayName(name3);
        field3.setHint(""String_Node_Str"");
        field3.setData(selectableData);
        fields.add(field3);
      }
    }
  }
  for (Iterator<SearchField> iterator=fields.iterator(); iterator.hasNext(); ) {
    SearchField field=iterator.next();
    if (ignoredFieldNames.contains(field.getDisplayName())) {
      iterator.remove();
    }
  }
  return fields;
}"
86212,"static void parseMediaList(List<Map<String,String>> media,Document doc,StringProvider stringProvider,List<String> renewalCounts) throws OpacErrorException {
  Elements copytrs=doc.select(""String_Node_Str"");
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.GERMAN);
  int trs=copytrs.size();
  if (trs < 1) {
    throw new OpacErrorException(stringProvider.getString(StringProvider.COULD_NOT_LOAD_ACCOUNT));
  }
  assert(trs > 0);
  for (int i=0; i < trs; i++) {
    Element tr=copytrs.get(i);
    if (tr.select(""String_Node_Str"").size() > 0) {
      Map<String,String> e=new HashMap<>();
      if (tr.select(""String_Node_Str"").size() > 0) {
        e.put(AccountData.KEY_LENT_LINK,tr.select(""String_Node_Str"").attr(""String_Node_Str""));
      }
 else {
        e.put(AccountData.KEY_LENT_RENEWABLE,""String_Node_Str"");
      }
      Elements datatrs=tr.select(""String_Node_Str"");
      e.put(AccountData.KEY_LENT_TITLE,datatrs.get(0).text());
      List<TextNode> textNodes=datatrs.get(1).select(""String_Node_Str"").first().textNodes();
      List<TextNode> nodes=new ArrayList<>();
      Elements titles=datatrs.get(1).select(""String_Node_Str"");
      for (      TextNode node : textNodes) {
        if (!node.text().equals(""String_Node_Str"")) {
          nodes.add(node);
        }
      }
      assert(nodes.size() == titles.size());
      for (int j=0; j < nodes.size(); j++) {
        String title=titles.get(j).text();
        String value=nodes.get(j).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
        if (title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"")) {
        }
 else         if (title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"")) {
          e.put(AccountData.KEY_LENT_STATUS,value);
        }
 else         if (title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"")|| title.contains(""String_Node_Str"")) {
          e.put(AccountData.KEY_LENT_DEADLINE,value);
          try {
            e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,String.valueOf(sdf.parse(value).getTime()));
          }
 catch (          ParseException e1) {
            e1.printStackTrace();
          }
        }
 else         if (title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"")|| title.contains(""String_Node_Str"")) {
        }
      }
      media.add(e);
    }
 else {
      String prolongCount=""String_Node_Str"";
      if (renewalCounts.size() == trs && renewalCounts.get(i) != null) {
        prolongCount=renewalCounts.get(i);
      }
      String reminderCount=tr.child(13).text().trim();
      if (reminderCount.contains(""String_Node_Str"") && reminderCount.contains(""String_Node_Str"") && reminderCount.indexOf(""String_Node_Str"") < reminderCount.indexOf(""String_Node_Str"")) {
        reminderCount=reminderCount.substring(reminderCount.indexOf(""String_Node_Str"") + 1,reminderCount.indexOf(""String_Node_Str""));
      }
 else {
        reminderCount=""String_Node_Str"";
      }
      Map<String,String> e=new HashMap<>();
      if (tr.child(4).text().trim().length() < 5 && tr.child(5).text().trim().length() > 4) {
        e.put(AccountData.KEY_LENT_TITLE,tr.child(5).text().trim());
      }
 else {
        e.put(AccountData.KEY_LENT_TITLE,tr.child(4).text().trim());
      }
      String status=tr.child(13).text().trim();
      if (!reminderCount.equals(""String_Node_Str"") && !reminderCount.equals(""String_Node_Str"")) {
        if (!status.equals(""String_Node_Str""))         status+=""String_Node_Str"";
        status+=reminderCount + ""String_Node_Str"" + stringProvider.getString(StringProvider.REMINDERS)+ ""String_Node_Str"";
      }
      if (!status.equals(""String_Node_Str""))       status+=""String_Node_Str"";
      status+=prolongCount + ""String_Node_Str"" + stringProvider.getString(StringProvider.PROLONGED_ABBR);
      e.put(AccountData.KEY_LENT_STATUS,status);
      e.put(AccountData.KEY_LENT_DEADLINE,tr.child(21).text().trim());
      try {
        e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,String.valueOf(sdf.parse(e.get(AccountData.KEY_LENT_DEADLINE)).getTime()));
      }
 catch (      ParseException e1) {
        e1.printStackTrace();
      }
      if (tr.child(1).select(""String_Node_Str"").size() > 0) {
        e.put(AccountData.KEY_LENT_LINK,tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""));
      }
      media.add(e);
    }
  }
  assert(media.size() == trs - 1);
}","static void parseMediaList(List<Map<String,String>> media,Document doc,StringProvider stringProvider,List<String> renewalCounts) throws OpacErrorException {
  Elements copytrs=doc.select(""String_Node_Str"");
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.GERMAN);
  int trs=copytrs.size();
  if (trs < 1) {
    throw new OpacErrorException(stringProvider.getString(StringProvider.COULD_NOT_LOAD_ACCOUNT));
  }
  assert(trs > 0);
  for (int i=0; i < trs; i++) {
    Element tr=copytrs.get(i);
    if (tr.select(""String_Node_Str"").size() > 0) {
      Map<String,String> e=new HashMap<>();
      if (tr.select(""String_Node_Str"").size() > 0) {
        e.put(AccountData.KEY_LENT_LINK,tr.select(""String_Node_Str"").attr(""String_Node_Str""));
      }
 else {
        e.put(AccountData.KEY_LENT_RENEWABLE,""String_Node_Str"");
      }
      Elements datatrs=tr.select(""String_Node_Str"");
      e.put(AccountData.KEY_LENT_TITLE,datatrs.get(0).text());
      List<TextNode> textNodes=datatrs.get(1).select(""String_Node_Str"").first().textNodes();
      List<TextNode> nodes=new ArrayList<>();
      Elements titles=datatrs.get(1).select(""String_Node_Str"");
      for (      TextNode node : textNodes) {
        if (!node.text().equals(""String_Node_Str"")) {
          nodes.add(node);
        }
      }
      assert(nodes.size() == titles.size());
      for (int j=0; j < nodes.size(); j++) {
        String title=titles.get(j).text();
        String value=nodes.get(j).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
        if (title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"")) {
        }
 else         if (title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"")) {
          e.put(AccountData.KEY_LENT_STATUS,value);
        }
 else         if (title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"")|| title.contains(""String_Node_Str"")) {
          e.put(AccountData.KEY_LENT_DEADLINE,value);
          try {
            e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,String.valueOf(sdf.parse(value).getTime()));
          }
 catch (          ParseException e1) {
            e1.printStackTrace();
          }
        }
 else         if (title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"")|| title.contains(""String_Node_Str"")) {
        }
      }
      media.add(e);
    }
 else {
      String prolongCount=""String_Node_Str"";
      if (renewalCounts.size() == trs && renewalCounts.get(i) != null) {
        prolongCount=renewalCounts.get(i);
      }
      String reminderCount=tr.child(13).text().trim();
      if (reminderCount.contains(""String_Node_Str"") && reminderCount.contains(""String_Node_Str"") && reminderCount.indexOf(""String_Node_Str"") < reminderCount.indexOf(""String_Node_Str"")) {
        reminderCount=reminderCount.substring(reminderCount.indexOf(""String_Node_Str"") + 1,reminderCount.indexOf(""String_Node_Str""));
      }
 else {
        reminderCount=""String_Node_Str"";
      }
      Map<String,String> e=new HashMap<>();
      if (tr.child(4).text().trim().length() < 5 && tr.child(5).text().trim().length() > 4) {
        e.put(AccountData.KEY_LENT_TITLE,tr.child(5).text().trim());
      }
 else {
        e.put(AccountData.KEY_LENT_TITLE,tr.child(4).text().trim());
      }
      String status=tr.child(13).text().trim();
      if (!reminderCount.equals(""String_Node_Str"") && !reminderCount.equals(""String_Node_Str"")) {
        if (!status.equals(""String_Node_Str""))         status+=""String_Node_Str"";
        status+=reminderCount + ""String_Node_Str"" + stringProvider.getString(StringProvider.REMINDERS)+ ""String_Node_Str"";
      }
      if (!status.equals(""String_Node_Str""))       status+=""String_Node_Str"";
      status+=prolongCount + ""String_Node_Str"" + stringProvider.getString(StringProvider.PROLONGED_ABBR);
      e.put(AccountData.KEY_LENT_STATUS,status);
      e.put(AccountData.KEY_LENT_DEADLINE,tr.child(21).text().trim());
      try {
        e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,String.valueOf(sdf.parse(e.get(AccountData.KEY_LENT_DEADLINE)).getTime()));
      }
 catch (      ParseException e1) {
        e1.printStackTrace();
      }
      if (tr.child(1).select(""String_Node_Str"").size() > 0) {
        e.put(AccountData.KEY_LENT_LINK,tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""));
      }
      media.add(e);
    }
  }
  assert(media.size() == trs);
}"
86213,"static void parseResList(List<Map<String,String>> media,Document doc,StringProvider stringProvider) throws OpacErrorException {
  Elements copytrs=doc.select(""String_Node_Str"");
  int trs=copytrs.size();
  if (trs < 1) {
    throw new OpacErrorException(stringProvider.getString(StringProvider.COULD_NOT_LOAD_ACCOUNT));
  }
  assert(trs > 0);
  for (  Element tr : copytrs) {
    Map<String,String> e=new HashMap<>();
    if (tr.select(""String_Node_Str"").size() > 0) {
      if (tr.select(""String_Node_Str"").size() > 0) {
        e.put(AccountData.KEY_RESERVATION_CANCEL,tr.select(""String_Node_Str"").attr(""String_Node_Str""));
      }
      Elements datatrs=tr.select(""String_Node_Str"");
      e.put(AccountData.KEY_RESERVATION_TITLE,datatrs.get(0).text());
      List<TextNode> textNodes=datatrs.get(1).select(""String_Node_Str"").first().textNodes();
      List<TextNode> nodes=new ArrayList<>();
      Elements titles=datatrs.get(1).select(""String_Node_Str"");
      for (      TextNode node : textNodes) {
        if (!node.text().equals(""String_Node_Str"")) {
          nodes.add(node);
        }
      }
      assert(nodes.size() == titles.size());
      for (int j=0; j < nodes.size(); j++) {
        String title=titles.get(j).text();
        String value=nodes.get(j).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
        if (title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"")) {
        }
 else         if (title.contains(""String_Node_Str"")) {
        }
      }
    }
 else {
      e.put(AccountData.KEY_RESERVATION_TITLE,tr.child(5).text().trim());
      e.put(AccountData.KEY_RESERVATION_READY,tr.child(17).text().trim());
      e.put(AccountData.KEY_RESERVATION_CANCEL,tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""));
    }
    media.add(e);
  }
  assert(media.size() == trs - 1);
}","static void parseResList(List<Map<String,String>> media,Document doc,StringProvider stringProvider) throws OpacErrorException {
  Elements copytrs=doc.select(""String_Node_Str"");
  int trs=copytrs.size();
  if (trs < 1) {
    throw new OpacErrorException(stringProvider.getString(StringProvider.COULD_NOT_LOAD_ACCOUNT));
  }
  assert(trs > 0);
  for (  Element tr : copytrs) {
    Map<String,String> e=new HashMap<>();
    if (tr.select(""String_Node_Str"").size() > 0) {
      if (tr.select(""String_Node_Str"").size() > 0) {
        e.put(AccountData.KEY_RESERVATION_CANCEL,tr.select(""String_Node_Str"").attr(""String_Node_Str""));
      }
      Elements datatrs=tr.select(""String_Node_Str"");
      e.put(AccountData.KEY_RESERVATION_TITLE,datatrs.get(0).text());
      List<TextNode> textNodes=datatrs.get(1).select(""String_Node_Str"").first().textNodes();
      List<TextNode> nodes=new ArrayList<>();
      Elements titles=datatrs.get(1).select(""String_Node_Str"");
      for (      TextNode node : textNodes) {
        if (!node.text().equals(""String_Node_Str"")) {
          nodes.add(node);
        }
      }
      assert(nodes.size() == titles.size());
      for (int j=0; j < nodes.size(); j++) {
        String title=titles.get(j).text();
        String value=nodes.get(j).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
        if (title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"") || title.contains(""String_Node_Str"")) {
        }
 else         if (title.contains(""String_Node_Str"")) {
        }
      }
    }
 else {
      e.put(AccountData.KEY_RESERVATION_TITLE,tr.child(5).text().trim());
      e.put(AccountData.KEY_RESERVATION_READY,tr.child(17).text().trim());
      e.put(AccountData.KEY_RESERVATION_CANCEL,tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""));
    }
    media.add(e);
  }
  assert(media.size() == trs);
}"
86214,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.context=getActivity();
  addPreferencesFromResource(R.xml.settings);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH || !context.getPackageManager().hasSystemFeature(""String_Node_Str"")) {
    findPreference(""String_Node_Str"").setEnabled(false);
  }
  Preference assistant=findPreference(""String_Node_Str"");
  assistant.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference arg0){
      ((OpacClient)context.getApplication()).openAccountList(context);
      return false;
    }
  }
);
  if (!ebooksSupported()) {
    ((PreferenceCategory)findPreference(""String_Node_Str"")).removePreference(findPreference(""String_Node_Str""));
  }
  Preference meta=findPreference(""String_Node_Str"");
  meta.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference arg0){
      AccountDataSource adata=new AccountDataSource(context);
      adata.open();
      adata.invalidateCachedData();
      adata.notificationClearCache(true);
      adata.close();
      SearchFieldDataSource sfdata=new JsonSearchFieldDataSource(context);
      sfdata.clearAll();
      Intent i=new Intent(context,ReminderCheckService.class);
      context.startService(i);
      return false;
    }
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  this.context=getActivity();
  addPreferencesFromResource(R.xml.settings);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH || !context.getPackageManager().hasSystemFeature(""String_Node_Str"")) {
    if (findPreference(""String_Node_Str"") != null) {
      findPreference(""String_Node_Str"").setEnabled(false);
    }
  }
  Preference assistant=findPreference(""String_Node_Str"");
  assistant.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference arg0){
      ((OpacClient)context.getApplication()).openAccountList(context);
      return false;
    }
  }
);
  if (!ebooksSupported()) {
    ((PreferenceCategory)findPreference(""String_Node_Str"")).removePreference(findPreference(""String_Node_Str""));
  }
  Preference meta=findPreference(""String_Node_Str"");
  meta.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference arg0){
      AccountDataSource adata=new AccountDataSource(context);
      adata.open();
      adata.invalidateCachedData();
      adata.notificationClearCache(true);
      adata.close();
      SearchFieldDataSource sfdata=new JsonSearchFieldDataSource(context);
      sfdata.clearAll();
      Intent i=new Intent(context,ReminderCheckService.class);
      context.startService(i);
      return false;
    }
  }
);
}"
86215,"protected DetailledItem parse_result(String html) throws IOException {
  Document doc=Jsoup.parse(html);
  doc.setBaseUri(opac_url);
  DetailledItem result=new DetailledItem();
  if (doc.select(""String_Node_Str"").size() > 0) {
    String js=doc.select(""String_Node_Str"").first().html();
    String isbn=matchJSVariable(js,""String_Node_Str"");
    String ajaxUrl=matchJSVariable(js,""String_Node_Str"");
    if (!""String_Node_Str"".equals(isbn) && !""String_Node_Str"".equals(ajaxUrl)) {
      String url=new URL(new URL(opac_url + ""String_Node_Str""),ajaxUrl).toString();
      String coverUrl=httpGet(url + ""String_Node_Str"" + isbn+ ""String_Node_Str"",ENCODING);
      if (!""String_Node_Str"".equals(coverUrl)) {
        result.setCover(coverUrl.replace(""String_Node_Str"",""String_Node_Str"").trim());
      }
    }
  }
  result.setTitle(doc.select(""String_Node_Str"").first().text());
  for (  Element tr : doc.select(""String_Node_Str"")) {
    String detailName=tr.select(""String_Node_Str"").first().text().trim();
    String detailValue=tr.select(""String_Node_Str"").last().text().trim();
    result.addDetail(new Detail(detailName,detailValue));
    if (detailName.contains(""String_Node_Str"")) {
      result.setId(detailValue);
    }
  }
  if (result.getDetails().size() == 0 && doc.select(""String_Node_Str"").size() > 0) {
    String dname=""String_Node_Str"";
    String dval=""String_Node_Str"";
    boolean in_value=true;
    for (    Node n : doc.select(""String_Node_Str"").first().childNodes()) {
      if (n instanceof Element && ((Element)n).tagName().equals(""String_Node_Str"")) {
        if (in_value) {
          if (dname.length() > 0 && dval.length() > 0) {
            result.addDetail(new Detail(dname,dval));
          }
          dname=((Element)n).text();
          in_value=false;
        }
 else {
          dname+=((Element)n).text();
        }
      }
 else {
        String t=null;
        if (n instanceof TextNode) {
          t=((TextNode)n).text();
        }
 else         if (n instanceof Element) {
          t=((Element)n).text();
        }
        if (t != null) {
          if (in_value) {
            dval+=t;
          }
 else {
            in_value=true;
            dval=t;
          }
        }
      }
    }
  }
  String copiesParameter=doc.select(""String_Node_Str"").attr(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  if (!""String_Node_Str"".equals(copiesParameter)) {
    String copiesHtml=httpGet(opac_url + ""String_Node_Str"" + copiesParameter,ENCODING);
    Document copiesDoc=Jsoup.parse(copiesHtml);
    List<String> table_keys=new ArrayList<>();
    for (    Element th : copiesDoc.select(""String_Node_Str"")) {
      if (th.text().contains(""String_Node_Str"")) {
        table_keys.add(DetailledItem.KEY_COPY_BRANCH);
      }
 else       if (th.text().contains(""String_Node_Str"")) {
        table_keys.add(DetailledItem.KEY_COPY_STATUS);
      }
 else       if (th.text().contains(""String_Node_Str"")) {
        table_keys.add(DetailledItem.KEY_COPY_SHELFMARK);
      }
 else {
        table_keys.add(null);
      }
    }
    for (    Element tr : copiesDoc.select(""String_Node_Str"")) {
      Map<String,String> copy=new HashMap<>();
      int i=0;
      for (      Element td : tr.select(""String_Node_Str"")) {
        if (table_keys.get(i) != null) {
          copy.put(table_keys.get(i),td.text().trim());
        }
        i++;
      }
      result.addCopy(copy);
    }
  }
  if (!""String_Node_Str"".equals(copiesParameter)) {
    String reservationParameter=copiesParameter.replace(""String_Node_Str"",""String_Node_Str"");
    try {
      String reservationHtml=httpGet(opac_url + ""String_Node_Str"" + reservationParameter,ENCODING);
      Document reservationDoc=Jsoup.parse(reservationHtml);
      reservationDoc.setBaseUri(opac_url);
      if (reservationDoc.select(""String_Node_Str"").size() == 1) {
        result.setReservable(true);
        result.setReservation_info(reservationDoc.select(""String_Node_Str"").first().attr(""String_Node_Str""));
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  try {
    Element isvolume=null;
    Map<String,String> volume=new HashMap<>();
    Elements links=doc.select(""String_Node_Str"");
    int elcount=links.size();
    for (int eli=0; eli < elcount; eli++) {
      List<NameValuePair> anyurl=URLEncodedUtils.parse(new URI(links.get(eli).attr(""String_Node_Str"")),""String_Node_Str"");
      for (      NameValuePair nv : anyurl) {
        if (nv.getName().equals(""String_Node_Str"") && nv.getValue().equals(""String_Node_Str"")) {
          isvolume=links.get(eli);
        }
 else         if (nv.getName().equals(""String_Node_Str"")) {
          volume.put(""String_Node_Str"",nv.getValue());
        }
 else         if (nv.getName().equals(""String_Node_Str"")) {
          volume.put(""String_Node_Str"",nv.getValue());
        }
      }
      if (isvolume != null) {
        volume.put(""String_Node_Str"",""String_Node_Str"");
        result.setVolumesearch(volume);
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return result;
}","protected DetailledItem parse_result(String html) throws IOException {
  Document doc=Jsoup.parse(html);
  doc.setBaseUri(opac_url);
  DetailledItem result=new DetailledItem();
  if (doc.select(""String_Node_Str"").size() > 0) {
    String js=doc.select(""String_Node_Str"").first().html();
    String isbn=matchJSVariable(js,""String_Node_Str"");
    String ajaxUrl=matchJSVariable(js,""String_Node_Str"");
    if (ajaxUrl == null) {
      ajaxUrl=matchJSParameter(js,""String_Node_Str"");
    }
    if (ajaxUrl != null && !""String_Node_Str"".equals(ajaxUrl)) {
      if (!""String_Node_Str"".equals(isbn) && isbn != null) {
        String url=new URL(new URL(opac_url + ""String_Node_Str""),ajaxUrl).toString();
        String coverUrl=httpGet(url + ""String_Node_Str"" + isbn+ ""String_Node_Str"",ENCODING);
        if (!""String_Node_Str"".equals(coverUrl)) {
          result.setCover(coverUrl.replace(""String_Node_Str"",""String_Node_Str"").trim());
        }
      }
 else {
        String url=new URL(new URL(opac_url + ""String_Node_Str""),ajaxUrl).toString();
        String coverJs=httpGet(url,ENCODING);
        result.setCover(matchHTMLAttr(coverJs,""String_Node_Str""));
      }
    }
  }
  result.setTitle(doc.select(""String_Node_Str"").first().text());
  for (  Element tr : doc.select(""String_Node_Str"")) {
    String detailName=tr.select(""String_Node_Str"").first().text().trim();
    String detailValue=tr.select(""String_Node_Str"").last().text().trim();
    result.addDetail(new Detail(detailName,detailValue));
    if (detailName.contains(""String_Node_Str"")) {
      result.setId(detailValue);
    }
  }
  if (result.getDetails().size() == 0 && doc.select(""String_Node_Str"").size() > 0) {
    String dname=""String_Node_Str"";
    String dval=""String_Node_Str"";
    boolean in_value=true;
    for (    Node n : doc.select(""String_Node_Str"").first().childNodes()) {
      if (n instanceof Element && ((Element)n).tagName().equals(""String_Node_Str"")) {
        if (in_value) {
          if (dname.length() > 0 && dval.length() > 0) {
            result.addDetail(new Detail(dname,dval));
          }
          dname=((Element)n).text();
          in_value=false;
        }
 else {
          dname+=((Element)n).text();
        }
      }
 else {
        String t=null;
        if (n instanceof TextNode) {
          t=((TextNode)n).text();
        }
 else         if (n instanceof Element) {
          t=((Element)n).text();
        }
        if (t != null) {
          if (in_value) {
            dval+=t;
          }
 else {
            in_value=true;
            dval=t;
          }
        }
      }
    }
  }
  String copiesParameter=doc.select(""String_Node_Str"").attr(""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"");
  if (!""String_Node_Str"".equals(copiesParameter)) {
    String copiesHtml=httpGet(opac_url + ""String_Node_Str"" + copiesParameter,ENCODING);
    Document copiesDoc=Jsoup.parse(copiesHtml);
    List<String> table_keys=new ArrayList<>();
    for (    Element th : copiesDoc.select(""String_Node_Str"")) {
      if (th.text().contains(""String_Node_Str"")) {
        table_keys.add(DetailledItem.KEY_COPY_BRANCH);
      }
 else       if (th.text().contains(""String_Node_Str"")) {
        table_keys.add(DetailledItem.KEY_COPY_STATUS);
      }
 else       if (th.text().contains(""String_Node_Str"")) {
        table_keys.add(DetailledItem.KEY_COPY_SHELFMARK);
      }
 else {
        table_keys.add(null);
      }
    }
    for (    Element tr : copiesDoc.select(""String_Node_Str"")) {
      Map<String,String> copy=new HashMap<>();
      int i=0;
      for (      Element td : tr.select(""String_Node_Str"")) {
        if (table_keys.get(i) != null) {
          copy.put(table_keys.get(i),td.text().trim());
        }
        i++;
      }
      result.addCopy(copy);
    }
  }
  if (!""String_Node_Str"".equals(copiesParameter)) {
    String reservationParameter=copiesParameter.replace(""String_Node_Str"",""String_Node_Str"");
    try {
      String reservationHtml=httpGet(opac_url + ""String_Node_Str"" + reservationParameter,ENCODING);
      Document reservationDoc=Jsoup.parse(reservationHtml);
      reservationDoc.setBaseUri(opac_url);
      if (reservationDoc.select(""String_Node_Str"").size() == 1) {
        result.setReservable(true);
        result.setReservation_info(reservationDoc.select(""String_Node_Str"").first().attr(""String_Node_Str""));
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  try {
    Element isvolume=null;
    Map<String,String> volume=new HashMap<>();
    Elements links=doc.select(""String_Node_Str"");
    int elcount=links.size();
    for (int eli=0; eli < elcount; eli++) {
      List<NameValuePair> anyurl=URLEncodedUtils.parse(new URI(links.get(eli).attr(""String_Node_Str"")),""String_Node_Str"");
      for (      NameValuePair nv : anyurl) {
        if (nv.getName().equals(""String_Node_Str"") && nv.getValue().equals(""String_Node_Str"")) {
          isvolume=links.get(eli);
        }
 else         if (nv.getName().equals(""String_Node_Str"")) {
          volume.put(""String_Node_Str"",nv.getValue());
        }
 else         if (nv.getName().equals(""String_Node_Str"")) {
          volume.put(""String_Node_Str"",nv.getValue());
        }
      }
      if (isvolume != null) {
        volume.put(""String_Node_Str"",""String_Node_Str"");
        result.setVolumesearch(volume);
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return result;
}"
86216,"private String matchJSVariable(String js,String varName){
  Pattern pattern=Pattern.compile(""String_Node_Str"" + varName + ""String_Node_Str"");
  Matcher matcher=pattern.matcher(js);
  if (matcher.find()) {
    return matcher.group(1);
  }
 else {
    return null;
  }
}","private String matchJSVariable(String js,String varName){
  Pattern patternVar=Pattern.compile(""String_Node_Str"" + varName + ""String_Node_Str"");
  Matcher matcher=patternVar.matcher(js);
  if (matcher.find()) {
    return matcher.group(1);
  }
 else {
    return null;
  }
}"
86217,"protected void buildSearchForm(){
  if (app.getLibrary().getReplacedBy() != null && sp.getInt(""String_Node_Str"",0) < 5) {
    rlReplaced.setVisibility(View.VISIBLE);
    ivReplacedStore.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        try {
          Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + app.getLibrary().getReplacedBy()));
          startActivity(i);
        }
 catch (        ActivityNotFoundException e) {
          Log.i(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
);
    sp.edit().putInt(""String_Node_Str"",sp.getInt(""String_Node_Str"",0) + 1).commit();
  }
 else {
    rlReplaced.setVisibility(View.GONE);
  }
  llFormFields.removeAllViews();
  llAdvancedFields.removeAllViews();
  llExpand.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      setAdvanced(!advanced);
    }
  }
);
  rlSimpleSearch.setVisibility(View.GONE);
  tvSearchAdvHeader.setVisibility(View.GONE);
  int i=0;
  if (fields == null) {
    return;
  }
  for (  final SearchField field : fields) {
    if (!field.isVisible()) {
      continue;
    }
    ViewGroup v=null;
    if (field instanceof TextSearchField) {
      TextSearchField textSearchField=(TextSearchField)field;
      if (textSearchField.isFreeSearch()) {
        rlSimpleSearch.setVisibility(View.VISIBLE);
        tvSearchAdvHeader.setVisibility(View.VISIBLE);
        etSimpleSearch.setHint(textSearchField.getHint());
      }
 else {
        v=(ViewGroup)getLayoutInflater(null).inflate(R.layout.searchfield_text,llFormFields,false);
        TextView title=(TextView)v.findViewById(R.id.title);
        title.setText(textSearchField.getDisplayName());
        EditText edittext=(EditText)v.findViewById(R.id.edittext);
        edittext.setHint(textSearchField.getHint());
        if (((TextSearchField)field).isNumber()) {
          edittext.setInputType(InputType.TYPE_CLASS_NUMBER);
        }
        if (((TextSearchField)field).isHalfWidth() && i >= 1 && !(fields.get(i - 1) instanceof TextSearchField && ((TextSearchField)fields.get(i - 1)).isFreeSearch())) {
          ViewGroup before=(ViewGroup)view.findViewWithTag(fields.get(i - 1).getId());
          llFormFields.removeView(before);
          llAdvancedFields.removeView(before);
          v.setTag(field.getId());
          View together=makeHalfWidth(before,v);
          v=null;
          if (field.isAdvanced()) {
            llAdvancedFields.addView(together);
          }
 else {
            llFormFields.addView(together);
          }
        }
      }
    }
 else     if (field instanceof BarcodeSearchField) {
      BarcodeSearchField bcSearchField=(BarcodeSearchField)field;
      v=(ViewGroup)getLayoutInflater(null).inflate(R.layout.searchfield_barcode,llFormFields,false);
      TextView title=(TextView)v.findViewById(R.id.title);
      title.setText(bcSearchField.getDisplayName());
      EditText edittext=(EditText)v.findViewById(R.id.edittext);
      edittext.setHint(bcSearchField.getHint());
      ImageView ivBarcode=(ImageView)v.findViewById(R.id.ivBarcode);
      ivBarcode.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View arg0){
          barcodeScanningField=field.getId();
          callback.scanBarcode();
        }
      }
);
      if (((BarcodeSearchField)field).isHalfWidth() && i >= 1 && !(fields.get(i - 1) instanceof TextSearchField && ((TextSearchField)fields.get(i - 1)).isFreeSearch())) {
        ViewGroup before=(ViewGroup)view.findViewWithTag(fields.get(i - 1).getId());
        llFormFields.removeView(before);
        llAdvancedFields.removeView(before);
        v=makeHalfWidth(before,v);
      }
    }
 else     if (field instanceof DropdownSearchField) {
      DropdownSearchField ddSearchField=(DropdownSearchField)field;
      v=(ViewGroup)getLayoutInflater(null).inflate(R.layout.searchfield_dropdown,llFormFields,false);
      TextView title=(TextView)v.findViewById(R.id.title);
      title.setText(ddSearchField.getDisplayName());
      Spinner spinner=(Spinner)v.findViewById(R.id.spinner);
      spinner.setAdapter(((OpacActivity)getActivity()).new MetaAdapter<DropdownSearchField.Option>(getActivity(),ddSearchField.getDropdownValues(),R.layout.simple_spinner_item));
      if (field.getMeaning() == Meaning.HOME_BRANCH) {
        String selection;
        if (sp.contains(OpacClient.PREF_HOME_BRANCH_PREFIX + app.getAccount().getId())) {
          selection=sp.getString(OpacClient.PREF_HOME_BRANCH_PREFIX + app.getAccount().getId(),""String_Node_Str"");
        }
 else {
          try {
            selection=app.getLibrary().getData().getString(""String_Node_Str"");
          }
 catch (          JSONException e) {
            selection=""String_Node_Str"";
          }
        }
        if (!selection.equals(""String_Node_Str"")) {
          int j=0;
          for (          DropdownSearchField.Option row : ddSearchField.getDropdownValues()) {
            if (row.getKey().equals(selection)) {
              spinner.setSelection(j);
            }
            j++;
          }
        }
      }
    }
 else     if (field instanceof CheckboxSearchField) {
      CheckboxSearchField cbSearchField=(CheckboxSearchField)field;
      v=(ViewGroup)getLayoutInflater(null).inflate(R.layout.searchfield_checkbox,llFormFields,false);
      CheckBox checkbox=(CheckBox)v.findViewById(R.id.checkbox);
      checkbox.setText(cbSearchField.getDisplayName());
    }
    if (v != null) {
      v.setTag(field.getId());
      if (field.isAdvanced()) {
        llAdvancedFields.addView(v);
      }
 else {
        llFormFields.addView(v);
      }
    }
    i++;
  }
  llExpand.setVisibility(llAdvancedFields.getChildCount() == 0 ? View.GONE : View.VISIBLE);
}","protected void buildSearchForm(Map<String,String> restoreQuery){
  if (app.getLibrary().getReplacedBy() != null && sp.getInt(""String_Node_Str"",0) < 5) {
    rlReplaced.setVisibility(View.VISIBLE);
    ivReplacedStore.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        try {
          Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + app.getLibrary().getReplacedBy()));
          startActivity(i);
        }
 catch (        ActivityNotFoundException e) {
          Log.i(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
);
    sp.edit().putInt(""String_Node_Str"",sp.getInt(""String_Node_Str"",0) + 1).commit();
  }
 else {
    rlReplaced.setVisibility(View.GONE);
  }
  llFormFields.removeAllViews();
  llAdvancedFields.removeAllViews();
  llExpand.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      setAdvanced(!advanced);
    }
  }
);
  rlSimpleSearch.setVisibility(View.GONE);
  tvSearchAdvHeader.setVisibility(View.GONE);
  int i=0;
  if (fields == null) {
    return;
  }
  for (  final SearchField field : fields) {
    if (!field.isVisible()) {
      continue;
    }
    ViewGroup v=null;
    if (field instanceof TextSearchField) {
      TextSearchField textSearchField=(TextSearchField)field;
      if (textSearchField.isFreeSearch()) {
        rlSimpleSearch.setVisibility(View.VISIBLE);
        tvSearchAdvHeader.setVisibility(View.VISIBLE);
        etSimpleSearch.setHint(textSearchField.getHint());
      }
 else {
        v=(ViewGroup)getLayoutInflater(null).inflate(R.layout.searchfield_text,llFormFields,false);
        TextView title=(TextView)v.findViewById(R.id.title);
        title.setText(textSearchField.getDisplayName());
        EditText edittext=(EditText)v.findViewById(R.id.edittext);
        edittext.setHint(textSearchField.getHint());
        if (((TextSearchField)field).isNumber()) {
          edittext.setInputType(InputType.TYPE_CLASS_NUMBER);
        }
        if (((TextSearchField)field).isHalfWidth() && i >= 1 && !(fields.get(i - 1) instanceof TextSearchField && ((TextSearchField)fields.get(i - 1)).isFreeSearch())) {
          ViewGroup before=(ViewGroup)view.findViewWithTag(fields.get(i - 1).getId());
          llFormFields.removeView(before);
          llAdvancedFields.removeView(before);
          v.setTag(field.getId());
          View together=makeHalfWidth(before,v);
          v=null;
          if (field.isAdvanced()) {
            llAdvancedFields.addView(together);
          }
 else {
            llFormFields.addView(together);
          }
        }
      }
    }
 else     if (field instanceof BarcodeSearchField) {
      BarcodeSearchField bcSearchField=(BarcodeSearchField)field;
      v=(ViewGroup)getLayoutInflater(null).inflate(R.layout.searchfield_barcode,llFormFields,false);
      TextView title=(TextView)v.findViewById(R.id.title);
      title.setText(bcSearchField.getDisplayName());
      EditText edittext=(EditText)v.findViewById(R.id.edittext);
      edittext.setHint(bcSearchField.getHint());
      ImageView ivBarcode=(ImageView)v.findViewById(R.id.ivBarcode);
      ivBarcode.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View arg0){
          barcodeScanningField=field.getId();
          callback.scanBarcode();
        }
      }
);
      if (((BarcodeSearchField)field).isHalfWidth() && i >= 1 && !(fields.get(i - 1) instanceof TextSearchField && ((TextSearchField)fields.get(i - 1)).isFreeSearch())) {
        ViewGroup before=(ViewGroup)view.findViewWithTag(fields.get(i - 1).getId());
        llFormFields.removeView(before);
        llAdvancedFields.removeView(before);
        v=makeHalfWidth(before,v);
      }
    }
 else     if (field instanceof DropdownSearchField) {
      DropdownSearchField ddSearchField=(DropdownSearchField)field;
      v=(ViewGroup)getLayoutInflater(null).inflate(R.layout.searchfield_dropdown,llFormFields,false);
      TextView title=(TextView)v.findViewById(R.id.title);
      title.setText(ddSearchField.getDisplayName());
      Spinner spinner=(Spinner)v.findViewById(R.id.spinner);
      spinner.setAdapter(((OpacActivity)getActivity()).new MetaAdapter<DropdownSearchField.Option>(getActivity(),ddSearchField.getDropdownValues(),R.layout.simple_spinner_item));
      if (field.getMeaning() == Meaning.HOME_BRANCH) {
        String selection;
        if (sp.contains(OpacClient.PREF_HOME_BRANCH_PREFIX + app.getAccount().getId())) {
          selection=sp.getString(OpacClient.PREF_HOME_BRANCH_PREFIX + app.getAccount().getId(),""String_Node_Str"");
        }
 else {
          try {
            selection=app.getLibrary().getData().getString(""String_Node_Str"");
          }
 catch (          JSONException e) {
            selection=""String_Node_Str"";
          }
        }
        if (!selection.equals(""String_Node_Str"")) {
          int j=0;
          for (          DropdownSearchField.Option row : ddSearchField.getDropdownValues()) {
            if (row.getKey().equals(selection)) {
              spinner.setSelection(j);
            }
            j++;
          }
        }
      }
    }
 else     if (field instanceof CheckboxSearchField) {
      CheckboxSearchField cbSearchField=(CheckboxSearchField)field;
      v=(ViewGroup)getLayoutInflater(null).inflate(R.layout.searchfield_checkbox,llFormFields,false);
      CheckBox checkbox=(CheckBox)v.findViewById(R.id.checkbox);
      checkbox.setText(cbSearchField.getDisplayName());
    }
    if (v != null) {
      v.setTag(field.getId());
      if (field.isAdvanced()) {
        llAdvancedFields.addView(v);
      }
 else {
        llFormFields.addView(v);
      }
    }
    i++;
  }
  llExpand.setVisibility(llAdvancedFields.getChildCount() == 0 ? View.GONE : View.VISIBLE);
  if (restoreQuery != null) {
    loadQuery(restoreQuery);
  }
}"
86218,"@Override protected void onPostExecute(List<SearchField> fields){
  if (getActivity() == null) {
    return;
  }
  progress(false);
  if (fields != null) {
    SearchFragment.this.fields=fields;
    buildSearchForm();
    if (savedState != null) {
      loadQuery(savedState);
    }
  }
 else {
    if (exception != null && exception instanceof OpacErrorException) {
      showConnectivityError(exception.getMessage());
    }
 else     if (exception != null && exception instanceof SSLSecurityException) {
      showConnectivityError(getString(R.string.connection_error_detail_security));
    }
 else {
      showConnectivityError();
    }
  }
}","@Override protected void onPostExecute(List<SearchField> fields){
  if (getActivity() == null) {
    return;
  }
  progress(false);
  if (fields != null) {
    SearchFragment.this.fields=fields;
    buildSearchForm(savedState != null ? OpacClient.bundleToMap(savedState) : saveQuery());
    savedState=null;
  }
 else {
    if (exception != null && exception instanceof OpacErrorException) {
      showConnectivityError(exception.getMessage());
    }
 else     if (exception != null && exception instanceof SSLSecurityException) {
      showConnectivityError(getString(R.string.connection_error_detail_security));
    }
 else {
      showConnectivityError();
    }
  }
}"
86219,"public void barcodeScanned(ScanResult scanResult){
  this.scanResult=scanResult;
  if (barcodeScanningField != null) {
    ViewGroup v=(ViewGroup)view.findViewWithTag(barcodeScanningField);
    EditText text=(EditText)v.findViewById(R.id.edittext);
    text.setText(scanResult.getContents());
    barcodeScanningField=null;
    this.scanResult=null;
  }
}","public void barcodeScanned(ScanResult scanResult){
  this.scanResult=scanResult;
}"
86220,"@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  if (savedInstanceState != null && savedInstanceState.containsKey(""String_Node_Str"")) {
    savedState=savedInstanceState.getBundle(""String_Node_Str"");
  }
  if (savedInstanceState != null && savedInstanceState.containsKey(""String_Node_Str"")) {
    barcodeScanningField=savedInstanceState.getString(""String_Node_Str"");
  }
}","@Override public void onActivityCreated(Bundle savedInstanceState){
  super.onActivityCreated(savedInstanceState);
  if (savedInstanceState != null && savedInstanceState.containsKey(""String_Node_Str"")) {
    savedState=savedInstanceState.getBundle(""String_Node_Str"");
  }
  buildSearchForm(OpacClient.bundleToMap(savedState));
  if (savedInstanceState != null && savedInstanceState.containsKey(""String_Node_Str"")) {
    barcodeScanningField=savedInstanceState.getString(""String_Node_Str"");
  }
}"
86221,"@Override public void accountSelected(Account account){
  errorView.removeAllViews();
  progress(false);
  SearchFieldDataSource dataSource=new JsonSearchFieldDataSource(app);
  int versionCode=0;
  try {
    versionCode=app.getPackageManager().getPackageInfo(app.getPackageName(),0).versionCode;
  }
 catch (  NameNotFoundException e) {
    e.printStackTrace();
  }
  String language=getActivity().getResources().getConfiguration().locale.getLanguage();
  if (dataSource.hasSearchFields(app.getLibrary().getIdent()) && dataSource.getLastSearchFieldUpdateVersion(app.getLibrary().getIdent()) == versionCode && language.equals(dataSource.getSearchFieldLanguage(app.getLibrary().getIdent()))) {
    if (task != null && !task.isCancelled()) {
      task.cancel(true);
    }
    fields=dataSource.getSearchFields(app.getLibrary().getIdent());
    buildSearchForm();
    if (savedState != null) {
      loadQuery(savedState);
    }
  }
 else {
    executeNewLoadSearchFieldsTask();
  }
  setAdvanced(false);
}","@Override public void accountSelected(Account account){
  errorView.removeAllViews();
  progress(false);
  SearchFieldDataSource dataSource=new JsonSearchFieldDataSource(app);
  int versionCode=0;
  try {
    versionCode=app.getPackageManager().getPackageInfo(app.getPackageName(),0).versionCode;
  }
 catch (  NameNotFoundException e) {
    e.printStackTrace();
  }
  String language=getActivity().getResources().getConfiguration().locale.getLanguage();
  if (dataSource.hasSearchFields(app.getLibrary().getIdent()) && dataSource.getLastSearchFieldUpdateVersion(app.getLibrary().getIdent()) == versionCode && language.equals(dataSource.getSearchFieldLanguage(app.getLibrary().getIdent()))) {
    if (task != null && !task.isCancelled()) {
      task.cancel(true);
    }
    fields=dataSource.getSearchFields(app.getLibrary().getIdent());
    buildSearchForm(savedState != null ? OpacClient.bundleToMap(savedState) : saveQuery());
    savedState=null;
  }
 else {
    executeNewLoadSearchFieldsTask();
  }
  setAdvanced(false);
}"
86222,"public Map<String,String> saveQuery(){
  if (app.getLibrary() == null) {
    return null;
  }
  saveHomeBranch();
  Map<String,String> query=new HashMap<>();
  if (fields == null) {
    SearchFieldDataSource dataSource=new JsonSearchFieldDataSource(app);
    int versionCode=0;
    try {
      versionCode=app.getPackageManager().getPackageInfo(app.getPackageName(),0).versionCode;
    }
 catch (    NameNotFoundException e) {
      e.printStackTrace();
    }
    if (dataSource.hasSearchFields(app.getLibrary().getIdent()) && dataSource.getLastSearchFieldUpdateVersion(app.getLibrary().getIdent()) == versionCode) {
      if (task != null && !task.isCancelled()) {
        task.cancel(true);
      }
      fields=dataSource.getSearchFields(app.getLibrary().getIdent());
    }
 else {
      return null;
    }
  }
  for (  SearchField field : fields) {
    if (!field.isVisible()) {
      continue;
    }
    ViewGroup v=(ViewGroup)view.findViewWithTag(field.getId());
    if (v == null) {
      return null;
    }
    if (field instanceof TextSearchField) {
      EditText text;
      if (((TextSearchField)field).isFreeSearch()) {
        text=etSimpleSearch;
      }
 else {
        text=(EditText)v.findViewById(R.id.edittext);
      }
      query.put(field.getId(),text.getEditableText().toString());
    }
 else     if (field instanceof BarcodeSearchField) {
      EditText text=(EditText)v.findViewById(R.id.edittext);
      query.put(field.getId(),text.getEditableText().toString());
    }
 else     if (field instanceof DropdownSearchField) {
      Spinner spinner=(Spinner)v.findViewById(R.id.spinner);
      if (spinner.getSelectedItemPosition() > 0) {
        query.put(field.getId(),((DropdownSearchField)field).getDropdownValues().get(spinner.getSelectedItemPosition()).getKey());
      }
    }
 else     if (field instanceof CheckboxSearchField) {
      CheckBox checkbox=(CheckBox)v.findViewById(R.id.checkbox);
      query.put(field.getId(),String.valueOf(checkbox.isChecked()));
    }
  }
  return query;
}","public Map<String,String> saveQuery(){
  if (app.getLibrary() == null) {
    return null;
  }
  saveHomeBranch();
  Map<String,String> query=new HashMap<>();
  if (fields == null) {
    SearchFieldDataSource dataSource=new JsonSearchFieldDataSource(app);
    int versionCode=0;
    try {
      versionCode=app.getPackageManager().getPackageInfo(app.getPackageName(),0).versionCode;
    }
 catch (    NameNotFoundException e) {
      e.printStackTrace();
    }
    if (dataSource.hasSearchFields(app.getLibrary().getIdent()) && dataSource.getLastSearchFieldUpdateVersion(app.getLibrary().getIdent()) == versionCode) {
      if (task != null && !task.isCancelled()) {
        task.cancel(true);
      }
      fields=dataSource.getSearchFields(app.getLibrary().getIdent());
    }
 else {
      return null;
    }
  }
  for (  SearchField field : fields) {
    if (!field.isVisible()) {
      continue;
    }
    if (field instanceof TextSearchField && ((TextSearchField)field).isFreeSearch()) {
      query.put(field.getId(),etSimpleSearch.getEditableText().toString());
      continue;
    }
    ViewGroup v=(ViewGroup)view.findViewWithTag(field.getId());
    if (v == null) {
      continue;
    }
    if (field instanceof TextSearchField) {
      EditText text=(EditText)v.findViewById(R.id.edittext);
      query.put(field.getId(),text.getEditableText().toString());
    }
 else     if (field instanceof BarcodeSearchField) {
      EditText text=(EditText)v.findViewById(R.id.edittext);
      query.put(field.getId(),text.getEditableText().toString());
    }
 else     if (field instanceof DropdownSearchField) {
      Spinner spinner=(Spinner)v.findViewById(R.id.spinner);
      if (spinner.getSelectedItemPosition() > 0) {
        query.put(field.getId(),((DropdownSearchField)field).getDropdownValues().get(spinner.getSelectedItemPosition()).getKey());
      }
    }
 else     if (field instanceof CheckboxSearchField) {
      CheckBox checkbox=(CheckBox)v.findViewById(R.id.checkbox);
      query.put(field.getId(),String.valueOf(checkbox.isChecked()));
    }
  }
  return query;
}"
86223,"@Override public SearchRequestResult search(List<SearchQuery> queries) throws IOException, OpacErrorException {
  start();
  Document doc=htmlGet(opac_url + ""String_Node_Str"" + s_sid+ ""String_Node_Str""+ s_service+ ""String_Node_Str""+ s_exts);
  int dropdownTextCount=0;
  int totalCount=0;
  List<NameValuePair> nvpairs=new ArrayList<>();
  for (  SearchQuery query : queries) {
    if (!query.getValue().equals(""String_Node_Str"")) {
      totalCount++;
      if (query.getSearchField() instanceof DropdownSearchField) {
        doc.select(""String_Node_Str"" + query.getKey()).val(query.getValue());
        continue;
      }
      if (query.getSearchField() instanceof TextSearchField && doc.select(""String_Node_Str"" + query.getKey()).size() > 0) {
        doc.select(""String_Node_Str"" + query.getKey()).val(query.getValue());
        continue;
      }
      dropdownTextCount++;
      if (s_exts.equals(""String_Node_Str"") || (query.getSearchField().getData() != null && !query.getSearchField().getData().optBoolean(""String_Node_Str"",true))) {
        doc.select(""String_Node_Str"" + query.getKey()).val(query.getValue());
      }
 else {
        if (doc.select(""String_Node_Str"").size() == 0) {
          doc.select(""String_Node_Str"" + dropdownTextCount + ""String_Node_Str"").first().previousElementSibling().val(query.getKey());
          doc.select(""String_Node_Str"" + dropdownTextCount + ""String_Node_Str"").val(query.getValue());
        }
 else {
          doc.select(""String_Node_Str"" + dropdownTextCount).val(query.getKey());
          doc.select(""String_Node_Str"" + dropdownTextCount).val(query.getValue());
        }
      }
      if (dropdownTextCount > 4) {
        throw new OpacErrorException(stringProvider.getQuantityString(StringProvider.LIMITED_NUM_OF_CRITERIA,4,4));
      }
    }
  }
  for (  Element input : doc.select(""String_Node_Str"")) {
    if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
      nvpairs.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
    }
  }
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  if (totalCount == 0) {
    throw new OpacErrorException(stringProvider.getString(StringProvider.NO_CRITERIA_INPUT));
  }
  Document docresults=htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs);
  return parse_search(docresults,1);
}","@Override public SearchRequestResult search(List<SearchQuery> queries) throws IOException, OpacErrorException {
  start();
  Document doc=htmlGet(opac_url + ""String_Node_Str"" + s_sid+ ""String_Node_Str""+ s_service+ ""String_Node_Str""+ s_exts);
  int dropdownTextCount=0;
  int totalCount=0;
  List<NameValuePair> nvpairs=new ArrayList<>();
  for (  SearchQuery query : queries) {
    if (!query.getValue().equals(""String_Node_Str"")) {
      totalCount++;
      if (query.getSearchField() instanceof DropdownSearchField) {
        doc.select(""String_Node_Str"" + query.getKey()).val(query.getValue());
        continue;
      }
      try {
        if (query.getSearchField() instanceof TextSearchField && doc.select(""String_Node_Str"" + query.getKey()).size() > 0) {
          doc.select(""String_Node_Str"" + query.getKey()).val(query.getValue());
          continue;
        }
      }
 catch (      Selector.SelectorParseException e) {
      }
      dropdownTextCount++;
      if (s_exts.equals(""String_Node_Str"") || (query.getSearchField().getData() != null && !query.getSearchField().getData().optBoolean(""String_Node_Str"",true))) {
        doc.select(""String_Node_Str"" + query.getKey()).val(query.getValue());
      }
 else {
        if (doc.select(""String_Node_Str"").size() == 0) {
          doc.select(""String_Node_Str"" + dropdownTextCount + ""String_Node_Str"").first().previousElementSibling().val(query.getKey());
          doc.select(""String_Node_Str"" + dropdownTextCount + ""String_Node_Str"").val(query.getValue());
        }
 else {
          doc.select(""String_Node_Str"" + dropdownTextCount).val(query.getKey());
          doc.select(""String_Node_Str"" + dropdownTextCount).val(query.getValue());
        }
      }
      if (dropdownTextCount > 4) {
        throw new OpacErrorException(stringProvider.getQuantityString(StringProvider.LIMITED_NUM_OF_CRITERIA,4,4));
      }
    }
  }
  for (  Element input : doc.select(""String_Node_Str"")) {
    if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
      nvpairs.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
    }
  }
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  if (totalCount == 0) {
    throw new OpacErrorException(stringProvider.getString(StringProvider.NO_CRITERIA_INPUT));
  }
  Document docresults=htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs);
  return parse_search(docresults,1);
}"
86224,"protected SearchRequestResult executeSearch(List<SearchQuery> query,int pageIndex) throws IOException, OpacErrorException, JSONException {
  final String searchUrl;
  if (!initialised) {
    start();
  }
  try {
    searchUrl=buildSearchUrl(query,pageIndex);
  }
 catch (  URISyntaxException e) {
    throw new RuntimeException(e);
  }
  final String html=httpGet(searchUrl,getDefaultEncoding());
  final Document doc=Jsoup.parse(html);
  final String navigation=doc.select(""String_Node_Str"").first().text();
  final int totalResults=parseTotalResults(navigation);
  final Element ul=doc.select(""String_Node_Str"").first();
  final List<SearchResult> results=new ArrayList<>();
  for (  final Element li : ul.children()) {
    final SearchResult result=new SearchResult();
    final Element title=li.select(""String_Node_Str"").first();
    result.setId(getQueryParamsFirst(title.attr(""String_Node_Str"")).get(""String_Node_Str""));
    result.setInnerhtml(title.text() + ""String_Node_Str"" + title.parent().nextElementSibling().text());
    result.setNr(results.size());
    result.setPage(pageIndex);
    result.setType(MEDIA_TYPES.get(li.select(""String_Node_Str"").first().text()));
    result.setCover(getCover(li));
    final String statusImg=li.select(""String_Node_Str"").attr(""String_Node_Str"");
    result.setStatus(statusImg.contains(""String_Node_Str"") ? SearchResult.Status.GREEN : statusImg.contains(""String_Node_Str"") ? SearchResult.Status.RED : null);
    results.add(result);
  }
  return new SearchRequestResult(results,totalResults,pageIndex);
}","protected SearchRequestResult executeSearch(List<SearchQuery> query,int pageIndex) throws IOException, OpacErrorException, JSONException {
  final String searchUrl;
  if (!initialised) {
    start();
  }
  try {
    searchUrl=buildSearchUrl(query,pageIndex);
  }
 catch (  URISyntaxException e) {
    throw new RuntimeException(e);
  }
  final String html=httpGet(searchUrl,getDefaultEncoding());
  final Document doc=Jsoup.parse(html);
  final Element navigation=doc.select(""String_Node_Str"").first();
  final int totalResults=navigation != null ? parseTotalResults(navigation.text()) : 0;
  final Element ul=doc.select(""String_Node_Str"").first();
  final List<SearchResult> results=new ArrayList<>();
  for (  final Element li : ul.children()) {
    final SearchResult result=new SearchResult();
    final Element title=li.select(""String_Node_Str"").first();
    result.setId(getQueryParamsFirst(title.attr(""String_Node_Str"")).get(""String_Node_Str""));
    result.setInnerhtml(title.text() + ""String_Node_Str"" + title.parent().nextElementSibling().text());
    result.setNr(results.size());
    result.setPage(pageIndex);
    result.setType(MEDIA_TYPES.get(li.select(""String_Node_Str"").text()));
    result.setCover(getCover(li));
    final String statusImg=li.select(""String_Node_Str"").attr(""String_Node_Str"");
    result.setStatus(statusImg.contains(""String_Node_Str"") ? SearchResult.Status.GREEN : statusImg.contains(""String_Node_Str"") ? SearchResult.Status.RED : null);
    results.add(result);
  }
  return new SearchRequestResult(results,totalResults,pageIndex);
}"
86225,"protected void addAdvancedSearchFields(List<SearchField> fields) throws IOException, JSONException {
  final String html=httpGet(getApiUrl() + ""String_Node_Str"",getDefaultEncoding());
  final Document doc=Jsoup.parse(html);
  final Elements options=doc.select(""String_Node_Str"").first().select(""String_Node_Str"");
  for (  final Element option : options) {
    final SearchField field;
    if (SEARCH_FIELDS_FOR_DROPDOWN.contains(option.val())) {
      field=new DropdownSearchField();
      addDropdownValuesForField(((DropdownSearchField)field),option.val());
    }
 else {
      field=new TextSearchField();
    }
    field.setDisplayName(option.text());
    field.setId(option.val());
    field.setData(new JSONObject());
    field.getData().put(""String_Node_Str"",field.getDisplayName());
    fields.add(field);
  }
}","protected void addAdvancedSearchFields(List<SearchField> fields) throws IOException, JSONException {
  final String html=httpGet(getApiUrl() + ""String_Node_Str"",getDefaultEncoding());
  final Document doc=Jsoup.parse(html);
  final Elements options=doc.select(""String_Node_Str"").first().select(""String_Node_Str"");
  for (  final Element option : options) {
    final SearchField field;
    if (SEARCH_FIELDS_FOR_DROPDOWN.contains(option.val())) {
      field=new DropdownSearchField();
      addDropdownValuesForField(((DropdownSearchField)field),option.val());
    }
 else {
      field=new TextSearchField();
      ((TextSearchField)field).setHint(""String_Node_Str"");
    }
    field.setDisplayName(option.text());
    field.setId(option.val());
    field.setData(new JSONObject());
    field.getData().put(""String_Node_Str"",field.getId());
    fields.add(field);
  }
}"
86226,"protected void addDropdownValuesForField(DropdownSearchField field,String id) throws IOException, JSONException {
  final String url=opac_url + ""String_Node_Str"" + id;
  final String json=httpGet(url,getDefaultEncoding());
  final JSONArray array=new JSONArray(json);
  for (int i=0; i < array.length(); i++) {
    final JSONObject obj=array.getJSONObject(i);
    field.addDropdownValue(obj.getString(""String_Node_Str""),obj.getString(""String_Node_Str""));
  }
}","protected void addDropdownValuesForField(DropdownSearchField field,String id) throws IOException, JSONException {
  field.addDropdownValue(""String_Node_Str"",""String_Node_Str"");
  final String url=opac_url + ""String_Node_Str"" + id;
  final String json=httpGet(url,getDefaultEncoding());
  final JSONArray array=new JSONArray(json);
  for (int i=0; i < array.length(); i++) {
    final JSONObject obj=array.getJSONObject(i);
    field.addDropdownValue(obj.getString(""String_Node_Str""),obj.getString(""String_Node_Str""));
  }
}"
86227,"protected void addSortingSearchFields(List<SearchField> fields) throws IOException, JSONException {
  final String html=httpGet(getApiUrl() + ""String_Node_Str"",getDefaultEncoding());
  final Document doc=Jsoup.parse(html);
  for (int i=0; i < 3; i++) {
    final Element tr=doc.select(""String_Node_Str"" + i).first();
    final DropdownSearchField field=new DropdownSearchField();
    field.setId(""String_Node_Str"" + i);
    field.setDisplayName(tr.select(""String_Node_Str"").first().text());
    field.setAdvanced(true);
    for (    final Element option : tr.select(""String_Node_Str"")) {
      field.addDropdownValue(option.attr(""String_Node_Str""),option.text());
    }
    fields.add(field);
  }
}","protected void addSortingSearchFields(List<SearchField> fields) throws IOException, JSONException {
  final String html=httpGet(getApiUrl() + ""String_Node_Str"",getDefaultEncoding());
  final Document doc=Jsoup.parse(html);
  for (int i=0; i < 3; i++) {
    final Element tr=doc.select(""String_Node_Str"" + i).first();
    final DropdownSearchField field=new DropdownSearchField();
    field.setMeaning(SearchField.Meaning.ORDER);
    field.setId(""String_Node_Str"" + i);
    field.setDisplayName(tr.select(""String_Node_Str"").first().text());
    field.addDropdownValue(""String_Node_Str"",""String_Node_Str"");
    for (    final Element option : tr.select(""String_Node_Str"")) {
      if (option.hasAttr(""String_Node_Str"")) {
        field.addDropdownValue(0,option.attr(""String_Node_Str""),option.text());
      }
 else {
        field.addDropdownValue(option.attr(""String_Node_Str""),option.text());
      }
    }
    fields.add(field);
  }
}"
86228,"static int parseTotalResults(final String navigation){
  final Matcher matcher=Pattern.compile(""String_Node_Str"").matcher(navigation);
  if (matcher.find()) {
    final String num1=matcher.group(""String_Node_Str"");
    return Integer.parseInt(num1 != null ? num1 : matcher.group(""String_Node_Str""));
  }
 else {
    return 0;
  }
}","static int parseTotalResults(final String navigation){
  final Matcher matcher=Pattern.compile(""String_Node_Str"").matcher(navigation);
  if (matcher.find()) {
    final String num1=matcher.group(2);
    return Integer.parseInt(num1 != null ? num1 : matcher.group(3));
  }
 else {
    return 0;
  }
}"
86229,"protected String buildSearchUrl(final List<SearchQuery> query,final int page) throws IOException, JSONException, URISyntaxException {
  final URIBuilder builder=new URIBuilder(getApiUrl());
  if (query.size() == 1 && ""String_Node_Str"".equals(query.get(0).getSearchField().getId())) {
    builder.setParameter(""String_Node_Str"",""String_Node_Str"");
    builder.setParameter(query.get(0).getKey(),query.get(0).getValue());
  }
 else {
    int i=0;
    for (    SearchQuery q : query) {
      builder.setParameter(""String_Node_Str"" + i,q.getKey());
      builder.setParameter(""String_Node_Str"" + i,q.getValue());
      if (i > 0) {
        builder.setParameter(""String_Node_Str"" + i,""String_Node_Str"");
      }
      i++;
    }
    builder.setParameter(""String_Node_Str"",""String_Node_Str"");
    builder.setParameter(""String_Node_Str"",String.valueOf(i));
  }
  builder.setParameter(""String_Node_Str"",String.valueOf(page));
  builder.setParameter(""String_Node_Str"",""String_Node_Str"");
  return builder.build().toString();
}","protected String buildSearchUrl(final List<SearchQuery> query,final int page) throws IOException, JSONException, URISyntaxException {
  final URIBuilder builder=new URIBuilder(getApiUrl());
  final List<SearchQuery> nonEmptyQuery=new ArrayList<>();
  for (  SearchQuery q : query) {
    if (!q.getValue().isEmpty()) {
      nonEmptyQuery.add(q);
    }
  }
  if (nonEmptyQuery.size() == 1 && ""String_Node_Str"".equals(nonEmptyQuery.get(0).getSearchField().getId())) {
    builder.setParameter(""String_Node_Str"",""String_Node_Str"");
    builder.setParameter(nonEmptyQuery.get(0).getKey(),nonEmptyQuery.get(0).getValue());
  }
 else {
    int i=0;
    for (    SearchQuery q : nonEmptyQuery) {
      String key=q.getKey();
      String value=q.getValue();
      if (""String_Node_Str"".equals(key)) {
        key=""String_Node_Str"";
        value=""String_Node_Str"" + value + ""String_Node_Str"";
      }
      builder.setParameter(""String_Node_Str"" + i,key);
      builder.setParameter(""String_Node_Str"" + i,value);
      if (i > 0) {
        builder.setParameter(""String_Node_Str"" + i,""String_Node_Str"");
      }
      i++;
    }
    builder.setParameter(""String_Node_Str"",""String_Node_Str"");
    builder.setParameter(""String_Node_Str"",String.valueOf(i));
  }
  builder.setParameter(""String_Node_Str"",String.valueOf(page));
  builder.setParameter(""String_Node_Str"",""String_Node_Str"");
  return builder.build().toString();
}"
86230,"@Override public void onCreate(SQLiteDatabase db){
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
}","@Override public void onCreate(SQLiteDatabase db){
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
}"
86231,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (oldVersion < 2) {
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  if (oldVersion < 3) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion == 3) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 7) {
    try {
      db.execSQL(""String_Node_Str"");
    }
 catch (    SQLiteException sqle) {
      sqle.printStackTrace();
    }
  }
  if (oldVersion < 8) {
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  }
  if (oldVersion < 9) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 11) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 12) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 13) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 15) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 16) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 17) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 18) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 20) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 21) {
    db.execSQL(""String_Node_Str"");
  }
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (oldVersion < 2) {
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  if (oldVersion < 3) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion == 3) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 7) {
    try {
      db.execSQL(""String_Node_Str"");
    }
 catch (    SQLiteException sqle) {
      sqle.printStackTrace();
    }
  }
  if (oldVersion < 8) {
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str"");
  }
  if (oldVersion < 9) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 11) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 12) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 13) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 15) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 16) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 17) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 18) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 20) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 21) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 22) {
    try {
      db.execSQL(""String_Node_Str"");
    }
 catch (    Exception e) {
    }
  }
}"
86232,"protected DetailledItem parse_result(String html) throws IOException {
  Document doc=Jsoup.parse(html);
  DetailledItem result=new DetailledItem();
  String id;
  if (doc.select(""String_Node_Str"").size() > 0) {
    id=doc.select(""String_Node_Str"").first().val().trim();
  }
 else {
    String href=doc.select(""String_Node_Str"").first().attr(""String_Node_Str"");
    id=getQueryParamsFirst(href).get(""String_Node_Str"").trim();
  }
  result.setId(id);
  newShareLinks=doc.select(""String_Node_Str"").size() > 0;
  Elements table=doc.select(""String_Node_Str"").get(1).select(""String_Node_Str"");
  String imgUrl=table.get(0).select(""String_Node_Str"" + ""String_Node_Str"").attr(""String_Node_Str"");
  result.setCover(imgUrl);
  Map<String,String> e=new HashMap<>();
  for (  Element element : table) {
    String detail=element.select(""String_Node_Str"").text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    String title=element.select(""String_Node_Str"").text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    if (!title.equals(""String_Node_Str"")) {
      if (title.contains(""String_Node_Str"")) {
        if (detail.equals(""String_Node_Str"")) {
          e.put(DetailledItem.KEY_COPY_STATUS,""String_Node_Str"");
        }
 else {
          e.put(DetailledItem.KEY_COPY_STATUS,""String_Node_Str"" + detail);
        }
      }
 else       if (title.contains(""String_Node_Str"")) {
        e.put(DetailledItem.KEY_COPY_DEPARTMENT,detail);
      }
 else       if (title.contains(""String_Node_Str"")) {
        e.put(DetailledItem.KEY_COPY_SHELFMARK,detail);
      }
 else       if (title.contains(""String_Node_Str"")) {
        result.setTitle(detail);
      }
 else       if (!title.contains(""String_Node_Str"")) {
        result.addDetail(new Detail(title,detail));
      }
    }
  }
  if (""String_Node_Str"".equals(e.get(DetailledItem.KEY_COPY_STATUS)) || doc.select(""String_Node_Str"").size() == 0) {
    result.setReservable(false);
  }
 else {
    result.setReservable(true);
    if (doc.select(""String_Node_Str"").size() > 0) {
      result.setReservation_info(doc.select(""String_Node_Str"").first().attr(""String_Node_Str"").substring(1).replace(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      Element form=doc.select(""String_Node_Str"").first().parent();
      result.setReservation_info(generateQuery(form));
    }
  }
  if (e.size() > 0)   result.addCopy(e);
  return result;
}","protected DetailledItem parse_result(String html) throws IOException {
  Document doc=Jsoup.parse(html);
  DetailledItem result=new DetailledItem();
  String id=null;
  if (doc.select(""String_Node_Str"").size() > 0) {
    id=doc.select(""String_Node_Str"").first().val().trim();
  }
 else   if (doc.select(""String_Node_Str"").size() > 0) {
    String href=doc.select(""String_Node_Str"").first().attr(""String_Node_Str"");
    id=getQueryParamsFirst(href).get(""String_Node_Str"").trim();
  }
  result.setId(id);
  newShareLinks=doc.select(""String_Node_Str"").size() > 0;
  Elements table=doc.select(""String_Node_Str"").get(1).select(""String_Node_Str"");
  String imgUrl=table.get(0).select(""String_Node_Str"" + ""String_Node_Str"").attr(""String_Node_Str"");
  result.setCover(imgUrl);
  Map<String,String> e=new HashMap<>();
  for (  Element element : table) {
    String detail=element.select(""String_Node_Str"").text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    String title=element.select(""String_Node_Str"").text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    if (!title.equals(""String_Node_Str"")) {
      if (title.contains(""String_Node_Str"")) {
        if (detail.equals(""String_Node_Str"")) {
          e.put(DetailledItem.KEY_COPY_STATUS,""String_Node_Str"");
        }
 else {
          e.put(DetailledItem.KEY_COPY_STATUS,""String_Node_Str"" + detail);
        }
      }
 else       if (title.contains(""String_Node_Str"")) {
        e.put(DetailledItem.KEY_COPY_DEPARTMENT,detail);
      }
 else       if (title.contains(""String_Node_Str"")) {
        e.put(DetailledItem.KEY_COPY_SHELFMARK,detail);
      }
 else       if (title.contains(""String_Node_Str"")) {
        result.setTitle(detail);
      }
 else       if (!title.contains(""String_Node_Str"")) {
        result.addDetail(new Detail(title,detail));
      }
    }
  }
  if (""String_Node_Str"".equals(e.get(DetailledItem.KEY_COPY_STATUS)) || doc.select(""String_Node_Str"").size() == 0) {
    result.setReservable(false);
  }
 else {
    result.setReservable(true);
    if (doc.select(""String_Node_Str"").size() > 0) {
      result.setReservation_info(doc.select(""String_Node_Str"").first().attr(""String_Node_Str"").substring(1).replace(""String_Node_Str"",""String_Node_Str""));
    }
 else {
      Element form=doc.select(""String_Node_Str"").first().parent();
      result.setReservation_info(generateQuery(form));
    }
  }
  if (e.size() > 0)   result.addCopy(e);
  return result;
}"
86233,"@Override public void onAnimationEnd(Animator animation){
  super.onAnimationEnd(animation);
  if (interceptor != null)   interceptor.onCollapseAnimationEnd();
  mainCard.setVisibility(View.VISIBLE);
  upperCard.setVisibility(View.GONE);
  lowerCard.setVisibility(View.GONE);
  expandedCard.clearAnimation();
  expandedCard.setVisibility(View.GONE);
  llUpper.removeAllViews();
  llLower.removeAllViews();
  expandedCard.removeAllViews();
  expandedPosition=-1;
  unexpandedHeight=0;
  expandedTranslationY=0;
  lowerTranslationY=0;
  heightDifference=0;
  if (listener != null)   listener.onComplete();
}","@Override public void onAnimationEnd(Animator animation){
  super.onAnimationEnd(animation);
  resetViews();
  if (listener != null)   listener.onComplete();
}"
86234,"public void expand(final int position){
  if (isExpanded()) {
    if (expandedPosition != position) {
      collapse(new CompleteListener(){
        @Override public void onComplete(){
          expand(position);
        }
      }
);
    }
    return;
  }
  for (int i=0; i < position; i++) {
    llUpper.addView(getView(i,llUpper));
    if (i < position - 1)     addSeparator(llUpper);
  }
  final View expandedView=getView(position,expandedCard);
  expandView(position,expandedView);
  expandedCard.addView(expandedView);
  for (int i=position + 1; i < getCount(); i++) {
    llLower.addView(getView(i,llLower));
    if (i < getCount() - 1)     addSeparator(llLower);
  }
  final float lowerPos;
  if (position + 1 < getCount()) {
    lowerPos=ViewHelper.getY(views.get(position + 1)) + context.getResources().getDimensionPixelSize(R.dimen.card_topbottom_margin_default);
  }
 else   lowerPos=-1;
  final float mainPos=ViewHelper.getY(views.get(position)) - mainCard.getPaddingTop();
  unexpandedHeight=views.get(position).getHeight();
  if (interceptor != null)   interceptor.beforeExpand(views.get(position));
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      if (position != 0)       upperCard.setVisibility(View.VISIBLE);
      if (lowerPos > 0)       lowerCard.setVisibility(View.VISIBLE);
      expandedCard.setVisibility(View.VISIBLE);
      mainCard.setVisibility(View.GONE);
      final int previousHeight=layout.getHeight();
      layout.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
        @Override public boolean onPreDraw(){
          int newHeight=layout.getHeight();
          heightDifference=newHeight - previousHeight;
          layout.getViewTreeObserver().removeOnPreDrawListener(this);
          if (lowerPos > 0)           ViewHelper.setY(lowerCard,lowerPos);
          ViewHelper.setY(expandedCard,mainPos);
          lowerTranslationY=ViewHelper.getTranslationY(lowerCard);
          expandedTranslationY=ViewHelper.getTranslationY(expandedCard);
          AnimatorSet set=new AnimatorSet();
          int defaultMargin=context.getResources().getDimensionPixelSize(R.dimen.card_side_margin_default);
          int expandedMargin=context.getResources().getDimensionPixelSize(R.dimen.card_side_margin_selected);
          int marginDifference=expandedMargin - defaultMargin;
          List<Animator> animators=new ArrayList<>();
          addAll(animators,ObjectAnimator.ofFloat(lowerCard,""String_Node_Str"",ViewHelper.getTranslationY(lowerCard),0),ObjectAnimator.ofFloat(expandedCard,""String_Node_Str"",ViewHelper.getTranslationY(expandedCard),0),ObjectAnimator.ofFloat(expandedCard,""String_Node_Str"",context.getResources().getDimension(R.dimen.card_elevation_default),context.getResources().getDimension(R.dimen.card_elevation_selected)),ObjectAnimator.ofInt(expandedCard,""String_Node_Str"",expandedCard.getBottom() + unexpandedHeight - expandedView.getHeight(),expandedCard.getBottom()),ObjectAnimator.ofInt(expandedCard,""String_Node_Str"",expandedCard.getLeft() - marginDifference,expandedCard.getLeft()),ObjectAnimator.ofInt(expandedCard,""String_Node_Str"",expandedCard.getRight() + marginDifference,expandedCard.getRight()));
          if (interceptor != null) {
            animators.addAll(interceptor.getExpandAnimations(heightDifference,expandedView));
          }
          set.playTogether(animators);
          set.setDuration(ANIMATION_DURATION).start();
          return false;
        }
      }
);
      expandedPosition=position;
    }
  }
,100);
}","public void expand(final int position){
  if (isExpanded()) {
    if (expandedPosition != position) {
      collapse(new CompleteListener(){
        @Override public void onComplete(){
          expand(position);
        }
      }
);
    }
    return;
  }
  resetViews();
  for (int i=0; i < position; i++) {
    llUpper.addView(getView(i,llUpper));
    if (i < position - 1)     addSeparator(llUpper);
  }
  final View expandedView=getView(position,expandedCard);
  expandView(position,expandedView);
  expandedCard.addView(expandedView);
  for (int i=position + 1; i < getCount(); i++) {
    llLower.addView(getView(i,llLower));
    if (i < getCount() - 1)     addSeparator(llLower);
  }
  final float lowerPos;
  if (position + 1 < getCount()) {
    lowerPos=ViewHelper.getY(views.get(position + 1)) + context.getResources().getDimensionPixelSize(R.dimen.card_topbottom_margin_default);
  }
 else   lowerPos=-1;
  final float mainPos=ViewHelper.getY(views.get(position)) - mainCard.getPaddingTop();
  unexpandedHeight=views.get(position).getHeight();
  if (interceptor != null)   interceptor.beforeExpand(views.get(position));
  new Handler().postDelayed(new Runnable(){
    @Override public void run(){
      if (position != 0)       upperCard.setVisibility(View.VISIBLE);
      if (lowerPos > 0)       lowerCard.setVisibility(View.VISIBLE);
      expandedCard.setVisibility(View.VISIBLE);
      mainCard.setVisibility(View.GONE);
      final int previousHeight=layout.getHeight();
      layout.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
        @Override public boolean onPreDraw(){
          int newHeight=layout.getHeight();
          heightDifference=newHeight - previousHeight;
          layout.getViewTreeObserver().removeOnPreDrawListener(this);
          if (lowerPos > 0)           ViewHelper.setY(lowerCard,lowerPos);
          ViewHelper.setY(expandedCard,mainPos);
          lowerTranslationY=ViewHelper.getTranslationY(lowerCard);
          expandedTranslationY=ViewHelper.getTranslationY(expandedCard);
          AnimatorSet set=new AnimatorSet();
          int defaultMargin=context.getResources().getDimensionPixelSize(R.dimen.card_side_margin_default);
          int expandedMargin=context.getResources().getDimensionPixelSize(R.dimen.card_side_margin_selected);
          int marginDifference=expandedMargin - defaultMargin;
          List<Animator> animators=new ArrayList<>();
          addAll(animators,ObjectAnimator.ofFloat(lowerCard,""String_Node_Str"",ViewHelper.getTranslationY(lowerCard),0),ObjectAnimator.ofFloat(expandedCard,""String_Node_Str"",ViewHelper.getTranslationY(expandedCard),0),ObjectAnimator.ofFloat(expandedCard,""String_Node_Str"",context.getResources().getDimension(R.dimen.card_elevation_default),context.getResources().getDimension(R.dimen.card_elevation_selected)),ObjectAnimator.ofInt(expandedCard,""String_Node_Str"",expandedCard.getBottom() + unexpandedHeight - expandedView.getHeight(),expandedCard.getBottom()),ObjectAnimator.ofInt(expandedCard,""String_Node_Str"",expandedCard.getLeft() - marginDifference,expandedCard.getLeft()),ObjectAnimator.ofInt(expandedCard,""String_Node_Str"",expandedCard.getRight() + marginDifference,expandedCard.getRight()));
          if (interceptor != null) {
            animators.addAll(interceptor.getExpandAnimations(heightDifference,expandedView));
          }
          set.playTogether(animators);
          set.setDuration(ANIMATION_DURATION).start();
          return false;
        }
      }
);
      expandedPosition=position;
    }
  }
,100);
}"
86235,"private void collapse(final CompleteListener listener){
  AnimatorSet set=new AnimatorSet();
  View expandedView=expandedCard.getChildAt(0);
  int defaultMargin=context.getResources().getDimensionPixelSize(R.dimen.card_side_margin_default);
  int expandedMargin=context.getResources().getDimensionPixelSize(R.dimen.card_side_margin_selected);
  int marginDifference=expandedMargin - defaultMargin;
  List<Animator> animators=new ArrayList<>();
  addAll(animators,ObjectAnimator.ofFloat(lowerCard,""String_Node_Str"",0,lowerTranslationY),ObjectAnimator.ofFloat(expandedCard,""String_Node_Str"",0,expandedTranslationY),ObjectAnimator.ofFloat(expandedCard,""String_Node_Str"",context.getResources().getDimension(R.dimen.card_elevation_selected),context.getResources().getDimension(R.dimen.card_elevation_default)),ObjectAnimator.ofInt(expandedCard,""String_Node_Str"",expandedCard.getBottom(),expandedCard.getBottom() + unexpandedHeight - expandedView.getHeight()),ObjectAnimator.ofInt(expandedCard,""String_Node_Str"",expandedCard.getLeft(),expandedCard.getLeft() - marginDifference),ObjectAnimator.ofInt(expandedCard,""String_Node_Str"",expandedCard.getRight(),expandedCard.getRight() + marginDifference));
  if (interceptor != null)   animators.addAll(interceptor.getCollapseAnimations(-heightDifference,expandedView));
  set.playTogether(animators);
  set.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      super.onAnimationEnd(animation);
      if (interceptor != null)       interceptor.onCollapseAnimationEnd();
      mainCard.setVisibility(View.VISIBLE);
      upperCard.setVisibility(View.GONE);
      lowerCard.setVisibility(View.GONE);
      expandedCard.clearAnimation();
      expandedCard.setVisibility(View.GONE);
      llUpper.removeAllViews();
      llLower.removeAllViews();
      expandedCard.removeAllViews();
      expandedPosition=-1;
      unexpandedHeight=0;
      expandedTranslationY=0;
      lowerTranslationY=0;
      heightDifference=0;
      if (listener != null)       listener.onComplete();
    }
  }
);
  set.setDuration(ANIMATION_DURATION).start();
}","private void collapse(final CompleteListener listener){
  AnimatorSet set=new AnimatorSet();
  View expandedView=expandedCard.getChildAt(0);
  if (expandedView == null) {
    return;
  }
  int defaultMargin=context.getResources().getDimensionPixelSize(R.dimen.card_side_margin_default);
  int expandedMargin=context.getResources().getDimensionPixelSize(R.dimen.card_side_margin_selected);
  int marginDifference=expandedMargin - defaultMargin;
  List<Animator> animators=new ArrayList<>();
  addAll(animators,ObjectAnimator.ofFloat(lowerCard,""String_Node_Str"",0,lowerTranslationY),ObjectAnimator.ofFloat(expandedCard,""String_Node_Str"",0,expandedTranslationY),ObjectAnimator.ofFloat(expandedCard,""String_Node_Str"",context.getResources().getDimension(R.dimen.card_elevation_selected),context.getResources().getDimension(R.dimen.card_elevation_default)),ObjectAnimator.ofInt(expandedCard,""String_Node_Str"",expandedCard.getBottom(),expandedCard.getBottom() + unexpandedHeight - expandedView.getHeight()),ObjectAnimator.ofInt(expandedCard,""String_Node_Str"",expandedCard.getLeft(),expandedCard.getLeft() - marginDifference),ObjectAnimator.ofInt(expandedCard,""String_Node_Str"",expandedCard.getRight(),expandedCard.getRight() + marginDifference));
  if (interceptor != null)   animators.addAll(interceptor.getCollapseAnimations(-heightDifference,expandedView));
  set.playTogether(animators);
  set.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      super.onAnimationEnd(animation);
      resetViews();
      if (listener != null)       listener.onComplete();
    }
  }
);
  set.setDuration(ANIMATION_DURATION).start();
}"
86236,"private void showCoverView(boolean b){
  coverWrapper.setVisibility(b ? View.VISIBLE : View.GONE);
  gradientBottom.setVisibility(b ? View.VISIBLE : View.GONE);
  gradientTop.setVisibility(b ? View.VISIBLE : View.GONE);
  RelativeLayout.LayoutParams params=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
  if (b) {
    toolbar.setBackgroundResource(R.color.transparent);
    ViewCompat.setElevation(toolbar,0);
    llDetails.setPadding(llDetails.getPaddingLeft(),0,llDetails.getPaddingRight(),llDetails.getPaddingBottom());
    params.addRule(RelativeLayout.BELOW,R.id.coverWrapper);
  }
 else {
    toolbar.setBackgroundResource(getToolbarBackgroundColor());
    ViewCompat.setElevation(toolbar,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,4f,getResources().getDisplayMetrics()));
    params.addRule(RelativeLayout.BELOW,R.id.toolbar);
  }
  detailsLayout.setLayoutParams(params);
}","private void showCoverView(boolean b){
  if (getActivity() == null) {
    return;
  }
  coverWrapper.setVisibility(b ? View.VISIBLE : View.GONE);
  gradientBottom.setVisibility(b ? View.VISIBLE : View.GONE);
  gradientTop.setVisibility(b ? View.VISIBLE : View.GONE);
  RelativeLayout.LayoutParams params=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
  if (b) {
    toolbar.setBackgroundResource(R.color.transparent);
    ViewCompat.setElevation(toolbar,0);
    llDetails.setPadding(llDetails.getPaddingLeft(),0,llDetails.getPaddingRight(),llDetails.getPaddingBottom());
    params.addRule(RelativeLayout.BELOW,R.id.coverWrapper);
  }
 else {
    toolbar.setBackgroundResource(getToolbarBackgroundColor());
    ViewCompat.setElevation(toolbar,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,4f,getResources().getDisplayMetrics()));
    params.addRule(RelativeLayout.BELOW,R.id.toolbar);
  }
  detailsLayout.setLayoutParams(params);
}"
86237,"@Override public AccountData account(Account acc) throws IOException, JSONException, OpacErrorException {
  Document login=login(acc);
  if (login == null) {
    return null;
  }
  AccountData res=new AccountData(acc.getId());
  String lent_link=null;
  String res_link=null;
  int lent_cnt=-1;
  int res_cnt=-1;
  for (  Element td : login.select(""String_Node_Str"" + ""String_Node_Str"")) {
    String section=td.text().trim();
    if (section.contains(""String_Node_Str"")) {
      lent_link=td.select(""String_Node_Str"").attr(""String_Node_Str"");
      lent_cnt=Integer.parseInt(td.nextElementSibling().text().trim());
    }
 else     if (section.contains(""String_Node_Str"")) {
      res_link=td.select(""String_Node_Str"").attr(""String_Node_Str"");
      res_cnt=Integer.parseInt(td.nextElementSibling().text().trim());
    }
 else     if (section.contains(""String_Node_Str"")) {
      res.setPendingFees(td.nextElementSibling().text().trim());
    }
 else     if (section.matches(""String_Node_Str"")) {
      res.setValidUntil(td.nextElementSibling().text().trim());
    }
  }
  assert(lent_cnt >= 0);
  assert(res_cnt >= 0);
  if (lent_link == null) {
    return null;
  }
  String lent_html=httpGet(opac_url + ""String_Node_Str"" + lent_link.replace(""String_Node_Str"",""String_Node_Str""),getDefaultEncoding());
  Document lent_doc=Jsoup.parse(lent_html);
  List<Map<String,String>> lent=new ArrayList<>();
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.GERMAN);
  Pattern id_pat=Pattern.compile(""String_Node_Str"");
  for (  Element table : lent_doc.select(""String_Node_Str"" + ""String_Node_Str"")) {
    Map<String,String> item=new HashMap<>();
    for (    Element tr : table.select(""String_Node_Str"")) {
      String desc=tr.select(""String_Node_Str"").text().trim();
      String value=tr.select(""String_Node_Str"").text().trim();
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_LENT_TITLE,value);
      }
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_LENT_AUTHOR,value);
      }
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_LENT_BARCODE,value);
      }
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_LENT_BRANCH,value);
      }
      if (desc.matches(""String_Node_Str"")) {
        value=value.split(""String_Node_Str"")[0];
        item.put(AccountData.KEY_LENT_DEADLINE,value);
        try {
          item.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,String.valueOf(sdf.parse(value).getTime()));
        }
 catch (        ParseException e) {
          e.printStackTrace();
        }
      }
    }
    if (table.select(""String_Node_Str"").size() == 1) {
      Matcher matcher1=id_pat.matcher(table.select(""String_Node_Str"").attr(""String_Node_Str""));
      if (matcher1.matches()) {
        item.put(AccountData.KEY_LENT_LINK,matcher1.group(1));
      }
    }
    lent.add(item);
  }
  res.setLent(lent);
  assert(lent_cnt <= lent.size());
  List<Map<String,String>> reservations=new ArrayList<>();
  String res_html=httpGet(opac_url + ""String_Node_Str"" + res_link,getDefaultEncoding());
  Document res_doc=Jsoup.parse(res_html);
  for (  Element table : res_doc.select(""String_Node_Str"" + ""String_Node_Str"")) {
    Map<String,String> item=new HashMap<>();
    for (    Element tr : table.select(""String_Node_Str"")) {
      String desc=tr.select(""String_Node_Str"").text().trim();
      String value=tr.select(""String_Node_Str"").text().trim();
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_RESERVATION_TITLE,value);
      }
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_RESERVATION_FORMAT,value);
      }
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_RESERVATION_BRANCH,value);
      }
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_RESERVATION_READY,value);
      }
    }
    if (""String_Node_Str"".equals(item.get(AccountData.KEY_RESERVATION_READY))) {
      continue;
    }
    reservations.add(item);
  }
  res.setReservations(reservations);
  assert(reservations.size() >= res_cnt);
  return res;
}","@Override public AccountData account(Account acc) throws IOException, JSONException, OpacErrorException {
  Document login=login(acc);
  if (login == null) {
    return null;
  }
  AccountData res=new AccountData(acc.getId());
  String lent_link=null;
  String res_link=null;
  int lent_cnt=-1;
  int res_cnt=-1;
  for (  Element td : login.select(""String_Node_Str"" + ""String_Node_Str"")) {
    String section=td.text().trim();
    if (section.contains(""String_Node_Str"")) {
      lent_link=td.select(""String_Node_Str"").attr(""String_Node_Str"");
      lent_cnt=Integer.parseInt(td.nextElementSibling().text().trim());
    }
 else     if (section.contains(""String_Node_Str"")) {
      res_link=td.select(""String_Node_Str"").attr(""String_Node_Str"");
      res_cnt=Integer.parseInt(td.nextElementSibling().text().trim());
    }
 else     if (section.contains(""String_Node_Str"")) {
      res.setPendingFees(td.nextElementSibling().text().trim());
    }
 else     if (section.matches(""String_Node_Str"")) {
      res.setValidUntil(td.nextElementSibling().text().trim());
    }
  }
  for (  Element a : login.select(""String_Node_Str"")) {
    if (a.text().contains(""String_Node_Str"")) {
      lent_link=a.attr(""String_Node_Str"");
    }
 else     if (a.text().contains(""String_Node_Str"")) {
      res_link=a.attr(""String_Node_Str"");
    }
  }
  if (lent_link == null) {
    return null;
  }
  String lent_html=httpGet(opac_url + ""String_Node_Str"" + lent_link.replace(""String_Node_Str"",""String_Node_Str""),getDefaultEncoding());
  Document lent_doc=Jsoup.parse(lent_html);
  List<Map<String,String>> lent=new ArrayList<>();
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.GERMAN);
  Pattern id_pat=Pattern.compile(""String_Node_Str"");
  for (  Element table : lent_doc.select(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"")) {
    Map<String,String> item=new HashMap<>();
    for (    Element tr : table.select(""String_Node_Str"")) {
      String desc=tr.select(""String_Node_Str"").text().trim();
      String value=tr.select(""String_Node_Str"").text().trim();
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_LENT_TITLE,value);
      }
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_LENT_AUTHOR,value);
      }
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_LENT_BARCODE,value);
      }
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_LENT_BRANCH,value);
      }
      if (desc.matches(""String_Node_Str"")) {
        value=value.split(""String_Node_Str"")[0];
        item.put(AccountData.KEY_LENT_DEADLINE,value);
        try {
          item.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,String.valueOf(sdf.parse(value).getTime()));
        }
 catch (        ParseException e) {
          e.printStackTrace();
        }
      }
    }
    if (table.select(""String_Node_Str"").size() == 1) {
      Matcher matcher1=id_pat.matcher(table.select(""String_Node_Str"").attr(""String_Node_Str""));
      if (matcher1.matches()) {
        item.put(AccountData.KEY_LENT_LINK,matcher1.group(1));
      }
    }
    lent.add(item);
  }
  res.setLent(lent);
  List<Map<String,String>> reservations=new ArrayList<>();
  String res_html=httpGet(opac_url + ""String_Node_Str"" + res_link,getDefaultEncoding());
  Document res_doc=Jsoup.parse(res_html);
  for (  Element table : res_doc.select(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"")) {
    Map<String,String> item=new HashMap<>();
    for (    Element tr : table.select(""String_Node_Str"")) {
      String desc=tr.select(""String_Node_Str"").text().trim();
      String value=tr.select(""String_Node_Str"").text().trim();
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_RESERVATION_TITLE,value);
      }
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_RESERVATION_FORMAT,value);
      }
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_RESERVATION_BRANCH,value);
      }
      if (desc.equals(""String_Node_Str"")) {
        item.put(AccountData.KEY_RESERVATION_READY,value);
      }
    }
    if (""String_Node_Str"".equals(item.get(AccountData.KEY_RESERVATION_READY))) {
      continue;
    }
    reservations.add(item);
  }
  res.setReservations(reservations);
  return res;
}"
86238,"@Override public DetailledItem getResultById(String id,final String homebranch) throws IOException {
  if (sessid == null) {
    start();
  }
  if (homebranch != null && !""String_Node_Str"".equals(homebranch)) {
    cookieStore.addCookie(new BasicClientCookie(""String_Node_Str"",homebranch));
  }
  String html=httpGet(opac_url + ""String_Node_Str"" + id+ ""String_Node_Str""+ sessid,ENCODING,false,cookieStore);
  Document doc=Jsoup.parse(html);
  DetailledItem item=new DetailledItem();
  item.setId(id);
  Elements table=doc.select(""String_Node_Str"");
  for (  Element tr : table) {
    if (tr.select(""String_Node_Str"").size() == 0 || tr.select(""String_Node_Str"").size() == 0) {
      continue;
    }
    String d=tr.select(""String_Node_Str"").first().text();
    String c=tr.select(""String_Node_Str"").first().text();
    if (d.equals(""String_Node_Str"")) {
      item.setTitle(c);
    }
 else     if (d.contains(""String_Node_Str"") || d.contains(""String_Node_Str"")) {
      item.addDetail(new Detail(d,tr.select(""String_Node_Str"").first().select(""String_Node_Str"").first().attr(""String_Node_Str"")));
    }
 else {
      item.addDetail(new Detail(d,c));
    }
  }
  if (doc.select(""String_Node_Str"").size() > 0) {
    table=doc.select(""String_Node_Str"");
    for (    Element tr : table) {
      if (tr.hasClass(""String_Node_Str"") || tr.select(""String_Node_Str"").size() == 0 || tr.select(""String_Node_Str"").size() == 0 || tr.select(""String_Node_Str"").size() == 0) {
        continue;
      }
      Map<String,String> e=new HashMap<>();
      e.put(DetailledItem.KEY_COPY_SHELFMARK,tr.select(""String_Node_Str"").first().text());
      e.put(DetailledItem.KEY_COPY_BRANCH,tr.select(""String_Node_Str"").first().text());
      String status=tr.select(""String_Node_Str"").first().text();
      if (status.contains(""String_Node_Str"")) {
        e.put(DetailledItem.KEY_COPY_RETURN,status.replaceAll(""String_Node_Str"",""String_Node_Str""));
        e.put(DetailledItem.KEY_COPY_RESERVATIONS,status.replaceAll(""String_Node_Str"",""String_Node_Str""));
        e.put(DetailledItem.KEY_COPY_STATUS,""String_Node_Str"");
      }
 else {
        e.put(DetailledItem.KEY_COPY_STATUS,status);
      }
      item.addCopy(e);
    }
  }
  for (  Element a : doc.select(""String_Node_Str"")) {
    if (a.attr(""String_Node_Str"").contains(""String_Node_Str"")) {
      item.setReservable(true);
      item.setReservation_info(id);
      break;
    }
  }
  for (  Element a : doc.select(""String_Node_Str"")) {
    if (a.text().trim().matches(""String_Node_Str"")) {
      Map<String,String> volumesearch=new HashMap<>();
      volumesearch.put(""String_Node_Str"",getQueryParamsFirst(a.attr(""String_Node_Str"")).get(""String_Node_Str""));
      item.setVolumesearch(volumesearch);
    }
  }
  return item;
}","@Override public DetailledItem getResultById(String id,final String homebranch) throws IOException {
  if (sessid == null) {
    start();
  }
  if (homebranch != null && !""String_Node_Str"".equals(homebranch)) {
    cookieStore.addCookie(new BasicClientCookie(""String_Node_Str"",homebranch));
  }
  String html=httpGet(opac_url + ""String_Node_Str"" + id+ ""String_Node_Str""+ sessid,ENCODING,false,cookieStore);
  Document doc=Jsoup.parse(html);
  DetailledItem item=new DetailledItem();
  item.setId(id);
  Elements table=doc.select(""String_Node_Str"");
  for (  Element tr : table) {
    if (tr.select(""String_Node_Str"").size() == 0 || tr.select(""String_Node_Str"").size() == 0) {
      continue;
    }
    String d=tr.select(""String_Node_Str"").first().text();
    String c=tr.select(""String_Node_Str"").first().text();
    if (d.equals(""String_Node_Str"")) {
      item.setTitle(c);
    }
 else     if ((d.contains(""String_Node_Str"") || d.contains(""String_Node_Str"")) && tr.select(""String_Node_Str"").size() > 0) {
      item.addDetail(new Detail(d,tr.select(""String_Node_Str"").first().attr(""String_Node_Str"")));
    }
 else {
      item.addDetail(new Detail(d,c));
    }
  }
  if (doc.select(""String_Node_Str"").size() > 0) {
    table=doc.select(""String_Node_Str"");
    for (    Element tr : table) {
      if (tr.hasClass(""String_Node_Str"") || tr.select(""String_Node_Str"").size() == 0 || tr.select(""String_Node_Str"").size() == 0 || tr.select(""String_Node_Str"").size() == 0) {
        continue;
      }
      Map<String,String> e=new HashMap<>();
      e.put(DetailledItem.KEY_COPY_SHELFMARK,tr.select(""String_Node_Str"").first().text());
      e.put(DetailledItem.KEY_COPY_BRANCH,tr.select(""String_Node_Str"").first().text());
      String status=tr.select(""String_Node_Str"").first().text();
      if (status.contains(""String_Node_Str"")) {
        e.put(DetailledItem.KEY_COPY_RETURN,status.replaceAll(""String_Node_Str"",""String_Node_Str""));
        e.put(DetailledItem.KEY_COPY_RESERVATIONS,status.replaceAll(""String_Node_Str"",""String_Node_Str""));
        e.put(DetailledItem.KEY_COPY_STATUS,""String_Node_Str"");
      }
 else {
        e.put(DetailledItem.KEY_COPY_STATUS,status);
      }
      item.addCopy(e);
    }
  }
  for (  Element a : doc.select(""String_Node_Str"")) {
    if (a.attr(""String_Node_Str"").contains(""String_Node_Str"")) {
      item.setReservable(true);
      item.setReservation_info(id);
      break;
    }
  }
  for (  Element a : doc.select(""String_Node_Str"")) {
    if (a.text().trim().matches(""String_Node_Str"")) {
      Map<String,String> volumesearch=new HashMap<>();
      volumesearch.put(""String_Node_Str"",getQueryParamsFirst(a.attr(""String_Node_Str"")).get(""String_Node_Str""));
      item.setVolumesearch(volumesearch);
    }
  }
  return item;
}"
86239,"private void showCoverView(boolean b){
  ivCover.setVisibility(b ? View.VISIBLE : View.GONE);
  tvTitel.setVisibility(b ? View.VISIBLE : View.GONE);
  gradientBottom.setVisibility(b ? View.VISIBLE : View.GONE);
  gradientTop.setVisibility(b ? View.VISIBLE : View.GONE);
  RelativeLayout.LayoutParams params=((RelativeLayout.LayoutParams)detailsLayout.getLayoutParams());
  params.removeRule(RelativeLayout.BELOW);
  if (b) {
    toolbar.setBackgroundResource(R.color.transparent);
    ViewCompat.setElevation(toolbar,0);
    llDetails.setPadding(llDetails.getPaddingLeft(),0,llDetails.getPaddingRight(),llDetails.getPaddingBottom());
    params.addRule(RelativeLayout.BELOW,R.id.ivCover);
  }
 else {
    toolbar.setBackgroundResource(getToolbarBackgroundColor());
    ViewCompat.setElevation(toolbar,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,4f,getResources().getDisplayMetrics()));
    params.addRule(RelativeLayout.BELOW,R.id.toolbar);
  }
}","private void showCoverView(boolean b){
  ivCover.setVisibility(b ? View.VISIBLE : View.GONE);
  tvTitel.setVisibility(b ? View.VISIBLE : View.GONE);
  gradientBottom.setVisibility(b ? View.VISIBLE : View.GONE);
  gradientTop.setVisibility(b ? View.VISIBLE : View.GONE);
  RelativeLayout.LayoutParams params=new RelativeLayout.LayoutParams(RelativeLayout.LayoutParams.MATCH_PARENT,RelativeLayout.LayoutParams.WRAP_CONTENT);
  if (b) {
    toolbar.setBackgroundResource(R.color.transparent);
    ViewCompat.setElevation(toolbar,0);
    llDetails.setPadding(llDetails.getPaddingLeft(),0,llDetails.getPaddingRight(),llDetails.getPaddingBottom());
    params.addRule(RelativeLayout.BELOW,R.id.ivCover);
  }
 else {
    toolbar.setBackgroundResource(getToolbarBackgroundColor());
    ViewCompat.setElevation(toolbar,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,4f,getResources().getDisplayMetrics()));
    params.addRule(RelativeLayout.BELOW,R.id.toolbar);
  }
  detailsLayout.setLayoutParams(params);
}"
86240,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_searchresult_detail,container,false);
  view=rootView;
  toolbar=(Toolbar)view.findViewById(R.id.toolbar);
  toolbar.setVisibility(View.VISIBLE);
  setHasOptionsMenu(false);
  if (getActivity() instanceof SearchResultDetailActivity) {
    toolbar.setNavigationIcon(R.drawable.abc_ic_ab_back_mtrl_am_alpha);
    toolbar.setNavigationOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        getActivity().supportFinishAfterTransition();
      }
    }
);
    back_button_visible=true;
  }
  toolbar.inflateMenu(R.menu.search_result_details_activity);
  refreshMenu(toolbar.getMenu());
  toolbar.setOnMenuItemClickListener(this);
  setRetainInstance(true);
  setProgress();
  scrollView=(ObservableScrollView)view.findViewById(R.id.rootView);
  scrollView.addCallbacks(this);
  ivCover=(ImageView)view.findViewById(R.id.ivCover);
  gradientBottom=view.findViewById(R.id.gradient_bottom);
  gradientTop=view.findViewById(R.id.gradient_top);
  tint=view.findViewById(R.id.tint);
  tvTitel=(TextView)view.findViewById(R.id.tvTitle);
  llDetails=(LinearLayout)view.findViewById(R.id.llDetails);
  llCopies=(LinearLayout)view.findViewById(R.id.llCopies);
  progressBar=(ProgressBar)view.findViewById(R.id.progress);
  detailsLayout=(RelativeLayout)view.findViewById(R.id.detailsLayout);
  errorView=(FrameLayout)view.findViewById(R.id.error_view);
  tvCopies=(TextView)view.findViewById(R.id.tvCopies);
  if (getArguments().containsKey(ARG_ITEM_COVER_BITMAP)) {
    Bitmap bitmap=getArguments().getParcelable(ARG_ITEM_COVER_BITMAP);
    ivCover.setImageBitmap(bitmap);
    Palette.generateAsync(bitmap,new Palette.PaletteAsyncListener(){
      @Override public void onGenerated(      Palette palette){
        Palette.Swatch swatch=palette.getDarkVibrantSwatch();
        if (swatch != null) {
          ivCover.setBackgroundColor(swatch.getRgb());
          tint.setBackgroundColor(swatch.getRgb());
        }
      }
    }
);
    analyzeWhitenessOfCoverAsync(bitmap);
    image_analyzed=true;
    showCoverView(true);
  }
 else {
    showCoverView(false);
  }
  fixEllipsize(tvTitel);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_searchresult_detail,container,false);
  view=rootView;
  findViews();
  toolbar.setVisibility(View.VISIBLE);
  setHasOptionsMenu(false);
  if (getActivity() instanceof SearchResultDetailActivity) {
    toolbar.setNavigationIcon(R.drawable.abc_ic_ab_back_mtrl_am_alpha);
    toolbar.setNavigationOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        getActivity().supportFinishAfterTransition();
      }
    }
);
    back_button_visible=true;
  }
  toolbar.inflateMenu(R.menu.search_result_details_activity);
  refreshMenu(toolbar.getMenu());
  toolbar.setOnMenuItemClickListener(this);
  setRetainInstance(true);
  setProgress();
  scrollView.addCallbacks(this);
  if (getArguments().containsKey(ARG_ITEM_COVER_BITMAP)) {
    Bitmap bitmap=getArguments().getParcelable(ARG_ITEM_COVER_BITMAP);
    ivCover.setImageBitmap(bitmap);
    Palette.generateAsync(bitmap,new Palette.PaletteAsyncListener(){
      @Override public void onGenerated(      Palette palette){
        Palette.Swatch swatch=palette.getDarkVibrantSwatch();
        if (swatch != null) {
          ivCover.setBackgroundColor(swatch.getRgb());
          tint.setBackgroundColor(swatch.getRgb());
        }
      }
    }
);
    analyzeWhitenessOfCoverAsync(bitmap);
    image_analyzed=true;
    showCoverView(true);
  }
 else {
    showCoverView(false);
  }
  fixEllipsize(tvTitel);
  return rootView;
}"
86241,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_searchresult_detail,container,false);
  view=rootView;
  findViews();
  toolbar.setVisibility(View.VISIBLE);
  setHasOptionsMenu(false);
  if (getActivity() instanceof SearchResultDetailActivity) {
    toolbar.setNavigationIcon(R.drawable.abc_ic_ab_back_mtrl_am_alpha);
    toolbar.setNavigationOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        getActivity().supportFinishAfterTransition();
      }
    }
);
    back_button_visible=true;
  }
  toolbar.inflateMenu(R.menu.search_result_details_activity);
  refreshMenu(toolbar.getMenu());
  toolbar.setOnMenuItemClickListener(this);
  setRetainInstance(true);
  setProgress();
  scrollView.addCallbacks(this);
  if (getArguments().containsKey(ARG_ITEM_COVER_BITMAP)) {
    Bitmap bitmap=getArguments().getParcelable(ARG_ITEM_COVER_BITMAP);
    ivCover.setImageBitmap(bitmap);
    Palette.generateAsync(bitmap,new Palette.PaletteAsyncListener(){
      @Override public void onGenerated(      Palette palette){
        Palette.Swatch swatch=palette.getDarkVibrantSwatch();
        if (swatch != null) {
          ivCover.setBackgroundColor(swatch.getRgb());
          tint.setBackgroundColor(swatch.getRgb());
        }
      }
    }
);
    analyzeWhitenessOfCoverAsync(bitmap);
    image_analyzed=true;
    showCoverView(true);
  }
 else {
    showCoverView(false);
  }
  fixEllipsize(tvTitel);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_searchresult_detail,container,false);
  view=rootView;
  findViews();
  toolbar.setVisibility(View.VISIBLE);
  setHasOptionsMenu(false);
  if (getActivity() instanceof SearchResultDetailActivity) {
    toolbar.setNavigationIcon(R.drawable.abc_ic_ab_back_mtrl_am_alpha);
    toolbar.setNavigationOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        getActivity().supportFinishAfterTransition();
      }
    }
);
    back_button_visible=true;
  }
  toolbar.inflateMenu(R.menu.search_result_details_activity);
  refreshMenu(toolbar.getMenu());
  toolbar.setOnMenuItemClickListener(this);
  setRetainInstance(true);
  setProgress();
  scrollView.addCallbacks(this);
  if (getArguments().containsKey(ARG_ITEM_COVER_BITMAP) && !ft.getStatus().equals(AsyncTask.Status.FINISHED)) {
    Bitmap bitmap=getArguments().getParcelable(ARG_ITEM_COVER_BITMAP);
    ivCover.setImageBitmap(bitmap);
    Palette.generateAsync(bitmap,new Palette.PaletteAsyncListener(){
      @Override public void onGenerated(      Palette palette){
        Palette.Swatch swatch=palette.getDarkVibrantSwatch();
        if (swatch != null) {
          ivCover.setBackgroundColor(swatch.getRgb());
          tint.setBackgroundColor(swatch.getRgb());
        }
      }
    }
);
    analyzeWhitenessOfCoverAsync(bitmap);
    image_analyzed=true;
    showCoverView(true);
  }
 else {
    showCoverView(false);
  }
  fixEllipsize(tvTitel);
  return rootView;
}"
86242,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setRetainInstance(true);
  if (getArguments().containsKey(ARG_ITEM_ID) || getArguments().containsKey(ARG_ITEM_NR)) {
    load(getArguments().getInt(ARG_ITEM_NR),getArguments().getString(ARG_ITEM_ID));
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setRetainInstance(true);
}"
86243,"protected void display(){
  try {
    Log.i(""String_Node_Str"",getItem().toString());
  }
 catch (  Exception e) {
    ACRA.getErrorReporter().handleException(e);
  }
  if (getItem().getCoverBitmap() != null) {
    ivCover.setVisibility(View.VISIBLE);
    ivCover.setImageBitmap(getItem().getCoverBitmap());
    if (!image_analyzed) {
      Palette.generateAsync(getItem().getCoverBitmap(),new Palette.PaletteAsyncListener(){
        @Override public void onGenerated(        Palette palette){
          Palette.Swatch swatch=palette.getDarkVibrantSwatch();
          if (swatch != null) {
            ivCover.setBackgroundColor(swatch.getRgb());
            tint.setBackgroundColor(swatch.getRgb());
          }
        }
      }
);
      analyzeWhitenessOfCoverAsync(getItem().getCoverBitmap());
    }
    tvTitel.setText(getItem().getTitle());
    showCoverView(true);
  }
 else   if (getArguments().containsKey(ARG_ITEM_COVER_BITMAP)) {
    tvTitel.setText(getItem().getTitle());
    showCoverView(true);
  }
 else {
    showCoverView(false);
    toolbar.setTitle(getItem().getTitle());
  }
  llDetails.removeAllViews();
  for (  Detail detail : item.getDetails()) {
    View v=getLayoutInflater(null).inflate(R.layout.listitem_detail,null);
    ((TextView)v.findViewById(R.id.tvDesc)).setText(detail.getDesc());
    ((TextView)v.findViewById(R.id.tvContent)).setText(detail.getContent());
    Linkify.addLinks((TextView)v.findViewById(R.id.tvContent),Linkify.WEB_URLS);
    llDetails.addView(v);
  }
  llCopies.removeAllViews();
  if (item.getVolumesearch() != null) {
    tvCopies.setText(R.string.baende);
    Button btnVolume=new Button(getActivity());
    btnVolume.setText(R.string.baende_volumesearch);
    btnVolume.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        app.startVolumeSearch(getActivity(),getItem().getVolumesearch());
      }
    }
);
    llCopies.addView(btnVolume);
  }
 else   if (item.getBaende().size() > 0) {
    tvCopies.setText(R.string.baende);
    for (    final Map<String,String> band : item.getBaende()) {
      View v=getLayoutInflater(null).inflate(R.layout.listitem_volume,null);
      ((TextView)v.findViewById(R.id.tvTitel)).setText(band.get(DetailledItem.KEY_CHILD_TITLE));
      v.findViewById(R.id.llItem).setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          Intent intent=new Intent(getActivity(),SearchResultDetailActivity.class);
          intent.putExtra(ARG_ITEM_ID,band.get(DetailledItem.KEY_CHILD_ID));
          intent.putExtra(""String_Node_Str"",true);
          startActivity(intent);
        }
      }
);
      llCopies.addView(v);
    }
  }
 else {
    if (item.getCopies().size() == 0) {
      tvCopies.setVisibility(View.GONE);
    }
 else {
      for (      Map<String,String> copy : item.getCopies()) {
        View v=getLayoutInflater(null).inflate(R.layout.listitem_copy,llCopies,false);
        if (v.findViewById(R.id.tvBranch) != null) {
          if (containsAndNotEmpty(copy,DetailledItem.KEY_COPY_BRANCH)) {
            ((TextView)v.findViewById(R.id.tvBranch)).setText(copy.get(DetailledItem.KEY_COPY_BRANCH));
            v.findViewById(R.id.llBranch).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llBranch).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvDepartment) != null) {
          if (containsAndNotEmpty(copy,DetailledItem.KEY_COPY_DEPARTMENT)) {
            ((TextView)v.findViewById(R.id.tvDepartment)).setText(copy.get(DetailledItem.KEY_COPY_DEPARTMENT));
            v.findViewById(R.id.llDepartment).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llDepartment).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvLocation) != null) {
          if (containsAndNotEmpty(copy,DetailledItem.KEY_COPY_LOCATION)) {
            ((TextView)v.findViewById(R.id.tvLocation)).setText(copy.get(DetailledItem.KEY_COPY_LOCATION));
            v.findViewById(R.id.llLocation).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llLocation).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvShelfmark) != null) {
          if (containsAndNotEmpty(copy,DetailledItem.KEY_COPY_SHELFMARK)) {
            ((TextView)v.findViewById(R.id.tvShelfmark)).setText(copy.get(DetailledItem.KEY_COPY_SHELFMARK));
            v.findViewById(R.id.llShelfmark).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llShelfmark).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvStatus) != null) {
          if (containsAndNotEmpty(copy,DetailledItem.KEY_COPY_STATUS)) {
            ((TextView)v.findViewById(R.id.tvStatus)).setText(copy.get(DetailledItem.KEY_COPY_STATUS));
            v.findViewById(R.id.llStatus).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llStatus).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvReservations) != null) {
          if (containsAndNotEmpty(copy,DetailledItem.KEY_COPY_RESERVATIONS)) {
            ((TextView)v.findViewById(R.id.tvReservations)).setText(copy.get(DetailledItem.KEY_COPY_RESERVATIONS));
            v.findViewById(R.id.llReservations).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llReservations).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvReturndate) != null) {
          if (containsAndNotEmpty(copy,DetailledItem.KEY_COPY_RETURN)) {
            ((TextView)v.findViewById(R.id.tvReturndate)).setText(copy.get(DetailledItem.KEY_COPY_RETURN));
            v.findViewById(R.id.llReturndate).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llReturndate).setVisibility(View.GONE);
          }
        }
        llCopies.addView(v);
      }
    }
  }
  if (id == null || id.equals(""String_Node_Str"")) {
    id=getItem().getId();
  }
  setProgress(false,true);
  refreshMenu(toolbar.getMenu());
  fixTitle();
}","protected void display(){
  try {
    Log.i(""String_Node_Str"",getItem().toString());
  }
 catch (  Exception e) {
    ACRA.getErrorReporter().handleException(e);
  }
  if (getItem().getCoverBitmap() != null) {
    ivCover.setVisibility(View.VISIBLE);
    ivCover.setImageBitmap(getItem().getCoverBitmap());
    if (!image_analyzed) {
      Palette.generateAsync(getItem().getCoverBitmap(),new Palette.PaletteAsyncListener(){
        @Override public void onGenerated(        Palette palette){
          Palette.Swatch swatch=palette.getDarkVibrantSwatch();
          if (swatch != null) {
            ivCover.setBackgroundColor(swatch.getRgb());
            tint.setBackgroundColor(swatch.getRgb());
          }
        }
      }
);
      analyzeWhitenessOfCoverAsync(getItem().getCoverBitmap());
    }
    tvTitel.setText(getItem().getTitle());
    showCoverView(true);
  }
 else   if (getArguments().containsKey(ARG_ITEM_COVER_BITMAP)) {
    tvTitel.setText(getItem().getTitle());
    showCoverView(true);
  }
 else {
    showCoverView(false);
    toolbar.setTitle(getItem().getTitle());
  }
  llDetails.removeAllViews();
  for (  Detail detail : item.getDetails()) {
    View v=getLayoutInflater(null).inflate(R.layout.listitem_detail,null);
    ((TextView)v.findViewById(R.id.tvDesc)).setText(detail.getDesc());
    ((TextView)v.findViewById(R.id.tvContent)).setText(detail.getContent());
    Linkify.addLinks((TextView)v.findViewById(R.id.tvContent),Linkify.WEB_URLS);
    llDetails.addView(v);
  }
  llCopies.removeAllViews();
  if (item.getVolumesearch() != null) {
    tvCopies.setText(R.string.baende);
    Button btnVolume=new Button(getActivity());
    btnVolume.setText(R.string.baende_volumesearch);
    btnVolume.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        app.startVolumeSearch(getActivity(),getItem().getVolumesearch());
      }
    }
);
    llCopies.addView(btnVolume);
  }
 else   if (item.getBaende().size() > 0) {
    tvCopies.setText(R.string.baende);
    for (    final Map<String,String> band : item.getBaende()) {
      View v=getLayoutInflater(null).inflate(R.layout.listitem_volume,null);
      ((TextView)v.findViewById(R.id.tvTitel)).setText(band.get(DetailledItem.KEY_CHILD_TITLE));
      v.findViewById(R.id.llItem).setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          Intent intent=new Intent(getActivity(),SearchResultDetailActivity.class);
          intent.putExtra(ARG_ITEM_ID,band.get(DetailledItem.KEY_CHILD_ID));
          intent.putExtra(""String_Node_Str"",true);
          startActivity(intent);
        }
      }
);
      llCopies.addView(v);
    }
  }
 else {
    if (item.getCopies().size() == 0) {
      tvCopies.setVisibility(View.GONE);
    }
 else {
      for (      Map<String,String> copy : item.getCopies()) {
        View v=getLayoutInflater(null).inflate(R.layout.listitem_copy,llCopies,false);
        if (v.findViewById(R.id.tvBranch) != null) {
          if (containsAndNotEmpty(copy,DetailledItem.KEY_COPY_BRANCH)) {
            ((TextView)v.findViewById(R.id.tvBranch)).setText(copy.get(DetailledItem.KEY_COPY_BRANCH));
            v.findViewById(R.id.llBranch).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llBranch).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvDepartment) != null) {
          if (containsAndNotEmpty(copy,DetailledItem.KEY_COPY_DEPARTMENT)) {
            ((TextView)v.findViewById(R.id.tvDepartment)).setText(copy.get(DetailledItem.KEY_COPY_DEPARTMENT));
            v.findViewById(R.id.llDepartment).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llDepartment).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvLocation) != null) {
          if (containsAndNotEmpty(copy,DetailledItem.KEY_COPY_LOCATION)) {
            ((TextView)v.findViewById(R.id.tvLocation)).setText(copy.get(DetailledItem.KEY_COPY_LOCATION));
            v.findViewById(R.id.llLocation).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llLocation).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvShelfmark) != null) {
          if (containsAndNotEmpty(copy,DetailledItem.KEY_COPY_SHELFMARK)) {
            ((TextView)v.findViewById(R.id.tvShelfmark)).setText(copy.get(DetailledItem.KEY_COPY_SHELFMARK));
            v.findViewById(R.id.llShelfmark).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llShelfmark).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvStatus) != null) {
          if (containsAndNotEmpty(copy,DetailledItem.KEY_COPY_STATUS)) {
            ((TextView)v.findViewById(R.id.tvStatus)).setText(copy.get(DetailledItem.KEY_COPY_STATUS));
            v.findViewById(R.id.llStatus).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llStatus).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvReservations) != null) {
          if (containsAndNotEmpty(copy,DetailledItem.KEY_COPY_RESERVATIONS)) {
            ((TextView)v.findViewById(R.id.tvReservations)).setText(copy.get(DetailledItem.KEY_COPY_RESERVATIONS));
            v.findViewById(R.id.llReservations).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llReservations).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvReturndate) != null) {
          if (containsAndNotEmpty(copy,DetailledItem.KEY_COPY_RETURN)) {
            ((TextView)v.findViewById(R.id.tvReturndate)).setText(copy.get(DetailledItem.KEY_COPY_RETURN));
            v.findViewById(R.id.llReturndate).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llReturndate).setVisibility(View.GONE);
          }
        }
        llCopies.addView(v);
      }
    }
  }
  if (id == null || id.equals(""String_Node_Str"")) {
    id=getItem().getId();
  }
  setProgress(false,true);
  refreshMenu(toolbar.getMenu());
  toolbar.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      toolbar.getViewTreeObserver().removeGlobalOnLayoutListener(this);
      fixTitle();
    }
  }
);
  toolbar.requestLayout();
}"
86244,"@Override public void onScrollChanged(int deltaX,int deltaY){
  if (getItem() == null) {
    return;
  }
  int scrollY=scrollView.getScrollY();
  if (getItem().getCoverBitmap() != null) {
    ViewHelper.setTranslationY(ivCover,scrollY * 0.5f);
    ViewHelper.setTranslationY(gradientBottom,scrollY * 0.5f);
    ViewHelper.setTranslationY(gradientTop,scrollY * 0.5f);
  }
  ViewHelper.setTranslationY(toolbar,scrollY);
  if (getItem().getCoverBitmap() != null) {
    float minHeight=toolbar.getHeight();
    float progress=Math.min(((float)scrollY) / (ivCover.getHeight() - minHeight),1);
    float scale=1 - progress + 20f / 36f * progress;
    ViewHelper.setPivotX(tvTitel,0);
    ViewHelper.setPivotY(tvTitel,tvTitel.getHeight());
    ViewHelper.setScaleX(tvTitel,scale);
    ViewHelper.setScaleY(tvTitel,scale);
    if (back_button_visible) {
      ViewHelper.setTranslationX(tvTitel,progress * TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,56f,getResources().getDisplayMetrics()));
    }
    ViewHelper.setAlpha(tint,progress);
    if (progress == 1) {
      ViewHelper.setTranslationY(tvTitel,scrollY - ivCover.getHeight() + minHeight);
      if (!ivCover.getBackground().equals(toolbar.getBackground())) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
          toolbar.setBackground(ivCover.getBackground());
        }
 else {
          toolbar.setBackgroundDrawable(ivCover.getBackground());
        }
        ViewCompat.setElevation(toolbar,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,4f,getResources().getDisplayMetrics()));
        ViewCompat.setElevation(tvTitel,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,4f,getResources().getDisplayMetrics()));
      }
    }
 else {
      ViewHelper.setTranslationY(tvTitel,0);
      if (ivCover.getBackground().equals(toolbar.getBackground())) {
        toolbar.setBackgroundResource(R.color.transparent);
        ViewCompat.setElevation(toolbar,0);
        ViewCompat.setElevation(tvTitel,0);
      }
    }
  }
  if (cardAnimations == null) {
    cardAnimations=new Boolean[llCopies.getChildCount()];
    Arrays.fill(cardAnimations,false);
  }
  for (int i=0; i < llCopies.getChildCount(); i++) {
    if (!cardAnimations[i]) {
      View card=llCopies.getChildAt(i);
      Rect scrollBounds=new Rect();
      scrollView.getHitRect(scrollBounds);
      if (card.getLocalVisibleRect(scrollBounds)) {
        cardAnimations[i]=true;
        card.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.card_appear));
      }
    }
  }
}","@Override public void onScrollChanged(int deltaX,int deltaY){
  if (getItem() == null) {
    return;
  }
  int scrollY=scrollView.getScrollY();
  boolean hasCover=getItem().getCoverBitmap() != null || getArguments().containsKey(ARG_ITEM_COVER_BITMAP);
  if (hasCover) {
    ViewHelper.setTranslationY(ivCover,scrollY * 0.5f);
    ViewHelper.setTranslationY(gradientBottom,scrollY * 0.5f);
    ViewHelper.setTranslationY(gradientTop,scrollY * 0.5f);
  }
  ViewHelper.setTranslationY(toolbar,scrollY);
  if (hasCover) {
    float minHeight=toolbar.getHeight();
    float progress=Math.min(((float)scrollY) / (ivCover.getHeight() - minHeight),1);
    float scale=1 - progress + 20f / 36f * progress;
    ViewHelper.setPivotX(tvTitel,0);
    ViewHelper.setPivotY(tvTitel,tvTitel.getHeight());
    ViewHelper.setScaleX(tvTitel,scale);
    ViewHelper.setScaleY(tvTitel,scale);
    if (back_button_visible) {
      ViewHelper.setTranslationX(tvTitel,progress * TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,56f,getResources().getDisplayMetrics()));
    }
    ViewHelper.setAlpha(tint,progress);
    if (progress == 1) {
      ViewHelper.setTranslationY(tvTitel,scrollY - ivCover.getHeight() + minHeight);
      if (!ivCover.getBackground().equals(toolbar.getBackground())) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
          toolbar.setBackground(ivCover.getBackground());
        }
 else {
          toolbar.setBackgroundDrawable(ivCover.getBackground());
        }
        ViewCompat.setElevation(toolbar,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,4f,getResources().getDisplayMetrics()));
        ViewCompat.setElevation(tvTitel,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,4f,getResources().getDisplayMetrics()));
      }
    }
 else {
      ViewHelper.setTranslationY(tvTitel,0);
      if (ivCover.getBackground().equals(toolbar.getBackground())) {
        toolbar.setBackgroundResource(R.color.transparent);
        ViewCompat.setElevation(toolbar,0);
        ViewCompat.setElevation(tvTitel,0);
      }
    }
  }
  if (cardAnimations == null) {
    cardAnimations=new Boolean[llCopies.getChildCount()];
    Arrays.fill(cardAnimations,false);
  }
  for (int i=0; i < llCopies.getChildCount(); i++) {
    if (!cardAnimations[i]) {
      View card=llCopies.getChildAt(i);
      Rect scrollBounds=new Rect();
      scrollView.getHitRect(scrollBounds);
      if (card.getLocalVisibleRect(scrollBounds)) {
        cardAnimations[i]=true;
        card.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.card_appear));
      }
    }
  }
}"
86245,"@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  if (item != null) {
    display();
  }
}","@Override public void onViewCreated(View view,Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  if (item != null) {
    display();
  }
 else   if (getArguments().containsKey(ARG_ITEM_ID) || getArguments().containsKey(ARG_ITEM_NR)) {
    load(getArguments().getInt(ARG_ITEM_NR),getArguments().getString(ARG_ITEM_ID));
  }
}"
86246,"private void fixTitle(){
  if (getItem().getCoverBitmap() != null) {
    fixTitleWidth();
    tvTitel.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
      @Override public void onGlobalLayout(){
        tvTitel.getViewTreeObserver().removeGlobalOnLayoutListener(this);
        if (tvTitel.getLayout() != null && tvTitel.getLayout().getLineCount() > 1) {
          toolbar.getLayoutParams().height=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,84f,getResources().getDisplayMetrics());
          toolbar.getParent().requestLayout();
        }
      }
    }
);
  }
 else {
    toolbar.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
      @Override public void onGlobalLayout(){
        toolbar.getViewTreeObserver().removeGlobalOnLayoutListener(this);
        if (toolbar.isTitleTruncated()) {
          toolbar.getLayoutParams().height=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,84f,getResources().getDisplayMetrics());
          TextView titleTextView=findTitleTextView(toolbar);
          titleTextView.setSingleLine(false);
          fixEllipsize(titleTextView);
          toolbar.getParent().requestLayout();
        }
      }
    }
);
  }
  onScrollChanged(0,0);
}","private void fixTitle(){
  if (getItem().getCoverBitmap() != null || getArguments().containsKey(ARG_ITEM_COVER_BITMAP)) {
    fixTitleWidth();
    tvTitel.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
      @Override public void onGlobalLayout(){
        tvTitel.getViewTreeObserver().removeGlobalOnLayoutListener(this);
        if (tvTitel.getLayout() != null && tvTitel.getLayout().getLineCount() > 1) {
          toolbar.getLayoutParams().height=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,84f,getResources().getDisplayMetrics());
          toolbar.getParent().requestLayout();
        }
      }
    }
);
  }
 else {
    toolbar.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
      @Override public void onGlobalLayout(){
        toolbar.getViewTreeObserver().removeGlobalOnLayoutListener(this);
        if (toolbar.isTitleTruncated()) {
          toolbar.getLayoutParams().height=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,84f,getResources().getDisplayMetrics());
          TextView titleTextView=findTitleTextView(toolbar);
          titleTextView.setSingleLine(false);
          fixEllipsize(titleTextView);
          toolbar.getParent().requestLayout();
        }
      }
    }
);
  }
  onScrollChanged(0,0);
}"
86247,"/** 
 * Get all languages supported by this library. This will be a Set of language codes defined in ISO-639-1 (two-letter codes in lower case, see <a href=""http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes"">this list</a>). We don't need to use this function in the app because the API will automatically fall back if the language set is not supported, but it is used in the MeaningDetector tool to get search fields for all supported languages. This function may use blocking network operations and may return null if the API doesn't support different languages.
 * @throws OpacErrorException
 * @throws IOException
 */
public Set<String> getSupportedLanguages() throws IOException ;","/** 
 * Get all languages supported by this library. This will be a Set of language codes defined in ISO-639-1 (two-letter codes in lower case, see <a href=""http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes"">this list</a>). We don't need to use this function in the app because the API will automatically fall back if the language set is not supported, but it is used in the MeaningDetector tool to get search fields for all supported languages. This function may use blocking network operations and may return null if the API doesn't support different languages.
 * @throws IOException
 */
public Set<String> getSupportedLanguages() throws IOException ;"
86248,"/** 
 * @param c ""Combination"" (probably And, Or, ...): Meaning unknown, seemsto always be ""1"" except in some mysterious queries the website adds every time that don't change the result
 * @param m ""Mode"": Meaning unknown, seems to always be ""1"" except in somemysterious queries the website adds every time that don't change the result
 * @param f ""Field"": The key for the property that is queried, for example""12"" for ""title""
 * @param o ""Operator"": The type of search that is made (one of theQUERY_TYPE_ constants above), for example ""8"" for ""contains""
 * @param v ""Value"": The value that was input by the user
 */
protected int addParametersManual(String combination,String mode,String field,String operator,String value,List<List<NameValuePair>> params,int index){
  List<NameValuePair> list=new ArrayList<>();
  if (data.optBoolean(""String_Node_Str"")) {
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,combination));
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,mode));
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,field));
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,operator));
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,value));
  }
 else {
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,combination));
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,mode));
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,field));
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,operator));
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,value));
  }
  params.add(list);
  return index + 1;
}","/** 
 * @param combination ""Combination"" (probably And, Or, ...): Meaning unknown, seemsto always be ""1"" except in some mysterious queries the website adds every time that don't change the result
 * @param mode ""Mode"": Meaning unknown, seems to always be ""1"" except in somemysterious queries the website adds every time that don't change the result
 * @param field ""Field"": The key for the property that is queried, for example""12"" for ""title""
 * @param operator ""Operator"": The type of search that is made (one of theQUERY_TYPE_ constants above), for example ""8"" for ""contains""
 * @param value ""Value"": The value that was input by the user
 */
protected int addParametersManual(String combination,String mode,String field,String operator,String value,List<List<NameValuePair>> params,int index){
  List<NameValuePair> list=new ArrayList<>();
  if (data.optBoolean(""String_Node_Str"")) {
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,combination));
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,mode));
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,field));
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,operator));
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,value));
  }
 else {
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,combination));
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,mode));
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,field));
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,operator));
    list.add(new BasicNameValuePair(""String_Node_Str"" + index,value));
  }
  params.add(list);
  return index + 1;
}"
86249,"/** 
 * Set a warning which is shown to the user above the account data in a yellow bar.
 * @param warning
 */
public void setWarning(String warning){
  this.warning=warning;
}","/** 
 * Set a warning which is shown to the user above the account data in a yellow bar.
 * @param warning The warning message
 */
public void setWarning(String warning){
  this.warning=warning;
}"
86250,"public static DefaultHttpClient getNewHttpClient(boolean customssl){
  DefaultHttpClient hc=null;
  if (customssl) {
    try {
      if (trustStore == null) {
        trustStore=KeyStore.getInstance(""String_Node_Str"");
        final InputStream in=OpacClient.context.getResources().openRawResource(R.raw.ssl_trust_store);
        try {
          trustStore.load(in,""String_Node_Str"".toCharArray());
        }
  finally {
          in.close();
        }
      }
      SSLSocketFactory sf=new AdditionalKeyStoresSSLSocketFactory(trustStore);
      HttpParams params=new BasicHttpParams();
      HttpProtocolParams.setVersion(params,HttpVersion.HTTP_1_1);
      HttpProtocolParams.setContentCharset(params,HTTP.UTF_8);
      SchemeRegistry registry=new SchemeRegistry();
      registry.register(new Scheme(""String_Node_Str"",PlainSocketFactory.getSocketFactory(),80));
      registry.register(new Scheme(""String_Node_Str"",sf,443));
      ClientConnectionManager ccm=new ThreadSafeClientConnManager(params,registry);
      hc=new DefaultHttpClient(ccm,params);
    }
 catch (    Exception e) {
      e.printStackTrace();
      hc=new DefaultHttpClient();
    }
  }
 else {
    hc=new DefaultHttpClient();
  }
  RedirectHandler customRedirectHandler=new HTTPClient.CustomRedirectHandler();
  hc.setRedirectHandler(customRedirectHandler);
  HttpProtocolParams.setUserAgent(hc.getParams(),""String_Node_Str"" + OpacClient.versionName);
  return hc;
}","public static DefaultHttpClient getNewHttpClient(boolean customssl){
  DefaultHttpClient hc=null;
  HttpParams params=new BasicHttpParams();
  HttpProtocolParams.setVersion(params,HttpVersion.HTTP_1_1);
  HttpProtocolParams.setContentCharset(params,HTTP.UTF_8);
  SchemeRegistry registry=new SchemeRegistry();
  registry.register(new Scheme(""String_Node_Str"",PlainSocketFactory.getSocketFactory(),80));
  ClientConnectionManager ccm=new ThreadSafeClientConnManager(params,registry);
  if (customssl) {
    try {
      if (trustStore == null) {
        trustStore=KeyStore.getInstance(""String_Node_Str"");
        final InputStream in=OpacClient.context.getResources().openRawResource(R.raw.ssl_trust_store);
        try {
          trustStore.load(in,""String_Node_Str"".toCharArray());
        }
  finally {
          in.close();
        }
      }
      SSLSocketFactory sf=new AdditionalKeyStoresSSLSocketFactory(trustStore);
      registry.register(new Scheme(""String_Node_Str"",sf,443));
      hc=new DefaultHttpClient(ccm,params);
    }
 catch (    Exception e) {
      e.printStackTrace();
      registry.register(new Scheme(""String_Node_Str"",SSLSocketFactory.getSocketFactory(),443));
      hc=new DefaultHttpClient(ccm,params);
    }
  }
 else {
    registry.register(new Scheme(""String_Node_Str"",SSLSocketFactory.getSocketFactory(),443));
    hc=new DefaultHttpClient(ccm,params);
  }
  RedirectHandler customRedirectHandler=new HTTPClient.CustomRedirectHandler();
  hc.setRedirectHandler(customRedirectHandler);
  HttpProtocolParams.setUserAgent(hc.getParams(),""String_Node_Str"" + OpacClient.versionName);
  return hc;
}"
86251,"private ActionMenuView findActionMenuView(Toolbar toolbar){
  for (int i=0; i < toolbar.getChildCount(); i++) {
    View view=toolbar.getChildAt(i);
    if (view instanceof ActionMenuView)     return (ActionMenuView)view;
  }
  return null;
}","/** 
 * Hacky way to find the   {@link android.support.v7.widget.ActionMenuView} inside a {@link android.support.v7.widget.Toolbar}. Will return null if none is found
 * @param toolbar a Toolbar
 * @return the ActionMenuView inside this toolbar, or null if none is found
 */
private ActionMenuView findActionMenuView(Toolbar toolbar){
  for (int i=0; i < toolbar.getChildCount(); i++) {
    View view=toolbar.getChildAt(i);
    if (view instanceof ActionMenuView)     return (ActionMenuView)view;
  }
  return null;
}"
86252,"@Override public void onGlobalLayout(){
  tvTitel.getViewTreeObserver().removeGlobalOnLayoutListener(this);
  if (tvTitel.getLayout().getLineCount() > 1) {
    toolbar.setMinimumHeight((int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,84f,getResources().getDisplayMetrics()));
  }
}","@Override public void onGlobalLayout(){
  toolbar.getViewTreeObserver().removeGlobalOnLayoutListener(this);
  if (toolbar.isTitleTruncated()) {
    toolbar.getLayoutParams().height=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,84f,getResources().getDisplayMetrics());
    TextView titleTextView=findTitleTextView(toolbar);
    titleTextView.setSingleLine(false);
    fixEllipsize(titleTextView);
    toolbar.getParent().requestLayout();
  }
}"
86253,"protected void display(){
  try {
    Log.i(""String_Node_Str"",getItem().toString());
  }
 catch (  Exception e) {
    ACRA.getErrorReporter().handleException(e);
  }
  if (getItem().getCoverBitmap() != null) {
    ivCover.setVisibility(View.VISIBLE);
    ivCover.setImageBitmap(getItem().getCoverBitmap());
    if (!image_analyzed) {
      Palette.generateAsync(getItem().getCoverBitmap(),new Palette.PaletteAsyncListener(){
        @Override public void onGenerated(        Palette palette){
          Palette.Swatch swatch=palette.getDarkVibrantSwatch();
          if (swatch != null) {
            ivCover.setBackgroundColor(swatch.getRgb());
            tint.setBackgroundColor(swatch.getRgb());
          }
        }
      }
);
      analyzeWhitenessOfCoverAsync(getItem().getCoverBitmap());
    }
    tvTitel.setText(getItem().getTitle());
    showCoverView(true);
  }
 else {
    showCoverView(false);
    toolbar.setTitle(getItem().getTitle());
  }
  llDetails.removeAllViews();
  for (  Detail detail : item.getDetails()) {
    View v=getLayoutInflater(null).inflate(R.layout.listitem_detail,null);
    ((TextView)v.findViewById(R.id.tvDesc)).setText(detail.getDesc());
    ((TextView)v.findViewById(R.id.tvContent)).setText(detail.getContent());
    Linkify.addLinks((TextView)v.findViewById(R.id.tvContent),Linkify.WEB_URLS);
    llDetails.addView(v);
  }
  llCopies.removeAllViews();
  if (item.getVolumesearch() != null) {
    TextView tvC=(TextView)view.findViewById(R.id.tvCopies);
    tvC.setText(R.string.baende);
    Button btnVolume=new Button(getActivity());
    btnVolume.setText(R.string.baende_volumesearch);
    btnVolume.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        app.startVolumeSearch(getActivity(),getItem().getVolumesearch());
      }
    }
);
    llCopies.addView(btnVolume);
  }
 else   if (item.getBaende().size() > 0) {
    TextView tvC=(TextView)view.findViewById(R.id.tvCopies);
    tvC.setText(R.string.baende);
    for (    final Map<String,String> band : item.getBaende()) {
      View v=getLayoutInflater(null).inflate(R.layout.listitem_volume,null);
      ((TextView)v.findViewById(R.id.tvTitel)).setText(band.get(DetailledItem.KEY_CHILD_TITLE));
      v.findViewById(R.id.llItem).setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          Intent intent=new Intent(getActivity(),SearchResultDetailActivity.class);
          intent.putExtra(ARG_ITEM_ID,band.get(DetailledItem.KEY_CHILD_ID));
          intent.putExtra(""String_Node_Str"",true);
          startActivity(intent);
        }
      }
);
      llCopies.addView(v);
    }
  }
 else {
    if (item.getCopies().size() == 0) {
      view.findViewById(R.id.tvCopies).setVisibility(View.GONE);
    }
 else {
      for (      Map<String,String> copy : item.getCopies()) {
        View v=getLayoutInflater(null).inflate(R.layout.listitem_copy,llCopies,false);
        if (v.findViewById(R.id.tvBranch) != null) {
          if (copy.containsKey(DetailledItem.KEY_COPY_BRANCH)) {
            ((TextView)v.findViewById(R.id.tvBranch)).setText(copy.get(DetailledItem.KEY_COPY_BRANCH));
            v.findViewById(R.id.llBranch).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llBranch).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvDepartment) != null) {
          if (copy.containsKey(DetailledItem.KEY_COPY_DEPARTMENT)) {
            ((TextView)v.findViewById(R.id.tvDepartment)).setText(copy.get(DetailledItem.KEY_COPY_DEPARTMENT));
            v.findViewById(R.id.llDepartment).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llDepartment).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvLocation) != null) {
          if (copy.containsKey(DetailledItem.KEY_COPY_LOCATION)) {
            ((TextView)v.findViewById(R.id.tvLocation)).setText(copy.get(DetailledItem.KEY_COPY_LOCATION));
            v.findViewById(R.id.llLocation).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llLocation).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvShelfmark) != null) {
          if (copy.containsKey(DetailledItem.KEY_COPY_SHELFMARK)) {
            ((TextView)v.findViewById(R.id.tvShelfmark)).setText(copy.get(DetailledItem.KEY_COPY_SHELFMARK));
            v.findViewById(R.id.llShelfmark).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llShelfmark).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvStatus) != null) {
          if (copy.containsKey(DetailledItem.KEY_COPY_STATUS)) {
            ((TextView)v.findViewById(R.id.tvStatus)).setText(copy.get(DetailledItem.KEY_COPY_STATUS));
            v.findViewById(R.id.llStatus).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llStatus).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvReservations) != null) {
          if (copy.containsKey(DetailledItem.KEY_COPY_RESERVATIONS)) {
            ((TextView)v.findViewById(R.id.tvReservations)).setText(copy.get(DetailledItem.KEY_COPY_RESERVATIONS));
            v.findViewById(R.id.llReservations).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llReservations).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvReturndate) != null) {
          if (copy.containsKey(DetailledItem.KEY_COPY_RETURN) && !""String_Node_Str"".equals(copy.get(DetailledItem.KEY_COPY_RETURN))) {
            ((TextView)v.findViewById(R.id.tvReturndate)).setText(getString(R.string.ret) + ""String_Node_Str"" + copy.get(DetailledItem.KEY_COPY_RETURN));
            v.findViewById(R.id.llReturndate).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llReturndate).setVisibility(View.GONE);
          }
        }
        llCopies.addView(v);
      }
    }
  }
  if (id == null || id.equals(""String_Node_Str"")) {
    id=getItem().getId();
  }
  setProgress(false,true);
  refreshMenu(toolbar.getMenu());
  if (getItem().getCoverBitmap() != null) {
    fixTitle();
  }
 else {
    llCopies.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
      @Override public void onGlobalLayout(){
        onScrollChanged(0,0);
      }
    }
);
  }
}","protected void display(){
  try {
    Log.i(""String_Node_Str"",getItem().toString());
  }
 catch (  Exception e) {
    ACRA.getErrorReporter().handleException(e);
  }
  if (getItem().getCoverBitmap() != null) {
    ivCover.setVisibility(View.VISIBLE);
    ivCover.setImageBitmap(getItem().getCoverBitmap());
    if (!image_analyzed) {
      Palette.generateAsync(getItem().getCoverBitmap(),new Palette.PaletteAsyncListener(){
        @Override public void onGenerated(        Palette palette){
          Palette.Swatch swatch=palette.getDarkVibrantSwatch();
          if (swatch != null) {
            ivCover.setBackgroundColor(swatch.getRgb());
            tint.setBackgroundColor(swatch.getRgb());
          }
        }
      }
);
      analyzeWhitenessOfCoverAsync(getItem().getCoverBitmap());
    }
    tvTitel.setText(getItem().getTitle());
    showCoverView(true);
  }
 else {
    showCoverView(false);
    toolbar.setTitle(getItem().getTitle());
  }
  llDetails.removeAllViews();
  for (  Detail detail : item.getDetails()) {
    View v=getLayoutInflater(null).inflate(R.layout.listitem_detail,null);
    ((TextView)v.findViewById(R.id.tvDesc)).setText(detail.getDesc());
    ((TextView)v.findViewById(R.id.tvContent)).setText(detail.getContent());
    Linkify.addLinks((TextView)v.findViewById(R.id.tvContent),Linkify.WEB_URLS);
    llDetails.addView(v);
  }
  llCopies.removeAllViews();
  if (item.getVolumesearch() != null) {
    TextView tvC=(TextView)view.findViewById(R.id.tvCopies);
    tvC.setText(R.string.baende);
    Button btnVolume=new Button(getActivity());
    btnVolume.setText(R.string.baende_volumesearch);
    btnVolume.setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        app.startVolumeSearch(getActivity(),getItem().getVolumesearch());
      }
    }
);
    llCopies.addView(btnVolume);
  }
 else   if (item.getBaende().size() > 0) {
    TextView tvC=(TextView)view.findViewById(R.id.tvCopies);
    tvC.setText(R.string.baende);
    for (    final Map<String,String> band : item.getBaende()) {
      View v=getLayoutInflater(null).inflate(R.layout.listitem_volume,null);
      ((TextView)v.findViewById(R.id.tvTitel)).setText(band.get(DetailledItem.KEY_CHILD_TITLE));
      v.findViewById(R.id.llItem).setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View v){
          Intent intent=new Intent(getActivity(),SearchResultDetailActivity.class);
          intent.putExtra(ARG_ITEM_ID,band.get(DetailledItem.KEY_CHILD_ID));
          intent.putExtra(""String_Node_Str"",true);
          startActivity(intent);
        }
      }
);
      llCopies.addView(v);
    }
  }
 else {
    if (item.getCopies().size() == 0) {
      view.findViewById(R.id.tvCopies).setVisibility(View.GONE);
    }
 else {
      for (      Map<String,String> copy : item.getCopies()) {
        View v=getLayoutInflater(null).inflate(R.layout.listitem_copy,llCopies,false);
        if (v.findViewById(R.id.tvBranch) != null) {
          if (copy.containsKey(DetailledItem.KEY_COPY_BRANCH)) {
            ((TextView)v.findViewById(R.id.tvBranch)).setText(copy.get(DetailledItem.KEY_COPY_BRANCH));
            v.findViewById(R.id.llBranch).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llBranch).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvDepartment) != null) {
          if (copy.containsKey(DetailledItem.KEY_COPY_DEPARTMENT)) {
            ((TextView)v.findViewById(R.id.tvDepartment)).setText(copy.get(DetailledItem.KEY_COPY_DEPARTMENT));
            v.findViewById(R.id.llDepartment).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llDepartment).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvLocation) != null) {
          if (copy.containsKey(DetailledItem.KEY_COPY_LOCATION)) {
            ((TextView)v.findViewById(R.id.tvLocation)).setText(copy.get(DetailledItem.KEY_COPY_LOCATION));
            v.findViewById(R.id.llLocation).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llLocation).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvShelfmark) != null) {
          if (copy.containsKey(DetailledItem.KEY_COPY_SHELFMARK)) {
            ((TextView)v.findViewById(R.id.tvShelfmark)).setText(copy.get(DetailledItem.KEY_COPY_SHELFMARK));
            v.findViewById(R.id.llShelfmark).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llShelfmark).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvStatus) != null) {
          if (copy.containsKey(DetailledItem.KEY_COPY_STATUS)) {
            ((TextView)v.findViewById(R.id.tvStatus)).setText(copy.get(DetailledItem.KEY_COPY_STATUS));
            v.findViewById(R.id.llStatus).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llStatus).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvReservations) != null) {
          if (copy.containsKey(DetailledItem.KEY_COPY_RESERVATIONS)) {
            ((TextView)v.findViewById(R.id.tvReservations)).setText(copy.get(DetailledItem.KEY_COPY_RESERVATIONS));
            v.findViewById(R.id.llReservations).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llReservations).setVisibility(View.GONE);
          }
        }
        if (v.findViewById(R.id.tvReturndate) != null) {
          if (copy.containsKey(DetailledItem.KEY_COPY_RETURN) && !""String_Node_Str"".equals(copy.get(DetailledItem.KEY_COPY_RETURN))) {
            ((TextView)v.findViewById(R.id.tvReturndate)).setText(getString(R.string.ret) + ""String_Node_Str"" + copy.get(DetailledItem.KEY_COPY_RETURN));
            v.findViewById(R.id.llReturndate).setVisibility(View.VISIBLE);
          }
 else {
            v.findViewById(R.id.llReturndate).setVisibility(View.GONE);
          }
        }
        llCopies.addView(v);
      }
    }
  }
  if (id == null || id.equals(""String_Node_Str"")) {
    id=getItem().getId();
  }
  setProgress(false,true);
  refreshMenu(toolbar.getMenu());
  fixTitle();
}"
86254,"@Override public void onScrollChanged(int deltaX,int deltaY){
  int scrollY=scrollView.getScrollY();
  if (getItem().getCoverBitmap() != null) {
    ViewHelper.setTranslationY(ivCover,scrollY * 0.5f);
    ViewHelper.setTranslationY(gradientBottom,scrollY * 0.5f);
    ViewHelper.setTranslationY(gradientTop,scrollY * 0.5f);
  }
  ViewHelper.setTranslationY(toolbar,scrollY);
  if (getItem().getCoverBitmap() != null) {
    float minHeight=toolbar.getHeight();
    float progress=Math.min(((float)scrollY) / (ivCover.getHeight() - minHeight),1);
    float scale=1 - progress + 20f / 36f * progress;
    ViewHelper.setPivotX(tvTitel,0);
    ViewHelper.setPivotY(tvTitel,tvTitel.getHeight());
    ViewHelper.setScaleX(tvTitel,scale);
    ViewHelper.setScaleY(tvTitel,scale);
    if (back_button_visible) {
      ViewHelper.setTranslationX(tvTitel,progress * TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,56f,getResources().getDisplayMetrics()));
    }
    ViewHelper.setAlpha(tint,progress);
    float additionalTranslation=0;
    if (tvTitel.getLayout() != null && tvTitel.getLayout().getLineCount() > 1)     additionalTranslation=progress * TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,8f,getResources().getDisplayMetrics());
    if (progress == 1) {
      ViewHelper.setTranslationY(tvTitel,scrollY - ivCover.getHeight() + minHeight + additionalTranslation);
      if (!ivCover.getBackground().equals(toolbar.getBackground())) {
        toolbar.setBackgroundDrawable(ivCover.getBackground());
        ViewCompat.setElevation(toolbar,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,4f,getResources().getDisplayMetrics()));
        ViewCompat.setElevation(tvTitel,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,4f,getResources().getDisplayMetrics()));
      }
    }
 else {
      ViewHelper.setTranslationY(tvTitel,additionalTranslation);
      if (ivCover.getBackground().equals(toolbar.getBackground())) {
        toolbar.setBackgroundResource(R.color.transparent);
        ViewCompat.setElevation(toolbar,0);
        ViewCompat.setElevation(tvTitel,0);
      }
    }
  }
  if (cardAnimations == null) {
    cardAnimations=new Boolean[llCopies.getChildCount()];
    Arrays.fill(cardAnimations,false);
  }
  for (int i=0; i < llCopies.getChildCount(); i++) {
    if (cardAnimations[i] == false) {
      View card=llCopies.getChildAt(i);
      Rect scrollBounds=new Rect();
      scrollView.getHitRect(scrollBounds);
      if (card.getLocalVisibleRect(scrollBounds)) {
        cardAnimations[i]=true;
        card.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.card_appear));
      }
 else {
      }
    }
  }
}","@Override public void onScrollChanged(int deltaX,int deltaY){
  int scrollY=scrollView.getScrollY();
  if (getItem().getCoverBitmap() != null) {
    ViewHelper.setTranslationY(ivCover,scrollY * 0.5f);
    ViewHelper.setTranslationY(gradientBottom,scrollY * 0.5f);
    ViewHelper.setTranslationY(gradientTop,scrollY * 0.5f);
  }
  ViewHelper.setTranslationY(toolbar,scrollY);
  if (getItem().getCoverBitmap() != null) {
    float minHeight=toolbar.getHeight();
    float progress=Math.min(((float)scrollY) / (ivCover.getHeight() - minHeight),1);
    float scale=1 - progress + 20f / 36f * progress;
    ViewHelper.setPivotX(tvTitel,0);
    ViewHelper.setPivotY(tvTitel,tvTitel.getHeight());
    ViewHelper.setScaleX(tvTitel,scale);
    ViewHelper.setScaleY(tvTitel,scale);
    if (back_button_visible) {
      ViewHelper.setTranslationX(tvTitel,progress * TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,56f,getResources().getDisplayMetrics()));
    }
    ViewHelper.setAlpha(tint,progress);
    if (progress == 1) {
      ViewHelper.setTranslationY(tvTitel,scrollY - ivCover.getHeight() + minHeight);
      if (!ivCover.getBackground().equals(toolbar.getBackground())) {
        toolbar.setBackgroundDrawable(ivCover.getBackground());
        ViewCompat.setElevation(toolbar,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,4f,getResources().getDisplayMetrics()));
        ViewCompat.setElevation(tvTitel,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,4f,getResources().getDisplayMetrics()));
      }
    }
 else {
      if (ivCover.getBackground().equals(toolbar.getBackground())) {
        toolbar.setBackgroundResource(R.color.transparent);
        ViewCompat.setElevation(toolbar,0);
        ViewCompat.setElevation(tvTitel,0);
      }
    }
  }
  if (cardAnimations == null) {
    cardAnimations=new Boolean[llCopies.getChildCount()];
    Arrays.fill(cardAnimations,false);
  }
  for (int i=0; i < llCopies.getChildCount(); i++) {
    if (cardAnimations[i] == false) {
      View card=llCopies.getChildAt(i);
      Rect scrollBounds=new Rect();
      scrollView.getHitRect(scrollBounds);
      if (card.getLocalVisibleRect(scrollBounds)) {
        cardAnimations[i]=true;
        card.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.card_appear));
      }
 else {
      }
    }
  }
}"
86255,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_searchresult_detail,container,false);
  view=rootView;
  toolbar=(Toolbar)view.findViewById(R.id.toolbar);
  toolbar.setVisibility(View.VISIBLE);
  setHasOptionsMenu(false);
  if (getActivity() instanceof SearchResultDetailActivity) {
    toolbar.setNavigationIcon(R.drawable.abc_ic_ab_back_mtrl_am_alpha);
    toolbar.setNavigationOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        getActivity().supportFinishAfterTransition();
      }
    }
);
    back_button_visible=true;
  }
  toolbar.inflateMenu(R.menu.search_result_details_activity);
  refreshMenu(toolbar.getMenu());
  toolbar.setOnMenuItemClickListener(this);
  setRetainInstance(true);
  setProgress();
  scrollView=(ObservableScrollView)view.findViewById(R.id.rootView);
  scrollView.addCallbacks(this);
  ivCover=(ImageView)view.findViewById(R.id.ivCover);
  gradientBottom=view.findViewById(R.id.gradient_bottom);
  gradientTop=view.findViewById(R.id.gradient_top);
  tint=view.findViewById(R.id.tint);
  tvTitel=(TextView)view.findViewById(R.id.tvTitle);
  llDetails=(LinearLayout)view.findViewById(R.id.llDetails);
  llCopies=(LinearLayout)view.findViewById(R.id.llCopies);
  ImageView iv=(ImageView)view.findViewById(R.id.ivCover);
  if (getArguments().containsKey(ARG_ITEM_COVER_BITMAP)) {
    Bitmap bitmap=getArguments().getParcelable(ARG_ITEM_COVER_BITMAP);
    iv.setImageBitmap(bitmap);
    Palette.generateAsync(bitmap,new Palette.PaletteAsyncListener(){
      @Override public void onGenerated(      Palette palette){
        Palette.Swatch swatch=palette.getDarkVibrantSwatch();
        if (swatch != null) {
          ivCover.setBackgroundColor(swatch.getRgb());
          tint.setBackgroundColor(swatch.getRgb());
        }
      }
    }
);
    analyzeWhitenessOfCoverAsync(bitmap);
    image_analyzed=true;
    showCoverView(true);
  }
 else {
    showCoverView(false);
  }
  tvTitel.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      if (tvTitel.getLineCount() > 2) {
        try {
          int lineEndIndex=tvTitel.getLayout().getLineEnd(1);
          String text=tvTitel.getText().subSequence(0,lineEndIndex - 3) + ""String_Node_Str"";
          tvTitel.setText(text);
        }
 catch (        StringIndexOutOfBoundsException e) {
          e.printStackTrace();
        }
      }
    }
  }
);
  return rootView;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View rootView=inflater.inflate(R.layout.fragment_searchresult_detail,container,false);
  view=rootView;
  toolbar=(Toolbar)view.findViewById(R.id.toolbar);
  toolbar.setVisibility(View.VISIBLE);
  setHasOptionsMenu(false);
  if (getActivity() instanceof SearchResultDetailActivity) {
    toolbar.setNavigationIcon(R.drawable.abc_ic_ab_back_mtrl_am_alpha);
    toolbar.setNavigationOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        getActivity().supportFinishAfterTransition();
      }
    }
);
    back_button_visible=true;
  }
  toolbar.inflateMenu(R.menu.search_result_details_activity);
  refreshMenu(toolbar.getMenu());
  toolbar.setOnMenuItemClickListener(this);
  setRetainInstance(true);
  setProgress();
  scrollView=(ObservableScrollView)view.findViewById(R.id.rootView);
  scrollView.addCallbacks(this);
  ivCover=(ImageView)view.findViewById(R.id.ivCover);
  gradientBottom=view.findViewById(R.id.gradient_bottom);
  gradientTop=view.findViewById(R.id.gradient_top);
  tint=view.findViewById(R.id.tint);
  tvTitel=(TextView)view.findViewById(R.id.tvTitle);
  llDetails=(LinearLayout)view.findViewById(R.id.llDetails);
  llCopies=(LinearLayout)view.findViewById(R.id.llCopies);
  ImageView iv=(ImageView)view.findViewById(R.id.ivCover);
  if (getArguments().containsKey(ARG_ITEM_COVER_BITMAP)) {
    Bitmap bitmap=getArguments().getParcelable(ARG_ITEM_COVER_BITMAP);
    iv.setImageBitmap(bitmap);
    Palette.generateAsync(bitmap,new Palette.PaletteAsyncListener(){
      @Override public void onGenerated(      Palette palette){
        Palette.Swatch swatch=palette.getDarkVibrantSwatch();
        if (swatch != null) {
          ivCover.setBackgroundColor(swatch.getRgb());
          tint.setBackgroundColor(swatch.getRgb());
        }
      }
    }
);
    analyzeWhitenessOfCoverAsync(bitmap);
    image_analyzed=true;
    showCoverView(true);
  }
 else {
    showCoverView(false);
  }
  fixEllipsize(tvTitel);
  return rootView;
}"
86256,"private void fixTitle(){
  toolbar.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      findActionMenuView(toolbar).getViewTreeObserver().removeGlobalOnLayoutListener(this);
      fixTitleWidth();
      tvTitel.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
        @Override public void onGlobalLayout(){
          tvTitel.getViewTreeObserver().removeGlobalOnLayoutListener(this);
          if (tvTitel.getLayout().getLineCount() > 1) {
            toolbar.setMinimumHeight((int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,84f,getResources().getDisplayMetrics()));
          }
        }
      }
);
      onScrollChanged(0,0);
    }
  }
);
}","private void fixTitle(){
  if (getItem().getCoverBitmap() != null) {
    fixTitleWidth();
    tvTitel.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
      @Override public void onGlobalLayout(){
        tvTitel.getViewTreeObserver().removeGlobalOnLayoutListener(this);
        if (tvTitel.getLayout().getLineCount() > 1) {
          toolbar.getLayoutParams().height=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,84f,getResources().getDisplayMetrics());
          toolbar.getParent().requestLayout();
        }
      }
    }
);
  }
 else {
    toolbar.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
      @Override public void onGlobalLayout(){
        toolbar.getViewTreeObserver().removeGlobalOnLayoutListener(this);
        if (toolbar.isTitleTruncated()) {
          toolbar.getLayoutParams().height=(int)TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_SP,84f,getResources().getDisplayMetrics());
          TextView titleTextView=findTitleTextView(toolbar);
          titleTextView.setSingleLine(false);
          fixEllipsize(titleTextView);
          toolbar.getParent().requestLayout();
        }
      }
    }
);
  }
  onScrollChanged(0,0);
}"
86257,"protected Document handleLoginForm(Document doc,Account account) throws IOException, OpacErrorException {
  if (doc.select(""String_Node_Str"").size() == 0) {
    return doc;
  }
  doc.select(""String_Node_Str"").val(account.getPassword());
  List<NameValuePair> form=new ArrayList<NameValuePair>();
  for (  Element input : doc.select(""String_Node_Str"")) {
    if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !input.attr(""String_Node_Str"").contains(""String_Node_Str"")&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
      if (input.attr(""String_Node_Str"").equals(""String_Node_Str"") || input.attr(""String_Node_Str"").equals(""String_Node_Str"") || input.attr(""String_Node_Str"").equals(""String_Node_Str"")) {
        input.attr(""String_Node_Str"",account.getName());
      }
      form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
    }
  }
  doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
  if (doc.select(""String_Node_Str"").size() > 0) {
    String msg=doc.select(""String_Node_Str"").text().trim();
    form=new ArrayList<NameValuePair>();
    for (    Element input : doc.select(""String_Node_Str"")) {
      if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
        form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
      }
    }
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
    if (!msg.contains(""String_Node_Str"")) {
      throw new OpacErrorException(msg);
    }
    return doc;
  }
 else {
    return doc;
  }
}","protected Document handleLoginForm(Document doc,Account account) throws IOException, OpacErrorException {
  if (doc.select(""String_Node_Str"").size() == 0) {
    return doc;
  }
  doc.select(""String_Node_Str"").val(account.getPassword());
  List<NameValuePair> form=new ArrayList<NameValuePair>();
  for (  Element input : doc.select(""String_Node_Str"")) {
    if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !input.attr(""String_Node_Str"").contains(""String_Node_Str"")&& !input.attr(""String_Node_Str"").contains(""String_Node_Str"")&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
      if (input.attr(""String_Node_Str"").equals(""String_Node_Str"") || input.attr(""String_Node_Str"").equals(""String_Node_Str"") || input.attr(""String_Node_Str"").equals(""String_Node_Str"")) {
        input.attr(""String_Node_Str"",account.getName());
      }
      form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
    }
  }
  doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
  if (doc.select(""String_Node_Str"").size() > 0) {
    String msg=doc.select(""String_Node_Str"").text().trim();
    form=new ArrayList<NameValuePair>();
    for (    Element input : doc.select(""String_Node_Str"")) {
      if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
        form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
      }
    }
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
    if (!msg.contains(""String_Node_Str"")) {
      throw new OpacErrorException(msg);
    }
    return doc;
  }
 else {
    return doc;
  }
}"
86258,"protected SearchRequestResult parse_search(String html,int page) throws OpacErrorException, NotReachableException {
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").text().trim().startsWith(""String_Node_Str"")) {
      return new SearchRequestResult(new ArrayList<SearchResult>(),0,1,1);
    }
 else     if (!doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"") && !doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
      throw new OpacErrorException(doc.select(""String_Node_Str"").text().trim());
    }
  }
 else   if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
      throw new NotReachableException();
    }
 else {
      throw new OpacErrorException(stringProvider.getFormattedString(StringProvider.UNKNOWN_ERROR_WITH_DESCRIPTION,doc.select(""String_Node_Str"").text().trim()));
    }
  }
 else {
    return null;
  }
  updateRechnr(doc);
  reusehtml=html;
  results_total=-1;
  if (doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
    results_total=200;
  }
 else {
    String resultnumstr=doc.select(""String_Node_Str"").first().text();
    resultnumstr=resultnumstr.substring(0,resultnumstr.indexOf(""String_Node_Str"")).trim();
    results_total=Integer.parseInt(resultnumstr);
  }
  List<SearchResult> results=new ArrayList<SearchResult>();
  Elements tables=doc.select(""String_Node_Str"").first().select(""String_Node_Str"");
  Map<String,Integer> colmap=new HashMap<String,Integer>();
  Element thead=doc.select(""String_Node_Str"").first().select(""String_Node_Str"").first();
  int j=0;
  for (  Element th : thead.select(""String_Node_Str"")) {
    String text=th.text().trim().toLowerCase(Locale.GERMAN);
    if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str"") || text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
    j++;
  }
  if (colmap.size() == 0) {
    colmap.put(""String_Node_Str"",0);
    colmap.put(""String_Node_Str"",1);
    colmap.put(""String_Node_Str"",2);
    colmap.put(""String_Node_Str"",3);
    colmap.put(""String_Node_Str"",4);
    colmap.put(""String_Node_Str"",5);
    colmap.put(""String_Node_Str"",6);
    colmap.put(""String_Node_Str"",7);
    colmap.put(""String_Node_Str"",8);
  }
  for (int i=0; i < tables.size(); i++) {
    Element tr=tables.get(i);
    SearchResult sr=new SearchResult();
    if (tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).select(""String_Node_Str"").size() > 0) {
      String imgUrl=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).select(""String_Node_Str"").first().attr(""String_Node_Str"");
      sr.setCover(imgUrl);
    }
    if (colmap.get(""String_Node_Str"") != null) {
      String mType=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
      if (data.has(""String_Node_Str"")) {
        try {
          sr.setType(MediaType.valueOf(data.getJSONObject(""String_Node_Str"").getString(mType.toLowerCase(Locale.GERMAN))));
        }
 catch (        JSONException e) {
          sr.setType(defaulttypes.get(mType.toLowerCase(Locale.GERMAN)));
        }
catch (        IllegalArgumentException e) {
          sr.setType(defaulttypes.get(mType.toLowerCase(Locale.GERMAN)));
        }
      }
 else {
        sr.setType(defaulttypes.get(mType.toLowerCase(Locale.GERMAN)));
      }
    }
    String title=""String_Node_Str"";
    String additionalInfo=""String_Node_Str"";
    if (colmap.get(""String_Node_Str"") != null) {
      Element info=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str""));
      title=info.select(""String_Node_Str"").text().trim();
      String authorIn=info.text().substring(0,info.text().indexOf(title));
      if (authorIn.contains(""String_Node_Str"")) {
        authorIn=authorIn.replaceFirst(""String_Node_Str"",""String_Node_Str"");
        additionalInfo+=""String_Node_Str"" + authorIn;
      }
    }
 else {
      title=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
      if (title.contains(""String_Node_Str"")) {
        additionalInfo+=title.substring(title.indexOf(""String_Node_Str""));
        title=title.substring(0,title.indexOf(""String_Node_Str"") - 1).trim();
      }
      if (colmap.containsKey(""String_Node_Str"")) {
        String author=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
        additionalInfo+=""String_Node_Str"" + author;
      }
    }
    if (colmap.containsKey(""String_Node_Str"")) {
      String publisher=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
      additionalInfo+=""String_Node_Str"" + publisher;
    }
    if (colmap.containsKey(""String_Node_Str"")) {
      String year=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
      additionalInfo+=""String_Node_Str"" + year + ""String_Node_Str"";
    }
    sr.setInnerhtml(""String_Node_Str"" + title + ""String_Node_Str""+ additionalInfo);
    String status=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    if (status.equals(""String_Node_Str"") || status.toLowerCase(Locale.GERMAN).contains(""String_Node_Str"") || status.contains(""String_Node_Str"")|| status.contains(""String_Node_Str"")|| status.contains(""String_Node_Str"")) {
      sr.setStatus(Status.GREEN);
    }
 else {
      sr.setStatus(Status.RED);
      sr.setInnerhtml(sr.getInnerhtml() + ""String_Node_Str"" + stringProvider.getString(StringProvider.LENT_UNTIL)+ ""String_Node_Str""+ status+ ""String_Node_Str"");
    }
    String link=tr.select(""String_Node_Str"").attr(""String_Node_Str"");
    Map<String,String> params=getQueryParamsFirst(link);
    if (params.containsKey(""String_Node_Str"")) {
      int recno=Integer.valueOf(params.get(""String_Node_Str""));
      sr.setNr(10 * (page - 1) + recno - 1);
    }
 else {
      sr.setNr(10 * (page - 1) + i);
    }
    Elements idLinks=tr.select(""String_Node_Str"");
    if (idLinks.size() > 0) {
      Map<String,String> idParams=getQueryParamsFirst(idLinks.first().attr(""String_Node_Str""));
      String id=idParams.get(""String_Node_Str"");
      sr.setId(id);
    }
 else {
      sr.setId(null);
    }
    results.add(sr);
  }
  resultcount=results.size();
  return new SearchRequestResult(results,results_total,page);
}","protected SearchRequestResult parse_search(String html,int page) throws OpacErrorException, NotReachableException {
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").text().trim().startsWith(""String_Node_Str"")) {
      return new SearchRequestResult(new ArrayList<SearchResult>(),0,1,1);
    }
 else     if (!doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"") && !doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
      throw new OpacErrorException(doc.select(""String_Node_Str"").text().trim());
    }
  }
 else   if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
      throw new NotReachableException();
    }
 else {
      throw new OpacErrorException(stringProvider.getFormattedString(StringProvider.UNKNOWN_ERROR_WITH_DESCRIPTION,doc.select(""String_Node_Str"").text().trim()));
    }
  }
 else {
    return null;
  }
  updateRechnr(doc);
  reusehtml=html;
  results_total=-1;
  if (doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
    results_total=200;
  }
 else {
    String resultnumstr=doc.select(""String_Node_Str"").first().text();
    resultnumstr=resultnumstr.substring(0,resultnumstr.indexOf(""String_Node_Str"")).trim();
    results_total=Integer.parseInt(resultnumstr);
  }
  List<SearchResult> results=new ArrayList<SearchResult>();
  Elements tables=doc.select(""String_Node_Str"").first().select(""String_Node_Str"");
  Map<String,Integer> colmap=new HashMap<String,Integer>();
  Element thead=doc.select(""String_Node_Str"").first().select(""String_Node_Str"").first();
  int j=0;
  for (  Element th : thead.select(""String_Node_Str"")) {
    String text=th.text().trim().toLowerCase(Locale.GERMAN);
    if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str"") || text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
    j++;
  }
  if (colmap.size() == 0) {
    colmap.put(""String_Node_Str"",0);
    colmap.put(""String_Node_Str"",1);
    colmap.put(""String_Node_Str"",2);
    colmap.put(""String_Node_Str"",3);
    colmap.put(""String_Node_Str"",4);
    colmap.put(""String_Node_Str"",5);
    colmap.put(""String_Node_Str"",6);
    colmap.put(""String_Node_Str"",7);
    colmap.put(""String_Node_Str"",8);
  }
  for (int i=0; i < tables.size(); i++) {
    Element tr=tables.get(i);
    SearchResult sr=new SearchResult();
    if (tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).select(""String_Node_Str"").size() > 0) {
      String imgUrl=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).select(""String_Node_Str"").first().attr(""String_Node_Str"");
      sr.setCover(imgUrl);
    }
    if (colmap.get(""String_Node_Str"") != null) {
      String mType=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
      if (data.has(""String_Node_Str"")) {
        try {
          sr.setType(MediaType.valueOf(data.getJSONObject(""String_Node_Str"").getString(mType.toLowerCase(Locale.GERMAN))));
        }
 catch (        JSONException e) {
          sr.setType(defaulttypes.get(mType.toLowerCase(Locale.GERMAN)));
        }
catch (        IllegalArgumentException e) {
          sr.setType(defaulttypes.get(mType.toLowerCase(Locale.GERMAN)));
        }
      }
 else {
        sr.setType(defaulttypes.get(mType.toLowerCase(Locale.GERMAN)));
      }
    }
    String title=""String_Node_Str"";
    String additionalInfo=""String_Node_Str"";
    if (colmap.get(""String_Node_Str"") != null) {
      Element info=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str""));
      title=info.select(""String_Node_Str"").text().trim();
      String authorIn=info.text().substring(0,info.text().indexOf(title));
      if (authorIn.contains(""String_Node_Str"")) {
        authorIn=authorIn.replaceFirst(""String_Node_Str"",""String_Node_Str"");
        additionalInfo+=""String_Node_Str"" + authorIn;
      }
    }
 else {
      title=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
      if (title.contains(""String_Node_Str"")) {
        additionalInfo+=title.substring(title.indexOf(""String_Node_Str""));
        title=title.substring(0,title.indexOf(""String_Node_Str"") - 1).trim();
      }
      if (colmap.containsKey(""String_Node_Str"")) {
        String author=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
        additionalInfo+=""String_Node_Str"" + author;
      }
    }
    if (colmap.containsKey(""String_Node_Str"")) {
      String publisher=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
      additionalInfo+=""String_Node_Str"" + publisher;
    }
    if (colmap.containsKey(""String_Node_Str"")) {
      String year=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
      additionalInfo+=""String_Node_Str"" + year + ""String_Node_Str"";
    }
    sr.setInnerhtml(""String_Node_Str"" + title + ""String_Node_Str""+ additionalInfo);
    String status=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    if (status.equals(""String_Node_Str"") || status.toLowerCase(Locale.GERMAN).contains(""String_Node_Str"") || status.contains(""String_Node_Str"")|| status.contains(""String_Node_Str"")|| status.contains(""String_Node_Str"")) {
      sr.setStatus(Status.GREEN);
    }
 else {
      sr.setStatus(Status.RED);
      sr.setInnerhtml(sr.getInnerhtml() + ""String_Node_Str"" + stringProvider.getString(StringProvider.LENT_UNTIL)+ ""String_Node_Str""+ status+ ""String_Node_Str"");
    }
    String link=tr.select(""String_Node_Str"").attr(""String_Node_Str"");
    Map<String,String> params=getQueryParamsFirst(link);
    if (params.containsKey(""String_Node_Str"")) {
      int recno=Integer.valueOf(params.get(""String_Node_Str""));
      sr.setNr(recno - 1);
    }
 else {
      sr.setNr(10 * (page - 1) + i);
    }
    Elements idLinks=tr.select(""String_Node_Str"");
    if (idLinks.size() > 0) {
      Map<String,String> idParams=getQueryParamsFirst(idLinks.first().attr(""String_Node_Str""));
      String id=idParams.get(""String_Node_Str"");
      sr.setId(id);
    }
 else {
      sr.setId(null);
    }
    results.add(sr);
  }
  resultcount=results.size();
  return new SearchRequestResult(results,results_total,page);
}"
86259,"public void showConnectivityError(){
  ProgressBar progress=(ProgressBar)view.findViewById(R.id.progress);
  final FrameLayout errorView=(FrameLayout)view.findViewById(R.id.error_view);
  errorView.removeAllViews();
  View connError=getActivity().getLayoutInflater().inflate(R.layout.error_connectivity,errorView);
  ((Button)connError.findViewById(R.id.btRetry)).setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      errorView.removeAllViews();
      reload();
    }
  }
);
  progress.startAnimation(AnimationUtils.loadAnimation(getActivity(),android.R.anim.fade_out));
  connError.startAnimation(AnimationUtils.loadAnimation(getActivity(),android.R.anim.fade_in));
  progress.setVisibility(View.GONE);
  connError.setVisibility(View.VISIBLE);
}","public void showConnectivityError(){
  ProgressBar progress=(ProgressBar)view.findViewById(R.id.progress);
  final FrameLayout errorView=(FrameLayout)view.findViewById(R.id.error_view);
  errorView.removeAllViews();
  View connError=getActivity().getLayoutInflater().inflate(R.layout.error_connectivity,errorView);
  ((Button)connError.findViewById(R.id.btRetry)).setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      errorView.removeAllViews();
      reload();
    }
  }
);
  progress.startAnimation(AnimationUtils.loadAnimation(getActivity(),android.R.anim.fade_out));
  scrollView.startAnimation(AnimationUtils.loadAnimation(getActivity(),android.R.anim.fade_out));
  connError.startAnimation(AnimationUtils.loadAnimation(getActivity(),android.R.anim.fade_in));
  progress.setVisibility(View.GONE);
  scrollView.setVisibility(View.GONE);
  connError.setVisibility(View.VISIBLE);
}"
86260,"@Override public void onScrollChanged(int deltaX,int deltaY){
  int scrollY=scrollView.getScrollY();
  ViewHelper.setTranslationY(ivCover,scrollY * 0.5f);
  ViewHelper.setTranslationY(gradientBottom,scrollY * 0.5f);
  ViewHelper.setTranslationY(gradientTop,scrollY * 0.5f);
  ViewHelper.setTranslationY(toolbar,scrollY);
  float minHeight=toolbar.getHeight();
  float progress=Math.min(((float)scrollY) / (ivCover.getHeight() - minHeight),1);
  float scale=1 - progress + 20f / 36f * progress;
  ViewHelper.setPivotX(tvTitel,0);
  ViewHelper.setPivotY(tvTitel,tvTitel.getHeight());
  ViewHelper.setScaleX(tvTitel,scale);
  ViewHelper.setScaleY(tvTitel,scale);
  if (back_button_visible) {
    ViewHelper.setTranslationX(tvTitel,progress * TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,56f,getResources().getDisplayMetrics()));
  }
  ViewHelper.setAlpha(tint,progress);
  if (progress == 1) {
    ViewHelper.setTranslationY(tvTitel,scrollY - ivCover.getHeight() + minHeight);
    if (getResources().getDrawable(R.color.transparent).equals(toolbar.getBackground())) {
      toolbar.setBackgroundDrawable(ivCover.getBackground());
      ViewCompat.setElevation(toolbar,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,4f,getResources().getDisplayMetrics()));
      ViewCompat.setElevation(tvTitel,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,4f,getResources().getDisplayMetrics()));
    }
  }
 else {
    ViewHelper.setTranslationY(tvTitel,0);
    if (ivCover.getBackground().equals(toolbar.getBackground())) {
      toolbar.setBackgroundResource(R.color.transparent);
      ViewCompat.setElevation(toolbar,0);
      ViewCompat.setElevation(tvTitel,0);
    }
  }
}","@Override public void onScrollChanged(int deltaX,int deltaY){
  int scrollY=scrollView.getScrollY();
  ViewHelper.setTranslationY(ivCover,scrollY * 0.5f);
  ViewHelper.setTranslationY(gradientBottom,scrollY * 0.5f);
  ViewHelper.setTranslationY(gradientTop,scrollY * 0.5f);
  ViewHelper.setTranslationY(toolbar,scrollY);
  float minHeight=toolbar.getHeight();
  float progress=Math.min(((float)scrollY) / (ivCover.getHeight() - minHeight),1);
  float scale=1 - progress + 20f / 36f * progress;
  ViewHelper.setPivotX(tvTitel,0);
  ViewHelper.setPivotY(tvTitel,tvTitel.getHeight());
  ViewHelper.setScaleX(tvTitel,scale);
  ViewHelper.setScaleY(tvTitel,scale);
  if (back_button_visible) {
    ViewHelper.setTranslationX(tvTitel,progress * TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,56f,getResources().getDisplayMetrics()));
  }
  ViewHelper.setAlpha(tint,progress);
  if (progress == 1) {
    ViewHelper.setTranslationY(tvTitel,scrollY - ivCover.getHeight() + minHeight);
    if (!ivCover.getBackground().equals(toolbar.getBackground())) {
      toolbar.setBackgroundDrawable(ivCover.getBackground());
      ViewCompat.setElevation(toolbar,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,4f,getResources().getDisplayMetrics()));
      ViewCompat.setElevation(tvTitel,TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP,4f,getResources().getDisplayMetrics()));
    }
  }
 else {
    ViewHelper.setTranslationY(tvTitel,0);
    if (ivCover.getBackground().equals(toolbar.getBackground())) {
      toolbar.setBackgroundResource(R.color.transparent);
      ViewCompat.setElevation(toolbar,0);
      ViewCompat.setElevation(tvTitel,0);
    }
  }
}"
86261,"@Override public void onCreate(Bundle savedInstanceState){
  supportRequestWindowFeature(android.view.Window.FEATURE_INDETERMINATE_PROGRESS);
  super.onCreate(savedInstanceState);
  setContentView(getContentView());
  app=(OpacClient)getApplication();
  aData=new AccountDataSource(this);
  toolbar=(Toolbar)findViewById(R.id.toolbar);
  if (toolbar != null)   setSupportActionBar(toolbar);
  fab=(FloatingActionButton)findViewById(R.id.search_fab);
  setupDrawer();
  if (savedInstanceState != null) {
    setTwoPane(savedInstanceState.getBoolean(""String_Node_Str""));
    setFabVisible(savedInstanceState.getBoolean(""String_Node_Str""));
    if (savedInstanceState.containsKey(""String_Node_Str"")) {
      setTitle(savedInstanceState.getCharSequence(""String_Node_Str""));
    }
    if (savedInstanceState.containsKey(""String_Node_Str"")) {
      fragment=(Fragment)getSupportFragmentManager().getFragment(savedInstanceState,""String_Node_Str"");
      getSupportFragmentManager().beginTransaction().replace(R.id.content_frame,fragment).commit();
    }
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  supportRequestWindowFeature(android.view.Window.FEATURE_INDETERMINATE_PROGRESS);
  super.onCreate(savedInstanceState);
  setContentView(getContentView());
  app=(OpacClient)getApplication();
  aData=new AccountDataSource(this);
  toolbar=(Toolbar)findViewById(R.id.toolbar);
  if (toolbar != null)   setSupportActionBar(toolbar);
  fab=(FloatingActionButton)findViewById(R.id.search_fab);
  setupDrawer();
  if (savedInstanceState != null) {
    setTwoPane(savedInstanceState.getBoolean(""String_Node_Str""));
    setFabVisible(savedInstanceState.getBoolean(""String_Node_Str""));
    selectedItemTag=savedInstanceState.getString(""String_Node_Str"");
    setFabOnClickListener(selectedItemTag);
    if (savedInstanceState.containsKey(""String_Node_Str"")) {
      setTitle(savedInstanceState.getCharSequence(""String_Node_Str""));
    }
    if (savedInstanceState.containsKey(""String_Node_Str"")) {
      fragment=(Fragment)getSupportFragmentManager().getFragment(savedInstanceState,""String_Node_Str"");
      getSupportFragmentManager().beginTransaction().replace(R.id.content_frame,fragment).commit();
    }
  }
}"
86262,"/** 
 * Swaps fragments in the main content view 
 */
@SuppressLint(""String_Node_Str"") protected void selectItem(int position){
  try {
    setSupportProgressBarIndeterminateVisibility(false);
  }
 catch (  Exception e) {
  }
  Item item=navAdapter.getItem(position);
  if (item.type == Item.TYPE_SEPARATOR) {
    return;
  }
 else   if (item.type == Item.TYPE_TEXT) {
    if (item.tag.equals(""String_Node_Str"")) {
      fragment=new SearchFragment();
      setTwoPane(false);
      setFabVisible(true,new View.OnClickListener(){
        @Override public void onClick(        View v){
          ActivityOptionsCompat options=ActivityOptionsCompat.makeScaleUpAnimation(v,Math.round(v.getX()),Math.round(v.getY()),v.getWidth(),v.getHeight());
          ((SearchFragment)fragment).go(options.toBundle());
        }
      }
);
    }
 else     if (item.tag.equals(""String_Node_Str"")) {
      fragment=new AccountFragment();
      setTwoPane(false);
      setFabVisible(false);
    }
 else     if (item.tag.equals(""String_Node_Str"")) {
      fragment=new StarredFragment();
      setTwoPane(true);
      setFabVisible(false);
    }
 else     if (item.tag.equals(""String_Node_Str"")) {
      fragment=new InfoFragment();
      setTwoPane(false);
      setFabVisible(false);
    }
 else     if (item.tag.equals(""String_Node_Str"")) {
      Intent intent=new Intent(this,MainPreferenceActivity.class);
      startActivity(intent);
      drawerList.setItemChecked(position,false);
      return;
    }
 else     if (item.tag.equals(""String_Node_Str"")) {
      Intent intent=new Intent(this,AboutActivity.class);
      startActivity(intent);
      drawerList.setItemChecked(position,false);
      return;
    }
    FragmentManager fragmentManager=getSupportFragmentManager();
    fragmentManager.beginTransaction().replace(R.id.content_frame,fragment).commit();
    deselectItemsByType(Item.TYPE_TEXT);
    drawerList.setItemChecked(selectedItemPos,false);
    drawerList.setItemChecked(position,true);
    selectedItemPos=position;
    setTitle(navAdapter.getItem(position).text);
    drawerLayout.closeDrawer(drawer);
  }
 else   if (item.type == Item.TYPE_ACCOUNT) {
    deselectItemsByType(Item.TYPE_ACCOUNT);
    drawerList.setItemChecked(position,true);
    selectaccount(item.accountId);
    drawerLayout.closeDrawer(drawer);
    return;
  }
}","/** 
 * Swaps fragments in the main content view 
 */
@SuppressLint(""String_Node_Str"") protected void selectItem(int position){
  try {
    setSupportProgressBarIndeterminateVisibility(false);
  }
 catch (  Exception e) {
  }
  Item item=navAdapter.getItem(position);
  if (item.type == Item.TYPE_SEPARATOR) {
    return;
  }
 else   if (item.type == Item.TYPE_TEXT) {
    if (item.tag.equals(""String_Node_Str"")) {
      fragment=new SearchFragment();
      setTwoPane(false);
      setFabVisible(true);
    }
 else     if (item.tag.equals(""String_Node_Str"")) {
      fragment=new AccountFragment();
      setTwoPane(false);
      setFabVisible(false);
    }
 else     if (item.tag.equals(""String_Node_Str"")) {
      fragment=new StarredFragment();
      setTwoPane(true);
      setFabVisible(false);
    }
 else     if (item.tag.equals(""String_Node_Str"")) {
      fragment=new InfoFragment();
      setTwoPane(false);
      setFabVisible(false);
    }
 else     if (item.tag.equals(""String_Node_Str"")) {
      Intent intent=new Intent(this,MainPreferenceActivity.class);
      startActivity(intent);
      drawerList.setItemChecked(position,false);
      return;
    }
 else     if (item.tag.equals(""String_Node_Str"")) {
      Intent intent=new Intent(this,AboutActivity.class);
      startActivity(intent);
      drawerList.setItemChecked(position,false);
      return;
    }
    setFabOnClickListener(item.tag);
    FragmentManager fragmentManager=getSupportFragmentManager();
    fragmentManager.beginTransaction().replace(R.id.content_frame,fragment).commit();
    deselectItemsByType(Item.TYPE_TEXT);
    drawerList.setItemChecked(selectedItemPos,false);
    drawerList.setItemChecked(position,true);
    selectedItemPos=position;
    selectedItemTag=item.tag;
    setTitle(navAdapter.getItem(position).text);
    drawerLayout.closeDrawer(drawer);
  }
 else   if (item.type == Item.TYPE_ACCOUNT) {
    deselectItemsByType(Item.TYPE_ACCOUNT);
    drawerList.setItemChecked(position,true);
    selectaccount(item.accountId);
    drawerLayout.closeDrawer(drawer);
    return;
  }
}"
86263,"@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putBoolean(""String_Node_Str"",twoPane);
  outState.putBoolean(""String_Node_Str"",fabVisible);
  if (fragment != null)   getSupportFragmentManager().putFragment(outState,""String_Node_Str"",fragment);
  if (mTitle != null)   outState.putCharSequence(""String_Node_Str"",mTitle);
}","@Override public void onSaveInstanceState(Bundle outState){
  super.onSaveInstanceState(outState);
  outState.putBoolean(""String_Node_Str"",twoPane);
  outState.putBoolean(""String_Node_Str"",fabVisible);
  outState.putString(""String_Node_Str"",selectedItemTag);
  if (fragment != null)   getSupportFragmentManager().putFragment(outState,""String_Node_Str"",fragment);
  if (mTitle != null)   outState.putCharSequence(""String_Node_Str"",mTitle);
}"
86264,"protected void setFabVisible(boolean visible,View.OnClickListener onClickListener){
  fabVisible=visible;
  if (isTablet()) {
    fab.setVisibility(visible ? View.VISIBLE : View.GONE);
    if (visible) {
      fab.setOnClickListener(onClickListener);
      DisplayMetrics displayMetrics=getResources().getDisplayMetrics();
      float density=getResources().getDisplayMetrics().density;
      float dpWidth=displayMetrics.widthPixels / density;
      RelativeLayout.LayoutParams params=new RelativeLayout.LayoutParams(Math.round(72 * density),Math.round(72 * density));
      if (dpWidth >= 864) {
        params.addRule(RelativeLayout.BELOW,R.id.toolbar);
        params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
        params.setMargins(0,Math.round(-36 * density),Math.round(36 * density),0);
        ViewCompat.setElevation(fab,4 * density);
      }
 else {
        params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
        params.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
        params.setMargins(0,0,Math.round(36 * density),Math.round(36 * density));
        ViewCompat.setElevation(fab,12 * density);
      }
      fab.setLayoutParams(params);
    }
 else {
      fab.setOnClickListener(null);
    }
  }
}","protected void setFabVisible(boolean visible){
  fabVisible=visible;
  if (isTablet()) {
    fab.setVisibility(visible ? View.VISIBLE : View.GONE);
    if (visible) {
      DisplayMetrics displayMetrics=getResources().getDisplayMetrics();
      float density=getResources().getDisplayMetrics().density;
      float dpWidth=displayMetrics.widthPixels / density;
      RelativeLayout.LayoutParams params=new RelativeLayout.LayoutParams(Math.round(72 * density),Math.round(72 * density));
      if (dpWidth >= 864) {
        params.addRule(RelativeLayout.BELOW,R.id.toolbar);
        params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
        params.setMargins(0,Math.round(-36 * density),Math.round(36 * density),0);
        ViewCompat.setElevation(fab,4 * density);
      }
 else {
        params.addRule(RelativeLayout.ALIGN_PARENT_RIGHT);
        params.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
        params.setMargins(0,0,Math.round(36 * density),Math.round(36 * density));
        ViewCompat.setElevation(fab,12 * density);
      }
      fab.setLayoutParams(params);
    }
  }
}"
86265,"@Override public ReservationResult reservation(DetailledItem item,Account acc,int useraction,String selection) throws IOException {
  String reservation_info=item.getReservation_info();
  String branch_inputfield=""String_Node_Str"";
  Document doc=null;
  if (useraction == MultiStepResult.ACTION_CONFIRMATION) {
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
    return new ReservationResult(MultiStepResult.Status.OK);
  }
 else   if (selection == null || useraction == 0) {
    String html=httpGet(opac_url + ""String_Node_Str"" + reservation_info,getDefaultEncoding());
    doc=Jsoup.parse(html);
    if (doc.select(""String_Node_Str"").size() > 0) {
      List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getName()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getPassword()));
      if (data.has(""String_Node_Str"")) {
        try {
          nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",data.getString(""String_Node_Str"")));
        }
 catch (        JSONException e) {
          e.printStackTrace();
        }
      }
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",doc.select(""String_Node_Str"").val()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
      doc=Jsoup.parse(html);
    }
    if (doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").size() == 0) {
      if (doc.select(""String_Node_Str"").size() > 0) {
        branch_inputfield=""String_Node_Str"";
      }
    }
    if (doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").size() > 0) {
      List<Map<String,String>> branches=new ArrayList<Map<String,String>>();
      for (      Element option : doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").first().children()) {
        String value=option.text().trim();
        String key;
        if (option.hasAttr(""String_Node_Str"")) {
          key=option.attr(""String_Node_Str"");
        }
 else {
          key=value;
        }
        Map<String,String> selopt=new HashMap<String,String>();
        selopt.put(""String_Node_Str"",key);
        selopt.put(""String_Node_Str"",value);
        branches.add(selopt);
      }
      ReservationResult result=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED);
      result.setActionIdentifier(ReservationResult.ACTION_BRANCH);
      result.setSelection(branches);
      return result;
    }
  }
 else   if (useraction == ReservationResult.ACTION_BRANCH) {
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
    nameValuePairs.add(new BasicNameValuePair(branch_inputfield,selection));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    String html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
    doc=Jsoup.parse(html);
  }
  if (doc == null)   return new ReservationResult(MultiStepResult.Status.ERROR);
  if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").attr(""String_Node_Str"").equals(""String_Node_Str"")) {
      List<String[]> details=new ArrayList<String[]>();
      if (doc.getElementsByClass(""String_Node_Str"").size() == 1) {
        details.add(new String[]{doc.getElementsByClass(""String_Node_Str"").get(0).text().trim()});
      }
      Pattern p=Pattern.compile(""String_Node_Str"",Pattern.MULTILINE);
      for (      Element div : doc.select(""String_Node_Str"")) {
        for (        String text : Jsoup.parse(div.html().replaceAll(""String_Node_Str"",""String_Node_Str"")).text().split(""String_Node_Str"")) {
          if (p.matcher(text).find() && !text.contains(""String_Node_Str"") && text.contains(""String_Node_Str"")) {
            details.add(new String[]{text.trim()});
          }
        }
      }
      for (      Element row : doc.select(""String_Node_Str"")) {
        if (row.select(""String_Node_Str"").size() == 1 && row.select(""String_Node_Str"").size() == 1) {
          details.add(new String[]{row.select(""String_Node_Str"").text().trim(),row.select(""String_Node_Str"").text().trim()});
        }
      }
      ReservationResult result=new ReservationResult(MultiStepResult.Status.CONFIRMATION_NEEDED);
      result.setDetails(details);
      return result;
    }
  }
  if (doc.getElementsByClass(""String_Node_Str"").size() == 1) {
    return new ReservationResult(MultiStepResult.Status.ERROR,doc.getElementsByClass(""String_Node_Str"").get(0).text());
  }
  return new ReservationResult(MultiStepResult.Status.ERROR,stringProvider.getString(StringProvider.UNKNOWN_ERROR));
}","@Override public ReservationResult reservation(DetailledItem item,Account acc,int useraction,String selection) throws IOException {
  String reservation_info=item.getReservation_info();
  Document doc=null;
  if (useraction == MultiStepResult.ACTION_CONFIRMATION) {
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
    return new ReservationResult(MultiStepResult.Status.OK);
  }
 else   if (selection == null || useraction == 0) {
    String html=httpGet(opac_url + ""String_Node_Str"" + reservation_info,getDefaultEncoding());
    doc=Jsoup.parse(html);
    if (doc.select(""String_Node_Str"").size() > 0) {
      List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getName()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getPassword()));
      if (data.has(""String_Node_Str"")) {
        try {
          nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",data.getString(""String_Node_Str"")));
        }
 catch (        JSONException e) {
          e.printStackTrace();
        }
      }
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",doc.select(""String_Node_Str"").val()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
      doc=Jsoup.parse(html);
    }
    if (doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").size() == 0) {
      if (doc.select(""String_Node_Str"").size() > 0) {
        branch_inputfield=""String_Node_Str"";
      }
    }
    if (doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").size() > 0) {
      List<Map<String,String>> branches=new ArrayList<Map<String,String>>();
      for (      Element option : doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").first().children()) {
        String value=option.text().trim();
        String key;
        if (option.hasAttr(""String_Node_Str"")) {
          key=option.attr(""String_Node_Str"");
        }
 else {
          key=value;
        }
        Map<String,String> selopt=new HashMap<String,String>();
        selopt.put(""String_Node_Str"",key);
        selopt.put(""String_Node_Str"",value);
        branches.add(selopt);
      }
      _res_target=doc.select(""String_Node_Str"").attr(""String_Node_Str"");
      ReservationResult result=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED);
      result.setActionIdentifier(ReservationResult.ACTION_BRANCH);
      result.setSelection(branches);
      return result;
    }
  }
 else   if (useraction == ReservationResult.ACTION_BRANCH) {
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
    nameValuePairs.add(new BasicNameValuePair(branch_inputfield,selection));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",_res_target));
    String html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
    doc=Jsoup.parse(html);
  }
  if (doc == null)   return new ReservationResult(MultiStepResult.Status.ERROR);
  if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").attr(""String_Node_Str"").equals(""String_Node_Str"")) {
      List<String[]> details=new ArrayList<String[]>();
      if (doc.getElementsByClass(""String_Node_Str"").size() == 1) {
        details.add(new String[]{doc.getElementsByClass(""String_Node_Str"").get(0).text().trim()});
      }
      Pattern p=Pattern.compile(""String_Node_Str"",Pattern.MULTILINE);
      for (      Element div : doc.select(""String_Node_Str"")) {
        for (        String text : Jsoup.parse(div.html().replaceAll(""String_Node_Str"",""String_Node_Str"")).text().split(""String_Node_Str"")) {
          if (p.matcher(text).find() && !text.contains(""String_Node_Str"") && text.contains(""String_Node_Str"")) {
            details.add(new String[]{text.trim()});
          }
        }
      }
      for (      Element row : doc.select(""String_Node_Str"")) {
        if (row.select(""String_Node_Str"").size() == 1 && row.select(""String_Node_Str"").size() == 1) {
          details.add(new String[]{row.select(""String_Node_Str"").text().trim(),row.select(""String_Node_Str"").text().trim()});
        }
      }
      ReservationResult result=new ReservationResult(MultiStepResult.Status.CONFIRMATION_NEEDED);
      result.setDetails(details);
      return result;
    }
  }
  if (doc.getElementsByClass(""String_Node_Str"").size() == 1) {
    return new ReservationResult(MultiStepResult.Status.ERROR,doc.getElementsByClass(""String_Node_Str"").get(0).text());
  }
  return new ReservationResult(MultiStepResult.Status.ERROR,stringProvider.getString(StringProvider.UNKNOWN_ERROR));
}"
86266,"@Override protected Exception doInBackground(Account... params){
  try {
    OpacApi api=((OpacClient)getApplication()).getNewApi(lib);
    api.checkAccountData(account);
  }
 catch (  IOException e) {
    return e;
  }
catch (  JSONException e) {
    return e;
  }
catch (  OpacErrorException e) {
    return e;
  }
  return null;
}","@Override protected Exception doInBackground(Account... params){
  try {
    OpacApi api=((OpacClient)getApplication()).getNewApi(lib);
    api.start();
    api.checkAccountData(account);
  }
 catch (  IOException e) {
    return e;
  }
catch (  JSONException e) {
    return e;
  }
catch (  OpacErrorException e) {
    return e;
  }
  return null;
}"
86267,"@Override public ReservationResult reservation(DetailledItem item,Account account,int useraction,String selection) throws IOException {
  String resinfo=item.getReservation_info();
  if (selection == null) {
    String func=m_opac_dir.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
    String id=m_opac_dir.equals(""String_Node_Str"") ? (resinfo.contains(""String_Node_Str"") ? resinfo.substring(5) + ""String_Node_Str"" + resinfo : resinfo + ""String_Node_Str"" + resinfo) : ""String_Node_Str"" + resinfo;
    String html=httpGet(m_opac_url + ""String_Node_Str"" + m_opac_dir+ ""String_Node_Str""+ func+ ""String_Node_Str""+ id,getDefaultEncoding());
    Document doc=Jsoup.parse(html);
    Elements optionsElements=doc.select(""String_Node_Str"");
    if (optionsElements.size() > 0) {
      Map<String,String> options=new HashMap<String,String>();
      for (      Element option : optionsElements) {
        options.put(option.attr(""String_Node_Str"") + ""String_Node_Str"" + option.text(),option.text());
      }
      if (options.size() > 1) {
        ReservationResult res=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED);
        res.setActionIdentifier(ReservationResult.ACTION_BRANCH);
        res.setSelection(options);
        return res;
      }
 else {
        return reservation(item,account,useraction,options.keySet().iterator().next());
      }
    }
 else {
      ReservationResult res=new ReservationResult(MultiStepResult.Status.ERROR);
      res.setMessage(""String_Node_Str"");
      return res;
    }
  }
 else {
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>();
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getPassword()));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    if (m_opac_dir.equals(""String_Node_Str""))     nameValuePairs.add(new BasicNameValuePair(resinfo.replace(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"" + resinfo.replace(""String_Node_Str"",""String_Node_Str"")));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",selection.split(""String_Node_Str"")[1]));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",selection.split(""String_Node_Str"")[0]));
    String html=httpPost(m_opac_url + ""String_Node_Str"" + m_opac_dir+ ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
    Document doc=Jsoup.parse(html);
    if (doc.select(""String_Node_Str"").text().contains(""String_Node_Str"")) {
      return new ReservationResult(MultiStepResult.Status.OK);
    }
 else {
      ReservationResult res=new ReservationResult(MultiStepResult.Status.ERROR);
      if (doc.select(""String_Node_Str"").size() > 0)       res.setMessage(doc.select(""String_Node_Str"").text());
      return res;
    }
  }
}","@Override public ReservationResult reservation(DetailledItem item,Account account,int useraction,String selection) throws IOException {
  String resinfo=item.getReservation_info();
  if (selection == null) {
    String func=m_opac_dir.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"";
    String id=m_opac_dir.equals(""String_Node_Str"") ? (resinfo.contains(""String_Node_Str"") ? resinfo.substring(5) + ""String_Node_Str"" + resinfo : resinfo + ""String_Node_Str"" + resinfo) : ""String_Node_Str"" + resinfo;
    String html=httpGet(m_opac_url + ""String_Node_Str"" + m_opac_dir+ ""String_Node_Str""+ func+ ""String_Node_Str""+ id,getDefaultEncoding());
    Document doc=Jsoup.parse(html);
    newStyleReservations=doc.select(""String_Node_Str"" + resinfo.replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"").val().length() > 4;
    Elements optionsElements=doc.select(""String_Node_Str"");
    if (optionsElements.size() > 0) {
      Map<String,String> options=new HashMap<String,String>();
      for (      Element option : optionsElements) {
        if (""String_Node_Str"".equals(option.attr(""String_Node_Str"")))         continue;
        options.put(option.attr(""String_Node_Str"") + ""String_Node_Str"" + option.text(),option.text());
      }
      if (options.size() > 1) {
        ReservationResult res=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED);
        res.setActionIdentifier(ReservationResult.ACTION_BRANCH);
        res.setSelection(options);
        return res;
      }
 else {
        return reservation(item,account,useraction,options.keySet().iterator().next());
      }
    }
 else {
      ReservationResult res=new ReservationResult(MultiStepResult.Status.ERROR);
      res.setMessage(""String_Node_Str"");
      return res;
    }
  }
 else {
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>();
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",account.getPassword()));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    if (m_opac_dir.equals(""String_Node_Str""))     nameValuePairs.add(new BasicNameValuePair(resinfo.replace(""String_Node_Str"",""String_Node_Str""),""String_Node_Str"" + (newStyleReservations ? resinfo.replace(""String_Node_Str"",""String_Node_Str"") : ""String_Node_Str"")));
    if (newStyleReservations)     nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",selection.split(""String_Node_Str"")[1]));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",selection.split(""String_Node_Str"")[0]));
    String html=httpPost(m_opac_url + ""String_Node_Str"" + m_opac_dir+ ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
    Document doc=Jsoup.parse(html);
    if (doc.select(""String_Node_Str"").text().contains(""String_Node_Str"")) {
      return new ReservationResult(MultiStepResult.Status.OK);
    }
 else {
      ReservationResult res=new ReservationResult(MultiStepResult.Status.ERROR);
      if (doc.select(""String_Node_Str"").size() > 0)       res.setMessage(doc.select(""String_Node_Str"").text());
      return res;
    }
  }
}"
86268,"@Override public void onResume(){
  super.onResume();
  accountSelected(account);
}","@Override public void onResume(){
  super.onResume();
  account=app.getAccount();
  accountSelected(account);
}"
86269,"protected void parse_reslist(List<Map<String,String>> medien,Document doc,int offset) throws ClientProtocolException, IOException {
  Elements copytrs=doc.select(""String_Node_Str"").first().select(""String_Node_Str"");
  doc.setBaseUri(opac_url);
  int trs=copytrs.size();
  if (trs < 2)   return;
  assert(trs > 0);
  for (int i=1; i < trs; i++) {
    Element tr=copytrs.get(i);
    Map<String,String> e=new HashMap<String,String>();
    e.put(AccountData.KEY_RESERVATION_TITLE,tr.child(0).text().trim().replace(""String_Node_Str"",""String_Node_Str""));
    e.put(AccountData.KEY_RESERVATION_AUTHOR,tr.child(1).text().trim().replace(""String_Node_Str"",""String_Node_Str""));
    e.put(AccountData.KEY_RESERVATION_READY,tr.child(4).text().trim().replace(""String_Node_Str"",""String_Node_Str""));
    e.put(AccountData.KEY_RESERVATION_CANCEL,tr.select(""String_Node_Str"").last().attr(""String_Node_Str""));
    medien.add(e);
  }
  assert(medien.size() == trs - 1);
}","protected void parse_reslist(List<Map<String,String>> medien,Document doc,int offset) throws ClientProtocolException, IOException {
  Elements copytrs=doc.select(""String_Node_Str"").first().select(""String_Node_Str"");
  doc.setBaseUri(opac_url);
  int trs=copytrs.size();
  if (trs < 2)   return;
  assert(trs > 0);
  for (int i=1; i < trs; i++) {
    Element tr=copytrs.get(i);
    Map<String,String> e=new HashMap<String,String>();
    e.put(AccountData.KEY_RESERVATION_TITLE,tr.child(0).text().trim().replace(""String_Node_Str"",""String_Node_Str""));
    e.put(AccountData.KEY_RESERVATION_AUTHOR,tr.child(1).text().trim().replace(""String_Node_Str"",""String_Node_Str""));
    e.put(AccountData.KEY_RESERVATION_READY,tr.child(4).text().trim().replace(""String_Node_Str"",""String_Node_Str""));
    if (tr.select(""String_Node_Str"").size() > 0)     e.put(AccountData.KEY_RESERVATION_CANCEL,tr.select(""String_Node_Str"").last().attr(""String_Node_Str""));
    medien.add(e);
  }
  assert(medien.size() == trs - 1);
}"
86270,"@Override public ReservationResult reservation(DetailledItem item,Account account,int useraction,String selection) throws IOException {
  Document doc;
  List<NameValuePair> nvpairs;
  ReservationResult res=null;
  if (selection != null && selection.equals(""String_Node_Str""))   selection=null;
  if (s_pageform == null)   return new ReservationResult(Status.ERROR);
  nvpairs=s_pageform;
  int i=0;
  List<Integer> indexes=new ArrayList<Integer>();
  for (  NameValuePair np : nvpairs) {
    if (np.getName().contains(""String_Node_Str"") || np.getName().contains(""String_Node_Str"")) {
      indexes.add(i);
    }
    i++;
  }
  for (int j=indexes.size() - 1; j >= 0; j--) {
    nvpairs.remove((int)indexes.get(j));
  }
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str"" + item.getReservation_info()));
  doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs);
  doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs);
  List<NameValuePair> form=new ArrayList<NameValuePair>();
  for (  Element input : doc.select(""String_Node_Str"")) {
    if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) || input.val().contains(""String_Node_Str"") || input.val().contains(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
      form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
    }
  }
  doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
  if (doc.select(""String_Node_Str"").size() > 0) {
    String msg=doc.select(""String_Node_Str"").text().trim();
    res=new ReservationResult(MultiStepResult.Status.ERROR,msg);
    form=new ArrayList<NameValuePair>();
    for (    Element input : doc.select(""String_Node_Str"")) {
      if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
        form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
      }
    }
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
  }
 else {
    try {
      doc=handleLoginForm(doc,account);
    }
 catch (    OpacErrorException e1) {
      return new ReservationResult(MultiStepResult.Status.ERROR,e1.getMessage());
    }
    if (useraction == 0 && selection == null && doc.select(""String_Node_Str"").size() == 0) {
      res=new ReservationResult(MultiStepResult.Status.CONFIRMATION_NEEDED);
      List<String[]> details=new ArrayList<String[]>();
      details.add(new String[]{doc.select(""String_Node_Str"").text()});
      res.setDetails(details);
    }
 else     if (doc.select(""String_Node_Str"").size() > 0 && selection == null) {
      Map<String,String> sel=new HashMap<String,String>();
      for (      Element opt : doc.select(""String_Node_Str"")) {
        if (opt.text().trim().length() > 0)         sel.put(opt.val(),opt.text());
      }
      res=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED,doc.select(""String_Node_Str"").text());
      res.setSelection(sel);
    }
 else     if (selection != null || doc.select(""String_Node_Str"").size() == 0) {
      if (doc.select(""String_Node_Str"").size() > 0) {
        doc.select(""String_Node_Str"").attr(""String_Node_Str"",selection);
      }
      form=new ArrayList<NameValuePair>();
      for (      Element input : doc.select(""String_Node_Str"")) {
        if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
          form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
        }
      }
      form.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      res=new ReservationResult(MultiStepResult.Status.OK);
      doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
      if (doc.select(""String_Node_Str"").size() > 0) {
        String msg=doc.select(""String_Node_Str"").text().trim();
        form=new ArrayList<NameValuePair>();
        for (        Element input : doc.select(""String_Node_Str"")) {
          if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
            form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
          }
        }
        doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
        if (!msg.contains(""String_Node_Str"")) {
          res=new ReservationResult(MultiStepResult.Status.ERROR,msg);
        }
 else {
          res=new ReservationResult(MultiStepResult.Status.OK,msg);
        }
      }
 else       if (doc.select(""String_Node_Str"").text().contains(""String_Node_Str"")) {
        String msg=doc.select(""String_Node_Str"").text().trim();
        form=new ArrayList<NameValuePair>();
        for (        Element input : doc.select(""String_Node_Str"")) {
          if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
            form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
          }
        }
        doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
        if (!msg.contains(""String_Node_Str"")) {
          res=new ReservationResult(MultiStepResult.Status.ERROR,msg);
        }
 else {
          res=new ReservationResult(MultiStepResult.Status.OK,msg);
        }
      }
    }
  }
  if (res == null || res.getStatus() == MultiStepResult.Status.SELECTION_NEEDED || res.getStatus() == MultiStepResult.Status.CONFIRMATION_NEEDED) {
    form=new ArrayList<NameValuePair>();
    for (    Element input : doc.select(""String_Node_Str"")) {
      if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
        form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
      }
    }
    form.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
  }
  s_pageform=new ArrayList<NameValuePair>();
  for (  Element input : doc.select(""String_Node_Str"")) {
    if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
      s_pageform.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
    }
  }
  try {
    nvpairs=s_pageform;
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    parse_search(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
    nvpairs=s_pageform;
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    parse_search(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
  }
 catch (  OpacErrorException e) {
    e.printStackTrace();
  }
  return res;
}","@Override public ReservationResult reservation(DetailledItem item,Account account,int useraction,String selection) throws IOException {
  Document doc;
  List<NameValuePair> nvpairs;
  ReservationResult res=null;
  if (selection != null && selection.equals(""String_Node_Str""))   selection=null;
  if (s_pageform == null)   return new ReservationResult(Status.ERROR);
  nvpairs=s_pageform;
  int i=0;
  List<Integer> indexes=new ArrayList<Integer>();
  for (  NameValuePair np : nvpairs) {
    if (np.getName().contains(""String_Node_Str"") || np.getName().contains(""String_Node_Str"")) {
      indexes.add(i);
    }
    i++;
  }
  for (int j=indexes.size() - 1; j >= 0; j--) {
    nvpairs.remove((int)indexes.get(j));
  }
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str"" + item.getReservation_info()));
  doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs);
  doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs);
  List<NameValuePair> form=new ArrayList<NameValuePair>();
  for (  Element input : doc.select(""String_Node_Str"")) {
    if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) || input.val().contains(""String_Node_Str"") || input.val().contains(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
      form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
    }
  }
  doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
  if (doc.select(""String_Node_Str"").size() > 0) {
    String msg=doc.select(""String_Node_Str"").text().trim();
    res=new ReservationResult(MultiStepResult.Status.ERROR,msg);
    form=new ArrayList<NameValuePair>();
    for (    Element input : doc.select(""String_Node_Str"")) {
      if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
        form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
      }
    }
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
  }
 else {
    try {
      doc=handleLoginForm(doc,account);
    }
 catch (    OpacErrorException e1) {
      return new ReservationResult(MultiStepResult.Status.ERROR,e1.getMessage());
    }
    if (useraction == 0 && selection == null && doc.select(""String_Node_Str"").size() == 0) {
      res=new ReservationResult(MultiStepResult.Status.CONFIRMATION_NEEDED);
      List<String[]> details=new ArrayList<String[]>();
      details.add(new String[]{doc.select(""String_Node_Str"").text()});
      res.setDetails(details);
    }
 else     if (doc.select(""String_Node_Str"").size() > 0 && selection == null) {
      Map<String,String> sel=new HashMap<String,String>();
      for (      Element opt : doc.select(""String_Node_Str"")) {
        if (opt.text().trim().length() > 0)         sel.put(opt.val(),opt.text());
      }
      res=new ReservationResult(MultiStepResult.Status.SELECTION_NEEDED,doc.select(""String_Node_Str"").text());
      res.setSelection(sel);
    }
 else     if (selection != null || doc.select(""String_Node_Str"").size() == 0) {
      if (doc.select(""String_Node_Str"").size() > 0) {
        doc.select(""String_Node_Str"").attr(""String_Node_Str"",selection);
      }
      if (doc.select(""String_Node_Str"").size() > 0) {
        String msg=doc.select(""String_Node_Str"").text().trim();
        form=new ArrayList<NameValuePair>();
        for (        Element input : doc.select(""String_Node_Str"")) {
          if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
            form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
          }
        }
        doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
        if (!msg.contains(""String_Node_Str"")) {
          res=new ReservationResult(MultiStepResult.Status.ERROR,msg);
        }
 else {
          res=new ReservationResult(MultiStepResult.Status.OK,msg);
        }
      }
 else {
        form=new ArrayList<NameValuePair>();
        for (        Element input : doc.select(""String_Node_Str"")) {
          if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
            form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
          }
        }
        form.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
        res=new ReservationResult(MultiStepResult.Status.OK);
        doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
        if (doc.select(""String_Node_Str"").size() > 0) {
          String msg=doc.select(""String_Node_Str"").text().trim();
          form=new ArrayList<NameValuePair>();
          for (          Element input : doc.select(""String_Node_Str"")) {
            if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
              form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
            }
          }
          doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
          if (!msg.contains(""String_Node_Str"")) {
            res=new ReservationResult(MultiStepResult.Status.ERROR,msg);
          }
 else {
            res=new ReservationResult(MultiStepResult.Status.OK,msg);
          }
        }
 else         if (doc.select(""String_Node_Str"").text().contains(""String_Node_Str"")) {
          String msg=doc.select(""String_Node_Str"").text().trim();
          form=new ArrayList<NameValuePair>();
          for (          Element input : doc.select(""String_Node_Str"")) {
            if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
              form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
            }
          }
          doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
          if (!msg.contains(""String_Node_Str"")) {
            res=new ReservationResult(MultiStepResult.Status.ERROR,msg);
          }
 else {
            res=new ReservationResult(MultiStepResult.Status.OK,msg);
          }
        }
      }
    }
  }
  if (res == null || res.getStatus() == MultiStepResult.Status.SELECTION_NEEDED || res.getStatus() == MultiStepResult.Status.CONFIRMATION_NEEDED) {
    form=new ArrayList<NameValuePair>();
    for (    Element input : doc.select(""String_Node_Str"")) {
      if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
        form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
      }
    }
    form.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
  }
  s_pageform=new ArrayList<NameValuePair>();
  for (  Element input : doc.select(""String_Node_Str"")) {
    if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
      s_pageform.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
    }
  }
  try {
    nvpairs=s_pageform;
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    parse_search(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
    nvpairs=s_pageform;
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    parse_search(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
  }
 catch (  OpacErrorException e) {
    e.printStackTrace();
  }
  return res;
}"
86271,"protected void parse_medialist(List<Map<String,String>> medien,Document doc,int offset,String accountName) throws ClientProtocolException, IOException {
  Elements copytrs=doc.select(""String_Node_Str"");
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.GERMAN);
  int trs=copytrs.size();
  if (trs < 1) {
    medien=null;
    return;
  }
  assert(trs > 0);
  for (int i=0; i < trs; i++) {
    Element tr=copytrs.get(i);
    if (tr.children().size() == 8) {
      Map<String,String> e=new HashMap<String,String>();
      if (tr.select(""String_Node_Str"").size() > 0)       e.put(AccountData.KEY_LENT_LINK,tr.select(""String_Node_Str"").attr(""String_Node_Str""));
 else       e.put(AccountData.KEY_LENT_RENEWABLE,""String_Node_Str"");
      Elements datatrs=tr.select(""String_Node_Str"");
      e.put(AccountData.KEY_LENT_TITLE,datatrs.get(0).text());
      List<TextNode> textNodes=datatrs.get(1).select(""String_Node_Str"").first().textNodes();
      List<TextNode> nodes=new ArrayList<TextNode>();
      Elements titles=datatrs.get(1).select(""String_Node_Str"");
      for (      TextNode node : textNodes) {
        if (!node.text().equals(""String_Node_Str""))         nodes.add(node);
      }
      assert(nodes.size() == titles.size());
      for (int j=0; j < nodes.size(); j++) {
        String title=titles.get(j).text();
        String value=nodes.get(j).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
        if (title.contains(""String_Node_Str"")) {
        }
 else         if (title.contains(""String_Node_Str"")) {
          e.put(AccountData.KEY_LENT_STATUS,value);
        }
 else         if (title.contains(""String_Node_Str"")) {
          e.put(AccountData.KEY_LENT_DEADLINE,value);
          try {
            e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,String.valueOf(sdf.parse(value).getTime()));
          }
 catch (          ParseException e1) {
            e1.printStackTrace();
          }
        }
 else         if (title.contains(""String_Node_Str"")) {
        }
      }
      medien.add(e);
    }
 else {
      String prolongCount=""String_Node_Str"";
      try {
        String html=httpGet(https_url + ""String_Node_Str"" + accountName+ ""String_Node_Str""+ db+ ""String_Node_Str""+ tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""),getDefaultEncoding());
        prolongCount=Jsoup.parse(html).text();
      }
 catch (      IOException e) {
      }
      String reminderCount=tr.child(13).text().trim();
      if (reminderCount.indexOf(""String_Node_Str"") >= 0 && reminderCount.indexOf(""String_Node_Str"") >= 0 && reminderCount.indexOf(""String_Node_Str"") < reminderCount.indexOf(""String_Node_Str""))       reminderCount=reminderCount.substring(reminderCount.indexOf(""String_Node_Str"") + 1,reminderCount.indexOf(""String_Node_Str""));
 else       reminderCount=""String_Node_Str"";
      Map<String,String> e=new HashMap<String,String>();
      if (tr.child(4).text().trim().length() < 5 && tr.child(5).text().trim().length() > 4) {
        e.put(AccountData.KEY_LENT_TITLE,tr.child(5).text().trim());
      }
 else {
        e.put(AccountData.KEY_LENT_TITLE,tr.child(4).text().trim());
      }
      String status=""String_Node_Str"";
      if (!reminderCount.equals(""String_Node_Str"") && !reminderCount.equals(""String_Node_Str"")) {
        status+=reminderCount + ""String_Node_Str"" + stringProvider.getString(StringProvider.REMINDERS)+ ""String_Node_Str"";
      }
      status+=prolongCount + ""String_Node_Str"" + stringProvider.getString(StringProvider.PROLONGED_ABBR);
      e.put(AccountData.KEY_LENT_STATUS,status);
      e.put(AccountData.KEY_LENT_DEADLINE,tr.child(21).text().trim());
      try {
        e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,String.valueOf(sdf.parse(e.get(AccountData.KEY_LENT_DEADLINE)).getTime()));
      }
 catch (      ParseException e1) {
        e1.printStackTrace();
      }
      e.put(AccountData.KEY_LENT_LINK,tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""));
      medien.add(e);
    }
  }
  assert(medien.size() == trs - 1);
}","protected void parse_medialist(List<Map<String,String>> medien,Document doc,int offset,String accountName) throws ClientProtocolException, IOException {
  Elements copytrs=doc.select(""String_Node_Str"");
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.GERMAN);
  int trs=copytrs.size();
  if (trs < 1) {
    medien=null;
    return;
  }
  assert(trs > 0);
  for (int i=0; i < trs; i++) {
    Element tr=copytrs.get(i);
    if (tr.select(""String_Node_Str"").size() > 0) {
      Map<String,String> e=new HashMap<String,String>();
      if (tr.select(""String_Node_Str"").size() > 0)       e.put(AccountData.KEY_LENT_LINK,tr.select(""String_Node_Str"").attr(""String_Node_Str""));
 else       e.put(AccountData.KEY_LENT_RENEWABLE,""String_Node_Str"");
      Elements datatrs=tr.select(""String_Node_Str"");
      e.put(AccountData.KEY_LENT_TITLE,datatrs.get(0).text());
      List<TextNode> textNodes=datatrs.get(1).select(""String_Node_Str"").first().textNodes();
      List<TextNode> nodes=new ArrayList<TextNode>();
      Elements titles=datatrs.get(1).select(""String_Node_Str"");
      for (      TextNode node : textNodes) {
        if (!node.text().equals(""String_Node_Str""))         nodes.add(node);
      }
      assert(nodes.size() == titles.size());
      for (int j=0; j < nodes.size(); j++) {
        String title=titles.get(j).text();
        String value=nodes.get(j).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
        if (title.contains(""String_Node_Str"")) {
        }
 else         if (title.contains(""String_Node_Str"")) {
          e.put(AccountData.KEY_LENT_STATUS,value);
        }
 else         if (title.contains(""String_Node_Str"")) {
          e.put(AccountData.KEY_LENT_DEADLINE,value);
          try {
            e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,String.valueOf(sdf.parse(value).getTime()));
          }
 catch (          ParseException e1) {
            e1.printStackTrace();
          }
        }
 else         if (title.contains(""String_Node_Str"")) {
        }
      }
      medien.add(e);
    }
 else {
      String prolongCount=""String_Node_Str"";
      try {
        String html=httpGet(https_url + ""String_Node_Str"" + accountName+ ""String_Node_Str""+ db+ ""String_Node_Str""+ tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""),getDefaultEncoding());
        prolongCount=Jsoup.parse(html).text();
      }
 catch (      IOException e) {
      }
      String reminderCount=tr.child(13).text().trim();
      if (reminderCount.indexOf(""String_Node_Str"") >= 0 && reminderCount.indexOf(""String_Node_Str"") >= 0 && reminderCount.indexOf(""String_Node_Str"") < reminderCount.indexOf(""String_Node_Str""))       reminderCount=reminderCount.substring(reminderCount.indexOf(""String_Node_Str"") + 1,reminderCount.indexOf(""String_Node_Str""));
 else       reminderCount=""String_Node_Str"";
      Map<String,String> e=new HashMap<String,String>();
      if (tr.child(4).text().trim().length() < 5 && tr.child(5).text().trim().length() > 4) {
        e.put(AccountData.KEY_LENT_TITLE,tr.child(5).text().trim());
      }
 else {
        e.put(AccountData.KEY_LENT_TITLE,tr.child(4).text().trim());
      }
      String status=""String_Node_Str"";
      if (!reminderCount.equals(""String_Node_Str"") && !reminderCount.equals(""String_Node_Str"")) {
        status+=reminderCount + ""String_Node_Str"" + stringProvider.getString(StringProvider.REMINDERS)+ ""String_Node_Str"";
      }
      status+=prolongCount + ""String_Node_Str"" + stringProvider.getString(StringProvider.PROLONGED_ABBR);
      e.put(AccountData.KEY_LENT_STATUS,status);
      e.put(AccountData.KEY_LENT_DEADLINE,tr.child(21).text().trim());
      try {
        e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,String.valueOf(sdf.parse(e.get(AccountData.KEY_LENT_DEADLINE)).getTime()));
      }
 catch (      ParseException e1) {
        e1.printStackTrace();
      }
      e.put(AccountData.KEY_LENT_LINK,tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""));
      medien.add(e);
    }
  }
  assert(medien.size() == trs - 1);
}"
86272,"public List<SearchQuery> saveSearchQuery(){
  List<SearchQuery> query=new ArrayList<SearchQuery>();
  for (  SearchField field : fields) {
    ViewGroup v=(ViewGroup)view.findViewWithTag(field.getId());
    if (field instanceof TextSearchField) {
      EditText text;
      if (((TextSearchField)field).isFreeSearch()) {
        text=(EditText)view.findViewById(R.id.etSimpleSearch);
      }
 else {
        text=(EditText)v.findViewById(R.id.edittext);
      }
      query.add(new SearchQuery(field,text.getEditableText().toString()));
    }
 else     if (field instanceof BarcodeSearchField) {
      EditText text=(EditText)v.findViewById(R.id.edittext);
      query.add(new SearchQuery(field,text.getEditableText().toString()));
    }
 else     if (field instanceof DropdownSearchField) {
      Spinner spinner=(Spinner)v.findViewById(R.id.spinner);
      String key=((DropdownSearchField)field).getDropdownValues().get(spinner.getSelectedItemPosition()).get(""String_Node_Str"");
      if (!key.equals(""String_Node_Str""))       query.add(new SearchQuery(field,key));
    }
 else     if (field instanceof CheckboxSearchField) {
      CheckBox checkbox=(CheckBox)v.findViewById(R.id.checkbox);
      query.add(new SearchQuery(field,String.valueOf(checkbox.isChecked())));
    }
  }
  return query;
}","public List<SearchQuery> saveSearchQuery(){
  List<SearchQuery> query=new ArrayList<SearchQuery>();
  for (  SearchField field : fields) {
    ViewGroup v=(ViewGroup)view.findViewWithTag(field.getId());
    if (field instanceof TextSearchField) {
      EditText text;
      if (((TextSearchField)field).isFreeSearch()) {
        text=(EditText)view.findViewById(R.id.etSimpleSearch);
      }
 else {
        text=(EditText)v.findViewById(R.id.edittext);
      }
      query.add(new SearchQuery(field,text.getEditableText().toString()));
    }
 else     if (field instanceof BarcodeSearchField) {
      EditText text=(EditText)v.findViewById(R.id.edittext);
      query.add(new SearchQuery(field,text.getEditableText().toString()));
    }
 else     if (field instanceof DropdownSearchField) {
      Spinner spinner=(Spinner)v.findViewById(R.id.spinner);
      if (spinner.getSelectedItemPosition() != -1) {
        String key=((DropdownSearchField)field).getDropdownValues().get(spinner.getSelectedItemPosition()).get(""String_Node_Str"");
        if (!key.equals(""String_Node_Str""))         query.add(new SearchQuery(field,key));
      }
    }
 else     if (field instanceof CheckboxSearchField) {
      CheckBox checkbox=(CheckBox)v.findViewById(R.id.checkbox);
      query.add(new SearchQuery(field,String.valueOf(checkbox.isChecked())));
    }
  }
  return query;
}"
86273,"protected SearchRequestResult parse_search(String html,int page) throws OpacErrorException, NotReachableException {
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").text().trim().startsWith(""String_Node_Str"")) {
      return new SearchRequestResult(new ArrayList<SearchResult>(),0,1,1);
    }
 else     if (!doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"") && !doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
      throw new OpacErrorException(doc.select(""String_Node_Str"").text().trim());
    }
  }
 else   if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
      throw new NotReachableException();
    }
 else {
      throw new OpacErrorException(stringProvider.getFormattedString(StringProvider.UNKNOWN_ERROR_WITH_DESCRIPTION,doc.select(""String_Node_Str"").text().trim()));
    }
  }
 else {
    return null;
  }
  updateRechnr(doc);
  reusehtml=html;
  results_total=-1;
  if (doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
    results_total=200;
  }
 else {
    String resultnumstr=doc.select(""String_Node_Str"").first().text();
    resultnumstr=resultnumstr.substring(0,resultnumstr.indexOf(""String_Node_Str"")).trim();
    results_total=Integer.parseInt(resultnumstr);
  }
  List<SearchResult> results=new ArrayList<SearchResult>();
  Elements tables=doc.select(""String_Node_Str"").first().select(""String_Node_Str"");
  Map<String,Integer> colmap=new HashMap<String,Integer>();
  Element thead=doc.select(""String_Node_Str"").first().select(""String_Node_Str"").first();
  int j=0;
  for (  Element th : thead.select(""String_Node_Str"")) {
    String text=th.text().trim().toLowerCase(Locale.GERMAN);
    if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str"") || text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
    j++;
  }
  if (colmap.size() == 0) {
    colmap.put(""String_Node_Str"",0);
    colmap.put(""String_Node_Str"",1);
    colmap.put(""String_Node_Str"",2);
    colmap.put(""String_Node_Str"",3);
    colmap.put(""String_Node_Str"",4);
    colmap.put(""String_Node_Str"",5);
    colmap.put(""String_Node_Str"",6);
    colmap.put(""String_Node_Str"",7);
    colmap.put(""String_Node_Str"",8);
  }
  for (int i=0; i < tables.size(); i++) {
    Element tr=tables.get(i);
    SearchResult sr=new SearchResult();
    if (tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).select(""String_Node_Str"").size() > 0) {
      String imgUrl=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).select(""String_Node_Str"").first().attr(""String_Node_Str"");
      sr.setCover(imgUrl);
    }
    if (colmap.get(""String_Node_Str"") != null) {
      String mType=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
      if (data.has(""String_Node_Str"")) {
        try {
          sr.setType(MediaType.valueOf(data.getJSONObject(""String_Node_Str"").getString(mType.toLowerCase(Locale.GERMAN))));
        }
 catch (        JSONException e) {
          sr.setType(defaulttypes.get(mType.toLowerCase(Locale.GERMAN)));
        }
catch (        IllegalArgumentException e) {
          sr.setType(defaulttypes.get(mType.toLowerCase(Locale.GERMAN)));
        }
      }
 else {
        sr.setType(defaulttypes.get(mType.toLowerCase(Locale.GERMAN)));
      }
    }
    String title=""String_Node_Str"";
    String additionalInfo=""String_Node_Str"";
    if (colmap.get(""String_Node_Str"") != null) {
      Element info=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str""));
      title=info.select(""String_Node_Str"").text().trim();
      String authorIn=info.text().substring(0,info.text().indexOf(title));
      if (authorIn.contains(""String_Node_Str"")) {
        authorIn=authorIn.replaceFirst(""String_Node_Str"",""String_Node_Str"");
        additionalInfo+=""String_Node_Str"" + authorIn;
      }
    }
 else {
      title=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
      if (title.contains(""String_Node_Str"")) {
        additionalInfo+=title.substring(title.indexOf(""String_Node_Str""));
        title=title.substring(0,title.indexOf(""String_Node_Str"") - 1).trim();
      }
      if (colmap.containsKey(""String_Node_Str"")) {
        String author=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
        additionalInfo+=""String_Node_Str"" + author;
      }
    }
    if (colmap.containsKey(""String_Node_Str"")) {
      String publisher=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
      additionalInfo+=""String_Node_Str"" + publisher;
    }
    if (colmap.containsKey(""String_Node_Str"")) {
      String year=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
      additionalInfo+=""String_Node_Str"" + year + ""String_Node_Str"";
    }
    sr.setInnerhtml(""String_Node_Str"" + title + ""String_Node_Str""+ additionalInfo);
    String status=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    if (status.equals(""String_Node_Str"") || status.contains(""String_Node_Str"") || status.contains(""String_Node_Str"")|| status.contains(""String_Node_Str"")) {
      sr.setStatus(Status.GREEN);
    }
 else {
      sr.setStatus(Status.RED);
      sr.setInnerhtml(sr.getInnerhtml() + ""String_Node_Str"" + status+ ""String_Node_Str"");
    }
    sr.setNr(10 * (page - 1) + i);
    sr.setId(null);
    results.add(sr);
  }
  resultcount=results.size();
  return new SearchRequestResult(results,results_total,page);
}","protected SearchRequestResult parse_search(String html,int page) throws OpacErrorException, NotReachableException {
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").text().trim().startsWith(""String_Node_Str"")) {
      return new SearchRequestResult(new ArrayList<SearchResult>(),0,1,1);
    }
 else     if (!doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"") && !doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
      throw new OpacErrorException(doc.select(""String_Node_Str"").text().trim());
    }
  }
 else   if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
      throw new NotReachableException();
    }
 else {
      throw new OpacErrorException(stringProvider.getFormattedString(StringProvider.UNKNOWN_ERROR_WITH_DESCRIPTION,doc.select(""String_Node_Str"").text().trim()));
    }
  }
 else {
    return null;
  }
  updateRechnr(doc);
  reusehtml=html;
  results_total=-1;
  if (doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
    results_total=200;
  }
 else {
    String resultnumstr=doc.select(""String_Node_Str"").first().text();
    resultnumstr=resultnumstr.substring(0,resultnumstr.indexOf(""String_Node_Str"")).trim();
    results_total=Integer.parseInt(resultnumstr);
  }
  List<SearchResult> results=new ArrayList<SearchResult>();
  Elements tables=doc.select(""String_Node_Str"").first().select(""String_Node_Str"");
  Map<String,Integer> colmap=new HashMap<String,Integer>();
  Element thead=doc.select(""String_Node_Str"").first().select(""String_Node_Str"").first();
  int j=0;
  for (  Element th : thead.select(""String_Node_Str"")) {
    String text=th.text().trim().toLowerCase(Locale.GERMAN);
    if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str"") || text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
 else     if (text.contains(""String_Node_Str""))     colmap.put(""String_Node_Str"",j);
    j++;
  }
  if (colmap.size() == 0) {
    colmap.put(""String_Node_Str"",0);
    colmap.put(""String_Node_Str"",1);
    colmap.put(""String_Node_Str"",2);
    colmap.put(""String_Node_Str"",3);
    colmap.put(""String_Node_Str"",4);
    colmap.put(""String_Node_Str"",5);
    colmap.put(""String_Node_Str"",6);
    colmap.put(""String_Node_Str"",7);
    colmap.put(""String_Node_Str"",8);
  }
  for (int i=0; i < tables.size(); i++) {
    Element tr=tables.get(i);
    SearchResult sr=new SearchResult();
    if (tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).select(""String_Node_Str"").size() > 0) {
      String imgUrl=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).select(""String_Node_Str"").first().attr(""String_Node_Str"");
      sr.setCover(imgUrl);
    }
    if (colmap.get(""String_Node_Str"") != null) {
      String mType=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
      if (data.has(""String_Node_Str"")) {
        try {
          sr.setType(MediaType.valueOf(data.getJSONObject(""String_Node_Str"").getString(mType.toLowerCase(Locale.GERMAN))));
        }
 catch (        JSONException e) {
          sr.setType(defaulttypes.get(mType.toLowerCase(Locale.GERMAN)));
        }
catch (        IllegalArgumentException e) {
          sr.setType(defaulttypes.get(mType.toLowerCase(Locale.GERMAN)));
        }
      }
 else {
        sr.setType(defaulttypes.get(mType.toLowerCase(Locale.GERMAN)));
      }
    }
    String title=""String_Node_Str"";
    String additionalInfo=""String_Node_Str"";
    if (colmap.get(""String_Node_Str"") != null) {
      Element info=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str""));
      title=info.select(""String_Node_Str"").text().trim();
      String authorIn=info.text().substring(0,info.text().indexOf(title));
      if (authorIn.contains(""String_Node_Str"")) {
        authorIn=authorIn.replaceFirst(""String_Node_Str"",""String_Node_Str"");
        additionalInfo+=""String_Node_Str"" + authorIn;
      }
    }
 else {
      title=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
      if (title.contains(""String_Node_Str"")) {
        additionalInfo+=title.substring(title.indexOf(""String_Node_Str""));
        title=title.substring(0,title.indexOf(""String_Node_Str"") - 1).trim();
      }
      if (colmap.containsKey(""String_Node_Str"")) {
        String author=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
        additionalInfo+=""String_Node_Str"" + author;
      }
    }
    if (colmap.containsKey(""String_Node_Str"")) {
      String publisher=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
      additionalInfo+=""String_Node_Str"" + publisher;
    }
    if (colmap.containsKey(""String_Node_Str"")) {
      String year=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
      additionalInfo+=""String_Node_Str"" + year + ""String_Node_Str"";
    }
    sr.setInnerhtml(""String_Node_Str"" + title + ""String_Node_Str""+ additionalInfo);
    String status=tr.select(""String_Node_Str"").get(colmap.get(""String_Node_Str"")).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    if (status.equals(""String_Node_Str"") || status.contains(""String_Node_Str"") || status.contains(""String_Node_Str"")|| status.contains(""String_Node_Str"")) {
      sr.setStatus(Status.GREEN);
    }
 else {
      sr.setStatus(Status.RED);
      sr.setInnerhtml(sr.getInnerhtml() + ""String_Node_Str"" + status+ ""String_Node_Str"");
    }
    String link=tr.select(""String_Node_Str"").attr(""String_Node_Str"");
    Map<String,String> params=getQueryParamsFirst(link);
    if (params.containsKey(""String_Node_Str"")) {
      int recno=Integer.valueOf(params.get(""String_Node_Str""));
      sr.setNr(10 * (page - 1) + recno - 1);
    }
 else {
      sr.setNr(10 * (page - 1) + i);
    }
    sr.setId(null);
    results.add(sr);
  }
  resultcount=results.size();
  return new SearchRequestResult(results,results_total,page);
}"
86274,"protected void buildSearchForm(){
  if (app.getLibrary().getReplacedBy() != null && sp.getInt(""String_Node_Str"",0) < 5) {
    view.findViewById(R.id.rlReplaced).setVisibility(View.VISIBLE);
    view.findViewById(R.id.ivReplacedStore).setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        try {
          Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + app.getLibrary().getReplacedBy()));
          startActivity(i);
        }
 catch (        ActivityNotFoundException e) {
          Log.i(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
);
    sp.edit().putInt(""String_Node_Str"",sp.getInt(""String_Node_Str"",0) + 1).commit();
  }
 else {
    view.findViewById(R.id.rlReplaced).setVisibility(View.GONE);
  }
  LinearLayout llFormFields=(LinearLayout)view.findViewById(R.id.llFormFields);
  llFormFields.removeAllViews();
  LinearLayout llAdvancedFields=(LinearLayout)view.findViewById(R.id.llAdvancedFields);
  llAdvancedFields.removeAllViews();
  LinearLayout llExpand=(LinearLayout)view.findViewById(R.id.llExpand);
  llExpand.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      setAdvanced(!advanced);
    }
  }
);
  RelativeLayout rlSimpleSearch=(RelativeLayout)view.findViewById(R.id.rlSimpleSearch);
  TextView tvSearchAdvHeader=(TextView)view.findViewById(R.id.tvSearchAdvHeader);
  EditText etSimpleSearch=(EditText)view.findViewById(R.id.etSimpleSearch);
  rlSimpleSearch.setVisibility(View.GONE);
  tvSearchAdvHeader.setVisibility(View.GONE);
  int i=0;
  if (fields == null)   return;
  for (  final SearchField field : fields) {
    ViewGroup v=null;
    if (field instanceof TextSearchField) {
      TextSearchField textSearchField=(TextSearchField)field;
      if (textSearchField.isFreeSearch()) {
        rlSimpleSearch.setVisibility(View.VISIBLE);
        tvSearchAdvHeader.setVisibility(View.VISIBLE);
        etSimpleSearch.setHint(textSearchField.getHint());
      }
 else {
        v=(ViewGroup)getLayoutInflater().inflate(R.layout.searchfield_text,llFormFields,false);
        TextView title=(TextView)v.findViewById(R.id.title);
        title.setText(textSearchField.getDisplayName());
        EditText edittext=(EditText)v.findViewById(R.id.edittext);
        edittext.setHint(textSearchField.getHint());
        if (((TextSearchField)field).isNumber()) {
          edittext.setInputType(InputType.TYPE_CLASS_NUMBER);
        }
        if (((TextSearchField)field).isHalfWidth() && i >= 1 && !(fields.get(i - 1) instanceof TextSearchField && ((TextSearchField)fields.get(i - 1)).isFreeSearch())) {
          ViewGroup before=(ViewGroup)view.findViewWithTag(fields.get(i - 1).getId());
          llFormFields.removeView(before);
          llAdvancedFields.removeView(before);
          v=makeHalfWidth(before,v);
        }
      }
    }
 else     if (field instanceof BarcodeSearchField) {
      BarcodeSearchField bcSearchField=(BarcodeSearchField)field;
      v=(ViewGroup)getLayoutInflater().inflate(R.layout.searchfield_barcode,llFormFields,false);
      TextView title=(TextView)v.findViewById(R.id.title);
      title.setText(bcSearchField.getDisplayName());
      EditText edittext=(EditText)v.findViewById(R.id.edittext);
      edittext.setHint(bcSearchField.getHint());
      ImageView ivBarcode=(ImageView)v.findViewById(R.id.ivBarcode);
      ivBarcode.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View arg0){
          barcodeScanningField=field.getId();
          mCallback.scanBarcode();
        }
      }
);
      if (((BarcodeSearchField)field).isHalfWidth() && i >= 1 && !(fields.get(i - 1) instanceof TextSearchField && ((TextSearchField)fields.get(i - 1)).isFreeSearch())) {
        ViewGroup before=(ViewGroup)view.findViewWithTag(fields.get(i - 1).getId());
        llFormFields.removeView(before);
        llAdvancedFields.removeView(before);
        v=makeHalfWidth(before,v);
      }
    }
 else     if (field instanceof DropdownSearchField) {
      DropdownSearchField ddSearchField=(DropdownSearchField)field;
      v=(ViewGroup)getLayoutInflater().inflate(R.layout.searchfield_dropdown,llFormFields,false);
      TextView title=(TextView)v.findViewById(R.id.title);
      title.setText(ddSearchField.getDisplayName());
      Spinner spinner=(Spinner)v.findViewById(R.id.spinner);
      spinner.setAdapter(((OpacActivity)getActivity()).new MetaAdapter(getActivity(),ddSearchField.getDropdownValues(),R.layout.simple_spinner_item));
    }
 else     if (field instanceof CheckboxSearchField) {
      CheckboxSearchField cbSearchField=(CheckboxSearchField)field;
      v=(ViewGroup)getLayoutInflater().inflate(R.layout.searchfield_checkbox,llFormFields,false);
      CheckBox checkbox=(CheckBox)v.findViewById(R.id.checkbox);
      checkbox.setText(cbSearchField.getDisplayName());
    }
    if (v != null) {
      v.setTag(field.getId());
      if (field.isAdvanced())       llAdvancedFields.addView(v);
 else       llFormFields.addView(v);
    }
    i++;
  }
}","protected void buildSearchForm(){
  if (app.getLibrary().getReplacedBy() != null && sp.getInt(""String_Node_Str"",0) < 5) {
    view.findViewById(R.id.rlReplaced).setVisibility(View.VISIBLE);
    view.findViewById(R.id.ivReplacedStore).setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        try {
          Intent i=new Intent(Intent.ACTION_VIEW,Uri.parse(""String_Node_Str"" + app.getLibrary().getReplacedBy()));
          startActivity(i);
        }
 catch (        ActivityNotFoundException e) {
          Log.i(""String_Node_Str"",""String_Node_Str"");
        }
      }
    }
);
    sp.edit().putInt(""String_Node_Str"",sp.getInt(""String_Node_Str"",0) + 1).commit();
  }
 else {
    view.findViewById(R.id.rlReplaced).setVisibility(View.GONE);
  }
  LinearLayout llFormFields=(LinearLayout)view.findViewById(R.id.llFormFields);
  llFormFields.removeAllViews();
  LinearLayout llAdvancedFields=(LinearLayout)view.findViewById(R.id.llAdvancedFields);
  llAdvancedFields.removeAllViews();
  LinearLayout llExpand=(LinearLayout)view.findViewById(R.id.llExpand);
  llExpand.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      setAdvanced(!advanced);
    }
  }
);
  RelativeLayout rlSimpleSearch=(RelativeLayout)view.findViewById(R.id.rlSimpleSearch);
  TextView tvSearchAdvHeader=(TextView)view.findViewById(R.id.tvSearchAdvHeader);
  EditText etSimpleSearch=(EditText)view.findViewById(R.id.etSimpleSearch);
  rlSimpleSearch.setVisibility(View.GONE);
  tvSearchAdvHeader.setVisibility(View.GONE);
  int i=0;
  if (fields == null)   return;
  for (  final SearchField field : fields) {
    ViewGroup v=null;
    if (field instanceof TextSearchField) {
      TextSearchField textSearchField=(TextSearchField)field;
      if (textSearchField.isFreeSearch()) {
        rlSimpleSearch.setVisibility(View.VISIBLE);
        tvSearchAdvHeader.setVisibility(View.VISIBLE);
        etSimpleSearch.setHint(textSearchField.getHint());
      }
 else {
        v=(ViewGroup)getLayoutInflater().inflate(R.layout.searchfield_text,llFormFields,false);
        TextView title=(TextView)v.findViewById(R.id.title);
        title.setText(textSearchField.getDisplayName());
        EditText edittext=(EditText)v.findViewById(R.id.edittext);
        edittext.setHint(textSearchField.getHint());
        if (((TextSearchField)field).isNumber()) {
          edittext.setInputType(InputType.TYPE_CLASS_NUMBER);
        }
        if (((TextSearchField)field).isHalfWidth() && i >= 1 && !(fields.get(i - 1) instanceof TextSearchField && ((TextSearchField)fields.get(i - 1)).isFreeSearch())) {
          ViewGroup before=(ViewGroup)view.findViewWithTag(fields.get(i - 1).getId());
          llFormFields.removeView(before);
          llAdvancedFields.removeView(before);
          v.setTag(field.getId());
          View together=makeHalfWidth(before,v);
          v=null;
          if (field.isAdvanced())           llAdvancedFields.addView(together);
 else           llFormFields.addView(together);
        }
      }
    }
 else     if (field instanceof BarcodeSearchField) {
      BarcodeSearchField bcSearchField=(BarcodeSearchField)field;
      v=(ViewGroup)getLayoutInflater().inflate(R.layout.searchfield_barcode,llFormFields,false);
      TextView title=(TextView)v.findViewById(R.id.title);
      title.setText(bcSearchField.getDisplayName());
      EditText edittext=(EditText)v.findViewById(R.id.edittext);
      edittext.setHint(bcSearchField.getHint());
      ImageView ivBarcode=(ImageView)v.findViewById(R.id.ivBarcode);
      ivBarcode.setOnClickListener(new OnClickListener(){
        @Override public void onClick(        View arg0){
          barcodeScanningField=field.getId();
          mCallback.scanBarcode();
        }
      }
);
      if (((BarcodeSearchField)field).isHalfWidth() && i >= 1 && !(fields.get(i - 1) instanceof TextSearchField && ((TextSearchField)fields.get(i - 1)).isFreeSearch())) {
        ViewGroup before=(ViewGroup)view.findViewWithTag(fields.get(i - 1).getId());
        llFormFields.removeView(before);
        llAdvancedFields.removeView(before);
        v=makeHalfWidth(before,v);
      }
    }
 else     if (field instanceof DropdownSearchField) {
      DropdownSearchField ddSearchField=(DropdownSearchField)field;
      v=(ViewGroup)getLayoutInflater().inflate(R.layout.searchfield_dropdown,llFormFields,false);
      TextView title=(TextView)v.findViewById(R.id.title);
      title.setText(ddSearchField.getDisplayName());
      Spinner spinner=(Spinner)v.findViewById(R.id.spinner);
      spinner.setAdapter(((OpacActivity)getActivity()).new MetaAdapter(getActivity(),ddSearchField.getDropdownValues(),R.layout.simple_spinner_item));
    }
 else     if (field instanceof CheckboxSearchField) {
      CheckboxSearchField cbSearchField=(CheckboxSearchField)field;
      v=(ViewGroup)getLayoutInflater().inflate(R.layout.searchfield_checkbox,llFormFields,false);
      CheckBox checkbox=(CheckBox)v.findViewById(R.id.checkbox);
      checkbox.setText(cbSearchField.getDisplayName());
    }
    if (v != null) {
      v.setTag(field.getId());
      if (field.isAdvanced())       llAdvancedFields.addView(v);
 else       llFormFields.addView(v);
    }
    i++;
  }
}"
86275,"private SearchField processMeaning(SearchField field,String meaningName){
  Meaning meaning=Meaning.valueOf(meaningName);
  if (field instanceof TextSearchField && meaning == Meaning.FREE) {
    ((TextSearchField)field).setFreeSearch(true);
    ((TextSearchField)field).setHint(field.getDisplayName());
  }
 else   if (field instanceof TextSearchField && (meaning == Meaning.BARCODE || meaning == Meaning.ISBN)) {
    field=new BarcodeSearchField(field.getId(),field.getDisplayName(),field.isAdvanced(),((TextSearchField)field).isHalfWidth(),((TextSearchField)field).getHint());
  }
 else   if (meaning == Meaning.AUDIENCE || meaning == Meaning.SYSTEM || meaning == Meaning.KEYWORD || meaning == Meaning.PUBLISHER) {
    field.setAdvanced(true);
  }
  field.setMeaning(meaning);
  return field;
}","private SearchField processMeaning(SearchField field,String meaningName){
  Meaning meaning=Meaning.valueOf(meaningName);
  if (field instanceof TextSearchField && meaning == Meaning.FREE) {
    ((TextSearchField)field).setFreeSearch(true);
    ((TextSearchField)field).setHint(field.getDisplayName());
  }
 else   if (field instanceof TextSearchField && (meaning == Meaning.BARCODE || meaning == Meaning.ISBN)) {
    JSONObject data=field.getData();
    field=new BarcodeSearchField(field.getId(),field.getDisplayName(),field.isAdvanced(),((TextSearchField)field).isHalfWidth(),((TextSearchField)field).getHint());
    field.setData(data);
  }
 else   if (meaning == Meaning.AUDIENCE || meaning == Meaning.SYSTEM || meaning == Meaning.KEYWORD || meaning == Meaning.PUBLISHER) {
    field.setAdvanced(true);
  }
  field.setMeaning(meaning);
  return field;
}"
86276,"@Override public List<SearchField> getSearchFields() throws IOException, JSONException {
  if (!initialised)   start();
  List<SearchField> fields=new ArrayList<SearchField>();
  List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  String html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
  Document doc=Jsoup.parse(html);
  Elements fieldElems=doc.select(""String_Node_Str"");
  for (  Element fieldElem : fieldElems) {
    String name=fieldElem.select(""String_Node_Str"").text();
    List<TextNode> textNodes=fieldElem.select(""String_Node_Str"").first().textNodes();
    String hint=textNodes.size() > 0 ? textNodes.get(0).getWholeText().replace(""String_Node_Str"",""String_Node_Str"") : ""String_Node_Str"";
    Elements inputs=fieldElem.select(""String_Node_Str"");
    if (inputs.size() == 1) {
      fields.add(createSearchField(name,hint,inputs.get(0)));
    }
 else     if (inputs.size() == 2 && inputs.select(""String_Node_Str"").size() == 2) {
      fields.add(createSearchField(name,hint,inputs.get(0)));
      TextSearchField secondField=(TextSearchField)createSearchField(name,hint,inputs.get(1));
      secondField.setHalfWidth(true);
      fields.add(secondField);
    }
 else     if (inputs.size() == 2 && inputs.get(0).tagName().equals(""String_Node_Str"") && inputs.get(1).tagName().equals(""String_Node_Str"") && inputs.get(0).attr(""String_Node_Str"").equals(""String_Node_Str"")) {
      for (      Element option : inputs.get(0).select(""String_Node_Str"")) {
        TextSearchField field=new TextSearchField();
        field.setHint(hint);
        field.setDisplayName(option.text());
        field.setId(inputs.get(1).attr(""String_Node_Str"") + ""String_Node_Str"" + option.attr(""String_Node_Str""));
        JSONObject data=new JSONObject();
        JSONObject params=new JSONObject();
        params.put(inputs.get(0).attr(""String_Node_Str""),option.attr(""String_Node_Str""));
        data.put(""String_Node_Str"",params);
        field.setData(data);
        fields.add(field);
      }
    }
  }
  return fields;
}","@Override public List<SearchField> getSearchFields() throws IOException, JSONException {
  if (!initialised)   start();
  List<SearchField> fields=new ArrayList<SearchField>();
  List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  String html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(nameValuePairs),getDefaultEncoding());
  Document doc=Jsoup.parse(html);
  Elements fieldElems=doc.select(""String_Node_Str"");
  for (  Element fieldElem : fieldElems) {
    String name=fieldElem.select(""String_Node_Str"").text();
    String hint=""String_Node_Str"";
    if (fieldElem.select(""String_Node_Str"").size() > 0) {
      List<TextNode> textNodes=fieldElem.select(""String_Node_Str"").first().textNodes();
      if (textNodes.size() > 0)       hint=textNodes.get(0).getWholeText().replace(""String_Node_Str"",""String_Node_Str"");
    }
    Elements inputs=fieldElem.select(""String_Node_Str"");
    if (inputs.size() == 1) {
      fields.add(createSearchField(name,hint,inputs.get(0)));
    }
 else     if (inputs.size() == 2 && inputs.select(""String_Node_Str"").size() == 2) {
      fields.add(createSearchField(name,hint,inputs.get(0)));
      TextSearchField secondField=(TextSearchField)createSearchField(name,hint,inputs.get(1));
      secondField.setHalfWidth(true);
      fields.add(secondField);
    }
 else     if (inputs.size() == 2 && inputs.get(0).tagName().equals(""String_Node_Str"") && inputs.get(1).tagName().equals(""String_Node_Str"") && inputs.get(0).attr(""String_Node_Str"").equals(""String_Node_Str"")) {
      for (      Element option : inputs.get(0).select(""String_Node_Str"")) {
        TextSearchField field=new TextSearchField();
        field.setHint(hint);
        field.setDisplayName(option.text());
        field.setId(inputs.get(1).attr(""String_Node_Str"") + ""String_Node_Str"" + option.attr(""String_Node_Str""));
        JSONObject data=new JSONObject();
        JSONObject params=new JSONObject();
        params.put(inputs.get(0).attr(""String_Node_Str""),option.attr(""String_Node_Str""));
        data.put(""String_Node_Str"",params);
        field.setData(data);
        fields.add(field);
      }
    }
  }
  return fields;
}"
86277,"protected void parse_medialist(List<Map<String,String>> medien,Document doc,int offset,String accountName) throws ClientProtocolException, IOException {
  Elements copytrs=doc.select(""String_Node_Str"");
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.GERMAN);
  int trs=copytrs.size();
  if (trs < 1) {
    medien=null;
    return;
  }
  assert(trs > 0);
  for (int i=0; i < trs; i++) {
    Element tr=copytrs.get(i);
    if (tr.select(""String_Node_Str"").size() == 8) {
      Map<String,String> e=new HashMap<String,String>();
      if (tr.select(""String_Node_Str"").size() > 0)       e.put(AccountData.KEY_LENT_LINK,tr.select(""String_Node_Str"").attr(""String_Node_Str""));
 else       e.put(AccountData.KEY_LENT_RENEWABLE,""String_Node_Str"");
      Elements datatrs=tr.select(""String_Node_Str"");
      e.put(AccountData.KEY_LENT_TITLE,datatrs.get(0).text());
      List<TextNode> textNodes=datatrs.get(1).select(""String_Node_Str"").first().textNodes();
      List<TextNode> nodes=new ArrayList<TextNode>();
      Elements titles=datatrs.get(1).select(""String_Node_Str"");
      for (      TextNode node : textNodes) {
        if (!node.text().equals(""String_Node_Str""))         nodes.add(node);
      }
      assert(nodes.size() == titles.size());
      for (int j=0; j < nodes.size(); j++) {
        String title=titles.get(j).text();
        String value=nodes.get(j).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
        if (title.contains(""String_Node_Str"")) {
        }
 else         if (title.contains(""String_Node_Str"")) {
          e.put(AccountData.KEY_LENT_STATUS,value);
        }
 else         if (title.contains(""String_Node_Str"")) {
          e.put(AccountData.KEY_LENT_DEADLINE,value);
          try {
            e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,String.valueOf(sdf.parse(value).getTime()));
          }
 catch (          ParseException e1) {
            e1.printStackTrace();
          }
        }
 else         if (title.contains(""String_Node_Str"")) {
        }
      }
      medien.add(e);
    }
 else {
      String prolongCount=""String_Node_Str"";
      try {
        String html=httpGet(https_url + ""String_Node_Str"" + accountName+ ""String_Node_Str""+ db+ ""String_Node_Str""+ tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""),getDefaultEncoding());
        prolongCount=Jsoup.parse(html).text();
      }
 catch (      IOException e) {
      }
      String reminderCount=tr.child(13).text().trim();
      if (reminderCount.indexOf(""String_Node_Str"") >= 0 && reminderCount.indexOf(""String_Node_Str"") >= 0 && reminderCount.indexOf(""String_Node_Str"") < reminderCount.indexOf(""String_Node_Str""))       reminderCount=reminderCount.substring(reminderCount.indexOf(""String_Node_Str"") + 1,reminderCount.indexOf(""String_Node_Str""));
 else       reminderCount=""String_Node_Str"";
      Map<String,String> e=new HashMap<String,String>();
      if (tr.child(4).text().trim().length() < 5 && tr.child(5).text().trim().length() > 4) {
        e.put(AccountData.KEY_LENT_TITLE,tr.child(5).text().trim());
      }
 else {
        e.put(AccountData.KEY_LENT_TITLE,tr.child(4).text().trim());
      }
      String status=""String_Node_Str"";
      if (!reminderCount.equals(""String_Node_Str"") && !reminderCount.equals(""String_Node_Str"")) {
        status+=reminderCount + ""String_Node_Str"";
      }
      status+=prolongCount + ""String_Node_Str"";
      e.put(AccountData.KEY_LENT_STATUS,status);
      e.put(AccountData.KEY_LENT_DEADLINE,tr.child(21).text().trim());
      try {
        e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,String.valueOf(sdf.parse(e.get(AccountData.KEY_LENT_DEADLINE)).getTime()));
      }
 catch (      ParseException e1) {
        e1.printStackTrace();
      }
      e.put(AccountData.KEY_LENT_LINK,tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""));
      medien.add(e);
    }
  }
  assert(medien.size() == trs - 1);
}","protected void parse_medialist(List<Map<String,String>> medien,Document doc,int offset,String accountName) throws ClientProtocolException, IOException {
  Elements copytrs=doc.select(""String_Node_Str"");
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.GERMAN);
  int trs=copytrs.size();
  if (trs < 1) {
    medien=null;
    return;
  }
  assert(trs > 0);
  for (int i=0; i < trs; i++) {
    Element tr=copytrs.get(i);
    if (tr.children().size() == 8) {
      Map<String,String> e=new HashMap<String,String>();
      if (tr.select(""String_Node_Str"").size() > 0)       e.put(AccountData.KEY_LENT_LINK,tr.select(""String_Node_Str"").attr(""String_Node_Str""));
 else       e.put(AccountData.KEY_LENT_RENEWABLE,""String_Node_Str"");
      Elements datatrs=tr.select(""String_Node_Str"");
      e.put(AccountData.KEY_LENT_TITLE,datatrs.get(0).text());
      List<TextNode> textNodes=datatrs.get(1).select(""String_Node_Str"").first().textNodes();
      List<TextNode> nodes=new ArrayList<TextNode>();
      Elements titles=datatrs.get(1).select(""String_Node_Str"");
      for (      TextNode node : textNodes) {
        if (!node.text().equals(""String_Node_Str""))         nodes.add(node);
      }
      assert(nodes.size() == titles.size());
      for (int j=0; j < nodes.size(); j++) {
        String title=titles.get(j).text();
        String value=nodes.get(j).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
        if (title.contains(""String_Node_Str"")) {
        }
 else         if (title.contains(""String_Node_Str"")) {
          e.put(AccountData.KEY_LENT_STATUS,value);
        }
 else         if (title.contains(""String_Node_Str"")) {
          e.put(AccountData.KEY_LENT_DEADLINE,value);
          try {
            e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,String.valueOf(sdf.parse(value).getTime()));
          }
 catch (          ParseException e1) {
            e1.printStackTrace();
          }
        }
 else         if (title.contains(""String_Node_Str"")) {
        }
      }
      medien.add(e);
    }
 else {
      String prolongCount=""String_Node_Str"";
      try {
        String html=httpGet(https_url + ""String_Node_Str"" + accountName+ ""String_Node_Str""+ db+ ""String_Node_Str""+ tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""),getDefaultEncoding());
        prolongCount=Jsoup.parse(html).text();
      }
 catch (      IOException e) {
      }
      String reminderCount=tr.child(13).text().trim();
      if (reminderCount.indexOf(""String_Node_Str"") >= 0 && reminderCount.indexOf(""String_Node_Str"") >= 0 && reminderCount.indexOf(""String_Node_Str"") < reminderCount.indexOf(""String_Node_Str""))       reminderCount=reminderCount.substring(reminderCount.indexOf(""String_Node_Str"") + 1,reminderCount.indexOf(""String_Node_Str""));
 else       reminderCount=""String_Node_Str"";
      Map<String,String> e=new HashMap<String,String>();
      if (tr.child(4).text().trim().length() < 5 && tr.child(5).text().trim().length() > 4) {
        e.put(AccountData.KEY_LENT_TITLE,tr.child(5).text().trim());
      }
 else {
        e.put(AccountData.KEY_LENT_TITLE,tr.child(4).text().trim());
      }
      String status=""String_Node_Str"";
      if (!reminderCount.equals(""String_Node_Str"") && !reminderCount.equals(""String_Node_Str"")) {
        status+=reminderCount + ""String_Node_Str"";
      }
      status+=prolongCount + ""String_Node_Str"";
      e.put(AccountData.KEY_LENT_STATUS,status);
      e.put(AccountData.KEY_LENT_DEADLINE,tr.child(21).text().trim());
      try {
        e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,String.valueOf(sdf.parse(e.get(AccountData.KEY_LENT_DEADLINE)).getTime()));
      }
 catch (      ParseException e1) {
        e1.printStackTrace();
      }
      e.put(AccountData.KEY_LENT_LINK,tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""));
      medien.add(e);
    }
  }
  assert(medien.size() == trs - 1);
}"
86278,"@Override public JSONObject toJSON() throws JSONException {
  JSONObject json=super.toJSON();
  json.put(""String_Node_Str"",""String_Node_Str"");
  JSONArray values=new JSONArray();
  for (  Map<String,String> map : dropdownValues) {
    JSONObject value=new JSONObject();
    value.put(""String_Node_Str"",map.get(""String_Node_Str""));
    value.put(""String_Node_Str"",map.get(""String_Node_Str""));
  }
  json.put(""String_Node_Str"",values);
  return json;
}","@Override public JSONObject toJSON() throws JSONException {
  JSONObject json=super.toJSON();
  json.put(""String_Node_Str"",""String_Node_Str"");
  JSONArray values=new JSONArray();
  for (  Map<String,String> map : dropdownValues) {
    JSONObject value=new JSONObject();
    value.put(""String_Node_Str"",map.get(""String_Node_Str""));
    value.put(""String_Node_Str"",map.get(""String_Node_Str""));
    values.put(value);
  }
  json.put(""String_Node_Str"",values);
  return json;
}"
86279,"@Override public List<SearchField> getSearchFields(MetaDataSource metadata,Library library) throws OpacErrorException {
  try {
    metadata.open();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (!metadata.hasMeta(library.getIdent())) {
    try {
      start();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  if (!metadata.hasMeta(library.getIdent()))   throw new OpacErrorException(""String_Node_Str"");
  Map<String,String> all=new HashMap<String,String>();
  all.put(""String_Node_Str"",""String_Node_Str"");
  all.put(""String_Node_Str"",""String_Node_Str"");
  List<SearchField> searchFields=new ArrayList<SearchField>();
  Set<String> fieldsCompat=new HashSet<String>(Arrays.asList(getSearchFieldsCompat()));
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_FREE)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_FREE,""String_Node_Str"",false,false,""String_Node_Str"",true,false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_TITLE)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_TITLE,""String_Node_Str"",false,false,""String_Node_Str"",false,false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_AUTHOR)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_AUTHOR,""String_Node_Str"",false,false,""String_Node_Str"",false,false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_DIGITAL)) {
    searchFields.add(new CheckboxSearchField(KEY_SEARCH_QUERY_DIGITAL,""String_Node_Str"",false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_AVAILABLE)) {
    searchFields.add(new CheckboxSearchField(KEY_SEARCH_QUERY_AVAILABLE,""String_Node_Str"",false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_ISBN)) {
    searchFields.add(new BarcodeSearchField(KEY_SEARCH_QUERY_ISBN,""String_Node_Str"",false,false,""String_Node_Str""));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_BARCODE)) {
    searchFields.add(new BarcodeSearchField(KEY_SEARCH_QUERY_BARCODE,""String_Node_Str"",false,true,""String_Node_Str""));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_YEAR)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_YEAR,""String_Node_Str"",false,false,""String_Node_Str"",false,true));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_YEAR_RANGE_START)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_YEAR_RANGE_START,""String_Node_Str"",false,false,""String_Node_Str"",false,true));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_YEAR_RANGE_END)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_YEAR_RANGE_END,""String_Node_Str"",false,true,""String_Node_Str"",false,true));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_BRANCH)) {
    List<Map<String,String>> data=metadata.getMeta(library.getIdent(),MetaDataSource.META_TYPE_BRANCH);
    data.add(0,all);
    searchFields.add(new DropdownSearchField(KEY_SEARCH_QUERY_BRANCH,""String_Node_Str"",false,data));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_HOME_BRANCH)) {
    List<Map<String,String>> data=metadata.getMeta(library.getIdent(),MetaDataSource.META_TYPE_HOME_BRANCH);
    data.add(0,all);
    searchFields.add(new DropdownSearchField(KEY_SEARCH_QUERY_HOME_BRANCH,""String_Node_Str"",false,data));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_CATEGORY)) {
    List<Map<String,String>> data=metadata.getMeta(library.getIdent(),MetaDataSource.META_TYPE_CATEGORY);
    data.add(0,all);
    searchFields.add(new DropdownSearchField(KEY_SEARCH_QUERY_CATEGORY,""String_Node_Str"",false,data));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_PUBLISHER)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_PUBLISHER,""String_Node_Str"",false,false,""String_Node_Str"",false,false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_KEYWORDA)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_KEYWORDA,""String_Node_Str"",true,false,""String_Node_Str"",false,false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_KEYWORDB)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_KEYWORDB,""String_Node_Str"",true,true,""String_Node_Str"",false,false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_SYSTEM)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_SYSTEM,""String_Node_Str"",true,false,""String_Node_Str"",false,false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_AUDIENCE)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_AUDIENCE,""String_Node_Str"",true,false,""String_Node_Str"",false,false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_LOCATION)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_LOCATION,""String_Node_Str"",false,false,""String_Node_Str"",false,false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_ORDER)) {
  }
  return searchFields;
}","@Override public List<SearchField> getSearchFields(MetaDataSource metadata,Library library) throws OpacErrorException {
  List<SearchField> searchFields=new ArrayList<SearchField>();
  Set<String> fieldsCompat=new HashSet<String>(Arrays.asList(getSearchFieldsCompat()));
  try {
    metadata.open();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_BRANCH) || fieldsCompat.contains(KEY_SEARCH_QUERY_HOME_BRANCH) || fieldsCompat.contains(KEY_SEARCH_QUERY_CATEGORY)) {
    if (!metadata.hasMeta(library.getIdent())) {
      metadata.close();
      try {
        start();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      try {
        metadata.open();
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (!metadata.hasMeta(library.getIdent()))     throw new OpacErrorException(""String_Node_Str"");
  }
  Map<String,String> all=new HashMap<String,String>();
  all.put(""String_Node_Str"",""String_Node_Str"");
  all.put(""String_Node_Str"",""String_Node_Str"");
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_FREE)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_FREE,""String_Node_Str"",false,false,""String_Node_Str"",true,false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_TITLE)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_TITLE,""String_Node_Str"",false,false,""String_Node_Str"",false,false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_AUTHOR)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_AUTHOR,""String_Node_Str"",false,false,""String_Node_Str"",false,false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_DIGITAL)) {
    searchFields.add(new CheckboxSearchField(KEY_SEARCH_QUERY_DIGITAL,""String_Node_Str"",false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_AVAILABLE)) {
    searchFields.add(new CheckboxSearchField(KEY_SEARCH_QUERY_AVAILABLE,""String_Node_Str"",false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_ISBN)) {
    searchFields.add(new BarcodeSearchField(KEY_SEARCH_QUERY_ISBN,""String_Node_Str"",false,false,""String_Node_Str""));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_BARCODE)) {
    searchFields.add(new BarcodeSearchField(KEY_SEARCH_QUERY_BARCODE,""String_Node_Str"",false,true,""String_Node_Str""));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_YEAR)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_YEAR,""String_Node_Str"",false,false,""String_Node_Str"",false,true));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_YEAR_RANGE_START)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_YEAR_RANGE_START,""String_Node_Str"",false,false,""String_Node_Str"",false,true));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_YEAR_RANGE_END)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_YEAR_RANGE_END,""String_Node_Str"",false,true,""String_Node_Str"",false,true));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_BRANCH)) {
    List<Map<String,String>> data=metadata.getMeta(library.getIdent(),MetaDataSource.META_TYPE_BRANCH);
    data.add(0,all);
    searchFields.add(new DropdownSearchField(KEY_SEARCH_QUERY_BRANCH,""String_Node_Str"",false,data));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_HOME_BRANCH)) {
    List<Map<String,String>> data=metadata.getMeta(library.getIdent(),MetaDataSource.META_TYPE_HOME_BRANCH);
    data.add(0,all);
    searchFields.add(new DropdownSearchField(KEY_SEARCH_QUERY_HOME_BRANCH,""String_Node_Str"",false,data));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_CATEGORY)) {
    List<Map<String,String>> data=metadata.getMeta(library.getIdent(),MetaDataSource.META_TYPE_CATEGORY);
    data.add(0,all);
    searchFields.add(new DropdownSearchField(KEY_SEARCH_QUERY_CATEGORY,""String_Node_Str"",false,data));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_PUBLISHER)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_PUBLISHER,""String_Node_Str"",false,false,""String_Node_Str"",false,false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_KEYWORDA)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_KEYWORDA,""String_Node_Str"",true,false,""String_Node_Str"",false,false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_KEYWORDB)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_KEYWORDB,""String_Node_Str"",true,true,""String_Node_Str"",false,false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_SYSTEM)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_SYSTEM,""String_Node_Str"",true,false,""String_Node_Str"",false,false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_AUDIENCE)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_AUDIENCE,""String_Node_Str"",true,false,""String_Node_Str"",false,false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_LOCATION)) {
    searchFields.add(new TextSearchField(KEY_SEARCH_QUERY_LOCATION,""String_Node_Str"",false,false,""String_Node_Str"",false,false));
  }
  if (fieldsCompat.contains(KEY_SEARCH_QUERY_ORDER)) {
  }
  return searchFields;
}"
86280,"public Map<String,String> saveQuery(){
  Map<String,String> query=new HashMap<String,String>();
  for (  SearchField field : fields) {
    if (field.isAdvanced() && !advanced)     continue;
    ViewGroup v=(ViewGroup)view.findViewWithTag(field.getId());
    if (field instanceof TextSearchField) {
      EditText text;
      if (((TextSearchField)field).isFreeSearch()) {
        text=(EditText)view.findViewById(R.id.etSimpleSearch);
      }
 else {
        text=(EditText)v.findViewById(R.id.edittext);
      }
      query.put(field.getId(),text.getEditableText().toString());
    }
 else     if (field instanceof BarcodeSearchField) {
      EditText text=(EditText)v.findViewById(R.id.edittext);
      query.put(field.getId(),text.getEditableText().toString());
    }
 else     if (field instanceof DropdownSearchField) {
      Spinner spinner=(Spinner)v.findViewById(R.id.spinner);
      query.put(field.getId(),((DropdownSearchField)field).getDropdownValues().get(spinner.getSelectedItemPosition()).get(""String_Node_Str""));
    }
 else     if (field instanceof CheckboxSearchField) {
      CheckBox checkbox=(CheckBox)v.findViewById(R.id.checkbox);
      query.put(field.getId(),String.valueOf(checkbox.isChecked()));
    }
  }
  return query;
}","public Map<String,String> saveQuery(){
  Map<String,String> query=new HashMap<String,String>();
  for (  SearchField field : fields) {
    if (field.isAdvanced() && !advanced)     continue;
    ViewGroup v=(ViewGroup)view.findViewWithTag(field.getId());
    if (field instanceof TextSearchField) {
      EditText text;
      if (((TextSearchField)field).isFreeSearch()) {
        text=(EditText)view.findViewById(R.id.etSimpleSearch);
      }
 else {
        text=(EditText)v.findViewById(R.id.edittext);
      }
      query.put(field.getId(),text.getEditableText().toString());
    }
 else     if (field instanceof BarcodeSearchField) {
      EditText text=(EditText)v.findViewById(R.id.edittext);
      query.put(field.getId(),text.getEditableText().toString());
    }
 else     if (field instanceof DropdownSearchField) {
      Spinner spinner=(Spinner)v.findViewById(R.id.spinner);
      if (spinner.getSelectedItemPosition() > 0)       query.put(field.getId(),((DropdownSearchField)field).getDropdownValues().get(spinner.getSelectedItemPosition()).get(""String_Node_Str""));
    }
 else     if (field instanceof CheckboxSearchField) {
      CheckBox checkbox=(CheckBox)v.findViewById(R.id.checkbox);
      query.put(field.getId(),String.valueOf(checkbox.isChecked()));
    }
  }
  return query;
}"
86281,"protected void parse_medialist(List<Map<String,String>> medien,Document doc,int offset,String accountName) throws ClientProtocolException, IOException {
  Elements copytrs=doc.select(""String_Node_Str"");
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.GERMAN);
  int trs=copytrs.size();
  if (trs < 1) {
    medien=null;
    return;
  }
  assert(trs > 0);
  for (int i=0; i < trs; i++) {
    Element tr=copytrs.get(i);
    String prolongCount=""String_Node_Str"";
    try {
      String html=httpGet(https_url + ""String_Node_Str"" + accountName+ ""String_Node_Str""+ db+ ""String_Node_Str""+ tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""),getDefaultEncoding());
      prolongCount=Jsoup.parse(html).text();
    }
 catch (    IOException e) {
    }
    String reminderCount=tr.child(13).text().trim();
    if (reminderCount.indexOf(""String_Node_Str"") >= 0 && reminderCount.indexOf(""String_Node_Str"") >= 0 && reminderCount.indexOf(""String_Node_Str"") < reminderCount.indexOf(""String_Node_Str""))     reminderCount=reminderCount.substring(reminderCount.indexOf(""String_Node_Str"") + 1,reminderCount.indexOf(""String_Node_Str""));
 else     reminderCount=""String_Node_Str"";
    Map<String,String> e=new HashMap<String,String>();
    if (tr.child(4).text().trim().length() < 5 && tr.child(5).text().trim().length() > 4) {
      e.put(AccountData.KEY_LENT_TITLE,tr.child(5).text().trim());
    }
 else {
      e.put(AccountData.KEY_LENT_TITLE,tr.child(4).text().trim());
    }
    String status=""String_Node_Str"";
    if (!reminderCount.equals(""String_Node_Str"") && !reminderCount.equals(""String_Node_Str"")) {
      status+=reminderCount + ""String_Node_Str"";
    }
    status+=prolongCount + ""String_Node_Str"";
    e.put(AccountData.KEY_LENT_STATUS,status);
    e.put(AccountData.KEY_LENT_DEADLINE,tr.child(21).text().trim());
    try {
      e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,String.valueOf(sdf.parse(e.get(AccountData.KEY_LENT_DEADLINE)).getTime()));
    }
 catch (    ParseException e1) {
      e1.printStackTrace();
    }
    e.put(AccountData.KEY_LENT_LINK,tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""));
    medien.add(e);
  }
  assert(medien.size() == trs - 1);
}","protected void parse_medialist(List<Map<String,String>> medien,Document doc,int offset,String accountName) throws ClientProtocolException, IOException {
  Elements copytrs=doc.select(""String_Node_Str"");
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.GERMAN);
  int trs=copytrs.size();
  if (trs < 1) {
    medien=null;
    return;
  }
  assert(trs > 0);
  for (int i=0; i < trs; i++) {
    Element tr=copytrs.get(i);
    if (tr.select(""String_Node_Str"").size() == 8) {
      Map<String,String> e=new HashMap<String,String>();
      if (tr.select(""String_Node_Str"").size() > 0)       e.put(AccountData.KEY_LENT_LINK,tr.select(""String_Node_Str"").attr(""String_Node_Str""));
 else       e.put(AccountData.KEY_LENT_RENEWABLE,""String_Node_Str"");
      Elements datatrs=tr.select(""String_Node_Str"");
      e.put(AccountData.KEY_LENT_TITLE,datatrs.get(0).text());
      List<TextNode> textNodes=datatrs.get(1).select(""String_Node_Str"").first().textNodes();
      List<TextNode> nodes=new ArrayList<TextNode>();
      Elements titles=datatrs.get(1).select(""String_Node_Str"");
      for (      TextNode node : textNodes) {
        if (!node.text().equals(""String_Node_Str""))         nodes.add(node);
      }
      assert(nodes.size() == titles.size());
      for (int j=0; j < nodes.size(); j++) {
        String title=titles.get(j).text();
        String value=nodes.get(j).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
        if (title.contains(""String_Node_Str"")) {
        }
 else         if (title.contains(""String_Node_Str"")) {
          e.put(AccountData.KEY_LENT_STATUS,value);
        }
 else         if (title.contains(""String_Node_Str"")) {
          e.put(AccountData.KEY_LENT_DEADLINE,value);
          try {
            e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,String.valueOf(sdf.parse(value).getTime()));
          }
 catch (          ParseException e1) {
            e1.printStackTrace();
          }
        }
 else         if (title.contains(""String_Node_Str"")) {
        }
      }
      medien.add(e);
    }
 else {
      String prolongCount=""String_Node_Str"";
      try {
        String html=httpGet(https_url + ""String_Node_Str"" + accountName+ ""String_Node_Str""+ db+ ""String_Node_Str""+ tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""),getDefaultEncoding());
        prolongCount=Jsoup.parse(html).text();
      }
 catch (      IOException e) {
      }
      String reminderCount=tr.child(13).text().trim();
      if (reminderCount.indexOf(""String_Node_Str"") >= 0 && reminderCount.indexOf(""String_Node_Str"") >= 0 && reminderCount.indexOf(""String_Node_Str"") < reminderCount.indexOf(""String_Node_Str""))       reminderCount=reminderCount.substring(reminderCount.indexOf(""String_Node_Str"") + 1,reminderCount.indexOf(""String_Node_Str""));
 else       reminderCount=""String_Node_Str"";
      Map<String,String> e=new HashMap<String,String>();
      if (tr.child(4).text().trim().length() < 5 && tr.child(5).text().trim().length() > 4) {
        e.put(AccountData.KEY_LENT_TITLE,tr.child(5).text().trim());
      }
 else {
        e.put(AccountData.KEY_LENT_TITLE,tr.child(4).text().trim());
      }
      String status=""String_Node_Str"";
      if (!reminderCount.equals(""String_Node_Str"") && !reminderCount.equals(""String_Node_Str"")) {
        status+=reminderCount + ""String_Node_Str"";
      }
      status+=prolongCount + ""String_Node_Str"";
      e.put(AccountData.KEY_LENT_STATUS,status);
      e.put(AccountData.KEY_LENT_DEADLINE,tr.child(21).text().trim());
      try {
        e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,String.valueOf(sdf.parse(e.get(AccountData.KEY_LENT_DEADLINE)).getTime()));
      }
 catch (      ParseException e1) {
        e1.printStackTrace();
      }
      e.put(AccountData.KEY_LENT_LINK,tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""));
      medien.add(e);
    }
  }
  assert(medien.size() == trs - 1);
}"
86282,"@Override public SearchRequestResult searchGetPage(int page) throws IOException, NotReachableException, OpacErrorException {
  List<NameValuePair> params=new ArrayList<NameValuePair>();
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",encode(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  params.add(new BasicNameValuePair(""String_Node_Str"",String.valueOf(page - 1)));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  String text=encode(params,""String_Node_Str"",""String_Node_Str"");
  Log.d(""String_Node_Str"",text);
  String base64=Base64.encodeToString(text.getBytes(""String_Node_Str""),Base64.NO_WRAP);
  Log.d(""String_Node_Str"",opac_url + ""String_Node_Str"" + base64);
  String html=httpGet(opac_url + ""String_Node_Str"" + base64,getDefaultEncoding(),false);
  return parse_search(html,page);
}","@Override public SearchRequestResult searchGetPage(int page) throws IOException, NotReachableException, OpacErrorException {
  List<NameValuePair> params=new ArrayList<NameValuePair>();
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",encode(query,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  params.add(new BasicNameValuePair(""String_Node_Str"",String.valueOf(page - 1)));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  String text=encode(params,""String_Node_Str"",""String_Node_Str"");
  Log.d(""String_Node_Str"",text);
  String base64=URLEncoder.encode(Base64.encodeToString(text.getBytes(""String_Node_Str""),Base64.NO_WRAP),""String_Node_Str"");
  Log.d(""String_Node_Str"",opac_url + ""String_Node_Str"" + base64);
  String html=httpGet(opac_url + ""String_Node_Str"" + base64,getDefaultEncoding(),false);
  return parse_search(html,page);
}"
86283,"private SearchRequestResult parse_search(String html,int page) throws OpacErrorException, UnsupportedEncodingException {
  Document doc=Jsoup.parse(html);
  String header=doc.select(""String_Node_Str"").text();
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(header);
  int results_total=0;
  if (matcher.find()) {
    results_total=Integer.parseInt(matcher.group(1));
  }
 else {
    Log.d(""String_Node_Str"",html);
    throw new OpacErrorException(""String_Node_Str"");
  }
  Elements trs=doc.select(""String_Node_Str"");
  List<SearchResult> results=new ArrayList<SearchResult>();
  for (  Element tr : trs) {
    SearchResult sr=new SearchResult();
    String author=tr.select(""String_Node_Str"").text();
    String title=tr.select(""String_Node_Str"").text();
    String titleAddition=tr.select(""String_Node_Str"").text();
    String desc=tr.select(""String_Node_Str"").text();
    sr.setInnerhtml(""String_Node_Str"" + author + ""String_Node_Str""+ title+ (titleAddition.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + titleAddition + ""String_Node_Str"")+ ""String_Node_Str""+ desc+ ""String_Node_Str"");
    String coverUrl=tr.select(""String_Node_Str"").attr(""String_Node_Str"");
    if (!coverUrl.contains(""String_Node_Str""))     sr.setCover(coverUrl);
    String link=tr.select(""String_Node_Str"").attr(""String_Node_Str"");
    String base64=getQueryParamsFirst(link).get(""String_Node_Str"");
    base64=base64.substring(0,base64.indexOf(""String_Node_Str"") - 1);
    String decoded=new String(Base64.decode(base64,Base64.NO_WRAP),""String_Node_Str"");
    pattern=Pattern.compile(""String_Node_Str"");
    matcher=pattern.matcher(decoded);
    if (matcher.find()) {
      sr.setId(matcher.group(1));
    }
 else {
      Log.d(""String_Node_Str"",decoded);
      throw new OpacErrorException(""String_Node_Str"");
    }
    if (tr.select(""String_Node_Str"").size() > 0) {
      Element status=tr.select(""String_Node_Str"").first();
      if (status.hasClass(""String_Node_Str"")) {
        sr.setStatus(Status.RED);
      }
 else       if (status.hasClass(""String_Node_Str"")) {
        sr.setStatus(Status.GREEN);
      }
 else {
        sr.setStatus(Status.YELLOW);
      }
    }
 else     if (tr.select(""String_Node_Str"").size() > 0) {
      if (tr.nextElementSibling().select(""String_Node_Str"").size() == 0) {
        sr.setStatus(Status.GREEN);
      }
 else       if (tr.nextElementSibling().select(""String_Node_Str"").size() == 0) {
        sr.setStatus(Status.RED);
      }
 else {
        sr.setStatus(Status.YELLOW);
      }
    }
    results.add(sr);
  }
  return new SearchRequestResult(results,results_total,page);
}","private SearchRequestResult parse_search(String html,int page) throws OpacErrorException, UnsupportedEncodingException {
  Document doc=Jsoup.parse(html);
  String header=doc.select(""String_Node_Str"").text();
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(header);
  int results_total=0;
  if (matcher.find()) {
    results_total=Integer.parseInt(matcher.group(1));
  }
 else {
    Log.d(""String_Node_Str"",html);
    throw new OpacErrorException(""String_Node_Str"");
  }
  Elements trs=doc.select(""String_Node_Str"");
  List<SearchResult> results=new ArrayList<SearchResult>();
  for (  Element tr : trs) {
    SearchResult sr=new SearchResult();
    String author=tr.select(""String_Node_Str"").text();
    String title=tr.select(""String_Node_Str"").text();
    String titleAddition=tr.select(""String_Node_Str"").text();
    String desc=tr.select(""String_Node_Str"").text();
    sr.setInnerhtml(""String_Node_Str"" + author + ""String_Node_Str""+ title+ (titleAddition.equals(""String_Node_Str"") ? ""String_Node_Str"" : ""String_Node_Str"" + titleAddition + ""String_Node_Str"")+ ""String_Node_Str""+ desc+ ""String_Node_Str"");
    String coverUrl=tr.select(""String_Node_Str"").attr(""String_Node_Str"");
    if (!coverUrl.contains(""String_Node_Str""))     sr.setCover(coverUrl);
    String link=tr.select(""String_Node_Str"").attr(""String_Node_Str"");
    String base64=getQueryParamsFirst(link).get(""String_Node_Str"");
    if (base64.contains(""String_Node_Str""))     base64=base64.substring(0,base64.indexOf(""String_Node_Str"") - 1);
    String decoded=new String(Base64.decode(base64,Base64.NO_WRAP),""String_Node_Str"");
    pattern=Pattern.compile(""String_Node_Str"");
    matcher=pattern.matcher(decoded);
    if (matcher.find()) {
      sr.setId(matcher.group(1));
    }
 else {
      Log.d(""String_Node_Str"",decoded);
      throw new OpacErrorException(""String_Node_Str"");
    }
    if (tr.select(""String_Node_Str"").size() > 0) {
      Element status=tr.select(""String_Node_Str"").first();
      if (status.hasClass(""String_Node_Str"")) {
        sr.setStatus(Status.RED);
      }
 else       if (status.hasClass(""String_Node_Str"")) {
        sr.setStatus(Status.GREEN);
      }
 else {
        sr.setStatus(Status.YELLOW);
      }
    }
 else     if (tr.select(""String_Node_Str"").size() > 0) {
      if (tr.nextElementSibling().select(""String_Node_Str"").size() == 0) {
        sr.setStatus(Status.GREEN);
      }
 else       if (tr.nextElementSibling().select(""String_Node_Str"").size() == 0) {
        sr.setStatus(Status.RED);
      }
 else {
        sr.setStatus(Status.YELLOW);
      }
    }
    results.add(sr);
  }
  return new SearchRequestResult(results,results_total,page);
}"
86284,"@Override public SearchRequestResult search(Map<String,String> query) throws IOException, NotReachableException, OpacErrorException {
  List<List<NameValuePair>> queryParams=new ArrayList<List<NameValuePair>>();
  int index=0;
  index=addParameters(query,KEY_SEARCH_QUERY_FREE,data.optString(""String_Node_Str"",""String_Node_Str""),CONTAINS,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_AUTHOR,data.optString(""String_Node_Str"",""String_Node_Str""),CONTAINS,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_TITLE,data.optString(""String_Node_Str"",""String_Node_Str""),CONTAINS,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_KEYWORDA,data.optString(""String_Node_Str"",""String_Node_Str""),CONTAINS,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_AUDIENCE,data.optString(""String_Node_Str"",""String_Node_Str""),CONTAINS,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_SYSTEM,data.optString(""String_Node_Str"",""String_Node_Str""),CONTAINS,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_ISBN,data.optString(""String_Node_Str"",""String_Node_Str""),CONTAINS,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_PUBLISHER,data.optString(""String_Node_Str"",""String_Node_Str""),CONTAINS,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_BARCODE,data.optString(""String_Node_Str"",""String_Node_Str""),CONTAINS,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_YEAR_RANGE_START,data.optString(""String_Node_Str"",""String_Node_Str""),FROM,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_YEAR_RANGE_END,data.optString(""String_Node_Str"",""String_Node_Str""),TO,queryParams,index);
  index=addParametersManual(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",queryParams,index);
  index=addParametersManual(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",queryParams,index);
  if (index == 0) {
    throw new OpacErrorException(""String_Node_Str"");
  }
  this.query=queryParams;
  List<NameValuePair> params=new ArrayList<NameValuePair>();
  start();
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",encode(queryParams,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  String text=encode(params,""String_Node_Str"",""String_Node_Str"");
  Log.d(""String_Node_Str"",text);
  String base64=Base64.encodeToString(text.getBytes(""String_Node_Str""),Base64.NO_WRAP);
  Log.d(""String_Node_Str"",opac_url + ""String_Node_Str"" + base64);
  String html=httpGet(opac_url + ""String_Node_Str"" + base64,getDefaultEncoding(),false);
  return parse_search(html,1);
}","@Override public SearchRequestResult search(Map<String,String> query) throws IOException, NotReachableException, OpacErrorException {
  List<List<NameValuePair>> queryParams=new ArrayList<List<NameValuePair>>();
  int index=0;
  index=addParameters(query,KEY_SEARCH_QUERY_FREE,data.optString(""String_Node_Str"",""String_Node_Str""),CONTAINS,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_AUTHOR,data.optString(""String_Node_Str"",""String_Node_Str""),CONTAINS,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_TITLE,data.optString(""String_Node_Str"",""String_Node_Str""),CONTAINS,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_KEYWORDA,data.optString(""String_Node_Str"",""String_Node_Str""),CONTAINS,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_AUDIENCE,data.optString(""String_Node_Str"",""String_Node_Str""),CONTAINS,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_SYSTEM,data.optString(""String_Node_Str"",""String_Node_Str""),CONTAINS,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_ISBN,data.optString(""String_Node_Str"",""String_Node_Str""),CONTAINS,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_PUBLISHER,data.optString(""String_Node_Str"",""String_Node_Str""),CONTAINS,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_BARCODE,data.optString(""String_Node_Str"",""String_Node_Str""),CONTAINS,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_YEAR_RANGE_START,data.optString(""String_Node_Str"",""String_Node_Str""),FROM,queryParams,index);
  index=addParameters(query,KEY_SEARCH_QUERY_YEAR_RANGE_END,data.optString(""String_Node_Str"",""String_Node_Str""),TO,queryParams,index);
  index=addParametersManual(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",queryParams,index);
  index=addParametersManual(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",queryParams,index);
  if (index == 0) {
    throw new OpacErrorException(""String_Node_Str"");
  }
  this.query=queryParams;
  List<NameValuePair> params=new ArrayList<NameValuePair>();
  start();
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",encode(queryParams,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  String text=encode(params,""String_Node_Str"",""String_Node_Str"");
  Log.d(""String_Node_Str"",text);
  String base64=URLEncoder.encode(Base64.encodeToString(text.getBytes(""String_Node_Str""),Base64.NO_WRAP),""String_Node_Str"");
  Log.d(""String_Node_Str"",opac_url + ""String_Node_Str"" + base64);
  String html=httpGet(opac_url + ""String_Node_Str"" + base64,getDefaultEncoding(),false);
  return parse_search(html,1);
}"
86285,"@Override protected void onPostCreate(Bundle savedInstanceState){
  super.onPostCreate(savedInstanceState);
  if (hasDrawer)   drawerToggle.syncState();
}","@Override protected void onPostCreate(Bundle savedInstanceState){
  super.onPostCreate(savedInstanceState);
  setSupportProgressBarIndeterminateVisibility(false);
  if (hasDrawer)   drawerToggle.syncState();
}"
86286,"@Override public void onCreate(Bundle savedInstanceState){
  supportRequestWindowFeature(android.view.Window.FEATURE_INDETERMINATE_PROGRESS);
  super.onCreate(savedInstanceState);
  try {
    setSupportProgressBarIndeterminateVisibility(false);
  }
 catch (  Exception e) {
  }
  setContentView(getContentView());
  app=(OpacClient)getApplication();
  aData=new AccountDataSource(this);
  setupDrawer();
  if (savedInstanceState != null) {
    setTwoPane(savedInstanceState.getBoolean(""String_Node_Str""));
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  supportRequestWindowFeature(android.view.Window.FEATURE_INDETERMINATE_PROGRESS);
  super.onCreate(savedInstanceState);
  setContentView(getContentView());
  app=(OpacClient)getApplication();
  aData=new AccountDataSource(this);
  setupDrawer();
  if (savedInstanceState != null) {
    setTwoPane(savedInstanceState.getBoolean(""String_Node_Str""));
  }
}"
86287,"@Override public void onCreate(Bundle savedInstanceState){
  supportRequestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  super.onCreate(savedInstanceState);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  if (savedInstanceState == null)   setup();
  if (findViewById(R.id.searchresult_detail_container) != null) {
    mTwoPane=true;
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  if (savedInstanceState == null)   setup();
  if (findViewById(R.id.searchresult_detail_container) != null) {
    mTwoPane=true;
  }
}"
86288,"private DetailledItem parse_result(String html){
  DetailledItem item=new DetailledItem();
  Document document=Jsoup.parse(html);
  Elements rows=document.select(""String_Node_Str"");
  Detail detail=null;
  Map<String,String> copy_last_content=null;
  int copy_row=0;
  String[] copy_keys=new String[]{DetailledItem.KEY_COPY_BARCODE,DetailledItem.KEY_COPY_BRANCH,DetailledItem.KEY_COPY_DEPARTMENT,DetailledItem.KEY_COPY_LOCATION,DetailledItem.KEY_COPY_STATUS,DetailledItem.KEY_COPY_RETURN,DetailledItem.KEY_COPY_RESERVATIONS};
  int[] copy_map=new int[]{3,1,-1,1,4,-1,-1};
  try {
    JSONObject map=m_data.getJSONObject(""String_Node_Str"");
    for (int i=0; i < copy_keys.length; i++) {
      if (map.has(copy_keys[i]))       copy_map[i]=map.getInt(copy_keys[i]);
    }
  }
 catch (  Exception e) {
  }
  for (  Element row : rows) {
    Elements columns=row.children();
    if (columns.size() == 2) {
      String firstColumn=columns.get(0).text().replace(""String_Node_Str"",""String_Node_Str"").trim();
      String secondColumn=columns.get(1).text().replace(""String_Node_Str"",""String_Node_Str"").trim();
      if (firstColumn.length() > 0) {
        if (firstColumn.equalsIgnoreCase(""String_Node_Str"")) {
          detail=null;
          item.setTitle(secondColumn);
        }
 else {
          if (secondColumn.contains(""String_Node_Str"") && columns.get(1).select(""String_Node_Str"").size() > 0) {
            secondColumn+=""String_Node_Str"" + columns.get(1).select(""String_Node_Str"").first().attr(""String_Node_Str"");
          }
          detail=new Detail(firstColumn,secondColumn);
          item.getDetails().add(detail);
        }
      }
 else {
        if (detail != null) {
          String content=detail.getContent() + ""String_Node_Str"" + secondColumn;
          detail.setContent(content);
        }
 else {
          if (columns.get(0).select(""String_Node_Str"").size() > 0) {
            item.setCover(columns.get(0).select(""String_Node_Str"").first().attr(""String_Node_Str""));
          }
        }
      }
    }
 else     if (columns.size() > 3) {
      if (copy_row > 0) {
        Map<String,String> e=new HashMap<String,String>();
        for (int j=0; j < copy_keys.length; j++) {
          int col=copy_map[j];
          if (col > -1) {
            String text=""String_Node_Str"";
            if (copy_keys[j].equals(DetailledItem.KEY_COPY_BRANCH)) {
              text=columns.get(col).ownText().replace(""String_Node_Str"",""String_Node_Str"").trim();
            }
            if (text.length() == 0) {
              text=columns.get(col).text().replace(""String_Node_Str"",""String_Node_Str"").trim();
            }
            if (text.length() == 0) {
              if (copy_keys[j].equals(DetailledItem.KEY_COPY_STATUS)) {
                text=""String_Node_Str"";
              }
 else {
                if (copy_last_content != null)                 text=copy_last_content.get(copy_keys[j]);
 else                 text=""String_Node_Str"";
              }
            }
            e.put(copy_keys[j],text);
          }
        }
        if (e.containsKey(DetailledItem.KEY_COPY_BRANCH) && e.containsKey(DetailledItem.KEY_COPY_LOCATION) && e.get(DetailledItem.KEY_COPY_LOCATION).equals(e.get(DetailledItem.KEY_COPY_BRANCH)))         e.remove(DetailledItem.KEY_COPY_LOCATION);
        item.addCopy(e);
        copy_last_content=e;
      }
      copy_row++;
    }
  }
  item.setReservable(true);
  if (m_opac_dir.equals(""String_Node_Str"")) {
    item.setReservation_info(document.select(""String_Node_Str"").first().attr(""String_Node_Str""));
  }
 else {
    item.setReservation_info(document.select(""String_Node_Str"").attr(""String_Node_Str""));
  }
  return item;
}","private DetailledItem parse_result(String html){
  DetailledItem item=new DetailledItem();
  Document document=Jsoup.parse(html);
  Elements rows=document.select(""String_Node_Str"");
  Detail detail=null;
  Map<String,String> copy_last_content=null;
  int copy_row=0;
  String[] copy_keys=new String[]{DetailledItem.KEY_COPY_BARCODE,DetailledItem.KEY_COPY_BRANCH,DetailledItem.KEY_COPY_DEPARTMENT,DetailledItem.KEY_COPY_LOCATION,DetailledItem.KEY_COPY_STATUS,DetailledItem.KEY_COPY_RETURN,DetailledItem.KEY_COPY_RESERVATIONS};
  int[] copy_map=new int[]{3,1,-1,1,4,-1,-1};
  try {
    JSONObject map=m_data.getJSONObject(""String_Node_Str"");
    for (int i=0; i < copy_keys.length; i++) {
      if (map.has(copy_keys[i]))       copy_map[i]=map.getInt(copy_keys[i]);
    }
  }
 catch (  Exception e) {
  }
  for (  Element row : rows) {
    Elements columns=row.children();
    if (columns.size() == 2) {
      String firstColumn=columns.get(0).text().replace(""String_Node_Str"",""String_Node_Str"").trim();
      String secondColumn=columns.get(1).text().replace(""String_Node_Str"",""String_Node_Str"").trim();
      if (firstColumn.length() > 0) {
        if (firstColumn.equalsIgnoreCase(""String_Node_Str"")) {
          detail=null;
          item.setTitle(secondColumn);
        }
 else {
          if (secondColumn.contains(""String_Node_Str"") && columns.get(1).select(""String_Node_Str"").size() > 0) {
            secondColumn+=""String_Node_Str"" + columns.get(1).select(""String_Node_Str"").first().attr(""String_Node_Str"");
          }
          detail=new Detail(firstColumn,secondColumn);
          item.getDetails().add(detail);
        }
      }
 else {
        if (detail != null) {
          String content=detail.getContent() + ""String_Node_Str"" + secondColumn;
          detail.setContent(content);
        }
 else {
          if (columns.get(0).select(""String_Node_Str"").size() > 0) {
            item.setCover(columns.get(0).select(""String_Node_Str"").first().attr(""String_Node_Str""));
          }
        }
      }
    }
 else     if (columns.size() > 3) {
      if (copy_row > 0) {
        Map<String,String> e=new HashMap<String,String>();
        for (int j=0; j < copy_keys.length; j++) {
          int col=copy_map[j];
          if (col > -1) {
            String text=""String_Node_Str"";
            if (copy_keys[j].equals(DetailledItem.KEY_COPY_BRANCH)) {
              text=columns.get(col).ownText().replace(""String_Node_Str"",""String_Node_Str"").trim();
            }
            if (text.length() == 0) {
              text=columns.get(col).text().replace(""String_Node_Str"",""String_Node_Str"").trim();
            }
            if (text.length() == 0) {
              if (copy_keys[j].equals(DetailledItem.KEY_COPY_STATUS)) {
                text=""String_Node_Str"";
              }
 else {
                if (copy_last_content != null)                 text=copy_last_content.get(copy_keys[j]);
 else                 text=""String_Node_Str"";
              }
            }
            e.put(copy_keys[j],text);
          }
        }
        if (e.containsKey(DetailledItem.KEY_COPY_BRANCH) && e.containsKey(DetailledItem.KEY_COPY_LOCATION) && e.get(DetailledItem.KEY_COPY_LOCATION).equals(e.get(DetailledItem.KEY_COPY_BRANCH)))         e.remove(DetailledItem.KEY_COPY_LOCATION);
        item.addCopy(e);
        copy_last_content=e;
      }
      copy_row++;
    }
  }
  item.setReservable(true);
  if (m_opac_dir.equals(""String_Node_Str"")) {
    if (document.select(""String_Node_Str"").size() > 0) {
      item.setReservation_info(document.select(""String_Node_Str"").first().attr(""String_Node_Str""));
    }
 else     if (document.select(""String_Node_Str"").size() > 0) {
      String href=document.select(""String_Node_Str"").first().attr(""String_Node_Str"");
      item.setReservation_info(href.substring(href.indexOf(""String_Node_Str"")));
    }
 else {
      item.setReservable(false);
    }
  }
 else {
    item.setReservation_info(document.select(""String_Node_Str"").attr(""String_Node_Str""));
  }
  return item;
}"
86289,"public void search(String query){
  LibraryListFragment fragment=new LocatedLibraryListFragment();
  Bundle args=new Bundle();
  args.putInt(""String_Node_Str"",LEVEL_LIBRARY);
  fragment.setArguments(args);
  Set<LibrarySearchResult> data=new HashSet<LibrarySearchResult>();
  query=query.toLowerCase(Locale.GERMAN);
  for (  Library lib : libraries) {
    int rank=0;
    if (lib.getCity().toLowerCase(Locale.GERMAN).contains(query))     rank+=3;
    if (lib.getTitle().toLowerCase(Locale.GERMAN).contains(query))     rank+=3;
    if (lib.getState().toLowerCase(Locale.GERMAN).contains(query))     rank+=2;
    if (lib.getCountry().toLowerCase(Locale.GERMAN).contains(query))     rank+=1;
    if (rank > 0) {
      data.add(new LibrarySearchResult(lib,rank));
    }
  }
  List<LibrarySearchResult> list=new ArrayList<LibrarySearchResult>(data);
  Collections.sort(list);
  List<Library> libraries=new ArrayList<Library>();
  for (  LibrarySearchResult sr : list) {
    libraries.add(sr.getLibrary());
  }
  LibraryAdapter adapter=new LibraryAdapter(this,R.layout.listitem_library,R.id.tvTitle,libraries);
  fragment.setListAdapter(adapter);
  if (findViewById(R.id.llFragments) != null) {
    fragment4=fragment;
    getSupportFragmentManager().beginTransaction().replace(R.id.container4,fragment4).commit();
  }
 else {
    this.fragment=fragment;
    getSupportFragmentManager().beginTransaction().replace(R.id.container,fragment).addToBackStack(null).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN).commit();
  }
  TextView tvLocateString=(TextView)findViewById(R.id.tvLocateString);
  ImageView ivLocationIcon=(ImageView)findViewById(R.id.ivLocationIcon);
  tvLocateString.setText(R.string.alphabetic_list);
  ivLocationIcon.setImageResource(R.drawable.ic_list);
}","public void search(String query){
  fragment=new LocatedLibraryListFragment();
  Bundle args=new Bundle();
  args.putInt(""String_Node_Str"",LEVEL_LIBRARY);
  fragment.setArguments(args);
  Set<LibrarySearchResult> data=new HashSet<LibrarySearchResult>();
  query=query.toLowerCase(Locale.GERMAN);
  for (  Library lib : libraries) {
    int rank=0;
    if (lib.getCity().toLowerCase(Locale.GERMAN).contains(query))     rank+=3;
    if (lib.getTitle().toLowerCase(Locale.GERMAN).contains(query))     rank+=3;
    if (lib.getState().toLowerCase(Locale.GERMAN).contains(query))     rank+=2;
    if (lib.getCountry().toLowerCase(Locale.GERMAN).contains(query))     rank+=1;
    if (rank > 0) {
      data.add(new LibrarySearchResult(lib,rank));
    }
  }
  List<LibrarySearchResult> list=new ArrayList<LibrarySearchResult>(data);
  Collections.sort(list);
  List<Library> libraries=new ArrayList<Library>();
  for (  LibrarySearchResult sr : list) {
    libraries.add(sr.getLibrary());
  }
  LibraryAdapter adapter=new LibraryAdapter(this,R.layout.listitem_library,R.id.tvTitle,libraries);
  fragment.setListAdapter(adapter);
  getSupportFragmentManager().beginTransaction().addToBackStack(null).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE).replace(R.id.container,fragment).commit();
  if (fragment2 != null)   getSupportFragmentManager().beginTransaction().detach(fragment2).commit();
  if (fragment3 != null)   getSupportFragmentManager().beginTransaction().detach(fragment3).commit();
  if (fragment4 != null)   getSupportFragmentManager().beginTransaction().detach(fragment4).commit();
  TextView tvLocateString=(TextView)findViewById(R.id.tvLocateString);
  ImageView ivLocationIcon=(ImageView)findViewById(R.id.ivLocationIcon);
  tvLocateString.setText(R.string.alphabetic_list);
  ivLocationIcon.setImageResource(R.drawable.ic_list);
}"
86290,"@Override public void onCreate(Bundle savedInstanceState){
  supportRequestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  super.onCreate(savedInstanceState);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  listFragment=SearchResultListFragment.getInstance(getIntent().getBundleExtra(""String_Node_Str""));
  getSupportFragmentManager().beginTransaction().replace(R.id.searchresult_list_container,listFragment).commit();
  if (findViewById(R.id.searchresult_detail_container) != null) {
    mTwoPane=true;
    listFragment.setActivateOnItemClick(true);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  supportRequestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  super.onCreate(savedInstanceState);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  listFragment=SearchResultListFragment.getInstance(getIntent().getBundleExtra(""String_Node_Str""));
  getSupportFragmentManager().beginTransaction().replace(R.id.searchresult_list_container,listFragment).commit();
  if (findViewById(R.id.searchresult_detail_container) != null) {
    mTwoPane=true;
  }
}"
86291,"@Override protected Object[] doInBackground(Object... params){
  AccountDataSource data=new AccountDataSource(ReminderCheckService.this);
  data.open();
  List<Account> accounts=data.getAccountsWithPassword();
  if (accounts.size() == 0)   return null;
  Log.i(""String_Node_Str"",""String_Node_Str"");
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(ReminderCheckService.this);
  long now=new Date().getTime();
  long warning=Long.decode(sp.getString(""String_Node_Str"",""String_Node_Str""));
  long expired_new=0;
  long expired_total=0;
  long affected_accounts=0;
  long first=0;
  long first_affected_account=0;
  Bundle notified=new Bundle();
  OpacClient app=(OpacClient)getApplication();
  for (  Account account : accounts) {
    Log.i(""String_Node_Str"",""String_Node_Str"" + account.toString());
    try {
      Library library=app.getLibrary(account.getLibrary());
      OpacApi api=app.getNewApi(library);
      if (!api.isAccountSupported(library))       continue;
      AccountData res=api.account(account);
      if (res == null)       continue;
      data.storeCachedAccountData(account,res);
      int this_account=0;
      for (      ContentValues item : res.getLent()) {
        if (item.containsKey(AccountData.KEY_LENT_DOWNLOAD)) {
          if (item.getAsString(AccountData.KEY_LENT_DOWNLOAD).startsWith(""String_Node_Str""))           continue;
        }
        if (item.containsKey(AccountData.KEY_LENT_DEADLINE_TIMESTAMP)) {
          long expiring=item.getAsLong(AccountData.KEY_LENT_DEADLINE_TIMESTAMP);
          if ((expiring - now) < warning) {
            expired_total++;
            if (!data.notificationIsSent(account.getId(),expiring)) {
              expired_new++;
            }
            this_account++;
          }
          notified.putLongArray(account.getId() + ""String_Node_Str"" + expiring,new long[]{account.getId(),expiring});
          if (expiring < first || first == 0) {
            first=expiring;
          }
        }
      }
      if (this_account > 0) {
        affected_accounts++;
        if (first_affected_account == 0)         first_affected_account=account.getId();
      }
    }
 catch (    ClientProtocolException e) {
      e.printStackTrace();
    }
catch (    SocketException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
catch (    Exception e) {
      ACRA.getErrorReporter().handleException(e);
    }
  }
  data.close();
  return new Object[]{expired_new,expired_total,notified,first,affected_accounts,first_affected_account};
}","@Override protected Object[] doInBackground(Object... params){
  AccountDataSource data=new AccountDataSource(ReminderCheckService.this);
  data.open();
  List<Account> accounts=data.getAccountsWithPassword();
  if (accounts.size() == 0)   return null;
  Log.i(""String_Node_Str"",""String_Node_Str"");
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(ReminderCheckService.this);
  long now=new Date().getTime();
  long warning=Long.decode(sp.getString(""String_Node_Str"",""String_Node_Str""));
  long expired_new=0;
  long expired_total=0;
  long affected_accounts=0;
  long first=0;
  long first_affected_account=0;
  Bundle notified=new Bundle();
  OpacClient app=(OpacClient)getApplication();
  for (  Account account : accounts) {
    Log.i(""String_Node_Str"",""String_Node_Str"" + account.toString());
    try {
      Library library=app.getLibrary(account.getLibrary());
      OpacApi api=app.getNewApi(library);
      if (!api.isAccountSupported(library))       continue;
      AccountData res=api.account(account);
      if (res == null)       continue;
      data.storeCachedAccountData(account,res);
      int this_account=0;
      for (      ContentValues item : res.getLent()) {
        if (item.containsKey(AccountData.KEY_LENT_DOWNLOAD)) {
          if (item.getAsString(AccountData.KEY_LENT_DOWNLOAD).startsWith(""String_Node_Str""))           continue;
        }
        if (item.containsKey(AccountData.KEY_LENT_DEADLINE_TIMESTAMP)) {
          long expiring=item.getAsLong(AccountData.KEY_LENT_DEADLINE_TIMESTAMP);
          if ((expiring - now) < warning) {
            expired_total++;
            if (!data.notificationIsSent(account.getId(),expiring)) {
              expired_new++;
            }
            this_account++;
          }
          notified.putLongArray(account.getId() + ""String_Node_Str"" + expiring,new long[]{account.getId(),expiring});
          if (expiring < first || first == 0) {
            first=expiring;
          }
        }
      }
      if (this_account > 0) {
        affected_accounts++;
        if (first_affected_account == 0)         first_affected_account=account.getId();
      }
    }
 catch (    ClientProtocolException e) {
      e.printStackTrace();
    }
catch (    SocketException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
catch (    OpacErrorException e) {
      e.printStackTrace();
    }
catch (    Exception e) {
      ACRA.getErrorReporter().handleException(e);
    }
  }
  data.close();
  return new Object[]{expired_new,expired_total,notified,first,affected_accounts,first_affected_account};
}"
86292,"public void showListCities(String country,String state){
  LibraryListFragment fragment=new LibraryListFragment();
  Bundle args=new Bundle();
  args.putInt(""String_Node_Str"",LEVEL_CITY);
  args.putString(""String_Node_Str"",country);
  args.putString(""String_Node_Str"",state);
  fragment.setArguments(args);
  Set<String> data=new HashSet<String>();
  for (  Library lib : libraries) {
    if (country.equals(lib.getCountry()) && state.equals(lib.getState()) && !data.contains(lib.getCity())) {
      data.add(lib.getCity());
    }
  }
  List<String> list=new ArrayList<String>(data);
  if (data.size() == 1 && list.get(0).equals(state)) {
    showListLibraries(country,state,list.get(0));
  }
  Collections.sort(list);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,R.layout.listitem_simple,R.id.text1,list);
  fragment.setListAdapter(adapter);
  if (findViewById(R.id.llFragments) != null) {
    fragment3=fragment;
    getSupportFragmentManager().beginTransaction().replace(R.id.container3,fragment3).commit();
    if (fragment4 != null)     getSupportFragmentManager().beginTransaction().detach(fragment4).commit();
  }
 else   if (data.size() > 1) {
    this.fragment=fragment;
    getSupportFragmentManager().beginTransaction().replace(R.id.container,fragment).addToBackStack(null).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN).commit();
  }
}","public void showListCities(String country,String state){
  LibraryListFragment fragment=new LibraryListFragment();
  Bundle args=new Bundle();
  args.putInt(""String_Node_Str"",LEVEL_CITY);
  args.putString(""String_Node_Str"",country);
  args.putString(""String_Node_Str"",state);
  fragment.setArguments(args);
  Set<String> data=new HashSet<String>();
  for (  Library lib : libraries) {
    if (country.equals(lib.getCountry()) && state.equals(lib.getState()) && !data.contains(lib.getCity())) {
      data.add(lib.getCity());
    }
  }
  List<String> list=new ArrayList<String>(data);
  if (data.size() == 1 && list.get(0).equals(state)) {
    showListLibraries(country,state,list.get(0));
  }
  Collections.sort(list);
  ArrayAdapter<String> adapter=new ArrayAdapter<String>(this,R.layout.listitem_simple,R.id.text1,list);
  fragment.setListAdapter(adapter);
  if (findViewById(R.id.llFragments) != null) {
    fragment3=fragment;
    getSupportFragmentManager().beginTransaction().replace(R.id.container3,fragment3).commit();
    if (fragment4 != null)     getSupportFragmentManager().beginTransaction().detach(fragment4).commit();
  }
 else   if (data.size() > 1 || !list.get(0).equals(state)) {
    this.fragment=fragment;
    getSupportFragmentManager().beginTransaction().replace(R.id.container,fragment).addToBackStack(null).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN).commit();
  }
}"
86293,"@Override public CancelResult cancel(String media,Account account,int useraction,String selection) throws IOException, OpacErrorException {
  List<NameValuePair> params=new ArrayList<NameValuePair>();
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
  params.add(new BasicNameValuePair(""String_Node_Str"",pwEncoded));
  params.add(new BasicNameValuePair(""String_Node_Str"",media));
  String html=httpPost(https_url + ""String_Node_Str"" + db+ ""String_Node_Str"",new UrlEncodedFormEntity(params,""String_Node_Str""),getDefaultEncoding());
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").text().contains(""String_Node_Str"")) {
    return new CancelResult(MultiStepResult.Status.OK);
  }
 else   if (doc.select(""String_Node_Str"").text().contains(""String_Node_Str"")) {
    try {
      account(account);
      return cancel(media,account,useraction,selection);
    }
 catch (    JSONException e) {
      throw new OpacErrorException(""String_Node_Str"");
    }
  }
 else {
    throw new OpacErrorException(""String_Node_Str"");
  }
}","@Override public CancelResult cancel(String media,Account account,int useraction,String selection) throws IOException, OpacErrorException {
  List<NameValuePair> params=new ArrayList<NameValuePair>();
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
  params.add(new BasicNameValuePair(""String_Node_Str"",pwEncoded));
  params.add(new BasicNameValuePair(""String_Node_Str"",media));
  String html=httpPost(https_url + ""String_Node_Str"" + db+ ""String_Node_Str"",new UrlEncodedFormEntity(params,getDefaultEncoding()),getDefaultEncoding());
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").text().contains(""String_Node_Str"")) {
    return new CancelResult(MultiStepResult.Status.OK);
  }
 else   if (doc.select(""String_Node_Str"").text().contains(""String_Node_Str"")) {
    try {
      account(account);
      return cancel(media,account,useraction,selection);
    }
 catch (    JSONException e) {
      throw new OpacErrorException(""String_Node_Str"");
    }
  }
 else {
    throw new OpacErrorException(""String_Node_Str"");
  }
}"
86294,"@Override public SearchRequestResult searchGetPage(int page) throws IOException, NotReachableException, OpacErrorException {
  if (!initialised)   start();
  String html=httpGet(opac_url + ""String_Node_Str"" + db+ ""String_Node_Str""+ searchSet+ ""String_Node_Str""+ (((page - 1) * resultcount) + 1),ENCODING,false,cookieStore);
  return parse_search(html,page);
}","@Override public SearchRequestResult searchGetPage(int page) throws IOException, NotReachableException, OpacErrorException {
  if (!initialised)   start();
  String html=httpGet(opac_url + ""String_Node_Str"" + db+ ""String_Node_Str""+ searchSet+ ""String_Node_Str""+ (((page - 1) * resultcount) + 1),getDefaultEncoding(),false,cookieStore);
  return parse_search(html,page);
}"
86295,"@Override protected String getDefaultEncoding(){
  try {
    if (data.has(""String_Node_Str""))     return data.getString(""String_Node_Str"");
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return super.getDefaultEncoding();
}","@Override protected String getDefaultEncoding(){
  try {
    if (data.has(""String_Node_Str""))     return data.getString(""String_Node_Str"");
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  return ""String_Node_Str"";
}"
86296,"@Override public SearchRequestResult search(Bundle query) throws IOException, NotReachableException, OpacErrorException {
  List<NameValuePair> params=new ArrayList<NameValuePair>();
  int index=0;
  start();
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  index=addParameters(query,KEY_SEARCH_QUERY_FREE,""String_Node_Str"",params,index);
  index=addParameters(query,KEY_SEARCH_QUERY_AUTHOR,""String_Node_Str"",params,index);
  index=addParameters(query,KEY_SEARCH_QUERY_KEYWORDA,""String_Node_Str"",params,index);
  index=addParameters(query,KEY_SEARCH_QUERY_KEYWORDB,""String_Node_Str"",params,index);
  index=addParameters(query,KEY_SEARCH_QUERY_PUBLISHER,""String_Node_Str"",params,index);
  index=addParameters(query,KEY_SEARCH_QUERY_SYSTEM,""String_Node_Str"",params,index);
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",query.getString(KEY_SEARCH_QUERY_YEAR)));
  if (index == 0) {
    throw new OpacErrorException(""String_Node_Str"");
  }
  if (index > 4) {
    throw new OpacErrorException(""String_Node_Str"");
  }
  String html=httpGet(opac_url + ""String_Node_Str"" + db+ ""String_Node_Str""+ URLEncodedUtils.format(params,""String_Node_Str""),ENCODING,false,cookieStore);
  return parse_search(html,1);
}","@Override public SearchRequestResult search(Bundle query) throws IOException, NotReachableException, OpacErrorException {
  List<NameValuePair> params=new ArrayList<NameValuePair>();
  int index=0;
  start();
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  index=addParameters(query,KEY_SEARCH_QUERY_FREE,""String_Node_Str"",params,index);
  index=addParameters(query,KEY_SEARCH_QUERY_AUTHOR,""String_Node_Str"",params,index);
  index=addParameters(query,KEY_SEARCH_QUERY_KEYWORDA,""String_Node_Str"",params,index);
  index=addParameters(query,KEY_SEARCH_QUERY_KEYWORDB,""String_Node_Str"",params,index);
  index=addParameters(query,KEY_SEARCH_QUERY_PUBLISHER,""String_Node_Str"",params,index);
  index=addParameters(query,KEY_SEARCH_QUERY_SYSTEM,""String_Node_Str"",params,index);
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",query.getString(KEY_SEARCH_QUERY_YEAR)));
  if (index == 0) {
    throw new OpacErrorException(""String_Node_Str"");
  }
  if (index > 4) {
    throw new OpacErrorException(""String_Node_Str"");
  }
  String html=httpGet(opac_url + ""String_Node_Str"" + db+ ""String_Node_Str""+ URLEncodedUtils.format(params,getDefaultEncoding()),getDefaultEncoding(),false,cookieStore);
  return parse_search(html,1);
}"
86297,"protected SearchRequestResult parse_search(String html,int page) throws OpacErrorException {
  Document doc=Jsoup.parse(html);
  updateSearchSetValue(doc);
  if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").text().trim().equals(""String_Node_Str"")) {
      return new SearchRequestResult(new ArrayList<SearchResult>(),0,1,1);
    }
 else {
      throw new OpacErrorException(doc.select(""String_Node_Str"").first().text().trim());
    }
  }
  reusehtml=html;
  int results_total=-1;
  String resultnumstr=doc.select(""String_Node_Str"").first().text();
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher m=p.matcher(resultnumstr);
  if (m.find()) {
    resultnumstr=m.group();
  }
  if (resultnumstr.contains(""String_Node_Str"")) {
    results_total=Integer.parseInt(resultnumstr.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (resultnumstr.contains(""String_Node_Str"")) {
    results_total=Integer.parseInt(resultnumstr.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    results_total=Integer.parseInt(resultnumstr);
  }
  List<SearchResult> results=new ArrayList<SearchResult>();
  if (results_total == 1) {
    try {
      DetailledItem singleResult=parse_result(html);
      SearchResult sr=new SearchResult();
      sr.setType(getMediaTypeInSingleResult(html));
      sr.setInnerhtml(""String_Node_Str"" + singleResult.getTitle() + ""String_Node_Str""+ singleResult.getDetails().get(0).getContent());
      results.add(sr);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  Elements table=doc.select(""String_Node_Str"");
  Elements links=doc.select(""String_Node_Str"");
  boolean haslink=false;
  for (int i=0; i < links.size(); i++) {
    Element node=links.get(i);
    if (node.hasAttr(""String_Node_Str"") & node.attr(""String_Node_Str"").contains(""String_Node_Str"") && !haslink) {
      haslink=true;
      try {
        List<NameValuePair> anyurl=URLEncodedUtils.parse(new URI(node.attr(""String_Node_Str"")),ENCODING);
        for (        NameValuePair nv : anyurl) {
          if (nv.getName().equals(""String_Node_Str"")) {
            break;
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  for (int i=0; i < table.size(); i++) {
    Element tr=table.get(i);
    SearchResult sr=new SearchResult();
    if (tr.select(""String_Node_Str"").size() > 0) {
      String[] fparts=tr.select(""String_Node_Str"").get(0).attr(""String_Node_Str"").split(""String_Node_Str"");
      String fname=fparts[fparts.length - 1];
      if (data.has(""String_Node_Str"")) {
        try {
          sr.setType(MediaType.valueOf(data.getJSONObject(""String_Node_Str"").getString(fname)));
        }
 catch (        JSONException e) {
          sr.setType(defaulttypes.get(fname.toLowerCase(Locale.GERMAN).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")));
        }
catch (        IllegalArgumentException e) {
          sr.setType(defaulttypes.get(fname.toLowerCase(Locale.GERMAN).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")));
        }
      }
 else {
        sr.setType(defaulttypes.get(fname.toLowerCase(Locale.GERMAN).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")));
      }
    }
    Element middlething=tr.child(2);
    List<Node> children=middlething.childNodes();
    int childrennum=children.size();
    List<String[]> strings=new ArrayList<String[]>();
    for (int ch=0; ch < childrennum; ch++) {
      Node node=children.get(ch);
      if (node instanceof TextNode) {
        String text=((TextNode)node).text().trim();
        if (text.length() > 3)         strings.add(new String[]{""String_Node_Str"",""String_Node_Str"",text});
      }
 else       if (node instanceof Element) {
        List<Node> subchildren=node.childNodes();
        for (int j=0; j < subchildren.size(); j++) {
          Node subnode=subchildren.get(j);
          if (subnode instanceof TextNode) {
            String text=((TextNode)subnode).text().trim();
            if (text.length() > 3)             strings.add(new String[]{((Element)node).tag().getName(),""String_Node_Str"",text,((Element)node).className(),((Element)node).attr(""String_Node_Str"")});
          }
 else           if (subnode instanceof Element) {
            String text=((Element)subnode).text().trim();
            if (text.length() > 3)             strings.add(new String[]{((Element)node).tag().getName(),((Element)subnode).tag().getName(),text,((Element)node).className(),((Element)node).attr(""String_Node_Str"")});
          }
        }
      }
    }
    StringBuilder description=new StringBuilder();
    int k=0;
    for (    String[] part : strings) {
      if (part[0] == ""String_Node_Str"" && k == 0) {
        description.append(""String_Node_Str"" + part[2] + ""String_Node_Str"");
      }
 else       if (k < 3) {
        description.append(""String_Node_Str"" + part[2]);
      }
      k++;
    }
    sr.setInnerhtml(description.toString());
    sr.setNr(10 * (page - 1) + i);
    sr.setId(null);
    results.add(sr);
  }
  resultcount=results.size();
  return new SearchRequestResult(results,results_total,page);
}","protected SearchRequestResult parse_search(String html,int page) throws OpacErrorException {
  Document doc=Jsoup.parse(html);
  updateSearchSetValue(doc);
  if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").text().trim().equals(""String_Node_Str"")) {
      return new SearchRequestResult(new ArrayList<SearchResult>(),0,1,1);
    }
 else {
      throw new OpacErrorException(doc.select(""String_Node_Str"").first().text().trim());
    }
  }
  reusehtml=html;
  int results_total=-1;
  String resultnumstr=doc.select(""String_Node_Str"").first().text();
  Pattern p=Pattern.compile(""String_Node_Str"");
  Matcher m=p.matcher(resultnumstr);
  if (m.find()) {
    resultnumstr=m.group();
  }
  if (resultnumstr.contains(""String_Node_Str"")) {
    results_total=Integer.parseInt(resultnumstr.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
 else   if (resultnumstr.contains(""String_Node_Str"")) {
    results_total=Integer.parseInt(resultnumstr.replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
 else {
    results_total=Integer.parseInt(resultnumstr);
  }
  List<SearchResult> results=new ArrayList<SearchResult>();
  if (results_total == 1) {
    try {
      DetailledItem singleResult=parse_result(html);
      SearchResult sr=new SearchResult();
      sr.setType(getMediaTypeInSingleResult(html));
      sr.setInnerhtml(""String_Node_Str"" + singleResult.getTitle() + ""String_Node_Str""+ singleResult.getDetails().get(0).getContent());
      results.add(sr);
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  Elements table=doc.select(""String_Node_Str"");
  Elements links=doc.select(""String_Node_Str"");
  boolean haslink=false;
  for (int i=0; i < links.size(); i++) {
    Element node=links.get(i);
    if (node.hasAttr(""String_Node_Str"") & node.attr(""String_Node_Str"").contains(""String_Node_Str"") && !haslink) {
      haslink=true;
      try {
        List<NameValuePair> anyurl=URLEncodedUtils.parse(new URI(node.attr(""String_Node_Str"")),getDefaultEncoding());
        for (        NameValuePair nv : anyurl) {
          if (nv.getName().equals(""String_Node_Str"")) {
            break;
          }
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
  for (int i=0; i < table.size(); i++) {
    Element tr=table.get(i);
    SearchResult sr=new SearchResult();
    if (tr.select(""String_Node_Str"").size() > 0) {
      String[] fparts=tr.select(""String_Node_Str"").get(0).attr(""String_Node_Str"").split(""String_Node_Str"");
      String fname=fparts[fparts.length - 1];
      if (data.has(""String_Node_Str"")) {
        try {
          sr.setType(MediaType.valueOf(data.getJSONObject(""String_Node_Str"").getString(fname)));
        }
 catch (        JSONException e) {
          sr.setType(defaulttypes.get(fname.toLowerCase(Locale.GERMAN).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")));
        }
catch (        IllegalArgumentException e) {
          sr.setType(defaulttypes.get(fname.toLowerCase(Locale.GERMAN).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")));
        }
      }
 else {
        sr.setType(defaulttypes.get(fname.toLowerCase(Locale.GERMAN).replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")));
      }
    }
    Element middlething=tr.child(2);
    List<Node> children=middlething.childNodes();
    int childrennum=children.size();
    List<String[]> strings=new ArrayList<String[]>();
    for (int ch=0; ch < childrennum; ch++) {
      Node node=children.get(ch);
      if (node instanceof TextNode) {
        String text=((TextNode)node).text().trim();
        if (text.length() > 3)         strings.add(new String[]{""String_Node_Str"",""String_Node_Str"",text});
      }
 else       if (node instanceof Element) {
        List<Node> subchildren=node.childNodes();
        for (int j=0; j < subchildren.size(); j++) {
          Node subnode=subchildren.get(j);
          if (subnode instanceof TextNode) {
            String text=((TextNode)subnode).text().trim();
            if (text.length() > 3)             strings.add(new String[]{((Element)node).tag().getName(),""String_Node_Str"",text,((Element)node).className(),((Element)node).attr(""String_Node_Str"")});
          }
 else           if (subnode instanceof Element) {
            String text=((Element)subnode).text().trim();
            if (text.length() > 3)             strings.add(new String[]{((Element)node).tag().getName(),((Element)subnode).tag().getName(),text,((Element)node).className(),((Element)node).attr(""String_Node_Str"")});
          }
        }
      }
    }
    StringBuilder description=new StringBuilder();
    int k=0;
    for (    String[] part : strings) {
      if (part[0] == ""String_Node_Str"" && k == 0) {
        description.append(""String_Node_Str"" + part[2] + ""String_Node_Str"");
      }
 else       if (k < 3) {
        description.append(""String_Node_Str"" + part[2]);
      }
      k++;
    }
    sr.setInnerhtml(description.toString());
    sr.setNr(10 * (page - 1) + i);
    sr.setId(null);
    results.add(sr);
  }
  resultcount=results.size();
  return new SearchRequestResult(results,results_total,page);
}"
86298,"@Override public DetailledItem getResultById(String id,String homebranch) throws IOException, NotReachableException {
  if (id == null && reusehtml != null) {
    return parse_result(reusehtml);
  }
  String html=httpGet(id,ENCODING);
  return parse_result(html);
}","@Override public DetailledItem getResultById(String id,String homebranch) throws IOException, NotReachableException {
  if (id == null && reusehtml != null) {
    return parse_result(reusehtml);
  }
  String html=httpGet(id,getDefaultEncoding());
  return parse_result(html);
}"
86299,"@Override public DetailledItem getResult(int position) throws IOException {
  String html=httpGet(opac_url + ""String_Node_Str"" + db+ ""String_Node_Str""+ searchSet+ ""String_Node_Str""+ (position + 1),ENCODING,false,cookieStore);
  return parse_result(html);
}","@Override public DetailledItem getResult(int position) throws IOException {
  String html=httpGet(opac_url + ""String_Node_Str"" + db+ ""String_Node_Str""+ searchSet+ ""String_Node_Str""+ (position + 1),getDefaultEncoding(),false,cookieStore);
  return parse_result(html);
}"
86300,"@Override public ProlongResult prolong(String media,Account account,int useraction,String Selection) throws IOException {
  List<NameValuePair> params=new ArrayList<NameValuePair>();
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
  params.add(new BasicNameValuePair(""String_Node_Str"",pwEncoded));
  params.add(new BasicNameValuePair(""String_Node_Str"",media));
  String html=httpPost(https_url + ""String_Node_Str"" + db+ ""String_Node_Str"",new UrlEncodedFormEntity(params,""String_Node_Str""),getDefaultEncoding());
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").text().contains(""String_Node_Str"")) {
    return new ProlongResult(MultiStepResult.Status.OK);
  }
 else   if (doc.select(""String_Node_Str"").text().contains(""String_Node_Str"")) {
    try {
      account(account);
      return prolong(media,account,useraction,Selection);
    }
 catch (    JSONException e) {
      return new ProlongResult(MultiStepResult.Status.ERROR);
    }
catch (    OpacErrorException e) {
      return new ProlongResult(MultiStepResult.Status.ERROR,e.getMessage());
    }
  }
 else {
    ProlongResult res=new ProlongResult(MultiStepResult.Status.ERROR);
    res.setMessage(doc.select(""String_Node_Str"").text());
    return res;
  }
}","@Override public ProlongResult prolong(String media,Account account,int useraction,String Selection) throws IOException {
  List<NameValuePair> params=new ArrayList<NameValuePair>();
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
  params.add(new BasicNameValuePair(""String_Node_Str"",pwEncoded));
  params.add(new BasicNameValuePair(""String_Node_Str"",media));
  String html=httpPost(https_url + ""String_Node_Str"" + db+ ""String_Node_Str"",new UrlEncodedFormEntity(params,getDefaultEncoding()),getDefaultEncoding());
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").text().contains(""String_Node_Str"")) {
    return new ProlongResult(MultiStepResult.Status.OK);
  }
 else   if (doc.select(""String_Node_Str"").text().contains(""String_Node_Str"")) {
    try {
      account(account);
      return prolong(media,account,useraction,Selection);
    }
 catch (    JSONException e) {
      return new ProlongResult(MultiStepResult.Status.ERROR);
    }
catch (    OpacErrorException e) {
      return new ProlongResult(MultiStepResult.Status.ERROR,e.getMessage());
    }
  }
 else {
    ProlongResult res=new ProlongResult(MultiStepResult.Status.ERROR);
    res.setMessage(doc.select(""String_Node_Str"").text());
    return res;
  }
}"
86301,"@Override public AccountData account(Account account) throws IOException, JSONException, OpacErrorException {
  List<NameValuePair> params=new ArrayList<NameValuePair>();
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
  params.add(new BasicNameValuePair(""String_Node_Str"",account.getPassword()));
  String html=httpPost(https_url + ""String_Node_Str"" + db+ ""String_Node_Str"",new UrlEncodedFormEntity(params,""String_Node_Str""),getDefaultEncoding());
  Document doc=Jsoup.parse(html);
  pwEncoded=doc.select(""String_Node_Str"").attr(""String_Node_Str"");
  pwEncoded=pwEncoded.substring(pwEncoded.indexOf(""String_Node_Str"") + 7);
  html=httpGet(https_url + ""String_Node_Str"" + db+ ""String_Node_Str""+ account.getName()+ ""String_Node_Str""+ pwEncoded,getDefaultEncoding());
  doc=Jsoup.parse(html);
  html=httpGet(https_url + ""String_Node_Str"" + db+ ""String_Node_Str""+ account.getName()+ ""String_Node_Str""+ pwEncoded,getDefaultEncoding());
  Document doc2=Jsoup.parse(html);
  pwEncoded=doc.select(""String_Node_Str"").attr(""String_Node_Str"");
  AccountData res=new AccountData(account.getId());
  List<ContentValues> medien=new ArrayList<ContentValues>();
  List<ContentValues> reserved=new ArrayList<ContentValues>();
  if (doc.select(""String_Node_Str"").size() > 0) {
    parse_medialist(medien,doc,1,account.getName());
  }
  if (doc2.select(""String_Node_Str"").size() > 0) {
    parse_reslist(reserved,doc2,1);
  }
  res.setLent(medien);
  res.setReservations(reserved);
  if (medien == null || reserved == null) {
    throw new OpacErrorException(""String_Node_Str"");
  }
  return res;
}","@Override public AccountData account(Account account) throws IOException, JSONException, OpacErrorException {
  List<NameValuePair> params=new ArrayList<NameValuePair>();
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  params.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
  params.add(new BasicNameValuePair(""String_Node_Str"",account.getPassword()));
  String html=httpPost(https_url + ""String_Node_Str"" + db+ ""String_Node_Str"",new UrlEncodedFormEntity(params,getDefaultEncoding()),getDefaultEncoding());
  Document doc=Jsoup.parse(html);
  pwEncoded=doc.select(""String_Node_Str"").attr(""String_Node_Str"");
  pwEncoded=pwEncoded.substring(pwEncoded.indexOf(""String_Node_Str"") + 7);
  html=httpGet(https_url + ""String_Node_Str"" + db+ ""String_Node_Str""+ account.getName()+ ""String_Node_Str""+ pwEncoded,getDefaultEncoding());
  doc=Jsoup.parse(html);
  html=httpGet(https_url + ""String_Node_Str"" + db+ ""String_Node_Str""+ account.getName()+ ""String_Node_Str""+ pwEncoded,getDefaultEncoding());
  Document doc2=Jsoup.parse(html);
  pwEncoded=doc.select(""String_Node_Str"").attr(""String_Node_Str"");
  AccountData res=new AccountData(account.getId());
  List<ContentValues> medien=new ArrayList<ContentValues>();
  List<ContentValues> reserved=new ArrayList<ContentValues>();
  if (doc.select(""String_Node_Str"").size() > 0) {
    parse_medialist(medien,doc,1,account.getName());
  }
  if (doc2.select(""String_Node_Str"").size() > 0) {
    parse_reslist(reserved,doc2,1);
  }
  res.setLent(medien);
  res.setReservations(reserved);
  if (medien == null || reserved == null) {
    throw new OpacErrorException(""String_Node_Str"");
  }
  return res;
}"
86302,"@Override public void onCreate(Bundle savedInstanceState){
  supportRequestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  super.onCreate(savedInstanceState);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  listFragment=(SearchResultListFragment)getSupportFragmentManager().findFragmentById(R.id.searchresult_list);
  if (findViewById(R.id.searchresult_detail_container) != null) {
    mTwoPane=true;
    listFragment.setActivateOnItemClick(true);
  }
  if (savedInstanceState == null) {
    page=1;
    performsearch();
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  supportRequestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  super.onCreate(savedInstanceState);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  listFragment=(SearchResultListFragment)getSupportFragmentManager().findFragmentById(R.id.searchresult_list);
  if (findViewById(R.id.searchresult_detail_container) != null) {
    mTwoPane=true;
    listFragment.setActivateOnItemClick(true);
  }
  if (savedInstanceState == null) {
    performsearch();
  }
}"
86303,"/** 
 * Callback method from   {@link SearchResultListFragment.Callbacks}indicating that the item with the given ID was selected.
 */
@Override public void onItemSelected(int nr,String id,boolean otherPage){
  if ((app.getApi().getSupportFlags() & OpacApi.SUPPORT_FLAG_ENDLESS_SCROLLING) == 0 && otherPage) {
    new ReloadOldPageTask().execute(app,page,nr,id);
  }
 else {
    showDetail(nr,id);
  }
}","/** 
 * Callback method from   {@link SearchResultListFragment.Callbacks}indicating that the item with the given ID was selected.
 */
@Override public void onItemSelected(int nr,String id,int pageToLoad){
  if ((app.getApi().getSupportFlags() & OpacApi.SUPPORT_FLAG_ENDLESS_SCROLLING) == 0 && pageToLoad != listFragment.getLastLoadedPage()) {
    new ReloadOldPageTask().execute(app,pageToLoad,nr,id);
  }
 else {
    showDetail(nr,id);
  }
}"
86304,"protected void loaded(){
  try {
    listFragment.setListShown(true);
    listFragment.setSearchResult(searchresult,page == 1);
  }
 catch (  IllegalStateException e) {
    e.printStackTrace();
  }
}","protected void loaded(){
  try {
    listFragment.setListShown(true);
    listFragment.setSearchResult(searchresult);
  }
 catch (  IllegalStateException e) {
    e.printStackTrace();
  }
}"
86305,"@Override protected SearchRequestResult doInBackground(Object... arg0){
  nr=(Integer)arg0[2];
  id=(String)arg0[3];
  return super.doInBackground(arg0);
}","@Override protected SearchRequestResult doInBackground(Object... arg0){
  page=(Integer)arg0[1];
  nr=(Integer)arg0[2];
  id=(String)arg0[3];
  OpacClient app=(OpacClient)arg0[0];
  try {
    SearchRequestResult res=app.getApi().searchGetPage(page);
    return res;
  }
 catch (  java.net.UnknownHostException e) {
    exception=e;
    e.printStackTrace();
  }
catch (  java.net.SocketException e) {
    exception=e;
  }
catch (  OpacErrorException e) {
    exception=e;
  }
catch (  Exception e) {
    exception=e;
    ACRA.getErrorReporter().handleException(e);
  }
  return null;
}"
86306,"@Override protected void onPostExecute(SearchRequestResult result){
  setProgressBarIndeterminateVisibility(false);
  if (result == null) {
    if (exception instanceof OpacErrorException) {
      if (exception.getMessage().equals(""String_Node_Str"")) {
        Intent intent=new Intent(SearchResultListActivity.this,SearchResultDetailActivity.class);
        intent.putExtra(SearchResultDetailFragment.ARG_ITEM_ID,(String)null);
        startActivity(intent);
        finish();
        return;
      }
      listFragment.showConnectivityError(exception.getMessage());
    }
 else     if (exception instanceof NotReachableException)     listFragment.showConnectivityError(getResources().getString(R.string.connection_error_detail_nre));
 else     listFragment.showConnectivityError();
  }
 else {
    showDetail(nr,id);
  }
}","@Override protected void onPostExecute(SearchRequestResult result){
  setProgressBarIndeterminateVisibility(false);
  if (result == null) {
    if (exception instanceof OpacErrorException) {
      listFragment.showConnectivityError(exception.getMessage());
    }
 else     if (exception instanceof NotReachableException)     listFragment.showConnectivityError(getResources().getString(R.string.connection_error_detail_nre));
 else     listFragment.showConnectivityError();
  }
 else {
    listFragment.setLastLoadedPage(page);
    showDetail(nr,id);
  }
}"
86307,"public void performsearch(){
  if (page == 1) {
    st=new SearchStartTask();
    st.execute(app,getIntent().getBundleExtra(""String_Node_Str""));
  }
 else {
    sst=new SearchPageTask();
    sst.execute(app,page);
  }
}","public void performsearch(){
  st=new SearchStartTask();
  st.execute(app,getIntent().getBundleExtra(""String_Node_Str""));
}"
86308,"@Override public void onListItemClick(ListView listView,View view,int position,long id){
  super.onListItemClick(listView,view,position,id);
  mCallbacks.onItemSelected(searchresult.getResults().get(position).getNr(),searchresult.getResults().get(position).getId(),searchresult.getResults().get(position).getPage() != adapter.getPage());
}","@Override public void onListItemClick(ListView listView,View view,int position,long id){
  super.onListItemClick(listView,view,position,id);
  mCallbacks.onItemSelected(searchresult.getResults().get(position).getNr(),searchresult.getResults().get(position).getId(),searchresult.getResults().get(position).getPage());
}"
86309,"@Override public List<SearchResult> onLoadMore(int page) throws Exception {
  SearchRequestResult res=app.getApi().searchGetPage(page);
  return res.getResults();
}","@Override public List<SearchResult> onLoadMore(int page) throws Exception {
  SearchRequestResult res=app.getApi().searchGetPage(page);
  setLastLoadedPage(page);
  return res.getResults();
}"
86310,"@Override public void onItemSelected(int nr,String id,boolean otherPage){
}","@Override public void onItemSelected(int nr,String id,int pageToLoad){
}"
86311,"public void setSearchResult(SearchRequestResult searchresult,boolean clear){
  for (  SearchResult result : searchresult.getResults()) {
    result.setPage(searchresult.getPage_index());
  }
  if (searchresult.getTotal_result_count() >= 0)   getSupportActionBar().setSubtitle(getString(R.string.result_number,searchresult.getTotal_result_count()));
  if (searchresult.getResults().size() == 0 && searchresult.getTotal_result_count() == 0) {
    setEmptyText(getString(R.string.no_results));
  }
  this.searchresult=searchresult;
  adapter=new ResultsAdapterEndless(getActivity(),searchresult,new OnLoadMoreListener(){
    @Override public List<SearchResult> onLoadMore(    int page) throws Exception {
      SearchRequestResult res=app.getApi().searchGetPage(page);
      return res.getResults();
    }
  }
);
  setListAdapter(adapter);
  getListView().setTextFilterEnabled(true);
  setListShown(true);
}","public void setSearchResult(SearchRequestResult searchresult){
  for (  SearchResult result : searchresult.getResults()) {
    result.setPage(searchresult.getPage_index());
  }
  if (searchresult.getTotal_result_count() >= 0)   getSupportActionBar().setSubtitle(getString(R.string.result_number,searchresult.getTotal_result_count()));
  if (searchresult.getResults().size() == 0 && searchresult.getTotal_result_count() == 0) {
    setEmptyText(getString(R.string.no_results));
  }
  this.searchresult=searchresult;
  adapter=new ResultsAdapterEndless(getActivity(),searchresult,new OnLoadMoreListener(){
    @Override public List<SearchResult> onLoadMore(    int page) throws Exception {
      SearchRequestResult res=app.getApi().searchGetPage(page);
      setLastLoadedPage(page);
      return res.getResults();
    }
  }
);
  setListAdapter(adapter);
  getListView().setTextFilterEnabled(true);
  setListShown(true);
}"
86312,"@Override public DetailledItem getResultById(String id,String homebranch) throws IOException, NotReachableException, OpacErrorException {
  Document doc;
  List<NameValuePair> nvpairs;
  if (id == null && s_reusedoc != null) {
    doc=s_reusedoc;
  }
 else {
    nvpairs=s_pageform;
    int i=0;
    List<Integer> indexes=new ArrayList<Integer>();
    for (    NameValuePair np : nvpairs) {
      if (np.getName().contains(""String_Node_Str"") || np.getName().contains(""String_Node_Str"")) {
        indexes.add(i);
      }
      i++;
    }
    for (int j=indexes.size() - 1; j >= 0; j--) {
      nvpairs.remove((int)indexes.get(j));
    }
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str"" + id));
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs);
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs);
  }
  DetailledItem res=new DetailledItem();
  if (doc.select(""String_Node_Str"").size() == 1) {
    res.setCover(doc.select(""String_Node_Str"").first().absUrl(""String_Node_Str""));
  }
  for (  Element tr : doc.select(""String_Node_Str"")) {
    if (tr.children().size() < 2)     continue;
    if (tr.child(1).text().contains(""String_Node_Str"")) {
      res.addDetail(new Detail(tr.child(0).text().trim(),tr.child(1).select(""String_Node_Str"").first().absUrl(""String_Node_Str"")));
    }
 else {
      res.addDetail(new Detail(tr.child(0).text().trim(),tr.child(1).text().trim()));
    }
    if (tr.child(0).text().trim().contains(""String_Node_Str"") && res.getTitle() == null) {
      res.setTitle(tr.child(1).text().split(""String_Node_Str"")[0].trim());
    }
  }
  if (doc.select(""String_Node_Str"").size() > 0) {
    res.setReservable(true);
    res.setReservation_info(id);
  }
  SparseArray<String> colmap=new SparseArray<String>();
  int i=0;
  for (  Element th : doc.select(""String_Node_Str"")) {
    String head=th.text().trim();
    if (head.contains(""String_Node_Str"")) {
      colmap.append(i,DetailledItem.KEY_COPY_BRANCH);
    }
 else     if (head.contains(""String_Node_Str"")) {
      colmap.append(i,DetailledItem.KEY_COPY_LOCATION);
    }
 else     if (head.contains(""String_Node_Str"")) {
      colmap.append(i,DetailledItem.KEY_COPY_SHELFMARK);
    }
 else     if (head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"") || head.matches(""String_Node_Str"")) {
      colmap.append(i,DetailledItem.KEY_COPY_STATUS);
    }
    i++;
  }
  for (  Element tr : doc.select(""String_Node_Str"")) {
    ContentValues line=new ContentValues();
    for (int j=0; j < colmap.size(); j++) {
      if (colmap.valueAt(j).equals(DetailledItem.KEY_COPY_STATUS)) {
        String status=tr.child(colmap.keyAt(j)).text().trim();
        if (status.contains(""String_Node_Str"")) {
          line.put(DetailledItem.KEY_COPY_STATUS,status.split(""String_Node_Str"")[0]);
          line.put(DetailledItem.KEY_COPY_RETURN,status.split(""String_Node_Str"")[1]);
        }
 else {
          line.put(DetailledItem.KEY_COPY_STATUS,status);
        }
      }
 else {
        line.put(colmap.valueAt(j),tr.child(colmap.keyAt(j)).text().trim());
      }
    }
    res.addCopy(line);
  }
  s_pageform=new ArrayList<NameValuePair>();
  for (  Element input : doc.select(""String_Node_Str"")) {
    if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
      s_pageform.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
    }
  }
  nvpairs=s_pageform;
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  parse_search(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
  nvpairs=s_pageform;
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  parse_search(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
  res.setId(""String_Node_Str"");
  return res;
}","@Override public DetailledItem getResultById(String id,String homebranch) throws IOException, NotReachableException, OpacErrorException {
  Document doc;
  List<NameValuePair> nvpairs;
  if (id == null && s_reusedoc != null) {
    doc=s_reusedoc;
  }
 else {
    nvpairs=s_pageform;
    int i=0;
    List<Integer> indexes=new ArrayList<Integer>();
    for (    NameValuePair np : nvpairs) {
      if (np.getName().contains(""String_Node_Str"") || np.getName().contains(""String_Node_Str"")) {
        indexes.add(i);
      }
      i++;
    }
    for (int j=indexes.size() - 1; j >= 0; j--) {
      nvpairs.remove((int)indexes.get(j));
    }
    nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str"" + id));
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs);
    List<NameValuePair> form=new ArrayList<NameValuePair>();
    for (    Element input : doc.select(""String_Node_Str"")) {
      if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
        form.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
      }
    }
    form.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str"" + id));
    doc=htmlPost(opac_url + ""String_Node_Str"" + s_sid,form);
  }
  DetailledItem res=new DetailledItem();
  if (doc.select(""String_Node_Str"").size() == 1) {
    res.setCover(doc.select(""String_Node_Str"").first().absUrl(""String_Node_Str""));
  }
  for (  Element tr : doc.select(""String_Node_Str"")) {
    if (tr.children().size() < 2)     continue;
    if (tr.child(1).text().contains(""String_Node_Str"")) {
      res.addDetail(new Detail(tr.child(0).text().trim(),tr.child(1).select(""String_Node_Str"").first().absUrl(""String_Node_Str"")));
    }
 else {
      res.addDetail(new Detail(tr.child(0).text().trim(),tr.child(1).text().trim()));
    }
    if (tr.child(0).text().trim().contains(""String_Node_Str"") && res.getTitle() == null) {
      res.setTitle(tr.child(1).text().split(""String_Node_Str"")[0].trim());
    }
  }
  if (doc.select(""String_Node_Str"").size() > 0) {
    res.setReservable(true);
    res.setReservation_info(id);
  }
  SparseArray<String> colmap=new SparseArray<String>();
  int i=0;
  for (  Element th : doc.select(""String_Node_Str"")) {
    String head=th.text().trim();
    if (head.contains(""String_Node_Str"")) {
      colmap.append(i,DetailledItem.KEY_COPY_BRANCH);
    }
 else     if (head.contains(""String_Node_Str"")) {
      colmap.append(i,DetailledItem.KEY_COPY_LOCATION);
    }
 else     if (head.contains(""String_Node_Str"")) {
      colmap.append(i,DetailledItem.KEY_COPY_SHELFMARK);
    }
 else     if (head.contains(""String_Node_Str"") || head.contains(""String_Node_Str"") || head.matches(""String_Node_Str"")) {
      colmap.append(i,DetailledItem.KEY_COPY_STATUS);
    }
    i++;
  }
  for (  Element tr : doc.select(""String_Node_Str"")) {
    ContentValues line=new ContentValues();
    for (int j=0; j < colmap.size(); j++) {
      if (colmap.valueAt(j).equals(DetailledItem.KEY_COPY_STATUS)) {
        String status=tr.child(colmap.keyAt(j)).text().trim();
        if (status.contains(""String_Node_Str"")) {
          line.put(DetailledItem.KEY_COPY_STATUS,status.split(""String_Node_Str"")[0]);
          line.put(DetailledItem.KEY_COPY_RETURN,status.split(""String_Node_Str"")[1]);
        }
 else {
          line.put(DetailledItem.KEY_COPY_STATUS,status);
        }
      }
 else {
        line.put(colmap.valueAt(j),tr.child(colmap.keyAt(j)).text().trim());
      }
    }
    res.addCopy(line);
  }
  s_pageform=new ArrayList<NameValuePair>();
  for (  Element input : doc.select(""String_Node_Str"")) {
    if (!""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str"")) && !""String_Node_Str"".equals(input.attr(""String_Node_Str""))&& !""String_Node_Str"".equals(input.attr(""String_Node_Str""))) {
      s_pageform.add(new BasicNameValuePair(input.attr(""String_Node_Str""),input.attr(""String_Node_Str"")));
    }
  }
  nvpairs=s_pageform;
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  parse_search(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
  nvpairs=s_pageform;
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nvpairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  parse_search(htmlPost(opac_url + ""String_Node_Str"" + s_sid,nvpairs),1);
  res.setId(""String_Node_Str"");
  return res;
}"
86313,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  view=inflater.inflate(R.layout.fragment_account,container,false);
  app=(OpacClient)getActivity().getApplication();
  account=app.getAccount();
  if (getActivity().getIntent().getExtras() != null) {
    if (getActivity().getIntent().getExtras().containsKey(""String_Node_Str"")) {
      AccountDataSource adata=new AccountDataSource(getActivity());
      adata.open();
      Bundle notif=getActivity().getIntent().getExtras().getBundle(""String_Node_Str"");
      Set<String> keys=notif.keySet();
      for (      String key : keys) {
        long[] val=notif.getLongArray(key);
        adata.notificationSave(val[0],val[1]);
      }
      adata.close();
      if (getActivity().getIntent().getExtras().getLong(""String_Node_Str"") != app.getAccount().getId()) {
        app.setAccount(getActivity().getIntent().getExtras().getLong(""String_Node_Str""));
        accountSelected(app.getAccount());
      }
      NotificationManager nMgr=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
      nMgr.cancel(OpacClient.NOTIF_ID);
    }
  }
  setHasOptionsMenu(true);
  accountSelected(app.getAccount());
  final Handler handler=new Handler();
  handler.post(new Runnable(){
    @Override public void run(){
      refreshage();
      handler.postDelayed(this,60000);
    }
  }
);
  return view;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  view=inflater.inflate(R.layout.fragment_account,container,false);
  app=(OpacClient)getActivity().getApplication();
  account=app.getAccount();
  if (getActivity().getIntent().getExtras() != null) {
    if (getActivity().getIntent().getExtras().containsKey(""String_Node_Str"")) {
      AccountDataSource adata=new AccountDataSource(getActivity());
      adata.open();
      Bundle notif=getActivity().getIntent().getExtras().getBundle(""String_Node_Str"");
      Set<String> keys=notif.keySet();
      for (      String key : keys) {
        long[] val=notif.getLongArray(key);
        adata.notificationSave(val[0],val[1]);
      }
      adata.close();
      if (getActivity().getIntent().getExtras().getLong(""String_Node_Str"") != app.getAccount().getId()) {
        app.setAccount(getActivity().getIntent().getExtras().getLong(""String_Node_Str""));
        ((OpacActivity)getActivity()).accountSelected(app.getAccount());
      }
      NotificationManager nMgr=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
      nMgr.cancel(OpacClient.NOTIF_ID);
    }
  }
  setHasOptionsMenu(true);
  accountSelected(app.getAccount());
  final Handler handler=new Handler();
  handler.post(new Runnable(){
    @Override public void run(){
      refreshage();
      handler.postDelayed(this,60000);
    }
  }
);
  return view;
}"
86314,"public void showConnectivityError(){
  ProgressBar progress=(ProgressBar)view.findViewById(R.id.progress);
  FrameLayout errorView=(FrameLayout)view.findViewById(R.id.error_view);
  errorView.removeAllViews();
  View connError=getActivity().getLayoutInflater().inflate(R.layout.error_connectivity,errorView);
  ((Button)connError.findViewById(R.id.btRetry)).setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      reload();
    }
  }
);
  progress.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.fade_out));
  connError.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.fade_in));
  progress.setVisibility(View.GONE);
  connError.setVisibility(View.VISIBLE);
}","public void showConnectivityError(){
  ProgressBar progress=(ProgressBar)view.findViewById(R.id.progress);
  final FrameLayout errorView=(FrameLayout)view.findViewById(R.id.error_view);
  errorView.removeAllViews();
  View connError=getActivity().getLayoutInflater().inflate(R.layout.error_connectivity,errorView);
  ((Button)connError.findViewById(R.id.btRetry)).setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      errorView.removeAllViews();
      reload();
    }
  }
);
  progress.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.fade_out));
  connError.startAnimation(AnimationUtils.loadAnimation(getActivity(),R.anim.fade_in));
  progress.setVisibility(View.GONE);
  connError.setVisibility(View.VISIBLE);
}"
86315,"protected void parse_medialist(List<ContentValues> medien,Document doc,int offset,String accountName) throws ClientProtocolException, IOException {
  Elements copytrs=doc.select(""String_Node_Str"");
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.GERMAN);
  int trs=copytrs.size();
  if (trs < 1) {
    medien=null;
    return;
  }
  assert(trs > 0);
  for (int i=0; i < trs; i++) {
    Element tr=copytrs.get(i);
    String prolongCount=""String_Node_Str"";
    try {
      String html=httpGet(https_url + ""String_Node_Str"" + accountName+ ""String_Node_Str""+ db+ ""String_Node_Str""+ tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""),getDefaultEncoding());
      prolongCount=Jsoup.parse(html).text();
    }
 catch (    IOException e) {
    }
    String reminderCount=tr.child(13).text().trim();
    if (reminderCount.indexOf(""String_Node_Str"") >= 0 && reminderCount.indexOf(""String_Node_Str"") >= 0)     reminderCount=reminderCount.substring(reminderCount.indexOf(""String_Node_Str"") + 1,reminderCount.indexOf(""String_Node_Str""));
    ContentValues e=new ContentValues();
    if (tr.child(4).text().trim().length() < 5 && tr.child(5).text().trim().length() > 4) {
      e.put(AccountData.KEY_LENT_TITLE,tr.child(5).text().trim());
    }
 else {
      e.put(AccountData.KEY_LENT_TITLE,tr.child(4).text().trim());
    }
    String status=""String_Node_Str"";
    if (!reminderCount.equals(""String_Node_Str"")) {
      status+=reminderCount + ""String_Node_Str"";
    }
    status+=prolongCount + ""String_Node_Str"";
    e.put(AccountData.KEY_LENT_STATUS,status);
    e.put(AccountData.KEY_LENT_DEADLINE,tr.child(21).text().trim());
    try {
      e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,sdf.parse(e.getAsString(AccountData.KEY_LENT_DEADLINE)).getTime());
    }
 catch (    ParseException e1) {
      e1.printStackTrace();
    }
    e.put(AccountData.KEY_LENT_LINK,tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""));
    medien.add(e);
  }
  assert(medien.size() == trs - 1);
}","protected void parse_medialist(List<ContentValues> medien,Document doc,int offset,String accountName) throws ClientProtocolException, IOException {
  Elements copytrs=doc.select(""String_Node_Str"");
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"",Locale.GERMAN);
  int trs=copytrs.size();
  if (trs < 1) {
    medien=null;
    return;
  }
  assert(trs > 0);
  for (int i=0; i < trs; i++) {
    Element tr=copytrs.get(i);
    String prolongCount=""String_Node_Str"";
    try {
      String html=httpGet(https_url + ""String_Node_Str"" + accountName+ ""String_Node_Str""+ db+ ""String_Node_Str""+ tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""),getDefaultEncoding());
      prolongCount=Jsoup.parse(html).text();
    }
 catch (    IOException e) {
    }
    String reminderCount=tr.child(13).text().trim();
    if (reminderCount.indexOf(""String_Node_Str"") >= 0 && reminderCount.indexOf(""String_Node_Str"") >= 0 && reminderCount.indexOf(""String_Node_Str"") < reminderCount.indexOf(""String_Node_Str""))     reminderCount=reminderCount.substring(reminderCount.indexOf(""String_Node_Str"") + 1,reminderCount.indexOf(""String_Node_Str""));
    ContentValues e=new ContentValues();
    if (tr.child(4).text().trim().length() < 5 && tr.child(5).text().trim().length() > 4) {
      e.put(AccountData.KEY_LENT_TITLE,tr.child(5).text().trim());
    }
 else {
      e.put(AccountData.KEY_LENT_TITLE,tr.child(4).text().trim());
    }
    String status=""String_Node_Str"";
    if (!reminderCount.equals(""String_Node_Str"")) {
      status+=reminderCount + ""String_Node_Str"";
    }
    status+=prolongCount + ""String_Node_Str"";
    e.put(AccountData.KEY_LENT_STATUS,status);
    e.put(AccountData.KEY_LENT_DEADLINE,tr.child(21).text().trim());
    try {
      e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,sdf.parse(e.getAsString(AccountData.KEY_LENT_DEADLINE)).getTime());
    }
 catch (    ParseException e1) {
      e1.printStackTrace();
    }
    e.put(AccountData.KEY_LENT_LINK,tr.child(1).select(""String_Node_Str"").attr(""String_Node_Str""));
    medien.add(e);
  }
  assert(medien.size() == trs - 1);
}"
86316,"public void reservationDo(int useraction,String selection){
  if (dialog == null) {
    dialog=ProgressDialog.show(getActivity(),""String_Node_Str"",getString(R.string.doing_res),true);
    dialog.show();
  }
 else   if (!dialog.isShowing()) {
    dialog=ProgressDialog.show(getActivity(),""String_Node_Str"",getString(R.string.doing_res),true);
    dialog.show();
  }
  rt=new ResTask();
  if (app.getApi() instanceof EbookServiceApi) {
    SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
    if (((EbookServiceApi)app.getApi()).isEbook(item) && selection == null) {
      rt.execute(app,item.getReservation_info(),0,sp.getString(""String_Node_Str"",""String_Node_Str""));
      return;
    }
  }
  rt.execute(app,item,useraction,selection);
}","public void reservationDo(int useraction,String selection){
  if (dialog == null) {
    dialog=ProgressDialog.show(getActivity(),""String_Node_Str"",getString(R.string.doing_res),true);
    dialog.show();
  }
 else   if (!dialog.isShowing()) {
    dialog=ProgressDialog.show(getActivity(),""String_Node_Str"",getString(R.string.doing_res),true);
    dialog.show();
  }
  rt=new ResTask();
  if (app.getApi() instanceof EbookServiceApi) {
    SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(getActivity());
    if (((EbookServiceApi)app.getApi()).isEbook(item) && selection == null) {
      rt.execute(app,item,0,sp.getString(""String_Node_Str"",""String_Node_Str""));
      return;
    }
  }
  rt.execute(app,item,useraction,selection);
}"
86317,"@Override public void accountSelected(Account account){
  view.findViewById(R.id.svAccount).setVisibility(View.GONE);
  view.findViewById(R.id.unsupported_error).setVisibility(View.GONE);
  view.findViewById(R.id.answer_error).setVisibility(View.GONE);
  ((FrameLayout)view.findViewById(R.id.error_view)).removeAllViews();
  view.findViewById(R.id.llLoading).setVisibility(View.VISIBLE);
  refreshing=false;
  supported=true;
  account=app.getAccount();
  if (!app.getApi().isAccountSupported(app.getLibrary()) && (app.getApi().getSupportFlags() & OpacApi.SUPPORT_FLAG_ACCOUNT_EXTENDABLE) == 0) {
    supported=false;
    view.findViewById(R.id.llLoading).setVisibility(View.GONE);
    view.findViewById(R.id.unsupported_error).setVisibility(View.VISIBLE);
    ((TextView)view.findViewById(R.id.tvErrBodyU)).setText(R.string.account_unsupported_api);
    ((Button)view.findViewById(R.id.btSend)).setText(R.string.write_mail);
    ((Button)view.findViewById(R.id.btSend)).setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        Intent emailIntent=new Intent(android.content.Intent.ACTION_SEND);
        emailIntent.putExtra(android.content.Intent.EXTRA_EMAIL,new String[]{""String_Node_Str""});
        emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT,""String_Node_Str"" + app.getLibrary().getIdent());
        emailIntent.putExtra(android.content.Intent.EXTRA_TEXT,""String_Node_Str"");
        emailIntent.setType(""String_Node_Str"");
        startActivity(Intent.createChooser(emailIntent,getString(R.string.write_mail)));
      }
    }
);
  }
 else   if (!app.getApi().isAccountSupported(app.getLibrary())) {
    supported=false;
    view.findViewById(R.id.llLoading).setVisibility(View.GONE);
    view.findViewById(R.id.unsupported_error).setVisibility(View.VISIBLE);
    ((TextView)view.findViewById(R.id.tvErrBodyU)).setText(R.string.account_unsupported);
    ((Button)view.findViewById(R.id.btSend)).setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        dialog=ProgressDialog.show(getActivity(),""String_Node_Str"",getString(R.string.report_sending),true,true,new OnCancelListener(){
          @Override public void onCancel(          DialogInterface arg0){
          }
        }
);
        dialog.show();
        new SendTask().execute(this);
      }
    }
);
  }
 else   if (account.getPassword() == null || account.getPassword().equals(""String_Node_Str"") || account.getPassword().equals(""String_Node_Str"") || account.getName() == null || account.getName().equals(""String_Node_Str"") || account.getName().equals(""String_Node_Str"")) {
    view.findViewById(R.id.llLoading).setVisibility(View.GONE);
    view.findViewById(R.id.answer_error).setVisibility(View.VISIBLE);
    ((Button)view.findViewById(R.id.btPrefs)).setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        Intent intent=new Intent(getActivity(),AccountEditActivity.class);
        intent.putExtra(AccountEditActivity.EXTRA_ACCOUNT_ID,app.getAccount().getId());
        startActivity(intent);
      }
    }
);
    ((TextView)view.findViewById(R.id.tvErrHeadA)).setText(""String_Node_Str"");
    ((TextView)view.findViewById(R.id.tvErrBodyA)).setText(R.string.status_nouser);
  }
 else {
    AccountDataSource adatasource=new AccountDataSource(getActivity());
    adatasource.open();
    refreshtime=adatasource.getCachedAccountDataTime(account);
    if (refreshtime > 0) {
      displaydata(adatasource.getCachedAccountData(account),true);
      if (System.currentTimeMillis() - refreshtime > MAX_CACHE_AGE) {
        refresh();
      }
    }
 else {
      refresh();
    }
    adatasource.close();
  }
  getActivity().supportInvalidateOptionsMenu();
}","@Override public void accountSelected(Account account){
  view.findViewById(R.id.svAccount).setVisibility(View.GONE);
  view.findViewById(R.id.unsupported_error).setVisibility(View.GONE);
  view.findViewById(R.id.answer_error).setVisibility(View.GONE);
  ((FrameLayout)view.findViewById(R.id.error_view)).removeAllViews();
  view.findViewById(R.id.llLoading).setVisibility(View.VISIBLE);
  refreshing=false;
  supported=true;
  this.account=app.getAccount();
  if (!app.getApi().isAccountSupported(app.getLibrary()) && (app.getApi().getSupportFlags() & OpacApi.SUPPORT_FLAG_ACCOUNT_EXTENDABLE) == 0) {
    supported=false;
    view.findViewById(R.id.llLoading).setVisibility(View.GONE);
    view.findViewById(R.id.unsupported_error).setVisibility(View.VISIBLE);
    ((TextView)view.findViewById(R.id.tvErrBodyU)).setText(R.string.account_unsupported_api);
    ((Button)view.findViewById(R.id.btSend)).setText(R.string.write_mail);
    ((Button)view.findViewById(R.id.btSend)).setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        Intent emailIntent=new Intent(android.content.Intent.ACTION_SEND);
        emailIntent.putExtra(android.content.Intent.EXTRA_EMAIL,new String[]{""String_Node_Str""});
        emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT,""String_Node_Str"" + app.getLibrary().getIdent());
        emailIntent.putExtra(android.content.Intent.EXTRA_TEXT,""String_Node_Str"");
        emailIntent.setType(""String_Node_Str"");
        startActivity(Intent.createChooser(emailIntent,getString(R.string.write_mail)));
      }
    }
);
  }
 else   if (!app.getApi().isAccountSupported(app.getLibrary())) {
    supported=false;
    view.findViewById(R.id.llLoading).setVisibility(View.GONE);
    view.findViewById(R.id.unsupported_error).setVisibility(View.VISIBLE);
    ((TextView)view.findViewById(R.id.tvErrBodyU)).setText(R.string.account_unsupported);
    ((Button)view.findViewById(R.id.btSend)).setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        dialog=ProgressDialog.show(getActivity(),""String_Node_Str"",getString(R.string.report_sending),true,true,new OnCancelListener(){
          @Override public void onCancel(          DialogInterface arg0){
          }
        }
);
        dialog.show();
        new SendTask().execute(this);
      }
    }
);
  }
 else   if (account.getPassword() == null || account.getPassword().equals(""String_Node_Str"") || account.getPassword().equals(""String_Node_Str"") || account.getName() == null || account.getName().equals(""String_Node_Str"") || account.getName().equals(""String_Node_Str"")) {
    view.findViewById(R.id.llLoading).setVisibility(View.GONE);
    view.findViewById(R.id.answer_error).setVisibility(View.VISIBLE);
    ((Button)view.findViewById(R.id.btPrefs)).setOnClickListener(new OnClickListener(){
      @Override public void onClick(      View v){
        Intent intent=new Intent(getActivity(),AccountEditActivity.class);
        intent.putExtra(AccountEditActivity.EXTRA_ACCOUNT_ID,app.getAccount().getId());
        startActivity(intent);
      }
    }
);
    ((TextView)view.findViewById(R.id.tvErrHeadA)).setText(""String_Node_Str"");
    ((TextView)view.findViewById(R.id.tvErrBodyA)).setText(R.string.status_nouser);
  }
 else {
    AccountDataSource adatasource=new AccountDataSource(getActivity());
    adatasource.open();
    refreshtime=adatasource.getCachedAccountDataTime(account);
    if (refreshtime > 0) {
      displaydata(adatasource.getCachedAccountData(account),true);
      if (System.currentTimeMillis() - refreshtime > MAX_CACHE_AGE) {
        refresh();
      }
    }
 else {
      refresh();
    }
    adatasource.close();
  }
  getActivity().supportInvalidateOptionsMenu();
}"
86318,"private SearchRequestResult parse_search(String html,int page){
  List<SearchResult> results=new ArrayList<SearchResult>();
  Document doc=Jsoup.parse(html);
  Elements trList=doc.select(""String_Node_Str"");
  Elements elem=null;
  int rows_per_hit=2;
  try {
    int rows=m_data.getInt(""String_Node_Str"");
    rows_per_hit=rows;
  }
 catch (  JSONException e) {
  }
  int results_total;
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(html);
  if (matcher.find()) {
    results_total=Integer.parseInt(matcher.group(1));
  }
 else {
    results_total=-1;
  }
  int numOfEntries=trList.size() / rows_per_hit;
  if (numOfEntries > numOfResultsPerPage)   numOfEntries=numOfResultsPerPage;
  for (int i=0; i < numOfEntries; i++) {
    Element tr=trList.get(i * rows_per_hit);
    SearchResult sr=new SearchResult();
    elem=tr.select(""String_Node_Str"");
    if (elem.size() > 0) {
      String hrefID=elem.get(0).attr(""String_Node_Str"");
      sr.setId(hrefID);
    }
 else {
      elem=tr.select(""String_Node_Str"");
      if (elem.size() > 0) {
        String nameID=elem.get(0).attr(""String_Node_Str"").trim();
        String hrefID=""String_Node_Str"" + m_opac_dir + ""String_Node_Str""+ nameID+ ""String_Node_Str"";
        sr.setId(hrefID);
      }
    }
    try {
      elem=tr.select(""String_Node_Str"");
      if (elem.size() > 0) {
        setMediaTypeFromImageFilename(sr,elem.get(0).attr(""String_Node_Str""));
      }
    }
 catch (    NumberFormatException e) {
    }
    String desc=""String_Node_Str"";
    try {
      JSONArray searchtable=m_data.getJSONArray(""String_Node_Str"");
      for (int j=0; j < searchtable.length(); j++) {
        int colNum=searchtable.getInt(j);
        if (j > 0)         desc=desc + ""String_Node_Str"";
        desc=desc + tr.child(colNum).html();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    desc=desc.replaceAll(""String_Node_Str"",""String_Node_Str"");
    sr.setInnerhtml(desc);
    if (tr.select(""String_Node_Str"").size() > 0 && tr.select(""String_Node_Str"").size() == 0) {
      sr.setStatus(Status.GREEN);
    }
 else     if (tr.select(""String_Node_Str"").size() == 0 && tr.select(""String_Node_Str"").size() > 0) {
      sr.setStatus(Status.RED);
    }
 else     if (tr.select(""String_Node_Str"").size() > 0 && tr.select(""String_Node_Str"").size() > 0) {
      sr.setStatus(Status.YELLOW);
    }
    sr.setNr(i / rows_per_hit);
    results.add(sr);
  }
  return new SearchRequestResult(results,results_total,page);
}","private SearchRequestResult parse_search(String html,int page){
  List<SearchResult> results=new ArrayList<SearchResult>();
  Document doc=Jsoup.parse(html);
  Elements trList=doc.select(""String_Node_Str"");
  Elements elem=null;
  int rows_per_hit=2;
  if (trList.size() > 1 && trList.get(0).select(""String_Node_Str"").size() > 0 && trList.get(1).select(""String_Node_Str"").size() > 0) {
    rows_per_hit=1;
  }
  try {
    int rows=m_data.getInt(""String_Node_Str"");
    rows_per_hit=rows;
  }
 catch (  JSONException e) {
  }
  int results_total;
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  Matcher matcher=pattern.matcher(html);
  if (matcher.find()) {
    results_total=Integer.parseInt(matcher.group(1));
  }
 else {
    results_total=-1;
  }
  int numOfEntries=trList.size() / rows_per_hit;
  if (numOfEntries > numOfResultsPerPage)   numOfEntries=numOfResultsPerPage;
  for (int i=0; i < numOfEntries; i++) {
    Element tr=trList.get(i * rows_per_hit);
    SearchResult sr=new SearchResult();
    elem=tr.select(""String_Node_Str"");
    if (elem.size() > 0) {
      String hrefID=elem.get(0).attr(""String_Node_Str"");
      sr.setId(hrefID);
    }
 else {
      elem=tr.select(""String_Node_Str"");
      if (elem.size() > 0) {
        String nameID=elem.get(0).attr(""String_Node_Str"").trim();
        String hrefID=""String_Node_Str"" + m_opac_dir + ""String_Node_Str""+ nameID+ ""String_Node_Str"";
        sr.setId(hrefID);
      }
    }
    try {
      elem=tr.select(""String_Node_Str"");
      if (elem.size() > 0) {
        setMediaTypeFromImageFilename(sr,elem.get(0).attr(""String_Node_Str""));
      }
    }
 catch (    NumberFormatException e) {
    }
    String desc=""String_Node_Str"";
    try {
      JSONArray searchtable=m_data.getJSONArray(""String_Node_Str"");
      for (int j=0; j < searchtable.length(); j++) {
        int colNum=searchtable.getInt(j);
        if (j > 0)         desc=desc + ""String_Node_Str"";
        desc=desc + tr.child(colNum).html();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    desc=desc.replaceAll(""String_Node_Str"",""String_Node_Str"");
    sr.setInnerhtml(desc);
    if (tr.select(""String_Node_Str"").size() > 0 && tr.select(""String_Node_Str"").size() == 0) {
      sr.setStatus(Status.GREEN);
    }
 else     if (tr.select(""String_Node_Str"").size() == 0 && tr.select(""String_Node_Str"").size() > 0) {
      sr.setStatus(Status.RED);
    }
 else     if (tr.select(""String_Node_Str"").size() > 0 && tr.select(""String_Node_Str"").size() > 0) {
      sr.setStatus(Status.YELLOW);
    }
    sr.setNr(i / rows_per_hit);
    results.add(sr);
  }
  return new SearchRequestResult(results,results_total,page);
}"
86319,"protected SearchRequestResult parse_search(String html,int page){
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
      return new SearchRequestResult(new ArrayList<SearchResult>(),0,1,1);
    }
 else     if (!doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"") && !doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
      last_error=doc.select(""String_Node_Str"").text().trim();
      return null;
    }
  }
 else   if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
      last_error=""String_Node_Str"";
      return null;
    }
 else {
      last_error=""String_Node_Str"" + doc.select(""String_Node_Str"").text().trim();
      return null;
    }
  }
 else {
    return null;
  }
  updateRechnr(doc);
  reusehtml=html;
  results_total=-1;
  if (doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
    results_total=200;
  }
 else {
    String resultnumstr=doc.select(""String_Node_Str"").first().text();
    resultnumstr=resultnumstr.substring(0,resultnumstr.indexOf(""String_Node_Str"")).trim();
    results_total=Integer.parseInt(resultnumstr);
  }
  List<SearchResult> results=new ArrayList<SearchResult>();
  Elements tables=doc.select(""String_Node_Str"").first().select(""String_Node_Str"");
  for (int i=0; i < tables.size(); i++) {
    Element tr=tables.get(i);
    SearchResult sr=new SearchResult();
    if (tr.select(""String_Node_Str"").first().select(""String_Node_Str"").size() > 0) {
      String imgUrl=tr.select(""String_Node_Str"").first().select(""String_Node_Str"").first().attr(""String_Node_Str"");
      sr.setCover(imgUrl);
    }
    String mType=tr.select(""String_Node_Str"").last().text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    if (data.has(""String_Node_Str"")) {
      try {
        sr.setType(MediaType.valueOf(data.getJSONObject(""String_Node_Str"").getString(mType.toLowerCase())));
      }
 catch (      JSONException e) {
        sr.setType(defaulttypes.get(mType.toLowerCase()));
      }
catch (      IllegalArgumentException e) {
        sr.setType(defaulttypes.get(mType.toLowerCase()));
      }
    }
 else {
      sr.setType(defaulttypes.get(mType.toLowerCase()));
    }
    String title=tr.select(""String_Node_Str"").get(1).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    String additionalInfo=""String_Node_Str"";
    if (title.contains(""String_Node_Str"")) {
      additionalInfo+=title.substring(title.indexOf(""String_Node_Str""));
      title=title.substring(0,title.indexOf(""String_Node_Str"") - 1).trim();
    }
    String author=tr.select(""String_Node_Str"").get(2).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    additionalInfo+=""String_Node_Str"" + author;
    String publisher=tr.select(""String_Node_Str"").get(3).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    additionalInfo+=""String_Node_Str"" + publisher;
    String year=tr.select(""String_Node_Str"").get(4).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    additionalInfo+=""String_Node_Str"" + year + ""String_Node_Str"";
    sr.setInnerhtml(""String_Node_Str"" + title + ""String_Node_Str""+ additionalInfo);
    sr.setNr(10 * (page - 1) + i);
    sr.setId(null);
    results.add(sr);
  }
  resultcount=results.size();
  return new SearchRequestResult(results,results_total,page);
}","protected SearchRequestResult parse_search(String html,int page){
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").text().trim().startsWith(""String_Node_Str"")) {
      return new SearchRequestResult(new ArrayList<SearchResult>(),0,1,1);
    }
 else     if (!doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"") && !doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
      last_error=doc.select(""String_Node_Str"").text().trim();
      return null;
    }
  }
 else   if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
      last_error=""String_Node_Str"";
      return null;
    }
 else {
      last_error=""String_Node_Str"" + doc.select(""String_Node_Str"").text().trim();
      return null;
    }
  }
 else {
    return null;
  }
  updateRechnr(doc);
  reusehtml=html;
  results_total=-1;
  if (doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
    results_total=200;
  }
 else {
    String resultnumstr=doc.select(""String_Node_Str"").first().text();
    resultnumstr=resultnumstr.substring(0,resultnumstr.indexOf(""String_Node_Str"")).trim();
    results_total=Integer.parseInt(resultnumstr);
  }
  List<SearchResult> results=new ArrayList<SearchResult>();
  Elements tables=doc.select(""String_Node_Str"").first().select(""String_Node_Str"");
  for (int i=0; i < tables.size(); i++) {
    Element tr=tables.get(i);
    SearchResult sr=new SearchResult();
    if (tr.select(""String_Node_Str"").first().select(""String_Node_Str"").size() > 0) {
      String imgUrl=tr.select(""String_Node_Str"").first().select(""String_Node_Str"").first().attr(""String_Node_Str"");
      sr.setCover(imgUrl);
    }
    String mType=tr.select(""String_Node_Str"").last().text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    if (data.has(""String_Node_Str"")) {
      try {
        sr.setType(MediaType.valueOf(data.getJSONObject(""String_Node_Str"").getString(mType.toLowerCase())));
      }
 catch (      JSONException e) {
        sr.setType(defaulttypes.get(mType.toLowerCase()));
      }
catch (      IllegalArgumentException e) {
        sr.setType(defaulttypes.get(mType.toLowerCase()));
      }
    }
 else {
      sr.setType(defaulttypes.get(mType.toLowerCase()));
    }
    String title=tr.select(""String_Node_Str"").get(1).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    String additionalInfo=""String_Node_Str"";
    if (title.contains(""String_Node_Str"")) {
      additionalInfo+=title.substring(title.indexOf(""String_Node_Str""));
      title=title.substring(0,title.indexOf(""String_Node_Str"") - 1).trim();
    }
    String author=tr.select(""String_Node_Str"").get(2).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    additionalInfo+=""String_Node_Str"" + author;
    String publisher=tr.select(""String_Node_Str"").get(3).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    additionalInfo+=""String_Node_Str"" + publisher;
    String year=tr.select(""String_Node_Str"").get(4).text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    additionalInfo+=""String_Node_Str"" + year + ""String_Node_Str"";
    sr.setInnerhtml(""String_Node_Str"" + title + ""String_Node_Str""+ additionalInfo);
    sr.setNr(10 * (page - 1) + i);
    sr.setId(null);
    results.add(sr);
  }
  resultcount=results.size();
  return new SearchRequestResult(results,results_total,page);
}"
86320,"public void displaydata(AccountData result,boolean fromcache){
  setContentView(R.layout.account_activity);
  this.fromcache=fromcache;
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  final long tolerance=Long.decode(sp.getString(""String_Node_Str"",""String_Node_Str""));
  ((TextView)findViewById(R.id.tvAccLabel)).setText(account.getLabel());
  ((TextView)findViewById(R.id.tvAccUser)).setText(account.getName());
  TextView tvAccCity=(TextView)findViewById(R.id.tvAccCity);
  Library lib;
  try {
    lib=((OpacClient)getApplication()).getLibrary(account.getLibrary());
    if (lib.getTitle() != null && !lib.getTitle().equals(""String_Node_Str"")) {
      tvAccCity.setText(lib.getCity() + ""String_Node_Str"" + lib.getTitle());
    }
 else {
      tvAccCity.setText(lib.getCity());
    }
  }
 catch (  IOException e) {
    ACRA.getErrorReporter().handleException(e);
    e.printStackTrace();
  }
catch (  JSONException e) {
    ACRA.getErrorReporter().handleException(e);
  }
  LinearLayout llLent=(LinearLayout)findViewById(R.id.llLent);
  llLent.removeAllViews();
  boolean notification_on=sp.getBoolean(""String_Node_Str"",false);
  boolean notification_problems=false;
  if (result.getLent().size() == 0) {
    TextView t1=new TextView(this);
    t1.setText(R.string.entl_none);
    llLent.addView(t1);
  }
 else {
    for (    ContentValues item : result.getLent()) {
      View v=getLayoutInflater().inflate(R.layout.lent_listitem,null);
      if (item.containsKey(AccountData.KEY_LENT_TITLE)) {
        ((TextView)v.findViewById(R.id.tvTitel)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_LENT_TITLE)));
      }
      if (item.containsKey(AccountData.KEY_LENT_AUTHOR)) {
        ((TextView)v.findViewById(R.id.tvVerfasser)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_LENT_AUTHOR)));
      }
      ((TextView)v.findViewById(R.id.tvStatus)).setVisibility(View.VISIBLE);
      if (item.containsKey(AccountData.KEY_LENT_STATUS) && !""String_Node_Str"".equals(item.containsKey(AccountData.KEY_LENT_STATUS)) && item.containsKey(AccountData.KEY_LENT_DEADLINE)) {
        ((TextView)v.findViewById(R.id.tvStatus)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_LENT_DEADLINE) + ""String_Node_Str"" + item.getAsString(AccountData.KEY_LENT_STATUS)+ ""String_Node_Str""));
      }
 else       if (item.containsKey(AccountData.KEY_LENT_STATUS)) {
        ((TextView)v.findViewById(R.id.tvStatus)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_LENT_STATUS)));
      }
 else       if (item.containsKey(AccountData.KEY_LENT_DEADLINE)) {
        ((TextView)v.findViewById(R.id.tvStatus)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_LENT_DEADLINE)));
      }
 else {
        ((TextView)v.findViewById(R.id.tvStatus)).setVisibility(View.GONE);
      }
      if (item.containsKey(AccountData.KEY_LENT_FORMAT)) {
        ((TextView)v.findViewById(R.id.tvFmt)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_LENT_FORMAT)));
        ((TextView)v.findViewById(R.id.tvFmt)).setVisibility(View.VISIBLE);
      }
 else {
        ((TextView)v.findViewById(R.id.tvFmt)).setVisibility(View.GONE);
      }
      try {
        if (notification_on && item.containsKey(AccountData.KEY_LENT_DEADLINE)) {
          if (!item.getAsString(AccountData.KEY_LENT_DEADLINE).equals(""String_Node_Str"")) {
            if ((!item.containsKey(AccountData.KEY_LENT_DEADLINE_TIMESTAMP) || item.getAsLong(AccountData.KEY_LENT_DEADLINE_TIMESTAMP) < 1) && !""String_Node_Str"".equals(item.getAsString(AccountData.KEY_LENT_BRANCH))) {
              notification_problems=true;
            }
          }
        }
      }
 catch (      Exception e) {
        notification_problems=true;
      }
      if (item.containsKey(AccountData.KEY_LENT_DEADLINE_TIMESTAMP)) {
        if (item.getAsLong(AccountData.KEY_LENT_DEADLINE_TIMESTAMP) < System.currentTimeMillis()) {
          v.findViewById(R.id.vStatusColor).setBackgroundColor(getResources().getColor(R.color.date_overdue));
        }
 else         if ((item.getAsLong(AccountData.KEY_LENT_DEADLINE_TIMESTAMP) - System.currentTimeMillis()) <= tolerance) {
          v.findViewById(R.id.vStatusColor).setBackgroundColor(getResources().getColor(R.color.date_warning));
        }
 else         if (item.containsKey(AccountData.KEY_LENT_DOWNLOAD)) {
          v.findViewById(R.id.vStatusColor).setBackgroundColor(getResources().getColor(R.color.account_downloadable));
        }
      }
      if (item.containsKey(AccountData.KEY_LENT_LENDING_BRANCH)) {
        ((TextView)v.findViewById(R.id.tvZst)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_LENT_LENDING_BRANCH)));
        ((TextView)v.findViewById(R.id.tvZst)).setVisibility(View.VISIBLE);
      }
 else       if (item.containsKey(AccountData.KEY_LENT_BRANCH)) {
        ((TextView)v.findViewById(R.id.tvZst)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_LENT_BRANCH)));
        ((TextView)v.findViewById(R.id.tvZst)).setVisibility(View.VISIBLE);
      }
 else {
        ((TextView)v.findViewById(R.id.tvZst)).setVisibility(View.GONE);
      }
      if (item.containsKey(AccountData.KEY_LENT_LINK)) {
        v.findViewById(R.id.ivProlong).setTag(item.getAsString(AccountData.KEY_LENT_LINK));
        ((ImageView)v.findViewById(R.id.ivProlong)).setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View arg0){
            prolong((String)arg0.getTag());
          }
        }
);
        ((ImageView)v.findViewById(R.id.ivProlong)).setVisibility(View.VISIBLE);
      }
 else       if (item.containsKey(AccountData.KEY_LENT_DOWNLOAD) && app.getApi() instanceof EbookServiceApi) {
        v.findViewById(R.id.ivDownload).setTag(item.getAsString(AccountData.KEY_LENT_DOWNLOAD));
        ((ImageView)v.findViewById(R.id.ivDownload)).setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View arg0){
            download((String)arg0.getTag());
          }
        }
);
        ((ImageView)v.findViewById(R.id.ivProlong)).setVisibility(View.GONE);
        ((ImageView)v.findViewById(R.id.ivDownload)).setVisibility(View.VISIBLE);
      }
 else {
        ((ImageView)v.findViewById(R.id.ivProlong)).setVisibility(View.INVISIBLE);
      }
      llLent.addView(v);
    }
  }
  if (notification_problems) {
    View tvError=findViewById(R.id.tvError);
    if (tvError != null) {
      tvError.setVisibility(View.VISIBLE);
      ((TextView)tvError).setText(R.string.notification_problems);
    }
  }
  LinearLayout llRes=(LinearLayout)findViewById(R.id.llReservations);
  llRes.removeAllViews();
  if (result.getReservations().size() == 0) {
    TextView t1=new TextView(this);
    t1.setText(R.string.reservations_none);
    llRes.addView(t1);
  }
 else {
    for (    ContentValues item : result.getReservations()) {
      View v=getLayoutInflater().inflate(R.layout.reservation_listitem,null);
      if (item.containsKey(AccountData.KEY_RESERVATION_TITLE)) {
        ((TextView)v.findViewById(R.id.tvTitel)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_RESERVATION_TITLE)));
      }
      if (item.containsKey(AccountData.KEY_RESERVATION_AUTHOR)) {
        ((TextView)v.findViewById(R.id.tvVerfasser)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_RESERVATION_AUTHOR)));
      }
      if (item.containsKey(AccountData.KEY_RESERVATION_READY)) {
        ((TextView)v.findViewById(R.id.tvStatus)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_RESERVATION_READY)));
        ((TextView)v.findViewById(R.id.tvStatus)).setVisibility(View.VISIBLE);
      }
 else       if (item.containsKey(AccountData.KEY_RESERVATION_EXPIRE) && item.getAsString(AccountData.KEY_RESERVATION_EXPIRE).length() > 6) {
        ((TextView)v.findViewById(R.id.tvStatus)).setText(Html.fromHtml(""String_Node_Str"" + item.getAsString(AccountData.KEY_RESERVATION_EXPIRE)));
        ((TextView)v.findViewById(R.id.tvStatus)).setVisibility(View.VISIBLE);
      }
 else {
        ((TextView)v.findViewById(R.id.tvStatus)).setVisibility(View.GONE);
      }
      if (item.containsKey(AccountData.KEY_RESERVATION_BRANCH)) {
        ((TextView)v.findViewById(R.id.tvZst)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_RESERVATION_BRANCH)));
        ((TextView)v.findViewById(R.id.tvZst)).setVisibility(View.VISIBLE);
      }
 else {
        ((TextView)v.findViewById(R.id.tvZst)).setVisibility(View.GONE);
      }
      if (item.containsKey(AccountData.KEY_RESERVATION_BOOKING)) {
        v.findViewById(R.id.ivBooking).setTag(item.getAsString(AccountData.KEY_RESERVATION_BOOKING));
        ((ImageView)v.findViewById(R.id.ivBooking)).setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View arg0){
            bookingStart((String)arg0.getTag());
          }
        }
);
        ((ImageView)v.findViewById(R.id.ivBooking)).setVisibility(View.VISIBLE);
        ((ImageView)v.findViewById(R.id.ivCancel)).setVisibility(View.GONE);
      }
 else       if (item.containsKey(AccountData.KEY_RESERVATION_CANCEL)) {
        v.findViewById(R.id.ivCancel).setTag(item.getAsString(AccountData.KEY_RESERVATION_CANCEL));
        ((ImageView)v.findViewById(R.id.ivCancel)).setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View arg0){
            cancel((String)arg0.getTag());
          }
        }
);
        ((ImageView)v.findViewById(R.id.ivCancel)).setVisibility(View.VISIBLE);
        ((ImageView)v.findViewById(R.id.ivBooking)).setVisibility(View.GONE);
      }
 else {
        ((ImageView)v.findViewById(R.id.ivCancel)).setVisibility(View.INVISIBLE);
        ((ImageView)v.findViewById(R.id.ivBooking)).setVisibility(View.GONE);
      }
      llRes.addView(v);
    }
  }
  if (result.getPendingFees() != null) {
    findViewById(R.id.tvPendingFeesLabel).setVisibility(View.VISIBLE);
    findViewById(R.id.tvPendingFees).setVisibility(View.VISIBLE);
    ((TextView)findViewById(R.id.tvPendingFees)).setText(result.getPendingFees());
  }
 else {
    findViewById(R.id.tvPendingFeesLabel).setVisibility(View.GONE);
    findViewById(R.id.tvPendingFees).setVisibility(View.GONE);
  }
  if (result.getValidUntil() != null) {
    findViewById(R.id.tvValidUntilLabel).setVisibility(View.VISIBLE);
    findViewById(R.id.tvValidUntil).setVisibility(View.VISIBLE);
    ((TextView)findViewById(R.id.tvValidUntil)).setText(result.getValidUntil());
  }
 else {
    findViewById(R.id.tvValidUntilLabel).setVisibility(View.GONE);
    findViewById(R.id.tvValidUntil).setVisibility(View.GONE);
  }
  refreshage();
}","public void displaydata(AccountData result,boolean fromcache){
  setContentView(R.layout.account_activity);
  this.fromcache=fromcache;
  SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
  final long tolerance=Long.decode(sp.getString(""String_Node_Str"",""String_Node_Str""));
  ((TextView)findViewById(R.id.tvAccLabel)).setText(account.getLabel());
  ((TextView)findViewById(R.id.tvAccUser)).setText(account.getName());
  TextView tvAccCity=(TextView)findViewById(R.id.tvAccCity);
  Library lib;
  try {
    lib=((OpacClient)getApplication()).getLibrary(account.getLibrary());
    if (lib.getTitle() != null && !lib.getTitle().equals(""String_Node_Str"")) {
      tvAccCity.setText(lib.getCity() + ""String_Node_Str"" + lib.getTitle());
    }
 else {
      tvAccCity.setText(lib.getCity());
    }
  }
 catch (  IOException e) {
    ACRA.getErrorReporter().handleException(e);
    e.printStackTrace();
  }
catch (  JSONException e) {
    ACRA.getErrorReporter().handleException(e);
  }
  LinearLayout llLent=(LinearLayout)findViewById(R.id.llLent);
  llLent.removeAllViews();
  boolean notification_on=sp.getBoolean(""String_Node_Str"",false);
  boolean notification_problems=false;
  if (result.getLent().size() == 0) {
    TextView t1=new TextView(this);
    t1.setText(R.string.entl_none);
    llLent.addView(t1);
  }
 else {
    for (    ContentValues item : result.getLent()) {
      View v=getLayoutInflater().inflate(R.layout.lent_listitem,null);
      if (item.containsKey(AccountData.KEY_LENT_TITLE)) {
        ((TextView)v.findViewById(R.id.tvTitel)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_LENT_TITLE)));
      }
      if (item.containsKey(AccountData.KEY_LENT_AUTHOR)) {
        ((TextView)v.findViewById(R.id.tvVerfasser)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_LENT_AUTHOR)));
      }
      ((TextView)v.findViewById(R.id.tvStatus)).setVisibility(View.VISIBLE);
      if (item.containsKey(AccountData.KEY_LENT_STATUS) && !""String_Node_Str"".equals(item.containsKey(AccountData.KEY_LENT_STATUS)) && item.containsKey(AccountData.KEY_LENT_DEADLINE)) {
        ((TextView)v.findViewById(R.id.tvStatus)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_LENT_DEADLINE) + ""String_Node_Str"" + item.getAsString(AccountData.KEY_LENT_STATUS)+ ""String_Node_Str""));
      }
 else       if (item.containsKey(AccountData.KEY_LENT_STATUS)) {
        ((TextView)v.findViewById(R.id.tvStatus)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_LENT_STATUS)));
      }
 else       if (item.containsKey(AccountData.KEY_LENT_DEADLINE)) {
        ((TextView)v.findViewById(R.id.tvStatus)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_LENT_DEADLINE)));
      }
 else {
        ((TextView)v.findViewById(R.id.tvStatus)).setVisibility(View.GONE);
      }
      if (item.containsKey(AccountData.KEY_LENT_FORMAT)) {
        ((TextView)v.findViewById(R.id.tvFmt)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_LENT_FORMAT)));
        ((TextView)v.findViewById(R.id.tvFmt)).setVisibility(View.VISIBLE);
      }
 else {
        ((TextView)v.findViewById(R.id.tvFmt)).setVisibility(View.GONE);
      }
      try {
        if (notification_on && item.containsKey(AccountData.KEY_LENT_DEADLINE)) {
          if (!item.getAsString(AccountData.KEY_LENT_DEADLINE).equals(""String_Node_Str"")) {
            if ((!item.containsKey(AccountData.KEY_LENT_DEADLINE_TIMESTAMP) || item.getAsLong(AccountData.KEY_LENT_DEADLINE_TIMESTAMP) < 1) && !""String_Node_Str"".equals(item.getAsString(AccountData.KEY_LENT_BRANCH))) {
              notification_problems=true;
            }
          }
        }
      }
 catch (      Exception e) {
        notification_problems=true;
      }
      if (item.containsKey(AccountData.KEY_LENT_DEADLINE_TIMESTAMP)) {
        if (item.getAsLong(AccountData.KEY_LENT_DEADLINE_TIMESTAMP) < System.currentTimeMillis()) {
          v.findViewById(R.id.vStatusColor).setBackgroundColor(getResources().getColor(R.color.date_overdue));
        }
 else         if ((item.getAsLong(AccountData.KEY_LENT_DEADLINE_TIMESTAMP) - System.currentTimeMillis()) <= tolerance) {
          v.findViewById(R.id.vStatusColor).setBackgroundColor(getResources().getColor(R.color.date_warning));
        }
 else         if (item.containsKey(AccountData.KEY_LENT_DOWNLOAD)) {
          v.findViewById(R.id.vStatusColor).setBackgroundColor(getResources().getColor(R.color.account_downloadable));
        }
      }
 else       if (item.containsKey(AccountData.KEY_LENT_DOWNLOAD)) {
        v.findViewById(R.id.vStatusColor).setBackgroundColor(getResources().getColor(R.color.account_downloadable));
      }
      if (item.containsKey(AccountData.KEY_LENT_LENDING_BRANCH)) {
        ((TextView)v.findViewById(R.id.tvZst)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_LENT_LENDING_BRANCH)));
        ((TextView)v.findViewById(R.id.tvZst)).setVisibility(View.VISIBLE);
      }
 else       if (item.containsKey(AccountData.KEY_LENT_BRANCH)) {
        ((TextView)v.findViewById(R.id.tvZst)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_LENT_BRANCH)));
        ((TextView)v.findViewById(R.id.tvZst)).setVisibility(View.VISIBLE);
      }
 else {
        ((TextView)v.findViewById(R.id.tvZst)).setVisibility(View.GONE);
      }
      if (item.containsKey(AccountData.KEY_LENT_LINK)) {
        v.findViewById(R.id.ivProlong).setTag(item.getAsString(AccountData.KEY_LENT_LINK));
        ((ImageView)v.findViewById(R.id.ivProlong)).setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View arg0){
            prolong((String)arg0.getTag());
          }
        }
);
        ((ImageView)v.findViewById(R.id.ivProlong)).setVisibility(View.VISIBLE);
      }
 else       if (item.containsKey(AccountData.KEY_LENT_DOWNLOAD) && app.getApi() instanceof EbookServiceApi) {
        v.findViewById(R.id.ivDownload).setTag(item.getAsString(AccountData.KEY_LENT_DOWNLOAD));
        ((ImageView)v.findViewById(R.id.ivDownload)).setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View arg0){
            download((String)arg0.getTag());
          }
        }
);
        ((ImageView)v.findViewById(R.id.ivProlong)).setVisibility(View.GONE);
        ((ImageView)v.findViewById(R.id.ivDownload)).setVisibility(View.VISIBLE);
      }
 else {
        ((ImageView)v.findViewById(R.id.ivProlong)).setVisibility(View.INVISIBLE);
      }
      llLent.addView(v);
    }
  }
  if (notification_problems) {
    View tvError=findViewById(R.id.tvError);
    if (tvError != null) {
      tvError.setVisibility(View.VISIBLE);
      ((TextView)tvError).setText(R.string.notification_problems);
    }
  }
  LinearLayout llRes=(LinearLayout)findViewById(R.id.llReservations);
  llRes.removeAllViews();
  if (result.getReservations().size() == 0) {
    TextView t1=new TextView(this);
    t1.setText(R.string.reservations_none);
    llRes.addView(t1);
  }
 else {
    for (    ContentValues item : result.getReservations()) {
      View v=getLayoutInflater().inflate(R.layout.reservation_listitem,null);
      if (item.containsKey(AccountData.KEY_RESERVATION_TITLE)) {
        ((TextView)v.findViewById(R.id.tvTitel)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_RESERVATION_TITLE)));
      }
      if (item.containsKey(AccountData.KEY_RESERVATION_AUTHOR)) {
        ((TextView)v.findViewById(R.id.tvVerfasser)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_RESERVATION_AUTHOR)));
      }
      if (item.containsKey(AccountData.KEY_RESERVATION_READY)) {
        ((TextView)v.findViewById(R.id.tvStatus)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_RESERVATION_READY)));
        ((TextView)v.findViewById(R.id.tvStatus)).setVisibility(View.VISIBLE);
      }
 else       if (item.containsKey(AccountData.KEY_RESERVATION_EXPIRE) && item.getAsString(AccountData.KEY_RESERVATION_EXPIRE).length() > 6) {
        ((TextView)v.findViewById(R.id.tvStatus)).setText(Html.fromHtml(""String_Node_Str"" + item.getAsString(AccountData.KEY_RESERVATION_EXPIRE)));
        ((TextView)v.findViewById(R.id.tvStatus)).setVisibility(View.VISIBLE);
      }
 else {
        ((TextView)v.findViewById(R.id.tvStatus)).setVisibility(View.GONE);
      }
      if (item.containsKey(AccountData.KEY_RESERVATION_BRANCH)) {
        ((TextView)v.findViewById(R.id.tvZst)).setText(Html.fromHtml(item.getAsString(AccountData.KEY_RESERVATION_BRANCH)));
        ((TextView)v.findViewById(R.id.tvZst)).setVisibility(View.VISIBLE);
      }
 else {
        ((TextView)v.findViewById(R.id.tvZst)).setVisibility(View.GONE);
      }
      if (item.containsKey(AccountData.KEY_RESERVATION_BOOKING)) {
        v.findViewById(R.id.ivBooking).setTag(item.getAsString(AccountData.KEY_RESERVATION_BOOKING));
        ((ImageView)v.findViewById(R.id.ivBooking)).setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View arg0){
            bookingStart((String)arg0.getTag());
          }
        }
);
        ((ImageView)v.findViewById(R.id.ivBooking)).setVisibility(View.VISIBLE);
        ((ImageView)v.findViewById(R.id.ivCancel)).setVisibility(View.GONE);
      }
 else       if (item.containsKey(AccountData.KEY_RESERVATION_CANCEL)) {
        v.findViewById(R.id.ivCancel).setTag(item.getAsString(AccountData.KEY_RESERVATION_CANCEL));
        ((ImageView)v.findViewById(R.id.ivCancel)).setOnClickListener(new OnClickListener(){
          @Override public void onClick(          View arg0){
            cancel((String)arg0.getTag());
          }
        }
);
        ((ImageView)v.findViewById(R.id.ivCancel)).setVisibility(View.VISIBLE);
        ((ImageView)v.findViewById(R.id.ivBooking)).setVisibility(View.GONE);
      }
 else {
        ((ImageView)v.findViewById(R.id.ivCancel)).setVisibility(View.INVISIBLE);
        ((ImageView)v.findViewById(R.id.ivBooking)).setVisibility(View.GONE);
      }
      llRes.addView(v);
    }
  }
  if (result.getPendingFees() != null) {
    findViewById(R.id.tvPendingFeesLabel).setVisibility(View.VISIBLE);
    findViewById(R.id.tvPendingFees).setVisibility(View.VISIBLE);
    ((TextView)findViewById(R.id.tvPendingFees)).setText(result.getPendingFees());
  }
 else {
    findViewById(R.id.tvPendingFeesLabel).setVisibility(View.GONE);
    findViewById(R.id.tvPendingFees).setVisibility(View.GONE);
  }
  if (result.getValidUntil() != null) {
    findViewById(R.id.tvValidUntilLabel).setVisibility(View.VISIBLE);
    findViewById(R.id.tvValidUntil).setVisibility(View.VISIBLE);
    ((TextView)findViewById(R.id.tvValidUntil)).setText(result.getValidUntil());
  }
 else {
    findViewById(R.id.tvValidUntilLabel).setVisibility(View.GONE);
    findViewById(R.id.tvValidUntil).setVisibility(View.GONE);
  }
  refreshage();
}"
86321,"protected DetailledItem parse_result(String html) throws IOException {
  Document doc=Jsoup.parse(html);
  DetailledItem result=new DetailledItem();
  String id=opac_url + doc.select(""String_Node_Str"").get(0).parent().attr(""String_Node_Str"");
  result.setId(id);
  String titleAndSubtitle=""String_Node_Str"";
  if (doc.select(""String_Node_Str"").size() > 0) {
    titleAndSubtitle=doc.select(""String_Node_Str"").first().text().trim();
    String title=titleAndSubtitle.substring(0,titleAndSubtitle.indexOf(""String_Node_Str"")).trim();
    result.setTitle(title);
    String subtitle=titleAndSubtitle.substring(titleAndSubtitle.indexOf(""String_Node_Str"") + 1).trim();
    result.addDetail(new Detail(""String_Node_Str"",subtitle));
  }
 else   if (doc.select(""String_Node_Str"").size() > 0) {
    titleAndSubtitle=doc.select(""String_Node_Str"").first().text().trim();
    String title=titleAndSubtitle.substring(0,titleAndSubtitle.indexOf(""String_Node_Str"")).trim();
    result.setTitle(title);
    String subtitle=titleAndSubtitle.substring(titleAndSubtitle.indexOf(""String_Node_Str"") + 1).trim();
    result.addDetail(new Detail(""String_Node_Str"",subtitle));
  }
 else {
    result.setTitle(""String_Node_Str"");
  }
  ContentValues e=new ContentValues();
  String location=""String_Node_Str"";
  for (  Element element : doc.select(""String_Node_Str"")) {
    String detail=element.text().trim();
    String title=element.firstElementSibling().text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    if (element.select(""String_Node_Str"").size() > 0 && location != ""String_Node_Str"") {
      e.put(DetailledItem.KEY_COPY_BRANCH,location);
      result.addCopy(e);
      location=""String_Node_Str"";
      e=new ContentValues();
    }
    if (!title.equals(""String_Node_Str"")) {
      if (title.indexOf(""String_Node_Str"") != -1) {
        title=title.substring(0,title.indexOf(""String_Node_Str""));
      }
      if (title.contains(""String_Node_Str"")) {
        e.put(DetailledItem.KEY_COPY_STATUS,detail);
      }
 else       if (title.contains(""String_Node_Str"")) {
        location+=detail;
      }
 else       if (title.contains(""String_Node_Str"")) {
        location+=""String_Node_Str"" + detail;
      }
 else       if (title.contains(""String_Node_Str"")) {
        e.put(DetailledItem.KEY_COPY_LOCATION,detail);
      }
 else       if (title.contains(""String_Node_Str"")) {
        e.put(DetailledItem.KEY_COPY_SHELFMARK,detail);
      }
 else       if (title.contains(""String_Node_Str"")) {
        detail=detail.replace(""String_Node_Str"",""String_Node_Str"").trim();
        detail=detail.replace(""String_Node_Str"",""String_Node_Str"");
        detail=detail.replace(""String_Node_Str"",""String_Node_Str"");
        e.put(DetailledItem.KEY_COPY_STATUS,detail);
      }
 else       if (!title.contains(""String_Node_Str"")) {
        result.addDetail(new Detail(title,detail));
      }
    }
  }
  e.put(DetailledItem.KEY_COPY_BRANCH,location);
  result.addCopy(e);
  return result;
}","protected DetailledItem parse_result(String html) throws IOException {
  Document doc=Jsoup.parse(html);
  DetailledItem result=new DetailledItem();
  String id=opac_url + doc.select(""String_Node_Str"").get(0).parent().attr(""String_Node_Str"");
  result.setId(id);
  String titleAndSubtitle=""String_Node_Str"";
  if (doc.select(""String_Node_Str"").size() > 0) {
    titleAndSubtitle=doc.select(""String_Node_Str"").first().text().trim();
    int slashPosition=titleAndSubtitle.indexOf(""String_Node_Str"");
    String title;
    String subtitle;
    if (slashPosition > 0) {
      title=titleAndSubtitle.substring(0,slashPosition).trim();
      subtitle=titleAndSubtitle.substring(slashPosition + 1).trim();
    }
 else {
      title=titleAndSubtitle;
      subtitle=""String_Node_Str"";
    }
    result.setTitle(title);
    result.addDetail(new Detail(""String_Node_Str"",subtitle));
  }
 else   if (doc.select(""String_Node_Str"").size() > 0) {
    titleAndSubtitle=doc.select(""String_Node_Str"").first().text().trim();
    String title=titleAndSubtitle.substring(0,titleAndSubtitle.indexOf(""String_Node_Str"")).trim();
    result.setTitle(title);
    String subtitle=titleAndSubtitle.substring(titleAndSubtitle.indexOf(""String_Node_Str"") + 1).trim();
    result.addDetail(new Detail(""String_Node_Str"",subtitle));
  }
 else {
    result.setTitle(""String_Node_Str"");
  }
  ContentValues e=new ContentValues();
  String location=""String_Node_Str"";
  for (  Element element : doc.select(""String_Node_Str"")) {
    String detail=element.text().trim();
    String title=element.firstElementSibling().text().trim().replace(""String_Node_Str"",""String_Node_Str"");
    if (element.select(""String_Node_Str"").size() > 0 && location != ""String_Node_Str"") {
      e.put(DetailledItem.KEY_COPY_BRANCH,location);
      result.addCopy(e);
      location=""String_Node_Str"";
      e=new ContentValues();
    }
    if (!title.equals(""String_Node_Str"")) {
      if (title.indexOf(""String_Node_Str"") != -1) {
        title=title.substring(0,title.indexOf(""String_Node_Str""));
      }
      if (title.contains(""String_Node_Str"")) {
        e.put(DetailledItem.KEY_COPY_STATUS,detail);
      }
 else       if (title.contains(""String_Node_Str"")) {
        location+=detail;
      }
 else       if (title.contains(""String_Node_Str"")) {
        location+=""String_Node_Str"" + detail;
      }
 else       if (title.contains(""String_Node_Str"")) {
        e.put(DetailledItem.KEY_COPY_LOCATION,detail);
      }
 else       if (title.contains(""String_Node_Str"")) {
        e.put(DetailledItem.KEY_COPY_SHELFMARK,detail);
      }
 else       if (title.contains(""String_Node_Str"")) {
        detail=detail.replace(""String_Node_Str"",""String_Node_Str"").trim();
        detail=detail.replace(""String_Node_Str"",""String_Node_Str"");
        detail=detail.replace(""String_Node_Str"",""String_Node_Str"");
        e.put(DetailledItem.KEY_COPY_STATUS,detail);
      }
 else       if (!title.contains(""String_Node_Str"")) {
        result.addDetail(new Detail(title,detail));
      }
    }
  }
  e.put(DetailledItem.KEY_COPY_BRANCH,location);
  result.addCopy(e);
  return result;
}"
86322,"@Override public AccountData account(Account account) throws IOException, JSONException {
  List<NameValuePair> params=new ArrayList<NameValuePair>();
  params.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
  params.add(new BasicNameValuePair(""String_Node_Str"",account.getPassword()));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  String html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(params,""String_Node_Str""));
  Document doc=Jsoup.parse(html);
  AccountData res=null;
  if (doc.select(""String_Node_Str"").size() > 0) {
    List<ContentValues> medien=new ArrayList<ContentValues>();
    parse_medialist(medien,doc,1);
    List<ContentValues> reserved=new ArrayList<ContentValues>();
    parse_reslist(reserved,doc,1);
    res=new AccountData(account.getId());
    res.setLent(medien);
    res.setReservations(reserved);
  }
 else   if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
      last_error=""String_Node_Str"";
      return null;
    }
 else {
      last_error=""String_Node_Str"" + doc.select(""String_Node_Str"").text().trim() + ""String_Node_Str"";
      return null;
    }
  }
 else {
    last_error=""String_Node_Str"";
  }
  return res;
}","@Override public AccountData account(Account account) throws IOException, JSONException {
  List<NameValuePair> params=new ArrayList<NameValuePair>();
  params.add(new BasicNameValuePair(""String_Node_Str"",account.getName()));
  params.add(new BasicNameValuePair(""String_Node_Str"",account.getPassword()));
  params.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  String html=httpPost(opac_url + ""String_Node_Str"",new UrlEncodedFormEntity(params,""String_Node_Str""));
  Document doc=Jsoup.parse(html);
  Log.d(""String_Node_Str"",html);
  Log.d(""String_Node_Str"",doc.select(""String_Node_Str"").text().trim());
  AccountData res=new AccountData(account.getId());
  List<ContentValues> medien=new ArrayList<ContentValues>();
  List<ContentValues> reserved=new ArrayList<ContentValues>();
  if (doc.select(""String_Node_Str"").size() > 0) {
    parse_medialist(medien,doc,1);
  }
  if (doc.select(""String_Node_Str"").size() > 0) {
    parse_reslist(reserved,doc,1);
  }
  res.setLent(medien);
  res.setReservations(reserved);
  if (medien.isEmpty() && reserved.isEmpty()) {
    if (doc.select(""String_Node_Str"").size() > 0) {
      if (doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
      }
 else       if (doc.select(""String_Node_Str"").text().trim().contains(""String_Node_Str"")) {
        last_error=""String_Node_Str"";
        return null;
      }
 else {
        last_error=""String_Node_Str"" + doc.select(""String_Node_Str"").text().trim() + ""String_Node_Str"";
        return null;
      }
    }
 else {
      last_error=""String_Node_Str"";
      return null;
    }
  }
  return res;
}"
86323,"protected void parse_medialist(List<ContentValues> medien,Document doc,int offset) throws ClientProtocolException, IOException {
  Elements copytrs=doc.select(""String_Node_Str"").first().select(""String_Node_Str"");
  doc.setBaseUri(opac_url);
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  int trs=copytrs.size();
  if (trs < 2)   return;
  assert(trs > 0);
  for (int i=1; i < trs; i++) {
    Element tr=copytrs.get(i);
    ContentValues e=new ContentValues();
    e.put(AccountData.KEY_LENT_TITLE,tr.child(0).text().trim().replace(""String_Node_Str"",""String_Node_Str""));
    e.put(AccountData.KEY_LENT_AUTHOR,tr.child(1).text().trim().replace(""String_Node_Str"",""String_Node_Str""));
    e.put(AccountData.KEY_LENT_STATUS,tr.child(3).text().trim().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
    e.put(AccountData.KEY_LENT_DEADLINE,tr.child(4).text().trim().replace(""String_Node_Str"",""String_Node_Str""));
    try {
      e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,sdf.parse(e.getAsString(AccountData.KEY_LENT_DEADLINE)).getTime());
    }
 catch (    ParseException e1) {
      e1.printStackTrace();
    }
    e.put(AccountData.KEY_LENT_LINK,tr.child(5).select(""String_Node_Str"").attr(""String_Node_Str""));
    medien.add(e);
  }
  assert(medien.size() == trs - 1);
}","protected void parse_medialist(List<ContentValues> medien,Document doc,int offset) throws ClientProtocolException, IOException {
  Elements copytrs=doc.select(""String_Node_Str"");
  doc.setBaseUri(opac_url);
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  int trs=copytrs.size();
  if (trs < 2)   return;
  assert(trs > 0);
  for (int i=1; i < trs; i++) {
    Element tr=copytrs.get(i);
    ContentValues e=new ContentValues();
    e.put(AccountData.KEY_LENT_TITLE,tr.child(0).text().trim().replace(""String_Node_Str"",""String_Node_Str""));
    e.put(AccountData.KEY_LENT_AUTHOR,tr.child(1).text().trim().replace(""String_Node_Str"",""String_Node_Str""));
    e.put(AccountData.KEY_LENT_STATUS,tr.child(3).text().trim().replace(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"");
    e.put(AccountData.KEY_LENT_DEADLINE,tr.child(4).text().trim().replace(""String_Node_Str"",""String_Node_Str""));
    try {
      e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,sdf.parse(e.getAsString(AccountData.KEY_LENT_DEADLINE)).getTime());
    }
 catch (    ParseException e1) {
      e1.printStackTrace();
    }
    e.put(AccountData.KEY_LENT_LINK,tr.child(5).select(""String_Node_Str"").attr(""String_Node_Str""));
    medien.add(e);
  }
  assert(medien.size() == trs - 1);
}"
86324,"protected void reservationStart(){
  if (invalidated) {
    new RestoreSessionTask().execute(false);
  }
  if (app.getApi() instanceof EbookServiceApi) {
    SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
    if (sp.getString(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"") && ((EbookServiceApi)app.getApi()).isEbook(item)) {
      AlertDialog.Builder builder=new AlertDialog.Builder(this);
      builder.setMessage(getString(R.string.opac_error_email)).setCancelable(false).setNegativeButton(R.string.dismiss,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int id){
          dialog.cancel();
        }
      }
).setPositiveButton(R.string.prefs,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int id){
          dialog.dismiss();
          app.toPrefs(SearchResultDetailsActivity.this);
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
      return;
    }
  }
  AccountDataSource data=new AccountDataSource(this);
  data.open();
  final List<Account> accounts=data.getAccountsWithPassword(app.getLibrary().getIdent());
  data.close();
  if (accounts.size() == 0) {
    dialog_no_credentials();
    return;
  }
 else   if (accounts.size() > 1) {
    AlertDialog.Builder builder=new AlertDialog.Builder(this);
    LayoutInflater inflater=getLayoutInflater();
    View view=inflater.inflate(R.layout.simple_list_dialog,null);
    ListView lv=(ListView)view.findViewById(R.id.lvBibs);
    AccountListAdapter adapter=new AccountListAdapter(this,accounts);
    lv.setAdapter(adapter);
    lv.setOnItemClickListener(new OnItemClickListener(){
      @Override public void onItemClick(      AdapterView<?> parent,      View view,      int position,      long id){
        if (accounts.get(position).getId() != app.getAccount().getId() || account_switched) {
          app.setAccount(accounts.get(position).getId());
          dialog=ProgressDialog.show(SearchResultDetailsActivity.this,""String_Node_Str"",getString(R.string.doing_res),true);
          dialog.show();
          new RestoreSessionTask().execute();
        }
 else {
          reservationDo();
        }
        adialog.dismiss();
      }
    }
);
    builder.setTitle(R.string.account_select).setView(view).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        adialog.cancel();
      }
    }
).setNeutralButton(R.string.accounts_edit,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        adialog.dismiss();
        Intent intent=new Intent(SearchResultDetailsActivity.this,AccountListActivity.class);
        startActivity(intent);
      }
    }
);
    adialog=builder.create();
    adialog.show();
  }
 else {
    reservationDo();
  }
}","protected void reservationStart(){
  if (invalidated) {
    new RestoreSessionTask().execute(false);
  }
  if (app.getApi() instanceof EbookServiceApi) {
    SharedPreferences sp=PreferenceManager.getDefaultSharedPreferences(this);
    if (sp.getString(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"") && ((EbookServiceApi)app.getApi()).isEbook(item)) {
      AlertDialog.Builder builder=new AlertDialog.Builder(this);
      builder.setMessage(getString(R.string.opac_error_email)).setCancelable(false).setNegativeButton(R.string.dismiss,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int id){
          dialog.cancel();
        }
      }
).setPositiveButton(R.string.prefs,new DialogInterface.OnClickListener(){
        @Override public void onClick(        DialogInterface dialog,        int id){
          dialog.dismiss();
          app.toPrefs(SearchResultDetailsActivity.this);
        }
      }
);
      AlertDialog alert=builder.create();
      alert.show();
      return;
    }
  }
  AccountDataSource data=new AccountDataSource(this);
  data.open();
  final List<Account> accounts=data.getAccountsWithPassword(app.getLibrary().getIdent());
  data.close();
  if (accounts.size() == 0) {
    dialog_no_credentials();
    return;
  }
 else   if (accounts.size() > 1) {
    AlertDialog.Builder builder=new AlertDialog.Builder(this);
    LayoutInflater inflater=getLayoutInflater();
    View view=inflater.inflate(R.layout.simple_list_dialog,null);
    ListView lv=(ListView)view.findViewById(R.id.lvBibs);
    AccountListAdapter adapter=new AccountListAdapter(this,accounts);
    lv.setAdapter(adapter);
    lv.setOnItemClickListener(new OnItemClickListener(){
      @Override public void onItemClick(      AdapterView<?> parent,      View view,      int position,      long id){
        if (accounts.get(position).getId() != app.getAccount().getId() || account_switched) {
          app.setAccount(accounts.get(position).getId());
          dialog=ProgressDialog.show(SearchResultDetailsActivity.this,""String_Node_Str"",getString(R.string.doing_res),true);
          dialog.show();
          new RestoreSessionTask().execute(true);
        }
 else {
          reservationDo();
        }
        adialog.dismiss();
      }
    }
);
    builder.setTitle(R.string.account_select).setView(view).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        adialog.cancel();
      }
    }
).setNeutralButton(R.string.accounts_edit,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        adialog.dismiss();
        Intent intent=new Intent(SearchResultDetailsActivity.this,AccountListActivity.class);
        startActivity(intent);
      }
    }
);
    adialog=builder.create();
    adialog.show();
  }
 else {
    reservationDo();
  }
}"
86325,"@Override public ProlongResult prolong(String a,Account account,int useraction,String Selection) throws IOException {
  if (a.startsWith(""String_Node_Str"")) {
    last_error=a.substring(1);
    return new ProlongResult(MultiStepResult.Status.ERROR);
  }
  String[] parts=a.split(""String_Node_Str"");
  String offset=parts[0];
  String query=parts[1];
  if (!initialised)   start();
  if (System.currentTimeMillis() - logged_in > SESSION_LIFETIME || logged_in_as == null) {
    try {
      account(account);
    }
 catch (    JSONException e) {
      e.printStackTrace();
      return new ProlongResult(MultiStepResult.Status.ERROR);
    }
  }
 else   if (logged_in_as.getId() != account.getId()) {
    try {
      account(account);
    }
 catch (    JSONException e) {
      e.printStackTrace();
      return new ProlongResult(MultiStepResult.Status.ERROR);
    }
  }
  httpGet(opac_url + ""String_Node_Str"",ENCODING);
  if (offset != ""String_Node_Str"")   httpGet(opac_url + ""String_Node_Str"" + offset,ENCODING);
  String html=httpGet(opac_url + ""String_Node_Str"" + query,ENCODING);
  Document doc=Jsoup.parse(html);
  if (doc.getElementsByClass(""String_Node_Str"").size() == 1) {
    last_error=doc.getElementsByClass(""String_Node_Str"").text();
    return new ProlongResult(MultiStepResult.Status.ERROR);
  }
  return new ProlongResult(MultiStepResult.Status.OK);
}","@Override public ProlongResult prolong(String a,Account account,int useraction,String Selection) throws IOException {
  if (a.startsWith(""String_Node_Str"")) {
    last_error=a.substring(1);
    return new ProlongResult(MultiStepResult.Status.ERROR);
  }
  String[] parts=a.split(""String_Node_Str"");
  String offset=parts[0];
  String query=parts[1];
  if (!initialised)   start();
  if (System.currentTimeMillis() - logged_in > SESSION_LIFETIME || logged_in_as == null) {
    try {
      account(account);
    }
 catch (    JSONException e) {
      e.printStackTrace();
      return new ProlongResult(MultiStepResult.Status.ERROR);
    }
  }
 else   if (logged_in_as.getId() != account.getId()) {
    try {
      account(account);
    }
 catch (    JSONException e) {
      e.printStackTrace();
      return new ProlongResult(MultiStepResult.Status.ERROR);
    }
  }
  httpGet(opac_url + ""String_Node_Str"",ENCODING);
  if (offset != ""String_Node_Str"")   httpGet(opac_url + ""String_Node_Str"" + offset,ENCODING);
  String html=httpGet(opac_url + ""String_Node_Str"" + query,ENCODING);
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").size() > 0) {
    last_error=doc.select(""String_Node_Str"").first().text();
    return new ProlongResult(MultiStepResult.Status.ERROR);
  }
  return new ProlongResult(MultiStepResult.Status.OK);
}"
86326,"public List<Library> getLibraries() throws IOException, JSONException {
  AssetManager assets=getAssets();
  String[] files=assets.list(ASSETS_BIBSDIR);
  int num=files.length;
  List<Library> libs=new ArrayList<Library>();
  StringBuilder builder=null;
  BufferedReader reader=null;
  InputStream fis=null;
  String line=null;
  String json=null;
  for (int i=0; i < num; i++) {
    builder=new StringBuilder();
    fis=assets.open(ASSETS_BIBSDIR + ""String_Node_Str"" + files[i]);
    reader=new BufferedReader(new InputStreamReader(fis,""String_Node_Str""));
    while ((line=reader.readLine()) != null) {
      builder.append(line);
    }
    fis.close();
    json=builder.toString();
    libs.add(Library.fromJSON(files[i].replace(""String_Node_Str"",""String_Node_Str""),new JSONObject(json)));
  }
  return libs;
}","public List<Library> getLibraries() throws IOException {
  AssetManager assets=getAssets();
  String[] files=assets.list(ASSETS_BIBSDIR);
  int num=files.length;
  List<Library> libs=new ArrayList<Library>();
  StringBuilder builder=null;
  BufferedReader reader=null;
  InputStream fis=null;
  String line=null;
  String json=null;
  for (int i=0; i < num; i++) {
    builder=new StringBuilder();
    fis=assets.open(ASSETS_BIBSDIR + ""String_Node_Str"" + files[i]);
    reader=new BufferedReader(new InputStreamReader(fis,""String_Node_Str""));
    while ((line=reader.readLine()) != null) {
      builder.append(line);
    }
    fis.close();
    json=builder.toString();
    try {
      Library lib=Library.fromJSON(files[i].replace(""String_Node_Str"",""String_Node_Str""),new JSONObject(json));
      libs.add(lib);
    }
 catch (    JSONException e) {
      Log.w(""String_Node_Str"",""String_Node_Str"" + files[i]);
      e.printStackTrace();
    }
  }
  return libs;
}"
86327,"public void add(){
  AlertDialog.Builder builder=new AlertDialog.Builder(AccountListActivity.this);
  LayoutInflater inflater=getLayoutInflater();
  View view=inflater.inflate(R.layout.library_select_dialog,null);
  final ExpandableListView lv=(ExpandableListView)view.findViewById(R.id.lvBibs);
  try {
    libraries=((OpacClient)getApplication()).getLibraries();
  }
 catch (  IOException e) {
    ACRA.getErrorReporter().handleException(e);
  }
catch (  JSONException e) {
    ACRA.getErrorReporter().handleException(e);
  }
  final LibraryListAdapter la=new LibraryListAdapter(this);
  Collections.sort(libraries);
  for (  Library lib : libraries) {
    la.addItem(lib);
  }
  lv.setAdapter(la);
  lv.setOnChildClickListener(new OnChildClickListener(){
    @Override public boolean onChildClick(    ExpandableListView arg0,    View arg1,    int groupPosition,    int childPosition,    long arg4){
      AccountDataSource data=new AccountDataSource(AccountListActivity.this);
      data.open();
      Account acc=new Account();
      acc.setLibrary(la.getChild(groupPosition,childPosition).getIdent());
      acc.setLabel(getString(R.string.default_account_name));
      long insertedid=data.addAccount(acc);
      data.close();
      dialog.dismiss();
      Intent i=new Intent(AccountListActivity.this,AccountEditActivity.class);
      i.putExtra(""String_Node_Str"",insertedid);
      i.putExtra(""String_Node_Str"",true);
      startActivity(i);
      return false;
    }
  }
);
  final TextView tvLocateString=(TextView)view.findViewById(R.id.tvLocateString);
  final ImageView ivLocationIcon=(ImageView)view.findViewById(R.id.ivLocationIcon);
  final LinearLayout llLocate=(LinearLayout)view.findViewById(R.id.llLocate);
  final LocationManager locationManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
  Criteria criteria=new Criteria();
  criteria.setAccuracy(Criteria.ACCURACY_COARSE);
  final String provider=locationManager.getBestProvider(criteria,true);
  if (provider == null)   llLocate.setVisibility(View.GONE);
  llLocate.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      tvLocateString.setText(R.string.geolocate_progress);
      ivLocationIcon.setImageResource(R.drawable.ic_locate);
      locationManager.requestLocationUpdates(provider,0,0,new LocationListener(){
        @Override public void onStatusChanged(        String provider,        int status,        Bundle extras){
        }
        @Override public void onProviderEnabled(        String provider){
        }
        @Override public void onProviderDisabled(        String provider){
        }
        @Override public void onLocationChanged(        Location location){
          if (location != null) {
            double lat=location.getLatitude();
            double lon=location.getLongitude();
            float shortest=-1;
            Library closest=null;
            for (            Library lib : libraries) {
              float[] result=new float[1];
              double[] geo=lib.getGeo();
              if (geo == null)               continue;
              Location.distanceBetween(lat,lon,geo[0],geo[1],result);
              if (shortest == -1 || result[0] < shortest) {
                shortest=result[0];
                closest=lib;
              }
            }
            if (closest != null) {
              tvLocateString.setText(getString(R.string.geolocate_found,closest.getCity()));
              ivLocationIcon.setImageResource(R.drawable.ic_located);
              int[] position=la.findPosition(closest);
              if (position != null) {
                lv.expandGroup(position[0],false);
                lv.setSelectedChild(position[0],position[1],true);
              }
            }
          }
        }
      }
);
    }
  }
);
  builder.setView(view).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
      dialog.cancel();
    }
  }
);
  dialog=builder.create();
  dialog.show();
}","public void add(){
  AlertDialog.Builder builder=new AlertDialog.Builder(AccountListActivity.this);
  LayoutInflater inflater=getLayoutInflater();
  View view=inflater.inflate(R.layout.library_select_dialog,null);
  final ExpandableListView lv=(ExpandableListView)view.findViewById(R.id.lvBibs);
  try {
    libraries=((OpacClient)getApplication()).getLibraries();
  }
 catch (  IOException e) {
    ACRA.getErrorReporter().handleException(e);
  }
  final LibraryListAdapter la=new LibraryListAdapter(this);
  Collections.sort(libraries);
  for (  Library lib : libraries) {
    la.addItem(lib);
  }
  lv.setAdapter(la);
  lv.setOnChildClickListener(new OnChildClickListener(){
    @Override public boolean onChildClick(    ExpandableListView arg0,    View arg1,    int groupPosition,    int childPosition,    long arg4){
      AccountDataSource data=new AccountDataSource(AccountListActivity.this);
      data.open();
      Account acc=new Account();
      acc.setLibrary(la.getChild(groupPosition,childPosition).getIdent());
      acc.setLabel(getString(R.string.default_account_name));
      long insertedid=data.addAccount(acc);
      data.close();
      dialog.dismiss();
      Intent i=new Intent(AccountListActivity.this,AccountEditActivity.class);
      i.putExtra(""String_Node_Str"",insertedid);
      i.putExtra(""String_Node_Str"",true);
      startActivity(i);
      return false;
    }
  }
);
  final TextView tvLocateString=(TextView)view.findViewById(R.id.tvLocateString);
  final ImageView ivLocationIcon=(ImageView)view.findViewById(R.id.ivLocationIcon);
  final LinearLayout llLocate=(LinearLayout)view.findViewById(R.id.llLocate);
  final LocationManager locationManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
  Criteria criteria=new Criteria();
  criteria.setAccuracy(Criteria.ACCURACY_COARSE);
  final String provider=locationManager.getBestProvider(criteria,true);
  if (provider == null)   llLocate.setVisibility(View.GONE);
  llLocate.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      tvLocateString.setText(R.string.geolocate_progress);
      ivLocationIcon.setImageResource(R.drawable.ic_locate);
      locationManager.requestLocationUpdates(provider,0,0,new LocationListener(){
        @Override public void onStatusChanged(        String provider,        int status,        Bundle extras){
        }
        @Override public void onProviderEnabled(        String provider){
        }
        @Override public void onProviderDisabled(        String provider){
        }
        @Override public void onLocationChanged(        Location location){
          if (location != null) {
            double lat=location.getLatitude();
            double lon=location.getLongitude();
            float shortest=-1;
            Library closest=null;
            for (            Library lib : libraries) {
              float[] result=new float[1];
              double[] geo=lib.getGeo();
              if (geo == null)               continue;
              Location.distanceBetween(lat,lon,geo[0],geo[1],result);
              if (shortest == -1 || result[0] < shortest) {
                shortest=result[0];
                closest=lib;
              }
            }
            if (closest != null) {
              tvLocateString.setText(getString(R.string.geolocate_found,closest.getCity()));
              ivLocationIcon.setImageResource(R.drawable.ic_located);
              int[] position=la.findPosition(closest);
              if (position != null) {
                lv.expandGroup(position[0],false);
                lv.setSelectedChild(position[0],position[1],true);
              }
            }
          }
        }
      }
);
    }
  }
);
  builder.setView(view).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
      dialog.cancel();
    }
  }
);
  dialog=builder.create();
  dialog.show();
}"
86328,"public void add(){
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  LayoutInflater inflater=getLayoutInflater();
  View view=inflater.inflate(R.layout.library_select_dialog,null);
  final ExpandableListView lv=(ExpandableListView)view.findViewById(R.id.lvBibs);
  try {
    libraries=((OpacClient)getApplication()).getLibraries();
  }
 catch (  IOException e) {
    ACRA.getErrorReporter().handleException(e);
  }
catch (  JSONException e) {
    ACRA.getErrorReporter().handleException(e);
  }
  final LibraryListAdapter la=new LibraryListAdapter(this);
  Collections.sort(libraries);
  for (  Library lib : libraries) {
    la.addItem(lib);
  }
  lv.setAdapter(la);
  lv.setOnChildClickListener(new OnChildClickListener(){
    @Override public boolean onChildClick(    ExpandableListView arg0,    View arg1,    int groupPosition,    int childPosition,    long arg4){
      AccountDataSource data=new AccountDataSource(WelcomeActivity.this);
      data.open();
      Account acc=new Account();
      acc.setLibrary(la.getChild(groupPosition,childPosition).getIdent());
      acc.setLabel(getString(R.string.default_account_name));
      long insertedid=data.addAccount(acc);
      data.close();
      dialog.dismiss();
      ((OpacClient)getApplication()).setAccount(insertedid);
      Intent i=new Intent(WelcomeActivity.this,AccountEditActivity.class);
      i.putExtra(""String_Node_Str"",insertedid);
      i.putExtra(""String_Node_Str"",true);
      i.putExtra(""String_Node_Str"",true);
      startActivity(i);
      return false;
    }
  }
);
  final TextView tvLocateString=(TextView)view.findViewById(R.id.tvLocateString);
  final ImageView ivLocationIcon=(ImageView)view.findViewById(R.id.ivLocationIcon);
  final LinearLayout llLocate=(LinearLayout)view.findViewById(R.id.llLocate);
  final LocationManager locationManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
  Criteria criteria=new Criteria();
  criteria.setAccuracy(Criteria.ACCURACY_COARSE);
  final String provider=locationManager.getBestProvider(criteria,true);
  if (provider == null)   llLocate.setVisibility(View.GONE);
  llLocate.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      tvLocateString.setText(R.string.geolocate_progress);
      ivLocationIcon.setImageResource(R.drawable.ic_locate);
      if (provider == null)       return;
      locationManager.requestLocationUpdates(provider,0,0,new LocationListener(){
        @Override public void onStatusChanged(        String provider,        int status,        Bundle extras){
        }
        @Override public void onProviderEnabled(        String provider){
        }
        @Override public void onProviderDisabled(        String provider){
        }
        @Override public void onLocationChanged(        Location location){
          if (location != null) {
            double lat=location.getLatitude();
            double lon=location.getLongitude();
            float shortest=-1;
            Library closest=null;
            for (            Library lib : libraries) {
              float[] result=new float[1];
              double[] geo=lib.getGeo();
              if (geo == null)               continue;
              Location.distanceBetween(lat,lon,geo[0],geo[1],result);
              if (shortest == -1 || result[0] < shortest) {
                shortest=result[0];
                closest=lib;
              }
            }
            if (closest != null) {
              tvLocateString.setText(getString(R.string.geolocate_found,closest.getCity()));
              ivLocationIcon.setImageResource(R.drawable.ic_located);
              int[] position=la.findPosition(closest);
              if (position != null) {
                lv.expandGroup(position[0],false);
                lv.setSelectedChild(position[0],position[1],true);
              }
            }
          }
        }
      }
);
    }
  }
);
  builder.setView(view).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
      dialog.cancel();
    }
  }
);
  dialog=builder.create();
  dialog.show();
}","public void add(){
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  LayoutInflater inflater=getLayoutInflater();
  View view=inflater.inflate(R.layout.library_select_dialog,null);
  final ExpandableListView lv=(ExpandableListView)view.findViewById(R.id.lvBibs);
  try {
    libraries=((OpacClient)getApplication()).getLibraries();
  }
 catch (  IOException e) {
    ACRA.getErrorReporter().handleException(e);
  }
  final LibraryListAdapter la=new LibraryListAdapter(this);
  Collections.sort(libraries);
  for (  Library lib : libraries) {
    la.addItem(lib);
  }
  lv.setAdapter(la);
  lv.setOnChildClickListener(new OnChildClickListener(){
    @Override public boolean onChildClick(    ExpandableListView arg0,    View arg1,    int groupPosition,    int childPosition,    long arg4){
      AccountDataSource data=new AccountDataSource(WelcomeActivity.this);
      data.open();
      Account acc=new Account();
      acc.setLibrary(la.getChild(groupPosition,childPosition).getIdent());
      acc.setLabel(getString(R.string.default_account_name));
      long insertedid=data.addAccount(acc);
      data.close();
      dialog.dismiss();
      ((OpacClient)getApplication()).setAccount(insertedid);
      Intent i=new Intent(WelcomeActivity.this,AccountEditActivity.class);
      i.putExtra(""String_Node_Str"",insertedid);
      i.putExtra(""String_Node_Str"",true);
      i.putExtra(""String_Node_Str"",true);
      startActivity(i);
      return false;
    }
  }
);
  final TextView tvLocateString=(TextView)view.findViewById(R.id.tvLocateString);
  final ImageView ivLocationIcon=(ImageView)view.findViewById(R.id.ivLocationIcon);
  final LinearLayout llLocate=(LinearLayout)view.findViewById(R.id.llLocate);
  final LocationManager locationManager=(LocationManager)getSystemService(Context.LOCATION_SERVICE);
  Criteria criteria=new Criteria();
  criteria.setAccuracy(Criteria.ACCURACY_COARSE);
  final String provider=locationManager.getBestProvider(criteria,true);
  if (provider == null)   llLocate.setVisibility(View.GONE);
  llLocate.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      tvLocateString.setText(R.string.geolocate_progress);
      ivLocationIcon.setImageResource(R.drawable.ic_locate);
      if (provider == null)       return;
      locationManager.requestLocationUpdates(provider,0,0,new LocationListener(){
        @Override public void onStatusChanged(        String provider,        int status,        Bundle extras){
        }
        @Override public void onProviderEnabled(        String provider){
        }
        @Override public void onProviderDisabled(        String provider){
        }
        @Override public void onLocationChanged(        Location location){
          if (location != null) {
            double lat=location.getLatitude();
            double lon=location.getLongitude();
            float shortest=-1;
            Library closest=null;
            for (            Library lib : libraries) {
              float[] result=new float[1];
              double[] geo=lib.getGeo();
              if (geo == null)               continue;
              Location.distanceBetween(lat,lon,geo[0],geo[1],result);
              if (shortest == -1 || result[0] < shortest) {
                shortest=result[0];
                closest=lib;
              }
            }
            if (closest != null) {
              tvLocateString.setText(getString(R.string.geolocate_found,closest.getCity()));
              ivLocationIcon.setImageResource(R.drawable.ic_located);
              int[] position=la.findPosition(closest);
              if (position != null) {
                lv.expandGroup(position[0],false);
                lv.setSelectedChild(position[0],position[1],true);
              }
            }
          }
        }
      }
);
    }
  }
);
  builder.setView(view).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int id){
      dialog.cancel();
    }
  }
);
  dialog=builder.create();
  dialog.show();
}"
86329,"protected void parse_medialist(List<ContentValues> medien,Document doc,int offset) throws ClientProtocolException, IOException {
  Elements copytrs=doc.select(""String_Node_Str"");
  doc.setBaseUri(opac_url);
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  int trs=copytrs.size();
  if (trs == 1)   return;
  assert(trs > 0);
  for (int i=1; i < trs; i++) {
    Element tr=copytrs.get(i);
    ContentValues e=new ContentValues();
    if (tr.text().contains(""String_Node_Str"")) {
      return;
    }
    e.put(AccountData.KEY_LENT_TITLE,tr.child(1).select(""String_Node_Str"").text().trim());
    try {
      e.put(AccountData.KEY_LENT_AUTHOR,tr.child(1).html().split(""String_Node_Str"")[1].trim());
      String frist=tr.child(2).html().split(""String_Node_Str"")[0].trim();
      if (frist.contains(""String_Node_Str""))       frist=frist.split(""String_Node_Str"")[1].trim();
      e.put(AccountData.KEY_LENT_DEADLINE,frist);
      e.put(AccountData.KEY_LENT_BRANCH,tr.child(2).html().split(""String_Node_Str"")[1].trim());
      if (!frist.equals(""String_Node_Str"")) {
        try {
          e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,sdf.parse(e.getAsString(AccountData.KEY_LENT_DEADLINE)).getTime());
        }
 catch (        ParseException e1) {
          e1.printStackTrace();
        }
      }
      if (tr.select(""String_Node_Str"").size() > 0) {
        for (        Element link : tr.select(""String_Node_Str"")) {
          Uri uri=Uri.parse(link.attr(""String_Node_Str""));
          if (uri.getQueryParameter(""String_Node_Str"").equals(""String_Node_Str"")) {
            e.put(AccountData.KEY_LENT_LINK,offset + ""String_Node_Str"" + uri.getQuery());
            break;
          }
        }
      }
 else       if (tr.select(""String_Node_Str"").size() == 1) {
        e.put(AccountData.KEY_LENT_LINK,""String_Node_Str"" + tr.select(""String_Node_Str"").text());
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
    medien.add(e);
  }
  assert(medien.size() == trs - 1);
}","protected void parse_medialist(List<ContentValues> medien,Document doc,int offset) throws ClientProtocolException, IOException {
  Elements copytrs=doc.select(""String_Node_Str"");
  doc.setBaseUri(opac_url);
  SimpleDateFormat sdf=new SimpleDateFormat(""String_Node_Str"");
  int trs=copytrs.size();
  if (trs == 1)   return;
  assert(trs > 0);
  for (int i=1; i < trs; i++) {
    Element tr=copytrs.get(i);
    ContentValues e=new ContentValues();
    if (tr.text().contains(""String_Node_Str"")) {
      return;
    }
    e.put(AccountData.KEY_LENT_TITLE,tr.child(1).select(""String_Node_Str"").text().trim());
    try {
      e.put(AccountData.KEY_LENT_AUTHOR,tr.child(1).html().split(""String_Node_Str"")[1].trim());
      String[] col2split=tr.child(2).html().split(""String_Node_Str"");
      String frist=col2split[0].trim();
      if (frist.contains(""String_Node_Str""))       frist=frist.split(""String_Node_Str"")[1].trim();
      e.put(AccountData.KEY_LENT_DEADLINE,frist);
      if (col2split.length > 1)       e.put(AccountData.KEY_LENT_BRANCH,col2split[1].trim());
      if (!frist.equals(""String_Node_Str"")) {
        try {
          e.put(AccountData.KEY_LENT_DEADLINE_TIMESTAMP,sdf.parse(e.getAsString(AccountData.KEY_LENT_DEADLINE)).getTime());
        }
 catch (        ParseException e1) {
          e1.printStackTrace();
        }
      }
      if (tr.select(""String_Node_Str"").size() > 0) {
        for (        Element link : tr.select(""String_Node_Str"")) {
          Uri uri=Uri.parse(link.attr(""String_Node_Str""));
          if (uri.getQueryParameter(""String_Node_Str"").equals(""String_Node_Str"")) {
            e.put(AccountData.KEY_LENT_LINK,offset + ""String_Node_Str"" + uri.getQuery());
            break;
          }
        }
      }
 else       if (tr.select(""String_Node_Str"").size() == 1) {
        e.put(AccountData.KEY_LENT_LINK,""String_Node_Str"" + tr.select(""String_Node_Str"").text());
      }
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
    medien.add(e);
  }
  assert(medien.size() == trs - 1);
}"
86330,"private SearchRequestResult parse_search(String html,int page){
  Document doc=Jsoup.parse(html);
  Elements table=doc.select(""String_Node_Str"");
  List<SearchResult> results=new ArrayList<SearchResult>();
  for (int i=0; i < table.size(); i++) {
    Element tr=table.get(i);
    SearchResult sr=new SearchResult();
    String[] fparts=tr.select(""String_Node_Str"").get(0).attr(""String_Node_Str"").split(""String_Node_Str"");
    String fname=fparts[fparts.length - 1];
    if (data.has(""String_Node_Str"")) {
      try {
        sr.setType(MediaType.valueOf(data.getJSONObject(""String_Node_Str"").getString(fname)));
      }
 catch (      JSONException e) {
        sr.setType(defaulttypes.get(fname.toLowerCase().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")));
      }
catch (      IllegalArgumentException e) {
        sr.setType(defaulttypes.get(fname.toLowerCase().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")));
      }
    }
 else {
      sr.setType(defaulttypes.get(fname.toLowerCase().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")));
    }
    try {
      Comment c=(Comment)tr.child(1).childNode(0);
      String comment=c.getData().trim();
      String id=comment.split(""String_Node_Str"")[1];
      sr.setId(id);
    }
 catch (    Exception e) {
    }
    sr.setInnerhtml(tr.child(1).child(0).html());
    sr.setNr(i);
    results.add(sr);
  }
  int results_total=-1;
  if (doc.select(""String_Node_Str"").size() > 0) {
    results_total=Integer.parseInt(doc.select(""String_Node_Str"").text().trim().replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  return new SearchRequestResult(results,results_total,page);
}","protected SearchRequestResult parse_search(String html,int page){
  Document doc=Jsoup.parse(html);
  Elements table=doc.select(""String_Node_Str"");
  List<SearchResult> results=new ArrayList<SearchResult>();
  for (int i=0; i < table.size(); i++) {
    Element tr=table.get(i);
    SearchResult sr=new SearchResult();
    String[] fparts=tr.select(""String_Node_Str"").get(0).attr(""String_Node_Str"").split(""String_Node_Str"");
    String fname=fparts[fparts.length - 1];
    if (data.has(""String_Node_Str"")) {
      try {
        sr.setType(MediaType.valueOf(data.getJSONObject(""String_Node_Str"").getString(fname)));
      }
 catch (      JSONException e) {
        sr.setType(defaulttypes.get(fname.toLowerCase().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")));
      }
catch (      IllegalArgumentException e) {
        sr.setType(defaulttypes.get(fname.toLowerCase().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")));
      }
    }
 else {
      sr.setType(defaulttypes.get(fname.toLowerCase().replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"")));
    }
    try {
      Comment c=(Comment)tr.child(1).childNode(0);
      String comment=c.getData().trim();
      String id=comment.split(""String_Node_Str"")[1];
      sr.setId(id);
    }
 catch (    Exception e) {
    }
    sr.setInnerhtml(tr.child(1).child(0).html());
    sr.setNr(i);
    results.add(sr);
  }
  int results_total=-1;
  if (doc.select(""String_Node_Str"").size() > 0) {
    results_total=Integer.parseInt(doc.select(""String_Node_Str"").text().trim().replaceAll(""String_Node_Str"",""String_Node_Str""));
  }
  return new SearchRequestResult(results,results_total,page);
}"
86331,"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (oldVersion < 2) {
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  if (oldVersion < 3) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion == 3) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 7) {
    db.execSQL(""String_Node_Str"");
  }
}","@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (oldVersion < 2) {
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
    db.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  }
  if (oldVersion < 3) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion == 3) {
    db.execSQL(""String_Node_Str"");
  }
  if (oldVersion < 7) {
    try {
      db.execSQL(""String_Node_Str"");
    }
 catch (    SQLiteException sqle) {
      sqle.printStackTrace();
    }
  }
}"
86332,"private List<SearchResult> parse_search(String html){
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").size() > 0) {
    last_error=doc.select(""String_Node_Str"").text().trim();
    return null;
  }
 else   if (doc.select(""String_Node_Str"").size() > 0) {
    last_error=doc.select(""String_Node_Str"").text().trim();
    return null;
  }
  this.results=doc.select(""String_Node_Str"").first().text();
  if (results.contains(""String_Node_Str"")) {
    reusehtml=html;
    last_error=""String_Node_Str"";
    return null;
  }
  Elements table=doc.select(""String_Node_Str"");
  identifier=null;
  List<SearchResult> results=new ArrayList<SearchResult>();
  for (int i=0; i < table.size(); i++) {
    Element tr=table.get(i);
    SearchResult sr=new SearchResult();
    if (tr.select(""String_Node_Str"").size() > 0) {
      String[] fparts=tr.select(""String_Node_Str"").get(0).attr(""String_Node_Str"").split(""String_Node_Str"");
      sr.setType(fparts[fparts.length - 1].replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    }
    String desc=""String_Node_Str"";
    List<Node> children=tr.child(2).childNodes();
    int childrennum=children.size();
    boolean haslink=false;
    for (int ch=0; ch < childrennum; ch++) {
      Node node=children.get(ch);
      if (node instanceof TextNode) {
        String text=((TextNode)node).text().trim();
        if (!text.equals(""String_Node_Str""))         desc+=text + ""String_Node_Str"";
      }
 else       if (node instanceof Element) {
        if (((Element)node).tag().getName().equals(""String_Node_Str"")) {
          if (node.hasAttr(""String_Node_Str"") && !haslink) {
            haslink=true;
            desc+=((Element)node).text() + ""String_Node_Str"";
            try {
              List<NameValuePair> anyurl=URLEncodedUtils.parse(new URI(((Element)node).attr(""String_Node_Str"")),""String_Node_Str"");
              for (              NameValuePair nv : anyurl) {
                if (nv.getName().equals(""String_Node_Str"")) {
                  identifier=nv.getValue();
                  break;
                }
              }
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
      }
    }
    if (desc.endsWith(""String_Node_Str""))     desc=desc.substring(0,desc.length() - 6);
    sr.setInnerhtml(desc);
    sr.setNr(i);
    sr.setId(null);
    results.add(sr);
  }
  resultcount=results.size();
  return results;
}","private List<SearchResult> parse_search(String html){
  Document doc=Jsoup.parse(html);
  if (doc.select(""String_Node_Str"").size() > 0) {
    last_error=doc.select(""String_Node_Str"").text().trim();
    return null;
  }
 else   if (doc.select(""String_Node_Str"").size() > 0) {
    last_error=doc.select(""String_Node_Str"").text().trim();
    return null;
  }
  this.results=doc.select(""String_Node_Str"").first().text();
  if (results.contains(""String_Node_Str"") || results.contains(""String_Node_Str"")) {
    reusehtml=html;
    last_error=""String_Node_Str"";
    return null;
  }
  Elements table=doc.select(""String_Node_Str"");
  identifier=null;
  List<SearchResult> results=new ArrayList<SearchResult>();
  for (int i=0; i < table.size(); i++) {
    Element tr=table.get(i);
    SearchResult sr=new SearchResult();
    if (tr.select(""String_Node_Str"").size() > 0) {
      String[] fparts=tr.select(""String_Node_Str"").get(0).attr(""String_Node_Str"").split(""String_Node_Str"");
      sr.setType(fparts[fparts.length - 1].replace(""String_Node_Str"",""String_Node_Str"").replace(""String_Node_Str"",""String_Node_Str"").toLowerCase());
    }
    String desc=""String_Node_Str"";
    List<Node> children=tr.child(2).childNodes();
    int childrennum=children.size();
    boolean haslink=false;
    for (int ch=0; ch < childrennum; ch++) {
      Node node=children.get(ch);
      if (node instanceof TextNode) {
        String text=((TextNode)node).text().trim();
        if (!text.equals(""String_Node_Str""))         desc+=text + ""String_Node_Str"";
      }
 else       if (node instanceof Element) {
        if (((Element)node).tag().getName().equals(""String_Node_Str"")) {
          if (node.hasAttr(""String_Node_Str"") && !haslink) {
            haslink=true;
            desc+=((Element)node).text() + ""String_Node_Str"";
            try {
              List<NameValuePair> anyurl=URLEncodedUtils.parse(new URI(((Element)node).attr(""String_Node_Str"")),""String_Node_Str"");
              for (              NameValuePair nv : anyurl) {
                if (nv.getName().equals(""String_Node_Str"")) {
                  identifier=nv.getValue();
                  break;
                }
              }
            }
 catch (            Exception e) {
              e.printStackTrace();
            }
          }
        }
      }
    }
    if (desc.endsWith(""String_Node_Str""))     desc=desc.substring(0,desc.length() - 6);
    sr.setInnerhtml(desc);
    sr.setNr(i);
    sr.setId(null);
    results.add(sr);
  }
  resultcount=results.size();
  return results;
}"
86333,"@Override public ReservationResult reservation(String reservation_info,Account acc,int useraction,String selection) throws IOException {
  final String branch_inputfield=""String_Node_Str"";
  HttpPost httppost;
  HttpGet httpget;
  HttpResponse response;
  Document doc=null;
  if (useraction == ReservationResult.ACTION_CONFIRMATION) {
    httppost=new HttpPost(opac_url + ""String_Node_Str"");
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
    response=ahc.execute(httppost);
    return new ReservationResult(Status.OK);
  }
 else   if (selection == null || useraction == 0) {
    httpget=new HttpGet(opac_url + ""String_Node_Str"" + reservation_info);
    response=ahc.execute(httpget);
    String html=convertStreamToString(response.getEntity().getContent());
    response.getEntity().consumeContent();
    doc=Jsoup.parse(html);
    if (doc.select(""String_Node_Str"").size() > 0) {
      httppost=new HttpPost(opac_url + ""String_Node_Str"");
      List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getName()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getPassword()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",doc.select(""String_Node_Str"").val()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
      response=ahc.execute(httppost);
      html=convertStreamToString(response.getEntity().getContent());
      doc=Jsoup.parse(html);
    }
    if (doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").size() > 0) {
      ContentValues branches=new ContentValues();
      for (      Element option : doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").first().children()) {
        String value=option.text().trim();
        String key;
        if (option.hasAttr(""String_Node_Str"")) {
          key=option.attr(""String_Node_Str"");
        }
 else {
          key=value;
        }
        branches.put(key,value);
      }
      ReservationResult result=new ReservationResult(Status.SELECTION_NEEDED);
      result.setActionIdentifier(ReservationResult.ACTION_BRANCH);
      result.setSelection(branches);
      return result;
    }
  }
 else   if (useraction == ReservationResult.ACTION_BRANCH) {
    httppost=new HttpPost(opac_url + ""String_Node_Str"");
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",selection));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
    response=ahc.execute(httppost);
    String html=convertStreamToString(response.getEntity().getContent());
    doc=Jsoup.parse(html);
  }
  if (doc == null)   return new ReservationResult(Status.ERROR);
  if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").attr(""String_Node_Str"").equals(""String_Node_Str"")) {
      List<String[]> details=new ArrayList<String[]>();
      for (      Element row : doc.select(""String_Node_Str"")) {
        if (row.select(""String_Node_Str"").size() == 1 && row.select(""String_Node_Str"").size() == 1) {
          details.add(new String[]{row.select(""String_Node_Str"").text().trim(),row.select(""String_Node_Str"").text().trim()});
        }
      }
      ReservationResult result=new ReservationResult(Status.CONFIRMATION_NEEDED);
      result.setDetails(details);
      return result;
    }
  }
  return new ReservationResult(Status.ERROR);
}","@Override public ReservationResult reservation(String reservation_info,Account acc,int useraction,String selection) throws IOException {
  final String branch_inputfield=""String_Node_Str"";
  HttpPost httppost;
  HttpGet httpget;
  HttpResponse response;
  Document doc=null;
  if (useraction == ReservationResult.ACTION_CONFIRMATION) {
    httppost=new HttpPost(opac_url + ""String_Node_Str"");
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
    response=ahc.execute(httppost);
    return new ReservationResult(Status.OK);
  }
 else   if (selection == null || useraction == 0) {
    httpget=new HttpGet(opac_url + ""String_Node_Str"" + reservation_info);
    response=ahc.execute(httpget);
    String html=convertStreamToString(response.getEntity().getContent());
    response.getEntity().consumeContent();
    doc=Jsoup.parse(html);
    if (doc.select(""String_Node_Str"").size() > 0) {
      httppost=new HttpPost(opac_url + ""String_Node_Str"");
      List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getName()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",acc.getPassword()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",doc.select(""String_Node_Str"").val()));
      nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
      httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
      response=ahc.execute(httppost);
      html=convertStreamToString(response.getEntity().getContent());
      doc=Jsoup.parse(html);
    }
    if (doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").size() > 0) {
      ContentValues branches=new ContentValues();
      for (      Element option : doc.select(""String_Node_Str"" + branch_inputfield + ""String_Node_Str"").first().children()) {
        String value=option.text().trim();
        String key;
        if (option.hasAttr(""String_Node_Str"")) {
          key=option.attr(""String_Node_Str"");
        }
 else {
          key=value;
        }
        branches.put(key,value);
      }
      ReservationResult result=new ReservationResult(Status.SELECTION_NEEDED);
      result.setActionIdentifier(ReservationResult.ACTION_BRANCH);
      result.setSelection(branches);
      return result;
    }
  }
 else   if (useraction == ReservationResult.ACTION_BRANCH) {
    httppost=new HttpPost(opac_url + ""String_Node_Str"");
    List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",selection));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
    response=ahc.execute(httppost);
    String html=convertStreamToString(response.getEntity().getContent());
    doc=Jsoup.parse(html);
  }
  if (doc == null)   return new ReservationResult(Status.ERROR);
  if (doc.select(""String_Node_Str"").size() > 0) {
    if (doc.select(""String_Node_Str"").attr(""String_Node_Str"").equals(""String_Node_Str"")) {
      List<String[]> details=new ArrayList<String[]>();
      for (      Element row : doc.select(""String_Node_Str"")) {
        if (row.select(""String_Node_Str"").size() == 1 && row.select(""String_Node_Str"").size() == 1) {
          details.add(new String[]{row.select(""String_Node_Str"").text().trim(),row.select(""String_Node_Str"").text().trim()});
        }
      }
      ReservationResult result=new ReservationResult(Status.CONFIRMATION_NEEDED);
      result.setDetails(details);
      return result;
    }
  }
  if (doc.getElementsByClass(""String_Node_Str"").size() == 1) {
    last_error=doc.getElementsByClass(""String_Node_Str"").get(0).text();
    return new ReservationResult(Status.ERROR);
  }
  return new ReservationResult(Status.ERROR);
}"
86334,"public void reservationDo(int useraction,String selection){
  dialog=ProgressDialog.show(SearchResultDetailsActivity.this,""String_Node_Str"",getString(R.string.doing_res),true);
  dialog.show();
  rt=new ResTask();
  rt.execute(app,item.getReservation_info(),useraction,selection);
}","public void reservationDo(int useraction,String selection){
  if (dialog == null) {
    dialog=ProgressDialog.show(SearchResultDetailsActivity.this,""String_Node_Str"",getString(R.string.doing_res),true);
    dialog.show();
  }
 else   if (!dialog.isShowing()) {
    dialog=ProgressDialog.show(SearchResultDetailsActivity.this,""String_Node_Str"",getString(R.string.doing_res),true);
    dialog.show();
  }
  rt=new ResTask();
  rt.execute(app,item.getReservation_info(),useraction,selection);
}"
86335,"protected void reservationStart(){
  AccountDataSource data=new AccountDataSource(this);
  data.open();
  final List<Account> accounts=data.getAccountsWithPassword(app.getLibrary().getIdent());
  data.close();
  if (accounts.size() == 0) {
    dialog_no_user();
    return;
  }
 else   if (accounts.size() > 1) {
    AlertDialog.Builder builder=new AlertDialog.Builder(this);
    LayoutInflater inflater=getLayoutInflater();
    View view=inflater.inflate(R.layout.simple_list_dialog,null);
    ListView lv=(ListView)view.findViewById(R.id.lvBibs);
    AccountListAdapter adapter=new AccountListAdapter(this,accounts);
    lv.setAdapter(adapter);
    lv.setOnItemClickListener(new OnItemClickListener(){
      @Override public void onItemClick(      AdapterView<?> parent,      View view,      int position,      long id){
        if (accounts.get(position).getId() != app.getAccount().getId() || account_switched) {
          app.setAccount(accounts.get(position).getId());
          new RestoreSessionTask().execute();
        }
 else {
          reservationDo();
        }
        adialog.dismiss();
      }
    }
);
    builder.setTitle(R.string.account_select).setView(view).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        adialog.cancel();
      }
    }
).setNeutralButton(R.string.accounts_edit,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        adialog.dismiss();
        Intent intent=new Intent(SearchResultDetailsActivity.this,AccountListActivity.class);
        startActivity(intent);
      }
    }
);
    adialog=builder.create();
    adialog.show();
  }
 else {
    reservationDo();
  }
}","protected void reservationStart(){
  AccountDataSource data=new AccountDataSource(this);
  data.open();
  final List<Account> accounts=data.getAccountsWithPassword(app.getLibrary().getIdent());
  data.close();
  if (accounts.size() == 0) {
    dialog_no_user();
    return;
  }
 else   if (accounts.size() > 1) {
    AlertDialog.Builder builder=new AlertDialog.Builder(this);
    LayoutInflater inflater=getLayoutInflater();
    View view=inflater.inflate(R.layout.simple_list_dialog,null);
    ListView lv=(ListView)view.findViewById(R.id.lvBibs);
    AccountListAdapter adapter=new AccountListAdapter(this,accounts);
    lv.setAdapter(adapter);
    lv.setOnItemClickListener(new OnItemClickListener(){
      @Override public void onItemClick(      AdapterView<?> parent,      View view,      int position,      long id){
        if (accounts.get(position).getId() != app.getAccount().getId() || account_switched) {
          app.setAccount(accounts.get(position).getId());
          dialog=ProgressDialog.show(SearchResultDetailsActivity.this,""String_Node_Str"",getString(R.string.doing_res),true);
          dialog.show();
          new RestoreSessionTask().execute();
        }
 else {
          reservationDo();
        }
        adialog.dismiss();
      }
    }
);
    builder.setTitle(R.string.account_select).setView(view).setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        adialog.cancel();
      }
    }
).setNeutralButton(R.string.accounts_edit,new DialogInterface.OnClickListener(){
      @Override public void onClick(      DialogInterface dialog,      int id){
        adialog.dismiss();
        Intent intent=new Intent(SearchResultDetailsActivity.this,AccountListActivity.class);
        startActivity(intent);
      }
    }
);
    adialog=builder.create();
    adialog.show();
  }
 else {
    reservationDo();
  }
}"
86336,"/** 
 * Set date of last caching
 * @return Password
 */
public long getCached(){
  return cached;
}","/** 
 * Set date of last caching
 * @return Timestamp in milliseconds
 */
public long getCached(){
  return cached;
}"
86337,"/** 
 * Get date of last caching
 * @param password Password
 */
public void setCached(long cached){
  this.cached=cached;
}","/** 
 * Set date of last caching
 * @param cached Timestamp in milliseconds (use <code>System.currentTimeMillis</code>)
 */
public void setCached(long cached){
  this.cached=cached;
}"
86338,"/** 
 * Add an entry to the database.
 * @param type The type of information. Can be one of the <code>META_TYPE_</code> constants but also a string specific to your OpacApi implementation.
 * @param library The library identification string this entry should be associated with, see {@link de.geeksfactory.opacclient.objects.Library#getIdent()}
 * @param key The key the information is stored with, for example the ID of a branch.
 * @param value The value to be stored, for example the name of a branch
 * @return
 */
public long addMeta(String type,String library,String key,String value);","/** 
 * Add an entry to the database.
 * @param type The type of information. Can be one of the <code>META_TYPE_</code> constants but also a string specific to your OpacApi implementation.
 * @param library The library identification string this entry should be associated with, see {@link de.geeksfactory.opacclient.objects.Library#getIdent()}
 * @param key The key the information is stored with, for example the ID of a branch.
 * @param value The value to be stored, for example the name of a branch
 * @return dataset ID
 */
public long addMeta(String type,String library,String key,String value);"
86339,"public AccountData getCachedAccountData(Account account){
  AccountData adata=new AccountData();
  List<ContentValues> lent=new ArrayList<ContentValues>();
  String[] selectionArgs={""String_Node_Str"" + account.getId()};
  Cursor cursor=database.query(AccountDatabase.TABLENAME_LENT,(String[])AccountDatabase.COLUMNS_LENT.values().toArray(),""String_Node_Str"",selectionArgs,null,null,null);
  cursor.moveToFirst();
  if (!cursor.isAfterLast()) {
    ContentValues entry=new ContentValues();
    for (    Object o : AccountDatabase.COLUMNS_LENT.entrySet()) {
      Map.Entry<String,String> field=(Map.Entry<String,String>)o;
      entry.put(field.getKey(),cursor.getString(cursor.getColumnIndex(field.getValue())));
    }
    lent.add(entry);
    cursor.moveToNext();
  }
  cursor.close();
  adata.setLent(lent);
  List<ContentValues> res=new ArrayList<ContentValues>();
  cursor=database.query(AccountDatabase.TABLENAME_RESERVATION,(String[])AccountDatabase.COLUMNS_RESERVATIONS.values().toArray(),""String_Node_Str"",selectionArgs,null,null,null);
  cursor.moveToFirst();
  if (!cursor.isAfterLast()) {
    ContentValues entry=new ContentValues();
    for (    Object o : AccountDatabase.COLUMNS_RESERVATIONS.entrySet()) {
      Map.Entry<String,String> field=(Map.Entry<String,String>)o;
      entry.put(field.getKey(),cursor.getString(cursor.getColumnIndex(field.getValue())));
    }
    res.add(entry);
    cursor.moveToNext();
  }
  cursor.close();
  adata.setReservations(res);
  return adata;
}","public AccountData getCachedAccountData(Account account){
  AccountData adata=new AccountData();
  List<ContentValues> lent=new ArrayList<ContentValues>();
  String[] selectionArgs={""String_Node_Str"" + account.getId()};
  Cursor cursor=database.query(AccountDatabase.TABLENAME_LENT,AccountDatabase.COLUMNS_LENT.values().toArray(new String[]{}),""String_Node_Str"",selectionArgs,null,null,null);
  cursor.moveToFirst();
  while (!cursor.isAfterLast()) {
    ContentValues entry=new ContentValues();
    for (    Object o : AccountDatabase.COLUMNS_LENT.entrySet()) {
      Map.Entry<String,String> field=(Map.Entry<String,String>)o;
      String value=cursor.getString(cursor.getColumnIndex(field.getValue()));
      if (value != null) {
        if (!value.equals(""String_Node_Str"")) {
          entry.put(field.getKey(),value);
        }
      }
    }
    lent.add(entry);
    cursor.moveToNext();
  }
  cursor.close();
  adata.setLent(lent);
  List<ContentValues> res=new ArrayList<ContentValues>();
  cursor=database.query(AccountDatabase.TABLENAME_RESERVATION,(String[])AccountDatabase.COLUMNS_RESERVATIONS.values().toArray(new String[]{}),""String_Node_Str"",selectionArgs,null,null,null);
  cursor.moveToFirst();
  while (!cursor.isAfterLast()) {
    ContentValues entry=new ContentValues();
    for (    Object o : AccountDatabase.COLUMNS_RESERVATIONS.entrySet()) {
      Map.Entry<String,String> field=(Map.Entry<String,String>)o;
      String value=cursor.getString(cursor.getColumnIndex(field.getValue()));
      if (value != null) {
        if (!value.equals(""String_Node_Str"")) {
          entry.put(field.getKey(),value);
        }
      }
    }
    res.add(entry);
    cursor.moveToNext();
  }
  cursor.close();
  adata.setReservations(res);
  return adata;
}"
86340,"private List<SearchResult> parse_search(String html){
  Document doc=Jsoup.parse(html);
  doc.setBaseUri(opac_url + ""String_Node_Str"");
  results=doc.select(""String_Node_Str"").first().text().trim();
  searchobj=doc.select(""String_Node_Str"").first().attr(""String_Node_Str"").split(""String_Node_Str"")[0];
  Elements table=doc.select(""String_Node_Str"");
  List<SearchResult> results=new ArrayList<SearchResult>();
  for (int i=0; i < table.size(); i++) {
    Element tr=table.get(i);
    SearchResult sr=new SearchResult();
    sr.setType(tr.select(""String_Node_Str"").text().replace(""String_Node_Str"",""String_Node_Str"").trim());
    String desc=""String_Node_Str"";
    Elements children=tr.select(""String_Node_Str"");
    int childrennum=children.size();
    boolean haslink=false;
    for (int ch=0; ch < childrennum; ch++) {
      Element node=children.get(ch);
      if (node.select(""String_Node_Str"").text().equals(""String_Node_Str"")) {
        desc+=""String_Node_Str"" + node.select(""String_Node_Str"").text().trim() + ""String_Node_Str"";
      }
 else       if (node.select(""String_Node_Str"").text().equals(""String_Node_Str"") || node.select(""String_Node_Str"").text().equals(""String_Node_Str"")) {
        desc+=node.select(""String_Node_Str"").text().trim() + ""String_Node_Str"";
      }
      if (node.select(""String_Node_Str"").size() > 0 && haslink == false) {
        sr.setId(Uri.parse(node.select(""String_Node_Str"").attr(""String_Node_Str"")).getQueryParameter(""String_Node_Str""));
        haslink=true;
      }
    }
    if (desc.endsWith(""String_Node_Str""))     desc=desc.substring(0,desc.length() - 6);
    sr.setInnerhtml(desc);
    sr.setNr(i);
    results.add(sr);
  }
  return results;
}","private List<SearchResult> parse_search(String html){
  Document doc=Jsoup.parse(html);
  doc.setBaseUri(opac_url + ""String_Node_Str"");
  results=doc.select(""String_Node_Str"").first().text().trim();
  if (doc.select(""String_Node_Str"").size() > 0) {
    searchobj=doc.select(""String_Node_Str"").first().attr(""String_Node_Str"").split(""String_Node_Str"")[0];
  }
  Elements table=doc.select(""String_Node_Str"");
  List<SearchResult> results=new ArrayList<SearchResult>();
  for (int i=0; i < table.size(); i++) {
    Element tr=table.get(i);
    SearchResult sr=new SearchResult();
    sr.setType(tr.select(""String_Node_Str"").text().replace(""String_Node_Str"",""String_Node_Str"").trim());
    String desc=""String_Node_Str"";
    Elements children=tr.select(""String_Node_Str"");
    int childrennum=children.size();
    boolean haslink=false;
    for (int ch=0; ch < childrennum; ch++) {
      Element node=children.get(ch);
      if (node.select(""String_Node_Str"").text().equals(""String_Node_Str"")) {
        desc+=""String_Node_Str"" + node.select(""String_Node_Str"").text().trim() + ""String_Node_Str"";
      }
 else       if (node.select(""String_Node_Str"").text().equals(""String_Node_Str"") || node.select(""String_Node_Str"").text().equals(""String_Node_Str"")) {
        desc+=node.select(""String_Node_Str"").text().trim() + ""String_Node_Str"";
      }
      if (node.select(""String_Node_Str"").size() > 0 && haslink == false) {
        sr.setId(Uri.parse(node.select(""String_Node_Str"").attr(""String_Node_Str"")).getQueryParameter(""String_Node_Str""));
        haslink=true;
      }
    }
    if (desc.endsWith(""String_Node_Str""))     desc=desc.substring(0,desc.length() - 6);
    sr.setInnerhtml(desc);
    sr.setNr(i);
    results.add(sr);
  }
  return results;
}"
86341,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.loading);
  ((TextView)findViewById(R.id.tvLoading)).setText(R.string.loading_details);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  id=getIntent().getStringExtra(""String_Node_Str"");
  if (getIntent().getIntExtra(""String_Node_Str"",-1) != -1) {
    ft=new FetchTask();
    ft.execute(app,getIntent().getIntExtra(""String_Node_Str"",0));
  }
 else {
    fst=new FetchSubTask();
    fst.execute(app,id);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.loading);
  ((TextView)findViewById(R.id.tvLoading)).setText(R.string.loading_details);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  if (getIntent().hasExtra(""String_Node_Str"") && !getIntent().getStringExtra(""String_Node_Str"").equals(""String_Node_Str""))   id=getIntent().getStringExtra(""String_Node_Str"");
  if (getIntent().getIntExtra(""String_Node_Str"",-1) != -1) {
    ft=new FetchTask();
    ft.execute(app,getIntent().getIntExtra(""String_Node_Str"",0));
  }
 else {
    fst=new FetchSubTask();
    fst.execute(app,id);
  }
}"
86342,"@Override public boolean onCreateOptionsMenu(Menu menu){
  MenuInflater mi=new MenuInflater(this);
  mi.inflate(R.menu.search_result_details_activity,menu);
  String bib=app.getLibrary().getIdent();
  StarDataSource data=new StarDataSource(this);
  data.open();
  if (item != null) {
    if (id == null || id.equals(""String_Node_Str"")) {
      if (data.isStarredTitle(bib,title)) {
        menu.findItem(R.id.action_star).setIcon(R.drawable.ic_ab_star_1);
      }
    }
 else {
      if (data.isStarred(bib,id)) {
        menu.findItem(R.id.action_star).setIcon(R.drawable.ic_ab_star_1);
      }
    }
  }
  data.close();
  return super.onCreateOptionsMenu(menu);
}","@Override public boolean onCreateOptionsMenu(Menu menu){
  MenuInflater mi=new MenuInflater(this);
  mi.inflate(R.menu.search_result_details_activity,menu);
  Log.i(""String_Node_Str"",""String_Node_Str"" + item + ""String_Node_Str""+ id);
  String bib=app.getLibrary().getIdent();
  StarDataSource data=new StarDataSource(this);
  data.open();
  if ((id == null || id.equals(""String_Node_Str"")) && item != null) {
    if (data.isStarredTitle(bib,title)) {
      menu.findItem(R.id.action_star).setIcon(R.drawable.ic_ab_star_1);
    }
  }
 else {
    if (data.isStarred(bib,id)) {
      menu.findItem(R.id.action_star).setIcon(R.drawable.ic_ab_star_1);
    }
  }
  data.close();
  return super.onCreateOptionsMenu(menu);
}"
86343,"public Account getAccount(){
  if (account != null) {
    if (sp.getLong(PREF_SELECTED_ACCOUNT,0) == account.getId()) {
      return account;
    }
  }
  AccountDataSource data=new AccountDataSource(this);
  data.open();
  Account acc=data.getAccount(sp.getLong(PREF_SELECTED_ACCOUNT,0));
  data.close();
  return acc;
}","public Account getAccount(){
  if (account != null) {
    if (sp.getLong(PREF_SELECTED_ACCOUNT,0) == account.getId()) {
      return account;
    }
  }
  AccountDataSource data=new AccountDataSource(this);
  data.open();
  account=data.getAccount(sp.getLong(PREF_SELECTED_ACCOUNT,0));
  data.close();
  return account;
}"
86344,"public void setAccount(long id){
  sp.edit().putLong(OpacClient.PREF_SELECTED_ACCOUNT,id).commit();
}","public void setAccount(long id){
  sp.edit().putLong(OpacClient.PREF_SELECTED_ACCOUNT,id).commit();
  account=null;
  api=null;
}"
86345,"private OpacApi initApi(Library lib) throws ClientProtocolException, SocketException, IOException, NotReachableException {
  OpacApi api=null;
  if (lib.getApi().equals(""String_Node_Str""))   api=new Bond26();
 else   return null;
  api.init(this,lib.getData());
  return api;
}","private OpacApi initApi(Library lib) throws ClientProtocolException, SocketException, IOException, NotReachableException {
  api=null;
  if (lib.getApi().equals(""String_Node_Str""))   api=new Bond26();
 else   return null;
  api.init(this,lib.getData());
  return api;
}"
86346,"public Account getAccount(){
  if (account != null) {
    if (sp.getLong(PREF_SELECTED_ACCOUNT,0) == account.getId()) {
      return account;
    }
  }
  AccountDataSource data=new AccountDataSource(this);
  data.open();
  Account acc=data.getAccount(sp.getLong(PREF_SELECTED_ACCOUNT,0));
  data.close();
  return acc;
}","public Account getAccount(){
  if (account != null) {
    if (sp.getLong(PREF_SELECTED_ACCOUNT,0) == account.getId()) {
      return account;
    }
  }
  AccountDataSource data=new AccountDataSource(this);
  data.open();
  account=data.getAccount(sp.getLong(PREF_SELECTED_ACCOUNT,0));
  data.close();
  return account;
}"
86347,"public void setAccount(long id){
  sp.edit().putLong(OpacClient.PREF_SELECTED_ACCOUNT,id).commit();
}","public void setAccount(long id){
  sp.edit().putLong(OpacClient.PREF_SELECTED_ACCOUNT,id).commit();
  account=null;
  api=null;
}"
86348,"private OpacApi initApi(Library lib) throws ClientProtocolException, SocketException, IOException, NotReachableException {
  OpacApi api=null;
  if (lib.getApi().equals(""String_Node_Str""))   api=new Bond26();
 else   return null;
  api.init(this,lib.getData());
  return api;
}","private OpacApi initApi(Library lib) throws ClientProtocolException, SocketException, IOException, NotReachableException {
  api=null;
  if (lib.getApi().equals(""String_Node_Str""))   api=new Bond26();
 else   return null;
  api.init(this,lib.getData());
  return api;
}"
86349,"public boolean isStarred(String bib,String id){
  List<Starred> items=new ArrayList<Starred>();
  String[] selA={bib,id};
  Cursor cursor=database.query(""String_Node_Str"",allColumns,""String_Node_Str"",selA,null,null,null);
  return (cursor.getCount() > 0);
}","public boolean isStarred(String bib,String id){
  List<Starred> items=new ArrayList<Starred>();
  String[] selA={bib,id};
  Cursor cursor=database.query(""String_Node_Str"",allColumns,""String_Node_Str"",selA,null,null,null);
  int c=cursor.getCount();
  cursor.close();
  return (c > 0);
}"
86350,"public void init() throws ClientProtocolException, IOException, NotReachableException {
  initialised=true;
  HttpGet httpget=new HttpGet(opac_url + ""String_Node_Str"");
  HttpResponse response=ahc.execute(httpget);
  if (response.getStatusLine().getStatusCode() == 500) {
    throw new NotReachableException();
  }
  response.getEntity().consumeContent();
  HttpPost httppost=new HttpPost(opac_url + ""String_Node_Str"");
  List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
  response=ahc.execute(httppost);
  String html=convertStreamToString(response.getEntity().getContent());
  extract_information(html);
}","public void init() throws ClientProtocolException, IOException, NotReachableException, SocketException {
  initialised=true;
  HttpGet httpget=new HttpGet(opac_url + ""String_Node_Str"");
  HttpResponse response=ahc.execute(httpget);
  if (response.getStatusLine().getStatusCode() == 500) {
    throw new NotReachableException();
  }
  response.getEntity().consumeContent();
  HttpPost httppost=new HttpPost(opac_url + ""String_Node_Str"");
  List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
  response=ahc.execute(httppost);
  String html=convertStreamToString(response.getEntity().getContent());
  extract_information(html);
}"
86351,"public List<List<String[]>> account(String ausw,String pwd) throws IOException, NotReachableException, JSONException, AccountUnsupportedException {
  if (!initialised)   init();
  HttpGet httpget;
  HttpPost httppost=new HttpPost(opac_url + ""String_Node_Str"");
  List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
  HttpResponse response=ahc.execute(httppost);
  Log.i(""String_Node_Str"",""String_Node_Str"" + response.getStatusLine().getStatusCode());
  if (response.getStatusLine().getStatusCode() == 200) {
    response.getEntity().consumeContent();
    httppost=new HttpPost(opac_url + ""String_Node_Str"");
    nameValuePairs=new ArrayList<NameValuePair>(2);
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",ausw));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",pwd));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
    response=ahc.execute(httppost);
  }
 else   if (response.getStatusLine().getStatusCode() == 302) {
    response.getEntity().consumeContent();
    httpget=new HttpGet(opac_url + ""String_Node_Str"");
    response=ahc.execute(httpget);
  }
 else   if (response.getStatusLine().getStatusCode() == 500) {
    throw new NotReachableException();
  }
  String html=convertStreamToString(response.getEntity().getContent());
  Document doc=Jsoup.parse(html);
  response.getEntity().consumeContent();
  if (doc.getElementsByClass(""String_Node_Str"").size() == 1) {
    last_error=doc.getElementsByClass(""String_Node_Str"").get(0).text();
    return null;
  }
  JSONArray copymap=null;
  try {
    copymap=bib.getJSONArray(2);
  }
 catch (  JSONException e) {
    throw new AccountUnsupportedException(html);
  }
  List<String[]> medien=new ArrayList<String[]>();
  Elements exemplartrs=doc.select(""String_Node_Str"").get(0).select(""String_Node_Str"");
  for (int i=0; i < exemplartrs.size(); i++) {
    Element tr=exemplartrs.get(i);
    String[] e=new String[8];
    for (int j=0; j < 8; j++) {
      if (copymap.getInt(j) > -1) {
        if (j == 7) {
          if (tr.child(copymap.getInt(j)).children().size() > 0) {
            e[j]=tr.child(copymap.getInt(j)).child(0).attr(""String_Node_Str"");
          }
 else {
            e[j]=null;
          }
        }
 else {
          e[j]=tr.child(copymap.getInt(j)).text();
        }
      }
 else {
        e[j]=""String_Node_Str"";
      }
    }
    medien.add(e);
  }
  try {
    copymap=bib.getJSONArray(3);
  }
 catch (  JSONException e) {
    throw new AccountUnsupportedException(html);
  }
  List<String[]> reservations=new ArrayList<String[]>();
  exemplartrs=doc.select(""String_Node_Str"").get(1).select(""String_Node_Str"");
  for (int i=0; i < exemplartrs.size(); i++) {
    Element tr=exemplartrs.get(i);
    String[] e=new String[5];
    for (int j=0; j < 5; j++) {
      int k=copymap.getInt(j);
      if (k > -1) {
        if (j == 4) {
          if (tr.child(k).children().size() > 0) {
            e[j]=tr.child(k).child(0).attr(""String_Node_Str"");
          }
 else {
            e[j]=null;
          }
        }
 else {
          e[j]=tr.child(k).text();
        }
      }
 else {
        e[j]=""String_Node_Str"";
      }
    }
    reservations.add(e);
  }
  List<List<String[]>> res=new ArrayList<List<String[]>>();
  res.add(medien);
  res.add(reservations);
  return res;
}","public List<List<String[]>> account(String ausw,String pwd) throws IOException, NotReachableException, JSONException, AccountUnsupportedException, SocketException {
  if (!initialised)   init();
  HttpGet httpget;
  HttpPost httppost=new HttpPost(opac_url + ""String_Node_Str"");
  List<NameValuePair> nameValuePairs=new ArrayList<NameValuePair>(2);
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
  httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
  HttpResponse response=ahc.execute(httppost);
  Log.i(""String_Node_Str"",""String_Node_Str"" + response.getStatusLine().getStatusCode());
  if (response.getStatusLine().getStatusCode() == 200) {
    response.getEntity().consumeContent();
    httppost=new HttpPost(opac_url + ""String_Node_Str"");
    nameValuePairs=new ArrayList<NameValuePair>(2);
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",ausw));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",pwd));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    nameValuePairs.add(new BasicNameValuePair(""String_Node_Str"",""String_Node_Str""));
    httppost.setEntity(new UrlEncodedFormEntity(nameValuePairs));
    response=ahc.execute(httppost);
  }
 else   if (response.getStatusLine().getStatusCode() == 302) {
    response.getEntity().consumeContent();
    httpget=new HttpGet(opac_url + ""String_Node_Str"");
    response=ahc.execute(httpget);
  }
 else   if (response.getStatusLine().getStatusCode() == 500) {
    throw new NotReachableException();
  }
  String html=convertStreamToString(response.getEntity().getContent());
  Document doc=Jsoup.parse(html);
  response.getEntity().consumeContent();
  if (doc.getElementsByClass(""String_Node_Str"").size() == 1) {
    last_error=doc.getElementsByClass(""String_Node_Str"").get(0).text();
    return null;
  }
  JSONArray copymap=null;
  try {
    copymap=bib.getJSONArray(2);
  }
 catch (  JSONException e) {
    throw new AccountUnsupportedException(html);
  }
  List<String[]> medien=new ArrayList<String[]>();
  Elements exemplartrs=doc.select(""String_Node_Str"").get(0).select(""String_Node_Str"");
  for (int i=0; i < exemplartrs.size(); i++) {
    Element tr=exemplartrs.get(i);
    String[] e=new String[8];
    for (int j=0; j < 8; j++) {
      if (copymap.getInt(j) > -1) {
        if (j == 7) {
          if (tr.child(copymap.getInt(j)).children().size() > 0) {
            e[j]=tr.child(copymap.getInt(j)).child(0).attr(""String_Node_Str"");
          }
 else {
            e[j]=null;
          }
        }
 else {
          e[j]=tr.child(copymap.getInt(j)).text();
        }
      }
 else {
        e[j]=""String_Node_Str"";
      }
    }
    medien.add(e);
  }
  try {
    copymap=bib.getJSONArray(3);
  }
 catch (  JSONException e) {
    throw new AccountUnsupportedException(html);
  }
  List<String[]> reservations=new ArrayList<String[]>();
  exemplartrs=doc.select(""String_Node_Str"").get(1).select(""String_Node_Str"");
  for (int i=0; i < exemplartrs.size(); i++) {
    Element tr=exemplartrs.get(i);
    String[] e=new String[5];
    for (int j=0; j < 5; j++) {
      int k=copymap.getInt(j);
      if (k > -1) {
        if (j == 4) {
          if (tr.child(k).children().size() > 0) {
            e[j]=tr.child(k).child(0).attr(""String_Node_Str"");
          }
 else {
            e[j]=null;
          }
        }
 else {
          e[j]=tr.child(k).text();
        }
      }
 else {
        e[j]=""String_Node_Str"";
      }
    }
    reservations.add(e);
  }
  List<List<String[]>> res=new ArrayList<List<String[]>>();
  res.add(medien);
  res.add(reservations);
  return res;
}"
86352,"@Override public View getView(int position,View contentView,ViewGroup viewGroup){
  View view=null;
  if (objects.get(position) == null) {
    LayoutInflater layoutInflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    view=layoutInflater.inflate(R.layout.searchresult_listitem,viewGroup,false);
    return view;
  }
  Starred item=objects.get(position);
  if (contentView == null) {
    LayoutInflater layoutInflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    view=layoutInflater.inflate(R.layout.starred_item,viewGroup,false);
  }
 else {
    view=contentView;
  }
  TextView tv=(TextView)view.findViewById(R.id.tvTitle);
  tv.setText(Html.fromHtml(item.getTitle()));
  ImageView iv=(ImageView)view.findViewById(R.id.ivDelete);
  iv.setFocusableInTouchMode(false);
  iv.setFocusable(false);
  iv.setTag(item);
  iv.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View arg0){
      objects.remove((Starred)arg0.getTag());
      ctx.remove((Starred)arg0.getTag());
      notifyDataSetChanged();
    }
  }
);
  return view;
}","@Override public View getView(int position,View contentView,ViewGroup viewGroup){
  View view=null;
  if (objects.get(position) == null) {
    LayoutInflater layoutInflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    view=layoutInflater.inflate(R.layout.searchresult_listitem,viewGroup,false);
    return view;
  }
  Starred item=objects.get(position);
  if (contentView == null) {
    LayoutInflater layoutInflater=(LayoutInflater)getContext().getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    view=layoutInflater.inflate(R.layout.starred_item,viewGroup,false);
  }
 else {
    view=contentView;
  }
  TextView tv=(TextView)view.findViewById(R.id.tvTitle);
  if (item.getTitle() != null)   tv.setText(Html.fromHtml(item.getTitle()));
 else   tv.setText(""String_Node_Str"");
  ImageView iv=(ImageView)view.findViewById(R.id.ivDelete);
  iv.setFocusableInTouchMode(false);
  iv.setFocusable(false);
  iv.setTag(item);
  iv.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View arg0){
      objects.remove((Starred)arg0.getTag());
      ctx.remove((Starred)arg0.getTag());
      notifyDataSetChanged();
    }
  }
);
  return view;
}"
86353,"/** 
 * Initialize the transformation for a collaborative modeling project
 * @param traceabilityMap 
 * @param references 
 * @param targetObject 
 * @param sourceObject 
 * @param scaffoldType 
 * @param scaffoldInfo 
 * @throws InitializerException Exception thrown if a problem occured during initialization
 */
public void initialize(ScaffoldInfo scaffoldInfo,ScaffoldType scaffoldType,EObject sourceObject,EObject targetObject,Iterable<EObject> references,Map<EObject,EObject> traceabilityMap) throws InitializerException {
  Collection<CDOObject> elementsToLock=new ArrayList<CDOObject>();
  elementsToLock.add(scaffoldInfo);
  if (targetObject instanceof CDOObject) {
    elementsToLock.add((CDOObject)targetObject);
  }
  Collection<CDOObject> lockedElements=null;
  try {
    lockedElements=CDOLockManager.INSTANCE.acquireLock(elementsToLock,false,true);
  }
 catch (  LockedInstanceException e) {
    throw new InitializerException(""String_Node_Str"");
  }
  for (  CDOObject elementToLock : elementsToLock) {
    if (!lockedElements.contains(elementToLock)) {
      throw new InitializerException(""String_Node_Str"");
    }
  }
}","/** 
 * Initialize the transformation for a collaborative modeling project
 * @param traceabilityMap 
 * @param references 
 * @param targetObject 
 * @param sourceObject 
 * @param scaffoldType 
 * @param scaffoldInfo 
 * @throws InitializerException Exception thrown if a problem occured during initialization
 */
public void initialize(ScaffoldInfo scaffoldInfo,ScaffoldType scaffoldType,EObject sourceObject,EObject targetObject,Iterable<EObject> references,Map<EObject,EObject> traceabilityMap) throws InitializerException {
  Collection<CDOObject> elementsToLock=new ArrayList<CDOObject>();
  elementsToLock.add(scaffoldInfo);
  if (targetObject instanceof CDOObject) {
    elementsToLock.add((CDOObject)targetObject);
  }
  try {
    Collection<CDOObject> lockedElements=CDOLockManager.INSTANCE.acquireLock(elementsToLock,false,true);
  }
 catch (  LockedInstanceException e) {
    throw new InitializerException(""String_Node_Str"");
  }
}"
86354,"@Test public void sequencesTest(){
  List<Sequence> sequences=new DataBaseServices().sequences(dataBase);
  assertEquals(8,sequences.size());
}","@Test public void sequencesTest(){
  List<Sequence> sequences=new DataBaseServices().localSequences(dataBase);
  assertEquals(8,sequences.size());
}"
86355,"/** 
 * Return the foreign key associated with the index if there is one
 * @return
 */
public ForeignKey getAssociatedForeignKey(){
  List<Column> columns=getColumns();
  if (columns.isEmpty()) {
    return null;
  }
  Column column=columns.get(0);
  for (  ForeignKey fk : column.getForeignKeys()) {
    List<Column> fkColumns=new ForeignKeyQuery(fk).getFKColumns();
    if (fkColumns.containsAll(columns) && columns.containsAll(fkColumns)) {
      return fk;
    }
  }
  return null;
}","/** 
 * Return the foreign key associated with the index if there is one
 * @return
 */
public ForeignKey getAssociatedForeignKey(){
  List<Column> columns=getColumns();
  if (columns.isEmpty()) {
    return null;
  }
  for (  Column column : columns) {
    if (column != null) {
      for (      ForeignKey fk : column.getForeignKeys()) {
        List<Column> fkColumns=new ForeignKeyQuery(fk).getFKColumns();
        if (fkColumns.containsAll(columns) && columns.containsAll(fkColumns)) {
          return fk;
        }
      }
    }
  }
  return null;
}"
86356,"/** 
 * This can be used to update the resource set's package registry with all needed EPackages.
 * @param resourceSet The resource set which registry has to be updated.
 * @generated
 */
@Override public void registerPackages(ResourceSet resourceSet){
  super.registerPackages(resourceSet);
  if (!isInWorkspace(org.eclipse.emf.compare.ComparePackage.class)) {
    resourceSet.getPackageRegistry().put(org.eclipse.emf.compare.ComparePackage.eINSTANCE.getNsURI(),org.eclipse.emf.compare.ComparePackage.eINSTANCE);
  }
  if (!isInWorkspace(org.obeonetwork.dsl.database.dbevolution.DbevolutionPackage.class)) {
    resourceSet.getPackageRegistry().put(org.obeonetwork.dsl.database.dbevolution.DbevolutionPackage.eINSTANCE.getNsURI(),org.obeonetwork.dsl.database.dbevolution.DbevolutionPackage.eINSTANCE);
  }
}","/** 
 * This can be used to update the resource set's package registry with all needed EPackages.
 * @param resourceSet The resource set which registry has to be updated.
 * @generated
 */
@Override public void registerPackages(ResourceSet resourceSet){
  super.registerPackages(resourceSet);
}"
86357,"private void buildSequences(DatabaseMetaData metaData,TableContainer owner){
  ResultSet rs=null;
  PreparedStatement pstmt=null;
  try {
    PreparedStatement psmt=metaData.getConnection().prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + owner.getName() + ""String_Node_Str"");
    rs=psmt.executeQuery();
    while (rs.next()) {
      String name=rs.getString(1);
      int increment=rs.getInt(2);
      int minValue=rs.getInt(3);
      BigInteger maxValueAsBigInt=new BigInteger(rs.getString(4));
      BigInteger maxIntValue=new BigInteger(Integer.toString(Integer.MAX_VALUE));
      Integer maxValue=null;
      if (maxValueAsBigInt.compareTo(maxIntValue) < 0) {
        maxValue=maxValueAsBigInt.intValue();
      }
 else {
        maxValue=-1;
      }
      int start=rs.getInt(5);
      Sequence sequence=CreationUtils.createSequence(owner,name,increment,minValue,maxValue,start);
      if (name.endsWith(""String_Node_Str"")) {
        String tableName=name.substring(0,name.length() - ""String_Node_Str"".length());
        AbstractTable abstractTable=queries.getTable(tableName);
        if (abstractTable != null && abstractTable instanceof Table) {
          Table table=(Table)abstractTable;
          if (table.getPrimaryKey() != null && table.getPrimaryKey().getColumns().size() == 1) {
            Column column=table.getPrimaryKey().getColumns().get(0);
            column.setSequence(sequence);
          }
        }
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
 finally {
    JdbcUtils.closeStatement(pstmt);
    JdbcUtils.closeResultSet(rs);
  }
}","private void buildSequences(TableContainer owner){
  ResultSet rs=null;
  PreparedStatement pstmt=null;
  try {
    PreparedStatement psmt=metaData.getConnection().prepareStatement(""String_Node_Str"" + ""String_Node_Str"" + schemaName + ""String_Node_Str"");
    rs=psmt.executeQuery();
    while (rs.next()) {
      String name=rs.getString(1);
      int increment=rs.getInt(2);
      int minValue=rs.getInt(3);
      BigInteger maxValueAsBigInt=new BigInteger(rs.getString(4));
      BigInteger maxIntValue=new BigInteger(Integer.toString(Integer.MAX_VALUE));
      Integer maxValue=null;
      if (maxValueAsBigInt.compareTo(maxIntValue) < 0) {
        maxValue=maxValueAsBigInt.intValue();
      }
 else {
        maxValue=-1;
      }
      int start=rs.getInt(5);
      Sequence sequence=CreationUtils.createSequence(owner,name,increment,minValue,maxValue,start);
      if (name.endsWith(""String_Node_Str"")) {
        String tableName=name.substring(0,name.length() - ""String_Node_Str"".length());
        AbstractTable abstractTable=queries.getTable(tableName);
        if (abstractTable != null && abstractTable instanceof Table) {
          Table table=(Table)abstractTable;
          if (table.getPrimaryKey() != null && table.getPrimaryKey().getColumns().size() == 1) {
            Column column=table.getPrimaryKey().getColumns().get(0);
            column.setSequence(sequence);
          }
        }
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
 finally {
    JdbcUtils.closeStatement(pstmt);
    JdbcUtils.closeResultSet(rs);
  }
}"
86358,"@Override public void buildTables(){
  super.buildTables();
  buildSequences(metaData,tableContainer);
}","@Override public void buildTables(){
  super.buildTables();
  buildSequences(tableContainer);
}"
86359,"public boolean test(Object receiver,String property,Object[] args,Object expectedValue){
  if (receiver instanceof IEditorPart) {
    if (receiver instanceof EnhancedRequirementEditor) {
      return true;
    }
    IEditorInput editorInput=((IEditorPart)receiver).getEditorInput();
    if (editorInput instanceof SessionEditorInput) {
      SessionEditorInput sessionEditorInput=(SessionEditorInput)editorInput;
      Session session=sessionEditorInput.getSession();
      if (session != null) {
        TransactionalEditingDomain ted=session.getTransactionalEditingDomain();
        if (ted != null) {
          return containsRequirementsModel(ted.getResourceSet());
        }
      }
    }
  }
  return false;
}","public boolean test(Object receiver,String property,Object[] args,Object expectedValue){
  if (receiver instanceof IEditorPart) {
    if (receiver instanceof RequirementEditor) {
      return true;
    }
    IEditorInput editorInput=((IEditorPart)receiver).getEditorInput();
    if (editorInput instanceof SessionEditorInput) {
      SessionEditorInput sessionEditorInput=(SessionEditorInput)editorInput;
      Session session=sessionEditorInput.getSession();
      if (session != null) {
        TransactionalEditingDomain ted=session.getTransactionalEditingDomain();
        if (ted != null) {
          return containsRequirementsModel(ted.getResourceSet());
        }
      }
    }
  }
  return false;
}"
86360,"public Map<String,String> getOldURIToPackageMap(){
  if (oldUriToNewUri == null) {
    oldUriToNewUri=new HashMap<String,String>();
    oldUriToNewUri.put(ENVIRONMENT_URI_OLD,ENVIRONMENT_URI_NEW);
    oldUriToNewUri.put(ENTITY_URI_OLD,ENTITY_URI_NEW);
    oldUriToNewUri.put(SOA_URI_OLD,SOA_URI_NEW);
  }
  return oldUriToNewUri;
}","public Map<String,String> getOldURIToPackageMap(){
  if (oldUriToNewUri == null) {
    oldUriToNewUri=new HashMap<String,String>();
    oldUriToNewUri.put(ENVIRONMENT_URI_OLD,ENVIRONMENT_URI_NEW);
    oldUriToNewUri.put(ENTITY_URI_OLD,ENTITY_URI_NEW);
    oldUriToNewUri.put(SOA_URI_OLD,SOA_URI_NEW);
    oldUriToNewUri.put(GRAAL_URI_OLD,GRAAL_URI_NEW);
  }
  return oldUriToNewUri;
}"
86361,"@Override public boolean isConcernedByUserStory(UserStory userStory){
  Task referencedTask=getTask();
  if (referencedTask != null) {
    referencedTask.isConcernedByUserStory(userStory);
  }
  return false;
}","@Override public boolean isConcernedByUserStory(UserStory userStory){
  Task referencedTask=getTask();
  if (referencedTask != null) {
    return referencedTask.isConcernedByUserStory(userStory);
  }
  return false;
}"
86362,"@Override public void notifyChanged(Notification msg){
  if (msg instanceof CDONotification) {
    return;
  }
  if (msg.getNotifier() instanceof ObeoDSMObject) {
    ObeoDSMObject notifier=(ObeoDSMObject)msg.getNotifier();
    if (!EnvironmentUtil.isResourceLoading(notifier)) {
      Date currentDate=new Date();
      if (!msg.getFeature().equals(EnvironmentPackage.Literals.OBEO_DSM_OBJECT__MODIFIED_ON) && !msg.getFeature().equals(EnvironmentPackage.Literals.OBEO_DSM_OBJECT__CREATED_ON)) {
switch (msg.getEventType()) {
case Notification.MOVE:
case Notification.SET:
case Notification.UNSET:
case Notification.ADD:
case Notification.ADD_MANY:
case Notification.REMOVE:
case Notification.REMOVE_MANY:
          notifier.setModifiedOn(currentDate);
        if (notifier.getCreatedOn() == null) {
          notifier.setCreatedOn(currentDate);
        }
      break;
  }
}
}
}
}","@Override public void notifyChanged(Notification msg){
  if (msg instanceof CDONotification) {
    return;
  }
  if (msg.getNotifier() instanceof ObeoDSMObject) {
    ObeoDSMObject notifier=(ObeoDSMObject)msg.getNotifier();
    if (!EnvironmentUtil.isResourceLoading(notifier)) {
      Date currentDate=new Date();
      if (msg != null && msg.getFeature() != null && !msg.getFeature().equals(EnvironmentPackage.Literals.OBEO_DSM_OBJECT__MODIFIED_ON) && !msg.getFeature().equals(EnvironmentPackage.Literals.OBEO_DSM_OBJECT__CREATED_ON)) {
switch (msg.getEventType()) {
case Notification.MOVE:
case Notification.SET:
case Notification.UNSET:
case Notification.ADD:
case Notification.ADD_MANY:
case Notification.REMOVE:
case Notification.REMOVE_MANY:
          notifier.setModifiedOn(currentDate);
        if (notifier.getCreatedOn() == null) {
          notifier.setCreatedOn(currentDate);
        }
      break;
  }
}
}
}
}"
86363,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
protected ObeoDSMObjectImpl(){
  super();
  eAdapters().add(new AdapterImpl(){
    @Override public void notifyChanged(    Notification msg){
      if (msg instanceof CDONotification) {
        return;
      }
      if (msg.getNotifier() instanceof ObeoDSMObject) {
        ObeoDSMObject notifier=(ObeoDSMObject)msg.getNotifier();
        if (!EnvironmentUtil.isResourceLoading(notifier)) {
          Date currentDate=new Date();
          if (!msg.getFeature().equals(EnvironmentPackage.Literals.OBEO_DSM_OBJECT__MODIFIED_ON) && !msg.getFeature().equals(EnvironmentPackage.Literals.OBEO_DSM_OBJECT__CREATED_ON)) {
switch (msg.getEventType()) {
case Notification.MOVE:
case Notification.SET:
case Notification.UNSET:
case Notification.ADD:
case Notification.ADD_MANY:
case Notification.REMOVE:
case Notification.REMOVE_MANY:
              notifier.setModifiedOn(currentDate);
            if (notifier.getCreatedOn() == null) {
              notifier.setCreatedOn(currentDate);
            }
          break;
      }
    }
  }
}
}
}
);
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
protected ObeoDSMObjectImpl(){
  super();
  eAdapters().add(new AdapterImpl(){
    @Override public void notifyChanged(    Notification msg){
      if (msg instanceof CDONotification) {
        return;
      }
      if (msg.getNotifier() instanceof ObeoDSMObject) {
        ObeoDSMObject notifier=(ObeoDSMObject)msg.getNotifier();
        if (!EnvironmentUtil.isResourceLoading(notifier)) {
          Date currentDate=new Date();
          if (msg != null && msg.getFeature() != null && !msg.getFeature().equals(EnvironmentPackage.Literals.OBEO_DSM_OBJECT__MODIFIED_ON) && !msg.getFeature().equals(EnvironmentPackage.Literals.OBEO_DSM_OBJECT__CREATED_ON)) {
switch (msg.getEventType()) {
case Notification.MOVE:
case Notification.SET:
case Notification.UNSET:
case Notification.ADD:
case Notification.ADD_MANY:
case Notification.REMOVE:
case Notification.REMOVE_MANY:
              notifier.setModifiedOn(currentDate);
            if (notifier.getCreatedOn() == null) {
              notifier.setCreatedOn(currentDate);
            }
          break;
      }
    }
  }
}
}
}
);
}"
86364,"@Override public void setOppositeOf(Reference newOppositeOf){
  Reference oldOppositeOf=getOppositeOf();
  super.setOppositeOf(newOppositeOf);
  if (oldOppositeOf != null && !oldOppositeOf.equals(newOppositeOf)) {
    oldOppositeOf.setOppositeOf(null);
  }
  if (newOppositeOf != null && (newOppositeOf.getOppositeOf() == null || !newOppositeOf.getOppositeOf().equals(this))) {
    newOppositeOf.setOppositeOf(this);
  }
  if (eNotificationRequired())   eNotify(new ENotificationImpl(this,Notification.SET,EnvironmentPackage.REFERENCE__OPPOSITE_OF,oldOppositeOf,getOppositeOf()));
}","@Override public void setOppositeOf(Reference newOppositeOf){
  Reference oldOppositeOf=getOppositeOf();
  super.setOppositeOf(newOppositeOf);
  if (oldOppositeOf != null && !oldOppositeOf.equals(newOppositeOf)) {
    oldOppositeOf.setOppositeOf(null);
  }
  if (newOppositeOf != null && !newOppositeOf.eIsProxy() && (newOppositeOf.getOppositeOf() == null || !newOppositeOf.getOppositeOf().equals(this))) {
    newOppositeOf.setOppositeOf(this);
  }
}"
86365,"@Override public void setType(DTO newType){
  DTO oldType=getType();
  super.setType(newType);
  if (getOppositeOf() != null && (newType == null || getOppositeOf().getDto() == null || !getOppositeOf().getDto().isSubtypeOf(newType))) {
    setOppositeOf(null);
  }
  if (eNotificationRequired())   eNotify(new ENotificationImpl(this,Notification.SET,EnvironmentPackage.REFERENCE__TYPE,oldType,getType()));
}","@Override public void setType(DTO newType){
  super.setType(newType);
  if (getOppositeOf() != null && !newType.eIsProxy() && (newType == null || getOppositeOf().getDto() == null || !getOppositeOf().getDto().isSubtypeOf(newType))) {
    setOppositeOf(null);
  }
}"
86366,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public EList<TaskReference> getReferencedBy(){
  Collection<Setting> referencingTasksReferences=new GraalUsageCrossReferencer(){
    @Override protected boolean crossReference(    EObject eObject,    EReference eReference,    EObject crossReferencedEObject){
      return eReference == GraalPackage.Literals.TASK_REFERENCE__TASK;
    }
    @Override protected boolean containment(    EObject eObject){
      return (eObject instanceof System) || (eObject instanceof TasksGroup) || (eObject instanceof Task)|| (eObject instanceof Loop)|| (eObject instanceof TaskReference);
    }
  }
.findUsage(this);
  List<TaskReference> foundTasksReferences=new ArrayList<TaskReference>();
  for (  Setting setting : referencingTasksReferences) {
    foundTasksReferences.add((TaskReference)setting.getEObject());
  }
  return ECollections.unmodifiableEList(new BasicEList<TaskReference>(foundTasksReferences));
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public EList<TaskReference> getReferencedBy(){
  Collection<Setting> referencingTasksReferences=new GraalUsageCrossReferencer(){
    @Override protected boolean crossReference(    EObject eObject,    EReference eReference,    EObject crossReferencedEObject){
      return eReference == GraalPackage.Literals.TASK_REFERENCE__TASK;
    }
    @Override protected boolean containment(    EObject eObject){
      return (eObject instanceof Resource) || (eObject instanceof System) || (eObject instanceof TasksGroup)|| (eObject instanceof Task)|| (eObject instanceof Loop)|| (eObject instanceof TaskReference);
    }
  }
.findUsage(this);
  List<TaskReference> foundTasksReferences=new ArrayList<TaskReference>();
  for (  Setting setting : referencingTasksReferences) {
    foundTasksReferences.add((TaskReference)setting.getEObject());
  }
  return ECollections.unmodifiableEList(new BasicEList<TaskReference>(foundTasksReferences));
}"
86367,"@Override public void notifyChanged(Notification msg){
  if (msg instanceof CDONotification) {
    return;
  }
  if (msg.getNotifier() instanceof ObeoDSMObject) {
    ObeoDSMObject notifier=(ObeoDSMObject)msg.getNotifier();
    if (!EnvironmentUtil.isResourceLoading(notifier)) {
      Date currentDate=new Date();
      if (!msg.getFeature().equals(EnvironmentPackage.Literals.OBEO_DSM_OBJECT__MODIFIED_ON) && !msg.getFeature().equals(EnvironmentPackage.Literals.OBEO_DSM_OBJECT__CREATED_ON)) {
switch (msg.getEventType()) {
case Notification.MOVE:
case Notification.SET:
case Notification.UNSET:
case Notification.ADD:
case Notification.ADD_MANY:
case Notification.REMOVE:
case Notification.REMOVE_MANY:
          notifier.setModifiedOn(currentDate);
        if (notifier.getCreatedOn() == null) {
          notifier.setCreatedOn(currentDate);
        }
      break;
  }
}
}
}
}","@Override public void notifyChanged(Notification msg){
  if (msg instanceof CDONotification) {
    return;
  }
  if (msg.getNotifier() instanceof ObeoDSMObject) {
    ObeoDSMObject notifier=(ObeoDSMObject)msg.getNotifier();
    if (!EnvironmentUtil.isResourceLoading(notifier)) {
      Date currentDate=new Date();
      if (msg != null && msg.getFeature() != null && !msg.getFeature().equals(EnvironmentPackage.Literals.OBEO_DSM_OBJECT__MODIFIED_ON) && !msg.getFeature().equals(EnvironmentPackage.Literals.OBEO_DSM_OBJECT__CREATED_ON)) {
switch (msg.getEventType()) {
case Notification.MOVE:
case Notification.SET:
case Notification.UNSET:
case Notification.ADD:
case Notification.ADD_MANY:
case Notification.REMOVE:
case Notification.REMOVE_MANY:
          notifier.setModifiedOn(currentDate);
        if (notifier.getCreatedOn() == null) {
          notifier.setCreatedOn(currentDate);
        }
      break;
  }
}
}
}
}"
86368,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
protected ObeoDSMObjectImpl(){
  super();
  eAdapters().add(new AdapterImpl(){
    @Override public void notifyChanged(    Notification msg){
      if (msg instanceof CDONotification) {
        return;
      }
      if (msg.getNotifier() instanceof ObeoDSMObject) {
        ObeoDSMObject notifier=(ObeoDSMObject)msg.getNotifier();
        if (!EnvironmentUtil.isResourceLoading(notifier)) {
          Date currentDate=new Date();
          if (!msg.getFeature().equals(EnvironmentPackage.Literals.OBEO_DSM_OBJECT__MODIFIED_ON) && !msg.getFeature().equals(EnvironmentPackage.Literals.OBEO_DSM_OBJECT__CREATED_ON)) {
switch (msg.getEventType()) {
case Notification.MOVE:
case Notification.SET:
case Notification.UNSET:
case Notification.ADD:
case Notification.ADD_MANY:
case Notification.REMOVE:
case Notification.REMOVE_MANY:
              notifier.setModifiedOn(currentDate);
            if (notifier.getCreatedOn() == null) {
              notifier.setCreatedOn(currentDate);
            }
          break;
      }
    }
  }
}
}
}
);
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
protected ObeoDSMObjectImpl(){
  super();
  eAdapters().add(new AdapterImpl(){
    @Override public void notifyChanged(    Notification msg){
      if (msg instanceof CDONotification) {
        return;
      }
      if (msg.getNotifier() instanceof ObeoDSMObject) {
        ObeoDSMObject notifier=(ObeoDSMObject)msg.getNotifier();
        if (!EnvironmentUtil.isResourceLoading(notifier)) {
          Date currentDate=new Date();
          if (msg != null && msg.getFeature() != null && !msg.getFeature().equals(EnvironmentPackage.Literals.OBEO_DSM_OBJECT__MODIFIED_ON) && !msg.getFeature().equals(EnvironmentPackage.Literals.OBEO_DSM_OBJECT__CREATED_ON)) {
switch (msg.getEventType()) {
case Notification.MOVE:
case Notification.SET:
case Notification.UNSET:
case Notification.ADD:
case Notification.ADD_MANY:
case Notification.REMOVE:
case Notification.REMOVE_MANY:
              notifier.setModifiedOn(currentDate);
            if (notifier.getCreatedOn() == null) {
              notifier.setCreatedOn(currentDate);
            }
          break;
      }
    }
  }
}
}
}
);
}"
86369,"@Override public void setOppositeOf(Reference newOppositeOf){
  Reference oldOppositeOf=getOppositeOf();
  super.setOppositeOf(newOppositeOf);
  if (oldOppositeOf != null && !oldOppositeOf.equals(newOppositeOf)) {
    oldOppositeOf.setOppositeOf(null);
  }
  if (newOppositeOf != null && (newOppositeOf.getOppositeOf() == null || !newOppositeOf.getOppositeOf().equals(this))) {
    newOppositeOf.setOppositeOf(this);
  }
  if (eNotificationRequired())   eNotify(new ENotificationImpl(this,Notification.SET,EnvironmentPackage.REFERENCE__OPPOSITE_OF,oldOppositeOf,getOppositeOf()));
}","@Override public void setOppositeOf(Reference newOppositeOf){
  Reference oldOppositeOf=getOppositeOf();
  super.setOppositeOf(newOppositeOf);
  if (oldOppositeOf != null && !oldOppositeOf.equals(newOppositeOf)) {
    oldOppositeOf.setOppositeOf(null);
  }
  if (newOppositeOf != null && !newOppositeOf.eIsProxy() && (newOppositeOf.getOppositeOf() == null || !newOppositeOf.getOppositeOf().equals(this))) {
    newOppositeOf.setOppositeOf(this);
  }
}"
86370,"@Override public void setType(DTO newType){
  DTO oldType=getType();
  super.setType(newType);
  if (getOppositeOf() != null && (newType == null || getOppositeOf().getDto() == null || !getOppositeOf().getDto().isSubtypeOf(newType))) {
    setOppositeOf(null);
  }
  if (eNotificationRequired())   eNotify(new ENotificationImpl(this,Notification.SET,EnvironmentPackage.REFERENCE__TYPE,oldType,getType()));
}","@Override public void setType(DTO newType){
  super.setType(newType);
  if (getOppositeOf() != null && !newType.eIsProxy() && (newType == null || getOppositeOf().getDto() == null || !getOppositeOf().getDto().isSubtypeOf(newType))) {
    setOppositeOf(null);
  }
}"
86371,"/** 
 * Deletes a collection of transitions
 * @param transitions Transitions to be deleted
 */
private void deleteTransitions(Collection<Transition> transitions){
  for (  Transition transition : transitions) {
    EcoreUtil.delete(transition);
  }
}","/** 
 * Deletes a collection of transitions
 * @param transitions Transitions to be deleted
 */
private void deleteTransitions(Collection<Transition> transitions){
  Collection<Transition> lTransitions=new ArrayList<Transition>(transitions);
  for (  Transition transition : lTransitions) {
    EcoreUtil.delete(transition);
  }
}"
86372,"public List<org.obeonetwork.dsl.entity.Reference> getEntityOppositeReferences(EObject context,List<org.obeonetwork.dsl.entity.Reference> references){
  Map<String,org.obeonetwork.dsl.entity.Reference> map=new HashMap<String,org.obeonetwork.dsl.entity.Reference>();
  for (  org.obeonetwork.dsl.entity.Reference ref : references) {
    if (ref.getOppositeOf() != null) {
      String key1=ref.getOppositeOf().hashCode() + ""String_Node_Str"" + ref.hashCode();
      String key2=ref.hashCode() + ""String_Node_Str"" + ref.getOppositeOf().hashCode();
      if (map.get(key1) == null && map.get(key2) == null) {
        map.put(key1,ref);
      }
    }
  }
  return new ArrayList<org.obeonetwork.dsl.entity.Reference>(map.values());
}","public List<org.obeonetwork.dsl.entity.Reference> getEntityOppositeReferences(EObject context,List<org.obeonetwork.dsl.entity.Reference> references){
  Map<String,org.obeonetwork.dsl.entity.Reference> map=new HashMap<String,org.obeonetwork.dsl.entity.Reference>();
  for (  org.obeonetwork.dsl.entity.Reference ref : references) {
    if (ref.getOppositeOf() != null) {
      String key1=ref.getOppositeOf().hashCode() + ""String_Node_Str"" + ref.hashCode();
      String key2=ref.hashCode() + ""String_Node_Str"" + ref.getOppositeOf().hashCode();
      if (map.get(key1) == null && map.get(key2) == null) {
        if (key1.compareTo(key2) > 0) {
          map.put(key1,ref);
        }
 else {
          map.put(key2,ref.getOppositeOf());
        }
      }
    }
  }
  return new ArrayList<org.obeonetwork.dsl.entity.Reference>(map.values());
}"
86373,"public List<Reference> getDtoOppositeReferences(EObject context,List<Reference> references){
  Map<String,Reference> map=new HashMap<String,Reference>();
  for (  Reference ref : references) {
    if (ref.getOppositeOf() != null) {
      String key1=ref.getOppositeOf().hashCode() + ""String_Node_Str"" + ref.hashCode();
      String key2=ref.hashCode() + ""String_Node_Str"" + ref.getOppositeOf().hashCode();
      if (map.get(key1) == null && map.get(key2) == null) {
        map.put(key1,ref);
      }
    }
  }
  return new ArrayList<Reference>(map.values());
}","public List<Reference> getDtoOppositeReferences(EObject context,List<Reference> references){
  Map<String,Reference> map=new HashMap<String,Reference>();
  for (  Reference ref : references) {
    if (ref.getOppositeOf() != null) {
      String key1=ref.getOppositeOf().hashCode() + ""String_Node_Str"" + ref.hashCode();
      String key2=ref.hashCode() + ""String_Node_Str"" + ref.getOppositeOf().hashCode();
      if (map.get(key1) == null && map.get(key2) == null) {
        if (key1.compareTo(key2) > 0) {
          map.put(key1,ref);
        }
 else {
          map.put(key2,ref.getOppositeOf());
        }
      }
    }
  }
  return new ArrayList<Reference>(map.values());
}"
86374,"public void deleteDtoReferences(List<org.obeonetwork.dsl.environment.Reference> references){
  for (  org.obeonetwork.dsl.environment.Reference reference : references) {
    EcoreUtil.delete(reference,true);
  }
}","public void deleteDtoReferences(List<Reference> references){
  for (  Reference reference : references) {
    EcoreUtil.delete(reference,true);
  }
}"
86375,"/** 
 * Deletes a collection of transitions
 * @param transitions Transitions to be deleted
 */
private void deleteTransitions(Collection<Transition> transitions){
  for (  Transition transition : transitions) {
    EcoreUtil.delete(transition);
  }
}","/** 
 * Deletes a collection of transitions
 * @param transitions Transitions to be deleted
 */
private void deleteTransitions(Collection<Transition> transitions){
  Collection<Transition> lTransitions=new ArrayList<Transition>(transitions);
  for (  Transition transition : lTransitions) {
    EcoreUtil.delete(transition);
  }
}"
86376,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public EList<TaskReference> getReferencedBy(){
  Collection<Setting> referencingTasksReferences=new GraalUsageCrossReferencer(){
    @Override protected boolean crossReference(    EObject eObject,    EReference eReference,    EObject crossReferencedEObject){
      return eReference == GraalPackage.Literals.TASK_REFERENCE__TASK;
    }
    @Override protected boolean containment(    EObject eObject){
      return (eObject instanceof System) || (eObject instanceof TasksGroup) || (eObject instanceof Task)|| (eObject instanceof Loop)|| (eObject instanceof TaskReference);
    }
  }
.findUsage(this);
  List<TaskReference> foundTasksReferences=new ArrayList<TaskReference>();
  for (  Setting setting : referencingTasksReferences) {
    foundTasksReferences.add((TaskReference)setting.getEObject());
  }
  return ECollections.unmodifiableEList(new BasicEList<TaskReference>(foundTasksReferences));
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public EList<TaskReference> getReferencedBy(){
  Collection<Setting> referencingTasksReferences=new GraalUsageCrossReferencer(){
    @Override protected boolean crossReference(    EObject eObject,    EReference eReference,    EObject crossReferencedEObject){
      return eReference == GraalPackage.Literals.TASK_REFERENCE__TASK;
    }
    @Override protected boolean containment(    EObject eObject){
      return (eObject instanceof Resource) || (eObject instanceof System) || (eObject instanceof TasksGroup)|| (eObject instanceof Task)|| (eObject instanceof Loop)|| (eObject instanceof TaskReference);
    }
  }
.findUsage(this);
  List<TaskReference> foundTasksReferences=new ArrayList<TaskReference>();
  for (  Setting setting : referencingTasksReferences) {
    foundTasksReferences.add((TaskReference)setting.getEObject());
  }
  return ECollections.unmodifiableEList(new BasicEList<TaskReference>(foundTasksReferences));
}"
86377,"@Override protected boolean containment(EObject eObject){
  return (eObject instanceof System) || (eObject instanceof UseCase);
}","@Override protected boolean containment(EObject eObject){
  return (eObject instanceof Resource) || (eObject instanceof System) || (eObject instanceof UseCase);
}"
86378,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public UseCase getUseCase(){
  Collection<Setting> useCaseReferences=new GraalUsageCrossReferencer(){
    @Override protected boolean crossReference(    EObject eObject,    EReference eReference,    EObject crossReferencedEObject){
      return eReference == GraalPackage.Literals.USE_CASE__TASKS;
    }
    @Override protected boolean containment(    EObject eObject){
      return (eObject instanceof System) || (eObject instanceof UseCase);
    }
  }
.findUsage(this);
  UseCase useCase=null;
  for (  Setting setting : useCaseReferences) {
    useCase=(UseCase)setting.getEObject();
    break;
  }
  return useCase;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public UseCase getUseCase(){
  Collection<Setting> useCaseReferences=new GraalUsageCrossReferencer(){
    @Override protected boolean crossReference(    EObject eObject,    EReference eReference,    EObject crossReferencedEObject){
      return eReference == GraalPackage.Literals.USE_CASE__TASKS;
    }
    @Override protected boolean containment(    EObject eObject){
      return (eObject instanceof Resource) || (eObject instanceof System) || (eObject instanceof UseCase);
    }
  }
.findUsage(this);
  UseCase useCase=null;
  for (  Setting setting : useCaseReferences) {
    useCase=(UseCase)setting.getEObject();
    break;
  }
  return useCase;
}"
86379,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public EList<Task> getUsedBy(){
  Collection<Setting> usingTasksSettings=new GraalUsageCrossReferencer(){
    @Override protected boolean crossReference(    EObject eObject,    EReference eReference,    EObject crossReferencedEObject){
      return eReference == GraalPackage.Literals.TASK__USES;
    }
    @Override protected boolean containment(    EObject eObject){
      return (eObject instanceof System) || (eObject instanceof TasksGroup) || (eObject instanceof Task);
    }
  }
.findUsage(this);
  List<Task> foundTasks=new ArrayList<Task>();
  for (  Setting setting : usingTasksSettings) {
    foundTasks.add((Task)setting.getEObject());
  }
  return ECollections.unmodifiableEList(new BasicEList<Task>(foundTasks));
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public EList<Task> getUsedBy(){
  Collection<Setting> usingTasksSettings=new GraalUsageCrossReferencer(){
    @Override protected boolean crossReference(    EObject eObject,    EReference eReference,    EObject crossReferencedEObject){
      return eReference == GraalPackage.Literals.TASK__USES;
    }
    @Override protected boolean containment(    EObject eObject){
      return (eObject instanceof Resource) || (eObject instanceof System) || (eObject instanceof TasksGroup)|| (eObject instanceof Task);
    }
  }
.findUsage(this);
  List<Task> foundTasks=new ArrayList<Task>();
  for (  Setting setting : usingTasksSettings) {
    foundTasks.add((Task)setting.getEObject());
  }
  return ECollections.unmodifiableEList(new BasicEList<Task>(foundTasks));
}"
86380,"@Override protected boolean containment(EObject eObject){
  return (eObject instanceof System) || (eObject instanceof UseCase);
}","@Override protected boolean containment(EObject eObject){
  return (eObject instanceof Resource) || (eObject instanceof System) || (eObject instanceof UseCase);
}"
86381,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public UseCase getUseCase(){
  Collection<Setting> useCaseReferences=new GraalUsageCrossReferencer(){
    @Override protected boolean crossReference(    EObject eObject,    EReference eReference,    EObject crossReferencedEObject){
      return eReference == GraalPackage.Literals.USE_CASE__TASKS;
    }
    @Override protected boolean containment(    EObject eObject){
      return (eObject instanceof System) || (eObject instanceof UseCase);
    }
  }
.findUsage(this);
  UseCase useCase=null;
  for (  Setting setting : useCaseReferences) {
    useCase=(UseCase)setting.getEObject();
    break;
  }
  return useCase;
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public UseCase getUseCase(){
  Collection<Setting> useCaseReferences=new GraalUsageCrossReferencer(){
    @Override protected boolean crossReference(    EObject eObject,    EReference eReference,    EObject crossReferencedEObject){
      return eReference == GraalPackage.Literals.USE_CASE__TASKS;
    }
    @Override protected boolean containment(    EObject eObject){
      return (eObject instanceof Resource) || (eObject instanceof System) || (eObject instanceof UseCase);
    }
  }
.findUsage(this);
  UseCase useCase=null;
  for (  Setting setting : useCaseReferences) {
    useCase=(UseCase)setting.getEObject();
    break;
  }
  return useCase;
}"
86382,"/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public EList<Task> getUsedBy(){
  Collection<Setting> usingTasksSettings=new GraalUsageCrossReferencer(){
    @Override protected boolean crossReference(    EObject eObject,    EReference eReference,    EObject crossReferencedEObject){
      return eReference == GraalPackage.Literals.TASK__USES;
    }
    @Override protected boolean containment(    EObject eObject){
      return (eObject instanceof System) || (eObject instanceof TasksGroup) || (eObject instanceof Task);
    }
  }
.findUsage(this);
  List<Task> foundTasks=new ArrayList<Task>();
  for (  Setting setting : usingTasksSettings) {
    foundTasks.add((Task)setting.getEObject());
  }
  return ECollections.unmodifiableEList(new BasicEList<Task>(foundTasks));
}","/** 
 * <!-- begin-user-doc --> <!-- end-user-doc -->
 * @generated NOT
 */
public EList<Task> getUsedBy(){
  Collection<Setting> usingTasksSettings=new GraalUsageCrossReferencer(){
    @Override protected boolean crossReference(    EObject eObject,    EReference eReference,    EObject crossReferencedEObject){
      return eReference == GraalPackage.Literals.TASK__USES;
    }
    @Override protected boolean containment(    EObject eObject){
      return (eObject instanceof Resource) || (eObject instanceof System) || (eObject instanceof TasksGroup)|| (eObject instanceof Task);
    }
  }
.findUsage(this);
  List<Task> foundTasks=new ArrayList<Task>();
  for (  Setting setting : usingTasksSettings) {
    foundTasks.add((Task)setting.getEObject());
  }
  return ECollections.unmodifiableEList(new BasicEList<Task>(foundTasks));
}"
86383,"private boolean shouldGetChildren(Object item){
  return item instanceof RequirementResourceImpl || item instanceof Repository || item instanceof Category;
}","private boolean shouldGetChildren(Object item){
  return item instanceof Resource || item instanceof Repository || item instanceof Category;
}"
86384,"/** 
 * Translates one of a color RGB values. This method is used to always get different colors
 * @param initialValue Red, Green or Blue value
 * @param index Index of the color to be picked
 * @param translation value used to translate the value
 * @return
 */
private int translateColorValue(int initialValue,int index,int translation){
  return (initialValue + (index / colorsRgbValues.length) * translation) % 256;
}","/** 
 * Translates one of a color RGB values. This method is used to always get different colors
 * @param initialValue Red, Green or Blue value
 * @param index Index of the color to be picked
 * @param translation value used to translate the value
 * @return
 */
private int translateColorValue(int initialValue,int index,int translation){
  int value=(initialValue + (index / colorsRgbValues.length) * translation) % 256;
  if (value < 0) {
    value=value + 256;
  }
  return value;
}"
86385,"private boolean shouldGetChildren(Object item){
  return item instanceof RequirementResourceImpl || item instanceof Repository || item instanceof Category;
}","private boolean shouldGetChildren(Object item){
  return item instanceof Resource || item instanceof Repository || item instanceof Category;
}"
86386,"@Override public boolean isConcernedByUserStory(UserStory userStory){
  return getTask().isConcernedByUserStory(userStory);
}","@Override public boolean isConcernedByUserStory(UserStory userStory){
  Task referencedTask=getTask();
  if (referencedTask != null) {
    return referencedTask.isConcernedByUserStory(userStory);
  }
  return false;
}"
86387,"/** 
 * Translates one of a color RGB values. This method is used to always get different colors
 * @param initialValue Red, Green or Blue value
 * @param index Index of the color to be picked
 * @param translation value used to translate the value
 * @return
 */
private int translateColorValue(int initialValue,int index,int translation){
  return (initialValue + (index / colorsRgbValues.length) * translation) % 256;
}","/** 
 * Translates one of a color RGB values. This method is used to always get different colors
 * @param initialValue Red, Green or Blue value
 * @param index Index of the color to be picked
 * @param translation value used to translate the value
 * @return
 */
private int translateColorValue(int initialValue,int index,int translation){
  int value=(initialValue + (index / colorsRgbValues.length) * translation) % 256;
  if (value < 0) {
    value=value + 256;
  }
  return value;
}"
86388,"@Override public boolean isConcernedByUserStory(UserStory userStory){
  return getTask().isConcernedByUserStory(userStory);
}","@Override public boolean isConcernedByUserStory(UserStory userStory){
  Task referencedTask=getTask();
  if (referencedTask != null) {
    referencedTask.isConcernedByUserStory(userStory);
  }
  return false;
}"
86389,"@Override public DatabaseElement caseColumn(Column column){
  int pos=editedLabelContent.indexOf(':');
  if (pos != -1) {
    String attributeName=editedLabelContent.substring(0,pos - 1).trim();
    column.setName(attributeName);
    String typeDef=editedLabelContent.substring(pos + 1).trim();
    DataBase database=getDataBase(column);
    if (database != null) {
      Collection<NativeTypesLibrary> nativeTypesLibraries=new ArrayList<NativeTypesLibrary>();
      for (      TypesLibrary library : database.getUsedLibraries()) {
        if (library instanceof NativeTypesLibrary) {
          nativeTypesLibraries.add((NativeTypesLibrary)library);
        }
      }
      setType(column,typeDef,nativeTypesLibraries);
    }
  }
 else {
    return super.caseNamedElement(column);
  }
  return column;
}","@Override public DatabaseElement caseColumn(Column column){
  int pos=editedLabelContent.indexOf(':');
  if (pos != -1) {
    String attributeName=editedLabelContent.substring(0,pos).trim();
    column.setName(attributeName);
    String typeDef=editedLabelContent.substring(pos + 1).trim();
    DataBase database=getDataBase(column);
    if (database != null) {
      Collection<NativeTypesLibrary> nativeTypesLibraries=new ArrayList<NativeTypesLibrary>();
      for (      TypesLibrary library : database.getUsedLibraries()) {
        if (library instanceof NativeTypesLibrary) {
          nativeTypesLibraries.add((NativeTypesLibrary)library);
        }
      }
      setType(column,typeDef,nativeTypesLibraries);
    }
  }
 else {
    return super.caseNamedElement(column);
  }
  return column;
}"
86390,"/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  List<String> propertiesFiles=super.getProperties();
  propertiesFiles.add(EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_JAVA_FILES_PROPERTIES);
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  return propertiesFiles;
}","/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  List<String> propertiesFiles=super.getProperties();
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  propertiesFiles.add(EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_JAVA_FILES_PROPERTIES);
  return propertiesFiles;
}"
86391,"/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  List<String> propertiesFiles=super.getProperties();
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_TYPES);
  propertiesFiles.add(EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_DAO_DAO_PROPERTIES);
  propertiesFiles.add(EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_SQL_COMMON_SQL_PROPERTIES);
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  return propertiesFiles;
}","/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  List<String> propertiesFiles=super.getProperties();
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_TYPES);
  propertiesFiles.add(EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_DAO_DAO_PROPERTIES);
  propertiesFiles.add(EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_SQL_COMMON_SQL_PROPERTIES);
  return propertiesFiles;
}"
86392,"/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  List<String> propertiesFiles=super.getProperties();
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_TYPES);
  propertiesFiles.add(EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_DAO_DAO_PROPERTIES);
  propertiesFiles.add(EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_SQL_COMMON_SQL_PROPERTIES);
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  return propertiesFiles;
}","/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  List<String> propertiesFiles=super.getProperties();
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_TYPES);
  propertiesFiles.add(EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_DAO_DAO_PROPERTIES);
  propertiesFiles.add(EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_SQL_COMMON_SQL_PROPERTIES);
  return propertiesFiles;
}"
86393,"/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  List<String> propertiesFiles=super.getProperties();
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_TYPES);
  propertiesFiles.add(EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_DAO_DAO_PROPERTIES);
  propertiesFiles.add(EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_SQL_COMMON_SQL_PROPERTIES);
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  return propertiesFiles;
}","/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  List<String> propertiesFiles=super.getProperties();
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_TYPES);
  propertiesFiles.add(EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_DAO_DAO_PROPERTIES);
  propertiesFiles.add(EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_SQL_COMMON_SQL_PROPERTIES);
  return propertiesFiles;
}"
86394,"/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  List<String> propertiesFiles=super.getProperties();
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_TYPES);
  propertiesFiles.add(EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_DAO_DAO_PROPERTIES);
  propertiesFiles.add(EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_SQL_COMMON_SQL_PROPERTIES);
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  return propertiesFiles;
}","/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  List<String> propertiesFiles=super.getProperties();
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_TYPES);
  propertiesFiles.add(EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_DAO_DAO_PROPERTIES);
  propertiesFiles.add(EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_SQL_COMMON_SQL_PROPERTIES);
  return propertiesFiles;
}"
86395,"/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  List<String> propertiesFiles=super.getProperties();
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_TYPES);
  propertiesFiles.add(EntityHibernatePlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_HIBERNATE_FILES_SPRING_RESOURCES_HIBERNATE_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityCommonPlugin.PLUGIN_ID + EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_JAVA_FILES_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityCommonPlugin.PLUGIN_ID + EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityDaoPlugin.PLUGIN_ID + EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_SQL_COMMON_SQL_PROPERTIES);
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  return propertiesFiles;
}","/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  List<String> propertiesFiles=super.getProperties();
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_TYPES);
  propertiesFiles.add(EntityHibernatePlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_HIBERNATE_FILES_SPRING_RESOURCES_HIBERNATE_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityCommonPlugin.PLUGIN_ID + EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_JAVA_FILES_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityCommonPlugin.PLUGIN_ID + EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityDaoPlugin.PLUGIN_ID + EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_SQL_COMMON_SQL_PROPERTIES);
  return propertiesFiles;
}"
86396,"/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  List<String> propertiesFiles=super.getProperties();
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_TYPES);
  propertiesFiles.add(EntityHibernatePlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_HIBERNATE_FILES_SPRING_RESOURCES_HIBERNATE_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityCommonPlugin.PLUGIN_ID + EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_JAVA_FILES_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityCommonPlugin.PLUGIN_ID + EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityDaoPlugin.PLUGIN_ID + EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_SQL_COMMON_SQL_PROPERTIES);
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  return propertiesFiles;
}","/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  List<String> propertiesFiles=super.getProperties();
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_TYPES);
  propertiesFiles.add(EntityHibernatePlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_HIBERNATE_FILES_SPRING_RESOURCES_HIBERNATE_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityCommonPlugin.PLUGIN_ID + EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_JAVA_FILES_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityCommonPlugin.PLUGIN_ID + EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityDaoPlugin.PLUGIN_ID + EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_SQL_COMMON_SQL_PROPERTIES);
  return propertiesFiles;
}"
86397,"/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  List<String> propertiesFiles=super.getProperties();
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_TYPES);
  propertiesFiles.add(EntityHibernatePlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_HIBERNATE_FILES_SPRING_RESOURCES_HIBERNATE_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityCommonPlugin.PLUGIN_ID + EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_JAVA_FILES_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityCommonPlugin.PLUGIN_ID + EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityDaoPlugin.PLUGIN_ID + EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_SQL_COMMON_SQL_PROPERTIES);
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  return propertiesFiles;
}","/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  List<String> propertiesFiles=super.getProperties();
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_TYPES);
  propertiesFiles.add(EntityHibernatePlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_HIBERNATE_FILES_SPRING_RESOURCES_HIBERNATE_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityCommonPlugin.PLUGIN_ID + EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_JAVA_FILES_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityCommonPlugin.PLUGIN_ID + EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityDaoPlugin.PLUGIN_ID + EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_SQL_COMMON_SQL_PROPERTIES);
  return propertiesFiles;
}"
86398,"/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  List<String> propertiesFiles=super.getProperties();
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_TYPES);
  propertiesFiles.add(EntityHibernatePlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_HIBERNATE_FILES_SPRING_RESOURCES_HIBERNATE_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityCommonPlugin.PLUGIN_ID + EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_JAVA_FILES_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityCommonPlugin.PLUGIN_ID + EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityDaoPlugin.PLUGIN_ID + EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_SQL_COMMON_SQL_PROPERTIES);
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  return propertiesFiles;
}","/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  List<String> propertiesFiles=super.getProperties();
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_TYPES);
  propertiesFiles.add(EntityHibernatePlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_HIBERNATE_FILES_SPRING_RESOURCES_HIBERNATE_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityCommonPlugin.PLUGIN_ID + EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_JAVA_FILES_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityCommonPlugin.PLUGIN_ID + EntityCommonPlugin.ORG_OBEONETWORK_DSL_ENTITY_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EntityDaoPlugin.PLUGIN_ID + EntityDaoPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_SQL_COMMON_SQL_PROPERTIES);
  return propertiesFiles;
}"
86399,"/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_TYPES);
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  return propertiesFiles;
}","/** 
 * If the module(s) called by this launcher require properties files, return their qualified path from here.Take note that the first added properties files will take precedence over subsequent ones if they contain conflicting keys. <p> Properties need to be in source folders, the path that we expect to get as a result of this call are of the form &lt;package>.&lt;properties file name without extension>. For example, if you have a file named ""messages.properties"" in package ""org.eclipse.acceleo.sample"", the path that needs be returned by a call to   {@link #getProperties()} is ""org.eclipse.acceleo.sample.messages"".</p>
 * @return The list of properties file we need to add to the generation context.
 * @see java.util.ResourceBundle#getBundle(String)
 * @generated NOT
 */
@Override public List<String> getProperties(){
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_PROPERTIES);
  propertiesFiles.add(AcceleoPropertiesUtils.PLATFORM_PLUGIN + EnvironmentCommonPlugin.PLUGIN_ID + EnvironmentCommonPlugin.ORG_OBEONETWORK_DSL_ENVIRONMENT_GEN_JAVA_COMMON_DEFAULT_TYPES);
  return propertiesFiles;
}"
86400,"@Override public List<String> getProperties(){
  String strutsPropertiesFile=AcceleoPropertiesUtils.PLATFORM_PLUGIN + CinematicArchitecturePlugin.PLUGIN_ID + CinematicArchitecturePlugin.STRUTS_PROPERTIES;
  propertiesFiles.add(strutsPropertiesFile);
  return propertiesFiles;
}","@Override public List<String> getProperties(){
  if (this.model != null && this.model.eResource() != null) {
    propertiesFiles.addAll(AcceleoPropertiesUtils.getPropertiesFilesNearModel(this.model.eResource()));
  }
  String strutsPropertiesFile=AcceleoPropertiesUtils.PLATFORM_PLUGIN + CinematicArchitecturePlugin.PLUGIN_ID + CinematicArchitecturePlugin.STRUTS_PROPERTIES;
  propertiesFiles.add(strutsPropertiesFile);
  return propertiesFiles;
}"
86401,"public boolean select(Object toTest){
  EObject eObj=EEFUtils.resolveSemanticObject(toTest);
  return (eObj != null && eObj instanceof Operator);
}","public boolean select(Object toTest){
  EObject eObj=EEFUtils.resolveSemanticObject(toTest);
  return (eObj != null && eObj instanceof Loop);
}"
86402,"protected void update(DAnalysis analysis,List<EObject> selectedEObjects){
  this.activeAnalysis=analysis;
  viewer.setInput(selectedEObjects);
}","protected void update(DAnalysis analysis,List<EObject> selectedEObjects){
  if (analysis != null) {
    this.activeAnalysis=analysis;
    viewer.setInput(selectedEObjects);
  }
 else {
    this.activeAnalysis=null;
    viewer.setInput(null);
  }
}"
86403,"public void activateOptions(){
  super.activateOptions();
  jedis=new Jedis(host,port);
  messages=new ConcurrentHashMap<String,String>();
  new Timer().schedule(new TimerTask(){
    public void run(){
      Entry<String,String> message;
      int i=0;
      int msz=messages.size();
      int sz=msz < msetmax ? msz : msetmax;
      byte[][] kv=new byte[sz * 2][];
      for (Iterator<Entry<String,String>> it=messages.entrySet().iterator(); it.hasNext(); ) {
        message=it.next();
        kv[i]=SafeEncoder.encode(message.getKey());
        kv[i + 1]=SafeEncoder.encode(message.getValue());
        i+=2;
        it.remove();
        if (i == sz * 2) {
          jedis.mset(kv);
          msz-=sz;
          if (msz > 0) {
            sz=msz < msetmax ? msz : msetmax;
            kv=new byte[sz * 2][];
            i=0;
          }
        }
      }
    }
  }
,1000,1000);
}","public void activateOptions(){
  super.activateOptions();
  jedis=new Jedis(host,port);
  messages=new ConcurrentHashMap<String,String>();
  new Timer().schedule(new TimerTask(){
    public void run(){
      Entry<String,String> message;
      int currentMessagesCount=messages.size();
      int bucketSize=currentMessagesCount < msetmax ? currentMessagesCount : msetmax;
      byte[][] bucket=new byte[bucketSize * 2][];
      int messageIndex=0;
      for (Iterator<Entry<String,String>> it=messages.entrySet().iterator(); it.hasNext(); ) {
        message=it.next();
        it.remove();
        bucket[messageIndex]=SafeEncoder.encode(message.getKey());
        bucket[messageIndex + 1]=SafeEncoder.encode(message.getValue());
        messageIndex+=2;
        if (messageIndex == bucketSize * 2) {
          jedis.mset(bucket);
          currentMessagesCount-=bucketSize;
          if (currentMessagesCount == 0) {
            break;
          }
 else {
            bucketSize=currentMessagesCount < msetmax ? currentMessagesCount : msetmax;
            bucket=new byte[bucketSize * 2][];
            messageIndex=0;
          }
        }
      }
    }
  }
,500,500);
}"
86404,"public void run(){
  Entry<String,String> message;
  int i=0;
  int msz=messages.size();
  int sz=msz < msetmax ? msz : msetmax;
  byte[][] kv=new byte[sz * 2][];
  for (Iterator<Entry<String,String>> it=messages.entrySet().iterator(); it.hasNext(); ) {
    message=it.next();
    kv[i]=SafeEncoder.encode(message.getKey());
    kv[i + 1]=SafeEncoder.encode(message.getValue());
    i+=2;
    it.remove();
    if (i == sz * 2) {
      jedis.mset(kv);
      msz-=sz;
      if (msz > 0) {
        sz=msz < msetmax ? msz : msetmax;
        kv=new byte[sz * 2][];
        i=0;
      }
    }
  }
}","public void run(){
  Entry<String,String> message;
  int currentMessagesCount=messages.size();
  int bucketSize=currentMessagesCount < msetmax ? currentMessagesCount : msetmax;
  byte[][] bucket=new byte[bucketSize * 2][];
  int messageIndex=0;
  for (Iterator<Entry<String,String>> it=messages.entrySet().iterator(); it.hasNext(); ) {
    message=it.next();
    it.remove();
    bucket[messageIndex]=SafeEncoder.encode(message.getKey());
    bucket[messageIndex + 1]=SafeEncoder.encode(message.getValue());
    messageIndex+=2;
    if (messageIndex == bucketSize * 2) {
      jedis.mset(bucket);
      currentMessagesCount-=bucketSize;
      if (currentMessagesCount == 0) {
        break;
      }
 else {
        bucketSize=currentMessagesCount < msetmax ? currentMessagesCount : msetmax;
        bucket=new byte[bucketSize * 2][];
        messageIndex=0;
      }
    }
  }
}"
86405,"public void run(){
  for (long i=0; i < 321; i++)   log.warn(""String_Node_Str"" + i);
}","public void run(){
  for (long i=0; i < 10000; i++)   log.warn(""String_Node_Str"" + i);
}"
86406,"public static void main(String[] args){
  for (int i=1; i <= 3; i++) {
    new Log4j2RedisTest.LogThread().start();
  }
  for (long i=0; i < 442; i++) {
    log.error(""String_Node_Str"" + i);
  }
}","public static void main(String[] args){
  for (int i=1; i <= 9; i++) {
    new Log4j2RedisTest.LogThread().start();
  }
  for (long i=0; i < 10000; i++) {
    log.error(""String_Node_Str"" + i);
  }
}"
86407,"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.siri_vehicle_mon_request,container,false);
  key=(EditText)v.findViewById(R.id.key);
  operatorRef=(EditText)v.findViewById(R.id.operatorRef);
  vehicleRef=(EditText)v.findViewById(R.id.vehicleRef);
  lineRef=(EditText)v.findViewById(R.id.lineRef);
  directionRef=(EditText)v.findViewById(R.id.directionRef);
  vehicleMonitoringDetailLevel=(EditText)v.findViewById(R.id.vehicleMonDetailLevel);
  maximumNumberOfCallsOnwards=(EditText)v.findViewById(R.id.maxNumOfCallsOnwards);
  final Button button=(Button)v.findViewById(R.id.submit);
  button.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      new DownloadVehicleInfoTask().execute();
    }
  }
);
  return v;
}","@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  View v=inflater.inflate(R.layout.siri_vehicle_mon_request,container,false);
  key=(EditText)v.findViewById(R.id.key);
  operatorRef=(EditText)v.findViewById(R.id.operatorRef);
  vehicleRef=(EditText)v.findViewById(R.id.vehicleRef);
  lineRef=(EditText)v.findViewById(R.id.lineRef);
  directionRef=(EditText)v.findViewById(R.id.directionRef);
  vehicleMonitoringDetailLevel=(EditText)v.findViewById(R.id.vehicleMonDetailLevel);
  maximumNumberOfCallsOnwards=(EditText)v.findViewById(R.id.maxNumOfCallsOnwards);
  final Button button=(Button)v.findViewById(R.id.submit);
  button.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      new DownloadVehicleInfoTask().execute();
    }
  }
);
  key.setText(savedInstanceState.getString(keyVehKey));
  String strKey=SiriUtils.getKeyFromResource(getActivity());
  key.setText(strKey);
  return v;
}"
86408,"/** 
 * Internal method used to init main XmlMapper for XML parsing
 * @return initialized XmlMapper ready for XML parsing
 */
private static XmlMapper initXmlMapper(){
  if (xmlMapper == null) {
    XmlFactory f=new XmlFactory(new InputFactoryImpl(),new OutputFactoryImpl());
    JacksonXmlModule module=new JacksonXmlModule();
    module.setDefaultUseWrapper(false);
    XmlMapper xmlMapper=new XmlMapper(f,module);
    xmlMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY,true);
    xmlMapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT,true);
    xmlMapper.configure(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY,true);
    xmlMapper.configure(DeserializationFeature.READ_ENUMS_USING_TO_STRING,true);
    xmlMapper.setPropertyNamingStrategy(new PascalCaseStrategy());
  }
  return xmlMapper;
}","/** 
 * Internal method used to init main XmlMapper for XML parsing
 * @return initialized XmlMapper ready for XML parsing
 */
private static XmlMapper initXmlMapper(){
  if (xmlMapper == null) {
    XmlFactory f=new XmlFactory(new InputFactoryImpl(),new OutputFactoryImpl());
    JacksonXmlModule module=new JacksonXmlModule();
    module.setDefaultUseWrapper(false);
    xmlMapper=new XmlMapper(f,module);
    xmlMapper.configure(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY,true);
    xmlMapper.configure(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT,true);
    xmlMapper.configure(DeserializationFeature.USE_JAVA_ARRAY_FOR_JSON_ARRAY,true);
    xmlMapper.configure(DeserializationFeature.READ_ENUMS_USING_TO_STRING,true);
    xmlMapper.setPropertyNamingStrategy(new PascalCaseStrategy());
  }
  return xmlMapper;
}"
86409,"/** 
 * Internal method to make actual request to server
 * @param full url for a JSON or XML request to the server (e.g., http://bustime .mta.info/api/siri/vehicle-monitoring.json?OperatorRef =MT%20A%20NYCT&DirectionRef=0&LineRef=MTA%20NYCT_S40&)
 */
@SuppressWarnings({""String_Node_Str""}) private Siri makeRequest(String urlString){
  Siri s=null;
  URL url=null;
  HttpURLConnection urlConnection=null;
  Log.i(MainActivity.TAG,""String_Node_Str"" + url.toString());
  try {
    disableConnectionReuseIfNecessary();
    url=new URL(urlString);
switch (config.getResponseType()) {
case ServerConfig.RESPONSE_TYPE_JSON:
      if (config.getHttpConnectionType() == ServerConfig.HTTP_CONNECTION_TYPE_JACKSON) {
        if (config.getJacksonObjectType() == ServerConfig.JACKSON_OBJECT_TYPE_READER) {
          Log.v(MainActivity.TAG,""String_Node_Str"");
          s=SiriJacksonConfig.getObjectReaderInstance().readValue(url);
        }
 else {
          Log.v(MainActivity.TAG,""String_Node_Str"");
          s=SiriJacksonConfig.getObjectMapperInstance().readValue(url,Siri.class);
        }
      }
 else {
        urlConnection=(HttpURLConnection)url.openConnection();
        if (config.getJacksonObjectType() == ServerConfig.JACKSON_OBJECT_TYPE_READER) {
          Log.v(MainActivity.TAG,""String_Node_Str"");
          s=SiriJacksonConfig.getObjectReaderInstance().readValue(urlConnection.getInputStream());
        }
 else {
          Log.v(MainActivity.TAG,""String_Node_Str"");
          s=SiriJacksonConfig.getObjectMapperInstance().readValue(urlConnection.getInputStream(),Siri.class);
        }
      }
    break;
case ServerConfig.RESPONSE_TYPE_XML:
  if (config.getHttpConnectionType() == ServerConfig.HTTP_CONNECTION_TYPE_JACKSON) {
    s=SiriJacksonConfig.getXmlMapperInstance().readValue(url,Siri.class);
  }
 else {
    urlConnection=(HttpURLConnection)url.openConnection();
    s=SiriJacksonConfig.getXmlMapperInstance().readValue(urlConnection.getInputStream(),Siri.class);
  }
break;
}
}
 catch (IOException e) {
Log.e(MainActivity.TAG,""String_Node_Str"" + e);
}
 finally {
if (urlConnection != null) {
urlConnection.disconnect();
}
}
return s;
}","/** 
 * Internal method to make actual request to server
 * @param full url for a JSON or XML request to the server (e.g., http://bustime .mta.info/api/siri/vehicle-monitoring.json?OperatorRef =MT%20A%20NYCT&DirectionRef=0&LineRef=MTA%20NYCT_S40&)
 */
@SuppressWarnings({""String_Node_Str""}) private Siri makeRequest(String urlString){
  Siri s=null;
  URL url=null;
  HttpURLConnection urlConnection=null;
  try {
    disableConnectionReuseIfNecessary();
    url=new URL(urlString);
    Log.i(MainActivity.TAG,""String_Node_Str"" + url.toString());
switch (config.getResponseType()) {
case ServerConfig.RESPONSE_TYPE_JSON:
      if (config.getHttpConnectionType() == ServerConfig.HTTP_CONNECTION_TYPE_JACKSON) {
        if (config.getJacksonObjectType() == ServerConfig.JACKSON_OBJECT_TYPE_READER) {
          Log.v(MainActivity.TAG,""String_Node_Str"");
          s=SiriJacksonConfig.getObjectReaderInstance().readValue(url);
        }
 else {
          Log.v(MainActivity.TAG,""String_Node_Str"");
          s=SiriJacksonConfig.getObjectMapperInstance().readValue(url,Siri.class);
        }
      }
 else {
        urlConnection=(HttpURLConnection)url.openConnection();
        if (config.getJacksonObjectType() == ServerConfig.JACKSON_OBJECT_TYPE_READER) {
          Log.v(MainActivity.TAG,""String_Node_Str"");
          s=SiriJacksonConfig.getObjectReaderInstance().readValue(urlConnection.getInputStream());
        }
 else {
          Log.v(MainActivity.TAG,""String_Node_Str"");
          s=SiriJacksonConfig.getObjectMapperInstance().readValue(urlConnection.getInputStream(),Siri.class);
        }
      }
    break;
case ServerConfig.RESPONSE_TYPE_XML:
  if (config.getHttpConnectionType() == ServerConfig.HTTP_CONNECTION_TYPE_JACKSON) {
    s=SiriJacksonConfig.getXmlMapperInstance().readValue(url,Siri.class);
  }
 else {
    urlConnection=(HttpURLConnection)url.openConnection();
    s=SiriJacksonConfig.getXmlMapperInstance().readValue(urlConnection.getInputStream(),Siri.class);
  }
break;
}
}
 catch (IOException e) {
Log.e(MainActivity.TAG,""String_Node_Str"" + e);
}
 finally {
if (urlConnection != null) {
urlConnection.disconnect();
}
}
return s;
}"
86410,"@Override protected Siri doInBackground(Void... params){
  String urlString=""String_Node_Str"";
  urlString.replace(""String_Node_Str"",""String_Node_Str"");
  Siri s=null;
  URL url=null;
  HttpURLConnection urlConnection=null;
  final long startTime;
  final long endTime;
  SharedPreferences sharedPref=PreferenceManager.getDefaultSharedPreferences(getActivity());
  int httpConnectionType=sharedPref.getInt(Preferences.KEY_HTTP_CONNECTION_TYPE,0);
  int jacksonObjectType=sharedPref.getInt(Preferences.KEY_JACKSON_OBJECT_TYPE,0);
  try {
    url=new URL(urlString);
    disableConnectionReuseIfNecessary();
    startTime=System.nanoTime();
    if (httpConnectionType == Preferences.HTTP_CONNECTION_TYPE_JACKSON) {
      if (jacksonObjectType == Preferences.JACKSON_OBJECT_TYPE_READER) {
        Log.v(SiriRestClientActivity.TAG,""String_Node_Str"");
        s=SiriJacksonConfig.getObjectReaderInstance().readValue(url);
      }
 else {
        Log.v(SiriRestClientActivity.TAG,""String_Node_Str"");
        s=SiriJacksonConfig.getObjectMapperInstance().readValue(url,Siri.class);
      }
    }
 else {
      urlConnection=(HttpURLConnection)url.openConnection();
      if (jacksonObjectType == Preferences.JACKSON_OBJECT_TYPE_READER) {
        Log.v(SiriRestClientActivity.TAG,""String_Node_Str"");
        s=SiriJacksonConfig.getObjectReaderInstance().readValue(urlConnection.getInputStream());
      }
 else {
        Log.v(SiriRestClientActivity.TAG,""String_Node_Str"");
        s=SiriJacksonConfig.getObjectMapperInstance().readValue(urlConnection.getInputStream(),Siri.class);
      }
    }
    endTime=System.nanoTime();
    getActivity().runOnUiThread(new Runnable(){
      public void run(){
        Toast.makeText(getActivity(),""String_Node_Str"" + (endTime - startTime) / 1000000 + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
);
  }
 catch (  IOException e) {
    Log.e(SiriRestClientActivity.TAG,""String_Node_Str"" + e);
  }
 finally {
    if (urlConnection != null) {
      urlConnection.disconnect();
    }
  }
  if (s != null) {
    SiriUtils.printContents(s);
  }
  return s;
}","@Override protected Siri doInBackground(Void... params){
  String urlString=""String_Node_Str"";
  urlString.replace(""String_Node_Str"",""String_Node_Str"");
  Siri s=null;
  URL url=null;
  HttpURLConnection urlConnection=null;
  final long startTime;
  final long endTime;
  SharedPreferences sharedPref=PreferenceManager.getDefaultSharedPreferences(getActivity());
  int httpConnectionType=Integer.parseInt(sharedPref.getString(Preferences.KEY_HTTP_CONNECTION_TYPE,""String_Node_Str""));
  int jacksonObjectType=Integer.parseInt(sharedPref.getString(Preferences.KEY_JACKSON_OBJECT_TYPE,""String_Node_Str""));
  try {
    url=new URL(urlString);
    disableConnectionReuseIfNecessary();
    startTime=System.nanoTime();
    if (httpConnectionType == Preferences.HTTP_CONNECTION_TYPE_JACKSON) {
      if (jacksonObjectType == Preferences.JACKSON_OBJECT_TYPE_READER) {
        Log.v(SiriRestClientActivity.TAG,""String_Node_Str"");
        s=SiriJacksonConfig.getObjectReaderInstance().readValue(url);
      }
 else {
        Log.v(SiriRestClientActivity.TAG,""String_Node_Str"");
        s=SiriJacksonConfig.getObjectMapperInstance().readValue(url,Siri.class);
      }
    }
 else {
      urlConnection=(HttpURLConnection)url.openConnection();
      if (jacksonObjectType == Preferences.JACKSON_OBJECT_TYPE_READER) {
        Log.v(SiriRestClientActivity.TAG,""String_Node_Str"");
        s=SiriJacksonConfig.getObjectReaderInstance().readValue(urlConnection.getInputStream());
      }
 else {
        Log.v(SiriRestClientActivity.TAG,""String_Node_Str"");
        s=SiriJacksonConfig.getObjectMapperInstance().readValue(urlConnection.getInputStream(),Siri.class);
      }
    }
    endTime=System.nanoTime();
    getActivity().runOnUiThread(new Runnable(){
      public void run(){
        Toast.makeText(getActivity(),""String_Node_Str"" + (endTime - startTime) / 1000000 + ""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
);
  }
 catch (  IOException e) {
    Log.e(SiriRestClientActivity.TAG,""String_Node_Str"" + e);
  }
 finally {
    if (urlConnection != null) {
      urlConnection.disconnect();
    }
  }
  if (s != null) {
    SiriUtils.printContents(s);
  }
  return s;
}"
86411,"public void onTabReselected(Tab tab,FragmentTransaction ft){
  Toast.makeText(mActivity,""String_Node_Str"",Toast.LENGTH_SHORT).show();
}","public void onTabReselected(Tab tab,FragmentTransaction ft){
}"
86412,"public synchronized void run(){
  try {
    while (!isInterrupted()) {
      if (toRemove.isEmpty())       wait();
      if (minimalWait < 0) {
        long currentTime=System.currentTimeMillis();
        minimalWait=Long.MAX_VALUE;
        sleepUntil=0;
synchronized (toRemove) {
          for (Iterator<Map.Entry<K,ToRemove>> it=toRemove.entrySet().iterator(); it.hasNext(); ) {
            ToRemove tr=it.next().getValue();
            long timeleft=tr.timeLeft(currentTime);
            if (timeleft <= 0) {
              it.remove();
              remove(tr.key,false);
            }
 else             if (timeleft < minimalWait)             minimalWait=timeleft;
          }
        }
      }
      if (minimalWait != Long.MAX_VALUE) {
        long gowait=minimalWait;
        minimalWait=-1;
        sleepUntil=System.currentTimeMillis() + gowait;
        wait(gowait);
      }
    }
  }
 catch (  InterruptedException e) {
  }
}","public synchronized void run(){
  try {
    while (!isInterrupted()) {
      if (toRemove.isEmpty()) {
        minimalWait=-1;
        wait();
      }
      if (minimalWait < 0) {
        long currentTime=System.currentTimeMillis();
        minimalWait=Long.MAX_VALUE;
        sleepUntil=0;
synchronized (toRemove) {
          for (Iterator<Map.Entry<K,ToRemove>> it=toRemove.entrySet().iterator(); it.hasNext(); ) {
            ToRemove tr=it.next().getValue();
            long timeleft=tr.timeLeft(currentTime);
            if (timeleft <= 0) {
              it.remove();
              remove(tr.key,false);
            }
 else             if (timeleft < minimalWait)             minimalWait=timeleft;
          }
        }
      }
      if (minimalWait != Long.MAX_VALUE) {
        long gowait=minimalWait;
        minimalWait=-1;
        sleepUntil=System.currentTimeMillis() + gowait;
        wait(gowait);
      }
    }
  }
 catch (  InterruptedException e) {
  }
}"
86413,"@Override public void onLoadFinished(Loader<Cursor> loader,Cursor data){
  Log.d(""String_Node_Str"",String.valueOf(data.getCount()));
  if (data.getCount() != 0) {
    empty.setVisibility(View.GONE);
  }
 else {
    empty.setText(R.string.no_timelapses_found);
  }
  adapter.swapCursor(data);
}","@Override public void onLoadFinished(Loader<Cursor> loader,Cursor data){
  Log.d(""String_Node_Str"",String.valueOf(data.getCount()));
  empty.setVisibility(View.GONE);
  adapter.swapCursor(data);
}"
86414,"/** 
 * Called when the activity is first created. 
 */
@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.timelapse);
  title=(EditText)findViewById(R.id.create_timelapse_title);
  cameraButton=(ImageButton)findViewById(R.id.camera_button);
  exportButton=(ImageButton)findViewById(R.id.export_button);
  cameraButton.setOnClickListener(cameraButtonListener);
  exportButton.setOnClickListener(exportButtonListener);
  preview=(ImageView)findViewById(R.id.previewImage);
  seekBar=(SeekBar)findViewById(R.id.seekBar);
  tla=(TimeLapseApplication)this.getApplicationContext();
  Intent intent=getIntent();
  _id=intent.getExtras().getInt(""String_Node_Str"");
  Log.d(""String_Node_Str"",""String_Node_Str"" + String.valueOf(_id));
  Display display=getWindowManager().getDefaultDisplay();
  preview_width=display.getWidth();
  preview_height=(int)(((double)preview_width * 3) / 4);
  Cursor cursor=tla.getTimeLapseById(_id,null);
  if (cursor != null && cursor.moveToFirst()) {
    title.setText(cursor.getString(cursor.getColumnIndex(SQLiteWrapper.COLUMN_NAME)));
    originalTitle=title.getText().toString();
    if (!cursor.isNull(cursor.getColumnIndex(SQLiteWrapper.COLUMN_THUMBNAIL_PATH))) {
      bmf=new BitmapFactory();
      preview.setImageBitmap(bmf.decodeFile(cursor.getString(cursor.getColumnIndexOrThrow(SQLiteWrapper.COLUMN_THUMBNAIL_PATH))));
      preview.setVisibility(View.VISIBLE);
      if (!cursor.isNull(cursor.getColumnIndex(SQLiteWrapper.COLUMN_IMAGE_COUNT))) {
        seekBar.setMax(cursor.getInt(cursor.getColumnIndex(SQLiteWrapper.COLUMN_IMAGE_COUNT)) - 1);
        if (seekBar.getMax() > 1) {
          Log.v(""String_Node_Str"",String.valueOf(seekBar.getMax()));
          seekBar.setVisibility(View.VISIBLE);
          seekBar.setOnSeekBarChangeListener(onSeekBarChangeListener);
        }
        timelapse_dir=cursor.getString(cursor.getColumnIndex(SQLiteWrapper.COLUMN_DIRECTORY_PATH));
      }
    }
  }
 else {
    exportButton.setEnabled(false);
    cameraButton.setEnabled(false);
  }
  preview_is_fresh=true;
  cursor.close();
}","/** 
 * Called when the activity is first created. 
 */
@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.timelapse);
  title=(EditText)findViewById(R.id.create_timelapse_title);
  cameraButton=(ImageButton)findViewById(R.id.camera_button);
  exportButton=(ImageButton)findViewById(R.id.export_button);
  cameraButton.setOnClickListener(cameraButtonListener);
  exportButton.setOnClickListener(exportButtonListener);
  preview=(ImageView)findViewById(R.id.previewImage);
  seekBar=(SeekBar)findViewById(R.id.seekBar);
  tla=(TimeLapseApplication)this.getApplicationContext();
  Intent intent=getIntent();
  _id=intent.getExtras().getInt(""String_Node_Str"");
  Log.d(""String_Node_Str"",""String_Node_Str"" + String.valueOf(_id));
  Display display=getWindowManager().getDefaultDisplay();
  preview_width=display.getWidth();
  preview_height=(int)(((double)preview_width * 3) / 4);
  Cursor cursor=tla.getTimeLapseById(_id,null);
  if (cursor != null && cursor.moveToFirst()) {
    title.setText(cursor.getString(cursor.getColumnIndex(SQLiteWrapper.COLUMN_NAME)));
    originalTitle=title.getText().toString();
    if (!cursor.isNull(cursor.getColumnIndex(SQLiteWrapper.COLUMN_THUMBNAIL_PATH))) {
      bmf=new BitmapFactory();
      preview.setImageBitmap(bmf.decodeFile(cursor.getString(cursor.getColumnIndexOrThrow(SQLiteWrapper.COLUMN_THUMBNAIL_PATH))));
      preview.setVisibility(View.VISIBLE);
      if (!cursor.isNull(cursor.getColumnIndex(SQLiteWrapper.COLUMN_IMAGE_COUNT))) {
        int seekBarMax=0;
        seekBarMax=cursor.getInt(cursor.getColumnIndex(SQLiteWrapper.COLUMN_IMAGE_COUNT)) - 1;
        Log.d(""String_Node_Str"",String.valueOf(seekBarMax));
        seekBar.setMax(cursor.getInt(cursor.getColumnIndex(SQLiteWrapper.COLUMN_IMAGE_COUNT)) - 1);
        if (seekBar.getMax() > 0) {
          Log.v(""String_Node_Str"",String.valueOf(seekBar.getMax()));
          seekBar.setVisibility(View.VISIBLE);
          seekBar.setOnSeekBarChangeListener(onSeekBarChangeListener);
        }
        timelapse_dir=cursor.getString(cursor.getColumnIndex(SQLiteWrapper.COLUMN_DIRECTORY_PATH));
      }
    }
  }
 else {
    exportButton.setEnabled(false);
    cameraButton.setEnabled(false);
  }
  preview_is_fresh=true;
  cursor.close();
}"
86415,"/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.camera);
  c=(TimeLapseApplication)getApplicationContext();
  cameraOverlay=(ImageView)findViewById(id.camera_overlay);
  cameraOverlay.setAlpha(100);
  mCamera=getCameraInstance();
  picture_taken=false;
  if (mCamera == null) {
    showCameraErrorDialog();
  }
 else {
    setupCamera();
    mCameraPreview=new CameraPreview(this,mCamera);
    FrameLayout preview=(FrameLayout)findViewById(id.camera_preview);
    preview.addView(mCameraPreview);
    RelativeLayout container=(RelativeLayout)findViewById(id.container_layout);
    container.setOnTouchListener(shutterListener);
  }
}","/** 
 * Called when the activity is first created. 
 */
@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  requestWindowFeature(Window.FEATURE_NO_TITLE);
  setContentView(R.layout.camera);
  c=(TimeLapseApplication)getApplicationContext();
  cameraOverlay=(ImageView)findViewById(id.camera_overlay);
  cameraOverlay.setAlpha(100);
  mCamera=getCameraInstance();
  if (mCamera == null) {
    showCameraErrorDialog();
  }
 else {
    setupCamera();
    mCameraPreview=new CameraPreview(this,mCamera);
    FrameLayout preview=(FrameLayout)findViewById(id.camera_preview);
    preview.addView(mCameraPreview);
    RelativeLayout container=(RelativeLayout)findViewById(id.container_layout);
    container.setOnTouchListener(shutterListener);
  }
}"
86416,"@Override public boolean onTouch(View v,MotionEvent event){
  if ((event.getAction()) == event.ACTION_DOWN) {
    Log.d(TAG,""String_Node_Str"");
    mCamera.takePicture(CameraUtils.mShutterFeedback,null,null,new CameraUtils.TimeLapsePictureCallback(timelapse_id));
    return true;
  }
  return false;
}","@Override public boolean onTouch(View v,MotionEvent event){
  if ((event.getAction()) == event.ACTION_DOWN) {
    Log.d(TAG,""String_Node_Str"");
    if (!taking_picture) {
      taking_picture=true;
      mCamera.takePicture(CameraUtils.mShutterFeedback,null,null,new CameraUtils.TimeLapsePictureCallback(timelapse_id));
    }
    return true;
  }
  return false;
}"
86417,"@Override public void onPictureTaken(byte[] data,Camera camera){
  CameraActivity.picture_taken=true;
  new FileUtils.SavePictureOnFilesystem(timelapse_id).execute(data);
}","@Override public void onPictureTaken(byte[] data,Camera camera){
  new FileUtils.SavePictureOnFilesystem(timelapse_id).execute(data);
}"
86418,"@Override protected void onPostExecute(String result){
  super.onPostExecute(result);
  CameraActivity.setCameraOverlay(result);
}","@Override protected void onPostExecute(String result){
  super.onPostExecute(result);
  CameraActivity.setCameraOverlay(result);
  CameraActivity.taking_picture=false;
}"
86419,"protected void initialize(String basename){
  messages=new HashMap<String,Map<String,MessageFormat>>();
  Messages messages=messageProvider.getMessages(basename);
  for (  Locale locale : messages.getLocales()) {
    Map<String,String> codeToMessage=messages.getMessages(locale);
    for (    String code : codeToMessage.keySet()) {
      addMessage(basename,locale,code,createMessageFormat(codeToMessage.get(code),locale));
    }
  }
}","protected void initialize(String basename){
  Messages messagesForBasename=messageProvider.getMessages(basename);
  for (  Locale locale : messagesForBasename.getLocales()) {
    Map<String,String> codeToMessage=messagesForBasename.getMessages(locale);
    for (    String code : codeToMessage.keySet()) {
      addMessage(basename,locale,code,createMessageFormat(codeToMessage.get(code),locale));
    }
  }
}"
86420,"/** 
 * On successful authentication by an Authentication Manager of Spring Security we intercept with this method  and change the respone to include the ROLES of the logged in user. This way we can react on the ROLES and redirect accordingly within the requesting login form (here login.js)
 * @see WebContent/client/login.js
 */
@Override protected void successfulAuthentication(HttpServletRequest request,HttpServletResponse response,Authentication authResult) throws IOException, ServletException {
  SecurityContextHolder.getContext().setAuthentication(authResult);
  SavedRequestAwareAuthenticationSuccessHandler srh=new SavedRequestAwareAuthenticationSuccessHandler();
  this.setAuthenticationSuccessHandler(srh);
  srh.setRedirectStrategy(new RedirectStrategy(){
    @Override public void sendRedirect(    HttpServletRequest httpServletRequest,    HttpServletResponse httpServletResponse,    String s) throws IOException {
    }
  }
);
  super.successfulAuthentication(request,response,authResult);
  String authorityText=StringUtils.join(authResult.getAuthorities(),""String_Node_Str"");
  HttpServletResponseWrapper responseWrapper=new HttpServletResponseWrapper(response);
  JsonGenerator jsonGenerator=null;
  Writer out=null;
  try {
    out=responseWrapper.getWriter();
    JsonFactory jsonFactory=new JsonFactory();
    jsonGenerator=jsonFactory.createGenerator(out);
    jsonGenerator.writeStartObject();
    jsonGenerator.writeBooleanField(""String_Node_Str"",true);
    jsonGenerator.writeStringField(""String_Node_Str"",authResult.getName());
    jsonGenerator.writeStringField(""String_Node_Str"",authorityText);
    jsonGenerator.writeEndObject();
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    IOUtils.closeQuietly(out);
    IOUtils.closeQuietly(jsonGenerator);
  }
}","/** 
 * On successful authentication by an Authentication Manager of Spring Security we intercept with this method  and change the respone to include the ROLES of the logged in user. This way we can react on the ROLES and redirect accordingly within the requesting login form (here login.js)
 * @see WebContent/client/login.js
 */
@Override protected void successfulAuthentication(HttpServletRequest request,HttpServletResponse response,Authentication authResult) throws IOException, ServletException {
  SecurityContextHolder.getContext().setAuthentication(authResult);
  SavedRequestAwareAuthenticationSuccessHandler srh=new SavedRequestAwareAuthenticationSuccessHandler();
  this.setAuthenticationSuccessHandler(srh);
  srh.setRedirectStrategy(new RedirectStrategy(){
    @Override public void sendRedirect(    HttpServletRequest httpServletRequest,    HttpServletResponse httpServletResponse,    String s) throws IOException {
    }
  }
);
  super.successfulAuthentication(request,response,authResult);
  response.setContentType(""String_Node_Str"");
  String authorityText=StringUtils.join(authResult.getAuthorities(),""String_Node_Str"");
  HttpServletResponseWrapper responseWrapper=new HttpServletResponseWrapper(response);
  JsonGenerator jsonGenerator=null;
  Writer out=null;
  try {
    out=responseWrapper.getWriter();
    JsonFactory jsonFactory=new JsonFactory();
    jsonGenerator=jsonFactory.createGenerator(out);
    jsonGenerator.writeStartObject();
    jsonGenerator.writeBooleanField(""String_Node_Str"",true);
    jsonGenerator.writeStringField(""String_Node_Str"",authResult.getName());
    jsonGenerator.writeStringField(""String_Node_Str"",authorityText);
    jsonGenerator.writeEndObject();
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    IOUtils.closeQuietly(jsonGenerator);
    IOUtils.closeQuietly(out);
  }
}"
86421,"/** 
 * On successful authentication by an Authentication Manager of Spring Security we intercept with this method  and change the respone to include the ROLES of the logged in user. This way we can react on the ROLES and redirect accordingly within the requesting login form (here login.js)
 * @see WebContent/client/login.js
 */
@Override protected void successfulAuthentication(HttpServletRequest request,HttpServletResponse response,Authentication authResult) throws IOException, ServletException {
  SecurityContextHolder.getContext().setAuthentication(authResult);
  SavedRequestAwareAuthenticationSuccessHandler srh=new SavedRequestAwareAuthenticationSuccessHandler();
  this.setAuthenticationSuccessHandler(srh);
  srh.setRedirectStrategy(new RedirectStrategy(){
    @Override public void sendRedirect(    HttpServletRequest httpServletRequest,    HttpServletResponse httpServletResponse,    String s) throws IOException {
    }
  }
);
  super.successfulAuthentication(request,response,authResult);
  String authorityText=StringUtils.join(authResult.getAuthorities(),""String_Node_Str"");
  HttpServletResponseWrapper responseWrapper=new HttpServletResponseWrapper(response);
  JsonGenerator jsonGenerator=null;
  Writer out=null;
  try {
    out=responseWrapper.getWriter();
    JsonFactory jsonFactory=new JsonFactory();
    jsonGenerator=jsonFactory.createGenerator(out);
    jsonGenerator.writeStartObject();
    jsonGenerator.writeBooleanField(""String_Node_Str"",true);
    jsonGenerator.writeStringField(""String_Node_Str"",authResult.getName());
    jsonGenerator.writeStringField(""String_Node_Str"",authorityText);
    jsonGenerator.writeEndObject();
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    IOUtils.closeQuietly(out);
    IOUtils.closeQuietly(jsonGenerator);
  }
}","/** 
 * On successful authentication by an Authentication Manager of Spring Security we intercept with this method  and change the respone to include the ROLES of the logged in user. This way we can react on the ROLES and redirect accordingly within the requesting login form (here login.js)
 * @see WebContent/client/login.js
 */
@Override protected void successfulAuthentication(HttpServletRequest request,HttpServletResponse response,Authentication authResult) throws IOException, ServletException {
  SecurityContextHolder.getContext().setAuthentication(authResult);
  SavedRequestAwareAuthenticationSuccessHandler srh=new SavedRequestAwareAuthenticationSuccessHandler();
  this.setAuthenticationSuccessHandler(srh);
  srh.setRedirectStrategy(new RedirectStrategy(){
    @Override public void sendRedirect(    HttpServletRequest httpServletRequest,    HttpServletResponse httpServletResponse,    String s) throws IOException {
    }
  }
);
  super.successfulAuthentication(request,response,authResult);
  String authorityText=StringUtils.join(authResult.getAuthorities(),""String_Node_Str"");
  HttpServletResponseWrapper responseWrapper=new HttpServletResponseWrapper(response);
  JsonGenerator jsonGenerator=null;
  Writer out=null;
  try {
    out=responseWrapper.getWriter();
    JsonFactory jsonFactory=new JsonFactory();
    jsonGenerator=jsonFactory.createGenerator(out);
    jsonGenerator.writeStartObject();
    jsonGenerator.writeBooleanField(""String_Node_Str"",true);
    jsonGenerator.writeStringField(""String_Node_Str"",authResult.getName());
    jsonGenerator.writeStringField(""String_Node_Str"",authorityText);
    jsonGenerator.writeEndObject();
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    IOUtils.closeQuietly(jsonGenerator);
    IOUtils.closeQuietly(out);
  }
}"
86422,"/** 
 * On successful authentication by an Authentication Manager of Spring Security we intercept with this method  and change the respone to include the ROLES of the logged in user. This way we can react on the ROLES and redirect accordingly within the requesting login form (here login.js)
 * @see WebContent/client/login.js
 */
@Override protected void successfulAuthentication(HttpServletRequest request,HttpServletResponse response,FilterChain chain,Authentication authResult) throws IOException, ServletException {
  SecurityContextHolder.getContext().setAuthentication(authResult);
  SavedRequestAwareAuthenticationSuccessHandler srh=new SavedRequestAwareAuthenticationSuccessHandler();
  this.setAuthenticationSuccessHandler(srh);
  srh.setRedirectStrategy(new RedirectStrategy(){
    @Override public void sendRedirect(    HttpServletRequest httpServletRequest,    HttpServletResponse httpServletResponse,    String s) throws IOException {
    }
  }
);
  super.successfulAuthentication(request,response,chain,authResult);
  String authorityText=StringUtils.join(authResult.getAuthorities(),""String_Node_Str"");
  HttpServletResponseWrapper responseWrapper=new HttpServletResponseWrapper(response);
  JsonGenerator jsonGenerator=null;
  Writer out=null;
  try {
    out=responseWrapper.getWriter();
    JsonFactory jsonFactory=new JsonFactory();
    jsonGenerator=jsonFactory.createGenerator(out);
    jsonGenerator.writeStartObject();
    jsonGenerator.writeBooleanField(""String_Node_Str"",true);
    jsonGenerator.writeStringField(""String_Node_Str"",authResult.getName());
    jsonGenerator.writeStringField(""String_Node_Str"",authorityText);
    jsonGenerator.writeEndObject();
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    IOUtils.closeQuietly(out);
    IOUtils.closeQuietly(jsonGenerator);
  }
}","/** 
 * On successful authentication by an Authentication Manager of Spring Security we intercept with this method  and change the respone to include the ROLES of the logged in user. This way we can react on the ROLES and redirect accordingly within the requesting login form (here login.js)
 * @see WebContent/client/login.js
 */
@Override protected void successfulAuthentication(HttpServletRequest request,HttpServletResponse response,FilterChain chain,Authentication authResult) throws IOException, ServletException {
  SecurityContextHolder.getContext().setAuthentication(authResult);
  SavedRequestAwareAuthenticationSuccessHandler srh=new SavedRequestAwareAuthenticationSuccessHandler();
  this.setAuthenticationSuccessHandler(srh);
  srh.setRedirectStrategy(new RedirectStrategy(){
    @Override public void sendRedirect(    HttpServletRequest httpServletRequest,    HttpServletResponse httpServletResponse,    String s) throws IOException {
    }
  }
);
  super.successfulAuthentication(request,response,chain,authResult);
  String authorityText=StringUtils.join(authResult.getAuthorities(),""String_Node_Str"");
  HttpServletResponseWrapper responseWrapper=new HttpServletResponseWrapper(response);
  JsonGenerator jsonGenerator=null;
  Writer out=null;
  try {
    out=responseWrapper.getWriter();
    JsonFactory jsonFactory=new JsonFactory();
    jsonGenerator=jsonFactory.createGenerator(out);
    jsonGenerator.writeStartObject();
    jsonGenerator.writeBooleanField(""String_Node_Str"",true);
    jsonGenerator.writeStringField(""String_Node_Str"",authResult.getName());
    jsonGenerator.writeStringField(""String_Node_Str"",authorityText);
    jsonGenerator.writeEndObject();
  }
 catch (  IOException e) {
    throw e;
  }
 finally {
    IOUtils.closeQuietly(jsonGenerator);
    IOUtils.closeQuietly(out);
  }
}"
86423,"/** 
 * Will return the unification of all maplayers of all groups the user belongs to.
 * @return
 */
@Transient public Set<Module> getModules(){
  Set<Module> allModulesOfUser=new HashSet<Module>();
  Set<Group> groups=this.getGroups();
  if (groups != null) {
    for (    Group group : groups) {
      allModulesOfUser.addAll(group.getModules());
    }
  }
  return allModulesOfUser;
}","/** 
 * Will return the unification of all modules of all groups the user belongs to.
 * @return
 */
@Transient public Set<Module> getModules(){
  Set<Module> allModulesOfUser=new HashSet<Module>();
  Set<Group> groups=this.getGroups();
  if (groups != null) {
    for (    Group group : groups) {
      allModulesOfUser.addAll(group.getModules());
    }
  }
  return allModulesOfUser;
}"
86424,"private boolean validOpeningAndResponse(){
  Call responderCall=auction.getPartnersLastCall();
  if (responderCall != null && !responderCall.isPass()) {
    Call myOpeningBid=auction.getPartnersCall(responderCall);
    if (myOpeningBid != null && !myOpeningBid.isPass()) {
      return true;
    }
  }
  return false;
}","private boolean validOpeningAndResponse(){
  Call responderCall=auction.getPartnersLastCall();
  if (responderCall != null && responderCall.getBid().hasTrump()) {
    Call myOpeningBid=auction.getPartnersCall(responderCall);
    if (myOpeningBid != null && !myOpeningBid.isPass()) {
      return true;
    }
  }
  return false;
}"
86425,"@Override public void paint(Graphics g){
  g.drawImage(image,0,0,IMAGE_WIDTH,IMAGE_HEIGHT,null);
  if (played) {
    g.setColor(Color.GREEN);
  }
 else   if (selected) {
    g.setColor(Color.YELLOW);
  }
 else   if (high) {
    g.setColor(Color.BLUE);
  }
  if (selected || played || high) {
    g.drawRect(0,0,IMAGE_WIDTH - 1,IMAGE_HEIGHT - 1);
  }
}","@Override public void paint(Graphics g){
  g.drawImage(image,0,0,IMAGE_WIDTH,IMAGE_HEIGHT,null);
  if (played) {
    g.setColor(Color.GREEN);
  }
 else   if (selected) {
    g.setColor(Color.YELLOW);
  }
 else   if (high) {
    g.setColor(Color.BLUE);
  }
  if (selected || played || high) {
    g.draw3DRect(0,0,IMAGE_WIDTH - 1,IMAGE_HEIGHT - 1,true);
    g.drawRect(1,1,IMAGE_WIDTH - 3,IMAGE_HEIGHT - 3);
    g.drawRect(2,2,IMAGE_WIDTH - 5,IMAGE_HEIGHT - 5);
  }
}"
86426,"@Override protected Bid prepareBid(){
  return null;
}","@Override protected Bid prepareBid(){
  throw new RuntimeException(""String_Node_Str"");
}"
86427,"public static void setInstance(MockScoringTracker mock){
  instance=mock;
}","public static void setInstance(ScoringTracker mock){
  instance=mock;
}"
86428,"private boolean validOpeningAndResponse(){
  Call responderCall=auction.getPartnersLastCall();
  if (responderCall != null && responderCall.getBid().hasTrump()) {
    Call myOpeningBid=auction.getPartnersCall(responderCall);
    if (myOpeningBid != null && !myOpeningBid.isPass()) {
      return true;
    }
  }
  return false;
}","private boolean validOpeningAndResponse(){
  Call responderCall=auction.getPartnersLastCall();
  if (responderCall != null && responderCall.getBid().hasTrump()) {
    Call myOpeningBid=auction.getPartnersCall(responderCall);
    if (myOpeningBid != null && myOpeningBid.getBid().hasTrump() && auction.isOpening(myOpeningBid)) {
      return true;
    }
  }
  return false;
}"
86429,"public void testDoNotThrowNPEPartnerDidNotBid(){
  Auctioneer a=new Auctioneer(West.i());
  a.bid(new Pass());
  Rebid rule=new Rebid(a,new Hand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")){
    @Override protected Bid prepareBid(){
      return null;
    }
  }
;
  assertEquals(null,rule.getBid());
}","public void testDoNotThrowNPEPartnerDidNotBid(){
  Auctioneer a=new Auctioneer(West.i());
  a.bid(PASS);
  Rebid rule=new Rebid(a,new Hand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")){
    @Override protected Bid prepareBid(){
      return null;
    }
  }
;
  assertEquals(null,rule.getBid());
}"
86430,"public void testDoNotThrowNPEPartnerPass(){
  Auctioneer a=new Auctioneer(West.i());
  a.bid(new Pass());
  a.bid(new Pass());
  Rebid rule=new Rebid(a,new Hand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")){
    @Override protected Bid prepareBid(){
      return null;
    }
  }
;
  assertEquals(null,rule.getBid());
}","public void testDoNotThrowNPEPartnerPass(){
  Auctioneer a=new Auctioneer(West.i());
  a.bid(PASS);
  a.bid(PASS);
  Rebid rule=new Rebid(a,new Hand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")){
    @Override protected Bid prepareBid(){
      return null;
    }
  }
;
  assertEquals(null,rule.getBid());
}"
86431,"public void testPrepareBidInRebidSituation(){
  Auctioneer a=new Auctioneer(West.i());
  a.bid(new Bid(1,Clubs.i()));
  a.bid(new Pass());
  a.bid(new Bid(1,Diamonds.i()));
  a.bid(new Pass());
  Rebid rule=new Rebid(a,new Hand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")){
    @Override protected Bid prepareBid(){
      return new Bid(7,NoTrump.i());
    }
  }
;
  assertEquals(new Bid(7,NoTrump.i()),rule.getBid());
}","public void testPrepareBidInRebidSituation(){
  Auctioneer a=new Auctioneer(West.i());
  a.bid(ONE_CLUBS);
  a.bid(PASS);
  a.bid(ONE_DIAMONDS);
  a.bid(PASS);
  Rebid rule=new Rebid(a,new Hand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")){
    @Override protected Bid prepareBid(){
      return new Bid(7,NoTrump.i());
    }
  }
;
  assertEquals(new Bid(7,NoTrump.i()),rule.getBid());
}"
86432,"public void testOnlyApplyToRebids(){
  Auctioneer a=new Auctioneer(West.i());
  a.bid(new Bid(1,Hearts.i()));
  a.bid(new Pass());
  Rebid rule=new Rebid(a,new Hand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")){
    @Override protected Bid prepareBid(){
      throw new RuntimeException(""String_Node_Str"");
    }
  }
;
  assertEquals(null,rule.getBid());
}","public void testOnlyApplyToRebids(){
  Auctioneer a=new Auctioneer(West.i());
  a.bid(ONE_HEARTS);
  a.bid(PASS);
  Rebid rule=new Rebid(a,new Hand(""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",""String_Node_Str"")){
    @Override protected Bid prepareBid(){
      throw new RuntimeException(""String_Node_Str"");
    }
  }
;
  assertEquals(null,rule.getBid());
}"
86433,"public void testEquivaltenceVariousPruneStrategies(){
  for (int cardDeal=0; cardDeal < DEALS_TO_TRY; cardDeal++) {
    monkeys=new ArrayList<SearchMonkey>();
    Trump trump=determineTrump(cardDeal);
    g=new Game(trump);
    GameUtils.initializeRandom(g,CARDS_TO_DEAL);
    System.out.println(""String_Node_Str"" + cardDeal + ""String_Node_Str"");
    g.playOneTrick();
    g.printHands();
    g.printHandsDebug();
    System.out.println(""String_Node_Str"");
    for (    SearchConfiguration config : SearchConfiguration.values()) {
      SearchMonkey monkey=new SearchMonkey(config);
      monkeys.add(monkey);
      System.out.println(""String_Node_Str"" + config + ""String_Node_Str"");
      monkey.runSearch(g.duplicate());
      System.out.println(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    assertAllSearchesFindSameNumberOfTricksTaken();
  }
}","public void testEquivaltenceVariousPruneStrategies(){
  for (int cardDeal=0; cardDeal < DEALS_TO_TRY; cardDeal++) {
    monkeys=new ArrayList<SearchMonkey>();
    Trump trump=determineTrump(cardDeal);
    g=new Game(trump);
    GameUtils.initializeRandom(g,CARDS_TO_DEAL);
    System.out.println(""String_Node_Str"" + cardDeal + ""String_Node_Str"");
    g.printHands();
    g.printHandsDebug();
    System.out.println(""String_Node_Str"");
    for (    SearchConfiguration config : SearchConfiguration.values()) {
      SearchMonkey monkey=new SearchMonkey(config);
      monkeys.add(monkey);
      System.out.println(""String_Node_Str"" + config + ""String_Node_Str"");
      monkey.runSearch(g.duplicate());
      System.out.println(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    assertAllSearchesFindSameNumberOfTricksTaken();
  }
}"
86434,"public void runSearch(Game g){
  search=new DoubleDummySolver(g);
  search.setMaxTricks(SEARCH_DEPTH_CUTOFF);
  search.setTerminateIfRootOnlyHasOneValidMove(false);
  if (config == SearchConfiguration.MiniMax) {
    search.setUseDuplicateRemoval(false);
    search.setUsePruneLowestCardToLostTrick(false);
    search.useAlphaBetaPruning(false);
    search.setShouldPruneCardsInSequence(false);
    search.setShouldPruneCardsInPlayedSequence(false);
  }
  if (config == SearchConfiguration.NoDuplicatePruning) {
    search.setUseDuplicateRemoval(false);
  }
  if (config == SearchConfiguration.NoAlphaBetaPruning) {
    search.useAlphaBetaPruning(false);
  }
  if (config == SearchConfiguration.DuplicatePruning) {
    search.setUseDuplicateRemoval(true);
    search.setUsePruneLowestCardToLostTrick(false);
  }
  if (config == SearchConfiguration.DuplicateWithLowestPruning) {
    search.setUseDuplicateRemoval(true);
    search.setUsePruneLowestCardToLostTrick(true);
  }
  if (config == SearchConfiguration.NoSequencePruning) {
    search.setShouldPruneCardsInSequence(false);
  }
  if (config == SearchConfiguration.NoPlayedSequencePruning) {
    search.setShouldPruneCardsInPlayedSequence(false);
  }
  search.search();
  search.printStats();
  this.card=search.getRoot().getBestMove().getCardPlayed();
  this.northSouthTricks=search.getRoot().getTricksTaken(Player.NORTH_SOUTH);
}","public void runSearch(Game g){
  search=new DoubleDummySolver(g);
  search.setMaxTricks(SEARCH_DEPTH_CUTOFF);
  search.setTerminateIfRootOnlyHasOneValidMove(false);
  if (config == SearchConfiguration.DuplicatePruning) {
    search.setUseDuplicateRemoval(true);
    search.setUsePruneLowestCardToLostTrick(false);
  }
  if (config == SearchConfiguration.DuplicateWithLowestPruning) {
    search.setUseDuplicateRemoval(true);
    search.setUsePruneLowestCardToLostTrick(true);
  }
  search.search();
  search.printStats();
  this.card=search.getRoot().getBestMove().getCardPlayed();
  this.northSouthTricks=search.getRoot().getTricksTaken(Player.NORTH_SOUTH);
}"
86435,"void displayCurrentTrick(){
  message=""String_Node_Str"" + game.getTricksTaken(Player.NORTH_SOUTH) + ""String_Node_Str""+ game.getTricksPlayed();
  table.displayTrick(game.getCurrentTrick(),panel);
  table.setDisplayingPreviousTrick(false);
  dummy.display();
  humanHandDisplay.display();
}","void displayCurrentTrick(){
  message=""String_Node_Str"" + game.getTricksTaken(Player.NORTH_SOUTH) + ""String_Node_Str""+ game.getTricksPlayed();
  table.displayTrick(game.getCurrentTrick(),panel);
  table.setDisplayingPreviousTrick(false);
  displayDummyIfWestPlayed();
  humanHandDisplay.display();
}"
86436,"public void setGame(Game g,Direction human){
  game=g;
  table.setHumanDirection(human);
  humanHandDisplay=new AllCardsInOneRow(human,human,game,this);
  humanHandDisplay.display();
  dummy=new OneColumnPerColor(human,North.i(),game,this);
  dummy.display();
}","public void setGame(Game g,Direction human){
  game=g;
  table.setHumanDirection(human);
  humanHandDisplay=new AllCardsInOneRow(human,human,game,this);
  humanHandDisplay.display();
  dummy=new OneColumnPerColor(human,North.i(),game,this);
  displayDummyIfWestPlayed();
}"
86437,"public void pruneAsDuplicatePosition(){
  setPruned(true,Node.PRUNE_DUPLICATE_POSITION);
}","public void pruneAsDuplicatePosition(){
  setPruned(false,Node.PRUNE_DUPLICATE_POSITION);
}"
86438,"public boolean isPrunedDuplicatePosition(){
  return isPruned() && (getPruneType() == PRUNE_DUPLICATE_POSITION);
}","public boolean isPrunedDuplicatePosition(){
  return (pruneType == PRUNE_DUPLICATE_POSITION);
}"
86439,"private void removeDuplicatePositions(Node node){
  if (useDuplicateRemoval()) {
    Game position=game.duplicate();
    position.playMoves(node.getMoves());
    if (lookup.positionEncountered(position)) {
      node.pruneAsDuplicatePosition();
    }
  }
}","private void removeDuplicatePositions(Node node){
  if (useDuplicateRemoval()) {
    Game position=game.duplicate();
    position.playMoves(node.getMoves());
    if (lookup.positionEncountered(position)) {
      node.pruneAsDuplicatePosition();
      if (node.parent != null && (node.parent.isLastVisitedChild(node))) {
      }
    }
  }
}"
86440,"public void testAutomatedBidding(){
  GBController mainController=makeController();
  Auctioneer auction=mainController.getBiddingController().getAuction();
  System.out.println(""String_Node_Str"");
  mainController.getBiddingController().getCardHolder().printHands();
  System.out.println(""String_Node_Str"" + auction.getCalls());
  int initialBids=auction.getCalls().size();
  mainController.getBiddingController().placeBid(4,""String_Node_Str"");
  System.out.println(""String_Node_Str"" + auction.getCalls());
  assertEquals(""String_Node_Str"",initialBids + 4,auction.getCalls().size());
}","public void testAutomatedBidding(){
  GBController mainController=makeController();
  Auctioneer auction=mainController.getBiddingController().getAuction();
  System.out.println(""String_Node_Str"");
  mainController.getBiddingController().getCardHolder().printHandsDebug();
  System.out.println(""String_Node_Str"" + auction.getCalls());
  int initialBids=auction.getCalls().size();
  mainController.getBiddingController().placeBid(4,""String_Node_Str"");
  System.out.println(""String_Node_Str"" + auction.getCalls());
  assertEquals(""String_Node_Str"",initialBids + 4,auction.getCalls().size());
}"
86441,"public void printHandsDebug(){
  for (  Player player : players) {
    System.out.println(""String_Node_Str"" + player + ""String_Node_Str""+ printHandDebug(player.getHand())+ ""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"" + getNextToPlay().toString().toUpperCase() + ""String_Node_Str"");
  System.out.println(""String_Node_Str"" + getTrump().toDebugString() + ""String_Node_Str"");
}","public void printHandsDebug(){
  for (  Player player : players) {
    System.out.println(""String_Node_Str"" + player + ""String_Node_Str""+ printHandDebug(player.getHand())+ ""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"" + getNextToPlay().toString().toUpperCase() + ""String_Node_Str"");
  if (getTrump() != null) {
    System.out.println(""String_Node_Str"" + getTrump().toDebugString() + ""String_Node_Str"");
  }
}"
86442,"private boolean partnerWasRespondingToMy1NT(){
  if (auction.getPartnersLastCall() == null || auction.getPartnersCall(auction.getPartnersLastCall()) == null) {
    return false;
  }
  Call partnersCall=auction.getPartnersLastCall();
  return new Bid(1,NoTrump.i()).equals(auction.getPartnersCall(partnersCall).getBid());
}","private boolean partnerWasRespondingToMy1NT(){
  if (auction.getPartnersLastCall() == null || auction.getPartnersCall(auction.getPartnersLastCall()) == null) {
    return false;
  }
  Call partnersCall=auction.getPartnersLastCall();
  if (new Pass().equals(partnersCall.getBid())) {
    return false;
  }
  return new Bid(1,NoTrump.i()).equals(auction.getPartnersCall(partnersCall).getBid());
}"
86443,"@Override public void paint(Graphics g){
  Image image=new ImageIcon(""String_Node_Str"" + card.toString().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"").getImage();
  g.drawImage(image,0,0,IMAGE_WIDTH,IMAGE_HEIGHT,null);
}","@Override public void paint(Graphics g){
  Image image=new ImageIcon(""String_Node_Str"" + card.toString().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"").getImage();
  g.drawImage(image,0,0,IMAGE_WIDTH,IMAGE_HEIGHT,null);
  if (selected) {
    g.setColor(Color.YELLOW);
    g.drawRect(0,0,IMAGE_WIDTH - 1,IMAGE_HEIGHT - 1);
  }
}"
86444,"private Game makeGame(Auctioneer a,Game cardHolder){
  Game result=new Game(a.getHighBid().getTrump());
  result.getNorth().init(cardHolder.getPlayer(a.getDummyOffsetDirection(North.i())).getHand());
  result.getEast().init(cardHolder.getPlayer(a.getDummyOffsetDirection(East.i())).getHand());
  result.getSouth().init(cardHolder.getPlayer(a.getDummyOffsetDirection(South.i())).getHand());
  result.getWest().init(cardHolder.getPlayer(a.getDummyOffsetDirection(West.i())).getHand());
  result.setNextToPlay(West.i().getValue());
  return result;
}","private Game makeGame(Auctioneer a,Game cardHolder){
  Game result=new Game(a.getHighBid().getTrump());
  result.getPlayer(a.getDummyOffsetDirection(North.i())).init(cardHolder.getPlayer(North.i()).getHand());
  result.getPlayer(a.getDummyOffsetDirection(East.i())).init(cardHolder.getPlayer(East.i()).getHand());
  result.getPlayer(a.getDummyOffsetDirection(South.i())).init(cardHolder.getPlayer(South.i()).getHand());
  result.getPlayer(a.getDummyOffsetDirection(West.i())).init(cardHolder.getPlayer(West.i()).getHand());
  result.setNextToPlay(West.i().getValue());
  return result;
}"
86445,"public void placeBid(int bidSize,String trump){
  if (!auction.biddingFinished()) {
    if (!auction.getNextToBid().equals(human.getDirection2())) {
      view.getBiddingDisplay().display(""String_Node_Str"");
      return;
    }
    Bid candidate=Bid.makeBid(bidSize,trump);
    if (!auction.isValid(candidate)) {
      view.getBiddingDisplay().display(""String_Node_Str"");
      return;
    }
    auction.bid(candidate);
    view.getBiddingDisplay().display(""String_Node_Str"" + candidate);
    doAutomatedBidding();
  }
  if (auction.biddingFinished()) {
    view.getBiddingDisplay().display(""String_Node_Str"" + auction.getHighBid());
  }
}","public void placeBid(int bidSize,String trump){
  if (!auction.biddingFinished()) {
    if (!auction.getNextToBid().equals(human.getDirection2())) {
      view.getBiddingDisplay().display(""String_Node_Str"");
      return;
    }
    Bid candidate=Bid.makeBid(bidSize,trump);
    if (!auction.isValid(candidate)) {
      view.getBiddingDisplay().display(""String_Node_Str"");
      return;
    }
    auction.bid(candidate);
    view.getBiddingDisplay().display(""String_Node_Str"" + candidate);
    view.auctionStateChanged();
    doAutomatedBidding();
  }
  if (auction.biddingFinished()) {
    view.getBiddingDisplay().display(""String_Node_Str"" + auction.getHighBid());
  }
}"
86446,"public void setGame(Game game,Direction human){
  biddingPane=theWindow.getContentPane();
  biddingPane.setVisible(false);
  playPane=new JPanel();
  playPane.setPreferredSize(new Dimension(800,600));
  theWindow.setContentPane(playPane);
  PlayControls playControls=new PlayControls(this);
  playControls.placeOn(theWindow);
  playControls.setGame(game,human);
  theWindow.pack();
}","public void setGame(Game game,Direction human){
  biddingPane=theWindow.getContentPane();
  biddingPane.setVisible(false);
  playPane=new JPanel();
  playPane.setPreferredSize(new Dimension(800,750));
  theWindow.setContentPane(playPane);
  PlayControls playControls=new PlayControls(this);
  playControls.placeOn(theWindow);
  playControls.setGame(game,human);
  theWindow.pack();
}"
86447,"public void mouseExited(MouseEvent arg0){
}","public void mouseExited(MouseEvent arg0){
  theCard.setSelected(false);
}"
86448,"public void paintComponent(Graphics g){
  super.paintComponent(g);
  g.drawString(""String_Node_Str"" + game.getTrump(),20,DHEIGHT - 25);
}","public void paintComponent(Graphics g){
  super.paintComponent(g);
  g.drawRect((int)table.getX(),(int)table.getY(),(int)table.getWidth(),(int)table.getHeight());
  g.drawString(""String_Node_Str"" + game.getTrump(),20,DHEIGHT - 25);
}"
86449,"public PlayControls(MainWindow owner){
  super(owner);
  panel.setLayout(null);
  panel.setPreferredSize(new Dimension(WIDTH,DHEIGHT));
}","public PlayControls(MainWindow owner){
  super(owner);
  panel.setLayout(null);
  panel.setPreferredSize(new Dimension(WIDTH,DHEIGHT));
  table=new Rectangle(290,DHEIGHT - CardPanel.IMAGE_HEIGHT - 35- 5- 275,222,275);
}"
86450,"private Point determineDummyPos(Direction human,int longestColorLength){
  if (South.i().equals(human)) {
    return new Point(175,10);
  }
 else   if (West.i().equals(human)) {
    return new Point(30,150);
  }
 else   if (East.i().equals(human)) {
    return new Point(600,150);
  }
  throw new RuntimeException(""String_Node_Str"");
}","private Point determineDummyPos(Direction human,int longestColorLength){
  if (South.i().equals(human)) {
    return new Point(235,5);
  }
 else   if (West.i().equals(human)) {
    return new Point(10,DHEIGHT - 500);
  }
 else   if (East.i().equals(human)) {
    return new Point(512,DHEIGHT - 500);
  }
  throw new RuntimeException(""String_Node_Str"");
}"
86451,"public void mouseEntered(MouseEvent arg0){
}","public void mouseEntered(MouseEvent arg0){
  if (theGame.isLegalMove(theCard.getCard())) {
    theCard.setSelected(true);
  }
}"
86452,"public DaListener(CardPanel card){
  theCard=card;
}","public DaListener(CardPanel card,Game g){
  theCard=card;
  theGame=g;
}"
86453,"@Override protected JPanel createDisplayPanel(){
  return new JPanel(){
    public void paintComponent(    Graphics g){
      super.paintComponent(g);
      g.drawString(""String_Node_Str"" + game.getTrump(),20,DHEIGHT - 25);
    }
  }
;
}","@Override protected JPanel createDisplayPanel(){
  return new JPanel(){
    public void paintComponent(    Graphics g){
      super.paintComponent(g);
      g.drawRect((int)table.getX(),(int)table.getY(),(int)table.getWidth(),(int)table.getHeight());
      g.drawString(""String_Node_Str"" + game.getTrump(),20,DHEIGHT - 25);
    }
  }
;
}"
86454,"public void setGame(Game g,Direction human){
  game=g;
  int i=0;
  Hand humanHand=new Hand(game.getPlayer(human).getHand());
  for (  Card card : humanHand.getCardsHighToLow()) {
    CardPanel cardPanel=new CardPanel(card);
    cardPanel.addMouseListener(new DaListener(cardPanel));
    cardPanel.addMouseMotionListener(new DaListener(cardPanel));
    panel.add(cardPanel);
    System.out.println(""String_Node_Str"" + panel.getHeight());
    cardPanel.setLocation(75 + CARD_OFFSET * i,DHEIGHT - CardPanel.IMAGE_HEIGHT - 35);
    panel.setComponentZOrder(cardPanel,0);
    i++;
  }
  Hand dummyHand=new Hand(game.getPlayer(North.i()).getHand());
  Point dummyUpperLeft=determineDummyPos(human,dummyHand.getLongestColorLength());
  for (  Color color : Color.list) {
    int j=0;
    for (    Card card : dummyHand.getColorHi2Low(color)) {
      CardPanel cardPanel=new CardPanel(card);
      if (human.equals(South.i())) {
        cardPanel.addMouseListener(new DaListener(cardPanel));
        cardPanel.addMouseMotionListener(new DaListener(cardPanel));
      }
      panel.add(cardPanel);
      cardPanel.setLocation((int)dummyUpperLeft.getX(),(int)dummyUpperLeft.getY() + CARD_OFFSET * j);
      panel.setComponentZOrder(cardPanel,0);
      j++;
    }
    dummyUpperLeft.setLocation(dummyUpperLeft.getX() + CardPanel.IMAGE_WIDTH + 5,dummyUpperLeft.getY());
  }
  panel.repaint();
}","public void setGame(Game g,Direction human){
  game=g;
  int i=0;
  Hand humanHand=new Hand(game.getPlayer(human).getHand());
  for (  Card card : humanHand.getCardsHighToLow()) {
    CardPanel cardPanel=new CardPanel(card);
    DaListener listener=new DaListener(cardPanel,game);
    cardPanel.addMouseListener(listener);
    cardPanel.addMouseMotionListener(listener);
    panel.add(cardPanel);
    cardPanel.setLocation(200 + CARD_OFFSET * i,DHEIGHT - CardPanel.IMAGE_HEIGHT - 35);
    panel.setComponentZOrder(cardPanel,0);
    i++;
  }
  Hand dummyHand=new Hand(game.getPlayer(North.i()).getHand());
  Point dummyUpperLeft=determineDummyPos(human,dummyHand.getLongestColorLength());
  for (  Color color : Color.list) {
    int j=0;
    for (    Card card : dummyHand.getColorHi2Low(color)) {
      CardPanel cardPanel=new CardPanel(card);
      if (human.equals(South.i())) {
        DaListener listener=new DaListener(cardPanel,game);
        cardPanel.addMouseListener(listener);
        cardPanel.addMouseMotionListener(listener);
      }
      panel.add(cardPanel);
      cardPanel.setLocation((int)dummyUpperLeft.getX(),(int)dummyUpperLeft.getY() + CARD_OFFSET * j);
      panel.setComponentZOrder(cardPanel,0);
      j++;
    }
    dummyUpperLeft.setLocation(dummyUpperLeft.getX() + CardPanel.IMAGE_WIDTH + 2,dummyUpperLeft.getY());
  }
  panel.repaint();
}"
86455,"public PlayView(MainView owner){
  super(owner);
  panel.setLayout(null);
  panel.setPreferredSize(new Dimension(WIDTH,DHEIGHT));
  table=new Rectangle(290,DHEIGHT - CardPanel.IMAGE_HEIGHT - 35- 5- 275,222,275);
  dummyCards=new ArrayList<CardPanel>();
  currentTrickCards=new ArrayList<CardPanel>();
}","public PlayView(MainView owner){
  super(owner);
  panel.setLayout(null);
  panel.setPreferredSize(new Dimension(WIDTH,DHEIGHT));
  panel.setSize(new Dimension(WIDTH,DHEIGHT));
  table=new Rectangle(290,DHEIGHT - CardPanel.IMAGE_HEIGHT - 35- 5- 275,222,275);
  dummyCards=new ArrayList<CardPanel>();
  currentTrickCards=new ArrayList<CardPanel>();
}"
86456,"public void examinePosition(Node node){
  if (node.isPruned()) {
    return;
  }
  Game position=game.duplicate();
  position.playMoves(node.getMoves());
  Player player=position.getNextToPlay();
  node.setPlayerTurn(player.getDirection());
  if (position.oneTrickLeft()) {
    position.playMoves(finalMoves);
    handleLeafNode(node,position);
  }
 else {
    if (position.getTricksPlayed() >= maxTricks) {
      handleLeafNode(node,position);
    }
 else {
      List<Card> moves=player.getPossibleMoves(position.getCurrentTrick());
      for (      Card card : moves) {
        Node move=new Node(node);
        move.setCardPlayed(card);
        move.setPlayerCardPlayed(player);
        stack.push(move);
      }
    }
  }
}","public void examinePosition(Node node){
  if (node.isPruned()) {
    return;
  }
  Game position=game.duplicate();
  position.playMoves(node.getMoves());
  Player player=position.getNextToPlay();
  node.setPlayerTurn(player.getDirection());
  if (position.oneTrickLeft()) {
    if (node == root) {
      Node move=new Node(node);
      move.setCardPlayed(player.getPossibleMoves(position.getCurrentTrick()).get(0));
      move.setPlayerCardPlayed(player);
    }
    position.playMoves(finalMoves);
    handleLeafNode(node,position);
  }
 else {
    if (position.getTricksPlayed() >= maxTricks) {
      handleLeafNode(node,position);
    }
 else {
      List<Card> moves=player.getPossibleMoves(position.getCurrentTrick());
      for (      Card card : moves) {
        Node move=new Node(node);
        move.setCardPlayed(card);
        move.setPlayerCardPlayed(player);
        stack.push(move);
      }
    }
  }
}"
86457,"private void emit(JarOutputStream sink,ClassDefinition definition) throws IOException {
  String filename=definition.name().replaceAll(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"";
  sink.putNextEntry(new JarEntry(filename));
  sink.write(definition.data());
  sink.closeEntry();
}","private void emit(JarOutputStream sink,ClassDefinition definition) throws IOException {
  sink.putNextEntry(new JarEntry(definition.name() + ""String_Node_Str""));
  sink.write(definition.data());
  sink.closeEntry();
}"
86458,"@Override public void init(NamedList args){
  super.init(args);
  Parameters.setParam(args,""String_Node_Str"",""String_Node_Str"");
  Parameters.setParam(args,""String_Node_Str"",""String_Node_Str"");
  Parameters.setParam(args,""String_Node_Str"",200);
  Parameters.setParam(args,""String_Node_Str"",86400);
  Parameters.setParam(args,""String_Node_Str"",""String_Node_Str"");
  Parameters.setParam(args,""String_Node_Str"",""String_Node_Str"");
  Parameters.setParam(args,""String_Node_Str"",""String_Node_Str"");
  Parameters.setParam(args,""String_Node_Str"",""String_Node_Str"");
  Parameters.setParam(args,""String_Node_Str"",""String_Node_Str"");
  Parameters.setParam(args,""String_Node_Str"",""String_Node_Str"");
  Parameters.setParam(args,""String_Node_Str"",""String_Node_Str"");
  Parameters.setParam(args,""String_Node_Str"",false);
  Parameters.setParam(args,""String_Node_Str"",new NamedList<List>());
  final File file=getOaiHome(args);
  if (!file.exists()) {
    log.fatal(""String_Node_Str"");
    return;
  }
  final List maxrecords=args.getAll(""String_Node_Str"");
  if (maxrecords == null)   Parameters.setParam(args,""String_Node_Str"",200);
 else {
    SolrParams p=SolrParams.toSolrParams((NamedList)maxrecords.get(0));
    final Iterator<String> iterator=p.getParameterNamesIterator();
    while (iterator.hasNext()) {
      String key=iterator.next();
      Parameters.setParam(args,""String_Node_Str"" + key,p.getInt(key));
    }
  }
  try {
    final JAXBContext jc=JAXBContext.newInstance(ObjectFactory.class);
    Parameters.setParam(""String_Node_Str"",jc.createMarshaller());
    Parameters.setParam(""String_Node_Str"",jc.createUnmarshaller());
  }
 catch (  JAXBException e) {
    log.error(e);
  }
  try {
    Parameters.setParam(VerbType.IDENTIFY,Parsing.loadStaticVerb(VerbType.IDENTIFY));
    Parameters.setParam(VerbType.LIST_SETS,Parsing.loadStaticVerb(VerbType.LIST_SETS));
    Parameters.setParam(VerbType.LIST_METADATA_FORMATS,Parsing.loadStaticVerb(VerbType.LIST_METADATA_FORMATS));
  }
 catch (  FileNotFoundException e) {
    log.warn(e);
  }
catch (  JAXBException e) {
    log.error(e);
  }
  addStylesheets(file);
}","@Override public void init(NamedList args){
  super.init(args);
  Parameters.setParam(args,""String_Node_Str"",""String_Node_Str"");
  Parameters.setParam(args,""String_Node_Str"",""String_Node_Str"");
  Parameters.setParam(args,""String_Node_Str"",200);
  Parameters.setParam(args,""String_Node_Str"",86400);
  Parameters.setParam(args,""String_Node_Str"",""String_Node_Str"");
  Parameters.setParam(args,""String_Node_Str"",""String_Node_Str"");
  Parameters.setParam(args,""String_Node_Str"",""String_Node_Str"");
  Parameters.setParam(args,""String_Node_Str"",""String_Node_Str"");
  Parameters.setParam(args,""String_Node_Str"",""String_Node_Str"");
  Parameters.setParam(args,""String_Node_Str"",""String_Node_Str"");
  Parameters.setParam(args,""String_Node_Str"",""String_Node_Str"");
  Parameters.setParam(args,""String_Node_Str"",false);
  Parameters.setParam(args,""String_Node_Str"",new NamedList<List>());
  final File file=getOaiHome(args);
  if (!file.exists()) {
    log.fatal(""String_Node_Str"");
    return;
  }
  final List maxrecords=args.getAll(""String_Node_Str"");
  if (maxrecords == null)   Parameters.setParam(args,""String_Node_Str"",200);
 else {
    SolrParams p=SolrParams.toSolrParams((NamedList)maxrecords.get(0));
    final Iterator<String> iterator=p.getParameterNamesIterator();
    while (iterator.hasNext()) {
      String key=iterator.next();
      Parameters.setParam(args,""String_Node_Str"" + key,p.getInt(key));
    }
  }
  try {
    final JAXBContext jc=JAXBContext.newInstance(ObjectFactory.class);
    Parameters.setParam(""String_Node_Str"",jc.createMarshaller());
    Parameters.setParam(""String_Node_Str"",jc.createUnmarshaller());
  }
 catch (  JAXBException e) {
    log.error(e);
  }
  try {
    Parameters.setParam(VerbType.IDENTIFY,Parsing.loadStaticVerb(VerbType.IDENTIFY));
  }
 catch (  FileNotFoundException e) {
    log.warn(e);
  }
catch (  JAXBException e) {
    log.error(e);
  }
  try {
    Parameters.setParam(VerbType.LIST_METADATA_FORMATS,Parsing.loadStaticVerb(VerbType.LIST_METADATA_FORMATS));
  }
 catch (  FileNotFoundException e) {
    log.warn(e);
  }
catch (  JAXBException e) {
    log.error(e);
  }
  try {
    Parameters.setParam(VerbType.LIST_SETS,Parsing.loadStaticVerb(VerbType.LIST_SETS));
  }
 catch (  FileNotFoundException e) {
    log.warn(e);
  }
catch (  JAXBException e) {
    log.error(e);
  }
  addStylesheets(file);
}"
86459,"/** 
 * stripOaiPrefix <p/> Remove the oai prefix and return the identifier. oai:domain:identifier => identifier
 * @param identifier the oai identifier
 * @return A local identifier
 */
public static String stripOaiPrefix(String identifier){
  final String prefix=(String)Parameters.getParam(""String_Node_Str"");
  final String id=identifier.substring(prefix.length());
  System.out.println(""String_Node_Str"" + prefix);
  System.out.println(""String_Node_Str"" + identifier);
  System.out.println(""String_Node_Str"" + id);
  return id;
}","/** 
 * stripOaiPrefix <p/> Remove the oai prefix and return the identifier. oai:domain:identifier => identifier
 * @param identifier the oai identifier
 * @return A local identifier
 */
public static String stripOaiPrefix(String identifier){
  final String prefix=(String)Parameters.getParam(""String_Node_Str"");
  final int length_prefix=prefix.length();
  if (identifier.length() < length_prefix)   return ""String_Node_Str"";
  return identifier.substring(length_prefix);
}"
86460,"public VarAccessType getVarAccessType(String varName){
  Parameter param=getParam(varName);
  if (param != null) {
    return new ParameterAccessType(param);
  }
 else {
    Field field=type.getField(varName);
    if (field != null) {
      return new FieldAccessType(field);
    }
 else {
      LocalVarContext localVarContext;
      if (!localVars.containsKey(varName)) {
        throw new RuntimeException(""String_Node_Str"" + varName + ""String_Node_Str"");
      }
 else {
        localVarContext=localVars.get(varName);
      }
      return new LocalVariableAccessType(varName,localVarContext.getIndex(),localVarContext.getType());
    }
  }
}","public VarAccessType getVarAccessType(String varName){
  Parameter param=getParam(varName);
  if (param != null) {
    return new ParameterAccessType(param);
  }
 else {
    Field field=type.getField(varName);
    if (field != null) {
      return new FieldAccessType(field);
    }
 else {
      LocalVarContext localVarContext;
      if (!localVars.containsKey(varName)) {
        throw new RuntimeException(""String_Node_Str"" + varName + ""String_Node_Str""+ type.getName()+ ""String_Node_Str""+ method.getName()+ method.getSignature());
      }
 else {
        localVarContext=localVars.get(varName);
      }
      return new LocalVariableAccessType(varName,localVarContext.getIndex(),localVarContext.getType());
    }
  }
}"
86461,"public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  try {
    return method.invoke(visitor,args);
  }
 catch (  InvocationTargetException e) {
    throw new VisitorRuntimeException(method.getDeclaringClass().getSimpleName(),args[0],e.getTargetException());
  }
}","public Object invoke(Object proxy,Method method,Object[] args) throws Throwable {
  try {
    return method.invoke(visitor,args);
  }
 catch (  InvocationTargetException e) {
    throw new VisitorRuntimeException(visitor.getClass().getSimpleName(),args[0],e.getTargetException());
  }
}"
86462,"@SuppressWarnings(""String_Node_Str"") private static <T>T wrap(final T visitor,Class<T> interf){
  return (T)Proxy.newProxyInstance(ExceptionHandlingVisitor.class.getClassLoader(),new Class<?>[]{interf},new InvocationHandler(){
    public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      try {
        return method.invoke(visitor,args);
      }
 catch (      InvocationTargetException e) {
        throw new VisitorRuntimeException(method.getDeclaringClass().getSimpleName(),args[0],e.getTargetException());
      }
    }
  }
);
}","@SuppressWarnings(""String_Node_Str"") private static <T>T wrap(final T visitor,Class<T> interf){
  return (T)Proxy.newProxyInstance(ExceptionHandlingVisitor.class.getClassLoader(),new Class<?>[]{interf},new InvocationHandler(){
    public Object invoke(    Object proxy,    Method method,    Object[] args) throws Throwable {
      try {
        return method.invoke(visitor,args);
      }
 catch (      InvocationTargetException e) {
        throw new VisitorRuntimeException(visitor.getClass().getSimpleName(),args[0],e.getTargetException());
      }
    }
  }
);
}"
86463,"@Override public Field getField(String name){
  java.lang.reflect.Field field;
  try {
    field=existing.getField(name);
  }
 catch (  NoSuchFieldException e) {
    return null;
  }
catch (  SecurityException e) {
    return null;
  }
  if (field != null) {
    return new Field(MemberFlags.fromReflection(field),existing(field.getType()),field.getName());
  }
  return null;
}","@Override public Field getField(String name){
  java.lang.reflect.Field field;
  try {
    field=existing.getDeclaredField(name);
  }
 catch (  NoSuchFieldException e) {
    return null;
  }
catch (  SecurityException e) {
    return null;
  }
  if (field != null) {
    return new Field(MemberFlags.fromReflection(field),existing(field.getType()),field.getName());
  }
  return null;
}"
86464,"private String paramString(Iterable<Parameter> parameters){
  String result=null;
  for (  Parameter parameter : parameters) {
    if (result == null) {
      result=""String_Node_Str"";
    }
 else {
      result+=""String_Node_Str"";
    }
    result+=parameter.getType().getName() + ""String_Node_Str"" + parameter.getName();
  }
  return result == null ? ""String_Node_Str"" : result;
}","private String paramString(Iterable<Parameter> parameters){
  String result=null;
  for (  Parameter parameter : parameters) {
    if (result == null) {
      result=""String_Node_Str"";
    }
 else {
      result+=""String_Node_Str"";
    }
    result+=parameter.getType().getPrintableName() + ""String_Node_Str"" + parameter.getName();
  }
  return result == null ? ""String_Node_Str"" : result;
}"
86465,"private void printFields(Iterable<Field> fields){
  for (  Field f : fields) {
    println(getKeywords(f.getFlags()) + ""String_Node_Str"" + f.getType().getName()+ ""String_Node_Str""+ f.getName()+ ""String_Node_Str"");
  }
}","private void printFields(Iterable<Field> fields){
  for (  Field f : fields) {
    println(getKeywords(f.getFlags()) + ""String_Node_Str"" + f.getType().getPrintableName()+ ""String_Node_Str""+ f.getName()+ ""String_Node_Str"");
  }
}"
86466,"private void printMethods(FutureType type,String typeName,Iterable<Method> methods){
  for (  Method m : methods) {
    context=new MethodContext(type,m);
    String methodName=m.getName();
    String returnType=m.getReturnType().getName();
    if (methodName.equals(""String_Node_Str"")) {
      println(getKeywords(m.getFlags()) + ""String_Node_Str"" + typeName+ ""String_Node_Str""+ paramString(m.getParameters())+ ""String_Node_Str"");
    }
 else {
      println(getKeywords(m.getFlags()) + ""String_Node_Str"" + returnType+ ""String_Node_Str""+ methodName+ ""String_Node_Str""+ paramString(m.getParameters())+ ""String_Node_Str"");
    }
    incIndent();
    for (    Statement s : m.getStatements()) {
      s.accept(this);
    }
    decIndent();
    println(""String_Node_Str"");
    println();
  }
}","private void printMethods(FutureType type,String typeName,Iterable<Method> methods){
  for (  Method m : methods) {
    context=new MethodContext(type,m);
    String methodName=m.getName();
    String returnType=m.getReturnType().getPrintableName();
    if (methodName.equals(""String_Node_Str"")) {
      println(getKeywords(m.getFlags()) + ""String_Node_Str"" + typeName+ ""String_Node_Str""+ paramString(m.getParameters())+ ""String_Node_Str"");
    }
 else {
      println(getKeywords(m.getFlags()) + ""String_Node_Str"" + returnType+ ""String_Node_Str""+ methodName+ ""String_Node_Str""+ paramString(m.getParameters())+ ""String_Node_Str"");
    }
    incIndent();
    for (    Statement s : m.getStatements()) {
      s.accept(this);
    }
    decIndent();
    println(""String_Node_Str"");
    println();
  }
}"
86467,"public byte[] generate(FutureType futureType){
  ClassNode classNode=new ClassNode();
  classNode.version=Opcodes.V1_6;
  classNode.access=Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER;
  classNode.sourceFile=futureType.getSourceFile();
  classNode.name=futureType.getClassIdentifier();
  classNode.superName=futureType.getExtending().getClassIdentifier();
  List<Field> fields=futureType.getFields();
  for (  Field field : fields) {
    classNode.fields.add(new FieldNode(MethodByteCodeContext.getAccess(field.getFlags()),field.getName(),field.getSignature(),null,null));
  }
  List<Method> constructors=futureType.getConstructors();
  if (constructors.isEmpty()) {
    constructors=Arrays.asList(new Method(futureType.getName(),new MemberFlags(false,PUBLIC),VOID,""String_Node_Str"",new ArrayList<Parameter>(),Arrays.<Statement>asList(new CallConstructorStatement(0,new CallConstructorExpression(Arrays.<Expression>asList())))));
  }
  for (  Method method : constructors) {
    classNode.methods.add(getMethodNode(futureType,method));
  }
  for (  Method method : futureType.getMethods()) {
    classNode.methods.add(getMethodNode(futureType,method));
  }
  ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);
  ClassVisitor cv=new CheckClassAdapter(cw,true);
  classNode.accept(cv);
  return cw.toByteArray();
}","public byte[] generate(FutureType futureType){
  ClassNode classNode=new ClassNode();
  classNode.version=Opcodes.V1_6;
  classNode.access=Opcodes.ACC_PUBLIC | Opcodes.ACC_SUPER;
  classNode.sourceFile=futureType.getSourceFile();
  classNode.name=futureType.getClassIdentifier();
  classNode.superName=futureType.getExtending().getClassIdentifier();
  List<Field> fields=futureType.getFields();
  for (  Field field : fields) {
    classNode.fields.add(new FieldNode(MethodByteCodeContext.getAccess(field.getFlags()),field.getName(),field.getSignature(),null,null));
  }
  List<Method> constructors=futureType.getConstructors();
  if (constructors.isEmpty()) {
    constructors=Arrays.asList(new Method(futureType.getName(),new MemberFlags(false,PUBLIC),VOID,""String_Node_Str"",new ArrayList<Parameter>(),Arrays.<Statement>asList(new CallConstructorStatement(0,new CallConstructorExpression(Arrays.<Expression>asList()))),false));
  }
  for (  Method method : constructors) {
    classNode.methods.add(getMethodNode(futureType,method));
  }
  for (  Method method : futureType.getMethods()) {
    classNode.methods.add(getMethodNode(futureType,method));
  }
  ClassWriter cw=new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);
  ClassVisitor cv=new CheckClassAdapter(cw,true);
  classNode.accept(cv);
  return cw.toByteArray();
}"
86468,abstract public void exec();,abstract public void exec(Iterator<Integer> it);
86469,"private void validate(final MethodContext context,Statement statement){
  StatementVisitor statementVisitor=new StatementVisitor(){
    @Override public void visit(    SetStatement setStatement){
      VarAccessType varTypeToSet=context.getVarAccessType(setStatement.getTo());
      varTypeToSet.accept(new VarAccessTypeVisitor(){
        public void visit(        ParameterAccessType parameterAccessType){
        }
        public void visit(        FieldAccessType fieldAccessType){
        }
      }
);
    }
    public void visit(    ThrowStatement throwStatement){
    }
    public void visit(    CaseStatement caseStatement){
    }
    public void visit(    SwitchStatement switchStatement){
    }
    public void visit(    ExpressionStatement methodCallStatement){
    }
    public void visit(    ReturnStatement returnStatement){
    }
    public void visit(    IfStatement ifStatement){
    }
    @Override public void visit(    LabelStatement labelStatement){
    }
    @Override public void visit(    GotoStatement gotoStatement){
    }
    @Override public void visit(    CallConstructorStatement callConstructorStatement){
    }
  }
;
  statement.accept(statementVisitor);
}","private void validate(final MethodContext context,Statement statement){
  try {
    StatementVisitor statementVisitor=new StatementVisitor(){
      @Override public void visit(      SetStatement setStatement){
        VarAccessType varTypeToSet=context.getVarAccessType(setStatement.getTo());
        varTypeToSet.accept(new VarAccessTypeVisitor(){
          public void visit(          ParameterAccessType parameterAccessType){
          }
          public void visit(          FieldAccessType fieldAccessType){
          }
        }
);
      }
      public void visit(      ThrowStatement throwStatement){
      }
      public void visit(      CaseStatement caseStatement){
      }
      public void visit(      SwitchStatement switchStatement){
      }
      public void visit(      ExpressionStatement methodCallStatement){
      }
      public void visit(      ReturnStatement returnStatement){
      }
      public void visit(      IfStatement ifStatement){
      }
      @Override public void visit(      LabelStatement labelStatement){
      }
      @Override public void visit(      GotoStatement gotoStatement){
      }
      @Override public void visit(      CallConstructorStatement callConstructorStatement){
      }
    }
;
    statement.accept(statementVisitor);
  }
 catch (  RuntimeException e) {
    throw new RuntimeException(""String_Node_Str"" + statement.getLine() + ""String_Node_Str""+ context.getClassIdentifier()+ ""String_Node_Str""+ context.getMethod().getName()+ context.getMethod().getSignature(),e);
  }
}"
86470,"public ClassBuilder endConstructor(){
  return methodHandler.handleMethod(new Method(classIdentifier,new MemberFlags(false,protection),VOID,""String_Node_Str"",parameters,statements));
}","public ClassBuilder endConstructor(){
  return methodHandler.handleMethod(new Method(classIdentifier,new MemberFlags(false,protection),VOID,""String_Node_Str"",parameters,statements,false));
}"
86471,"public ClassBuilder endMethod(){
  return methodHandler.handleMethod(new Method(classIdentifier,memberFlags,returnType,name,parameters,statements));
}","public ClassBuilder endMethod(){
  return methodHandler.handleMethod(new Method(classIdentifier,memberFlags,returnType,name,parameters,statements,false));
}"
86472,"@Override public Method getMethod(String methodName,int parameterCount){
  java.lang.reflect.Method[] declaredMethods=existing.getDeclaredMethods();
  for (  java.lang.reflect.Method method : declaredMethods) {
    Class<?>[] parameterTypes=method.getParameterTypes();
    if (method.getName().equals(methodName) && parameterTypes.length == parameterCount) {
      ArrayList<Parameter> parameters=convertParameters(parameterTypes);
      return new Method(this.getClassIdentifier(),MemberFlags.fromReflection(method),existing(method.getReturnType()),methodName,parameters,new ArrayList<Statement>());
    }
  }
  return null;
}","@Override public Method getMethod(String methodName,int parameterCount){
  java.lang.reflect.Method[] declaredMethods=existing.getDeclaredMethods();
  for (  java.lang.reflect.Method method : declaredMethods) {
    Class<?>[] parameterTypes=method.getParameterTypes();
    if (method.getName().equals(methodName) && parameterTypes.length == parameterCount) {
      ArrayList<Parameter> parameters=convertParameters(parameterTypes);
      return new Method(this.getClassIdentifier(),MemberFlags.fromReflection(method),existing(method.getReturnType()),methodName,parameters,new ArrayList<Statement>(),existing.isInterface());
    }
  }
  if (existing.getSuperclass() != null) {
    return existing(existing.getSuperclass()).getMethod(methodName,parameterCount);
  }
  return null;
}"
86473,"@Override public Method getConstructor(int parameterCount){
  for (  java.lang.reflect.Constructor<?> constructor : existing.getConstructors()) {
    Class<?>[] parameterTypes=constructor.getParameterTypes();
    if (parameterTypes.length == parameterCount) {
      ArrayList<Parameter> parameters=convertParameters(parameterTypes);
      return new Method(this.getClassIdentifier(),MemberFlags.fromReflection(constructor),VOID,""String_Node_Str"",parameters,new ArrayList<Statement>());
    }
  }
  return null;
}","@Override public Method getConstructor(int parameterCount){
  for (  java.lang.reflect.Constructor<?> constructor : existing.getConstructors()) {
    Class<?>[] parameterTypes=constructor.getParameterTypes();
    if (parameterTypes.length == parameterCount) {
      ArrayList<Parameter> parameters=convertParameters(parameterTypes);
      return new Method(this.getClassIdentifier(),MemberFlags.fromReflection(constructor),VOID,""String_Node_Str"",parameters,new ArrayList<Statement>(),false);
    }
  }
  return null;
}"
86474,"public Method(String typeName,MemberFlags memberFlags,Type returnType,String name,List<Parameter> parameters,List<Statement> statements){
  this.typeName=typeName;
  this.memberFlags=memberFlags;
  this.returnType=returnType;
  this.name=name;
  this.parameters=parameters;
  this.statements=statements;
}","public Method(String typeName,MemberFlags memberFlags,Type returnType,String name,List<Parameter> parameters,List<Statement> statements,boolean interfaceMethod){
  this.typeName=typeName;
  this.memberFlags=memberFlags;
  this.returnType=returnType;
  this.name=name;
  this.parameters=parameters;
  this.statements=statements;
  this.interfaceMethod=interfaceMethod;
}"
86475,"@Override public void visit(CastExpression castExpression){
  castExpression.getExpression().accept(this);
  methodByteCodeContext.addInstruction(new TypeInsnNode(CHECKCAST,castExpression.getType().getClassIdentifier()));
  lastExpressionType=castExpression.getType();
}","@Override public void visit(CastExpression castExpression){
  castExpression.getExpression().accept(this);
  methodByteCodeContext.addInstruction(new TypeInsnNode(CHECKCAST,castExpression.getType().getClassIdentifier()),""String_Node_Str"",castExpression.getType());
  lastExpressionType=castExpression.getType();
}"
86476,"@Override public String toString(){
  return ""String_Node_Str"" + getClass().getSimpleName() + ""String_Node_Str""+ getCallee()+ ""String_Node_Str""+ methodName+ ""String_Node_Str""+ parameters+ ""String_Node_Str"";
}","@Override public String toString(){
  return ""String_Node_Str"" + getClass().getSimpleName() + ""String_Node_Str""+ (callee == null ? ""String_Node_Str"" : callee)+ ""String_Node_Str""+ methodName+ ""String_Node_Str""+ parameters+ ""String_Node_Str"";
}"
86477,"@Override public void removeCommand(FactionsCommand cmd){
  try {
    P.p.cmdBase.getClass().getField(""String_Node_Str"").getClass().getMethod(""String_Node_Str"",MCommand.class).invoke(this,wrappers.get(cmd));
  }
 catch (  Exception e) {
    FactionsFramework.get().logError(e);
  }
  wrappers.remove(cmd);
  helpLine.remove(cmd);
  rebuldPages();
}","@Override public void removeCommand(FactionsCommand cmd){
  try {
    P.p.cmdBase.getClass().getField(""String_Node_Str"").getClass().getMethod(""String_Node_Str"",MCommand.class).invoke(P.p.cmdBase,wrappers.get(cmd));
  }
 catch (  Exception e) {
    FactionsFramework.get().logError(e);
  }
  wrappers.remove(cmd);
  helpLine.remove(cmd);
  rebuldPages();
}"
86478,"@SuppressWarnings(""String_Node_Str"") public List<com.massivecraft.factions.Faction> getAllFactions(){
  try {
    return (List<com.massivecraft.factions.Faction>)this.getInstance().getClass().getMethod(""String_Node_Str"").invoke(this);
  }
 catch (  Exception e) {
    FactionsFramework.get().logError(e);
    return null;
  }
}","@SuppressWarnings(""String_Node_Str"") public List<com.massivecraft.factions.Faction> getAllFactions(){
  try {
    return (List<com.massivecraft.factions.Faction>)this.getInstance().getClass().getMethod(""String_Node_Str"").invoke(this.getInstance());
  }
 catch (  Exception e) {
    FactionsFramework.get().logError(e);
    return null;
  }
}"
86479,"public com.massivecraft.factions.Faction getFactionById(String id){
  try {
    return (com.massivecraft.factions.Faction)this.getInstance().getClass().getMethod(""String_Node_Str"",String.class).invoke(this,id);
  }
 catch (  IllegalAccessException|IllegalArgumentException|InvocationTargetException|NoSuchMethodException|SecurityException e) {
    FactionsFramework.get().logError(e);
    return null;
  }
}","public com.massivecraft.factions.Faction getFactionById(String id){
  try {
    return (com.massivecraft.factions.Faction)this.getInstance().getClass().getMethod(""String_Node_Str"",String.class).invoke(this.getInstance(),id);
  }
 catch (  IllegalAccessException|IllegalArgumentException|InvocationTargetException|NoSuchMethodException|SecurityException e) {
    FactionsFramework.get().logError(e);
    return null;
  }
}"
86480,"@SuppressWarnings(""String_Node_Str"") private List<com.massivecraft.factions.Faction> getAllOriginalFactions(){
  try {
    return (List<com.massivecraft.factions.Faction>)this.getInstance().getClass().getMethod(""String_Node_Str"").invoke(this);
  }
 catch (  Exception e) {
    FactionsFramework.get().logError(e);
    return null;
  }
}","@SuppressWarnings(""String_Node_Str"") private ArrayList<com.massivecraft.factions.Faction> getAllOriginalFactions(){
  try {
    return (ArrayList<com.massivecraft.factions.Faction>)this.getInstance().getClass().getMethod(""String_Node_Str"").invoke(this.getInstance());
  }
 catch (  Exception e) {
    FactionsFramework.get().logError(e);
    return null;
  }
}"
86481,"private com.massivecraft.factions.Factions getInstance(){
  try {
    return (com.massivecraft.factions.Factions)Factions.class.getMethod(""String_Node_Str"").invoke(this);
  }
 catch (  Exception e) {
    FactionsPlus.get().logError(e);
    return null;
  }
}","private com.massivecraft.factions.Factions getInstance(){
  if (this.factionsInstance != null)   return factionsInstance;
  try {
    factionsInstance=(com.massivecraft.factions.Factions)com.massivecraft.factions.Factions.class.getMethod(""String_Node_Str"").invoke(this);
  }
 catch (  Exception e) {
    FactionsPlus.get().logError(e);
    return null;
  }
  return factionsInstance;
}"
86482,"public void removeCommand(FCommand fcommand){
  try {
    P.p.cmdBase.getClass().getField(""String_Node_Str"").getClass().getMethod(""String_Node_Str"",MassiveCommand.class).invoke(this,fcommand);
  }
 catch (  Exception e) {
    FactionsFramework.get().logError(e);
  }
}","public void removeCommand(FCommand fcommand){
  this.getSubcommands().remove(fcommand);
}"
86483,"public boolean containsCommand(FCommand fcommand){
  try {
    Boolean result=(Boolean)P.p.cmdBase.getClass().getField(""String_Node_Str"").getClass().getMethod(""String_Node_Str"",MassiveCommand.class).invoke(this,fcommand);
    return result;
  }
 catch (  Exception e) {
    FactionsFramework.get().logError(e);
    return false;
  }
}","public boolean containsCommand(FCommand fcommand){
  return this.getSubcommands().add(fcommand);
}"
86484,"public void addCommand(FCommand fcommand){
  try {
    P.p.cmdBase.getClass().getField(""String_Node_Str"").getClass().getMethod(""String_Node_Str"",MassiveCommand.class).invoke(this,fcommand);
  }
 catch (  Exception e) {
    FactionsFramework.get().logError(e);
  }
}","public void addCommand(FCommand fcommand){
  this.getSubcommands().add(fcommand);
}"
86485,"@Override public void performfp(){
  allLines.clear();
  sm(ChatColor.DARK_PURPLE,""String_Node_Str"" + ChatColor.GREEN + ""String_Node_Str""+ ChatColor.DARK_PURPLE+ ""String_Node_Str"");
  sm(""String_Node_Str"" + (UConf.get(usender).factionPowerMax > 0.0 ? badColor + ""String_Node_Str"" + msgColor1+ UConf.get(usender).factionPowerMax : _goodDONT + ""String_Node_Str"") + ""String_Node_Str"");
  sm(""String_Node_Str"" + num(UConf.get(usender).powerMin) + ""String_Node_Str""+ num(UConf.get(usender).defaultPlayerPower)+ ""String_Node_Str""+ num(UConf.get(usender).powerMax));
  Boolean extraPowerLossGainEnabled=false;
  if (FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str"") > 0 || FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str"") > 0 || FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str"") > 0 || FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str"") > 0 || FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str"") > 0 || FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str"") > 0 || FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str"") > 0 || FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str"") > 0 || FPUConf.get(usender).extraPowerBoosts.get(""String_Node_Str"") > 0 || FPUConf.get(usender).extraPowerBoosts.get(""String_Node_Str"") > 0 || FPUConf.get(usender).extraPowerBoosts.get(""String_Node_Str"") > 0 || FPUConf.get(usender).extraPowerBoosts.get(""String_Node_Str"") > 0 || FPUConf.get(usender).extraPowerBoosts.get(""String_Node_Str"") > 0) {
    extraPowerLossGainEnabled=true;
  }
  sm(""String_Node_Str"" + num(UConf.get(usender).powerPerDeath) + ""String_Node_Str""+ (extraPowerLossGainEnabled ? ""String_Node_Str"" : ""String_Node_Str""));
  if (extraPowerLossGainEnabled) {
    if (FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str"") > 0)     showExtraLoss(FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str""),""String_Node_Str"");
    if (FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str"") > 0)     showExtraLoss(FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str""),""String_Node_Str"");
    if (FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str"") > 0)     showExtraLoss(FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str""),""String_Node_Str"");
    if (FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str"") > 0)     showExtraLoss(FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str""),""String_Node_Str"");
    if (FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str"") > 0)     showExtraLoss(FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str""),""String_Node_Str"");
    if (FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str"") > 0)     showExtraLoss(FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str""),""String_Node_Str"");
    if (FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str"") > 0)     showExtraLoss(FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str""),""String_Node_Str"");
    if (FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str"") > 0)     showExtraLoss(FPUConf.get(usender).extraPowerLoss.get(""String_Node_Str""),""String_Node_Str"");
    if (FPUConf.get(usender).extraPowerBoosts.get(""String_Node_Str"") > 0)     showExtraGain(FPUConf.get(usender).extraPowerBoosts.get(""String_Node_Str""),""String_Node_Str"");
    if (FPUConf.get(usender).extraPowerBoosts.get(""String_Node_Str"") > 0)     showExtraGain(FPUConf.get(usender).extraPowerBoosts.get(""String_Node_Str""),""String_Node_Str"");
    if (FPUConf.get(usender).extraPowerBoosts.get(""String_Node_Str"") > 0)     showExtraGain(FPUConf.get(usender).extraPowerBoosts.get(""String_Node_Str""),""String_Node_Str"");
    if (FPUConf.get(usender).extraPowerBoosts.get(""String_Node_Str"") > 0)     showExtraGain(FPUConf.get(usender).extraPowerBoosts.get(""String_Node_Str""),""String_Node_Str"");
    if (FPUConf.get(usender).extraPowerBoosts.get(""String_Node_Str"") > 0)     showExtraGain(FPUConf.get(usender).extraPowerBoosts.get(""String_Node_Str""),""String_Node_Str"");
  }
  sm(""String_Node_Str"" + num(UConf.get(usender).powerPerHour) + ""String_Node_Str"");
  sm(""String_Node_Str"" + (UConf.get(usender).canLeaveWithNegativePower ? goodColor + ""String_Node_Str"" : badColor + ""String_Node_Str"") + msgColor1+ ""String_Node_Str"");
  if (sender instanceof Player) {
    Player player=(Player)sender;
    UPlayer fplayer=UPlayer.get(player);
    FactionData fdata=FactionDataColls.get().getForUniverse(fplayer.getUniverse()).get(fplayer.getFactionId());
    if (fdata.jailedPlayerIDs.containsKey(player.getUniqueId())) {
      sm(ChatColor.RED + ""String_Node_Str"");
    }
    sm(""String_Node_Str"" + num(fplayer.getPower()));
    boolean noLossWorld=Utilities.noPowerLossWorld(player.getWorld());
    String worldName=ChatColor.GRAY + ""String_Node_Str"" + player.getWorld().getName()+ ""String_Node_Str""+ msgColor1;
    sm(""String_Node_Str"" + (noLossWorld ? _goodDONT : _badDO) + ""String_Node_Str""+ worldName+ ""String_Node_Str""+ (noLossWorld && true ? badColor + ""String_Node_Str"" : (noLossWorld ? ""String_Node_Str"" : ""String_Node_Str""))+ ""String_Node_Str"");
    sm(""String_Node_Str"" + (Utilities.confIs_wildernessPowerLoss(me.getWorld()) ? _badDO : _goodDONT) + ""String_Node_Str""+ Faction.get(""String_Node_Str"").getName()+ (noLossWorld ? msgColor1 + ""String_Node_Str"" + goodColor+ ""String_Node_Str""+ msgColor1+ ""String_Node_Str""+ worldName+ ""String_Node_Str"" : msgColor1 + ""String_Node_Str"" + worldName+ ""String_Node_Str""));
    sm(""String_Node_Str"" + (!PowerBoostSubListener.canLosePowerWherePlayerIsAt(player) ? _goodDONT : _badDO) + ""String_Node_Str"");
  }
  List<String> allowedWarpsIn=new ArrayList<String>();
  if (FPUConf.get(usender).allowWarpsIn.get(""String_Node_Str"")) {
    allowedWarpsIn.add(""String_Node_Str"");
  }
  if (FPUConf.get(usender).allowWarpsIn.get(""String_Node_Str"")) {
    allowedWarpsIn.add(""String_Node_Str"");
  }
  if (FPUConf.get(usender).allowWarpsIn.get(""String_Node_Str"")) {
    allowedWarpsIn.add(""String_Node_Str"");
  }
  if (FPUConf.get(usender).allowWarpsIn.get(""String_Node_Str"")) {
    allowedWarpsIn.add(""String_Node_Str"");
  }
  if (FPUConf.get(usender).allowWarpsIn.get(""String_Node_Str"")) {
    allowedWarpsIn.add(""String_Node_Str"");
  }
  if (FPUConf.get(usender).allowWarpsIn.get(""String_Node_Str"")) {
    allowedWarpsIn.add(""String_Node_Str"");
  }
  if (FPUConf.get(usender).allowWarpsIn.get(""String_Node_Str"")) {
    allowedWarpsIn.add(""String_Node_Str"");
  }
  if (FPUConf.get(usender).allowWarpsIn.get(""String_Node_Str"")) {
    allowedWarpsIn.add(""String_Node_Str"");
  }
  int i=1;
  String warpsMessage=""String_Node_Str"";
  for (  String l : allowedWarpsIn) {
    if (allowedWarpsIn.size() == 1) {
      warpsMessage+=""String_Node_Str"" + l + ""String_Node_Str"";
    }
 else     if (i == allowedWarpsIn.size()) {
      warpsMessage+=""String_Node_Str"" + l + ""String_Node_Str"";
    }
 else {
      warpsMessage+=""String_Node_Str"" + l + ""String_Node_Str"";
    }
    i++;
  }
  if (allowedWarpsIn.size() != 0) {
    sm(warpsMessage);
  }
  sendMessage(Txt.getPage(allLines,this.getArgs().size(),""String_Node_Str""));
}","@Override public void performfp(){
  allLines.clear();
  sm(ChatColor.DARK_PURPLE,""String_Node_Str"" + ChatColor.GREEN + ""String_Node_Str""+ ChatColor.DARK_PURPLE+ ""String_Node_Str"");
  sm(""String_Node_Str"" + (UConf.get(usender).factionPowerMax > 0.0 ? badColor + ""String_Node_Str"" + msgColor1+ UConf.get(usender).factionPowerMax : _goodDONT + ""String_Node_Str"") + ""String_Node_Str"");
  sm(""String_Node_Str"" + num(UConf.get(usender).powerMin) + ""String_Node_Str""+ num(UConf.get(usender).defaultPlayerPower)+ ""String_Node_Str""+ num(UConf.get(usender).powerMax));
  Boolean extraPowerLossGainEnabled=false;
  if (fpuconf.extraPowerLoss.get(""String_Node_Str"") > 0 || fpuconf.extraPowerLoss.get(""String_Node_Str"") > 0 || fpuconf.extraPowerLoss.get(""String_Node_Str"") > 0 || fpuconf.extraPowerLoss.get(""String_Node_Str"") > 0 || fpuconf.extraPowerLoss.get(""String_Node_Str"") > 0 || fpuconf.extraPowerLoss.get(""String_Node_Str"") > 0 || fpuconf.extraPowerLoss.get(""String_Node_Str"") > 0 || fpuconf.extraPowerLoss.get(""String_Node_Str"") > 0 || fpuconf.extraPowerBoosts.get(""String_Node_Str"") > 0 || fpuconf.extraPowerBoosts.get(""String_Node_Str"") > 0 || fpuconf.extraPowerBoosts.get(""String_Node_Str"") > 0 || fpuconf.extraPowerBoosts.get(""String_Node_Str"") > 0 || fpuconf.extraPowerBoosts.get(""String_Node_Str"") > 0) {
    extraPowerLossGainEnabled=true;
  }
  sm(""String_Node_Str"" + num(UConf.get(usender).powerPerDeath) + ""String_Node_Str""+ (extraPowerLossGainEnabled ? ""String_Node_Str"" : ""String_Node_Str""));
  if (extraPowerLossGainEnabled) {
    if (fpuconf.extraPowerLoss.get(""String_Node_Str"") > 0)     showExtraLoss(fpuconf.extraPowerLoss.get(""String_Node_Str""),""String_Node_Str"");
    if (fpuconf.extraPowerLoss.get(""String_Node_Str"") > 0)     showExtraLoss(fpuconf.extraPowerLoss.get(""String_Node_Str""),""String_Node_Str"");
    if (fpuconf.extraPowerLoss.get(""String_Node_Str"") > 0)     showExtraLoss(fpuconf.extraPowerLoss.get(""String_Node_Str""),""String_Node_Str"");
    if (fpuconf.extraPowerLoss.get(""String_Node_Str"") > 0)     showExtraLoss(fpuconf.extraPowerLoss.get(""String_Node_Str""),""String_Node_Str"");
    if (fpuconf.extraPowerLoss.get(""String_Node_Str"") > 0)     showExtraLoss(fpuconf.extraPowerLoss.get(""String_Node_Str""),""String_Node_Str"");
    if (fpuconf.extraPowerLoss.get(""String_Node_Str"") > 0)     showExtraLoss(fpuconf.extraPowerLoss.get(""String_Node_Str""),""String_Node_Str"");
    if (fpuconf.extraPowerLoss.get(""String_Node_Str"") > 0)     showExtraLoss(fpuconf.extraPowerLoss.get(""String_Node_Str""),""String_Node_Str"");
    if (fpuconf.extraPowerLoss.get(""String_Node_Str"") > 0)     showExtraLoss(fpuconf.extraPowerLoss.get(""String_Node_Str""),""String_Node_Str"");
    if (fpuconf.extraPowerBoosts.get(""String_Node_Str"") > 0)     showExtraGain(fpuconf.extraPowerBoosts.get(""String_Node_Str""),""String_Node_Str"");
    if (fpuconf.extraPowerBoosts.get(""String_Node_Str"") > 0)     showExtraGain(fpuconf.extraPowerBoosts.get(""String_Node_Str""),""String_Node_Str"");
    if (fpuconf.extraPowerBoosts.get(""String_Node_Str"") > 0)     showExtraGain(fpuconf.extraPowerBoosts.get(""String_Node_Str""),""String_Node_Str"");
    if (fpuconf.extraPowerBoosts.get(""String_Node_Str"") > 0)     showExtraGain(fpuconf.extraPowerBoosts.get(""String_Node_Str""),""String_Node_Str"");
    if (fpuconf.extraPowerBoosts.get(""String_Node_Str"") > 0)     showExtraGain(fpuconf.extraPowerBoosts.get(""String_Node_Str""),""String_Node_Str"");
  }
  sm(""String_Node_Str"" + num(UConf.get(usender).powerPerHour) + ""String_Node_Str"");
  sm(""String_Node_Str"" + (UConf.get(usender).canLeaveWithNegativePower ? goodColor + ""String_Node_Str"" : badColor + ""String_Node_Str"") + msgColor1+ ""String_Node_Str"");
  if (sender instanceof Player) {
    Player player=(Player)sender;
    UPlayer fplayer=UPlayer.get(player);
    FactionData fdata=FactionDataColls.get().getForUniverse(fplayer.getUniverse()).get(fplayer.getFactionId());
    UConf uconf=UConf.get(fplayer);
    if (fdata.jailedPlayerIDs.containsKey(player.getUniqueId())) {
      sm(ChatColor.RED + ""String_Node_Str"");
    }
    sm(""String_Node_Str"" + num(fplayer.getPower()));
    boolean noLossWorld=uconf.powerPerDeath == 0.0;
    String worldName=ChatColor.GRAY + ""String_Node_Str"" + player.getWorld().getName()+ ""String_Node_Str""+ msgColor1;
    sm(""String_Node_Str"" + (noLossWorld ? _goodDONT : _badDO) + ""String_Node_Str""+ worldName+ ""String_Node_Str""+ (noLossWorld ? badColor + ""String_Node_Str"" : (noLossWorld && Faction.get(uconf.factionIdWarzone).getFlag(FFlag.POWERLOSS) ? badColor + ""String_Node_Str"" : (noLossWorld ? ""String_Node_Str"" : ""String_Node_Str"")) + ""String_Node_Str""));
    sm(""String_Node_Str"" + (Faction.get(uconf.factionIdNone).getFlag(FFlag.POWERLOSS) ? _badDO : _goodDONT) + ""String_Node_Str""+ Faction.get(""String_Node_Str"").getName()+ (noLossWorld ? msgColor1 + ""String_Node_Str"" + goodColor+ ""String_Node_Str""+ msgColor1+ ""String_Node_Str""+ worldName+ ""String_Node_Str"" : msgColor1 + ""String_Node_Str"" + worldName+ ""String_Node_Str""));
    sm(""String_Node_Str"" + (!PowerBoostSubListener.canLosePowerWherePlayerIsAt(player) ? _goodDONT : _badDO) + ""String_Node_Str"");
  }
  List<String> allowedWarpsIn=new ArrayList<String>();
  if (fpuconf.allowWarpsIn.get(""String_Node_Str"")) {
    allowedWarpsIn.add(""String_Node_Str"");
  }
  if (fpuconf.allowWarpsIn.get(""String_Node_Str"")) {
    allowedWarpsIn.add(""String_Node_Str"");
  }
  if (fpuconf.allowWarpsIn.get(""String_Node_Str"")) {
    allowedWarpsIn.add(""String_Node_Str"");
  }
  if (fpuconf.allowWarpsIn.get(""String_Node_Str"")) {
    allowedWarpsIn.add(""String_Node_Str"");
  }
  if (fpuconf.allowWarpsIn.get(""String_Node_Str"")) {
    allowedWarpsIn.add(""String_Node_Str"");
  }
  if (fpuconf.allowWarpsIn.get(""String_Node_Str"")) {
    allowedWarpsIn.add(""String_Node_Str"");
  }
  if (fpuconf.allowWarpsIn.get(""String_Node_Str"")) {
    allowedWarpsIn.add(""String_Node_Str"");
  }
  if (fpuconf.allowWarpsIn.get(""String_Node_Str"")) {
    allowedWarpsIn.add(""String_Node_Str"");
  }
  int i=1;
  String warpsMessage=""String_Node_Str"";
  for (  String l : allowedWarpsIn) {
    if (allowedWarpsIn.size() == 1) {
      warpsMessage+=""String_Node_Str"" + l + ""String_Node_Str"";
    }
 else     if (i == allowedWarpsIn.size()) {
      warpsMessage+=""String_Node_Str"" + l + ""String_Node_Str"";
    }
 else {
      warpsMessage+=""String_Node_Str"" + l + ""String_Node_Str"";
    }
    i++;
  }
  if (allowedWarpsIn.size() != 0) {
    sm(warpsMessage);
  }
  sendMessage(Txt.getPage(allLines,this.getArgs().size(),""String_Node_Str""));
}"
86486,"@Override public void performfp(){
  if (!FPUConf.get(usender.getUniverse()).whoCanAnnounce.get(usender.getRole())) {
    msg(Txt.parse(LConf.get().announcementNotHighEnoughRankingToSet));
    return;
  }
  if (FPUConf.get(usender.getUniverse()).economyCost.get(""String_Node_Str"") > 0.0) {
    if (!Utilities.doCharge(FPUConf.get(usender.getUniverse()).economyCost.get(""String_Node_Str""),usender)) {
      msg(Txt.parse(LConf.get().announcementCanNotAfford,FPUConf.get(usender.getUniverse()).economyCost.get(""String_Node_Str"")));
      return;
    }
  }
  String message=Txt.implode(args,""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
  FactionData fData=FactionDataColls.get().getForUniverse(usender.getUniverse()).get(usenderFaction.getId());
  fData.announcement=message;
  if (FPUConf.get(usender.getUniverse()).allowColoursInAnnouncements) {
    message=Txt.parse(message);
  }
  usenderFaction.msg(Txt.parse(LConf.get().announcementNotify,sender.getName(),message));
}","@Override public void performfp(){
  if (!FPUConf.get(usender.getUniverse()).whoCanAnnounce.get(usender.getRole())) {
    msg(Txt.parse(LConf.get().announcementNotHighEnoughRankingToSet));
    return;
  }
  if (FPUConf.get(usender.getUniverse()).economyCost.get(""String_Node_Str"") > 0.0) {
    if (!Utilities.doCharge(FPUConf.get(usender.getUniverse()).economyCost.get(""String_Node_Str""),usender)) {
      msg(Txt.parse(LConf.get().announcementCanNotAfford,FPUConf.get(usender.getUniverse()).economyCost.get(""String_Node_Str"")));
      return;
    }
  }
  String message=Txt.implode(args,""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
  FactionData fData=FactionDataColls.get().getForUniverse(usender.getUniverse()).get(usenderFaction.getId());
  fData.announcement=message;
  fData.announcer=me.getName();
  if (FPUConf.get(usender.getUniverse()).allowColoursInAnnouncements) {
    message=Txt.parse(message);
  }
  usenderFaction.msg(Txt.parse(LConf.get().announcementNotify,sender.getName(),message));
}"
86487,"/** 
 * Validate the password of a warp, returns true if it is valid. 
 * @param name
 * @param pass
 * @return
 */
public boolean warpValidatePassword(String name,String pass){
  if (!warpHasPassword(name.toLowerCase())) {
    return true;
  }
  if (warpPasswords.get(name.toLowerCase()) == pass) {
    return true;
  }
  return false;
}","/** 
 * Validate the password of a warp, returns true if it is valid. 
 * @param name
 * @param pass
 * @return
 */
public boolean warpValidatePassword(String name,String pass){
  if (!warpHasPassword(name.toLowerCase())) {
    return true;
  }
  if (warpPasswords.get(name.toLowerCase()).equals(pass)) {
    return true;
  }
  return false;
}"
86488,"@Override public void performfp(){
  String warpname=this.arg(0);
  if (!FP.permission.has(sender,""String_Node_Str"")) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (Config._warps.canSetOrRemoveWarps(usender)) {
    msg(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  try {
    boolean found=false;
    File currentWarpFile=new File(Config.folderWarps,usender.getFactionId());
    File currentWarpFileTMP=new File(Config.folderWarps,usender.getFactionId() + ""String_Node_Str"");
    FileReader fr=null;
    Scanner scanner=null;
    try {
      fr=new FileReader(currentWarpFile);
      scanner=new Scanner(fr);
      while (scanner.hasNextLine()) {
        String[] warp=scanner.nextLine().split(""String_Node_Str"");
        if ((warp.length < 1) || (!warp[0].equalsIgnoreCase(warpname))) {
          continue;
        }
        found=true;
        break;
      }
    }
  finally {
      if (null != scanner) {
        scanner.close();
      }
      if (null != fr) {
        try {
          fr.close();
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
    if (!found) {
      return;
    }
    if (Config._economy.costToDeleteWarp._ > 0.0d && Config._economy.isHooked()) {
      if (!Utilities.doFinanceCrap(Config._economy.costToDeleteWarp._,""String_Node_Str"",usender)) {
        return;
      }
    }
    PrintWriter wrt=null;
    BufferedReader rdr=null;
    try {
      wrt=new PrintWriter(new FileWriter(currentWarpFileTMP));
      rdr=new BufferedReader(new FileReader(currentWarpFile));
      String line;
      while ((line=rdr.readLine()) != null) {
        String[] warp=line.split(""String_Node_Str"");
        if ((warp.length >= 1) && (warp[0].equalsIgnoreCase(warpname))) {
          continue;
        }
        wrt.println(line);
      }
    }
  finally {
      if (null != rdr) {
        try {
          rdr.close();
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (null != wrt) {
        wrt.close();
      }
    }
    if (!currentWarpFile.delete()) {
      FPP.severe(""String_Node_Str"" + currentWarpFile.getName());
      return;
    }
    if (!currentWarpFileTMP.renameTo(currentWarpFile)) {
      FPP.severe(""String_Node_Str"" + currentWarpFileTMP.getName() + ""String_Node_Str""+ currentWarpFile.getName());
      return;
    }
  }
 catch (  Exception e) {
    FPP.info(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return;
  }
  String[] warped_removed_args={warpname};
  msg(FactionsPlusTemplates.Go(""String_Node_Str"",warped_removed_args));
}","@Override public void performfp(){
  String warpname=this.arg(0);
  if (!FP.permission.has(sender,""String_Node_Str"")) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (!Section_Warps.canSetOrRemoveWarps(usender)) {
    msg(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  try {
    boolean found=false;
    File currentWarpFile=new File(Config.folderWarps,usender.getFactionId());
    File currentWarpFileTMP=new File(Config.folderWarps,usender.getFactionId() + ""String_Node_Str"");
    FileReader fr=null;
    Scanner scanner=null;
    try {
      fr=new FileReader(currentWarpFile);
      scanner=new Scanner(fr);
      while (scanner.hasNextLine()) {
        String[] warp=scanner.nextLine().split(""String_Node_Str"");
        if ((warp.length < 1) || (!warp[0].equalsIgnoreCase(warpname))) {
          continue;
        }
        found=true;
        break;
      }
    }
  finally {
      if (null != scanner) {
        scanner.close();
      }
      if (null != fr) {
        try {
          fr.close();
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
    if (!found) {
      return;
    }
    if (Config._economy.costToDeleteWarp._ > 0.0d && Config._economy.isHooked()) {
      if (!Utilities.doFinanceCrap(Config._economy.costToDeleteWarp._,""String_Node_Str"",usender)) {
        return;
      }
    }
    PrintWriter wrt=null;
    BufferedReader rdr=null;
    try {
      wrt=new PrintWriter(new FileWriter(currentWarpFileTMP));
      rdr=new BufferedReader(new FileReader(currentWarpFile));
      String line;
      while ((line=rdr.readLine()) != null) {
        String[] warp=line.split(""String_Node_Str"");
        if ((warp.length >= 1) && (warp[0].equalsIgnoreCase(warpname))) {
          continue;
        }
        wrt.println(line);
      }
    }
  finally {
      if (null != rdr) {
        try {
          rdr.close();
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
      if (null != wrt) {
        wrt.close();
      }
    }
    if (!currentWarpFile.delete()) {
      FPP.severe(""String_Node_Str"" + currentWarpFile.getName());
      return;
    }
    if (!currentWarpFileTMP.renameTo(currentWarpFile)) {
      FPP.severe(""String_Node_Str"" + currentWarpFileTMP.getName() + ""String_Node_Str""+ currentWarpFile.getName());
      return;
    }
  }
 catch (  Exception e) {
    FPP.info(""String_Node_Str"" + e.getMessage());
    e.printStackTrace();
    return;
  }
  String[] warped_removed_args={warpname};
  msg(FactionsPlusTemplates.Go(""String_Node_Str"",warped_removed_args));
}"
86489,"@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onFactionDisband(FactionsEventDisband e){
  if (Config._extras._scoreboards.showScoreboardOfFactions._) {
    if (FactionsPlusScoreboard.scoreBoard.getObjective(FactionsPlusScoreboard.objective_name) == null) {
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
    }
  }
}","@EventHandler(priority=EventPriority.NORMAL) public void onFactionDisband(FactionsEventDisband e){
  if (Config._extras._scoreboards.showScoreboardOfFactions._) {
    if (FactionsPlusScoreboard.scoreBoard.getObjective(FactionsPlusScoreboard.objective_name) == null) {
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
    }
  }
}"
86490,"@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onFactionNameChange(FactionsEventNameChange e){
  if (Config._extras._scoreboards.showScoreboardOfFactions._) {
    if (FactionsPlusScoreboard.scoreBoard.getObjective(FactionsPlusScoreboard.objective_name) == null) {
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
    }
  }
}","@EventHandler(priority=EventPriority.NORMAL) public void onFactionNameChange(FactionsEventNameChange e){
  if (Config._extras._scoreboards.showScoreboardOfFactions._) {
    if (FactionsPlusScoreboard.scoreBoard.getObjective(FactionsPlusScoreboard.objective_name) == null) {
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
      try {
        FactionsPlusScoreboard.sFactions.remove(""String_Node_Str"" + ""String_Node_Str"" + e.getFaction().getName());
      }
 catch (      Exception exc) {
      }
    }
  }
}"
86491,"@EventHandler(ignoreCancelled=true) public void onPlayerMilkEvent(PlayerInteractEntityEvent event){
  Player player=event.getPlayer();
  if (((event.getRightClicked() instanceof Cow && player.getItemInHand().getType().equals(Material.BUCKET) || (event.getRightClicked() instanceof MushroomCow && player.getItemInHand().getType().equals(Material.BOWL)))) && Config._extras._protection.stricterFarmingProtection._) {
    UPlayer uPlayer=UPlayer.get(player);
    Faction factionAt=BoardColls.get().getFactionAt(PS.valueOf(player.getLocation()));
    if (factionAt != uPlayer.getFaction() && !factionAt.isNone() && FType.valueOf(factionAt) != FType.SAFEZONE) {
      event.setCancelled(true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Faction factionAtCow=BoardColls.get().getFactionAt(PS.valueOf(event.getRightClicked().getLocation()));
    if (factionAtCow != uPlayer.getFaction() && !factionAtCow.isNone() && FType.valueOf(factionAtCow) != FType.SAFEZONE) {
      event.setCancelled(true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
}","@EventHandler(priority=EventPriority.NORMAL) public void onPlayerMilkEvent(PlayerInteractEntityEvent event){
  Player player=event.getPlayer();
  if (((event.getRightClicked() instanceof Cow && player.getItemInHand().getType().equals(Material.BUCKET) || (event.getRightClicked() instanceof MushroomCow && player.getItemInHand().getType().equals(Material.BOWL)))) && Config._extras._protection.stricterFarmingProtection._) {
    UPlayer uPlayer=UPlayer.get(player);
    Faction factionAt=BoardColls.get().getFactionAt(PS.valueOf(player.getLocation()));
    if (factionAt != uPlayer.getFaction() && !factionAt.isNone() && FType.valueOf(factionAt) != FType.SAFEZONE) {
      event.setCancelled(true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Faction factionAtCow=BoardColls.get().getFactionAt(PS.valueOf(event.getRightClicked().getLocation()));
    if (factionAtCow != uPlayer.getFaction() && !factionAtCow.isNone() && FType.valueOf(factionAtCow) != FType.SAFEZONE) {
      event.setCancelled(true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
}"
86492,"@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onPlayerThrowPotion(ProjectileLaunchEvent event){
  if (!(event.getEntity() instanceof Player)) {
    return;
  }
  if ((event.getEntityType() == EntityType.SPLASH_POTION) && (((Player)event.getEntity().getShooter()).isFlying()) && !Config._extras._Flight.allowSplashPotionsWhileFlying._) {
    ((Player)event.getEntity().getShooter()).sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
  }
}","@EventHandler(priority=EventPriority.NORMAL) public void onPlayerThrowPotion(ProjectileLaunchEvent event){
  if (!(event.getEntity() instanceof Player)) {
    return;
  }
  if ((event.getEntityType() == EntityType.SPLASH_POTION) && (((Player)event.getEntity().getShooter()).isFlying()) && !Config._extras._Flight.allowSplashPotionsWhileFlying._) {
    ((Player)event.getEntity().getShooter()).sendMessage(ChatColor.RED + ""String_Node_Str"");
    event.setCancelled(true);
  }
}"
86493,"@EventHandler(ignoreCancelled=true) public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  Player player=event.getPlayer();
  Entity currentEntity=event.getRightClicked();
  if ((event.getRightClicked() instanceof Horse && player.getItemInHand().getType().equals(Material.LEASH)) || event.getRightClicked() instanceof Pig || event.getRightClicked() instanceof Horse) {
    Faction entityAt=BoardColls.get().getFactionAt(PS.valueOf(currentEntity.getLocation()));
    if (entityAt.getId() != UPlayer.get(player).getFaction().getId() && FType.valueOf(entityAt) == FType.FACTION) {
      player.sendMessage(""String_Node_Str"");
      player.updateInventory();
    }
  }
}","@EventHandler(priority=EventPriority.NORMAL) public void onPlayerInteractEntity(PlayerInteractEntityEvent event){
  Player player=event.getPlayer();
  Entity currentEntity=event.getRightClicked();
  if ((event.getRightClicked() instanceof Horse && player.getItemInHand().getType().equals(Material.LEASH)) || event.getRightClicked() instanceof Pig || event.getRightClicked() instanceof Horse) {
    Faction entityAt=BoardColls.get().getFactionAt(PS.valueOf(currentEntity.getLocation()));
    if (entityAt.getId() != UPlayer.get(player).getFaction().getId() && FType.valueOf(entityAt) == FType.FACTION) {
      player.sendMessage(""String_Node_Str"");
      player.updateInventory();
    }
  }
}"
86494,"@EventHandler(ignoreCancelled=true) public void onEntityDamage(EntityDamageEvent event){
  if (event.getEntity() instanceof Player) {
    Player p=(Player)event.getEntity();
    Faction factionAt=BoardColls.get().getFactionAt(PS.valueOf(p.getLocation()));
    if (FType.valueOf(factionAt) == FType.SAFEZONE && Config._extras._protection.safeZonesExtraSafe._) {
      event.setCancelled(true);
    }
  }
}","@EventHandler(priority=EventPriority.NORMAL) public void onEntityDamage(EntityDamageEvent event){
  if (event.getEntity() instanceof Player) {
    Player p=(Player)event.getEntity();
    Faction factionAt=BoardColls.get().getFactionAt(PS.valueOf(p.getLocation()));
    if (FType.valueOf(factionAt) == FType.SAFEZONE && Config._extras._protection.safeZonesExtraSafe._) {
      event.setCancelled(true);
    }
  }
}"
86495,"@EventHandler(ignoreCancelled=true) public void onPlayerMove(PlayerMoveEvent event){
  if (FP.permission.has(event.getPlayer(),""String_Node_Str"")) {
    if (BoardColls.get().getFactionAt(PS.valueOf(event.getPlayer().getLocation())).getId() == UPlayer.get(event.getPlayer()).getFactionId()) {
      event.getPlayer().setAllowFlight(true);
    }
 else {
      event.getPlayer().setAllowFlight(false);
    }
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void onPlayerMove(PlayerMoveEvent event){
  if (FP.permission.has(event.getPlayer(),""String_Node_Str"")) {
    if (BoardColls.get().getFactionAt(PS.valueOf(event.getPlayer().getLocation())).getId() == UPlayer.get(event.getPlayer()).getFactionId()) {
      event.getPlayer().setAllowFlight(true);
    }
 else {
      event.getPlayer().setAllowFlight(false);
    }
  }
}"
86496,"@EventHandler(priority=EventPriority.NORMAL,ignoreCancelled=true) public void onPlayerBowShoot(EntityShootBowEvent event){
  if (!Config._extras._Flight.allowAttackingWhileFlying._) {
    if ((event.getEntity() instanceof Player)) {
      Player player=(Player)event.getEntity();
      if (player.isFlying()) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        event.setCancelled(true);
      }
    }
  }
}","@EventHandler(priority=EventPriority.NORMAL) public void onPlayerBowShoot(EntityShootBowEvent event){
  if (!Config._extras._Flight.allowAttackingWhileFlying._) {
    if ((event.getEntity() instanceof Player)) {
      Player player=(Player)event.getEntity();
      if (player.isFlying()) {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        event.setCancelled(true);
      }
    }
  }
}"
86497,"@EventHandler(ignoreCancelled=true) public void onPlayerCreateFaction(FactionsEventCreate event){
  if (Config._factions.factionNameFirstLetterForceUpperCase._) {
    String upperFactionName=Character.toUpperCase(event.getFactionName().charAt(0)) + event.getFactionName().substring(1);
    Faction wFaction=Faction.get(event.getFactionId());
    wFaction.setName(upperFactionName);
  }
}","@EventHandler(priority=EventPriority.NORMAL) public void onPlayerCreateFaction(FactionsEventCreate event){
  if (Config._factions.factionNameFirstLetterForceUpperCase._) {
    String upperFactionName=Character.toUpperCase(event.getFactionName().charAt(0)) + event.getFactionName().substring(1);
    Faction wFaction=Faction.get(event.getFactionId());
    wFaction.setName(upperFactionName);
  }
}"
86498,"@EventHandler(ignoreCancelled=true) public void onPlayerFish(PlayerFishEvent event){
  if (Config._extras._protection.stricterFarmingProtection._) {
    Player player=event.getPlayer();
    UPlayer uPlayer=UPlayer.get(player);
    Faction factionAt=BoardColls.get().getFactionAt(PS.valueOf(player.getLocation()));
    if (factionAt != uPlayer.getFaction() && !factionAt.isNone() && FType.valueOf(factionAt) != FType.SAFEZONE) {
      event.setCancelled(true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Faction factionAtHook=BoardColls.get().getFactionAt(PS.valueOf(event.getHook().getLocation()));
    if (factionAtHook != uPlayer.getFaction() && !factionAtHook.isNone() && FType.valueOf(factionAt) != FType.SAFEZONE) {
      event.setCancelled(true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}","@EventHandler(priority=EventPriority.NORMAL) public void onPlayerFish(PlayerFishEvent event){
  if (Config._extras._protection.stricterFarmingProtection._) {
    Player player=event.getPlayer();
    UPlayer uPlayer=UPlayer.get(player);
    Faction factionAt=BoardColls.get().getFactionAt(PS.valueOf(player.getLocation()));
    if (factionAt != uPlayer.getFaction() && !factionAt.isNone() && FType.valueOf(factionAt) != FType.SAFEZONE) {
      event.setCancelled(true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Faction factionAtHook=BoardColls.get().getFactionAt(PS.valueOf(event.getHook().getLocation()));
    if (factionAtHook != uPlayer.getFaction() && !factionAtHook.isNone() && FType.valueOf(factionAt) != FType.SAFEZONE) {
      event.setCancelled(true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}"
86499,"@EventHandler(ignoreCancelled=true) public void onPlayerShearEntityEvent(PlayerShearEntityEvent event){
  if (event.getEntity() instanceof Sheep && Config._extras._protection.stricterFarmingProtection._) {
    Player player=event.getPlayer();
    UPlayer uPlayer=UPlayer.get(player);
    Faction factionAt=BoardColls.get().getFactionAt(PS.valueOf(player.getLocation()));
    if (factionAt != uPlayer.getFaction() && !factionAt.isNone()) {
      event.setCancelled(true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Faction factionAtSheep=BoardColls.get().getFactionAt(PS.valueOf(event.getEntity().getLocation()));
    if (factionAtSheep != uPlayer.getFaction() && !factionAtSheep.isNone() && FType.valueOf(factionAtSheep) != FType.SAFEZONE) {
      event.setCancelled(true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}","@EventHandler(priority=EventPriority.NORMAL) public void onPlayerShearEntityEvent(PlayerShearEntityEvent event){
  if (event.getEntity() instanceof Sheep && Config._extras._protection.stricterFarmingProtection._) {
    Player player=event.getPlayer();
    UPlayer uPlayer=UPlayer.get(player);
    Faction factionAt=BoardColls.get().getFactionAt(PS.valueOf(player.getLocation()));
    if (factionAt != uPlayer.getFaction() && !factionAt.isNone()) {
      event.setCancelled(true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
    Faction factionAtSheep=BoardColls.get().getFactionAt(PS.valueOf(event.getEntity().getLocation()));
    if (factionAtSheep != uPlayer.getFaction() && !factionAtSheep.isNone() && FType.valueOf(factionAtSheep) != FType.SAFEZONE) {
      event.setCancelled(true);
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}"
86500,"@EventHandler(ignoreCancelled=true) public void onLandClaim(FactionsEventChunkChange event){
  if (Config._extras._protection.worldguardCanBuildCheck._) {
    if (!event.getUSender().getFaction().isNone() && !event.getUSender().isUsingAdminMode() && !event.getUSender().getPlayer().isOp()&& !FP.permission.has(event.getUSender().getPlayer(),""String_Node_Str"")) {
      if (Bukkit.getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        if (FP.worldGuardPlugin != null) {
          if (Utilities.checkForRegionsInChunk(event.getUSender().getPlayer().getLocation())) {
            event.setCancelled(true);
            event.getUSender().msg(ChatColor.RED + ""String_Node_Str"");
          }
        }
      }
    }
  }
}","@EventHandler(priority=EventPriority.MONITOR) public void onLandClaim(FactionsEventChunkChange event){
  if (Config._extras._protection.worldguardCanBuildCheck._) {
    if (event.getUSender() == null)     return;
    if (!event.getUSender().getFaction().isNone() && !event.getUSender().isUsingAdminMode() && !event.getUSender().getPlayer().isOp()&& FactionsPlus.permission.has(event.getUSender().getPlayer(),""String_Node_Str"")) {
      if (Bukkit.getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        if (FP.worldGuardPlugin != null) {
          if (Utilities.checkForRegionsInChunk(event.getUSender().getPlayer().getLocation())) {
            event.setCancelled(true);
            event.getUSender().msg(ChatColor.RED + ""String_Node_Str"");
          }
        }
      }
    }
  }
}"
86501,"@EventHandler(ignoreCancelled=true) public void onVillagerTrade(InventoryClickEvent event){
  if (event.getWhoClicked() == null) {
    return;
  }
  if (event.getWhoClicked() instanceof Player) {
    UPlayer uPlayer=UPlayer.get(event.getWhoClicked());
    if (uPlayer == null) {
      return;
    }
    if (event.getInventory().getType() == InventoryType.MERCHANT && !uPlayer.isUsingAdminMode()) {
      Faction factionAt=BoardColls.get().getFactionAt(PS.valueOf(uPlayer.getPlayer().getLocation()));
      if (factionAt != uPlayer.getFaction() && !factionAt.isNone() && FType.valueOf(factionAt) != FType.SAFEZONE) {
        event.setCancelled(true);
        uPlayer.msg(ChatColor.RED + ""String_Node_Str"");
        return;
      }
    }
  }
}","@EventHandler(priority=EventPriority.NORMAL) public void onVillagerTrade(InventoryClickEvent event){
  if (event.getWhoClicked() == null) {
    return;
  }
  if (event.getWhoClicked() instanceof Player) {
    UPlayer uPlayer=UPlayer.get(event.getWhoClicked());
    if (uPlayer == null) {
      return;
    }
    if (event.getInventory().getType() == InventoryType.MERCHANT && !uPlayer.isUsingAdminMode()) {
      Faction factionAt=BoardColls.get().getFactionAt(PS.valueOf(uPlayer.getPlayer().getLocation()));
      if (factionAt != uPlayer.getFaction() && !factionAt.isNone() && FType.valueOf(factionAt) != FType.SAFEZONE) {
        event.setCancelled(true);
        uPlayer.msg(ChatColor.RED + ""String_Node_Str"");
        return;
      }
    }
  }
}"
86502,"@EventHandler(ignoreCancelled=true) public void onLandClaim(FactionsEventChunkChange event){
  if (Config._extras._protection.worldguardCanBuildCheck._) {
    if (!event.getNewFaction().isNone() && !event.getUSender().isUsingAdminMode() && !event.getUSender().getPlayer().isOp()&& !FP.permission.has(event.getUSender().getPlayer(),""String_Node_Str"")) {
      if (Bukkit.getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        if (FP.worldGuardPlugin != null) {
          if (Utilities.checkForRegionsInChunk(event.getUSender().getPlayer().getLocation())) {
            event.setCancelled(true);
            event.getUSender().msg(ChatColor.RED + ""String_Node_Str"");
          }
        }
      }
    }
  }
}","@EventHandler(ignoreCancelled=true) public void onLandClaim(FactionsEventChunkChange event){
  if (Config._extras._protection.worldguardCanBuildCheck._) {
    if (!event.getUSender().getFaction().isNone() && !event.getUSender().isUsingAdminMode() && !event.getUSender().getPlayer().isOp()&& !FP.permission.has(event.getUSender().getPlayer(),""String_Node_Str"")) {
      if (Bukkit.getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        if (FP.worldGuardPlugin != null) {
          if (Utilities.checkForRegionsInChunk(event.getUSender().getPlayer().getLocation())) {
            event.setCancelled(true);
            event.getUSender().msg(ChatColor.RED + ""String_Node_Str"");
          }
        }
      }
    }
  }
}"
86503,"public final static Location getHomeForPlayer(Player player,String homeName) throws Exception {
  checkInvariants();
  try {
    return (getEssentialsInstance().getUser(player).getHome(homeName));
  }
 catch (  InvalidWorldException e) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + homeName+ ""String_Node_Str""+ e.getWorld()+ ""String_Node_Str"");
    return (null);
  }
}","public final static Location getHomeForPlayer(Player player,String homeName) throws Exception {
  checkInvariants();
  try {
    return (getEssentialsInstance().getUser(player).getHome(homeName));
  }
 catch (  Exception e) {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"" + homeName+ ""String_Node_Str""+ player.getWorld()+ ""String_Node_Str"");
    return (null);
  }
}"
86504,"public static Location getSafeDestination(Location targetLocation){
  if (isHooked()) {
    try {
      return LocationUtil.getSafeDestination(targetLocation);
    }
 catch (    Exception e) {
      FP.severe(""String_Node_Str"");
      return (targetLocation);
    }
  }
 else {
    return targetLocation;
  }
}","public static Location getSafeDestination(Location targetLocation){
  if (isHooked()) {
    try {
      return Util.getSafeDestination(targetLocation);
    }
 catch (    Exception e) {
      FP.severe(""String_Node_Str"");
      return (targetLocation);
    }
  }
 else {
    return targetLocation;
  }
}"
86505,"@SuppressWarnings(""String_Node_Str"") public static boolean handleTeleport(Player player,Location loc){
  if (!isHooked()) {
    return false;
  }
  try {
    Teleport teleport=(Teleport)getEssentialsInstance().getUser(player).getTeleport();
    Trade trade=new Trade((int)UConf.get(player).econCostHome,(net.ess3.api.IEssentials)getEssentialsInstance());
    new Trade(0,null);
    teleport.teleport(loc,trade,TeleportCause.PLUGIN);
  }
 catch (  Exception e) {
    player.sendMessage(ChatColor.RED.toString() + e.getMessage());
    return false;
  }
  return true;
}","@SuppressWarnings(""String_Node_Str"") public static boolean handleTeleport(Player player,Location loc){
  if (!isHooked()) {
    return false;
  }
  try {
    Teleport teleport=(Teleport)getEssentialsInstance().getUser(player).getTeleport();
    Trade trade=new Trade((int)UConf.get(player).econCostHome,(IEssentials)getEssentialsInstance());
    new Trade(0,null);
    teleport.teleport(loc,trade,TeleportCause.PLUGIN);
  }
 catch (  Exception e) {
    player.sendMessage(ChatColor.RED.toString() + e.getMessage());
    return false;
  }
  return true;
}"
86506,"/** 
 * Clears all LWC locks for the chunk at passed location except the locks that are of players in the same faction as passed fPlayer
 * @param facLocation the FLocation of the faction (chunk-coords basically)
 * @param fPlayer
 * @return number of protections removed,<br />0 or less means none were found/removed
 * @throws Exception if something failed (typically this won't happen)
 */
public static int clearLocks(PS facLocation,UPlayer fPlayer) throws Exception {
  World world=facLocation.asBukkitWorld();
  if (null == world) {
    throw new Exception(""String_Node_Str"");
  }
  Chunk chunk=world.getChunkAt(facLocation.getBlockX().intValue(),facLocation.getBlockZ().intValue());
  if (!world.isChunkLoaded(chunk)) {
    world.loadChunk(chunk);
    if (!chunk.isLoaded()) {
      throw new Exception(""String_Node_Str"");
    }
  }
  int numberOfRemovedProtections=0;
  for (int x=0; x < 16; x++) {
    for (int z=0; z < 16; z++) {
      for (int y=0; y < 256; y++) {
        Block block=chunk.getBlock(x,y,z);
        Material type=block.getType();
        if (type == Material.AIR) {
          continue;
        }
        if (isProtectionTypeToRemove(type)) {
          Protection protectedBlock=getLWC().findProtection(block);
          if (null != protectedBlock) {
            UPlayer fpOwner=UPlayer.get(protectedBlock.getOwner());
            if (!fPlayer.getFaction().getUPlayers().contains(fpOwner)) {
              protectedBlock.remove();
              numberOfRemovedProtections++;
            }
          }
        }
      }
    }
  }
  return numberOfRemovedProtections;
}","/** 
 * Clears all LWC locks for the chunk at passed location except the locks that are of players in the same faction as passed fPlayer
 * @param facLocation the FLocation of the faction (chunk-coords basically)
 * @param fPlayer
 * @return number of protections removed,<br />0 or less means none were found/removed
 * @throws Exception if something failed (typically this won't happen)
 */
public static int clearLocks(PS facLocation,UPlayer fPlayer) throws Exception {
  World world=facLocation.asBukkitWorld();
  if (null == world) {
    throw new Exception(""String_Node_Str"");
  }
  Chunk chunk=world.getChunkAt(facLocation.getBlock().asBukkitBlock().getX(),facLocation.getBlock().asBukkitBlock().getZ());
  if (!world.isChunkLoaded(chunk)) {
    world.loadChunk(chunk);
    if (!chunk.isLoaded()) {
      throw new Exception(""String_Node_Str"");
    }
  }
  int numberOfRemovedProtections=0;
  for (int x=0; x < 16; x++) {
    for (int z=0; z < 16; z++) {
      for (int y=0; y < 256; y++) {
        Block block=chunk.getBlock(x,y,z);
        Material type=block.getType();
        if (type == Material.AIR) {
          continue;
        }
        if (isProtectionTypeToRemove(type)) {
          Protection protectedBlock=getLWC().findProtection(block);
          if (null != protectedBlock) {
            UPlayer fpOwner=UPlayer.get(protectedBlock.getOwner());
            if (!fPlayer.getFaction().getUPlayers().contains(fpOwner)) {
              protectedBlock.remove();
              numberOfRemovedProtections++;
            }
          }
        }
      }
    }
  }
  return numberOfRemovedProtections;
}"
86507,"@Override public void onEnable(){
  try {
    super.onEnable();
    this.ignoredPvPWorlds=com.massivecraft.factions.Conf.worldsIgnorePvP;
    this.noClaimingWorlds=com.massivecraft.factions.Conf.worldsNoClaiming;
    this.noPowerLossWorlds=com.massivecraft.factions.Conf.worldsNoPowerLoss;
    Config.init();
    Bridge.init();
    PluginManager pm=this.getServer().getPluginManager();
    FactionsVersion=(pm.getPlugin(""String_Node_Str"").getDescription().getVersion());
    FactionsPlusPlugin.info(""String_Node_Str"" + FactionsVersion);
    pm.registerEvents(new FPConfigLoadedListener(),this);
    Config.reload();
    pm.registerEvents(this.corelistener,this);
    FactionsPlusJail.server=getServer();
    FactionsPlusCommandManager.setup();
    RegisteredServiceProvider<Permission> permissionProvider=getServer().getServicesManager().getRegistration(net.milkbowl.vault.permission.Permission.class);
    if (permissionProvider != null) {
      permission=permissionProvider.getProvider();
    }
    if (1 < 2) {
      if (pm.isPluginEnabled(""String_Node_Str"")) {
        worldEditPlugin=(WorldEditPlugin)getServer().getPluginManager().getPlugin(""String_Node_Str"");
        FactionsPlusPlugin.info(""String_Node_Str"" + pm.getPlugin(""String_Node_Str"").getDescription().getVersion());
        isWorldEditEnabled=true;
      }
      if (pm.isPluginEnabled(""String_Node_Str"")) {
        worldGuardPlugin=(WorldGuardPlugin)getServer().getPluginManager().getPlugin(""String_Node_Str"");
        FactionsPlusPlugin.info(""String_Node_Str"" + pm.getPlugin(""String_Node_Str"").getDescription().getVersion());
        isWorldGuardEnabled=true;
      }
    }
    if (pm.isPluginEnabled(""String_Node_Str"")) {
      Plugin MVc=getServer().getPluginManager().getPlugin(""String_Node_Str"");
      if (MVc instanceof MultiversePortals) {
        this.multiversePortalsPlugin=(MultiversePortals)MVc;
      }
      isMultiversePortalsEnabled=true;
      FactionsPlusPlugin.info(""String_Node_Str"" + pm.getPlugin(""String_Node_Str"").getDescription().getVersion());
    }
    version=getDescription().getVersion();
    FactionsPlusPlugin.info(""String_Node_Str"");
    try {
      metrics=new Metrics(this);
      metrics.start();
    }
 catch (    IOException e) {
      FactionsPlusPlugin.info(""String_Node_Str"" + e.getMessage());
    }
    FactionsPlusPlugin.info(""String_Node_Str"");
  }
 catch (  Throwable t) {
    FactionsPlus.severe(t);
    if (isEnabled()) {
      disableSelf();
    }
  }
}","@Override public void onEnable(){
  try {
    super.onEnable();
    this.ignoredPvPWorlds=com.massivecraft.factions.Conf.worldsIgnorePvP;
    this.noClaimingWorlds=com.massivecraft.factions.Conf.worldsNoClaiming;
    this.noPowerLossWorlds=com.massivecraft.factions.Conf.worldsNoPowerLoss;
    Config.init();
    Bridge.init();
    PluginManager pm=this.getServer().getPluginManager();
    FactionsVersion=(pm.getPlugin(""String_Node_Str"").getDescription().getVersion());
    FactionsPlusPlugin.info(""String_Node_Str"" + FactionsVersion);
    pm.registerEvents(new FPConfigLoadedListener(),this);
    Config.reload();
    pm.registerEvents(this.corelistener,this);
    FactionsPlusJail.server=getServer();
    CoreListener.fp=FactionsPlusJail.server;
    FactionsPlusCommandManager.setup();
    RegisteredServiceProvider<Permission> permissionProvider=getServer().getServicesManager().getRegistration(net.milkbowl.vault.permission.Permission.class);
    if (permissionProvider != null) {
      permission=permissionProvider.getProvider();
    }
    if (1 < 2) {
      if (pm.isPluginEnabled(""String_Node_Str"")) {
        worldEditPlugin=(WorldEditPlugin)getServer().getPluginManager().getPlugin(""String_Node_Str"");
        FactionsPlusPlugin.info(""String_Node_Str"" + pm.getPlugin(""String_Node_Str"").getDescription().getVersion());
        isWorldEditEnabled=true;
      }
      if (pm.isPluginEnabled(""String_Node_Str"")) {
        worldGuardPlugin=(WorldGuardPlugin)getServer().getPluginManager().getPlugin(""String_Node_Str"");
        FactionsPlusPlugin.info(""String_Node_Str"" + pm.getPlugin(""String_Node_Str"").getDescription().getVersion());
        isWorldGuardEnabled=true;
      }
    }
    if (pm.isPluginEnabled(""String_Node_Str"")) {
      Plugin MVc=getServer().getPluginManager().getPlugin(""String_Node_Str"");
      if (MVc instanceof MultiversePortals) {
        this.multiversePortalsPlugin=(MultiversePortals)MVc;
      }
      isMultiversePortalsEnabled=true;
      FactionsPlusPlugin.info(""String_Node_Str"" + pm.getPlugin(""String_Node_Str"").getDescription().getVersion());
    }
    version=getDescription().getVersion();
    FactionsPlusPlugin.info(""String_Node_Str"");
    try {
      metrics=new Metrics(this);
      metrics.start();
    }
 catch (    IOException e) {
      FactionsPlusPlugin.info(""String_Node_Str"" + e.getMessage());
    }
    FactionsPlusPlugin.info(""String_Node_Str"");
  }
 catch (  Throwable t) {
    FactionsPlus.severe(t);
    if (isEnabled()) {
      disableSelf();
    }
  }
}"
86508,"@EventHandler(priority=EventPriority.HIGHEST) public void onPlayerDeath(PlayerDeathEvent event){
  final Player currentPlayer=event.getEntity();
  FPlayer currentFPlayer=FPlayers.i.get(currentPlayer);
  if (Utilities.isWarZone(Board.getFactionAt(currentPlayer.getLocation()))) {
    if (!FactionsPlus.permission.has(currentPlayer,""String_Node_Str"")) {
      return;
    }
 else {
      currentPlayer.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    final ItemStack[] playersArmor=currentPlayer.getInventory().getArmorContents();
    final ItemStack[] playersInventory=currentPlayer.getInventory().getContents();
    Bukkit.getScheduler().scheduleSyncDelayedTask((Plugin)this,new Runnable(){
      @Override public void run(){
        currentPlayer.getInventory().setArmorContents(playersArmor);
      }
    }
);
    for (    ItemStack is : playersArmor) {
      event.getDrops().remove(is);
    }
    event.setDroppedExp(0);
    for (int i=0; i < playersInventory.length; i++) {
      event.getDrops().remove(playersInventory[i]);
    }
    Bukkit.getScheduler().scheduleSyncDelayedTask((Plugin)this,new Runnable(){
      @Override public void run(){
        currentPlayer.getInventory().setContents(playersInventory);
      }
    }
);
  }
}","@EventHandler(priority=EventPriority.HIGHEST) public void onPlayerDeath(PlayerDeathEvent event){
  final Player currentPlayer=event.getEntity();
  FPlayer currentFPlayer=FPlayers.i.get(currentPlayer);
  if (Utilities.isWarZone(Board.getFactionAt(currentPlayer.getLocation()))) {
    if (!FactionsPlus.permission.has(currentPlayer,""String_Node_Str"")) {
      return;
    }
 else {
      currentPlayer.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
    final ItemStack[] playersArmor=currentPlayer.getInventory().getArmorContents();
    final ItemStack[] playersInventory=currentPlayer.getInventory().getContents();
    Bukkit.getScheduler().scheduleSyncDelayedTask(fp.getPluginManager().getPlugin(""String_Node_Str""),new Runnable(){
      @Override public void run(){
        currentPlayer.getInventory().setArmorContents(playersArmor);
      }
    }
);
    for (    ItemStack is : playersArmor) {
      event.getDrops().remove(is);
    }
    event.setDroppedExp(0);
    for (int i=0; i < playersInventory.length; i++) {
      event.getDrops().remove(playersInventory[i]);
    }
    Bukkit.getScheduler().scheduleSyncDelayedTask(fp.getPluginManager().getPlugin(""String_Node_Str""),new Runnable(){
      @Override public void run(){
        currentPlayer.getInventory().setContents(playersInventory);
      }
    }
);
  }
}"
86509,"@SuppressWarnings(""String_Node_Str"") public static void createTemplatesFile(){
  try {
    if (Config.templatesFile.exists()) {
      Config.templatesFile.delete();
    }
    Config.templatesFile.createNewFile();
    Config.templates=YamlConfiguration.loadConfiguration(Config.templatesFile);
    Config.templates.set(""String_Node_Str"",""String_Node_Str"");
    Config.templates.set(""String_Node_Str"",""String_Node_Str"");
    Config.templates.set(""String_Node_Str"",""String_Node_Str"");
    Config.templates.set(""String_Node_Str"",""String_Node_Str"");
    Config.templates.set(""String_Node_Str"",3);
    Config.templates.save(Config.templatesFile);
  }
 catch (  Exception e) {
    e.printStackTrace();
    FactionsPlusPlugin.info(""String_Node_Str"");
    return;
  }
}","@SuppressWarnings(""String_Node_Str"") public static void createTemplatesFile(){
  try {
    if (Config.templatesFile.exists()) {
      Config.templatesFile.delete();
    }
    Config.templatesFile.createNewFile();
    Config.templates=YamlConfiguration.loadConfiguration(Config.templatesFile);
    Config.templates.set(""String_Node_Str"",""String_Node_Str"");
    Config.templates.set(""String_Node_Str"",""String_Node_Str"");
    Config.templates.set(""String_Node_Str"",""String_Node_Str"");
    Config.templates.set(""String_Node_Str"",""String_Node_Str"");
    Config.templates.set(""String_Node_Str"",4);
    Config.templates.save(Config.templatesFile);
  }
 catch (  Exception e) {
    e.printStackTrace();
    FactionsPlusPlugin.info(""String_Node_Str"");
    return;
  }
}"
86510,"public static String Go(String templateOption,String args[]){
  String workingstring=""String_Node_Str"" + templateOption;
  if (templateOption == ""String_Node_Str"") {
    workingstring=Config.templates.getString(""String_Node_Str"");
  }
  if (templateOption == ""String_Node_Str"") {
    workingstring=Config.templates.getString(""String_Node_Str"");
  }
  if (templateOption == ""String_Node_Str"") {
    workingstring=Config.templates.getString(""String_Node_Str"");
  }
  if (templateOption == ""String_Node_Str"") {
    workingstring=Config.templates.getString(""String_Node_Str"");
  }
  workingstring=colorFormat(workingstring);
  if (args.length == 2) {
    workingstring=workingstring.replace(""String_Node_Str"",args[1]);
    workingstring=workingstring.replace(""String_Node_Str"",args[1]);
    return (workingstring);
  }
  if (args.length == 3) {
    workingstring=workingstring.replace(""String_Node_Str"",args[1]);
    workingstring=workingstring.replace(""String_Node_Str"",args[2]);
    return (workingstring);
  }
  if (args.length == 4) {
    workingstring=workingstring.replaceAll(""String_Node_Str"",args[1]);
    workingstring=workingstring.replaceAll(""String_Node_Str"",args[2]);
    workingstring=workingstring.replaceAll(""String_Node_Str"",args[3]);
    return (workingstring);
  }
  if (args.length == 5) {
    workingstring=workingstring.replace(""String_Node_Str"",args[1]);
    workingstring=workingstring.replace(""String_Node_Str"",args[2]);
    workingstring=workingstring.replace(""String_Node_Str"",args[3]);
    workingstring=workingstring.replace(""String_Node_Str"",args[4]);
    return (workingstring);
  }
  return workingstring;
}","public static String Go(String templateOption,String args[]){
  String workingstring=""String_Node_Str"" + templateOption;
  if (templateOption == ""String_Node_Str"") {
    workingstring=Config.templates.getString(""String_Node_Str"");
  }
  if (templateOption == ""String_Node_Str"") {
    workingstring=Config.templates.getString(""String_Node_Str"");
  }
  if (templateOption == ""String_Node_Str"") {
    workingstring=Config.templates.getString(""String_Node_Str"");
  }
  if (templateOption == ""String_Node_Str"") {
    workingstring=Config.templates.getString(""String_Node_Str"");
  }
  if (templateOption == ""String_Node_Str"") {
    workingstring=Config.templates.getString(""String_Node_Str"");
  }
  workingstring=colorFormat(workingstring);
  if (args.length == 2) {
    workingstring=workingstring.replace(""String_Node_Str"",args[1]);
    return (workingstring);
  }
  if (args.length == 3) {
    workingstring=workingstring.replace(""String_Node_Str"",args[1]);
    workingstring=workingstring.replace(""String_Node_Str"",args[2]);
    return (workingstring);
  }
  if (args.length == 4) {
    workingstring=workingstring.replaceAll(""String_Node_Str"",args[1]);
    workingstring=workingstring.replaceAll(""String_Node_Str"",args[2]);
    workingstring=workingstring.replaceAll(""String_Node_Str"",args[3]);
    return (workingstring);
  }
  if (args.length == 5) {
    workingstring=workingstring.replace(""String_Node_Str"",args[1]);
    workingstring=workingstring.replace(""String_Node_Str"",args[2]);
    workingstring=workingstring.replace(""String_Node_Str"",args[3]);
    workingstring=workingstring.replace(""String_Node_Str"",args[4]);
    return (workingstring);
  }
  return workingstring;
}"
86511,"@Override public void onEnable(){
  try {
    super.onEnable();
    Config.init();
    Bridge.init();
    PluginManager pm=this.getServer().getPluginManager();
    FactionsVersion=(pm.getPlugin(""String_Node_Str"").getDescription().getVersion());
    FactionsPlusPlugin.info(""String_Node_Str"" + FactionsVersion);
    pm.registerEvents(new FPConfigLoadedListener(),this);
    Config.reload();
    pm.registerEvents(this.corelistener,this);
    FactionsPlusJail.server=getServer();
    FactionsPlusCommandManager.setup();
    RegisteredServiceProvider<Permission> permissionProvider=getServer().getServicesManager().getRegistration(net.milkbowl.vault.permission.Permission.class);
    if (permissionProvider != null) {
      permission=permissionProvider.getProvider();
    }
    if (1 < 2) {
      if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        worldEditPlugin=(WorldEditPlugin)getServer().getPluginManager().getPlugin(""String_Node_Str"");
        FactionsPlusPlugin.info(""String_Node_Str"");
        isWorldEditEnabled=true;
      }
      if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        worldGuardPlugin=(WorldGuardPlugin)getServer().getPluginManager().getPlugin(""String_Node_Str"");
        FactionsPlusPlugin.info(""String_Node_Str"");
        isWorldGuardEnabled=true;
      }
    }
    version=getDescription().getVersion();
    FactionsPlusPlugin.info(""String_Node_Str"");
    try {
      metrics=new Metrics(this);
      metrics.start();
    }
 catch (    IOException e) {
      FactionsPlusPlugin.info(""String_Node_Str"" + e.getMessage());
    }
    FactionsPlusPlugin.info(""String_Node_Str"");
  }
 catch (  Throwable t) {
    FactionsPlus.severe(t);
    if (isEnabled()) {
      disableSelf();
    }
  }
}","@Override public void onEnable(){
  try {
    super.onEnable();
    this.ignoredPvPWorlds=com.massivecraft.factions.Conf.worldsIgnorePvP;
    this.noClaimingWorlds=com.massivecraft.factions.Conf.worldsNoClaiming;
    this.noPowerLossWorlds=com.massivecraft.factions.Conf.worldsNoPowerLoss;
    Config.init();
    Bridge.init();
    PluginManager pm=this.getServer().getPluginManager();
    FactionsVersion=(pm.getPlugin(""String_Node_Str"").getDescription().getVersion());
    FactionsPlusPlugin.info(""String_Node_Str"" + FactionsVersion);
    pm.registerEvents(new FPConfigLoadedListener(),this);
    Config.reload();
    pm.registerEvents(this.corelistener,this);
    FactionsPlusJail.server=getServer();
    FactionsPlusCommandManager.setup();
    RegisteredServiceProvider<Permission> permissionProvider=getServer().getServicesManager().getRegistration(net.milkbowl.vault.permission.Permission.class);
    if (permissionProvider != null) {
      permission=permissionProvider.getProvider();
    }
    if (1 < 2) {
      if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        worldEditPlugin=(WorldEditPlugin)getServer().getPluginManager().getPlugin(""String_Node_Str"");
        FactionsPlusPlugin.info(""String_Node_Str"");
        isWorldEditEnabled=true;
      }
      if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        worldGuardPlugin=(WorldGuardPlugin)getServer().getPluginManager().getPlugin(""String_Node_Str"");
        FactionsPlusPlugin.info(""String_Node_Str"");
        isWorldGuardEnabled=true;
      }
    }
    version=getDescription().getVersion();
    FactionsPlusPlugin.info(""String_Node_Str"");
    try {
      metrics=new Metrics(this);
      metrics.start();
    }
 catch (    IOException e) {
      FactionsPlusPlugin.info(""String_Node_Str"" + e.getMessage());
    }
    FactionsPlusPlugin.info(""String_Node_Str"");
  }
 catch (  Throwable t) {
    FactionsPlus.severe(t);
    if (isEnabled()) {
      disableSelf();
    }
  }
}"
86512,"@EventHandler(priority=EventPriority.HIGHEST) public void onPlayerDisguise(PlayerDisguiseEvent e){
  if (e.isCancelled()) {
    return;
  }
  FPlayer fplayer=FPlayers.i.get(e.getPlayer());
  if (Config._extras._disguise.unDisguiseIfInEnemyTerritory._) {
    if (fplayer.isInEnemyTerritory()) {
      e.getPlayer().sendMessage(""String_Node_Str"");
      e.setCancelled(true);
    }
  }
  if (Config._extras._disguise.unDisguiseIfInOwnTerritory._) {
    if (fplayer.isInOwnTerritory()) {
      e.getPlayer().sendMessage(""String_Node_Str"");
      e.setCancelled(true);
    }
  }
}","@EventHandler(priority=EventPriority.HIGHEST) public void onPlayerDisguise(PlayerDisguiseEvent e){
  if (e.isCancelled()) {
    return;
  }
  FPlayer fplayer=FPlayers.i.get(e.getPlayer());
  if (!fplayer.hasFaction()) {
    return;
  }
  if (Config._extras._disguise.unDisguiseIfInEnemyTerritory._) {
    if (fplayer.isInEnemyTerritory()) {
      e.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
      e.setCancelled(true);
    }
  }
  if (Config._extras._disguise.unDisguiseIfInOwnTerritory._) {
    if (fplayer.isInOwnTerritory()) {
      e.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
      e.setCancelled(true);
    }
  }
}"
86513,"@EventHandler public void onPlayerMove(PlayerMoveEvent event){
  if (event.isCancelled()) {
    return;
  }
  if (isMobDisguiseIntegrated()) {
    FPlayer fplayer=FPlayers.i.get(event.getPlayer());
    if (MobDisguiseAPI.isDisguised(event.getPlayer())) {
      if (Config._extras._disguise.unDisguiseIfInEnemyTerritory._) {
        if (fplayer.isInEnemyTerritory()) {
          MobDisguiseAPI.undisguisePlayer(event.getPlayer());
          event.getPlayer().sendMessage(""String_Node_Str"");
        }
      }
      if (Config._extras._disguise.unDisguiseIfInOwnTerritory._) {
        if (fplayer.isInOwnTerritory()) {
          MobDisguiseAPI.undisguisePlayer(event.getPlayer());
          event.getPlayer().sendMessage(""String_Node_Str"");
        }
      }
    }
  }
  if (isDisguiseCraftIntegrated()) {
    DisguiseCraftAPI dcAPI=DisguiseCraft.getAPI();
    FPlayer fplayer=FPlayers.i.get(event.getPlayer());
    if (dcAPI.isDisguised(event.getPlayer())) {
      if (Config._extras._disguise.unDisguiseIfInEnemyTerritory._) {
        if (fplayer.isInEnemyTerritory()) {
          dcAPI.undisguisePlayer(event.getPlayer());
          event.getPlayer().sendMessage(""String_Node_Str"");
        }
      }
      if (Config._extras._disguise.unDisguiseIfInOwnTerritory._) {
        if (fplayer.isInOwnTerritory()) {
          dcAPI.undisguisePlayer(event.getPlayer());
          event.getPlayer().sendMessage(""String_Node_Str"");
        }
      }
    }
  }
}","@EventHandler public void onPlayerMove(PlayerMoveEvent event){
  if (event.isCancelled()) {
    return;
  }
  FPlayer fplayer=FPlayers.i.get(event.getPlayer());
  if (!fplayer.hasFaction()) {
    return;
  }
  if (isMobDisguiseIntegrated()) {
    if (MobDisguiseAPI.isDisguised(event.getPlayer())) {
      if (Config._extras._disguise.unDisguiseIfInEnemyTerritory._) {
        if (fplayer.isInEnemyTerritory()) {
          MobDisguiseAPI.undisguisePlayer(event.getPlayer());
          event.getPlayer().sendMessage(""String_Node_Str"");
        }
      }
      if (Config._extras._disguise.unDisguiseIfInOwnTerritory._) {
        if (fplayer.isInOwnTerritory()) {
          MobDisguiseAPI.undisguisePlayer(event.getPlayer());
          event.getPlayer().sendMessage(""String_Node_Str"");
        }
      }
    }
  }
  if (isDisguiseCraftIntegrated()) {
    DisguiseCraftAPI dcAPI=DisguiseCraft.getAPI();
    if (dcAPI.isDisguised(event.getPlayer())) {
      if (Config._extras._disguise.unDisguiseIfInEnemyTerritory._) {
        if (fplayer.isInEnemyTerritory()) {
          dcAPI.undisguisePlayer(event.getPlayer());
          event.getPlayer().sendMessage(""String_Node_Str"");
        }
      }
      if (Config._extras._disguise.unDisguiseIfInOwnTerritory._) {
        if (fplayer.isInOwnTerritory()) {
          dcAPI.undisguisePlayer(event.getPlayer());
          event.getPlayer().sendMessage(""String_Node_Str"");
        }
      }
    }
  }
}"
86514,"@EventHandler(priority=EventPriority.HIGHEST) public void onDisguiseEvent(DisguiseEvent e){
  if (e.isCancelled()) {
    return;
  }
  FPlayer fplayer=FPlayers.i.get(e.getPlayer());
  if (Config._extras._disguise.unDisguiseIfInEnemyTerritory._) {
    if (fplayer.isInEnemyTerritory()) {
      MobDisguiseAPI.undisguisePlayer(e.getPlayer());
      e.getPlayer().sendMessage(""String_Node_Str"");
      e.setCancelled(true);
    }
  }
  if (Config._extras._disguise.unDisguiseIfInOwnTerritory._) {
    if (fplayer.isInOwnTerritory()) {
      MobDisguiseAPI.undisguisePlayer(e.getPlayer());
      e.getPlayer().sendMessage(""String_Node_Str"");
      e.setCancelled(true);
    }
  }
}","@EventHandler(priority=EventPriority.HIGHEST) public void onDisguiseEvent(DisguiseEvent e){
  if (e.isCancelled()) {
    return;
  }
  FPlayer fplayer=FPlayers.i.get(e.getPlayer());
  if (!fplayer.hasFaction()) {
    return;
  }
  if (Config._extras._disguise.unDisguiseIfInEnemyTerritory._) {
    if (fplayer.isInEnemyTerritory()) {
      MobDisguiseAPI.undisguisePlayer(e.getPlayer());
      e.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
      e.setCancelled(true);
    }
  }
  if (Config._extras._disguise.unDisguiseIfInOwnTerritory._) {
    if (fplayer.isInOwnTerritory()) {
      MobDisguiseAPI.undisguisePlayer(e.getPlayer());
      e.getPlayer().sendMessage(ChatColor.RED + ""String_Node_Str"");
      e.setCancelled(true);
    }
  }
}"
86515,"@Override public void perform(){
  Faction currentFaction=myFaction;
  if (this.argAsString(0) != null) {
    if (!FactionsPlus.permission.has(Utilities.getOnlinePlayerExact(fme),""String_Node_Str"")) {
      fme.msg(""String_Node_Str"");
      return;
    }
    currentFaction=Factions.i.get(argAsString(0));
  }
  if (Utilities.isWilderness(currentFaction)) {
    fme.msg(""String_Node_Str"");
    return;
  }
  File currentWarpFile=new File(Config.folderWarps,currentFaction.getId());
  if (!currentWarpFile.exists()) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  FileInputStream fis=null;
  try {
    fis=new FileInputStream(new File(Config.folderWarps,currentFaction.getId()));
    int b=fis.read();
    if (b == -1) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
 catch (  Exception e) {
    fme.msg(""String_Node_Str"");
    return;
  }
 finally {
    if (null != fis) {
      try {
        fis.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  Scanner scanner=null;
  FileReader fr=null;
  try {
    fr=new FileReader(currentWarpFile);
    scanner=new Scanner(fr);
    String buffer=ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE;
    boolean warps=false;
    while (scanner.hasNextLine()) {
      String item=scanner.nextLine();
      if (item.trim() != ""String_Node_Str"") {
        String[] items=item.split(""String_Node_Str"");
        if (items.length > 0) {
          if (buffer.length() + items[0].length() + 2 >= 256) {
            sender.sendMessage(buffer);
            buffer=items[0] + ""String_Node_Str"";
          }
 else {
            buffer=buffer + items[0] + ""String_Node_Str"";
            warps=true;
          }
        }
      }
    }
    if (warps) {
      buffer=buffer.substring(0,buffer.length() - 2);
      buffer+=""String_Node_Str"";
    }
    sender.sendMessage(buffer);
  }
 catch (  Exception e) {
    FactionsPlusPlugin.info(""String_Node_Str"" + currentWarpFile.getName() + ""String_Node_Str""+ e.getMessage());
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    e.printStackTrace();
  }
 finally {
    if (null != scanner) {
      scanner.close();
    }
    if (null != fr) {
      try {
        fr.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}","@Override public void perform(){
  Faction currentFaction=myFaction;
  if (this.argAsString(0) != null) {
    if (!FactionsPlus.permission.has(Utilities.getOnlinePlayerExact(fme),""String_Node_Str"")) {
      fme.msg(""String_Node_Str"");
      return;
    }
    currentFaction=Factions.i.get(argAsString(0));
  }
  if (Utilities.isWilderness(currentFaction)) {
    fme.msg(""String_Node_Str"");
    return;
  }
  File currentWarpFile=new File(Config.folderWarps,currentFaction.getId());
  if (!currentWarpFile.exists()) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  FileInputStream fis=null;
  try {
    fis=new FileInputStream(new File(Config.folderWarps,currentFaction.getId()));
    int b=fis.read();
    if (b == -1) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
 catch (  Exception e) {
    fme.msg(""String_Node_Str"");
    return;
  }
 finally {
    if (null != fis) {
      try {
        fis.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  Scanner scanner=null;
  FileReader fr=null;
  try {
    fr=new FileReader(currentWarpFile);
    scanner=new Scanner(fr);
    String buffer=ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE;
    boolean warps=false;
    while (scanner.hasNextLine()) {
      String item=scanner.nextLine();
      if (!item.trim().isEmpty()) {
        String[] items=item.split(""String_Node_Str"");
        if (items.length > 0) {
          if (buffer.length() + items[0].length() + 2 >= 256) {
            sender.sendMessage(buffer);
            buffer=items[0] + ""String_Node_Str"";
          }
 else {
            buffer=buffer + items[0] + ""String_Node_Str"";
            warps=true;
          }
        }
      }
    }
    if (warps) {
      buffer=buffer.substring(0,buffer.length() - 2);
      buffer+=""String_Node_Str"";
    }
    sender.sendMessage(buffer);
  }
 catch (  Exception e) {
    FactionsPlusPlugin.info(""String_Node_Str"" + currentWarpFile.getName() + ""String_Node_Str""+ e.getMessage());
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    e.printStackTrace();
  }
 finally {
    if (null != scanner) {
      scanner.close();
    }
    if (null != fr) {
      try {
        fr.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}"
86516,"@Override public void perform(){
  fme.msg(""String_Node_Str"");
  String message=TextUtil.implode(args,""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!FactionsPlus.permission.has(sender,""String_Node_Str"")) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  FPlayer fplayer=FPlayers.i.get(sender.getName());
  String[] argsa=new String[3];
  argsa[1]=sender.getName();
  argsa[2]=message;
  File fRF=new File(Config.folderFRules,fplayer.getFactionId());
  if (!fRF.exists()) {
    fme.msg(""String_Node_Str"");
    return;
  }
  FileInputStream fstream=null;
  DataInputStream in=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    fstream=new FileInputStream(fRF);
    in=new DataInputStream(fstream);
    isr=new InputStreamReader(in);
    br=new BufferedReader(isr);
    String strLine;
    int rCurrent=0;
    while ((strLine=br.readLine()) != null) {
      rCurrent=rCurrent + 1;
      if (!strLine.isEmpty() || strLine.trim() != ""String_Node_Str"") {
        fme.msg(""String_Node_Str"" + rCurrent + ""String_Node_Str""+ strLine);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    sender.sendMessage(""String_Node_Str"");
    return;
  }
 finally {
    if (null != br) {
      try {
        br.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (null != isr) {
      try {
        isr.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (null != in) {
      try {
        in.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (null != fstream) {
      try {
        fstream.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}","@Override public void perform(){
  fme.msg(""String_Node_Str"");
  String message=TextUtil.implode(args,""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!FactionsPlus.permission.has(sender,""String_Node_Str"")) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  FPlayer fplayer=FPlayers.i.get(sender.getName());
  String[] argsa=new String[3];
  argsa[1]=sender.getName();
  argsa[2]=message;
  File fRF=new File(Config.folderFRules,fplayer.getFactionId());
  if (!fRF.exists()) {
    fme.msg(""String_Node_Str"");
    return;
  }
  FileInputStream fstream=null;
  DataInputStream in=null;
  InputStreamReader isr=null;
  BufferedReader br=null;
  try {
    fstream=new FileInputStream(fRF);
    in=new DataInputStream(fstream);
    isr=new InputStreamReader(in);
    br=new BufferedReader(isr);
    String strLine;
    int rCurrent=0;
    while ((strLine=br.readLine()) != null) {
      rCurrent=rCurrent + 1;
      if (!strLine.isEmpty() || !strLine.trim().isEmpty()) {
        fme.msg(""String_Node_Str"" + rCurrent + ""String_Node_Str""+ strLine);
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    sender.sendMessage(""String_Node_Str"");
    return;
  }
 finally {
    if (null != br) {
      try {
        br.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (null != isr) {
      try {
        isr.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (null != in) {
      try {
        in.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (null != fstream) {
      try {
        fstream.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}"
86517,"@Override public void perform(){
  String warpname=this.argAsString(0);
  String setPassword=null;
  if (this.argAsString(1) != null) {
    setPassword=this.argAsString(1);
  }
 else {
    setPassword=""String_Node_Str"";
  }
  if (!FactionsPlus.permission.has(sender,""String_Node_Str"")) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  Player player=(Player)sender;
  FPlayer fplayer=FPlayers.i.get(sender.getName());
  Faction currentFaction=fplayer.getFaction();
  File currentWarpFile=new File(Config.folderWarps,currentFaction.getId());
  World world;
  if (!Config._warps.warpTeleportAllowedFromEnemyTerritory._ && fplayer.isInEnemyTerritory()) {
    fplayer.msg(""String_Node_Str"");
    return;
  }
  Location loc=player.getLocation().clone();
  if (Config._warps.warpTeleportAllowedEnemyDistance._ > 0 && !Utilities.isSafeZone(Board.getFactionAt(new FLocation(loc))) && (!fplayer.isInOwnTerritory() || (fplayer.isInOwnTerritory() && !Config._warps.warpTeleportIgnoreEnemiesIfInOwnTerritory._))) {
    World w=loc.getWorld();
    double x=loc.getX();
    double y=loc.getY();
    double z=loc.getZ();
    for (    Player playa : me.getServer().getOnlinePlayers()) {
      if (playa == null || !playa.isOnline() || playa.isDead() || playa == fme || playa.getWorld() != w)       continue;
      FPlayer fp=FPlayers.i.get(playa);
      if (!FactionsAny.Relation.ENEMY.equals(Bridge.factions.getRelationBetween(fplayer,fp))) {
        continue;
      }
      Location l=playa.getLocation();
      double dx=Math.abs(x - l.getX());
      double dy=Math.abs(y - l.getY());
      double dz=Math.abs(z - l.getZ());
      double max=Config._warps.warpTeleportAllowedEnemyDistance._;
      if (dx > max || dy > max || dz > max)       continue;
      fplayer.msg(""String_Node_Str"" + max + ""String_Node_Str"");
      return;
    }
  }
  if (!currentWarpFile.exists()) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  FileInputStream fstream=null;
  DataInputStream in=null;
  BufferedReader br=null;
  try {
    fstream=new FileInputStream(currentWarpFile);
    in=new DataInputStream(fstream);
    br=new BufferedReader(new InputStreamReader(in));
    String strLine;
    while ((strLine=br.readLine()) != null) {
      String[] warp_data=strLine.split(""String_Node_Str"");
      if (warp_data[0].equalsIgnoreCase(warpname)) {
        double x=Double.parseDouble(warp_data[1]);
        double y=Double.parseDouble(warp_data[2]);
        double z=Double.parseDouble(warp_data[3]);
        float Y=Float.parseFloat(warp_data[4]);
        float playa=Float.parseFloat(warp_data[5]);
        world=Bukkit.getServer().getWorld(warp_data[6]);
        if (warp_data.length == 8) {
          if (warp_data[7] != ""String_Node_Str"") {
            if (!setPassword.trim().equals(warp_data[7].trim())) {
              sender.sendMessage(""String_Node_Str"");
              return;
            }
          }
        }
        if (Config._economy.costToWarp._ > 0.0d) {
          if (!payForCommand(Config._economy.costToWarp._,""String_Node_Str"",""String_Node_Str"")) {
            return;
          }
        }
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ warpname);
        Location newTel=new Location(world,x,y,z,Y,playa);
        if (EssentialsFeatures.handleTeleport(player,newTel))         return;
        if (Config._warps.smokeEffectOnWarp._) {
          List<Location> smokeLocations=new ArrayList<Location>();
          smokeLocations.add(player.getLocation());
          smokeLocations.add(player.getLocation().add(0,1,0));
          smokeLocations.add(newTel);
          smokeLocations.add(newTel.clone().add(0,1,0));
          SmokeUtil.spawnCloudRandom(smokeLocations,3f);
        }
        player.teleport(new Location(world,x,y,z,Y,playa));
        return;
      }
    }
    player.sendMessage(""String_Node_Str"" + warpname);
  }
 catch (  Exception e) {
    e.printStackTrace();
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 finally {
    if (null != br) {
      try {
        br.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (null != in) {
      try {
        in.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (null != fstream) {
      try {
        fstream.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}","@Override public void perform(){
  String warpname=this.argAsString(0);
  String setPassword=null;
  if (this.argAsString(1) != null) {
    setPassword=this.argAsString(1);
  }
 else {
    setPassword=""String_Node_Str"";
  }
  if (!FactionsPlus.permission.has(sender,""String_Node_Str"")) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  Player player=(Player)sender;
  FPlayer fplayer=FPlayers.i.get(sender.getName());
  Faction currentFaction=fplayer.getFaction();
  File currentWarpFile=new File(Config.folderWarps,currentFaction.getId());
  World world;
  if (!Config._warps.warpTeleportAllowedFromEnemyTerritory._ && fplayer.isInEnemyTerritory()) {
    fplayer.msg(""String_Node_Str"");
    return;
  }
  Location loc=player.getLocation().clone();
  if (Config._warps.warpTeleportAllowedEnemyDistance._ > 0 && !Utilities.isSafeZone(Board.getFactionAt(new FLocation(loc))) && (!fplayer.isInOwnTerritory() || (fplayer.isInOwnTerritory() && !Config._warps.warpTeleportIgnoreEnemiesIfInOwnTerritory._))) {
    World w=loc.getWorld();
    double x=loc.getX();
    double y=loc.getY();
    double z=loc.getZ();
    for (    Player playa : me.getServer().getOnlinePlayers()) {
      if (playa == null || !playa.isOnline() || playa.isDead() || playa.getWorld() != w)       continue;
      FPlayer fp=FPlayers.i.get(playa);
      if (fp.equals(fme)) {
        continue;
      }
      if (!FactionsAny.Relation.ENEMY.equals(Bridge.factions.getRelationBetween(fplayer,fp))) {
        continue;
      }
      Location l=playa.getLocation();
      double dx=Math.abs(x - l.getX());
      double dy=Math.abs(y - l.getY());
      double dz=Math.abs(z - l.getZ());
      double max=Config._warps.warpTeleportAllowedEnemyDistance._;
      if (dx > max || dy > max || dz > max)       continue;
      fplayer.msg(""String_Node_Str"" + max + ""String_Node_Str"");
      return;
    }
  }
  if (!currentWarpFile.exists()) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  FileInputStream fstream=null;
  DataInputStream in=null;
  BufferedReader br=null;
  try {
    fstream=new FileInputStream(currentWarpFile);
    in=new DataInputStream(fstream);
    br=new BufferedReader(new InputStreamReader(in));
    String strLine;
    while ((strLine=br.readLine()) != null) {
      String[] warp_data=strLine.split(""String_Node_Str"");
      if (warp_data[0].equalsIgnoreCase(warpname)) {
        double x=Double.parseDouble(warp_data[1]);
        double y=Double.parseDouble(warp_data[2]);
        double z=Double.parseDouble(warp_data[3]);
        float Y=Float.parseFloat(warp_data[4]);
        float playa=Float.parseFloat(warp_data[5]);
        world=Bukkit.getServer().getWorld(warp_data[6]);
        if (warp_data.length == 8) {
          if (warp_data[7] != ""String_Node_Str"") {
            if (!setPassword.trim().equals(warp_data[7].trim())) {
              sender.sendMessage(""String_Node_Str"");
              return;
            }
          }
        }
        if (Config._economy.costToWarp._ > 0.0d) {
          if (!payForCommand(Config._economy.costToWarp._,""String_Node_Str"",""String_Node_Str"")) {
            return;
          }
        }
        player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.WHITE+ warpname);
        Location newTel=new Location(world,x,y,z,Y,playa);
        if (EssentialsFeatures.handleTeleport(player,newTel))         return;
        if (Config._warps.smokeEffectOnWarp._) {
          List<Location> smokeLocations=new ArrayList<Location>();
          smokeLocations.add(player.getLocation());
          smokeLocations.add(player.getLocation().add(0,1,0));
          smokeLocations.add(newTel);
          smokeLocations.add(newTel.clone().add(0,1,0));
          SmokeUtil.spawnCloudRandom(smokeLocations,3f);
        }
        player.teleport(new Location(world,x,y,z,Y,playa));
        return;
      }
    }
    player.sendMessage(""String_Node_Str"" + warpname);
  }
 catch (  Exception e) {
    e.printStackTrace();
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
 finally {
    if (null != br) {
      try {
        br.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (null != in) {
      try {
        in.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    if (null != fstream) {
      try {
        fstream.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
}"
86518,"/** 
 * with lazy init, due to the fact that Essentials being a soft-depend, my guess is that there is a possibility it can be  not enabled, ie. it may enable after our plugin enables<br>
 * @return the instance or null
 */
private synchronized static final IEssentials getEssentialsInstance(){
  if (null == ess) {
    Plugin essPlugin=Bukkit.getPluginManager().getPlugin(pluginName);
    isLoadedButNotEnabled=!essPlugin.isEnabled();
    if ((null != essPlugin) && (essPlugin.isEnabled())) {
      ess=(IEssentials)essPlugin;
    }
  }
  return ess;
}","/** 
 * with lazy init, due to the fact that Essentials being a soft-depend, my guess is that there is a possibility it can be  not enabled, ie. it may enable after our plugin enables<br>
 * @return the instance or null
 */
private synchronized static final IEssentials getEssentialsInstance(){
  if (null == ess) {
    Plugin essPlugin=Bukkit.getPluginManager().getPlugin(pluginName);
    if ((null != essPlugin) && (essPlugin.isEnabled())) {
      ess=(IEssentials)essPlugin;
      isLoadedButNotEnabled=!essPlugin.isEnabled();
    }
  }
  return ess;
}"
86519,"@Override public void onEnable(){
  try {
    super.onEnable();
    Config.init();
    Bridge.init();
    PluginManager pm=this.getServer().getPluginManager();
    FactionsVersion=(pm.getPlugin(""String_Node_Str"").getDescription().getVersion());
    FactionsPlusPlugin.info(""String_Node_Str"" + FactionsVersion);
    pm.registerEvents(new FPConfigLoadedListener(),this);
    Config.reload();
    pm.registerEvents(this.corelistener,this);
    FactionsPlusJail.server=getServer();
    FactionsPlusCommandManager.setup();
    RegisteredServiceProvider<Permission> permissionProvider=getServer().getServicesManager().getRegistration(net.milkbowl.vault.permission.Permission.class);
    if (permissionProvider != null) {
      permission=permissionProvider.getProvider();
    }
    if (Config._announce.enabled._) {
      pm.registerEvents(this.announcelistener,this);
    }
    if (Config._banning.enabled._) {
      pm.registerEvents(this.banlistener,this);
    }
    if (Config._jails.enabled._) {
      pm.registerEvents(this.jaillistener,this);
    }
    if (Config._extras._disguise.enableDisguiseIntegration._ && (Config._extras._disguise.unDisguiseIfInOwnTerritory._ || Config._extras._disguise.unDisguiseIfInEnemyTerritory._)) {
      if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        pm.registerEvents(this.dclistener,this);
        FactionsPlusPlugin.info(""String_Node_Str"");
        isDisguiseCraftEnabled=true;
        pm.registerEvents(this.disguiselistener,this);
      }
      if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        pm.registerEvents(this.mdlistener,this);
        FactionsPlusPlugin.info(""String_Node_Str"");
        isMobDisguiseEnabled=true;
        pm.registerEvents(this.disguiselistener,this);
      }
 else {
        FactionsPlusPlugin.info(""String_Node_Str"");
      }
    }
    if (1 < 2) {
      if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        worldEditPlugin=(WorldEditPlugin)getServer().getPluginManager().getPlugin(""String_Node_Str"");
        FactionsPlusPlugin.info(""String_Node_Str"");
        isWorldEditEnabled=true;
      }
      if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        worldGuardPlugin=(WorldGuardPlugin)getServer().getPluginManager().getPlugin(""String_Node_Str"");
        FactionsPlusPlugin.info(""String_Node_Str"");
        isWorldGuardEnabled=true;
      }
    }
    if (LWCBase.isLWC()) {
      LWCFunctions.hookLWC();
      if ((com.massivecraft.factions.Conf.lwcIntegration) && (com.massivecraft.factions.Conf.onCaptureResetLwcLocks)) {
        if (!Config._extras._protection._lwc.removeAllLocksOnClaim._) {
          Config._extras._protection._lwc.removeAllLocksOnClaim._=true;
          FactionsPlusPlugin.info(""String_Node_Str"" + Config._extras._protection._lwc.removeAllLocksOnClaim._dottedName_asString + ""String_Node_Str"");
        }
      }
    }
 else {
      if (Config._extras._protection._lwc.blockCPublicAccessOnNonOwnFactionTerritory._ || Config._extras._protection._lwc.removeAllLocksOnClaim._) {
        FactionsPlusPlugin.warn(""String_Node_Str"" + ""String_Node_Str"");
      }
      return;
    }
    if (Config._peaceful.enablePeacefulBoosts._) {
      pm.registerEvents(this.peacefullistener,this);
    }
    if (Config._powerboosts.enabled._) {
      pm.registerEvents(this.powerboostlistener,this);
    }
    if (Config._extras.crossBorderLiquidFlowBlock._) {
      pm.registerEvents(this.liquidflowlistener,this);
    }
    version=getDescription().getVersion();
    FactionsPlusPlugin.info(""String_Node_Str"");
    try {
      if (null == metrics) {
        metrics=new Metrics(this);
        metrics.start();
      }
 else {
        metrics.enable();
      }
    }
 catch (    IOException e) {
      FactionsPlusPlugin.info(""String_Node_Str"");
    }
  }
 catch (  Throwable t) {
    FactionsPlus.severe(t);
    if (isEnabled()) {
      disableSelf();
    }
  }
}","@Override public void onEnable(){
  try {
    super.onEnable();
    Config.init();
    Bridge.init();
    PluginManager pm=this.getServer().getPluginManager();
    FactionsVersion=(pm.getPlugin(""String_Node_Str"").getDescription().getVersion());
    FactionsPlusPlugin.info(""String_Node_Str"" + FactionsVersion);
    pm.registerEvents(new FPConfigLoadedListener(),this);
    Config.reload();
    pm.registerEvents(this.corelistener,this);
    FactionsPlusJail.server=getServer();
    FactionsPlusCommandManager.setup();
    RegisteredServiceProvider<Permission> permissionProvider=getServer().getServicesManager().getRegistration(net.milkbowl.vault.permission.Permission.class);
    if (permissionProvider != null) {
      permission=permissionProvider.getProvider();
    }
    if (Config._announce.enabled._) {
      pm.registerEvents(this.announcelistener,this);
    }
    if (Config._banning.enabled._) {
      pm.registerEvents(this.banlistener,this);
    }
    if (Config._jails.enabled._) {
      pm.registerEvents(this.jaillistener,this);
    }
    if (Config._extras._disguise.enableDisguiseIntegration._ && (Config._extras._disguise.unDisguiseIfInOwnTerritory._ || Config._extras._disguise.unDisguiseIfInEnemyTerritory._)) {
      if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        pm.registerEvents(this.dclistener,this);
        FactionsPlusPlugin.info(""String_Node_Str"");
        isDisguiseCraftEnabled=true;
        pm.registerEvents(this.disguiselistener,this);
      }
      if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        pm.registerEvents(this.mdlistener,this);
        FactionsPlusPlugin.info(""String_Node_Str"");
        isMobDisguiseEnabled=true;
        pm.registerEvents(this.disguiselistener,this);
      }
 else {
        FactionsPlusPlugin.info(""String_Node_Str"");
      }
    }
    if (1 < 2) {
      if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        worldEditPlugin=(WorldEditPlugin)getServer().getPluginManager().getPlugin(""String_Node_Str"");
        FactionsPlusPlugin.info(""String_Node_Str"");
        isWorldEditEnabled=true;
      }
      if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
        worldGuardPlugin=(WorldGuardPlugin)getServer().getPluginManager().getPlugin(""String_Node_Str"");
        FactionsPlusPlugin.info(""String_Node_Str"");
        isWorldGuardEnabled=true;
      }
    }
    if (LWCBase.isLWC()) {
      LWCFunctions.hookLWC();
      if ((com.massivecraft.factions.Conf.lwcIntegration) && (com.massivecraft.factions.Conf.onCaptureResetLwcLocks)) {
        if (!Config._extras._protection._lwc.removeAllLocksOnClaim._) {
          Config._extras._protection._lwc.removeAllLocksOnClaim._=true;
          FactionsPlusPlugin.info(""String_Node_Str"" + Config._extras._protection._lwc.removeAllLocksOnClaim._dottedName_asString + ""String_Node_Str"");
        }
      }
    }
 else {
      if (Config._extras._protection._lwc.blockCPublicAccessOnNonOwnFactionTerritory._ || Config._extras._protection._lwc.removeAllLocksOnClaim._) {
        FactionsPlusPlugin.warn(""String_Node_Str"" + ""String_Node_Str"");
      }
      return;
    }
    if (Config._peaceful.enablePeacefulBoosts._) {
      pm.registerEvents(this.peacefullistener,this);
    }
    if (Config._powerboosts.enabled._) {
      pm.registerEvents(this.powerboostlistener,this);
    }
    if (Config._extras.crossBorderLiquidFlowBlock._) {
      pm.registerEvents(this.liquidflowlistener,this);
    }
    version=getDescription().getVersion();
    FactionsPlusPlugin.info(""String_Node_Str"");
    try {
synchronized (Metrics.class) {
        if (null == metrics) {
          metrics=new Metrics(this);
          metrics.start();
        }
 else {
          metrics.enable();
        }
      }
    }
 catch (    IOException e) {
      FactionsPlusPlugin.info(""String_Node_Str"");
    }
  }
 catch (  Throwable t) {
    FactionsPlus.severe(t);
    if (isEnabled()) {
      disableSelf();
    }
  }
}"
86520,"@Override public void onDisable(){
  Throwable failed=null;
  try {
    if (null != metrics) {
      try {
        metrics.disable();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
    try {
      EssentialsIntegration.onDisable();
    }
 catch (    Throwable t) {
      failed=t;
    }
    try {
      Config.deInit();
    }
 catch (    Throwable t) {
      failed=t;
    }
    try {
      if (LWCBase.isLWC()) {
        LWCFunctions.unhookLWC();
      }
    }
 catch (    Throwable t) {
      failed=t;
    }
    try {
      FactionsPlusUpdate.ensureNotRunning();
    }
 catch (    Throwable t) {
      failed=t;
    }
    try {
      getServer().getServicesManager().unregisterAll(this);
    }
 catch (    Throwable t) {
      failed=t;
    }
    try {
      HandlerList.unregisterAll(FactionsPlus.instance);
    }
 catch (    Throwable t) {
      failed=t;
    }
    if (null == failed) {
      FactionsPlusPlugin.info(""String_Node_Str"");
    }
  }
 catch (  Throwable t) {
    failed=t;
  }
 finally {
    if (null != failed) {
      FactionsPlusPlugin.info(""String_Node_Str"");
      FactionsPlus.severe(failed,""String_Node_Str"");
    }
  }
}","@Override public void onDisable(){
  Throwable failed=null;
  try {
synchronized (Metrics.class) {
      if (null != metrics) {
        try {
          metrics.disable();
        }
 catch (        IOException e) {
          e.printStackTrace();
        }
      }
    }
    try {
      EssentialsIntegration.onDisable();
    }
 catch (    Throwable t) {
      failed=t;
    }
    try {
      Config.deInit();
    }
 catch (    Throwable t) {
      failed=t;
    }
    try {
      if (LWCBase.isLWC()) {
        LWCFunctions.unhookLWC();
      }
    }
 catch (    Throwable t) {
      failed=t;
    }
    try {
      FactionsPlusUpdate.ensureNotRunning();
    }
 catch (    Throwable t) {
      failed=t;
    }
    try {
      getServer().getServicesManager().unregisterAll(this);
    }
 catch (    Throwable t) {
      failed=t;
    }
    try {
      HandlerList.unregisterAll(FactionsPlus.instance);
    }
 catch (    Throwable t) {
      failed=t;
    }
    if (null == failed) {
      FactionsPlusPlugin.info(""String_Node_Str"");
    }
  }
 catch (  Throwable t) {
    failed=t;
  }
 finally {
    if (null != failed) {
      FactionsPlusPlugin.info(""String_Node_Str"");
      FactionsPlus.severe(failed,""String_Node_Str"");
    }
  }
}"
86521,"protected Factions16(){
  super();
  boolean failed=false;
  try {
    mSetPeaceful=Faction.class.getMethod(""String_Node_Str"",boolean.class);
    Class clas=Class.forName(""String_Node_Str"");
    methodUpdateHelp=clas.getMethod(""String_Node_Str"");
    Class fcmdroot=Class.forName(""String_Node_Str"");
    fieldCmdHelp=fcmdroot.getField(""String_Node_Str"");
    fHelpPages=clas.getField(""String_Node_Str"");
    Class classChatMode=Class.forName(""String_Node_Str"");
    Reflective.mapEnumsToSome(mapChatMode,classChatMode,FactionsAny.ChatMode.class,null,false);
    Class classFPlayer=Class.forName(""String_Node_Str"");
    mSetChatMode=classFPlayer.getMethod(""String_Node_Str"",classChatMode);
    mGetChatMode=classFPlayer.getMethod(""String_Node_Str"");
  }
 catch (  NoSuchMethodException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  SecurityException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  NoSuchFieldException e) {
    e.printStackTrace();
    failed=true;
  }
 finally {
    if (failed) {
      throw FactionsPlusPlugin.bailOut(""String_Node_Str"");
    }
  }
}","protected Factions16(){
  super();
  boolean failed=false;
  try {
    mSetPeaceful=Faction.class.getMethod(""String_Node_Str"",boolean.class);
    Class clas=Class.forName(""String_Node_Str"");
    methodUpdateHelp=clas.getMethod(""String_Node_Str"");
    Class fcmdroot=Class.forName(""String_Node_Str"");
    fieldCmdHelp=fcmdroot.getField(""String_Node_Str"");
    fHelpPages=clas.getField(""String_Node_Str"");
    Class classChatMode=Class.forName(""String_Node_Str"");
    Reflective.mapEnumsToSome(mapChatMode,classChatMode,FactionsAny.ChatMode.class,null);
    Class classFPlayer=Class.forName(""String_Node_Str"");
    mSetChatMode=classFPlayer.getMethod(""String_Node_Str"",classChatMode);
    mGetChatMode=classFPlayer.getMethod(""String_Node_Str"");
  }
 catch (  NoSuchMethodException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  SecurityException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  NoSuchFieldException e) {
    e.printStackTrace();
    failed=true;
  }
 finally {
    if (failed) {
      throw FactionsPlusPlugin.bailOut(""String_Node_Str"");
    }
  }
}"
86522,"protected Factions17(){
  super();
  boolean failed=false;
  try {
    classFFlag=Class.forName(""String_Node_Str"");
    mSetFlag=Faction.class.getMethod(""String_Node_Str"",classFFlag,boolean.class);
    Reflective.mapEnums(mapFFlag,""String_Node_Str"",FactionsAny.FFlag.class,null,false);
  }
 catch (  NoSuchMethodException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  SecurityException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
    failed=true;
  }
 finally {
    if (failed) {
      throw FactionsPlusPlugin.bailOut(""String_Node_Str"");
    }
  }
}","protected Factions17(){
  super();
  boolean failed=false;
  try {
    classFFlag=Class.forName(""String_Node_Str"");
    mSetFlag=Faction.class.getMethod(""String_Node_Str"",classFFlag,boolean.class);
    Reflective.mapEnums(mapFFlag,""String_Node_Str"",FactionsAny.FFlag.class,null);
  }
 catch (  NoSuchMethodException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  SecurityException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  ClassNotFoundException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
    failed=true;
  }
 finally {
    if (failed) {
      throw FactionsPlusPlugin.bailOut(""String_Node_Str"");
    }
  }
}"
86523,"protected FactionsBase(){
  boolean failed=false;
  try {
    classRP=Class.forName(""String_Node_Str"");
    mGetRelationTo=RelationUtil.class.getMethod((Factions16.class.equals(this.getClass()) ? ""String_Node_Str"" : ""String_Node_Str""),classRP,classRP);
    mGetRole=FPlayer.class.getMethod(""String_Node_Str"");
    String sourceEnum=""String_Node_Str"" + (Factions16.class.equals(this.getClass()) ? ""String_Node_Str"" : ""String_Node_Str"");
    Reflective.mapEnums(mapRelation,sourceEnum,FactionsAny.Relation.class);
    renameSourceRoles.put(""String_Node_Str"",FactionsAny.Relation.LEADER);
    renameSourceRoles.put(""String_Node_Str"",FactionsAny.Relation.OFFICER);
    renameSourceRoles.put(""String_Node_Str"",FactionsAny.Relation.MEMBER);
    String enumRole=(Factions16.class.equals(this.getClass()) ? ""String_Node_Str"" : ""String_Node_Str"");
    Reflective.mapEnums(mapRelation,enumRole,FactionsAny.Relation.class,renameSourceRoles,true);
    renameSourceRoles.clear();
    Class clsFCommand=Class.forName(""String_Node_Str"");
    fSenderMustBe_FactionAdminLeader=clsFCommand.getField(Factions16.class.equals(this.getClass()) ? ""String_Node_Str"" : ""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  SecurityException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  NoSuchMethodException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  NoSuchFieldException e) {
    e.printStackTrace();
    failed=true;
  }
 finally {
    if (failed) {
      throw FactionsPlusPlugin.bailOut(""String_Node_Str"");
    }
  }
}","protected FactionsBase(){
  boolean failed=false;
  try {
    boolean is16=Factions16.class.equals(this.getClass());
    classRP=Class.forName(""String_Node_Str"");
    mGetRelationTo=RelationUtil.class.getMethod((is16 ? ""String_Node_Str"" : ""String_Node_Str""),classRP,classRP);
    mGetRole=FPlayer.class.getMethod(""String_Node_Str"");
    String sourceEnum=""String_Node_Str"" + (is16 ? ""String_Node_Str"" : ""String_Node_Str"");
    Reflective.mapEnums(mapRelation,sourceEnum,FactionsAny.Relation.class);
    renameSourceRoles.put(""String_Node_Str"",FactionsAny.Relation.LEADER);
    renameSourceRoles.put(""String_Node_Str"",FactionsAny.Relation.OFFICER);
    renameSourceRoles.put(""String_Node_Str"",FactionsAny.Relation.MEMBER);
    String enumRole=(is16 ? ""String_Node_Str"" : ""String_Node_Str"");
    Reflective.mapEnums(mapRole,enumRole,FactionsAny.Relation.class,renameSourceRoles);
    renameSourceRoles.clear();
    Class clsFCommand=Class.forName(""String_Node_Str"");
    fSenderMustBe_FactionAdminLeader=clsFCommand.getField(Factions16.class.equals(this.getClass()) ? ""String_Node_Str"" : ""String_Node_Str"");
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  IllegalArgumentException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  SecurityException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  NoSuchMethodException e) {
    e.printStackTrace();
    failed=true;
  }
catch (  NoSuchFieldException e) {
    e.printStackTrace();
    failed=true;
  }
 finally {
    if (failed) {
      throw FactionsPlusPlugin.bailOut(""String_Node_Str"");
    }
  }
}"
86524,"@Override public Relation getRole(RelationParticipator one){
  Throwable error=null;
  FactionsAny.Relation ret=null;
  try {
    if (null == one) {
      error=new NullPointerException(""String_Node_Str"");
      return null;
    }
    Object isReturn=mGetRole.invoke(one);
    ret=mapRelation.get(isReturn);
    if (null == ret) {
      FactionsPlusPlugin.severe(""String_Node_Str"" + isReturn + ""String_Node_Str"");
    }
  }
 catch (  IllegalAccessException e) {
    error=e;
  }
catch (  IllegalArgumentException e) {
    error=e;
  }
catch (  InvocationTargetException e) {
    error=e;
  }
 finally {
    if ((null != error) || (null == ret)) {
      throw FactionsPlusPlugin.bailOut(error,""String_Node_Str"" + mGetRole);
    }
  }
  return ret;
}","@Override public Relation getRole(RelationParticipator one){
  Throwable error=null;
  FactionsAny.Relation ret=null;
  try {
    if (null == one) {
      error=new NullPointerException(""String_Node_Str"");
      return null;
    }
    Object isReturn=mGetRole.invoke(one);
    ret=mapRole.get(isReturn);
    if (null == ret) {
      if (null == isReturn) {
        FactionsPlusPlugin.severe(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
      }
 else {
        FactionsPlusPlugin.severe(""String_Node_Str"" + isReturn + ""String_Node_Str"");
      }
    }
  }
 catch (  IllegalAccessException e) {
    error=e;
  }
catch (  IllegalArgumentException e) {
    error=e;
  }
catch (  InvocationTargetException e) {
    error=e;
  }
 finally {
    if ((null != error) || (null == ret)) {
      throw FactionsPlusPlugin.bailOut(error,""String_Node_Str"" + mGetRole);
    }
  }
  return ret;
}"
86525,"/** 
 * it will try to map every field of class/enum sourceEnum which is of the same type as sourceEnum (since it is enum) to their same named counterpart in the destinationEnum class (which is again expected to be enum, so all its fields must be of the same type as this destinationEnum class) even though the two enum classes are (of) different (type)
 * @param destinationMap maps that holds source->dest tuple
 * @param sourceEnumClass this may or may not exist at compile time, but it's assumed to exist at run time(if you called this)<br> this is why its Class type cannot be specified
 * @param destinationEnum exists at compile time; can contain more enums than the source
 * @param mapOfRenameSourceNameToDestEnum if the sourceEnum is not found in the map, then it will try to find the field with the same name as destinationEnum<br> if null or empty map, it won't be used, meaning source field name must match the destination name, else throw
 * @param skipNotFoundSourceEnums if true, only those enums that are found in destination(or map) will be mapped<br> else, if false, all source enums will be mappes and throw if fail<br>
 */
public static <K extends Object,V extends Object>void mapEnumsToSome(Map<K,V> destinationMap,Class<?> sourceEnumClass,Class<V> destinationEnum,Map<String,V> mapOfRenameSourceNameToDestEnum,boolean skipNotFoundSourceEnums){
  boolean useMap=(null != mapOfRenameSourceNameToDestEnum) && (!mapOfRenameSourceNameToDestEnum.isEmpty());
  Field[] allFieldOfDestEnum;
  if (useMap) {
    allFieldOfDestEnum=destinationEnum.getFields();
  }
 else {
    allFieldOfDestEnum=null;
  }
  for (  Field eachSourceField : sourceEnumClass.getFields()) {
    String sourceFieldName=eachSourceField.getName();
    boolean failed=false;
    try {
      if ((sourceEnumClass.equals(eachSourceField.getType()))) {
        Field destField=null;
        if (useMap) {
          V destEnumInstance=mapOfRenameSourceNameToDestEnum.get(sourceFieldName);
          if (null == destEnumInstance) {
            if (skipNotFoundSourceEnums) {
              continue;
            }
 else {
              FactionsPlusPlugin.severe(""String_Node_Str"" + ""String_Node_Str"" + sourceFieldName);
              failed=true;
              return;
            }
          }
          for (int i=0; i < allFieldOfDestEnum.length; i++) {
            if (destEnumInstance == allFieldOfDestEnum[i].get(destinationEnum)) {
              destField=allFieldOfDestEnum[i];
            }
          }
        }
        if ((!useMap) || (null == destField)) {
          destField=destinationEnum.getField(sourceFieldName);
          if (null == destField) {
            if (!skipNotFoundSourceEnums) {
              FactionsPlusPlugin.severe(""String_Node_Str"" + destinationEnum + ""String_Node_Str""+ eachSourceField+ ""String_Node_Str""+ (useMap ? ""String_Node_Str"" : ""String_Node_Str"")+ ""String_Node_Str"");
              failed=true;
              return;
            }
 else {
              continue;
            }
          }
        }
        if (!destField.getType().equals(destinationEnum)) {
          FactionsPlusPlugin.severe(""String_Node_Str"" + destinationEnum + ""String_Node_Str""+ eachSourceField+ ""String_Node_Str"");
          failed=true;
          return;
        }
        V ourFieldInstance=(V)(destField.get(destinationEnum));
        K factionsFieldInstance=(K)eachSourceField.get(sourceEnumClass);
        destinationMap.put(factionsFieldInstance,ourFieldInstance);
        FactionsPlus.warn(""String_Node_Str"" + sourceFieldName + ""String_Node_Str""+ ourFieldInstance+ ""String_Node_Str"");
      }
    }
 catch (    IllegalArgumentException e) {
      e.printStackTrace();
      failed=true;
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
      failed=true;
    }
catch (    NoSuchFieldException e) {
      e.printStackTrace();
      failed=true;
    }
catch (    SecurityException e) {
      e.printStackTrace();
      failed=true;
    }
 finally {
      if (failed) {
        throw FactionsPlusPlugin.bailOut(""String_Node_Str"" + destinationEnum + ""String_Node_Str""+ eachSourceField);
      }
    }
  }
}","/** 
 * it will try to map every field of class/enum sourceEnum which is of the same type as sourceEnum (since it is enum) to their same named counterpart in the destinationEnum class (which is again expected to be enum, so all its fields must be of the same type as this destinationEnum class) even though the two enum classes are (of) different (type)
 * @param destinationMap maps that holds source->dest tuple
 * @param sourceEnumClass this may or may not exist at compile time, but it's assumed to exist at run time(if you called this)<br> this is why its Class type cannot be specified
 * @param destinationEnum exists at compile time; can contain more enums than the source
 * @param mapOfRenameSourceNameToDestEnum if the sourceEnum is not found in the map, then it will try to find the field with the same name as destinationEnum<br> if null or empty map, it won't be used, meaning source field name must match the destination name, else throw
 * @param skipNotFoundSourceEnums if true, only those enums that are found in destination(or map) will be mapped<br> else, if false, all source enums will be mappes and throw if fail<br>
 */
public static <K extends Object,V extends Object>void mapEnumsToSome(Map<K,V> destinationMap,Class<?> sourceEnumClass,Class<V> destinationEnum,Map<String,V> mapOfRenameSourceNameToDestEnum){
}"
86526,"public static <K extends Object,V extends Object>void mapEnums(Map<K,V> destinationMap,String sourceEnum,Class<V> destinationEnum,Map<String,V> mapOfRenameSourceNameToDestEnum,boolean skipNotFoundSourceEnums){
  Class<?> sourceClass;
  try {
    sourceClass=Class.forName(sourceEnum);
  }
 catch (  ClassNotFoundException e1) {
    e1.printStackTrace();
    throw FactionsPlusPlugin.bailOut(""String_Node_Str"" + sourceEnum);
  }
  mapEnumsToSome(destinationMap,sourceClass,destinationEnum,mapOfRenameSourceNameToDestEnum,skipNotFoundSourceEnums);
}","public static <K extends Object,V extends Object>void mapEnums(Map<K,V> destinationMap,String sourceEnum,Class<V> destinationEnum,Map<String,V> mapOfRenameSourceNameToDestEnum){
  Class<?> sourceClass;
  try {
    sourceClass=Class.forName(sourceEnum);
  }
 catch (  ClassNotFoundException e1) {
    e1.printStackTrace();
    throw FactionsPlusPlugin.bailOut(""String_Node_Str"" + sourceEnum);
  }
  mapEnumsToSome(destinationMap,sourceClass,destinationEnum,mapOfRenameSourceNameToDestEnum);
}"
86527,"public final static void reloadConfig(){
}","public final static void reloadConfig(){
  InputStream defConfigStream=FactionsPlus.instance.getResource(Config.fileConfigDefaults);
  if (defConfigStream != null) {
    Config.config=YamlConfiguration.loadConfiguration(defConfigStream);
  }
 else {
    throw FactionsPlusPlugin.bailOut(""String_Node_Str"" + Config.fileConfigDefaults + ""String_Node_Str""+ ""String_Node_Str"");
  }
  if (Config.fileConfig.exists()) {
    if (!Config.fileConfig.isFile()) {
      throw FactionsPlusPlugin.bailOut(""String_Node_Str"" + Config.fileConfig.getAbsolutePath() + ""String_Node_Str"");
    }
    try {
      YamlConfiguration realConfig=YamlConfiguration.loadConfiguration(Config.fileConfig);
      for (      Map.Entry<String,Object> entry : realConfig.getValues(true).entrySet()) {
        Object val=entry.getValue();
        if (!(val instanceof MemorySection)) {
          String key=entry.getKey();
          Config.config.set(key,val);
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      throw FactionsPlusPlugin.bailOut(""String_Node_Str"" + Config.fileConfig.getAbsolutePath() + ""String_Node_Str"");
    }
  }
 else {
    FactionsPlusPlugin.info(Config.fileConfig + ""String_Node_Str"");
  }
  saveConfig();
}"
86528,"@Override public void onEnable(){
  super.onEnable();
  Config.reload();
  PluginManager pm=this.getServer().getPluginManager();
  pm.registerEvents(this.corelistener,this);
  FactionsPlusJail.server=getServer();
  Bridge.init();
  FactionsVersion=(pm.getPlugin(""String_Node_Str"").getDescription().getVersion());
  if (FactionsVersion.startsWith(""String_Node_Str"")) {
    isOnePointSix=true;
  }
 else {
    isOnePointSix=false;
  }
  FactionsPlusPlugin.info(""String_Node_Str"" + FactionsVersion + ""String_Node_Str""+ isOnePointSix);
  FactionsPlusCommandManager.setup();
  TeleportsListener.init(this);
  RegisteredServiceProvider<Permission> permissionProvider=getServer().getServicesManager().getRegistration(net.milkbowl.vault.permission.Permission.class);
  if (permissionProvider != null) {
    permission=permissionProvider.getProvider();
  }
  if (Config.config.getBoolean(Config.str_enableEconomy)) {
    RegisteredServiceProvider<Economy> economyProvider=getServer().getServicesManager().getRegistration(net.milkbowl.vault.economy.Economy.class);
    if (economyProvider != null) {
      economy=economyProvider.getProvider();
    }
  }
  if (Config.config.getBoolean(Config.str_enableAnnounce)) {
    pm.registerEvents(this.announcelistener,this);
  }
  if (Config.config.getBoolean(Config.str_enableBans)) {
    pm.registerEvents(this.banlistener,this);
  }
  if (Config.config.getBoolean(Config.str_enableJails)) {
    pm.registerEvents(this.jaillistener,this);
  }
  if (Config.config.getBoolean(Config.str_enableDisguiseIntegration) && (Config.config.getBoolean(Config.str_unDisguiseIfInOwnTerritory) || Config.config.getBoolean(Config.str_unDisguiseIfInEnemyTerritory))) {
    if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      pm.registerEvents(this.dclistener,this);
      FactionsPlusPlugin.info(""String_Node_Str"");
      isDisguiseCraftEnabled=true;
      pm.registerEvents(this.disguiselistener,this);
    }
    if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      pm.registerEvents(this.mdlistener,this);
      FactionsPlusPlugin.info(""String_Node_Str"");
      isMobDisguiseEnabled=true;
      pm.registerEvents(this.disguiselistener,this);
    }
 else {
      FactionsPlusPlugin.info(""String_Node_Str"");
    }
  }
  if (1 < 2) {
    if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      worldEditPlugin=(WorldEditPlugin)getServer().getPluginManager().getPlugin(""String_Node_Str"");
      FactionsPlusPlugin.info(""String_Node_Str"");
      isWorldEditEnabled=true;
    }
    if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      worldGuardPlugin=(WorldGuardPlugin)getServer().getPluginManager().getPlugin(""String_Node_Str"");
      FactionsPlusPlugin.info(""String_Node_Str"");
      isWorldGuardEnabled=true;
    }
  }
  LWCFunctions.try_integrateLWC();
  if (LWCFunctions.isLWC()) {
    if ((com.massivecraft.factions.Conf.lwcIntegration) && (com.massivecraft.factions.Conf.onCaptureResetLwcLocks)) {
      if (!Config.config.getBoolean(Config.str_removeLWCLocksOnClaim)) {
        FactionsPlusPlugin.info(""String_Node_Str"" + Config.str_removeLWCLocksOnClaim + ""String_Node_Str"");
      }
    }
  }
  if (Config.config.getBoolean(Config.str_enablePeacefulBoosts)) {
    pm.registerEvents(this.peacefullistener,this);
  }
  if (Config.config.getBoolean(Config.str_enablePowerBoosts)) {
    pm.registerEvents(this.powerboostlistener,this);
  }
  version=getDescription().getVersion();
  FactionsPlusUpdate.checkUpdates();
  FactionsPlusPlugin.info(""String_Node_Str"");
  try {
    if (null == metrics) {
      metrics=new Metrics(this);
      metrics.start();
    }
 else {
      metrics.enable();
    }
  }
 catch (  IOException e) {
    FactionsPlusPlugin.info(""String_Node_Str"");
  }
}","@Override public void onEnable(){
  super.onEnable();
  Config.reload();
  PluginManager pm=this.getServer().getPluginManager();
  pm.registerEvents(this.corelistener,this);
  FactionsPlusJail.server=getServer();
  Bridge.init();
  FactionsVersion=(pm.getPlugin(""String_Node_Str"").getDescription().getVersion());
  if (FactionsVersion.startsWith(""String_Node_Str"")) {
    isOnePointSix=true;
  }
 else {
    isOnePointSix=false;
  }
  FactionsPlusPlugin.info(""String_Node_Str"" + FactionsVersion + ""String_Node_Str""+ isOnePointSix);
  FactionsPlusCommandManager.setup();
  TeleportsListener.init(this);
  RegisteredServiceProvider<Permission> permissionProvider=getServer().getServicesManager().getRegistration(net.milkbowl.vault.permission.Permission.class);
  if (permissionProvider != null) {
    permission=permissionProvider.getProvider();
  }
  if (Config.config.getBoolean(Config.str_enableEconomy)) {
    RegisteredServiceProvider<Economy> economyProvider=getServer().getServicesManager().getRegistration(net.milkbowl.vault.economy.Economy.class);
    if (economyProvider != null) {
      economy=economyProvider.getProvider();
    }
  }
  if (Config.config.getBoolean(Config.str_enableAnnounce)) {
    pm.registerEvents(this.announcelistener,this);
  }
  if (Config.config.getBoolean(Config.str_enableBans)) {
    pm.registerEvents(this.banlistener,this);
  }
  if (Config.config.getBoolean(Config.str_enableJails)) {
    pm.registerEvents(this.jaillistener,this);
  }
  if (Config.config.getBoolean(Config.str_enableDisguiseIntegration) && (Config.config.getBoolean(Config.str_unDisguiseIfInOwnTerritory) || Config.config.getBoolean(Config.str_unDisguiseIfInEnemyTerritory))) {
    if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      pm.registerEvents(this.dclistener,this);
      FactionsPlusPlugin.info(""String_Node_Str"");
      isDisguiseCraftEnabled=true;
      pm.registerEvents(this.disguiselistener,this);
    }
    if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      pm.registerEvents(this.mdlistener,this);
      FactionsPlusPlugin.info(""String_Node_Str"");
      isMobDisguiseEnabled=true;
      pm.registerEvents(this.disguiselistener,this);
    }
 else {
      FactionsPlusPlugin.info(""String_Node_Str"");
    }
  }
  if (1 < 2) {
    if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      worldEditPlugin=(WorldEditPlugin)getServer().getPluginManager().getPlugin(""String_Node_Str"");
      FactionsPlusPlugin.info(""String_Node_Str"");
      isWorldEditEnabled=true;
    }
    if (getServer().getPluginManager().isPluginEnabled(""String_Node_Str"")) {
      worldGuardPlugin=(WorldGuardPlugin)getServer().getPluginManager().getPlugin(""String_Node_Str"");
      FactionsPlusPlugin.info(""String_Node_Str"");
      isWorldGuardEnabled=true;
    }
  }
  if (LWCBase.isLWC()) {
    LWCFunctions.hookLWC();
  }
 else {
    if (Config.config.getBoolean(Config.str_blockCPublicAccessOnNonOwnFactionTerritory) || Config.config.getBoolean(Config.str_removeLWCLocksOnClaim)) {
      FactionsPlusPlugin.warn(""String_Node_Str"" + ""String_Node_Str"");
    }
    return;
  }
  if (LWCFunctions.isLWC()) {
    if ((com.massivecraft.factions.Conf.lwcIntegration) && (com.massivecraft.factions.Conf.onCaptureResetLwcLocks)) {
      if (!Config.config.getBoolean(Config.str_removeLWCLocksOnClaim)) {
        FactionsPlusPlugin.info(""String_Node_Str"" + Config.str_removeLWCLocksOnClaim + ""String_Node_Str"");
      }
    }
  }
  if (Config.config.getBoolean(Config.str_enablePeacefulBoosts)) {
    pm.registerEvents(this.peacefullistener,this);
  }
  if (Config.config.getBoolean(Config.str_enablePowerBoosts)) {
    pm.registerEvents(this.powerboostlistener,this);
  }
  version=getDescription().getVersion();
  FactionsPlusUpdate.checkUpdates();
  FactionsPlusPlugin.info(""String_Node_Str"");
  try {
    if (null == metrics) {
      metrics=new Metrics(this);
      metrics.start();
    }
 else {
      metrics.enable();
    }
  }
 catch (  IOException e) {
    FactionsPlusPlugin.info(""String_Node_Str"");
  }
}"
86529,"@Override public void onDisable(){
  if (null != metrics) {
    try {
      metrics.disable();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  LWCFunctions.ensure_LWC_Disintegrate();
  getServer().getServicesManager().unregisterAll(this);
  FactionsPlusPlugin.info(""String_Node_Str"");
}","@Override public void onDisable(){
  if (null != metrics) {
    try {
      metrics.disable();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  if (LWCBase.isLWC()) {
    LWCFunctions.unhookLWC();
  }
  getServer().getServicesManager().unregisterAll(this);
  FactionsPlusPlugin.info(""String_Node_Str"");
}"
86530,"private static LWC getLWCInstance(){
}","public static LWC getLWCInstance(){
}"
86531,"public static boolean sendToJail(String jailingplayer,CommandSender sender,int argTime){
  Player player=(Player)sender;
  FPlayer fplayer=FPlayers.i.get(sender.getName());
  Faction currentFaction=fplayer.getFaction();
  File currentJailFile=new File(FactionsPlus.folderJails,""String_Node_Str"" + currentFaction.getId());
  World world;
  Player jplayer=server.getPlayer(jailingplayer);
  FPlayer fjplayer=FPlayers.i.get(jplayer);
  if (!fjplayer.getFactionId().equals(fplayer.getFactionId())) {
    fplayer.msg(""String_Node_Str"");
    return false;
  }
  if (currentJailFile.exists()) {
    Scanner scanner=null;
    try {
      scanner=new Scanner(currentJailFile);
      String JailData=scanner.useDelimiter(""String_Node_Str"").next();
      String[] jail_data=JailData.split(""String_Node_Str"");
      double x=Double.parseDouble(jail_data[0]);
      double y=Double.parseDouble(jail_data[1]);
      double z=Double.parseDouble(jail_data[2]);
      float Y=Float.parseFloat(jail_data[3]);
      float p=Float.parseFloat(jail_data[4]);
      world=server.getWorld(jail_data[5]);
      jplayer.teleport(new Location(world,x,y,z,Y,p));
      Faction f=Factions.i.get(jplayer.getName());
      File jailingFile=new File(FactionsPlus.folderJails,""String_Node_Str"" + fjplayer.getFactionId() + ""String_Node_Str""+ jplayer.getName());
      if (!jailingFile.exists()) {
        FileWriter filewrite=new FileWriter(jailingFile,true);
        filewrite.flush();
        filewrite.write(argTime);
        sender.sendMessage(ChatColor.GREEN + jplayer.getName() + ""String_Node_Str"");
        filewrite.close();
      }
 else {
        sender.sendMessage(ChatColor.RED + jplayer.getName() + ""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 finally {
      if (null != scanner) {
        scanner.close();
      }
    }
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  return false;
}","public static boolean sendToJail(String jailingplayer,CommandSender sender,int argTime){
  Player player=(Player)sender;
  FPlayer fplayer=FPlayers.i.get(sender.getName());
  Faction currentFaction=fplayer.getFaction();
  File currentJailFile=new File(FactionsPlus.folderJails,""String_Node_Str"" + currentFaction.getId());
  World world;
  Player jplayer=server.getPlayer(jailingplayer);
  FPlayer fjplayer;
  if (jplayer != null) {
    fjplayer=FPlayers.i.get(jplayer);
  }
 else {
    jplayer=(Player)server.getOfflinePlayer(jailingplayer);
    fjplayer=FPlayers.i.get(jplayer);
  }
  if (!fjplayer.getFactionId().equals(fplayer.getFactionId())) {
    fplayer.msg(""String_Node_Str"");
    return false;
  }
  if (currentJailFile.exists()) {
    Scanner scanner=null;
    try {
      scanner=new Scanner(currentJailFile);
      String JailData=scanner.useDelimiter(""String_Node_Str"").next();
      String[] jail_data=JailData.split(""String_Node_Str"");
      double x=Double.parseDouble(jail_data[0]);
      double y=Double.parseDouble(jail_data[1]);
      double z=Double.parseDouble(jail_data[2]);
      float Y=Float.parseFloat(jail_data[3]);
      float p=Float.parseFloat(jail_data[4]);
      world=server.getWorld(jail_data[5]);
      jplayer.teleport(new Location(world,x,y,z,Y,p));
      Faction f=Factions.i.get(jplayer.getName());
      File jailingFile=new File(FactionsPlus.folderJails,""String_Node_Str"" + fjplayer.getFactionId() + ""String_Node_Str""+ jplayer.getName());
      if (!jailingFile.exists()) {
        FileWriter filewrite=new FileWriter(jailingFile,true);
        filewrite.flush();
        filewrite.write(argTime);
        sender.sendMessage(ChatColor.GREEN + jplayer.getName() + ""String_Node_Str"");
        filewrite.close();
      }
 else {
        sender.sendMessage(ChatColor.RED + jplayer.getName() + ""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
 finally {
      if (null != scanner) {
        scanner.close();
      }
    }
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  return false;
}"
86532,"public void perform(){
  String warpname=this.argAsString(0);
  String pass=null;
  if (this.argAsString(1) != null) {
    pass=this.argAsString(1);
  }
  if (!FactionsPlus.permission.has(sender,""String_Node_Str"")) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  FPlayer fplayer=FPlayers.i.get(sender.getName());
  Faction currentFaction=myFaction;
  Boolean authallow=false;
  if (FactionsPlus.config.getBoolean(""String_Node_Str"")) {
    if (Utilities.isLeader(fplayer)) {
      authallow=true;
    }
  }
  if (FactionsPlus.config.getBoolean(""String_Node_Str"")) {
    if (Utilities.isOfficer(fplayer)) {
      authallow=true;
    }
  }
  if (FactionsPlus.config.getBoolean(""String_Node_Str"")) {
    authallow=true;
  }
  if (!authallow) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (!fplayer.isInOwnTerritory()) {
    if (FactionsPlus.config.getBoolean(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  if (FactionsPlus.config.getInt(""String_Node_Str"") > 0 && !FactionsPlus.config.getBoolean(""String_Node_Str"")) {
    if (!payForCommand(FactionsPlus.config.getInt(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"")) {
      return;
    }
  }
  if (FactionsPlus.config.getInt(""String_Node_Str"") != 0) {
    if (Utilities.getCountOfWarps(currentFaction) >= FactionsPlus.config.getInt(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  File currentWarpFile=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ currentFaction.getId());
  if (!currentWarpFile.exists()) {
    try {
      currentWarpFile.createNewFile();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + currentWarpFile.getName() + ""String_Node_Str""+ e.getMessage());
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
 else {
    try {
      FileInputStream fstream=new FileInputStream(currentWarpFile);
      DataInputStream in=new DataInputStream(fstream);
      BufferedReader br=new BufferedReader(new InputStreamReader(in));
      String strLine;
      while ((strLine=br.readLine()) != null) {
        String[] warp_data=strLine.split(""String_Node_Str"");
        if (warp_data[0].equalsIgnoreCase(warpname)) {
          in.close();
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  Player player=(Player)sender;
  Location loc=player.getLocation();
  try {
    FileWriter filewrite=new FileWriter(currentWarpFile,true);
    String dataAddition;
    if (pass != null) {
      dataAddition=""String_Node_Str"" + pass;
    }
 else {
      dataAddition=""String_Node_Str"";
    }
    filewrite.write(warpname + ""String_Node_Str"" + loc.getX()+ ""String_Node_Str""+ loc.getY()+ ""String_Node_Str""+ loc.getZ()+ ""String_Node_Str""+ loc.getYaw()+ ""String_Node_Str""+ loc.getPitch()+ ""String_Node_Str""+ player.getWorld().getName()+ dataAddition+ ""String_Node_Str"");
    filewrite.close();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ warpname+ ChatColor.GREEN+ ""String_Node_Str"");
  String[] args;
  args=new String[3];
  args[1]=sender.getName();
  args[2]=warpname;
  String announcemsg=FactionsPlusTemplates.Go(""String_Node_Str"",args);
  for (  FPlayer fplayerlisting : currentFaction.getFPlayersWhereOnline(true)) {
    fplayerlisting.msg(announcemsg);
  }
}","public void perform(){
  String warpname=this.argAsString(0);
  String pass=null;
  if (this.argAsString(1) != null) {
    pass=this.argAsString(1);
  }
  if (!FactionsPlus.permission.has(sender,""String_Node_Str"")) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  FPlayer fplayer=FPlayers.i.get(sender.getName());
  Faction currentFaction=myFaction;
  Boolean authallow=false;
  if (FactionsPlus.config.getBoolean(""String_Node_Str"")) {
    authallow=true;
  }
 else {
    if (Utilities.isOfficer(fplayer) && FactionsPlus.config.getBoolean(""String_Node_Str"")) {
      authallow=true;
    }
 else     if (Utilities.isLeader(fplayer) && FactionsPlus.config.getBoolean(""String_Node_Str"")) {
      authallow=true;
    }
  }
  if (!authallow) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (!fplayer.isInOwnTerritory()) {
    if (FactionsPlus.config.getBoolean(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  if (FactionsPlus.config.getInt(""String_Node_Str"") > 0 && !FactionsPlus.config.getBoolean(""String_Node_Str"")) {
    if (!payForCommand(FactionsPlus.config.getInt(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"")) {
      return;
    }
  }
  if (FactionsPlus.config.getInt(""String_Node_Str"") != 0) {
    if (Utilities.getCountOfWarps(currentFaction) >= FactionsPlus.config.getInt(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  File currentWarpFile=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ currentFaction.getId());
  if (!currentWarpFile.exists()) {
    try {
      currentWarpFile.createNewFile();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + currentWarpFile.getName() + ""String_Node_Str""+ e.getMessage());
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
 else {
    try {
      FileInputStream fstream=new FileInputStream(currentWarpFile);
      DataInputStream in=new DataInputStream(fstream);
      BufferedReader br=new BufferedReader(new InputStreamReader(in));
      String strLine;
      while ((strLine=br.readLine()) != null) {
        String[] warp_data=strLine.split(""String_Node_Str"");
        if (warp_data[0].equalsIgnoreCase(warpname)) {
          in.close();
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  Player player=(Player)sender;
  Location loc=player.getLocation();
  try {
    FileWriter filewrite=new FileWriter(currentWarpFile,true);
    String dataAddition;
    if (pass != null) {
      dataAddition=""String_Node_Str"" + pass;
    }
 else {
      dataAddition=""String_Node_Str"";
    }
    filewrite.write(warpname + ""String_Node_Str"" + loc.getX()+ ""String_Node_Str""+ loc.getY()+ ""String_Node_Str""+ loc.getZ()+ ""String_Node_Str""+ loc.getYaw()+ ""String_Node_Str""+ loc.getPitch()+ ""String_Node_Str""+ player.getWorld().getName()+ dataAddition+ ""String_Node_Str"");
    filewrite.close();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ warpname+ ChatColor.GREEN+ ""String_Node_Str"");
  String[] args;
  args=new String[3];
  args[1]=sender.getName();
  args[2]=warpname;
  String announcemsg=FactionsPlusTemplates.Go(""String_Node_Str"",args);
  for (  FPlayer fplayerlisting : currentFaction.getFPlayersWhereOnline(true)) {
    fplayerlisting.msg(announcemsg);
  }
}"
86533,"public void perform(){
  String message=TextUtil.implode(args,""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!FactionsPlus.permission.has(sender,""String_Node_Str"")) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  FPlayer fplayer=FPlayers.i.get(sender.getName());
  Faction currentFaction=fplayer.getFaction();
  Boolean authallow=false;
  if (FactionsPlus.config.getBoolean(""String_Node_Str"")) {
    if (Utilities.isLeader(fplayer)) {
      authallow=true;
    }
  }
  if (FactionsPlus.config.getBoolean(""String_Node_Str"")) {
    if (Utilities.isOfficer(fplayer)) {
      authallow=true;
    }
  }
  if (!authallow) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (FactionsPlus.config.getInt(""String_Node_Str"") > 0) {
    if (!doFinanceCrap(FactionsPlus.config.getInt(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",fplayer)) {
      return;
    }
  }
  String[] args=new String[3];
  args[1]=sender.getName();
  args[2]=message;
  String formatedMessage=FactionsPlusTemplates.Go(""String_Node_Str"",args);
  DataOutputStream announceWrite;
  for (  FPlayer fplayerlisting : currentFaction.getFPlayersWhereOnline(true)) {
    fplayerlisting.msg(formatedMessage);
  }
  try {
    if (!new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ fplayer.getFactionId()).exists()) {
      new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ fplayer.getFactionId()).createNewFile();
    }
    formatedMessage=""String_Node_Str"" + formatedMessage;
    announceWrite=new DataOutputStream(new FileOutputStream(new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ fplayer.getFactionId()),false));
    announceWrite.write(formatedMessage.getBytes());
    announceWrite.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    sender.sendMessage(""String_Node_Str"");
    return;
  }
}","public void perform(){
  String message=TextUtil.implode(args,""String_Node_Str"").replaceAll(""String_Node_Str"",""String_Node_Str"");
  if (!FactionsPlus.permission.has(sender,""String_Node_Str"")) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  FPlayer fplayer=FPlayers.i.get(sender.getName());
  Faction currentFaction=fplayer.getFaction();
  Boolean authallow=false;
  if (FactionsPlus.config.getBoolean(""String_Node_Str"") && Utilities.isLeader(fplayer)) {
    authallow=true;
  }
 else   if (FactionsPlus.config.getBoolean(""String_Node_Str"") && Utilities.isOfficer(fplayer)) {
    authallow=true;
  }
  if (!authallow) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (FactionsPlus.config.getInt(""String_Node_Str"") > 0) {
    if (!doFinanceCrap(FactionsPlus.config.getInt(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"",fplayer)) {
      return;
    }
  }
  String[] args=new String[3];
  args[1]=sender.getName();
  args[2]=message;
  String formatedMessage=FactionsPlusTemplates.Go(""String_Node_Str"",args);
  DataOutputStream announceWrite;
  for (  FPlayer fplayerlisting : currentFaction.getFPlayersWhereOnline(true)) {
    fplayerlisting.msg(formatedMessage);
  }
  try {
    if (!new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ fplayer.getFactionId()).exists()) {
      new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ fplayer.getFactionId()).createNewFile();
    }
    formatedMessage=""String_Node_Str"" + formatedMessage;
    announceWrite=new DataOutputStream(new FileOutputStream(new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ fplayer.getFactionId()),false));
    announceWrite.write(formatedMessage.getBytes());
    announceWrite.close();
  }
 catch (  Exception e) {
    e.printStackTrace();
    sender.sendMessage(""String_Node_Str"");
    return;
  }
}"
86534,"public void perform(){
  String banningThisPlayer=this.argAsString(0);
  Faction pFaction=fme.getFaction();
  if (!FactionsPlus.permission.has(sender,""String_Node_Str"")) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  Boolean authallow=false;
  if (FactionsPlus.config.getBoolean(""String_Node_Str"") && Utilities.isLeader(fme)) {
    authallow=true;
  }
 else   if (FactionsPlus.config.getBoolean(""String_Node_Str"") && Utilities.isOfficer(fme)) {
    authallow=true;
  }
  if (!authallow) {
    fme.msg(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  Player playerBanThisPlayer=Bukkit.getServer().getPlayer(banningThisPlayer);
  FPlayer fPlayerBanThisPlayer=FPlayers.i.get(banningThisPlayer);
  if (Utilities.isLeader(fPlayerBanThisPlayer)) {
    me.sendMessage(""String_Node_Str"");
    return;
  }
  if (fPlayerBanThisPlayer.getFactionId() != fme.getFactionId()) {
    fme.msg(""String_Node_Str"");
    return;
  }
  fPlayerBanThisPlayer.leave(true);
  playerBanThisPlayer.sendMessage(""String_Node_Str"");
  File banFile=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ pFaction.getId()+ ""String_Node_Str""+ banningThisPlayer.toLowerCase());
  if (banFile.exists()) {
    me.sendMessage(""String_Node_Str"");
    return;
  }
 else {
    try {
      banFile.createNewFile();
      me.sendMessage(banningThisPlayer + ""String_Node_Str"");
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public void perform(){
  String banningThisPlayer=this.argAsString(0);
  Faction pFaction=fme.getFaction();
  if (!FactionsPlus.permission.has(sender,""String_Node_Str"")) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  Boolean authallow=false;
  if (FactionsPlus.config.getBoolean(""String_Node_Str"") && Utilities.isLeader(fme)) {
    authallow=true;
  }
 else   if (FactionsPlus.config.getBoolean(""String_Node_Str"") && Utilities.isOfficer(fme)) {
    authallow=true;
  }
  if (!authallow) {
    fme.msg(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  Player playerBanThisPlayer=Bukkit.getServer().getPlayer(banningThisPlayer);
  FPlayer fPlayerBanThisPlayer=FPlayers.i.get(banningThisPlayer);
  if (Utilities.isLeader(fPlayerBanThisPlayer)) {
    me.sendMessage(""String_Node_Str"");
    return;
  }
  if (!fPlayerBanThisPlayer.getFactionId().equalsIgnoreCase(fme.getFactionId())) {
    fme.msg(""String_Node_Str"");
    return;
  }
  fPlayerBanThisPlayer.leave(true);
  playerBanThisPlayer.sendMessage(""String_Node_Str"");
  File banFile=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ pFaction.getId()+ ""String_Node_Str""+ banningThisPlayer.toLowerCase());
  if (banFile.exists()) {
    me.sendMessage(""String_Node_Str"");
    return;
  }
 else {
    try {
      banFile.createNewFile();
      me.sendMessage(banningThisPlayer + ""String_Node_Str"");
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}"
86535,"public void perform(){
  String playerToJail=this.argAsString(0);
  FPlayer fPlayerBanThisPlayer=FPlayers.i.get(playerToJail);
  if (fPlayerBanThisPlayer.getFactionId() != fme.getFactionId()) {
    fme.msg(""String_Node_Str"");
    return;
  }
  FactionsPlusJail.sendToJail(playerToJail,fme.getPlayer(),-1);
}","public void perform(){
  String playerToJail=this.argAsString(0);
  FPlayer fPlayerBanThisPlayer=FPlayers.i.get(playerToJail);
  if (!fPlayerBanThisPlayer.getFactionId().equalsIgnoreCase(fme.getFactionId())) {
    fme.msg(""String_Node_Str"");
    return;
  }
  FactionsPlusJail.sendToJail(playerToJail,fme.getPlayer(),-1);
}"
86536,"public static boolean sendToJail(String jailingplayer,CommandSender sender,Integer t){
  Player player=(Player)sender;
  FPlayer fplayer=FPlayers.i.get(sender.getName());
  Faction currentFaction=fplayer.getFaction();
  File currentJailFile=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ currentFaction.getId());
  World world;
  Player jplayer=server.getPlayer(jailingplayer);
  FPlayer fjplayer=FPlayers.i.get(jplayer);
  if (!fjplayer.getFactionId().equals(fplayer.getFactionId())) {
    fplayer.msg(""String_Node_Str"");
    return false;
  }
  if (currentJailFile.exists()) {
    try {
      String JailData=new Scanner(currentJailFile).useDelimiter(""String_Node_Str"").next();
      String[] jail_data=JailData.split(""String_Node_Str"");
      double x=Double.parseDouble(jail_data[0]);
      double y=Double.parseDouble(jail_data[1]);
      double z=Double.parseDouble(jail_data[2]);
      float Y=Float.parseFloat(jail_data[3]);
      float p=Float.parseFloat(jail_data[4]);
      world=(World)server.getWorld(jail_data[5]);
      jplayer.teleport(new Location(world,x,y,z,Y,p));
      Faction f=Factions.i.get(jplayer.getName());
      File jailingFile=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ fjplayer.getFactionId()+ ""String_Node_Str""+ jplayer.getName());
      if (!jailingFile.exists()) {
        FileWriter filewrite=new FileWriter(jailingFile,true);
        filewrite.flush();
        filewrite.write(t);
        sender.sendMessage(ChatColor.GREEN + jplayer.getName() + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        filewrite.close();
      }
 else {
        sender.sendMessage(ChatColor.RED + jplayer.getName() + ""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  return false;
}","public static boolean sendToJail(String jailingplayer,CommandSender sender,Integer t){
  Player player=(Player)sender;
  FPlayer fplayer=FPlayers.i.get(sender.getName());
  Faction currentFaction=fplayer.getFaction();
  File currentJailFile=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ currentFaction.getId());
  World world;
  Player jplayer=server.getPlayer(jailingplayer);
  FPlayer fjplayer=FPlayers.i.get(jplayer);
  if (!fjplayer.getFactionId().equals(fplayer.getFactionId())) {
    fplayer.msg(""String_Node_Str"");
    return false;
  }
  if (currentJailFile.exists()) {
    try {
      String JailData=new Scanner(currentJailFile).useDelimiter(""String_Node_Str"").next();
      String[] jail_data=JailData.split(""String_Node_Str"");
      double x=Double.parseDouble(jail_data[0]);
      double y=Double.parseDouble(jail_data[1]);
      double z=Double.parseDouble(jail_data[2]);
      float Y=Float.parseFloat(jail_data[3]);
      float p=Float.parseFloat(jail_data[4]);
      world=(World)server.getWorld(jail_data[5]);
      jplayer.teleport(new Location(world,x,y,z,Y,p));
      Faction f=Factions.i.get(jplayer.getName());
      File jailingFile=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ fjplayer.getFactionId()+ ""String_Node_Str""+ jplayer.getName());
      if (!jailingFile.exists()) {
        FileWriter filewrite=new FileWriter(jailingFile,true);
        filewrite.flush();
        filewrite.write(t);
        sender.sendMessage(ChatColor.GREEN + jplayer.getName() + ""String_Node_Str"");
        filewrite.close();
      }
 else {
        sender.sendMessage(ChatColor.RED + jplayer.getName() + ""String_Node_Str"");
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
 else {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
  return false;
}"
86537,"@EventHandler public void onFPlayerJoinEvent(FPlayerJoinEvent event){
  if (event.isCancelled()) {
    return;
  }
  File banFile=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ event.getFaction().getId()+ ""String_Node_Str""+ event.getFPlayer().getName().toLowerCase());
  if (banFile.exists()) {
    event.getFPlayer().msg(""String_Node_Str"");
    event.getFPlayer().leave(true);
    event.setCancelled(true);
    return;
  }
  if (FactionsPlus.config.getInt(""String_Node_Str"") > 0) {
    if (event.getFaction().isPeaceful()) {
      Utilities.addPower(event.getFPlayer(),FactionsPlus.config.getInt(""String_Node_Str""));
    }
  }
}","@EventHandler public void onFPlayerJoinEvent(FPlayerJoinEvent event){
  if (event.isCancelled()) {
    return;
  }
  File banFile=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ event.getFaction().getId()+ ""String_Node_Str""+ event.getFPlayer().getName().toLowerCase());
  if (banFile.exists()) {
    event.getFPlayer().msg(""String_Node_Str"");
    event.getFPlayer().leave(true);
    event.setCancelled(true);
    return;
  }
  if (FactionsPlus.config.getInt(""String_Node_Str"") > 0) {
    if (event.getFaction().isPeaceful()) {
      Utilities.addPower(event.getFPlayer(),FactionsPlus.config.getInt(""String_Node_Str""));
    }
  }
  if (Utilities.isJailed(event.getFPlayer().getPlayer())) {
    event.getFPlayer().getPlayer().teleport(FactionsPlusJail.getJailLocation(event.getFPlayer().getPlayer()));
  }
}"
86538,"@EventHandler public void onFactionDisband(FactionDisbandEvent event){
  Faction faction=event.getFaction();
  File tempFile=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ faction.getId());
  if (tempFile.exists()) {
    tempFile.delete();
  }
  tempFile=null;
  File tempDir=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator);
  if (tempDir.isDirectory()) {
    for (    File file : tempDir.listFiles()) {
      if (file.getName().startsWith(faction.getId() + ""String_Node_Str"")) {
        file.delete();
      }
    }
  }
  tempDir=null;
  tempFile=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ faction.getId());
  if (tempFile.exists()) {
    tempFile.delete();
  }
  tempFile=null;
  tempDir=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator);
  if (tempDir.isDirectory()) {
    for (    File file : tempDir.listFiles()) {
      if (file.getName().startsWith(""String_Node_Str"" + faction.getId() + ""String_Node_Str"")) {
        file.delete();
      }
    }
  }
  tempDir=null;
  tempFile=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ faction.getId());
  if (tempFile.exists()) {
    tempFile.delete();
  }
  tempFile=null;
}","@EventHandler public void onFactionDisband(FactionDisbandEvent event){
  Faction faction=event.getFaction();
  File tempFile=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ faction.getId());
  if (tempFile.exists()) {
    tempFile.delete();
  }
  tempFile=null;
  File tempDir=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator);
  if (tempDir.isDirectory()) {
    for (    File file : tempDir.listFiles()) {
      if (file.getName().startsWith(faction.getId() + ""String_Node_Str"")) {
        file.delete();
      }
    }
  }
  tempDir=null;
  tempFile=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ faction.getId());
  if (tempFile.exists()) {
    tempFile.delete();
  }
  tempFile=null;
  tempDir=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator);
  if (tempDir.isDirectory()) {
    for (    File file : tempDir.listFiles()) {
      if (file.getName().startsWith(""String_Node_Str"" + faction.getId() + ""String_Node_Str"")) {
        file.delete();
      }
 else       if (file.getName().equals(""String_Node_Str"" + faction.getId())) {
        file.delete();
      }
    }
  }
  tempFile=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ faction.getId());
  if (tempFile.exists()) {
    tempFile.delete();
  }
  tempFile=null;
}"
86539,"public void perform(){
  String warpname=this.argAsString(0);
  String pass=null;
  if (this.argAsString(1) != null) {
    pass=this.argAsString(1);
  }
  if (!FactionsPlus.permission.has(sender,""String_Node_Str"")) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  FPlayer fplayer=FPlayers.i.get(sender.getName());
  Faction currentFaction=myFaction;
  Boolean authallow=false;
  if (FactionsPlus.config.getBoolean(""String_Node_Str"")) {
    if (Utilities.isLeader(fplayer)) {
      authallow=true;
    }
  }
  if (FactionsPlus.config.getBoolean(""String_Node_Str"")) {
    if (Utilities.isOfficer(fplayer)) {
      authallow=true;
    }
  }
  if (FactionsPlus.config.getBoolean(""String_Node_Str"")) {
    authallow=true;
  }
  if (!authallow) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (!fplayer.isInOwnTerritory()) {
    if (FactionsPlus.config.getBoolean(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  if (FactionsPlus.config.getInt(""String_Node_Str"") > 0 && !FactionsPlus.config.getBoolean(""String_Node_Str"")) {
    if (!payForCommand(FactionsPlus.config.getInt(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"")) {
      return;
    }
  }
  if (FactionsPlus.config.getInt(""String_Node_Str"") != 0) {
    if (Utilities.getCountOfWarps(currentFaction) >= FactionsPlus.config.getInt(""String_Node_Str"")) {
      sender.sendMessage(""String_Node_Str"");
      return;
    }
  }
  File currentWarpFile=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ currentFaction.getId());
  if (!currentWarpFile.exists()) {
    try {
      currentWarpFile.createNewFile();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + currentWarpFile.getName() + ""String_Node_Str""+ e.getMessage());
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
 else {
  }
  Player player=(Player)sender;
  Location loc=player.getLocation();
  try {
    FileWriter filewrite=new FileWriter(currentWarpFile,true);
    String dataAddition;
    if (pass != null) {
      dataAddition=""String_Node_Str"" + pass;
    }
 else {
      dataAddition=""String_Node_Str"";
    }
    filewrite.write(warpname + ""String_Node_Str"" + loc.getX()+ ""String_Node_Str""+ loc.getY()+ ""String_Node_Str""+ loc.getZ()+ ""String_Node_Str""+ loc.getYaw()+ ""String_Node_Str""+ loc.getPitch()+ ""String_Node_Str""+ player.getWorld().getName()+ dataAddition+ ""String_Node_Str"");
    filewrite.close();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ warpname+ ChatColor.GREEN+ ""String_Node_Str"");
  String[] args;
  args=new String[3];
  args[1]=sender.getName();
  args[2]=warpname;
  String announcemsg=FactionsPlusTemplates.Go(""String_Node_Str"",args);
  for (  FPlayer fplayerlisting : currentFaction.getFPlayersWhereOnline(true)) {
    fplayerlisting.msg(announcemsg);
  }
}","public void perform(){
  String warpname=this.argAsString(0);
  String pass=null;
  if (this.argAsString(1) != null) {
    pass=this.argAsString(1);
  }
  if (!FactionsPlus.permission.has(sender,""String_Node_Str"")) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  FPlayer fplayer=FPlayers.i.get(sender.getName());
  Faction currentFaction=myFaction;
  Boolean authallow=false;
  if (FactionsPlus.config.getBoolean(""String_Node_Str"")) {
    if (Utilities.isLeader(fplayer)) {
      authallow=true;
    }
  }
  if (FactionsPlus.config.getBoolean(""String_Node_Str"")) {
    if (Utilities.isOfficer(fplayer)) {
      authallow=true;
    }
  }
  if (FactionsPlus.config.getBoolean(""String_Node_Str"")) {
    authallow=true;
  }
  if (!authallow) {
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  if (!fplayer.isInOwnTerritory()) {
    if (FactionsPlus.config.getBoolean(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  if (FactionsPlus.config.getInt(""String_Node_Str"") > 0 && !FactionsPlus.config.getBoolean(""String_Node_Str"")) {
    if (!payForCommand(FactionsPlus.config.getInt(""String_Node_Str""),""String_Node_Str"",""String_Node_Str"")) {
      return;
    }
  }
  if (FactionsPlus.config.getInt(""String_Node_Str"") != 0) {
    if (Utilities.getCountOfWarps(currentFaction) >= FactionsPlus.config.getInt(""String_Node_Str"")) {
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
  File currentWarpFile=new File(""String_Node_Str"" + File.separator + ""String_Node_Str""+ File.separator+ ""String_Node_Str""+ File.separator+ currentFaction.getId());
  if (!currentWarpFile.exists()) {
    try {
      currentWarpFile.createNewFile();
    }
 catch (    Exception e) {
      System.out.println(""String_Node_Str"" + currentWarpFile.getName() + ""String_Node_Str""+ e.getMessage());
      sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
      return;
    }
  }
 else {
    try {
      FileInputStream fstream=new FileInputStream(currentWarpFile);
      DataInputStream in=new DataInputStream(fstream);
      BufferedReader br=new BufferedReader(new InputStreamReader(in));
      String strLine;
      while ((strLine=br.readLine()) != null) {
        String[] warp_data=strLine.split(""String_Node_Str"");
        if (warp_data[0].equalsIgnoreCase(warpname)) {
          in.close();
          sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
          return;
        }
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  Player player=(Player)sender;
  Location loc=player.getLocation();
  try {
    FileWriter filewrite=new FileWriter(currentWarpFile,true);
    String dataAddition;
    if (pass != null) {
      dataAddition=""String_Node_Str"" + pass;
    }
 else {
      dataAddition=""String_Node_Str"";
    }
    filewrite.write(warpname + ""String_Node_Str"" + loc.getX()+ ""String_Node_Str""+ loc.getY()+ ""String_Node_Str""+ loc.getZ()+ ""String_Node_Str""+ loc.getYaw()+ ""String_Node_Str""+ loc.getPitch()+ ""String_Node_Str""+ player.getWorld().getName()+ dataAddition+ ""String_Node_Str"");
    filewrite.close();
  }
 catch (  Exception e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    sender.sendMessage(ChatColor.RED + ""String_Node_Str"");
    return;
  }
  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.WHITE+ warpname+ ChatColor.GREEN+ ""String_Node_Str"");
  String[] args;
  args=new String[3];
  args[1]=sender.getName();
  args[2]=warpname;
  String announcemsg=FactionsPlusTemplates.Go(""String_Node_Str"",args);
  for (  FPlayer fplayerlisting : currentFaction.getFPlayersWhereOnline(true)) {
    fplayerlisting.msg(announcemsg);
  }
}"
86540,"public Subscription updateSubscription(final Subscription subscription,@Nullable final DateTime requestedDate,@Nullable final BillingActionPolicy billingPolicy,final int timeoutSec,final RequestOptions inputOptions) throws KillBillClientException {
  Preconditions.checkNotNull(subscription.getSubscriptionId(),""String_Node_Str"");
  Preconditions.checkNotNull(subscription.getProductName(),""String_Node_Str"");
  Preconditions.checkNotNull(subscription.getBillingPeriod(),""String_Node_Str"");
  Preconditions.checkNotNull(subscription.getPriceList(),""String_Node_Str"");
  final String uri=JaxrsResource.SUBSCRIPTIONS_PATH + ""String_Node_Str"" + subscription.getSubscriptionId();
  final Multimap<String,String> queryParams=HashMultimap.<String,String>create(inputOptions.getQueryParams());
  queryParams.put(JaxrsResource.QUERY_CALL_COMPLETION,timeoutSec > 0 ? ""String_Node_Str"" : ""String_Node_Str"");
  queryParams.put(JaxrsResource.QUERY_CALL_TIMEOUT,String.valueOf(timeoutSec));
  if (requestedDate != null) {
    queryParams.put(JaxrsResource.QUERY_REQUESTED_DT,requestedDate.toDateTimeISO().toString());
  }
  if (billingPolicy != null) {
    queryParams.put(JaxrsResource.QUERY_BILLING_POLICY,billingPolicy.toString());
  }
  final RequestOptions requestOptions=inputOptions.extend().withQueryParams(queryParams).build();
  return httpClient.doPut(uri,subscription,Subscription.class,inputOptions);
}","public Subscription updateSubscription(final Subscription subscription,@Nullable final DateTime requestedDate,@Nullable final BillingActionPolicy billingPolicy,final int timeoutSec,final RequestOptions inputOptions) throws KillBillClientException {
  Preconditions.checkNotNull(subscription.getSubscriptionId(),""String_Node_Str"");
  Preconditions.checkNotNull(subscription.getProductName(),""String_Node_Str"");
  Preconditions.checkNotNull(subscription.getBillingPeriod(),""String_Node_Str"");
  Preconditions.checkNotNull(subscription.getPriceList(),""String_Node_Str"");
  final String uri=JaxrsResource.SUBSCRIPTIONS_PATH + ""String_Node_Str"" + subscription.getSubscriptionId();
  final Multimap<String,String> queryParams=HashMultimap.<String,String>create(inputOptions.getQueryParams());
  queryParams.put(JaxrsResource.QUERY_CALL_COMPLETION,timeoutSec > 0 ? ""String_Node_Str"" : ""String_Node_Str"");
  queryParams.put(JaxrsResource.QUERY_CALL_TIMEOUT,String.valueOf(timeoutSec));
  if (requestedDate != null) {
    queryParams.put(JaxrsResource.QUERY_REQUESTED_DT,requestedDate.toDateTimeISO().toString());
  }
  if (billingPolicy != null) {
    queryParams.put(JaxrsResource.QUERY_BILLING_POLICY,billingPolicy.toString());
  }
  final RequestOptions requestOptions=inputOptions.extend().withQueryParams(queryParams).build();
  return httpClient.doPut(uri,subscription,Subscription.class,requestOptions);
}"
86541,"public Payment createPayment(final UUID accountId,@Nullable final UUID paymentMethodId,final PaymentTransaction paymentTransaction,@Nullable List<String> controlPluginNames,final Map<String,String> pluginProperties,final RequestOptions options) throws KillBillClientException {
  Preconditions.checkNotNull(accountId,""String_Node_Str"");
  Preconditions.checkNotNull(paymentTransaction.getTransactionType(),""String_Node_Str"");
  Preconditions.checkArgument(""String_Node_Str"".equals(paymentTransaction.getTransactionType()) || ""String_Node_Str"".equals(paymentTransaction.getTransactionType()) || ""String_Node_Str"".equals(paymentTransaction.getTransactionType()),""String_Node_Str"" + paymentTransaction.getTransactionType());
  Preconditions.checkNotNull(paymentTransaction.getAmount(),""String_Node_Str"");
  Preconditions.checkNotNull(paymentTransaction.getCurrency(),""String_Node_Str"");
  final String uri=JaxrsResource.ACCOUNTS_PATH + ""String_Node_Str"" + accountId+ ""String_Node_Str""+ JaxrsResource.PAYMENTS;
  final Multimap<String,String> params=HashMultimap.<String,String>create();
  if (paymentMethodId != null) {
    params.put(""String_Node_Str"",paymentMethodId.toString());
  }
  if (controlPluginNames != null) {
    params.putAll(KillBillHttpClient.CONTROL_PLUGIN_NAME,controlPluginNames);
  }
  storePluginPropertiesAsParams(pluginProperties,params);
  final RequestOptions requestOptions=options.extend().withQueryParams(params).withFollowLocation(true).build();
  return httpClient.doPost(uri,paymentTransaction,Payment.class,requestOptions);
}","public Payment createPayment(final UUID accountId,@Nullable final UUID paymentMethodId,final PaymentTransaction paymentTransaction,@Nullable List<String> controlPluginNames,final Map<String,String> pluginProperties,final RequestOptions inputOptions) throws KillBillClientException {
  Preconditions.checkNotNull(accountId,""String_Node_Str"");
  Preconditions.checkNotNull(paymentTransaction.getTransactionType(),""String_Node_Str"");
  Preconditions.checkArgument(""String_Node_Str"".equals(paymentTransaction.getTransactionType()) || ""String_Node_Str"".equals(paymentTransaction.getTransactionType()) || ""String_Node_Str"".equals(paymentTransaction.getTransactionType()),""String_Node_Str"" + paymentTransaction.getTransactionType());
  Preconditions.checkNotNull(paymentTransaction.getAmount(),""String_Node_Str"");
  Preconditions.checkNotNull(paymentTransaction.getCurrency(),""String_Node_Str"");
  final String uri=JaxrsResource.ACCOUNTS_PATH + ""String_Node_Str"" + accountId+ ""String_Node_Str""+ JaxrsResource.PAYMENTS;
  final Multimap<String,String> params=HashMultimap.create(inputOptions.getQueryParams());
  if (paymentMethodId != null) {
    params.put(""String_Node_Str"",paymentMethodId.toString());
  }
  if (controlPluginNames != null) {
    params.putAll(KillBillHttpClient.CONTROL_PLUGIN_NAME,controlPluginNames);
  }
  storePluginPropertiesAsParams(pluginProperties,params);
  final Boolean followLocation=MoreObjects.firstNonNull(inputOptions.getFollowLocation(),Boolean.TRUE);
  final RequestOptions requestOptions=inputOptions.extend().withQueryParams(params).withFollowLocation(followLocation).build();
  return httpClient.doPost(uri,paymentTransaction,Payment.class,requestOptions);
}"
86542,"public RequestOptionsBuilder extend(){
  final RequestOptionsBuilder builder=new RequestOptionsBuilder();
  builder.headers.putAll(this.headers);
  return builder.withRequestId(requestId).withUser(user).withPassword(password).withCreatedBy(createdBy).withCreatedBy(reason).withComment(comment).withTenantApiKey(tenantApiKey).withTenantApiSecret(tenantApiSecret).withQueryParams(queryParams).withFollowLocation(followLocation).withQueryParamsForFollow(queryParamsForFollow);
}","public RequestOptionsBuilder extend(){
  final RequestOptionsBuilder builder=new RequestOptionsBuilder();
  builder.headers.putAll(this.headers);
  return builder.withRequestId(requestId).withUser(user).withPassword(password).withCreatedBy(createdBy).withReason(reason).withComment(comment).withTenantApiKey(tenantApiKey).withTenantApiSecret(tenantApiSecret).withQueryParams(queryParams).withFollowLocation(followLocation).withQueryParamsForFollow(queryParamsForFollow);
}"
86543,"public Payment voidPayment(final UUID paymentId,final String paymentExternalKey,final String transactionExternalKey,final Map<String,String> pluginProperties,final String createdBy,final String reason,final String comment) throws KillBillClientException {
  Preconditions.checkState(paymentId != null || paymentExternalKey != null,""String_Node_Str"");
  final String uri=(paymentId != null) ? JaxrsResource.PAYMENTS_PATH + ""String_Node_Str"" + paymentId : JaxrsResource.PAYMENTS_PATH;
  final PaymentTransaction paymentTransaction=new PaymentTransaction();
  paymentTransaction.setTransactionExternalKey(transactionExternalKey);
  final Multimap<String,String> params=HashMultimap.<String,String>create();
  storePluginPropertiesAsParams(pluginProperties,params);
  final Multimap<String,String> queryParams=paramsWithAudit(params,createdBy,reason,comment);
  return httpClient.doDeleteAndFollowLocation(uri,paymentTransaction,queryParams,Payment.class);
}","public Payment voidPayment(final UUID paymentId,final String paymentExternalKey,final String transactionExternalKey,final Map<String,String> pluginProperties,final String createdBy,final String reason,final String comment) throws KillBillClientException {
  Preconditions.checkState(paymentId != null || paymentExternalKey != null,""String_Node_Str"");
  final String uri=(paymentId != null) ? JaxrsResource.PAYMENTS_PATH + ""String_Node_Str"" + paymentId : JaxrsResource.PAYMENTS_PATH;
  final PaymentTransaction paymentTransaction=new PaymentTransaction();
  if (paymentExternalKey != null) {
    paymentTransaction.setPaymentExternalKey(paymentExternalKey);
  }
  paymentTransaction.setTransactionExternalKey(transactionExternalKey);
  final Multimap<String,String> params=HashMultimap.<String,String>create();
  storePluginPropertiesAsParams(pluginProperties,params);
  final Multimap<String,String> queryParams=paramsWithAudit(params,createdBy,reason,comment);
  return httpClient.doDeleteAndFollowLocation(uri,paymentTransaction,queryParams,Payment.class);
}"
86544,"private String getUniqueValue(final Multimap<String,String> options,final String key){
  final Collection<String> values=options.get(key);
  if (values == null) {
    return null;
  }
 else {
    Preconditions.checkState(values.size() == 1,""String_Node_Str"" + key);
    return values.iterator().next();
  }
}","private String getUniqueValue(final Multimap<String,String> options,final String key){
  final Collection<String> values=options.get(key);
  if (values == null || values.size() == 0) {
    return null;
  }
 else {
    Preconditions.checkState(values.size() == 1,""String_Node_Str"" + key);
    return values.iterator().next();
  }
}"
86545,"public void payAllInvoices(final UUID accountId,final boolean externalPayment,final BigDecimal paymentAmount,final String createdBy,final String reason,final String comment) throws KillBillClientException {
  final String uri=JaxrsResource.ACCOUNTS_PATH + ""String_Node_Str"" + accountId+ ""String_Node_Str""+ JaxrsResource.PAYMENTS;
  final Map<String,String> queryParams=paramsWithAudit(ImmutableMap.<String,String>of(""String_Node_Str"",String.valueOf(externalPayment),""String_Node_Str"",String.valueOf(paymentAmount)),createdBy,reason,comment);
  httpClient.doPost(uri,null,queryParams);
}","public void payAllInvoices(final UUID accountId,final boolean externalPayment,final BigDecimal paymentAmount,final String createdBy,final String reason,final String comment) throws KillBillClientException {
  final String uri=JaxrsResource.ACCOUNTS_PATH + ""String_Node_Str"" + accountId+ ""String_Node_Str""+ JaxrsResource.PAYMENTS;
  final Map<String,String> params=new HashMap<String,String>();
  params.put(JaxrsResource.QUERY_PAYMENT_EXTERNAL,String.valueOf(externalPayment));
  if (paymentAmount != null) {
    params.put(""String_Node_Str"",String.valueOf(paymentAmount));
  }
  final Map<String,String> queryParams=paramsWithAudit(params,createdBy,reason,comment);
  httpClient.doPost(uri,null,queryParams);
}"
86546,"public void payAllInvoices(final UUID accountId,final boolean externalPayment,final BigDecimal paymentAmount,final String createdBy,final String reason,final String comment) throws KillBillClientException {
  final String uri=JaxrsResource.ACCOUNTS_PATH + ""String_Node_Str"" + accountId+ ""String_Node_Str""+ JaxrsResource.PAYMENTS;
  final Map<String,String> queryParams=paramsWithAudit(ImmutableMap.<String,String>of(""String_Node_Str"",String.valueOf(externalPayment),""String_Node_Str"",String.valueOf(paymentAmount)),createdBy,reason,comment);
  httpClient.doPost(uri,null,queryParams);
}","public void payAllInvoices(final UUID accountId,final boolean externalPayment,final BigDecimal paymentAmount,final String createdBy,final String reason,final String comment) throws KillBillClientException {
  final String uri=JaxrsResource.ACCOUNTS_PATH + ""String_Node_Str"" + accountId+ ""String_Node_Str""+ JaxrsResource.PAYMENTS;
  final Map<String,String> params=new HashMap<String,String>();
  params.put(JaxrsResource.QUERY_PAYMENT_EXTERNAL,String.valueOf(externalPayment));
  if (paymentAmount != null) {
    params.put(""String_Node_Str"",String.valueOf(paymentAmount));
  }
  final Map<String,String> queryParams=paramsWithAudit(params,createdBy,reason,comment);
  httpClient.doPost(uri,null,queryParams);
}"
86547,"/** 
 * This method performs the revertible insertion of a point in a triangle of the mesh. It first remember all the elements that will be needed to finalize the  reversion of the insertion, and then try it.<br/> Our goal here is to fail fast : as soon as we find an encroached edge, we stop our process and we revert our operations.
 * @param container
 * @param pt
 * @return
 * @throws DelaunayError 
 */
private DEdge insertInTriangleRevertible(DTriangle container,DPoint pt) throws DelaunayError {
  LinkedList<DEdge> badEdges=new LinkedList<DEdge>();
  Deque<DEdge> swapMem=new LinkedList<DEdge>();
  DEdge ret;
  DEdge eMem0=container.getEdge(0);
  DEdge eMem1=container.getEdge(1);
  DEdge eMem2=container.getEdge(2);
  DPoint mem=container.getOppositePoint(eMem0);
  ret=initPointInTriangle(pt,container,badEdges);
  if (ret != null) {
    revertPointInTriangleInsertion(container,pt,mem,eMem1,eMem2);
    return ret;
  }
  ret=revertibleSwapping(badEdges,swapMem,pt);
  if (ret != null) {
    Iterator<DEdge> it=swapMem.descendingIterator();
    proceedSwaps(it);
    if (!container.belongsTo(pt)) {
      eMem0.deepSwap();
    }
    checkMemEdges(eMem1,pt,triangleList.get(triangleList.size() - 1),triangleList.get(triangleList.size() - 2));
    checkMemEdges(eMem2,pt,triangleList.get(triangleList.size() - 1),triangleList.get(triangleList.size() - 2));
    revertPointInTriangleInsertion(container,pt,mem,eMem1,eMem2);
  }
  return ret;
}","/** 
 * This method performs the revertible insertion of a point in a triangle of the mesh. It first remember all the elements that will be needed to finalize the  reversion of the insertion, and then try it.<br/> Our goal here is to fail fast : as soon as we find an encroached edge, we stop our process and we revert our operations.
 * @param container
 * @param pt
 * @return
 * @throws DelaunayError 
 */
private DEdge insertInTriangleRevertible(DTriangle container,DPoint pt) throws DelaunayError {
  LinkedList<DEdge> badEdges=new LinkedList<DEdge>();
  Deque<DEdge> swapMem=new LinkedList<DEdge>();
  DEdge ret;
  DEdge eMem0=container.getEdge(0);
  DEdge eMem1=container.getEdge(1);
  DEdge eMem2=container.getEdge(2);
  DPoint mem=container.getOppositePoint(eMem0);
  ret=initPointInTriangle(pt,container,badEdges);
  if (ret != null) {
    revertPointInTriangleInsertion(container,pt,mem,eMem1,eMem2);
    return ret;
  }
  ret=revertibleSwapping(badEdges,swapMem,pt);
  if (ret != null) {
    Iterator<DEdge> it=swapMem.descendingIterator();
    proceedSwaps(it);
    eMem0.deepSwap();
    DTriangle actualContainer=container;
    if (eMem0.getLeft() != null && eMem0.getLeft().belongsTo(pt)) {
      actualContainer=eMem0.getLeft();
    }
 else     if (eMem0.getRight() != null && eMem0.getRight().belongsTo(pt)) {
      actualContainer=eMem0.getRight();
    }
    checkMemEdges(eMem1,pt,triangleList.get(triangleList.size() - 1),triangleList.get(triangleList.size() - 2));
    checkMemEdges(eMem2,pt,triangleList.get(triangleList.size() - 1),triangleList.get(triangleList.size() - 2));
    revertPointInTriangleInsertion(actualContainer,pt,mem,eMem1,eMem2);
  }
  return ret;
}"
86548,"/** 
 * A configuration from the contour line of the Chezine river.
 * @throws DelaunayError 
 */
public void testRefinementChezine3() throws DelaunayError {
  ConstrainedMesh mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new DEdge(0,284,0,20,286,0));
  mesh.addConstraintEdge(new DEdge(20,36,0,40,0,0));
  mesh.addConstraintEdge(new DEdge(20,286,0,40,300,0));
  mesh.processDelaunay();
  mesh.refineMesh(1,new SkinnyEvaluator(15));
  assertTrue(true);
}","/** 
 * A configuration from the contour line of the Chezine river.
 * @throws DelaunayError 
 */
public void testRefinementChezine3() throws DelaunayError {
  ConstrainedMesh mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new DEdge(0,142,0,10,143,0));
  mesh.addConstraintEdge(new DEdge(10,18,0,20,0,0));
  mesh.addConstraintEdge(new DEdge(10,143,0,20,149,0));
  mesh.processDelaunay();
  mesh.edgeSplitting(1);
  assertTrianglesTopology(mesh);
  mesh.refineMesh(.5,new SkinnyEvaluator(15));
  assertTrianglesTopology(mesh);
  assertTrue(true);
}"
86549,"/** 
 * When inserting a point in the already processed mesh, we must determine  if we are in a triangle or on an edge. Here, we are on an edge.<br/> <code>contEdge</code> will be split in two edges using <code>pt</code>. The new point, new edges and new triangles will be added to the mesh. The edges that could be  eligible for a flip-flap are stored in <code>badEdges</code> The method return a DEdge, which is the first edge of the triangles linked (left or right) to the original edge that becomes encroached because of the insertion, if any.
 * @param pt
 * @param contEdge
 * @param badEdges
 * @return
 * @throws DelaunayError 
 */
final DEdge initPointOnEdge(final DPoint pt,DEdge contEdge,Deque<DEdge> badEdges) throws DelaunayError {
  DTriangle left=contEdge.getLeft();
  DTriangle right=contEdge.getRight();
  DEdge r1=null;
  DEdge r2=null;
  DEdge l1=null;
  DEdge l2=null;
  DEdge otherPart=new DEdge(pt,contEdge.getEndPoint());
  if (left != null) {
    l1=left.getOppositeEdge(contEdge.getEndPoint());
    l2=left.getOppositeEdge(contEdge.getStartPoint());
    badEdges.add(l1);
    badEdges.add(l2);
    DPoint opLeft=left.getOppositePoint(contEdge);
    DEdge lastLeft=new DEdge(pt,opLeft);
    DTriangle otl=new DTriangle(l2,otherPart,lastLeft);
    left.setEdge(left.getEdgeIndex(l2),lastLeft);
    edgeGID++;
    lastLeft.setGID(edgeGID);
    edges.add(lastLeft);
    addTriangle(otl);
  }
  if (right != null) {
    r1=right.getOppositeEdge(contEdge.getEndPoint());
    r2=right.getOppositeEdge(contEdge.getStartPoint());
    badEdges.add(r1);
    badEdges.add(r2);
    DPoint opRight=right.getOppositePoint(contEdge);
    DEdge lastRight=new DEdge(pt,opRight);
    DTriangle otr=new DTriangle(r2,otherPart,lastRight);
    right.setEdge(right.getEdgeIndex(r2),lastRight);
    edgeGID++;
    lastRight.setGID(edgeGID);
    edges.add(lastRight);
    addTriangle(otr);
  }
  contEdge.setEndPoint(pt);
  pointGID++;
  pt.setGID(pointGID);
  points.add(pt);
  edgeGID++;
  otherPart.setGID(edgeGID);
  edges.add(otherPart);
  contEdge.setEndPoint(pt);
  if (left != null) {
    left.recomputeCenter();
    if (l1.isEncroached()) {
      return l1;
    }
 else     if (l2.isEncroached()) {
      return l2;
    }
  }
  if (right != null) {
    right.recomputeCenter();
    if (r1.isEncroached()) {
      return r1;
    }
 else     if (r2.isEncroached()) {
      return r2;
    }
  }
  return null;
}","/** 
 * When inserting a point in the already processed mesh, we must determine  if we are in a triangle or on an edge. Here, we are on an edge.<br/> <code>contEdge</code> will be split in two edges using <code>pt</code>. The new point, new edges and new triangles will be added to the mesh. The edges that could be  eligible for a flip-flap are stored in <code>badEdges</code> The method return a DEdge, which is the first edge of the triangles linked (left or right) to the original edge that becomes encroached because of the insertion, if any.
 * @param pt
 * @param contEdge
 * @param badEdges
 * @return
 * @throws DelaunayError 
 */
final DEdge initPointOnEdge(final DPoint pt,DEdge contEdge,Deque<DEdge> badEdges) throws DelaunayError {
  DTriangle left=contEdge.getLeft();
  DTriangle right=contEdge.getRight();
  DEdge r1=null;
  DEdge r2=null;
  DEdge l1=null;
  DEdge l2=null;
  DEdge otherPart=new DEdge(pt,contEdge.getEndPoint());
  if (left != null) {
    l1=left.getOppositeEdge(contEdge.getEndPoint());
    l2=left.getOppositeEdge(contEdge.getStartPoint());
    badEdges.add(l1);
    badEdges.add(l2);
    DPoint opLeft=left.getOppositePoint(contEdge);
    DEdge lastLeft=new DEdge(pt,opLeft);
    DTriangle otl=new DTriangle(l2,otherPart,lastLeft);
    left.setEdge(left.getEdgeIndex(l2),lastLeft);
    lastLeft.setLeft(left);
    edgeGID++;
    lastLeft.setGID(edgeGID);
    edges.add(lastLeft);
    addTriangle(otl);
  }
  if (right != null) {
    r1=right.getOppositeEdge(contEdge.getEndPoint());
    r2=right.getOppositeEdge(contEdge.getStartPoint());
    badEdges.add(r1);
    badEdges.add(r2);
    DPoint opRight=right.getOppositePoint(contEdge);
    DEdge lastRight=new DEdge(pt,opRight);
    DTriangle otr=new DTriangle(r2,otherPart,lastRight);
    right.setEdge(right.getEdgeIndex(r2),lastRight);
    lastRight.setRight(right);
    edgeGID++;
    lastRight.setGID(edgeGID);
    edges.add(lastRight);
    addTriangle(otr);
  }
  contEdge.setEndPoint(pt);
  pointGID++;
  pt.setGID(pointGID);
  points.add(pt);
  edgeGID++;
  otherPart.setGID(edgeGID);
  edges.add(otherPart);
  contEdge.setEndPoint(pt);
  if (left != null) {
    left.recomputeCenter();
    if (l1.isEncroached()) {
      return l1;
    }
 else     if (l2.isEncroached()) {
      return l2;
    }
  }
  if (right != null) {
    right.recomputeCenter();
    if (r1.isEncroached()) {
      return r1;
    }
 else     if (r2.isEncroached()) {
      return r2;
    }
  }
  return null;
}"
86550,"/** 
 * The same goal as in testRefinementHeight, but in this case the point is on an edge of the mesh.
 * @throws DelaunayError 
 */
public void testRefinementHeightBis() throws DelaunayError {
  ConstrainedMesh mesh=new ConstrainedMesh();
  mesh.addPoint(new DPoint(0,2,0));
  mesh.addPoint(new DPoint(5,2,0));
  mesh.addPoint(new DPoint(2,4,10));
  mesh.addPoint(new DPoint(2,0,0));
  mesh.processDelaunay();
  int index=mesh.getTriangleList().indexOf(new DTriangle(new DPoint(2,4,10),new DPoint(2,0,0),new DPoint(0,2,0)));
  DTriangle tri=mesh.getTriangleList().get(index);
  mesh.insertTriangleCircumCenter(tri,false,0.2);
  assertTrue(mesh.getPoints().contains(new DPoint(2,2,5)));
  assertTrianglesTopology(mesh);
}","/** 
 * The same goal as in testRefinementHeight, but in this case the point is on an edge of the mesh.
 * @throws DelaunayError 
 */
public void testRefinementHeightBis() throws DelaunayError {
  ConstrainedMesh mesh=new ConstrainedMesh();
  mesh.addPoint(new DPoint(0,2,0));
  mesh.addPoint(new DPoint(5,2,0));
  mesh.addPoint(new DPoint(2,4,10));
  mesh.addPoint(new DPoint(2,0,0));
  mesh.processDelaunay();
  assertTrianglesTopology(mesh);
  int index=mesh.getTriangleList().indexOf(new DTriangle(new DPoint(2,4,10),new DPoint(2,0,0),new DPoint(0,2,0)));
  DTriangle tri=mesh.getTriangleList().get(index);
  mesh.insertTriangleCircumCenter(tri,false,0.2);
  assertTrue(mesh.getPoints().contains(new DPoint(2,2,5)));
  assertTrianglesTopology(mesh);
}"
86551,"/** 
 * This method reverts the first step of a point insertion in the mesh, when this insertion occurs on an edge of a triangle. <br/> Note that we need to decrease the edge, triangle and point GIDs, and  to remove the elements we don't need from each data structure.
 * @param ed
 * @param forget
 * @param extremity
 * @param leftLast
 * @param rightLast
 * @throws DelaunayError 
 */
void revertPointOnEdgeInsertion(DEdge ed,DPoint forget,DPoint extremity,DEdge leftLast,DEdge rightLast) throws DelaunayError {
  DTriangle left=ed.getLeft();
  DTriangle right=ed.getRight();
  DPoint st;
  ed.setEndPoint(extremity);
  st=ed.getStartPoint();
  if (left != null) {
    rebuildTriangleOEI(left,st,leftLast);
    edges.remove(edges.size() - 1);
    edgeGID--;
    triangleList.remove(triangleList.size() - 1);
    triangleGID--;
  }
  edges.remove(edges.size() - 1);
  edgeGID--;
  if (right != null) {
    edges.remove(edges.size() - 1);
    edgeGID--;
    triangleList.remove(triangleList.size() - 1);
    triangleGID--;
  }
  points.remove(points.size() - 1);
  pointGID--;
}","/** 
 * This method reverts the first step of a point insertion in the mesh, when this insertion occurs on an edge of a triangle. <br/> Note that we need to decrease the edge, triangle and point GIDs, and  to remove the elements we don't need from each data structure.
 * @param ed
 * @param forget
 * @param extremity
 * @param leftLast
 * @param rightLast
 * @throws DelaunayError 
 */
void revertPointOnEdgeInsertion(DEdge ed,DPoint forget,DPoint extremity,DEdge leftLast,DEdge rightLast) throws DelaunayError {
  DTriangle left=ed.getLeft();
  DTriangle right=ed.getRight();
  DPoint st;
  ed.setEndPoint(extremity);
  st=ed.getStartPoint();
  if (left != null) {
    rebuildTriangleOEI(left,st,leftLast);
    edges.remove(edges.size() - 1);
    edgeGID--;
    triangleList.remove(triangleList.size() - 1);
    triangleGID--;
  }
  edges.remove(edges.size() - 1);
  edgeGID--;
  if (right != null) {
    rebuildTriangleOEI(right,st,rightLast);
    edges.remove(edges.size() - 1);
    edgeGID--;
    triangleList.remove(triangleList.size() - 1);
    triangleGID--;
  }
  points.remove(points.size() - 1);
  pointGID--;
}"
86552,"public void testRevertPointOnEdgebranches() throws DelaunayError {
  ConstrainedMesh mesh=new ConstrainedMesh();
  DPoint p1=new DPoint(0,0,0);
  mesh.addPoint(p1);
  DPoint p2=new DPoint(3,0,0);
  mesh.addPoint(p2);
  DPoint p3=new DPoint(2,3,0);
  mesh.addPoint(p3);
  mesh.processDelaunay();
  List<DEdge> edges=mesh.getEdges();
  int index=edges.indexOf(new DEdge(0,0,0,2,3,0));
  DEdge e=edges.get(index);
  if (e.getRight() == null) {
    e.swap();
  }
  index=edges.indexOf(new DEdge(3,0,0,2,3,0));
  DEdge last=edges.get(index);
  mesh.initPointOnEdge(new DPoint(1,1.5,0),e,new LinkedList<DEdge>());
  mesh.revertPointOnEdgeInsertion(e,new DPoint(1,1.5,0),p3,null,last);
  assertTrue(mesh.getTriangleList().size() == 1);
  assertTrue(mesh.getEdges().size() == 3);
  assertTrue(mesh.getEdges().contains(new DEdge(0,0,0,3,0,0)));
  assertTrue(mesh.getEdges().contains(new DEdge(2,3,0,3,0,0)));
  assertTrue(mesh.getEdges().contains(new DEdge(0,0,0,2,3,0)));
  assertTrue(mesh.getPoints().size() == 3);
  assertTrue(mesh.getPoints().contains(new DPoint(0,0,0)));
  assertTrue(mesh.getPoints().contains(new DPoint(2,3,0)));
  assertTrue(mesh.getPoints().contains(new DPoint(3,0,0)));
  assertCoherence(mesh);
  mesh=new ConstrainedMesh();
  p1=new DPoint(0,0,0);
  mesh.addPoint(p1);
  p2=new DPoint(3,0,0);
  mesh.addPoint(p2);
  p3=new DPoint(2,3,0);
  mesh.addPoint(p3);
  mesh.processDelaunay();
  edges=mesh.getEdges();
  index=edges.indexOf(new DEdge(0,0,0,2,3,0));
  e=edges.get(index);
  if (e.getLeft() == null) {
    e.swap();
  }
  index=edges.indexOf(new DEdge(3,0,0,0,0,0));
  last=edges.get(index);
  mesh.initPointOnEdge(new DPoint(1,1.5,0),e,new LinkedList<DEdge>());
  mesh.revertPointOnEdgeInsertion(e,new DPoint(1,1.5,0),p1,last,null);
  assertTrue(mesh.getTriangleList().size() == 1);
  assertTrue(mesh.getEdges().size() == 3);
  assertTrue(mesh.getEdges().contains(new DEdge(0,0,0,3,0,0)));
  assertTrue(mesh.getEdges().contains(new DEdge(2,3,0,3,0,0)));
  assertTrue(mesh.getEdges().contains(new DEdge(0,0,0,2,3,0)));
  assertTrue(mesh.getPoints().size() == 3);
  assertTrue(mesh.getPoints().contains(new DPoint(0,0,0)));
  assertTrue(mesh.getPoints().contains(new DPoint(2,3,0)));
  assertTrue(mesh.getPoints().contains(new DPoint(3,0,0)));
  assertCoherence(mesh);
}","public void testRevertPointOnEdgebranches() throws DelaunayError {
  ConstrainedMesh mesh=new ConstrainedMesh();
  DPoint p1=new DPoint(0,0,0);
  mesh.addPoint(p1);
  DPoint p2=new DPoint(3,0,0);
  mesh.addPoint(p2);
  DPoint p3=new DPoint(2,3,0);
  mesh.addPoint(p3);
  mesh.processDelaunay();
  List<DEdge> edges=mesh.getEdges();
  int index=edges.indexOf(new DEdge(0,0,0,2,3,0));
  DEdge e=edges.get(index);
  if (e.getRight() == null) {
    e.swap();
  }
  index=edges.indexOf(new DEdge(3,0,0,2,3,0));
  DEdge last=edges.get(index);
  mesh.initPointOnEdge(new DPoint(1,1.5,0),e,new LinkedList<DEdge>());
  mesh.revertPointOnEdgeInsertion(e,new DPoint(1,1.5,0),p3,null,last);
  assertTrue(mesh.getTriangleList().size() == 1);
  assertTrue(mesh.getTriangleList().contains(new DTriangle(new DEdge(0,0,0,3,0,0),new DEdge(3,0,0,2,3,0),new DEdge(2,3,0,0,0,0))));
  assertTrue(mesh.getEdges().size() == 3);
  assertTrue(mesh.getEdges().contains(new DEdge(0,0,0,3,0,0)));
  assertTrue(mesh.getEdges().contains(new DEdge(2,3,0,3,0,0)));
  assertTrue(mesh.getEdges().contains(new DEdge(0,0,0,2,3,0)));
  assertTrue(mesh.getPoints().size() == 3);
  assertTrue(mesh.getPoints().contains(new DPoint(0,0,0)));
  assertTrue(mesh.getPoints().contains(new DPoint(2,3,0)));
  assertTrue(mesh.getPoints().contains(new DPoint(3,0,0)));
  assertCoherence(mesh);
  mesh=new ConstrainedMesh();
  p1=new DPoint(0,0,0);
  mesh.addPoint(p1);
  p2=new DPoint(3,0,0);
  mesh.addPoint(p2);
  p3=new DPoint(2,3,0);
  mesh.addPoint(p3);
  mesh.processDelaunay();
  edges=mesh.getEdges();
  index=edges.indexOf(new DEdge(0,0,0,2,3,0));
  e=edges.get(index);
  if (e.getLeft() == null) {
    e.swap();
  }
  index=edges.indexOf(new DEdge(3,0,0,0,0,0));
  last=edges.get(index);
  mesh.initPointOnEdge(new DPoint(1,1.5,0),e,new LinkedList<DEdge>());
  mesh.revertPointOnEdgeInsertion(e,new DPoint(1,1.5,0),p1,last,null);
  assertTrue(mesh.getTriangleList().size() == 1);
  assertTrue(mesh.getTriangleList().contains(new DTriangle(new DEdge(0,0,0,3,0,0),new DEdge(3,0,0,2,3,0),new DEdge(2,3,0,0,0,0))));
  assertTrue(mesh.getEdges().size() == 3);
  assertTrue(mesh.getEdges().contains(new DEdge(0,0,0,3,0,0)));
  assertTrue(mesh.getEdges().contains(new DEdge(2,3,0,3,0,0)));
  assertTrue(mesh.getEdges().contains(new DEdge(0,0,0,2,3,0)));
  assertTrue(mesh.getPoints().size() == 3);
  assertTrue(mesh.getPoints().contains(new DPoint(0,0,0)));
  assertTrue(mesh.getPoints().contains(new DPoint(2,3,0)));
  assertTrue(mesh.getPoints().contains(new DPoint(3,0,0)));
  assertCoherence(mesh);
}"
86553,"/** 
 * Method that revert a point insertion in a triangle (but not on one of its edges). We need the reference to the triangle, the inserted point, and the former third point of the triangle.<br/> Note that we need to decrease the edge, triangle and point GIDs, and  to remove the elements we don't need from each data structure.
 * @param dt
 * @param forget
 * @param apex 
 */
final void revertPointInTriangleInsertion(DTriangle dt,DPoint forget,DPoint apex) throws DelaunayError {
  DEdge perm=dt.getOppositeEdge(forget);
  DEdge mod=dt.getOppositeEdge(perm.getStartPoint());
  if (forget.equals(mod.getStartPoint())) {
    mod.setStartPoint(apex);
  }
 else {
    mod.setEndPoint(apex);
  }
  mod=dt.getOppositeEdge(perm.getEndPoint());
  if (forget.equals(mod.getStartPoint())) {
    mod.setStartPoint(apex);
  }
 else {
    mod.setEndPoint(apex);
  }
  dt.recomputeCenter();
  points.remove(points.size() - 1);
  edges.remove(edges.size() - 1);
  edges.remove(edges.size() - 1);
  edges.remove(edges.size() - 1);
  triangleList.remove(triangleList.size() - 1);
  triangleList.remove(triangleList.size() - 1);
  forceCoherence(dt);
}","/** 
 * Method that revert a point insertion in a triangle (but not on one of its edges). We need the reference to the triangle, the inserted point, and the former third point of the triangle.<br/> Note that we need to decrease the edge, triangle and point GIDs, and  to remove the elements we don't need from each data structure.
 * @param dt
 * @param forget
 * @param apex 
 */
final void revertPointInTriangleInsertion(DTriangle dt,DPoint forget,DPoint apex,DEdge o1,DEdge o2) throws DelaunayError {
  DEdge perm=dt.getOppositeEdge(forget);
  DEdge mod=dt.getOppositeEdge(perm.getStartPoint());
  int index=dt.getEdgeIndex(mod);
  int index2=dt.getEdgeIndex(dt.getOppositeEdge(perm.getEndPoint()));
  if (o1.contains(perm.getStartPoint())) {
    dt.setEdge(index,o2);
    dt.setEdge(index2,o1);
  }
 else {
    dt.setEdge(index,o1);
    dt.setEdge(index2,o2);
  }
  dt.recomputeCenter();
  points.remove(points.size() - 1);
  edges.remove(edges.size() - 1);
  edges.remove(edges.size() - 1);
  edges.remove(edges.size() - 1);
  triangleList.remove(triangleList.size() - 1);
  triangleList.remove(triangleList.size() - 1);
  forceCoherence(dt);
}"
86554,"/** 
 * Process the flip-flap algorithm on the list of triangles
 */
private void processBadEdges() throws DelaunayError {
  LinkedList<DEdge> alreadySeen=new LinkedList<DEdge>();
  while (!badEdgesQueueList.isEmpty()) {
    DEdge anEdge=badEdgesQueueList.remove(0);
    boolean doIt=!anEdge.isLocked() && !alreadySeen.contains(anEdge);
    if (doIt) {
      alreadySeen.add(anEdge);
      DTriangle aTriangle1=anEdge.getLeft();
      DTriangle aTriangle2=anEdge.getRight();
      if (swapTriangle(anEdge)) {
        LinkedList<DEdge> others=new LinkedList<DEdge>();
        others.add(aTriangle1.getOppositeEdge(anEdge.getStartPoint()));
        others.add(aTriangle1.getOppositeEdge(anEdge.getEndPoint()));
        others.add(aTriangle2.getOppositeEdge(anEdge.getStartPoint()));
        others.add(aTriangle2.getOppositeEdge(anEdge.getEndPoint()));
        for (        DEdge ed : others) {
          if (ed.getLeft() != null && ed.getRight() != null && !badEdgesQueueList.contains(ed)) {
            badEdgesQueueList.add(ed);
          }
        }
      }
    }
  }
}","/** 
 * Process the flip-flap algorithm on the list of triangles
 */
private void processBadEdges() throws DelaunayError {
  LinkedList<DEdge> alreadySeen=new LinkedList<DEdge>();
  while (!badEdgesQueueList.isEmpty()) {
    DEdge anEdge=badEdgesQueueList.remove(0);
    boolean doIt=!anEdge.isLocked() && !alreadySeen.contains(anEdge);
    if (doIt) {
      alreadySeen.add(anEdge);
      if (swapTriangle(anEdge)) {
        LinkedList<DEdge> others=new LinkedList<DEdge>();
        DTriangle aTriangle1=anEdge.getLeft();
        DTriangle aTriangle2=anEdge.getRight();
        others.add(aTriangle1.getOppositeEdge(anEdge.getStartPoint()));
        others.add(aTriangle1.getOppositeEdge(anEdge.getEndPoint()));
        others.add(aTriangle2.getOppositeEdge(anEdge.getStartPoint()));
        others.add(aTriangle2.getOppositeEdge(anEdge.getEndPoint()));
        for (        DEdge ed : others) {
          if (ed.getLeft() != null && ed.getRight() != null && !badEdgesQueueList.contains(ed)) {
            badEdgesQueueList.add(ed);
          }
        }
      }
    }
  }
}"
86555,"/** 
 * Split the edges that have benn found to be encroached.
 * @param ed The edge to be split.
 * @param minLength The threshold used to determine the minimum length of an edge that could be added by splitting an encroached edge.
 * @throws DelaunayError
 */
final void splitEncroachedEdge(DEdge ed,double minLength) throws DelaunayError {
  DTriangle left=ed.getLeft();
  DTriangle right=ed.getRight();
  DPoint middle=ed.getMiddle();
  DEdge secondHalf=new DEdge(middle,ed.getEndPoint());
  if (secondHalf.getSquared2DLength() < minLength * minLength) {
    return;
  }
  middle.setGID(++pointGID);
  points.add(middle);
  secondHalf.setGID(++edgeGID);
  DEdge ed1=null;
  DEdge last1=null;
  DEdge startOp1=null;
  DTriangle other1=null;
  if (left != null) {
    ed1=new DEdge(middle,left.getOppositePoint(ed));
    ed1.setGID(++edgeGID);
    last1=left.getOppositeEdge(ed.getEndPoint());
    startOp1=left.getOppositeEdge(ed.getStartPoint());
    other1=new DTriangle(ed1,secondHalf,startOp1);
    other1.setGID(++triangleGID);
  }
  DEdge ed2=null;
  DEdge last2=null;
  DEdge startOp2=null;
  DTriangle other2=null;
  if (right != null) {
    ed2=new DEdge(middle,right.getOppositePoint(ed));
    ed2.setGID(++edgeGID);
    last2=right.getOppositeEdge(ed.getEndPoint());
    startOp2=right.getOppositeEdge(ed.getStartPoint());
    other2=new DTriangle(ed2,secondHalf,startOp2);
    other2.setGID(++triangleGID);
  }
  secondHalf.setLocked(ed.isLocked());
  ed.setEndPoint(middle);
  badEdgesQueueList=new LinkedList<DEdge>();
  if (left != null) {
    int indexExc=left.getEdgeIndex(startOp1);
    left.setEdge(indexExc,ed1);
    left.recomputeCenter();
    ed1.setLeft(left);
    ed1.setRight(other1);
    if (startOp1.isRight(middle)) {
      startOp1.setRight(other1);
    }
 else {
      startOp1.setLeft(other1);
    }
    secondHalf.setLeft(other1);
    triangleList.add(other1);
    badEdgesQueueList.add(last1);
    badEdgesQueueList.add(ed1);
    badEdgesQueueList.add(startOp1);
    edges.add(ed1);
  }
  if (right != null) {
    int indexExc=right.getEdgeIndex(startOp2);
    right.setEdge(indexExc,ed2);
    right.recomputeCenter();
    ed2.setRight(right);
    ed2.setLeft(other2);
    if (startOp2.isRight(middle)) {
      startOp2.setRight(other2);
    }
 else {
      startOp2.setLeft(other2);
    }
    secondHalf.setRight(other2);
    triangleList.add(other2);
    badEdgesQueueList.add(last2);
    badEdgesQueueList.add(ed2);
    badEdgesQueueList.add(startOp2);
    edges.add(ed2);
  }
  processBadEdges();
  if (ed.isLocked()) {
    constraintEdges.add(secondHalf);
  }
  edges.add(secondHalf);
  if (ed.isEncroached()) {
    splitEncroachedEdge(ed,minLength);
  }
  if (secondHalf.isEncroached()) {
    splitEncroachedEdge(secondHalf,minLength);
  }
  if (right != null) {
    if (last2.isEncroached()) {
      splitEncroachedEdge(last2,minLength);
    }
    if (startOp2.isEncroached()) {
      splitEncroachedEdge(startOp2,minLength);
    }
  }
  if (left != null) {
    if (last1.isEncroached()) {
      splitEncroachedEdge(last1,minLength);
    }
    if (startOp1.isEncroached()) {
      splitEncroachedEdge(startOp1,minLength);
    }
  }
}","/** 
 * Split the edges that have benn found to be encroached.
 * @param ed The edge to be split.
 * @param minLength The threshold used to determine the minimum length of an edge that could be added by splitting an encroached edge.
 * @throws DelaunayError
 */
final void splitEncroachedEdge(DEdge ed,double minLength) throws DelaunayError {
  badEdgesQueueList=new LinkedList<DEdge>();
  DTriangle left=ed.getLeft();
  DTriangle right=ed.getRight();
  DPoint middle=ed.getMiddle();
  DEdge secondHalf=new DEdge(middle,ed.getEndPoint());
  if (secondHalf.getSquared2DLength() < minLength * minLength) {
    return;
  }
  middle.setGID(++pointGID);
  points.add(middle);
  secondHalf.setGID(++edgeGID);
  DEdge ed1=null;
  DEdge last1=null;
  DEdge startOp1=null;
  DTriangle other1=null;
  if (left != null) {
    ed1=new DEdge(middle,left.getOppositePoint(ed));
    ed1.setGID(++edgeGID);
    last1=left.getOppositeEdge(ed.getEndPoint());
    startOp1=left.getOppositeEdge(ed.getStartPoint());
    other1=new DTriangle(ed1,secondHalf,startOp1);
    other1.setGID(++triangleGID);
  }
  DEdge ed2=null;
  DEdge last2=null;
  DEdge startOp2=null;
  DTriangle other2=null;
  if (right != null) {
    ed2=new DEdge(middle,right.getOppositePoint(ed));
    ed2.setGID(++edgeGID);
    last2=right.getOppositeEdge(ed.getEndPoint());
    startOp2=right.getOppositeEdge(ed.getStartPoint());
    other2=new DTriangle(ed2,secondHalf,startOp2);
    other2.setGID(++triangleGID);
  }
  secondHalf.setLocked(ed.isLocked());
  ed.setEndPoint(middle);
  badEdgesQueueList=new LinkedList<DEdge>();
  if (left != null) {
    int indexExc=left.getEdgeIndex(startOp1);
    left.setEdge(indexExc,ed1);
    left.recomputeCenter();
    ed1.setLeft(left);
    ed1.setRight(other1);
    if (startOp1.isRight(middle)) {
      startOp1.setRight(other1);
    }
 else {
      startOp1.setLeft(other1);
    }
    secondHalf.setLeft(other1);
    triangleList.add(other1);
    badEdgesQueueList.add(last1);
    badEdgesQueueList.add(ed1);
    badEdgesQueueList.add(startOp1);
    edges.add(ed1);
  }
  if (right != null) {
    int indexExc=right.getEdgeIndex(startOp2);
    right.setEdge(indexExc,ed2);
    right.recomputeCenter();
    ed2.setRight(right);
    ed2.setLeft(other2);
    if (startOp2.isRight(middle)) {
      startOp2.setRight(other2);
    }
 else {
      startOp2.setLeft(other2);
    }
    secondHalf.setRight(other2);
    triangleList.add(other2);
    badEdgesQueueList.add(last2);
    badEdgesQueueList.add(ed2);
    badEdgesQueueList.add(startOp2);
    edges.add(ed2);
  }
  processBadEdges();
  if (ed.isLocked()) {
    constraintEdges.add(secondHalf);
  }
  edges.add(secondHalf);
  if (ed.isEncroached()) {
    splitEncroachedEdge(ed,minLength);
  }
  if (secondHalf.isEncroached()) {
    splitEncroachedEdge(secondHalf,minLength);
  }
  if (right != null) {
    if (last2.isEncroached()) {
      splitEncroachedEdge(last2,minLength);
    }
    if (startOp2.isEncroached()) {
      splitEncroachedEdge(startOp2,minLength);
    }
  }
  if (left != null) {
    if (last1.isEncroached()) {
      splitEncroachedEdge(last1,minLength);
    }
    if (startOp1.isEncroached()) {
      splitEncroachedEdge(startOp1,minLength);
    }
  }
}"
86556,"/** 
 * This method performs the revertible insertion of a point on an edge of the mesh. It first remember all the elemnts that could be needed to revert all the operations.<br/> Our goal here is to fail fast : as soon as we find an encroached edge, we stop our process and we revert our operations.
 * @param container
 * @param pt
 * @return
 * @throws DelaunayError 
 */
private DEdge insertOnEdgeRevertible(DTriangle container,DPoint pt) throws DelaunayError {
  LinkedList<DEdge> badEdges=new LinkedList<DEdge>();
  Deque<DEdge> swapMem=new LinkedList<DEdge>();
  DEdge ret;
  DEdge contEdge=container.getContainingEdge(pt);
  DTriangle left=contEdge.getLeft();
  DEdge memleft=null;
  DPoint memExt=contEdge.getEnd();
  if (left != null) {
    memleft=left.getOppositeEdge(contEdge.getStartPoint());
  }
  DTriangle right=contEdge.getRight();
  DEdge memright=null;
  if (right != null) {
    memright=right.getOppositeEdge(contEdge.getStartPoint());
  }
  ret=initPointOnEdge(pt,contEdge,badEdges);
  if (ret != null) {
    revertPointOnEdgeInsertion(contEdge,pt,memExt,memleft,memright);
  }
  ret=revertibleSwapping(badEdges,swapMem);
  if (ret != null) {
    Iterator<DEdge> it=swapMem.descendingIterator();
    proceedSwaps(it);
    if (contEdge.getStartPoint().equals(pt)) {
      contEdge.swap();
    }
    revertPointOnEdgeInsertion(contEdge,pt,memExt,memleft,memright);
  }
  return ret;
}","/** 
 * This method performs the revertible insertion of a point on an edge of the mesh. It first remember all the elemnts that could be needed to revert all the operations.<br/> Our goal here is to fail fast : as soon as we find an encroached edge, we stop our process and we revert our operations.
 * @param container
 * @param pt
 * @return
 * @throws DelaunayError 
 */
private DEdge insertOnEdgeRevertible(DTriangle container,DPoint pt) throws DelaunayError {
  LinkedList<DEdge> badEdges=new LinkedList<DEdge>();
  Deque<DEdge> swapMem=new LinkedList<DEdge>();
  DEdge ret;
  DEdge contEdge=container.getContainingEdge(pt);
  if (contEdge.isLocked() || contEdge.getLeft() == null || contEdge.getRight() == null) {
    return contEdge;
  }
  DTriangle left=contEdge.getLeft();
  DEdge memleft=null;
  DPoint memExt=contEdge.getEnd();
  if (left != null) {
    memleft=left.getOppositeEdge(contEdge.getStartPoint());
  }
  DTriangle right=contEdge.getRight();
  DEdge memright=null;
  if (right != null) {
    memright=right.getOppositeEdge(contEdge.getStartPoint());
  }
  ret=initPointOnEdge(pt,contEdge,badEdges);
  if (ret != null) {
    revertPointOnEdgeInsertion(contEdge,pt,memExt,memleft,memright);
    return ret;
  }
  ret=revertibleSwapping(badEdges,swapMem);
  if (ret != null) {
    Iterator<DEdge> it=swapMem.descendingIterator();
    proceedSwaps(it);
    if (contEdge.getStartPoint().equals(pt)) {
      contEdge.swap();
    }
    revertPointOnEdgeInsertion(contEdge,pt,memExt,memleft,memright);
  }
  return ret;
}"
86557,"/** 
 * This method performs the revertible insertion of a point in a triangle of the mesh. It first remember all the elements that will be needed to finalize the  reversion of the insertion, and then try it.<br/> Our goal here is to fail fast : as soon as we find an encroached edge, we stop our process and we revert our operations.
 * @param container
 * @param pt
 * @return
 * @throws DelaunayError 
 */
private DEdge insertInTriangleRevertible(DTriangle container,DPoint pt) throws DelaunayError {
  LinkedList<DEdge> badEdges=new LinkedList<DEdge>();
  Deque<DEdge> swapMem=new LinkedList<DEdge>();
  DEdge ret;
  DEdge eMem0=container.getEdge(0);
  DEdge eMem1=container.getEdge(1);
  DEdge eMem2=container.getEdge(2);
  DPoint mem=container.getOppositePoint(eMem0);
  ret=initPointInTriangle(pt,container,badEdges);
  if (ret != null) {
    revertPointInTriangleInsertion(container,pt,mem);
    return ret;
  }
  ret=revertibleSwapping(badEdges,swapMem);
  if (ret != null) {
    Iterator<DEdge> it=swapMem.descendingIterator();
    proceedSwaps(it);
    if (!container.belongsTo(pt)) {
      eMem0.deepSwap();
    }
    checkMemEdges(eMem1,pt,triangleList.get(triangleList.size() - 1),triangleList.get(triangleList.size() - 2));
    checkMemEdges(eMem2,pt,triangleList.get(triangleList.size() - 1),triangleList.get(triangleList.size() - 2));
    revertPointInTriangleInsertion(container,pt,mem);
  }
  return ret;
}","/** 
 * This method performs the revertible insertion of a point in a triangle of the mesh. It first remember all the elements that will be needed to finalize the  reversion of the insertion, and then try it.<br/> Our goal here is to fail fast : as soon as we find an encroached edge, we stop our process and we revert our operations.
 * @param container
 * @param pt
 * @return
 * @throws DelaunayError 
 */
private DEdge insertInTriangleRevertible(DTriangle container,DPoint pt) throws DelaunayError {
  LinkedList<DEdge> badEdges=new LinkedList<DEdge>();
  Deque<DEdge> swapMem=new LinkedList<DEdge>();
  DEdge ret;
  DEdge eMem0=container.getEdge(0);
  DEdge eMem1=container.getEdge(1);
  DEdge eMem2=container.getEdge(2);
  DPoint mem=container.getOppositePoint(eMem0);
  ret=initPointInTriangle(pt,container,badEdges);
  if (ret != null) {
    revertPointInTriangleInsertion(container,pt,mem,eMem1,eMem2);
    return ret;
  }
  ret=revertibleSwapping(badEdges,swapMem);
  if (ret != null) {
    Iterator<DEdge> it=swapMem.descendingIterator();
    proceedSwaps(it);
    if (!container.belongsTo(pt)) {
      eMem0.deepSwap();
    }
    checkMemEdges(eMem1,pt,triangleList.get(triangleList.size() - 1),triangleList.get(triangleList.size() - 2));
    checkMemEdges(eMem2,pt,triangleList.get(triangleList.size() - 1),triangleList.get(triangleList.size() - 2));
    revertPointInTriangleInsertion(container,pt,mem,eMem1,eMem2);
  }
  return ret;
}"
86558,"public void testRevertInsertionInTriangle() throws DelaunayError {
  ConstrainedMesh mesh=new ConstrainedMesh();
  DPoint pt1=new DPoint(0,0,0);
  mesh.addPoint(pt1);
  DPoint pt2=new DPoint(6,0,0);
  mesh.addPoint(pt2);
  DPoint pt3=new DPoint(3,5,0);
  mesh.addPoint(pt3);
  mesh.processDelaunay();
  DTriangle tri=mesh.getTriangleList().get(0);
  DEdge e1=mesh.getEdges().get(0);
  DEdge e2=mesh.getEdges().get(1);
  DEdge e3=mesh.getEdges().get(2);
  mesh.initPointInTriangle(new DPoint(3,2,0),tri,new LinkedList<DEdge>());
  DPoint pt;
  if (!tri.belongsTo(pt1)) {
    pt=pt1;
  }
 else   if (!tri.belongsTo(pt2)) {
    pt=pt2;
  }
 else {
    pt=pt3;
  }
  mesh.revertPointInTriangleInsertion(tri,new DPoint(3,2,0),pt);
  List<DTriangle> tris=mesh.getTriangleList();
  assertTrue(tris.size() == 1);
  assertEquals(new DTriangle(new DEdge(0,0,0,6,0,0),new DEdge(6,0,0,3,5,0),new DEdge(3,5,0,0,0,0)),tris.get(0));
  assertTrue(mesh.getPoints().size() == 3);
  assertTrue(mesh.getPoints().contains(new DPoint(0,0,0)));
  assertTrue(mesh.getPoints().contains(new DPoint(6,0,0)));
  assertTrue(mesh.getPoints().contains(new DPoint(3,5,0)));
  assertTrue(mesh.getEdges().size() == 3);
  assertTrue(mesh.getEdges().contains(new DEdge(0,0,0,6,0,0)));
  assertTrue(mesh.getEdges().contains(new DEdge(3,5,0,6,0,0)));
  assertTrue(mesh.getEdges().contains(new DEdge(0,0,0,3,5,0)));
  assertTrue(mesh.getPoints().get(0) == pt1);
  assertTrue(mesh.getPoints().get(1) == pt3);
  assertTrue(mesh.getPoints().get(2) == pt2);
  assertCoherence(mesh);
  DTriangle dt=mesh.getTriangleList().get(0);
  DEdge ed=dt.getEdge(0);
  assertTrue(ed.getLeft() == dt || ed.getRight() == dt);
  ed=dt.getEdge(2);
  assertTrue(ed.getLeft() == dt || ed.getRight() == dt);
  ed=dt.getEdge(1);
  assertTrue(ed.getLeft() == dt || ed.getRight() == dt);
}","public void testRevertInsertionInTriangle() throws DelaunayError {
  ConstrainedMesh mesh=new ConstrainedMesh();
  DPoint pt1=new DPoint(0,0,0);
  mesh.addPoint(pt1);
  DPoint pt2=new DPoint(6,0,0);
  mesh.addPoint(pt2);
  DPoint pt3=new DPoint(3,5,0);
  mesh.addPoint(pt3);
  mesh.processDelaunay();
  DTriangle tri=mesh.getTriangleList().get(0);
  DEdge e1=mesh.getEdges().get(0);
  DEdge e2=mesh.getEdges().get(1);
  DEdge e3=mesh.getEdges().get(2);
  mesh.initPointInTriangle(new DPoint(3,2,0),tri,new LinkedList<DEdge>());
  DPoint pt;
  if (!tri.belongsTo(pt1)) {
    pt=pt1;
  }
 else   if (!tri.belongsTo(pt2)) {
    pt=pt2;
  }
 else {
    pt=pt3;
  }
  mesh.revertPointInTriangleInsertion(tri,new DPoint(3,2,0),pt,e1,e3);
  List<DTriangle> tris=mesh.getTriangleList();
  assertTrue(tris.size() == 1);
  assertEquals(new DTriangle(new DEdge(0,0,0,6,0,0),new DEdge(6,0,0,3,5,0),new DEdge(3,5,0,0,0,0)),tris.get(0));
  assertTrue(mesh.getPoints().size() == 3);
  assertTrue(mesh.getPoints().contains(new DPoint(0,0,0)));
  assertTrue(mesh.getPoints().contains(new DPoint(6,0,0)));
  assertTrue(mesh.getPoints().contains(new DPoint(3,5,0)));
  assertTrue(mesh.getEdges().size() == 3);
  assertTrue(mesh.getEdges().contains(new DEdge(0,0,0,6,0,0)));
  assertTrue(mesh.getEdges().contains(new DEdge(3,5,0,6,0,0)));
  assertTrue(mesh.getEdges().contains(new DEdge(0,0,0,3,5,0)));
  assertTrue(mesh.getPoints().get(0) == pt1);
  assertTrue(mesh.getPoints().get(1) == pt3);
  assertTrue(mesh.getPoints().get(2) == pt2);
  assertCoherence(mesh);
  DTriangle dt=mesh.getTriangleList().get(0);
  DEdge ed=dt.getEdge(0);
  assertTrue(ed.getLeft() == dt || ed.getRight() == dt);
  assertTrue(ed == e1 || ed == e2 || ed == e3);
  ed=dt.getEdge(2);
  assertTrue(ed.getLeft() == dt || ed.getRight() == dt);
  assertTrue(ed == e1 || ed == e2 || ed == e3);
  ed=dt.getEdge(1);
  assertTrue(ed.getLeft() == dt || ed.getRight() == dt);
  assertTrue(ed == e1 || ed == e2 || ed == e3);
}"
86559,"/** 
 * This method will force the integrity of the constraints used to compute the delaunay triangulation. After execution : * duplicates are removed * intersection points are added to the mesh points * secant edges are split
 */
public final void forceConstraintIntegrity() throws DelaunayError {
  List<DPoint> eventPoints=points;
  DPoint currentEvent=null;
  VerticalList edgeBuffer=new VerticalList(0);
  List<DEdge> edgeMemory=constraintEdges;
  constraintEdges=new ArrayList<DEdge>();
  double abs;
  int i=0;
  int j=0;
  DEdge e1, e2;
  DEdge inter1=null;
  DEdge inter2=null;
  DEdge inter3=null;
  DEdge inter4=null;
  DPoint newEvent=null;
  DEdge edgeEvent=null;
  DPoint leftMost=null;
  DPoint rightMost=null;
  Element intersection=null;
  DEdge currentMemEdge=null;
  DEdge rm;
  int memoryPos=0;
  int rmCount;
  int mem;
  while (i < eventPoints.size()) {
    int maxWeight=Integer.MIN_VALUE;
    Double z=Double.NaN;
    int w1;
    int w2;
    currentEvent=eventPoints.get(i);
    abs=currentEvent.getX();
    edgeBuffer.setAbs(abs);
    if (currentMemEdge == null) {
      currentMemEdge=edgeMemory.get(0);
    }
    for (; memoryPos < edgeMemory.size(); memoryPos++) {
      currentMemEdge=edgeMemory.get(memoryPos);
      if (currentEvent.equals2D(currentMemEdge.getPointLeft())) {
        edgeBuffer.addEdge(currentMemEdge);
      }
 else {
        break;
      }
    }
    if (edgeBuffer.size() > 1) {
      e2=edgeBuffer.get(0);
      j=1;
      while (j < edgeBuffer.size()) {
        j=j < 1 ? 1 : j;
        e1=edgeBuffer.get(j - 1);
        e2=edgeBuffer.get(j);
        intersection=e1.getIntersection(e2,weights);
        rmCount=0;
        if (intersection instanceof DPoint) {
          newEvent=(DPoint)intersection;
          if (!e1.isExtremity(newEvent) || !e2.isExtremity(newEvent)) {
            if (newEvent.equals2D(currentEvent)) {
              if (!weights.isEmpty()) {
                w1=e1.getMaxWeight(weights);
                w2=e2.getMaxWeight(weights);
                if (w1 < maxWeight && w2 < maxWeight) {
                  if (Double.isNaN(z)) {
                    throw new DelaunayError(""String_Node_Str"");
                  }
                  newEvent.setZ(z);
                }
 else {
                  maxWeight=Math.max(w1,w2);
                  z=newEvent.getZ();
                  currentEvent.setZ(z);
                }
              }
              newEvent.setX(abs);
              List<DEdge> toBeInsert=new ArrayList<DEdge>();
              if (!newEvent.equals2D(e2.getPointLeft()) && !newEvent.equals2D(e2.getPointRight())) {
                if (newEvent.equals2D(e1.getPointLeft())) {
                  newEvent=e1.getPointLeft();
                }
                if (newEvent.equals2D(e1.getPointRight())) {
                  newEvent=e1.getPointRight();
                }
                inter2=new DEdge(newEvent,e2.getPointLeft());
                inter2.setProperty(e2.getProperty());
                addConstraintEdge(inter2);
                rm=edgeBuffer.remove(j);
                if (!rm.equals(e2)) {
                  throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
                }
                inter4=new DEdge(newEvent,e2.getPointRight());
                inter4.setProperty(e2.getProperty());
                toBeInsert.add(inter4);
                rmCount++;
              }
 else               if (newEvent.equals2D(e2.getPointRight())) {
                addConstraintEdge(e2);
                rm=edgeBuffer.remove(j);
                if (!rm.equals(e2)) {
                  throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
                }
                rmCount++;
              }
              if (!newEvent.equals2D(e1.getPointLeft()) && !newEvent.equals2D(e1.getPointRight())) {
                if (newEvent.equals2D(e2.getPointLeft())) {
                  newEvent=e2.getPointLeft();
                }
                if (newEvent.equals2D(e2.getPointRight())) {
                  newEvent=e2.getPointRight();
                }
                inter1=new DEdge(e1.getPointLeft(),newEvent);
                inter1.setProperty(e1.getProperty());
                addConstraintEdge(inter1);
                rm=edgeBuffer.remove(j - 1);
                if (!rm.equals(e1)) {
                  throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
                }
                inter3=new DEdge(e1.getPointRight(),newEvent);
                inter3.setProperty(e1.getProperty());
                toBeInsert.add(inter3);
                rmCount++;
              }
 else               if (newEvent.equals2D(e1.getPointRight())) {
                addConstraintEdge(e1);
                rm=edgeBuffer.remove(j - 1);
                if (!rm.equals(e1)) {
                  throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
                }
                rmCount++;
              }
              for (              DEdge yed : toBeInsert) {
                edgeBuffer.addEdge(yed);
              }
              j=(j - rmCount < 0 ? 0 : j - rmCount);
            }
 else {
              ensurePointPosition(e2,newEvent);
              ensurePointPosition(e1,newEvent);
              addToSortedList(newEvent,eventPoints);
            }
          }
 else {
            if (e2.getPointRight().equals2D(currentEvent)) {
              addConstraintEdge(e2);
              rm=edgeBuffer.remove(j);
              if (!rm.equals(e2)) {
                throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
              }
              rmCount++;
            }
 else             if (e1.getPointRight().equals2D(currentEvent)) {
              addConstraintEdge(e1);
              rm=edgeBuffer.remove(j - 1);
              if (!rm.equals(e1)) {
                throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
              }
              rmCount++;
              j--;
            }
            j=(j - rmCount < 0 ? 0 : j - rmCount);
          }
        }
 else         if (intersection instanceof DEdge) {
          edgeEvent=(DEdge)intersection;
          newEvent=edgeEvent.getPointLeft();
          if (newEvent.equals2D(currentEvent)) {
            leftMost=(e1.getPointLeft().compareTo2D(e2.getPointLeft()) < 1 ? e1.getPointLeft() : e2.getPointLeft());
            rightMost=(e1.getPointRight().compareTo2D(e2.getPointRight()) < 1 ? e2.getPointRight() : e1.getPointRight());
            inter1=null;
            inter2=null;
            inter3=null;
            rm=edgeBuffer.remove(j);
            if (!rm.equals(e2)) {
              throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
            }
            rm=edgeBuffer.remove(j - 1);
            if (!rm.equals(e1)) {
              throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
            }
            j--;
            if (leftMost.compareTo2D(newEvent) == -1) {
              inter1=new DEdge(leftMost,newEvent);
            }
            inter2=edgeEvent;
            if (rightMost.compareTo2D(edgeEvent.getPointRight()) == 1) {
              inter3=new DEdge(edgeEvent.getPointRight(),rightMost);
            }
            if (inter1 != null) {
              if (inter1.getPointRight().compareTo2D(currentEvent) == 1) {
                addConstraintEdge(inter1);
              }
 else {
                mem=edgeBuffer.addEdge(inter1);
                j=j <= mem ? j : mem;
              }
            }
            if (inter2.getPointRight().compareTo2D(currentEvent) == 1) {
              mem=edgeBuffer.addEdge(inter2);
              j=j <= mem ? j : mem;
            }
 else {
              addConstraintEdge(inter2);
            }
            if (inter3 != null) {
              addEdgeToLeftSortedList(edgeMemory,inter3);
            }
            j=j - 2 < 0 ? 0 : j - 2;
          }
 else {
            throw new DelaunayError(""String_Node_Str"");
          }
        }
 else         if (e1.contains(currentEvent) && !e1.isExtremity(currentEvent)) {
          DEdge inter=new DEdge(e1.getPointLeft(),currentEvent);
          inter.setProperty(e1.getProperty());
          inter.setLocked(e1.isLocked());
          addConstraintEdge(inter);
          if (e1.getStartPoint().equals(e1.getPointLeft())) {
            e1.setStartPoint(currentEvent);
          }
 else {
            e1.setEndPoint(currentEvent);
          }
          if (!weights.isEmpty()) {
            int w=e1.getMaxWeight(weights);
            if (w > maxWeight) {
              maxWeight=w;
            }
          }
        }
 else {
          if (e1.getPointRight().equals2D(currentEvent)) {
            addConstraintEdge(e1);
            rm=edgeBuffer.remove(j - 1);
            if (!rm.equals(e1)) {
              throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
            }
            j--;
            j=j - 1 < 0 ? 0 : j - 1;
          }
        }
        j++;
        if (edgeBuffer.size() > 0 && j >= edgeBuffer.size()) {
          e2=edgeBuffer.get(edgeBuffer.size() - 1);
          if (e2.contains(currentEvent) && !e2.isExtremity(currentEvent)) {
            DEdge temp=new DEdge(e2.getPointLeft(),currentEvent);
            temp.setLocked(e2.isLocked());
            temp.setProperty(e2.getProperty());
            addConstraintEdge(temp);
            if (e2.getStartPoint().equals(e2.getPointLeft())) {
              e2.setStartPoint(currentEvent);
            }
 else {
              e2.setEndPoint(currentEvent);
            }
          }
          if (e2.getPointRight().equals(currentEvent)) {
            edgeBuffer.remove(edgeBuffer.size() - 1);
            addConstraintEdge(e2);
          }
        }
      }
    }
 else     if (edgeBuffer.size() == 1) {
      DEdge e0=edgeBuffer.get(0);
      if (e0.contains(currentEvent) && !e0.isExtremity(currentEvent)) {
        DEdge temp=new DEdge(e0.getPointLeft(),currentEvent);
        temp.setLocked(e0.isLocked());
        temp.setProperty(e0.getProperty());
        addConstraintEdge(temp);
        if (e0.getStartPoint().equals(e0.getPointLeft())) {
          e0.setStartPoint(currentEvent);
        }
 else {
          e0.setEndPoint(currentEvent);
        }
      }
 else       if (e0.getPointRight().equals2D(currentEvent)) {
        addConstraintEdge(edgeBuffer.get(0));
        edgeBuffer.remove(0);
      }
    }
    i++;
  }
}","/** 
 * This method will force the integrity of the constraints used to compute the delaunay triangulation. After execution : * duplicates are removed * intersection points are added to the mesh points * secant edges are split This methos is supposed to be used just before a call to processDelaunay(). If you use it after, you will break the unicity of edges GID.
 */
public final void forceConstraintIntegrity() throws DelaunayError {
  edgeGID=0;
  List<DPoint> eventPoints=points;
  DPoint currentEvent=null;
  VerticalList edgeBuffer=new VerticalList(0);
  List<DEdge> edgeMemory=constraintEdges;
  constraintEdges=new ArrayList<DEdge>();
  double abs;
  int i=0;
  int j=0;
  DEdge e1, e2;
  DEdge inter1=null;
  DEdge inter2=null;
  DEdge inter3=null;
  DEdge inter4=null;
  DPoint newEvent=null;
  DEdge edgeEvent=null;
  DPoint leftMost=null;
  DPoint rightMost=null;
  Element intersection=null;
  DEdge currentMemEdge=null;
  DEdge rm;
  int memoryPos=0;
  int rmCount;
  int mem;
  while (i < eventPoints.size()) {
    int maxWeight=Integer.MIN_VALUE;
    Double z=Double.NaN;
    int w1;
    int w2;
    currentEvent=eventPoints.get(i);
    abs=currentEvent.getX();
    edgeBuffer.setAbs(abs);
    if (currentMemEdge == null) {
      currentMemEdge=edgeMemory.get(0);
    }
    for (; memoryPos < edgeMemory.size(); memoryPos++) {
      currentMemEdge=edgeMemory.get(memoryPos);
      if (currentEvent.equals2D(currentMemEdge.getPointLeft())) {
        edgeBuffer.addEdge(currentMemEdge);
      }
 else {
        break;
      }
    }
    if (edgeBuffer.size() > 1) {
      e2=edgeBuffer.get(0);
      j=1;
      while (j < edgeBuffer.size()) {
        j=j < 1 ? 1 : j;
        e1=edgeBuffer.get(j - 1);
        e2=edgeBuffer.get(j);
        intersection=e1.getIntersection(e2,weights);
        rmCount=0;
        if (intersection instanceof DPoint) {
          newEvent=(DPoint)intersection;
          if (!e1.isExtremity(newEvent) || !e2.isExtremity(newEvent)) {
            if (newEvent.equals2D(currentEvent)) {
              if (!weights.isEmpty()) {
                w1=e1.getMaxWeight(weights);
                w2=e2.getMaxWeight(weights);
                if (w1 < maxWeight && w2 < maxWeight) {
                  if (Double.isNaN(z)) {
                    throw new DelaunayError(""String_Node_Str"");
                  }
                  newEvent.setZ(z);
                }
 else {
                  maxWeight=Math.max(w1,w2);
                  z=newEvent.getZ();
                  currentEvent.setZ(z);
                }
              }
              newEvent.setX(abs);
              List<DEdge> toBeInsert=new ArrayList<DEdge>();
              if (!newEvent.equals2D(e2.getPointLeft()) && !newEvent.equals2D(e2.getPointRight())) {
                if (newEvent.equals2D(e1.getPointLeft())) {
                  newEvent=e1.getPointLeft();
                }
                if (newEvent.equals2D(e1.getPointRight())) {
                  newEvent=e1.getPointRight();
                }
                inter2=new DEdge(newEvent,e2.getPointLeft());
                inter2.setProperty(e2.getProperty());
                addConstraintEdge(inter2);
                rm=edgeBuffer.remove(j);
                if (!rm.equals(e2)) {
                  throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
                }
                inter4=new DEdge(newEvent,e2.getPointRight());
                inter4.setProperty(e2.getProperty());
                toBeInsert.add(inter4);
                rmCount++;
              }
 else               if (newEvent.equals2D(e2.getPointRight())) {
                addConstraintEdge(e2);
                rm=edgeBuffer.remove(j);
                if (!rm.equals(e2)) {
                  throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
                }
                rmCount++;
              }
              if (!newEvent.equals2D(e1.getPointLeft()) && !newEvent.equals2D(e1.getPointRight())) {
                if (newEvent.equals2D(e2.getPointLeft())) {
                  newEvent=e2.getPointLeft();
                }
                if (newEvent.equals2D(e2.getPointRight())) {
                  newEvent=e2.getPointRight();
                }
                inter1=new DEdge(e1.getPointLeft(),newEvent);
                inter1.setProperty(e1.getProperty());
                addConstraintEdge(inter1);
                rm=edgeBuffer.remove(j - 1);
                if (!rm.equals(e1)) {
                  throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
                }
                inter3=new DEdge(e1.getPointRight(),newEvent);
                inter3.setProperty(e1.getProperty());
                toBeInsert.add(inter3);
                rmCount++;
              }
 else               if (newEvent.equals2D(e1.getPointRight())) {
                addConstraintEdge(e1);
                rm=edgeBuffer.remove(j - 1);
                if (!rm.equals(e1)) {
                  throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
                }
                rmCount++;
              }
              for (              DEdge yed : toBeInsert) {
                edgeBuffer.addEdge(yed);
              }
              j=(j - rmCount < 0 ? 0 : j - rmCount);
            }
 else {
              ensurePointPosition(e2,newEvent);
              ensurePointPosition(e1,newEvent);
              addToSortedList(newEvent,eventPoints);
            }
          }
 else {
            if (e2.getPointRight().equals2D(currentEvent)) {
              addConstraintEdge(e2);
              rm=edgeBuffer.remove(j);
              if (!rm.equals(e2)) {
                throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
              }
              rmCount++;
            }
 else             if (e1.getPointRight().equals2D(currentEvent)) {
              addConstraintEdge(e1);
              rm=edgeBuffer.remove(j - 1);
              if (!rm.equals(e1)) {
                throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
              }
              rmCount++;
              j--;
            }
            j=(j - rmCount < 0 ? 0 : j - rmCount);
          }
        }
 else         if (intersection instanceof DEdge) {
          edgeEvent=(DEdge)intersection;
          newEvent=edgeEvent.getPointLeft();
          if (newEvent.equals2D(currentEvent)) {
            leftMost=(e1.getPointLeft().compareTo2D(e2.getPointLeft()) < 1 ? e1.getPointLeft() : e2.getPointLeft());
            rightMost=(e1.getPointRight().compareTo2D(e2.getPointRight()) < 1 ? e2.getPointRight() : e1.getPointRight());
            inter1=null;
            inter2=null;
            inter3=null;
            rm=edgeBuffer.remove(j);
            if (!rm.equals(e2)) {
              throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
            }
            rm=edgeBuffer.remove(j - 1);
            if (!rm.equals(e1)) {
              throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
            }
            j--;
            if (leftMost.compareTo2D(newEvent) == -1) {
              inter1=new DEdge(leftMost,newEvent);
            }
            inter2=edgeEvent;
            if (rightMost.compareTo2D(edgeEvent.getPointRight()) == 1) {
              inter3=new DEdge(edgeEvent.getPointRight(),rightMost);
            }
            if (inter1 != null) {
              if (inter1.getPointRight().compareTo2D(currentEvent) == 1) {
                addConstraintEdge(inter1);
              }
 else {
                mem=edgeBuffer.addEdge(inter1);
                j=j <= mem ? j : mem;
              }
            }
            if (inter2.getPointRight().compareTo2D(currentEvent) == 1) {
              mem=edgeBuffer.addEdge(inter2);
              j=j <= mem ? j : mem;
            }
 else {
              addConstraintEdge(inter2);
            }
            if (inter3 != null) {
              addEdgeToLeftSortedList(edgeMemory,inter3);
            }
            j=j - 2 < 0 ? 0 : j - 2;
          }
 else {
            throw new DelaunayError(""String_Node_Str"");
          }
        }
 else         if (e1.contains(currentEvent) && !e1.isExtremity(currentEvent)) {
          DEdge inter=new DEdge(e1.getPointLeft(),currentEvent);
          inter.setProperty(e1.getProperty());
          inter.setLocked(e1.isLocked());
          addConstraintEdge(inter);
          if (e1.getStartPoint().equals(e1.getPointLeft())) {
            e1.setStartPoint(currentEvent);
          }
 else {
            e1.setEndPoint(currentEvent);
          }
          if (!weights.isEmpty()) {
            int w=e1.getMaxWeight(weights);
            if (w > maxWeight) {
              maxWeight=w;
            }
          }
        }
 else {
          if (e1.getPointRight().equals2D(currentEvent)) {
            addConstraintEdge(e1);
            rm=edgeBuffer.remove(j - 1);
            if (!rm.equals(e1)) {
              throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
            }
            j--;
            j=j - 1 < 0 ? 0 : j - 1;
          }
        }
        j++;
        if (edgeBuffer.size() > 0 && j >= edgeBuffer.size()) {
          e2=edgeBuffer.get(edgeBuffer.size() - 1);
          if (e2.contains(currentEvent) && !e2.isExtremity(currentEvent)) {
            DEdge temp=new DEdge(e2.getPointLeft(),currentEvent);
            temp.setLocked(e2.isLocked());
            temp.setProperty(e2.getProperty());
            addConstraintEdge(temp);
            if (e2.getStartPoint().equals(e2.getPointLeft())) {
              e2.setStartPoint(currentEvent);
            }
 else {
              e2.setEndPoint(currentEvent);
            }
          }
          if (e2.getPointRight().equals(currentEvent)) {
            edgeBuffer.remove(edgeBuffer.size() - 1);
            addConstraintEdge(e2);
          }
        }
      }
    }
 else     if (edgeBuffer.size() == 1) {
      DEdge e0=edgeBuffer.get(0);
      if (e0.contains(currentEvent) && !e0.isExtremity(currentEvent)) {
        DEdge temp=new DEdge(e0.getPointLeft(),currentEvent);
        temp.setLocked(e0.isLocked());
        temp.setProperty(e0.getProperty());
        addConstraintEdge(temp);
        if (e0.getStartPoint().equals(e0.getPointLeft())) {
          e0.setStartPoint(currentEvent);
        }
 else {
          e0.setEndPoint(currentEvent);
        }
      }
 else       if (e0.getPointRight().equals2D(currentEvent)) {
        addConstraintEdge(edgeBuffer.get(0));
        edgeBuffer.remove(0);
      }
    }
    i++;
  }
}"
86560,"/** 
 * Generate the Delaunay's triangularization with a flip-flap algorithm. Mesh must have been set. Triangulation can only be done once. Otherwise call reprocessDelaunay
 * @throws DelaunayError
 */
public final void processDelaunay() throws DelaunayError {
  if (isMeshComputed()) {
    throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_GENERATED);
  }
 else   if (points.size() < MIN_POINTS_NUMBER) {
    throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_NOT_ENOUGH_POINTS_FOUND);
  }
 else {
    badEdgesQueueList=new LinkedList<DEdge>();
    edges=new ArrayList<DEdge>();
    triangleList=new ArrayList<DTriangle>();
    if (verbose) {
      log.trace(""String_Node_Str"");
    }
    ListIterator<DPoint> iterPoint=points.listIterator();
    DPoint p1=iterPoint.next();
    DPoint p2=iterPoint.next();
    DEdge e1=new DEdge(p1,p2);
    e1=replaceByConstraint(e1);
    List<DEdge> fromLeft=getConstraintFromLPVertical(p1);
    Boundary bound=buildStartBoundary(p1,e1,fromLeft,getConstraintFromLPVertical(p2));
    List<DEdge> added;
    List<DTriangle> tri;
    while (iterPoint.hasNext()) {
      p2=iterPoint.next();
      fromLeft=getConstraintFromLPVertical(p2);
      tri=bound.insertPoint(p2,fromLeft);
      for (      DTriangle t : tri) {
        triangleGID++;
        t.setGID(triangleGID);
      }
      triangleList.addAll(tri);
      added=bound.getAddedEdges();
      for (      DEdge e : added) {
        edgeGID++;
        e.setGID(edgeGID);
      }
      edges.addAll(added);
      badEdgesQueueList=bound.getBadEdges();
      processBadEdges();
    }
    meshComputed=true;
    if (verbose) {
      log.trace(""String_Node_Str"");
      log.trace(""String_Node_Str"");
      log.trace(""String_Node_Str"" + points.size());
      log.trace(""String_Node_Str"" + edges.size());
      log.trace(""String_Node_Str"" + triangleList.size());
    }
  }
}","/** 
 * Generate the Delaunay's triangularization with a flip-flap algorithm. Mesh must have been set. Triangulation can only be done once. Otherwise call reprocessDelaunay
 * @throws DelaunayError
 */
public final void processDelaunay() throws DelaunayError {
  if (isMeshComputed()) {
    throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_GENERATED);
  }
 else   if (points.size() < MIN_POINTS_NUMBER) {
    throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_NOT_ENOUGH_POINTS_FOUND);
  }
 else {
    triangleGID=0;
    badEdgesQueueList=new LinkedList<DEdge>();
    edges=new ArrayList<DEdge>();
    triangleList=new ArrayList<DTriangle>();
    if (verbose) {
      log.trace(""String_Node_Str"");
    }
    ListIterator<DPoint> iterPoint=points.listIterator();
    DPoint p1=iterPoint.next();
    DPoint p2=iterPoint.next();
    DEdge e1=new DEdge(p1,p2);
    e1=replaceByConstraint(e1);
    List<DEdge> fromLeft=getConstraintFromLPVertical(p1);
    Boundary bound=buildStartBoundary(p1,e1,fromLeft,getConstraintFromLPVertical(p2));
    List<DEdge> added;
    List<DTriangle> tri;
    while (iterPoint.hasNext()) {
      p2=iterPoint.next();
      fromLeft=getConstraintFromLPVertical(p2);
      tri=bound.insertPoint(p2,fromLeft);
      for (      DTriangle t : tri) {
        triangleGID++;
        t.setGID(triangleGID);
      }
      triangleList.addAll(tri);
      added=bound.getAddedEdges();
      for (      DEdge e : added) {
        edgeGID++;
        e.setGID(edgeGID);
      }
      edges.addAll(added);
      badEdgesQueueList=bound.getBadEdges();
      processBadEdges();
    }
    meshComputed=true;
    if (verbose) {
      log.trace(""String_Node_Str"");
      log.trace(""String_Node_Str"");
      log.trace(""String_Node_Str"" + points.size());
      log.trace(""String_Node_Str"" + edges.size());
      log.trace(""String_Node_Str"" + triangleList.size());
    }
  }
}"
86561,"public void testEdgesMorphologicalClassification() throws DelaunayError {
  ConstrainedMesh aMesh=new ConstrainedMesh();
  HydroNetwork HydroNetwork=new HydroNetwork(aMesh);
  aMesh.setPrecision(1.0e-3);
  aMesh.setVerbose(true);
  aMesh.setPoints(getPoints());
  aMesh.processDelaunay();
  HydroNetwork.morphologicalQualification();
  List<DEdge> edges=aMesh.getEdges();
  for (  DEdge myEdge : edges) {
    myEdge.getProperty();
  }
}","public void testEdgesMorphologicalClassification() throws DelaunayError {
  HydroNetwork aMesh=new HydroNetwork();
  aMesh.setPrecision(1.0e-3);
  aMesh.setVerbose(true);
  aMesh.setPoints(getPoints());
  aMesh.processDelaunay();
  aMesh.morphologicalQualification();
  List<DEdge> edges=aMesh.getEdges();
  for (  DEdge myEdge : edges) {
    myEdge.getProperty();
  }
}"
86562,"/** 
 * Build the boundary needed to begin the building of the mesh.
 * @param p1
 * @param e1
 * @param constraintsP1
 * @return
 */
final Boundary buildStartBoundary(Point p1,Edge e1,List<Edge> constraintsP1,List<Edge> constraintsP2){
  BoundaryPart bp;
  Boundary bound=new Boundary();
  List<Edge> boundEdges=new LinkedList<Edge>();
  boundEdges.add(e1);
  List<Edge> boundEdgesBis=new LinkedList<Edge>();
  boundEdgesBis.add(e1);
  if (constraintsP2.isEmpty()) {
    e1.setDegenerated(true);
  }
 else {
    e1.setShared(true);
  }
  List<BoundaryPart> bps=new ArrayList<BoundaryPart>();
  if (constraintsP1 == null || constraintsP1.isEmpty()) {
    bp=new BoundaryPart(boundEdges);
    bps.add(bp);
    boundEdges=new LinkedList<Edge>();
    boundEdges.add(e1);
    fillWithP2Constraints(boundEdgesBis,constraintsP2,bps,e1);
    if (!bps.isEmpty()) {
      boundEdges=new LinkedList<Edge>();
      boundEdges.add(e1);
      bps.get(bps.size() - 1).setBoundaryEdges(boundEdges);
    }
    bound.setBoundary(bps);
  }
 else {
    Edge current=constraintsP1.get(0);
    ListIterator<Edge> iter=constraintsP1.listIterator();
    boolean direct=current.getEndPoint().equals(current.getPointRight());
    if ((direct && current.isRight(e1.getPointRight())) || (!direct && current.isLeft(e1.getPointRight()))) {
      bp=new BoundaryPart(boundEdges);
      bps.add(bp);
      fillWithP2Constraints(boundEdgesBis,constraintsP2,bps,e1);
      while (iter.hasNext()) {
        current=iter.next();
        if (!current.equals(e1)) {
          bps.add(new BoundaryPart(current));
        }
      }
    }
 else {
      boolean set=false;
      Edge mem=iter.next();
      current=null;
      while (iter.hasNext()) {
        current=iter.next();
        if (!set && (current.isRight(e1.getPointRight()) || current.getPointRight().equals(e1.getEndPoint()))) {
          if (mem.equals(e1)) {
            bps.add(new BoundaryPart(boundEdges));
          }
 else {
            bps.add(new BoundaryPart(boundEdges,mem));
          }
          fillWithP2Constraints(boundEdgesBis,constraintsP2,bps,e1);
          mem=current;
          set=true;
        }
 else {
          if (!set && e1.equals(current)) {
            bps.add(new BoundaryPart(boundEdges,mem));
          }
 else {
            bps.add(new BoundaryPart(mem));
          }
          mem=current;
        }
      }
      if (current != null) {
        if (current.isRight(e1.getPointRight())) {
          bps.add(new BoundaryPart(current));
        }
 else         if (!current.equals(e1)) {
          bps.add(new BoundaryPart(boundEdges,current));
        }
      }
      if (!set) {
        mem=mem.equals(e1) ? null : mem;
        bps.add(new BoundaryPart(boundEdges,mem));
        fillWithP2Constraints(boundEdgesBis,constraintsP2,bps,e1);
      }
    }
  }
  edges.add(e1);
  bound.setBoundary(bps);
  return bound;
}","/** 
 * Build the boundary needed to begin the building of the mesh.
 * @param p1
 * @param e1
 * @param constraintsP1
 * @return
 */
final Boundary buildStartBoundary(Point p1,Edge e1,List<Edge> constraintsP1,List<Edge> constraintsP2){
  BoundaryPart bp;
  Boundary bound=new Boundary();
  List<Edge> boundEdges=new LinkedList<Edge>();
  boundEdges.add(e1);
  List<Edge> boundEdgesBis=new LinkedList<Edge>();
  boundEdgesBis.add(e1);
  if (constraintsP2.isEmpty()) {
    e1.setDegenerated(true);
  }
 else {
    e1.setShared(true);
  }
  List<BoundaryPart> bps=new ArrayList<BoundaryPart>();
  if (constraintsP1 == null || constraintsP1.isEmpty()) {
    bp=new BoundaryPart(boundEdges);
    bps.add(bp);
    boundEdges=new LinkedList<Edge>();
    boundEdges.add(e1);
    fillWithP2Constraints(boundEdgesBis,constraintsP2,bps,e1);
    if (!bps.isEmpty()) {
      boundEdges=new LinkedList<Edge>();
      boundEdges.add(e1);
      bps.get(bps.size() - 1).setBoundaryEdges(boundEdges);
    }
    bound.setBoundary(bps);
  }
 else {
    Edge current=constraintsP1.get(0);
    ListIterator<Edge> iter=constraintsP1.listIterator();
    boolean direct=current.getEndPoint().equals(current.getPointRight());
    if ((direct && current.isRight(e1.getPointRight())) || (!direct && current.isLeft(e1.getPointRight()))) {
      bp=new BoundaryPart(boundEdges);
      bps.add(bp);
      fillWithP2Constraints(boundEdgesBis,constraintsP2,bps,e1);
      while (iter.hasNext()) {
        current=iter.next();
        if (!current.equals(e1)) {
          bps.add(new BoundaryPart(current));
        }
      }
    }
 else {
      boolean set=false;
      Edge mem=iter.next();
      current=null;
      while (iter.hasNext()) {
        current=iter.next();
        if (!set && (current.isRight(e1.getPointRight()) || current.getPointRight().equals(e1.getEndPoint()))) {
          if (mem.equals(e1)) {
            bps.add(new BoundaryPart(boundEdges));
          }
 else {
            bps.add(new BoundaryPart(boundEdges,mem));
          }
          fillWithP2Constraints(boundEdgesBis,constraintsP2,bps,e1);
          mem=current;
          set=true;
        }
 else {
          if (!set && e1.equals(current)) {
            bps.add(new BoundaryPart(boundEdges,mem));
          }
 else {
            bps.add(new BoundaryPart(mem));
          }
          mem=current;
        }
      }
      if (current != null) {
        if (current.isRight(e1.getPointRight())) {
          bps.add(new BoundaryPart(current));
        }
 else         if (!current.equals(e1)) {
          bps.add(new BoundaryPart(boundEdges,current));
          fillWithP2Constraints(boundEdgesBis,constraintsP2,bps,e1);
          set=true;
        }
      }
      if (!set) {
        mem=mem.equals(e1) ? null : mem;
        bps.add(new BoundaryPart(boundEdges,mem));
        fillWithP2Constraints(boundEdgesBis,constraintsP2,bps,e1);
      }
    }
  }
  edges.add(e1);
  bound.setBoundary(bps);
  return bound;
}"
86563,"/** 
 * @param point
 * @return
 */
List<BoundaryPart> getEligibleParts(final Point point){
  if (boundary.size() <= 1) {
    return new ArrayList<BoundaryPart>();
  }
  int size=boundary.size();
  ArrayList<BoundaryPart> ret=new ArrayList<BoundaryPart>();
  if (boundary.get(1).isConstraintRightPoint(point)) {
    ret.add(boundary.get(0));
    ret.add(boundary.get(1));
    ret.addAll(getUpperSameRightPoint(1,boundary.get(1)));
    return ret;
  }
  if (boundary.get(1).pointIsLower(point)) {
    ret.add(boundary.get(0));
    return ret;
  }
  if (boundary.get(size - 1).isConstraintRightPoint(point)) {
    ret.addAll(getLowerSameRightPoint(size - 1,boundary.get(size - 1)));
    ret.add(boundary.get(size - 1));
    return ret;
  }
  if (boundary.get(size - 1).pointIsUpper(point)) {
    ret.add(boundary.get(size - 1));
    return ret;
  }
  BoundaryPart bp=boundary.get(0);
  BoundaryPart bpo;
  int index=boundary.size() / 2;
  int delta=index;
  boolean next=true;
  while (next) {
    bp=boundary.get(index);
    if (bp.pointIsUpper(point)) {
      bpo=boundary.get(index + 1);
      if (bpo.pointIsLower(point)) {
        ret.add(bp);
        return ret;
      }
 else       if (bpo.isConstraintRightPoint(point)) {
        ret.add(bp);
        ret.addAll(getUpperSameRightPoint(index + 1,bpo));
        return ret;
      }
 else {
        delta=delta / 2 > 0 ? delta / 2 : 1;
        index=index + delta;
      }
    }
 else     if (bp.isConstraintRightPoint(point)) {
      ret.addAll(getLowerSameRightPoint(index,bp));
      ret.add(bp);
      ret.addAll(getUpperSameRightPoint(index,bp));
      return ret;
    }
 else {
      bpo=boundary.get(index - 1);
      if (bpo.pointIsUpper(point)) {
        ret.add(bpo);
        return ret;
      }
 else       if (bpo.isConstraintRightPoint(point)) {
        ret.add(bp);
        ret.addAll(getUpperSameRightPoint(index - 1,bpo));
        return ret;
      }
 else {
        delta=delta / 2 > 0 ? delta / 2 : 1;
        index=index - delta;
      }
    }
  }
  return ret;
}","/** 
 * @param point
 * @return
 */
List<BoundaryPart> getEligibleParts(final Point point){
  if (boundary.size() <= 1) {
    return new ArrayList<BoundaryPart>();
  }
  int size=boundary.size();
  ArrayList<BoundaryPart> ret=new ArrayList<BoundaryPart>();
  if (boundary.get(1).isConstraintRightPoint(point)) {
    ret.add(boundary.get(0));
    ret.add(boundary.get(1));
    ret.addAll(getUpperSameRightPoint(1,boundary.get(1)));
    return ret;
  }
  if (boundary.get(1).pointIsLower(point)) {
    ret.add(boundary.get(0));
    return ret;
  }
  if (boundary.get(size - 1).isConstraintRightPoint(point)) {
    ret.addAll(getLowerSameRightPoint(size - 1,boundary.get(size - 1)));
    ret.add(boundary.get(size - 1));
    return ret;
  }
  if (boundary.get(size - 1).pointIsUpper(point)) {
    ret.add(boundary.get(size - 1));
    return ret;
  }
  BoundaryPart bp=boundary.get(0);
  BoundaryPart bpo;
  int index=boundary.size() / 2;
  int delta=index;
  boolean next=true;
  while (next) {
    bp=boundary.get(index);
    if (bp.pointIsUpper(point)) {
      bpo=boundary.get(index + 1);
      if (bpo.pointIsLower(point)) {
        ret.add(bp);
        return ret;
      }
 else       if (bpo.isConstraintRightPoint(point)) {
        ret.add(bp);
        ret.addAll(getUpperSameRightPoint(index + 1,bpo));
        return ret;
      }
 else {
        delta=delta / 2 > 0 ? delta / 2 : 1;
        index=index + delta;
      }
    }
 else     if (bp.isConstraintRightPoint(point)) {
      ret.addAll(getLowerSameRightPoint(index,bp));
      ret.add(bp);
      ret.addAll(getUpperSameRightPoint(index,bp));
      return ret;
    }
 else {
      bpo=boundary.get(index - 1);
      if (bpo.pointIsUpper(point)) {
        ret.add(bpo);
        return ret;
      }
 else       if (bpo.isConstraintRightPoint(point)) {
        ret.addAll(getLowerSameRightPoint(index - 1,bpo));
        ret.add(bpo);
        return ret;
      }
 else {
        delta=delta / 2 > 0 ? delta / 2 : 1;
        index=index - delta;
      }
    }
  }
  return ret;
}"
86564,"/** 
 * A simple try to retrieve a boundary part.
 * @throws DelaunayError
 */
public void testGetEligiblePartSimple() throws DelaunayError {
  Boundary bound=getExampleBoundary();
  List<BoundaryPart> elig=bound.getEligibleParts(new Point(9,6,0));
  assertTrue(elig.size() == 1);
  assertTrue(elig.get(0).getBoundaryEdges().size() == 1);
  assertTrue(elig.get(0).getBoundaryEdges().get(0).equals(new Edge(6,5,0,7,7,0)));
  assertTrue(elig.get(0).getConstraint().equals(new Edge(6,5,0,10,5,0)));
}","/** 
 * A simple try to retrieve a boundary part.
 * @throws DelaunayError
 */
public void testGetEligiblePartSimple() throws DelaunayError {
  Boundary bound=getExampleBoundary();
  List<BoundaryPart> elig=bound.getEligibleParts(new Point(9,6,0));
  assertTrue(elig.size() == 1);
  assertTrue(elig.get(0).getBoundaryEdges().size() == 1);
  assertTrue(elig.get(0).getBoundaryEdges().get(0).equals(new Edge(6,5,0,7,7,0)));
  assertTrue(elig.get(0).getConstraint().equals(new Edge(6,5,0,10,4,0)));
}"
86565,"/** 
 * Get a boundary ready to be tested.
 * @return
 */
private Boundary getExampleBoundary(){
  List<BoundaryPart> bpl=new ArrayList<BoundaryPart>();
  BoundaryPart bp;
  Edge cstr;
  List<Edge> boundaryEdges;
  Boundary bound=new Boundary();
  cstr=null;
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(0,1,0,3,2,0));
  bp=new BoundaryPart(boundaryEdges);
  bpl.add(bp);
  cstr=new Edge(3,2,0,9,0,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(3,2,0,5,3,0));
  boundaryEdges.add(new Edge(5,3,0,6,5,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(6,5,0,10,5,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(6,5,0,7,7,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(7,7,0,10,7,0);
  boundaryEdges=new ArrayList<Edge>();
  bp=new BoundaryPart(cstr);
  bpl.add(bp);
  cstr=new Edge(7,7,0,10,9,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(7,7,0,6,10,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(6,10,0,9,12,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(6,10,0,5,11,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(5,11,0,9,12,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(5,11,0,3,12,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(3,12,0,9,12,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(3,12,0,0,13,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  bound.setBoundary(bpl);
  return bound;
}","/** 
 * Get a boundary ready to be tested.
 * @return
 */
private Boundary getExampleBoundary(){
  List<BoundaryPart> bpl=new ArrayList<BoundaryPart>();
  BoundaryPart bp;
  Edge cstr;
  List<Edge> boundaryEdges;
  Boundary bound=new Boundary();
  cstr=null;
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(0,1,0,3,2,0));
  bp=new BoundaryPart(boundaryEdges);
  bpl.add(bp);
  cstr=new Edge(3,2,0,9,0,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(3,2,0,5,3,0));
  boundaryEdges.add(new Edge(5,3,0,6,5,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(6,5,0,10,4,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(6,5,0,7,7,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(7,7,0,10,7,0);
  boundaryEdges=new ArrayList<Edge>();
  bp=new BoundaryPart(cstr);
  bpl.add(bp);
  cstr=new Edge(7,7,0,10,9,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(7,7,0,6,10,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(6,10,0,9,12,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(6,10,0,5,11,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(5,11,0,9,12,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(5,11,0,3,12,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(3,12,0,9,12,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(3,12,0,0,13,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  bound.setBoundary(bpl);
  return bound;
}"
86566,"/** 
 * @param point
 * @return
 */
List<BoundaryPart> getEligibleParts(final Point point){
  if (boundary.size() <= 1) {
    return new ArrayList<BoundaryPart>();
  }
  int size=boundary.size();
  ArrayList<BoundaryPart> ret=new ArrayList<BoundaryPart>();
  if (boundary.get(1).isConstraintRightPoint(point)) {
    ret.add(boundary.get(0));
    ret.addAll(getUpperSameRightPoint(0,boundary.get(0)));
    return ret;
  }
  if (boundary.get(1).pointIsLower(point)) {
    ret.add(boundary.get(0));
    return ret;
  }
  if (boundary.get(size - 1).isConstraintRightPoint(point)) {
    ret.addAll(getLowerSameRightPoint(size - 1,boundary.get(size - 1)));
    ret.add(boundary.get(size - 1));
    return ret;
  }
  if (boundary.get(size - 1).pointIsUpper(point)) {
    ret.add(boundary.get(size - 1));
    return ret;
  }
  BoundaryPart bp=boundary.get(0);
  BoundaryPart bpo;
  int index=boundary.size() / 2;
  int delta=index;
  boolean next=true;
  while (next) {
    bp=boundary.get(index);
    if (bp.pointIsUpper(point)) {
      bpo=boundary.get(index + 1);
      if (bpo.pointIsLower(point)) {
        ret.add(bp);
        return ret;
      }
 else       if (bpo.isConstraintRightPoint(point)) {
        ret.add(bp);
        ret.addAll(getUpperSameRightPoint(index + 1,bpo));
        return ret;
      }
 else {
        delta=delta / 2 > 0 ? delta / 2 : 1;
        index=index + delta;
      }
    }
 else     if (bp.isConstraintRightPoint(point)) {
      ret.addAll(getLowerSameRightPoint(index,bp));
      ret.add(bp);
      ret.addAll(getUpperSameRightPoint(index,bp));
      return ret;
    }
 else {
      bpo=boundary.get(index - 1);
      if (bpo.pointIsUpper(point)) {
        ret.add(bpo);
        return ret;
      }
 else       if (bpo.isConstraintRightPoint(point)) {
        ret.add(bp);
        ret.addAll(getUpperSameRightPoint(index - 1,bpo));
        return ret;
      }
 else {
        delta=delta / 2 > 0 ? delta / 2 : 1;
        index=index - delta;
      }
    }
  }
  return ret;
}","/** 
 * @param point
 * @return
 */
List<BoundaryPart> getEligibleParts(final Point point){
  if (boundary.size() <= 1) {
    return new ArrayList<BoundaryPart>();
  }
  int size=boundary.size();
  ArrayList<BoundaryPart> ret=new ArrayList<BoundaryPart>();
  if (boundary.get(1).isConstraintRightPoint(point)) {
    ret.add(boundary.get(0));
    ret.add(boundary.get(1));
    ret.addAll(getUpperSameRightPoint(1,boundary.get(1)));
    return ret;
  }
  if (boundary.get(1).pointIsLower(point)) {
    ret.add(boundary.get(0));
    return ret;
  }
  if (boundary.get(size - 1).isConstraintRightPoint(point)) {
    ret.addAll(getLowerSameRightPoint(size - 1,boundary.get(size - 1)));
    ret.add(boundary.get(size - 1));
    return ret;
  }
  if (boundary.get(size - 1).pointIsUpper(point)) {
    ret.add(boundary.get(size - 1));
    return ret;
  }
  BoundaryPart bp=boundary.get(0);
  BoundaryPart bpo;
  int index=boundary.size() / 2;
  int delta=index;
  boolean next=true;
  while (next) {
    bp=boundary.get(index);
    if (bp.pointIsUpper(point)) {
      bpo=boundary.get(index + 1);
      if (bpo.pointIsLower(point)) {
        ret.add(bp);
        return ret;
      }
 else       if (bpo.isConstraintRightPoint(point)) {
        ret.add(bp);
        ret.addAll(getUpperSameRightPoint(index + 1,bpo));
        return ret;
      }
 else {
        delta=delta / 2 > 0 ? delta / 2 : 1;
        index=index + delta;
      }
    }
 else     if (bp.isConstraintRightPoint(point)) {
      ret.addAll(getLowerSameRightPoint(index,bp));
      ret.add(bp);
      ret.addAll(getUpperSameRightPoint(index,bp));
      return ret;
    }
 else {
      bpo=boundary.get(index - 1);
      if (bpo.pointIsUpper(point)) {
        ret.add(bpo);
        return ret;
      }
 else       if (bpo.isConstraintRightPoint(point)) {
        ret.add(bp);
        ret.addAll(getUpperSameRightPoint(index - 1,bpo));
        return ret;
      }
 else {
        delta=delta / 2 > 0 ? delta / 2 : 1;
        index=index - delta;
      }
    }
  }
  return ret;
}"
86567,"/** 
 * Connect a point to a degenerated edge, or to a set of linked degenerated edges.
 * @param iter
 * @param point
 * @param tri
 * @param prevAdded
 * @return An edge that could be shared in another triangle with another edge and point. null if such an edge can't exist.
 * @throws DelaunayError
 */
private Edge connectToDegenerated(ListIterator<Edge> iter,Point point,List<DelaunayTriangle> tri,Edge prevAdded,boolean revertDir) throws DelaunayError {
  Edge current=iter.next();
  Edge ret=null;
  Edge mem=null;
  Edge memBis=null;
  LinkedList<Edge> llMem=new LinkedList<Edge>();
  if (current.isColinear(point)) {
    while (current.isColinear(point) && iter.hasNext() && current.isDegenerated()&& !current.isShared()) {
      current=iter.next();
    }
    if (!current.isColinear(point) || !current.isDegenerated()) {
      current=iter.previous();
      current=iter.previous();
      ret=new Edge(current.getEndPoint(),point);
      ret.setDegenerated(true);
      addedEdges.add(ret);
      iter.next();
      iter.add(ret);
      return ret;
    }
 else {
      ret=new Edge(current.getEndPoint(),point);
      ret.setDegenerated(true);
      addedEdges.add(ret);
      iter.add(ret);
      return ret;
    }
  }
  boolean nextReached=false;
  boolean isUpper=current.isLeft(point);
  iter.previous();
  while (iter.hasNext()) {
    current=iter.next();
    if (!current.isDegenerated()) {
      nextReached=true;
      break;
    }
    if (isUpper) {
      if (revertDir) {
        if (mem == null) {
          mem=new Edge(current.getEndPoint(),point);
          ret=mem;
          addedEdges.add(mem);
        }
        memBis=new Edge(point,current.getStartPoint());
        addedEdges.add(memBis);
        tri.add(new DelaunayTriangle(current,memBis,mem));
        mem=memBis;
        current.setDegenerated(false);
        iter.remove();
      }
 else {
        if (mem == null) {
          ret=new Edge(point,current.getStartPoint());
          mem=ret;
        }
        memBis=new Edge(current.getEndPoint(),point);
        tri.add(new DelaunayTriangle(current,memBis,mem));
        mem=memBis;
        current.setDegenerated(false);
      }
    }
 else {
      if (!revertDir) {
        llMem.addFirst(current);
      }
      current.swap();
      iter.remove();
      if (mem == null) {
        mem=new Edge(current.getEndPoint(),point);
        if (prevAdded != null && mem.equals(prevAdded)) {
          mem=prevAdded;
        }
 else {
          addedEdges.add(mem);
          iter.add(mem);
        }
      }
      memBis=new Edge(point,current.getStartPoint());
      addedEdges.add(memBis);
      tri.add(new DelaunayTriangle(mem,memBis,current));
      mem=memBis;
      current.setDegenerated(false);
    }
  }
  if (isUpper) {
    if (nextReached) {
      iter.previous();
    }
    if (revertDir) {
      iter.add(ret);
      ret=mem;
    }
 else {
      iter.add(mem);
    }
  }
 else {
    if (nextReached) {
      iter.previous();
    }
    iter.add(mem);
    for (    Edge ed : llMem) {
      iter.add(ed);
    }
  }
  return ret;
}","/** 
 * Connect a point to a degenerated edge, or to a set of linked degenerated edges.
 * @param iter
 * @param point
 * @param tri
 * @param prevAdded
 * @return An edge that could be shared in another triangle with another edge and point. null if such an edge can't exist.
 * @throws DelaunayError
 */
private Edge connectToDegenerated(ListIterator<Edge> iter,Point point,List<DelaunayTriangle> tri,Edge prevAdded,boolean revertDir) throws DelaunayError {
  Edge current=iter.next();
  Edge ret=null;
  Edge mem=null;
  Edge memBis=null;
  LinkedList<Edge> llMem=new LinkedList<Edge>();
  if (current.isColinear(point)) {
    while (current.isColinear(point) && iter.hasNext() && current.isDegenerated()&& !current.isShared()) {
      current=iter.next();
    }
    if (!current.isColinear(point) || !current.isDegenerated()) {
      current=iter.previous();
      current=iter.previous();
      ret=new Edge(current.getEndPoint(),point);
      ret.setDegenerated(true);
      addedEdges.add(ret);
      iter.next();
      iter.add(ret);
      return ret;
    }
 else {
      ret=new Edge(current.getEndPoint(),point);
      ret.setDegenerated(true);
      addedEdges.add(ret);
      iter.add(ret);
      return ret;
    }
  }
  boolean nextReached=false;
  boolean isUpper=current.isLeft(point);
  iter.previous();
  while (iter.hasNext()) {
    current=iter.next();
    if (!current.isDegenerated()) {
      nextReached=true;
      break;
    }
    if (isUpper) {
      if (revertDir) {
        if (mem == null) {
          mem=new Edge(current.getEndPoint(),point);
          ret=mem;
          addedEdges.add(mem);
        }
        memBis=new Edge(point,current.getStartPoint());
        addedEdges.add(memBis);
        tri.add(new DelaunayTriangle(current,memBis,mem));
        mem=memBis;
        current.setDegenerated(false);
        iter.remove();
      }
 else {
        if (mem == null) {
          ret=new Edge(point,current.getStartPoint());
          mem=ret;
          addedEdges.add(mem);
        }
        memBis=new Edge(current.getEndPoint(),point);
        addedEdges.add(memBis);
        tri.add(new DelaunayTriangle(current,memBis,mem));
        mem=memBis;
        current.setDegenerated(false);
      }
    }
 else {
      if (!revertDir) {
        llMem.addFirst(current);
      }
      current.swap();
      iter.remove();
      if (mem == null) {
        mem=new Edge(current.getEndPoint(),point);
        if (prevAdded != null && mem.equals(prevAdded)) {
          mem=prevAdded;
        }
 else {
          addedEdges.add(mem);
          iter.add(mem);
        }
      }
      memBis=new Edge(point,current.getStartPoint());
      addedEdges.add(memBis);
      tri.add(new DelaunayTriangle(mem,memBis,current));
      mem=memBis;
      current.setDegenerated(false);
    }
  }
  if (isUpper) {
    if (nextReached) {
      iter.previous();
    }
    if (revertDir) {
      iter.add(ret);
      ret=mem;
    }
 else {
      iter.add(mem);
    }
  }
 else {
    if (nextReached) {
      iter.previous();
    }
    iter.add(mem);
    for (    Edge ed : llMem) {
      iter.add(ed);
    }
  }
  return ret;
}"
86568,"/** 
 * Build the boundary needed to begin the building of the mesh.
 * @param p1
 * @param e1
 * @param constraintsP1
 * @return
 */
final Boundary buildStartBoundary(Point p1,Edge e1,List<Edge> constraintsP1,List<Edge> constraintsP2){
  BoundaryPart bp;
  Boundary bound=new Boundary();
  List<Edge> boundEdges=new LinkedList<Edge>();
  boundEdges.add(e1);
  List<Edge> boundEdgesBis=new LinkedList<Edge>();
  boundEdgesBis.add(e1);
  if (constraintsP2.isEmpty()) {
    e1.setDegenerated(true);
  }
 else {
    e1.setShared(true);
  }
  List<BoundaryPart> bps=new ArrayList<BoundaryPart>();
  if (constraintsP1 == null || constraintsP1.isEmpty()) {
    bp=new BoundaryPart(boundEdges);
    bps.add(bp);
    boundEdges=new LinkedList<Edge>();
    boundEdges.add(e1);
    fillWithP2Constraints(boundEdgesBis,constraintsP2,bps,e1);
    if (!bps.isEmpty()) {
      boundEdges=new LinkedList<Edge>();
      boundEdges.add(e1);
      bps.get(bps.size() - 1).setBoundaryEdges(boundEdges);
    }
    bound.setBoundary(bps);
  }
 else {
    Edge current=constraintsP1.get(0);
    ListIterator<Edge> iter=constraintsP1.listIterator();
    boolean direct=current.getEndPoint().equals(current.getPointRight());
    if ((direct && current.isRight(e1.getPointRight())) || (!direct && current.isLeft(e1.getPointRight()))) {
      bp=new BoundaryPart(boundEdges);
      bps.add(bp);
      fillWithP2Constraints(boundEdgesBis,constraintsP2,bps,e1);
      while (iter.hasNext()) {
        current=iter.next();
        bps.add(new BoundaryPart(current));
      }
    }
 else {
      boolean set=false;
      Edge mem=iter.next();
      current=null;
      while (iter.hasNext()) {
        current=iter.next();
        if (!set && (current.isRight(e1.getPointRight()) || current.getPointRight().equals(e1.getEndPoint()))) {
          bps.add(new BoundaryPart(boundEdges,mem));
          fillWithP2Constraints(boundEdgesBis,constraintsP2,bps,e1);
          mem=current;
          set=true;
        }
 else {
          if (!set && e1.equals(current)) {
            bps.add(new BoundaryPart(boundEdges,mem));
          }
 else {
            bps.add(new BoundaryPart(mem));
          }
          mem=current;
        }
      }
      if (current != null) {
        if (current.isRight(e1.getPointRight())) {
          bps.add(new BoundaryPart(current));
        }
 else         if (!current.equals(e1)) {
          bps.add(new BoundaryPart(boundEdges,current));
        }
      }
      if (!set) {
        mem=mem.equals(e1) ? null : mem;
        bps.add(new BoundaryPart(boundEdges,mem));
        fillWithP2Constraints(boundEdgesBis,constraintsP2,bps,e1);
      }
    }
  }
  edges.add(e1);
  bound.setBoundary(bps);
  return bound;
}","/** 
 * Build the boundary needed to begin the building of the mesh.
 * @param p1
 * @param e1
 * @param constraintsP1
 * @return
 */
final Boundary buildStartBoundary(Point p1,Edge e1,List<Edge> constraintsP1,List<Edge> constraintsP2){
  BoundaryPart bp;
  Boundary bound=new Boundary();
  List<Edge> boundEdges=new LinkedList<Edge>();
  boundEdges.add(e1);
  List<Edge> boundEdgesBis=new LinkedList<Edge>();
  boundEdgesBis.add(e1);
  if (constraintsP2.isEmpty()) {
    e1.setDegenerated(true);
  }
 else {
    e1.setShared(true);
  }
  List<BoundaryPart> bps=new ArrayList<BoundaryPart>();
  if (constraintsP1 == null || constraintsP1.isEmpty()) {
    bp=new BoundaryPart(boundEdges);
    bps.add(bp);
    boundEdges=new LinkedList<Edge>();
    boundEdges.add(e1);
    fillWithP2Constraints(boundEdgesBis,constraintsP2,bps,e1);
    if (!bps.isEmpty()) {
      boundEdges=new LinkedList<Edge>();
      boundEdges.add(e1);
      bps.get(bps.size() - 1).setBoundaryEdges(boundEdges);
    }
    bound.setBoundary(bps);
  }
 else {
    Edge current=constraintsP1.get(0);
    ListIterator<Edge> iter=constraintsP1.listIterator();
    boolean direct=current.getEndPoint().equals(current.getPointRight());
    if ((direct && current.isRight(e1.getPointRight())) || (!direct && current.isLeft(e1.getPointRight()))) {
      bp=new BoundaryPart(boundEdges);
      bps.add(bp);
      fillWithP2Constraints(boundEdgesBis,constraintsP2,bps,e1);
      while (iter.hasNext()) {
        current=iter.next();
        bps.add(new BoundaryPart(current));
      }
    }
 else {
      boolean set=false;
      Edge mem=iter.next();
      current=null;
      while (iter.hasNext()) {
        current=iter.next();
        if (!set && (current.isRight(e1.getPointRight()) || current.getPointRight().equals(e1.getEndPoint()))) {
          if (mem.equals(e1)) {
            bps.add(new BoundaryPart(boundEdges));
          }
 else {
            bps.add(new BoundaryPart(boundEdges,mem));
          }
          fillWithP2Constraints(boundEdgesBis,constraintsP2,bps,e1);
          mem=current;
          set=true;
        }
 else {
          if (!set && e1.equals(current)) {
            bps.add(new BoundaryPart(boundEdges,mem));
          }
 else {
            bps.add(new BoundaryPart(mem));
          }
          mem=current;
        }
      }
      if (current != null) {
        if (current.isRight(e1.getPointRight())) {
          bps.add(new BoundaryPart(current));
        }
 else         if (!current.equals(e1)) {
          bps.add(new BoundaryPart(boundEdges,current));
        }
      }
      if (!set) {
        mem=mem.equals(e1) ? null : mem;
        bps.add(new BoundaryPart(boundEdges,mem));
        fillWithP2Constraints(boundEdgesBis,constraintsP2,bps,e1);
      }
    }
  }
  edges.add(e1);
  bound.setBoundary(bps);
  return bound;
}"
86569,"/** 
 * This method will force the integrity of the constraints used to compute the delaunay triangulation. After execution : * duplicates are removed * intersection points are added to the mesh points * secant edges are split
 */
public final void forceConstraintIntegrity() throws DelaunayError {
  ArrayList<Point> eventPoints=new ArrayList<Point>();
  for (  Edge edge : constraintEdges) {
    addToSortedList(edge.getStart(),eventPoints,-2);
    addToSortedList(edge.getEnd(),eventPoints,-2);
  }
  Point currentEvent=null;
  VerticalList edgeBuffer=new VerticalList(0);
  List<Edge> edgeMemory=constraintEdges;
  constraintEdges=new ArrayList<Edge>();
  double abs;
  int i=0;
  int j=0;
  Edge e1, e2;
  Edge inter1=null;
  Edge inter2=null;
  Edge inter3=null;
  Edge inter4=null;
  Point newEvent=null;
  Edge edgeEvent=null;
  Point leftMost=null;
  Point rightMost=null;
  Element intersection=null;
  Edge currentMemEdge=null;
  Edge rm;
  int memoryPos=0;
  int rmCount;
  int mem;
  while (i < eventPoints.size()) {
    currentEvent=eventPoints.get(i);
    abs=currentEvent.getX();
    edgeBuffer.setAbs(abs);
    if (currentMemEdge == null) {
      currentMemEdge=edgeMemory.get(0);
    }
    for (; memoryPos < edgeMemory.size(); memoryPos++) {
      currentMemEdge=edgeMemory.get(memoryPos);
      if (currentEvent.equals2D(currentMemEdge.getPointLeft())) {
        edgeBuffer.addEdge(currentMemEdge);
      }
 else {
        break;
      }
    }
    if (edgeBuffer.size() > 1) {
      e2=edgeBuffer.get(0);
      j=1;
      while (j < edgeBuffer.size()) {
        j=j < 1 ? 1 : j;
        e1=edgeBuffer.get(j - 1);
        e2=edgeBuffer.get(j);
        intersection=e1.getIntersection(e2);
        rmCount=0;
        if (intersection instanceof Point) {
          newEvent=(Point)intersection;
          if (!e1.isExtremity(newEvent) || !e2.isExtremity(newEvent)) {
            if (newEvent.equals2D(currentEvent)) {
              if (!newEvent.equals2D(e2.getPointLeft()) && !newEvent.equals2D(e2.getPointRight())) {
                inter2=new Edge(e2.getPointLeft(),newEvent);
                addConstraintEdge(inter2);
                rm=edgeBuffer.remove(j);
                if (!rm.equals(e2)) {
                  throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
                }
                inter4=new Edge(e2.getPointRight(),newEvent);
                edgeBuffer.addEdge(inter4);
                rmCount++;
              }
 else               if (newEvent.equals2D(e2.getPointRight())) {
                addConstraintEdge(e2);
                rm=edgeBuffer.remove(j);
                if (!rm.equals(e2)) {
                  throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
                }
                rmCount++;
              }
              if (!newEvent.equals2D(e1.getPointLeft()) && !newEvent.equals2D(e1.getPointRight())) {
                inter1=new Edge(e1.getPointLeft(),newEvent);
                addConstraintEdge(inter1);
                rm=edgeBuffer.remove(j - 1);
                if (!rm.equals(e1)) {
                  throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
                }
                inter3=new Edge(e1.getPointRight(),newEvent);
                edgeBuffer.addEdge(inter3);
                rmCount++;
              }
 else               if (newEvent.equals2D(e1.getPointRight())) {
                addConstraintEdge(e1);
                rm=edgeBuffer.remove(j - 1);
                if (!rm.equals(e1)) {
                  throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
                }
                rmCount++;
              }
              j=(j - rmCount < 0 ? 0 : j - rmCount);
            }
 else {
              addToSortedList(newEvent,eventPoints,-2);
            }
          }
 else {
            if (e2.getPointRight().equals2D(currentEvent)) {
              addConstraintEdge(e2);
              rm=edgeBuffer.remove(j);
              if (!rm.equals(e2)) {
                throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
              }
              rmCount++;
            }
            if (e1.getPointRight().equals2D(currentEvent)) {
              addConstraintEdge(e1);
              rm=edgeBuffer.remove(j - 1);
              if (!rm.equals(e1)) {
                throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
              }
              rmCount++;
            }
            j=(j - rmCount < 0 ? 0 : j - rmCount);
          }
        }
 else         if (intersection instanceof Edge) {
          edgeEvent=(Edge)intersection;
          newEvent=edgeEvent.getPointLeft();
          if (newEvent.equals2D(currentEvent)) {
            leftMost=(e1.getPointLeft().compareTo2D(e2.getPointLeft()) < 1 ? e1.getPointLeft() : e2.getPointLeft());
            rightMost=(e1.getPointRight().compareTo2D(e2.getPointRight()) < 1 ? e2.getPointRight() : e1.getPointRight());
            inter1=null;
            inter2=null;
            inter3=null;
            rm=edgeBuffer.remove(j);
            if (!rm.equals(e2)) {
              throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
            }
            rm=edgeBuffer.remove(j - 1);
            if (!rm.equals(e1)) {
              throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
            }
            j--;
            if (leftMost.compareTo2D(newEvent) == -1) {
              inter1=new Edge(leftMost,newEvent);
            }
            inter2=edgeEvent;
            if (rightMost.compareTo2D(edgeEvent.getPointRight()) == 1) {
              inter3=new Edge(edgeEvent.getPointRight(),rightMost);
            }
            if (inter1 != null) {
              if (inter1.getPointRight().compareTo2D(currentEvent) == 1) {
                addConstraintEdge(inter1);
              }
 else {
                mem=edgeBuffer.addEdge(inter1);
                j=j <= mem ? j : mem;
              }
            }
            if (inter2.getPointRight().compareTo2D(currentEvent) == 1) {
              mem=edgeBuffer.addEdge(inter2);
              j=j <= mem ? j : mem;
            }
 else {
              addConstraintEdge(inter2);
            }
            if (inter3 != null) {
              addEdgeToLeftSortedList(edgeMemory,inter3);
            }
            j=j - 2 < 0 ? 0 : j - 2;
          }
 else {
            throw new DelaunayError(""String_Node_Str"");
          }
        }
 else {
          if (e1.getPointRight().equals2D(currentEvent)) {
            addConstraintEdge(e1);
            rm=edgeBuffer.remove(j - 1);
            if (!rm.equals(e1)) {
              throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
            }
            j--;
            j=j - 1 < 0 ? 0 : j - 1;
          }
        }
        j++;
      }
    }
 else     if (edgeBuffer.size() == 1 && edgeBuffer.get(0).getPointRight().equals2D(currentEvent)) {
      addConstraintEdge(edgeBuffer.get(0));
      edgeBuffer.remove(0);
    }
    i++;
  }
}","/** 
 * This method will force the integrity of the constraints used to compute the delaunay triangulation. After execution : * duplicates are removed * intersection points are added to the mesh points * secant edges are split
 */
public final void forceConstraintIntegrity() throws DelaunayError {
  ArrayList<Point> eventPoints=new ArrayList<Point>();
  for (  Edge edge : constraintEdges) {
    addToSortedList(edge.getStart(),eventPoints,-2);
    addToSortedList(edge.getEnd(),eventPoints,-2);
  }
  Point currentEvent=null;
  VerticalList edgeBuffer=new VerticalList(0);
  List<Edge> edgeMemory=constraintEdges;
  constraintEdges=new ArrayList<Edge>();
  double abs;
  int i=0;
  int j=0;
  Edge e1, e2;
  Edge inter1=null;
  Edge inter2=null;
  Edge inter3=null;
  Edge inter4=null;
  Point newEvent=null;
  Edge edgeEvent=null;
  Point leftMost=null;
  Point rightMost=null;
  Element intersection=null;
  Edge currentMemEdge=null;
  Edge rm;
  int memoryPos=0;
  int rmCount;
  int mem;
  while (i < eventPoints.size()) {
    currentEvent=eventPoints.get(i);
    abs=currentEvent.getX();
    edgeBuffer.setAbs(abs);
    if (currentMemEdge == null) {
      currentMemEdge=edgeMemory.get(0);
    }
    for (; memoryPos < edgeMemory.size(); memoryPos++) {
      currentMemEdge=edgeMemory.get(memoryPos);
      if (currentEvent.equals2D(currentMemEdge.getPointLeft())) {
        edgeBuffer.addEdge(currentMemEdge);
      }
 else {
        break;
      }
    }
    if (edgeBuffer.size() > 1) {
      e2=edgeBuffer.get(0);
      j=1;
      while (j < edgeBuffer.size()) {
        j=j < 1 ? 1 : j;
        e1=edgeBuffer.get(j - 1);
        e2=edgeBuffer.get(j);
        intersection=e1.getIntersection(e2);
        rmCount=0;
        if (intersection instanceof Point) {
          newEvent=(Point)intersection;
          if (!e1.isExtremity(newEvent) || !e2.isExtremity(newEvent)) {
            if (newEvent.equals2D(currentEvent)) {
              if (!newEvent.equals2D(e2.getPointLeft()) && !newEvent.equals2D(e2.getPointRight())) {
                if (newEvent.equals2D(e1.getPointLeft())) {
                  newEvent=e1.getPointLeft();
                }
                if (newEvent.equals2D(e1.getPointRight())) {
                  newEvent=e1.getPointRight();
                }
                inter2=new Edge(newEvent,e2.getPointLeft());
                addConstraintEdge(inter2);
                rm=edgeBuffer.remove(j);
                if (!rm.equals(e2)) {
                  throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
                }
                inter4=new Edge(newEvent,e2.getPointRight());
                edgeBuffer.addEdge(inter4);
                rmCount++;
              }
 else               if (newEvent.equals2D(e2.getPointRight())) {
                addConstraintEdge(e2);
                rm=edgeBuffer.remove(j);
                if (!rm.equals(e2)) {
                  throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
                }
                rmCount++;
              }
              if (!newEvent.equals2D(e1.getPointLeft()) && !newEvent.equals2D(e1.getPointRight())) {
                if (newEvent.equals2D(e2.getPointLeft())) {
                  newEvent=e2.getPointLeft();
                }
                if (newEvent.equals2D(e2.getPointRight())) {
                  newEvent=e2.getPointRight();
                }
                inter1=new Edge(e1.getPointLeft(),newEvent);
                addConstraintEdge(inter1);
                rm=edgeBuffer.remove(j - 1);
                if (!rm.equals(e1)) {
                  throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
                }
                inter3=new Edge(e1.getPointRight(),newEvent);
                edgeBuffer.addEdge(inter3);
                rmCount++;
              }
 else               if (newEvent.equals2D(e1.getPointRight())) {
                addConstraintEdge(e1);
                rm=edgeBuffer.remove(j - 1);
                if (!rm.equals(e1)) {
                  throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
                }
                rmCount++;
              }
              j=(j - rmCount < 0 ? 0 : j - rmCount);
            }
 else {
              addToSortedList(newEvent,eventPoints,-2);
            }
          }
 else {
            if (e2.getPointRight().equals2D(currentEvent)) {
              addConstraintEdge(e2);
              rm=edgeBuffer.remove(j);
              if (!rm.equals(e2)) {
                throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
              }
              rmCount++;
            }
            if (e1.getPointRight().equals2D(currentEvent)) {
              addConstraintEdge(e1);
              rm=edgeBuffer.remove(j - 1);
              if (!rm.equals(e1)) {
                throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
              }
              rmCount++;
            }
            j=(j - rmCount < 0 ? 0 : j - rmCount);
          }
        }
 else         if (intersection instanceof Edge) {
          edgeEvent=(Edge)intersection;
          newEvent=edgeEvent.getPointLeft();
          if (newEvent.equals2D(currentEvent)) {
            leftMost=(e1.getPointLeft().compareTo2D(e2.getPointLeft()) < 1 ? e1.getPointLeft() : e2.getPointLeft());
            rightMost=(e1.getPointRight().compareTo2D(e2.getPointRight()) < 1 ? e2.getPointRight() : e1.getPointRight());
            inter1=null;
            inter2=null;
            inter3=null;
            rm=edgeBuffer.remove(j);
            if (!rm.equals(e2)) {
              throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
            }
            rm=edgeBuffer.remove(j - 1);
            if (!rm.equals(e1)) {
              throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
            }
            j--;
            if (leftMost.compareTo2D(newEvent) == -1) {
              inter1=new Edge(leftMost,newEvent);
            }
            inter2=edgeEvent;
            if (rightMost.compareTo2D(edgeEvent.getPointRight()) == 1) {
              inter3=new Edge(edgeEvent.getPointRight(),rightMost);
            }
            if (inter1 != null) {
              if (inter1.getPointRight().compareTo2D(currentEvent) == 1) {
                addConstraintEdge(inter1);
              }
 else {
                mem=edgeBuffer.addEdge(inter1);
                j=j <= mem ? j : mem;
              }
            }
            if (inter2.getPointRight().compareTo2D(currentEvent) == 1) {
              mem=edgeBuffer.addEdge(inter2);
              j=j <= mem ? j : mem;
            }
 else {
              addConstraintEdge(inter2);
            }
            if (inter3 != null) {
              addEdgeToLeftSortedList(edgeMemory,inter3);
            }
            j=j - 2 < 0 ? 0 : j - 2;
          }
 else {
            throw new DelaunayError(""String_Node_Str"");
          }
        }
 else {
          if (e1.getPointRight().equals2D(currentEvent)) {
            addConstraintEdge(e1);
            rm=edgeBuffer.remove(j - 1);
            if (!rm.equals(e1)) {
              throw new DelaunayError(DelaunayError.DELAUNAY_ERROR_REMOVING_EDGE);
            }
            j--;
            j=j - 1 < 0 ? 0 : j - 1;
          }
        }
        j++;
        if (j >= edgeBuffer.size()) {
          e2=edgeBuffer.get(edgeBuffer.size() - 1);
          if (e2.getPointRight().equals(currentEvent)) {
            edgeBuffer.remove(edgeBuffer.size() - 1);
            addConstraintEdge(e2);
          }
        }
      }
    }
 else     if (edgeBuffer.size() == 1 && edgeBuffer.get(0).getPointRight().equals2D(currentEvent)) {
      addConstraintEdge(edgeBuffer.get(0));
      edgeBuffer.remove(0);
    }
    i++;
  }
}"
86570,"/** 
 * This test represents a special configuration with 4 edges. They all intersect in a really small area, and that can cause some problems when computing thee intersection.
 * @throws DelaunayError
 */
public void testAnotherIntersection() throws DelaunayError {
  ConstrainedMesh mesh=new ConstrainedMesh();
  ArrayList<Edge> edges=new ArrayList<Edge>();
  edges.add(new Edge(3.055669878287226,73.03246145782423,0,43.70557626947108,35.35995458365234,0));
  edges.add(new Edge(3.2192640691458885,98.57692790324268,0,19.81947056963683,13.613537224055394,0));
  edges.add(new Edge(5.981788531239529,17.432917460384022,0,9.21484373199296,90.49887456765843,0));
  edges.add(new Edge(6.399806805909236,67.72788939942218,0,74.23296927832122,86.61091383261046,0));
  mesh.setConstraintEdges(edges);
  mesh.forceConstraintIntegrity();
  edges=new ArrayList<Edge>();
}","/** 
 * This test represents a special configuration with 4 edges. They all intersect in a really small area, and that can cause some problems when computing thee intersection.
 * @throws DelaunayError
 */
public void testAnotherIntersection() throws DelaunayError {
  ConstrainedMesh mesh=new ConstrainedMesh();
  ArrayList<Edge> edges=new ArrayList<Edge>();
  edges.add(new Edge(3.055669878287226,73.03246145782423,0,43.70557626947108,35.35995458365234,0));
  edges.add(new Edge(3.2192640691458885,98.57692790324268,0,19.81947056963683,13.613537224055394,0));
  edges.add(new Edge(5.981788531239529,17.432917460384022,0,9.21484373199296,90.49887456765843,0));
  edges.add(new Edge(6.399806805909236,67.72788939942218,0,74.23296927832122,86.61091383261046,0));
  mesh.setConstraintEdges(edges);
  mesh.forceConstraintIntegrity();
  List<Edge> edgesB=mesh.getConstraintEdges();
  assertTrue(edgesB.size() == 16);
}"
86571,"/** 
 * Retrieve the boundarypart that share the same right point as orig, starting at index in the boundary list. DOES NOT include orig in the returned set. DOES NOT return the first boundarypart that does not share the same right point as orig and that is upper than it in the boundary. The returned parts come in the order we would find them if we iterated overt the BoundaryParts of this boundary.
 * @param index
 * @param orig
 * @return
 */
private List<BoundaryPart> getUpperSameRightPoint(int index,BoundaryPart orig){
  Point point=orig.getConstraint().getPointLeft();
  List<BoundaryPart> ret=new ArrayList<BoundaryPart>();
  BoundaryPart bp;
  for (int i=index + 1; i < boundary.size(); i++) {
    bp=boundary.get(i);
    if (bp.getConstraint().getPointRight().equals(point)) {
      ret.add(bp);
    }
 else {
      break;
    }
  }
  return ret;
}","/** 
 * Retrieve the boundarypart that share the same right point as orig, starting at index in the boundary list. DOES NOT include orig in the returned set. DOES NOT return the first boundarypart that does not share the same right point as orig and that is upper than it in the boundary. The returned parts come in the order we would find them if we iterated overt the BoundaryParts of this boundary.
 * @param index
 * @param orig
 * @return
 */
private List<BoundaryPart> getUpperSameRightPoint(int index,BoundaryPart orig){
  Point point=orig.getConstraint().getPointRight();
  List<BoundaryPart> ret=new ArrayList<BoundaryPart>();
  BoundaryPart bp;
  for (int i=index + 1; i < boundary.size(); i++) {
    bp=boundary.get(i);
    if (bp.getConstraint().getPointRight().equals(point)) {
      ret.add(bp);
    }
 else {
      break;
    }
  }
  return ret;
}"
86572,"/** 
 * @param point
 * @return
 */
List<BoundaryPart> getEligibleParts(final Point point){
  if (boundary.size() <= 1) {
    return new ArrayList<BoundaryPart>();
  }
  int size=boundary.size();
  ArrayList<BoundaryPart> ret=new ArrayList<BoundaryPart>();
  if (boundary.get(1).isConstraintRightPoint(point)) {
    ret.add(boundary.get(0));
    ret.addAll(getUpperSameRightPoint(0,boundary.get(0)));
    return ret;
  }
  if (boundary.get(1).pointIsLower(point)) {
    ret.add(boundary.get(0));
    return ret;
  }
  if (boundary.get(size - 1).isConstraintRightPoint(point)) {
    ret.add(boundary.get(size - 1));
    ret.addAll(getLowerSameRightPoint(size - 1,boundary.get(size - 1)));
    return ret;
  }
  if (boundary.get(size - 1).pointIsUpper(point)) {
    ret.add(boundary.get(size - 1));
    return ret;
  }
  BoundaryPart bp=boundary.get(0);
  BoundaryPart bpo;
  int index=boundary.size() / 2;
  int delta=index;
  boolean next=true;
  while (next) {
    bp=boundary.get(index);
    if (bp.pointIsUpper(point)) {
      bpo=boundary.get(index + 1);
      if (bpo.pointIsLower(point)) {
        ret.add(bp);
        return ret;
      }
 else       if (bpo.isConstraintRightPoint(point)) {
        ret.add(bp);
        ret.addAll(getUpperSameRightPoint(index + 1,bpo));
        return ret;
      }
 else {
        delta=delta / 2 > 0 ? delta / 2 : 1;
        index=index + delta;
      }
    }
 else     if (bp.isConstraintRightPoint(point)) {
      ret.addAll(getLowerSameRightPoint(index,bp));
      ret.add(bp);
      ret.addAll(getUpperSameRightPoint(index,bp));
    }
 else {
      bpo=boundary.get(index - 1);
      if (bpo.pointIsUpper(point)) {
        ret.add(bpo);
        return ret;
      }
 else       if (bpo.isConstraintRightPoint(point)) {
        ret.add(bp);
        ret.addAll(getUpperSameRightPoint(index - 1,bpo));
        return ret;
      }
 else {
        delta=delta / 2 > 0 ? delta / 2 : 1;
        index=index - delta;
      }
    }
  }
  return ret;
}","/** 
 * @param point
 * @return
 */
List<BoundaryPart> getEligibleParts(final Point point){
  if (boundary.size() <= 1) {
    return new ArrayList<BoundaryPart>();
  }
  int size=boundary.size();
  ArrayList<BoundaryPart> ret=new ArrayList<BoundaryPart>();
  if (boundary.get(1).isConstraintRightPoint(point)) {
    ret.add(boundary.get(0));
    ret.addAll(getUpperSameRightPoint(0,boundary.get(0)));
    return ret;
  }
  if (boundary.get(1).pointIsLower(point)) {
    ret.add(boundary.get(0));
    return ret;
  }
  if (boundary.get(size - 1).isConstraintRightPoint(point)) {
    ret.addAll(getLowerSameRightPoint(size - 1,boundary.get(size - 1)));
    ret.add(boundary.get(size - 1));
    return ret;
  }
  if (boundary.get(size - 1).pointIsUpper(point)) {
    ret.add(boundary.get(size - 1));
    return ret;
  }
  BoundaryPart bp=boundary.get(0);
  BoundaryPart bpo;
  int index=boundary.size() / 2;
  int delta=index;
  boolean next=true;
  while (next) {
    bp=boundary.get(index);
    if (bp.pointIsUpper(point)) {
      bpo=boundary.get(index + 1);
      if (bpo.pointIsLower(point)) {
        ret.add(bp);
        return ret;
      }
 else       if (bpo.isConstraintRightPoint(point)) {
        ret.add(bp);
        ret.addAll(getUpperSameRightPoint(index + 1,bpo));
        return ret;
      }
 else {
        delta=delta / 2 > 0 ? delta / 2 : 1;
        index=index + delta;
      }
    }
 else     if (bp.isConstraintRightPoint(point)) {
      ret.addAll(getLowerSameRightPoint(index,bp));
      ret.add(bp);
      ret.addAll(getUpperSameRightPoint(index,bp));
    }
 else {
      bpo=boundary.get(index - 1);
      if (bpo.pointIsUpper(point)) {
        ret.add(bpo);
        return ret;
      }
 else       if (bpo.isConstraintRightPoint(point)) {
        ret.add(bp);
        ret.addAll(getUpperSameRightPoint(index - 1,bpo));
        return ret;
      }
 else {
        delta=delta / 2 > 0 ? delta / 2 : 1;
        index=index - delta;
      }
    }
  }
  return ret;
}"
86573,"/** 
 * Retrieve the boundarypart that share the same right point as orig, starting at index in the boundary list, and going in reverse order. Does NOT include orig in the returned set. DOES return the first boundarypart that does not share the same right point as orig and that is lower than it in the boundary. The returned parts come in the order we would find them if we iterated overt the BoundaryParts of this boundary.
 * @param index
 * @param orig
 * @return
 */
private List<BoundaryPart> getLowerSameRightPoint(int index,BoundaryPart orig){
  Point point=orig.getConstraint().getPointLeft();
  List<BoundaryPart> ret=new ArrayList<BoundaryPart>();
  BoundaryPart bp;
  for (int i=index - 1; i >= 0; i--) {
    bp=boundary.get(i);
    if (bp.getConstraint().getPointRight().equals(point)) {
      ret.add(bp);
    }
 else {
      ret.add(bp);
      break;
    }
  }
  Collections.reverse(ret);
  return ret;
}","/** 
 * Retrieve the boundarypart that share the same right point as orig, starting at index in the boundary list, and going in reverse order. Does NOT include orig in the returned set. DOES return the first boundarypart that does not share the same right point as orig and that is lower than it in the boundary. The returned parts come in the order we would find them if we iterated overt the BoundaryParts of this boundary.
 * @param index
 * @param orig
 * @return
 */
private List<BoundaryPart> getLowerSameRightPoint(int index,BoundaryPart orig){
  Point point=orig.getConstraint().getPointRight();
  List<BoundaryPart> ret=new ArrayList<BoundaryPart>();
  BoundaryPart bp;
  for (int i=index - 1; i >= 0; i--) {
    bp=boundary.get(i);
    if (bp.getConstraint().getPointRight().equals(point)) {
      ret.add(bp);
    }
 else {
      ret.add(bp);
      break;
    }
  }
  Collections.reverse(ret);
  return ret;
}"
86574,"/** 
 * Get the eligible parts for a point that is lower than all the parts of the boundary
 */
public void testGetEligiblePartsLower() throws DelaunayError {
  Boundary bound=getExampleBoundary();
  List<BoundaryPart> elig=bound.getEligibleParts(new Point(8,-1,0));
  assertTrue(elig.size() == 1);
  Edge ed=elig.get(0).getBoundaryEdges().get(0);
  assertTrue(ed.equals(new Edge(0,1,0,3,2,0)));
}","/** 
 * Get the eligible parts for a point that is lower than all the parts of the boundary
 */
public void testGetEligiblePartsLower() throws DelaunayError {
  Boundary bound=getExampleBoundary();
  List<BoundaryPart> elig=bound.getEligibleParts(new Point(8,-1,0));
  assertTrue(elig.size() == 1);
  Edge ed=elig.get(0).getBoundaryEdges().get(0);
  assertTrue(ed.equals(new Edge(0,1,0,3,2,0)));
  assertNull(elig.get(0).getConstraint());
}"
86575,"/** 
 * @param point
 * @return
 */
List<BoundaryPart> getEligibleParts(final Point point){
  if (boundary.size() <= 1) {
    return new ArrayList<BoundaryPart>();
  }
  int size=boundary.size();
  ArrayList<BoundaryPart> ret=new ArrayList<BoundaryPart>();
  if (boundary.get(1).isConstraintRightPoint(point)) {
    ret.add(boundary.get(0));
    ret.addAll(getUpperSameRightPoint(0,boundary.get(0)));
    return ret;
  }
  if (boundary.get(1).pointIsLower(point)) {
    ret.add(boundary.get(0));
    return ret;
  }
  if (boundary.get(size - 1).isConstraintRightPoint(point)) {
    ret.addAll(getLowerSameRightPoint(size - 1,boundary.get(size - 1)));
    ret.add(boundary.get(size - 1));
    return ret;
  }
  if (boundary.get(size - 1).pointIsUpper(point)) {
    ret.add(boundary.get(size - 1));
    return ret;
  }
  BoundaryPart bp=boundary.get(0);
  BoundaryPart bpo;
  int index=boundary.size() / 2;
  int delta=index;
  boolean next=true;
  while (next) {
    bp=boundary.get(index);
    if (bp.pointIsUpper(point)) {
      bpo=boundary.get(index + 1);
      if (bpo.pointIsLower(point)) {
        ret.add(bp);
        return ret;
      }
 else       if (bpo.isConstraintRightPoint(point)) {
        ret.add(bp);
        ret.addAll(getUpperSameRightPoint(index + 1,bpo));
        return ret;
      }
 else {
        delta=delta / 2 > 0 ? delta / 2 : 1;
        index=index + delta;
      }
    }
 else     if (bp.isConstraintRightPoint(point)) {
      ret.addAll(getLowerSameRightPoint(index,bp));
      ret.add(bp);
      ret.addAll(getUpperSameRightPoint(index,bp));
    }
 else {
      bpo=boundary.get(index - 1);
      if (bpo.pointIsUpper(point)) {
        ret.add(bpo);
        return ret;
      }
 else       if (bpo.isConstraintRightPoint(point)) {
        ret.add(bp);
        ret.addAll(getUpperSameRightPoint(index - 1,bpo));
        return ret;
      }
 else {
        delta=delta / 2 > 0 ? delta / 2 : 1;
        index=index - delta;
      }
    }
  }
  return ret;
}","/** 
 * @param point
 * @return
 */
List<BoundaryPart> getEligibleParts(final Point point){
  if (boundary.size() <= 1) {
    return new ArrayList<BoundaryPart>();
  }
  int size=boundary.size();
  ArrayList<BoundaryPart> ret=new ArrayList<BoundaryPart>();
  if (boundary.get(1).isConstraintRightPoint(point)) {
    ret.add(boundary.get(0));
    ret.addAll(getUpperSameRightPoint(0,boundary.get(0)));
    return ret;
  }
  if (boundary.get(1).pointIsLower(point)) {
    ret.add(boundary.get(0));
    return ret;
  }
  if (boundary.get(size - 1).isConstraintRightPoint(point)) {
    ret.addAll(getLowerSameRightPoint(size - 1,boundary.get(size - 1)));
    ret.add(boundary.get(size - 1));
    return ret;
  }
  if (boundary.get(size - 1).pointIsUpper(point)) {
    ret.add(boundary.get(size - 1));
    return ret;
  }
  BoundaryPart bp=boundary.get(0);
  BoundaryPart bpo;
  int index=boundary.size() / 2;
  int delta=index;
  boolean next=true;
  while (next) {
    bp=boundary.get(index);
    if (bp.pointIsUpper(point)) {
      bpo=boundary.get(index + 1);
      if (bpo.pointIsLower(point)) {
        ret.add(bp);
        return ret;
      }
 else       if (bpo.isConstraintRightPoint(point)) {
        ret.add(bp);
        ret.addAll(getUpperSameRightPoint(index + 1,bpo));
        return ret;
      }
 else {
        delta=delta / 2 > 0 ? delta / 2 : 1;
        index=index + delta;
      }
    }
 else     if (bp.isConstraintRightPoint(point)) {
      ret.addAll(getLowerSameRightPoint(index,bp));
      ret.add(bp);
      ret.addAll(getUpperSameRightPoint(index,bp));
      return ret;
    }
 else {
      bpo=boundary.get(index - 1);
      if (bpo.pointIsUpper(point)) {
        ret.add(bpo);
        return ret;
      }
 else       if (bpo.isConstraintRightPoint(point)) {
        ret.add(bp);
        ret.addAll(getUpperSameRightPoint(index - 1,bpo));
        return ret;
      }
 else {
        delta=delta / 2 > 0 ? delta / 2 : 1;
        index=index - delta;
      }
    }
  }
  return ret;
}"
86576,"/** 
 * Get a boundary ready to be tested.
 * @return
 */
private Boundary getExampleBoundary(){
  List<BoundaryPart> bpl=new ArrayList<BoundaryPart>();
  BoundaryPart bp;
  Edge cstr;
  List<Edge> boundaryEdges;
  Boundary bound=new Boundary();
  cstr=null;
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(0,1,0,3,2,0));
  bp=new BoundaryPart(boundaryEdges);
  bpl.add(bp);
  cstr=new Edge(3,2,0,9,0,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(3,2,0,5,3,0));
  boundaryEdges.add(new Edge(5,3,0,6,5,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(6,5,0,5,10,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(6,5,0,7,7,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(7,7,0,10,7,0);
  boundaryEdges=new ArrayList<Edge>();
  bp=new BoundaryPart(cstr);
  bpl.add(bp);
  cstr=new Edge(7,7,0,10,9,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(7,7,0,6,10,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(6,10,0,9,12,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(6,10,0,5,11,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(5,11,0,9,12,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(5,11,0,3,12,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(3,12,0,9,12,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(3,12,0,0,13,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  bound.setBoundary(bpl);
  return bound;
}","/** 
 * Get a boundary ready to be tested.
 * @return
 */
private Boundary getExampleBoundary(){
  List<BoundaryPart> bpl=new ArrayList<BoundaryPart>();
  BoundaryPart bp;
  Edge cstr;
  List<Edge> boundaryEdges;
  Boundary bound=new Boundary();
  cstr=null;
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(0,1,0,3,2,0));
  bp=new BoundaryPart(boundaryEdges);
  bpl.add(bp);
  cstr=new Edge(3,2,0,9,0,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(3,2,0,5,3,0));
  boundaryEdges.add(new Edge(5,3,0,6,5,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(6,5,0,10,5,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(6,5,0,7,7,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(7,7,0,10,7,0);
  boundaryEdges=new ArrayList<Edge>();
  bp=new BoundaryPart(cstr);
  bpl.add(bp);
  cstr=new Edge(7,7,0,10,9,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(7,7,0,6,10,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(6,10,0,9,12,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(6,10,0,5,11,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(5,11,0,9,12,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(5,11,0,3,12,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  cstr=new Edge(3,12,0,9,12,0);
  boundaryEdges=new ArrayList<Edge>();
  boundaryEdges.add(new Edge(3,12,0,0,13,0));
  bp=new BoundaryPart(boundaryEdges,cstr);
  bpl.add(bp);
  bound.setBoundary(bpl);
  return bound;
}"
86577,"/** 
 * This method will force the integrity of the constraints used to compute the delaunay triangulation. After execution : * duplicates are removed * intersection points are added to the mesh points * secant edges are split
 */
public void forceConstraintIntegrity() throws DelaunayError {
  ArrayList<MyPoint> eventPoints=new ArrayList<MyPoint>();
  for (  MyEdge edge : constraintEdges) {
    addPointToSortedList(edge.getStart(),eventPoints);
    addPointToSortedList(edge.getEnd(),eventPoints);
  }
  MyPoint currentEvent=null;
  ArrayList<MyEdge> edgeBuffer=new ArrayList<MyEdge>();
  ArrayList<MyEdge> edgeMemory=constraintEdges;
  constraintEdges=new ArrayList<MyEdge>();
  double abs;
  int i=0;
  int j=0;
  MyEdge e1, e2;
  MyEdge inter1=null;
  MyEdge inter2=null;
  MyEdge inter3=null;
  MyEdge inter4=null;
  MyPoint newEvent=null;
  MyEdge edgeEvent=null;
  MyPoint leftMost=null;
  MyPoint rightMost=null;
  MyElement intersection=null;
  MyEdge currentMemEdge=null;
  MyEdge rm;
  int memoryPos=0;
  int rmCount;
  int mem;
  while (i < eventPoints.size()) {
    currentEvent=eventPoints.get(i);
    abs=currentEvent.getX();
    sortEdgesVertically(edgeBuffer,abs);
    if (currentMemEdge == null) {
      currentMemEdge=edgeMemory.get(0);
    }
    for (; memoryPos < edgeMemory.size(); memoryPos++) {
      currentMemEdge=edgeMemory.get(memoryPos);
      if (currentEvent.equals2D(currentMemEdge.getPointLeft())) {
        insertEdgeVerticalList(currentMemEdge,edgeBuffer,abs);
      }
 else {
        break;
      }
    }
    if (edgeBuffer.size() > 1) {
      e2=edgeBuffer.get(0);
      j=1;
      while (j < edgeBuffer.size()) {
        j=j < 1 ? 1 : j;
        e1=edgeBuffer.get(j - 1);
        e2=edgeBuffer.get(j);
        intersection=e1.getIntersection(e2);
        rmCount=0;
        if (intersection instanceof MyPoint) {
          newEvent=(MyPoint)intersection;
          if (!e1.isExtremity(newEvent) || !e2.isExtremity(newEvent)) {
            if (newEvent.equals2D(currentEvent)) {
              if (!newEvent.equals2D(e2.getPointLeft()) && !newEvent.equals2D(e2.getPointRight())) {
                inter2=new MyEdge(e2.getPointLeft(),newEvent);
                addConstraintEdge(inter2);
                rm=edgeBuffer.remove(j);
                if (!rm.equals(e2)) {
                  throw new RuntimeException(""String_Node_Str"");
                }
                inter4=new MyEdge(e2.getPointRight(),newEvent);
                insertEdgeVerticalList(inter4,edgeBuffer,abs);
              }
 else               if (newEvent.equals2D(e2.getPointRight())) {
                addConstraintEdge(e2);
                rm=edgeBuffer.remove(j);
                if (!rm.equals(e2)) {
                  throw new RuntimeException(""String_Node_Str"");
                }
                rmCount++;
              }
              if (!newEvent.equals2D(e1.getPointLeft()) && !newEvent.equals2D(e1.getPointRight())) {
                inter1=new MyEdge(e1.getPointLeft(),newEvent);
                addConstraintEdge(inter1);
                rm=edgeBuffer.remove(j - 1);
                if (!rm.equals(e1)) {
                  throw new RuntimeException(""String_Node_Str"");
                }
                inter3=new MyEdge(e1.getPointRight(),newEvent);
                insertEdgeVerticalList(inter3,edgeBuffer,abs);
              }
 else               if (newEvent.equals2D(e1.getPointRight())) {
                addConstraintEdge(e1);
                rm=edgeBuffer.remove(j - 1);
                if (!rm.equals(e1)) {
                  throw new RuntimeException(""String_Node_Str"");
                }
                rmCount++;
              }
              j=(j - rmCount < 0 ? 0 : j - rmCount);
            }
 else {
              addPointToSortedList(newEvent,eventPoints);
            }
          }
 else {
            if (e2.getPointRight().equals2D(currentEvent)) {
              addConstraintEdge(e2);
              rm=edgeBuffer.remove(j);
              if (!rm.equals(e2)) {
                throw new RuntimeException(""String_Node_Str"");
              }
              rmCount++;
            }
            if (e1.getPointRight().equals2D(currentEvent)) {
              addConstraintEdge(e1);
              rm=edgeBuffer.remove(j - 1);
              if (!rm.equals(e1)) {
                throw new RuntimeException(""String_Node_Str"");
              }
              rmCount++;
            }
            j=(j - rmCount < 0 ? 0 : j - rmCount);
          }
        }
 else         if (intersection instanceof MyEdge) {
          edgeEvent=(MyEdge)intersection;
          newEvent=edgeEvent.getPointLeft();
          if (newEvent.equals2D(currentEvent)) {
            leftMost=(e1.getPointLeft().compareTo2D(e2.getPointLeft()) < 1 ? e1.getPointLeft() : e2.getPointLeft());
            rightMost=(e1.getPointRight().compareTo2D(e2.getPointRight()) < 1 ? e2.getPointRight() : e1.getPointRight());
            rm=edgeBuffer.remove(j);
            if (!rm.equals(e2)) {
              throw new RuntimeException(""String_Node_Str"");
            }
            rm=edgeBuffer.remove(j - 1);
            if (!rm.equals(e1)) {
              throw new RuntimeException(""String_Node_Str"");
            }
            j--;
            if (leftMost.compareTo2D(newEvent) == -1) {
              inter1=new MyEdge(leftMost,newEvent);
            }
            inter2=edgeEvent;
            if (rightMost.compareTo2D(edgeEvent.getPointRight()) == 1) {
              inter3=new MyEdge(edgeEvent.getPointRight(),rightMost);
            }
            if (inter1 != null) {
              if (inter1.getPointRight().compareTo2D(currentEvent) == 1) {
                addConstraintEdge(inter1);
              }
 else {
                mem=insertEdgeVerticalList(inter1,edgeBuffer,abs);
                j=j <= mem ? j : mem;
              }
            }
            if (inter2.getPointRight().compareTo2D(currentEvent) == 1) {
              mem=insertEdgeVerticalList(inter2,edgeBuffer,abs);
              j=j <= mem ? j : mem;
            }
 else {
              addConstraintEdge(inter2);
            }
            if (inter3 != null) {
              mem=insertEdgeVerticalList(inter3,edgeBuffer,abs);
              j=j <= mem ? j : mem;
            }
          }
 else {
            throw new DelaunayError(""String_Node_Str"");
          }
        }
 else {
          if (e1.getPointRight().equals2D(currentEvent)) {
            addConstraintEdge(e1);
            rm=edgeBuffer.remove(j - 1);
            if (!rm.equals(e1)) {
              throw new RuntimeException(""String_Node_Str"");
            }
            j--;
            j=j - 1 < 0 ? 0 : j - 1;
          }
        }
        j++;
      }
    }
 else     if (edgeBuffer.size() == 1 && edgeBuffer.get(0).getPointRight().equals2D(currentEvent)) {
      addConstraintEdge(edgeBuffer.get(0));
      edgeBuffer.remove(0);
    }
    i++;
  }
}","/** 
 * This method will force the integrity of the constraints used to compute the delaunay triangulation. After execution : * duplicates are removed * intersection points are added to the mesh points * secant edges are split
 */
public void forceConstraintIntegrity() throws DelaunayError {
  ArrayList<MyPoint> eventPoints=new ArrayList<MyPoint>();
  for (  MyEdge edge : constraintEdges) {
    addPointToSortedList(edge.getStart(),eventPoints);
    addPointToSortedList(edge.getEnd(),eventPoints);
  }
  MyPoint currentEvent=null;
  ArrayList<MyEdge> edgeBuffer=new ArrayList<MyEdge>();
  ArrayList<MyEdge> edgeMemory=constraintEdges;
  constraintEdges=new ArrayList<MyEdge>();
  double abs;
  int i=0;
  int j=0;
  MyEdge e1, e2;
  MyEdge inter1=null;
  MyEdge inter2=null;
  MyEdge inter3=null;
  MyEdge inter4=null;
  MyPoint newEvent=null;
  MyEdge edgeEvent=null;
  MyPoint leftMost=null;
  MyPoint rightMost=null;
  MyElement intersection=null;
  MyEdge currentMemEdge=null;
  MyEdge rm;
  int memoryPos=0;
  int rmCount;
  int mem;
  while (i < eventPoints.size()) {
    currentEvent=eventPoints.get(i);
    abs=currentEvent.getX();
    sortEdgesVertically(edgeBuffer,abs);
    if (currentMemEdge == null) {
      currentMemEdge=edgeMemory.get(0);
    }
    for (; memoryPos < edgeMemory.size(); memoryPos++) {
      currentMemEdge=edgeMemory.get(memoryPos);
      if (currentEvent.equals2D(currentMemEdge.getPointLeft())) {
        insertEdgeVerticalList(currentMemEdge,edgeBuffer,abs);
      }
 else {
        break;
      }
    }
    if (edgeBuffer.size() > 1) {
      e2=edgeBuffer.get(0);
      j=1;
      while (j < edgeBuffer.size()) {
        j=j < 1 ? 1 : j;
        e1=edgeBuffer.get(j - 1);
        e2=edgeBuffer.get(j);
        intersection=e1.getIntersection(e2);
        rmCount=0;
        if (intersection instanceof MyPoint) {
          newEvent=(MyPoint)intersection;
          if (!e1.isExtremity(newEvent) || !e2.isExtremity(newEvent)) {
            if (newEvent.equals2D(currentEvent)) {
              if (!newEvent.equals2D(e2.getPointLeft()) && !newEvent.equals2D(e2.getPointRight())) {
                inter2=new MyEdge(e2.getPointLeft(),newEvent);
                addConstraintEdge(inter2);
                rm=edgeBuffer.remove(j);
                if (!rm.equals(e2)) {
                  throw new RuntimeException(""String_Node_Str"");
                }
                inter4=new MyEdge(e2.getPointRight(),newEvent);
                insertEdgeVerticalList(inter4,edgeBuffer,abs);
                rmCount++;
              }
 else               if (newEvent.equals2D(e2.getPointRight())) {
                addConstraintEdge(e2);
                rm=edgeBuffer.remove(j);
                if (!rm.equals(e2)) {
                  throw new RuntimeException(""String_Node_Str"");
                }
                rmCount++;
              }
              if (!newEvent.equals2D(e1.getPointLeft()) && !newEvent.equals2D(e1.getPointRight())) {
                inter1=new MyEdge(e1.getPointLeft(),newEvent);
                addConstraintEdge(inter1);
                rm=edgeBuffer.remove(j - 1);
                if (!rm.equals(e1)) {
                  throw new RuntimeException(""String_Node_Str"");
                }
                inter3=new MyEdge(e1.getPointRight(),newEvent);
                insertEdgeVerticalList(inter3,edgeBuffer,abs);
                rmCount++;
              }
 else               if (newEvent.equals2D(e1.getPointRight())) {
                addConstraintEdge(e1);
                rm=edgeBuffer.remove(j - 1);
                if (!rm.equals(e1)) {
                  throw new RuntimeException(""String_Node_Str"");
                }
                rmCount++;
              }
              j=(j - rmCount < 0 ? 0 : j - rmCount);
            }
 else {
              addPointToSortedList(newEvent,eventPoints);
            }
          }
 else {
            if (e2.getPointRight().equals2D(currentEvent)) {
              addConstraintEdge(e2);
              rm=edgeBuffer.remove(j);
              if (!rm.equals(e2)) {
                throw new RuntimeException(""String_Node_Str"");
              }
              rmCount++;
            }
            if (e1.getPointRight().equals2D(currentEvent)) {
              addConstraintEdge(e1);
              rm=edgeBuffer.remove(j - 1);
              if (!rm.equals(e1)) {
                throw new RuntimeException(""String_Node_Str"");
              }
              rmCount++;
            }
            j=(j - rmCount < 0 ? 0 : j - rmCount);
          }
        }
 else         if (intersection instanceof MyEdge) {
          edgeEvent=(MyEdge)intersection;
          newEvent=edgeEvent.getPointLeft();
          if (newEvent.equals2D(currentEvent)) {
            leftMost=(e1.getPointLeft().compareTo2D(e2.getPointLeft()) < 1 ? e1.getPointLeft() : e2.getPointLeft());
            rightMost=(e1.getPointRight().compareTo2D(e2.getPointRight()) < 1 ? e2.getPointRight() : e1.getPointRight());
            inter1=null;
            inter2=null;
            inter3=null;
            rm=edgeBuffer.remove(j);
            if (!rm.equals(e2)) {
              throw new RuntimeException(""String_Node_Str"");
            }
            rm=edgeBuffer.remove(j - 1);
            if (!rm.equals(e1)) {
              throw new RuntimeException(""String_Node_Str"");
            }
            j--;
            if (leftMost.compareTo2D(newEvent) == -1) {
              inter1=new MyEdge(leftMost,newEvent);
            }
            inter2=edgeEvent;
            if (rightMost.compareTo2D(edgeEvent.getPointRight()) == 1) {
              inter3=new MyEdge(edgeEvent.getPointRight(),rightMost);
            }
            if (inter1 != null) {
              if (inter1.getPointRight().compareTo2D(currentEvent) == 1) {
                addConstraintEdge(inter1);
              }
 else {
                mem=insertEdgeVerticalList(inter1,edgeBuffer,abs);
                j=j <= mem ? j : mem;
              }
            }
            if (inter2.getPointRight().compareTo2D(currentEvent) == 1) {
              mem=insertEdgeVerticalList(inter2,edgeBuffer,abs);
              j=j <= mem ? j : mem;
            }
 else {
              addConstraintEdge(inter2);
            }
            if (inter3 != null) {
              addEdgeToLeftSortedList(edgeMemory,inter3);
            }
            j=j - 2 < 0 ? 0 : j - 2;
          }
 else {
            throw new DelaunayError(""String_Node_Str"");
          }
        }
 else {
          if (e1.getPointRight().equals2D(currentEvent)) {
            addConstraintEdge(e1);
            rm=edgeBuffer.remove(j - 1);
            if (!rm.equals(e1)) {
              throw new RuntimeException(""String_Node_Str"");
            }
            j--;
            j=j - 1 < 0 ? 0 : j - 1;
          }
        }
        j++;
      }
    }
 else     if (edgeBuffer.size() == 1 && edgeBuffer.get(0).getPointRight().equals2D(currentEvent)) {
      addConstraintEdge(edgeBuffer.get(0));
      edgeBuffer.remove(0);
    }
    i++;
  }
}"
86578,"/** 
 * check if two edges intersect
 * @param p1 the start point of the other edge
 * @param p2 the end point of the other edge
 * @return intersection :<br/>0 = no intersection<br/> 1 = intersect<br/> 2 = co-linear and don't intersect<br/> 3 = intersects at the extremity<br/> 4 = intersect in more than one point<br/> note that if on extremity of an edge lies inside the other edge, but is not one of the extremities of the other edge, this method returns 1
 */
public int intersects(MyPoint p1,MyPoint p2) throws DelaunayError {
  int result=0;
  MyPoint p3=this.startPoint;
  MyPoint p4=this.endPoint;
  MyElement inter=getIntersection(p1,p2,false);
  if (inter == null) {
    double a1=p2.getX() - p1.getX();
    double b1=p4.getX() - p3.getX();
    double a2=p2.getY() - p1.getY();
    double b2=p4.getY() - p3.getY();
    double d=b1 * a2 - b2 * a1;
    if (-MyTools.EPSILON < d && d < MyTools.EPSILON) {
      return 2;
    }
 else {
      return 0;
    }
  }
 else   if (inter instanceof MyPoint) {
    MyPoint interPoint=(MyPoint)inter;
    if ((interPoint.squareDistance2D(p1) < MyTools.EPSILON2 || interPoint.squareDistance2D(p2) < MyTools.EPSILON2) && (interPoint.squareDistance2D(p3) < MyTools.EPSILON2 || interPoint.squareDistance2D(p4) < MyTools.EPSILON2)) {
      return 3;
    }
 else {
      return 1;
    }
  }
 else   if (inter instanceof MyEdge) {
    return 4;
  }
  return result;
}","/** 
 * check if two edges intersect
 * @param p1 the start point of the other edge
 * @param p2 the end point of the other edge
 * @return intersection :<br/>0 = no intersection<br/> 1 = intersect<br/> 2 = co-linear and don't intersect<br/> 3 = intersects at the extremity<br/> 4 = intersect in more than one point<br/> note that if on extremity of an edge lies inside the other edge, but is not one of the extremities of the other edge, this method returns 1
 */
public int intersects(MyPoint p1,MyPoint p2) throws DelaunayError {
  int result=0;
  MyPoint p3=this.startPoint;
  MyPoint p4=this.endPoint;
  MyElement inter=getIntersection(p1,p2,false);
  if (inter == null) {
    double a1=p2.getX() - p1.getX();
    double b1=p4.getX() - p3.getX();
    double a2=p2.getY() - p1.getY();
    double b2=p4.getY() - p3.getY();
    double d=b1 * a2 - b2 * a1;
    if (-MyTools.EPSILON2 < d && d < MyTools.EPSILON2) {
      return 2;
    }
 else {
      return 0;
    }
  }
 else   if (inter instanceof MyPoint) {
    MyPoint interPoint=(MyPoint)inter;
    if ((interPoint.squareDistance2D(p1) < MyTools.EPSILON2 || interPoint.squareDistance2D(p2) < MyTools.EPSILON2) && (interPoint.squareDistance2D(p3) < MyTools.EPSILON2 || interPoint.squareDistance2D(p4) < MyTools.EPSILON2)) {
      return 3;
    }
 else {
      return 1;
    }
  }
 else   if (inter instanceof MyEdge) {
    return 4;
  }
  return result;
}"
86579,"/** 
 * Sort two edges (this and edge, indeed), and sort them according to their intersection point with the line l of equation x=abs. if p1 (p2) is the intersection between l and the line defined by this (edge), this method returns : * -1 if p1 < p2 or ( p1 == p2 and this is ""under"" edge) * 0 if p1 == p2 and (this and edge are colinear) * 1 if p1 > p2 or (p1 == p2 and edge is under this)
 * @param edge
 * @return
 */
public int verticalSort(MyEdge edge,double abs) throws DelaunayError {
  MyPoint pThis=this.getPointFromItsX(abs);
  MyPoint pEdge=edge.getPointFromItsX(abs);
  if (pThis == null || pEdge == null) {
    throw new DelaunayError(""String_Node_Str"");
  }
  int c=pThis.compareTo2D(pEdge);
  if (c == 0) {
    if (this.isVertical()) {
      c=(this.getPointRight().compareTo2D(edge.getPointRight()));
    }
 else     if (edge.isVertical()) {
      c=edge.getPointRight().compareTo2D(this.getPointRight());
    }
 else {
      double deltaXT=getPointRight().getX() - getPointLeft().getX();
      double deltaYT=getPointRight().getY() - getPointLeft().getY();
      double deltaXO=edge.getPointRight().getX() - edge.getPointLeft().getX();
      double deltaYO=edge.getPointRight().getY() - edge.getPointLeft().getY();
      double cT=deltaYT / deltaXT;
      double cO=deltaYO / deltaXO;
      if (-MyTools.EPSILON < cT - cO && cT - cO < MyTools.EPSILON) {
        c=0;
      }
 else       if (cT < cO) {
        c=-1;
      }
 else {
        c=1;
      }
    }
  }
  return c;
}","/** 
 * Sort two edges (this and edge, indeed), and sort them according to their intersection point with the line l of equation x=abs. if p1 (p2) is the intersection between l and the line defined by this (edge), this method returns : * -1 if p1 < p2 or ( p1 == p2 and this is ""under"" edge) * 0 if p1 == p2 and (this and edge are colinear) * 1 if p1 > p2 or (p1 == p2 and edge is under this)
 * @param edge
 * @return
 */
public int verticalSort(MyEdge edge,double abs) throws DelaunayError {
  MyPoint pThis=this.getPointFromItsX(abs);
  MyPoint pEdge=edge.getPointFromItsX(abs);
  if (pThis == null || pEdge == null) {
    throw new DelaunayError(""String_Node_Str"");
  }
  int c=pThis.compareTo2D(pEdge);
  if (c == 0) {
    if (this.isVertical()) {
      c=this.getPointRight().compareTo2D(edge.getPointRight());
    }
 else     if (edge.isVertical()) {
      c=edge.getPointRight().compareTo2D(this.getPointRight());
    }
 else {
      double deltaXT=getPointRight().getX() - getPointLeft().getX();
      double deltaYT=getPointRight().getY() - getPointLeft().getY();
      double deltaXO=edge.getPointRight().getX() - edge.getPointLeft().getX();
      double deltaYO=edge.getPointRight().getY() - edge.getPointLeft().getY();
      double cT=deltaYT / deltaXT;
      double cO=deltaYO / deltaXO;
      if (-MyTools.EPSILON < cT - cO && cT - cO < MyTools.EPSILON) {
        c=getPointRight().compareTo2D(edge.getPointRight());
        if (c == 0) {
          c=getPointLeft().compareTo2D(edge.getPointLeft());
        }
      }
 else       if (cT < cO) {
        c=-1;
      }
 else {
        c=1;
      }
    }
  }
  return c;
}"
86580,"/** 
 * This test checks that intersections are well processed by the sweep line algorithm. It obviously directly depends on the previous tests, and on the algorithms checked in these tests.
 */
public void testProcessIntersections() throws DelaunayError {
  ConstrainedMesh mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(0,0,0),new MyPoint(2,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(0,2,0),new MyPoint(2,0,0)));
  mesh.forceConstraintIntegrity();
  List<MyEdge> edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 4);
  assertTrue(mesh.listContainsPoint(new MyPoint(1,1,0)) > -1);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(0,0,0),new MyPoint(2,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,1,0),new MyPoint(2,0,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 3);
  assertTrue(mesh.listContainsPoint(new MyPoint(1,1,0)) > -1);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,1,0),new MyPoint(2,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(0,2,0),new MyPoint(2,0,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 3);
  assertTrue(mesh.listContainsPoint(new MyPoint(1,1,0)) > -1);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,1,0),new MyPoint(2,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,1,0),new MyPoint(2,0,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 2);
  assertTrue(mesh.listContainsPoint(new MyPoint(1,1,0)) > -1);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,1,0),new MyPoint(2,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,2,0),new MyPoint(1,0,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 3);
  assertTrue(mesh.listContainsPoint(new MyPoint(1,1,0)) > -1);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(2,1,0),new MyPoint(2,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(2,4,0),new MyPoint(2,0,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 3);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(2,1,0),new MyPoint(3,6,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,4,0),new MyPoint(7,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(0,2,0),new MyPoint(2,3,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 5);
  MyEdge e1=edgeList.get(0);
  MyEdge e2;
  for (int i=1; i < edgeList.size(); i++) {
    e2=e1;
    e1=edgeList.get(i);
    assertTrue(e2.sortLeftRight(e1) == -1);
  }
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(2,4,0),new MyPoint(2,0,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(2,1,0),new MyPoint(2,2,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 3);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(23.754617414248024,25.03430079155673,8.321899736147756,29.974500344589934,23.130254996554104,8.9565816678153));
  mesh.addConstraintEdge(new MyEdge(23.754617414248024,25.03430079155673,8.321899736147756,30.606126914660827,32.288840262582056,15.237518756619197));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 2);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(2,4,0),new MyPoint(2,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(2,1,0),new MyPoint(2,3,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 3);
  assertTrue(edgeList.get(0).equals(new MyEdge(2,1,0,2,2,0)));
  assertTrue(edgeList.get(1).equals(new MyEdge(2,2,0,2,3,0)));
  assertTrue(edgeList.get(2).equals(new MyEdge(2,3,0,2,4,0)));
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(2,4,0),new MyPoint(2,3,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(2,1,0),new MyPoint(2,3,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 2);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,1,0),new MyPoint(2,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(0,2,0),new MyPoint(2,0,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(0,0,0),new MyPoint(2,1,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 6);
  assertTrue(mesh.listContainsPoint(new MyPoint(1,1,0)) > -1);
  assertTrue(sillyCheckIntersection(edgeList));
  e1=edgeList.get(0);
  for (int i=1; i < edgeList.size(); i++) {
    e2=e1;
    e1=edgeList.get(i);
    assertTrue(e2.sortLeftRight(e1) == -1);
  }
  mesh=new ConstrainedMesh();
  MyEdge edge1=new MyEdge(29.04662741160085,52.16572027299656,68.38018218763128,21.70784635428322,52.702506064941865,70.26548339515645);
  mesh.addConstraintEdge(edge1);
  MyEdge edge2=new MyEdge(32.696545765031715,62.25043024404333,48.051049255488714,27.630378535764756,51.60370887400286,81.41914742448961);
  mesh.addConstraintEdge(edge2);
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 4);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(50,17,11,1,32,6));
  mesh.addConstraintEdge(new MyEdge(97,30,99,46,1,98));
  mesh.addConstraintEdge(new MyEdge(63,17,56,91,26,35));
  mesh.addConstraintEdge(new MyEdge(59,12,96,47,35,24));
  mesh.addConstraintEdge(new MyEdge(44,44,10,72,7,27));
  mesh.addConstraintEdge(new MyEdge(29,9,35,33,67,39));
  mesh.addConstraintEdge(new MyEdge(4,5,18,89,12,17));
  mesh.addConstraintEdge(new MyEdge(38,81,70,33,35,36));
  mesh.addConstraintEdge(new MyEdge(70,74,55,2,2,64));
  mesh.addConstraintEdge(new MyEdge(51,50,47,8,21,73));
  edgeList=mesh.getConstraintEdges();
  e1=edgeList.get(0);
  for (int i=1; i < edgeList.size(); i++) {
    e2=e1;
    e1=edgeList.get(i);
    assertTrue(e2.sortLeftRight(e1) == -1);
  }
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(sillyCheckIntersection(edgeList));
  mesh=new ConstrainedMesh();
  List<MyEdge> randomEdges=getRandomEdges(1000);
  for (  MyEdge edge : randomEdges) {
    mesh.addConstraintEdge(edge);
  }
  double t1=System.currentTimeMillis();
  mesh.forceConstraintIntegrity();
  mesh.forceConstraintIntegrity();
  double t2=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (t2 - t1));
  assertTrue(sillyCheckIntersection(edgeList));
  edgeList=mesh.getConstraintEdges();
  e1=edgeList.get(0);
  for (int i=1; i < edgeList.size(); i++) {
    e2=e1;
    e1=edgeList.get(i);
    assertTrue(e2.sortLeftRight(e1) < 1);
  }
  t1=System.currentTimeMillis();
  boolean bool=sillyCheckIntersection(edgeList);
  t2=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (t2 - t1));
  assertTrue(bool);
}","/** 
 * This test checks that intersections are well processed by the sweep line algorithm. It obviously directly depends on the previous tests, and on the algorithms checked in these tests.
 */
public void testProcessIntersections() throws DelaunayError {
  ConstrainedMesh mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(0,0,0),new MyPoint(2,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(0,2,0),new MyPoint(2,0,0)));
  mesh.forceConstraintIntegrity();
  List<MyEdge> edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 4);
  assertTrue(mesh.listContainsPoint(new MyPoint(1,1,0)) > -1);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(0,0,0),new MyPoint(2,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,1,0),new MyPoint(2,0,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 3);
  assertTrue(mesh.listContainsPoint(new MyPoint(1,1,0)) > -1);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,1,0),new MyPoint(2,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(0,2,0),new MyPoint(2,0,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 3);
  assertTrue(mesh.listContainsPoint(new MyPoint(1,1,0)) > -1);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,1,0),new MyPoint(2,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,1,0),new MyPoint(2,0,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 2);
  assertTrue(mesh.listContainsPoint(new MyPoint(1,1,0)) > -1);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,1,0),new MyPoint(2,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,2,0),new MyPoint(1,0,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 3);
  assertTrue(mesh.listContainsPoint(new MyPoint(1,1,0)) > -1);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(2,1,0),new MyPoint(2,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(2,4,0),new MyPoint(2,0,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 3);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(2,1,0),new MyPoint(3,6,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,4,0),new MyPoint(7,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(0,2,0),new MyPoint(2,3,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 5);
  MyEdge e1=edgeList.get(0);
  MyEdge e2;
  for (int i=1; i < edgeList.size(); i++) {
    e2=e1;
    e1=edgeList.get(i);
    assertTrue(e2.sortLeftRight(e1) == -1);
  }
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(4,1,0),new MyPoint(5,6,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(4,4,0),new MyPoint(10,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(0,2,0),new MyPoint(2,3,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(0,2,0),new MyPoint(2,3,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(0,4,0),new MyPoint(2,1,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 8);
  e1=edgeList.get(0);
  for (int i=1; i < edgeList.size(); i++) {
    e2=e1;
    e1=edgeList.get(i);
    assertTrue(e2.sortLeftRight(e1) == -1);
  }
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(4,1,0),new MyPoint(8,6,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(4,4,0),new MyPoint(10,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(4,8,0),new MyPoint(10,10,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(5,10,0),new MyPoint(9,9,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 8);
  e1=edgeList.get(0);
  for (int i=1; i < edgeList.size(); i++) {
    e2=e1;
    e1=edgeList.get(i);
    assertTrue(e2.sortLeftRight(e1) == -1);
  }
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(0,3,0),new MyPoint(5,3,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,4,0),new MyPoint(3,1,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,0,0),new MyPoint(5,4,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 9);
  e1=edgeList.get(0);
  for (int i=1; i < edgeList.size(); i++) {
    e2=e1;
    e1=edgeList.get(i);
    assertTrue(e2.sortLeftRight(e1) == -1);
  }
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(2,1,0),new MyPoint(2,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(2,4,0),new MyPoint(2,0,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 3);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,3,0),new MyPoint(10,6,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(7,5,0),new MyPoint(13,7,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(7,7,0),new MyPoint(13,5,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 5);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,3,0),new MyPoint(10,6,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(7,5,0),new MyPoint(13,7,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(7,7,0),new MyPoint(10,3,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 6);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(23.754617414248024,25.03430079155673,8.321899736147756,29.974500344589934,23.130254996554104,8.9565816678153));
  mesh.addConstraintEdge(new MyEdge(23.754617414248024,25.03430079155673,8.321899736147756,30.606126914660827,32.288840262582056,15.237518756619197));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 2);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(2,4,0),new MyPoint(2,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(2,1,0),new MyPoint(2,3,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 3);
  assertTrue(edgeList.get(0).equals(new MyEdge(2,1,0,2,2,0)));
  assertTrue(edgeList.get(1).equals(new MyEdge(2,2,0,2,3,0)));
  assertTrue(edgeList.get(2).equals(new MyEdge(2,3,0,2,4,0)));
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(2,4,0),new MyPoint(2,3,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(2,1,0),new MyPoint(2,3,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 2);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(new MyPoint(1,1,0),new MyPoint(2,2,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(0,2,0),new MyPoint(2,0,0)));
  mesh.addConstraintEdge(new MyEdge(new MyPoint(0,0,0),new MyPoint(2,1,0)));
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 6);
  assertTrue(mesh.listContainsPoint(new MyPoint(1,1,0)) > -1);
  assertTrue(sillyCheckIntersection(edgeList));
  e1=edgeList.get(0);
  for (int i=1; i < edgeList.size(); i++) {
    e2=e1;
    e1=edgeList.get(i);
    assertTrue(e2.sortLeftRight(e1) == -1);
  }
  mesh=new ConstrainedMesh();
  MyEdge edge1=new MyEdge(29.04662741160085,52.16572027299656,68.38018218763128,21.70784635428322,52.702506064941865,70.26548339515645);
  mesh.addConstraintEdge(edge1);
  MyEdge edge2=new MyEdge(32.696545765031715,62.25043024404333,48.051049255488714,27.630378535764756,51.60370887400286,81.41914742448961);
  mesh.addConstraintEdge(edge2);
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(edgeList.size() == 4);
  mesh=new ConstrainedMesh();
  mesh.addConstraintEdge(new MyEdge(50,17,11,1,32,6));
  mesh.addConstraintEdge(new MyEdge(97,30,99,46,1,98));
  mesh.addConstraintEdge(new MyEdge(63,17,56,91,26,35));
  mesh.addConstraintEdge(new MyEdge(59,12,96,47,35,24));
  mesh.addConstraintEdge(new MyEdge(44,44,10,72,7,27));
  mesh.addConstraintEdge(new MyEdge(29,9,35,33,67,39));
  mesh.addConstraintEdge(new MyEdge(4,5,18,89,12,17));
  mesh.addConstraintEdge(new MyEdge(38,81,70,33,35,36));
  mesh.addConstraintEdge(new MyEdge(70,74,55,2,2,64));
  mesh.addConstraintEdge(new MyEdge(51,50,47,8,21,73));
  edgeList=mesh.getConstraintEdges();
  e1=edgeList.get(0);
  for (int i=1; i < edgeList.size(); i++) {
    e2=e1;
    e1=edgeList.get(i);
    assertTrue(e2.sortLeftRight(e1) == -1);
  }
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  assertTrue(sillyCheckIntersection(edgeList));
  mesh=new ConstrainedMesh();
  List<MyEdge> randomEdges=getRandomEdges(1000);
  for (  MyEdge edge : randomEdges) {
    mesh.addConstraintEdge(edge);
  }
  double t1=System.currentTimeMillis();
  mesh.forceConstraintIntegrity();
  edgeList=mesh.getConstraintEdges();
  boolean bool=sillyCheckIntersection(edgeList);
  System.out.println(""String_Node_Str"" + edgeList.size());
  mesh.forceConstraintIntegrity();
  double t2=System.currentTimeMillis();
  System.out.println(""String_Node_Str"" + (t2 - t1));
  edgeList=mesh.getConstraintEdges();
  edgeList=mesh.getConstraintEdges();
  System.out.println(""String_Node_Str"" + edgeList.size());
  e1=edgeList.get(0);
  t1=System.currentTimeMillis();
  bool=sillyCheckIntersection(edgeList);
  t2=System.currentTimeMillis();
  for (int i=1; i < edgeList.size(); i++) {
    e2=e1;
    e1=edgeList.get(i);
    assertTrue(e2.sortLeftRight(e1) < 1);
  }
  System.out.println(""String_Node_Str"" + (t2 - t1));
  assertTrue(bool);
}"
86581,"/** 
 * This test checks the results returned by the method intersects of the class MyEdge. The method also checks that the intersection points are well computed.
 */
public void testEdgesIntersection() throws DelaunayError {
  MyEdge e1=new MyEdge(4,4,0,8,8,0);
  MyEdge e2=new MyEdge(8,4,0,4,8,0);
  MyElement intersection;
  int c=e1.intersects(e2);
  assertTrue(e1.intersects(e2) == 1);
  intersection=e1.getIntersection(e2);
  assertTrue(intersection.equals(new MyPoint(6,6,0)));
  e2=new MyEdge(4,4,0,2,2,0);
  assertTrue(e1.intersects(e2) == 3);
  intersection=e1.getIntersection(e2);
  assertTrue(intersection.equals(new MyPoint(4,4,0)));
  e2=new MyEdge(4,4,0,20,20,0);
  assertTrue(e1.intersects(e2) == 4);
  intersection=e1.getIntersection(e2);
  assertTrue(intersection.equals(new MyEdge(4,4,0,8,8,0)));
  e2=new MyEdge(10,10,0,6,6,0);
  assertTrue(e1.intersects(e2) == 4);
  intersection=e1.getIntersection(e2);
  assertTrue(intersection.equals(new MyEdge(6,6,0,8,8,0)));
  e2=new MyEdge(6,4,0,10,8,0);
  assertTrue(e1.intersects(e2) == 2);
  e2=new MyEdge(0,0,0,1,-4,0);
  assertTrue(e1.intersects(e2) == 0);
  assertNull(e1.getIntersection(e2));
  e2=new MyEdge(8,8,0,1,-4,0);
  assertTrue(e1.intersects(e2) == 3);
  intersection=e1.getIntersection(e2);
  assertTrue(intersection.equals(new MyPoint(8,8,0)));
  e2=new MyEdge(6,6,0,1,-4,0);
  assertTrue(e1.intersects(e2) == 1);
  e1=new MyEdge(4,4,0,4,8,0);
  e2=new MyEdge(4,4,0,4,2,0);
  assertTrue(e1.intersects(e2) == 3);
  assertTrue(e1.getIntersection(e2).equals(new MyPoint(4,4,0)));
  e2=new MyEdge(4,8,0,4,10,0);
  assertTrue(e1.intersects(e2) == 3);
  e2=new MyEdge(4,6,0,4,10,0);
  assertTrue(e1.intersects(e2) == 4);
  assertTrue(e1.getIntersection(e2).equals(new MyEdge(4,6,0,4,8,0)));
  e2=new MyEdge(2,4,0,2,10,0);
  assertTrue(e1.intersects(e2) == 2);
  assertNull(e1.getIntersection(e2));
  e2=new MyEdge(4,9,0,4,10,0);
  assertTrue(e1.intersects(e2) == 2);
  e2=new MyEdge(9,9,0,10,10,0);
  assertTrue(e1.intersects(e2) == 0);
  assertNull(e1.getIntersection(e2));
  e2=new MyEdge(4,0,0,4,10,0);
  assertTrue(e1.intersects(e2) == 4);
  assertTrue(e1.getIntersection(e2).equals(new MyEdge(4,4,0,4,8,0)));
  e2=new MyEdge(4,8,0,10,12,0);
  assertTrue(e1.intersects(e2) == 3);
  e2=new MyEdge(9,9,0,10,10,0);
  assertTrue(e1.intersects(e2) == 0);
  e1=new MyEdge(4,4,0,8,4,0);
  e2=new MyEdge(4,4,0,4,2,0);
  assertTrue(e1.intersects(e2) == 3);
  e2=new MyEdge(5,3,0,5,8,0);
  assertTrue(e1.intersects(e2) == 1);
  e2=new MyEdge(9,4,0,0,4,0);
  assertTrue(e1.intersects(e2) == 4);
  assertTrue(e1.getIntersection(e2).equals(new MyEdge(4,4,0,8,4,0)));
  e2=new MyEdge(8,4,0,10,4,0);
  assertTrue(e1.intersects(e2) == 3);
  e2=new MyEdge(9,4,0,10,4,0);
  assertTrue(e1.intersects(e2) == 2);
  e2=new MyEdge(4,4,0,8,7,0);
  assertTrue(e1.intersects(e2) == 3);
  e2=new MyEdge(4,3,0,8,5,0);
  assertTrue(e1.intersects(e2) == 1);
  e2=new MyEdge(4,3,0,8,3,0);
  assertTrue(e1.intersects(e2) == 2);
  e1=new MyEdge(1.8074157402864,98.70155495362685,17.33208384927718,15.677161919360142,88.91946702159545,72.62346056964518);
  e2=new MyEdge(15.893774288391056,88.76669412916696,73.48698005614088,16.7142085041698,88.18805631290299,76.75761938242825);
  double d1=(88.91946702159545 - 98.70155495362685) / (15.677161919360142 - 1.8074157402864);
  double d2=(88.18805631290299 - 88.76669412916696) / (16.7142085041698 - 15.893774288391056);
  System.out.println(""String_Node_Str"" + d1);
  System.out.println(""String_Node_Str"" + d2);
  MyElement haha=e1.getIntersection(e2);
  System.out.println(haha);
  System.out.println(""String_Node_Str"" + e1.intersects(e2));
  System.out.println(""String_Node_Str"" + e2.intersects(e1));
  assertTrue(e1.intersects(e2) == 2);
  assertTrue(e2.intersects(e1) == 2);
}","/** 
 * This test checks the results returned by the method intersects of the class MyEdge. The method also checks that the intersection points are well computed.
 */
public void testEdgesIntersection() throws DelaunayError {
  MyEdge e1=new MyEdge(4,4,0,8,8,0);
  MyEdge e2=new MyEdge(8,4,0,4,8,0);
  MyElement intersection;
  int c=e1.intersects(e2);
  assertTrue(e1.intersects(e2) == 1);
  intersection=e1.getIntersection(e2);
  assertTrue(intersection.equals(new MyPoint(6,6,0)));
  e2=new MyEdge(4,4,0,2,2,0);
  assertTrue(e1.intersects(e2) == 3);
  intersection=e1.getIntersection(e2);
  assertTrue(intersection.equals(new MyPoint(4,4,0)));
  e2=new MyEdge(4,4,0,20,20,0);
  assertTrue(e1.intersects(e2) == 4);
  intersection=e1.getIntersection(e2);
  assertTrue(intersection.equals(new MyEdge(4,4,0,8,8,0)));
  e2=new MyEdge(10,10,0,6,6,0);
  assertTrue(e1.intersects(e2) == 4);
  intersection=e1.getIntersection(e2);
  assertTrue(intersection.equals(new MyEdge(6,6,0,8,8,0)));
  e2=new MyEdge(6,4,0,10,8,0);
  assertTrue(e1.intersects(e2) == 2);
  e2=new MyEdge(0,0,0,1,-4,0);
  assertTrue(e1.intersects(e2) == 0);
  assertNull(e1.getIntersection(e2));
  e2=new MyEdge(8,8,0,1,-4,0);
  assertTrue(e1.intersects(e2) == 3);
  intersection=e1.getIntersection(e2);
  assertTrue(intersection.equals(new MyPoint(8,8,0)));
  e2=new MyEdge(6,6,0,1,-4,0);
  assertTrue(e1.intersects(e2) == 1);
  e1=new MyEdge(4,4,0,4,8,0);
  e2=new MyEdge(4,4,0,4,2,0);
  assertTrue(e1.intersects(e2) == 3);
  assertTrue(e1.getIntersection(e2).equals(new MyPoint(4,4,0)));
  e2=new MyEdge(4,8,0,4,10,0);
  assertTrue(e1.intersects(e2) == 3);
  e2=new MyEdge(4,6,0,4,10,0);
  assertTrue(e1.intersects(e2) == 4);
  assertTrue(e1.getIntersection(e2).equals(new MyEdge(4,6,0,4,8,0)));
  e2=new MyEdge(2,4,0,2,10,0);
  assertTrue(e1.intersects(e2) == 2);
  assertNull(e1.getIntersection(e2));
  e2=new MyEdge(4,9,0,4,10,0);
  assertTrue(e1.intersects(e2) == 2);
  e2=new MyEdge(9,9,0,10,10,0);
  assertTrue(e1.intersects(e2) == 0);
  assertNull(e1.getIntersection(e2));
  e2=new MyEdge(4,0,0,4,10,0);
  assertTrue(e1.intersects(e2) == 4);
  assertTrue(e1.getIntersection(e2).equals(new MyEdge(4,4,0,4,8,0)));
  e2=new MyEdge(4,8,0,10,12,0);
  assertTrue(e1.intersects(e2) == 3);
  e2=new MyEdge(9,9,0,10,10,0);
  assertTrue(e1.intersects(e2) == 0);
  e1=new MyEdge(4,4,0,8,4,0);
  e2=new MyEdge(4,4,0,4,2,0);
  assertTrue(e1.intersects(e2) == 3);
  e2=new MyEdge(5,3,0,5,8,0);
  assertTrue(e1.intersects(e2) == 1);
  e2=new MyEdge(9,4,0,0,4,0);
  assertTrue(e1.intersects(e2) == 4);
  assertTrue(e1.getIntersection(e2).equals(new MyEdge(4,4,0,8,4,0)));
  e2=new MyEdge(8,4,0,10,4,0);
  assertTrue(e1.intersects(e2) == 3);
  e2=new MyEdge(9,4,0,10,4,0);
  assertTrue(e1.intersects(e2) == 2);
  e2=new MyEdge(4,4,0,8,7,0);
  assertTrue(e1.intersects(e2) == 3);
  e2=new MyEdge(4,3,0,8,5,0);
  assertTrue(e1.intersects(e2) == 1);
  e2=new MyEdge(4,3,0,8,3,0);
  assertTrue(e1.intersects(e2) == 2);
  e1=new MyEdge(26.605142485395294,45.996587159903655,14.80314043832656,26.60521489309339,45.99657676794573,14.803141832441982);
  e2=new MyEdge(26.605142485395294,45.996587159903655,14.80314043832656,26.60522657816091,45.996594194945246,14.80313187802681);
  double d1=(e1.getPointLeft().getY() - e1.getPointRight().getY()) / (e1.getPointLeft().getX() - e1.getPointRight().getX());
  double d2=(e2.getPointLeft().getY() - e2.getPointRight().getY()) / (e2.getPointLeft().getX() - e2.getPointRight().getX());
  System.out.println(""String_Node_Str"" + d1);
  System.out.println(""String_Node_Str"" + d2);
  MyElement haha=e1.getIntersection(e2);
  System.out.println(haha);
  System.out.println(""String_Node_Str"" + e1.intersects(e2));
  System.out.println(""String_Node_Str"" + e2.intersects(e1));
  assertTrue(e1.intersects(e2) == 3);
  assertTrue(e2.intersects(e1) == 3);
}"
86582,"/** 
 * This method check that the vertical sort defined in MyEdge works well
 */
public void testVerticalSort() throws DelaunayError {
  MyEdge e1=new MyEdge(0,0,0,2,2,2);
  MyEdge e2=new MyEdge(0,0,0,2,2,2);
  assertTrue(e1.verticalSort(e2,1) == 0);
}","/** 
 * This method check that the vertical sort defined in MyEdge works well
 */
public void testVerticalSort() throws DelaunayError {
  MyEdge e1=new MyEdge(0,0,0,2,2,2);
  MyEdge e2=new MyEdge(0,0,0,2,2,2);
  assertTrue(e1.verticalSort(e2,1) == 0);
  e1=new MyEdge(0,0,0,2,3,2);
  e2=new MyEdge(0,0,0,2,2,2);
  assertTrue(e1.verticalSort(e2,1) == 1);
  assertTrue(e1.verticalSort(e2,0) == 1);
  e1=new MyEdge(1,8,0,2,3,2);
  e2=new MyEdge(0,0,0,2,2,2);
  assertTrue(e1.verticalSort(e2,1) == 1);
  assertTrue(e1.verticalSort(e2,0) == 1);
  e1=new MyEdge(0,0,0,3,3,2);
  e2=new MyEdge(0,0,0,2,2,2);
  assertTrue(e1.verticalSort(e2,1) == 1);
  assertTrue(e1.verticalSort(e2,0) == 1);
  e1=new MyEdge(-1,-1,0,2,2,2);
  e2=new MyEdge(0,0,0,2,2,2);
  assertTrue(e1.verticalSort(e2,1) == -1);
  assertTrue(e1.verticalSort(e2,0) == -1);
}"
86583,"/** 
 * This method will force the integrity of the constraints used to compute the delaunay triangulation. After execution : * duplicates are removed * intersection points are added to the mesh points * secant edges are split
 */
public void forceConstraintIntegrity() throws DelaunayError {
  ArrayList<MyPoint> eventPoints=new ArrayList<MyPoint>();
  for (  MyEdge edge : constraintEdges) {
    addPointToSortedList(edge.getStart(),eventPoints);
    addPointToSortedList(edge.getEnd(),eventPoints);
  }
  MyPoint currentEvent=null;
  ArrayList<MyEdge> edgeBuffer=new ArrayList<MyEdge>();
  ArrayList<MyEdge> edgeMemory=constraintEdges;
  constraintEdges=new ArrayList<MyEdge>();
  double abs;
  int i=0;
  int j=0;
  MyEdge e1, e2;
  MyEdge inter1=null;
  MyEdge inter2=null;
  MyEdge inter3=null;
  MyEdge inter4=null;
  MyPoint newEvent=null;
  MyEdge edgeEvent=null;
  MyPoint leftMost=null;
  MyPoint rightMost=null;
  MyElement intersection=null;
  boolean rme1=false;
  boolean rme2=false;
  while (i < eventPoints.size()) {
    currentEvent=eventPoints.get(i);
    abs=currentEvent.getX();
    sortEdgesVertically(edgeBuffer,abs);
    while (!edgeMemory.isEmpty() && currentEvent.equals(edgeMemory.get(0).getPointLeft())) {
      insertEdgeVerticalList(edgeMemory.get(0),edgeBuffer,abs);
      edgeMemory.remove(0);
    }
    if (edgeBuffer.size() > 1) {
      e2=edgeBuffer.get(0);
      j=1;
      while (j < edgeBuffer.size()) {
        e1=edgeBuffer.get(j - 1);
        e2=edgeBuffer.get(j);
        intersection=e1.getIntersection(e2);
        if (intersection instanceof MyPoint) {
          newEvent=(MyPoint)intersection;
          if (!e1.isExtremity(newEvent) || !e2.isExtremity(newEvent)) {
            if (newEvent.equals(currentEvent)) {
              if (!newEvent.equals(e2.getPointLeft())) {
                inter2=new MyEdge(e2.getPointLeft(),newEvent);
                addConstraintEdge(inter2);
                edgeBuffer.remove(j);
              }
              j--;
              if (!newEvent.equals(e1.getPointLeft())) {
                inter1=new MyEdge(e1.getPointLeft(),newEvent);
                addConstraintEdge(inter1);
                edgeBuffer.remove(j);
              }
              if (!newEvent.equals(e1.getPointRight()) && !newEvent.equals(e1.getPointLeft())) {
                inter3=new MyEdge(e1.getPointRight(),newEvent);
                insertEdgeVerticalList(inter3,edgeBuffer,abs);
              }
              if (!newEvent.equals(e2.getPointRight()) && !newEvent.equals(e2.getPointLeft())) {
                inter4=new MyEdge(e2.getPointRight(),newEvent);
                insertEdgeVerticalList(inter4,edgeBuffer,abs);
              }
            }
 else {
              addPointToSortedList(newEvent,eventPoints);
            }
          }
 else {
            if (j > 0 && e1.getPointRight().equals(currentEvent)) {
              addConstraintEdge(e1);
              edgeBuffer.remove(j - 1);
            }
            if (j == edgeMemory.size() - 1 && e2.getPointRight().equals(currentEvent)) {
              addConstraintEdge(e2);
              edgeBuffer.remove(j);
            }
          }
        }
 else         if (intersection instanceof MyEdge) {
          edgeEvent=(MyEdge)intersection;
          newEvent=edgeEvent.getPointLeft();
          if (!(e1.isExtremity(newEvent) && e2.isExtremity(newEvent))) {
            addPointToSortedList(edgeEvent.getPointRight(),eventPoints);
          }
 else {
            if (newEvent.equals(currentEvent)) {
              leftMost=(e1.getPointLeft().compareTo2D(e2.getPointLeft()) < 1 ? e1.getPointLeft() : e2.getPointLeft());
              rightMost=(e1.getPointRight().compareTo2D(e2.getPointRight()) < 1 ? e1.getPointRight() : e2.getPointRight());
              edgeBuffer.remove(j);
              j--;
              edgeBuffer.remove(j);
              if (leftMost.compareTo2D(newEvent) == -1) {
                inter1=new MyEdge(leftMost,newEvent);
              }
              inter2=edgeEvent;
              if (rightMost.compareTo2D(edgeEvent.getPointRight()) == 1) {
                inter3=new MyEdge(edgeEvent.getPointRight(),rightMost);
              }
              if (inter1 != null) {
                addConstraintEdge(inter1);
              }
              if (inter2.getPointRight().compareTo2D(currentEvent) == 1) {
                insertEdgeVerticalList(inter2,edgeBuffer,abs);
              }
 else {
                addConstraintEdge(inter2);
              }
              if (inter3 != null) {
                insertEdgeVerticalList(inter2,edgeBuffer,abs);
              }
            }
 else {
              throw new DelaunayError(""String_Node_Str"");
            }
          }
        }
 else {
          if (e1.getPointRight().equals(currentEvent)) {
            addConstraintEdge(e1);
            edgeBuffer.remove(j - 1);
          }
          if (j == edgeMemory.size() - 1 && e2.getPointRight().equals(currentEvent)) {
            addConstraintEdge(e2);
            edgeBuffer.remove(j);
          }
        }
        j++;
      }
    }
 else     if (edgeBuffer.size() == 1 && edgeBuffer.get(0).getPointRight().equals(currentEvent)) {
      addConstraintEdge(edgeBuffer.get(0));
      edgeBuffer.remove(0);
    }
    i++;
  }
}","/** 
 * This method will force the integrity of the constraints used to compute the delaunay triangulation. After execution : * duplicates are removed * intersection points are added to the mesh points * secant edges are split
 */
public void forceConstraintIntegrity() throws DelaunayError {
  ArrayList<MyPoint> eventPoints=new ArrayList<MyPoint>();
  for (  MyEdge edge : constraintEdges) {
    addPointToSortedList(edge.getStart(),eventPoints);
    addPointToSortedList(edge.getEnd(),eventPoints);
  }
  MyPoint currentEvent=null;
  ArrayList<MyEdge> edgeBuffer=new ArrayList<MyEdge>();
  ArrayList<MyEdge> edgeMemory=constraintEdges;
  constraintEdges=new ArrayList<MyEdge>();
  double abs;
  int i=0;
  int j=0;
  MyEdge e1, e2;
  MyEdge inter1=null;
  MyEdge inter2=null;
  MyEdge inter3=null;
  MyEdge inter4=null;
  MyPoint newEvent=null;
  MyEdge edgeEvent=null;
  MyPoint leftMost=null;
  MyPoint rightMost=null;
  MyElement intersection=null;
  boolean rme1=false;
  boolean rme2=false;
  while (i < eventPoints.size()) {
    currentEvent=eventPoints.get(i);
    abs=currentEvent.getX();
    sortEdgesVertically(edgeBuffer,abs);
    while (!edgeMemory.isEmpty() && currentEvent.equals(edgeMemory.get(0).getPointLeft())) {
      insertEdgeVerticalList(edgeMemory.get(0),edgeBuffer,abs);
      edgeMemory.remove(0);
    }
    if (edgeBuffer.size() > 1) {
      e2=edgeBuffer.get(0);
      j=1;
      while (j < edgeBuffer.size()) {
        e1=edgeBuffer.get(j - 1);
        e2=edgeBuffer.get(j);
        intersection=e1.getIntersection(e2);
        if (intersection instanceof MyPoint) {
          newEvent=(MyPoint)intersection;
          if (!e1.isExtremity(newEvent) || !e2.isExtremity(newEvent)) {
            if (newEvent.equals(currentEvent)) {
              if (!newEvent.equals(e2.getPointLeft()) && !newEvent.equals(e2.getPointRight())) {
                inter2=new MyEdge(e2.getPointLeft(),newEvent);
                addConstraintEdge(inter2);
                edgeBuffer.remove(j);
                inter4=new MyEdge(e2.getPointRight(),newEvent);
                insertEdgeVerticalList(inter4,edgeBuffer,abs);
              }
 else               if (newEvent.equals(e2.getPointLeft())) {
                addConstraintEdge(e2);
                edgeBuffer.remove(j);
              }
              j--;
              if (!newEvent.equals(e1.getPointLeft()) && !newEvent.equals(e1.getPointRight())) {
                inter1=new MyEdge(e1.getPointLeft(),newEvent);
                addConstraintEdge(inter1);
                edgeBuffer.remove(j);
                inter3=new MyEdge(e1.getPointRight(),newEvent);
                insertEdgeVerticalList(inter3,edgeBuffer,abs);
              }
 else               if (newEvent.equals(e1.getPointLeft())) {
                addConstraintEdge(e1);
                edgeBuffer.remove(j);
              }
            }
 else {
              addPointToSortedList(newEvent,eventPoints);
            }
          }
 else {
            if (e1.getPointRight().equals(currentEvent)) {
              addConstraintEdge(e1);
              edgeBuffer.remove(j - 1);
            }
            if (e2.getPointRight().equals(currentEvent)) {
              addConstraintEdge(e2);
              edgeBuffer.remove(j);
            }
          }
        }
 else         if (intersection instanceof MyEdge) {
          edgeEvent=(MyEdge)intersection;
          newEvent=edgeEvent.getPointLeft();
          if (!(e1.isExtremity(newEvent) && e2.isExtremity(newEvent))) {
            addPointToSortedList(edgeEvent.getPointRight(),eventPoints);
          }
 else {
            if (newEvent.equals(currentEvent)) {
              leftMost=(e1.getPointLeft().compareTo2D(e2.getPointLeft()) < 1 ? e1.getPointLeft() : e2.getPointLeft());
              rightMost=(e1.getPointRight().compareTo2D(e2.getPointRight()) < 1 ? e1.getPointRight() : e2.getPointRight());
              edgeBuffer.remove(j);
              j--;
              edgeBuffer.remove(j);
              if (leftMost.compareTo2D(newEvent) == -1) {
                inter1=new MyEdge(leftMost,newEvent);
              }
              inter2=edgeEvent;
              if (rightMost.compareTo2D(edgeEvent.getPointRight()) == 1) {
                inter3=new MyEdge(edgeEvent.getPointRight(),rightMost);
              }
              if (inter1 != null) {
                addConstraintEdge(inter1);
              }
              if (inter2.getPointRight().compareTo2D(currentEvent) == 1) {
                insertEdgeVerticalList(inter2,edgeBuffer,abs);
              }
 else {
                addConstraintEdge(inter2);
              }
              if (inter3 != null) {
                insertEdgeVerticalList(inter2,edgeBuffer,abs);
              }
            }
 else {
              throw new DelaunayError(""String_Node_Str"");
            }
          }
        }
 else {
          if (e1.getPointRight().equals(currentEvent)) {
            addConstraintEdge(e1);
            edgeBuffer.remove(j - 1);
          }
          if (e2.getPointRight().equals(currentEvent)) {
            addConstraintEdge(e2);
            edgeBuffer.remove(j);
          }
        }
        j++;
      }
    }
 else     if (edgeBuffer.size() == 1 && edgeBuffer.get(0).getPointRight().equals(currentEvent)) {
      addConstraintEdge(edgeBuffer.get(0));
      edgeBuffer.remove(0);
    }
    i++;
  }
}"
86584,"/** 
 * Check if this==y, considering only the first two coordinates.
 * @param y
 * @return
 */
public boolean equals2D(MyPoint y){
  if (y == null) {
    return false;
  }
 else {
    return coord.equals2D(y.getCoordinate());
  }
}","/** 
 * Check if this==y, considering only the first two coordinates.
 * @param y
 * @return
 */
public boolean equals2D(MyPoint y){
  if (y == null) {
    return false;
  }
 else {
    return (coord.distance(y.getCoordinate()) < MyTools.EPSILON);
  }
}"
86585,"/** 
 * We override the equals method, as two points can be said equal when their coordinate are exactly the same
 * @param y
 * @return
 */
@Override public boolean equals(Object p){
  if (p instanceof MyPoint) {
    MyPoint y=(MyPoint)p;
    return coord.equals3D(y.getCoordinate());
  }
 else {
    return false;
  }
}","/** 
 * We override the equals method, as two points can be said equal when their coordinate are exactly the same
 * @param y
 * @return
 */
@Override public boolean equals(Object p){
  if (p instanceof MyPoint) {
    MyPoint y=(MyPoint)p;
    double dist=coord.distance(y.getCoordinate()) + (coord.z - y.getZ()) * coord.z - y.getZ();
    return dist < MyTools.EPSILON2;
  }
 else {
    return false;
  }
}"
86586,"/** 
 * Add a point inside a triangle The point is supposed to be in the points list
 * @param aTriangle
 * @param aPoint
 * @throws DelaunayError
 */
private void addPointInsideTriangle(MyTriangle aTriangle,MyPoint aPoint){
  MyEdge oldEdge[]=new MyEdge[3];
  for (int i=0; i < 3; i++) {
    oldEdge[i]=aTriangle.edges[i];
  }
  MyPoint firstPoint=aTriangle.edges[0].getStartPoint();
  MyPoint secondPoint=aTriangle.edges[0].getEndPoint();
  MyPoint alterPoint=aTriangle.getAlterPoint(firstPoint,secondPoint);
  MyTriangle aTriangle1=new MyTriangle();
  MyTriangle aTriangle2=new MyTriangle();
  MyTriangle aTriangle3=aTriangle;
  triangles.add(aTriangle1);
  triangles.add(aTriangle2);
  MyEdge anEdge[]=new MyEdge[3];
  anEdge[0]=new MyEdge(secondPoint,aPoint);
  anEdge[1]=new MyEdge(aPoint,firstPoint);
  anEdge[2]=new MyEdge(aPoint,alterPoint);
  for (int i=0; i < 3; i++) {
    edges.add(anEdge[i]);
  }
  aTriangle1.edges[0]=oldEdge[0];
  aTriangle1.edges[1]=anEdge[0];
  aTriangle1.edges[2]=anEdge[1];
  if ((secondPoint == oldEdge[1].getStartPoint()) || (secondPoint == oldEdge[1].getEndPoint()))   aTriangle2.edges[0]=oldEdge[1];
 else   aTriangle2.edges[0]=oldEdge[2];
  aTriangle2.edges[1]=anEdge[2];
  aTriangle2.edges[2]=anEdge[0];
  if ((firstPoint == oldEdge[2].getStartPoint()) || (firstPoint == oldEdge[2].getEndPoint()))   aTriangle3.edges[0]=oldEdge[2];
 else   aTriangle3.edges[0]=oldEdge[1];
  aTriangle3.edges[1]=anEdge[1];
  aTriangle3.edges[2]=anEdge[2];
  if (aTriangle1.edges[0].getLeft() == aTriangle)   aTriangle1.edges[0].setLeft(aTriangle1);
 else   aTriangle1.edges[0].setRight(aTriangle1);
  if (aTriangle2.edges[0].getLeft() == aTriangle)   aTriangle2.edges[0].setLeft(aTriangle2);
 else   aTriangle2.edges[0].setRight(aTriangle2);
  if (aTriangle3.edges[0].getLeft() == aTriangle)   aTriangle3.edges[0].setLeft(aTriangle3);
 else   aTriangle3.edges[0].setRight(aTriangle3);
  if (anEdge[0].isLeft(firstPoint)) {
    anEdge[0].setLeft(aTriangle1);
    anEdge[0].setRight(aTriangle2);
  }
 else {
    anEdge[0].setRight(aTriangle1);
    anEdge[0].setLeft(aTriangle2);
  }
  if (anEdge[1].isLeft(alterPoint)) {
    anEdge[1].setLeft(aTriangle3);
    anEdge[1].setRight(aTriangle1);
  }
 else {
    anEdge[1].setRight(aTriangle3);
    anEdge[1].setLeft(aTriangle1);
  }
  if (anEdge[2].isLeft(firstPoint)) {
    anEdge[2].setLeft(aTriangle3);
    anEdge[2].setRight(aTriangle2);
  }
 else {
    anEdge[2].setRight(aTriangle3);
    anEdge[2].setLeft(aTriangle2);
  }
  aTriangle1.recomputeCenter();
  aTriangle2.recomputeCenter();
  aTriangle3.recomputeCenter();
  if (!isMeshComputed())   for (int i=0; i < 3; i++) {
    if (!badEdgesQueueList.contains(aTriangle1.edges[i]))     badEdgesQueueList.add(aTriangle1.edges[i]);
    if (!badEdgesQueueList.contains(aTriangle2.edges[i]))     badEdgesQueueList.add(aTriangle2.edges[i]);
    if (!badEdgesQueueList.contains(aTriangle3.edges[i]))     badEdgesQueueList.add(aTriangle3.edges[i]);
  }
}","/** 
 * Add a point inside a triangle The point is supposed to be in the points list
 * @param aTriangle
 * @param aPoint
 * @throws DelaunayError
 */
private void addPointInsideTriangle(MyTriangle aTriangle,MyPoint aPoint){
  MyEdge oldEdge[]=new MyEdge[3];
  for (int i=0; i < 3; i++) {
    oldEdge[i]=aTriangle.edges[i];
  }
  MyPoint firstPoint=aTriangle.edges[0].getStartPoint();
  MyPoint secondPoint=aTriangle.edges[0].getEndPoint();
  MyPoint alterPoint=aTriangle.getAlterPoint(firstPoint,secondPoint);
  MyTriangle aTriangle1=new MyTriangle();
  MyTriangle aTriangle2=new MyTriangle();
  MyTriangle aTriangle3=aTriangle;
  triangles.add(aTriangle1);
  triangles.add(aTriangle2);
  MyEdge anEdge[]=new MyEdge[3];
  anEdge[0]=new MyEdge(secondPoint,aPoint);
  anEdge[1]=new MyEdge(aPoint,firstPoint);
  anEdge[2]=new MyEdge(aPoint,alterPoint);
  for (int i=0; i < 3; i++) {
    edges.add(anEdge[i]);
  }
  aTriangle1.edges[0]=oldEdge[0];
  aTriangle1.edges[1]=anEdge[0];
  aTriangle1.edges[2]=anEdge[1];
  if ((secondPoint == oldEdge[1].getStartPoint()) || (secondPoint == oldEdge[1].getEndPoint()))   aTriangle2.edges[0]=oldEdge[1];
 else   aTriangle2.edges[0]=oldEdge[2];
  aTriangle2.edges[1]=anEdge[2];
  aTriangle2.edges[2]=anEdge[0];
  if ((firstPoint == oldEdge[2].getStartPoint()) || (firstPoint == oldEdge[2].getEndPoint()))   aTriangle3.edges[0]=oldEdge[2];
 else   aTriangle3.edges[0]=oldEdge[1];
  aTriangle3.edges[1]=anEdge[1];
  aTriangle3.edges[2]=anEdge[2];
  if (aTriangle1.edges[0].getLeft() == aTriangle)   aTriangle1.edges[0].setLeft(aTriangle1);
 else   aTriangle1.edges[0].setRight(aTriangle1);
  if (aTriangle2.edges[0].getLeft() == aTriangle)   aTriangle2.edges[0].setLeft(aTriangle2);
 else   aTriangle2.edges[0].setRight(aTriangle2);
  if (aTriangle3.edges[0].getLeft() == aTriangle)   aTriangle3.edges[0].setLeft(aTriangle3);
 else   aTriangle3.edges[0].setRight(aTriangle3);
  if (anEdge[0].isLeft(firstPoint)) {
    anEdge[0].setLeft(aTriangle1);
    anEdge[0].setRight(aTriangle2);
  }
 else {
    anEdge[0].setRight(aTriangle1);
    anEdge[0].setLeft(aTriangle2);
  }
  if (anEdge[1].isLeft(alterPoint)) {
    anEdge[1].setLeft(aTriangle3);
    anEdge[1].setRight(aTriangle1);
  }
 else {
    anEdge[1].setRight(aTriangle3);
    anEdge[1].setLeft(aTriangle1);
  }
  if (anEdge[2].isLeft(firstPoint)) {
    anEdge[2].setLeft(aTriangle3);
    anEdge[2].setRight(aTriangle2);
  }
 else {
    anEdge[2].setRight(aTriangle3);
    anEdge[2].setLeft(aTriangle2);
  }
  aTriangle1.recomputeCenter();
  aTriangle2.recomputeCenter();
  aTriangle3.recomputeCenter();
  if (!isMeshComputed())   for (int i=0; i < 3; i++) {
    if (!badEdgesQueueList.contains(aTriangle1.edges[i]))     badEdgesQueueList.add(aTriangle1.edges[i]);
    if (!badEdgesQueueList.contains(aTriangle2.edges[i]))     badEdgesQueueList.add(aTriangle2.edges[i]);
    if (!badEdgesQueueList.contains(aTriangle3.edges[i]))     badEdgesQueueList.add(aTriangle3.edges[i]);
  }
  this.trianglesQuadTrees.cancelUsability();
}"
86587,"/** 
 * Refine mesh according to the type of refinement that has been defined in the refinement variable
 * @throws DelaunayError
 */
public void refineMesh() throws DelaunayError {
  if (!isMeshComputed())   throw new DelaunayError(DelaunayError.DelaunayError_notGenerated);
 else {
    LinkedList<MyTriangle> badTrianglesList=new LinkedList<MyTriangle>();
    LinkedList<MyPoint> barycenter=new LinkedList<MyPoint>();
    boolean softInterpolate=((refinement & refinement_softInterpolate) != 0);
    int iterDone=0;
    int nbDone=0;
    do {
      iterDone++;
      nbDone=0;
      if ((refinement & refinement_maxArea) != 0) {
        for (        MyTriangle aTriangle : triangles) {
          double area=aTriangle.computeArea();
          if (area > maxArea) {
            badTrianglesList.add(aTriangle);
            MyPoint newPoint=aTriangle.getBarycenter();
            if (softInterpolate) {
              double ZValue=aTriangle.softInterpolateZ(newPoint);
              newPoint.setZ(ZValue);
            }
            barycenter.add(newPoint);
          }
        }
        while (!badTrianglesList.isEmpty()) {
          MyTriangle aTriangle=badTrianglesList.getFirst();
          MyPoint newPoint=barycenter.getFirst();
          badTrianglesList.removeFirst();
          barycenter.removeFirst();
          nbDone++;
          addPoint(aTriangle,newPoint);
        }
      }
      if ((refinement & refinement_minAngle) != 0) {
        for (        MyTriangle aTriangle : triangles) {
          if (aTriangle.badAngle(minAngle) >= 0)           badTrianglesList.add(aTriangle);
        }
        while (!badTrianglesList.isEmpty()) {
          MyTriangle aTriangle=badTrianglesList.getFirst();
          badTrianglesList.removeFirst();
          MyEdge longest=aTriangle.edges[0];
          double maxLength=longest.getSquared2DLength();
          for (int i=1; i < 3; i++) {
            double length=aTriangle.edges[i].getSquared2DLength();
            ;
            if (length > maxLength) {
              maxLength=length;
              longest=aTriangle.edges[i];
            }
          }
          tryFlipFlap(aTriangle,longest);
        }
      }
      if ((refinement & refinement_obtuseAngle) != 0) {
      }
    }
 while (nbDone != 0);
  }
}","/** 
 * Refine mesh according to the type of refinement that has been defined in the refinement variable
 * @throws DelaunayError
 */
public void refineMesh() throws DelaunayError {
  if (!isMeshComputed())   throw new DelaunayError(DelaunayError.DelaunayError_notGenerated);
 else {
    LinkedList<MyTriangle> badTrianglesList=new LinkedList<MyTriangle>();
    LinkedList<MyPoint> barycenter=new LinkedList<MyPoint>();
    boolean softInterpolate=((refinement & refinement_softInterpolate) != 0);
    int iterDone=0;
    int nbDone=0;
    do {
      iterDone++;
      nbDone=0;
      if ((refinement & refinement_maxArea) != 0) {
        for (        MyTriangle aTriangle : triangles) {
          double area=aTriangle.computeArea();
          if (area > maxArea) {
            badTrianglesList.add(aTriangle);
            MyPoint newPoint=aTriangle.getBarycenter();
            if (softInterpolate) {
              double ZValue=aTriangle.softInterpolateZ(newPoint);
              newPoint.setZ(ZValue);
            }
            barycenter.add(newPoint);
          }
        }
        while (!badTrianglesList.isEmpty()) {
          MyTriangle aTriangle=badTrianglesList.getFirst();
          MyPoint newPoint=barycenter.getFirst();
          badTrianglesList.removeFirst();
          barycenter.removeFirst();
          nbDone++;
          addPoint(aTriangle,newPoint);
        }
      }
      if ((refinement & refinement_minAngle) != 0) {
        for (        MyTriangle aTriangle : triangles) {
          if (aTriangle.badAngle(minAngle) >= 0)           badTrianglesList.add(aTriangle);
        }
        while (!badTrianglesList.isEmpty()) {
          MyTriangle aTriangle=badTrianglesList.getFirst();
          badTrianglesList.removeFirst();
          MyEdge longest=aTriangle.edges[0];
          double maxLength=longest.getSquared2DLength();
          for (int i=1; i < 3; i++) {
            double length=aTriangle.edges[i].getSquared2DLength();
            ;
            if (length > maxLength) {
              maxLength=length;
              longest=aTriangle.edges[i];
            }
          }
          tryFlipFlap(aTriangle,longest);
        }
      }
      if ((refinement & refinement_obtuseAngle) != 0) {
        for (        MyTriangle aTriangle : triangles) {
          if (aTriangle.getMaxAmgle() >= 90)           badTrianglesList.add(aTriangle);
        }
        while (!badTrianglesList.isEmpty()) {
          MyTriangle aTriangle=badTrianglesList.getFirst();
          badTrianglesList.removeFirst();
        }
      }
    }
 while (nbDone != 0);
    this.trianglesQuadTrees.cancelUsability();
  }
}"
86588,"/** 
 * Get the triangle in which the point is
 * @param aPoint
 */
public MyTriangle getTriangle(MyPoint aPoint){
  MyTriangle foundTriangle=null;
  ListIterator<MyTriangle> iterTriangle=triangles.listIterator();
  while ((iterTriangle.hasNext()) && (foundTriangle == null)) {
    MyTriangle aTriangle=iterTriangle.next();
    if (aTriangle.isInside(aPoint)) {
      foundTriangle=aTriangle;
    }
  }
  return foundTriangle;
}","/** 
 * Get the triangle in which the point is
 * @param aPoint
 */
public MyTriangle getTriangle(MyPoint aPoint){
  MyTriangle foundTriangle=null;
  if (this.trianglesQuadTrees.canBeUsed()) {
    foundTriangle=this.trianglesQuadTrees.search(aPoint);
  }
 else {
    ListIterator<MyTriangle> iterTriangle=triangles.listIterator();
    while ((iterTriangle.hasNext()) && (foundTriangle == null)) {
      MyTriangle aTriangle=iterTriangle.next();
      if (aTriangle.isInside(aPoint)) {
        foundTriangle=aTriangle;
      }
    }
  }
  return foundTriangle;
}"
86589,"/** 
 * Add a point on an edge
 * @param anEdge
 * @param aPoint
 * @return impactedTriangles
 */
private LinkedList<MyTriangle> processAddPoint(MyEdge anEdge,MyPoint aPoint){
  LinkedList<MyTriangle> impactedTriangles=new LinkedList<MyTriangle>();
  if (!anEdge.isExtremity(aPoint)) {
    MyPoint start=anEdge.getStartPoint();
    MyPoint end=anEdge.getEndPoint();
    MyTriangle triangleList[]=new MyTriangle[2];
    MyTriangle new_triangleList[]=new MyTriangle[2];
    MyEdge remainEdge=null;
    MyPoint alterPointList[]=new MyPoint[2];
    MyEdge newEdges[]=new MyEdge[3];
    MyEdge alterEdgeList_start[]=new MyEdge[2];
    MyEdge alterEdgeList_end[]=new MyEdge[2];
    MyTriangle alterTriangleList_end[]=new MyTriangle[2];
    for (int k=0; k < 2; k++) {
      MyTriangle aTriangle1=null;
      if (k == 0)       aTriangle1=anEdge.getLeft();
 else       aTriangle1=anEdge.getRight();
      triangleList[k]=aTriangle1;
      new_triangleList[k]=null;
      alterPointList[k]=null;
      newEdges[k]=null;
      alterEdgeList_start[k]=null;
      alterEdgeList_end[k]=null;
      alterTriangleList_end[k]=null;
      if (aTriangle1 != null) {
        new_triangleList[k]=new MyTriangle(aTriangle1);
        alterPointList[k]=aTriangle1.getAlterPoint(start,end);
        newEdges[k]=new MyEdge(alterPointList[k],aPoint);
        alterEdgeList_start[k]=aTriangle1.getEdgeFromPoints(start,alterPointList[k]);
        alterEdgeList_end[k]=aTriangle1.getEdgeFromPoints(end,alterPointList[k]);
        if (alterEdgeList_end[k] == null)         System.out.println(""String_Node_Str"");
 else         if (alterEdgeList_end[k].getLeft() == aTriangle1)         alterTriangleList_end[k]=alterEdgeList_end[k].getRight();
 else         alterTriangleList_end[k]=alterEdgeList_end[k].getLeft();
      }
    }
    remainEdge=new MyEdge(anEdge);
    remainEdge.setStartPoint(aPoint);
    anEdge.setEndPoint(aPoint);
    for (int k=0; k < 2; k++) {
      if (new_triangleList[k] != null) {
        int i=0;
        boolean found=false;
        while ((i < 3) && (!found)) {
          if (new_triangleList[k].edges[i] == anEdge)           found=true;
 else           i++;
        }
        if (found)         new_triangleList[k].edges[i]=remainEdge;
        i=0;
        found=false;
        while ((i < 3) && (!found)) {
          if (new_triangleList[k].edges[i] == alterEdgeList_start[k])           found=true;
 else           i++;
        }
        if (found)         new_triangleList[k].edges[i]=newEdges[k];
      }
      if (triangleList[k] != null) {
        boolean found=false;
        int i=0;
        found=false;
        while ((i < 3) && (!found)) {
          if (triangleList[k].edges[i] == alterEdgeList_end[k])           found=true;
 else           i++;
        }
        if (found)         triangleList[k].edges[i]=newEdges[k];
      }
    }
    for (int k=0; k < 2; k++) {
      if (alterEdgeList_end[k] != null) {
        if (alterEdgeList_end[k].getLeft() == triangleList[k])         alterEdgeList_end[k].setLeft(new_triangleList[k]);
 else         alterEdgeList_end[k].setRight(new_triangleList[k]);
      }
    }
    for (int k=0; k < 2; k++) {
      if (remainEdge != null) {
        if (remainEdge.getLeft() == triangleList[k])         remainEdge.setLeft(new_triangleList[k]);
        if (remainEdge.getRight() == triangleList[k])         remainEdge.setRight(new_triangleList[k]);
      }
    }
    for (int k=0; k < 2; k++) {
      if (newEdges[k] != null) {
        if (newEdges[k].isLeft(end)) {
          newEdges[k].setLeft(new_triangleList[k]);
          newEdges[k].setRight(triangleList[k]);
        }
 else {
          newEdges[k].setLeft(triangleList[k]);
          newEdges[k].setRight(new_triangleList[k]);
        }
      }
    }
    for (int k=0; k < 2; k++) {
      if (triangleList[k] != null)       triangleList[k].recomputeCenter();
      if (new_triangleList[k] != null)       new_triangleList[k].recomputeCenter();
    }
    points.add(aPoint);
    newEdges[2]=remainEdge;
    for (int k=0; k < 3; k++) {
      if (newEdges[k] != null) {
        edges.add(newEdges[k]);
        if (!isMeshComputed())         if (!badEdgesQueueList.contains(newEdges[k]))         badEdgesQueueList.add(newEdges[k]);
      }
    }
    for (int k=0; k < 2; k++) {
      if (new_triangleList[k] != null)       triangles.add(new_triangleList[k]);
    }
    for (int k=0; k < 2; k++) {
      if (triangleList[k] != null)       impactedTriangles.add(triangleList[k]);
      if (new_triangleList[k] != null)       impactedTriangles.add(new_triangleList[k]);
    }
  }
  return impactedTriangles;
}","/** 
 * Add a point on an edge
 * @param anEdge
 * @param aPoint
 * @return impactedTriangles
 */
private LinkedList<MyTriangle> processAddPoint(MyEdge anEdge,MyPoint aPoint){
  LinkedList<MyTriangle> impactedTriangles=new LinkedList<MyTriangle>();
  if (!anEdge.isExtremity(aPoint)) {
    MyPoint start=anEdge.getStartPoint();
    MyPoint end=anEdge.getEndPoint();
    MyTriangle triangleList[]=new MyTriangle[2];
    MyTriangle new_triangleList[]=new MyTriangle[2];
    MyEdge remainEdge=null;
    MyPoint alterPointList[]=new MyPoint[2];
    MyEdge newEdges[]=new MyEdge[3];
    MyEdge alterEdgeList_start[]=new MyEdge[2];
    MyEdge alterEdgeList_end[]=new MyEdge[2];
    MyTriangle alterTriangleList_end[]=new MyTriangle[2];
    for (int k=0; k < 2; k++) {
      MyTriangle aTriangle1=null;
      if (k == 0)       aTriangle1=anEdge.getLeft();
 else       aTriangle1=anEdge.getRight();
      triangleList[k]=aTriangle1;
      new_triangleList[k]=null;
      alterPointList[k]=null;
      newEdges[k]=null;
      alterEdgeList_start[k]=null;
      alterEdgeList_end[k]=null;
      alterTriangleList_end[k]=null;
      if (aTriangle1 != null) {
        new_triangleList[k]=new MyTriangle(aTriangle1);
        alterPointList[k]=aTriangle1.getAlterPoint(start,end);
        newEdges[k]=new MyEdge(alterPointList[k],aPoint);
        alterEdgeList_start[k]=aTriangle1.getEdgeFromPoints(start,alterPointList[k]);
        alterEdgeList_end[k]=aTriangle1.getEdgeFromPoints(end,alterPointList[k]);
        if (alterEdgeList_end[k] == null)         System.out.println(""String_Node_Str"");
 else         if (alterEdgeList_end[k].getLeft() == aTriangle1)         alterTriangleList_end[k]=alterEdgeList_end[k].getRight();
 else         alterTriangleList_end[k]=alterEdgeList_end[k].getLeft();
      }
    }
    remainEdge=new MyEdge(anEdge);
    remainEdge.setStartPoint(aPoint);
    anEdge.setEndPoint(aPoint);
    for (int k=0; k < 2; k++) {
      if (new_triangleList[k] != null) {
        int i=0;
        boolean found=false;
        while ((i < 3) && (!found)) {
          if (new_triangleList[k].edges[i] == anEdge)           found=true;
 else           i++;
        }
        if (found)         new_triangleList[k].edges[i]=remainEdge;
        i=0;
        found=false;
        while ((i < 3) && (!found)) {
          if (new_triangleList[k].edges[i] == alterEdgeList_start[k])           found=true;
 else           i++;
        }
        if (found)         new_triangleList[k].edges[i]=newEdges[k];
      }
      if (triangleList[k] != null) {
        boolean found=false;
        int i=0;
        found=false;
        while ((i < 3) && (!found)) {
          if (triangleList[k].edges[i] == alterEdgeList_end[k])           found=true;
 else           i++;
        }
        if (found)         triangleList[k].edges[i]=newEdges[k];
      }
    }
    for (int k=0; k < 2; k++) {
      if (alterEdgeList_end[k] != null) {
        if (alterEdgeList_end[k].getLeft() == triangleList[k])         alterEdgeList_end[k].setLeft(new_triangleList[k]);
 else         alterEdgeList_end[k].setRight(new_triangleList[k]);
      }
    }
    for (int k=0; k < 2; k++) {
      if (remainEdge != null) {
        if (remainEdge.getLeft() == triangleList[k])         remainEdge.setLeft(new_triangleList[k]);
        if (remainEdge.getRight() == triangleList[k])         remainEdge.setRight(new_triangleList[k]);
      }
    }
    for (int k=0; k < 2; k++) {
      if (newEdges[k] != null) {
        if (newEdges[k].isLeft(end)) {
          newEdges[k].setLeft(new_triangleList[k]);
          newEdges[k].setRight(triangleList[k]);
        }
 else {
          newEdges[k].setLeft(triangleList[k]);
          newEdges[k].setRight(new_triangleList[k]);
        }
      }
    }
    for (int k=0; k < 2; k++) {
      if (triangleList[k] != null)       triangleList[k].recomputeCenter();
      if (new_triangleList[k] != null)       new_triangleList[k].recomputeCenter();
    }
    points.add(aPoint);
    newEdges[2]=remainEdge;
    for (int k=0; k < 3; k++) {
      if (newEdges[k] != null) {
        edges.add(newEdges[k]);
        if (!isMeshComputed())         if (!badEdgesQueueList.contains(newEdges[k]))         badEdgesQueueList.add(newEdges[k]);
      }
    }
    for (int k=0; k < 2; k++) {
      if (new_triangleList[k] != null)       triangles.add(new_triangleList[k]);
    }
    for (int k=0; k < 2; k++) {
      if (triangleList[k] != null)       impactedTriangles.add(triangleList[k]);
      if (new_triangleList[k] != null)       impactedTriangles.add(new_triangleList[k]);
    }
  }
  this.trianglesQuadTrees.cancelUsability();
  return impactedTriangles;
}"
86590,"/** 
 * Create an empty Mesh. Allocate data structures
 */
public MyMesh(){
  this.points=new ArrayList<MyPoint>();
  this.pointsQuadTree=new MyQuadTreeMapper<MyPoint>();
  this.edges=new ArrayList<MyEdge>();
  this.triangles=new ArrayList<MyTriangle>();
  this.constraintsEdges=new ArrayList<MyEdge>();
  this.polygons=new LinkedList<MyPolygon>();
  this.maxx=1200;
  this.maxy=700;
  this.theBox=new MyBox();
  this.isBoundingBoxInit=false;
  this.meshComputed=false;
  this.point_GID=0;
  this.edge_GID=0;
  this.triangle_GID=0;
  this.precision=0.0;
  this.tolarence=0.000001;
  this.maxArea=600;
  this.minArea=1;
  this.minAngle=5;
  this.refinement=0;
  this.verbose=false;
  this.duration=0;
  this.affiche=null;
  this.displayCircles=false;
}","/** 
 * Create an empty Mesh. Allocate data structures
 */
public MyMesh(){
  this.points=new ArrayList<MyPoint>();
  this.pointsQuadTree=new MyQuadTreeMapper<MyPoint>();
  this.edges=new ArrayList<MyEdge>();
  this.edgesQuadTree=new MyQuadTreeMapper<MyEdge>();
  this.triangles=new ArrayList<MyTriangle>();
  this.trianglesQuadTrees=new MyQuadTreeMapper<MyTriangle>();
  this.constraintsEdges=new ArrayList<MyEdge>();
  this.polygons=new LinkedList<MyPolygon>();
  this.maxx=1200;
  this.maxy=700;
  this.theBox=new MyBox();
  this.isBoundingBoxInit=false;
  this.meshComputed=false;
  this.point_GID=0;
  this.edge_GID=0;
  this.triangle_GID=0;
  this.precision=0.0;
  this.tolarence=0.000001;
  this.maxArea=600;
  this.minArea=1;
  this.minAngle=5;
  this.refinement=0;
  this.verbose=false;
  this.duration=0;
  this.affiche=null;
  this.displayCircles=false;
}"
86591,"/** 
 * Generate the Delaunay's triangularization with a flip-flop algorithm. Mesh must have been set. Triangularization can only be done once. Otherwise call reprocessDelaunay
 * @throws DelaunayError
 */
public void processDelaunay() throws DelaunayError {
  if (isMeshComputed())   throw new DelaunayError(DelaunayError.DelaunayError_Generated);
 else   if (getNbPoints() < 3)   throw new DelaunayError(DelaunayError.DelaunayError_notEnoughPointsFound);
 else {
    boolean startedLocaly=false;
    if (startComputation == 0) {
      setStart();
      startedLocaly=true;
    }
    badEdgesQueueList=new LinkedList<MyEdge>();
    boundaryEdges=new LinkedList<MyEdge>();
    if (polygons.size() > 0) {
      if (verbose)       System.out.println(""String_Node_Str"" + polygons.size() + ""String_Node_Str""+ (polygons.size() > 1 ? ""String_Node_Str"" : ""String_Node_Str""));
      for (      MyPolygon aPolygon : polygons) {
        points.addAll(aPolygon.getPoints());
      }
    }
    if (verbose)     System.out.println(""String_Node_Str"");
    sortAndSimplify();
    if (verbose)     System.out.println(""String_Node_Str"");
    MyTriangle aTriangle;
    MyPoint p1, p2, p3;
    MyEdge e1, e2, e3;
    p1=p2=p3=null;
    ListIterator<MyPoint> iterPoint=points.listIterator();
    p1=iterPoint.next();
    while (p1.isMarked())     p1=iterPoint.next();
    p2=iterPoint.next();
    while (p2.isMarked())     p2=iterPoint.next();
    p3=iterPoint.next();
    while (p3.isMarked())     p3=iterPoint.next();
    e1=new MyEdge(p1,p2);
    if (e1.isLeft(p3)) {
      e2=new MyEdge(p2,p3);
      e3=new MyEdge(p3,p1);
    }
 else {
      e1.setStartPoint(p2);
      e1.setEndPoint(p1);
      e2=new MyEdge(p1,p3);
      e3=new MyEdge(p3,p2);
    }
    edges.add(e1);
    edges.add(e2);
    edges.add(e3);
    aTriangle=new MyTriangle(e1,e2,e3);
    triangles.add(aTriangle);
    boundaryEdges.add(e1);
    boundaryEdges.add(e2);
    boundaryEdges.add(e3);
    int count=0;
    while (iterPoint.hasNext()) {
      count++;
      MyPoint aPoint=iterPoint.next();
      if (!aPoint.isMarked()) {
        if (myInsertPoint(aPoint) == null)         System.out.println(""String_Node_Str"");
      }
    }
    meshComputed=true;
    pointsQuadTree=null;
    edgesQuadTree=null;
    if (verbose)     System.out.println(""String_Node_Str"");
    processEdges(constraintsEdges);
    if (polygons.size() > 0) {
      if (verbose)       System.out.println(""String_Node_Str"" + polygons.size() + ""String_Node_Str""+ (polygons.size() > 1 ? ""String_Node_Str"" : ""String_Node_Str""));
      processPolygons();
    }
    if (verbose)     System.out.println(""String_Node_Str"");
    setAllGids();
    if (verbose) {
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"" + points.size());
      System.out.println(""String_Node_Str"" + edges.size());
      System.out.println(""String_Node_Str"" + triangles.size());
    }
    if (startedLocaly)     setEnd();
  }
}","/** 
 * Generate the Delaunay's triangularization with a flip-flop algorithm. Mesh must have been set. Triangularization can only be done once. Otherwise call reprocessDelaunay
 * @throws DelaunayError
 */
public void processDelaunay() throws DelaunayError {
  if (isMeshComputed())   throw new DelaunayError(DelaunayError.DelaunayError_Generated);
 else   if (getNbPoints() < 3)   throw new DelaunayError(DelaunayError.DelaunayError_notEnoughPointsFound);
 else {
    boolean startedLocaly=false;
    if (startComputation == 0) {
      setStart();
      startedLocaly=true;
    }
    badEdgesQueueList=new LinkedList<MyEdge>();
    boundaryEdges=new LinkedList<MyEdge>();
    LinkedList<MyPoint> badPointList=new LinkedList<MyPoint>();
    if (polygons.size() > 0) {
      if (verbose)       System.out.println(""String_Node_Str"" + polygons.size() + ""String_Node_Str""+ (polygons.size() > 1 ? ""String_Node_Str"" : ""String_Node_Str""));
      for (      MyPolygon aPolygon : polygons) {
        points.addAll(aPolygon.getPoints());
      }
    }
    if (verbose)     System.out.println(""String_Node_Str"");
    sortAndSimplify();
    if (verbose)     System.out.println(""String_Node_Str"");
    MyTriangle aTriangle;
    MyPoint p1, p2, p3;
    MyEdge e1, e2, e3;
    p1=p2=p3=null;
    ListIterator<MyPoint> iterPoint=points.listIterator();
    p1=iterPoint.next();
    while (p1.isMarked())     p1=iterPoint.next();
    p2=iterPoint.next();
    while (p2.isMarked())     p2=iterPoint.next();
    e1=new MyEdge(p1,p2);
    p3=iterPoint.next();
    while (p3.isMarked())     p3=iterPoint.next();
    while ((e1.isColinear2D(p3)) && (iterPoint.hasNext())) {
      badPointList.add(p3);
      p3=iterPoint.next();
      while (p3.isMarked())       p3=iterPoint.next();
    }
    if (e1.isLeft(p3)) {
      e2=new MyEdge(p2,p3);
      e3=new MyEdge(p3,p1);
    }
 else {
      e1.setStartPoint(p2);
      e1.setEndPoint(p1);
      e2=new MyEdge(p1,p3);
      e3=new MyEdge(p3,p2);
    }
    edges.add(e1);
    edges.add(e2);
    edges.add(e3);
    aTriangle=new MyTriangle(e1,e2,e3);
    triangles.add(aTriangle);
    boundaryEdges.add(e1);
    boundaryEdges.add(e2);
    boundaryEdges.add(e3);
    boolean ended=false;
    MyPoint aPoint=null;
    MyPoint LastTestedPoint=null;
    int count=0;
    while (!ended) {
      boolean hasGotPoint=false;
      if (!badPointList.isEmpty()) {
        aPoint=badPointList.getFirst();
        if (LastTestedPoint != aPoint) {
          badPointList.removeFirst();
          hasGotPoint=true;
        }
      }
      if (!hasGotPoint)       if (iterPoint.hasNext()) {
        count++;
        aPoint=iterPoint.next();
      }
 else {
        ended=true;
        aPoint=null;
      }
      LastTestedPoint=aPoint;
      if (aPoint != null)       if (!aPoint.isMarked()) {
        if (myInsertPoint(aPoint) == null)         badPointList.addFirst(aPoint);
      }
    }
    meshComputed=true;
    pointsQuadTree=null;
    edgesQuadTree=null;
    if (verbose)     System.out.println(""String_Node_Str"");
    processEdges(constraintsEdges);
    if (polygons.size() > 0) {
      if (verbose)       System.out.println(""String_Node_Str"" + polygons.size() + ""String_Node_Str""+ (polygons.size() > 1 ? ""String_Node_Str"" : ""String_Node_Str""));
      processPolygons();
    }
    if (verbose)     System.out.println(""String_Node_Str"");
    setAllGids();
    if (verbose) {
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"");
      System.out.println(""String_Node_Str"" + points.size());
      System.out.println(""String_Node_Str"" + edges.size());
      System.out.println(""String_Node_Str"" + triangles.size());
    }
    if (startedLocaly)     setEnd();
  }
}"
86592,"/** 
 * Draw Mesh in the JPanel : triangles and edges. If duration is positive, also display it Must be used only when using package drawing
 * @param g
 */
protected void displayObject(Graphics g){
  getBoundingBox();
  double scaleX, scaleY;
  double minX, minY;
  scaleX=1200 / (theBox.maxx - theBox.minx);
  scaleY=600 / (theBox.maxy - theBox.miny);
  if (scaleX > scaleY)   scaleX=scaleY;
 else   scaleY=scaleX;
  minX=theBox.minx;
  minY=theBox.miny;
  int decalageX=10;
  int decalageY=630;
  scaleY=-scaleY;
  int legende=650;
  g.setColor(Color.white);
  g.fillRect(0,0,decalageX + 5 + 1200,decalageY + 10);
  g.fillRect(0,legende,decalageX + 5 + 1200,legende + 100);
  g.setColor(Color.black);
  g.drawString(triangles.size() + ""String_Node_Str"" + edges.size()+ ""String_Node_Str""+ points.size()+ ""String_Node_Str"",decalageX,legende + 10);
  if (duration > 0) {
    g.drawString(""String_Node_Str"" + duration + ""String_Node_Str"",decalageX,legende + 25);
  }
  if (!triangles.isEmpty()) {
    for (    MyTriangle aTriangle : triangles) {
      aTriangle.displayObject(g,decalageX,decalageY,minX,minY,scaleX,scaleY);
    }
    if (displayCircles)     for (    MyTriangle aTriangle : triangles) {
      aTriangle.displayObjectCircles(g,decalageX,decalageY);
    }
  }
  if (!constraintsEdges.isEmpty())   for (  MyEdge aVertex : constraintsEdges) {
    aVertex.displayObject(g,decalageX,decalageY,minX,minY,scaleX,scaleY);
  }
  if (!edges.isEmpty())   for (  MyEdge aVertex : edges) {
    if (aVertex.isLocked()) {
      aVertex.displayObject(g,decalageX,decalageY,minX,minY,scaleX,scaleY);
    }
  }
  int psize=points.size();
  if (psize > 0) {
    for (    MyPoint aPoint : points) {
      aPoint.displayObject(g,decalageX,decalageY,minX,minY,scaleX,scaleY);
    }
  }
}","/** 
 * Draw Mesh in the JPanel : triangles and edges. If duration is positive, also display it Must be used only when using package drawing
 * @param g
 */
protected void displayObject(Graphics g){
  getBoundingBox();
  double scaleX, scaleY;
  double minX, minY;
  int XSize=1200;
  int YSize=600;
  int decalageX=10;
  int decalageY=YSize + 30;
  int legende=YSize + 60;
  int bordure=10;
  scaleX=XSize / (theBox.maxx - theBox.minx);
  scaleY=YSize / (theBox.maxy - theBox.miny);
  if (scaleX > scaleY)   scaleX=scaleY;
 else   scaleY=scaleX;
  minX=theBox.minx;
  minY=theBox.miny;
  scaleY=-scaleY;
  g.setColor(Color.white);
  g.fillRect(decalageX - bordure,decalageY - YSize - bordure,2 * bordure + XSize,2 * bordure + YSize);
  g.fillRect(decalageX - bordure,legende - bordure,2 * bordure + XSize,2 * bordure + 50);
  g.setColor(Color.black);
  g.drawString(triangles.size() + ""String_Node_Str"" + edges.size()+ ""String_Node_Str""+ points.size()+ ""String_Node_Str"",decalageX,legende + 10);
  if (duration > 0) {
    g.drawString(""String_Node_Str"" + duration + ""String_Node_Str"",decalageX,legende + 25);
  }
  if (!triangles.isEmpty()) {
    for (    MyTriangle aTriangle : triangles) {
      aTriangle.displayObject(g,decalageX,decalageY,minX,minY,scaleX,scaleY);
    }
    if (displayCircles)     for (    MyTriangle aTriangle : triangles) {
      aTriangle.displayObjectCircles(g,decalageX,decalageY);
    }
  }
  if (!constraintsEdges.isEmpty())   for (  MyEdge aVertex : constraintsEdges) {
    aVertex.displayObject(g,decalageX,decalageY,minX,minY,scaleX,scaleY);
  }
  if (!edges.isEmpty())   for (  MyEdge aVertex : edges) {
    if (aVertex.isLocked()) {
      aVertex.displayObject(g,decalageX,decalageY,minX,minY,scaleX,scaleY);
    }
  }
  int psize=points.size();
  if ((psize > 0) && (psize < 100)) {
    for (    MyPoint aPoint : points) {
      aPoint.displayObject(g,decalageX,decalageY,minX,minY,scaleX,scaleY);
    }
  }
}"
86593,"/** 
 * Add a new edge to the current triangularization. If Delaunay triangularization has not been done, it generates an error.
 * @param anEdge
 * @throws DelaunayError
 */
public void addEdge(MyEdge anEdge) throws DelaunayError {
  if (!isMeshComputed())   throw new DelaunayError(DelaunayError.DelaunayError_notGenerated);
 else   if (anEdge.getStartPoint().squareDistance(anEdge.getEndPoint()) < tolarence)   throw new DelaunayError(DelaunayError.DelaunayError_proximity);
 else   if (!points.contains(anEdge.getStartPoint()))   throw new DelaunayError(DelaunayError.DelaunayError_pointNotFound);
 else   if (!points.contains(anEdge.getEndPoint()))   throw new DelaunayError(DelaunayError.DelaunayError_pointNotFound);
 else {
    badEdgesQueueList=new LinkedList<MyEdge>();
    ArrayList<MyEdge> theList=new ArrayList<MyEdge>();
    theList.add(anEdge);
    processEdges(theList);
  }
}","/** 
 * Add a new edge to the current triangularization. If Delaunay triangularization has not been done, it generates an error.
 * @param anEdge
 * @throws DelaunayError
 */
public void addEdge(MyEdge anEdge) throws DelaunayError {
  if (!isMeshComputed())   throw new DelaunayError(DelaunayError.DelaunayError_notGenerated);
 else   if (anEdge.getStartPoint().squareDistance(anEdge.getEndPoint()) < tolarence)   throw new DelaunayError(DelaunayError.DelaunayError_proximity);
 else   if (!points.contains(anEdge.getStartPoint()))   throw new DelaunayError(DelaunayError.DelaunayError_pointNotFound);
 else   if (!points.contains(anEdge.getEndPoint()))   throw new DelaunayError(DelaunayError.DelaunayError_pointNotFound);
 else {
    badEdgesQueueList=new LinkedList<MyEdge>();
    ArrayList<MyEdge> theList=new ArrayList<MyEdge>();
    theList.add(anEdge);
    processEdges(theList);
    this.trianglesQuadTrees.cancelUsability();
  }
}"
86594,"public Point[] getTouches(){
synchronized (this) {
    if (mInput == null) {
      return mPoints;
    }
    int index=0;
    for (int k=0; k < mPointIndicesCount; k++) {
      int id=mPointIndices[k];
      for (int i=0; i < mInput.getPointerCount() && index < mPoints.length; i++) {
        if (mInput.getPointerId(i) == id) {
          mPoints[index].x=(int)mInput.getX(i);
          mPoints[index].y=(int)mInput.getY(i);
          index++;
          break;
        }
      }
    }
    return mPoints;
  }
}","public Point[] getTouches(){
  float xRatio=(float)PunkActivity.static_width / FP.displayWidth;
  float yRatio=(float)PunkActivity.static_height / FP.displayHeight;
synchronized (this) {
    if (mInput == null) {
      return mPoints;
    }
    int index=0;
    for (int k=0; k < mPointIndicesCount; k++) {
      int id=mPointIndices[k];
      for (int i=0; i < mInput.getPointerCount() && index < mPoints.length; i++) {
        if (mInput.getPointerId(i) == id) {
          mPoints[index].x=(int)(mInput.getX(i) * xRatio);
          mPoints[index].y=(int)(mInput.getY(i) * yRatio);
          index++;
          break;
        }
      }
    }
    return mPoints;
  }
}"
86595,"public void onSurfaceCreated(GL10 gl,EGLConfig config){
  gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT,GL10.GL_FASTEST);
  gl.glClearColor(0.1f,0.1f,0.1f,1.0f);
  gl.glShadeModel(GL10.GL_FLAT);
  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
  gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
  gl.glEnable(GL10.GL_TEXTURE_2D);
  gl.glEnable(GL10.GL_SCISSOR_TEST);
  gl.glDisable(GL10.GL_CULL_FACE);
  gl.glDisable(GL10.GL_DITHER);
  gl.glDisable(GL10.GL_LIGHTING);
  gl.glDisable(GL10.GL_DEPTH_TEST);
  gl.glDisable(GL10.GL_FOG);
  gl.glTexEnvx(GL10.GL_TEXTURE_ENV,GL10.GL_TEXTURE_ENV_MODE,GL10.GL_MODULATE);
  gl.glBlendFunc(GL10.GL_SRC_ALPHA,GL10.GL_ONE_MINUS_SRC_ALPHA);
  gl.glEnable(GL10.GL_BLEND);
  gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
  String extensions=gl.glGetString(GL10.GL_EXTENSIONS);
  String version=gl.glGetString(GL10.GL_VERSION);
  String renderer=gl.glGetString(GL10.GL_RENDERER);
  boolean isSoftwareRenderer=renderer.contains(""String_Node_Str"");
  boolean isOpenGL10=version.contains(""String_Node_Str"");
  boolean supportsDrawTexture=extensions.contains(""String_Node_Str"");
  boolean supportsVBOs=!isSoftwareRenderer && (!isOpenGL10 || extensions.contains(""String_Node_Str""));
  FP.supportsDrawTexture=supportsDrawTexture;
  FP.supportsVBOs=supportsVBOs;
  Log.d(TAG,""String_Node_Str"" + version + ""String_Node_Str""+ renderer+ ""String_Node_Str""+ (supportsDrawTexture ? ""String_Node_Str"" : ""String_Node_Str"")+ (supportsVBOs ? ""String_Node_Str"" : ""String_Node_Str""));
  if (mEngine == null) {
    try {
      mEngine=engine_class.getConstructor(Integer.TYPE,Integer.TYPE,Float.TYPE,Boolean.TYPE).newInstance(static_width,static_height,FP.assignedFrameRate,FP.fixed);
    }
 catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    SecurityException e) {
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
  }
 else {
    mFPS.reload();
    mUpdate.reload();
    mRender.reload();
  }
}","public void onSurfaceCreated(GL10 gl,EGLConfig config){
  gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT,GL10.GL_FASTEST);
  gl.glClearColor(0.1f,0.1f,0.1f,1.0f);
  gl.glShadeModel(GL10.GL_FLAT);
  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
  gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
  gl.glEnable(GL10.GL_TEXTURE_2D);
  gl.glEnable(GL10.GL_SCISSOR_TEST);
  gl.glDisable(GL10.GL_CULL_FACE);
  gl.glDisable(GL10.GL_DITHER);
  gl.glDisable(GL10.GL_LIGHTING);
  gl.glDisable(GL10.GL_DEPTH_TEST);
  gl.glDisable(GL10.GL_FOG);
  gl.glTexEnvx(GL10.GL_TEXTURE_ENV,GL10.GL_TEXTURE_ENV_MODE,GL10.GL_MODULATE);
  gl.glBlendFunc(GL10.GL_SRC_ALPHA,GL10.GL_ONE_MINUS_SRC_ALPHA);
  gl.glEnable(GL10.GL_BLEND);
  gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
  String extensions=gl.glGetString(GL10.GL_EXTENSIONS);
  String version=gl.glGetString(GL10.GL_VERSION);
  String renderer=gl.glGetString(GL10.GL_RENDERER);
  boolean isSoftwareRenderer=renderer.contains(""String_Node_Str"");
  boolean isOpenGL10=version.contains(""String_Node_Str"");
  boolean supportsDrawTexture=extensions.contains(""String_Node_Str"");
  boolean supportsVBOs=!isSoftwareRenderer && (!isOpenGL10 || extensions.contains(""String_Node_Str""));
  FP.supportsDrawTexture=supportsDrawTexture;
  FP.supportsVBOs=supportsVBOs;
  Log.d(TAG,""String_Node_Str"" + version + ""String_Node_Str""+ renderer+ ""String_Node_Str""+ (supportsDrawTexture ? ""String_Node_Str"" : ""String_Node_Str"")+ (supportsVBOs ? ""String_Node_Str"" : ""String_Node_Str""));
  if (mEngine == null) {
    try {
      mEngine=engine_class.getConstructor(Integer.TYPE,Integer.TYPE,Float.TYPE,Boolean.TYPE).newInstance(static_width,static_height,FP.assignedFrameRate,FP.fixed);
    }
 catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    SecurityException e) {
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
  }
}"
86596,"public APRenderer(){
  if (FP.debug) {
    Paint p=new Paint();
    int fpsWidth=(int)p.measureText(""String_Node_Str"");
    mFPS=new Text(""String_Node_Str"",0);
    mUpdate=new Text(""String_Node_Str"",0);
    mUpdate.x=fpsWidth + FP.dip(5);
    mRender=new Text(""String_Node_Str"",0);
    mRender.x=mUpdate.x;
    mRender.y=-p.ascent() + p.descent() + FP.dip(2);
    mDebug=new GraphicList(mFPS,mUpdate,mRender);
    mDebugUpdateCount=0;
  }
}","public APRenderer(){
  if (FP.debug) {
    Paint p=new Paint();
    int fpsWidth=(int)p.measureText(""String_Node_Str"");
    mFPS=new AtlasText(""String_Node_Str"",0);
    mUpdate=new AtlasText(""String_Node_Str"",0);
    mUpdate.x=fpsWidth + FP.dip(5);
    mRender=new AtlasText(""String_Node_Str"",0);
    mRender.x=mUpdate.x;
    mRender.y=-p.ascent() + p.descent() + FP.dip(2);
    mDebug=new GraphicList(mFPS,mUpdate,mRender);
    mDebugUpdateCount=0;
  }
}"
86597,"public void onSurfaceChanged(GL10 gl,int width,int height){
  Log.d(TAG,""String_Node_Str"" + width + ""String_Node_Str""+ height);
  mScreenRect.set(0,0,width,height);
  Engine.fire(Event.ADDED_TO_STAGE);
  float scaleX=(float)width / static_width;
  float scaleY=(float)height / static_height;
  final int viewportWidth=(int)(mScreenRect.width());
  final int viewportHeight=(int)(mScreenRect.height());
  gl.glViewport(0,0,viewportWidth,viewportHeight);
  gl.glScissor(0,0,viewportWidth,viewportHeight);
  mScaleX=scaleX;
  mScaleY=scaleY;
  gl.glMatrixMode(GL10.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glMatrixMode(GL10.GL_PROJECTION);
  gl.glLoadIdentity();
  gl.glOrthof(0,viewportWidth,viewportHeight,0,-1,1);
  gl.glScalef(mScaleX,mScaleY,0.0f);
  mStarted=true;
  OpenGLSystem.setGL(gl);
  OpenGLSystem.processQueue();
  OpenGLSystem.setGL(null);
}","public void onSurfaceChanged(GL10 gl,int width,int height){
  Log.d(TAG,""String_Node_Str"" + width + ""String_Node_Str""+ height);
  mScreenRect.set(0,0,width,height);
  FP.displayWidth=width;
  FP.displayHeight=height;
  Engine.fire(Event.ADDED_TO_STAGE);
  float scaleX=(float)width / static_width;
  float scaleY=(float)height / static_height;
  final int viewportWidth=(int)(mScreenRect.width());
  final int viewportHeight=(int)(mScreenRect.height());
  gl.glViewport(0,0,viewportWidth,viewportHeight);
  gl.glScissor(0,0,viewportWidth,viewportHeight);
  mScaleX=scaleX;
  mScaleY=scaleY;
  gl.glMatrixMode(GL10.GL_MODELVIEW);
  gl.glLoadIdentity();
  gl.glMatrixMode(GL10.GL_PROJECTION);
  gl.glLoadIdentity();
  gl.glOrthof(0,viewportWidth,viewportHeight,0,-1,1);
  gl.glScalef(mScaleX,mScaleY,0.0f);
  mStarted=true;
  OpenGLSystem.setGL(gl);
  OpenGLSystem.processQueue();
  OpenGLSystem.setGL(null);
}"
86598,"public ShortBuffer setBuffers(String s,FloatBuffer vertex,FloatBuffer texture){
  ShortBuffer indexBuffer=AtlasGraphic.getDirectShortBuffer(s.length() * 6);
  indexBuffer.position(0);
  vertex.position(0);
  texture.position(0);
  int x=0;
  int y=0;
  int textureWidth=mAtlas.getWidth();
  int textureHeight=mAtlas.getHeight();
  for (int i=0; i < s.length(); i++) {
    String character=s.substring(i,i + 1);
    if (""String_Node_Str"".equals(character)) {
      y+=-mPaint.ascent() + mPaint.descent();
      continue;
    }
 else     if (""String_Node_Str"".equals(character)) {
      x+=mPaint.measureText(""String_Node_Str"");
    }
    SubTexture subTexture=mAtlas.getSubTexture(character);
    Rect r=subTexture.getBounds();
    vertex.put(x).put(y);
    vertex.put(x + r.width()).put(y);
    vertex.put(x).put(y + r.height());
    vertex.put(x + r.width()).put(y + r.height());
    texture.put((float)r.left / textureWidth).put((float)r.top / textureHeight);
    texture.put((float)(r.left + r.width()) / textureWidth).put((float)r.top / textureHeight);
    texture.put((float)r.left / textureWidth).put((float)(r.top + r.height()) / textureHeight);
    texture.put((float)(r.left + r.width()) / textureWidth).put((float)(r.top + r.height()) / textureHeight);
    indexBuffer.put((short)(i * 4));
    indexBuffer.put((short)((i * 4) + 1));
    indexBuffer.put((short)((i * 4) + 2));
    indexBuffer.put((short)((i * 4) + 1));
    indexBuffer.put((short)((i * 4) + 3));
    indexBuffer.put((short)((i * 4) + 2));
    x+=r.width();
  }
  indexBuffer.position(0);
  vertex.position(0);
  texture.position(0);
  return indexBuffer;
}","public ShortBuffer setBuffers(String s,FloatBuffer vertex,FloatBuffer texture){
  ShortBuffer indexBuffer=AtlasGraphic.getDirectShortBuffer(s.length() * 6);
  indexBuffer.position(0);
  vertex.position(0);
  texture.position(0);
  int x=0;
  int y=0;
  int textureWidth=mAtlas.getWidth();
  int textureHeight=mAtlas.getHeight();
  for (int i=0; i < s.length(); i++) {
    String character=s.substring(i,i + 1);
    if (""String_Node_Str"".equals(character)) {
      character=""String_Node_Str"";
      y+=-mPaint.ascent() + mPaint.descent();
      x=(int)-mPaint.measureText(character);
    }
 else     if (""String_Node_Str"".equals(character)) {
      character=""String_Node_Str"";
      x+=mPaint.measureText(""String_Node_Str"") - mPaint.measureText(character);
    }
    SubTexture subTexture=mAtlas.getSubTexture(character);
    Rect r=subTexture.getBounds();
    vertex.put(x).put(y);
    vertex.put(x + r.width()).put(y);
    vertex.put(x).put(y + r.height());
    vertex.put(x + r.width()).put(y + r.height());
    texture.put((float)r.left / textureWidth).put((float)r.top / textureHeight);
    texture.put((float)(r.left + r.width()) / textureWidth).put((float)r.top / textureHeight);
    texture.put((float)r.left / textureWidth).put((float)(r.top + r.height()) / textureHeight);
    texture.put((float)(r.left + r.width()) / textureWidth).put((float)(r.top + r.height()) / textureHeight);
    indexBuffer.put((short)(i * 4));
    indexBuffer.put((short)((i * 4) + 1));
    indexBuffer.put((short)((i * 4) + 2));
    indexBuffer.put((short)((i * 4) + 1));
    indexBuffer.put((short)((i * 4) + 3));
    indexBuffer.put((short)((i * 4) + 2));
    x+=r.width();
  }
  indexBuffer.position(0);
  vertex.position(0);
  texture.position(0);
  return indexBuffer;
}"
86599,"public void onDrawFrame(GL10 gl){
  OpenGLSystem.setGL(gl);
  mRenderTime=SystemClock.uptimeMillis();
synchronized (mUpdateLock) {
    gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
    OpenGLSystem.processQueue(14);
    if (mEngine != null) {
      mEngine.render();
    }
    if (FP.debug) {
      if (mDebugUpdateCount % 30 == 0) {
        mFPS.setText(String.format(""String_Node_Str"",Math.min(FP.frameRate,60)));
        mUpdate.setText(String.format(""String_Node_Str"",FP.updateTime));
        mRender.setText(String.format(""String_Node_Str"",FP.renderTime));
        mDebugUpdateCount=0;
      }
      mDebugUpdateCount++;
      FP.point.set(0,0);
      mDebug.render(gl,FP.point,FP.point);
    }
  }
  FP.renderTime=SystemClock.uptimeMillis() - mRenderTime;
  OpenGLSystem.setGL(null);
}","public void onDrawFrame(GL10 gl){
  OpenGLSystem.setGL(gl);
  mRenderTime=SystemClock.uptimeMillis();
synchronized (mUpdateLock) {
    gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
    OpenGLSystem.processQueue(14);
    if (mEngine != null) {
      mEngine.render();
    }
    if (FP.debug) {
      if (mDebugUpdateCount % 30 == 0) {
        mFPS.setText(String.format(""String_Node_Str"",Math.min(FP.frameRate,60)));
        mUpdate.setText(String.format(""String_Node_Str"",FP.updateTime));
        mRender.setText(String.format(""String_Node_Str"",FP.renderTime));
        mDebugUpdateCount=0;
      }
      mDebugUpdateCount++;
      FP.point.set(0,0);
      OpenGLSystem.processQueue(4);
      mDebug.render(gl,FP.point,FP.point);
    }
  }
  FP.renderTime=SystemClock.uptimeMillis() - mRenderTime;
  OpenGLSystem.setGL(null);
}"
86600,"protected void setMatrix(GL10 gl){
  float sX=scaleX * scale;
  float sY=scaleY * scale;
  gl.glTranslatef((originX * sX) + mPoint.x,(originY * sY) + mPoint.y,0f);
  if (angle != 0) {
    gl.glRotatef(angle,0,0,1.0f);
  }
  gl.glScalef(sX,sY,1.0f);
  gl.glTranslatef(-originX,-originY,0.0f);
}","protected void setMatrix(GL10 gl){
  float sX=scaleX * scale;
  float sY=scaleY * scale;
  gl.glTranslatef((originX * Math.abs(sX)) + mPoint.x,(originY * Math.abs(sY)) + mPoint.y,0f);
  if (angle != 0) {
    gl.glRotatef(angle,0,0,1.0f);
  }
  gl.glScalef(sX,sY,1.0f);
  gl.glTranslatef(-originX,-originY,0.0f);
}"
86601,"/** 
 * Thread-safe creation the texture.
 * @param gl the GL context.
 */
public void load(){
  mRect.set(0,0,mSource.getWidth(),mSource.getHeight());
  TextureLoadRunnable runnable=new TextureLoadRunnable(mSource);
  GL10 agl=OpenGLSystem.getGL();
  if (agl != null) {
    runnable.run(agl);
  }
 else {
    OpenGLSystem.postRunnable(runnable);
  }
}","/** 
 * Thread-safe creation the texture.
 * @param gl the GL context.
 */
public void load(){
  mRect.set(0,0,mSource.getWidth(),mSource.getHeight());
  TextureLoadRunnable runnable=new TextureLoadRunnable(mSource);
  OpenGLSystem.postRunnable(runnable);
}"
86602,"@Override public void event(){
  mTime=mGameTime=SystemClock.uptimeMillis();
  FP.javaTime=mTime - mJavaTime;
  mUpdateTime=mTime;
  FP.elapsed=(mTime - mLast) / 1000.0f;
  if (FP.elapsed > maxElapsed)   FP.elapsed=maxElapsed;
  FP.elapsed*=FP.rate;
  mLast=mTime;
  if (!paused)   update();
  Input.update();
  mTime=mRenderTime=SystemClock.uptimeMillis();
  FP.updateTime=mTime - mUpdateTime;
  mTime=mJavaTime=SystemClock.uptimeMillis();
  FP.renderTime=mTime - mRenderTime;
  FP.gameTime=mTime - mGameTime;
}","@Override public void event(){
  mTime=mGameTime=SystemClock.uptimeMillis();
  FP.javaTime=mTime - mJavaTime;
  mUpdateTime=mTime;
  FP.elapsed=(mTime - mLast) / 1000.0f;
  if (FP.elapsed > maxElapsed)   FP.elapsed=maxElapsed;
  FP.elapsed*=FP.rate;
  mLast=mTime;
  if (!paused)   update();
  Input.update();
  mTime=mRenderTime=SystemClock.uptimeMillis();
  FP.updateTime=mTime - mUpdateTime;
  mTime=mJavaTime=SystemClock.uptimeMillis();
  FP.gameTime=mTime - mGameTime;
}"
86603,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  FP.resources=getResources();
  FP.context=this;
  setContentView(R.layout.main);
  mSurfaceView=(GLSurfaceView)findViewById(R.id.surface_view);
  mSurfaceView.setOnTouchListener(this);
  mRenderer=new APRenderer();
  mSurfaceView.setRenderer(mRenderer);
  mSurfaceView.setDebugFlags(GLSurfaceView.DEBUG_CHECK_GL_ERROR);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  setVolumeControlStream(AudioManager.STREAM_MUSIC);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  FP.resources=getResources();
  FP.context=this;
  setContentView(R.layout.main);
  mSurfaceView=(GLSurfaceView)findViewById(R.id.surface_view);
  mSurfaceView.setOnTouchListener(this);
  mRenderer=new APRenderer();
  mSurfaceView.setRenderer(mRenderer);
  mSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_WHEN_DIRTY);
  getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);
  setVolumeControlStream(AudioManager.STREAM_MUSIC);
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
}"
86604,"public void onDrawFrame(GL10 gl){
  OpenGLSystem.setGL(gl);
synchronized (mUpdateLock) {
    gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
    OpenGLSystem.processQueue(14);
    if (mEngine != null) {
      mEngine.render();
    }
  }
  OpenGLSystem.setGL(null);
}","public void onDrawFrame(GL10 gl){
  OpenGLSystem.setGL(gl);
  mRenderTime=SystemClock.uptimeMillis();
synchronized (mUpdateLock) {
    gl.glClear(GL10.GL_COLOR_BUFFER_BIT);
    OpenGLSystem.processQueue(14);
    if (mEngine != null) {
      gl.glScalef(mScaleX,mScaleY,0.0f);
      mEngine.render();
    }
    if (FP.debug) {
      if (mDebugUpdateCount % 30 == 0) {
        mFPS.setText(String.format(""String_Node_Str"",Math.min(FP.frameRate,60)));
        mUpdate.setText(String.format(""String_Node_Str"",FP.updateTime));
        mRender.setText(String.format(""String_Node_Str"",FP.renderTime));
        mDebugUpdateCount=0;
      }
      mDebugUpdateCount++;
      FP.point.set(0,0);
      mDebug.render(gl,FP.point,FP.point);
    }
  }
  FP.renderTime=SystemClock.uptimeMillis() - mRenderTime;
  OpenGLSystem.setGL(null);
}"
86605,"@Override protected void onDestroy(){
  super.onDestroy();
  Sfx.SOUND_POOL.release();
  FP.clearCachedBitmaps();
}","@Override protected void onDestroy(){
  super.onDestroy();
  Sfx.SOUND_POOL.release();
  FP.clearCachedBitmaps();
  Engine.clearEventListeners();
}"
86606,"@Override public void run(){
  while (mRunning) {
    step();
  }
}","@Override public void run(){
  while (mRunning) {
    step();
  }
  Log.d(TAG,""String_Node_Str"");
}"
86607,"public void onSurfaceCreated(GL10 gl,EGLConfig config){
  gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT,GL10.GL_FASTEST);
  gl.glClearColor(0.1f,0.1f,0.1f,1.0f);
  gl.glShadeModel(GL10.GL_FLAT);
  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
  gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
  gl.glEnable(GL10.GL_TEXTURE_2D);
  gl.glEnable(GL10.GL_SCISSOR_TEST);
  gl.glDisable(GL10.GL_CULL_FACE);
  gl.glDisable(GL10.GL_DITHER);
  gl.glDisable(GL10.GL_LIGHTING);
  gl.glDisable(GL10.GL_DEPTH_TEST);
  gl.glDisable(GL10.GL_FOG);
  gl.glTexEnvx(GL10.GL_TEXTURE_ENV,GL10.GL_TEXTURE_ENV_MODE,GL10.GL_MODULATE);
  gl.glBlendFunc(GL10.GL_SRC_ALPHA,GL10.GL_ONE_MINUS_SRC_ALPHA);
  gl.glEnable(GL10.GL_BLEND);
  gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
  String extensions=gl.glGetString(GL10.GL_EXTENSIONS);
  String version=gl.glGetString(GL10.GL_VERSION);
  String renderer=gl.glGetString(GL10.GL_RENDERER);
  boolean isSoftwareRenderer=renderer.contains(""String_Node_Str"");
  boolean isOpenGL10=version.contains(""String_Node_Str"");
  boolean supportsDrawTexture=extensions.contains(""String_Node_Str"");
  boolean supportsVBOs=!isSoftwareRenderer && (!isOpenGL10 || extensions.contains(""String_Node_Str""));
  FP.supportsDrawTexture=supportsDrawTexture;
  FP.supportsVBOs=supportsVBOs;
  Log.d(TAG,""String_Node_Str"" + version + ""String_Node_Str""+ renderer+ ""String_Node_Str""+ (supportsDrawTexture ? ""String_Node_Str"" : ""String_Node_Str"")+ (supportsVBOs ? ""String_Node_Str"" : ""String_Node_Str""));
  try {
    mEngine=engine_class.getConstructor(Integer.TYPE,Integer.TYPE,Float.TYPE,Boolean.TYPE).newInstance(static_width,static_height,FP.assignedFrameRate,FP.fixed);
  }
 catch (  IllegalArgumentException e) {
    e.printStackTrace();
  }
catch (  SecurityException e) {
    e.printStackTrace();
  }
catch (  InstantiationException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
catch (  NoSuchMethodException e) {
    e.printStackTrace();
  }
}","public void onSurfaceCreated(GL10 gl,EGLConfig config){
  gl.glHint(GL10.GL_PERSPECTIVE_CORRECTION_HINT,GL10.GL_FASTEST);
  gl.glClearColor(0.1f,0.1f,0.1f,1.0f);
  gl.glShadeModel(GL10.GL_FLAT);
  gl.glEnableClientState(GL10.GL_VERTEX_ARRAY);
  gl.glEnableClientState(GL10.GL_TEXTURE_COORD_ARRAY);
  gl.glEnable(GL10.GL_TEXTURE_2D);
  gl.glEnable(GL10.GL_SCISSOR_TEST);
  gl.glDisable(GL10.GL_CULL_FACE);
  gl.glDisable(GL10.GL_DITHER);
  gl.glDisable(GL10.GL_LIGHTING);
  gl.glDisable(GL10.GL_DEPTH_TEST);
  gl.glDisable(GL10.GL_FOG);
  gl.glTexEnvx(GL10.GL_TEXTURE_ENV,GL10.GL_TEXTURE_ENV_MODE,GL10.GL_MODULATE);
  gl.glBlendFunc(GL10.GL_SRC_ALPHA,GL10.GL_ONE_MINUS_SRC_ALPHA);
  gl.glEnable(GL10.GL_BLEND);
  gl.glClear(GL10.GL_COLOR_BUFFER_BIT | GL10.GL_DEPTH_BUFFER_BIT);
  String extensions=gl.glGetString(GL10.GL_EXTENSIONS);
  String version=gl.glGetString(GL10.GL_VERSION);
  String renderer=gl.glGetString(GL10.GL_RENDERER);
  boolean isSoftwareRenderer=renderer.contains(""String_Node_Str"");
  boolean isOpenGL10=version.contains(""String_Node_Str"");
  boolean supportsDrawTexture=extensions.contains(""String_Node_Str"");
  boolean supportsVBOs=!isSoftwareRenderer && (!isOpenGL10 || extensions.contains(""String_Node_Str""));
  FP.supportsDrawTexture=supportsDrawTexture;
  FP.supportsVBOs=supportsVBOs;
  Log.d(TAG,""String_Node_Str"" + version + ""String_Node_Str""+ renderer+ ""String_Node_Str""+ (supportsDrawTexture ? ""String_Node_Str"" : ""String_Node_Str"")+ (supportsVBOs ? ""String_Node_Str"" : ""String_Node_Str""));
  if (mEngine == null) {
    try {
      mEngine=engine_class.getConstructor(Integer.TYPE,Integer.TYPE,Float.TYPE,Boolean.TYPE).newInstance(static_width,static_height,FP.assignedFrameRate,FP.fixed);
    }
 catch (    IllegalArgumentException e) {
      e.printStackTrace();
    }
catch (    SecurityException e) {
      e.printStackTrace();
    }
catch (    InstantiationException e) {
      e.printStackTrace();
    }
catch (    IllegalAccessException e) {
      e.printStackTrace();
    }
catch (    InvocationTargetException e) {
      e.printStackTrace();
    }
catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
  }
 else {
    mFPS.reload();
    mUpdate.reload();
    mRender.reload();
  }
}"
86608,"@Override protected void onResume(){
  super.onResume();
  mRunning=true;
  if (mGameThread == null || !mGameThread.isAlive()) {
    mGameThread=new EngineRunner();
    mGameThread.start();
  }
  mSurfaceView.onResume();
  for (  Timer t : Engine.TIMERS) {
    t.start();
  }
  int result=mAudioManager.requestAudioFocus(afChangeListener,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN);
  if (result != AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {
    Log.e(TAG,""String_Node_Str"");
  }
}","@Override protected void onResume(){
  super.onResume();
  mRunning=true;
  if (mGameThread == null || !mGameThread.isAlive()) {
    mGameThread=new EngineRunner();
    mGameThread.start();
  }
  mSurfaceView.onResume();
  for (  Timer t : Engine.TIMERS) {
    t.start();
  }
  int result=mAudioManager.requestAudioFocus(afChangeListener,AudioManager.STREAM_MUSIC,AudioManager.AUDIOFOCUS_GAIN);
  if (result != AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {
    Log.e(TAG,""String_Node_Str"");
  }
  if (mEngine != null) {
    int count=Atlas.ATLAS.size();
    for (int i=0; i < count; i++) {
      Atlas.ATLAS.get(i).reload();
    }
    Vector<Entity> v=new Vector<Entity>();
    FP.getWorld().getAll(v);
    count=v.size();
    for (int i=0; i < count; i++) {
      Entity e=v.get(i);
      Graphic g=e.getGraphic();
      if (g instanceof Text) {
        g.reload();
      }
 else       if (g instanceof GraphicList) {
        GraphicList list=(GraphicList)g;
        Vector<Graphic> glist=list.getChildren();
        int glistCount=glist.size();
        for (int k=0; k < glistCount; k++) {
          Graphic listGraphic=glist.get(k);
          if (listGraphic instanceof Text) {
            listGraphic.reload();
          }
        }
      }
    }
  }
}"
86609,"private void step(){
  if (mStarted) {
    long now=SystemClock.uptimeMillis();
    Engine.fire(Event.ENTER_FRAME);
synchronized (mUpdateLock) {
      Engine.checkEvents();
    }
    long delta=SystemClock.uptimeMillis() - now;
    if (delta < 16) {
      try {
        Thread.sleep(16 - delta);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
}","private void step(){
  if (mStarted) {
    long now=SystemClock.uptimeMillis();
    Engine.fire(Event.ENTER_FRAME);
synchronized (mUpdateLock) {
      Engine.checkEvents();
    }
    mSurfaceView.requestRender();
    long delta=SystemClock.uptimeMillis() - now;
    if (delta < 16) {
      try {
        Thread.sleep(16 - delta);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
}"
86610,"/** 
 * @private Renders the particles. 
 */
@Override public void render(GL10 gl,Point point,Point camera){
  super.render(gl,point,camera);
  if (!getAtlas().isLoaded()) {
    return;
  }
  if (mParticle == null)   return;
  mPoint.x=(int)(point.x + x - camera.x * scrollX);
  mPoint.y=(int)(point.y + y - camera.y * scrollY);
  float t, td;
  Particle p=mParticle;
  ParticleType type;
  Rect rect;
  Paint paint=FP.paint;
  while (p != null) {
    t=p.mTime / p.mDuration;
    type=p.mType;
    rect=type.mFrame;
    td=(type.mEase == null) ? t : type.mEase.ease(t);
    mP.x=(int)(mPoint.x + p.mX + p.mMoveX * td);
    mP.y=(int)(mPoint.y + p.mY + p.mMoveY * td);
    gl.glPushMatrix();
{
      setGeometryBuffer(QUAD_FLOAT_BUFFER_1,mP.x,mP.y,rect.width(),rect.height());
      if (type.mFrames != null) {
        setTextureBuffer(QUAD_FLOAT_BUFFER_2,mSubTexture,type.mFrames[(int)(td * type.mFrameCount)],rect.width(),rect.height());
      }
 else {
        setTextureBuffer(QUAD_FLOAT_BUFFER_2,mSubTexture,0,rect.width(),rect.height());
      }
      setBuffers(gl,QUAD_FLOAT_BUFFER_1,QUAD_FLOAT_BUFFER_2);
      td=(type.mColorEase == null) ? t : type.mColorEase.ease(t);
      float red=(type.mRed + type.mRedRange * td) / 255.0f;
      float green=(type.mGreen + type.mGreenRange * td) / 255.0f;
      float blue=(type.mBlue + type.mBlueRange * td) / 255.0f;
      float alpha=(type.mAlpha + type.mAlphaRange * ((type.mAlphaEase == null) ? t : type.mAlphaEase.ease(t))) / 255.0f;
      gl.glColor4f(red,green,blue,alpha);
      gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,0,4);
    }
    gl.glPopMatrix();
    p=p.mNext;
  }
}","/** 
 * @private Renders the particles. 
 */
@Override public void render(GL10 gl,Point point,Point camera){
  super.render(gl,point,camera);
  if (!getAtlas().isLoaded()) {
    return;
  }
  if (mParticle == null)   return;
  mPoint.x=(int)(point.x + x - camera.x * scrollX);
  mPoint.y=(int)(point.y + y - camera.y * scrollY);
  float t, td;
  Particle p=mParticle;
  ParticleType type;
  Rect rect;
  while (p != null) {
    t=p.mTime / p.mDuration;
    type=p.mType;
    rect=type.mFrame;
    td=(type.mEase == null) ? t : type.mEase.ease(t);
    mP.x=(int)(mPoint.x + p.mX + p.mMoveX * td);
    mP.y=(int)(mPoint.y + p.mY + p.mMoveY * td);
    gl.glPushMatrix();
{
      setGeometryBuffer(QUAD_FLOAT_BUFFER_1,mP.x,mP.y,rect.width(),rect.height());
      if (type.mFrames != null) {
        setTextureBuffer(QUAD_FLOAT_BUFFER_2,mSubTexture,type.mFrames[(int)(td * type.mFrameCount)],rect.width(),rect.height());
      }
 else {
        setTextureBuffer(QUAD_FLOAT_BUFFER_2,mSubTexture,0,rect.width(),rect.height());
      }
      setBuffers(gl,QUAD_FLOAT_BUFFER_1,QUAD_FLOAT_BUFFER_2);
      td=(type.mColorEase == null) ? t : type.mColorEase.ease(t);
      float red=(type.mRed + type.mRedRange * td) / 255.0f;
      float green=(type.mGreen + type.mGreenRange * td) / 255.0f;
      float blue=(type.mBlue + type.mBlueRange * td) / 255.0f;
      float alpha=(type.mAlpha + type.mAlphaRange * ((type.mAlphaEase == null) ? t : type.mAlphaEase.ease(t))) / 255.0f;
      gl.glColor4f(red,green,blue,alpha);
      gl.glDrawArrays(GL10.GL_TRIANGLE_STRIP,0,4);
    }
    gl.glPopMatrix();
    p=p.mNext;
  }
}"
86611,"/** 
 * Sets the color range of this particle type.
 * @param start		The starting color.
 * @param finish		The finish color.
 * @param ease		easer function.
 * @return	This ParticleType object.
 */
public ParticleType setColor(int start,int finish,OnEaseCallback ease){
  mRed=Color.red(start);
  mGreen=Color.green(start);
  mBlue=Color.blue(start);
  mRedRange=Color.red(finish) - mRed;
  mGreenRange=Color.green(finish) - mGreen;
  mBlueRange=Color.blue(finish) - mBlue;
  mColorEase=ease;
  createBuffer();
  return this;
}","/** 
 * Sets the color range of this particle type.
 * @param start		The starting color.
 * @param finish		The finish color.
 * @param ease		easer function.
 * @return	This ParticleType object.
 */
public ParticleType setColor(int start,int finish,OnEaseCallback ease){
  mRed=Color.red(start);
  mGreen=Color.green(start);
  mBlue=Color.blue(start);
  mRedRange=Color.red(finish) - mRed;
  mGreenRange=Color.green(finish) - mGreen;
  mBlueRange=Color.blue(finish) - mBlue;
  mColorEase=ease;
  return this;
}"
86612,"/** 
 * Sets the alpha range of this particle type.
 * @param start		The starting alpha.
 * @param finish		The finish alpha.
 * @param ease		easer function.
 * @return	This ParticleType object.
 */
public ParticleType setAlpha(int start,int finish,OnEaseCallback ease){
  start=start < 0 ? 0 : (start > 255 ? 255 : start);
  finish=finish < 0 ? 0 : (finish > 255 ? 255 : finish);
  mAlpha=start;
  mAlphaRange=finish - start;
  mAlphaEase=ease;
  createBuffer();
  return this;
}","/** 
 * Sets the alpha range of this particle type.
 * @param start		The starting alpha.
 * @param finish		The finish alpha.
 * @param ease		easer function.
 * @return	This ParticleType object.
 */
public ParticleType setAlpha(int start,int finish,OnEaseCallback ease){
  start=start < 0 ? 0 : (start > 255 ? 255 : start);
  finish=finish < 0 ? 0 : (finish > 255 ? 255 : finish);
  mAlpha=start;
  mAlphaRange=finish - start;
  mAlphaEase=ease;
  return this;
}"
86613,"/** 
 * Loads a texture atlas in the Sparrow format. Use TexturePacker with no texture cropping and power of two dimensions.
 * @param xmlPath The absolute path to the xml file in the assets directory.
 */
public Atlas(String xmlPath){
  File xml=new File(xmlPath);
  String assetPath=xml.getParent();
  xml=null;
  Document doc=FP.getXML(xmlPath);
  NodeList tal=doc.getElementsByTagName(""String_Node_Str"");
  Node ta=tal.item(0);
  String texturePath=assetPath + File.separator + ta.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
  Log.d(TAG,""String_Node_Str"" + texturePath);
  setTextureBitmap(texturePath);
  NodeList stl=ta.getChildNodes();
  int subTextureCount=stl.getLength();
  for (int i=0; i < subTextureCount; i++) {
    Node st=stl.item(i);
    if (st.getNodeType() == Node.TEXT_NODE) {
      continue;
    }
    NamedNodeMap atts=st.getAttributes();
    String name;
    int x, y, width, height;
    name=atts.getNamedItem(""String_Node_Str"").getNodeValue();
    x=Integer.parseInt(atts.getNamedItem(""String_Node_Str"").getNodeValue());
    y=Integer.parseInt(atts.getNamedItem(""String_Node_Str"").getNodeValue());
    width=Integer.parseInt(atts.getNamedItem(""String_Node_Str"").getNodeValue());
    height=Integer.parseInt(atts.getNamedItem(""String_Node_Str"").getNodeValue());
    mSubTextures.put(name,new SubTexture(this,x,y,width,height));
  }
}","/** 
 * Loads a texture atlas in the Sparrow format. Use TexturePacker with no texture cropping and power of two dimensions.
 * @param xmlPath The absolute path to the xml file in the assets directory.
 */
public Atlas(String xmlPath){
  File xml=new File(xmlPath);
  String assetPath=xml.getParent();
  xml=null;
  Document doc=FP.getXML(xmlPath);
  NodeList tal=doc.getElementsByTagName(""String_Node_Str"");
  Node ta=tal.item(0);
  String texturePath=assetPath + File.separator + ta.getAttributes().getNamedItem(""String_Node_Str"").getNodeValue();
  Log.d(TAG,""String_Node_Str"" + texturePath);
  setTextureBitmap(texturePath);
  NodeList stl=ta.getChildNodes();
  int subTextureCount=stl.getLength();
  for (int i=0; i < subTextureCount; i++) {
    Node st=stl.item(i);
    if (st.getNodeType() == Node.TEXT_NODE) {
      continue;
    }
    NamedNodeMap atts=st.getAttributes();
    String name;
    int x, y, width, height;
    name=atts.getNamedItem(""String_Node_Str"").getNodeValue();
    x=Integer.parseInt(atts.getNamedItem(""String_Node_Str"").getNodeValue());
    y=Integer.parseInt(atts.getNamedItem(""String_Node_Str"").getNodeValue());
    width=Integer.parseInt(atts.getNamedItem(""String_Node_Str"").getNodeValue());
    height=Integer.parseInt(atts.getNamedItem(""String_Node_Str"").getNodeValue());
    mSubTextures.put(name,new SubTexture(this,x,y,width,height));
  }
  if (!ATLAS.contains(this)) {
    ATLAS.add(this);
  }
}"
86614,"/** 
 * Thread-safe creation the texture.
 * @param gl the GL context.
 */
public void load(){
  if (mLoaded) {
    Log.e(TAG,""String_Node_Str"");
    Thread.dumpStack();
    return;
  }
  mRect.set(0,0,mSource.getWidth(),mSource.getHeight());
  TextureLoadRunnable runnable=new TextureLoadRunnable(mSource);
  GL10 agl=OpenGLSystem.getGL();
  if (agl != null) {
    runnable.run(agl);
  }
 else {
    OpenGLSystem.postRunnable(runnable);
  }
}","/** 
 * Thread-safe creation the texture.
 * @param gl the GL context.
 */
public void load(){
  mRect.set(0,0,mSource.getWidth(),mSource.getHeight());
  TextureLoadRunnable runnable=new TextureLoadRunnable(mSource);
  GL10 agl=OpenGLSystem.getGL();
  if (agl != null) {
    runnable.run(agl);
  }
 else {
    OpenGLSystem.postRunnable(runnable);
  }
}"
86615,"public Point[] getTouches(){
synchronized (mPointIndices) {
    if (mInput != null) {
      int index=0;
      for (      Integer id : mPointIndices) {
        for (int i=0; i < mInput.getPointerCount() && index < mPoints.length; i++) {
          if (mInput.getPointerId(i) == id) {
            mPoints[index].x=(int)mInput.getX(i);
            mPoints[index].y=(int)mInput.getY(i);
            index++;
            break;
          }
        }
      }
    }
    return mPoints;
  }
}","public Point[] getTouches(){
synchronized (mPointIndices) {
    MotionEvent copy=MotionEvent.obtain(mInput);
    if (mInput != null) {
      int index=0;
      for (      Integer id : mPointIndices) {
        for (int i=0; i < copy.getPointerCount() && index < mPoints.length; i++) {
          if (mInput.getPointerId(i) == id) {
            mPoints[index].x=(int)copy.getX(i);
            mPoints[index].y=(int)copy.getY(i);
            index++;
            break;
          }
        }
      }
    }
    return mPoints;
  }
}"
86616,"private static Bitmap init(String text,int x,int y,int width,int height){
  Paint p=FP.paint;
  p.reset();
  p.setTextSize(Text.size);
  if (width == 0)   width=(int)(p.measureText(text));
  if (height == 0)   height=(int)(Text.size);
  Bitmap source=Bitmap.createBitmap(width,height,Config.ARGB_8888);
  return source;
}","private static Bitmap init(String text,int x,int y,int width,int height){
  Paint p=FP.paint;
  p.reset();
  p.setTextSize(Text.size);
  if (width == 0)   width=(int)(FP.dip(p.measureText(text)));
  if (height == 0)   height=(int)(FP.dip(Text.size));
  Bitmap source=Bitmap.createBitmap(width,height,Config.ARGB_8888);
  return source;
}"
86617,"/** 
 * @private Updates the drawing buffer. 
 */
@Override public void updateBuffer(boolean clearBefore){
  if (mBuffer == null || mText == null)   return;
  Paint p=FP.paint;
  p.reset();
  p.setStyle(Style.FILL);
  p.setColor(mColor);
  p.setTextSize(mSize);
  p.setAntiAlias(true);
  p.setTextAlign(Align.LEFT);
  mWidth=(int)(p.measureText(mText));
  mHeight=(int)(mSize);
  Bitmap newBm=Bitmap.createBitmap(mWidth,(int)(mHeight + FP.dip(4)),Config.ARGB_8888);
  mSource.recycle();
  mSource=newBm;
  mBufferRect.set(0,0,mWidth,mHeight);
  getClipRect().set(mBufferRect);
  mCanvas.setBitmap(mSource);
  mCanvas.drawText(mText,0,-p.ascent(),p);
  super.updateBuffer(clearBefore);
}","/** 
 * @private Updates the drawing buffer. 
 */
@Override public void updateBuffer(boolean clearBefore){
  if (mBuffer == null || mText == null)   return;
  Paint p=FP.paint;
  p.reset();
  p.setStyle(Style.FILL);
  p.setColor(mColor);
  p.setTextSize(mSize);
  p.setAntiAlias(true);
  p.setTextAlign(Align.LEFT);
  mWidth=(int)(p.measureText(mText));
  mHeight=(int)(FP.dip(mSize));
  Bitmap newBm=Bitmap.createBitmap(mWidth,(int)(mHeight + FP.dip(4)),Config.ARGB_8888);
  mSource.recycle();
  mSource=newBm;
  mBufferRect.set(0,0,mWidth,mHeight);
  getClipRect().set(mBufferRect);
  mCanvas.setBitmap(mSource);
  mCanvas.drawText(mText,0,-p.ascent(),p);
  super.updateBuffer(clearBefore);
}"
86618,"private void console(MessageReceiver caller,String[] args){
  int page=1;
  String[] searchTerms=null;
  boolean singleHelp=false;
  if (args.length == 2) {
    singleHelp=true;
    if (args[1].matches(""String_Node_Str"")) {
      page=Integer.parseInt(args[1]);
    }
 else {
      searchTerms=Arrays.copyOfRange(args,1,1);
    }
  }
 else   if (args.length > 2) {
    if (args[args.length - 1].matches(""String_Node_Str"")) {
      page=Integer.parseInt(args[args.length - 1]);
      searchTerms=Arrays.copyOfRange(args,1,args.length - 1);
    }
 else {
      searchTerms=Arrays.copyOfRange(args,1,args.length);
    }
  }
  ArrayList<String> lines;
  if (searchTerms == null) {
    lines=Canary.help().getHelp(null,page);
  }
 else {
    if (singleHelp) {
      Canary.help().getHelp(caller,searchTerms[0]);
      return;
    }
    lines=Canary.help().getHelp(null,searchTerms,page);
  }
  if (lines == null) {
    Canary.logInfo(Translator.translate(""String_Node_Str""));
  }
  for (  String l : lines) {
    Canary.logInfo(TextFormat.removeFormatting(l));
  }
}","private void console(MessageReceiver caller,String[] args){
  int page=1;
  String[] searchTerms=null;
  boolean singleHelp=false;
  if (args.length == 2) {
    singleHelp=true;
    if (args[1].matches(""String_Node_Str"")) {
      page=Integer.parseInt(args[1]);
    }
 else {
      searchTerms=Arrays.copyOfRange(args,1,1);
    }
  }
 else   if (args.length > 2) {
    if (args[args.length - 1].matches(""String_Node_Str"")) {
      page=Integer.parseInt(args[args.length - 1]);
      searchTerms=Arrays.copyOfRange(args,1,args.length - 1);
    }
 else {
      searchTerms=Arrays.copyOfRange(args,1,args.length);
    }
  }
  ArrayList<String> lines;
  if (searchTerms == null) {
    lines=Canary.help().getHelp(null,page);
  }
 else {
    if (singleHelp) {
      Canary.help().getHelp(caller,searchTerms[0]);
      return;
    }
    lines=Canary.help().getHelp(null,searchTerms,page);
  }
  if (lines == null) {
    Canary.logInfo(Translator.translate(""String_Node_Str""));
    return;
  }
  for (  String l : lines) {
    Canary.logInfo(TextFormat.removeFormatting(l));
  }
}"
86619,"private void player(Player player,String[] args){
  if (args.length == 2) {
    LineTracer tracer=new LineTracer(player);
    Block b=tracer.getTargetBlock();
    if (b != null) {
      b.setY(b.getY() + 1);
      try {
        Entity mob=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[1].toUpperCase()),b.getLocation());
        if (mob.spawn()) {
          player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
        }
 else {
          player.notice(""String_Node_Str"");
        }
      }
 catch (      IllegalArgumentException e) {
        player.notice(""String_Node_Str"");
      }
    }
 else {
      player.notice(""String_Node_Str"");
    }
  }
  if (args.length == 3) {
    if (args[2].matches(""String_Node_Str"")) {
      int amount=Integer.parseInt(args[2]);
      LineTracer tracer=new LineTracer(player);
      Block b=tracer.getTargetBlock();
      if (b == null) {
        player.notice(""String_Node_Str"");
        return;
      }
      b.setY(b.getY() + 1);
      boolean spawnSuccess=true;
      for (int i=0; i < amount; ++i) {
        try {
          Entity e=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[1].toUpperCase()),b.getLocation());
          e.spawn();
        }
 catch (        IllegalArgumentException e) {
          player.notice(""String_Node_Str"");
        }
      }
      if (spawnSuccess) {
        player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
      }
 else {
        player.notice(Translator.translate(""String_Node_Str""));
      }
    }
 else {
      LineTracer tracer=new LineTracer(player);
      Block b=tracer.getTargetBlock();
      if (b == null) {
        player.notice(""String_Node_Str"");
        return;
      }
      b.setY(b.getY() + 1);
      try {
        Entity mob=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[1].toUpperCase()),b.getLocation());
        Entity rider=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[2].toUpperCase()));
        mob.spawn(rider);
        player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1],args[2]));
      }
 catch (      IllegalArgumentException e) {
        player.notice(""String_Node_Str"");
      }
    }
  }
  if (args.length == 4) {
    if (!args[3].matches(""String_Node_Str"")) {
      player.notice(Translator.translate(""String_Node_Str""));
      Canary.help().getHelp(player,""String_Node_Str"");
      return;
    }
    int amount=Integer.parseInt(args[3]);
    LineTracer tracer=new LineTracer(player);
    Block b=tracer.getTargetBlock();
    if (b == null) {
      player.notice(""String_Node_Str"");
      return;
    }
    b.setY(b.getY() + 1);
    boolean spawnSuccess=true;
    for (int i=0; i < amount; ++i) {
      try {
        Entity mob=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[1].toUpperCase()),b.getLocation());
        Entity rider=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[2].toUpperCase()));
        mob.spawn(rider);
      }
 catch (      IllegalArgumentException e) {
        player.notice(""String_Node_Str"");
      }
    }
    if (spawnSuccess) {
      player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1],args[2]));
    }
 else {
      player.notice(Translator.translate(""String_Node_Str""));
    }
  }
}","private void player(Player player,String[] args){
  if (args.length == 2) {
    LineTracer tracer=new LineTracer(player);
    Block b=tracer.getTargetBlock();
    if (b != null) {
      b.setY(b.getY() + 1);
      try {
        Entity mob=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[1].toUpperCase()),b.getLocation());
        if (mob.spawn()) {
          player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
        }
 else {
          player.notice(""String_Node_Str"");
        }
      }
 catch (      IllegalArgumentException e) {
        player.notice(""String_Node_Str"");
      }
    }
 else {
      player.notice(""String_Node_Str"");
    }
  }
  if (args.length == 3) {
    if (args[2].matches(""String_Node_Str"")) {
      int amount=Integer.parseInt(args[2]);
      LineTracer tracer=new LineTracer(player);
      Block b=tracer.getTargetBlock();
      if (b == null) {
        player.notice(""String_Node_Str"");
        return;
      }
      b.setY(b.getY() + 1);
      boolean spawnSuccess=true;
      for (int i=0; i < amount; ++i) {
        try {
          Entity e=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[1].toUpperCase()),b.getLocation());
          spawnSuccess&=e.spawn();
        }
 catch (        IllegalArgumentException e) {
          player.notice(""String_Node_Str"");
        }
      }
      if (spawnSuccess) {
        player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
      }
 else {
        player.notice(Translator.translate(""String_Node_Str""));
      }
    }
 else {
      LineTracer tracer=new LineTracer(player);
      Block b=tracer.getTargetBlock();
      if (b == null) {
        player.notice(""String_Node_Str"");
        return;
      }
      b.setY(b.getY() + 1);
      try {
        Entity mob=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[1].toUpperCase()),b.getLocation());
        Entity rider=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[2].toUpperCase()));
        mob.spawn(rider);
        player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1],args[2]));
      }
 catch (      IllegalArgumentException e) {
        player.notice(""String_Node_Str"");
      }
    }
  }
  if (args.length == 4) {
    if (!args[3].matches(""String_Node_Str"")) {
      player.notice(Translator.translate(""String_Node_Str""));
      Canary.help().getHelp(player,""String_Node_Str"");
      return;
    }
    int amount=Integer.parseInt(args[3]);
    LineTracer tracer=new LineTracer(player);
    Block b=tracer.getTargetBlock();
    if (b == null) {
      player.notice(""String_Node_Str"");
      return;
    }
    b.setY(b.getY() + 1);
    boolean spawnSuccess=true;
    for (int i=0; i < amount; ++i) {
      try {
        Entity mob=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[1].toUpperCase()),b.getLocation());
        Entity rider=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[2].toUpperCase()));
        spawnSuccess&=mob.spawn(rider);
      }
 catch (      IllegalArgumentException e) {
        player.notice(""String_Node_Str"");
      }
    }
    if (spawnSuccess) {
      player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1],args[2]));
    }
 else {
      player.notice(Translator.translate(""String_Node_Str""));
    }
  }
}"
86620,"public PluginCommand(boolean disable,boolean reload){
  this.reload=reload;
  if (reload) {
    disable=false;
  }
 else {
    this.disable=disable;
  }
}","public PluginCommand(boolean disable,boolean reload){
  this.reload=reload;
  this.disable=reload ? false : disable;
}"
86621,"private void player(Player player,String[] args){
  Player target=Canary.getServer().matchPlayer(args[1]);
  if (args.length == 2) {
    if (target != null) {
      player.teleportTo(target.getLocation(),TeleportHook.TeleportCause.COMMAND);
      player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",target.getName()));
    }
 else {
      World w=Canary.getServer().getWorldManager().getWorld(args[1],player.hasPermission(""String_Node_Str""));
      if (w == null) {
        player.notice(Translator.translateAndFormat(""String_Node_Str"",args[1]));
      }
      if (player.hasPermission(""String_Node_Str"")) {
        player.teleportTo(w.getSpawnLocation());
      }
    }
  }
 else   if (args.length > 3) {
    try {
      double x=Double.parseDouble(args[1]), y=Double.parseDouble(args[2]), z=Double.parseDouble(args[3]);
      if (args.length > 4 && player.hasPermission(""String_Node_Str"")) {
        try {
          String dTypeName=args[4].replaceAll(""String_Node_Str"",""String_Node_Str"");
          DimensionType dType=DimensionType.fromName(dTypeName);
          String correctedName=dType == null ? args[4] : args[4].replaceAll(""String_Node_Str"",""String_Node_Str"");
          if (dType == null) {
            dType=DimensionType.fromName(""String_Node_Str"");
          }
          World world=Canary.getServer().getWorldManager().getWorld(correctedName,dType,args.length > 5 && player.hasPermission(""String_Node_Str"") ? Boolean.valueOf(args[5]) : false);
          if (world != null) {
            player.teleportTo(x,y,z,world);
          }
 else {
            player.notice(""String_Node_Str"");
          }
        }
 catch (        UnknownWorldException uwex) {
          player.notice(""String_Node_Str"");
        }
      }
 else {
        player.teleportTo(x,y,z);
      }
    }
 catch (    NumberFormatException nfex) {
      player.notice(Translator.translateAndFormat(""String_Node_Str""));
    }
  }
 else   if (target != null) {
    player.teleportTo(target.getLocation(),TeleportHook.TeleportCause.COMMAND);
    player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",target.getName()));
  }
 else {
    player.notice(Translator.translateAndFormat(""String_Node_Str"",args[1]));
  }
}","private void player(Player player,String[] args){
  Player target=Canary.getServer().matchPlayer(args[1]);
  if (args.length == 2) {
    if (target != null) {
      player.teleportTo(target.getLocation(),TeleportHook.TeleportCause.COMMAND);
      player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",target.getName()));
    }
 else {
      World w=Canary.getServer().getWorldManager().getWorld(args[1],player.hasPermission(""String_Node_Str""));
      if (w == null) {
        player.notice(Translator.translateAndFormat(""String_Node_Str"",args[1]));
        return;
      }
      if (player.hasPermission(""String_Node_Str"")) {
        player.teleportTo(w.getSpawnLocation());
      }
    }
  }
 else   if (args.length > 3) {
    try {
      double x=Double.parseDouble(args[1]), y=Double.parseDouble(args[2]), z=Double.parseDouble(args[3]);
      if (args.length > 4 && player.hasPermission(""String_Node_Str"")) {
        try {
          String dTypeName=args[4].replaceAll(""String_Node_Str"",""String_Node_Str"");
          DimensionType dType=DimensionType.fromName(dTypeName);
          String correctedName=dType == null ? args[4] : args[4].replaceAll(""String_Node_Str"",""String_Node_Str"");
          if (dType == null) {
            dType=DimensionType.fromName(""String_Node_Str"");
          }
          World world=Canary.getServer().getWorldManager().getWorld(correctedName,dType,args.length > 5 && player.hasPermission(""String_Node_Str"") ? Boolean.valueOf(args[5]) : false);
          if (world != null) {
            player.teleportTo(x,y,z,world);
          }
 else {
            player.notice(""String_Node_Str"");
          }
        }
 catch (        UnknownWorldException uwex) {
          player.notice(""String_Node_Str"");
        }
      }
 else {
        player.teleportTo(x,y,z);
      }
    }
 catch (    NumberFormatException nfex) {
      player.notice(Translator.translateAndFormat(""String_Node_Str""));
    }
  }
 else   if (target != null) {
    player.teleportTo(target.getLocation(),TeleportHook.TeleportCause.COMMAND);
    player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",target.getName()));
  }
 else {
    player.notice(Translator.translateAndFormat(""String_Node_Str"",args[1]));
  }
}"
86622,"public void execute(MessageReceiver caller,String[] args){
  Player player=Canary.getServer().matchPlayer(args[1]);
  PermissionNode node=PermissionNode.fromString(args[2]);
  boolean result=false;
  boolean hasPath=false;
  if (player == null) {
    OfflinePlayer oplayer=Canary.getServer().getOfflinePlayer(args[1]);
    result=oplayer.hasPermission(node.getName());
    hasPath=oplayer.getPermissionProvider().pathExists(node.getName());
  }
 else {
    result=player.hasPermission(node.getName());
    hasPath=player.getPermissionProvider().pathExists(node.getName());
  }
  if (hasPath) {
    if (result) {
      caller.message(Colors.LIGHT_GREEN + node.getName() + ""String_Node_Str"");
    }
 else {
      caller.message(Colors.LIGHT_RED + node.getName() + ""String_Node_Str"");
    }
  }
 else {
    if (result) {
      caller.message(Colors.LIGHT_GREEN + node.getName() + ""String_Node_Str"");
    }
 else {
      caller.message(Colors.YELLOW + node.getName() + ""String_Node_Str""+ Translator.translate(""String_Node_Str""));
    }
  }
}","public void execute(MessageReceiver caller,String[] args){
  Player player=Canary.getServer().matchPlayer(args[1]);
  PermissionNode node=PermissionNode.fromString(args[2]);
  boolean result;
  boolean hasPath;
  if (player == null) {
    OfflinePlayer oplayer=Canary.getServer().getOfflinePlayer(args[1]);
    result=oplayer.hasPermission(node.getName());
    hasPath=oplayer.getPermissionProvider().pathExists(node.getName());
  }
 else {
    result=player.hasPermission(node.getName());
    hasPath=player.getPermissionProvider().pathExists(node.getName());
  }
  if (hasPath) {
    if (result) {
      caller.message(Colors.LIGHT_GREEN + node.getName() + ""String_Node_Str"");
    }
 else {
      caller.message(Colors.LIGHT_RED + node.getName() + ""String_Node_Str"");
    }
  }
 else {
    if (result) {
      caller.message(Colors.LIGHT_GREEN + node.getName() + ""String_Node_Str"");
    }
 else {
      caller.message(Colors.YELLOW + node.getName() + ""String_Node_Str""+ Translator.translate(""String_Node_Str""));
    }
  }
}"
86623,"/** 
 * Get whether auto heal is enabled.
 * @return true or false. Returns value of canSpawnMonsters() if auto-heal is 'default'
 */
public boolean isAutoHealEnabled(){
  if (cfg.getString(""String_Node_Str"",""String_Node_Str"") == ""String_Node_Str"") {
    return this.canSpawnMonsters();
  }
  return getBoolean(""String_Node_Str"",false);
}","/** 
 * Get whether auto heal is enabled.
 * @return true or false. Returns value of canSpawnMonsters() if auto-heal is 'default'
 */
public boolean isAutoHealEnabled(){
  if (cfg.getString(""String_Node_Str"",""String_Node_Str"").equals(""String_Node_Str"")) {
    return this.canSpawnMonsters();
  }
  return getBoolean(""String_Node_Str"",false);
}"
86624,"/** 
 * Converts this DataAccess object into a string representation.<br> Format: Table : tableName { [`columnName`,'fieldName'] }
 * @return
 */
@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  Map<Column,Object> columns=null;
  try {
    columns=this.toDatabaseEntryList();
  }
 catch (  DatabaseTableInconsistencyException dtie) {
  }
  for (  Column column : columns.keySet()) {
    sb.append(""String_Node_Str"").append(column.columnName()).append(""String_Node_Str"").append(columns.get(column)).append(""String_Node_Str"");
  }
  return ""String_Node_Str"" + this.tableName + ""String_Node_Str""+ sb.toString()+ ""String_Node_Str"";
}","/** 
 * Converts this DataAccess object into a string representation.<br> Format: Table : tableName { [`columnName`,'fieldName'] }
 * @return
 */
@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  Map<Column,Object> columns=null;
  try {
    columns=this.toDatabaseEntryList();
  }
 catch (  DatabaseTableInconsistencyException dtie) {
  }
  if (columns != null) {
    for (    Column column : columns.keySet()) {
      sb.append(""String_Node_Str"").append(column.columnName()).append(""String_Node_Str"").append(columns.get(column)).append(""String_Node_Str"");
    }
  }
  return ""String_Node_Str"" + this.tableName + ""String_Node_Str""+ sb.toString()+ ""String_Node_Str"";
}"
86625,"public void createTable(DataAccess data) throws DatabaseWriteException {
  Connection conn=pool.getConnectionFromPool();
  PreparedStatement ps=null;
  try {
    StringBuilder fields=new StringBuilder();
    HashMap<Column,Object> columns=data.toDatabaseEntryList();
    Iterator<Column> it=columns.keySet().iterator();
    String primary=null;
    Column column=null;
    while (it.hasNext()) {
      column=it.next();
      fields.append(""String_Node_Str"").append(column.columnName()).append(""String_Node_Str"");
      fields.append(this.getDataTypeSyntax(column.dataType()));
      if (column.autoIncrement()) {
        fields.append(""String_Node_Str"");
      }
      if (column.columnType().equals(Column.ColumnType.PRIMARY)) {
        primary=column.columnName();
      }
      if (it.hasNext()) {
        fields.append(""String_Node_Str"");
      }
    }
    if (primary != null) {
      fields.append(""String_Node_Str"").append(primary).append(""String_Node_Str"");
    }
    ps=conn.prepareStatement(""String_Node_Str"" + data.getName() + ""String_Node_Str""+ fields.toString()+ ""String_Node_Str"");
    ps.execute();
  }
 catch (  SQLException ex) {
    throw new DatabaseWriteException(""String_Node_Str"" + data.getName() + ""String_Node_Str""+ ex.getMessage());
  }
catch (  DatabaseTableInconsistencyException ex) {
    Canary.logStacktrace(ex.getMessage() + ""String_Node_Str"" + data.getName()+ ""String_Node_Str"",ex);
  }
 finally {
    this.closePS(ps);
    pool.returnConnectionToPool(conn);
  }
}","public void createTable(DataAccess data) throws DatabaseWriteException {
  Connection conn=pool.getConnectionFromPool();
  PreparedStatement ps=null;
  try {
    StringBuilder fields=new StringBuilder();
    HashMap<Column,Object> columns=data.toDatabaseEntryList();
    Iterator<Column> it=columns.keySet().iterator();
    String primary=null;
    Column column;
    while (it.hasNext()) {
      column=it.next();
      fields.append(""String_Node_Str"").append(column.columnName()).append(""String_Node_Str"");
      fields.append(this.getDataTypeSyntax(column.dataType()));
      if (column.autoIncrement()) {
        fields.append(""String_Node_Str"");
      }
      if (column.columnType().equals(Column.ColumnType.PRIMARY)) {
        primary=column.columnName();
      }
      if (it.hasNext()) {
        fields.append(""String_Node_Str"");
      }
    }
    if (primary != null) {
      fields.append(""String_Node_Str"").append(primary).append(""String_Node_Str"");
    }
    ps=conn.prepareStatement(""String_Node_Str"" + data.getName() + ""String_Node_Str""+ fields.toString()+ ""String_Node_Str"");
    ps.execute();
  }
 catch (  SQLException ex) {
    throw new DatabaseWriteException(""String_Node_Str"" + data.getName() + ""String_Node_Str""+ ex.getMessage());
  }
catch (  DatabaseTableInconsistencyException ex) {
    Canary.logStacktrace(ex.getMessage() + ""String_Node_Str"" + data.getName()+ ""String_Node_Str"",ex);
  }
 finally {
    this.closePS(ps);
    pool.returnConnectionToPool(conn);
  }
}"
86626,"@Override public void insert(DataAccess data) throws DatabaseWriteException {
  if (this.doesEntryExist(data)) {
    return;
  }
  Connection conn=pool.getConnectionFromPool();
  PreparedStatement ps=null;
  try {
    StringBuilder fields=new StringBuilder();
    StringBuilder values=new StringBuilder();
    HashMap<Column,Object> columns=data.toDatabaseEntryList();
    Iterator<Column> it=columns.keySet().iterator();
    Column column=null;
    while (it.hasNext()) {
      column=it.next();
      if (!column.autoIncrement()) {
        fields.append(""String_Node_Str"").append(column.columnName()).append(""String_Node_Str"").append(""String_Node_Str"");
        ;
        values.append(""String_Node_Str"").append(""String_Node_Str"");
      }
    }
    if (fields.length() > 0) {
      fields.deleteCharAt(fields.length() - 1);
    }
    if (values.length() > 0) {
      values.deleteCharAt(values.length() - 1);
    }
    ps=conn.prepareStatement(""String_Node_Str"" + data.getName() + ""String_Node_Str""+ fields.toString()+ ""String_Node_Str""+ values.toString()+ ""String_Node_Str"");
    int i=1;
    for (    Column c : columns.keySet()) {
      if (!c.autoIncrement()) {
        if (column.isList()) {
          ps.setObject(i,this.getString((List<?>)columns.get(column)));
        }
        ps.setObject(i,this.convert(columns.get(c)));
        i++;
      }
    }
    if (ps.executeUpdate() == 0) {
      throw new DatabaseWriteException(""String_Node_Str"");
    }
  }
 catch (  SQLException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
catch (  DatabaseTableInconsistencyException dtie) {
    Canary.logStacktrace(dtie.getMessage(),dtie);
  }
 finally {
    this.closePS(ps);
    pool.returnConnectionToPool(conn);
  }
}","@Override public void insert(DataAccess data) throws DatabaseWriteException {
  if (this.doesEntryExist(data)) {
    return;
  }
  Connection conn=pool.getConnectionFromPool();
  PreparedStatement ps=null;
  try {
    StringBuilder fields=new StringBuilder();
    StringBuilder values=new StringBuilder();
    HashMap<Column,Object> columns=data.toDatabaseEntryList();
    Iterator<Column> it=columns.keySet().iterator();
    Column column;
    while (it.hasNext()) {
      column=it.next();
      if (!column.autoIncrement()) {
        fields.append(""String_Node_Str"").append(column.columnName()).append(""String_Node_Str"").append(""String_Node_Str"");
        ;
        values.append(""String_Node_Str"").append(""String_Node_Str"");
      }
    }
    if (fields.length() > 0) {
      fields.deleteCharAt(fields.length() - 1);
    }
    if (values.length() > 0) {
      values.deleteCharAt(values.length() - 1);
    }
    ps=conn.prepareStatement(""String_Node_Str"" + data.getName() + ""String_Node_Str""+ fields.toString()+ ""String_Node_Str""+ values.toString()+ ""String_Node_Str"");
    int i=1;
    for (    Column c : columns.keySet()) {
      if (!c.autoIncrement()) {
        if (c.isList()) {
          ps.setObject(i,this.getString((List<?>)columns.get(c)));
        }
        ps.setObject(i,this.convert(columns.get(c)));
        i++;
      }
    }
    if (ps.executeUpdate() == 0) {
      throw new DatabaseWriteException(""String_Node_Str"");
    }
  }
 catch (  SQLException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
catch (  DatabaseTableInconsistencyException dtie) {
    Canary.logStacktrace(dtie.getMessage(),dtie);
  }
 finally {
    this.closePS(ps);
    pool.returnConnectionToPool(conn);
  }
}"
86627,"@Override public void update(DataAccess data,String[] fieldNames,Object[] fieldValues) throws DatabaseWriteException {
  if (!this.doesEntryExist(data)) {
    return;
  }
  Connection conn=pool.getConnectionFromPool();
  ResultSet rs=null;
  try {
    rs=this.getResultSet(conn,data,fieldNames,fieldValues,true);
    if (rs != null) {
      if (rs.next()) {
        HashMap<Column,Object> columns=data.toDatabaseEntryList();
        Iterator<Column> it=columns.keySet().iterator();
        Column column=null;
        while (it.hasNext()) {
          column=it.next();
          if (column.isList()) {
            rs.updateObject(column.columnName(),this.getString((List<?>)columns.get(column)));
          }
 else {
            rs.updateObject(column.columnName(),columns.get(column));
          }
        }
        rs.updateRow();
      }
 else {
        throw new DatabaseWriteException(""String_Node_Str"" + data.toString());
      }
    }
  }
 catch (  SQLException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
catch (  DatabaseTableInconsistencyException dtie) {
    Canary.logStacktrace(dtie.getMessage(),dtie);
  }
catch (  DatabaseReadException ex) {
    Logger.getLogger(MySQLDatabase.class.getName()).log(Level.SEVERE,null,ex);
  }
 finally {
    try {
      PreparedStatement st=rs.getStatement() instanceof PreparedStatement ? (PreparedStatement)rs.getStatement() : null;
      this.closeRS(rs);
      this.closePS(st);
      pool.returnConnectionToPool(conn);
    }
 catch (    SQLException ex) {
      Canary.logStacktrace(ex.getMessage(),ex);
    }
  }
}","@Override public void update(DataAccess data,String[] fieldNames,Object[] fieldValues) throws DatabaseWriteException {
  if (!this.doesEntryExist(data)) {
    return;
  }
  Connection conn=pool.getConnectionFromPool();
  ResultSet rs=null;
  try {
    rs=this.getResultSet(conn,data,fieldNames,fieldValues,true);
    if (rs != null) {
      if (rs.next()) {
        HashMap<Column,Object> columns=data.toDatabaseEntryList();
        Iterator<Column> it=columns.keySet().iterator();
        Column column;
        while (it.hasNext()) {
          column=it.next();
          if (column.isList()) {
            rs.updateObject(column.columnName(),this.getString((List<?>)columns.get(column)));
          }
 else {
            rs.updateObject(column.columnName(),columns.get(column));
          }
        }
        rs.updateRow();
      }
 else {
        throw new DatabaseWriteException(""String_Node_Str"" + data.toString());
      }
    }
  }
 catch (  SQLException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
catch (  DatabaseTableInconsistencyException dtie) {
    Canary.logStacktrace(dtie.getMessage(),dtie);
  }
catch (  DatabaseReadException ex) {
    Logger.getLogger(MySQLDatabase.class.getName()).log(Level.SEVERE,null,ex);
  }
 finally {
    try {
      PreparedStatement st=rs != null && rs.getStatement() instanceof PreparedStatement ? (PreparedStatement)rs.getStatement() : null;
      this.closeRS(rs);
      this.closePS(st);
      pool.returnConnectionToPool(conn);
    }
 catch (    SQLException ex) {
      Canary.logStacktrace(ex.getMessage(),ex);
    }
  }
}"
86628,"@Override public void updateSchema(DataAccess schemaTemplate) throws DatabaseWriteException {
  Connection conn=pool.getConnectionFromPool();
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    DatabaseMetaData metadata=conn.getMetaData();
    rs=metadata.getTables(null,null,schemaTemplate.getName(),null);
    if (!rs.first()) {
      this.createTable(schemaTemplate);
    }
 else {
      LinkedList<String> toRemove=new LinkedList<String>();
      HashMap<String,Column> toAdd=new HashMap<String,Column>();
      Iterator<Column> it=schemaTemplate.getTableLayout().iterator();
      Column column=null;
      while (it.hasNext()) {
        column=it.next();
        toAdd.put(column.columnName(),column);
      }
      for (      String col : this.getColumnNames(schemaTemplate)) {
        if (!toAdd.containsKey(col)) {
          toRemove.add(col);
        }
 else {
          toAdd.remove(col);
        }
      }
      for (      String name : toRemove) {
        this.deleteColumn(schemaTemplate.getName(),name);
      }
      for (      Map.Entry<String,Column> entry : toAdd.entrySet()) {
        this.insertColumn(schemaTemplate.getName(),entry.getValue());
      }
    }
  }
 catch (  SQLException sqle) {
    throw new DatabaseWriteException(""String_Node_Str"" + sqle.getMessage());
  }
catch (  DatabaseTableInconsistencyException dtie) {
    Canary.logStacktrace(""String_Node_Str"" + dtie.getMessage(),dtie);
  }
 finally {
    this.closeRS(rs);
    this.closePS(ps);
    pool.returnConnectionToPool(conn);
  }
}","@Override public void updateSchema(DataAccess schemaTemplate) throws DatabaseWriteException {
  Connection conn=pool.getConnectionFromPool();
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    DatabaseMetaData metadata=conn.getMetaData();
    rs=metadata.getTables(null,null,schemaTemplate.getName(),null);
    if (!rs.first()) {
      this.createTable(schemaTemplate);
    }
 else {
      LinkedList<String> toRemove=new LinkedList<String>();
      HashMap<String,Column> toAdd=new HashMap<String,Column>();
      Iterator<Column> it=schemaTemplate.getTableLayout().iterator();
      Column column;
      while (it.hasNext()) {
        column=it.next();
        toAdd.put(column.columnName(),column);
      }
      for (      String col : this.getColumnNames(schemaTemplate)) {
        if (!toAdd.containsKey(col)) {
          toRemove.add(col);
        }
 else {
          toAdd.remove(col);
        }
      }
      for (      String name : toRemove) {
        this.deleteColumn(schemaTemplate.getName(),name);
      }
      for (      Map.Entry<String,Column> entry : toAdd.entrySet()) {
        this.insertColumn(schemaTemplate.getName(),entry.getValue());
      }
    }
  }
 catch (  SQLException sqle) {
    throw new DatabaseWriteException(""String_Node_Str"" + sqle.getMessage());
  }
catch (  DatabaseTableInconsistencyException dtie) {
    Canary.logStacktrace(""String_Node_Str"" + dtie.getMessage(),dtie);
  }
 finally {
    this.closeRS(rs);
    this.closePS(ps);
    pool.returnConnectionToPool(conn);
  }
}"
86629,"@Override public void loadAll(DataAccess typeTemplate,List<DataAccess> datasets,String[] fieldNames,Object[] fieldValues) throws DatabaseReadException {
  ResultSet rs=null;
  Connection conn=pool.getConnectionFromPool();
  List<HashMap<String,Object>> stuff=new ArrayList<HashMap<String,Object>>();
  try {
    rs=this.getResultSet(conn,typeTemplate,fieldNames,fieldValues,false);
    if (rs != null) {
      while (rs.next()) {
        HashMap<String,Object> dataSet=new HashMap<String,Object>();
        for (        Column column : typeTemplate.getTableLayout()) {
          if (column.isList()) {
            dataSet.put(column.columnName(),this.getList(column.dataType(),rs.getString(column.columnName())));
          }
 else           if (rs.getObject(column.columnName()) instanceof Boolean) {
            dataSet.put(column.columnName(),rs.getBoolean(column.columnName()));
          }
 else {
            dataSet.put(column.columnName(),rs.getObject(column.columnName()));
          }
        }
        stuff.add(dataSet);
      }
    }
  }
 catch (  DatabaseReadException dre) {
    Canary.logStacktrace(dre.getMessage(),dre);
  }
catch (  SQLException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
catch (  DatabaseTableInconsistencyException dtie) {
    Canary.logStacktrace(dtie.getMessage(),dtie);
  }
 finally {
    try {
      PreparedStatement st=rs.getStatement() instanceof PreparedStatement ? (PreparedStatement)rs.getStatement() : null;
      this.closeRS(rs);
      this.closePS(st);
      pool.returnConnectionToPool(conn);
    }
 catch (    SQLException ex) {
      Canary.logStacktrace(ex.getMessage(),ex);
    }
  }
  try {
    for (    HashMap<String,Object> temp : stuff) {
      DataAccess newData=typeTemplate.getInstance();
      newData.load(temp);
      datasets.add(newData);
    }
  }
 catch (  DatabaseAccessException dae) {
    Canary.logStacktrace(dae.getMessage(),dae);
  }
}","@Override public void loadAll(DataAccess typeTemplate,List<DataAccess> datasets,String[] fieldNames,Object[] fieldValues) throws DatabaseReadException {
  ResultSet rs=null;
  Connection conn=pool.getConnectionFromPool();
  List<HashMap<String,Object>> stuff=new ArrayList<HashMap<String,Object>>();
  try {
    rs=this.getResultSet(conn,typeTemplate,fieldNames,fieldValues,false);
    if (rs != null) {
      while (rs.next()) {
        HashMap<String,Object> dataSet=new HashMap<String,Object>();
        for (        Column column : typeTemplate.getTableLayout()) {
          if (column.isList()) {
            dataSet.put(column.columnName(),this.getList(column.dataType(),rs.getString(column.columnName())));
          }
 else           if (rs.getObject(column.columnName()) instanceof Boolean) {
            dataSet.put(column.columnName(),rs.getBoolean(column.columnName()));
          }
 else {
            dataSet.put(column.columnName(),rs.getObject(column.columnName()));
          }
        }
        stuff.add(dataSet);
      }
    }
  }
 catch (  DatabaseReadException dre) {
    Canary.logStacktrace(dre.getMessage(),dre);
  }
catch (  SQLException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
catch (  DatabaseTableInconsistencyException dtie) {
    Canary.logStacktrace(dtie.getMessage(),dtie);
  }
 finally {
    try {
      PreparedStatement st=rs != null && rs.getStatement() instanceof PreparedStatement ? (PreparedStatement)rs.getStatement() : null;
      this.closeRS(rs);
      this.closePS(st);
      pool.returnConnectionToPool(conn);
    }
 catch (    SQLException ex) {
      Canary.logStacktrace(ex.getMessage(),ex);
    }
  }
  try {
    for (    HashMap<String,Object> temp : stuff) {
      DataAccess newData=typeTemplate.getInstance();
      newData.load(temp);
      datasets.add(newData);
    }
  }
 catch (  DatabaseAccessException dae) {
    Canary.logStacktrace(dae.getMessage(),dae);
  }
}"
86630,"@Override public void remove(String tableName,String[] fieldNames,Object[] fieldValues) throws DatabaseWriteException {
  Connection conn=pool.getConnectionFromPool();
  ResultSet rs=null;
  try {
    rs=this.getResultSet(conn,tableName,fieldNames,fieldValues,true);
    if (rs != null) {
      if (rs.next()) {
        rs.deleteRow();
      }
    }
  }
 catch (  DatabaseReadException dre) {
    Canary.logStacktrace(dre.getMessage(),dre);
  }
catch (  SQLException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
 finally {
    try {
      PreparedStatement st=rs.getStatement() instanceof PreparedStatement ? (PreparedStatement)rs.getStatement() : null;
      this.closeRS(rs);
      this.closePS(st);
      pool.returnConnectionToPool(conn);
    }
 catch (    SQLException ex) {
      Canary.logStacktrace(ex.getMessage(),ex);
    }
  }
}","@Override public void remove(String tableName,String[] fieldNames,Object[] fieldValues) throws DatabaseWriteException {
  Connection conn=pool.getConnectionFromPool();
  ResultSet rs=null;
  try {
    rs=this.getResultSet(conn,tableName,fieldNames,fieldValues,true);
    if (rs != null) {
      if (rs.next()) {
        rs.deleteRow();
      }
    }
  }
 catch (  DatabaseReadException dre) {
    Canary.logStacktrace(dre.getMessage(),dre);
  }
catch (  SQLException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
 finally {
    try {
      PreparedStatement st=rs != null && rs.getStatement() instanceof PreparedStatement ? (PreparedStatement)rs.getStatement() : null;
      this.closeRS(rs);
      this.closePS(st);
      pool.returnConnectionToPool(conn);
    }
 catch (    SQLException ex) {
      Canary.logStacktrace(ex.getMessage(),ex);
    }
  }
}"
86631,"@Override public void load(DataAccess dataset,String[] fieldNames,Object[] fieldValues) throws DatabaseReadException {
  ResultSet rs=null;
  Connection conn=pool.getConnectionFromPool();
  HashMap<String,Object> dataSet=new HashMap<String,Object>();
  try {
    rs=this.getResultSet(conn,dataset,fieldNames,fieldValues,true);
    if (rs != null) {
      if (rs.next()) {
        for (        Column column : dataset.getTableLayout()) {
          if (column.isList()) {
            dataSet.put(column.columnName(),this.getList(column.dataType(),rs.getString(column.columnName())));
          }
 else           if (rs.getObject(column.columnName()) instanceof Boolean) {
            dataSet.put(column.columnName(),rs.getBoolean(column.columnName()));
          }
 else {
            dataSet.put(column.columnName(),rs.getObject(column.columnName()));
          }
        }
      }
    }
  }
 catch (  DatabaseReadException dre) {
    Canary.logStacktrace(dre.getMessage(),dre);
  }
catch (  SQLException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
catch (  DatabaseTableInconsistencyException dtie) {
    Canary.logStacktrace(dtie.getMessage(),dtie);
  }
 finally {
    try {
      PreparedStatement st=rs.getStatement() instanceof PreparedStatement ? (PreparedStatement)rs.getStatement() : null;
      this.closeRS(rs);
      this.closePS(st);
      pool.returnConnectionToPool(conn);
    }
 catch (    SQLException ex) {
      Canary.logStacktrace(ex.getMessage(),ex);
    }
  }
  try {
    dataset.load(dataSet);
  }
 catch (  DatabaseAccessException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
}","@Override public void load(DataAccess dataset,String[] fieldNames,Object[] fieldValues) throws DatabaseReadException {
  ResultSet rs=null;
  Connection conn=pool.getConnectionFromPool();
  HashMap<String,Object> dataSet=new HashMap<String,Object>();
  try {
    rs=this.getResultSet(conn,dataset,fieldNames,fieldValues,true);
    if (rs != null) {
      if (rs.next()) {
        for (        Column column : dataset.getTableLayout()) {
          if (column.isList()) {
            dataSet.put(column.columnName(),this.getList(column.dataType(),rs.getString(column.columnName())));
          }
 else           if (rs.getObject(column.columnName()) instanceof Boolean) {
            dataSet.put(column.columnName(),rs.getBoolean(column.columnName()));
          }
 else {
            dataSet.put(column.columnName(),rs.getObject(column.columnName()));
          }
        }
      }
    }
  }
 catch (  DatabaseReadException dre) {
    Canary.logStacktrace(dre.getMessage(),dre);
  }
catch (  SQLException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
catch (  DatabaseTableInconsistencyException dtie) {
    Canary.logStacktrace(dtie.getMessage(),dtie);
  }
 finally {
    try {
      PreparedStatement st=rs != null && rs.getStatement() instanceof PreparedStatement ? (PreparedStatement)rs.getStatement() : null;
      this.closeRS(rs);
      this.closePS(st);
      pool.returnConnectionToPool(conn);
    }
 catch (    SQLException ex) {
      Canary.logStacktrace(ex.getMessage(),ex);
    }
  }
  try {
    dataset.load(dataSet);
  }
 catch (  DatabaseAccessException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
}"
86632,"public ResultSet getResultSet(Connection conn,String tableName,String[] fieldNames,Object[] fieldValues,boolean limitOne) throws DatabaseReadException {
  PreparedStatement ps=null;
  ResultSet toRet=null;
  try {
    if (fieldNames.length > 0) {
      StringBuilder sb=new StringBuilder();
      for (int i=0; i < fieldNames.length && i < fieldValues.length; i++) {
        sb.append(""String_Node_Str"").append(fieldNames[i]);
        if (i + 1 < fieldNames.length) {
          sb.append(""String_Node_Str"");
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
      if (limitOne) {
        sb.append(""String_Node_Str"");
      }
      ps=conn.prepareStatement(""String_Node_Str"" + tableName + ""String_Node_Str""+ sb.toString());
      for (int i=0; i < fieldNames.length && i < fieldValues.length; i++) {
        ps.setObject(i + 1,this.convert(fieldValues[i]));
      }
      toRet=ps.executeQuery();
    }
 else {
      if (limitOne) {
        ps=conn.prepareStatement(""String_Node_Str"" + tableName + ""String_Node_Str"");
      }
 else {
        ps=conn.prepareStatement(""String_Node_Str"" + tableName + ""String_Node_Str"");
      }
      toRet=ps.executeQuery();
    }
  }
 catch (  SQLException ex) {
    throw new DatabaseReadException(""String_Node_Str"" + tableName);
  }
catch (  Exception ex) {
    Logger.getLogger(MySQLDatabase.class.getName()).log(Level.SEVERE,null,ex);
  }
  return toRet;
}","public ResultSet getResultSet(Connection conn,String tableName,String[] fieldNames,Object[] fieldValues,boolean limitOne) throws DatabaseReadException {
  PreparedStatement ps;
  ResultSet toRet=null;
  try {
    if (fieldNames.length > 0) {
      StringBuilder sb=new StringBuilder();
      for (int i=0; i < fieldNames.length && i < fieldValues.length; i++) {
        sb.append(""String_Node_Str"").append(fieldNames[i]);
        if (i + 1 < fieldNames.length) {
          sb.append(""String_Node_Str"");
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
      if (limitOne) {
        sb.append(""String_Node_Str"");
      }
      ps=conn.prepareStatement(""String_Node_Str"" + tableName + ""String_Node_Str""+ sb.toString());
      for (int i=0; i < fieldNames.length && i < fieldValues.length; i++) {
        ps.setObject(i + 1,this.convert(fieldValues[i]));
      }
      toRet=ps.executeQuery();
    }
 else {
      if (limitOne) {
        ps=conn.prepareStatement(""String_Node_Str"" + tableName + ""String_Node_Str"");
      }
 else {
        ps=conn.prepareStatement(""String_Node_Str"" + tableName + ""String_Node_Str"");
      }
      toRet=ps.executeQuery();
    }
  }
 catch (  SQLException ex) {
    throw new DatabaseReadException(""String_Node_Str"" + tableName);
  }
catch (  Exception ex) {
    Logger.getLogger(MySQLDatabase.class.getName()).log(Level.SEVERE,null,ex);
  }
  return toRet;
}"
86633,"public boolean doesEntryExist(DataAccess data) throws DatabaseWriteException {
  Connection conn=pool.getConnectionFromPool();
  PreparedStatement ps=null;
  ResultSet rs=null;
  boolean toRet=false;
  try {
    StringBuilder sb=new StringBuilder();
    HashMap<Column,Object> columns=data.toDatabaseEntryList();
    Iterator<Column> it=columns.keySet().iterator();
    Column column=null;
    while (it.hasNext()) {
      column=it.next();
      if (!column.autoIncrement()) {
        if (sb.length() > 0) {
          sb.append(""String_Node_Str"").append(column.columnName());
        }
 else {
          sb.append(""String_Node_Str"").append(column.columnName());
        }
        sb.append(""String_Node_Str"");
      }
    }
    ps=conn.prepareStatement(""String_Node_Str"" + data.getName() + ""String_Node_Str""+ sb.toString());
    it=columns.keySet().iterator();
    int index=1;
    while (it.hasNext()) {
      column=it.next();
      if (!column.autoIncrement()) {
        ps.setObject(index,this.convert(columns.get(column)));
        index++;
      }
    }
    rs=ps.executeQuery();
    if (rs != null) {
      toRet=rs.next();
    }
  }
 catch (  SQLException ex) {
    throw new DatabaseWriteException(ex.getMessage() + ""String_Node_Str"" + data.toString());
  }
catch (  DatabaseTableInconsistencyException ex) {
    Logger.getLogger(MySQLDatabase.class.getName()).log(Level.SEVERE,null,ex);
  }
 finally {
    this.closePS(ps);
    this.closeRS(rs);
    pool.returnConnectionToPool(conn);
  }
  return toRet;
}","public boolean doesEntryExist(DataAccess data) throws DatabaseWriteException {
  Connection conn=pool.getConnectionFromPool();
  PreparedStatement ps=null;
  ResultSet rs=null;
  boolean toRet=false;
  try {
    StringBuilder sb=new StringBuilder();
    HashMap<Column,Object> columns=data.toDatabaseEntryList();
    Iterator<Column> it=columns.keySet().iterator();
    Column column;
    while (it.hasNext()) {
      column=it.next();
      if (!column.autoIncrement()) {
        if (sb.length() > 0) {
          sb.append(""String_Node_Str"").append(column.columnName());
        }
 else {
          sb.append(""String_Node_Str"").append(column.columnName());
        }
        sb.append(""String_Node_Str"");
      }
    }
    ps=conn.prepareStatement(""String_Node_Str"" + data.getName() + ""String_Node_Str""+ sb.toString());
    it=columns.keySet().iterator();
    int index=1;
    while (it.hasNext()) {
      column=it.next();
      if (!column.autoIncrement()) {
        ps.setObject(index,this.convert(columns.get(column)));
        index++;
      }
    }
    rs=ps.executeQuery();
    if (rs != null) {
      toRet=rs.next();
    }
  }
 catch (  SQLException ex) {
    throw new DatabaseWriteException(ex.getMessage() + ""String_Node_Str"" + data.toString());
  }
catch (  DatabaseTableInconsistencyException ex) {
    Logger.getLogger(MySQLDatabase.class.getName()).log(Level.SEVERE,null,ex);
  }
 finally {
    this.closePS(ps);
    this.closeRS(rs);
    pool.returnConnectionToPool(conn);
  }
  return toRet;
}"
86634,"public void createTable(DataAccess data) throws DatabaseWriteException {
  PreparedStatement ps=null;
  try {
    StringBuilder fields=new StringBuilder();
    HashMap<Column,Object> columns=data.toDatabaseEntryList();
    Iterator<Column> it=columns.keySet().iterator();
    Column column=null;
    while (it.hasNext()) {
      column=it.next();
      fields.append(""String_Node_Str"").append(column.columnName()).append(""String_Node_Str"");
      if (column.columnType().equals(Column.ColumnType.PRIMARY) && column.autoIncrement() && column.dataType() == Column.DataType.INTEGER) {
        fields.append(""String_Node_Str"");
        if (it.hasNext()) {
          fields.append(""String_Node_Str"");
        }
        continue;
      }
 else {
        fields.append(getDataTypeSyntax(column.dataType()));
      }
      if (column.columnType() == Column.ColumnType.PRIMARY) {
        fields.append(""String_Node_Str"");
      }
      if (column.autoIncrement()) {
        fields.append(""String_Node_Str"");
      }
      if (it.hasNext()) {
        fields.append(""String_Node_Str"");
      }
    }
    String state=""String_Node_Str"" + data.getName() + ""String_Node_Str""+ fields.toString()+ ""String_Node_Str"";
    ps=conn.prepareStatement(state);
    if (ps.execute()) {
      Canary.logDebug(""String_Node_Str"");
    }
  }
 catch (  SQLException ex) {
    throw new DatabaseWriteException(""String_Node_Str"" + data.getName() + ""String_Node_Str""+ ex.getMessage());
  }
catch (  DatabaseTableInconsistencyException ex) {
    Canary.logStacktrace(ex.getMessage() + ""String_Node_Str"" + data.getName()+ ""String_Node_Str"",ex);
  }
 finally {
    closePS(ps);
  }
}","public void createTable(DataAccess data) throws DatabaseWriteException {
  PreparedStatement ps=null;
  try {
    StringBuilder fields=new StringBuilder();
    HashMap<Column,Object> columns=data.toDatabaseEntryList();
    Iterator<Column> it=columns.keySet().iterator();
    Column column;
    while (it.hasNext()) {
      column=it.next();
      fields.append(""String_Node_Str"").append(column.columnName()).append(""String_Node_Str"");
      if (column.columnType().equals(Column.ColumnType.PRIMARY) && column.autoIncrement() && column.dataType() == Column.DataType.INTEGER) {
        fields.append(""String_Node_Str"");
        if (it.hasNext()) {
          fields.append(""String_Node_Str"");
        }
        continue;
      }
 else {
        fields.append(getDataTypeSyntax(column.dataType()));
      }
      if (column.columnType() == Column.ColumnType.PRIMARY) {
        fields.append(""String_Node_Str"");
      }
      if (column.autoIncrement()) {
        fields.append(""String_Node_Str"");
      }
      if (it.hasNext()) {
        fields.append(""String_Node_Str"");
      }
    }
    String state=""String_Node_Str"" + data.getName() + ""String_Node_Str""+ fields.toString()+ ""String_Node_Str"";
    ps=conn.prepareStatement(state);
    if (ps.execute()) {
      Canary.logDebug(""String_Node_Str"");
    }
  }
 catch (  SQLException ex) {
    throw new DatabaseWriteException(""String_Node_Str"" + data.getName() + ""String_Node_Str""+ ex.getMessage());
  }
catch (  DatabaseTableInconsistencyException ex) {
    Canary.logStacktrace(ex.getMessage() + ""String_Node_Str"" + data.getName()+ ""String_Node_Str"",ex);
  }
 finally {
    closePS(ps);
  }
}"
86635,"@Override public void insert(DataAccess data) throws DatabaseWriteException {
  if (doesEntryExist(data)) {
    return;
  }
  PreparedStatement ps=null;
  try {
    StringBuilder fields=new StringBuilder();
    StringBuilder values=new StringBuilder();
    HashMap<Column,Object> columns=data.toDatabaseEntryList();
    Iterator<Column> it=columns.keySet().iterator();
    Column column=null;
    while (it.hasNext()) {
      column=it.next();
      if (!column.autoIncrement()) {
        fields.append(""String_Node_Str"").append(column.columnName()).append(""String_Node_Str"").append(""String_Node_Str"");
        values.append(""String_Node_Str"").append(""String_Node_Str"");
      }
    }
    if (fields.length() > 0) {
      fields.deleteCharAt(fields.length() - 1);
    }
    if (values.length() > 0) {
      values.deleteCharAt(values.length() - 1);
    }
    String state=""String_Node_Str"" + data.getName() + ""String_Node_Str""+ fields.toString()+ ""String_Node_Str""+ values.toString()+ ""String_Node_Str"";
    ps=conn.prepareStatement(state);
    int i=1;
    for (    Column c : columns.keySet()) {
      if (!c.autoIncrement()) {
        if (column.isList()) {
          ps.setObject(i,getString((List<?>)columns.get(column)));
        }
        ps.setObject(i,convert(columns.get(c)));
        i++;
      }
    }
    if (ps.executeUpdate() == 0) {
      throw new DatabaseWriteException(""String_Node_Str"");
    }
  }
 catch (  SQLException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
catch (  DatabaseTableInconsistencyException dtie) {
    Canary.logStacktrace(dtie.getMessage(),dtie);
  }
 finally {
    closePS(ps);
  }
}","@Override public void insert(DataAccess data) throws DatabaseWriteException {
  if (doesEntryExist(data)) {
    return;
  }
  PreparedStatement ps=null;
  try {
    StringBuilder fields=new StringBuilder();
    StringBuilder values=new StringBuilder();
    HashMap<Column,Object> columns=data.toDatabaseEntryList();
    Iterator<Column> it=columns.keySet().iterator();
    Column column=null;
    while (it.hasNext()) {
      column=it.next();
      if (!column.autoIncrement()) {
        fields.append(""String_Node_Str"").append(column.columnName()).append(""String_Node_Str"").append(""String_Node_Str"");
        values.append(""String_Node_Str"").append(""String_Node_Str"");
      }
    }
    if (fields.length() > 0) {
      fields.deleteCharAt(fields.length() - 1);
    }
    if (values.length() > 0) {
      values.deleteCharAt(values.length() - 1);
    }
    String state=""String_Node_Str"" + data.getName() + ""String_Node_Str""+ fields.toString()+ ""String_Node_Str""+ values.toString()+ ""String_Node_Str"";
    ps=conn.prepareStatement(state);
    int i=1;
    for (    Column c : columns.keySet()) {
      if (!c.autoIncrement()) {
        if (c.isList()) {
          ps.setObject(i,getString((List<?>)columns.get(c)));
        }
        ps.setObject(i,convert(columns.get(c)));
        i++;
      }
    }
    if (ps.executeUpdate() == 0) {
      throw new DatabaseWriteException(""String_Node_Str"");
    }
  }
 catch (  SQLException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
catch (  DatabaseTableInconsistencyException dtie) {
    Canary.logStacktrace(dtie.getMessage(),dtie);
  }
 finally {
    closePS(ps);
  }
}"
86636,"@Override public void update(DataAccess data,String[] fieldNames,Object[] fieldValues) throws DatabaseWriteException {
  if (!doesEntryExist(data)) {
    return;
  }
  PreparedStatement ps=null;
  try {
    String updateClause=""String_Node_Str"" + data.getName() + ""String_Node_Str"";
    StringBuilder set=new StringBuilder();
    StringBuilder where=new StringBuilder();
    HashMap<Column,Object> columns=data.toDatabaseEntryList();
    Iterator<Column> it=columns.keySet().iterator();
    Column column=null;
    while (it.hasNext()) {
      column=it.next();
      if (where.length() > 0) {
        where.append(""String_Node_Str"").append(column.columnName());
      }
 else {
        where.append(column.columnName());
      }
      set.append(""String_Node_Str"");
      set.append(convert(columns.get(column)));
    }
    for (int index=0; index < fieldNames.length && index < fieldValues.length; index++) {
      if (where.length() > 0) {
        where.append(""String_Node_Str"").append(fieldNames[index]);
      }
 else {
        where.append(fieldNames[index]);
      }
      where.append(""String_Node_Str"");
      where.append(fieldValues[index]);
    }
    ps=conn.prepareStatement(String.format(updateClause,set.toString(),where.toString()));
    ps.execute();
  }
 catch (  SQLException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
catch (  DatabaseTableInconsistencyException dbtiex) {
    Canary.logStacktrace(dbtiex.getMessage(),dbtiex);
  }
 finally {
    closePS(ps);
  }
}","@Override public void update(DataAccess data,String[] fieldNames,Object[] fieldValues) throws DatabaseWriteException {
  if (!doesEntryExist(data)) {
    return;
  }
  PreparedStatement ps=null;
  try {
    String updateClause=""String_Node_Str"" + data.getName() + ""String_Node_Str"";
    StringBuilder set=new StringBuilder();
    StringBuilder where=new StringBuilder();
    HashMap<Column,Object> columns=data.toDatabaseEntryList();
    Iterator<Column> it=columns.keySet().iterator();
    Column column;
    while (it.hasNext()) {
      column=it.next();
      if (where.length() > 0) {
        where.append(""String_Node_Str"").append(column.columnName());
      }
 else {
        where.append(column.columnName());
      }
      set.append(""String_Node_Str"");
      set.append(convert(columns.get(column)));
    }
    for (int index=0; index < fieldNames.length && index < fieldValues.length; index++) {
      if (where.length() > 0) {
        where.append(""String_Node_Str"").append(fieldNames[index]);
      }
 else {
        where.append(fieldNames[index]);
      }
      where.append(""String_Node_Str"");
      where.append(fieldValues[index]);
    }
    ps=conn.prepareStatement(String.format(updateClause,set.toString(),where.toString()));
    ps.execute();
  }
 catch (  SQLException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
catch (  DatabaseTableInconsistencyException dbtiex) {
    Canary.logStacktrace(dbtiex.getMessage(),dbtiex);
  }
 finally {
    closePS(ps);
  }
}"
86637,"@Override public void updateSchema(DataAccess schemaTemplate) throws DatabaseWriteException {
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    DatabaseMetaData metadata=conn.getMetaData();
    rs=metadata.getTables(null,null,schemaTemplate.getName(),null);
    if (!rs.next()) {
      createTable(schemaTemplate);
    }
 else {
      LinkedList<String> toRemove=new LinkedList<String>();
      HashMap<String,Column> toAdd=new HashMap<String,Column>();
      Iterator<Column> it=schemaTemplate.getTableLayout().iterator();
      Column column=null;
      while (it.hasNext()) {
        column=it.next();
        toAdd.put(column.columnName(),column);
      }
      for (      String col : getColumnNames(schemaTemplate)) {
        if (!toAdd.containsKey(col)) {
          toRemove.add(col);
        }
 else {
          toAdd.remove(col);
        }
      }
      for (      String name : toRemove) {
        deleteColumn(schemaTemplate.getName(),name);
      }
      for (      Map.Entry<String,Column> entry : toAdd.entrySet()) {
        insertColumn(schemaTemplate.getName(),entry.getValue());
      }
    }
  }
 catch (  SQLException sqle) {
    throw new DatabaseWriteException(""String_Node_Str"" + sqle.getMessage());
  }
catch (  DatabaseTableInconsistencyException dtie) {
    Canary.logStacktrace(""String_Node_Str"" + dtie.getMessage(),dtie);
  }
 finally {
    closeRS(rs);
    closePS(ps);
  }
}","@Override public void updateSchema(DataAccess schemaTemplate) throws DatabaseWriteException {
  PreparedStatement ps=null;
  ResultSet rs=null;
  try {
    DatabaseMetaData metadata=conn.getMetaData();
    rs=metadata.getTables(null,null,schemaTemplate.getName(),null);
    if (!rs.next()) {
      createTable(schemaTemplate);
    }
 else {
      LinkedList<String> toRemove=new LinkedList<String>();
      HashMap<String,Column> toAdd=new HashMap<String,Column>();
      Iterator<Column> it=schemaTemplate.getTableLayout().iterator();
      Column column;
      while (it.hasNext()) {
        column=it.next();
        toAdd.put(column.columnName(),column);
      }
      for (      String col : getColumnNames(schemaTemplate)) {
        if (!toAdd.containsKey(col)) {
          toRemove.add(col);
        }
 else {
          toAdd.remove(col);
        }
      }
      for (      String name : toRemove) {
        deleteColumn(schemaTemplate.getName(),name);
      }
      for (      Map.Entry<String,Column> entry : toAdd.entrySet()) {
        insertColumn(schemaTemplate.getName(),entry.getValue());
      }
    }
  }
 catch (  SQLException sqle) {
    throw new DatabaseWriteException(""String_Node_Str"" + sqle.getMessage());
  }
catch (  DatabaseTableInconsistencyException dtie) {
    Canary.logStacktrace(""String_Node_Str"" + dtie.getMessage(),dtie);
  }
 finally {
    closeRS(rs);
    closePS(ps);
  }
}"
86638,"public ResultSet getResultSet(Connection conn,String tableName,String[] fieldNames,Object[] fieldValues,boolean limitOne) throws DatabaseReadException {
  PreparedStatement ps=null;
  ResultSet toRet=null;
  try {
    if (fieldNames.length > 0) {
      StringBuilder sb=new StringBuilder();
      for (int i=0; i < fieldNames.length && i < fieldValues.length; i++) {
        sb.append(""String_Node_Str"").append(fieldNames[i]);
        if (i + 1 < fieldNames.length) {
          sb.append(""String_Node_Str"");
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
      if (limitOne) {
        sb.append(""String_Node_Str"");
      }
      ps=conn.prepareStatement(""String_Node_Str"" + tableName + ""String_Node_Str""+ sb.toString());
      for (int i=0; i < fieldNames.length && i < fieldValues.length; i++) {
        ps.setObject(i + 1,convert(fieldValues[i]));
      }
      toRet=ps.executeQuery();
    }
 else {
      if (limitOne) {
        ps=conn.prepareStatement(""String_Node_Str"" + tableName + ""String_Node_Str"");
      }
 else {
        ps=conn.prepareStatement(""String_Node_Str"" + tableName + ""String_Node_Str"");
      }
      toRet=ps.executeQuery();
    }
  }
 catch (  SQLException ex) {
    throw new DatabaseReadException(""String_Node_Str"" + tableName);
  }
catch (  Exception ex) {
    Logger.getLogger(SQLiteDatabase.class.getName()).log(Level.SEVERE,null,ex);
  }
  return toRet;
}","public ResultSet getResultSet(Connection conn,String tableName,String[] fieldNames,Object[] fieldValues,boolean limitOne) throws DatabaseReadException {
  PreparedStatement ps;
  ResultSet toRet=null;
  try {
    if (fieldNames.length > 0) {
      StringBuilder sb=new StringBuilder();
      for (int i=0; i < fieldNames.length && i < fieldValues.length; i++) {
        sb.append(""String_Node_Str"").append(fieldNames[i]);
        if (i + 1 < fieldNames.length) {
          sb.append(""String_Node_Str"");
        }
 else {
          sb.append(""String_Node_Str"");
        }
      }
      if (limitOne) {
        sb.append(""String_Node_Str"");
      }
      ps=conn.prepareStatement(""String_Node_Str"" + tableName + ""String_Node_Str""+ sb.toString());
      for (int i=0; i < fieldNames.length && i < fieldValues.length; i++) {
        ps.setObject(i + 1,convert(fieldValues[i]));
      }
      toRet=ps.executeQuery();
    }
 else {
      if (limitOne) {
        ps=conn.prepareStatement(""String_Node_Str"" + tableName + ""String_Node_Str"");
      }
 else {
        ps=conn.prepareStatement(""String_Node_Str"" + tableName + ""String_Node_Str"");
      }
      toRet=ps.executeQuery();
    }
  }
 catch (  SQLException ex) {
    throw new DatabaseReadException(""String_Node_Str"" + tableName);
  }
catch (  Exception ex) {
    Logger.getLogger(SQLiteDatabase.class.getName()).log(Level.SEVERE,null,ex);
  }
  return toRet;
}"
86639,"public boolean doesEntryExist(DataAccess data) throws DatabaseWriteException {
  PreparedStatement ps=null;
  ResultSet rs=null;
  boolean toRet=false;
  try {
    StringBuilder sb=new StringBuilder();
    HashMap<Column,Object> columns=data.toDatabaseEntryList();
    Iterator<Column> it=columns.keySet().iterator();
    Column column=null;
    while (it.hasNext()) {
      column=it.next();
      if (!column.autoIncrement()) {
        if (sb.length() > 0) {
          sb.append(""String_Node_Str"").append(column.columnName());
        }
 else {
          sb.append(""String_Node_Str"").append(column.columnName());
        }
        sb.append(""String_Node_Str"");
      }
    }
    ps=conn.prepareStatement(""String_Node_Str"" + data.getName() + ""String_Node_Str""+ sb.toString());
    it=columns.keySet().iterator();
    int index=1;
    while (it.hasNext()) {
      column=it.next();
      if (!column.autoIncrement()) {
        ps.setObject(index,convert(columns.get(column)));
        index++;
      }
    }
    rs=ps.executeQuery();
    if (rs != null) {
      toRet=rs.next();
    }
  }
 catch (  SQLException ex) {
    throw new DatabaseWriteException(ex.getMessage() + ""String_Node_Str"" + data.toString());
  }
catch (  DatabaseTableInconsistencyException ex) {
    Logger.getLogger(SQLiteDatabase.class.getName()).log(Level.SEVERE,null,ex);
  }
 finally {
    closePS(ps);
    closeRS(rs);
  }
  return toRet;
}","public boolean doesEntryExist(DataAccess data) throws DatabaseWriteException {
  PreparedStatement ps=null;
  ResultSet rs=null;
  boolean toRet=false;
  try {
    StringBuilder sb=new StringBuilder();
    HashMap<Column,Object> columns=data.toDatabaseEntryList();
    Iterator<Column> it=columns.keySet().iterator();
    Column column;
    while (it.hasNext()) {
      column=it.next();
      if (!column.autoIncrement()) {
        if (sb.length() > 0) {
          sb.append(""String_Node_Str"").append(column.columnName());
        }
 else {
          sb.append(""String_Node_Str"").append(column.columnName());
        }
        sb.append(""String_Node_Str"");
      }
    }
    ps=conn.prepareStatement(""String_Node_Str"" + data.getName() + ""String_Node_Str""+ sb.toString());
    it=columns.keySet().iterator();
    int index=1;
    while (it.hasNext()) {
      column=it.next();
      if (!column.autoIncrement()) {
        ps.setObject(index,convert(columns.get(column)));
        index++;
      }
    }
    rs=ps.executeQuery();
    if (rs != null) {
      toRet=rs.next();
    }
  }
 catch (  SQLException ex) {
    throw new DatabaseWriteException(ex.getMessage() + ""String_Node_Str"" + data.toString());
  }
catch (  DatabaseTableInconsistencyException ex) {
    Logger.getLogger(SQLiteDatabase.class.getName()).log(Level.SEVERE,null,ex);
  }
 finally {
    closePS(ps);
    closeRS(rs);
  }
  return toRet;
}"
86640,"@Override public void insert(DataAccess data) throws DatabaseWriteException {
  File file=new File(""String_Node_Str"" + data.getName() + ""String_Node_Str"");
  if (!file.exists()) {
    try {
      file.createNewFile();
      initFile(file,data.getName());
    }
 catch (    IOException e) {
      throw new DatabaseWriteException(e.getMessage());
    }
  }
  Document dbTable=null;
  try {
    FileInputStream in=new FileInputStream(file);
    dbTable=fileBuilder.build(in);
    in.close();
    insertData(file,data,dbTable);
  }
 catch (  JDOMException e) {
    throw new DatabaseWriteException(e.getMessage(),e);
  }
catch (  IOException e) {
    throw new DatabaseWriteException(e.getMessage(),e);
  }
catch (  DatabaseTableInconsistencyException e) {
    throw new DatabaseWriteException(e.getMessage(),e);
  }
}","@Override public void insert(DataAccess data) throws DatabaseWriteException {
  File file=new File(""String_Node_Str"" + data.getName() + ""String_Node_Str"");
  if (!file.exists()) {
    try {
      file.createNewFile();
      initFile(file,data.getName());
    }
 catch (    IOException e) {
      throw new DatabaseWriteException(e.getMessage());
    }
  }
  Document dbTable;
  try {
    FileInputStream in=new FileInputStream(file);
    dbTable=fileBuilder.build(in);
    in.close();
    insertData(file,data,dbTable);
  }
 catch (  JDOMException e) {
    throw new DatabaseWriteException(e.getMessage(),e);
  }
catch (  IOException e) {
    throw new DatabaseWriteException(e.getMessage(),e);
  }
catch (  DatabaseTableInconsistencyException e) {
    throw new DatabaseWriteException(e.getMessage(),e);
  }
}"
86641,"/** 
 * Generates the next auto-increment ID for this table
 * @param doc
 * @param col
 * @return
 * @throws DatabaseTableInconsistencyException
 */
private int getIncrementId(Document doc,Column col) throws DatabaseTableInconsistencyException {
  int id=0;
  int index=doc.getRootElement().getChildren().size() - 1;
  if (index < 0) {
    return 1;
  }
  Element c=doc.getRootElement().getChildren().get(index);
  try {
    String num=c.getChildText(col.columnName());
    if (num != null) {
      id=Integer.valueOf(num);
      id++;
      return id;
    }
 else {
      return 1;
    }
  }
 catch (  NumberFormatException e) {
    throw new DatabaseTableInconsistencyException(col.columnName() + ""String_Node_Str"");
  }
}","/** 
 * Generates the next auto-increment ID for this table
 * @param doc
 * @param col
 * @return
 * @throws DatabaseTableInconsistencyException
 */
private int getIncrementId(Document doc,Column col) throws DatabaseTableInconsistencyException {
  int id;
  int index=doc.getRootElement().getChildren().size() - 1;
  if (index < 0) {
    return 1;
  }
  Element c=doc.getRootElement().getChildren().get(index);
  try {
    String num=c.getChildText(col.columnName());
    if (num != null) {
      id=Integer.valueOf(num);
      id++;
      return id;
    }
 else {
      return 1;
    }
  }
 catch (  NumberFormatException e) {
    throw new DatabaseTableInconsistencyException(col.columnName() + ""String_Node_Str"");
  }
}"
86642,"@Override public void log(LogRecord logRecord){
  logRecord.setMessage(new StringBuilder(""String_Node_Str"").append(name).append(""String_Node_Str"").append(TextFormat.consoleFormat(logRecord.getMessage())).toString());
  super.log(logRecord);
}","@Override public void log(LogRecord logRecord){
  logRecord.setMessage(""String_Node_Str"" + name + ""String_Node_Str""+ TextFormat.consoleFormat(logRecord.getMessage()));
  super.log(logRecord);
}"
86643,"/** 
 * Get the Canary.inf from a jar file
 * @param filename
 * @param priorityBase The base for plugin priority which is used to calculate the priority of new Plugins
 * @return
 */
private final PropertiesFile scan(String filename,int priorityBase){
  PropertiesFile inf=null;
  try {
    File file=new File(""String_Node_Str"" + filename);
    String jarName=filename.substring(0,filename.lastIndexOf(""String_Node_Str""));
    inf=new PropertiesFile(file.getAbsolutePath(),""String_Node_Str"");
    if (!inf.containsKey(""String_Node_Str"")) {
      Canary.logSevere(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      return null;
    }
    inf.setString(""String_Node_Str"",jarName);
    inf.setString(""String_Node_Str"",""String_Node_Str"".concat(filename));
    if (!inf.containsKey(""String_Node_Str"")) {
      inf.setString(""String_Node_Str"",simpleMain(inf.getString(""String_Node_Str"")));
    }
    if (!pluginPriorities.containsKey(inf.getString(""String_Node_Str""))) {
      pluginPriorities.setInt(inf.getString(""String_Node_Str""),priorityBase * 10);
      pluginPriorities.save();
    }
 else     if (pluginPriorities.getInt(inf.getString(""String_Node_Str"")) < 0) {
      return null;
    }
  }
 catch (  Throwable ex) {
    Canary.logStacktrace(""String_Node_Str"" + filename + ""String_Node_Str"",ex);
    return null;
  }
  return inf;
}","/** 
 * Get the Canary.inf from a jar file
 * @param filename
 * @param priorityBase The base for plugin priority which is used to calculate the priority of new Plugins
 * @return
 */
private final PropertiesFile scan(String filename,int priorityBase){
  PropertiesFile inf;
  try {
    File file=new File(""String_Node_Str"" + filename);
    String jarName=filename.substring(0,filename.lastIndexOf(""String_Node_Str""));
    inf=new PropertiesFile(file.getAbsolutePath(),""String_Node_Str"");
    if (!inf.containsKey(""String_Node_Str"")) {
      Canary.logSevere(""String_Node_Str"" + file.getName() + ""String_Node_Str"");
      return null;
    }
    inf.setString(""String_Node_Str"",jarName);
    inf.setString(""String_Node_Str"",""String_Node_Str"".concat(filename));
    if (!inf.containsKey(""String_Node_Str"")) {
      inf.setString(""String_Node_Str"",simpleMain(inf.getString(""String_Node_Str"")));
    }
    if (!pluginPriorities.containsKey(inf.getString(""String_Node_Str""))) {
      pluginPriorities.setInt(inf.getString(""String_Node_Str""),priorityBase * 10);
      pluginPriorities.save();
    }
 else     if (pluginPriorities.getInt(inf.getString(""String_Node_Str"")) < 0) {
      return null;
    }
  }
 catch (  Throwable ex) {
    Canary.logStacktrace(""String_Node_Str"" + filename + ""String_Node_Str"",ex);
    return null;
  }
  return inf;
}"
86644,"/** 
 * Moves a plugins jar file to the disabled/ folder so it won't be loaded with the next server-start/restart
 * @param name
 * @return
 */
public final boolean moveToDisabled(String name){
  Plugin plugin=this.getPlugin(name);
  if (plugin == null) {
    return false;
  }
  ((CanaryClassLoader)plugin.getClass().getClassLoader()).close();
  plugin.markClosed();
  plugins.remove(name);
  pluginPriorities.setInt(name,-1);
  plugin=null;
  return true;
}","/** 
 * Moves a plugins jar file to the disabled/ folder so it won't be loaded with the next server-start/restart
 * @param name
 * @return
 */
public final boolean moveToDisabled(String name){
  Plugin plugin=this.getPlugin(name);
  if (plugin == null) {
    return false;
  }
  ((CanaryClassLoader)plugin.getClass().getClassLoader()).close();
  plugin.markClosed();
  plugins.remove(name);
  pluginPriorities.setInt(name,-1);
  return true;
}"
86645,"/** 
 * Return home for a player with this name
 * @param player
 * @return
 */
public Warp getHome(String player){
  for (  Warp g : warps) {
    if (g.isPlayerHome()) {
      if (g.getOwner().equals(player) && g.isPlayerHome()) {
        return g;
      }
    }
  }
  return null;
}","/** 
 * Return home for a player with this name
 * @param player
 * @return
 */
public Warp getHome(String player){
  for (  Warp g : warps) {
    if (g.isPlayerHome()) {
      if (g.getOwner().equals(player)) {
        return g;
      }
    }
  }
  return null;
}"
86646,"/** 
 * {@inheritDoc}
 */
@Override public boolean equals(Object obj){
  if (obj == this) {
    return true;
  }
  if (obj instanceof PlayerListEntry) {
    PlayerListEntry other=(PlayerListEntry)obj;
    if (!other.getName().equals(this.name)) {
      return false;
    }
    if (other.getPing() != this.ping) {
      return false;
    }
    if (other.isShown() != this.shown) {
      return false;
    }
    return true;
  }
  return false;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean equals(Object obj){
  if (obj == this) {
    return true;
  }
  if (obj instanceof PlayerListEntry) {
    PlayerListEntry other=(PlayerListEntry)obj;
    if (!other.getName().equals(this.name)) {
      return false;
    }
    if (other.getPing() != this.ping) {
      return false;
    }
    return other.isShown() == this.shown;
  }
  return false;
}"
86647,"/** 
 * Checks if the given Book has been signed
 * @param book the book to check
 * @return {@code true} if signed; {@code false} if not
 */
public static boolean isSigned(Item book){
  return book == null ? false : book.getType() == ItemType.WrittenBook;
}","/** 
 * Checks if the given Book has been signed
 * @param book the book to check
 * @return {@code true} if signed; {@code false} if not
 */
public static boolean isSigned(Item book){
  return book != null && book.getType() == ItemType.WrittenBook;
}"
86648,"/** 
 * Checks if the given Book can still be written in by a player
 * @param book the book to check
 * @return {@code true} if can be written in; {@code false} if not
 */
public static boolean isWritable(Item book){
  return book == null ? false : book.getType() == ItemType.BookAndQuill;
}","/** 
 * Checks if the given Book can still be written in by a player
 * @param book the book to check
 * @return {@code true} if can be written in; {@code false} if not
 */
public static boolean isWritable(Item book){
  return book != null && book.getType() == ItemType.BookAndQuill;
}"
86649,"/** 
 * Checks the book for stored enchantments
 * @param book the book to check
 * @return true if contains enchantments; false if not
 */
public static boolean containsEnchantments(Item book){
  if (book == null || book.getType() != ItemType.EnchantedBook) {
    return false;
  }
  if (!verifyTags(book,""String_Node_Str"",LIST,false)) {
    return false;
  }
  return true;
}","/** 
 * Checks the book for stored enchantments
 * @param book the book to check
 * @return true if contains enchantments; false if not
 */
public static boolean containsEnchantments(Item book){
  if (book == null || book.getType() != ItemType.EnchantedBook) {
    return false;
  }
  return verifyTags(book,""String_Node_Str"",LIST,false);
}"
86650,"/** 
 * | Checks if the given Book is enchanted
 * @param book the book to check
 * @return {@code true} if enchanted; {@code false} if not
 */
public static boolean isEnchanted(Item book){
  return book == null ? false : book.getType() == ItemType.EnchantedBook;
}","/** 
 * | Checks if the given Book is enchanted
 * @param book the book to check
 * @return {@code true} if enchanted; {@code false} if not
 */
public static boolean isEnchanted(Item book){
  return book != null && book.getType() == ItemType.EnchantedBook;
}"
86651,"/** 
 * Checks if the   {@link Item} has color
 * @param item the  {@link Item} to be checked
 * @return {@code true} if colored; {@code false} if not
 */
static boolean isColored(Item item){
  if (!verifyTags(item,""String_Node_Str"",NBTTagType.COMPOUND,false)) {
    return false;
  }
  if (!item.getDataTag().getCompoundTag(""String_Node_Str"").containsKey(""String_Node_Str"")) {
    return false;
  }
  return true;
}","/** 
 * Checks if the   {@link Item} has color
 * @param item the  {@link Item} to be checked
 * @return {@code true} if colored; {@code false} if not
 */
static boolean isColored(Item item){
  if (!verifyTags(item,""String_Node_Str"",NBTTagType.COMPOUND,false)) {
    return false;
  }
  return item.getDataTag().getCompoundTag(""String_Node_Str"").containsKey(""String_Node_Str"");
}"
86652,"/** 
 * Sets the colors of the FireworkStar based on the given   {@link DyeColor}s<br> Giving   {@link DyeColor#CUSTOM} will result it the color being ignored.<br>For custom colors use  {@link #setStarColorsRaw}
 * @param fireworkStar the FireworkStar  {@link Item}
 * @param colors the  {@link DyeColor}(s) to set to the FireworkStar
 */
public static void setStarColors(Item fireworkStar,DyeColor... colors){
  if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {
    return;
  }
  if (colors == null || colors.length < 1) {
    return;
  }
  if (verifyTags(fireworkStar,""String_Node_Str"",COMPOUND,true)) {
    ArrayList<Integer> rawColors=new ArrayList<Integer>();
    for (int index=0; index < colors.length; index++) {
      if (colors[index] == null || colors[index] == DyeColor.CUSTOM) {
        continue;
      }
      rawColors.add(colors[index].getDecimalCode());
    }
    int[] rawColorsArray=new int[rawColors.size()];
    for (int index=0; index < rawColors.size(); index++) {
      rawColorsArray[index]=rawColors.get(index).intValue();
    }
    setStarColorsRaw(fireworkStar,rawColorsArray);
  }
}","/** 
 * Sets the colors of the FireworkStar based on the given   {@link DyeColor}s<br> Giving   {@link DyeColor#CUSTOM} will result it the color being ignored.<br>For custom colors use  {@link #setStarColorsRaw}
 * @param fireworkStar the FireworkStar  {@link Item}
 * @param colors the  {@link DyeColor}(s) to set to the FireworkStar
 */
public static void setStarColors(Item fireworkStar,DyeColor... colors){
  if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {
    return;
  }
  if (colors == null || colors.length < 1) {
    return;
  }
  if (verifyTags(fireworkStar,""String_Node_Str"",COMPOUND,true)) {
    ArrayList<Integer> rawColors=new ArrayList<Integer>();
    for (int index=0; index < colors.length; index++) {
      if (colors[index] == null || colors[index] == DyeColor.CUSTOM) {
        continue;
      }
      rawColors.add(colors[index].getDecimalCode());
    }
    int[] rawColorsArray=new int[rawColors.size()];
    for (int index=0; index < rawColors.size(); index++) {
      rawColorsArray[index]=rawColors.get(index);
    }
    setStarColorsRaw(fireworkStar,rawColorsArray);
  }
}"
86653,"/** 
 * Adds a color to the FireworkStar based on   {@link DyeColor}<br> NOTE: If the   {@link DyeColor} is {@link DyeColor#CUSTOM}, no action will be taken
 * @param fireworkStar the FireworkStar  {@link Item}
 * @param colors the  {@link DyeColor}(s) to be added
 */
public static void addStarColors(Item fireworkStar,DyeColor... colors){
  if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {
    return;
  }
  if (colors == null || colors.length < 1) {
    return;
  }
  if (verifyTags(fireworkStar,""String_Node_Str"",COMPOUND,true)) {
    ArrayList<Integer> rawColors=new ArrayList<Integer>();
    for (int index=0; index < colors.length; index++) {
      if (colors[index] == null || colors[index] == DyeColor.CUSTOM) {
        continue;
      }
      rawColors.add(colors[index].getDecimalCode());
    }
    int[] rawColorsArray=new int[rawColors.size()];
    for (int index=0; index < rawColors.size(); index++) {
      rawColorsArray[index]=rawColors.get(index).intValue();
    }
    addStarColorsRaw(fireworkStar,rawColorsArray);
  }
}","/** 
 * Adds a color to the FireworkStar based on   {@link DyeColor}<br> NOTE: If the   {@link DyeColor} is {@link DyeColor#CUSTOM}, no action will be taken
 * @param fireworkStar the FireworkStar  {@link Item}
 * @param colors the  {@link DyeColor}(s) to be added
 */
public static void addStarColors(Item fireworkStar,DyeColor... colors){
  if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {
    return;
  }
  if (colors == null || colors.length < 1) {
    return;
  }
  if (verifyTags(fireworkStar,""String_Node_Str"",COMPOUND,true)) {
    ArrayList<Integer> rawColors=new ArrayList<Integer>();
    for (int index=0; index < colors.length; index++) {
      if (colors[index] == null || colors[index] == DyeColor.CUSTOM) {
        continue;
      }
      rawColors.add(colors[index].getDecimalCode());
    }
    int[] rawColorsArray=new int[rawColors.size()];
    for (int index=0; index < rawColors.size(); index++) {
      rawColorsArray[index]=rawColors.get(index);
    }
    addStarColorsRaw(fireworkStar,rawColorsArray);
  }
}"
86654,"/** 
 * Removes a color from the FireworkStar
 * @param fireworkStar the FireworkStar  {@link Item}
 * @param rawColors the raw color to be removed
 */
public static void removeStarColorsRaw(Item fireworkStar,int... rawColors){
  if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {
    return;
  }
  if (rawColors == null || rawColors.length < 1) {
    return;
  }
  if (verifyTags(fireworkStar,""String_Node_Str"",COMPOUND,false)) {
    int[] setColors=getExplosionTag(fireworkStar).containsKey(""String_Node_Str"") ? getExplosionTag(fireworkStar).getIntArray(""String_Node_Str"") : null;
    if (setColors != null) {
      ArrayList<Integer> colors=new ArrayList<Integer>();
      for (      int setColor : setColors) {
        colors.add(Integer.valueOf(setColor));
      }
      for (      int rawColor : rawColors) {
        colors.remove(Integer.valueOf(rawColor));
      }
      int[] newColors=new int[colors.size()];
      for (int index=0; index < colors.size(); index++) {
        newColors[index]=colors.get(index);
      }
      getExplosionTag(fireworkStar).put(""String_Node_Str"",newColors);
    }
  }
}","/** 
 * Removes a color from the FireworkStar
 * @param fireworkStar the FireworkStar  {@link Item}
 * @param rawColors the raw color to be removed
 */
public static void removeStarColorsRaw(Item fireworkStar,int... rawColors){
  if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {
    return;
  }
  if (rawColors == null || rawColors.length < 1) {
    return;
  }
  if (verifyTags(fireworkStar,""String_Node_Str"",COMPOUND,false)) {
    int[] setColors=getExplosionTag(fireworkStar).containsKey(""String_Node_Str"") ? getExplosionTag(fireworkStar).getIntArray(""String_Node_Str"") : null;
    if (setColors != null) {
      ArrayList<Integer> colors=new ArrayList<Integer>();
      for (      int setColor : setColors) {
        colors.add(setColor);
      }
      for (      int rawColor : rawColors) {
        colors.remove(Integer.valueOf(rawColor));
      }
      int[] newColors=new int[colors.size()];
      for (int index=0; index < colors.size(); index++) {
        newColors[index]=colors.get(index);
      }
      getExplosionTag(fireworkStar).put(""String_Node_Str"",newColors);
    }
  }
}"
86655,"/** 
 * Adds a color to the FireworkStar based on   {@link DyeColor}<br> NOTE: If the   {@link DyeColor} is {@link DyeColor#CUSTOM}, no action will be taken
 * @param fireworkStar the FireworkStar  {@link Item}
 * @param colors the  {@link DyeColor}(s) to be added
 */
public static void addStarFadeColors(Item fireworkStar,DyeColor... colors){
  if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {
    return;
  }
  if (colors == null || colors.length < 1) {
    return;
  }
  if (verifyTags(fireworkStar,""String_Node_Str"",COMPOUND,true)) {
    ArrayList<Integer> rawColors=new ArrayList<Integer>();
    for (int index=0; index < colors.length; index++) {
      if (colors[index] == null || colors[index] == DyeColor.CUSTOM) {
        continue;
      }
      rawColors.add(colors[index].getDecimalCode());
    }
    int[] rawColorsArray=new int[rawColors.size()];
    for (int index=0; index < rawColors.size(); index++) {
      rawColorsArray[index]=rawColors.get(index).intValue();
    }
    addStarFadeColorsRaw(fireworkStar,rawColorsArray);
  }
}","/** 
 * Adds a color to the FireworkStar based on   {@link DyeColor}<br> NOTE: If the   {@link DyeColor} is {@link DyeColor#CUSTOM}, no action will be taken
 * @param fireworkStar the FireworkStar  {@link Item}
 * @param colors the  {@link DyeColor}(s) to be added
 */
public static void addStarFadeColors(Item fireworkStar,DyeColor... colors){
  if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {
    return;
  }
  if (colors == null || colors.length < 1) {
    return;
  }
  if (verifyTags(fireworkStar,""String_Node_Str"",COMPOUND,true)) {
    ArrayList<Integer> rawColors=new ArrayList<Integer>();
    for (int index=0; index < colors.length; index++) {
      if (colors[index] == null || colors[index] == DyeColor.CUSTOM) {
        continue;
      }
      rawColors.add(colors[index].getDecimalCode());
    }
    int[] rawColorsArray=new int[rawColors.size()];
    for (int index=0; index < rawColors.size(); index++) {
      rawColorsArray[index]=rawColors.get(index);
    }
    addStarFadeColorsRaw(fireworkStar,rawColorsArray);
  }
}"
86656,"/** 
 * Removes fade color(s) from the FireworkStar<br> NOTE: if the   {@link DyeColor} is {@link DyeColor#CUSTOM} no actions will be performed
 * @param fireworkStar the FireworkStar  {@link Item}
 * @param colors the  {@link DyeColor}(s) to remove
 */
public static void removeStarFadeColors(Item fireworkStar,DyeColor... colors){
  if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {
    return;
  }
  if (colors == null || colors.length < 1) {
    return;
  }
  if (verifyTags(fireworkStar,""String_Node_Str"",COMPOUND,false)) {
    ArrayList<Integer> rawColors=new ArrayList<Integer>();
    for (int index=0; index < colors.length; index++) {
      if (colors[index] == null || colors[index] == DyeColor.CUSTOM) {
        continue;
      }
      rawColors.add(colors[index].getDecimalCode());
    }
    int[] rawColorsArray=new int[rawColors.size()];
    for (int index=0; index < rawColors.size(); index++) {
      rawColorsArray[index]=rawColors.get(index).intValue();
    }
    removeStarFadeColorsRaw(fireworkStar,rawColorsArray);
  }
}","/** 
 * Removes fade color(s) from the FireworkStar<br> NOTE: if the   {@link DyeColor} is {@link DyeColor#CUSTOM} no actions will be performed
 * @param fireworkStar the FireworkStar  {@link Item}
 * @param colors the  {@link DyeColor}(s) to remove
 */
public static void removeStarFadeColors(Item fireworkStar,DyeColor... colors){
  if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {
    return;
  }
  if (colors == null || colors.length < 1) {
    return;
  }
  if (verifyTags(fireworkStar,""String_Node_Str"",COMPOUND,false)) {
    ArrayList<Integer> rawColors=new ArrayList<Integer>();
    for (int index=0; index < colors.length; index++) {
      if (colors[index] == null || colors[index] == DyeColor.CUSTOM) {
        continue;
      }
      rawColors.add(colors[index].getDecimalCode());
    }
    int[] rawColorsArray=new int[rawColors.size()];
    for (int index=0; index < rawColors.size(); index++) {
      rawColorsArray[index]=rawColors.get(index);
    }
    removeStarFadeColorsRaw(fireworkStar,rawColorsArray);
  }
}"
86657,"/** 
 * Sets the fade color(s) of the FireworkStar based on the given   {@link DyeColor}s<br> Giving   {@link DyeColor#CUSTOM} will result it the color being ignored.<br>For custom colors use  {@link #setStarFadeColorsRaw}
 * @param fireworkStar the FireworkStar  {@link Item}
 * @param colors the  {@link DyeColor}(s) to set to the FireworkStar
 */
public static void setStarFadeColors(Item fireworkStar,DyeColor... colors){
  if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {
    return;
  }
  if (colors == null || colors.length < 1) {
    return;
  }
  if (verifyTags(fireworkStar,""String_Node_Str"",COMPOUND,true)) {
    ArrayList<Integer> rawColors=new ArrayList<Integer>();
    for (int index=0; index < colors.length; index++) {
      if (colors[index] == null || colors[index] == DyeColor.CUSTOM) {
        continue;
      }
      rawColors.add(colors[index].getDecimalCode());
    }
    int[] rawColorsArray=new int[rawColors.size()];
    for (int index=0; index < rawColors.size(); index++) {
      rawColorsArray[index]=rawColors.get(index).intValue();
    }
    setStarFadeColorsRaw(fireworkStar,rawColorsArray);
  }
}","/** 
 * Sets the fade color(s) of the FireworkStar based on the given   {@link DyeColor}s<br> Giving   {@link DyeColor#CUSTOM} will result it the color being ignored.<br>For custom colors use  {@link #setStarFadeColorsRaw}
 * @param fireworkStar the FireworkStar  {@link Item}
 * @param colors the  {@link DyeColor}(s) to set to the FireworkStar
 */
public static void setStarFadeColors(Item fireworkStar,DyeColor... colors){
  if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {
    return;
  }
  if (colors == null || colors.length < 1) {
    return;
  }
  if (verifyTags(fireworkStar,""String_Node_Str"",COMPOUND,true)) {
    ArrayList<Integer> rawColors=new ArrayList<Integer>();
    for (int index=0; index < colors.length; index++) {
      if (colors[index] == null || colors[index] == DyeColor.CUSTOM) {
        continue;
      }
      rawColors.add(colors[index].getDecimalCode());
    }
    int[] rawColorsArray=new int[rawColors.size()];
    for (int index=0; index < rawColors.size(); index++) {
      rawColorsArray[index]=rawColors.get(index);
    }
    setStarFadeColorsRaw(fireworkStar,rawColorsArray);
  }
}"
86658,"/** 
 * Removes a color from the FireworkStar<br> NOTE: if the   {@link DyeColor} is {@link DyeColor#CUSTOM} no actions will be performed
 * @param fireworkStar the FireworkStar  {@link Item}
 * @param colors the  {@link DyeColor} to remove
 */
public static void removeStarColors(Item fireworkStar,DyeColor... colors){
  if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {
    return;
  }
  if (colors == null || colors.length < 1) {
    return;
  }
  if (verifyTags(fireworkStar,""String_Node_Str"",COMPOUND,false)) {
    ArrayList<Integer> rawColors=new ArrayList<Integer>();
    for (int index=0; index < colors.length; index++) {
      if (colors[index] == null || colors[index] == DyeColor.CUSTOM) {
        continue;
      }
      rawColors.add(colors[index].getDecimalCode());
    }
    int[] rawColorsArray=new int[rawColors.size()];
    for (int index=0; index < rawColors.size(); index++) {
      rawColorsArray[index]=rawColors.get(index).intValue();
    }
    removeStarColorsRaw(fireworkStar,rawColorsArray);
  }
}","/** 
 * Removes a color from the FireworkStar<br> NOTE: if the   {@link DyeColor} is {@link DyeColor#CUSTOM} no actions will be performed
 * @param fireworkStar the FireworkStar  {@link Item}
 * @param colors the  {@link DyeColor} to remove
 */
public static void removeStarColors(Item fireworkStar,DyeColor... colors){
  if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {
    return;
  }
  if (colors == null || colors.length < 1) {
    return;
  }
  if (verifyTags(fireworkStar,""String_Node_Str"",COMPOUND,false)) {
    ArrayList<Integer> rawColors=new ArrayList<Integer>();
    for (int index=0; index < colors.length; index++) {
      if (colors[index] == null || colors[index] == DyeColor.CUSTOM) {
        continue;
      }
      rawColors.add(colors[index].getDecimalCode());
    }
    int[] rawColorsArray=new int[rawColors.size()];
    for (int index=0; index < rawColors.size(); index++) {
      rawColorsArray[index]=rawColors.get(index);
    }
    removeStarColorsRaw(fireworkStar,rawColorsArray);
  }
}"
86659,"/** 
 * Removes fase color(s) from the FireworkStar
 * @param fireworkStar the FireworkStar  {@link Item}
 * @param rawColors the raw color to be removed
 */
public static void removeStarFadeColorsRaw(Item fireworkStar,int... rawColors){
  if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {
    return;
  }
  if (rawColors == null || rawColors.length < 1) {
    return;
  }
  if (verifyTags(fireworkStar,""String_Node_Str"",COMPOUND,false)) {
    int[] setColors=getExplosionTag(fireworkStar).containsKey(""String_Node_Str"") ? getExplosionTag(fireworkStar).getIntArray(""String_Node_Str"") : null;
    if (setColors != null) {
      ArrayList<Integer> colors=new ArrayList<Integer>();
      for (      int setColor : setColors) {
        colors.add(Integer.valueOf(setColor));
      }
      for (      int rawColor : rawColors) {
        colors.remove(Integer.valueOf(rawColor));
      }
      int[] newColors=new int[colors.size()];
      for (int index=0; index < colors.size(); index++) {
        newColors[index]=colors.get(index);
      }
      getExplosionTag(fireworkStar).put(""String_Node_Str"",newColors);
    }
  }
}","/** 
 * Removes fase color(s) from the FireworkStar
 * @param fireworkStar the FireworkStar  {@link Item}
 * @param rawColors the raw color to be removed
 */
public static void removeStarFadeColorsRaw(Item fireworkStar,int... rawColors){
  if (fireworkStar == null || fireworkStar.getType() != ItemType.FireworkStar) {
    return;
  }
  if (rawColors == null || rawColors.length < 1) {
    return;
  }
  if (verifyTags(fireworkStar,""String_Node_Str"",COMPOUND,false)) {
    int[] setColors=getExplosionTag(fireworkStar).containsKey(""String_Node_Str"") ? getExplosionTag(fireworkStar).getIntArray(""String_Node_Str"") : null;
    if (setColors != null) {
      ArrayList<Integer> colors=new ArrayList<Integer>();
      for (      int setColor : setColors) {
        colors.add(setColor);
      }
      for (      int rawColor : rawColors) {
        colors.remove(Integer.valueOf(rawColor));
      }
      int[] newColors=new int[colors.size()];
      for (int index=0; index < colors.size(); index++) {
        newColors[index]=colors.get(index);
      }
      getExplosionTag(fireworkStar).put(""String_Node_Str"",newColors);
    }
  }
}"
86660,"/** 
 * Verifies the NBTTags of the   {@link Item} are as expected
 * @param item the  {@link Item} to verify tags for
 * @param tag the name given to the tag
 * @param nbt_type the expected  {@link NBTTagType}
 * @param setTags whether to automatically generate missing tags
 * @return {@code true} if good; {@code false} if not
 */
protected final static boolean verifyTags(Item item,String tag,NBTTagType nbt_type,boolean setTags){
  if (item == null) {
    return false;
  }
  if (!item.hasDataTag()) {
    if (!setTags) {
      return false;
    }
    item.setDataTag(TAG.copy());
  }
  if (!item.getDataTag().containsKey(tag)) {
    if (!setTags) {
      return false;
    }
    item.getDataTag().put(tag,NBT_FACTO.newTagFromType(nbt_type,tag,null));
  }
  if (nbt_type != NBTTagType.getTypeFromId(item.getDataTag().get(tag).getTypeId())) {
    return false;
  }
  return true;
}","/** 
 * Verifies the NBTTags of the   {@link Item} are as expected
 * @param item the  {@link Item} to verify tags for
 * @param tag the name given to the tag
 * @param nbt_type the expected  {@link NBTTagType}
 * @param setTags whether to automatically generate missing tags
 * @return {@code true} if good; {@code false} if not
 */
protected final static boolean verifyTags(Item item,String tag,NBTTagType nbt_type,boolean setTags){
  if (item == null) {
    return false;
  }
  if (!item.hasDataTag()) {
    if (!setTags) {
      return false;
    }
    item.setDataTag(TAG.copy());
  }
  if (!item.getDataTag().containsKey(tag)) {
    if (!setTags) {
      return false;
    }
    item.getDataTag().put(tag,NBT_FACTO.newTagFromType(nbt_type,tag,null));
  }
  return nbt_type != NBTTagType.getTypeFromId(item.getDataTag().get(tag).getTypeId());
}"
86661,"/** 
 * Checks a Item for being a Potion
 * @param potion the  {@link Item} to check
 * @return {@code true} if Potion; {@code false} if not
 */
public static boolean isPotion(Item potion){
  return potion == null ? false : potion.getType() == Potion;
}","/** 
 * Checks a Item for being a Potion
 * @param potion the  {@link Item} to check
 * @return {@code true} if Potion; {@code false} if not
 */
public static boolean isPotion(Item potion){
  return potion != null && potion.getType() == Potion;
}"
86662,"/** 
 * Check if this ban has expired
 * @return {@code true} if expired; {@code false} if not
 */
public boolean isExpired(){
  if (timestamp == -1) {
    return false;
  }
  return ((System.currentTimeMillis() / 1000L) >= timestamp);
}","/** 
 * Check if this ban has expired
 * @return {@code true} if expired; {@code false} if not
 */
public boolean isExpired(){
  return timestamp != -1 && ((System.currentTimeMillis() / 1000L) >= timestamp);
}"
86663,"/** 
 * Take a string and parse an amount of seconds. A String should be formatted like this: number hours|days|months Ex: 1 month and it will return the amount of seconds that contain one month
 * @param ts
 * @return long amount of seconds
 */
private long parseTimeSpec(String ts) throws NumberFormatException {
  String[] split=ts.split(""String_Node_Str"");
  if (split.length < 2) {
    return -1;
  }
  long seconds;
  try {
    seconds=Integer.parseInt(split[0]);
  }
 catch (  NumberFormatException ex) {
    throw ex;
  }
  if (split[1].toLowerCase().startsWith(""String_Node_Str"")) {
    seconds*=3600;
  }
 else   if (split[1].toLowerCase().startsWith(""String_Node_Str"")) {
    seconds*=86400;
  }
 else   if (split[1].toLowerCase().startsWith(""String_Node_Str"")) {
    seconds*=604800;
  }
 else   if (split[1].toLowerCase().startsWith(""String_Node_Str"")) {
    seconds*=2629743;
  }
  return seconds;
}","/** 
 * Take a string and parse an amount of seconds. A String should be formatted like this: number hours|days|months Ex: 1 month and it will return the amount of seconds that contain one month
 * @param ts
 * @return long amount of seconds
 */
private long parseTimeSpec(String ts) throws NumberFormatException {
  String[] split=ts.split(""String_Node_Str"");
  if (split.length < 2) {
    return -1;
  }
  long seconds=Integer.parseInt(split[0]);
  if (split[1].toLowerCase().startsWith(""String_Node_Str"")) {
    seconds*=3600;
  }
 else   if (split[1].toLowerCase().startsWith(""String_Node_Str"")) {
    seconds*=86400;
  }
 else   if (split[1].toLowerCase().startsWith(""String_Node_Str"")) {
    seconds*=604800;
  }
 else   if (split[1].toLowerCase().startsWith(""String_Node_Str"")) {
    seconds*=2629743;
  }
  return seconds;
}"
86664,"public boolean canUseCommand(MessageReceiver user,String command){
  CanaryCommand cmd=commands.get(command);
  if (cmd == null) {
    return false;
  }
  return cmd.canUse(user);
}","public boolean canUseCommand(MessageReceiver user,String command){
  CanaryCommand cmd=commands.get(command);
  return cmd != null && cmd.canUse(user);
}"
86665,"/** 
 * Build a list of commands matching the given string.
 * @param caller
 * @param command
 * @return nullchar separated stringbuilder
 */
public StringBuilder matchCommand(MessageReceiver caller,String command,boolean onlySubcommands){
  int matches=0;
  int maxMatches=4;
  StringBuilder matching=new StringBuilder();
  command=command.toLowerCase();
  for (  String key : commands.keySet()) {
    if (!onlySubcommands) {
      if (key.toLowerCase().equals(command)) {
        if (matching.indexOf(""String_Node_Str"".concat(key)) == -1) {
          if (commands.get(key).canUse(caller) && matches <= maxMatches) {
            ++matches;
            matching.append(""String_Node_Str"").append(key).append(""String_Node_Str"");
          }
        }
      }
 else       if (key.toLowerCase().indexOf(command) != -1) {
        if (matching.indexOf(""String_Node_Str"".concat(key)) == -1) {
          if (commands.get(key).canUse(caller) && matches <= maxMatches) {
            ++matches;
            matching.append(""String_Node_Str"").append(key).append(""String_Node_Str"");
          }
        }
      }
    }
    for (    CanaryCommand cmd : commands.get(key).getSubCommands(new ArrayList<CanaryCommand>())) {
      for (      String alias : cmd.meta.aliases()) {
        if (alias.toLowerCase().equals(command)) {
          if (matching.indexOf(alias) == -1) {
            if (cmd.canUse(caller) && matches <= maxMatches) {
              ++matches;
              matching.append(alias).append(""String_Node_Str"");
            }
          }
        }
 else         if (alias.toLowerCase().indexOf(command) != -1) {
          if (matching.indexOf(alias) == -1) {
            if (cmd.canUse(caller) && matches <= maxMatches) {
              ++matches;
              matching.append(alias).append(""String_Node_Str"");
            }
          }
        }
      }
    }
  }
  return matching;
}","/** 
 * Build a list of commands matching the given string.
 * @param caller
 * @param command
 * @return nullchar separated stringbuilder
 */
public StringBuilder matchCommand(MessageReceiver caller,String command,boolean onlySubcommands){
  int matches=0;
  int maxMatches=4;
  StringBuilder matching=new StringBuilder();
  command=command.toLowerCase();
  for (  String key : commands.keySet()) {
    if (!onlySubcommands) {
      if (key.toLowerCase().equals(command)) {
        if (matching.indexOf(""String_Node_Str"".concat(key)) == -1) {
          if (commands.get(key).canUse(caller) && matches <= maxMatches) {
            ++matches;
            matching.append(""String_Node_Str"").append(key).append(""String_Node_Str"");
          }
        }
      }
 else       if (key.toLowerCase().contains(command)) {
        if (matching.indexOf(""String_Node_Str"".concat(key)) == -1) {
          if (commands.get(key).canUse(caller) && matches <= maxMatches) {
            ++matches;
            matching.append(""String_Node_Str"").append(key).append(""String_Node_Str"");
          }
        }
      }
    }
    for (    CanaryCommand cmd : commands.get(key).getSubCommands(new ArrayList<CanaryCommand>())) {
      for (      String alias : cmd.meta.aliases()) {
        if (alias.toLowerCase().equals(command)) {
          if (matching.indexOf(alias) == -1) {
            if (cmd.canUse(caller) && matches <= maxMatches) {
              ++matches;
              matching.append(alias).append(""String_Node_Str"");
            }
          }
        }
 else         if (alias.toLowerCase().contains(command)) {
          if (matching.indexOf(alias) == -1) {
            if (cmd.canUse(caller) && matches <= maxMatches) {
              ++matches;
              matching.append(alias).append(""String_Node_Str"");
            }
          }
        }
      }
    }
  }
  return matching;
}"
86666,"/** 
 * Remove a command from the command list.
 * @param name
 * @return <tt>true</tt> if the command was removed, <tt>false</tt> otherwise.
 */
public boolean unregisterCommand(String name){
  if (name == null) {
    return false;
  }
  String[] commandchain=name.split(""String_Node_Str"");
  CanaryCommand temp=null;
  for (int i=0; i < commandchain.length; i++) {
    if (i == 0) {
      temp=commands.get(commandchain[i]);
    }
 else {
      if (temp == null) {
        break;
      }
      if (temp.hasSubCommand(commandchain[i])) {
        temp=temp.getSubCommand(commandchain[i]);
      }
 else {
        temp=null;
        break;
      }
    }
  }
  if (temp == null) {
    return false;
  }
 else {
    if (!temp.meta.helpLookup().isEmpty() && Canary.help().hasHelp(temp.meta.helpLookup())) {
      Canary.help().unregisterCommand(temp.owner,temp.meta.helpLookup());
    }
 else {
      Canary.help().unregisterCommand(temp.owner,temp.meta.aliases()[0]);
    }
    if (temp.getParent() != null) {
      temp.getParent().removeSubCommand(temp);
      return true;
    }
 else {
      for (int i=0; i < temp.meta.aliases().length; i++) {
        commands.remove(temp.meta.aliases()[i].toLowerCase());
      }
      return temp != null;
    }
  }
}","/** 
 * Remove a command from the command list.
 * @param name
 * @return <tt>true</tt> if the command was removed, <tt>false</tt> otherwise.
 */
public boolean unregisterCommand(String name){
  if (name == null) {
    return false;
  }
  String[] commandchain=name.split(""String_Node_Str"");
  CanaryCommand temp=null;
  for (int i=0; i < commandchain.length; i++) {
    if (i == 0) {
      temp=commands.get(commandchain[i]);
    }
 else {
      if (temp == null) {
        break;
      }
      if (temp.hasSubCommand(commandchain[i])) {
        temp=temp.getSubCommand(commandchain[i]);
      }
 else {
        temp=null;
        break;
      }
    }
  }
  if (temp == null) {
    return false;
  }
 else {
    if (!temp.meta.helpLookup().isEmpty() && Canary.help().hasHelp(temp.meta.helpLookup())) {
      Canary.help().unregisterCommand(temp.owner,temp.meta.helpLookup());
    }
 else {
      Canary.help().unregisterCommand(temp.owner,temp.meta.aliases()[0]);
    }
    if (temp.getParent() != null) {
      temp.getParent().removeSubCommand(temp);
      return true;
    }
 else {
      for (int i=0; i < temp.meta.aliases().length; i++) {
        commands.remove(temp.meta.aliases()[i].toLowerCase());
      }
      return true;
    }
  }
}"
86667,"public void execute(MessageReceiver caller,String[] parameters){
  CanaryToVanilla converter=new CanaryToVanilla();
  String world=Configuration.getServerConfig().getDefaultWorldName();
  world=world + ""String_Node_Str"";
  if (parameters.length > 1) {
    world=parameters[1];
  }
  if (converter.convert(world) == false) {
    caller.notice(""String_Node_Str"");
  }
 else {
    caller.message(Colors.YELLOW + ""String_Node_Str"");
  }
}","public void execute(MessageReceiver caller,String[] parameters){
  CanaryToVanilla converter=new CanaryToVanilla();
  String world=Configuration.getServerConfig().getDefaultWorldName();
  world=world + ""String_Node_Str"";
  if (parameters.length > 1) {
    world=parameters[1];
  }
  if (!converter.convert(world)) {
    caller.notice(""String_Node_Str"");
  }
 else {
    caller.message(Colors.YELLOW + ""String_Node_Str"");
  }
}"
86668,"private void server(Server server,String[] args){
  if (args.length < 4) {
    server.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str""));
    server.message(Colors.YELLOW + ""String_Node_Str"");
    List<Kit> kits=Canary.kits().getAllKits();
    StringBuilder kitList=new StringBuilder();
    for (    Kit k : kits) {
      kitList.append(k.getName()).append(""String_Node_Str"");
    }
    server.message(kitList.toString());
    return;
  }
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length >= 4) {
      boolean override=args.length > 4 ? args[4].toLowerCase().equals(""String_Node_Str"") : false;
      Player recipient=Canary.getServer().matchPlayer(args[3]);
      if (recipient != null) {
        Kit kit=Canary.kits().getKit(args[2]);
        if (kit != null) {
          if (kit.giveKit(recipient,override)) {
            recipient.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",server.getName()));
            return;
          }
 else {
            server.notice(Translator.translateAndFormat(""String_Node_Str"",recipient.getName()));
            return;
          }
        }
 else {
          server.notice(Translator.translateAndFormat(""String_Node_Str"",args[2]));
          return;
        }
      }
 else {
        server.notice(Translator.translateAndFormat(""String_Node_Str"",args[3]));
        return;
      }
    }
  }
  server.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str""));
}","private void server(Server server,String[] args){
  if (args.length < 4) {
    server.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str""));
    server.message(Colors.YELLOW + ""String_Node_Str"");
    List<Kit> kits=Canary.kits().getAllKits();
    StringBuilder kitList=new StringBuilder();
    for (    Kit k : kits) {
      kitList.append(k.getName()).append(""String_Node_Str"");
    }
    server.message(kitList.toString());
    return;
  }
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length >= 4) {
      boolean override=args.length > 4 && args[4].toLowerCase().equals(""String_Node_Str"");
      Player recipient=Canary.getServer().matchPlayer(args[3]);
      if (recipient != null) {
        Kit kit=Canary.kits().getKit(args[2]);
        if (kit != null) {
          if (kit.giveKit(recipient,override)) {
            recipient.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",server.getName()));
            return;
          }
 else {
            server.notice(Translator.translateAndFormat(""String_Node_Str"",recipient.getName()));
            return;
          }
        }
 else {
          server.notice(Translator.translateAndFormat(""String_Node_Str"",args[2]));
          return;
        }
      }
 else {
        server.notice(Translator.translateAndFormat(""String_Node_Str"",args[3]));
        return;
      }
    }
  }
  server.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str""));
}"
86669,"private void player(Player player,String[] args){
  if (args.length == 1) {
    player.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str""));
    player.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + Translator.translate(""String_Node_Str""));
    player.message(Colors.YELLOW + ""String_Node_Str"");
    List<Kit> kits=Canary.kits().getAllKits();
    StringBuilder kitList=new StringBuilder();
    for (    Kit k : kits) {
      kitList.append(k.getName()).append(""String_Node_Str"");
    }
    player.message(kitList.toString());
    return;
  }
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      player.message(Colors.YELLOW + ""String_Node_Str"");
      List<Kit> kits=Canary.kits().getAllKits();
      StringBuilder kitList=new StringBuilder();
      for (      Kit k : kits) {
        kitList.append(k.getName()).append(""String_Node_Str"");
      }
      player.message(kitList.toString());
      return;
    }
    if (args.length == 3) {
      Kit kit=Canary.kits().getKit(args[2]);
      if (kit != null) {
        if (kit.giveKit(player,false)) {
          player.message(Colors.YELLOW + Translator.translate(""String_Node_Str""));
          return;
        }
 else {
          player.notice(Translator.translate(""String_Node_Str""));
          return;
        }
      }
 else {
        player.notice(Translator.translateAndFormat(""String_Node_Str"",args[2]));
        return;
      }
    }
    if (args.length > 3) {
      if (!player.hasPermission(""String_Node_Str"")) {
        return;
      }
      Player recipient=Canary.getServer().matchPlayer(args[3]);
      if (recipient != null) {
        Kit kit=Canary.kits().getKit(args[2]);
        if (kit != null) {
          if (kit.giveKit(recipient,false)) {
            recipient.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",player.getName()));
            return;
          }
 else {
            player.notice(Translator.translateAndFormat(""String_Node_Str"",recipient.getName()));
            return;
          }
        }
 else {
          player.notice(Translator.translateAndFormat(""String_Node_Str"",args[2]));
          return;
        }
      }
 else {
        player.notice(Translator.translateAndFormat(""String_Node_Str"",args[3]));
        return;
      }
    }
  }
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 4) {
      player.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + Translator.translate(""String_Node_Str""));
      return;
    }
    if (args.length == 4) {
      Kit newKit=new Kit();
      newKit.setContent(new ArrayList<Item>(Arrays.asList(player.getInventory().getContents())));
      newKit.setDelay(Integer.parseInt(args[3]));
      newKit.setName(args[2]);
      Canary.kits().addKit(newKit);
      player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[2]));
      return;
    }
    if (args.length >= 6) {
      if (args[4].equalsIgnoreCase(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
        String[] groups=new String[args.length - 5];
        for (int i=0; i < groups.length; i++) {
          Group g=Canary.usersAndGroups().getGroup(args[i + 5]);
          if (g != null) {
            groups[i]=g.getName();
          }
 else {
            groups[i]=Canary.usersAndGroups().getDefaultGroup().getName();
          }
        }
        Kit newKit=new Kit();
        newKit.setContent(new ArrayList<Item>(Arrays.asList(player.getInventory().getContents())));
        newKit.setDelay(Integer.parseInt(args[3]));
        newKit.setName(args[2]);
        newKit.setGroups(groups);
        Canary.kits().addKit(newKit);
        player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[2]));
        return;
      }
 else       if (args[4].equalsIgnoreCase(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
        String[] players=new String[args.length - 5];
        System.arraycopy(args,5,players,0,players.length);
        Kit newKit=new Kit();
        newKit.setContent(new ArrayList<Item>(Arrays.asList(player.getInventory().getContents())));
        newKit.setDelay(Integer.parseInt(args[3]));
        newKit.setName(args[2]);
        newKit.setOwner(players);
        Canary.kits().addKit(newKit);
        player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[2]));
        return;
      }
 else {
        player.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + Translator.translate(""String_Node_Str""));
        ;
        return;
      }
    }
    player.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + Translator.translate(""String_Node_Str""));
    return;
  }
  player.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str""));
  player.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + Translator.translate(""String_Node_Str""));
  return;
}","private void player(Player player,String[] args){
  if (args.length == 1) {
    player.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str""));
    player.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + Translator.translate(""String_Node_Str""));
    player.message(Colors.YELLOW + ""String_Node_Str"");
    List<Kit> kits=Canary.kits().getAllKits();
    StringBuilder kitList=new StringBuilder();
    for (    Kit k : kits) {
      kitList.append(k.getName()).append(""String_Node_Str"");
    }
    player.message(kitList.toString());
    return;
  }
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 3) {
      player.message(Colors.YELLOW + ""String_Node_Str"");
      List<Kit> kits=Canary.kits().getAllKits();
      StringBuilder kitList=new StringBuilder();
      for (      Kit k : kits) {
        kitList.append(k.getName()).append(""String_Node_Str"");
      }
      player.message(kitList.toString());
      return;
    }
    if (args.length == 3) {
      Kit kit=Canary.kits().getKit(args[2]);
      if (kit != null) {
        if (kit.giveKit(player,false)) {
          player.message(Colors.YELLOW + Translator.translate(""String_Node_Str""));
          return;
        }
 else {
          player.notice(Translator.translate(""String_Node_Str""));
          return;
        }
      }
 else {
        player.notice(Translator.translateAndFormat(""String_Node_Str"",args[2]));
        return;
      }
    }
    if (args.length > 3) {
      if (!player.hasPermission(""String_Node_Str"")) {
        return;
      }
      Player recipient=Canary.getServer().matchPlayer(args[3]);
      if (recipient != null) {
        Kit kit=Canary.kits().getKit(args[2]);
        if (kit != null) {
          if (kit.giveKit(recipient,false)) {
            recipient.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",player.getName()));
            return;
          }
 else {
            player.notice(Translator.translateAndFormat(""String_Node_Str"",recipient.getName()));
            return;
          }
        }
 else {
          player.notice(Translator.translateAndFormat(""String_Node_Str"",args[2]));
          return;
        }
      }
 else {
        player.notice(Translator.translateAndFormat(""String_Node_Str"",args[3]));
        return;
      }
    }
  }
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (args.length < 4) {
      player.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + Translator.translate(""String_Node_Str""));
      return;
    }
    if (args.length == 4) {
      Kit newKit=new Kit();
      newKit.setContent(new ArrayList<Item>(Arrays.asList(player.getInventory().getContents())));
      newKit.setDelay(Integer.parseInt(args[3]));
      newKit.setName(args[2]);
      Canary.kits().addKit(newKit);
      player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[2]));
      return;
    }
    if (args.length >= 6) {
      if (args[4].equalsIgnoreCase(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
        String[] groups=new String[args.length - 5];
        for (int i=0; i < groups.length; i++) {
          Group g=Canary.usersAndGroups().getGroup(args[i + 5]);
          if (g != null) {
            groups[i]=g.getName();
          }
 else {
            groups[i]=Canary.usersAndGroups().getDefaultGroup().getName();
          }
        }
        Kit newKit=new Kit();
        newKit.setContent(new ArrayList<Item>(Arrays.asList(player.getInventory().getContents())));
        newKit.setDelay(Integer.parseInt(args[3]));
        newKit.setName(args[2]);
        newKit.setGroups(groups);
        Canary.kits().addKit(newKit);
        player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[2]));
        return;
      }
 else       if (args[4].equalsIgnoreCase(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
        String[] players=new String[args.length - 5];
        System.arraycopy(args,5,players,0,players.length);
        Kit newKit=new Kit();
        newKit.setContent(new ArrayList<Item>(Arrays.asList(player.getInventory().getContents())));
        newKit.setDelay(Integer.parseInt(args[3]));
        newKit.setName(args[2]);
        newKit.setOwner(players);
        Canary.kits().addKit(newKit);
        player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[2]));
        return;
      }
 else {
        player.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + Translator.translate(""String_Node_Str""));
        ;
        return;
      }
    }
    player.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + Translator.translate(""String_Node_Str""));
    return;
  }
  player.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str""));
  player.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str"") + ""String_Node_Str"" + Translator.translate(""String_Node_Str""));
}"
86670,"/** 
 * Check if we have a permanent disable/enable requests
 * @param params
 * @return
 */
private boolean getPermanentParameter(String[] params){
  String test=params[params.length - 2];
  if (test.equalsIgnoreCase(""String_Node_Str"")) {
    return true;
  }
  return false;
}","/** 
 * Check if we have a permanent disable/enable requests
 * @param params
 * @return
 */
private boolean getPermanentParameter(String[] params){
  return params[params.length - 2].equalsIgnoreCase(""String_Node_Str"");
}"
86671,"private void player(Player player,String[] args){
  Player target=Canary.getServer().matchPlayer(args[1]);
  if (args.length == 2) {
    if (target != null) {
      player.teleportTo(target.getLocation(),TeleportHook.TeleportCause.COMMAND);
      player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",target.getName()));
    }
 else {
      World w=Canary.getServer().getWorldManager().getWorld(args[1],player.hasPermission(""String_Node_Str"") ? true : false);
      if (w == null) {
        player.notice(Translator.translateAndFormat(""String_Node_Str"",args[1]));
      }
      if (player.hasPermission(""String_Node_Str"")) {
        player.teleportTo(w.getSpawnLocation());
      }
    }
  }
 else   if (args.length > 3) {
    try {
      double x=Double.parseDouble(args[1]), y=Double.parseDouble(args[2]), z=Double.parseDouble(args[3]);
      if (args.length > 4 && player.hasPermission(""String_Node_Str"")) {
        try {
          String dTypeName=args[4].replaceAll(""String_Node_Str"",""String_Node_Str"");
          DimensionType dType=DimensionType.fromName(dTypeName);
          String correctedName=dType == null ? args[4] : args[4].replaceAll(""String_Node_Str"",""String_Node_Str"");
          if (dType == null) {
            dType=DimensionType.fromName(""String_Node_Str"");
          }
          World world=Canary.getServer().getWorldManager().getWorld(correctedName,dType,args.length > 5 && player.hasPermission(""String_Node_Str"") ? Boolean.valueOf(args[5]) : false);
          if (world != null) {
            player.teleportTo(x,y,z,world);
          }
 else {
            player.notice(""String_Node_Str"");
          }
        }
 catch (        UnknownWorldException uwex) {
          player.notice(""String_Node_Str"");
        }
      }
 else {
        player.teleportTo(x,y,z);
      }
    }
 catch (    NumberFormatException nfex) {
      player.notice(Translator.translateAndFormat(""String_Node_Str""));
    }
  }
 else   if (target != null) {
    player.teleportTo(target.getLocation(),TeleportHook.TeleportCause.COMMAND);
    player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",target.getName()));
  }
 else {
    player.notice(Translator.translateAndFormat(""String_Node_Str"",args[1]));
  }
}","private void player(Player player,String[] args){
  Player target=Canary.getServer().matchPlayer(args[1]);
  if (args.length == 2) {
    if (target != null) {
      player.teleportTo(target.getLocation(),TeleportHook.TeleportCause.COMMAND);
      player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",target.getName()));
    }
 else {
      World w=Canary.getServer().getWorldManager().getWorld(args[1],player.hasPermission(""String_Node_Str""));
      if (w == null) {
        player.notice(Translator.translateAndFormat(""String_Node_Str"",args[1]));
      }
      if (player.hasPermission(""String_Node_Str"")) {
        player.teleportTo(w.getSpawnLocation());
      }
    }
  }
 else   if (args.length > 3) {
    try {
      double x=Double.parseDouble(args[1]), y=Double.parseDouble(args[2]), z=Double.parseDouble(args[3]);
      if (args.length > 4 && player.hasPermission(""String_Node_Str"")) {
        try {
          String dTypeName=args[4].replaceAll(""String_Node_Str"",""String_Node_Str"");
          DimensionType dType=DimensionType.fromName(dTypeName);
          String correctedName=dType == null ? args[4] : args[4].replaceAll(""String_Node_Str"",""String_Node_Str"");
          if (dType == null) {
            dType=DimensionType.fromName(""String_Node_Str"");
          }
          World world=Canary.getServer().getWorldManager().getWorld(correctedName,dType,args.length > 5 && player.hasPermission(""String_Node_Str"") ? Boolean.valueOf(args[5]) : false);
          if (world != null) {
            player.teleportTo(x,y,z,world);
          }
 else {
            player.notice(""String_Node_Str"");
          }
        }
 catch (        UnknownWorldException uwex) {
          player.notice(""String_Node_Str"");
        }
      }
 else {
        player.teleportTo(x,y,z);
      }
    }
 catch (    NumberFormatException nfex) {
      player.notice(Translator.translateAndFormat(""String_Node_Str""));
    }
  }
 else   if (target != null) {
    player.teleportTo(target.getLocation(),TeleportHook.TeleportCause.COMMAND);
    player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",target.getName()));
  }
 else {
    player.notice(Translator.translateAndFormat(""String_Node_Str"",args[1]));
  }
}"
86672,"private void player(Player player,String[] args){
  World dim=player.getWorld();
  if (args[0].equals(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",dim.getRelativeTime(),dim.getRawTime()));
    return;
  }
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",dim.getRelativeTime(),dim.getRawTime()));
  }
 else   if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setTime(0L);
    player.message(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
 else   if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setTime(13000L);
    player.message(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
 else   if (args[1].matches(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setTime(Long.parseLong(args[1]));
    player.message(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
 else {
    Canary.help().getHelp(player,""String_Node_Str"");
  }
}","private void player(Player player,String[] args){
  World dim=player.getWorld();
  if (args[0].equals(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",dim.getRelativeTime(),dim.getRawTime()));
    return;
  }
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",dim.getRelativeTime(),dim.getRawTime()));
  }
 else   if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setTime(0L);
    player.message(Colors.YELLOW + Translator.translate(""String_Node_Str""));
  }
 else   if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setTime(13000L);
    player.message(Colors.YELLOW + Translator.translate(""String_Node_Str""));
  }
 else   if (args[1].matches(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setTime(Long.parseLong(args[1]));
    player.message(Colors.YELLOW + Translator.translate(""String_Node_Str""));
  }
 else {
    Canary.help().getHelp(player,""String_Node_Str"");
  }
}"
86673,"private void player(Player player,String[] args){
  World dim=player.getWorld();
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    String weather=dim.isRaining() ? ""String_Node_Str"" : ""String_Node_Str"";
    weather=dim.isThundering() ? ""String_Node_Str"" : ""String_Node_Str"";
    player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",weather));
    return;
  }
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setRaining(true);
    dim.setRainTime(new Random().nextInt(15000));
    player.message(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setThundering(true);
    dim.setThunderTime(new Random().nextInt(15000));
    player.message(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
  if (args[1].matches(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setRaining(false);
    dim.setRainTime(0);
    dim.setThundering(false);
    dim.setThunderTime(0);
    player.message(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
 else {
    Canary.help().getHelp(player,""String_Node_Str"");
  }
}","private void player(Player player,String[] args){
  World dim=player.getWorld();
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    String weather=dim.isRaining() ? dim.isThundering() ? ""String_Node_Str"" : ""String_Node_Str"" : ""String_Node_Str"";
    player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",weather));
    return;
  }
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setRaining(true);
    dim.setRainTime(new Random().nextInt(15000));
    player.message(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setThundering(true);
    dim.setThunderTime(new Random().nextInt(15000));
    player.message(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
  if (args[1].matches(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setRaining(false);
    dim.setRainTime(0);
    dim.setThundering(false);
    dim.setThunderTime(0);
    player.message(Colors.YELLOW + Translator.translate(""String_Node_Str""));
  }
 else {
    Canary.help().getHelp(player,""String_Node_Str"");
  }
}"
86674,"public void execute(MessageReceiver caller,String[] args){
  if (caller instanceof Server || caller instanceof CommandBlock) {
    caller.notice(Translator.translate(""String_Node_Str""));
  }
 else {
    Player player=(Player)caller;
    if (Canary.warps().warpExists(args[1]) && !player.hasPermission(""String_Node_Str"")) {
      player.notice(Translator.translate(""String_Node_Str""));
      return;
    }
    if (args.length == 2 && player.hasPermission(""String_Node_Str"")) {
      Warp newWarp=new Warp(player.getLocation(),args[1]);
      Canary.warps().addWarp(newWarp);
      player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
      return;
    }
 else     if (args.length > 3) {
      if (args[2].equalsIgnoreCase(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
        Group[] groups=new Group[args.length - 3];
        for (int i=0; i < groups.length; i++) {
          groups[i]=Canary.usersAndGroups().getGroup(args[i + 3]);
        }
        Warp newWarp=new Warp(player.getLocation(),groups,args[1]);
        Canary.warps().addWarp(newWarp);
        player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
        return;
      }
      if (args[2].equalsIgnoreCase(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
        Warp newWarp=new Warp(player.getLocation(),args[1],args[3],false);
        Canary.warps().addWarp(newWarp);
        player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
        return;
      }
 else {
        Canary.help().getHelp(player,""String_Node_Str"");
        return;
      }
    }
 else {
      Canary.help().getHelp(player,""String_Node_Str"");
      return;
    }
  }
}","public void execute(MessageReceiver caller,String[] args){
  if (caller instanceof Server || caller instanceof CommandBlock) {
    caller.notice(Translator.translate(""String_Node_Str""));
  }
 else {
    Player player=(Player)caller;
    if (Canary.warps().warpExists(args[1]) && !player.hasPermission(""String_Node_Str"")) {
      player.notice(Translator.translate(""String_Node_Str""));
      return;
    }
    if (args.length == 2 && player.hasPermission(""String_Node_Str"")) {
      Warp newWarp=new Warp(player.getLocation(),args[1]);
      Canary.warps().addWarp(newWarp);
      player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
    }
 else     if (args.length > 3) {
      if (args[2].equalsIgnoreCase(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
        Group[] groups=new Group[args.length - 3];
        for (int i=0; i < groups.length; i++) {
          groups[i]=Canary.usersAndGroups().getGroup(args[i + 3]);
        }
        Warp newWarp=new Warp(player.getLocation(),groups,args[1]);
        Canary.warps().addWarp(newWarp);
        player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
        return;
      }
      if (args[2].equalsIgnoreCase(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
        Warp newWarp=new Warp(player.getLocation(),args[1],args[3],false);
        Canary.warps().addWarp(newWarp);
        player.message(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
      }
 else {
        Canary.help().getHelp(player,""String_Node_Str"");
      }
    }
 else {
      Canary.help().getHelp(player,""String_Node_Str"");
    }
  }
}"
86675,"private boolean getBoolean(String key,boolean def){
  Boolean r=boolCache.get(key);
  if (r != null) {
    return r.booleanValue();
  }
  r=cfg.getBoolean(key,def);
  boolCache.put(key,r);
  return r;
}","private boolean getBoolean(String key,boolean def){
  Boolean r=boolCache.get(key);
  if (r != null) {
    return r;
  }
  r=cfg.getBoolean(key,def);
  boolCache.put(key,r);
  return r;
}"
86676,"public boolean convert(String world){
  if (!createFolders(world)) {
    return false;
  }
  if (!downloadMinecraft()) {
    return false;
  }
  if (!createServerProperties(world)) {
    return false;
  }
  if (!createBans()) {
    return false;
  }
  if (!createOps(world)) {
    return false;
  }
  if (!createWhitelist()) {
    return false;
  }
  return true;
}","public boolean convert(String world){
  if (!createFolders(world)) {
    return false;
  }
  if (!downloadMinecraft()) {
    return false;
  }
  if (!createServerProperties(world)) {
    return false;
  }
  if (!createBans()) {
    return false;
  }
  if (!createOps(world)) {
    return false;
  }
  return createWhitelist();
}"
86677,"/** 
 * Checks if the connection pool is full.
 * @return true - pool is full<br>false - pool is not full
 */
private synchronized boolean isConnectionPoolFull(){
  return connectionPool.size() < config.getDatabaseMaxConnections() ? false : true;
}","/** 
 * Checks if the connection pool is full.
 * @return true - pool is full<br>false - pool is not full
 */
private synchronized boolean isConnectionPoolFull(){
  return connectionPool.size() > config.getDatabaseMaxConnections();
}"
86678,"/** 
 * Gets an ItemType according to the given ID and Data values. This will return null if there is no ItemType with this id.
 * @param id the id to get type from
 * @param data the data (damage) to get type from
 * @return the ItemType if found; {@code null} if not
 */
public static ItemType fromIdAndData(int id,int data){
  for (  ItemType type : itemTypes.values()) {
    if (type.id == id && type.data == data) {
      Canary.logDebug(type.id + ""String_Node_Str"" + id+ ""String_Node_Str""+ type.data+ ""String_Node_Str""+ data);
      return type;
    }
  }
  return fromId(id);
}","/** 
 * Gets an ItemType according to the given ID and Data values. This will return null if there is no ItemType with this id.
 * @param id the id to get type from
 * @param data the data (damage) to get type from
 * @return the ItemType if found; {@code null} if not
 */
public static ItemType fromIdAndData(int id,int data){
  for (  ItemType type : itemTypes.values()) {
    if (type.id == id && type.data == data) {
      return type;
    }
  }
  return fromId(id);
}"
86679,"/** 
 * {@inheritDoc}
 */
@Override public boolean unregisterClient(String channel,NetServerHandler handler){
  boolean toRet=false;
synchronized (lock) {
    if (clients.containsKey(channel)) {
      for (      NetServerHandler h : clients.get(channel)) {
        if (h.equals(handler)) {
          clients.get(channel).remove(h);
          toRet=true;
          Canary.logInfo(String.format(""String_Node_Str"" + ""String_Node_Str"",channel,handler.getUser().getName()));
        }
      }
    }
  }
  return toRet;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean unregisterClient(String channel,NetServerHandler handler){
  if (clients.containsKey(channel)) {
synchronized (clients.get(channel)) {
      if (clients.get(channel).remove(handler)) {
        Canary.logInfo(String.format(""String_Node_Str"",channel,handler.getUser().getName()));
        return true;
      }
    }
  }
  return false;
}"
86680,"/** 
 * {@inheritDoc}
 */
@Override public boolean unregisterListeners(Plugin plugin){
  boolean toRet=false;
  for (  List<RegisteredChannelListener> list : listeners.values()) {
    for (    RegisteredChannelListener listener : list) {
      if (listener.getPlugin().equals(plugin)) {
        list.remove(listener);
        toRet=true;
      }
    }
  }
  return toRet;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean unregisterListeners(Plugin plugin){
  boolean toRet=false;
  for (  List<RegisteredChannelListener> list : listeners.values()) {
synchronized (list) {
      for (      RegisteredChannelListener listener : list) {
        if (listener.getPlugin().equals(plugin)) {
          list.remove(listener);
          toRet=true;
        }
      }
    }
  }
  return toRet;
}"
86681,"/** 
 * {@inheritDoc}
 */
@Override public boolean unregisterClientAll(NetServerHandler handler){
  boolean toRet=false;
  for (  String channel : clients.keySet()) {
    this.unregisterClient(channel,handler);
  }
  return toRet;
}","/** 
 * {@inheritDoc}
 */
@Override public boolean unregisterClientAll(NetServerHandler handler){
  boolean toRet=true;
  for (  String channel : clients.keySet()) {
    toRet&=unregisterClient(channel,handler);
  }
  return toRet;
}"
86682,"/** 
 * Add a new Kit to the list of Kits.
 * @param kit Adds the kit instance to the list of kits.
 */
public void addKit(Kit kit){
  if (kitExists(kit)) {
    updateKit(kit);
    return;
  }
  KitDataAccess data=new KitDataAccess();
  data.groups=new ArrayList<String>(Arrays.asList(kit.getGroups()));
  data.items=kit.getItemsAsStringList();
  data.name=kit.getName();
  data.owners=new ArrayList<String>(Arrays.asList(kit.getOwner()));
  data.useDelay=kit.getDelay();
  data.id=0;
  try {
    Database.get().insert(data);
  }
 catch (  DatabaseWriteException e) {
    Canary.logStacktrace(e.getMessage(),e);
  }
}","/** 
 * Add a new Kit to the list of Kits.
 * @param kit Adds the kit instance to the list of kits.
 */
public void addKit(Kit kit){
  if (kitExists(kit)) {
    updateKit(kit);
    return;
  }
  KitDataAccess data=new KitDataAccess();
  data.groups=kit.getGroups() != null ? new ArrayList<String>(Arrays.asList(kit.getGroups())) : new ArrayList<String>();
  data.items=kit.getItemsAsStringList();
  data.name=kit.getName();
  data.owners=kit.getOwner() != null ? new ArrayList<String>(Arrays.asList(kit.getOwner())) : new ArrayList<String>();
  data.useDelay=kit.getDelay();
  data.id=0;
  try {
    Database.get().insert(data);
  }
 catch (  DatabaseWriteException e) {
    Canary.logStacktrace(e.getMessage(),e);
  }
}"
86683,"/** 
 * Get a Kit with the given name
 * @param name Name of the kit to get.
 * @return a Kit object if that Kit was found, null otherwise
 */
public Kit getKit(String name){
  KitDataAccess data=new KitDataAccess();
  try {
    Database.get().load(data,new String[]{""String_Node_Str""},new Object[]{name});
    if (!data.hasData()) {
      return null;
    }
    Kit kit=new Kit();
    kit.setContentFromStrings(data.items);
    kit.setDelay(data.useDelay);
    kit.setGroups((String[])data.groups.toArray());
    kit.setName(data.name);
    kit.setOwner((String[])data.groups.toArray());
    kit.setId(data.id);
    return kit;
  }
 catch (  DatabaseReadException e) {
    Canary.logStacktrace(e.getMessage(),e);
  }
  return null;
}","/** 
 * Get a Kit with the given name
 * @param name Name of the kit to get.
 * @return a Kit object if that Kit was found, null otherwise
 */
public Kit getKit(String name){
  KitDataAccess data=new KitDataAccess();
  try {
    Database.get().load(data,new String[]{""String_Node_Str""},new Object[]{name});
    if (!data.hasData()) {
      return null;
    }
    Kit kit=new Kit();
    kit.setContentFromStrings(data.items);
    kit.setDelay(data.useDelay);
    kit.setGroups(data.groups.toArray(new String[0]));
    kit.setName(data.name);
    kit.setOwner(data.groups.toArray(new String[0]));
    kit.setId(data.id);
    return kit;
  }
 catch (  DatabaseReadException e) {
    Canary.logStacktrace(e.getMessage(),e);
  }
  return null;
}"
86684,"/** 
 * Update a Kit
 * @param kit Update this kit instance to the database.
 */
public void updateKit(Kit kit){
  KitDataAccess data=new KitDataAccess();
  data.groups=new ArrayList<String>(Arrays.asList(kit.getGroups()));
  data.items=kit.getItemsAsStringList();
  data.name=kit.getName();
  data.owners=new ArrayList<String>(Arrays.asList(kit.getOwner()));
  data.useDelay=kit.getDelay();
  try {
    Database.get().update(data,new String[]{""String_Node_Str""},new Object[]{kit.getName()});
  }
 catch (  DatabaseWriteException e) {
    Canary.logStacktrace(e.getMessage(),e);
  }
}","/** 
 * Update a Kit
 * @param kit Update this kit instance to the database.
 */
public void updateKit(Kit kit){
  KitDataAccess data=new KitDataAccess();
  data.groups=kit.getGroups() != null ? new ArrayList<String>(Arrays.asList(kit.getGroups())) : new ArrayList<String>();
  data.items=kit.getItemsAsStringList();
  data.name=kit.getName();
  data.owners=kit.getOwner() != null ? new ArrayList<String>(Arrays.asList(kit.getOwner())) : new ArrayList<String>();
  data.useDelay=kit.getDelay();
  try {
    Database.get().update(data,new String[]{""String_Node_Str""},new Object[]{kit.getName()});
  }
 catch (  DatabaseWriteException e) {
    Canary.logStacktrace(e.getMessage(),e);
  }
}"
86685,"/** 
 * Load and return all kits
 * @return An ArrayList of all kits.
 */
public ArrayList<Kit> loadKits(){
  ArrayList<DataAccess> dataList=new ArrayList<DataAccess>();
  ArrayList<Kit> kits=new ArrayList<Kit>();
  try {
    Database.get().loadAll(new KitDataAccess(),dataList,new String[]{},new Object[]{});
    for (    DataAccess da : dataList) {
      KitDataAccess data=(KitDataAccess)da;
      Kit kit=new Kit();
      kit.setContentFromStrings(data.items);
      kit.setDelay(data.useDelay);
      kit.setGroups((String[])data.groups.toArray());
      kit.setName(data.name);
      kit.setOwner((String[])data.groups.toArray());
      kit.setId(data.id);
      kits.add(kit);
    }
    return kits;
  }
 catch (  DatabaseReadException e) {
    Canary.logStacktrace(e.getMessage(),e);
  }
  return null;
}","/** 
 * Load and return all kits
 * @return An ArrayList of all kits.
 */
public ArrayList<Kit> loadKits(){
  ArrayList<DataAccess> dataList=new ArrayList<DataAccess>();
  ArrayList<Kit> kits=new ArrayList<Kit>();
  try {
    Database.get().loadAll(new KitDataAccess(),dataList,new String[]{},new Object[]{});
    for (    DataAccess da : dataList) {
      KitDataAccess data=(KitDataAccess)da;
      Kit kit=new Kit();
      kit.setContentFromStrings(data.items);
      kit.setDelay(data.useDelay);
      kit.setGroups(data.groups.toArray(new String[0]));
      kit.setName(data.name);
      kit.setOwner(data.groups.toArray(new String[0]));
      kit.setId(data.id);
      kits.add(kit);
    }
    return kits;
  }
 catch (  DatabaseReadException e) {
    Canary.logStacktrace(e.getMessage(),e);
  }
  return null;
}"
86686,"/** 
 * Mostly used for adding the items into the database
 * @return
 */
public ArrayList<String> getItemsAsStringList(){
  ArrayList<String> list=new ArrayList<String>();
  for (  Item i : content) {
    list.add(Canary.serialize(i));
  }
  return list;
}","/** 
 * Mostly used for adding the items into the database
 * @return
 */
public ArrayList<String> getItemsAsStringList(){
  ArrayList<String> list=new ArrayList<String>();
  for (  Item i : content) {
    if (i != null) {
      list.add(Canary.serialize(i));
    }
  }
  return list;
}"
86687,"/** 
 * Get the URL to the database. This is a combination of host, port and database
 * @return
 */
public String getDatabaseUrl(){
  int port=getDatabasePort();
  return ""String_Node_Str"" + getDatabaseHost() + ((port == 0) ? ""String_Node_Str"" : (""String_Node_Str"" + port))+ ""String_Node_Str""+ getDatabaseName();
}","/** 
 * Get the URL to the database. This is a combination of host, port and database
 * @return
 */
public String getDatabaseUrl(String driver){
  int port=getDatabasePort();
  return ""String_Node_Str"" + driver + ""String_Node_Str""+ getDatabaseHost()+ ((port == 0) ? ""String_Node_Str"" : (""String_Node_Str"" + port))+ ""String_Node_Str""+ getDatabaseName();
}"
86688,"/** 
 * Adds a new Connection to the pool.
 */
private void addNewConnectionToPool(){
  Connection connection=null;
  try {
    Class.forName(""String_Node_Str"").newInstance();
    connection=DriverManager.getConnection(config.getDatabaseUrl(),config.getDatabaseUser(),config.getDatabasePassword());
    if (connection.isValid(5)) {
      connectionPool.addLast(connection);
    }
  }
 catch (  SQLException sqle) {
    Canary.logStacktrace(""String_Node_Str"",sqle);
  }
catch (  ClassNotFoundException cnfe) {
    Canary.logStacktrace(""String_Node_Str"",cnfe);
  }
catch (  InstantiationException ie) {
    Canary.logStacktrace(""String_Node_Str"",ie);
  }
catch (  IllegalAccessException iae) {
    Canary.logStacktrace(""String_Node_Str"",iae);
  }
}","/** 
 * Adds a new Connection to the pool.
 */
private void addNewConnectionToPool(){
  Connection connection=null;
  try {
    Class.forName(""String_Node_Str"").newInstance();
    connection=DriverManager.getConnection(config.getDatabaseUrl(""String_Node_Str""),config.getDatabaseUser(),config.getDatabasePassword());
    if (connection.isValid(5)) {
      connectionPool.addLast(connection);
    }
  }
 catch (  SQLException sqle) {
    Canary.logStacktrace(""String_Node_Str"",sqle);
  }
catch (  ClassNotFoundException cnfe) {
    Canary.logStacktrace(""String_Node_Str"",cnfe);
  }
catch (  InstantiationException ie) {
    Canary.logStacktrace(""String_Node_Str"",ie);
  }
catch (  IllegalAccessException iae) {
    Canary.logStacktrace(""String_Node_Str"",iae);
  }
}"
86689,"@Override public void update(DataAccess data,String[] fieldNames,Object[] fieldValues) throws DatabaseWriteException {
  if (!doesEntryExist(data)) {
    return;
  }
  ResultSet rs=null;
  try {
    rs=this.getResultSet(conn,data,fieldNames,fieldValues,true);
    if (rs != null) {
      if (rs.next()) {
        HashMap<Column,Object> columns=data.toDatabaseEntryList();
        Iterator<Column> it=columns.keySet().iterator();
        Column column=null;
        while (it.hasNext()) {
          column=it.next();
          if (column.isList()) {
            rs.updateObject(column.columnName(),getString((List<?>)columns.get(column)));
          }
 else {
            rs.updateObject(column.columnName(),columns.get(column));
          }
        }
        rs.updateRow();
      }
 else {
        throw new DatabaseWriteException(""String_Node_Str"" + data.toString());
      }
    }
  }
 catch (  SQLException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
catch (  DatabaseTableInconsistencyException dtie) {
    Canary.logStacktrace(dtie.getMessage(),dtie);
  }
catch (  DatabaseReadException ex) {
    Logger.getLogger(SQLiteDatabase.class.getName()).log(Level.SEVERE,null,ex);
  }
 finally {
    try {
      PreparedStatement st=rs.getStatement() instanceof PreparedStatement ? (PreparedStatement)rs.getStatement() : null;
      closeRS(rs);
      closePS(st);
    }
 catch (    SQLException ex) {
      Canary.logStacktrace(ex.getMessage(),ex);
    }
  }
}","@Override public void update(DataAccess data,String[] fieldNames,Object[] fieldValues) throws DatabaseWriteException {
  if (!doesEntryExist(data)) {
    return;
  }
  PreparedStatement ps=null;
  try {
    String updateClause=""String_Node_Str"" + data.getName() + ""String_Node_Str"";
    StringBuilder set=new StringBuilder();
    StringBuilder where=new StringBuilder();
    HashMap<Column,Object> columns=data.toDatabaseEntryList();
    Iterator<Column> it=columns.keySet().iterator();
    Column column=null;
    while (it.hasNext()) {
      column=it.next();
      if (where.length() > 0) {
        where.append(""String_Node_Str"").append(column.columnName());
      }
 else {
        where.append(column.columnName());
      }
      set.append(""String_Node_Str"");
      set.append(convert(columns.get(column)));
    }
    for (int index=0; index < fieldNames.length && index < fieldValues.length; index++) {
      if (where.length() > 0) {
        where.append(""String_Node_Str"").append(fieldNames[index]);
      }
 else {
        where.append(fieldNames[index]);
      }
      where.append(""String_Node_Str"");
      where.append(fieldValues[index]);
    }
    ps=conn.prepareStatement(String.format(updateClause,set.toString(),where.toString()));
    ps.execute();
  }
 catch (  SQLException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
catch (  DatabaseTableInconsistencyException dbtiex) {
    Canary.logStacktrace(dbtiex.getMessage(),dbtiex);
  }
 finally {
    closePS(ps);
  }
}"
86690,"@Override public void remove(String tableName,String[] fieldNames,Object[] fieldValues) throws DatabaseWriteException {
  PreparedStatement ps=null;
  try {
    StringBuilder buildState=new StringBuilder(""String_Node_Str"" + tableName + ""String_Node_Str"");
    for (int index=0; index < fieldNames.length; index++) {
      buildState.append(fieldNames[index]);
      buildState.append(""String_Node_Str"");
    }
    ps=conn.prepareStatement(buildState.toString());
    for (int index=0; index < fieldValues.length; index++) {
      ps.setObject(index + 1,fieldValues[index]);
    }
    ps.execute();
  }
 catch (  SQLException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
 finally {
    try {
      ps.close();
    }
 catch (    SQLException ex) {
      Canary.logStacktrace(ex.getMessage(),ex);
    }
  }
}","@Override public void remove(String tableName,String[] fieldNames,Object[] fieldValues) throws DatabaseWriteException {
  PreparedStatement ps=null;
  try {
    StringBuilder buildState=new StringBuilder(""String_Node_Str"" + tableName + ""String_Node_Str"");
    for (int index=0; index < fieldNames.length && index < fieldValues.length; index++) {
      if (buildState.length() > (""String_Node_Str"" + tableName + ""String_Node_Str"").length()) {
        buildState.append(""String_Node_Str"").append(fieldNames[index]);
      }
 else {
        buildState.append(fieldNames[index]);
      }
      buildState.append(""String_Node_Str"");
      buildState.append(fieldValues[index]);
    }
    ps=conn.prepareStatement(buildState.toString());
    ps.execute();
  }
 catch (  SQLException ex) {
    Canary.logStacktrace(ex.getMessage(),ex);
  }
 finally {
    closePS(ps);
  }
}"
86691,"private SQLiteDatabase(){
  File path=new File(""String_Node_Str"");
  if (!path.exists()) {
    path.mkdirs();
  }
  try {
    conn=DriverManager.getConnection(""String_Node_Str"");
  }
 catch (  Exception ex) {
    Canary.logStacktrace(""String_Node_Str"",ex);
  }
}","private SQLiteDatabase(){
  File path=new File(""String_Node_Str"");
  if (!path.exists()) {
    path.mkdirs();
  }
  database=Configuration.getDbConfig().getDatabaseName();
  try {
    conn=DriverManager.getConnection(""String_Node_Str"" + database + ""String_Node_Str"");
  }
 catch (  Exception ex) {
    Canary.logStacktrace(""String_Node_Str"",ex);
  }
}"
86692,"/** 
 * Removes all enchantments from the book
 * @param book the book to remove enchantments from
 * @return true if successful; false if not
 */
public boolean removeAllEnchantments(Item book){
  if (book == null) {
    return false;
  }
  if (book.getType() != ItemType.EnchantedBook) {
    return false;
  }
  if (!book.hasDataTag()) {
    return false;
  }
  if (!book.getDataTag().containsKey(""String_Node_Str"")) {
    return false;
  }
  book.getDataTag().remove(""String_Node_Str"");
  book.setId(ItemType.Book.getId());
  return true;
}","/** 
 * Removes all enchantments from the book
 * @param book the book to remove enchantments from
 * @return true if successful; false if not
 */
public static boolean removeAllEnchantments(Item book){
  if (book == null) {
    return false;
  }
  if (book.getType() != ItemType.EnchantedBook) {
    return false;
  }
  if (!book.hasDataTag()) {
    return false;
  }
  if (!book.getDataTag().containsKey(""String_Node_Str"")) {
    return false;
  }
  book.getDataTag().remove(""String_Node_Str"");
  book.setId(ItemType.Book.getId());
  return true;
}"
86693,"/** 
 * Removes the give enchantments from the book
 * @param book the book to remove enchantments from
 * @param enchantments the enchantments to be removed
 * @return true if successful; false if not
 */
public boolean removeEnchantments(Item book,Enchantment... enchantments){
  if (book == null || enchantments == null || enchantments.length == 0) {
    return false;
  }
  if (book.getType() != ItemType.EnchantedBook) {
    return false;
  }
  if (!book.hasDataTag()) {
    return false;
  }
  if (!book.getDataTag().containsKey(""String_Node_Str"")) {
    return false;
  }
  boolean success=true;
  ListTag<CompoundTag> sto_enchs=book.getDataTag().getListTag(""String_Node_Str"");
  List<Enchantment> enchs=Arrays.asList(enchantments);
  for (int index=0; index < sto_enchs.size(); ) {
    CompoundTag sto_ench=sto_enchs.get(index);
    for (    Enchantment ench : enchs) {
      if (sto_ench.getShort(""String_Node_Str"") == ench.getType().getId() && sto_ench.getShort(""String_Node_Str"") == ench.getLevel()) {
        success&=sto_enchs.remove(index) != null;
      }
    }
  }
  return success;
}","/** 
 * Removes the give enchantments from the book
 * @param book the book to remove enchantments from
 * @param enchantments the enchantments to be removed
 * @return true if successful; false if not
 */
public static boolean removeEnchantments(Item book,Enchantment... enchantments){
  if (book == null || enchantments == null || enchantments.length == 0) {
    return false;
  }
  if (book.getType() != ItemType.EnchantedBook) {
    return false;
  }
  if (!book.hasDataTag()) {
    return false;
  }
  if (!book.getDataTag().containsKey(""String_Node_Str"")) {
    return false;
  }
  boolean success=true;
  ListTag<CompoundTag> sto_enchs=book.getDataTag().getListTag(""String_Node_Str"");
  Iterator<CompoundTag> tagItr=sto_enchs.iterator();
  while (tagItr.hasNext()) {
    CompoundTag sto_ench=tagItr.next();
    boolean found=false;
    for (    Enchantment ench : enchantments) {
      if (sto_ench.getShort(""String_Node_Str"") == ench.getType().getId() && sto_ench.getShort(""String_Node_Str"") == ench.getLevel()) {
        tagItr.remove();
        found=true;
      }
    }
    success&=found;
  }
  return success;
}"
86694,"/** 
 * Disables all plugins, used when shutting down the server.
 */
public void disableAllPlugins(){
  for (  Plugin plugin : plugins.keySet()) {
    disablePlugin(plugin,false);
  }
}","/** 
 * Disables all plugins, used when shutting down the server.
 */
public void disableAllPlugins(){
  for (  Plugin plugin : plugins.keySet()) {
    disablePlugin(plugin,true);
  }
}"
86695,"private boolean enablePlugin(Plugin plugin){
  if (plugin == null) {
    return false;
  }
  if (plugins.get(plugin) == true) {
    return true;
  }
  boolean enabled=false;
  if (plugins.containsKey(plugin)) {
    try {
      enabled=plugin.enable();
    }
 catch (    Throwable t) {
      Canary.logStackTrace(""String_Node_Str"" + plugin.getName(),t);
    }
  }
 else {
    try {
      File file=new File(""String_Node_Str"" + plugin.getJarName());
      CanaryClassLoader loader=new CanaryClassLoader(new URL[]{file.toURI().toURL()},Thread.currentThread().getContextClassLoader());
      String pluginName=plugin.getJarName();
      PropertiesFile manifesto=new PropertiesFile(file.getAbsolutePath(),""String_Node_Str"");
      Class<?> cls=loader.loadClass(plugin.getClass().getName());
      plugin=(Plugin)cls.newInstance();
      plugin.setLoader(loader,manifesto,pluginName);
      enabled=plugin.enable();
    }
 catch (    Throwable t) {
      Canary.logStackTrace(""String_Node_Str"" + plugin.getName(),t);
    }
  }
  if (!enabled) {
    plugins.put(plugin,enabled);
    disablePlugin(plugin,true);
  }
 else {
    Canary.logInfo(""String_Node_Str"" + plugin.getName() + ""String_Node_Str""+ plugin.getVersion());
  }
  plugins.put(plugin,enabled);
  return enabled;
}","private boolean enablePlugin(Plugin plugin){
  if (plugin == null) {
    return false;
  }
  if (plugins.get(plugin) == true) {
    return true;
  }
  boolean enabled=false;
  boolean needNewInstance=false;
  if (plugins.containsKey(plugin)) {
    try {
      if (plugin.isClosed()) {
        needNewInstance=true;
      }
 else {
        enabled=plugin.enable();
      }
    }
 catch (    Throwable t) {
      Canary.logStackTrace(""String_Node_Str"" + plugin.getName(),t);
    }
  }
  if (needNewInstance) {
    try {
      File file=new File(""String_Node_Str"" + plugin.getJarName());
      CanaryClassLoader loader=new CanaryClassLoader(new URL[]{file.toURI().toURL()},Thread.currentThread().getContextClassLoader());
      String pluginName=plugin.getJarName();
      PropertiesFile manifesto=new PropertiesFile(file.getAbsolutePath(),""String_Node_Str"");
      Class<?> cls=loader.loadClass(plugin.getClass().getName());
      plugin=(Plugin)cls.newInstance();
      plugin.setLoader(loader,manifesto,pluginName);
      enabled=plugin.enable();
    }
 catch (    Throwable t) {
      Canary.logStackTrace(""String_Node_Str"" + plugin.getName(),t);
    }
  }
  if (!enabled) {
    plugins.put(plugin,enabled);
    disablePlugin(plugin,true);
  }
 else {
    Canary.logInfo(""String_Node_Str"" + plugin.getName() + ""String_Node_Str""+ plugin.getVersion());
  }
  plugins.put(plugin,enabled);
  return enabled;
}"
86696,"private boolean disablePlugin(Plugin plugin,boolean force){
  if (plugin == null) {
    return false;
  }
  if (plugins.get(plugin) == false && !force) {
    return true;
  }
  plugins.put(plugin,false);
  try {
    plugin.disable();
    Canary.logInfo(""String_Node_Str"" + plugin.getName() + ""String_Node_Str""+ plugin.getVersion());
  }
 catch (  Throwable t) {
    Canary.logStackTrace(""String_Node_Str"" + plugin.getName(),t);
  }
  Canary.hooks().unregisterPluginListeners(plugin);
  Canary.help().unregisterCommands(plugin);
  Canary.commands().unregisterCommands(plugin);
  plugin.getLoader().close();
  return true;
}","private boolean disablePlugin(Plugin plugin,boolean force){
  if (plugin == null) {
    return false;
  }
  if (plugins.get(plugin) == false && !force) {
    return true;
  }
  plugins.put(plugin,false);
  try {
    plugin.disable();
    Canary.logInfo(""String_Node_Str"" + plugin.getName() + ""String_Node_Str""+ plugin.getVersion());
  }
 catch (  Throwable t) {
    Canary.logStackTrace(""String_Node_Str"" + plugin.getName(),t);
  }
  Canary.hooks().unregisterPluginListeners(plugin);
  Canary.help().unregisterCommands(plugin);
  Canary.commands().unregisterCommands(plugin);
  plugin.markClosed();
  plugin.getLoader().close();
  return true;
}"
86697,"/** 
 * Register your CommandListener. This will make all annotated commands available to CanaryMod and the help system. Sub Command relations can only be sorted out after availability. That means if you try to register a command that is a sub-command of something that is not registered yet, it will fail. So make sure you add commands in the correct order.
 * @param listener
 * @param owner
 * @param translator
 * @param force
 * @throws CommandDependencyException
 */
public void registerCommands(final CommandListener listener,CommandOwner owner,LocaleHelper translator,boolean force) throws CommandDependencyException {
  Method[] methods=listener.getClass().getDeclaredMethods();
  ArrayList<CanaryCommand> loadedCommands=new ArrayList<CanaryCommand>();
  for (  final Method method : methods) {
    if (!method.isAnnotationPresent(Command.class)) {
      continue;
    }
    Class<?>[] params=method.getParameterTypes();
    if (params.length != 2) {
      Canary.logWarning(""String_Node_Str"" + method.getName());
      continue;
    }
    if (!(MessageReceiver.class.isAssignableFrom(params[0]) && String[].class.isAssignableFrom(params[1]))) {
      Canary.logWarning(""String_Node_Str"" + method.getName());
      continue;
    }
    Command meta=method.getAnnotation(Command.class);
    CanaryCommand command=new CanaryCommand(meta,owner,translator){
      @Override protected void execute(      MessageReceiver caller,      String[] parameters){
        try {
          method.invoke(listener,new Object[]{caller,parameters});
        }
 catch (        IllegalArgumentException e) {
          Canary.logStackTrace(""String_Node_Str"" + e.getMessage(),e);
        }
catch (        IllegalAccessException e) {
          Canary.logStackTrace(""String_Node_Str"" + e.getMessage(),e);
        }
catch (        InvocationTargetException e) {
          Canary.logStackTrace(""String_Node_Str"" + e.getMessage(),e);
        }
      }
    }
;
    loadedCommands.add(command);
  }
  Collections.sort(loadedCommands);
  for (  CanaryCommand cmd : loadedCommands) {
    if (cmd.meta.parent().isEmpty()) {
      continue;
    }
    String[] cmdp=cmd.meta.parent().split(""String_Node_Str"");
    boolean depMissing=true;
    for (    CanaryCommand parent : loadedCommands) {
      CanaryCommand tmp=null;
      for (int i=0; i < cmdp.length; i++) {
        if (i == 0) {
          for (          String palias : parent.meta.aliases()) {
            if (palias.equals(cmdp[i])) {
              tmp=parent;
            }
          }
        }
 else {
          if (tmp == null) {
            break;
          }
          if (tmp.hasSubCommand(cmdp[i])) {
            tmp=tmp.getSubCommand(cmdp[i]);
          }
 else {
            tmp=null;
            break;
          }
        }
      }
      if (tmp != null) {
        cmd.setParent(tmp);
        depMissing=false;
      }
    }
    if (depMissing) {
      throw new CommandDependencyException(cmd.meta.aliases()[0] + ""String_Node_Str"" + ""String_Node_Str""+ cmd.meta.parent()+ ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
  boolean hasDuplicate=false;
  StringBuilder dupes=null;
  for (  CanaryCommand cmd : loadedCommands) {
    for (    String alias : cmd.meta.aliases()) {
      if (commands.containsKey(alias.toLowerCase()) && cmd.meta.parent().isEmpty() && !force) {
        hasDuplicate=true;
        if (dupes == null) {
          dupes=new StringBuilder();
        }
        dupes.append(alias).append(""String_Node_Str"");
      }
 else {
        if (cmd.meta.parent().isEmpty()) {
          commands.put(alias.toLowerCase(),cmd);
        }
        if (!cmd.meta.helpLookup().isEmpty() && !Canary.help().hasHelp(cmd.meta.helpLookup())) {
          Canary.help().registerCommand(owner,cmd,cmd.meta.helpLookup());
        }
 else {
          Canary.help().registerCommand(owner,cmd);
        }
      }
    }
  }
  if (hasDuplicate && !force) {
    throw new DuplicateCommandException(dupes.toString());
  }
}","/** 
 * Register your CommandListener. This will make all annotated commands available to CanaryMod and the help system. Sub Command relations can only be sorted out after availability. That means if you try to register a command that is a sub-command of something that is not registered yet, it will fail. So make sure you add commands in the correct order.
 * @param listener
 * @param owner
 * @param translator
 * @param force
 * @throws CommandDependencyException
 */
public void registerCommands(final CommandListener listener,CommandOwner owner,LocaleHelper translator,boolean force) throws CommandDependencyException {
  Method[] methods=listener.getClass().getDeclaredMethods();
  ArrayList<CanaryCommand> loadedCommands=new ArrayList<CanaryCommand>();
  for (  final Method method : methods) {
    if (!method.isAnnotationPresent(Command.class)) {
      continue;
    }
    Class<?>[] params=method.getParameterTypes();
    if (params.length != 2) {
      Canary.logWarning(""String_Node_Str"" + method.getName());
      continue;
    }
    if (!(MessageReceiver.class.isAssignableFrom(params[0]) && String[].class.isAssignableFrom(params[1]))) {
      Canary.logWarning(""String_Node_Str"" + method.getName());
      continue;
    }
    Command meta=method.getAnnotation(Command.class);
    CanaryCommand command=new CanaryCommand(meta,owner,translator){
      @Override protected void execute(      MessageReceiver caller,      String[] parameters){
        try {
          method.invoke(listener,new Object[]{caller,parameters});
        }
 catch (        IllegalArgumentException e) {
          Canary.logStackTrace(""String_Node_Str"" + e.getMessage(),e);
        }
catch (        IllegalAccessException e) {
          Canary.logStackTrace(""String_Node_Str"" + e.getMessage(),e);
        }
catch (        InvocationTargetException e) {
          Canary.logStackTrace(""String_Node_Str"" + e.getMessage(),e);
        }
      }
    }
;
    loadedCommands.add(command);
  }
  Collections.sort(loadedCommands);
  for (  CanaryCommand cmd : loadedCommands) {
    if (cmd.meta.parent().isEmpty()) {
      continue;
    }
    String[] cmdp=cmd.meta.parent().split(""String_Node_Str"");
    boolean depMissing=true;
    for (    CanaryCommand parent : loadedCommands) {
      CanaryCommand tmp=null;
      for (int i=0; i < cmdp.length; i++) {
        if (i == 0) {
          for (          String palias : parent.meta.aliases()) {
            if (palias.equals(cmdp[i])) {
              tmp=parent;
            }
          }
        }
 else {
          if (tmp == null) {
            break;
          }
          if (tmp.hasSubCommand(cmdp[i])) {
            tmp=tmp.getSubCommand(cmdp[i]);
          }
 else {
            tmp=null;
            break;
          }
        }
      }
      if (tmp != null) {
        cmd.setParent(tmp);
        depMissing=false;
      }
    }
    for (    CanaryCommand parent : commands.values()) {
      CanaryCommand tmp=null;
      for (int i=0; i < cmdp.length; i++) {
        if (i == 0) {
          for (          String palias : parent.meta.aliases()) {
            if (palias.equals(cmdp[i])) {
              tmp=parent;
            }
          }
        }
 else {
          if (tmp == null) {
            break;
          }
          if (tmp.hasSubCommand(cmdp[i])) {
            tmp=tmp.getSubCommand(cmdp[i]);
          }
 else {
            tmp=null;
            break;
          }
        }
      }
      if (tmp != null) {
        cmd.setParent(tmp);
        depMissing=false;
      }
    }
    if (depMissing) {
      throw new CommandDependencyException(cmd.meta.aliases()[0] + ""String_Node_Str"" + ""String_Node_Str""+ cmd.meta.parent()+ ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
  boolean hasDuplicate=false;
  StringBuilder dupes=null;
  for (  CanaryCommand cmd : loadedCommands) {
    for (    String alias : cmd.meta.aliases()) {
      boolean currentIsDupe=false;
      if (commands.containsKey(alias.toLowerCase()) && cmd.meta.parent().isEmpty() && !force) {
        hasDuplicate=true;
        currentIsDupe=true;
        if (dupes == null) {
          dupes=new StringBuilder();
        }
        dupes.append(alias).append(""String_Node_Str"");
      }
      if (!currentIsDupe || (currentIsDupe && force)) {
        if (cmd.meta.parent().isEmpty()) {
          commands.put(alias.toLowerCase(),cmd);
        }
        if (!cmd.meta.helpLookup().isEmpty() && !Canary.help().hasHelp(cmd.meta.helpLookup())) {
          Canary.help().registerCommand(owner,cmd,cmd.meta.helpLookup());
        }
 else {
          Canary.help().registerCommand(owner,cmd);
        }
      }
    }
  }
  if (hasDuplicate && !force) {
    throw new DuplicateCommandException(dupes.toString());
  }
}"
86698,"/** 
 * Register an already implemented CanaryCommand to the help system. This will automatically update the help system as well.
 * @param com
 * @param owner
 * @param force force overriding
 * @throws CommandDependencyException
 */
public void registerCommand(CanaryCommand com,CommandOwner owner,boolean force) throws CommandDependencyException {
  for (  CanaryCommand parent : commands.values()) {
    if (com.meta.parent().isEmpty()) {
      continue;
    }
    boolean depMissing=true;
    CanaryCommand tmp=null;
    String[] cmdp=com.meta.parent().split(""String_Node_Str"");
    for (int i=0; i < cmdp.length; i++) {
      if (i == 0) {
        for (        String palias : parent.meta.aliases()) {
          if (palias.equals(cmdp[i])) {
            tmp=parent;
          }
        }
      }
 else {
        if (tmp == null) {
          break;
        }
        if (tmp.hasSubCommand(cmdp[i])) {
          tmp=tmp.getSubCommand(cmdp[i]);
        }
 else {
          tmp=null;
          break;
        }
      }
    }
    if (tmp != null) {
      com.setParent(tmp);
      depMissing=false;
    }
    if (depMissing) {
      throw new CommandDependencyException(com.meta.aliases()[0] + ""String_Node_Str"" + ""String_Node_Str""+ com.meta.parent()+ ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
  boolean hasDuplicate=false;
  StringBuilder dupes=null;
  for (  String alias : com.meta.aliases()) {
    if (commands.containsKey(alias.toLowerCase()) && com.meta.parent().isEmpty() && !force) {
      hasDuplicate=true;
      if (dupes == null) {
        dupes=new StringBuilder();
      }
      dupes.append(alias).append(""String_Node_Str"");
    }
 else {
      if (com.meta.parent().isEmpty()) {
        commands.put(alias.toLowerCase(),com);
      }
      if (!com.meta.helpLookup().isEmpty() && !Canary.help().hasHelp(com.meta.helpLookup())) {
        Canary.help().registerCommand(owner,com,com.meta.helpLookup());
      }
 else {
        Canary.help().registerCommand(owner,com);
      }
    }
  }
  if (hasDuplicate && !force) {
    throw new DuplicateCommandException(dupes.toString());
  }
}","/** 
 * Register an already implemented CanaryCommand to the help system. This will automatically update the help system as well.
 * @param com
 * @param owner
 * @param force force overriding
 * @throws CommandDependencyException
 */
public void registerCommand(CanaryCommand com,CommandOwner owner,boolean force) throws CommandDependencyException {
  for (  CanaryCommand parent : commands.values()) {
    if (com.meta.parent().isEmpty()) {
      continue;
    }
    boolean depMissing=true;
    CanaryCommand tmp=null;
    String[] cmdp=com.meta.parent().split(""String_Node_Str"");
    for (int i=0; i < cmdp.length; i++) {
      if (i == 0) {
        for (        String palias : parent.meta.aliases()) {
          if (palias.equals(cmdp[i])) {
            tmp=parent;
          }
        }
      }
 else {
        if (tmp == null) {
          break;
        }
        if (tmp.hasSubCommand(cmdp[i])) {
          tmp=tmp.getSubCommand(cmdp[i]);
        }
 else {
          tmp=null;
          break;
        }
      }
    }
    if (tmp != null) {
      com.setParent(tmp);
      depMissing=false;
    }
    if (depMissing) {
      throw new CommandDependencyException(com.meta.aliases()[0] + ""String_Node_Str"" + ""String_Node_Str""+ com.meta.parent()+ ""String_Node_Str""+ ""String_Node_Str"");
    }
  }
  boolean hasDuplicate=false;
  StringBuilder dupes=null;
  for (  String alias : com.meta.aliases()) {
    boolean currentIsDupe=false;
    if (commands.containsKey(alias.toLowerCase()) && com.meta.parent().isEmpty() && !force) {
      hasDuplicate=true;
      currentIsDupe=true;
      if (dupes == null) {
        dupes=new StringBuilder();
      }
      dupes.append(alias).append(""String_Node_Str"");
    }
    if (!currentIsDupe || (currentIsDupe && force)) {
      if (com.meta.parent().isEmpty()) {
        commands.put(alias.toLowerCase(),com);
      }
      if (!com.meta.helpLookup().isEmpty() && !Canary.help().hasHelp(com.meta.helpLookup())) {
        Canary.help().registerCommand(owner,com,com.meta.helpLookup());
      }
 else {
        Canary.help().registerCommand(owner,com);
      }
    }
  }
  if (hasDuplicate && !force) {
    throw new DuplicateCommandException(dupes.toString());
  }
}"
86699,"/** 
 * Disables water routes on this path.
 */
public void disableWaterPathing();","/** 
 * Disables water routes on this path.
 */
@Deprecated public void disableWaterPathing();"
86700,"/** 
 * Enables water routes on this path.
 */
public void enableWaterPathing();","/** 
 * Enables water routes on this path.
 */
@Deprecated public void enableWaterPathing();"
86701,"/** 
 * Updates an already existing element in the document. IMPORTANT: the lengths of fields and content array must have been checked before this method is called!
 * @param file
 * @param table
 * @param fields
 * @param values
 * @throws IOException
 * @throws DatabaseTableInconsistencyException
 * @throws DatabaseWriteException
 */
private void updateData(File file,Document table,DataAccess data,String[] fields,Object[] values) throws IOException, DatabaseTableInconsistencyException, DatabaseWriteException {
  boolean hasUpdated=false;
  for (  Element element : table.getRootElement().getChildren()) {
    int equalFields=0;
    for (int i=0; i < fields.length; ++i) {
      Element child=element.getChild(fields[i]);
      if (child != null) {
        if (child.getText().equals(String.valueOf(values[i]))) {
          equalFields++;
        }
      }
    }
    if (equalFields != fields.length) {
      continue;
    }
    if (data.isInconsistent()) {
      throw new DatabaseTableInconsistencyException(""String_Node_Str"");
    }
    HashMap<Column,Object> dataSet=data.toDatabaseEntryList();
    for (    Column column : dataSet.keySet()) {
      Element child=element.getChild(column.columnName());
      if (child == null) {
        throw new DatabaseTableInconsistencyException(""String_Node_Str"" + column.columnName() + ""String_Node_Str"");
      }
      if (column.autoIncrement()) {
        continue;
      }
      addToElement(table,child,dataSet.get(column),column);
      hasUpdated=true;
    }
  }
  if (hasUpdated) {
    file.setWritable(true);
    RandomAccessFile f=new RandomAccessFile(file,""String_Node_Str"");
    f.getChannel().lock();
    OutputStream out=new FileOutputStream(file,false);
    xmlSerializer.output(table,out);
    f.close();
    out.close();
  }
 else {
    insert(data);
  }
}","/** 
 * Updates an already existing element in the document. IMPORTANT: the lengths of fields and content array must have been checked before this method is called!
 * @param file
 * @param table
 * @param fields
 * @param values
 * @throws IOException
 * @throws DatabaseTableInconsistencyException
 * @throws DatabaseWriteException
 */
private void updateData(File file,Document table,DataAccess data,String[] fields,Object[] values) throws IOException, DatabaseTableInconsistencyException, DatabaseWriteException {
  boolean hasUpdated=false;
  for (  Element element : table.getRootElement().getChildren()) {
    int equalFields=0;
    for (int i=0; i < fields.length; ++i) {
      Element child=element.getChild(fields[i]);
      if (child != null) {
        if (child.getText().equals(String.valueOf(values[i]))) {
          equalFields++;
        }
      }
    }
    if (equalFields != fields.length) {
      continue;
    }
    if (data.isInconsistent()) {
      throw new DatabaseTableInconsistencyException(""String_Node_Str"");
    }
    HashMap<Column,Object> dataSet=data.toDatabaseEntryList();
    for (    Column column : dataSet.keySet()) {
      Element child=element.getChild(column.columnName());
      if (child == null) {
        throw new DatabaseTableInconsistencyException(""String_Node_Str"" + column.columnName() + ""String_Node_Str"");
      }
      if (column.autoIncrement()) {
        continue;
      }
      addToElement(table,child,dataSet.get(column),column);
      hasUpdated=true;
    }
  }
  if (hasUpdated) {
    file.setWritable(true);
    RandomAccessFile f=new RandomAccessFile(file,""String_Node_Str"");
    f.getChannel().lock();
    f.setLength(0);
    FileWriter writer=new FileWriter(f.getFD());
    xmlSerializer.output(table,writer);
    f.close();
  }
 else {
    insert(data);
  }
}"
86702,"@Override public void updateSchema(DataAccess data) throws DatabaseWriteException {
  File file=new File(""String_Node_Str"" + data.getName() + ""String_Node_Str"");
  if (!file.exists()) {
    try {
      file.createNewFile();
      initFile(file,data.getName());
    }
 catch (    IOException e) {
      throw new DatabaseWriteException(e.getMessage());
    }
  }
  try {
    FileInputStream in=new FileInputStream(file);
    Document table=fileBuilder.build(in);
    in.close();
    HashSet<Column> tableLayout=data.getTableLayout();
    for (    Element element : table.getRootElement().getChildren()) {
      addFields(element,tableLayout);
      removeFields(element,tableLayout);
    }
    file.setWritable(true);
    RandomAccessFile f=new RandomAccessFile(file,""String_Node_Str"");
    f.getChannel().lock();
    OutputStream out=new FileOutputStream(file,false);
    xmlSerializer.output(table,out);
    f.close();
  }
 catch (  JDOMException e) {
    throw new DatabaseWriteException(e.getMessage());
  }
catch (  IOException e) {
    throw new DatabaseWriteException(e.getMessage());
  }
catch (  DatabaseTableInconsistencyException e) {
    throw new DatabaseWriteException(e.getMessage());
  }
}","@Override public void updateSchema(DataAccess data) throws DatabaseWriteException {
  File file=new File(""String_Node_Str"" + data.getName() + ""String_Node_Str"");
  if (!file.exists()) {
    try {
      file.createNewFile();
      initFile(file,data.getName());
    }
 catch (    IOException e) {
      throw new DatabaseWriteException(e.getMessage());
    }
  }
  try {
    FileInputStream in=new FileInputStream(file);
    Document table=fileBuilder.build(in);
    in.close();
    HashSet<Column> tableLayout=data.getTableLayout();
    for (    Element element : table.getRootElement().getChildren()) {
      addFields(element,tableLayout);
      removeFields(element,tableLayout);
    }
    file.setWritable(true);
    RandomAccessFile f=new RandomAccessFile(file,""String_Node_Str"");
    f.getChannel().lock();
    FileWriter out=new FileWriter(f.getFD());
    xmlSerializer.output(table,out);
    f.close();
  }
 catch (  JDOMException e) {
    throw new DatabaseWriteException(e.getMessage());
  }
catch (  IOException e) {
    throw new DatabaseWriteException(e.getMessage());
  }
catch (  DatabaseTableInconsistencyException e) {
    throw new DatabaseWriteException(e.getMessage());
  }
}"
86703,"/** 
 * Inserts data into the XML file. This does NOT update data. It will create a new entry if there isn't the exact same already present
 * @param file
 * @param data
 * @param dbTable
 * @throws IOException
 * @throws DatabaseTableInconsistencyException
 */
private void insertData(File file,DataAccess data,Document dbTable) throws IOException, DatabaseTableInconsistencyException {
  HashMap<Column,Object> entry=data.toDatabaseEntryList();
  if (data.isInconsistent()) {
    throw new DatabaseTableInconsistencyException(""String_Node_Str"");
  }
  Element set=new Element(""String_Node_Str"");
  for (  Column column : entry.keySet()) {
    Element col=new Element(column.columnName());
    col.setAttribute(""String_Node_Str"",String.valueOf(column.autoIncrement()));
    col.setAttribute(""String_Node_Str"",column.dataType().name());
    col.setAttribute(""String_Node_Str"",column.columnType().name());
    col.setAttribute(""String_Node_Str"",String.valueOf(column.isList()));
    addToElement(dbTable,col,entry.get(column),column);
    set.addContent(col);
    boolean foundDupe=false;
    for (    Element c : dbTable.getRootElement().getChildren()) {
      if (elementEquals(set,c)) {
        foundDupe=true;
      }
    }
    if (!foundDupe) {
    }
  }
  dbTable.getRootElement().addContent(set);
  file.setWritable(true);
  RandomAccessFile f=new RandomAccessFile(file,""String_Node_Str"");
  f.getChannel().lock();
  OutputStream out=new FileOutputStream(file,false);
  xmlSerializer.output(dbTable,out);
  f.close();
  out.close();
}","/** 
 * Inserts data into the XML file. This does NOT update data. It will create a new entry if there isn't the exact same already present
 * @param file
 * @param data
 * @param dbTable
 * @throws IOException
 * @throws DatabaseTableInconsistencyException
 */
private void insertData(File file,DataAccess data,Document dbTable) throws IOException, DatabaseTableInconsistencyException {
  HashMap<Column,Object> entry=data.toDatabaseEntryList();
  if (data.isInconsistent()) {
    throw new DatabaseTableInconsistencyException(""String_Node_Str"");
  }
  Element set=new Element(""String_Node_Str"");
  for (  Column column : entry.keySet()) {
    Element col=new Element(column.columnName());
    col.setAttribute(""String_Node_Str"",String.valueOf(column.autoIncrement()));
    col.setAttribute(""String_Node_Str"",column.dataType().name());
    col.setAttribute(""String_Node_Str"",column.columnType().name());
    col.setAttribute(""String_Node_Str"",String.valueOf(column.isList()));
    addToElement(dbTable,col,entry.get(column),column);
    set.addContent(col);
    boolean foundDupe=false;
    for (    Element c : dbTable.getRootElement().getChildren()) {
      if (elementEquals(set,c)) {
        foundDupe=true;
      }
    }
    if (!foundDupe) {
    }
  }
  dbTable.getRootElement().addContent(set);
  file.setWritable(true);
  RandomAccessFile f=new RandomAccessFile(file,""String_Node_Str"");
  f.getChannel().lock();
  f.setLength(0);
  FileWriter writer=new FileWriter(f.getFD());
  xmlSerializer.output(dbTable,writer);
  f.close();
}"
86704,"private void initFile(File file,String rootName) throws IOException {
  Document doc=new Document();
  doc.setRootElement(new Element(rootName));
  file.setWritable(true);
  RandomAccessFile f=new RandomAccessFile(file,""String_Node_Str"");
  f.getChannel().lock();
  OutputStream out=new FileOutputStream(file,false);
  xmlSerializer.output(doc,out);
  f.close();
  out.close();
}","private void initFile(File file,String rootName) throws IOException {
  Document doc=new Document();
  doc.setRootElement(new Element(rootName));
  file.setWritable(true);
  RandomAccessFile f=new RandomAccessFile(file,""String_Node_Str"");
  f.getChannel().lock();
  f.setLength(0);
  FileWriter writer=new FileWriter(f.getFD());
  xmlSerializer.output(doc,writer);
  f.close();
}"
86705,"private void removeData(File file,Document table,String[] fields,Object[] values) throws IOException, DatabaseTableInconsistencyException {
  for (  Element element : table.getRootElement().getChildren()) {
    int equalFields=0;
    for (int i=0; i < fields.length; ++i) {
      Element child=element.getChild(fields[i]);
      if (child != null) {
        if (child.getText().equals(String.valueOf(values[i]))) {
          equalFields++;
        }
      }
    }
    if (equalFields != fields.length) {
      continue;
    }
    table.getRootElement().removeContent(element);
    element.detach();
  }
  file.setWritable(true);
  RandomAccessFile f=new RandomAccessFile(file.getPath(),""String_Node_Str"");
  f.getChannel().lock();
  OutputStream out=new FileOutputStream(file,false);
  xmlSerializer.output(table,out);
  out.close();
  f.close();
}","private void removeData(File file,Document table,String[] fields,Object[] values) throws IOException, DatabaseTableInconsistencyException {
  for (  Element element : table.getRootElement().getChildren()) {
    int equalFields=0;
    for (int i=0; i < fields.length; ++i) {
      Element child=element.getChild(fields[i]);
      if (child != null) {
        if (child.getText().equals(String.valueOf(values[i]))) {
          equalFields++;
        }
      }
    }
    if (equalFields != fields.length) {
      continue;
    }
    table.getRootElement().removeContent(element);
    element.detach();
  }
  file.setWritable(true);
  RandomAccessFile f=new RandomAccessFile(file.getPath(),""String_Node_Str"");
  f.getChannel().lock();
  f.setLength(0);
  FileWriter writer=new FileWriter(f.getFD());
  xmlSerializer.output(table,writer);
  f.close();
}"
86706,"/** 
 * Creates a recursively created list of all subcommands and their subcommands etc etc
 * @param list
 * @return
 */
public ArrayList<CanaryCommand> getSubCommands(ArrayList<CanaryCommand> list){
  if (parent != null) {
    list.add(this);
  }
  for (  CanaryCommand cmd : subcommands) {
    cmd.getSubCommands(list);
  }
  return list;
}","/** 
 * Returns the list of subcommands.
 * @return
 */
public ArrayList<CanaryCommand> getSubCommands(){
  return subcommands;
}"
86707,"@Command(aliases={""String_Node_Str"",""String_Node_Str""},description=""String_Node_Str"",permissions={""String_Node_Str""},toolTip=""String_Node_Str"",min=2) public void emoteCommand(MessageReceiver caller,String[] parameters){
  new EmoteChat().execute(caller,parameters);
}","@Command(aliases={""String_Node_Str""},description=""String_Node_Str"",permissions={""String_Node_Str"",""String_Node_Str""},toolTip=""String_Node_Str"",min=2) public void emoteCommand(MessageReceiver caller,String[] parameters){
  new EmoteChat().execute(caller,parameters);
}"
86708,"/** 
 * Register your CommandListener. This will make all annotated commands available to CanaryMod and the help system. Sub Command relations can only be sorted out after availability. That means if you try to register a command that is a sub-command of something that is not registered yet, it will fail. So make sure you add commands in the correct order.
 * @param listener
 * @param owner
 * @param translator
 * @param force
 * @throws CommandDependencyException
 */
public void registerCommands(final CommandListener listener,CommandOwner owner,LocaleHelper translator,boolean force) throws CommandDependencyException {
  Method[] methods=listener.getClass().getDeclaredMethods();
  ArrayList<CanaryCommand> loadedCommands=new ArrayList<CanaryCommand>();
  for (  final Method method : methods) {
    if (!method.isAnnotationPresent(Command.class)) {
      continue;
    }
    Class<?>[] params=method.getParameterTypes();
    if (params.length != 2) {
      Canary.logWarning(""String_Node_Str"" + method.getName());
      continue;
    }
    if (!(MessageReceiver.class.isAssignableFrom(params[0]) && String[].class.isAssignableFrom(params[1]))) {
      Canary.logWarning(""String_Node_Str"" + method.getName());
      continue;
    }
    Command meta=method.getAnnotation(Command.class);
    CanaryCommand command=new CanaryCommand(meta,owner,translator){
      @Override protected void execute(      MessageReceiver caller,      String[] parameters){
        try {
          method.invoke(listener,new Object[]{caller,parameters});
        }
 catch (        IllegalArgumentException e) {
          Canary.logStackTrace(""String_Node_Str"" + e.getMessage(),e);
        }
catch (        IllegalAccessException e) {
          Canary.logStackTrace(""String_Node_Str"" + e.getMessage(),e);
        }
catch (        InvocationTargetException e) {
          Canary.logStackTrace(""String_Node_Str"" + e.getMessage(),e);
        }
      }
    }
;
    loadedCommands.add(command);
  }
  for (  CanaryCommand cmd : loadedCommands) {
    if (cmd.meta.parent().isEmpty()) {
      continue;
    }
    String[] cmdp=cmd.meta.parent().split(""String_Node_Str"");
    boolean depMissing=true;
    for (    CanaryCommand parent : loadedCommands) {
      CanaryCommand tmp=null;
      for (int i=0; i < cmdp.length; i++) {
        if (i == 0) {
          for (          String palias : parent.meta.aliases()) {
            if (palias.equals(cmdp[i])) {
              tmp=parent;
            }
          }
        }
 else {
          if (tmp == null) {
            break;
          }
          if (tmp.hasSubCommand(cmdp[i])) {
            tmp=tmp.getSubCommand(cmdp[i]);
          }
 else {
            tmp=null;
            break;
          }
        }
      }
      if (tmp != null) {
        cmd.setParent(tmp);
        depMissing=false;
      }
    }
    if (depMissing) {
      throw new CommandDependencyException(cmd.meta.aliases()[0] + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  boolean hasDuplicate=false;
  StringBuilder dupes=null;
  for (  CanaryCommand cmd : loadedCommands) {
    for (    String alias : cmd.meta.aliases()) {
      if (commands.containsKey(alias.toLowerCase()) && cmd.meta.parent().isEmpty() && !force) {
        hasDuplicate=true;
        if (dupes == null) {
          dupes=new StringBuilder();
        }
        dupes.append(alias).append(""String_Node_Str"");
      }
 else {
        if (cmd.meta.parent().isEmpty()) {
          commands.put(alias.toLowerCase(),cmd);
        }
        if (!cmd.meta.helpLookup().isEmpty() && !Canary.help().hasHelp(cmd.meta.helpLookup())) {
          Canary.help().registerCommand(owner,cmd.meta.helpLookup(),cmd.getLocaleDescription(),cmd.meta.toolTip(),cmd.meta.permissions(),null);
        }
 else {
          Canary.help().registerCommand(owner,alias,cmd.getLocaleDescription(),cmd.meta.toolTip(),cmd.meta.permissions(),null);
        }
      }
    }
  }
  if (hasDuplicate) {
    throw new DuplicateCommandException(dupes.toString());
  }
}","/** 
 * Register your CommandListener. This will make all annotated commands available to CanaryMod and the help system. Sub Command relations can only be sorted out after availability. That means if you try to register a command that is a sub-command of something that is not registered yet, it will fail. So make sure you add commands in the correct order.
 * @param listener
 * @param owner
 * @param translator
 * @param force
 * @throws CommandDependencyException
 */
public void registerCommands(final CommandListener listener,CommandOwner owner,LocaleHelper translator,boolean force) throws CommandDependencyException {
  Method[] methods=listener.getClass().getDeclaredMethods();
  ArrayList<CanaryCommand> loadedCommands=new ArrayList<CanaryCommand>();
  for (  final Method method : methods) {
    if (!method.isAnnotationPresent(Command.class)) {
      continue;
    }
    Class<?>[] params=method.getParameterTypes();
    if (params.length != 2) {
      Canary.logWarning(""String_Node_Str"" + method.getName());
      continue;
    }
    if (!(MessageReceiver.class.isAssignableFrom(params[0]) && String[].class.isAssignableFrom(params[1]))) {
      Canary.logWarning(""String_Node_Str"" + method.getName());
      continue;
    }
    Command meta=method.getAnnotation(Command.class);
    CanaryCommand command=new CanaryCommand(meta,owner,translator){
      @Override protected void execute(      MessageReceiver caller,      String[] parameters){
        try {
          method.invoke(listener,new Object[]{caller,parameters});
        }
 catch (        IllegalArgumentException e) {
          Canary.logStackTrace(""String_Node_Str"" + e.getMessage(),e);
        }
catch (        IllegalAccessException e) {
          Canary.logStackTrace(""String_Node_Str"" + e.getMessage(),e);
        }
catch (        InvocationTargetException e) {
          Canary.logStackTrace(""String_Node_Str"" + e.getMessage(),e);
        }
      }
    }
;
    loadedCommands.add(command);
  }
  for (  CanaryCommand cmd : loadedCommands) {
    if (cmd.meta.parent().isEmpty()) {
      continue;
    }
    String[] cmdp=cmd.meta.parent().split(""String_Node_Str"");
    boolean depMissing=true;
    for (    CanaryCommand parent : loadedCommands) {
      CanaryCommand tmp=null;
      for (int i=0; i < cmdp.length; i++) {
        if (i == 0) {
          for (          String palias : parent.meta.aliases()) {
            if (palias.equals(cmdp[i])) {
              tmp=parent;
            }
          }
        }
 else {
          if (tmp == null) {
            break;
          }
          if (tmp.hasSubCommand(cmdp[i])) {
            tmp=tmp.getSubCommand(cmdp[i]);
          }
 else {
            tmp=null;
            break;
          }
        }
      }
      if (tmp != null) {
        cmd.setParent(tmp);
        depMissing=false;
      }
    }
    if (depMissing) {
      throw new CommandDependencyException(cmd.meta.aliases()[0] + ""String_Node_Str"" + ""String_Node_Str"");
    }
  }
  boolean hasDuplicate=false;
  StringBuilder dupes=null;
  for (  CanaryCommand cmd : loadedCommands) {
    for (    String alias : cmd.meta.aliases()) {
      if (commands.containsKey(alias.toLowerCase()) && cmd.meta.parent().isEmpty() && !force) {
        hasDuplicate=true;
        if (dupes == null) {
          dupes=new StringBuilder();
        }
        dupes.append(alias).append(""String_Node_Str"");
      }
 else {
        if (cmd.meta.parent().isEmpty()) {
          commands.put(alias.toLowerCase(),cmd);
        }
        if (!cmd.meta.helpLookup().isEmpty() && !Canary.help().hasHelp(cmd.meta.helpLookup())) {
          Canary.help().registerCommand(owner,cmd,cmd.meta.helpLookup());
        }
 else {
          Canary.help().registerCommand(owner,cmd);
        }
      }
    }
  }
  if (hasDuplicate) {
    throw new DuplicateCommandException(dupes.toString());
  }
}"
86709,"private void console(MessageReceiver caller,String[] cmd){
  if (cmd.length < 2) {
    caller.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  Ban ban=new Ban();
  Player p=Canary.getServer().matchPlayer(cmd[1]);
  String reason=""String_Node_Str"";
  long timestamp=-1L;
  if (cmd.length >= 3) {
    try {
      timestamp=Canary.parseTime(Long.parseLong(cmd[cmd.length - 2]),cmd[cmd.length - 1]);
      reason=StringUtils.joinString(cmd,""String_Node_Str"",2,cmd.length - 2);
    }
 catch (    NumberFormatException e) {
      reason=StringUtils.joinString(cmd,""String_Node_Str"",2);
      timestamp=-1L;
    }
  }
  ban.setReason(reason);
  ban.setTimestamp(timestamp);
  ban.setBanningPlayer(caller.getName());
  if (p != null) {
    ban.setSubject(p.getName());
    Canary.bans().issueBan(ban);
    Canary.hooks().callHook(new BanHook(p,p.getIP(),null,reason,timestamp));
    caller.notice(Translator.translateAndFormat(""String_Node_Str"",p.getName()));
    p.kick(reason);
  }
 else {
    ban.setSubject(cmd[1]);
    Canary.bans().issueBan(ban);
    Canary.hooks().callHook(new BanHook(null,""String_Node_Str"",null,reason,timestamp));
    caller.notice(Translator.translateAndFormat(""String_Node_Str"",cmd[1]));
  }
}","private void console(MessageReceiver caller,String[] cmd){
  if (cmd.length < 2) {
    Canary.help().getHelp(caller,""String_Node_Str"");
    return;
  }
  Ban ban=new Ban();
  Player p=Canary.getServer().matchPlayer(cmd[1]);
  String reason=""String_Node_Str"";
  long timestamp=-1L;
  if (cmd.length >= 3) {
    try {
      timestamp=Canary.parseTime(Long.parseLong(cmd[cmd.length - 2]),cmd[cmd.length - 1]);
      reason=StringUtils.joinString(cmd,""String_Node_Str"",2,cmd.length - 2);
    }
 catch (    NumberFormatException e) {
      reason=StringUtils.joinString(cmd,""String_Node_Str"",2);
      timestamp=-1L;
    }
  }
  ban.setReason(reason);
  ban.setTimestamp(timestamp);
  ban.setBanningPlayer(caller.getName());
  if (p != null) {
    ban.setSubject(p.getName());
    Canary.bans().issueBan(ban);
    Canary.hooks().callHook(new BanHook(p,p.getIP(),null,reason,timestamp));
    caller.notice(Translator.translateAndFormat(""String_Node_Str"",p.getName()));
    p.kick(reason);
  }
 else {
    ban.setSubject(cmd[1]);
    Canary.bans().issueBan(ban);
    Canary.hooks().callHook(new BanHook(null,""String_Node_Str"",null,reason,timestamp));
    caller.notice(Translator.translateAndFormat(""String_Node_Str"",cmd[1]));
  }
}"
86710,"private void player(Player caller,String[] cmd){
  if (cmd.length < 2) {
    caller.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  Ban ban=new Ban();
  Player p=Canary.getServer().matchPlayer(cmd[1]);
  String reason=""String_Node_Str"";
  long timestamp=-1L;
  if (cmd.length >= 3) {
    try {
      timestamp=Canary.parseTime(Long.parseLong(cmd[cmd.length - 2]),cmd[cmd.length - 1]);
      reason=StringUtils.joinString(cmd,""String_Node_Str"",2,cmd.length - 2);
    }
 catch (    NumberFormatException e) {
      reason=StringUtils.joinString(cmd,""String_Node_Str"",2);
      timestamp=-1L;
    }
  }
  ban.setReason(reason);
  ban.setTimestamp(timestamp);
  ban.setBanningPlayer(caller.getName());
  if (p != null) {
    ban.setSubject(p.getName());
    Canary.bans().issueBan(ban);
    Canary.hooks().callHook(new BanHook(p,p.getIP(),caller,reason,timestamp));
    caller.notice(Translator.translateAndFormat(""String_Node_Str"",p.getName()));
    p.kick(reason);
  }
 else {
    ban.setSubject(cmd[1]);
    Canary.bans().issueBan(ban);
    Canary.hooks().callHook(new BanHook(null,""String_Node_Str"",caller,reason,timestamp));
    caller.notice(Translator.translateAndFormat(""String_Node_Str"",cmd[1]));
  }
}","private void player(Player caller,String[] cmd){
  if (cmd.length < 2) {
    Canary.help().getHelp(caller,""String_Node_Str"");
    return;
  }
  Ban ban=new Ban();
  Player p=Canary.getServer().matchPlayer(cmd[1]);
  String reason=""String_Node_Str"";
  long timestamp=-1L;
  if (cmd.length >= 3) {
    try {
      timestamp=Canary.parseTime(Long.parseLong(cmd[cmd.length - 2]),cmd[cmd.length - 1]);
      reason=StringUtils.joinString(cmd,""String_Node_Str"",2,cmd.length - 2);
    }
 catch (    NumberFormatException e) {
      reason=StringUtils.joinString(cmd,""String_Node_Str"",2);
      timestamp=-1L;
    }
  }
  ban.setReason(reason);
  ban.setTimestamp(timestamp);
  ban.setBanningPlayer(caller.getName());
  if (p != null) {
    ban.setSubject(p.getName());
    Canary.bans().issueBan(ban);
    Canary.hooks().callHook(new BanHook(p,p.getIP(),caller,reason,timestamp));
    caller.notice(Translator.translateAndFormat(""String_Node_Str"",p.getName()));
    p.kick(reason);
  }
 else {
    ban.setSubject(cmd[1]);
    Canary.bans().issueBan(ban);
    Canary.hooks().callHook(new BanHook(null,""String_Node_Str"",caller,reason,timestamp));
    caller.notice(Translator.translateAndFormat(""String_Node_Str"",cmd[1]));
  }
}"
86711,"private void console(MessageReceiver caller,String[] args){
  if (args.length < 3) {
    caller.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  int amount=1;
  if (args[args.length - 2].matches(""String_Node_Str"")) {
    amount=Integer.parseInt(args[args.length - 2]);
  }
  Item item=Canary.factory().getItemFactory().newItem(args[1]);
  if (item == null) {
    caller.notice(Translator.translateAndFormat(""String_Node_Str"",args[1]));
    return;
  }
  item.setAmount(amount);
  Player target=Canary.getServer().matchPlayer(args[args.length - 1]);
  if (target == null) {
    caller.notice(Translator.translateAndFormat(""String_Node_Str"",args[args.length - 1]));
    return;
  }
  target.giveItem(item);
  target.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",item.getType().getDisplayName()));
  caller.notice(Translator.translateAndFormat(""String_Node_Str"",target.getName()));
}","private void console(MessageReceiver caller,String[] args){
  if (args.length < 3) {
    Canary.help().getHelp(caller,""String_Node_Str"");
    return;
  }
  int amount=1;
  if (args[args.length - 2].matches(""String_Node_Str"")) {
    amount=Integer.parseInt(args[args.length - 2]);
  }
  Item item=Canary.factory().getItemFactory().newItem(args[1]);
  if (item == null) {
    caller.notice(Translator.translateAndFormat(""String_Node_Str"",args[1]));
    return;
  }
  item.setAmount(amount);
  Player target=Canary.getServer().matchPlayer(args[args.length - 1]);
  if (target == null) {
    caller.notice(Translator.translateAndFormat(""String_Node_Str"",args[args.length - 1]));
    return;
  }
  target.giveItem(item);
  target.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",item.getType().getDisplayName()));
  caller.notice(Translator.translateAndFormat(""String_Node_Str"",target.getName()));
}"
86712,"private void console(MessageReceiver caller,String[] cmd){
  if (cmd.length < 2) {
    caller.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  Player p=Canary.getServer().matchPlayer(cmd[1]);
  if (p == null) {
    caller.notice(Translator.translate(""String_Node_Str"") + ""String_Node_Str"" + Translator.translateAndFormat(""String_Node_Str"",cmd[1]));
    return;
  }
  Ban ban=new Ban();
  String reason=""String_Node_Str"";
  long timestamp=-1L;
  if (cmd.length >= 3) {
    try {
      timestamp=Canary.parseTime(Long.parseLong(cmd[cmd.length - 2]),cmd[cmd.length - 1]);
      reason=StringUtils.joinString(cmd,""String_Node_Str"",2,cmd.length - 2);
    }
 catch (    NumberFormatException e) {
      reason=StringUtils.joinString(cmd,""String_Node_Str"",2);
      timestamp=-1L;
    }
  }
  ban.setReason(reason);
  ban.setTimestamp(timestamp);
  ban.setBanningPlayer(caller.getName());
  ban.setSubject(p.getName());
  ban.setIp(p.getIP());
  ban.setIsIpBan(true);
  Canary.bans().issueBan(ban);
  Canary.hooks().callHook(new BanHook(p,p.getIP(),null,reason,timestamp));
  caller.notice(Translator.translateAndFormat(""String_Node_Str"",cmd[1]));
  p.kick(reason);
}","private void console(MessageReceiver caller,String[] cmd){
  if (cmd.length < 2) {
    Canary.help().getHelp(caller,""String_Node_Str"");
    return;
  }
  Player p=Canary.getServer().matchPlayer(cmd[1]);
  if (p == null) {
    caller.notice(Translator.translate(""String_Node_Str"") + ""String_Node_Str"" + Translator.translateAndFormat(""String_Node_Str"",cmd[1]));
    return;
  }
  Ban ban=new Ban();
  String reason=""String_Node_Str"";
  long timestamp=-1L;
  if (cmd.length >= 3) {
    try {
      timestamp=Canary.parseTime(Long.parseLong(cmd[cmd.length - 2]),cmd[cmd.length - 1]);
      reason=StringUtils.joinString(cmd,""String_Node_Str"",2,cmd.length - 2);
    }
 catch (    NumberFormatException e) {
      reason=StringUtils.joinString(cmd,""String_Node_Str"",2);
      timestamp=-1L;
    }
  }
  ban.setReason(reason);
  ban.setTimestamp(timestamp);
  ban.setBanningPlayer(caller.getName());
  ban.setSubject(p.getName());
  ban.setIp(p.getIP());
  ban.setIsIpBan(true);
  Canary.bans().issueBan(ban);
  Canary.hooks().callHook(new BanHook(p,p.getIP(),null,reason,timestamp));
  caller.notice(Translator.translateAndFormat(""String_Node_Str"",cmd[1]));
  p.kick(reason);
}"
86713,"private void player(Player caller,String[] cmd){
  if (cmd.length < 2) {
    caller.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str""));
    return;
  }
  Player p=Canary.getServer().matchPlayer(cmd[1]);
  if (p == null) {
    caller.notice(Translator.translate(""String_Node_Str"") + ""String_Node_Str"" + Translator.translateAndFormat(""String_Node_Str"",cmd[1]));
    return;
  }
  Ban ban=new Ban();
  String reason=""String_Node_Str"";
  long timestamp=-1L;
  if (cmd.length >= 3) {
    try {
      timestamp=Canary.parseTime(Long.parseLong(cmd[cmd.length - 2]),cmd[cmd.length - 1]);
      reason=StringUtils.joinString(cmd,""String_Node_Str"",2,cmd.length - 2);
    }
 catch (    NumberFormatException e) {
      reason=StringUtils.joinString(cmd,""String_Node_Str"",2);
      timestamp=-1L;
    }
  }
  ban.setReason(reason);
  ban.setTimestamp(timestamp);
  ban.setBanningPlayer(caller.getName());
  ban.setSubject(p.getName());
  ban.setIp(p.getIP());
  ban.setIsIpBan(true);
  Canary.bans().issueBan(ban);
  Canary.hooks().callHook(new BanHook(p,p.getIP(),caller,reason,timestamp));
  caller.notice(Translator.translateAndFormat(""String_Node_Str"",cmd[1]));
  p.kick(reason);
}","private void player(Player caller,String[] cmd){
  if (cmd.length < 2) {
    Canary.help().getHelp(caller,""String_Node_Str"");
    return;
  }
  Player p=Canary.getServer().matchPlayer(cmd[1]);
  if (p == null) {
    caller.notice(Translator.translate(""String_Node_Str"") + ""String_Node_Str"" + Translator.translateAndFormat(""String_Node_Str"",cmd[1]));
    return;
  }
  Ban ban=new Ban();
  String reason=""String_Node_Str"";
  long timestamp=-1L;
  if (cmd.length >= 3) {
    try {
      timestamp=Canary.parseTime(Long.parseLong(cmd[cmd.length - 2]),cmd[cmd.length - 1]);
      reason=StringUtils.joinString(cmd,""String_Node_Str"",2,cmd.length - 2);
    }
 catch (    NumberFormatException e) {
      reason=StringUtils.joinString(cmd,""String_Node_Str"",2);
      timestamp=-1L;
    }
  }
  ban.setReason(reason);
  ban.setTimestamp(timestamp);
  ban.setBanningPlayer(caller.getName());
  ban.setSubject(p.getName());
  ban.setIp(p.getIP());
  ban.setIsIpBan(true);
  Canary.bans().issueBan(ban);
  Canary.hooks().callHook(new BanHook(p,p.getIP(),caller,reason,timestamp));
  caller.notice(Translator.translateAndFormat(""String_Node_Str"",cmd[1]));
  p.kick(reason);
}"
86714,"private void player(Player player,String[] args){
  if (args.length == 2) {
    LineTracer tracer=new LineTracer(player);
    Block b=tracer.getTargetBlock();
    if (b != null) {
      Entity mob=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[1].toUpperCase()),b.getLocation());
      mob.spawn();
      player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
    }
 else {
      player.notice(""String_Node_Str"");
    }
  }
  if (args.length == 3) {
    if (args[2].matches(""String_Node_Str"")) {
      int amount=Integer.parseInt(args[2]);
      LineTracer tracer=new LineTracer(player);
      Block b=tracer.getTargetBlock();
      boolean spawnSuccess=true;
      for (int i=0; i < amount; ++i) {
        if (b != null) {
          Entity e=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[1].toUpperCase()),b.getLocation());
          e.spawn();
        }
 else {
          spawnSuccess=false;
          break;
        }
      }
      if (spawnSuccess) {
        player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
      }
 else {
        player.notice(Translator.translate(""String_Node_Str""));
      }
    }
 else {
      LineTracer tracer=new LineTracer(player);
      Block b=tracer.getTargetBlock();
      if (b != null) {
        Entity mob=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[1].toUpperCase()),b.getLocation());
        Entity rider=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[2].toUpperCase()));
        mob.spawn(rider);
        player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1],args[2]));
      }
    }
  }
  if (args.length == 4) {
    if (!args[3].matches(""String_Node_Str"")) {
      player.notice(Translator.translate(""String_Node_Str""));
      player.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str""));
      return;
    }
    int amount=Integer.parseInt(args[2]);
    LineTracer tracer=new LineTracer(player);
    Block b=tracer.getTargetBlock();
    boolean spawnSuccess=true;
    if (b != null) {
      for (int i=0; i < amount; ++i) {
        Entity mob=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[1].toUpperCase()),b.getLocation());
        Entity rider=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[2].toUpperCase()));
        mob.spawn(rider);
      }
      if (spawnSuccess) {
        player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1],args[2]));
      }
 else {
        player.notice(Translator.translate(""String_Node_Str""));
      }
    }
  }
}","private void player(Player player,String[] args){
  if (args.length == 2) {
    LineTracer tracer=new LineTracer(player);
    Block b=tracer.getTargetBlock();
    if (b != null) {
      Entity mob=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[1].toUpperCase()),b.getLocation());
      mob.spawn();
      player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
    }
 else {
      player.notice(""String_Node_Str"");
    }
  }
  if (args.length == 3) {
    if (args[2].matches(""String_Node_Str"")) {
      int amount=Integer.parseInt(args[2]);
      LineTracer tracer=new LineTracer(player);
      Block b=tracer.getTargetBlock();
      boolean spawnSuccess=true;
      for (int i=0; i < amount; ++i) {
        if (b != null) {
          Entity e=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[1].toUpperCase()),b.getLocation());
          e.spawn();
        }
 else {
          spawnSuccess=false;
          break;
        }
      }
      if (spawnSuccess) {
        player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
      }
 else {
        player.notice(Translator.translate(""String_Node_Str""));
      }
    }
 else {
      LineTracer tracer=new LineTracer(player);
      Block b=tracer.getTargetBlock();
      if (b != null) {
        Entity mob=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[1].toUpperCase()),b.getLocation());
        Entity rider=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[2].toUpperCase()));
        mob.spawn(rider);
        player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1],args[2]));
      }
    }
  }
  if (args.length == 4) {
    if (!args[3].matches(""String_Node_Str"")) {
      player.notice(Translator.translate(""String_Node_Str""));
      Canary.help().getHelp(player,""String_Node_Str"");
      return;
    }
    int amount=Integer.parseInt(args[2]);
    LineTracer tracer=new LineTracer(player);
    Block b=tracer.getTargetBlock();
    boolean spawnSuccess=true;
    if (b != null) {
      for (int i=0; i < amount; ++i) {
        Entity mob=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[1].toUpperCase()),b.getLocation());
        Entity rider=Canary.factory().getEntityFactory().newEntity(EntityType.valueOf(args[2].toUpperCase()));
        mob.spawn(rider);
      }
      if (spawnSuccess) {
        player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1],args[2]));
      }
 else {
        player.notice(Translator.translate(""String_Node_Str""));
      }
    }
  }
}"
86715,"private void player(Player player,String[] args){
  Warp test=Canary.warps().getWarp(args[1]);
  if (test != null) {
    if (test.isPlayerHome() || !player.hasPermission(""String_Node_Str"")) {
      player.notice(Translator.translate(""String_Node_Str""));
      return;
    }
  }
  if (args.length == 2 && player.hasPermission(""String_Node_Str"")) {
    Warp newWarp=new Warp(player.getLocation(),args[1]);
    Canary.warps().addWarp(newWarp);
    player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
    return;
  }
 else   if (args.length > 3) {
    if (args[2].equalsIgnoreCase(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
      Group[] groups=new Group[args.length - 3];
      for (int i=0; i < groups.length; i++) {
        groups[i]=Canary.usersAndGroups().getGroup(args[i + 3]);
      }
      Warp newWarp=new Warp(player.getLocation(),groups,args[1]);
      Canary.warps().addWarp(newWarp);
      player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
      return;
    }
    if (args[2].equalsIgnoreCase(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
      Warp newWarp=new Warp(player.getLocation(),args[1],args[3],false);
      Canary.warps().addWarp(newWarp);
      player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
      return;
    }
 else {
      player.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str""));
      return;
    }
  }
 else {
    player.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str""));
    return;
  }
}","private void player(Player player,String[] args){
  Warp test=Canary.warps().getWarp(args[1]);
  if (test != null) {
    if (test.isPlayerHome() || !player.hasPermission(""String_Node_Str"")) {
      player.notice(Translator.translate(""String_Node_Str""));
      return;
    }
  }
  if (args.length == 2 && player.hasPermission(""String_Node_Str"")) {
    Warp newWarp=new Warp(player.getLocation(),args[1]);
    Canary.warps().addWarp(newWarp);
    player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
    return;
  }
 else   if (args.length > 3) {
    if (args[2].equalsIgnoreCase(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
      Group[] groups=new Group[args.length - 3];
      for (int i=0; i < groups.length; i++) {
        groups[i]=Canary.usersAndGroups().getGroup(args[i + 3]);
      }
      Warp newWarp=new Warp(player.getLocation(),groups,args[1]);
      Canary.warps().addWarp(newWarp);
      player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
      return;
    }
    if (args[2].equalsIgnoreCase(""String_Node_Str"") && player.hasPermission(""String_Node_Str"")) {
      Warp newWarp=new Warp(player.getLocation(),args[1],args[3],false);
      Canary.warps().addWarp(newWarp);
      player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",args[1]));
      return;
    }
 else {
      Canary.help().getHelp(player,""String_Node_Str"");
      return;
    }
  }
 else {
    Canary.help().getHelp(player,""String_Node_Str"");
    return;
  }
}"
86716,"private void player(Player player,String[] args){
  World dim=player.getWorld();
  if (args[0].equals(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",dim.getRelativeTime(),dim.getRawTime()));
    return;
  }
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",dim.getRelativeTime(),dim.getRawTime()));
  }
 else   if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setTime(0L);
    player.sendMessage(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
 else   if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setTime(13000L);
    player.sendMessage(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
 else   if (args[1].matches(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setTime(Long.parseLong(args[1]));
    player.sendMessage(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
 else {
    player.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str""));
  }
}","private void player(Player player,String[] args){
  World dim=player.getWorld();
  if (args[0].equals(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",dim.getRelativeTime(),dim.getRawTime()));
    return;
  }
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",dim.getRelativeTime(),dim.getRawTime()));
  }
 else   if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setTime(0L);
    player.sendMessage(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
 else   if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setTime(13000L);
    player.sendMessage(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
 else   if (args[1].matches(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setTime(Long.parseLong(args[1]));
    player.sendMessage(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
 else {
    Canary.help().getHelp(player,""String_Node_Str"");
  }
}"
86717,"private void player(Player player,String[] args){
  World dim=player.getWorld();
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    String weather=dim.isRaining() ? ""String_Node_Str"" : ""String_Node_Str"";
    weather=dim.isThundering() ? ""String_Node_Str"" : ""String_Node_Str"";
    player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",weather));
    return;
  }
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setRaining(true);
    dim.setRainTime(new Random().nextInt(15000));
    player.sendMessage(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setThundering(true);
    dim.setThunderTime(new Random().nextInt(15000));
    player.sendMessage(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
  if (args[1].matches(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setRaining(false);
    dim.setRainTime(0);
    dim.setThundering(false);
    dim.setThunderTime(0);
    player.sendMessage(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
 else {
    player.notice(Translator.translateAndFormat(""String_Node_Str"",""String_Node_Str""));
  }
}","private void player(Player player,String[] args){
  World dim=player.getWorld();
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    String weather=dim.isRaining() ? ""String_Node_Str"" : ""String_Node_Str"";
    weather=dim.isThundering() ? ""String_Node_Str"" : ""String_Node_Str"";
    player.sendMessage(Colors.YELLOW + Translator.translateAndFormat(""String_Node_Str"",weather));
    return;
  }
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setRaining(true);
    dim.setRainTime(new Random().nextInt(15000));
    player.sendMessage(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
  if (args[1].equalsIgnoreCase(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setThundering(true);
    dim.setThunderTime(new Random().nextInt(15000));
    player.sendMessage(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
  if (args[1].matches(""String_Node_Str"")) {
    if (!player.hasPermission(""String_Node_Str"")) {
      return;
    }
    dim.setRaining(false);
    dim.setRainTime(0);
    dim.setThundering(false);
    dim.setThunderTime(0);
    player.sendMessage(Colors.YELLOW + Translator.translate(""String_Node_Str""));
    return;
  }
 else {
    Canary.help().getHelp(player,""String_Node_Str"");
  }
}"
86718,"/** 
 * Updates an already existing element in the document. IMPORTANT: the lengths of fields and content array must have been checked before this method is called!
 * @param file
 * @param table
 * @param fields
 * @param values
 * @throws IOException
 * @throws DatabaseTableInconsistencyException
 * @throws DatabaseWriteException
 */
private void updateData(File file,Document table,DataAccess data,String[] fields,Object[] values) throws IOException, DatabaseTableInconsistencyException, DatabaseWriteException {
  boolean hasUpdated=false;
  for (  Element element : table.getRootElement().getChildren()) {
    int equalFields=0;
    for (int i=0; i < fields.length; ++i) {
      Element child=element.getChild(fields[i]);
      if (child != null) {
        if (child.getText().equals(String.valueOf(values[i]))) {
          equalFields++;
        }
      }
    }
    if (equalFields != fields.length) {
      continue;
    }
    if (data.isInconsistent()) {
      throw new DatabaseTableInconsistencyException(""String_Node_Str"");
    }
    HashMap<Column,Object> dataSet=data.toDatabaseEntryList();
    for (    Column column : dataSet.keySet()) {
      Element child=element.getChild(column.columnName());
      if (child == null) {
        throw new DatabaseTableInconsistencyException(""String_Node_Str"" + column.columnName() + ""String_Node_Str"");
      }
      if (column.autoIncrement()) {
        continue;
      }
      addToElement(table,child,dataSet.get(column),column);
      hasUpdated=true;
    }
  }
  if (hasUpdated) {
    FileWriter writer=new FileWriter(file);
    file.setWritable(true);
    xmlSerializer.output(table,writer);
    writer.close();
  }
 else {
    insert(data);
  }
}","/** 
 * Updates an already existing element in the document. IMPORTANT: the lengths of fields and content array must have been checked before this method is called!
 * @param file
 * @param table
 * @param fields
 * @param values
 * @throws IOException
 * @throws DatabaseTableInconsistencyException
 * @throws DatabaseWriteException
 */
private void updateData(File file,Document table,DataAccess data,String[] fields,Object[] values) throws IOException, DatabaseTableInconsistencyException, DatabaseWriteException {
  boolean hasUpdated=false;
  for (  Element element : table.getRootElement().getChildren()) {
    int equalFields=0;
    for (int i=0; i < fields.length; ++i) {
      Element child=element.getChild(fields[i]);
      if (child != null) {
        if (child.getText().equals(String.valueOf(values[i]))) {
          equalFields++;
        }
      }
    }
    if (equalFields != fields.length) {
      continue;
    }
    if (data.isInconsistent()) {
      throw new DatabaseTableInconsistencyException(""String_Node_Str"");
    }
    HashMap<Column,Object> dataSet=data.toDatabaseEntryList();
    for (    Column column : dataSet.keySet()) {
      Element child=element.getChild(column.columnName());
      if (child == null) {
        throw new DatabaseTableInconsistencyException(""String_Node_Str"" + column.columnName() + ""String_Node_Str"");
      }
      if (column.autoIncrement()) {
        continue;
      }
      addToElement(table,child,dataSet.get(column),column);
      hasUpdated=true;
    }
  }
  if (hasUpdated) {
    file.setWritable(true);
    FileWriter writer=new FileWriter(file);
    RandomAccessFile f=new RandomAccessFile(file,""String_Node_Str"");
    f.getChannel().lock();
    OutputStream out=new FileOutputStream(f.getFD());
    xmlSerializer.output(table,out);
    writer.close();
    f.close();
  }
 else {
    insert(data);
  }
}"
86719,"@Override public void updateSchema(DataAccess data) throws DatabaseWriteException {
  File file=new File(""String_Node_Str"" + data.getName() + ""String_Node_Str"");
  if (!file.exists()) {
    try {
      file.createNewFile();
      initFile(file,data.getName());
    }
 catch (    IOException e) {
      throw new DatabaseWriteException(e.getMessage());
    }
  }
  try {
    Document table=fileBuilder.build(file);
    HashSet<Column> tableLayout=data.getTableLayout();
    for (    Element element : table.getRootElement().getChildren()) {
      addFields(element,tableLayout);
      removeFields(element,tableLayout);
    }
    file.setWritable(true);
    FileWriter writer=new FileWriter(file);
    xmlSerializer.output(table,writer);
    writer.close();
  }
 catch (  JDOMException e) {
    throw new DatabaseWriteException(e.getMessage());
  }
catch (  IOException e) {
    throw new DatabaseWriteException(e.getMessage());
  }
catch (  DatabaseTableInconsistencyException e) {
    throw new DatabaseWriteException(e.getMessage());
  }
}","@Override public void updateSchema(DataAccess data) throws DatabaseWriteException {
  File file=new File(""String_Node_Str"" + data.getName() + ""String_Node_Str"");
  if (!file.exists()) {
    try {
      file.createNewFile();
      initFile(file,data.getName());
    }
 catch (    IOException e) {
      throw new DatabaseWriteException(e.getMessage());
    }
  }
  try {
    Document table=fileBuilder.build(file);
    HashSet<Column> tableLayout=data.getTableLayout();
    for (    Element element : table.getRootElement().getChildren()) {
      addFields(element,tableLayout);
      removeFields(element,tableLayout);
    }
    file.setWritable(true);
    FileWriter writer=new FileWriter(file);
    RandomAccessFile f=new RandomAccessFile(file,""String_Node_Str"");
    f.getChannel().lock();
    OutputStream out=new FileOutputStream(f.getFD());
    xmlSerializer.output(table,out);
    writer.close();
    f.close();
  }
 catch (  JDOMException e) {
    throw new DatabaseWriteException(e.getMessage());
  }
catch (  IOException e) {
    throw new DatabaseWriteException(e.getMessage());
  }
catch (  DatabaseTableInconsistencyException e) {
    throw new DatabaseWriteException(e.getMessage());
  }
}"
86720,"/** 
 * Inserts data into the XML file. This does NOT update data. It will create a new entry if there isn't the exact same already present
 * @param file
 * @param data
 * @param dbTable
 * @throws IOException
 * @throws DatabaseTableInconsistencyException
 */
private void insertData(File file,DataAccess data,Document dbTable) throws IOException, DatabaseTableInconsistencyException {
  HashMap<Column,Object> entry=data.toDatabaseEntryList();
  if (data.isInconsistent()) {
    throw new DatabaseTableInconsistencyException(""String_Node_Str"");
  }
  Element set=new Element(""String_Node_Str"");
  for (  Column column : entry.keySet()) {
    Element col=new Element(column.columnName());
    col.setAttribute(""String_Node_Str"",String.valueOf(column.autoIncrement()));
    col.setAttribute(""String_Node_Str"",column.dataType().name());
    col.setAttribute(""String_Node_Str"",column.columnType().name());
    col.setAttribute(""String_Node_Str"",String.valueOf(column.isList()));
    addToElement(dbTable,col,entry.get(column),column);
    set.addContent(col);
    boolean foundDupe=false;
    for (    Element c : dbTable.getRootElement().getChildren()) {
      if (elementEquals(set,c)) {
        foundDupe=true;
      }
    }
    if (!foundDupe) {
    }
  }
  dbTable.getRootElement().addContent(set);
  FileWriter writer=new FileWriter(file);
  file.setWritable(true);
  xmlSerializer.output(dbTable,writer);
  writer.close();
}","/** 
 * Inserts data into the XML file. This does NOT update data. It will create a new entry if there isn't the exact same already present
 * @param file
 * @param data
 * @param dbTable
 * @throws IOException
 * @throws DatabaseTableInconsistencyException
 */
private void insertData(File file,DataAccess data,Document dbTable) throws IOException, DatabaseTableInconsistencyException {
  HashMap<Column,Object> entry=data.toDatabaseEntryList();
  if (data.isInconsistent()) {
    throw new DatabaseTableInconsistencyException(""String_Node_Str"");
  }
  Element set=new Element(""String_Node_Str"");
  for (  Column column : entry.keySet()) {
    Element col=new Element(column.columnName());
    col.setAttribute(""String_Node_Str"",String.valueOf(column.autoIncrement()));
    col.setAttribute(""String_Node_Str"",column.dataType().name());
    col.setAttribute(""String_Node_Str"",column.columnType().name());
    col.setAttribute(""String_Node_Str"",String.valueOf(column.isList()));
    addToElement(dbTable,col,entry.get(column),column);
    set.addContent(col);
    boolean foundDupe=false;
    for (    Element c : dbTable.getRootElement().getChildren()) {
      if (elementEquals(set,c)) {
        foundDupe=true;
      }
    }
    if (!foundDupe) {
    }
  }
  dbTable.getRootElement().addContent(set);
  file.setWritable(true);
  FileWriter writer=new FileWriter(file);
  RandomAccessFile f=new RandomAccessFile(file,""String_Node_Str"");
  f.getChannel().lock();
  OutputStream out=new FileOutputStream(f.getFD());
  xmlSerializer.output(dbTable,out);
  writer.close();
  f.close();
}"
86721,"private void initFile(File file,String rootName) throws IOException {
  Document doc=new Document();
  doc.setRootElement(new Element(rootName));
  file.setWritable(true);
  FileWriter writer=new FileWriter(file);
  xmlSerializer.output(doc,writer);
  writer.close();
}","private void initFile(File file,String rootName) throws IOException {
  Document doc=new Document();
  doc.setRootElement(new Element(rootName));
  file.setWritable(true);
  FileWriter writer=new FileWriter(file);
  RandomAccessFile f=new RandomAccessFile(file,""String_Node_Str"");
  f.getChannel().lock();
  OutputStream out=new FileOutputStream(f.getFD());
  xmlSerializer.output(doc,out);
  writer.close();
  f.close();
}"
86722,"private void removeData(File file,Document table,String[] fields,Object[] values) throws IOException, DatabaseTableInconsistencyException {
  for (  Element element : table.getRootElement().getChildren()) {
    int equalFields=0;
    for (int i=0; i < fields.length; ++i) {
      Element child=element.getChild(fields[i]);
      if (child != null) {
        if (child.getText().equals(String.valueOf(values[i]))) {
          equalFields++;
        }
      }
    }
    if (equalFields != fields.length) {
      continue;
    }
    element.detach();
  }
  FileWriter writer=new FileWriter(file);
  file.setWritable(true);
  xmlSerializer.output(table,writer);
  writer.close();
}","private void removeData(File file,Document table,String[] fields,Object[] values) throws IOException, DatabaseTableInconsistencyException {
  for (  Element element : table.getRootElement().getChildren()) {
    int equalFields=0;
    for (int i=0; i < fields.length; ++i) {
      Element child=element.getChild(fields[i]);
      if (child != null) {
        if (child.getText().equals(String.valueOf(values[i]))) {
          equalFields++;
        }
      }
    }
    if (equalFields != fields.length) {
      continue;
    }
    element.detach();
  }
  file.setWritable(true);
  FileWriter writer=new FileWriter(file);
  RandomAccessFile f=new RandomAccessFile(file,""String_Node_Str"");
  f.getChannel().lock();
  OutputStream out=new FileOutputStream(f.getFD());
  xmlSerializer.output(table,out);
  writer.close();
  f.close();
}"
86723,"@Override public DatabaseRow[] getRelatedRows(String table1,String table2,String relation1,String relation2,String searchColumn,String searchValue){
  ArrayList<DatabaseRow> relationRows=new ArrayList<DatabaseRow>();
  ArrayList<DatabaseRow> resultRows=new ArrayList<DatabaseRow>();
  try {
    DatabaseRow[] searchRows=this.getTable(table1).getFilteredRows(searchColumn,searchValue);
    ArrayList<String> table1Values=new ArrayList<String>();
    for (    DatabaseRow row : searchRows) {
      table1Values.add(row.getStringCell(relation1));
    }
    DatabaseTable relT=this.getTable(table1 + ""String_Node_Str"" + table2+ ""String_Node_Str"");
    if (relT == null) {
      relT=this.getTable(table2 + ""String_Node_Str"" + table1+ ""String_Node_Str"");
      if (relT == null) {
        return null;
      }
    }
    for (    String val : table1Values) {
      DatabaseRow[] rs=relT.getFilteredRows(relation1,val);
      if (rs != null) {
        for (        DatabaseRow r : rs) {
          relationRows.add(r);
        }
      }
    }
    for (    DatabaseRow relRow : relationRows) {
      DatabaseRow[] rs=this.getTable(table2).getFilteredRows(relation2,relRow.getStringCell(relation2));
      for (      DatabaseRow r : rs) {
        if (!resultRows.contains(r)) {
          resultRows.add(r);
        }
      }
    }
  }
 catch (  NullPointerException npe) {
    Logman.logStackTrace(""String_Node_Str"",npe);
    return null;
  }
  DatabaseRow[] retForm={};
  return resultRows.toArray(retForm);
}","@Override public DatabaseRow[] getRelatedRows(String table1,String table2,String relation1,String relation2,String searchColumn,String searchValue){
  ArrayList<DatabaseRow> relationRows=new ArrayList<DatabaseRow>();
  ArrayList<DatabaseRow> resultRows=new ArrayList<DatabaseRow>();
  try {
    DatabaseRow[] searchRows=this.getTable(table1).getFilteredRows(searchColumn,searchValue);
    if (searchRows == null) {
      return null;
    }
    ArrayList<String> table1Values=new ArrayList<String>();
    for (    DatabaseRow row : searchRows) {
      table1Values.add(row.getStringCell(relation1));
    }
    DatabaseTable relT=this.getTable(table1 + ""String_Node_Str"" + table2+ ""String_Node_Str"");
    if (relT == null) {
      relT=this.getTable(table2 + ""String_Node_Str"" + table1+ ""String_Node_Str"");
      if (relT == null) {
        return null;
      }
    }
    for (    String val : table1Values) {
      DatabaseRow[] rs=relT.getFilteredRows(relation1,val);
      if (rs != null) {
        for (        DatabaseRow r : rs) {
          relationRows.add(r);
        }
      }
    }
    for (    DatabaseRow relRow : relationRows) {
      DatabaseRow[] rs=this.getTable(table2).getFilteredRows(relation2,relRow.getStringCell(relation2));
      for (      DatabaseRow r : rs) {
        if (!resultRows.contains(r)) {
          resultRows.add(r);
        }
      }
    }
  }
 catch (  NullPointerException npe) {
    Logman.logStackTrace(""String_Node_Str"",npe);
    return null;
  }
  DatabaseRow[] retForm={};
  return resultRows.toArray(retForm);
}"
86724,"/** 
 * Loads the properties
 */
public void load() throws IOException {
  BufferedReader in=null;
  IOException toThrow=null;
  try {
    if (this.propsFile == null)     in=new BufferedReader(new InputStreamReader(instream));
 else     in=new BufferedReader(new FileReader(propsFile));
    String inLine;
    ArrayList<String> inComments=new ArrayList<String>();
    while ((inLine=in.readLine()) != null) {
      if (inLine.startsWith(""String_Node_Str"") || inLine.startsWith(""String_Node_Str"")) {
        inComments.add(inLine);
      }
 else {
        try {
          String[] propsLine=inLine.split(""String_Node_Str"");
          props.put(propsLine[0].trim(),propsLine[1].trim());
          if (!inComments.isEmpty()) {
            String[] commented=new String[inComments.size()];
            for (int i=0; i < inComments.size(); i++) {
              commented[i]=inComments.get(i);
            }
            comments.put(propsLine[0],commented);
            inComments.clear();
          }
        }
 catch (        ArrayIndexOutOfBoundsException AIOOBE) {
          inComments.clear();
          continue;
        }
      }
    }
  }
 catch (  IOException ioe) {
    toThrow=ioe;
  }
 finally {
    if (in != null) {
      in.close();
    }
    if (this.propsFile == null) {
      instream.close();
    }
    if (toThrow != null) {
      throw toThrow;
    }
  }
}","/** 
 * Loads the properties
 */
public void load() throws IOException {
  BufferedReader in=null;
  IOException toThrow=null;
  try {
    if (this.propsFile == null)     in=new BufferedReader(new InputStreamReader(instream));
 else     in=new BufferedReader(new FileReader(propsFile));
    String inLine;
    ArrayList<String> inComments=new ArrayList<String>();
    while ((inLine=in.readLine()) != null) {
      if (inLine.startsWith(""String_Node_Str"") || inLine.startsWith(""String_Node_Str"")) {
        inComments.add(inLine);
      }
 else {
        try {
          String[] propsLine=inLine.split(""String_Node_Str"");
          props.put(propsLine[0].trim(),propsLine[1].trim());
          if (!inComments.isEmpty()) {
            String[] commented=new String[inComments.size()];
            for (int i=0; i < inComments.size(); i++) {
              commented[i]=inComments.get(i);
            }
            comments.put(propsLine[0],commented);
            inComments.clear();
          }
        }
 catch (        ArrayIndexOutOfBoundsException AIOOBE) {
          inComments.clear();
          continue;
        }
      }
    }
  }
 catch (  IOException ioe) {
    toThrow=ioe;
  }
 finally {
    if (in != null) {
      in.close();
    }
    if (instream != null) {
      instream.close();
      instream=null;
    }
    if (toThrow != null) {
      throw toThrow;
    }
  }
}"
86725,"/** 
 * Class constructor.
 * @param url URL of the configuration file
 */
public ConfigurationFile(InputStream stream) throws IOException {
  this.filepath=null;
  this.propsFile=null;
  this.instream=stream;
  load();
}","/** 
 * Class constructor.
 * @param url URL of the configuration file
 */
public ConfigurationFile(InputStream stream) throws IOException {
  this.instream=stream;
  load();
}"
86726,"private void init(ConfigurationFile cfg){
  this.cfg=cfg;
  String typeVal=cfg.getString(""String_Node_Str"",""String_Node_Str"");
  if (typeVal.equalsIgnoreCase(""String_Node_Str"")) {
    dataSourceType=Database.Type.FLATFILE;
  }
 else   if (typeVal.equalsIgnoreCase(""String_Node_Str"")) {
    dataSourceType=Database.Type.MYSQL;
  }
}","private void init(ConfigurationFile cfg){
  this.cfg=cfg;
  String typeVal=cfg.getString(""String_Node_Str"",""String_Node_Str"");
  if (typeVal.equalsIgnoreCase(""String_Node_Str"")) {
    dataSourceType=Database.Type.MYSQL;
  }
 else {
    dataSourceType=Database.Type.FLATFILE;
  }
}"
86727,"public BanManager(Backbone bone,Database.Type type){
  backbone=(BackboneBans)bone.getBackbone(Backbone.System.BANS,type);
  bans=backbone.loadBans();
}","public BanManager(Backbone bone,Database.Type type){
  backbone=(BackboneBans)Backbone.getBackbone(Backbone.System.BANS,type);
  bans=backbone.loadBans();
}"
86728,"public KitProvider(Backbone bone,Database.Type type){
  backbone=(BackboneKits)bone.getBackbone(Backbone.System.KITS,type);
  kits=backbone.loadKits();
}","public KitProvider(Backbone bone,Database.Type type){
  backbone=(BackboneKits)Backbone.getBackbone(Backbone.System.KITS,type);
  kits=backbone.loadKits();
}"
86729,"public WarpProvider(Backbone bone,Database.Type type){
  backbone=(BackboneWarps)bone.getBackbone(Backbone.System.WARPS,type);
  warps=backbone.loadWarps();
}","public WarpProvider(Backbone bone,Database.Type type){
  backbone=(BackboneWarps)Backbone.getBackbone(Backbone.System.WARPS,type);
  warps=backbone.loadWarps();
}"
86730,"/** 
 * Get the port number used to receive player-connections
 * @return
 */
public int getPort(){
  return cfg.getInt(""String_Node_Str"",22025);
}","/** 
 * Get the port number used to receive player-connections
 * @return
 */
public int getPort(){
  return cfg.getInt(""String_Node_Str"",25565);
}"
86731,"private void init(ConfigurationFile cfg){
  this.cfg=cfg;
  spawnableMobs=cfg.getString(""String_Node_Str"").split(""String_Node_Str"");
  spawnableAnimals=cfg.getString(""String_Node_Str"").split(""String_Node_Str"");
  spawnableWaterAnimals=cfg.getString(""String_Node_Str"").split(""String_Node_Str"");
  String[] eb=cfg.getString(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  String[] bb=cfg.getString(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  ArrayList<Integer> ebi=new ArrayList<Integer>();
  ArrayList<Integer> bbi=new ArrayList<Integer>();
  for (  String s : eb)   ebi.add(Integer.valueOf(s));
  for (  String s : bb)   bbi.add(Integer.valueOf(s));
  enderBlocks=ebi.toArray(enderBlocks);
  bannedBlocks=bbi.toArray(bannedBlocks);
}","private void init(ConfigurationFile cfg){
  this.cfg=cfg;
  spawnableMobs=cfg.getString(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  spawnableAnimals=cfg.getString(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  spawnableWaterAnimals=cfg.getString(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  String[] eb=cfg.getString(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  String[] bb=cfg.getString(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"");
  ArrayList<Integer> ebi=new ArrayList<Integer>();
  ArrayList<Integer> bbi=new ArrayList<Integer>();
  for (  String s : eb)   ebi.add(Integer.valueOf(s.trim()));
  for (  String s : bb)   bbi.add(Integer.valueOf(s.trim()));
  enderBlocks=ebi.toArray(enderBlocks);
  bannedBlocks=bbi.toArray(bannedBlocks);
}"
86732,"/** 
 * Returns a class relative identifier.
 * @param doc The class the identifier should be relative to.
 * @param str The identifier to be made relative.
 */
static String classRelativeIdentifier(ClassDoc doc,String str){
  if (str.startsWith(doc.name())) {
    return str.substring(doc.name().length() + 1);
  }
 else   if (str.startsWith(doc.containingPackage().name())) {
    return str.substring(doc.name().length() + 1);
  }
 else {
    return str;
  }
}","/** 
 * Returns a class relative identifier.
 * @param doc The class the identifier should be relative to.
 * @param str The identifier to be made relative.
 */
static String classRelativeIdentifier(ClassDoc doc,String str){
  if (str.equals(doc.name())) {
    return ""String_Node_Str"";
  }
 else   if (str.startsWith(doc.name())) {
    return str.substring(doc.name().length() + 1);
  }
 else   if (str.startsWith(doc.containingPackage().name())) {
    return str.substring(doc.name().length() + 1);
  }
 else {
    return str;
  }
}"
86733,"/** 
 * This method handles all other text.
 */
@Override public void handleText(char[] data,int pos){
  String str=new String(data);
  if (inPreMarkdown) {
    String html=""String_Node_Str"";
    if (str.startsWith(""String_Node_Str"")) {
      str=removeLeadingSpaces(str);
    }
    html=Processor.process(str);
    String toAppend=HTMLtoLaTeXBackEnd.fixText(html);
    ret.append(toAppend);
    return;
  }
  for (int i=0; i < str.length(); ++i) {
    int c=str.charAt(i);
    if (notex) {
      continue;
    }
switch (c) {
case 160:
      ret.append(""String_Node_Str"");
    break;
case ' ':
  if (verbat > 0) {
    ret.append(""String_Node_Str"");
  }
 else {
    ret.append(' ');
  }
break;
case '[':
if (i < str.length() - 1 && str.charAt(i + 1) == ' ') {
ret.append(""String_Node_Str"");
i++;
}
 else {
ret.append(""String_Node_Str"");
}
break;
case ']':
if (i < str.length() - 1 && str.charAt(i + 1) == ' ') {
ret.append(""String_Node_Str"");
i++;
}
 else {
ret.append(""String_Node_Str"");
}
break;
case '_':
case '%':
case '$':
case '#':
case '}':
case '{':
case '&':
ret.append('\\');
ret.append((char)c);
if (i < str.length() - 1 && str.charAt(i + 1) == ' ') {
ret.append(""String_Node_Str"");
i++;
}
break;
case '�':
if (i < str.length() - 1 && str.charAt(i + 1) == ' ') {
ret.append(""String_Node_Str"");
i++;
}
 else {
ret.append(""String_Node_Str"");
}
break;
case '�':
if (i < str.length() - 1 && str.charAt(i + 1) == ' ') {
ret.append(""String_Node_Str"");
i++;
}
 else {
ret.append(""String_Node_Str"");
}
break;
case '�':
if (i < str.length() - 1 && str.charAt(i + 1) == ' ') {
ret.append(""String_Node_Str"");
i++;
}
 else {
ret.append(""String_Node_Str"");
}
break;
case '�':
if (i < str.length() - 1 && str.charAt(i + 1) == ' ') {
ret.append(""String_Node_Str"");
i++;
}
 else {
ret.append(""String_Node_Str"");
}
break;
case '�':
if (i < str.length() - 1 && str.charAt(i + 1) == ' ') {
ret.append(""String_Node_Str"");
i++;
}
 else {
ret.append(""String_Node_Str"");
}
break;
case '�':
if (i < str.length() - 1 && str.charAt(i + 1) == ' ') {
ret.append(""String_Node_Str"");
i++;
}
 else {
ret.append(""String_Node_Str"");
}
break;
case '^':
ret.append(""String_Node_Str"");
break;
case '<':
ret.append(""String_Node_Str"");
break;
case '\r':
case '\n':
if (tblstk.size() > 0) {
if (verbat > 0) {
ret.append(""String_Node_Str"" + TeXDoclet.TRUETYPE + ""String_Node_Str"");
}
 else {
ret.append(""String_Node_Str"");
}
}
 else {
if (verbat > 0) {
ret.append(""String_Node_Str"" + TeXDoclet.TRUETYPE + ""String_Node_Str"");
}
 else if ((i + 1) < str.length() && str.charAt(i + 1) == 10) {
ret.append(""String_Node_Str"");
++i;
}
 else {
ret.append((char)c);
}
}
break;
case '/':
ret.append(""String_Node_Str"");
break;
case '>':
ret.append(""String_Node_Str"");
break;
case '\\':
ret.append(""String_Node_Str"");
break;
default :
ret.append((char)c);
break;
}
}
}","/** 
 * This method handles all other text.
 */
@Override public void handleText(char[] data,int pos){
  String str=new String(data);
  if (inPreMarkdown) {
    String html=""String_Node_Str"";
    if (str.startsWith(""String_Node_Str"")) {
      str=removeLeadingSpaces(str);
    }
    html=Processor.process(str);
    String toAppend=HTMLtoLaTeXBackEnd.fixText(html);
    ret.append(toAppend);
    return;
  }
  for (int i=0; i < str.length(); ++i) {
    int c=str.charAt(i);
    if (notex) {
      continue;
    }
switch (c) {
case 160:
      ret.append(""String_Node_Str"");
    break;
case ' ':
  if (verbat > 0) {
    ret.append(""String_Node_Str"");
  }
 else {
    ret.append(' ');
  }
break;
case '[':
if (i < str.length() - 1 && str.charAt(i + 1) == ' ') {
ret.append(""String_Node_Str"");
i++;
}
 else {
ret.append(""String_Node_Str"");
}
break;
case ']':
if (i < str.length() - 1 && str.charAt(i + 1) == ' ') {
ret.append(""String_Node_Str"");
i++;
}
 else {
ret.append(""String_Node_Str"");
}
break;
case '_':
case '%':
case '$':
case '#':
case '}':
case '{':
case '&':
ret.append('\\');
ret.append((char)c);
if (i < str.length() - 1 && str.charAt(i + 1) == ' ') {
ret.append(""String_Node_Str"");
i++;
}
break;
case 0xc3a6:
if (Charset.defaultCharset().name().equals(""String_Node_Str"")) {
if (i < str.length() - 1 && str.charAt(i + 1) == ' ') {
ret.append(""String_Node_Str"");
i++;
}
 else {
ret.append(""String_Node_Str"");
}
}
 else {
ret.append((char)c);
}
break;
case 0xc386:
if (Charset.defaultCharset().name().equals(""String_Node_Str"")) {
if (i < str.length() - 1 && str.charAt(i + 1) == ' ') {
ret.append(""String_Node_Str"");
i++;
}
 else {
ret.append(""String_Node_Str"");
}
}
 else {
ret.append((char)c);
}
break;
case 0xc3a5:
if (Charset.defaultCharset().name().equals(""String_Node_Str"")) {
if (i < str.length() - 1 && str.charAt(i + 1) == ' ') {
ret.append(""String_Node_Str"");
i++;
}
 else {
ret.append(""String_Node_Str"");
}
}
 else {
ret.append((char)c);
}
break;
case 0xc385:
if (Charset.defaultCharset().name().equals(""String_Node_Str"")) {
if (i < str.length() - 1 && str.charAt(i + 1) == ' ') {
ret.append(""String_Node_Str"");
i++;
}
 else {
ret.append(""String_Node_Str"");
}
}
 else {
ret.append((char)c);
}
break;
case 0xc3b8:
if (Charset.defaultCharset().name().equals(""String_Node_Str"")) {
if (i < str.length() - 1 && str.charAt(i + 1) == ' ') {
ret.append(""String_Node_Str"");
i++;
}
 else {
ret.append(""String_Node_Str"");
}
}
 else {
ret.append((char)c);
}
break;
case 0xc398:
if (Charset.defaultCharset().name().equals(""String_Node_Str"")) {
if (i < str.length() - 1 && str.charAt(i + 1) == ' ') {
ret.append(""String_Node_Str"");
i++;
}
 else {
ret.append(""String_Node_Str"");
}
}
 else {
ret.append((char)c);
}
break;
case '^':
ret.append(""String_Node_Str"");
break;
case '<':
ret.append(""String_Node_Str"");
break;
case '\r':
case '\n':
if (tblstk.size() > 0) {
if (verbat > 0) {
ret.append(""String_Node_Str"" + TeXDoclet.TRUETYPE + ""String_Node_Str"");
}
 else {
ret.append(""String_Node_Str"");
}
}
 else {
if (verbat > 0) {
ret.append(""String_Node_Str"" + TeXDoclet.TRUETYPE + ""String_Node_Str"");
}
 else if ((i + 1) < str.length() && str.charAt(i + 1) == 10) {
ret.append(""String_Node_Str"");
++i;
}
 else {
ret.append((char)c);
}
}
break;
case '/':
ret.append(""String_Node_Str"");
break;
case '>':
ret.append(""String_Node_Str"");
break;
case '\\':
ret.append(""String_Node_Str"");
break;
default :
ret.append((char)c);
break;
}
}
}"
86734,"public UserRole(String name){
  this.name=name;
}","private UserRole(String name){
  this.name=name;
}"
86735,"@Override public void validate() throws OpsGenieClientValidationException {
  super.validate();
  if (name == null && id == null)   throw OpsGenieClientValidationException.missingMultipleMandatoryProperty(OpsGenieClientConstants.API.NAME,OpsGenieClientConstants.API.ID);
}","/** 
 * check the parameters for validation.
 * @throws ValidationException when name and id are both null!
 */
@Override public void validate() throws OpsGenieClientValidationException {
  super.validate();
  if (name == null && id == null)   throw OpsGenieClientValidationException.missingMultipleMandatoryProperty(OpsGenieClientConstants.API.NAME,OpsGenieClientConstants.API.ID);
}"
86736,"@Override public void fromMap(Map resp){
  setName((String)resp.get(OpsGenieClientConstants.API.NAME));
  setLastHeartbeat(new Date(((Number)resp.get(OpsGenieClientConstants.API.LAST_HEARTBEAT)).longValue()));
  setEnabled((Boolean)resp.get(OpsGenieClientConstants.API.ENABLED));
  setDescription((String)resp.get(OpsGenieClientConstants.API.DESCRIPTION));
  setStatus((String)resp.get(OpsGenieClientConstants.API.STATUS));
  setExpired(""String_Node_Str"".equals(getStatus()));
  setInterval(((Number)resp.get(OpsGenieClientConstants.API.INTERVAL)).intValue());
  if (resp.containsKey(OpsGenieClientConstants.API.INTERVAL_UNIT)) {
    setIntervalUnit(IntervalUnit.valueOf((String)resp.get(OpsGenieClientConstants.API.INTERVAL_UNIT)));
  }
}","@Override public void fromMap(Map resp){
  setName((String)resp.get(OpsGenieClientConstants.API.NAME));
  if (resp.containsKey(OpsGenieClientConstants.API.LAST_HEARTBEAT))   setLastHeartbeat(new Date(((Number)resp.get(OpsGenieClientConstants.API.LAST_HEARTBEAT)).longValue()));
  setEnabled((Boolean)resp.get(OpsGenieClientConstants.API.ENABLED));
  setDescription((String)resp.get(OpsGenieClientConstants.API.DESCRIPTION));
  setStatus((String)resp.get(OpsGenieClientConstants.API.STATUS));
  setExpired(""String_Node_Str"".equals(getStatus()));
  if (resp.containsKey(OpsGenieClientConstants.API.INTERVAL))   setInterval(((Number)resp.get(OpsGenieClientConstants.API.INTERVAL)).intValue());
  if (resp.containsKey(OpsGenieClientConstants.API.INTERVAL_UNIT)) {
    setIntervalUnit(IntervalUnit.valueOf((String)resp.get(OpsGenieClientConstants.API.INTERVAL_UNIT)));
  }
}"
86737,"@Override public void deserialize(Map data) throws ParseException {
  super.deserialize(data);
  heartbeat=new Heartbeat();
  heartbeat.fromMap(data);
}","@Override public void deserialize(Map data) throws ParseException {
  System.out.println(""String_Node_Str"" + data);
  super.deserialize(data);
  heartbeat=new Heartbeat();
  heartbeat.fromMap(data);
}"
86738,"/** 
 * Change a notificationRule at OpsGenie.
 * @param addNotificationRuleRequest Object to construct request parameters.
 * @return <code>ChangeNotificationRuleResponse</code> object containing OpsGenie response information.
 * @see com.ifountain.opsgenie.client.model.notificationRule.ChangeNotificationRuleRequest
 * @see com.ifountain.opsgenie.client.model.notificationRule.ChangeNotificationRuleResponse
 */
public ChangeNotificationRuleResponse changeNotificationRule(ChangeNotificationRuleRequest changeNotificationRuleRequest) throws IOException, OpsGenieClientException, ParseException ;","/** 
 * Change a notificationRule at OpsGenie.
 * @param addNotificationRuleRequest Object to construct request parameters.
 * @return <code>ChangeNotificationRuleResponse</code> object containing OpsGenie response information.
 * @see com.ifountain.opsgenie.client.model.notificationRule.ChangeNotificationRuleOrderRequest
 * @see com.ifountain.opsgenie.client.model.notificationRule.ChangeNotificationRuleResponse
 */
public ChangeNotificationRuleOrderResponse changeNotificationRule(ChangeNotificationRuleOrderRequest changeNotificationRuleOrderRequest) throws IOException, OpsGenieClientException, ParseException ;"
86739,"@Override public ChangeNotificationRuleResponse changeNotificationRule(ChangeNotificationRuleRequest changeNotificationRuleRequest) throws IOException, OpsGenieClientException, ParseException {
  return (ChangeNotificationRuleResponse)httpClient.doPostRequest(changeNotificationRuleRequest);
}","@Override public ChangeNotificationRuleOrderResponse changeNotificationRule(ChangeNotificationRuleOrderRequest changeNotificationRuleRequest) throws IOException, OpsGenieClientException, ParseException {
  return (ChangeNotificationRuleOrderResponse)httpClient.doPostRequest(changeNotificationRuleRequest);
}"
86740,"/** 
 * check the parameters for validation. It will override by necessary Requests.
 * @throws ValidationException 
 */
public boolean isValid() throws ValidationException {
  if (apiKey == null)   throw new ValidationException(""String_Node_Str"");
  return true;
}","/** 
 * check the parameters for validation. It will be overridden by necessary Requests.
 * @throws ValidationException 
 */
public boolean isValid() throws ValidationException {
  if (apiKey == null)   throw new ValidationException(""String_Node_Str"");
  return true;
}"
86741,"@Override public void fromMap(Map map) throws ParseException {
  setId((String)map.get(OpsGenieClientConstants.API.ID));
  setUsername((String)map.get(OpsGenieClientConstants.API.USERNAME));
  setUserId((String)map.get(OpsGenieClientConstants.API.USER_ID));
  setTo((String)map.get(OpsGenieClientConstants.API.TO));
  setEnabled((Boolean)map.get(OpsGenieClientConstants.API.ENABLED));
  setDisabledReason((String)map.get(OpsGenieClientConstants.API.DISABLED_REASON));
  if (map.containsKey(OpsGenieClientConstants.API.METHOD)) {
    setMethod(Contact.Method.valueOf(((String)map.get(OpsGenieClientConstants.API.METHOD)).toLowerCase()));
  }
}","@Override public void fromMap(Map map) throws ParseException {
  setId((String)map.get(OpsGenieClientConstants.API.ID));
  setTo((String)map.get(OpsGenieClientConstants.API.TO));
  setEnabled((Boolean)map.get(OpsGenieClientConstants.API.ENABLED));
  setDisabledReason((String)map.get(OpsGenieClientConstants.API.DISABLED_REASON));
  if (map.containsKey(OpsGenieClientConstants.API.METHOD)) {
    setMethod(Contact.Method.valueOf(((String)map.get(OpsGenieClientConstants.API.METHOD)).toLowerCase()));
  }
}"
86742,"@Override public Map<String,Object> toMap(){
  Map<String,Object> json=new HashMap<String,Object>();
  json.put(OpsGenieClientConstants.API.USERNAME,username);
  json.put(OpsGenieClientConstants.API.USER_ID,userId);
  json.put(OpsGenieClientConstants.API.METHOD,getMethod() != null ? getMethod().name() : null);
  json.put(OpsGenieClientConstants.API.ENABLED,getEnabled());
  json.put(OpsGenieClientConstants.API.TO,to);
  json.put(OpsGenieClientConstants.API.DISABLED_REASON,disabledReason);
  return json;
}","@Override public Map<String,Object> toMap(){
  Map<String,Object> json=new HashMap<String,Object>();
  json.put(OpsGenieClientConstants.API.METHOD,getMethod() != null ? getMethod().name() : null);
  json.put(OpsGenieClientConstants.API.ENABLED,getEnabled());
  json.put(OpsGenieClientConstants.API.TO,to);
  json.put(OpsGenieClientConstants.API.DISABLED_REASON,disabledReason);
  return json;
}"
86743,"@Override public void fromMap(Map map) throws ParseException {
  if (map.containsKey(OpsGenieClientConstants.API.FIELD)) {
    String fieldName=(String)map.get(OpsGenieClientConstants.API.FIELD);
    for (    Field field : Field.values())     if (field.value().equals(fieldName)) {
      setField(field);
      break;
    }
  }
  if (map.containsKey(OpsGenieClientConstants.API.NOT))   this.not=(Boolean)map.get(OpsGenieClientConstants.API.NOT);
  if (map.containsKey(OpsGenieClientConstants.API.EXPECTED_VALUE))   this.expectedValue=(String)map.get(OpsGenieClientConstants.API.EXPECTED_VALUE);
  if (map.containsKey(OpsGenieClientConstants.API.OPERATION)) {
    String operationName=(String)map.get(OpsGenieClientConstants.API.OPERATION);
    for (    Operation operation : Operation.values())     if (field.value().equals(operationName)) {
      setOperation(operation);
      break;
    }
  }
}","@Override public void fromMap(Map map) throws ParseException {
  if (map.containsKey(OpsGenieClientConstants.API.FIELD)) {
    String fieldName=(String)map.get(OpsGenieClientConstants.API.FIELD);
    for (    Field field : Field.values())     if (field.value().equals(fieldName)) {
      setField(field);
      break;
    }
  }
  if (map.containsKey(OpsGenieClientConstants.API.NOT))   this.not=(Boolean)map.get(OpsGenieClientConstants.API.NOT);
  if (map.containsKey(OpsGenieClientConstants.API.EXPECTED_VALUE))   this.expectedValue=(String)map.get(OpsGenieClientConstants.API.EXPECTED_VALUE);
  if (map.containsKey(OpsGenieClientConstants.API.OPERATION)) {
    String operationName=(String)map.get(OpsGenieClientConstants.API.OPERATION);
    for (    Operation operation : Operation.values())     if (operation.value().equals(operationName)) {
      setOperation(operation);
      break;
    }
  }
}"
86744,"public static File getScriptFile(String action){
  String safeFileName=action.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String propertyKey=""String_Node_Str"" + safeFileName + ""String_Node_Str"".toLowerCase();
  String fileName=MaridConfig.getInstance().getLowercasedConfiguration().get(propertyKey);
  File scriptsDirectory=ScriptManager.getInstance().getScriptsDirectory();
  if (fileName == null) {
    fileName=safeFileName;
    File[] files=scriptsDirectory.listFiles();
    if (files != null) {
      for (      File file : files) {
        if (StringUtils.substringBeforeLast(file.getName(),""String_Node_Str"").equalsIgnoreCase(fileName)) {
          return file;
        }
      }
    }
  }
 else {
    File scriptFile=new File(scriptsDirectory,fileName);
    if (scriptFile.exists()) {
      return scriptFile;
    }
  }
  return null;
}","public static File getScriptFile(String action){
  String safeFileName=action.replaceAll(""String_Node_Str"",""String_Node_Str"");
  String propertyKey=(""String_Node_Str"" + safeFileName + ""String_Node_Str"").toLowerCase();
  String fileName=MaridConfig.getInstance().getLowercasedConfiguration().get(propertyKey);
  File scriptsDirectory=ScriptManager.getInstance().getScriptsDirectory();
  if (fileName == null) {
    fileName=safeFileName;
    File[] files=scriptsDirectory.listFiles();
    if (files != null) {
      for (      File file : files) {
        if (StringUtils.substringBeforeLast(file.getName(),""String_Node_Str"").equalsIgnoreCase(fileName)) {
          return file;
        }
      }
    }
  }
 else {
    File scriptFile=new File(scriptsDirectory,fileName);
    if (scriptFile.exists()) {
      return scriptFile;
    }
  }
  return null;
}"
86745,"@Override public void fromMap(Map map) throws ParseException {
  participant=(String)map.get(OpsGenieClientConstants.API.PARTICIPANT);
  if (map.containsKey(OpsGenieClientConstants.API.TYPE)) {
    type=Type.valueOf(((String)map.get(OpsGenieClientConstants.API.TYPE)).toLowerCase());
  }
}","@Override public void fromMap(Map map) throws ParseException {
  if (map.containsKey(OpsGenieClientConstants.API.PARTICIPANT)) {
    participant=(String)map.get(OpsGenieClientConstants.API.PARTICIPANT);
  }
 else {
    participant=(String)map.get(OpsGenieClientConstants.API.NAME);
  }
  if (map.containsKey(OpsGenieClientConstants.API.TYPE)) {
    type=Type.valueOf(((String)map.get(OpsGenieClientConstants.API.TYPE)).toLowerCase());
  }
}"
86746,"public void setScheduleTimeZone(TimeZone scheduleTimeZone){
  this.scheduleTimeZone=scheduleTimeZone;
}","/** 
 * Will be set by schedule
 * @param scheduleTimeZone
 */
public void setScheduleTimeZone(TimeZone scheduleTimeZone){
  this.scheduleTimeZone=scheduleTimeZone;
}"
86747,"@Override public void fromMap(Map map) throws ParseException {
  SimpleDateFormat sdf=new SimpleDateFormat(OpsGenieClientConstants.Common.API_DATE_FORMAT);
  if (scheduleTimeZone != null) {
    sdf.setTimeZone(scheduleTimeZone);
  }
  Object startDateObj=map.get(OpsGenieClientConstants.API.START_TIME);
  if (startDateObj != null) {
    if (startDateObj instanceof Date) {
      startDate=(Date)startDateObj;
    }
 else {
      String startDateStr=(String)map.get(OpsGenieClientConstants.API.START_TIME);
      startDate=sdf.parse(startDateStr);
    }
  }
  rotationType=RotationType.valueOf(((String)map.get(OpsGenieClientConstants.API.ROTATION_TYPE)).toLowerCase());
  if (map.containsKey(OpsGenieClientConstants.API.ROTATION_LENGTH)) {
    rotationLength=((Number)map.get(OpsGenieClientConstants.API.ROTATION_LENGTH)).intValue();
  }
  if (map.containsKey(OpsGenieClientConstants.API.PARTICIPANTS)) {
    List<Map> participantMaps=(List<Map>)map.get(OpsGenieClientConstants.API.PARTICIPANTS);
    participants=new ArrayList<ScheduleParticipant>();
    for (    Map participantMap : participantMaps) {
      ScheduleParticipant participant=new ScheduleParticipant();
      participant.fromMap(participantMap);
      participants.add(participant);
    }
  }
  if (map.containsKey(OpsGenieClientConstants.API.RESTRICTIONS)) {
    List<Map> restrictionMaps=(List<Map>)map.get(OpsGenieClientConstants.API.RESTRICTIONS);
    restrictions=new ArrayList<ScheduleRuleRestriction>();
    for (    Map restrictionMap : restrictionMaps) {
      ScheduleRuleRestriction scheduleRuleRestriction=new ScheduleRuleRestriction();
      scheduleRuleRestriction.fromMap(restrictionMap);
      restrictions.add(scheduleRuleRestriction);
    }
  }
}","@Override public void fromMap(Map map) throws ParseException {
  SimpleDateFormat sdf=new SimpleDateFormat(OpsGenieClientConstants.Common.API_DATE_FORMAT);
  if (scheduleTimeZone != null) {
    sdf.setTimeZone(scheduleTimeZone);
  }
  Object startDateObj=null;
  if (map.containsKey(OpsGenieClientConstants.API.START_DATE)) {
    startDateObj=map.get(OpsGenieClientConstants.API.START_DATE);
  }
 else {
    startDateObj=map.get(OpsGenieClientConstants.API.START_TIME);
  }
  if (startDateObj != null) {
    if (startDateObj instanceof Date) {
      startDate=(Date)startDateObj;
    }
 else {
      String startDateStr=(String)startDateObj;
      startDate=sdf.parse(startDateStr);
    }
  }
  rotationType=RotationType.valueOf(((String)map.get(OpsGenieClientConstants.API.ROTATION_TYPE)).toLowerCase());
  if (map.containsKey(OpsGenieClientConstants.API.ROTATION_LENGTH)) {
    rotationLength=((Number)map.get(OpsGenieClientConstants.API.ROTATION_LENGTH)).intValue();
  }
  if (map.containsKey(OpsGenieClientConstants.API.PARTICIPANTS)) {
    List<Map> participantMaps=(List<Map>)map.get(OpsGenieClientConstants.API.PARTICIPANTS);
    participants=new ArrayList<ScheduleParticipant>();
    for (    Map participantMap : participantMaps) {
      ScheduleParticipant participant=new ScheduleParticipant();
      participant.fromMap(participantMap);
      participants.add(participant);
    }
  }
  if (map.containsKey(OpsGenieClientConstants.API.RESTRICTIONS)) {
    List<Map> restrictionMaps=(List<Map>)map.get(OpsGenieClientConstants.API.RESTRICTIONS);
    restrictions=new ArrayList<ScheduleRuleRestriction>();
    for (    Map restrictionMap : restrictionMaps) {
      ScheduleRuleRestriction scheduleRuleRestriction=new ScheduleRuleRestriction();
      scheduleRuleRestriction.fromMap(restrictionMap);
      restrictions.add(scheduleRuleRestriction);
    }
  }
}"
86748,"public List<Map> listAlerts(Map params) throws Exception {
  populateCommonProps(params);
  ListAlertsRequest request=new ListAlertsRequest();
  request.setCreatedAfter(ScriptBridgeUtils.getAsLong(params,OpsGenieClientConstants.API.CREATED_AFTER));
  request.setCreatedBefore(ScriptBridgeUtils.getAsLong(params,OpsGenieClientConstants.API.CREATED_BEFORE));
  request.setUpdatedAfter(ScriptBridgeUtils.getAsLong(params,OpsGenieClientConstants.API.UPDATED_AFTER));
  request.setUpdatedBefore(ScriptBridgeUtils.getAsLong(params,OpsGenieClientConstants.API.UPDATED_BEFORE));
  request.setLimit(ScriptBridgeUtils.getAsInt(params,OpsGenieClientConstants.API.LIMIT));
  request.setSortBy(ListAlertsRequest.SortBy.valueOf(ScriptBridgeUtils.getAsString(params,OpsGenieClientConstants.API.SORT_BY)));
  request.setSortOrder(ListAlertsRequest.SortOrder.valueOf(ScriptBridgeUtils.getAsString(params,OpsGenieClientConstants.API.ORDER)));
  request.setStatus(ListAlertsRequest.Status.valueOf(ScriptBridgeUtils.getAsString(params,OpsGenieClientConstants.API.STATUS)));
  request.setCustomerKey(ScriptBridgeUtils.getAsString(params,OpsGenieClientConstants.API.CUSTOMER_KEY));
  return beansToMap(this.opsGenieClient.alert().listAlerts(request).getAlerts());
}","public List<Map> listAlerts(Map params) throws Exception {
  populateCommonProps(params);
  ListAlertsRequest request=new ListAlertsRequest();
  request.setCreatedAfter(ScriptBridgeUtils.getAsLong(params,OpsGenieClientConstants.API.CREATED_AFTER));
  request.setCreatedBefore(ScriptBridgeUtils.getAsLong(params,OpsGenieClientConstants.API.CREATED_BEFORE));
  request.setUpdatedAfter(ScriptBridgeUtils.getAsLong(params,OpsGenieClientConstants.API.UPDATED_AFTER));
  request.setUpdatedBefore(ScriptBridgeUtils.getAsLong(params,OpsGenieClientConstants.API.UPDATED_BEFORE));
  request.setLimit(ScriptBridgeUtils.getAsInt(params,OpsGenieClientConstants.API.LIMIT));
  if (params.containsKey(OpsGenieClientConstants.API.SORT_BY)) {
    request.setSortBy(ListAlertsRequest.SortBy.valueOf(ScriptBridgeUtils.getAsString(params,OpsGenieClientConstants.API.SORT_BY)));
  }
  if (params.containsKey(OpsGenieClientConstants.API.ORDER)) {
    request.setSortOrder(ListAlertsRequest.SortOrder.valueOf(ScriptBridgeUtils.getAsString(params,OpsGenieClientConstants.API.ORDER)));
  }
  if (params.containsKey(OpsGenieClientConstants.API.STATUS)) {
    request.setStatus(ListAlertsRequest.Status.valueOf(ScriptBridgeUtils.getAsString(params,OpsGenieClientConstants.API.STATUS)));
  }
  request.setCustomerKey(ScriptBridgeUtils.getAsString(params,OpsGenieClientConstants.API.CUSTOMER_KEY));
  return beansToMap(this.opsGenieClient.alert().listAlerts(request).getAlerts());
}"
86749,"public static List<String> getAsList(Map params,String propName){
  Object result=params.get(propName);
  if (result == null)   return null;
  List<String> elements=new ArrayList<String>();
  if (result.getClass().isArray()) {
    int length=Array.getLength(result);
    for (int i=0; i < length; i++) {
      elements.add(String.valueOf(Array.get(result,i)));
    }
  }
  if (result instanceof Collection) {
    for (    Object collElement : (Collection)result) {
      if (collElement == null) {
        elements.add(null);
      }
 else {
        elements.add(String.valueOf(collElement));
      }
    }
  }
 else {
    elements.add(String.valueOf(result));
  }
  return elements;
}","public static List<String> getAsList(Map params,String propName){
  Object result=params.get(propName);
  if (result == null)   return null;
  List<String> elements=new ArrayList<String>();
  if (result.getClass().isArray()) {
    int length=Array.getLength(result);
    for (int i=0; i < length; i++) {
      elements.add(String.valueOf(Array.get(result,i)));
    }
  }
 else   if (result instanceof Collection) {
    for (    Object collElement : (Collection)result) {
      if (collElement == null) {
        elements.add(null);
      }
 else {
        elements.add(String.valueOf(collElement));
      }
    }
  }
 else {
    elements.add(String.valueOf(result));
  }
  return elements;
}"
86750,"private void createHttpClient(){
  String userAgent=config.getUserAgent();
  HttpParams httpClientParams=new BasicHttpParams();
  HttpProtocolParams.setUserAgent(httpClientParams,userAgent);
  HttpConnectionParams.setConnectionTimeout(httpClientParams,config.getConnectionTimeout());
  HttpConnectionParams.setSoTimeout(httpClientParams,config.getSocketTimeout());
  HttpConnectionParams.setStaleCheckingEnabled(httpClientParams,true);
  HttpConnectionParams.setTcpNoDelay(httpClientParams,true);
  int socketSendBufferSizeHint=config.getSocketSendBufferSizeHint();
  int socketReceiveBufferSizeHint=config.getSocketReceiveBufferSizeHint();
  if ((socketSendBufferSizeHint > 0) || (socketReceiveBufferSizeHint > 0)) {
    HttpConnectionParams.setSocketBufferSize(httpClientParams,Math.max(socketSendBufferSizeHint,socketReceiveBufferSizeHint));
  }
  ThreadSafeClientConnManager connectionManager=new ThreadSafeClientConnManager();
  connectionManager.setDefaultMaxPerRoute(config.getMaxConnections());
  connectionManager.setMaxTotal(config.getMaxConnections());
  httpClient=new DefaultHttpClient(connectionManager,httpClientParams);
  Scheme sch=new Scheme(""String_Node_Str"",443,new TrustingSocketFactory());
  httpClient.getConnectionManager().getSchemeRegistry().register(sch);
  httpClient.setHttpRequestRetryHandler(config.getRetryHandler());
  String proxyHost=config.getProxyHost();
  int proxyPort=config.getProxyPort();
  if ((proxyHost != null) && (proxyPort > 0)) {
    HttpHost proxyHttpHost=new HttpHost(proxyHost,proxyPort);
    httpClient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,proxyHttpHost);
    String proxyUsername=config.getProxyUsername();
    String proxyPassword=config.getProxyPassword();
    String proxyDomain=config.getProxyDomain();
    String proxyWorkstation=config.getProxyWorkstation();
    if ((proxyUsername != null) && (proxyPassword != null)) {
      httpClient.getCredentialsProvider().setCredentials(new AuthScope(proxyHost,proxyPort),new NTCredentials(proxyUsername,proxyPassword,proxyWorkstation,proxyDomain));
    }
  }
}","private void createHttpClient(){
  String userAgent=config.getUserAgent();
  HttpParams httpClientParams=new BasicHttpParams();
  HttpProtocolParams.setUserAgent(httpClientParams,userAgent);
  HttpConnectionParams.setConnectionTimeout(httpClientParams,config.getConnectionTimeout());
  HttpConnectionParams.setSoTimeout(httpClientParams,config.getSocketTimeout());
  HttpConnectionParams.setStaleCheckingEnabled(httpClientParams,true);
  HttpConnectionParams.setTcpNoDelay(httpClientParams,true);
  int socketSendBufferSizeHint=config.getSocketSendBufferSizeHint();
  int socketReceiveBufferSizeHint=config.getSocketReceiveBufferSizeHint();
  if ((socketSendBufferSizeHint > 0) || (socketReceiveBufferSizeHint > 0)) {
    HttpConnectionParams.setSocketBufferSize(httpClientParams,Math.max(socketSendBufferSizeHint,socketReceiveBufferSizeHint));
  }
  ThreadSafeClientConnManager connectionManager=new ThreadSafeClientConnManager();
  connectionManager.setDefaultMaxPerRoute(config.getMaxConnections());
  connectionManager.setMaxTotal(config.getMaxConnections());
  httpClient=new DefaultHttpClient(connectionManager,httpClientParams);
  try {
    SSLSocketFactory sf=createSocketFactory();
    httpClient.getConnectionManager().getSchemeRegistry().register(new Scheme(""String_Node_Str"",443,sf));
  }
 catch (  Exception ignored) {
  }
  httpClient.setHttpRequestRetryHandler(config.getRetryHandler());
  String proxyHost=config.getProxyHost();
  int proxyPort=config.getProxyPort();
  if ((proxyHost != null) && (proxyPort > 0)) {
    HttpHost proxyHttpHost=new HttpHost(proxyHost,proxyPort);
    httpClient.getParams().setParameter(ConnRoutePNames.DEFAULT_PROXY,proxyHttpHost);
    String proxyUsername=config.getProxyUsername();
    String proxyPassword=config.getProxyPassword();
    String proxyDomain=config.getProxyDomain();
    String proxyWorkstation=config.getProxyWorkstation();
    if ((proxyUsername != null) && (proxyPassword != null)) {
      httpClient.getCredentialsProvider().setCredentials(new AuthScope(proxyHost,proxyPort),new NTCredentials(proxyUsername,proxyPassword,proxyWorkstation,proxyDomain));
    }
  }
}"
86751,"public X509Certificate[] getAcceptedIssuers(){
  return X509_CERTIFICATES;
}","public X509Certificate[] getAcceptedIssuers(){
  return null;
}"
86752,"public Map getAlert(Map params) throws Exception {
  GetAlertRequest request=new GetAlertRequest();
  request.setAlertId(OpsGenieClientScriptingBridgeUtils.getAsString(params,OpsGenieClientConstants.API.ALERT_ID));
  request.setAlias(OpsGenieClientScriptingBridgeUtils.getAsString(params,OpsGenieClientConstants.API.ALIAS));
  request.setCustomerKey(OpsGenieClientScriptingBridgeUtils.getAsString(params,OpsGenieClientConstants.API.CUSTOMER_KEY));
  GetAlertResponse resp=this.opsGenieClient.getAlert(request);
  Map mapResponse=new HashMap();
  mapResponse.put(OpsGenieClientConstants.API.ACTIONS,resp.getActions());
  mapResponse.put(OpsGenieClientConstants.API.MESSAGE,resp.getMessage());
  mapResponse.put(OpsGenieClientConstants.API.ALERT_ID,resp.getId());
  mapResponse.put(OpsGenieClientConstants.API.ALIAS,resp.getAlias());
  mapResponse.put(OpsGenieClientConstants.API.TAGS,resp.getTags());
  mapResponse.put(OpsGenieClientConstants.API.CREATED_AT,resp.getCreatedAt());
  mapResponse.put(OpsGenieClientConstants.API.DESCRIPTION,resp.getDescription());
  mapResponse.put(OpsGenieClientConstants.API.DETAILS,resp.getDetails());
  mapResponse.put(OpsGenieClientConstants.API.RECIPIENTS,resp.getRecipients());
  mapResponse.put(OpsGenieClientConstants.API.SOURCE,resp.getSource());
  mapResponse.put(OpsGenieClientConstants.API.ENTITY,resp.getEntity());
  mapResponse.put(OpsGenieClientConstants.API.STATUS,resp.getStatus());
  return mapResponse;
}","public Map getAlert(Map params) throws Exception {
  populateCommonProps(params);
  GetAlertRequest request=new GetAlertRequest();
  request.setAlertId(OpsGenieClientScriptingBridgeUtils.getAsString(params,OpsGenieClientConstants.API.ALERT_ID));
  request.setAlias(OpsGenieClientScriptingBridgeUtils.getAsString(params,OpsGenieClientConstants.API.ALIAS));
  request.setCustomerKey(OpsGenieClientScriptingBridgeUtils.getAsString(params,OpsGenieClientConstants.API.CUSTOMER_KEY));
  GetAlertResponse resp=this.opsGenieClient.getAlert(request);
  Map mapResponse=new HashMap();
  mapResponse.put(OpsGenieClientConstants.API.ACTIONS,resp.getActions());
  mapResponse.put(OpsGenieClientConstants.API.MESSAGE,resp.getMessage());
  mapResponse.put(OpsGenieClientConstants.API.ALERT_ID,resp.getId());
  mapResponse.put(OpsGenieClientConstants.API.ALIAS,resp.getAlias());
  mapResponse.put(OpsGenieClientConstants.API.TAGS,resp.getTags());
  mapResponse.put(OpsGenieClientConstants.API.CREATED_AT,resp.getCreatedAt());
  mapResponse.put(OpsGenieClientConstants.API.DESCRIPTION,resp.getDescription());
  mapResponse.put(OpsGenieClientConstants.API.DETAILS,resp.getDetails());
  mapResponse.put(OpsGenieClientConstants.API.RECIPIENTS,resp.getRecipients());
  mapResponse.put(OpsGenieClientConstants.API.SOURCE,resp.getSource());
  mapResponse.put(OpsGenieClientConstants.API.ENTITY,resp.getEntity());
  mapResponse.put(OpsGenieClientConstants.API.STATUS,resp.getStatus());
  return mapResponse;
}"
86753,"public Map heartbeat(Map params) throws Exception {
  HeartbeatRequest request=new HeartbeatRequest();
  request.setCustomerKey(OpsGenieClientScriptingBridgeUtils.getAsString(params,OpsGenieClientConstants.API.CUSTOMER_KEY));
  HeartbeatResponse resp=this.opsGenieClient.heartbeat(request);
  Map mapResponse=new HashMap();
  mapResponse.put(""String_Node_Str"",resp.getHeartbeat());
  return mapResponse;
}","public Map heartbeat(Map params) throws Exception {
  populateCommonProps(params);
  HeartbeatRequest request=new HeartbeatRequest();
  request.setCustomerKey(OpsGenieClientScriptingBridgeUtils.getAsString(params,OpsGenieClientConstants.API.CUSTOMER_KEY));
  HeartbeatResponse resp=this.opsGenieClient.heartbeat(request);
  Map mapResponse=new HashMap();
  mapResponse.put(""String_Node_Str"",resp.getHeartbeat());
  return mapResponse;
}"
86754,"public void executeScript(String script,Map params) throws Exception {
  ExecuteScriptCommand.executeScript(script,opsGenieClient,options,params);
}","public void executeScript(String script,Map params,Map config) throws Exception {
  CommonCommandOptions defaultOptions=options;
  if (config != null) {
    ArrayList<String> user=new ArrayList<String>();
    user.add((String)config.get(""String_Node_Str""));
    defaultOptions=new CommonCommandOptions();
    defaultOptions.setCustomerKey((String)config.get(""String_Node_Str""));
    defaultOptions.setUser(user);
  }
  ExecuteScriptCommand.executeScript(script,opsGenieClient,defaultOptions,params);
}"
86755,"private void populateCommonProps(Map params){
  String customerKey=OpsGenieClientScriptingBridgeUtils.getAsString(params,OpsGenieClientConstants.API.CUSTOMER_KEY);
  if (customerKey == null) {
    params.put(OpsGenieClientConstants.API.CUSTOMER_KEY,options.getCustomerKey());
  }
  String user=OpsGenieClientScriptingBridgeUtils.getAsString(params,OpsGenieClientConstants.API.USER);
  if (user == null) {
    params.put(OpsGenieClientConstants.API.USER,options.getUser());
  }
}","private void populateCommonProps(CommonCommandOptions options,Map params){
  String customerKey=OpsGenieClientScriptingBridgeUtils.getAsString(params,OpsGenieClientConstants.API.CUSTOMER_KEY);
  if (customerKey == null) {
    params.put(OpsGenieClientConstants.API.CUSTOMER_KEY,options.getCustomerKey());
  }
  String user=OpsGenieClientScriptingBridgeUtils.getAsString(params,OpsGenieClientConstants.API.USER);
  if (user == null) {
    params.put(OpsGenieClientConstants.API.USER,options.getUser());
  }
}"
86756,"/** 
 * @see DefinitionMappingHandler#getCreateUrl(Class)
 */
public String getCreateUrl(Class<? extends Definition> type){
  return ""String_Node_Str"" + type.getName() + ""String_Node_Str""+ type.getName();
}","/** 
 * @see DefinitionMappingHandler#getCreateUrl(Class)
 */
public String getCreateUrl(Class<? extends Definition> type){
  DefinitionService svc=DefinitionContext.getDefinitionService(type);
  Class<? extends Definition> parentType=svc.getDefinitionType();
  return ""String_Node_Str"" + type.getName() + ""String_Node_Str""+ parentType.getName();
}"
86757,"/** 
 * @see CohortDefinitionEvaluator#evaluate(CohortDefinition,EvaluationContext)
 * @should return patients in the specified states before the start date
 * @should return patients in the specified states after the start date
 * @should return patients in the specified states before the end date
 * @should return patients in the specified states after the end date
 * @should find patients in specified states on the before start date if passed in time is at midnight
 * @should find patients in specified states on the before end date if passed in time is at midnight
 */
public EvaluatedCohort evaluate(CohortDefinition cohortDefinition,EvaluationContext context){
  PatientStateCohortDefinition def=(PatientStateCohortDefinition)cohortDefinition;
  HqlQueryBuilder qb=new HqlQueryBuilder();
  qb.select(""String_Node_Str"");
  qb.from(PatientState.class,""String_Node_Str"");
  qb.whereIn(""String_Node_Str"",def.getStates());
  qb.whereGreaterOrEqualTo(""String_Node_Str"",def.getStartedOnOrAfter());
  qb.whereLessOrEqualTo(""String_Node_Str"",def.getStartedOnOrBefore());
  qb.whereGreaterOrEqualTo(""String_Node_Str"",def.getEndedOnOrAfter());
  qb.whereLessOrEqualTo(""String_Node_Str"",def.getEndedOnOrBefore());
  qb.whereIn(""String_Node_Str"",def.getLocationList());
  qb.wherePatientIn(""String_Node_Str"",context);
  List<Integer> pIds=evaluationService.evaluateToList(qb,Integer.class,context);
  return new EvaluatedCohort(new Cohort(pIds),cohortDefinition,context);
}","/** 
 * @see CohortDefinitionEvaluator#evaluate(CohortDefinition,EvaluationContext)
 * @should return patients in the specified states before the start date
 * @should return patients in the specified states after the start date
 * @should return patients in the specified states before the end date
 * @should return patients in the specified states after the end date
 * @should find patients in specified states on the before start date if passed in time is at midnight
 * @should find patients in specified states on the before end date if passed in time is at midnight
 */
public EvaluatedCohort evaluate(CohortDefinition cohortDefinition,EvaluationContext context){
  PatientStateCohortDefinition def=(PatientStateCohortDefinition)cohortDefinition;
  HqlQueryBuilder qb=new HqlQueryBuilder();
  qb.select(""String_Node_Str"");
  qb.from(PatientState.class,""String_Node_Str"");
  qb.whereIn(""String_Node_Str"",def.getStates());
  qb.whereGreaterOrEqualTo(""String_Node_Str"",def.getStartedOnOrAfter());
  qb.whereLessOrEqualTo(""String_Node_Str"",def.getStartedOnOrBefore());
  qb.whereGreaterOrEqualTo(""String_Node_Str"",def.getEndedOnOrAfter());
  qb.whereLessOrEqualTo(""String_Node_Str"",def.getEndedOnOrBefore());
  qb.whereIn(""String_Node_Str"",def.getLocationList());
  qb.whereEqual(""String_Node_Str"",false);
  qb.wherePatientIn(""String_Node_Str"",context);
  List<Integer> pIds=evaluationService.evaluateToList(qb,Integer.class,context);
  return new EvaluatedCohort(new Cohort(pIds),cohortDefinition,context);
}"
86758,"/** 
 * Adds in a Row to the given Sheet
 */
public Row addRow(Workbook wb,SheetToAdd sheetToAdd,RowToAdd rowToAdd,int rowIndex,ReportData reportData,ReportDesign design,Map<String,String> repeatSections){
  Row newRow=sheetToAdd.getSheet().createRow(rowIndex);
  Row rowToClone=rowToAdd.getRowToClone();
  try {
    CellStyle rowStyle=rowToClone.getRowStyle();
    if (rowStyle != null) {
      newRow.setRowStyle(rowStyle);
    }
  }
 catch (  Exception e) {
  }
  newRow.setHeight(rowToClone.getHeight());
  List<CellToAdd> cellsToAdd=new ArrayList<CellToAdd>();
  int totalCells=rowToClone.getPhysicalNumberOfCells();
  int cellsFound=0;
  for (int cellNum=0; cellsFound < totalCells; cellNum++) {
    Cell currentCell=rowToClone.getCell(cellNum);
    log.debug(""String_Node_Str"" + currentCell);
    if (currentCell != null) {
      cellsFound++;
    }
    String repeatingColumnProperty=getRepeatingColumnProperty(sheetToAdd.getOriginalSheetNum(),cellNum,repeatSections);
    if (repeatingColumnProperty != null) {
      String[] dataSetSpanSplit=repeatingColumnProperty.split(""String_Node_Str"");
      String dataSetName=dataSetSpanSplit[0];
      DataSet dataSet=getDataSet(reportData,dataSetName,rowToAdd.getReplacementData());
      int numCellsToRepeat=1;
      if (dataSetSpanSplit.length == 2) {
        numCellsToRepeat=Integer.parseInt(dataSetSpanSplit[1]);
      }
      log.debug(""String_Node_Str"" + dataSet + ""String_Node_Str""+ numCellsToRepeat);
      int repeatNum=0;
      for (      DataSetRow dataSetRow : dataSet) {
        repeatNum++;
        for (int i=0; i < numCellsToRepeat; i++) {
          Cell cell=(i == 0 ? currentCell : rowToClone.getCell(cellNum + i));
          if (repeatNum == 1 && cell != null && cell != currentCell) {
            cellsFound++;
          }
          Map<String,Object> newReplacements=getReplacementData(rowToAdd.getReplacementData(),reportData,design,dataSetName,dataSetRow,repeatNum);
          cellsToAdd.add(new CellToAdd(cell,newReplacements));
          log.debug(""String_Node_Str"" + cell + ""String_Node_Str""+ dataSetRow);
        }
      }
      cellNum+=numCellsToRepeat;
    }
 else {
      cellsToAdd.add(new CellToAdd(currentCell,rowToAdd.getReplacementData()));
      log.debug(""String_Node_Str"" + currentCell);
    }
  }
  String prefix=getExpressionPrefix(design);
  String suffix=getExpressionSuffix(design);
  for (int i=0; i < cellsToAdd.size(); i++) {
    CellToAdd cellToAdd=cellsToAdd.get(i);
    Cell newCell=newRow.createCell(i);
    Cell cellToClone=cellToAdd.getCellToClone();
    if (cellToClone != null) {
      Object contents=ExcelUtil.getCellContents(cellToClone);
      newCell.setCellStyle(cellToClone.getCellStyle());
      try {
        newCell.setCellFormula(cellToClone.getCellFormula());
      }
 catch (      Exception e) {
      }
      int numFormattings=sheetToAdd.getSheet().getSheetConditionalFormatting().getNumConditionalFormattings();
      for (int n=0; n < numFormattings; n++) {
        ConditionalFormatting f=sheetToAdd.getSheet().getSheetConditionalFormatting().getConditionalFormattingAt(n);
        for (        CellRangeAddress add : f.getFormattingRanges()) {
          if (add.getFirstRow() == rowToAdd.getRowToClone().getRowNum() && add.getLastRow() == rowToClone.getRowNum()) {
            if (add.getFirstColumn() == cellToClone.getColumnIndex() && add.getLastColumn() == cellToClone.getColumnIndex()) {
              ConditionalFormattingRule[] rules=new ConditionalFormattingRule[f.getNumberOfRules()];
              for (int j=0; j < f.getNumberOfRules(); j++) {
                rules[j]=f.getRule(j);
              }
              CellRangeAddress[] cellRange=new CellRangeAddress[1];
              cellRange[0]=new CellRangeAddress(rowIndex,rowIndex,i,i);
              sheetToAdd.getSheet().getSheetConditionalFormatting().addConditionalFormatting(cellRange,rules);
            }
          }
        }
      }
      if (ObjectUtil.notNull(contents)) {
        if (contents instanceof String) {
          contents=EvaluationUtil.evaluateExpression(contents.toString(),cellToAdd.getReplacementData(),prefix,suffix);
        }
        ExcelUtil.setCellContents(newCell,contents);
      }
    }
  }
  return newRow;
}","/** 
 * Adds in a Row to the given Sheet
 */
public Row addRow(Workbook wb,SheetToAdd sheetToAdd,RowToAdd rowToAdd,int rowIndex,ReportData reportData,ReportDesign design,Map<String,String> repeatSections){
  Row newRow=sheetToAdd.getSheet().createRow(rowIndex);
  Row rowToClone=rowToAdd.getRowToClone();
  try {
    CellStyle rowStyle=rowToClone.getRowStyle();
    if (rowStyle != null) {
      newRow.setRowStyle(rowStyle);
    }
  }
 catch (  Exception e) {
  }
  newRow.setHeight(rowToClone.getHeight());
  List<CellToAdd> cellsToAdd=new ArrayList<CellToAdd>();
  int totalCells=rowToClone.getPhysicalNumberOfCells();
  int cellsFound=0;
  for (int cellNum=0; cellsFound < totalCells; cellNum++) {
    Cell currentCell=rowToClone.getCell(cellNum);
    log.debug(""String_Node_Str"" + currentCell);
    if (currentCell != null) {
      cellsFound++;
    }
    String repeatingColumnProperty=getRepeatingColumnProperty(sheetToAdd.getOriginalSheetNum(),cellNum,repeatSections);
    if (repeatingColumnProperty != null) {
      String[] dataSetSpanSplit=repeatingColumnProperty.split(""String_Node_Str"");
      String dataSetName=dataSetSpanSplit[0];
      DataSet dataSet=getDataSet(reportData,dataSetName,rowToAdd.getReplacementData());
      int numCellsToRepeat=1;
      if (dataSetSpanSplit.length == 2) {
        numCellsToRepeat=Integer.parseInt(dataSetSpanSplit[1]);
      }
      log.debug(""String_Node_Str"" + dataSet + ""String_Node_Str""+ numCellsToRepeat);
      int repeatNum=0;
      for (      DataSetRow dataSetRow : dataSet) {
        repeatNum++;
        for (int i=0; i < numCellsToRepeat; i++) {
          Cell cell=(i == 0 ? currentCell : rowToClone.getCell(cellNum + i));
          if (repeatNum == 1 && cell != null && cell != currentCell) {
            cellsFound++;
          }
          Map<String,Object> newReplacements=getReplacementData(rowToAdd.getReplacementData(),reportData,design,dataSetName,dataSetRow,repeatNum);
          cellsToAdd.add(new CellToAdd(cell,newReplacements));
          log.debug(""String_Node_Str"" + cell + ""String_Node_Str""+ dataSetRow);
        }
      }
      cellNum+=numCellsToRepeat;
    }
 else {
      cellsToAdd.add(new CellToAdd(currentCell,rowToAdd.getReplacementData()));
      log.debug(""String_Node_Str"" + currentCell);
    }
  }
  String prefix=getExpressionPrefix(design);
  String suffix=getExpressionSuffix(design);
  List<CellRangeAddress> newMergedRegions=new ArrayList<CellRangeAddress>();
  for (int i=0; i < cellsToAdd.size(); i++) {
    CellToAdd cellToAdd=cellsToAdd.get(i);
    Cell newCell=newRow.createCell(i);
    Cell cellToClone=cellToAdd.getCellToClone();
    if (cellToClone != null) {
      Object contents=ExcelUtil.getCellContents(cellToClone);
      newCell.setCellStyle(cellToClone.getCellStyle());
      try {
        newCell.setCellFormula(cellToClone.getCellFormula());
      }
 catch (      Exception e) {
      }
      int numFormattings=sheetToAdd.getSheet().getSheetConditionalFormatting().getNumConditionalFormattings();
      for (int n=0; n < numFormattings; n++) {
        ConditionalFormatting f=sheetToAdd.getSheet().getSheetConditionalFormatting().getConditionalFormattingAt(n);
        for (        CellRangeAddress add : f.getFormattingRanges()) {
          if (add.getFirstRow() == rowToAdd.getRowToClone().getRowNum() && add.getLastRow() == rowToClone.getRowNum()) {
            if (add.getFirstColumn() == cellToClone.getColumnIndex() && add.getLastColumn() == cellToClone.getColumnIndex()) {
              ConditionalFormattingRule[] rules=new ConditionalFormattingRule[f.getNumberOfRules()];
              for (int j=0; j < f.getNumberOfRules(); j++) {
                rules[j]=f.getRule(j);
              }
              CellRangeAddress[] cellRange=new CellRangeAddress[1];
              cellRange[0]=new CellRangeAddress(rowIndex,rowIndex,i,i);
              sheetToAdd.getSheet().getSheetConditionalFormatting().addConditionalFormatting(cellRange,rules);
            }
          }
        }
      }
      int numMergedRegions=sheetToAdd.getSheet().getNumMergedRegions();
      for (int n=0; n < numMergedRegions; n++) {
        CellRangeAddress add=sheetToAdd.getSheet().getMergedRegion(n);
        int rowNum=rowToClone.getRowNum();
        if (add.getFirstRow() == rowNum && add.getLastRow() == rowNum) {
          if (add.getFirstColumn() == cellToClone.getColumnIndex()) {
            newMergedRegions.add(new CellRangeAddress(rowNum,rowNum,i,i + add.getNumberOfCells() - 1));
          }
        }
      }
      if (ObjectUtil.notNull(contents)) {
        if (contents instanceof String) {
          contents=EvaluationUtil.evaluateExpression(contents.toString(),cellToAdd.getReplacementData(),prefix,suffix);
        }
        ExcelUtil.setCellContents(newCell,contents);
      }
    }
  }
  for (  CellRangeAddress mergedRegion : newMergedRegions) {
    sheetToAdd.getSheet().addMergedRegion(mergedRegion);
  }
  return newRow;
}"
86759,"public HqlQueryBuilder whereLike(String propertyName,Object propertyValue){
  if (propertyValue != null) {
    where(propertyName + ""String_Node_Str"" + nextPositionIndex()).withValue(propertyValue);
  }
  return this;
}","public HqlQueryBuilder whereLike(String propertyName,Object propertyValue){
  if (propertyValue != null) {
    String s=propertyValue.toString();
    if (s.indexOf(""String_Node_Str"") == -1) {
      s=""String_Node_Str"" + s + ""String_Node_Str"";
    }
    where(propertyName + ""String_Node_Str"" + nextPositionIndex()).withValue(s);
  }
  return this;
}"
86760,"/** 
 * @param patientQuery the patientQuery to set
 */
public void setPatientQuery(CohortDefinition patientQuery){
  this.patientQuery=patientQuery;
}","/** 
 * @param patientQuery the patientQuery to set
 */
public void setPatientQuery(CohortDefinition patientQuery){
  this.patientQuery=patientQuery;
  this.setParameters(patientQuery.getParameters());
}"
86761,"/** 
 * Full Constructor
 */
public PatientEncounterQuery(CohortDefinition patientQuery){
  this.patientQuery=patientQuery;
}","/** 
 * Full Constructor
 */
public PatientEncounterQuery(CohortDefinition patientQuery){
  setPatientQuery(patientQuery);
}"
86762,"/** 
 * Full Constructor
 */
public PatientPersonQuery(CohortDefinition patientQuery){
  this.patientQuery=patientQuery;
}","/** 
 * Full Constructor
 */
public PatientPersonQuery(CohortDefinition patientQuery){
  setPatientQuery(patientQuery);
}"
86763,"/** 
 * @param patientQuery the patientQuery to set
 */
public void setPatientQuery(CohortDefinition patientQuery){
  this.patientQuery=patientQuery;
}","/** 
 * @param patientQuery the patientQuery to set
 */
public void setPatientQuery(CohortDefinition patientQuery){
  this.patientQuery=patientQuery;
  this.setParameters(patientQuery.getParameters());
}"
86764,"/** 
 * @see ReportService#saveReport(Report,String)
 */
public Report saveReport(Report report,String description){
  String reportRequestUuid=report.getRequest().getUuid();
  CachedReportData cachedData=persistCachedReportDataToDisk(reportRequestUuid);
  if (cachedData.isPersisted()) {
    ReportRequest request=Context.getService(ReportService.class).getReportRequest(report.getRequest().getId());
    request.setStatus(Status.SAVED);
    request.setDescription(description);
    Context.getService(ReportService.class).saveReportRequest(request);
    logReportMessage(request,""String_Node_Str"");
    report.setRequest(request);
    return report;
  }
 else {
    throw new ReportingException(""String_Node_Str"");
  }
}","/** 
 * @see ReportService#saveReport(Report,String)
 */
public Report saveReport(Report report,String description){
  String reportRequestUuid=report.getRequest().getUuid();
  CachedReportData cachedData=persistCachedReportDataToDisk(reportRequestUuid);
  if (cachedData != null && !cachedData.isPersisted()) {
    throw new ReportingException(""String_Node_Str"");
  }
  ReportRequest request=Context.getService(ReportService.class).getReportRequest(report.getRequest().getId());
  request.setStatus(Status.SAVED);
  request.setDescription(description);
  Context.getService(ReportService.class).saveReportRequest(request);
  logReportMessage(request,""String_Node_Str"");
  report.setRequest(request);
  return report;
}"
86765,"/** 
 * Saves the CachedReportData to disk
 */
protected CachedReportData persistCachedReportDataToDisk(String reportRequestUuid){
  CachedReportData cachedData=reportCache.get(reportRequestUuid);
  if (cachedData.isPersisted()) {
    log.debug(""String_Node_Str"");
  }
 else {
    ReportRequest request=getReportRequestByUuid(reportRequestUuid);
    BufferedOutputStream out=null;
    try {
      Timer timer=Timer.start();
      File reportDataFile=getReportDataFile(request);
      log.info(timer.logInterval(""String_Node_Str"" + reportDataFile.getPath()));
      out=new BufferedOutputStream(new FileOutputStream(reportDataFile));
      ReportingSerializer serializer=(ReportingSerializer)Context.getSerializationService().getSerializer(ReportingSerializer.class);
      serializer.serializeToStream(cachedData.getReportData(),out);
      log.info(timer.logInterval(""String_Node_Str""));
      cachedData.setPersisted(true);
    }
 catch (    Exception e) {
      log.warn(""String_Node_Str"",e);
    }
 finally {
      IOUtils.closeQuietly(out);
    }
  }
  return cachedData;
}","/** 
 * Saves the CachedReportData to disk
 */
protected CachedReportData persistCachedReportDataToDisk(String reportRequestUuid){
  CachedReportData cachedData=reportCache.get(reportRequestUuid);
  if (cachedData != null) {
    if (cachedData.isPersisted()) {
      log.debug(""String_Node_Str"");
    }
 else {
      ReportRequest request=getReportRequestByUuid(reportRequestUuid);
      BufferedOutputStream out=null;
      try {
        Timer timer=Timer.start();
        File reportDataFile=getReportDataFile(request);
        log.info(timer.logInterval(""String_Node_Str"" + reportDataFile.getPath()));
        out=new BufferedOutputStream(new FileOutputStream(reportDataFile));
        ReportingSerializer serializer=(ReportingSerializer)Context.getSerializationService().getSerializer(ReportingSerializer.class);
        serializer.serializeToStream(cachedData.getReportData(),out);
        log.info(timer.logInterval(""String_Node_Str""));
        cachedData.setPersisted(true);
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"",e);
      }
 finally {
        IOUtils.closeQuietly(out);
      }
    }
  }
  return cachedData;
}"
86766,"/** 
 * Sets the passed cell to the passed value
 * @param cell the cell to set
 * @param cellValue the value to set the cell to
 */
public static void setCellContents(Cell cell,Object cellValue){
  Workbook wb=cell.getSheet().getWorkbook();
  if (cellValue == null) {
    cellValue=""String_Node_Str"";
  }
  if (!cellHasValueSet(cell) || !cellValue.equals(getCellContents(cell))) {
    if (cellValue instanceof Number) {
      cell.setCellValue(((Number)cellValue).doubleValue());
      return;
    }
    if (cellValue instanceof Date) {
      cell.setCellValue(((Date)cellValue));
      return;
    }
    String cellValueString=ObjectUtil.format(cellValue);
    try {
      if (cell.getCellType() == Cell.CELL_TYPE_BOOLEAN) {
        cell.setCellValue(Boolean.valueOf(cellValueString));
        return;
      }
      if (cell.getCellType() == Cell.CELL_TYPE_FORMULA) {
        cell.setCellFormula(cellValueString);
        return;
      }
      if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {
        cell.setCellValue(Double.parseDouble(cellValueString));
        return;
      }
    }
 catch (    Exception e) {
    }
    try {
      cell.setCellValue(wb.getCreationHelper().createRichTextString(Integer.toString(Integer.parseInt(cellValueString))));
      return;
    }
 catch (    Exception e) {
    }
    try {
      cell.setCellValue(wb.getCreationHelper().createRichTextString(Double.toString(Double.parseDouble(cellValueString))));
      return;
    }
 catch (    Exception e) {
    }
    cell.setCellValue(wb.getCreationHelper().createRichTextString(cellValueString));
    return;
  }
  return;
}","/** 
 * Sets the passed cell to the passed value
 * @param cell the cell to set
 * @param cellValue the value to set the cell to
 */
public static void setCellContents(Cell cell,Object cellValue){
  Workbook wb=cell.getSheet().getWorkbook();
  if (cellValue == null) {
    cellValue=""String_Node_Str"";
  }
  if (!cellHasValueSet(cell) || !cellValue.equals(getCellContents(cell))) {
    if (cellValue instanceof Number) {
      cell.setCellValue(((Number)cellValue).doubleValue());
      return;
    }
    if (cellValue instanceof Date) {
      cell.setCellValue(((Date)cellValue));
      return;
    }
    String cellValueString=ObjectUtil.format(cellValue);
    try {
      if (cell.getCellType() == Cell.CELL_TYPE_BOOLEAN) {
        cell.setCellValue(Boolean.valueOf(cellValueString));
        return;
      }
      if (cell.getCellType() == Cell.CELL_TYPE_FORMULA) {
        cell.setCellFormula(cellValueString);
        return;
      }
      if (cell.getCellType() == Cell.CELL_TYPE_NUMERIC) {
        cell.setCellValue(Double.parseDouble(cellValueString));
        return;
      }
    }
 catch (    Exception e) {
    }
    if (!cellValueString.matches(""String_Node_Str"")) {
      try {
        cell.setCellValue(wb.getCreationHelper().createRichTextString(Integer.toString(Integer.parseInt(cellValueString))));
        return;
      }
 catch (      Exception e) {
      }
      try {
        cell.setCellValue(wb.getCreationHelper().createRichTextString(Double.toString(Double.parseDouble(cellValueString))));
        return;
      }
 catch (      Exception e) {
      }
    }
    cell.setCellValue(wb.getCreationHelper().createRichTextString(cellValueString));
    return;
  }
  return;
}"
86767,"@Override protected Object formBackingObject(HttpServletRequest request) throws Exception {
  CommandObject command=new CommandObject();
  if (Context.isAuthenticated()) {
    ReportDefinitionService rds=Context.getService(ReportDefinitionService.class);
    ReportService reportService=Context.getService(ReportService.class);
    if (StringUtils.hasText(request.getParameter(""String_Node_Str""))) {
      ReportRequest req=reportService.getReportRequestByUuid(request.getParameter(""String_Node_Str""));
      command.setReportDefinition(rds.getDefinitionByUuid(req.getReportDefinition().getParameterizable().getUuid()));
      for (      Map.Entry<String,Object> param : req.getReportDefinition().getParameterMappings().entrySet()) {
        Object value=param.getValue();
        if (value != null && EvaluationUtil.isExpression(value.toString())) {
          command.getExpressions().put(param.getKey(),(String)value);
          value=""String_Node_Str"";
        }
        command.getUserEnteredParams().put(param.getKey(),value);
      }
      command.setSelectedRenderer(req.getRenderingMode().getDescriptor());
    }
 else     if (StringUtils.hasText(request.getParameter(""String_Node_Str""))) {
      String reqUuid=request.getParameter(""String_Node_Str"");
      ReportRequest rr=reportService.getReportRequestByUuid(reqUuid);
      command.setExistingRequestUuid(reqUuid);
      command.setReportDefinition(rr.getReportDefinition().getParameterizable());
      command.setUserEnteredParams(rr.getReportDefinition().getParameterMappings());
      command.setBaseCohort(rr.getBaseCohort());
      command.setSelectedRenderer(rr.getRenderingMode().getDescriptor());
      command.setSchedule(rr.getSchedule());
    }
 else {
      String uuid=request.getParameter(""String_Node_Str"");
      ReportDefinition reportDefinition=rds.getDefinitionByUuid(uuid);
      command.setReportDefinition(reportDefinition);
    }
    command.setRenderingModes(reportService.getRenderingModes(command.getReportDefinition()));
  }
  return command;
}","@Override protected Object formBackingObject(HttpServletRequest request) throws Exception {
  CommandObject command=new CommandObject();
  if (Context.isAuthenticated()) {
    ReportDefinitionService rds=Context.getService(ReportDefinitionService.class);
    ReportService reportService=Context.getService(ReportService.class);
    if (StringUtils.hasText(request.getParameter(""String_Node_Str""))) {
      ReportRequest req=reportService.getReportRequestByUuid(request.getParameter(""String_Node_Str""));
      command.setReportDefinition(rds.getDefinitionByUuid(req.getReportDefinition().getParameterizable().getUuid()));
      for (      Map.Entry<String,Object> param : req.getReportDefinition().getParameterMappings().entrySet()) {
        Object value=param.getValue();
        if (value != null && EvaluationUtil.isExpression(value.toString())) {
          command.getExpressions().put(param.getKey(),(String)value);
          value=""String_Node_Str"";
        }
        command.getUserEnteredParams().put(param.getKey(),value);
      }
      command.setSelectedRenderer(req.getRenderingMode().getDescriptor());
    }
 else     if (StringUtils.hasText(request.getParameter(""String_Node_Str""))) {
      String reqUuid=request.getParameter(""String_Node_Str"");
      ReportRequest rr=reportService.getReportRequestByUuid(reqUuid);
      command.setExistingRequestUuid(reqUuid);
      command.setReportDefinition(rr.getReportDefinition().getParameterizable());
      command.setUserEnteredParams(rr.getReportDefinition().getParameterMappings());
      command.setBaseCohort(rr.getBaseCohort());
      command.setSelectedRenderer(rr.getRenderingMode().getDescriptor());
      command.setSchedule(rr.getSchedule());
    }
 else {
      String uuid=request.getParameter(""String_Node_Str"");
      ReportDefinition reportDefinition=rds.getDefinitionByUuid(uuid);
      command.setReportDefinition(reportDefinition);
      for (      Parameter p : reportDefinition.getParameters()) {
        if (p.getDefaultValue() != null) {
          command.getUserEnteredParams().put(p.getName(),p.getDefaultValue());
        }
      }
    }
    command.setRenderingModes(reportService.getRenderingModes(command.getReportDefinition()));
  }
  return command;
}"
86768,"/** 
 * @see DataConverter#convert(Object)
 * @should convert a Date into a String with the passed format
 */
@SuppressWarnings(""String_Node_Str"") public Object convert(Object original){
  List l=(List)original;
  if (l != null) {
    if (specificItemIndex != null) {
      return (l.size() > specificItemIndex ? l.get(specificItemIndex) : null);
    }
    TimeQualifier which=ObjectUtil.nvl(whichItems,TimeQualifier.ANY);
    int max=(maxNumberOfItems == null || maxNumberOfItems > l.size() ? l.size() : maxNumberOfItems);
    if (which != TimeQualifier.FIRST) {
      Collections.reverse(l);
    }
    if (max == 1) {
      return l.get(0);
    }
 else {
      List<Object> ret=new ArrayList<Object>();
      for (int i=0; i < max; i++) {
        ret.add(l.get(i));
      }
      return ret;
    }
  }
  return null;
}","/** 
 * @see DataConverter#convert(Object)
 * @should convert a Date into a String with the passed format
 */
@SuppressWarnings(""String_Node_Str"") public Object convert(Object original){
  List l=(List)original;
  if (l != null) {
    l=new ArrayList(l);
    if (specificItemIndex != null) {
      return (l.size() > specificItemIndex ? l.get(specificItemIndex) : null);
    }
    TimeQualifier which=ObjectUtil.nvl(whichItems,TimeQualifier.ANY);
    int max=(maxNumberOfItems == null || maxNumberOfItems > l.size() ? l.size() : maxNumberOfItems);
    if (which != TimeQualifier.FIRST) {
      Collections.reverse(l);
    }
    if (max == 1) {
      return l.get(0);
    }
 else {
      List<Object> ret=new ArrayList<Object>();
      for (int i=0; i < max; i++) {
        ret.add(l.get(i));
      }
      return ret;
    }
  }
  return null;
}"
86769,"/** 
 * @see org.openmrs.module.reporting.data.person.evaluator.PersonDataEvaluator#evaluate(org.openmrs.module.reporting.data.person.definition.PersonDataDefinition,org.openmrs.module.reporting.evaluation.EvaluationContext)
 * @should return the obs that match the passed definition configuration
 */
public EvaluatedPersonData evaluate(PersonDataDefinition definition,EvaluationContext context) throws EvaluationException {
  RelationshipsForPersonDataDefinition def=(RelationshipsForPersonDataDefinition)definition;
  EvaluatedPersonData pd=new EvaluatedPersonData(def,context);
  if (context.getBaseCohort() != null && context.getBaseCohort().isEmpty()) {
    return pd;
  }
  if (def.getRelationshipTypes() != null && def.getRelationshipTypes().isEmpty()) {
    return pd;
  }
  if (!def.getPersonAIncluded() && !def.getPersonBIncluded()) {
    return pd;
  }
  if (def.getPersonAIncluded()) {
    addRelationshipsForPerson(pd,""String_Node_Str"");
  }
  if (def.getPersonBIncluded()) {
    addRelationshipsForPerson(pd,""String_Node_Str"");
  }
  return pd;
}","/** 
 * @see org.openmrs.module.reporting.data.person.evaluator.PersonDataEvaluator#evaluate(org.openmrs.module.reporting.data.person.definition.PersonDataDefinition,org.openmrs.module.reporting.evaluation.EvaluationContext)
 * @should return the obs that match the passed definition configuration
 */
public EvaluatedPersonData evaluate(PersonDataDefinition definition,EvaluationContext context) throws EvaluationException {
  RelationshipsForPersonDataDefinition def=(RelationshipsForPersonDataDefinition)definition;
  EvaluatedPersonData pd=new EvaluatedPersonData(def,context);
  if (context.getBaseCohort() != null && context.getBaseCohort().isEmpty()) {
    return pd;
  }
  if (def.getRelationshipTypes() != null && def.getRelationshipTypes().isEmpty()) {
    return pd;
  }
  if (!def.getValuesArePersonA() && !def.getValuesArePersonB()) {
    return pd;
  }
  if (def.getValuesArePersonA()) {
    addRelationshipsForPerson(pd,""String_Node_Str"");
  }
  if (def.getValuesArePersonB()) {
    addRelationshipsForPerson(pd,""String_Node_Str"");
  }
  return pd;
}"
86770,"@Test public void evaluate_shouldReturnRelationshipsByAorB() throws Exception {
  EvaluationContext context=new EvaluationContext();
  context.setBaseCohort(new Cohort(""String_Node_Str""));
  RelationshipsForPersonDataDefinition d=new RelationshipsForPersonDataDefinition();
  d.setRelationshipTypes(Arrays.asList(getDoctorPatientType()));
  d.setPersonBIncluded(Boolean.FALSE);
  EvaluatedPersonData pd=Context.getService(PersonDataService.class).evaluate(d,context);
  Assert.assertNull(getRelationships(pd,7));
  d.setPersonBIncluded(Boolean.TRUE);
  pd=Context.getService(PersonDataService.class).evaluate(d,context);
  Assert.assertEquals(1,getRelationships(pd,7).size());
}","@Test public void evaluate_shouldReturnRelationshipsByAorB() throws Exception {
  EvaluationContext context=new EvaluationContext();
  context.setBaseCohort(new Cohort(""String_Node_Str""));
  RelationshipsForPersonDataDefinition d=new RelationshipsForPersonDataDefinition();
  d.setRelationshipTypes(Arrays.asList(getDoctorPatientType()));
  d.setValuesArePersonA(Boolean.FALSE);
  EvaluatedPersonData pd=Context.getService(PersonDataService.class).evaluate(d,context);
  Assert.assertNull(getRelationships(pd,7));
  d.setValuesArePersonB(Boolean.TRUE);
  pd=Context.getService(PersonDataService.class).evaluate(d,context);
  Assert.assertEquals(1,getRelationships(pd,7).size());
}"
86771,"public List<Map<String,Object>> getIterations(){
  List<Map<String,Object>> newIterations=new ArrayList<Map<String,Object>>();
  for (  Map<String,Object> iteration : iterations) {
    newIterations.add(new HashMap<String,Object>(iteration));
  }
  iterations=newIterations;
  return iterations;
}","public List<Map<String,Object>> getIterations(){
  return iterations;
}"
86772,"public void setIterations(List<Map<String,Object>> iterations){
  this.iterations=iterations;
}","public void setIterations(List<Map<String,Object>> iterations){
  List<Map<String,Object>> newIterations=new ArrayList<Map<String,Object>>();
  for (  Map<String,Object> iteration : iterations) {
    newIterations.add(new HashMap<String,Object>(iteration));
  }
  this.iterations=newIterations;
}"
86773,"/** 
 * @throws org.openmrs.module.reporting.evaluation.EvaluationException
 * @see org.openmrs.module.reporting.dataset.definition.evaluator.DataSetEvaluator#evaluate(org.openmrs.module.reporting.dataset.definition.DataSetDefinition,org.openmrs.module.reporting.evaluation.EvaluationContext)
 * @should evaluate a MultiParameterDataSetDefinition
 */
public DataSet evaluate(DataSetDefinition dataSetDefinition,EvaluationContext context) throws EvaluationException {
  if (context == null) {
    context=new EvaluationContext();
  }
  MultiParameterDataSetDefinition dsd=(MultiParameterDataSetDefinition)dataSetDefinition;
  SimpleDataSet ret=new SimpleDataSet(dsd,context);
  for (  Map<String,Object> iteration : dsd.getIterations()) {
    EvaluationContext ec=context.shallowCopy();
    SimpleDataSet ds;
    try {
      Mapped<DataSetDefinition> mapped=new Mapped<DataSetDefinition>();
      mapped.setParameterizable(dsd.getBaseDefinition());
      for (      Map.Entry<String,Object> param : iteration.entrySet()) {
        mapped.addParameterMapping(param.getKey(),param.getValue());
      }
      ds=(SimpleDataSet)Context.getService(DataSetDefinitionService.class).evaluate(mapped,ec);
    }
 catch (    Exception ex) {
      throw new EvaluationException(""String_Node_Str"",ex);
    }
    DataSetRowList rows=ds.getRows();
    for (    DataSetRow dsRow : rows) {
      DataSetRow row=new DataSetRow();
      for (      Map.Entry<String,Object> param : ds.getContext().getParameterValues().entrySet()) {
        String columnName=""String_Node_Str"" + param.getKey();
        row.addColumnValue(new DataSetColumn(columnName,columnName,String.class),param.getValue());
      }
      for (      Map.Entry<DataSetColumn,Object> entry : dsRow.getColumnValues().entrySet()) {
        row.addColumnValue(entry.getKey(),entry.getValue());
      }
      ret.addRow(row);
    }
  }
  return ret;
}","/** 
 * @throws org.openmrs.module.reporting.evaluation.EvaluationException
 * @see org.openmrs.module.reporting.dataset.definition.evaluator.DataSetEvaluator#evaluate(org.openmrs.module.reporting.dataset.definition.DataSetDefinition,org.openmrs.module.reporting.evaluation.EvaluationContext)
 * @should evaluate a MultiParameterDataSetDefinition
 */
public DataSet evaluate(DataSetDefinition dataSetDefinition,EvaluationContext context) throws EvaluationException {
  if (context == null) {
    context=new EvaluationContext();
  }
  MultiParameterDataSetDefinition dsd=(MultiParameterDataSetDefinition)dataSetDefinition;
  SimpleDataSet ret=new SimpleDataSet(dsd,context);
  for (  Map<String,Object> iteration : dsd.getIterations()) {
    EvaluationContext ec=context.shallowCopy();
    DataSet ds;
    try {
      Mapped<DataSetDefinition> mapped=new Mapped<DataSetDefinition>();
      mapped.setParameterizable(dsd.getBaseDefinition());
      for (      Map.Entry<String,Object> param : iteration.entrySet()) {
        mapped.addParameterMapping(param.getKey(),param.getValue());
      }
      ds=dataSetDefinitionService.evaluate(mapped,ec);
    }
 catch (    Exception ex) {
      throw new EvaluationException(""String_Node_Str"",ex);
    }
    Iterator<DataSetRow> iterator=ds.iterator();
    while (iterator.hasNext()) {
      DataSetRow row=new DataSetRow();
      for (      Map.Entry<String,Object> param : ds.getContext().getParameterValues().entrySet()) {
        String columnName=""String_Node_Str"" + param.getKey();
        row.addColumnValue(new DataSetColumn(columnName,columnName,String.class),param.getValue());
      }
      for (      Map.Entry<DataSetColumn,Object> entry : iterator.next().getColumnValues().entrySet()) {
        row.addColumnValue(entry.getKey(),entry.getValue());
      }
      ret.addRow(row);
    }
  }
  return ret;
}"
86774,"/** 
 * @see {@link org.openmrs.module.reporting.dataset.definition.evaluator.MultiParameterDataSetEvaluator#evaluate(org.openmrs.module.reporting.dataset.definition.DataSetDefinition,org.openmrs.module.reporting.evaluation.EvaluationContext)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void evaluate_shouldEvaluateAMultiParameterDataSetDefinition() throws Exception {
  SqlDataSetDefinition sqlDataSetDefinition=new SqlDataSetDefinition();
  sqlDataSetDefinition.setSqlQuery(""String_Node_Str"");
  sqlDataSetDefinition.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Date.class));
  MultiParameterDataSetDefinition multiParameterDataSetDefinition=new MultiParameterDataSetDefinition();
  multiParameterDataSetDefinition.setBaseDefinition(sqlDataSetDefinition);
  List<Map<String,Object>> iterations=new ArrayList<Map<String,Object>>();
  Map<String,Object> iteration=new HashMap<String,Object>();
  iteration.put(""String_Node_Str"",""String_Node_Str"");
  iterations.add(iteration);
  iteration=new HashMap<String,Object>();
  iteration.put(""String_Node_Str"",""String_Node_Str"");
  iterations.add(iteration);
  multiParameterDataSetDefinition.setIterations(iterations);
  multiParameterDataSetDefinition.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Date.class));
  EvaluationContext evaluationContext=new EvaluationContext(new Date());
  evaluationContext.addParameterValue(""String_Node_Str"",new Date(2013,01,01));
  SimpleDataSet result=(SimpleDataSet)Context.getService(DataSetDefinitionService.class).evaluate(multiParameterDataSetDefinition,evaluationContext);
  Assert.assertTrue(result.getMetaData().getColumns().contains(new DataSetColumn(""String_Node_Str"",""String_Node_Str"",String.class)));
  Assert.assertTrue(result.getMetaData().getColumns().contains(new DataSetColumn(""String_Node_Str"",""String_Node_Str"",Integer.class)));
  Assert.assertTrue(result.getMetaData().getColumns().contains(new DataSetColumn(""String_Node_Str"",""String_Node_Str"",String.class)));
  Assert.assertTrue(result.getMetaData().getColumns().contains(new DataSetColumn(""String_Node_Str"",""String_Node_Str"",Date.class)));
}","/** 
 * @see {@link org.openmrs.module.reporting.dataset.definition.evaluator.MultiParameterDataSetEvaluator#evaluate(org.openmrs.module.reporting.dataset.definition.DataSetDefinition,org.openmrs.module.reporting.evaluation.EvaluationContext)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void evaluate_shouldEvaluateAMultiParameterDataSetDefinition() throws Exception {
  SqlDataSetDefinition sqlDataSetDefinition=new SqlDataSetDefinition();
  sqlDataSetDefinition.setSqlQuery(""String_Node_Str"");
  sqlDataSetDefinition.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Date.class));
  MultiParameterDataSetDefinition multiParameterDataSetDefinition=new MultiParameterDataSetDefinition();
  multiParameterDataSetDefinition.setBaseDefinition(sqlDataSetDefinition);
  List<Map<String,Object>> iterations=new ArrayList<Map<String,Object>>();
  Map<String,Object> iteration=new HashMap<String,Object>();
  iteration.put(""String_Node_Str"",""String_Node_Str"");
  iterations.add(iteration);
  iteration=new HashMap<String,Object>();
  iteration.put(""String_Node_Str"",""String_Node_Str"");
  iterations.add(iteration);
  multiParameterDataSetDefinition.setIterations(iterations);
  multiParameterDataSetDefinition.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Date.class));
  Calendar cal=Calendar.getInstance();
  cal.set(1976,Calendar.AUGUST,24,0,0);
  Date firstIterationParameter=cal.getTime();
  cal.add(Calendar.DATE,2);
  Date secondIterationParameter=cal.getTime();
  EvaluationContext evaluationContext=new EvaluationContext(new Date());
  evaluationContext.addParameterValue(""String_Node_Str"",firstIterationParameter);
  SimpleDataSet result=(SimpleDataSet)dataSetDefinitionService.evaluate(multiParameterDataSetDefinition,evaluationContext);
  Assert.assertTrue(result.getMetaData().getColumns().contains(new DataSetColumn(""String_Node_Str"",""String_Node_Str"",String.class)));
  Assert.assertTrue(result.getMetaData().getColumns().contains(new DataSetColumn(""String_Node_Str"",""String_Node_Str"",Integer.class)));
  Assert.assertTrue(result.getMetaData().getColumns().contains(new DataSetColumn(""String_Node_Str"",""String_Node_Str"",String.class)));
  Assert.assertTrue(result.getMetaData().getColumns().contains(new DataSetColumn(""String_Node_Str"",""String_Node_Str"",Date.class)));
  Assert.assertEquals(3,result.getRowMap().size());
  Assert.assertEquals(firstIterationParameter,result.getRowMap().get(1).getColumnValue(""String_Node_Str""));
  Assert.assertEquals(secondIterationParameter,result.getRowMap().get(2).getColumnValue(""String_Node_Str""));
  Assert.assertEquals(secondIterationParameter,result.getRowMap().get(3).getColumnValue(""String_Node_Str""));
  Date firstDateResult=(Date)result.getRowMap().get(1).getColumnValue(""String_Node_Str"");
  Date secondDateResult=(Date)result.getRowMap().get(2).getColumnValue(""String_Node_Str"");
  Date thirdDateResult=(Date)result.getRowMap().get(3).getColumnValue(""String_Node_Str"");
  Assert.assertEquals(Timestamp.valueOf(""String_Node_Str""),firstDateResult);
  Assert.assertEquals(Timestamp.valueOf(""String_Node_Str""),secondDateResult);
  Assert.assertEquals(Timestamp.valueOf(""String_Node_Str""),thirdDateResult);
  Assert.assertTrue(firstDateResult.before(firstIterationParameter));
  Assert.assertFalse(thirdDateResult.before(firstIterationParameter));
  Assert.assertTrue(secondDateResult.before(secondIterationParameter));
  Assert.assertTrue(thirdDateResult.before(secondIterationParameter));
}"
86775,"@RequestMapping(""String_Node_Str"") public void showForm(ModelMap model,@RequestParam(value=""String_Node_Str"",required=false) String uuid){
  model.addAttribute(""String_Node_Str"",Context.getService(DataSetDefinitionService.class).getAllDefinitions(false));
  if (uuid == null) {
    model.addAttribute(""String_Node_Str"",new MultiParameterDataSetDefinition());
  }
 else {
    DataSetDefinition def=Context.getService(DataSetDefinitionService.class).getDefinitionByUuid(uuid);
    if (def instanceof MultiParameterDataSetDefinition) {
      model.addAttribute(""String_Node_Str"",def);
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
}","@RequestMapping(""String_Node_Str"") public void showForm(ModelMap model,@RequestParam(value=""String_Node_Str"",required=false) String uuid){
  List<DataSetDefinition> allDefinitions=Context.getService(DataSetDefinitionService.class).getAllDefinitions(false);
  if (uuid == null) {
    model.addAttribute(""String_Node_Str"",new MultiParameterDataSetDefinition());
  }
 else {
    DataSetDefinition def=Context.getService(DataSetDefinitionService.class).getDefinitionByUuid(uuid);
    allDefinitions.remove(def);
    if (def instanceof MultiParameterDataSetDefinition) {
      model.addAttribute(""String_Node_Str"",def);
    }
 else {
      throw new RuntimeException(""String_Node_Str"");
    }
  }
  model.addAttribute(""String_Node_Str"",allDefinitions);
}"
86776,"@Override public DataSet evaluate(DataSetDefinition dataSetDefinition,EvaluationContext evalContext) throws EvaluationException {
  RepeatPerTimePeriodDataSetDefinition dsd=(RepeatPerTimePeriodDataSetDefinition)dataSetDefinition;
  MultiParameterDataSetDefinition delegate=new MultiParameterDataSetDefinition(dsd.getBaseDefinition());
  for (  Parameter parameter : dsd.getParameters()) {
    delegate.addParameter(parameter);
  }
  TimePeriod period=dsd.getRepeatPerTimePeriod();
  if (period == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DateTime thisPeriodStart=new DateTime(((Date)evalContext.getParameterValue(""String_Node_Str"")).getTime());
  DateTime end=new DateTime(((Date)evalContext.getParameterValue(""String_Node_Str"")).getTime());
  while (thisPeriodStart.isBefore(end)) {
    DateTime nextPeriodStart=thisPeriodStart.plus(period.getJodaPeriod());
    if (nextPeriodStart.isAfter(end)) {
      nextPeriodStart=end;
    }
    DateTime thisPeriodEnd=nextPeriodStart.minus(Duration.millis(1));
    Map<String,Object> iteration=new HashMap<String,Object>();
    iteration.put(""String_Node_Str"",thisPeriodStart.toDate());
    iteration.put(""String_Node_Str"",thisPeriodEnd.toDate());
    delegate.addIteration(iteration);
    thisPeriodStart=nextPeriodStart;
  }
  return dataSetDefinitionService.evaluate(delegate,evalContext);
}","@Override public DataSet evaluate(DataSetDefinition dataSetDefinition,EvaluationContext evalContext) throws EvaluationException {
  RepeatPerTimePeriodDataSetDefinition dsd=(RepeatPerTimePeriodDataSetDefinition)dataSetDefinition;
  MultiParameterDataSetDefinition delegate=new MultiParameterDataSetDefinition(dsd.getBaseDefinition());
  for (  Parameter parameter : dsd.getParameters()) {
    delegate.addParameter(parameter);
  }
  TimePeriod period=dsd.getRepeatPerTimePeriod();
  if (period == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  DateTime thisPeriodStart=new DateTime(((Date)evalContext.getParameterValue(""String_Node_Str"")).getTime());
  DateTime end=new DateTime(((Date)evalContext.getParameterValue(""String_Node_Str"")).getTime());
  while (thisPeriodStart.isBefore(end)) {
    DateTime nextPeriodStart=thisPeriodStart.plus(period.getJodaPeriod());
    boolean lastIteration=!nextPeriodStart.isBefore(end);
    DateTime thisPeriodEnd;
    if (lastIteration) {
      thisPeriodEnd=end;
    }
 else {
      thisPeriodEnd=nextPeriodStart.minus(Duration.millis(1));
    }
    Map<String,Object> iteration=new HashMap<String,Object>();
    iteration.put(""String_Node_Str"",thisPeriodStart.toDate());
    iteration.put(""String_Node_Str"",thisPeriodEnd.toDate());
    delegate.addIteration(iteration);
    thisPeriodStart=nextPeriodStart;
  }
  return dataSetDefinitionService.evaluate(delegate,evalContext);
}"
86777,"@Test public void testEvaluate() throws Exception {
  DataSetDefinitionService service=mock(DataSetDefinitionService.class);
  Location aLocation=new Location();
  SqlDataSetDefinition baseDsd=new SqlDataSetDefinition();
  baseDsd.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Date.class));
  baseDsd.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Date.class));
  baseDsd.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Location.class));
  RepeatPerTimePeriodDataSetDefinition dsd=new RepeatPerTimePeriodDataSetDefinition();
  dsd.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Date.class));
  dsd.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Date.class));
  dsd.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Location.class));
  dsd.setBaseDefinition(baseDsd);
  dsd.setRepeatPerTimePeriod(TimePeriod.WEEKLY);
  RepeatPerTimePeriodDataSetEvaluator evaluator=new RepeatPerTimePeriodDataSetEvaluator();
  evaluator.setDataSetDefinitionService(service);
  EvaluationContext context=new EvaluationContext();
  context.addParameterValue(""String_Node_Str"",DateUtil.parseYmd(""String_Node_Str""));
  context.addParameterValue(""String_Node_Str"",DateUtil.parseYmd(""String_Node_Str""));
  context.addParameterValue(""String_Node_Str"",aLocation);
  evaluator.evaluate(dsd,context);
  final MultiParameterDataSetDefinition expectedDelegate=new MultiParameterDataSetDefinition();
  expectedDelegate.setBaseDefinition(baseDsd);
  expectedDelegate.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Date.class));
  expectedDelegate.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Date.class));
  expectedDelegate.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Location.class));
  Map<String,Object> iteration=new HashMap<String,Object>();
  iteration.put(""String_Node_Str"",DateUtil.parseYmd(""String_Node_Str""));
  iteration.put(""String_Node_Str"",DateUtils.addMilliseconds(DateUtil.parseYmd(""String_Node_Str""),-1));
  expectedDelegate.addIteration(iteration);
  iteration=new HashMap<String,Object>();
  iteration.put(""String_Node_Str"",DateUtil.parseYmd(""String_Node_Str""));
  iteration.put(""String_Node_Str"",DateUtils.addMilliseconds(DateUtil.parseYmd(""String_Node_Str""),-1));
  expectedDelegate.addIteration(iteration);
  iteration=new HashMap<String,Object>();
  iteration.put(""String_Node_Str"",DateUtil.parseYmd(""String_Node_Str""));
  iteration.put(""String_Node_Str"",DateUtils.addMilliseconds(DateUtil.parseYmd(""String_Node_Str""),-1));
  expectedDelegate.addIteration(iteration);
  iteration=new HashMap<String,Object>();
  iteration.put(""String_Node_Str"",DateUtil.parseYmd(""String_Node_Str""));
  iteration.put(""String_Node_Str"",DateUtils.addMilliseconds(DateUtil.parseYmd(""String_Node_Str""),-1));
  expectedDelegate.addIteration(iteration);
  iteration=new HashMap<String,Object>();
  iteration.put(""String_Node_Str"",DateUtil.parseYmd(""String_Node_Str""));
  iteration.put(""String_Node_Str"",DateUtils.addMilliseconds(DateUtil.parseYmd(""String_Node_Str""),-1));
  expectedDelegate.addIteration(iteration);
  verify(service).evaluate(argThat(new ArgumentMatcher<DataSetDefinition>(){
    @Override public boolean matches(    Object argument){
      MultiParameterDataSetDefinition actualDelegate=(MultiParameterDataSetDefinition)argument;
      return actualDelegate.getParameters().equals(expectedDelegate.getParameters()) && actualDelegate.getIterations().equals(expectedDelegate.getIterations());
    }
  }
),eq(context));
}","@Test public void testEvaluate() throws Exception {
  Location aLocation=new Location();
  SqlDataSetDefinition baseDsd=new SqlDataSetDefinition();
  baseDsd.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Date.class));
  baseDsd.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Date.class));
  baseDsd.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Location.class));
  RepeatPerTimePeriodDataSetDefinition dsd=new RepeatPerTimePeriodDataSetDefinition();
  dsd.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Date.class));
  dsd.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Date.class));
  dsd.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Location.class));
  dsd.setBaseDefinition(baseDsd);
  dsd.setRepeatPerTimePeriod(TimePeriod.WEEKLY);
  EvaluationContext context=new EvaluationContext();
  context.addParameterValue(""String_Node_Str"",DateUtil.parseYmd(""String_Node_Str""));
  context.addParameterValue(""String_Node_Str"",DateUtils.addMilliseconds(DateUtil.parseYmd(""String_Node_Str""),-1));
  context.addParameterValue(""String_Node_Str"",aLocation);
  evaluator.evaluate(dsd,context);
  final MultiParameterDataSetDefinition expectedDelegate=new MultiParameterDataSetDefinition();
  expectedDelegate.setBaseDefinition(baseDsd);
  expectedDelegate.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Date.class));
  expectedDelegate.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Date.class));
  expectedDelegate.addParameter(new Parameter(""String_Node_Str"",""String_Node_Str"",Location.class));
  Map<String,Object> iteration=new HashMap<String,Object>();
  iteration.put(""String_Node_Str"",DateUtil.parseYmd(""String_Node_Str""));
  iteration.put(""String_Node_Str"",DateUtils.addMilliseconds(DateUtil.parseYmd(""String_Node_Str""),-1));
  expectedDelegate.addIteration(iteration);
  iteration=new HashMap<String,Object>();
  iteration.put(""String_Node_Str"",DateUtil.parseYmd(""String_Node_Str""));
  iteration.put(""String_Node_Str"",DateUtils.addMilliseconds(DateUtil.parseYmd(""String_Node_Str""),-1));
  expectedDelegate.addIteration(iteration);
  iteration=new HashMap<String,Object>();
  iteration.put(""String_Node_Str"",DateUtil.parseYmd(""String_Node_Str""));
  iteration.put(""String_Node_Str"",DateUtils.addMilliseconds(DateUtil.parseYmd(""String_Node_Str""),-1));
  expectedDelegate.addIteration(iteration);
  iteration=new HashMap<String,Object>();
  iteration.put(""String_Node_Str"",DateUtil.parseYmd(""String_Node_Str""));
  iteration.put(""String_Node_Str"",DateUtils.addMilliseconds(DateUtil.parseYmd(""String_Node_Str""),-1));
  expectedDelegate.addIteration(iteration);
  iteration=new HashMap<String,Object>();
  iteration.put(""String_Node_Str"",DateUtil.parseYmd(""String_Node_Str""));
  iteration.put(""String_Node_Str"",DateUtils.addMilliseconds(DateUtil.parseYmd(""String_Node_Str""),-1));
  expectedDelegate.addIteration(iteration);
  verify(service).evaluate(argThat(new ArgumentMatcher<DataSetDefinition>(){
    @Override public boolean matches(    Object argument){
      MultiParameterDataSetDefinition actualDelegate=(MultiParameterDataSetDefinition)argument;
      return actualDelegate.getParameters().equals(expectedDelegate.getParameters()) && actualDelegate.getIterations().equals(expectedDelegate.getIterations());
    }
  }
),eq(context));
}"
86778,"/** 
 * @see DataSetQueryDAO#getPropertyValues(Class,String,EvaluationContext)
 */
public Map<Integer,Object> getPropertyValues(Class<? extends OpenmrsObject> type,String property,EvaluationContext context){
  Map<Integer,Object> ret=new HashMap<Integer,Object>();
  Cohort baseCohort=context.getBaseCohort();
  if (baseCohort != null && baseCohort.isEmpty()) {
    return ret;
  }
  ClassMetadata metadata=sessionFactory.getClassMetadata(type);
  String idPropertyName=metadata.getIdentifierPropertyName();
  String entityName=type.getSimpleName();
  String alias=entityName.toLowerCase();
  Map<Class<? extends OpenmrsData>,String> patientJoinProperties=new HashMap<Class<? extends OpenmrsData>,String>();
  patientJoinProperties.put(Person.class,""String_Node_Str"");
  patientJoinProperties.put(Patient.class,""String_Node_Str"");
  patientJoinProperties.put(Encounter.class,""String_Node_Str"");
  patientJoinProperties.put(Obs.class,""String_Node_Str"");
  patientJoinProperties.put(Order.class,""String_Node_Str"");
  patientJoinProperties.put(PatientProgram.class,""String_Node_Str"");
  patientJoinProperties.put(PatientState.class,""String_Node_Str"");
  patientJoinProperties.put(PersonName.class,""String_Node_Str"");
  patientJoinProperties.put(PatientIdentifier.class,""String_Node_Str"");
  patientJoinProperties.put(Relationship.class,""String_Node_Str"");
  String voidedProperty=(type == Person.class ? ""String_Node_Str"" : ""String_Node_Str"");
  boolean filterInQuery=baseCohort != null && baseCohort.size() < 2000;
  boolean doNotFilterInJava=baseCohort == null || filterInQuery;
  StringBuilder hql=new StringBuilder();
  hql.append(""String_Node_Str"" + idPropertyName + ""String_Node_Str""+ property+ ""String_Node_Str"");
  hql.append(""String_Node_Str"" + entityName + ""String_Node_Str""+ alias+ ""String_Node_Str"");
  hql.append(""String_Node_Str"" + alias + ""String_Node_Str""+ voidedProperty+ ""String_Node_Str"");
  if (filterInQuery) {
    for (    Class<? extends OpenmrsData> clazz : patientJoinProperties.keySet()) {
      if (clazz.isAssignableFrom(type) && baseCohort != null) {
        hql.append(""String_Node_Str"" + alias + ""String_Node_Str""+ patientJoinProperties.get(clazz)+ ""String_Node_Str"");
      }
    }
  }
  Query query=sessionFactory.getCurrentSession().createQuery(hql.toString());
  if (hql.toString().contains(""String_Node_Str"")) {
    query.setParameterList(""String_Node_Str"",baseCohort.getMemberIds());
  }
  for (  Object o : query.list()) {
    Object[] vals=(Object[])o;
    Integer ptId=(Integer)vals[0];
    if (doNotFilterInJava || baseCohort.contains(ptId)) {
      ret.put(ptId,vals[1]);
    }
  }
  return ret;
}","/** 
 * @see DataSetQueryDAO#getPropertyValues(Class,String,EvaluationContext)
 */
public Map<Integer,Object> getPropertyValues(Class<? extends OpenmrsObject> type,String property,EvaluationContext context){
  Map<Integer,Object> ret=new HashMap<Integer,Object>();
  Cohort baseCohort=context.getBaseCohort();
  if (baseCohort != null && baseCohort.isEmpty()) {
    return ret;
  }
  ClassMetadata metadata=sessionFactory.getClassMetadata(type);
  String idPropertyName=metadata.getIdentifierPropertyName();
  String entityName=type.getSimpleName();
  String alias=entityName.toLowerCase();
  Map<Class<? extends OpenmrsData>,String> patientJoinProperties=new HashMap<Class<? extends OpenmrsData>,String>();
  patientJoinProperties.put(Person.class,""String_Node_Str"");
  patientJoinProperties.put(Patient.class,""String_Node_Str"");
  patientJoinProperties.put(Encounter.class,""String_Node_Str"");
  patientJoinProperties.put(Obs.class,""String_Node_Str"");
  patientJoinProperties.put(Order.class,""String_Node_Str"");
  patientJoinProperties.put(PatientProgram.class,""String_Node_Str"");
  patientJoinProperties.put(PatientState.class,""String_Node_Str"");
  patientJoinProperties.put(PersonName.class,""String_Node_Str"");
  patientJoinProperties.put(PatientIdentifier.class,""String_Node_Str"");
  patientJoinProperties.put(Relationship.class,""String_Node_Str"");
  String voidedProperty=(type == Person.class ? ""String_Node_Str"" : ""String_Node_Str"");
  boolean personOrPatientQuery=type.equals(Patient.class) || type.equals(Person.class);
  boolean filterInQuery=!personOrPatientQuery || (baseCohort != null && baseCohort.size() < 2000);
  boolean doNotFilterInJava=baseCohort == null || filterInQuery;
  StringBuilder hql=new StringBuilder();
  hql.append(""String_Node_Str"" + idPropertyName + ""String_Node_Str""+ property+ ""String_Node_Str"");
  hql.append(""String_Node_Str"" + entityName + ""String_Node_Str""+ alias+ ""String_Node_Str"");
  hql.append(""String_Node_Str"" + alias + ""String_Node_Str""+ voidedProperty+ ""String_Node_Str"");
  if (filterInQuery) {
    for (    Class<? extends OpenmrsData> clazz : patientJoinProperties.keySet()) {
      if (clazz.isAssignableFrom(type) && baseCohort != null) {
        hql.append(""String_Node_Str"" + alias + ""String_Node_Str""+ patientJoinProperties.get(clazz)+ ""String_Node_Str"");
      }
    }
  }
  Query query=sessionFactory.getCurrentSession().createQuery(hql.toString());
  if (hql.toString().contains(""String_Node_Str"")) {
    query.setParameterList(""String_Node_Str"",baseCohort.getMemberIds());
  }
  for (  Object o : query.list()) {
    Object[] vals=(Object[])o;
    Integer ptId=(Integer)vals[0];
    if (doNotFilterInJava || baseCohort.contains(ptId)) {
      ret.put(ptId,vals[1]);
    }
  }
  return ret;
}"
86779,"/** 
 * @return a Composition Cohort Definition with a primary cohort which has 1 to n cohorts subtracted from it
 */
public static CohortDefinition minus(CohortDefinition base,CohortDefinition... toSubtract){
  CompositionCohortDefinition d=new CompositionCohortDefinition();
  d.addSearch(""String_Node_Str"",base,null);
  StringBuilder s=new StringBuilder(""String_Node_Str"");
  int i=1;
  for (  CohortDefinition cd : toSubtract) {
    d.addSearch(""String_Node_Str"" + i,cd,null);
    if (i > 1) {
      s.append(""String_Node_Str"");
    }
    s.append(i++);
  }
  s.append(""String_Node_Str"");
  d.setCompositionString(s.toString());
  return d;
}","/** 
 * @return a Composition Cohort Definition with a primary cohort which has 1 to n cohorts subtracted from it
 */
public static CohortDefinition minus(CohortDefinition base,CohortDefinition... toSubtract){
  CompositionCohortDefinition d=new CompositionCohortDefinition();
  d.addSearch(""String_Node_Str"",base,(Map<String,Object>)null);
  StringBuilder s=new StringBuilder(""String_Node_Str"");
  int i=1;
  for (  CohortDefinition cd : toSubtract) {
    d.addSearch(""String_Node_Str"" + i,cd,(Map<String,Object>)null);
    if (i > 1) {
      s.append(""String_Node_Str"");
    }
    s.append(i++);
  }
  s.append(""String_Node_Str"");
  d.setCompositionString(s.toString());
  return d;
}"
86780,"/** 
 * @return a Composition Cohort Definition with each definition composed with a single type of operator
 */
public static CohortDefinition getCompositionCohort(String operator,CohortDefinition... definitions){
  if (definitions.length == 1) {
    return definitions[0];
  }
  CompositionCohortDefinition d=new CompositionCohortDefinition();
  StringBuilder s=new StringBuilder();
  int i=1;
  for (  CohortDefinition cd : definitions) {
    if (cd != null) {
      d.addSearch(""String_Node_Str"" + i,cd,null);
      if (s.length() > 0) {
        s.append(""String_Node_Str"" + operator + ""String_Node_Str"");
      }
      s.append(i++);
    }
  }
  d.setCompositionString(s.toString());
  return d;
}","/** 
 * @return a Composition Cohort Definition with each definition composed with a single type of operator
 */
public static CohortDefinition getCompositionCohort(String operator,CohortDefinition... definitions){
  if (definitions.length == 1) {
    return definitions[0];
  }
  CompositionCohortDefinition d=new CompositionCohortDefinition();
  StringBuilder s=new StringBuilder();
  int i=1;
  for (  CohortDefinition cd : definitions) {
    if (cd != null) {
      d.addSearch(""String_Node_Str"" + i,cd,(Map<String,Object>)null);
      if (s.length() > 0) {
        s.append(""String_Node_Str"" + operator + ""String_Node_Str"");
      }
      s.append(i++);
    }
  }
  d.setCompositionString(s.toString());
  return d;
}"
86781,"/** 
 * @see PersonDataEvaluator#evaluate(PersonDataDefinition,EvaluationContext)
 * @should return all ages on the date of the given definition
 */
public EvaluatedPersonData evaluate(PersonDataDefinition definition,EvaluationContext context) throws EvaluationException {
  AgeAtDateOfOtherDataDefinition add=(AgeAtDateOfOtherDataDefinition)definition;
  EvaluatedPersonData birthdates=Context.getService(PersonDataService.class).evaluate(new BirthdateDataDefinition(),context);
  MappedData<? extends DataDefinition> effectiveDateDefinition=add.getEffectiveDateDefinition();
  BaseData effectiveDates;
  if (effectiveDateDefinition.getParameterizable() instanceof PersonDataDefinition) {
    effectiveDates=Context.getService(PersonDataService.class).evaluate((MappedData<PersonDataDefinition>)effectiveDateDefinition,context);
  }
 else   if (effectiveDateDefinition.getParameterizable() instanceof PatientDataDefinition) {
    effectiveDates=Context.getService(PatientDataService.class).evaluate((MappedData<PatientDataDefinition>)effectiveDateDefinition,context);
  }
 else {
    throw new EvaluationException(""String_Node_Str"");
  }
  List<DataConverter> converters=effectiveDateDefinition.getConverters();
  if (converters != null && converters.size() > 0) {
    for (    Integer pId : effectiveDates.getData().keySet()) {
      Object convertedValue=DataUtil.convertData(effectiveDates.getData().get(pId),converters);
      effectiveDates.addData(pId,convertedValue);
    }
  }
  EvaluatedPersonData ret=new EvaluatedPersonData(definition,context);
  BirthdateToAgeConverter converter=new BirthdateToAgeConverter();
  for (  Integer personId : birthdates.getData().keySet()) {
    Object birthdate=birthdates.getData().get(personId);
    converter.setEffectiveDate((Date)effectiveDates.getData().get(personId));
    ret.addData(personId,converter.convert(birthdate));
  }
  return ret;
}","/** 
 * @see PersonDataEvaluator#evaluate(PersonDataDefinition,EvaluationContext)
 * @should return all ages on the date of the given definition
 */
public EvaluatedPersonData evaluate(PersonDataDefinition definition,EvaluationContext context) throws EvaluationException {
  AgeAtDateOfOtherDataDefinition add=(AgeAtDateOfOtherDataDefinition)definition;
  EvaluatedPersonData birthdates=Context.getService(PersonDataService.class).evaluate(new BirthdateDataDefinition(),context);
  MappedData<? extends DataDefinition> effectiveDateDefinition=add.getEffectiveDateDefinition();
  BaseData effectiveDates;
  if (effectiveDateDefinition.getParameterizable() instanceof PersonDataDefinition) {
    effectiveDates=Context.getService(PersonDataService.class).evaluate((MappedData<PersonDataDefinition>)effectiveDateDefinition,context);
  }
 else   if (effectiveDateDefinition.getParameterizable() instanceof PatientDataDefinition) {
    effectiveDates=Context.getService(PatientDataService.class).evaluate((MappedData<PatientDataDefinition>)effectiveDateDefinition,context);
  }
 else {
    throw new EvaluationException(""String_Node_Str"");
  }
  List<DataConverter> converters=effectiveDateDefinition.getConverters();
  if (converters != null && converters.size() > 0) {
    for (    Integer pId : effectiveDates.getData().keySet()) {
      Object convertedValue=DataUtil.convertData(effectiveDates.getData().get(pId),converters);
      effectiveDates.addData(pId,convertedValue);
    }
  }
  EvaluatedPersonData ret=new EvaluatedPersonData(definition,context);
  BirthdateToAgeConverter converter=new BirthdateToAgeConverter();
  for (  Integer personId : birthdates.getData().keySet()) {
    Object birthdate=birthdates.getData().get(personId);
    Date dateOfOtherDefinition=(Date)effectiveDates.getData().get(personId);
    if (dateOfOtherDefinition != null) {
      converter.setEffectiveDate(dateOfOtherDefinition);
      ret.addData(personId,converter.convert(birthdate));
    }
 else {
      ret.addData(personId,null);
    }
  }
  return ret;
}"
86782,"/** 
 * @see SerializedDefinitionService#saveDefinition(Definition)
 */
public <T extends Definition>T saveDefinition(T definition){
  if (definition.getId() != null) {
    if (definition.getChangedBy() == null) {
      definition.setChangedBy(Context.getAuthenticatedUser());
    }
    if (definition.getDateChanged() == null) {
      definition.setDateChanged(new Date());
    }
  }
 else {
    if (definition.getCreator() == null) {
      definition.setCreator(Context.getAuthenticatedUser());
    }
    if (definition.getDateCreated() == null) {
      definition.setDateCreated(new Date());
    }
  }
  return dao.saveObject(definition,serializer);
}","/** 
 * @see SerializedDefinitionService#saveDefinition(Definition)
 */
public <T extends Definition>T saveDefinition(T definition){
  if (definition.getId() != null) {
    definition.setChangedBy(Context.getAuthenticatedUser());
    definition.setDateChanged(new Date());
  }
 else {
    if (definition.getCreator() == null) {
      definition.setCreator(Context.getAuthenticatedUser());
    }
    if (definition.getDateCreated() == null) {
      definition.setDateCreated(new Date());
    }
  }
  return dao.saveObject(definition,serializer);
}"
86783,"/** 
 * Performs some action on the given report
 * @param report the Report to process
 */
public void process(Report report,Properties configuration){
  try {
    Message m=new MimeMessage(getSession());
    m.setFrom(new InternetAddress(configuration.getProperty(""String_Node_Str"")));
    for (    String recipient : configuration.getProperty(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"")) {
      m.addRecipient(RecipientType.TO,new InternetAddress(recipient));
    }
    m.setSubject(configuration.getProperty(""String_Node_Str""));
    Multipart multipart=new MimeMultipart();
    MimeBodyPart contentBodyPart=new MimeBodyPart();
    String content=configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
    if (report.getRenderedOutput() != null && ""String_Node_Str"".equalsIgnoreCase(configuration.getProperty(""String_Node_Str""))) {
      content+=new String(report.getRenderedOutput());
    }
    contentBodyPart.setContent(content,""String_Node_Str"");
    multipart.addBodyPart(contentBodyPart);
    if (report.getRenderedOutput() != null && ""String_Node_Str"".equalsIgnoreCase(configuration.getProperty(""String_Node_Str""))) {
      MimeBodyPart attachment=new MimeBodyPart();
      attachment.setDataHandler(new DataHandler(report.getRenderedOutput(),report.getOutputContentType()));
      attachment.setFileName(configuration.getProperty(""String_Node_Str""));
      multipart.addBodyPart(attachment);
    }
    m.setContent(multipart);
    Transport.send(m);
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","/** 
 * Performs some action on the given report
 * @param report the Report to process
 */
public void process(Report report,Properties configuration){
  try {
    Message m=new MimeMessage(getSession());
    m.setFrom(new InternetAddress(configuration.getProperty(""String_Node_Str"")));
    for (    String recipient : configuration.getProperty(""String_Node_Str"",""String_Node_Str"").split(""String_Node_Str"")) {
      m.addRecipient(RecipientType.TO,new InternetAddress(recipient));
    }
    m.setSubject(configuration.getProperty(""String_Node_Str""));
    Multipart multipart=new MimeMultipart();
    MimeBodyPart contentBodyPart=new MimeBodyPart();
    String content=configuration.getProperty(""String_Node_Str"",""String_Node_Str"");
    if (report.getRenderedOutput() != null && ""String_Node_Str"".equalsIgnoreCase(configuration.getProperty(""String_Node_Str""))) {
      content+=new String(report.getRenderedOutput());
    }
    contentBodyPart.setContent(content,""String_Node_Str"");
    multipart.addBodyPart(contentBodyPart);
    if (report.getRenderedOutput() != null && ""String_Node_Str"".equalsIgnoreCase(configuration.getProperty(""String_Node_Str""))) {
      MimeBodyPart attachment=new MimeBodyPart();
      Object output=report.getRenderedOutput();
      if (report.getOutputContentType().contains(""String_Node_Str"")) {
        output=new String(report.getRenderedOutput(),""String_Node_Str"");
      }
      attachment.setDataHandler(new DataHandler(output,report.getOutputContentType()));
      attachment.setFileName(configuration.getProperty(""String_Node_Str""));
      multipart.addBodyPart(attachment);
    }
    m.setContent(multipart);
    Transport.send(m);
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}"
86784,"public CommandObject(){
  userEnteredParams=new LinkedHashMap<String,Object>();
}","public CommandObject(){
  userEnteredParams=new LinkedHashMap<String,Object>();
  expressions=new HashMap<String,String>();
}"
86785,"public int compare(ReportRequest r1,ReportRequest r2){
  if (r1 == null && r2 == null) {
    return 0;
  }
  if (r1 == null) {
    return -1;
  }
  if (r2 == null) {
    return 1;
  }
  int ret=OpenmrsUtil.compareWithNullAsLatest(r1.getEvaluateCompleteDatetime(),r2.getEvaluateCompleteDatetime());
  if (ret == 0) {
    ret=OpenmrsUtil.compareWithNullAsLatest(r1.getEvaluateStartDatetime(),r2.getEvaluateStartDatetime());
  }
  if (ret == 0) {
    ret=r1.getPriority().compareTo(r2.getPriority());
  }
  if (ret == 0) {
    ret=OpenmrsUtil.compareWithNullAsLatest(r1.getRequestDate(),r2.getRequestDate());
  }
  if (ret == 0) {
    ret=OpenmrsUtil.compareWithNullAsGreatest(r1.getUuid(),r2.getUuid());
  }
  return ret;
}","public int compare(ReportRequest r1,ReportRequest r2){
  if (r1 == null && r2 == null) {
    return 0;
  }
  if (r1 == null) {
    return -1;
  }
  if (r2 == null) {
    return 1;
  }
  Date d1=ObjectUtil.nvl(r1.getEvaluateCompleteDatetime(),r1.getEvaluateStartDatetime());
  Date d2=ObjectUtil.nvl(r2.getEvaluateCompleteDatetime(),r2.getEvaluateStartDatetime());
  int ret=OpenmrsUtil.compareWithNullAsLatest(d1,d2);
  if (ret == 0) {
    ret=r1.getPriority().compareTo(r2.getPriority());
  }
  if (ret == 0) {
    ret=OpenmrsUtil.compareWithNullAsLatest(r1.getRequestDate(),r2.getRequestDate());
  }
  if (ret == 0) {
    ret=OpenmrsUtil.compareWithNullAsGreatest(r1.getUuid(),r2.getUuid());
  }
  return ret;
}"
86786,"/** 
 * Utility method that extracts the position of a queued report request from its log file contents
 * @param reportRequest the {@link ReportRequest} object
 * @param rs {@link ReportService} object
 * @return the position of the report in the queue
 */
private Integer getQueuePosition(ReportRequest reportRequest,ReportService rs){
  List<String> logs=rs.loadReportLog(reportRequest);
  Integer position=null;
  for (  String log : logs) {
    log=log.trim();
    if (log.indexOf(""String_Node_Str"") > -1) {
      String[] tokens=log.split(""String_Node_Str"");
      try {
        position=Integer.valueOf(tokens[tokens.length - 1]);
      }
 catch (      NumberFormatException e) {
      }
      break;
    }
  }
  return position;
}","/** 
 * Utility method that extracts the position of a queued report request from its log file contents
 * @param reportRequest the {@link ReportRequest} object
 * @param rs {@link ReportService} object
 * @return the position of the report in the queue
 */
private Integer getQueuePosition(ReportRequest reportRequest,ReportService rs){
  List<String> logs=rs.loadReportLog(reportRequest);
  Integer position=null;
  for (  String log : logs) {
    log=log.trim();
    if (log.indexOf(""String_Node_Str"") > -1) {
      String[] tokens=log.split(""String_Node_Str"");
      try {
        position=Integer.valueOf(tokens[tokens.length - 1]);
      }
 catch (      NumberFormatException e) {
      }
    }
  }
  return position;
}"
86787,"/** 
 * Formats anything and prints it to sb. (Delegates to other methods here
 * @param sb
 * @param o
 */
private void printObject(StringBuilder sb,Object o){
  if (o instanceof Result) {
    printResult(sb,(Result)o);
  }
 else   if (o instanceof Collection) {
    for (Iterator<?> i=((Collection)o).iterator(); i.hasNext(); ) {
      printObject(sb,i.next());
      if (i.hasNext())       sb.append(""String_Node_Str"");
    }
  }
 else   if (o instanceof Date) {
    printDate(sb,(Date)o);
  }
 else   if (o instanceof Concept) {
    printConcept(sb,(Concept)o);
  }
 else   if (o instanceof Obs) {
    printObsValue(sb,(Obs)o);
  }
 else   if (o instanceof User) {
    printUser(sb,(User)o);
  }
 else   if (o instanceof Encounter) {
    printEncounter(sb,(Encounter)o);
  }
 else   if (o instanceof EncounterType) {
    printEncounterType(sb,(EncounterType)o);
  }
 else   if (o instanceof Location) {
    printLocation(sb,(Location)o);
  }
 else   if (o instanceof ReportData) {
    printReportData(sb,(ReportData)o);
  }
 else   if (o instanceof DataSet) {
    printDataSet(sb,null,(DataSet)o);
  }
 else   if (o instanceof Cohort) {
    printCohort(sb,(Cohort)o);
  }
 else   if (o instanceof CohortDimensionResult) {
    printCohortDimensionResult(sb,(CohortDimensionResult)o);
  }
 else   if (o instanceof BaseData) {
    printMap(sb,((BaseData)o).getData());
  }
 else   if (o instanceof OpenmrsMetadata) {
    sb.append(ObjectUtil.format(o));
  }
}","/** 
 * Formats anything and prints it to sb. (Delegates to other methods here
 * @param sb
 * @param o
 */
private void printObject(StringBuilder sb,Object o){
  if (o instanceof Result) {
    printResult(sb,(Result)o);
  }
 else   if (o instanceof Collection) {
    for (Iterator<?> i=((Collection)o).iterator(); i.hasNext(); ) {
      printObject(sb,i.next());
      if (i.hasNext())       sb.append(""String_Node_Str"");
    }
  }
 else   if (o instanceof Date) {
    printDate(sb,(Date)o);
  }
 else   if (o instanceof Concept) {
    printConcept(sb,(Concept)o);
  }
 else   if (o instanceof Obs) {
    printObsValue(sb,(Obs)o);
  }
 else   if (o instanceof User) {
    printUser(sb,(User)o);
  }
 else   if (o instanceof Encounter) {
    printEncounter(sb,(Encounter)o);
  }
 else   if (o instanceof EncounterType) {
    printEncounterType(sb,(EncounterType)o);
  }
 else   if (o instanceof Location) {
    printLocation(sb,(Location)o);
  }
 else   if (o instanceof ReportData) {
    printReportData(sb,(ReportData)o);
  }
 else   if (o instanceof DataSet) {
    printDataSet(sb,null,(DataSet)o);
  }
 else   if (o instanceof Cohort) {
    printCohort(sb,(Cohort)o);
  }
 else   if (o instanceof CohortDimensionResult) {
    printCohortDimensionResult(sb,(CohortDimensionResult)o);
  }
 else   if (o instanceof BaseData) {
    printMap(sb,((BaseData)o).getData());
  }
 else {
    sb.append(ObjectUtil.format(o));
  }
}"
86788,"/** 
 * @see ReportService#saveReport(Report,String)
 */
public Report saveReport(Report report,String description){
  boolean isPersisted=persistReportToDisk(report);
  if (isPersisted) {
    ReportRequest request=report.getRequest();
    request.setStatus(Status.SAVED);
    request.setDescription(description);
    Context.getService(ReportService.class).saveReportRequest(request);
    logReportMessage(request,""String_Node_Str"");
    return report;
  }
 else {
    throw new ReportingException(""String_Node_Str"");
  }
}","/** 
 * @see ReportService#saveReport(Report,String)
 */
public Report saveReport(Report report,String description){
  boolean isPersisted=persistReportToDisk(report);
  if (isPersisted) {
    ReportRequest request=Context.getService(ReportService.class).getReportRequest(report.getRequest().getId());
    request.setStatus(Status.SAVED);
    request.setDescription(description);
    Context.getService(ReportService.class).saveReportRequest(request);
    logReportMessage(request,""String_Node_Str"");
    report.setRequest(request);
    return report;
  }
 else {
    throw new ReportingException(""String_Node_Str"");
  }
}"
86789,"@ModelAttribute(""String_Node_Str"") public Definition getDefinition(@RequestParam(required=false,value=""String_Node_Str"") String uuid,@RequestParam(required=false,value=""String_Node_Str"") Class<? extends Definition> type){
  if (ObjectUtil.isNull(uuid)) {
    try {
      Definition d=type.newInstance();
      return d;
    }
 catch (    Exception e) {
      throw new IllegalArgumentException(""String_Node_Str"" + type);
    }
  }
  return DefinitionContext.getDefinitionByUuid(type,uuid);
}","@ModelAttribute(""String_Node_Str"") public Definition getDefinition(@RequestParam(required=false,value=""String_Node_Str"") String uuid,@RequestParam(required=false,value=""String_Node_Str"") Class<? extends Definition> type){
  Definition d=null;
  if (ObjectUtil.isNull(uuid)) {
    d=DefinitionContext.getDefinitionByUuid(type,uuid);
  }
  if (d == null) {
    try {
      d=type.newInstance();
    }
 catch (    Exception e) {
      throw new IllegalArgumentException(""String_Node_Str"" + type);
    }
  }
  return d;
}"
86790,"/** 
 * @return a formatted version of the object suitable for display
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static String format(Object o,String format){
  if (o == null) {
    return ""String_Node_Str"";
  }
  if (o instanceof Date) {
    DateFormat df=decode(format,Context.getDateFormat(),new SimpleDateFormat(format));
    return df.format((Date)o);
  }
  if (o instanceof Map) {
    return toString((Map)o,nvl(format,""String_Node_Str""));
  }
  if (o instanceof Collection) {
    return OpenmrsUtil.join((Collection)o,nvl(format,""String_Node_Str""));
  }
  if (o instanceof Object[]) {
    return toString(nvl(format,""String_Node_Str""),(Object[])o);
  }
  if (o instanceof Number) {
    if (notNull(format)) {
      NumberFormat nf=NumberFormat.getInstance();
      nf.setGroupingUsed(false);
      return nf.format((Number)o);
    }
  }
  if (o instanceof OpenmrsMetadata) {
    String name=((OpenmrsMetadata)o).getName();
    if (name == null) {
      if (o instanceof ProgramWorkflow) {
        name=((ProgramWorkflow)o).getConcept().getDisplayString();
      }
 else       if (o instanceof ProgramWorkflowState) {
        name=((ProgramWorkflowState)o).getConcept().getDisplayString();
      }
    }
    return name;
  }
  if (o instanceof OpenmrsData) {
    if (ObjectUtil.notNull(format)) {
      String[] formatSplit=format.split(""String_Node_Str"");
      String ret=formatSplit[0];
      try {
        int startIndex=ret.indexOf(""String_Node_Str"");
        int endIndex=ret.indexOf(""String_Node_Str"",startIndex + 1);
        while (startIndex != -1 && endIndex != -1) {
          String propertyName=format.substring(startIndex + 1,endIndex);
          Object replacement=ReflectionUtil.getPropertyValue(o,propertyName);
          String newFormat=(replacement != null && formatSplit.length > 1 ? formatSplit[1] : null);
          replacement=ObjectUtil.format(replacement,newFormat);
          ret=ret.replace(""String_Node_Str"" + propertyName + ""String_Node_Str"",nvlStr(replacement,""String_Node_Str""));
          startIndex=ret.indexOf(""String_Node_Str"");
          endIndex=ret.indexOf(""String_Node_Str"",startIndex + 1);
        }
        return ret;
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"" + format,e);
      }
    }
  }
  return o.toString();
}","/** 
 * @return a formatted version of the object suitable for display
 */
@SuppressWarnings({""String_Node_Str"",""String_Node_Str""}) public static String format(Object o,String format){
  if (o == null) {
    return ""String_Node_Str"";
  }
  if (o instanceof Date) {
    DateFormat df=decode(format,Context.getDateFormat(),new SimpleDateFormat(format));
    return df.format((Date)o);
  }
  if (o instanceof Map) {
    return toString((Map)o,nvl(format,""String_Node_Str""));
  }
  if (o instanceof Collection) {
    return OpenmrsUtil.join((Collection)o,nvl(format,""String_Node_Str""));
  }
  if (o instanceof Object[]) {
    return toString(nvl(format,""String_Node_Str""),(Object[])o);
  }
  if (o instanceof Number) {
    if (notNull(format)) {
      NumberFormat nf=NumberFormat.getInstance();
      nf.setGroupingUsed(false);
      return nf.format((Number)o);
    }
  }
  if (o instanceof OpenmrsMetadata) {
    String name=((OpenmrsMetadata)o).getName();
    if (name == null) {
      if (o instanceof ProgramWorkflow) {
        name=((ProgramWorkflow)o).getConcept().getDisplayString();
      }
 else       if (o instanceof ProgramWorkflowState) {
        name=((ProgramWorkflowState)o).getConcept().getDisplayString();
      }
    }
    return name;
  }
  if (o instanceof OpenmrsData) {
    if (ObjectUtil.notNull(format)) {
      String[] formatSplit=format.split(""String_Node_Str"");
      String ret=formatSplit[0];
      try {
        int startIndex=ret.indexOf(""String_Node_Str"");
        int endIndex=ret.indexOf(""String_Node_Str"",startIndex + 1);
        while (startIndex != -1 && endIndex != -1) {
          String propertyName=ret.substring(startIndex + 1,endIndex);
          Object replacement=ReflectionUtil.getPropertyValue(o,propertyName);
          String newFormat=(replacement != null && formatSplit.length > 1 ? formatSplit[1] : null);
          replacement=ObjectUtil.format(replacement,newFormat);
          ret=ret.replace(""String_Node_Str"" + propertyName + ""String_Node_Str"",nvlStr(replacement,""String_Node_Str""));
          startIndex=ret.indexOf(""String_Node_Str"");
          endIndex=ret.indexOf(""String_Node_Str"",startIndex + 1);
        }
        return ret;
      }
 catch (      Exception e) {
        log.warn(""String_Node_Str"" + format,e);
      }
    }
  }
  return o.toString();
}"
86791,"/** 
 * Adds the column headers and column data to the DataSet
 * @param dataSet
 * @param encounters
 * @param patientIdentifierTypes
 * @param optionalColumns
 * @param columnDisplayFormat
 * @param maxColumnHeaderWidth
 * @param allColumns
 * @param fieldMap
 * @return
 */
public DataSet addData(SimpleDataSet dataSet,List<Encounter> encounters,List<PatientIdentifierType> patientIdentifierTypes,List<EncounterAndObsDataSetDefinition.ObsOptionalColumn> optionalColumns,List<EncounterAndObsDataSetDefinition.ColumnDisplayFormat> columnDisplayFormat,Integer maxColumnHeaderWidth,Set<ObsColumnDescriptor> allColumns,Map<Encounter,Map<ObsColumnDescriptor,Obs>> fieldMap){
  for (  Encounter encounter : encounters) {
    DataSetRow row=new DataSetRow();
    String providerName=getProviderNameFromEncounter(encounter);
    DataSetColumn c1=new DataSetColumn(ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),Integer.class);
    row.addColumnValue(c1,encounter.getEncounterId());
    DataSetColumn c2=new DataSetColumn(ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),String.class);
    row.addColumnValue(c2,encounter.getEncounterDatetime().toString());
    DataSetColumn c3=new DataSetColumn(ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),String.class);
    row.addColumnValue(c3,(encounter.getLocation() != null) ? encounter.getLocation().getName() : EMPTY);
    DataSetColumn c4=new DataSetColumn(ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),String.class);
    row.addColumnValue(c4,providerName);
    DataSetColumn c5=new DataSetColumn(ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),Integer.class);
    row.addColumnValue(c5,encounter.getPatient() != null ? encounter.getPatient().getPatientId() : EMPTY);
    if (patientIdentifierTypes != null) {
      for (      PatientIdentifierType pit : patientIdentifierTypes) {
        List<PatientIdentifier> patientIdentifiers=encounter.getPatient().getPatientIdentifiers(pit);
        StringBuffer sbPatientIdentifiers=new StringBuffer();
        int count=0;
        for (        PatientIdentifier patientIdentifier : patientIdentifiers) {
          if (count > 0) {
            sbPatientIdentifiers.append(""String_Node_Str"");
          }
          sbPatientIdentifiers.append(patientIdentifier.toString());
          count++;
        }
        DataSetColumn c6=new DataSetColumn(pit.getName(),ObjectUtil.trimStringIfNeeded(pit.getName(),maxColumnHeaderWidth),String.class);
        row.addColumnValue(c6,sbPatientIdentifiers.toString());
      }
    }
    Map<ObsColumnDescriptor,Obs> obsInEncounter=fieldMap.get(encounter);
    for (    ObsColumnDescriptor columnKey : allColumns) {
      Obs obs=obsInEncounter.get(columnKey);
      String columnName=columnKey.format(columnDisplayFormat,maxColumnHeaderWidth);
      DataSetColumn obsDsc=new DataSetColumn(columnName,columnName,String.class);
      StringBuffer columnValue=new StringBuffer();
      if (obs != null && obs.getValueCoded() != null) {
        if (columnDisplayFormat.contains(EncounterAndObsDataSetDefinition.ColumnDisplayFormat.ID)) {
          columnValue.append(obs.getValueCoded());
        }
        if (columnDisplayFormat.contains(EncounterAndObsDataSetDefinition.ColumnDisplayFormat.ID) && columnDisplayFormat.contains(EncounterAndObsDataSetDefinition.ColumnDisplayFormat.BEST_SHORT_NAME)) {
          columnValue.append(""String_Node_Str"");
        }
        if (columnDisplayFormat.contains(EncounterAndObsDataSetDefinition.ColumnDisplayFormat.BEST_SHORT_NAME)) {
          String conceptName=obs.getValueAsString(Context.getLocale());
          columnValue.append(maxColumnHeaderWidth != null && conceptName.length() > maxColumnHeaderWidth - columnValue.length() ? conceptName.substring(0,maxColumnHeaderWidth - columnValue.length() - 1) : conceptName);
        }
        row.addColumnValue(obsDsc,(obs != null) ? columnValue.toString() : EMPTY);
      }
 else {
        row.addColumnValue(obsDsc,(obs != null) ? obs.getValueAsString(Context.getLocale()) : EMPTY);
      }
      String dateColumnName=columnKey.format(columnDisplayFormat,maxColumnHeaderWidth != null ? maxColumnHeaderWidth - 5 : null);
      DataSetColumn obsDscDate=new DataSetColumn(dateColumnName + ""String_Node_Str"",dateColumnName + ""String_Node_Str"",String.class);
      row.addColumnValue(obsDscDate,(obs != null) ? Context.getDateFormat().format(obs.getObsDatetime()) : EMPTY);
      String parentColumnName=columnKey.format(columnDisplayFormat,maxColumnHeaderWidth != null ? maxColumnHeaderWidth - 7 : null);
      DataSetColumn obsDscParent=new DataSetColumn(parentColumnName + ""String_Node_Str"",parentColumnName + ""String_Node_Str"",String.class);
      row.addColumnValue(obsDscParent,(obs != null && obs.getObsGroup() != null) ? obs.getObsGroup().getId() : EMPTY);
      if (optionalColumns != null) {
        if (optionalColumns.contains(EncounterAndObsDataSetDefinition.ObsOptionalColumn.VALUE_MODIFIER)) {
          String valModColumnName=columnKey.format(columnDisplayFormat,maxColumnHeaderWidth != null ? maxColumnHeaderWidth - 10 : null);
          DataSetColumn obsDscValueModifier=new DataSetColumn(valModColumnName + ""String_Node_Str"",valModColumnName + ""String_Node_Str"",String.class);
          row.addColumnValue(obsDscValueModifier,(obs != null) ? obs.getValueModifier() : EMPTY);
        }
        if (optionalColumns.contains(EncounterAndObsDataSetDefinition.ObsOptionalColumn.ACCESSION_NUMBER)) {
          String accessionNumColumnName=columnKey.format(columnDisplayFormat,maxColumnHeaderWidth != null ? maxColumnHeaderWidth - 14 : null);
          DataSetColumn obsDscAccessionNumber=new DataSetColumn(accessionNumColumnName + ""String_Node_Str"",accessionNumColumnName + ""String_Node_Str"",String.class);
          row.addColumnValue(obsDscAccessionNumber,(obs != null) ? obs.getAccessionNumber() : EMPTY);
        }
        if (optionalColumns.contains(EncounterAndObsDataSetDefinition.ObsOptionalColumn.COMMENT)) {
          String commentColumnName=columnKey.format(columnDisplayFormat,maxColumnHeaderWidth != null ? maxColumnHeaderWidth - 8 : null);
          DataSetColumn obsDscComment=new DataSetColumn(commentColumnName + ""String_Node_Str"",commentColumnName + ""String_Node_Str"",String.class);
          row.addColumnValue(obsDscComment,(obs != null) ? obs.getComment() : EMPTY);
        }
      }
    }
    dataSet.addRow(row);
  }
  return dataSet;
}","/** 
 * Adds the column headers and column data to the DataSet
 * @param dataSet
 * @param encounters
 * @param patientIdentifierTypes
 * @param optionalColumns
 * @param columnDisplayFormat
 * @param maxColumnHeaderWidth
 * @param allColumns
 * @param fieldMap
 * @return
 */
public DataSet addData(SimpleDataSet dataSet,List<Encounter> encounters,List<PatientIdentifierType> patientIdentifierTypes,List<EncounterAndObsDataSetDefinition.ObsOptionalColumn> optionalColumns,List<EncounterAndObsDataSetDefinition.ColumnDisplayFormat> columnDisplayFormat,Integer maxColumnHeaderWidth,Set<ObsColumnDescriptor> allColumns,Map<Encounter,Map<ObsColumnDescriptor,Obs>> fieldMap){
  for (  Encounter encounter : encounters) {
    DataSetRow row=new DataSetRow();
    String providerName=getProviderNameFromEncounter(encounter);
    DataSetColumn c1=new DataSetColumn(ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),Integer.class);
    row.addColumnValue(c1,encounter.getEncounterId());
    DataSetColumn c2=new DataSetColumn(ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),String.class);
    row.addColumnValue(c2,encounter.getEncounterDatetime().toString());
    DataSetColumn c3=new DataSetColumn(ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),String.class);
    row.addColumnValue(c3,(encounter.getLocation() != null) ? encounter.getLocation().getName() : EMPTY);
    DataSetColumn c4=new DataSetColumn(ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),String.class);
    row.addColumnValue(c4,providerName);
    DataSetColumn c5=new DataSetColumn(ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(""String_Node_Str"",maxColumnHeaderWidth),Integer.class);
    row.addColumnValue(c5,encounter.getPatient() != null ? encounter.getPatient().getPatientId() : EMPTY);
    if (patientIdentifierTypes != null) {
      for (      PatientIdentifierType pit : patientIdentifierTypes) {
        List<PatientIdentifier> patientIdentifiers=encounter.getPatient().getPatientIdentifiers(pit);
        StringBuffer sbPatientIdentifiers=new StringBuffer();
        int count=0;
        for (        PatientIdentifier patientIdentifier : patientIdentifiers) {
          if (count > 0) {
            sbPatientIdentifiers.append(""String_Node_Str"");
          }
          sbPatientIdentifiers.append(patientIdentifier.toString());
          count++;
        }
        DataSetColumn c6=new DataSetColumn(pit.getName(),ObjectUtil.trimStringIfNeeded(pit.getName(),maxColumnHeaderWidth),String.class);
        row.addColumnValue(c6,sbPatientIdentifiers.toString());
      }
    }
    Map<ObsColumnDescriptor,Obs> obsInEncounter=fieldMap.get(encounter);
    for (    ObsColumnDescriptor columnKey : allColumns) {
      Obs obs=obsInEncounter.get(columnKey);
      String columnName=columnKey.format(columnDisplayFormat,maxColumnHeaderWidth);
      DataSetColumn obsDsc=new DataSetColumn(columnName,columnName,String.class);
      StringBuffer columnValue=new StringBuffer();
      if (obs != null && obs.getValueCoded() != null) {
        if (columnDisplayFormat.contains(EncounterAndObsDataSetDefinition.ColumnDisplayFormat.ID)) {
          columnValue.append(obs.getValueCoded());
        }
        if (columnDisplayFormat.contains(EncounterAndObsDataSetDefinition.ColumnDisplayFormat.ID) && columnDisplayFormat.contains(EncounterAndObsDataSetDefinition.ColumnDisplayFormat.BEST_SHORT_NAME)) {
          columnValue.append(""String_Node_Str"");
        }
        if (columnDisplayFormat.contains(EncounterAndObsDataSetDefinition.ColumnDisplayFormat.BEST_SHORT_NAME)) {
          String conceptName=obs.getValueAsString(Context.getLocale());
          columnValue.append(maxColumnHeaderWidth != null && conceptName.length() > maxColumnHeaderWidth - columnValue.length() ? conceptName.substring(0,maxColumnHeaderWidth - columnValue.length() - 1) : conceptName);
        }
        row.addColumnValue(obsDsc,(obs != null) ? columnValue.toString() : EMPTY);
      }
 else {
        row.addColumnValue(obsDsc,(obs != null) ? obs.getValueAsString(Context.getLocale()) : EMPTY);
      }
      String dateColumnName=columnKey.format(columnDisplayFormat,maxColumnHeaderWidth != null ? maxColumnHeaderWidth - 5 : null);
      DataSetColumn obsDscDate=new DataSetColumn(dateColumnName + ""String_Node_Str"",dateColumnName + ""String_Node_Str"",String.class);
      row.addColumnValue(obsDscDate,(obs != null) ? obs.getObsDatetime().toString() : EMPTY);
      String parentColumnName=columnKey.format(columnDisplayFormat,maxColumnHeaderWidth != null ? maxColumnHeaderWidth - 7 : null);
      DataSetColumn obsDscParent=new DataSetColumn(parentColumnName + ""String_Node_Str"",parentColumnName + ""String_Node_Str"",String.class);
      row.addColumnValue(obsDscParent,(obs != null && obs.getObsGroup() != null) ? obs.getObsGroup().getId() : EMPTY);
      if (optionalColumns != null) {
        if (optionalColumns.contains(EncounterAndObsDataSetDefinition.ObsOptionalColumn.VALUE_MODIFIER)) {
          String valModColumnName=columnKey.format(columnDisplayFormat,maxColumnHeaderWidth != null ? maxColumnHeaderWidth - 10 : null);
          DataSetColumn obsDscValueModifier=new DataSetColumn(valModColumnName + ""String_Node_Str"",valModColumnName + ""String_Node_Str"",String.class);
          row.addColumnValue(obsDscValueModifier,(obs != null) ? obs.getValueModifier() : EMPTY);
        }
        if (optionalColumns.contains(EncounterAndObsDataSetDefinition.ObsOptionalColumn.ACCESSION_NUMBER)) {
          String accessionNumColumnName=columnKey.format(columnDisplayFormat,maxColumnHeaderWidth != null ? maxColumnHeaderWidth - 14 : null);
          DataSetColumn obsDscAccessionNumber=new DataSetColumn(accessionNumColumnName + ""String_Node_Str"",accessionNumColumnName + ""String_Node_Str"",String.class);
          row.addColumnValue(obsDscAccessionNumber,(obs != null) ? obs.getAccessionNumber() : EMPTY);
        }
        if (optionalColumns.contains(EncounterAndObsDataSetDefinition.ObsOptionalColumn.COMMENT)) {
          String commentColumnName=columnKey.format(columnDisplayFormat,maxColumnHeaderWidth != null ? maxColumnHeaderWidth - 8 : null);
          DataSetColumn obsDscComment=new DataSetColumn(commentColumnName + ""String_Node_Str"",commentColumnName + ""String_Node_Str"",String.class);
          row.addColumnValue(obsDscComment,(obs != null) ? obs.getComment() : EMPTY);
        }
      }
    }
    dataSet.addRow(row);
  }
  return dataSet;
}"
86792,"/** 
 * @see org.openmrs.module.reporting.encounter.query.db.EncounterQueryDAO#getEncounters(org.openmrs.Cohort,java.util.List,java.util.List,java.util.Date,java.util.Date,org.openmrs.module.reporting.common.TimeQualifier) Caveat for this implementation: For @param encounterDatetimeOnOrBefore if time is not set (00:00:00), then time is changed to 23:59:59
 */
public List<Encounter> getEncounters(Cohort cohort,List<EncounterType> encounterTypes,List<Form> forms,Date encounterDatetimeOnOrAfter,Date encounterDatetimeOnOrBefore,TimeQualifier whichEncounterQualifier){
  if (cohort != null && cohort.size() == 0) {
    return new ArrayList<Encounter>();
  }
 else {
    Criteria criteria=sessionFactory.getCurrentSession().createCriteria(Encounter.class);
    if (cohort != null)     criteria.add(Restrictions.in(""String_Node_Str"",cohort.getMemberIds()));
    criteria.add(Restrictions.eq(""String_Node_Str"",false));
    if (encounterTypes != null && encounterTypes.size() > 0)     criteria.add(Restrictions.in(""String_Node_Str"",encounterTypes));
    if (forms != null && forms.size() > 0)     criteria.add(Restrictions.in(""String_Node_Str"",forms));
    if (encounterDatetimeOnOrAfter != null)     criteria.add(Expression.ge(""String_Node_Str"",encounterDatetimeOnOrAfter));
    if (encounterDatetimeOnOrBefore != null)     criteria.add(Expression.le(""String_Node_Str"",DateUtil.getEndOfDayIfTimeExcluded(encounterDatetimeOnOrBefore)));
    criteria.addOrder(org.hibernate.criterion.Order.asc(""String_Node_Str""));
    if (whichEncounterQualifier != null && whichEncounterQualifier.equals(TimeQualifier.LAST))     criteria.addOrder(org.hibernate.criterion.Order.desc(""String_Node_Str""));
 else     criteria.addOrder(org.hibernate.criterion.Order.asc(""String_Node_Str""));
    return criteria.list();
  }
}","/** 
 * @see org.openmrs.module.reporting.encounter.query.db.EncounterQueryDAO#getEncounters(org.openmrs.Cohort,java.util.List,java.util.List,java.util.Date,java.util.Date,org.openmrs.module.reporting.common.TimeQualifier) Caveat for this implementation: For @param encounterDatetimeOnOrBefore if time is not set (00:00:00), then time is changed to 23:59:59
 */
public List<Encounter> getEncounters(Cohort cohort,List<EncounterType> encounterTypes,List<Form> forms,Date encounterDatetimeOnOrAfter,Date encounterDatetimeOnOrBefore,TimeQualifier whichEncounterQualifier){
  if (cohort != null && cohort.size() == 0) {
    return new ArrayList<Encounter>();
  }
 else {
    Criteria criteria=sessionFactory.getCurrentSession().createCriteria(Encounter.class);
    if (cohort != null)     criteria.add(Restrictions.in(""String_Node_Str"",cohort.getMemberIds()));
    criteria.add(Restrictions.eq(""String_Node_Str"",false));
    if (encounterTypes != null && encounterTypes.size() > 0)     criteria.add(Restrictions.in(""String_Node_Str"",encounterTypes));
    if (forms != null && forms.size() > 0)     criteria.add(Restrictions.in(""String_Node_Str"",forms));
    if (encounterDatetimeOnOrAfter != null)     criteria.add(Expression.ge(""String_Node_Str"",encounterDatetimeOnOrAfter));
    if (encounterDatetimeOnOrBefore != null)     criteria.add(Expression.le(""String_Node_Str"",DateUtil.getEndOfDayIfTimeExcluded(encounterDatetimeOnOrBefore)));
    criteria.addOrder(org.hibernate.criterion.Order.asc(""String_Node_Str""));
    if (whichEncounterQualifier != null && whichEncounterQualifier.equals(TimeQualifier.LAST))     criteria.addOrder(org.hibernate.criterion.Order.desc(""String_Node_Str""));
 else     criteria.addOrder(org.hibernate.criterion.Order.asc(""String_Node_Str""));
    criteria.createCriteria(""String_Node_Str"").add(Restrictions.eq(""String_Node_Str"",false));
    return criteria.list();
  }
}"
86793,"/** 
 * @see {@link EncounterAndObsDataSetEvaluator#evaluate(DataSetDefinition,EvaluationContext)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void evaluate_shouldEvaluateAnEncounterAndObsDataSetDefinitionAllEncounterObsValuesInReportRow() throws Exception {
  executeDataSet(XML_ENCOUNTER_DATASET);
  executeDataSet(XML_OBS_GROUP_DATASET);
  executeDataSet(XML_FORM_DATASET);
  Form form=Context.getFormService().getForm(2);
  Encounter encounter1=Context.getEncounterService().getEncounter(13);
  Encounter encounter2=Context.getEncounterService().getEncounter(14);
  encounter1.setForm(form);
  encounter2.setForm(form);
  EncounterAndObsDataSetDefinition d=new EncounterAndObsDataSetDefinition();
  d.setForms(Collections.singletonList(form));
  d.setColumnDisplayFormat(Collections.singletonList(EncounterAndObsDataSetDefinition.ColumnDisplayFormat.ID));
  Integer maxColumnHeaderWidth=d.getMaxColumnHeaderWidth();
  SimpleDataSet result=(SimpleDataSet)Context.getService(DataSetDefinitionService.class).evaluate(d,null);
  for (  DataSetRow row : result.getRows()) {
    Integer encounterId=(Integer)row.getColumnValue(""String_Node_Str"");
    Encounter e=Context.getEncounterService().getEncounter(encounterId);
    List<String> obsValues=new ArrayList<String>();
    for (    DataSetColumn dsc : row.getColumnValues().keySet()) {
      String obsValue=row.getColumnValue(dsc).toString();
      if (StringUtils.isNotEmpty(obsValue)) {
        obsValues.add(obsValue);
      }
    }
    for (    Obs obs : e.getObs()) {
      Concept obsCodedValue=obs.getValueCoded();
      String obsNonCodedValue=obs.getValueAsString(Context.getLocale());
      if ((obsCodedValue != null) || (obsNonCodedValue != null && StringUtils.isNotEmpty(obsNonCodedValue))) {
        if (obsCodedValue != null && obsValues.contains(obsCodedValue.toString())) {
          boolean obsRemoved=obsValues.remove(obsCodedValue.toString());
          boolean obsDateRemoved=obsValues.remove(Context.getDateFormat().format(obs.getObsDatetime()));
          boolean obsGroupRemoved=false;
          if (obs.getObsGroup() != null) {
            obsGroupRemoved=obsValues.remove(obs.getObsGroup().getId().toString());
          }
 else {
            obsGroupRemoved=true;
          }
          Assert.assertTrue(obsRemoved && obsDateRemoved && obsGroupRemoved);
        }
 else         if (obsValues.contains(obsNonCodedValue)) {
          boolean obsRemoved=obsValues.remove(obsNonCodedValue);
          boolean obsDateRemoved=obsValues.remove(Context.getDateFormat().format(obs.getObsDatetime()));
          boolean obsGroupRemoved=false;
          if (obs.getObsGroup() != null) {
            obsGroupRemoved=obsValues.remove(obs.getObsGroup().getId().toString());
          }
 else {
            obsGroupRemoved=true;
          }
          Assert.assertTrue(obsRemoved && obsDateRemoved && obsGroupRemoved);
        }
 else {
          Assert.assertFalse(true);
        }
      }
    }
    Assert.assertTrue(obsValues.size() == 5);
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getEncounterId().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getEncounterDatetime().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getLocation().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getProvider().getPersonName().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getPatientId().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
  }
}","/** 
 * @see {@link EncounterAndObsDataSetEvaluator#evaluate(DataSetDefinition,EvaluationContext)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void evaluate_shouldEvaluateAnEncounterAndObsDataSetDefinitionAllEncounterObsValuesInReportRow() throws Exception {
  executeDataSet(XML_ENCOUNTER_DATASET);
  executeDataSet(XML_OBS_GROUP_DATASET);
  executeDataSet(XML_FORM_DATASET);
  Form form=Context.getFormService().getForm(2);
  Encounter encounter1=Context.getEncounterService().getEncounter(13);
  Encounter encounter2=Context.getEncounterService().getEncounter(14);
  encounter1.setForm(form);
  encounter2.setForm(form);
  EncounterAndObsDataSetDefinition d=new EncounterAndObsDataSetDefinition();
  d.setForms(Collections.singletonList(form));
  d.setColumnDisplayFormat(Collections.singletonList(EncounterAndObsDataSetDefinition.ColumnDisplayFormat.ID));
  Integer maxColumnHeaderWidth=d.getMaxColumnHeaderWidth();
  SimpleDataSet result=(SimpleDataSet)Context.getService(DataSetDefinitionService.class).evaluate(d,null);
  for (  DataSetRow row : result.getRows()) {
    Integer encounterId=(Integer)row.getColumnValue(""String_Node_Str"");
    Encounter e=Context.getEncounterService().getEncounter(encounterId);
    List<String> obsValues=new ArrayList<String>();
    for (    DataSetColumn dsc : row.getColumnValues().keySet()) {
      String obsValue=row.getColumnValue(dsc).toString();
      if (StringUtils.isNotEmpty(obsValue)) {
        obsValues.add(obsValue);
      }
    }
    for (    Obs obs : e.getObs()) {
      Concept obsCodedValue=obs.getValueCoded();
      String obsNonCodedValue=obs.getValueAsString(Context.getLocale());
      if ((obsCodedValue != null) || (obsNonCodedValue != null && StringUtils.isNotEmpty(obsNonCodedValue))) {
        if (obsCodedValue != null && obsValues.contains(obsCodedValue.toString())) {
          boolean obsRemoved=obsValues.remove(obsCodedValue.toString());
          boolean obsDateRemoved=obsValues.remove(obs.getObsDatetime().toString());
          boolean obsGroupRemoved=false;
          if (obs.getObsGroup() != null) {
            obsGroupRemoved=obsValues.remove(obs.getObsGroup().getId().toString());
          }
 else {
            obsGroupRemoved=true;
          }
          Assert.assertTrue(obsRemoved && obsDateRemoved && obsGroupRemoved);
        }
 else         if (obsValues.contains(obsNonCodedValue)) {
          boolean obsRemoved=obsValues.remove(obsNonCodedValue);
          boolean obsDateRemoved=obsValues.remove(obs.getObsDatetime().toString());
          boolean obsGroupRemoved=false;
          if (obs.getObsGroup() != null) {
            obsGroupRemoved=obsValues.remove(obs.getObsGroup().getId().toString());
          }
 else {
            obsGroupRemoved=true;
          }
          Assert.assertTrue(obsRemoved && obsDateRemoved && obsGroupRemoved);
        }
 else {
          Assert.assertFalse(true);
        }
      }
    }
    Assert.assertTrue(obsValues.size() == 5);
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getEncounterId().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getEncounterDatetime().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getLocation().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getProvider().getPersonName().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getPatientId().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
  }
}"
86794,"/** 
 * @see {@link EncounterAndObsDataSetEvaluator#evaluate(DataSetDefinition,EvaluationContext)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void evaluate_shouldEvaluateAnEncounterAndObsDataSetDefinitionAllEncounterObsValuesWithOptionalColumns() throws Exception {
  executeDataSet(XML_ENCOUNTER_DATASET);
  executeDataSet(XML_OBS_GROUP_DATASET);
  executeDataSet(XML_FORM_DATASET);
  Form form=Context.getFormService().getForm(2);
  Encounter encounter1=Context.getEncounterService().getEncounter(13);
  Encounter encounter2=Context.getEncounterService().getEncounter(14);
  encounter1.setForm(form);
  encounter2.setForm(form);
  EncounterAndObsDataSetDefinition d=new EncounterAndObsDataSetDefinition();
  d.setForms(Collections.singletonList(form));
  d.setColumnDisplayFormat(Collections.singletonList(EncounterAndObsDataSetDefinition.ColumnDisplayFormat.ID));
  List<EncounterAndObsDataSetDefinition.ObsOptionalColumn> optionalColumns=new ArrayList<EncounterAndObsDataSetDefinition.ObsOptionalColumn>();
  optionalColumns.add(EncounterAndObsDataSetDefinition.ObsOptionalColumn.ACCESSION_NUMBER);
  optionalColumns.add(EncounterAndObsDataSetDefinition.ObsOptionalColumn.VALUE_MODIFIER);
  optionalColumns.add(EncounterAndObsDataSetDefinition.ObsOptionalColumn.COMMENT);
  d.setOptionalColumns(optionalColumns);
  Integer maxColumnHeaderWidth=d.getMaxColumnHeaderWidth();
  SimpleDataSet result=(SimpleDataSet)Context.getService(DataSetDefinitionService.class).evaluate(d,null);
  for (  DataSetRow row : result.getRows()) {
    Integer encounterId=(Integer)row.getColumnValue(""String_Node_Str"");
    Encounter e=Context.getEncounterService().getEncounter(encounterId);
    List<String> obsValues=new ArrayList<String>();
    for (    DataSetColumn dsc : row.getColumnValues().keySet()) {
      Object obsValue=row.getColumnValue(dsc);
      if (obsValue != null && obsValue != ""String_Node_Str"") {
        obsValues.add(obsValue.toString());
      }
    }
    for (    Obs obs : e.getObs()) {
      Concept obsCodedValue=obs.getValueCoded();
      String obsNonCodedValue=obs.getValueAsString(Context.getLocale());
      if ((obsCodedValue != null) || (obsNonCodedValue != null && StringUtils.isNotEmpty(obsNonCodedValue))) {
        if (obsCodedValue != null && obsValues.contains(obsCodedValue.toString())) {
          boolean obsRemoved=obsValues.remove(obsCodedValue.toString());
          Assert.assertTrue(obsRemoved);
        }
 else         if (obsValues.contains(obsNonCodedValue)) {
          boolean obsRemoved=obsValues.remove(obsNonCodedValue);
          Assert.assertTrue(obsRemoved);
        }
 else {
          Assert.assertFalse(true);
        }
        boolean obsGroupRemoved=false;
        if (obs.getObsGroup() != null) {
          obsGroupRemoved=obsValues.remove(obs.getObsGroup().getId().toString());
        }
 else {
          obsGroupRemoved=true;
        }
        boolean obsValueModRemoved=false;
        if (obs.getValueModifier() != null) {
          obsValueModRemoved=obsValues.remove(obs.getValueModifier());
        }
 else {
          obsValueModRemoved=true;
        }
        boolean obsDateRemoved=false;
        if (obs.getObsDatetime() != null) {
          obsDateRemoved=obsValues.remove(Context.getDateFormat().format(obs.getObsDatetime()));
        }
 else {
          obsDateRemoved=true;
        }
        boolean obsAccessionRemoved=false;
        if (obs.getAccessionNumber() != null) {
          obsAccessionRemoved=obsValues.remove(obs.getAccessionNumber());
        }
 else {
          obsAccessionRemoved=true;
        }
        boolean obsCommentRemoved=false;
        if (obs.getComment() != null) {
          obsCommentRemoved=obsValues.remove(obs.getComment());
        }
 else {
          obsCommentRemoved=true;
        }
        Assert.assertTrue(obsDateRemoved && obsGroupRemoved && obsValueModRemoved&& obsAccessionRemoved&& obsCommentRemoved);
      }
    }
    Assert.assertTrue(obsValues.size() == 5);
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getEncounterId().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getEncounterDatetime().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getLocation().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getProvider().getPersonName().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getPatientId().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
  }
}","/** 
 * @see {@link EncounterAndObsDataSetEvaluator#evaluate(DataSetDefinition,EvaluationContext)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void evaluate_shouldEvaluateAnEncounterAndObsDataSetDefinitionAllEncounterObsValuesWithOptionalColumns() throws Exception {
  executeDataSet(XML_ENCOUNTER_DATASET);
  executeDataSet(XML_OBS_GROUP_DATASET);
  executeDataSet(XML_FORM_DATASET);
  Form form=Context.getFormService().getForm(2);
  Encounter encounter1=Context.getEncounterService().getEncounter(13);
  Encounter encounter2=Context.getEncounterService().getEncounter(14);
  encounter1.setForm(form);
  encounter2.setForm(form);
  EncounterAndObsDataSetDefinition d=new EncounterAndObsDataSetDefinition();
  d.setForms(Collections.singletonList(form));
  d.setColumnDisplayFormat(Collections.singletonList(EncounterAndObsDataSetDefinition.ColumnDisplayFormat.ID));
  List<EncounterAndObsDataSetDefinition.ObsOptionalColumn> optionalColumns=new ArrayList<EncounterAndObsDataSetDefinition.ObsOptionalColumn>();
  optionalColumns.add(EncounterAndObsDataSetDefinition.ObsOptionalColumn.ACCESSION_NUMBER);
  optionalColumns.add(EncounterAndObsDataSetDefinition.ObsOptionalColumn.VALUE_MODIFIER);
  optionalColumns.add(EncounterAndObsDataSetDefinition.ObsOptionalColumn.COMMENT);
  d.setOptionalColumns(optionalColumns);
  Integer maxColumnHeaderWidth=d.getMaxColumnHeaderWidth();
  SimpleDataSet result=(SimpleDataSet)Context.getService(DataSetDefinitionService.class).evaluate(d,null);
  for (  DataSetRow row : result.getRows()) {
    Integer encounterId=(Integer)row.getColumnValue(""String_Node_Str"");
    Encounter e=Context.getEncounterService().getEncounter(encounterId);
    List<String> obsValues=new ArrayList<String>();
    for (    DataSetColumn dsc : row.getColumnValues().keySet()) {
      Object obsValue=row.getColumnValue(dsc);
      if (obsValue != null && obsValue != ""String_Node_Str"") {
        obsValues.add(obsValue.toString());
      }
    }
    for (    Obs obs : e.getObs()) {
      Concept obsCodedValue=obs.getValueCoded();
      String obsNonCodedValue=obs.getValueAsString(Context.getLocale());
      if ((obsCodedValue != null) || (obsNonCodedValue != null && StringUtils.isNotEmpty(obsNonCodedValue))) {
        if (obsCodedValue != null && obsValues.contains(obsCodedValue.toString())) {
          boolean obsRemoved=obsValues.remove(obsCodedValue.toString());
          Assert.assertTrue(obsRemoved);
        }
 else         if (obsValues.contains(obsNonCodedValue)) {
          boolean obsRemoved=obsValues.remove(obsNonCodedValue);
          Assert.assertTrue(obsRemoved);
        }
 else {
          Assert.assertFalse(true);
        }
        boolean obsGroupRemoved=false;
        if (obs.getObsGroup() != null) {
          obsGroupRemoved=obsValues.remove(obs.getObsGroup().getId().toString());
        }
 else {
          obsGroupRemoved=true;
        }
        boolean obsValueModRemoved=false;
        if (obs.getValueModifier() != null) {
          obsValueModRemoved=obsValues.remove(obs.getValueModifier());
        }
 else {
          obsValueModRemoved=true;
        }
        boolean obsDateRemoved=false;
        if (obs.getObsDatetime() != null) {
          obsDateRemoved=obsValues.remove(obs.getObsDatetime().toString());
        }
 else {
          obsDateRemoved=true;
        }
        boolean obsAccessionRemoved=false;
        if (obs.getAccessionNumber() != null) {
          obsAccessionRemoved=obsValues.remove(obs.getAccessionNumber());
        }
 else {
          obsAccessionRemoved=true;
        }
        boolean obsCommentRemoved=false;
        if (obs.getComment() != null) {
          obsCommentRemoved=obsValues.remove(obs.getComment());
        }
 else {
          obsCommentRemoved=true;
        }
        Assert.assertTrue(obsDateRemoved && obsGroupRemoved && obsValueModRemoved&& obsAccessionRemoved&& obsCommentRemoved);
      }
    }
    Assert.assertTrue(obsValues.size() == 5);
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getEncounterId().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getEncounterDatetime().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getLocation().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getProvider().getPersonName().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
    Assert.assertEquals(ObjectUtil.trimStringIfNeeded(e.getPatientId().toString(),maxColumnHeaderWidth),ObjectUtil.trimStringIfNeeded(row.getColumnValue(""String_Node_Str"").toString(),maxColumnHeaderWidth));
  }
}"
86795,"@InitBinder public void initBinder(WebDataBinder binder){
  binder.registerCustomEditor(Location.class,new LocationEditor());
  binder.registerCustomEditor(Indicator.class,new IndicatorEditor());
}","@InitBinder public void initBinder(WebDataBinder binder){
  binder.registerCustomEditor(Location.class,new LocationEditor());
  binder.registerCustomEditor(Indicator.class,new IndicatorEditor());
  binder.registerCustomEditor(Integer.class,new CustomNumberEditor(Integer.class,true));
}"
86796,"/** 
 * Computes the list of patients who currently meet the given definition<br/>
 * @param cohortDefinition CohortDefinition to evaluate
 * @param context context to use during evaluation
 * @return the cohort of all patients who meet the definition now
 */
public Cohort evaluate(CohortDefinition cohortDefinition,EvaluationContext context);","/** 
 * Computes the list of patients who currently meet the given definition<br/>
 * @param cohortDefinition CohortDefinition to evaluate
 * @param context context to use during evaluation
 * @return the cohort of all patients who meet the definition now
 */
public Cohort evaluate(CohortDefinition cohortDefinition,EvaluationContext context) throws EvaluationException ;"
86797,"/** 
 * @see CohortDefinitionEvaluator#evaluateCohort(CohortDefinition,EvaluationContext)
 */
public Cohort evaluate(CohortDefinition cohortDefinition,EvaluationContext context){
  CompositionCohortDefinition composition=(CompositionCohortDefinition)cohortDefinition;
  return CohortExpressionParser.evaluate(composition,context);
}","/** 
 * @throws EvaluationException 
 * @see CohortDefinitionEvaluator#evaluateCohort(CohortDefinition,EvaluationContext)
 */
public Cohort evaluate(CohortDefinition cohortDefinition,EvaluationContext context) throws EvaluationException {
  CompositionCohortDefinition composition=(CompositionCohortDefinition)cohortDefinition;
  try {
    return CohortExpressionParser.evaluate(composition,context);
  }
 catch (  MissingDependencyException ex) {
    String name=composition.getName() != null ? composition.getName() : composition.getCompositionString();
    throw new EvaluationException(""String_Node_Str"" + ex.getPropertyThatFailed() + ""String_Node_Str""+ name+ ""String_Node_Str"",ex);
  }
}"
86798,"/** 
 * @see CohortDefinitionEvaluator#evaluateCohort(CohortDefinition,EvaluationContext)
 * @should return all patients who are not in the inner cohort definition
 * @should successfully use the context base cohort
 */
public Cohort evaluate(CohortDefinition cohortDefinition,EvaluationContext context){
  InverseCohortDefinition icd=(InverseCohortDefinition)cohortDefinition;
  context=ObjectUtil.nvl(context,new EvaluationContext());
  Cohort allPatients=ObjectUtil.nvl(context.getBaseCohort(),Context.getPatientSetService().getAllPatients());
  Cohort baseCohort=Context.getService(CohortDefinitionService.class).evaluate(icd.getBaseDefinition(),context);
  return Cohort.subtract(allPatients,baseCohort);
}","/** 
 * @throws EvaluationException 
 * @see CohortDefinitionEvaluator#evaluateCohort(CohortDefinition,EvaluationContext)
 * @should return all patients who are not in the inner cohort definition
 * @should successfully use the context base cohort
 */
public Cohort evaluate(CohortDefinition cohortDefinition,EvaluationContext context) throws EvaluationException {
  InverseCohortDefinition icd=(InverseCohortDefinition)cohortDefinition;
  context=ObjectUtil.nvl(context,new EvaluationContext());
  Cohort allPatients=ObjectUtil.nvl(context.getBaseCohort(),Context.getPatientSetService().getAllPatients());
  Cohort baseCohort;
  try {
    baseCohort=Context.getService(CohortDefinitionService.class).evaluate(icd.getBaseDefinition(),context);
  }
 catch (  EvaluationException ex) {
    throw new EvaluationException(""String_Node_Str"");
  }
  return Cohort.subtract(allPatients,baseCohort);
}"
86799,"/** 
 * @see DefinitionService#evaluate(Mapped<Definition>, EvaluationContext)
 */
public EvaluatedCohort evaluate(Mapped<? extends CohortDefinition> definition,EvaluationContext context) throws APIException ;","/** 
 * @see DefinitionService#evaluate(Mapped<Definition>, EvaluationContext)
 */
public EvaluatedCohort evaluate(Mapped<? extends CohortDefinition> definition,EvaluationContext context) throws EvaluationException ;"
86800,"/** 
 * @see BaseDefinitionService#evaluate(Mapped,EvaluationContext)
 */
@Override public EvaluatedCohort evaluate(Mapped<? extends CohortDefinition> definition,EvaluationContext context) throws APIException {
  return (EvaluatedCohort)super.evaluate(definition,context);
}","/** 
 * @see BaseDefinitionService#evaluate(Mapped,EvaluationContext)
 */
@Override public EvaluatedCohort evaluate(Mapped<? extends CohortDefinition> definition,EvaluationContext context) throws EvaluationException {
  return (EvaluatedCohort)super.evaluate(definition,context);
}"
86801,"/** 
 * Recursively traverse the List<Object> phrase to produce a (possibly nested) CompoundCohortDefinition If another List<Object> is found in the list, recursively evaluate it in place If anything in this list is a key into searches, replace it with the relevant filter from searches
 */
@SuppressWarnings(""String_Node_Str"") public static Cohort evaluate(List<Object> tokens,CompositionCohortDefinition composition,EvaluationContext context){
  log.debug(""String_Node_Str"" + tokens + ""String_Node_Str""+ composition.getSearches());
  List<Object> use=new ArrayList<Object>();
  for (  Object o : tokens) {
    log.debug(""String_Node_Str"" + o);
    if (o instanceof List) {
      log.debug(""String_Node_Str"");
      Cohort result=evaluate((List<Object>)o,composition,context);
      log.debug(o + ""String_Node_Str"" + result.size());
      use.add(result);
    }
 else     if (o instanceof String || o instanceof Integer) {
      log.debug(""String_Node_Str"");
      Mapped<CohortDefinition> cd=composition.getSearches().get(o.toString());
      log.debug(""String_Node_Str"" + cd);
      Cohort result=Context.getService(CohortDefinitionService.class).evaluate(cd,context);
      log.debug(""String_Node_Str"" + result.size());
      use.add(result);
    }
 else {
      log.debug(""String_Node_Str"" + o);
      use.add(o);
    }
  }
  log.debug(""String_Node_Str"" + use);
  log.debug(""String_Node_Str"");
  boolean invertTheNext=false;
  for (ListIterator<Object> i=use.listIterator(); i.hasNext(); ) {
    Object o=i.next();
    log.debug(""String_Node_Str"" + o);
    if (o instanceof BooleanOperator) {
      if ((BooleanOperator)o == BooleanOperator.NOT) {
        i.remove();
        invertTheNext=!invertTheNext;
        log.debug(""String_Node_Str"" + invertTheNext);
      }
 else {
        if (invertTheNext) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
    }
 else {
      if (invertTheNext) {
        log.debug(""String_Node_Str"");
        if (o instanceof Cohort) {
          Cohort baseCohort=context.getBaseCohort();
          Cohort currentCohort=(Cohort)o;
          if (baseCohort == null) {
            baseCohort=Context.getPatientSetService().getAllPatients();
          }
          log.debug(""String_Node_Str"" + currentCohort.size());
          log.debug(""String_Node_Str"" + baseCohort.size());
          Cohort invertedCohort=Cohort.subtract(baseCohort,currentCohort);
          log.debug(""String_Node_Str"" + baseCohort.size());
          i.set(invertedCohort);
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + o.getClass());
        }
        invertTheNext=false;
      }
    }
  }
  log.debug(""String_Node_Str"" + use);
  log.debug(""String_Node_Str"");
  Cohort ret=null;
  BooleanOperator operator=BooleanOperator.AND;
  for (  Object o : use) {
    if (o instanceof BooleanOperator) {
      operator=(BooleanOperator)o;
      log.debug(""String_Node_Str"" + operator);
    }
 else     if (o instanceof Cohort) {
      Cohort c=(Cohort)o;
      log.debug(""String_Node_Str"" + c.getSize());
      if (ret == null) {
        ret=c;
        log.debug(""String_Node_Str"");
      }
 else {
        if (operator == BooleanOperator.AND) {
          ret=Cohort.intersect(ret,c);
          log.debug(""String_Node_Str"" + ret.getSize());
        }
 else         if (operator == BooleanOperator.OR) {
          ret=Cohort.union(ret,c);
          log.debug(""String_Node_Str"" + ret.getSize());
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + operator);
        }
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + o.getClass());
    }
  }
  log.debug(""String_Node_Str"" + ret.getSize());
  return ret;
}","/** 
 * Recursively traverse the List<Object> phrase to produce a (possibly nested) CompoundCohortDefinition If another List<Object> is found in the list, recursively evaluate it in place If anything in this list is a key into searches, replace it with the relevant filter from searches
 * @throws EvaluationException 
 */
@SuppressWarnings(""String_Node_Str"") public static Cohort evaluate(List<Object> tokens,CompositionCohortDefinition composition,EvaluationContext context) throws EvaluationException {
  log.debug(""String_Node_Str"" + tokens + ""String_Node_Str""+ composition.getSearches());
  List<Object> use=new ArrayList<Object>();
  for (  Object o : tokens) {
    log.debug(""String_Node_Str"" + o);
    if (o instanceof List) {
      log.debug(""String_Node_Str"");
      Cohort result=evaluate((List<Object>)o,composition,context);
      log.debug(o + ""String_Node_Str"" + result.size());
      use.add(result);
    }
 else     if (o instanceof String || o instanceof Integer) {
      log.debug(""String_Node_Str"");
      Mapped<CohortDefinition> cd=composition.getSearches().get(o.toString());
      if (cd == null || cd.getParameterizable() == null) {
        throw new MissingDependencyException(o.toString());
      }
      log.debug(""String_Node_Str"" + cd);
      Cohort result;
      try {
        result=Context.getService(CohortDefinitionService.class).evaluate(cd,context);
      }
 catch (      EvaluationException ex) {
        throw new EvaluationException(o.toString());
      }
      log.debug(""String_Node_Str"" + result.size());
      use.add(result);
    }
 else {
      log.debug(""String_Node_Str"" + o);
      use.add(o);
    }
  }
  log.debug(""String_Node_Str"" + use);
  log.debug(""String_Node_Str"");
  boolean invertTheNext=false;
  for (ListIterator<Object> i=use.listIterator(); i.hasNext(); ) {
    Object o=i.next();
    log.debug(""String_Node_Str"" + o);
    if (o instanceof BooleanOperator) {
      if ((BooleanOperator)o == BooleanOperator.NOT) {
        i.remove();
        invertTheNext=!invertTheNext;
        log.debug(""String_Node_Str"" + invertTheNext);
      }
 else {
        if (invertTheNext) {
          throw new RuntimeException(""String_Node_Str"");
        }
      }
    }
 else {
      if (invertTheNext) {
        log.debug(""String_Node_Str"");
        if (o instanceof Cohort) {
          Cohort baseCohort=context.getBaseCohort();
          Cohort currentCohort=(Cohort)o;
          if (baseCohort == null) {
            baseCohort=Context.getPatientSetService().getAllPatients();
          }
          log.debug(""String_Node_Str"" + currentCohort.size());
          log.debug(""String_Node_Str"" + baseCohort.size());
          Cohort invertedCohort=Cohort.subtract(baseCohort,currentCohort);
          log.debug(""String_Node_Str"" + baseCohort.size());
          i.set(invertedCohort);
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + o.getClass());
        }
        invertTheNext=false;
      }
    }
  }
  log.debug(""String_Node_Str"" + use);
  log.debug(""String_Node_Str"");
  Cohort ret=null;
  BooleanOperator operator=BooleanOperator.AND;
  for (  Object o : use) {
    if (o instanceof BooleanOperator) {
      operator=(BooleanOperator)o;
      log.debug(""String_Node_Str"" + operator);
    }
 else     if (o instanceof Cohort) {
      Cohort c=(Cohort)o;
      log.debug(""String_Node_Str"" + c.getSize());
      if (ret == null) {
        ret=c;
        log.debug(""String_Node_Str"");
      }
 else {
        if (operator == BooleanOperator.AND) {
          ret=Cohort.intersect(ret,c);
          log.debug(""String_Node_Str"" + ret.getSize());
        }
 else         if (operator == BooleanOperator.OR) {
          ret=Cohort.union(ret,c);
          log.debug(""String_Node_Str"" + ret.getSize());
        }
 else {
          throw new RuntimeException(""String_Node_Str"" + operator);
        }
      }
    }
 else {
      throw new RuntimeException(""String_Node_Str"" + o.getClass());
    }
  }
  log.debug(""String_Node_Str"" + ret.getSize());
  return ret;
}"
86802,"/** 
 * Returns the intersection of all passed CohortDefinitions
 * @param context - The EvaluationContext to utilize
 * @param definitions - The CohortDefinitions to evaluate
 * @return - The intersection of the Cohorts produced by each evaluated CohortDefinitions
 */
public static Cohort filter(EvaluationContext context,Mapped<CohortDefinition>... definitions){
  Cohort ret=context.getBaseCohort();
  if (definitions != null) {
    for (    Mapped<CohortDefinition> d : definitions) {
      if (d != null) {
        Cohort c=Context.getService(CohortDefinitionService.class).evaluate(d,context);
        if (ret == null) {
          ret=c;
        }
 else {
          ret=Cohort.intersect(ret,c);
        }
      }
    }
  }
  return ret;
}","/** 
 * Returns the intersection of all passed CohortDefinitions
 * @param context - The EvaluationContext to utilize
 * @param definitions - The CohortDefinitions to evaluate
 * @return - The intersection of the Cohorts produced by each evaluated CohortDefinitions
 * @throws EvaluationException if any of the passed definitions could not be evaluated
 */
public static Cohort filter(EvaluationContext context,Mapped<CohortDefinition>... definitions) throws EvaluationException {
  Cohort ret=context.getBaseCohort();
  if (definitions != null) {
    for (    Mapped<CohortDefinition> d : definitions) {
      if (d != null) {
        Cohort c=Context.getService(CohortDefinitionService.class).evaluate(d,context);
        if (ret == null) {
          ret=c;
        }
 else {
          ret=Cohort.intersect(ret,c);
        }
      }
    }
  }
  return ret;
}"
86803,"/** 
 * @see DataSetEvaluator#evaluate(DataSetDefinition,EvaluationContext)
 */
public DataSet evaluate(DataSetDefinition dataSetDefinition,EvaluationContext context){
  context=ObjectUtil.nvl(context,new EvaluationContext());
  if (context.getBaseCohort() == null) {
    context.setBaseCohort(Context.getPatientSetService().getAllPatients());
  }
  MapDataSet data=new MapDataSet(dataSetDefinition,context);
  CohortCrossTabDataSetDefinition dsd=(CohortCrossTabDataSetDefinition)dataSetDefinition;
  CohortDefinitionService cds=Context.getService(CohortDefinitionService.class);
  for (  CohortDataSetColumn col : dsd.getDataSetColumns()) {
    Cohort rowCohort=(col.getRowDefinition() == null ? context.getBaseCohort() : cds.evaluate(col.getRowDefinition(),context));
    Cohort colCohort=(col.getColumnDefinition() == null ? context.getBaseCohort() : cds.evaluate(col.getColumnDefinition(),context));
    Cohort c=Cohort.intersect(rowCohort,colCohort);
    data.addData(col,c);
  }
  return data;
}","/** 
 * @throws EvaluationException 
 * @see DataSetEvaluator#evaluate(DataSetDefinition,EvaluationContext)
 */
public DataSet evaluate(DataSetDefinition dataSetDefinition,EvaluationContext context) throws EvaluationException {
  context=ObjectUtil.nvl(context,new EvaluationContext());
  if (context.getBaseCohort() == null) {
    context.setBaseCohort(Context.getPatientSetService().getAllPatients());
  }
  MapDataSet data=new MapDataSet(dataSetDefinition,context);
  CohortCrossTabDataSetDefinition dsd=(CohortCrossTabDataSetDefinition)dataSetDefinition;
  CohortDefinitionService cds=Context.getService(CohortDefinitionService.class);
  for (  CohortDataSetColumn col : dsd.getDataSetColumns()) {
    Cohort rowCohort;
    try {
      rowCohort=(col.getRowDefinition() == null ? context.getBaseCohort() : cds.evaluate(col.getRowDefinition(),context));
    }
 catch (    EvaluationException ex) {
      throw new EvaluationException(""String_Node_Str"" + col.getRowName() + ""String_Node_Str""+ col.getColumnName());
    }
    Cohort colCohort;
    try {
      colCohort=(col.getColumnDefinition() == null ? context.getBaseCohort() : cds.evaluate(col.getColumnDefinition(),context));
    }
 catch (    EvaluationException ex) {
      throw new EvaluationException(""String_Node_Str"" + col.getRowName() + ""String_Node_Str""+ col.getColumnName());
    }
    Cohort c=Cohort.intersect(rowCohort,colCohort);
    data.addData(col,c);
  }
  return data;
}"
86804,"/** 
 * @see DataSetEvaluator#evaluate(DataSetDefinition,EvaluationContext)
 * @should evaluate a CohortIndicatorDataSetDefinition
 */
public MapDataSet evaluate(DataSetDefinition dataSetDefinition,EvaluationContext context){
  CohortIndicatorAndDimensionDataSetDefinition dsd=(CohortIndicatorAndDimensionDataSetDefinition)dataSetDefinition;
  MapDataSet ret=new MapDataSet(dataSetDefinition,context);
  context=ObjectUtil.nvl(context,new EvaluationContext());
  if (context.getBaseCohort() == null) {
    context.setBaseCohort(Context.getPatientSetService().getAllPatients());
  }
  IndicatorService is=Context.getService(IndicatorService.class);
  DimensionService ds=Context.getService(DimensionService.class);
  for (  CohortIndicatorAndDimensionSpecification spec : dsd.getSpecifications()) {
    List<String> combinations=IndicatorUtil.compileColumnDimensionOptions(spec.getDimensionOptions());
    combinations.add(0,null);
    for (    String combination : combinations) {
      CohortIndicatorResult result=(CohortIndicatorResult)is.evaluate(spec.getIndicator(),context);
      log.debug(""String_Node_Str"" + spec.getLabel() + ""String_Node_Str""+ result.getValue());
      CohortIndicatorAndDimensionResult resultWithDimensions=new CohortIndicatorAndDimensionResult(result,context);
      DataSetColumn column=new DataSetColumn(spec.getIndicatorNumber(),spec.getLabel(),Object.class);
      if (combination != null) {
        for (        String option : combination.split(""String_Node_Str"")) {
          String[] dimOpt=option.split(""String_Node_Str"");
          column.setName(column.getName() + ""String_Node_Str"" + option);
          column.setLabel(column.getLabel() + (column.getLabel().equals(spec.getLabel()) ? ""String_Node_Str"" : ""String_Node_Str"") + dimOpt[0]+ ""String_Node_Str""+ dimOpt[1]);
          Mapped<CohortDefinitionDimension> dimension=dsd.getDimension(dimOpt[0]);
          CohortDimensionResult dimensionResult=(CohortDimensionResult)ds.evaluate(dimension,context);
          Cohort dimensionCohort=dimensionResult.getCohort(dimOpt[1]);
          resultWithDimensions.addDimensionResult(dimension.getParameterizable(),dimensionCohort);
        }
        column.setLabel(column.getLabel() + ""String_Node_Str"");
      }
      ret.addData(column,resultWithDimensions);
    }
  }
  return ret;
}","/** 
 * @throws EvaluationException 
 * @see DataSetEvaluator#evaluate(DataSetDefinition,EvaluationContext)
 * @should evaluate a CohortIndicatorDataSetDefinition
 */
public MapDataSet evaluate(DataSetDefinition dataSetDefinition,EvaluationContext context) throws EvaluationException {
  CohortIndicatorAndDimensionDataSetDefinition dsd=(CohortIndicatorAndDimensionDataSetDefinition)dataSetDefinition;
  MapDataSet ret=new MapDataSet(dataSetDefinition,context);
  context=ObjectUtil.nvl(context,new EvaluationContext());
  if (context.getBaseCohort() == null) {
    context.setBaseCohort(Context.getPatientSetService().getAllPatients());
  }
  IndicatorService is=Context.getService(IndicatorService.class);
  DimensionService ds=Context.getService(DimensionService.class);
  for (  CohortIndicatorAndDimensionSpecification spec : dsd.getSpecifications()) {
    List<String> combinations=IndicatorUtil.compileColumnDimensionOptions(spec.getDimensionOptions());
    combinations.add(0,null);
    for (    String combination : combinations) {
      CohortIndicatorResult result;
      try {
        result=(CohortIndicatorResult)is.evaluate(spec.getIndicator(),context);
      }
 catch (      EvaluationException ex) {
        throw new EvaluationException(""String_Node_Str"" + spec.getLabel() + ""String_Node_Str""+ spec.getIndicatorNumber()+ ""String_Node_Str"");
      }
      log.debug(""String_Node_Str"" + spec.getLabel() + ""String_Node_Str""+ result.getValue());
      CohortIndicatorAndDimensionResult resultWithDimensions=new CohortIndicatorAndDimensionResult(result,context);
      DataSetColumn column=new DataSetColumn(spec.getIndicatorNumber(),spec.getLabel(),Object.class);
      if (combination != null) {
        for (        String option : combination.split(""String_Node_Str"")) {
          String[] dimOpt=option.split(""String_Node_Str"");
          column.setName(column.getName() + ""String_Node_Str"" + option);
          column.setLabel(column.getLabel() + (column.getLabel().equals(spec.getLabel()) ? ""String_Node_Str"" : ""String_Node_Str"") + dimOpt[0]+ ""String_Node_Str""+ dimOpt[1]);
          Mapped<CohortDefinitionDimension> dimension=dsd.getDimension(dimOpt[0]);
          try {
            CohortDimensionResult dimensionResult=(CohortDimensionResult)ds.evaluate(dimension,context);
            Cohort dimensionCohort=dimensionResult.getCohort(dimOpt[1]);
            resultWithDimensions.addDimensionResult(dimension.getParameterizable(),dimensionCohort);
          }
 catch (          EvaluationException ex) {
            throw new EvaluationException(""String_Node_Str"" + option);
          }
        }
        column.setLabel(column.getLabel() + ""String_Node_Str"");
      }
      ret.addData(column,resultWithDimensions);
    }
  }
  return ret;
}"
86805,"/** 
 * @see DataSetEvaluator#evaluate(DataSetDefinition,EvaluationContext)
 * @should evaluate a CohortIndicatorDataSetDefinition
 */
public MapDataSet evaluate(DataSetDefinition dataSetDefinition,EvaluationContext context){
  CohortIndicatorDataSetDefinition dsd=(CohortIndicatorDataSetDefinition)dataSetDefinition;
  context=ObjectUtil.nvl(context,new EvaluationContext());
  if (context.getBaseCohort() == null) {
    context.setBaseCohort(Context.getPatientSetService().getAllPatients());
  }
  IndicatorService is=Context.getService(IndicatorService.class);
  DimensionService ds=Context.getService(DimensionService.class);
  MapDataSet ret=new MapDataSet(dataSetDefinition,context);
  for (  DataSetColumn dsc : dsd.getColumns()) {
    ret.getMetaData().addColumn(dsc);
  }
  Map<String,Map<String,Cohort>> dimensionCalculationCache=new HashMap<String,Map<String,Cohort>>();
  for (  Map.Entry<String,Mapped<CohortDefinitionDimension>> e : dsd.getDimensions().entrySet()) {
    String dimensionKey=e.getKey();
    CohortDimensionResult dim=(CohortDimensionResult)ds.evaluate(e.getValue(),context);
    dimensionCalculationCache.put(dimensionKey,dim.getOptionCohorts());
  }
  Map<Mapped<? extends CohortIndicator>,CohortIndicatorResult> indicatorCalculationCache=new HashMap<Mapped<? extends CohortIndicator>,CohortIndicatorResult>();
  for (  DataSetColumn c : dsd.getColumns()) {
    CohortIndicatorAndDimensionColumn col=(CohortIndicatorAndDimensionColumn)c;
    if (!indicatorCalculationCache.containsKey(col.getIndicator())) {
      CohortIndicatorResult result=(CohortIndicatorResult)is.evaluate(col.getIndicator(),context);
      log.debug(""String_Node_Str"" + col.getIndicator());
      indicatorCalculationCache.put(col.getIndicator(),result);
    }
  }
  for (  DataSetColumn c : dsd.getColumns()) {
    CohortIndicatorAndDimensionColumn col=(CohortIndicatorAndDimensionColumn)c;
    CohortIndicatorResult result=indicatorCalculationCache.get(col.getIndicator());
    CohortIndicatorAndDimensionResult resultWithDimensions=new CohortIndicatorAndDimensionResult(result,context);
    if (col.getDimensionOptions() != null) {
      for (      Map.Entry<String,String> e : col.getDimensionOptions().entrySet()) {
        log.debug(""String_Node_Str"" + e.getKey() + ""String_Node_Str""+ e.getValue());
        CohortDefinitionDimension dimension=dsd.getDimension(e.getKey()).getParameterizable();
        Cohort dimensionCohort=dimensionCalculationCache.get(e.getKey()).get(e.getValue());
        resultWithDimensions.addDimensionResult(dimension,dimensionCohort);
      }
    }
    ret.addData(col,resultWithDimensions);
  }
  return ret;
}","/** 
 * @throws EvaluationException 
 * @see DataSetEvaluator#evaluate(DataSetDefinition,EvaluationContext)
 * @should evaluate a CohortIndicatorDataSetDefinition
 */
public MapDataSet evaluate(DataSetDefinition dataSetDefinition,EvaluationContext context) throws EvaluationException {
  CohortIndicatorDataSetDefinition dsd=(CohortIndicatorDataSetDefinition)dataSetDefinition;
  context=ObjectUtil.nvl(context,new EvaluationContext());
  if (context.getBaseCohort() == null) {
    context.setBaseCohort(Context.getPatientSetService().getAllPatients());
  }
  IndicatorService is=Context.getService(IndicatorService.class);
  DimensionService ds=Context.getService(DimensionService.class);
  MapDataSet ret=new MapDataSet(dataSetDefinition,context);
  for (  DataSetColumn dsc : dsd.getColumns()) {
    ret.getMetaData().addColumn(dsc);
  }
  Map<String,Map<String,Cohort>> dimensionCalculationCache=new HashMap<String,Map<String,Cohort>>();
  for (  Map.Entry<String,Mapped<CohortDefinitionDimension>> e : dsd.getDimensions().entrySet()) {
    String dimensionKey=e.getKey();
    try {
      CohortDimensionResult dim=(CohortDimensionResult)ds.evaluate(e.getValue(),context);
      dimensionCalculationCache.put(dimensionKey,dim.getOptionCohorts());
    }
 catch (    EvaluationException ex) {
      throw new EvaluationException(""String_Node_Str"" + dimensionKey,ex);
    }
  }
  Map<Mapped<? extends CohortIndicator>,CohortIndicatorResult> indicatorCalculationCache=new HashMap<Mapped<? extends CohortIndicator>,CohortIndicatorResult>();
  for (  DataSetColumn c : dsd.getColumns()) {
    CohortIndicatorAndDimensionColumn col=(CohortIndicatorAndDimensionColumn)c;
    if (!indicatorCalculationCache.containsKey(col.getIndicator())) {
      try {
        CohortIndicatorResult result=(CohortIndicatorResult)is.evaluate(col.getIndicator(),context);
        log.debug(""String_Node_Str"" + col.getIndicator());
        indicatorCalculationCache.put(col.getIndicator(),result);
      }
 catch (      EvaluationException ex) {
        throw new EvaluationException(""String_Node_Str"" + col.getLabel() + ""String_Node_Str""+ col.getName()+ ""String_Node_Str"",ex);
      }
    }
  }
  for (  DataSetColumn c : dsd.getColumns()) {
    CohortIndicatorAndDimensionColumn col=(CohortIndicatorAndDimensionColumn)c;
    CohortIndicatorResult result=indicatorCalculationCache.get(col.getIndicator());
    CohortIndicatorAndDimensionResult resultWithDimensions=new CohortIndicatorAndDimensionResult(result,context);
    if (col.getDimensionOptions() != null) {
      for (      Map.Entry<String,String> e : col.getDimensionOptions().entrySet()) {
        log.debug(""String_Node_Str"" + e.getKey() + ""String_Node_Str""+ e.getValue());
        CohortDefinitionDimension dimension=dsd.getDimension(e.getKey()).getParameterizable();
        Cohort dimensionCohort=dimensionCalculationCache.get(e.getKey()).get(e.getValue());
        resultWithDimensions.addDimensionResult(dimension,dimensionCohort);
      }
    }
    ret.addData(col,resultWithDimensions);
  }
  return ret;
}"
86806,"/** 
 * Get patients having ranged (i.e. Numeric or Date/Time) obs that match a complicated query.
 * @param timeModifier
 * @param question
 * @param groupingConcept
 * @param onOrAfter
 * @param onOrBefore
 * @param locationList
 * @param encounterTypeList
 * @param operator1
 * @param value1 if non-null this value controls whether the query looks at value_numeric or value_datetime
 * @param operator2
 * @param value2
 * @return cohort of patients with matching obs
 * @should get patients with any obs of a specified concept
 * @should get patients whose first obs of a specified concept is in a range
 * @should get patients whose maximum obs of a specified concept is equal to a specified value
 * @should get patients with any obs of a specified concept in a specified encounter type
 * @should get patients whose first obs of a specified concept in a specified encounter type is in a range
 * @should get patients whose maximum obs of a specified concept in a specified encounter type is equals to a specified value
 */
public Cohort getPatientsHavingRangedObs(TimeModifier timeModifier,Concept question,Concept groupingConcept,Date onOrAfter,Date onOrBefore,List<Location> locationList,List<EncounterType> encounterTypeList,RangeComparator operator1,Object value1,RangeComparator operator2,Object value2);","/** 
 * Get patients having ranged (i.e. Numeric or Date/Time) obs that match a complicated query.
 * @param timeModifier
 * @param question
 * @param groupingConcept
 * @param onOrAfter
 * @param onOrBefore
 * @param locationList
 * @param encounterTypeList
 * @param operator1
 * @param value1 if non-null this value controls whether the query looks at value_numeric or value_datetime
 * @param operator2
 * @param value2
 * @return cohort of patients with matching obs
 * @should get patients with any obs of a specified concept
 * @should get patients whose first obs of a specified concept is in a range
 * @should get patients whose maximum obs of a specified concept is equal to a specified value
 * @should get patients with any obs of a specified concept in a specified encounter type
 * @should get patients whose first obs of a specified concept in a specified encounter type is in a range
 * @should get patients whose maximum obs of a specified concept in a specified encounter type is equals to a specified value
 * @should get patients with a query with all parameters
 */
public Cohort getPatientsHavingRangedObs(TimeModifier timeModifier,Concept question,Concept groupingConcept,Date onOrAfter,Date onOrBefore,List<Location> locationList,List<EncounterType> encounterTypeList,RangeComparator operator1,Object value1,RangeComparator operator2,Object value2);"
86807,"/** 
 * @see {@link CohortQueryService#getPatientsHavingRangedObs(TimeModifier,Concept,Concept,Date,Date,List<Location>,List<EncounterType>,RangeComparator,Object,RangeComparator,Object)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void getPatientsHavingRangedObs_shouldGetPatientsWhoseFirstObsOfASpecifiedConceptInASpecifiedEncounterTypeIsInARange() throws Exception {
  CohortQueryService service=Context.getService(CohortQueryService.class);
  List<EncounterType> encTypeList=Collections.singletonList(new EncounterType(1));
  Cohort cohort=service.getPatientsHavingRangedObs(TimeModifier.FIRST,new Concept(5089),null,null,null,null,encTypeList,RangeComparator.GREATER_THAN,54d,RangeComparator.LESS_EQUAL,56d);
  Assert.assertEquals(1,cohort.size());
  Assert.assertTrue(cohort.contains(7));
  encTypeList=Collections.singletonList(new EncounterType(2));
  cohort=service.getPatientsHavingRangedObs(TimeModifier.FIRST,new Concept(5089),null,null,null,null,encTypeList,RangeComparator.GREATER_THAN,49d,RangeComparator.LESS_EQUAL,51d);
  Assert.assertEquals(1,cohort.size());
  Assert.assertTrue(cohort.contains(7));
}","/** 
 * @see {@link CohortQueryService#getPatientsHavingRangedObs(TimeModifier,Concept,Concept,Date,Date,List<Location>,List<EncounterType>,RangeComparator,Object,RangeComparator,Object)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void getPatientsHavingRangedObs_shouldGetPatientsWhoseFirstObsOfASpecifiedConceptInASpecifiedEncounterTypeIsInARange() throws Exception {
  CohortQueryService service=Context.getService(CohortQueryService.class);
  List<EncounterType> encTypeList=Collections.singletonList(new EncounterType(1));
  Cohort cohort=service.getPatientsHavingRangedObs(TimeModifier.FIRST,new Concept(5089),null,null,null,null,encTypeList,RangeComparator.GREATER_THAN,54d,RangeComparator.LESS_EQUAL,56d);
  assertCohort(cohort,7);
  encTypeList=Collections.singletonList(new EncounterType(2));
  cohort=service.getPatientsHavingRangedObs(TimeModifier.FIRST,new Concept(5089),null,null,null,null,encTypeList,RangeComparator.GREATER_THAN,49d,RangeComparator.LESS_EQUAL,51d);
  assertCohort(cohort,7);
}"
86808,"/** 
 * @see {@link CohortQueryService#getPatientsHavingRangedObs(TimeModifier,Concept,Concept,java.util.Date,java.util.Date,java.util.List,java.util.List,RangeComparator,Object,RangeComparator,Object)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void getPatientsHavingRangedObs_shouldGetPatientsWhoseFirstObsOfASpecifiedConceptIsInARange() throws Exception {
  CohortQueryService service=Context.getService(CohortQueryService.class);
  Cohort cohort=service.getPatientsHavingRangedObs(TimeModifier.FIRST,new Concept(5089),null,null,null,null,null,RangeComparator.GREATER_THAN,50d,RangeComparator.LESS_EQUAL,80d);
  Assert.assertEquals(1,cohort.size());
  Assert.assertTrue(cohort.contains(21));
}","/** 
 * @see {@link CohortQueryService#getPatientsHavingRangedObs(TimeModifier,Concept,Concept,java.util.Date,java.util.Date,java.util.List,java.util.List,RangeComparator,Object,RangeComparator,Object)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void getPatientsHavingRangedObs_shouldGetPatientsWhoseFirstObsOfASpecifiedConceptIsInARange() throws Exception {
  CohortQueryService service=Context.getService(CohortQueryService.class);
  Cohort cohort=service.getPatientsHavingRangedObs(TimeModifier.FIRST,new Concept(5089),null,null,null,null,null,RangeComparator.GREATER_THAN,50d,RangeComparator.LESS_EQUAL,80d);
  assertCohort(cohort,21);
}"
86809,"/** 
 * @see {@link CohortQueryService#getPatientsHavingRangedObs(TimeModifier,Concept,Concept,java.util.Date,java.util.Date,java.util.List,java.util.List,RangeComparator,Object,RangeComparator,Object)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void getPatientsHavingRangedObs_shouldGetPatientsWhoseMaximumObsOfASpecifiedConceptIsEqualToASpecifiedValue() throws Exception {
  CohortQueryService service=Context.getService(CohortQueryService.class);
  Cohort cohort=service.getPatientsHavingRangedObs(TimeModifier.MAX,new Concept(5089),null,null,null,null,null,RangeComparator.EQUAL,180d,null,null);
  Assert.assertEquals(1,cohort.size());
  Assert.assertTrue(cohort.contains(20));
}","/** 
 * @see {@link CohortQueryService#getPatientsHavingRangedObs(TimeModifier,Concept,Concept,java.util.Date,java.util.Date,java.util.List,java.util.List,RangeComparator,Object,RangeComparator,Object)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void getPatientsHavingRangedObs_shouldGetPatientsWhoseMaximumObsOfASpecifiedConceptIsEqualToASpecifiedValue() throws Exception {
  CohortQueryService service=Context.getService(CohortQueryService.class);
  Cohort cohort=service.getPatientsHavingRangedObs(TimeModifier.MAX,new Concept(5089),null,null,null,null,null,RangeComparator.EQUAL,180d,null,null);
  assertCohort(cohort,20);
}"
86810,"/** 
 * @see {@link CohortQueryService#getPatientsHavingRangedObs(TimeModifier,Concept,Concept,java.util.Date,java.util.Date,java.util.List,java.util.List,RangeComparator,Object,RangeComparator,Object)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void getPatientsHavingRangedObs_shouldGetPatientsWithAnyObsOfASpecifiedConcept() throws Exception {
  CohortQueryService service=Context.getService(CohortQueryService.class);
  Cohort cohort=service.getPatientsHavingRangedObs(TimeModifier.ANY,new Concept(5089),null,null,null,null,null,null,null,null,null);
  Assert.assertEquals(4,cohort.size());
  Assert.assertTrue(cohort.contains(7));
  Assert.assertTrue(cohort.contains(20));
  Assert.assertTrue(cohort.contains(21));
  Assert.assertTrue(cohort.contains(22));
}","/** 
 * @see {@link CohortQueryService#getPatientsHavingRangedObs(TimeModifier,Concept,Concept,java.util.Date,java.util.Date,java.util.List,java.util.List,RangeComparator,Object,RangeComparator,Object)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void getPatientsHavingRangedObs_shouldGetPatientsWithAnyObsOfASpecifiedConcept() throws Exception {
  CohortQueryService service=Context.getService(CohortQueryService.class);
  Cohort cohort=service.getPatientsHavingRangedObs(TimeModifier.ANY,new Concept(5089),null,null,null,null,null,null,null,null,null);
  assertCohort(cohort,7,20,21,22);
}"
86811,"/** 
 * @see {@link CohortQueryService#getPatientsHavingRangedObs(TimeModifier,Concept,Concept,Date,Date,List<Location>,List<EncounterType>,RangeComparator,Object,RangeComparator,Object)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void getPatientsHavingRangedObs_shouldGetPatientsWhoseMaximumObsOfASpecifiedConceptInASpecifiedEncounterTypeIsEqualsToASpecifiedValue() throws Exception {
  CohortQueryService service=Context.getService(CohortQueryService.class);
  List<EncounterType> encTypeList=Collections.singletonList(new EncounterType(1));
  Cohort cohort=service.getPatientsHavingRangedObs(TimeModifier.MAX,new Concept(5089),null,null,null,null,encTypeList,RangeComparator.EQUAL,61d,null,null);
  Assert.assertEquals(1,cohort.size());
  Assert.assertTrue(cohort.contains(7));
  encTypeList=Collections.singletonList(new EncounterType(2));
  cohort=service.getPatientsHavingRangedObs(TimeModifier.MAX,new Concept(5089),null,null,null,null,encTypeList,RangeComparator.EQUAL,50d,null,null);
  Assert.assertEquals(1,cohort.size());
  Assert.assertTrue(cohort.contains(7));
}","/** 
 * @see {@link CohortQueryService#getPatientsHavingRangedObs(TimeModifier,Concept,Concept,Date,Date,List<Location>,List<EncounterType>,RangeComparator,Object,RangeComparator,Object)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void getPatientsHavingRangedObs_shouldGetPatientsWhoseMaximumObsOfASpecifiedConceptInASpecifiedEncounterTypeIsEqualsToASpecifiedValue() throws Exception {
  CohortQueryService service=Context.getService(CohortQueryService.class);
  List<EncounterType> encTypeList=Collections.singletonList(new EncounterType(1));
  Cohort cohort=service.getPatientsHavingRangedObs(TimeModifier.MAX,new Concept(5089),null,null,null,null,encTypeList,RangeComparator.EQUAL,61d,null,null);
  assertCohort(cohort,7);
  encTypeList=Collections.singletonList(new EncounterType(2));
  cohort=service.getPatientsHavingRangedObs(TimeModifier.MAX,new Concept(5089),null,null,null,null,encTypeList,RangeComparator.EQUAL,50d,null,null);
  assertCohort(cohort,7);
}"
86812,"/** 
 * @see {@link CohortQueryService#getPatientsHavingRangedObs(TimeModifier,Concept,Concept,Date,Date,List<Location>,List<EncounterType>,RangeComparator,Object,RangeComparator,Object)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void getPatientsHavingRangedObs_shouldGetPatientsWithAnyObsOfASpecifiedConceptInASpecifiedEncounterType() throws Exception {
  CohortQueryService service=Context.getService(CohortQueryService.class);
  List<EncounterType> encTypeList=Collections.singletonList(new EncounterType(1));
  Cohort cohort=service.getPatientsHavingRangedObs(TimeModifier.ANY,new Concept(5089),null,null,null,null,encTypeList,null,null,null,null);
  Assert.assertEquals(1,cohort.size());
  Assert.assertTrue(cohort.contains(7));
}","/** 
 * @see {@link CohortQueryService#getPatientsHavingRangedObs(TimeModifier,Concept,Concept,Date,Date,List<Location>,List<EncounterType>,RangeComparator,Object,RangeComparator,Object)}
 */
@Test @Verifies(value=""String_Node_Str"",method=""String_Node_Str"") public void getPatientsHavingRangedObs_shouldGetPatientsWithAnyObsOfASpecifiedConceptInASpecifiedEncounterType() throws Exception {
  CohortQueryService service=Context.getService(CohortQueryService.class);
  List<EncounterType> encTypeList=Collections.singletonList(new EncounterType(1));
  Cohort cohort=service.getPatientsHavingRangedObs(TimeModifier.ANY,new Concept(5089),null,null,null,null,encTypeList,null,null,null,null);
  assertCohort(cohort,7);
}"
86813,"/** 
 * Manage Definitions Controller
 */
@RequestMapping(""String_Node_Str"") public void manageDefinitions(@RequestParam(required=true,value=""String_Node_Str"") Class<? extends Definition> type,@RequestParam(required=false,value=""String_Node_Str"") Boolean includeRetired,ModelMap model){
  boolean retired=includeRetired != null && includeRetired.booleanValue();
  List<? extends Definition> definitions=DefinitionContext.getAllDefinitions(type,retired);
  Map<Class<? extends Definition>,List<Definition>> defsByType=new TreeMap<Class<? extends Definition>,List<Definition>>(new DefinitionNameComparator());
  for (  Class<? extends Definition> supportedType : DefinitionContext.getDefinitionService(type).getDefinitionTypes()) {
    defsByType.put(supportedType,new ArrayList<Definition>());
  }
  for (  Definition d : definitions) {
    List<Definition> l=defsByType.get(d.getClass());
    if (l == null) {
      l=new ArrayList<Definition>();
    }
    l.add(d);
    defsByType.put(d.getClass(),l);
  }
  model.addAttribute(""String_Node_Str"",type);
  model.addAttribute(""String_Node_Str"",defsByType);
  model.addAttribute(""String_Node_Str"",definitions);
}","/** 
 * Manage Definitions Controller
 */
@RequestMapping(""String_Node_Str"") public void manageDefinitions(@RequestParam(required=true,value=""String_Node_Str"") Class<? extends Definition> type,@RequestParam(required=false,value=""String_Node_Str"") Boolean includeRetired,ModelMap model){
  boolean retired=includeRetired != null && includeRetired.booleanValue();
  List<? extends Definition> definitions=DefinitionContext.getAllDefinitions(type,retired);
  Map<Class<? extends Definition>,List<Definition>> defsByType=new TreeMap<Class<? extends Definition>,List<Definition>>(new DefinitionNameComparator());
  for (  Class<? extends Definition> supportedType : DefinitionContext.getDefinitionService(type).getDefinitionTypes()) {
    defsByType.put(supportedType,new ArrayList<Definition>());
  }
  for (  Definition d : definitions) {
    List<Definition> l=defsByType.get(d.getClass());
    if (l == null) {
      l=new ArrayList<Definition>();
    }
    l.add(d);
    defsByType.put(d.getClass(),l);
  }
  if (!ModuleFactory.getStartedModulesMap().containsKey(""String_Node_Str"")) {
    defsByType.remove(DataExportDataSetDefinition.class);
  }
  model.addAttribute(""String_Node_Str"",type);
  model.addAttribute(""String_Node_Str"",defsByType);
  model.addAttribute(""String_Node_Str"",definitions);
}"
86814,"/** 
 * @return the searches
 */
public Map<String,Mapped<CohortDefinition>> getSearches(){
  return searches;
}","/** 
 * @return the searches
 */
public Map<String,Mapped<CohortDefinition>> getSearches(){
  if (searches == null) {
    searches=new HashMap<String,Mapped<CohortDefinition>>();
  }
  return searches;
}"
86815,"/** 
 * @see CohortDefinitionEvaluator#evaluateCohort(CohortDefinition,EvaluationContext)
 */
public Cohort evaluate(CohortDefinition cohortDefinition,EvaluationContext evaluationContext){
  Cohort cohort=new Cohort();
  SqlCohortDefinition sqlCohortDefinition=(SqlCohortDefinition)cohortDefinition;
  cohort=Context.getService(CohortQueryService.class).executeSqlQuery(sqlCohortDefinition.getQueryDefinition().getQueryString(),evaluationContext.getParameterValues());
  return cohort;
}","/** 
 * @see CohortDefinitionEvaluator#evaluateCohort(CohortDefinition,EvaluationContext)
 */
public Cohort evaluate(CohortDefinition cohortDefinition,EvaluationContext context){
  SqlCohortDefinition sqlCohortDefinition=(SqlCohortDefinition)cohortDefinition;
  String query=sqlCohortDefinition.getQueryDefinition().getQueryString();
  Cohort c=Context.getService(CohortQueryService.class).executeSqlQuery(query,context.getParameterValues());
  if (context.getBaseCohort() != null) {
    c=Cohort.intersect(c,context.getBaseCohort());
  }
  return c;
}"
86816,"/** 
 * @param column to add
 */
public void addColumn(String columnName,Mapped<? extends CohortDefinition> column){
  getColumns().put(columnName,column);
}","/** 
 * @param column to add
 */
public void addColumn(String columnName,CohortDefinition column,Map<String,Object> mappings){
  getColumns().put(columnName,new Mapped<CohortDefinition>(column,mappings));
}"
86817,"/** 
 * @return DataSetColumns constructed from rows and column definitions
 */
public List<CohortDataSetColumn> getDataSetColumns(){
  List<CohortDataSetColumn> c=new ArrayList<CohortDataSetColumn>();
  if (getRows().isEmpty()) {
    int colNum=1;
    for (    String colName : getColumns().keySet()) {
      c.add(new CohortDataSetColumn(""String_Node_Str"" + colNum,Cohort.class,null,colName,null,getColumns().get(colName)));
      colNum++;
    }
  }
  if (getColumns().isEmpty()) {
    int rowNum=1;
    for (    String rowName : getRows().keySet()) {
      c.add(new CohortDataSetColumn(""String_Node_Str"" + rowNum,Cohort.class,rowName,null,getRows().get(rowName),null));
      rowNum++;
    }
  }
  if (!getRows().isEmpty() && !getColumns().isEmpty()) {
    int rowNum=1;
    for (    String rowName : getRows().keySet()) {
      int colNum=1;
      for (      String colName : getColumns().keySet()) {
        String key=rowNum + ""String_Node_Str"" + colNum;
        c.add(new CohortDataSetColumn(key,Cohort.class,rowName,colName,getRows().get(rowName),getColumns().get(colName)));
        colNum++;
      }
      rowNum++;
    }
  }
  return c;
}","/** 
 * @return DataSetColumns constructed from rows and column definitions
 */
public List<CohortDataSetColumn> getDataSetColumns(){
  List<CohortDataSetColumn> c=new ArrayList<CohortDataSetColumn>();
  if (getRows().isEmpty()) {
    for (    String colName : getColumns().keySet()) {
      c.add(new CohortDataSetColumn(colName,Cohort.class,null,colName,null,getColumns().get(colName)));
    }
  }
  if (getColumns().isEmpty()) {
    for (    String rowName : getRows().keySet()) {
      c.add(new CohortDataSetColumn(rowName,Cohort.class,rowName,null,getRows().get(rowName),null));
    }
  }
  if (!getRows().isEmpty() && !getColumns().isEmpty()) {
    for (    String rowName : getRows().keySet()) {
      for (      String colName : getColumns().keySet()) {
        String key=rowName + ""String_Node_Str"" + colName;
        c.add(new CohortDataSetColumn(key,Cohort.class,rowName,colName,getRows().get(rowName),getColumns().get(colName)));
      }
    }
  }
  return c;
}"
86818,"/** 
 * @param row to add
 */
public void addRow(String rowName,Mapped<? extends CohortDefinition> row){
  getRows().put(rowName,row);
}","/** 
 * @param row to add
 */
public void addRow(String rowName,CohortDefinition row,Map<String,Object> mappings){
  getRows().put(rowName,new Mapped<CohortDefinition>(row,mappings));
}"
86819,"/** 
 * @param collectionType the collectionType to set
 */
public void setCollectionType(Class<? extends Collection<?>> collectionType){
  this.collectionType=collectionType;
}","/** 
 * @param collectionType the collectionType to set
 */
public void setCollectionType(Class<? extends Collection> collectionType){
  this.collectionType=collectionType;
}"
86820,"/** 
 * @return the collectionType
 */
public Class<? extends Collection<?>> getCollectionType(){
  return collectionType;
}","/** 
 * @return the collectionType
 */
public Class<? extends Collection> getCollectionType(){
  return collectionType;
}"
86821,"/** 
 * @return the properties
 */
public Properties getProperties(){
  return properties;
}","/** 
 * @return the properties
 */
public Properties getProperties(){
  if (properties == null) {
    properties=new Properties();
  }
  return properties;
}"
86822,"protected void populateModel(HttpServletRequest request,Map<String,Object> model){
  super.populateModel(request,model);
  String uuid=(String)model.get(""String_Node_Str"");
  String property=(String)model.get(""String_Node_Str"");
  String currentKey=(String)model.get(""String_Node_Str"");
  String mappedUuid=(String)model.get(""String_Node_Str"");
  Class<?> typeClass=(Class<?>)model.get(""String_Node_Str"");
  Parameterizable obj=(Parameterizable)model.get(""String_Node_Str"");
  Field f=ReflectionUtil.getField(typeClass,property);
  if (f != null) {
    Class<?> fieldType=ReflectionUtil.getFieldType(f);
    if (List.class.isAssignableFrom(fieldType)) {
      model.put(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (Map.class.isAssignableFrom(fieldType)) {
      model.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
  Class<? extends Parameterizable> mappedType=null;
  if (StringUtils.isNotEmpty(property)) {
    mappedType=ParameterizableUtil.getMappedType(typeClass,property);
  }
  model.put(""String_Node_Str"",mappedType);
  if (StringUtils.isNotEmpty(uuid)) {
    Parameterizable mappedObj=null;
    Map<String,Object> mappings=new HashMap<String,Object>();
    if (StringUtils.isEmpty(mappedUuid)) {
      Mapped<Parameterizable> mapped=ParameterizableUtil.getMappedProperty(obj,property,currentKey);
      if (mapped != null) {
        model.put(""String_Node_Str"",mapped);
        mappedObj=mapped.getParameterizable();
        mappings=mapped.getParameterMappings();
      }
    }
 else     if (mappedUuid != null) {
      mappedObj=ParameterizableUtil.getParameterizable(mappedUuid,mappedType);
    }
    model.put(""String_Node_Str"",mappedObj);
    model.put(""String_Node_Str"",mappings);
    Map<String,String> mappedParams=new HashMap<String,String>();
    Map<String,String> complexParams=new HashMap<String,String>();
    Map<String,String> fixedParams=new HashMap<String,String>();
    Map<String,Map<String,String>> allowedParams=new HashMap<String,Map<String,String>>();
    if (mappedObj != null) {
      for (      Parameter p : mappedObj.getParameters()) {
        Object mappedObjVal=mappings.get(p.getName());
        Map<String,String> allowed=new HashMap<String,String>();
        for (        Parameter parentParam : obj.getParameters()) {
          if (p.getType() == parentParam.getType()) {
            allowed.put(parentParam.getName(),parentParam.getLabelOrName());
          }
        }
        allowedParams.put(p.getName(),allowed);
        if (mappedObjVal != null && mappedObjVal instanceof String) {
          String mappedVal=(String)mappedObjVal;
          if (EvaluationUtil.isExpression(mappedVal)) {
            mappedVal=EvaluationUtil.stripExpression(mappedVal);
            if (obj.getParameter(mappedVal) != null) {
              mappedParams.put(p.getName(),mappedVal);
            }
 else {
              complexParams.put(p.getName(),mappedVal);
            }
          }
 else {
            fixedParams.put(p.getName(),mappedVal);
          }
        }
      }
    }
    model.put(""String_Node_Str"",allowedParams);
    model.put(""String_Node_Str"",mappedParams);
    model.put(""String_Node_Str"",complexParams);
    model.put(""String_Node_Str"",fixedParams);
  }
}","protected void populateModel(HttpServletRequest request,Map<String,Object> model){
  super.populateModel(request,model);
  String uuid=(String)model.get(""String_Node_Str"");
  String property=(String)model.get(""String_Node_Str"");
  String currentKey=(String)model.get(""String_Node_Str"");
  String mappedUuid=(String)model.get(""String_Node_Str"");
  Class<?> typeClass=(Class<?>)model.get(""String_Node_Str"");
  Parameterizable obj=(Parameterizable)model.get(""String_Node_Str"");
  Field f=ReflectionUtil.getField(typeClass,property);
  if (f != null) {
    Class<?> fieldType=ReflectionUtil.getFieldType(f);
    if (List.class.isAssignableFrom(fieldType)) {
      model.put(""String_Node_Str"",""String_Node_Str"");
    }
 else     if (Map.class.isAssignableFrom(fieldType)) {
      model.put(""String_Node_Str"",""String_Node_Str"");
    }
  }
  Class<? extends Parameterizable> mappedType=null;
  if (StringUtils.isNotEmpty(property)) {
    mappedType=ParameterizableUtil.getMappedType(typeClass,property);
  }
  model.put(""String_Node_Str"",mappedType);
  if (StringUtils.isNotEmpty(uuid)) {
    Parameterizable mappedObj=null;
    Map<String,Object> mappings=new HashMap<String,Object>();
    if (StringUtils.isEmpty(mappedUuid)) {
      Mapped<Parameterizable> mapped=ParameterizableUtil.getMappedProperty(obj,property,currentKey);
      if (mapped != null) {
        model.put(""String_Node_Str"",mapped);
        mappedObj=mapped.getParameterizable();
        mappings=mapped.getParameterMappings();
      }
    }
 else     if (mappedUuid != null) {
      mappedObj=ParameterizableUtil.getParameterizable(mappedUuid,mappedType);
    }
    model.put(""String_Node_Str"",mappedObj);
    model.put(""String_Node_Str"",mappings);
    Map<String,String> mappedParams=new HashMap<String,String>();
    Map<String,String> complexParams=new HashMap<String,String>();
    Map<String,Object> fixedParams=new HashMap<String,Object>();
    Map<String,Map<String,String>> allowedParams=new HashMap<String,Map<String,String>>();
    if (mappedObj != null) {
      for (      Parameter p : mappedObj.getParameters()) {
        Object mappedObjVal=mappings.get(p.getName());
        Map<String,String> allowed=new HashMap<String,String>();
        for (        Parameter parentParam : obj.getParameters()) {
          if (p.getType() == parentParam.getType()) {
            allowed.put(parentParam.getName(),parentParam.getLabelOrName());
          }
        }
        allowedParams.put(p.getName(),allowed);
        if (mappedObjVal != null && mappedObjVal instanceof String) {
          String mappedVal=(String)mappedObjVal;
          if (EvaluationUtil.isExpression(mappedVal)) {
            mappedVal=EvaluationUtil.stripExpression(mappedVal);
            if (obj.getParameter(mappedVal) != null) {
              mappedParams.put(p.getName(),mappedVal);
            }
 else {
              complexParams.put(p.getName(),mappedVal);
            }
          }
        }
 else {
          fixedParams.put(p.getName(),mappedObjVal);
        }
      }
    }
    model.put(""String_Node_Str"",allowedParams);
    model.put(""String_Node_Str"",mappedParams);
    model.put(""String_Node_Str"",complexParams);
    model.put(""String_Node_Str"",fixedParams);
  }
}"
86823,"/** 
 * @see DataSetEvaluator#evaluate(DataSetDefinition,EvaluationContext)
 */
public DataSet evaluate(DataSetDefinition dataSetDefinition,EvaluationContext context){
  context=ObjectUtil.nvl(context,new EvaluationContext());
  if (context.getBaseCohort() == null || context.getBaseCohort().isEmpty()) {
    context.setBaseCohort(Context.getPatientSetService().getAllPatients());
  }
  MapDataSet data=new MapDataSet(dataSetDefinition,context);
  CohortDataSetDefinition dsd=(CohortDataSetDefinition)dataSetDefinition;
  CohortDefinitionService cds=Context.getService(CohortDefinitionService.class);
  for (  CohortDataSetColumn col : dsd.getDataSetColumns()) {
    Cohort rowCohort=(col.getRowDefinition() == null ? context.getBaseCohort() : cds.evaluate(col.getRowDefinition(),context));
    Cohort colCohort=(col.getColumnDefinition() == null ? context.getBaseCohort() : cds.evaluate(col.getColumnDefinition(),context));
    Cohort c=Cohort.intersect(rowCohort,colCohort);
    data.addData(col,c);
  }
  return data;
}","/** 
 * @see DataSetEvaluator#evaluate(DataSetDefinition,EvaluationContext)
 */
public DataSet evaluate(DataSetDefinition dataSetDefinition,EvaluationContext context){
  context=ObjectUtil.nvl(context,new EvaluationContext());
  if (context.getBaseCohort() == null) {
    context.setBaseCohort(Context.getPatientSetService().getAllPatients());
  }
  MapDataSet data=new MapDataSet(dataSetDefinition,context);
  CohortDataSetDefinition dsd=(CohortDataSetDefinition)dataSetDefinition;
  CohortDefinitionService cds=Context.getService(CohortDefinitionService.class);
  for (  CohortDataSetColumn col : dsd.getDataSetColumns()) {
    Cohort rowCohort=(col.getRowDefinition() == null ? context.getBaseCohort() : cds.evaluate(col.getRowDefinition(),context));
    Cohort colCohort=(col.getColumnDefinition() == null ? context.getBaseCohort() : cds.evaluate(col.getColumnDefinition(),context));
    Cohort c=Cohort.intersect(rowCohort,colCohort);
    data.addData(col,c);
  }
  return data;
}"
86824,"/** 
 * @see DataSetEvaluator#evaluate(DataSetDefinition,EvaluationContext)
 * @should evaluate a CohortIndicatorDataSetDefinition
 */
public MapDataSet evaluate(DataSetDefinition dataSetDefinition,EvaluationContext context){
  CohortIndicatorDataSetDefinition dsd=(CohortIndicatorDataSetDefinition)dataSetDefinition;
  context=ObjectUtil.nvl(context,new EvaluationContext());
  if (context.getBaseCohort() == null || context.getBaseCohort().isEmpty()) {
    context.setBaseCohort(Context.getPatientSetService().getAllPatients());
  }
  IndicatorService is=Context.getService(IndicatorService.class);
  DimensionService ds=Context.getService(DimensionService.class);
  MapDataSet ret=new MapDataSet(dataSetDefinition,context);
  for (  DataSetColumn dsc : dsd.getColumns()) {
    ret.getMetaData().addColumn(dsc);
  }
  Map<String,Map<String,Cohort>> dimensionCalculationCache=new HashMap<String,Map<String,Cohort>>();
  for (  Map.Entry<String,Mapped<CohortDefinitionDimension>> e : dsd.getDimensions().entrySet()) {
    String dimensionKey=e.getKey();
    CohortDimensionResult dim=(CohortDimensionResult)ds.evaluate(e.getValue(),context);
    dimensionCalculationCache.put(dimensionKey,dim.getOptionCohorts());
  }
  Map<Mapped<? extends CohortIndicator>,CohortIndicatorResult> indicatorCalculationCache=new HashMap<Mapped<? extends CohortIndicator>,CohortIndicatorResult>();
  for (  DataSetColumn c : dsd.getColumns()) {
    CohortIndicatorAndDimensionColumn col=(CohortIndicatorAndDimensionColumn)c;
    if (!indicatorCalculationCache.containsKey(col.getIndicator())) {
      CohortIndicatorResult result=(CohortIndicatorResult)is.evaluate(col.getIndicator(),context);
      log.debug(""String_Node_Str"" + col.getIndicator());
      indicatorCalculationCache.put(col.getIndicator(),result);
    }
  }
  for (  DataSetColumn c : dsd.getColumns()) {
    CohortIndicatorAndDimensionColumn col=(CohortIndicatorAndDimensionColumn)c;
    CohortIndicatorResult result=indicatorCalculationCache.get(col.getIndicator());
    CohortIndicatorAndDimensionResult resultWithDimensions=new CohortIndicatorAndDimensionResult(result,context);
    if (col.getDimensionOptions() != null) {
      for (      Map.Entry<String,String> e : col.getDimensionOptions().entrySet()) {
        log.debug(""String_Node_Str"" + e.getKey() + ""String_Node_Str""+ e.getValue());
        CohortDefinitionDimension dimension=dsd.getDimension(e.getKey()).getParameterizable();
        Cohort dimensionCohort=dimensionCalculationCache.get(e.getKey()).get(e.getValue());
        resultWithDimensions.addDimensionResult(dimension,dimensionCohort);
      }
    }
    ret.addData(col,resultWithDimensions);
  }
  return ret;
}","/** 
 * @see DataSetEvaluator#evaluate(DataSetDefinition,EvaluationContext)
 * @should evaluate a CohortIndicatorDataSetDefinition
 */
public MapDataSet evaluate(DataSetDefinition dataSetDefinition,EvaluationContext context){
  CohortIndicatorDataSetDefinition dsd=(CohortIndicatorDataSetDefinition)dataSetDefinition;
  context=ObjectUtil.nvl(context,new EvaluationContext());
  if (context.getBaseCohort() == null) {
    context.setBaseCohort(Context.getPatientSetService().getAllPatients());
  }
  IndicatorService is=Context.getService(IndicatorService.class);
  DimensionService ds=Context.getService(DimensionService.class);
  MapDataSet ret=new MapDataSet(dataSetDefinition,context);
  for (  DataSetColumn dsc : dsd.getColumns()) {
    ret.getMetaData().addColumn(dsc);
  }
  Map<String,Map<String,Cohort>> dimensionCalculationCache=new HashMap<String,Map<String,Cohort>>();
  for (  Map.Entry<String,Mapped<CohortDefinitionDimension>> e : dsd.getDimensions().entrySet()) {
    String dimensionKey=e.getKey();
    CohortDimensionResult dim=(CohortDimensionResult)ds.evaluate(e.getValue(),context);
    dimensionCalculationCache.put(dimensionKey,dim.getOptionCohorts());
  }
  Map<Mapped<? extends CohortIndicator>,CohortIndicatorResult> indicatorCalculationCache=new HashMap<Mapped<? extends CohortIndicator>,CohortIndicatorResult>();
  for (  DataSetColumn c : dsd.getColumns()) {
    CohortIndicatorAndDimensionColumn col=(CohortIndicatorAndDimensionColumn)c;
    if (!indicatorCalculationCache.containsKey(col.getIndicator())) {
      CohortIndicatorResult result=(CohortIndicatorResult)is.evaluate(col.getIndicator(),context);
      log.debug(""String_Node_Str"" + col.getIndicator());
      indicatorCalculationCache.put(col.getIndicator(),result);
    }
  }
  for (  DataSetColumn c : dsd.getColumns()) {
    CohortIndicatorAndDimensionColumn col=(CohortIndicatorAndDimensionColumn)c;
    CohortIndicatorResult result=indicatorCalculationCache.get(col.getIndicator());
    CohortIndicatorAndDimensionResult resultWithDimensions=new CohortIndicatorAndDimensionResult(result,context);
    if (col.getDimensionOptions() != null) {
      for (      Map.Entry<String,String> e : col.getDimensionOptions().entrySet()) {
        log.debug(""String_Node_Str"" + e.getKey() + ""String_Node_Str""+ e.getValue());
        CohortDefinitionDimension dimension=dsd.getDimension(e.getKey()).getParameterizable();
        Cohort dimensionCohort=dimensionCalculationCache.get(e.getKey()).get(e.getValue());
        resultWithDimensions.addDimensionResult(dimension,dimensionCohort);
      }
    }
    ret.addData(col,resultWithDimensions);
  }
  return ret;
}"
86825,"/** 
 * @see DataSetDefinitionPersister#purgeDataSetDefinition(DataSetDefinition)
 */
public void purgeDataSetDefinition(DataSetDefinition dataSetDefinition){
  DataExportDataSetDefinition dsd=(DataExportDataSetDefinition)dataSetDefinition;
  Context.getService(ReportObjectService.class).purgeReportObject(dsd.getDataExport());
}","/** 
 * @see DataSetDefinitionPersister#purgeDataSetDefinition(DataSetDefinition)
 */
public void purgeDataSetDefinition(DataSetDefinition dataSetDefinition){
  DataExportDataSetDefinition dsd=(DataExportDataSetDefinition)dataSetDefinition;
  Context.getService(AdministrationService.class).deleteReportObject(dsd.getDataExport().getId());
}"
86826,"/** 
 * @throws Exception
 */
@Test public void shouldRemoveDataSetDefintion() throws Exception {
  DataSetDefinitionPersister persister=new DataExportDataSetDefinitionPersister();
  DataSetDefinition beforePurge=persister.getDataSetDefinitions(""String_Node_Str"",true).get(0);
  int idBefore=beforePurge.getId();
  persister.purgeDataSetDefinition(beforePurge);
  DataSetDefinition afterPurge=persister.getDataSetDefinition(idBefore);
  Assert.assertNull(afterPurge);
}","@Test public void shouldRemoveDataSetDefintion() throws Exception {
  DataSetDefinitionPersister persister=new DataExportDataSetDefinitionPersister();
  DataSetDefinition beforePurge=persister.getDataSetDefinitions(""String_Node_Str"",true).get(0);
  int idBefore=beforePurge.getId();
  persister.purgeDataSetDefinition(beforePurge);
  DataSetDefinition afterPurge=persister.getDataSetDefinition(idBefore);
  Assert.assertNull(afterPurge);
}"
86827,"public static final List<PatientIdentifierType> GLOBAL_PROPERTY_PREFERRED_IDENTIFIER_TYPES(){
  String propertyValue=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
  List<PatientIdentifierType> pits=new ArrayList<PatientIdentifierType>();
  if (propertyValue != null) {
    for (    String s : propertyValue.split(""String_Node_Str"")) {
      pits.add(Context.getPatientService().getPatientIdentifierTypeByName(s));
    }
  }
  return pits;
}","public static final List<PatientIdentifierType> GLOBAL_PROPERTY_PREFERRED_IDENTIFIER_TYPES(){
  String propertyValue=Context.getAdministrationService().getGlobalProperty(""String_Node_Str"");
  List<PatientIdentifierType> pits=new ArrayList<PatientIdentifierType>();
  if (StringUtils.hasText(propertyValue)) {
    for (    String s : propertyValue.split(""String_Node_Str"")) {
      PatientIdentifierType pit=Context.getPatientService().getPatientIdentifierTypeByName(s);
      if (pit != null)       pits.add(pit);
    }
  }
  return pits;
}"
86828,"public Cohort evaluate(CohortDefinition cohortDefinition,EvaluationContext context){
  NumericObsCohortDefinition cd=(NumericObsCohortDefinition)cohortDefinition;
  return Context.getService(CohortQueryService.class).getPatientsHavingNumericObs(cd.getTimeModifier(),cd.getQuestion(),cd.getGroupingConcept(),cd.getOnOrAfter(),cd.getOnOrBefore(),cd.getLocationList(),cd.getEncounterTypeList(),cd.getModifier1(),cd.getValue1(),cd.getModifier2(),cd.getValue2());
}","/** 
 * @see org.openmrs.module.reporting.cohort.definition.evaluator.CohortDefinitionEvaluator#evaluate(org.openmrs.module.reporting.cohort.definition.CohortDefinition,org.openmrs.module.reporting.evaluation.EvaluationContext)
 * @should get patients with any obs of a specified concept
 * @should test any with many properties specified
 * @should test avg with many properties specified
 * @should test last with many properties specified 
 */
public Cohort evaluate(CohortDefinition cohortDefinition,EvaluationContext context){
  NumericObsCohortDefinition cd=(NumericObsCohortDefinition)cohortDefinition;
  return Context.getService(CohortQueryService.class).getPatientsHavingNumericObs(cd.getTimeModifier(),cd.getQuestion(),cd.getGroupingConcept(),cd.getOnOrAfter(),cd.getOnOrBefore(),cd.getLocationList(),cd.getEncounterTypeList(),cd.getModifier1(),cd.getValue1(),cd.getModifier2(),cd.getValue2());
}"
86829,"public Cohort getPatientsHavingNumericObs(TimeModifier timeModifier,Concept question,Concept groupingConcept,Date onOrAfter,Date onOrBefore,List<Location> locationList,List<EncounterType> encounterTypeList,Modifier modifier1,Double value1,Modifier modifier2,Double value2){
  Integer questionConceptId=question == null ? null : question.getId();
  Integer groupingConceptId=groupingConcept == null ? null : groupingConcept.getId();
  if (groupingConceptId != null)   throw new RuntimeException(""String_Node_Str"");
  List<Integer> locationIds=null;
  if (locationList != null && locationList.size() > 0) {
    for (    Location l : locationList)     locationIds.add(l.getId());
  }
  List<Integer> encounterTypeIds=null;
  if (encounterTypeList != null && encounterTypeList.size() > 0) {
    for (    EncounterType t : encounterTypeList)     encounterTypeIds.add(t.getId());
  }
  String dateSql=""String_Node_Str"";
  String dateSqlForSubquery=""String_Node_Str"";
  if (onOrAfter != null) {
    dateSql+=""String_Node_Str"";
    dateSqlForSubquery+=""String_Node_Str"";
  }
  if (onOrBefore != null) {
    dateSql+=""String_Node_Str"";
    dateSqlForSubquery+=""String_Node_Str"";
  }
  boolean doSqlAggregation=timeModifier == TimeModifier.MIN || timeModifier == TimeModifier.MAX || timeModifier == TimeModifier.AVG;
  boolean doInvert=timeModifier == TimeModifier.NO;
  String valueSql=""String_Node_Str"";
  if (doSqlAggregation) {
    valueSql=""String_Node_Str"" + timeModifier.toString() + ""String_Node_Str""+ valueSql+ ""String_Node_Str"";
  }
  List<String> valueClauses=new ArrayList<String>();
  if (value1 != null)   valueClauses.add(valueSql + modifier1.getSqlRepresentation() + ""String_Node_Str"");
  if (value2 != null)   valueClauses.add(valueSql + modifier2.getSqlRepresentation() + ""String_Node_Str"");
  if (locationIds != null)   valueClauses.add(""String_Node_Str"");
  if (encounterTypeIds != null)   throw new RuntimeException(""String_Node_Str"");
  StringBuilder sql=new StringBuilder();
  if (timeModifier == TimeModifier.ANY || timeModifier == TimeModifier.NO) {
    sql.append(""String_Node_Str"");
    if (questionConceptId != null)     sql.append(""String_Node_Str"");
    sql.append(dateSql);
  }
 else   if (timeModifier == TimeModifier.FIRST || timeModifier == TimeModifier.LAST) {
    boolean isFirst=timeModifier == PatientSetService.TimeModifier.FIRST;
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"" + (isFirst ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
    sql.append(""String_Node_Str"" + dateSqlForSubquery + ""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
  }
 else   if (doSqlAggregation) {
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"" + dateSql);
    sql.append(""String_Node_Str"");
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + timeModifier + ""String_Node_Str"");
  }
  if (valueClauses.size() > 0) {
    sql.append(doSqlAggregation ? ""String_Node_Str"" : ""String_Node_Str"");
    for (Iterator<String> i=valueClauses.iterator(); i.hasNext(); ) {
      sql.append(i.next());
      if (i.hasNext())       sql.append(""String_Node_Str"");
    }
  }
  log.debug(""String_Node_Str"" + sql);
  System.out.println(""String_Node_Str"" + sql);
  Query query=sessionFactory.getCurrentSession().createSQLQuery(sql.toString());
  query.setCacheMode(CacheMode.IGNORE);
  if (questionConceptId != null)   query.setInteger(""String_Node_Str"",questionConceptId);
  if (value1 != null)   query.setDouble(""String_Node_Str"",value1);
  if (value2 != null)   query.setDouble(""String_Node_Str"",value2);
  if (onOrAfter != null)   query.setDate(""String_Node_Str"",onOrAfter);
  if (onOrBefore != null)   query.setDate(""String_Node_Str"",onOrBefore);
  if (locationIds != null)   query.setParameterList(""String_Node_Str"",locationIds);
  Cohort ret;
  if (doInvert) {
    ret=Context.getPatientSetService().getAllPatients();
    ret.getMemberIds().removeAll(query.list());
  }
 else {
    ret=new Cohort(query.list());
  }
  return ret;
}","public Cohort getPatientsHavingNumericObs(TimeModifier timeModifier,Concept question,Concept groupingConcept,Date onOrAfter,Date onOrBefore,List<Location> locationList,List<EncounterType> encounterTypeList,Modifier modifier1,Double value1,Modifier modifier2,Double value2){
  Integer questionConceptId=question == null ? null : question.getId();
  Integer groupingConceptId=groupingConcept == null ? null : groupingConcept.getId();
  if (groupingConceptId != null)   throw new RuntimeException(""String_Node_Str"");
  List<Integer> locationIds=null;
  if (locationList != null && locationList.size() > 0) {
    locationIds=new ArrayList<Integer>();
    for (    Location l : locationList)     locationIds.add(l.getId());
  }
  List<Integer> encounterTypeIds=null;
  if (encounterTypeList != null && encounterTypeList.size() > 0) {
    encounterTypeIds=new ArrayList<Integer>();
    for (    EncounterType t : encounterTypeList)     encounterTypeIds.add(t.getId());
  }
  String dateAndLocationSql=""String_Node_Str"";
  String dateAndLocationSqlForSubquery=""String_Node_Str"";
  if (onOrAfter != null) {
    dateAndLocationSql+=""String_Node_Str"";
    dateAndLocationSqlForSubquery+=""String_Node_Str"";
  }
  if (onOrBefore != null) {
    dateAndLocationSql+=""String_Node_Str"";
    dateAndLocationSqlForSubquery+=""String_Node_Str"";
  }
  if (locationIds != null) {
    dateAndLocationSql+=""String_Node_Str"";
    dateAndLocationSqlForSubquery+=""String_Node_Str"";
  }
  if (encounterTypeIds != null)   throw new RuntimeException(""String_Node_Str"");
  boolean doSqlAggregation=timeModifier == TimeModifier.MIN || timeModifier == TimeModifier.MAX || timeModifier == TimeModifier.AVG;
  boolean doInvert=timeModifier == TimeModifier.NO;
  String valueSql=""String_Node_Str"";
  if (doSqlAggregation) {
    valueSql=""String_Node_Str"" + timeModifier.toString() + ""String_Node_Str""+ valueSql+ ""String_Node_Str"";
  }
  List<String> valueClauses=new ArrayList<String>();
  if (value1 != null)   valueClauses.add(valueSql + modifier1.getSqlRepresentation() + ""String_Node_Str"");
  if (value2 != null)   valueClauses.add(valueSql + modifier2.getSqlRepresentation() + ""String_Node_Str"");
  StringBuilder sql=new StringBuilder();
  if (timeModifier == TimeModifier.ANY || timeModifier == TimeModifier.NO) {
    sql.append(""String_Node_Str"");
    if (questionConceptId != null)     sql.append(""String_Node_Str"");
    sql.append(dateAndLocationSql);
  }
 else   if (timeModifier == TimeModifier.FIRST || timeModifier == TimeModifier.LAST) {
    boolean isFirst=timeModifier == PatientSetService.TimeModifier.FIRST;
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"" + (isFirst ? ""String_Node_Str"" : ""String_Node_Str"") + ""String_Node_Str"");
    sql.append(""String_Node_Str"" + dateAndLocationSqlForSubquery + ""String_Node_Str"");
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"");
  }
 else   if (doSqlAggregation) {
    sql.append(""String_Node_Str"");
    sql.append(""String_Node_Str"" + dateAndLocationSql);
    sql.append(""String_Node_Str"");
  }
 else {
    throw new IllegalArgumentException(""String_Node_Str"" + timeModifier + ""String_Node_Str"");
  }
  if (valueClauses.size() > 0) {
    sql.append(doSqlAggregation ? ""String_Node_Str"" : ""String_Node_Str"");
    for (Iterator<String> i=valueClauses.iterator(); i.hasNext(); ) {
      sql.append(i.next());
      if (i.hasNext())       sql.append(""String_Node_Str"");
    }
  }
  log.debug(""String_Node_Str"" + sql);
  Query query=sessionFactory.getCurrentSession().createSQLQuery(sql.toString());
  query.setCacheMode(CacheMode.IGNORE);
  if (questionConceptId != null)   query.setInteger(""String_Node_Str"",questionConceptId);
  if (value1 != null)   query.setDouble(""String_Node_Str"",value1);
  if (value2 != null)   query.setDouble(""String_Node_Str"",value2);
  if (onOrAfter != null)   query.setDate(""String_Node_Str"",onOrAfter);
  if (onOrBefore != null)   query.setDate(""String_Node_Str"",onOrBefore);
  if (locationIds != null)   query.setParameterList(""String_Node_Str"",locationIds);
  Cohort ret;
  if (doInvert) {
    ret=Context.getPatientSetService().getAllPatients();
    ret.getMemberIds().removeAll(query.list());
  }
 else {
    ret=new Cohort(query.list());
  }
  return ret;
}"
86830,"/** 
 * Should validate whether all parameter mappings have been specified.
 * @param indicatorForm
 * @param errors
 */
public void validateCountIndicator(IndicatorForm indicatorForm,Errors errors){
  if (indicatorForm != null) {
    validateCohortIndicator(indicatorForm,errors);
    if (indicatorForm.getCohortDefinition() == null) {
      ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
    List<Parameter> parameters=indicatorForm.getCohortDefinition().getParameters();
    for (    Parameter parameter : parameters) {
      Object value=indicatorForm.getParameterMapping().get(parameter.getName());
      log.info(""String_Node_Str"" + value + ""String_Node_Str"");
      if (value == null || value.equals(""String_Node_Str"")) {
        ValidationUtils.rejectIfEmptyOrWhitespace(errors,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
      }
    }
  }
}","/** 
 * Should validate whether all parameter mappings have been specified.
 * @param indicatorForm
 * @param errors
 */
public void validateCountIndicator(IndicatorForm indicatorForm,Errors errors){
  if (indicatorForm != null) {
    validateCohortIndicator(indicatorForm,errors);
    if (indicatorForm.getCohortDefinition() == null) {
      ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
    List<Parameter> parameters=indicatorForm.getCohortDefinition().getParameters();
    for (    Parameter parameter : parameters) {
      Object value=indicatorForm.getParameterMapping().get(parameter.getName());
      log.info(""String_Node_Str"" + value + ""String_Node_Str"");
      if (value == null || value.equals(""String_Node_Str"")) {
        errors.rejectValue(""String_Node_Str"",""String_Node_Str"",new Object[]{value},""String_Node_Str"");
      }
    }
  }
}"
86831,"/** 
 * @param indicatorForm
 * @param errors
 */
public void validateFractionIndicator(IndicatorForm indicatorForm,Errors errors){
  if (indicatorForm.getNumerator() == null) {
    ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
  if (indicatorForm.getDenominator() == null) {
    ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
  List<Parameter> parameters=indicatorForm.getNumerator().getParameters();
  for (  Parameter parameter : parameters) {
    Object value=indicatorForm.getNumeratorParameterMapping().get(parameter.getName());
    log.info(""String_Node_Str"" + value + ""String_Node_Str"");
    if (value == null || value.equals(""String_Node_Str"")) {
      ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
  parameters=indicatorForm.getDenominator().getParameters();
  for (  Parameter parameter : parameters) {
    Object value=indicatorForm.getDenominatorParameterMapping().get(parameter.getName());
    log.info(""String_Node_Str"" + value + ""String_Node_Str"");
    if (value == null || value.equals(""String_Node_Str"")) {
      ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
}","/** 
 * @param indicatorForm
 * @param errors
 */
public void validateFractionIndicator(IndicatorForm indicatorForm,Errors errors){
  if (indicatorForm.getNumerator() == null) {
    ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
  if (indicatorForm.getDenominator() == null) {
    ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
  }
  List<Parameter> parameters=indicatorForm.getNumerator().getParameters();
  for (  Parameter parameter : parameters) {
    Object value=indicatorForm.getNumeratorParameterMapping().get(parameter.getName());
    log.info(""String_Node_Str"" + value + ""String_Node_Str"");
    if (value == null || value.equals(""String_Node_Str"")) {
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"",new Object[]{value},""String_Node_Str"");
    }
  }
  parameters=indicatorForm.getDenominator().getParameters();
  for (  Parameter parameter : parameters) {
    Object value=indicatorForm.getDenominatorParameterMapping().get(parameter.getName());
    log.info(""String_Node_Str"" + value + ""String_Node_Str"");
    if (value == null || value.equals(""String_Node_Str"")) {
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"",new Object[]{value},""String_Node_Str"");
    }
  }
}"
86832,"/** 
 * @param indicatorForm
 * @param errors
 */
public void validateLocationFilter(IndicatorForm indicatorForm,Errors errors){
  List<Parameter> parameters=indicatorForm.getLocationFilter().getParameters();
  for (  Parameter parameter : parameters) {
    Object value=indicatorForm.getLocationFilterParameterMapping().get(parameter.getName());
    if (value == null || value.equals(""String_Node_Str"")) {
      ValidationUtils.rejectIfEmpty(errors,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"");
    }
  }
}","/** 
 * @param indicatorForm
 * @param errors
 */
public void validateLocationFilter(IndicatorForm indicatorForm,Errors errors){
  List<Parameter> parameters=indicatorForm.getLocationFilter().getParameters();
  for (  Parameter parameter : parameters) {
    Object value=indicatorForm.getLocationFilterParameterMapping().get(parameter.getName());
    if (value == null || value.equals(""String_Node_Str"")) {
      errors.rejectValue(""String_Node_Str"",""String_Node_Str"",new Object[]{value},""String_Node_Str"");
    }
  }
}"
86833,"/** 
 * Recursively traverse the List<Object> phrase to produce a (possibly nested) CompoundCohortDefinition If another List<Object> is found in the list, recursively evaluate it in place If anything in this list is a key into searches, replace it with the relevant filter from searches
 * @param phrase
 * @param searches
 * @param context
 * @return Cohort
 */
@SuppressWarnings(""String_Node_Str"") public static Cohort evaluate(List<Object> phrase,CompositionCohortDefinition composition,EvaluationContext context){
  log.debug(""String_Node_Str"" + phrase);
  List<Object> use=new ArrayList<Object>();
  for (  Object o : phrase) {
    if (o instanceof List) {
      use.add(evaluate((List<Object>)o,composition,context));
    }
 else     if (o instanceof String) {
      use.add(composition.getSearches().get((String)o));
    }
 else     if (o instanceof Integer) {
      use.add(composition.getSearches().get(o.toString()));
    }
 else {
      use.add(o);
    }
  }
  log.debug(""String_Node_Str"" + use);
  boolean invertTheNext=false;
  for (ListIterator<Object> i=use.listIterator(); i.hasNext(); ) {
    Object o=i.next();
    if (o instanceof BooleanOperator) {
      if ((BooleanOperator)o == BooleanOperator.NOT) {
        i.remove();
        invertTheNext=!invertTheNext;
      }
 else {
        if (invertTheNext)         throw new RuntimeException(""String_Node_Str"");
      }
    }
 else {
      if (invertTheNext) {
        i.set(InverseCohortDefinition.invert((Mapped<CohortDefinition>)o));
        invertTheNext=false;
      }
    }
  }
  log.debug(""String_Node_Str"" + use);
  if (use.size() == 1) {
    return Context.getService(CohortDefinitionService.class).evaluate((Mapped<CohortDefinition>)use.get(0),context);
  }
  BooleanOperator bo=BooleanOperator.AND;
  List<Cohort> args=new ArrayList<Cohort>();
  for (  Object o : use) {
    if (o instanceof BooleanOperator) {
      bo=(BooleanOperator)o;
    }
 else {
      args.add(Context.getService(CohortDefinitionService.class).evaluate((Mapped<CohortDefinition>)o,context));
    }
  }
  Cohort ret=null;
  for (  Cohort cohort : args) {
    if (ret == null) {
      ret=cohort;
    }
 else     if (bo == BooleanOperator.AND) {
      ret=Cohort.intersect(ret,cohort);
    }
 else {
      ret=Cohort.union(ret,cohort);
    }
  }
  return ret;
}","/** 
 * Recursively traverse the List<Object> phrase to produce a (possibly nested) CompoundCohortDefinition If another List<Object> is found in the list, recursively evaluate it in place If anything in this list is a key into searches, replace it with the relevant filter from searches
 * @param phrase
 * @param searches
 * @param context
 * @return Cohort
 */
@SuppressWarnings(""String_Node_Str"") public static Cohort evaluate(List<Object> phrase,CompositionCohortDefinition composition,EvaluationContext context){
  log.debug(""String_Node_Str"" + phrase);
  List<Object> use=new ArrayList<Object>();
  for (  Object o : phrase) {
    if (o instanceof List) {
      use.add(evaluate((List<Object>)o,composition,context));
    }
 else     if (o instanceof String) {
      use.add(composition.getSearches().get((String)o));
    }
 else     if (o instanceof Integer) {
      use.add(composition.getSearches().get(o.toString()));
    }
 else {
      use.add(o);
    }
  }
  log.debug(""String_Node_Str"" + use);
  boolean invertTheNext=false;
  for (ListIterator<Object> i=use.listIterator(); i.hasNext(); ) {
    Object o=i.next();
    if (o instanceof BooleanOperator) {
      if ((BooleanOperator)o == BooleanOperator.NOT) {
        i.remove();
        invertTheNext=!invertTheNext;
      }
 else {
        if (invertTheNext)         throw new RuntimeException(""String_Node_Str"");
      }
    }
 else {
      if (invertTheNext) {
        i.set(InverseCohortDefinition.invert((Mapped<CohortDefinition>)o));
        invertTheNext=false;
      }
    }
  }
  log.debug(""String_Node_Str"" + use);
  if (use.size() == 1) {
    return Context.getService(CohortDefinitionService.class).evaluate((Mapped<CohortDefinition>)use.get(0),context);
  }
  BooleanOperator bo=BooleanOperator.AND;
  List<Cohort> args=new ArrayList<Cohort>();
  for (  Object o : use) {
    if (o instanceof BooleanOperator) {
      bo=(BooleanOperator)o;
    }
 else     if (o instanceof Cohort) {
      args.add((Cohort)o);
    }
 else {
      args.add(Context.getService(CohortDefinitionService.class).evaluate((Mapped<CohortDefinition>)o,context));
    }
  }
  Cohort ret=null;
  for (  Cohort cohort : args) {
    if (ret == null) {
      ret=cohort;
    }
 else     if (bo == BooleanOperator.AND) {
      ret=Cohort.intersect(ret,cohort);
    }
 else {
      ret=Cohort.union(ret,cohort);
    }
  }
  return ret;
}"
86834,"/** 
 * Processes the form when a user submits.  
 * @param cohortDefinition
 * @param bindingResult
 * @return
 */
@RequestMapping(method=RequestMethod.POST) public ModelAndView processForm(HttpServletRequest request,HttpServletResponse response,@RequestParam(value=""String_Node_Str"",required=false) String uuid,@RequestParam(value=""String_Node_Str"",required=false) Class<Parameterizable> type,@RequestParam(value=""String_Node_Str"",required=false) String action,@RequestParam(value=""String_Node_Str"",required=false) String format,@RequestParam(value=""String_Node_Str"",required=false) String successView,@ModelAttribute(""String_Node_Str"") Parameterizable parameterizable,BindingResult bindingResult) throws Exception {
  Object results=null;
  ModelAndView model=new ModelAndView();
  if (bindingResult.hasErrors()) {
    request.getSession().setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"");
    return setupForm(request);
  }
  if (parameterizable == null)   parameterizable=ParameterizableUtil.getParameterizable(uuid,type);
  if (parameterizable != null) {
    EvaluationContext evaluationContext=new EvaluationContext();
    Map<String,String> parameterValuesAsStrings=new HashMap<String,String>();
    for (    Parameter parameter : parameterizable.getParameters()) {
      log.info(""String_Node_Str"" + parameter.getName() + ""String_Node_Str""+ request.getParameter(parameter.getName()));
      parameterValuesAsStrings.put(parameter.getName(),request.getParameter(parameter.getName()));
    }
    Map<String,Object> parameterValues=new HashMap<String,Object>();
    if (parameterizable != null && parameterizable.getParameters() != null) {
      for (      Parameter parameter : parameterizable.getParameters()) {
        String textValue=parameterValuesAsStrings.get(parameter.getName());
        Object objectValue=WidgetUtil.parseInput(textValue,parameter.getType());
        parameterValues.put(parameter.getName(),objectValue);
      }
    }
    evaluationContext.setParameterValues(parameterValues);
    model.addObject(""String_Node_Str"",evaluationContext);
    try {
      results=ParameterizableUtil.evaluateParameterizable(parameterizable,evaluationContext);
      request.getSession().setAttribute(""String_Node_Str"",results);
      model.setViewName(""String_Node_Str"");
    }
 catch (    ParameterException e) {
      log.error(""String_Node_Str"",e);
      request.getSession().setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"" + e.getMessage());
      setupForm(request);
    }
  }
  log.info(""String_Node_Str"" + model.getViewName() + ""String_Node_Str""+ model.getModelMap());
  return model;
}","/** 
 * Processes the form when a user submits.  
 * @param cohortDefinition
 * @param bindingResult
 * @return
 */
@RequestMapping(method=RequestMethod.POST) public ModelAndView processForm(HttpServletRequest request,HttpServletResponse response,@RequestParam(value=""String_Node_Str"",required=false) String uuid,@RequestParam(value=""String_Node_Str"",required=false) Class<Parameterizable> type,@RequestParam(value=""String_Node_Str"",required=false) String action,@RequestParam(value=""String_Node_Str"",required=false) String format,@RequestParam(value=""String_Node_Str"",required=false) String successView,@ModelAttribute(""String_Node_Str"") Parameterizable parameterizable,BindingResult bindingResult) throws Exception {
  Object results=null;
  ModelAndView model=new ModelAndView();
  if (parameterizable == null)   parameterizable=ParameterizableUtil.getParameterizable(uuid,type);
  if (parameterizable != null) {
    EvaluationContext evaluationContext=new EvaluationContext();
    Map<String,Object> parameterValues=new HashMap<String,Object>();
    if (parameterizable != null && parameterizable.getParameters() != null) {
      for (      Parameter parameter : parameterizable.getParameters()) {
        Object paramVal=WidgetUtil.getFromRequest(parameter.getName(),parameterizable,request);
        parameterValues.put(parameter.getName(),paramVal);
      }
    }
    evaluationContext.setParameterValues(parameterValues);
    model.addObject(""String_Node_Str"",evaluationContext);
    try {
      results=ParameterizableUtil.evaluateParameterizable(parameterizable,evaluationContext);
      request.getSession().setAttribute(""String_Node_Str"",results);
      model.setViewName(""String_Node_Str"");
    }
 catch (    ParameterException e) {
      log.error(""String_Node_Str"",e);
      request.getSession().setAttribute(WebConstants.OPENMRS_ERROR_ATTR,""String_Node_Str"" + e.getMessage());
      setupForm(request);
    }
  }
  log.info(""String_Node_Str"" + model.getViewName() + ""String_Node_Str""+ model.getModelMap());
  return model;
}"
86835,"/** 
 * @param model
 * @return
 */
@SuppressWarnings(""String_Node_Str"") @RequestMapping(""String_Node_Str"") public String viewDataset(@RequestParam(required=false,value=""String_Node_Str"") Integer id,@RequestParam(required=false,value=""String_Node_Str"") String type,@RequestParam(required=false,value=""String_Node_Str"") String cohortId,@RequestParam(required=false,value=""String_Node_Str"") String dataSetId,@RequestParam(required=false,value=""String_Node_Str"") String indicatorId,@RequestParam(required=false,value=""String_Node_Str"") Integer limit,ModelMap model){
  if (cohortId != null && dataSetId != null) {
    DataSetDefinition dataSetDefinition=getDataSetDefinition(dataSetId,type,id);
    model.addAttribute(""String_Node_Str"",dataSetDefinition == null ? new PatientDataSetDefinition() : dataSetDefinition);
    Cohort cohort=evaluateCohort(cohortId);
    log.info(""String_Node_Str"" + cohort.size());
    model.addAttribute(""String_Node_Str"",cohort);
    model.addAttribute(""String_Node_Str"",Context.getService(CohortDefinitionService.class).getCohortDefinitionByUuid(cohortId));
    if (cohort == null || cohortId.equals(""String_Node_Str""))     cohort=Context.getPatientSetService().getAllPatients();
    EvaluationContext context=new EvaluationContext();
    context.setLimit(limit);
    context.setBaseCohort(cohort);
    log.info(""String_Node_Str"" + context.getBaseCohort().size());
    model.addAttribute(""String_Node_Str"",Context.getService(DataSetDefinitionService.class).evaluate(dataSetDefinition,context));
  }
  model.addAttribute(""String_Node_Str"",Context.getService(CohortDefinitionService.class).getAllCohortDefinitions(false));
  model.addAttribute(""String_Node_Str"",Context.getService(DataSetDefinitionService.class).getAllDataSetDefinitions(false));
  return ""String_Node_Str"";
}","/** 
 * @param model
 * @return
 */
@SuppressWarnings(""String_Node_Str"") @RequestMapping(""String_Node_Str"") public String viewDataset(@RequestParam(required=false,value=""String_Node_Str"") Integer id,@RequestParam(required=false,value=""String_Node_Str"") String type,@RequestParam(required=false,value=""String_Node_Str"") String cohortId,@RequestParam(required=false,value=""String_Node_Str"") String dataSetId,@RequestParam(required=false,value=""String_Node_Str"") String indicatorId,@RequestParam(required=false,value=""String_Node_Str"") Integer limit,ModelMap model){
  DataSetDefinition dataSetDefinition=getDataSetDefinition(dataSetId,type,id);
  model.addAttribute(""String_Node_Str"",dataSetDefinition);
  if (cohortId != null && dataSetId != null) {
    Cohort cohort=evaluateCohort(cohortId);
    log.info(""String_Node_Str"" + cohort.size());
    model.addAttribute(""String_Node_Str"",cohort);
    model.addAttribute(""String_Node_Str"",Context.getService(CohortDefinitionService.class).getCohortDefinitionByUuid(cohortId));
    if (cohort == null || cohortId.equals(""String_Node_Str""))     cohort=Context.getPatientSetService().getAllPatients();
    EvaluationContext context=new EvaluationContext();
    context.setLimit(limit);
    context.setBaseCohort(cohort);
    log.info(""String_Node_Str"" + context.getBaseCohort().size());
    model.addAttribute(""String_Node_Str"",Context.getService(DataSetDefinitionService.class).evaluate(dataSetDefinition,context));
  }
  model.addAttribute(""String_Node_Str"",Context.getService(CohortDefinitionService.class).getAllCohortDefinitions(false));
  model.addAttribute(""String_Node_Str"",Context.getService(DataSetDefinitionService.class).getAllDataSetDefinitions(false));
  return ""String_Node_Str"";
}"
86836,"/** 
 * TODO Add javadoc What the heck is this for?
 * @param text
 * @return
 */
public CohortDefinition getStrategy(String text){
  String query=Context.getService(ReportService.class).applyReportXmlMacros(text);
  return CohortExpressionParser.parse(query);
}","/** 
 * TODO Add javadoc What the heck is this for?
 * @param text
 * @return
 */
public CohortDefinition getStrategy(String text){
  return CohortExpressionParser.parse(text);
}"
86837,"/** 
 * This is called prior to displaying a form for the first time. It tells Spring the form/command object to load into the request
 * @see org.springframework.web.servlet.mvc.AbstractFormController#formBackingObject(javax.servlet.http.HttpServletRequest)
 */
@SuppressWarnings(""String_Node_Str"") protected Object formBackingObject(HttpServletRequest request) throws ServletException {
  ReportData report=(ReportData)request.getSession().getAttribute(ReportingConstants.OPENMRS_REPORT_DATA);
  if (null != report) {
    return report;
  }
 else {
    MapDataSet emptyData=new MapDataSet();
    emptyData.setName(""String_Node_Str"");
    Map<String,DataSet> emptyMap=new HashMap<String,DataSet>();
    emptyMap.put(""String_Node_Str"",emptyData);
    ReportDefinition emptySchema=new ReportDefinition();
    emptySchema.setName(""String_Node_Str"");
    ReportData emptyReport=new ReportData();
    emptyReport.setDataSets(emptyMap);
    emptyReport.setDefinition(emptySchema);
    return emptyReport;
  }
}","/** 
 * This is called prior to displaying a form for the first time. It tells Spring the form/command object to load into the request
 * @see org.springframework.web.servlet.mvc.AbstractFormController#formBackingObject(javax.servlet.http.HttpServletRequest)
 */
@SuppressWarnings(""String_Node_Str"") protected Object formBackingObject(HttpServletRequest request) throws ServletException {
  ReportData report=(ReportData)request.getSession().getAttribute(ReportingConstants.OPENMRS_REPORT_DATA);
  if (null != report) {
    return report;
  }
 else {
    EvaluationContext context=new EvaluationContext();
    PatientDataSetDefinition dsd=new PatientDataSetDefinition();
    MapDataSet emptyData=new MapDataSet(dsd,context);
    emptyData.setName(""String_Node_Str"");
    Map<String,DataSet> emptyMap=new HashMap<String,DataSet>();
    emptyMap.put(""String_Node_Str"",emptyData);
    ReportDefinition emptySchema=new ReportDefinition();
    emptySchema.setName(""String_Node_Str"");
    ReportData emptyReport=new ReportData();
    emptyReport.setDataSets(emptyMap);
    emptyReport.setDefinition(emptySchema);
    return emptyReport;
  }
}"
86838,"/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  ReportData report=(ReportData)request.getSession().getAttribute(ReportingConstants.OPENMRS_REPORT_DATA);
  if (Context.isAuthenticated() && report != null && ""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
    ReportDefinition reportDefinition=report.getDefinition();
    ReportService reportService=(ReportService)Context.getService(ReportService.class);
    String renderClass=request.getParameter(""String_Node_Str"");
    String renderArg=""String_Node_Str"";
    if (renderClass.indexOf(""String_Node_Str"") > 0) {
      int ind=renderClass.indexOf(""String_Node_Str"");
      renderArg=renderClass.substring(ind + 1);
      renderClass=renderClass.substring(0,ind);
    }
    ReportRenderer renderer=new IndicatorReportRenderer();
    log.info(""String_Node_Str"" + renderer.getClass() + ""String_Node_Str""+ renderArg);
    if (renderer instanceof WebReportRenderer) {
      WebReportRenderer webRenderer=(WebReportRenderer)renderer;
      if (webRenderer.getLinkUrl(reportDefinition) != null) {
        request.getSession().setAttribute(ReportingConstants.OPENMRS_REPORT_DATA,report);
        request.getSession().setAttribute(ReportingConstants.OPENMRS_REPORT_ARGUMENT,renderArg);
        String url=webRenderer.getLinkUrl(reportDefinition);
        if (!url.startsWith(""String_Node_Str""))         url=""String_Node_Str"" + url;
        url=request.getContextPath() + url;
        return new ModelAndView(new RedirectView(url));
      }
    }
    String filename=renderer.getFilename(reportDefinition,renderArg).replace(""String_Node_Str"",""String_Node_Str"");
    response.setContentType(renderer.getRenderedContentType(reportDefinition,renderArg));
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + filename);
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
    renderer.render(report,renderArg,response.getOutputStream());
    return null;
  }
 else {
    String view=getFormView();
    return new ModelAndView(new RedirectView(view));
  }
}","/** 
 * The onSubmit function receives the form/command object that was modified by the input form and saves it to the db
 * @see org.springframework.web.servlet.mvc.SimpleFormController#onSubmit(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,java.lang.Object,org.springframework.validation.BindException)
 */
protected ModelAndView onSubmit(HttpServletRequest request,HttpServletResponse response,Object obj,BindException errors) throws Exception {
  ReportData report=(ReportData)request.getSession().getAttribute(ReportingConstants.OPENMRS_REPORT_DATA);
  if (Context.isAuthenticated() && report != null && ""String_Node_Str"".equals(request.getParameter(""String_Node_Str""))) {
    ReportDefinition reportDefinition=report.getDefinition();
    String renderClass=request.getParameter(""String_Node_Str"");
    String renderArg=""String_Node_Str"";
    if (renderClass.indexOf(""String_Node_Str"") > 0) {
      int ind=renderClass.indexOf(""String_Node_Str"");
      renderArg=renderClass.substring(ind + 1);
      renderClass=renderClass.substring(0,ind);
    }
    ReportRenderer renderer=new IndicatorReportRenderer();
    log.info(""String_Node_Str"" + renderer.getClass() + ""String_Node_Str""+ renderArg);
    if (renderer instanceof WebReportRenderer) {
      WebReportRenderer webRenderer=(WebReportRenderer)renderer;
      if (webRenderer.getLinkUrl(reportDefinition) != null) {
        request.getSession().setAttribute(ReportingConstants.OPENMRS_REPORT_DATA,report);
        request.getSession().setAttribute(ReportingConstants.OPENMRS_REPORT_ARGUMENT,renderArg);
        String url=webRenderer.getLinkUrl(reportDefinition);
        if (!url.startsWith(""String_Node_Str""))         url=""String_Node_Str"" + url;
        url=request.getContextPath() + url;
        return new ModelAndView(new RedirectView(url));
      }
    }
    String filename=renderer.getFilename(reportDefinition,renderArg).replace(""String_Node_Str"",""String_Node_Str"");
    response.setContentType(renderer.getRenderedContentType(reportDefinition,renderArg));
    response.setHeader(""String_Node_Str"",""String_Node_Str"" + filename);
    response.setHeader(""String_Node_Str"",""String_Node_Str"");
    renderer.render(report,renderArg,response.getOutputStream());
    return null;
  }
 else {
    String view=getFormView();
    return new ModelAndView(new RedirectView(view));
  }
}"
86839,"/** 
 * This method will parse the passed expression and return a value based on the following criteria:<br/> <ul> <li>Any string that matches a passed parameter will be replaced by the value of that parameter <li>If this date is followed by an expression, it will attempt to evaluate this by incrementing/decrementing days/weeks/months/years as specified</li> <li>Examples: Given 2 parameters: <ul> <li>report.startDate = java.util.Date with value of [2007-01-10] <li>report.gender = ""male"" </ul> The following should result:<br/> <br/> <pre> evaluateExpression(""${report.startDate}"") -> ""2007-01-10"" as Date evaluateExpression(""${report.startDate+5d}"") -> ""2007-01-15"" as Date evaluateExpression(""${report.startDate-1w}"") -> ""2007-01-03"" as Date evaluateExpression(""${report.startDate+3m}"") -> ""2007-04-15"" as Date evaluateExpression(""${report.startDate+1y}"") -> ""2008-01-10"" as Date <pre> </ul>
 * @param expression
 * @return value for given expression, as an <code>Object</code>
 * @throws ParameterException
 */
public static Object evaluateExpression(String expression,Map<String,Object> parameters,Class<?> type) throws ParameterException {
  log.info(""String_Node_Str"" + expression);
  if (expression == null) {
    log.warn(""String_Node_Str"");
    return null;
  }
  List<Object> elements=new ArrayList<Object>();
  StringBuilder curr=new StringBuilder();
  char[] chars=expression.toCharArray();
  for (int i=0; i < chars.length; i++) {
    char c=chars[i];
    boolean isStartOfExpr=(c == '$' && chars.length > (i + 1) && chars[i + 1] == '{');
    if (isStartOfExpr || c == '}') {
      if (curr.length() > 0) {
        if (c == '}') {
          elements.add(evaluateParameterExpression(curr.toString(),parameters,type));
        }
 else {
          elements.add(curr.toString());
        }
        curr=new StringBuilder();
      }
      if (isStartOfExpr) {
        i++;
      }
    }
 else {
      curr.append(c);
    }
  }
  if (curr.length() > 0) {
    elements.add(curr.toString());
  }
  if (elements.size() == 1) {
    return elements.get(0);
  }
 else {
    if (type != null && type != String.class) {
      throw new ParameterException(""String_Node_Str"" + expression + ""String_Node_Str""+ type);
    }
    StringBuilder sb=new StringBuilder();
    for (    Object o : elements) {
      sb.append(o.toString());
    }
    return sb.toString();
  }
}","/** 
 * This method will parse the passed expression and return a value based on the following criteria:<br/> <ul> <li>Any string that matches a passed parameter will be replaced by the value of that parameter <li>If this date is followed by an expression, it will attempt to evaluate this by incrementing/decrementing days/weeks/months/years as specified</li> <li>Examples: Given 2 parameters: <ul> <li>report.startDate = java.util.Date with value of [2007-01-10] <li>report.gender = ""male"" </ul> The following should result:<br/> <br/> <pre> evaluateExpression(""${report.startDate}"") -> ""2007-01-10"" as Date evaluateExpression(""${report.startDate+5d}"") -> ""2007-01-15"" as Date evaluateExpression(""${report.startDate-1w}"") -> ""2007-01-03"" as Date evaluateExpression(""${report.startDate+3m}"") -> ""2007-04-15"" as Date evaluateExpression(""${report.startDate+1y}"") -> ""2008-01-10"" as Date <pre> </ul>
 * @param expression
 * @return value for given expression, as an <code>Object</code>
 * @throws ParameterException
 */
public static Object evaluateExpression(String expression,Map<String,Object> parameters,Class<?> type) throws ParameterException {
  log.info(""String_Node_Str"" + expression);
  if (expression == null) {
    log.warn(""String_Node_Str"");
    return null;
  }
  List<Object> elements=new ArrayList<Object>();
  StringBuilder curr=new StringBuilder();
  char[] chars=expression.toCharArray();
  boolean inExpression=false;
  for (int i=0; i < chars.length; i++) {
    char c=chars[i];
    boolean isStartOfExpr=(c == '$' && chars.length > (i + 1) && chars[i + 1] == '{');
    if (isStartOfExpr) {
      if (curr.length() > 0) {
        elements.add(curr.toString());
        curr=new StringBuilder();
      }
      inExpression=true;
      i++;
    }
 else     if (c == '}' && inExpression) {
      if (curr.length() > 0) {
        elements.add(evaluateParameterExpression(curr.toString(),parameters,type));
        curr=new StringBuilder();
      }
      inExpression=false;
    }
 else {
      curr.append(c);
    }
  }
  if (curr.length() > 0) {
    elements.add(curr.toString());
  }
  if (elements.size() == 1) {
    return elements.get(0);
  }
 else {
    if (type != null && type != String.class) {
      throw new ParameterException(""String_Node_Str"" + expression + ""String_Node_Str""+ type);
    }
    StringBuilder sb=new StringBuilder();
    for (    Object o : elements) {
      sb.append(o.toString());
    }
    return sb.toString();
  }
}"
86840,"/** 
 * @see WidgetHandler#render(WidgetConfig)
 */
@Override public void render(WidgetConfig config) throws IOException {
  TextWidget w=WidgetFactory.getInstance(TextWidget.class,config);
  if (config.getType() == Character.class) {
    config.setConfiguredAttribute(""String_Node_Str"",""String_Node_Str"");
    config.setConfiguredAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    config.setConfiguredAttribute(""String_Node_Str"",""String_Node_Str"");
  }
  w.render(config);
}","/** 
 * @see WidgetHandler#render(WidgetConfig)
 */
@Override public void render(WidgetConfig config) throws IOException {
  Widget w=null;
  if (config.getType() == Character.class) {
    w=WidgetFactory.getInstance(TextWidget.class,config);
    config.setConfiguredAttribute(""String_Node_Str"",""String_Node_Str"");
    config.setConfiguredAttribute(""String_Node_Str"",""String_Node_Str"");
  }
 else {
    String rows=config.getAttributeValue(""String_Node_Str"");
    String cols=config.getAttributeValue(""String_Node_Str"");
    if (StringUtils.isNotEmpty(rows) || StringUtils.isNotEmpty(cols) || ""String_Node_Str"".equals(config.getFormat())) {
      w=WidgetFactory.getInstance(TextAreaWidget.class,config);
    }
 else {
      w=WidgetFactory.getInstance(TextWidget.class,config);
      config.setConfiguredAttribute(""String_Node_Str"",""String_Node_Str"");
    }
  }
  w.render(config);
}"
86841,"/** 
 * Public constructor with arguments.
 * @param name
 * @param description
 * @param cohortDefinition
 * @param logicCriteria
 * @param aggregator
 */
public CohortIndicator(String name,String description,Mapped<? extends CohortDefinition> cohortDefinition,LogicCriteria logicCriteria,Class<? extends Aggregator> aggregator){
  super();
  this.setName(name);
  this.setDescription(description);
  this.cohortDefinition=cohortDefinition;
  this.logicCriteria=logicCriteria;
  this.aggregator=aggregator;
  this.setUuid(UUID.randomUUID().toString());
}","/** 
 * Public constructor with arguments.
 * @param name
 * @param description
 * @param cohortDefinition
 * @param logicCriteria
 * @param aggregator
 */
public CohortIndicator(String name,String description,Mapped<? extends CohortDefinition> cohortDefinition,LogicCriteria logicCriteria,Class<? extends Aggregator> aggregator){
  super();
  this.setName(name);
  this.setDescription(description);
  this.cohortDefinition=cohortDefinition;
  this.logicCriteria=logicCriteria;
  this.aggregator=aggregator;
}"
86842,"/** 
 * Deletes a   {@link Indicator} from the system.
 * @param datasetDefinition	the {@link Indicator} to purge
 * @should remove the Indicator
 */
public void purgeIndicator(Indicator dataSetDefinition);","/** 
 * Deletes a   {@link Indicator} from the system.
 * @param datasetDefinition	the {@link Indicator} to purge
 * @should remove the Indicator
 */
public void purgeIndicator(Indicator indicator);"
86843,"/** 
 * Saves the given   {@link Indicator} to the system.
 * @param datasetDefinition	the {@link Indicator} to save
 * @return the {@link Indicator} that was 
 * @should create new {@link Indicator}
 * @should update existing {@link Indicator}
 * @should set identifier after save
 */
public Indicator saveIndicator(Indicator datasetDefinition);","/** 
 * Saves the given   {@link Indicator} to the system.
 * @param datasetDefinition	the {@link Indicator} to save
 * @return the {@link Indicator} that was 
 * @should create new {@link Indicator}
 * @should update existing {@link Indicator}
 * @should set identifier after save
 */
public Indicator saveIndicator(Indicator indicator);"
86844,"/** 
 * @see IndicatorPersister#purgeIndicator(Indicator)
 */
public void purgeIndicator(Indicator dataSetDefinition){
  dao.purgeObject(dataSetDefinition.getId());
}","/** 
 * @see IndicatorPersister#purgeIndicator(Indicator)
 */
public void purgeIndicator(Indicator indicator){
  dao.purgeObject(indicator.getId());
}"
86845,"/** 
 * @see IndicatorPersister#saveIndicator(Indicator)
 */
public Indicator saveIndicator(Indicator dataSetDefinition){
  return dao.saveObject(dataSetDefinition);
}","/** 
 * @see IndicatorPersister#saveIndicator(Indicator)
 */
public Indicator saveIndicator(Indicator indicator){
  return dao.saveObject(indicator);
}"
86846,"/** 
 * @see IndicatorService#saveIndicator(String)
 */
public void purgeIndicator(Indicator indicator) throws APIException {
  getPersister(indicator.getClass()).saveIndicator(indicator);
}","/** 
 * @see IndicatorService#saveIndicator(String)
 */
public void purgeIndicator(Indicator indicator) throws APIException {
  getPersister(indicator.getClass()).purgeIndicator(indicator);
}"
86847,"/** 
 * @see CohortDefinitionPersister#getCohortDefinitionByName(String,boolean)
 */
public List<CohortDefinition> getCohortDefinitions(String name,boolean exactMatchOnly){
  List<Cohort> cohorts=new ArrayList<Cohort>();
  if (exactMatchOnly) {
    cohorts.add(Context.getCohortService().getCohort(name));
  }
 else {
    cohorts.addAll(Context.getCohortService().getCohorts(name));
  }
  List<CohortDefinition> ret=new ArrayList<CohortDefinition>();
  for (  Cohort c : cohorts) {
    ret.add(new StaticCohortDefinition(c));
  }
  return ret;
}","/** 
 * @see CohortDefinitionPersister#getCohortDefinitionByName(String,boolean)
 */
public List<CohortDefinition> getCohortDefinitions(String name,boolean exactMatchOnly){
  List<Cohort> cohorts=new ArrayList<Cohort>();
  if (exactMatchOnly) {
    Cohort c=Context.getCohortService().getCohort(name);
    if (c != null) {
      cohorts.add(c);
    }
  }
 else {
    cohorts.addAll(Context.getCohortService().getCohorts(name));
  }
  List<CohortDefinition> ret=new ArrayList<CohortDefinition>();
  for (  Cohort c : cohorts) {
    ret.add(new StaticCohortDefinition(c));
  }
  return ret;
}"
86848,"/** 
 * Gets the current treatment group for the given patient. TODO Refactor this -- we don't want logic like this in generic datasets.
 */
public String getCurrentTreatmentGroup(Patient patient){
  String treatmentGroup=""String_Node_Str"";
  try {
    Program program=Context.getProgramWorkflowService().getProgramByName(""String_Node_Str"");
    List<PatientProgram> patientPrograms=Context.getProgramWorkflowService().getPatientPrograms(patient,program,null,null,null,null,false);
    ProgramWorkflow workflow=program.getWorkflowByName(""String_Node_Str"");
    if (!patientPrograms.isEmpty()) {
      PatientState currentState=patientPrograms.get(0).getCurrentState(workflow);
      if (currentState != null && currentState.getActive()) {
        treatmentGroup=""String_Node_Str"";
        treatmentGroup+=currentState.getState().getConcept().getName().getName();
      }
 else {
        treatmentGroup=""String_Node_Str"";
      }
    }
 else {
      treatmentGroup=""String_Node_Str"";
    }
  }
 catch (  Exception e) {
    log.info(""String_Node_Str"" + patient.getPatientId() + ""String_Node_Str""+ e.getCause()+ ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
  }
  return treatmentGroup;
}","/** 
 * Gets the current treatment group for the given patient. TODO Refactor this -- we don't want logic like this in generic datasets.
 */
public String getCurrentTreatmentGroup(Patient patient){
  String treatmentGroup=""String_Node_Str"";
  try {
    Program program=Context.getProgramWorkflowService().getProgramByName(""String_Node_Str"");
    List<PatientProgram> patientPrograms=Context.getProgramWorkflowService().getPatientPrograms(patient,program,null,null,null,null,false);
    ProgramWorkflow workflow=program.getWorkflowByName(""String_Node_Str"");
    if (!patientPrograms.isEmpty()) {
      PatientState currentState=patientPrograms.get(0).getCurrentState(workflow);
      if (currentState != null && currentState.getActive()) {
        treatmentGroup=""String_Node_Str"";
        treatmentGroup=currentState.getState().getConcept().getName().getName();
        treatmentGroup=treatmentGroup.replace(""String_Node_Str"",""String_Node_Str"");
        treatmentGroup=treatmentGroup.replace(""String_Node_Str"",""String_Node_Str"");
        treatmentGroup=treatmentGroup.trim();
      }
 else {
        treatmentGroup=""String_Node_Str"";
      }
    }
 else {
      treatmentGroup=""String_Node_Str"";
    }
  }
 catch (  Exception e) {
    log.info(""String_Node_Str"" + patient.getPatientId() + ""String_Node_Str""+ e.getCause()+ ""String_Node_Str""+ e.getMessage()+ ""String_Node_Str"");
  }
  return treatmentGroup;
}"
86849,"/** 
 * Utility method which takes in a Class and a Parameterizable instance  and returns a List of Parameters based on the annotated   {@link Param}fields within the classToCheck or its superclasses. This is private as it exists only to support recursion in the above class. Made public again because of a dependency on BaseDataSetDefinition.
 * @param classToCheck - The class to look at for annotated fields.
 * @param classInstance - The instance to look at for default values.
 * @return - A List of Parameters based on the annotations in the passed classes
 */
@SuppressWarnings(""String_Node_Str"") public static List<Parameter> getAnnotatedParameters(Class<?> classToCheck,Parameterizable classInstance){
  List<Parameter> ret=new ArrayList<Parameter>();
  if (classToCheck != null) {
    for (    Field f : classToCheck.getDeclaredFields()) {
      Param ann=f.getAnnotation(Param.class);
      if (ann != null) {
        String name=(StringUtils.isEmpty(ann.name()) ? f.getName() : ann.name());
        String label=name;
        if (!StringUtils.isEmpty(ann.labelCode())) {
          label=Context.getMessageSourceService().getMessage(ann.labelCode());
        }
 else         if (!StringUtils.isEmpty(ann.labelText())) {
          label=ann.labelText();
        }
        Object defaultVal=null;
        if (classInstance != null) {
          try {
            String getterMethodName=""String_Node_Str"" + f.getName().substring(0,1).toUpperCase() + f.getName().substring(1);
            Method getterMethod=classInstance.getClass().getMethod(getterMethodName,(Class[])null);
            defaultVal=getterMethod.invoke(classInstance);
          }
 catch (          Exception e) {
            throw new APIException(""String_Node_Str"" + e);
          }
        }
        Parameter p=new Parameter(name,label,f.getType(),defaultVal,ann.required());
        ret.add(p);
        Class superclass=classToCheck.getSuperclass();
        if (superclass != null) {
          ret.addAll(getAnnotatedParameters(superclass,classInstance));
        }
      }
    }
  }
  return ret;
}","/** 
 * Utility method which takes in a Class and a Parameterizable instance  and returns a List of Parameters based on the annotated   {@link Param}fields within the classToCheck or its superclasses. This is private as it exists only to support recursion in the above class. Made public again because of a dependency on BaseDataSetDefinition.
 * @param classToCheck - The class to look at for annotated fields.
 * @param classInstance - The instance to look at for default values.
 * @return - A List of Parameters based on the annotations in the passed classes
 */
@SuppressWarnings(""String_Node_Str"") public static List<Parameter> getAnnotatedParameters(Class<?> classToCheck,Parameterizable classInstance){
  List<Parameter> ret=new ArrayList<Parameter>();
  if (classToCheck != null) {
    log.debug(""String_Node_Str"" + classToCheck.getName());
    for (    Field f : classToCheck.getDeclaredFields()) {
      Param ann=f.getAnnotation(Param.class);
      if (ann != null) {
        String name=(StringUtils.isEmpty(ann.name()) ? f.getName() : ann.name());
        String label=name;
        if (!StringUtils.isEmpty(ann.labelCode())) {
          label=Context.getMessageSourceService().getMessage(ann.labelCode());
        }
 else         if (!StringUtils.isEmpty(ann.labelText())) {
          label=ann.labelText();
        }
        Object defaultVal=null;
        if (classInstance != null) {
          try {
            String getterMethodName=""String_Node_Str"" + f.getName().substring(0,1).toUpperCase() + f.getName().substring(1);
            Method getterMethod=classInstance.getClass().getMethod(getterMethodName,(Class[])null);
            defaultVal=getterMethod.invoke(classInstance);
          }
 catch (          Exception e) {
            throw new APIException(""String_Node_Str"" + e);
          }
        }
        Parameter p=new Parameter(name,label,f.getType(),defaultVal,ann.required());
        ret.add(p);
        log.debug(""String_Node_Str"" + p);
      }
    }
    Class superclass=classToCheck.getSuperclass();
    if (superclass != null) {
      log.debug(""String_Node_Str"" + superclass);
      ret.addAll(getAnnotatedParameters(superclass,classInstance));
    }
  }
  return ret;
}"
86850,"private void dealWithIntents(){
  Intent intent=getIntent();
  Bookmark bmark=(new Gson()).fromJson(intent.getStringExtra(""String_Node_Str""),Bookmark.class);
  populateFields(bmark);
}","private void dealWithIntents(){
  Intent intent=getIntent();
  try {
    final String json=intent.getStringExtra(IntentConstants.EXTRAS_KEY_BMARK);
    Bookmark bmark=(new Gson()).fromJson(json,Bookmark.class);
    populateFields(bmark);
  }
 catch (  JsonParseException e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}"
86851,"@Override public boolean onItemLongClick(AdapterView<?> parent,View view,int position,long id){
  final Bookmark bmark=((Bookmark)parent.getAdapter().getItem(position));
  final Bundle bundle=new Bundle();
  String bmarkJson=(new Gson()).toJson(bmark);
  bundle.putString(TAG,bmarkJson);
  final Intent intent=new Intent(BookmarkListActivity.this,BookMarkDetailActivity.class);
  intent.putExtras(bundle);
  startActivity(intent);
  return true;
}","@Override public boolean onItemLongClick(AdapterView<?> parent,View view,int position,long id){
  final Bookmark bmark=((Bookmark)parent.getAdapter().getItem(position));
  final Bundle bundle=new Bundle();
  String bmarkJson=(new Gson()).toJson(bmark);
  bundle.putString(IntentConstants.EXTRAS_KEY_BMARK,bmarkJson);
  final Intent intent=new Intent(BookmarkListActivity.this,BookMarkDetailActivity.class);
  intent.putExtras(bundle);
  startActivity(intent);
  return true;
}"
86852,"private void setUpListView(){
  ListView lv=getListView();
  lv.setTextFilterEnabled(true);
  lv.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      final Bookmark bmark=((Bookmark)parent.getAdapter().getItem(position));
      final Uri uri=Uri.parse(BookieServiceUtils.urlForRedirect(bmark,settings.getBaseUrl(),settings.getUsername()));
      startActivity(new Intent(Intent.ACTION_VIEW,uri));
    }
  }
);
  lv.setOnItemLongClickListener(new OnItemLongClickListener(){
    @Override public boolean onItemLongClick(    AdapterView<?> parent,    View view,    int position,    long id){
      final Bookmark bmark=((Bookmark)parent.getAdapter().getItem(position));
      final Bundle bundle=new Bundle();
      String bmarkJson=(new Gson()).toJson(bmark);
      bundle.putString(TAG,bmarkJson);
      final Intent intent=new Intent(BookmarkListActivity.this,BookMarkDetailActivity.class);
      intent.putExtras(bundle);
      startActivity(intent);
      return true;
    }
  }
);
  lv.setOnScrollListener(new EndlessScrollListener());
}","private void setUpListView(){
  ListView lv=getListView();
  lv.setTextFilterEnabled(true);
  lv.setOnItemClickListener(new OnItemClickListener(){
    @Override public void onItemClick(    AdapterView<?> parent,    View view,    int position,    long id){
      final Bookmark bmark=((Bookmark)parent.getAdapter().getItem(position));
      final Uri uri=Uri.parse(BookieServiceUtils.urlForRedirect(bmark,settings.getBaseUrl(),settings.getUsername()));
      startActivity(new Intent(Intent.ACTION_VIEW,uri));
    }
  }
);
  lv.setOnItemLongClickListener(new OnItemLongClickListener(){
    @Override public boolean onItemLongClick(    AdapterView<?> parent,    View view,    int position,    long id){
      final Bookmark bmark=((Bookmark)parent.getAdapter().getItem(position));
      final Bundle bundle=new Bundle();
      String bmarkJson=(new Gson()).toJson(bmark);
      bundle.putString(IntentConstants.EXTRAS_KEY_BMARK,bmarkJson);
      final Intent intent=new Intent(BookmarkListActivity.this,BookMarkDetailActivity.class);
      intent.putExtras(bundle);
      startActivity(intent);
      return true;
    }
  }
);
  lv.setOnScrollListener(new EndlessScrollListener());
}"
86853,"@Override public void success(SearchResult searchResult,Response response){
  bmarks.addAll(searchResult.search_results);
  setProgressBarIndeterminateVisibility(false);
  Log.w(TAG,""String_Node_Str"" + bmarks.size());
  adapter.notifyDataSetChanged();
  pagesLoaded=nextPage;
}","@Override public void success(SearchResult searchResult,Response response){
  bmarks.addAll(searchResult.search_results);
  setProgressBarIndeterminateVisibility(false);
  Log.w(TAG,""String_Node_Str"" + bmarks.size());
  adapter.notifyDataSetChanged();
  pagesLoaded++;
}"
86854,"private void refreshWithSearch(){
  String terms;
  try {
    terms=encode(searchTerms,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    return;
  }
  setProgressBarIndeterminateVisibility(true);
  final int nextPage=pagesLoaded + 1;
  service.search(settings.getUsername(),settings.getApiKey(),terms,countPP,nextPage,new Callback<SearchResult>(){
    @Override public void success(    SearchResult searchResult,    Response response){
      bmarks.addAll(searchResult.search_results);
      setProgressBarIndeterminateVisibility(false);
      Log.w(TAG,""String_Node_Str"" + bmarks.size());
      adapter.notifyDataSetChanged();
      pagesLoaded=nextPage;
    }
    @Override public void failure(    RetrofitError error){
      setProgressBarIndeterminateVisibility(false);
      handleError(error);
    }
  }
);
}","private void refreshWithSearch(){
  String terms;
  try {
    terms=encode(searchTerms,""String_Node_Str"");
  }
 catch (  UnsupportedEncodingException e) {
    return;
  }
  setProgressBarIndeterminateVisibility(true);
  final int nextPage=pagesLoaded;
  service.search(settings.getUsername(),settings.getApiKey(),terms,countPP,nextPage,new Callback<SearchResult>(){
    @Override public void success(    SearchResult searchResult,    Response response){
      bmarks.addAll(searchResult.search_results);
      setProgressBarIndeterminateVisibility(false);
      Log.w(TAG,""String_Node_Str"" + bmarks.size());
      adapter.notifyDataSetChanged();
      pagesLoaded++;
    }
    @Override public void failure(    RetrofitError error){
      setProgressBarIndeterminateVisibility(false);
      handleError(error);
    }
  }
);
}"
86855,"private void refreshWithNewestGlobal(){
  int nextPage=pagesLoaded + 1;
  setProgressBarIndeterminateVisibility(true);
  service.everyonesRecent(countPP,nextPage,new ServiceCallback());
}","private void refreshWithNewestGlobal(){
  int nextPage=pagesLoaded;
  setProgressBarIndeterminateVisibility(true);
  service.everyonesRecent(countPP,nextPage,new ServiceCallback());
}"
86856,"private void refreshWithNewestUser(){
  int nextPage=pagesLoaded + 1;
  setProgressBarIndeterminateVisibility(true);
  service.recent(settings.getUsername(),settings.getApiKey(),countPP,nextPage,new ServiceCallback());
}","private void refreshWithNewestUser(){
  int nextPage=pagesLoaded;
  setProgressBarIndeterminateVisibility(true);
  service.recent(settings.getUsername(),settings.getApiKey(),countPP,nextPage,new ServiceCallback());
}"
86857,"private List<Class<?>> allClassesInPackage(String packageName){
  String path=packageName.replace('.','/');
  Enumeration<URL> resources=classResourcesOn(path);
  List<File> dirs=new ArrayList<File>();
  while (resources.hasMoreElements()) {
    URL resource=resources.nextElement();
    dirs.add(new File(resource.getFile()));
  }
  List<Class<?>> classes=Lists.newArrayList();
  for (  File directory : dirs) {
    classes.addAll(findClasses(directory,packageName));
  }
  return classes;
}","private List<Class<?>> allClassesInPackage(String packageName){
  try {
    String path=packageName.replace('.','/');
    Enumeration<URL> resources=classResourcesOn(path);
    List<URI> dirs=new ArrayList<URI>();
    while (resources.hasMoreElements()) {
      URL resource=resources.nextElement();
      dirs.add(resource.toURI());
    }
    List<Class<?>> classes=Lists.newArrayList();
    for (    URI directory : dirs) {
      classes.addAll(findClasses(directory,packageName));
    }
    return classes;
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + packageName + ""String_Node_Str"",e);
  }
}"
86858,"/** 
 * Recursive method used to find all classes in a given directory and subdirs.
 * @param directory   The base directory
 * @param packageName The package name for classes found inside the base directory
 * @return The classes
 */
private List<Class<?>> findClasses(File directory,String packageName){
  List<Class<?>> classes=Lists.newArrayList();
  if (isJar(directory)) {
    return classesFromJar(directory,packageName);
  }
  if (!directory.exists()) {
    return classes;
  }
  File[] files=directory.listFiles();
  if (files != null) {
    for (    File file : files) {
      if (file.isDirectory()) {
        classes.addAll(findClasses(file,packageName + ""String_Node_Str"" + file.getName()));
      }
 else       if (file.getName().endsWith(""String_Node_Str"") && isNotAnInnerClass(file.getName())) {
        classes.add(correspondingClass(packageName,file));
      }
    }
  }
  return classes;
}","/** 
 * Recursive method used to find all classes in a given directory and subdirs.
 * @param directory   The base directory
 * @param packageName The package name for classes found inside the base directory
 * @return The classes
 */
private List<Class<?>> findClasses(URI directory,String packageName){
  try {
    final String scheme=directory.getScheme();
    final String schemeSpecificPart=directory.getSchemeSpecificPart();
    if (scheme.equals(""String_Node_Str"") && schemeSpecificPart.contains(""String_Node_Str"")) {
      return findClassesInJar(directory,packageName);
    }
 else     if (scheme.equals(""String_Node_Str"")) {
      return findClassesInFileSystemDirectory(directory,packageName);
    }
    throw new IllegalArgumentException(""String_Node_Str"" + scheme + ""String_Node_Str"");
  }
 catch (  Exception e) {
    throw new RuntimeException(""String_Node_Str"" + ""String_Node_Str"" + directory + ""String_Node_Str""+ packageName+ ""String_Node_Str"",e);
  }
}"
86859,"private void startTestSuiteForStory(Story story){
  String storyName=removeSuffixFrom(story.getName());
  String storyTitle=NameConverter.humanize(storyName);
  net.thucydides.core.model.Story userStory=net.thucydides.core.model.Story.withIdAndPath(storyName,storyTitle,story.getPath()).withNarrative(story.getNarrative().asString(new Keywords()).trim());
  StepEventBus.getEventBus().testSuiteStarted(userStory);
  registerTags(story);
}","private void startTestSuiteForStory(Story story){
  String storyName=removeSuffixFrom(story.getName());
  String storyTitle=NameConverter.humanize(storyName);
  net.thucydides.core.model.Story userStory=net.thucydides.core.model.Story.withIdAndPath(storyName,storyTitle,story.getPath()).withNarrative(getNarrativeFrom(story));
  StepEventBus.getEventBus().testSuiteStarted(userStory);
  registerTags(story);
}"
86860,"public void scenarioNotAllowed(Scenario scenario,String s){
}","public void scenarioNotAllowed(Scenario scenario,String s){
  StepEventBus.getEventBus().testIgnored();
}"
86861,"private void startTestSuiteForStory(Story story){
  String storyName=removeSuffixFrom(story.getName());
  String storyTitle=NameConverter.humanize(storyName);
  net.thucydides.core.model.Story userStory=net.thucydides.core.model.Story.withIdAndPath(storyName,storyTitle,story.getPath()).withNarrative(story.getNarrative().asA());
  StepEventBus.getEventBus().testSuiteStarted(userStory);
  registerTags(story);
}","private void startTestSuiteForStory(Story story){
  String storyName=removeSuffixFrom(story.getName());
  String storyTitle=NameConverter.humanize(storyName);
  net.thucydides.core.model.Story userStory=net.thucydides.core.model.Story.withIdAndPath(storyName,storyTitle,story.getPath()).withNarrative(story.getNarrative().asString(new Keywords()).trim());
  StepEventBus.getEventBus().testSuiteStarted(userStory);
  registerTags(story);
}"
86862,"public ThucydidesStepCandidate(StepCandidate stepCandidate){
  super(stepCandidate.getPatternAsString(),stepCandidate.getPriority(),stepCandidate.getStepType(),stepCandidate.getMethod(),(Class<?>)Extract.field(""String_Node_Str"").from(stepCandidate),(InjectableStepsFactory)Extract.field(""String_Node_Str"").from(stepCandidate),(Keywords)Extract.field(""String_Node_Str"").from(stepCandidate),new RegexPrefixCapturingPatternParser(),new ParameterConverters(),new ParameterControls());
  this.stepCandidate=stepCandidate;
}","public ThucydidesStepCandidate(StepCandidate stepCandidate){
  super(stepCandidate.getPatternAsString(),stepCandidate.getPriority(),stepCandidate.getStepType(),stepCandidate.getMethod(),(Class<?>)Extract.field(""String_Node_Str"").from(stepCandidate),(InjectableStepsFactory)Extract.field(""String_Node_Str"").from(stepCandidate),(Keywords)Extract.field(""String_Node_Str"").from(stepCandidate),new RegexPrefixCapturingPatternParser(),new ParameterConverters(),new ParameterControls());
  this.composedOf(stepCandidate.composedSteps());
  this.stepCandidate=stepCandidate;
}"
86863,"private Class<?> correspondingClass(String packageName,File file){
  try {
    String fullyQualifiedClassName=packageName + '.' + simpleClassNameOf(file);
    return getClassLoader().loadClass(fullyQualifiedClassName);
  }
 catch (  ClassNotFoundException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + file,e);
  }
}","private Class<?> correspondingClass(String packageName,File file){
  String fullyQualifiedClassName=packageName + '.' + simpleClassNameOf(file);
  return loadClassWithName(fullyQualifiedClassName);
}"
86864,"/** 
 * Recursive method used to find all classes in a given directory and subdirs.
 * @param directory   The base directory
 * @param packageName The package name for classes found inside the base directory
 * @return The classes
 */
private List<Class<?>> findClasses(File directory,String packageName){
  List<Class<?>> classes=Lists.newArrayList();
  if (isJar(directory)) {
    List<File> files=classesFilesFromJar(directory,packageName);
    for (    File file : files) {
      classes.add(correspondingClass(packageName,file));
    }
  }
  if (!directory.exists()) {
    return classes;
  }
  File[] files=directory.listFiles();
  if (files != null) {
    for (    File file : files) {
      if (file.isDirectory()) {
        classes.addAll(findClasses(file,packageName + ""String_Node_Str"" + file.getName()));
      }
 else       if (file.getName().endsWith(""String_Node_Str"") && isNotAnInnerClass(file.getName())) {
        classes.add(correspondingClass(packageName,file));
      }
    }
  }
  return classes;
}","/** 
 * Recursive method used to find all classes in a given directory and subdirs.
 * @param directory   The base directory
 * @param packageName The package name for classes found inside the base directory
 * @return The classes
 */
private List<Class<?>> findClasses(File directory,String packageName){
  List<Class<?>> classes=Lists.newArrayList();
  if (isJar(directory)) {
    return classesFromJar(directory,packageName);
  }
  if (!directory.exists()) {
    return classes;
  }
  File[] files=directory.listFiles();
  if (files != null) {
    for (    File file : files) {
      if (file.isDirectory()) {
        classes.addAll(findClasses(file,packageName + ""String_Node_Str"" + file.getName()));
      }
 else       if (file.getName().endsWith(""String_Node_Str"") && isNotAnInnerClass(file.getName())) {
        classes.add(correspondingClass(packageName,file));
      }
    }
  }
  return classes;
}"
86865,"public void beforeStory(Story story,boolean b){
  currentStory=story;
  if (!isFixture(story)) {
    String requestedDriver=getRequestedDriver(story.getMeta());
    if (StringUtils.isNotEmpty(requestedDriver)) {
      ThucydidesWebDriverSupport.initialize(requestedDriver);
    }
 else {
      ThucydidesWebDriverSupport.initialize();
    }
    getThucydidesListeners().withDriver(ThucydidesWebDriverSupport.getDriver());
    String storyName=removeSuffixFrom(story.getName());
    String storyTitle=NameConverter.humanize(storyName);
    StepEventBus.getEventBus().testSuiteStarted(net.thucydides.core.model.Story.withId(storyName,storyTitle));
    registerStoryIssues(story.getMeta());
    registerStoryFeaturesAndEpics(story.getMeta());
    registerStoryTags(story.getMeta());
  }
}","public void beforeStory(Story story,boolean b){
  currentStory=story;
  if (!isFixture(story)) {
    System.out.println(""String_Node_Str"" + story.getName());
    String requestedDriver=getRequestedDriver(story.getMeta());
    if (StringUtils.isNotEmpty(requestedDriver)) {
      ThucydidesWebDriverSupport.initialize(requestedDriver);
    }
 else {
      ThucydidesWebDriverSupport.initialize();
    }
    ThucydidesStepFactory.resetContext();
    getThucydidesListeners().withDriver(ThucydidesWebDriverSupport.getDriver());
    String storyName=removeSuffixFrom(story.getName());
    String storyTitle=NameConverter.humanize(storyName);
    StepEventBus.getEventBus().testSuiteStarted(net.thucydides.core.model.Story.withId(storyName,storyTitle));
    registerTags(story);
  }
}"
86866,"public void afterStory(boolean given){
  if (isAfterStory(currentStory)) {
    generateReportsFor(baseStepListeners);
  }
 else   if (!isFixture(currentStory)) {
    StepEventBus.getEventBus().testSuiteFinished();
    clearListeners();
  }
}","public void afterStory(boolean given){
  if (isAfterStory(currentStory)) {
    ThucydidesWebDriverSupport.closeAllDrivers();
    generateReportsFor(baseStepListeners);
  }
 else   if (!isFixture(currentStory)) {
    StepEventBus.getEventBus().testSuiteFinished();
    clearListeners();
  }
}"
86867,"public Object newInstanceOf(final Class<?> type){
  try {
    ThucydidesWebDriverSupport.getPages();
    if (hasConstructorWithPagesParameter(type)) {
      return createNewPageEnabledStepCandidate(type);
    }
 else {
      return type.newInstance();
    }
  }
 catch (  Exception e) {
    throw new ThucydidesStepInitializationError(e);
  }
}","public Object newInstanceOf(final Class<?> type){
  if (stepInstances.containsKey(type)) {
    return stepInstances.get(type);
  }
 else {
    Object newInstance=null;
    try {
      ThucydidesWebDriverSupport.getPages();
      if (hasConstructorWithPagesParameter(type)) {
        newInstance=createNewPageEnabledStepCandidate(type);
      }
 else {
        newInstance=type.newInstance();
      }
    }
 catch (    Exception e) {
      throw new ThucydidesStepInitializationError(e);
    }
    stepInstances.put(type,newInstance);
    return newInstance;
  }
}"
86868,"public ThucydidesStepFactory(Configuration configuration,String rootPackage){
  super(configuration);
  this.context=new ThucydidesStepContext();
  this.rootPackage=rootPackage;
}","public ThucydidesStepFactory(Configuration configuration,String rootPackage){
  super(configuration);
  this.rootPackage=rootPackage;
}"
86869,"public Object createInstanceOfType(Class<?> type){
  Object stepsInstance=context.newInstanceOf(type);
  StepAnnotations.injectScenarioStepsInto(stepsInstance,getStepFactory());
  ThucydidesWebDriverSupport.initializeFieldsIn(stepsInstance);
  return stepsInstance;
}","public Object createInstanceOfType(Class<?> type){
  Object stepsInstance=getContext().newInstanceOf(type);
  StepAnnotations.injectScenarioStepsInto(stepsInstance,getStepFactory());
  ThucydidesWebDriverSupport.initializeFieldsIn(stepsInstance);
  return stepsInstance;
}"
86870,"protected ThucydidesListeners getThucydidesListeners(){
  if (thucydidesListenersThreadLocal.get() == null) {
    ThucydidesListeners listeners=ThucydidesReports.setupListeners(systemConfiguration);
    thucydidesListenersThreadLocal.set(listeners);
    baseStepListeners.add(listeners.getBaseStepListener());
  }
  return thucydidesListenersThreadLocal.get();
}","protected ThucydidesListeners getThucydidesListeners(){
  if (thucydidesListenersThreadLocal.get() == null) {
    System.out.println(""String_Node_Str"");
    ThucydidesListeners listeners=ThucydidesReports.setupListeners(systemConfiguration);
    thucydidesListenersThreadLocal.set(listeners);
synchronized (baseStepListeners) {
      baseStepListeners.add(listeners.getBaseStepListener());
    }
    System.out.println(""String_Node_Str"");
  }
  return thucydidesListenersThreadLocal.get();
}"
86871,"public void afterStory(boolean given){
  if (isAfterStory(currentStory)) {
    ThucydidesWebDriverSupport.closeAllDrivers();
    generateReportsFor(baseStepListeners);
  }
 else   if (!isFixture(currentStory)) {
    StepEventBus.getEventBus().testSuiteFinished();
    clearListeners();
  }
}","public void afterStory(boolean given){
  if (isAfterStory(currentStory)) {
    ThucydidesWebDriverSupport.closeAllDrivers();
    generateReports();
  }
 else   if (!isFixture(currentStory)) {
    StepEventBus.getEventBus().testSuiteFinished();
    clearListeners();
  }
}"
86872,"@Test public void stories_with_a_matching_name_can_be_run() throws Throwable {
  ThucydidesJUnitStories stories=new AStorySample(""String_Node_Str"");
  stories.setSystemConfiguration(systemConfiguration);
  stories.configuredEmbedder().configuration().storyReporterBuilder().withReporters(printOutput);
  run(stories);
  List<TestOutcome> outcomes=loadTestOutcomes();
  assertThat(outcomes.size(),is(3));
}","@Test public void stories_with_a_matching_name_can_be_run() throws Throwable {
  ThucydidesJUnitStories stories=new AStorySample(""String_Node_Str"");
  stories.setSystemConfiguration(systemConfiguration);
  stories.configuredEmbedder().configuration().storyReporterBuilder().withReporters(printOutput);
  run(stories);
  List<TestOutcome> outcomes=loadTestOutcomes();
  assertThat(outcomes.size(),is(6));
}"
86873,"@Test public void all_stories_on_the_classpath_should_be_run_by_default() throws Throwable {
  ThucydidesJUnitStories stories=new AllStoriesSample();
  stories.setSystemConfiguration(systemConfiguration);
  stories.configuredEmbedder().configuration().storyReporterBuilder().withReporters(printOutput);
  run(stories);
  List<TestOutcome> outcomes=loadTestOutcomes();
  assertThat(outcomes.size(),is(greaterThan(10)));
}","@Test public void all_stories_on_the_classpath_should_be_run_by_default() throws Throwable {
  ThucydidesJUnitStories stories=new AllStoriesSample();
  assertThat(stories.getRootPackage(),is(""String_Node_Str""));
  assertThat(stories.getStoryPath(),is(""String_Node_Str""));
}"
86874,"@Test public void a_subset_of_the_stories_can_be_run_individually() throws Throwable {
  ThucydidesJUnitStories stories=new StoriesInTheSubsetFolderSample();
  stories.setSystemConfiguration(systemConfiguration);
  stories.configuredEmbedder().configuration().storyReporterBuilder().withReporters(printOutput);
  run(stories);
  List<TestOutcome> outcomes=loadTestOutcomes();
  assertThat(outcomes.size(),is(2));
}","@Test public void a_subset_of_the_stories_can_be_run_individually() throws Throwable {
  ThucydidesJUnitStories stories=new StoriesInTheSubsetFolderSample();
  stories.setSystemConfiguration(systemConfiguration);
  stories.configuredEmbedder().configuration().storyReporterBuilder().withReporters(printOutput);
  run(stories);
  List<TestOutcome> outcomes=loadTestOutcomes();
  assertThat(outcomes.size(),is(5));
}"
86875,"public void failed(String stepTitle,Throwable cause){
  StepEventBus.getEventBus().updateCurrentStepTitle(stepTitle);
  StepEventBus.getEventBus().stepFailed(new StepFailure(ExecutedStepDescription.withTitle(normalized(stepTitle)),cause));
}","public void failed(String stepTitle,Throwable cause){
  StepEventBus.getEventBus().updateCurrentStepTitle(stepTitle);
  StepEventBus.getEventBus().stepFailed(new StepFailure(ExecutedStepDescription.withTitle(normalized(stepTitle)),cause));
  ThucydidesWebDriverSupport.closeAllDrivers();
}"
86876,"@Override public Configuration configuration(){
  return ThucydidesJBehave.defaultConfiguration(getSystemConfiguration());
}","@Override public Configuration configuration(){
  if (configuration == null) {
    configuration=ThucydidesJBehave.defaultConfiguration(getSystemConfiguration());
  }
  return configuration;
}"
86877,"protected void useDriver(String driver){
  System.setProperty(""String_Node_Str"",driver);
  ThucydidesWebDriverSupport.initialize(driver);
}","protected void useDriver(String driver){
  getSystemConfiguration().setIfUndefined(ThucydidesSystemProperty.DRIVER.getPropertyName(),driver);
  ThucydidesWebDriverSupport.initialize(driver);
}"
86878,"public void pending(String stepTitle){
  StepEventBus.getEventBus().stepStarted(ExecutedStepDescription.withTitle(stepTitle));
  StepEventBus.getEventBus().stepPending();
}","public void pending(String stepTitle){
  System.out.println(""String_Node_Str"" + stepTitle);
  (new Exception()).printStackTrace();
  StepEventBus.getEventBus().stepStarted(ExecutedStepDescription.withTitle(stepTitle));
  StepEventBus.getEventBus().stepPending();
}"
86879,"public void notPerformed(String stepTitle){
  StepEventBus.getEventBus().stepStarted(ExecutedStepDescription.withTitle(stepTitle));
  StepEventBus.getEventBus().stepIgnored();
}","public void notPerformed(String stepTitle){
  System.out.println(""String_Node_Str"" + stepTitle);
  StepEventBus.getEventBus().stepStarted(ExecutedStepDescription.withTitle(stepTitle));
  StepEventBus.getEventBus().stepIgnored();
}"
86880,"private void generateReportsFor(final List<TestOutcome> testRunResults){
  reportService.generateReportsFor(testRunResults);
}","private void generateReportsFor(final List<BaseStepListener> baseStepListeners){
  for (  BaseStepListener listener : baseStepListeners) {
    getReportService().generateReportsFor(listener.getTestOutcomes());
  }
}"
86881,"public ThucydidesReporter(Configuration systemConfiguration){
  this.systemConfiguration=systemConfiguration;
}","public ThucydidesReporter(Configuration systemConfiguration){
  this.systemConfiguration=systemConfiguration;
  thucydidesListenersThreadLocal=new ThreadLocal<ThucydidesListeners>();
  reportServiceThreadLocal=new ThreadLocal<ReportService>();
  baseStepListeners=Lists.newArrayList();
}"
86882,"public void successful(String title){
  StepEventBus.getEventBus().updateCurrentStepTitle(title);
  StepEventBus.getEventBus().stepFinished();
}","public void successful(String title){
  System.out.println(""String_Node_Str"" + title);
  StepEventBus.getEventBus().updateCurrentStepTitle(title);
  StepEventBus.getEventBus().stepFinished();
}"
86883,"public void beforeStory(Story story,boolean b){
  String requestedDriver=getRequestedDriver(story.getMeta());
  if (StringUtils.isNotEmpty(requestedDriver)) {
    ThucydidesWebDriverSupport.initialize(requestedDriver);
  }
  String storyName=removeSuffixFrom(story.getName());
  String storyTitle=NameConverter.humanize(storyName);
  reportService=ThucydidesReports.getReportService(systemConfiguration);
  thucydidesListeners=ThucydidesReports.setupListeners(systemConfiguration).withDriver(ThucydidesWebDriverSupport.getDriver());
  StepEventBus.getEventBus().testSuiteStarted(net.thucydides.core.model.Story.withId(storyName,storyTitle));
  registerStoryIssues(story.getMeta());
  registerStoryFeaturesAndEpics(story.getMeta());
  registerStoryTags(story.getMeta());
}","public void beforeStory(Story story,boolean b){
  System.out.println(""String_Node_Str"" + story.getName() + ""String_Node_Str""+ Thread.currentThread());
  currentStory=story;
  if (!isFixture(story)) {
    String requestedDriver=getRequestedDriver(story.getMeta());
    if (StringUtils.isNotEmpty(requestedDriver)) {
      ThucydidesWebDriverSupport.initialize(requestedDriver);
    }
 else {
      ThucydidesWebDriverSupport.initialize();
    }
    getThucydidesListeners().withDriver(ThucydidesWebDriverSupport.getDriver());
    String storyName=removeSuffixFrom(story.getName());
    String storyTitle=NameConverter.humanize(storyName);
    StepEventBus.getEventBus().testSuiteStarted(net.thucydides.core.model.Story.withId(storyName,storyTitle));
    registerStoryIssues(story.getMeta());
    registerStoryFeaturesAndEpics(story.getMeta());
    registerStoryTags(story.getMeta());
  }
}"
86884,"public void failed(String stepTitle,Throwable cause){
  StepEventBus.getEventBus().updateCurrentStepTitle(stepTitle);
  StepEventBus.getEventBus().stepFailed(new StepFailure(ExecutedStepDescription.withTitle(stepTitle),cause));
}","public void failed(String stepTitle,Throwable cause){
  System.out.println(""String_Node_Str"" + stepTitle);
  StepEventBus.getEventBus().updateCurrentStepTitle(stepTitle);
  StepEventBus.getEventBus().stepFailed(new StepFailure(ExecutedStepDescription.withTitle(stepTitle),cause));
}"
86885,"public void afterScenario(){
  StepEventBus.getEventBus().testFinished();
}","public void afterScenario(){
  System.out.println(""String_Node_Str"" + currentStory.getName());
  StepEventBus.getEventBus().testFinished();
}"
86886,"public void storyCancelled(Story story,StoryDuration storyDuration){
}","public void storyCancelled(Story story,StoryDuration storyDuration){
  System.out.println(""String_Node_Str"" + story.getName());
}"
86887,"public void ignorable(String title){
  StepEventBus.getEventBus().updateCurrentStepTitle(title);
  StepEventBus.getEventBus().stepIgnored();
}","public void ignorable(String title){
  System.out.println(""String_Node_Str"" + title);
  StepEventBus.getEventBus().updateCurrentStepTitle(title);
  StepEventBus.getEventBus().stepIgnored();
}"
86888,"public void afterStory(boolean b){
  StepEventBus.getEventBus().testSuiteFinished();
  generateReportsFor(thucydidesListeners.getResults());
}","public void afterStory(boolean given){
  System.out.println(""String_Node_Str"" + currentStory.getName());
  if (isAfterStory(currentStory)) {
    generateReportsFor(baseStepListeners);
  }
 else   if (!isFixture(currentStory)) {
    StepEventBus.getEventBus().testSuiteFinished();
    clearListeners();
  }
}"
86889,"public APassingWebTestSampleWithASpecifiedBrowser(){
  findStoriesCalled(""String_Node_Str"");
  useDriver(""String_Node_Str"");
}","public APassingWebTestSampleWithASpecifiedBrowser(){
  findStoriesCalled(""String_Node_Str"");
  runThucydides().withDriver(""String_Node_Str"");
}"
86890,"@Test public void a_data_driven_test_should_produce_a_successful_result_if_all_rows_are_successful() throws Throwable {
  ThucydidesJUnitStories story=new AStorySample(""String_Node_Str"");
  story.setSystemConfiguration(systemConfiguration);
  story.configuredEmbedder().configuration().storyReporterBuilder().withReporters(printOutput);
  run(story);
  List<TestOutcome> outcomes=loadTestOutcomes();
  assertThat(outcomes.get(0).getResult(),is(TestResult.SUCCESS));
}","@Test public void a_data_driven_test_should_produce_a_successful_result_if_all_rows_are_successful() throws Throwable {
  ThucydidesJUnitStories story=new AStorySample(""String_Node_Str"");
  story.setSystemConfiguration(systemConfiguration);
  story.configuredEmbedder().configuration().storyReporterBuilder().withReporters(printOutput);
  run(story);
  List<TestOutcome> outcomes=loadTestOutcomes();
  assertThat(outcomes.get(0).getResult(),is(TestResult.SUCCESS));
  assertThat(outcomes.get(1).getResult(),is(TestResult.SUCCESS));
}"
86891,"@Test public void a_data_driven_test_should_produce_a_set_of_steps_per_line_of_data() throws Throwable {
  ThucydidesJUnitStories story=new AStorySample(""String_Node_Str"");
  story.setSystemConfiguration(systemConfiguration);
  story.configuredEmbedder().configuration().storyReporterBuilder().withReporters(printOutput);
  run(story);
  List<TestOutcome> outcomes=loadTestOutcomes();
  assertThat(outcomes.size(),is(1));
  assertThat(outcomes.get(0).getTestSteps().size(),is(9));
}","@Test public void a_data_driven_test_should_produce_a_set_of_steps_per_line_of_data() throws Throwable {
  ThucydidesJUnitStories story=new AStorySample(""String_Node_Str"");
  story.setSystemConfiguration(systemConfiguration);
  story.configuredEmbedder().configuration().storyReporterBuilder().withReporters(printOutput);
  run(story);
  List<TestOutcome> outcomes=loadTestOutcomes();
  assertThat(outcomes.size(),is(2));
  assertThat(outcomes.get(0).getTestSteps().size(),is(9));
}"
86892,"@Test public void web_tests_should_take_screenshots_for_multiple_tests() throws Throwable {
  ThucydidesJUnitStories story=new AStorySample(""String_Node_Str"");
  story.setSystemConfiguration(systemConfiguration);
  story.configuredEmbedder().configuration().storyReporterBuilder().withReporters(printOutput);
  run(story);
  List<TestOutcome> outcomes=loadTestOutcomes();
  assertThat(outcomes.get(0).getScreenshots().size(),greaterThan(0));
}","@Test public void web_tests_should_take_screenshots_for_multiple_tests() throws Throwable {
  ThucydidesJUnitStories story=new AStorySample(""String_Node_Str"");
  story.setSystemConfiguration(systemConfiguration);
  story.configuredEmbedder().configuration().storyReporterBuilder().withReporters(printOutput);
  run(story);
  List<TestOutcome> outcomes=loadTestOutcomes();
  assertThat(outcomes.get(0).getScreenshots().size(),greaterThan(0));
  assertThat(outcomes.get(1).getScreenshots().size(),greaterThan(0));
}"
86893,"/** 
 * Writes the new JPEG to the given output stream. The stream is not closed. The IPTC metadata are replaced if there were modified.
 * @param fos the output stream
 * @throws IOException if the image can't be written
 */
public void write(OutputStream fos) throws IOException {
  try {
    PhotoshopApp13Data data=m_image.getMetadata().getExtendedMetadata().getPhotoshopApp13Data();
    if (data != null) {
      replaceIPTCMetadata(data);
    }
    String xmp=m_image.getMetadata().getXmp();
    if (xmp != null) {
      List newPieces=new ArrayList();
      m_pieces=removeXmpSegments(m_pieces);
      int segmentSize=Math.min(xmp.getBytes().length,MAX_SEGMENT_SIZE);
      byte segmentData[]=writeXmpSegment(m_image.getMetadata().getXmp().getBytes(""String_Node_Str""),0,segmentSize);
      newPieces.add(new JFIFPieceSegment(JPEG_APP1_Marker,segmentData));
      m_pieces=insertAfterLastAppSegments(m_pieces,newPieces);
    }
    writeSegments(fos,(List<JFIFPiece>)m_pieces);
  }
 catch (  ImageWriteException e) {
    throw new IOException(e.getMessage(),e);
  }
}","/** 
 * Writes the new JPEG to the given output stream. The stream is not closed. The IPTC metadata are replaced if there were modified.
 * @param fos the output stream
 * @throws IOException if the image can't be written
 */
public void write(OutputStream fos) throws IOException {
  try {
    PhotoshopApp13Data data=m_image.getMetadata().getExtendedMetadata().getPhotoshopApp13Data();
    if (data != null) {
      replaceIPTCMetadata(data);
    }
    String xmp=m_image.getMetadata().getXmp();
    if (xmp != null) {
      List newPieces=new ArrayList();
      m_pieces=removeXmpSegments(m_pieces);
      int segmentSize=Math.min(xmp.getBytes().length,MAX_SEGMENT_SIZE);
      byte segmentData[]=writeXmpSegment(m_image.getMetadata().getXmp().getBytes(),0,segmentSize);
      newPieces.add(new JFIFPieceSegment(JPEG_APP1_Marker,segmentData));
      m_pieces=insertAfterLastAppSegments(m_pieces,newPieces);
    }
    writeSegments(fos,(List<JFIFPiece>)m_pieces);
  }
 catch (  ImageWriteException e) {
    throw new IOException(e.getMessage(),e);
  }
}"
86894,"/** 
 * Reads a   {@link BufferedImage} from the given byte array.
 * @param bytes the bytes
 * @return the {@link BufferedImage}
 * @throws IOException if the byte array is <code>null</code>,or does not depict an image
 */
public BufferedImage read(byte[] bytes) throws IOException {
  if (bytes == null) {
    throw new IOException(""String_Node_Str"" + ""String_Node_Str"");
  }
  InputStream is=new ByteArrayInputStream(bytes);
  BufferedImage img=ImageIO.read(is);
  closeQuietly(is);
  return img;
}","/** 
 * Reads a   {@link BufferedImage} from the given byte array.
 * @param bytes the bytes
 * @return the {@link BufferedImage}
 * @throws IOException if the byte array is <code>null</code>,or does not depict an image
 */
public BufferedImage read(byte[] bytes) throws IOException {
  if (bytes == null) {
    throw new IOException(""String_Node_Str"" + ""String_Node_Str"");
  }
  InputStream is=new ByteArrayInputStream(bytes);
  try {
    BufferedImage img=Sanselan.getBufferedImage(bytes);
    return img;
  }
 catch (  ImageReadException e) {
    throw new IOException(""String_Node_Str"",e);
  }
 finally {
    closeQuietly(is);
  }
}"
86895,"public static void start(@NonNull Activity activity){
  final boolean shouldStart=inc();
  if (shouldStart && initialized) {
    Log.i(TAG,""String_Node_Str"");
    handler.removeCallbacks(stopRunnable);
  }
 else   if (shouldStart) {
    initialized=true;
    final long startTime=System.currentTimeMillis();
    Log.i(TAG,""String_Node_Str"");
    final Context appContext=activity.getApplicationContext();
    Log.i(TAG,""String_Node_Str"");
    if (bluetooth.preferences.preferenceEnabled) {
      bluetooth.start(activity);
    }
    Log.i(TAG,""String_Node_Str"");
    logger.start(appContext);
    Log.i(TAG,""String_Node_Str"");
    if (ActivityCompat.checkSelfPermission(appContext,Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
      location.start(appContext);
    }
 else {
      final String[] permissions={Manifest.permission.ACCESS_FINE_LOCATION};
      ActivityCompat.requestPermissions(activity,permissions,BaseActivity.RC_LOCATION);
    }
    Log.i(TAG,""String_Node_Str"");
    sensors.start(appContext);
    Log.i(TAG,""String_Node_Str"");
    alti.start(appContext);
    Log.i(TAG,""String_Node_Str"");
    flightComputer.start(appContext);
    if (ttsLoaded) {
      Log.i(TAG,""String_Node_Str"");
      audible.start(appContext);
    }
 else {
      Log.i(TAG,""String_Node_Str"");
      new CheckTextToSpeechTask(activity).execute();
    }
    Log.i(TAG,""String_Node_Str"");
    notifications.start(appContext);
    Log.i(TAG,""String_Node_Str"");
    cloud.start(appContext);
    Log.i(TAG,""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  }
}","public static void start(@NonNull Activity activity){
  final boolean shouldStart=inc();
  if (shouldStart && initialized) {
    Log.i(TAG,""String_Node_Str"");
    handler.removeCallbacks(stopRunnable);
  }
 else   if (shouldStart) {
    initialized=true;
    final long startTime=System.currentTimeMillis();
    Log.i(TAG,""String_Node_Str"");
    final Context appContext=activity.getApplicationContext();
    Log.i(TAG,""String_Node_Str"");
    if (bluetooth.preferences.preferenceEnabled) {
      bluetooth.start(activity);
    }
    Log.i(TAG,""String_Node_Str"");
    trackStore.start(appContext);
    Log.i(TAG,""String_Node_Str"");
    logger.start(appContext);
    Log.i(TAG,""String_Node_Str"");
    if (ActivityCompat.checkSelfPermission(appContext,Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {
      location.start(appContext);
    }
 else {
      final String[] permissions={Manifest.permission.ACCESS_FINE_LOCATION};
      ActivityCompat.requestPermissions(activity,permissions,BaseActivity.RC_LOCATION);
    }
    Log.i(TAG,""String_Node_Str"");
    sensors.start(appContext);
    Log.i(TAG,""String_Node_Str"");
    alti.start(appContext);
    Log.i(TAG,""String_Node_Str"");
    flightComputer.start(appContext);
    if (ttsLoaded) {
      Log.i(TAG,""String_Node_Str"");
      audible.start(appContext);
    }
 else {
      Log.i(TAG,""String_Node_Str"");
      new CheckTextToSpeechTask(activity).execute();
    }
    Log.i(TAG,""String_Node_Str"");
    notifications.start(appContext);
    Log.i(TAG,""String_Node_Str"");
    cloud.start(appContext);
    Log.i(TAG,""String_Node_Str"" + (System.currentTimeMillis() - startTime) + ""String_Node_Str"");
  }
}"
86896,"/** 
 * Stop services IF nothing is using them
 */
private static synchronized void stopIfIdle(){
  if (initialized && startCount == 0) {
    if (!logger.isLogging() && !audible.isEnabled()) {
      Log.i(TAG,""String_Node_Str"");
      cloud.stop();
      notifications.stop();
      audible.stop();
      flightComputer.stop();
      alti.stop();
      sensors.stop();
      location.stop();
      logger.stop();
      bluetooth.stop();
      initialized=false;
    }
 else {
      if (logger.isLogging()) {
        Log.w(TAG,""String_Node_Str"");
      }
      if (audible.isEnabled()) {
        Log.w(TAG,""String_Node_Str"");
      }
      handler.postDelayed(stopRunnable,shutdownDelay);
    }
  }
}","/** 
 * Stop services IF nothing is using them
 */
private static synchronized void stopIfIdle(){
  if (initialized && startCount == 0) {
    if (!logger.isLogging() && !audible.isEnabled()) {
      Log.i(TAG,""String_Node_Str"");
      cloud.stop();
      notifications.stop();
      audible.stop();
      flightComputer.stop();
      alti.stop();
      sensors.stop();
      location.stop();
      logger.stop();
      trackStore.stop();
      bluetooth.stop();
      initialized=false;
    }
 else {
      if (logger.isLogging()) {
        Log.w(TAG,""String_Node_Str"");
      }
      if (audible.isEnabled()) {
        Log.w(TAG,""String_Node_Str"");
      }
      handler.postDelayed(stopRunnable,shutdownDelay);
    }
  }
}"
86897,"private void upload(@NonNull TrackFile trackFile){
  Services.trackStore.setUploading(trackFile);
  new Thread(new UploadTask(context,trackFile)).start();
}","private void upload(@NonNull TrackFile trackFile){
  final boolean networkAvailable=Network.isAvailable(context);
  if (!networkAvailable) {
    Log.w(TAG,""String_Node_Str"");
    return;
  }
  uploading=true;
  uploadingTrack=trackFile;
  Services.trackStore.setUploading(trackFile);
  new Thread(new UploadTask(context,trackFile)).start();
}"
86898,"@Subscribe(threadMode=ThreadMode.ASYNC) public void onLoggingEvent(@NonNull LoggingEvent event){
  if (BaseActivity.currentAuthState == AuthEvent.SIGNED_IN && !event.started) {
    Log.i(TAG,""String_Node_Str"" + event.trackFile);
    Exceptions.log(""String_Node_Str"" + event.trackFile);
    upload(event.trackFile);
  }
}","@Subscribe(threadMode=ThreadMode.ASYNC) public void onLoggingEvent(@NonNull LoggingEvent event){
  if (BaseActivity.currentAuthState == AuthEvent.SIGNED_IN && !event.started) {
    if (!uploading) {
      Log.i(TAG,""String_Node_Str"" + event.trackFile);
      upload(event.trackFile);
    }
  }
}"
86899,"private void uploadAll(){
  if (BaseActivity.currentAuthState == AuthEvent.SIGNED_IN) {
    for (    TrackFile trackFile : Services.trackStore.getLocalTracks()) {
      Log.i(TAG,""String_Node_Str"" + trackFile);
      upload(trackFile);
    }
  }
}","/** 
 * Upload the first track waiting to upload
 */
private void uploadAll(){
  if (BaseActivity.currentAuthState != AuthEvent.SIGNED_IN) {
    return;
  }
  if (!uploading) {
    final List<TrackFile> tracks=Services.trackStore.getLocalTracks();
    if (!tracks.isEmpty()) {
      TrackFile firstTrackFile=tracks.get(0);
      Log.i(TAG,""String_Node_Str"" + firstTrackFile);
      upload(firstTrackFile);
    }
  }
}"
86900,"@Subscribe(threadMode=ThreadMode.MAIN) public void onUploadSuccess(@NonNull SyncEvent.UploadSuccess event){
  Services.trackStore.setUploadSuccess(event.trackFile,event.cloudData);
}","@Subscribe(threadMode=ThreadMode.ASYNC) public void onUploadSuccess(@NonNull SyncEvent.UploadSuccess event){
  Services.trackStore.setUploadSuccess(event.trackFile,event.cloudData);
  if (event.trackFile == uploadingTrack) {
    uploading=false;
    uploadingTrack=null;
    uploadAll();
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
}"
86901,"@Subscribe(threadMode=ThreadMode.MAIN) public void onUploadFailure(@NonNull SyncEvent.UploadFailure event){
  Services.trackStore.setNotUploaded(event.trackFile);
}","@Subscribe(threadMode=ThreadMode.ASYNC) public void onUploadFailure(@NonNull SyncEvent.UploadFailure event){
  Services.trackStore.setNotUploaded(event.trackFile);
  if (event.trackFile == uploadingTrack) {
    uploading=false;
    uploadingTrack=null;
  }
 else {
    Log.e(TAG,""String_Node_Str"");
  }
}"
86902,"@Override public void run(){
  Log.i(TAG,""String_Node_Str"" + trackFile);
  final boolean networkAvailable=Network.isAvailable(context);
  try {
    final String authToken=AuthToken.getAuthToken(context);
    final CloudData trackData=postTrack(trackFile,authToken);
    archive(trackData);
    Services.cloud.tracks.addTrackData(trackData);
    Services.cloud.listing.listAsync(authToken,true);
    Log.i(TAG,""String_Node_Str"" + trackData.track_id);
    EventBus.getDefault().post(new SyncEvent.UploadSuccess(trackFile,trackData));
  }
 catch (  AuthException e) {
    Log.e(TAG,""String_Node_Str"",e);
    Exceptions.report(e);
    EventBus.getDefault().post(new SyncEvent.UploadFailure(trackFile,""String_Node_Str""));
  }
catch (  IOException e) {
    if (networkAvailable) {
      Log.e(TAG,""String_Node_Str"",e);
      Exceptions.report(e);
    }
 else {
      Log.w(TAG,""String_Node_Str"",e);
    }
    EventBus.getDefault().post(new SyncEvent.UploadFailure(trackFile,e.getMessage()));
  }
catch (  JSONException e) {
    Log.e(TAG,""String_Node_Str"",e);
    Exceptions.report(e);
    EventBus.getDefault().post(new SyncEvent.UploadFailure(trackFile,""String_Node_Str""));
  }
}","@Override public void run(){
  Log.i(TAG,""String_Node_Str"" + trackFile);
  final boolean networkAvailable=Network.isAvailable(context);
  try {
    final String authToken=AuthToken.getAuthToken(context);
    final CloudData trackData=postTrack(trackFile,authToken);
    archive(trackData);
    Services.cloud.tracks.addTrackData(trackData);
    Services.cloud.listing.listAsync(authToken,true);
    Log.i(TAG,""String_Node_Str"" + trackData.track_id);
    EventBus.getDefault().post(new SyncEvent.UploadSuccess(trackFile,trackData));
  }
 catch (  AuthException e) {
    if (networkAvailable) {
      Log.e(TAG,""String_Node_Str"",e);
      Exceptions.report(e);
    }
 else {
      Log.w(TAG,""String_Node_Str"",e);
    }
    EventBus.getDefault().post(new SyncEvent.UploadFailure(trackFile,""String_Node_Str""));
  }
catch (  IOException e) {
    if (networkAvailable) {
      Log.e(TAG,""String_Node_Str"",e);
      Exceptions.report(e);
    }
 else {
      Log.w(TAG,""String_Node_Str"",e);
    }
    EventBus.getDefault().post(new SyncEvent.UploadFailure(trackFile,e.getMessage()));
  }
catch (  JSONException e) {
    Log.e(TAG,""String_Node_Str"",e);
    Exceptions.report(e);
    EventBus.getDefault().post(new SyncEvent.UploadFailure(trackFile,""String_Node_Str""));
  }
}"
86903,"@NonNull static List<TrackFile> getTracks(@NonNull Context context){
  final List<TrackFile> tracks=new ArrayList<>();
  final File logDir=getTrackDirectory(context);
  if (logDir != null) {
    final File[] files=logDir.listFiles();
    for (    File file : files) {
      final String filename=file.getName();
      final TrackFile trackFile=new TrackFile(file);
      final boolean matchesFilenamePattern=filename.startsWith(""String_Node_Str"") && filename.endsWith(""String_Node_Str"");
      if (matchesFilenamePattern) {
        tracks.add(trackFile);
      }
    }
    Collections.sort(tracks,(track1,track2) -> -track1.getName().compareTo(track2.getName()));
    return tracks;
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    return tracks;
  }
}","@NonNull static List<TrackFile> getTracks(@NonNull Context context){
  final List<TrackFile> tracks=new ArrayList<>();
  final File logDir=getTrackDirectory(context);
  if (logDir != null) {
    final File[] files=logDir.listFiles();
    for (    File file : files) {
      final String filename=file.getName();
      final TrackFile trackFile=new TrackFile(file);
      final boolean matchesFilenamePattern=filename.startsWith(""String_Node_Str"") && filename.endsWith(""String_Node_Str"");
      if (matchesFilenamePattern) {
        tracks.add(trackFile);
      }
    }
    return tracks;
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    return tracks;
  }
}"
86904,"/** 
 * Return non-uploaded and non-recording tracks. In other words, the things we should list in track listing view.
 */
public List<TrackFile> getLocalTracks(){
  final List<TrackFile> tracks=new ArrayList<>();
  for (  TrackState state : trackState.values()) {
    if (state instanceof TrackState.TrackNotUploaded) {
      final TrackFile trackFile=((TrackState.TrackNotUploaded)state).trackFile;
      tracks.add(trackFile);
    }
 else     if (state instanceof TrackState.TrackUploading) {
      final TrackFile trackFile=((TrackState.TrackUploading)state).trackFile;
      tracks.add(trackFile);
    }
  }
  return tracks;
}","/** 
 * Return non-uploaded and non-recording tracks. In other words, the things we should list in track listing view.
 */
public List<TrackFile> getLocalTracks(){
  if (!initialized) {
    Log.e(TAG,""String_Node_Str"");
  }
  final List<TrackFile> tracks=new ArrayList<>();
  for (  TrackState state : trackState.values()) {
    if (state instanceof TrackState.TrackNotUploaded) {
      final TrackFile trackFile=((TrackState.TrackNotUploaded)state).trackFile;
      tracks.add(trackFile);
    }
 else     if (state instanceof TrackState.TrackUploading) {
      final TrackFile trackFile=((TrackState.TrackUploading)state).trackFile;
      tracks.add(trackFile);
    }
  }
  Collections.sort(tracks,(track1,track2) -> -track1.getName().compareTo(track2.getName()));
  return tracks;
}"
86905,"public void setUploading(@NonNull TrackFile trackFile){
  final String filename=trackFile.file.getName();
  final TrackState state=trackState.get(filename);
  if (state != null && state instanceof TrackState.TrackNotUploaded) {
    trackState.put(filename,new TrackState.TrackUploading(trackFile));
  }
 else {
    Log.e(TAG,""String_Node_Str"" + state + ""String_Node_Str"");
  }
}","public void setUploading(@NonNull TrackFile trackFile){
  final TrackState state=trackState.get(trackFile);
  if (state != null && state instanceof TrackState.TrackNotUploaded) {
    trackState.put(trackFile,new TrackState.TrackUploading(trackFile));
  }
 else {
    Log.e(TAG,""String_Node_Str"" + state + ""String_Node_Str"");
  }
}"
86906,"public void setUploadSuccess(@NonNull TrackFile trackFile,@NonNull CloudData cloudData){
  final String filename=trackFile.file.getName();
  trackState.put(filename,new TrackState.TrackUploaded(cloudData));
}","public void setUploadSuccess(@NonNull TrackFile trackFile,@NonNull CloudData cloudData){
  trackState.put(trackFile,new TrackState.TrackUploaded(cloudData));
}"
86907,"public int getUploadProgress(@NonNull TrackFile trackFile){
  final String filename=trackFile.file.getName();
  final TrackState state=trackState.get(filename);
  if (state != null && state instanceof TrackState.TrackUploading) {
    return ((TrackState.TrackUploading)state).progress;
  }
 else {
    Log.e(TAG,""String_Node_Str"" + state);
    return 0;
  }
}","public int getUploadProgress(@NonNull TrackFile trackFile){
  final TrackState state=trackState.get(trackFile);
  if (state != null && state instanceof TrackState.TrackUploading) {
    return ((TrackState.TrackUploading)state).progress;
  }
 else {
    Log.e(TAG,""String_Node_Str"" + state);
    return 0;
  }
}"
86908,"void setRecording(@NonNull TrackFile trackFile){
  final String filename=trackFile.file.getName();
  trackState.put(filename,new TrackState.TrackRecording());
}","void setRecording(@NonNull TrackFile trackFile){
  trackState.put(trackFile,new TrackState.TrackRecording());
}"
86909,"@Nullable public CloudData getCloudData(@NonNull TrackFile trackFile){
  final String filename=trackFile.file.getName();
  final TrackState state=trackState.get(filename);
  if (state != null && state instanceof TrackState.TrackUploaded) {
    return ((TrackState.TrackUploaded)state).cloudData;
  }
 else {
    return null;
  }
}","@Nullable public CloudData getCloudData(@NonNull TrackFile trackFile){
  final TrackState state=trackState.get(trackFile);
  if (state != null && state instanceof TrackState.TrackUploaded) {
    return ((TrackState.TrackUploaded)state).cloudData;
  }
 else {
    return null;
  }
}"
86910,"public void setUploadProgress(@NonNull TrackFile trackFile,int bytesCopied){
  final String filename=trackFile.file.getName();
  final TrackState state=trackState.get(filename);
  if (state != null && state instanceof TrackState.TrackUploading) {
    ((TrackState.TrackUploading)state).progress=bytesCopied;
  }
 else {
    Log.e(TAG,""String_Node_Str"" + state);
  }
}","public void setUploadProgress(@NonNull TrackFile trackFile,int bytesCopied){
  final TrackState state=trackState.get(trackFile);
  if (state != null && state instanceof TrackState.TrackUploading) {
    ((TrackState.TrackUploading)state).progress=bytesCopied;
  }
 else {
    Log.e(TAG,""String_Node_Str"" + state);
  }
}"
86911,"public void start(@NonNull Context context){
  if (!initialized) {
    initialized=true;
    final List<TrackFile> trackFiles=TrackFiles.getTracks(context);
    for (    TrackFile trackFile : trackFiles) {
      trackState.put(trackFile.getName(),new TrackState.TrackNotUploaded(trackFile));
    }
  }
 else {
  }
}","public void start(@NonNull Context context){
  if (!initialized) {
    initialized=true;
    final List<TrackFile> trackFiles=TrackFiles.getTracks(context);
    for (    TrackFile trackFile : trackFiles) {
      trackState.put(trackFile,new TrackState.TrackNotUploaded(trackFile));
    }
  }
 else {
  }
}"
86912,"public void setNotUploaded(@NonNull TrackFile trackFile){
  final String filename=trackFile.file.getName();
  trackState.put(filename,new TrackState.TrackNotUploaded(trackFile));
}","public void setNotUploaded(@NonNull TrackFile trackFile){
  trackState.put(trackFile,new TrackState.TrackNotUploaded(trackFile));
}"
86913,"public boolean isUploading(@NonNull TrackFile trackFile){
  final String filename=trackFile.file.getName();
  final TrackState state=trackState.get(filename);
  return state != null && state instanceof TrackState.TrackUploading;
}","public boolean isUploading(@NonNull TrackFile trackFile){
  final TrackState state=trackState.get(trackFile);
  return state != null && state instanceof TrackState.TrackUploading;
}"
86914,"public void upload(TrackFile trackFile,Callback<CloudData> cb){
  new UploadTask(context,trackFile,cb).execute();
}","public void upload(TrackFile trackFile,Callback<CloudData> cb){
  FirebaseCrash.log(""String_Node_Str"" + trackFile.getName());
  new UploadTask(context,trackFile,cb).execute();
}"
86915,"@Subscribe(threadMode=ThreadMode.ASYNC) public void onLoggingEvent(LoggingEvent event){
  if (BaseActivity.currentState == AuthEvent.SIGNED_IN && autosyncEnabled && !event.started) {
    Log.i(TAG,""String_Node_Str"" + event.trackFile);
    upload(event.trackFile,null);
  }
}","@Subscribe(threadMode=ThreadMode.ASYNC) public void onLoggingEvent(LoggingEvent event){
  if (BaseActivity.currentState == AuthEvent.SIGNED_IN && autosyncEnabled && !event.started) {
    Log.i(TAG,""String_Node_Str"" + event.trackFile);
    FirebaseCrash.log(""String_Node_Str"" + event.trackFile.getName());
    new UploadTask(context,event.trackFile,null).execute();
  }
}"
86916,"/** 
 * Move the track file to synced directory
 */
public void archive(){
  final File syncedDir=new File(file.getParentFile(),""String_Node_Str"");
  if (!syncedDir.exists()) {
    syncedDir.mkdir();
  }
  final File destination=new File(syncedDir,file.getName());
  file.renameTo(destination);
}","/** 
 * Move the track file to synced directory
 */
public void archive(){
  Log.i(TAG,""String_Node_Str"" + file.getName());
  final File syncedDir=new File(file.getParentFile(),""String_Node_Str"");
  if (!syncedDir.exists()) {
    syncedDir.mkdir();
  }
  final File destination=new File(syncedDir,file.getName());
  if (file.renameTo(destination)) {
    file=destination;
  }
}"
86917,"private void handleSignInResult(GoogleSignInResult result){
  Log.d(TAG,""String_Node_Str"" + result.getStatus());
  if (result.isSuccess()) {
    account=result.getSignInAccount();
    if (account != null) {
      Log.i(TAG,""String_Node_Str"" + account.getDisplayName());
      BaselineCloud.listAsync(account.getIdToken(),false);
    }
    updateState(AuthEvent.SIGNED_IN);
  }
 else {
    Log.w(TAG,""String_Node_Str"");
    BaselineCloud.signOut();
    updateState(AuthEvent.SIGNED_OUT);
  }
  userClickedSignIn=false;
}","private void handleSignInResult(GoogleSignInResult result){
  Log.d(TAG,""String_Node_Str"" + result.getStatus());
  if (result.isSuccess()) {
    account=result.getSignInAccount();
    if (account != null) {
      Log.i(TAG,""String_Node_Str"" + account.getDisplayName());
      BaselineCloud.listAsync(account.getIdToken(),false);
    }
    updateState(AuthEvent.SIGNED_IN);
  }
 else {
    Log.w(TAG,""String_Node_Str"");
    signedOut();
  }
  userClickedSignIn=false;
}"
86918,"@Override protected void onStart(){
  super.onStart();
  Services.start(this);
  final OptionalPendingResult<GoogleSignInResult> opr=Auth.GoogleSignInApi.silentSignIn(mGoogleApiClient);
  if (opr.isDone()) {
    Log.d(TAG,""String_Node_Str"");
    final GoogleSignInResult result=opr.get();
    handleSignInResult(result);
  }
 else {
    opr.setResultCallback(new ResultCallback<GoogleSignInResult>(){
      @Override public void onResult(      @NonNull GoogleSignInResult googleSignInResult){
        handleSignInResult(googleSignInResult);
      }
    }
);
  }
  signInPanel=findViewById(R.id.sign_in_panel);
  signInSpinner=findViewById(R.id.sign_in_spinner);
  final View signInButton=findViewById(R.id.sign_in_button);
  if (signInButton != null) {
    signInButton.setOnClickListener(signInClickListener);
  }
  if (signInPanel != null) {
    if (currentState == AuthEvent.SIGNED_OUT) {
      signInPanel.setVisibility(View.VISIBLE);
    }
 else {
      signInPanel.setVisibility(View.GONE);
    }
  }
}","@Override protected void onStart(){
  super.onStart();
  Services.start(this);
  Auth.GoogleSignInApi.silentSignIn(mGoogleApiClient).setResultCallback(new ResultCallback<GoogleSignInResult>(){
    @Override public void onResult(    @NonNull GoogleSignInResult googleSignInResult){
      handleSignInResult(googleSignInResult);
    }
  }
);
  signInPanel=findViewById(R.id.sign_in_panel);
  signInSpinner=findViewById(R.id.sign_in_spinner);
  final View signInButton=findViewById(R.id.sign_in_button);
  if (signInButton != null) {
    signInButton.setOnClickListener(signInClickListener);
  }
  if (signInPanel != null) {
    if (currentState == AuthEvent.SIGNED_OUT) {
      signInPanel.setVisibility(View.VISIBLE);
    }
 else {
      signInPanel.setVisibility(View.GONE);
    }
  }
}"
86919,"/** 
 * Get google auth token and return asynchronously via callback 
 */
public void getAuthToken(final Callback<String> callback){
  if (account != null) {
    final String token=account.getIdToken();
    if (token != null) {
      Log.i(TAG,""String_Node_Str"" + token);
      if (callback != null) {
        callback.apply(token);
      }
    }
 else {
      if (callback != null) {
        callback.error(""String_Node_Str"");
      }
    }
  }
 else {
    callback.error(""String_Node_Str"");
  }
}","/** 
 * Get google auth token and return asynchronously via callback 
 */
public void getAuthToken(@NonNull Callback<String> callback){
  if (account != null) {
    final String token=account.getIdToken();
    if (token != null) {
      Log.i(TAG,""String_Node_Str"" + token);
      callback.apply(token);
    }
 else {
      callback.error(""String_Node_Str"");
    }
  }
 else {
    callback.error(""String_Node_Str"");
  }
}"
86920,"protected void clickSignOut(){
  Log.i(TAG,""String_Node_Str"");
  Auth.GoogleSignInApi.signOut(mGoogleApiClient).setResultCallback(new ResultCallback<Status>(){
    @Override public void onResult(    @NonNull Status status){
      Log.d(TAG,""String_Node_Str"" + status);
      Toast.makeText(BaseActivity.this,R.string.signout_success,Toast.LENGTH_LONG).show();
      account=null;
      BaselineCloud.signOut();
      updateState(AuthEvent.SIGNED_OUT);
    }
  }
);
}","protected void clickSignOut(){
  Log.i(TAG,""String_Node_Str"");
  Auth.GoogleSignInApi.signOut(mGoogleApiClient).setResultCallback(new ResultCallback<Status>(){
    @Override public void onResult(    @NonNull Status status){
      Log.d(TAG,""String_Node_Str"" + status);
      Toast.makeText(BaseActivity.this,R.string.signout_success,Toast.LENGTH_LONG).show();
      signedOut();
    }
  }
);
}"
86921,"@Override public void onResult(@NonNull Status status){
  Log.d(TAG,""String_Node_Str"" + status);
  Toast.makeText(BaseActivity.this,R.string.signout_success,Toast.LENGTH_LONG).show();
  account=null;
  BaselineCloud.signOut();
  updateState(AuthEvent.SIGNED_OUT);
}","@Override public void onResult(@NonNull Status status){
  Log.d(TAG,""String_Node_Str"" + status);
  Toast.makeText(BaseActivity.this,R.string.signout_success,Toast.LENGTH_LONG).show();
  signedOut();
}"
86922,"public void clickRecord(View v){
  if (!Services.logger.isLogging()) {
    firebaseAnalytics.logEvent(""String_Node_Str"",null);
    Services.logger.startLogging();
  }
 else {
    firebaseAnalytics.logEvent(""String_Node_Str"",null);
    final TrackFile trackList=Services.logger.stopLogging();
    if (trackList != null) {
      uploadToCloud(trackList);
    }
 else {
      Log.e(TAG,""String_Node_Str"");
    }
  }
}","public void clickRecord(View v){
  if (!Services.logger.isLogging()) {
    firebaseAnalytics.logEvent(""String_Node_Str"",null);
    Services.logger.startLogging();
  }
 else {
    firebaseAnalytics.logEvent(""String_Node_Str"",null);
    final TrackFile trackFile=Services.logger.stopLogging();
    if (trackFile != null && trackFile.file.exists()) {
      uploadToCloud(trackFile);
    }
 else {
      Log.e(TAG,""String_Node_Str"" + trackFile);
      FirebaseCrash.report(new FileNotFoundException(""String_Node_Str"" + trackFile));
    }
  }
}"
86923,"@Override public void run(){
  if (initialized && startCount == 0) {
    if (!logger.isLogging() && !audible.isEnabled()) {
      Log.i(TAG,""String_Node_Str"");
      notifications.stop();
      audible.stop();
      flightMode.stop();
      alti.stop();
      sensors.stop();
      location.stop();
      bluetooth.stop();
      initialized=false;
    }
 else {
      if (logger.isLogging()) {
        Log.w(TAG,""String_Node_Str"");
      }
      if (audible.isEnabled()) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
}","@Override public void run(){
  if (initialized && startCount == 0) {
    if (!logger.isLogging() && !audible.isEnabled()) {
      Log.i(TAG,""String_Node_Str"");
      notifications.stop();
      audible.stop();
      flightMode.stop();
      alti.stop();
      sensors.stop();
      location.stop();
      logger.stop();
      bluetooth.stop();
      initialized=false;
    }
 else {
      if (logger.isLogging()) {
        Log.w(TAG,""String_Node_Str"");
      }
      if (audible.isEnabled()) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
}"
86924,"@Override public boolean onPreferenceClick(Preference preference){
  if (preference.getKey().equals(""String_Node_Str"")) {
    firebaseAnalytics.logEvent(""String_Node_Str"",null);
    startActivity(new Intent(getActivity(),SensorActivity.class));
  }
 else   if (preference.getKey().equals(""String_Node_Str"")) {
    final SettingsActivity activity=(SettingsActivity)getActivity();
    if (activity.isSignedIn()) {
      activity.clickSignOut();
    }
 else {
      activity.clickSignIn();
    }
  }
  return false;
}","@Override public boolean onPreferenceClick(Preference preference){
  if (preference.getKey().equals(""String_Node_Str"")) {
    firebaseAnalytics.logEvent(""String_Node_Str"",null);
    startActivity(new Intent(getActivity(),SensorActivity.class));
  }
 else   if (preference.getKey().equals(""String_Node_Str"")) {
    final BaseActivity activity=(BaseActivity)getActivity();
    if (activity.isSignedIn()) {
      activity.clickSignOut();
    }
 else {
      activity.clickSignIn();
    }
  }
  return false;
}"
86925,"public TrackAdapter(Context context,List<TrackFile> tracks){
  this.tracks=tracks;
  inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  items=populateItems(tracks);
}","TrackAdapter(Context context,List<TrackFile> tracks){
  this.tracks=tracks;
  inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  items=populateItems(tracks);
}"
86926,"@Override public int compare(TrackFile track1,TrackFile track2){
  return -track1.getDate().compareTo(track2.getDate());
}","@Override public int compare(TrackFile track1,TrackFile track2){
  return -track1.getName().compareTo(track2.getName());
}"
86927,"public static synchronized List<TrackFile> getTracks(@NonNull Context context){
  final List<TrackFile> jumps=new ArrayList<>();
  final File logDir=getTrackDirectory(context);
  if (logDir != null) {
    final File[] files=logDir.listFiles();
    for (    File file : files) {
      if (!file.getName().equals(syncedDirectoryName)) {
        jumps.add(new TrackFile(file));
      }
    }
    Collections.sort(jumps,new Comparator<TrackFile>(){
      @Override public int compare(      TrackFile track1,      TrackFile track2){
        return -track1.getDate().compareTo(track2.getDate());
      }
    }
);
    return jumps;
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    return jumps;
  }
}","public static synchronized List<TrackFile> getTracks(@NonNull Context context){
  final List<TrackFile> tracks=new ArrayList<>();
  final File logDir=getTrackDirectory(context);
  if (logDir != null) {
    final File[] files=logDir.listFiles();
    for (    File file : files) {
      final String filename=file.getName();
      if (filename.startsWith(""String_Node_Str"") && filename.endsWith(""String_Node_Str"")) {
        tracks.add(new TrackFile(file));
      }
    }
    Collections.sort(tracks,new Comparator<TrackFile>(){
      @Override public int compare(      TrackFile track1,      TrackFile track2){
        return -track1.getName().compareTo(track2.getName());
      }
    }
);
    return tracks;
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    return tracks;
  }
}"
86928,"private void updateViews(){
  if (Convert.metric) {
    metricPreference.setSummary(""String_Node_Str"");
  }
 else {
    metricPreference.setSummary(""String_Node_Str"");
  }
  if (BluetoothService.preferenceEnabled) {
    bluetoothPreference.setSummary(BluetoothService.getStatusMessage());
  }
 else {
    bluetoothPreference.setSummary(R.string.pref_bluetooth_disabled);
    bluetoothDevicePreference.setEnabled(false);
  }
  if (BluetoothService.preferenceDeviceName != null) {
    bluetoothDevicePreference.setSummary(BluetoothService.preferenceDeviceName);
  }
 else   if (BluetoothService.preferenceDeviceId != null) {
    bluetoothDevicePreference.setSummary(BluetoothService.preferenceDeviceId);
  }
 else {
    bluetoothDevicePreference.setSummary(R.string.pref_bluetooth_device_description);
  }
  final SettingsActivity activity=(SettingsActivity)getActivity();
  if (activity.isSignedIn()) {
    signInPreference.setTitle(R.string.pref_sign_out);
    final String name=activity.getDisplayName();
    signInPreference.setSummary(getString(R.string.pref_sign_out_description) + ""String_Node_Str"" + name);
  }
 else {
    signInPreference.setTitle(R.string.pref_sign_in);
    signInPreference.setSummary(R.string.pref_sign_in_description);
  }
}","private void updateViews(){
  if (Convert.metric) {
    metricPreference.setSummary(""String_Node_Str"");
  }
 else {
    metricPreference.setSummary(""String_Node_Str"");
  }
  if (BluetoothService.preferenceEnabled) {
    bluetoothPreference.setSummary(BluetoothService.getStatusMessage());
    bluetoothDevicePreference.setEnabled(true);
  }
 else {
    bluetoothPreference.setSummary(R.string.pref_bluetooth_disabled);
    bluetoothDevicePreference.setEnabled(false);
  }
  if (BluetoothService.preferenceDeviceName != null) {
    bluetoothDevicePreference.setSummary(BluetoothService.preferenceDeviceName);
  }
 else   if (BluetoothService.preferenceDeviceId != null) {
    bluetoothDevicePreference.setSummary(BluetoothService.preferenceDeviceId);
  }
 else {
    bluetoothDevicePreference.setSummary(R.string.pref_bluetooth_device_description);
  }
  final SettingsActivity activity=(SettingsActivity)getActivity();
  if (activity.isSignedIn()) {
    signInPreference.setTitle(R.string.pref_sign_out);
    final String name=activity.getDisplayName();
    signInPreference.setSummary(getString(R.string.pref_sign_out_description) + ""String_Node_Str"" + name);
  }
 else {
    signInPreference.setTitle(R.string.pref_sign_in);
    signInPreference.setSummary(R.string.pref_sign_in_description);
  }
}"
86929,"public BluetoothRunnable(@NonNull BluetoothAdapter bluetoothAdapter){
  this.bluetoothAdapter=bluetoothAdapter;
}","BluetoothRunnable(@NonNull BluetoothAdapter bluetoothAdapter){
  this.bluetoothAdapter=bluetoothAdapter;
}"
86930,"public void addPoint(double x,double y){
}","public void addPoint(double x,double y){
  if (!Util.isReal(x) || !Util.isReal(y)) {
    Log.w(TAG,""String_Node_Str"" + x + ""String_Node_Str""+ y);
  }
  if (n < points.size()) {
    Point point=points.get(n);
    point.x=x;
    point.y=y;
  }
 else {
    points.add(new Point(x,y));
  }
  n++;
}"
86931,"/** 
 * Start the bluetooth service, and connect to gps receiver if selected
 * @return true iff bluetooth service started successfully
 */
private static boolean start(Activity activity){
  bluetoothAdapter=BluetoothAdapter.getDefaultAdapter();
  if (bluetoothAdapter == null) {
    Toast.makeText(activity,""String_Node_Str"",Toast.LENGTH_LONG).show();
    return false;
  }
 else   if (!bluetoothAdapter.isEnabled()) {
    final Intent enableBluetoothIntent=new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
    activity.startActivityForResult(enableBluetoothIntent,ENABLE_BLUETOOTH_CODE);
    return false;
  }
 else {
    Log.i(TAG,""String_Node_Str"");
    return connect();
  }
}","/** 
 * Start the bluetooth service, and connect to gps receiver if selected
 * @return true iff bluetooth service started successfully
 */
private static boolean start(Activity activity){
  bluetoothAdapter=BluetoothAdapter.getDefaultAdapter();
  if (bluetoothAdapter == null) {
    Log.e(TAG,""String_Node_Str"");
    return false;
  }
 else   if (!bluetoothAdapter.isEnabled()) {
    final Intent enableBluetoothIntent=new Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE);
    activity.startActivityForResult(enableBluetoothIntent,ENABLE_BLUETOOTH_CODE);
    return false;
  }
 else {
    Log.i(TAG,""String_Node_Str"");
    return connect();
  }
}"
86932,"public static void startAsync(final Activity activity){
  if (isEnabled || isConnecting || isConnecting) {
    Log.e(TAG,""String_Node_Str"");
  }
  isEnabled=true;
  isConnecting=true;
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... params){
      Log.i(TAG,""String_Node_Str"");
      if (BluetoothService.preferenceEnabled) {
        isConnected=BluetoothService.start(activity);
        isConnecting=false;
      }
      return null;
    }
  }
.execute();
}","public static void startAsync(final Activity activity){
  if (isEnabled || isConnecting || isConnecting) {
    Log.e(TAG,""String_Node_Str"");
  }
  isEnabled=true;
  isConnecting=true;
  new AsyncTask<Void,Void,Void>(){
    @Override protected Void doInBackground(    Void... params){
      Log.i(TAG,""String_Node_Str"");
      if (BluetoothService.preferenceEnabled) {
        isConnected=BluetoothService.start(activity);
        isConnecting=false;
      }
      return null;
    }
    @Override protected void onPostExecute(    Void param){
      if (BluetoothService.preferenceEnabled) {
        if (!isConnected) {
          Toast.makeText(activity,""String_Node_Str"",Toast.LENGTH_LONG).show();
        }
      }
    }
  }
.execute();
}"
86933,"@Override public String toString(){
  return String.format(""String_Node_Str"",x,y);
}","@Override public String toString(){
  return String.format(Locale.US,""String_Node_Str"",x,y);
}"
86934,"public static String getLogTime(){
  if (db != null) {
    long nanoTime;
    if (db.stopTime == -1) {
      nanoTime=System.nanoTime() - db.startTime;
    }
 else {
      nanoTime=db.stopTime - db.startTime;
    }
    final long millis=(nanoTime / 1000000L) % 1000;
    final long seconds=(nanoTime / 1000000000L) % 60;
    final long minutes=nanoTime / 60000000000L;
    return String.format(""String_Node_Str"",minutes,seconds,millis);
  }
 else {
    return ""String_Node_Str"";
  }
}","public static String getLogTime(){
  if (db != null) {
    long nanoTime;
    if (db.stopTime == -1) {
      nanoTime=System.nanoTime() - db.startTime;
    }
 else {
      nanoTime=db.stopTime - db.startTime;
    }
    final long millis=(nanoTime / 1000000L) % 1000;
    final long seconds=(nanoTime / 1000000000L) % 60;
    final long minutes=nanoTime / 60000000000L;
    return String.format(Locale.US,""String_Node_Str"",minutes,seconds,millis);
  }
 else {
    return ""String_Node_Str"";
  }
}"
86935,"@Override public String toRow(){
  return String.format(""String_Node_Str"",nano,acc);
}","@Override public String toRow(){
  return String.format(Locale.US,""String_Node_Str"",nano,acc);
}"
86936,"@Override public String toRow(){
  return String.format(""String_Node_Str"",nano,pressure);
}","@Override public String toRow(){
  return String.format(Locale.US,""String_Node_Str"",nano,pressure);
}"
86937,"@Override public String toString(){
  return String.format(""String_Node_Str"",nano,altitude);
}","@Override public String toString(){
  return String.format(Locale.US,""String_Node_Str"",nano,altitude);
}"
86938,"@Override public String toRow(){
  return String.format(""String_Node_Str"",nano,gX,gY,gZ);
}","@Override public String toRow(){
  return String.format(Locale.US,""String_Node_Str"",nano,gX,gY,gZ);
}"
86939,"@Override public String toRow(){
  final String sat_str=(numSat != -1) ? Integer.toString(numSat) : ""String_Node_Str"";
  final String vN_str=Util.isReal(vN) ? Double.toString(vN) : ""String_Node_Str"";
  final String vE_str=Util.isReal(vE) ? Double.toString(vE) : ""String_Node_Str"";
  return String.format(""String_Node_Str"",millis,latitude,longitude,altitude_gps,vN_str,vE_str,sat_str);
}","@Override public String toRow(){
  final String sat_str=(numSat != -1) ? Integer.toString(numSat) : ""String_Node_Str"";
  final String vN_str=Util.isReal(vN) ? Double.toString(vN) : ""String_Node_Str"";
  final String vE_str=Util.isReal(vE) ? Double.toString(vE) : ""String_Node_Str"";
  return String.format(Locale.US,""String_Node_Str"",millis,latitude,longitude,altitude_gps,vN_str,vE_str,sat_str);
}"
86940,"@Override public String toString(){
  return String.format(""String_Node_Str"",latitude,longitude,altitude_gps,vN,vE);
}","@Override public String toString(){
  return String.format(Locale.US,""String_Node_Str"",latitude,longitude,altitude_gps,vN,vE);
}"
86941,"@Override public String toRow(){
  return String.format(""String_Node_Str"",nano,rotX,rotY,rotZ);
}","@Override public String toRow(){
  return String.format(Locale.US,""String_Node_Str"",nano,rotX,rotY,rotZ);
}"
86942,"@Override public String toRow(){
  return String.format(""String_Node_Str"",nano,gX,gY,gZ,rotX,rotY,rotZ,acc);
}","@Override public String toRow(){
  return String.format(Locale.US,""String_Node_Str"",nano,gX,gY,gZ,rotX,rotY,rotZ,acc);
}"
86943,"@Override public boolean onPreferenceChange(@NonNull Preference preference,Object value){
  final String key=preference.getKey();
  final String previousAudibleMode=modePreference.getValue();
  final double previousMin=Double.parseDouble(minPreference.getText());
  final double previousMax=Double.parseDouble(maxPreference.getText());
switch (key) {
case ""String_Node_Str"":
    final boolean audibleEnabled=(Boolean)value;
  if (audibleEnabled) {
    MyAudible.startAudible();
  }
 else {
    MyAudible.stopAudible();
  }
break;
case ""String_Node_Str"":
final String audibleMode=(String)value;
if (!audibleMode.equals(previousAudibleMode)) {
final double units=Convert.metric ? Convert.KPH : Convert.MPH;
final double min;
final double max;
switch (audibleMode) {
case ""String_Node_Str"":
min=0;
max=Math.round(62.6 / units);
break;
case ""String_Node_Str"":
min=Math.round(-62.6 / units);
max=0;
break;
case ""String_Node_Str"":
min=0;
max=3;
break;
default :
Log.e(TAG,""String_Node_Str"" + audibleMode);
min=0;
max=1;
}
minPreference.setText(Double.toString(min));
maxPreference.setText(Double.toString(max));
updateAudibleMode(audibleMode,min,max);
}
break;
case ""String_Node_Str"":
final double min=Double.parseDouble((String)value);
updateAudibleMode(previousAudibleMode,min,previousMax);
break;
case ""String_Node_Str"":
final double max=Double.parseDouble((String)value);
updateAudibleMode(previousAudibleMode,previousMin,max);
break;
case ""String_Node_Str"":
final double speechRate=Double.parseDouble((String)value);
updateSpeechRate(speechRate);
break;
}
return true;
}","@Override public boolean onPreferenceChange(@NonNull Preference preference,Object value){
  final String key=preference.getKey();
  final String previousAudibleMode=modePreference.getValue();
  final double previousMin=Util.parseDouble(minPreference.getText());
  final double previousMax=Util.parseDouble(maxPreference.getText());
switch (key) {
case ""String_Node_Str"":
    final boolean audibleEnabled=(Boolean)value;
  if (audibleEnabled) {
    MyAudible.startAudible();
  }
 else {
    MyAudible.stopAudible();
  }
break;
case ""String_Node_Str"":
final String audibleMode=(String)value;
if (!audibleMode.equals(previousAudibleMode)) {
final double units=Convert.metric ? Convert.KPH : Convert.MPH;
final double min;
final double max;
switch (audibleMode) {
case ""String_Node_Str"":
min=0;
max=Math.round(62.6 / units);
break;
case ""String_Node_Str"":
min=Math.round(-62.6 / units);
max=0;
break;
case ""String_Node_Str"":
min=0;
max=3;
break;
default :
Log.e(TAG,""String_Node_Str"" + audibleMode);
min=0;
max=1;
}
minPreference.setText(Double.toString(min));
maxPreference.setText(Double.toString(max));
updateAudibleMode(audibleMode,min,max);
}
break;
case ""String_Node_Str"":
final double min=Util.parseDouble((String)value);
if (!Util.isReal(min)) return false;
updateAudibleMode(previousAudibleMode,min,previousMax);
break;
case ""String_Node_Str"":
final double max=Util.parseDouble((String)value);
if (!Util.isReal(max)) return false;
updateAudibleMode(previousAudibleMode,previousMin,max);
break;
case ""String_Node_Str"":
final double speechRate=Util.parseDouble((String)value);
if (!Util.isReal(speechRate)) return false;
updateSpeechRate(speechRate);
break;
}
return true;
}"
86944,"/** 
 * Set summaries and adjust defaults
 */
private void updateViews(){
  final String audibleMode=modePreference.getValue();
  final double min=Double.parseDouble(minPreference.getText());
  final double max=Double.parseDouble(maxPreference.getText());
  final double speechRate=Double.parseDouble(ratePreference.getText());
  updateAudibleMode(audibleMode,min,max);
  updateSpeechRate(speechRate);
}","/** 
 * Set summaries and adjust defaults
 */
private void updateViews(){
  final String audibleMode=modePreference.getValue();
  final double min=Util.parseDouble(minPreference.getText());
  final double max=Util.parseDouble(maxPreference.getText());
  final double speechRate=Util.parseDouble(ratePreference.getText());
  updateAudibleMode(audibleMode,min,max);
  updateSpeechRate(speechRate);
}"
86945,"private static String getMeasurement(){
  final String audibleMode=prefs.getString(""String_Node_Str"",""String_Node_Str"");
  final float min=Float.parseFloat(prefs.getString(""String_Node_Str"",""String_Node_Str""));
  final float max=Float.parseFloat(prefs.getString(""String_Node_Str"",""String_Node_Str""));
  String measurement=""String_Node_Str"";
switch (audibleMode) {
case ""String_Node_Str"":
    if (MyLocationManager.lastLoc != null && MyLocationManager.lastFixDuration() < 5000) {
      final double horizontalSpeed=MyLocationManager.lastLoc.groundSpeed();
      if (Util.isReal(horizontalSpeed) && min <= horizontalSpeed && horizontalSpeed <= max) {
        measurement=Convert.speed(horizontalSpeed,0,false);
      }
 else {
        Log.w(TAG,""String_Node_Str"" + Convert.speed(horizontalSpeed,0,true));
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"");
    }
  break;
case ""String_Node_Str"":
final double verticalSpeed=MyAltimeter.climb;
if (Util.isReal(verticalSpeed) && min <= verticalSpeed && verticalSpeed <= max) {
if (verticalSpeed > 0) {
  measurement=""String_Node_Str"" + Convert.speed(verticalSpeed,0,false);
}
 else {
  measurement=Convert.speed(-verticalSpeed,0,false);
}
}
 else {
Log.w(TAG,""String_Node_Str"" + Convert.speed(verticalSpeed,0,true));
}
break;
case ""String_Node_Str"":
if (MyLocationManager.lastLoc != null && MyLocationManager.lastFixDuration() < 5000) {
final double glideRatio=MyLocationManager.lastLoc.glideRatio();
if (Util.isReal(glideRatio) && min <= glideRatio && glideRatio <= max) {
measurement=Convert.glide(glideRatio,1,false);
}
 else {
Log.w(TAG,""String_Node_Str"" + Convert.glide(glideRatio,1,true));
}
}
 else {
Log.w(TAG,""String_Node_Str"");
}
break;
default :
Log.e(TAG,""String_Node_Str"" + audibleMode);
}
return measurement;
}","private static String getMeasurement(){
  final String audibleMode=prefs.getString(""String_Node_Str"",""String_Node_Str"");
  final double units=Convert.metric ? Convert.KPH : Convert.MPH;
  final double min=Util.parseDouble(prefs.getString(""String_Node_Str"",""String_Node_Str""));
  final double max=Util.parseDouble(prefs.getString(""String_Node_Str"",""String_Node_Str""));
  String measurement=""String_Node_Str"";
switch (audibleMode) {
case ""String_Node_Str"":
    if (MyLocationManager.lastLoc != null && MyLocationManager.lastFixDuration() < 5000) {
      final double horizontalSpeed=MyLocationManager.lastLoc.groundSpeed();
      if (Util.isReal(horizontalSpeed) && min * units <= horizontalSpeed && horizontalSpeed <= max * units) {
        measurement=Convert.speed(horizontalSpeed,0,false);
      }
 else {
        Log.w(TAG,""String_Node_Str"" + Convert.speed(horizontalSpeed,0,true));
      }
    }
 else {
      Log.w(TAG,""String_Node_Str"");
    }
  break;
case ""String_Node_Str"":
final double verticalSpeed=MyAltimeter.climb;
if (Util.isReal(verticalSpeed) && min * units <= verticalSpeed && verticalSpeed <= max * units) {
if (verticalSpeed > 0) {
  measurement=""String_Node_Str"" + Convert.speed(verticalSpeed,0,false);
}
 else {
  measurement=Convert.speed(-verticalSpeed,0,false);
}
}
 else {
Log.w(TAG,""String_Node_Str"" + Convert.speed(verticalSpeed,0,true));
}
break;
case ""String_Node_Str"":
if (MyLocationManager.lastLoc != null && MyLocationManager.lastFixDuration() < 5000) {
final double glideRatio=MyLocationManager.lastLoc.glideRatio();
if (Util.isReal(glideRatio) && min <= glideRatio && glideRatio <= max) {
measurement=Convert.glide(glideRatio,1,false);
}
 else {
Log.w(TAG,""String_Node_Str"" + Convert.glide(glideRatio,1,true));
}
}
 else {
Log.w(TAG,""String_Node_Str"");
}
break;
default :
Log.e(TAG,""String_Node_Str"" + audibleMode);
}
return measurement;
}"
86946,"@Override public boolean onPreferenceChange(Preference preference,Object value){
  if (preference.getKey().equals(""String_Node_Str"")) {
    final boolean audibleEnabled=(Boolean)value;
    if (audibleEnabled) {
      MyAudible.startAudible();
    }
 else {
      MyAudible.stopAudible();
    }
  }
 else   if (preference.getKey().equals(""String_Node_Str"")) {
    final String audibleMode=(String)value;
switch (audibleMode) {
case ""String_Node_Str"":
case ""String_Node_Str"":
      minPreference.setText(""String_Node_Str"");
    maxPreference.setText(""String_Node_Str"");
  break;
case ""String_Node_Str"":
minPreference.setText(""String_Node_Str"");
maxPreference.setText(""String_Node_Str"");
break;
default :
Log.e(TAG,""String_Node_Str"" + audibleMode);
}
}
updateViews();
return true;
}","@Override public boolean onPreferenceChange(Preference preference,Object value){
  if (preference.getKey().equals(""String_Node_Str"")) {
    final boolean audibleEnabled=(Boolean)value;
    if (audibleEnabled) {
      MyAudible.startAudible();
    }
 else {
      MyAudible.stopAudible();
    }
  }
 else   if (preference.getKey().equals(""String_Node_Str"")) {
    final String audibleMode=(String)value;
switch (audibleMode) {
case ""String_Node_Str"":
      minPreference.setText(""String_Node_Str"");
    maxPreference.setText(""String_Node_Str"");
  break;
case ""String_Node_Str"":
minPreference.setText(""String_Node_Str"");
maxPreference.setText(""String_Node_Str"");
break;
case ""String_Node_Str"":
minPreference.setText(""String_Node_Str"");
maxPreference.setText(""String_Node_Str"");
break;
default :
Log.e(TAG,""String_Node_Str"" + audibleMode);
}
}
updateViews();
return true;
}"
86947,"/** 
 * Set summaries and adjust defaults
 */
private void updateViews(){
  final String audibleMode=modePreference.getValue();
  final int modePreferenceIndex=modePreference.findIndexOfValue(audibleMode);
  final CharSequence modeValue=modePreferenceIndex >= 0 ? modePreference.getEntries()[modePreferenceIndex] : null;
  modePreference.setSummary(modeValue);
  final double min=Double.parseDouble(minPreference.getText());
  final double max=Double.parseDouble(maxPreference.getText());
  String units;
switch (audibleMode) {
case ""String_Node_Str"":
    minPreference.setTitle(""String_Node_Str"");
  maxPreference.setTitle(""String_Node_Str"");
minPreference.setSummary(String.format(""String_Node_Str"",min) + ""String_Node_Str"");
maxPreference.setSummary(String.format(""String_Node_Str"",max) + ""String_Node_Str"");
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
minPreference.setTitle(""String_Node_Str"");
maxPreference.setTitle(""String_Node_Str"");
minPreference.setSummary(String.format(""String_Node_Str"",min) + ""String_Node_Str"");
maxPreference.setSummary(String.format(""String_Node_Str"",max) + ""String_Node_Str"");
break;
default :
Log.e(TAG,""String_Node_Str"" + audibleMode);
}
}","/** 
 * Set summaries and adjust defaults
 */
private void updateViews(){
  final String audibleMode=modePreference.getValue();
  final int modePreferenceIndex=modePreference.findIndexOfValue(audibleMode);
  final CharSequence modeValue=modePreferenceIndex >= 0 ? modePreference.getEntries()[modePreferenceIndex] : null;
  modePreference.setSummary(modeValue);
  final double min=Double.parseDouble(minPreference.getText());
  final double max=Double.parseDouble(maxPreference.getText());
switch (audibleMode) {
case ""String_Node_Str"":
    minPreference.setTitle(""String_Node_Str"");
  maxPreference.setTitle(""String_Node_Str"");
minPreference.setSummary(String.format(""String_Node_Str"",min) + ""String_Node_Str"");
maxPreference.setSummary(String.format(""String_Node_Str"",max) + ""String_Node_Str"");
break;
case ""String_Node_Str"":
case ""String_Node_Str"":
minPreference.setTitle(""String_Node_Str"");
maxPreference.setTitle(""String_Node_Str"");
minPreference.setSummary(String.format(""String_Node_Str"",min) + ""String_Node_Str"");
maxPreference.setSummary(String.format(""String_Node_Str"",max) + ""String_Node_Str"");
break;
default :
Log.e(TAG,""String_Node_Str"" + audibleMode);
}
}"
86948,"protected void handleSignInResult(GoogleSignInResult result){
  Log.d(TAG,""String_Node_Str"" + result.isSuccess());
  final View signInPanel=findViewById(R.id.sign_in_panel);
  if (signInPanel != null) {
    findViewById(R.id.sign_in_button).setEnabled(true);
    findViewById(R.id.sign_in_spinner).setVisibility(View.GONE);
  }
  if (result.isSuccess()) {
    account=result.getSignInAccount();
    Log.i(TAG,""String_Node_Str"" + account.getDisplayName());
    final String authCode=account.getServerAuthCode();
    Log.d(TAG,""String_Node_Str"" + authCode);
    final String idToken=account.getIdToken();
    Log.d(TAG,""String_Node_Str"" + idToken);
    if (signInPanel != null) {
      signInPanel.setVisibility(View.GONE);
    }
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    if (signInPanel != null) {
      signInPanel.setVisibility(View.VISIBLE);
    }
    if (userClickedSignIn) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
  }
}","protected void handleSignInResult(GoogleSignInResult result){
  Log.d(TAG,""String_Node_Str"" + result.isSuccess());
  final View signInPanel=findViewById(R.id.sign_in_panel);
  if (signInPanel != null) {
    findViewById(R.id.sign_in_button).setEnabled(true);
    findViewById(R.id.sign_in_spinner).setVisibility(View.GONE);
  }
  if (result.isSuccess()) {
    account=result.getSignInAccount();
    Log.i(TAG,""String_Node_Str"" + account.getDisplayName());
    final String authCode=account.getServerAuthCode();
    Log.d(TAG,""String_Node_Str"" + authCode);
    final String idToken=account.getIdToken();
    Log.d(TAG,""String_Node_Str"" + idToken);
    if (signInPanel != null) {
      signInPanel.setVisibility(View.GONE);
    }
    if (userClickedSignIn) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
  }
 else {
    Log.e(TAG,""String_Node_Str"");
    if (signInPanel != null) {
      signInPanel.setVisibility(View.VISIBLE);
    }
    if (userClickedSignIn) {
      Toast.makeText(this,""String_Node_Str"",Toast.LENGTH_LONG).show();
    }
  }
  userClickedSignIn=false;
}"
86949,"@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.menu_item_sensor_info:
    startActivity(new Intent(this,SensorActivity.class));
  return true;
case R.id.menu_item_sign_in:
clickSignIn();
return true;
case R.id.menu_item_sign_out:
clickSignOut();
return true;
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
switch (item.getItemId()) {
case R.id.menu_item_sensor_info:
    startActivity(new Intent(this,SensorActivity.class));
  return true;
case R.id.menu_item_sign_in:
clickSignIn();
return true;
case R.id.menu_item_sign_out:
clickSignOut();
if (menu != null) {
menu.findItem(R.id.menu_item_sign_in).setVisible(true);
menu.findItem(R.id.menu_item_sign_out).setVisible(false);
}
return true;
default :
return super.onOptionsItemSelected(item);
}
}"
86950,"private static String getMeasurement(){
  final String audibleMode=prefs.getString(""String_Node_Str"",null);
  String measurement=""String_Node_Str"";
switch (audibleMode) {
case ""String_Node_Str"":
    final double horizontalSpeed=MyLocationManager.groundSpeed;
  if (isReal(horizontalSpeed)) {
    measurement=String.format(""String_Node_Str"",horizontalSpeed);
  }
break;
case ""String_Node_Str"":
final double verticalSpeed=MyAltimeter.climb;
if (isReal(verticalSpeed)) {
measurement=String.format(""String_Node_Str"",verticalSpeed);
}
break;
case ""String_Node_Str"":
final double glideRatio=MyLocationManager.glide;
if (isReal(glideRatio)) {
measurement=String.format(""String_Node_Str"",glideRatio);
}
break;
default :
Log.e(TAG,""String_Node_Str"" + audibleMode);
}
return measurement;
}","private static String getMeasurement(){
  final String audibleMode=prefs.getString(""String_Node_Str"",""String_Node_Str"");
  final float min=prefs.getFloat(""String_Node_Str"",60f);
  final float max=prefs.getFloat(""String_Node_Str"",120f);
  String measurement=""String_Node_Str"";
switch (audibleMode) {
case ""String_Node_Str"":
    final double horizontalSpeed=MyLocationManager.groundSpeed;
  if (isReal(horizontalSpeed) && min <= horizontalSpeed && horizontalSpeed <= max) {
    measurement=String.format(""String_Node_Str"",horizontalSpeed);
  }
 else {
    Log.w(TAG,""String_Node_Str"" + horizontalSpeed);
  }
break;
case ""String_Node_Str"":
final double verticalSpeed=MyAltimeter.climb;
if (isReal(verticalSpeed) && min <= verticalSpeed && verticalSpeed <= max) {
measurement=String.format(""String_Node_Str"",verticalSpeed);
}
 else {
Log.w(TAG,""String_Node_Str"" + verticalSpeed);
}
break;
case ""String_Node_Str"":
final double glideRatio=MyLocationManager.glide;
if (isReal(glideRatio) && min <= glideRatio && glideRatio <= max) {
measurement=String.format(""String_Node_Str"",glideRatio);
}
 else {
Log.w(TAG,""String_Node_Str"" + glideRatio);
}
break;
default :
Log.e(TAG,""String_Node_Str"" + audibleMode);
}
return measurement;
}"
86951,"public static void openTrackKml(Context context,final CloudData cloudData){
  Intent earthIntent=new Intent(android.content.Intent.ACTION_VIEW);
  earthIntent.setDataAndType(Uri.parse(cloudData.trackKml),""String_Node_Str"");
  earthIntent.setClassName(""String_Node_Str"",""String_Node_Str"");
  context.startActivity(earthIntent);
}","/** 
 * Open track as KML 
 */
public static void openTrackKml(Context context,final CloudData cloudData){
  Intent earthIntent=new Intent(android.content.Intent.ACTION_VIEW);
  earthIntent.setDataAndType(Uri.parse(cloudData.trackKml),""String_Node_Str"");
  earthIntent.setClassName(""String_Node_Str"",""String_Node_Str"");
  context.startActivity(earthIntent);
}"
86952,"public static void openTrackUrl(final Context context,final CloudData cloudData){
  final String url=cloudData.trackUrl;
  Log.i(""String_Node_Str"",""String_Node_Str"" + url);
  final Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
  context.startActivity(browserIntent);
}","/** 
 * Open track url in browser 
 */
public static void openTrackUrl(final Context context,final CloudData cloudData){
  final String url=cloudData.trackUrl;
  Log.i(""String_Node_Str"",""String_Node_Str"" + url);
  final Intent browserIntent=new Intent(Intent.ACTION_VIEW,Uri.parse(url));
  context.startActivity(browserIntent);
}"
86953,"public static void shareTrack(Context context,Jump jump){
  final Intent intent=new Intent();
  intent.setAction(Intent.ACTION_SEND);
  intent.putExtra(Intent.EXTRA_STREAM,Uri.fromFile(jump.logFile));
  intent.setType(""String_Node_Str"");
  context.startActivity(intent);
}","/** 
 * Share jump log using android share options 
 */
public static void shareTrack(Context context,Jump jump){
  final CloudData cloudData=jump.getCloudData();
  if (cloudData != null) {
    final SimpleDateFormat format=new SimpleDateFormat(""String_Node_Str"");
    final String date=format.format(jump.getDate());
    final Intent intent=new Intent();
    intent.setAction(Intent.ACTION_SEND);
    intent.putExtra(Intent.EXTRA_SUBJECT,""String_Node_Str"" + date);
    intent.putExtra(Intent.EXTRA_TEXT,jump.getCloudData().trackUrl);
    intent.setType(""String_Node_Str"");
    context.startActivity(Intent.createChooser(intent,""String_Node_Str""));
  }
 else {
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
}"
86954,"private void updateViews(){
  if (jump != null) {
    final TextView filenameLabel=(TextView)findViewById(R.id.filename);
    final TextView filesizeLabel=(TextView)findViewById(R.id.filesize);
    final Button openButton=(Button)findViewById(R.id.openButton);
    final Button mapButton=(Button)findViewById(R.id.mapButton);
    filenameLabel.setText(jump.getName());
    filesizeLabel.setText(jump.getSize());
    final CloudData cloudData=jump.getCloudData();
    if (cloudData != null) {
      openButton.setText(""String_Node_Str"");
      openButton.setCompoundDrawablesWithIntrinsicBounds(0,R.drawable.cloud,0,0);
      mapButton.setEnabled(true);
    }
 else {
      openButton.setText(""String_Node_Str"");
      openButton.setCompoundDrawablesWithIntrinsicBounds(0,R.drawable.upload_cloud,0,0);
      mapButton.setEnabled(false);
    }
  }
}","private void updateViews(){
  if (jump != null) {
    final TextView filenameLabel=(TextView)findViewById(R.id.filename);
    final TextView filesizeLabel=(TextView)findViewById(R.id.filesize);
    final Button openButton=(Button)findViewById(R.id.openButton);
    final Button mapButton=(Button)findViewById(R.id.mapButton);
    final Button shareButton=(Button)findViewById(R.id.shareButton);
    filenameLabel.setText(jump.getName());
    filesizeLabel.setText(jump.getSize());
    final CloudData cloudData=jump.getCloudData();
    if (cloudData != null) {
      openButton.setText(""String_Node_Str"");
      openButton.setCompoundDrawablesWithIntrinsicBounds(0,R.drawable.browser,0,0);
      mapButton.setEnabled(true);
      shareButton.setEnabled(true);
    }
 else {
      openButton.setText(""String_Node_Str"");
      openButton.setCompoundDrawablesWithIntrinsicBounds(0,R.drawable.upload_cloud,0,0);
      mapButton.setEnabled(false);
      shareButton.setEnabled(false);
    }
  }
}"
86955,"public void clickStop(View v){
  Log.i(""String_Node_Str"",""String_Node_Str"");
  logging=false;
  clock.setText(""String_Node_Str"");
  startButton.setEnabled(true);
  stopButton.setEnabled(false);
  jumpsButton.setEnabled(true);
  invalidateOptionsMenu();
  MyDatabase.stopLogging();
}","public void clickStop(View v){
  Log.i(""String_Node_Str"",""String_Node_Str"");
  logging=false;
  clock.setText(""String_Node_Str"");
  startButton.setEnabled(true);
  stopButton.setEnabled(false);
  jumpsButton.setEnabled(true);
  invalidateOptionsMenu();
  final Jump jump=MyDatabase.stopLogging();
  if (jump != null) {
    TheCloud.uploadAsync(jump,new TheCloud.Callback<CloudData>(){
      @Override public void call(      CloudData result){
        Toast.makeText(MainActivity.this,""String_Node_Str"",Toast.LENGTH_SHORT).show();
      }
    }
);
  }
 else {
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
}"
86956,"private void stop(){
  if (stopTime == -1) {
    stopTime=System.nanoTime();
    MyAltimeter.removeListener(this);
    MyLocationManager.removeListener(this);
    MySensorManager.removeListener(this);
    try {
      log.close();
    }
 catch (    IOException e) {
      Log.e(""String_Node_Str"",""String_Node_Str"" + logFile,e);
    }
    Log.i(""String_Node_Str"",""String_Node_Str"" + logFile.getName());
  }
 else {
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
}","private File stop(){
  if (stopTime == -1) {
    stopTime=System.nanoTime();
    MyAltimeter.removeListener(this);
    MyLocationManager.removeListener(this);
    MySensorManager.removeListener(this);
    try {
      log.close();
      Log.i(""String_Node_Str"",""String_Node_Str"" + logFile.getName());
      return logFile;
    }
 catch (    IOException e) {
      Log.e(""String_Node_Str"",""String_Node_Str"" + logFile,e);
      return null;
    }
  }
 else {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    return null;
  }
}"
86957,"public static synchronized void stopLogging(){
  if (db != null) {
    db.stop();
    db=null;
  }
 else {
    Log.e(""String_Node_Str"",""String_Node_Str"");
  }
}","public static synchronized Jump stopLogging(){
  if (db != null) {
    final File logFile=db.stop();
    db=null;
    if (logFile != null) {
      return new Jump(logFile);
    }
 else {
      return null;
    }
  }
 else {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    return null;
  }
}"
86958,"/** 
 * @see prefuse.render.Renderer#render(java.awt.Graphics2D,prefuse.visual.VisualItem)
 */
public void render(Graphics2D g,VisualItem item){
  super.render(g,item);
  if (m_curArrow != null && !isSelfEdge(item)) {
    g.setPaint(ColorLib.getColor(item.getFillColor()));
    g.fill(m_curArrow);
  }
}","/** 
 * @see prefuse.render.Renderer#render(java.awt.Graphics2D,prefuse.visual.VisualItem)
 */
@Override public void render(Graphics2D g,VisualItem item){
  Shape shape=getShape(item);
  if (shape != null)   drawShape(g,item,shape);
  if (m_curArrow != null && !isSelfEdge(item)) {
    g.setPaint(ColorLib.getColor(item.getFillColor()));
    g.fill(m_curArrow);
  }
}"
86959,"/** 
 * We could decide here not to check the existence of a mapping column and just assume the user will behave itself...but it's the safe thing  to do,  I suppose.
 * @param e
 * @param param
 * @param multiplier
 * @return 
 */
private float multiplyIfSameMapping(EdgeItem e,int param,float multiplier){
  ForceSimulator fsim=this.getForceSimulator();
  float val=fsim.getForces()[2].getParameter(param);
  if (e.getSourceNode().getColumnIndex(""String_Node_Str"") >= 0) {
    int sourceMap=e.getSourceNode().getInt(""String_Node_Str"");
    int targetMap=e.getTargetNode().getInt(""String_Node_Str"");
    if (sourceMap == targetMap) {
      return multiplier * val;
    }
  }
  return val;
}","/** 
 * We could decide here not to check the existence of a mapping column and just assume the user will behave itself...but it's the safe thing  to do,  I suppose.
 * @param e
 * @param param
 * @param multiplier
 * @return 
 */
private synchronized float multiplyIfSameMapping(EdgeItem e,int param,float multiplier){
  ForceSimulator fsim=this.getForceSimulator();
  float val=fsim.getForces()[2].getParameter(param);
  if (e.getSourceNode().getColumnIndex(""String_Node_Str"") >= 0) {
    int sourceMap=e.getSourceNode().getInt(""String_Node_Str"");
    int targetMap=e.getTargetNode().getInt(""String_Node_Str"");
    if (sourceMap == targetMap) {
      return multiplier * val;
    }
  }
  return val;
}"
86960,"private List<AssetNode> _breadcrumbByQuery(AssetId id){
  List<AssetNode> results=new ArrayList<AssetNode>();
  StatementParam breadcrumbParam=BREADCRUMBS_LOOKUP.newParam();
  breadcrumbParam.setLong(0,id.getId());
  for (  Row row : new IListIterable(ics.SQL(BREADCRUMBS_LOOKUP,breadcrumbParam,true))) {
    AssetId currentAssetId=AssetIdUtils.createAssetId(row.getString(""String_Node_Str""),row.getLong(""String_Node_Str""));
    SimpleAssetNode currentNode=new SimpleAssetNode(currentAssetId);
    SimpleAssetNode child=(SimpleAssetNode)results.get(0);
    child.setParent(currentNode);
    results.add(0,currentNode);
  }
  return results;
}","private List<AssetNode> _breadcrumbByQuery(AssetId id){
  List<AssetNode> results=new ArrayList<AssetNode>();
  StatementParam breadcrumbParam=BREADCRUMBS_LOOKUP.newParam();
  breadcrumbParam.setLong(0,id.getId());
  for (  Row row : new IListIterable(ics.SQL(BREADCRUMBS_LOOKUP,breadcrumbParam,true))) {
    AssetId currentAssetId=AssetIdUtils.createAssetId(row.getString(""String_Node_Str""),row.getLong(""String_Node_Str""));
    SimpleAssetNode currentNode=new SimpleAssetNode(currentAssetId);
    LogDep.logDep(ics,currentAssetId);
    TemplateAsset data=populateNodeData(currentAssetId);
    if (data == null) {
      throw new IllegalStateException(""String_Node_Str"" + id);
    }
    currentNode.setAsset(data);
    if (!results.isEmpty())     ((SimpleAssetNode)results.get(0)).setParent(currentNode);
    results.add(0,currentNode);
  }
  return results;
}"
86961,"/** 
 * Method to produce a   {@link tools.gsf.config.Factory} to access services that need access to ICS
 * @param ics Content Server context object
 * @return the Factory to create services that need access to ics.
 */
Factory getFactory(final ICS ics);","/** 
 * Method to produce a ""tools.gsf.config.Factory"" to access services that need access to ICS
 * @param ics Content Server context object
 * @return the Factory to create services that need access to ics.
 */
Factory getFactory(final ICS ics);"
86962,"/** 
 * @param context
 * @param app
 */
public GroovyWebContext(ServletContext context,AppContext app){
  super(context,app);
  classLoader=new GroovyClassLoader();
  this.servletContext=context;
  String path=context.getRealPath(""String_Node_Str"");
  classLoader.addClasspath(path);
}","/** 
 * @param context The ServletContext instance
 * @param app The AppContext instance
 */
public GroovyWebContext(ServletContext context,AppContext app){
  super(context,app);
  classLoader=new GroovyClassLoader();
  this.servletContext=context;
  String path=context.getRealPath(""String_Node_Str"");
  classLoader.addClasspath(path);
}"
86963,"public void inject(final Object target,final String pagename){
  if (target == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final Field[] fields=findFieldsWithAnnotation(target,Mapping.class);
  if (fields.length > 0) {
    AssetIdWithSite id=mappingService.resolveMapped(pagename);
    final Map<String,MappingValue> map=mappingService.readMapping(id);
    for (    final Field field : fields) {
      injectIntoField(target,map,field,id);
    }
  }
}","public void inject(final Object target,final String pagename){
  if (target == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final Field[] fields=findFieldsWithAnnotation(target,Mapping.class);
  if (fields.length > 0) {
    AssetIdWithSite id=mappingService.resolveMapped(pagename);
    if (id != null) {
      final Map<String,MappingValue> map=mappingService.readMapping(id);
      for (      final Field field : fields) {
        injectIntoField(target,map,field,id);
      }
    }
 else {
      LOG.error(""String_Node_Str"" + pagename + ""String_Node_Str"");
    }
  }
}"
86964,"private long lookupCSElement(String rootelement){
  StatementParam param=lookup_cselement.newParam();
  param.setString(0,rootelement);
  Row row=SqlHelper.selectSingle(ics,lookup_template,param);
  return row == null ? -1L : row.getLong(""String_Node_Str"");
}","private long lookupCSElement(String rootelement){
  StatementParam param=lookup_cselement.newParam();
  param.setString(0,rootelement);
  Row row=SqlHelper.selectSingle(ics,lookup_cselement,param);
  return row == null ? -1L : row.getLong(""String_Node_Str"");
}"
86965,"@Override public AssetIdWithSite resolveMapped(String pagename){
  MappingPageData pageData=readPageData(pagename);
  if (pageData.isSiteEntry()) {
    long eid=lookupCSElement(pageData.rootelement);
    if (eid > -1) {
      String site=ics.GetVar(""String_Node_Str"");
      if (StringUtils.isBlank(site)) {
        site=pageData.getSiteResarg();
      }
      if (StringUtils.isNotBlank(site)) {
        return new AssetIdWithSite(""String_Node_Str"",eid,site);
      }
    }
  }
 else {
    long tid=lookupTemplate(pageData.rootelement);
    if (tid > 0) {
      String site=ics.GetVar(""String_Node_Str"");
      if (StringUtils.isBlank(site)) {
        site=lookupSiteForTemplate(pageData);
      }
      if (StringUtils.isNotBlank(site)) {
        return new AssetIdWithSite(""String_Node_Str"",tid,site);
      }
    }
  }
  return null;
}","@Override public AssetIdWithSite resolveMapped(String pagename){
  MappingPageData pageData=readPageData(pagename);
  if (pageData.isSiteEntry()) {
    LOG.debug(""String_Node_Str"");
    long eid=lookupCSElement(pageData.rootelement);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + pageData.rootelement + ""String_Node_Str""+ eid);
    }
    if (eid > -1) {
      String site=ics.GetVar(""String_Node_Str"");
      LOG.debug(""String_Node_Str"" + site);
      if (StringUtils.isBlank(site)) {
        LOG.debug(""String_Node_Str"");
        site=pageData.getSiteResarg();
        LOG.debug(""String_Node_Str"" + site);
      }
      if (StringUtils.isNotBlank(site)) {
        return new AssetIdWithSite(""String_Node_Str"",eid,site);
      }
    }
  }
 else {
    LOG.debug(""String_Node_Str"");
    long tid=lookupTemplate(pageData.rootelement);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + pageData.rootelement + ""String_Node_Str""+ tid);
    }
    if (tid > 0) {
      String site=ics.GetVar(""String_Node_Str"");
      LOG.debug(""String_Node_Str"" + site);
      if (StringUtils.isBlank(site)) {
        if (LOG.isDebugEnabled()) {
          LOG.debug(""String_Node_Str"");
        }
        site=lookupSiteForTemplate(pageData);
        LOG.debug(""String_Node_Str"" + site);
      }
      if (StringUtils.isNotBlank(site)) {
        return new AssetIdWithSite(""String_Node_Str"",tid,site);
      }
    }
  }
  LOG.debug(""String_Node_Str"" + pagename + ""String_Node_Str"");
  return null;
}"
86966,"public void handleRequest(ICS ics){
  AssetId id=templateAssetAccess.currentId();
  TemplateAsset asset=templateAssetAccess.read(id);
  model.add(""String_Node_Str"",new ScatteredAsset(asset.getDelegate()));
}","public void handleRequest(ICS ics){
  AssetId id=templateAssetAccess.currentId();
  TemplateAsset asset=templateAssetAccess.read(id);
  model.add(""String_Node_Str"",new ScatteredAsset(asset.getDelegate()));
  LOG.info(""String_Node_Str"" + myRenderMode);
  LOG.info(""String_Node_Str"" + mappedAsset);
}"
86967,"@Override public Object load(ICS ics,String resourceName) throws Exception {
  if (!isLoaded) {
    bootEngine(ics,path);
    isLoaded=true;
  }
  if (logger.isDebugEnabled())   logger.debug(""String_Node_Str"" + resourceName);
  if (ics.IsElement(resourceName)) {
    final StatementParam param=stmt.newParam();
    param.setString(0,resourceName);
    Row row=SqlHelper.selectSingle(ics,stmt,param);
    String url=row.getString(""String_Node_Str"");
    String res1=row.getString(""String_Node_Str"");
    String res2=row.getString(""String_Node_Str"");
    Map<String,String> m=new HashMap<String,String>();
    Utilities.getParams(res1,m,false);
    Utilities.getParams(res2,m,false);
    String tid=m.get(""String_Node_Str"");
    String eid=m.get(""String_Node_Str"");
    if (StringUtils.isNotBlank(tid)) {
      LogDep.logDep(ics,""String_Node_Str"",tid);
    }
    if (StringUtils.isNotBlank(tid)) {
      LogDep.logDep(ics,""String_Node_Str"",eid);
    }
    if (url.endsWith(""String_Node_Str"")) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + resourceName + ""String_Node_Str""+ url);
      }
      Class<?> x=getGroovyScriptEngine().loadScriptByName(url);
      return x.newInstance();
    }
 else {
      return super.load(ics,resourceName);
    }
  }
 else {
    return super.load(ics,resourceName);
  }
}","@Override public Object load(ICS ics,String resourceName) throws Exception {
  if (!isLoaded) {
    bootEngine(ics,path);
    isLoaded=true;
  }
  if (logger.isDebugEnabled())   logger.debug(""String_Node_Str"" + resourceName);
  if (ics.IsElement(resourceName)) {
    final StatementParam param=stmt.newParam();
    param.setString(0,resourceName);
    Row row=SqlHelper.selectSingle(ics,stmt,param);
    String url=row.getString(""String_Node_Str"");
    String res1=row.getString(""String_Node_Str"");
    String res2=row.getString(""String_Node_Str"");
    Map<String,String> m=new HashMap<String,String>();
    Utilities.getParams(res1,m,false);
    Utilities.getParams(res2,m,false);
    String tid=m.get(""String_Node_Str"");
    String eid=m.get(""String_Node_Str"");
    if (StringUtils.isNotBlank(tid)) {
      LogDep.logDep(ics,""String_Node_Str"",tid);
    }
    if (StringUtils.isNotBlank(eid)) {
      LogDep.logDep(ics,""String_Node_Str"",eid);
    }
    if (url.endsWith(""String_Node_Str"")) {
      if (logger.isDebugEnabled()) {
        logger.debug(""String_Node_Str"" + resourceName + ""String_Node_Str""+ url);
      }
      Class<?> x=getGroovyScriptEngine().loadScriptByName(url);
      return x.newInstance();
    }
 else {
      return super.load(ics,resourceName);
    }
  }
 else {
    return super.load(ics,resourceName);
  }
}"
86968,"@Override protected NavigationNode getNode(Row row,int level,int depth,String linkAttribute){
  long nid=row.getLong(""String_Node_Str"");
  long pageId=row.getLong(""String_Node_Str"");
  AssetId pid=assetTemplate.createAssetId(row.getString(""String_Node_Str""),pageId);
  if (!isValidOnDate(ics,pid,date)) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + pid + ""String_Node_Str"");
    }
    return null;
  }
  LogDep.logDep(ics,pid);
  TemplateAsset asset=assetTemplate.read(pid,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",pathAttribute,linkAttribute);
  final NavigationNode node=new NavigationNode();
  node.setPage(pid);
  node.setLevel(level);
  node.setPagesubtype(asset.getSubtype());
  node.setPagename(asset.asString(""String_Node_Str""));
  final boolean isNavigationPlaceholder=NAVBAR_NAME.equals(asset.asString(""String_Node_Str""));
  final boolean isNavigationLink=NAVBAR_LINK.equals(asset.asString(""String_Node_Str""));
  if (isNavigationPlaceholder) {
  }
 else   if (isNavigationLink) {
    Collection<AssetId> assocs;
    assocs=assetTemplate.readAssociatedAssetIds(pid,""String_Node_Str"");
    if (dimensionFilter != null)     assocs=dimensionFilter.filterAssets(assocs);
    for (    AssetId assoc : assocs) {
      if (isValidOnDate(ics,assoc,date)) {
        if (isGstAlias(assoc)) {
          final Alias alias=aliasDao.getAlias(assoc);
          node.setId(alias.getId());
          final String url=alias.getTargetUrl() != null ? alias.getTargetUrl() : getUrl(assoc);
          final String linktext=alias.getLinkText();
          if (url != null) {
            node.setUrl(url);
          }
          if (linktext != null) {
            node.setLinktext(linktext);
          }
        }
 else {
          node.setId(assoc);
          asset=assetTemplate.read(assoc,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",pathAttribute,linkAttribute);
          final String url=getUrl(asset);
          if (url != null) {
            node.setUrl(url);
          }
          final String linktext=asset.asString(linkAttribute);
          if (linktext != null) {
            node.setLinktext(linktext);
          }
 else {
            node.setLinktext(asset.asString(""String_Node_Str""));
          }
        }
      }
    }
  }
 else {
    final String url=getUrl(asset);
    if (url != null) {
      node.setUrl(url);
    }
    final String linktext=asset.asString(linkAttribute);
    if (linktext != null) {
      node.setLinktext(linktext);
    }
 else {
      node.setLinktext(asset.asString(""String_Node_Str""));
    }
  }
  if (depth < 0 || depth > level) {
    Collection<NavigationNode> children=getNodeChildren(nid,level + 1,depth,linkAttribute);
    for (    final NavigationNode kid : children) {
      if (kid != null && kid.getPage() != null) {
        node.addChild(kid);
      }
    }
  }
  return node;
}","@Override protected NavigationNode getNode(Row row,int level,int depth,String linkAttribute){
  long nid=row.getLong(""String_Node_Str"");
  long pageId=row.getLong(""String_Node_Str"");
  AssetId pid=assetTemplate.createAssetId(row.getString(""String_Node_Str""),pageId);
  if (!isValidOnDate(ics,pid,date)) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + pid + ""String_Node_Str"");
    }
    return null;
  }
  LogDep.logDep(ics,pid);
  TemplateAsset asset=assetTemplate.read(pid,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",pathAttribute,linkAttribute);
  final NavigationNode node=new NavigationNode();
  node.setPage(pid);
  node.setLevel(level);
  node.setPagesubtype(asset.getSubtype());
  node.setPagename(asset.asString(""String_Node_Str""));
  final boolean isNavigationPlaceholder=NAVBAR_NAME.equals(asset.asString(""String_Node_Str""));
  final boolean isNavigationLink=NAVBAR_LINK.equals(asset.asString(""String_Node_Str""));
  if (isNavigationPlaceholder) {
  }
 else   if (isNavigationLink) {
    Collection<AssetId> assocs;
    assocs=assetTemplate.readAssociatedAssetIds(pid,""String_Node_Str"");
    if (dimensionFilter != null)     assocs=dimensionFilter.filterAssets(assocs);
    for (    AssetId assoc : assocs) {
      if (isValidOnDate(ics,assoc,date)) {
        if (isGstAlias(assoc)) {
          final Alias alias=aliasDao.getAlias(assoc);
          node.setId(alias.getId());
          final String url=alias.getTargetUrl() != null ? alias.getTargetUrl() : getUrl(alias.getTarget());
          final String linktext=alias.getLinkText();
          if (url != null) {
            node.setUrl(url);
          }
          if (linktext != null) {
            node.setLinktext(linktext);
          }
        }
 else {
          node.setId(assoc);
          asset=assetTemplate.read(assoc,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",pathAttribute,linkAttribute);
          final String url=getUrl(asset);
          if (url != null) {
            node.setUrl(url);
          }
          final String linktext=asset.asString(linkAttribute);
          if (linktext != null) {
            node.setLinktext(linktext);
          }
 else {
            node.setLinktext(asset.asString(""String_Node_Str""));
          }
        }
      }
    }
  }
 else {
    final String url=getUrl(asset);
    if (url != null) {
      node.setUrl(url);
    }
    final String linktext=asset.asString(linkAttribute);
    if (linktext != null) {
      node.setLinktext(linktext);
    }
 else {
      node.setLinktext(asset.asString(""String_Node_Str""));
    }
  }
  if (depth < 0 || depth > level) {
    Collection<NavigationNode> children=getNodeChildren(nid,level + 1,depth,linkAttribute);
    for (    final NavigationNode kid : children) {
      if (kid != null && kid.getPage() != null) {
        node.addChild(kid);
      }
    }
  }
  return node;
}"
86969,"/** 
 * @param ics
 * @param id
 * @param deptype
 * @param locale
 * @param attr
 * @param attrType
 * @param ordering
 * @return IList with the attribute values.
 */
public static IList getAttributeValues(ICS ics,AssetId id,String deptype,String locale,String attr,String attrType,String ordering){
  SetAsset setAsset=new SetAsset();
  final String assetSetName=""String_Node_Str"" + ics.genID(false);
  setAsset.setName(assetSetName);
  setAsset.setType(id.getType());
  setAsset.setId(Long.toString(id.getId()));
  if (deptype != null) {
    setAsset.setDeptype(deptype);
  }
  if (locale != null) {
    setAsset.setLocale(locale);
  }
  setAsset.execute(ics);
  GetAttributeValues gav=new GetAttributeValues();
  gav.setName(assetSetName);
  gav.setAttribute(attr);
  if (attrType != null) {
    gav.setTypename(attrType);
  }
  if (ordering != null) {
    gav.setOrdering(ordering);
  }
  String listname=ics.genID(true);
  gav.setAttribute(listname);
  gav.execute(ics);
  IList result=ics.GetList(listname);
  ics.RegisterList(listname,null);
  return result;
}","/** 
 * @param ics
 * @param id
 * @param deptype
 * @param locale
 * @param attr
 * @param attrType
 * @param ordering
 * @return IList with the attribute values.
 */
public static IList getAttributeValues(ICS ics,AssetId id,String deptype,String locale,String attr,String attrType,String ordering){
  SetAsset setAsset=new SetAsset();
  final String assetSetName=""String_Node_Str"" + ics.genID(false);
  setAsset.setName(assetSetName);
  setAsset.setType(id.getType());
  setAsset.setId(Long.toString(id.getId()));
  if (deptype != null) {
    setAsset.setDeptype(deptype);
  }
  if (locale != null) {
    setAsset.setLocale(locale);
  }
  setAsset.execute(ics);
  GetAttributeValues gav=new GetAttributeValues();
  gav.setName(assetSetName);
  gav.setAttribute(attr);
  if (attrType != null) {
    gav.setTypename(attrType);
  }
  if (ordering != null) {
    gav.setOrdering(ordering);
  }
  String listname=ics.genID(true);
  gav.setListvarname(listname);
  gav.execute(ics);
  IList result=ics.GetList(listname);
  ics.RegisterList(listname,null);
  return result;
}"
86970,"private List<String> _lookupWraAssetTypes(){
  List<String> x=new ArrayList<String>();
  for (  Row r : SqlHelper.select(ics,""String_Node_Str"",""String_Node_Str"")) {
    String type=r.getString(""String_Node_Str"");
    if (!SYSTEM_TYPES.contains(type)) {
      x.add(type);
    }
  }
  return x;
}","private List<String> _lookupWraAssetTypes(){
  List<String> x=new ArrayList<String>();
  for (  Row r : SqlHelper.select(ics,""String_Node_Str"",""String_Node_Str"")) {
    String type=r.getString(""String_Node_Str"");
    if (!SYSTEM_TYPES.contains(type)) {
      x.add(type);
    }
    x.add(""String_Node_Str"");
  }
  return x;
}"
86971,"private List<String> _lookupWraAssetTypes(){
  List<String> x=new ArrayList<String>();
  for (  Row r : SqlHelper.select(ics,""String_Node_Str"",""String_Node_Str"")) {
    String type=r.getString(""String_Node_Str"");
    if (!SYSTEM_TYPES.contains(type)) {
      x.add(type);
    }
    x.add(""String_Node_Str"");
  }
  return x;
}","private Collection<String> _lookupWraAssetTypes(){
  Set<String> x=new HashSet<String>();
  for (  Row r : SqlHelper.select(ics,""String_Node_Str"",""String_Node_Str"")) {
    String type=r.getString(""String_Node_Str"");
    if (!SYSTEM_TYPES.contains(type)) {
      x.add(type);
    }
  }
  x.add(""String_Node_Str"");
  return x;
}"
86972,"/** 
 * Internal method to check for Services or create Services.
 * @param name
 * @param c
 * @return the found service, null if no T can be created.
 * @throws InvocationTargetException
 */
@SuppressWarnings(""String_Node_Str"") protected <T>T locate(final String askedName,final Class<T> c) throws InvocationTargetException {
  if (ICS.class.isAssignableFrom(c)) {
    return (T)ics;
  }
  if (c.isArray()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final String name=StringUtils.isNotBlank(askedName) ? askedName : c.getSimpleName();
  if (StringUtils.isBlank(name)) {
    return null;
  }
  Object o=objectCache.get(name);
  if (o != null && !o.getClass().isAssignableFrom(c))   throw new IllegalStateException(""String_Node_Str"" + name + ""String_Node_Str""+ o.getClass()+ ""String_Node_Str""+ c.getName()+ ""String_Node_Str"");
  if (o == null) {
    o=namedAnnotationStrategy(name,c);
  }
  if (o == null) {
    o=unnamedAnnotationStrategy(name,c);
  }
  if (o == null) {
    o=reflectionStrategy(name,c);
  }
  return (T)o;
}","/** 
 * Internal method to check for Services or create Services.
 * @param name
 * @param c
 * @return the found service, null if no T can be created.
 * @throws InvocationTargetException
 */
@SuppressWarnings(""String_Node_Str"") protected <T>T locate(final String askedName,final Class<T> c) throws InvocationTargetException {
  if (ICS.class.isAssignableFrom(c)) {
    return (T)ics;
  }
  if (c.isArray()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final String name=StringUtils.isNotBlank(askedName) ? askedName : c.getSimpleName();
  if (StringUtils.isBlank(name)) {
    return null;
  }
  Object o=objectCache.get(name);
  if (o != null && !c.isAssignableFrom(o.getClass()))   throw new IllegalStateException(""String_Node_Str"" + name + ""String_Node_Str""+ o.getClass()+ ""String_Node_Str""+ c.getName()+ ""String_Node_Str"");
  if (o == null) {
    o=namedAnnotationStrategy(name,c);
  }
  if (o == null) {
    o=unnamedAnnotationStrategy(name,c);
  }
  if (o == null) {
    o=reflectionStrategy(name,c);
  }
  return (T)o;
}"
86973,"/** 
 * Reflection based producer method. <p/> This method uses reflection to find producer methods to the following rules: <ul> <li>public <b>static</b> Foo createFoo(ICS ics, Factory factory){}</li> <li>public Foo createFoo(ICS ics){}</li> </ul> If the non-static version is used the implementing class needs to have a public constructor that takes   {@see ICS} and {@see Factory} as arguments.To this class the current ICS and this object will be passed.
 * @param name the simple name of the object to produce
 * @param c the class with the type information of the object to produce
 * @return the created object, null if no producer method was found or whenthat method returned null.
 * @throws InvocationTargetException when the create&lt;Type&gt; methodthrows an exception.
 */
@SuppressWarnings(""String_Node_Str"") protected <T>T reflectionStrategy(String name,Class<T> c) throws InvocationTargetException {
  T o=null;
  for (  Class<?> reflectionClass : findClasses(ics)) {
    for (    Method m : reflectionClass.getMethods()) {
      if (m.getName().equals(""String_Node_Str"" + name)) {
        if (m.getReturnType().isAssignableFrom(c)) {
          if (m.getParameterTypes().length == 2 && Modifier.isStatic(m.getModifiers()) && m.getParameterTypes()[0].isAssignableFrom(ICS.class) && m.getParameterTypes()[1].isAssignableFrom(Factory.class)) {
            try {
              o=(T)m.invoke(null,ics,this);
              if (shouldCache(m))               objectCache.put(c.getName(),o);
            }
 catch (            IllegalArgumentException e) {
              LOG.error(""String_Node_Str"" + m.toString() + ""String_Node_Str""+ e.getMessage());
            }
catch (            IllegalAccessException e) {
              LOG.error(""String_Node_Str"" + m.toString() + ""String_Node_Str""+ e.getMessage());
            }
            return o;
          }
 else           if (m.getParameterTypes().length == 1 && m.getParameterTypes()[0].isAssignableFrom(ICS.class)) {
            try {
              Object factory=null;
              if (reflectionClass.equals(getClass())) {
                factory=this;
              }
 else {
                Constructor<?> ctor;
                ctor=reflectionClass.getConstructor(ICS.class,Factory.class);
                if (Modifier.isPublic(ctor.getModifiers())) {
                  factory=ctor.newInstance(ics,this);
                }
 else {
                  LOG.warn(reflectionClass.getName() + ""String_Node_Str"");
                }
              }
              if (factory != null) {
                if (LOG.isTraceEnabled())                 LOG.trace(""String_Node_Str"" + name + ""String_Node_Str""+ m.getName());
                o=(T)m.invoke(factory,ics);
                if (shouldCache(m))                 objectCache.put(c.getName(),o);
              }
              return o;
            }
 catch (            SecurityException e) {
              LOG.debug(""String_Node_Str"" + m.toString());
            }
catch (            NoSuchMethodException e) {
              throw new NoSuchMethodExceptionRuntimeException(reflectionClass.getName() + ""String_Node_Str"");
            }
catch (            IllegalArgumentException e) {
              LOG.error(""String_Node_Str"" + m.toString() + ""String_Node_Str""+ e.getMessage());
            }
catch (            InstantiationException e) {
              LOG.error(e.getMessage());
            }
catch (            IllegalAccessException e) {
              LOG.error(""String_Node_Str"" + m.toString() + ""String_Node_Str""+ e.getMessage());
            }
          }
        }
      }
    }
  }
  return o;
}","/** 
 * Reflection based producer method. <p/> This method uses reflection to find producer methods to the following rules: <ul> <li>public <b>static</b> Foo createFoo(ICS ics, Factory factory){}</li> <li>public Foo createFoo(ICS ics){}</li> </ul> If the non-static version is used the implementing class needs to have a public constructor that takes   {@link ICS} and {@link Factory} as arguments.To this class the current ICS and this object will be passed.
 * @param name the simple name of the object to produce
 * @param c the class with the type information of the object to produce
 * @return the created object, null if no producer method was found or whenthat method returned null.
 * @throws InvocationTargetException when the create&lt;Type&gt; methodthrows an exception.
 */
@SuppressWarnings(""String_Node_Str"") protected <T>T reflectionStrategy(String name,Class<T> c) throws InvocationTargetException {
  T o=null;
  for (  Class<?> reflectionClass : findClasses(ics)) {
    for (    Method m : reflectionClass.getMethods()) {
      if (m.getName().equals(""String_Node_Str"" + name)) {
        if (m.getReturnType().isAssignableFrom(c)) {
          if (m.getParameterTypes().length == 2 && Modifier.isStatic(m.getModifiers()) && m.getParameterTypes()[0].isAssignableFrom(ICS.class) && m.getParameterTypes()[1].isAssignableFrom(Factory.class)) {
            try {
              o=(T)m.invoke(null,ics,this);
              if (shouldCache(m))               objectCache.put(c.getName(),o);
            }
 catch (            IllegalArgumentException e) {
              LOG.error(""String_Node_Str"" + m.toString() + ""String_Node_Str""+ e.getMessage());
            }
catch (            IllegalAccessException e) {
              LOG.error(""String_Node_Str"" + m.toString() + ""String_Node_Str""+ e.getMessage());
            }
            return o;
          }
 else           if (m.getParameterTypes().length == 1 && m.getParameterTypes()[0].isAssignableFrom(ICS.class)) {
            try {
              Object factory=null;
              if (reflectionClass.equals(getClass())) {
                factory=this;
              }
 else {
                Constructor<?> ctor;
                ctor=reflectionClass.getConstructor(ICS.class,Factory.class);
                if (Modifier.isPublic(ctor.getModifiers())) {
                  factory=ctor.newInstance(ics,this);
                }
 else {
                  LOG.warn(reflectionClass.getName() + ""String_Node_Str"");
                }
              }
              if (factory != null) {
                if (LOG.isTraceEnabled())                 LOG.trace(""String_Node_Str"" + name + ""String_Node_Str""+ m.getName());
                o=(T)m.invoke(factory,ics);
                if (shouldCache(m))                 objectCache.put(c.getName(),o);
              }
              return o;
            }
 catch (            SecurityException e) {
              LOG.debug(""String_Node_Str"" + m.toString());
            }
catch (            NoSuchMethodException e) {
              throw new NoSuchMethodExceptionRuntimeException(reflectionClass.getName() + ""String_Node_Str"");
            }
catch (            IllegalArgumentException e) {
              LOG.error(""String_Node_Str"" + m.toString() + ""String_Node_Str""+ e.getMessage());
            }
catch (            InstantiationException e) {
              LOG.error(e.getMessage());
            }
catch (            IllegalAccessException e) {
              LOG.error(""String_Node_Str"" + m.toString() + ""String_Node_Str""+ e.getMessage());
            }
          }
        }
      }
    }
  }
  return o;
}"
86974,"@SuppressWarnings(""String_Node_Str"") protected <T>T locate(final Class<T> c,final ICS ics){
  if (ICS.class.isAssignableFrom(c)) {
    return (T)ics;
  }
  if (c.isArray()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final String name=c.getSimpleName();
  if (StringUtils.isBlank(name)) {
    return null;
  }
  Object o=objectCache.get(name);
  if (o == null) {
    try {
      Method m;
      m=getClass().getMethod(""String_Node_Str"" + name,ICS.class);
      if (m != null) {
        o=m.invoke(this,ics);
      }
    }
 catch (    final NoSuchMethodException e) {
      try {
        LOG.debug(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
        final Constructor<T> constr=c.getConstructor(ICS.class);
        o=constr.newInstance(ics);
      }
 catch (      final RuntimeException e1) {
        throw e1;
      }
catch (      final Exception e1) {
        throw new RuntimeException(e1);
      }
    }
catch (    final RuntimeException e) {
      throw e;
    }
catch (    final Exception e) {
      throw new RuntimeException(e);
    }
    if (shouldCache(c)) {
      objectCache.put(c.getName(),o);
    }
  }
  return (T)o;
}","/** 
 * Internal method to check for Services or create Services.
 * @param c
 * @param ics
 * @return the found service, null if no T can be created.
 */
@SuppressWarnings(""String_Node_Str"") protected <T>T locate(final Class<T> c,final ICS ics){
  if (ICS.class.isAssignableFrom(c)) {
    return (T)ics;
  }
  if (c.isArray()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final String name=c.getSimpleName();
  if (StringUtils.isBlank(name)) {
    return null;
  }
  Object o=objectCache.get(name);
  if (o == null) {
    try {
      Method m;
      m=getClass().getMethod(""String_Node_Str"" + name,ICS.class);
      if (m != null) {
        if (LOG.isTraceEnabled())         LOG.trace(""String_Node_Str"" + name + ""String_Node_Str""+ m.getName());
        o=m.invoke(this,ics);
      }
    }
 catch (    final NoSuchMethodException e) {
      try {
        LOG.debug(""String_Node_Str"" + c.getName() + ""String_Node_Str"");
        final Constructor<T> constr=c.getConstructor(ICS.class);
        o=constr.newInstance(ics);
      }
 catch (      final RuntimeException e1) {
        throw e1;
      }
catch (      final Exception e1) {
        throw new RuntimeException(e1);
      }
    }
catch (    final RuntimeException e) {
      throw e;
    }
catch (    final Exception e) {
      throw new RuntimeException(e);
    }
    if (shouldCache(c)) {
      objectCache.put(c.getName(),o);
    }
  }
  return (T)o;
}"
86975,"public NavigationService createNavigationService(final ICS ics){
  boolean wraNavigationSupport=true;
  if (wraNavigationSupport) {
    DimensionFilterInstance filter=getDimensionFilter(ics);
    if (filter == null) {
      if (LOG.isTraceEnabled()) {
        LOG.trace(""String_Node_Str"");
      }
      return null;
    }
    AliasCoreFieldDao aliasDao=locate(AliasCoreFieldDao.class,ics);
    Date date=PreviewContext.getPreviewDateFromCSVar(ics,""String_Node_Str"");
    return new WraNavigationService(ics,locate(TemplateAssetAccess.class,ics),aliasDao,filter,date);
  }
 else {
    return new SimpleNavigationHelper(ics,locate(TemplateAssetAccess.class,ics),""String_Node_Str"",""String_Node_Str"");
  }
}","public NavigationService createNavigationService(final ICS ics){
  boolean wraNavigationSupport=true;
  if (wraNavigationSupport) {
    DimensionFilterInstance filter=getDimensionFilter(ics);
    if (filter == null && LOG.isTraceEnabled()) {
      LOG.trace(""String_Node_Str"");
    }
    AliasCoreFieldDao aliasDao=locate(AliasCoreFieldDao.class,ics);
    Date date=PreviewContext.getPreviewDateFromCSVar(ics,""String_Node_Str"");
    return new WraNavigationService(ics,locate(TemplateAssetAccess.class,ics),aliasDao,filter,date);
  }
 else {
    return new SimpleNavigationHelper(ics,locate(TemplateAssetAccess.class,ics),""String_Node_Str"",""String_Node_Str"");
  }
}"
86976,"@Override public void doTag() throws JspException, IOException {
  super.doTag();
  final ICS ics=(ICS)getICS();
  final NavigationService nh=getService(""String_Node_Str"",NavigationService.class);
  String site=ics.GetVar(""String_Node_Str"");
  if (StringUtils.isBlank(site))   throw new IllegalStateException(""String_Node_Str"");
  if (StringUtils.isBlank(pagename)) {
    Collection<NavigationNode> nav=nh.getRootNodesForSite(site,depth);
    getJspContext().setAttribute(name,nav);
  }
 else {
    NavigationNode nav=nh.getNodeByName(pagename,site,depth);
    getJspContext().setAttribute(name,nav);
  }
  depth=1;
  pagename=null;
}","@Override public void doTag() throws JspException, IOException {
  super.doTag();
  final ICS ics=(ICS)getICS();
  final NavigationService nh=getService(""String_Node_Str"",NavigationService.class);
  if (nh == null)   throw new IllegalStateException(""String_Node_Str"");
  String site=ics.GetVar(""String_Node_Str"");
  if (StringUtils.isBlank(site))   throw new IllegalStateException(""String_Node_Str"");
  if (StringUtils.isBlank(pagename)) {
    Collection<NavigationNode> nav=nh.getRootNodesForSite(site,depth);
    getJspContext().setAttribute(name,nav);
  }
 else {
    NavigationNode nav=nh.getNodeByName(pagename,site,depth);
    getJspContext().setAttribute(name,nav);
  }
  depth=1;
  pagename=null;
}"
86977,"private final DimensionSetInstance getDimensionSet(ICS ics){
  try {
    String site=ics.GetVar(""String_Node_Str"");
    if (StringUtils.isNotBlank(site)) {
      long discoveredId=LocaleUtils.locateDimensionSetForSite(ics,site);
      LOG.trace(""String_Node_Str"" + site + ""String_Node_Str""+ discoveredId);
      return LocaleUtils.getDimensionSet(ics,discoveredId);
    }
  }
 catch (  RuntimeException e) {
    LOG.trace(""String_Node_Str"" + e);
  }
  throw new IllegalArgumentException(""String_Node_Str"");
}","protected final DimensionSetInstance getDimensionSet(ICS ics){
  try {
    String site=ics.GetVar(""String_Node_Str"");
    if (StringUtils.isNotBlank(site)) {
      long discoveredId=LocaleUtils.locateDimensionSetForSite(ics,site);
      LOG.trace(""String_Node_Str"" + site + ""String_Node_Str""+ discoveredId);
      return LocaleUtils.getDimensionSet(ics,discoveredId);
    }
  }
 catch (  RuntimeException e) {
    LOG.trace(""String_Node_Str"" + e);
  }
  return null;
}"
86978,"/** 
 * Return a dimension filter instance corresponding to the dimension set specified by the user (or discovered by the tag). The dimension filter is configured with the preferred dimensions of the user (also configured). <p/> The preferred locales are identified by checking the following locations, in the order specified: <ol> <li>set by the locale attribute by id of locale <li>set by locale attribute by name of locale <li>detected by finding the locale dimension id in the ics variable ""locale"" <li>detected by finding the locale name in the ics variable ""locale"" <li>detected by finding the locale dimension id in the ics session variable ""locale"" <li>detected by finding the locale name in the ics session variable ""locale"" <li>detected by reading the Accept-Language header </ol> The dimension set is identified by checking in the following places, in order: <ol> <li>set by the dimset attribute by name of dimension set <li>set by dimset attribute by the id of the dimension set <li>looked up by finding the site name in the ics variable ""site"" and loading the single dimension set associated with that site </ol>
 * @return a dimension filter, configured with the set preferred locales, ornull, if either the dimenion set or the preferred dimensions could not be found (with extensive errors)
 */
protected final DimensionFilterInstance getDimensionFilter(ICS ics){
  DimensionFilterInstance filter;
  try {
    Collection<AssetId> preferredLocales=getPreferredLocales(ics);
    DimensionSetInstance dimSet=getDimensionSet(ics);
    filter=DimensionUtils.getDimensionFilter(DimensionUtils.getDM(ics),preferredLocales,dimSet);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + filter + ""String_Node_Str""+ dimSet+ ""String_Node_Str""+ preferredLocales+ ""String_Node_Str"");
    }
  }
 catch (  DimensionException e) {
    LOG.error(""String_Node_Str"",e);
    filter=null;
  }
catch (  RuntimeException e) {
    LOG.error(""String_Node_Str"",e);
    filter=null;
  }
  return filter;
}","/** 
 * Return a dimension filter instance corresponding to the dimension set specified by the user (or discovered by the tag). The dimension filter is configured with the preferred dimensions of the user (also configured). <p/> The preferred locales are identified by checking the following locations, in the order specified: <ol> <li>set by the locale attribute by id of locale <li>set by locale attribute by name of locale <li>detected by finding the locale dimension id in the ics variable ""locale"" <li>detected by finding the locale name in the ics variable ""locale"" <li>detected by finding the locale dimension id in the ics session variable ""locale"" <li>detected by finding the locale name in the ics session variable ""locale"" <li>detected by reading the Accept-Language header </ol> The dimension set is identified by checking in the following places, in order: <ol> <li>set by the dimset attribute by name of dimension set <li>set by dimset attribute by the id of the dimension set <li>looked up by finding the site name in the ics variable ""site"" and loading the single dimension set associated with that site </ol>
 * @return a dimension filter, configured with the set preferred locales, ornull, if either the dimension set or the preferred dimensions could not be found (with extensive errors)
 */
protected final DimensionFilterInstance getDimensionFilter(ICS ics){
  DimensionFilterInstance filter;
  try {
    DimensionSetInstance dimSet=getDimensionSet(ics);
    if (dimSet == null) {
      if (LOG.isTraceEnabled()) {
        LOG.trace(""String_Node_Str"");
      }
      return null;
    }
    Collection<AssetId> preferredLocales=getPreferredLocales(ics);
    filter=DimensionUtils.getDimensionFilter(DimensionUtils.getDM(ics),preferredLocales,dimSet);
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + filter + ""String_Node_Str""+ dimSet+ ""String_Node_Str""+ preferredLocales+ ""String_Node_Str"");
    }
  }
 catch (  DimensionException e) {
    LOG.error(""String_Node_Str"",e);
    filter=null;
  }
catch (  RuntimeException e) {
    LOG.error(""String_Node_Str"",e);
    filter=null;
  }
  return filter;
}"
86979,"public NavigationService createNavigationService(final ICS ics){
  boolean wraNavigationSupport=true;
  if (wraNavigationSupport) {
    DimensionFilterInstance filter=getDimensionFilter(ics);
    AliasCoreFieldDao aliasDao=locate(AliasCoreFieldDao.class,ics);
    Date date=PreviewContext.getPreviewDateFromCSVar(ics,""String_Node_Str"");
    return new WraNavigationService(ics,locate(TemplateAssetAccess.class,ics),aliasDao,filter,date);
  }
 else {
    return new SimpleNavigationHelper(ics,locate(TemplateAssetAccess.class,ics),""String_Node_Str"",""String_Node_Str"");
  }
}","public NavigationService createNavigationService(final ICS ics){
  boolean wraNavigationSupport=true;
  if (wraNavigationSupport) {
    DimensionFilterInstance filter=getDimensionFilter(ics);
    if (filter == null) {
      if (LOG.isTraceEnabled()) {
        LOG.trace(""String_Node_Str"");
      }
      return null;
    }
    AliasCoreFieldDao aliasDao=locate(AliasCoreFieldDao.class,ics);
    Date date=PreviewContext.getPreviewDateFromCSVar(ics,""String_Node_Str"");
    return new WraNavigationService(ics,locate(TemplateAssetAccess.class,ics),aliasDao,filter,date);
  }
 else {
    return new SimpleNavigationHelper(ics,locate(TemplateAssetAccess.class,ics),""String_Node_Str"",""String_Node_Str"");
  }
}"
86980,"/** 
 * @param site
 * @param depth
 * @param linkAttribute
 * @return
 */
Collection<NavigationNode> getRootNodesForSite(String site,int depth,String linkAttribute);","/** 
 * @param site
 * @param depth the maximum number of levels to retrieve
 * @param linkAttribute
 * @return
 */
Collection<NavigationNode> getRootNodesForSite(String site,int depth,String linkAttribute);"
86981,"/** 
 * @param pagename
 * @param site
 * @return the NavigationNode for the page by this name.
 */
NavigationNode getNodeByName(String pagename,String site,int depth,String linkAttribute);","/** 
 * Retrieves the NavigationNodes for the Page with the name <tt>pagename</tt> and in the current site. 
 * @param pagename the name of the Page asset
 * @param depth the maximum number of levels to retrieve
 * @param linkAttribute
 * @return the NavigationNode for the page by this name.
 */
NavigationNode getNodeByName(String pagename,int depth,String linkAttribute);"
86982,"protected String getUrl(TemplateAsset asset){
  String template=asset.asString(""String_Node_Str"");
  String path=asset.asString(pathAttribute);
  if (StringUtils.isBlank(template)) {
    LOG.warn(""String_Node_Str"" + asset.getAssetId() + ""String_Node_Str"");
    return null;
  }
  if (StringUtils.isBlank(path)) {
    LOG.warn(""String_Node_Str"" + asset.getAssetId() + ""String_Node_Str"");
    return new TemplateUriBuilder(asset.getAssetId(),template).toURI(ics);
  }
  String wrapper=ics.GetProperty(""String_Node_Str"",""String_Node_Str"",true);
  if (!Utilities.goodString(wrapper)) {
    wrapper=""String_Node_Str"";
  }
  return new WraUriBuilder(asset.getAssetId()).wrapper(wrapper).template(template).toURI(ics);
}","protected String getUrl(TemplateAsset asset){
  String template=asset.asString(""String_Node_Str"");
  String path=asset.asString(pathAttribute);
  if (StringUtils.isBlank(template)) {
    LOG.debug(""String_Node_Str"" + asset.getAssetId() + ""String_Node_Str"");
    return null;
  }
  if (StringUtils.isBlank(path)) {
    LOG.debug(""String_Node_Str"" + asset.getAssetId() + ""String_Node_Str"");
    return new TemplateUriBuilder(asset.getAssetId(),template).toURI(ics);
  }
  String wrapper=ics.GetProperty(""String_Node_Str"",""String_Node_Str"",true);
  if (!Utilities.goodString(wrapper)) {
    wrapper=""String_Node_Str"";
  }
  return new WraUriBuilder(asset.getAssetId()).wrapper(wrapper).template(template).toURI(ics);
}"
86983,"/** 
 * List all the Page assets at this SitePlanTree nodeId.
 * @param nodeId the nodeId from the SitePlanTree
 * @param level the tree level depth
 * @param depth the maximum depth
 * @return
 */
protected Collection<NavigationNode> getNodeChildren(final long nodeId,final int level,final int depth,String linkAttribute){
  StatementParam param=CHILD_STMT.newParam();
  param.setLong(0,nodeId);
  IListIterable root=SqlHelper.select(ics,CHILD_STMT,param);
  List<NavigationNode> collection=new LinkedList<NavigationNode>();
  for (  Row row : root) {
    long nid=row.getLong(""String_Node_Str"");
    long pageId=row.getLong(""String_Node_Str"");
    AssetId pid=assetTemplate.createAssetId(row.getString(""String_Node_Str""),pageId);
    LogDep.logDep(ics,pid);
    TemplateAsset asset=assetTemplate.read(pid,""String_Node_Str"",""String_Node_Str"",""String_Node_Str"",pathAttribute,linkAttribute);
    final NavigationNode node=new NavigationNode();
    node.setPage(pid);
    node.setLevel(level);
    node.setPagesubtype(asset.getSubtype());
    node.setPagename(asset.asString(""String_Node_Str""));
    node.setId(asset.getAssetId());
    final String url=getUrl(asset);
    if (url != null) {
      node.setUrl(url);
    }
    final String linktext=asset.asString(linkAttribute);
    if (linktext != null) {
      node.setLinktext(linktext);
    }
 else {
      node.setLinktext(asset.asString(""String_Node_Str""));
    }
    if (depth < 0 || depth > level) {
      Collection<NavigationNode> children=getNodeChildren(nid,level + 1,depth,linkAttribute);
      for (      final NavigationNode kid : children) {
        if (kid != null && kid.getPage() != null) {
          node.addChild(kid);
        }
      }
    }
  }
  return collection;
}","/** 
 * List all the child NavigationNode at this SitePlanTree nodeId.
 * @param nodeId the nodeId from the SitePlanTree
 * @param level the tree level depth
 * @param depth the maximum depth
 * @return
 */
protected Collection<NavigationNode> getNodeChildren(final long nodeId,final int level,final int depth,String linkAttribute){
  StatementParam param=CHILD_STMT.newParam();
  param.setLong(0,nodeId);
  IListIterable root=SqlHelper.select(ics,CHILD_STMT,param);
  List<NavigationNode> collection=new LinkedList<NavigationNode>();
  for (  Row row : root) {
    final NavigationNode node=getNode(row,level,depth,linkAttribute);
    if (node != null)     collection.add(node);
  }
  return collection;
}"
86984,"public SimpleNavigationHelper(ICS ics,TemplateAssetAccess assetTemplate,String linkLabelAttribute,String pathAttribute){
  if (StringUtils.isBlank(linkLabelAttribute))   throw new IllegalArgumentException(""String_Node_Str"");
  if (StringUtils.isBlank(pathAttribute))   throw new IllegalArgumentException(""String_Node_Str"");
  this.ics=ics;
  this.assetTemplate=assetTemplate;
  this.pathAttribute=pathAttribute;
  this.linkLabelAttribute=linkLabelAttribute;
}","/** 
 * Constructor that sets the linkLabel and path attributes.
 * @param ics
 * @param assetTemplate
 * @param linkLabelAttribute
 * @param pathAttribute
 */
public SimpleNavigationHelper(ICS ics,TemplateAssetAccess assetTemplate,String linkLabelAttribute,String pathAttribute){
  if (StringUtils.isBlank(linkLabelAttribute))   throw new IllegalArgumentException(""String_Node_Str"");
  if (StringUtils.isBlank(pathAttribute))   throw new IllegalArgumentException(""String_Node_Str"");
  this.ics=ics;
  this.assetTemplate=assetTemplate;
  this.pathAttribute=pathAttribute;
  this.linkLabelAttribute=linkLabelAttribute;
}"
86985,"@Override public NavigationNode getNodeByName(String pagename,int depth){
  return getNodeByName(pagename,ics.GetVar(""String_Node_Str""),depth);
}","@Override public NavigationNode getNodeByName(String pagename,int depth){
  return getNodeByName(ics.GetVar(""String_Node_Str""),pagename,depth);
}"
86986,"private static void put(Object object,Field field,String var) throws IllegalAccessException {
  if (StringUtils.isBlank(var))   return;
  if (field.getType().isPrimitive()) {
    putPrimitive(object,field,var);
  }
  Object value=null;
  if (field.getType() == String.class) {
    value=var;
  }
 else   if (field.getType() == Date.class) {
    value=Util.parseJdbcDate(var);
  }
 else   if (field.getType() == Integer.class) {
    value=new Integer(var);
  }
 else   if (field.getType() == Double.class) {
    value=new Double(var);
  }
 else   if (field.getType() == Character.class) {
    value=new Character(var.charAt(0));
  }
 else   if (field.getType() == Long.class) {
    value=new Long(var);
  }
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + value + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ object.getClass().getName());
  }
  try {
    field.set(object,value);
  }
 catch (  final IllegalArgumentException e) {
    throw new IllegalArgumentException(""String_Node_Str"" + value + ""String_Node_Str""+ field.getName(),e);
  }
catch (  final IllegalAccessException e) {
    throw new IllegalAccessException(""String_Node_Str"" + value + ""String_Node_Str""+ field.getName());
  }
}","private static void put(Object object,Field field,String var) throws IllegalAccessException {
  if (StringUtils.isBlank(var))   return;
  if (field.getType().isPrimitive()) {
    putPrimitive(object,field,var);
  }
 else {
    Object value=null;
    if (field.getType() == String.class) {
      value=var;
    }
 else     if (field.getType() == Date.class) {
      value=Util.parseJdbcDate(var);
    }
 else     if (field.getType() == Integer.class) {
      value=new Integer(var);
    }
 else     if (field.getType() == Double.class) {
      value=new Double(var);
    }
 else     if (field.getType() == Character.class) {
      value=new Character(var.charAt(0));
    }
 else     if (field.getType() == Long.class) {
      value=new Long(var);
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + value + ""String_Node_Str""+ field.getName()+ ""String_Node_Str""+ object.getClass().getName());
    }
    try {
      field.set(object,value);
    }
 catch (    final IllegalArgumentException e) {
      throw new IllegalArgumentException(""String_Node_Str"" + value + ""String_Node_Str""+ field.getName(),e);
    }
catch (    final IllegalAccessException e) {
      throw new IllegalAccessException(""String_Node_Str"" + value + ""String_Node_Str""+ field.getName());
    }
  }
}"
86987,"/** 
 * Main dimension filtering method.  Accesses the filter in the dimension set, configures it with the preferred dimension IDs, then filters the input assets.
 * @param dimensionManager      manager class for Dimension lookups
 * @param toFilterList          list of input assets that need to be filtered.  Often it's just one, but a list is perfectly valid.
 * @param preferredDimensionIds preferred dimensions to be investigated for a result. Priority preference depends on theconfigured filter
 * @param dimSet                DimensionSet to use for filtering.
 * @return list of assets based on the filtering rules in the dimension filter from the specified dimension set.
 * @throws DimensionException in case something goes terribly wrong.
 */
public static Collection<AssetId> filterAssets(DimensionManager dimensionManager,List<AssetId> toFilterList,Collection<AssetId> preferredDimensionIds,DimensionSetInstance dimSet) throws DimensionException {
  List<Dimension> preferredDimensions=dimensionManager.loadDimensions(preferredDimensionIds);
  DimensionFilterInstance filter=dimSet.getFilter();
  filter.setDimensonPreference(preferredDimensions);
  return filter.filterAssets(toFilterList);
}","/** 
 * Main dimension filtering method.  Accesses the filter in the dimension set, configures it with the preferred dimension IDs, then filters the input assets.
 * @param dimensionManager      manager class for Dimension lookups
 * @param toFilterList          list of input assets that need to be filtered.  Often it's just one, but a list is perfectly valid.
 * @param preferredDimensionIds preferred dimensions to be investigated for a result. Priority preference depends on theconfigured filter
 * @param dimSet                DimensionSet to use for filtering.
 * @return list of assets based on the filtering rules in the dimension filter from the specified dimension set.
 * @throws DimensionException in case something goes terribly wrong.
 */
public static Collection<AssetId> filterAssets(DimensionManager dimensionManager,List<AssetId> toFilterList,Collection<AssetId> preferredDimensionIds,DimensionSetInstance dimSet) throws DimensionException {
  List<Dimension> preferredDimensions=dimensionManager.loadDimensions(preferredDimensionIds);
  if (_log.isTraceEnabled())   _log.trace(""String_Node_Str"" + preferredDimensions.size());
  DimensionFilterInstance filter=dimSet.getFilter();
  if (_log.isTraceEnabled())   _log.trace(""String_Node_Str"" + (filter != null));
  filter.setDimensonPreference(preferredDimensions);
  Collection<AssetId> result=filter.filterAssets(toFilterList);
  if (_log.isDebugEnabled())   _log.debug(""String_Node_Str"" + toFilterList + ""String_Node_Str""+ dimSet+ ""String_Node_Str""+ preferredDimensionIds+ ""String_Node_Str""+ result);
  return filter.filterAssets(toFilterList);
}"
86988,"/** 
 * Locates a single dimension set in a site. If no match is found, an exception is thrown. If more than one match is found, an exception is thrown.
 * @param ics context
 * @param site site containing a dimension set
 * @return DimensionSet ID
 */
private static long _locateDimensionSetForSite(ICS ics,String site){
  if (site == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  StatementParam params=FIND_DIMSET_FOR_SITE_PREPAREDSTMT.newParam();
  params.setString(0,site);
  IList results=ics.SQL(FIND_DIMSET_FOR_SITE_PREPAREDSTMT,params,true);
  int numRows=results != null && results.hasData() ? results.numRows() : 0;
  if (numRows == 0) {
    throw new IllegalStateException(""String_Node_Str"" + site + ""String_Node_Str"");
  }
  if (numRows > 1) {
    String msg=""String_Node_Str"" + site + ""String_Node_Str"";
    for (    IList row : new IterableIListWrapper(results)) {
      String id=IListUtils.getStringValue(row,""String_Node_Str"");
      LogDep.logDep(ics,""String_Node_Str"",id);
      msg+=id + ""String_Node_Str"";
    }
    throw new IllegalStateException(msg + ""String_Node_Str"");
  }
  results.moveTo(1);
  String id=IListUtils.getStringValue(results,""String_Node_Str"");
  LogDep.logDep(ics,""String_Node_Str"",id);
  return Long.valueOf(id);
}","/** 
 * Locates a single dimension set in a site. If no match is found, an exception is thrown. If more than one match is found, an exception is thrown.
 * @param ics context
 * @param site site containing a dimension set
 * @return DimensionSet ID
 */
private static long _locateDimensionSetForSite(ICS ics,String site){
  if (site == null) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  StatementParam params=FIND_DIMSET_FOR_SITE_PREPAREDSTMT.newParam();
  params.setString(0,site);
  IList results=ics.SQL(FIND_DIMSET_FOR_SITE_PREPAREDSTMT,params,true);
  int numRows=results != null && results.hasData() ? results.numRows() : 0;
  if (numRows == 0) {
    throw new IllegalStateException(""String_Node_Str"" + site + ""String_Node_Str"");
  }
  if (numRows > 1) {
    String msg=""String_Node_Str"" + site + ""String_Node_Str"";
    for (    IList row : new IterableIListWrapper(results)) {
      String id=IListUtils.getStringValue(row,""String_Node_Str"");
      LogDep.logDep(ics,""String_Node_Str"",id);
      msg+=id + ""String_Node_Str"";
    }
    throw new IllegalStateException(msg + ""String_Node_Str"");
  }
  results.moveTo(1);
  String id=IListUtils.getStringValue(results,""String_Node_Str"");
  LogDep.logDep(ics,""String_Node_Str"",id);
  if (_log.isTraceEnabled())   _log.trace(""String_Node_Str"" + site + ""String_Node_Str""+ id);
  return Long.valueOf(id);
}"
86989,"@SuppressWarnings(""String_Node_Str"") protected void callTemplate(final AssetIdWithSite id,final String tname){
  final CallTemplate ct=new CallTemplate();
  ct.setSite(id.getSite());
  ct.setSlotname(""String_Node_Str"");
  ct.setTid(ics.GetVar(""String_Node_Str""));
  ct.setTtype(CallTemplate.Type.CSElement);
  ct.setAsset(id);
  ct.setTname(tname);
  ct.setContext(""String_Node_Str"");
  String target=tname.startsWith(""String_Node_Str"") ? id.getSite() + ""String_Node_Str"" + tname : id.getSite() + ""String_Node_Str"" + id.getType()+ ""String_Node_Str""+ tname;
  Style style=getCallTemplateCallStyle(target);
  if (LOG.isTraceEnabled())   LOG.trace(""String_Node_Str"" + id + ""String_Node_Str""+ tname+ ""String_Node_Str""+ style);
  ct.setStyle(style);
  final String variant=ics.GetVar(""String_Node_Str"");
  if (variant != null && variant.length() > 0) {
    ct.setVariant(variant);
  }
  final String packedargs=ics.GetVar(""String_Node_Str"");
  if (packedargs != null && packedargs.length() > 0) {
    ct.setPackedargs(packedargs);
  }
  ct.setArgument(""String_Node_Str"",id.getSite());
  final Map<String,String> arguments=new HashMap<String,String>();
  final Enumeration<String> vars=ics.GetVars();
  while (vars.hasMoreElements()) {
    final String varname=vars.nextElement();
    if (!CALLTEMPLATE_EXCLUDE_VARS.contains(varname)) {
      arguments.put(varname,ics.GetVar(varname));
    }
  }
  getCallTemplateArguments(id,arguments);
  for (  String name : arguments.keySet()) {
    ct.setArgument(name,arguments.get(name));
    if (LOG.isTraceEnabled())     LOG.trace(""String_Node_Str"" + name + ""String_Node_Str""+ arguments.get(name));
  }
  String s=ct.execute(ics);
  if (s != null) {
    ics.StreamText(s);
  }
}","@SuppressWarnings(""String_Node_Str"") protected void callTemplate(final AssetIdWithSite id,final String tname){
  final CallTemplate ct=new CallTemplate();
  ct.setSite(id.getSite());
  ct.setSlotname(""String_Node_Str"");
  ct.setTid(ics.GetVar(""String_Node_Str""));
  ct.setTtype(CallTemplate.Type.CSElement);
  ct.setAsset(id);
  ct.setTname(tname);
  ct.setContext(""String_Node_Str"");
  String target=tname.startsWith(""String_Node_Str"") ? id.getSite() + tname : id.getSite() + ""String_Node_Str"" + id.getType()+ ""String_Node_Str""+ tname;
  Style style=getCallTemplateCallStyle(target);
  if (LOG.isTraceEnabled())   LOG.trace(""String_Node_Str"" + id + ""String_Node_Str""+ tname+ ""String_Node_Str""+ style);
  ct.setStyle(style);
  final String variant=ics.GetVar(""String_Node_Str"");
  if (variant != null && variant.length() > 0) {
    ct.setVariant(variant);
  }
  final String packedargs=ics.GetVar(""String_Node_Str"");
  if (packedargs != null && packedargs.length() > 0) {
    ct.setPackedargs(packedargs);
  }
  ct.setArgument(""String_Node_Str"",id.getSite());
  final Map<String,String> arguments=new HashMap<String,String>();
  final Enumeration<String> vars=ics.GetVars();
  while (vars.hasMoreElements()) {
    final String varname=vars.nextElement();
    if (!CALLTEMPLATE_EXCLUDE_VARS.contains(varname)) {
      arguments.put(varname,ics.GetVar(varname));
    }
  }
  getCallTemplateArguments(id,arguments);
  for (  String name : arguments.keySet()) {
    ct.setArgument(name,arguments.get(name));
    if (LOG.isTraceEnabled())     LOG.trace(""String_Node_Str"" + name + ""String_Node_Str""+ arguments.get(name));
  }
  String s=ct.execute(ics);
  if (s != null) {
    ics.StreamText(s);
  }
}"
86990,"/** 
 * @param ics Content Server context
 * @param asset asset to render
 * @param tname template name
 */
public IncludeTemplate(final ICS ics,final AssetId asset,final String tname){
  this.ics=ics;
  tag=new CallTemplate();
  tag.setTname(tname);
  final String eid=ics.GetVar(""String_Node_Str"");
  if (eid != null) {
    tag.setTid(eid);
    tag.setTtype(Type.CSElement);
  }
 else {
    tag.setTid(ics.GetVar(""String_Node_Str""));
    tag.setTtype(Type.Template);
  }
  tag.setContext(""String_Node_Str"");
  final String site=ics.GetVar(""String_Node_Str"");
  tag.setSite(site);
  final String packedargs=ics.GetVar(""String_Node_Str"");
  if (packedargs != null && packedargs.length() > 0) {
    tag.setPackedargs(packedargs);
  }
  tag.setAsset(asset);
  tag.setFixPageCriteria(false);
  tag.setSlotname(""String_Node_Str"");
  final String target=tname.startsWith(""String_Node_Str"") ? site + ""String_Node_Str"" + tname : site + ""String_Node_Str"" + asset.getType()+ ""String_Node_Str""+ tname;
  final String[] keys=ics.pageCriteriaKeys(target);
  if (keys == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + target + ""String_Node_Str""+ target+ ""String_Node_Str"");
  }
  pc=Arrays.asList(keys);
  for (  final String k : keys) {
    if (!FORBIDDEN_VARS.contains(k)) {
      final String v=ics.GetVar(k);
      if (StringUtils.isNotBlank(v)) {
        argument(k,v);
      }
    }
  }
}","/** 
 * @param ics Content Server context
 * @param asset asset to render
 * @param tname template name
 */
public IncludeTemplate(final ICS ics,final AssetId asset,final String tname){
  this.ics=ics;
  tag=new CallTemplate();
  tag.setTname(tname);
  final String eid=ics.GetVar(""String_Node_Str"");
  if (eid != null) {
    tag.setTid(eid);
    tag.setTtype(Type.CSElement);
  }
 else {
    tag.setTid(ics.GetVar(""String_Node_Str""));
    tag.setTtype(Type.Template);
  }
  tag.setContext(""String_Node_Str"");
  final String site=ics.GetVar(""String_Node_Str"");
  tag.setSite(site);
  final String packedargs=ics.GetVar(""String_Node_Str"");
  if (packedargs != null && packedargs.length() > 0) {
    tag.setPackedargs(packedargs);
  }
  tag.setAsset(asset);
  tag.setFixPageCriteria(false);
  tag.setSlotname(""String_Node_Str"");
  final String target=tname.startsWith(""String_Node_Str"") ? site + tname : site + ""String_Node_Str"" + asset.getType()+ ""String_Node_Str""+ tname;
  final String[] keys=ics.pageCriteriaKeys(target);
  if (keys == null) {
    throw new IllegalArgumentException(""String_Node_Str"" + target + ""String_Node_Str""+ target+ ""String_Node_Str"");
  }
  pc=Arrays.asList(keys);
  for (  final String k : keys) {
    if (!FORBIDDEN_VARS.contains(k)) {
      final String v=ics.GetVar(k);
      if (StringUtils.isNotBlank(v)) {
        argument(k,v);
      }
    }
  }
}"
86991,"protected void callTemplate(final AssetIdWithSite id,final String tname){
  final CallTemplate ct=new CallTemplate();
  ct.setSite(id.getSite());
  ct.setSlotname(""String_Node_Str"");
  ct.setTid(ics.GetVar(""String_Node_Str""));
  ct.setAsset(id);
  ct.setTname(tname);
  ct.setContext(""String_Node_Str"");
  ct.setArgument(""String_Node_Str"",id.getSite());
  final String packedargs=ics.GetVar(""String_Node_Str"");
  if (packedargs != null && packedargs.length() > 0) {
    ct.setPackedargs(packedargs);
  }
  final String targetPagename=tname.startsWith(""String_Node_Str"") ? id.getSite() + ""String_Node_Str"" + tname : id.getSite() + ""String_Node_Str"" + id.getType()+ ""String_Node_Str""+ tname;
  final Map<String,String> arguments=new HashMap<String,String>();
  for (  final String pcVarName : ics.pageCriteriaKeys(targetPagename)) {
    if (!CALLTEMPLATE_EXCLUDE_VARS.contains(pcVarName) && StringUtils.isNotBlank(ics.GetVar(pcVarName))) {
      arguments.put(pcVarName,ics.GetVar(pcVarName));
    }
  }
  getCallTemplateArguments(id,arguments);
  for (  final Entry<String,String> e : arguments.entrySet()) {
    ct.setArgument(e.getKey(),e.getValue());
    if (LOG.isTraceEnabled()) {
      LOG.trace(""String_Node_Str"" + e.getKey() + ""String_Node_Str""+ e.getValue());
    }
  }
  imposeCallTemplateStyle(ct,targetPagename);
  final String s=ct.execute(ics);
  if (s != null) {
    ics.StreamText(s);
  }
}","protected void callTemplate(final AssetIdWithSite id,final String tname){
  final CallTemplate ct=new CallTemplate();
  ct.setSite(id.getSite());
  ct.setSlotname(""String_Node_Str"");
  ct.setTid(ics.GetVar(""String_Node_Str""));
  ct.setAsset(id);
  ct.setTname(tname);
  ct.setContext(""String_Node_Str"");
  ct.setArgument(""String_Node_Str"",id.getSite());
  final String packedargs=ics.GetVar(""String_Node_Str"");
  if (packedargs != null && packedargs.length() > 0) {
    ct.setPackedargs(packedargs);
  }
  final String targetPagename=tname.startsWith(""String_Node_Str"") ? (id.getSite() + tname) : (id.getSite() + ""String_Node_Str"" + id.getType()+ ""String_Node_Str""+ tname);
  final Map<String,String> arguments=new HashMap<String,String>();
  if (LOG.isDebugEnabled()) {
    LOG.debug(""String_Node_Str"" + targetPagename);
  }
  String[] pageKeys=ics.pageCriteriaKeys(targetPagename);
  if (pageKeys != null) {
    for (    final String pcVarName : pageKeys) {
      if (!CALLTEMPLATE_EXCLUDE_VARS.contains(pcVarName) && StringUtils.isNotBlank(ics.GetVar(pcVarName))) {
        arguments.put(pcVarName,ics.GetVar(pcVarName));
      }
    }
  }
 else {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""String_Node_Str"" + targetPagename + ""String_Node_Str"");
    }
  }
  getCallTemplateArguments(id,arguments);
  for (  final Entry<String,String> e : arguments.entrySet()) {
    ct.setArgument(e.getKey(),e.getValue());
    if (LOG.isTraceEnabled()) {
      LOG.trace(""String_Node_Str"" + e.getKey() + ""String_Node_Str""+ e.getValue());
    }
  }
  imposeCallTemplateStyle(ct,targetPagename);
  final String s=ct.execute(ics);
  if (s != null) {
    ics.StreamText(s);
  }
}"
86992,"/** 
 * Adds the key/value pair, where are the value is added as a list.
 * @param key
 * @param value
 */
@SuppressWarnings(""String_Node_Str"") public void list(String key,Object value){
  Object v=map.get(key);
  if (v instanceof Collection<?>) {
    Collection<Object> l=(Collection<Object>)v;
    l.add(value);
  }
 else {
    Collection<Object> l=new LinkedList<Object>();
    if (v != null)     l.add(v);
    l.add(value);
  }
}","/** 
 * Adds the key/value pair, where are the value is added as a list.
 * @param key
 * @param value
 */
@SuppressWarnings(""String_Node_Str"") public void list(String key,Object value){
  Object v=map.get(key);
  if (v instanceof Collection<?>) {
    Collection<Object> l=(Collection<Object>)v;
    l.add(value);
  }
 else {
    Collection<Object> l=new LinkedList<Object>();
    if (v != null)     l.add(v);
    l.add(value);
    map.put(key,l);
  }
}"
86993,"/** 
 * Copies the ics variables identified by the name array  
 * @param name
 * @return this
 */
public IncludeElement copyArguments(final String... name){
  if (name == null) {
    return this;
  }
  for (  final String n : name) {
    argument(n,ics.GetVar(n));
  }
  return this;
}","/** 
 * Copies the ics variables identified by the name array
 * @param name
 * @return this
 */
public IncludeElement copyArguments(final String... name){
  if (name == null) {
    return this;
  }
  for (  final String n : name) {
    argument(n,ics.GetVar(n));
  }
  return this;
}"
86994,"@SuppressWarnings(""String_Node_Str"") private void checkPageCriteria(final ICS ics,final String target){
  final FTValList o=getList();
  if (o instanceof Map) {
    String[] pc=ics.pageCriteriaKeys(target);
    if (pc == null) {
      pc=new String[0];
    }
    final Map<String,?> m=o;
    for (final Iterator<?> i=m.entrySet().iterator(); i.hasNext(); ) {
      final Entry<String,?> e=(Entry<String,?>)i.next();
      final String key=e.getKey();
      boolean found=CALLTEMPLATE_EXCLUDE_VARS.contains(key);
      if (!found) {
        for (        final String c : pc) {
          if (c.equalsIgnoreCase(key)) {
            found=true;
            break;
          }
 else           if ((ARGS + c).equalsIgnoreCase(key)) {
            found=true;
            break;
          }
        }
      }
      if (!found) {
        LOG.error(""String_Node_Str"" + key + ""String_Node_Str""+ target+ ""String_Node_Str""+ ics.ResolveVariables(""String_Node_Str"")+ ""String_Node_Str""+ m.keySet().toString()+ ""String_Node_Str""+ Arrays.asList(pc));
        if (isFixPageCriteria() || config_FixPageCriteria) {
          i.remove();
          LOG.warn(""String_Node_Str"" + key + ""String_Node_Str""+ target+ ""String_Node_Str"");
        }
      }
    }
  }
}","@SuppressWarnings(""String_Node_Str"") private void checkPageCriteria(final ICS ics,final String target){
  final FTValList o=getList();
  if (o instanceof Map) {
    String[] pc=ics.pageCriteriaKeys(target);
    if (pc == null) {
      pc=new String[0];
    }
    final Map<String,?> m=o;
    for (final Iterator<?> i=m.entrySet().iterator(); i.hasNext(); ) {
      final Entry<String,?> e=(Entry<String,?>)i.next();
      final String key=e.getKey();
      boolean found=!key.startsWith(ARGS);
      if (!found)       found=CALLTEMPLATE_EXCLUDE_VARS.contains(key);
      if (!found) {
        for (        final String c : pc) {
          if ((ARGS + c).equalsIgnoreCase(key)) {
            found=true;
            break;
          }
        }
      }
      if (!found) {
        LOG.error(""String_Node_Str"" + key + ""String_Node_Str""+ target+ ""String_Node_Str""+ ics.ResolveVariables(""String_Node_Str"")+ ""String_Node_Str""+ m.keySet().toString()+ ""String_Node_Str""+ Arrays.asList(pc));
        if (isFixPageCriteria() || config_FixPageCriteria) {
          i.remove();
          LOG.warn(""String_Node_Str"" + key + ""String_Node_Str""+ target+ ""String_Node_Str"");
        }
      }
    }
  }
}"
86995,"UrlRegistry(ICS ics){
  this.ics=ics;
  wraDao=new WraCoreFieldDao();
  vwDao=new VirtualWebrootDao(ics);
}","public UrlRegistry(ICS ics){
  this.ics=ics;
  wraDao=new WraCoreFieldDao();
  vwDao=new VirtualWebrootDao(ics);
}"
86996,"public AssetIdWithSite resolveAsset(final String virtual_webroot,final String url_path){
  final StatementParam param=REGISTRY_SELECT.newParam();
  param.setString(0,virtual_webroot);
  param.setString(1,url_path);
  final Date now=new Date();
  for (  final Row asset : SqlHelper.select(ics,REGISTRY_SELECT,param)) {
    final String assettype=asset.getString(""String_Node_Str"");
    final String assetid=asset.getString(""String_Node_Str"");
    if (inRange(asset,now)) {
      return new AssetIdWithSite(assettype,Long.parseLong(assetid),asset.getString(""String_Node_Str""));
    }
  }
  return null;
}","public AssetIdWithSite resolveAsset(final String virtual_webroot,final String url_path){
  final StatementParam param=REGISTRY_SELECT.newParam();
  param.setString(0,virtual_webroot);
  param.setString(1,url_path);
  final Date now=new Date();
  for (  final Row asset : SqlHelper.select(ics,REGISTRY_SELECT,param)) {
    final String assettype=asset.getString(""String_Node_Str"");
    final String assetid=asset.getString(""String_Node_Str"");
    if (FilterAssetsByDate.isDateWithinRange(asset.getString(""String_Node_Str""),now,asset.getString(""String_Node_Str""))) {
      return new AssetIdWithSite(assettype,Long.parseLong(assetid),asset.getString(""String_Node_Str""));
    }
  }
  return null;
}"
86997,"@SuppressWarnings(""String_Node_Str"") @Override public void setParameters(Map args,ICS ics) throws ReferenceException {
  if (getSatelliteContext() == SatelliteContext.SATELLITE_SERVER && isGetTemplateUrl(args)) {
    AssetId id=new AssetIdImpl((String)args.get(""String_Node_Str""),Long.parseLong((String)args.get(""String_Node_Str"")));
    VirtualWebrootDao vwDao=new VirtualWebrootDao(ics);
    WraCoreFieldDao wraDao=new WraCoreFieldDao(ics);
    String currentEnvironment=vwDao.getVirtualWebrootEnvironment();
    if (currentEnvironment != null && wraDao.isWebReferenceable(id)) {
      WebReferenceableAsset wra=wraDao.getWra(id);
      VirtualWebroot vw=vwDao.lookupVirtualWebrootForAsset(wra);
      if (vw != null) {
        args.put(""String_Node_Str"",vw.getEnvironmentVirtualWebroot());
        args.put(""String_Node_Str"",wra.getPath().substring(vw.getMasterVirtualWebroot().length() + 1));
        String pagename=ics.GetProperty(WraPathAssembler.DISPATCHER_PROPNAME,""String_Node_Str"",true);
        if (!goodString(pagename)) {
          pagename=""String_Node_Str"";
        }
        if (args.get(PubConstants.WRAPPERPAGE) != null)         args.put(PubConstants.WRAPPERPAGE,pagename);
 else         args.put(""String_Node_Str"",pagename);
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + wra.getPath() + ""String_Node_Str""+ currentEnvironment);
        }
      }
    }
 else {
      if (log.isDebugEnabled()) {
        if (currentEnvironment == null) {
          log.debug(""String_Node_Str"");
        }
 else {
          log.debug(""String_Node_Str"" + id + ""String_Node_Str"");
        }
      }
    }
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + getSatelliteContext() + ""String_Node_Str""+ getAppType()+ ""String_Node_Str""+ args);
    }
  }
  super.setParameters(args,ics);
}","@SuppressWarnings(""String_Node_Str"") @Override public void setParameters(Map args,ICS ics) throws ReferenceException {
  if (getSatelliteContext() == SatelliteContext.SATELLITE_SERVER && isGetTemplateUrl(args)) {
    AssetId id=new AssetIdImpl((String)args.get(""String_Node_Str""),Long.parseLong((String)args.get(""String_Node_Str"")));
    VirtualWebrootDao vwDao=new VirtualWebrootDao(ics);
    WraCoreFieldDao wraDao=new WraCoreFieldDao(ics);
    String currentEnvironment=vwDao.getVirtualWebrootEnvironment();
    if (currentEnvironment != null && wraDao.isWebReferenceable(id)) {
      WebReferenceableAsset wra=wraDao.getWra(id);
      VirtualWebroot vw=vwDao.lookupVirtualWebrootForAsset(wra);
      if (vw != null) {
        args.put(""String_Node_Str"",vw.getEnvironmentVirtualWebroot());
        args.put(""String_Node_Str"",wra.getPath().substring(vw.getMasterVirtualWebroot().length() + 1));
        String pagename=ics.GetProperty(WraPathAssembler.DISPATCHER_PROPNAME,""String_Node_Str"",true);
        if (!goodString(pagename)) {
          pagename=""String_Node_Str"";
        }
        if (args.get(PubConstants.WRAPPERPAGE) != null)         args.put(PubConstants.WRAPPERPAGE,pagename);
 else         args.put(""String_Node_Str"",pagename);
      }
 else {
        if (log.isDebugEnabled()) {
          log.debug(""String_Node_Str"" + wra.getPath() + ""String_Node_Str""+ currentEnvironment);
        }
      }
    }
 else {
      if (log.isDebugEnabled()) {
        if (currentEnvironment == null) {
          log.debug(""String_Node_Str"");
        }
 else {
          log.debug(""String_Node_Str"" + id + ""String_Node_Str"");
        }
      }
    }
  }
 else {
    if (log.isDebugEnabled()) {
      log.debug(""String_Node_Str"" + getSatelliteContext() + ""String_Node_Str""+ args);
    }
  }
  super.setParameters(args,ics);
}"
86998,"/** 
 * Return a Map<String,String> containing the core fields in a web-referenceable asset.  This method will automatically substitute h1title as the value for linktitle if linktitle is not supplied. <p/> Also includes selected metadata fields: <ul> <li>id</li> <li>name</li> <li>subtype</li> <li>startdate</li> <li>enddate</li> <li>status</li> </ul>
 * @param c   asset type
 * @param cid asset id
 * @return Map<String,String> with attribute data
 */
public Map<String,String> getCoreFields(String c,String cid){
  Map<String,String> coreFields=new HashMap<String,String>();
  AssetData data=getCoreFieldsAsAssetData(new AssetIdImpl(c,Long.valueOf(cid)));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str"",""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  return coreFields;
}","/** 
 * Return a Map<String,String> containing the core fields in a web-referenceable asset.  This method will automatically substitute h1title as the value for linktitle if linktitle is not supplied. <p/> Also includes selected metadata fields: <ul> <li>id</li> <li>name</li> <li>subtype</li> <li>startdate</li> <li>enddate</li> <li>status</li> </ul>
 * @param c   asset type
 * @param cid asset id
 * @return Map<String,String> with attribute data
 */
public Map<String,String> getCoreFields(String c,String cid){
  Map<String,String> coreFields=new HashMap<String,String>();
  AssetData data=getCoreFieldsAsAssetData(new AssetIdImpl(c,Long.valueOf(cid)));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str"",""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.asString(data.getAttributeData(""String_Node_Str"")));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.asString(data.getAttributeData(""String_Node_Str"")));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.asString(data.getAttributeData(""String_Node_Str"")));
  coreFields.put(""String_Node_Str"",AttributeDataUtils.getWithFallback(data,""String_Node_Str""));
  return coreFields;
}"
86999,"public static boolean isValidOnDate(AssetId id,Date date){
  AssetData d=AssetDataUtils.getAssetData(id,STARTDATE,ENDDATE);
  String sStartdate=d.getAttributeData(STARTDATE) != null && d.getAttributeData(STARTDATE).getData() != null ? d.getAttributeData(STARTDATE).getData().toString() : null;
  Date startDate=goodString(sStartdate) ? Util.parseJdbcDate(sStartdate) : null;
  String sEnddate=d.getAttributeData(ENDDATE) != null && d.getAttributeData(ENDDATE).getData() != null ? d.getAttributeData(ENDDATE).getData().toString() : null;
  Date endDate=goodString(sEnddate) ? Util.parseJdbcDate(sEnddate) : null;
  if (startDate == null && endDate == null) {
    return true;
  }
 else {
    Date effectiveDate=date == null ? new Date() : date;
    if (startDate == null) {
      return effectiveDate.before(endDate);
    }
 else     if (endDate == null) {
      return startDate.before(effectiveDate);
    }
 else {
      return startDate.before(effectiveDate) && effectiveDate.before(endDate);
    }
  }
}","public static boolean isValidOnDate(AssetId id,Date date){
  AssetData d=AssetDataUtils.getAssetData(id,STARTDATE,ENDDATE);
  Date startDate=d.getAttributeData(STARTDATE) != null && d.getAttributeData(STARTDATE).getData() != null ? (Date)d.getAttributeData(STARTDATE).getData() : null;
  Date endDate=d.getAttributeData(ENDDATE) != null && d.getAttributeData(ENDDATE).getData() != null ? (Date)d.getAttributeData(ENDDATE).getData() : null;
  if (startDate == null && endDate == null) {
    return true;
  }
 else {
    Date effectiveDate=date == null ? new Date() : date;
    if (startDate == null) {
      return effectiveDate.before(endDate);
    }
 else     if (endDate == null) {
      return startDate.before(effectiveDate);
    }
 else {
      return startDate.before(effectiveDate) && effectiveDate.before(endDate);
    }
  }
}"
87000,"@Override protected void doExecute(){
  recordCompositionalDependencies();
  final AssetIdWithSite id=resolveAssetId();
  if (id == null) {
    throw new CSRuntimeException(""String_Node_Str"",404);
  }
  final String templatename=lookupTemplateForAsset(id);
  if (templatename == null) {
    throw new CSRuntimeException(""String_Node_Str"",404);
  }
  String site=id.getSite();
  if (site == null) {
    throw new CSRuntimeException(""String_Node_Str"" + id,404);
  }
  callTemplate(site,id,templatename);
}","@Override protected void doExecute(){
  recordCompositionalDependencies();
  final AssetIdWithSite id=resolveAssetId();
  if (id == null) {
    throw new CSRuntimeException(""String_Node_Str"",404);
  }
  final String templatename=lookupTemplateForAsset(id);
  if (templatename == null) {
    throw new CSRuntimeException(""String_Node_Str"",404);
  }
  String site=id.getSite();
  if (site == null) {
    throw new CSRuntimeException(""String_Node_Str"" + id,404);
  }
  ics.SetVar(""String_Node_Str"",site);
  callTemplate(site,id,templatename);
}"
