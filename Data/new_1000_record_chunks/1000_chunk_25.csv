record_number,buggy_code,fixed_code
24001,"public void handleMessage(Message msg){
  AsyncResult ar;
switch (msg.what) {
case EVENT_POLL_CALLS_RESULT:
{
      Log.d(LOG_TAG,""String_Node_Str"");
      ar=(AsyncResult)msg.obj;
      if (msg == lastRelevantPoll) {
        if (DBG_POLL)         log(""String_Node_Str"");
        needsPoll=false;
        lastRelevantPoll=null;
        handlePollCalls((AsyncResult)msg.obj);
      }
    }
  break;
case EVENT_OPERATION_COMPLETE:
operationComplete();
break;
case EVENT_SWITCH_RESULT:
break;
case EVENT_GET_LAST_CALL_FAIL_CAUSE:
int causeCode;
ar=(AsyncResult)msg.obj;
operationComplete();
if (ar.exception != null) {
causeCode=CallFailCause.NORMAL_CLEARING;
Log.i(LOG_TAG,""String_Node_Str"");
}
 else {
causeCode=((int[])ar.result)[0];
}
for (int i=0, s=droppedDuringPoll.size(); i < s; i++) {
CdmaConnection conn=droppedDuringPoll.get(i);
conn.onRemoteDisconnect(causeCode);
}
updatePhoneState();
phone.notifyPreciseCallStateChanged();
droppedDuringPoll.clear();
break;
case EVENT_REPOLL_AFTER_DELAY:
case EVENT_CALL_STATE_CHANGE:
pollCallsWhenSafe();
break;
case EVENT_RADIO_AVAILABLE:
handleRadioAvailable();
break;
case EVENT_RADIO_NOT_AVAILABLE:
handleRadioNotAvailable();
break;
case EVENT_EXIT_ECM_RESPONSE_CDMA:
if (pendingCallInECM) {
cm.dial(pendingMO.address,pendingCallClirMode,obtainCompleteMessage());
pendingCallInECM=false;
}
phone.unsetOnEcbModeExitResponse(this);
break;
case EVENT_CALL_WAITING_INFO_CDMA:
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
handleCallWaitingInfo((CdmaCallWaitingNotification)ar.result);
Log.d(LOG_TAG,""String_Node_Str"");
}
break;
case EVENT_THREE_WAY_DIAL_L2_RESULT_CDMA:
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
pendingMO.onConnectedInOrOut();
}
break;
default :
{
throw new RuntimeException(""String_Node_Str"");
}
}
}","public void handleMessage(Message msg){
  AsyncResult ar;
switch (msg.what) {
case EVENT_POLL_CALLS_RESULT:
{
      Log.d(LOG_TAG,""String_Node_Str"");
      ar=(AsyncResult)msg.obj;
      if (msg == lastRelevantPoll) {
        if (DBG_POLL)         log(""String_Node_Str"");
        needsPoll=false;
        lastRelevantPoll=null;
        handlePollCalls((AsyncResult)msg.obj);
      }
    }
  break;
case EVENT_OPERATION_COMPLETE:
operationComplete();
break;
case EVENT_SWITCH_RESULT:
break;
case EVENT_GET_LAST_CALL_FAIL_CAUSE:
int causeCode;
ar=(AsyncResult)msg.obj;
operationComplete();
if (ar.exception != null) {
causeCode=CallFailCause.NORMAL_CLEARING;
Log.i(LOG_TAG,""String_Node_Str"");
}
 else {
causeCode=((int[])ar.result)[0];
}
for (int i=0, s=droppedDuringPoll.size(); i < s; i++) {
CdmaConnection conn=droppedDuringPoll.get(i);
conn.onRemoteDisconnect(causeCode);
}
updatePhoneState();
phone.notifyPreciseCallStateChanged();
droppedDuringPoll.clear();
break;
case EVENT_REPOLL_AFTER_DELAY:
case EVENT_CALL_STATE_CHANGE:
pollCallsWhenSafe();
break;
case EVENT_RADIO_AVAILABLE:
handleRadioAvailable();
break;
case EVENT_RADIO_NOT_AVAILABLE:
handleRadioNotAvailable();
break;
case EVENT_EXIT_ECM_RESPONSE_CDMA:
if (pendingCallInECM) {
cm.dial(pendingMO.address,pendingCallClirMode,obtainCompleteMessage());
pendingCallInECM=false;
}
phone.unsetOnEcbModeExitResponse(this);
break;
case EVENT_CALL_WAITING_INFO_CDMA:
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
handleCallWaitingInfo((CdmaCallWaitingNotification)ar.result);
Log.d(LOG_TAG,""String_Node_Str"");
}
break;
case EVENT_THREE_WAY_DIAL_L2_RESULT_CDMA:
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
pendingMO.onConnectedInOrOut();
pendingMO=null;
}
break;
default :
{
throw new RuntimeException(""String_Node_Str"");
}
}
}"
24002,"/** 
 * Stops all speech output and removes any utterances still in the queue globally.
 */
private int stopAll(String callingApp){
  int result=TextToSpeech.TTS_ERROR;
  boolean speechQueueAvailable=false;
  try {
    speechQueueAvailable=speechQueueLock.tryLock(1000,TimeUnit.MILLISECONDS);
    if (speechQueueAvailable) {
      for (int i=mSpeechQueue.size() - 1; i > -1; i--) {
        if (mSpeechQueue.get(i).mType != SpeechItem.TEXT_TO_FILE) {
          mSpeechQueue.remove(i);
        }
      }
      if ((mCurrentSpeechItem != null) && ((mCurrentSpeechItem.mType != SpeechItem.TEXT_TO_FILE) || mCurrentSpeechItem.mCallingApp.equals(callingApp))) {
        result=sNativeSynth.stop();
        mKillList.put(mCurrentSpeechItem,true);
        if (mPlayer != null) {
          try {
            mPlayer.stop();
          }
 catch (          IllegalStateException e) {
          }
        }
        mIsSpeaking=false;
        mCurrentSpeechItem=null;
      }
 else {
        result=TextToSpeech.TTS_SUCCESS;
      }
      Log.i(""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
 finally {
    if (speechQueueAvailable) {
      speechQueueLock.unlock();
    }
    return result;
  }
}","/** 
 * Stops all speech output and removes any utterances still in the queue globally.
 */
private int stopAll(String callingApp){
  int result=TextToSpeech.TTS_ERROR;
  boolean speechQueueAvailable=false;
  try {
    speechQueueAvailable=speechQueueLock.tryLock(SPEECHQUEUELOCK_TIMEOUT,TimeUnit.MILLISECONDS);
    if (speechQueueAvailable) {
      for (int i=mSpeechQueue.size() - 1; i > -1; i--) {
        if (mSpeechQueue.get(i).mType != SpeechItem.TEXT_TO_FILE) {
          mSpeechQueue.remove(i);
        }
      }
      if ((mCurrentSpeechItem != null) && ((mCurrentSpeechItem.mType != SpeechItem.TEXT_TO_FILE) || mCurrentSpeechItem.mCallingApp.equals(callingApp))) {
        result=sNativeSynth.stop();
        mKillList.put(mCurrentSpeechItem,true);
        if (mPlayer != null) {
          try {
            mPlayer.stop();
          }
 catch (          IllegalStateException e) {
          }
        }
        mIsSpeaking=false;
        mCurrentSpeechItem=null;
      }
 else {
        result=TextToSpeech.TTS_SUCCESS;
      }
      Log.i(""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  InterruptedException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
 finally {
    if (speechQueueAvailable) {
      speechQueueLock.unlock();
    }
    return result;
  }
}"
24003,"private void processSpeechQueue(){
  boolean speechQueueAvailable=false;
  try {
    speechQueueAvailable=speechQueueLock.tryLock();
    if (!speechQueueAvailable) {
      return;
    }
    if (mSpeechQueue.size() < 1) {
      mIsSpeaking=false;
      broadcastTtsQueueProcessingCompleted();
      return;
    }
    mCurrentSpeechItem=mSpeechQueue.get(0);
    mIsSpeaking=true;
    SoundResource sr=getSoundResource(mCurrentSpeechItem);
    Log.i(""String_Node_Str"",""String_Node_Str"" + mCurrentSpeechItem.mText);
    if (sr == null) {
      if (mCurrentSpeechItem.mType == SpeechItem.TEXT) {
        mCurrentSpeechItem=splitCurrentTextIfNeeded(mCurrentSpeechItem);
        speakInternalOnly(mCurrentSpeechItem);
      }
 else       if (mCurrentSpeechItem.mType == SpeechItem.TEXT_TO_FILE) {
        synthToFileInternalOnly(mCurrentSpeechItem);
      }
 else {
        silence(mCurrentSpeechItem);
      }
    }
 else {
      cleanUpPlayer();
      if (sr.mSourcePackageName == PKGNAME) {
        mPlayer=MediaPlayer.create(this,sr.mResId);
      }
 else       if (sr.mSourcePackageName != null) {
        Context ctx;
        try {
          ctx=this.createPackageContext(sr.mSourcePackageName,0);
        }
 catch (        NameNotFoundException e) {
          e.printStackTrace();
          mSpeechQueue.remove(0);
          mIsSpeaking=false;
          return;
        }
        mPlayer=MediaPlayer.create(ctx,sr.mResId);
      }
 else {
        mPlayer=MediaPlayer.create(this,Uri.parse(sr.mFilename));
      }
      if (mPlayer == null) {
        mSpeechQueue.clear();
        mIsSpeaking=false;
        return;
      }
      mPlayer.setOnCompletionListener(this);
      try {
        mPlayer.setAudioStreamType(getStreamTypeFromParams(mCurrentSpeechItem.mParams));
        mPlayer.start();
      }
 catch (      IllegalStateException e) {
        mSpeechQueue.clear();
        mIsSpeaking=false;
        cleanUpPlayer();
        return;
      }
    }
    if (mSpeechQueue.size() > 0) {
      mSpeechQueue.remove(0);
    }
  }
  finally {
    if (speechQueueAvailable) {
      speechQueueLock.unlock();
    }
  }
}","private void processSpeechQueue(){
  boolean speechQueueAvailable=false;
  try {
    speechQueueAvailable=speechQueueLock.tryLock(SPEECHQUEUELOCK_TIMEOUT,TimeUnit.MILLISECONDS);
    if (!speechQueueAvailable) {
      Log.e(""String_Node_Str"",""String_Node_Str"");
      return;
    }
    if (mSpeechQueue.size() < 1) {
      mIsSpeaking=false;
      broadcastTtsQueueProcessingCompleted();
      return;
    }
    mCurrentSpeechItem=mSpeechQueue.get(0);
    mIsSpeaking=true;
    SoundResource sr=getSoundResource(mCurrentSpeechItem);
    Log.i(""String_Node_Str"",""String_Node_Str"" + mCurrentSpeechItem.mText);
    if (sr == null) {
      if (mCurrentSpeechItem.mType == SpeechItem.TEXT) {
        mCurrentSpeechItem=splitCurrentTextIfNeeded(mCurrentSpeechItem);
        speakInternalOnly(mCurrentSpeechItem);
      }
 else       if (mCurrentSpeechItem.mType == SpeechItem.TEXT_TO_FILE) {
        synthToFileInternalOnly(mCurrentSpeechItem);
      }
 else {
        silence(mCurrentSpeechItem);
      }
    }
 else {
      cleanUpPlayer();
      if (sr.mSourcePackageName == PKGNAME) {
        mPlayer=MediaPlayer.create(this,sr.mResId);
      }
 else       if (sr.mSourcePackageName != null) {
        Context ctx;
        try {
          ctx=this.createPackageContext(sr.mSourcePackageName,0);
        }
 catch (        NameNotFoundException e) {
          e.printStackTrace();
          mSpeechQueue.remove(0);
          mIsSpeaking=false;
          return;
        }
        mPlayer=MediaPlayer.create(ctx,sr.mResId);
      }
 else {
        mPlayer=MediaPlayer.create(this,Uri.parse(sr.mFilename));
      }
      if (mPlayer == null) {
        mSpeechQueue.clear();
        mIsSpeaking=false;
        return;
      }
      mPlayer.setOnCompletionListener(this);
      try {
        mPlayer.setAudioStreamType(getStreamTypeFromParams(mCurrentSpeechItem.mParams));
        mPlayer.start();
      }
 catch (      IllegalStateException e) {
        mSpeechQueue.clear();
        mIsSpeaking=false;
        cleanUpPlayer();
        return;
      }
    }
    if (mSpeechQueue.size() > 0) {
      mSpeechQueue.remove(0);
    }
  }
 catch (  InterruptedException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
 finally {
    if (speechQueueAvailable) {
      speechQueueLock.unlock();
    }
  }
}"
24004,"/** 
 * @see AudioManager#reloadAudioSettings() 
 */
public void reloadAudioSettings(){
  readPersistedSettings();
  int numStreamTypes=AudioSystem.getNumStreamTypes();
  for (int streamType=0; streamType < numStreamTypes; streamType++) {
    VolumeStreamState streamState=mStreamStates[streamType];
    if (streamType != AudioSystem.STREAM_BLUETOOTH_SCO) {
      String settingName=System.VOLUME_SETTINGS[streamType];
      String lastAudibleSettingName=settingName + System.APPEND_FOR_LAST_AUDIBLE;
      int index=Settings.System.getInt(mContentResolver,settingName,AudioManager.DEFAULT_STREAM_VOLUME[streamType]);
      if (STREAM_VOLUME_ALIAS[streamType] != streamType) {
        index=rescaleIndex(index * 10,STREAM_VOLUME_ALIAS[streamType],streamType);
      }
 else {
        index*=10;
      }
      streamState.mIndex=streamState.getValidIndex(index);
      index=(index + 5) / 10;
      index=Settings.System.getInt(mContentResolver,lastAudibleSettingName,(index > 0) ? index : AudioManager.DEFAULT_STREAM_VOLUME[streamType]);
      if (STREAM_VOLUME_ALIAS[streamType] != streamType) {
        index=rescaleIndex(index * 10,STREAM_VOLUME_ALIAS[streamType],streamType);
      }
 else {
        index*=10;
      }
      streamState.mLastAudibleIndex=streamState.getValidIndex(index);
    }
    if (streamState.muteCount() != 0 && !isStreamAffectedByMute(streamType)) {
      int size=streamState.mDeathHandlers.size();
      for (int i=0; i < size; i++) {
        streamState.mDeathHandlers.get(i).mMuteCount=1;
        streamState.mDeathHandlers.get(i).mute(false);
      }
    }
    if (streamState.muteCount() == 0) {
      setStreamVolumeIndex(streamType,streamState.mIndex);
    }
  }
  setRingerModeInt(getRingerMode(),false);
}","/** 
 * @see AudioManager#reloadAudioSettings() 
 */
public void reloadAudioSettings(){
  readPersistedSettings();
  int numStreamTypes=AudioSystem.getNumStreamTypes();
  for (int streamType=0; streamType < numStreamTypes; streamType++) {
    VolumeStreamState streamState=mStreamStates[streamType];
    String settingName=System.VOLUME_SETTINGS[STREAM_VOLUME_ALIAS[streamType]];
    String lastAudibleSettingName=settingName + System.APPEND_FOR_LAST_AUDIBLE;
    int index=Settings.System.getInt(mContentResolver,settingName,AudioManager.DEFAULT_STREAM_VOLUME[streamType]);
    if (STREAM_VOLUME_ALIAS[streamType] != streamType) {
      index=rescaleIndex(index * 10,STREAM_VOLUME_ALIAS[streamType],streamType);
    }
 else {
      index*=10;
    }
    streamState.mIndex=streamState.getValidIndex(index);
    index=(index + 5) / 10;
    index=Settings.System.getInt(mContentResolver,lastAudibleSettingName,(index > 0) ? index : AudioManager.DEFAULT_STREAM_VOLUME[streamType]);
    if (STREAM_VOLUME_ALIAS[streamType] != streamType) {
      index=rescaleIndex(index * 10,STREAM_VOLUME_ALIAS[streamType],streamType);
    }
 else {
      index*=10;
    }
    streamState.mLastAudibleIndex=streamState.getValidIndex(index);
    if (streamState.muteCount() != 0 && !isStreamAffectedByMute(streamType)) {
      int size=streamState.mDeathHandlers.size();
      for (int i=0; i < size; i++) {
        streamState.mDeathHandlers.get(i).mMuteCount=1;
        streamState.mDeathHandlers.get(i).mute(false);
      }
    }
    if (streamState.muteCount() == 0) {
      setStreamVolumeIndex(streamType,streamState.mIndex);
    }
  }
  setRingerModeInt(getRingerMode(),false);
}"
24005,"/** 
 * Recycles an event if it can be safely recycled. The condition is that no not notified service is interested in the event.
 * @param event The event.
 */
private void tryRecycleLocked(AccessibilityEvent event){
  int eventType=event.getEventType();
  List<Service> services=mServices;
  for (int i=0, count=services.size(); i < count; i++) {
    Service service=services.get(i);
    if (service.mPendingEvents.get(eventType) == event) {
      return;
    }
  }
  event.recycle();
}","/** 
 * Recycles an event if it can be safely recycled. The condition is that no not notified service is interested in the event.
 * @param event The event.
 */
private void tryRecycleLocked(AccessibilityEvent event){
  if (event == null) {
    return;
  }
  int eventType=event.getEventType();
  List<Service> services=mServices;
  for (int i=0, count=services.size(); i < count; i++) {
    Service service=services.get(i);
    if (service.mPendingEvents.get(eventType) == event) {
      return;
    }
  }
  event.recycle();
}"
24006,"/** 
 * Request the device MDN / H_SID / H_NID / MIN. ""response"" is const char  [0] is MDN if CDMA subscription is available [1] is H_SID (Home SID) if CDMA subscription is available [2] is H_NID (Home NID) if CDMA subscription is available [3] is MIN (10 digits, MIN2+MIN1) if CDMA subscription is available
 */
public void getCDMASubscription(Message response);","/** 
 * Request the device MDN / H_SID / H_NID / MIN. ""response"" is const char  [0] is MDN if CDMA subscription is available [1] is H_SID (Home SID) in hexadecimal if CDMA subscription is available [2] is H_NID (Home NID) in hexadecimal if CDMA subscription is available [3] is MIN (10 digits, MIN2+MIN1) if CDMA subscription is available
 */
public void getCDMASubscription(Message response);"
24007,"@Override public void handleMessage(Message msg){
  AsyncResult ar;
  int[] ints;
  String[] strings;
switch (msg.what) {
case EVENT_RADIO_AVAILABLE:
    break;
case EVENT_RUIM_READY:
  isSubscriptionFromRuim=true;
if (mNeedToRegForRuimLoaded) {
  phone.mRuimRecords.registerForRecordsLoaded(this,EVENT_RUIM_RECORDS_LOADED,null);
  mNeedToRegForRuimLoaded=false;
}
cm.getCDMASubscription(obtainMessage(EVENT_POLL_STATE_CDMA_SUBSCRIPTION));
if (DBG) log(""String_Node_Str"");
pollState();
queueNextSignalStrengthPoll();
break;
case EVENT_NV_READY:
isSubscriptionFromRuim=false;
cm.getCDMASubscription(obtainMessage(EVENT_POLL_STATE_CDMA_SUBSCRIPTION));
pollState();
queueNextSignalStrengthPoll();
break;
case EVENT_RADIO_STATE_CHANGED:
setPowerStateToDesired();
pollState();
break;
case EVENT_NETWORK_STATE_CHANGED_CDMA:
pollState();
break;
case EVENT_GET_SIGNAL_STRENGTH:
if (!(cm.getRadioState().isOn()) || (cm.getRadioState().isGsm())) {
return;
}
ar=(AsyncResult)msg.obj;
onSignalStrengthResult(ar);
queueNextSignalStrengthPoll();
break;
case EVENT_GET_LOC_DONE_CDMA:
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
String states[]=(String[])ar.result;
int baseStationId=-1;
int baseStationLongitude=-1;
int baseStationLatitude=-1;
int baseStationData[]={-1,-1,-1};
if (states.length == 3) {
for (int i=0; i < states.length; i++) {
try {
if (states[i] != null && states[i].length() > 0) {
baseStationData[i]=Integer.parseInt(states[i],16);
}
}
 catch (NumberFormatException ex) {
Log.w(LOG_TAG,""String_Node_Str"" + ex);
}
}
}
if (cellLoc.getBaseStationId() != baseStationData[0] || cellLoc.getBaseStationLatitude() != baseStationData[1] || cellLoc.getBaseStationLongitude() != baseStationData[2]) {
cellLoc.setCellLocationData(baseStationData[0],baseStationData[1],baseStationData[2]);
phone.notifyLocationChanged();
}
}
if (ar.userObj != null) {
AsyncResult.forMessage(((Message)ar.userObj)).exception=ar.exception;
((Message)ar.userObj).sendToTarget();
}
break;
case EVENT_POLL_STATE_REGISTRATION_CDMA:
case EVENT_POLL_STATE_OPERATOR_CDMA:
ar=(AsyncResult)msg.obj;
handlePollStateResult(msg.what,ar);
break;
case EVENT_POLL_STATE_CDMA_SUBSCRIPTION:
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
String cdmaSubscription[]=(String[])ar.result;
if (cdmaSubscription != null && cdmaSubscription.length >= 5) {
mMdn=cdmaSubscription[0];
if (cdmaSubscription[1] != null) {
String[] sid=cdmaSubscription[1].split(""String_Node_Str"");
mHomeSystemId=sid.length > 0 ? Integer.parseInt(sid[0]) : 0;
}
if (cdmaSubscription[2] != null) {
String[] nid=cdmaSubscription[2].split(""String_Node_Str"");
mHomeNetworkId=nid.length > 0 ? Integer.parseInt(nid[0]) : 0;
}
mMin=cdmaSubscription[3];
mPrlVersion=cdmaSubscription[4];
Log.d(LOG_TAG,""String_Node_Str"" + mMdn);
}
 else {
Log.w(LOG_TAG,""String_Node_Str"" + cdmaSubscription.length);
}
}
break;
case EVENT_POLL_SIGNAL_STRENGTH:
cm.getSignalStrength(obtainMessage(EVENT_GET_SIGNAL_STRENGTH));
break;
case EVENT_NITZ_TIME:
ar=(AsyncResult)msg.obj;
String nitzString=(String)((Object[])ar.result)[0];
long nitzReceiveTime=((Long)((Object[])ar.result)[1]).longValue();
setTimeFromNITZString(nitzString,nitzReceiveTime);
break;
case EVENT_SIGNAL_STRENGTH_UPDATE:
ar=(AsyncResult)msg.obj;
dontPollSignalStrength=true;
onSignalStrengthResult(ar);
break;
case EVENT_RUIM_RECORDS_LOADED:
updateSpnDisplay();
break;
case EVENT_LOCATION_UPDATES_ENABLED:
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
getLacAndCid(null);
}
break;
case EVENT_ERI_FILE_LOADED:
if (DBG) log(""String_Node_Str"");
pollState();
break;
case EVENT_OTA_PROVISION_STATUS_CHANGE:
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
ints=(int[])ar.result;
int otaStatus=ints[0];
if (otaStatus == phone.CDMA_OTA_PROVISION_STATUS_COMMITTED || otaStatus == phone.CDMA_OTA_PROVISION_STATUS_OTAPA_STOPPED) {
Log.d(LOG_TAG,""String_Node_Str"");
cm.getCDMASubscription(obtainMessage(EVENT_POLL_STATE_CDMA_SUBSCRIPTION));
}
}
break;
default :
Log.e(LOG_TAG,""String_Node_Str"" + msg.what);
break;
}
}","@Override public void handleMessage(Message msg){
  AsyncResult ar;
  int[] ints;
  String[] strings;
switch (msg.what) {
case EVENT_RADIO_AVAILABLE:
    break;
case EVENT_RUIM_READY:
  isSubscriptionFromRuim=true;
if (mNeedToRegForRuimLoaded) {
  phone.mRuimRecords.registerForRecordsLoaded(this,EVENT_RUIM_RECORDS_LOADED,null);
  mNeedToRegForRuimLoaded=false;
}
cm.getCDMASubscription(obtainMessage(EVENT_POLL_STATE_CDMA_SUBSCRIPTION));
if (DBG) log(""String_Node_Str"");
pollState();
queueNextSignalStrengthPoll();
break;
case EVENT_NV_READY:
isSubscriptionFromRuim=false;
cm.getCDMASubscription(obtainMessage(EVENT_POLL_STATE_CDMA_SUBSCRIPTION));
pollState();
queueNextSignalStrengthPoll();
break;
case EVENT_RADIO_STATE_CHANGED:
setPowerStateToDesired();
pollState();
break;
case EVENT_NETWORK_STATE_CHANGED_CDMA:
pollState();
break;
case EVENT_GET_SIGNAL_STRENGTH:
if (!(cm.getRadioState().isOn()) || (cm.getRadioState().isGsm())) {
return;
}
ar=(AsyncResult)msg.obj;
onSignalStrengthResult(ar);
queueNextSignalStrengthPoll();
break;
case EVENT_GET_LOC_DONE_CDMA:
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
String states[]=(String[])ar.result;
int baseStationId=-1;
int baseStationLongitude=-1;
int baseStationLatitude=-1;
int baseStationData[]={-1,-1,-1};
if (states.length == 3) {
for (int i=0; i < states.length; i++) {
try {
if (states[i] != null && states[i].length() > 0) {
baseStationData[i]=Integer.parseInt(states[i],16);
}
}
 catch (NumberFormatException ex) {
Log.w(LOG_TAG,""String_Node_Str"" + ex);
}
}
}
if (cellLoc.getBaseStationId() != baseStationData[0] || cellLoc.getBaseStationLatitude() != baseStationData[1] || cellLoc.getBaseStationLongitude() != baseStationData[2]) {
cellLoc.setCellLocationData(baseStationData[0],baseStationData[1],baseStationData[2]);
phone.notifyLocationChanged();
}
}
if (ar.userObj != null) {
AsyncResult.forMessage(((Message)ar.userObj)).exception=ar.exception;
((Message)ar.userObj).sendToTarget();
}
break;
case EVENT_POLL_STATE_REGISTRATION_CDMA:
case EVENT_POLL_STATE_OPERATOR_CDMA:
ar=(AsyncResult)msg.obj;
handlePollStateResult(msg.what,ar);
break;
case EVENT_POLL_STATE_CDMA_SUBSCRIPTION:
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
String cdmaSubscription[]=(String[])ar.result;
if (cdmaSubscription != null && cdmaSubscription.length >= 5) {
mMdn=cdmaSubscription[0];
if (cdmaSubscription[1] != null) {
String[] sid=cdmaSubscription[1].split(""String_Node_Str"");
mHomeSystemId=sid.length > 0 ? Integer.parseInt(sid[0],16) : 0;
}
if (cdmaSubscription[2] != null) {
String[] nid=cdmaSubscription[2].split(""String_Node_Str"");
mHomeNetworkId=nid.length > 0 ? Integer.parseInt(nid[0],16) : 0;
}
mMin=cdmaSubscription[3];
mPrlVersion=cdmaSubscription[4];
Log.d(LOG_TAG,""String_Node_Str"" + mMdn);
}
 else {
Log.w(LOG_TAG,""String_Node_Str"" + cdmaSubscription.length);
}
}
break;
case EVENT_POLL_SIGNAL_STRENGTH:
cm.getSignalStrength(obtainMessage(EVENT_GET_SIGNAL_STRENGTH));
break;
case EVENT_NITZ_TIME:
ar=(AsyncResult)msg.obj;
String nitzString=(String)((Object[])ar.result)[0];
long nitzReceiveTime=((Long)((Object[])ar.result)[1]).longValue();
setTimeFromNITZString(nitzString,nitzReceiveTime);
break;
case EVENT_SIGNAL_STRENGTH_UPDATE:
ar=(AsyncResult)msg.obj;
dontPollSignalStrength=true;
onSignalStrengthResult(ar);
break;
case EVENT_RUIM_RECORDS_LOADED:
updateSpnDisplay();
break;
case EVENT_LOCATION_UPDATES_ENABLED:
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
getLacAndCid(null);
}
break;
case EVENT_ERI_FILE_LOADED:
if (DBG) log(""String_Node_Str"");
pollState();
break;
case EVENT_OTA_PROVISION_STATUS_CHANGE:
ar=(AsyncResult)msg.obj;
if (ar.exception == null) {
ints=(int[])ar.result;
int otaStatus=ints[0];
if (otaStatus == phone.CDMA_OTA_PROVISION_STATUS_COMMITTED || otaStatus == phone.CDMA_OTA_PROVISION_STATUS_OTAPA_STOPPED) {
Log.d(LOG_TAG,""String_Node_Str"");
cm.getCDMASubscription(obtainMessage(EVENT_POLL_STATE_CDMA_SUBSCRIPTION));
}
}
break;
default :
Log.e(LOG_TAG,""String_Node_Str"" + msg.what);
break;
}
}"
24008,"/** 
 * @return Whether music is being played right now.
 */
boolean isMusicActive(){
  final IAudioService audio=getAudioInterface();
  if (audio == null) {
    Log.w(TAG,""String_Node_Str"");
    return false;
  }
  try {
    return audio.isMusicActive();
  }
 catch (  RemoteException e) {
    Log.w(TAG,""String_Node_Str"" + e);
    return false;
  }
}","/** 
 * @return Whether music is being played right now.
 */
boolean isMusicActive(){
  final AudioManager am=(AudioManager)mContext.getSystemService(Context.AUDIO_SERVICE);
  if (am == null) {
    Log.w(TAG,""String_Node_Str"");
    return false;
  }
  return am.isMusicActive();
}"
24009,"/** 
 * Check a parcel containing metadata is well formed. The header is checked as well as the individual records format. However, the data inside the record is not checked because we do lazy access (we check/unmarshall only data the user asks for.) Format of a metadata parcel: <pre> 1                   2                   3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                     metadata total size                       | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |     'M'       |     'E'       |     'T'       |     'A'       | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                                                               | |                .... metadata records ....                     | |                                                               | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ </pre>
 * @param parcel With the serialized data. Metadata keeps areference on it to access it later on. The caller should not modify the parcel after this call (and not call recycle on it.)
 * @return false if an error occurred.
 */
public boolean parse(Parcel parcel){
  if (parcel.dataAvail() < kMetaHeaderSize) {
    Log.e(TAG,""String_Node_Str"" + parcel.dataAvail());
    return false;
  }
  final int pin=parcel.dataPosition();
  final int size=parcel.readInt();
  if (parcel.dataAvail() < size || size < kMetaHeaderSize) {
    Log.e(TAG,""String_Node_Str"" + size);
    parcel.setDataPosition(pin);
    return false;
  }
  final int kShouldBeMetaMarker=parcel.readInt();
  if (kShouldBeMetaMarker != kMetaMarker) {
    Log.e(TAG,""String_Node_Str"" + Integer.toHexString(kShouldBeMetaMarker));
    parcel.setDataPosition(pin);
    return false;
  }
  if (!scanAllRecords(parcel,size - kMetaHeaderSize)) {
    parcel.setDataPosition(pin);
    return false;
  }
  mParcel=parcel;
  return true;
}","/** 
 * Check a parcel containing metadata is well formed. The header is checked as well as the individual records format. However, the data inside the record is not checked because we do lazy access (we check/unmarshall only data the user asks for.) Format of a metadata parcel: <pre> 1                   2                   3 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                     metadata total size                       | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |     'M'       |     'E'       |     'T'       |     'A'       | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ |                                                               | |                .... metadata records ....                     | |                                                               | +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ </pre>
 * @param parcel With the serialized data. Metadata keeps areference on it to access it later on. The caller should not modify the parcel after this call (and not call recycle on it.)
 * @return false if an error occurred.
 */
public boolean parse(Parcel parcel){
  if (parcel.dataAvail() < kMetaHeaderSize) {
    Log.e(TAG,""String_Node_Str"" + parcel.dataAvail());
    return false;
  }
  final int pin=parcel.dataPosition();
  final int size=parcel.readInt();
  if (parcel.dataAvail() + 4 < size || size < kMetaHeaderSize) {
    Log.e(TAG,""String_Node_Str"" + size + ""String_Node_Str""+ parcel.dataAvail()+ ""String_Node_Str""+ pin);
    parcel.setDataPosition(pin);
    return false;
  }
  final int kShouldBeMetaMarker=parcel.readInt();
  if (kShouldBeMetaMarker != kMetaMarker) {
    Log.e(TAG,""String_Node_Str"" + Integer.toHexString(kShouldBeMetaMarker));
    parcel.setDataPosition(pin);
    return false;
  }
  if (!scanAllRecords(parcel,size - kMetaHeaderSize)) {
    parcel.setDataPosition(pin);
    return false;
  }
  mParcel=parcel;
  return true;
}"
24010,"private void assertParse() throws Exception {
  mParcel.writeInt(kToken);
  mParcel.setDataPosition(0);
  assertTrue(mMetadata.parse(mParcel));
  assertEquals(kToken,mParcel.readInt());
}","private void assertParse() throws Exception {
  mParcel.setDataPosition(0);
  assertTrue(mMetadata.parse(mParcel));
}"
24011,"void acceptCall() throws CallStateException {
  if (ringingCall.getState() == CdmaCall.State.INCOMING) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    setMute(false);
    cm.acceptCall(obtainCompleteMessage());
  }
 else   if (ringingCall.getState() == CdmaCall.State.WAITING) {
    CdmaConnection cwConn=(CdmaConnection)(ringingCall.getLatestConnection());
    cwConn.updateParent(ringingCall,foregroundCall);
    cwConn.onConnectedInOrOut();
    switchWaitingOrHoldingAndActive();
  }
 else {
    throw new CallStateException(""String_Node_Str"");
  }
}","void acceptCall() throws CallStateException {
  if (ringingCall.getState() == CdmaCall.State.INCOMING) {
    Log.i(""String_Node_Str"",""String_Node_Str"");
    setMute(false);
    cm.acceptCall(obtainCompleteMessage());
  }
 else   if (ringingCall.getState() == CdmaCall.State.WAITING) {
    CdmaConnection cwConn=(CdmaConnection)(ringingCall.getLatestConnection());
    cwConn.updateParent(ringingCall,foregroundCall);
    cwConn.onConnectedInOrOut();
    updatePhoneState();
    switchWaitingOrHoldingAndActive();
  }
 else {
    throw new CallStateException(""String_Node_Str"");
  }
}"
24012,"protected void handlePollCalls(AsyncResult ar){
  List polledCalls;
  if (ar.exception == null) {
    polledCalls=(List)ar.result;
  }
 else   if (isCommandExceptionRadioNotAvailable(ar.exception)) {
    polledCalls=new ArrayList();
  }
 else {
    pollCallsAfterDelay();
    return;
  }
  Connection newRinging=null;
  boolean hasNonHangupStateChanged=false;
  boolean needsPollDelay=false;
  boolean unknownConnectionAppeared=false;
  for (int i=0, curDC=0, dcSize=polledCalls.size(); i < connections.length; i++) {
    CdmaConnection conn=connections[i];
    DriverCall dc=null;
    if (curDC < dcSize) {
      dc=(DriverCall)polledCalls.get(curDC);
      if (dc.index == i + 1) {
        curDC++;
      }
 else {
        dc=null;
      }
    }
    if (DBG_POLL)     log(""String_Node_Str"" + i + ""String_Node_Str""+ conn+ ""String_Node_Str""+ dc);
    if (conn == null && dc != null) {
      if (pendingMO != null && pendingMO.compareTo(dc)) {
        if (DBG_POLL)         log(""String_Node_Str"" + pendingMO);
        connections[i]=pendingMO;
        pendingMO.index=i;
        pendingMO.update(dc);
        pendingMO=null;
        if (hangupPendingMO) {
          hangupPendingMO=false;
          try {
            if (Phone.DEBUG_PHONE)             log(""String_Node_Str"" + i);
            hangup(connections[i]);
          }
 catch (          CallStateException ex) {
            Log.e(LOG_TAG,""String_Node_Str"");
          }
          return;
        }
      }
 else {
        connections[i]=new CdmaConnection(phone.getContext(),dc,this,i);
        if (connections[i].getCall() == ringingCall) {
          newRinging=connections[i];
        }
 else {
          Log.i(LOG_TAG,""String_Node_Str"" + dc);
          if (dc.state != DriverCall.State.ALERTING && dc.state != DriverCall.State.DIALING) {
            connections[i].connectTime=System.currentTimeMillis();
          }
          unknownConnectionAppeared=true;
        }
      }
      hasNonHangupStateChanged=true;
    }
 else     if (conn != null && dc == null) {
      int count=foregroundCall.connections.size();
      if (count == 0) {
        droppedDuringPoll.add(conn);
      }
 else {
        for (int n=0; n < count; n++) {
          CdmaConnection cn=(CdmaConnection)foregroundCall.connections.get(n);
          droppedDuringPoll.add(cn);
        }
      }
      foregroundCall.setGeneric(false);
      connections[i]=null;
    }
 else     if (conn != null && dc != null && !conn.compareTo(dc)) {
      droppedDuringPoll.add(conn);
      connections[i]=new CdmaConnection(phone.getContext(),dc,this,i);
      if (connections[i].getCall() == ringingCall) {
        newRinging=connections[i];
      }
      hasNonHangupStateChanged=true;
    }
 else     if (conn != null && dc != null) {
      boolean changed;
      changed=conn.update(dc);
      hasNonHangupStateChanged=hasNonHangupStateChanged || changed;
    }
    if (REPEAT_POLLING) {
      if (dc != null) {
        if ((dc.state == DriverCall.State.DIALING) || (dc.state == DriverCall.State.ALERTING) || (dc.state == DriverCall.State.INCOMING)|| (dc.state == DriverCall.State.WAITING)) {
          needsPollDelay=true;
        }
      }
    }
  }
  if (pendingMO != null) {
    Log.d(LOG_TAG,""String_Node_Str"" + foregroundCall.getState());
    droppedDuringPoll.add(pendingMO);
    pendingMO=null;
    hangupPendingMO=false;
    if (pendingCallInECM) {
      pendingCallInECM=false;
    }
  }
  if (newRinging != null) {
    phone.notifyNewRingingConnection(newRinging);
  }
  for (int i=droppedDuringPoll.size() - 1; i >= 0; i--) {
    CdmaConnection conn=droppedDuringPoll.get(i);
    if (conn.isIncoming() && conn.getConnectTime() == 0) {
      Connection.DisconnectCause cause;
      if (conn.cause == Connection.DisconnectCause.LOCAL) {
        cause=Connection.DisconnectCause.INCOMING_REJECTED;
      }
 else {
        cause=Connection.DisconnectCause.INCOMING_MISSED;
      }
      if (Phone.DEBUG_PHONE) {
        log(""String_Node_Str"" + conn.cause);
        log(""String_Node_Str"" + cause);
      }
      droppedDuringPoll.remove(i);
      conn.onDisconnect(cause);
    }
 else     if (conn.cause == Connection.DisconnectCause.LOCAL) {
      droppedDuringPoll.remove(i);
      conn.onDisconnect(Connection.DisconnectCause.LOCAL);
    }
 else     if (conn.cause == Connection.DisconnectCause.INVALID_NUMBER) {
      droppedDuringPoll.remove(i);
      conn.onDisconnect(Connection.DisconnectCause.INVALID_NUMBER);
    }
  }
  if (droppedDuringPoll.size() > 0) {
    cm.getLastCallFailCause(obtainNoPollCompleteMessage(EVENT_GET_LAST_CALL_FAIL_CAUSE));
  }
  if (needsPollDelay) {
    pollCallsAfterDelay();
  }
  if (newRinging != null || hasNonHangupStateChanged) {
    internalClearDisconnected();
  }
  updatePhoneState();
  if (unknownConnectionAppeared) {
    phone.notifyUnknownConnection();
  }
  if (hasNonHangupStateChanged || newRinging != null) {
    phone.notifyPreciseCallStateChanged();
  }
}","protected void handlePollCalls(AsyncResult ar){
  List polledCalls;
  if (ar.exception == null) {
    polledCalls=(List)ar.result;
  }
 else   if (isCommandExceptionRadioNotAvailable(ar.exception)) {
    polledCalls=new ArrayList();
  }
 else {
    pollCallsAfterDelay();
    return;
  }
  Connection newRinging=null;
  boolean hasNonHangupStateChanged=false;
  boolean needsPollDelay=false;
  boolean unknownConnectionAppeared=false;
  for (int i=0, curDC=0, dcSize=polledCalls.size(); i < connections.length; i++) {
    CdmaConnection conn=connections[i];
    DriverCall dc=null;
    if (curDC < dcSize) {
      dc=(DriverCall)polledCalls.get(curDC);
      if (dc.index == i + 1) {
        curDC++;
      }
 else {
        dc=null;
      }
    }
    if (DBG_POLL)     log(""String_Node_Str"" + i + ""String_Node_Str""+ conn+ ""String_Node_Str""+ dc);
    if (conn == null && dc != null) {
      if (pendingMO != null && pendingMO.compareTo(dc)) {
        if (DBG_POLL)         log(""String_Node_Str"" + pendingMO);
        connections[i]=pendingMO;
        pendingMO.index=i;
        pendingMO.update(dc);
        pendingMO=null;
        if (hangupPendingMO) {
          hangupPendingMO=false;
          try {
            if (Phone.DEBUG_PHONE)             log(""String_Node_Str"" + i);
            hangup(connections[i]);
          }
 catch (          CallStateException ex) {
            Log.e(LOG_TAG,""String_Node_Str"");
          }
          return;
        }
      }
 else {
        connections[i]=new CdmaConnection(phone.getContext(),dc,this,i);
        if (connections[i].getCall() == ringingCall) {
          newRinging=connections[i];
        }
 else {
          Log.i(LOG_TAG,""String_Node_Str"" + dc);
          if (dc.state != DriverCall.State.ALERTING && dc.state != DriverCall.State.DIALING) {
            connections[i].connectTime=System.currentTimeMillis();
          }
          unknownConnectionAppeared=true;
        }
      }
      hasNonHangupStateChanged=true;
    }
 else     if (conn != null && dc == null) {
      int count=foregroundCall.connections.size();
      if (count == 0) {
        droppedDuringPoll.add(conn);
      }
 else {
        for (int n=0; n < count; n++) {
          CdmaConnection cn=(CdmaConnection)foregroundCall.connections.get(n);
          droppedDuringPoll.add(cn);
        }
      }
      foregroundCall.setGeneric(false);
      connections[i]=null;
    }
 else     if (conn != null && dc != null) {
      boolean changed;
      changed=conn.update(dc);
      hasNonHangupStateChanged=hasNonHangupStateChanged || changed;
    }
    if (REPEAT_POLLING) {
      if (dc != null) {
        if ((dc.state == DriverCall.State.DIALING) || (dc.state == DriverCall.State.ALERTING) || (dc.state == DriverCall.State.INCOMING)|| (dc.state == DriverCall.State.WAITING)) {
          needsPollDelay=true;
        }
      }
    }
  }
  if (pendingMO != null) {
    Log.d(LOG_TAG,""String_Node_Str"" + foregroundCall.getState());
    droppedDuringPoll.add(pendingMO);
    pendingMO=null;
    hangupPendingMO=false;
    if (pendingCallInECM) {
      pendingCallInECM=false;
    }
  }
  if (newRinging != null) {
    phone.notifyNewRingingConnection(newRinging);
  }
  for (int i=droppedDuringPoll.size() - 1; i >= 0; i--) {
    CdmaConnection conn=droppedDuringPoll.get(i);
    if (conn.isIncoming() && conn.getConnectTime() == 0) {
      Connection.DisconnectCause cause;
      if (conn.cause == Connection.DisconnectCause.LOCAL) {
        cause=Connection.DisconnectCause.INCOMING_REJECTED;
      }
 else {
        cause=Connection.DisconnectCause.INCOMING_MISSED;
      }
      if (Phone.DEBUG_PHONE) {
        log(""String_Node_Str"" + conn.cause);
        log(""String_Node_Str"" + cause);
      }
      droppedDuringPoll.remove(i);
      conn.onDisconnect(cause);
    }
 else     if (conn.cause == Connection.DisconnectCause.LOCAL) {
      droppedDuringPoll.remove(i);
      conn.onDisconnect(Connection.DisconnectCause.LOCAL);
    }
 else     if (conn.cause == Connection.DisconnectCause.INVALID_NUMBER) {
      droppedDuringPoll.remove(i);
      conn.onDisconnect(Connection.DisconnectCause.INVALID_NUMBER);
    }
  }
  if (droppedDuringPoll.size() > 0) {
    cm.getLastCallFailCause(obtainNoPollCompleteMessage(EVENT_GET_LAST_CALL_FAIL_CAUSE));
  }
  if (needsPollDelay) {
    pollCallsAfterDelay();
  }
  if (newRinging != null || hasNonHangupStateChanged) {
    internalClearDisconnected();
  }
  updatePhoneState();
  if (unknownConnectionAppeared) {
    phone.notifyUnknownConnection();
  }
  if (hasNonHangupStateChanged || newRinging != null) {
    phone.notifyPreciseCallStateChanged();
  }
}"
24013,"private void handleCallWaitingInfo(CdmaCallWaitingNotification cw){
  if (foregroundCall.connections.size() > 1) {
    foregroundCall.setGeneric(true);
  }
  ringingCall.setGeneric(false);
  new CdmaConnection(phone.getContext(),cw,this,ringingCall);
  notifyCallWaitingInfo(cw);
}","private void handleCallWaitingInfo(CdmaCallWaitingNotification cw){
  if (foregroundCall.connections.size() > 1) {
    foregroundCall.setGeneric(true);
  }
  ringingCall.setGeneric(false);
  new CdmaConnection(phone.getContext(),cw,this,ringingCall);
  updatePhoneState();
  notifyCallWaitingInfo(cw);
}"
24014,"private void persistVolume(VolumeStreamState streamState){
  System.putInt(mContentResolver,streamState.mVolumeIndexSettingName,streamState.mIndex);
  System.putInt(mContentResolver,streamState.mLastAudibleVolumeIndexSettingName,streamState.mLastAudibleIndex);
}","private void persistVolume(VolumeStreamState streamState){
  if (streamState.mStreamType != AudioManager.STREAM_BLUETOOTH_SCO) {
    System.putInt(mContentResolver,streamState.mVolumeIndexSettingName,streamState.mIndex);
    System.putInt(mContentResolver,streamState.mLastAudibleVolumeIndexSettingName,streamState.mLastAudibleIndex);
  }
}"
24015,"public ConfigurationInfo getDeviceConfigurationInfo(){
  ConfigurationInfo config=new ConfigurationInfo();
synchronized (this) {
    config.reqTouchScreen=mConfiguration.touchscreen;
    config.reqKeyboardType=mConfiguration.keyboard;
    config.reqNavigation=mConfiguration.navigation;
    if (mConfiguration.navigation != Configuration.NAVIGATION_NONAV) {
      config.reqInputFeatures|=ConfigurationInfo.INPUT_FEATURE_FIVE_WAY_NAV;
    }
    if (mConfiguration.keyboard != Configuration.KEYBOARD_UNDEFINED) {
      config.reqInputFeatures|=ConfigurationInfo.INPUT_FEATURE_HARD_KEYBOARD;
    }
  }
  return config;
}","public ConfigurationInfo getDeviceConfigurationInfo(){
  ConfigurationInfo config=new ConfigurationInfo();
synchronized (this) {
    config.reqTouchScreen=mConfiguration.touchscreen;
    config.reqKeyboardType=mConfiguration.keyboard;
    config.reqNavigation=mConfiguration.navigation;
    if (mConfiguration.navigation == Configuration.NAVIGATION_DPAD || mConfiguration.navigation == Configuration.NAVIGATION_TRACKBALL) {
      config.reqInputFeatures|=ConfigurationInfo.INPUT_FEATURE_FIVE_WAY_NAV;
    }
    if (mConfiguration.keyboard != Configuration.KEYBOARD_UNDEFINED && mConfiguration.keyboard != Configuration.KEYBOARD_NOKEYS) {
      config.reqInputFeatures|=ConfigurationInfo.INPUT_FEATURE_HARD_KEYBOARD;
    }
  }
  return config;
}"
24016,"private Uri endFile(FileCacheEntry entry,boolean ringtones,boolean notifications,boolean alarms,boolean music,boolean podcasts) throws RemoteException {
  Uri tableUri;
  boolean isAudio=MediaFile.isAudioFileType(mFileType);
  boolean isVideo=MediaFile.isVideoFileType(mFileType);
  boolean isImage=MediaFile.isImageFileType(mFileType);
  if (isVideo) {
    tableUri=mVideoUri;
  }
 else   if (isImage) {
    tableUri=mImagesUri;
  }
 else   if (isAudio) {
    tableUri=mAudioUri;
  }
 else {
    return null;
  }
  entry.mTableUri=tableUri;
  if (mArtist == null || mArtist.length() == 0) {
    mArtist=mAlbumArtist;
  }
  ContentValues values=toValues();
  String title=values.getAsString(MediaStore.MediaColumns.TITLE);
  if (TextUtils.isEmpty(title)) {
    title=values.getAsString(MediaStore.MediaColumns.DATA);
    int lastSlash=title.lastIndexOf('/');
    if (lastSlash >= 0) {
      lastSlash++;
      if (lastSlash < title.length()) {
        title=title.substring(lastSlash);
      }
    }
    int lastDot=title.lastIndexOf('.');
    if (lastDot > 0) {
      title=title.substring(0,lastDot);
    }
    values.put(MediaStore.MediaColumns.TITLE,title);
  }
  if (isAudio) {
    values.put(Audio.Media.IS_RINGTONE,ringtones);
    values.put(Audio.Media.IS_NOTIFICATION,notifications);
    values.put(Audio.Media.IS_ALARM,alarms);
    values.put(Audio.Media.IS_MUSIC,music);
    values.put(Audio.Media.IS_PODCAST,podcasts);
  }
 else   if (mFileType == MediaFile.FILE_TYPE_JPEG) {
    HashMap<String,String> exifData=ExifInterface.loadExifData(entry.mPath);
    if (exifData != null) {
      float[] latlng=ExifInterface.getLatLng(exifData);
      if (latlng != null) {
        values.put(Images.Media.LATITUDE,latlng[0]);
        values.put(Images.Media.LONGITUDE,latlng[1]);
      }
    }
  }
  Uri result=null;
  long rowId=entry.mRowId;
  if (rowId == 0) {
    result=mMediaProvider.insert(tableUri,values);
    if (result != null) {
      rowId=ContentUris.parseId(result);
      entry.mRowId=rowId;
    }
  }
 else {
    result=ContentUris.withAppendedId(tableUri,rowId);
    mMediaProvider.update(result,values,null,null);
  }
  if (mProcessGenres && mGenre != null) {
    String genre=mGenre;
    Uri uri=mGenreCache.get(genre);
    if (uri == null) {
      Cursor cursor=null;
      try {
        cursor=mMediaProvider.query(mGenresUri,GENRE_LOOKUP_PROJECTION,MediaStore.Audio.Genres.NAME + ""String_Node_Str"",new String[]{genre},null);
        if (cursor == null || cursor.getCount() == 0) {
          values.clear();
          values.put(MediaStore.Audio.Genres.NAME,genre);
          uri=mMediaProvider.insert(mGenresUri,values);
        }
 else {
          cursor.moveToNext();
          uri=ContentUris.withAppendedId(mGenresUri,cursor.getLong(0));
        }
        if (uri != null) {
          uri=Uri.withAppendedPath(uri,Genres.Members.CONTENT_DIRECTORY);
          mGenreCache.put(genre,uri);
        }
      }
  finally {
        if (cursor != null) {
          cursor.close();
        }
      }
    }
    if (uri != null) {
      values.clear();
      values.put(MediaStore.Audio.Genres.Members.AUDIO_ID,Long.valueOf(rowId));
      mMediaProvider.insert(uri,values);
    }
  }
  if (notifications && !mDefaultNotificationSet) {
    if (TextUtils.isEmpty(mDefaultNotificationFilename) || doesPathHaveFilename(entry.mPath,mDefaultNotificationFilename)) {
      setSettingIfNotSet(Settings.System.NOTIFICATION_SOUND,tableUri,rowId);
      mDefaultNotificationSet=true;
    }
  }
 else   if (ringtones && !mDefaultRingtoneSet) {
    if (TextUtils.isEmpty(mDefaultRingtoneFilename) || doesPathHaveFilename(entry.mPath,mDefaultRingtoneFilename)) {
      setSettingIfNotSet(Settings.System.RINGTONE,tableUri,rowId);
      mDefaultRingtoneSet=true;
    }
  }
  return result;
}","private Uri endFile(FileCacheEntry entry,boolean ringtones,boolean notifications,boolean alarms,boolean music,boolean podcasts) throws RemoteException {
  Uri tableUri;
  boolean isAudio=MediaFile.isAudioFileType(mFileType);
  boolean isVideo=MediaFile.isVideoFileType(mFileType);
  boolean isImage=MediaFile.isImageFileType(mFileType);
  if (isVideo) {
    tableUri=mVideoUri;
  }
 else   if (isImage) {
    tableUri=mImagesUri;
  }
 else   if (isAudio) {
    tableUri=mAudioUri;
  }
 else {
    return null;
  }
  entry.mTableUri=tableUri;
  if (mArtist == null || mArtist.length() == 0) {
    mArtist=mAlbumArtist;
  }
  ContentValues values=toValues();
  String title=values.getAsString(MediaStore.MediaColumns.TITLE);
  if (TextUtils.isEmpty(title.trim())) {
    title=values.getAsString(MediaStore.MediaColumns.DATA);
    int lastSlash=title.lastIndexOf('/');
    if (lastSlash >= 0) {
      lastSlash++;
      if (lastSlash < title.length()) {
        title=title.substring(lastSlash);
      }
    }
    int lastDot=title.lastIndexOf('.');
    if (lastDot > 0) {
      title=title.substring(0,lastDot);
    }
    values.put(MediaStore.MediaColumns.TITLE,title);
  }
  if (isAudio) {
    values.put(Audio.Media.IS_RINGTONE,ringtones);
    values.put(Audio.Media.IS_NOTIFICATION,notifications);
    values.put(Audio.Media.IS_ALARM,alarms);
    values.put(Audio.Media.IS_MUSIC,music);
    values.put(Audio.Media.IS_PODCAST,podcasts);
  }
 else   if (mFileType == MediaFile.FILE_TYPE_JPEG) {
    HashMap<String,String> exifData=ExifInterface.loadExifData(entry.mPath);
    if (exifData != null) {
      float[] latlng=ExifInterface.getLatLng(exifData);
      if (latlng != null) {
        values.put(Images.Media.LATITUDE,latlng[0]);
        values.put(Images.Media.LONGITUDE,latlng[1]);
      }
    }
  }
  Uri result=null;
  long rowId=entry.mRowId;
  if (rowId == 0) {
    result=mMediaProvider.insert(tableUri,values);
    if (result != null) {
      rowId=ContentUris.parseId(result);
      entry.mRowId=rowId;
    }
  }
 else {
    result=ContentUris.withAppendedId(tableUri,rowId);
    mMediaProvider.update(result,values,null,null);
  }
  if (mProcessGenres && mGenre != null) {
    String genre=mGenre;
    Uri uri=mGenreCache.get(genre);
    if (uri == null) {
      Cursor cursor=null;
      try {
        cursor=mMediaProvider.query(mGenresUri,GENRE_LOOKUP_PROJECTION,MediaStore.Audio.Genres.NAME + ""String_Node_Str"",new String[]{genre},null);
        if (cursor == null || cursor.getCount() == 0) {
          values.clear();
          values.put(MediaStore.Audio.Genres.NAME,genre);
          uri=mMediaProvider.insert(mGenresUri,values);
        }
 else {
          cursor.moveToNext();
          uri=ContentUris.withAppendedId(mGenresUri,cursor.getLong(0));
        }
        if (uri != null) {
          uri=Uri.withAppendedPath(uri,Genres.Members.CONTENT_DIRECTORY);
          mGenreCache.put(genre,uri);
        }
      }
  finally {
        if (cursor != null) {
          cursor.close();
        }
      }
    }
    if (uri != null) {
      values.clear();
      values.put(MediaStore.Audio.Genres.Members.AUDIO_ID,Long.valueOf(rowId));
      mMediaProvider.insert(uri,values);
    }
  }
  if (notifications && !mDefaultNotificationSet) {
    if (TextUtils.isEmpty(mDefaultNotificationFilename) || doesPathHaveFilename(entry.mPath,mDefaultNotificationFilename)) {
      setSettingIfNotSet(Settings.System.NOTIFICATION_SOUND,tableUri,rowId);
      mDefaultNotificationSet=true;
    }
  }
 else   if (ringtones && !mDefaultRingtoneSet) {
    if (TextUtils.isEmpty(mDefaultRingtoneFilename) || doesPathHaveFilename(entry.mPath,mDefaultRingtoneFilename)) {
      setSettingIfNotSet(Settings.System.RINGTONE,tableUri,rowId);
      mDefaultRingtoneSet=true;
    }
  }
  return result;
}"
24017,"public ConfigurationInfo getDeviceConfigurationInfo(){
  ConfigurationInfo config=new ConfigurationInfo();
synchronized (this) {
    config.reqTouchScreen=mConfiguration.touchscreen;
    config.reqKeyboardType=mConfiguration.keyboard;
    config.reqNavigation=mConfiguration.navigation;
    if (mConfiguration.navigation != Configuration.NAVIGATION_NONAV) {
      config.reqInputFeatures|=ConfigurationInfo.INPUT_FEATURE_FIVE_WAY_NAV;
    }
    if (mConfiguration.keyboard != Configuration.KEYBOARD_UNDEFINED) {
      config.reqInputFeatures|=ConfigurationInfo.INPUT_FEATURE_HARD_KEYBOARD;
    }
  }
  return config;
}","public ConfigurationInfo getDeviceConfigurationInfo(){
  ConfigurationInfo config=new ConfigurationInfo();
synchronized (this) {
    config.reqTouchScreen=mConfiguration.touchscreen;
    config.reqKeyboardType=mConfiguration.keyboard;
    config.reqNavigation=mConfiguration.navigation;
    if (mConfiguration.navigation == Configuration.NAVIGATION_DPAD || mConfiguration.navigation == Configuration.NAVIGATION_TRACKBALL) {
      config.reqInputFeatures|=ConfigurationInfo.INPUT_FEATURE_FIVE_WAY_NAV;
    }
    if (mConfiguration.keyboard != Configuration.KEYBOARD_UNDEFINED && mConfiguration.keyboard != Configuration.KEYBOARD_NOKEYS) {
      config.reqInputFeatures|=ConfigurationInfo.INPUT_FEATURE_HARD_KEYBOARD;
    }
  }
  return config;
}"
24018,"private final void updateBattery(Intent intent){
  mBatteryData.iconId=intent.getIntExtra(""String_Node_Str"",0);
  mBatteryData.iconLevel=intent.getIntExtra(""String_Node_Str"",0);
  mService.updateIcon(mBatteryIcon,mBatteryData,null);
  int plugged=intent.getIntExtra(""String_Node_Str"",0);
  int level=intent.getIntExtra(""String_Node_Str"",-1);
  if (false) {
    Log.d(TAG,""String_Node_Str"" + level + ""String_Node_Str""+ plugged+ ""String_Node_Str""+ mBatteryPlugged+ ""String_Node_Str""+ mBatteryLevel+ ""String_Node_Str""+ mBatteryThreshold+ ""String_Node_Str""+ mBatteryFirst);
  }
  int oldPlugged=mBatteryPlugged;
  int oldThreshold=mBatteryThreshold;
  pickNextBatteryLevel(level);
  mBatteryPlugged=plugged;
  mBatteryLevel=level;
  if (mBatteryFirst) {
    mBatteryFirst=false;
  }
  if (false) {
    Log.d(TAG,""String_Node_Str"" + plugged + ""String_Node_Str""+ oldPlugged+ ""String_Node_Str""+ level+ ""String_Node_Str""+ mBatteryThreshold+ ""String_Node_Str""+ oldThreshold);
  }
  if (plugged == 0 && ((oldPlugged != 0 && level < mBatteryThresholds[BATTERY_THRESHOLD_WARNING]) || (mBatteryThreshold > oldThreshold && mBatteryThreshold > BATTERY_THRESHOLD_WARNING))) {
    mSentLowBatteryBroadcast=true;
    mContext.sendBroadcast(new Intent(Intent.ACTION_BATTERY_LOW));
    if (SHOW_LOW_BATTERY_WARNING) {
      if (false) {
        Log.d(TAG,""String_Node_Str"" + mPhoneState + ""String_Node_Str""+ mLowBatteryDialog+ ""String_Node_Str""+ mBatteryShowLowOnEndCall);
      }
      if (mPhoneState == TelephonyManager.CALL_STATE_IDLE) {
        showLowBatteryWarning();
      }
 else {
        mBatteryShowLowOnEndCall=true;
      }
    }
  }
 else   if (mBatteryThreshold < BATTERY_THRESHOLD_WARNING) {
    if (mSentLowBatteryBroadcast == true) {
      mSentLowBatteryBroadcast=false;
      mContext.sendBroadcast(new Intent(Intent.ACTION_BATTERY_OKAY));
    }
    if (SHOW_LOW_BATTERY_WARNING) {
      if (mLowBatteryDialog != null) {
        mLowBatteryDialog.dismiss();
        mBatteryShowLowOnEndCall=false;
      }
    }
  }
}","private final void updateBattery(Intent intent){
  mBatteryData.iconId=intent.getIntExtra(""String_Node_Str"",0);
  mBatteryData.iconLevel=intent.getIntExtra(""String_Node_Str"",0);
  mService.updateIcon(mBatteryIcon,mBatteryData,null);
  int plugged=intent.getIntExtra(""String_Node_Str"",0);
  int level=intent.getIntExtra(""String_Node_Str"",-1);
  if (false) {
    Log.d(TAG,""String_Node_Str"" + level + ""String_Node_Str""+ plugged+ ""String_Node_Str""+ mBatteryPlugged+ ""String_Node_Str""+ mBatteryLevel+ ""String_Node_Str""+ mBatteryThreshold+ ""String_Node_Str""+ mBatteryFirst);
  }
  int oldPlugged=mBatteryPlugged;
  int oldThreshold=mBatteryThreshold;
  pickNextBatteryLevel(level);
  mBatteryPlugged=plugged;
  mBatteryLevel=level;
  if (mBatteryFirst) {
    mBatteryFirst=false;
  }
  if (false) {
    Log.d(TAG,""String_Node_Str"" + plugged + ""String_Node_Str""+ oldPlugged+ ""String_Node_Str""+ level+ ""String_Node_Str""+ mBatteryThreshold+ ""String_Node_Str""+ oldThreshold);
  }
  if (plugged == 0 && ((oldPlugged != 0 && level < mBatteryThresholds[BATTERY_THRESHOLD_WARNING]) || (mBatteryThreshold > oldThreshold && mBatteryThreshold > BATTERY_THRESHOLD_WARNING))) {
    mSentLowBatteryBroadcast=true;
    Intent batIntent=new Intent(Intent.ACTION_BATTERY_LOW);
    batIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);
    mContext.sendBroadcast(batIntent);
    if (SHOW_LOW_BATTERY_WARNING) {
      if (false) {
        Log.d(TAG,""String_Node_Str"" + mPhoneState + ""String_Node_Str""+ mLowBatteryDialog+ ""String_Node_Str""+ mBatteryShowLowOnEndCall);
      }
      if (mPhoneState == TelephonyManager.CALL_STATE_IDLE) {
        showLowBatteryWarning();
      }
 else {
        mBatteryShowLowOnEndCall=true;
      }
    }
  }
 else   if (mBatteryThreshold < BATTERY_THRESHOLD_WARNING) {
    if (mSentLowBatteryBroadcast == true) {
      mSentLowBatteryBroadcast=false;
      Intent batIntent=new Intent(Intent.ACTION_BATTERY_OKAY);
      batIntent.addFlags(Intent.FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT);
      mContext.sendBroadcast(batIntent);
    }
    if (SHOW_LOW_BATTERY_WARNING) {
      if (mLowBatteryDialog != null) {
        mLowBatteryDialog.dismiss();
        mBatteryShowLowOnEndCall=false;
      }
    }
  }
}"
24019,"/** 
 * Converts the byte array provided to a unicode string.
 * @param b the byte array to convert to a string
 * @param includesNull determine if the byte string provided contains theUNICODE null character at the end or not; if it does, it will be removed
 * @return a Unicode string
 * @throws IllegalArgumentException if the byte array has an odd length
 */
public static String convertToUnicode(byte[] b,boolean includesNull){
  if (b == null) {
    return null;
  }
  int arrayLength=b.length;
  if (!((arrayLength % 2) == 0)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  arrayLength=(arrayLength >> 1);
  if (includesNull) {
    arrayLength-=1;
  }
  char[] c=new char[arrayLength];
  for (int i=0; i < arrayLength; i++) {
    int upper=b[2 * i];
    int lower=b[(2 * i) + 1];
    if (upper < 0) {
      upper+=256;
    }
    if (lower < 0) {
      lower+=256;
    }
    c[i]=(char)((upper << 8) | lower);
  }
  return new String(c);
}","/** 
 * Converts the byte array provided to a unicode string.
 * @param b the byte array to convert to a string
 * @param includesNull determine if the byte string provided contains theUNICODE null character at the end or not; if it does, it will be removed
 * @return a Unicode string
 * @throws IllegalArgumentException if the byte array has an odd length
 */
public static String convertToUnicode(byte[] b,boolean includesNull){
  if (b == null || b.length == 0) {
    return null;
  }
  int arrayLength=b.length;
  if (!((arrayLength % 2) == 0)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  arrayLength=(arrayLength >> 1);
  if (includesNull) {
    arrayLength-=1;
  }
  char[] c=new char[arrayLength];
  for (int i=0; i < arrayLength; i++) {
    int upper=b[2 * i];
    int lower=b[(2 * i) + 1];
    if (upper < 0) {
      upper+=256;
    }
    if (lower < 0) {
      lower+=256;
    }
    c[i]=(char)((upper << 8) | lower);
  }
  return new String(c);
}"
24020,"public void onCompletion(MediaPlayer arg0){
  String callingApp=mCurrentSpeechItem.mCallingApp;
  ArrayList<String> params=mCurrentSpeechItem.mParams;
  String utteranceId=""String_Node_Str"";
  if (params != null) {
    for (int i=0; i < params.size() - 1; i=i + 2) {
      String param=params.get(i);
      if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_UTTERANCE_ID)) {
        utteranceId=params.get(i + 1);
      }
    }
  }
  if (utteranceId.length() > 0) {
    dispatchUtteranceCompletedCallback(utteranceId,callingApp);
  }
  mCurrentSpeechItem=null;
  processSpeechQueue();
}","public void onCompletion(MediaPlayer arg0){
  String callingApp=mCurrentSpeechItem.mCallingApp;
  ArrayList<String> params=mCurrentSpeechItem.mParams;
  String utteranceId=""String_Node_Str"";
  if (params != null) {
    for (int i=0; i < params.size() - 1; i=i + 2) {
      String param=params.get(i);
      if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_UTTERANCE_ID)) {
        utteranceId=params.get(i + 1);
      }
    }
  }
  if (utteranceId.length() > 0) {
    dispatchUtteranceCompletedCallback(utteranceId,callingApp);
  }
  processSpeechQueue();
}"
24021,"public void run(){
  boolean synthAvailable=false;
  String utteranceId=""String_Node_Str"";
  Log.i(""String_Node_Str"",""String_Node_Str"" + speechItem.mFilename);
  try {
    synthAvailable=synthesizerLock.tryLock();
    if (!synthAvailable) {
      Thread.sleep(100);
      Thread synth=(new Thread(new SynthThread()));
      synth.setPriority(Thread.MIN_PRIORITY);
      synth.start();
      return;
    }
    if (speechItem.mParams != null) {
      String language=""String_Node_Str"";
      String country=""String_Node_Str"";
      String variant=""String_Node_Str"";
      for (int i=0; i < speechItem.mParams.size() - 1; i=i + 2) {
        String param=speechItem.mParams.get(i);
        if (param != null) {
          if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_RATE)) {
            setSpeechRate(""String_Node_Str"",Integer.parseInt(speechItem.mParams.get(i + 1)));
          }
 else           if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_LANGUAGE)) {
            language=speechItem.mParams.get(i + 1);
          }
 else           if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_COUNTRY)) {
            country=speechItem.mParams.get(i + 1);
          }
 else           if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_VARIANT)) {
            variant=speechItem.mParams.get(i + 1);
          }
 else           if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_UTTERANCE_ID)) {
            utteranceId=speechItem.mParams.get(i + 1);
          }
        }
      }
      if (language.length() > 0) {
        setLanguage(""String_Node_Str"",language,country,variant);
      }
    }
    nativeSynth.synthesizeToFile(speechItem.mText,speechItem.mFilename);
  }
 catch (  InterruptedException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
 finally {
    if (synthAvailable) {
      synthesizerLock.unlock();
    }
    if (utteranceId.length() > 0) {
      dispatchUtteranceCompletedCallback(utteranceId,speechItem.mCallingApp);
    }
    mCurrentSpeechItem=null;
    processSpeechQueue();
  }
}","public void run(){
  boolean synthAvailable=false;
  String utteranceId=""String_Node_Str"";
  Log.i(""String_Node_Str"",""String_Node_Str"" + speechItem.mFilename);
  try {
    synthAvailable=synthesizerLock.tryLock();
    if (!synthAvailable) {
      Thread.sleep(100);
      Thread synth=(new Thread(new SynthThread()));
      synth.setPriority(Thread.MIN_PRIORITY);
      synth.start();
      return;
    }
    if (speechItem.mParams != null) {
      String language=""String_Node_Str"";
      String country=""String_Node_Str"";
      String variant=""String_Node_Str"";
      for (int i=0; i < speechItem.mParams.size() - 1; i=i + 2) {
        String param=speechItem.mParams.get(i);
        if (param != null) {
          if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_RATE)) {
            setSpeechRate(""String_Node_Str"",Integer.parseInt(speechItem.mParams.get(i + 1)));
          }
 else           if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_LANGUAGE)) {
            language=speechItem.mParams.get(i + 1);
          }
 else           if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_COUNTRY)) {
            country=speechItem.mParams.get(i + 1);
          }
 else           if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_VARIANT)) {
            variant=speechItem.mParams.get(i + 1);
          }
 else           if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_UTTERANCE_ID)) {
            utteranceId=speechItem.mParams.get(i + 1);
          }
        }
      }
      if (language.length() > 0) {
        setLanguage(""String_Node_Str"",language,country,variant);
      }
    }
    nativeSynth.synthesizeToFile(speechItem.mText,speechItem.mFilename);
  }
 catch (  InterruptedException e) {
    Log.e(""String_Node_Str"",""String_Node_Str"");
    e.printStackTrace();
  }
 finally {
    if (utteranceId.length() > 0) {
      dispatchUtteranceCompletedCallback(utteranceId,speechItem.mCallingApp);
    }
    if (synthAvailable) {
      synthesizerLock.unlock();
    }
    processSpeechQueue();
  }
}"
24022,"private void silence(final SpeechItem speechItem){
class SilenceThread implements Runnable {
    public void run(){
      String utteranceId=""String_Node_Str"";
      if (speechItem.mParams != null) {
        for (int i=0; i < speechItem.mParams.size() - 1; i=i + 2) {
          String param=speechItem.mParams.get(i);
          if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_UTTERANCE_ID)) {
            utteranceId=speechItem.mParams.get(i + 1);
          }
        }
      }
      try {
        Thread.sleep(speechItem.mDuration);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
 finally {
        if (utteranceId.length() > 0) {
          dispatchUtteranceCompletedCallback(utteranceId,speechItem.mCallingApp);
        }
        mCurrentSpeechItem=null;
        processSpeechQueue();
      }
    }
  }
  Thread slnc=(new Thread(new SilenceThread()));
  slnc.setPriority(Thread.MIN_PRIORITY);
  slnc.start();
}","private void silence(final SpeechItem speechItem){
class SilenceThread implements Runnable {
    public void run(){
      String utteranceId=""String_Node_Str"";
      if (speechItem.mParams != null) {
        for (int i=0; i < speechItem.mParams.size() - 1; i=i + 2) {
          String param=speechItem.mParams.get(i);
          if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_UTTERANCE_ID)) {
            utteranceId=speechItem.mParams.get(i + 1);
          }
        }
      }
      try {
        Thread.sleep(speechItem.mDuration);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
 finally {
        if (utteranceId.length() > 0) {
          dispatchUtteranceCompletedCallback(utteranceId,speechItem.mCallingApp);
        }
        processSpeechQueue();
      }
    }
  }
  Thread slnc=(new Thread(new SilenceThread()));
  slnc.setPriority(Thread.MIN_PRIORITY);
  slnc.start();
}"
24023,"private void synthToFileInternalOnly(final SpeechItem speechItem){
class SynthThread implements Runnable {
    public void run(){
      boolean synthAvailable=false;
      String utteranceId=""String_Node_Str"";
      Log.i(""String_Node_Str"",""String_Node_Str"" + speechItem.mFilename);
      try {
        synthAvailable=synthesizerLock.tryLock();
        if (!synthAvailable) {
          Thread.sleep(100);
          Thread synth=(new Thread(new SynthThread()));
          synth.setPriority(Thread.MIN_PRIORITY);
          synth.start();
          return;
        }
        if (speechItem.mParams != null) {
          String language=""String_Node_Str"";
          String country=""String_Node_Str"";
          String variant=""String_Node_Str"";
          for (int i=0; i < speechItem.mParams.size() - 1; i=i + 2) {
            String param=speechItem.mParams.get(i);
            if (param != null) {
              if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_RATE)) {
                setSpeechRate(""String_Node_Str"",Integer.parseInt(speechItem.mParams.get(i + 1)));
              }
 else               if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_LANGUAGE)) {
                language=speechItem.mParams.get(i + 1);
              }
 else               if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_COUNTRY)) {
                country=speechItem.mParams.get(i + 1);
              }
 else               if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_VARIANT)) {
                variant=speechItem.mParams.get(i + 1);
              }
 else               if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_UTTERANCE_ID)) {
                utteranceId=speechItem.mParams.get(i + 1);
              }
            }
          }
          if (language.length() > 0) {
            setLanguage(""String_Node_Str"",language,country,variant);
          }
        }
        nativeSynth.synthesizeToFile(speechItem.mText,speechItem.mFilename);
      }
 catch (      InterruptedException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"");
        e.printStackTrace();
      }
 finally {
        if (synthAvailable) {
          synthesizerLock.unlock();
        }
        if (utteranceId.length() > 0) {
          dispatchUtteranceCompletedCallback(utteranceId,speechItem.mCallingApp);
        }
        mCurrentSpeechItem=null;
        processSpeechQueue();
      }
    }
  }
  Thread synth=(new Thread(new SynthThread()));
  synth.setPriority(Thread.MIN_PRIORITY);
  synth.start();
}","private void synthToFileInternalOnly(final SpeechItem speechItem){
class SynthThread implements Runnable {
    public void run(){
      boolean synthAvailable=false;
      String utteranceId=""String_Node_Str"";
      Log.i(""String_Node_Str"",""String_Node_Str"" + speechItem.mFilename);
      try {
        synthAvailable=synthesizerLock.tryLock();
        if (!synthAvailable) {
          Thread.sleep(100);
          Thread synth=(new Thread(new SynthThread()));
          synth.setPriority(Thread.MIN_PRIORITY);
          synth.start();
          return;
        }
        if (speechItem.mParams != null) {
          String language=""String_Node_Str"";
          String country=""String_Node_Str"";
          String variant=""String_Node_Str"";
          for (int i=0; i < speechItem.mParams.size() - 1; i=i + 2) {
            String param=speechItem.mParams.get(i);
            if (param != null) {
              if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_RATE)) {
                setSpeechRate(""String_Node_Str"",Integer.parseInt(speechItem.mParams.get(i + 1)));
              }
 else               if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_LANGUAGE)) {
                language=speechItem.mParams.get(i + 1);
              }
 else               if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_COUNTRY)) {
                country=speechItem.mParams.get(i + 1);
              }
 else               if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_VARIANT)) {
                variant=speechItem.mParams.get(i + 1);
              }
 else               if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_UTTERANCE_ID)) {
                utteranceId=speechItem.mParams.get(i + 1);
              }
            }
          }
          if (language.length() > 0) {
            setLanguage(""String_Node_Str"",language,country,variant);
          }
        }
        nativeSynth.synthesizeToFile(speechItem.mText,speechItem.mFilename);
      }
 catch (      InterruptedException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"");
        e.printStackTrace();
      }
 finally {
        if (utteranceId.length() > 0) {
          dispatchUtteranceCompletedCallback(utteranceId,speechItem.mCallingApp);
        }
        if (synthAvailable) {
          synthesizerLock.unlock();
        }
        processSpeechQueue();
      }
    }
  }
  Thread synth=(new Thread(new SynthThread()));
  synth.setPriority(Thread.MIN_PRIORITY);
  synth.start();
}"
24024,"private void speakInternalOnly(final SpeechItem speechItem){
class SynthThread implements Runnable {
    public void run(){
      boolean synthAvailable=false;
      String utteranceId=""String_Node_Str"";
      try {
        synthAvailable=synthesizerLock.tryLock();
        if (!synthAvailable) {
          Thread.sleep(100);
          Thread synth=(new Thread(new SynthThread()));
          synth.setPriority(Thread.MIN_PRIORITY);
          synth.start();
          return;
        }
        int streamType=DEFAULT_STREAM_TYPE;
        if (speechItem.mParams != null) {
          String language=""String_Node_Str"";
          String country=""String_Node_Str"";
          String variant=""String_Node_Str"";
          for (int i=0; i < speechItem.mParams.size() - 1; i=i + 2) {
            String param=speechItem.mParams.get(i);
            if (param != null) {
              if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_RATE)) {
                setSpeechRate(""String_Node_Str"",Integer.parseInt(speechItem.mParams.get(i + 1)));
              }
 else               if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_LANGUAGE)) {
                language=speechItem.mParams.get(i + 1);
              }
 else               if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_COUNTRY)) {
                country=speechItem.mParams.get(i + 1);
              }
 else               if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_VARIANT)) {
                variant=speechItem.mParams.get(i + 1);
              }
 else               if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_UTTERANCE_ID)) {
                utteranceId=speechItem.mParams.get(i + 1);
              }
 else               if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_STREAM)) {
                try {
                  streamType=Integer.parseInt(speechItem.mParams.get(i + 1));
                }
 catch (                NumberFormatException e) {
                  streamType=DEFAULT_STREAM_TYPE;
                }
              }
            }
          }
          if (language.length() > 0) {
            setLanguage(""String_Node_Str"",language,country,variant);
          }
        }
        nativeSynth.speak(speechItem.mText,streamType);
      }
 catch (      InterruptedException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"");
        e.printStackTrace();
      }
 finally {
        if (synthAvailable) {
          synthesizerLock.unlock();
        }
        if (utteranceId.length() > 0) {
          dispatchUtteranceCompletedCallback(utteranceId,speechItem.mCallingApp);
        }
        mCurrentSpeechItem=null;
        processSpeechQueue();
      }
    }
  }
  Thread synth=(new Thread(new SynthThread()));
  synth.setPriority(Thread.MIN_PRIORITY);
  synth.start();
}","private void speakInternalOnly(final SpeechItem speechItem){
class SynthThread implements Runnable {
    public void run(){
      boolean synthAvailable=false;
      String utteranceId=""String_Node_Str"";
      try {
        synthAvailable=synthesizerLock.tryLock();
        if (!synthAvailable) {
          Thread.sleep(100);
          Thread synth=(new Thread(new SynthThread()));
          synth.setPriority(Thread.MIN_PRIORITY);
          synth.start();
          return;
        }
        int streamType=DEFAULT_STREAM_TYPE;
        if (speechItem.mParams != null) {
          String language=""String_Node_Str"";
          String country=""String_Node_Str"";
          String variant=""String_Node_Str"";
          for (int i=0; i < speechItem.mParams.size() - 1; i=i + 2) {
            String param=speechItem.mParams.get(i);
            if (param != null) {
              if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_RATE)) {
                setSpeechRate(""String_Node_Str"",Integer.parseInt(speechItem.mParams.get(i + 1)));
              }
 else               if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_LANGUAGE)) {
                language=speechItem.mParams.get(i + 1);
              }
 else               if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_COUNTRY)) {
                country=speechItem.mParams.get(i + 1);
              }
 else               if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_VARIANT)) {
                variant=speechItem.mParams.get(i + 1);
              }
 else               if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_UTTERANCE_ID)) {
                utteranceId=speechItem.mParams.get(i + 1);
              }
 else               if (param.equals(TextToSpeech.Engine.TTS_KEY_PARAM_STREAM)) {
                try {
                  streamType=Integer.parseInt(speechItem.mParams.get(i + 1));
                }
 catch (                NumberFormatException e) {
                  streamType=DEFAULT_STREAM_TYPE;
                }
              }
            }
          }
          if (language.length() > 0) {
            setLanguage(""String_Node_Str"",language,country,variant);
          }
        }
        nativeSynth.speak(speechItem.mText,streamType);
      }
 catch (      InterruptedException e) {
        Log.e(""String_Node_Str"",""String_Node_Str"");
        e.printStackTrace();
      }
 finally {
        if (utteranceId.length() > 0) {
          dispatchUtteranceCompletedCallback(utteranceId,speechItem.mCallingApp);
        }
        if (synthAvailable) {
          synthesizerLock.unlock();
        }
        processSpeechQueue();
      }
    }
  }
  Thread synth=(new Thread(new SynthThread()));
  synth.setPriority(Thread.MIN_PRIORITY);
  synth.start();
}"
24025,"public void onChanged(NumberPicker picker,int oldVal,int newVal){
  mYear=newVal;
  if (mOnDateChangedListener != null) {
    mOnDateChangedListener.onDateChanged(DatePicker.this,mYear,mMonth,mDay);
  }
}","public void onChanged(NumberPicker picker,int oldVal,int newVal){
  mYear=newVal;
  adjustMaxDay();
  if (mOnDateChangedListener != null) {
    mOnDateChangedListener.onDateChanged(DatePicker.this,mYear,mMonth,mDay);
  }
  updateDaySpinner();
}"
24026,"public DatePicker(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  inflater.inflate(R.layout.date_picker,this,true);
  mDayPicker=(NumberPicker)findViewById(R.id.day);
  mDayPicker.setFormatter(NumberPicker.TWO_DIGIT_FORMATTER);
  mDayPicker.setSpeed(100);
  mDayPicker.setOnChangeListener(new OnChangedListener(){
    public void onChanged(    NumberPicker picker,    int oldVal,    int newVal){
      mDay=newVal;
      if (mOnDateChangedListener != null) {
        mOnDateChangedListener.onDateChanged(DatePicker.this,mYear,mMonth,mDay);
      }
    }
  }
);
  mMonthPicker=(NumberPicker)findViewById(R.id.month);
  mMonthPicker.setFormatter(NumberPicker.TWO_DIGIT_FORMATTER);
  DateFormatSymbols dfs=new DateFormatSymbols();
  mMonthPicker.setRange(1,12,dfs.getShortMonths());
  mMonthPicker.setSpeed(200);
  mMonthPicker.setOnChangeListener(new OnChangedListener(){
    public void onChanged(    NumberPicker picker,    int oldVal,    int newVal){
      mMonth=newVal - 1;
      if (mOnDateChangedListener != null) {
        mOnDateChangedListener.onDateChanged(DatePicker.this,mYear,mMonth,mDay);
      }
      updateDaySpinner();
    }
  }
);
  mYearPicker=(NumberPicker)findViewById(R.id.year);
  mYearPicker.setSpeed(100);
  mYearPicker.setOnChangeListener(new OnChangedListener(){
    public void onChanged(    NumberPicker picker,    int oldVal,    int newVal){
      mYear=newVal;
      if (mOnDateChangedListener != null) {
        mOnDateChangedListener.onDateChanged(DatePicker.this,mYear,mMonth,mDay);
      }
    }
  }
);
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.DatePicker);
  int mStartYear=a.getInt(R.styleable.DatePicker_startYear,DEFAULT_START_YEAR);
  int mEndYear=a.getInt(R.styleable.DatePicker_endYear,DEFAULT_END_YEAR);
  mYearPicker.setRange(mStartYear,mEndYear);
  a.recycle();
  Calendar cal=Calendar.getInstance();
  init(cal.get(Calendar.YEAR),cal.get(Calendar.MONTH),cal.get(Calendar.DAY_OF_MONTH),null);
  reorderPickers();
  if (!isEnabled()) {
    setEnabled(false);
  }
}","public DatePicker(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  LayoutInflater inflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  inflater.inflate(R.layout.date_picker,this,true);
  mDayPicker=(NumberPicker)findViewById(R.id.day);
  mDayPicker.setFormatter(NumberPicker.TWO_DIGIT_FORMATTER);
  mDayPicker.setSpeed(100);
  mDayPicker.setOnChangeListener(new OnChangedListener(){
    public void onChanged(    NumberPicker picker,    int oldVal,    int newVal){
      mDay=newVal;
      if (mOnDateChangedListener != null) {
        mOnDateChangedListener.onDateChanged(DatePicker.this,mYear,mMonth,mDay);
      }
    }
  }
);
  mMonthPicker=(NumberPicker)findViewById(R.id.month);
  mMonthPicker.setFormatter(NumberPicker.TWO_DIGIT_FORMATTER);
  DateFormatSymbols dfs=new DateFormatSymbols();
  mMonthPicker.setRange(1,12,dfs.getShortMonths());
  mMonthPicker.setSpeed(200);
  mMonthPicker.setOnChangeListener(new OnChangedListener(){
    public void onChanged(    NumberPicker picker,    int oldVal,    int newVal){
      mMonth=newVal - 1;
      adjustMaxDay();
      if (mOnDateChangedListener != null) {
        mOnDateChangedListener.onDateChanged(DatePicker.this,mYear,mMonth,mDay);
      }
      updateDaySpinner();
    }
  }
);
  mYearPicker=(NumberPicker)findViewById(R.id.year);
  mYearPicker.setSpeed(100);
  mYearPicker.setOnChangeListener(new OnChangedListener(){
    public void onChanged(    NumberPicker picker,    int oldVal,    int newVal){
      mYear=newVal;
      adjustMaxDay();
      if (mOnDateChangedListener != null) {
        mOnDateChangedListener.onDateChanged(DatePicker.this,mYear,mMonth,mDay);
      }
      updateDaySpinner();
    }
  }
);
  TypedArray a=context.obtainStyledAttributes(attrs,R.styleable.DatePicker);
  int mStartYear=a.getInt(R.styleable.DatePicker_startYear,DEFAULT_START_YEAR);
  int mEndYear=a.getInt(R.styleable.DatePicker_endYear,DEFAULT_END_YEAR);
  mYearPicker.setRange(mStartYear,mEndYear);
  a.recycle();
  Calendar cal=Calendar.getInstance();
  init(cal.get(Calendar.YEAR),cal.get(Calendar.MONTH),cal.get(Calendar.DAY_OF_MONTH),null);
  reorderPickers();
  if (!isEnabled()) {
    setEnabled(false);
  }
}"
24027,"private void validateCurrentView(CharSequence str){
  int val=getSelectedPos(str.toString());
  if ((val >= mStart) && (val <= mEnd)) {
    mPrevious=mCurrent;
    mCurrent=val;
    notifyChange();
  }
  updateView();
}","private void validateCurrentView(CharSequence str){
  int val=getSelectedPos(str.toString());
  if ((val >= mStart) && (val <= mEnd)) {
    if (mCurrent != val) {
      mPrevious=mCurrent;
      mCurrent=val;
      notifyChange();
    }
  }
  updateView();
}"
24028,"private String makeUriString(){
  StringBuilder builder=new StringBuilder();
  if (scheme != null) {
    builder.append(scheme).append(':');
  }
  appendSspTo(builder);
  if (fragment != null && !fragment.isEmpty()) {
    builder.append('#').append(fragment.getEncoded());
  }
  return builder.toString();
}","private String makeUriString(){
  StringBuilder builder=new StringBuilder();
  if (scheme != null) {
    builder.append(scheme).append(':');
  }
  appendSspTo(builder);
  if (!fragment.isEmpty()) {
    builder.append('#').append(fragment.getEncoded());
  }
  return builder.toString();
}"
24029,"/** 
 * Searches the query string for parameter values with the given key.
 * @param key which will be encoded
 * @throws UnsupportedOperationException if this isn't a hierarchical URI
 * @throws NullPointerException if key is null
 * @return a list of decoded values
 */
public List<String> getQueryParameters(String key){
  if (isOpaque()) {
    throw new UnsupportedOperationException(NOT_HIERARCHICAL);
  }
  String query=getQuery();
  if (query == null) {
    return Collections.emptyList();
  }
  String encodedKey;
  try {
    encodedKey=URLEncoder.encode(key,DEFAULT_ENCODING);
  }
 catch (  UnsupportedEncodingException e) {
    throw new AssertionError(e);
  }
  query=""String_Node_Str"" + query;
  String prefix=""String_Node_Str"" + encodedKey + ""String_Node_Str"";
  ArrayList<String> values=new ArrayList<String>();
  int start=0;
  int length=query.length();
  while (start < length) {
    start=query.indexOf(prefix,start);
    if (start == -1) {
      break;
    }
    start+=prefix.length();
    int end=query.indexOf('&',start);
    if (end == -1) {
      end=query.length();
    }
    String value=query.substring(start,end);
    values.add(decode(value));
    start=end;
  }
  return Collections.unmodifiableList(values);
}","/** 
 * Searches the query string for parameter values with the given key.
 * @param key which will be encoded
 * @throws UnsupportedOperationException if this isn't a hierarchical URI
 * @throws NullPointerException if key is null
 * @return a list of decoded values
 */
public List<String> getQueryParameters(String key){
  if (isOpaque()) {
    throw new UnsupportedOperationException(NOT_HIERARCHICAL);
  }
  String query=getEncodedQuery();
  if (query == null) {
    return Collections.emptyList();
  }
  String encodedKey;
  try {
    encodedKey=URLEncoder.encode(key,DEFAULT_ENCODING);
  }
 catch (  UnsupportedEncodingException e) {
    throw new AssertionError(e);
  }
  query=""String_Node_Str"" + query;
  String prefix=""String_Node_Str"" + encodedKey + ""String_Node_Str"";
  ArrayList<String> values=new ArrayList<String>();
  int start=0;
  int length=query.length();
  while (start < length) {
    start=query.indexOf(prefix,start);
    if (start == -1) {
      break;
    }
    start+=prefix.length();
    int end=query.indexOf('&',start);
    if (end == -1) {
      end=query.length();
    }
    String value=query.substring(start,end);
    values.add(decode(value));
    start=end;
  }
  return Collections.unmodifiableList(values);
}"
24030,"/** 
 * Searches the query string for the first value with the given key.
 * @param key which will be encoded
 * @throws UnsupportedOperationException if this isn't a hierarchical URI
 * @throws NullPointerException if key is null
 * @return the decoded value or null if no parameter is found
 */
public String getQueryParameter(String key){
  if (isOpaque()) {
    throw new UnsupportedOperationException(NOT_HIERARCHICAL);
  }
  String query=getQuery();
  if (query == null) {
    return null;
  }
  String encodedKey;
  try {
    encodedKey=URLEncoder.encode(key,DEFAULT_ENCODING);
  }
 catch (  UnsupportedEncodingException e) {
    throw new AssertionError(e);
  }
  String prefix=encodedKey + ""String_Node_Str"";
  if (query.length() < prefix.length()) {
    return null;
  }
  int start;
  if (query.startsWith(prefix)) {
    start=prefix.length();
  }
 else {
    prefix=""String_Node_Str"" + prefix;
    start=query.indexOf(prefix);
    if (start == -1) {
      return null;
    }
    start+=prefix.length();
  }
  int end=query.indexOf('&',start);
  if (end == -1) {
    end=query.length();
  }
  String value=query.substring(start,end);
  return decode(value);
}","/** 
 * Searches the query string for the first value with the given key.
 * @param key which will be encoded
 * @throws UnsupportedOperationException if this isn't a hierarchical URI
 * @throws NullPointerException if key is null
 * @return the decoded value or null if no parameter is found
 */
public String getQueryParameter(String key){
  if (isOpaque()) {
    throw new UnsupportedOperationException(NOT_HIERARCHICAL);
  }
  String query=getEncodedQuery();
  if (query == null) {
    return null;
  }
  String encodedKey;
  try {
    encodedKey=URLEncoder.encode(key,DEFAULT_ENCODING);
  }
 catch (  UnsupportedEncodingException e) {
    throw new AssertionError(e);
  }
  String prefix=encodedKey + ""String_Node_Str"";
  if (query.length() < prefix.length()) {
    return null;
  }
  int start;
  if (query.startsWith(prefix)) {
    start=prefix.length();
  }
 else {
    prefix=""String_Node_Str"" + prefix;
    start=query.indexOf(prefix);
    if (start == -1) {
      return null;
    }
    start+=prefix.length();
  }
  int end=query.indexOf('&',start);
  if (end == -1) {
    end=query.length();
  }
  String value=query.substring(start,end);
  return decode(value);
}"
24031,"private void appendSspTo(StringBuilder builder){
  if (authority != null) {
    String encodedAuthority=authority.getEncoded();
    if (encodedAuthority != null) {
      builder.append(""String_Node_Str"").append(encodedAuthority);
    }
  }
  String encodedPath=path.getEncoded();
  if (encodedPath != null) {
    builder.append(encodedPath);
  }
  if (query != null && !query.isEmpty()) {
    builder.append('?').append(query.getEncoded());
  }
}","private void appendSspTo(StringBuilder builder){
  String encodedAuthority=authority.getEncoded();
  if (encodedAuthority != null) {
    builder.append(""String_Node_Str"").append(encodedAuthority);
  }
  String encodedPath=path.getEncoded();
  if (encodedPath != null) {
    builder.append(encodedPath);
  }
  if (!query.isEmpty()) {
    builder.append('?').append(query.getEncoded());
  }
}"
24032,"private HierarchicalUri(String scheme,Part authority,PathPart path,Part query,Part fragment){
  this.scheme=scheme;
  this.authority=authority;
  this.path=path;
  this.query=query;
  this.fragment=fragment;
}","private HierarchicalUri(String scheme,Part authority,PathPart path,Part query,Part fragment){
  this.scheme=scheme;
  this.authority=Part.nonNull(authority);
  this.path=path == null ? PathPart.NULL : path;
  this.query=Part.nonNull(query);
  this.fragment=Part.nonNull(fragment);
}"
24033,"private void release(){
  if (mMediaPlayer != null) {
    mMediaPlayer.reset();
    mMediaPlayer.release();
    mMediaPlayer=null;
    mCurrentState=STATE_IDLE;
    mTargetState=STATE_IDLE;
  }
}","private void release(boolean cleartargetstate){
  if (mMediaPlayer != null) {
    mMediaPlayer.reset();
    mMediaPlayer.release();
    mMediaPlayer=null;
    mCurrentState=STATE_IDLE;
    if (cleartargetstate) {
      mTargetState=STATE_IDLE;
    }
  }
}"
24034,"public void surfaceDestroyed(SurfaceHolder holder){
  mSurfaceHolder=null;
  if (mMediaController != null)   mMediaController.hide();
  release();
}","public void surfaceDestroyed(SurfaceHolder holder){
  mSurfaceHolder=null;
  if (mMediaController != null)   mMediaController.hide();
  release(true);
}"
24035,"private void openVideo(){
  if (mUri == null || mSurfaceHolder == null) {
    return;
  }
  Intent i=new Intent(""String_Node_Str"");
  i.putExtra(""String_Node_Str"",""String_Node_Str"");
  mContext.sendBroadcast(i);
  release();
  try {
    mMediaPlayer=new MediaPlayer();
    mMediaPlayer.setOnPreparedListener(mPreparedListener);
    mMediaPlayer.setOnVideoSizeChangedListener(mSizeChangedListener);
    mDuration=-1;
    mMediaPlayer.setOnCompletionListener(mCompletionListener);
    mMediaPlayer.setOnErrorListener(mErrorListener);
    mMediaPlayer.setOnBufferingUpdateListener(mBufferingUpdateListener);
    mCurrentBufferPercentage=0;
    mMediaPlayer.setDataSource(mContext,mUri);
    mMediaPlayer.setDisplay(mSurfaceHolder);
    mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
    mMediaPlayer.setScreenOnWhilePlaying(true);
    mMediaPlayer.prepareAsync();
    mCurrentState=STATE_PREPARING;
    mTargetState=STATE_PREPARED;
    attachMediaController();
  }
 catch (  IOException ex) {
    Log.w(TAG,""String_Node_Str"" + mUri,ex);
    mCurrentState=STATE_ERROR;
    mTargetState=STATE_ERROR;
    return;
  }
catch (  IllegalArgumentException ex) {
    Log.w(TAG,""String_Node_Str"" + mUri,ex);
    mCurrentState=STATE_ERROR;
    mTargetState=STATE_ERROR;
    return;
  }
}","private void openVideo(){
  if (mUri == null || mSurfaceHolder == null) {
    return;
  }
  Intent i=new Intent(""String_Node_Str"");
  i.putExtra(""String_Node_Str"",""String_Node_Str"");
  mContext.sendBroadcast(i);
  release(false);
  try {
    mMediaPlayer=new MediaPlayer();
    mMediaPlayer.setOnPreparedListener(mPreparedListener);
    mMediaPlayer.setOnVideoSizeChangedListener(mSizeChangedListener);
    mDuration=-1;
    mMediaPlayer.setOnCompletionListener(mCompletionListener);
    mMediaPlayer.setOnErrorListener(mErrorListener);
    mMediaPlayer.setOnBufferingUpdateListener(mBufferingUpdateListener);
    mCurrentBufferPercentage=0;
    mMediaPlayer.setDataSource(mContext,mUri);
    mMediaPlayer.setDisplay(mSurfaceHolder);
    mMediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);
    mMediaPlayer.setScreenOnWhilePlaying(true);
    mMediaPlayer.prepareAsync();
    mCurrentState=STATE_PREPARING;
    attachMediaController();
  }
 catch (  IOException ex) {
    Log.w(TAG,""String_Node_Str"" + mUri,ex);
    mCurrentState=STATE_ERROR;
    mTargetState=STATE_ERROR;
    return;
  }
catch (  IllegalArgumentException ex) {
    Log.w(TAG,""String_Node_Str"" + mUri,ex);
    mCurrentState=STATE_ERROR;
    mTargetState=STATE_ERROR;
    return;
  }
}"
24036,"@Override public void onChange(boolean selfChange){
  super.onChange(selfChange);
  mRingerModeAffectedStreams=Settings.System.getInt(mContentResolver,Settings.System.MODE_RINGER_STREAMS_AFFECTED,0);
  setRingerModeInt(getRingerMode());
}","@Override public void onChange(boolean selfChange){
  super.onChange(selfChange);
  mRingerModeAffectedStreams=Settings.System.getInt(mContentResolver,Settings.System.MODE_RINGER_STREAMS_AFFECTED,0);
  setRingerModeInt(getRingerMode(),false);
}"
24037,"private void setRingerModeInt(int ringerMode){
  mRingerMode=ringerMode;
  int numStreamTypes=AudioSystem.getNumStreamTypes();
  if (mRingerMode == AudioManager.RINGER_MODE_NORMAL) {
    for (int streamType=numStreamTypes - 1; streamType >= 0; streamType--) {
      if (!isStreamAffectedByRingerMode(streamType))       continue;
      setStreamVolumeInt(streamType,mStreamStates[streamType].mLastAudibleIndex,false,false);
    }
  }
 else {
    for (int streamType=numStreamTypes - 1; streamType >= 0; streamType--) {
      if (isStreamAffectedByRingerMode(streamType)) {
        setStreamVolumeInt(streamType,0,false,false);
      }
 else {
        setStreamVolumeInt(streamType,mStreamStates[streamType].mLastAudibleIndex,false,false);
      }
    }
  }
  sendMsg(mAudioHandler,MSG_PERSIST_RINGER_MODE,SHARED_MSG,SENDMSG_REPLACE,0,0,null,PERSIST_DELAY);
}","private void setRingerModeInt(int ringerMode,boolean persist){
  mRingerMode=ringerMode;
  int numStreamTypes=AudioSystem.getNumStreamTypes();
  if (mRingerMode == AudioManager.RINGER_MODE_NORMAL) {
    for (int streamType=numStreamTypes - 1; streamType >= 0; streamType--) {
      if (!isStreamAffectedByRingerMode(streamType))       continue;
      setStreamVolumeInt(streamType,mStreamStates[streamType].mLastAudibleIndex,false,false);
    }
  }
 else {
    for (int streamType=numStreamTypes - 1; streamType >= 0; streamType--) {
      if (isStreamAffectedByRingerMode(streamType)) {
        setStreamVolumeInt(streamType,0,false,false);
      }
 else {
        setStreamVolumeInt(streamType,mStreamStates[streamType].mLastAudibleIndex,false,false);
      }
    }
  }
  if (persist) {
    sendMsg(mAudioHandler,MSG_PERSIST_RINGER_MODE,SHARED_MSG,SENDMSG_REPLACE,0,0,null,PERSIST_DELAY);
  }
}"
24038,"/** 
 * @see AudioManager#setRingerMode(int) 
 */
public void setRingerMode(int ringerMode){
  if (ringerMode != mRingerMode) {
    setRingerModeInt(ringerMode);
    broadcastRingerMode();
  }
}","/** 
 * @see AudioManager#setRingerMode(int) 
 */
public void setRingerMode(int ringerMode){
  if (ringerMode != mRingerMode) {
    setRingerModeInt(ringerMode,true);
    broadcastRingerMode();
  }
}"
24039,"/** 
 * Receives a query request from a client in a local process, and returns a Cursor. This is called internally by the   {@link ContentResolver}. This method can be called from multiple threads, as described in <a href=""  {@docRoot}guide/topics/fundamentals.html#procthread"">Application Fundamentals: Processes and Threads</a>. <p> Example client call:<p> <pre>// Request a specific record. Cursor managedCursor = managedQuery( Contacts.People.CONTENT_URI.addId(2), projection,    // Which columns to return. null,          // WHERE clause. People.NAME + "" ASC"");   // Sort order.</pre> Example implementation:<p> <pre>// SQLiteQueryBuilder is a helper class that creates the // proper SQL syntax for us. SQLiteQueryBuilder qBuilder = new SQLiteQueryBuilder(); // Set the table we're querying. qBuilder.setTables(DATABASE_TABLE_NAME); // If the query ends in a specific record number, we're // being asked for a specific record, so set the // WHERE clause in our query. if((URI_MATCHER.match(uri)) == SPECIFIC_MESSAGE){ qBuilder.appendWhere(""_id="" + uri.getPathLeafId()); } // Make the query. Cursor c = qBuilder.query(mDb, projection, selection, selectionArgs, groupBy, having, sortOrder); c.setNotificationUri(getContext().getContentResolver(), uri); return c;</pre>
 * @param uri The URI to query. This will be the full URI sent by the client;if the client is requesting a specific record, the URI will end in a record number that the implementation should parse and add to a WHERE or HAVING clause, specifying that _id value.
 * @param projection The list of columns to put into the cursor. Ifnull all columns are included.
 * @param selection A selection criteria to apply when filtering rows.If null then all rows are included.
 * @param sortOrder How the rows in the cursor should be sorted.If null then the provider is free to define the sort order.
 * @return a Cursor or null.
 */
public abstract Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder);","/** 
 * Receives a query request from a client in a local process, and returns a Cursor. This is called internally by the   {@link ContentResolver}. This method can be called from multiple threads, as described in <a href=""  {@docRoot}guide/topics/fundamentals.html#procthread"">Application Fundamentals: Processes and Threads</a>. <p> Example client call:<p> <pre>// Request a specific record. Cursor managedCursor = managedQuery( ContentUris.withAppendedId(Contacts.People.CONTENT_URI, 2), projection,    // Which columns to return. null,          // WHERE clause. null,          // WHERE clause value substitution People.NAME + "" ASC"");   // Sort order.</pre> Example implementation:<p> <pre>// SQLiteQueryBuilder is a helper class that creates the // proper SQL syntax for us. SQLiteQueryBuilder qBuilder = new SQLiteQueryBuilder(); // Set the table we're querying. qBuilder.setTables(DATABASE_TABLE_NAME); // If the query ends in a specific record number, we're // being asked for a specific record, so set the // WHERE clause in our query. if((URI_MATCHER.match(uri)) == SPECIFIC_MESSAGE){ qBuilder.appendWhere(""_id="" + uri.getPathLeafId()); } // Make the query. Cursor c = qBuilder.query(mDb, projection, selection, selectionArgs, groupBy, having, sortOrder); c.setNotificationUri(getContext().getContentResolver(), uri); return c;</pre>
 * @param uri The URI to query. This will be the full URI sent by the client;if the client is requesting a specific record, the URI will end in a record number that the implementation should parse and add to a WHERE or HAVING clause, specifying that _id value.
 * @param projection The list of columns to put into the cursor. Ifnull all columns are included.
 * @param selection A selection criteria to apply when filtering rows.If null then all rows are included.
 * @param selectionArgs You may include ?s in selection, which will be replaced bythe values from selectionArgs, in order that they appear in the selection. The values will be bound as Strings.
 * @param sortOrder How the rows in the cursor should be sorted.If null then the provider is free to define the sort order.
 * @return a Cursor or null.
 */
public abstract Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder);"
24040,"private void refreshBatteryDisplay(){
  if (!mShowingBatteryInfo || !mSimOk) {
    mBatteryInfoGroup.setVisibility(View.GONE);
    mBatteryInfoSpacer.setVisibility(View.GONE);
    return;
  }
  mBatteryInfoGroup.setVisibility(View.VISIBLE);
  mBatteryInfoSpacer.setVisibility(View.VISIBLE);
  if (mPluggedIn) {
    mBatteryInfoIcon.setImageResource(R.drawable.ic_lock_idle_charging);
    mBatteryInfoText.setText(getContext().getString(R.string.lockscreen_plugged_in,mBatteryLevel));
  }
 else {
    mBatteryInfoIcon.setImageResource(R.drawable.ic_lock_idle_low_battery);
    mBatteryInfoText.setText(R.string.lockscreen_low_battery);
  }
}","private void refreshBatteryDisplay(){
  if (!mShowingBatteryInfo || !mSimOk) {
    mBatteryInfoGroup.setVisibility(View.GONE);
    mBatteryInfoSpacer.setVisibility(View.GONE);
    return;
  }
  mBatteryInfoGroup.setVisibility(View.VISIBLE);
  mBatteryInfoSpacer.setVisibility(View.VISIBLE);
  if (mPluggedIn) {
    mBatteryInfoIcon.setImageResource(R.drawable.ic_lock_idle_charging);
    if (mBatteryLevel >= 100) {
      mBatteryInfoText.setText(R.string.lockscreen_charged);
    }
 else {
      mBatteryInfoText.setText(getContext().getString(R.string.lockscreen_plugged_in,mBatteryLevel));
    }
  }
 else {
    mBatteryInfoIcon.setImageResource(R.drawable.ic_lock_idle_low_battery);
    mBatteryInfoText.setText(R.string.lockscreen_low_battery);
  }
}"
24041,"private void refreshBatteryDisplay(){
  if (!mShowingBatteryInfo || !mSimOk) {
    mBatteryInfoGroup.setVisibility(View.GONE);
    mBatteryInfoSpacer.setVisibility(View.GONE);
    return;
  }
  mBatteryInfoGroup.setVisibility(View.VISIBLE);
  mBatteryInfoSpacer.setVisibility(View.VISIBLE);
  if (mPluggedIn) {
    mBatteryInfoIcon.setImageResource(R.drawable.ic_lock_idle_charging);
    mBatteryInfoText.setText(getContext().getString(R.string.lockscreen_plugged_in,mBatteryLevel));
  }
 else {
    mBatteryInfoIcon.setImageResource(R.drawable.ic_lock_idle_low_battery);
    mBatteryInfoText.setText(R.string.lockscreen_low_battery);
  }
}","private void refreshBatteryDisplay(){
  if (!mShowingBatteryInfo || !mSimOk) {
    mBatteryInfoGroup.setVisibility(View.GONE);
    mBatteryInfoSpacer.setVisibility(View.GONE);
    return;
  }
  mBatteryInfoGroup.setVisibility(View.VISIBLE);
  mBatteryInfoSpacer.setVisibility(View.VISIBLE);
  if (mPluggedIn) {
    mBatteryInfoIcon.setImageResource(R.drawable.ic_lock_idle_charging);
    if (mBatteryLevel >= 100) {
      mBatteryInfoText.setText(R.string.lockscreen_charged);
    }
 else {
      mBatteryInfoText.setText(getContext().getString(R.string.lockscreen_plugged_in,mBatteryLevel));
    }
  }
 else {
    mBatteryInfoIcon.setImageResource(R.drawable.ic_lock_idle_low_battery);
    mBatteryInfoText.setText(R.string.lockscreen_low_battery);
  }
}"
24042,"public void onCompletion(MediaPlayer mp){
  if (mMediaController != null) {
    mMediaController.hide();
  }
  if (mOnCompletionListener != null) {
    mOnCompletionListener.onCompletion(mMediaPlayer);
  }
}","public void onCompletion(MediaPlayer mp){
  mIsPlaybackCompleted=true;
  if (mMediaController != null) {
    mMediaController.hide();
  }
  if (mOnCompletionListener != null) {
    mOnCompletionListener.onCompletion(mMediaPlayer);
  }
}"
24043,"public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  mSurfaceWidth=w;
  mSurfaceHeight=h;
  if (mMediaPlayer != null && mIsPrepared && mVideoWidth == w && mVideoHeight == h) {
    if (mSeekWhenPrepared != 0) {
      mMediaPlayer.seekTo(mSeekWhenPrepared);
      mSeekWhenPrepared=0;
    }
    mMediaPlayer.start();
    if (mMediaController != null) {
      mMediaController.show();
    }
  }
}","public void surfaceChanged(SurfaceHolder holder,int format,int w,int h){
  mSurfaceWidth=w;
  mSurfaceHeight=h;
  if (mMediaPlayer != null && mIsPrepared && mVideoWidth == w && mVideoHeight == h) {
    if (mSeekWhenPrepared != 0) {
      mMediaPlayer.seekTo(mSeekWhenPrepared);
      mSeekWhenPrepared=0;
    }
    if (!mIsPlaybackCompleted) {
      start();
    }
    if (mMediaController != null) {
      mMediaController.show();
    }
  }
}"
24044,"public void start(){
  if (mMediaPlayer != null && mIsPrepared) {
    mMediaPlayer.start();
    mStartWhenPrepared=false;
  }
 else {
    mStartWhenPrepared=true;
  }
}","public void start(){
  mIsPlaybackCompleted=false;
  if (mMediaPlayer != null && mIsPrepared) {
    mMediaPlayer.start();
    mStartWhenPrepared=false;
  }
 else {
    mStartWhenPrepared=true;
  }
}"
24045,"public void onPrepared(MediaPlayer mp){
  mIsPrepared=true;
  if (mOnPreparedListener != null) {
    mOnPreparedListener.onPrepared(mMediaPlayer);
  }
  if (mMediaController != null) {
    mMediaController.setEnabled(true);
  }
  mVideoWidth=mp.getVideoWidth();
  mVideoHeight=mp.getVideoHeight();
  if (mVideoWidth != 0 && mVideoHeight != 0) {
    getHolder().setFixedSize(mVideoWidth,mVideoHeight);
    if (mSurfaceWidth == mVideoWidth && mSurfaceHeight == mVideoHeight) {
      if (mSeekWhenPrepared != 0) {
        mMediaPlayer.seekTo(mSeekWhenPrepared);
        mSeekWhenPrepared=0;
      }
      if (mStartWhenPrepared) {
        mMediaPlayer.start();
        mStartWhenPrepared=false;
        if (mMediaController != null) {
          mMediaController.show();
        }
      }
 else       if (!isPlaying() && (mSeekWhenPrepared != 0 || getCurrentPosition() > 0)) {
        if (mMediaController != null) {
          mMediaController.show(0);
        }
      }
    }
  }
 else {
    if (mSeekWhenPrepared != 0) {
      mMediaPlayer.seekTo(mSeekWhenPrepared);
      mSeekWhenPrepared=0;
    }
    if (mStartWhenPrepared) {
      mMediaPlayer.start();
      mStartWhenPrepared=false;
    }
  }
}","public void onPrepared(MediaPlayer mp){
  mIsPrepared=true;
  if (mOnPreparedListener != null) {
    mOnPreparedListener.onPrepared(mMediaPlayer);
  }
  if (mMediaController != null) {
    mMediaController.setEnabled(true);
  }
  mVideoWidth=mp.getVideoWidth();
  mVideoHeight=mp.getVideoHeight();
  if (mVideoWidth != 0 && mVideoHeight != 0) {
    getHolder().setFixedSize(mVideoWidth,mVideoHeight);
    if (mSurfaceWidth == mVideoWidth && mSurfaceHeight == mVideoHeight) {
      if (mSeekWhenPrepared != 0) {
        mMediaPlayer.seekTo(mSeekWhenPrepared);
        mSeekWhenPrepared=0;
      }
      if (mStartWhenPrepared) {
        start();
        mStartWhenPrepared=false;
        if (mMediaController != null) {
          mMediaController.show();
        }
      }
 else       if (!isPlaying() && (mSeekWhenPrepared != 0 || getCurrentPosition() > 0)) {
        if (mMediaController != null) {
          mMediaController.show(0);
        }
      }
    }
  }
 else {
    if (mSeekWhenPrepared != 0) {
      mMediaPlayer.seekTo(mSeekWhenPrepared);
      mSeekWhenPrepared=0;
    }
    if (mStartWhenPrepared) {
      start();
      mStartWhenPrepared=false;
    }
  }
}"
24046,"private void setDefaultSettings(){
  setLanguage(this.getDefaultLanguage(),getDefaultLanguage(),getDefaultLocVariant());
  setSpeechRate(getDefaultRate());
}","private void setDefaultSettings(){
  setLanguage(this.getDefaultLanguage(),getDefaultCountry(),getDefaultLocVariant());
  setSpeechRate(getDefaultRate());
}"
24047,"public void onChildViewRemoved(View p,View child){
  if (child == this) {
    if (inEditingMode()) {
      clearTextEntry();
    }
  }
}","public void onChildViewRemoved(View p,View child){
  if (child == this) {
    clearTextEntry();
  }
}"
24048,"@Override public boolean performLongClick(){
  if (inEditingMode()) {
    return mWebTextView.performLongClick();
  }
 else {
    return super.performLongClick();
  }
}","@Override public boolean performLongClick(){
  if (mNativeClass != 0 && nativeCursorIsTextInput()) {
    mWebViewCore.sendMessage(EventHub.CLICK,nativeCursorFramePointer(),nativeCursorNodePointer());
    rebuildWebTextView();
  }
  if (inEditingMode()) {
    return mWebTextView.performLongClick();
  }
 else {
    return super.performLongClick();
  }
}"
24049,"@Override public boolean onTrackballEvent(MotionEvent ev){
  long time=ev.getEventTime();
  if ((ev.getMetaState() & KeyEvent.META_ALT_ON) != 0) {
    if (ev.getY() > 0)     pageDown(true);
    if (ev.getY() < 0)     pageUp(true);
    return true;
  }
  if (ev.getAction() == MotionEvent.ACTION_DOWN) {
    mPrivateHandler.removeMessages(SWITCH_TO_CLICK);
    mTrackballDown=true;
    if (mNativeClass != 0) {
      nativeRecordButtons(hasFocus() && hasWindowFocus(),true,true);
    }
    if (time - mLastCursorTime <= TRACKBALL_TIMEOUT && !mLastCursorBounds.equals(nativeGetCursorRingBounds())) {
      nativeSelectBestAt(mLastCursorBounds);
    }
    if (DebugFlags.WEB_VIEW) {
      Log.v(LOGTAG,""String_Node_Str"" + ev + ""String_Node_Str""+ time+ ""String_Node_Str""+ mLastCursorTime);
    }
    if (isInTouchMode())     requestFocusFromTouch();
    return false;
  }
  if (ev.getAction() == MotionEvent.ACTION_UP) {
    mPrivateHandler.removeMessages(LONG_PRESS_CENTER);
    mTrackballDown=false;
    mTrackballUpTime=time;
    if (mShiftIsPressed) {
      if (mExtendSelection) {
        commitCopy();
      }
 else {
        mExtendSelection=true;
      }
    }
    if (DebugFlags.WEB_VIEW) {
      Log.v(LOGTAG,""String_Node_Str"" + ev + ""String_Node_Str""+ time);
    }
    return false;
  }
  if (mMapTrackballToArrowKeys && mShiftIsPressed == false) {
    if (DebugFlags.WEB_VIEW)     Log.v(LOGTAG,""String_Node_Str"");
    return false;
  }
  if (mTouchMode == TOUCH_DOUBLECLICK_MODE) {
    if (DebugFlags.WEB_VIEW)     Log.v(LOGTAG,""String_Node_Str"");
    return true;
  }
  if (mTrackballDown) {
    if (DebugFlags.WEB_VIEW)     Log.v(LOGTAG,""String_Node_Str"");
    return true;
  }
  if (time - mTrackballUpTime < TRACKBALL_TIMEOUT) {
    if (DebugFlags.WEB_VIEW)     Log.v(LOGTAG,""String_Node_Str"");
    return true;
  }
  switchOutDrawHistory();
  if (time - mTrackballLastTime > TRACKBALL_TIMEOUT) {
    if (DebugFlags.WEB_VIEW) {
      Log.v(LOGTAG,""String_Node_Str"" + time + ""String_Node_Str""+ mTrackballLastTime);
    }
    mTrackballFirstTime=time;
    mTrackballXMove=mTrackballYMove=0;
  }
  mTrackballLastTime=time;
  if (DebugFlags.WEB_VIEW) {
    Log.v(LOGTAG,""String_Node_Str"" + ev + ""String_Node_Str""+ time);
  }
  mTrackballRemainsX+=ev.getX();
  mTrackballRemainsY+=ev.getY();
  doTrackball(time);
  return true;
}","@Override public boolean onTrackballEvent(MotionEvent ev){
  long time=ev.getEventTime();
  if ((ev.getMetaState() & KeyEvent.META_ALT_ON) != 0) {
    if (ev.getY() > 0)     pageDown(true);
    if (ev.getY() < 0)     pageUp(true);
    return true;
  }
  if (ev.getAction() == MotionEvent.ACTION_DOWN) {
    mPrivateHandler.removeMessages(SWITCH_TO_CLICK);
    mTrackballDown=true;
    if (mNativeClass == 0) {
      return false;
    }
    nativeRecordButtons(hasFocus() && hasWindowFocus(),true,true);
    if (time - mLastCursorTime <= TRACKBALL_TIMEOUT && !mLastCursorBounds.equals(nativeGetCursorRingBounds())) {
      nativeSelectBestAt(mLastCursorBounds);
    }
    if (DebugFlags.WEB_VIEW) {
      Log.v(LOGTAG,""String_Node_Str"" + ev + ""String_Node_Str""+ time+ ""String_Node_Str""+ mLastCursorTime);
    }
    if (isInTouchMode())     requestFocusFromTouch();
    return false;
  }
  if (ev.getAction() == MotionEvent.ACTION_UP) {
    mPrivateHandler.removeMessages(LONG_PRESS_CENTER);
    mTrackballDown=false;
    mTrackballUpTime=time;
    if (mShiftIsPressed) {
      if (mExtendSelection) {
        commitCopy();
      }
 else {
        mExtendSelection=true;
      }
    }
    if (DebugFlags.WEB_VIEW) {
      Log.v(LOGTAG,""String_Node_Str"" + ev + ""String_Node_Str""+ time);
    }
    return false;
  }
  if (mMapTrackballToArrowKeys && mShiftIsPressed == false) {
    if (DebugFlags.WEB_VIEW)     Log.v(LOGTAG,""String_Node_Str"");
    return false;
  }
  if (mTouchMode == TOUCH_DOUBLECLICK_MODE) {
    if (DebugFlags.WEB_VIEW)     Log.v(LOGTAG,""String_Node_Str"");
    return true;
  }
  if (mTrackballDown) {
    if (DebugFlags.WEB_VIEW)     Log.v(LOGTAG,""String_Node_Str"");
    return true;
  }
  if (time - mTrackballUpTime < TRACKBALL_TIMEOUT) {
    if (DebugFlags.WEB_VIEW)     Log.v(LOGTAG,""String_Node_Str"");
    return true;
  }
  switchOutDrawHistory();
  if (time - mTrackballLastTime > TRACKBALL_TIMEOUT) {
    if (DebugFlags.WEB_VIEW) {
      Log.v(LOGTAG,""String_Node_Str"" + time + ""String_Node_Str""+ mTrackballLastTime);
    }
    mTrackballFirstTime=time;
    mTrackballXMove=mTrackballYMove=0;
  }
  mTrackballLastTime=time;
  if (DebugFlags.WEB_VIEW) {
    Log.v(LOGTAG,""String_Node_Str"" + ev + ""String_Node_Str""+ time);
  }
  mTrackballRemainsX+=ev.getX();
  mTrackballRemainsY+=ev.getY();
  doTrackball(time);
  return true;
}"
24050,"/** 
 * Returns a constant indicating the type of activity on a data connection (cellular).
 * @see #DATA_ACTIVITY_NONE
 * @see #DATA_ACTIVITY_IN
 * @see #DATA_ACTIVITY_OUT
 * @see #DATA_ACTIVITY_INOUT
 * @see #DATA_ACTIVITY_DORMANT
 */
public int getDataActivity(){
  try {
    return getITelephony().getDataActivity();
  }
 catch (  RemoteException ex) {
    return DATA_ACTIVITY_NONE;
  }
}","/** 
 * Returns a constant indicating the type of activity on a data connection (cellular).
 * @see #DATA_ACTIVITY_NONE
 * @see #DATA_ACTIVITY_IN
 * @see #DATA_ACTIVITY_OUT
 * @see #DATA_ACTIVITY_INOUT
 * @see #DATA_ACTIVITY_DORMANT
 */
public int getDataActivity(){
  try {
    return getITelephony().getDataActivity();
  }
 catch (  RemoteException ex) {
    return DATA_ACTIVITY_NONE;
  }
catch (  NullPointerException ex) {
    return DATA_ACTIVITY_NONE;
  }
}"
24051,"/** 
 * Returns a constant indicating the call state (cellular) on the device.
 */
public int getCallState(){
  try {
    return getITelephony().getCallState();
  }
 catch (  RemoteException ex) {
    return CALL_STATE_IDLE;
  }
}","/** 
 * Returns a constant indicating the call state (cellular) on the device.
 */
public int getCallState(){
  try {
    return getITelephony().getCallState();
  }
 catch (  RemoteException ex) {
    return CALL_STATE_IDLE;
  }
catch (  NullPointerException ex) {
    return CALL_STATE_IDLE;
  }
}"
24052,"private void setDefaultSettings(){
  setLanguage(this.getDefaultLanguage(),getDefaultLanguage(),getDefaultLocVariant());
  setSpeechRate(getDefaultRate());
}","private void setDefaultSettings(){
  setLanguage(this.getDefaultLanguage(),getDefaultCountry(),getDefaultLocVariant());
  setSpeechRate(getDefaultRate());
}"
24053,"/** 
 * Inject a pointer (touch) event into the UI.
 * @param ev A motion event describing the pointer (touch) action.  (As noted in{@link MotionEvent#obtain(long,long,int,float,float,int)}, be sure to use  {@link SystemClock#uptimeMillis()} as the timebase.)
 * @param sync If true, wait for the event to be completed before returning to the caller.
 * @return Returns true if event was dispatched, false if it was dropped for any reason
 */
public boolean injectPointerEvent(MotionEvent ev,boolean sync){
  int result=dispatchPointer(null,ev,Binder.getCallingPid(),Binder.getCallingUid());
  if (sync) {
    mKeyWaiter.waitForNextEventTarget(null,null,null,false,true);
  }
switch (result) {
case INJECT_NO_PERMISSION:
    throw new SecurityException(""String_Node_Str"");
case INJECT_SUCCEEDED:
  return true;
}
return false;
}","/** 
 * Inject a pointer (touch) event into the UI.
 * @param ev A motion event describing the pointer (touch) action.  (As noted in{@link MotionEvent#obtain(long,long,int,float,float,int)}, be sure to use  {@link SystemClock#uptimeMillis()} as the timebase.)
 * @param sync If true, wait for the event to be completed before returning to the caller.
 * @return Returns true if event was dispatched, false if it was dropped for any reason
 */
public boolean injectPointerEvent(MotionEvent ev,boolean sync){
  final int pid=Binder.getCallingPid();
  final int uid=Binder.getCallingUid();
  final long ident=Binder.clearCallingIdentity();
  final int result=dispatchPointer(null,ev,pid,uid);
  if (sync) {
    mKeyWaiter.waitForNextEventTarget(null,null,null,false,true,pid,uid);
  }
  Binder.restoreCallingIdentity(ident);
switch (result) {
case INJECT_NO_PERMISSION:
    throw new SecurityException(""String_Node_Str"");
case INJECT_SUCCEEDED:
  return true;
}
return false;
}"
24054,"/** 
 * @return Returns true if event was dispatched, false if it was dropped for any reason
 */
private int dispatchKey(KeyEvent event,int pid,int uid){
  if (DEBUG_INPUT)   Log.v(TAG,""String_Node_Str"" + event);
  Object focusObj=mKeyWaiter.waitForNextEventTarget(event,null,null,false,false);
  if (focusObj == null) {
    Log.w(TAG,""String_Node_Str"" + event);
    return INJECT_FAILED;
  }
  if (focusObj == mKeyWaiter.CONSUMED_EVENT_TOKEN) {
    return INJECT_SUCCEEDED;
  }
  WindowState focus=(WindowState)focusObj;
  if (DEBUG_INPUT)   Log.v(TAG,""String_Node_Str"" + focus + ""String_Node_Str""+ event);
  if (uid != 0 && uid != focus.mSession.mUid) {
    if (mContext.checkPermission(android.Manifest.permission.INJECT_EVENTS,pid,uid) != PackageManager.PERMISSION_GRANTED) {
      Log.w(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ uid+ ""String_Node_Str""+ focus+ ""String_Node_Str""+ focus.mSession.mUid);
      return INJECT_NO_PERMISSION;
    }
  }
synchronized (mWindowMap) {
    mKeyWaiter.bindTargetWindowLocked(focus);
  }
  mKeyWaiter.recordDispatchState(event,focus);
  try {
    if (DEBUG_INPUT || DEBUG_FOCUS) {
      Log.v(TAG,""String_Node_Str"" + event.getKeyCode() + ""String_Node_Str""+ focus);
    }
    focus.mClient.dispatchKey(event);
    return INJECT_SUCCEEDED;
  }
 catch (  android.os.RemoteException e) {
    Log.i(TAG,""String_Node_Str"" + focus);
    try {
      removeWindow(focus.mSession,focus.mClient);
    }
 catch (    java.util.NoSuchElementException ex) {
    }
  }
  return INJECT_FAILED;
}","/** 
 * @return Returns true if event was dispatched, false if it was dropped for any reason
 */
private int dispatchKey(KeyEvent event,int pid,int uid){
  if (DEBUG_INPUT)   Log.v(TAG,""String_Node_Str"" + event);
  Object focusObj=mKeyWaiter.waitForNextEventTarget(event,null,null,false,false,pid,uid);
  if (focusObj == null) {
    Log.w(TAG,""String_Node_Str"" + event);
    return INJECT_FAILED;
  }
  if (focusObj == mKeyWaiter.CONSUMED_EVENT_TOKEN) {
    return INJECT_SUCCEEDED;
  }
  WindowState focus=(WindowState)focusObj;
  if (DEBUG_INPUT)   Log.v(TAG,""String_Node_Str"" + focus + ""String_Node_Str""+ event);
  if (uid != 0 && uid != focus.mSession.mUid) {
    if (mContext.checkPermission(android.Manifest.permission.INJECT_EVENTS,pid,uid) != PackageManager.PERMISSION_GRANTED) {
      Log.w(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ uid+ ""String_Node_Str""+ focus+ ""String_Node_Str""+ focus.mSession.mUid);
      return INJECT_NO_PERMISSION;
    }
  }
synchronized (mWindowMap) {
    mKeyWaiter.bindTargetWindowLocked(focus);
  }
  mKeyWaiter.recordDispatchState(event,focus);
  try {
    if (DEBUG_INPUT || DEBUG_FOCUS) {
      Log.v(TAG,""String_Node_Str"" + event.getKeyCode() + ""String_Node_Str""+ focus);
    }
    focus.mClient.dispatchKey(event);
    return INJECT_SUCCEEDED;
  }
 catch (  android.os.RemoteException e) {
    Log.i(TAG,""String_Node_Str"" + focus);
    try {
      removeWindow(focus.mSession,focus.mClient);
    }
 catch (    java.util.NoSuchElementException ex) {
    }
  }
  return INJECT_FAILED;
}"
24055,"Object findTargetWindow(KeyEvent nextKey,QueuedEvent qev,MotionEvent nextMotion,boolean isPointerEvent){
  mOutsideTouchTargets=null;
  if (nextKey != null) {
    final int keycode=nextKey.getKeyCode();
    final int repeatCount=nextKey.getRepeatCount();
    final boolean down=nextKey.getAction() != KeyEvent.ACTION_UP;
    boolean dispatch=mKeyWaiter.checkShouldDispatchKey(keycode);
    if (!dispatch) {
      mPolicy.interceptKeyTi(null,keycode,nextKey.getMetaState(),down,repeatCount);
      Log.w(TAG,""String_Node_Str"" + nextKey);
      return SKIP_TARGET_TOKEN;
    }
    WindowState focus=null;
synchronized (mWindowMap) {
      focus=getFocusedWindowLocked();
    }
    wakeupIfNeeded(focus,LocalPowerManager.BUTTON_EVENT);
    if (mPolicy.interceptKeyTi(focus,keycode,nextKey.getMetaState(),down,repeatCount)) {
      return CONSUMED_EVENT_TOKEN;
    }
    return focus;
  }
 else   if (!isPointerEvent) {
    boolean dispatch=mKeyWaiter.checkShouldDispatchKey(-1);
    if (!dispatch) {
      Log.w(TAG,""String_Node_Str"" + nextMotion);
      return SKIP_TARGET_TOKEN;
    }
    WindowState focus=null;
synchronized (mWindowMap) {
      focus=getFocusedWindowLocked();
    }
    wakeupIfNeeded(focus,LocalPowerManager.BUTTON_EVENT);
    return focus;
  }
  if (nextMotion == null) {
    return SKIP_TARGET_TOKEN;
  }
  boolean dispatch=mKeyWaiter.checkShouldDispatchKey(KeyEvent.KEYCODE_UNKNOWN);
  if (!dispatch) {
    Log.w(TAG,""String_Node_Str"" + nextMotion);
    return SKIP_TARGET_TOKEN;
  }
  int action=nextMotion.getAction();
  final float xf=nextMotion.getX();
  final float yf=nextMotion.getY();
  final long eventTime=nextMotion.getEventTime();
  final boolean screenWasOff=qev != null && (qev.flags & WindowManagerPolicy.FLAG_BRIGHT_HERE) != 0;
  WindowState target=null;
synchronized (mWindowMap) {
synchronized (this) {
      if (action == MotionEvent.ACTION_DOWN) {
        if (mMotionTarget != null) {
          Log.w(TAG,""String_Node_Str"" + mMotionTarget);
          mMotionTarget=null;
        }
        final int x=(int)xf;
        final int y=(int)yf;
        final ArrayList windows=mWindows;
        final int N=windows.size();
        WindowState topErrWindow=null;
        final Rect tmpRect=mTempRect;
        for (int i=N - 1; i >= 0; i--) {
          WindowState child=(WindowState)windows.get(i);
          final int flags=child.mAttrs.flags;
          if ((flags & WindowManager.LayoutParams.FLAG_SYSTEM_ERROR) != 0) {
            if (topErrWindow == null) {
              topErrWindow=child;
            }
          }
          if (!child.isVisibleLw()) {
            continue;
          }
          if ((flags & WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE) != 0) {
            if ((flags & WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH) != 0) {
              child.mNextOutsideTouch=mOutsideTouchTargets;
              mOutsideTouchTargets=child;
            }
            continue;
          }
          tmpRect.set(child.mFrame);
          if (child.mTouchableInsets == ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_CONTENT) {
            tmpRect.left+=child.mGivenContentInsets.left;
            tmpRect.top+=child.mGivenContentInsets.top;
            tmpRect.right-=child.mGivenContentInsets.right;
            tmpRect.bottom-=child.mGivenContentInsets.bottom;
          }
 else           if (child.mTouchableInsets == ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_VISIBLE) {
            tmpRect.left+=child.mGivenVisibleInsets.left;
            tmpRect.top+=child.mGivenVisibleInsets.top;
            tmpRect.right-=child.mGivenVisibleInsets.right;
            tmpRect.bottom-=child.mGivenVisibleInsets.bottom;
          }
          final int touchFlags=flags & (WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL);
          if (tmpRect.contains(x,y) || touchFlags == 0) {
            if (!screenWasOff || (flags & WindowManager.LayoutParams.FLAG_TOUCHABLE_WHEN_WAKING) != 0) {
              mMotionTarget=child;
            }
 else {
              mMotionTarget=null;
            }
            break;
          }
          if ((flags & WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH) != 0) {
            child.mNextOutsideTouch=mOutsideTouchTargets;
            mOutsideTouchTargets=child;
          }
        }
        if (topErrWindow != null && mMotionTarget != topErrWindow) {
          mMotionTarget=null;
        }
      }
      target=mMotionTarget;
    }
  }
  wakeupIfNeeded(target,eventType(nextMotion));
  return target != null ? target : SKIP_TARGET_TOKEN;
}","Object findTargetWindow(KeyEvent nextKey,QueuedEvent qev,MotionEvent nextMotion,boolean isPointerEvent,int callingPid,int callingUid){
  mOutsideTouchTargets=null;
  if (nextKey != null) {
    final int keycode=nextKey.getKeyCode();
    final int repeatCount=nextKey.getRepeatCount();
    final boolean down=nextKey.getAction() != KeyEvent.ACTION_UP;
    boolean dispatch=mKeyWaiter.checkShouldDispatchKey(keycode);
    if (!dispatch) {
      if (callingUid == 0 || mContext.checkPermission(android.Manifest.permission.INJECT_EVENTS,callingPid,callingUid) == PackageManager.PERMISSION_GRANTED) {
        mPolicy.interceptKeyTi(null,keycode,nextKey.getMetaState(),down,repeatCount);
      }
      Log.w(TAG,""String_Node_Str"" + nextKey);
      return SKIP_TARGET_TOKEN;
    }
    WindowState focus=null;
synchronized (mWindowMap) {
      focus=getFocusedWindowLocked();
    }
    wakeupIfNeeded(focus,LocalPowerManager.BUTTON_EVENT);
    if (callingUid == 0 || (focus != null && callingUid == focus.mSession.mUid) || mContext.checkPermission(android.Manifest.permission.INJECT_EVENTS,callingPid,callingUid) == PackageManager.PERMISSION_GRANTED) {
      if (mPolicy.interceptKeyTi(focus,keycode,nextKey.getMetaState(),down,repeatCount)) {
        return CONSUMED_EVENT_TOKEN;
      }
    }
    return focus;
  }
 else   if (!isPointerEvent) {
    boolean dispatch=mKeyWaiter.checkShouldDispatchKey(-1);
    if (!dispatch) {
      Log.w(TAG,""String_Node_Str"" + nextMotion);
      return SKIP_TARGET_TOKEN;
    }
    WindowState focus=null;
synchronized (mWindowMap) {
      focus=getFocusedWindowLocked();
    }
    wakeupIfNeeded(focus,LocalPowerManager.BUTTON_EVENT);
    return focus;
  }
  if (nextMotion == null) {
    return SKIP_TARGET_TOKEN;
  }
  boolean dispatch=mKeyWaiter.checkShouldDispatchKey(KeyEvent.KEYCODE_UNKNOWN);
  if (!dispatch) {
    Log.w(TAG,""String_Node_Str"" + nextMotion);
    return SKIP_TARGET_TOKEN;
  }
  int action=nextMotion.getAction();
  final float xf=nextMotion.getX();
  final float yf=nextMotion.getY();
  final long eventTime=nextMotion.getEventTime();
  final boolean screenWasOff=qev != null && (qev.flags & WindowManagerPolicy.FLAG_BRIGHT_HERE) != 0;
  WindowState target=null;
synchronized (mWindowMap) {
synchronized (this) {
      if (action == MotionEvent.ACTION_DOWN) {
        if (mMotionTarget != null) {
          Log.w(TAG,""String_Node_Str"" + mMotionTarget);
          mMotionTarget=null;
        }
        final int x=(int)xf;
        final int y=(int)yf;
        final ArrayList windows=mWindows;
        final int N=windows.size();
        WindowState topErrWindow=null;
        final Rect tmpRect=mTempRect;
        for (int i=N - 1; i >= 0; i--) {
          WindowState child=(WindowState)windows.get(i);
          final int flags=child.mAttrs.flags;
          if ((flags & WindowManager.LayoutParams.FLAG_SYSTEM_ERROR) != 0) {
            if (topErrWindow == null) {
              topErrWindow=child;
            }
          }
          if (!child.isVisibleLw()) {
            continue;
          }
          if ((flags & WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE) != 0) {
            if ((flags & WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH) != 0) {
              child.mNextOutsideTouch=mOutsideTouchTargets;
              mOutsideTouchTargets=child;
            }
            continue;
          }
          tmpRect.set(child.mFrame);
          if (child.mTouchableInsets == ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_CONTENT) {
            tmpRect.left+=child.mGivenContentInsets.left;
            tmpRect.top+=child.mGivenContentInsets.top;
            tmpRect.right-=child.mGivenContentInsets.right;
            tmpRect.bottom-=child.mGivenContentInsets.bottom;
          }
 else           if (child.mTouchableInsets == ViewTreeObserver.InternalInsetsInfo.TOUCHABLE_INSETS_VISIBLE) {
            tmpRect.left+=child.mGivenVisibleInsets.left;
            tmpRect.top+=child.mGivenVisibleInsets.top;
            tmpRect.right-=child.mGivenVisibleInsets.right;
            tmpRect.bottom-=child.mGivenVisibleInsets.bottom;
          }
          final int touchFlags=flags & (WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL);
          if (tmpRect.contains(x,y) || touchFlags == 0) {
            if (!screenWasOff || (flags & WindowManager.LayoutParams.FLAG_TOUCHABLE_WHEN_WAKING) != 0) {
              mMotionTarget=child;
            }
 else {
              mMotionTarget=null;
            }
            break;
          }
          if ((flags & WindowManager.LayoutParams.FLAG_WATCH_OUTSIDE_TOUCH) != 0) {
            child.mNextOutsideTouch=mOutsideTouchTargets;
            mOutsideTouchTargets=child;
          }
        }
        if (topErrWindow != null && mMotionTarget != topErrWindow) {
          mMotionTarget=null;
        }
      }
      target=mMotionTarget;
    }
  }
  wakeupIfNeeded(target,eventType(nextMotion));
  return target != null ? target : SKIP_TARGET_TOKEN;
}"
24056,"/** 
 * Wait for the last event dispatch to complete, then find the next target that should receive the given event and wait for that one to be ready to receive it.
 */
Object waitForNextEventTarget(KeyEvent nextKey,QueuedEvent qev,MotionEvent nextMotion,boolean isPointerEvent,boolean failIfTimeout){
  long startTime=SystemClock.uptimeMillis();
  long keyDispatchingTimeout=5 * 1000;
  long waitedFor=0;
  while (true) {
    WindowState targetWin=mLastWin;
    boolean targetIsNew=targetWin == null;
    if (DEBUG_INPUT)     Log.v(TAG,""String_Node_Str"" + mFinished + ""String_Node_Str""+ mLastWin);
    if (targetIsNew) {
      Object target=findTargetWindow(nextKey,qev,nextMotion,isPointerEvent);
      if (target == SKIP_TARGET_TOKEN) {
        if (DEBUG_INPUT)         Log.v(TAG,""String_Node_Str"" + nextKey + ""String_Node_Str""+ nextMotion);
        return null;
      }
      if (target == CONSUMED_EVENT_TOKEN) {
        if (DEBUG_INPUT)         Log.v(TAG,""String_Node_Str"" + nextKey + ""String_Node_Str""+ nextMotion);
        return target;
      }
      targetWin=(WindowState)target;
    }
    AppWindowToken targetApp=null;
synchronized (this) {
      if (!targetIsNew && mLastWin == null) {
        continue;
      }
      if (mFinished && !mDisplayFrozen) {
        if (!mEventDispatching) {
          if (DEBUG_INPUT)           Log.v(TAG,""String_Node_Str"" + nextKey + ""String_Node_Str""+ nextMotion);
          return null;
        }
        if (targetWin != null) {
          if (targetIsNew && !targetWin.mToken.paused) {
            return targetWin;
          }
        }
 else         if (mFocusedApp == null) {
          if (DEBUG_INPUT)           Log.v(TAG,""String_Node_Str"" + nextKey + ""String_Node_Str""+ nextMotion);
          return null;
        }
      }
      if (DEBUG_INPUT)       Log.v(TAG,""String_Node_Str"" + mLastBinder + ""String_Node_Str""+ targetWin+ ""String_Node_Str""+ mFinished+ ""String_Node_Str""+ mDisplayFrozen+ ""String_Node_Str""+ targetIsNew+ ""String_Node_Str""+ (targetWin != null ? targetWin.mToken.paused : false)+ ""String_Node_Str""+ mFocusedApp+ ""String_Node_Str""+ mCurrentFocus);
      targetApp=targetWin != null ? targetWin.mAppToken : mFocusedApp;
      long curTimeout=keyDispatchingTimeout;
      if (mTimeToSwitch != 0) {
        long now=SystemClock.uptimeMillis();
        if (mTimeToSwitch <= now) {
          doFinishedKeyLocked(true);
          continue;
        }
        long switchTimeout=mTimeToSwitch - now;
        if (curTimeout > switchTimeout) {
          curTimeout=switchTimeout;
        }
      }
      try {
        if (DEBUG_INPUT)         Log.v(TAG,""String_Node_Str"" + curTimeout);
        wait(curTimeout);
        if (DEBUG_INPUT)         Log.v(TAG,""String_Node_Str"" + SystemClock.uptimeMillis() + ""String_Node_Str""+ startTime+ ""String_Node_Str""+ mTimeToSwitch+ ""String_Node_Str""+ targetWin+ ""String_Node_Str""+ mLastWin+ ""String_Node_Str""+ mLastBinder+ ""String_Node_Str""+ mFinished+ ""String_Node_Str""+ mCurrentFocus);
      }
 catch (      InterruptedException e) {
      }
    }
    if (mWasFrozen) {
      waitedFor=0;
      mWasFrozen=false;
    }
 else {
      waitedFor=SystemClock.uptimeMillis() - startTime;
    }
    if (waitedFor >= keyDispatchingTimeout && mTimeToSwitch == 0) {
      IApplicationToken at=null;
synchronized (this) {
        Log.w(TAG,""String_Node_Str"" + (targetWin != null ? targetWin.mAttrs.getTitle() : ""String_Node_Str""));
        Log.w(TAG,""String_Node_Str"" + mDispatchState);
        Log.w(TAG,""String_Node_Str"" + new DispatchState(nextKey,targetWin));
        if (targetWin != null) {
          at=targetWin.getAppToken();
        }
 else         if (targetApp != null) {
          at=targetApp.appToken;
        }
      }
      boolean abort=true;
      if (at != null) {
        try {
          long timeout=at.getKeyDispatchingTimeout();
          if (timeout > waitedFor) {
            keyDispatchingTimeout=timeout - waitedFor;
            continue;
          }
 else {
            abort=at.keyDispatchingTimedOut();
          }
        }
 catch (        RemoteException ex) {
        }
      }
synchronized (this) {
        if (abort && (mLastWin == targetWin || targetWin == null)) {
          mFinished=true;
          if (mLastWin != null) {
            if (DEBUG_INPUT)             Log.v(TAG,""String_Node_Str"" + mLastWin + ""String_Node_Str"");
            if (mLastWin.mToken.paused) {
              Log.w(TAG,""String_Node_Str"");
              mLastWin.mToken.paused=false;
            }
          }
          if (mMotionTarget == targetWin) {
            mMotionTarget=null;
          }
          mLastWin=null;
          mLastBinder=null;
          if (failIfTimeout || targetWin == null) {
            return null;
          }
        }
 else {
          Log.w(TAG,""String_Node_Str"");
          startTime=SystemClock.uptimeMillis();
        }
      }
    }
  }
}","/** 
 * Wait for the last event dispatch to complete, then find the next target that should receive the given event and wait for that one to be ready to receive it.
 */
Object waitForNextEventTarget(KeyEvent nextKey,QueuedEvent qev,MotionEvent nextMotion,boolean isPointerEvent,boolean failIfTimeout,int callingPid,int callingUid){
  long startTime=SystemClock.uptimeMillis();
  long keyDispatchingTimeout=5 * 1000;
  long waitedFor=0;
  while (true) {
    WindowState targetWin=mLastWin;
    boolean targetIsNew=targetWin == null;
    if (DEBUG_INPUT)     Log.v(TAG,""String_Node_Str"" + mFinished + ""String_Node_Str""+ mLastWin);
    if (targetIsNew) {
      Object target=findTargetWindow(nextKey,qev,nextMotion,isPointerEvent,callingPid,callingUid);
      if (target == SKIP_TARGET_TOKEN) {
        if (DEBUG_INPUT)         Log.v(TAG,""String_Node_Str"" + nextKey + ""String_Node_Str""+ nextMotion);
        return null;
      }
      if (target == CONSUMED_EVENT_TOKEN) {
        if (DEBUG_INPUT)         Log.v(TAG,""String_Node_Str"" + nextKey + ""String_Node_Str""+ nextMotion);
        return target;
      }
      targetWin=(WindowState)target;
    }
    AppWindowToken targetApp=null;
synchronized (this) {
      if (!targetIsNew && mLastWin == null) {
        continue;
      }
      if (mFinished && !mDisplayFrozen) {
        if (!mEventDispatching) {
          if (DEBUG_INPUT)           Log.v(TAG,""String_Node_Str"" + nextKey + ""String_Node_Str""+ nextMotion);
          return null;
        }
        if (targetWin != null) {
          if (targetIsNew && !targetWin.mToken.paused) {
            return targetWin;
          }
        }
 else         if (mFocusedApp == null) {
          if (DEBUG_INPUT)           Log.v(TAG,""String_Node_Str"" + nextKey + ""String_Node_Str""+ nextMotion);
          return null;
        }
      }
      if (DEBUG_INPUT)       Log.v(TAG,""String_Node_Str"" + mLastBinder + ""String_Node_Str""+ targetWin+ ""String_Node_Str""+ mFinished+ ""String_Node_Str""+ mDisplayFrozen+ ""String_Node_Str""+ targetIsNew+ ""String_Node_Str""+ (targetWin != null ? targetWin.mToken.paused : false)+ ""String_Node_Str""+ mFocusedApp+ ""String_Node_Str""+ mCurrentFocus);
      targetApp=targetWin != null ? targetWin.mAppToken : mFocusedApp;
      long curTimeout=keyDispatchingTimeout;
      if (mTimeToSwitch != 0) {
        long now=SystemClock.uptimeMillis();
        if (mTimeToSwitch <= now) {
          doFinishedKeyLocked(true);
          continue;
        }
        long switchTimeout=mTimeToSwitch - now;
        if (curTimeout > switchTimeout) {
          curTimeout=switchTimeout;
        }
      }
      try {
        if (DEBUG_INPUT)         Log.v(TAG,""String_Node_Str"" + curTimeout);
        wait(curTimeout);
        if (DEBUG_INPUT)         Log.v(TAG,""String_Node_Str"" + SystemClock.uptimeMillis() + ""String_Node_Str""+ startTime+ ""String_Node_Str""+ mTimeToSwitch+ ""String_Node_Str""+ targetWin+ ""String_Node_Str""+ mLastWin+ ""String_Node_Str""+ mLastBinder+ ""String_Node_Str""+ mFinished+ ""String_Node_Str""+ mCurrentFocus);
      }
 catch (      InterruptedException e) {
      }
    }
    if (mWasFrozen) {
      waitedFor=0;
      mWasFrozen=false;
    }
 else {
      waitedFor=SystemClock.uptimeMillis() - startTime;
    }
    if (waitedFor >= keyDispatchingTimeout && mTimeToSwitch == 0) {
      IApplicationToken at=null;
synchronized (this) {
        Log.w(TAG,""String_Node_Str"" + (targetWin != null ? targetWin.mAttrs.getTitle() : ""String_Node_Str""));
        Log.w(TAG,""String_Node_Str"" + mDispatchState);
        Log.w(TAG,""String_Node_Str"" + new DispatchState(nextKey,targetWin));
        if (targetWin != null) {
          at=targetWin.getAppToken();
        }
 else         if (targetApp != null) {
          at=targetApp.appToken;
        }
      }
      boolean abort=true;
      if (at != null) {
        try {
          long timeout=at.getKeyDispatchingTimeout();
          if (timeout > waitedFor) {
            keyDispatchingTimeout=timeout - waitedFor;
            continue;
          }
 else {
            abort=at.keyDispatchingTimedOut();
          }
        }
 catch (        RemoteException ex) {
        }
      }
synchronized (this) {
        if (abort && (mLastWin == targetWin || targetWin == null)) {
          mFinished=true;
          if (mLastWin != null) {
            if (DEBUG_INPUT)             Log.v(TAG,""String_Node_Str"" + mLastWin + ""String_Node_Str"");
            if (mLastWin.mToken.paused) {
              Log.w(TAG,""String_Node_Str"");
              mLastWin.mToken.paused=false;
            }
          }
          if (mMotionTarget == targetWin) {
            mMotionTarget=null;
          }
          mLastWin=null;
          mLastBinder=null;
          if (failIfTimeout || targetWin == null) {
            return null;
          }
        }
 else {
          Log.w(TAG,""String_Node_Str"");
          startTime=SystemClock.uptimeMillis();
        }
      }
    }
  }
}"
24057,"/** 
 * @return Returns true if event was dispatched, false if it was dropped for any reason
 */
private int dispatchPointer(QueuedEvent qev,MotionEvent ev,int pid,int uid){
  if (DEBUG_INPUT || WindowManagerPolicy.WATCH_POINTER)   Log.v(TAG,""String_Node_Str"" + ev);
  Object targetObj=mKeyWaiter.waitForNextEventTarget(null,qev,ev,true,false);
  int action=ev.getAction();
  if (action == MotionEvent.ACTION_UP) {
    mKeyWaiter.mMotionTarget=null;
    mPowerManager.logPointerUpEvent();
  }
 else   if (action == MotionEvent.ACTION_DOWN) {
    mPowerManager.logPointerDownEvent();
  }
  if (targetObj == null) {
    if (action != MotionEvent.ACTION_MOVE) {
      Log.w(TAG,""String_Node_Str"" + ev.getAction());
    }
    if (qev != null) {
      mQueue.recycleEvent(qev);
    }
    ev.recycle();
    return INJECT_FAILED;
  }
  if (targetObj == mKeyWaiter.CONSUMED_EVENT_TOKEN) {
    if (qev != null) {
      mQueue.recycleEvent(qev);
    }
    ev.recycle();
    return INJECT_SUCCEEDED;
  }
  WindowState target=(WindowState)targetObj;
  final long eventTime=ev.getEventTime();
  if (uid != 0 && uid != target.mSession.mUid) {
    if (mContext.checkPermission(android.Manifest.permission.INJECT_EVENTS,pid,uid) != PackageManager.PERMISSION_GRANTED) {
      Log.w(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ uid+ ""String_Node_Str""+ target+ ""String_Node_Str""+ target.mSession.mUid);
      if (qev != null) {
        mQueue.recycleEvent(qev);
      }
      ev.recycle();
      return INJECT_NO_PERMISSION;
    }
  }
  if ((target.mAttrs.flags & WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES) != 0) {
    boolean cheekPress=mPolicy.isCheekPressedAgainstScreen(ev);
    boolean returnFlag=false;
    if ((action == MotionEvent.ACTION_DOWN)) {
      mFatTouch=false;
      if (cheekPress) {
        mFatTouch=true;
        returnFlag=true;
      }
    }
 else {
      if (action == MotionEvent.ACTION_UP) {
        if (mFatTouch) {
          mFatTouch=false;
          returnFlag=true;
        }
 else         if (cheekPress) {
          ev.setAction(MotionEvent.ACTION_CANCEL);
          action=MotionEvent.ACTION_CANCEL;
        }
      }
 else       if (action == MotionEvent.ACTION_MOVE) {
        if (mFatTouch) {
          returnFlag=true;
        }
 else         if (cheekPress) {
          ev.setAction(MotionEvent.ACTION_CANCEL);
          action=MotionEvent.ACTION_CANCEL;
          if (DEBUG_INPUT)           Log.v(TAG,""String_Node_Str"");
          mFatTouch=true;
        }
      }
    }
    if (returnFlag) {
      if (qev != null) {
        mQueue.recycleEvent(qev);
      }
      ev.recycle();
      return INJECT_FAILED;
    }
  }
  if (action == MotionEvent.ACTION_DOWN) {
    int max_events_per_sec=35;
    try {
      max_events_per_sec=Integer.parseInt(SystemProperties.get(""String_Node_Str""));
      if (max_events_per_sec < 1) {
        max_events_per_sec=35;
      }
    }
 catch (    NumberFormatException e) {
    }
    mMinWaitTimeBetweenTouchEvents=1000 / max_events_per_sec;
  }
  if (action == MotionEvent.ACTION_MOVE) {
    long nextEventTime=mLastTouchEventTime + mMinWaitTimeBetweenTouchEvents;
    long now=SystemClock.uptimeMillis();
    if (now < nextEventTime) {
      try {
        Thread.sleep(nextEventTime - now);
      }
 catch (      InterruptedException e) {
      }
      mLastTouchEventTime=nextEventTime;
    }
 else {
      mLastTouchEventTime=now;
    }
  }
synchronized (mWindowMap) {
    if (qev != null && action == MotionEvent.ACTION_MOVE) {
      mKeyWaiter.bindTargetWindowLocked(target,KeyWaiter.RETURN_PENDING_POINTER,qev);
      ev=null;
    }
 else {
      if (action == MotionEvent.ACTION_DOWN) {
        WindowState out=mKeyWaiter.mOutsideTouchTargets;
        if (out != null) {
          MotionEvent oev=MotionEvent.obtain(ev);
          oev.setAction(MotionEvent.ACTION_OUTSIDE);
          do {
            final Rect frame=out.mFrame;
            oev.offsetLocation(-(float)frame.left,-(float)frame.top);
            try {
              out.mClient.dispatchPointer(oev,eventTime);
            }
 catch (            android.os.RemoteException e) {
              Log.i(TAG,""String_Node_Str"" + out);
            }
            oev.offsetLocation((float)frame.left,(float)frame.top);
            out=out.mNextOutsideTouch;
          }
 while (out != null);
          mKeyWaiter.mOutsideTouchTargets=null;
        }
      }
      final Rect frame=target.mFrame;
      ev.offsetLocation(-(float)frame.left,-(float)frame.top);
      mKeyWaiter.bindTargetWindowLocked(target);
    }
  }
  try {
    if (DEBUG_INPUT || DEBUG_FOCUS || WindowManagerPolicy.WATCH_POINTER) {
      Log.v(TAG,""String_Node_Str"" + qev + ""String_Node_Str""+ target);
    }
    target.mClient.dispatchPointer(ev,eventTime);
    return INJECT_SUCCEEDED;
  }
 catch (  android.os.RemoteException e) {
    Log.i(TAG,""String_Node_Str"" + target);
    mKeyWaiter.mMotionTarget=null;
    try {
      removeWindow(target.mSession,target.mClient);
    }
 catch (    java.util.NoSuchElementException ex) {
    }
  }
  return INJECT_FAILED;
}","/** 
 * @return Returns true if event was dispatched, false if it was dropped for any reason
 */
private int dispatchPointer(QueuedEvent qev,MotionEvent ev,int pid,int uid){
  if (DEBUG_INPUT || WindowManagerPolicy.WATCH_POINTER)   Log.v(TAG,""String_Node_Str"" + ev);
  Object targetObj=mKeyWaiter.waitForNextEventTarget(null,qev,ev,true,false,pid,uid);
  int action=ev.getAction();
  if (action == MotionEvent.ACTION_UP) {
    mKeyWaiter.mMotionTarget=null;
    mPowerManager.logPointerUpEvent();
  }
 else   if (action == MotionEvent.ACTION_DOWN) {
    mPowerManager.logPointerDownEvent();
  }
  if (targetObj == null) {
    if (action != MotionEvent.ACTION_MOVE) {
      Log.w(TAG,""String_Node_Str"" + ev.getAction());
    }
    if (qev != null) {
      mQueue.recycleEvent(qev);
    }
    ev.recycle();
    return INJECT_FAILED;
  }
  if (targetObj == mKeyWaiter.CONSUMED_EVENT_TOKEN) {
    if (qev != null) {
      mQueue.recycleEvent(qev);
    }
    ev.recycle();
    return INJECT_SUCCEEDED;
  }
  WindowState target=(WindowState)targetObj;
  final long eventTime=ev.getEventTime();
  if (uid != 0 && uid != target.mSession.mUid) {
    if (mContext.checkPermission(android.Manifest.permission.INJECT_EVENTS,pid,uid) != PackageManager.PERMISSION_GRANTED) {
      Log.w(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ uid+ ""String_Node_Str""+ target+ ""String_Node_Str""+ target.mSession.mUid);
      if (qev != null) {
        mQueue.recycleEvent(qev);
      }
      ev.recycle();
      return INJECT_NO_PERMISSION;
    }
  }
  if ((target.mAttrs.flags & WindowManager.LayoutParams.FLAG_IGNORE_CHEEK_PRESSES) != 0) {
    boolean cheekPress=mPolicy.isCheekPressedAgainstScreen(ev);
    boolean returnFlag=false;
    if ((action == MotionEvent.ACTION_DOWN)) {
      mFatTouch=false;
      if (cheekPress) {
        mFatTouch=true;
        returnFlag=true;
      }
    }
 else {
      if (action == MotionEvent.ACTION_UP) {
        if (mFatTouch) {
          mFatTouch=false;
          returnFlag=true;
        }
 else         if (cheekPress) {
          ev.setAction(MotionEvent.ACTION_CANCEL);
          action=MotionEvent.ACTION_CANCEL;
        }
      }
 else       if (action == MotionEvent.ACTION_MOVE) {
        if (mFatTouch) {
          returnFlag=true;
        }
 else         if (cheekPress) {
          ev.setAction(MotionEvent.ACTION_CANCEL);
          action=MotionEvent.ACTION_CANCEL;
          if (DEBUG_INPUT)           Log.v(TAG,""String_Node_Str"");
          mFatTouch=true;
        }
      }
    }
    if (returnFlag) {
      if (qev != null) {
        mQueue.recycleEvent(qev);
      }
      ev.recycle();
      return INJECT_FAILED;
    }
  }
  if (action == MotionEvent.ACTION_DOWN) {
    int max_events_per_sec=35;
    try {
      max_events_per_sec=Integer.parseInt(SystemProperties.get(""String_Node_Str""));
      if (max_events_per_sec < 1) {
        max_events_per_sec=35;
      }
    }
 catch (    NumberFormatException e) {
    }
    mMinWaitTimeBetweenTouchEvents=1000 / max_events_per_sec;
  }
  if (action == MotionEvent.ACTION_MOVE) {
    long nextEventTime=mLastTouchEventTime + mMinWaitTimeBetweenTouchEvents;
    long now=SystemClock.uptimeMillis();
    if (now < nextEventTime) {
      try {
        Thread.sleep(nextEventTime - now);
      }
 catch (      InterruptedException e) {
      }
      mLastTouchEventTime=nextEventTime;
    }
 else {
      mLastTouchEventTime=now;
    }
  }
synchronized (mWindowMap) {
    if (qev != null && action == MotionEvent.ACTION_MOVE) {
      mKeyWaiter.bindTargetWindowLocked(target,KeyWaiter.RETURN_PENDING_POINTER,qev);
      ev=null;
    }
 else {
      if (action == MotionEvent.ACTION_DOWN) {
        WindowState out=mKeyWaiter.mOutsideTouchTargets;
        if (out != null) {
          MotionEvent oev=MotionEvent.obtain(ev);
          oev.setAction(MotionEvent.ACTION_OUTSIDE);
          do {
            final Rect frame=out.mFrame;
            oev.offsetLocation(-(float)frame.left,-(float)frame.top);
            try {
              out.mClient.dispatchPointer(oev,eventTime);
            }
 catch (            android.os.RemoteException e) {
              Log.i(TAG,""String_Node_Str"" + out);
            }
            oev.offsetLocation((float)frame.left,(float)frame.top);
            out=out.mNextOutsideTouch;
          }
 while (out != null);
          mKeyWaiter.mOutsideTouchTargets=null;
        }
      }
      final Rect frame=target.mFrame;
      ev.offsetLocation(-(float)frame.left,-(float)frame.top);
      mKeyWaiter.bindTargetWindowLocked(target);
    }
  }
  try {
    if (DEBUG_INPUT || DEBUG_FOCUS || WindowManagerPolicy.WATCH_POINTER) {
      Log.v(TAG,""String_Node_Str"" + qev + ""String_Node_Str""+ target);
    }
    target.mClient.dispatchPointer(ev,eventTime);
    return INJECT_SUCCEEDED;
  }
 catch (  android.os.RemoteException e) {
    Log.i(TAG,""String_Node_Str"" + target);
    mKeyWaiter.mMotionTarget=null;
    try {
      removeWindow(target.mSession,target.mClient);
    }
 catch (    java.util.NoSuchElementException ex) {
    }
  }
  return INJECT_FAILED;
}"
24058,"/** 
 * @return Returns true if event was dispatched, false if it was dropped for any reason
 */
private int dispatchTrackball(QueuedEvent qev,MotionEvent ev,int pid,int uid){
  if (DEBUG_INPUT)   Log.v(TAG,""String_Node_Str"" + ev.getAction() + ""String_Node_Str""+ ev.getX()+ ""String_Node_Str""+ ev.getY()+ ""String_Node_Str"");
  Object focusObj=mKeyWaiter.waitForNextEventTarget(null,qev,ev,false,false);
  if (focusObj == null) {
    Log.w(TAG,""String_Node_Str"" + ev);
    if (qev != null) {
      mQueue.recycleEvent(qev);
    }
    ev.recycle();
    return INJECT_FAILED;
  }
  if (focusObj == mKeyWaiter.CONSUMED_EVENT_TOKEN) {
    if (qev != null) {
      mQueue.recycleEvent(qev);
    }
    ev.recycle();
    return INJECT_SUCCEEDED;
  }
  WindowState focus=(WindowState)focusObj;
  if (uid != 0 && uid != focus.mSession.mUid) {
    if (mContext.checkPermission(android.Manifest.permission.INJECT_EVENTS,pid,uid) != PackageManager.PERMISSION_GRANTED) {
      Log.w(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ uid+ ""String_Node_Str""+ focus+ ""String_Node_Str""+ focus.mSession.mUid);
      if (qev != null) {
        mQueue.recycleEvent(qev);
      }
      ev.recycle();
      return INJECT_NO_PERMISSION;
    }
  }
  final long eventTime=ev.getEventTime();
synchronized (mWindowMap) {
    if (qev != null && ev.getAction() == MotionEvent.ACTION_MOVE) {
      mKeyWaiter.bindTargetWindowLocked(focus,KeyWaiter.RETURN_PENDING_TRACKBALL,qev);
      ev=null;
    }
 else {
      mKeyWaiter.bindTargetWindowLocked(focus);
    }
  }
  try {
    focus.mClient.dispatchTrackball(ev,eventTime);
    return INJECT_SUCCEEDED;
  }
 catch (  android.os.RemoteException e) {
    Log.i(TAG,""String_Node_Str"" + focus);
    try {
      removeWindow(focus.mSession,focus.mClient);
    }
 catch (    java.util.NoSuchElementException ex) {
    }
  }
  return INJECT_FAILED;
}","/** 
 * @return Returns true if event was dispatched, false if it was dropped for any reason
 */
private int dispatchTrackball(QueuedEvent qev,MotionEvent ev,int pid,int uid){
  if (DEBUG_INPUT)   Log.v(TAG,""String_Node_Str"" + ev.getAction() + ""String_Node_Str""+ ev.getX()+ ""String_Node_Str""+ ev.getY()+ ""String_Node_Str"");
  Object focusObj=mKeyWaiter.waitForNextEventTarget(null,qev,ev,false,false,pid,uid);
  if (focusObj == null) {
    Log.w(TAG,""String_Node_Str"" + ev);
    if (qev != null) {
      mQueue.recycleEvent(qev);
    }
    ev.recycle();
    return INJECT_FAILED;
  }
  if (focusObj == mKeyWaiter.CONSUMED_EVENT_TOKEN) {
    if (qev != null) {
      mQueue.recycleEvent(qev);
    }
    ev.recycle();
    return INJECT_SUCCEEDED;
  }
  WindowState focus=(WindowState)focusObj;
  if (uid != 0 && uid != focus.mSession.mUid) {
    if (mContext.checkPermission(android.Manifest.permission.INJECT_EVENTS,pid,uid) != PackageManager.PERMISSION_GRANTED) {
      Log.w(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ uid+ ""String_Node_Str""+ focus+ ""String_Node_Str""+ focus.mSession.mUid);
      if (qev != null) {
        mQueue.recycleEvent(qev);
      }
      ev.recycle();
      return INJECT_NO_PERMISSION;
    }
  }
  final long eventTime=ev.getEventTime();
synchronized (mWindowMap) {
    if (qev != null && ev.getAction() == MotionEvent.ACTION_MOVE) {
      mKeyWaiter.bindTargetWindowLocked(focus,KeyWaiter.RETURN_PENDING_TRACKBALL,qev);
      ev=null;
    }
 else {
      mKeyWaiter.bindTargetWindowLocked(focus);
    }
  }
  try {
    focus.mClient.dispatchTrackball(ev,eventTime);
    return INJECT_SUCCEEDED;
  }
 catch (  android.os.RemoteException e) {
    Log.i(TAG,""String_Node_Str"" + focus);
    try {
      removeWindow(focus.mSession,focus.mClient);
    }
 catch (    java.util.NoSuchElementException ex) {
    }
  }
  return INJECT_FAILED;
}"
24059,"/** 
 * Inject a trackball (navigation device) event into the UI.
 * @param ev A motion event describing the trackball action.  (As noted in{@link MotionEvent#obtain(long,long,int,float,float,int)}, be sure to use  {@link SystemClock#uptimeMillis()} as the timebase.)
 * @param sync If true, wait for the event to be completed before returning to the caller.
 * @return Returns true if event was dispatched, false if it was dropped for any reason
 */
public boolean injectTrackballEvent(MotionEvent ev,boolean sync){
  int result=dispatchTrackball(null,ev,Binder.getCallingPid(),Binder.getCallingUid());
  if (sync) {
    mKeyWaiter.waitForNextEventTarget(null,null,null,false,true);
  }
switch (result) {
case INJECT_NO_PERMISSION:
    throw new SecurityException(""String_Node_Str"");
case INJECT_SUCCEEDED:
  return true;
}
return false;
}","/** 
 * Inject a trackball (navigation device) event into the UI.
 * @param ev A motion event describing the trackball action.  (As noted in{@link MotionEvent#obtain(long,long,int,float,float,int)}, be sure to use  {@link SystemClock#uptimeMillis()} as the timebase.)
 * @param sync If true, wait for the event to be completed before returning to the caller.
 * @return Returns true if event was dispatched, false if it was dropped for any reason
 */
public boolean injectTrackballEvent(MotionEvent ev,boolean sync){
  final int pid=Binder.getCallingPid();
  final int uid=Binder.getCallingUid();
  final long ident=Binder.clearCallingIdentity();
  final int result=dispatchTrackball(null,ev,pid,uid);
  if (sync) {
    mKeyWaiter.waitForNextEventTarget(null,null,null,false,true,pid,uid);
  }
  Binder.restoreCallingIdentity(ident);
switch (result) {
case INJECT_NO_PERMISSION:
    throw new SecurityException(""String_Node_Str"");
case INJECT_SUCCEEDED:
  return true;
}
return false;
}"
24060,"/** 
 * Injects a keystroke event into the UI.
 * @param ev A motion event describing the keystroke action.  (Be sure to use{@link SystemClock#uptimeMillis()} as the timebase.)
 * @param sync If true, wait for the event to be completed before returning to the caller.
 * @return Returns true if event was dispatched, false if it was dropped for any reason
 */
public boolean injectKeyEvent(KeyEvent ev,boolean sync){
  long downTime=ev.getDownTime();
  long eventTime=ev.getEventTime();
  int action=ev.getAction();
  int code=ev.getKeyCode();
  int repeatCount=ev.getRepeatCount();
  int metaState=ev.getMetaState();
  int deviceId=ev.getDeviceId();
  int scancode=ev.getScanCode();
  if (eventTime == 0)   eventTime=SystemClock.uptimeMillis();
  if (downTime == 0)   downTime=eventTime;
  KeyEvent newEvent=new KeyEvent(downTime,eventTime,action,code,repeatCount,metaState,deviceId,scancode,KeyEvent.FLAG_FROM_SYSTEM);
  int result=dispatchKey(newEvent,Binder.getCallingPid(),Binder.getCallingUid());
  if (sync) {
    mKeyWaiter.waitForNextEventTarget(null,null,null,false,true);
  }
switch (result) {
case INJECT_NO_PERMISSION:
    throw new SecurityException(""String_Node_Str"");
case INJECT_SUCCEEDED:
  return true;
}
return false;
}","/** 
 * Injects a keystroke event into the UI.
 * @param ev A motion event describing the keystroke action.  (Be sure to use{@link SystemClock#uptimeMillis()} as the timebase.)
 * @param sync If true, wait for the event to be completed before returning to the caller.
 * @return Returns true if event was dispatched, false if it was dropped for any reason
 */
public boolean injectKeyEvent(KeyEvent ev,boolean sync){
  long downTime=ev.getDownTime();
  long eventTime=ev.getEventTime();
  int action=ev.getAction();
  int code=ev.getKeyCode();
  int repeatCount=ev.getRepeatCount();
  int metaState=ev.getMetaState();
  int deviceId=ev.getDeviceId();
  int scancode=ev.getScanCode();
  if (eventTime == 0)   eventTime=SystemClock.uptimeMillis();
  if (downTime == 0)   downTime=eventTime;
  KeyEvent newEvent=new KeyEvent(downTime,eventTime,action,code,repeatCount,metaState,deviceId,scancode,KeyEvent.FLAG_FROM_SYSTEM);
  final int pid=Binder.getCallingPid();
  final int uid=Binder.getCallingUid();
  final long ident=Binder.clearCallingIdentity();
  final int result=dispatchKey(newEvent,pid,uid);
  if (sync) {
    mKeyWaiter.waitForNextEventTarget(null,null,null,false,true,pid,uid);
  }
  Binder.restoreCallingIdentity(ident);
switch (result) {
case INJECT_NO_PERMISSION:
    throw new SecurityException(""String_Node_Str"");
case INJECT_SUCCEEDED:
  return true;
}
return false;
}"
24061,"private static byte[] numberToCalledPartyBCDHelper(byte[] ret,int offset,String number){
  if (hasPlus(number)) {
    number=number.replaceAll(""String_Node_Str"",""String_Node_Str"");
    ret[offset]=(byte)TOA_International;
  }
 else {
    ret[offset]=(byte)TOA_Unknown;
  }
  int size=number.length();
  int curChar=0;
  int countFullBytes=ret.length - offset - 1- ((size - curChar) & 1);
  for (int i=1; i < 1 + countFullBytes; i++) {
    ret[offset + i]=(byte)((charToBCD(number.charAt(curChar++))) | (charToBCD(number.charAt(curChar++))) << 4);
  }
  if (countFullBytes + offset < ret.length - 1) {
    ret[ret.length - 1]=(byte)(charToBCD(number.charAt(curChar)) | (0xf << 4));
  }
  return ret;
}","/** 
 * If includeLength is true, prepend a one-byte length value to the return array.
 */
private static byte[] numberToCalledPartyBCDHelper(String number,boolean includeLength){
  int numberLenReal=number.length();
  int numberLenEffective=numberLenReal;
  boolean hasPlus=number.indexOf('+') != -1;
  if (hasPlus)   numberLenEffective--;
  if (numberLenEffective == 0)   return null;
  int resultLen=(numberLenEffective + 1) / 2;
  int extraBytes=1;
  if (includeLength)   extraBytes++;
  resultLen+=extraBytes;
  byte[] result=new byte[resultLen];
  int digitCount=0;
  for (int i=0; i < numberLenReal; i++) {
    char c=number.charAt(i);
    if (c == '+')     continue;
    int shift=((digitCount & 0x01) == 1) ? 4 : 0;
    result[extraBytes + (digitCount >> 1)]|=(byte)((charToBCD(c) & 0x0F) << shift);
    digitCount++;
  }
  if ((digitCount & 0x01) == 1)   result[extraBytes + (digitCount >> 1)]|=0xF0;
  int offset=0;
  if (includeLength)   result[offset++]=(byte)(resultLen - 1);
  result[offset]=(byte)(hasPlus ? TOA_International : TOA_Unknown);
  return result;
}"
24062,"/** 
 * Note: calls extractNetworkPortion(), so do not use for SIM EF[ADN] style records Exceptions thrown if extractNetworkPortion(s).length() == 0
 */
public static byte[] networkPortionToCalledPartyBCD(String s){
  return numberToCalledPartyBCD(extractNetworkPortion(s));
}","/** 
 * Note: calls extractNetworkPortion(), so do not use for SIM EF[ADN] style records Returns null if network portion is empty.
 */
public static byte[] networkPortionToCalledPartyBCD(String s){
  String networkPortion=extractNetworkPortion(s);
  return numberToCalledPartyBCDHelper(networkPortion,false);
}"
24063,"/** 
 * Convert a dialing number to BCD byte array
 * @param number dialing number stringif the dialing number starts with '+', set to internationl TOA
 * @return BCD byte array
 */
public static byte[] numberToCalledPartyBCD(String number){
  int size=(hasPlus(number) ? number.length() - 1 : number.length());
  byte[] ret=new byte[(size + 1) / 2 + 1];
  return numberToCalledPartyBCDHelper(ret,0,number);
}","/** 
 * Convert a dialing number to BCD byte array
 * @param number dialing number stringif the dialing number starts with '+', set to internationl TOA
 * @return BCD byte array
 */
public static byte[] numberToCalledPartyBCD(String number){
  return numberToCalledPartyBCDHelper(number,false);
}"
24064,"/** 
 * Same as   {@link #networkPortionToCalledPartyBCD}, but includes a one-byte length prefix.
 */
public static byte[] networkPortionToCalledPartyBCDWithLength(String s){
  return numberToCalledPartyBCDWithLength(extractNetworkPortion(s));
}","/** 
 * Same as   {@link #networkPortionToCalledPartyBCD}, but includes a one-byte length prefix.
 */
public static byte[] networkPortionToCalledPartyBCDWithLength(String s){
  String networkPortion=extractNetworkPortion(s);
  return numberToCalledPartyBCDHelper(networkPortion,true);
}"
24065,"@SmallTest public void testA() throws Exception {
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  byte[] b=new byte[20];
  b[0]=(byte)0x81;
  b[1]=(byte)0x71;
  b[2]=(byte)0x00;
  b[3]=(byte)0x55;
  b[4]=(byte)0x05;
  b[5]=(byte)0x20;
  b[6]=(byte)0xF0;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,7));
  b[0]=(byte)0x91;
  b[1]=(byte)0x71;
  b[2]=(byte)0x00;
  b[3]=(byte)0x55;
  b[4]=(byte)0x05;
  b[5]=(byte)0x20;
  b[6]=(byte)0xF0;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,7));
  byte[] bRet=PhoneNumberUtils.networkPortionToCalledPartyBCD(""String_Node_Str"");
  assertEquals(7,bRet.length);
  for (int i=0; i < 7; i++) {
    assertEquals(b[i],bRet[i]);
  }
  bRet=PhoneNumberUtils.networkPortionToCalledPartyBCD(""String_Node_Str"");
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(bRet,0,bRet.length));
  b[0]=(byte)0x81;
  b[1]=(byte)0x71;
  b[2]=(byte)0x00;
  b[3]=(byte)0x55;
  b[4]=(byte)0x05;
  b[5]=(byte)0x20;
  b[6]=(byte)0xB0;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,7));
  b[0]=(byte)0x91;
  b[1]=(byte)0x71;
  b[2]=(byte)0x00;
  b[3]=(byte)0x55;
  b[4]=(byte)0x05;
  b[5]=(byte)0x20;
  b[6]=(byte)0xB0;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,7));
  b[0]=(byte)0x81;
  b[1]=(byte)0x2A;
  b[2]=(byte)0xB1;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,3));
  b[0]=(byte)0x81;
  b[1]=(byte)0x2B;
  b[2]=(byte)0xB1;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,3));
  b[0]=(byte)0x91;
  b[1]=(byte)0x2A;
  b[2]=(byte)0xB1;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,3));
  b[0]=(byte)0x81;
  b[1]=(byte)0xAA;
  b[2]=(byte)0x12;
  b[3]=(byte)0xFB;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,4));
  b[0]=(byte)0x91;
  b[1]=(byte)0xAA;
  b[2]=(byte)0x12;
  b[3]=(byte)0xFB;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,4));
  b[0]=(byte)0x81;
  b[1]=(byte)0x9A;
  b[2]=(byte)0xA9;
  b[3]=(byte)0x71;
  b[4]=(byte)0x00;
  b[5]=(byte)0x55;
  b[6]=(byte)0x05;
  b[7]=(byte)0x20;
  b[8]=(byte)0xB0;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,9));
  b[0]=(byte)0x91;
  b[1]=(byte)0x9A;
  b[2]=(byte)0xA9;
  b[3]=(byte)0x71;
  b[4]=(byte)0x00;
  b[5]=(byte)0x55;
  b[6]=(byte)0x05;
  b[7]=(byte)0x20;
  b[8]=(byte)0xB0;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,9));
  b[0]=(byte)0x81;
  b[1]=(byte)0xAA;
  b[2]=(byte)0x12;
  b[3]=(byte)0x1A;
  b[4]=(byte)0x07;
  b[5]=(byte)0x50;
  b[6]=(byte)0x55;
  b[7]=(byte)0x00;
  b[8]=(byte)0x02;
  b[9]=(byte)0xFB;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,10));
  b[0]=(byte)0x91;
  b[1]=(byte)0xAA;
  b[2]=(byte)0x12;
  b[3]=(byte)0x1A;
  b[4]=(byte)0x07;
  b[5]=(byte)0x50;
  b[6]=(byte)0x55;
  b[7]=(byte)0x00;
  b[8]=(byte)0x02;
  b[9]=(byte)0xFB;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,10));
  b[0]=(byte)0x81;
  b[1]=(byte)0x2A;
  b[2]=(byte)0xA1;
  b[3]=(byte)0x71;
  b[4]=(byte)0x00;
  b[5]=(byte)0x55;
  b[6]=(byte)0x05;
  b[7]=(byte)0x20;
  b[8]=(byte)0xF0;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,9));
  b[0]=(byte)0x91;
  b[1]=(byte)0x2A;
  b[2]=(byte)0xB1;
  b[3]=(byte)0x71;
  b[4]=(byte)0x00;
  b[5]=(byte)0x55;
  b[6]=(byte)0x05;
  b[7]=(byte)0x20;
  b[8]=(byte)0xF0;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,9));
  assertNull(PhoneNumberUtils.extractNetworkPortion(null));
  assertNull(PhoneNumberUtils.extractPostDialPortion(null));
  assertTrue(PhoneNumberUtils.compare(null,null));
  assertFalse(PhoneNumberUtils.compare(null,""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",null));
  assertNull(PhoneNumberUtils.toCallerIDMinMatch(null));
  assertNull(PhoneNumberUtils.getStrippedReversed(null));
  assertNull(PhoneNumberUtils.stringFromStringAndTOA(null,1));
}","@SmallTest public void testA() throws Exception {
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  assertEquals(""String_Node_Str"",PhoneNumberUtils.extractNetworkPortion(""String_Node_Str""));
  byte[] b=new byte[20];
  b[0]=(byte)0x81;
  b[1]=(byte)0x71;
  b[2]=(byte)0x00;
  b[3]=(byte)0x55;
  b[4]=(byte)0x05;
  b[5]=(byte)0x20;
  b[6]=(byte)0xF0;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,7));
  b[0]=(byte)0x91;
  b[1]=(byte)0x71;
  b[2]=(byte)0x00;
  b[3]=(byte)0x55;
  b[4]=(byte)0x05;
  b[5]=(byte)0x20;
  b[6]=(byte)0xF0;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,7));
  byte[] bRet=PhoneNumberUtils.networkPortionToCalledPartyBCD(""String_Node_Str"");
  assertEquals(7,bRet.length);
  for (int i=0; i < 7; i++) {
    assertEquals(b[i],bRet[i]);
  }
  bRet=PhoneNumberUtils.networkPortionToCalledPartyBCDWithLength(""String_Node_Str"");
  assertEquals(8,bRet.length);
  assertEquals(bRet[0],7);
  for (int i=1; i < 8; i++) {
    assertEquals(b[i - 1],bRet[i]);
  }
  bRet=PhoneNumberUtils.networkPortionToCalledPartyBCD(""String_Node_Str"");
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(bRet,0,bRet.length));
  b[0]=(byte)0x81;
  b[1]=(byte)0x71;
  b[2]=(byte)0x00;
  b[3]=(byte)0x55;
  b[4]=(byte)0x05;
  b[5]=(byte)0x20;
  b[6]=(byte)0xB0;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,7));
  b[0]=(byte)0x91;
  b[1]=(byte)0x71;
  b[2]=(byte)0x00;
  b[3]=(byte)0x55;
  b[4]=(byte)0x05;
  b[5]=(byte)0x20;
  b[6]=(byte)0xB0;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,7));
  b[0]=(byte)0x81;
  b[1]=(byte)0x2A;
  b[2]=(byte)0xB1;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,3));
  b[0]=(byte)0x81;
  b[1]=(byte)0x2B;
  b[2]=(byte)0xB1;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,3));
  b[0]=(byte)0x91;
  b[1]=(byte)0x2A;
  b[2]=(byte)0xB1;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,3));
  b[0]=(byte)0x81;
  b[1]=(byte)0xAA;
  b[2]=(byte)0x12;
  b[3]=(byte)0xFB;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,4));
  b[0]=(byte)0x91;
  b[1]=(byte)0xAA;
  b[2]=(byte)0x12;
  b[3]=(byte)0xFB;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,4));
  b[0]=(byte)0x81;
  b[1]=(byte)0x9A;
  b[2]=(byte)0xA9;
  b[3]=(byte)0x71;
  b[4]=(byte)0x00;
  b[5]=(byte)0x55;
  b[6]=(byte)0x05;
  b[7]=(byte)0x20;
  b[8]=(byte)0xB0;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,9));
  b[0]=(byte)0x91;
  b[1]=(byte)0x9A;
  b[2]=(byte)0xA9;
  b[3]=(byte)0x71;
  b[4]=(byte)0x00;
  b[5]=(byte)0x55;
  b[6]=(byte)0x05;
  b[7]=(byte)0x20;
  b[8]=(byte)0xB0;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,9));
  b[0]=(byte)0x81;
  b[1]=(byte)0xAA;
  b[2]=(byte)0x12;
  b[3]=(byte)0x1A;
  b[4]=(byte)0x07;
  b[5]=(byte)0x50;
  b[6]=(byte)0x55;
  b[7]=(byte)0x00;
  b[8]=(byte)0x02;
  b[9]=(byte)0xFB;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,10));
  b[0]=(byte)0x91;
  b[1]=(byte)0xAA;
  b[2]=(byte)0x12;
  b[3]=(byte)0x1A;
  b[4]=(byte)0x07;
  b[5]=(byte)0x50;
  b[6]=(byte)0x55;
  b[7]=(byte)0x00;
  b[8]=(byte)0x02;
  b[9]=(byte)0xFB;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,10));
  b[0]=(byte)0x81;
  b[1]=(byte)0x2A;
  b[2]=(byte)0xA1;
  b[3]=(byte)0x71;
  b[4]=(byte)0x00;
  b[5]=(byte)0x55;
  b[6]=(byte)0x05;
  b[7]=(byte)0x20;
  b[8]=(byte)0xF0;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,9));
  b[0]=(byte)0x91;
  b[1]=(byte)0x2A;
  b[2]=(byte)0xB1;
  b[3]=(byte)0x71;
  b[4]=(byte)0x00;
  b[5]=(byte)0x55;
  b[6]=(byte)0x05;
  b[7]=(byte)0x20;
  b[8]=(byte)0xF0;
  assertEquals(""String_Node_Str"",PhoneNumberUtils.calledPartyBCDToString(b,0,9));
  assertNull(PhoneNumberUtils.extractNetworkPortion(null));
  assertNull(PhoneNumberUtils.extractPostDialPortion(null));
  assertTrue(PhoneNumberUtils.compare(null,null));
  assertFalse(PhoneNumberUtils.compare(null,""String_Node_Str""));
  assertFalse(PhoneNumberUtils.compare(""String_Node_Str"",null));
  assertNull(PhoneNumberUtils.toCallerIDMinMatch(null));
  assertNull(PhoneNumberUtils.getStrippedReversed(null));
  assertNull(PhoneNumberUtils.stringFromStringAndTOA(null,1));
}"
24066,"private void runProfile(){
  String profileFile=null;
  boolean start=false;
  String process=nextArg();
  if (process == null) {
    System.err.println(""String_Node_Str"");
    showUsage();
    return;
  }
  String cmd=nextArg();
  if (""String_Node_Str"".equals(cmd)) {
    start=true;
    profileFile=nextArg();
    if (profileFile == null) {
      System.err.println(""String_Node_Str"");
      showUsage();
      return;
    }
  }
 else   if (!""String_Node_Str"".equals(cmd)) {
    System.err.println(""String_Node_Str"" + cmd + ""String_Node_Str"");
    showUsage();
    return;
  }
  try {
    if (!mAm.profileControl(process,start,profileFile)) {
      System.out.println(""String_Node_Str"" + process);
      return;
    }
  }
 catch (  IllegalArgumentException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    return;
  }
catch (  IllegalStateException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    return;
  }
catch (  RemoteException e) {
    System.out.println(""String_Node_Str"");
    return;
  }
}","private void runProfile(){
  String profileFile=null;
  boolean start=false;
  String process=nextArg();
  if (process == null) {
    System.err.println(""String_Node_Str"");
    showUsage();
    return;
  }
  ParcelFileDescriptor fd=null;
  String cmd=nextArg();
  if (""String_Node_Str"".equals(cmd)) {
    start=true;
    profileFile=nextArg();
    if (profileFile == null) {
      System.err.println(""String_Node_Str"");
      showUsage();
      return;
    }
    try {
      fd=ParcelFileDescriptor.open(new File(profileFile),ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE | ParcelFileDescriptor.MODE_READ_WRITE);
    }
 catch (    FileNotFoundException e) {
      System.err.println(""String_Node_Str"" + profileFile);
      return;
    }
  }
 else   if (!""String_Node_Str"".equals(cmd)) {
    System.err.println(""String_Node_Str"" + cmd + ""String_Node_Str"");
    showUsage();
    return;
  }
  try {
    if (!mAm.profileControl(process,start,profileFile,fd)) {
      System.err.println(""String_Node_Str"" + process);
      return;
    }
  }
 catch (  IllegalArgumentException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    return;
  }
catch (  IllegalStateException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    return;
  }
catch (  RemoteException e) {
    System.out.println(""String_Node_Str"");
    return;
  }
}"
24067,"public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
      int grantedMode=data.readInt();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      boolean onlyIfNeeded=data.readInt() != 0;
      boolean debug=data.readInt() != 0;
      int result=startActivity(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder callingActivity=data.readStrongBinder();
    Intent intent=Intent.CREATOR.createFromParcel(data);
    boolean result=startNextMatchingActivity(callingActivity,intent);
    reply.writeNoException();
    reply.writeInt(result ? 1 : 0);
    return true;
  }
case FINISH_ACTIVITY_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder token=data.readStrongBinder();
  Intent resultData=null;
  int resultCode=data.readInt();
  if (data.readInt() != 0) {
    resultData=Intent.CREATOR.createFromParcel(data);
  }
  boolean res=finishActivity(token,resultCode,resultData);
  reply.writeNoException();
  reply.writeInt(res ? 1 : 0);
  return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
Intent intent=registerReceiver(app,rec,filter,perm);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,serialized,sticky);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
unbroadcastIntent(app,intent);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case SET_PERSISTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isPersistent=data.readInt() != 0;
if (token != null) {
setPersistent(token,isPersistent);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
if (token != null) {
activityIdle(token);
}
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
activityPaused(token,map);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,thumbnail,description);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
IBinder receiverBinder=data.readStrongBinder();
IThumbnailReceiver receiver=receiverBinder != null ? IThumbnailReceiver.Stub.asInterface(receiverBinder) : null;
List list=getTasks(maxNum,fl,receiver);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=(ActivityManager.RunningTaskInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=(ActivityManager.RunningServiceInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToFront(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case FINISH_OTHER_INSTANCES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName className=ComponentName.readFromParcel(data);
finishOtherInstances(token,className);
reply.writeNoException();
return true;
}
case REPORT_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
reportThumbnail(token,thumbnail,description);
reply.writeNoException();
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
ContentProviderHolder cph=getContentProvider(app,name);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
removeContentProvider(app,name);
reply.writeNoException();
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
ComponentName cn=startService(app,service,resolvedType);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int res=stopService(app,service,resolvedType);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
boolean isForeground=data.readInt() != 0;
setServiceForeground(className,token,isForeground);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
serviceDoneExecuting(token);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
boolean res=startInstrumentation(className,profileFile,fl,arguments,w);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent requestIntent=data.readInt() != 0 ? Intent.CREATOR.createFromParcel(data) : null;
String requestResolvedType=data.readString();
int fl=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntent,requestResolvedType,fl);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int res=checkUriPermission(uri,pid,uid,mode);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
boolean res=clearApplicationUserData(packageName,observer);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
grantUriPermission(app,targetPkg,uri,mode);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
revokeUriPermission(app,uri,mode);
reply.writeNoException();
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GOING_TO_SLEEP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
goingToSleep();
reply.writeNoException();
return true;
}
case WAKING_UP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
wakingUp();
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_WATCHER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityWatcher watcher=IActivityWatcher.Stub.asInterface(data.readStrongBinder());
setActivityWatcher(watcher);
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
noteWakeupAlarm(is);
reply.writeNoException();
return true;
}
case KILL_PIDS_FOR_MEMORY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
boolean res=killPidsForMemory(pids);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REPORT_PSS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int pss=data.readInt();
reportPss(app,pss);
reply.writeNoException();
return true;
}
case START_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
String cls=data.readString();
String action=data.readString();
String indata=data.readString();
startRunning(pkg,cls,action,indata);
reply.writeNoException();
return true;
}
case SYSTEM_READY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
systemReady();
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_ERROR_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int fl=data.readInt();
String tag=data.readString();
String shortMsg=data.readString();
String longMsg=data.readString();
byte[] crashData=data.createByteArray();
int res=handleApplicationError(app,fl,tag,shortMsg,longMsg,crashData);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case RESTART_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
restartPackage(packageName);
reply.writeNoException();
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
boolean start=data.readInt() != 0;
String path=data.readString();
boolean res=profileControl(process,start,path);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
case START_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
int backupRestoreMode=data.readInt();
boolean success=bindBackupAgent(info,backupRestoreMode);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case BACKUP_AGENT_CREATED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IBinder agent=data.readStrongBinder();
backupAgentCreated(packageName,agent);
reply.writeNoException();
return true;
}
case UNBIND_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
unbindBackupAgent(info);
reply.writeNoException();
return true;
}
}
return super.onTransact(code,data,reply,flags);
}","public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
      int grantedMode=data.readInt();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      boolean onlyIfNeeded=data.readInt() != 0;
      boolean debug=data.readInt() != 0;
      int result=startActivity(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder callingActivity=data.readStrongBinder();
    Intent intent=Intent.CREATOR.createFromParcel(data);
    boolean result=startNextMatchingActivity(callingActivity,intent);
    reply.writeNoException();
    reply.writeInt(result ? 1 : 0);
    return true;
  }
case FINISH_ACTIVITY_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder token=data.readStrongBinder();
  Intent resultData=null;
  int resultCode=data.readInt();
  if (data.readInt() != 0) {
    resultData=Intent.CREATOR.createFromParcel(data);
  }
  boolean res=finishActivity(token,resultCode,resultData);
  reply.writeNoException();
  reply.writeInt(res ? 1 : 0);
  return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
Intent intent=registerReceiver(app,rec,filter,perm);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,serialized,sticky);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
unbroadcastIntent(app,intent);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case SET_PERSISTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isPersistent=data.readInt() != 0;
if (token != null) {
setPersistent(token,isPersistent);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
if (token != null) {
activityIdle(token);
}
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
activityPaused(token,map);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,thumbnail,description);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
IBinder receiverBinder=data.readStrongBinder();
IThumbnailReceiver receiver=receiverBinder != null ? IThumbnailReceiver.Stub.asInterface(receiverBinder) : null;
List list=getTasks(maxNum,fl,receiver);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=(ActivityManager.RunningTaskInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=(ActivityManager.RunningServiceInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToFront(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case FINISH_OTHER_INSTANCES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName className=ComponentName.readFromParcel(data);
finishOtherInstances(token,className);
reply.writeNoException();
return true;
}
case REPORT_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
reportThumbnail(token,thumbnail,description);
reply.writeNoException();
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
ContentProviderHolder cph=getContentProvider(app,name);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
removeContentProvider(app,name);
reply.writeNoException();
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
ComponentName cn=startService(app,service,resolvedType);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int res=stopService(app,service,resolvedType);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
boolean isForeground=data.readInt() != 0;
setServiceForeground(className,token,isForeground);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
serviceDoneExecuting(token);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
boolean res=startInstrumentation(className,profileFile,fl,arguments,w);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent requestIntent=data.readInt() != 0 ? Intent.CREATOR.createFromParcel(data) : null;
String requestResolvedType=data.readString();
int fl=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntent,requestResolvedType,fl);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int res=checkUriPermission(uri,pid,uid,mode);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
boolean res=clearApplicationUserData(packageName,observer);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
grantUriPermission(app,targetPkg,uri,mode);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
revokeUriPermission(app,uri,mode);
reply.writeNoException();
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GOING_TO_SLEEP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
goingToSleep();
reply.writeNoException();
return true;
}
case WAKING_UP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
wakingUp();
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_WATCHER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityWatcher watcher=IActivityWatcher.Stub.asInterface(data.readStrongBinder());
setActivityWatcher(watcher);
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
noteWakeupAlarm(is);
reply.writeNoException();
return true;
}
case KILL_PIDS_FOR_MEMORY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
boolean res=killPidsForMemory(pids);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REPORT_PSS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int pss=data.readInt();
reportPss(app,pss);
reply.writeNoException();
return true;
}
case START_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
String cls=data.readString();
String action=data.readString();
String indata=data.readString();
startRunning(pkg,cls,action,indata);
reply.writeNoException();
return true;
}
case SYSTEM_READY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
systemReady();
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_ERROR_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int fl=data.readInt();
String tag=data.readString();
String shortMsg=data.readString();
String longMsg=data.readString();
byte[] crashData=data.createByteArray();
int res=handleApplicationError(app,fl,tag,shortMsg,longMsg,crashData);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case RESTART_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
restartPackage(packageName);
reply.writeNoException();
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
boolean start=data.readInt() != 0;
String path=data.readString();
ParcelFileDescriptor fd=data.readInt() != 0 ? data.readFileDescriptor() : null;
boolean res=profileControl(process,start,path,fd);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
case START_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
int backupRestoreMode=data.readInt();
boolean success=bindBackupAgent(info,backupRestoreMode);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case BACKUP_AGENT_CREATED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IBinder agent=data.readStrongBinder();
backupAgentCreated(packageName,agent);
reply.writeNoException();
return true;
}
case UNBIND_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
unbindBackupAgent(info);
reply.writeNoException();
return true;
}
}
return super.onTransact(code,data,reply,flags);
}"
24068,"public boolean profileControl(String process,boolean start,String path) throws RemoteException {
  Parcel data=Parcel.obtain();
  Parcel reply=Parcel.obtain();
  data.writeInterfaceToken(IActivityManager.descriptor);
  data.writeString(process);
  data.writeInt(start ? 1 : 0);
  data.writeString(path);
  mRemote.transact(PROFILE_CONTROL_TRANSACTION,data,reply,0);
  reply.readException();
  boolean res=reply.readInt() != 0;
  reply.recycle();
  data.recycle();
  return res;
}","public boolean profileControl(String process,boolean start,String path,ParcelFileDescriptor fd) throws RemoteException {
  Parcel data=Parcel.obtain();
  Parcel reply=Parcel.obtain();
  data.writeInterfaceToken(IActivityManager.descriptor);
  data.writeString(process);
  data.writeInt(start ? 1 : 0);
  data.writeString(path);
  if (fd != null) {
    data.writeInt(1);
    fd.writeToParcel(data,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
  }
 else {
    data.writeInt(0);
  }
  mRemote.transact(PROFILE_CONTROL_TRANSACTION,data,reply,0);
  reply.readException();
  boolean res=reply.readInt() != 0;
  reply.recycle();
  data.recycle();
  return res;
}"
24069,"final void handleProfilerControl(boolean start,String path){
  if (start) {
    File file=new File(path);
    file.getParentFile().mkdirs();
    try {
      Debug.startMethodTracing(file.toString(),8 * 1024 * 1024);
    }
 catch (    RuntimeException e) {
      Log.w(TAG,""String_Node_Str"" + path + ""String_Node_Str"");
    }
  }
 else {
    Debug.stopMethodTracing();
  }
}","final void handleProfilerControl(boolean start,ProfilerControlData pcd){
  if (start) {
    try {
      Debug.startMethodTracing(pcd.path,pcd.fd.getFileDescriptor(),8 * 1024 * 1024,0);
    }
 catch (    RuntimeException e) {
      Log.w(TAG,""String_Node_Str"" + pcd.path + ""String_Node_Str"");
    }
 finally {
      try {
        pcd.fd.close();
      }
 catch (      IOException e) {
        Log.w(TAG,""String_Node_Str"",e);
      }
    }
  }
 else {
    Debug.stopMethodTracing();
  }
}"
24070,"public void profilerControl(boolean start,String path){
  queueOrSendMessage(H.PROFILER_CONTROL,path,start ? 1 : 0);
}","public void profilerControl(boolean start,String path,ParcelFileDescriptor fd){
  ProfilerControlData pcd=new ProfilerControlData();
  pcd.path=path;
  pcd.fd=fd;
  queueOrSendMessage(H.PROFILER_CONTROL,pcd,start ? 1 : 0);
}"
24071,"public void handleMessage(Message msg){
switch (msg.what) {
case LAUNCH_ACTIVITY:
{
      ActivityRecord r=(ActivityRecord)msg.obj;
      r.packageInfo=getPackageInfoNoCheck(r.activityInfo.applicationInfo);
      handleLaunchActivity(r,null);
    }
  break;
case RELAUNCH_ACTIVITY:
{
  ActivityRecord r=(ActivityRecord)msg.obj;
  handleRelaunchActivity(r,msg.arg1);
}
break;
case PAUSE_ACTIVITY:
handlePauseActivity((IBinder)msg.obj,false,msg.arg1 != 0,msg.arg2);
break;
case PAUSE_ACTIVITY_FINISHING:
handlePauseActivity((IBinder)msg.obj,true,msg.arg1 != 0,msg.arg2);
break;
case STOP_ACTIVITY_SHOW:
handleStopActivity((IBinder)msg.obj,true,msg.arg2);
break;
case STOP_ACTIVITY_HIDE:
handleStopActivity((IBinder)msg.obj,false,msg.arg2);
break;
case SHOW_WINDOW:
handleWindowVisibility((IBinder)msg.obj,true);
break;
case HIDE_WINDOW:
handleWindowVisibility((IBinder)msg.obj,false);
break;
case RESUME_ACTIVITY:
handleResumeActivity((IBinder)msg.obj,true,msg.arg1 != 0);
break;
case SEND_RESULT:
handleSendResult((ResultData)msg.obj);
break;
case DESTROY_ACTIVITY:
handleDestroyActivity((IBinder)msg.obj,msg.arg1 != 0,msg.arg2,false);
break;
case BIND_APPLICATION:
AppBindData data=(AppBindData)msg.obj;
handleBindApplication(data);
break;
case EXIT_APPLICATION:
if (mInitialApplication != null) {
mInitialApplication.onTerminate();
}
Looper.myLooper().quit();
break;
case NEW_INTENT:
handleNewIntent((NewIntentData)msg.obj);
break;
case RECEIVER:
handleReceiver((ReceiverData)msg.obj);
break;
case CREATE_SERVICE:
handleCreateService((CreateServiceData)msg.obj);
break;
case BIND_SERVICE:
handleBindService((BindServiceData)msg.obj);
break;
case UNBIND_SERVICE:
handleUnbindService((BindServiceData)msg.obj);
break;
case SERVICE_ARGS:
handleServiceArgs((ServiceArgsData)msg.obj);
break;
case STOP_SERVICE:
handleStopService((IBinder)msg.obj);
break;
case REQUEST_THUMBNAIL:
handleRequestThumbnail((IBinder)msg.obj);
break;
case CONFIGURATION_CHANGED:
handleConfigurationChanged((Configuration)msg.obj);
break;
case CLEAN_UP_CONTEXT:
ContextCleanupInfo cci=(ContextCleanupInfo)msg.obj;
cci.context.performFinalCleanup(cci.who,cci.what);
break;
case GC_WHEN_IDLE:
scheduleGcIdler();
break;
case DUMP_SERVICE:
handleDumpService((DumpServiceInfo)msg.obj);
break;
case LOW_MEMORY:
handleLowMemory();
break;
case ACTIVITY_CONFIGURATION_CHANGED:
handleActivityConfigurationChanged((IBinder)msg.obj);
break;
case PROFILER_CONTROL:
handleProfilerControl(msg.arg1 != 0,(String)msg.obj);
break;
case CREATE_BACKUP_AGENT:
handleCreateBackupAgent((CreateBackupAgentData)msg.obj);
break;
case DESTROY_BACKUP_AGENT:
handleDestroyBackupAgent((CreateBackupAgentData)msg.obj);
break;
}
}","public void handleMessage(Message msg){
switch (msg.what) {
case LAUNCH_ACTIVITY:
{
      ActivityRecord r=(ActivityRecord)msg.obj;
      r.packageInfo=getPackageInfoNoCheck(r.activityInfo.applicationInfo);
      handleLaunchActivity(r,null);
    }
  break;
case RELAUNCH_ACTIVITY:
{
  ActivityRecord r=(ActivityRecord)msg.obj;
  handleRelaunchActivity(r,msg.arg1);
}
break;
case PAUSE_ACTIVITY:
handlePauseActivity((IBinder)msg.obj,false,msg.arg1 != 0,msg.arg2);
break;
case PAUSE_ACTIVITY_FINISHING:
handlePauseActivity((IBinder)msg.obj,true,msg.arg1 != 0,msg.arg2);
break;
case STOP_ACTIVITY_SHOW:
handleStopActivity((IBinder)msg.obj,true,msg.arg2);
break;
case STOP_ACTIVITY_HIDE:
handleStopActivity((IBinder)msg.obj,false,msg.arg2);
break;
case SHOW_WINDOW:
handleWindowVisibility((IBinder)msg.obj,true);
break;
case HIDE_WINDOW:
handleWindowVisibility((IBinder)msg.obj,false);
break;
case RESUME_ACTIVITY:
handleResumeActivity((IBinder)msg.obj,true,msg.arg1 != 0);
break;
case SEND_RESULT:
handleSendResult((ResultData)msg.obj);
break;
case DESTROY_ACTIVITY:
handleDestroyActivity((IBinder)msg.obj,msg.arg1 != 0,msg.arg2,false);
break;
case BIND_APPLICATION:
AppBindData data=(AppBindData)msg.obj;
handleBindApplication(data);
break;
case EXIT_APPLICATION:
if (mInitialApplication != null) {
mInitialApplication.onTerminate();
}
Looper.myLooper().quit();
break;
case NEW_INTENT:
handleNewIntent((NewIntentData)msg.obj);
break;
case RECEIVER:
handleReceiver((ReceiverData)msg.obj);
break;
case CREATE_SERVICE:
handleCreateService((CreateServiceData)msg.obj);
break;
case BIND_SERVICE:
handleBindService((BindServiceData)msg.obj);
break;
case UNBIND_SERVICE:
handleUnbindService((BindServiceData)msg.obj);
break;
case SERVICE_ARGS:
handleServiceArgs((ServiceArgsData)msg.obj);
break;
case STOP_SERVICE:
handleStopService((IBinder)msg.obj);
break;
case REQUEST_THUMBNAIL:
handleRequestThumbnail((IBinder)msg.obj);
break;
case CONFIGURATION_CHANGED:
handleConfigurationChanged((Configuration)msg.obj);
break;
case CLEAN_UP_CONTEXT:
ContextCleanupInfo cci=(ContextCleanupInfo)msg.obj;
cci.context.performFinalCleanup(cci.who,cci.what);
break;
case GC_WHEN_IDLE:
scheduleGcIdler();
break;
case DUMP_SERVICE:
handleDumpService((DumpServiceInfo)msg.obj);
break;
case LOW_MEMORY:
handleLowMemory();
break;
case ACTIVITY_CONFIGURATION_CHANGED:
handleActivityConfigurationChanged((IBinder)msg.obj);
break;
case PROFILER_CONTROL:
handleProfilerControl(msg.arg1 != 0,(ProfilerControlData)msg.obj);
break;
case CREATE_BACKUP_AGENT:
handleCreateBackupAgent((CreateBackupAgentData)msg.obj);
break;
case DESTROY_BACKUP_AGENT:
handleDestroyBackupAgent((CreateBackupAgentData)msg.obj);
break;
}
}"
24072,"@Override public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case SCHEDULE_PAUSE_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IApplicationThread.descriptor);
      IBinder b=data.readStrongBinder();
      boolean finished=data.readInt() != 0;
      boolean userLeaving=data.readInt() != 0;
      int configChanges=data.readInt();
      schedulePauseActivity(b,finished,userLeaving,configChanges);
      return true;
    }
case SCHEDULE_STOP_ACTIVITY_TRANSACTION:
{
    data.enforceInterface(IApplicationThread.descriptor);
    IBinder b=data.readStrongBinder();
    boolean show=data.readInt() != 0;
    int configChanges=data.readInt();
    scheduleStopActivity(b,show,configChanges);
    return true;
  }
case SCHEDULE_WINDOW_VISIBILITY_TRANSACTION:
{
  data.enforceInterface(IApplicationThread.descriptor);
  IBinder b=data.readStrongBinder();
  boolean show=data.readInt() != 0;
  scheduleWindowVisibility(b,show);
  return true;
}
case SCHEDULE_RESUME_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
boolean isForward=data.readInt() != 0;
scheduleResumeActivity(b,isForward);
return true;
}
case SCHEDULE_SEND_RESULT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
List<ResultInfo> ri=data.createTypedArrayList(ResultInfo.CREATOR);
scheduleSendResult(b,ri);
return true;
}
case SCHEDULE_LAUNCH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder b=data.readStrongBinder();
ActivityInfo info=ActivityInfo.CREATOR.createFromParcel(data);
Bundle state=data.readBundle();
List<ResultInfo> ri=data.createTypedArrayList(ResultInfo.CREATOR);
List<Intent> pi=data.createTypedArrayList(Intent.CREATOR);
boolean notResumed=data.readInt() != 0;
boolean isForward=data.readInt() != 0;
scheduleLaunchActivity(intent,b,info,state,ri,pi,notResumed,isForward);
return true;
}
case SCHEDULE_RELAUNCH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
List<ResultInfo> ri=data.createTypedArrayList(ResultInfo.CREATOR);
List<Intent> pi=data.createTypedArrayList(Intent.CREATOR);
int configChanges=data.readInt();
boolean notResumed=data.readInt() != 0;
scheduleRelaunchActivity(b,ri,pi,configChanges,notResumed);
return true;
}
case SCHEDULE_NEW_INTENT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
List<Intent> pi=data.createTypedArrayList(Intent.CREATOR);
IBinder b=data.readStrongBinder();
scheduleNewIntent(pi,b);
return true;
}
case SCHEDULE_FINISH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
boolean finishing=data.readInt() != 0;
int configChanges=data.readInt();
scheduleDestroyActivity(b,finishing,configChanges);
return true;
}
case SCHEDULE_RECEIVER_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
Intent intent=Intent.CREATOR.createFromParcel(data);
ActivityInfo info=ActivityInfo.CREATOR.createFromParcel(data);
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean sync=data.readInt() != 0;
scheduleReceiver(intent,info,resultCode,resultData,resultExtras,sync);
return true;
}
case SCHEDULE_CREATE_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
ServiceInfo info=ServiceInfo.CREATOR.createFromParcel(data);
scheduleCreateService(token,info);
return true;
}
case SCHEDULE_BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean rebind=data.readInt() != 0;
scheduleBindService(token,intent,rebind);
return true;
}
case SCHEDULE_UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
scheduleUnbindService(token,intent);
return true;
}
case SCHEDULE_SERVICE_ARGS_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
Intent args=Intent.CREATOR.createFromParcel(data);
scheduleServiceArgs(token,startId,args);
return true;
}
case SCHEDULE_STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
scheduleStopService(token);
return true;
}
case BIND_APPLICATION_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
String packageName=data.readString();
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
List<ProviderInfo> providers=data.createTypedArrayList(ProviderInfo.CREATOR);
ComponentName testName=(data.readInt() != 0) ? new ComponentName(data) : null;
String profileName=data.readString();
Bundle testArgs=data.readBundle();
IBinder binder=data.readStrongBinder();
IInstrumentationWatcher testWatcher=IInstrumentationWatcher.Stub.asInterface(binder);
int testMode=data.readInt();
boolean restrictedBackupMode=(data.readInt() != 0);
Configuration config=Configuration.CREATOR.createFromParcel(data);
HashMap<String,IBinder> services=data.readHashMap(null);
bindApplication(packageName,info,providers,testName,profileName,testArgs,testWatcher,testMode,restrictedBackupMode,config,services);
return true;
}
case SCHEDULE_EXIT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
scheduleExit();
return true;
}
case REQUEST_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
requestThumbnail(b);
return true;
}
case SCHEDULE_CONFIGURATION_CHANGED_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
scheduleConfigurationChanged(config);
return true;
}
case UPDATE_TIME_ZONE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
updateTimeZone();
return true;
}
case PROCESS_IN_BACKGROUND_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
processInBackground();
return true;
}
case DUMP_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
ParcelFileDescriptor fd=data.readFileDescriptor();
final IBinder service=data.readStrongBinder();
final String[] args=data.readStringArray();
if (fd != null) {
dumpService(fd.getFileDescriptor(),service,args);
try {
fd.close();
}
 catch (IOException e) {
}
}
return true;
}
case SCHEDULE_REGISTERED_RECEIVER_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IIntentReceiver receiver=IIntentReceiver.Stub.asInterface(data.readStrongBinder());
Intent intent=Intent.CREATOR.createFromParcel(data);
int resultCode=data.readInt();
String dataStr=data.readString();
Bundle extras=data.readBundle();
boolean ordered=data.readInt() != 0;
scheduleRegisteredReceiver(receiver,intent,resultCode,dataStr,extras,ordered);
return true;
}
case SCHEDULE_LOW_MEMORY_TRANSACTION:
{
scheduleLowMemory();
return true;
}
case SCHEDULE_ACTIVITY_CONFIGURATION_CHANGED_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
scheduleActivityConfigurationChanged(b);
return true;
}
case REQUEST_PSS_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
requestPss();
return true;
}
case PROFILER_CONTROL_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
boolean start=data.readInt() != 0;
String path=data.readString();
profilerControl(start,path);
return true;
}
case SET_SCHEDULING_GROUP_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
int group=data.readInt();
setSchedulingGroup(group);
return true;
}
case SCHEDULE_CREATE_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
ApplicationInfo appInfo=ApplicationInfo.CREATOR.createFromParcel(data);
int backupMode=data.readInt();
scheduleCreateBackupAgent(appInfo,backupMode);
return true;
}
case SCHEDULE_DESTROY_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
ApplicationInfo appInfo=ApplicationInfo.CREATOR.createFromParcel(data);
scheduleDestroyBackupAgent(appInfo);
return true;
}
}
return super.onTransact(code,data,reply,flags);
}","@Override public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case SCHEDULE_PAUSE_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IApplicationThread.descriptor);
      IBinder b=data.readStrongBinder();
      boolean finished=data.readInt() != 0;
      boolean userLeaving=data.readInt() != 0;
      int configChanges=data.readInt();
      schedulePauseActivity(b,finished,userLeaving,configChanges);
      return true;
    }
case SCHEDULE_STOP_ACTIVITY_TRANSACTION:
{
    data.enforceInterface(IApplicationThread.descriptor);
    IBinder b=data.readStrongBinder();
    boolean show=data.readInt() != 0;
    int configChanges=data.readInt();
    scheduleStopActivity(b,show,configChanges);
    return true;
  }
case SCHEDULE_WINDOW_VISIBILITY_TRANSACTION:
{
  data.enforceInterface(IApplicationThread.descriptor);
  IBinder b=data.readStrongBinder();
  boolean show=data.readInt() != 0;
  scheduleWindowVisibility(b,show);
  return true;
}
case SCHEDULE_RESUME_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
boolean isForward=data.readInt() != 0;
scheduleResumeActivity(b,isForward);
return true;
}
case SCHEDULE_SEND_RESULT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
List<ResultInfo> ri=data.createTypedArrayList(ResultInfo.CREATOR);
scheduleSendResult(b,ri);
return true;
}
case SCHEDULE_LAUNCH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder b=data.readStrongBinder();
ActivityInfo info=ActivityInfo.CREATOR.createFromParcel(data);
Bundle state=data.readBundle();
List<ResultInfo> ri=data.createTypedArrayList(ResultInfo.CREATOR);
List<Intent> pi=data.createTypedArrayList(Intent.CREATOR);
boolean notResumed=data.readInt() != 0;
boolean isForward=data.readInt() != 0;
scheduleLaunchActivity(intent,b,info,state,ri,pi,notResumed,isForward);
return true;
}
case SCHEDULE_RELAUNCH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
List<ResultInfo> ri=data.createTypedArrayList(ResultInfo.CREATOR);
List<Intent> pi=data.createTypedArrayList(Intent.CREATOR);
int configChanges=data.readInt();
boolean notResumed=data.readInt() != 0;
scheduleRelaunchActivity(b,ri,pi,configChanges,notResumed);
return true;
}
case SCHEDULE_NEW_INTENT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
List<Intent> pi=data.createTypedArrayList(Intent.CREATOR);
IBinder b=data.readStrongBinder();
scheduleNewIntent(pi,b);
return true;
}
case SCHEDULE_FINISH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
boolean finishing=data.readInt() != 0;
int configChanges=data.readInt();
scheduleDestroyActivity(b,finishing,configChanges);
return true;
}
case SCHEDULE_RECEIVER_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
Intent intent=Intent.CREATOR.createFromParcel(data);
ActivityInfo info=ActivityInfo.CREATOR.createFromParcel(data);
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean sync=data.readInt() != 0;
scheduleReceiver(intent,info,resultCode,resultData,resultExtras,sync);
return true;
}
case SCHEDULE_CREATE_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
ServiceInfo info=ServiceInfo.CREATOR.createFromParcel(data);
scheduleCreateService(token,info);
return true;
}
case SCHEDULE_BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean rebind=data.readInt() != 0;
scheduleBindService(token,intent,rebind);
return true;
}
case SCHEDULE_UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
scheduleUnbindService(token,intent);
return true;
}
case SCHEDULE_SERVICE_ARGS_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
Intent args=Intent.CREATOR.createFromParcel(data);
scheduleServiceArgs(token,startId,args);
return true;
}
case SCHEDULE_STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
scheduleStopService(token);
return true;
}
case BIND_APPLICATION_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
String packageName=data.readString();
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
List<ProviderInfo> providers=data.createTypedArrayList(ProviderInfo.CREATOR);
ComponentName testName=(data.readInt() != 0) ? new ComponentName(data) : null;
String profileName=data.readString();
Bundle testArgs=data.readBundle();
IBinder binder=data.readStrongBinder();
IInstrumentationWatcher testWatcher=IInstrumentationWatcher.Stub.asInterface(binder);
int testMode=data.readInt();
boolean restrictedBackupMode=(data.readInt() != 0);
Configuration config=Configuration.CREATOR.createFromParcel(data);
HashMap<String,IBinder> services=data.readHashMap(null);
bindApplication(packageName,info,providers,testName,profileName,testArgs,testWatcher,testMode,restrictedBackupMode,config,services);
return true;
}
case SCHEDULE_EXIT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
scheduleExit();
return true;
}
case REQUEST_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
requestThumbnail(b);
return true;
}
case SCHEDULE_CONFIGURATION_CHANGED_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
scheduleConfigurationChanged(config);
return true;
}
case UPDATE_TIME_ZONE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
updateTimeZone();
return true;
}
case PROCESS_IN_BACKGROUND_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
processInBackground();
return true;
}
case DUMP_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
ParcelFileDescriptor fd=data.readFileDescriptor();
final IBinder service=data.readStrongBinder();
final String[] args=data.readStringArray();
if (fd != null) {
dumpService(fd.getFileDescriptor(),service,args);
try {
fd.close();
}
 catch (IOException e) {
}
}
return true;
}
case SCHEDULE_REGISTERED_RECEIVER_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IIntentReceiver receiver=IIntentReceiver.Stub.asInterface(data.readStrongBinder());
Intent intent=Intent.CREATOR.createFromParcel(data);
int resultCode=data.readInt();
String dataStr=data.readString();
Bundle extras=data.readBundle();
boolean ordered=data.readInt() != 0;
scheduleRegisteredReceiver(receiver,intent,resultCode,dataStr,extras,ordered);
return true;
}
case SCHEDULE_LOW_MEMORY_TRANSACTION:
{
scheduleLowMemory();
return true;
}
case SCHEDULE_ACTIVITY_CONFIGURATION_CHANGED_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
scheduleActivityConfigurationChanged(b);
return true;
}
case REQUEST_PSS_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
requestPss();
return true;
}
case PROFILER_CONTROL_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
boolean start=data.readInt() != 0;
String path=data.readString();
ParcelFileDescriptor fd=data.readInt() != 0 ? data.readFileDescriptor() : null;
profilerControl(start,path,fd);
return true;
}
case SET_SCHEDULING_GROUP_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
int group=data.readInt();
setSchedulingGroup(group);
return true;
}
case SCHEDULE_CREATE_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
ApplicationInfo appInfo=ApplicationInfo.CREATOR.createFromParcel(data);
int backupMode=data.readInt();
scheduleCreateBackupAgent(appInfo,backupMode);
return true;
}
case SCHEDULE_DESTROY_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
ApplicationInfo appInfo=ApplicationInfo.CREATOR.createFromParcel(data);
scheduleDestroyBackupAgent(appInfo);
return true;
}
}
return super.onTransact(code,data,reply,flags);
}"
24073,"public void profilerControl(boolean start,String path) throws RemoteException {
  Parcel data=Parcel.obtain();
  data.writeInterfaceToken(IApplicationThread.descriptor);
  data.writeInt(start ? 1 : 0);
  data.writeString(path);
  mRemote.transact(PROFILER_CONTROL_TRANSACTION,data,null,IBinder.FLAG_ONEWAY);
  data.recycle();
}","public void profilerControl(boolean start,String path,ParcelFileDescriptor fd) throws RemoteException {
  Parcel data=Parcel.obtain();
  data.writeInterfaceToken(IApplicationThread.descriptor);
  data.writeInt(start ? 1 : 0);
  data.writeString(path);
  if (fd != null) {
    data.writeInt(1);
    fd.writeToParcel(data,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
  }
 else {
    data.writeInt(0);
  }
  mRemote.transact(PROFILER_CONTROL_TRANSACTION,data,null,IBinder.FLAG_ONEWAY);
  data.recycle();
}"
24074,"public boolean profileControl(String process,boolean start,String path) throws RemoteException ;","public boolean profileControl(String process,boolean start,String path,ParcelFileDescriptor fd) throws RemoteException ;"
24075,"void profilerControl(boolean start,String path) throws RemoteException ;","void profilerControl(boolean start,String path,ParcelFileDescriptor fd) throws RemoteException ;"
24076,"/** 
 * Start method tracing, specifying the trace log file name and the buffer size. The trace files will be put under ""/sdcard"" unless an absolute path is given. See <a href=""  {@docRoot}guide/developing/tools/traceview.html"">Traceview: A Graphical Log Viewer</a> for information about reading trace files. <p> When method tracing is enabled, the VM will run more slowly than usual, so the timings from the trace files should only be considered in relative terms (e.g. was run #1 faster than run #2).  The times for native methods will not change, so don't try to use this to compare the performance of interpreted and native implementations of the same method.  As an alternative, consider using ""native"" tracing in the emulator via   {@link #startNativeTracing()}. </p>
 * @param traceName    Name for the trace log file to create.If no name argument is given, this value defaults to ""/sdcard/dmtrace.trace"". If the files already exist, they will be truncated. If the trace file given does not end in "".trace"", it will be appended for you.
 * @param bufferSize    The maximum amount of trace data we gather. If not given, it defaults to 8MB.
 */
public static void startMethodTracing(String traceName,int bufferSize,int flags){
  String pathName=traceName;
  if (pathName.charAt(0) != '/')   pathName=DEFAULT_TRACE_PATH_PREFIX + pathName;
  if (!pathName.endsWith(DEFAULT_TRACE_EXTENSION))   pathName=pathName + DEFAULT_TRACE_EXTENSION;
  VMDebug.startMethodTracing(pathName,bufferSize,flags);
}","/** 
 * Like startMethodTracing(String, int, int), but taking an already-opened FileDescriptor in which the trace is written.  The file name is also supplied simply for logging.  Makes a dup of the file descriptor. Not exposed in the SDK unless we are really comfortable with supporting this and find it would be useful.
 * @hide
 */
public static void startMethodTracing(String traceName,FileDescriptor fd,int bufferSize,int flags){
  VMDebug.startMethodTracing(traceName,fd,bufferSize,flags);
}"
24077,"public boolean profileControl(String process,boolean start,String path) throws RemoteException {
synchronized (this) {
    if (checkCallingPermission(android.Manifest.permission.SET_ACTIVITY_WATCHER) != PackageManager.PERMISSION_GRANTED) {
      throw new SecurityException(""String_Node_Str"" + android.Manifest.permission.SET_ACTIVITY_WATCHER);
    }
    ProcessRecord proc=null;
    try {
      int pid=Integer.parseInt(process);
synchronized (mPidsSelfLocked) {
        proc=mPidsSelfLocked.get(pid);
      }
    }
 catch (    NumberFormatException e) {
    }
    if (proc == null) {
      HashMap<String,SparseArray<ProcessRecord>> all=mProcessNames.getMap();
      SparseArray<ProcessRecord> procs=all.get(process);
      if (procs != null && procs.size() > 0) {
        proc=procs.valueAt(0);
      }
    }
    if (proc == null || proc.thread == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + process);
    }
    boolean isSecure=""String_Node_Str"".equals(SystemProperties.get(SYSTEM_SECURE,""String_Node_Str""));
    if (isSecure) {
      if ((proc.info.flags & ApplicationInfo.FLAG_DEBUGGABLE) == 0) {
        throw new SecurityException(""String_Node_Str"" + proc);
      }
    }
    try {
      proc.thread.profilerControl(start,path);
      return true;
    }
 catch (    RemoteException e) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
}","public boolean profileControl(String process,boolean start,String path,ParcelFileDescriptor fd) throws RemoteException {
  try {
synchronized (this) {
      if (checkCallingPermission(android.Manifest.permission.SET_ACTIVITY_WATCHER) != PackageManager.PERMISSION_GRANTED) {
        throw new SecurityException(""String_Node_Str"" + android.Manifest.permission.SET_ACTIVITY_WATCHER);
      }
      if (start && fd == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      ProcessRecord proc=null;
      try {
        int pid=Integer.parseInt(process);
synchronized (mPidsSelfLocked) {
          proc=mPidsSelfLocked.get(pid);
        }
      }
 catch (      NumberFormatException e) {
      }
      if (proc == null) {
        HashMap<String,SparseArray<ProcessRecord>> all=mProcessNames.getMap();
        SparseArray<ProcessRecord> procs=all.get(process);
        if (procs != null && procs.size() > 0) {
          proc=procs.valueAt(0);
        }
      }
      if (proc == null || proc.thread == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + process);
      }
      boolean isSecure=""String_Node_Str"".equals(SystemProperties.get(SYSTEM_SECURE,""String_Node_Str""));
      if (isSecure) {
        if ((proc.info.flags & ApplicationInfo.FLAG_DEBUGGABLE) == 0) {
          throw new SecurityException(""String_Node_Str"" + proc);
        }
      }
      proc.thread.profilerControl(start,path,fd);
      fd=null;
      return true;
    }
  }
 catch (  RemoteException e) {
    throw new IllegalStateException(""String_Node_Str"");
  }
 finally {
    if (fd != null) {
      try {
        fd.close();
      }
 catch (      IOException e) {
      }
    }
  }
}"
24078,"private void runProfile(){
  String profileFile=null;
  boolean start=false;
  String process=nextArg();
  if (process == null) {
    System.err.println(""String_Node_Str"");
    showUsage();
    return;
  }
  String cmd=nextArg();
  if (""String_Node_Str"".equals(cmd)) {
    start=true;
    profileFile=nextArg();
    if (profileFile == null) {
      System.err.println(""String_Node_Str"");
      showUsage();
      return;
    }
  }
 else   if (!""String_Node_Str"".equals(cmd)) {
    System.err.println(""String_Node_Str"" + cmd + ""String_Node_Str"");
    showUsage();
    return;
  }
  try {
    if (!mAm.profileControl(process,start,profileFile)) {
      System.out.println(""String_Node_Str"" + process);
      return;
    }
  }
 catch (  IllegalArgumentException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    return;
  }
catch (  IllegalStateException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    return;
  }
catch (  RemoteException e) {
    System.out.println(""String_Node_Str"");
    return;
  }
}","private void runProfile(){
  String profileFile=null;
  boolean start=false;
  String process=nextArg();
  if (process == null) {
    System.err.println(""String_Node_Str"");
    showUsage();
    return;
  }
  ParcelFileDescriptor fd=null;
  String cmd=nextArg();
  if (""String_Node_Str"".equals(cmd)) {
    start=true;
    profileFile=nextArg();
    if (profileFile == null) {
      System.err.println(""String_Node_Str"");
      showUsage();
      return;
    }
    try {
      fd=ParcelFileDescriptor.open(new File(profileFile),ParcelFileDescriptor.MODE_CREATE | ParcelFileDescriptor.MODE_TRUNCATE | ParcelFileDescriptor.MODE_READ_WRITE);
    }
 catch (    FileNotFoundException e) {
      System.err.println(""String_Node_Str"" + profileFile);
      return;
    }
  }
 else   if (!""String_Node_Str"".equals(cmd)) {
    System.err.println(""String_Node_Str"" + cmd + ""String_Node_Str"");
    showUsage();
    return;
  }
  try {
    if (!mAm.profileControl(process,start,profileFile,fd)) {
      System.err.println(""String_Node_Str"" + process);
      return;
    }
  }
 catch (  IllegalArgumentException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    return;
  }
catch (  IllegalStateException e) {
    System.out.println(""String_Node_Str"" + e.getMessage());
    return;
  }
catch (  RemoteException e) {
    System.out.println(""String_Node_Str"");
    return;
  }
}"
24079,"public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
      int grantedMode=data.readInt();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      boolean onlyIfNeeded=data.readInt() != 0;
      boolean debug=data.readInt() != 0;
      int result=startActivity(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder callingActivity=data.readStrongBinder();
    Intent intent=Intent.CREATOR.createFromParcel(data);
    boolean result=startNextMatchingActivity(callingActivity,intent);
    reply.writeNoException();
    reply.writeInt(result ? 1 : 0);
    return true;
  }
case FINISH_ACTIVITY_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder token=data.readStrongBinder();
  Intent resultData=null;
  int resultCode=data.readInt();
  if (data.readInt() != 0) {
    resultData=Intent.CREATOR.createFromParcel(data);
  }
  boolean res=finishActivity(token,resultCode,resultData);
  reply.writeNoException();
  reply.writeInt(res ? 1 : 0);
  return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
Intent intent=registerReceiver(app,rec,filter,perm);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,serialized,sticky);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
unbroadcastIntent(app,intent);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case SET_PERSISTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isPersistent=data.readInt() != 0;
if (token != null) {
setPersistent(token,isPersistent);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
if (token != null) {
activityIdle(token);
}
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
activityPaused(token,map);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,thumbnail,description);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
IBinder receiverBinder=data.readStrongBinder();
IThumbnailReceiver receiver=receiverBinder != null ? IThumbnailReceiver.Stub.asInterface(receiverBinder) : null;
List list=getTasks(maxNum,fl,receiver);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=(ActivityManager.RunningTaskInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=(ActivityManager.RunningServiceInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToFront(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case FINISH_OTHER_INSTANCES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName className=ComponentName.readFromParcel(data);
finishOtherInstances(token,className);
reply.writeNoException();
return true;
}
case REPORT_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
reportThumbnail(token,thumbnail,description);
reply.writeNoException();
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
ContentProviderHolder cph=getContentProvider(app,name);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
removeContentProvider(app,name);
reply.writeNoException();
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
ComponentName cn=startService(app,service,resolvedType);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int res=stopService(app,service,resolvedType);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
boolean isForeground=data.readInt() != 0;
setServiceForeground(className,token,isForeground);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
serviceDoneExecuting(token);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
boolean res=startInstrumentation(className,profileFile,fl,arguments,w);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent requestIntent=data.readInt() != 0 ? Intent.CREATOR.createFromParcel(data) : null;
String requestResolvedType=data.readString();
int fl=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntent,requestResolvedType,fl);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int res=checkUriPermission(uri,pid,uid,mode);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
boolean res=clearApplicationUserData(packageName,observer);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
grantUriPermission(app,targetPkg,uri,mode);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
revokeUriPermission(app,uri,mode);
reply.writeNoException();
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GOING_TO_SLEEP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
goingToSleep();
reply.writeNoException();
return true;
}
case WAKING_UP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
wakingUp();
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_WATCHER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityWatcher watcher=IActivityWatcher.Stub.asInterface(data.readStrongBinder());
setActivityWatcher(watcher);
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
noteWakeupAlarm(is);
reply.writeNoException();
return true;
}
case KILL_PIDS_FOR_MEMORY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
boolean res=killPidsForMemory(pids);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REPORT_PSS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int pss=data.readInt();
reportPss(app,pss);
reply.writeNoException();
return true;
}
case START_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
String cls=data.readString();
String action=data.readString();
String indata=data.readString();
startRunning(pkg,cls,action,indata);
reply.writeNoException();
return true;
}
case SYSTEM_READY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
systemReady();
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_ERROR_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int fl=data.readInt();
String tag=data.readString();
String shortMsg=data.readString();
String longMsg=data.readString();
byte[] crashData=data.createByteArray();
int res=handleApplicationError(app,fl,tag,shortMsg,longMsg,crashData);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case RESTART_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
restartPackage(packageName);
reply.writeNoException();
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
boolean start=data.readInt() != 0;
String path=data.readString();
boolean res=profileControl(process,start,path);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
case START_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
int backupRestoreMode=data.readInt();
boolean success=bindBackupAgent(info,backupRestoreMode);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case BACKUP_AGENT_CREATED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IBinder agent=data.readStrongBinder();
backupAgentCreated(packageName,agent);
reply.writeNoException();
return true;
}
case UNBIND_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
unbindBackupAgent(info);
reply.writeNoException();
return true;
}
}
return super.onTransact(code,data,reply,flags);
}","public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
      int grantedMode=data.readInt();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      boolean onlyIfNeeded=data.readInt() != 0;
      boolean debug=data.readInt() != 0;
      int result=startActivity(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder callingActivity=data.readStrongBinder();
    Intent intent=Intent.CREATOR.createFromParcel(data);
    boolean result=startNextMatchingActivity(callingActivity,intent);
    reply.writeNoException();
    reply.writeInt(result ? 1 : 0);
    return true;
  }
case FINISH_ACTIVITY_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder token=data.readStrongBinder();
  Intent resultData=null;
  int resultCode=data.readInt();
  if (data.readInt() != 0) {
    resultData=Intent.CREATOR.createFromParcel(data);
  }
  boolean res=finishActivity(token,resultCode,resultData);
  reply.writeNoException();
  reply.writeInt(res ? 1 : 0);
  return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
Intent intent=registerReceiver(app,rec,filter,perm);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,serialized,sticky);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
unbroadcastIntent(app,intent);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case SET_PERSISTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isPersistent=data.readInt() != 0;
if (token != null) {
setPersistent(token,isPersistent);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
if (token != null) {
activityIdle(token);
}
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
activityPaused(token,map);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,thumbnail,description);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
IBinder receiverBinder=data.readStrongBinder();
IThumbnailReceiver receiver=receiverBinder != null ? IThumbnailReceiver.Stub.asInterface(receiverBinder) : null;
List list=getTasks(maxNum,fl,receiver);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=(ActivityManager.RunningTaskInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=(ActivityManager.RunningServiceInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToFront(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case FINISH_OTHER_INSTANCES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName className=ComponentName.readFromParcel(data);
finishOtherInstances(token,className);
reply.writeNoException();
return true;
}
case REPORT_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
reportThumbnail(token,thumbnail,description);
reply.writeNoException();
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
ContentProviderHolder cph=getContentProvider(app,name);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
removeContentProvider(app,name);
reply.writeNoException();
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
ComponentName cn=startService(app,service,resolvedType);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int res=stopService(app,service,resolvedType);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
boolean isForeground=data.readInt() != 0;
setServiceForeground(className,token,isForeground);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
serviceDoneExecuting(token);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
boolean res=startInstrumentation(className,profileFile,fl,arguments,w);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent requestIntent=data.readInt() != 0 ? Intent.CREATOR.createFromParcel(data) : null;
String requestResolvedType=data.readString();
int fl=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntent,requestResolvedType,fl);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int res=checkUriPermission(uri,pid,uid,mode);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
boolean res=clearApplicationUserData(packageName,observer);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
grantUriPermission(app,targetPkg,uri,mode);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
revokeUriPermission(app,uri,mode);
reply.writeNoException();
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GOING_TO_SLEEP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
goingToSleep();
reply.writeNoException();
return true;
}
case WAKING_UP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
wakingUp();
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_WATCHER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityWatcher watcher=IActivityWatcher.Stub.asInterface(data.readStrongBinder());
setActivityWatcher(watcher);
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
noteWakeupAlarm(is);
reply.writeNoException();
return true;
}
case KILL_PIDS_FOR_MEMORY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
boolean res=killPidsForMemory(pids);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REPORT_PSS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int pss=data.readInt();
reportPss(app,pss);
reply.writeNoException();
return true;
}
case START_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
String cls=data.readString();
String action=data.readString();
String indata=data.readString();
startRunning(pkg,cls,action,indata);
reply.writeNoException();
return true;
}
case SYSTEM_READY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
systemReady();
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_ERROR_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int fl=data.readInt();
String tag=data.readString();
String shortMsg=data.readString();
String longMsg=data.readString();
byte[] crashData=data.createByteArray();
int res=handleApplicationError(app,fl,tag,shortMsg,longMsg,crashData);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case RESTART_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
restartPackage(packageName);
reply.writeNoException();
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
boolean start=data.readInt() != 0;
String path=data.readString();
ParcelFileDescriptor fd=data.readInt() != 0 ? data.readFileDescriptor() : null;
boolean res=profileControl(process,start,path,fd);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
case START_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
int backupRestoreMode=data.readInt();
boolean success=bindBackupAgent(info,backupRestoreMode);
reply.writeNoException();
reply.writeInt(success ? 1 : 0);
return true;
}
case BACKUP_AGENT_CREATED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IBinder agent=data.readStrongBinder();
backupAgentCreated(packageName,agent);
reply.writeNoException();
return true;
}
case UNBIND_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
unbindBackupAgent(info);
reply.writeNoException();
return true;
}
}
return super.onTransact(code,data,reply,flags);
}"
24080,"public boolean profileControl(String process,boolean start,String path) throws RemoteException {
  Parcel data=Parcel.obtain();
  Parcel reply=Parcel.obtain();
  data.writeInterfaceToken(IActivityManager.descriptor);
  data.writeString(process);
  data.writeInt(start ? 1 : 0);
  data.writeString(path);
  mRemote.transact(PROFILE_CONTROL_TRANSACTION,data,reply,0);
  reply.readException();
  boolean res=reply.readInt() != 0;
  reply.recycle();
  data.recycle();
  return res;
}","public boolean profileControl(String process,boolean start,String path,ParcelFileDescriptor fd) throws RemoteException {
  Parcel data=Parcel.obtain();
  Parcel reply=Parcel.obtain();
  data.writeInterfaceToken(IActivityManager.descriptor);
  data.writeString(process);
  data.writeInt(start ? 1 : 0);
  data.writeString(path);
  if (fd != null) {
    data.writeInt(1);
    fd.writeToParcel(data,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
  }
 else {
    data.writeInt(0);
  }
  mRemote.transact(PROFILE_CONTROL_TRANSACTION,data,reply,0);
  reply.readException();
  boolean res=reply.readInt() != 0;
  reply.recycle();
  data.recycle();
  return res;
}"
24081,"final void handleProfilerControl(boolean start,String path){
  if (start) {
    File file=new File(path);
    file.getParentFile().mkdirs();
    try {
      Debug.startMethodTracing(file.toString(),8 * 1024 * 1024);
    }
 catch (    RuntimeException e) {
      Log.w(TAG,""String_Node_Str"" + path + ""String_Node_Str"");
    }
  }
 else {
    Debug.stopMethodTracing();
  }
}","final void handleProfilerControl(boolean start,ProfilerControlData pcd){
  if (start) {
    try {
      Debug.startMethodTracing(pcd.path,pcd.fd.getFileDescriptor(),8 * 1024 * 1024,0);
    }
 catch (    RuntimeException e) {
      Log.w(TAG,""String_Node_Str"" + pcd.path + ""String_Node_Str"");
    }
 finally {
      try {
        pcd.fd.close();
      }
 catch (      IOException e) {
        Log.w(TAG,""String_Node_Str"",e);
      }
    }
  }
 else {
    Debug.stopMethodTracing();
  }
}"
24082,"public void profilerControl(boolean start,String path){
  queueOrSendMessage(H.PROFILER_CONTROL,path,start ? 1 : 0);
}","public void profilerControl(boolean start,String path,ParcelFileDescriptor fd){
  ProfilerControlData pcd=new ProfilerControlData();
  pcd.path=path;
  pcd.fd=fd;
  queueOrSendMessage(H.PROFILER_CONTROL,pcd,start ? 1 : 0);
}"
24083,"public void handleMessage(Message msg){
switch (msg.what) {
case LAUNCH_ACTIVITY:
{
      ActivityRecord r=(ActivityRecord)msg.obj;
      r.packageInfo=getPackageInfoNoCheck(r.activityInfo.applicationInfo);
      handleLaunchActivity(r,null);
    }
  break;
case RELAUNCH_ACTIVITY:
{
  ActivityRecord r=(ActivityRecord)msg.obj;
  handleRelaunchActivity(r,msg.arg1);
}
break;
case PAUSE_ACTIVITY:
handlePauseActivity((IBinder)msg.obj,false,msg.arg1 != 0,msg.arg2);
break;
case PAUSE_ACTIVITY_FINISHING:
handlePauseActivity((IBinder)msg.obj,true,msg.arg1 != 0,msg.arg2);
break;
case STOP_ACTIVITY_SHOW:
handleStopActivity((IBinder)msg.obj,true,msg.arg2);
break;
case STOP_ACTIVITY_HIDE:
handleStopActivity((IBinder)msg.obj,false,msg.arg2);
break;
case SHOW_WINDOW:
handleWindowVisibility((IBinder)msg.obj,true);
break;
case HIDE_WINDOW:
handleWindowVisibility((IBinder)msg.obj,false);
break;
case RESUME_ACTIVITY:
handleResumeActivity((IBinder)msg.obj,true,msg.arg1 != 0);
break;
case SEND_RESULT:
handleSendResult((ResultData)msg.obj);
break;
case DESTROY_ACTIVITY:
handleDestroyActivity((IBinder)msg.obj,msg.arg1 != 0,msg.arg2,false);
break;
case BIND_APPLICATION:
AppBindData data=(AppBindData)msg.obj;
handleBindApplication(data);
break;
case EXIT_APPLICATION:
if (mInitialApplication != null) {
mInitialApplication.onTerminate();
}
Looper.myLooper().quit();
break;
case NEW_INTENT:
handleNewIntent((NewIntentData)msg.obj);
break;
case RECEIVER:
handleReceiver((ReceiverData)msg.obj);
break;
case CREATE_SERVICE:
handleCreateService((CreateServiceData)msg.obj);
break;
case BIND_SERVICE:
handleBindService((BindServiceData)msg.obj);
break;
case UNBIND_SERVICE:
handleUnbindService((BindServiceData)msg.obj);
break;
case SERVICE_ARGS:
handleServiceArgs((ServiceArgsData)msg.obj);
break;
case STOP_SERVICE:
handleStopService((IBinder)msg.obj);
break;
case REQUEST_THUMBNAIL:
handleRequestThumbnail((IBinder)msg.obj);
break;
case CONFIGURATION_CHANGED:
handleConfigurationChanged((Configuration)msg.obj);
break;
case CLEAN_UP_CONTEXT:
ContextCleanupInfo cci=(ContextCleanupInfo)msg.obj;
cci.context.performFinalCleanup(cci.who,cci.what);
break;
case GC_WHEN_IDLE:
scheduleGcIdler();
break;
case DUMP_SERVICE:
handleDumpService((DumpServiceInfo)msg.obj);
break;
case LOW_MEMORY:
handleLowMemory();
break;
case ACTIVITY_CONFIGURATION_CHANGED:
handleActivityConfigurationChanged((IBinder)msg.obj);
break;
case PROFILER_CONTROL:
handleProfilerControl(msg.arg1 != 0,(String)msg.obj);
break;
case CREATE_BACKUP_AGENT:
handleCreateBackupAgent((CreateBackupAgentData)msg.obj);
break;
case DESTROY_BACKUP_AGENT:
handleDestroyBackupAgent((CreateBackupAgentData)msg.obj);
break;
}
}","public void handleMessage(Message msg){
switch (msg.what) {
case LAUNCH_ACTIVITY:
{
      ActivityRecord r=(ActivityRecord)msg.obj;
      r.packageInfo=getPackageInfoNoCheck(r.activityInfo.applicationInfo);
      handleLaunchActivity(r,null);
    }
  break;
case RELAUNCH_ACTIVITY:
{
  ActivityRecord r=(ActivityRecord)msg.obj;
  handleRelaunchActivity(r,msg.arg1);
}
break;
case PAUSE_ACTIVITY:
handlePauseActivity((IBinder)msg.obj,false,msg.arg1 != 0,msg.arg2);
break;
case PAUSE_ACTIVITY_FINISHING:
handlePauseActivity((IBinder)msg.obj,true,msg.arg1 != 0,msg.arg2);
break;
case STOP_ACTIVITY_SHOW:
handleStopActivity((IBinder)msg.obj,true,msg.arg2);
break;
case STOP_ACTIVITY_HIDE:
handleStopActivity((IBinder)msg.obj,false,msg.arg2);
break;
case SHOW_WINDOW:
handleWindowVisibility((IBinder)msg.obj,true);
break;
case HIDE_WINDOW:
handleWindowVisibility((IBinder)msg.obj,false);
break;
case RESUME_ACTIVITY:
handleResumeActivity((IBinder)msg.obj,true,msg.arg1 != 0);
break;
case SEND_RESULT:
handleSendResult((ResultData)msg.obj);
break;
case DESTROY_ACTIVITY:
handleDestroyActivity((IBinder)msg.obj,msg.arg1 != 0,msg.arg2,false);
break;
case BIND_APPLICATION:
AppBindData data=(AppBindData)msg.obj;
handleBindApplication(data);
break;
case EXIT_APPLICATION:
if (mInitialApplication != null) {
mInitialApplication.onTerminate();
}
Looper.myLooper().quit();
break;
case NEW_INTENT:
handleNewIntent((NewIntentData)msg.obj);
break;
case RECEIVER:
handleReceiver((ReceiverData)msg.obj);
break;
case CREATE_SERVICE:
handleCreateService((CreateServiceData)msg.obj);
break;
case BIND_SERVICE:
handleBindService((BindServiceData)msg.obj);
break;
case UNBIND_SERVICE:
handleUnbindService((BindServiceData)msg.obj);
break;
case SERVICE_ARGS:
handleServiceArgs((ServiceArgsData)msg.obj);
break;
case STOP_SERVICE:
handleStopService((IBinder)msg.obj);
break;
case REQUEST_THUMBNAIL:
handleRequestThumbnail((IBinder)msg.obj);
break;
case CONFIGURATION_CHANGED:
handleConfigurationChanged((Configuration)msg.obj);
break;
case CLEAN_UP_CONTEXT:
ContextCleanupInfo cci=(ContextCleanupInfo)msg.obj;
cci.context.performFinalCleanup(cci.who,cci.what);
break;
case GC_WHEN_IDLE:
scheduleGcIdler();
break;
case DUMP_SERVICE:
handleDumpService((DumpServiceInfo)msg.obj);
break;
case LOW_MEMORY:
handleLowMemory();
break;
case ACTIVITY_CONFIGURATION_CHANGED:
handleActivityConfigurationChanged((IBinder)msg.obj);
break;
case PROFILER_CONTROL:
handleProfilerControl(msg.arg1 != 0,(ProfilerControlData)msg.obj);
break;
case CREATE_BACKUP_AGENT:
handleCreateBackupAgent((CreateBackupAgentData)msg.obj);
break;
case DESTROY_BACKUP_AGENT:
handleDestroyBackupAgent((CreateBackupAgentData)msg.obj);
break;
}
}"
24084,"@Override public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case SCHEDULE_PAUSE_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IApplicationThread.descriptor);
      IBinder b=data.readStrongBinder();
      boolean finished=data.readInt() != 0;
      boolean userLeaving=data.readInt() != 0;
      int configChanges=data.readInt();
      schedulePauseActivity(b,finished,userLeaving,configChanges);
      return true;
    }
case SCHEDULE_STOP_ACTIVITY_TRANSACTION:
{
    data.enforceInterface(IApplicationThread.descriptor);
    IBinder b=data.readStrongBinder();
    boolean show=data.readInt() != 0;
    int configChanges=data.readInt();
    scheduleStopActivity(b,show,configChanges);
    return true;
  }
case SCHEDULE_WINDOW_VISIBILITY_TRANSACTION:
{
  data.enforceInterface(IApplicationThread.descriptor);
  IBinder b=data.readStrongBinder();
  boolean show=data.readInt() != 0;
  scheduleWindowVisibility(b,show);
  return true;
}
case SCHEDULE_RESUME_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
boolean isForward=data.readInt() != 0;
scheduleResumeActivity(b,isForward);
return true;
}
case SCHEDULE_SEND_RESULT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
List<ResultInfo> ri=data.createTypedArrayList(ResultInfo.CREATOR);
scheduleSendResult(b,ri);
return true;
}
case SCHEDULE_LAUNCH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder b=data.readStrongBinder();
ActivityInfo info=ActivityInfo.CREATOR.createFromParcel(data);
Bundle state=data.readBundle();
List<ResultInfo> ri=data.createTypedArrayList(ResultInfo.CREATOR);
List<Intent> pi=data.createTypedArrayList(Intent.CREATOR);
boolean notResumed=data.readInt() != 0;
boolean isForward=data.readInt() != 0;
scheduleLaunchActivity(intent,b,info,state,ri,pi,notResumed,isForward);
return true;
}
case SCHEDULE_RELAUNCH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
List<ResultInfo> ri=data.createTypedArrayList(ResultInfo.CREATOR);
List<Intent> pi=data.createTypedArrayList(Intent.CREATOR);
int configChanges=data.readInt();
boolean notResumed=data.readInt() != 0;
scheduleRelaunchActivity(b,ri,pi,configChanges,notResumed);
return true;
}
case SCHEDULE_NEW_INTENT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
List<Intent> pi=data.createTypedArrayList(Intent.CREATOR);
IBinder b=data.readStrongBinder();
scheduleNewIntent(pi,b);
return true;
}
case SCHEDULE_FINISH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
boolean finishing=data.readInt() != 0;
int configChanges=data.readInt();
scheduleDestroyActivity(b,finishing,configChanges);
return true;
}
case SCHEDULE_RECEIVER_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
Intent intent=Intent.CREATOR.createFromParcel(data);
ActivityInfo info=ActivityInfo.CREATOR.createFromParcel(data);
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean sync=data.readInt() != 0;
scheduleReceiver(intent,info,resultCode,resultData,resultExtras,sync);
return true;
}
case SCHEDULE_CREATE_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
ServiceInfo info=ServiceInfo.CREATOR.createFromParcel(data);
scheduleCreateService(token,info);
return true;
}
case SCHEDULE_BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean rebind=data.readInt() != 0;
scheduleBindService(token,intent,rebind);
return true;
}
case SCHEDULE_UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
scheduleUnbindService(token,intent);
return true;
}
case SCHEDULE_SERVICE_ARGS_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
Intent args=Intent.CREATOR.createFromParcel(data);
scheduleServiceArgs(token,startId,args);
return true;
}
case SCHEDULE_STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
scheduleStopService(token);
return true;
}
case BIND_APPLICATION_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
String packageName=data.readString();
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
List<ProviderInfo> providers=data.createTypedArrayList(ProviderInfo.CREATOR);
ComponentName testName=(data.readInt() != 0) ? new ComponentName(data) : null;
String profileName=data.readString();
Bundle testArgs=data.readBundle();
IBinder binder=data.readStrongBinder();
IInstrumentationWatcher testWatcher=IInstrumentationWatcher.Stub.asInterface(binder);
int testMode=data.readInt();
boolean restrictedBackupMode=(data.readInt() != 0);
Configuration config=Configuration.CREATOR.createFromParcel(data);
HashMap<String,IBinder> services=data.readHashMap(null);
bindApplication(packageName,info,providers,testName,profileName,testArgs,testWatcher,testMode,restrictedBackupMode,config,services);
return true;
}
case SCHEDULE_EXIT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
scheduleExit();
return true;
}
case REQUEST_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
requestThumbnail(b);
return true;
}
case SCHEDULE_CONFIGURATION_CHANGED_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
scheduleConfigurationChanged(config);
return true;
}
case UPDATE_TIME_ZONE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
updateTimeZone();
return true;
}
case PROCESS_IN_BACKGROUND_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
processInBackground();
return true;
}
case DUMP_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
ParcelFileDescriptor fd=data.readFileDescriptor();
final IBinder service=data.readStrongBinder();
final String[] args=data.readStringArray();
if (fd != null) {
dumpService(fd.getFileDescriptor(),service,args);
try {
fd.close();
}
 catch (IOException e) {
}
}
return true;
}
case SCHEDULE_REGISTERED_RECEIVER_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IIntentReceiver receiver=IIntentReceiver.Stub.asInterface(data.readStrongBinder());
Intent intent=Intent.CREATOR.createFromParcel(data);
int resultCode=data.readInt();
String dataStr=data.readString();
Bundle extras=data.readBundle();
boolean ordered=data.readInt() != 0;
scheduleRegisteredReceiver(receiver,intent,resultCode,dataStr,extras,ordered);
return true;
}
case SCHEDULE_LOW_MEMORY_TRANSACTION:
{
scheduleLowMemory();
return true;
}
case SCHEDULE_ACTIVITY_CONFIGURATION_CHANGED_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
scheduleActivityConfigurationChanged(b);
return true;
}
case REQUEST_PSS_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
requestPss();
return true;
}
case PROFILER_CONTROL_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
boolean start=data.readInt() != 0;
String path=data.readString();
profilerControl(start,path);
return true;
}
case SET_SCHEDULING_GROUP_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
int group=data.readInt();
setSchedulingGroup(group);
return true;
}
case SCHEDULE_CREATE_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
ApplicationInfo appInfo=ApplicationInfo.CREATOR.createFromParcel(data);
int backupMode=data.readInt();
scheduleCreateBackupAgent(appInfo,backupMode);
return true;
}
case SCHEDULE_DESTROY_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
ApplicationInfo appInfo=ApplicationInfo.CREATOR.createFromParcel(data);
scheduleDestroyBackupAgent(appInfo);
return true;
}
}
return super.onTransact(code,data,reply,flags);
}","@Override public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case SCHEDULE_PAUSE_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IApplicationThread.descriptor);
      IBinder b=data.readStrongBinder();
      boolean finished=data.readInt() != 0;
      boolean userLeaving=data.readInt() != 0;
      int configChanges=data.readInt();
      schedulePauseActivity(b,finished,userLeaving,configChanges);
      return true;
    }
case SCHEDULE_STOP_ACTIVITY_TRANSACTION:
{
    data.enforceInterface(IApplicationThread.descriptor);
    IBinder b=data.readStrongBinder();
    boolean show=data.readInt() != 0;
    int configChanges=data.readInt();
    scheduleStopActivity(b,show,configChanges);
    return true;
  }
case SCHEDULE_WINDOW_VISIBILITY_TRANSACTION:
{
  data.enforceInterface(IApplicationThread.descriptor);
  IBinder b=data.readStrongBinder();
  boolean show=data.readInt() != 0;
  scheduleWindowVisibility(b,show);
  return true;
}
case SCHEDULE_RESUME_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
boolean isForward=data.readInt() != 0;
scheduleResumeActivity(b,isForward);
return true;
}
case SCHEDULE_SEND_RESULT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
List<ResultInfo> ri=data.createTypedArrayList(ResultInfo.CREATOR);
scheduleSendResult(b,ri);
return true;
}
case SCHEDULE_LAUNCH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder b=data.readStrongBinder();
ActivityInfo info=ActivityInfo.CREATOR.createFromParcel(data);
Bundle state=data.readBundle();
List<ResultInfo> ri=data.createTypedArrayList(ResultInfo.CREATOR);
List<Intent> pi=data.createTypedArrayList(Intent.CREATOR);
boolean notResumed=data.readInt() != 0;
boolean isForward=data.readInt() != 0;
scheduleLaunchActivity(intent,b,info,state,ri,pi,notResumed,isForward);
return true;
}
case SCHEDULE_RELAUNCH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
List<ResultInfo> ri=data.createTypedArrayList(ResultInfo.CREATOR);
List<Intent> pi=data.createTypedArrayList(Intent.CREATOR);
int configChanges=data.readInt();
boolean notResumed=data.readInt() != 0;
scheduleRelaunchActivity(b,ri,pi,configChanges,notResumed);
return true;
}
case SCHEDULE_NEW_INTENT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
List<Intent> pi=data.createTypedArrayList(Intent.CREATOR);
IBinder b=data.readStrongBinder();
scheduleNewIntent(pi,b);
return true;
}
case SCHEDULE_FINISH_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
boolean finishing=data.readInt() != 0;
int configChanges=data.readInt();
scheduleDestroyActivity(b,finishing,configChanges);
return true;
}
case SCHEDULE_RECEIVER_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
Intent intent=Intent.CREATOR.createFromParcel(data);
ActivityInfo info=ActivityInfo.CREATOR.createFromParcel(data);
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean sync=data.readInt() != 0;
scheduleReceiver(intent,info,resultCode,resultData,resultExtras,sync);
return true;
}
case SCHEDULE_CREATE_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
ServiceInfo info=ServiceInfo.CREATOR.createFromParcel(data);
scheduleCreateService(token,info);
return true;
}
case SCHEDULE_BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean rebind=data.readInt() != 0;
scheduleBindService(token,intent,rebind);
return true;
}
case SCHEDULE_UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
scheduleUnbindService(token,intent);
return true;
}
case SCHEDULE_SERVICE_ARGS_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
Intent args=Intent.CREATOR.createFromParcel(data);
scheduleServiceArgs(token,startId,args);
return true;
}
case SCHEDULE_STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder token=data.readStrongBinder();
scheduleStopService(token);
return true;
}
case BIND_APPLICATION_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
String packageName=data.readString();
ApplicationInfo info=ApplicationInfo.CREATOR.createFromParcel(data);
List<ProviderInfo> providers=data.createTypedArrayList(ProviderInfo.CREATOR);
ComponentName testName=(data.readInt() != 0) ? new ComponentName(data) : null;
String profileName=data.readString();
Bundle testArgs=data.readBundle();
IBinder binder=data.readStrongBinder();
IInstrumentationWatcher testWatcher=IInstrumentationWatcher.Stub.asInterface(binder);
int testMode=data.readInt();
boolean restrictedBackupMode=(data.readInt() != 0);
Configuration config=Configuration.CREATOR.createFromParcel(data);
HashMap<String,IBinder> services=data.readHashMap(null);
bindApplication(packageName,info,providers,testName,profileName,testArgs,testWatcher,testMode,restrictedBackupMode,config,services);
return true;
}
case SCHEDULE_EXIT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
scheduleExit();
return true;
}
case REQUEST_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
requestThumbnail(b);
return true;
}
case SCHEDULE_CONFIGURATION_CHANGED_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
scheduleConfigurationChanged(config);
return true;
}
case UPDATE_TIME_ZONE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
updateTimeZone();
return true;
}
case PROCESS_IN_BACKGROUND_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
processInBackground();
return true;
}
case DUMP_SERVICE_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
ParcelFileDescriptor fd=data.readFileDescriptor();
final IBinder service=data.readStrongBinder();
final String[] args=data.readStringArray();
if (fd != null) {
dumpService(fd.getFileDescriptor(),service,args);
try {
fd.close();
}
 catch (IOException e) {
}
}
return true;
}
case SCHEDULE_REGISTERED_RECEIVER_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IIntentReceiver receiver=IIntentReceiver.Stub.asInterface(data.readStrongBinder());
Intent intent=Intent.CREATOR.createFromParcel(data);
int resultCode=data.readInt();
String dataStr=data.readString();
Bundle extras=data.readBundle();
boolean ordered=data.readInt() != 0;
scheduleRegisteredReceiver(receiver,intent,resultCode,dataStr,extras,ordered);
return true;
}
case SCHEDULE_LOW_MEMORY_TRANSACTION:
{
scheduleLowMemory();
return true;
}
case SCHEDULE_ACTIVITY_CONFIGURATION_CHANGED_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
IBinder b=data.readStrongBinder();
scheduleActivityConfigurationChanged(b);
return true;
}
case REQUEST_PSS_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
requestPss();
return true;
}
case PROFILER_CONTROL_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
boolean start=data.readInt() != 0;
String path=data.readString();
ParcelFileDescriptor fd=data.readInt() != 0 ? data.readFileDescriptor() : null;
profilerControl(start,path,fd);
return true;
}
case SET_SCHEDULING_GROUP_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
int group=data.readInt();
setSchedulingGroup(group);
return true;
}
case SCHEDULE_CREATE_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
ApplicationInfo appInfo=ApplicationInfo.CREATOR.createFromParcel(data);
int backupMode=data.readInt();
scheduleCreateBackupAgent(appInfo,backupMode);
return true;
}
case SCHEDULE_DESTROY_BACKUP_AGENT_TRANSACTION:
{
data.enforceInterface(IApplicationThread.descriptor);
ApplicationInfo appInfo=ApplicationInfo.CREATOR.createFromParcel(data);
scheduleDestroyBackupAgent(appInfo);
return true;
}
}
return super.onTransact(code,data,reply,flags);
}"
24085,"public void profilerControl(boolean start,String path) throws RemoteException {
  Parcel data=Parcel.obtain();
  data.writeInterfaceToken(IApplicationThread.descriptor);
  data.writeInt(start ? 1 : 0);
  data.writeString(path);
  mRemote.transact(PROFILER_CONTROL_TRANSACTION,data,null,IBinder.FLAG_ONEWAY);
  data.recycle();
}","public void profilerControl(boolean start,String path,ParcelFileDescriptor fd) throws RemoteException {
  Parcel data=Parcel.obtain();
  data.writeInterfaceToken(IApplicationThread.descriptor);
  data.writeInt(start ? 1 : 0);
  data.writeString(path);
  if (fd != null) {
    data.writeInt(1);
    fd.writeToParcel(data,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
  }
 else {
    data.writeInt(0);
  }
  mRemote.transact(PROFILER_CONTROL_TRANSACTION,data,null,IBinder.FLAG_ONEWAY);
  data.recycle();
}"
24086,"public boolean profileControl(String process,boolean start,String path) throws RemoteException ;","public boolean profileControl(String process,boolean start,String path,ParcelFileDescriptor fd) throws RemoteException ;"
24087,"void profilerControl(boolean start,String path) throws RemoteException ;","void profilerControl(boolean start,String path,ParcelFileDescriptor fd) throws RemoteException ;"
24088,"/** 
 * Start method tracing, specifying the trace log file name and the buffer size. The trace files will be put under ""/sdcard"" unless an absolute path is given. See <a href=""  {@docRoot}guide/developing/tools/traceview.html"">Traceview: A Graphical Log Viewer</a> for information about reading trace files. <p> When method tracing is enabled, the VM will run more slowly than usual, so the timings from the trace files should only be considered in relative terms (e.g. was run #1 faster than run #2).  The times for native methods will not change, so don't try to use this to compare the performance of interpreted and native implementations of the same method.  As an alternative, consider using ""native"" tracing in the emulator via   {@link #startNativeTracing()}. </p>
 * @param traceName    Name for the trace log file to create.If no name argument is given, this value defaults to ""/sdcard/dmtrace.trace"". If the files already exist, they will be truncated. If the trace file given does not end in "".trace"", it will be appended for you.
 * @param bufferSize    The maximum amount of trace data we gather. If not given, it defaults to 8MB.
 */
public static void startMethodTracing(String traceName,int bufferSize,int flags){
  String pathName=traceName;
  if (pathName.charAt(0) != '/')   pathName=DEFAULT_TRACE_PATH_PREFIX + pathName;
  if (!pathName.endsWith(DEFAULT_TRACE_EXTENSION))   pathName=pathName + DEFAULT_TRACE_EXTENSION;
  VMDebug.startMethodTracing(pathName,bufferSize,flags);
}","/** 
 * Like startMethodTracing(String, int, int), but taking an already-opened FileDescriptor in which the trace is written.  The file name is also supplied simply for logging.  Makes a dup of the file descriptor. Not exposed in the SDK unless we are really comfortable with supporting this and find it would be useful.
 * @hide
 */
public static void startMethodTracing(String traceName,FileDescriptor fd,int bufferSize,int flags){
  VMDebug.startMethodTracing(traceName,fd,bufferSize,flags);
}"
24089,"public boolean profileControl(String process,boolean start,String path) throws RemoteException {
synchronized (this) {
    if (checkCallingPermission(android.Manifest.permission.SET_ACTIVITY_WATCHER) != PackageManager.PERMISSION_GRANTED) {
      throw new SecurityException(""String_Node_Str"" + android.Manifest.permission.SET_ACTIVITY_WATCHER);
    }
    ProcessRecord proc=null;
    try {
      int pid=Integer.parseInt(process);
synchronized (mPidsSelfLocked) {
        proc=mPidsSelfLocked.get(pid);
      }
    }
 catch (    NumberFormatException e) {
    }
    if (proc == null) {
      HashMap<String,SparseArray<ProcessRecord>> all=mProcessNames.getMap();
      SparseArray<ProcessRecord> procs=all.get(process);
      if (procs != null && procs.size() > 0) {
        proc=procs.valueAt(0);
      }
    }
    if (proc == null || proc.thread == null) {
      throw new IllegalArgumentException(""String_Node_Str"" + process);
    }
    boolean isSecure=""String_Node_Str"".equals(SystemProperties.get(SYSTEM_SECURE,""String_Node_Str""));
    if (isSecure) {
      if ((proc.info.flags & ApplicationInfo.FLAG_DEBUGGABLE) == 0) {
        throw new SecurityException(""String_Node_Str"" + proc);
      }
    }
    try {
      proc.thread.profilerControl(start,path);
      return true;
    }
 catch (    RemoteException e) {
      throw new IllegalStateException(""String_Node_Str"");
    }
  }
}","public boolean profileControl(String process,boolean start,String path,ParcelFileDescriptor fd) throws RemoteException {
  try {
synchronized (this) {
      if (checkCallingPermission(android.Manifest.permission.SET_ACTIVITY_WATCHER) != PackageManager.PERMISSION_GRANTED) {
        throw new SecurityException(""String_Node_Str"" + android.Manifest.permission.SET_ACTIVITY_WATCHER);
      }
      if (start && fd == null) {
        throw new IllegalArgumentException(""String_Node_Str"");
      }
      ProcessRecord proc=null;
      try {
        int pid=Integer.parseInt(process);
synchronized (mPidsSelfLocked) {
          proc=mPidsSelfLocked.get(pid);
        }
      }
 catch (      NumberFormatException e) {
      }
      if (proc == null) {
        HashMap<String,SparseArray<ProcessRecord>> all=mProcessNames.getMap();
        SparseArray<ProcessRecord> procs=all.get(process);
        if (procs != null && procs.size() > 0) {
          proc=procs.valueAt(0);
        }
      }
      if (proc == null || proc.thread == null) {
        throw new IllegalArgumentException(""String_Node_Str"" + process);
      }
      boolean isSecure=""String_Node_Str"".equals(SystemProperties.get(SYSTEM_SECURE,""String_Node_Str""));
      if (isSecure) {
        if ((proc.info.flags & ApplicationInfo.FLAG_DEBUGGABLE) == 0) {
          throw new SecurityException(""String_Node_Str"" + proc);
        }
      }
      proc.thread.profilerControl(start,path,fd);
      fd=null;
      return true;
    }
  }
 catch (  RemoteException e) {
    throw new IllegalStateException(""String_Node_Str"");
  }
 finally {
    if (fd != null) {
      try {
        fd.close();
      }
 catch (      IOException e) {
      }
    }
  }
}"
24090,"public void noteAudioOffLocked(int uid){
  if (mAudioOn) {
    mAudioOn=false;
    mAudioOnTimer.stopRunningLocked(this);
  }
  Uid u=mUidStats.get(uid);
  if (u != null) {
    u.noteAudioTurnedOffLocked();
  }
}","public void noteAudioOffLocked(int uid){
  if (mAudioOn) {
    mAudioOn=false;
    mAudioOnTimer.stopRunningLocked(this);
  }
  getUidStatsLocked(uid).noteAudioTurnedOffLocked();
}"
24091,"public void noteWifiOffLocked(int uid){
  if (mWifiOn) {
    mWifiOn=false;
    mWifiOnTimer.stopRunningLocked(this);
  }
  if (mWifiOnUid >= 0) {
    Uid u=mUidStats.get(mWifiOnUid);
    if (u != null) {
      u.noteWifiTurnedOffLocked();
    }
    mWifiOnUid=-1;
  }
}","public void noteWifiOffLocked(int uid){
  if (mWifiOn) {
    mWifiOn=false;
    mWifiOnTimer.stopRunningLocked(this);
  }
  if (mWifiOnUid >= 0) {
    getUidStatsLocked(mWifiOnUid).noteWifiTurnedOffLocked();
    mWifiOnUid=-1;
  }
}"
24092,"public void noteAudioOnLocked(int uid){
  if (!mAudioOn) {
    mAudioOn=true;
    mAudioOnTimer.startRunningLocked(this);
  }
  Uid u=mUidStats.get(uid);
  if (u != null) {
    u.noteAudioTurnedOnLocked();
  }
}","public void noteAudioOnLocked(int uid){
  if (!mAudioOn) {
    mAudioOn=true;
    mAudioOnTimer.startRunningLocked(this);
  }
  getUidStatsLocked(uid).noteAudioTurnedOnLocked();
}"
24093,"public void noteVideoOffLocked(int uid){
  if (mVideoOn) {
    mVideoOn=false;
    mVideoOnTimer.stopRunningLocked(this);
  }
  Uid u=mUidStats.get(uid);
  if (u != null) {
    u.noteVideoTurnedOffLocked();
  }
}","public void noteVideoOffLocked(int uid){
  if (mVideoOn) {
    mVideoOn=false;
    mVideoOnTimer.stopRunningLocked(this);
  }
  getUidStatsLocked(uid).noteVideoTurnedOffLocked();
}"
24094,"public void noteWifiOnLocked(int uid){
  if (!mWifiOn) {
    mWifiOn=true;
    mWifiOnTimer.startRunningLocked(this);
  }
  if (mWifiOnUid != uid) {
    if (mWifiOnUid >= 0) {
      Uid u=mUidStats.get(mWifiOnUid);
      if (u != null) {
        u.noteWifiTurnedOffLocked();
      }
    }
    mWifiOnUid=uid;
    Uid u=mUidStats.get(uid);
    if (u != null) {
      u.noteWifiTurnedOnLocked();
    }
  }
}","public void noteWifiOnLocked(int uid){
  if (!mWifiOn) {
    mWifiOn=true;
    mWifiOnTimer.startRunningLocked(this);
  }
  if (mWifiOnUid != uid) {
    if (mWifiOnUid >= 0) {
      getUidStatsLocked(mWifiOnUid).noteWifiTurnedOffLocked();
    }
    mWifiOnUid=uid;
    getUidStatsLocked(uid).noteWifiTurnedOnLocked();
  }
}"
24095,"public void noteVideoOnLocked(int uid){
  if (!mVideoOn) {
    mVideoOn=true;
    mVideoOnTimer.startRunningLocked(this);
  }
  Uid u=mUidStats.get(uid);
  if (u != null) {
    u.noteVideoTurnedOnLocked();
  }
}","public void noteVideoOnLocked(int uid){
  if (!mVideoOn) {
    mVideoOn=true;
    mVideoOnTimer.startRunningLocked(this);
  }
  getUidStatsLocked(uid).noteVideoTurnedOnLocked();
}"
24096,"/** 
 * called from native code to update our status
 */
private void reportStatus(int status){
  if (VERBOSE)   Log.v(TAG,""String_Node_Str"" + status);
  boolean wasNavigating=mNavigating;
  mNavigating=(status == GPS_STATUS_SESSION_BEGIN);
  if (wasNavigating != mNavigating) {
    if (mNavigating) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mWakeLock.acquire();
    }
synchronized (mListeners) {
      int size=mListeners.size();
      for (int i=0; i < size; i++) {
        Listener listener=mListeners.get(i);
        try {
          if (mNavigating) {
            listener.mListener.onGpsStarted();
          }
 else {
            listener.mListener.onGpsStopped();
          }
        }
 catch (        RemoteException e) {
          Log.w(TAG,""String_Node_Str"");
          mListeners.remove(listener);
          size--;
        }
      }
    }
    try {
      for (int i=mClientUids.size() - 1; i >= 0; i--) {
        int uid=mClientUids.keyAt(i);
        if (mNavigating) {
          mBatteryStats.noteStartGps(uid);
        }
 else {
          mBatteryStats.noteStopGps(uid);
        }
      }
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"");
    }
    Intent intent=new Intent(GPS_ENABLED_CHANGE_ACTION);
    intent.putExtra(EXTRA_ENABLED,mNavigating);
    mContext.sendBroadcast(intent);
    if (!mNavigating) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mWakeLock.release();
    }
  }
}","/** 
 * called from native code to update our status
 */
private void reportStatus(int status){
  if (VERBOSE)   Log.v(TAG,""String_Node_Str"" + status);
synchronized (mListeners) {
    boolean wasNavigating=mNavigating;
    mNavigating=(status == GPS_STATUS_SESSION_BEGIN);
    if (wasNavigating == mNavigating) {
      return;
    }
    if (mNavigating) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mWakeLock.acquire();
    }
    int size=mListeners.size();
    for (int i=0; i < size; i++) {
      Listener listener=mListeners.get(i);
      try {
        if (mNavigating) {
          listener.mListener.onGpsStarted();
        }
 else {
          listener.mListener.onGpsStopped();
        }
      }
 catch (      RemoteException e) {
        Log.w(TAG,""String_Node_Str"");
        mListeners.remove(listener);
        size--;
      }
    }
    try {
      for (int i=mClientUids.size() - 1; i >= 0; i--) {
        int uid=mClientUids.keyAt(i);
        if (mNavigating) {
          mBatteryStats.noteStartGps(uid);
        }
 else {
          mBatteryStats.noteStopGps(uid);
        }
      }
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"");
    }
    Intent intent=new Intent(GPS_ENABLED_CHANGE_ACTION);
    intent.putExtra(EXTRA_ENABLED,mNavigating);
    mContext.sendBroadcast(intent);
    if (!mNavigating) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mWakeLock.release();
    }
  }
}"
24097,"public void addListener(int uid){
  mClientUids.put(uid,0);
  if (mNavigating) {
    try {
      mBatteryStats.noteStartGps(uid);
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"");
    }
  }
}","public void addListener(int uid){
synchronized (mListeners) {
    if (mClientUids.indexOfKey(uid) >= 0) {
      Log.w(TAG,""String_Node_Str"" + uid);
      return;
    }
    mClientUids.put(uid,0);
    if (mNavigating) {
      try {
        mBatteryStats.noteStartGps(uid);
      }
 catch (      RemoteException e) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
}"
24098,"public void removeListener(int uid){
  mClientUids.delete(uid);
  if (mNavigating) {
    try {
      mBatteryStats.noteStopGps(uid);
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"");
    }
  }
}","public void removeListener(int uid){
synchronized (mListeners) {
    if (mClientUids.indexOfKey(uid) < 0) {
      Log.w(TAG,""String_Node_Str"" + uid);
      return;
    }
    mClientUids.delete(uid);
    if (mNavigating) {
      try {
        mBatteryStats.noteStopGps(uid);
      }
 catch (      RemoteException e) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
}"
24099,"public void noteAudioOffLocked(int uid){
  if (mAudioOn) {
    mAudioOn=false;
    mAudioOnTimer.stopRunningLocked(this);
  }
  Uid u=mUidStats.get(uid);
  if (u != null) {
    u.noteAudioTurnedOffLocked();
  }
}","public void noteAudioOffLocked(int uid){
  if (mAudioOn) {
    mAudioOn=false;
    mAudioOnTimer.stopRunningLocked(this);
  }
  getUidStatsLocked(uid).noteAudioTurnedOffLocked();
}"
24100,"public void noteWifiOffLocked(int uid){
  if (mWifiOn) {
    mWifiOn=false;
    mWifiOnTimer.stopRunningLocked(this);
  }
  if (mWifiOnUid >= 0) {
    Uid u=mUidStats.get(mWifiOnUid);
    if (u != null) {
      u.noteWifiTurnedOffLocked();
    }
    mWifiOnUid=-1;
  }
}","public void noteWifiOffLocked(int uid){
  if (mWifiOn) {
    mWifiOn=false;
    mWifiOnTimer.stopRunningLocked(this);
  }
  if (mWifiOnUid >= 0) {
    getUidStatsLocked(mWifiOnUid).noteWifiTurnedOffLocked();
    mWifiOnUid=-1;
  }
}"
24101,"public void noteAudioOnLocked(int uid){
  if (!mAudioOn) {
    mAudioOn=true;
    mAudioOnTimer.startRunningLocked(this);
  }
  Uid u=mUidStats.get(uid);
  if (u != null) {
    u.noteAudioTurnedOnLocked();
  }
}","public void noteAudioOnLocked(int uid){
  if (!mAudioOn) {
    mAudioOn=true;
    mAudioOnTimer.startRunningLocked(this);
  }
  getUidStatsLocked(uid).noteAudioTurnedOnLocked();
}"
24102,"public void noteVideoOffLocked(int uid){
  if (mVideoOn) {
    mVideoOn=false;
    mVideoOnTimer.stopRunningLocked(this);
  }
  Uid u=mUidStats.get(uid);
  if (u != null) {
    u.noteVideoTurnedOffLocked();
  }
}","public void noteVideoOffLocked(int uid){
  if (mVideoOn) {
    mVideoOn=false;
    mVideoOnTimer.stopRunningLocked(this);
  }
  getUidStatsLocked(uid).noteVideoTurnedOffLocked();
}"
24103,"public void noteWifiOnLocked(int uid){
  if (!mWifiOn) {
    mWifiOn=true;
    mWifiOnTimer.startRunningLocked(this);
  }
  if (mWifiOnUid != uid) {
    if (mWifiOnUid >= 0) {
      Uid u=mUidStats.get(mWifiOnUid);
      if (u != null) {
        u.noteWifiTurnedOffLocked();
      }
    }
    mWifiOnUid=uid;
    Uid u=mUidStats.get(uid);
    if (u != null) {
      u.noteWifiTurnedOnLocked();
    }
  }
}","public void noteWifiOnLocked(int uid){
  if (!mWifiOn) {
    mWifiOn=true;
    mWifiOnTimer.startRunningLocked(this);
  }
  if (mWifiOnUid != uid) {
    if (mWifiOnUid >= 0) {
      getUidStatsLocked(mWifiOnUid).noteWifiTurnedOffLocked();
    }
    mWifiOnUid=uid;
    getUidStatsLocked(uid).noteWifiTurnedOnLocked();
  }
}"
24104,"public void noteVideoOnLocked(int uid){
  if (!mVideoOn) {
    mVideoOn=true;
    mVideoOnTimer.startRunningLocked(this);
  }
  Uid u=mUidStats.get(uid);
  if (u != null) {
    u.noteVideoTurnedOnLocked();
  }
}","public void noteVideoOnLocked(int uid){
  if (!mVideoOn) {
    mVideoOn=true;
    mVideoOnTimer.startRunningLocked(this);
  }
  getUidStatsLocked(uid).noteVideoTurnedOnLocked();
}"
24105,"/** 
 * called from native code to update our status
 */
private void reportStatus(int status){
  if (VERBOSE)   Log.v(TAG,""String_Node_Str"" + status);
  boolean wasNavigating=mNavigating;
  mNavigating=(status == GPS_STATUS_SESSION_BEGIN);
  if (wasNavigating != mNavigating) {
    if (mNavigating) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mWakeLock.acquire();
    }
synchronized (mListeners) {
      int size=mListeners.size();
      for (int i=0; i < size; i++) {
        Listener listener=mListeners.get(i);
        try {
          if (mNavigating) {
            listener.mListener.onGpsStarted();
          }
 else {
            listener.mListener.onGpsStopped();
          }
        }
 catch (        RemoteException e) {
          Log.w(TAG,""String_Node_Str"");
          mListeners.remove(listener);
          size--;
        }
      }
    }
    try {
      for (int i=mClientUids.size() - 1; i >= 0; i--) {
        int uid=mClientUids.keyAt(i);
        if (mNavigating) {
          mBatteryStats.noteStartGps(uid);
        }
 else {
          mBatteryStats.noteStopGps(uid);
        }
      }
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"");
    }
    Intent intent=new Intent(GPS_ENABLED_CHANGE_ACTION);
    intent.putExtra(EXTRA_ENABLED,mNavigating);
    mContext.sendBroadcast(intent);
    if (!mNavigating) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mWakeLock.release();
    }
  }
}","/** 
 * called from native code to update our status
 */
private void reportStatus(int status){
  if (VERBOSE)   Log.v(TAG,""String_Node_Str"" + status);
synchronized (mListeners) {
    boolean wasNavigating=mNavigating;
    mNavigating=(status == GPS_STATUS_SESSION_BEGIN);
    if (wasNavigating == mNavigating) {
      return;
    }
    if (mNavigating) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mWakeLock.acquire();
    }
    int size=mListeners.size();
    for (int i=0; i < size; i++) {
      Listener listener=mListeners.get(i);
      try {
        if (mNavigating) {
          listener.mListener.onGpsStarted();
        }
 else {
          listener.mListener.onGpsStopped();
        }
      }
 catch (      RemoteException e) {
        Log.w(TAG,""String_Node_Str"");
        mListeners.remove(listener);
        size--;
      }
    }
    try {
      for (int i=mClientUids.size() - 1; i >= 0; i--) {
        int uid=mClientUids.keyAt(i);
        if (mNavigating) {
          mBatteryStats.noteStartGps(uid);
        }
 else {
          mBatteryStats.noteStopGps(uid);
        }
      }
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"");
    }
    Intent intent=new Intent(GPS_ENABLED_CHANGE_ACTION);
    intent.putExtra(EXTRA_ENABLED,mNavigating);
    mContext.sendBroadcast(intent);
    if (!mNavigating) {
      if (DEBUG)       Log.d(TAG,""String_Node_Str"");
      mWakeLock.release();
    }
  }
}"
24106,"public void addListener(int uid){
  mClientUids.put(uid,0);
  if (mNavigating) {
    try {
      mBatteryStats.noteStartGps(uid);
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"");
    }
  }
}","public void addListener(int uid){
synchronized (mListeners) {
    if (mClientUids.indexOfKey(uid) >= 0) {
      Log.w(TAG,""String_Node_Str"" + uid);
      return;
    }
    mClientUids.put(uid,0);
    if (mNavigating) {
      try {
        mBatteryStats.noteStartGps(uid);
      }
 catch (      RemoteException e) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
}"
24107,"public void removeListener(int uid){
  mClientUids.delete(uid);
  if (mNavigating) {
    try {
      mBatteryStats.noteStopGps(uid);
    }
 catch (    RemoteException e) {
      Log.w(TAG,""String_Node_Str"");
    }
  }
}","public void removeListener(int uid){
synchronized (mListeners) {
    if (mClientUids.indexOfKey(uid) < 0) {
      Log.w(TAG,""String_Node_Str"" + uid);
      return;
    }
    mClientUids.delete(uid);
    if (mNavigating) {
      try {
        mBatteryStats.noteStopGps(uid);
      }
 catch (      RemoteException e) {
        Log.w(TAG,""String_Node_Str"");
      }
    }
  }
}"
24108,"@Override public final void setBackgroundDrawable(Drawable drawable){
  if (drawable != mBackgroundDrawable) {
    mBackgroundResource=0;
    mBackgroundDrawable=drawable;
    if (mDecor != null) {
      mDecor.setWindowBackground(drawable);
    }
  }
}","@Override public final void setBackgroundDrawable(Drawable drawable){
  if (drawable != mBackgroundDrawable || mBackgroundResource != 0) {
    mBackgroundResource=0;
    mBackgroundDrawable=drawable;
    if (mDecor != null) {
      mDecor.setWindowBackground(drawable);
    }
  }
}"
24109,"@Override public final void setBackgroundDrawable(Drawable drawable){
  if (drawable != mBackgroundDrawable) {
    mBackgroundResource=0;
    mBackgroundDrawable=drawable;
    if (mDecor != null) {
      mDecor.setWindowBackground(drawable);
    }
  }
}","@Override public final void setBackgroundDrawable(Drawable drawable){
  if (drawable != mBackgroundDrawable || mBackgroundResource != 0) {
    mBackgroundResource=0;
    mBackgroundDrawable=drawable;
    if (mDecor != null) {
      mDecor.setWindowBackground(drawable);
    }
  }
}"
24110,"private final boolean attachApplicationLocked(IApplicationThread thread,int pid){
  ProcessRecord app;
  if (pid != MY_PID && pid >= 0) {
synchronized (mPidsSelfLocked) {
      app=mPidsSelfLocked.get(pid);
    }
  }
 else   if (mStartingProcesses.size() > 0) {
    app=mStartingProcesses.remove(0);
    app.setPid(pid);
  }
 else {
    app=null;
  }
  if (app == null) {
    Log.w(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ thread+ ""String_Node_Str"");
    EventLog.writeEvent(LOG_AM_DROP_PROCESS,pid);
    if (pid > 0 && pid != MY_PID) {
      Process.killProcess(pid);
    }
 else {
      try {
        thread.scheduleExit();
      }
 catch (      Exception e) {
      }
    }
    return false;
  }
  if (app.thread != null) {
    handleAppDiedLocked(app,true);
  }
  if (localLOGV)   Log.v(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ app);
  String processName=app.processName;
  try {
    thread.asBinder().linkToDeath(new AppDeathRecipient(app,pid,thread),0);
  }
 catch (  RemoteException e) {
    app.resetPackageList();
    startProcessLocked(app,""String_Node_Str"",processName);
    return false;
  }
  EventLog.writeEvent(LOG_AM_PROCESS_BOUND,app.pid,app.processName);
  app.thread=thread;
  app.curAdj=app.setAdj=-100;
  app.curSchedGroup=app.setSchedGroup=Process.THREAD_GROUP_DEFAULT;
  app.forcingToForeground=null;
  app.foregroundServices=false;
  app.debugging=false;
  mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
  List providers=generateApplicationProvidersLocked(app);
  if (localLOGV)   Log.v(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ thread.asBinder()+ ""String_Node_Str""+ pid);
  try {
    int testMode=IApplicationThread.DEBUG_OFF;
    if (mDebugApp != null && mDebugApp.equals(processName)) {
      testMode=mWaitForDebugger ? IApplicationThread.DEBUG_WAIT : IApplicationThread.DEBUG_ON;
      app.debugging=true;
      if (mDebugTransient) {
        mDebugApp=mOrigDebugApp;
        mWaitForDebugger=mOrigWaitForDebugger;
      }
    }
    boolean isRestrictedBackupMode=false;
    if (mBackupTarget != null && mBackupAppName.equals(processName)) {
      isRestrictedBackupMode=(mBackupTarget.backupMode == BackupRecord.RESTORE) || (mBackupTarget.backupMode == BackupRecord.BACKUP_FULL);
    }
    ensurePackageDexOpt(app.info.packageName);
    if (app.instrumentationInfo != null) {
      ensurePackageDexOpt(app.instrumentationInfo.packageName);
    }
    thread.bindApplication(processName,app.instrumentationInfo != null ? app.instrumentationInfo : app.info,providers,app.instrumentationClass,app.instrumentationProfileFile,app.instrumentationArguments,app.instrumentationWatcher,testMode,isRestrictedBackupMode,mConfiguration,getCommonServicesLocked());
    updateLRUListLocked(app,false);
    app.lastRequestedGc=SystemClock.uptimeMillis();
  }
 catch (  Exception e) {
    Log.w(TAG,""String_Node_Str"",e);
    app.resetPackageList();
    startProcessLocked(app,""String_Node_Str"",processName);
    return false;
  }
  mPersistentStartingProcesses.remove(app);
  mProcessesOnHold.remove(app);
  boolean badApp=false;
  boolean didSomething=false;
  HistoryRecord hr=topRunningActivityLocked(null);
  if (hr != null) {
    if (hr.app == null && app.info.uid == hr.info.applicationInfo.uid && processName.equals(hr.processName)) {
      try {
        if (realStartActivityLocked(hr,app,true,true)) {
          didSomething=true;
        }
      }
 catch (      Exception e) {
        Log.w(TAG,""String_Node_Str"" + hr.intent.getComponent().flattenToShortString(),e);
        badApp=true;
      }
    }
 else {
      ensureActivitiesVisibleLocked(hr,null,processName,0);
    }
  }
  if (!badApp && mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (app.info.uid != sr.appInfo.uid || !processName.equals(sr.processName)) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        realStartServiceLocked(sr,app);
        didSomething=true;
      }
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"" + sr.shortName,e);
      badApp=true;
    }
  }
  BroadcastRecord br=mPendingBroadcast;
  if (!badApp && br != null && br.curApp == app) {
    try {
      mPendingBroadcast=null;
      processCurBroadcastLocked(br,app);
      didSomething=true;
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"" + br.curComponent.flattenToShortString(),e);
      badApp=true;
      logBroadcastReceiverDiscard(br);
      finishReceiverLocked(br.receiver,br.resultCode,br.resultData,br.resultExtras,br.resultAbort,true);
      scheduleBroadcastsLocked();
    }
  }
  if (!badApp && mBackupTarget != null && mBackupTarget.appInfo.uid == app.info.uid) {
    if (DEBUG_BACKUP)     Log.v(TAG,""String_Node_Str"" + app);
    ensurePackageDexOpt(mBackupTarget.appInfo.packageName);
    try {
      thread.scheduleCreateBackupAgent(mBackupTarget.appInfo,mBackupTarget.backupMode);
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (badApp) {
    handleAppDiedLocked(app,false);
    return false;
  }
  if (!didSomething) {
    updateOomAdjLocked();
  }
  return true;
}","private final boolean attachApplicationLocked(IApplicationThread thread,int pid){
  ProcessRecord app;
  if (pid != MY_PID && pid >= 0) {
synchronized (mPidsSelfLocked) {
      app=mPidsSelfLocked.get(pid);
    }
  }
 else   if (mStartingProcesses.size() > 0) {
    app=mStartingProcesses.remove(0);
    app.setPid(pid);
  }
 else {
    app=null;
  }
  if (app == null) {
    Log.w(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ thread+ ""String_Node_Str"");
    EventLog.writeEvent(LOG_AM_DROP_PROCESS,pid);
    if (pid > 0 && pid != MY_PID) {
      Process.killProcess(pid);
    }
 else {
      try {
        thread.scheduleExit();
      }
 catch (      Exception e) {
      }
    }
    return false;
  }
  if (app.thread != null) {
    handleAppDiedLocked(app,true);
  }
  if (localLOGV)   Log.v(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ app);
  String processName=app.processName;
  try {
    thread.asBinder().linkToDeath(new AppDeathRecipient(app,pid,thread),0);
  }
 catch (  RemoteException e) {
    app.resetPackageList();
    startProcessLocked(app,""String_Node_Str"",processName);
    return false;
  }
  EventLog.writeEvent(LOG_AM_PROCESS_BOUND,app.pid,app.processName);
  app.thread=thread;
  app.curAdj=app.setAdj=-100;
  app.curSchedGroup=app.setSchedGroup=Process.THREAD_GROUP_DEFAULT;
  app.forcingToForeground=null;
  app.foregroundServices=false;
  app.debugging=false;
  mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
  List providers=generateApplicationProvidersLocked(app);
  if (localLOGV)   Log.v(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ thread.asBinder()+ ""String_Node_Str""+ pid);
  try {
    int testMode=IApplicationThread.DEBUG_OFF;
    if (mDebugApp != null && mDebugApp.equals(processName)) {
      testMode=mWaitForDebugger ? IApplicationThread.DEBUG_WAIT : IApplicationThread.DEBUG_ON;
      app.debugging=true;
      if (mDebugTransient) {
        mDebugApp=mOrigDebugApp;
        mWaitForDebugger=mOrigWaitForDebugger;
      }
    }
    boolean isRestrictedBackupMode=false;
    if (mBackupTarget != null && mBackupAppName.equals(processName)) {
      isRestrictedBackupMode=(mBackupTarget.backupMode == BackupRecord.RESTORE) || (mBackupTarget.backupMode == BackupRecord.BACKUP_FULL);
    }
    ensurePackageDexOpt(app.instrumentationInfo != null ? app.instrumentationInfo.packageName : app.info.packageName);
    if (app.instrumentationClass != null) {
      ensurePackageDexOpt(app.instrumentationClass.getPackageName());
    }
    thread.bindApplication(processName,app.instrumentationInfo != null ? app.instrumentationInfo : app.info,providers,app.instrumentationClass,app.instrumentationProfileFile,app.instrumentationArguments,app.instrumentationWatcher,testMode,isRestrictedBackupMode,mConfiguration,getCommonServicesLocked());
    updateLRUListLocked(app,false);
    app.lastRequestedGc=SystemClock.uptimeMillis();
  }
 catch (  Exception e) {
    Log.w(TAG,""String_Node_Str"",e);
    app.resetPackageList();
    startProcessLocked(app,""String_Node_Str"",processName);
    return false;
  }
  mPersistentStartingProcesses.remove(app);
  mProcessesOnHold.remove(app);
  boolean badApp=false;
  boolean didSomething=false;
  HistoryRecord hr=topRunningActivityLocked(null);
  if (hr != null) {
    if (hr.app == null && app.info.uid == hr.info.applicationInfo.uid && processName.equals(hr.processName)) {
      try {
        if (realStartActivityLocked(hr,app,true,true)) {
          didSomething=true;
        }
      }
 catch (      Exception e) {
        Log.w(TAG,""String_Node_Str"" + hr.intent.getComponent().flattenToShortString(),e);
        badApp=true;
      }
    }
 else {
      ensureActivitiesVisibleLocked(hr,null,processName,0);
    }
  }
  if (!badApp && mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (app.info.uid != sr.appInfo.uid || !processName.equals(sr.processName)) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        realStartServiceLocked(sr,app);
        didSomething=true;
      }
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"" + sr.shortName,e);
      badApp=true;
    }
  }
  BroadcastRecord br=mPendingBroadcast;
  if (!badApp && br != null && br.curApp == app) {
    try {
      mPendingBroadcast=null;
      processCurBroadcastLocked(br,app);
      didSomething=true;
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"" + br.curComponent.flattenToShortString(),e);
      badApp=true;
      logBroadcastReceiverDiscard(br);
      finishReceiverLocked(br.receiver,br.resultCode,br.resultData,br.resultExtras,br.resultAbort,true);
      scheduleBroadcastsLocked();
    }
  }
  if (!badApp && mBackupTarget != null && mBackupTarget.appInfo.uid == app.info.uid) {
    if (DEBUG_BACKUP)     Log.v(TAG,""String_Node_Str"" + app);
    ensurePackageDexOpt(mBackupTarget.appInfo.packageName);
    try {
      thread.scheduleCreateBackupAgent(mBackupTarget.appInfo,mBackupTarget.backupMode);
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"");
      e.printStackTrace();
    }
  }
  if (badApp) {
    handleAppDiedLocked(app,false);
    return false;
  }
  if (!didSomething) {
    updateOomAdjLocked();
  }
  return true;
}"
24111,"private Rect sendOurVisibleRect(){
  Rect rect=new Rect();
  calcOurContentVisibleRect(rect);
  if (mFindIsUp) {
    rect.bottom-=viewToContent(FIND_HEIGHT);
  }
  if (!rect.equals(mLastVisibleRectSent)) {
    Point pos=new Point(rect.left,rect.top);
    mWebViewCore.sendMessage(EventHub.SET_SCROLL_OFFSET,nativeMoveGeneration(),0,pos);
    mLastVisibleRectSent=rect;
  }
  Rect globalRect=new Rect();
  if (getGlobalVisibleRect(globalRect) && !globalRect.equals(mLastGlobalRect)) {
    mWebViewCore.sendMessage(EventHub.SET_GLOBAL_BOUNDS,globalRect);
    mLastGlobalRect=globalRect;
  }
  return rect;
}","private Rect sendOurVisibleRect(){
  Rect rect=new Rect();
  calcOurContentVisibleRect(rect);
  if (!rect.equals(mLastVisibleRectSent)) {
    Point pos=new Point(rect.left,rect.top);
    mWebViewCore.sendMessage(EventHub.SET_SCROLL_OFFSET,nativeMoveGeneration(),0,pos);
    mLastVisibleRectSent=rect;
  }
  Rect globalRect=new Rect();
  if (getGlobalVisibleRect(globalRect) && !globalRect.equals(mLastGlobalRect)) {
    if (DebugFlags.WEB_VIEW) {
      Log.v(LOGTAG,""String_Node_Str"" + globalRect.left + ""String_Node_Str""+ globalRect.top+ ""String_Node_Str""+ globalRect.right+ ""String_Node_Str""+ globalRect.bottom);
    }
    mWebViewCore.sendMessage(EventHub.SET_GLOBAL_BOUNDS,globalRect);
    mLastGlobalRect=globalRect;
  }
  return rect;
}"
24112,"private void rebuildWebTextView(){
  if (!hasFocus() && (null == mWebTextView || !mWebTextView.hasFocus()) || (mTouchMode >= FIRST_SCROLL_ZOOM && mTouchMode <= LAST_SCROLL_ZOOM)) {
    return;
  }
  boolean alreadyThere=inEditingMode();
  if (0 == mNativeClass || !nativeFocusCandidateIsTextInput()) {
    if (alreadyThere) {
      mWebTextView.remove();
    }
    return;
  }
  if (mWebTextView == null) {
    mWebTextView=new WebTextView(mContext,WebView.this);
    mTextGeneration=0;
  }
  mWebTextView.setTextSize(contentToView(nativeFocusCandidateTextSize()));
  Rect visibleRect=sendOurVisibleRect();
  Rect bounds=nativeFocusCandidateNodeBounds();
  if (!Rect.intersects(bounds,visibleRect)) {
    return;
  }
  String text=nativeFocusCandidateText();
  int nodePointer=nativeFocusCandidatePointer();
  if (alreadyThere && mWebTextView.isSameTextField(nodePointer)) {
    Spannable spannable=(Spannable)mWebTextView.getText();
    int start=Selection.getSelectionStart(spannable);
    int end=Selection.getSelectionEnd(spannable);
    if (text != null && !text.equals(spannable.toString()) && nativeTextGeneration() == mTextGeneration) {
      mWebTextView.setTextAndKeepSelection(text);
    }
 else {
      Selection.setSelection(spannable,start,end);
    }
  }
 else {
    Rect vBox=contentToView(bounds);
    mWebTextView.setRect(vBox.left,vBox.top,vBox.width(),vBox.height());
    mWebTextView.setGravity(nativeFocusCandidateIsRtlText() ? Gravity.RIGHT : Gravity.NO_GRAVITY);
    mWebTextView.setNodePointer(nodePointer);
    int maxLength=-1;
    boolean isTextField=nativeFocusCandidateIsTextField();
    if (isTextField) {
      maxLength=nativeFocusCandidateMaxLength();
      String name=nativeFocusCandidateName();
      if (mWebViewCore.getSettings().getSaveFormData() && name != null) {
        Message update=mPrivateHandler.obtainMessage(REQUEST_FORM_DATA,nodePointer);
        RequestFormData updater=new RequestFormData(name,getUrl(),update);
        Thread t=new Thread(updater);
        t.start();
      }
    }
    mWebTextView.setMaxLength(maxLength);
    AutoCompleteAdapter adapter=null;
    mWebTextView.setAdapterCustom(adapter);
    mWebTextView.setSingleLine(isTextField);
    mWebTextView.setInPassword(nativeFocusCandidateIsPassword());
    if (null == text) {
      mWebTextView.setText(""String_Node_Str"",0,0);
    }
 else {
      if (false) {
        mWebTextView.setText(text,0,text.length());
      }
 else       if (isTextField) {
        int length=text.length();
        mWebTextView.setText(text,length,length);
      }
 else {
        mWebTextView.setText(text,0,0);
      }
    }
    mWebTextView.requestFocus();
  }
}","private void rebuildWebTextView(){
  if (!hasFocus() && (null == mWebTextView || !mWebTextView.hasFocus()) || (mTouchMode >= FIRST_SCROLL_ZOOM && mTouchMode <= LAST_SCROLL_ZOOM)) {
    return;
  }
  boolean alreadyThere=inEditingMode();
  if (0 == mNativeClass || !nativeFocusCandidateIsTextInput()) {
    if (alreadyThere) {
      mWebTextView.remove();
    }
    return;
  }
  if (mWebTextView == null) {
    mWebTextView=new WebTextView(mContext,WebView.this);
    mTextGeneration=0;
  }
  mWebTextView.setTextSize(contentToView(nativeFocusCandidateTextSize()));
  Rect visibleRect=new Rect();
  calcOurContentVisibleRect(visibleRect);
  Rect bounds=nativeFocusCandidateNodeBounds();
  if (!Rect.intersects(bounds,visibleRect)) {
    return;
  }
  String text=nativeFocusCandidateText();
  int nodePointer=nativeFocusCandidatePointer();
  if (alreadyThere && mWebTextView.isSameTextField(nodePointer)) {
    Spannable spannable=(Spannable)mWebTextView.getText();
    int start=Selection.getSelectionStart(spannable);
    int end=Selection.getSelectionEnd(spannable);
    if (text != null && !text.equals(spannable.toString()) && nativeTextGeneration() == mTextGeneration) {
      mWebTextView.setTextAndKeepSelection(text);
    }
 else {
      Selection.setSelection(spannable,start,end);
    }
  }
 else {
    Rect vBox=contentToView(bounds);
    mWebTextView.setRect(vBox.left,vBox.top,vBox.width(),vBox.height());
    mWebTextView.setGravity(nativeFocusCandidateIsRtlText() ? Gravity.RIGHT : Gravity.NO_GRAVITY);
    mWebTextView.setNodePointer(nodePointer);
    int maxLength=-1;
    boolean isTextField=nativeFocusCandidateIsTextField();
    if (isTextField) {
      maxLength=nativeFocusCandidateMaxLength();
      String name=nativeFocusCandidateName();
      if (mWebViewCore.getSettings().getSaveFormData() && name != null) {
        Message update=mPrivateHandler.obtainMessage(REQUEST_FORM_DATA,nodePointer);
        RequestFormData updater=new RequestFormData(name,getUrl(),update);
        Thread t=new Thread(updater);
        t.start();
      }
    }
    mWebTextView.setMaxLength(maxLength);
    AutoCompleteAdapter adapter=null;
    mWebTextView.setAdapterCustom(adapter);
    mWebTextView.setSingleLine(isTextField);
    mWebTextView.setInPassword(nativeFocusCandidateIsPassword());
    if (null == text) {
      mWebTextView.setText(""String_Node_Str"",0,0);
    }
 else {
      if (false) {
        mWebTextView.setText(text,0,text.length());
      }
 else       if (isTextField) {
        int length=text.length();
        mWebTextView.setText(text,length,length);
      }
 else {
        mWebTextView.setText(text,0,0);
      }
    }
    mWebTextView.requestFocus();
  }
}"
24113,"private void calcOurVisibleRect(Rect r){
  Point p=new Point();
  getGlobalVisibleRect(r,p);
  r.offset(-p.x,-p.y);
}","private void calcOurVisibleRect(Rect r){
  Point p=new Point();
  getGlobalVisibleRect(r,p);
  r.offset(-p.x,-p.y);
  if (mFindIsUp) {
    r.bottom-=FIND_HEIGHT;
  }
}"
24114,"/** 
 * The default implementation returns the given amount of text from the current cursor position in the buffer.
 */
public CharSequence getTextBeforeCursor(int length,int flags){
  final Editable content=getEditable();
  if (content == null)   return null;
  int a=Selection.getSelectionStart(content);
  int b=Selection.getSelectionEnd(content);
  if (a > b) {
    int tmp=a;
    a=b;
    b=tmp;
  }
  if (length > a) {
    length=a;
  }
  if ((flags & GET_TEXT_WITH_STYLES) != 0) {
    return content.subSequence(a - length,a);
  }
  return TextUtils.substring(content,a - length,a);
}","/** 
 * The default implementation returns the given amount of text from the current cursor position in the buffer.
 */
public CharSequence getTextBeforeCursor(int length,int flags){
  final Editable content=getEditable();
  if (content == null)   return null;
  int a=Selection.getSelectionStart(content);
  int b=Selection.getSelectionEnd(content);
  if (a > b) {
    int tmp=a;
    a=b;
    b=tmp;
  }
  if (a <= 0) {
    return ""String_Node_Str"";
  }
  if (length > a) {
    length=a;
  }
  if ((flags & GET_TEXT_WITH_STYLES) != 0) {
    return content.subSequence(a - length,a);
  }
  return TextUtils.substring(content,a - length,a);
}"
24115,"private void replaceText(CharSequence text,int newCursorPosition,boolean composing){
  final Editable content=getEditable();
  if (content == null) {
    return;
  }
  beginBatchEdit();
  int a=getComposingSpanStart(content);
  int b=getComposingSpanEnd(content);
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + a + ""String_Node_Str""+ b);
  if (b < a) {
    int tmp=a;
    a=b;
    b=tmp;
  }
  if (a != -1 && b != -1) {
    removeComposingSpans(content);
  }
 else {
    a=Selection.getSelectionStart(content);
    b=Selection.getSelectionEnd(content);
    if (a >= 0 && b >= 0 && a != b) {
      if (b < a) {
        int tmp=a;
        a=b;
        b=tmp;
      }
    }
  }
  if (composing) {
    Spannable sp=null;
    if (!(text instanceof Spannable)) {
      sp=new SpannableStringBuilder(text);
      text=sp;
      if (mDefaultComposingSpans == null) {
        Context context;
        if (mTargetView != null) {
          context=mTargetView.getContext();
        }
 else         if (mIMM.mServedView != null) {
          context=mIMM.mServedView.getContext();
        }
 else {
          context=null;
        }
        if (context != null) {
          TypedArray ta=context.getTheme().obtainStyledAttributes(new int[]{com.android.internal.R.attr.candidatesTextStyleSpans});
          CharSequence style=ta.getText(0);
          ta.recycle();
          if (style != null && style instanceof Spanned) {
            mDefaultComposingSpans=((Spanned)style).getSpans(0,style.length(),Object.class);
          }
        }
      }
      if (mDefaultComposingSpans != null) {
        for (int i=0; i < mDefaultComposingSpans.length; ++i) {
          sp.setSpan(mDefaultComposingSpans[i],0,sp.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
      }
    }
 else {
      sp=(Spannable)text;
    }
    setComposingSpans(sp);
  }
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + a + ""String_Node_Str""+ b+ ""String_Node_Str""+ text+ ""String_Node_Str""+ composing+ ""String_Node_Str""+ text.getClass().getCanonicalName());
  if (DEBUG) {
    LogPrinter lp=new LogPrinter(Log.VERBOSE,TAG);
    lp.println(""String_Node_Str"");
    TextUtils.dumpSpans(content,lp,""String_Node_Str"");
    lp.println(""String_Node_Str"");
    TextUtils.dumpSpans(text,lp,""String_Node_Str"");
  }
  if (newCursorPosition > 0) {
    newCursorPosition+=b - 1;
  }
 else {
    newCursorPosition+=a;
  }
  if (newCursorPosition < 0)   newCursorPosition=0;
  if (newCursorPosition > content.length())   newCursorPosition=content.length();
  Selection.setSelection(content,newCursorPosition);
  content.replace(a,b,text);
  if (DEBUG) {
    LogPrinter lp=new LogPrinter(Log.VERBOSE,TAG);
    lp.println(""String_Node_Str"");
    TextUtils.dumpSpans(content,lp,""String_Node_Str"");
  }
  endBatchEdit();
}","private void replaceText(CharSequence text,int newCursorPosition,boolean composing){
  final Editable content=getEditable();
  if (content == null) {
    return;
  }
  beginBatchEdit();
  int a=getComposingSpanStart(content);
  int b=getComposingSpanEnd(content);
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + a + ""String_Node_Str""+ b);
  if (b < a) {
    int tmp=a;
    a=b;
    b=tmp;
  }
  if (a != -1 && b != -1) {
    removeComposingSpans(content);
  }
 else {
    a=Selection.getSelectionStart(content);
    b=Selection.getSelectionEnd(content);
    if (a < 0)     a=0;
    if (b < 0)     b=0;
    if (b < a) {
      int tmp=a;
      a=b;
      b=tmp;
    }
  }
  if (composing) {
    Spannable sp=null;
    if (!(text instanceof Spannable)) {
      sp=new SpannableStringBuilder(text);
      text=sp;
      if (mDefaultComposingSpans == null) {
        Context context;
        if (mTargetView != null) {
          context=mTargetView.getContext();
        }
 else         if (mIMM.mServedView != null) {
          context=mIMM.mServedView.getContext();
        }
 else {
          context=null;
        }
        if (context != null) {
          TypedArray ta=context.getTheme().obtainStyledAttributes(new int[]{com.android.internal.R.attr.candidatesTextStyleSpans});
          CharSequence style=ta.getText(0);
          ta.recycle();
          if (style != null && style instanceof Spanned) {
            mDefaultComposingSpans=((Spanned)style).getSpans(0,style.length(),Object.class);
          }
        }
      }
      if (mDefaultComposingSpans != null) {
        for (int i=0; i < mDefaultComposingSpans.length; ++i) {
          sp.setSpan(mDefaultComposingSpans[i],0,sp.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        }
      }
    }
 else {
      sp=(Spannable)text;
    }
    setComposingSpans(sp);
  }
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + a + ""String_Node_Str""+ b+ ""String_Node_Str""+ text+ ""String_Node_Str""+ composing+ ""String_Node_Str""+ text.getClass().getCanonicalName());
  if (DEBUG) {
    LogPrinter lp=new LogPrinter(Log.VERBOSE,TAG);
    lp.println(""String_Node_Str"");
    TextUtils.dumpSpans(content,lp,""String_Node_Str"");
    lp.println(""String_Node_Str"");
    TextUtils.dumpSpans(text,lp,""String_Node_Str"");
  }
  if (newCursorPosition > 0) {
    newCursorPosition+=b - 1;
  }
 else {
    newCursorPosition+=a;
  }
  if (newCursorPosition < 0)   newCursorPosition=0;
  if (newCursorPosition > content.length())   newCursorPosition=content.length();
  Selection.setSelection(content,newCursorPosition);
  content.replace(a,b,text);
  if (DEBUG) {
    LogPrinter lp=new LogPrinter(Log.VERBOSE,TAG);
    lp.println(""String_Node_Str"");
    TextUtils.dumpSpans(content,lp,""String_Node_Str"");
  }
  endBatchEdit();
}"
24116,"protected void onReceiveResult(int resultCode,Bundle resultData){
  if (resultCode != InputMethodManager.RESULT_SHOWN) {
    Selection.setSelection((Spannable)mText,mNewStart,mNewEnd);
  }
}","protected void onReceiveResult(int resultCode,Bundle resultData){
  if (resultCode != InputMethodManager.RESULT_SHOWN) {
    final int len=mText.length();
    if (mNewStart > len) {
      mNewStart=len;
    }
    if (mNewEnd > len) {
      mNewEnd=len;
    }
    Selection.setSelection((Spannable)mText,mNewStart,mNewEnd);
  }
}"
24117,"private void updateSharedUserPerms(PackageSetting deletedPs){
  if ((deletedPs == null) || (deletedPs.pkg == null)) {
    Log.i(TAG,""String_Node_Str"");
    return;
  }
  if (deletedPs.sharedUser == null) {
    return;
  }
  SharedUserSetting sus=deletedPs.sharedUser;
  for (  String eachPerm : deletedPs.pkg.requestedPermissions) {
    boolean used=false;
    if (!sus.grantedPermissions.contains(eachPerm)) {
      continue;
    }
    for (    PackageSetting pkg : sus.packages) {
      if (pkg.grantedPermissions.contains(eachPerm)) {
        used=true;
        break;
      }
    }
    if (!used) {
      sus.grantedPermissions.remove(eachPerm);
      sus.loadedPermissions.remove(eachPerm);
    }
  }
  int newGids[]=null;
  for (  PackageSetting pkg : sus.packages) {
    newGids=appendInts(newGids,pkg.gids);
  }
  sus.gids=newGids;
}","private void updateSharedUserPerms(PackageSetting deletedPs){
  if ((deletedPs == null) || (deletedPs.pkg == null)) {
    Log.i(TAG,""String_Node_Str"");
    return;
  }
  if (deletedPs.sharedUser == null) {
    return;
  }
  SharedUserSetting sus=deletedPs.sharedUser;
  for (  String eachPerm : deletedPs.pkg.requestedPermissions) {
    boolean used=false;
    if (!sus.grantedPermissions.contains(eachPerm)) {
      continue;
    }
    for (    PackageSetting pkg : sus.packages) {
      if (pkg.pkg.requestedPermissions.contains(eachPerm)) {
        used=true;
        break;
      }
    }
    if (!used) {
      sus.grantedPermissions.remove(eachPerm);
      sus.loadedPermissions.remove(eachPerm);
    }
  }
  int newGids[]=null;
  for (  PackageSetting pkg : sus.packages) {
    newGids=appendInts(newGids,pkg.gids);
  }
  sus.gids=newGids;
}"
24118,"/** 
 * Start a new activity and wait for it to begin running before returning. In addition to being synchronous, this method as some semantic differences from the standard   {@link Context#startActivity} call: theactivity component is resolved before talking with the activity manager (its class name is specified in the Intent that this method ultimately starts), and it does not allow you to start activities that run in a different process.  In addition, if the given Intent resolves to multiple activities, instead of displaying a dialog for the user to select an activity, an exception will be thrown. <p>The function returns as soon as the activity goes idle following the call to its  {@link Activity#onCreate}.  Generally this means it has gone through the full initialization including   {@link Activity#onResume} anddrawn and displayed its initial window.
 * @param intent Description of the activity to start.
 * @see Context#startActivity
 */
public Activity startActivitySync(Intent intent){
  validateNotAppThread();
synchronized (mSync) {
    intent=new Intent(intent);
    ActivityInfo ai=intent.resolveActivityInfo(getTargetContext().getPackageManager(),0);
    if (ai == null) {
      throw new RuntimeException(""String_Node_Str"" + intent);
    }
    if (!ai.applicationInfo.processName.equals(getTargetContext().getPackageName())) {
      throw new RuntimeException(""String_Node_Str"" + ai.applicationInfo.packageName + ""String_Node_Str""+ intent);
    }
    intent.setComponent(new ComponentName(ai.applicationInfo.packageName,ai.name));
    final ActivityWaiter aw=new ActivityWaiter(intent);
    if (mWaitingActivities == null) {
      mWaitingActivities=new ArrayList();
    }
    mWaitingActivities.add(aw);
    getTargetContext().startActivity(intent);
    do {
      try {
        mSync.wait();
      }
 catch (      InterruptedException e) {
      }
    }
 while (mWaitingActivities.contains(aw));
    return aw.activity;
  }
}","/** 
 * Start a new activity and wait for it to begin running before returning. In addition to being synchronous, this method as some semantic differences from the standard   {@link Context#startActivity} call: theactivity component is resolved before talking with the activity manager (its class name is specified in the Intent that this method ultimately starts), and it does not allow you to start activities that run in a different process.  In addition, if the given Intent resolves to multiple activities, instead of displaying a dialog for the user to select an activity, an exception will be thrown. <p>The function returns as soon as the activity goes idle following the call to its  {@link Activity#onCreate}.  Generally this means it has gone through the full initialization including   {@link Activity#onResume} anddrawn and displayed its initial window.
 * @param intent Description of the activity to start.
 * @see Context#startActivity
 */
public Activity startActivitySync(Intent intent){
  validateNotAppThread();
synchronized (mSync) {
    intent=new Intent(intent);
    ActivityInfo ai=intent.resolveActivityInfo(getTargetContext().getPackageManager(),0);
    if (ai == null) {
      throw new RuntimeException(""String_Node_Str"" + intent);
    }
    String myProc=mThread.getProcessName();
    if (!ai.processName.equals(myProc)) {
      throw new RuntimeException(""String_Node_Str"" + myProc + ""String_Node_Str""+ ai.processName+ ""String_Node_Str""+ intent);
    }
    intent.setComponent(new ComponentName(ai.applicationInfo.packageName,ai.name));
    final ActivityWaiter aw=new ActivityWaiter(intent);
    if (mWaitingActivities == null) {
      mWaitingActivities=new ArrayList();
    }
    mWaitingActivities.add(aw);
    getTargetContext().startActivity(intent);
    do {
      try {
        mSync.wait();
      }
 catch (      InterruptedException e) {
      }
    }
 while (mWaitingActivities.contains(aw));
    return aw.activity;
  }
}"
24119,"/** 
 * Sends a series of key events through instrumentation and waits for idle. For instance: sendKeys(KEYCODE_DPAD_LEFT, KEYCODE_DPAD_CENTER).
 * @param keys The series of key codes to send through instrumentation.
 */
public void sendKeys(int... keys){
  final int count=keys.length;
  final Instrumentation instrumentation=getInstrumentation();
  for (int i=0; i < count; i++) {
    instrumentation.sendKeyDownUpSync(keys[i]);
  }
  instrumentation.waitForIdleSync();
}","/** 
 * Sends a series of key events through instrumentation and waits for idle. For instance: sendKeys(KEYCODE_DPAD_LEFT, KEYCODE_DPAD_CENTER).
 * @param keys The series of key codes to send through instrumentation.
 */
public void sendKeys(int... keys){
  final int count=keys.length;
  final Instrumentation instrumentation=getInstrumentation();
  for (int i=0; i < count; i++) {
    try {
      instrumentation.sendKeyDownUpSync(keys[i]);
    }
 catch (    SecurityException e) {
    }
  }
  instrumentation.waitForIdleSync();
}"
24120,"/** 
 * Sends a series of key events through instrumentation and waits for idle. Each key code must be preceded by the number of times the key code must be sent. For instance: sendRepeatedKeys(1, KEYCODE_DPAD_CENTER, 2, KEYCODE_DPAD_LEFT).
 * @param keys The series of key repeats and codes to send through instrumentation.
 */
public void sendRepeatedKeys(int... keys){
  final int count=keys.length;
  if ((count & 0x1) == 0x1) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  final Instrumentation instrumentation=getInstrumentation();
  for (int i=0; i < count; i+=2) {
    final int keyCount=keys[i];
    final int keyCode=keys[i + 1];
    for (int j=0; j < keyCount; j++) {
      instrumentation.sendKeyDownUpSync(keyCode);
    }
  }
  instrumentation.waitForIdleSync();
}","/** 
 * Sends a series of key events through instrumentation and waits for idle. Each key code must be preceded by the number of times the key code must be sent. For instance: sendRepeatedKeys(1, KEYCODE_DPAD_CENTER, 2, KEYCODE_DPAD_LEFT).
 * @param keys The series of key repeats and codes to send through instrumentation.
 */
public void sendRepeatedKeys(int... keys){
  final int count=keys.length;
  if ((count & 0x1) == 0x1) {
    throw new IllegalArgumentException(""String_Node_Str"" + ""String_Node_Str"");
  }
  final Instrumentation instrumentation=getInstrumentation();
  for (int i=0; i < count; i+=2) {
    final int keyCount=keys[i];
    final int keyCode=keys[i + 1];
    for (int j=0; j < keyCount; j++) {
      try {
        instrumentation.sendKeyDownUpSync(keyCode);
      }
 catch (      SecurityException e) {
      }
    }
  }
  instrumentation.waitForIdleSync();
}"
24121,"TimeStats(Parcel in){
  final int[] localTimes=times;
  for (int i=0; i < NUM_LAUNCH_TIME_BINS; i++) {
    localTimes[i]=in.readInt();
  }
}","TimeStats(Parcel in){
  count=in.readInt();
  final int[] localTimes=times;
  for (int i=0; i < NUM_LAUNCH_TIME_BINS; i++) {
    localTimes[i]=in.readInt();
  }
}"
24122,"public void noteResumeComponent(ComponentName componentName){
  enforceCallingPermission();
  String pkgName;
  if ((componentName == null) || ((pkgName=componentName.getPackageName()) == null)) {
    return;
  }
  if ((mResumedPkg != null) && (mResumedPkg.equalsIgnoreCase(pkgName))) {
    return;
  }
  if (localLOGV)   Log.i(TAG,""String_Node_Str"" + pkgName);
synchronized (mStatsLock) {
    PkgUsageStatsExtended pus=mStats.get(pkgName);
    if (pus == null) {
      pus=new PkgUsageStatsExtended();
      mStats.put(pkgName,pus);
    }
    pus.updateResume();
  }
  mResumedPkg=pkgName;
}","public void noteResumeComponent(ComponentName componentName){
  enforceCallingPermission();
  String pkgName;
synchronized (mStatsLock) {
    if ((componentName == null) || ((pkgName=componentName.getPackageName()) == null)) {
      return;
    }
    final boolean samePackage=pkgName.equals(mLastResumedPkg);
    if (mIsResumed) {
      if (samePackage) {
        Log.w(TAG,""String_Node_Str"" + pkgName + ""String_Node_Str"");
        return;
      }
      if (mLastResumedPkg != null) {
        Log.w(TAG,""String_Node_Str"" + pkgName + ""String_Node_Str""+ mLastResumedPkg);
        PkgUsageStatsExtended pus=mStats.get(mLastResumedPkg);
        if (pus != null) {
          pus.updatePause();
        }
      }
    }
    final boolean sameComp=samePackage && componentName.getClassName().equals(mLastResumedComp);
    mIsResumed=true;
    mLastResumedPkg=pkgName;
    mLastResumedComp=componentName.getClassName();
    if (localLOGV)     Log.i(TAG,""String_Node_Str"" + pkgName);
    PkgUsageStatsExtended pus=mStats.get(pkgName);
    if (pus == null) {
      pus=new PkgUsageStatsExtended();
      mStats.put(pkgName,pus);
    }
    pus.updateResume(!samePackage);
    if (!sameComp) {
      pus.addLaunchCount(mLastResumedComp);
    }
  }
}"
24123,"private void collectDumpInfoFromParcelFLOCK(Parcel in,PrintWriter pw,String date,boolean isCompactOutput){
  StringBuilder sb=new StringBuilder(512);
  if (isCompactOutput) {
    sb.append(""String_Node_Str"");
    sb.append(CHECKIN_VERSION);
    sb.append(',');
  }
 else {
    sb.append(""String_Node_Str"");
  }
  sb.append(date);
  int vers=in.readInt();
  if (vers != VERSION) {
    sb.append(""String_Node_Str"");
    pw.println(sb.toString());
    return;
  }
  pw.println(sb.toString());
  int N=in.readInt();
  while (N > 0) {
    N--;
    String pkgName=in.readString();
    if (pkgName == null) {
      break;
    }
    sb.setLength(0);
    PkgUsageStatsExtended pus=new PkgUsageStatsExtended(in);
    if (isCompactOutput) {
      sb.append(""String_Node_Str"");
      sb.append(pkgName);
      sb.append(""String_Node_Str"");
      sb.append(pus.mLaunchCount);
      sb.append(""String_Node_Str"");
      sb.append(pus.mUsageTime);
      sb.append('\n');
      final int NC=pus.mLaunchTimes.size();
      if (NC > 0) {
        for (        Map.Entry<String,TimeStats> ent : pus.mLaunchTimes.entrySet()) {
          sb.append(""String_Node_Str"");
          sb.append(ent.getKey());
          TimeStats times=ent.getValue();
          for (int i=0; i < NUM_LAUNCH_TIME_BINS; i++) {
            sb.append(""String_Node_Str"");
            sb.append(times.times[i]);
          }
          sb.append('\n');
        }
      }
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(pkgName);
      sb.append(""String_Node_Str"");
      sb.append(pus.mLaunchCount);
      sb.append(""String_Node_Str"");
      sb.append(pus.mUsageTime);
      sb.append(""String_Node_Str"");
      sb.append('\n');
      final int NC=pus.mLaunchTimes.size();
      if (NC > 0) {
        for (        Map.Entry<String,TimeStats> ent : pus.mLaunchTimes.entrySet()) {
          sb.append(""String_Node_Str"");
          sb.append(ent.getKey());
          TimeStats times=ent.getValue();
          int lastBin=0;
          boolean first=true;
          for (int i=0; i < NUM_LAUNCH_TIME_BINS - 1; i++) {
            if (times.times[i] != 0) {
              sb.append(first ? ""String_Node_Str"" : ""String_Node_Str"");
              sb.append(lastBin);
              sb.append('-');
              sb.append(LAUNCH_TIME_BINS[i]);
              sb.append('=');
              sb.append(times.times[i]);
              first=false;
            }
            lastBin=LAUNCH_TIME_BINS[i];
          }
          if (times.times[NUM_LAUNCH_TIME_BINS - 1] != 0) {
            sb.append(first ? ""String_Node_Str"" : ""String_Node_Str"");
            sb.append(""String_Node_Str"");
            sb.append(lastBin);
            sb.append('=');
            sb.append(times.times[NUM_LAUNCH_TIME_BINS - 1]);
          }
          sb.append('\n');
        }
      }
    }
    pw.write(sb.toString());
  }
}","private void collectDumpInfoFromParcelFLOCK(Parcel in,PrintWriter pw,String date,boolean isCompactOutput){
  StringBuilder sb=new StringBuilder(512);
  if (isCompactOutput) {
    sb.append(""String_Node_Str"");
    sb.append(CHECKIN_VERSION);
    sb.append(',');
  }
 else {
    sb.append(""String_Node_Str"");
  }
  sb.append(date);
  int vers=in.readInt();
  if (vers != VERSION) {
    sb.append(""String_Node_Str"");
    pw.println(sb.toString());
    return;
  }
  pw.println(sb.toString());
  int N=in.readInt();
  while (N > 0) {
    N--;
    String pkgName=in.readString();
    if (pkgName == null) {
      break;
    }
    sb.setLength(0);
    PkgUsageStatsExtended pus=new PkgUsageStatsExtended(in);
    if (isCompactOutput) {
      sb.append(""String_Node_Str"");
      sb.append(pkgName);
      sb.append(',');
      sb.append(pus.mLaunchCount);
      sb.append(',');
      sb.append(pus.mUsageTime);
      sb.append('\n');
      final int NC=pus.mLaunchTimes.size();
      if (NC > 0) {
        for (        Map.Entry<String,TimeStats> ent : pus.mLaunchTimes.entrySet()) {
          sb.append(""String_Node_Str"");
          sb.append(ent.getKey());
          TimeStats times=ent.getValue();
          sb.append(',');
          sb.append(times.count);
          for (int i=0; i < NUM_LAUNCH_TIME_BINS; i++) {
            sb.append(""String_Node_Str"");
            sb.append(times.times[i]);
          }
          sb.append('\n');
        }
      }
    }
 else {
      sb.append(""String_Node_Str"");
      sb.append(pkgName);
      sb.append(""String_Node_Str"");
      sb.append(pus.mLaunchCount);
      sb.append(""String_Node_Str"");
      sb.append(pus.mUsageTime);
      sb.append(""String_Node_Str"");
      sb.append('\n');
      final int NC=pus.mLaunchTimes.size();
      if (NC > 0) {
        for (        Map.Entry<String,TimeStats> ent : pus.mLaunchTimes.entrySet()) {
          sb.append(""String_Node_Str"");
          sb.append(ent.getKey());
          TimeStats times=ent.getValue();
          sb.append(""String_Node_Str"");
          sb.append(times.count);
          sb.append(""String_Node_Str"");
          int lastBin=0;
          for (int i=0; i < NUM_LAUNCH_TIME_BINS - 1; i++) {
            if (times.times[i] != 0) {
              sb.append(""String_Node_Str"");
              sb.append(lastBin);
              sb.append('-');
              sb.append(LAUNCH_TIME_BINS[i]);
              sb.append(""String_Node_Str"");
              sb.append(times.times[i]);
            }
            lastBin=LAUNCH_TIME_BINS[i];
          }
          if (times.times[NUM_LAUNCH_TIME_BINS - 1] != 0) {
            sb.append(""String_Node_Str"");
            sb.append(""String_Node_Str"");
            sb.append(lastBin);
            sb.append(""String_Node_Str"");
            sb.append(times.times[NUM_LAUNCH_TIME_BINS - 1]);
          }
          sb.append('\n');
        }
      }
    }
    pw.write(sb.toString());
  }
}"
24124,"public void notePauseComponent(ComponentName componentName){
  enforceCallingPermission();
  String pkgName;
  if ((componentName == null) || ((pkgName=componentName.getPackageName()) == null)) {
    return;
  }
  if ((mResumedPkg == null) || (!pkgName.equalsIgnoreCase(mResumedPkg))) {
    Log.w(TAG,""String_Node_Str"" + pkgName + ""String_Node_Str"");
    return;
  }
  if (localLOGV)   Log.i(TAG,""String_Node_Str"" + pkgName);
  writeStatsToFile(false);
synchronized (mStatsLock) {
    PkgUsageStatsExtended pus=mStats.get(pkgName);
    if (pus == null) {
      Log.w(TAG,""String_Node_Str"" + pkgName);
      return;
    }
    pus.updatePause();
  }
}","public void notePauseComponent(ComponentName componentName){
  enforceCallingPermission();
synchronized (mStatsLock) {
    String pkgName;
    if ((componentName == null) || ((pkgName=componentName.getPackageName()) == null)) {
      return;
    }
    if (!mIsResumed) {
      Log.w(TAG,""String_Node_Str"" + pkgName + ""String_Node_Str"");
      return;
    }
    mIsResumed=false;
    if (localLOGV)     Log.i(TAG,""String_Node_Str"" + pkgName);
    PkgUsageStatsExtended pus=mStats.get(pkgName);
    if (pus == null) {
      Log.w(TAG,""String_Node_Str"" + pkgName);
      return;
    }
    pus.updatePause();
  }
  writeStatsToFile(false);
}"
24125,"void updateResume(){
  mLaunchCount++;
  mResumedTime=SystemClock.elapsedRealtime();
}","void updateResume(boolean launched){
  if (launched) {
    mLaunchCount++;
  }
  mResumedTime=SystemClock.elapsedRealtime();
}"
24126,"/** 
 * @see AudioManager#setRouting(int,int,int) 
 */
public void setRouting(int mode,int routes,int mask){
  int incallMask=0;
  int ringtoneMask=0;
  int normalMask=0;
  if (!checkAudioSettingsPermission(""String_Node_Str"")) {
    return;
  }
synchronized (mSettingsLock) {
    if (mode == AudioSystem.MODE_INVALID) {
switch (mask) {
case AudioSystem.ROUTE_SPEAKER:
        if (routes != 0 && !mSpeakerIsOn) {
          mSpeakerIsOn=true;
          mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_SPEAKER;
          incallMask=AudioSystem.ROUTE_ALL;
        }
 else         if (mSpeakerIsOn) {
          mSpeakerIsOn=false;
          if (mBluetoothScoIsConnected) {
            mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_BLUETOOTH_SCO;
          }
 else           if (mHeadsetIsConnected) {
            mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_HEADSET;
          }
 else {
            mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_EARPIECE;
          }
          incallMask=AudioSystem.ROUTE_ALL;
        }
      break;
case AudioSystem.ROUTE_BLUETOOTH_SCO:
    if (routes != 0 && !mBluetoothScoIsConnected) {
      mBluetoothScoIsConnected=true;
      mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_BLUETOOTH_SCO;
      mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_BLUETOOTH_SCO;
      mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_BLUETOOTH_SCO;
      incallMask=AudioSystem.ROUTE_ALL;
      ringtoneMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
      normalMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
    }
 else     if (mBluetoothScoIsConnected) {
      mBluetoothScoIsConnected=false;
      if (mHeadsetIsConnected) {
        mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_HEADSET;
        mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | (AudioSystem.ROUTE_HEADSET | AudioSystem.ROUTE_SPEAKER);
        mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_HEADSET;
      }
 else {
        if (mSpeakerIsOn) {
          mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_SPEAKER;
        }
 else {
          mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_EARPIECE;
        }
        mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_SPEAKER;
        mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_SPEAKER;
      }
      incallMask=AudioSystem.ROUTE_ALL;
      ringtoneMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
      normalMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
    }
  break;
case AudioSystem.ROUTE_HEADSET:
if (routes != 0 && !mHeadsetIsConnected) {
  mHeadsetIsConnected=true;
  if (!mBluetoothScoIsConnected) {
    mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_HEADSET;
    mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | (AudioSystem.ROUTE_HEADSET | AudioSystem.ROUTE_SPEAKER);
    mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_HEADSET;
    incallMask=AudioSystem.ROUTE_ALL;
    ringtoneMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
    normalMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
  }
}
 else if (mHeadsetIsConnected) {
  mHeadsetIsConnected=false;
  if (!mBluetoothScoIsConnected) {
    if (mSpeakerIsOn) {
      mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_SPEAKER;
    }
 else {
      mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_EARPIECE;
    }
    mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_SPEAKER;
    mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_SPEAKER;
    incallMask=AudioSystem.ROUTE_ALL;
    ringtoneMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
    normalMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
  }
}
break;
case AudioSystem.ROUTE_BLUETOOTH_A2DP:
if (routes != 0 && !mBluetoothA2dpIsConnected) {
mBluetoothA2dpIsConnected=true;
mRoutes[AudioSystem.MODE_RINGTONE]|=AudioSystem.ROUTE_BLUETOOTH_A2DP;
mRoutes[AudioSystem.MODE_NORMAL]|=AudioSystem.ROUTE_BLUETOOTH_A2DP;
ringtoneMask=AudioSystem.ROUTE_BLUETOOTH_A2DP;
normalMask=AudioSystem.ROUTE_BLUETOOTH_A2DP;
}
 else if (mBluetoothA2dpIsConnected) {
mBluetoothA2dpIsConnected=false;
mRoutes[AudioSystem.MODE_RINGTONE]&=~AudioSystem.ROUTE_BLUETOOTH_A2DP;
mRoutes[AudioSystem.MODE_NORMAL]&=~AudioSystem.ROUTE_BLUETOOTH_A2DP;
ringtoneMask=AudioSystem.ROUTE_BLUETOOTH_A2DP;
normalMask=AudioSystem.ROUTE_BLUETOOTH_A2DP;
}
break;
}
if (incallMask != 0) {
AudioSystem.setRouting(AudioSystem.MODE_IN_CALL,mRoutes[AudioSystem.MODE_IN_CALL],incallMask);
}
if (ringtoneMask != 0) {
AudioSystem.setRouting(AudioSystem.MODE_RINGTONE,mRoutes[AudioSystem.MODE_RINGTONE],ringtoneMask);
}
if (normalMask != 0) {
AudioSystem.setRouting(AudioSystem.MODE_NORMAL,mRoutes[AudioSystem.MODE_NORMAL],normalMask);
}
int streamType=getActiveStreamType(AudioManager.USE_DEFAULT_STREAM_TYPE);
int index=mStreamStates[streamType].mIndex;
syncRingerAndNotificationStreamVolume(streamType,index,true);
setStreamVolumeInt(streamType,index,true,true);
}
}
}","/** 
 * @see AudioManager#setRouting(int,int,int) 
 */
public void setRouting(int mode,int routes,int mask){
  int incallMask=0;
  int ringtoneMask=0;
  int normalMask=0;
  if (!checkAudioSettingsPermission(""String_Node_Str"")) {
    return;
  }
synchronized (mSettingsLock) {
    if (mode == AudioSystem.MODE_INVALID) {
switch (mask) {
case AudioSystem.ROUTE_SPEAKER:
        if (routes != 0 && !mSpeakerIsOn) {
          mSpeakerIsOn=true;
          mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_SPEAKER;
          incallMask=AudioSystem.ROUTE_ALL;
        }
 else         if (routes == 0 && mSpeakerIsOn) {
          mSpeakerIsOn=false;
          if (mBluetoothScoIsConnected) {
            mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_BLUETOOTH_SCO;
          }
 else           if (mHeadsetIsConnected) {
            mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_HEADSET;
          }
 else {
            mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_EARPIECE;
          }
          incallMask=AudioSystem.ROUTE_ALL;
        }
      break;
case AudioSystem.ROUTE_BLUETOOTH_SCO:
    if (routes != 0 && !mBluetoothScoIsConnected) {
      mBluetoothScoIsConnected=true;
      mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_BLUETOOTH_SCO;
      mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_BLUETOOTH_SCO;
      mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_BLUETOOTH_SCO;
      incallMask=AudioSystem.ROUTE_ALL;
      ringtoneMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
      normalMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
    }
 else     if (routes == 0 && mBluetoothScoIsConnected) {
      mBluetoothScoIsConnected=false;
      if (mHeadsetIsConnected) {
        mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_HEADSET;
        mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | (AudioSystem.ROUTE_HEADSET | AudioSystem.ROUTE_SPEAKER);
        mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_HEADSET;
      }
 else {
        if (mSpeakerIsOn) {
          mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_SPEAKER;
        }
 else {
          mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_EARPIECE;
        }
        mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_SPEAKER;
        mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_SPEAKER;
      }
      incallMask=AudioSystem.ROUTE_ALL;
      ringtoneMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
      normalMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
    }
  break;
case AudioSystem.ROUTE_HEADSET:
if (routes != 0 && !mHeadsetIsConnected) {
  mHeadsetIsConnected=true;
  if (!mBluetoothScoIsConnected) {
    mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_HEADSET;
    mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | (AudioSystem.ROUTE_HEADSET | AudioSystem.ROUTE_SPEAKER);
    mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_HEADSET;
    incallMask=AudioSystem.ROUTE_ALL;
    ringtoneMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
    normalMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
  }
}
 else if (routes == 0 && mHeadsetIsConnected) {
  mHeadsetIsConnected=false;
  if (!mBluetoothScoIsConnected) {
    if (mSpeakerIsOn) {
      mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_SPEAKER;
    }
 else {
      mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_EARPIECE;
    }
    mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_SPEAKER;
    mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_SPEAKER;
    incallMask=AudioSystem.ROUTE_ALL;
    ringtoneMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
    normalMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
  }
}
break;
case AudioSystem.ROUTE_BLUETOOTH_A2DP:
if (routes != 0 && !mBluetoothA2dpIsConnected) {
mBluetoothA2dpIsConnected=true;
mRoutes[AudioSystem.MODE_RINGTONE]|=AudioSystem.ROUTE_BLUETOOTH_A2DP;
mRoutes[AudioSystem.MODE_NORMAL]|=AudioSystem.ROUTE_BLUETOOTH_A2DP;
ringtoneMask=AudioSystem.ROUTE_BLUETOOTH_A2DP;
normalMask=AudioSystem.ROUTE_BLUETOOTH_A2DP;
}
 else if (routes == 0 && mBluetoothA2dpIsConnected) {
mBluetoothA2dpIsConnected=false;
mRoutes[AudioSystem.MODE_RINGTONE]&=~AudioSystem.ROUTE_BLUETOOTH_A2DP;
mRoutes[AudioSystem.MODE_NORMAL]&=~AudioSystem.ROUTE_BLUETOOTH_A2DP;
ringtoneMask=AudioSystem.ROUTE_BLUETOOTH_A2DP;
normalMask=AudioSystem.ROUTE_BLUETOOTH_A2DP;
}
break;
}
if (incallMask != 0) {
AudioSystem.setRouting(AudioSystem.MODE_IN_CALL,mRoutes[AudioSystem.MODE_IN_CALL],incallMask);
}
if (ringtoneMask != 0) {
AudioSystem.setRouting(AudioSystem.MODE_RINGTONE,mRoutes[AudioSystem.MODE_RINGTONE],ringtoneMask);
}
if (normalMask != 0) {
AudioSystem.setRouting(AudioSystem.MODE_NORMAL,mRoutes[AudioSystem.MODE_NORMAL],normalMask);
}
int streamType=getActiveStreamType(AudioManager.USE_DEFAULT_STREAM_TYPE);
int index=mStreamStates[streamType].mIndex;
syncRingerAndNotificationStreamVolume(streamType,index,true);
setStreamVolumeInt(streamType,index,true,true);
}
}
}"
24127,"/** 
 * If tearDown is true, this only tears down a CONNECTED session. Presently, there is no mechanism for abandoning an INITING/CONNECTING session, but would likely involve cancelling pending async requests or setting a flag or new state to ignore them when they came in
 * @param tearDown true if the underlying DataConnection should bedisconnected.
 * @param reason reason for the clean up.
 */
private void cleanUpConnection(boolean tearDown,String reason){
  if (DBG)   log(""String_Node_Str"" + reason);
  if (mReconnectIntent != null) {
    AlarmManager am=(AlarmManager)phone.getContext().getSystemService(Context.ALARM_SERVICE);
    am.cancel(mReconnectIntent);
    mReconnectIntent=null;
  }
  for (  DataConnection connBase : dataConnectionList) {
    CdmaDataConnection conn=(CdmaDataConnection)connBase;
    if (conn != null) {
      if (tearDown) {
        Message msg=obtainMessage(EVENT_DISCONNECT_DONE,reason);
        conn.disconnect(msg);
      }
 else {
        conn.clearSettings();
      }
    }
  }
  stopNetStatPoll();
  if (!tearDown) {
    setState(State.IDLE);
    phone.notifyDataConnection(reason);
  }
 else   if (state != State.IDLE) {
    setState(State.DISCONNECTING);
  }
}","/** 
 * If tearDown is true, this only tears down a CONNECTED session. Presently, there is no mechanism for abandoning an INITING/CONNECTING session, but would likely involve cancelling pending async requests or setting a flag or new state to ignore them when they came in
 * @param tearDown true if the underlying DataConnection should bedisconnected.
 * @param reason reason for the clean up.
 */
private void cleanUpConnection(boolean tearDown,String reason){
  if (DBG)   log(""String_Node_Str"" + reason);
  if (mReconnectIntent != null) {
    AlarmManager am=(AlarmManager)phone.getContext().getSystemService(Context.ALARM_SERVICE);
    am.cancel(mReconnectIntent);
    mReconnectIntent=null;
  }
  setState(State.DISCONNECTING);
  for (  DataConnection connBase : dataConnectionList) {
    CdmaDataConnection conn=(CdmaDataConnection)connBase;
    if (conn != null) {
      if (tearDown) {
        Message msg=obtainMessage(EVENT_DISCONNECT_DONE,reason);
        conn.disconnect(msg);
      }
 else {
        conn.clearSettings();
      }
    }
  }
  stopNetStatPoll();
  if (!tearDown) {
    setState(State.IDLE);
    phone.notifyDataConnection(reason);
  }
}"
24128,"/** 
 * @override com.android.internal.telephony.DataConnectionTracker
 */
protected void onVoiceCallEnded(){
  if (state == State.CONNECTED) {
    if (!mCdmaPhone.mSST.isConcurrentVoiceAndData()) {
      startNetStatPoll();
      phone.notifyDataConnection(Phone.REASON_VOICE_CALL_ENDED);
    }
 else {
      resetPollStats();
    }
  }
 else {
    trySetupData(Phone.REASON_VOICE_CALL_ENDED);
  }
}","/** 
 * @override com.android.internal.telephony.DataConnectionTracker
 */
protected void onVoiceCallEnded(){
  if (state == State.CONNECTED) {
    if (!mCdmaPhone.mSST.isConcurrentVoiceAndData()) {
      startNetStatPoll();
      phone.notifyDataConnection(Phone.REASON_VOICE_CALL_ENDED);
    }
 else {
      resetPollStats();
    }
  }
 else {
    nextReconnectDelay=RECONNECT_DELAY_INITIAL_MILLIS;
    trySetupData(Phone.REASON_VOICE_CALL_ENDED);
  }
}"
24129,"/** 
 * If tearDown is true, this only tears down a CONNECTED session. Presently, there is no mechanism for abandoning an INITING/CONNECTING session, but would likely involve cancelling pending async requests or setting a flag or new state to ignore them when they came in
 * @param tearDown true if the underlying PdpConnection should bedisconnected.
 * @param reason reason for the clean up.
 */
private void cleanUpConnection(boolean tearDown,String reason){
  if (DBG)   log(""String_Node_Str"" + reason);
  if (mReconnectIntent != null) {
    AlarmManager am=(AlarmManager)phone.getContext().getSystemService(Context.ALARM_SERVICE);
    am.cancel(mReconnectIntent);
    mReconnectIntent=null;
  }
  for (  DataConnection conn : pdpList) {
    PdpConnection pdp=(PdpConnection)conn;
    if (tearDown) {
      Message msg=obtainMessage(EVENT_DISCONNECT_DONE,reason);
      pdp.disconnect(msg);
    }
 else {
      pdp.clearSettings();
    }
  }
  stopNetStatPoll();
  if (!tearDown) {
    setState(State.IDLE);
    phone.notifyDataConnection(reason);
    mActiveApn=null;
  }
 else   if (state != State.IDLE) {
    setState(State.DISCONNECTING);
  }
}","/** 
 * If tearDown is true, this only tears down a CONNECTED session. Presently, there is no mechanism for abandoning an INITING/CONNECTING session, but would likely involve cancelling pending async requests or setting a flag or new state to ignore them when they came in
 * @param tearDown true if the underlying PdpConnection should bedisconnected.
 * @param reason reason for the clean up.
 */
private void cleanUpConnection(boolean tearDown,String reason){
  if (DBG)   log(""String_Node_Str"" + reason);
  if (mReconnectIntent != null) {
    AlarmManager am=(AlarmManager)phone.getContext().getSystemService(Context.ALARM_SERVICE);
    am.cancel(mReconnectIntent);
    mReconnectIntent=null;
  }
  setState(State.DISCONNECTING);
  for (  DataConnection conn : pdpList) {
    PdpConnection pdp=(PdpConnection)conn;
    if (tearDown) {
      Message msg=obtainMessage(EVENT_DISCONNECT_DONE,reason);
      pdp.disconnect(msg);
    }
 else {
      pdp.clearSettings();
    }
  }
  stopNetStatPoll();
  if (!tearDown) {
    setState(State.IDLE);
    phone.notifyDataConnection(reason);
    mActiveApn=null;
  }
}"
24130,"/** 
 * Handles changes to the APN database.
 */
private void onApnChanged(){
  boolean isConnected;
  isConnected=(state != State.IDLE && state != State.FAILED);
  ((GSMPhone)phone).updateCurrentCarrierInProvider();
  createAllApnList();
  if (state != State.DISCONNECTING) {
    cleanUpConnection(isConnected,Phone.REASON_APN_CHANGED);
    if (!isConnected) {
      trySetupData(Phone.REASON_APN_CHANGED);
    }
  }
}","/** 
 * Handles changes to the APN database.
 */
private void onApnChanged(){
  boolean isConnected;
  isConnected=(state != State.IDLE && state != State.FAILED);
  ((GSMPhone)phone).updateCurrentCarrierInProvider();
  createAllApnList();
  if (state != State.DISCONNECTING) {
    cleanUpConnection(isConnected,Phone.REASON_APN_CHANGED);
    if (!isConnected) {
      nextReconnectDelay=RECONNECT_DELAY_INITIAL_MILLIS;
      trySetupData(Phone.REASON_APN_CHANGED);
    }
  }
}"
24131,"protected void onVoiceCallEnded(){
  if (state == State.CONNECTED) {
    if (!((GSMPhone)phone).mSST.isConcurrentVoiceAndData()) {
      startNetStatPoll();
      phone.notifyDataConnection(Phone.REASON_VOICE_CALL_ENDED);
    }
 else {
      resetPollStats();
    }
  }
 else {
    trySetupData(Phone.REASON_VOICE_CALL_ENDED);
  }
}","protected void onVoiceCallEnded(){
  if (state == State.CONNECTED) {
    if (!((GSMPhone)phone).mSST.isConcurrentVoiceAndData()) {
      startNetStatPoll();
      phone.notifyDataConnection(Phone.REASON_VOICE_CALL_ENDED);
    }
 else {
      resetPollStats();
    }
  }
 else {
    nextReconnectDelay=RECONNECT_DELAY_INITIAL_MILLIS;
    trySetupData(Phone.REASON_VOICE_CALL_ENDED);
  }
}"
24132,"public final void finishSubActivity(IBinder token,String resultWho,int requestCode){
synchronized (this) {
    int index=indexOfTokenLocked(token,false);
    if (index < 0) {
      return;
    }
    HistoryRecord self=(HistoryRecord)mHistory.get(index);
    final long origId=Binder.clearCallingIdentity();
    int i;
    for (i=mHistory.size() - 1; i >= 0; i--) {
      HistoryRecord r=(HistoryRecord)mHistory.get(i);
      if (r.resultTo == self && r.requestCode == requestCode) {
        if ((r.resultWho == null && resultWho == null) || (r.resultWho != null && r.resultWho.equals(resultWho))) {
          finishActivityLocked(r,i,Activity.RESULT_CANCELED,null,""String_Node_Str"");
        }
      }
    }
    Binder.restoreCallingIdentity(origId);
  }
}","public final void finishSubActivity(IBinder token,String resultWho,int requestCode){
synchronized (this) {
    int index=indexOfTokenLocked(token);
    if (index < 0) {
      return;
    }
    HistoryRecord self=(HistoryRecord)mHistory.get(index);
    final long origId=Binder.clearCallingIdentity();
    int i;
    for (i=mHistory.size() - 1; i >= 0; i--) {
      HistoryRecord r=(HistoryRecord)mHistory.get(i);
      if (r.resultTo == self && r.requestCode == requestCode) {
        if ((r.resultWho == null && resultWho == null) || (r.resultWho != null && r.resultWho.equals(resultWho))) {
          finishActivityLocked(r,i,Activity.RESULT_CANCELED,null,""String_Node_Str"");
        }
      }
    }
    Binder.restoreCallingIdentity(origId);
  }
}"
24133,"public void setPersistent(IBinder token,boolean isPersistent){
  if (checkCallingPermission(android.Manifest.permission.PERSISTENT_ACTIVITY) != PackageManager.PERMISSION_GRANTED) {
    String msg=""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ android.Manifest.permission.PERSISTENT_ACTIVITY;
    Log.w(TAG,msg);
    throw new SecurityException(msg);
  }
synchronized (this) {
    int index=indexOfTokenLocked(token,true);
    if (index < 0) {
      return;
    }
    HistoryRecord r=(HistoryRecord)mHistory.get(index);
    ProcessRecord app=r.app;
    if (localLOGV)     Log.v(TAG,""String_Node_Str"" + isPersistent + ""String_Node_Str""+ r);
    if (isPersistent) {
      if (r.persistent) {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"");
        return;
      }
      r.persistent=true;
      app.persistentActivities++;
      if (localLOGV)       Log.v(TAG,""String_Node_Str"" + app.persistentActivities);
      if (app.persistentActivities > 1) {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"");
        return;
      }
      if (app.persistent) {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"");
        return;
      }
      final long origId=Binder.clearCallingIdentity();
      updateOomAdjLocked();
      Binder.restoreCallingIdentity(origId);
    }
 else {
      if (!r.persistent) {
        return;
      }
      r.persistent=false;
      final long origId=Binder.clearCallingIdentity();
      decPersistentCountLocked(app);
      Binder.restoreCallingIdentity(origId);
    }
  }
}","public void setPersistent(IBinder token,boolean isPersistent){
  if (checkCallingPermission(android.Manifest.permission.PERSISTENT_ACTIVITY) != PackageManager.PERMISSION_GRANTED) {
    String msg=""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ android.Manifest.permission.PERSISTENT_ACTIVITY;
    Log.w(TAG,msg);
    throw new SecurityException(msg);
  }
synchronized (this) {
    int index=indexOfTokenLocked(token);
    if (index < 0) {
      return;
    }
    HistoryRecord r=(HistoryRecord)mHistory.get(index);
    ProcessRecord app=r.app;
    if (localLOGV)     Log.v(TAG,""String_Node_Str"" + isPersistent + ""String_Node_Str""+ r);
    if (isPersistent) {
      if (r.persistent) {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"");
        return;
      }
      r.persistent=true;
      app.persistentActivities++;
      if (localLOGV)       Log.v(TAG,""String_Node_Str"" + app.persistentActivities);
      if (app.persistentActivities > 1) {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"");
        return;
      }
      if (app.persistent) {
        if (localLOGV)         Log.v(TAG,""String_Node_Str"");
        return;
      }
      final long origId=Binder.clearCallingIdentity();
      updateOomAdjLocked();
      Binder.restoreCallingIdentity(origId);
    }
 else {
      if (!r.persistent) {
        return;
      }
      r.persistent=false;
      final long origId=Binder.clearCallingIdentity();
      decPersistentCountLocked(app);
      Binder.restoreCallingIdentity(origId);
    }
  }
}"
24134,"public final void activityDestroyed(IBinder token){
  if (DEBUG_SWITCH)   Log.v(TAG,""String_Node_Str"" + token);
synchronized (this) {
    mHandler.removeMessages(DESTROY_TIMEOUT_MSG,token);
    int index=indexOfTokenLocked(token,false);
    if (index >= 0) {
      HistoryRecord r=(HistoryRecord)mHistory.get(index);
      if (r.state == ActivityState.DESTROYING) {
        final long origId=Binder.clearCallingIdentity();
        removeActivityFromHistoryLocked(r);
        Binder.restoreCallingIdentity(origId);
      }
    }
  }
}","public final void activityDestroyed(IBinder token){
  if (DEBUG_SWITCH)   Log.v(TAG,""String_Node_Str"" + token);
synchronized (this) {
    mHandler.removeMessages(DESTROY_TIMEOUT_MSG,token);
    int index=indexOfTokenLocked(token);
    if (index >= 0) {
      HistoryRecord r=(HistoryRecord)mHistory.get(index);
      if (r.state == ActivityState.DESTROYING) {
        final long origId=Binder.clearCallingIdentity();
        removeActivityFromHistoryLocked(r);
        Binder.restoreCallingIdentity(origId);
      }
    }
  }
}"
24135,"/** 
 * Perform clear operation as requested by  {@link Intent#FLAG_ACTIVITY_CLEAR_TOP}: search from the top of the stack to the given task, then look for an instance of that activity in the stack and, if found, finish all activities on top of it and return the instance.
 * @param newR Description of the new activity being started.
 * @return Returns the old activity that should be continue to be used,or null if none was found.
 */
private final HistoryRecord performClearTaskLocked(int taskId,HistoryRecord newR,boolean doClear){
  int i=mHistory.size();
  while (i > 0) {
    i--;
    HistoryRecord r=(HistoryRecord)mHistory.get(i);
    if (r.task.taskId == taskId) {
      i++;
      break;
    }
  }
  while (i > 0) {
    i--;
    HistoryRecord r=(HistoryRecord)mHistory.get(i);
    if (r.finishing) {
      continue;
    }
    if (r.task.taskId != taskId) {
      return null;
    }
    if (r.realActivity.equals(newR.realActivity)) {
      HistoryRecord ret=r;
      if (doClear) {
        while (i < (mHistory.size() - 1)) {
          i++;
          r=(HistoryRecord)mHistory.get(i);
          if (r.finishing) {
            continue;
          }
          if (finishActivityLocked(r,i,Activity.RESULT_CANCELED,null,""String_Node_Str"")) {
            i--;
          }
        }
      }
      if (ret.launchMode == ActivityInfo.LAUNCH_MULTIPLE) {
        if (!ret.finishing) {
          int index=indexOfTokenLocked(ret,false);
          if (index >= 0) {
            finishActivityLocked(ret,0,Activity.RESULT_CANCELED,null,""String_Node_Str"");
          }
          return null;
        }
      }
      return ret;
    }
  }
  return null;
}","/** 
 * Perform clear operation as requested by  {@link Intent#FLAG_ACTIVITY_CLEAR_TOP}: search from the top of the stack to the given task, then look for an instance of that activity in the stack and, if found, finish all activities on top of it and return the instance.
 * @param newR Description of the new activity being started.
 * @return Returns the old activity that should be continue to be used,or null if none was found.
 */
private final HistoryRecord performClearTaskLocked(int taskId,HistoryRecord newR,boolean doClear){
  int i=mHistory.size();
  while (i > 0) {
    i--;
    HistoryRecord r=(HistoryRecord)mHistory.get(i);
    if (r.task.taskId == taskId) {
      i++;
      break;
    }
  }
  while (i > 0) {
    i--;
    HistoryRecord r=(HistoryRecord)mHistory.get(i);
    if (r.finishing) {
      continue;
    }
    if (r.task.taskId != taskId) {
      return null;
    }
    if (r.realActivity.equals(newR.realActivity)) {
      HistoryRecord ret=r;
      if (doClear) {
        while (i < (mHistory.size() - 1)) {
          i++;
          r=(HistoryRecord)mHistory.get(i);
          if (r.finishing) {
            continue;
          }
          if (finishActivityLocked(r,i,Activity.RESULT_CANCELED,null,""String_Node_Str"")) {
            i--;
          }
        }
      }
      if (ret.launchMode == ActivityInfo.LAUNCH_MULTIPLE) {
        if (!ret.finishing) {
          int index=indexOfTokenLocked(ret);
          if (index >= 0) {
            finishActivityLocked(ret,0,Activity.RESULT_CANCELED,null,""String_Node_Str"");
          }
          return null;
        }
      }
      return ret;
    }
  }
  return null;
}"
24136,"private final int startActivityLocked(IApplicationThread caller,Intent intent,String resolvedType,Uri[] grantedUriPermissions,int grantedMode,ActivityInfo aInfo,IBinder resultTo,String resultWho,int requestCode,int callingPid,int callingUid,boolean onlyIfNeeded,boolean componentSpecified){
  Log.i(TAG,""String_Node_Str"" + intent);
  HistoryRecord sourceRecord=null;
  HistoryRecord resultRecord=null;
  if (resultTo != null) {
    int index=indexOfTokenLocked(resultTo,false);
    if (DEBUG_RESULTS)     Log.v(TAG,""String_Node_Str"" + resultTo + ""String_Node_Str""+ index+ ""String_Node_Str"");
    if (index >= 0) {
      sourceRecord=(HistoryRecord)mHistory.get(index);
      if (requestCode >= 0 && !sourceRecord.finishing) {
        resultRecord=sourceRecord;
      }
    }
  }
  int launchFlags=intent.getFlags();
  if ((launchFlags & Intent.FLAG_ACTIVITY_FORWARD_RESULT) != 0 && sourceRecord != null) {
    if (requestCode >= 0) {
      return START_FORWARD_AND_REQUEST_CONFLICT;
    }
    resultRecord=sourceRecord.resultTo;
    resultWho=sourceRecord.resultWho;
    requestCode=sourceRecord.requestCode;
    sourceRecord.resultTo=null;
    if (resultRecord != null) {
      resultRecord.removeResultsLocked(sourceRecord,resultWho,requestCode);
    }
  }
  int err=START_SUCCESS;
  if (intent.getComponent() == null) {
    err=START_INTENT_NOT_RESOLVED;
  }
  if (err == START_SUCCESS && aInfo == null) {
    err=START_CLASS_NOT_FOUND;
  }
  ProcessRecord callerApp=null;
  if (err == START_SUCCESS && caller != null) {
    callerApp=getRecordForAppLocked(caller);
    if (callerApp != null) {
      callingPid=callerApp.pid;
      callingUid=callerApp.info.uid;
    }
 else {
      Log.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ callingPid+ ""String_Node_Str""+ intent.toString());
      err=START_PERMISSION_DENIED;
    }
  }
  if (err != START_SUCCESS) {
    if (resultRecord != null) {
      sendActivityResultLocked(-1,resultRecord,resultWho,requestCode,Activity.RESULT_CANCELED,null);
    }
    return err;
  }
  final int perm=checkComponentPermission(aInfo.permission,callingPid,callingUid,aInfo.exported ? -1 : aInfo.applicationInfo.uid);
  if (perm != PackageManager.PERMISSION_GRANTED) {
    if (resultRecord != null) {
      sendActivityResultLocked(-1,resultRecord,resultWho,requestCode,Activity.RESULT_CANCELED,null);
    }
    String msg=""String_Node_Str"" + intent.toString() + ""String_Node_Str""+ callerApp+ ""String_Node_Str""+ callingPid+ ""String_Node_Str""+ callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ aInfo.permission;
    Log.w(TAG,msg);
    throw new SecurityException(msg);
  }
  if (mWatcher != null) {
    boolean abort=false;
    try {
      Intent watchIntent=intent.cloneFilter();
      abort=!mWatcher.activityStarting(watchIntent,aInfo.applicationInfo.packageName);
    }
 catch (    RemoteException e) {
      mWatcher=null;
    }
    if (abort) {
      if (resultRecord != null) {
        sendActivityResultLocked(-1,resultRecord,resultWho,requestCode,Activity.RESULT_CANCELED,null);
      }
      return START_SUCCESS;
    }
  }
  HistoryRecord r=new HistoryRecord(this,callerApp,callingUid,intent,resolvedType,aInfo,mConfiguration,resultRecord,resultWho,requestCode,componentSpecified);
  if (mResumedActivity == null || mResumedActivity.info.applicationInfo.uid != callingUid) {
    if (!checkAppSwitchAllowedLocked(callingPid,callingUid,""String_Node_Str"")) {
      PendingActivityLaunch pal=new PendingActivityLaunch();
      pal.r=r;
      pal.sourceRecord=sourceRecord;
      pal.grantedUriPermissions=grantedUriPermissions;
      pal.grantedMode=grantedMode;
      pal.onlyIfNeeded=onlyIfNeeded;
      mPendingActivityLaunches.add(pal);
      return START_SWITCHES_CANCELED;
    }
  }
  if (mDidAppSwitch) {
    mAppSwitchesAllowedTime=0;
  }
 else {
    mDidAppSwitch=true;
  }
  doPendingActivityLaunchesLocked(false);
  return startActivityUncheckedLocked(r,sourceRecord,grantedUriPermissions,grantedMode,onlyIfNeeded,true);
}","private final int startActivityLocked(IApplicationThread caller,Intent intent,String resolvedType,Uri[] grantedUriPermissions,int grantedMode,ActivityInfo aInfo,IBinder resultTo,String resultWho,int requestCode,int callingPid,int callingUid,boolean onlyIfNeeded,boolean componentSpecified){
  Log.i(TAG,""String_Node_Str"" + intent);
  HistoryRecord sourceRecord=null;
  HistoryRecord resultRecord=null;
  if (resultTo != null) {
    int index=indexOfTokenLocked(resultTo);
    if (DEBUG_RESULTS)     Log.v(TAG,""String_Node_Str"" + resultTo + ""String_Node_Str""+ index+ ""String_Node_Str"");
    if (index >= 0) {
      sourceRecord=(HistoryRecord)mHistory.get(index);
      if (requestCode >= 0 && !sourceRecord.finishing) {
        resultRecord=sourceRecord;
      }
    }
  }
  int launchFlags=intent.getFlags();
  if ((launchFlags & Intent.FLAG_ACTIVITY_FORWARD_RESULT) != 0 && sourceRecord != null) {
    if (requestCode >= 0) {
      return START_FORWARD_AND_REQUEST_CONFLICT;
    }
    resultRecord=sourceRecord.resultTo;
    resultWho=sourceRecord.resultWho;
    requestCode=sourceRecord.requestCode;
    sourceRecord.resultTo=null;
    if (resultRecord != null) {
      resultRecord.removeResultsLocked(sourceRecord,resultWho,requestCode);
    }
  }
  int err=START_SUCCESS;
  if (intent.getComponent() == null) {
    err=START_INTENT_NOT_RESOLVED;
  }
  if (err == START_SUCCESS && aInfo == null) {
    err=START_CLASS_NOT_FOUND;
  }
  ProcessRecord callerApp=null;
  if (err == START_SUCCESS && caller != null) {
    callerApp=getRecordForAppLocked(caller);
    if (callerApp != null) {
      callingPid=callerApp.pid;
      callingUid=callerApp.info.uid;
    }
 else {
      Log.w(TAG,""String_Node_Str"" + caller + ""String_Node_Str""+ callingPid+ ""String_Node_Str""+ intent.toString());
      err=START_PERMISSION_DENIED;
    }
  }
  if (err != START_SUCCESS) {
    if (resultRecord != null) {
      sendActivityResultLocked(-1,resultRecord,resultWho,requestCode,Activity.RESULT_CANCELED,null);
    }
    return err;
  }
  final int perm=checkComponentPermission(aInfo.permission,callingPid,callingUid,aInfo.exported ? -1 : aInfo.applicationInfo.uid);
  if (perm != PackageManager.PERMISSION_GRANTED) {
    if (resultRecord != null) {
      sendActivityResultLocked(-1,resultRecord,resultWho,requestCode,Activity.RESULT_CANCELED,null);
    }
    String msg=""String_Node_Str"" + intent.toString() + ""String_Node_Str""+ callerApp+ ""String_Node_Str""+ callingPid+ ""String_Node_Str""+ callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ aInfo.permission;
    Log.w(TAG,msg);
    throw new SecurityException(msg);
  }
  if (mWatcher != null) {
    boolean abort=false;
    try {
      Intent watchIntent=intent.cloneFilter();
      abort=!mWatcher.activityStarting(watchIntent,aInfo.applicationInfo.packageName);
    }
 catch (    RemoteException e) {
      mWatcher=null;
    }
    if (abort) {
      if (resultRecord != null) {
        sendActivityResultLocked(-1,resultRecord,resultWho,requestCode,Activity.RESULT_CANCELED,null);
      }
      return START_SUCCESS;
    }
  }
  HistoryRecord r=new HistoryRecord(this,callerApp,callingUid,intent,resolvedType,aInfo,mConfiguration,resultRecord,resultWho,requestCode,componentSpecified);
  if (mResumedActivity == null || mResumedActivity.info.applicationInfo.uid != callingUid) {
    if (!checkAppSwitchAllowedLocked(callingPid,callingUid,""String_Node_Str"")) {
      PendingActivityLaunch pal=new PendingActivityLaunch();
      pal.r=r;
      pal.sourceRecord=sourceRecord;
      pal.grantedUriPermissions=grantedUriPermissions;
      pal.grantedMode=grantedMode;
      pal.onlyIfNeeded=onlyIfNeeded;
      mPendingActivityLaunches.add(pal);
      return START_SWITCHES_CANCELED;
    }
  }
  if (mDidAppSwitch) {
    mAppSwitchesAllowedTime=0;
  }
 else {
    mDidAppSwitch=true;
  }
  doPendingActivityLaunchesLocked(false);
  return startActivityUncheckedLocked(r,sourceRecord,grantedUriPermissions,grantedMode,onlyIfNeeded,true);
}"
24137,"private final int indexOfTokenLocked(IBinder token,boolean required){
  int count=mHistory.size();
  HistoryRecord r=null;
  int index=-1;
  for (int i=count - 1; i >= 0; i--) {
    Object o=mHistory.get(i);
    if (o == token) {
      r=(HistoryRecord)o;
      index=i;
      break;
    }
  }
  if (index < 0 && required) {
    RuntimeInit.crash(TAG,new InvalidTokenException(token));
  }
  return index;
}","private final int indexOfTokenLocked(IBinder token){
  int count=mHistory.size();
  HistoryRecord r=null;
  int index=-1;
  for (int i=count - 1; i >= 0; i--) {
    Object o=mHistory.get(i);
    if (o == token) {
      r=(HistoryRecord)o;
      index=i;
      break;
    }
  }
  return index;
}"
24138,"public int getRequestedOrientation(IBinder token){
synchronized (this) {
    int index=indexOfTokenLocked(token,false);
    if (index < 0) {
      return ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;
    }
    HistoryRecord r=(HistoryRecord)mHistory.get(index);
    return mWindowManager.getAppOrientation(r);
  }
}","public int getRequestedOrientation(IBinder token){
synchronized (this) {
    int index=indexOfTokenLocked(token);
    if (index < 0) {
      return ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED;
    }
    HistoryRecord r=(HistoryRecord)mHistory.get(index);
    return mWindowManager.getAppOrientation(r);
  }
}"
24139,"public final void activityStopped(IBinder token,Bitmap thumbnail,CharSequence description){
  if (localLOGV)   Log.v(TAG,""String_Node_Str"" + token);
  HistoryRecord r=null;
  final long origId=Binder.clearCallingIdentity();
synchronized (this) {
    int index=indexOfTokenLocked(token,false);
    if (index >= 0) {
      r=(HistoryRecord)mHistory.get(index);
      r.thumbnail=thumbnail;
      r.description=description;
      r.stopped=true;
      r.state=ActivityState.STOPPED;
      if (!r.finishing) {
        if (r.configDestroy) {
          destroyActivityLocked(r,true);
          resumeTopActivityLocked(null);
        }
      }
    }
  }
  if (r != null) {
    sendPendingThumbnail(r,null,null,null,false);
  }
  trimApplications();
  Binder.restoreCallingIdentity(origId);
}","public final void activityStopped(IBinder token,Bitmap thumbnail,CharSequence description){
  if (localLOGV)   Log.v(TAG,""String_Node_Str"" + token);
  HistoryRecord r=null;
  final long origId=Binder.clearCallingIdentity();
synchronized (this) {
    int index=indexOfTokenLocked(token);
    if (index >= 0) {
      r=(HistoryRecord)mHistory.get(index);
      r.thumbnail=thumbnail;
      r.description=description;
      r.stopped=true;
      r.state=ActivityState.STOPPED;
      if (!r.finishing) {
        if (r.configDestroy) {
          destroyActivityLocked(r,true);
          resumeTopActivityLocked(null);
        }
      }
    }
  }
  if (r != null) {
    sendPendingThumbnail(r,null,null,null,false);
  }
  trimApplications();
  Binder.restoreCallingIdentity(origId);
}"
24140,"public void setRequestedOrientation(IBinder token,int requestedOrientation){
synchronized (this) {
    int index=indexOfTokenLocked(token,false);
    if (index < 0) {
      return;
    }
    HistoryRecord r=(HistoryRecord)mHistory.get(index);
    final long origId=Binder.clearCallingIdentity();
    mWindowManager.setAppOrientation(r,requestedOrientation);
    Configuration config=mWindowManager.updateOrientationFromAppTokens(mConfiguration,r.mayFreezeScreenLocked(r.app) ? r : null);
    if (config != null) {
      r.frozenBeforeDestroy=true;
      if (!updateConfigurationLocked(config,r)) {
        resumeTopActivityLocked(null);
      }
    }
    Binder.restoreCallingIdentity(origId);
  }
}","public void setRequestedOrientation(IBinder token,int requestedOrientation){
synchronized (this) {
    int index=indexOfTokenLocked(token);
    if (index < 0) {
      return;
    }
    HistoryRecord r=(HistoryRecord)mHistory.get(index);
    final long origId=Binder.clearCallingIdentity();
    mWindowManager.setAppOrientation(r,requestedOrientation);
    Configuration config=mWindowManager.updateOrientationFromAppTokens(mConfiguration,r.mayFreezeScreenLocked(r.app) ? r : null);
    if (config != null) {
      r.frozenBeforeDestroy=true;
      if (!updateConfigurationLocked(config,r)) {
        resumeTopActivityLocked(null);
      }
    }
    Binder.restoreCallingIdentity(origId);
  }
}"
24141,"public ComponentName getActivityClassForToken(IBinder token){
synchronized (this) {
    int index=indexOfTokenLocked(token,false);
    if (index >= 0) {
      HistoryRecord r=(HistoryRecord)mHistory.get(index);
      return r.intent.getComponent();
    }
    return null;
  }
}","public ComponentName getActivityClassForToken(IBinder token){
synchronized (this) {
    int index=indexOfTokenLocked(token);
    if (index >= 0) {
      HistoryRecord r=(HistoryRecord)mHistory.get(index);
      return r.intent.getComponent();
    }
    return null;
  }
}"
24142,"final void activityIdleInternal(IBinder token,boolean fromTimeout){
  if (localLOGV)   Log.v(TAG,""String_Node_Str"" + token);
  ArrayList<HistoryRecord> stops=null;
  ArrayList<HistoryRecord> finishes=null;
  ArrayList<HistoryRecord> thumbnails=null;
  int NS=0;
  int NF=0;
  int NT=0;
  IApplicationThread sendThumbnail=null;
  boolean booting=false;
  boolean enableScreen=false;
synchronized (this) {
    if (token != null) {
      mHandler.removeMessages(IDLE_TIMEOUT_MSG,token);
    }
    int index=indexOfTokenLocked(token,false);
    if (index >= 0) {
      HistoryRecord r=(HistoryRecord)mHistory.get(index);
      if (mResumedActivity == r && mLaunchingActivity.isHeld()) {
        mHandler.removeMessages(LAUNCH_TIMEOUT_MSG);
        mLaunchingActivity.release();
      }
      r.idle=true;
      scheduleAppGcsLocked();
      if (r.thumbnailNeeded && r.app != null && r.app.thread != null) {
        sendThumbnail=r.app.thread;
        r.thumbnailNeeded=false;
      }
      if (DEBUG_VISBILITY)       Log.v(TAG,""String_Node_Str"" + r);
      ensureActivitiesVisibleLocked(null,0);
      if (!mBooted && !fromTimeout) {
        mBooted=true;
        enableScreen=true;
      }
    }
    stops=processStoppingActivitiesLocked(true);
    NS=stops != null ? stops.size() : 0;
    if ((NF=mFinishingActivities.size()) > 0) {
      finishes=new ArrayList<HistoryRecord>(mFinishingActivities);
      mFinishingActivities.clear();
    }
    if ((NT=mCancelledThumbnails.size()) > 0) {
      thumbnails=new ArrayList<HistoryRecord>(mCancelledThumbnails);
      mCancelledThumbnails.clear();
    }
    booting=mBooting;
    mBooting=false;
  }
  int i;
  if (sendThumbnail != null) {
    try {
      sendThumbnail.requestThumbnail(token);
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"",e);
      sendPendingThumbnail(null,token,null,null,true);
    }
  }
  for (i=0; i < NS; i++) {
    HistoryRecord r=(HistoryRecord)stops.get(i);
synchronized (this) {
      if (r.finishing) {
        finishCurrentActivityLocked(r,FINISH_IMMEDIATELY);
      }
 else {
        stopActivityLocked(r);
      }
    }
  }
  for (i=0; i < NF; i++) {
    HistoryRecord r=(HistoryRecord)finishes.get(i);
synchronized (this) {
      destroyActivityLocked(r,true);
    }
  }
  for (i=0; i < NT; i++) {
    HistoryRecord r=(HistoryRecord)thumbnails.get(i);
    sendPendingThumbnail(r,null,null,null,true);
  }
  if (booting) {
    final int NP=mProcessesOnHold.size();
    if (NP > 0) {
      ArrayList<ProcessRecord> procs=new ArrayList<ProcessRecord>(mProcessesOnHold);
      for (int ip=0; ip < NP; ip++) {
        this.startProcessLocked(procs.get(ip),""String_Node_Str"",null);
      }
    }
    if (mFactoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL) {
synchronized (this) {
        broadcastIntentLocked(null,null,new Intent(Intent.ACTION_BOOT_COMPLETED,null),null,null,0,null,null,android.Manifest.permission.RECEIVE_BOOT_COMPLETED,false,false,MY_PID,Process.SYSTEM_UID);
      }
    }
  }
  trimApplications();
  if (enableScreen) {
    EventLog.writeEvent(LOG_BOOT_PROGRESS_ENABLE_SCREEN,SystemClock.uptimeMillis());
    enableScreenAfterBoot();
  }
}","final void activityIdleInternal(IBinder token,boolean fromTimeout){
  if (localLOGV)   Log.v(TAG,""String_Node_Str"" + token);
  ArrayList<HistoryRecord> stops=null;
  ArrayList<HistoryRecord> finishes=null;
  ArrayList<HistoryRecord> thumbnails=null;
  int NS=0;
  int NF=0;
  int NT=0;
  IApplicationThread sendThumbnail=null;
  boolean booting=false;
  boolean enableScreen=false;
synchronized (this) {
    if (token != null) {
      mHandler.removeMessages(IDLE_TIMEOUT_MSG,token);
    }
    int index=indexOfTokenLocked(token);
    if (index >= 0) {
      HistoryRecord r=(HistoryRecord)mHistory.get(index);
      if (mResumedActivity == r && mLaunchingActivity.isHeld()) {
        mHandler.removeMessages(LAUNCH_TIMEOUT_MSG);
        mLaunchingActivity.release();
      }
      r.idle=true;
      scheduleAppGcsLocked();
      if (r.thumbnailNeeded && r.app != null && r.app.thread != null) {
        sendThumbnail=r.app.thread;
        r.thumbnailNeeded=false;
      }
      if (DEBUG_VISBILITY)       Log.v(TAG,""String_Node_Str"" + r);
      ensureActivitiesVisibleLocked(null,0);
      if (!mBooted && !fromTimeout) {
        mBooted=true;
        enableScreen=true;
      }
    }
    stops=processStoppingActivitiesLocked(true);
    NS=stops != null ? stops.size() : 0;
    if ((NF=mFinishingActivities.size()) > 0) {
      finishes=new ArrayList<HistoryRecord>(mFinishingActivities);
      mFinishingActivities.clear();
    }
    if ((NT=mCancelledThumbnails.size()) > 0) {
      thumbnails=new ArrayList<HistoryRecord>(mCancelledThumbnails);
      mCancelledThumbnails.clear();
    }
    booting=mBooting;
    mBooting=false;
  }
  int i;
  if (sendThumbnail != null) {
    try {
      sendThumbnail.requestThumbnail(token);
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"",e);
      sendPendingThumbnail(null,token,null,null,true);
    }
  }
  for (i=0; i < NS; i++) {
    HistoryRecord r=(HistoryRecord)stops.get(i);
synchronized (this) {
      if (r.finishing) {
        finishCurrentActivityLocked(r,FINISH_IMMEDIATELY);
      }
 else {
        stopActivityLocked(r);
      }
    }
  }
  for (i=0; i < NF; i++) {
    HistoryRecord r=(HistoryRecord)finishes.get(i);
synchronized (this) {
      destroyActivityLocked(r,true);
    }
  }
  for (i=0; i < NT; i++) {
    HistoryRecord r=(HistoryRecord)thumbnails.get(i);
    sendPendingThumbnail(r,null,null,null,true);
  }
  if (booting) {
    final int NP=mProcessesOnHold.size();
    if (NP > 0) {
      ArrayList<ProcessRecord> procs=new ArrayList<ProcessRecord>(mProcessesOnHold);
      for (int ip=0; ip < NP; ip++) {
        this.startProcessLocked(procs.get(ip),""String_Node_Str"",null);
      }
    }
    if (mFactoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL) {
synchronized (this) {
        broadcastIntentLocked(null,null,new Intent(Intent.ACTION_BOOT_COMPLETED,null),null,null,0,null,null,android.Manifest.permission.RECEIVE_BOOT_COMPLETED,false,false,MY_PID,Process.SYSTEM_UID);
      }
    }
  }
  trimApplications();
  if (enableScreen) {
    EventLog.writeEvent(LOG_BOOT_PROGRESS_ENABLE_SCREEN,SystemClock.uptimeMillis());
    enableScreenAfterBoot();
  }
}"
24143,"public int bindService(IApplicationThread caller,IBinder token,Intent service,String resolvedType,IServiceConnection connection,int flags){
  if (service != null && service.hasFileDescriptors() == true) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
synchronized (this) {
    if (DEBUG_SERVICE)     Log.v(TAG,""String_Node_Str"" + service + ""String_Node_Str""+ resolvedType+ ""String_Node_Str""+ connection.asBinder()+ ""String_Node_Str""+ Integer.toHexString(flags));
    final ProcessRecord callerApp=getRecordForAppLocked(caller);
    if (callerApp == null) {
      throw new SecurityException(""String_Node_Str"" + caller + ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ service);
    }
    HistoryRecord activity=null;
    if (token != null) {
      int aindex=indexOfTokenLocked(token,false);
      if (aindex < 0) {
        Log.w(TAG,""String_Node_Str"" + token);
        return 0;
      }
      activity=(HistoryRecord)mHistory.get(aindex);
    }
    ServiceLookupResult res=retrieveServiceLocked(service,resolvedType,Binder.getCallingPid(),Binder.getCallingUid());
    if (res == null) {
      return 0;
    }
    if (res.record == null) {
      return -1;
    }
    ServiceRecord s=res.record;
    final long origId=Binder.clearCallingIdentity();
    if (unscheduleServiceRestartLocked(s)) {
      if (DEBUG_SERVICE)       Log.v(TAG,""String_Node_Str"" + s.shortName);
    }
    AppBindRecord b=s.retrieveAppBindingLocked(service,callerApp);
    ConnectionRecord c=new ConnectionRecord(b,activity,connection,flags);
    IBinder binder=connection.asBinder();
    s.connections.put(binder,c);
    b.connections.add(c);
    if (activity != null) {
      if (activity.connections == null) {
        activity.connections=new HashSet<ConnectionRecord>();
      }
      activity.connections.add(c);
    }
    b.client.connections.add(c);
    mServiceConnections.put(binder,c);
    if ((flags & Context.BIND_AUTO_CREATE) != 0) {
      s.lastActivity=SystemClock.uptimeMillis();
      if (!bringUpServiceLocked(s,service.getFlags(),false)) {
        return 0;
      }
    }
    if (s.app != null) {
      updateOomAdjLocked(s.app);
    }
    if (DEBUG_SERVICE)     Log.v(TAG,""String_Node_Str"" + s + ""String_Node_Str""+ b+ ""String_Node_Str""+ b.intent.received+ ""String_Node_Str""+ b.intent.apps.size()+ ""String_Node_Str""+ b.intent.doRebind);
    if (s.app != null && b.intent.received) {
      try {
        c.conn.connected(s.name,b.intent.binder);
      }
 catch (      Exception e) {
        Log.w(TAG,""String_Node_Str"" + s.shortName + ""String_Node_Str""+ c.conn.asBinder()+ ""String_Node_Str""+ c.binding.client.processName+ ""String_Node_Str"",e);
      }
      if (b.intent.apps.size() == 1 && b.intent.doRebind) {
        requestServiceBindingLocked(s,b.intent,true);
      }
    }
 else     if (!b.intent.requested) {
      requestServiceBindingLocked(s,b.intent,false);
    }
    Binder.restoreCallingIdentity(origId);
  }
  return 1;
}","public int bindService(IApplicationThread caller,IBinder token,Intent service,String resolvedType,IServiceConnection connection,int flags){
  if (service != null && service.hasFileDescriptors() == true) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
synchronized (this) {
    if (DEBUG_SERVICE)     Log.v(TAG,""String_Node_Str"" + service + ""String_Node_Str""+ resolvedType+ ""String_Node_Str""+ connection.asBinder()+ ""String_Node_Str""+ Integer.toHexString(flags));
    final ProcessRecord callerApp=getRecordForAppLocked(caller);
    if (callerApp == null) {
      throw new SecurityException(""String_Node_Str"" + caller + ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ service);
    }
    HistoryRecord activity=null;
    if (token != null) {
      int aindex=indexOfTokenLocked(token);
      if (aindex < 0) {
        Log.w(TAG,""String_Node_Str"" + token);
        return 0;
      }
      activity=(HistoryRecord)mHistory.get(aindex);
    }
    ServiceLookupResult res=retrieveServiceLocked(service,resolvedType,Binder.getCallingPid(),Binder.getCallingUid());
    if (res == null) {
      return 0;
    }
    if (res.record == null) {
      return -1;
    }
    ServiceRecord s=res.record;
    final long origId=Binder.clearCallingIdentity();
    if (unscheduleServiceRestartLocked(s)) {
      if (DEBUG_SERVICE)       Log.v(TAG,""String_Node_Str"" + s.shortName);
    }
    AppBindRecord b=s.retrieveAppBindingLocked(service,callerApp);
    ConnectionRecord c=new ConnectionRecord(b,activity,connection,flags);
    IBinder binder=connection.asBinder();
    s.connections.put(binder,c);
    b.connections.add(c);
    if (activity != null) {
      if (activity.connections == null) {
        activity.connections=new HashSet<ConnectionRecord>();
      }
      activity.connections.add(c);
    }
    b.client.connections.add(c);
    mServiceConnections.put(binder,c);
    if ((flags & Context.BIND_AUTO_CREATE) != 0) {
      s.lastActivity=SystemClock.uptimeMillis();
      if (!bringUpServiceLocked(s,service.getFlags(),false)) {
        return 0;
      }
    }
    if (s.app != null) {
      updateOomAdjLocked(s.app);
    }
    if (DEBUG_SERVICE)     Log.v(TAG,""String_Node_Str"" + s + ""String_Node_Str""+ b+ ""String_Node_Str""+ b.intent.received+ ""String_Node_Str""+ b.intent.apps.size()+ ""String_Node_Str""+ b.intent.doRebind);
    if (s.app != null && b.intent.received) {
      try {
        c.conn.connected(s.name,b.intent.binder);
      }
 catch (      Exception e) {
        Log.w(TAG,""String_Node_Str"" + s.shortName + ""String_Node_Str""+ c.conn.asBinder()+ ""String_Node_Str""+ c.binding.client.processName+ ""String_Node_Str"",e);
      }
      if (b.intent.apps.size() == 1 && b.intent.doRebind) {
        requestServiceBindingLocked(s,b.intent,true);
      }
    }
 else     if (!b.intent.requested) {
      requestServiceBindingLocked(s,b.intent,false);
    }
    Binder.restoreCallingIdentity(origId);
  }
  return 1;
}"
24144,"public boolean startNextMatchingActivity(IBinder callingActivity,Intent intent){
  if (intent != null && intent.hasFileDescriptors() == true) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
synchronized (this) {
    int index=indexOfTokenLocked(callingActivity,false);
    if (index < 0) {
      return false;
    }
    HistoryRecord r=(HistoryRecord)mHistory.get(index);
    if (r.app == null || r.app.thread == null) {
      return false;
    }
    intent=new Intent(intent);
    intent.setDataAndType(r.intent.getData(),r.intent.getType());
    intent.setComponent(null);
    ActivityInfo aInfo=null;
    try {
      List<ResolveInfo> resolves=ActivityThread.getPackageManager().queryIntentActivities(intent,r.resolvedType,PackageManager.MATCH_DEFAULT_ONLY | STOCK_PM_FLAGS);
      final int N=resolves != null ? resolves.size() : 0;
      for (int i=0; i < N; i++) {
        ResolveInfo rInfo=resolves.get(i);
        if (rInfo.activityInfo.packageName.equals(r.packageName) && rInfo.activityInfo.name.equals(r.info.name)) {
          i++;
          if (i < N) {
            aInfo=resolves.get(i).activityInfo;
          }
          break;
        }
      }
    }
 catch (    RemoteException e) {
    }
    if (aInfo == null) {
      return false;
    }
    intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
    intent.setFlags(intent.getFlags() & ~(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_MULTIPLE_TASK| Intent.FLAG_ACTIVITY_NEW_TASK));
    final boolean wasFinishing=r.finishing;
    r.finishing=true;
    final HistoryRecord resultTo=r.resultTo;
    final String resultWho=r.resultWho;
    final int requestCode=r.requestCode;
    r.resultTo=null;
    if (resultTo != null) {
      resultTo.removeResultsLocked(r,resultWho,requestCode);
    }
    final long origId=Binder.clearCallingIdentity();
    int res=startActivityLocked(r.app.thread,intent,r.resolvedType,null,0,aInfo,resultTo,resultWho,requestCode,-1,r.launchedFromUid,false,false);
    Binder.restoreCallingIdentity(origId);
    r.finishing=wasFinishing;
    if (res != START_SUCCESS) {
      return false;
    }
    return true;
  }
}","public boolean startNextMatchingActivity(IBinder callingActivity,Intent intent){
  if (intent != null && intent.hasFileDescriptors() == true) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
synchronized (this) {
    int index=indexOfTokenLocked(callingActivity);
    if (index < 0) {
      return false;
    }
    HistoryRecord r=(HistoryRecord)mHistory.get(index);
    if (r.app == null || r.app.thread == null) {
      return false;
    }
    intent=new Intent(intent);
    intent.setDataAndType(r.intent.getData(),r.intent.getType());
    intent.setComponent(null);
    ActivityInfo aInfo=null;
    try {
      List<ResolveInfo> resolves=ActivityThread.getPackageManager().queryIntentActivities(intent,r.resolvedType,PackageManager.MATCH_DEFAULT_ONLY | STOCK_PM_FLAGS);
      final int N=resolves != null ? resolves.size() : 0;
      for (int i=0; i < N; i++) {
        ResolveInfo rInfo=resolves.get(i);
        if (rInfo.activityInfo.packageName.equals(r.packageName) && rInfo.activityInfo.name.equals(r.info.name)) {
          i++;
          if (i < N) {
            aInfo=resolves.get(i).activityInfo;
          }
          break;
        }
      }
    }
 catch (    RemoteException e) {
    }
    if (aInfo == null) {
      return false;
    }
    intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
    intent.setFlags(intent.getFlags() & ~(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_MULTIPLE_TASK| Intent.FLAG_ACTIVITY_NEW_TASK));
    final boolean wasFinishing=r.finishing;
    r.finishing=true;
    final HistoryRecord resultTo=r.resultTo;
    final String resultWho=r.resultWho;
    final int requestCode=r.requestCode;
    r.resultTo=null;
    if (resultTo != null) {
      resultTo.removeResultsLocked(r,resultWho,requestCode);
    }
    final long origId=Binder.clearCallingIdentity();
    int res=startActivityLocked(r.app.thread,intent,r.resolvedType,null,0,aInfo,resultTo,resultWho,requestCode,-1,r.launchedFromUid,false,false);
    Binder.restoreCallingIdentity(origId);
    r.finishing=wasFinishing;
    if (res != START_SUCCESS) {
      return false;
    }
    return true;
  }
}"
24145,"/** 
 * @return Returns true if the activity is being finished, false if forsome reason it is being left as-is.
 */
private final boolean requestFinishActivityLocked(IBinder token,int resultCode,Intent resultData,String reason){
  if (DEBUG_RESULTS)   Log.v(TAG,""String_Node_Str"" + token + ""String_Node_Str""+ resultCode+ ""String_Node_Str""+ resultData);
  int index=indexOfTokenLocked(token,false);
  if (index < 0) {
    return false;
  }
  HistoryRecord r=(HistoryRecord)mHistory.get(index);
  boolean lastActivity=true;
  for (int i=mHistory.size() - 1; i >= 0; i--) {
    HistoryRecord p=(HistoryRecord)mHistory.get(i);
    if (!p.finishing && p != r) {
      lastActivity=false;
      break;
    }
  }
  if (lastActivity) {
    if (r.intent.hasCategory(Intent.CATEGORY_HOME)) {
      return false;
    }
  }
  finishActivityLocked(r,index,resultCode,resultData,reason);
  return true;
}","/** 
 * @return Returns true if the activity is being finished, false if forsome reason it is being left as-is.
 */
private final boolean requestFinishActivityLocked(IBinder token,int resultCode,Intent resultData,String reason){
  if (DEBUG_RESULTS)   Log.v(TAG,""String_Node_Str"" + token + ""String_Node_Str""+ resultCode+ ""String_Node_Str""+ resultData);
  int index=indexOfTokenLocked(token);
  if (index < 0) {
    return false;
  }
  HistoryRecord r=(HistoryRecord)mHistory.get(index);
  boolean lastActivity=true;
  for (int i=mHistory.size() - 1; i >= 0; i--) {
    HistoryRecord p=(HistoryRecord)mHistory.get(i);
    if (!p.finishing && p != r) {
      lastActivity=false;
      break;
    }
  }
  if (lastActivity) {
    if (r.intent.hasCategory(Intent.CATEGORY_HOME)) {
      return false;
    }
  }
  finishActivityLocked(r,index,resultCode,resultData,reason);
  return true;
}"
24146,"private HistoryRecord getCallingRecordLocked(IBinder token){
  int index=indexOfTokenLocked(token,true);
  if (index >= 0) {
    HistoryRecord r=(HistoryRecord)mHistory.get(index);
    if (r != null) {
      return r.resultTo;
    }
  }
  return null;
}","private HistoryRecord getCallingRecordLocked(IBinder token){
  int index=indexOfTokenLocked(token);
  if (index >= 0) {
    HistoryRecord r=(HistoryRecord)mHistory.get(index);
    if (r != null) {
      return r.resultTo;
    }
  }
  return null;
}"
24147,"public String getPackageForToken(IBinder token){
synchronized (this) {
    int index=indexOfTokenLocked(token,false);
    if (index >= 0) {
      HistoryRecord r=(HistoryRecord)mHistory.get(index);
      return r.packageName;
    }
    return null;
  }
}","public String getPackageForToken(IBinder token){
synchronized (this) {
    int index=indexOfTokenLocked(token);
    if (index >= 0) {
      HistoryRecord r=(HistoryRecord)mHistory.get(index);
      return r.packageName;
    }
    return null;
  }
}"
24148,"public IIntentSender getIntentSender(int type,String packageName,IBinder token,String resultWho,int requestCode,Intent intent,String resolvedType,int flags){
  if (intent != null && intent.hasFileDescriptors() == true) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
synchronized (this) {
    int callingUid=Binder.getCallingUid();
    try {
      if (callingUid != 0 && callingUid != Process.SYSTEM_UID && Process.supportsProcesses()) {
        int uid=ActivityThread.getPackageManager().getPackageUid(packageName);
        if (uid != Binder.getCallingUid()) {
          String msg=""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ uid+ ""String_Node_Str""+ ""String_Node_Str""+ packageName;
          Log.w(TAG,msg);
          throw new SecurityException(msg);
        }
      }
    }
 catch (    RemoteException e) {
      throw new SecurityException(e);
    }
    HistoryRecord activity=null;
    if (type == INTENT_SENDER_ACTIVITY_RESULT) {
      int index=indexOfTokenLocked(token,false);
      if (index < 0) {
        return null;
      }
      activity=(HistoryRecord)mHistory.get(index);
      if (activity.finishing) {
        return null;
      }
    }
    final boolean noCreate=(flags & PendingIntent.FLAG_NO_CREATE) != 0;
    final boolean cancelCurrent=(flags & PendingIntent.FLAG_CANCEL_CURRENT) != 0;
    final boolean updateCurrent=(flags & PendingIntent.FLAG_UPDATE_CURRENT) != 0;
    flags&=~(PendingIntent.FLAG_NO_CREATE | PendingIntent.FLAG_CANCEL_CURRENT | PendingIntent.FLAG_UPDATE_CURRENT);
    PendingIntentRecord.Key key=new PendingIntentRecord.Key(type,packageName,activity,resultWho,requestCode,intent,resolvedType,flags);
    WeakReference<PendingIntentRecord> ref;
    ref=mIntentSenderRecords.get(key);
    PendingIntentRecord rec=ref != null ? ref.get() : null;
    if (rec != null) {
      if (!cancelCurrent) {
        if (updateCurrent) {
          rec.key.requestIntent.replaceExtras(intent);
        }
        return rec;
      }
      rec.canceled=true;
      mIntentSenderRecords.remove(key);
    }
    if (noCreate) {
      return rec;
    }
    rec=new PendingIntentRecord(this,key,callingUid);
    mIntentSenderRecords.put(key,rec.ref);
    if (type == INTENT_SENDER_ACTIVITY_RESULT) {
      if (activity.pendingResults == null) {
        activity.pendingResults=new HashSet<WeakReference<PendingIntentRecord>>();
      }
      activity.pendingResults.add(rec.ref);
    }
    return rec;
  }
}","public IIntentSender getIntentSender(int type,String packageName,IBinder token,String resultWho,int requestCode,Intent intent,String resolvedType,int flags){
  if (intent != null && intent.hasFileDescriptors() == true) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
synchronized (this) {
    int callingUid=Binder.getCallingUid();
    try {
      if (callingUid != 0 && callingUid != Process.SYSTEM_UID && Process.supportsProcesses()) {
        int uid=ActivityThread.getPackageManager().getPackageUid(packageName);
        if (uid != Binder.getCallingUid()) {
          String msg=""String_Node_Str"" + Binder.getCallingPid() + ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ uid+ ""String_Node_Str""+ ""String_Node_Str""+ packageName;
          Log.w(TAG,msg);
          throw new SecurityException(msg);
        }
      }
    }
 catch (    RemoteException e) {
      throw new SecurityException(e);
    }
    HistoryRecord activity=null;
    if (type == INTENT_SENDER_ACTIVITY_RESULT) {
      int index=indexOfTokenLocked(token);
      if (index < 0) {
        return null;
      }
      activity=(HistoryRecord)mHistory.get(index);
      if (activity.finishing) {
        return null;
      }
    }
    final boolean noCreate=(flags & PendingIntent.FLAG_NO_CREATE) != 0;
    final boolean cancelCurrent=(flags & PendingIntent.FLAG_CANCEL_CURRENT) != 0;
    final boolean updateCurrent=(flags & PendingIntent.FLAG_UPDATE_CURRENT) != 0;
    flags&=~(PendingIntent.FLAG_NO_CREATE | PendingIntent.FLAG_CANCEL_CURRENT | PendingIntent.FLAG_UPDATE_CURRENT);
    PendingIntentRecord.Key key=new PendingIntentRecord.Key(type,packageName,activity,resultWho,requestCode,intent,resolvedType,flags);
    WeakReference<PendingIntentRecord> ref;
    ref=mIntentSenderRecords.get(key);
    PendingIntentRecord rec=ref != null ? ref.get() : null;
    if (rec != null) {
      if (!cancelCurrent) {
        if (updateCurrent) {
          rec.key.requestIntent.replaceExtras(intent);
        }
        return rec;
      }
      rec.canceled=true;
      mIntentSenderRecords.remove(key);
    }
    if (noCreate) {
      return rec;
    }
    rec=new PendingIntentRecord(this,key,callingUid);
    mIntentSenderRecords.put(key,rec.ref);
    if (type == INTENT_SENDER_ACTIVITY_RESULT) {
      if (activity.pendingResults == null) {
        activity.pendingResults=new HashSet<WeakReference<PendingIntentRecord>>();
      }
      activity.pendingResults.add(rec.ref);
    }
    return rec;
  }
}"
24149,"final void sendPendingThumbnail(HistoryRecord r,IBinder token,Bitmap thumbnail,CharSequence description,boolean always){
  TaskRecord task=null;
  ArrayList receivers=null;
synchronized (this) {
    if (r == null) {
      int index=indexOfTokenLocked(token,false);
      if (index < 0) {
        return;
      }
      r=(HistoryRecord)mHistory.get(index);
    }
    if (thumbnail == null) {
      thumbnail=r.thumbnail;
      description=r.description;
    }
    if (thumbnail == null && !always) {
      return;
    }
    task=r.task;
    int N=mPendingThumbnails.size();
    int i=0;
    while (i < N) {
      PendingThumbnailsRecord pr=(PendingThumbnailsRecord)mPendingThumbnails.get(i);
      if (pr.pendingRecords.remove(r)) {
        if (receivers == null) {
          receivers=new ArrayList();
        }
        receivers.add(pr);
        if (pr.pendingRecords.size() == 0) {
          pr.finished=true;
          mPendingThumbnails.remove(i);
          N--;
          continue;
        }
      }
      i++;
    }
  }
  if (receivers != null) {
    final int N=receivers.size();
    for (int i=0; i < N; i++) {
      try {
        PendingThumbnailsRecord pr=(PendingThumbnailsRecord)receivers.get(i);
        pr.receiver.newThumbnail(task != null ? task.taskId : -1,thumbnail,description);
        if (pr.finished) {
          pr.receiver.finished();
        }
      }
 catch (      Exception e) {
        Log.w(TAG,""String_Node_Str"",e);
      }
    }
  }
}","final void sendPendingThumbnail(HistoryRecord r,IBinder token,Bitmap thumbnail,CharSequence description,boolean always){
  TaskRecord task=null;
  ArrayList receivers=null;
synchronized (this) {
    if (r == null) {
      int index=indexOfTokenLocked(token);
      if (index < 0) {
        return;
      }
      r=(HistoryRecord)mHistory.get(index);
    }
    if (thumbnail == null) {
      thumbnail=r.thumbnail;
      description=r.description;
    }
    if (thumbnail == null && !always) {
      return;
    }
    task=r.task;
    int N=mPendingThumbnails.size();
    int i=0;
    while (i < N) {
      PendingThumbnailsRecord pr=(PendingThumbnailsRecord)mPendingThumbnails.get(i);
      if (pr.pendingRecords.remove(r)) {
        if (receivers == null) {
          receivers=new ArrayList();
        }
        receivers.add(pr);
        if (pr.pendingRecords.size() == 0) {
          pr.finished=true;
          mPendingThumbnails.remove(i);
          N--;
          continue;
        }
      }
      i++;
    }
  }
  if (receivers != null) {
    final int N=receivers.size();
    for (int i=0; i < N; i++) {
      try {
        PendingThumbnailsRecord pr=(PendingThumbnailsRecord)receivers.get(i);
        pr.receiver.newThumbnail(task != null ? task.taskId : -1,thumbnail,description);
        if (pr.finished) {
          pr.receiver.finished();
        }
      }
 catch (      Exception e) {
        Log.w(TAG,""String_Node_Str"",e);
      }
    }
  }
}"
24150,"final void activityPaused(IBinder token,Bundle icicle,boolean timeout){
  if (DEBUG_PAUSE)   Log.v(TAG,""String_Node_Str"" + token + ""String_Node_Str""+ icicle+ ""String_Node_Str""+ timeout);
  HistoryRecord r=null;
synchronized (this) {
    int index=indexOfTokenLocked(token,false);
    if (index >= 0) {
      r=(HistoryRecord)mHistory.get(index);
      if (!timeout) {
        r.icicle=icicle;
        r.haveState=true;
      }
      mHandler.removeMessages(PAUSE_TIMEOUT_MSG,r);
      if (mPausingActivity == r) {
        r.state=ActivityState.PAUSED;
        completePauseLocked();
      }
 else {
        EventLog.writeEvent(LOG_AM_FAILED_TO_PAUSE_ACTIVITY,System.identityHashCode(r),r.shortComponentName,mPausingActivity != null ? mPausingActivity.shortComponentName : ""String_Node_Str"");
      }
    }
  }
}","final void activityPaused(IBinder token,Bundle icicle,boolean timeout){
  if (DEBUG_PAUSE)   Log.v(TAG,""String_Node_Str"" + token + ""String_Node_Str""+ icicle+ ""String_Node_Str""+ timeout);
  HistoryRecord r=null;
synchronized (this) {
    int index=indexOfTokenLocked(token);
    if (index >= 0) {
      r=(HistoryRecord)mHistory.get(index);
      if (!timeout) {
        r.icicle=icicle;
        r.haveState=true;
      }
      mHandler.removeMessages(PAUSE_TIMEOUT_MSG,r);
      if (mPausingActivity == r) {
        r.state=ActivityState.PAUSED;
        completePauseLocked();
      }
 else {
        EventLog.writeEvent(LOG_AM_FAILED_TO_PAUSE_ACTIVITY,System.identityHashCode(r),r.shortComponentName,mPausingActivity != null ? mPausingActivity.shortComponentName : ""String_Node_Str"");
      }
    }
  }
}"
24151,"@Override public void onBackup(ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState){
  LinkedList<File> dirsToScan=new LinkedList<File>();
  ArrayList<String> allFiles=new ArrayList<String>();
  dirsToScan.add(getFilesDir());
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + getFilesDir().getAbsolutePath() + ""String_Node_Str"");
  while (dirsToScan.size() > 0) {
    File dir=dirsToScan.removeFirst();
    File[] contents=dir.listFiles();
    if (contents != null) {
      for (      File f : contents) {
        if (f.isDirectory()) {
          dirsToScan.add(f);
        }
 else         if (f.isFile()) {
          if (DEBUG)           Log.v(TAG,""String_Node_Str"" + f.getAbsolutePath());
          allFiles.add(f.getAbsolutePath());
        }
      }
    }
  }
  FileBackupHelper.performBackup(this,oldState,data,newState,(String[])allFiles.toArray());
}","@Override public void onBackup(ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState){
  LinkedList<File> dirsToScan=new LinkedList<File>();
  ArrayList<String> allFiles=new ArrayList<String>();
  dirsToScan.add(getFilesDir());
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + getFilesDir().getAbsolutePath() + ""String_Node_Str"");
  while (dirsToScan.size() > 0) {
    File dir=dirsToScan.removeFirst();
    File[] contents=dir.listFiles();
    if (contents != null) {
      for (      File f : contents) {
        if (f.isDirectory()) {
          dirsToScan.add(f);
        }
 else         if (f.isFile()) {
          if (DEBUG)           Log.v(TAG,""String_Node_Str"" + f.getAbsolutePath());
          allFiles.add(f.getAbsolutePath());
        }
      }
    }
  }
  FileBackupHelper helper=new FileBackupHelper(this);
  helper.performBackup(oldState,data,newState,(String[])allFiles.toArray());
}"
24152,"/** 
 * Based on oldState, determine which of the files from the application's data directory need to be backed up, write them to the data stream, and fill in newState with the state as it exists now.
 */
public static void performBackup(Context context,ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState,String[] files){
  File base=context.getFilesDir();
  final int N=files.length;
  String[] fullPaths=new String[N];
  for (int i=0; i < N; i++) {
    fullPaths[i]=(new File(base,files[i])).getAbsolutePath();
  }
  performBackup_checked(oldState,data,newState,fullPaths,files);
}","/** 
 * Based on oldState, determine which of the files from the application's data directory need to be backed up, write them to the data stream, and fill in newState with the state as it exists now.
 */
public void performBackup(ParcelFileDescriptor oldState,BackupDataOutput data,ParcelFileDescriptor newState,String[] files){
  File base=mContext.getFilesDir();
  final int N=files.length;
  String[] fullPaths=new String[N];
  for (int i=0; i < N; i++) {
    fullPaths[i]=(new File(base,files[i])).getAbsolutePath();
  }
  String[] keys=makeKeys(mKeyPrefix,files);
  performBackup_checked(oldState,data,newState,fullPaths,keys);
}"
24153,"public static void performBackup(Context context,ParcelFileDescriptor oldSnapshot,ParcelFileDescriptor newSnapshot,BackupDataOutput data,String[] prefGroups){
  final int N=prefGroups.length;
  String[] files=new String[N];
  for (int i=0; i < N; i++) {
    files[i]=context.getSharedPrefsFile(prefGroups[i]).toString();
  }
  FileBackupHelper.performBackup_checked(oldSnapshot,data,newSnapshot,files,prefGroups);
}","public void performBackup(ParcelFileDescriptor oldSnapshot,ParcelFileDescriptor newSnapshot,BackupDataOutput data,String[] prefGroups){
  Context context=mContext;
  final int N=prefGroups.length;
  String[] files=new String[N];
  for (int i=0; i < N; i++) {
    files[i]=context.getSharedPrefsFile(prefGroups[i]).getAbsolutePath();
  }
  String[] keys=FileBackupHelper.makeKeys(mKeyPrefix,prefGroups);
  FileBackupHelper.performBackup_checked(oldSnapshot,data,newSnapshot,files,prefGroups);
}"
24154,"public int performBackup(PackageInfo packageInfo,ParcelFileDescriptor data) throws RemoteException {
  File packageDir=new File(mDataDir,packageInfo.packageName);
  File imageFileName=new File(packageDir,DATA_FILE_NAME);
  return -1;
}","public int performBackup(PackageInfo packageInfo,ParcelFileDescriptor data) throws RemoteException {
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + packageInfo.packageName);
  int err=0;
  File packageDir=new File(mDataDir,packageInfo.packageName);
  packageDir.mkdirs();
  BackupDataInput changeSet=new BackupDataInput(data.getFileDescriptor());
  try {
    int bufSize=512;
    byte[] buf=new byte[bufSize];
    while (changeSet.readNextHeader()) {
      String key=changeSet.getKey();
      int dataSize=changeSet.getDataSize();
      if (DEBUG)       Log.v(TAG,""String_Node_Str"" + key + ""String_Node_Str""+ dataSize);
      if (dataSize > bufSize) {
        bufSize=dataSize;
        buf=new byte[bufSize];
      }
      changeSet.readEntityData(buf,dataSize);
      if (DEBUG)       Log.v(TAG,""String_Node_Str"" + dataSize);
      File entityFile=new File(packageDir,key);
      FileOutputStream entity=new FileOutputStream(entityFile);
      try {
        entity.write(buf,0,dataSize);
      }
 catch (      IOException e) {
        Log.e(TAG,""String_Node_Str"" + entityFile.getAbsolutePath());
        err=-1;
      }
 finally {
        entity.close();
      }
    }
  }
 catch (  IOException e) {
    Log.v(TAG,""String_Node_Str"");
    e.printStackTrace();
    err=-1;
  }
  return err;
}"
24155,"public int endSession() throws RemoteException {
  return 0;
}","public int endSession() throws RemoteException {
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  return 0;
}"
24156,"public int startSession() throws RemoteException {
  return 0;
}","public int startSession() throws RemoteException {
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mDataDir.mkdirs();
  return 0;
}"
24157,"public int getRestoreData(int token,PackageInfo packageInfo,ParcelFileDescriptor output) throws android.os.RemoteException {
  if (token != 0)   return -1;
  File packageDir=new File(mDataDir,packageInfo.packageName);
  File imageFile=new File(packageDir,DATA_FILE_NAME);
  return copyFileToFD(imageFile,output);
}","public int getRestoreData(int token,PackageInfo packageInfo,ParcelFileDescriptor output) throws android.os.RemoteException {
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + token + ""String_Node_Str""+ packageInfo.packageName);
  if (token != 0)   return -1;
  File packageDir=new File(mDataDir,packageInfo.packageName);
  File[] blobs=packageDir.listFiles();
  int err=0;
  if (blobs != null && blobs.length > 0) {
    for (    File f : blobs) {
      err=copyFileToFD(f,output);
      if (err != 0)       break;
    }
  }
  return err;
}"
24158,"public PackageInfo[] getAppSet(int token) throws android.os.RemoteException {
  File[] packageDirs=mDataDir.listFiles(mDirFileFilter);
  ArrayList<PackageInfo> packages=new ArrayList<PackageInfo>();
  for (  File dir : packageDirs) {
    try {
      PackageInfo pkg=mPackageManager.getPackageInfo(dir.getName(),PackageManager.GET_SIGNATURES);
      if (pkg != null) {
        packages.add(pkg);
      }
    }
 catch (    NameNotFoundException e) {
    }
  }
  Log.v(TAG,""String_Node_Str"" + packages.size() + ""String_Node_Str"");
  for (  PackageInfo p : packages) {
    Log.v(TAG,""String_Node_Str"" + p.packageName);
  }
  PackageInfo[] result=new PackageInfo[packages.size()];
  return packages.toArray(result);
}","public PackageInfo[] getAppSet(int token) throws android.os.RemoteException {
  if (DEBUG)   Log.v(TAG,""String_Node_Str"" + token);
  File[] packageDirs=mDataDir.listFiles(mDirFileFilter);
  ArrayList<PackageInfo> packages=new ArrayList<PackageInfo>();
  for (  File dir : packageDirs) {
    try {
      PackageInfo pkg=mPackageManager.getPackageInfo(dir.getName(),PackageManager.GET_SIGNATURES);
      if (pkg != null) {
        packages.add(pkg);
      }
    }
 catch (    NameNotFoundException e) {
    }
  }
  if (DEBUG) {
    Log.v(TAG,""String_Node_Str"" + packages.size() + ""String_Node_Str"");
    for (    PackageInfo p : packages) {
      Log.v(TAG,""String_Node_Str"" + p.packageName);
    }
  }
  PackageInfo[] result=new PackageInfo[packages.size()];
  return packages.toArray(result);
}"
24159,"public LocalTransport(Context context){
  mContext=context;
  mPackageManager=context.getPackageManager();
}","public LocalTransport(Context context){
  if (DEBUG)   Log.v(TAG,""String_Node_Str"");
  mContext=context;
  mPackageManager=context.getPackageManager();
}"
24160,"public boolean isStreamAffectedByRingerMode(int streamType){
  int ringerModeAffectedStreams=Settings.System.getInt(mContentResolver,Settings.System.MODE_RINGER_STREAMS_AFFECTED,0);
  return (ringerModeAffectedStreams & (1 << streamType)) != 0;
}","public boolean isStreamAffectedByRingerMode(int streamType){
  return (mRingerModeAffectedStreams & (1 << streamType)) != 0;
}"
24161,"/** 
 * Sync the STREAM_RING and STREAM_NOTIFICATION volumes if mandated by the value in Settings.
 * @param streamType Type of the stream
 * @param index Volume index for the stream
 * @param force If true, set the volume even if the current and desiredvolume as same
 */
private void syncRingerAndNotificationStreamVolume(int streamType,int index,boolean force){
  boolean notificationsUseRingVolume=Settings.System.getInt(mContentResolver,Settings.System.NOTIFICATIONS_USE_RING_VOLUME,1) == 1;
  if (notificationsUseRingVolume) {
    if (streamType == AudioManager.STREAM_NOTIFICATION) {
      streamType=AudioManager.STREAM_RING;
    }
    if (streamType == AudioManager.STREAM_RING) {
      setStreamVolumeInt(AudioManager.STREAM_NOTIFICATION,index,force);
    }
  }
}","/** 
 * Sync the STREAM_RING and STREAM_NOTIFICATION volumes if mandated by the value in Settings.
 * @param streamType Type of the stream
 * @param index Volume index for the stream
 * @param force If true, set the volume even if the current and desiredvolume as same
 */
private void syncRingerAndNotificationStreamVolume(int streamType,int index,boolean force){
  boolean notificationsUseRingVolume=Settings.System.getInt(mContentResolver,Settings.System.NOTIFICATIONS_USE_RING_VOLUME,1) == 1;
  if (notificationsUseRingVolume) {
    if (streamType == AudioManager.STREAM_NOTIFICATION) {
      streamType=AudioManager.STREAM_RING;
    }
    if (streamType == AudioManager.STREAM_RING) {
      setStreamVolumeInt(AudioManager.STREAM_NOTIFICATION,index,force,true);
    }
  }
}"
24162,"@Override public void onChange(boolean selfChange){
  super.onChange(selfChange);
  setRingerModeInt(getRingerMode());
}","@Override public void onChange(boolean selfChange){
  super.onChange(selfChange);
  mRingerModeAffectedStreams=Settings.System.getInt(mContentResolver,Settings.System.MODE_RINGER_STREAMS_AFFECTED,0);
  setRingerModeInt(getRingerMode());
}"
24163,"/** 
 * Sets the stream state's index, and posts a message to set system volume. This will not call out to the UI. Assumes a valid stream type.
 * @param streamType Type of the stream
 * @param index Desired volume index of the stream
 * @param force If true, set the volume even if the desired volume is sameas the current volume.
 */
private void setStreamVolumeInt(int streamType,int index,boolean force){
  VolumeStreamState streamState=mStreamStates[streamType];
  if (streamState.setIndex(index) || force) {
    if (streamState.muteCount() == 0) {
      sendMsg(mAudioHandler,MSG_SET_SYSTEM_VOLUME,streamType,SENDMSG_NOOP,0,0,streamState,0);
    }
  }
}","/** 
 * Sets the stream state's index, and posts a message to set system volume. This will not call out to the UI. Assumes a valid stream type.
 * @param streamType Type of the stream
 * @param index Desired volume index of the stream
 * @param force If true, set the volume even if the desired volume is sameas the current volume.
 * @param lastAudible If true, stores new index as last audible one
 */
private void setStreamVolumeInt(int streamType,int index,boolean force,boolean lastAudible){
  VolumeStreamState streamState=mStreamStates[streamType];
  if (streamState.setIndex(index,lastAudible) || force) {
    if (streamState.muteCount() == 0) {
      sendMsg(mAudioHandler,MSG_SET_SYSTEM_VOLUME,streamType,SENDMSG_NOOP,0,0,streamState,0);
    }
  }
}"
24164,"public void mute(boolean state){
synchronized (mDeathHandlers) {
    if (state) {
      if (mMuteCount == 0) {
        try {
          mICallback.linkToDeath(this,0);
          mDeathHandlers.add(this);
          if (muteCount() == 0) {
            setIndex(0);
            sendMsg(mAudioHandler,MSG_SET_SYSTEM_VOLUME,mStreamType,SENDMSG_NOOP,0,0,VolumeStreamState.this,0);
          }
        }
 catch (        RemoteException e) {
          binderDied();
          mDeathHandlers.notify();
          return;
        }
      }
 else {
        Log.w(TAG,""String_Node_Str"" + mStreamType + ""String_Node_Str"");
      }
      mMuteCount++;
    }
 else {
      if (mMuteCount == 0) {
        Log.e(TAG,""String_Node_Str"" + mStreamType);
      }
 else {
        mMuteCount--;
        if (mMuteCount == 0) {
          mDeathHandlers.remove(this);
          mICallback.unlinkToDeath(this,0);
          if (muteCount() == 0) {
            if (!isStreamAffectedByRingerMode(mStreamType) || mRingerMode == AudioManager.RINGER_MODE_NORMAL) {
              setIndex(mLastAudibleIndex);
              sendMsg(mAudioHandler,MSG_SET_SYSTEM_VOLUME,mStreamType,SENDMSG_NOOP,0,0,VolumeStreamState.this,0);
            }
          }
        }
      }
    }
    mDeathHandlers.notify();
  }
}","public void mute(boolean state){
synchronized (mDeathHandlers) {
    if (state) {
      if (mMuteCount == 0) {
        try {
          mICallback.linkToDeath(this,0);
          mDeathHandlers.add(this);
          if (muteCount() == 0) {
            setIndex(0,false);
            sendMsg(mAudioHandler,MSG_SET_SYSTEM_VOLUME,mStreamType,SENDMSG_NOOP,0,0,VolumeStreamState.this,0);
          }
        }
 catch (        RemoteException e) {
          binderDied();
          mDeathHandlers.notify();
          return;
        }
      }
 else {
        Log.w(TAG,""String_Node_Str"" + mStreamType + ""String_Node_Str"");
      }
      mMuteCount++;
    }
 else {
      if (mMuteCount == 0) {
        Log.e(TAG,""String_Node_Str"" + mStreamType);
      }
 else {
        mMuteCount--;
        if (mMuteCount == 0) {
          mDeathHandlers.remove(this);
          mICallback.unlinkToDeath(this,0);
          if (muteCount() == 0) {
            if (!isStreamAffectedByRingerMode(mStreamType) || mRingerMode == AudioManager.RINGER_MODE_NORMAL) {
              setIndex(mLastAudibleIndex,false);
              sendMsg(mAudioHandler,MSG_SET_SYSTEM_VOLUME,mStreamType,SENDMSG_NOOP,0,0,VolumeStreamState.this,0);
            }
          }
        }
      }
    }
    mDeathHandlers.notify();
  }
}"
24165,"public boolean adjustIndex(int deltaIndex){
  return setIndex(mIndex + deltaIndex);
}","public boolean adjustIndex(int deltaIndex){
  return setIndex(mIndex + deltaIndex,true);
}"
24166,"private void setRingerModeInt(int ringerMode){
  mRingerMode=ringerMode;
  int numStreamTypes=AudioSystem.getNumStreamTypes();
  if (mRingerMode == AudioManager.RINGER_MODE_NORMAL) {
    for (int streamType=numStreamTypes - 1; streamType >= 0; streamType--) {
      if (!isStreamAffectedByRingerMode(streamType))       continue;
      setStreamVolumeInt(streamType,mStreamStates[streamType].mLastAudibleIndex,false);
    }
  }
 else {
    for (int streamType=numStreamTypes - 1; streamType >= 0; streamType--) {
      if (!isStreamAffectedByRingerMode(streamType))       continue;
      setStreamVolumeInt(streamType,0,false);
    }
  }
  sendMsg(mAudioHandler,MSG_PERSIST_RINGER_MODE,SHARED_MSG,SENDMSG_REPLACE,0,0,null,PERSIST_DELAY);
}","private void setRingerModeInt(int ringerMode){
  mRingerMode=ringerMode;
  int numStreamTypes=AudioSystem.getNumStreamTypes();
  if (mRingerMode == AudioManager.RINGER_MODE_NORMAL) {
    for (int streamType=numStreamTypes - 1; streamType >= 0; streamType--) {
      if (!isStreamAffectedByRingerMode(streamType))       continue;
      setStreamVolumeInt(streamType,mStreamStates[streamType].mLastAudibleIndex,false,false);
    }
  }
 else {
    for (int streamType=numStreamTypes - 1; streamType >= 0; streamType--) {
      if (isStreamAffectedByRingerMode(streamType)) {
        setStreamVolumeInt(streamType,0,false,false);
      }
 else {
        setStreamVolumeInt(streamType,mStreamStates[streamType].mLastAudibleIndex,false,false);
      }
    }
  }
  sendMsg(mAudioHandler,MSG_PERSIST_RINGER_MODE,SHARED_MSG,SENDMSG_REPLACE,0,0,null,PERSIST_DELAY);
}"
24167,"public boolean setIndex(int index){
  int oldIndex=mIndex;
  mIndex=getValidIndex(index);
  if (oldIndex != mIndex) {
    if (mIndex > 0) {
      mLastAudibleIndex=mIndex;
    }
    return true;
  }
 else {
    return false;
  }
}","public boolean setIndex(int index,boolean lastAudible){
  int oldIndex=mIndex;
  mIndex=getValidIndex(index);
  if (oldIndex != mIndex) {
    if (lastAudible) {
      mLastAudibleIndex=mIndex;
    }
    return true;
  }
 else {
    return false;
  }
}"
24168,"/** 
 * @see AudioManager#setRouting(int,int,int) 
 */
public void setRouting(int mode,int routes,int mask){
  int incallMask=0;
  int ringtoneMask=0;
  int normalMask=0;
  if (!checkAudioSettingsPermission(""String_Node_Str"")) {
    return;
  }
synchronized (mSettingsLock) {
    if (mode == AudioSystem.MODE_INVALID) {
switch (mask) {
case AudioSystem.ROUTE_SPEAKER:
        if (routes != 0 && !mSpeakerIsOn) {
          mSpeakerIsOn=true;
          mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_SPEAKER;
          incallMask=AudioSystem.ROUTE_ALL;
        }
 else         if (mSpeakerIsOn) {
          mSpeakerIsOn=false;
          if (mBluetoothScoIsConnected) {
            mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_BLUETOOTH_SCO;
          }
 else           if (mHeadsetIsConnected) {
            mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_HEADSET;
          }
 else {
            mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_EARPIECE;
          }
          incallMask=AudioSystem.ROUTE_ALL;
        }
      break;
case AudioSystem.ROUTE_BLUETOOTH_SCO:
    if (routes != 0 && !mBluetoothScoIsConnected) {
      mBluetoothScoIsConnected=true;
      mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_BLUETOOTH_SCO;
      mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_BLUETOOTH_SCO;
      mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_BLUETOOTH_SCO;
      incallMask=AudioSystem.ROUTE_ALL;
      ringtoneMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
      normalMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
    }
 else     if (mBluetoothScoIsConnected) {
      mBluetoothScoIsConnected=false;
      if (mHeadsetIsConnected) {
        mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_HEADSET;
        mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | (AudioSystem.ROUTE_HEADSET | AudioSystem.ROUTE_SPEAKER);
        mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_HEADSET;
      }
 else {
        if (mSpeakerIsOn) {
          mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_SPEAKER;
        }
 else {
          mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_EARPIECE;
        }
        mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_SPEAKER;
        mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_SPEAKER;
      }
      incallMask=AudioSystem.ROUTE_ALL;
      ringtoneMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
      normalMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
    }
  break;
case AudioSystem.ROUTE_HEADSET:
if (routes != 0 && !mHeadsetIsConnected) {
  mHeadsetIsConnected=true;
  if (!mBluetoothScoIsConnected) {
    mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_HEADSET;
    mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | (AudioSystem.ROUTE_HEADSET | AudioSystem.ROUTE_SPEAKER);
    mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_HEADSET;
    incallMask=AudioSystem.ROUTE_ALL;
    ringtoneMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
    normalMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
  }
}
 else if (mHeadsetIsConnected) {
  mHeadsetIsConnected=false;
  if (!mBluetoothScoIsConnected) {
    if (mSpeakerIsOn) {
      mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_SPEAKER;
    }
 else {
      mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_EARPIECE;
    }
    mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_SPEAKER;
    mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_SPEAKER;
    incallMask=AudioSystem.ROUTE_ALL;
    ringtoneMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
    normalMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
  }
}
break;
case AudioSystem.ROUTE_BLUETOOTH_A2DP:
if (routes != 0 && !mBluetoothA2dpIsConnected) {
mBluetoothA2dpIsConnected=true;
mRoutes[AudioSystem.MODE_RINGTONE]|=AudioSystem.ROUTE_BLUETOOTH_A2DP;
mRoutes[AudioSystem.MODE_NORMAL]|=AudioSystem.ROUTE_BLUETOOTH_A2DP;
ringtoneMask=AudioSystem.ROUTE_BLUETOOTH_A2DP;
normalMask=AudioSystem.ROUTE_BLUETOOTH_A2DP;
}
 else if (mBluetoothA2dpIsConnected) {
mBluetoothA2dpIsConnected=false;
mRoutes[AudioSystem.MODE_RINGTONE]&=~AudioSystem.ROUTE_BLUETOOTH_A2DP;
mRoutes[AudioSystem.MODE_NORMAL]&=~AudioSystem.ROUTE_BLUETOOTH_A2DP;
ringtoneMask=AudioSystem.ROUTE_BLUETOOTH_A2DP;
normalMask=AudioSystem.ROUTE_BLUETOOTH_A2DP;
}
break;
}
if (incallMask != 0) {
AudioSystem.setRouting(AudioSystem.MODE_IN_CALL,mRoutes[AudioSystem.MODE_IN_CALL],incallMask);
}
if (ringtoneMask != 0) {
AudioSystem.setRouting(AudioSystem.MODE_RINGTONE,mRoutes[AudioSystem.MODE_RINGTONE],ringtoneMask);
}
if (normalMask != 0) {
AudioSystem.setRouting(AudioSystem.MODE_NORMAL,mRoutes[AudioSystem.MODE_NORMAL],normalMask);
}
int streamType=getActiveStreamType(AudioManager.USE_DEFAULT_STREAM_TYPE);
int index=mStreamStates[streamType].mIndex;
syncRingerAndNotificationStreamVolume(streamType,index,true);
setStreamVolumeInt(streamType,index,true);
}
}
}","/** 
 * @see AudioManager#setRouting(int,int,int) 
 */
public void setRouting(int mode,int routes,int mask){
  int incallMask=0;
  int ringtoneMask=0;
  int normalMask=0;
  if (!checkAudioSettingsPermission(""String_Node_Str"")) {
    return;
  }
synchronized (mSettingsLock) {
    if (mode == AudioSystem.MODE_INVALID) {
switch (mask) {
case AudioSystem.ROUTE_SPEAKER:
        if (routes != 0 && !mSpeakerIsOn) {
          mSpeakerIsOn=true;
          mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_SPEAKER;
          incallMask=AudioSystem.ROUTE_ALL;
        }
 else         if (mSpeakerIsOn) {
          mSpeakerIsOn=false;
          if (mBluetoothScoIsConnected) {
            mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_BLUETOOTH_SCO;
          }
 else           if (mHeadsetIsConnected) {
            mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_HEADSET;
          }
 else {
            mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_EARPIECE;
          }
          incallMask=AudioSystem.ROUTE_ALL;
        }
      break;
case AudioSystem.ROUTE_BLUETOOTH_SCO:
    if (routes != 0 && !mBluetoothScoIsConnected) {
      mBluetoothScoIsConnected=true;
      mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_BLUETOOTH_SCO;
      mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_BLUETOOTH_SCO;
      mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_BLUETOOTH_SCO;
      incallMask=AudioSystem.ROUTE_ALL;
      ringtoneMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
      normalMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
    }
 else     if (mBluetoothScoIsConnected) {
      mBluetoothScoIsConnected=false;
      if (mHeadsetIsConnected) {
        mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_HEADSET;
        mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | (AudioSystem.ROUTE_HEADSET | AudioSystem.ROUTE_SPEAKER);
        mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_HEADSET;
      }
 else {
        if (mSpeakerIsOn) {
          mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_SPEAKER;
        }
 else {
          mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_EARPIECE;
        }
        mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_SPEAKER;
        mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_SPEAKER;
      }
      incallMask=AudioSystem.ROUTE_ALL;
      ringtoneMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
      normalMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
    }
  break;
case AudioSystem.ROUTE_HEADSET:
if (routes != 0 && !mHeadsetIsConnected) {
  mHeadsetIsConnected=true;
  if (!mBluetoothScoIsConnected) {
    mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_HEADSET;
    mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | (AudioSystem.ROUTE_HEADSET | AudioSystem.ROUTE_SPEAKER);
    mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_HEADSET;
    incallMask=AudioSystem.ROUTE_ALL;
    ringtoneMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
    normalMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
  }
}
 else if (mHeadsetIsConnected) {
  mHeadsetIsConnected=false;
  if (!mBluetoothScoIsConnected) {
    if (mSpeakerIsOn) {
      mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_SPEAKER;
    }
 else {
      mRoutes[AudioSystem.MODE_IN_CALL]=AudioSystem.ROUTE_EARPIECE;
    }
    mRoutes[AudioSystem.MODE_RINGTONE]=(mRoutes[AudioSystem.MODE_RINGTONE] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_SPEAKER;
    mRoutes[AudioSystem.MODE_NORMAL]=(mRoutes[AudioSystem.MODE_NORMAL] & AudioSystem.ROUTE_BLUETOOTH_A2DP) | AudioSystem.ROUTE_SPEAKER;
    incallMask=AudioSystem.ROUTE_ALL;
    ringtoneMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
    normalMask=AudioSystem.ROUTE_ALL & ~AudioSystem.ROUTE_BLUETOOTH_A2DP;
  }
}
break;
case AudioSystem.ROUTE_BLUETOOTH_A2DP:
if (routes != 0 && !mBluetoothA2dpIsConnected) {
mBluetoothA2dpIsConnected=true;
mRoutes[AudioSystem.MODE_RINGTONE]|=AudioSystem.ROUTE_BLUETOOTH_A2DP;
mRoutes[AudioSystem.MODE_NORMAL]|=AudioSystem.ROUTE_BLUETOOTH_A2DP;
ringtoneMask=AudioSystem.ROUTE_BLUETOOTH_A2DP;
normalMask=AudioSystem.ROUTE_BLUETOOTH_A2DP;
}
 else if (mBluetoothA2dpIsConnected) {
mBluetoothA2dpIsConnected=false;
mRoutes[AudioSystem.MODE_RINGTONE]&=~AudioSystem.ROUTE_BLUETOOTH_A2DP;
mRoutes[AudioSystem.MODE_NORMAL]&=~AudioSystem.ROUTE_BLUETOOTH_A2DP;
ringtoneMask=AudioSystem.ROUTE_BLUETOOTH_A2DP;
normalMask=AudioSystem.ROUTE_BLUETOOTH_A2DP;
}
break;
}
if (incallMask != 0) {
AudioSystem.setRouting(AudioSystem.MODE_IN_CALL,mRoutes[AudioSystem.MODE_IN_CALL],incallMask);
}
if (ringtoneMask != 0) {
AudioSystem.setRouting(AudioSystem.MODE_RINGTONE,mRoutes[AudioSystem.MODE_RINGTONE],ringtoneMask);
}
if (normalMask != 0) {
AudioSystem.setRouting(AudioSystem.MODE_NORMAL,mRoutes[AudioSystem.MODE_NORMAL],normalMask);
}
int streamType=getActiveStreamType(AudioManager.USE_DEFAULT_STREAM_TYPE);
int index=mStreamStates[streamType].mIndex;
syncRingerAndNotificationStreamVolume(streamType,index,true);
setStreamVolumeInt(streamType,index,true,true);
}
}
}"
24169,"/** 
 * @see AudioManager#setMode(int) 
 */
public void setMode(int mode){
  if (!checkAudioSettingsPermission(""String_Node_Str"")) {
    return;
  }
synchronized (mSettingsLock) {
    if (mode != mMode) {
      if (AudioSystem.setMode(mode) == AudioSystem.AUDIO_STATUS_OK) {
        mMode=mode;
      }
    }
    int streamType=getActiveStreamType(AudioManager.USE_DEFAULT_STREAM_TYPE);
    int index=mStreamStates[streamType].mIndex;
    syncRingerAndNotificationStreamVolume(streamType,index,true);
    setStreamVolumeInt(streamType,index,true);
  }
}","/** 
 * @see AudioManager#setMode(int) 
 */
public void setMode(int mode){
  if (!checkAudioSettingsPermission(""String_Node_Str"")) {
    return;
  }
synchronized (mSettingsLock) {
    if (mode != mMode) {
      if (AudioSystem.setMode(mode) == AudioSystem.AUDIO_STATUS_OK) {
        mMode=mode;
      }
    }
    int streamType=getActiveStreamType(AudioManager.USE_DEFAULT_STREAM_TYPE);
    int index=mStreamStates[streamType].mIndex;
    syncRingerAndNotificationStreamVolume(streamType,index,true);
    setStreamVolumeInt(streamType,index,true,true);
  }
}"
24170,"private void readPersistedSettings(){
  final ContentResolver cr=mContentResolver;
  mRingerMode=System.getInt(cr,System.MODE_RINGER,AudioManager.RINGER_MODE_NORMAL);
  mVibrateSetting=System.getInt(cr,System.VIBRATE_ON,0);
  mMuteAffectedStreams=System.getInt(cr,System.MUTE_STREAMS_AFFECTED,((1 << AudioSystem.STREAM_MUSIC) | (1 << AudioSystem.STREAM_RING) | (1 << AudioSystem.STREAM_SYSTEM)));
  broadcastRingerMode();
  broadcastVibrateSetting(AudioManager.VIBRATE_TYPE_RINGER);
  broadcastVibrateSetting(AudioManager.VIBRATE_TYPE_NOTIFICATION);
}","private void readPersistedSettings(){
  final ContentResolver cr=mContentResolver;
  mRingerMode=System.getInt(cr,System.MODE_RINGER,AudioManager.RINGER_MODE_NORMAL);
  mVibrateSetting=System.getInt(cr,System.VIBRATE_ON,0);
  mRingerModeAffectedStreams=Settings.System.getInt(cr,Settings.System.MODE_RINGER_STREAMS_AFFECTED,((1 << AudioManager.STREAM_RING) | (1 << AudioManager.STREAM_NOTIFICATION) | (1 << AudioManager.STREAM_SYSTEM)));
  mMuteAffectedStreams=System.getInt(cr,System.MUTE_STREAMS_AFFECTED,((1 << AudioSystem.STREAM_MUSIC) | (1 << AudioSystem.STREAM_RING) | (1 << AudioSystem.STREAM_SYSTEM)));
  broadcastRingerMode();
  broadcastVibrateSetting(AudioManager.VIBRATE_TYPE_RINGER);
  broadcastVibrateSetting(AudioManager.VIBRATE_TYPE_NOTIFICATION);
}"
24171,"/** 
 * @see AudioManager#setStreamVolume(int,int,int) 
 */
public void setStreamVolume(int streamType,int index,int flags){
  ensureValidStreamType(streamType);
  syncRingerAndNotificationStreamVolume(streamType,index,false);
  setStreamVolumeInt(streamType,index,false);
  mVolumePanel.postVolumeChanged(streamType,flags);
  sendVolumeUpdate(streamType);
}","/** 
 * @see AudioManager#setStreamVolume(int,int,int) 
 */
public void setStreamVolume(int streamType,int index,int flags){
  ensureValidStreamType(streamType);
  syncRingerAndNotificationStreamVolume(streamType,index,false);
  setStreamVolumeInt(streamType,index,false,true);
  mVolumePanel.postVolumeChanged(streamType,flags);
  sendVolumeUpdate(streamType);
}"
24172,"private void updateProviderListenersLocked(String provider,boolean enabled){
  int listeners=0;
  LocationProviderProxy p=mProvidersByName.get(provider);
  if (p == null) {
    return;
  }
  ArrayList<Receiver> deadReceivers=null;
  ArrayList<UpdateRecord> records=mRecordsByProvider.get(provider);
  if (records != null) {
    final int N=records.size();
    for (int i=0; i < N; i++) {
      UpdateRecord record=records.get(i);
      if (!record.mReceiver.callProviderEnabledLocked(provider,enabled)) {
        if (deadReceivers == null) {
          deadReceivers=new ArrayList<Receiver>();
          deadReceivers.add(record.mReceiver);
        }
      }
      listeners++;
    }
  }
  if (deadReceivers != null) {
    for (int i=deadReceivers.size() - 1; i >= 0; i--) {
      removeUpdatesLocked(deadReceivers.get(i));
    }
  }
  if (enabled) {
    p.enable();
    if (listeners > 0) {
      p.setMinTime(getMinTimeLocked(provider));
      p.enableLocationTracking(true);
    }
  }
 else {
    p.enableLocationTracking(false);
    p.disable();
  }
}","private void updateProviderListenersLocked(String provider,boolean enabled){
  int listeners=0;
  LocationProviderProxy p=mProvidersByName.get(provider);
  if (p == null) {
    return;
  }
  ArrayList<Receiver> deadReceivers=null;
  ArrayList<UpdateRecord> records=mRecordsByProvider.get(provider);
  if (records != null) {
    final int N=records.size();
    for (int i=0; i < N; i++) {
      UpdateRecord record=records.get(i);
      if (!record.mReceiver.callProviderEnabledLocked(provider,enabled)) {
        if (deadReceivers == null) {
          deadReceivers=new ArrayList<Receiver>();
        }
        deadReceivers.add(record.mReceiver);
      }
      listeners++;
    }
  }
  if (deadReceivers != null) {
    for (int i=deadReceivers.size() - 1; i >= 0; i--) {
      removeUpdatesLocked(deadReceivers.get(i));
    }
  }
  if (enabled) {
    p.enable();
    if (listeners > 0) {
      p.setMinTime(getMinTimeLocked(provider));
      p.enableLocationTracking(true);
    }
  }
 else {
    p.enableLocationTracking(false);
    p.disable();
  }
}"
24173,"/** 
 * Formats a date or a time range according to the local conventions. <p> Example output strings (date formats in these examples are shown using the US date format convention but that may change depending on the local settings): <ul> <li>10:15am</li> <li>3:00pm - 4:00pm</li> <li>3pm - 4pm</li> <li>3PM - 4PM</li> <li>08:00 - 17:00</li> <li>Oct 9</li> <li>Tue, Oct 9</li> <li>October 9, 2007</li> <li>Oct 9 - 10</li> <li>Oct 9 - 10, 2007</li> <li>Oct 28 - Nov 3, 2007</li> <li>Dec 31, 2007 - Jan 1, 2008</li> <li>Oct 9, 8:00am - Oct 10, 5:00pm</li> <li>12/31/2007 - 01/01/2008</li> </ul> <p> The flags argument is a bitmask of options from the following list: <ul> <li>FORMAT_SHOW_TIME</li> <li>FORMAT_SHOW_WEEKDAY</li> <li>FORMAT_SHOW_YEAR</li> <li>FORMAT_NO_YEAR</li> <li>FORMAT_SHOW_DATE</li> <li>FORMAT_NO_MONTH_DAY</li> <li>FORMAT_12HOUR</li> <li>FORMAT_24HOUR</li> <li>FORMAT_CAP_AMPM</li> <li>FORMAT_NO_NOON</li> <li>FORMAT_CAP_NOON</li> <li>FORMAT_NO_MIDNIGHT</li> <li>FORMAT_CAP_MIDNIGHT</li> <li>FORMAT_UTC</li> <li>FORMAT_ABBREV_TIME</li> <li>FORMAT_ABBREV_WEEKDAY</li> <li>FORMAT_ABBREV_MONTH</li> <li>FORMAT_ABBREV_ALL</li> <li>FORMAT_NUMERIC_DATE</li> </ul> <p> If FORMAT_SHOW_TIME is set, the time is shown as part of the date range. If the start and end time are the same, then just the start time is shown. <p> If FORMAT_SHOW_WEEKDAY is set, then the weekday is shown. <p> If FORMAT_SHOW_YEAR is set, then the year is always shown. If FORMAT_NO_YEAR is set, then the year is not shown. If neither FORMAT_SHOW_YEAR nor FORMAT_NO_YEAR are set, then the year is shown only if it is different from the current year, or if the start and end dates fall on different years.  If both are set, FORMAT_SHOW_YEAR takes precedence. <p> Normally the date is shown unless the start and end day are the same. If FORMAT_SHOW_DATE is set, then the date is always shown, even for same day ranges. <p> If FORMAT_NO_MONTH_DAY is set, then if the date is shown, just the month name will be shown, not the day of the month.  For example, ""January, 2008"" instead of ""January 6 - 12, 2008"". <p> If FORMAT_CAP_AMPM is set and 12-hour time is used, then the ""AM"" and ""PM"" are capitalized. <p> If FORMAT_NO_NOON is set and 12-hour time is used, then ""12pm"" is shown instead of ""noon"". <p> If FORMAT_CAP_NOON is set and 12-hour time is used, then ""Noon"" is shown instead of ""noon"". <p> If FORMAT_NO_MIDNIGHT is set and 12-hour time is used, then ""12am"" is shown instead of ""midnight"". <p> If FORMAT_CAP_NOON is set and 12-hour time is used, then ""Midnight"" is shown instead of ""midnight"". <p> If FORMAT_12HOUR is set and the time is shown, then the time is shown in the 12-hour time format. You should not normally set this. Instead, let the time format be chosen automatically according to the system settings. If both FORMAT_12HOUR and FORMAT_24HOUR are set, then FORMAT_24HOUR takes precedence. <p> If FORMAT_24HOUR is set and the time is shown, then the time is shown in the 24-hour time format. You should not normally set this. Instead, let the time format be chosen automatically according to the system settings. If both FORMAT_12HOUR and FORMAT_24HOUR are set, then FORMAT_24HOUR takes precedence. <p> If FORMAT_UTC is set, then the UTC timezone is used for the start and end milliseconds. <p> If FORMAT_ABBREV_TIME is set and 12-hour time format is used, then the start and end times (if shown) are abbreviated by not showing the minutes if they are zero.  For example, instead of ""3:00pm"" the time would be abbreviated to ""3pm"". <p> If FORMAT_ABBREV_WEEKDAY is set, then the weekday (if shown) is abbreviated to a 3-letter string. <p> If FORMAT_ABBREV_MONTH is set, then the month (if shown) is abbreviated to a 3-letter string. <p> If FORMAT_ABBREV_ALL is set, then the weekday and the month (if shown) are abbreviated to 3-letter strings. <p> If FORMAT_NUMERIC_DATE is set, then the date is shown in numeric format instead of using the name of the month.  For example, ""12/31/2008"" instead of ""December 31, 2008"".
 * @param context the context is required only if the time is shown
 * @param startMillis the start time in UTC milliseconds
 * @param endMillis the end time in UTC milliseconds
 * @param flags a bit mask of options
 * @return a string containing the formatted date/time range.
 */
public static String formatDateRange(Context context,long startMillis,long endMillis,int flags){
  Resources res=Resources.getSystem();
  boolean showTime=(flags & FORMAT_SHOW_TIME) != 0;
  boolean showWeekDay=(flags & FORMAT_SHOW_WEEKDAY) != 0;
  boolean showYear=(flags & FORMAT_SHOW_YEAR) != 0;
  boolean noYear=(flags & FORMAT_NO_YEAR) != 0;
  boolean useUTC=(flags & FORMAT_UTC) != 0;
  boolean abbrevWeekDay=(flags & (FORMAT_ABBREV_WEEKDAY | FORMAT_ABBREV_ALL)) != 0;
  boolean abbrevMonth=(flags & (FORMAT_ABBREV_MONTH | FORMAT_ABBREV_ALL)) != 0;
  boolean noMonthDay=(flags & FORMAT_NO_MONTH_DAY) != 0;
  boolean numericDate=(flags & FORMAT_NUMERIC_DATE) != 0;
  boolean isInstant=(startMillis == endMillis);
  Time startDate=useUTC ? new Time(Time.TIMEZONE_UTC) : new Time();
  startDate.set(startMillis);
  Time endDate;
  int dayDistance;
  if (isInstant) {
    endDate=startDate;
    dayDistance=0;
  }
 else {
    endDate=useUTC ? new Time(Time.TIMEZONE_UTC) : new Time();
    endDate.set(endMillis);
    int startJulianDay=Time.getJulianDay(startMillis,startDate.gmtoff);
    int endJulianDay=Time.getJulianDay(endMillis,endDate.gmtoff);
    dayDistance=endJulianDay - startJulianDay;
  }
  if (!isInstant && (endDate.hour | endDate.minute | endDate.second) == 0 && (!showTime || dayDistance <= 1)) {
    endDate.monthDay-=1;
    endDate.normalize(true);
  }
  int startDay=startDate.monthDay;
  int startMonthNum=startDate.month;
  int startYear=startDate.year;
  int endDay=endDate.monthDay;
  int endMonthNum=endDate.month;
  int endYear=endDate.year;
  String startWeekDayString=""String_Node_Str"";
  String endWeekDayString=""String_Node_Str"";
  if (showWeekDay) {
    String weekDayFormat=""String_Node_Str"";
    if (abbrevWeekDay) {
      weekDayFormat=ABBREV_WEEKDAY_FORMAT;
    }
 else {
      weekDayFormat=WEEKDAY_FORMAT;
    }
    startWeekDayString=startDate.format(weekDayFormat);
    endWeekDayString=isInstant ? startWeekDayString : endDate.format(weekDayFormat);
  }
  String startTimeString=""String_Node_Str"";
  String endTimeString=""String_Node_Str"";
  if (showTime) {
    String startTimeFormat=""String_Node_Str"";
    String endTimeFormat=""String_Node_Str"";
    boolean force24Hour=(flags & FORMAT_24HOUR) != 0;
    boolean force12Hour=(flags & FORMAT_12HOUR) != 0;
    boolean use24Hour;
    if (force24Hour) {
      use24Hour=true;
    }
 else     if (force12Hour) {
      use24Hour=false;
    }
 else {
      use24Hour=DateFormat.is24HourFormat(context);
    }
    if (use24Hour) {
      startTimeFormat=HOUR_MINUTE_24;
      endTimeFormat=HOUR_MINUTE_24;
    }
 else {
      boolean abbrevTime=(flags & (FORMAT_ABBREV_TIME | FORMAT_ABBREV_ALL)) != 0;
      boolean capAMPM=(flags & FORMAT_CAP_AMPM) != 0;
      boolean noNoon=(flags & FORMAT_NO_NOON) != 0;
      boolean capNoon=(flags & FORMAT_CAP_NOON) != 0;
      boolean noMidnight=(flags & FORMAT_NO_MIDNIGHT) != 0;
      boolean capMidnight=(flags & FORMAT_CAP_MIDNIGHT) != 0;
      boolean startOnTheHour=startDate.minute == 0 && startDate.second == 0;
      boolean endOnTheHour=endDate.minute == 0 && endDate.second == 0;
      if (abbrevTime && startOnTheHour) {
        if (capAMPM) {
          startTimeFormat=res.getString(com.android.internal.R.string.hour_cap_ampm);
        }
 else {
          startTimeFormat=res.getString(com.android.internal.R.string.hour_ampm);
        }
      }
 else {
        if (capAMPM) {
          startTimeFormat=res.getString(com.android.internal.R.string.hour_minute_cap_ampm);
        }
 else {
          startTimeFormat=res.getString(com.android.internal.R.string.hour_minute_ampm);
        }
      }
      if (!isInstant) {
        if (abbrevTime && endOnTheHour) {
          if (capAMPM) {
            endTimeFormat=res.getString(com.android.internal.R.string.hour_cap_ampm);
          }
 else {
            endTimeFormat=res.getString(com.android.internal.R.string.hour_ampm);
          }
        }
 else {
          if (capAMPM) {
            endTimeFormat=res.getString(com.android.internal.R.string.hour_minute_cap_ampm);
          }
 else {
            endTimeFormat=res.getString(com.android.internal.R.string.hour_minute_ampm);
          }
        }
        if (endDate.hour == 12 && endOnTheHour && !noNoon) {
          if (capNoon) {
            endTimeFormat=res.getString(com.android.internal.R.string.Noon);
          }
 else {
            endTimeFormat=res.getString(com.android.internal.R.string.noon);
          }
        }
 else         if (endDate.hour == 0 && endOnTheHour && !noMidnight) {
          if (capMidnight) {
            endTimeFormat=res.getString(com.android.internal.R.string.Midnight);
          }
 else {
            endTimeFormat=res.getString(com.android.internal.R.string.midnight);
          }
        }
      }
      if (startDate.hour == 12 && startOnTheHour && !noNoon) {
        if (capNoon) {
          startTimeFormat=res.getString(com.android.internal.R.string.Noon);
        }
 else {
          startTimeFormat=res.getString(com.android.internal.R.string.noon);
        }
      }
    }
    startTimeString=startDate.format(startTimeFormat);
    endTimeString=isInstant ? startTimeString : endDate.format(endTimeFormat);
  }
  if (showYear) {
  }
 else   if (noYear) {
    showYear=false;
  }
 else   if (startYear != endYear) {
    showYear=true;
  }
 else {
    Time currentTime=new Time();
    currentTime.setToNow();
    showYear=startYear != currentTime.year;
  }
  String defaultDateFormat, fullFormat, dateRange;
  if (numericDate) {
    defaultDateFormat=res.getString(com.android.internal.R.string.numeric_date);
  }
 else   if (showYear) {
    if (abbrevMonth) {
      if (noMonthDay) {
        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month_year);
      }
 else {
        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month_day_year);
      }
    }
 else {
      if (noMonthDay) {
        defaultDateFormat=res.getString(com.android.internal.R.string.month_year);
      }
 else {
        defaultDateFormat=res.getString(com.android.internal.R.string.month_day_year);
      }
    }
  }
 else {
    if (abbrevMonth) {
      if (noMonthDay) {
        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month);
      }
 else {
        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month_day);
      }
    }
 else {
      if (noMonthDay) {
        defaultDateFormat=res.getString(com.android.internal.R.string.month);
      }
 else {
        defaultDateFormat=res.getString(com.android.internal.R.string.month_day);
      }
    }
  }
  if (showWeekDay) {
    if (showTime) {
      fullFormat=res.getString(com.android.internal.R.string.wday1_date1_time1_wday2_date2_time2);
    }
 else {
      fullFormat=res.getString(com.android.internal.R.string.wday1_date1_wday2_date2);
    }
  }
 else {
    if (showTime) {
      fullFormat=res.getString(com.android.internal.R.string.date1_time1_date2_time2);
    }
 else {
      fullFormat=res.getString(com.android.internal.R.string.date1_date2);
    }
  }
  if (noMonthDay && startMonthNum == endMonthNum) {
    String startDateString=startDate.format(defaultDateFormat);
    return startDateString;
  }
  if (startYear != endYear || noMonthDay) {
    String startDateString=startDate.format(defaultDateFormat);
    String endDateString=endDate.format(defaultDateFormat);
    dateRange=String.format(fullFormat,startWeekDayString,startDateString,startTimeString,endWeekDayString,endDateString,endTimeString);
    return dateRange;
  }
  String monthFormat;
  if (numericDate) {
    monthFormat=NUMERIC_MONTH_FORMAT;
  }
 else   if (abbrevMonth) {
    monthFormat=ABBREV_MONTH_FORMAT;
  }
 else {
    monthFormat=MONTH_FORMAT;
  }
  String startMonthString=startDate.format(monthFormat);
  String startMonthDayString=startDate.format(MONTH_DAY_FORMAT);
  String startYearString=startDate.format(YEAR_FORMAT);
  String endMonthString=isInstant ? null : endDate.format(monthFormat);
  String endMonthDayString=isInstant ? null : endDate.format(MONTH_DAY_FORMAT);
  String endYearString=isInstant ? null : endDate.format(YEAR_FORMAT);
  if (startMonthNum != endMonthNum) {
    int index=0;
    if (showWeekDay)     index=1;
    if (showYear)     index+=2;
    if (showTime)     index+=4;
    if (numericDate)     index+=8;
    int resId=sameYearTable[index];
    fullFormat=res.getString(resId);
    dateRange=String.format(fullFormat,startWeekDayString,startMonthString,startMonthDayString,startYearString,startTimeString,endWeekDayString,endMonthString,endMonthDayString,endYearString,endTimeString);
    return dateRange;
  }
  if (startDay != endDay) {
    int index=0;
    if (showWeekDay)     index=1;
    if (showYear)     index+=2;
    if (showTime)     index+=4;
    if (numericDate)     index+=8;
    int resId=sameMonthTable[index];
    fullFormat=res.getString(resId);
    dateRange=String.format(fullFormat,startWeekDayString,startMonthString,startMonthDayString,startYearString,startTimeString,endWeekDayString,endMonthString,endMonthDayString,endYearString,endTimeString);
    return dateRange;
  }
  boolean showDate=(flags & FORMAT_SHOW_DATE) != 0;
  if (!showTime && !showDate && !showWeekDay)   showDate=true;
  String timeString=""String_Node_Str"";
  if (showTime) {
    if (isInstant) {
      timeString=startTimeString;
    }
 else {
      String timeFormat=res.getString(com.android.internal.R.string.time1_time2);
      timeString=String.format(timeFormat,startTimeString,endTimeString);
    }
  }
  fullFormat=""String_Node_Str"";
  String dateString=""String_Node_Str"";
  if (showDate) {
    dateString=startDate.format(defaultDateFormat);
    if (showWeekDay) {
      if (showTime) {
        fullFormat=res.getString(com.android.internal.R.string.time_wday_date);
      }
 else {
        fullFormat=res.getString(com.android.internal.R.string.wday_date);
      }
    }
 else {
      if (showTime) {
        fullFormat=res.getString(com.android.internal.R.string.time_date);
      }
 else {
        return dateString;
      }
    }
  }
 else   if (showWeekDay) {
    if (showTime) {
      fullFormat=res.getString(com.android.internal.R.string.time_wday);
    }
 else {
      return startWeekDayString;
    }
  }
 else   if (showTime) {
    return timeString;
  }
  dateRange=String.format(fullFormat,timeString,startWeekDayString,dateString);
  return dateRange;
}","/** 
 * Formats a date or a time range according to the local conventions. <p> Example output strings (date formats in these examples are shown using the US date format convention but that may change depending on the local settings): <ul> <li>10:15am</li> <li>3:00pm - 4:00pm</li> <li>3pm - 4pm</li> <li>3PM - 4PM</li> <li>08:00 - 17:00</li> <li>Oct 9</li> <li>Tue, Oct 9</li> <li>October 9, 2007</li> <li>Oct 9 - 10</li> <li>Oct 9 - 10, 2007</li> <li>Oct 28 - Nov 3, 2007</li> <li>Dec 31, 2007 - Jan 1, 2008</li> <li>Oct 9, 8:00am - Oct 10, 5:00pm</li> <li>12/31/2007 - 01/01/2008</li> </ul> <p> The flags argument is a bitmask of options from the following list: <ul> <li>FORMAT_SHOW_TIME</li> <li>FORMAT_SHOW_WEEKDAY</li> <li>FORMAT_SHOW_YEAR</li> <li>FORMAT_NO_YEAR</li> <li>FORMAT_SHOW_DATE</li> <li>FORMAT_NO_MONTH_DAY</li> <li>FORMAT_12HOUR</li> <li>FORMAT_24HOUR</li> <li>FORMAT_CAP_AMPM</li> <li>FORMAT_NO_NOON</li> <li>FORMAT_CAP_NOON</li> <li>FORMAT_NO_MIDNIGHT</li> <li>FORMAT_CAP_MIDNIGHT</li> <li>FORMAT_UTC</li> <li>FORMAT_ABBREV_TIME</li> <li>FORMAT_ABBREV_WEEKDAY</li> <li>FORMAT_ABBREV_MONTH</li> <li>FORMAT_ABBREV_ALL</li> <li>FORMAT_NUMERIC_DATE</li> </ul> <p> If FORMAT_SHOW_TIME is set, the time is shown as part of the date range. If the start and end time are the same, then just the start time is shown. <p> If FORMAT_SHOW_WEEKDAY is set, then the weekday is shown. <p> If FORMAT_SHOW_YEAR is set, then the year is always shown. If FORMAT_NO_YEAR is set, then the year is not shown. If neither FORMAT_SHOW_YEAR nor FORMAT_NO_YEAR are set, then the year is shown only if it is different from the current year, or if the start and end dates fall on different years.  If both are set, FORMAT_SHOW_YEAR takes precedence. <p> Normally the date is shown unless the start and end day are the same. If FORMAT_SHOW_DATE is set, then the date is always shown, even for same day ranges. <p> If FORMAT_NO_MONTH_DAY is set, then if the date is shown, just the month name will be shown, not the day of the month.  For example, ""January, 2008"" instead of ""January 6 - 12, 2008"". <p> If FORMAT_CAP_AMPM is set and 12-hour time is used, then the ""AM"" and ""PM"" are capitalized.  You should not use this flag because in some locales these terms cannot be capitalized, and in many others it doesn't make sense to do so even though it is possible. <p> If FORMAT_NO_NOON is set and 12-hour time is used, then ""12pm"" is shown instead of ""noon"". <p> If FORMAT_CAP_NOON is set and 12-hour time is used, then ""Noon"" is shown instead of ""noon"".  You should probably not use this flag because in many locales it will not make sense to capitalize the term. <p> If FORMAT_NO_MIDNIGHT is set and 12-hour time is used, then ""12am"" is shown instead of ""midnight"". <p> If FORMAT_CAP_MIDNIGHT is set and 12-hour time is used, then ""Midnight"" is shown instead of ""midnight"".  You should probably not use this flag because in many locales it will not make sense to capitalize the term. <p> If FORMAT_12HOUR is set and the time is shown, then the time is shown in the 12-hour time format. You should not normally set this. Instead, let the time format be chosen automatically according to the system settings. If both FORMAT_12HOUR and FORMAT_24HOUR are set, then FORMAT_24HOUR takes precedence. <p> If FORMAT_24HOUR is set and the time is shown, then the time is shown in the 24-hour time format. You should not normally set this. Instead, let the time format be chosen automatically according to the system settings. If both FORMAT_12HOUR and FORMAT_24HOUR are set, then FORMAT_24HOUR takes precedence. <p> If FORMAT_UTC is set, then the UTC timezone is used for the start and end milliseconds. <p> If FORMAT_ABBREV_TIME is set and 12-hour time format is used, then the start and end times (if shown) are abbreviated by not showing the minutes if they are zero.  For example, instead of ""3:00pm"" the time would be abbreviated to ""3pm"". <p> If FORMAT_ABBREV_WEEKDAY is set, then the weekday (if shown) is abbreviated to a 3-letter string. <p> If FORMAT_ABBREV_MONTH is set, then the month (if shown) is abbreviated to a 3-letter string. <p> If FORMAT_ABBREV_ALL is set, then the weekday and the month (if shown) are abbreviated to 3-letter strings. <p> If FORMAT_NUMERIC_DATE is set, then the date is shown in numeric format instead of using the name of the month.  For example, ""12/31/2008"" instead of ""December 31, 2008"".
 * @param context the context is required only if the time is shown
 * @param startMillis the start time in UTC milliseconds
 * @param endMillis the end time in UTC milliseconds
 * @param flags a bit mask of options
 * @return a string containing the formatted date/time range.
 */
public static String formatDateRange(Context context,long startMillis,long endMillis,int flags){
  Resources res=Resources.getSystem();
  boolean showTime=(flags & FORMAT_SHOW_TIME) != 0;
  boolean showWeekDay=(flags & FORMAT_SHOW_WEEKDAY) != 0;
  boolean showYear=(flags & FORMAT_SHOW_YEAR) != 0;
  boolean noYear=(flags & FORMAT_NO_YEAR) != 0;
  boolean useUTC=(flags & FORMAT_UTC) != 0;
  boolean abbrevWeekDay=(flags & (FORMAT_ABBREV_WEEKDAY | FORMAT_ABBREV_ALL)) != 0;
  boolean abbrevMonth=(flags & (FORMAT_ABBREV_MONTH | FORMAT_ABBREV_ALL)) != 0;
  boolean noMonthDay=(flags & FORMAT_NO_MONTH_DAY) != 0;
  boolean numericDate=(flags & FORMAT_NUMERIC_DATE) != 0;
  boolean isInstant=(startMillis == endMillis);
  Time startDate=useUTC ? new Time(Time.TIMEZONE_UTC) : new Time();
  startDate.set(startMillis);
  Time endDate;
  int dayDistance;
  if (isInstant) {
    endDate=startDate;
    dayDistance=0;
  }
 else {
    endDate=useUTC ? new Time(Time.TIMEZONE_UTC) : new Time();
    endDate.set(endMillis);
    int startJulianDay=Time.getJulianDay(startMillis,startDate.gmtoff);
    int endJulianDay=Time.getJulianDay(endMillis,endDate.gmtoff);
    dayDistance=endJulianDay - startJulianDay;
  }
  if (!isInstant && (endDate.hour | endDate.minute | endDate.second) == 0 && (!showTime || dayDistance <= 1)) {
    endDate.monthDay-=1;
    endDate.normalize(true);
  }
  int startDay=startDate.monthDay;
  int startMonthNum=startDate.month;
  int startYear=startDate.year;
  int endDay=endDate.monthDay;
  int endMonthNum=endDate.month;
  int endYear=endDate.year;
  String startWeekDayString=""String_Node_Str"";
  String endWeekDayString=""String_Node_Str"";
  if (showWeekDay) {
    String weekDayFormat=""String_Node_Str"";
    if (abbrevWeekDay) {
      weekDayFormat=ABBREV_WEEKDAY_FORMAT;
    }
 else {
      weekDayFormat=WEEKDAY_FORMAT;
    }
    startWeekDayString=startDate.format(weekDayFormat);
    endWeekDayString=isInstant ? startWeekDayString : endDate.format(weekDayFormat);
  }
  String startTimeString=""String_Node_Str"";
  String endTimeString=""String_Node_Str"";
  if (showTime) {
    String startTimeFormat=""String_Node_Str"";
    String endTimeFormat=""String_Node_Str"";
    boolean force24Hour=(flags & FORMAT_24HOUR) != 0;
    boolean force12Hour=(flags & FORMAT_12HOUR) != 0;
    boolean use24Hour;
    if (force24Hour) {
      use24Hour=true;
    }
 else     if (force12Hour) {
      use24Hour=false;
    }
 else {
      use24Hour=DateFormat.is24HourFormat(context);
    }
    if (use24Hour) {
      startTimeFormat=endTimeFormat=res.getString(com.android.internal.R.string.hour_minute_24);
    }
 else {
      boolean abbrevTime=(flags & (FORMAT_ABBREV_TIME | FORMAT_ABBREV_ALL)) != 0;
      boolean capAMPM=(flags & FORMAT_CAP_AMPM) != 0;
      boolean noNoon=(flags & FORMAT_NO_NOON) != 0;
      boolean capNoon=(flags & FORMAT_CAP_NOON) != 0;
      boolean noMidnight=(flags & FORMAT_NO_MIDNIGHT) != 0;
      boolean capMidnight=(flags & FORMAT_CAP_MIDNIGHT) != 0;
      boolean startOnTheHour=startDate.minute == 0 && startDate.second == 0;
      boolean endOnTheHour=endDate.minute == 0 && endDate.second == 0;
      if (abbrevTime && startOnTheHour) {
        if (capAMPM) {
          startTimeFormat=res.getString(com.android.internal.R.string.hour_cap_ampm);
        }
 else {
          startTimeFormat=res.getString(com.android.internal.R.string.hour_ampm);
        }
      }
 else {
        if (capAMPM) {
          startTimeFormat=res.getString(com.android.internal.R.string.hour_minute_cap_ampm);
        }
 else {
          startTimeFormat=res.getString(com.android.internal.R.string.hour_minute_ampm);
        }
      }
      if (!isInstant) {
        if (abbrevTime && endOnTheHour) {
          if (capAMPM) {
            endTimeFormat=res.getString(com.android.internal.R.string.hour_cap_ampm);
          }
 else {
            endTimeFormat=res.getString(com.android.internal.R.string.hour_ampm);
          }
        }
 else {
          if (capAMPM) {
            endTimeFormat=res.getString(com.android.internal.R.string.hour_minute_cap_ampm);
          }
 else {
            endTimeFormat=res.getString(com.android.internal.R.string.hour_minute_ampm);
          }
        }
        if (endDate.hour == 12 && endOnTheHour && !noNoon) {
          if (capNoon) {
            endTimeFormat=res.getString(com.android.internal.R.string.Noon);
          }
 else {
            endTimeFormat=res.getString(com.android.internal.R.string.noon);
          }
        }
 else         if (endDate.hour == 0 && endOnTheHour && !noMidnight) {
          if (capMidnight) {
            endTimeFormat=res.getString(com.android.internal.R.string.Midnight);
          }
 else {
            endTimeFormat=res.getString(com.android.internal.R.string.midnight);
          }
        }
      }
      if (startDate.hour == 12 && startOnTheHour && !noNoon) {
        if (capNoon) {
          startTimeFormat=res.getString(com.android.internal.R.string.Noon);
        }
 else {
          startTimeFormat=res.getString(com.android.internal.R.string.noon);
        }
      }
    }
    startTimeString=startDate.format(startTimeFormat);
    endTimeString=isInstant ? startTimeString : endDate.format(endTimeFormat);
  }
  if (showYear) {
  }
 else   if (noYear) {
    showYear=false;
  }
 else   if (startYear != endYear) {
    showYear=true;
  }
 else {
    Time currentTime=new Time();
    currentTime.setToNow();
    showYear=startYear != currentTime.year;
  }
  String defaultDateFormat, fullFormat, dateRange;
  if (numericDate) {
    defaultDateFormat=res.getString(com.android.internal.R.string.numeric_date);
  }
 else   if (showYear) {
    if (abbrevMonth) {
      if (noMonthDay) {
        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month_year);
      }
 else {
        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month_day_year);
      }
    }
 else {
      if (noMonthDay) {
        defaultDateFormat=res.getString(com.android.internal.R.string.month_year);
      }
 else {
        defaultDateFormat=res.getString(com.android.internal.R.string.month_day_year);
      }
    }
  }
 else {
    if (abbrevMonth) {
      if (noMonthDay) {
        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month);
      }
 else {
        defaultDateFormat=res.getString(com.android.internal.R.string.abbrev_month_day);
      }
    }
 else {
      if (noMonthDay) {
        defaultDateFormat=res.getString(com.android.internal.R.string.month);
      }
 else {
        defaultDateFormat=res.getString(com.android.internal.R.string.month_day);
      }
    }
  }
  if (showWeekDay) {
    if (showTime) {
      fullFormat=res.getString(com.android.internal.R.string.wday1_date1_time1_wday2_date2_time2);
    }
 else {
      fullFormat=res.getString(com.android.internal.R.string.wday1_date1_wday2_date2);
    }
  }
 else {
    if (showTime) {
      fullFormat=res.getString(com.android.internal.R.string.date1_time1_date2_time2);
    }
 else {
      fullFormat=res.getString(com.android.internal.R.string.date1_date2);
    }
  }
  if (noMonthDay && startMonthNum == endMonthNum) {
    String startDateString=startDate.format(defaultDateFormat);
    return startDateString;
  }
  if (startYear != endYear || noMonthDay) {
    String startDateString=startDate.format(defaultDateFormat);
    String endDateString=endDate.format(defaultDateFormat);
    dateRange=String.format(fullFormat,startWeekDayString,startDateString,startTimeString,endWeekDayString,endDateString,endTimeString);
    return dateRange;
  }
  String monthFormat;
  if (numericDate) {
    monthFormat=NUMERIC_MONTH_FORMAT;
  }
 else   if (abbrevMonth) {
    monthFormat=ABBREV_MONTH_FORMAT;
  }
 else {
    monthFormat=MONTH_FORMAT;
  }
  String startMonthString=startDate.format(monthFormat);
  String startMonthDayString=startDate.format(MONTH_DAY_FORMAT);
  String startYearString=startDate.format(YEAR_FORMAT);
  String endMonthString=isInstant ? null : endDate.format(monthFormat);
  String endMonthDayString=isInstant ? null : endDate.format(MONTH_DAY_FORMAT);
  String endYearString=isInstant ? null : endDate.format(YEAR_FORMAT);
  if (startMonthNum != endMonthNum) {
    int index=0;
    if (showWeekDay)     index=1;
    if (showYear)     index+=2;
    if (showTime)     index+=4;
    if (numericDate)     index+=8;
    int resId=sameYearTable[index];
    fullFormat=res.getString(resId);
    dateRange=String.format(fullFormat,startWeekDayString,startMonthString,startMonthDayString,startYearString,startTimeString,endWeekDayString,endMonthString,endMonthDayString,endYearString,endTimeString);
    return dateRange;
  }
  if (startDay != endDay) {
    int index=0;
    if (showWeekDay)     index=1;
    if (showYear)     index+=2;
    if (showTime)     index+=4;
    if (numericDate)     index+=8;
    int resId=sameMonthTable[index];
    fullFormat=res.getString(resId);
    dateRange=String.format(fullFormat,startWeekDayString,startMonthString,startMonthDayString,startYearString,startTimeString,endWeekDayString,endMonthString,endMonthDayString,endYearString,endTimeString);
    return dateRange;
  }
  boolean showDate=(flags & FORMAT_SHOW_DATE) != 0;
  if (!showTime && !showDate && !showWeekDay)   showDate=true;
  String timeString=""String_Node_Str"";
  if (showTime) {
    if (isInstant) {
      timeString=startTimeString;
    }
 else {
      String timeFormat=res.getString(com.android.internal.R.string.time1_time2);
      timeString=String.format(timeFormat,startTimeString,endTimeString);
    }
  }
  fullFormat=""String_Node_Str"";
  String dateString=""String_Node_Str"";
  if (showDate) {
    dateString=startDate.format(defaultDateFormat);
    if (showWeekDay) {
      if (showTime) {
        fullFormat=res.getString(com.android.internal.R.string.time_wday_date);
      }
 else {
        fullFormat=res.getString(com.android.internal.R.string.wday_date);
      }
    }
 else {
      if (showTime) {
        fullFormat=res.getString(com.android.internal.R.string.time_date);
      }
 else {
        return dateString;
      }
    }
  }
 else   if (showWeekDay) {
    if (showTime) {
      fullFormat=res.getString(com.android.internal.R.string.time_wday);
    }
 else {
      return startWeekDayString;
    }
  }
 else   if (showTime) {
    return timeString;
  }
  dateRange=String.format(fullFormat,timeString,startWeekDayString,dateString);
  return dateRange;
}"
24174,"public void save(OutputStream stream,boolean closeStream) throws IOException {
  if (!mChanged) {
    return;
  }
  DataOutputStream out=null;
  try {
    long start;
    if (PROFILE_LOADING_SAVING) {
      start=SystemClock.elapsedRealtime();
    }
    final HashMap<String,ArrayList<Gesture>> maps=mNamedGestures;
    out=new DataOutputStream((stream instanceof BufferedOutputStream) ? out : new BufferedOutputStream(out,GestureConstants.IO_BUFFER_SIZE));
    out.writeShort(FILE_FORMAT_VERSION);
    out.writeInt(maps.size());
    for (    Map.Entry<String,ArrayList<Gesture>> entry : maps.entrySet()) {
      final String key=entry.getKey();
      final ArrayList<Gesture> examples=entry.getValue();
      final int count=examples.size();
      out.writeUTF(key);
      out.writeInt(count);
      for (int i=0; i < count; i++) {
        examples.get(i).serialize(out);
      }
    }
    out.flush();
    if (PROFILE_LOADING_SAVING) {
      long end=SystemClock.elapsedRealtime();
      Log.d(LOG_TAG,""String_Node_Str"" + (end - start) + ""String_Node_Str"");
    }
    mChanged=false;
  }
  finally {
    if (closeStream)     GestureUtilities.closeStream(out);
  }
}","public void save(OutputStream stream,boolean closeStream) throws IOException {
  if (!mChanged) {
    return;
  }
  DataOutputStream out=null;
  try {
    long start;
    if (PROFILE_LOADING_SAVING) {
      start=SystemClock.elapsedRealtime();
    }
    final HashMap<String,ArrayList<Gesture>> maps=mNamedGestures;
    out=new DataOutputStream((stream instanceof BufferedOutputStream) ? stream : new BufferedOutputStream(stream,GestureConstants.IO_BUFFER_SIZE));
    out.writeShort(FILE_FORMAT_VERSION);
    out.writeInt(maps.size());
    for (    Map.Entry<String,ArrayList<Gesture>> entry : maps.entrySet()) {
      final String key=entry.getKey();
      final ArrayList<Gesture> examples=entry.getValue();
      final int count=examples.size();
      out.writeUTF(key);
      out.writeInt(count);
      for (int i=0; i < count; i++) {
        examples.get(i).serialize(out);
      }
    }
    out.flush();
    if (PROFILE_LOADING_SAVING) {
      long end=SystemClock.elapsedRealtime();
      Log.d(LOG_TAG,""String_Node_Str"" + (end - start) + ""String_Node_Str"");
    }
    mChanged=false;
  }
  finally {
    if (closeStream)     GestureUtilities.closeStream(out);
  }
}"
24175,"@Override protected void runTest() throws Throwable {
  ReliabilityTestActivity activity=getActivity();
  LayoutTestsAutoRunner runner=(LayoutTestsAutoRunner)getInstrumentation();
  File testListFile=new File(TEST_LIST_FILE);
  if (!testListFile.exists())   throw new FileNotFoundException(""String_Node_Str"");
  BufferedReader listReader=new BufferedReader(new FileReader(testListFile));
  String lastUrl=readTestStatus();
  if (lastUrl != null && !TEST_DONE.equals(lastUrl))   fastForward(listReader,lastUrl);
  String url=null;
  Handler handler=null;
  boolean timeoutFlag=false;
  long start, elapsed;
  while ((url=listReader.readLine()) != null) {
    start=System.currentTimeMillis();
    Log.v(LOGTAG,""String_Node_Str"" + url);
    updateTestStatus(url);
    activity.reset();
    handler=activity.getHandler();
    handler.sendMessage(handler.obtainMessage(ReliabilityTestActivity.MSG_NAVIGATE,runner.mTimeoutInMillis,0,url));
    timeoutFlag=activity.waitUntilDone();
    elapsed=System.currentTimeMillis() - start;
    if (elapsed < 1000) {
      Log.w(LOGTAG,""String_Node_Str"" + elapsed + ""String_Node_Str"");
    }
 else {
      Log.v(LOGTAG,""String_Node_Str"" + elapsed + ""String_Node_Str"");
    }
    if (timeoutFlag) {
      writeTimeoutFile(url);
    }
    System.runFinalization();
    System.gc();
    System.gc();
  }
  activity.finish();
  listReader.close();
}","@Override protected void runTest() throws Throwable {
  ReliabilityTestActivity activity=getActivity();
  LayoutTestsAutoRunner runner=(LayoutTestsAutoRunner)getInstrumentation();
  File testListFile=new File(TEST_LIST_FILE);
  if (!testListFile.exists())   throw new FileNotFoundException(""String_Node_Str"");
  BufferedReader listReader=new BufferedReader(new FileReader(testListFile));
  String lastUrl=readTestStatus();
  if (lastUrl != null && !TEST_DONE.equals(lastUrl))   fastForward(listReader,lastUrl);
  String url=null;
  Handler handler=null;
  boolean timeoutFlag=false;
  long start, elapsed;
  while ((url=listReader.readLine()) != null) {
    start=System.currentTimeMillis();
    Log.v(LOGTAG,""String_Node_Str"" + url);
    updateTestStatus(url);
    activity.reset();
    handler=activity.getHandler();
    handler.sendMessage(handler.obtainMessage(ReliabilityTestActivity.MSG_NAVIGATE,runner.mTimeoutInMillis,0,url));
    timeoutFlag=activity.waitUntilDone();
    elapsed=System.currentTimeMillis() - start;
    if (elapsed < 1000) {
      Log.w(LOGTAG,""String_Node_Str"" + elapsed + ""String_Node_Str"");
    }
 else {
      Log.v(LOGTAG,""String_Node_Str"" + elapsed + ""String_Node_Str"");
    }
    if (timeoutFlag) {
      writeTimeoutFile(url);
    }
    System.runFinalization();
    System.gc();
    System.gc();
  }
  updateTestStatus(TEST_DONE);
  activity.finish();
  listReader.close();
}"
24176,"private void readFormatV1(DataInputStream in) throws IOException {
  final Learner classifier=mClassifier;
  final HashMap<String,ArrayList<Gesture>> namedGestures=mNamedGestures;
  namedGestures.clear();
  final int entriesCount=in.readInt();
  for (int i=0; i < entriesCount; i++) {
    final String name=in.readUTF();
    final int gestureCount=in.readInt();
    final ArrayList<Gesture> gestures=new ArrayList<Gesture>(gestureCount);
    for (int j=0; j < gestureCount; j++) {
      final Gesture gesture=Gesture.deserialize(in);
      gestures.add(gesture);
      classifier.addInstance(Instance.createInstance(mSequenceType,gesture,name));
    }
    namedGestures.put(name,gestures);
  }
}","private void readFormatV1(DataInputStream in) throws IOException {
  final Learner classifier=mClassifier;
  final HashMap<String,ArrayList<Gesture>> namedGestures=mNamedGestures;
  namedGestures.clear();
  final int entriesCount=in.readInt();
  for (int i=0; i < entriesCount; i++) {
    final String name=in.readUTF();
    final int gestureCount=in.readInt();
    final ArrayList<Gesture> gestures=new ArrayList<Gesture>(gestureCount);
    for (int j=0; j < gestureCount; j++) {
      final Gesture gesture=Gesture.deserialize(in);
      gestures.add(gesture);
      classifier.addInstance(Instance.createInstance(mSequenceType,mOrientationStyle,gesture,name));
    }
    namedGestures.put(name,gestures);
  }
}"
24177,"/** 
 * Add a gesture for the entry
 * @param entryName entry name
 * @param gesture
 */
public void addGesture(String entryName,Gesture gesture){
  if (entryName == null || entryName.length() == 0) {
    return;
  }
  ArrayList<Gesture> gestures=mNamedGestures.get(entryName);
  if (gestures == null) {
    gestures=new ArrayList<Gesture>();
    mNamedGestures.put(entryName,gestures);
  }
  gestures.add(gesture);
  mClassifier.addInstance(Instance.createInstance(mSequenceType,gesture,entryName));
  mChanged=true;
}","/** 
 * Add a gesture for the entry
 * @param entryName entry name
 * @param gesture
 */
public void addGesture(String entryName,Gesture gesture){
  if (entryName == null || entryName.length() == 0) {
    return;
  }
  ArrayList<Gesture> gestures=mNamedGestures.get(entryName);
  if (gestures == null) {
    gestures=new ArrayList<Gesture>();
    mNamedGestures.put(entryName,gestures);
  }
  gestures.add(gesture);
  mClassifier.addInstance(Instance.createInstance(mSequenceType,mOrientationStyle,gesture,entryName));
  mChanged=true;
}"
24178,"/** 
 * Recognize a gesture
 * @param gesture the query
 * @return a list of predictions of possible entries for a given gesture
 */
public ArrayList<Prediction> recognize(Gesture gesture){
  Instance instance=Instance.createInstance(mSequenceType,gesture,null);
  return mClassifier.classify(mSequenceType,instance.vector);
}","/** 
 * Recognize a gesture
 * @param gesture the query
 * @return a list of predictions of possible entries for a given gesture
 */
public ArrayList<Prediction> recognize(Gesture gesture){
  Instance instance=Instance.createInstance(mSequenceType,mOrientationStyle,gesture,null);
  return mClassifier.classify(mSequenceType,instance.vector);
}"
24179,"/** 
 * Convert the stroke to a Path based on the number of points
 * @param width the width of the bounding box of the target path
 * @param height the height of the bounding box of the target path
 * @param numSample the number of points needed
 * @return the path
 */
public Path toPath(float width,float height,int numSample){
  final float[] pts=GestureUtilities.temporalSampling(this,numSample);
  final RectF rect=boundingBox;
  final Matrix matrix=new Matrix();
  matrix.setTranslate(-rect.left,-rect.top);
  matrix.postScale(width / rect.width(),height / rect.height());
  matrix.mapPoints(pts);
  float mX=0;
  float mY=0;
  Path path=null;
  final int count=pts.length;
  for (int i=0; i < count; i+=2) {
    float x=pts[i];
    float y=pts[i + 1];
    if (path == null) {
      path=new Path();
      path.moveTo(x,y);
      mX=x;
      mY=y;
    }
 else {
      float dx=Math.abs(x - mX);
      float dy=Math.abs(y - mY);
      if (dx >= TOUCH_TOLERANCE || dy >= TOUCH_TOLERANCE) {
        path.quadTo(mX,mY,(x + mX) / 2,(y + mY) / 2);
        mX=x;
        mY=y;
      }
    }
  }
  return path;
}","/** 
 * Convert the stroke to a Path based on the number of points
 * @param width the width of the bounding box of the target path
 * @param height the height of the bounding box of the target path
 * @param numSample the number of points needed
 * @return the path
 */
public Path toPath(float width,float height,int numSample){
  final float[] pts=GestureUtilities.temporalSampling(this,numSample);
  final RectF rect=boundingBox;
  GestureUtilities.translate(pts,-rect.left,-rect.top);
  float sx=width / rect.width();
  float sy=height / rect.height();
  float scale=sx > sy ? sy : sx;
  GestureUtilities.scale(pts,scale,scale);
  float mX=0;
  float mY=0;
  Path path=null;
  final int count=pts.length;
  for (int i=0; i < count; i+=2) {
    float x=pts[i];
    float y=pts[i + 1];
    if (path == null) {
      path=new Path();
      path.moveTo(x,y);
      mX=x;
      mY=y;
    }
 else {
      float dx=Math.abs(x - mX);
      float dy=Math.abs(y - mY);
      if (dx >= TOUCH_TOLERANCE || dy >= TOUCH_TOLERANCE) {
        path.quadTo(mX,mY,(x + mX) / 2,(y + mY) / 2);
        mX=x;
        mY=y;
      }
    }
  }
  return path;
}"
24180,"static OrientedBoundingBox computeOrientedBoundingBox(float[] points,float[] centroid){
  Matrix tr=new Matrix();
  tr.setTranslate(-centroid[0],-centroid[1]);
  tr.mapPoints(points);
  double[][] array=computeCoVariance(points);
  double[] targetVector=computeOrientation(array);
  float angle;
  if (targetVector[0] == 0 && targetVector[1] == 0) {
    angle=-90;
  }
 else {
    angle=(float)Math.atan2(targetVector[1],targetVector[0]);
    angle=(float)(180 * angle / Math.PI);
    Matrix trans=new Matrix();
    trans.setRotate(-angle);
    trans.mapPoints(points);
  }
  float minx=Float.MAX_VALUE;
  float miny=Float.MAX_VALUE;
  float maxx=Float.MIN_VALUE;
  float maxy=Float.MIN_VALUE;
  int count=points.length;
  for (int i=0; i < count; i++) {
    if (points[i] < minx) {
      minx=points[i];
    }
    if (points[i] > maxx) {
      maxx=points[i];
    }
    i++;
    if (points[i] < miny) {
      miny=points[i];
    }
    if (points[i] > maxy) {
      maxy=points[i];
    }
  }
  return new OrientedBoundingBox(angle,centroid[0],centroid[1],maxx - minx,maxy - miny);
}","static OrientedBoundingBox computeOrientedBoundingBox(float[] points,float[] centroid){
  translate(points,-centroid[0],-centroid[1]);
  double[][] array=computeCoVariance(points);
  double[] targetVector=computeOrientation(array);
  float angle;
  if (targetVector[0] == 0 && targetVector[1] == 0) {
    angle=(float)-Math.PI / 2;
  }
 else {
    angle=(float)Math.atan2(targetVector[1],targetVector[0]);
    rotate(points,-angle);
  }
  float minx=Float.MAX_VALUE;
  float miny=Float.MAX_VALUE;
  float maxx=Float.MIN_VALUE;
  float maxy=Float.MIN_VALUE;
  int count=points.length;
  for (int i=0; i < count; i++) {
    if (points[i] < minx) {
      minx=points[i];
    }
    if (points[i] > maxx) {
      maxx=points[i];
    }
    i++;
    if (points[i] < miny) {
      miny=points[i];
    }
    if (points[i] > maxy) {
      maxy=points[i];
    }
  }
  return new OrientedBoundingBox(angle,centroid[0],centroid[1],maxx - minx,maxy - miny);
}"
24181,"/** 
 * create a learning instance for a single stroke gesture
 * @param gesture
 * @param label
 * @return the instance
 */
static Instance createInstance(int samplingType,Gesture gesture,String label){
  float[] pts;
  Instance instance;
  if (samplingType == GestureLibrary.SEQUENCE_SENSITIVE) {
    pts=temporalSampler(samplingType,gesture);
    instance=new Instance(gesture.getID(),pts,label);
    instance.normalize();
  }
 else {
    pts=spatialSampler(gesture);
    instance=new Instance(gesture.getID(),pts,label);
  }
  return instance;
}","/** 
 * create a learning instance for a single stroke gesture
 * @param gesture
 * @param label
 * @return the instance
 */
static Instance createInstance(int sequenceType,int orientationType,Gesture gesture,String label){
  float[] pts;
  Instance instance;
  if (sequenceType == GestureLibrary.SEQUENCE_SENSITIVE) {
    pts=temporalSampler(orientationType,gesture);
    instance=new Instance(gesture.getID(),pts,label);
    instance.normalize();
  }
 else {
    pts=spatialSampler(gesture);
    instance=new Instance(gesture.getID(),pts,label);
  }
  return instance;
}"
24182,"private static float[] temporalSampler(int samplingType,Gesture gesture){
  float[] pts=GestureUtilities.temporalSampling(gesture.getStrokes().get(0),SEQUENCE_SAMPLE_SIZE);
  float[] center=GestureUtilities.computeCentroid(pts);
  float orientation=(float)Math.atan2(pts[1] - center[1],pts[0] - center[0]);
  orientation*=180 / Math.PI;
  float adjustment=-orientation;
  if (samplingType == GestureLibrary.ORIENTATION_SENSITIVE) {
    int count=ORIENTATIONS.length;
    for (int i=0; i < count; i++) {
      float delta=ORIENTATIONS[i] - orientation;
      if (Math.abs(delta) < Math.abs(adjustment)) {
        adjustment=delta;
      }
    }
  }
  Matrix m=new Matrix();
  m.setTranslate(-center[0],-center[1]);
  m.postRotate(adjustment);
  m.mapPoints(pts);
  return pts;
}","private static float[] temporalSampler(int orientationType,Gesture gesture){
  float[] pts=GestureUtilities.temporalSampling(gesture.getStrokes().get(0),SEQUENCE_SAMPLE_SIZE);
  float[] center=GestureUtilities.computeCentroid(pts);
  float orientation=(float)Math.atan2(pts[1] - center[1],pts[0] - center[0]);
  float adjustment=-orientation;
  if (orientationType == GestureLibrary.ORIENTATION_SENSITIVE) {
    int count=ORIENTATIONS.length;
    for (int i=0; i < count; i++) {
      float delta=ORIENTATIONS[i] - orientation;
      if (Math.abs(delta) < Math.abs(adjustment)) {
        adjustment=delta;
      }
    }
  }
  GestureUtilities.translate(pts,-center[0],-center[1]);
  GestureUtilities.rotate(pts,adjustment);
  return pts;
}"
24183,"@Override ArrayList<Prediction> classify(int gestureType,float[] vector){
  ArrayList<Prediction> predictions=new ArrayList<Prediction>();
  ArrayList<Instance> instances=getInstances();
  int count=instances.size();
  TreeMap<String,Double> label2score=new TreeMap<String,Double>();
  for (int i=0; i < count; i++) {
    Instance sample=instances.get(i);
    if (sample.vector.length != vector.length) {
      continue;
    }
    double distance;
    if (gestureType == GestureLibrary.SEQUENCE_SENSITIVE) {
      distance=GestureUtilities.cosineDistance(sample.vector,vector);
    }
 else {
      distance=GestureUtilities.squaredEuclideanDistance(sample.vector,vector);
    }
    double weight;
    if (distance == 0) {
      weight=Double.MAX_VALUE;
    }
 else {
      weight=1 / distance;
    }
    Double score=label2score.get(sample.label);
    if (score == null || weight > score) {
      label2score.put(sample.label,weight);
    }
  }
  double sum=0;
  for (  String name : label2score.keySet()) {
    double score=label2score.get(name);
    sum+=score;
    predictions.add(new Prediction(name,score));
  }
  for (  Prediction prediction : predictions) {
    prediction.score/=sum;
  }
  Collections.sort(predictions,new Comparator<Prediction>(){
    public int compare(    Prediction object1,    Prediction object2){
      double score1=object1.score;
      double score2=object2.score;
      if (score1 > score2) {
        return -1;
      }
 else       if (score1 < score2) {
        return 1;
      }
 else {
        return 0;
      }
    }
  }
);
  return predictions;
}","@Override ArrayList<Prediction> classify(int sequenceType,float[] vector){
  ArrayList<Prediction> predictions=new ArrayList<Prediction>();
  ArrayList<Instance> instances=getInstances();
  int count=instances.size();
  TreeMap<String,Double> label2score=new TreeMap<String,Double>();
  for (int i=0; i < count; i++) {
    Instance sample=instances.get(i);
    if (sample.vector.length != vector.length) {
      continue;
    }
    double distance;
    if (sequenceType == GestureLibrary.SEQUENCE_SENSITIVE) {
      distance=GestureUtilities.cosineDistance(sample.vector,vector);
    }
 else {
      distance=GestureUtilities.squaredEuclideanDistance(sample.vector,vector);
    }
    double weight;
    if (distance == 0) {
      weight=Double.MAX_VALUE;
    }
 else {
      weight=1 / distance;
    }
    Double score=label2score.get(sample.label);
    if (score == null || weight > score) {
      label2score.put(sample.label,weight);
    }
  }
  double sum=0;
  for (  String name : label2score.keySet()) {
    double score=label2score.get(name);
    sum+=score;
    predictions.add(new Prediction(name,score));
  }
  for (  Prediction prediction : predictions) {
    prediction.score/=sum;
  }
  Collections.sort(predictions,new Comparator<Prediction>(){
    public int compare(    Prediction object1,    Prediction object2){
      double score1=object1.score;
      double score2=object2.score;
      if (score1 > score2) {
        return -1;
      }
 else       if (score1 < score2) {
        return 1;
      }
 else {
        return 0;
      }
    }
  }
);
  return predictions;
}"
24184,"private void readFormatV1(DataInputStream in) throws IOException {
  final Learner classifier=mClassifier;
  final HashMap<String,ArrayList<Gesture>> namedGestures=mNamedGestures;
  namedGestures.clear();
  final int entriesCount=in.readInt();
  for (int i=0; i < entriesCount; i++) {
    final String name=in.readUTF();
    final int gestureCount=in.readInt();
    final ArrayList<Gesture> gestures=new ArrayList<Gesture>(gestureCount);
    for (int j=0; j < gestureCount; j++) {
      final Gesture gesture=Gesture.deserialize(in);
      gestures.add(gesture);
      classifier.addInstance(Instance.createInstance(mSequenceType,gesture,name));
    }
    namedGestures.put(name,gestures);
  }
}","private void readFormatV1(DataInputStream in) throws IOException {
  final Learner classifier=mClassifier;
  final HashMap<String,ArrayList<Gesture>> namedGestures=mNamedGestures;
  namedGestures.clear();
  final int entriesCount=in.readInt();
  for (int i=0; i < entriesCount; i++) {
    final String name=in.readUTF();
    final int gestureCount=in.readInt();
    final ArrayList<Gesture> gestures=new ArrayList<Gesture>(gestureCount);
    for (int j=0; j < gestureCount; j++) {
      final Gesture gesture=Gesture.deserialize(in);
      gestures.add(gesture);
      classifier.addInstance(Instance.createInstance(mSequenceType,mOrientationStyle,gesture,name));
    }
    namedGestures.put(name,gestures);
  }
}"
24185,"/** 
 * Add a gesture for the entry
 * @param entryName entry name
 * @param gesture
 */
public void addGesture(String entryName,Gesture gesture){
  if (entryName == null || entryName.length() == 0) {
    return;
  }
  ArrayList<Gesture> gestures=mNamedGestures.get(entryName);
  if (gestures == null) {
    gestures=new ArrayList<Gesture>();
    mNamedGestures.put(entryName,gestures);
  }
  gestures.add(gesture);
  mClassifier.addInstance(Instance.createInstance(mSequenceType,gesture,entryName));
  mChanged=true;
}","/** 
 * Add a gesture for the entry
 * @param entryName entry name
 * @param gesture
 */
public void addGesture(String entryName,Gesture gesture){
  if (entryName == null || entryName.length() == 0) {
    return;
  }
  ArrayList<Gesture> gestures=mNamedGestures.get(entryName);
  if (gestures == null) {
    gestures=new ArrayList<Gesture>();
    mNamedGestures.put(entryName,gestures);
  }
  gestures.add(gesture);
  mClassifier.addInstance(Instance.createInstance(mSequenceType,mOrientationStyle,gesture,entryName));
  mChanged=true;
}"
24186,"/** 
 * Recognize a gesture
 * @param gesture the query
 * @return a list of predictions of possible entries for a given gesture
 */
public ArrayList<Prediction> recognize(Gesture gesture){
  Instance instance=Instance.createInstance(mSequenceType,gesture,null);
  return mClassifier.classify(mSequenceType,instance.vector);
}","/** 
 * Recognize a gesture
 * @param gesture the query
 * @return a list of predictions of possible entries for a given gesture
 */
public ArrayList<Prediction> recognize(Gesture gesture){
  Instance instance=Instance.createInstance(mSequenceType,mOrientationStyle,gesture,null);
  return mClassifier.classify(mSequenceType,instance.vector);
}"
24187,"/** 
 * Convert the stroke to a Path based on the number of points
 * @param width the width of the bounding box of the target path
 * @param height the height of the bounding box of the target path
 * @param numSample the number of points needed
 * @return the path
 */
public Path toPath(float width,float height,int numSample){
  final float[] pts=GestureUtilities.temporalSampling(this,numSample);
  final RectF rect=boundingBox;
  final Matrix matrix=new Matrix();
  matrix.setTranslate(-rect.left,-rect.top);
  matrix.postScale(width / rect.width(),height / rect.height());
  matrix.mapPoints(pts);
  float mX=0;
  float mY=0;
  Path path=null;
  final int count=pts.length;
  for (int i=0; i < count; i+=2) {
    float x=pts[i];
    float y=pts[i + 1];
    if (path == null) {
      path=new Path();
      path.moveTo(x,y);
      mX=x;
      mY=y;
    }
 else {
      float dx=Math.abs(x - mX);
      float dy=Math.abs(y - mY);
      if (dx >= TOUCH_TOLERANCE || dy >= TOUCH_TOLERANCE) {
        path.quadTo(mX,mY,(x + mX) / 2,(y + mY) / 2);
        mX=x;
        mY=y;
      }
    }
  }
  return path;
}","/** 
 * Convert the stroke to a Path based on the number of points
 * @param width the width of the bounding box of the target path
 * @param height the height of the bounding box of the target path
 * @param numSample the number of points needed
 * @return the path
 */
public Path toPath(float width,float height,int numSample){
  final float[] pts=GestureUtilities.temporalSampling(this,numSample);
  final RectF rect=boundingBox;
  GestureUtilities.translate(pts,-rect.left,-rect.top);
  float sx=width / rect.width();
  float sy=height / rect.height();
  float scale=sx > sy ? sy : sx;
  GestureUtilities.scale(pts,scale,scale);
  float mX=0;
  float mY=0;
  Path path=null;
  final int count=pts.length;
  for (int i=0; i < count; i+=2) {
    float x=pts[i];
    float y=pts[i + 1];
    if (path == null) {
      path=new Path();
      path.moveTo(x,y);
      mX=x;
      mY=y;
    }
 else {
      float dx=Math.abs(x - mX);
      float dy=Math.abs(y - mY);
      if (dx >= TOUCH_TOLERANCE || dy >= TOUCH_TOLERANCE) {
        path.quadTo(mX,mY,(x + mX) / 2,(y + mY) / 2);
        mX=x;
        mY=y;
      }
    }
  }
  return path;
}"
24188,"static OrientedBoundingBox computeOrientedBoundingBox(float[] points,float[] centroid){
  Matrix tr=new Matrix();
  tr.setTranslate(-centroid[0],-centroid[1]);
  tr.mapPoints(points);
  double[][] array=computeCoVariance(points);
  double[] targetVector=computeOrientation(array);
  float angle;
  if (targetVector[0] == 0 && targetVector[1] == 0) {
    angle=-90;
  }
 else {
    angle=(float)Math.atan2(targetVector[1],targetVector[0]);
    angle=(float)(180 * angle / Math.PI);
    Matrix trans=new Matrix();
    trans.setRotate(-angle);
    trans.mapPoints(points);
  }
  float minx=Float.MAX_VALUE;
  float miny=Float.MAX_VALUE;
  float maxx=Float.MIN_VALUE;
  float maxy=Float.MIN_VALUE;
  int count=points.length;
  for (int i=0; i < count; i++) {
    if (points[i] < minx) {
      minx=points[i];
    }
    if (points[i] > maxx) {
      maxx=points[i];
    }
    i++;
    if (points[i] < miny) {
      miny=points[i];
    }
    if (points[i] > maxy) {
      maxy=points[i];
    }
  }
  return new OrientedBoundingBox(angle,centroid[0],centroid[1],maxx - minx,maxy - miny);
}","static OrientedBoundingBox computeOrientedBoundingBox(float[] points,float[] centroid){
  translate(points,-centroid[0],-centroid[1]);
  double[][] array=computeCoVariance(points);
  double[] targetVector=computeOrientation(array);
  float angle;
  if (targetVector[0] == 0 && targetVector[1] == 0) {
    angle=(float)-Math.PI / 2;
  }
 else {
    angle=(float)Math.atan2(targetVector[1],targetVector[0]);
    rotate(points,-angle);
  }
  float minx=Float.MAX_VALUE;
  float miny=Float.MAX_VALUE;
  float maxx=Float.MIN_VALUE;
  float maxy=Float.MIN_VALUE;
  int count=points.length;
  for (int i=0; i < count; i++) {
    if (points[i] < minx) {
      minx=points[i];
    }
    if (points[i] > maxx) {
      maxx=points[i];
    }
    i++;
    if (points[i] < miny) {
      miny=points[i];
    }
    if (points[i] > maxy) {
      maxy=points[i];
    }
  }
  return new OrientedBoundingBox(angle,centroid[0],centroid[1],maxx - minx,maxy - miny);
}"
24189,"/** 
 * create a learning instance for a single stroke gesture
 * @param gesture
 * @param label
 * @return the instance
 */
static Instance createInstance(int samplingType,Gesture gesture,String label){
  float[] pts;
  Instance instance;
  if (samplingType == GestureLibrary.SEQUENCE_SENSITIVE) {
    pts=temporalSampler(samplingType,gesture);
    instance=new Instance(gesture.getID(),pts,label);
    instance.normalize();
  }
 else {
    pts=spatialSampler(gesture);
    instance=new Instance(gesture.getID(),pts,label);
  }
  return instance;
}","/** 
 * create a learning instance for a single stroke gesture
 * @param gesture
 * @param label
 * @return the instance
 */
static Instance createInstance(int sequenceType,int orientationType,Gesture gesture,String label){
  float[] pts;
  Instance instance;
  if (sequenceType == GestureLibrary.SEQUENCE_SENSITIVE) {
    pts=temporalSampler(orientationType,gesture);
    instance=new Instance(gesture.getID(),pts,label);
    instance.normalize();
  }
 else {
    pts=spatialSampler(gesture);
    instance=new Instance(gesture.getID(),pts,label);
  }
  return instance;
}"
24190,"private static float[] temporalSampler(int samplingType,Gesture gesture){
  float[] pts=GestureUtilities.temporalSampling(gesture.getStrokes().get(0),SEQUENCE_SAMPLE_SIZE);
  float[] center=GestureUtilities.computeCentroid(pts);
  float orientation=(float)Math.atan2(pts[1] - center[1],pts[0] - center[0]);
  orientation*=180 / Math.PI;
  float adjustment=-orientation;
  if (samplingType == GestureLibrary.ORIENTATION_SENSITIVE) {
    int count=ORIENTATIONS.length;
    for (int i=0; i < count; i++) {
      float delta=ORIENTATIONS[i] - orientation;
      if (Math.abs(delta) < Math.abs(adjustment)) {
        adjustment=delta;
      }
    }
  }
  Matrix m=new Matrix();
  m.setTranslate(-center[0],-center[1]);
  m.postRotate(adjustment);
  m.mapPoints(pts);
  return pts;
}","private static float[] temporalSampler(int orientationType,Gesture gesture){
  float[] pts=GestureUtilities.temporalSampling(gesture.getStrokes().get(0),SEQUENCE_SAMPLE_SIZE);
  float[] center=GestureUtilities.computeCentroid(pts);
  float orientation=(float)Math.atan2(pts[1] - center[1],pts[0] - center[0]);
  float adjustment=-orientation;
  if (orientationType == GestureLibrary.ORIENTATION_SENSITIVE) {
    int count=ORIENTATIONS.length;
    for (int i=0; i < count; i++) {
      float delta=ORIENTATIONS[i] - orientation;
      if (Math.abs(delta) < Math.abs(adjustment)) {
        adjustment=delta;
      }
    }
  }
  GestureUtilities.translate(pts,-center[0],-center[1]);
  GestureUtilities.rotate(pts,adjustment);
  return pts;
}"
24191,"@Override ArrayList<Prediction> classify(int gestureType,float[] vector){
  ArrayList<Prediction> predictions=new ArrayList<Prediction>();
  ArrayList<Instance> instances=getInstances();
  int count=instances.size();
  TreeMap<String,Double> label2score=new TreeMap<String,Double>();
  for (int i=0; i < count; i++) {
    Instance sample=instances.get(i);
    if (sample.vector.length != vector.length) {
      continue;
    }
    double distance;
    if (gestureType == GestureLibrary.SEQUENCE_SENSITIVE) {
      distance=GestureUtilities.cosineDistance(sample.vector,vector);
    }
 else {
      distance=GestureUtilities.squaredEuclideanDistance(sample.vector,vector);
    }
    double weight;
    if (distance == 0) {
      weight=Double.MAX_VALUE;
    }
 else {
      weight=1 / distance;
    }
    Double score=label2score.get(sample.label);
    if (score == null || weight > score) {
      label2score.put(sample.label,weight);
    }
  }
  double sum=0;
  for (  String name : label2score.keySet()) {
    double score=label2score.get(name);
    sum+=score;
    predictions.add(new Prediction(name,score));
  }
  for (  Prediction prediction : predictions) {
    prediction.score/=sum;
  }
  Collections.sort(predictions,new Comparator<Prediction>(){
    public int compare(    Prediction object1,    Prediction object2){
      double score1=object1.score;
      double score2=object2.score;
      if (score1 > score2) {
        return -1;
      }
 else       if (score1 < score2) {
        return 1;
      }
 else {
        return 0;
      }
    }
  }
);
  return predictions;
}","@Override ArrayList<Prediction> classify(int sequenceType,float[] vector){
  ArrayList<Prediction> predictions=new ArrayList<Prediction>();
  ArrayList<Instance> instances=getInstances();
  int count=instances.size();
  TreeMap<String,Double> label2score=new TreeMap<String,Double>();
  for (int i=0; i < count; i++) {
    Instance sample=instances.get(i);
    if (sample.vector.length != vector.length) {
      continue;
    }
    double distance;
    if (sequenceType == GestureLibrary.SEQUENCE_SENSITIVE) {
      distance=GestureUtilities.cosineDistance(sample.vector,vector);
    }
 else {
      distance=GestureUtilities.squaredEuclideanDistance(sample.vector,vector);
    }
    double weight;
    if (distance == 0) {
      weight=Double.MAX_VALUE;
    }
 else {
      weight=1 / distance;
    }
    Double score=label2score.get(sample.label);
    if (score == null || weight > score) {
      label2score.put(sample.label,weight);
    }
  }
  double sum=0;
  for (  String name : label2score.keySet()) {
    double score=label2score.get(name);
    sum+=score;
    predictions.add(new Prediction(name,score));
  }
  for (  Prediction prediction : predictions) {
    prediction.score/=sum;
  }
  Collections.sort(predictions,new Comparator<Prediction>(){
    public int compare(    Prediction object1,    Prediction object2){
      double score1=object1.score;
      double score2=object2.score;
      if (score1 > score2) {
        return -1;
      }
 else       if (score1 < score2) {
        return 1;
      }
 else {
        return 0;
      }
    }
  }
);
  return predictions;
}"
24192,"private void readFormatV1(DataInputStream in) throws IOException {
  final Learner classifier=mClassifier;
  final HashMap<String,ArrayList<Gesture>> namedGestures=mNamedGestures;
  namedGestures.clear();
  final int entriesCount=in.readInt();
  for (int i=0; i < entriesCount; i++) {
    final String name=in.readUTF();
    final int gestureCount=in.readInt();
    final ArrayList<Gesture> gestures=new ArrayList<Gesture>(gestureCount);
    for (int j=0; j < gestureCount; j++) {
      final Gesture gesture=Gesture.deserialize(in);
      gestures.add(gesture);
      classifier.addInstance(Instance.createInstance(mSequenceType,gesture,name));
    }
    namedGestures.put(name,gestures);
  }
}","private void readFormatV1(DataInputStream in) throws IOException {
  final Learner classifier=mClassifier;
  final HashMap<String,ArrayList<Gesture>> namedGestures=mNamedGestures;
  namedGestures.clear();
  final int entriesCount=in.readInt();
  for (int i=0; i < entriesCount; i++) {
    final String name=in.readUTF();
    final int gestureCount=in.readInt();
    final ArrayList<Gesture> gestures=new ArrayList<Gesture>(gestureCount);
    for (int j=0; j < gestureCount; j++) {
      final Gesture gesture=Gesture.deserialize(in);
      gestures.add(gesture);
      classifier.addInstance(Instance.createInstance(mSequenceType,mOrientationStyle,gesture,name));
    }
    namedGestures.put(name,gestures);
  }
}"
24193,"/** 
 * Add a gesture for the entry
 * @param entryName entry name
 * @param gesture
 */
public void addGesture(String entryName,Gesture gesture){
  if (entryName == null || entryName.length() == 0) {
    return;
  }
  ArrayList<Gesture> gestures=mNamedGestures.get(entryName);
  if (gestures == null) {
    gestures=new ArrayList<Gesture>();
    mNamedGestures.put(entryName,gestures);
  }
  gestures.add(gesture);
  mClassifier.addInstance(Instance.createInstance(mSequenceType,gesture,entryName));
  mChanged=true;
}","/** 
 * Add a gesture for the entry
 * @param entryName entry name
 * @param gesture
 */
public void addGesture(String entryName,Gesture gesture){
  if (entryName == null || entryName.length() == 0) {
    return;
  }
  ArrayList<Gesture> gestures=mNamedGestures.get(entryName);
  if (gestures == null) {
    gestures=new ArrayList<Gesture>();
    mNamedGestures.put(entryName,gestures);
  }
  gestures.add(gesture);
  mClassifier.addInstance(Instance.createInstance(mSequenceType,mOrientationStyle,gesture,entryName));
  mChanged=true;
}"
24194,"/** 
 * Recognize a gesture
 * @param gesture the query
 * @return a list of predictions of possible entries for a given gesture
 */
public ArrayList<Prediction> recognize(Gesture gesture){
  Instance instance=Instance.createInstance(mSequenceType,gesture,null);
  return mClassifier.classify(mSequenceType,instance.vector);
}","/** 
 * Recognize a gesture
 * @param gesture the query
 * @return a list of predictions of possible entries for a given gesture
 */
public ArrayList<Prediction> recognize(Gesture gesture){
  Instance instance=Instance.createInstance(mSequenceType,mOrientationStyle,gesture,null);
  return mClassifier.classify(mSequenceType,instance.vector);
}"
24195,"/** 
 * Convert the stroke to a Path based on the number of points
 * @param width the width of the bounding box of the target path
 * @param height the height of the bounding box of the target path
 * @param numSample the number of points needed
 * @return the path
 */
public Path toPath(float width,float height,int numSample){
  final float[] pts=GestureUtilities.temporalSampling(this,numSample);
  final RectF rect=boundingBox;
  final Matrix matrix=new Matrix();
  matrix.setTranslate(-rect.left,-rect.top);
  matrix.postScale(width / rect.width(),height / rect.height());
  matrix.mapPoints(pts);
  float mX=0;
  float mY=0;
  Path path=null;
  final int count=pts.length;
  for (int i=0; i < count; i+=2) {
    float x=pts[i];
    float y=pts[i + 1];
    if (path == null) {
      path=new Path();
      path.moveTo(x,y);
      mX=x;
      mY=y;
    }
 else {
      float dx=Math.abs(x - mX);
      float dy=Math.abs(y - mY);
      if (dx >= TOUCH_TOLERANCE || dy >= TOUCH_TOLERANCE) {
        path.quadTo(mX,mY,(x + mX) / 2,(y + mY) / 2);
        mX=x;
        mY=y;
      }
    }
  }
  return path;
}","/** 
 * Convert the stroke to a Path based on the number of points
 * @param width the width of the bounding box of the target path
 * @param height the height of the bounding box of the target path
 * @param numSample the number of points needed
 * @return the path
 */
public Path toPath(float width,float height,int numSample){
  final float[] pts=GestureUtilities.temporalSampling(this,numSample);
  final RectF rect=boundingBox;
  GestureUtilities.translate(pts,-rect.left,-rect.top);
  float sx=width / rect.width();
  float sy=height / rect.height();
  float scale=sx > sy ? sy : sx;
  GestureUtilities.scale(pts,scale,scale);
  float mX=0;
  float mY=0;
  Path path=null;
  final int count=pts.length;
  for (int i=0; i < count; i+=2) {
    float x=pts[i];
    float y=pts[i + 1];
    if (path == null) {
      path=new Path();
      path.moveTo(x,y);
      mX=x;
      mY=y;
    }
 else {
      float dx=Math.abs(x - mX);
      float dy=Math.abs(y - mY);
      if (dx >= TOUCH_TOLERANCE || dy >= TOUCH_TOLERANCE) {
        path.quadTo(mX,mY,(x + mX) / 2,(y + mY) / 2);
        mX=x;
        mY=y;
      }
    }
  }
  return path;
}"
24196,"static OrientedBoundingBox computeOrientedBoundingBox(float[] points,float[] centroid){
  Matrix tr=new Matrix();
  tr.setTranslate(-centroid[0],-centroid[1]);
  tr.mapPoints(points);
  double[][] array=computeCoVariance(points);
  double[] targetVector=computeOrientation(array);
  float angle;
  if (targetVector[0] == 0 && targetVector[1] == 0) {
    angle=-90;
  }
 else {
    angle=(float)Math.atan2(targetVector[1],targetVector[0]);
    angle=(float)(180 * angle / Math.PI);
    Matrix trans=new Matrix();
    trans.setRotate(-angle);
    trans.mapPoints(points);
  }
  float minx=Float.MAX_VALUE;
  float miny=Float.MAX_VALUE;
  float maxx=Float.MIN_VALUE;
  float maxy=Float.MIN_VALUE;
  int count=points.length;
  for (int i=0; i < count; i++) {
    if (points[i] < minx) {
      minx=points[i];
    }
    if (points[i] > maxx) {
      maxx=points[i];
    }
    i++;
    if (points[i] < miny) {
      miny=points[i];
    }
    if (points[i] > maxy) {
      maxy=points[i];
    }
  }
  return new OrientedBoundingBox(angle,centroid[0],centroid[1],maxx - minx,maxy - miny);
}","static OrientedBoundingBox computeOrientedBoundingBox(float[] points,float[] centroid){
  translate(points,-centroid[0],-centroid[1]);
  double[][] array=computeCoVariance(points);
  double[] targetVector=computeOrientation(array);
  float angle;
  if (targetVector[0] == 0 && targetVector[1] == 0) {
    angle=(float)-Math.PI / 2;
  }
 else {
    angle=(float)Math.atan2(targetVector[1],targetVector[0]);
    rotate(points,-angle);
  }
  float minx=Float.MAX_VALUE;
  float miny=Float.MAX_VALUE;
  float maxx=Float.MIN_VALUE;
  float maxy=Float.MIN_VALUE;
  int count=points.length;
  for (int i=0; i < count; i++) {
    if (points[i] < minx) {
      minx=points[i];
    }
    if (points[i] > maxx) {
      maxx=points[i];
    }
    i++;
    if (points[i] < miny) {
      miny=points[i];
    }
    if (points[i] > maxy) {
      maxy=points[i];
    }
  }
  return new OrientedBoundingBox(angle,centroid[0],centroid[1],maxx - minx,maxy - miny);
}"
24197,"/** 
 * create a learning instance for a single stroke gesture
 * @param gesture
 * @param label
 * @return the instance
 */
static Instance createInstance(int samplingType,Gesture gesture,String label){
  float[] pts;
  Instance instance;
  if (samplingType == GestureLibrary.SEQUENCE_SENSITIVE) {
    pts=temporalSampler(samplingType,gesture);
    instance=new Instance(gesture.getID(),pts,label);
    instance.normalize();
  }
 else {
    pts=spatialSampler(gesture);
    instance=new Instance(gesture.getID(),pts,label);
  }
  return instance;
}","/** 
 * create a learning instance for a single stroke gesture
 * @param gesture
 * @param label
 * @return the instance
 */
static Instance createInstance(int sequenceType,int orientationType,Gesture gesture,String label){
  float[] pts;
  Instance instance;
  if (sequenceType == GestureLibrary.SEQUENCE_SENSITIVE) {
    pts=temporalSampler(orientationType,gesture);
    instance=new Instance(gesture.getID(),pts,label);
    instance.normalize();
  }
 else {
    pts=spatialSampler(gesture);
    instance=new Instance(gesture.getID(),pts,label);
  }
  return instance;
}"
24198,"private static float[] temporalSampler(int samplingType,Gesture gesture){
  float[] pts=GestureUtilities.temporalSampling(gesture.getStrokes().get(0),SEQUENCE_SAMPLE_SIZE);
  float[] center=GestureUtilities.computeCentroid(pts);
  float orientation=(float)Math.atan2(pts[1] - center[1],pts[0] - center[0]);
  orientation*=180 / Math.PI;
  float adjustment=-orientation;
  if (samplingType == GestureLibrary.ORIENTATION_SENSITIVE) {
    int count=ORIENTATIONS.length;
    for (int i=0; i < count; i++) {
      float delta=ORIENTATIONS[i] - orientation;
      if (Math.abs(delta) < Math.abs(adjustment)) {
        adjustment=delta;
      }
    }
  }
  Matrix m=new Matrix();
  m.setTranslate(-center[0],-center[1]);
  m.postRotate(adjustment);
  m.mapPoints(pts);
  return pts;
}","private static float[] temporalSampler(int orientationType,Gesture gesture){
  float[] pts=GestureUtilities.temporalSampling(gesture.getStrokes().get(0),SEQUENCE_SAMPLE_SIZE);
  float[] center=GestureUtilities.computeCentroid(pts);
  float orientation=(float)Math.atan2(pts[1] - center[1],pts[0] - center[0]);
  float adjustment=-orientation;
  if (orientationType == GestureLibrary.ORIENTATION_SENSITIVE) {
    int count=ORIENTATIONS.length;
    for (int i=0; i < count; i++) {
      float delta=ORIENTATIONS[i] - orientation;
      if (Math.abs(delta) < Math.abs(adjustment)) {
        adjustment=delta;
      }
    }
  }
  GestureUtilities.translate(pts,-center[0],-center[1]);
  GestureUtilities.rotate(pts,adjustment);
  return pts;
}"
24199,"@Override ArrayList<Prediction> classify(int gestureType,float[] vector){
  ArrayList<Prediction> predictions=new ArrayList<Prediction>();
  ArrayList<Instance> instances=getInstances();
  int count=instances.size();
  TreeMap<String,Double> label2score=new TreeMap<String,Double>();
  for (int i=0; i < count; i++) {
    Instance sample=instances.get(i);
    if (sample.vector.length != vector.length) {
      continue;
    }
    double distance;
    if (gestureType == GestureLibrary.SEQUENCE_SENSITIVE) {
      distance=GestureUtilities.cosineDistance(sample.vector,vector);
    }
 else {
      distance=GestureUtilities.squaredEuclideanDistance(sample.vector,vector);
    }
    double weight;
    if (distance == 0) {
      weight=Double.MAX_VALUE;
    }
 else {
      weight=1 / distance;
    }
    Double score=label2score.get(sample.label);
    if (score == null || weight > score) {
      label2score.put(sample.label,weight);
    }
  }
  double sum=0;
  for (  String name : label2score.keySet()) {
    double score=label2score.get(name);
    sum+=score;
    predictions.add(new Prediction(name,score));
  }
  for (  Prediction prediction : predictions) {
    prediction.score/=sum;
  }
  Collections.sort(predictions,new Comparator<Prediction>(){
    public int compare(    Prediction object1,    Prediction object2){
      double score1=object1.score;
      double score2=object2.score;
      if (score1 > score2) {
        return -1;
      }
 else       if (score1 < score2) {
        return 1;
      }
 else {
        return 0;
      }
    }
  }
);
  return predictions;
}","@Override ArrayList<Prediction> classify(int sequenceType,float[] vector){
  ArrayList<Prediction> predictions=new ArrayList<Prediction>();
  ArrayList<Instance> instances=getInstances();
  int count=instances.size();
  TreeMap<String,Double> label2score=new TreeMap<String,Double>();
  for (int i=0; i < count; i++) {
    Instance sample=instances.get(i);
    if (sample.vector.length != vector.length) {
      continue;
    }
    double distance;
    if (sequenceType == GestureLibrary.SEQUENCE_SENSITIVE) {
      distance=GestureUtilities.cosineDistance(sample.vector,vector);
    }
 else {
      distance=GestureUtilities.squaredEuclideanDistance(sample.vector,vector);
    }
    double weight;
    if (distance == 0) {
      weight=Double.MAX_VALUE;
    }
 else {
      weight=1 / distance;
    }
    Double score=label2score.get(sample.label);
    if (score == null || weight > score) {
      label2score.put(sample.label,weight);
    }
  }
  double sum=0;
  for (  String name : label2score.keySet()) {
    double score=label2score.get(name);
    sum+=score;
    predictions.add(new Prediction(name,score));
  }
  for (  Prediction prediction : predictions) {
    prediction.score/=sum;
  }
  Collections.sort(predictions,new Comparator<Prediction>(){
    public int compare(    Prediction object1,    Prediction object2){
      double score1=object1.score;
      double score2=object2.score;
      if (score1 > score2) {
        return -1;
      }
 else       if (score1 < score2) {
        return 1;
      }
 else {
        return 0;
      }
    }
  }
);
  return predictions;
}"
24200,"private void readFormatV1(DataInputStream in) throws IOException {
  final Learner classifier=mClassifier;
  final HashMap<String,ArrayList<Gesture>> namedGestures=mNamedGestures;
  namedGestures.clear();
  final int entriesCount=in.readInt();
  for (int i=0; i < entriesCount; i++) {
    final String name=in.readUTF();
    final int gestureCount=in.readInt();
    final ArrayList<Gesture> gestures=new ArrayList<Gesture>(gestureCount);
    for (int j=0; j < gestureCount; j++) {
      final Gesture gesture=Gesture.deserialize(in);
      gestures.add(gesture);
      classifier.addInstance(Instance.createInstance(mSequenceType,mOrientationStyle,gesture,name));
    }
    namedGestures.put(name,gestures);
  }
}","private void readFormatV1(DataInputStream in) throws IOException {
  final Learner classifier=mClassifier;
  final HashMap<String,ArrayList<Gesture>> namedGestures=mNamedGestures;
  namedGestures.clear();
  final int entriesCount=in.readInt();
  for (int i=0; i < entriesCount; i++) {
    final String name=in.readUTF();
    final int gestureCount=in.readInt();
    final ArrayList<Gesture> gestures=new ArrayList<Gesture>(gestureCount);
    for (int j=0; j < gestureCount; j++) {
      final Gesture gesture=Gesture.deserialize(in);
      gestures.add(gesture);
      classifier.addInstance(Instance.createInstance(mSequenceType,gesture,name));
    }
    namedGestures.put(name,gestures);
  }
}"
24201,"/** 
 * Add a gesture for the entry
 * @param entryName entry name
 * @param gesture
 */
public void addGesture(String entryName,Gesture gesture){
  if (entryName == null || entryName.length() == 0) {
    return;
  }
  ArrayList<Gesture> gestures=mNamedGestures.get(entryName);
  if (gestures == null) {
    gestures=new ArrayList<Gesture>();
    mNamedGestures.put(entryName,gestures);
  }
  gestures.add(gesture);
  mClassifier.addInstance(Instance.createInstance(mSequenceType,mOrientationStyle,gesture,entryName));
  mChanged=true;
}","/** 
 * Add a gesture for the entry
 * @param entryName entry name
 * @param gesture
 */
public void addGesture(String entryName,Gesture gesture){
  if (entryName == null || entryName.length() == 0) {
    return;
  }
  ArrayList<Gesture> gestures=mNamedGestures.get(entryName);
  if (gestures == null) {
    gestures=new ArrayList<Gesture>();
    mNamedGestures.put(entryName,gestures);
  }
  gestures.add(gesture);
  mClassifier.addInstance(Instance.createInstance(mSequenceType,gesture,entryName));
  mChanged=true;
}"
24202,"/** 
 * Recognize a gesture
 * @param gesture the query
 * @return a list of predictions of possible entries for a given gesture
 */
public ArrayList<Prediction> recognize(Gesture gesture){
  Instance instance=Instance.createInstance(mSequenceType,mOrientationStyle,gesture,null);
  return mClassifier.classify(mSequenceType,instance.vector);
}","/** 
 * Recognize a gesture
 * @param gesture the query
 * @return a list of predictions of possible entries for a given gesture
 */
public ArrayList<Prediction> recognize(Gesture gesture){
  Instance instance=Instance.createInstance(mSequenceType,gesture,null);
  return mClassifier.classify(mSequenceType,instance.vector);
}"
24203,"/** 
 * Convert the stroke to a Path based on the number of points
 * @param width the width of the bounding box of the target path
 * @param height the height of the bounding box of the target path
 * @param numSample the number of points needed
 * @return the path
 */
public Path toPath(float width,float height,int numSample){
  final float[] pts=GestureUtilities.temporalSampling(this,numSample);
  final RectF rect=boundingBox;
  GestureUtilities.translate(pts,-rect.left,-rect.top);
  float sx=width / rect.width();
  float sy=height / rect.height();
  float scale=sx > sy ? sy : sx;
  GestureUtilities.scale(pts,scale,scale);
  float mX=0;
  float mY=0;
  Path path=null;
  final int count=pts.length;
  for (int i=0; i < count; i+=2) {
    float x=pts[i];
    float y=pts[i + 1];
    if (path == null) {
      path=new Path();
      path.moveTo(x,y);
      mX=x;
      mY=y;
    }
 else {
      float dx=Math.abs(x - mX);
      float dy=Math.abs(y - mY);
      if (dx >= TOUCH_TOLERANCE || dy >= TOUCH_TOLERANCE) {
        path.quadTo(mX,mY,(x + mX) / 2,(y + mY) / 2);
        mX=x;
        mY=y;
      }
    }
  }
  return path;
}","/** 
 * Convert the stroke to a Path based on the number of points
 * @param width the width of the bounding box of the target path
 * @param height the height of the bounding box of the target path
 * @param numSample the number of points needed
 * @return the path
 */
public Path toPath(float width,float height,int numSample){
  final float[] pts=GestureUtilities.temporalSampling(this,numSample);
  final RectF rect=boundingBox;
  final Matrix matrix=new Matrix();
  matrix.setTranslate(-rect.left,-rect.top);
  matrix.postScale(width / rect.width(),height / rect.height());
  matrix.mapPoints(pts);
  float mX=0;
  float mY=0;
  Path path=null;
  final int count=pts.length;
  for (int i=0; i < count; i+=2) {
    float x=pts[i];
    float y=pts[i + 1];
    if (path == null) {
      path=new Path();
      path.moveTo(x,y);
      mX=x;
      mY=y;
    }
 else {
      float dx=Math.abs(x - mX);
      float dy=Math.abs(y - mY);
      if (dx >= TOUCH_TOLERANCE || dy >= TOUCH_TOLERANCE) {
        path.quadTo(mX,mY,(x + mX) / 2,(y + mY) / 2);
        mX=x;
        mY=y;
      }
    }
  }
  return path;
}"
24204,"static OrientedBoundingBox computeOrientedBoundingBox(float[] points,float[] centroid){
  translate(points,-centroid[0],-centroid[1]);
  double[][] array=computeCoVariance(points);
  double[] targetVector=computeOrientation(array);
  float angle;
  if (targetVector[0] == 0 && targetVector[1] == 0) {
    angle=(float)-Math.PI / 2;
  }
 else {
    angle=(float)Math.atan2(targetVector[1],targetVector[0]);
    rotate(points,-angle);
  }
  float minx=Float.MAX_VALUE;
  float miny=Float.MAX_VALUE;
  float maxx=Float.MIN_VALUE;
  float maxy=Float.MIN_VALUE;
  int count=points.length;
  for (int i=0; i < count; i++) {
    if (points[i] < minx) {
      minx=points[i];
    }
    if (points[i] > maxx) {
      maxx=points[i];
    }
    i++;
    if (points[i] < miny) {
      miny=points[i];
    }
    if (points[i] > maxy) {
      maxy=points[i];
    }
  }
  return new OrientedBoundingBox(angle,centroid[0],centroid[1],maxx - minx,maxy - miny);
}","static OrientedBoundingBox computeOrientedBoundingBox(float[] points,float[] centroid){
  Matrix tr=new Matrix();
  tr.setTranslate(-centroid[0],-centroid[1]);
  tr.mapPoints(points);
  double[][] array=computeCoVariance(points);
  double[] targetVector=computeOrientation(array);
  float angle;
  if (targetVector[0] == 0 && targetVector[1] == 0) {
    angle=-90;
  }
 else {
    angle=(float)Math.atan2(targetVector[1],targetVector[0]);
    angle=(float)(180 * angle / Math.PI);
    Matrix trans=new Matrix();
    trans.setRotate(-angle);
    trans.mapPoints(points);
  }
  float minx=Float.MAX_VALUE;
  float miny=Float.MAX_VALUE;
  float maxx=Float.MIN_VALUE;
  float maxy=Float.MIN_VALUE;
  int count=points.length;
  for (int i=0; i < count; i++) {
    if (points[i] < minx) {
      minx=points[i];
    }
    if (points[i] > maxx) {
      maxx=points[i];
    }
    i++;
    if (points[i] < miny) {
      miny=points[i];
    }
    if (points[i] > maxy) {
      maxy=points[i];
    }
  }
  return new OrientedBoundingBox(angle,centroid[0],centroid[1],maxx - minx,maxy - miny);
}"
24205,"/** 
 * create a learning instance for a single stroke gesture
 * @param gesture
 * @param label
 * @return the instance
 */
static Instance createInstance(int sequenceType,int orientationType,Gesture gesture,String label){
  float[] pts;
  Instance instance;
  if (sequenceType == GestureLibrary.SEQUENCE_SENSITIVE) {
    pts=temporalSampler(orientationType,gesture);
    instance=new Instance(gesture.getID(),pts,label);
    instance.normalize();
  }
 else {
    pts=spatialSampler(gesture);
    instance=new Instance(gesture.getID(),pts,label);
  }
  return instance;
}","/** 
 * create a learning instance for a single stroke gesture
 * @param gesture
 * @param label
 * @return the instance
 */
static Instance createInstance(int samplingType,Gesture gesture,String label){
  float[] pts;
  Instance instance;
  if (samplingType == GestureLibrary.SEQUENCE_SENSITIVE) {
    pts=temporalSampler(samplingType,gesture);
    instance=new Instance(gesture.getID(),pts,label);
    instance.normalize();
  }
 else {
    pts=spatialSampler(gesture);
    instance=new Instance(gesture.getID(),pts,label);
  }
  return instance;
}"
24206,"private static float[] temporalSampler(int orientationType,Gesture gesture){
  float[] pts=GestureUtilities.temporalSampling(gesture.getStrokes().get(0),SEQUENCE_SAMPLE_SIZE);
  float[] center=GestureUtilities.computeCentroid(pts);
  float orientation=(float)Math.atan2(pts[1] - center[1],pts[0] - center[0]);
  float adjustment=-orientation;
  if (orientationType == GestureLibrary.ORIENTATION_SENSITIVE) {
    int count=ORIENTATIONS.length;
    for (int i=0; i < count; i++) {
      float delta=ORIENTATIONS[i] - orientation;
      if (Math.abs(delta) < Math.abs(adjustment)) {
        adjustment=delta;
      }
    }
  }
  GestureUtilities.translate(pts,-center[0],-center[1]);
  GestureUtilities.rotate(pts,adjustment);
  return pts;
}","private static float[] temporalSampler(int samplingType,Gesture gesture){
  float[] pts=GestureUtilities.temporalSampling(gesture.getStrokes().get(0),SEQUENCE_SAMPLE_SIZE);
  float[] center=GestureUtilities.computeCentroid(pts);
  float orientation=(float)Math.atan2(pts[1] - center[1],pts[0] - center[0]);
  orientation*=180 / Math.PI;
  float adjustment=-orientation;
  if (samplingType == GestureLibrary.ORIENTATION_SENSITIVE) {
    int count=ORIENTATIONS.length;
    for (int i=0; i < count; i++) {
      float delta=ORIENTATIONS[i] - orientation;
      if (Math.abs(delta) < Math.abs(adjustment)) {
        adjustment=delta;
      }
    }
  }
  Matrix m=new Matrix();
  m.setTranslate(-center[0],-center[1]);
  m.postRotate(adjustment);
  m.mapPoints(pts);
  return pts;
}"
24207,"@Override ArrayList<Prediction> classify(int sequenceType,float[] vector){
  ArrayList<Prediction> predictions=new ArrayList<Prediction>();
  ArrayList<Instance> instances=getInstances();
  int count=instances.size();
  TreeMap<String,Double> label2score=new TreeMap<String,Double>();
  for (int i=0; i < count; i++) {
    Instance sample=instances.get(i);
    if (sample.vector.length != vector.length) {
      continue;
    }
    double distance;
    if (sequenceType == GestureLibrary.SEQUENCE_SENSITIVE) {
      distance=GestureUtilities.cosineDistance(sample.vector,vector);
    }
 else {
      distance=GestureUtilities.squaredEuclideanDistance(sample.vector,vector);
    }
    double weight;
    if (distance == 0) {
      weight=Double.MAX_VALUE;
    }
 else {
      weight=1 / distance;
    }
    Double score=label2score.get(sample.label);
    if (score == null || weight > score) {
      label2score.put(sample.label,weight);
    }
  }
  double sum=0;
  for (  String name : label2score.keySet()) {
    double score=label2score.get(name);
    sum+=score;
    predictions.add(new Prediction(name,score));
  }
  for (  Prediction prediction : predictions) {
    prediction.score/=sum;
  }
  Collections.sort(predictions,new Comparator<Prediction>(){
    public int compare(    Prediction object1,    Prediction object2){
      double score1=object1.score;
      double score2=object2.score;
      if (score1 > score2) {
        return -1;
      }
 else       if (score1 < score2) {
        return 1;
      }
 else {
        return 0;
      }
    }
  }
);
  return predictions;
}","@Override ArrayList<Prediction> classify(int gestureType,float[] vector){
  ArrayList<Prediction> predictions=new ArrayList<Prediction>();
  ArrayList<Instance> instances=getInstances();
  int count=instances.size();
  TreeMap<String,Double> label2score=new TreeMap<String,Double>();
  for (int i=0; i < count; i++) {
    Instance sample=instances.get(i);
    if (sample.vector.length != vector.length) {
      continue;
    }
    double distance;
    if (gestureType == GestureLibrary.SEQUENCE_SENSITIVE) {
      distance=GestureUtilities.cosineDistance(sample.vector,vector);
    }
 else {
      distance=GestureUtilities.squaredEuclideanDistance(sample.vector,vector);
    }
    double weight;
    if (distance == 0) {
      weight=Double.MAX_VALUE;
    }
 else {
      weight=1 / distance;
    }
    Double score=label2score.get(sample.label);
    if (score == null || weight > score) {
      label2score.put(sample.label,weight);
    }
  }
  double sum=0;
  for (  String name : label2score.keySet()) {
    double score=label2score.get(name);
    sum+=score;
    predictions.add(new Prediction(name,score));
  }
  for (  Prediction prediction : predictions) {
    prediction.score/=sum;
  }
  Collections.sort(predictions,new Comparator<Prediction>(){
    public int compare(    Prediction object1,    Prediction object2){
      double score1=object1.score;
      double score2=object2.score;
      if (score1 > score2) {
        return -1;
      }
 else       if (score1 < score2) {
        return 1;
      }
 else {
        return 0;
      }
    }
  }
);
  return predictions;
}"
24208,"private void getPermissionsForPackage(String packageName,Set<PermissionInfo> permSet){
  PackageInfo pkgInfo;
  try {
    pkgInfo=mPm.getPackageInfo(packageName,PackageManager.GET_PERMISSIONS);
  }
 catch (  NameNotFoundException e) {
    Log.w(TAG,""String_Node_Str"" + packageName);
    return;
  }
  if (pkgInfo == null) {
    return;
  }
  String strList[]=pkgInfo.requestedPermissions;
  if (strList == null) {
    return;
  }
  extractPerms(strList,permSet);
}","private void getPermissionsForPackage(String packageName,Set<PermissionInfo> permSet){
  PackageInfo pkgInfo;
  try {
    pkgInfo=mPm.getPackageInfo(packageName,PackageManager.GET_PERMISSIONS);
  }
 catch (  NameNotFoundException e) {
    Log.w(TAG,""String_Node_Str"" + packageName);
    return;
  }
  if ((pkgInfo != null) && (pkgInfo.requestedPermissions != null)) {
    extractPerms(pkgInfo.requestedPermissions,permSet);
  }
}"
24209,"public AppSecurityPermissions(Context context,PackageParser.Package pkg){
  mContext=context;
  mPm=mContext.getPackageManager();
  mPermsList=new ArrayList<PermissionInfo>();
  Set<PermissionInfo> permSet=new HashSet<PermissionInfo>();
  if (pkg == null) {
    return;
  }
  if (pkg.mSharedUserId != null) {
    int sharedUid;
    try {
      sharedUid=mPm.getUidForSharedUser(pkg.mSharedUserId);
    }
 catch (    NameNotFoundException e) {
      Log.w(TAG,""String_Node_Str"" + pkg.packageName);
      return;
    }
    getAllUsedPermissions(sharedUid,permSet);
  }
 else {
    ArrayList<String> strList=pkg.requestedPermissions;
    int size;
    if ((strList == null) || ((size=strList.size()) == 0)) {
      return;
    }
    extractPerms(strList.toArray(new String[size]),permSet);
  }
  for (  PermissionInfo tmpInfo : permSet) {
    mPermsList.add(tmpInfo);
  }
}","public AppSecurityPermissions(Context context,PackageParser.Package pkg){
  mContext=context;
  mPm=mContext.getPackageManager();
  mPermsList=new ArrayList<PermissionInfo>();
  Set<PermissionInfo> permSet=new HashSet<PermissionInfo>();
  if (pkg == null) {
    return;
  }
  if (pkg.requestedPermissions != null) {
    ArrayList<String> strList=pkg.requestedPermissions;
    int size=strList.size();
    if (size > 0) {
      extractPerms(strList.toArray(new String[size]),permSet);
    }
  }
  if (pkg.mSharedUserId != null) {
    int sharedUid;
    try {
      sharedUid=mPm.getUidForSharedUser(pkg.mSharedUserId);
      getAllUsedPermissions(sharedUid,permSet);
    }
 catch (    NameNotFoundException e) {
      Log.w(TAG,""String_Node_Str"" + pkg.packageName);
    }
  }
  for (  PermissionInfo tmpInfo : permSet) {
    mPermsList.add(tmpInfo);
  }
}"
24210,"/** 
 * Writes the Bundle contents to a Parcel, typically in order for it to be passed through an IBinder connection.
 * @param parcel The parcel to copy this bundle to.
 */
public void writeToParcel(Parcel parcel,int flags){
  parcel.writeBundle(this);
}","/** 
 * Writes the Bundle contents to a Parcel, typically in order for it to be passed through an IBinder connection.
 * @param parcel The parcel to copy this bundle to.
 */
public void writeToParcel(Parcel parcel,int flags){
  if (mParcelledData != null) {
    int length=mParcelledData.dataSize();
    parcel.writeInt(length);
    parcel.writeInt(0x4C444E42);
    parcel.appendFrom(mParcelledData,0,length);
  }
 else {
    parcel.writeInt(-1);
    parcel.writeInt(0x4C444E42);
    int oldPos=parcel.dataPosition();
    parcel.writeMapInternal(mMap);
    int newPos=parcel.dataPosition();
    parcel.setDataPosition(oldPos - 8);
    int length=newPos - oldPos;
    parcel.writeInt(length);
    parcel.setDataPosition(newPos);
  }
}"
24211,"/** 
 * If the underlying data are stored as a Parcel, unparcel them using the currently assigned class loader.
 */
synchronized void unparcel(){
  if (mParcelledData == null) {
    return;
  }
  mParcelledData.setDataPosition(0);
  Bundle b=mParcelledData.readBundleUnpacked(mClassLoader);
  mMap=b.mMap;
  mHasFds=mParcelledData.hasFileDescriptors();
  mFdsKnown=true;
  mParcelledData.recycle();
  mParcelledData=null;
}","/** 
 * If the underlying data are stored as a Parcel, unparcel them using the currently assigned class loader.
 */
synchronized void unparcel(){
  if (mParcelledData == null) {
    return;
  }
  int N=mParcelledData.readInt();
  if (N < 0) {
    return;
  }
  if (mMap == null) {
    mMap=new HashMap<String,Object>();
  }
  mParcelledData.readMapInternal(mMap,N,mClassLoader);
  mParcelledData.recycle();
  mParcelledData=null;
}"
24212,"/** 
 * Reads the Parcel contents into this Bundle, typically in order for it to be passed through an IBinder connection.
 * @param parcel The parcel to overwrite this bundle from.
 */
public void readFromParcel(Parcel parcel){
  mParcelledData=parcel;
  mHasFds=mParcelledData.hasFileDescriptors();
  mFdsKnown=true;
}","/** 
 * Reads the Parcel contents into this Bundle, typically in order for it to be passed through an IBinder connection.
 * @param parcel The parcel to overwrite this bundle from.
 */
public void readFromParcel(Parcel parcel){
  int length=parcel.readInt();
  if (length < 0) {
    throw new RuntimeException(""String_Node_Str"" + length);
  }
  readFromParcelInner(parcel,length);
}"
24213,"private void readMapInternal(Map outVal,int N,ClassLoader loader){
  while (N > 0) {
    Object key=readValue(loader);
    Object value=readValue(loader);
    outVal.put(key,value);
    N--;
  }
}","void readMapInternal(Map outVal,int N,ClassLoader loader){
  while (N > 0) {
    Object key=readValue(loader);
    Object value=readValue(loader);
    outVal.put(key,value);
    N--;
  }
}"
24214,"/** 
 * Flatten a Bundle into the parcel at the current dataPosition(), growing dataCapacity() if needed.
 */
public final void writeBundle(Bundle val){
  if (val == null) {
    writeInt(-1);
    return;
  }
  if (val.mParcelledData != null) {
    int length=val.mParcelledData.dataSize();
    appendFrom(val.mParcelledData,0,length);
  }
 else {
    writeInt(-1);
    int oldPos=dataPosition();
    writeInt(0x4C444E42);
    writeMapInternal(val.mMap);
    int newPos=dataPosition();
    setDataPosition(oldPos - 4);
    int length=newPos - oldPos;
    writeInt(length);
    setDataPosition(newPos);
  }
}","/** 
 * Flatten a Bundle into the parcel at the current dataPosition(), growing dataCapacity() if needed.
 */
public final void writeBundle(Bundle val){
  if (val == null) {
    writeInt(-1);
    return;
  }
  val.writeToParcel(this,0);
}"
24215,"/** 
 * Read and return a new Bundle object from the parcel at the current dataPosition(), using the given class loader to initialize the class loader of the Bundle for later retrieval of Parcelable objects. Returns null if the previously written Bundle object was null.
 */
public final Bundle readBundle(ClassLoader loader){
  int offset=dataPosition();
  int length=readInt();
  if (length < 0) {
    return null;
  }
  int magic=readInt();
  if (magic != 0x4C444E42) {
    String st=Log.getStackTraceString(new RuntimeException());
    Log.e(""String_Node_Str"",""String_Node_Str"");
    Log.e(""String_Node_Str"",""String_Node_Str"" + st);
  }
  setDataPosition(offset + length + 4);
  Parcel p=new Parcel(0);
  p.setDataPosition(0);
  p.appendFrom(this,offset,length + 4);
  p.setDataPosition(0);
  final Bundle bundle=new Bundle(p);
  if (loader != null) {
    bundle.setClassLoader(loader);
  }
  return bundle;
}","/** 
 * Read and return a new Bundle object from the parcel at the current dataPosition(), using the given class loader to initialize the class loader of the Bundle for later retrieval of Parcelable objects. Returns null if the previously written Bundle object was null.
 */
public final Bundle readBundle(ClassLoader loader){
  int length=readInt();
  if (length < 0) {
    return null;
  }
  final Bundle bundle=new Bundle(this,length);
  if (loader != null) {
    bundle.setClassLoader(loader);
  }
  return bundle;
}"
24216,"/** 
 * Flatten a Map into the parcel at the current dataPosition(), growing dataCapacity() if needed.  The Map keys must be String objects.
 */
private void writeMapInternal(Map<String,Object> val){
  if (val == null) {
    writeInt(-1);
    return;
  }
  Set<Map.Entry<String,Object>> entries=val.entrySet();
  writeInt(entries.size());
  for (  Map.Entry<String,Object> e : entries) {
    writeValue(e.getKey());
    writeValue(e.getValue());
  }
}","/** 
 * Flatten a Map into the parcel at the current dataPosition(), growing dataCapacity() if needed.  The Map keys must be String objects.
 */
void writeMapInternal(Map<String,Object> val){
  if (val == null) {
    writeInt(-1);
    return;
  }
  Set<Map.Entry<String,Object>> entries=val.entrySet();
  writeInt(entries.size());
  for (  Map.Entry<String,Object> e : entries) {
    writeValue(e.getKey());
    writeValue(e.getValue());
  }
}"
24217,"private PackageSetting getPackageLP(String name,SharedUserSetting sharedUser,File codePath,File resourcePath,int pkgFlags,boolean create,boolean add){
  PackageSetting p=mPackages.get(name);
  if (p != null) {
    if (!p.codePath.equals(codePath)) {
      PackageSetting ps=mDisabledSysPackages.get(name);
      if ((ps != null) && ((ps.pkgFlags & ApplicationInfo.FLAG_SYSTEM) != 0)) {
        return p;
      }
 else       if ((p.pkg != null) && (p.pkg.applicationInfo != null) && ((p.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0)) {
        reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ p.codePath+ ""String_Node_Str""+ codePath+ ""String_Node_Str"");
      }
 else {
        reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ p.codePath+ ""String_Node_Str""+ codePath+ ""String_Node_Str"");
        p=null;
      }
    }
 else     if (p.sharedUser != sharedUser) {
      reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ (p.sharedUser != null ? p.sharedUser.name : ""String_Node_Str"")+ ""String_Node_Str""+ (sharedUser != null ? sharedUser.name : ""String_Node_Str"")+ ""String_Node_Str"");
      p=null;
    }
  }
  if (p == null) {
    if (!create) {
      return null;
    }
    p=new PackageSetting(name,codePath,resourcePath,pkgFlags);
    p.setTimeStamp(codePath.lastModified());
    if (sharedUser != null) {
      p.userId=sharedUser.userId;
    }
 else     if (MULTIPLE_APPLICATION_UIDS) {
      p.userId=newUserIdLP(p);
    }
 else {
      p.userId=FIRST_APPLICATION_UID;
    }
    if (p.userId < 0) {
      reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str"");
      return null;
    }
    if (add) {
      insertPackageSettingLP(p,name,sharedUser);
    }
  }
  return p;
}","private PackageSetting getPackageLP(String name,SharedUserSetting sharedUser,File codePath,File resourcePath,int pkgFlags,boolean create,boolean add){
  PackageSetting p=mPackages.get(name);
  if (p != null) {
    if (!p.codePath.equals(codePath)) {
      PackageSetting ps=mDisabledSysPackages.get(name);
      if ((ps != null) && ((ps.pkgFlags & ApplicationInfo.FLAG_SYSTEM) != 0)) {
        return p;
      }
 else       if ((p.pkg != null) && (p.pkg.applicationInfo != null) && ((p.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0)) {
        reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ p.codePath+ ""String_Node_Str""+ codePath+ ""String_Node_Str"");
      }
 else {
        reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ p.codePath+ ""String_Node_Str""+ codePath+ ""String_Node_Str"");
        p=null;
      }
    }
 else     if (p.sharedUser != sharedUser) {
      reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ (p.sharedUser != null ? p.sharedUser.name : ""String_Node_Str"")+ ""String_Node_Str""+ (sharedUser != null ? sharedUser.name : ""String_Node_Str"")+ ""String_Node_Str"");
      p=null;
    }
  }
  if (p == null) {
    if (!create) {
      return null;
    }
    p=new PackageSetting(name,codePath,resourcePath,pkgFlags);
    p.setTimeStamp(codePath.lastModified());
    p.sharedUser=sharedUser;
    if (sharedUser != null) {
      p.userId=sharedUser.userId;
    }
 else     if (MULTIPLE_APPLICATION_UIDS) {
      p.userId=newUserIdLP(p);
    }
 else {
      p.userId=FIRST_APPLICATION_UID;
    }
    if (p.userId < 0) {
      reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str"");
      return null;
    }
    if (add) {
      insertPackageSettingLP(p,name,sharedUser);
    }
  }
  return p;
}"
24218,"void replaceTextfieldText(int oldStart,int oldEnd,String replace,int newStart,int newEnd){
  HashMap arg=new HashMap();
  arg.put(""String_Node_Str"",new WebViewCore.FocusData(mFocusData));
  arg.put(""String_Node_Str"",replace);
  arg.put(""String_Node_Str"",new Integer(newStart));
  arg.put(""String_Node_Str"",new Integer(newEnd));
  mTextGeneration++;
  mWebViewCore.sendMessage(EventHub.REPLACE_TEXT,oldStart,oldEnd,arg);
}","void replaceTextfieldText(int oldStart,int oldEnd,String replace,int newStart,int newEnd){
  HashMap arg=new HashMap();
  arg.put(""String_Node_Str"",new WebViewCore.FocusData(mFocusData));
  arg.put(""String_Node_Str"",replace);
  arg.put(""String_Node_Str"",Integer.valueOf(newStart));
  arg.put(""String_Node_Str"",Integer.valueOf(newEnd));
  mTextGeneration++;
  mWebViewCore.sendMessage(EventHub.REPLACE_TEXT,oldStart,oldEnd,arg);
}"
24219,"/** 
 * Build an SQL query string from the given clauses.
 * @param distinct true if you want each row to be unique, false otherwise.
 * @param tables The table names to compile the query against.
 * @param columns A list of which columns to return. Passing null willreturn all columns, which is discouraged to prevent reading data from storage that isn't going to be used.
 * @param where A filter declaring which rows to return, formatted as an SQLWHERE clause (excluding the WHERE itself). Passing null will return all rows for the given URL.
 * @param groupBy A filter declaring how to group rows, formatted as an SQLGROUP BY clause (excluding the GROUP BY itself). Passing null will cause the rows to not be grouped.
 * @param having A filter declare which row groups to include in the cursor,if row grouping is being used, formatted as an SQL HAVING clause (excluding the HAVING itself). Passing null will cause all row groups to be included, and is required when row grouping is not being used.
 * @param orderBy How to order the rows, formatted as an SQL ORDER BY clause(excluding the ORDER BY itself). Passing null will use the default sort order, which may be unordered.
 * @param limit Limits the number of rows returned by the query,formatted as LIMIT clause. Passing null denotes no LIMIT clause.
 * @return the SQL query string
 */
public static String buildQueryString(boolean distinct,String tables,String[] columns,String where,String groupBy,String having,String orderBy,String limit){
  if (TextUtils.isEmpty(groupBy) && !TextUtils.isEmpty(having)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  StringBuilder query=new StringBuilder(120);
  query.append(""String_Node_Str"");
  if (distinct) {
    query.append(""String_Node_Str"");
  }
  if (columns != null && columns.length != 0) {
    appendColumns(query,columns);
  }
 else {
    query.append(""String_Node_Str"");
  }
  query.append(""String_Node_Str"");
  query.append(tables);
  appendClause(query,""String_Node_Str"",where);
  appendClause(query,""String_Node_Str"",groupBy);
  appendClause(query,""String_Node_Str"",having);
  appendClause(query,""String_Node_Str"",orderBy);
  appendClauseEscapeClause(query,""String_Node_Str"",limit);
  return query.toString();
}","/** 
 * Build an SQL query string from the given clauses.
 * @param distinct true if you want each row to be unique, false otherwise.
 * @param tables The table names to compile the query against.
 * @param columns A list of which columns to return. Passing null willreturn all columns, which is discouraged to prevent reading data from storage that isn't going to be used.
 * @param where A filter declaring which rows to return, formatted as an SQLWHERE clause (excluding the WHERE itself). Passing null will return all rows for the given URL.
 * @param groupBy A filter declaring how to group rows, formatted as an SQLGROUP BY clause (excluding the GROUP BY itself). Passing null will cause the rows to not be grouped.
 * @param having A filter declare which row groups to include in the cursor,if row grouping is being used, formatted as an SQL HAVING clause (excluding the HAVING itself). Passing null will cause all row groups to be included, and is required when row grouping is not being used.
 * @param orderBy How to order the rows, formatted as an SQL ORDER BY clause(excluding the ORDER BY itself). Passing null will use the default sort order, which may be unordered.
 * @param limit Limits the number of rows returned by the query,formatted as LIMIT clause. Passing null denotes no LIMIT clause.
 * @return the SQL query string
 */
public static String buildQueryString(boolean distinct,String tables,String[] columns,String where,String groupBy,String having,String orderBy,String limit){
  if (TextUtils.isEmpty(groupBy) && !TextUtils.isEmpty(having)) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  if (!TextUtils.isEmpty(limit) && !sLimitPattern.matcher(limit).matches()) {
    throw new IllegalArgumentException(""String_Node_Str"" + limit);
  }
  StringBuilder query=new StringBuilder(120);
  query.append(""String_Node_Str"");
  if (distinct) {
    query.append(""String_Node_Str"");
  }
  if (columns != null && columns.length != 0) {
    appendColumns(query,columns);
  }
 else {
    query.append(""String_Node_Str"");
  }
  query.append(""String_Node_Str"");
  query.append(tables);
  appendClause(query,""String_Node_Str"",where);
  appendClause(query,""String_Node_Str"",groupBy);
  appendClause(query,""String_Node_Str"",having);
  appendClause(query,""String_Node_Str"",orderBy);
  appendClause(query,""String_Node_Str"",limit);
  return query.toString();
}"
24220,"/** 
 * Receives a query request from a client in a local process, and returns a Cursor. This is called internally by the   {@link ContentResolver}. This method can be called from multiple threads, as described in <a href=""  {@docRoot}guide/topics/fundamentals.html#procthread"">Application Fundamentals: Processes and Threads</a>. <p> Example client call:<p> <pre>// Request a specific record. Cursor managedCursor = managedQuery( Contacts.People.CONTENT_URI.addId(2), projection,    // Which columns to return. null,          // WHERE clause. People.NAME + "" ASC"");   // Sort order.</pre> Example implementation:<p> <pre>// SQLiteQueryBuilder is a helper class that creates the // proper SQL syntax for us. SQLiteQueryBuilder qBuilder = new SQLiteQueryBuilder(); // Set the table we're querying. qBuilder.setTables(DATABASE_TABLE_NAME); // If the query ends in a specific record number, we're // being asked for a specific record, so set the // WHERE clause in our query. if((URI_MATCHER.match(uri)) == SPECIFIC_MESSAGE){ qBuilder.appendWhere(""_id="" + uri.getPathLeafId()); } // Make the query. Cursor c = qBuilder.query(mDb, projection, selection, selectionArgs, groupBy, having, sortOrder); c.setNotificationUri(getContext().getContentResolver(), uri); return c;</pre>
 * @param uri The URI to query. This will be the full URI sent by the client;if the client is requesting a specific record, the URI will end in a record number that the implementation should parse and add to a WHERE or HAVING clause, specifying that _id value.
 * @param projection The list of columns to put into the cursor. Ifnull all columns are included.
 * @param selection A selection criteria to apply when filtering rows.If null then all rows are included.
 * @param sortOrder How the rows in the cursor should be sorted.If null then the provider is free to define the sort order.
 * @return a Cursor or null.
 */
public abstract Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder);","/** 
 * Receives a query request from a client in a local process, and returns a Cursor. This is called internally by the   {@link ContentResolver}. This method can be called from multiple threads, as described in <a href=""  {@docRoot}guide/topics/fundamentals.html#procthread"">Application Fundamentals: Processes and Threads</a>. <p> Example client call:<p> <pre>// Request a specific record. Cursor managedCursor = managedQuery( ContentUris.withAppendedId(Contacts.People.CONTENT_URI, 2), projection,    // Which columns to return. null,          // WHERE clause. null,          // WHERE clause value substitution People.NAME + "" ASC"");   // Sort order.</pre> Example implementation:<p> <pre>// SQLiteQueryBuilder is a helper class that creates the // proper SQL syntax for us. SQLiteQueryBuilder qBuilder = new SQLiteQueryBuilder(); // Set the table we're querying. qBuilder.setTables(DATABASE_TABLE_NAME); // If the query ends in a specific record number, we're // being asked for a specific record, so set the // WHERE clause in our query. if((URI_MATCHER.match(uri)) == SPECIFIC_MESSAGE){ qBuilder.appendWhere(""_id="" + uri.getPathLeafId()); } // Make the query. Cursor c = qBuilder.query(mDb, projection, selection, selectionArgs, groupBy, having, sortOrder); c.setNotificationUri(getContext().getContentResolver(), uri); return c;</pre>
 * @param uri The URI to query. This will be the full URI sent by the client;if the client is requesting a specific record, the URI will end in a record number that the implementation should parse and add to a WHERE or HAVING clause, specifying that _id value.
 * @param projection The list of columns to put into the cursor. Ifnull all columns are included.
 * @param selection A selection criteria to apply when filtering rows.If null then all rows are included.
 * @param selectionArgs You may include ?s in selection, which will be replaced bythe values from selectionArgs, in order that they appear in the selection. The values will be bound as Strings.
 * @param sortOrder How the rows in the cursor should be sorted.If null then the provider is free to define the sort order.
 * @return a Cursor or null.
 */
public abstract Cursor query(Uri uri,String[] projection,String selection,String[] selectionArgs,String sortOrder);"
24221,"private void runStart(){
  Intent intent=makeIntent();
  if (intent != null) {
    System.out.println(""String_Node_Str"" + intent);
    try {
      intent.addFlags(intent.FLAG_ACTIVITY_NEW_TASK);
      int res=mAm.startActivity(null,intent,intent.getType(),null,0,null,null,0,false,mDebugOption);
switch (res) {
case IActivityManager.START_SUCCESS:
        break;
case IActivityManager.START_CLASS_NOT_FOUND:
      System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"" + intent.getComponent().toShortString() + ""String_Node_Str"");
  break;
case IActivityManager.START_DELIVERED_TO_TOP:
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
break;
case IActivityManager.START_FORWARD_AND_REQUEST_CONFLICT:
System.err.println(""String_Node_Str"" + ""String_Node_Str"");
break;
case IActivityManager.START_INTENT_NOT_RESOLVED:
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + intent.toString());
break;
case IActivityManager.START_RETURN_INTENT_TO_CALLER:
System.err.println(""String_Node_Str"" + ""String_Node_Str"");
break;
case IActivityManager.START_TASK_TO_FRONT:
System.err.println(""String_Node_Str"" + ""String_Node_Str"");
break;
default :
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + res);
break;
}
}
 catch (RemoteException e) {
System.err.println(""String_Node_Str"");
System.err.println(""String_Node_Str"" + ""String_Node_Str"");
}
}
}","private void runStart(){
  Intent intent=makeIntent();
  if (intent != null) {
    System.out.println(""String_Node_Str"" + intent);
    try {
      intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      int res=mAm.startActivity(null,intent,intent.getType(),null,0,null,null,0,false,mDebugOption);
switch (res) {
case IActivityManager.START_SUCCESS:
        break;
case IActivityManager.START_SWITCHES_CANCELED:
      System.err.println(""String_Node_Str"" + ""String_Node_Str"");
    break;
case IActivityManager.START_DELIVERED_TO_TOP:
  System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
break;
case IActivityManager.START_RETURN_INTENT_TO_CALLER:
System.err.println(""String_Node_Str"" + ""String_Node_Str"");
break;
case IActivityManager.START_TASK_TO_FRONT:
System.err.println(""String_Node_Str"" + ""String_Node_Str"");
break;
case IActivityManager.START_INTENT_NOT_RESOLVED:
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + intent.toString());
break;
case IActivityManager.START_CLASS_NOT_FOUND:
System.err.println(""String_Node_Str"");
System.err.println(""String_Node_Str"" + intent.getComponent().toShortString() + ""String_Node_Str"");
break;
case IActivityManager.START_FORWARD_AND_REQUEST_CONFLICT:
System.err.println(""String_Node_Str"" + ""String_Node_Str"");
break;
case IActivityManager.START_PERMISSION_DENIED:
System.err.println(""String_Node_Str"" + ""String_Node_Str"");
break;
default :
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + res);
break;
}
}
 catch (RemoteException e) {
System.err.println(""String_Node_Str"");
System.err.println(""String_Node_Str"" + ""String_Node_Str"");
}
}
}"
24222,"public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
      int grantedMode=data.readInt();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      boolean onlyIfNeeded=data.readInt() != 0;
      boolean debug=data.readInt() != 0;
      int result=startActivity(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder callingActivity=data.readStrongBinder();
    Intent intent=Intent.CREATOR.createFromParcel(data);
    boolean result=startNextMatchingActivity(callingActivity,intent);
    reply.writeNoException();
    reply.writeInt(result ? 1 : 0);
    return true;
  }
case FINISH_ACTIVITY_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder token=data.readStrongBinder();
  Intent resultData=null;
  int resultCode=data.readInt();
  if (data.readInt() != 0) {
    resultData=Intent.CREATOR.createFromParcel(data);
  }
  boolean res=finishActivity(token,resultCode,resultData);
  reply.writeNoException();
  reply.writeInt(res ? 1 : 0);
  return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
Intent intent=registerReceiver(app,rec,filter,perm);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,serialized,sticky);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
unbroadcastIntent(app,intent);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case SET_PERSISTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isPersistent=data.readInt() != 0;
if (token != null) {
setPersistent(token,isPersistent);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
if (token != null) {
activityIdle(token);
}
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
activityPaused(token,map);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,thumbnail,description);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
IBinder receiverBinder=data.readStrongBinder();
IThumbnailReceiver receiver=receiverBinder != null ? IThumbnailReceiver.Stub.asInterface(receiverBinder) : null;
List list=getTasks(maxNum,fl,receiver);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=(ActivityManager.RunningTaskInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=(ActivityManager.RunningServiceInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToFront(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case FINISH_OTHER_INSTANCES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName className=ComponentName.readFromParcel(data);
finishOtherInstances(token,className);
reply.writeNoException();
return true;
}
case REPORT_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
reportThumbnail(token,thumbnail,description);
reply.writeNoException();
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
ContentProviderHolder cph=getContentProvider(app,name);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
removeContentProvider(app,name);
reply.writeNoException();
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
ComponentName cn=startService(app,service,resolvedType);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int res=stopService(app,service,resolvedType);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
boolean isForeground=data.readInt() != 0;
setServiceForeground(className,token,isForeground);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
serviceDoneExecuting(token);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
boolean res=startInstrumentation(className,profileFile,fl,arguments,w);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent requestIntent=data.readInt() != 0 ? Intent.CREATOR.createFromParcel(data) : null;
String requestResolvedType=data.readString();
int fl=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntent,requestResolvedType,fl);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int res=checkUriPermission(uri,pid,uid,mode);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
boolean res=clearApplicationUserData(packageName,observer);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
grantUriPermission(app,targetPkg,uri,mode);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
revokeUriPermission(app,uri,mode);
reply.writeNoException();
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GOING_TO_SLEEP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
goingToSleep();
reply.writeNoException();
return true;
}
case WAKING_UP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
wakingUp();
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_WATCHER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityWatcher watcher=IActivityWatcher.Stub.asInterface(data.readStrongBinder());
setActivityWatcher(watcher);
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
noteWakeupAlarm(is);
reply.writeNoException();
return true;
}
case KILL_PIDS_FOR_MEMORY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
boolean res=killPidsForMemory(pids);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REPORT_PSS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int pss=data.readInt();
reportPss(app,pss);
reply.writeNoException();
return true;
}
case START_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
String cls=data.readString();
String action=data.readString();
String indata=data.readString();
startRunning(pkg,cls,action,indata);
reply.writeNoException();
return true;
}
case SYSTEM_READY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
systemReady();
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_ERROR_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int fl=data.readInt();
String tag=data.readString();
String shortMsg=data.readString();
String longMsg=data.readString();
byte[] crashData=data.createByteArray();
int res=handleApplicationError(app,fl,tag,shortMsg,longMsg,crashData);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case RESTART_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
restartPackage(packageName);
reply.writeNoException();
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
boolean start=data.readInt() != 0;
String path=data.readString();
boolean res=profileControl(process,start,path);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
}
return super.onTransact(code,data,reply,flags);
}","public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
      int grantedMode=data.readInt();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      boolean onlyIfNeeded=data.readInt() != 0;
      boolean debug=data.readInt() != 0;
      int result=startActivity(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder callingActivity=data.readStrongBinder();
    Intent intent=Intent.CREATOR.createFromParcel(data);
    boolean result=startNextMatchingActivity(callingActivity,intent);
    reply.writeNoException();
    reply.writeInt(result ? 1 : 0);
    return true;
  }
case FINISH_ACTIVITY_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder token=data.readStrongBinder();
  Intent resultData=null;
  int resultCode=data.readInt();
  if (data.readInt() != 0) {
    resultData=Intent.CREATOR.createFromParcel(data);
  }
  boolean res=finishActivity(token,resultCode,resultData);
  reply.writeNoException();
  reply.writeInt(res ? 1 : 0);
  return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
Intent intent=registerReceiver(app,rec,filter,perm);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,serialized,sticky);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
unbroadcastIntent(app,intent);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case SET_PERSISTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isPersistent=data.readInt() != 0;
if (token != null) {
setPersistent(token,isPersistent);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
if (token != null) {
activityIdle(token);
}
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
activityPaused(token,map);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,thumbnail,description);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
IBinder receiverBinder=data.readStrongBinder();
IThumbnailReceiver receiver=receiverBinder != null ? IThumbnailReceiver.Stub.asInterface(receiverBinder) : null;
List list=getTasks(maxNum,fl,receiver);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=(ActivityManager.RunningTaskInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=(ActivityManager.RunningServiceInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToFront(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case FINISH_OTHER_INSTANCES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName className=ComponentName.readFromParcel(data);
finishOtherInstances(token,className);
reply.writeNoException();
return true;
}
case REPORT_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
reportThumbnail(token,thumbnail,description);
reply.writeNoException();
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
ContentProviderHolder cph=getContentProvider(app,name);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
removeContentProvider(app,name);
reply.writeNoException();
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
ComponentName cn=startService(app,service,resolvedType);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int res=stopService(app,service,resolvedType);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
boolean isForeground=data.readInt() != 0;
setServiceForeground(className,token,isForeground);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
serviceDoneExecuting(token);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
boolean res=startInstrumentation(className,profileFile,fl,arguments,w);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent requestIntent=data.readInt() != 0 ? Intent.CREATOR.createFromParcel(data) : null;
String requestResolvedType=data.readString();
int fl=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntent,requestResolvedType,fl);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int res=checkUriPermission(uri,pid,uid,mode);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
boolean res=clearApplicationUserData(packageName,observer);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
grantUriPermission(app,targetPkg,uri,mode);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
revokeUriPermission(app,uri,mode);
reply.writeNoException();
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GOING_TO_SLEEP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
goingToSleep();
reply.writeNoException();
return true;
}
case WAKING_UP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
wakingUp();
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_WATCHER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityWatcher watcher=IActivityWatcher.Stub.asInterface(data.readStrongBinder());
setActivityWatcher(watcher);
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
noteWakeupAlarm(is);
reply.writeNoException();
return true;
}
case KILL_PIDS_FOR_MEMORY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
boolean res=killPidsForMemory(pids);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REPORT_PSS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int pss=data.readInt();
reportPss(app,pss);
reply.writeNoException();
return true;
}
case START_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
String cls=data.readString();
String action=data.readString();
String indata=data.readString();
startRunning(pkg,cls,action,indata);
reply.writeNoException();
return true;
}
case SYSTEM_READY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
systemReady();
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_ERROR_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int fl=data.readInt();
String tag=data.readString();
String shortMsg=data.readString();
String longMsg=data.readString();
byte[] crashData=data.createByteArray();
int res=handleApplicationError(app,fl,tag,shortMsg,longMsg,crashData);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case RESTART_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
restartPackage(packageName);
reply.writeNoException();
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
boolean start=data.readInt() != 0;
String path=data.readString();
boolean res=profileControl(process,start,path);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
}
return super.onTransact(code,data,reply,flags);
}"
24223,"/** 
 * goes to the home screen
 * @return whether it did anything
 */
boolean goHome(){
  if (false) {
    mContext.startActivity(mHomeIntent);
  }
 else {
    try {
      int result=ActivityManagerNative.getDefault().startActivity(null,mHomeIntent,mHomeIntent.resolveTypeIfNeeded(mContext.getContentResolver()),null,0,null,null,0,true,false);
      if (result == IActivityManager.START_RETURN_INTENT_TO_CALLER) {
        return false;
      }
    }
 catch (    RemoteException ex) {
    }
  }
  sendCloseSystemWindows();
  return true;
}","/** 
 * goes to the home screen
 * @return whether it did anything
 */
boolean goHome(){
  if (false) {
    try {
      ActivityManagerNative.getDefault().stopAppSwitches();
    }
 catch (    RemoteException e) {
    }
    mContext.startActivity(mHomeIntent);
  }
 else {
    try {
      ActivityManagerNative.getDefault().stopAppSwitches();
      int result=ActivityManagerNative.getDefault().startActivity(null,mHomeIntent,mHomeIntent.resolveTypeIfNeeded(mContext.getContentResolver()),null,0,null,null,0,true,false);
      if (result == IActivityManager.START_RETURN_INTENT_TO_CALLER) {
        return false;
      }
    }
 catch (    RemoteException ex) {
    }
  }
  sendCloseSystemWindows();
  return true;
}"
24224,"/** 
 * A home key -> launch home action was detected.  Take the appropriate action given the situation with the keyguard.
 */
void launchHomeFromHotKey(){
  if (mKeyguardMediator.isShowing()) {
  }
 else   if (mKeyguardMediator.isInputRestricted()) {
    mKeyguardMediator.verifyUnlock(new OnKeyguardExitResult(){
      public void onKeyguardExitResult(      boolean success){
        if (success) {
          mContext.startActivity(mHomeIntent);
          sendCloseSystemWindows();
        }
      }
    }
);
  }
 else {
    mContext.startActivity(mHomeIntent);
    sendCloseSystemWindows();
  }
}","/** 
 * A home key -> launch home action was detected.  Take the appropriate action given the situation with the keyguard.
 */
void launchHomeFromHotKey(){
  if (mKeyguardMediator.isShowing()) {
  }
 else   if (mKeyguardMediator.isInputRestricted()) {
    mKeyguardMediator.verifyUnlock(new OnKeyguardExitResult(){
      public void onKeyguardExitResult(      boolean success){
        if (success) {
          try {
            ActivityManagerNative.getDefault().stopAppSwitches();
          }
 catch (          RemoteException e) {
          }
          mContext.startActivity(mHomeIntent);
          sendCloseSystemWindows();
        }
      }
    }
);
  }
 else {
    try {
      ActivityManagerNative.getDefault().stopAppSwitches();
    }
 catch (    RemoteException e) {
    }
    mContext.startActivity(mHomeIntent);
    sendCloseSystemWindows();
  }
}"
24225,"public void onKeyguardExitResult(boolean success){
  if (success) {
    mContext.startActivity(mHomeIntent);
    sendCloseSystemWindows();
  }
}","public void onKeyguardExitResult(boolean success){
  if (success) {
    try {
      ActivityManagerNative.getDefault().stopAppSwitches();
    }
 catch (    RemoteException e) {
    }
    mContext.startActivity(mHomeIntent);
    sendCloseSystemWindows();
  }
}"
24226,"protected void onHandleIntent(Intent intent){
  if (REMOTE_INTENT_ACTION.equals(intent.getAction())) {
    boolean fromTrustedServer=intent.getBooleanExtra(""String_Node_Str"",false);
    if (fromTrustedServer) {
      String accountName=intent.getStringExtra(""String_Node_Str"");
      String token=intent.getStringExtra(""String_Node_Str"");
      if (TextUtils.isEmpty(accountName) || TextUtils.isEmpty(token)) {
        if (Config.LOGD) {
          Log.d(TAG,""String_Node_Str"");
        }
        return;
      }
      if (Config.LOGD) {
        Log.d(TAG,""String_Node_Str"" + accountName + ""String_Node_Str""+ token);
      }
      handleTickle(this,accountName,token);
    }
 else {
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"");
      }
    }
  }
 else   if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"");
    }
    long refreshTime=getSharedPreferences(sSubscribedFeedsPrefs,Context.MODE_WORLD_READABLE).getLong(sRefreshTime,0);
    scheduleRefresh(this,refreshTime);
  }
 else   if (SUBSCRIBED_FEEDS_REFRESH_ACTION.equals(intent.getAction())) {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"");
    }
    handleRefreshAlarm(this);
  }
}","protected void onHandleIntent(Intent intent){
  if (REMOTE_INTENT_ACTION.equals(intent.getAction())) {
    boolean fromTrustedServer=intent.getBooleanExtra(""String_Node_Str"",false);
    if (fromTrustedServer) {
      String accountName=intent.getStringExtra(""String_Node_Str"");
      String token=intent.getStringExtra(Intent.EXTRA_REMOTE_INTENT_TOKEN);
      if (TextUtils.isEmpty(accountName) || TextUtils.isEmpty(token)) {
        if (Config.LOGD) {
          Log.d(TAG,""String_Node_Str"");
        }
        return;
      }
      if (Config.LOGD) {
        Log.d(TAG,""String_Node_Str"" + accountName + ""String_Node_Str""+ token);
      }
      handleTickle(this,accountName,token);
    }
 else {
      if (Log.isLoggable(TAG,Log.VERBOSE)) {
        Log.v(TAG,""String_Node_Str"");
      }
    }
  }
 else   if (Intent.ACTION_BOOT_COMPLETED.equals(intent.getAction())) {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"");
    }
    long refreshTime=getSharedPreferences(sSubscribedFeedsPrefs,Context.MODE_WORLD_READABLE).getLong(sRefreshTime,0);
    scheduleRefresh(this,refreshTime);
  }
 else   if (SUBSCRIBED_FEEDS_REFRESH_ACTION.equals(intent.getAction())) {
    if (Config.LOGD) {
      Log.d(TAG,""String_Node_Str"");
    }
    handleRefreshAlarm(this);
  }
}"
24227,"/** 
 * goes to the home screen
 * @return whether it did anything
 */
boolean goHome(){
  if (false) {
    mContext.startActivity(mHomeIntent);
  }
 else {
    try {
      int result=ActivityManagerNative.getDefault().startActivity(null,mHomeIntent,mHomeIntent.resolveTypeIfNeeded(mContext.getContentResolver()),null,0,null,null,0,true,false);
      if (result == IActivityManager.START_RETURN_INTENT_TO_CALLER) {
        return false;
      }
    }
 catch (    RemoteException ex) {
    }
  }
  sendCloseSystemWindows();
  return true;
}","/** 
 * goes to the home screen
 * @return whether it did anything
 */
boolean goHome(){
  if (false) {
    try {
      ActivityManagerNative.getDefault().stopAppSwitches();
    }
 catch (    RemoteException e) {
    }
    mContext.startActivity(mHomeIntent);
  }
 else {
    try {
      ActivityManagerNative.getDefault().stopAppSwitches();
      int result=ActivityManagerNative.getDefault().startActivity(null,mHomeIntent,mHomeIntent.resolveTypeIfNeeded(mContext.getContentResolver()),null,0,null,null,0,true,false);
      if (result == IActivityManager.START_RETURN_INTENT_TO_CALLER) {
        return false;
      }
    }
 catch (    RemoteException ex) {
    }
  }
  sendCloseSystemWindows();
  return true;
}"
24228,"/** 
 * A home key -> launch home action was detected.  Take the appropriate action given the situation with the keyguard.
 */
void launchHomeFromHotKey(){
  if (mKeyguardMediator.isShowing()) {
  }
 else   if (mKeyguardMediator.isInputRestricted()) {
    mKeyguardMediator.verifyUnlock(new OnKeyguardExitResult(){
      public void onKeyguardExitResult(      boolean success){
        if (success) {
          mContext.startActivity(mHomeIntent);
          sendCloseSystemWindows();
        }
      }
    }
);
  }
 else {
    mContext.startActivity(mHomeIntent);
    sendCloseSystemWindows();
  }
}","/** 
 * A home key -> launch home action was detected.  Take the appropriate action given the situation with the keyguard.
 */
void launchHomeFromHotKey(){
  if (mKeyguardMediator.isShowing()) {
  }
 else   if (mKeyguardMediator.isInputRestricted()) {
    mKeyguardMediator.verifyUnlock(new OnKeyguardExitResult(){
      public void onKeyguardExitResult(      boolean success){
        if (success) {
          try {
            ActivityManagerNative.getDefault().stopAppSwitches();
          }
 catch (          RemoteException e) {
          }
          mContext.startActivity(mHomeIntent);
          sendCloseSystemWindows();
        }
      }
    }
);
  }
 else {
    try {
      ActivityManagerNative.getDefault().stopAppSwitches();
    }
 catch (    RemoteException e) {
    }
    mContext.startActivity(mHomeIntent);
    sendCloseSystemWindows();
  }
}"
24229,"public void onKeyguardExitResult(boolean success){
  if (success) {
    mContext.startActivity(mHomeIntent);
    sendCloseSystemWindows();
  }
}","public void onKeyguardExitResult(boolean success){
  if (success) {
    try {
      ActivityManagerNative.getDefault().stopAppSwitches();
    }
 catch (    RemoteException e) {
    }
    mContext.startActivity(mHomeIntent);
    sendCloseSystemWindows();
  }
}"
24230,"private void runStart(){
  Intent intent=makeIntent();
  if (intent != null) {
    System.out.println(""String_Node_Str"" + intent);
    try {
      intent.addFlags(intent.FLAG_ACTIVITY_NEW_TASK);
      int res=mAm.startActivity(null,intent,intent.getType(),null,0,null,null,0,false,mDebugOption);
switch (res) {
case IActivityManager.START_SUCCESS:
        break;
case IActivityManager.START_CLASS_NOT_FOUND:
      System.err.println(""String_Node_Str"");
    System.err.println(""String_Node_Str"" + intent.getComponent().toShortString() + ""String_Node_Str"");
  break;
case IActivityManager.START_DELIVERED_TO_TOP:
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
break;
case IActivityManager.START_FORWARD_AND_REQUEST_CONFLICT:
System.err.println(""String_Node_Str"" + ""String_Node_Str"");
break;
case IActivityManager.START_INTENT_NOT_RESOLVED:
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + intent.toString());
break;
case IActivityManager.START_RETURN_INTENT_TO_CALLER:
System.err.println(""String_Node_Str"" + ""String_Node_Str"");
break;
case IActivityManager.START_TASK_TO_FRONT:
System.err.println(""String_Node_Str"" + ""String_Node_Str"");
break;
default :
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + res);
break;
}
}
 catch (RemoteException e) {
System.err.println(""String_Node_Str"");
System.err.println(""String_Node_Str"" + ""String_Node_Str"");
}
}
}","private void runStart(){
  Intent intent=makeIntent();
  if (intent != null) {
    System.out.println(""String_Node_Str"" + intent);
    try {
      intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
      int res=mAm.startActivity(null,intent,intent.getType(),null,0,null,null,0,false,mDebugOption);
switch (res) {
case IActivityManager.START_SUCCESS:
        break;
case IActivityManager.START_SWITCHES_CANCELED:
      System.err.println(""String_Node_Str"" + ""String_Node_Str"");
    break;
case IActivityManager.START_DELIVERED_TO_TOP:
  System.err.println(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str"");
break;
case IActivityManager.START_RETURN_INTENT_TO_CALLER:
System.err.println(""String_Node_Str"" + ""String_Node_Str"");
break;
case IActivityManager.START_TASK_TO_FRONT:
System.err.println(""String_Node_Str"" + ""String_Node_Str"");
break;
case IActivityManager.START_INTENT_NOT_RESOLVED:
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + intent.toString());
break;
case IActivityManager.START_CLASS_NOT_FOUND:
System.err.println(""String_Node_Str"");
System.err.println(""String_Node_Str"" + intent.getComponent().toShortString() + ""String_Node_Str"");
break;
case IActivityManager.START_FORWARD_AND_REQUEST_CONFLICT:
System.err.println(""String_Node_Str"" + ""String_Node_Str"");
break;
case IActivityManager.START_PERMISSION_DENIED:
System.err.println(""String_Node_Str"" + ""String_Node_Str"");
break;
default :
System.err.println(""String_Node_Str"" + ""String_Node_Str"" + res);
break;
}
}
 catch (RemoteException e) {
System.err.println(""String_Node_Str"");
System.err.println(""String_Node_Str"" + ""String_Node_Str"");
}
}
}"
24231,"public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
      int grantedMode=data.readInt();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      boolean onlyIfNeeded=data.readInt() != 0;
      boolean debug=data.readInt() != 0;
      int result=startActivity(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder callingActivity=data.readStrongBinder();
    Intent intent=Intent.CREATOR.createFromParcel(data);
    boolean result=startNextMatchingActivity(callingActivity,intent);
    reply.writeNoException();
    reply.writeInt(result ? 1 : 0);
    return true;
  }
case FINISH_ACTIVITY_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder token=data.readStrongBinder();
  Intent resultData=null;
  int resultCode=data.readInt();
  if (data.readInt() != 0) {
    resultData=Intent.CREATOR.createFromParcel(data);
  }
  boolean res=finishActivity(token,resultCode,resultData);
  reply.writeNoException();
  reply.writeInt(res ? 1 : 0);
  return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
Intent intent=registerReceiver(app,rec,filter,perm);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,serialized,sticky);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
unbroadcastIntent(app,intent);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case SET_PERSISTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isPersistent=data.readInt() != 0;
if (token != null) {
setPersistent(token,isPersistent);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
if (token != null) {
activityIdle(token);
}
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
activityPaused(token,map);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,thumbnail,description);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
IBinder receiverBinder=data.readStrongBinder();
IThumbnailReceiver receiver=receiverBinder != null ? IThumbnailReceiver.Stub.asInterface(receiverBinder) : null;
List list=getTasks(maxNum,fl,receiver);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=(ActivityManager.RunningTaskInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=(ActivityManager.RunningServiceInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToFront(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case FINISH_OTHER_INSTANCES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName className=ComponentName.readFromParcel(data);
finishOtherInstances(token,className);
reply.writeNoException();
return true;
}
case REPORT_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
reportThumbnail(token,thumbnail,description);
reply.writeNoException();
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
ContentProviderHolder cph=getContentProvider(app,name);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
removeContentProvider(app,name);
reply.writeNoException();
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
ComponentName cn=startService(app,service,resolvedType);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int res=stopService(app,service,resolvedType);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
boolean isForeground=data.readInt() != 0;
setServiceForeground(className,token,isForeground);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
serviceDoneExecuting(token);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
boolean res=startInstrumentation(className,profileFile,fl,arguments,w);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent requestIntent=data.readInt() != 0 ? Intent.CREATOR.createFromParcel(data) : null;
String requestResolvedType=data.readString();
int fl=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntent,requestResolvedType,fl);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int res=checkUriPermission(uri,pid,uid,mode);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
boolean res=clearApplicationUserData(packageName,observer);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
grantUriPermission(app,targetPkg,uri,mode);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
revokeUriPermission(app,uri,mode);
reply.writeNoException();
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GOING_TO_SLEEP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
goingToSleep();
reply.writeNoException();
return true;
}
case WAKING_UP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
wakingUp();
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_WATCHER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityWatcher watcher=IActivityWatcher.Stub.asInterface(data.readStrongBinder());
setActivityWatcher(watcher);
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
noteWakeupAlarm(is);
reply.writeNoException();
return true;
}
case KILL_PIDS_FOR_MEMORY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
boolean res=killPidsForMemory(pids);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REPORT_PSS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int pss=data.readInt();
reportPss(app,pss);
reply.writeNoException();
return true;
}
case START_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
String cls=data.readString();
String action=data.readString();
String indata=data.readString();
startRunning(pkg,cls,action,indata);
reply.writeNoException();
return true;
}
case SYSTEM_READY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
systemReady();
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_ERROR_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int fl=data.readInt();
String tag=data.readString();
String shortMsg=data.readString();
String longMsg=data.readString();
byte[] crashData=data.createByteArray();
int res=handleApplicationError(app,fl,tag,shortMsg,longMsg,crashData);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case RESTART_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
restartPackage(packageName);
reply.writeNoException();
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
boolean start=data.readInt() != 0;
String path=data.readString();
boolean res=profileControl(process,start,path);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
}
return super.onTransact(code,data,reply,flags);
}","public boolean onTransact(int code,Parcel data,Parcel reply,int flags) throws RemoteException {
switch (code) {
case START_ACTIVITY_TRANSACTION:
{
      data.enforceInterface(IActivityManager.descriptor);
      IBinder b=data.readStrongBinder();
      IApplicationThread app=ApplicationThreadNative.asInterface(b);
      Intent intent=Intent.CREATOR.createFromParcel(data);
      String resolvedType=data.readString();
      Uri[] grantedUriPermissions=data.createTypedArray(Uri.CREATOR);
      int grantedMode=data.readInt();
      IBinder resultTo=data.readStrongBinder();
      String resultWho=data.readString();
      int requestCode=data.readInt();
      boolean onlyIfNeeded=data.readInt() != 0;
      boolean debug=data.readInt() != 0;
      int result=startActivity(app,intent,resolvedType,grantedUriPermissions,grantedMode,resultTo,resultWho,requestCode,onlyIfNeeded,debug);
      reply.writeNoException();
      reply.writeInt(result);
      return true;
    }
case START_NEXT_MATCHING_ACTIVITY_TRANSACTION:
{
    data.enforceInterface(IActivityManager.descriptor);
    IBinder callingActivity=data.readStrongBinder();
    Intent intent=Intent.CREATOR.createFromParcel(data);
    boolean result=startNextMatchingActivity(callingActivity,intent);
    reply.writeNoException();
    reply.writeInt(result ? 1 : 0);
    return true;
  }
case FINISH_ACTIVITY_TRANSACTION:
{
  data.enforceInterface(IActivityManager.descriptor);
  IBinder token=data.readStrongBinder();
  Intent resultData=null;
  int resultCode=data.readInt();
  if (data.readInt() != 0) {
    resultData=Intent.CREATOR.createFromParcel(data);
  }
  boolean res=finishActivity(token,resultCode,resultData);
  reply.writeNoException();
  reply.writeInt(res ? 1 : 0);
  return true;
}
case FINISH_SUB_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
finishSubActivity(token,resultWho,requestCode);
reply.writeNoException();
return true;
}
case REGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
b=data.readStrongBinder();
IIntentReceiver rec=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
IntentFilter filter=IntentFilter.CREATOR.createFromParcel(data);
String perm=data.readString();
Intent intent=registerReceiver(app,rec,filter,perm);
reply.writeNoException();
if (intent != null) {
reply.writeInt(1);
intent.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case UNREGISTER_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
if (b == null) {
return true;
}
IIntentReceiver rec=IIntentReceiver.Stub.asInterface(b);
unregisterReceiver(rec);
reply.writeNoException();
return true;
}
case BROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
IIntentReceiver resultTo=b != null ? IIntentReceiver.Stub.asInterface(b) : null;
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
String perm=data.readString();
boolean serialized=data.readInt() != 0;
boolean sticky=data.readInt() != 0;
int res=broadcastIntent(app,intent,resolvedType,resultTo,resultCode,resultData,resultExtras,perm,serialized,sticky);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBROADCAST_INTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=b != null ? ApplicationThreadNative.asInterface(b) : null;
Intent intent=Intent.CREATOR.createFromParcel(data);
unbroadcastIntent(app,intent);
reply.writeNoException();
return true;
}
case FINISH_RECEIVER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder who=data.readStrongBinder();
int resultCode=data.readInt();
String resultData=data.readString();
Bundle resultExtras=data.readBundle();
boolean resultAbort=data.readInt() != 0;
if (who != null) {
finishReceiver(who,resultCode,resultData,resultExtras,resultAbort);
}
reply.writeNoException();
return true;
}
case SET_PERSISTENT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean isPersistent=data.readInt() != 0;
if (token != null) {
setPersistent(token,isPersistent);
}
reply.writeNoException();
return true;
}
case ATTACH_APPLICATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IApplicationThread app=ApplicationThreadNative.asInterface(data.readStrongBinder());
if (app != null) {
attachApplication(app);
}
reply.writeNoException();
return true;
}
case ACTIVITY_IDLE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
if (token != null) {
activityIdle(token);
}
reply.writeNoException();
return true;
}
case ACTIVITY_PAUSED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bundle map=data.readBundle();
activityPaused(token,map);
reply.writeNoException();
return true;
}
case ACTIVITY_STOPPED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
activityStopped(token,thumbnail,description);
reply.writeNoException();
return true;
}
case ACTIVITY_DESTROYED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
activityDestroyed(token);
reply.writeNoException();
return true;
}
case GET_CALLING_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
String res=token != null ? getCallingPackage(token) : null;
reply.writeNoException();
reply.writeString(res);
return true;
}
case GET_CALLING_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getCallingActivity(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
IBinder receiverBinder=data.readStrongBinder();
IThumbnailReceiver receiver=receiverBinder != null ? IThumbnailReceiver.Stub.asInterface(receiverBinder) : null;
List list=getTasks(maxNum,fl,receiver);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningTaskInfo info=(ActivityManager.RunningTaskInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_RECENT_TASKS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List<ActivityManager.RecentTaskInfo> list=getRecentTasks(maxNum,fl);
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_SERVICES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int maxNum=data.readInt();
int fl=data.readInt();
List list=getServices(maxNum,fl);
reply.writeNoException();
int N=list != null ? list.size() : -1;
reply.writeInt(N);
int i;
for (i=0; i < N; i++) {
ActivityManager.RunningServiceInfo info=(ActivityManager.RunningServiceInfo)list.get(i);
info.writeToParcel(reply,0);
}
return true;
}
case GET_PROCESSES_IN_ERROR_STATE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.ProcessErrorStateInfo> list=getProcessesInErrorState();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case GET_RUNNING_APP_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
List<ActivityManager.RunningAppProcessInfo> list=getRunningAppProcesses();
reply.writeNoException();
reply.writeTypedList(list);
return true;
}
case MOVE_TASK_TO_FRONT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToFront(task);
reply.writeNoException();
return true;
}
case MOVE_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskToBack(task);
reply.writeNoException();
return true;
}
case MOVE_ACTIVITY_TASK_TO_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean nonRoot=data.readInt() != 0;
boolean res=moveActivityTaskToBack(token,nonRoot);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case MOVE_TASK_BACKWARDS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int task=data.readInt();
moveTaskBackwards(task);
reply.writeNoException();
return true;
}
case GET_TASK_FOR_ACTIVITY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
boolean onlyRoot=data.readInt() != 0;
int res=token != null ? getTaskForActivity(token,onlyRoot) : -1;
reply.writeNoException();
reply.writeInt(res);
return true;
}
case FINISH_OTHER_INSTANCES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName className=ComponentName.readFromParcel(data);
finishOtherInstances(token,className);
reply.writeNoException();
return true;
}
case REPORT_THUMBNAIL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Bitmap thumbnail=data.readInt() != 0 ? Bitmap.CREATOR.createFromParcel(data) : null;
CharSequence description=TextUtils.CHAR_SEQUENCE_CREATOR.createFromParcel(data);
reportThumbnail(token,thumbnail,description);
reply.writeNoException();
return true;
}
case GET_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
ContentProviderHolder cph=getContentProvider(app,name);
reply.writeNoException();
if (cph != null) {
reply.writeInt(1);
cph.writeToParcel(reply,0);
}
 else {
reply.writeInt(0);
}
return true;
}
case PUBLISH_CONTENT_PROVIDERS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
ArrayList<ContentProviderHolder> providers=data.createTypedArrayList(ContentProviderHolder.CREATOR);
publishContentProviders(app,providers);
reply.writeNoException();
return true;
}
case REMOVE_CONTENT_PROVIDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String name=data.readString();
removeContentProvider(app,name);
reply.writeNoException();
return true;
}
case START_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
ComponentName cn=startService(app,service,resolvedType);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case STOP_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
int res=stopService(app,service,resolvedType);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case STOP_SERVICE_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
int startId=data.readInt();
boolean res=stopServiceToken(className,token,startId);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SET_SERVICE_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
IBinder token=data.readStrongBinder();
boolean isForeground=data.readInt() != 0;
setServiceForeground(className,token,isForeground);
reply.writeNoException();
return true;
}
case BIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
IBinder token=data.readStrongBinder();
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
b=data.readStrongBinder();
int fl=data.readInt();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
int res=bindService(app,token,service,resolvedType,conn,fl);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case UNBIND_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IServiceConnection conn=IServiceConnection.Stub.asInterface(b);
boolean res=unbindService(conn);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case PUBLISH_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
IBinder service=data.readStrongBinder();
publishService(token,intent,service);
reply.writeNoException();
return true;
}
case UNBIND_FINISHED_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
Intent intent=Intent.CREATOR.createFromParcel(data);
boolean doRebind=data.readInt() != 0;
unbindFinished(token,intent,doRebind);
reply.writeNoException();
return true;
}
case SERVICE_DONE_EXECUTING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
serviceDoneExecuting(token);
reply.writeNoException();
return true;
}
case START_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ComponentName className=ComponentName.readFromParcel(data);
String profileFile=data.readString();
int fl=data.readInt();
Bundle arguments=data.readBundle();
IBinder b=data.readStrongBinder();
IInstrumentationWatcher w=IInstrumentationWatcher.Stub.asInterface(b);
boolean res=startInstrumentation(className,profileFile,fl,arguments,w);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case FINISH_INSTRUMENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int resultCode=data.readInt();
Bundle results=data.readBundle();
finishInstrumentation(app,resultCode,results);
reply.writeNoException();
return true;
}
case GET_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=getConfiguration();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case UPDATE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Configuration config=Configuration.CREATOR.createFromParcel(data);
updateConfiguration(config);
reply.writeNoException();
return true;
}
case SET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int requestedOrientation=data.readInt();
setRequestedOrientation(token,requestedOrientation);
reply.writeNoException();
return true;
}
case GET_REQUESTED_ORIENTATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int req=getRequestedOrientation(token);
reply.writeNoException();
reply.writeInt(req);
return true;
}
case GET_ACTIVITY_CLASS_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
ComponentName cn=getActivityClassForToken(token);
reply.writeNoException();
ComponentName.writeToParcel(cn,reply);
return true;
}
case GET_PACKAGE_FOR_TOKEN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
reply.writeNoException();
reply.writeString(getPackageForToken(token));
return true;
}
case GET_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int type=data.readInt();
String packageName=data.readString();
IBinder token=data.readStrongBinder();
String resultWho=data.readString();
int requestCode=data.readInt();
Intent requestIntent=data.readInt() != 0 ? Intent.CREATOR.createFromParcel(data) : null;
String requestResolvedType=data.readString();
int fl=data.readInt();
IIntentSender res=getIntentSender(type,packageName,token,resultWho,requestCode,requestIntent,requestResolvedType,fl);
reply.writeNoException();
reply.writeStrongBinder(res != null ? res.asBinder() : null);
return true;
}
case CANCEL_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
cancelIntentSender(r);
reply.writeNoException();
return true;
}
case GET_PACKAGE_FOR_INTENT_SENDER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender r=IIntentSender.Stub.asInterface(data.readStrongBinder());
String res=getPackageForIntentSender(r);
reply.writeNoException();
reply.writeString(res);
return true;
}
case SET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int max=data.readInt();
setProcessLimit(max);
reply.writeNoException();
return true;
}
case GET_PROCESS_LIMIT_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int limit=getProcessLimit();
reply.writeNoException();
reply.writeInt(limit);
return true;
}
case SET_PROCESS_FOREGROUND_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder token=data.readStrongBinder();
int pid=data.readInt();
boolean isForeground=data.readInt() != 0;
setProcessForeground(token,pid,isForeground);
reply.writeNoException();
return true;
}
case CHECK_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String perm=data.readString();
int pid=data.readInt();
int uid=data.readInt();
int res=checkPermission(perm,pid,uid);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CHECK_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.CREATOR.createFromParcel(data);
int pid=data.readInt();
int uid=data.readInt();
int mode=data.readInt();
int res=checkUriPermission(uri,pid,uid,mode);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case CLEAR_APP_DATA_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
IPackageDataObserver observer=IPackageDataObserver.Stub.asInterface(data.readStrongBinder());
boolean res=clearApplicationUserData(packageName,observer);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case GRANT_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
String targetPkg=data.readString();
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
grantUriPermission(app,targetPkg,uri,mode);
reply.writeNoException();
return true;
}
case REVOKE_URI_PERMISSION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
Uri uri=Uri.CREATOR.createFromParcel(data);
int mode=data.readInt();
revokeUriPermission(app,uri,mode);
reply.writeNoException();
return true;
}
case SHOW_WAITING_FOR_DEBUGGER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
boolean waiting=data.readInt() != 0;
showWaitingForDebugger(app,waiting);
reply.writeNoException();
return true;
}
case GET_MEMORY_INFO_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ActivityManager.MemoryInfo mi=new ActivityManager.MemoryInfo();
getMemoryInfo(mi);
reply.writeNoException();
mi.writeToParcel(reply,0);
return true;
}
case UNHANDLED_BACK_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
unhandledBack();
reply.writeNoException();
return true;
}
case OPEN_CONTENT_URI_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Uri uri=Uri.parse(data.readString());
ParcelFileDescriptor pfd=openContentUri(uri);
reply.writeNoException();
if (pfd != null) {
reply.writeInt(1);
pfd.writeToParcel(reply,Parcelable.PARCELABLE_WRITE_RETURN_VALUE);
}
 else {
reply.writeInt(0);
}
return true;
}
case GOING_TO_SLEEP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
goingToSleep();
reply.writeNoException();
return true;
}
case WAKING_UP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
wakingUp();
reply.writeNoException();
return true;
}
case SET_DEBUG_APP_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pn=data.readString();
boolean wfd=data.readInt() != 0;
boolean per=data.readInt() != 0;
setDebugApp(pn,wfd,per);
reply.writeNoException();
return true;
}
case SET_ALWAYS_FINISH_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean enabled=data.readInt() != 0;
setAlwaysFinish(enabled);
reply.writeNoException();
return true;
}
case SET_ACTIVITY_WATCHER_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IActivityWatcher watcher=IActivityWatcher.Stub.asInterface(data.readStrongBinder());
setActivityWatcher(watcher);
return true;
}
case ENTER_SAFE_MODE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
enterSafeMode();
reply.writeNoException();
return true;
}
case NOTE_WAKEUP_ALARM_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IIntentSender is=IIntentSender.Stub.asInterface(data.readStrongBinder());
noteWakeupAlarm(is);
reply.writeNoException();
return true;
}
case KILL_PIDS_FOR_MEMORY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int[] pids=data.createIntArray();
boolean res=killPidsForMemory(pids);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case REPORT_PSS_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder b=data.readStrongBinder();
IApplicationThread app=ApplicationThreadNative.asInterface(b);
int pss=data.readInt();
reportPss(app,pss);
reply.writeNoException();
return true;
}
case START_RUNNING_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String pkg=data.readString();
String cls=data.readString();
String action=data.readString();
String indata=data.readString();
startRunning(pkg,cls,action,indata);
reply.writeNoException();
return true;
}
case SYSTEM_READY_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
systemReady();
reply.writeNoException();
return true;
}
case HANDLE_APPLICATION_ERROR_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
IBinder app=data.readStrongBinder();
int fl=data.readInt();
String tag=data.readString();
String shortMsg=data.readString();
String longMsg=data.readString();
byte[] crashData=data.createByteArray();
int res=handleApplicationError(app,fl,tag,shortMsg,longMsg,crashData);
reply.writeNoException();
reply.writeInt(res);
return true;
}
case SIGNAL_PERSISTENT_PROCESSES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
int sig=data.readInt();
signalPersistentProcesses(sig);
reply.writeNoException();
return true;
}
case RESTART_PACKAGE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String packageName=data.readString();
restartPackage(packageName);
reply.writeNoException();
return true;
}
case GET_DEVICE_CONFIGURATION_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
ConfigurationInfo config=getDeviceConfigurationInfo();
reply.writeNoException();
config.writeToParcel(reply,0);
return true;
}
case PROFILE_CONTROL_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
String process=data.readString();
boolean start=data.readInt() != 0;
String path=data.readString();
boolean res=profileControl(process,start,path);
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case SHUTDOWN_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
boolean res=shutdown(data.readInt());
reply.writeNoException();
reply.writeInt(res ? 1 : 0);
return true;
}
case STOP_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
stopAppSwitches();
reply.writeNoException();
return true;
}
case RESUME_APP_SWITCHES_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
resumeAppSwitches();
reply.writeNoException();
return true;
}
case PEEK_SERVICE_TRANSACTION:
{
data.enforceInterface(IActivityManager.descriptor);
Intent service=Intent.CREATOR.createFromParcel(data);
String resolvedType=data.readString();
IBinder binder=peekService(service,resolvedType);
reply.writeNoException();
reply.writeStrongBinder(binder);
return true;
}
}
return super.onTransact(code,data,reply,flags);
}"
24232,"/** 
 * <p> Call mDb.endTransaction(). If successful is true, try to call mDb.setTransactionSuccessful() before calling mDb.endTransaction(). This method MUST be used with   {@link #beginBatch()}. </p>
 * @hide This method must be used with {@link #beginTransaction}
 */
public final void endBatch(boolean successful){
  try {
    if (successful) {
      mDb.setTransactionSuccessful();
    }
  }
  finally {
    mApplyingBatch.set(false);
    getDatabase().endTransaction();
    for (    Uri url : mPendingBatchNotifications.get()) {
      getContext().getContentResolver().notifyChange(url,null,changeRequiresLocalSync(url));
    }
    mDb.endTransaction();
  }
}","/** 
 * <p> Finish batch transaction. If ""successful"" is true, try to call mDb.setTransactionSuccessful() before calling mDb.endTransaction(). This method MUST be used with   {@link #beginBatch()}. </p>
 * @hide This method must be used with {@link #beginTransaction}
 */
public final void endBatch(boolean successful){
  try {
    if (successful) {
      mDb.setTransactionSuccessful();
    }
  }
  finally {
    mApplyingBatch.set(false);
    getDatabase().endTransaction();
    for (    Uri url : mPendingBatchNotifications.get()) {
      getContext().getContentResolver().notifyChange(url,null,changeRequiresLocalSync(url));
    }
  }
}"
24233,"/** 
 * <p> Call mOpenHelper.getWritableDatabase() and mDb.beginTransaction().  {@link #endTransaction} MUST be called after calling this method.Those methods should be used like this: </p> <pre class=""prettyprint""> boolean successful = false; if (!beginTransaction()) { return; } try { // Do something related to mDb successful = true; return ret; } finally { endTransaction(successful); } </pre>
 * @hide This method should be used only when {@link #applyBatch} is not enough and must beused with  {@link #endTransaction}. e.g. If returned value has to be used during one transaction, this method might be useful.
 */
public final void beginBatch(){
  if (mApplyingBatch.get() == null) {
    mApplyingBatch.set(false);
    mPendingBatchNotifications.set(new HashSet<Uri>());
  }
  if (applyingBatch()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  SQLiteDatabase db=getDatabase();
  db.beginTransaction();
  boolean successful=false;
  try {
    mApplyingBatch.set(true);
    successful=true;
  }
  finally {
    if (!successful) {
      db.endTransaction();
    }
  }
}","/** 
 * <p> Start batch transaction.   {@link #endTransaction} MUST be called after calling this method. Those methods should be used like this: </p> <pre class=""prettyprint""> boolean successful = false; beginBatch() try { // Do something related to mDb successful = true; return ret; } finally { endBatch(successful); } </pre>
 * @hide This method should be used only when {@link #applyBatch} is not enough and must beused with  {@link #endBatch}. e.g. If returned value has to be used during one transaction, this method might be useful.
 */
public final void beginBatch(){
  if (mApplyingBatch.get() == null) {
    mApplyingBatch.set(false);
    mPendingBatchNotifications.set(new HashSet<Uri>());
  }
  if (applyingBatch()) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  SQLiteDatabase db=getDatabase();
  db.beginTransaction();
  boolean successful=false;
  try {
    mApplyingBatch.set(true);
    successful=true;
  }
  finally {
    if (!successful) {
      db.endTransaction();
    }
  }
}"
24234,"private PackageSetting getPackageLP(String name,SharedUserSetting sharedUser,File codePath,File resourcePath,int vc,int pkgFlags,boolean create,boolean add){
  PackageSetting p=mPackages.get(name);
  if (p != null) {
    if (!p.codePath.equals(codePath)) {
      PackageSetting ps=mDisabledSysPackages.get(name);
      if ((ps != null) && ((ps.pkgFlags & ApplicationInfo.FLAG_SYSTEM) != 0)) {
        return p;
      }
 else       if ((p.pkg != null) && (p.pkg.applicationInfo != null) && ((p.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0)) {
        reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ p.codePath+ ""String_Node_Str""+ codePath+ ""String_Node_Str"");
      }
 else {
        reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ p.codePath+ ""String_Node_Str""+ codePath+ ""String_Node_Str"");
        p=null;
      }
    }
 else     if (p.sharedUser != sharedUser) {
      reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ (p.sharedUser != null ? p.sharedUser.name : ""String_Node_Str"")+ ""String_Node_Str""+ (sharedUser != null ? sharedUser.name : ""String_Node_Str"")+ ""String_Node_Str"");
      p=null;
    }
  }
  if (p == null) {
    if (!create) {
      return null;
    }
    p=new PackageSetting(name,codePath,resourcePath,vc,pkgFlags);
    p.setTimeStamp(codePath.lastModified());
    if (sharedUser != null) {
      p.userId=sharedUser.userId;
    }
 else     if (MULTIPLE_APPLICATION_UIDS) {
      p.userId=newUserIdLP(p);
    }
 else {
      p.userId=FIRST_APPLICATION_UID;
    }
    if (p.userId < 0) {
      reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str"");
      return null;
    }
    if (add) {
      insertPackageSettingLP(p,name,sharedUser);
    }
  }
  return p;
}","private PackageSetting getPackageLP(String name,SharedUserSetting sharedUser,File codePath,File resourcePath,int vc,int pkgFlags,boolean create,boolean add){
  PackageSetting p=mPackages.get(name);
  if (p != null) {
    if (!p.codePath.equals(codePath)) {
      PackageSetting ps=mDisabledSysPackages.get(name);
      if ((ps != null) && ((ps.pkgFlags & ApplicationInfo.FLAG_SYSTEM) != 0)) {
        return p;
      }
 else       if ((p.pkg != null) && (p.pkg.applicationInfo != null) && ((p.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0)) {
        reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ p.codePath+ ""String_Node_Str""+ codePath+ ""String_Node_Str"");
      }
 else {
        reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ p.codePath+ ""String_Node_Str""+ codePath+ ""String_Node_Str"");
        p=null;
      }
    }
 else     if (p.sharedUser != sharedUser) {
      reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ (p.sharedUser != null ? p.sharedUser.name : ""String_Node_Str"")+ ""String_Node_Str""+ (sharedUser != null ? sharedUser.name : ""String_Node_Str"")+ ""String_Node_Str"");
      p=null;
    }
  }
  if (p == null) {
    if (!create) {
      return null;
    }
    p=new PackageSetting(name,codePath,resourcePath,vc,pkgFlags);
    p.setTimeStamp(codePath.lastModified());
    p.sharedUser=sharedUser;
    if (sharedUser != null) {
      p.userId=sharedUser.userId;
    }
 else     if (MULTIPLE_APPLICATION_UIDS) {
      p.userId=newUserIdLP(p);
    }
 else {
      p.userId=FIRST_APPLICATION_UID;
    }
    if (p.userId < 0) {
      reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str"");
      return null;
    }
    if (add) {
      insertPackageSettingLP(p,name,sharedUser);
    }
  }
  return p;
}"
24235,"private PackageSetting getPackageLP(String name,SharedUserSetting sharedUser,File codePath,File resourcePath,int pkgFlags,boolean create,boolean add){
  PackageSetting p=mPackages.get(name);
  if (p != null) {
    if (!p.codePath.equals(codePath)) {
      PackageSetting ps=mDisabledSysPackages.get(name);
      if ((ps != null) && ((ps.pkgFlags & ApplicationInfo.FLAG_SYSTEM) != 0)) {
        return p;
      }
 else       if ((p.pkg != null) && (p.pkg.applicationInfo != null) && ((p.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0)) {
        reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ p.codePath+ ""String_Node_Str""+ codePath+ ""String_Node_Str"");
      }
 else {
        reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ p.codePath+ ""String_Node_Str""+ codePath+ ""String_Node_Str"");
        p=null;
      }
    }
 else     if (p.sharedUser != sharedUser) {
      reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ (p.sharedUser != null ? p.sharedUser.name : ""String_Node_Str"")+ ""String_Node_Str""+ (sharedUser != null ? sharedUser.name : ""String_Node_Str"")+ ""String_Node_Str"");
      p=null;
    }
  }
  if (p == null) {
    if (!create) {
      return null;
    }
    p=new PackageSetting(name,codePath,resourcePath,pkgFlags);
    p.setTimeStamp(codePath.lastModified());
    if (sharedUser != null) {
      p.userId=sharedUser.userId;
    }
 else     if (MULTIPLE_APPLICATION_UIDS) {
      p.userId=newUserIdLP(p);
    }
 else {
      p.userId=FIRST_APPLICATION_UID;
    }
    if (p.userId < 0) {
      reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str"");
      return null;
    }
    if (add) {
      insertPackageSettingLP(p,name,sharedUser);
    }
  }
  return p;
}","private PackageSetting getPackageLP(String name,SharedUserSetting sharedUser,File codePath,File resourcePath,int pkgFlags,boolean create,boolean add){
  PackageSetting p=mPackages.get(name);
  if (p != null) {
    if (!p.codePath.equals(codePath)) {
      PackageSetting ps=mDisabledSysPackages.get(name);
      if ((ps != null) && ((ps.pkgFlags & ApplicationInfo.FLAG_SYSTEM) != 0)) {
        return p;
      }
 else       if ((p.pkg != null) && (p.pkg.applicationInfo != null) && ((p.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0)) {
        reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ p.codePath+ ""String_Node_Str""+ codePath+ ""String_Node_Str"");
      }
 else {
        reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ p.codePath+ ""String_Node_Str""+ codePath+ ""String_Node_Str"");
        p=null;
      }
    }
 else     if (p.sharedUser != sharedUser) {
      reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ (p.sharedUser != null ? p.sharedUser.name : ""String_Node_Str"")+ ""String_Node_Str""+ (sharedUser != null ? sharedUser.name : ""String_Node_Str"")+ ""String_Node_Str"");
      p=null;
    }
  }
  if (p == null) {
    if (!create) {
      return null;
    }
    p=new PackageSetting(name,codePath,resourcePath,pkgFlags);
    p.setTimeStamp(codePath.lastModified());
    p.sharedUser=sharedUser;
    if (sharedUser != null) {
      p.userId=sharedUser.userId;
    }
 else     if (MULTIPLE_APPLICATION_UIDS) {
      p.userId=newUserIdLP(p);
    }
 else {
      p.userId=FIRST_APPLICATION_UID;
    }
    if (p.userId < 0) {
      reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str"");
      return null;
    }
    if (add) {
      insertPackageSettingLP(p,name,sharedUser);
    }
  }
  return p;
}"
24236,"private PackageSetting getPackageLP(String name,SharedUserSetting sharedUser,File codePath,File resourcePath,int vc,int pkgFlags,boolean create,boolean add){
  PackageSetting p=mPackages.get(name);
  if (p != null) {
    if (!p.codePath.equals(codePath)) {
      PackageSetting ps=mDisabledSysPackages.get(name);
      if ((ps != null) && ((ps.pkgFlags & ApplicationInfo.FLAG_SYSTEM) != 0)) {
        return p;
      }
 else       if ((p.pkg != null) && (p.pkg.applicationInfo != null) && ((p.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0)) {
        reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ p.codePath+ ""String_Node_Str""+ codePath+ ""String_Node_Str"");
      }
 else {
        reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ p.codePath+ ""String_Node_Str""+ codePath+ ""String_Node_Str"");
        p=null;
      }
    }
 else     if (p.sharedUser != sharedUser) {
      reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ (p.sharedUser != null ? p.sharedUser.name : ""String_Node_Str"")+ ""String_Node_Str""+ (sharedUser != null ? sharedUser.name : ""String_Node_Str"")+ ""String_Node_Str"");
      p=null;
    }
  }
  if (p == null) {
    if (!create) {
      return null;
    }
    p=new PackageSetting(name,codePath,resourcePath,vc,pkgFlags);
    p.setTimeStamp(codePath.lastModified());
    if (sharedUser != null) {
      p.userId=sharedUser.userId;
    }
 else     if (MULTIPLE_APPLICATION_UIDS) {
      p.userId=newUserIdLP(p);
    }
 else {
      p.userId=FIRST_APPLICATION_UID;
    }
    if (p.userId < 0) {
      reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str"");
      return null;
    }
    if (add) {
      insertPackageSettingLP(p,name,sharedUser);
    }
  }
  return p;
}","private PackageSetting getPackageLP(String name,SharedUserSetting sharedUser,File codePath,File resourcePath,int vc,int pkgFlags,boolean create,boolean add){
  PackageSetting p=mPackages.get(name);
  if (p != null) {
    if (!p.codePath.equals(codePath)) {
      PackageSetting ps=mDisabledSysPackages.get(name);
      if ((ps != null) && ((ps.pkgFlags & ApplicationInfo.FLAG_SYSTEM) != 0)) {
        return p;
      }
 else       if ((p.pkg != null) && (p.pkg.applicationInfo != null) && ((p.pkg.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0)) {
        reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ p.codePath+ ""String_Node_Str""+ codePath+ ""String_Node_Str"");
      }
 else {
        reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ p.codePath+ ""String_Node_Str""+ codePath+ ""String_Node_Str"");
        p=null;
      }
    }
 else     if (p.sharedUser != sharedUser) {
      reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str""+ (p.sharedUser != null ? p.sharedUser.name : ""String_Node_Str"")+ ""String_Node_Str""+ (sharedUser != null ? sharedUser.name : ""String_Node_Str"")+ ""String_Node_Str"");
      p=null;
    }
  }
  if (p == null) {
    if (!create) {
      return null;
    }
    p=new PackageSetting(name,codePath,resourcePath,vc,pkgFlags);
    p.setTimeStamp(codePath.lastModified());
    p.sharedUser=sharedUser;
    if (sharedUser != null) {
      p.userId=sharedUser.userId;
    }
 else     if (MULTIPLE_APPLICATION_UIDS) {
      p.userId=newUserIdLP(p);
    }
 else {
      p.userId=FIRST_APPLICATION_UID;
    }
    if (p.userId < 0) {
      reportSettingsProblem(Log.WARN,""String_Node_Str"" + name + ""String_Node_Str"");
      return null;
    }
    if (add) {
      insertPackageSettingLP(p,name,sharedUser);
    }
  }
  return p;
}"
24237,"static void addFileType(String extension,int fileType,String mimeType){
  sFileTypeMap.put(extension,new MediaFileType(fileType,mimeType));
  sMimeTypeMap.put(mimeType,new Integer(fileType));
}","static void addFileType(String extension,int fileType,String mimeType){
  sFileTypeMap.put(extension,new MediaFileType(fileType,mimeType));
  sMimeTypeMap.put(mimeType,Integer.valueOf(fileType));
}"
24238,"private void updateWindow(boolean force){
  if (!mHaveFrame) {
    return;
  }
  int myWidth=mRequestedWidth;
  if (myWidth <= 0)   myWidth=getWidth();
  int myHeight=mRequestedHeight;
  if (myHeight <= 0)   myHeight=getHeight();
  if (mRequestedWidth <= 0) {
    myWidth*=mAppScale;
    myHeight*=mAppScale;
  }
  getLocationInWindow(mLocation);
  final boolean creating=mWindow == null;
  final boolean formatChanged=mFormat != mRequestedFormat;
  final boolean sizeChanged=mWidth != myWidth || mHeight != myHeight;
  final boolean visibleChanged=mVisible != mRequestedVisible || mNewSurfaceNeeded;
  final boolean typeChanged=mType != mRequestedType;
  if (force || creating || formatChanged|| sizeChanged|| visibleChanged|| typeChanged|| mLeft != mLocation[0] || mTop != mLocation[1]) {
    if (localLOGV)     Log.i(TAG,""String_Node_Str"" + creating + ""String_Node_Str""+ formatChanged+ ""String_Node_Str""+ sizeChanged+ ""String_Node_Str""+ visibleChanged+ ""String_Node_Str""+ (mLeft != mLocation[0])+ ""String_Node_Str""+ (mTop != mLocation[1]));
    try {
      final boolean visible=mVisible=mRequestedVisible;
      mLeft=mLocation[0];
      mTop=mLocation[1];
      mWidth=myWidth;
      mHeight=myHeight;
      mFormat=mRequestedFormat;
      mType=mRequestedType;
      mLayout.x=mLeft;
      mLayout.y=mTop;
      mLayout.width=(int)(getWidth() * mAppScale);
      mLayout.height=(int)(getHeight() * mAppScale);
      mLayout.format=mRequestedFormat;
      mLayout.flags|=WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS | WindowManager.LayoutParams.FLAG_SCALED | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE| WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;
      mLayout.memoryType=mRequestedType;
      if (mWindow == null) {
        mWindow=new MyWindow(this);
        mLayout.type=WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA;
        mLayout.gravity=Gravity.LEFT | Gravity.TOP;
        mSession.add(mWindow,mLayout,mVisible ? VISIBLE : GONE,mContentInsets);
      }
      if (visibleChanged && (!visible || mNewSurfaceNeeded)) {
        reportSurfaceDestroyed();
      }
      mNewSurfaceNeeded=false;
      mSurfaceLock.lock();
      mDrawingStopped=!visible;
      final int relayoutResult=mSession.relayout(mWindow,mLayout,mWidth,mHeight,visible ? VISIBLE : GONE,false,mWinFrame,mContentInsets,mVisibleInsets,mSurface);
      mContentInsets.scale(mAppScaleInverted);
      mVisibleInsets.scale(mAppScaleInverted);
      mWinFrame.scale(mAppScaleInverted);
      if (localLOGV)       Log.i(TAG,""String_Node_Str"" + mSurface + ""String_Node_Str""+ visible+ ""String_Node_Str""+ mWinFrame);
      mSurfaceFrame.left=0;
      mSurfaceFrame.top=0;
      mSurfaceFrame.right=mWinFrame.width();
      mSurfaceFrame.bottom=mWinFrame.height();
      mSurfaceLock.unlock();
      try {
        if (visible) {
          mDestroyReportNeeded=true;
          SurfaceHolder.Callback callbacks[];
synchronized (mCallbacks) {
            callbacks=new SurfaceHolder.Callback[mCallbacks.size()];
            mCallbacks.toArray(callbacks);
          }
          if (visibleChanged) {
            mIsCreating=true;
            for (            SurfaceHolder.Callback c : callbacks) {
              c.surfaceCreated(mSurfaceHolder);
            }
          }
          if (creating || formatChanged || sizeChanged|| visibleChanged) {
            for (            SurfaceHolder.Callback c : callbacks) {
              c.surfaceChanged(mSurfaceHolder,mFormat,mWidth,mHeight);
            }
          }
        }
      }
  finally {
        mIsCreating=false;
        if (creating || (relayoutResult & WindowManagerImpl.RELAYOUT_FIRST_TIME) != 0) {
          mSession.finishDrawing(mWindow);
        }
      }
    }
 catch (    RemoteException ex) {
    }
    if (localLOGV)     Log.v(TAG,""String_Node_Str"" + mLayout.x + ""String_Node_Str""+ mLayout.y+ ""String_Node_Str""+ mLayout.width+ ""String_Node_Str""+ mLayout.height+ ""String_Node_Str""+ mSurfaceFrame);
  }
}","private void updateWindow(boolean force){
  if (!mHaveFrame) {
    return;
  }
  int myWidth=mRequestedWidth;
  if (myWidth <= 0)   myWidth=getWidth();
  int myHeight=mRequestedHeight;
  if (myHeight <= 0)   myHeight=getHeight();
  if (mRequestedWidth <= 0) {
    myWidth*=mAppScale;
    myHeight*=mAppScale;
  }
  getLocationInWindow(mLocation);
  final boolean creating=mWindow == null;
  final boolean formatChanged=mFormat != mRequestedFormat;
  final boolean sizeChanged=mWidth != myWidth || mHeight != myHeight;
  final boolean visibleChanged=mVisible != mRequestedVisible || mNewSurfaceNeeded;
  final boolean typeChanged=mType != mRequestedType;
  if (force || creating || formatChanged|| sizeChanged|| visibleChanged|| typeChanged|| mLeft != mLocation[0] || mTop != mLocation[1]) {
    if (localLOGV)     Log.i(TAG,""String_Node_Str"" + creating + ""String_Node_Str""+ formatChanged+ ""String_Node_Str""+ sizeChanged+ ""String_Node_Str""+ visibleChanged+ ""String_Node_Str""+ (mLeft != mLocation[0])+ ""String_Node_Str""+ (mTop != mLocation[1]));
    try {
      final boolean visible=mVisible=mRequestedVisible;
      mLeft=mLocation[0];
      mTop=mLocation[1];
      mWidth=myWidth;
      mHeight=myHeight;
      mFormat=mRequestedFormat;
      mType=mRequestedType;
      mLayout.x=(int)(mLeft * mAppScale);
      mLayout.y=(int)(mTop * mAppScale);
      mLayout.width=(int)(getWidth() * mAppScale);
      mLayout.height=(int)(getHeight() * mAppScale);
      mLayout.format=mRequestedFormat;
      mLayout.flags|=WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS | WindowManager.LayoutParams.FLAG_SCALED | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE| WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;
      mLayout.memoryType=mRequestedType;
      if (mWindow == null) {
        mWindow=new MyWindow(this);
        mLayout.type=WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA;
        mLayout.gravity=Gravity.LEFT | Gravity.TOP;
        mSession.add(mWindow,mLayout,mVisible ? VISIBLE : GONE,mContentInsets);
      }
      if (visibleChanged && (!visible || mNewSurfaceNeeded)) {
        reportSurfaceDestroyed();
      }
      mNewSurfaceNeeded=false;
      mSurfaceLock.lock();
      mDrawingStopped=!visible;
      final int relayoutResult=mSession.relayout(mWindow,mLayout,mWidth,mHeight,visible ? VISIBLE : GONE,false,mWinFrame,mContentInsets,mVisibleInsets,mSurface);
      mContentInsets.scale(mAppScaleInverted);
      mVisibleInsets.scale(mAppScaleInverted);
      mWinFrame.scale(mAppScaleInverted);
      if (localLOGV)       Log.i(TAG,""String_Node_Str"" + mSurface + ""String_Node_Str""+ visible+ ""String_Node_Str""+ mWinFrame);
      mSurfaceFrame.left=0;
      mSurfaceFrame.top=0;
      mSurfaceFrame.right=mWinFrame.width();
      mSurfaceFrame.bottom=mWinFrame.height();
      mSurfaceLock.unlock();
      try {
        if (visible) {
          mDestroyReportNeeded=true;
          SurfaceHolder.Callback callbacks[];
synchronized (mCallbacks) {
            callbacks=new SurfaceHolder.Callback[mCallbacks.size()];
            mCallbacks.toArray(callbacks);
          }
          if (visibleChanged) {
            mIsCreating=true;
            for (            SurfaceHolder.Callback c : callbacks) {
              c.surfaceCreated(mSurfaceHolder);
            }
          }
          if (creating || formatChanged || sizeChanged|| visibleChanged) {
            for (            SurfaceHolder.Callback c : callbacks) {
              c.surfaceChanged(mSurfaceHolder,mFormat,mWidth,mHeight);
            }
          }
        }
      }
  finally {
        mIsCreating=false;
        if (creating || (relayoutResult & WindowManagerImpl.RELAYOUT_FIRST_TIME) != 0) {
          mSession.finishDrawing(mWindow);
        }
      }
    }
 catch (    RemoteException ex) {
    }
    if (localLOGV)     Log.v(TAG,""String_Node_Str"" + mLayout.x + ""String_Node_Str""+ mLayout.y+ ""String_Node_Str""+ mLayout.width+ ""String_Node_Str""+ mLayout.height+ ""String_Node_Str""+ mSurfaceFrame);
  }
}"
24239,"void setLayoutParams(WindowManager.LayoutParams attrs,boolean newView){
synchronized (this) {
    int oldSoftInputMode=mWindowAttributes.softInputMode;
    mWindowAttributes.copyFrom(attrs);
    mWindowAttributes.scale(mAppScale);
    if (newView) {
      mSoftInputMode=attrs.softInputMode;
      requestLayout();
    }
    if ((attrs.softInputMode & WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST) == WindowManager.LayoutParams.SOFT_INPUT_ADJUST_UNSPECIFIED) {
      mWindowAttributes.softInputMode=(mWindowAttributes.softInputMode & ~WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST) | (oldSoftInputMode & WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST);
    }
    mWindowAttributesChanged=true;
    scheduleTraversals();
  }
}","void setLayoutParams(WindowManager.LayoutParams attrs,boolean newView){
synchronized (this) {
    int oldSoftInputMode=mWindowAttributes.softInputMode;
    mWindowAttributes.copyFrom(attrs);
    if (newView) {
      mSoftInputMode=attrs.softInputMode;
      requestLayout();
    }
    if ((attrs.softInputMode & WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST) == WindowManager.LayoutParams.SOFT_INPUT_ADJUST_UNSPECIFIED) {
      mWindowAttributes.softInputMode=(mWindowAttributes.softInputMode & ~WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST) | (oldSoftInputMode & WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST);
    }
    mWindowAttributesChanged=true;
    scheduleTraversals();
  }
}"
24240,"private int relayoutWindow(WindowManager.LayoutParams params,int viewVisibility,boolean insetsPending) throws RemoteException {
  int relayoutResult=sWindowSession.relayout(mWindow,params,(int)(mView.mMeasuredWidth * mAppScale),(int)(mView.mMeasuredHeight * mAppScale),viewVisibility,insetsPending,mWinFrame,mPendingContentInsets,mPendingVisibleInsets,mSurface);
  mPendingContentInsets.scale(mAppScaleInverted);
  mPendingVisibleInsets.scale(mAppScaleInverted);
  mWinFrame.scale(mAppScaleInverted);
  return relayoutResult;
}","private int relayoutWindow(WindowManager.LayoutParams params,int viewVisibility,boolean insetsPending) throws RemoteException {
  boolean restore=false;
  if (params != null && mAppScale != 1.0f) {
    restore=true;
    params.scale(mAppScale,mWindowLayoutParamsBackup);
  }
  int relayoutResult=sWindowSession.relayout(mWindow,params,(int)(mView.mMeasuredWidth * mAppScale),(int)(mView.mMeasuredHeight * mAppScale),viewVisibility,insetsPending,mWinFrame,mPendingContentInsets,mPendingVisibleInsets,mSurface);
  if (restore) {
    params.restore(mWindowLayoutParamsBackup);
  }
  mPendingContentInsets.scale(mAppScaleInverted);
  mPendingVisibleInsets.scale(mAppScaleInverted);
  mWinFrame.scale(mAppScaleInverted);
  return relayoutResult;
}"
24241,"/** 
 * We have one child
 */
public void setView(View view,WindowManager.LayoutParams attrs,View panelParentView){
synchronized (this) {
    if (mView == null) {
      mView=view;
      mAppScale=mView.getContext().getApplicationScale();
      mAppScaleInverted=1.0f / mAppScale;
      mWindowAttributes.copyFrom(attrs);
      mSoftInputMode=attrs.softInputMode;
      mWindowAttributesChanged=true;
      mAttachInfo.mRootView=view;
      if (panelParentView != null) {
        mAttachInfo.mPanelParentWindowToken=panelParentView.getApplicationWindowToken();
      }
      mAdded=true;
      int res;
      requestLayout();
      try {
        res=sWindowSession.add(mWindow,attrs,getHostVisibility(),mAttachInfo.mContentInsets);
      }
 catch (      RemoteException e) {
        mAdded=false;
        mView=null;
        mAttachInfo.mRootView=null;
        unscheduleTraversals();
        throw new RuntimeException(""String_Node_Str"",e);
      }
      mAttachInfo.mContentInsets.scale(mAppScaleInverted);
      mPendingContentInsets.set(mAttachInfo.mContentInsets);
      mPendingVisibleInsets.set(0,0,0,0);
      if (Config.LOGV)       Log.v(""String_Node_Str"",""String_Node_Str"" + mWindow);
      if (res < WindowManagerImpl.ADD_OKAY) {
        mView=null;
        mAttachInfo.mRootView=null;
        mAdded=false;
        unscheduleTraversals();
switch (res) {
case WindowManagerImpl.ADD_BAD_APP_TOKEN:
case WindowManagerImpl.ADD_BAD_SUBWINDOW_TOKEN:
          throw new WindowManagerImpl.BadTokenException(""String_Node_Str"" + attrs.token + ""String_Node_Str"");
case WindowManagerImpl.ADD_NOT_APP_TOKEN:
        throw new WindowManagerImpl.BadTokenException(""String_Node_Str"" + attrs.token + ""String_Node_Str"");
case WindowManagerImpl.ADD_APP_EXITING:
      throw new WindowManagerImpl.BadTokenException(""String_Node_Str"" + attrs.token + ""String_Node_Str"");
case WindowManagerImpl.ADD_DUPLICATE_ADD:
    throw new WindowManagerImpl.BadTokenException(""String_Node_Str"" + mWindow + ""String_Node_Str"");
case WindowManagerImpl.ADD_STARTING_NOT_NEEDED:
  return;
case WindowManagerImpl.ADD_MULTIPLE_SINGLETON:
throw new WindowManagerImpl.BadTokenException(""String_Node_Str"" + mWindow + ""String_Node_Str"");
case WindowManagerImpl.ADD_PERMISSION_DENIED:
throw new WindowManagerImpl.BadTokenException(""String_Node_Str"" + mWindow + ""String_Node_Str"");
}
throw new RuntimeException(""String_Node_Str"" + res);
}
view.assignParent(this);
mAddedTouchMode=(res & WindowManagerImpl.ADD_FLAG_IN_TOUCH_MODE) != 0;
mAppVisible=(res & WindowManagerImpl.ADD_FLAG_APP_VISIBLE) != 0;
}
}
}","/** 
 * We have one child
 */
public void setView(View view,WindowManager.LayoutParams attrs,View panelParentView){
synchronized (this) {
    if (mView == null) {
      mView=view;
      mAppScale=mView.getContext().getApplicationScale();
      if (mAppScale != 1.0f) {
        mWindowLayoutParamsBackup=new int[4];
      }
      mAppScaleInverted=1.0f / mAppScale;
      mWindowAttributes.copyFrom(attrs);
      mSoftInputMode=attrs.softInputMode;
      mWindowAttributesChanged=true;
      mAttachInfo.mRootView=view;
      if (panelParentView != null) {
        mAttachInfo.mPanelParentWindowToken=panelParentView.getApplicationWindowToken();
      }
      mAdded=true;
      int res;
      requestLayout();
      try {
        res=sWindowSession.add(mWindow,attrs,getHostVisibility(),mAttachInfo.mContentInsets);
      }
 catch (      RemoteException e) {
        mAdded=false;
        mView=null;
        mAttachInfo.mRootView=null;
        unscheduleTraversals();
        throw new RuntimeException(""String_Node_Str"",e);
      }
      mAttachInfo.mContentInsets.scale(mAppScaleInverted);
      mPendingContentInsets.set(mAttachInfo.mContentInsets);
      mPendingVisibleInsets.set(0,0,0,0);
      if (Config.LOGV)       Log.v(""String_Node_Str"",""String_Node_Str"" + mWindow);
      if (res < WindowManagerImpl.ADD_OKAY) {
        mView=null;
        mAttachInfo.mRootView=null;
        mAdded=false;
        unscheduleTraversals();
switch (res) {
case WindowManagerImpl.ADD_BAD_APP_TOKEN:
case WindowManagerImpl.ADD_BAD_SUBWINDOW_TOKEN:
          throw new WindowManagerImpl.BadTokenException(""String_Node_Str"" + attrs.token + ""String_Node_Str"");
case WindowManagerImpl.ADD_NOT_APP_TOKEN:
        throw new WindowManagerImpl.BadTokenException(""String_Node_Str"" + attrs.token + ""String_Node_Str"");
case WindowManagerImpl.ADD_APP_EXITING:
      throw new WindowManagerImpl.BadTokenException(""String_Node_Str"" + attrs.token + ""String_Node_Str"");
case WindowManagerImpl.ADD_DUPLICATE_ADD:
    throw new WindowManagerImpl.BadTokenException(""String_Node_Str"" + mWindow + ""String_Node_Str"");
case WindowManagerImpl.ADD_STARTING_NOT_NEEDED:
  return;
case WindowManagerImpl.ADD_MULTIPLE_SINGLETON:
throw new WindowManagerImpl.BadTokenException(""String_Node_Str"" + mWindow + ""String_Node_Str"");
case WindowManagerImpl.ADD_PERMISSION_DENIED:
throw new WindowManagerImpl.BadTokenException(""String_Node_Str"" + mWindow + ""String_Node_Str"");
}
throw new RuntimeException(""String_Node_Str"" + res);
}
view.assignParent(this);
mAddedTouchMode=(res & WindowManagerImpl.ADD_FLAG_IN_TOUCH_MODE) != 0;
mAppVisible=(res & WindowManagerImpl.ADD_FLAG_APP_VISIBLE) != 0;
}
}
}"
24242,"void scale(float scale){
  if (scale != 1.0f) {
    x*=scale;
    y*=scale;
    if (width > 0) {
      width*=scale;
    }
    if (height > 0) {
      height*=scale;
    }
  }
}","/** 
 * Scale the layout params' coordinates and size. Returns the original info as a backup so that the caller can restore the layout params;
 */
void scale(float scale,int[] backup){
  if (scale != 1.0f) {
    backup[0]=x;
    backup[1]=y;
    x*=scale;
    y*=scale;
    if (width > 0) {
      backup[2]=width;
      width*=scale;
    }
    if (height > 0) {
      backup[3]=height;
      height*=scale;
    }
  }
}"
24243,"public void setSyncProviderAutomatically(String account,String providerName,boolean sync){
synchronized (mAuthorities) {
    if (account != null) {
      AuthorityInfo authority=getAuthorityLocked(account,providerName,""String_Node_Str"");
      if (authority != null) {
        authority.enabled=sync;
      }
    }
 else {
      int i=mAuthorities.size();
      while (i > 0) {
        i--;
        AuthorityInfo authority=mAuthorities.get(i);
        if (authority.account.equals(account) && authority.authority.equals(providerName)) {
          authority.enabled=sync;
        }
      }
    }
    writeAccountInfoLocked();
  }
  reportChange(CHANGE_SETTINGS);
}","public void setSyncProviderAutomatically(String account,String providerName,boolean sync){
synchronized (mAuthorities) {
    if (account != null) {
      AuthorityInfo authority=getAuthorityLocked(account,providerName,""String_Node_Str"");
      if (authority != null) {
        authority.enabled=sync;
      }
    }
 else {
      int i=mAuthorities.size();
      while (i > 0) {
        i--;
        AuthorityInfo authority=mAuthorities.get(i);
        if (authority.authority.equals(providerName)) {
          authority.enabled=sync;
        }
      }
    }
    writeAccountInfoLocked();
  }
  reportChange(CHANGE_SETTINGS);
}"
24244,"private final List generateApplicationProvidersLocked(ProcessRecord app){
  List providers=null;
  try {
    providers=ActivityThread.getPackageManager().queryContentProviders(app.processName,app.info.uid,PackageManager.GET_SHARED_LIBRARY_FILES | PackageManager.GET_URI_PERMISSION_PATTERNS);
  }
 catch (  RemoteException ex) {
  }
  if (providers != null) {
    final int N=providers.size();
    for (int i=0; i < N; i++) {
      ProviderInfo cpi=(ProviderInfo)providers.get(i);
      ContentProviderRecord cpr=(ContentProviderRecord)mProvidersByClass.get(cpi.name);
      if (cpr == null) {
        cpr=new ContentProviderRecord(cpi,app.info);
        mProvidersByClass.put(cpi.name,cpr);
      }
      app.pubProviders.put(cpi.name,cpr);
      app.addPackage(cpi.applicationInfo.packageName);
    }
  }
  return providers;
}","private final List generateApplicationProvidersLocked(ProcessRecord app){
  List providers=null;
  try {
    providers=ActivityThread.getPackageManager().queryContentProviders(app.processName,app.info.uid,STOCK_PM_FLAGS | PackageManager.GET_URI_PERMISSION_PATTERNS);
  }
 catch (  RemoteException ex) {
  }
  if (providers != null) {
    final int N=providers.size();
    for (int i=0; i < N; i++) {
      ProviderInfo cpi=(ProviderInfo)providers.get(i);
      ContentProviderRecord cpr=(ContentProviderRecord)mProvidersByClass.get(cpi.name);
      if (cpr == null) {
        cpr=new ContentProviderRecord(cpi,app.info);
        mProvidersByClass.put(cpi.name,cpr);
      }
      app.pubProviders.put(cpi.name,cpr);
      app.addPackage(cpi.applicationInfo.packageName);
    }
  }
  return providers;
}"
24245,"private final boolean attachApplicationLocked(IApplicationThread thread,int pid){
  ProcessRecord app;
  if (pid != MY_PID && pid >= 0) {
synchronized (mPidsSelfLocked) {
      app=mPidsSelfLocked.get(pid);
    }
  }
 else   if (mStartingProcesses.size() > 0) {
    app=mStartingProcesses.remove(0);
    app.setPid(pid);
  }
 else {
    app=null;
  }
  if (app == null) {
    Log.w(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ thread+ ""String_Node_Str"");
    EventLog.writeEvent(LOG_AM_DROP_PROCESS,pid);
    if (pid > 0 && pid != MY_PID) {
      Process.killProcess(pid);
    }
 else {
      try {
        thread.scheduleExit();
      }
 catch (      Exception e) {
      }
    }
    return false;
  }
  if (app.thread != null) {
    handleAppDiedLocked(app,true);
  }
  if (localLOGV)   Log.v(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ app);
  String processName=app.processName;
  try {
    thread.asBinder().linkToDeath(new AppDeathRecipient(app,pid,thread),0);
  }
 catch (  RemoteException e) {
    app.resetPackageList();
    startProcessLocked(app,""String_Node_Str"",processName);
    return false;
  }
  EventLog.writeEvent(LOG_AM_PROCESS_BOUND,app.pid,app.processName);
  app.thread=thread;
  app.curAdj=app.setAdj=-100;
  app.forcingToForeground=null;
  app.foregroundServices=false;
  app.debugging=false;
  mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
  List providers=generateApplicationProvidersLocked(app);
  if (localLOGV)   Log.v(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ thread.asBinder()+ ""String_Node_Str""+ pid);
  try {
    int testMode=IApplicationThread.DEBUG_OFF;
    if (mDebugApp != null && mDebugApp.equals(processName)) {
      testMode=mWaitForDebugger ? IApplicationThread.DEBUG_WAIT : IApplicationThread.DEBUG_ON;
      app.debugging=true;
      if (mDebugTransient) {
        mDebugApp=mOrigDebugApp;
        mWaitForDebugger=mOrigWaitForDebugger;
      }
    }
    thread.bindApplication(processName,app.info,providers,app.instrumentationClass,app.instrumentationProfileFile,app.instrumentationArguments,app.instrumentationWatcher,testMode,mConfiguration,getCommonServicesLocked());
    updateLRUListLocked(app,false);
    app.lastRequestedGc=SystemClock.uptimeMillis();
  }
 catch (  Exception e) {
    Log.w(TAG,""String_Node_Str"",e);
    app.resetPackageList();
    startProcessLocked(app,""String_Node_Str"",processName);
    return false;
  }
  mPersistentStartingProcesses.remove(app);
  mProcessesOnHold.remove(app);
  boolean badApp=false;
  boolean didSomething=false;
  HistoryRecord hr=topRunningActivityLocked(null);
  if (hr != null) {
    if (hr.app == null && app.info.uid == hr.info.applicationInfo.uid && processName.equals(hr.processName)) {
      try {
        if (realStartActivityLocked(hr,app,true,true)) {
          didSomething=true;
        }
      }
 catch (      Exception e) {
        Log.w(TAG,""String_Node_Str"" + hr.intent.getComponent().flattenToShortString(),e);
        badApp=true;
      }
    }
 else {
      ensureActivitiesVisibleLocked(hr,null,processName,0);
    }
  }
  if (!badApp && mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (app.info.uid != sr.appInfo.uid || !processName.equals(sr.processName)) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        realStartServiceLocked(sr,app);
        didSomething=true;
      }
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"" + sr.shortName,e);
      badApp=true;
    }
  }
  BroadcastRecord br=mPendingBroadcast;
  if (!badApp && br != null && br.curApp == app) {
    try {
      mPendingBroadcast=null;
      processCurBroadcastLocked(br,app);
      didSomething=true;
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"" + br.curComponent.flattenToShortString(),e);
      badApp=true;
      logBroadcastReceiverDiscard(br);
      finishReceiverLocked(br.receiver,br.resultCode,br.resultData,br.resultExtras,br.resultAbort,true);
      scheduleBroadcastsLocked();
    }
  }
  if (badApp) {
    handleAppDiedLocked(app,false);
    return false;
  }
  if (!didSomething) {
    updateOomAdjLocked();
  }
  return true;
}","private final boolean attachApplicationLocked(IApplicationThread thread,int pid){
  ProcessRecord app;
  if (pid != MY_PID && pid >= 0) {
synchronized (mPidsSelfLocked) {
      app=mPidsSelfLocked.get(pid);
    }
  }
 else   if (mStartingProcesses.size() > 0) {
    app=mStartingProcesses.remove(0);
    app.setPid(pid);
  }
 else {
    app=null;
  }
  if (app == null) {
    Log.w(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ thread+ ""String_Node_Str"");
    EventLog.writeEvent(LOG_AM_DROP_PROCESS,pid);
    if (pid > 0 && pid != MY_PID) {
      Process.killProcess(pid);
    }
 else {
      try {
        thread.scheduleExit();
      }
 catch (      Exception e) {
      }
    }
    return false;
  }
  if (app.thread != null) {
    handleAppDiedLocked(app,true);
  }
  if (localLOGV)   Log.v(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ app);
  String processName=app.processName;
  try {
    thread.asBinder().linkToDeath(new AppDeathRecipient(app,pid,thread),0);
  }
 catch (  RemoteException e) {
    app.resetPackageList();
    startProcessLocked(app,""String_Node_Str"",processName);
    return false;
  }
  EventLog.writeEvent(LOG_AM_PROCESS_BOUND,app.pid,app.processName);
  app.thread=thread;
  app.curAdj=app.setAdj=-100;
  app.forcingToForeground=null;
  app.foregroundServices=false;
  app.debugging=false;
  mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
  List providers=generateApplicationProvidersLocked(app);
  if (localLOGV)   Log.v(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ thread.asBinder()+ ""String_Node_Str""+ pid);
  try {
    int testMode=IApplicationThread.DEBUG_OFF;
    if (mDebugApp != null && mDebugApp.equals(processName)) {
      testMode=mWaitForDebugger ? IApplicationThread.DEBUG_WAIT : IApplicationThread.DEBUG_ON;
      app.debugging=true;
      if (mDebugTransient) {
        mDebugApp=mOrigDebugApp;
        mWaitForDebugger=mOrigWaitForDebugger;
      }
    }
    thread.bindApplication(processName,app.instrumentationInfo != null ? app.instrumentationInfo : app.info,providers,app.instrumentationClass,app.instrumentationProfileFile,app.instrumentationArguments,app.instrumentationWatcher,testMode,mConfiguration,getCommonServicesLocked());
    updateLRUListLocked(app,false);
    app.lastRequestedGc=SystemClock.uptimeMillis();
  }
 catch (  Exception e) {
    Log.w(TAG,""String_Node_Str"",e);
    app.resetPackageList();
    startProcessLocked(app,""String_Node_Str"",processName);
    return false;
  }
  mPersistentStartingProcesses.remove(app);
  mProcessesOnHold.remove(app);
  boolean badApp=false;
  boolean didSomething=false;
  HistoryRecord hr=topRunningActivityLocked(null);
  if (hr != null) {
    if (hr.app == null && app.info.uid == hr.info.applicationInfo.uid && processName.equals(hr.processName)) {
      try {
        if (realStartActivityLocked(hr,app,true,true)) {
          didSomething=true;
        }
      }
 catch (      Exception e) {
        Log.w(TAG,""String_Node_Str"" + hr.intent.getComponent().flattenToShortString(),e);
        badApp=true;
      }
    }
 else {
      ensureActivitiesVisibleLocked(hr,null,processName,0);
    }
  }
  if (!badApp && mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (app.info.uid != sr.appInfo.uid || !processName.equals(sr.processName)) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        realStartServiceLocked(sr,app);
        didSomething=true;
      }
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"" + sr.shortName,e);
      badApp=true;
    }
  }
  BroadcastRecord br=mPendingBroadcast;
  if (!badApp && br != null && br.curApp == app) {
    try {
      mPendingBroadcast=null;
      processCurBroadcastLocked(br,app);
      didSomething=true;
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"" + br.curComponent.flattenToShortString(),e);
      badApp=true;
      logBroadcastReceiverDiscard(br);
      finishReceiverLocked(br.receiver,br.resultCode,br.resultData,br.resultExtras,br.resultAbort,true);
      scheduleBroadcastsLocked();
    }
  }
  if (badApp) {
    handleAppDiedLocked(app,false);
    return false;
  }
  if (!didSomething) {
    updateOomAdjLocked();
  }
  return true;
}"
24246,"public boolean startInstrumentation(ComponentName className,String profileFile,int flags,Bundle arguments,IInstrumentationWatcher watcher){
  if (arguments != null && arguments.hasFileDescriptors()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
synchronized (this) {
    InstrumentationInfo ii=null;
    ApplicationInfo ai=null;
    try {
      ii=mContext.getPackageManager().getInstrumentationInfo(className,0);
      ai=mContext.getPackageManager().getApplicationInfo(ii.targetPackage,PackageManager.GET_SHARED_LIBRARY_FILES);
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
    if (ii == null) {
      reportStartInstrumentationFailure(watcher,className,""String_Node_Str"" + className);
      return false;
    }
    if (ai == null) {
      reportStartInstrumentationFailure(watcher,className,""String_Node_Str"" + ii.targetPackage);
      return false;
    }
    int match=mContext.getPackageManager().checkSignatures(ii.targetPackage,ii.packageName);
    if (match < 0 && match != PackageManager.SIGNATURE_FIRST_NOT_SIGNED) {
      String msg=""String_Node_Str"" + className + ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ ii.packageName+ ""String_Node_Str""+ ii.targetPackage;
      reportStartInstrumentationFailure(watcher,className,msg);
      throw new SecurityException(msg);
    }
    final long origId=Binder.clearCallingIdentity();
    uninstallPackageLocked(ii.targetPackage,-1,true);
    ProcessRecord app=addAppLocked(ai);
    app.instrumentationClass=className;
    app.instrumentationProfileFile=profileFile;
    app.instrumentationArguments=arguments;
    app.instrumentationWatcher=watcher;
    app.instrumentationResultClass=className;
    Binder.restoreCallingIdentity(origId);
  }
  return true;
}","public boolean startInstrumentation(ComponentName className,String profileFile,int flags,Bundle arguments,IInstrumentationWatcher watcher){
  if (arguments != null && arguments.hasFileDescriptors()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
synchronized (this) {
    InstrumentationInfo ii=null;
    ApplicationInfo ai=null;
    try {
      ii=mContext.getPackageManager().getInstrumentationInfo(className,STOCK_PM_FLAGS);
      ai=mContext.getPackageManager().getApplicationInfo(ii.targetPackage,STOCK_PM_FLAGS);
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
    if (ii == null) {
      reportStartInstrumentationFailure(watcher,className,""String_Node_Str"" + className);
      return false;
    }
    if (ai == null) {
      reportStartInstrumentationFailure(watcher,className,""String_Node_Str"" + ii.targetPackage);
      return false;
    }
    int match=mContext.getPackageManager().checkSignatures(ii.targetPackage,ii.packageName);
    if (match < 0 && match != PackageManager.SIGNATURE_FIRST_NOT_SIGNED) {
      String msg=""String_Node_Str"" + className + ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ ii.packageName+ ""String_Node_Str""+ ii.targetPackage;
      reportStartInstrumentationFailure(watcher,className,msg);
      throw new SecurityException(msg);
    }
    final long origId=Binder.clearCallingIdentity();
    uninstallPackageLocked(ii.targetPackage,-1,true);
    ProcessRecord app=addAppLocked(ai);
    app.instrumentationClass=className;
    app.instrumentationInfo=ai;
    app.instrumentationProfileFile=profileFile;
    app.instrumentationArguments=arguments;
    app.instrumentationWatcher=watcher;
    app.instrumentationResultClass=className;
    Binder.restoreCallingIdentity(origId);
  }
  return true;
}"
24247,"private ServiceLookupResult retrieveServiceLocked(Intent service,String resolvedType,int callingPid,int callingUid){
  ServiceRecord r=null;
  if (service.getComponent() != null) {
    r=mServices.get(service.getComponent());
  }
  Intent.FilterComparison filter=new Intent.FilterComparison(service);
  r=mServicesByIntent.get(filter);
  if (r == null) {
    try {
      ResolveInfo rInfo=ActivityThread.getPackageManager().resolveService(service,resolvedType,PackageManager.GET_SHARED_LIBRARY_FILES);
      ServiceInfo sInfo=rInfo != null ? rInfo.serviceInfo : null;
      if (sInfo == null) {
        Log.w(TAG,""String_Node_Str"" + service + ""String_Node_Str"");
        return null;
      }
      ComponentName name=new ComponentName(sInfo.applicationInfo.packageName,sInfo.name);
      r=mServices.get(name);
      if (r == null) {
        filter=new Intent.FilterComparison(service.cloneFilter());
        ServiceRestarter res=new ServiceRestarter();
        BatteryStatsImpl.Uid.Pkg.Serv ss=null;
        BatteryStatsImpl stats=mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
          ss=stats.getServiceStatsLocked(sInfo.applicationInfo.uid,sInfo.packageName,sInfo.name);
        }
        r=new ServiceRecord(ss,name,filter,sInfo,res);
        res.setService(r);
        mServices.put(name,r);
        mServicesByIntent.put(filter,r);
        int N=mPendingServices.size();
        for (int i=0; i < N; i++) {
          ServiceRecord pr=mPendingServices.get(i);
          if (pr.name.equals(name)) {
            mPendingServices.remove(i);
            i--;
            N--;
          }
        }
      }
    }
 catch (    RemoteException ex) {
    }
  }
  if (r != null) {
    if (checkComponentPermission(r.permission,callingPid,callingUid,r.exported ? -1 : r.appInfo.uid) != PackageManager.PERMISSION_GRANTED) {
      Log.w(TAG,""String_Node_Str"" + r.name + ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ r.permission);
      return new ServiceLookupResult(null,r.permission);
    }
    return new ServiceLookupResult(r,null);
  }
  return null;
}","private ServiceLookupResult retrieveServiceLocked(Intent service,String resolvedType,int callingPid,int callingUid){
  ServiceRecord r=null;
  if (service.getComponent() != null) {
    r=mServices.get(service.getComponent());
  }
  Intent.FilterComparison filter=new Intent.FilterComparison(service);
  r=mServicesByIntent.get(filter);
  if (r == null) {
    try {
      ResolveInfo rInfo=ActivityThread.getPackageManager().resolveService(service,resolvedType,STOCK_PM_FLAGS);
      ServiceInfo sInfo=rInfo != null ? rInfo.serviceInfo : null;
      if (sInfo == null) {
        Log.w(TAG,""String_Node_Str"" + service + ""String_Node_Str"");
        return null;
      }
      ComponentName name=new ComponentName(sInfo.applicationInfo.packageName,sInfo.name);
      r=mServices.get(name);
      if (r == null) {
        filter=new Intent.FilterComparison(service.cloneFilter());
        ServiceRestarter res=new ServiceRestarter();
        BatteryStatsImpl.Uid.Pkg.Serv ss=null;
        BatteryStatsImpl stats=mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
          ss=stats.getServiceStatsLocked(sInfo.applicationInfo.uid,sInfo.packageName,sInfo.name);
        }
        r=new ServiceRecord(ss,name,filter,sInfo,res);
        res.setService(r);
        mServices.put(name,r);
        mServicesByIntent.put(filter,r);
        int N=mPendingServices.size();
        for (int i=0; i < N; i++) {
          ServiceRecord pr=mPendingServices.get(i);
          if (pr.name.equals(name)) {
            mPendingServices.remove(i);
            i--;
            N--;
          }
        }
      }
    }
 catch (    RemoteException ex) {
    }
  }
  if (r != null) {
    if (checkComponentPermission(r.permission,callingPid,callingUid,r.exported ? -1 : r.appInfo.uid) != PackageManager.PERMISSION_GRANTED) {
      Log.w(TAG,""String_Node_Str"" + r.name + ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ r.permission);
      return new ServiceLookupResult(null,r.permission);
    }
    return new ServiceLookupResult(r,null);
  }
  return null;
}"
24248,"void finishInstrumentationLocked(ProcessRecord app,int resultCode,Bundle results){
  if (app.instrumentationWatcher != null) {
    try {
      app.instrumentationWatcher.instrumentationFinished(app.instrumentationClass,resultCode,results);
    }
 catch (    RemoteException e) {
    }
  }
  app.instrumentationWatcher=null;
  app.instrumentationClass=null;
  app.instrumentationProfileFile=null;
  app.instrumentationArguments=null;
  uninstallPackageLocked(app.processName,-1,false);
}","void finishInstrumentationLocked(ProcessRecord app,int resultCode,Bundle results){
  if (app.instrumentationWatcher != null) {
    try {
      app.instrumentationWatcher.instrumentationFinished(app.instrumentationClass,resultCode,results);
    }
 catch (    RemoteException e) {
    }
  }
  app.instrumentationWatcher=null;
  app.instrumentationClass=null;
  app.instrumentationInfo=null;
  app.instrumentationProfileFile=null;
  app.instrumentationArguments=null;
  uninstallPackageLocked(app.processName,-1,false);
}"
24249,"final int startActivityInPackage(int uid,Intent intent,String resolvedType,IBinder resultTo,String resultWho,int requestCode,boolean onlyIfNeeded){
  final boolean componentSpecified=intent.getComponent() != null;
  intent=new Intent(intent);
  ActivityInfo aInfo;
  try {
    ResolveInfo rInfo=ActivityThread.getPackageManager().resolveIntent(intent,resolvedType,PackageManager.MATCH_DEFAULT_ONLY | PackageManager.GET_SHARED_LIBRARY_FILES);
    aInfo=rInfo != null ? rInfo.activityInfo : null;
  }
 catch (  RemoteException e) {
    aInfo=null;
  }
  if (aInfo != null) {
    intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
  }
synchronized (this) {
    return startActivityLocked(null,intent,resolvedType,null,0,aInfo,resultTo,resultWho,requestCode,-1,uid,onlyIfNeeded,componentSpecified);
  }
}","final int startActivityInPackage(int uid,Intent intent,String resolvedType,IBinder resultTo,String resultWho,int requestCode,boolean onlyIfNeeded){
  final boolean componentSpecified=intent.getComponent() != null;
  intent=new Intent(intent);
  ActivityInfo aInfo;
  try {
    ResolveInfo rInfo=ActivityThread.getPackageManager().resolveIntent(intent,resolvedType,PackageManager.MATCH_DEFAULT_ONLY | STOCK_PM_FLAGS);
    aInfo=rInfo != null ? rInfo.activityInfo : null;
  }
 catch (  RemoteException e) {
    aInfo=null;
  }
  if (aInfo != null) {
    intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
  }
synchronized (this) {
    return startActivityLocked(null,intent,resolvedType,null,0,aInfo,resultTo,resultWho,requestCode,-1,uid,onlyIfNeeded,componentSpecified);
  }
}"
24250,"public static void setSystemProcess(){
  try {
    ActivityManagerService m=mSelf;
    ServiceManager.addService(""String_Node_Str"",m);
    ServiceManager.addService(""String_Node_Str"",new MemBinder(m));
    if (MONITOR_CPU_USAGE) {
      ServiceManager.addService(""String_Node_Str"",new CpuBinder(m));
    }
    ServiceManager.addService(""String_Node_Str"",new BroadcastsBinder(m));
    ServiceManager.addService(""String_Node_Str"",new ServicesBinder(m));
    ServiceManager.addService(""String_Node_Str"",new SendersBinder(m));
    ServiceManager.addService(""String_Node_Str"",new ProvidersBinder(m));
    ServiceManager.addService(""String_Node_Str"",new PermissionController(m));
    ApplicationInfo info=mSelf.mContext.getPackageManager().getApplicationInfo(""String_Node_Str"",PackageManager.GET_SHARED_LIBRARY_FILES);
synchronized (mSelf) {
      ProcessRecord app=mSelf.newProcessRecordLocked(mSystemThread.getApplicationThread(),info,info.processName);
      app.persistent=true;
      app.pid=Process.myPid();
      app.maxAdj=SYSTEM_ADJ;
      mSelf.mProcessNames.put(app.processName,app.info.uid,app);
synchronized (mSelf.mPidsSelfLocked) {
        mSelf.mPidsSelfLocked.put(app.pid,app);
      }
      mSelf.updateLRUListLocked(app,true);
    }
  }
 catch (  PackageManager.NameNotFoundException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","public static void setSystemProcess(){
  try {
    ActivityManagerService m=mSelf;
    ServiceManager.addService(""String_Node_Str"",m);
    ServiceManager.addService(""String_Node_Str"",new MemBinder(m));
    if (MONITOR_CPU_USAGE) {
      ServiceManager.addService(""String_Node_Str"",new CpuBinder(m));
    }
    ServiceManager.addService(""String_Node_Str"",new BroadcastsBinder(m));
    ServiceManager.addService(""String_Node_Str"",new ServicesBinder(m));
    ServiceManager.addService(""String_Node_Str"",new SendersBinder(m));
    ServiceManager.addService(""String_Node_Str"",new ProvidersBinder(m));
    ServiceManager.addService(""String_Node_Str"",new PermissionController(m));
    ApplicationInfo info=mSelf.mContext.getPackageManager().getApplicationInfo(""String_Node_Str"",STOCK_PM_FLAGS);
synchronized (mSelf) {
      ProcessRecord app=mSelf.newProcessRecordLocked(mSystemThread.getApplicationThread(),info,info.processName);
      app.persistent=true;
      app.pid=Process.myPid();
      app.maxAdj=SYSTEM_ADJ;
      mSelf.mProcessNames.put(app.processName,app.info.uid,app);
synchronized (mSelf.mPidsSelfLocked) {
        mSelf.mPidsSelfLocked.put(app.pid,app);
      }
      mSelf.updateLRUListLocked(app,true);
    }
  }
 catch (  PackageManager.NameNotFoundException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}"
24251,"public final int startActivity(IApplicationThread caller,Intent intent,String resolvedType,Uri[] grantedUriPermissions,int grantedMode,IBinder resultTo,String resultWho,int requestCode,boolean onlyIfNeeded,boolean debug){
  if (intent != null && intent.hasFileDescriptors()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final boolean componentSpecified=intent.getComponent() != null;
  intent=new Intent(intent);
  ActivityInfo aInfo;
  try {
    ResolveInfo rInfo=ActivityThread.getPackageManager().resolveIntent(intent,resolvedType,PackageManager.MATCH_DEFAULT_ONLY | PackageManager.GET_SHARED_LIBRARY_FILES);
    aInfo=rInfo != null ? rInfo.activityInfo : null;
  }
 catch (  RemoteException e) {
    aInfo=null;
  }
  if (aInfo != null) {
    intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
    if (debug) {
      if (!aInfo.processName.equals(""String_Node_Str"")) {
        setDebugApp(aInfo.processName,true,false);
      }
    }
  }
synchronized (this) {
    final long origId=Binder.clearCallingIdentity();
    int res=startActivityLocked(caller,intent,resolvedType,grantedUriPermissions,grantedMode,aInfo,resultTo,resultWho,requestCode,-1,-1,onlyIfNeeded,componentSpecified);
    Binder.restoreCallingIdentity(origId);
    return res;
  }
}","public final int startActivity(IApplicationThread caller,Intent intent,String resolvedType,Uri[] grantedUriPermissions,int grantedMode,IBinder resultTo,String resultWho,int requestCode,boolean onlyIfNeeded,boolean debug){
  if (intent != null && intent.hasFileDescriptors()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final boolean componentSpecified=intent.getComponent() != null;
  intent=new Intent(intent);
  ActivityInfo aInfo;
  try {
    ResolveInfo rInfo=ActivityThread.getPackageManager().resolveIntent(intent,resolvedType,PackageManager.MATCH_DEFAULT_ONLY | STOCK_PM_FLAGS);
    aInfo=rInfo != null ? rInfo.activityInfo : null;
  }
 catch (  RemoteException e) {
    aInfo=null;
  }
  if (aInfo != null) {
    intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
    if (debug) {
      if (!aInfo.processName.equals(""String_Node_Str"")) {
        setDebugApp(aInfo.processName,true,false);
      }
    }
  }
synchronized (this) {
    final long origId=Binder.clearCallingIdentity();
    int res=startActivityLocked(caller,intent,resolvedType,grantedUriPermissions,grantedMode,aInfo,resultTo,resultWho,requestCode,-1,-1,onlyIfNeeded,componentSpecified);
    Binder.restoreCallingIdentity(origId);
    return res;
  }
}"
24252,"public void systemReady(){
  if (!Process.supportsProcesses()) {
    mStartRunning=true;
    mTopAction=Intent.ACTION_MAIN;
  }
synchronized (this) {
    if (mSystemReady) {
      return;
    }
    mSystemReady=true;
    if (!mStartRunning) {
      return;
    }
  }
  if (Config.LOGD)   Log.d(TAG,""String_Node_Str"");
  EventLog.writeEvent(LOG_BOOT_PROGRESS_AMS_READY,SystemClock.uptimeMillis());
synchronized (this) {
    if (mFactoryTest == SystemServer.FACTORY_TEST_LOW_LEVEL) {
      ResolveInfo ri=mContext.getPackageManager().resolveActivity(new Intent(Intent.ACTION_FACTORY_TEST),0);
      CharSequence errorMsg=null;
      if (ri != null) {
        ActivityInfo ai=ri.activityInfo;
        ApplicationInfo app=ai.applicationInfo;
        if ((app.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
          mTopAction=Intent.ACTION_FACTORY_TEST;
          mTopData=null;
          mTopComponent=new ComponentName(app.packageName,ai.name);
        }
 else {
          errorMsg=mContext.getResources().getText(com.android.internal.R.string.factorytest_not_system);
        }
      }
 else {
        errorMsg=mContext.getResources().getText(com.android.internal.R.string.factorytest_no_action);
      }
      if (errorMsg != null) {
        mTopAction=null;
        mTopData=null;
        mTopComponent=null;
        Message msg=Message.obtain();
        msg.what=SHOW_FACTORY_ERROR_MSG;
        msg.getData().putCharSequence(""String_Node_Str"",errorMsg);
        mHandler.sendMessage(msg);
      }
    }
  }
  retrieveSettings();
synchronized (this) {
    if (mFactoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL) {
      try {
        List apps=ActivityThread.getPackageManager().getPersistentApplications(PackageManager.GET_SHARED_LIBRARY_FILES);
        if (apps != null) {
          int N=apps.size();
          int i;
          for (i=0; i < N; i++) {
            ApplicationInfo info=(ApplicationInfo)apps.get(i);
            if (info != null && !info.packageName.equals(""String_Node_Str"")) {
              addAppLocked(info);
            }
          }
        }
      }
 catch (      RemoteException ex) {
      }
    }
    try {
      if (ActivityThread.getPackageManager().hasSystemUidErrors()) {
        Message msg=Message.obtain();
        msg.what=SHOW_UID_ERROR_MSG;
        mHandler.sendMessage(msg);
      }
    }
 catch (    RemoteException e) {
    }
    mBooting=true;
    resumeTopActivityLocked(null);
  }
}","public void systemReady(){
  if (!Process.supportsProcesses()) {
    mStartRunning=true;
    mTopAction=Intent.ACTION_MAIN;
  }
synchronized (this) {
    if (mSystemReady) {
      return;
    }
    mSystemReady=true;
    if (!mStartRunning) {
      return;
    }
  }
  if (Config.LOGD)   Log.d(TAG,""String_Node_Str"");
  EventLog.writeEvent(LOG_BOOT_PROGRESS_AMS_READY,SystemClock.uptimeMillis());
synchronized (this) {
    if (mFactoryTest == SystemServer.FACTORY_TEST_LOW_LEVEL) {
      ResolveInfo ri=mContext.getPackageManager().resolveActivity(new Intent(Intent.ACTION_FACTORY_TEST),STOCK_PM_FLAGS);
      CharSequence errorMsg=null;
      if (ri != null) {
        ActivityInfo ai=ri.activityInfo;
        ApplicationInfo app=ai.applicationInfo;
        if ((app.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
          mTopAction=Intent.ACTION_FACTORY_TEST;
          mTopData=null;
          mTopComponent=new ComponentName(app.packageName,ai.name);
        }
 else {
          errorMsg=mContext.getResources().getText(com.android.internal.R.string.factorytest_not_system);
        }
      }
 else {
        errorMsg=mContext.getResources().getText(com.android.internal.R.string.factorytest_no_action);
      }
      if (errorMsg != null) {
        mTopAction=null;
        mTopData=null;
        mTopComponent=null;
        Message msg=Message.obtain();
        msg.what=SHOW_FACTORY_ERROR_MSG;
        msg.getData().putCharSequence(""String_Node_Str"",errorMsg);
        mHandler.sendMessage(msg);
      }
    }
  }
  retrieveSettings();
synchronized (this) {
    if (mFactoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL) {
      try {
        List apps=ActivityThread.getPackageManager().getPersistentApplications(STOCK_PM_FLAGS);
        if (apps != null) {
          int N=apps.size();
          int i;
          for (i=0; i < N; i++) {
            ApplicationInfo info=(ApplicationInfo)apps.get(i);
            if (info != null && !info.packageName.equals(""String_Node_Str"")) {
              addAppLocked(info);
            }
          }
        }
      }
 catch (      RemoteException ex) {
      }
    }
    try {
      if (ActivityThread.getPackageManager().hasSystemUidErrors()) {
        Message msg=Message.obtain();
        msg.what=SHOW_UID_ERROR_MSG;
        mHandler.sendMessage(msg);
      }
    }
 catch (    RemoteException e) {
    }
    mBooting=true;
    resumeTopActivityLocked(null);
  }
}"
24253,"public boolean startNextMatchingActivity(IBinder callingActivity,Intent intent){
  if (intent != null && intent.hasFileDescriptors() == true) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
synchronized (this) {
    int index=indexOfTokenLocked(callingActivity,false);
    if (index < 0) {
      return false;
    }
    HistoryRecord r=(HistoryRecord)mHistory.get(index);
    if (r.app == null || r.app.thread == null) {
      return false;
    }
    intent=new Intent(intent);
    intent.setDataAndType(r.intent.getData(),r.intent.getType());
    intent.setComponent(null);
    ActivityInfo aInfo=null;
    try {
      List<ResolveInfo> resolves=ActivityThread.getPackageManager().queryIntentActivities(intent,r.resolvedType,PackageManager.MATCH_DEFAULT_ONLY | PackageManager.GET_SHARED_LIBRARY_FILES);
      final int N=resolves != null ? resolves.size() : 0;
      for (int i=0; i < N; i++) {
        ResolveInfo rInfo=resolves.get(i);
        if (rInfo.activityInfo.packageName.equals(r.packageName) && rInfo.activityInfo.name.equals(r.info.name)) {
          i++;
          if (i < N) {
            aInfo=resolves.get(i).activityInfo;
          }
          break;
        }
      }
    }
 catch (    RemoteException e) {
    }
    if (aInfo == null) {
      return false;
    }
    intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
    intent.setFlags(intent.getFlags() & ~(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_MULTIPLE_TASK| Intent.FLAG_ACTIVITY_NEW_TASK));
    final boolean wasFinishing=r.finishing;
    r.finishing=true;
    final HistoryRecord resultTo=r.resultTo;
    final String resultWho=r.resultWho;
    final int requestCode=r.requestCode;
    r.resultTo=null;
    if (resultTo != null) {
      resultTo.removeResultsLocked(r,resultWho,requestCode);
    }
    final long origId=Binder.clearCallingIdentity();
    int res=startActivityLocked(r.app.thread,intent,r.resolvedType,null,0,aInfo,resultTo,resultWho,requestCode,-1,r.launchedFromUid,false,false);
    Binder.restoreCallingIdentity(origId);
    r.finishing=wasFinishing;
    if (res != START_SUCCESS) {
      return false;
    }
    return true;
  }
}","public boolean startNextMatchingActivity(IBinder callingActivity,Intent intent){
  if (intent != null && intent.hasFileDescriptors() == true) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
synchronized (this) {
    int index=indexOfTokenLocked(callingActivity,false);
    if (index < 0) {
      return false;
    }
    HistoryRecord r=(HistoryRecord)mHistory.get(index);
    if (r.app == null || r.app.thread == null) {
      return false;
    }
    intent=new Intent(intent);
    intent.setDataAndType(r.intent.getData(),r.intent.getType());
    intent.setComponent(null);
    ActivityInfo aInfo=null;
    try {
      List<ResolveInfo> resolves=ActivityThread.getPackageManager().queryIntentActivities(intent,r.resolvedType,PackageManager.MATCH_DEFAULT_ONLY | STOCK_PM_FLAGS);
      final int N=resolves != null ? resolves.size() : 0;
      for (int i=0; i < N; i++) {
        ResolveInfo rInfo=resolves.get(i);
        if (rInfo.activityInfo.packageName.equals(r.packageName) && rInfo.activityInfo.name.equals(r.info.name)) {
          i++;
          if (i < N) {
            aInfo=resolves.get(i).activityInfo;
          }
          break;
        }
      }
    }
 catch (    RemoteException e) {
    }
    if (aInfo == null) {
      return false;
    }
    intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
    intent.setFlags(intent.getFlags() & ~(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_MULTIPLE_TASK| Intent.FLAG_ACTIVITY_NEW_TASK));
    final boolean wasFinishing=r.finishing;
    r.finishing=true;
    final HistoryRecord resultTo=r.resultTo;
    final String resultWho=r.resultWho;
    final int requestCode=r.requestCode;
    r.resultTo=null;
    if (resultTo != null) {
      resultTo.removeResultsLocked(r,resultWho,requestCode);
    }
    final long origId=Binder.clearCallingIdentity();
    int res=startActivityLocked(r.app.thread,intent,r.resolvedType,null,0,aInfo,resultTo,resultWho,requestCode,-1,r.launchedFromUid,false,false);
    Binder.restoreCallingIdentity(origId);
    r.finishing=wasFinishing;
    if (res != START_SUCCESS) {
      return false;
    }
    return true;
  }
}"
24254,"/** 
 * Ensure that the top activity in the stack is resumed.
 * @param prev The previously resumed activity, for when in the processof pausing; can be null to call from elsewhere.
 * @return Returns true if something is being resumed, or false ifnothing happened.
 */
private final boolean resumeTopActivityLocked(HistoryRecord prev){
  HistoryRecord next=topRunningActivityLocked(null);
  final boolean userLeaving=mUserLeaving;
  mUserLeaving=false;
  if (next == null) {
    if (mFactoryTest == SystemServer.FACTORY_TEST_LOW_LEVEL && mTopAction == null) {
      return false;
    }
    Intent intent=new Intent(mTopAction,mTopData != null ? Uri.parse(mTopData) : null);
    intent.setComponent(mTopComponent);
    if (mFactoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL) {
      intent.addCategory(Intent.CATEGORY_HOME);
    }
    ActivityInfo aInfo=intent.resolveActivityInfo(mContext.getPackageManager(),PackageManager.GET_SHARED_LIBRARY_FILES);
    if (aInfo != null) {
      intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
      ProcessRecord app=getProcessRecordLocked(aInfo.processName,aInfo.applicationInfo.uid);
      if (app == null || app.instrumentationClass == null) {
        intent.setFlags(intent.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivityLocked(null,intent,null,null,0,aInfo,null,null,0,0,0,false,false);
      }
    }
    return true;
  }
  if (mResumedActivity == next && next.state == ActivityState.RESUMED) {
    mWindowManager.executeAppTransition();
    return false;
  }
  if ((mSleeping || mShuttingDown) && mLastPausedActivity == next && next.state == ActivityState.PAUSED) {
    mWindowManager.executeAppTransition();
    return false;
  }
  mStoppingActivities.remove(next);
  mWaitingVisibleActivities.remove(next);
  if (DEBUG_SWITCH)   Log.v(TAG,""String_Node_Str"" + next);
  if (mPausingActivity != null) {
    if (DEBUG_SWITCH)     Log.v(TAG,""String_Node_Str"" + mPausingActivity);
    return false;
  }
  if (mResumedActivity != null) {
    if (DEBUG_SWITCH)     Log.v(TAG,""String_Node_Str"");
    startPausingLocked(userLeaving,false);
    return true;
  }
  if (prev != null && prev != next) {
    if (!prev.waitingVisible && next != null && !next.nowVisible) {
      prev.waitingVisible=true;
      mWaitingVisibleActivities.add(prev);
      if (DEBUG_SWITCH)       Log.v(TAG,""String_Node_Str"" + prev);
    }
 else {
      if (prev.finishing) {
        mWindowManager.setAppVisibility(prev,false);
        if (DEBUG_SWITCH)         Log.v(TAG,""String_Node_Str"" + prev + ""String_Node_Str""+ (prev != null ? prev.waitingVisible : null)+ ""String_Node_Str""+ next.nowVisible);
      }
 else {
        if (DEBUG_SWITCH)         Log.v(TAG,""String_Node_Str"" + prev + ""String_Node_Str""+ (prev != null ? prev.waitingVisible : null)+ ""String_Node_Str""+ next.nowVisible);
      }
    }
  }
  if (prev != null) {
    if (prev.finishing) {
      if (DEBUG_TRANSITION)       Log.v(TAG,""String_Node_Str"" + prev);
      mWindowManager.prepareAppTransition(prev.task == next.task ? WindowManagerPolicy.TRANSIT_ACTIVITY_CLOSE : WindowManagerPolicy.TRANSIT_TASK_CLOSE);
      mWindowManager.setAppWillBeHidden(prev);
      mWindowManager.setAppVisibility(prev,false);
    }
 else {
      if (DEBUG_TRANSITION)       Log.v(TAG,""String_Node_Str"" + prev);
      mWindowManager.prepareAppTransition(prev.task == next.task ? WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN : WindowManagerPolicy.TRANSIT_TASK_OPEN);
    }
    if (false) {
      mWindowManager.setAppWillBeHidden(prev);
      mWindowManager.setAppVisibility(prev,false);
    }
  }
 else   if (mHistory.size() > 1) {
    if (DEBUG_TRANSITION)     Log.v(TAG,""String_Node_Str"");
    mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN);
  }
  if (next.app != null && next.app.thread != null) {
    if (DEBUG_SWITCH)     Log.v(TAG,""String_Node_Str"" + next);
    mWindowManager.setAppVisibility(next,true);
    HistoryRecord lastResumedActivity=mResumedActivity;
    ActivityState lastState=next.state;
    updateCpuStats();
    next.state=ActivityState.RESUMED;
    mResumedActivity=next;
    next.task.touchActiveTime();
    updateLRUListLocked(next.app,true);
    updateLRUListLocked(next);
    Configuration config=mWindowManager.updateOrientationFromAppTokens(mConfiguration,next.mayFreezeScreenLocked(next.app) ? next : null);
    if (config != null) {
      next.frozenBeforeDestroy=true;
    }
    if (!updateConfigurationLocked(config,next)) {
      HistoryRecord nextNext=topRunningActivityLocked(null);
      if (DEBUG_SWITCH)       Log.i(TAG,""String_Node_Str"" + next + ""String_Node_Str""+ nextNext);
      if (nextNext != next) {
        mHandler.sendEmptyMessage(RESUME_TOP_ACTIVITY_MSG);
      }
      mWindowManager.executeAppTransition();
      return true;
    }
    try {
      ArrayList a=next.results;
      if (a != null) {
        final int N=a.size();
        if (!next.finishing && N > 0) {
          if (DEBUG_RESULTS)           Log.v(TAG,""String_Node_Str"" + next + ""String_Node_Str""+ a);
          next.app.thread.scheduleSendResult(next,a);
        }
      }
      if (next.newIntents != null) {
        next.app.thread.scheduleNewIntent(next.newIntents,next);
      }
      EventLog.writeEvent(LOG_AM_RESUME_ACTIVITY,System.identityHashCode(next),next.task.taskId,next.shortComponentName);
      updateUsageStats(next,true);
      next.app.thread.scheduleResumeActivity(next,isNextTransitionForward());
      pauseIfSleepingLocked();
    }
 catch (    Exception e) {
      next.state=lastState;
      mResumedActivity=lastResumedActivity;
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + next);
      if (!next.hasBeenLaunched) {
        next.hasBeenLaunched=true;
      }
 else {
        if (SHOW_APP_STARTING_ICON) {
          mWindowManager.setAppStartingWindow(next,next.packageName,next.theme,next.nonLocalizedLabel,next.labelRes,next.icon,null,true);
        }
      }
      startSpecificActivityLocked(next,true,false);
      return true;
    }
    try {
      next.visible=true;
      completeResumeLocked(next);
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"" + next,e);
      requestFinishActivityLocked(next,Activity.RESULT_CANCELED,null,""String_Node_Str"");
      return true;
    }
    next.icicle=null;
    next.haveState=false;
    next.stopped=false;
  }
 else {
    if (!next.hasBeenLaunched) {
      next.hasBeenLaunched=true;
    }
 else {
      if (SHOW_APP_STARTING_ICON) {
        mWindowManager.setAppStartingWindow(next,next.packageName,next.theme,next.nonLocalizedLabel,next.labelRes,next.icon,null,true);
      }
      if (DEBUG_SWITCH)       Log.v(TAG,""String_Node_Str"" + next);
    }
    startSpecificActivityLocked(next,true,true);
  }
  return true;
}","/** 
 * Ensure that the top activity in the stack is resumed.
 * @param prev The previously resumed activity, for when in the processof pausing; can be null to call from elsewhere.
 * @return Returns true if something is being resumed, or false ifnothing happened.
 */
private final boolean resumeTopActivityLocked(HistoryRecord prev){
  HistoryRecord next=topRunningActivityLocked(null);
  final boolean userLeaving=mUserLeaving;
  mUserLeaving=false;
  if (next == null) {
    if (mFactoryTest == SystemServer.FACTORY_TEST_LOW_LEVEL && mTopAction == null) {
      return false;
    }
    Intent intent=new Intent(mTopAction,mTopData != null ? Uri.parse(mTopData) : null);
    intent.setComponent(mTopComponent);
    if (mFactoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL) {
      intent.addCategory(Intent.CATEGORY_HOME);
    }
    ActivityInfo aInfo=intent.resolveActivityInfo(mContext.getPackageManager(),STOCK_PM_FLAGS);
    if (aInfo != null) {
      intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
      ProcessRecord app=getProcessRecordLocked(aInfo.processName,aInfo.applicationInfo.uid);
      if (app == null || app.instrumentationClass == null) {
        intent.setFlags(intent.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivityLocked(null,intent,null,null,0,aInfo,null,null,0,0,0,false,false);
      }
    }
    return true;
  }
  if (mResumedActivity == next && next.state == ActivityState.RESUMED) {
    mWindowManager.executeAppTransition();
    return false;
  }
  if ((mSleeping || mShuttingDown) && mLastPausedActivity == next && next.state == ActivityState.PAUSED) {
    mWindowManager.executeAppTransition();
    return false;
  }
  mStoppingActivities.remove(next);
  mWaitingVisibleActivities.remove(next);
  if (DEBUG_SWITCH)   Log.v(TAG,""String_Node_Str"" + next);
  if (mPausingActivity != null) {
    if (DEBUG_SWITCH)     Log.v(TAG,""String_Node_Str"" + mPausingActivity);
    return false;
  }
  if (mResumedActivity != null) {
    if (DEBUG_SWITCH)     Log.v(TAG,""String_Node_Str"");
    startPausingLocked(userLeaving,false);
    return true;
  }
  if (prev != null && prev != next) {
    if (!prev.waitingVisible && next != null && !next.nowVisible) {
      prev.waitingVisible=true;
      mWaitingVisibleActivities.add(prev);
      if (DEBUG_SWITCH)       Log.v(TAG,""String_Node_Str"" + prev);
    }
 else {
      if (prev.finishing) {
        mWindowManager.setAppVisibility(prev,false);
        if (DEBUG_SWITCH)         Log.v(TAG,""String_Node_Str"" + prev + ""String_Node_Str""+ (prev != null ? prev.waitingVisible : null)+ ""String_Node_Str""+ next.nowVisible);
      }
 else {
        if (DEBUG_SWITCH)         Log.v(TAG,""String_Node_Str"" + prev + ""String_Node_Str""+ (prev != null ? prev.waitingVisible : null)+ ""String_Node_Str""+ next.nowVisible);
      }
    }
  }
  if (prev != null) {
    if (prev.finishing) {
      if (DEBUG_TRANSITION)       Log.v(TAG,""String_Node_Str"" + prev);
      mWindowManager.prepareAppTransition(prev.task == next.task ? WindowManagerPolicy.TRANSIT_ACTIVITY_CLOSE : WindowManagerPolicy.TRANSIT_TASK_CLOSE);
      mWindowManager.setAppWillBeHidden(prev);
      mWindowManager.setAppVisibility(prev,false);
    }
 else {
      if (DEBUG_TRANSITION)       Log.v(TAG,""String_Node_Str"" + prev);
      mWindowManager.prepareAppTransition(prev.task == next.task ? WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN : WindowManagerPolicy.TRANSIT_TASK_OPEN);
    }
    if (false) {
      mWindowManager.setAppWillBeHidden(prev);
      mWindowManager.setAppVisibility(prev,false);
    }
  }
 else   if (mHistory.size() > 1) {
    if (DEBUG_TRANSITION)     Log.v(TAG,""String_Node_Str"");
    mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN);
  }
  if (next.app != null && next.app.thread != null) {
    if (DEBUG_SWITCH)     Log.v(TAG,""String_Node_Str"" + next);
    mWindowManager.setAppVisibility(next,true);
    HistoryRecord lastResumedActivity=mResumedActivity;
    ActivityState lastState=next.state;
    updateCpuStats();
    next.state=ActivityState.RESUMED;
    mResumedActivity=next;
    next.task.touchActiveTime();
    updateLRUListLocked(next.app,true);
    updateLRUListLocked(next);
    Configuration config=mWindowManager.updateOrientationFromAppTokens(mConfiguration,next.mayFreezeScreenLocked(next.app) ? next : null);
    if (config != null) {
      next.frozenBeforeDestroy=true;
    }
    if (!updateConfigurationLocked(config,next)) {
      HistoryRecord nextNext=topRunningActivityLocked(null);
      if (DEBUG_SWITCH)       Log.i(TAG,""String_Node_Str"" + next + ""String_Node_Str""+ nextNext);
      if (nextNext != next) {
        mHandler.sendEmptyMessage(RESUME_TOP_ACTIVITY_MSG);
      }
      mWindowManager.executeAppTransition();
      return true;
    }
    try {
      ArrayList a=next.results;
      if (a != null) {
        final int N=a.size();
        if (!next.finishing && N > 0) {
          if (DEBUG_RESULTS)           Log.v(TAG,""String_Node_Str"" + next + ""String_Node_Str""+ a);
          next.app.thread.scheduleSendResult(next,a);
        }
      }
      if (next.newIntents != null) {
        next.app.thread.scheduleNewIntent(next.newIntents,next);
      }
      EventLog.writeEvent(LOG_AM_RESUME_ACTIVITY,System.identityHashCode(next),next.task.taskId,next.shortComponentName);
      updateUsageStats(next,true);
      next.app.thread.scheduleResumeActivity(next,isNextTransitionForward());
      pauseIfSleepingLocked();
    }
 catch (    Exception e) {
      next.state=lastState;
      mResumedActivity=lastResumedActivity;
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + next);
      if (!next.hasBeenLaunched) {
        next.hasBeenLaunched=true;
      }
 else {
        if (SHOW_APP_STARTING_ICON) {
          mWindowManager.setAppStartingWindow(next,next.packageName,next.theme,next.nonLocalizedLabel,next.labelRes,next.icon,null,true);
        }
      }
      startSpecificActivityLocked(next,true,false);
      return true;
    }
    try {
      next.visible=true;
      completeResumeLocked(next);
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"" + next,e);
      requestFinishActivityLocked(next,Activity.RESULT_CANCELED,null,""String_Node_Str"");
      return true;
    }
    next.icicle=null;
    next.haveState=false;
    next.stopped=false;
  }
 else {
    if (!next.hasBeenLaunched) {
      next.hasBeenLaunched=true;
    }
 else {
      if (SHOW_APP_STARTING_ICON) {
        mWindowManager.setAppStartingWindow(next,next.packageName,next.theme,next.nonLocalizedLabel,next.labelRes,next.icon,null,true);
      }
      if (DEBUG_SWITCH)       Log.v(TAG,""String_Node_Str"" + next);
    }
    startSpecificActivityLocked(next,true,true);
  }
  return true;
}"
24255,"private final int broadcastIntentLocked(ProcessRecord callerApp,String callerPackage,Intent intent,String resolvedType,IIntentReceiver resultTo,int resultCode,String resultData,Bundle map,String requiredPermission,boolean ordered,boolean sticky,int callingPid,int callingUid){
  intent=new Intent(intent);
  if (DEBUG_BROADCAST)   Log.v(TAG,(sticky ? ""String_Node_Str"" : ""String_Node_Str"") + intent + ""String_Node_Str""+ ordered);
  if ((resultTo != null) && !ordered) {
    Log.w(TAG,""String_Node_Str"" + intent + ""String_Node_Str"");
  }
  final boolean uidRemoved=intent.ACTION_UID_REMOVED.equals(intent.getAction());
  if (intent.ACTION_PACKAGE_REMOVED.equals(intent.getAction()) || intent.ACTION_PACKAGE_CHANGED.equals(intent.getAction()) || uidRemoved) {
    if (checkComponentPermission(android.Manifest.permission.BROADCAST_PACKAGE_REMOVED,callingPid,callingUid,-1) == PackageManager.PERMISSION_GRANTED) {
      if (uidRemoved) {
        final Bundle intentExtras=intent.getExtras();
        final int uid=intentExtras != null ? intentExtras.getInt(Intent.EXTRA_UID) : -1;
        if (uid >= 0) {
          BatteryStatsImpl bs=mBatteryStatsService.getActiveStatistics();
synchronized (bs) {
            bs.removeUidStatsLocked(uid);
          }
        }
      }
 else {
        Uri data=intent.getData();
        String ssp;
        if (data != null && (ssp=data.getSchemeSpecificPart()) != null) {
          if (!intent.getBooleanExtra(Intent.EXTRA_DONT_KILL_APP,false)) {
            uninstallPackageLocked(ssp,intent.getIntExtra(Intent.EXTRA_UID,-1),false);
          }
        }
      }
    }
 else {
      String msg=""String_Node_Str"" + intent.getAction() + ""String_Node_Str""+ callerPackage+ ""String_Node_Str""+ callingPid+ ""String_Node_Str""+ callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ android.Manifest.permission.BROADCAST_PACKAGE_REMOVED;
      Log.w(TAG,msg);
      throw new SecurityException(msg);
    }
  }
  if (intent.ACTION_TIMEZONE_CHANGED.equals(intent.getAction())) {
    mHandler.sendEmptyMessage(UPDATE_TIME_ZONE);
  }
  if (sticky) {
    if (checkPermission(android.Manifest.permission.BROADCAST_STICKY,callingPid,callingUid) != PackageManager.PERMISSION_GRANTED) {
      String msg=""String_Node_Str"" + callingPid + ""String_Node_Str""+ callingUid+ ""String_Node_Str""+ android.Manifest.permission.BROADCAST_STICKY;
      Log.w(TAG,msg);
      throw new SecurityException(msg);
    }
    if (requiredPermission != null) {
      Log.w(TAG,""String_Node_Str"" + intent + ""String_Node_Str""+ requiredPermission);
      return BROADCAST_STICKY_CANT_HAVE_PERMISSION;
    }
    if (intent.getComponent() != null) {
      throw new SecurityException(""String_Node_Str"");
    }
    ArrayList<Intent> list=mStickyBroadcasts.get(intent.getAction());
    if (list == null) {
      list=new ArrayList<Intent>();
      mStickyBroadcasts.put(intent.getAction(),list);
    }
    int N=list.size();
    int i;
    for (i=0; i < N; i++) {
      if (intent.filterEquals(list.get(i))) {
        list.set(i,new Intent(intent));
        break;
      }
    }
    if (i >= N) {
      list.add(new Intent(intent));
    }
  }
  final ContentResolver resolver=mContext.getContentResolver();
  List receivers=null;
  List<BroadcastFilter> registeredReceivers=null;
  try {
    if (intent.getComponent() != null) {
      ActivityInfo ai=ActivityThread.getPackageManager().getReceiverInfo(intent.getComponent(),0);
      if (ai != null) {
        receivers=new ArrayList();
        ResolveInfo ri=new ResolveInfo();
        ri.activityInfo=ai;
        receivers.add(ri);
      }
    }
 else {
      if ((intent.getFlags() & Intent.FLAG_RECEIVER_REGISTERED_ONLY) == 0) {
        receivers=ActivityThread.getPackageManager().queryIntentReceivers(intent,resolvedType,PackageManager.GET_SHARED_LIBRARY_FILES);
      }
      registeredReceivers=mReceiverResolver.queryIntent(resolver,intent,resolvedType,false);
    }
  }
 catch (  RemoteException ex) {
  }
  int NR=registeredReceivers != null ? registeredReceivers.size() : 0;
  if (!ordered && NR > 0) {
    BroadcastRecord r=new BroadcastRecord(intent,callerApp,callerPackage,callingPid,callingUid,requiredPermission,registeredReceivers,resultTo,resultCode,resultData,map,ordered);
    if (DEBUG_BROADCAST)     Log.v(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ mParallelBroadcasts.size());
    mParallelBroadcasts.add(r);
    scheduleBroadcastsLocked();
    registeredReceivers=null;
    NR=0;
  }
  int ir=0;
  if (receivers != null) {
    boolean skip=false;
    if (intent.ACTION_PACKAGE_ADDED.equals(intent.getAction())) {
      skip=true;
    }
 else     if (intent.ACTION_PACKAGE_RESTARTED.equals(intent.getAction())) {
      skip=true;
    }
 else     if (intent.ACTION_PACKAGE_DATA_CLEARED.equals(intent.getAction())) {
      skip=true;
    }
    String skipPackage=(skip && intent.getData() != null) ? intent.getData().getSchemeSpecificPart() : null;
    if (skipPackage != null && receivers != null) {
      int NT=receivers.size();
      for (int it=0; it < NT; it++) {
        ResolveInfo curt=(ResolveInfo)receivers.get(it);
        if (curt.activityInfo.packageName.equals(skipPackage)) {
          receivers.remove(it);
          it--;
          NT--;
        }
      }
    }
    int NT=receivers != null ? receivers.size() : 0;
    int it=0;
    ResolveInfo curt=null;
    BroadcastFilter curr=null;
    while (it < NT && ir < NR) {
      if (curt == null) {
        curt=(ResolveInfo)receivers.get(it);
      }
      if (curr == null) {
        curr=registeredReceivers.get(ir);
      }
      if (curr.getPriority() >= curt.priority) {
        receivers.add(it,curr);
        ir++;
        curr=null;
        it++;
        NT++;
      }
 else {
        it++;
        curt=null;
      }
    }
  }
  while (ir < NR) {
    if (receivers == null) {
      receivers=new ArrayList();
    }
    receivers.add(registeredReceivers.get(ir));
    ir++;
  }
  if ((receivers != null && receivers.size() > 0) || resultTo != null) {
    BroadcastRecord r=new BroadcastRecord(intent,callerApp,callerPackage,callingPid,callingUid,requiredPermission,receivers,resultTo,resultCode,resultData,map,ordered);
    if (DEBUG_BROADCAST)     Log.v(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ mOrderedBroadcasts.size());
    if (DEBUG_BROADCAST) {
      int seq=r.intent.getIntExtra(""String_Node_Str"",-1);
      Log.i(TAG,""String_Node_Str"" + r.intent.getAction() + ""String_Node_Str""+ seq);
    }
    mOrderedBroadcasts.add(r);
    scheduleBroadcastsLocked();
  }
  return BROADCAST_SUCCESS;
}","private final int broadcastIntentLocked(ProcessRecord callerApp,String callerPackage,Intent intent,String resolvedType,IIntentReceiver resultTo,int resultCode,String resultData,Bundle map,String requiredPermission,boolean ordered,boolean sticky,int callingPid,int callingUid){
  intent=new Intent(intent);
  if (DEBUG_BROADCAST)   Log.v(TAG,(sticky ? ""String_Node_Str"" : ""String_Node_Str"") + intent + ""String_Node_Str""+ ordered);
  if ((resultTo != null) && !ordered) {
    Log.w(TAG,""String_Node_Str"" + intent + ""String_Node_Str"");
  }
  final boolean uidRemoved=intent.ACTION_UID_REMOVED.equals(intent.getAction());
  if (intent.ACTION_PACKAGE_REMOVED.equals(intent.getAction()) || intent.ACTION_PACKAGE_CHANGED.equals(intent.getAction()) || uidRemoved) {
    if (checkComponentPermission(android.Manifest.permission.BROADCAST_PACKAGE_REMOVED,callingPid,callingUid,-1) == PackageManager.PERMISSION_GRANTED) {
      if (uidRemoved) {
        final Bundle intentExtras=intent.getExtras();
        final int uid=intentExtras != null ? intentExtras.getInt(Intent.EXTRA_UID) : -1;
        if (uid >= 0) {
          BatteryStatsImpl bs=mBatteryStatsService.getActiveStatistics();
synchronized (bs) {
            bs.removeUidStatsLocked(uid);
          }
        }
      }
 else {
        Uri data=intent.getData();
        String ssp;
        if (data != null && (ssp=data.getSchemeSpecificPart()) != null) {
          if (!intent.getBooleanExtra(Intent.EXTRA_DONT_KILL_APP,false)) {
            uninstallPackageLocked(ssp,intent.getIntExtra(Intent.EXTRA_UID,-1),false);
          }
        }
      }
    }
 else {
      String msg=""String_Node_Str"" + intent.getAction() + ""String_Node_Str""+ callerPackage+ ""String_Node_Str""+ callingPid+ ""String_Node_Str""+ callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ android.Manifest.permission.BROADCAST_PACKAGE_REMOVED;
      Log.w(TAG,msg);
      throw new SecurityException(msg);
    }
  }
  if (intent.ACTION_TIMEZONE_CHANGED.equals(intent.getAction())) {
    mHandler.sendEmptyMessage(UPDATE_TIME_ZONE);
  }
  if (sticky) {
    if (checkPermission(android.Manifest.permission.BROADCAST_STICKY,callingPid,callingUid) != PackageManager.PERMISSION_GRANTED) {
      String msg=""String_Node_Str"" + callingPid + ""String_Node_Str""+ callingUid+ ""String_Node_Str""+ android.Manifest.permission.BROADCAST_STICKY;
      Log.w(TAG,msg);
      throw new SecurityException(msg);
    }
    if (requiredPermission != null) {
      Log.w(TAG,""String_Node_Str"" + intent + ""String_Node_Str""+ requiredPermission);
      return BROADCAST_STICKY_CANT_HAVE_PERMISSION;
    }
    if (intent.getComponent() != null) {
      throw new SecurityException(""String_Node_Str"");
    }
    ArrayList<Intent> list=mStickyBroadcasts.get(intent.getAction());
    if (list == null) {
      list=new ArrayList<Intent>();
      mStickyBroadcasts.put(intent.getAction(),list);
    }
    int N=list.size();
    int i;
    for (i=0; i < N; i++) {
      if (intent.filterEquals(list.get(i))) {
        list.set(i,new Intent(intent));
        break;
      }
    }
    if (i >= N) {
      list.add(new Intent(intent));
    }
  }
  final ContentResolver resolver=mContext.getContentResolver();
  List receivers=null;
  List<BroadcastFilter> registeredReceivers=null;
  try {
    if (intent.getComponent() != null) {
      ActivityInfo ai=ActivityThread.getPackageManager().getReceiverInfo(intent.getComponent(),STOCK_PM_FLAGS);
      if (ai != null) {
        receivers=new ArrayList();
        ResolveInfo ri=new ResolveInfo();
        ri.activityInfo=ai;
        receivers.add(ri);
      }
    }
 else {
      if ((intent.getFlags() & Intent.FLAG_RECEIVER_REGISTERED_ONLY) == 0) {
        receivers=ActivityThread.getPackageManager().queryIntentReceivers(intent,resolvedType,STOCK_PM_FLAGS);
      }
      registeredReceivers=mReceiverResolver.queryIntent(resolver,intent,resolvedType,false);
    }
  }
 catch (  RemoteException ex) {
  }
  int NR=registeredReceivers != null ? registeredReceivers.size() : 0;
  if (!ordered && NR > 0) {
    BroadcastRecord r=new BroadcastRecord(intent,callerApp,callerPackage,callingPid,callingUid,requiredPermission,registeredReceivers,resultTo,resultCode,resultData,map,ordered);
    if (DEBUG_BROADCAST)     Log.v(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ mParallelBroadcasts.size());
    mParallelBroadcasts.add(r);
    scheduleBroadcastsLocked();
    registeredReceivers=null;
    NR=0;
  }
  int ir=0;
  if (receivers != null) {
    boolean skip=false;
    if (intent.ACTION_PACKAGE_ADDED.equals(intent.getAction())) {
      skip=true;
    }
 else     if (intent.ACTION_PACKAGE_RESTARTED.equals(intent.getAction())) {
      skip=true;
    }
 else     if (intent.ACTION_PACKAGE_DATA_CLEARED.equals(intent.getAction())) {
      skip=true;
    }
    String skipPackage=(skip && intent.getData() != null) ? intent.getData().getSchemeSpecificPart() : null;
    if (skipPackage != null && receivers != null) {
      int NT=receivers.size();
      for (int it=0; it < NT; it++) {
        ResolveInfo curt=(ResolveInfo)receivers.get(it);
        if (curt.activityInfo.packageName.equals(skipPackage)) {
          receivers.remove(it);
          it--;
          NT--;
        }
      }
    }
    int NT=receivers != null ? receivers.size() : 0;
    int it=0;
    ResolveInfo curt=null;
    BroadcastFilter curr=null;
    while (it < NT && ir < NR) {
      if (curt == null) {
        curt=(ResolveInfo)receivers.get(it);
      }
      if (curr == null) {
        curr=registeredReceivers.get(ir);
      }
      if (curr.getPriority() >= curt.priority) {
        receivers.add(it,curr);
        ir++;
        curr=null;
        it++;
        NT++;
      }
 else {
        it++;
        curt=null;
      }
    }
  }
  while (ir < NR) {
    if (receivers == null) {
      receivers=new ArrayList();
    }
    receivers.add(registeredReceivers.get(ir));
    ir++;
  }
  if ((receivers != null && receivers.size() > 0) || resultTo != null) {
    BroadcastRecord r=new BroadcastRecord(intent,callerApp,callerPackage,callingPid,callingUid,requiredPermission,receivers,resultTo,resultCode,resultData,map,ordered);
    if (DEBUG_BROADCAST)     Log.v(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ mOrderedBroadcasts.size());
    if (DEBUG_BROADCAST) {
      int seq=r.intent.getIntExtra(""String_Node_Str"",-1);
      Log.i(TAG,""String_Node_Str"" + r.intent.getAction() + ""String_Node_Str""+ seq);
    }
    mOrderedBroadcasts.add(r);
    scheduleBroadcastsLocked();
  }
  return BROADCAST_SUCCESS;
}"
24256,"private final ContentProviderHolder getContentProviderImpl(IApplicationThread caller,String name){
  ContentProviderRecord cpr;
  ProviderInfo cpi=null;
synchronized (this) {
    ProcessRecord r=null;
    if (caller != null) {
      r=getRecordForAppLocked(caller);
      if (r == null) {
        throw new SecurityException(""String_Node_Str"" + caller + ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ name);
      }
    }
    cpr=(ContentProviderRecord)mProvidersByName.get(name);
    if (cpr != null) {
      cpi=cpr.info;
      if (checkContentProviderPermissionLocked(cpi,r,-1) != null) {
        return new ContentProviderHolder(cpi,cpi.readPermission != null ? cpi.readPermission : cpi.writePermission);
      }
      if (r != null && cpr.canRunHere(r)) {
        if (cpr.provider != null) {
          cpr=new ContentProviderRecord(cpr);
        }
        return cpr;
      }
      final long origId=Binder.clearCallingIdentity();
      if (r != null) {
        r.conProviders.add(cpr);
        cpr.clients.add(r);
      }
 else {
        cpr.externals++;
      }
      if (cpr.app != null) {
        updateOomAdjLocked(cpr.app);
      }
      Binder.restoreCallingIdentity(origId);
    }
 else {
      try {
        cpi=ActivityThread.getPackageManager().resolveContentProvider(name,PackageManager.GET_URI_PERMISSION_PATTERNS);
      }
 catch (      RemoteException ex) {
      }
      if (cpi == null) {
        return null;
      }
      if (checkContentProviderPermissionLocked(cpi,r,-1) != null) {
        return new ContentProviderHolder(cpi,cpi.readPermission != null ? cpi.readPermission : cpi.writePermission);
      }
      cpr=(ContentProviderRecord)mProvidersByClass.get(cpi.name);
      final boolean firstClass=cpr == null;
      if (firstClass) {
        try {
          ApplicationInfo ai=ActivityThread.getPackageManager().getApplicationInfo(cpi.applicationInfo.packageName,PackageManager.GET_SHARED_LIBRARY_FILES);
          if (ai == null) {
            Log.w(TAG,""String_Node_Str"" + cpi.name);
            return null;
          }
          cpr=new ContentProviderRecord(cpi,ai);
        }
 catch (        RemoteException ex) {
        }
      }
      if (r != null && cpr.canRunHere(r)) {
        return cpr;
      }
      if (false) {
        RuntimeException e=new RuntimeException(""String_Node_Str"");
      }
      final int N=mLaunchingProviders.size();
      int i;
      for (i=0; i < N; i++) {
        if (mLaunchingProviders.get(i) == cpr) {
          break;
        }
        if (false) {
          final ContentProviderRecord rec=(ContentProviderRecord)mLaunchingProviders.get(i);
          if (rec.info.name.equals(cpr.info.name)) {
            cpr=rec;
            break;
          }
        }
      }
      if (i >= N) {
        final long origId=Binder.clearCallingIdentity();
        ProcessRecord proc=startProcessLocked(cpi.processName,cpr.appInfo,false,0,""String_Node_Str"",new ComponentName(cpi.applicationInfo.packageName,cpi.name));
        if (proc == null) {
          Log.w(TAG,""String_Node_Str"" + cpi.applicationInfo.packageName + ""String_Node_Str""+ cpi.applicationInfo.uid+ ""String_Node_Str""+ name+ ""String_Node_Str"");
          return null;
        }
        cpr.launchingApp=proc;
        mLaunchingProviders.add(cpr);
        Binder.restoreCallingIdentity(origId);
      }
      if (firstClass) {
        mProvidersByClass.put(cpi.name,cpr);
      }
      mProvidersByName.put(name,cpr);
      if (r != null) {
        r.conProviders.add(cpr);
        cpr.clients.add(r);
      }
 else {
        cpr.externals++;
      }
    }
  }
synchronized (cpr) {
    while (cpr.provider == null) {
      if (cpr.launchingApp == null) {
        Log.w(TAG,""String_Node_Str"" + cpi.applicationInfo.packageName + ""String_Node_Str""+ cpi.applicationInfo.uid+ ""String_Node_Str""+ name+ ""String_Node_Str"");
        EventLog.writeEvent(LOG_AM_PROVIDER_LOST_PROCESS,cpi.applicationInfo.packageName,cpi.applicationInfo.uid,name);
        return null;
      }
      try {
        cpr.wait();
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  return cpr;
}","private final ContentProviderHolder getContentProviderImpl(IApplicationThread caller,String name){
  ContentProviderRecord cpr;
  ProviderInfo cpi=null;
synchronized (this) {
    ProcessRecord r=null;
    if (caller != null) {
      r=getRecordForAppLocked(caller);
      if (r == null) {
        throw new SecurityException(""String_Node_Str"" + caller + ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ name);
      }
    }
    cpr=(ContentProviderRecord)mProvidersByName.get(name);
    if (cpr != null) {
      cpi=cpr.info;
      if (checkContentProviderPermissionLocked(cpi,r,-1) != null) {
        return new ContentProviderHolder(cpi,cpi.readPermission != null ? cpi.readPermission : cpi.writePermission);
      }
      if (r != null && cpr.canRunHere(r)) {
        if (cpr.provider != null) {
          cpr=new ContentProviderRecord(cpr);
        }
        return cpr;
      }
      final long origId=Binder.clearCallingIdentity();
      if (r != null) {
        r.conProviders.add(cpr);
        cpr.clients.add(r);
      }
 else {
        cpr.externals++;
      }
      if (cpr.app != null) {
        updateOomAdjLocked(cpr.app);
      }
      Binder.restoreCallingIdentity(origId);
    }
 else {
      try {
        cpi=ActivityThread.getPackageManager().resolveContentProvider(name,STOCK_PM_FLAGS | PackageManager.GET_URI_PERMISSION_PATTERNS);
      }
 catch (      RemoteException ex) {
      }
      if (cpi == null) {
        return null;
      }
      if (checkContentProviderPermissionLocked(cpi,r,-1) != null) {
        return new ContentProviderHolder(cpi,cpi.readPermission != null ? cpi.readPermission : cpi.writePermission);
      }
      cpr=(ContentProviderRecord)mProvidersByClass.get(cpi.name);
      final boolean firstClass=cpr == null;
      if (firstClass) {
        try {
          ApplicationInfo ai=ActivityThread.getPackageManager().getApplicationInfo(cpi.applicationInfo.packageName,STOCK_PM_FLAGS);
          if (ai == null) {
            Log.w(TAG,""String_Node_Str"" + cpi.name);
            return null;
          }
          cpr=new ContentProviderRecord(cpi,ai);
        }
 catch (        RemoteException ex) {
        }
      }
      if (r != null && cpr.canRunHere(r)) {
        return cpr;
      }
      if (false) {
        RuntimeException e=new RuntimeException(""String_Node_Str"");
      }
      final int N=mLaunchingProviders.size();
      int i;
      for (i=0; i < N; i++) {
        if (mLaunchingProviders.get(i) == cpr) {
          break;
        }
        if (false) {
          final ContentProviderRecord rec=(ContentProviderRecord)mLaunchingProviders.get(i);
          if (rec.info.name.equals(cpr.info.name)) {
            cpr=rec;
            break;
          }
        }
      }
      if (i >= N) {
        final long origId=Binder.clearCallingIdentity();
        ProcessRecord proc=startProcessLocked(cpi.processName,cpr.appInfo,false,0,""String_Node_Str"",new ComponentName(cpi.applicationInfo.packageName,cpi.name));
        if (proc == null) {
          Log.w(TAG,""String_Node_Str"" + cpi.applicationInfo.packageName + ""String_Node_Str""+ cpi.applicationInfo.uid+ ""String_Node_Str""+ name+ ""String_Node_Str"");
          return null;
        }
        cpr.launchingApp=proc;
        mLaunchingProviders.add(cpr);
        Binder.restoreCallingIdentity(origId);
      }
      if (firstClass) {
        mProvidersByClass.put(cpi.name,cpr);
      }
      mProvidersByName.put(name,cpr);
      if (r != null) {
        r.conProviders.add(cpr);
        cpr.clients.add(r);
      }
 else {
        cpr.externals++;
      }
    }
  }
synchronized (cpr) {
    while (cpr.provider == null) {
      if (cpr.launchingApp == null) {
        Log.w(TAG,""String_Node_Str"" + cpi.applicationInfo.packageName + ""String_Node_Str""+ cpi.applicationInfo.uid+ ""String_Node_Str""+ name+ ""String_Node_Str"");
        EventLog.writeEvent(LOG_AM_PROVIDER_LOST_PROCESS,cpi.applicationInfo.packageName,cpi.applicationInfo.uid,name);
        return null;
      }
      try {
        cpr.wait();
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  return cpr;
}"
24257,"void dump(PrintWriter pw,String prefix){
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(pkgList);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(thread);
  pw.print(""String_Node_Str"");
  pw.println(curReceiver);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.print(starting);
  pw.print(""String_Node_Str"");
  pw.println(lastPss);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(hiddenAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(isForeground);
  pw.print(""String_Node_Str"");
  pw.print(setIsForeground);
  pw.print(""String_Node_Str"");
  pw.print(foregroundServices);
  pw.print(""String_Node_Str"");
  pw.println(forcingToForeground);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(persistent);
  pw.print(""String_Node_Str"");
  pw.print(removed);
  pw.print(""String_Node_Str"");
  pw.println(persistentActivities);
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.println(bad);
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(activities);
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(services);
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(executingServices);
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(connections);
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(pubProviders);
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(conProviders);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(receivers);
  }
}","void dump(PrintWriter pw,String prefix){
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(pkgList);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(thread);
  pw.print(""String_Node_Str"");
  pw.println(curReceiver);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.print(starting);
  pw.print(""String_Node_Str"");
  pw.println(lastPss);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(hiddenAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(isForeground);
  pw.print(""String_Node_Str"");
  pw.print(setIsForeground);
  pw.print(""String_Node_Str"");
  pw.print(foregroundServices);
  pw.print(""String_Node_Str"");
  pw.println(forcingToForeground);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(persistent);
  pw.print(""String_Node_Str"");
  pw.print(removed);
  pw.print(""String_Node_Str"");
  pw.println(persistentActivities);
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.println(bad);
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(activities);
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(services);
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(executingServices);
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(connections);
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(pubProviders);
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(conProviders);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(receivers);
  }
}"
24258,"private final List generateApplicationProvidersLocked(ProcessRecord app){
  List providers=null;
  try {
    providers=ActivityThread.getPackageManager().queryContentProviders(app.processName,app.info.uid,PackageManager.GET_SHARED_LIBRARY_FILES | PackageManager.GET_URI_PERMISSION_PATTERNS);
  }
 catch (  RemoteException ex) {
  }
  if (providers != null) {
    final int N=providers.size();
    for (int i=0; i < N; i++) {
      ProviderInfo cpi=(ProviderInfo)providers.get(i);
      ContentProviderRecord cpr=(ContentProviderRecord)mProvidersByClass.get(cpi.name);
      if (cpr == null) {
        cpr=new ContentProviderRecord(cpi,app.info);
        mProvidersByClass.put(cpi.name,cpr);
      }
      app.pubProviders.put(cpi.name,cpr);
      app.addPackage(cpi.applicationInfo.packageName);
    }
  }
  return providers;
}","private final List generateApplicationProvidersLocked(ProcessRecord app){
  List providers=null;
  try {
    providers=ActivityThread.getPackageManager().queryContentProviders(app.processName,app.info.uid,STOCK_PM_FLAGS | PackageManager.GET_URI_PERMISSION_PATTERNS);
  }
 catch (  RemoteException ex) {
  }
  if (providers != null) {
    final int N=providers.size();
    for (int i=0; i < N; i++) {
      ProviderInfo cpi=(ProviderInfo)providers.get(i);
      ContentProviderRecord cpr=(ContentProviderRecord)mProvidersByClass.get(cpi.name);
      if (cpr == null) {
        cpr=new ContentProviderRecord(cpi,app.info);
        mProvidersByClass.put(cpi.name,cpr);
      }
      app.pubProviders.put(cpi.name,cpr);
      app.addPackage(cpi.applicationInfo.packageName);
    }
  }
  return providers;
}"
24259,"private final boolean attachApplicationLocked(IApplicationThread thread,int pid){
  ProcessRecord app;
  if (pid != MY_PID && pid >= 0) {
synchronized (mPidsSelfLocked) {
      app=mPidsSelfLocked.get(pid);
    }
  }
 else   if (mStartingProcesses.size() > 0) {
    app=mStartingProcesses.remove(0);
    app.setPid(pid);
  }
 else {
    app=null;
  }
  if (app == null) {
    Log.w(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ thread+ ""String_Node_Str"");
    EventLog.writeEvent(LOG_AM_DROP_PROCESS,pid);
    if (pid > 0 && pid != MY_PID) {
      Process.killProcess(pid);
    }
 else {
      try {
        thread.scheduleExit();
      }
 catch (      Exception e) {
      }
    }
    return false;
  }
  if (app.thread != null) {
    handleAppDiedLocked(app,true);
  }
  if (localLOGV)   Log.v(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ app);
  String processName=app.processName;
  try {
    thread.asBinder().linkToDeath(new AppDeathRecipient(app,pid,thread),0);
  }
 catch (  RemoteException e) {
    app.resetPackageList();
    startProcessLocked(app,""String_Node_Str"",processName);
    return false;
  }
  EventLog.writeEvent(LOG_AM_PROCESS_BOUND,app.pid,app.processName);
  app.thread=thread;
  app.curAdj=app.setAdj=-100;
  app.forcingToForeground=null;
  app.foregroundServices=false;
  app.debugging=false;
  mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
  List providers=generateApplicationProvidersLocked(app);
  if (localLOGV)   Log.v(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ thread.asBinder()+ ""String_Node_Str""+ pid);
  try {
    int testMode=IApplicationThread.DEBUG_OFF;
    if (mDebugApp != null && mDebugApp.equals(processName)) {
      testMode=mWaitForDebugger ? IApplicationThread.DEBUG_WAIT : IApplicationThread.DEBUG_ON;
      app.debugging=true;
      if (mDebugTransient) {
        mDebugApp=mOrigDebugApp;
        mWaitForDebugger=mOrigWaitForDebugger;
      }
    }
    thread.bindApplication(processName,app.info,providers,app.instrumentationClass,app.instrumentationProfileFile,app.instrumentationArguments,app.instrumentationWatcher,testMode,mConfiguration,getCommonServicesLocked());
    updateLRUListLocked(app,false);
    app.lastRequestedGc=SystemClock.uptimeMillis();
  }
 catch (  Exception e) {
    Log.w(TAG,""String_Node_Str"",e);
    app.resetPackageList();
    startProcessLocked(app,""String_Node_Str"",processName);
    return false;
  }
  mPersistentStartingProcesses.remove(app);
  mProcessesOnHold.remove(app);
  boolean badApp=false;
  boolean didSomething=false;
  HistoryRecord hr=topRunningActivityLocked(null);
  if (hr != null) {
    if (hr.app == null && app.info.uid == hr.info.applicationInfo.uid && processName.equals(hr.processName)) {
      try {
        if (realStartActivityLocked(hr,app,true,true)) {
          didSomething=true;
        }
      }
 catch (      Exception e) {
        Log.w(TAG,""String_Node_Str"" + hr.intent.getComponent().flattenToShortString(),e);
        badApp=true;
      }
    }
 else {
      ensureActivitiesVisibleLocked(hr,null,processName,0);
    }
  }
  if (!badApp && mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (app.info.uid != sr.appInfo.uid || !processName.equals(sr.processName)) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        realStartServiceLocked(sr,app);
        didSomething=true;
      }
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"" + sr.shortName,e);
      badApp=true;
    }
  }
  BroadcastRecord br=mPendingBroadcast;
  if (!badApp && br != null && br.curApp == app) {
    try {
      mPendingBroadcast=null;
      processCurBroadcastLocked(br,app);
      didSomething=true;
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"" + br.curComponent.flattenToShortString(),e);
      badApp=true;
      logBroadcastReceiverDiscard(br);
      finishReceiverLocked(br.receiver,br.resultCode,br.resultData,br.resultExtras,br.resultAbort,true);
      scheduleBroadcastsLocked();
    }
  }
  if (badApp) {
    handleAppDiedLocked(app,false);
    return false;
  }
  if (!didSomething) {
    updateOomAdjLocked();
  }
  return true;
}","private final boolean attachApplicationLocked(IApplicationThread thread,int pid){
  ProcessRecord app;
  if (pid != MY_PID && pid >= 0) {
synchronized (mPidsSelfLocked) {
      app=mPidsSelfLocked.get(pid);
    }
  }
 else   if (mStartingProcesses.size() > 0) {
    app=mStartingProcesses.remove(0);
    app.setPid(pid);
  }
 else {
    app=null;
  }
  if (app == null) {
    Log.w(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ thread+ ""String_Node_Str"");
    EventLog.writeEvent(LOG_AM_DROP_PROCESS,pid);
    if (pid > 0 && pid != MY_PID) {
      Process.killProcess(pid);
    }
 else {
      try {
        thread.scheduleExit();
      }
 catch (      Exception e) {
      }
    }
    return false;
  }
  if (app.thread != null) {
    handleAppDiedLocked(app,true);
  }
  if (localLOGV)   Log.v(TAG,""String_Node_Str"" + pid + ""String_Node_Str""+ app);
  String processName=app.processName;
  try {
    thread.asBinder().linkToDeath(new AppDeathRecipient(app,pid,thread),0);
  }
 catch (  RemoteException e) {
    app.resetPackageList();
    startProcessLocked(app,""String_Node_Str"",processName);
    return false;
  }
  EventLog.writeEvent(LOG_AM_PROCESS_BOUND,app.pid,app.processName);
  app.thread=thread;
  app.curAdj=app.setAdj=-100;
  app.forcingToForeground=null;
  app.foregroundServices=false;
  app.debugging=false;
  mHandler.removeMessages(PROC_START_TIMEOUT_MSG,app);
  List providers=generateApplicationProvidersLocked(app);
  if (localLOGV)   Log.v(TAG,""String_Node_Str"" + app + ""String_Node_Str""+ thread.asBinder()+ ""String_Node_Str""+ pid);
  try {
    int testMode=IApplicationThread.DEBUG_OFF;
    if (mDebugApp != null && mDebugApp.equals(processName)) {
      testMode=mWaitForDebugger ? IApplicationThread.DEBUG_WAIT : IApplicationThread.DEBUG_ON;
      app.debugging=true;
      if (mDebugTransient) {
        mDebugApp=mOrigDebugApp;
        mWaitForDebugger=mOrigWaitForDebugger;
      }
    }
    thread.bindApplication(processName,app.instrumentationInfo != null ? app.instrumentationInfo : app.info,providers,app.instrumentationClass,app.instrumentationProfileFile,app.instrumentationArguments,app.instrumentationWatcher,testMode,mConfiguration,getCommonServicesLocked());
    updateLRUListLocked(app,false);
    app.lastRequestedGc=SystemClock.uptimeMillis();
  }
 catch (  Exception e) {
    Log.w(TAG,""String_Node_Str"",e);
    app.resetPackageList();
    startProcessLocked(app,""String_Node_Str"",processName);
    return false;
  }
  mPersistentStartingProcesses.remove(app);
  mProcessesOnHold.remove(app);
  boolean badApp=false;
  boolean didSomething=false;
  HistoryRecord hr=topRunningActivityLocked(null);
  if (hr != null) {
    if (hr.app == null && app.info.uid == hr.info.applicationInfo.uid && processName.equals(hr.processName)) {
      try {
        if (realStartActivityLocked(hr,app,true,true)) {
          didSomething=true;
        }
      }
 catch (      Exception e) {
        Log.w(TAG,""String_Node_Str"" + hr.intent.getComponent().flattenToShortString(),e);
        badApp=true;
      }
    }
 else {
      ensureActivitiesVisibleLocked(hr,null,processName,0);
    }
  }
  if (!badApp && mPendingServices.size() > 0) {
    ServiceRecord sr=null;
    try {
      for (int i=0; i < mPendingServices.size(); i++) {
        sr=mPendingServices.get(i);
        if (app.info.uid != sr.appInfo.uid || !processName.equals(sr.processName)) {
          continue;
        }
        mPendingServices.remove(i);
        i--;
        realStartServiceLocked(sr,app);
        didSomething=true;
      }
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"" + sr.shortName,e);
      badApp=true;
    }
  }
  BroadcastRecord br=mPendingBroadcast;
  if (!badApp && br != null && br.curApp == app) {
    try {
      mPendingBroadcast=null;
      processCurBroadcastLocked(br,app);
      didSomething=true;
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"" + br.curComponent.flattenToShortString(),e);
      badApp=true;
      logBroadcastReceiverDiscard(br);
      finishReceiverLocked(br.receiver,br.resultCode,br.resultData,br.resultExtras,br.resultAbort,true);
      scheduleBroadcastsLocked();
    }
  }
  if (badApp) {
    handleAppDiedLocked(app,false);
    return false;
  }
  if (!didSomething) {
    updateOomAdjLocked();
  }
  return true;
}"
24260,"public boolean startInstrumentation(ComponentName className,String profileFile,int flags,Bundle arguments,IInstrumentationWatcher watcher){
  if (arguments != null && arguments.hasFileDescriptors()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
synchronized (this) {
    InstrumentationInfo ii=null;
    ApplicationInfo ai=null;
    try {
      ii=mContext.getPackageManager().getInstrumentationInfo(className,0);
      ai=mContext.getPackageManager().getApplicationInfo(ii.targetPackage,PackageManager.GET_SHARED_LIBRARY_FILES);
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
    if (ii == null) {
      reportStartInstrumentationFailure(watcher,className,""String_Node_Str"" + className);
      return false;
    }
    if (ai == null) {
      reportStartInstrumentationFailure(watcher,className,""String_Node_Str"" + ii.targetPackage);
      return false;
    }
    int match=mContext.getPackageManager().checkSignatures(ii.targetPackage,ii.packageName);
    if (match < 0 && match != PackageManager.SIGNATURE_FIRST_NOT_SIGNED) {
      String msg=""String_Node_Str"" + className + ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ ii.packageName+ ""String_Node_Str""+ ii.targetPackage;
      reportStartInstrumentationFailure(watcher,className,msg);
      throw new SecurityException(msg);
    }
    final long origId=Binder.clearCallingIdentity();
    uninstallPackageLocked(ii.targetPackage,-1,true);
    ProcessRecord app=addAppLocked(ai);
    app.instrumentationClass=className;
    app.instrumentationProfileFile=profileFile;
    app.instrumentationArguments=arguments;
    app.instrumentationWatcher=watcher;
    app.instrumentationResultClass=className;
    Binder.restoreCallingIdentity(origId);
  }
  return true;
}","public boolean startInstrumentation(ComponentName className,String profileFile,int flags,Bundle arguments,IInstrumentationWatcher watcher){
  if (arguments != null && arguments.hasFileDescriptors()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
synchronized (this) {
    InstrumentationInfo ii=null;
    ApplicationInfo ai=null;
    try {
      ii=mContext.getPackageManager().getInstrumentationInfo(className,STOCK_PM_FLAGS);
      ai=mContext.getPackageManager().getApplicationInfo(ii.targetPackage,STOCK_PM_FLAGS);
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
    if (ii == null) {
      reportStartInstrumentationFailure(watcher,className,""String_Node_Str"" + className);
      return false;
    }
    if (ai == null) {
      reportStartInstrumentationFailure(watcher,className,""String_Node_Str"" + ii.targetPackage);
      return false;
    }
    int match=mContext.getPackageManager().checkSignatures(ii.targetPackage,ii.packageName);
    if (match < 0 && match != PackageManager.SIGNATURE_FIRST_NOT_SIGNED) {
      String msg=""String_Node_Str"" + className + ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ ii.packageName+ ""String_Node_Str""+ ii.targetPackage;
      reportStartInstrumentationFailure(watcher,className,msg);
      throw new SecurityException(msg);
    }
    final long origId=Binder.clearCallingIdentity();
    uninstallPackageLocked(ii.targetPackage,-1,true);
    ProcessRecord app=addAppLocked(ai);
    app.instrumentationClass=className;
    app.instrumentationInfo=ai;
    app.instrumentationProfileFile=profileFile;
    app.instrumentationArguments=arguments;
    app.instrumentationWatcher=watcher;
    app.instrumentationResultClass=className;
    Binder.restoreCallingIdentity(origId);
  }
  return true;
}"
24261,"private ServiceLookupResult retrieveServiceLocked(Intent service,String resolvedType,int callingPid,int callingUid){
  ServiceRecord r=null;
  if (service.getComponent() != null) {
    r=mServices.get(service.getComponent());
  }
  Intent.FilterComparison filter=new Intent.FilterComparison(service);
  r=mServicesByIntent.get(filter);
  if (r == null) {
    try {
      ResolveInfo rInfo=ActivityThread.getPackageManager().resolveService(service,resolvedType,PackageManager.GET_SHARED_LIBRARY_FILES);
      ServiceInfo sInfo=rInfo != null ? rInfo.serviceInfo : null;
      if (sInfo == null) {
        Log.w(TAG,""String_Node_Str"" + service + ""String_Node_Str"");
        return null;
      }
      ComponentName name=new ComponentName(sInfo.applicationInfo.packageName,sInfo.name);
      r=mServices.get(name);
      if (r == null) {
        filter=new Intent.FilterComparison(service.cloneFilter());
        ServiceRestarter res=new ServiceRestarter();
        BatteryStatsImpl.Uid.Pkg.Serv ss=null;
        BatteryStatsImpl stats=mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
          ss=stats.getServiceStatsLocked(sInfo.applicationInfo.uid,sInfo.packageName,sInfo.name);
        }
        r=new ServiceRecord(ss,name,filter,sInfo,res);
        res.setService(r);
        mServices.put(name,r);
        mServicesByIntent.put(filter,r);
        int N=mPendingServices.size();
        for (int i=0; i < N; i++) {
          ServiceRecord pr=mPendingServices.get(i);
          if (pr.name.equals(name)) {
            mPendingServices.remove(i);
            i--;
            N--;
          }
        }
      }
    }
 catch (    RemoteException ex) {
    }
  }
  if (r != null) {
    if (checkComponentPermission(r.permission,callingPid,callingUid,r.exported ? -1 : r.appInfo.uid) != PackageManager.PERMISSION_GRANTED) {
      Log.w(TAG,""String_Node_Str"" + r.name + ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ r.permission);
      return new ServiceLookupResult(null,r.permission);
    }
    return new ServiceLookupResult(r,null);
  }
  return null;
}","private ServiceLookupResult retrieveServiceLocked(Intent service,String resolvedType,int callingPid,int callingUid){
  ServiceRecord r=null;
  if (service.getComponent() != null) {
    r=mServices.get(service.getComponent());
  }
  Intent.FilterComparison filter=new Intent.FilterComparison(service);
  r=mServicesByIntent.get(filter);
  if (r == null) {
    try {
      ResolveInfo rInfo=ActivityThread.getPackageManager().resolveService(service,resolvedType,STOCK_PM_FLAGS);
      ServiceInfo sInfo=rInfo != null ? rInfo.serviceInfo : null;
      if (sInfo == null) {
        Log.w(TAG,""String_Node_Str"" + service + ""String_Node_Str"");
        return null;
      }
      ComponentName name=new ComponentName(sInfo.applicationInfo.packageName,sInfo.name);
      r=mServices.get(name);
      if (r == null) {
        filter=new Intent.FilterComparison(service.cloneFilter());
        ServiceRestarter res=new ServiceRestarter();
        BatteryStatsImpl.Uid.Pkg.Serv ss=null;
        BatteryStatsImpl stats=mBatteryStatsService.getActiveStatistics();
synchronized (stats) {
          ss=stats.getServiceStatsLocked(sInfo.applicationInfo.uid,sInfo.packageName,sInfo.name);
        }
        r=new ServiceRecord(ss,name,filter,sInfo,res);
        res.setService(r);
        mServices.put(name,r);
        mServicesByIntent.put(filter,r);
        int N=mPendingServices.size();
        for (int i=0; i < N; i++) {
          ServiceRecord pr=mPendingServices.get(i);
          if (pr.name.equals(name)) {
            mPendingServices.remove(i);
            i--;
            N--;
          }
        }
      }
    }
 catch (    RemoteException ex) {
    }
  }
  if (r != null) {
    if (checkComponentPermission(r.permission,callingPid,callingUid,r.exported ? -1 : r.appInfo.uid) != PackageManager.PERMISSION_GRANTED) {
      Log.w(TAG,""String_Node_Str"" + r.name + ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ Binder.getCallingUid()+ ""String_Node_Str""+ r.permission);
      return new ServiceLookupResult(null,r.permission);
    }
    return new ServiceLookupResult(r,null);
  }
  return null;
}"
24262,"void finishInstrumentationLocked(ProcessRecord app,int resultCode,Bundle results){
  if (app.instrumentationWatcher != null) {
    try {
      app.instrumentationWatcher.instrumentationFinished(app.instrumentationClass,resultCode,results);
    }
 catch (    RemoteException e) {
    }
  }
  app.instrumentationWatcher=null;
  app.instrumentationClass=null;
  app.instrumentationProfileFile=null;
  app.instrumentationArguments=null;
  uninstallPackageLocked(app.processName,-1,false);
}","void finishInstrumentationLocked(ProcessRecord app,int resultCode,Bundle results){
  if (app.instrumentationWatcher != null) {
    try {
      app.instrumentationWatcher.instrumentationFinished(app.instrumentationClass,resultCode,results);
    }
 catch (    RemoteException e) {
    }
  }
  app.instrumentationWatcher=null;
  app.instrumentationClass=null;
  app.instrumentationInfo=null;
  app.instrumentationProfileFile=null;
  app.instrumentationArguments=null;
  uninstallPackageLocked(app.processName,-1,false);
}"
24263,"final int startActivityInPackage(int uid,Intent intent,String resolvedType,IBinder resultTo,String resultWho,int requestCode,boolean onlyIfNeeded){
  final boolean componentSpecified=intent.getComponent() != null;
  intent=new Intent(intent);
  ActivityInfo aInfo;
  try {
    ResolveInfo rInfo=ActivityThread.getPackageManager().resolveIntent(intent,resolvedType,PackageManager.MATCH_DEFAULT_ONLY | PackageManager.GET_SHARED_LIBRARY_FILES);
    aInfo=rInfo != null ? rInfo.activityInfo : null;
  }
 catch (  RemoteException e) {
    aInfo=null;
  }
  if (aInfo != null) {
    intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
  }
synchronized (this) {
    return startActivityLocked(null,intent,resolvedType,null,0,aInfo,resultTo,resultWho,requestCode,-1,uid,onlyIfNeeded,componentSpecified);
  }
}","final int startActivityInPackage(int uid,Intent intent,String resolvedType,IBinder resultTo,String resultWho,int requestCode,boolean onlyIfNeeded){
  final boolean componentSpecified=intent.getComponent() != null;
  intent=new Intent(intent);
  ActivityInfo aInfo;
  try {
    ResolveInfo rInfo=ActivityThread.getPackageManager().resolveIntent(intent,resolvedType,PackageManager.MATCH_DEFAULT_ONLY | STOCK_PM_FLAGS);
    aInfo=rInfo != null ? rInfo.activityInfo : null;
  }
 catch (  RemoteException e) {
    aInfo=null;
  }
  if (aInfo != null) {
    intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
  }
synchronized (this) {
    return startActivityLocked(null,intent,resolvedType,null,0,aInfo,resultTo,resultWho,requestCode,-1,uid,onlyIfNeeded,componentSpecified);
  }
}"
24264,"public static void setSystemProcess(){
  try {
    ActivityManagerService m=mSelf;
    ServiceManager.addService(""String_Node_Str"",m);
    ServiceManager.addService(""String_Node_Str"",new MemBinder(m));
    if (MONITOR_CPU_USAGE) {
      ServiceManager.addService(""String_Node_Str"",new CpuBinder(m));
    }
    ServiceManager.addService(""String_Node_Str"",new BroadcastsBinder(m));
    ServiceManager.addService(""String_Node_Str"",new ServicesBinder(m));
    ServiceManager.addService(""String_Node_Str"",new SendersBinder(m));
    ServiceManager.addService(""String_Node_Str"",new ProvidersBinder(m));
    ServiceManager.addService(""String_Node_Str"",new PermissionController(m));
    ApplicationInfo info=mSelf.mContext.getPackageManager().getApplicationInfo(""String_Node_Str"",PackageManager.GET_SHARED_LIBRARY_FILES);
synchronized (mSelf) {
      ProcessRecord app=mSelf.newProcessRecordLocked(mSystemThread.getApplicationThread(),info,info.processName);
      app.persistent=true;
      app.pid=Process.myPid();
      app.maxAdj=SYSTEM_ADJ;
      mSelf.mProcessNames.put(app.processName,app.info.uid,app);
synchronized (mSelf.mPidsSelfLocked) {
        mSelf.mPidsSelfLocked.put(app.pid,app);
      }
      mSelf.updateLRUListLocked(app,true);
    }
  }
 catch (  PackageManager.NameNotFoundException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","public static void setSystemProcess(){
  try {
    ActivityManagerService m=mSelf;
    ServiceManager.addService(""String_Node_Str"",m);
    ServiceManager.addService(""String_Node_Str"",new MemBinder(m));
    if (MONITOR_CPU_USAGE) {
      ServiceManager.addService(""String_Node_Str"",new CpuBinder(m));
    }
    ServiceManager.addService(""String_Node_Str"",new BroadcastsBinder(m));
    ServiceManager.addService(""String_Node_Str"",new ServicesBinder(m));
    ServiceManager.addService(""String_Node_Str"",new SendersBinder(m));
    ServiceManager.addService(""String_Node_Str"",new ProvidersBinder(m));
    ServiceManager.addService(""String_Node_Str"",new PermissionController(m));
    ApplicationInfo info=mSelf.mContext.getPackageManager().getApplicationInfo(""String_Node_Str"",STOCK_PM_FLAGS);
synchronized (mSelf) {
      ProcessRecord app=mSelf.newProcessRecordLocked(mSystemThread.getApplicationThread(),info,info.processName);
      app.persistent=true;
      app.pid=Process.myPid();
      app.maxAdj=SYSTEM_ADJ;
      mSelf.mProcessNames.put(app.processName,app.info.uid,app);
synchronized (mSelf.mPidsSelfLocked) {
        mSelf.mPidsSelfLocked.put(app.pid,app);
      }
      mSelf.updateLRUListLocked(app,true);
    }
  }
 catch (  PackageManager.NameNotFoundException e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}"
24265,"public final int startActivity(IApplicationThread caller,Intent intent,String resolvedType,Uri[] grantedUriPermissions,int grantedMode,IBinder resultTo,String resultWho,int requestCode,boolean onlyIfNeeded,boolean debug){
  if (intent != null && intent.hasFileDescriptors()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final boolean componentSpecified=intent.getComponent() != null;
  intent=new Intent(intent);
  ActivityInfo aInfo;
  try {
    ResolveInfo rInfo=ActivityThread.getPackageManager().resolveIntent(intent,resolvedType,PackageManager.MATCH_DEFAULT_ONLY | PackageManager.GET_SHARED_LIBRARY_FILES);
    aInfo=rInfo != null ? rInfo.activityInfo : null;
  }
 catch (  RemoteException e) {
    aInfo=null;
  }
  if (aInfo != null) {
    intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
    if (debug) {
      if (!aInfo.processName.equals(""String_Node_Str"")) {
        setDebugApp(aInfo.processName,true,false);
      }
    }
  }
synchronized (this) {
    final long origId=Binder.clearCallingIdentity();
    int res=startActivityLocked(caller,intent,resolvedType,grantedUriPermissions,grantedMode,aInfo,resultTo,resultWho,requestCode,-1,-1,onlyIfNeeded,componentSpecified);
    Binder.restoreCallingIdentity(origId);
    return res;
  }
}","public final int startActivity(IApplicationThread caller,Intent intent,String resolvedType,Uri[] grantedUriPermissions,int grantedMode,IBinder resultTo,String resultWho,int requestCode,boolean onlyIfNeeded,boolean debug){
  if (intent != null && intent.hasFileDescriptors()) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
  final boolean componentSpecified=intent.getComponent() != null;
  intent=new Intent(intent);
  ActivityInfo aInfo;
  try {
    ResolveInfo rInfo=ActivityThread.getPackageManager().resolveIntent(intent,resolvedType,PackageManager.MATCH_DEFAULT_ONLY | STOCK_PM_FLAGS);
    aInfo=rInfo != null ? rInfo.activityInfo : null;
  }
 catch (  RemoteException e) {
    aInfo=null;
  }
  if (aInfo != null) {
    intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
    if (debug) {
      if (!aInfo.processName.equals(""String_Node_Str"")) {
        setDebugApp(aInfo.processName,true,false);
      }
    }
  }
synchronized (this) {
    final long origId=Binder.clearCallingIdentity();
    int res=startActivityLocked(caller,intent,resolvedType,grantedUriPermissions,grantedMode,aInfo,resultTo,resultWho,requestCode,-1,-1,onlyIfNeeded,componentSpecified);
    Binder.restoreCallingIdentity(origId);
    return res;
  }
}"
24266,"public void systemReady(){
  if (!Process.supportsProcesses()) {
    mStartRunning=true;
    mTopAction=Intent.ACTION_MAIN;
  }
synchronized (this) {
    if (mSystemReady) {
      return;
    }
    mSystemReady=true;
    if (!mStartRunning) {
      return;
    }
  }
  if (Config.LOGD)   Log.d(TAG,""String_Node_Str"");
  EventLog.writeEvent(LOG_BOOT_PROGRESS_AMS_READY,SystemClock.uptimeMillis());
synchronized (this) {
    if (mFactoryTest == SystemServer.FACTORY_TEST_LOW_LEVEL) {
      ResolveInfo ri=mContext.getPackageManager().resolveActivity(new Intent(Intent.ACTION_FACTORY_TEST),0);
      CharSequence errorMsg=null;
      if (ri != null) {
        ActivityInfo ai=ri.activityInfo;
        ApplicationInfo app=ai.applicationInfo;
        if ((app.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
          mTopAction=Intent.ACTION_FACTORY_TEST;
          mTopData=null;
          mTopComponent=new ComponentName(app.packageName,ai.name);
        }
 else {
          errorMsg=mContext.getResources().getText(com.android.internal.R.string.factorytest_not_system);
        }
      }
 else {
        errorMsg=mContext.getResources().getText(com.android.internal.R.string.factorytest_no_action);
      }
      if (errorMsg != null) {
        mTopAction=null;
        mTopData=null;
        mTopComponent=null;
        Message msg=Message.obtain();
        msg.what=SHOW_FACTORY_ERROR_MSG;
        msg.getData().putCharSequence(""String_Node_Str"",errorMsg);
        mHandler.sendMessage(msg);
      }
    }
  }
  retrieveSettings();
synchronized (this) {
    if (mFactoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL) {
      try {
        List apps=ActivityThread.getPackageManager().getPersistentApplications(PackageManager.GET_SHARED_LIBRARY_FILES);
        if (apps != null) {
          int N=apps.size();
          int i;
          for (i=0; i < N; i++) {
            ApplicationInfo info=(ApplicationInfo)apps.get(i);
            if (info != null && !info.packageName.equals(""String_Node_Str"")) {
              addAppLocked(info);
            }
          }
        }
      }
 catch (      RemoteException ex) {
      }
    }
    try {
      if (ActivityThread.getPackageManager().hasSystemUidErrors()) {
        Message msg=Message.obtain();
        msg.what=SHOW_UID_ERROR_MSG;
        mHandler.sendMessage(msg);
      }
    }
 catch (    RemoteException e) {
    }
    mBooting=true;
    resumeTopActivityLocked(null);
  }
}","public void systemReady(){
  if (!Process.supportsProcesses()) {
    mStartRunning=true;
    mTopAction=Intent.ACTION_MAIN;
  }
synchronized (this) {
    if (mSystemReady) {
      return;
    }
    mSystemReady=true;
    if (!mStartRunning) {
      return;
    }
  }
  if (Config.LOGD)   Log.d(TAG,""String_Node_Str"");
  EventLog.writeEvent(LOG_BOOT_PROGRESS_AMS_READY,SystemClock.uptimeMillis());
synchronized (this) {
    if (mFactoryTest == SystemServer.FACTORY_TEST_LOW_LEVEL) {
      ResolveInfo ri=mContext.getPackageManager().resolveActivity(new Intent(Intent.ACTION_FACTORY_TEST),STOCK_PM_FLAGS);
      CharSequence errorMsg=null;
      if (ri != null) {
        ActivityInfo ai=ri.activityInfo;
        ApplicationInfo app=ai.applicationInfo;
        if ((app.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
          mTopAction=Intent.ACTION_FACTORY_TEST;
          mTopData=null;
          mTopComponent=new ComponentName(app.packageName,ai.name);
        }
 else {
          errorMsg=mContext.getResources().getText(com.android.internal.R.string.factorytest_not_system);
        }
      }
 else {
        errorMsg=mContext.getResources().getText(com.android.internal.R.string.factorytest_no_action);
      }
      if (errorMsg != null) {
        mTopAction=null;
        mTopData=null;
        mTopComponent=null;
        Message msg=Message.obtain();
        msg.what=SHOW_FACTORY_ERROR_MSG;
        msg.getData().putCharSequence(""String_Node_Str"",errorMsg);
        mHandler.sendMessage(msg);
      }
    }
  }
  retrieveSettings();
synchronized (this) {
    if (mFactoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL) {
      try {
        List apps=ActivityThread.getPackageManager().getPersistentApplications(STOCK_PM_FLAGS);
        if (apps != null) {
          int N=apps.size();
          int i;
          for (i=0; i < N; i++) {
            ApplicationInfo info=(ApplicationInfo)apps.get(i);
            if (info != null && !info.packageName.equals(""String_Node_Str"")) {
              addAppLocked(info);
            }
          }
        }
      }
 catch (      RemoteException ex) {
      }
    }
    try {
      if (ActivityThread.getPackageManager().hasSystemUidErrors()) {
        Message msg=Message.obtain();
        msg.what=SHOW_UID_ERROR_MSG;
        mHandler.sendMessage(msg);
      }
    }
 catch (    RemoteException e) {
    }
    mBooting=true;
    resumeTopActivityLocked(null);
  }
}"
24267,"public boolean startNextMatchingActivity(IBinder callingActivity,Intent intent){
  if (intent != null && intent.hasFileDescriptors() == true) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
synchronized (this) {
    int index=indexOfTokenLocked(callingActivity,false);
    if (index < 0) {
      return false;
    }
    HistoryRecord r=(HistoryRecord)mHistory.get(index);
    if (r.app == null || r.app.thread == null) {
      return false;
    }
    intent=new Intent(intent);
    intent.setDataAndType(r.intent.getData(),r.intent.getType());
    intent.setComponent(null);
    ActivityInfo aInfo=null;
    try {
      List<ResolveInfo> resolves=ActivityThread.getPackageManager().queryIntentActivities(intent,r.resolvedType,PackageManager.MATCH_DEFAULT_ONLY | PackageManager.GET_SHARED_LIBRARY_FILES);
      final int N=resolves != null ? resolves.size() : 0;
      for (int i=0; i < N; i++) {
        ResolveInfo rInfo=resolves.get(i);
        if (rInfo.activityInfo.packageName.equals(r.packageName) && rInfo.activityInfo.name.equals(r.info.name)) {
          i++;
          if (i < N) {
            aInfo=resolves.get(i).activityInfo;
          }
          break;
        }
      }
    }
 catch (    RemoteException e) {
    }
    if (aInfo == null) {
      return false;
    }
    intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
    intent.setFlags(intent.getFlags() & ~(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_MULTIPLE_TASK| Intent.FLAG_ACTIVITY_NEW_TASK));
    final boolean wasFinishing=r.finishing;
    r.finishing=true;
    final HistoryRecord resultTo=r.resultTo;
    final String resultWho=r.resultWho;
    final int requestCode=r.requestCode;
    r.resultTo=null;
    if (resultTo != null) {
      resultTo.removeResultsLocked(r,resultWho,requestCode);
    }
    final long origId=Binder.clearCallingIdentity();
    int res=startActivityLocked(r.app.thread,intent,r.resolvedType,null,0,aInfo,resultTo,resultWho,requestCode,-1,r.launchedFromUid,false,false);
    Binder.restoreCallingIdentity(origId);
    r.finishing=wasFinishing;
    if (res != START_SUCCESS) {
      return false;
    }
    return true;
  }
}","public boolean startNextMatchingActivity(IBinder callingActivity,Intent intent){
  if (intent != null && intent.hasFileDescriptors() == true) {
    throw new IllegalArgumentException(""String_Node_Str"");
  }
synchronized (this) {
    int index=indexOfTokenLocked(callingActivity,false);
    if (index < 0) {
      return false;
    }
    HistoryRecord r=(HistoryRecord)mHistory.get(index);
    if (r.app == null || r.app.thread == null) {
      return false;
    }
    intent=new Intent(intent);
    intent.setDataAndType(r.intent.getData(),r.intent.getType());
    intent.setComponent(null);
    ActivityInfo aInfo=null;
    try {
      List<ResolveInfo> resolves=ActivityThread.getPackageManager().queryIntentActivities(intent,r.resolvedType,PackageManager.MATCH_DEFAULT_ONLY | STOCK_PM_FLAGS);
      final int N=resolves != null ? resolves.size() : 0;
      for (int i=0; i < N; i++) {
        ResolveInfo rInfo=resolves.get(i);
        if (rInfo.activityInfo.packageName.equals(r.packageName) && rInfo.activityInfo.name.equals(r.info.name)) {
          i++;
          if (i < N) {
            aInfo=resolves.get(i).activityInfo;
          }
          break;
        }
      }
    }
 catch (    RemoteException e) {
    }
    if (aInfo == null) {
      return false;
    }
    intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
    intent.setFlags(intent.getFlags() & ~(Intent.FLAG_ACTIVITY_FORWARD_RESULT | Intent.FLAG_ACTIVITY_CLEAR_TOP | Intent.FLAG_ACTIVITY_MULTIPLE_TASK| Intent.FLAG_ACTIVITY_NEW_TASK));
    final boolean wasFinishing=r.finishing;
    r.finishing=true;
    final HistoryRecord resultTo=r.resultTo;
    final String resultWho=r.resultWho;
    final int requestCode=r.requestCode;
    r.resultTo=null;
    if (resultTo != null) {
      resultTo.removeResultsLocked(r,resultWho,requestCode);
    }
    final long origId=Binder.clearCallingIdentity();
    int res=startActivityLocked(r.app.thread,intent,r.resolvedType,null,0,aInfo,resultTo,resultWho,requestCode,-1,r.launchedFromUid,false,false);
    Binder.restoreCallingIdentity(origId);
    r.finishing=wasFinishing;
    if (res != START_SUCCESS) {
      return false;
    }
    return true;
  }
}"
24268,"/** 
 * Ensure that the top activity in the stack is resumed.
 * @param prev The previously resumed activity, for when in the processof pausing; can be null to call from elsewhere.
 * @return Returns true if something is being resumed, or false ifnothing happened.
 */
private final boolean resumeTopActivityLocked(HistoryRecord prev){
  HistoryRecord next=topRunningActivityLocked(null);
  final boolean userLeaving=mUserLeaving;
  mUserLeaving=false;
  if (next == null) {
    if (mFactoryTest == SystemServer.FACTORY_TEST_LOW_LEVEL && mTopAction == null) {
      return false;
    }
    Intent intent=new Intent(mTopAction,mTopData != null ? Uri.parse(mTopData) : null);
    intent.setComponent(mTopComponent);
    if (mFactoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL) {
      intent.addCategory(Intent.CATEGORY_HOME);
    }
    ActivityInfo aInfo=intent.resolveActivityInfo(mContext.getPackageManager(),PackageManager.GET_SHARED_LIBRARY_FILES);
    if (aInfo != null) {
      intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
      ProcessRecord app=getProcessRecordLocked(aInfo.processName,aInfo.applicationInfo.uid);
      if (app == null || app.instrumentationClass == null) {
        intent.setFlags(intent.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivityLocked(null,intent,null,null,0,aInfo,null,null,0,0,0,false,false);
      }
    }
    return true;
  }
  if (mResumedActivity == next && next.state == ActivityState.RESUMED) {
    mWindowManager.executeAppTransition();
    return false;
  }
  if ((mSleeping || mShuttingDown) && mLastPausedActivity == next && next.state == ActivityState.PAUSED) {
    mWindowManager.executeAppTransition();
    return false;
  }
  mStoppingActivities.remove(next);
  mWaitingVisibleActivities.remove(next);
  if (DEBUG_SWITCH)   Log.v(TAG,""String_Node_Str"" + next);
  if (mPausingActivity != null) {
    if (DEBUG_SWITCH)     Log.v(TAG,""String_Node_Str"" + mPausingActivity);
    return false;
  }
  if (mResumedActivity != null) {
    if (DEBUG_SWITCH)     Log.v(TAG,""String_Node_Str"");
    startPausingLocked(userLeaving,false);
    return true;
  }
  if (prev != null && prev != next) {
    if (!prev.waitingVisible && next != null && !next.nowVisible) {
      prev.waitingVisible=true;
      mWaitingVisibleActivities.add(prev);
      if (DEBUG_SWITCH)       Log.v(TAG,""String_Node_Str"" + prev);
    }
 else {
      if (prev.finishing) {
        mWindowManager.setAppVisibility(prev,false);
        if (DEBUG_SWITCH)         Log.v(TAG,""String_Node_Str"" + prev + ""String_Node_Str""+ (prev != null ? prev.waitingVisible : null)+ ""String_Node_Str""+ next.nowVisible);
      }
 else {
        if (DEBUG_SWITCH)         Log.v(TAG,""String_Node_Str"" + prev + ""String_Node_Str""+ (prev != null ? prev.waitingVisible : null)+ ""String_Node_Str""+ next.nowVisible);
      }
    }
  }
  if (prev != null) {
    if (prev.finishing) {
      if (DEBUG_TRANSITION)       Log.v(TAG,""String_Node_Str"" + prev);
      mWindowManager.prepareAppTransition(prev.task == next.task ? WindowManagerPolicy.TRANSIT_ACTIVITY_CLOSE : WindowManagerPolicy.TRANSIT_TASK_CLOSE);
      mWindowManager.setAppWillBeHidden(prev);
      mWindowManager.setAppVisibility(prev,false);
    }
 else {
      if (DEBUG_TRANSITION)       Log.v(TAG,""String_Node_Str"" + prev);
      mWindowManager.prepareAppTransition(prev.task == next.task ? WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN : WindowManagerPolicy.TRANSIT_TASK_OPEN);
    }
    if (false) {
      mWindowManager.setAppWillBeHidden(prev);
      mWindowManager.setAppVisibility(prev,false);
    }
  }
 else   if (mHistory.size() > 1) {
    if (DEBUG_TRANSITION)     Log.v(TAG,""String_Node_Str"");
    mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN);
  }
  if (next.app != null && next.app.thread != null) {
    if (DEBUG_SWITCH)     Log.v(TAG,""String_Node_Str"" + next);
    mWindowManager.setAppVisibility(next,true);
    HistoryRecord lastResumedActivity=mResumedActivity;
    ActivityState lastState=next.state;
    updateCpuStats();
    next.state=ActivityState.RESUMED;
    mResumedActivity=next;
    next.task.touchActiveTime();
    updateLRUListLocked(next.app,true);
    updateLRUListLocked(next);
    Configuration config=mWindowManager.updateOrientationFromAppTokens(mConfiguration,next.mayFreezeScreenLocked(next.app) ? next : null);
    if (config != null) {
      next.frozenBeforeDestroy=true;
    }
    if (!updateConfigurationLocked(config,next)) {
      HistoryRecord nextNext=topRunningActivityLocked(null);
      if (DEBUG_SWITCH)       Log.i(TAG,""String_Node_Str"" + next + ""String_Node_Str""+ nextNext);
      if (nextNext != next) {
        mHandler.sendEmptyMessage(RESUME_TOP_ACTIVITY_MSG);
      }
      mWindowManager.executeAppTransition();
      return true;
    }
    try {
      ArrayList a=next.results;
      if (a != null) {
        final int N=a.size();
        if (!next.finishing && N > 0) {
          if (DEBUG_RESULTS)           Log.v(TAG,""String_Node_Str"" + next + ""String_Node_Str""+ a);
          next.app.thread.scheduleSendResult(next,a);
        }
      }
      if (next.newIntents != null) {
        next.app.thread.scheduleNewIntent(next.newIntents,next);
      }
      EventLog.writeEvent(LOG_AM_RESUME_ACTIVITY,System.identityHashCode(next),next.task.taskId,next.shortComponentName);
      updateUsageStats(next,true);
      next.app.thread.scheduleResumeActivity(next,isNextTransitionForward());
      pauseIfSleepingLocked();
    }
 catch (    Exception e) {
      next.state=lastState;
      mResumedActivity=lastResumedActivity;
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + next);
      if (!next.hasBeenLaunched) {
        next.hasBeenLaunched=true;
      }
 else {
        if (SHOW_APP_STARTING_ICON) {
          mWindowManager.setAppStartingWindow(next,next.packageName,next.theme,next.nonLocalizedLabel,next.labelRes,next.icon,null,true);
        }
      }
      startSpecificActivityLocked(next,true,false);
      return true;
    }
    try {
      next.visible=true;
      completeResumeLocked(next);
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"" + next,e);
      requestFinishActivityLocked(next,Activity.RESULT_CANCELED,null,""String_Node_Str"");
      return true;
    }
    next.icicle=null;
    next.haveState=false;
    next.stopped=false;
  }
 else {
    if (!next.hasBeenLaunched) {
      next.hasBeenLaunched=true;
    }
 else {
      if (SHOW_APP_STARTING_ICON) {
        mWindowManager.setAppStartingWindow(next,next.packageName,next.theme,next.nonLocalizedLabel,next.labelRes,next.icon,null,true);
      }
      if (DEBUG_SWITCH)       Log.v(TAG,""String_Node_Str"" + next);
    }
    startSpecificActivityLocked(next,true,true);
  }
  return true;
}","/** 
 * Ensure that the top activity in the stack is resumed.
 * @param prev The previously resumed activity, for when in the processof pausing; can be null to call from elsewhere.
 * @return Returns true if something is being resumed, or false ifnothing happened.
 */
private final boolean resumeTopActivityLocked(HistoryRecord prev){
  HistoryRecord next=topRunningActivityLocked(null);
  final boolean userLeaving=mUserLeaving;
  mUserLeaving=false;
  if (next == null) {
    if (mFactoryTest == SystemServer.FACTORY_TEST_LOW_LEVEL && mTopAction == null) {
      return false;
    }
    Intent intent=new Intent(mTopAction,mTopData != null ? Uri.parse(mTopData) : null);
    intent.setComponent(mTopComponent);
    if (mFactoryTest != SystemServer.FACTORY_TEST_LOW_LEVEL) {
      intent.addCategory(Intent.CATEGORY_HOME);
    }
    ActivityInfo aInfo=intent.resolveActivityInfo(mContext.getPackageManager(),STOCK_PM_FLAGS);
    if (aInfo != null) {
      intent.setComponent(new ComponentName(aInfo.applicationInfo.packageName,aInfo.name));
      ProcessRecord app=getProcessRecordLocked(aInfo.processName,aInfo.applicationInfo.uid);
      if (app == null || app.instrumentationClass == null) {
        intent.setFlags(intent.getFlags() | Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivityLocked(null,intent,null,null,0,aInfo,null,null,0,0,0,false,false);
      }
    }
    return true;
  }
  if (mResumedActivity == next && next.state == ActivityState.RESUMED) {
    mWindowManager.executeAppTransition();
    return false;
  }
  if ((mSleeping || mShuttingDown) && mLastPausedActivity == next && next.state == ActivityState.PAUSED) {
    mWindowManager.executeAppTransition();
    return false;
  }
  mStoppingActivities.remove(next);
  mWaitingVisibleActivities.remove(next);
  if (DEBUG_SWITCH)   Log.v(TAG,""String_Node_Str"" + next);
  if (mPausingActivity != null) {
    if (DEBUG_SWITCH)     Log.v(TAG,""String_Node_Str"" + mPausingActivity);
    return false;
  }
  if (mResumedActivity != null) {
    if (DEBUG_SWITCH)     Log.v(TAG,""String_Node_Str"");
    startPausingLocked(userLeaving,false);
    return true;
  }
  if (prev != null && prev != next) {
    if (!prev.waitingVisible && next != null && !next.nowVisible) {
      prev.waitingVisible=true;
      mWaitingVisibleActivities.add(prev);
      if (DEBUG_SWITCH)       Log.v(TAG,""String_Node_Str"" + prev);
    }
 else {
      if (prev.finishing) {
        mWindowManager.setAppVisibility(prev,false);
        if (DEBUG_SWITCH)         Log.v(TAG,""String_Node_Str"" + prev + ""String_Node_Str""+ (prev != null ? prev.waitingVisible : null)+ ""String_Node_Str""+ next.nowVisible);
      }
 else {
        if (DEBUG_SWITCH)         Log.v(TAG,""String_Node_Str"" + prev + ""String_Node_Str""+ (prev != null ? prev.waitingVisible : null)+ ""String_Node_Str""+ next.nowVisible);
      }
    }
  }
  if (prev != null) {
    if (prev.finishing) {
      if (DEBUG_TRANSITION)       Log.v(TAG,""String_Node_Str"" + prev);
      mWindowManager.prepareAppTransition(prev.task == next.task ? WindowManagerPolicy.TRANSIT_ACTIVITY_CLOSE : WindowManagerPolicy.TRANSIT_TASK_CLOSE);
      mWindowManager.setAppWillBeHidden(prev);
      mWindowManager.setAppVisibility(prev,false);
    }
 else {
      if (DEBUG_TRANSITION)       Log.v(TAG,""String_Node_Str"" + prev);
      mWindowManager.prepareAppTransition(prev.task == next.task ? WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN : WindowManagerPolicy.TRANSIT_TASK_OPEN);
    }
    if (false) {
      mWindowManager.setAppWillBeHidden(prev);
      mWindowManager.setAppVisibility(prev,false);
    }
  }
 else   if (mHistory.size() > 1) {
    if (DEBUG_TRANSITION)     Log.v(TAG,""String_Node_Str"");
    mWindowManager.prepareAppTransition(WindowManagerPolicy.TRANSIT_ACTIVITY_OPEN);
  }
  if (next.app != null && next.app.thread != null) {
    if (DEBUG_SWITCH)     Log.v(TAG,""String_Node_Str"" + next);
    mWindowManager.setAppVisibility(next,true);
    HistoryRecord lastResumedActivity=mResumedActivity;
    ActivityState lastState=next.state;
    updateCpuStats();
    next.state=ActivityState.RESUMED;
    mResumedActivity=next;
    next.task.touchActiveTime();
    updateLRUListLocked(next.app,true);
    updateLRUListLocked(next);
    Configuration config=mWindowManager.updateOrientationFromAppTokens(mConfiguration,next.mayFreezeScreenLocked(next.app) ? next : null);
    if (config != null) {
      next.frozenBeforeDestroy=true;
    }
    if (!updateConfigurationLocked(config,next)) {
      HistoryRecord nextNext=topRunningActivityLocked(null);
      if (DEBUG_SWITCH)       Log.i(TAG,""String_Node_Str"" + next + ""String_Node_Str""+ nextNext);
      if (nextNext != next) {
        mHandler.sendEmptyMessage(RESUME_TOP_ACTIVITY_MSG);
      }
      mWindowManager.executeAppTransition();
      return true;
    }
    try {
      ArrayList a=next.results;
      if (a != null) {
        final int N=a.size();
        if (!next.finishing && N > 0) {
          if (DEBUG_RESULTS)           Log.v(TAG,""String_Node_Str"" + next + ""String_Node_Str""+ a);
          next.app.thread.scheduleSendResult(next,a);
        }
      }
      if (next.newIntents != null) {
        next.app.thread.scheduleNewIntent(next.newIntents,next);
      }
      EventLog.writeEvent(LOG_AM_RESUME_ACTIVITY,System.identityHashCode(next),next.task.taskId,next.shortComponentName);
      updateUsageStats(next,true);
      next.app.thread.scheduleResumeActivity(next,isNextTransitionForward());
      pauseIfSleepingLocked();
    }
 catch (    Exception e) {
      next.state=lastState;
      mResumedActivity=lastResumedActivity;
      if (Config.LOGD)       Log.d(TAG,""String_Node_Str"" + next);
      if (!next.hasBeenLaunched) {
        next.hasBeenLaunched=true;
      }
 else {
        if (SHOW_APP_STARTING_ICON) {
          mWindowManager.setAppStartingWindow(next,next.packageName,next.theme,next.nonLocalizedLabel,next.labelRes,next.icon,null,true);
        }
      }
      startSpecificActivityLocked(next,true,false);
      return true;
    }
    try {
      next.visible=true;
      completeResumeLocked(next);
    }
 catch (    Exception e) {
      Log.w(TAG,""String_Node_Str"" + next,e);
      requestFinishActivityLocked(next,Activity.RESULT_CANCELED,null,""String_Node_Str"");
      return true;
    }
    next.icicle=null;
    next.haveState=false;
    next.stopped=false;
  }
 else {
    if (!next.hasBeenLaunched) {
      next.hasBeenLaunched=true;
    }
 else {
      if (SHOW_APP_STARTING_ICON) {
        mWindowManager.setAppStartingWindow(next,next.packageName,next.theme,next.nonLocalizedLabel,next.labelRes,next.icon,null,true);
      }
      if (DEBUG_SWITCH)       Log.v(TAG,""String_Node_Str"" + next);
    }
    startSpecificActivityLocked(next,true,true);
  }
  return true;
}"
24269,"private final int broadcastIntentLocked(ProcessRecord callerApp,String callerPackage,Intent intent,String resolvedType,IIntentReceiver resultTo,int resultCode,String resultData,Bundle map,String requiredPermission,boolean ordered,boolean sticky,int callingPid,int callingUid){
  intent=new Intent(intent);
  if (DEBUG_BROADCAST)   Log.v(TAG,(sticky ? ""String_Node_Str"" : ""String_Node_Str"") + intent + ""String_Node_Str""+ ordered);
  if ((resultTo != null) && !ordered) {
    Log.w(TAG,""String_Node_Str"" + intent + ""String_Node_Str"");
  }
  final boolean uidRemoved=intent.ACTION_UID_REMOVED.equals(intent.getAction());
  if (intent.ACTION_PACKAGE_REMOVED.equals(intent.getAction()) || intent.ACTION_PACKAGE_CHANGED.equals(intent.getAction()) || uidRemoved) {
    if (checkComponentPermission(android.Manifest.permission.BROADCAST_PACKAGE_REMOVED,callingPid,callingUid,-1) == PackageManager.PERMISSION_GRANTED) {
      if (uidRemoved) {
        final Bundle intentExtras=intent.getExtras();
        final int uid=intentExtras != null ? intentExtras.getInt(Intent.EXTRA_UID) : -1;
        if (uid >= 0) {
          BatteryStatsImpl bs=mBatteryStatsService.getActiveStatistics();
synchronized (bs) {
            bs.removeUidStatsLocked(uid);
          }
        }
      }
 else {
        Uri data=intent.getData();
        String ssp;
        if (data != null && (ssp=data.getSchemeSpecificPart()) != null) {
          if (!intent.getBooleanExtra(Intent.EXTRA_DONT_KILL_APP,false)) {
            uninstallPackageLocked(ssp,intent.getIntExtra(Intent.EXTRA_UID,-1),false);
          }
        }
      }
    }
 else {
      String msg=""String_Node_Str"" + intent.getAction() + ""String_Node_Str""+ callerPackage+ ""String_Node_Str""+ callingPid+ ""String_Node_Str""+ callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ android.Manifest.permission.BROADCAST_PACKAGE_REMOVED;
      Log.w(TAG,msg);
      throw new SecurityException(msg);
    }
  }
  if (intent.ACTION_TIMEZONE_CHANGED.equals(intent.getAction())) {
    mHandler.sendEmptyMessage(UPDATE_TIME_ZONE);
  }
  if (sticky) {
    if (checkPermission(android.Manifest.permission.BROADCAST_STICKY,callingPid,callingUid) != PackageManager.PERMISSION_GRANTED) {
      String msg=""String_Node_Str"" + callingPid + ""String_Node_Str""+ callingUid+ ""String_Node_Str""+ android.Manifest.permission.BROADCAST_STICKY;
      Log.w(TAG,msg);
      throw new SecurityException(msg);
    }
    if (requiredPermission != null) {
      Log.w(TAG,""String_Node_Str"" + intent + ""String_Node_Str""+ requiredPermission);
      return BROADCAST_STICKY_CANT_HAVE_PERMISSION;
    }
    if (intent.getComponent() != null) {
      throw new SecurityException(""String_Node_Str"");
    }
    ArrayList<Intent> list=mStickyBroadcasts.get(intent.getAction());
    if (list == null) {
      list=new ArrayList<Intent>();
      mStickyBroadcasts.put(intent.getAction(),list);
    }
    int N=list.size();
    int i;
    for (i=0; i < N; i++) {
      if (intent.filterEquals(list.get(i))) {
        list.set(i,new Intent(intent));
        break;
      }
    }
    if (i >= N) {
      list.add(new Intent(intent));
    }
  }
  final ContentResolver resolver=mContext.getContentResolver();
  List receivers=null;
  List<BroadcastFilter> registeredReceivers=null;
  try {
    if (intent.getComponent() != null) {
      ActivityInfo ai=ActivityThread.getPackageManager().getReceiverInfo(intent.getComponent(),0);
      if (ai != null) {
        receivers=new ArrayList();
        ResolveInfo ri=new ResolveInfo();
        ri.activityInfo=ai;
        receivers.add(ri);
      }
    }
 else {
      if ((intent.getFlags() & Intent.FLAG_RECEIVER_REGISTERED_ONLY) == 0) {
        receivers=ActivityThread.getPackageManager().queryIntentReceivers(intent,resolvedType,PackageManager.GET_SHARED_LIBRARY_FILES);
      }
      registeredReceivers=mReceiverResolver.queryIntent(resolver,intent,resolvedType,false);
    }
  }
 catch (  RemoteException ex) {
  }
  int NR=registeredReceivers != null ? registeredReceivers.size() : 0;
  if (!ordered && NR > 0) {
    BroadcastRecord r=new BroadcastRecord(intent,callerApp,callerPackage,callingPid,callingUid,requiredPermission,registeredReceivers,resultTo,resultCode,resultData,map,ordered);
    if (DEBUG_BROADCAST)     Log.v(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ mParallelBroadcasts.size());
    mParallelBroadcasts.add(r);
    scheduleBroadcastsLocked();
    registeredReceivers=null;
    NR=0;
  }
  int ir=0;
  if (receivers != null) {
    boolean skip=false;
    if (intent.ACTION_PACKAGE_ADDED.equals(intent.getAction())) {
      skip=true;
    }
 else     if (intent.ACTION_PACKAGE_RESTARTED.equals(intent.getAction())) {
      skip=true;
    }
 else     if (intent.ACTION_PACKAGE_DATA_CLEARED.equals(intent.getAction())) {
      skip=true;
    }
    String skipPackage=(skip && intent.getData() != null) ? intent.getData().getSchemeSpecificPart() : null;
    if (skipPackage != null && receivers != null) {
      int NT=receivers.size();
      for (int it=0; it < NT; it++) {
        ResolveInfo curt=(ResolveInfo)receivers.get(it);
        if (curt.activityInfo.packageName.equals(skipPackage)) {
          receivers.remove(it);
          it--;
          NT--;
        }
      }
    }
    int NT=receivers != null ? receivers.size() : 0;
    int it=0;
    ResolveInfo curt=null;
    BroadcastFilter curr=null;
    while (it < NT && ir < NR) {
      if (curt == null) {
        curt=(ResolveInfo)receivers.get(it);
      }
      if (curr == null) {
        curr=registeredReceivers.get(ir);
      }
      if (curr.getPriority() >= curt.priority) {
        receivers.add(it,curr);
        ir++;
        curr=null;
        it++;
        NT++;
      }
 else {
        it++;
        curt=null;
      }
    }
  }
  while (ir < NR) {
    if (receivers == null) {
      receivers=new ArrayList();
    }
    receivers.add(registeredReceivers.get(ir));
    ir++;
  }
  if ((receivers != null && receivers.size() > 0) || resultTo != null) {
    BroadcastRecord r=new BroadcastRecord(intent,callerApp,callerPackage,callingPid,callingUid,requiredPermission,receivers,resultTo,resultCode,resultData,map,ordered);
    if (DEBUG_BROADCAST)     Log.v(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ mOrderedBroadcasts.size());
    if (DEBUG_BROADCAST) {
      int seq=r.intent.getIntExtra(""String_Node_Str"",-1);
      Log.i(TAG,""String_Node_Str"" + r.intent.getAction() + ""String_Node_Str""+ seq);
    }
    mOrderedBroadcasts.add(r);
    scheduleBroadcastsLocked();
  }
  return BROADCAST_SUCCESS;
}","private final int broadcastIntentLocked(ProcessRecord callerApp,String callerPackage,Intent intent,String resolvedType,IIntentReceiver resultTo,int resultCode,String resultData,Bundle map,String requiredPermission,boolean ordered,boolean sticky,int callingPid,int callingUid){
  intent=new Intent(intent);
  if (DEBUG_BROADCAST)   Log.v(TAG,(sticky ? ""String_Node_Str"" : ""String_Node_Str"") + intent + ""String_Node_Str""+ ordered);
  if ((resultTo != null) && !ordered) {
    Log.w(TAG,""String_Node_Str"" + intent + ""String_Node_Str"");
  }
  final boolean uidRemoved=intent.ACTION_UID_REMOVED.equals(intent.getAction());
  if (intent.ACTION_PACKAGE_REMOVED.equals(intent.getAction()) || intent.ACTION_PACKAGE_CHANGED.equals(intent.getAction()) || uidRemoved) {
    if (checkComponentPermission(android.Manifest.permission.BROADCAST_PACKAGE_REMOVED,callingPid,callingUid,-1) == PackageManager.PERMISSION_GRANTED) {
      if (uidRemoved) {
        final Bundle intentExtras=intent.getExtras();
        final int uid=intentExtras != null ? intentExtras.getInt(Intent.EXTRA_UID) : -1;
        if (uid >= 0) {
          BatteryStatsImpl bs=mBatteryStatsService.getActiveStatistics();
synchronized (bs) {
            bs.removeUidStatsLocked(uid);
          }
        }
      }
 else {
        Uri data=intent.getData();
        String ssp;
        if (data != null && (ssp=data.getSchemeSpecificPart()) != null) {
          if (!intent.getBooleanExtra(Intent.EXTRA_DONT_KILL_APP,false)) {
            uninstallPackageLocked(ssp,intent.getIntExtra(Intent.EXTRA_UID,-1),false);
          }
        }
      }
    }
 else {
      String msg=""String_Node_Str"" + intent.getAction() + ""String_Node_Str""+ callerPackage+ ""String_Node_Str""+ callingPid+ ""String_Node_Str""+ callingUid+ ""String_Node_Str""+ ""String_Node_Str""+ android.Manifest.permission.BROADCAST_PACKAGE_REMOVED;
      Log.w(TAG,msg);
      throw new SecurityException(msg);
    }
  }
  if (intent.ACTION_TIMEZONE_CHANGED.equals(intent.getAction())) {
    mHandler.sendEmptyMessage(UPDATE_TIME_ZONE);
  }
  if (sticky) {
    if (checkPermission(android.Manifest.permission.BROADCAST_STICKY,callingPid,callingUid) != PackageManager.PERMISSION_GRANTED) {
      String msg=""String_Node_Str"" + callingPid + ""String_Node_Str""+ callingUid+ ""String_Node_Str""+ android.Manifest.permission.BROADCAST_STICKY;
      Log.w(TAG,msg);
      throw new SecurityException(msg);
    }
    if (requiredPermission != null) {
      Log.w(TAG,""String_Node_Str"" + intent + ""String_Node_Str""+ requiredPermission);
      return BROADCAST_STICKY_CANT_HAVE_PERMISSION;
    }
    if (intent.getComponent() != null) {
      throw new SecurityException(""String_Node_Str"");
    }
    ArrayList<Intent> list=mStickyBroadcasts.get(intent.getAction());
    if (list == null) {
      list=new ArrayList<Intent>();
      mStickyBroadcasts.put(intent.getAction(),list);
    }
    int N=list.size();
    int i;
    for (i=0; i < N; i++) {
      if (intent.filterEquals(list.get(i))) {
        list.set(i,new Intent(intent));
        break;
      }
    }
    if (i >= N) {
      list.add(new Intent(intent));
    }
  }
  final ContentResolver resolver=mContext.getContentResolver();
  List receivers=null;
  List<BroadcastFilter> registeredReceivers=null;
  try {
    if (intent.getComponent() != null) {
      ActivityInfo ai=ActivityThread.getPackageManager().getReceiverInfo(intent.getComponent(),STOCK_PM_FLAGS);
      if (ai != null) {
        receivers=new ArrayList();
        ResolveInfo ri=new ResolveInfo();
        ri.activityInfo=ai;
        receivers.add(ri);
      }
    }
 else {
      if ((intent.getFlags() & Intent.FLAG_RECEIVER_REGISTERED_ONLY) == 0) {
        receivers=ActivityThread.getPackageManager().queryIntentReceivers(intent,resolvedType,STOCK_PM_FLAGS);
      }
      registeredReceivers=mReceiverResolver.queryIntent(resolver,intent,resolvedType,false);
    }
  }
 catch (  RemoteException ex) {
  }
  int NR=registeredReceivers != null ? registeredReceivers.size() : 0;
  if (!ordered && NR > 0) {
    BroadcastRecord r=new BroadcastRecord(intent,callerApp,callerPackage,callingPid,callingUid,requiredPermission,registeredReceivers,resultTo,resultCode,resultData,map,ordered);
    if (DEBUG_BROADCAST)     Log.v(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ mParallelBroadcasts.size());
    mParallelBroadcasts.add(r);
    scheduleBroadcastsLocked();
    registeredReceivers=null;
    NR=0;
  }
  int ir=0;
  if (receivers != null) {
    boolean skip=false;
    if (intent.ACTION_PACKAGE_ADDED.equals(intent.getAction())) {
      skip=true;
    }
 else     if (intent.ACTION_PACKAGE_RESTARTED.equals(intent.getAction())) {
      skip=true;
    }
 else     if (intent.ACTION_PACKAGE_DATA_CLEARED.equals(intent.getAction())) {
      skip=true;
    }
    String skipPackage=(skip && intent.getData() != null) ? intent.getData().getSchemeSpecificPart() : null;
    if (skipPackage != null && receivers != null) {
      int NT=receivers.size();
      for (int it=0; it < NT; it++) {
        ResolveInfo curt=(ResolveInfo)receivers.get(it);
        if (curt.activityInfo.packageName.equals(skipPackage)) {
          receivers.remove(it);
          it--;
          NT--;
        }
      }
    }
    int NT=receivers != null ? receivers.size() : 0;
    int it=0;
    ResolveInfo curt=null;
    BroadcastFilter curr=null;
    while (it < NT && ir < NR) {
      if (curt == null) {
        curt=(ResolveInfo)receivers.get(it);
      }
      if (curr == null) {
        curr=registeredReceivers.get(ir);
      }
      if (curr.getPriority() >= curt.priority) {
        receivers.add(it,curr);
        ir++;
        curr=null;
        it++;
        NT++;
      }
 else {
        it++;
        curt=null;
      }
    }
  }
  while (ir < NR) {
    if (receivers == null) {
      receivers=new ArrayList();
    }
    receivers.add(registeredReceivers.get(ir));
    ir++;
  }
  if ((receivers != null && receivers.size() > 0) || resultTo != null) {
    BroadcastRecord r=new BroadcastRecord(intent,callerApp,callerPackage,callingPid,callingUid,requiredPermission,receivers,resultTo,resultCode,resultData,map,ordered);
    if (DEBUG_BROADCAST)     Log.v(TAG,""String_Node_Str"" + r + ""String_Node_Str""+ mOrderedBroadcasts.size());
    if (DEBUG_BROADCAST) {
      int seq=r.intent.getIntExtra(""String_Node_Str"",-1);
      Log.i(TAG,""String_Node_Str"" + r.intent.getAction() + ""String_Node_Str""+ seq);
    }
    mOrderedBroadcasts.add(r);
    scheduleBroadcastsLocked();
  }
  return BROADCAST_SUCCESS;
}"
24270,"private final ContentProviderHolder getContentProviderImpl(IApplicationThread caller,String name){
  ContentProviderRecord cpr;
  ProviderInfo cpi=null;
synchronized (this) {
    ProcessRecord r=null;
    if (caller != null) {
      r=getRecordForAppLocked(caller);
      if (r == null) {
        throw new SecurityException(""String_Node_Str"" + caller + ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ name);
      }
    }
    cpr=(ContentProviderRecord)mProvidersByName.get(name);
    if (cpr != null) {
      cpi=cpr.info;
      if (checkContentProviderPermissionLocked(cpi,r,-1) != null) {
        return new ContentProviderHolder(cpi,cpi.readPermission != null ? cpi.readPermission : cpi.writePermission);
      }
      if (r != null && cpr.canRunHere(r)) {
        if (cpr.provider != null) {
          cpr=new ContentProviderRecord(cpr);
        }
        return cpr;
      }
      final long origId=Binder.clearCallingIdentity();
      if (r != null) {
        r.conProviders.add(cpr);
        cpr.clients.add(r);
      }
 else {
        cpr.externals++;
      }
      if (cpr.app != null) {
        updateOomAdjLocked(cpr.app);
      }
      Binder.restoreCallingIdentity(origId);
    }
 else {
      try {
        cpi=ActivityThread.getPackageManager().resolveContentProvider(name,PackageManager.GET_URI_PERMISSION_PATTERNS);
      }
 catch (      RemoteException ex) {
      }
      if (cpi == null) {
        return null;
      }
      if (checkContentProviderPermissionLocked(cpi,r,-1) != null) {
        return new ContentProviderHolder(cpi,cpi.readPermission != null ? cpi.readPermission : cpi.writePermission);
      }
      cpr=(ContentProviderRecord)mProvidersByClass.get(cpi.name);
      final boolean firstClass=cpr == null;
      if (firstClass) {
        try {
          ApplicationInfo ai=ActivityThread.getPackageManager().getApplicationInfo(cpi.applicationInfo.packageName,PackageManager.GET_SHARED_LIBRARY_FILES);
          if (ai == null) {
            Log.w(TAG,""String_Node_Str"" + cpi.name);
            return null;
          }
          cpr=new ContentProviderRecord(cpi,ai);
        }
 catch (        RemoteException ex) {
        }
      }
      if (r != null && cpr.canRunHere(r)) {
        return cpr;
      }
      if (false) {
        RuntimeException e=new RuntimeException(""String_Node_Str"");
      }
      final int N=mLaunchingProviders.size();
      int i;
      for (i=0; i < N; i++) {
        if (mLaunchingProviders.get(i) == cpr) {
          break;
        }
        if (false) {
          final ContentProviderRecord rec=(ContentProviderRecord)mLaunchingProviders.get(i);
          if (rec.info.name.equals(cpr.info.name)) {
            cpr=rec;
            break;
          }
        }
      }
      if (i >= N) {
        final long origId=Binder.clearCallingIdentity();
        ProcessRecord proc=startProcessLocked(cpi.processName,cpr.appInfo,false,0,""String_Node_Str"",new ComponentName(cpi.applicationInfo.packageName,cpi.name));
        if (proc == null) {
          Log.w(TAG,""String_Node_Str"" + cpi.applicationInfo.packageName + ""String_Node_Str""+ cpi.applicationInfo.uid+ ""String_Node_Str""+ name+ ""String_Node_Str"");
          return null;
        }
        cpr.launchingApp=proc;
        mLaunchingProviders.add(cpr);
        Binder.restoreCallingIdentity(origId);
      }
      if (firstClass) {
        mProvidersByClass.put(cpi.name,cpr);
      }
      mProvidersByName.put(name,cpr);
      if (r != null) {
        r.conProviders.add(cpr);
        cpr.clients.add(r);
      }
 else {
        cpr.externals++;
      }
    }
  }
synchronized (cpr) {
    while (cpr.provider == null) {
      if (cpr.launchingApp == null) {
        Log.w(TAG,""String_Node_Str"" + cpi.applicationInfo.packageName + ""String_Node_Str""+ cpi.applicationInfo.uid+ ""String_Node_Str""+ name+ ""String_Node_Str"");
        EventLog.writeEvent(LOG_AM_PROVIDER_LOST_PROCESS,cpi.applicationInfo.packageName,cpi.applicationInfo.uid,name);
        return null;
      }
      try {
        cpr.wait();
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  return cpr;
}","private final ContentProviderHolder getContentProviderImpl(IApplicationThread caller,String name){
  ContentProviderRecord cpr;
  ProviderInfo cpi=null;
synchronized (this) {
    ProcessRecord r=null;
    if (caller != null) {
      r=getRecordForAppLocked(caller);
      if (r == null) {
        throw new SecurityException(""String_Node_Str"" + caller + ""String_Node_Str""+ Binder.getCallingPid()+ ""String_Node_Str""+ name);
      }
    }
    cpr=(ContentProviderRecord)mProvidersByName.get(name);
    if (cpr != null) {
      cpi=cpr.info;
      if (checkContentProviderPermissionLocked(cpi,r,-1) != null) {
        return new ContentProviderHolder(cpi,cpi.readPermission != null ? cpi.readPermission : cpi.writePermission);
      }
      if (r != null && cpr.canRunHere(r)) {
        if (cpr.provider != null) {
          cpr=new ContentProviderRecord(cpr);
        }
        return cpr;
      }
      final long origId=Binder.clearCallingIdentity();
      if (r != null) {
        r.conProviders.add(cpr);
        cpr.clients.add(r);
      }
 else {
        cpr.externals++;
      }
      if (cpr.app != null) {
        updateOomAdjLocked(cpr.app);
      }
      Binder.restoreCallingIdentity(origId);
    }
 else {
      try {
        cpi=ActivityThread.getPackageManager().resolveContentProvider(name,STOCK_PM_FLAGS | PackageManager.GET_URI_PERMISSION_PATTERNS);
      }
 catch (      RemoteException ex) {
      }
      if (cpi == null) {
        return null;
      }
      if (checkContentProviderPermissionLocked(cpi,r,-1) != null) {
        return new ContentProviderHolder(cpi,cpi.readPermission != null ? cpi.readPermission : cpi.writePermission);
      }
      cpr=(ContentProviderRecord)mProvidersByClass.get(cpi.name);
      final boolean firstClass=cpr == null;
      if (firstClass) {
        try {
          ApplicationInfo ai=ActivityThread.getPackageManager().getApplicationInfo(cpi.applicationInfo.packageName,STOCK_PM_FLAGS);
          if (ai == null) {
            Log.w(TAG,""String_Node_Str"" + cpi.name);
            return null;
          }
          cpr=new ContentProviderRecord(cpi,ai);
        }
 catch (        RemoteException ex) {
        }
      }
      if (r != null && cpr.canRunHere(r)) {
        return cpr;
      }
      if (false) {
        RuntimeException e=new RuntimeException(""String_Node_Str"");
      }
      final int N=mLaunchingProviders.size();
      int i;
      for (i=0; i < N; i++) {
        if (mLaunchingProviders.get(i) == cpr) {
          break;
        }
        if (false) {
          final ContentProviderRecord rec=(ContentProviderRecord)mLaunchingProviders.get(i);
          if (rec.info.name.equals(cpr.info.name)) {
            cpr=rec;
            break;
          }
        }
      }
      if (i >= N) {
        final long origId=Binder.clearCallingIdentity();
        ProcessRecord proc=startProcessLocked(cpi.processName,cpr.appInfo,false,0,""String_Node_Str"",new ComponentName(cpi.applicationInfo.packageName,cpi.name));
        if (proc == null) {
          Log.w(TAG,""String_Node_Str"" + cpi.applicationInfo.packageName + ""String_Node_Str""+ cpi.applicationInfo.uid+ ""String_Node_Str""+ name+ ""String_Node_Str"");
          return null;
        }
        cpr.launchingApp=proc;
        mLaunchingProviders.add(cpr);
        Binder.restoreCallingIdentity(origId);
      }
      if (firstClass) {
        mProvidersByClass.put(cpi.name,cpr);
      }
      mProvidersByName.put(name,cpr);
      if (r != null) {
        r.conProviders.add(cpr);
        cpr.clients.add(r);
      }
 else {
        cpr.externals++;
      }
    }
  }
synchronized (cpr) {
    while (cpr.provider == null) {
      if (cpr.launchingApp == null) {
        Log.w(TAG,""String_Node_Str"" + cpi.applicationInfo.packageName + ""String_Node_Str""+ cpi.applicationInfo.uid+ ""String_Node_Str""+ name+ ""String_Node_Str"");
        EventLog.writeEvent(LOG_AM_PROVIDER_LOST_PROCESS,cpi.applicationInfo.packageName,cpi.applicationInfo.uid,name);
        return null;
      }
      try {
        cpr.wait();
      }
 catch (      InterruptedException ex) {
      }
    }
  }
  return cpr;
}"
24271,"void dump(PrintWriter pw,String prefix){
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(pkgList);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(thread);
  pw.print(""String_Node_Str"");
  pw.println(curReceiver);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.print(starting);
  pw.print(""String_Node_Str"");
  pw.println(lastPss);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(hiddenAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(isForeground);
  pw.print(""String_Node_Str"");
  pw.print(setIsForeground);
  pw.print(""String_Node_Str"");
  pw.print(foregroundServices);
  pw.print(""String_Node_Str"");
  pw.println(forcingToForeground);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(persistent);
  pw.print(""String_Node_Str"");
  pw.print(removed);
  pw.print(""String_Node_Str"");
  pw.println(persistentActivities);
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.println(bad);
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(activities);
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(services);
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(executingServices);
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(connections);
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(pubProviders);
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(conProviders);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(receivers);
  }
}","void dump(PrintWriter pw,String prefix){
  if (info.className != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.className);
  }
  if (info.manageSpaceActivityName != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(info.manageSpaceActivityName);
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(info.sourceDir);
  pw.print(""String_Node_Str"");
  pw.print(info.publicSourceDir);
  pw.print(""String_Node_Str"");
  pw.println(info.dataDir);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.println(pkgList);
  if (instrumentationClass != null || instrumentationProfileFile != null || instrumentationArguments != null) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(instrumentationClass);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationProfileFile);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationArguments);
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(instrumentationInfo);
    if (instrumentationInfo != null) {
      instrumentationInfo.dump(new PrintWriterPrinter(pw),prefix + ""String_Node_Str"");
    }
  }
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(thread);
  pw.print(""String_Node_Str"");
  pw.println(curReceiver);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(pid);
  pw.print(""String_Node_Str"");
  pw.print(starting);
  pw.print(""String_Node_Str"");
  pw.println(lastPss);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(maxAdj);
  pw.print(""String_Node_Str"");
  pw.print(hiddenAdj);
  pw.print(""String_Node_Str"");
  pw.print(curRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(setRawAdj);
  pw.print(""String_Node_Str"");
  pw.print(curAdj);
  pw.print(""String_Node_Str"");
  pw.println(setAdj);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(isForeground);
  pw.print(""String_Node_Str"");
  pw.print(setIsForeground);
  pw.print(""String_Node_Str"");
  pw.print(foregroundServices);
  pw.print(""String_Node_Str"");
  pw.println(forcingToForeground);
  pw.print(prefix);
  pw.print(""String_Node_Str"");
  pw.print(persistent);
  pw.print(""String_Node_Str"");
  pw.print(removed);
  pw.print(""String_Node_Str"");
  pw.println(persistentActivities);
  if (debugging || crashing || crashDialog != null || notResponding || anrDialog != null || bad) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.print(debugging);
    pw.print(""String_Node_Str"");
    pw.print(crashing);
    pw.print(""String_Node_Str"");
    pw.print(crashDialog);
    pw.print(""String_Node_Str"");
    pw.print(notResponding);
    pw.print(""String_Node_Str"");
    pw.print(anrDialog);
    pw.print(""String_Node_Str"");
    pw.println(bad);
  }
  if (activities.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(activities);
  }
  if (services.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(services);
  }
  if (executingServices.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(executingServices);
  }
  if (connections.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(connections);
  }
  if (pubProviders.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(pubProviders);
  }
  if (conProviders.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(conProviders);
  }
  if (receivers.size() > 0) {
    pw.print(prefix);
    pw.print(""String_Node_Str"");
    pw.println(receivers);
  }
}"
24272,"@Suppress public void testStartUpTime() throws Exception {
  createDB();
  audioPlaybackStartupTime(MediaNames.MP3FILES);
  audioPlaybackStartupTime(MediaNames.AACFILES);
}","@Suppress public void testStartUpTime() throws Exception {
  createDB();
  audioPlaybackStartupTime(MediaNames.MP3FILES);
  audioPlaybackStartupTime(MediaNames.AACFILES);
  if (mDB.isOpen()) {
    mDB.close();
  }
}"
24273,"public void createDB(){
  mDB=SQLiteDatabase.openOrCreateDatabase(""String_Node_Str"",null);
  mDB.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
}","public void createDB(){
  mDB=SQLiteDatabase.openOrCreateDatabase(""String_Node_Str"",null);
  mDB.execSQL(""String_Node_Str"" + ""String_Node_Str"" + ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str""+ ""String_Node_Str"");
  mDB.execSQL(""String_Node_Str"");
}"
24274,"@SuppressWarnings({""String_Node_Str""}) protected void performFiltering(CharSequence text,int keyCode){
  mFilter.filter(text,this);
}","/** 
 * <p>Starts filtering the content of the drop down list. The filtering pattern is the content of the edit box. Subclasses should override this method to filter with a different pattern, for instance a substring of <code>text</code>.</p>
 * @param text the filtering pattern
 * @param keyCode the last character inserted in the edit box; beware thatthis will be null when text is being added through a soft input method.
 */
@SuppressWarnings({""String_Node_Str""}) protected void performFiltering(CharSequence text,int keyCode){
  mFilter.filter(text,this);
}"
24275,"@Override public void handleMessage(Message msg){
  try {
    if (msg.what == MESSAGE_LOCATION_CHANGED) {
synchronized (mLock) {
        Location location=(Location)msg.obj;
        if (mCollector != null && LocationManager.GPS_PROVIDER.equals(location.getProvider())) {
          try {
            mCollector.updateLocation(location);
          }
 catch (          RemoteException e) {
            Log.w(TAG,""String_Node_Str"");
          }
        }
        String provider=location.getProvider();
        if (!isAllowedBySettingsLocked(provider)) {
          return;
        }
        if (mWakeLockAcquireTime != 0) {
          handleLocationChangedLocked(location);
        }
        if ((mWakeLockAcquireTime != 0) && (SystemClock.elapsedRealtime() - mWakeLockAcquireTime > MAX_TIME_FOR_WAKE_LOCK)) {
          removeMessages(MESSAGE_RELEASE_WAKE_LOCK);
          log(""String_Node_Str"");
          Message m=Message.obtain(this,MESSAGE_RELEASE_WAKE_LOCK);
          sendMessageAtFrontOfQueue(m);
        }
 else         if (mWakeLockAcquireTime != 0 && mWakeLockGpsReceived && mWakeLockNetworkReceived) {
          removeMessages(MESSAGE_RELEASE_WAKE_LOCK);
          log(""String_Node_Str"");
          mWakeLockAcquireTime=0;
          Message m=Message.obtain(this,MESSAGE_RELEASE_WAKE_LOCK);
          sendMessageDelayed(m,TIME_AFTER_WAKE_LOCK);
        }
      }
    }
 else     if (msg.what == MESSAGE_RELEASE_WAKE_LOCK) {
      log(""String_Node_Str"");
synchronized (mLock) {
        updateWakelockStatusLocked();
        releaseWakeLockLocked();
      }
    }
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}","@Override public void handleMessage(Message msg){
  try {
    if (msg.what == MESSAGE_LOCATION_CHANGED) {
synchronized (mLock) {
        Location location=(Location)msg.obj;
        if (mCollector != null && LocationManager.GPS_PROVIDER.equals(location.getProvider())) {
          try {
            mCollector.updateLocation(location);
          }
 catch (          RemoteException e) {
            Log.w(TAG,""String_Node_Str"");
          }
        }
        String provider=location.getProvider();
        if (!isAllowedBySettingsLocked(provider)) {
          return;
        }
        handleLocationChangedLocked(location);
        if ((mWakeLockAcquireTime != 0) && (SystemClock.elapsedRealtime() - mWakeLockAcquireTime > MAX_TIME_FOR_WAKE_LOCK)) {
          removeMessages(MESSAGE_RELEASE_WAKE_LOCK);
          log(""String_Node_Str"");
          Message m=Message.obtain(this,MESSAGE_RELEASE_WAKE_LOCK);
          sendMessageAtFrontOfQueue(m);
        }
 else         if (mWakeLockAcquireTime != 0 && mWakeLockGpsReceived && mWakeLockNetworkReceived) {
          removeMessages(MESSAGE_RELEASE_WAKE_LOCK);
          log(""String_Node_Str"");
          mWakeLockAcquireTime=0;
          Message m=Message.obtain(this,MESSAGE_RELEASE_WAKE_LOCK);
          sendMessageDelayed(m,TIME_AFTER_WAKE_LOCK);
        }
      }
    }
 else     if (msg.what == MESSAGE_RELEASE_WAKE_LOCK) {
      log(""String_Node_Str"");
synchronized (mLock) {
        updateWakelockStatusLocked();
        releaseWakeLockLocked();
      }
    }
  }
 catch (  Exception e) {
    Log.e(TAG,""String_Node_Str"",e);
  }
}"
24276,"/** 
 * Play a sound from a sound ID <p>Play the sound specified by the soundID. This is the value  returned by the load() function. Returns a non-zero streamID if successful, zero if it fails. The streamID can be used to further control playback. Note that calling play() may cause another sound to stop playing if the maximum number of active streams is exceeded.</p>
 * @param soundID a soundID returned by the load() function
 * @return non-zero streamID if successful, zero if failed
 */
public native final int play(int soundID,float leftVolume,float rightVolume,int priority,int loop,float rate);","/** 
 * Play a sound from a sound ID. Play the sound specified by the soundID. This is the value  returned by the load() function. Returns a non-zero streamID if successful, zero if it fails. The streamID can be used to further control playback. Note that calling play() may cause another sound to stop playing if the maximum number of active streams is exceeded. A loop value of -1 means loop forever, a value of 0 means don't loop, other values indicate the number of repeats, e.g. a value of 1 plays the audio twice. The playback rate allows the application to vary the playback rate (pitch) of the sound. A value of 1.0 means play back at the original frequency. A value of 2.0 means play back twice as fast, and a value of 0.5 means playback at half speed.
 * @param soundID a soundID returned by the load() function
 * @param leftVolume left volume value (range = 0.0 to 1.0)
 * @param rightVolume right volume value (range = 0.0 to 1.0)
 * @param priority stream priority (0 = lowest priority)
 * @param loop loop mode (0 = no loop, -1 = loop forever)
 * @param rate playback rate (1.0 = normal playback, range 0.5 to 2.0)
 * @return non-zero streamID if successful, zero if failed
 */
public native final int play(int soundID,float leftVolume,float rightVolume,int priority,int loop,float rate);"
24277,"/** 
 * Resume a playback stream <p>Resume the stream specified by the streamID. This is the value returned by the play() function. If the stream is paused, this will resume playback. If the stream was not previously paused, calling this function will have no effect.</p>
 * @param streamID a streamID returned by the play() function
 */
public native final void resume(int streamID);","/** 
 * Resume a playback stream. Resume the stream specified by the streamID. This is the value returned by the play() function. If the stream is paused, this will resume playback. If the stream was not previously paused, calling this function will have no effect.
 * @param streamID a streamID returned by the play() function
 */
public native final void resume(int streamID);"
24278,public native final void release();,"/** 
 * Release the SoundPool resources. Release all memory and native resources used by the SoundPool object. The SoundPool can no longer be used and the reference should be set to null.
 */
public native final void release();"
24279,"/** 
 * Change stream priority <p>Change the priority of the stream specified by the streamID. This is the value returned by the play() function. Affects the order in which streams are re-used to play new sounds.
 * @param streamID a streamID returned by the play() function
 */
public native final void setLoop(int streamID,int loop);","/** 
 * Set loop mode. Change the loop mode. A loop value of -1 means loop forever, a value of 0 means don't loop, other values indicate the number of repeats, e.g. a value of 1 plays the audio twice. If the stream does not exist, it will have no effect.
 * @param streamID a streamID returned by the play() function
 * @param loop loop mode (0 = no loop, -1 = loop forever)
 */
public native final void setLoop(int streamID,int loop);"
24280,"/** 
 * Set stream volume <p>Sets the volume on the stream specified by the streamID. This is the value returned by the play() function. The value must be in the range of 0.0 to 1.0. If the stream does not exist, it will have no effect.</p>
 * @param streamID a streamID returned by the play() function
 * @param leftVolume left volume value (range = 0.0 to 1.0)
 * @param rightVolume right volume value (range = 0.0 to 1.0)
 */
public native final void setVolume(int streamID,float leftVolume,float rightVolume);","/** 
 * Set stream volume. Sets the volume on the stream specified by the streamID. This is the value returned by the play() function. The value must be in the range of 0.0 to 1.0. If the stream does not exist, it will have no effect.
 * @param streamID a streamID returned by the play() function
 * @param leftVolume left volume value (range = 0.0 to 1.0)
 * @param rightVolume right volume value (range = 0.0 to 1.0)
 */
public native final void setVolume(int streamID,float leftVolume,float rightVolume);"
24281,"public native final void setRate(int streamID,float rate);","/** 
 * Change playback rate. The playback rate allows the application to vary the playback rate (pitch) of the sound. A value of 1.0 means playback at the original frequency. A value of 2.0 means playback twice as fast, and a value of 0.5 means playback at half speed. If the stream does not exist, it will have no effect.
 * @param streamID a streamID returned by the play() function
 * @param rate playback rate (1.0 = normal playback, range 0.5 to 2.0)
 */
public native final void setRate(int streamID,float rate);"
24282,"/** 
 * Pause a playback stream <p>Pause the stream specified by the streamID. This is the value returned by the play() function. If the stream is playing, it will be paused. If the stream is not playing (e.g. is stopped or was previously paused), calling this function will have no effect.</p>
 * @param streamID a streamID returned by the play() function
 */
public native final void pause(int streamID);","/** 
 * Pause a playback stream. Pause the stream specified by the streamID. This is the value returned by the play() function. If the stream is playing, it will be paused. If the stream is not playing (e.g. is stopped or was previously paused), calling this function will have no effect.
 * @param streamID a streamID returned by the play() function
 */
public native final void pause(int streamID);"
24283,"/** 
 * Load the sound from a FileDescriptor <p>This version is useful if you store multiple sounds in a single binary. The offset specifies the offset from the start of the file and the length specifies the length of the sound within the file.</p>
 * @param fd a FileDescriptor object
 * @param offset offset to the start of the sound
 * @param length length of the sound
 * @param priority the priority of the sound. Currently has no effect.
 * @return a sound ID. This value can be used to play or unload the sound.
 */
public int load(FileDescriptor fd,long offset,long length,int priority){
  return _load(fd,offset,length,priority);
}","/** 
 * Load the sound from a FileDescriptor. This version is useful if you store multiple sounds in a single binary. The offset specifies the offset from the start of the file and the length specifies the length of the sound within the file.
 * @param fd a FileDescriptor object
 * @param offset offset to the start of the sound
 * @param length length of the sound
 * @param priority the priority of the sound. Currently has no effect. Usea value of 1 for future compatibility.
 * @return a sound ID. This value can be used to play or unload the sound.
 */
public int load(FileDescriptor fd,long offset,long length,int priority){
  return _load(fd,offset,length,priority);
}"
24284,"/** 
 * Stop a playback stream <p>Stop the stream specified by the streamID. This is the value returned by the play() function. If the stream is playing, it will be stopped. It also releases any native resources associated with this stream. If the stream is not playing, it will have no effect.</p>
 * @param streamID a streamID returned by the play() function
 */
public native final void stop(int streamID);","/** 
 * Stop a playback stream. Stop the stream specified by the streamID. This is the value returned by the play() function. If the stream is playing, it will be stopped. It also releases any native resources associated with this stream. If the stream is not playing, it will have no effect.
 * @param streamID a streamID returned by the play() function
 */
public native final void stop(int streamID);"
24285,"/** 
 * Unload a sound from a sound ID <p>Unloads the sound specified by the soundID. This is the value returned by the load() function. Returns true if the sound is successfully unloaded, false if the sound was already unloaded.</p>
 * @param soundID a soundID returned by the load() function
 * @return true if just unloaded, false if previously unloaded
 */
public native final boolean unload(int soundID);","/** 
 * Unload a sound from a sound ID. Unloads the sound specified by the soundID. This is the value returned by the load() function. Returns true if the sound is successfully unloaded, false if the sound was already unloaded.
 * @param soundID a soundID returned by the load() function
 * @return true if just unloaded, false if previously unloaded
 */
public native final boolean unload(int soundID);"
24286,"/** 
 * Change stream priority <p>Change the priority of the stream specified by the streamID. This is the value returned by the play() function. Affects the order in which streams are re-used to play new sounds.
 * @param streamID a streamID returned by the play() function
 */
public native final void setPriority(int streamID,int priority);","/** 
 * Change stream priority. Change the priority of the stream specified by the streamID. This is the value returned by the play() function. Affects the order in which streams are re-used to play new sounds. If the stream does not exist, it will have no effect.
 * @param streamID a streamID returned by the play() function
 */
public native final void setPriority(int streamID,int priority);"
24287,"/** 
 * Play a sound from a sound ID <p>Play the sound specified by the soundID. This is the value  returned by the load() function. Returns a non-zero streamID if successful, zero if it fails. The streamID can be used to further control playback. Note that calling play() may cause another sound to stop playing if the maximum number of active streams is exceeded.</p>
 * @param soundID a soundID returned by the load() function
 * @return non-zero streamID if successful, zero if failed
 */
public native final int play(int soundID,float leftVolume,float rightVolume,int priority,int loop,float rate);","/** 
 * Play a sound from a sound ID. Play the sound specified by the soundID. This is the value  returned by the load() function. Returns a non-zero streamID if successful, zero if it fails. The streamID can be used to further control playback. Note that calling play() may cause another sound to stop playing if the maximum number of active streams is exceeded. A loop value of -1 means loop forever, a value of 0 means don't loop, other values indicate the number of repeats, e.g. a value of 1 plays the audio twice. The playback rate allows the application to vary the playback rate (pitch) of the sound. A value of 1.0 means play back at the original frequency. A value of 2.0 means play back twice as fast, and a value of 0.5 means playback at half speed.
 * @param soundID a soundID returned by the load() function
 * @param leftVolume left volume value (range = 0.0 to 1.0)
 * @param rightVolume right volume value (range = 0.0 to 1.0)
 * @param priority stream priority (0 = lowest priority)
 * @param loop loop mode (0 = no loop, -1 = loop forever)
 * @param rate playback rate (1.0 = normal playback, range 0.5 to 2.0)
 * @return non-zero streamID if successful, zero if failed
 */
public native final int play(int soundID,float leftVolume,float rightVolume,int priority,int loop,float rate);"
24288,"/** 
 * Resume a playback stream <p>Resume the stream specified by the streamID. This is the value returned by the play() function. If the stream is paused, this will resume playback. If the stream was not previously paused, calling this function will have no effect.</p>
 * @param streamID a streamID returned by the play() function
 */
public native final void resume(int streamID);","/** 
 * Resume a playback stream. Resume the stream specified by the streamID. This is the value returned by the play() function. If the stream is paused, this will resume playback. If the stream was not previously paused, calling this function will have no effect.
 * @param streamID a streamID returned by the play() function
 */
public native final void resume(int streamID);"
24289,public native final void release();,"/** 
 * Release the SoundPool resources. Release all memory and native resources used by the SoundPool object. The SoundPool can no longer be used and the reference should be set to null.
 */
public native final void release();"
24290,"/** 
 * Change stream priority <p>Change the priority of the stream specified by the streamID. This is the value returned by the play() function. Affects the order in which streams are re-used to play new sounds.
 * @param streamID a streamID returned by the play() function
 */
public native final void setLoop(int streamID,int loop);","/** 
 * Set loop mode. Change the loop mode. A loop value of -1 means loop forever, a value of 0 means don't loop, other values indicate the number of repeats, e.g. a value of 1 plays the audio twice. If the stream does not exist, it will have no effect.
 * @param streamID a streamID returned by the play() function
 * @param loop loop mode (0 = no loop, -1 = loop forever)
 */
public native final void setLoop(int streamID,int loop);"
24291,"/** 
 * Set stream volume <p>Sets the volume on the stream specified by the streamID. This is the value returned by the play() function. The value must be in the range of 0.0 to 1.0. If the stream does not exist, it will have no effect.</p>
 * @param streamID a streamID returned by the play() function
 * @param leftVolume left volume value (range = 0.0 to 1.0)
 * @param rightVolume right volume value (range = 0.0 to 1.0)
 */
public native final void setVolume(int streamID,float leftVolume,float rightVolume);","/** 
 * Set stream volume. Sets the volume on the stream specified by the streamID. This is the value returned by the play() function. The value must be in the range of 0.0 to 1.0. If the stream does not exist, it will have no effect.
 * @param streamID a streamID returned by the play() function
 * @param leftVolume left volume value (range = 0.0 to 1.0)
 * @param rightVolume right volume value (range = 0.0 to 1.0)
 */
public native final void setVolume(int streamID,float leftVolume,float rightVolume);"
24292,"public native final void setRate(int streamID,float rate);","/** 
 * Change playback rate. The playback rate allows the application to vary the playback rate (pitch) of the sound. A value of 1.0 means playback at the original frequency. A value of 2.0 means playback twice as fast, and a value of 0.5 means playback at half speed. If the stream does not exist, it will have no effect.
 * @param streamID a streamID returned by the play() function
 * @param rate playback rate (1.0 = normal playback, range 0.5 to 2.0)
 */
public native final void setRate(int streamID,float rate);"
24293,"/** 
 * Pause a playback stream <p>Pause the stream specified by the streamID. This is the value returned by the play() function. If the stream is playing, it will be paused. If the stream is not playing (e.g. is stopped or was previously paused), calling this function will have no effect.</p>
 * @param streamID a streamID returned by the play() function
 */
public native final void pause(int streamID);","/** 
 * Pause a playback stream. Pause the stream specified by the streamID. This is the value returned by the play() function. If the stream is playing, it will be paused. If the stream is not playing (e.g. is stopped or was previously paused), calling this function will have no effect.
 * @param streamID a streamID returned by the play() function
 */
public native final void pause(int streamID);"
24294,"/** 
 * Load the sound from a FileDescriptor <p>This version is useful if you store multiple sounds in a single binary. The offset specifies the offset from the start of the file and the length specifies the length of the sound within the file.</p>
 * @param fd a FileDescriptor object
 * @param offset offset to the start of the sound
 * @param length length of the sound
 * @param priority the priority of the sound. Currently has no effect.
 * @return a sound ID. This value can be used to play or unload the sound.
 */
public int load(FileDescriptor fd,long offset,long length,int priority){
  return _load(fd,offset,length,priority);
}","/** 
 * Load the sound from a FileDescriptor. This version is useful if you store multiple sounds in a single binary. The offset specifies the offset from the start of the file and the length specifies the length of the sound within the file.
 * @param fd a FileDescriptor object
 * @param offset offset to the start of the sound
 * @param length length of the sound
 * @param priority the priority of the sound. Currently has no effect. Usea value of 1 for future compatibility.
 * @return a sound ID. This value can be used to play or unload the sound.
 */
public int load(FileDescriptor fd,long offset,long length,int priority){
  return _load(fd,offset,length,priority);
}"
24295,"/** 
 * Stop a playback stream <p>Stop the stream specified by the streamID. This is the value returned by the play() function. If the stream is playing, it will be stopped. It also releases any native resources associated with this stream. If the stream is not playing, it will have no effect.</p>
 * @param streamID a streamID returned by the play() function
 */
public native final void stop(int streamID);","/** 
 * Stop a playback stream. Stop the stream specified by the streamID. This is the value returned by the play() function. If the stream is playing, it will be stopped. It also releases any native resources associated with this stream. If the stream is not playing, it will have no effect.
 * @param streamID a streamID returned by the play() function
 */
public native final void stop(int streamID);"
24296,"/** 
 * Unload a sound from a sound ID <p>Unloads the sound specified by the soundID. This is the value returned by the load() function. Returns true if the sound is successfully unloaded, false if the sound was already unloaded.</p>
 * @param soundID a soundID returned by the load() function
 * @return true if just unloaded, false if previously unloaded
 */
public native final boolean unload(int soundID);","/** 
 * Unload a sound from a sound ID. Unloads the sound specified by the soundID. This is the value returned by the load() function. Returns true if the sound is successfully unloaded, false if the sound was already unloaded.
 * @param soundID a soundID returned by the load() function
 * @return true if just unloaded, false if previously unloaded
 */
public native final boolean unload(int soundID);"
24297,"/** 
 * Change stream priority <p>Change the priority of the stream specified by the streamID. This is the value returned by the play() function. Affects the order in which streams are re-used to play new sounds.
 * @param streamID a streamID returned by the play() function
 */
public native final void setPriority(int streamID,int priority);","/** 
 * Change stream priority. Change the priority of the stream specified by the streamID. This is the value returned by the play() function. Affects the order in which streams are re-used to play new sounds. If the stream does not exist, it will have no effect.
 * @param streamID a streamID returned by the play() function
 */
public native final void setPriority(int streamID,int priority);"
24298,"/** 
 * Play a sound from a sound ID <p>Play the sound specified by the soundID. This is the value  returned by the load() function. Returns a non-zero streamID if successful, zero if it fails. The streamID can be used to further control playback. Note that calling play() may cause another sound to stop playing if the maximum number of active streams is exceeded.</p>
 * @param soundID a soundID returned by the load() function
 * @return non-zero streamID if successful, zero if failed
 */
public native final int play(int soundID,float leftVolume,float rightVolume,int priority,int loop,float rate);","/** 
 * Play a sound from a sound ID. Play the sound specified by the soundID. This is the value  returned by the load() function. Returns a non-zero streamID if successful, zero if it fails. The streamID can be used to further control playback. Note that calling play() may cause another sound to stop playing if the maximum number of active streams is exceeded. A loop value of -1 means loop forever, a value of 0 means don't loop, other values indicate the number of repeats, e.g. a value of 1 plays the audio twice. The playback rate allows the application to vary the playback rate (pitch) of the sound. A value of 1.0 means play back at the original frequency. A value of 2.0 means play back twice as fast, and a value of 0.5 means playback at half speed.
 * @param soundID a soundID returned by the load() function
 * @param leftVolume left volume value (range = 0.0 to 1.0)
 * @param rightVolume right volume value (range = 0.0 to 1.0)
 * @param priority stream priority (0 = lowest priority)
 * @param loop loop mode (0 = no loop, -1 = loop forever)
 * @param rate playback rate (1.0 = normal playback, range 0.5 to 2.0)
 * @return non-zero streamID if successful, zero if failed
 */
public native final int play(int soundID,float leftVolume,float rightVolume,int priority,int loop,float rate);"
24299,"/** 
 * Resume a playback stream <p>Resume the stream specified by the streamID. This is the value returned by the play() function. If the stream is paused, this will resume playback. If the stream was not previously paused, calling this function will have no effect.</p>
 * @param streamID a streamID returned by the play() function
 */
public native final void resume(int streamID);","/** 
 * Resume a playback stream. Resume the stream specified by the streamID. This is the value returned by the play() function. If the stream is paused, this will resume playback. If the stream was not previously paused, calling this function will have no effect.
 * @param streamID a streamID returned by the play() function
 */
public native final void resume(int streamID);"
24300,public native final void release();,"/** 
 * Release the SoundPool resources. Release all memory and native resources used by the SoundPool object. The SoundPool can no longer be used and the reference should be set to null.
 */
public native final void release();"
24301,"/** 
 * Change stream priority <p>Change the priority of the stream specified by the streamID. This is the value returned by the play() function. Affects the order in which streams are re-used to play new sounds.
 * @param streamID a streamID returned by the play() function
 */
public native final void setLoop(int streamID,int loop);","/** 
 * Set loop mode. Change the loop mode. A loop value of -1 means loop forever, a value of 0 means don't loop, other values indicate the number of repeats, e.g. a value of 1 plays the audio twice. If the stream does not exist, it will have no effect.
 * @param streamID a streamID returned by the play() function
 * @param loop loop mode (0 = no loop, -1 = loop forever)
 */
public native final void setLoop(int streamID,int loop);"
24302,"/** 
 * Set stream volume <p>Sets the volume on the stream specified by the streamID. This is the value returned by the play() function. The value must be in the range of 0.0 to 1.0. If the stream does not exist, it will have no effect.</p>
 * @param streamID a streamID returned by the play() function
 * @param leftVolume left volume value (range = 0.0 to 1.0)
 * @param rightVolume right volume value (range = 0.0 to 1.0)
 */
public native final void setVolume(int streamID,float leftVolume,float rightVolume);","/** 
 * Set stream volume. Sets the volume on the stream specified by the streamID. This is the value returned by the play() function. The value must be in the range of 0.0 to 1.0. If the stream does not exist, it will have no effect.
 * @param streamID a streamID returned by the play() function
 * @param leftVolume left volume value (range = 0.0 to 1.0)
 * @param rightVolume right volume value (range = 0.0 to 1.0)
 */
public native final void setVolume(int streamID,float leftVolume,float rightVolume);"
24303,"public native final void setRate(int streamID,float rate);","/** 
 * Change playback rate. The playback rate allows the application to vary the playback rate (pitch) of the sound. A value of 1.0 means playback at the original frequency. A value of 2.0 means playback twice as fast, and a value of 0.5 means playback at half speed. If the stream does not exist, it will have no effect.
 * @param streamID a streamID returned by the play() function
 * @param rate playback rate (1.0 = normal playback, range 0.5 to 2.0)
 */
public native final void setRate(int streamID,float rate);"
24304,"/** 
 * Pause a playback stream <p>Pause the stream specified by the streamID. This is the value returned by the play() function. If the stream is playing, it will be paused. If the stream is not playing (e.g. is stopped or was previously paused), calling this function will have no effect.</p>
 * @param streamID a streamID returned by the play() function
 */
public native final void pause(int streamID);","/** 
 * Pause a playback stream. Pause the stream specified by the streamID. This is the value returned by the play() function. If the stream is playing, it will be paused. If the stream is not playing (e.g. is stopped or was previously paused), calling this function will have no effect.
 * @param streamID a streamID returned by the play() function
 */
public native final void pause(int streamID);"
24305,"/** 
 * Load the sound from a FileDescriptor <p>This version is useful if you store multiple sounds in a single binary. The offset specifies the offset from the start of the file and the length specifies the length of the sound within the file.</p>
 * @param fd a FileDescriptor object
 * @param offset offset to the start of the sound
 * @param length length of the sound
 * @param priority the priority of the sound. Currently has no effect.
 * @return a sound ID. This value can be used to play or unload the sound.
 */
public int load(FileDescriptor fd,long offset,long length,int priority){
  return _load(fd,offset,length,priority);
}","/** 
 * Load the sound from a FileDescriptor. This version is useful if you store multiple sounds in a single binary. The offset specifies the offset from the start of the file and the length specifies the length of the sound within the file.
 * @param fd a FileDescriptor object
 * @param offset offset to the start of the sound
 * @param length length of the sound
 * @param priority the priority of the sound. Currently has no effect. Usea value of 1 for future compatibility.
 * @return a sound ID. This value can be used to play or unload the sound.
 */
public int load(FileDescriptor fd,long offset,long length,int priority){
  return _load(fd,offset,length,priority);
}"
24306,"/** 
 * Stop a playback stream <p>Stop the stream specified by the streamID. This is the value returned by the play() function. If the stream is playing, it will be stopped. It also releases any native resources associated with this stream. If the stream is not playing, it will have no effect.</p>
 * @param streamID a streamID returned by the play() function
 */
public native final void stop(int streamID);","/** 
 * Stop a playback stream. Stop the stream specified by the streamID. This is the value returned by the play() function. If the stream is playing, it will be stopped. It also releases any native resources associated with this stream. If the stream is not playing, it will have no effect.
 * @param streamID a streamID returned by the play() function
 */
public native final void stop(int streamID);"
24307,"/** 
 * Unload a sound from a sound ID <p>Unloads the sound specified by the soundID. This is the value returned by the load() function. Returns true if the sound is successfully unloaded, false if the sound was already unloaded.</p>
 * @param soundID a soundID returned by the load() function
 * @return true if just unloaded, false if previously unloaded
 */
public native final boolean unload(int soundID);","/** 
 * Unload a sound from a sound ID. Unloads the sound specified by the soundID. This is the value returned by the load() function. Returns true if the sound is successfully unloaded, false if the sound was already unloaded.
 * @param soundID a soundID returned by the load() function
 * @return true if just unloaded, false if previously unloaded
 */
public native final boolean unload(int soundID);"
24308,"/** 
 * Change stream priority <p>Change the priority of the stream specified by the streamID. This is the value returned by the play() function. Affects the order in which streams are re-used to play new sounds.
 * @param streamID a streamID returned by the play() function
 */
public native final void setPriority(int streamID,int priority);","/** 
 * Change stream priority. Change the priority of the stream specified by the streamID. This is the value returned by the play() function. Affects the order in which streams are re-used to play new sounds. If the stream does not exist, it will have no effect.
 * @param streamID a streamID returned by the play() function
 */
public native final void setPriority(int streamID,int priority);"
24309,"@Override protected void finalize() throws Throwable {
  clear();
}","@Override protected void finalize() throws Throwable {
  release();
}"
24310,"public void dump(boolean timeout,String webkitData){
  if (mResultFile == null || mResultFile.length() == 0) {
    finished();
    return;
  }
  try {
    File parentDir=new File(mResultFile).getParentFile();
    if (!parentDir.exists()) {
      parentDir.mkdirs();
    }
    FileOutputStream os=new FileOutputStream(mResultFile);
    if (timeout) {
      Log.w(""String_Node_Str"",mResultFile);
      os.write(TIMEOUT_STR.getBytes());
      os.write('\n');
    }
    if (mDumpTitleChanges)     os.write(mTitleChanges.toString().getBytes());
    if (mDialogStrings != null)     os.write(mDialogStrings.toString().getBytes());
    mDialogStrings=null;
    os.write(webkitData.getBytes());
    os.flush();
    os.close();
  }
 catch (  IOException ex) {
    Log.e(LOGTAG,""String_Node_Str"" + mResultFile + ""String_Node_Str""+ ex.getMessage());
  }
  finished();
}","public void dump(boolean timeout,String webkitData){
  if (mResultFile == null || mResultFile.length() == 0) {
    finished();
    return;
  }
  try {
    File parentDir=new File(mResultFile).getParentFile();
    if (!parentDir.exists()) {
      parentDir.mkdirs();
    }
    FileOutputStream os=new FileOutputStream(mResultFile);
    if (timeout) {
      Log.w(""String_Node_Str"",mResultFile);
      os.write(TIMEOUT_STR.getBytes());
      os.write('\n');
    }
    if (mDumpTitleChanges)     os.write(mTitleChanges.toString().getBytes());
    if (mDialogStrings != null)     os.write(mDialogStrings.toString().getBytes());
    mDialogStrings=null;
    if (webkitData != null)     os.write(webkitData.getBytes());
    os.flush();
    os.close();
  }
 catch (  IOException ex) {
    Log.e(LOGTAG,""String_Node_Str"" + mResultFile + ""String_Node_Str""+ ex.getMessage());
  }
  finished();
}"
24311,"/** 
 * Set the data this intent is operating on.  This method automatically clears any type that was previously set by   {@link #setType}.
 * @param data The URI of the data this intent is now targeting.
 * @return Returns the same Intent object, for chaining multiple callsinto a single statement.
 * @see #getData
 * @see #setType
 * @see #setDataAndType
 */
public Intent setData(Uri data){
  mData=data;
  mType=null;
  return this;
}","/** 
 * Set the data this intent is operating on.  This method automatically clears any type that was previously set by   {@link #setType}. <p><em>Note: scheme and host name matching in the Android framework is case-sensitive, unlike the formal RFC.  As a result, you should always ensure that you write your Uri with these elements using lower case letters, and normalize any Uris you receive from outside of Android to ensure the scheme and host is lower case.</em></p>
 * @param data The URI of the data this intent is now targeting.
 * @return Returns the same Intent object, for chaining multiple callsinto a single statement.
 * @see #getData
 * @see #setType
 * @see #setDataAndType
 */
public Intent setData(Uri data){
  mData=data;
  mType=null;
  return this;
}"
24312,"/** 
 * (Usually optional) Set the data for the intent along with an explicit MIME data type.  This method should very rarely be used -- it allows you to override the MIME type that would ordinarily be inferred from the data with your own type given here.
 * @param data The URI of the data this intent is now targeting.
 * @param type The MIME type of the data being handled by this intent.
 * @return Returns the same Intent object, for chaining multiple callsinto a single statement.
 * @see #setData
 * @see #setType
 */
public Intent setDataAndType(Uri data,String type){
  mData=data;
  mType=type;
  return this;
}","/** 
 * (Usually optional) Set the data for the intent along with an explicit MIME data type.  This method should very rarely be used -- it allows you to override the MIME type that would ordinarily be inferred from the data with your own type given here. <p><em>Note: MIME type, Uri scheme, and host name matching in the Android framework is case-sensitive, unlike the formal RFC definitions. As a result, you should always write these elements with lower case letters, and normalize any MIME types or Uris you receive from outside of Android to ensure these elements are lower case before supplying them here.</em></p>
 * @param data The URI of the data this intent is now targeting.
 * @param type The MIME type of the data being handled by this intent.
 * @return Returns the same Intent object, for chaining multiple callsinto a single statement.
 * @see #setData
 * @see #setType
 */
public Intent setDataAndType(Uri data,String type){
  mData=data;
  mType=type;
  return this;
}"
24313,"/** 
 * Set an explicit MIME data type.  This is used to create intents that only specify a type and not data, for example to indicate the type of data to return.  This method automatically clears any data that was previously set by   {@link #setData}.
 * @param type The MIME type of the data being handled by this intent.
 * @return Returns the same Intent object, for chaining multiple callsinto a single statement.
 * @see #getType
 * @see #setData
 * @see #setDataAndType
 */
public Intent setType(String type){
  mData=null;
  mType=type;
  return this;
}","/** 
 * Set an explicit MIME data type.  This is used to create intents that only specify a type and not data, for example to indicate the type of data to return.  This method automatically clears any data that was previously set by   {@link #setData}. <p><em>Note: MIME type matching in the Android framework is case-sensitive, unlike formal RFC MIME types.  As a result, you should always write your MIME types with lower case letters, and any MIME types you receive from outside of Android should be converted to lower case before supplying them here.</em></p>
 * @param type The MIME type of the data being handled by this intent.
 * @return Returns the same Intent object, for chaining multiple callsinto a single statement.
 * @see #getType
 * @see #setData
 * @see #setDataAndType
 */
public Intent setType(String type){
  mData=null;
  mType=type;
  return this;
}"
24314,"/** 
 * Add a new Intent data authority to match against.  The filter must include one or more schemes (via   {@link #addDataScheme}) for the authority to be considered.  If any authorities are included in the filter, then an Intent's data must match one of them.  If no authorities are included, then only the scheme must match.
 * @param host The host part of the authority to match.  May start with asingle '*' to wildcard the front of the host name.
 * @param port Optional port part of the authority to match.  If null, anyport is allowed.
 * @see #matchData
 * @see #addDataScheme
 */
public final void addDataAuthority(String host,String port){
  if (mDataAuthorities == null)   mDataAuthorities=new ArrayList<AuthorityEntry>();
  if (port != null)   port=port.intern();
  mDataAuthorities.add(new AuthorityEntry(host.intern(),port));
}","/** 
 * Add a new Intent data authority to match against.  The filter must include one or more schemes (via   {@link #addDataScheme}) for the authority to be considered.  If any authorities are included in the filter, then an Intent's data must match one of them.  If no authorities are included, then only the scheme must match. <p><em>Note: host name in the Android framework is case-sensitive, unlike formal RFC host names.  As a result, you should always write your host names with lower case letters, and any host names you receive from outside of Android should be converted to lower case before supplying them here.</em></p>
 * @param host The host part of the authority to match.  May start with asingle '*' to wildcard the front of the host name.
 * @param port Optional port part of the authority to match.  If null, anyport is allowed.
 * @see #matchData
 * @see #addDataScheme
 */
public final void addDataAuthority(String host,String port){
  if (mDataAuthorities == null)   mDataAuthorities=new ArrayList<AuthorityEntry>();
  if (port != null)   port=port.intern();
  mDataAuthorities.add(new AuthorityEntry(host.intern(),port));
}"
24315,"/** 
 * Match this filter against an Intent's data (type, scheme and path). If the filter does not specify any types and does not specify any schemes/paths, the match will only succeed if the intent does not also specify a type or data. <p>Note that to match against an authority, you must also specify a base scheme the authority is in.  To match against a data path, both a scheme and authority must be specified.  If the filter does not specify any types or schemes that it matches against, it is considered to be empty (any authority or data path given is ignored, as if it were empty as well).
 * @param type The desired data type to look for, as returned byIntent.resolveType().
 * @param scheme The desired data scheme to look for, as returned byIntent.getScheme().
 * @param data The full data string to match against, as supplied inIntent.data.
 * @return Returns either a valid match constant (a combination of{@link #MATCH_CATEGORY_MASK} and {@link #MATCH_ADJUSTMENT_MASK}), or one of the error codes   {@link #NO_MATCH_TYPE} if the type didn't matchor  {@link #NO_MATCH_DATA} if the scheme/path didn't match.
 * @see #match
 */
public final int matchData(String type,String scheme,Uri data){
  final ArrayList<String> types=mDataTypes;
  final ArrayList<String> schemes=mDataSchemes;
  final ArrayList<AuthorityEntry> authorities=mDataAuthorities;
  final ArrayList<PatternMatcher> paths=mDataPaths;
  int match=MATCH_CATEGORY_EMPTY;
  if (types == null && schemes == null) {
    return ((type == null && data == null) ? (MATCH_CATEGORY_EMPTY + MATCH_ADJUSTMENT_NORMAL) : NO_MATCH_DATA);
  }
  if (schemes != null) {
    if (schemes.contains(scheme != null ? scheme : ""String_Node_Str"")) {
      match=MATCH_CATEGORY_SCHEME;
    }
 else {
      return NO_MATCH_DATA;
    }
    if (authorities != null) {
      int authMatch=matchDataAuthority(data);
      if (authMatch >= 0) {
        if (paths == null) {
          match=authMatch;
        }
 else         if (hasDataPath(data.getPath())) {
          match=MATCH_CATEGORY_PATH;
        }
 else {
          return NO_MATCH_DATA;
        }
      }
 else {
        return NO_MATCH_DATA;
      }
    }
  }
 else {
    if (scheme != null && !""String_Node_Str"".equals(scheme) && !""String_Node_Str"".equals(scheme) && !""String_Node_Str"".equals(scheme)) {
      return NO_MATCH_DATA;
    }
  }
  if (types != null) {
    if (findMimeType(type)) {
      match=MATCH_CATEGORY_TYPE;
    }
 else {
      return NO_MATCH_TYPE;
    }
  }
 else {
    if (type != null) {
      return NO_MATCH_TYPE;
    }
  }
  return match + MATCH_ADJUSTMENT_NORMAL;
}","/** 
 * Match this filter against an Intent's data (type, scheme and path). If the filter does not specify any types and does not specify any schemes/paths, the match will only succeed if the intent does not also specify a type or data. <p>Be aware that to match against an authority, you must also specify a base scheme the authority is in.  To match against a data path, both a scheme and authority must be specified.  If the filter does not specify any types or schemes that it matches against, it is considered to be empty (any authority or data path given is ignored, as if it were empty as well). <p><em>Note: MIME type, Uri scheme, and host name matching in the Android framework is case-sensitive, unlike the formal RFC definitions. As a result, you should always write these elements with lower case letters, and normalize any MIME types or Uris you receive from outside of Android to ensure these elements are lower case before supplying them here.</em></p>
 * @param type The desired data type to look for, as returned byIntent.resolveType().
 * @param scheme The desired data scheme to look for, as returned byIntent.getScheme().
 * @param data The full data string to match against, as supplied inIntent.data.
 * @return Returns either a valid match constant (a combination of{@link #MATCH_CATEGORY_MASK} and {@link #MATCH_ADJUSTMENT_MASK}), or one of the error codes   {@link #NO_MATCH_TYPE} if the type didn't matchor  {@link #NO_MATCH_DATA} if the scheme/path didn't match.
 * @see #match
 */
public final int matchData(String type,String scheme,Uri data){
  final ArrayList<String> types=mDataTypes;
  final ArrayList<String> schemes=mDataSchemes;
  final ArrayList<AuthorityEntry> authorities=mDataAuthorities;
  final ArrayList<PatternMatcher> paths=mDataPaths;
  int match=MATCH_CATEGORY_EMPTY;
  if (types == null && schemes == null) {
    return ((type == null && data == null) ? (MATCH_CATEGORY_EMPTY + MATCH_ADJUSTMENT_NORMAL) : NO_MATCH_DATA);
  }
  if (schemes != null) {
    if (schemes.contains(scheme != null ? scheme : ""String_Node_Str"")) {
      match=MATCH_CATEGORY_SCHEME;
    }
 else {
      return NO_MATCH_DATA;
    }
    if (authorities != null) {
      int authMatch=matchDataAuthority(data);
      if (authMatch >= 0) {
        if (paths == null) {
          match=authMatch;
        }
 else         if (hasDataPath(data.getPath())) {
          match=MATCH_CATEGORY_PATH;
        }
 else {
          return NO_MATCH_DATA;
        }
      }
 else {
        return NO_MATCH_DATA;
      }
    }
  }
 else {
    if (scheme != null && !""String_Node_Str"".equals(scheme) && !""String_Node_Str"".equals(scheme) && !""String_Node_Str"".equals(scheme)) {
      return NO_MATCH_DATA;
    }
  }
  if (types != null) {
    if (findMimeType(type)) {
      match=MATCH_CATEGORY_TYPE;
    }
 else {
      return NO_MATCH_TYPE;
    }
  }
 else {
    if (type != null) {
      return NO_MATCH_TYPE;
    }
  }
  return match + MATCH_ADJUSTMENT_NORMAL;
}"
24316,"/** 
 * Add a new Intent data scheme to match against.  If any schemes are included in the filter, then an Intent's data must be <em>either</em> one of these schemes <em>or</em> a matching data type.  If no schemes are included, then an Intent will match only if it includes no data.
 * @param scheme Name of the scheme to match, i.e. ""http"".
 * @see #matchData
 */
public final void addDataScheme(String scheme){
  if (mDataSchemes == null)   mDataSchemes=new ArrayList<String>();
  if (!mDataSchemes.contains(scheme)) {
    mDataSchemes.add(scheme.intern());
  }
}","/** 
 * Add a new Intent data scheme to match against.  If any schemes are included in the filter, then an Intent's data must be <em>either</em> one of these schemes <em>or</em> a matching data type.  If no schemes are included, then an Intent will match only if it includes no data. <p><em>Note: scheme matching in the Android framework is case-sensitive, unlike formal RFC schemes.  As a result, you should always write your schemes with lower case letters, and any schemes you receive from outside of Android should be converted to lower case before supplying them here.</em></p>
 * @param scheme Name of the scheme to match, i.e. ""http"".
 * @see #matchData
 */
public final void addDataScheme(String scheme){
  if (mDataSchemes == null)   mDataSchemes=new ArrayList<String>();
  if (!mDataSchemes.contains(scheme)) {
    mDataSchemes.add(scheme.intern());
  }
}"
24317,"/** 
 * Add a new Intent data type to match against.  If any types are included in the filter, then an Intent's data must be <em>either</em> one of these types <em>or</em> a matching scheme.  If no data types are included, then an Intent will only match if it specifies no data. <p>Throws   {@link MalformedMimeTypeException} if the given MIME type isnot syntactically correct.
 * @param type Name of the data type to match, i.e. ""vnd.android.cursor.dir/person"".
 * @see #matchData
 */
public final void addDataType(String type) throws MalformedMimeTypeException {
  final int slashpos=type.indexOf('/');
  final int typelen=type.length();
  if (slashpos > 0 && typelen >= slashpos + 2) {
    if (mDataTypes == null)     mDataTypes=new ArrayList<String>();
    if (typelen == slashpos + 2 && type.charAt(slashpos + 1) == '*') {
      String str=type.substring(0,slashpos);
      if (!mDataTypes.contains(str)) {
        mDataTypes.add(str.intern());
      }
      mHasPartialTypes=true;
    }
 else {
      if (!mDataTypes.contains(type)) {
        mDataTypes.add(type.intern());
      }
    }
    return;
  }
  throw new MalformedMimeTypeException(type);
}","/** 
 * Add a new Intent data type to match against.  If any types are included in the filter, then an Intent's data must be <em>either</em> one of these types <em>or</em> a matching scheme.  If no data types are included, then an Intent will only match if it specifies no data. <p><em>Note: MIME type matching in the Android framework is case-sensitive, unlike formal RFC MIME types.  As a result, you should always write your MIME types with lower case letters, and any MIME types you receive from outside of Android should be converted to lower case before supplying them here.</em></p> <p>Throws   {@link MalformedMimeTypeException} if the given MIME type isnot syntactically correct.
 * @param type Name of the data type to match, i.e. ""vnd.android.cursor.dir/person"".
 * @see #matchData
 */
public final void addDataType(String type) throws MalformedMimeTypeException {
  final int slashpos=type.indexOf('/');
  final int typelen=type.length();
  if (slashpos > 0 && typelen >= slashpos + 2) {
    if (mDataTypes == null)     mDataTypes=new ArrayList<String>();
    if (typelen == slashpos + 2 && type.charAt(slashpos + 1) == '*') {
      String str=type.substring(0,slashpos);
      if (!mDataTypes.contains(str)) {
        mDataTypes.add(str.intern());
      }
      mHasPartialTypes=true;
    }
 else {
      if (!mDataTypes.contains(type)) {
        mDataTypes.add(type.intern());
      }
    }
    return;
  }
  throw new MalformedMimeTypeException(type);
}"
24318,"/** 
 * Set the data this intent is operating on.  This method automatically clears any type that was previously set by   {@link #setType}.
 * @param data The URI of the data this intent is now targeting.
 * @return Returns the same Intent object, for chaining multiple callsinto a single statement.
 * @see #getData
 * @see #setType
 * @see #setDataAndType
 */
public Intent setData(Uri data){
  mData=data;
  mType=null;
  return this;
}","/** 
 * Set the data this intent is operating on.  This method automatically clears any type that was previously set by   {@link #setType}. <p><em>Note: scheme and host name matching in the Android framework is case-sensitive, unlike the formal RFC.  As a result, you should always ensure that you write your Uri with these elements using lower case letters, and normalize any Uris you receive from outside of Android to ensure the scheme and host is lower case.</em></p>
 * @param data The URI of the data this intent is now targeting.
 * @return Returns the same Intent object, for chaining multiple callsinto a single statement.
 * @see #getData
 * @see #setType
 * @see #setDataAndType
 */
public Intent setData(Uri data){
  mData=data;
  mType=null;
  return this;
}"
24319,"/** 
 * (Usually optional) Set the data for the intent along with an explicit MIME data type.  This method should very rarely be used -- it allows you to override the MIME type that would ordinarily be inferred from the data with your own type given here.
 * @param data The URI of the data this intent is now targeting.
 * @param type The MIME type of the data being handled by this intent.
 * @return Returns the same Intent object, for chaining multiple callsinto a single statement.
 * @see #setData
 * @see #setType
 */
public Intent setDataAndType(Uri data,String type){
  mData=data;
  mType=type;
  return this;
}","/** 
 * (Usually optional) Set the data for the intent along with an explicit MIME data type.  This method should very rarely be used -- it allows you to override the MIME type that would ordinarily be inferred from the data with your own type given here. <p><em>Note: MIME type, Uri scheme, and host name matching in the Android framework is case-sensitive, unlike the formal RFC definitions. As a result, you should always write these elements with lower case letters, and normalize any MIME types or Uris you receive from outside of Android to ensure these elements are lower case before supplying them here.</em></p>
 * @param data The URI of the data this intent is now targeting.
 * @param type The MIME type of the data being handled by this intent.
 * @return Returns the same Intent object, for chaining multiple callsinto a single statement.
 * @see #setData
 * @see #setType
 */
public Intent setDataAndType(Uri data,String type){
  mData=data;
  mType=type;
  return this;
}"
24320,"/** 
 * Set an explicit MIME data type.  This is used to create intents that only specify a type and not data, for example to indicate the type of data to return.  This method automatically clears any data that was previously set by   {@link #setData}.
 * @param type The MIME type of the data being handled by this intent.
 * @return Returns the same Intent object, for chaining multiple callsinto a single statement.
 * @see #getType
 * @see #setData
 * @see #setDataAndType
 */
public Intent setType(String type){
  mData=null;
  mType=type;
  return this;
}","/** 
 * Set an explicit MIME data type.  This is used to create intents that only specify a type and not data, for example to indicate the type of data to return.  This method automatically clears any data that was previously set by   {@link #setData}. <p><em>Note: MIME type matching in the Android framework is case-sensitive, unlike formal RFC MIME types.  As a result, you should always write your MIME types with lower case letters, and any MIME types you receive from outside of Android should be converted to lower case before supplying them here.</em></p>
 * @param type The MIME type of the data being handled by this intent.
 * @return Returns the same Intent object, for chaining multiple callsinto a single statement.
 * @see #getType
 * @see #setData
 * @see #setDataAndType
 */
public Intent setType(String type){
  mData=null;
  mType=type;
  return this;
}"
24321,"/** 
 * Add a new Intent data authority to match against.  The filter must include one or more schemes (via   {@link #addDataScheme}) for the authority to be considered.  If any authorities are included in the filter, then an Intent's data must match one of them.  If no authorities are included, then only the scheme must match.
 * @param host The host part of the authority to match.  May start with asingle '*' to wildcard the front of the host name.
 * @param port Optional port part of the authority to match.  If null, anyport is allowed.
 * @see #matchData
 * @see #addDataScheme
 */
public final void addDataAuthority(String host,String port){
  if (mDataAuthorities == null)   mDataAuthorities=new ArrayList<AuthorityEntry>();
  if (port != null)   port=port.intern();
  mDataAuthorities.add(new AuthorityEntry(host.intern(),port));
}","/** 
 * Add a new Intent data authority to match against.  The filter must include one or more schemes (via   {@link #addDataScheme}) for the authority to be considered.  If any authorities are included in the filter, then an Intent's data must match one of them.  If no authorities are included, then only the scheme must match. <p><em>Note: host name in the Android framework is case-sensitive, unlike formal RFC host names.  As a result, you should always write your host names with lower case letters, and any host names you receive from outside of Android should be converted to lower case before supplying them here.</em></p>
 * @param host The host part of the authority to match.  May start with asingle '*' to wildcard the front of the host name.
 * @param port Optional port part of the authority to match.  If null, anyport is allowed.
 * @see #matchData
 * @see #addDataScheme
 */
public final void addDataAuthority(String host,String port){
  if (mDataAuthorities == null)   mDataAuthorities=new ArrayList<AuthorityEntry>();
  if (port != null)   port=port.intern();
  mDataAuthorities.add(new AuthorityEntry(host.intern(),port));
}"
24322,"/** 
 * Match this filter against an Intent's data (type, scheme and path). If the filter does not specify any types and does not specify any schemes/paths, the match will only succeed if the intent does not also specify a type or data. <p>Note that to match against an authority, you must also specify a base scheme the authority is in.  To match against a data path, both a scheme and authority must be specified.  If the filter does not specify any types or schemes that it matches against, it is considered to be empty (any authority or data path given is ignored, as if it were empty as well).
 * @param type The desired data type to look for, as returned byIntent.resolveType().
 * @param scheme The desired data scheme to look for, as returned byIntent.getScheme().
 * @param data The full data string to match against, as supplied inIntent.data.
 * @return Returns either a valid match constant (a combination of{@link #MATCH_CATEGORY_MASK} and {@link #MATCH_ADJUSTMENT_MASK}), or one of the error codes   {@link #NO_MATCH_TYPE} if the type didn't matchor  {@link #NO_MATCH_DATA} if the scheme/path didn't match.
 * @see #match
 */
public final int matchData(String type,String scheme,Uri data){
  final ArrayList<String> types=mDataTypes;
  final ArrayList<String> schemes=mDataSchemes;
  final ArrayList<AuthorityEntry> authorities=mDataAuthorities;
  final ArrayList<PatternMatcher> paths=mDataPaths;
  int match=MATCH_CATEGORY_EMPTY;
  if (types == null && schemes == null) {
    return ((type == null && data == null) ? (MATCH_CATEGORY_EMPTY + MATCH_ADJUSTMENT_NORMAL) : NO_MATCH_DATA);
  }
  if (schemes != null) {
    if (schemes.contains(scheme != null ? scheme : ""String_Node_Str"")) {
      match=MATCH_CATEGORY_SCHEME;
    }
 else {
      return NO_MATCH_DATA;
    }
    if (authorities != null) {
      int authMatch=matchDataAuthority(data);
      if (authMatch >= 0) {
        if (paths == null) {
          match=authMatch;
        }
 else         if (hasDataPath(data.getPath())) {
          match=MATCH_CATEGORY_PATH;
        }
 else {
          return NO_MATCH_DATA;
        }
      }
 else {
        return NO_MATCH_DATA;
      }
    }
  }
 else {
    if (scheme != null && !""String_Node_Str"".equals(scheme) && !""String_Node_Str"".equals(scheme) && !""String_Node_Str"".equals(scheme)) {
      return NO_MATCH_DATA;
    }
  }
  if (types != null) {
    if (findMimeType(type)) {
      match=MATCH_CATEGORY_TYPE;
    }
 else {
      return NO_MATCH_TYPE;
    }
  }
 else {
    if (type != null) {
      return NO_MATCH_TYPE;
    }
  }
  return match + MATCH_ADJUSTMENT_NORMAL;
}","/** 
 * Match this filter against an Intent's data (type, scheme and path). If the filter does not specify any types and does not specify any schemes/paths, the match will only succeed if the intent does not also specify a type or data. <p>Be aware that to match against an authority, you must also specify a base scheme the authority is in.  To match against a data path, both a scheme and authority must be specified.  If the filter does not specify any types or schemes that it matches against, it is considered to be empty (any authority or data path given is ignored, as if it were empty as well). <p><em>Note: MIME type, Uri scheme, and host name matching in the Android framework is case-sensitive, unlike the formal RFC definitions. As a result, you should always write these elements with lower case letters, and normalize any MIME types or Uris you receive from outside of Android to ensure these elements are lower case before supplying them here.</em></p>
 * @param type The desired data type to look for, as returned byIntent.resolveType().
 * @param scheme The desired data scheme to look for, as returned byIntent.getScheme().
 * @param data The full data string to match against, as supplied inIntent.data.
 * @return Returns either a valid match constant (a combination of{@link #MATCH_CATEGORY_MASK} and {@link #MATCH_ADJUSTMENT_MASK}), or one of the error codes   {@link #NO_MATCH_TYPE} if the type didn't matchor  {@link #NO_MATCH_DATA} if the scheme/path didn't match.
 * @see #match
 */
public final int matchData(String type,String scheme,Uri data){
  final ArrayList<String> types=mDataTypes;
  final ArrayList<String> schemes=mDataSchemes;
  final ArrayList<AuthorityEntry> authorities=mDataAuthorities;
  final ArrayList<PatternMatcher> paths=mDataPaths;
  int match=MATCH_CATEGORY_EMPTY;
  if (types == null && schemes == null) {
    return ((type == null && data == null) ? (MATCH_CATEGORY_EMPTY + MATCH_ADJUSTMENT_NORMAL) : NO_MATCH_DATA);
  }
  if (schemes != null) {
    if (schemes.contains(scheme != null ? scheme : ""String_Node_Str"")) {
      match=MATCH_CATEGORY_SCHEME;
    }
 else {
      return NO_MATCH_DATA;
    }
    if (authorities != null) {
      int authMatch=matchDataAuthority(data);
      if (authMatch >= 0) {
        if (paths == null) {
          match=authMatch;
        }
 else         if (hasDataPath(data.getPath())) {
          match=MATCH_CATEGORY_PATH;
        }
 else {
          return NO_MATCH_DATA;
        }
      }
 else {
        return NO_MATCH_DATA;
      }
    }
  }
 else {
    if (scheme != null && !""String_Node_Str"".equals(scheme) && !""String_Node_Str"".equals(scheme) && !""String_Node_Str"".equals(scheme)) {
      return NO_MATCH_DATA;
    }
  }
  if (types != null) {
    if (findMimeType(type)) {
      match=MATCH_CATEGORY_TYPE;
    }
 else {
      return NO_MATCH_TYPE;
    }
  }
 else {
    if (type != null) {
      return NO_MATCH_TYPE;
    }
  }
  return match + MATCH_ADJUSTMENT_NORMAL;
}"
24323,"/** 
 * Add a new Intent data scheme to match against.  If any schemes are included in the filter, then an Intent's data must be <em>either</em> one of these schemes <em>or</em> a matching data type.  If no schemes are included, then an Intent will match only if it includes no data.
 * @param scheme Name of the scheme to match, i.e. ""http"".
 * @see #matchData
 */
public final void addDataScheme(String scheme){
  if (mDataSchemes == null)   mDataSchemes=new ArrayList<String>();
  if (!mDataSchemes.contains(scheme)) {
    mDataSchemes.add(scheme.intern());
  }
}","/** 
 * Add a new Intent data scheme to match against.  If any schemes are included in the filter, then an Intent's data must be <em>either</em> one of these schemes <em>or</em> a matching data type.  If no schemes are included, then an Intent will match only if it includes no data. <p><em>Note: scheme matching in the Android framework is case-sensitive, unlike formal RFC schemes.  As a result, you should always write your schemes with lower case letters, and any schemes you receive from outside of Android should be converted to lower case before supplying them here.</em></p>
 * @param scheme Name of the scheme to match, i.e. ""http"".
 * @see #matchData
 */
public final void addDataScheme(String scheme){
  if (mDataSchemes == null)   mDataSchemes=new ArrayList<String>();
  if (!mDataSchemes.contains(scheme)) {
    mDataSchemes.add(scheme.intern());
  }
}"
24324,"/** 
 * Add a new Intent data type to match against.  If any types are included in the filter, then an Intent's data must be <em>either</em> one of these types <em>or</em> a matching scheme.  If no data types are included, then an Intent will only match if it specifies no data. <p>Throws   {@link MalformedMimeTypeException} if the given MIME type isnot syntactically correct.
 * @param type Name of the data type to match, i.e. ""vnd.android.cursor.dir/person"".
 * @see #matchData
 */
public final void addDataType(String type) throws MalformedMimeTypeException {
  final int slashpos=type.indexOf('/');
  final int typelen=type.length();
  if (slashpos > 0 && typelen >= slashpos + 2) {
    if (mDataTypes == null)     mDataTypes=new ArrayList<String>();
    if (typelen == slashpos + 2 && type.charAt(slashpos + 1) == '*') {
      String str=type.substring(0,slashpos);
      if (!mDataTypes.contains(str)) {
        mDataTypes.add(str.intern());
      }
      mHasPartialTypes=true;
    }
 else {
      if (!mDataTypes.contains(type)) {
        mDataTypes.add(type.intern());
      }
    }
    return;
  }
  throw new MalformedMimeTypeException(type);
}","/** 
 * Add a new Intent data type to match against.  If any types are included in the filter, then an Intent's data must be <em>either</em> one of these types <em>or</em> a matching scheme.  If no data types are included, then an Intent will only match if it specifies no data. <p><em>Note: MIME type matching in the Android framework is case-sensitive, unlike formal RFC MIME types.  As a result, you should always write your MIME types with lower case letters, and any MIME types you receive from outside of Android should be converted to lower case before supplying them here.</em></p> <p>Throws   {@link MalformedMimeTypeException} if the given MIME type isnot syntactically correct.
 * @param type Name of the data type to match, i.e. ""vnd.android.cursor.dir/person"".
 * @see #matchData
 */
public final void addDataType(String type) throws MalformedMimeTypeException {
  final int slashpos=type.indexOf('/');
  final int typelen=type.length();
  if (slashpos > 0 && typelen >= slashpos + 2) {
    if (mDataTypes == null)     mDataTypes=new ArrayList<String>();
    if (typelen == slashpos + 2 && type.charAt(slashpos + 1) == '*') {
      String str=type.substring(0,slashpos);
      if (!mDataTypes.contains(str)) {
        mDataTypes.add(str.intern());
      }
      mHasPartialTypes=true;
    }
 else {
      if (!mDataTypes.contains(type)) {
        mDataTypes.add(type.intern());
      }
    }
    return;
  }
  throw new MalformedMimeTypeException(type);
}"
24325,"/** 
 * Set the data this intent is operating on.  This method automatically clears any type that was previously set by   {@link #setType}.
 * @param data The URI of the data this intent is now targeting.
 * @return Returns the same Intent object, for chaining multiple callsinto a single statement.
 * @see #getData
 * @see #setType
 * @see #setDataAndType
 */
public Intent setData(Uri data){
  mData=data;
  mType=null;
  return this;
}","/** 
 * Set the data this intent is operating on.  This method automatically clears any type that was previously set by   {@link #setType}. <p><em>Note: scheme and host name matching in the Android framework is case-sensitive, unlike the formal RFC.  As a result, you should always ensure that you write your Uri with these elements using lower case letters, and normalize any Uris you receive from outside of Android to ensure the scheme and host is lower case.</em></p>
 * @param data The URI of the data this intent is now targeting.
 * @return Returns the same Intent object, for chaining multiple callsinto a single statement.
 * @see #getData
 * @see #setType
 * @see #setDataAndType
 */
public Intent setData(Uri data){
  mData=data;
  mType=null;
  return this;
}"
24326,"/** 
 * (Usually optional) Set the data for the intent along with an explicit MIME data type.  This method should very rarely be used -- it allows you to override the MIME type that would ordinarily be inferred from the data with your own type given here.
 * @param data The URI of the data this intent is now targeting.
 * @param type The MIME type of the data being handled by this intent.
 * @return Returns the same Intent object, for chaining multiple callsinto a single statement.
 * @see #setData
 * @see #setType
 */
public Intent setDataAndType(Uri data,String type){
  mData=data;
  mType=type;
  return this;
}","/** 
 * (Usually optional) Set the data for the intent along with an explicit MIME data type.  This method should very rarely be used -- it allows you to override the MIME type that would ordinarily be inferred from the data with your own type given here. <p><em>Note: MIME type, Uri scheme, and host name matching in the Android framework is case-sensitive, unlike the formal RFC definitions. As a result, you should always write these elements with lower case letters, and normalize any MIME types or Uris you receive from outside of Android to ensure these elements are lower case before supplying them here.</em></p>
 * @param data The URI of the data this intent is now targeting.
 * @param type The MIME type of the data being handled by this intent.
 * @return Returns the same Intent object, for chaining multiple callsinto a single statement.
 * @see #setData
 * @see #setType
 */
public Intent setDataAndType(Uri data,String type){
  mData=data;
  mType=type;
  return this;
}"
24327,"/** 
 * Set an explicit MIME data type.  This is used to create intents that only specify a type and not data, for example to indicate the type of data to return.  This method automatically clears any data that was previously set by   {@link #setData}.
 * @param type The MIME type of the data being handled by this intent.
 * @return Returns the same Intent object, for chaining multiple callsinto a single statement.
 * @see #getType
 * @see #setData
 * @see #setDataAndType
 */
public Intent setType(String type){
  mData=null;
  mType=type;
  return this;
}","/** 
 * Set an explicit MIME data type.  This is used to create intents that only specify a type and not data, for example to indicate the type of data to return.  This method automatically clears any data that was previously set by   {@link #setData}. <p><em>Note: MIME type matching in the Android framework is case-sensitive, unlike formal RFC MIME types.  As a result, you should always write your MIME types with lower case letters, and any MIME types you receive from outside of Android should be converted to lower case before supplying them here.</em></p>
 * @param type The MIME type of the data being handled by this intent.
 * @return Returns the same Intent object, for chaining multiple callsinto a single statement.
 * @see #getType
 * @see #setData
 * @see #setDataAndType
 */
public Intent setType(String type){
  mData=null;
  mType=type;
  return this;
}"
24328,"/** 
 * Add a new Intent data authority to match against.  The filter must include one or more schemes (via   {@link #addDataScheme}) for the authority to be considered.  If any authorities are included in the filter, then an Intent's data must match one of them.  If no authorities are included, then only the scheme must match.
 * @param host The host part of the authority to match.  May start with asingle '*' to wildcard the front of the host name.
 * @param port Optional port part of the authority to match.  If null, anyport is allowed.
 * @see #matchData
 * @see #addDataScheme
 */
public final void addDataAuthority(String host,String port){
  if (mDataAuthorities == null)   mDataAuthorities=new ArrayList<AuthorityEntry>();
  if (port != null)   port=port.intern();
  mDataAuthorities.add(new AuthorityEntry(host.intern(),port));
}","/** 
 * Add a new Intent data authority to match against.  The filter must include one or more schemes (via   {@link #addDataScheme}) for the authority to be considered.  If any authorities are included in the filter, then an Intent's data must match one of them.  If no authorities are included, then only the scheme must match. <p><em>Note: host name in the Android framework is case-sensitive, unlike formal RFC host names.  As a result, you should always write your host names with lower case letters, and any host names you receive from outside of Android should be converted to lower case before supplying them here.</em></p>
 * @param host The host part of the authority to match.  May start with asingle '*' to wildcard the front of the host name.
 * @param port Optional port part of the authority to match.  If null, anyport is allowed.
 * @see #matchData
 * @see #addDataScheme
 */
public final void addDataAuthority(String host,String port){
  if (mDataAuthorities == null)   mDataAuthorities=new ArrayList<AuthorityEntry>();
  if (port != null)   port=port.intern();
  mDataAuthorities.add(new AuthorityEntry(host.intern(),port));
}"
24329,"/** 
 * Match this filter against an Intent's data (type, scheme and path). If the filter does not specify any types and does not specify any schemes/paths, the match will only succeed if the intent does not also specify a type or data. <p>Note that to match against an authority, you must also specify a base scheme the authority is in.  To match against a data path, both a scheme and authority must be specified.  If the filter does not specify any types or schemes that it matches against, it is considered to be empty (any authority or data path given is ignored, as if it were empty as well).
 * @param type The desired data type to look for, as returned byIntent.resolveType().
 * @param scheme The desired data scheme to look for, as returned byIntent.getScheme().
 * @param data The full data string to match against, as supplied inIntent.data.
 * @return Returns either a valid match constant (a combination of{@link #MATCH_CATEGORY_MASK} and {@link #MATCH_ADJUSTMENT_MASK}), or one of the error codes   {@link #NO_MATCH_TYPE} if the type didn't matchor  {@link #NO_MATCH_DATA} if the scheme/path didn't match.
 * @see #match
 */
public final int matchData(String type,String scheme,Uri data){
  final ArrayList<String> types=mDataTypes;
  final ArrayList<String> schemes=mDataSchemes;
  final ArrayList<AuthorityEntry> authorities=mDataAuthorities;
  final ArrayList<PatternMatcher> paths=mDataPaths;
  int match=MATCH_CATEGORY_EMPTY;
  if (types == null && schemes == null) {
    return ((type == null && data == null) ? (MATCH_CATEGORY_EMPTY + MATCH_ADJUSTMENT_NORMAL) : NO_MATCH_DATA);
  }
  if (schemes != null) {
    if (schemes.contains(scheme != null ? scheme : ""String_Node_Str"")) {
      match=MATCH_CATEGORY_SCHEME;
    }
 else {
      return NO_MATCH_DATA;
    }
    if (authorities != null) {
      int authMatch=matchDataAuthority(data);
      if (authMatch >= 0) {
        if (paths == null) {
          match=authMatch;
        }
 else         if (hasDataPath(data.getPath())) {
          match=MATCH_CATEGORY_PATH;
        }
 else {
          return NO_MATCH_DATA;
        }
      }
 else {
        return NO_MATCH_DATA;
      }
    }
  }
 else {
    if (scheme != null && !""String_Node_Str"".equals(scheme) && !""String_Node_Str"".equals(scheme) && !""String_Node_Str"".equals(scheme)) {
      return NO_MATCH_DATA;
    }
  }
  if (types != null) {
    if (findMimeType(type)) {
      match=MATCH_CATEGORY_TYPE;
    }
 else {
      return NO_MATCH_TYPE;
    }
  }
 else {
    if (type != null) {
      return NO_MATCH_TYPE;
    }
  }
  return match + MATCH_ADJUSTMENT_NORMAL;
}","/** 
 * Match this filter against an Intent's data (type, scheme and path). If the filter does not specify any types and does not specify any schemes/paths, the match will only succeed if the intent does not also specify a type or data. <p>Be aware that to match against an authority, you must also specify a base scheme the authority is in.  To match against a data path, both a scheme and authority must be specified.  If the filter does not specify any types or schemes that it matches against, it is considered to be empty (any authority or data path given is ignored, as if it were empty as well). <p><em>Note: MIME type, Uri scheme, and host name matching in the Android framework is case-sensitive, unlike the formal RFC definitions. As a result, you should always write these elements with lower case letters, and normalize any MIME types or Uris you receive from outside of Android to ensure these elements are lower case before supplying them here.</em></p>
 * @param type The desired data type to look for, as returned byIntent.resolveType().
 * @param scheme The desired data scheme to look for, as returned byIntent.getScheme().
 * @param data The full data string to match against, as supplied inIntent.data.
 * @return Returns either a valid match constant (a combination of{@link #MATCH_CATEGORY_MASK} and {@link #MATCH_ADJUSTMENT_MASK}), or one of the error codes   {@link #NO_MATCH_TYPE} if the type didn't matchor  {@link #NO_MATCH_DATA} if the scheme/path didn't match.
 * @see #match
 */
public final int matchData(String type,String scheme,Uri data){
  final ArrayList<String> types=mDataTypes;
  final ArrayList<String> schemes=mDataSchemes;
  final ArrayList<AuthorityEntry> authorities=mDataAuthorities;
  final ArrayList<PatternMatcher> paths=mDataPaths;
  int match=MATCH_CATEGORY_EMPTY;
  if (types == null && schemes == null) {
    return ((type == null && data == null) ? (MATCH_CATEGORY_EMPTY + MATCH_ADJUSTMENT_NORMAL) : NO_MATCH_DATA);
  }
  if (schemes != null) {
    if (schemes.contains(scheme != null ? scheme : ""String_Node_Str"")) {
      match=MATCH_CATEGORY_SCHEME;
    }
 else {
      return NO_MATCH_DATA;
    }
    if (authorities != null) {
      int authMatch=matchDataAuthority(data);
      if (authMatch >= 0) {
        if (paths == null) {
          match=authMatch;
        }
 else         if (hasDataPath(data.getPath())) {
          match=MATCH_CATEGORY_PATH;
        }
 else {
          return NO_MATCH_DATA;
        }
      }
 else {
        return NO_MATCH_DATA;
      }
    }
  }
 else {
    if (scheme != null && !""String_Node_Str"".equals(scheme) && !""String_Node_Str"".equals(scheme) && !""String_Node_Str"".equals(scheme)) {
      return NO_MATCH_DATA;
    }
  }
  if (types != null) {
    if (findMimeType(type)) {
      match=MATCH_CATEGORY_TYPE;
    }
 else {
      return NO_MATCH_TYPE;
    }
  }
 else {
    if (type != null) {
      return NO_MATCH_TYPE;
    }
  }
  return match + MATCH_ADJUSTMENT_NORMAL;
}"
24330,"/** 
 * Add a new Intent data scheme to match against.  If any schemes are included in the filter, then an Intent's data must be <em>either</em> one of these schemes <em>or</em> a matching data type.  If no schemes are included, then an Intent will match only if it includes no data.
 * @param scheme Name of the scheme to match, i.e. ""http"".
 * @see #matchData
 */
public final void addDataScheme(String scheme){
  if (mDataSchemes == null)   mDataSchemes=new ArrayList<String>();
  if (!mDataSchemes.contains(scheme)) {
    mDataSchemes.add(scheme.intern());
  }
}","/** 
 * Add a new Intent data scheme to match against.  If any schemes are included in the filter, then an Intent's data must be <em>either</em> one of these schemes <em>or</em> a matching data type.  If no schemes are included, then an Intent will match only if it includes no data. <p><em>Note: scheme matching in the Android framework is case-sensitive, unlike formal RFC schemes.  As a result, you should always write your schemes with lower case letters, and any schemes you receive from outside of Android should be converted to lower case before supplying them here.</em></p>
 * @param scheme Name of the scheme to match, i.e. ""http"".
 * @see #matchData
 */
public final void addDataScheme(String scheme){
  if (mDataSchemes == null)   mDataSchemes=new ArrayList<String>();
  if (!mDataSchemes.contains(scheme)) {
    mDataSchemes.add(scheme.intern());
  }
}"
24331,"/** 
 * Add a new Intent data type to match against.  If any types are included in the filter, then an Intent's data must be <em>either</em> one of these types <em>or</em> a matching scheme.  If no data types are included, then an Intent will only match if it specifies no data. <p>Throws   {@link MalformedMimeTypeException} if the given MIME type isnot syntactically correct.
 * @param type Name of the data type to match, i.e. ""vnd.android.cursor.dir/person"".
 * @see #matchData
 */
public final void addDataType(String type) throws MalformedMimeTypeException {
  final int slashpos=type.indexOf('/');
  final int typelen=type.length();
  if (slashpos > 0 && typelen >= slashpos + 2) {
    if (mDataTypes == null)     mDataTypes=new ArrayList<String>();
    if (typelen == slashpos + 2 && type.charAt(slashpos + 1) == '*') {
      String str=type.substring(0,slashpos);
      if (!mDataTypes.contains(str)) {
        mDataTypes.add(str.intern());
      }
      mHasPartialTypes=true;
    }
 else {
      if (!mDataTypes.contains(type)) {
        mDataTypes.add(type.intern());
      }
    }
    return;
  }
  throw new MalformedMimeTypeException(type);
}","/** 
 * Add a new Intent data type to match against.  If any types are included in the filter, then an Intent's data must be <em>either</em> one of these types <em>or</em> a matching scheme.  If no data types are included, then an Intent will only match if it specifies no data. <p><em>Note: MIME type matching in the Android framework is case-sensitive, unlike formal RFC MIME types.  As a result, you should always write your MIME types with lower case letters, and any MIME types you receive from outside of Android should be converted to lower case before supplying them here.</em></p> <p>Throws   {@link MalformedMimeTypeException} if the given MIME type isnot syntactically correct.
 * @param type Name of the data type to match, i.e. ""vnd.android.cursor.dir/person"".
 * @see #matchData
 */
public final void addDataType(String type) throws MalformedMimeTypeException {
  final int slashpos=type.indexOf('/');
  final int typelen=type.length();
  if (slashpos > 0 && typelen >= slashpos + 2) {
    if (mDataTypes == null)     mDataTypes=new ArrayList<String>();
    if (typelen == slashpos + 2 && type.charAt(slashpos + 1) == '*') {
      String str=type.substring(0,slashpos);
      if (!mDataTypes.contains(str)) {
        mDataTypes.add(str.intern());
      }
      mHasPartialTypes=true;
    }
 else {
      if (!mDataTypes.contains(type)) {
        mDataTypes.add(type.intern());
      }
    }
    return;
  }
  throw new MalformedMimeTypeException(type);
}"
24332,"/** 
 * This method is called when the BroadcastReceiver is receiving an Intent broadcast.  During this time you can use the other methods on BroadcastReceiver to view/modify the current result values.  The function is normally called from the main thread of its process, so you should never perform long-running operations in it (there is a timeout of 10 seconds that the system allows before considering the receiver to be blocked and a candidate to be killed). You cannot launch a popup dialog in your implementation of onReceive(). <p><b>If this BroadcastReceiver was launched through a &lt;receiver&gt; tag, then the object is no longer alive after returning from this function.</b>  This means you should not perform any operations that return a result to you asynchronously -- in particular, for interacting with services, you should use  {@link Context#startService(Intent)} instead of{@link Context#bindService(Intent,ServiceConnection,int)}.  If you wish to interact with a service that is already running, you can use  {@link #peekService}.
 * @param context The Context in which the receiver is running.
 * @param intent The Intent being received.
 */
public abstract void onReceive(Context context,Intent intent);","/** 
 * This method is called when the BroadcastReceiver is receiving an Intent broadcast.  During this time you can use the other methods on BroadcastReceiver to view/modify the current result values.  The function is normally called within the main thread of its process, so you should never perform long-running operations in it (there is a timeout of 10 seconds that the system allows before considering the receiver to be blocked and a candidate to be killed). You cannot launch a popup dialog in your implementation of onReceive(). <p><b>If this BroadcastReceiver was launched through a &lt;receiver&gt; tag, then the object is no longer alive after returning from this function.</b>  This means you should not perform any operations that return a result to you asynchronously -- in particular, for interacting with services, you should use  {@link Context#startService(Intent)} instead of{@link Context#bindService(Intent,ServiceConnection,int)}.  If you wish to interact with a service that is already running, you can use  {@link #peekService}. <p>The Intent filters used in   {@link android.content.Context#registerReceiver}and in application manifests are <em>not</em> guaranteed to be exclusive. They are hints to the operating system about how to find suitable recipients. It is possible for senders to force delivery to specific recipients, bypassing filter resolution.  For this reason,   {@link #onReceive(Context,Intent) onReceive()}implementations should respond only to known actions, ignoring any unexpected Intents that they may receive.
 * @param context The Context in which the receiver is running.
 * @param intent The Intent being received.
 */
public abstract void onReceive(Context context,Intent intent);"
24333,"/** 
 * This method is called when the BroadcastReceiver is receiving an Intent broadcast.  During this time you can use the other methods on BroadcastReceiver to view/modify the current result values.  The function is normally called from the main thread of its process, so you should never perform long-running operations in it (there is a timeout of 10 seconds that the system allows before considering the receiver to be blocked and a candidate to be killed). You cannot launch a popup dialog in your implementation of onReceive(). <p><b>If this BroadcastReceiver was launched through a &lt;receiver&gt; tag, then the object is no longer alive after returning from this function.</b>  This means you should not perform any operations that return a result to you asynchronously -- in particular, for interacting with services, you should use  {@link Context#startService(Intent)} instead of{@link Context#bindService(Intent,ServiceConnection,int)}.  If you wish to interact with a service that is already running, you can use  {@link #peekService}.
 * @param context The Context in which the receiver is running.
 * @param intent The Intent being received.
 */
public abstract void onReceive(Context context,Intent intent);","/** 
 * This method is called when the BroadcastReceiver is receiving an Intent broadcast.  During this time you can use the other methods on BroadcastReceiver to view/modify the current result values.  The function is normally called within the main thread of its process, so you should never perform long-running operations in it (there is a timeout of 10 seconds that the system allows before considering the receiver to be blocked and a candidate to be killed). You cannot launch a popup dialog in your implementation of onReceive(). <p><b>If this BroadcastReceiver was launched through a &lt;receiver&gt; tag, then the object is no longer alive after returning from this function.</b>  This means you should not perform any operations that return a result to you asynchronously -- in particular, for interacting with services, you should use  {@link Context#startService(Intent)} instead of{@link Context#bindService(Intent,ServiceConnection,int)}.  If you wish to interact with a service that is already running, you can use  {@link #peekService}. <p>The Intent filters used in   {@link android.content.Context#registerReceiver}and in application manifests are <em>not</em> guaranteed to be exclusive. They are hints to the operating system about how to find suitable recipients. It is possible for senders to force delivery to specific recipients, bypassing filter resolution.  For this reason,   {@link #onReceive(Context,Intent) onReceive()}implementations should respond only to known actions, ignoring any unexpected Intents that they may receive.
 * @param context The Context in which the receiver is running.
 * @param intent The Intent being received.
 */
public abstract void onReceive(Context context,Intent intent);"
24334,"/** 
 * This method is called when the BroadcastReceiver is receiving an Intent broadcast.  During this time you can use the other methods on BroadcastReceiver to view/modify the current result values.  The function is normally called from the main thread of its process, so you should never perform long-running operations in it (there is a timeout of 10 seconds that the system allows before considering the receiver to be blocked and a candidate to be killed). You cannot launch a popup dialog in your implementation of onReceive(). <p><b>If this BroadcastReceiver was launched through a &lt;receiver&gt; tag, then the object is no longer alive after returning from this function.</b>  This means you should not perform any operations that return a result to you asynchronously -- in particular, for interacting with services, you should use  {@link Context#startService(Intent)} instead of{@link Context#bindService(Intent,ServiceConnection,int)}.  If you wish to interact with a service that is already running, you can use  {@link #peekService}.
 * @param context The Context in which the receiver is running.
 * @param intent The Intent being received.
 */
public abstract void onReceive(Context context,Intent intent);","/** 
 * This method is called when the BroadcastReceiver is receiving an Intent broadcast.  During this time you can use the other methods on BroadcastReceiver to view/modify the current result values.  The function is normally called within the main thread of its process, so you should never perform long-running operations in it (there is a timeout of 10 seconds that the system allows before considering the receiver to be blocked and a candidate to be killed). You cannot launch a popup dialog in your implementation of onReceive(). <p><b>If this BroadcastReceiver was launched through a &lt;receiver&gt; tag, then the object is no longer alive after returning from this function.</b>  This means you should not perform any operations that return a result to you asynchronously -- in particular, for interacting with services, you should use  {@link Context#startService(Intent)} instead of{@link Context#bindService(Intent,ServiceConnection,int)}.  If you wish to interact with a service that is already running, you can use  {@link #peekService}. <p>The Intent filters used in   {@link android.content.Context#registerReceiver}and in application manifests are <em>not</em> guaranteed to be exclusive. They are hints to the operating system about how to find suitable recipients. It is possible for senders to force delivery to specific recipients, bypassing filter resolution.  For this reason,   {@link #onReceive(Context,Intent) onReceive()}implementations should respond only to known actions, ignoring any unexpected Intents that they may receive.
 * @param context The Context in which the receiver is running.
 * @param intent The Intent being received.
 */
public abstract void onReceive(Context context,Intent intent);"
24335,"/** 
 * Registers a   {@link android.hardware.SensorEventListener SensorEventListener}for the given sensor.
 * @param listener A {@link android.hardware.SensorEventListener SensorEventListener} object.
 * @param sensor The {@link android.hardware.Sensor Sensor} to register to.
 * @param rate The rate {@link android.hardware.SensorEvent sensor events} are delivered at.This is only a hint to the system. Events may be received faster or slower than the specified rate. Usually events are received faster.
 * @param handler The {@link android.os.Handler Handler} the{@link android.hardware.SensorEvent sensor events} will be delivered to.
 * @return true if the sensor is supported and successfully enabled.
 */
public boolean registerListener(SensorEventListener listener,Sensor sensor,int rate,Handler handler){
  if (listener == null || sensor == null) {
    return false;
  }
  boolean result;
  int delay=-1;
switch (rate) {
case SENSOR_DELAY_FASTEST:
    delay=0;
  break;
case SENSOR_DELAY_GAME:
delay=20;
break;
case SENSOR_DELAY_UI:
delay=60;
break;
case SENSOR_DELAY_NORMAL:
delay=200;
break;
default :
return false;
}
try {
synchronized (sListeners) {
ListenerDelegate l=null;
for (ListenerDelegate i : sListeners) {
if (i.getListener() == listener) {
l=i;
break;
}
}
String name=sensor.getName();
int handle=sensor.getHandle();
if (l == null) {
l=new ListenerDelegate(listener,sensor,handler);
result=mSensorService.enableSensor(l,name,handle,delay);
if (result) {
sListeners.add(l);
sListeners.notify();
}
if (!sListeners.isEmpty()) {
sSensorThread.startLocked(mSensorService);
}
}
 else {
result=mSensorService.enableSensor(l,name,handle,delay);
if (result) {
l.addSensor(sensor);
}
}
}
}
 catch (RemoteException e) {
Log.e(TAG,""String_Node_Str"",e);
result=false;
}
return result;
}","/** 
 * Registers a   {@link android.hardware.SensorEventListener SensorEventListener}for the given sensor.
 * @param listener A {@link android.hardware.SensorEventListener SensorEventListener} object.
 * @param sensor The {@link android.hardware.Sensor Sensor} to register to.
 * @param rate The rate {@link android.hardware.SensorEvent sensor events} are delivered at.This is only a hint to the system. Events may be received faster or slower than the specified rate. Usually events are received faster. The value must be one of  {@link #SENSOR_DELAY_NORMAL},   {@link #SENSOR_DELAY_UI},   {@link #SENSOR_DELAY_GAME}, or  {@link #SENSOR_DELAY_FASTEST}.
 * @param handler The {@link android.os.Handler Handler} the{@link android.hardware.SensorEvent sensor events} will be delivered to.
 * @return true if the sensor is supported and successfully enabled.
 */
public boolean registerListener(SensorEventListener listener,Sensor sensor,int rate,Handler handler){
  if (listener == null || sensor == null) {
    return false;
  }
  boolean result;
  int delay=-1;
switch (rate) {
case SENSOR_DELAY_FASTEST:
    delay=0;
  break;
case SENSOR_DELAY_GAME:
delay=20;
break;
case SENSOR_DELAY_UI:
delay=60;
break;
case SENSOR_DELAY_NORMAL:
delay=200;
break;
default :
return false;
}
try {
synchronized (sListeners) {
ListenerDelegate l=null;
for (ListenerDelegate i : sListeners) {
if (i.getListener() == listener) {
l=i;
break;
}
}
String name=sensor.getName();
int handle=sensor.getHandle();
if (l == null) {
l=new ListenerDelegate(listener,sensor,handler);
result=mSensorService.enableSensor(l,name,handle,delay);
if (result) {
sListeners.add(l);
sListeners.notify();
}
if (!sListeners.isEmpty()) {
sSensorThread.startLocked(mSensorService);
}
}
 else {
result=mSensorService.enableSensor(l,name,handle,delay);
if (result) {
l.addSensor(sensor);
}
}
}
}
 catch (RemoteException e) {
Log.e(TAG,""String_Node_Str"",e);
result=false;
}
return result;
}"
24336,"/** 
 * Returns the name, conservatively quoting it if there are any characters that are likely to cause trouble outside of a quoted string, or returning it literally if it seems safe.
 */
public static String quoteNameIfNecessary(String name){
  int len=name.length();
  for (int i=0; i < len; i++) {
    char c=name.charAt(i);
    if (!((c >= 'A' && i <= 'Z') || (c >= 'a' && c <= 'z') || (c == ' ')|| (c >= '0' && c <= '9'))) {
      return '""' + quoteName(name) + '""';
    }
  }
  return name;
}","/** 
 * Returns the name, conservatively quoting it if there are any characters that are likely to cause trouble outside of a quoted string, or returning it literally if it seems safe.
 */
public static String quoteNameIfNecessary(String name){
  int len=name.length();
  for (int i=0; i < len; i++) {
    char c=name.charAt(i);
    if (!((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c == ' ')|| (c >= '0' && c <= '9'))) {
      return '""' + quoteName(name) + '""';
    }
  }
  return name;
}"
24337,"/** 
 * Returns the name, conservatively quoting it if there are any characters that are likely to cause trouble outside of a quoted string, or returning it literally if it seems safe.
 */
public static String quoteNameIfNecessary(String name){
  int len=name.length();
  for (int i=0; i < len; i++) {
    char c=name.charAt(i);
    if (!((c >= 'A' && i <= 'Z') || (c >= 'a' && c <= 'z') || (c == ' ')|| (c >= '0' && c <= '9'))) {
      return '""' + quoteName(name) + '""';
    }
  }
  return name;
}","/** 
 * Returns the name, conservatively quoting it if there are any characters that are likely to cause trouble outside of a quoted string, or returning it literally if it seems safe.
 */
public static String quoteNameIfNecessary(String name){
  int len=name.length();
  for (int i=0; i < len; i++) {
    char c=name.charAt(i);
    if (!((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c == ' ')|| (c >= '0' && c <= '9'))) {
      return '""' + quoteName(name) + '""';
    }
  }
  return name;
}"
24338,"/** 
 * Registers a   {@link android.hardware.SensorEventListener SensorEventListener}for the given sensor.
 * @param listener A {@link android.hardware.SensorEventListener SensorEventListener} object.
 * @param sensor The {@link android.hardware.Sensor Sensor} to register to.
 * @param rate The rate {@link android.hardware.SensorEvent sensor events} are delivered at.This is only a hint to the system. Events may be received faster or slower than the specified rate. Usually events are received faster.
 * @param handler The {@link android.os.Handler Handler} the{@link android.hardware.SensorEvent sensor events} will be delivered to.
 * @return true if the sensor is supported and successfully enabled.
 */
public boolean registerListener(SensorEventListener listener,Sensor sensor,int rate,Handler handler){
  if (listener == null || sensor == null) {
    return false;
  }
  boolean result;
  int delay=-1;
switch (rate) {
case SENSOR_DELAY_FASTEST:
    delay=0;
  break;
case SENSOR_DELAY_GAME:
delay=20;
break;
case SENSOR_DELAY_UI:
delay=60;
break;
case SENSOR_DELAY_NORMAL:
delay=200;
break;
default :
return false;
}
try {
synchronized (sListeners) {
ListenerDelegate l=null;
for (ListenerDelegate i : sListeners) {
if (i.getListener() == listener) {
l=i;
break;
}
}
String name=sensor.getName();
int handle=sensor.getHandle();
if (l == null) {
l=new ListenerDelegate(listener,sensor,handler);
result=mSensorService.enableSensor(l,name,handle,delay);
if (result) {
sListeners.add(l);
sListeners.notify();
}
if (!sListeners.isEmpty()) {
sSensorThread.startLocked(mSensorService);
}
}
 else {
result=mSensorService.enableSensor(l,name,handle,delay);
if (result) {
l.addSensor(sensor);
}
}
}
}
 catch (RemoteException e) {
Log.e(TAG,""String_Node_Str"",e);
result=false;
}
return result;
}","/** 
 * Registers a   {@link android.hardware.SensorEventListener SensorEventListener}for the given sensor.
 * @param listener A {@link android.hardware.SensorEventListener SensorEventListener} object.
 * @param sensor The {@link android.hardware.Sensor Sensor} to register to.
 * @param rate The rate {@link android.hardware.SensorEvent sensor events} are delivered at.This is only a hint to the system. Events may be received faster or slower than the specified rate. Usually events are received faster. The value must be one of  {@link #SENSOR_DELAY_NORMAL},   {@link #SENSOR_DELAY_UI},   {@link #SENSOR_DELAY_GAME}, or  {@link #SENSOR_DELAY_FASTEST}.
 * @param handler The {@link android.os.Handler Handler} the{@link android.hardware.SensorEvent sensor events} will be delivered to.
 * @return true if the sensor is supported and successfully enabled.
 */
public boolean registerListener(SensorEventListener listener,Sensor sensor,int rate,Handler handler){
  if (listener == null || sensor == null) {
    return false;
  }
  boolean result;
  int delay=-1;
switch (rate) {
case SENSOR_DELAY_FASTEST:
    delay=0;
  break;
case SENSOR_DELAY_GAME:
delay=20;
break;
case SENSOR_DELAY_UI:
delay=60;
break;
case SENSOR_DELAY_NORMAL:
delay=200;
break;
default :
return false;
}
try {
synchronized (sListeners) {
ListenerDelegate l=null;
for (ListenerDelegate i : sListeners) {
if (i.getListener() == listener) {
l=i;
break;
}
}
String name=sensor.getName();
int handle=sensor.getHandle();
if (l == null) {
l=new ListenerDelegate(listener,sensor,handler);
result=mSensorService.enableSensor(l,name,handle,delay);
if (result) {
sListeners.add(l);
sListeners.notify();
}
if (!sListeners.isEmpty()) {
sSensorThread.startLocked(mSensorService);
}
}
 else {
result=mSensorService.enableSensor(l,name,handle,delay);
if (result) {
l.addSensor(sensor);
}
}
}
}
 catch (RemoteException e) {
Log.e(TAG,""String_Node_Str"",e);
result=false;
}
return result;
}"
24339,"/** 
 * Registers a   {@link android.hardware.SensorEventListener SensorEventListener}for the given sensor.
 * @param listener A {@link android.hardware.SensorEventListener SensorEventListener} object.
 * @param sensor The {@link android.hardware.Sensor Sensor} to register to.
 * @param rate The rate {@link android.hardware.SensorEvent sensor events} are delivered at.This is only a hint to the system. Events may be received faster or slower than the specified rate. Usually events are received faster.
 * @param handler The {@link android.os.Handler Handler} the{@link android.hardware.SensorEvent sensor events} will be delivered to.
 * @return true if the sensor is supported and successfully enabled.
 */
public boolean registerListener(SensorEventListener listener,Sensor sensor,int rate,Handler handler){
  if (listener == null || sensor == null) {
    return false;
  }
  boolean result;
  int delay=-1;
switch (rate) {
case SENSOR_DELAY_FASTEST:
    delay=0;
  break;
case SENSOR_DELAY_GAME:
delay=20;
break;
case SENSOR_DELAY_UI:
delay=60;
break;
case SENSOR_DELAY_NORMAL:
delay=200;
break;
default :
return false;
}
try {
synchronized (sListeners) {
ListenerDelegate l=null;
for (ListenerDelegate i : sListeners) {
if (i.getListener() == listener) {
l=i;
break;
}
}
String name=sensor.getName();
int handle=sensor.getHandle();
if (l == null) {
l=new ListenerDelegate(listener,sensor,handler);
result=mSensorService.enableSensor(l,name,handle,delay);
if (result) {
sListeners.add(l);
sListeners.notify();
}
if (!sListeners.isEmpty()) {
sSensorThread.startLocked(mSensorService);
}
}
 else {
result=mSensorService.enableSensor(l,name,handle,delay);
if (result) {
l.addSensor(sensor);
}
}
}
}
 catch (RemoteException e) {
Log.e(TAG,""String_Node_Str"",e);
result=false;
}
return result;
}","/** 
 * Registers a   {@link android.hardware.SensorEventListener SensorEventListener}for the given sensor.
 * @param listener A {@link android.hardware.SensorEventListener SensorEventListener} object.
 * @param sensor The {@link android.hardware.Sensor Sensor} to register to.
 * @param rate The rate {@link android.hardware.SensorEvent sensor events} are delivered at.This is only a hint to the system. Events may be received faster or slower than the specified rate. Usually events are received faster. The value must be one of  {@link #SENSOR_DELAY_NORMAL},   {@link #SENSOR_DELAY_UI},   {@link #SENSOR_DELAY_GAME}, or  {@link #SENSOR_DELAY_FASTEST}.
 * @param handler The {@link android.os.Handler Handler} the{@link android.hardware.SensorEvent sensor events} will be delivered to.
 * @return true if the sensor is supported and successfully enabled.
 */
public boolean registerListener(SensorEventListener listener,Sensor sensor,int rate,Handler handler){
  if (listener == null || sensor == null) {
    return false;
  }
  boolean result;
  int delay=-1;
switch (rate) {
case SENSOR_DELAY_FASTEST:
    delay=0;
  break;
case SENSOR_DELAY_GAME:
delay=20;
break;
case SENSOR_DELAY_UI:
delay=60;
break;
case SENSOR_DELAY_NORMAL:
delay=200;
break;
default :
return false;
}
try {
synchronized (sListeners) {
ListenerDelegate l=null;
for (ListenerDelegate i : sListeners) {
if (i.getListener() == listener) {
l=i;
break;
}
}
String name=sensor.getName();
int handle=sensor.getHandle();
if (l == null) {
l=new ListenerDelegate(listener,sensor,handler);
result=mSensorService.enableSensor(l,name,handle,delay);
if (result) {
sListeners.add(l);
sListeners.notify();
}
if (!sListeners.isEmpty()) {
sSensorThread.startLocked(mSensorService);
}
}
 else {
result=mSensorService.enableSensor(l,name,handle,delay);
if (result) {
l.addSensor(sensor);
}
}
}
}
 catch (RemoteException e) {
Log.e(TAG,""String_Node_Str"",e);
result=false;
}
return result;
}"
24340,"/** 
 * Returns the name, conservatively quoting it if there are any characters that are likely to cause trouble outside of a quoted string, or returning it literally if it seems safe.
 */
public static String quoteNameIfNecessary(String name){
  int len=name.length();
  for (int i=0; i < len; i++) {
    char c=name.charAt(i);
    if (!((c >= 'A' && i <= 'Z') || (c >= 'a' && c <= 'z') || (c == ' ')|| (c >= '0' && c <= '9'))) {
      return '""' + quoteName(name) + '""';
    }
  }
  return name;
}","/** 
 * Returns the name, conservatively quoting it if there are any characters that are likely to cause trouble outside of a quoted string, or returning it literally if it seems safe.
 */
public static String quoteNameIfNecessary(String name){
  int len=name.length();
  for (int i=0; i < len; i++) {
    char c=name.charAt(i);
    if (!((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c == ' ')|| (c >= '0' && c <= '9'))) {
      return '""' + quoteName(name) + '""';
    }
  }
  return name;
}"
24341,"/** 
 * <p>Forces the drawing cache to be built if the drawing cache is invalid.</p> <p>If you call   {@link #buildDrawingCache()} manually without calling{@link #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true)}, you should cleanup the cache by calling   {@link #destroyDrawingCache()} afterwards.</p>
 * @see #getDrawingCache()
 * @see #destroyDrawingCache()
 */
public void buildDrawingCache(){
  if ((mPrivateFlags & DRAWING_CACHE_VALID) == 0 || mDrawingCache == null || mDrawingCache.get() == null) {
    if (ViewDebug.TRACE_HIERARCHY) {
      ViewDebug.trace(this,ViewDebug.HierarchyTraceType.BUILD_CACHE);
    }
    if (ViewRoot.PROFILE_DRAWING) {
      EventLog.writeEvent(60002,hashCode());
    }
    final int width=mRight - mLeft;
    final int height=mBottom - mTop;
    final int drawingCacheBackgroundColor=mDrawingCacheBackgroundColor;
    final boolean opaque=drawingCacheBackgroundColor != 0 || (mBGDrawable != null && mBGDrawable.getOpacity() == PixelFormat.OPAQUE);
    if (width <= 0 || height <= 0 || (width * height * (opaque ? 2 : 4) >= ViewConfiguration.get(mContext).getScaledMaximumDrawingCacheSize())) {
      destroyDrawingCache();
      return;
    }
    boolean clear=true;
    Bitmap bitmap=mDrawingCache == null ? null : mDrawingCache.get();
    if (bitmap == null || bitmap.getWidth() != width || bitmap.getHeight() != height) {
      Bitmap.Config quality;
      if (!opaque) {
switch (mViewFlags & DRAWING_CACHE_QUALITY_MASK) {
case DRAWING_CACHE_QUALITY_AUTO:
          quality=Bitmap.Config.ARGB_8888;
        break;
case DRAWING_CACHE_QUALITY_LOW:
      quality=Bitmap.Config.ARGB_4444;
    break;
case DRAWING_CACHE_QUALITY_HIGH:
  quality=Bitmap.Config.ARGB_8888;
break;
default :
quality=Bitmap.Config.ARGB_8888;
break;
}
}
 else {
quality=Bitmap.Config.RGB_565;
}
if (bitmap != null) bitmap.recycle();
try {
bitmap=Bitmap.createBitmap(width,height,quality);
mDrawingCache=new SoftReference<Bitmap>(bitmap);
}
 catch (OutOfMemoryError e) {
mDrawingCache=null;
return;
}
clear=drawingCacheBackgroundColor != 0;
}
Canvas canvas;
final AttachInfo attachInfo=mAttachInfo;
if (attachInfo != null) {
canvas=attachInfo.mCanvas;
if (canvas == null) {
canvas=new Canvas();
}
canvas.setBitmap(bitmap);
attachInfo.mCanvas=null;
}
 else {
canvas=new Canvas(bitmap);
}
if (clear) {
bitmap.eraseColor(drawingCacheBackgroundColor);
}
computeScroll();
final int restoreCount=canvas.save();
canvas.translate(-mScrollX,-mScrollY);
mPrivateFlags|=DRAWN;
if ((mPrivateFlags & SKIP_DRAW) == SKIP_DRAW) {
if (ViewDebug.TRACE_HIERARCHY) {
ViewDebug.trace(this,ViewDebug.HierarchyTraceType.DRAW);
}
dispatchDraw(canvas);
}
 else {
draw(canvas);
}
canvas.restoreToCount(restoreCount);
if (attachInfo != null) {
attachInfo.mCanvas=canvas;
}
mPrivateFlags|=DRAWING_CACHE_VALID;
}
}","/** 
 * <p>Forces the drawing cache to be built if the drawing cache is invalid.</p> <p>If you call   {@link #buildDrawingCache()} manually without calling{@link #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true)}, you should cleanup the cache by calling   {@link #destroyDrawingCache()} afterwards.</p>
 * @see #getDrawingCache()
 * @see #destroyDrawingCache()
 */
public void buildDrawingCache(){
  if ((mPrivateFlags & DRAWING_CACHE_VALID) == 0 || mDrawingCache == null || mDrawingCache.get() == null) {
    if (ViewDebug.TRACE_HIERARCHY) {
      ViewDebug.trace(this,ViewDebug.HierarchyTraceType.BUILD_CACHE);
    }
    if (ViewRoot.PROFILE_DRAWING) {
      EventLog.writeEvent(60002,hashCode());
    }
    final int width=mRight - mLeft;
    final int height=mBottom - mTop;
    final int drawingCacheBackgroundColor=mDrawingCacheBackgroundColor;
    final boolean opaque=drawingCacheBackgroundColor != 0 || (mBGDrawable != null && mBGDrawable.getOpacity() == PixelFormat.OPAQUE);
    if (width <= 0 || height <= 0 || (width * height * (opaque ? 2 : 4) > ViewConfiguration.get(mContext).getScaledMaximumDrawingCacheSize())) {
      destroyDrawingCache();
      return;
    }
    boolean clear=true;
    Bitmap bitmap=mDrawingCache == null ? null : mDrawingCache.get();
    if (bitmap == null || bitmap.getWidth() != width || bitmap.getHeight() != height) {
      Bitmap.Config quality;
      if (!opaque) {
switch (mViewFlags & DRAWING_CACHE_QUALITY_MASK) {
case DRAWING_CACHE_QUALITY_AUTO:
          quality=Bitmap.Config.ARGB_8888;
        break;
case DRAWING_CACHE_QUALITY_LOW:
      quality=Bitmap.Config.ARGB_4444;
    break;
case DRAWING_CACHE_QUALITY_HIGH:
  quality=Bitmap.Config.ARGB_8888;
break;
default :
quality=Bitmap.Config.ARGB_8888;
break;
}
}
 else {
quality=Bitmap.Config.RGB_565;
}
if (bitmap != null) bitmap.recycle();
try {
bitmap=Bitmap.createBitmap(width,height,quality);
mDrawingCache=new SoftReference<Bitmap>(bitmap);
}
 catch (OutOfMemoryError e) {
mDrawingCache=null;
return;
}
clear=drawingCacheBackgroundColor != 0;
}
Canvas canvas;
final AttachInfo attachInfo=mAttachInfo;
if (attachInfo != null) {
canvas=attachInfo.mCanvas;
if (canvas == null) {
canvas=new Canvas();
}
canvas.setBitmap(bitmap);
attachInfo.mCanvas=null;
}
 else {
canvas=new Canvas(bitmap);
}
if (clear) {
bitmap.eraseColor(drawingCacheBackgroundColor);
}
computeScroll();
final int restoreCount=canvas.save();
canvas.translate(-mScrollX,-mScrollY);
mPrivateFlags|=DRAWN;
if ((mPrivateFlags & SKIP_DRAW) == SKIP_DRAW) {
if (ViewDebug.TRACE_HIERARCHY) {
ViewDebug.trace(this,ViewDebug.HierarchyTraceType.DRAW);
}
dispatchDraw(canvas);
}
 else {
draw(canvas);
}
canvas.restoreToCount(restoreCount);
if (attachInfo != null) {
attachInfo.mCanvas=canvas;
}
mPrivateFlags|=DRAWING_CACHE_VALID;
}
}"
24342,"public void run(){
  try {
    if (!hasCache) {
      captureView.buildDrawingCache();
    }
    cache[0]=captureView.getDrawingCache();
  }
  finally {
    latch.countDown();
  }
}","public void run(){
  try {
    cache[0]=captureView.createSnapshot(Bitmap.Config.ARGB_8888,0);
  }
 catch (  OutOfMemoryError e) {
    try {
      cache[0]=captureView.createSnapshot(Bitmap.Config.ARGB_4444,0);
    }
 catch (    OutOfMemoryError e2) {
      Log.w(""String_Node_Str"",""String_Node_Str"");
    }
  }
 finally {
    latch.countDown();
  }
}"
24343,"private static void capture(View root,final OutputStream clientStream,String parameter) throws IOException {
  final View captureView=findView(root,parameter);
  if (captureView != null) {
    final CountDownLatch latch=new CountDownLatch(1);
    final Bitmap[] cache=new Bitmap[1];
    final boolean hasCache=captureView.isDrawingCacheEnabled();
    final boolean willNotCache=captureView.willNotCacheDrawing();
    if (willNotCache) {
      captureView.setWillNotCacheDrawing(false);
    }
    root.post(new Runnable(){
      public void run(){
        try {
          if (!hasCache) {
            captureView.buildDrawingCache();
          }
          cache[0]=captureView.getDrawingCache();
        }
  finally {
          latch.countDown();
        }
      }
    }
);
    try {
      latch.await(CAPTURE_TIMEOUT,TimeUnit.MILLISECONDS);
      if (cache[0] != null) {
        BufferedOutputStream out=null;
        try {
          out=new BufferedOutputStream(clientStream,32 * 1024);
          cache[0].compress(Bitmap.CompressFormat.PNG,100,out);
          out.flush();
        }
  finally {
          if (out != null) {
            out.close();
          }
        }
      }
    }
 catch (    InterruptedException e) {
      Log.w(""String_Node_Str"",""String_Node_Str"" + captureView);
      Thread.currentThread().interrupt();
    }
 finally {
      if (willNotCache) {
        captureView.setWillNotCacheDrawing(true);
      }
      if (!hasCache) {
        captureView.destroyDrawingCache();
      }
    }
  }
}","private static void capture(View root,final OutputStream clientStream,String parameter) throws IOException {
  final View captureView=findView(root,parameter);
  if (captureView != null) {
    final CountDownLatch latch=new CountDownLatch(1);
    final Bitmap[] cache=new Bitmap[1];
    root.post(new Runnable(){
      public void run(){
        try {
          cache[0]=captureView.createSnapshot(Bitmap.Config.ARGB_8888,0);
        }
 catch (        OutOfMemoryError e) {
          try {
            cache[0]=captureView.createSnapshot(Bitmap.Config.ARGB_4444,0);
          }
 catch (          OutOfMemoryError e2) {
            Log.w(""String_Node_Str"",""String_Node_Str"");
          }
        }
 finally {
          latch.countDown();
        }
      }
    }
);
    try {
      latch.await(CAPTURE_TIMEOUT,TimeUnit.MILLISECONDS);
      if (cache[0] != null) {
        BufferedOutputStream out=null;
        try {
          out=new BufferedOutputStream(clientStream,32 * 1024);
          cache[0].compress(Bitmap.CompressFormat.PNG,100,out);
          out.flush();
        }
  finally {
          if (out != null) {
            out.close();
          }
          cache[0].recycle();
        }
      }
 else {
        Log.w(""String_Node_Str"",""String_Node_Str"");
        clientStream.close();
      }
    }
 catch (    InterruptedException e) {
      Log.w(""String_Node_Str"",""String_Node_Str"" + captureView);
      Thread.currentThread().interrupt();
    }
  }
}"
24344,"/** 
 * Called when layout of the windows is finished.  After this function has returned, all windows given to layoutWindow() <em>must</em> have had a frame assigned.
 */
public void finishLayoutLw();","/** 
 * Called when layout of the windows is finished.  After this function has returned, all windows given to layoutWindow() <em>must</em> have had a frame assigned.
 * @return Return true if layout state may have changed (so that another layout will be performed).
 */
public boolean finishLayoutLw();"
24345,"/** 
 * {@inheritDoc}
 */
@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  final int count=getChildCount();
  final int parentLeft=mPaddingLeft + mForegroundPaddingLeft;
  final int parentRight=right - left - mPaddingRight- mForegroundPaddingRight;
  final int parentTop=mPaddingTop + mForegroundPaddingTop;
  final int parentBottom=bottom - top - mPaddingBottom- mForegroundPaddingBottom;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      final int width=child.getMeasuredWidth();
      final int height=child.getMeasuredHeight();
      int childLeft=parentLeft;
      int childTop=parentTop;
      final int gravity=lp.gravity;
      if (gravity != -1) {
        final int horizontalGravity=gravity & Gravity.HORIZONTAL_GRAVITY_MASK;
        final int verticalGravity=gravity & Gravity.VERTICAL_GRAVITY_MASK;
switch (horizontalGravity) {
case Gravity.LEFT:
          childLeft=parentLeft + lp.leftMargin;
        break;
case Gravity.CENTER_HORIZONTAL:
      childLeft=parentLeft + (parentRight - parentLeft + lp.leftMargin + lp.rightMargin - width) / 2;
    break;
case Gravity.RIGHT:
  childLeft=parentRight - width - lp.rightMargin;
break;
default :
childLeft=parentLeft + lp.leftMargin;
}
switch (verticalGravity) {
case Gravity.TOP:
childTop=parentTop + lp.topMargin;
break;
case Gravity.CENTER_VERTICAL:
childTop=parentTop + (parentBottom - parentTop + lp.topMargin + lp.bottomMargin - height) / 2;
break;
case Gravity.BOTTOM:
childTop=parentBottom - height - lp.bottomMargin;
break;
default :
childTop=parentTop + lp.topMargin;
}
}
child.layout(childLeft,childTop,childLeft + width,childTop + height);
}
}
}","/** 
 * {@inheritDoc}
 */
@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  final int count=getChildCount();
  final int parentLeft=mPaddingLeft + mForegroundPaddingLeft;
  final int parentRight=right - left - mPaddingRight- mForegroundPaddingRight;
  final int parentTop=mPaddingTop + mForegroundPaddingTop;
  final int parentBottom=bottom - top - mPaddingBottom- mForegroundPaddingBottom;
  mForegroundBoundsChanged=true;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      final int width=child.getMeasuredWidth();
      final int height=child.getMeasuredHeight();
      int childLeft=parentLeft;
      int childTop=parentTop;
      final int gravity=lp.gravity;
      if (gravity != -1) {
        final int horizontalGravity=gravity & Gravity.HORIZONTAL_GRAVITY_MASK;
        final int verticalGravity=gravity & Gravity.VERTICAL_GRAVITY_MASK;
switch (horizontalGravity) {
case Gravity.LEFT:
          childLeft=parentLeft + lp.leftMargin;
        break;
case Gravity.CENTER_HORIZONTAL:
      childLeft=parentLeft + (parentRight - parentLeft + lp.leftMargin + lp.rightMargin - width) / 2;
    break;
case Gravity.RIGHT:
  childLeft=parentRight - width - lp.rightMargin;
break;
default :
childLeft=parentLeft + lp.leftMargin;
}
switch (verticalGravity) {
case Gravity.TOP:
childTop=parentTop + lp.topMargin;
break;
case Gravity.CENTER_VERTICAL:
childTop=parentTop + (parentBottom - parentTop + lp.topMargin + lp.bottomMargin - height) / 2;
break;
case Gravity.BOTTOM:
childTop=parentBottom - height - lp.bottomMargin;
break;
default :
childTop=parentTop + lp.topMargin;
}
}
child.layout(childLeft,childTop,childLeft + width,childTop + height);
}
}
}"
24346,"/** 
 * {@inheritDoc}
 */
@Override public void draw(Canvas canvas){
  super.draw(canvas);
  if (mForeground != null) {
    mForeground.draw(canvas);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void draw(Canvas canvas){
  super.draw(canvas);
  if (mForeground != null) {
    final Drawable foreground=mForeground;
    if (mForegroundBoundsChanged) {
      mForegroundBoundsChanged=false;
      if (foreground != null) {
        final Rect selfBounds=mSelfBounds;
        final Rect overlayBounds=mOverlayBounds;
        final int w=mRight - mLeft;
        final int h=mBottom - mTop;
        if (mForegroundInPadding) {
          selfBounds.set(0,0,w,h);
        }
 else {
          selfBounds.set(mPaddingLeft,mPaddingTop,w - mPaddingRight,h - mPaddingBottom);
        }
        Gravity.apply(mForegroundGravity,foreground.getIntrinsicWidth(),foreground.getIntrinsicHeight(),selfBounds,overlayBounds);
        foreground.setBounds(overlayBounds);
      }
    }
    foreground.draw(canvas);
  }
}"
24347,"/** 
 * {@inheritDoc}
 */
@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  final Drawable foreground=mForeground;
  if (foreground != null) {
    final Rect selfBounds=mSelfBounds;
    final Rect overlayBounds=mOverlayBounds;
    if (mForegroundInPadding) {
      selfBounds.set(0,0,w,h);
    }
 else {
      selfBounds.set(mPaddingLeft,mPaddingTop,w - mPaddingRight,h - mPaddingBottom);
    }
    Gravity.apply(mForegroundGravity,foreground.getIntrinsicWidth(),foreground.getIntrinsicHeight(),selfBounds,overlayBounds);
    foreground.setBounds(overlayBounds);
  }
}","/** 
 * {@inheritDoc}
 */
@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  mForegroundBoundsChanged=true;
}"
24348,"private final void performLayoutLockedInner(){
  final int dw=mDisplay.getWidth();
  final int dh=mDisplay.getHeight();
  final int N=mWindows.size();
  int i;
  if (mLayoutNeeded) {
    mPolicy.beginLayoutLw(dw,dh);
    int topAttached=-1;
    for (i=N - 1; i >= 0; i--) {
      WindowState win=(WindowState)mWindows.get(i);
      boolean gone=win.mViewVisibility == View.GONE || !win.mRelayoutCalled || win.mRootToken.hidden;
      if (!gone || !win.mHaveFrame) {
        if (!win.mLayoutAttached) {
          mPolicy.layoutWindowLw(win,win.mAttrs,null);
        }
 else {
          if (topAttached < 0)           topAttached=i;
        }
      }
    }
    for (i=topAttached; i >= 0; i--) {
      WindowState win=(WindowState)mWindows.get(i);
      if (win.mLayoutAttached) {
        if ((win.mViewVisibility != View.GONE && win.mRelayoutCalled) || !win.mHaveFrame) {
          mPolicy.layoutWindowLw(win,win.mAttrs,win.mAttachedWindow);
        }
      }
    }
    mPolicy.finishLayoutLw();
    mLayoutNeeded=false;
  }
}","private final void performLayoutLockedInner(){
  final int dw=mDisplay.getWidth();
  final int dh=mDisplay.getHeight();
  final int N=mWindows.size();
  int repeats=0;
  int i;
  while (mLayoutNeeded) {
    mPolicy.beginLayoutLw(dw,dh);
    int topAttached=-1;
    for (i=N - 1; i >= 0; i--) {
      WindowState win=(WindowState)mWindows.get(i);
      final AppWindowToken atoken=win.mAppToken;
      final boolean gone=win.mViewVisibility == View.GONE || !win.mRelayoutCalled || win.mRootToken.hidden || (atoken != null && atoken.hiddenRequested) || !win.mPolicyVisibility || win.mAttachedHidden || win.mExiting || win.mDestroying;
      if (!gone || !win.mHaveFrame) {
        if (!win.mLayoutAttached) {
          mPolicy.layoutWindowLw(win,win.mAttrs,null);
        }
 else {
          if (topAttached < 0)           topAttached=i;
        }
      }
    }
    for (i=topAttached; i >= 0; i--) {
      WindowState win=(WindowState)mWindows.get(i);
      if (win.mLayoutAttached) {
        if ((win.mViewVisibility != View.GONE && win.mRelayoutCalled) || !win.mHaveFrame) {
          mPolicy.layoutWindowLw(win,win.mAttrs,win.mAttachedWindow);
        }
      }
    }
    if (!mPolicy.finishLayoutLw()) {
      mLayoutNeeded=false;
    }
 else     if (repeats > 2) {
      Log.w(TAG,""String_Node_Str"");
      mLayoutNeeded=false;
    }
 else {
      repeats++;
    }
  }
}"
24349,"/** 
 * <p>Forces the drawing cache to be built if the drawing cache is invalid.</p> <p>If you call   {@link #buildDrawingCache()} manually without calling{@link #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true)}, you should cleanup the cache by calling   {@link #destroyDrawingCache()} afterwards.</p>
 * @see #getDrawingCache()
 * @see #destroyDrawingCache()
 */
public void buildDrawingCache(){
  if ((mPrivateFlags & DRAWING_CACHE_VALID) == 0 || mDrawingCache == null || mDrawingCache.get() == null) {
    if (ViewDebug.TRACE_HIERARCHY) {
      ViewDebug.trace(this,ViewDebug.HierarchyTraceType.BUILD_CACHE);
    }
    if (ViewRoot.PROFILE_DRAWING) {
      EventLog.writeEvent(60002,hashCode());
    }
    final int width=mRight - mLeft;
    final int height=mBottom - mTop;
    final int drawingCacheBackgroundColor=mDrawingCacheBackgroundColor;
    final boolean opaque=drawingCacheBackgroundColor != 0 || (mBGDrawable != null && mBGDrawable.getOpacity() == PixelFormat.OPAQUE);
    if (width <= 0 || height <= 0 || (width * height * (opaque ? 2 : 4) >= ViewConfiguration.get(mContext).getScaledMaximumDrawingCacheSize())) {
      destroyDrawingCache();
      return;
    }
    boolean clear=true;
    Bitmap bitmap=mDrawingCache == null ? null : mDrawingCache.get();
    if (bitmap == null || bitmap.getWidth() != width || bitmap.getHeight() != height) {
      Bitmap.Config quality;
      if (!opaque) {
switch (mViewFlags & DRAWING_CACHE_QUALITY_MASK) {
case DRAWING_CACHE_QUALITY_AUTO:
          quality=Bitmap.Config.ARGB_8888;
        break;
case DRAWING_CACHE_QUALITY_LOW:
      quality=Bitmap.Config.ARGB_4444;
    break;
case DRAWING_CACHE_QUALITY_HIGH:
  quality=Bitmap.Config.ARGB_8888;
break;
default :
quality=Bitmap.Config.ARGB_8888;
break;
}
}
 else {
quality=Bitmap.Config.RGB_565;
}
if (bitmap != null) bitmap.recycle();
try {
bitmap=Bitmap.createBitmap(width,height,quality);
mDrawingCache=new SoftReference<Bitmap>(bitmap);
}
 catch (OutOfMemoryError e) {
mDrawingCache=null;
return;
}
clear=drawingCacheBackgroundColor != 0;
}
Canvas canvas;
final AttachInfo attachInfo=mAttachInfo;
if (attachInfo != null) {
canvas=attachInfo.mCanvas;
if (canvas == null) {
canvas=new Canvas();
}
canvas.setBitmap(bitmap);
attachInfo.mCanvas=null;
}
 else {
canvas=new Canvas(bitmap);
}
if (clear) {
bitmap.eraseColor(drawingCacheBackgroundColor);
}
computeScroll();
final int restoreCount=canvas.save();
canvas.translate(-mScrollX,-mScrollY);
mPrivateFlags|=DRAWN;
if ((mPrivateFlags & SKIP_DRAW) == SKIP_DRAW) {
if (ViewDebug.TRACE_HIERARCHY) {
ViewDebug.trace(this,ViewDebug.HierarchyTraceType.DRAW);
}
dispatchDraw(canvas);
}
 else {
draw(canvas);
}
canvas.restoreToCount(restoreCount);
if (attachInfo != null) {
attachInfo.mCanvas=canvas;
}
mPrivateFlags|=DRAWING_CACHE_VALID;
}
}","/** 
 * <p>Forces the drawing cache to be built if the drawing cache is invalid.</p> <p>If you call   {@link #buildDrawingCache()} manually without calling{@link #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true)}, you should cleanup the cache by calling   {@link #destroyDrawingCache()} afterwards.</p>
 * @see #getDrawingCache()
 * @see #destroyDrawingCache()
 */
public void buildDrawingCache(){
  if ((mPrivateFlags & DRAWING_CACHE_VALID) == 0 || mDrawingCache == null || mDrawingCache.get() == null) {
    if (ViewDebug.TRACE_HIERARCHY) {
      ViewDebug.trace(this,ViewDebug.HierarchyTraceType.BUILD_CACHE);
    }
    if (ViewRoot.PROFILE_DRAWING) {
      EventLog.writeEvent(60002,hashCode());
    }
    final int width=mRight - mLeft;
    final int height=mBottom - mTop;
    final int drawingCacheBackgroundColor=mDrawingCacheBackgroundColor;
    final boolean opaque=drawingCacheBackgroundColor != 0 || (mBGDrawable != null && mBGDrawable.getOpacity() == PixelFormat.OPAQUE);
    if (width <= 0 || height <= 0 || (width * height * (opaque ? 2 : 4) > ViewConfiguration.get(mContext).getScaledMaximumDrawingCacheSize())) {
      destroyDrawingCache();
      return;
    }
    boolean clear=true;
    Bitmap bitmap=mDrawingCache == null ? null : mDrawingCache.get();
    if (bitmap == null || bitmap.getWidth() != width || bitmap.getHeight() != height) {
      Bitmap.Config quality;
      if (!opaque) {
switch (mViewFlags & DRAWING_CACHE_QUALITY_MASK) {
case DRAWING_CACHE_QUALITY_AUTO:
          quality=Bitmap.Config.ARGB_8888;
        break;
case DRAWING_CACHE_QUALITY_LOW:
      quality=Bitmap.Config.ARGB_4444;
    break;
case DRAWING_CACHE_QUALITY_HIGH:
  quality=Bitmap.Config.ARGB_8888;
break;
default :
quality=Bitmap.Config.ARGB_8888;
break;
}
}
 else {
quality=Bitmap.Config.RGB_565;
}
if (bitmap != null) bitmap.recycle();
try {
bitmap=Bitmap.createBitmap(width,height,quality);
mDrawingCache=new SoftReference<Bitmap>(bitmap);
}
 catch (OutOfMemoryError e) {
mDrawingCache=null;
return;
}
clear=drawingCacheBackgroundColor != 0;
}
Canvas canvas;
final AttachInfo attachInfo=mAttachInfo;
if (attachInfo != null) {
canvas=attachInfo.mCanvas;
if (canvas == null) {
canvas=new Canvas();
}
canvas.setBitmap(bitmap);
attachInfo.mCanvas=null;
}
 else {
canvas=new Canvas(bitmap);
}
if (clear) {
bitmap.eraseColor(drawingCacheBackgroundColor);
}
computeScroll();
final int restoreCount=canvas.save();
canvas.translate(-mScrollX,-mScrollY);
mPrivateFlags|=DRAWN;
if ((mPrivateFlags & SKIP_DRAW) == SKIP_DRAW) {
if (ViewDebug.TRACE_HIERARCHY) {
ViewDebug.trace(this,ViewDebug.HierarchyTraceType.DRAW);
}
dispatchDraw(canvas);
}
 else {
draw(canvas);
}
canvas.restoreToCount(restoreCount);
if (attachInfo != null) {
attachInfo.mCanvas=canvas;
}
mPrivateFlags|=DRAWING_CACHE_VALID;
}
}"
24350,"public void run(){
  try {
    if (!hasCache) {
      captureView.buildDrawingCache();
    }
    cache[0]=captureView.getDrawingCache();
  }
  finally {
    latch.countDown();
  }
}","public void run(){
  try {
    cache[0]=captureView.createSnapshot(Bitmap.Config.ARGB_8888,0);
  }
 catch (  OutOfMemoryError e) {
    try {
      cache[0]=captureView.createSnapshot(Bitmap.Config.ARGB_4444,0);
    }
 catch (    OutOfMemoryError e2) {
      Log.w(""String_Node_Str"",""String_Node_Str"");
    }
  }
 finally {
    latch.countDown();
  }
}"
24351,"private static void capture(View root,final OutputStream clientStream,String parameter) throws IOException {
  final View captureView=findView(root,parameter);
  if (captureView != null) {
    final CountDownLatch latch=new CountDownLatch(1);
    final Bitmap[] cache=new Bitmap[1];
    final boolean hasCache=captureView.isDrawingCacheEnabled();
    final boolean willNotCache=captureView.willNotCacheDrawing();
    if (willNotCache) {
      captureView.setWillNotCacheDrawing(false);
    }
    root.post(new Runnable(){
      public void run(){
        try {
          if (!hasCache) {
            captureView.buildDrawingCache();
          }
          cache[0]=captureView.getDrawingCache();
        }
  finally {
          latch.countDown();
        }
      }
    }
);
    try {
      latch.await(CAPTURE_TIMEOUT,TimeUnit.MILLISECONDS);
      if (cache[0] != null) {
        BufferedOutputStream out=null;
        try {
          out=new BufferedOutputStream(clientStream,32 * 1024);
          cache[0].compress(Bitmap.CompressFormat.PNG,100,out);
          out.flush();
        }
  finally {
          if (out != null) {
            out.close();
          }
        }
      }
    }
 catch (    InterruptedException e) {
      Log.w(""String_Node_Str"",""String_Node_Str"" + captureView);
      Thread.currentThread().interrupt();
    }
 finally {
      if (willNotCache) {
        captureView.setWillNotCacheDrawing(true);
      }
      if (!hasCache) {
        captureView.destroyDrawingCache();
      }
    }
  }
}","private static void capture(View root,final OutputStream clientStream,String parameter) throws IOException {
  final View captureView=findView(root,parameter);
  if (captureView != null) {
    final CountDownLatch latch=new CountDownLatch(1);
    final Bitmap[] cache=new Bitmap[1];
    root.post(new Runnable(){
      public void run(){
        try {
          cache[0]=captureView.createSnapshot(Bitmap.Config.ARGB_8888,0);
        }
 catch (        OutOfMemoryError e) {
          try {
            cache[0]=captureView.createSnapshot(Bitmap.Config.ARGB_4444,0);
          }
 catch (          OutOfMemoryError e2) {
            Log.w(""String_Node_Str"",""String_Node_Str"");
          }
        }
 finally {
          latch.countDown();
        }
      }
    }
);
    try {
      latch.await(CAPTURE_TIMEOUT,TimeUnit.MILLISECONDS);
      if (cache[0] != null) {
        BufferedOutputStream out=null;
        try {
          out=new BufferedOutputStream(clientStream,32 * 1024);
          cache[0].compress(Bitmap.CompressFormat.PNG,100,out);
          out.flush();
        }
  finally {
          if (out != null) {
            out.close();
          }
          cache[0].recycle();
        }
      }
 else {
        Log.w(""String_Node_Str"",""String_Node_Str"");
        clientStream.close();
      }
    }
 catch (    InterruptedException e) {
      Log.w(""String_Node_Str"",""String_Node_Str"" + captureView);
      Thread.currentThread().interrupt();
    }
  }
}"
24352,"/** 
 * Called when layout of the windows is finished.  After this function has returned, all windows given to layoutWindow() <em>must</em> have had a frame assigned.
 */
public void finishLayoutLw();","/** 
 * Called when layout of the windows is finished.  After this function has returned, all windows given to layoutWindow() <em>must</em> have had a frame assigned.
 * @return Return true if layout state may have changed (so that another layout will be performed).
 */
public boolean finishLayoutLw();"
24353,"/** 
 * {@inheritDoc}
 */
@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  final int count=getChildCount();
  final int parentLeft=mPaddingLeft + mForegroundPaddingLeft;
  final int parentRight=right - left - mPaddingRight- mForegroundPaddingRight;
  final int parentTop=mPaddingTop + mForegroundPaddingTop;
  final int parentBottom=bottom - top - mPaddingBottom- mForegroundPaddingBottom;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      final int width=child.getMeasuredWidth();
      final int height=child.getMeasuredHeight();
      int childLeft=parentLeft;
      int childTop=parentTop;
      final int gravity=lp.gravity;
      if (gravity != -1) {
        final int horizontalGravity=gravity & Gravity.HORIZONTAL_GRAVITY_MASK;
        final int verticalGravity=gravity & Gravity.VERTICAL_GRAVITY_MASK;
switch (horizontalGravity) {
case Gravity.LEFT:
          childLeft=parentLeft + lp.leftMargin;
        break;
case Gravity.CENTER_HORIZONTAL:
      childLeft=parentLeft + (parentRight - parentLeft + lp.leftMargin + lp.rightMargin - width) / 2;
    break;
case Gravity.RIGHT:
  childLeft=parentRight - width - lp.rightMargin;
break;
default :
childLeft=parentLeft + lp.leftMargin;
}
switch (verticalGravity) {
case Gravity.TOP:
childTop=parentTop + lp.topMargin;
break;
case Gravity.CENTER_VERTICAL:
childTop=parentTop + (parentBottom - parentTop + lp.topMargin + lp.bottomMargin - height) / 2;
break;
case Gravity.BOTTOM:
childTop=parentBottom - height - lp.bottomMargin;
break;
default :
childTop=parentTop + lp.topMargin;
}
}
child.layout(childLeft,childTop,childLeft + width,childTop + height);
}
}
}","/** 
 * {@inheritDoc}
 */
@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  final int count=getChildCount();
  final int parentLeft=mPaddingLeft + mForegroundPaddingLeft;
  final int parentRight=right - left - mPaddingRight- mForegroundPaddingRight;
  final int parentTop=mPaddingTop + mForegroundPaddingTop;
  final int parentBottom=bottom - top - mPaddingBottom- mForegroundPaddingBottom;
  mForegroundBoundsChanged=true;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      final int width=child.getMeasuredWidth();
      final int height=child.getMeasuredHeight();
      int childLeft=parentLeft;
      int childTop=parentTop;
      final int gravity=lp.gravity;
      if (gravity != -1) {
        final int horizontalGravity=gravity & Gravity.HORIZONTAL_GRAVITY_MASK;
        final int verticalGravity=gravity & Gravity.VERTICAL_GRAVITY_MASK;
switch (horizontalGravity) {
case Gravity.LEFT:
          childLeft=parentLeft + lp.leftMargin;
        break;
case Gravity.CENTER_HORIZONTAL:
      childLeft=parentLeft + (parentRight - parentLeft + lp.leftMargin + lp.rightMargin - width) / 2;
    break;
case Gravity.RIGHT:
  childLeft=parentRight - width - lp.rightMargin;
break;
default :
childLeft=parentLeft + lp.leftMargin;
}
switch (verticalGravity) {
case Gravity.TOP:
childTop=parentTop + lp.topMargin;
break;
case Gravity.CENTER_VERTICAL:
childTop=parentTop + (parentBottom - parentTop + lp.topMargin + lp.bottomMargin - height) / 2;
break;
case Gravity.BOTTOM:
childTop=parentBottom - height - lp.bottomMargin;
break;
default :
childTop=parentTop + lp.topMargin;
}
}
child.layout(childLeft,childTop,childLeft + width,childTop + height);
}
}
}"
24354,"/** 
 * {@inheritDoc}
 */
@Override public void draw(Canvas canvas){
  super.draw(canvas);
  if (mForeground != null) {
    mForeground.draw(canvas);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void draw(Canvas canvas){
  super.draw(canvas);
  if (mForeground != null) {
    final Drawable foreground=mForeground;
    if (mForegroundBoundsChanged) {
      mForegroundBoundsChanged=false;
      if (foreground != null) {
        final Rect selfBounds=mSelfBounds;
        final Rect overlayBounds=mOverlayBounds;
        final int w=mRight - mLeft;
        final int h=mBottom - mTop;
        if (mForegroundInPadding) {
          selfBounds.set(0,0,w,h);
        }
 else {
          selfBounds.set(mPaddingLeft,mPaddingTop,w - mPaddingRight,h - mPaddingBottom);
        }
        Gravity.apply(mForegroundGravity,foreground.getIntrinsicWidth(),foreground.getIntrinsicHeight(),selfBounds,overlayBounds);
        foreground.setBounds(overlayBounds);
      }
    }
    foreground.draw(canvas);
  }
}"
24355,"/** 
 * {@inheritDoc}
 */
@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  final Drawable foreground=mForeground;
  if (foreground != null) {
    final Rect selfBounds=mSelfBounds;
    final Rect overlayBounds=mOverlayBounds;
    if (mForegroundInPadding) {
      selfBounds.set(0,0,w,h);
    }
 else {
      selfBounds.set(mPaddingLeft,mPaddingTop,w - mPaddingRight,h - mPaddingBottom);
    }
    Gravity.apply(mForegroundGravity,foreground.getIntrinsicWidth(),foreground.getIntrinsicHeight(),selfBounds,overlayBounds);
    foreground.setBounds(overlayBounds);
  }
}","/** 
 * {@inheritDoc}
 */
@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  mForegroundBoundsChanged=true;
}"
24356,"private final void performLayoutLockedInner(){
  final int dw=mDisplay.getWidth();
  final int dh=mDisplay.getHeight();
  final int N=mWindows.size();
  int i;
  if (mLayoutNeeded) {
    mPolicy.beginLayoutLw(dw,dh);
    int topAttached=-1;
    for (i=N - 1; i >= 0; i--) {
      WindowState win=(WindowState)mWindows.get(i);
      boolean gone=win.mViewVisibility == View.GONE || !win.mRelayoutCalled || win.mRootToken.hidden;
      if (!gone || !win.mHaveFrame) {
        if (!win.mLayoutAttached) {
          mPolicy.layoutWindowLw(win,win.mAttrs,null);
        }
 else {
          if (topAttached < 0)           topAttached=i;
        }
      }
    }
    for (i=topAttached; i >= 0; i--) {
      WindowState win=(WindowState)mWindows.get(i);
      if (win.mLayoutAttached) {
        if ((win.mViewVisibility != View.GONE && win.mRelayoutCalled) || !win.mHaveFrame) {
          mPolicy.layoutWindowLw(win,win.mAttrs,win.mAttachedWindow);
        }
      }
    }
    mPolicy.finishLayoutLw();
    mLayoutNeeded=false;
  }
}","private final void performLayoutLockedInner(){
  final int dw=mDisplay.getWidth();
  final int dh=mDisplay.getHeight();
  final int N=mWindows.size();
  int repeats=0;
  int i;
  while (mLayoutNeeded) {
    mPolicy.beginLayoutLw(dw,dh);
    int topAttached=-1;
    for (i=N - 1; i >= 0; i--) {
      WindowState win=(WindowState)mWindows.get(i);
      final AppWindowToken atoken=win.mAppToken;
      final boolean gone=win.mViewVisibility == View.GONE || !win.mRelayoutCalled || win.mRootToken.hidden || (atoken != null && atoken.hiddenRequested) || !win.mPolicyVisibility || win.mAttachedHidden || win.mExiting || win.mDestroying;
      if (!gone || !win.mHaveFrame) {
        if (!win.mLayoutAttached) {
          mPolicy.layoutWindowLw(win,win.mAttrs,null);
        }
 else {
          if (topAttached < 0)           topAttached=i;
        }
      }
    }
    for (i=topAttached; i >= 0; i--) {
      WindowState win=(WindowState)mWindows.get(i);
      if (win.mLayoutAttached) {
        if ((win.mViewVisibility != View.GONE && win.mRelayoutCalled) || !win.mHaveFrame) {
          mPolicy.layoutWindowLw(win,win.mAttrs,win.mAttachedWindow);
        }
      }
    }
    if (!mPolicy.finishLayoutLw()) {
      mLayoutNeeded=false;
    }
 else     if (repeats > 2) {
      Log.w(TAG,""String_Node_Str"");
      mLayoutNeeded=false;
    }
 else {
      repeats++;
    }
  }
}"
24357,"@Override public boolean requestChildRectangleOnScreen(View child,Rect rect,boolean immediate){
  rect.offset(child.getLeft() - child.getScrollX(),child.getTop() - child.getScrollY());
  int height=getHeight() - getHorizontalScrollbarHeight();
  int screenTop=mScrollY;
  int screenBottom=screenTop + height;
  int scrollYDelta=0;
  if (rect.bottom > screenBottom && rect.top > screenTop) {
    if (rect.height() > height) {
      scrollYDelta+=(rect.top - screenTop);
    }
 else {
      scrollYDelta+=(rect.bottom - screenBottom);
    }
  }
 else   if (rect.top < screenTop) {
    scrollYDelta-=(screenTop - rect.top);
  }
  int width=getWidth() - getVerticalScrollbarWidth();
  int screenLeft=mScrollX;
  int screenRight=screenLeft + width;
  int scrollXDelta=0;
  if (rect.right > screenRight && rect.left > screenLeft) {
    if (rect.width() > width) {
      scrollXDelta+=(rect.left - screenLeft);
    }
 else {
      scrollXDelta+=(rect.right - screenRight);
    }
  }
 else   if (rect.left < screenLeft) {
    scrollXDelta-=(screenLeft - rect.left);
  }
  if ((scrollYDelta | scrollXDelta) != 0) {
    return pinScrollBy(scrollXDelta,scrollYDelta,!immediate,0);
  }
  return false;
}","@Override public boolean requestChildRectangleOnScreen(View child,Rect rect,boolean immediate){
  rect.offset(child.getLeft() - child.getScrollX(),child.getTop() - child.getScrollY());
  int height=getHeight() - getHorizontalScrollbarHeight();
  int screenTop=mScrollY;
  int screenBottom=screenTop + height;
  int scrollYDelta=0;
  if (rect.bottom > screenBottom) {
    int oneThirdOfScreenHeight=height / 3;
    if (rect.height() > 2 * oneThirdOfScreenHeight) {
      scrollYDelta=rect.top - screenTop;
    }
 else {
      scrollYDelta=rect.top - (screenTop + oneThirdOfScreenHeight);
    }
  }
 else   if (rect.top < screenTop) {
    scrollYDelta=rect.top - screenTop;
  }
  int width=getWidth() - getVerticalScrollbarWidth();
  int screenLeft=mScrollX;
  int screenRight=screenLeft + width;
  int scrollXDelta=0;
  if (rect.right > screenRight && rect.left > screenLeft) {
    if (rect.width() > width) {
      scrollXDelta+=(rect.left - screenLeft);
    }
 else {
      scrollXDelta+=(rect.right - screenRight);
    }
  }
 else   if (rect.left < screenLeft) {
    scrollXDelta-=(screenLeft - rect.left);
  }
  if ((scrollYDelta | scrollXDelta) != 0) {
    return pinScrollBy(scrollXDelta,scrollYDelta,!immediate,0);
  }
  return false;
}"
24358,"/** 
 * <p>Forces the drawing cache to be built if the drawing cache is invalid.</p> <p>If you call   {@link #buildDrawingCache()} manually without calling{@link #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true)}, you should cleanup the cache by calling   {@link #destroyDrawingCache()} afterwards.</p>
 * @see #getDrawingCache()
 * @see #destroyDrawingCache()
 */
public void buildDrawingCache(){
  if ((mPrivateFlags & DRAWING_CACHE_VALID) == 0 || mDrawingCache == null || mDrawingCache.get() == null) {
    if (ViewDebug.TRACE_HIERARCHY) {
      ViewDebug.trace(this,ViewDebug.HierarchyTraceType.BUILD_CACHE);
    }
    if (ViewRoot.PROFILE_DRAWING) {
      EventLog.writeEvent(60002,hashCode());
    }
    final int width=mRight - mLeft;
    final int height=mBottom - mTop;
    final int drawingCacheBackgroundColor=mDrawingCacheBackgroundColor;
    final boolean opaque=drawingCacheBackgroundColor != 0 || (mBGDrawable != null && mBGDrawable.getOpacity() == PixelFormat.OPAQUE);
    if (width <= 0 || height <= 0 || (width * height * (opaque ? 2 : 4) >= ViewConfiguration.get(mContext).getScaledMaximumDrawingCacheSize())) {
      destroyDrawingCache();
      return;
    }
    boolean clear=true;
    Bitmap bitmap=mDrawingCache == null ? null : mDrawingCache.get();
    if (bitmap == null || bitmap.getWidth() != width || bitmap.getHeight() != height) {
      Bitmap.Config quality;
      if (!opaque) {
switch (mViewFlags & DRAWING_CACHE_QUALITY_MASK) {
case DRAWING_CACHE_QUALITY_AUTO:
          quality=Bitmap.Config.ARGB_8888;
        break;
case DRAWING_CACHE_QUALITY_LOW:
      quality=Bitmap.Config.ARGB_4444;
    break;
case DRAWING_CACHE_QUALITY_HIGH:
  quality=Bitmap.Config.ARGB_8888;
break;
default :
quality=Bitmap.Config.ARGB_8888;
break;
}
}
 else {
quality=Bitmap.Config.RGB_565;
}
if (bitmap != null) bitmap.recycle();
try {
bitmap=Bitmap.createBitmap(width,height,quality);
mDrawingCache=new SoftReference<Bitmap>(bitmap);
}
 catch (OutOfMemoryError e) {
mDrawingCache=null;
return;
}
clear=drawingCacheBackgroundColor != 0;
}
Canvas canvas;
final AttachInfo attachInfo=mAttachInfo;
if (attachInfo != null) {
canvas=attachInfo.mCanvas;
if (canvas == null) {
canvas=new Canvas();
}
canvas.setBitmap(bitmap);
attachInfo.mCanvas=null;
}
 else {
canvas=new Canvas(bitmap);
}
if (clear) {
bitmap.eraseColor(drawingCacheBackgroundColor);
}
computeScroll();
final int restoreCount=canvas.save();
canvas.translate(-mScrollX,-mScrollY);
mPrivateFlags|=DRAWN;
if ((mPrivateFlags & SKIP_DRAW) == SKIP_DRAW) {
if (ViewDebug.TRACE_HIERARCHY) {
ViewDebug.trace(this,ViewDebug.HierarchyTraceType.DRAW);
}
dispatchDraw(canvas);
}
 else {
draw(canvas);
}
canvas.restoreToCount(restoreCount);
if (attachInfo != null) {
attachInfo.mCanvas=canvas;
}
mPrivateFlags|=DRAWING_CACHE_VALID;
}
}","/** 
 * <p>Forces the drawing cache to be built if the drawing cache is invalid.</p> <p>If you call   {@link #buildDrawingCache()} manually without calling{@link #setDrawingCacheEnabled(boolean) setDrawingCacheEnabled(true)}, you should cleanup the cache by calling   {@link #destroyDrawingCache()} afterwards.</p>
 * @see #getDrawingCache()
 * @see #destroyDrawingCache()
 */
public void buildDrawingCache(){
  if ((mPrivateFlags & DRAWING_CACHE_VALID) == 0 || mDrawingCache == null || mDrawingCache.get() == null) {
    if (ViewDebug.TRACE_HIERARCHY) {
      ViewDebug.trace(this,ViewDebug.HierarchyTraceType.BUILD_CACHE);
    }
    if (ViewRoot.PROFILE_DRAWING) {
      EventLog.writeEvent(60002,hashCode());
    }
    final int width=mRight - mLeft;
    final int height=mBottom - mTop;
    final int drawingCacheBackgroundColor=mDrawingCacheBackgroundColor;
    final boolean opaque=drawingCacheBackgroundColor != 0 || (mBGDrawable != null && mBGDrawable.getOpacity() == PixelFormat.OPAQUE);
    if (width <= 0 || height <= 0 || (width * height * (opaque ? 2 : 4) > ViewConfiguration.get(mContext).getScaledMaximumDrawingCacheSize())) {
      destroyDrawingCache();
      return;
    }
    boolean clear=true;
    Bitmap bitmap=mDrawingCache == null ? null : mDrawingCache.get();
    if (bitmap == null || bitmap.getWidth() != width || bitmap.getHeight() != height) {
      Bitmap.Config quality;
      if (!opaque) {
switch (mViewFlags & DRAWING_CACHE_QUALITY_MASK) {
case DRAWING_CACHE_QUALITY_AUTO:
          quality=Bitmap.Config.ARGB_8888;
        break;
case DRAWING_CACHE_QUALITY_LOW:
      quality=Bitmap.Config.ARGB_4444;
    break;
case DRAWING_CACHE_QUALITY_HIGH:
  quality=Bitmap.Config.ARGB_8888;
break;
default :
quality=Bitmap.Config.ARGB_8888;
break;
}
}
 else {
quality=Bitmap.Config.RGB_565;
}
if (bitmap != null) bitmap.recycle();
try {
bitmap=Bitmap.createBitmap(width,height,quality);
mDrawingCache=new SoftReference<Bitmap>(bitmap);
}
 catch (OutOfMemoryError e) {
mDrawingCache=null;
return;
}
clear=drawingCacheBackgroundColor != 0;
}
Canvas canvas;
final AttachInfo attachInfo=mAttachInfo;
if (attachInfo != null) {
canvas=attachInfo.mCanvas;
if (canvas == null) {
canvas=new Canvas();
}
canvas.setBitmap(bitmap);
attachInfo.mCanvas=null;
}
 else {
canvas=new Canvas(bitmap);
}
if (clear) {
bitmap.eraseColor(drawingCacheBackgroundColor);
}
computeScroll();
final int restoreCount=canvas.save();
canvas.translate(-mScrollX,-mScrollY);
mPrivateFlags|=DRAWN;
if ((mPrivateFlags & SKIP_DRAW) == SKIP_DRAW) {
if (ViewDebug.TRACE_HIERARCHY) {
ViewDebug.trace(this,ViewDebug.HierarchyTraceType.DRAW);
}
dispatchDraw(canvas);
}
 else {
draw(canvas);
}
canvas.restoreToCount(restoreCount);
if (attachInfo != null) {
attachInfo.mCanvas=canvas;
}
mPrivateFlags|=DRAWING_CACHE_VALID;
}
}"
24359,"public void run(){
  try {
    if (!hasCache) {
      captureView.buildDrawingCache();
    }
    cache[0]=captureView.getDrawingCache();
  }
  finally {
    latch.countDown();
  }
}","public void run(){
  try {
    cache[0]=captureView.createSnapshot(Bitmap.Config.ARGB_8888,0);
  }
 catch (  OutOfMemoryError e) {
    try {
      cache[0]=captureView.createSnapshot(Bitmap.Config.ARGB_4444,0);
    }
 catch (    OutOfMemoryError e2) {
      Log.w(""String_Node_Str"",""String_Node_Str"");
    }
  }
 finally {
    latch.countDown();
  }
}"
24360,"private static void capture(View root,final OutputStream clientStream,String parameter) throws IOException {
  final View captureView=findView(root,parameter);
  if (captureView != null) {
    final CountDownLatch latch=new CountDownLatch(1);
    final Bitmap[] cache=new Bitmap[1];
    final boolean hasCache=captureView.isDrawingCacheEnabled();
    final boolean willNotCache=captureView.willNotCacheDrawing();
    if (willNotCache) {
      captureView.setWillNotCacheDrawing(false);
    }
    root.post(new Runnable(){
      public void run(){
        try {
          if (!hasCache) {
            captureView.buildDrawingCache();
          }
          cache[0]=captureView.getDrawingCache();
        }
  finally {
          latch.countDown();
        }
      }
    }
);
    try {
      latch.await(CAPTURE_TIMEOUT,TimeUnit.MILLISECONDS);
      if (cache[0] != null) {
        BufferedOutputStream out=null;
        try {
          out=new BufferedOutputStream(clientStream,32 * 1024);
          cache[0].compress(Bitmap.CompressFormat.PNG,100,out);
          out.flush();
        }
  finally {
          if (out != null) {
            out.close();
          }
        }
      }
    }
 catch (    InterruptedException e) {
      Log.w(""String_Node_Str"",""String_Node_Str"" + captureView);
      Thread.currentThread().interrupt();
    }
 finally {
      if (willNotCache) {
        captureView.setWillNotCacheDrawing(true);
      }
      if (!hasCache) {
        captureView.destroyDrawingCache();
      }
    }
  }
}","private static void capture(View root,final OutputStream clientStream,String parameter) throws IOException {
  final View captureView=findView(root,parameter);
  if (captureView != null) {
    final CountDownLatch latch=new CountDownLatch(1);
    final Bitmap[] cache=new Bitmap[1];
    root.post(new Runnable(){
      public void run(){
        try {
          cache[0]=captureView.createSnapshot(Bitmap.Config.ARGB_8888,0);
        }
 catch (        OutOfMemoryError e) {
          try {
            cache[0]=captureView.createSnapshot(Bitmap.Config.ARGB_4444,0);
          }
 catch (          OutOfMemoryError e2) {
            Log.w(""String_Node_Str"",""String_Node_Str"");
          }
        }
 finally {
          latch.countDown();
        }
      }
    }
);
    try {
      latch.await(CAPTURE_TIMEOUT,TimeUnit.MILLISECONDS);
      if (cache[0] != null) {
        BufferedOutputStream out=null;
        try {
          out=new BufferedOutputStream(clientStream,32 * 1024);
          cache[0].compress(Bitmap.CompressFormat.PNG,100,out);
          out.flush();
        }
  finally {
          if (out != null) {
            out.close();
          }
          cache[0].recycle();
        }
      }
 else {
        Log.w(""String_Node_Str"",""String_Node_Str"");
        clientStream.close();
      }
    }
 catch (    InterruptedException e) {
      Log.w(""String_Node_Str"",""String_Node_Str"" + captureView);
      Thread.currentThread().interrupt();
    }
  }
}"
24361,"/** 
 * Called when layout of the windows is finished.  After this function has returned, all windows given to layoutWindow() <em>must</em> have had a frame assigned.
 */
public void finishLayoutLw();","/** 
 * Called when layout of the windows is finished.  After this function has returned, all windows given to layoutWindow() <em>must</em> have had a frame assigned.
 * @return Return true if layout state may have changed (so that another layout will be performed).
 */
public boolean finishLayoutLw();"
24362,"/** 
 * {@inheritDoc}
 */
@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  final int count=getChildCount();
  final int parentLeft=mPaddingLeft + mForegroundPaddingLeft;
  final int parentRight=right - left - mPaddingRight- mForegroundPaddingRight;
  final int parentTop=mPaddingTop + mForegroundPaddingTop;
  final int parentBottom=bottom - top - mPaddingBottom- mForegroundPaddingBottom;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      final int width=child.getMeasuredWidth();
      final int height=child.getMeasuredHeight();
      int childLeft=parentLeft;
      int childTop=parentTop;
      final int gravity=lp.gravity;
      if (gravity != -1) {
        final int horizontalGravity=gravity & Gravity.HORIZONTAL_GRAVITY_MASK;
        final int verticalGravity=gravity & Gravity.VERTICAL_GRAVITY_MASK;
switch (horizontalGravity) {
case Gravity.LEFT:
          childLeft=parentLeft + lp.leftMargin;
        break;
case Gravity.CENTER_HORIZONTAL:
      childLeft=parentLeft + (parentRight - parentLeft + lp.leftMargin + lp.rightMargin - width) / 2;
    break;
case Gravity.RIGHT:
  childLeft=parentRight - width - lp.rightMargin;
break;
default :
childLeft=parentLeft + lp.leftMargin;
}
switch (verticalGravity) {
case Gravity.TOP:
childTop=parentTop + lp.topMargin;
break;
case Gravity.CENTER_VERTICAL:
childTop=parentTop + (parentBottom - parentTop + lp.topMargin + lp.bottomMargin - height) / 2;
break;
case Gravity.BOTTOM:
childTop=parentBottom - height - lp.bottomMargin;
break;
default :
childTop=parentTop + lp.topMargin;
}
}
child.layout(childLeft,childTop,childLeft + width,childTop + height);
}
}
}","/** 
 * {@inheritDoc}
 */
@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  final int count=getChildCount();
  final int parentLeft=mPaddingLeft + mForegroundPaddingLeft;
  final int parentRight=right - left - mPaddingRight- mForegroundPaddingRight;
  final int parentTop=mPaddingTop + mForegroundPaddingTop;
  final int parentBottom=bottom - top - mPaddingBottom- mForegroundPaddingBottom;
  mForegroundBoundsChanged=true;
  for (int i=0; i < count; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() != GONE) {
      final LayoutParams lp=(LayoutParams)child.getLayoutParams();
      final int width=child.getMeasuredWidth();
      final int height=child.getMeasuredHeight();
      int childLeft=parentLeft;
      int childTop=parentTop;
      final int gravity=lp.gravity;
      if (gravity != -1) {
        final int horizontalGravity=gravity & Gravity.HORIZONTAL_GRAVITY_MASK;
        final int verticalGravity=gravity & Gravity.VERTICAL_GRAVITY_MASK;
switch (horizontalGravity) {
case Gravity.LEFT:
          childLeft=parentLeft + lp.leftMargin;
        break;
case Gravity.CENTER_HORIZONTAL:
      childLeft=parentLeft + (parentRight - parentLeft + lp.leftMargin + lp.rightMargin - width) / 2;
    break;
case Gravity.RIGHT:
  childLeft=parentRight - width - lp.rightMargin;
break;
default :
childLeft=parentLeft + lp.leftMargin;
}
switch (verticalGravity) {
case Gravity.TOP:
childTop=parentTop + lp.topMargin;
break;
case Gravity.CENTER_VERTICAL:
childTop=parentTop + (parentBottom - parentTop + lp.topMargin + lp.bottomMargin - height) / 2;
break;
case Gravity.BOTTOM:
childTop=parentBottom - height - lp.bottomMargin;
break;
default :
childTop=parentTop + lp.topMargin;
}
}
child.layout(childLeft,childTop,childLeft + width,childTop + height);
}
}
}"
24363,"/** 
 * {@inheritDoc}
 */
@Override public void draw(Canvas canvas){
  super.draw(canvas);
  if (mForeground != null) {
    mForeground.draw(canvas);
  }
}","/** 
 * {@inheritDoc}
 */
@Override public void draw(Canvas canvas){
  super.draw(canvas);
  if (mForeground != null) {
    final Drawable foreground=mForeground;
    if (mForegroundBoundsChanged) {
      mForegroundBoundsChanged=false;
      if (foreground != null) {
        final Rect selfBounds=mSelfBounds;
        final Rect overlayBounds=mOverlayBounds;
        final int w=mRight - mLeft;
        final int h=mBottom - mTop;
        if (mForegroundInPadding) {
          selfBounds.set(0,0,w,h);
        }
 else {
          selfBounds.set(mPaddingLeft,mPaddingTop,w - mPaddingRight,h - mPaddingBottom);
        }
        Gravity.apply(mForegroundGravity,foreground.getIntrinsicWidth(),foreground.getIntrinsicHeight(),selfBounds,overlayBounds);
        foreground.setBounds(overlayBounds);
      }
    }
    foreground.draw(canvas);
  }
}"
24364,"/** 
 * {@inheritDoc}
 */
@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  final Drawable foreground=mForeground;
  if (foreground != null) {
    final Rect selfBounds=mSelfBounds;
    final Rect overlayBounds=mOverlayBounds;
    if (mForegroundInPadding) {
      selfBounds.set(0,0,w,h);
    }
 else {
      selfBounds.set(mPaddingLeft,mPaddingTop,w - mPaddingRight,h - mPaddingBottom);
    }
    Gravity.apply(mForegroundGravity,foreground.getIntrinsicWidth(),foreground.getIntrinsicHeight(),selfBounds,overlayBounds);
    foreground.setBounds(overlayBounds);
  }
}","/** 
 * {@inheritDoc}
 */
@Override protected void onSizeChanged(int w,int h,int oldw,int oldh){
  super.onSizeChanged(w,h,oldw,oldh);
  mForegroundBoundsChanged=true;
}"
24365,"private final void performLayoutLockedInner(){
  final int dw=mDisplay.getWidth();
  final int dh=mDisplay.getHeight();
  final int N=mWindows.size();
  int i;
  if (mLayoutNeeded) {
    mPolicy.beginLayoutLw(dw,dh);
    int topAttached=-1;
    for (i=N - 1; i >= 0; i--) {
      WindowState win=(WindowState)mWindows.get(i);
      boolean gone=win.mViewVisibility == View.GONE || !win.mRelayoutCalled || win.mRootToken.hidden;
      if (!gone || !win.mHaveFrame) {
        if (!win.mLayoutAttached) {
          mPolicy.layoutWindowLw(win,win.mAttrs,null);
        }
 else {
          if (topAttached < 0)           topAttached=i;
        }
      }
    }
    for (i=topAttached; i >= 0; i--) {
      WindowState win=(WindowState)mWindows.get(i);
      if (win.mLayoutAttached) {
        if ((win.mViewVisibility != View.GONE && win.mRelayoutCalled) || !win.mHaveFrame) {
          mPolicy.layoutWindowLw(win,win.mAttrs,win.mAttachedWindow);
        }
      }
    }
    mPolicy.finishLayoutLw();
    mLayoutNeeded=false;
  }
}","private final void performLayoutLockedInner(){
  final int dw=mDisplay.getWidth();
  final int dh=mDisplay.getHeight();
  final int N=mWindows.size();
  int repeats=0;
  int i;
  while (mLayoutNeeded) {
    mPolicy.beginLayoutLw(dw,dh);
    int topAttached=-1;
    for (i=N - 1; i >= 0; i--) {
      WindowState win=(WindowState)mWindows.get(i);
      final AppWindowToken atoken=win.mAppToken;
      final boolean gone=win.mViewVisibility == View.GONE || !win.mRelayoutCalled || win.mRootToken.hidden || (atoken != null && atoken.hiddenRequested) || !win.mPolicyVisibility || win.mAttachedHidden || win.mExiting || win.mDestroying;
      if (!gone || !win.mHaveFrame) {
        if (!win.mLayoutAttached) {
          mPolicy.layoutWindowLw(win,win.mAttrs,null);
        }
 else {
          if (topAttached < 0)           topAttached=i;
        }
      }
    }
    for (i=topAttached; i >= 0; i--) {
      WindowState win=(WindowState)mWindows.get(i);
      if (win.mLayoutAttached) {
        if ((win.mViewVisibility != View.GONE && win.mRelayoutCalled) || !win.mHaveFrame) {
          mPolicy.layoutWindowLw(win,win.mAttrs,win.mAttachedWindow);
        }
      }
    }
    if (!mPolicy.finishLayoutLw()) {
      mLayoutNeeded=false;
    }
 else     if (repeats > 2) {
      Log.w(TAG,""String_Node_Str"");
      mLayoutNeeded=false;
    }
 else {
      repeats++;
    }
  }
}"
24366,"/** 
 * {@inheritDoc} 
 */
public boolean finishAnimationLw(){
  boolean changed=false;
  boolean hiding=false;
  if (mStatusBar != null) {
    if (mForceStatusBar) {
      changed|=mStatusBar.showLw(true);
    }
 else     if (mTopFullscreenOpaqueWindowState != null) {
      WindowManager.LayoutParams lp=mTopFullscreenOpaqueWindowState.getAttrs();
      boolean hideStatusBar=(lp.flags & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0;
      if (hideStatusBar) {
        changed|=mStatusBar.hideLw(true);
        hiding=true;
      }
 else {
        changed|=mStatusBar.showLw(true);
      }
    }
  }
  if (changed && hiding) {
    IStatusBar sbs=IStatusBar.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    if (sbs != null) {
      try {
        sbs.deactivate();
      }
 catch (      RemoteException e) {
      }
    }
  }
  return changed;
}","/** 
 * {@inheritDoc} 
 */
public boolean finishAnimationLw(){
  return false;
}"
24367,"/** 
 * {@inheritDoc} 
 */
public void layoutWindowLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (win == mStatusBar) {
    return;
  }
  if (false) {
    if (""String_Node_Str"".equals(attrs.packageName) && attrs.type == WindowManager.LayoutParams.TYPE_APPLICATION_PANEL) {
      Log.i(TAG,""String_Node_Str"");
    }
  }
  final int fl=attrs.flags;
  final int sim=attrs.softInputMode;
  final Rect pf=mTmpParentFrame;
  final Rect df=mTmpDisplayFrame;
  final Rect cf=mTmpContentFrame;
  final Rect vf=mTmpVisibleFrame;
  if (attrs.type == TYPE_INPUT_METHOD) {
    pf.left=df.left=cf.left=vf.left=mDockLeft;
    pf.top=df.top=cf.top=vf.top=mDockTop;
    pf.right=df.right=cf.right=vf.right=mDockRight;
    pf.bottom=df.bottom=cf.bottom=vf.bottom=mDockBottom;
    attrs.gravity=Gravity.BOTTOM;
    mDockLayer=win.getSurfaceLayer();
  }
 else {
    if ((fl & (FLAG_LAYOUT_IN_SCREEN | FLAG_FULLSCREEN | FLAG_LAYOUT_INSET_DECOR)) == (FLAG_LAYOUT_IN_SCREEN | FLAG_LAYOUT_INSET_DECOR)) {
      if (attached != null) {
        setAttachedWindowFrames(win,fl,sim,attached,true,pf,df,cf,vf);
      }
 else {
        pf.left=df.left=0;
        pf.top=df.top=0;
        pf.right=df.right=mW;
        pf.bottom=df.bottom=mH;
        if ((sim & SOFT_INPUT_MASK_ADJUST) != SOFT_INPUT_ADJUST_RESIZE) {
          cf.left=mDockLeft;
          cf.top=mDockTop;
          cf.right=mDockRight;
          cf.bottom=mDockBottom;
        }
 else {
          cf.left=mContentLeft;
          cf.top=mContentTop;
          cf.right=mContentRight;
          cf.bottom=mContentBottom;
        }
        vf.left=mCurLeft;
        vf.top=mCurTop;
        vf.right=mCurRight;
        vf.bottom=mCurBottom;
      }
    }
 else     if ((fl & FLAG_LAYOUT_IN_SCREEN) != 0) {
      pf.left=df.left=cf.left=0;
      pf.top=df.top=cf.top=0;
      pf.right=df.right=cf.right=mW;
      pf.bottom=df.bottom=cf.bottom=mH;
      vf.left=mCurLeft;
      vf.top=mCurTop;
      vf.right=mCurRight;
      vf.bottom=mCurBottom;
    }
 else     if (attached != null) {
      setAttachedWindowFrames(win,fl,sim,attached,false,pf,df,cf,vf);
    }
 else {
      pf.left=mContentLeft;
      pf.top=mContentTop;
      pf.right=mContentRight;
      pf.bottom=mContentBottom;
      if ((sim & SOFT_INPUT_MASK_ADJUST) != SOFT_INPUT_ADJUST_RESIZE) {
        df.left=cf.left=mDockLeft;
        df.top=cf.top=mDockTop;
        df.right=cf.right=mDockRight;
        df.bottom=cf.bottom=mDockBottom;
      }
 else {
        df.left=cf.left=mContentLeft;
        df.top=cf.top=mContentTop;
        df.right=cf.right=mContentRight;
        df.bottom=cf.bottom=mContentBottom;
      }
      vf.left=mCurLeft;
      vf.top=mCurTop;
      vf.right=mCurRight;
      vf.bottom=mCurBottom;
    }
  }
  if ((fl & FLAG_LAYOUT_NO_LIMITS) != 0) {
    df.left=df.top=cf.left=cf.top=vf.left=vf.top=-10000;
    df.right=df.bottom=cf.right=cf.bottom=vf.right=vf.bottom=10000;
  }
  if (DEBUG_LAYOUT)   Log.v(TAG,""String_Node_Str"" + attrs.getTitle() + ""String_Node_Str""+ Integer.toHexString(sim)+ ""String_Node_Str""+ pf.toShortString()+ ""String_Node_Str""+ df.toShortString()+ ""String_Node_Str""+ cf.toShortString()+ ""String_Node_Str""+ vf.toShortString());
  if (false) {
    if (""String_Node_Str"".equals(attrs.packageName) && attrs.type == WindowManager.LayoutParams.TYPE_APPLICATION_PANEL) {
      if (true || localLOGV)       Log.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ Integer.toHexString(sim)+ ""String_Node_Str""+ pf.toShortString()+ ""String_Node_Str""+ df.toShortString()+ ""String_Node_Str""+ cf.toShortString()+ ""String_Node_Str""+ vf.toShortString());
    }
  }
  win.computeFrameLw(pf,df,cf,vf);
  if (attrs.type == TYPE_INPUT_METHOD && !win.getGivenInsetsPendingLw()) {
    int top=win.getContentFrameLw().top;
    top+=win.getGivenContentInsetsLw().top;
    if (mContentBottom > top) {
      mContentBottom=top;
    }
    top=win.getVisibleFrameLw().top;
    top+=win.getGivenVisibleInsetsLw().top;
    if (mCurBottom > top) {
      mCurBottom=top;
    }
    if (DEBUG_LAYOUT)     Log.v(TAG,""String_Node_Str"" + mDockBottom + ""String_Node_Str""+ mContentBottom+ ""String_Node_Str""+ mCurBottom);
  }
}","/** 
 * {@inheritDoc} 
 */
public void layoutWindowLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (win == mStatusBar) {
    return;
  }
  if (false) {
    if (""String_Node_Str"".equals(attrs.packageName) && attrs.type == WindowManager.LayoutParams.TYPE_APPLICATION_PANEL) {
      Log.i(TAG,""String_Node_Str"");
    }
  }
  final int fl=attrs.flags;
  final int sim=attrs.softInputMode;
  final Rect pf=mTmpParentFrame;
  final Rect df=mTmpDisplayFrame;
  final Rect cf=mTmpContentFrame;
  final Rect vf=mTmpVisibleFrame;
  if (attrs.type == TYPE_INPUT_METHOD) {
    pf.left=df.left=cf.left=vf.left=mDockLeft;
    pf.top=df.top=cf.top=vf.top=mDockTop;
    pf.right=df.right=cf.right=vf.right=mDockRight;
    pf.bottom=df.bottom=cf.bottom=vf.bottom=mDockBottom;
    attrs.gravity=Gravity.BOTTOM;
    mDockLayer=win.getSurfaceLayer();
  }
 else {
    if ((fl & (FLAG_LAYOUT_IN_SCREEN | FLAG_FULLSCREEN | FLAG_LAYOUT_INSET_DECOR)) == (FLAG_LAYOUT_IN_SCREEN | FLAG_LAYOUT_INSET_DECOR)) {
      if (attached != null) {
        setAttachedWindowFrames(win,fl,sim,attached,true,pf,df,cf,vf);
      }
 else {
        pf.left=df.left=0;
        pf.top=df.top=0;
        pf.right=df.right=mW;
        pf.bottom=df.bottom=mH;
        if ((sim & SOFT_INPUT_MASK_ADJUST) != SOFT_INPUT_ADJUST_RESIZE) {
          cf.left=mDockLeft;
          cf.top=mDockTop;
          cf.right=mDockRight;
          cf.bottom=mDockBottom;
        }
 else {
          cf.left=mContentLeft;
          cf.top=mContentTop;
          cf.right=mContentRight;
          cf.bottom=mContentBottom;
        }
        vf.left=mCurLeft;
        vf.top=mCurTop;
        vf.right=mCurRight;
        vf.bottom=mCurBottom;
      }
    }
 else     if ((fl & FLAG_LAYOUT_IN_SCREEN) != 0) {
      pf.left=df.left=cf.left=0;
      pf.top=df.top=cf.top=0;
      pf.right=df.right=cf.right=mW;
      pf.bottom=df.bottom=cf.bottom=mH;
      vf.left=mCurLeft;
      vf.top=mCurTop;
      vf.right=mCurRight;
      vf.bottom=mCurBottom;
    }
 else     if (attached != null) {
      setAttachedWindowFrames(win,fl,sim,attached,false,pf,df,cf,vf);
    }
 else {
      pf.left=mContentLeft;
      pf.top=mContentTop;
      pf.right=mContentRight;
      pf.bottom=mContentBottom;
      if ((sim & SOFT_INPUT_MASK_ADJUST) != SOFT_INPUT_ADJUST_RESIZE) {
        df.left=cf.left=mDockLeft;
        df.top=cf.top=mDockTop;
        df.right=cf.right=mDockRight;
        df.bottom=cf.bottom=mDockBottom;
      }
 else {
        df.left=cf.left=mContentLeft;
        df.top=cf.top=mContentTop;
        df.right=cf.right=mContentRight;
        df.bottom=cf.bottom=mContentBottom;
      }
      vf.left=mCurLeft;
      vf.top=mCurTop;
      vf.right=mCurRight;
      vf.bottom=mCurBottom;
    }
  }
  if ((fl & FLAG_LAYOUT_NO_LIMITS) != 0) {
    df.left=df.top=cf.left=cf.top=vf.left=vf.top=-10000;
    df.right=df.bottom=cf.right=cf.bottom=vf.right=vf.bottom=10000;
  }
  if (DEBUG_LAYOUT)   Log.v(TAG,""String_Node_Str"" + attrs.getTitle() + ""String_Node_Str""+ Integer.toHexString(sim)+ ""String_Node_Str""+ pf.toShortString()+ ""String_Node_Str""+ df.toShortString()+ ""String_Node_Str""+ cf.toShortString()+ ""String_Node_Str""+ vf.toShortString());
  if (false) {
    if (""String_Node_Str"".equals(attrs.packageName) && attrs.type == WindowManager.LayoutParams.TYPE_APPLICATION_PANEL) {
      if (true || localLOGV)       Log.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ Integer.toHexString(sim)+ ""String_Node_Str""+ pf.toShortString()+ ""String_Node_Str""+ df.toShortString()+ ""String_Node_Str""+ cf.toShortString()+ ""String_Node_Str""+ vf.toShortString());
    }
  }
  win.computeFrameLw(pf,df,cf,vf);
  if (win.isVisibleLw()) {
    if ((attrs.flags & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      mForceStatusBar=true;
    }
 else     if (mTopFullscreenOpaqueWindowState == null && attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type <= LAST_APPLICATION_WINDOW && win.fillsScreenLw(mW,mH,false,false)) {
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"" + win);
      mTopFullscreenOpaqueWindowState=win;
    }
  }
  if (attrs.type == TYPE_INPUT_METHOD && !win.getGivenInsetsPendingLw()) {
    int top=win.getContentFrameLw().top;
    top+=win.getGivenContentInsetsLw().top;
    if (mContentBottom > top) {
      mContentBottom=top;
    }
    top=win.getVisibleFrameLw().top;
    top+=win.getGivenVisibleInsetsLw().top;
    if (mCurBottom > top) {
      mCurBottom=top;
    }
    if (DEBUG_LAYOUT)     Log.v(TAG,""String_Node_Str"" + mDockBottom + ""String_Node_Str""+ mContentBottom+ ""String_Node_Str""+ mCurBottom);
  }
}"
24368,"/** 
 * {@inheritDoc} 
 */
public void beginLayoutLw(int displayWidth,int displayHeight){
  mW=displayWidth;
  mH=displayHeight;
  mDockLeft=mContentLeft=mCurLeft=0;
  mDockTop=mContentTop=mCurTop=0;
  mDockRight=mContentRight=mCurRight=displayWidth;
  mDockBottom=mContentBottom=mCurBottom=displayHeight;
  mDockLayer=0x10000000;
  if (mStatusBar != null) {
    final Rect pf=mTmpParentFrame;
    final Rect df=mTmpDisplayFrame;
    final Rect vf=mTmpVisibleFrame;
    pf.left=df.left=vf.left=0;
    pf.top=df.top=vf.top=0;
    pf.right=df.right=vf.right=displayWidth;
    pf.bottom=df.bottom=vf.bottom=displayHeight;
    mStatusBar.computeFrameLw(pf,df,vf,vf);
    if (mStatusBar.isVisibleLw()) {
      mDockTop=mContentTop=mCurTop=mStatusBar.getFrameLw().bottom;
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"" + mDockBottom + ""String_Node_Str""+ mContentBottom+ ""String_Node_Str""+ mCurBottom);
    }
  }
}","/** 
 * {@inheritDoc} 
 */
public void beginLayoutLw(int displayWidth,int displayHeight){
  mW=displayWidth;
  mH=displayHeight;
  mDockLeft=mContentLeft=mCurLeft=0;
  mDockTop=mContentTop=mCurTop=0;
  mDockRight=mContentRight=mCurRight=displayWidth;
  mDockBottom=mContentBottom=mCurBottom=displayHeight;
  mDockLayer=0x10000000;
  mTopFullscreenOpaqueWindowState=null;
  mForceStatusBar=false;
  if (mStatusBar != null) {
    final Rect pf=mTmpParentFrame;
    final Rect df=mTmpDisplayFrame;
    final Rect vf=mTmpVisibleFrame;
    pf.left=df.left=vf.left=0;
    pf.top=df.top=vf.top=0;
    pf.right=df.right=vf.right=displayWidth;
    pf.bottom=df.bottom=vf.bottom=displayHeight;
    mStatusBar.computeFrameLw(pf,df,vf,vf);
    if (mStatusBar.isVisibleLw()) {
      mDockTop=mContentTop=mCurTop=mStatusBar.getFrameLw().bottom;
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"" + mDockBottom + ""String_Node_Str""+ mContentBottom+ ""String_Node_Str""+ mCurBottom);
    }
  }
}"
24369,"/** 
 * {@inheritDoc} 
 */
public void beginAnimationLw(int displayWidth,int displayHeight){
  mTopFullscreenOpaqueWindowState=null;
  mForceStatusBar=false;
}","/** 
 * {@inheritDoc} 
 */
public void beginAnimationLw(int displayWidth,int displayHeight){
}"
24370,"/** 
 * {@inheritDoc} 
 */
public void animatingWindowLw(WindowState win,WindowManager.LayoutParams attrs){
  if (win.isVisibleLw()) {
    if ((attrs.flags & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      mForceStatusBar=true;
    }
 else     if (mTopFullscreenOpaqueWindowState == null && attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type <= LAST_APPLICATION_WINDOW && win.fillsScreenLw(mW,mH,true,false) && win.isVisibleLw()) {
      mTopFullscreenOpaqueWindowState=win;
    }
  }
}","/** 
 * {@inheritDoc} 
 */
public void animatingWindowLw(WindowState win,WindowManager.LayoutParams attrs){
}"
24371,"/** 
 * {@inheritDoc} 
 */
public void finishLayoutLw(){
}","/** 
 * {@inheritDoc} 
 */
public boolean finishLayoutLw(){
  boolean changed=false;
  boolean hiding=false;
  if (mStatusBar != null) {
    if (mForceStatusBar) {
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"");
      changed|=mStatusBar.showLw(true);
    }
 else     if (mTopFullscreenOpaqueWindowState != null) {
      WindowManager.LayoutParams lp=mTopFullscreenOpaqueWindowState.getAttrs();
      boolean hideStatusBar=(lp.flags & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0;
      if (hideStatusBar) {
        if (DEBUG_LAYOUT)         Log.v(TAG,""String_Node_Str"");
        changed|=mStatusBar.hideLw(true);
        hiding=true;
      }
 else {
        if (DEBUG_LAYOUT)         Log.v(TAG,""String_Node_Str"");
        changed|=mStatusBar.showLw(true);
      }
    }
  }
  if (changed && hiding) {
    IStatusBar sbs=IStatusBar.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    if (sbs != null) {
      try {
        sbs.deactivate();
      }
 catch (      RemoteException e) {
      }
    }
  }
  return changed;
}"
24372,"/** 
 * {@inheritDoc} 
 */
public boolean finishAnimationLw(){
  boolean changed=false;
  boolean hiding=false;
  if (mStatusBar != null) {
    if (mForceStatusBar) {
      changed|=mStatusBar.showLw(true);
    }
 else     if (mTopFullscreenOpaqueWindowState != null) {
      WindowManager.LayoutParams lp=mTopFullscreenOpaqueWindowState.getAttrs();
      boolean hideStatusBar=(lp.flags & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0;
      if (hideStatusBar) {
        changed|=mStatusBar.hideLw(true);
        hiding=true;
      }
 else {
        changed|=mStatusBar.showLw(true);
      }
    }
  }
  if (changed && hiding) {
    IStatusBar sbs=IStatusBar.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    if (sbs != null) {
      try {
        sbs.deactivate();
      }
 catch (      RemoteException e) {
      }
    }
  }
  return changed;
}","/** 
 * {@inheritDoc} 
 */
public boolean finishAnimationLw(){
  return false;
}"
24373,"/** 
 * {@inheritDoc} 
 */
public void layoutWindowLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (win == mStatusBar) {
    return;
  }
  if (false) {
    if (""String_Node_Str"".equals(attrs.packageName) && attrs.type == WindowManager.LayoutParams.TYPE_APPLICATION_PANEL) {
      Log.i(TAG,""String_Node_Str"");
    }
  }
  final int fl=attrs.flags;
  final int sim=attrs.softInputMode;
  final Rect pf=mTmpParentFrame;
  final Rect df=mTmpDisplayFrame;
  final Rect cf=mTmpContentFrame;
  final Rect vf=mTmpVisibleFrame;
  if (attrs.type == TYPE_INPUT_METHOD) {
    pf.left=df.left=cf.left=vf.left=mDockLeft;
    pf.top=df.top=cf.top=vf.top=mDockTop;
    pf.right=df.right=cf.right=vf.right=mDockRight;
    pf.bottom=df.bottom=cf.bottom=vf.bottom=mDockBottom;
    attrs.gravity=Gravity.BOTTOM;
    mDockLayer=win.getSurfaceLayer();
  }
 else {
    if ((fl & (FLAG_LAYOUT_IN_SCREEN | FLAG_FULLSCREEN | FLAG_LAYOUT_INSET_DECOR)) == (FLAG_LAYOUT_IN_SCREEN | FLAG_LAYOUT_INSET_DECOR)) {
      if (attached != null) {
        setAttachedWindowFrames(win,fl,sim,attached,true,pf,df,cf,vf);
      }
 else {
        pf.left=df.left=0;
        pf.top=df.top=0;
        pf.right=df.right=mW;
        pf.bottom=df.bottom=mH;
        if ((sim & SOFT_INPUT_MASK_ADJUST) != SOFT_INPUT_ADJUST_RESIZE) {
          cf.left=mDockLeft;
          cf.top=mDockTop;
          cf.right=mDockRight;
          cf.bottom=mDockBottom;
        }
 else {
          cf.left=mContentLeft;
          cf.top=mContentTop;
          cf.right=mContentRight;
          cf.bottom=mContentBottom;
        }
        vf.left=mCurLeft;
        vf.top=mCurTop;
        vf.right=mCurRight;
        vf.bottom=mCurBottom;
      }
    }
 else     if ((fl & FLAG_LAYOUT_IN_SCREEN) != 0) {
      pf.left=df.left=cf.left=0;
      pf.top=df.top=cf.top=0;
      pf.right=df.right=cf.right=mW;
      pf.bottom=df.bottom=cf.bottom=mH;
      vf.left=mCurLeft;
      vf.top=mCurTop;
      vf.right=mCurRight;
      vf.bottom=mCurBottom;
    }
 else     if (attached != null) {
      setAttachedWindowFrames(win,fl,sim,attached,false,pf,df,cf,vf);
    }
 else {
      pf.left=mContentLeft;
      pf.top=mContentTop;
      pf.right=mContentRight;
      pf.bottom=mContentBottom;
      if ((sim & SOFT_INPUT_MASK_ADJUST) != SOFT_INPUT_ADJUST_RESIZE) {
        df.left=cf.left=mDockLeft;
        df.top=cf.top=mDockTop;
        df.right=cf.right=mDockRight;
        df.bottom=cf.bottom=mDockBottom;
      }
 else {
        df.left=cf.left=mContentLeft;
        df.top=cf.top=mContentTop;
        df.right=cf.right=mContentRight;
        df.bottom=cf.bottom=mContentBottom;
      }
      vf.left=mCurLeft;
      vf.top=mCurTop;
      vf.right=mCurRight;
      vf.bottom=mCurBottom;
    }
  }
  if ((fl & FLAG_LAYOUT_NO_LIMITS) != 0) {
    df.left=df.top=cf.left=cf.top=vf.left=vf.top=-10000;
    df.right=df.bottom=cf.right=cf.bottom=vf.right=vf.bottom=10000;
  }
  if (DEBUG_LAYOUT)   Log.v(TAG,""String_Node_Str"" + attrs.getTitle() + ""String_Node_Str""+ Integer.toHexString(sim)+ ""String_Node_Str""+ pf.toShortString()+ ""String_Node_Str""+ df.toShortString()+ ""String_Node_Str""+ cf.toShortString()+ ""String_Node_Str""+ vf.toShortString());
  if (false) {
    if (""String_Node_Str"".equals(attrs.packageName) && attrs.type == WindowManager.LayoutParams.TYPE_APPLICATION_PANEL) {
      if (true || localLOGV)       Log.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ Integer.toHexString(sim)+ ""String_Node_Str""+ pf.toShortString()+ ""String_Node_Str""+ df.toShortString()+ ""String_Node_Str""+ cf.toShortString()+ ""String_Node_Str""+ vf.toShortString());
    }
  }
  win.computeFrameLw(pf,df,cf,vf);
  if (attrs.type == TYPE_INPUT_METHOD && !win.getGivenInsetsPendingLw()) {
    int top=win.getContentFrameLw().top;
    top+=win.getGivenContentInsetsLw().top;
    if (mContentBottom > top) {
      mContentBottom=top;
    }
    top=win.getVisibleFrameLw().top;
    top+=win.getGivenVisibleInsetsLw().top;
    if (mCurBottom > top) {
      mCurBottom=top;
    }
    if (DEBUG_LAYOUT)     Log.v(TAG,""String_Node_Str"" + mDockBottom + ""String_Node_Str""+ mContentBottom+ ""String_Node_Str""+ mCurBottom);
  }
}","/** 
 * {@inheritDoc} 
 */
public void layoutWindowLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (win == mStatusBar) {
    return;
  }
  if (false) {
    if (""String_Node_Str"".equals(attrs.packageName) && attrs.type == WindowManager.LayoutParams.TYPE_APPLICATION_PANEL) {
      Log.i(TAG,""String_Node_Str"");
    }
  }
  final int fl=attrs.flags;
  final int sim=attrs.softInputMode;
  final Rect pf=mTmpParentFrame;
  final Rect df=mTmpDisplayFrame;
  final Rect cf=mTmpContentFrame;
  final Rect vf=mTmpVisibleFrame;
  if (attrs.type == TYPE_INPUT_METHOD) {
    pf.left=df.left=cf.left=vf.left=mDockLeft;
    pf.top=df.top=cf.top=vf.top=mDockTop;
    pf.right=df.right=cf.right=vf.right=mDockRight;
    pf.bottom=df.bottom=cf.bottom=vf.bottom=mDockBottom;
    attrs.gravity=Gravity.BOTTOM;
    mDockLayer=win.getSurfaceLayer();
  }
 else {
    if ((fl & (FLAG_LAYOUT_IN_SCREEN | FLAG_FULLSCREEN | FLAG_LAYOUT_INSET_DECOR)) == (FLAG_LAYOUT_IN_SCREEN | FLAG_LAYOUT_INSET_DECOR)) {
      if (attached != null) {
        setAttachedWindowFrames(win,fl,sim,attached,true,pf,df,cf,vf);
      }
 else {
        pf.left=df.left=0;
        pf.top=df.top=0;
        pf.right=df.right=mW;
        pf.bottom=df.bottom=mH;
        if ((sim & SOFT_INPUT_MASK_ADJUST) != SOFT_INPUT_ADJUST_RESIZE) {
          cf.left=mDockLeft;
          cf.top=mDockTop;
          cf.right=mDockRight;
          cf.bottom=mDockBottom;
        }
 else {
          cf.left=mContentLeft;
          cf.top=mContentTop;
          cf.right=mContentRight;
          cf.bottom=mContentBottom;
        }
        vf.left=mCurLeft;
        vf.top=mCurTop;
        vf.right=mCurRight;
        vf.bottom=mCurBottom;
      }
    }
 else     if ((fl & FLAG_LAYOUT_IN_SCREEN) != 0) {
      pf.left=df.left=cf.left=0;
      pf.top=df.top=cf.top=0;
      pf.right=df.right=cf.right=mW;
      pf.bottom=df.bottom=cf.bottom=mH;
      vf.left=mCurLeft;
      vf.top=mCurTop;
      vf.right=mCurRight;
      vf.bottom=mCurBottom;
    }
 else     if (attached != null) {
      setAttachedWindowFrames(win,fl,sim,attached,false,pf,df,cf,vf);
    }
 else {
      pf.left=mContentLeft;
      pf.top=mContentTop;
      pf.right=mContentRight;
      pf.bottom=mContentBottom;
      if ((sim & SOFT_INPUT_MASK_ADJUST) != SOFT_INPUT_ADJUST_RESIZE) {
        df.left=cf.left=mDockLeft;
        df.top=cf.top=mDockTop;
        df.right=cf.right=mDockRight;
        df.bottom=cf.bottom=mDockBottom;
      }
 else {
        df.left=cf.left=mContentLeft;
        df.top=cf.top=mContentTop;
        df.right=cf.right=mContentRight;
        df.bottom=cf.bottom=mContentBottom;
      }
      vf.left=mCurLeft;
      vf.top=mCurTop;
      vf.right=mCurRight;
      vf.bottom=mCurBottom;
    }
  }
  if ((fl & FLAG_LAYOUT_NO_LIMITS) != 0) {
    df.left=df.top=cf.left=cf.top=vf.left=vf.top=-10000;
    df.right=df.bottom=cf.right=cf.bottom=vf.right=vf.bottom=10000;
  }
  if (DEBUG_LAYOUT)   Log.v(TAG,""String_Node_Str"" + attrs.getTitle() + ""String_Node_Str""+ Integer.toHexString(sim)+ ""String_Node_Str""+ pf.toShortString()+ ""String_Node_Str""+ df.toShortString()+ ""String_Node_Str""+ cf.toShortString()+ ""String_Node_Str""+ vf.toShortString());
  if (false) {
    if (""String_Node_Str"".equals(attrs.packageName) && attrs.type == WindowManager.LayoutParams.TYPE_APPLICATION_PANEL) {
      if (true || localLOGV)       Log.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ Integer.toHexString(sim)+ ""String_Node_Str""+ pf.toShortString()+ ""String_Node_Str""+ df.toShortString()+ ""String_Node_Str""+ cf.toShortString()+ ""String_Node_Str""+ vf.toShortString());
    }
  }
  win.computeFrameLw(pf,df,cf,vf);
  if (win.isVisibleLw()) {
    if ((attrs.flags & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      mForceStatusBar=true;
    }
 else     if (mTopFullscreenOpaqueWindowState == null && attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type <= LAST_APPLICATION_WINDOW && win.fillsScreenLw(mW,mH,false,false)) {
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"" + win);
      mTopFullscreenOpaqueWindowState=win;
    }
  }
  if (attrs.type == TYPE_INPUT_METHOD && !win.getGivenInsetsPendingLw()) {
    int top=win.getContentFrameLw().top;
    top+=win.getGivenContentInsetsLw().top;
    if (mContentBottom > top) {
      mContentBottom=top;
    }
    top=win.getVisibleFrameLw().top;
    top+=win.getGivenVisibleInsetsLw().top;
    if (mCurBottom > top) {
      mCurBottom=top;
    }
    if (DEBUG_LAYOUT)     Log.v(TAG,""String_Node_Str"" + mDockBottom + ""String_Node_Str""+ mContentBottom+ ""String_Node_Str""+ mCurBottom);
  }
}"
24374,"/** 
 * {@inheritDoc} 
 */
public void beginLayoutLw(int displayWidth,int displayHeight){
  mW=displayWidth;
  mH=displayHeight;
  mDockLeft=mContentLeft=mCurLeft=0;
  mDockTop=mContentTop=mCurTop=0;
  mDockRight=mContentRight=mCurRight=displayWidth;
  mDockBottom=mContentBottom=mCurBottom=displayHeight;
  mDockLayer=0x10000000;
  if (mStatusBar != null) {
    final Rect pf=mTmpParentFrame;
    final Rect df=mTmpDisplayFrame;
    final Rect vf=mTmpVisibleFrame;
    pf.left=df.left=vf.left=0;
    pf.top=df.top=vf.top=0;
    pf.right=df.right=vf.right=displayWidth;
    pf.bottom=df.bottom=vf.bottom=displayHeight;
    mStatusBar.computeFrameLw(pf,df,vf,vf);
    if (mStatusBar.isVisibleLw()) {
      mDockTop=mContentTop=mCurTop=mStatusBar.getFrameLw().bottom;
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"" + mDockBottom + ""String_Node_Str""+ mContentBottom+ ""String_Node_Str""+ mCurBottom);
    }
  }
}","/** 
 * {@inheritDoc} 
 */
public void beginLayoutLw(int displayWidth,int displayHeight){
  mW=displayWidth;
  mH=displayHeight;
  mDockLeft=mContentLeft=mCurLeft=0;
  mDockTop=mContentTop=mCurTop=0;
  mDockRight=mContentRight=mCurRight=displayWidth;
  mDockBottom=mContentBottom=mCurBottom=displayHeight;
  mDockLayer=0x10000000;
  mTopFullscreenOpaqueWindowState=null;
  mForceStatusBar=false;
  if (mStatusBar != null) {
    final Rect pf=mTmpParentFrame;
    final Rect df=mTmpDisplayFrame;
    final Rect vf=mTmpVisibleFrame;
    pf.left=df.left=vf.left=0;
    pf.top=df.top=vf.top=0;
    pf.right=df.right=vf.right=displayWidth;
    pf.bottom=df.bottom=vf.bottom=displayHeight;
    mStatusBar.computeFrameLw(pf,df,vf,vf);
    if (mStatusBar.isVisibleLw()) {
      mDockTop=mContentTop=mCurTop=mStatusBar.getFrameLw().bottom;
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"" + mDockBottom + ""String_Node_Str""+ mContentBottom+ ""String_Node_Str""+ mCurBottom);
    }
  }
}"
24375,"/** 
 * {@inheritDoc} 
 */
public void beginAnimationLw(int displayWidth,int displayHeight){
  mTopFullscreenOpaqueWindowState=null;
  mForceStatusBar=false;
}","/** 
 * {@inheritDoc} 
 */
public void beginAnimationLw(int displayWidth,int displayHeight){
}"
24376,"/** 
 * {@inheritDoc} 
 */
public void animatingWindowLw(WindowState win,WindowManager.LayoutParams attrs){
  if (win.isVisibleLw()) {
    if ((attrs.flags & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      mForceStatusBar=true;
    }
 else     if (mTopFullscreenOpaqueWindowState == null && attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type <= LAST_APPLICATION_WINDOW && win.fillsScreenLw(mW,mH,true,false) && win.isVisibleLw()) {
      mTopFullscreenOpaqueWindowState=win;
    }
  }
}","/** 
 * {@inheritDoc} 
 */
public void animatingWindowLw(WindowState win,WindowManager.LayoutParams attrs){
}"
24377,"/** 
 * {@inheritDoc} 
 */
public void finishLayoutLw(){
}","/** 
 * {@inheritDoc} 
 */
public boolean finishLayoutLw(){
  boolean changed=false;
  boolean hiding=false;
  if (mStatusBar != null) {
    if (mForceStatusBar) {
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"");
      changed|=mStatusBar.showLw(true);
    }
 else     if (mTopFullscreenOpaqueWindowState != null) {
      WindowManager.LayoutParams lp=mTopFullscreenOpaqueWindowState.getAttrs();
      boolean hideStatusBar=(lp.flags & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0;
      if (hideStatusBar) {
        if (DEBUG_LAYOUT)         Log.v(TAG,""String_Node_Str"");
        changed|=mStatusBar.hideLw(true);
        hiding=true;
      }
 else {
        if (DEBUG_LAYOUT)         Log.v(TAG,""String_Node_Str"");
        changed|=mStatusBar.showLw(true);
      }
    }
  }
  if (changed && hiding) {
    IStatusBar sbs=IStatusBar.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    if (sbs != null) {
      try {
        sbs.deactivate();
      }
 catch (      RemoteException e) {
      }
    }
  }
  return changed;
}"
24378,"/** 
 * {@inheritDoc} 
 */
public boolean finishAnimationLw(){
  boolean changed=false;
  boolean hiding=false;
  if (mStatusBar != null) {
    if (mForceStatusBar) {
      changed|=mStatusBar.showLw(true);
    }
 else     if (mTopFullscreenOpaqueWindowState != null) {
      WindowManager.LayoutParams lp=mTopFullscreenOpaqueWindowState.getAttrs();
      boolean hideStatusBar=(lp.flags & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0;
      if (hideStatusBar) {
        changed|=mStatusBar.hideLw(true);
        hiding=true;
      }
 else {
        changed|=mStatusBar.showLw(true);
      }
    }
  }
  if (changed && hiding) {
    IStatusBar sbs=IStatusBar.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    if (sbs != null) {
      try {
        sbs.deactivate();
      }
 catch (      RemoteException e) {
      }
    }
  }
  return changed;
}","/** 
 * {@inheritDoc} 
 */
public boolean finishAnimationLw(){
  return false;
}"
24379,"/** 
 * {@inheritDoc} 
 */
public void layoutWindowLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (win == mStatusBar) {
    return;
  }
  if (false) {
    if (""String_Node_Str"".equals(attrs.packageName) && attrs.type == WindowManager.LayoutParams.TYPE_APPLICATION_PANEL) {
      Log.i(TAG,""String_Node_Str"");
    }
  }
  final int fl=attrs.flags;
  final int sim=attrs.softInputMode;
  final Rect pf=mTmpParentFrame;
  final Rect df=mTmpDisplayFrame;
  final Rect cf=mTmpContentFrame;
  final Rect vf=mTmpVisibleFrame;
  if (attrs.type == TYPE_INPUT_METHOD) {
    pf.left=df.left=cf.left=vf.left=mDockLeft;
    pf.top=df.top=cf.top=vf.top=mDockTop;
    pf.right=df.right=cf.right=vf.right=mDockRight;
    pf.bottom=df.bottom=cf.bottom=vf.bottom=mDockBottom;
    attrs.gravity=Gravity.BOTTOM;
    mDockLayer=win.getSurfaceLayer();
  }
 else {
    if ((fl & (FLAG_LAYOUT_IN_SCREEN | FLAG_FULLSCREEN | FLAG_LAYOUT_INSET_DECOR)) == (FLAG_LAYOUT_IN_SCREEN | FLAG_LAYOUT_INSET_DECOR)) {
      if (attached != null) {
        setAttachedWindowFrames(win,fl,sim,attached,true,pf,df,cf,vf);
      }
 else {
        pf.left=df.left=0;
        pf.top=df.top=0;
        pf.right=df.right=mW;
        pf.bottom=df.bottom=mH;
        if ((sim & SOFT_INPUT_MASK_ADJUST) != SOFT_INPUT_ADJUST_RESIZE) {
          cf.left=mDockLeft;
          cf.top=mDockTop;
          cf.right=mDockRight;
          cf.bottom=mDockBottom;
        }
 else {
          cf.left=mContentLeft;
          cf.top=mContentTop;
          cf.right=mContentRight;
          cf.bottom=mContentBottom;
        }
        vf.left=mCurLeft;
        vf.top=mCurTop;
        vf.right=mCurRight;
        vf.bottom=mCurBottom;
      }
    }
 else     if ((fl & FLAG_LAYOUT_IN_SCREEN) != 0) {
      pf.left=df.left=cf.left=0;
      pf.top=df.top=cf.top=0;
      pf.right=df.right=cf.right=mW;
      pf.bottom=df.bottom=cf.bottom=mH;
      vf.left=mCurLeft;
      vf.top=mCurTop;
      vf.right=mCurRight;
      vf.bottom=mCurBottom;
    }
 else     if (attached != null) {
      setAttachedWindowFrames(win,fl,sim,attached,false,pf,df,cf,vf);
    }
 else {
      pf.left=mContentLeft;
      pf.top=mContentTop;
      pf.right=mContentRight;
      pf.bottom=mContentBottom;
      if ((sim & SOFT_INPUT_MASK_ADJUST) != SOFT_INPUT_ADJUST_RESIZE) {
        df.left=cf.left=mDockLeft;
        df.top=cf.top=mDockTop;
        df.right=cf.right=mDockRight;
        df.bottom=cf.bottom=mDockBottom;
      }
 else {
        df.left=cf.left=mContentLeft;
        df.top=cf.top=mContentTop;
        df.right=cf.right=mContentRight;
        df.bottom=cf.bottom=mContentBottom;
      }
      vf.left=mCurLeft;
      vf.top=mCurTop;
      vf.right=mCurRight;
      vf.bottom=mCurBottom;
    }
  }
  if ((fl & FLAG_LAYOUT_NO_LIMITS) != 0) {
    df.left=df.top=cf.left=cf.top=vf.left=vf.top=-10000;
    df.right=df.bottom=cf.right=cf.bottom=vf.right=vf.bottom=10000;
  }
  if (DEBUG_LAYOUT)   Log.v(TAG,""String_Node_Str"" + attrs.getTitle() + ""String_Node_Str""+ Integer.toHexString(sim)+ ""String_Node_Str""+ pf.toShortString()+ ""String_Node_Str""+ df.toShortString()+ ""String_Node_Str""+ cf.toShortString()+ ""String_Node_Str""+ vf.toShortString());
  if (false) {
    if (""String_Node_Str"".equals(attrs.packageName) && attrs.type == WindowManager.LayoutParams.TYPE_APPLICATION_PANEL) {
      if (true || localLOGV)       Log.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ Integer.toHexString(sim)+ ""String_Node_Str""+ pf.toShortString()+ ""String_Node_Str""+ df.toShortString()+ ""String_Node_Str""+ cf.toShortString()+ ""String_Node_Str""+ vf.toShortString());
    }
  }
  win.computeFrameLw(pf,df,cf,vf);
  if (attrs.type == TYPE_INPUT_METHOD && !win.getGivenInsetsPendingLw()) {
    int top=win.getContentFrameLw().top;
    top+=win.getGivenContentInsetsLw().top;
    if (mContentBottom > top) {
      mContentBottom=top;
    }
    top=win.getVisibleFrameLw().top;
    top+=win.getGivenVisibleInsetsLw().top;
    if (mCurBottom > top) {
      mCurBottom=top;
    }
    if (DEBUG_LAYOUT)     Log.v(TAG,""String_Node_Str"" + mDockBottom + ""String_Node_Str""+ mContentBottom+ ""String_Node_Str""+ mCurBottom);
  }
}","/** 
 * {@inheritDoc} 
 */
public void layoutWindowLw(WindowState win,WindowManager.LayoutParams attrs,WindowState attached){
  if (win == mStatusBar) {
    return;
  }
  if (false) {
    if (""String_Node_Str"".equals(attrs.packageName) && attrs.type == WindowManager.LayoutParams.TYPE_APPLICATION_PANEL) {
      Log.i(TAG,""String_Node_Str"");
    }
  }
  final int fl=attrs.flags;
  final int sim=attrs.softInputMode;
  final Rect pf=mTmpParentFrame;
  final Rect df=mTmpDisplayFrame;
  final Rect cf=mTmpContentFrame;
  final Rect vf=mTmpVisibleFrame;
  if (attrs.type == TYPE_INPUT_METHOD) {
    pf.left=df.left=cf.left=vf.left=mDockLeft;
    pf.top=df.top=cf.top=vf.top=mDockTop;
    pf.right=df.right=cf.right=vf.right=mDockRight;
    pf.bottom=df.bottom=cf.bottom=vf.bottom=mDockBottom;
    attrs.gravity=Gravity.BOTTOM;
    mDockLayer=win.getSurfaceLayer();
  }
 else {
    if ((fl & (FLAG_LAYOUT_IN_SCREEN | FLAG_FULLSCREEN | FLAG_LAYOUT_INSET_DECOR)) == (FLAG_LAYOUT_IN_SCREEN | FLAG_LAYOUT_INSET_DECOR)) {
      if (attached != null) {
        setAttachedWindowFrames(win,fl,sim,attached,true,pf,df,cf,vf);
      }
 else {
        pf.left=df.left=0;
        pf.top=df.top=0;
        pf.right=df.right=mW;
        pf.bottom=df.bottom=mH;
        if ((sim & SOFT_INPUT_MASK_ADJUST) != SOFT_INPUT_ADJUST_RESIZE) {
          cf.left=mDockLeft;
          cf.top=mDockTop;
          cf.right=mDockRight;
          cf.bottom=mDockBottom;
        }
 else {
          cf.left=mContentLeft;
          cf.top=mContentTop;
          cf.right=mContentRight;
          cf.bottom=mContentBottom;
        }
        vf.left=mCurLeft;
        vf.top=mCurTop;
        vf.right=mCurRight;
        vf.bottom=mCurBottom;
      }
    }
 else     if ((fl & FLAG_LAYOUT_IN_SCREEN) != 0) {
      pf.left=df.left=cf.left=0;
      pf.top=df.top=cf.top=0;
      pf.right=df.right=cf.right=mW;
      pf.bottom=df.bottom=cf.bottom=mH;
      vf.left=mCurLeft;
      vf.top=mCurTop;
      vf.right=mCurRight;
      vf.bottom=mCurBottom;
    }
 else     if (attached != null) {
      setAttachedWindowFrames(win,fl,sim,attached,false,pf,df,cf,vf);
    }
 else {
      pf.left=mContentLeft;
      pf.top=mContentTop;
      pf.right=mContentRight;
      pf.bottom=mContentBottom;
      if ((sim & SOFT_INPUT_MASK_ADJUST) != SOFT_INPUT_ADJUST_RESIZE) {
        df.left=cf.left=mDockLeft;
        df.top=cf.top=mDockTop;
        df.right=cf.right=mDockRight;
        df.bottom=cf.bottom=mDockBottom;
      }
 else {
        df.left=cf.left=mContentLeft;
        df.top=cf.top=mContentTop;
        df.right=cf.right=mContentRight;
        df.bottom=cf.bottom=mContentBottom;
      }
      vf.left=mCurLeft;
      vf.top=mCurTop;
      vf.right=mCurRight;
      vf.bottom=mCurBottom;
    }
  }
  if ((fl & FLAG_LAYOUT_NO_LIMITS) != 0) {
    df.left=df.top=cf.left=cf.top=vf.left=vf.top=-10000;
    df.right=df.bottom=cf.right=cf.bottom=vf.right=vf.bottom=10000;
  }
  if (DEBUG_LAYOUT)   Log.v(TAG,""String_Node_Str"" + attrs.getTitle() + ""String_Node_Str""+ Integer.toHexString(sim)+ ""String_Node_Str""+ pf.toShortString()+ ""String_Node_Str""+ df.toShortString()+ ""String_Node_Str""+ cf.toShortString()+ ""String_Node_Str""+ vf.toShortString());
  if (false) {
    if (""String_Node_Str"".equals(attrs.packageName) && attrs.type == WindowManager.LayoutParams.TYPE_APPLICATION_PANEL) {
      if (true || localLOGV)       Log.v(TAG,""String_Node_Str"" + win + ""String_Node_Str""+ Integer.toHexString(sim)+ ""String_Node_Str""+ pf.toShortString()+ ""String_Node_Str""+ df.toShortString()+ ""String_Node_Str""+ cf.toShortString()+ ""String_Node_Str""+ vf.toShortString());
    }
  }
  win.computeFrameLw(pf,df,cf,vf);
  if (win.isVisibleLw()) {
    if ((attrs.flags & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      mForceStatusBar=true;
    }
 else     if (mTopFullscreenOpaqueWindowState == null && attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type <= LAST_APPLICATION_WINDOW && win.fillsScreenLw(mW,mH,false,false)) {
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"" + win);
      mTopFullscreenOpaqueWindowState=win;
    }
  }
  if (attrs.type == TYPE_INPUT_METHOD && !win.getGivenInsetsPendingLw()) {
    int top=win.getContentFrameLw().top;
    top+=win.getGivenContentInsetsLw().top;
    if (mContentBottom > top) {
      mContentBottom=top;
    }
    top=win.getVisibleFrameLw().top;
    top+=win.getGivenVisibleInsetsLw().top;
    if (mCurBottom > top) {
      mCurBottom=top;
    }
    if (DEBUG_LAYOUT)     Log.v(TAG,""String_Node_Str"" + mDockBottom + ""String_Node_Str""+ mContentBottom+ ""String_Node_Str""+ mCurBottom);
  }
}"
24380,"/** 
 * {@inheritDoc} 
 */
public void beginLayoutLw(int displayWidth,int displayHeight){
  mW=displayWidth;
  mH=displayHeight;
  mDockLeft=mContentLeft=mCurLeft=0;
  mDockTop=mContentTop=mCurTop=0;
  mDockRight=mContentRight=mCurRight=displayWidth;
  mDockBottom=mContentBottom=mCurBottom=displayHeight;
  mDockLayer=0x10000000;
  if (mStatusBar != null) {
    final Rect pf=mTmpParentFrame;
    final Rect df=mTmpDisplayFrame;
    final Rect vf=mTmpVisibleFrame;
    pf.left=df.left=vf.left=0;
    pf.top=df.top=vf.top=0;
    pf.right=df.right=vf.right=displayWidth;
    pf.bottom=df.bottom=vf.bottom=displayHeight;
    mStatusBar.computeFrameLw(pf,df,vf,vf);
    if (mStatusBar.isVisibleLw()) {
      mDockTop=mContentTop=mCurTop=mStatusBar.getFrameLw().bottom;
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"" + mDockBottom + ""String_Node_Str""+ mContentBottom+ ""String_Node_Str""+ mCurBottom);
    }
  }
}","/** 
 * {@inheritDoc} 
 */
public void beginLayoutLw(int displayWidth,int displayHeight){
  mW=displayWidth;
  mH=displayHeight;
  mDockLeft=mContentLeft=mCurLeft=0;
  mDockTop=mContentTop=mCurTop=0;
  mDockRight=mContentRight=mCurRight=displayWidth;
  mDockBottom=mContentBottom=mCurBottom=displayHeight;
  mDockLayer=0x10000000;
  mTopFullscreenOpaqueWindowState=null;
  mForceStatusBar=false;
  if (mStatusBar != null) {
    final Rect pf=mTmpParentFrame;
    final Rect df=mTmpDisplayFrame;
    final Rect vf=mTmpVisibleFrame;
    pf.left=df.left=vf.left=0;
    pf.top=df.top=vf.top=0;
    pf.right=df.right=vf.right=displayWidth;
    pf.bottom=df.bottom=vf.bottom=displayHeight;
    mStatusBar.computeFrameLw(pf,df,vf,vf);
    if (mStatusBar.isVisibleLw()) {
      mDockTop=mContentTop=mCurTop=mStatusBar.getFrameLw().bottom;
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"" + mDockBottom + ""String_Node_Str""+ mContentBottom+ ""String_Node_Str""+ mCurBottom);
    }
  }
}"
24381,"/** 
 * {@inheritDoc} 
 */
public void beginAnimationLw(int displayWidth,int displayHeight){
  mTopFullscreenOpaqueWindowState=null;
  mForceStatusBar=false;
}","/** 
 * {@inheritDoc} 
 */
public void beginAnimationLw(int displayWidth,int displayHeight){
}"
24382,"/** 
 * {@inheritDoc} 
 */
public void animatingWindowLw(WindowState win,WindowManager.LayoutParams attrs){
  if (win.isVisibleLw()) {
    if ((attrs.flags & FLAG_FORCE_NOT_FULLSCREEN) != 0) {
      mForceStatusBar=true;
    }
 else     if (mTopFullscreenOpaqueWindowState == null && attrs.type >= FIRST_APPLICATION_WINDOW && attrs.type <= LAST_APPLICATION_WINDOW && win.fillsScreenLw(mW,mH,true,false) && win.isVisibleLw()) {
      mTopFullscreenOpaqueWindowState=win;
    }
  }
}","/** 
 * {@inheritDoc} 
 */
public void animatingWindowLw(WindowState win,WindowManager.LayoutParams attrs){
}"
24383,"/** 
 * {@inheritDoc} 
 */
public void finishLayoutLw(){
}","/** 
 * {@inheritDoc} 
 */
public boolean finishLayoutLw(){
  boolean changed=false;
  boolean hiding=false;
  if (mStatusBar != null) {
    if (mForceStatusBar) {
      if (DEBUG_LAYOUT)       Log.v(TAG,""String_Node_Str"");
      changed|=mStatusBar.showLw(true);
    }
 else     if (mTopFullscreenOpaqueWindowState != null) {
      WindowManager.LayoutParams lp=mTopFullscreenOpaqueWindowState.getAttrs();
      boolean hideStatusBar=(lp.flags & WindowManager.LayoutParams.FLAG_FULLSCREEN) != 0;
      if (hideStatusBar) {
        if (DEBUG_LAYOUT)         Log.v(TAG,""String_Node_Str"");
        changed|=mStatusBar.hideLw(true);
        hiding=true;
      }
 else {
        if (DEBUG_LAYOUT)         Log.v(TAG,""String_Node_Str"");
        changed|=mStatusBar.showLw(true);
      }
    }
  }
  if (changed && hiding) {
    IStatusBar sbs=IStatusBar.Stub.asInterface(ServiceManager.getService(""String_Node_Str""));
    if (sbs != null) {
      try {
        sbs.deactivate();
      }
 catch (      RemoteException e) {
      }
    }
  }
  return changed;
}"
24384,"public void update(){
  ContentResolver resolver=mContext.getContentResolver();
synchronized (mLock) {
    mEndcallBehavior=Settings.System.getInt(resolver,Settings.System.END_BUTTON_BEHAVIOR,DEFAULT_ENDCALL_BEHAVIOR);
    mFancyRotationAnimation=Settings.System.getInt(resolver,""String_Node_Str"",0) != 0 ? 0x80 : 0;
    int accelerometerDefault=Settings.System.getInt(resolver,Settings.System.ACCELEROMETER_ROTATION,DEFAULT_ACCELEROMETER_ROTATION);
    if (mAccelerometerDefault != accelerometerDefault) {
      mAccelerometerDefault=accelerometerDefault;
      updateOrientationListenerLp();
    }
    String imId=Settings.Secure.getString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD);
    boolean hasSoftInput=imId != null && imId.length() > 0;
    if (mHasSoftInput != hasSoftInput) {
      mHasSoftInput=hasSoftInput;
      updateRotation(0);
    }
  }
}","public void update(){
  ContentResolver resolver=mContext.getContentResolver();
  boolean updateRotation=false;
synchronized (mLock) {
    mEndcallBehavior=Settings.System.getInt(resolver,Settings.System.END_BUTTON_BEHAVIOR,DEFAULT_ENDCALL_BEHAVIOR);
    mFancyRotationAnimation=Settings.System.getInt(resolver,""String_Node_Str"",0) != 0 ? 0x80 : 0;
    int accelerometerDefault=Settings.System.getInt(resolver,Settings.System.ACCELEROMETER_ROTATION,DEFAULT_ACCELEROMETER_ROTATION);
    if (mAccelerometerDefault != accelerometerDefault) {
      mAccelerometerDefault=accelerometerDefault;
      updateOrientationListenerLp();
    }
    String imId=Settings.Secure.getString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD);
    boolean hasSoftInput=imId != null && imId.length() > 0;
    if (mHasSoftInput != hasSoftInput) {
      mHasSoftInput=hasSoftInput;
      updateRotation=true;
    }
  }
  if (updateRotation) {
    updateRotation(0);
  }
}"
24385,"public void update(){
  ContentResolver resolver=mContext.getContentResolver();
synchronized (mLock) {
    mEndcallBehavior=Settings.System.getInt(resolver,Settings.System.END_BUTTON_BEHAVIOR,DEFAULT_ENDCALL_BEHAVIOR);
    mFancyRotationAnimation=Settings.System.getInt(resolver,""String_Node_Str"",0) != 0 ? 0x80 : 0;
    int accelerometerDefault=Settings.System.getInt(resolver,Settings.System.ACCELEROMETER_ROTATION,DEFAULT_ACCELEROMETER_ROTATION);
    if (mAccelerometerDefault != accelerometerDefault) {
      mAccelerometerDefault=accelerometerDefault;
      updateOrientationListenerLp();
    }
    String imId=Settings.Secure.getString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD);
    boolean hasSoftInput=imId != null && imId.length() > 0;
    if (mHasSoftInput != hasSoftInput) {
      mHasSoftInput=hasSoftInput;
      updateRotation(0);
    }
  }
}","public void update(){
  ContentResolver resolver=mContext.getContentResolver();
  boolean updateRotation=false;
synchronized (mLock) {
    mEndcallBehavior=Settings.System.getInt(resolver,Settings.System.END_BUTTON_BEHAVIOR,DEFAULT_ENDCALL_BEHAVIOR);
    mFancyRotationAnimation=Settings.System.getInt(resolver,""String_Node_Str"",0) != 0 ? 0x80 : 0;
    int accelerometerDefault=Settings.System.getInt(resolver,Settings.System.ACCELEROMETER_ROTATION,DEFAULT_ACCELEROMETER_ROTATION);
    if (mAccelerometerDefault != accelerometerDefault) {
      mAccelerometerDefault=accelerometerDefault;
      updateOrientationListenerLp();
    }
    String imId=Settings.Secure.getString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD);
    boolean hasSoftInput=imId != null && imId.length() > 0;
    if (mHasSoftInput != hasSoftInput) {
      mHasSoftInput=hasSoftInput;
      updateRotation=true;
    }
  }
  if (updateRotation) {
    updateRotation(0);
  }
}"
24386,"public void update(){
  ContentResolver resolver=mContext.getContentResolver();
synchronized (mLock) {
    mEndcallBehavior=Settings.System.getInt(resolver,Settings.System.END_BUTTON_BEHAVIOR,DEFAULT_ENDCALL_BEHAVIOR);
    mFancyRotationAnimation=Settings.System.getInt(resolver,""String_Node_Str"",0) != 0 ? 0x80 : 0;
    int accelerometerDefault=Settings.System.getInt(resolver,Settings.System.ACCELEROMETER_ROTATION,DEFAULT_ACCELEROMETER_ROTATION);
    if (mAccelerometerDefault != accelerometerDefault) {
      mAccelerometerDefault=accelerometerDefault;
      updateOrientationListenerLp();
    }
    String imId=Settings.Secure.getString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD);
    boolean hasSoftInput=imId != null && imId.length() > 0;
    if (mHasSoftInput != hasSoftInput) {
      mHasSoftInput=hasSoftInput;
      updateRotation(0);
    }
  }
}","public void update(){
  ContentResolver resolver=mContext.getContentResolver();
  boolean updateRotation=false;
synchronized (mLock) {
    mEndcallBehavior=Settings.System.getInt(resolver,Settings.System.END_BUTTON_BEHAVIOR,DEFAULT_ENDCALL_BEHAVIOR);
    mFancyRotationAnimation=Settings.System.getInt(resolver,""String_Node_Str"",0) != 0 ? 0x80 : 0;
    int accelerometerDefault=Settings.System.getInt(resolver,Settings.System.ACCELEROMETER_ROTATION,DEFAULT_ACCELEROMETER_ROTATION);
    if (mAccelerometerDefault != accelerometerDefault) {
      mAccelerometerDefault=accelerometerDefault;
      updateOrientationListenerLp();
    }
    String imId=Settings.Secure.getString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD);
    boolean hasSoftInput=imId != null && imId.length() > 0;
    if (mHasSoftInput != hasSoftInput) {
      mHasSoftInput=hasSoftInput;
      updateRotation=true;
    }
  }
  if (updateRotation) {
    updateRotation(0);
  }
}"
24387,"private boolean acquireWifiLockLocked(WifiLock wifiLock){
  mLocks.addLock(wifiLock);
  int uid=Binder.getCallingUid();
  long ident=Binder.clearCallingIdentity();
  try {
switch (wifiLock.mLockMode) {
case (WifiManager.WIFI_MODE_FULL):
      mBatteryStats.noteFullWifiLockAcquired(uid);
case (WifiManager.WIFI_MODE_SCAN_ONLY):
    mBatteryStats.noteScanWifiLockAcquired(uid);
}
}
 catch (RemoteException e) {
}
 finally {
Binder.restoreCallingIdentity(ident);
}
updateWifiState();
return true;
}","private boolean acquireWifiLockLocked(WifiLock wifiLock){
  mLocks.addLock(wifiLock);
  int uid=Binder.getCallingUid();
  long ident=Binder.clearCallingIdentity();
  try {
switch (wifiLock.mLockMode) {
case WifiManager.WIFI_MODE_FULL:
      ++mFullLocksAcquired;
    mBatteryStats.noteFullWifiLockAcquired(uid);
  break;
case WifiManager.WIFI_MODE_SCAN_ONLY:
++mScanLocksAcquired;
mBatteryStats.noteScanWifiLockAcquired(uid);
break;
}
}
 catch (RemoteException e) {
}
 finally {
Binder.restoreCallingIdentity(ident);
}
updateWifiState();
return true;
}"
24388,"private boolean releaseWifiLockLocked(IBinder lock){
  boolean hadLock;
  WifiLock wifiLock=mLocks.removeLock(lock);
  hadLock=(wifiLock != null);
  if (hadLock) {
    int uid=Binder.getCallingUid();
    long ident=Binder.clearCallingIdentity();
    try {
switch (wifiLock.mLockMode) {
case (WifiManager.WIFI_MODE_FULL):
        mBatteryStats.noteFullWifiLockReleased(uid);
case (WifiManager.WIFI_MODE_SCAN_ONLY):
      mBatteryStats.noteScanWifiLockReleased(uid);
  }
}
 catch (RemoteException e) {
}
 finally {
  Binder.restoreCallingIdentity(ident);
}
}
updateWifiState();
return hadLock;
}","private boolean releaseWifiLockLocked(IBinder lock){
  boolean hadLock;
  WifiLock wifiLock=mLocks.removeLock(lock);
  hadLock=(wifiLock != null);
  if (hadLock) {
    int uid=Binder.getCallingUid();
    long ident=Binder.clearCallingIdentity();
    try {
switch (wifiLock.mLockMode) {
case WifiManager.WIFI_MODE_FULL:
        ++mFullLocksReleased;
      mBatteryStats.noteFullWifiLockReleased(uid);
    break;
case WifiManager.WIFI_MODE_SCAN_ONLY:
  ++mScanLocksReleased;
mBatteryStats.noteScanWifiLockReleased(uid);
break;
}
}
 catch (RemoteException e) {
}
 finally {
Binder.restoreCallingIdentity(ident);
}
}
updateWifiState();
return hadLock;
}"
24389,"public synchronized boolean disconnectAndStop(){
  if (mRunState != RUN_STATE_STOPPING && mRunState != RUN_STATE_STOPPED) {
    setNotificationVisible(false,0,false,0);
    mRunState=RUN_STATE_STOPPING;
    return WifiNative.disconnectCommand();
  }
 else {
    releaseWakeLock();
  }
  return true;
}","/** 
 * We want to stop the driver, but if we're connected to a network, we first want to disconnect, so that the supplicant is always in a known state (DISCONNECTED) when the driver is stopped.
 * @return {@code true} if the operation succeeds, which means that thedisconnect or stop command was initiated.
 */
public synchronized boolean disconnectAndStop(){
  if (mRunState != RUN_STATE_STOPPING && mRunState != RUN_STATE_STOPPED) {
    setNotificationVisible(false,0,false,0);
    mRunState=RUN_STATE_STOPPING;
    if (mWifiInfo.getSupplicantState() == SupplicantState.DORMANT) {
      return WifiNative.stopDriverCommand();
    }
 else {
      return WifiNative.disconnectCommand();
    }
  }
 else {
    releaseWakeLock();
  }
  return true;
}"
24390,"@Override public String toString(){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"").append(mInterfaceName).append(""String_Node_Str"").append(mRunState).append(LS);
  sb.append(mWifiInfo).append(LS);
  sb.append(mDhcpInfo).append(LS);
  sb.append(""String_Node_Str"").append(mHaveIPAddress).append(""String_Node_Str"").append(mObtainingIPAddress).append(""String_Node_Str"").append(mIsScanModeActive).append(LS).append(""String_Node_Str"").append(mLastSignalLevel).append(""String_Node_Str"").append(mTornDownByConnMgr);
  return sb.toString();
}","@Override public String toString(){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"").append(mInterfaceName);
  sb.append(""String_Node_Str"");
  if (mRunState >= 1 && mRunState <= mRunStateNames.length) {
    sb.append(mRunStateNames[mRunState - 1]);
  }
 else {
    sb.append(mRunState);
  }
  sb.append(LS).append(mWifiInfo).append(LS);
  sb.append(mDhcpInfo).append(LS);
  sb.append(""String_Node_Str"").append(mHaveIPAddress).append(""String_Node_Str"").append(mObtainingIPAddress).append(""String_Node_Str"").append(mIsScanModeActive).append(LS).append(""String_Node_Str"").append(mLastSignalLevel).append(""String_Node_Str"").append(mTornDownByConnMgr);
  return sb.toString();
}"
24391,"private boolean acquireWifiLockLocked(WifiLock wifiLock){
  mLocks.addLock(wifiLock);
  int uid=Binder.getCallingUid();
  long ident=Binder.clearCallingIdentity();
  try {
switch (wifiLock.mLockMode) {
case (WifiManager.WIFI_MODE_FULL):
      mBatteryStats.noteFullWifiLockAcquired(uid);
case (WifiManager.WIFI_MODE_SCAN_ONLY):
    mBatteryStats.noteScanWifiLockAcquired(uid);
}
}
 catch (RemoteException e) {
}
 finally {
Binder.restoreCallingIdentity(ident);
}
updateWifiState();
return true;
}","private boolean acquireWifiLockLocked(WifiLock wifiLock){
  mLocks.addLock(wifiLock);
  int uid=Binder.getCallingUid();
  long ident=Binder.clearCallingIdentity();
  try {
switch (wifiLock.mLockMode) {
case WifiManager.WIFI_MODE_FULL:
      ++mFullLocksAcquired;
    mBatteryStats.noteFullWifiLockAcquired(uid);
  break;
case WifiManager.WIFI_MODE_SCAN_ONLY:
++mScanLocksAcquired;
mBatteryStats.noteScanWifiLockAcquired(uid);
break;
}
}
 catch (RemoteException e) {
}
 finally {
Binder.restoreCallingIdentity(ident);
}
updateWifiState();
return true;
}"
24392,"private boolean releaseWifiLockLocked(IBinder lock){
  boolean hadLock;
  WifiLock wifiLock=mLocks.removeLock(lock);
  hadLock=(wifiLock != null);
  if (hadLock) {
    int uid=Binder.getCallingUid();
    long ident=Binder.clearCallingIdentity();
    try {
switch (wifiLock.mLockMode) {
case (WifiManager.WIFI_MODE_FULL):
        mBatteryStats.noteFullWifiLockReleased(uid);
case (WifiManager.WIFI_MODE_SCAN_ONLY):
      mBatteryStats.noteScanWifiLockReleased(uid);
  }
}
 catch (RemoteException e) {
}
 finally {
  Binder.restoreCallingIdentity(ident);
}
}
updateWifiState();
return hadLock;
}","private boolean releaseWifiLockLocked(IBinder lock){
  boolean hadLock;
  WifiLock wifiLock=mLocks.removeLock(lock);
  hadLock=(wifiLock != null);
  if (hadLock) {
    int uid=Binder.getCallingUid();
    long ident=Binder.clearCallingIdentity();
    try {
switch (wifiLock.mLockMode) {
case WifiManager.WIFI_MODE_FULL:
        ++mFullLocksReleased;
      mBatteryStats.noteFullWifiLockReleased(uid);
    break;
case WifiManager.WIFI_MODE_SCAN_ONLY:
  ++mScanLocksReleased;
mBatteryStats.noteScanWifiLockReleased(uid);
break;
}
}
 catch (RemoteException e) {
}
 finally {
Binder.restoreCallingIdentity(ident);
}
}
updateWifiState();
return hadLock;
}"
24393,"public synchronized boolean disconnectAndStop(){
  if (mRunState != RUN_STATE_STOPPING && mRunState != RUN_STATE_STOPPED) {
    setNotificationVisible(false,0,false,0);
    mRunState=RUN_STATE_STOPPING;
    return WifiNative.disconnectCommand();
  }
 else {
    releaseWakeLock();
  }
  return true;
}","/** 
 * We want to stop the driver, but if we're connected to a network, we first want to disconnect, so that the supplicant is always in a known state (DISCONNECTED) when the driver is stopped.
 * @return {@code true} if the operation succeeds, which means that thedisconnect or stop command was initiated.
 */
public synchronized boolean disconnectAndStop(){
  if (mRunState != RUN_STATE_STOPPING && mRunState != RUN_STATE_STOPPED) {
    setNotificationVisible(false,0,false,0);
    mRunState=RUN_STATE_STOPPING;
    if (mWifiInfo.getSupplicantState() == SupplicantState.DORMANT) {
      return WifiNative.stopDriverCommand();
    }
 else {
      return WifiNative.disconnectCommand();
    }
  }
 else {
    releaseWakeLock();
  }
  return true;
}"
24394,"@Override public String toString(){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"").append(mInterfaceName).append(""String_Node_Str"").append(mRunState).append(LS);
  sb.append(mWifiInfo).append(LS);
  sb.append(mDhcpInfo).append(LS);
  sb.append(""String_Node_Str"").append(mHaveIPAddress).append(""String_Node_Str"").append(mObtainingIPAddress).append(""String_Node_Str"").append(mIsScanModeActive).append(LS).append(""String_Node_Str"").append(mLastSignalLevel).append(""String_Node_Str"").append(mTornDownByConnMgr);
  return sb.toString();
}","@Override public String toString(){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"").append(mInterfaceName);
  sb.append(""String_Node_Str"");
  if (mRunState >= 1 && mRunState <= mRunStateNames.length) {
    sb.append(mRunStateNames[mRunState - 1]);
  }
 else {
    sb.append(mRunState);
  }
  sb.append(LS).append(mWifiInfo).append(LS);
  sb.append(mDhcpInfo).append(LS);
  sb.append(""String_Node_Str"").append(mHaveIPAddress).append(""String_Node_Str"").append(mObtainingIPAddress).append(""String_Node_Str"").append(mIsScanModeActive).append(LS).append(""String_Node_Str"").append(mLastSignalLevel).append(""String_Node_Str"").append(mTornDownByConnMgr);
  return sb.toString();
}"
24395,"public void performEnableScreen(){
synchronized (mWindowMap) {
    if (mDisplayEnabled) {
      return;
    }
    if (!mSystemBooted) {
      return;
    }
    final int N=mWindows.size();
    for (int i=0; i < N; i++) {
      WindowState w=(WindowState)mWindows.get(i);
      if (w.isVisibleLw() && !w.isDisplayedLw()) {
        return;
      }
    }
    mDisplayEnabled=true;
    if (false) {
      Log.i(TAG,""String_Node_Str"");
      StringWriter sw=new StringWriter();
      PrintWriter pw=new PrintWriter(sw);
      this.dump(null,pw,null);
      Log.i(TAG,sw.toString());
    }
    try {
      IBinder surfaceFlinger=ServiceManager.getService(""String_Node_Str"");
      if (surfaceFlinger != null) {
        Parcel data=Parcel.obtain();
        data.writeInterfaceToken(""String_Node_Str"");
        surfaceFlinger.transact(IBinder.FIRST_CALL_TRANSACTION,data,null,0);
        data.recycle();
      }
    }
 catch (    RemoteException ex) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  mPolicy.enableScreenAfterBoot();
  setRotationUnchecked(WindowManagerPolicy.USE_LAST_ROTATION,false,0);
}","public void performEnableScreen(){
synchronized (mWindowMap) {
    if (mDisplayEnabled) {
      return;
    }
    if (!mSystemBooted) {
      return;
    }
    final int N=mWindows.size();
    for (int i=0; i < N; i++) {
      WindowState w=(WindowState)mWindows.get(i);
      if (w.isVisibleLw() && !w.isDisplayedLw()) {
        return;
      }
    }
    mDisplayEnabled=true;
    if (false) {
      Log.i(TAG,""String_Node_Str"");
      StringWriter sw=new StringWriter();
      PrintWriter pw=new PrintWriter(sw);
      this.dump(null,pw,null);
      Log.i(TAG,sw.toString());
    }
    try {
      IBinder surfaceFlinger=ServiceManager.getService(""String_Node_Str"");
      if (surfaceFlinger != null) {
        Parcel data=Parcel.obtain();
        data.writeInterfaceToken(""String_Node_Str"");
        surfaceFlinger.transact(IBinder.FIRST_CALL_TRANSACTION,data,null,0);
        data.recycle();
      }
    }
 catch (    RemoteException ex) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  mPolicy.enableScreenAfterBoot();
  setRotationUnchecked(WindowManagerPolicy.USE_LAST_ROTATION,false,mLastRotationFlags | Surface.FLAGS_ORIENTATION_ANIMATION_DISABLE);
}"
24396,"public boolean setRotationUncheckedLocked(int rotation,int animFlags){
  boolean changed;
  if (rotation == WindowManagerPolicy.USE_LAST_ROTATION) {
    rotation=mRequestedRotation;
  }
 else {
    mRequestedRotation=rotation;
  }
  if (DEBUG_ORIENTATION)   Log.v(TAG,""String_Node_Str"" + rotation);
  rotation=mPolicy.rotationForOrientationLw(mForcedAppOrientation,mRotation,mDisplayEnabled);
  if (DEBUG_ORIENTATION)   Log.v(TAG,""String_Node_Str"" + rotation);
  changed=mDisplayEnabled && mRotation != rotation;
  if (changed) {
    if (DEBUG_ORIENTATION)     Log.v(TAG,""String_Node_Str"" + rotation + ""String_Node_Str""+ mRotation+ ""String_Node_Str""+ mForcedAppOrientation+ ""String_Node_Str""+ mRequestedRotation+ ""String_Node_Str"");
    mRotation=rotation;
    mWindowsFreezingScreen=true;
    mH.removeMessages(H.WINDOW_FREEZE_TIMEOUT);
    mH.sendMessageDelayed(mH.obtainMessage(H.WINDOW_FREEZE_TIMEOUT),2000);
    startFreezingDisplayLocked();
    Log.i(TAG,""String_Node_Str"" + rotation + ""String_Node_Str""+ animFlags);
    mQueue.setOrientation(rotation);
    if (mDisplayEnabled) {
      Surface.setOrientation(0,rotation);
    }
    for (int i=mWindows.size() - 1; i >= 0; i--) {
      WindowState w=(WindowState)mWindows.get(i);
      if (w.mSurface != null) {
        w.mOrientationChanging=true;
      }
    }
    for (int i=mRotationWatchers.size() - 1; i >= 0; i--) {
      try {
        mRotationWatchers.get(i).onRotationChanged(rotation);
      }
 catch (      RemoteException e) {
      }
    }
  }
  return changed;
}","public boolean setRotationUncheckedLocked(int rotation,int animFlags){
  boolean changed;
  if (rotation == WindowManagerPolicy.USE_LAST_ROTATION) {
    rotation=mRequestedRotation;
  }
 else {
    mRequestedRotation=rotation;
    mLastRotationFlags=animFlags;
  }
  if (DEBUG_ORIENTATION)   Log.v(TAG,""String_Node_Str"" + rotation);
  rotation=mPolicy.rotationForOrientationLw(mForcedAppOrientation,mRotation,mDisplayEnabled);
  if (DEBUG_ORIENTATION)   Log.v(TAG,""String_Node_Str"" + rotation);
  changed=mDisplayEnabled && mRotation != rotation;
  if (changed) {
    if (DEBUG_ORIENTATION)     Log.v(TAG,""String_Node_Str"" + rotation + ""String_Node_Str""+ mRotation+ ""String_Node_Str""+ mForcedAppOrientation+ ""String_Node_Str""+ mRequestedRotation+ ""String_Node_Str"");
    mRotation=rotation;
    mWindowsFreezingScreen=true;
    mH.removeMessages(H.WINDOW_FREEZE_TIMEOUT);
    mH.sendMessageDelayed(mH.obtainMessage(H.WINDOW_FREEZE_TIMEOUT),2000);
    startFreezingDisplayLocked();
    Log.i(TAG,""String_Node_Str"" + rotation + ""String_Node_Str""+ animFlags);
    mQueue.setOrientation(rotation);
    if (mDisplayEnabled) {
      Surface.setOrientation(0,rotation,animFlags);
    }
    for (int i=mWindows.size() - 1; i >= 0; i--) {
      WindowState w=(WindowState)mWindows.get(i);
      if (w.mSurface != null) {
        w.mOrientationChanging=true;
      }
    }
    for (int i=mRotationWatchers.size() - 1; i >= 0; i--) {
      try {
        mRotationWatchers.get(i).onRotationChanged(rotation);
      }
 catch (      RemoteException e) {
      }
    }
  }
  return changed;
}"
24397,"Configuration updateOrientationFromAppTokensLocked(Configuration appConfig,IBinder freezeThisOneIfNeeded){
  boolean changed=false;
  long ident=Binder.clearCallingIdentity();
  try {
    int req=computeForcedAppOrientationLocked();
    if (req != mForcedAppOrientation) {
      changed=true;
      mForcedAppOrientation=req;
      mPolicy.setCurrentOrientationLw(req);
    }
    if (changed) {
      changed=setRotationUncheckedLocked(WindowManagerPolicy.USE_LAST_ROTATION,1);
      if (changed) {
        if (freezeThisOneIfNeeded != null) {
          AppWindowToken wtoken=findAppWindowToken(freezeThisOneIfNeeded);
          if (wtoken != null) {
            startAppFreezingScreenLocked(wtoken,ActivityInfo.CONFIG_ORIENTATION);
          }
        }
        return computeNewConfigurationLocked();
      }
    }
    if (appConfig != null) {
      mTempConfiguration.setToDefaults();
      if (computeNewConfigurationLocked(mTempConfiguration)) {
        if (appConfig.diff(mTempConfiguration) != 0) {
          Log.i(TAG,""String_Node_Str"" + mTempConfiguration);
          return new Configuration(mTempConfiguration);
        }
      }
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
  return null;
}","Configuration updateOrientationFromAppTokensLocked(Configuration appConfig,IBinder freezeThisOneIfNeeded){
  boolean changed=false;
  long ident=Binder.clearCallingIdentity();
  try {
    int req=computeForcedAppOrientationLocked();
    if (req != mForcedAppOrientation) {
      changed=true;
      mForcedAppOrientation=req;
      mPolicy.setCurrentOrientationLw(req);
    }
    if (changed) {
      changed=setRotationUncheckedLocked(WindowManagerPolicy.USE_LAST_ROTATION,mLastRotationFlags & (~Surface.FLAGS_ORIENTATION_ANIMATION_DISABLE));
      if (changed) {
        if (freezeThisOneIfNeeded != null) {
          AppWindowToken wtoken=findAppWindowToken(freezeThisOneIfNeeded);
          if (wtoken != null) {
            startAppFreezingScreenLocked(wtoken,ActivityInfo.CONFIG_ORIENTATION);
          }
        }
        return computeNewConfigurationLocked();
      }
    }
    if (appConfig != null) {
      mTempConfiguration.setToDefaults();
      if (computeNewConfigurationLocked(mTempConfiguration)) {
        if (appConfig.diff(mTempConfiguration) != 0) {
          Log.i(TAG,""String_Node_Str"" + mTempConfiguration);
          return new Configuration(mTempConfiguration);
        }
      }
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
  return null;
}"
24398,"public void onSensorChanged(SensorEvent event){
  float[] values=event.values;
  float X=values[_DATA_X];
  float Y=values[_DATA_Y];
  float Z=values[_DATA_Z];
  float OneEightyOverPi=57.29577957855f;
  float gravity=(float)Math.sqrt(X * X + Y * Y + Z * Z);
  float zyangle=(float)Math.asin(Z / gravity) * OneEightyOverPi;
  int rotation=mSensorRotation;
  if ((zyangle <= PIVOT_UPPER) && (zyangle >= PIVOT_LOWER)) {
    float angle=(float)Math.atan2(Y,-X) * OneEightyOverPi;
    int orientation=90 - (int)Math.round(angle);
    while (orientation >= 360) {
      orientation-=360;
    }
    while (orientation < 0) {
      orientation+=360;
    }
    float delta=zyangle - PIVOT;
    if (((orientation >= 0) && (orientation <= LP_UPPER)) || (orientation >= PL_LOWER)) {
      float threshold;
      if (mSensorRotation == Surface.ROTATION_90) {
        if (delta < 0) {
          threshold=LP_LOWER - (LP_LF_LOWER * delta);
        }
 else {
          threshold=LP_LOWER + (LP_LF_UPPER * delta);
        }
      }
 else {
        if (delta < 0) {
          threshold=PL_UPPER + (PL_LF_LOWER * delta);
        }
 else {
          threshold=PL_UPPER - (PL_LF_UPPER * delta);
        }
      }
      rotation=(orientation >= PL_LOWER && orientation <= threshold) ? Surface.ROTATION_90 : Surface.ROTATION_0;
    }
  }
  if (rotation != mSensorRotation) {
    mSensorRotation=rotation;
    onOrientationChanged(mSensorRotation);
  }
}","public void onSensorChanged(SensorEvent event){
  float[] values=event.values;
  float X=values[_DATA_X];
  float Y=values[_DATA_Y];
  float Z=values[_DATA_Z];
  float OneEightyOverPi=57.29577957855f;
  float gravity=(float)Math.sqrt(X * X + Y * Y + Z * Z);
  float zyangle=(float)Math.asin(Z / gravity) * OneEightyOverPi;
  int rotation=-1;
  if ((zyangle <= PIVOT_UPPER) && (zyangle >= PIVOT_LOWER)) {
    float angle=(float)Math.atan2(Y,-X) * OneEightyOverPi;
    int orientation=90 - (int)Math.round(angle);
    while (orientation >= 360) {
      orientation-=360;
    }
    while (orientation < 0) {
      orientation+=360;
    }
    if ((orientation >= PL_LOWER) && (orientation <= LP_UPPER)) {
      float threshold;
      float delta=zyangle - PIVOT;
      if (mSensorRotation == Surface.ROTATION_90) {
        if (delta < 0) {
          threshold=LP_LOWER - (LP_LF_LOWER * delta);
        }
 else {
          threshold=LP_LOWER + (LP_LF_UPPER * delta);
        }
        rotation=(orientation >= threshold) ? Surface.ROTATION_0 : Surface.ROTATION_90;
      }
 else {
        if (delta < 0) {
          threshold=PL_UPPER + (PL_LF_LOWER * delta);
        }
 else {
          threshold=PL_UPPER - (PL_LF_UPPER * delta);
        }
        rotation=(orientation <= threshold) ? Surface.ROTATION_90 : Surface.ROTATION_0;
      }
    }
 else     if ((orientation >= LANDSCAPE_LOWER) && (orientation < LP_LOWER)) {
      rotation=Surface.ROTATION_90;
    }
 else     if ((orientation >= PL_UPPER) || (orientation <= PORTRAIT_LOWER)) {
      rotation=Surface.ROTATION_0;
    }
    if ((rotation != -1) && (rotation != mSensorRotation)) {
      mSensorRotation=rotation;
      onOrientationChanged(mSensorRotation);
    }
  }
}"
24399,"void observe(){
  ContentResolver resolver=mContext.getContentResolver();
  resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.END_BUTTON_BEHAVIOR),false,this);
  resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.ACCELEROMETER_ROTATION),false,this);
  resolver.registerContentObserver(Settings.Secure.getUriFor(Settings.Secure.DEFAULT_INPUT_METHOD),false,this);
  update();
}","void observe(){
  ContentResolver resolver=mContext.getContentResolver();
  resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.END_BUTTON_BEHAVIOR),false,this);
  resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.ACCELEROMETER_ROTATION),false,this);
  resolver.registerContentObserver(Settings.Secure.getUriFor(Settings.Secure.DEFAULT_INPUT_METHOD),false,this);
  resolver.registerContentObserver(Settings.System.getUriFor(""String_Node_Str""),false,this);
  update();
}"
24400,"void updateRotation(){
  mPowerManager.setKeyboardVisibility(mLidOpen);
  int rotation=Surface.ROTATION_0;
  if (mLidOpen) {
    rotation=Surface.ROTATION_90;
  }
  try {
    mWindowManager.setRotation(rotation,true);
  }
 catch (  RemoteException e) {
  }
}","void updateRotation(int animFlags){
  mPowerManager.setKeyboardVisibility(mLidOpen);
  int rotation=Surface.ROTATION_0;
  if (mLidOpen) {
    rotation=Surface.ROTATION_90;
  }
  try {
    mWindowManager.setRotation(rotation,true,animFlags);
  }
 catch (  RemoteException e) {
  }
}"
24401,"/** 
 * {@inheritDoc} 
 */
public void enableScreenAfterBoot(){
  readLidState();
  updateRotation();
}","/** 
 * {@inheritDoc} 
 */
public void enableScreenAfterBoot(){
  readLidState();
  updateRotation(0);
}"
24402,"@Override public void onChange(boolean selfChange){
  update();
  try {
    mWindowManager.setRotation(USE_LAST_ROTATION,false);
  }
 catch (  RemoteException e) {
  }
}","@Override public void onChange(boolean selfChange){
  update();
  try {
    mWindowManager.setRotation(USE_LAST_ROTATION,false,1);
  }
 catch (  RemoteException e) {
  }
}"
24403,"/** 
 * {@inheritDoc} 
 */
public boolean preprocessInputEventTq(RawInputEvent event){
switch (event.type) {
case RawInputEvent.EV_SW:
    if (event.keycode == 0) {
      mLidOpen=event.value == 0;
      updateRotation();
      if (keyguardIsShowingTq()) {
        if (mLidOpen) {
          mKeyguardMediator.pokeWakelock();
        }
      }
 else {
        if (mLidOpen) {
          mPowerManager.userActivity(SystemClock.uptimeMillis(),false,LocalPowerManager.BUTTON_EVENT);
        }
 else {
          mPowerManager.userActivity(SystemClock.uptimeMillis(),false,LocalPowerManager.OTHER_EVENT);
        }
      }
    }
}
return false;
}","/** 
 * {@inheritDoc} 
 */
public boolean preprocessInputEventTq(RawInputEvent event){
switch (event.type) {
case RawInputEvent.EV_SW:
    if (event.keycode == 0) {
      mLidOpen=event.value == 0;
      updateRotation(0);
      if (keyguardIsShowingTq()) {
        if (mLidOpen) {
          mKeyguardMediator.pokeWakelock();
        }
      }
 else {
        if (mLidOpen) {
          mPowerManager.userActivity(SystemClock.uptimeMillis(),false,LocalPowerManager.BUTTON_EVENT);
        }
 else {
          mPowerManager.userActivity(SystemClock.uptimeMillis(),false,LocalPowerManager.OTHER_EVENT);
        }
      }
    }
}
return false;
}"
24404,"public int rotationForOrientationLw(int orientation,int lastRotation,boolean displayEnabled){
synchronized (mLock) {
switch (orientation) {
case ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE:
      return Surface.ROTATION_90;
case ActivityInfo.SCREEN_ORIENTATION_PORTRAIT:
    return Surface.ROTATION_0;
}
if (mLidOpen) {
  return Surface.ROTATION_90;
}
 else {
  if (useSensorForOrientationLp()) {
    return mSensorRotation >= 0 ? mSensorRotation : lastRotation;
  }
  return Surface.ROTATION_0;
}
}
}","public int rotationForOrientationLw(int orientation,int lastRotation,boolean displayEnabled){
synchronized (mLock) {
switch (orientation) {
case ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE:
      return Surface.ROTATION_90;
case ActivityInfo.SCREEN_ORIENTATION_PORTRAIT:
    return Surface.ROTATION_0;
}
if (mLidOpen) {
  return Surface.ROTATION_90;
}
 else {
  if (useSensorForOrientationLp(orientation)) {
    int curRotation=mOrientationListener.getCurrentRotation();
    return curRotation >= 0 ? curRotation : lastRotation;
  }
  return Surface.ROTATION_0;
}
}
}"
24405,"void updateOrientationListenerLp(){
  if (!mOrientationListener.canDetectOrientation()) {
    return;
  }
  if (localLOGV)   Log.i(TAG,""String_Node_Str"" + mScreenOn + ""String_Node_Str""+ mCurrentAppOrientation+ ""String_Node_Str""+ mOrientationSensorEnabled);
  boolean disable=true;
  if (mScreenOn) {
    if (needSensorRunningLp()) {
      disable=false;
      if (!mOrientationSensorEnabled) {
        mOrientationListener.enable();
        if (localLOGV)         Log.i(TAG,""String_Node_Str"");
        mSensorRotation=-1;
        mOrientationSensorEnabled=true;
      }
    }
  }
  if (disable && mOrientationSensorEnabled) {
    mOrientationListener.disable();
    if (localLOGV)     Log.i(TAG,""String_Node_Str"");
    mSensorRotation=-1;
    mOrientationSensorEnabled=false;
  }
}","void updateOrientationListenerLp(){
  if (!mOrientationListener.canDetectOrientation()) {
    return;
  }
  if (localLOGV)   Log.i(TAG,""String_Node_Str"" + mScreenOn + ""String_Node_Str""+ mCurrentAppOrientation+ ""String_Node_Str""+ mOrientationSensorEnabled);
  boolean disable=true;
  if (mScreenOn) {
    if (needSensorRunningLp()) {
      disable=false;
      if (!mOrientationSensorEnabled) {
        mOrientationListener.enable();
        if (localLOGV)         Log.i(TAG,""String_Node_Str"");
        mOrientationSensorEnabled=true;
      }
    }
  }
  if (disable && mOrientationSensorEnabled) {
    mOrientationListener.disable();
    if (localLOGV)     Log.i(TAG,""String_Node_Str"");
    mOrientationSensorEnabled=false;
  }
}"
24406,"public void update(){
  ContentResolver resolver=mContext.getContentResolver();
synchronized (mLock) {
    mEndcallBehavior=Settings.System.getInt(resolver,Settings.System.END_BUTTON_BEHAVIOR,DEFAULT_ENDCALL_BEHAVIOR);
    int accelerometerDefault=Settings.System.getInt(resolver,Settings.System.ACCELEROMETER_ROTATION,DEFAULT_ACCELEROMETER_ROTATION);
    if (mAccelerometerDefault != accelerometerDefault) {
      mAccelerometerDefault=accelerometerDefault;
      updateOrientationListenerLp();
    }
    String imId=Settings.Secure.getString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD);
    boolean hasSoftInput=imId != null && imId.length() > 0;
    if (mHasSoftInput != hasSoftInput) {
      mHasSoftInput=hasSoftInput;
      updateRotation();
    }
  }
}","public void update(){
  ContentResolver resolver=mContext.getContentResolver();
synchronized (mLock) {
    mEndcallBehavior=Settings.System.getInt(resolver,Settings.System.END_BUTTON_BEHAVIOR,DEFAULT_ENDCALL_BEHAVIOR);
    mFancyRotationAnimation=Settings.System.getInt(resolver,""String_Node_Str"",0);
    int accelerometerDefault=Settings.System.getInt(resolver,Settings.System.ACCELEROMETER_ROTATION,DEFAULT_ACCELEROMETER_ROTATION);
    if (mAccelerometerDefault != accelerometerDefault) {
      mAccelerometerDefault=accelerometerDefault;
      updateOrientationListenerLp();
    }
    String imId=Settings.Secure.getString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD);
    boolean hasSoftInput=imId != null && imId.length() > 0;
    if (mHasSoftInput != hasSoftInput) {
      mHasSoftInput=hasSoftInput;
      updateRotation(1);
    }
  }
}"
24407,"boolean useSensorForOrientationLp(){
  if (mCurrentAppOrientation == ActivityInfo.SCREEN_ORIENTATION_SENSOR) {
    return true;
  }
  if (mAccelerometerDefault != 0 && (mCurrentAppOrientation == ActivityInfo.SCREEN_ORIENTATION_USER || mCurrentAppOrientation == ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED)) {
    return true;
  }
  return false;
}","boolean useSensorForOrientationLp(int appOrientation){
  if (appOrientation == ActivityInfo.SCREEN_ORIENTATION_SENSOR) {
    return true;
  }
  if (mAccelerometerDefault != 0 && (appOrientation == ActivityInfo.SCREEN_ORIENTATION_USER || appOrientation == ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED)) {
    return true;
  }
  return false;
}"
24408,"@Override public void onOrientationChanged(int rotation){
  if (rotation != mSensorRotation) {
    if (localLOGV)     Log.i(TAG,""String_Node_Str"" + rotation + ""String_Node_Str""+ mSensorRotation);
    mSensorRotation=rotation;
    try {
      mWindowManager.setRotation(rotation,false);
    }
 catch (    RemoteException e) {
    }
  }
}","@Override public void onOrientationChanged(int rotation){
  if (true)   Log.i(TAG,""String_Node_Str"" + rotation);
  try {
    mWindowManager.setRotation(rotation,false,1);
  }
 catch (  RemoteException e) {
  }
}"
24409,"public void performEnableScreen(){
synchronized (mWindowMap) {
    if (mDisplayEnabled) {
      return;
    }
    if (!mSystemBooted) {
      return;
    }
    final int N=mWindows.size();
    for (int i=0; i < N; i++) {
      WindowState w=(WindowState)mWindows.get(i);
      if (w.isVisibleLw() && !w.isDisplayedLw()) {
        return;
      }
    }
    mDisplayEnabled=true;
    if (false) {
      Log.i(TAG,""String_Node_Str"");
      StringWriter sw=new StringWriter();
      PrintWriter pw=new PrintWriter(sw);
      this.dump(null,pw,null);
      Log.i(TAG,sw.toString());
    }
    try {
      IBinder surfaceFlinger=ServiceManager.getService(""String_Node_Str"");
      if (surfaceFlinger != null) {
        Parcel data=Parcel.obtain();
        data.writeInterfaceToken(""String_Node_Str"");
        surfaceFlinger.transact(IBinder.FIRST_CALL_TRANSACTION,data,null,0);
        data.recycle();
      }
    }
 catch (    RemoteException ex) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  mPolicy.enableScreenAfterBoot();
  setRotationUnchecked(WindowManagerPolicy.USE_LAST_ROTATION,false,0);
}","public void performEnableScreen(){
synchronized (mWindowMap) {
    if (mDisplayEnabled) {
      return;
    }
    if (!mSystemBooted) {
      return;
    }
    final int N=mWindows.size();
    for (int i=0; i < N; i++) {
      WindowState w=(WindowState)mWindows.get(i);
      if (w.isVisibleLw() && !w.isDisplayedLw()) {
        return;
      }
    }
    mDisplayEnabled=true;
    if (false) {
      Log.i(TAG,""String_Node_Str"");
      StringWriter sw=new StringWriter();
      PrintWriter pw=new PrintWriter(sw);
      this.dump(null,pw,null);
      Log.i(TAG,sw.toString());
    }
    try {
      IBinder surfaceFlinger=ServiceManager.getService(""String_Node_Str"");
      if (surfaceFlinger != null) {
        Parcel data=Parcel.obtain();
        data.writeInterfaceToken(""String_Node_Str"");
        surfaceFlinger.transact(IBinder.FIRST_CALL_TRANSACTION,data,null,0);
        data.recycle();
      }
    }
 catch (    RemoteException ex) {
      Log.e(TAG,""String_Node_Str"");
    }
  }
  mPolicy.enableScreenAfterBoot();
  setRotationUnchecked(WindowManagerPolicy.USE_LAST_ROTATION,false,mLastRotationFlags | Surface.FLAGS_ORIENTATION_ANIMATION_DISABLE);
}"
24410,"public boolean setRotationUncheckedLocked(int rotation,int animFlags){
  boolean changed;
  if (rotation == WindowManagerPolicy.USE_LAST_ROTATION) {
    rotation=mRequestedRotation;
  }
 else {
    mRequestedRotation=rotation;
  }
  if (DEBUG_ORIENTATION)   Log.v(TAG,""String_Node_Str"" + rotation);
  rotation=mPolicy.rotationForOrientationLw(mForcedAppOrientation,mRotation,mDisplayEnabled);
  if (DEBUG_ORIENTATION)   Log.v(TAG,""String_Node_Str"" + rotation);
  changed=mDisplayEnabled && mRotation != rotation;
  if (changed) {
    if (DEBUG_ORIENTATION)     Log.v(TAG,""String_Node_Str"" + rotation + ""String_Node_Str""+ mRotation+ ""String_Node_Str""+ mForcedAppOrientation+ ""String_Node_Str""+ mRequestedRotation+ ""String_Node_Str"");
    mRotation=rotation;
    mWindowsFreezingScreen=true;
    mH.removeMessages(H.WINDOW_FREEZE_TIMEOUT);
    mH.sendMessageDelayed(mH.obtainMessage(H.WINDOW_FREEZE_TIMEOUT),2000);
    startFreezingDisplayLocked();
    Log.i(TAG,""String_Node_Str"" + rotation + ""String_Node_Str""+ animFlags);
    mQueue.setOrientation(rotation);
    if (mDisplayEnabled) {
      Surface.setOrientation(0,rotation);
    }
    for (int i=mWindows.size() - 1; i >= 0; i--) {
      WindowState w=(WindowState)mWindows.get(i);
      if (w.mSurface != null) {
        w.mOrientationChanging=true;
      }
    }
    for (int i=mRotationWatchers.size() - 1; i >= 0; i--) {
      try {
        mRotationWatchers.get(i).onRotationChanged(rotation);
      }
 catch (      RemoteException e) {
      }
    }
  }
  return changed;
}","public boolean setRotationUncheckedLocked(int rotation,int animFlags){
  boolean changed;
  if (rotation == WindowManagerPolicy.USE_LAST_ROTATION) {
    rotation=mRequestedRotation;
  }
 else {
    mRequestedRotation=rotation;
    mLastRotationFlags=animFlags;
  }
  if (DEBUG_ORIENTATION)   Log.v(TAG,""String_Node_Str"" + rotation);
  rotation=mPolicy.rotationForOrientationLw(mForcedAppOrientation,mRotation,mDisplayEnabled);
  if (DEBUG_ORIENTATION)   Log.v(TAG,""String_Node_Str"" + rotation);
  changed=mDisplayEnabled && mRotation != rotation;
  if (changed) {
    if (DEBUG_ORIENTATION)     Log.v(TAG,""String_Node_Str"" + rotation + ""String_Node_Str""+ mRotation+ ""String_Node_Str""+ mForcedAppOrientation+ ""String_Node_Str""+ mRequestedRotation+ ""String_Node_Str"");
    mRotation=rotation;
    mWindowsFreezingScreen=true;
    mH.removeMessages(H.WINDOW_FREEZE_TIMEOUT);
    mH.sendMessageDelayed(mH.obtainMessage(H.WINDOW_FREEZE_TIMEOUT),2000);
    startFreezingDisplayLocked();
    Log.i(TAG,""String_Node_Str"" + rotation + ""String_Node_Str""+ animFlags);
    mQueue.setOrientation(rotation);
    if (mDisplayEnabled) {
      Surface.setOrientation(0,rotation,animFlags);
    }
    for (int i=mWindows.size() - 1; i >= 0; i--) {
      WindowState w=(WindowState)mWindows.get(i);
      if (w.mSurface != null) {
        w.mOrientationChanging=true;
      }
    }
    for (int i=mRotationWatchers.size() - 1; i >= 0; i--) {
      try {
        mRotationWatchers.get(i).onRotationChanged(rotation);
      }
 catch (      RemoteException e) {
      }
    }
  }
  return changed;
}"
24411,"Configuration updateOrientationFromAppTokensLocked(Configuration appConfig,IBinder freezeThisOneIfNeeded){
  boolean changed=false;
  long ident=Binder.clearCallingIdentity();
  try {
    int req=computeForcedAppOrientationLocked();
    if (req != mForcedAppOrientation) {
      changed=true;
      mForcedAppOrientation=req;
      mPolicy.setCurrentOrientationLw(req);
    }
    if (changed) {
      changed=setRotationUncheckedLocked(WindowManagerPolicy.USE_LAST_ROTATION,1);
      if (changed) {
        if (freezeThisOneIfNeeded != null) {
          AppWindowToken wtoken=findAppWindowToken(freezeThisOneIfNeeded);
          if (wtoken != null) {
            startAppFreezingScreenLocked(wtoken,ActivityInfo.CONFIG_ORIENTATION);
          }
        }
        return computeNewConfigurationLocked();
      }
    }
    if (appConfig != null) {
      mTempConfiguration.setToDefaults();
      if (computeNewConfigurationLocked(mTempConfiguration)) {
        if (appConfig.diff(mTempConfiguration) != 0) {
          Log.i(TAG,""String_Node_Str"" + mTempConfiguration);
          return new Configuration(mTempConfiguration);
        }
      }
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
  return null;
}","Configuration updateOrientationFromAppTokensLocked(Configuration appConfig,IBinder freezeThisOneIfNeeded){
  boolean changed=false;
  long ident=Binder.clearCallingIdentity();
  try {
    int req=computeForcedAppOrientationLocked();
    if (req != mForcedAppOrientation) {
      changed=true;
      mForcedAppOrientation=req;
      mPolicy.setCurrentOrientationLw(req);
    }
    if (changed) {
      changed=setRotationUncheckedLocked(WindowManagerPolicy.USE_LAST_ROTATION,mLastRotationFlags & (~Surface.FLAGS_ORIENTATION_ANIMATION_DISABLE));
      if (changed) {
        if (freezeThisOneIfNeeded != null) {
          AppWindowToken wtoken=findAppWindowToken(freezeThisOneIfNeeded);
          if (wtoken != null) {
            startAppFreezingScreenLocked(wtoken,ActivityInfo.CONFIG_ORIENTATION);
          }
        }
        return computeNewConfigurationLocked();
      }
    }
    if (appConfig != null) {
      mTempConfiguration.setToDefaults();
      if (computeNewConfigurationLocked(mTempConfiguration)) {
        if (appConfig.diff(mTempConfiguration) != 0) {
          Log.i(TAG,""String_Node_Str"" + mTempConfiguration);
          return new Configuration(mTempConfiguration);
        }
      }
    }
  }
  finally {
    Binder.restoreCallingIdentity(ident);
  }
  return null;
}"
24412,"void observe(){
  ContentResolver resolver=mContext.getContentResolver();
  resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.END_BUTTON_BEHAVIOR),false,this);
  resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.ACCELEROMETER_ROTATION),false,this);
  resolver.registerContentObserver(Settings.Secure.getUriFor(Settings.Secure.DEFAULT_INPUT_METHOD),false,this);
  update();
}","void observe(){
  ContentResolver resolver=mContext.getContentResolver();
  resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.END_BUTTON_BEHAVIOR),false,this);
  resolver.registerContentObserver(Settings.System.getUriFor(Settings.System.ACCELEROMETER_ROTATION),false,this);
  resolver.registerContentObserver(Settings.Secure.getUriFor(Settings.Secure.DEFAULT_INPUT_METHOD),false,this);
  resolver.registerContentObserver(Settings.System.getUriFor(""String_Node_Str""),false,this);
  update();
}"
24413,"void updateRotation(){
  mPowerManager.setKeyboardVisibility(mLidOpen);
  int rotation=Surface.ROTATION_0;
  if (mLidOpen) {
    rotation=Surface.ROTATION_90;
  }
  try {
    mWindowManager.setRotation(rotation,true);
  }
 catch (  RemoteException e) {
  }
}","void updateRotation(int animFlags){
  mPowerManager.setKeyboardVisibility(mLidOpen);
  int rotation=Surface.ROTATION_0;
  if (mLidOpen) {
    rotation=Surface.ROTATION_90;
  }
  try {
    mWindowManager.setRotation(rotation,true,animFlags);
  }
 catch (  RemoteException e) {
  }
}"
24414,"/** 
 * {@inheritDoc} 
 */
public void enableScreenAfterBoot(){
  readLidState();
  updateRotation();
}","/** 
 * {@inheritDoc} 
 */
public void enableScreenAfterBoot(){
  readLidState();
  updateRotation(0);
}"
24415,"@Override public void onChange(boolean selfChange){
  update();
  try {
    mWindowManager.setRotation(USE_LAST_ROTATION,false);
  }
 catch (  RemoteException e) {
  }
}","@Override public void onChange(boolean selfChange){
  update();
  try {
    mWindowManager.setRotation(USE_LAST_ROTATION,false,1);
  }
 catch (  RemoteException e) {
  }
}"
24416,"/** 
 * {@inheritDoc} 
 */
public boolean preprocessInputEventTq(RawInputEvent event){
switch (event.type) {
case RawInputEvent.EV_SW:
    if (event.keycode == 0) {
      mLidOpen=event.value == 0;
      updateRotation();
      if (keyguardIsShowingTq()) {
        if (mLidOpen) {
          mKeyguardMediator.pokeWakelock();
        }
      }
 else {
        if (mLidOpen) {
          mPowerManager.userActivity(SystemClock.uptimeMillis(),false,LocalPowerManager.BUTTON_EVENT);
        }
 else {
          mPowerManager.userActivity(SystemClock.uptimeMillis(),false,LocalPowerManager.OTHER_EVENT);
        }
      }
    }
}
return false;
}","/** 
 * {@inheritDoc} 
 */
public boolean preprocessInputEventTq(RawInputEvent event){
switch (event.type) {
case RawInputEvent.EV_SW:
    if (event.keycode == 0) {
      mLidOpen=event.value == 0;
      updateRotation(0);
      if (keyguardIsShowingTq()) {
        if (mLidOpen) {
          mKeyguardMediator.pokeWakelock();
        }
      }
 else {
        if (mLidOpen) {
          mPowerManager.userActivity(SystemClock.uptimeMillis(),false,LocalPowerManager.BUTTON_EVENT);
        }
 else {
          mPowerManager.userActivity(SystemClock.uptimeMillis(),false,LocalPowerManager.OTHER_EVENT);
        }
      }
    }
}
return false;
}"
24417,"public int rotationForOrientationLw(int orientation,int lastRotation,boolean displayEnabled){
synchronized (mLock) {
switch (orientation) {
case ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE:
      return Surface.ROTATION_90;
case ActivityInfo.SCREEN_ORIENTATION_PORTRAIT:
    return Surface.ROTATION_0;
}
if (mLidOpen) {
  return Surface.ROTATION_90;
}
 else {
  if (useSensorForOrientationLp()) {
    return mSensorRotation >= 0 ? mSensorRotation : lastRotation;
  }
  return Surface.ROTATION_0;
}
}
}","public int rotationForOrientationLw(int orientation,int lastRotation,boolean displayEnabled){
synchronized (mLock) {
switch (orientation) {
case ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE:
      return Surface.ROTATION_90;
case ActivityInfo.SCREEN_ORIENTATION_PORTRAIT:
    return Surface.ROTATION_0;
}
if (mLidOpen) {
  return Surface.ROTATION_90;
}
 else {
  if (useSensorForOrientationLp(orientation)) {
    int curRotation=mOrientationListener.getCurrentRotation();
    return curRotation >= 0 ? curRotation : lastRotation;
  }
  return Surface.ROTATION_0;
}
}
}"
24418,"void updateOrientationListenerLp(){
  if (!mOrientationListener.canDetectOrientation()) {
    return;
  }
  if (localLOGV)   Log.i(TAG,""String_Node_Str"" + mScreenOn + ""String_Node_Str""+ mCurrentAppOrientation+ ""String_Node_Str""+ mOrientationSensorEnabled);
  boolean disable=true;
  if (mScreenOn) {
    if (needSensorRunningLp()) {
      disable=false;
      if (!mOrientationSensorEnabled) {
        mOrientationListener.enable();
        if (localLOGV)         Log.i(TAG,""String_Node_Str"");
        mSensorRotation=-1;
        mOrientationSensorEnabled=true;
      }
    }
  }
  if (disable && mOrientationSensorEnabled) {
    mOrientationListener.disable();
    if (localLOGV)     Log.i(TAG,""String_Node_Str"");
    mSensorRotation=-1;
    mOrientationSensorEnabled=false;
  }
}","void updateOrientationListenerLp(){
  if (!mOrientationListener.canDetectOrientation()) {
    return;
  }
  if (localLOGV)   Log.i(TAG,""String_Node_Str"" + mScreenOn + ""String_Node_Str""+ mCurrentAppOrientation+ ""String_Node_Str""+ mOrientationSensorEnabled);
  boolean disable=true;
  if (mScreenOn) {
    if (needSensorRunningLp()) {
      disable=false;
      if (!mOrientationSensorEnabled) {
        mOrientationListener.enable();
        if (localLOGV)         Log.i(TAG,""String_Node_Str"");
        mOrientationSensorEnabled=true;
      }
    }
  }
  if (disable && mOrientationSensorEnabled) {
    mOrientationListener.disable();
    if (localLOGV)     Log.i(TAG,""String_Node_Str"");
    mOrientationSensorEnabled=false;
  }
}"
24419,"public void update(){
  ContentResolver resolver=mContext.getContentResolver();
synchronized (mLock) {
    mEndcallBehavior=Settings.System.getInt(resolver,Settings.System.END_BUTTON_BEHAVIOR,DEFAULT_ENDCALL_BEHAVIOR);
    int accelerometerDefault=Settings.System.getInt(resolver,Settings.System.ACCELEROMETER_ROTATION,DEFAULT_ACCELEROMETER_ROTATION);
    if (mAccelerometerDefault != accelerometerDefault) {
      mAccelerometerDefault=accelerometerDefault;
      updateOrientationListenerLp();
    }
    String imId=Settings.Secure.getString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD);
    boolean hasSoftInput=imId != null && imId.length() > 0;
    if (mHasSoftInput != hasSoftInput) {
      mHasSoftInput=hasSoftInput;
      updateRotation();
    }
  }
}","public void update(){
  ContentResolver resolver=mContext.getContentResolver();
synchronized (mLock) {
    mEndcallBehavior=Settings.System.getInt(resolver,Settings.System.END_BUTTON_BEHAVIOR,DEFAULT_ENDCALL_BEHAVIOR);
    mFancyRotationAnimation=Settings.System.getInt(resolver,""String_Node_Str"",0);
    int accelerometerDefault=Settings.System.getInt(resolver,Settings.System.ACCELEROMETER_ROTATION,DEFAULT_ACCELEROMETER_ROTATION);
    if (mAccelerometerDefault != accelerometerDefault) {
      mAccelerometerDefault=accelerometerDefault;
      updateOrientationListenerLp();
    }
    String imId=Settings.Secure.getString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD);
    boolean hasSoftInput=imId != null && imId.length() > 0;
    if (mHasSoftInput != hasSoftInput) {
      mHasSoftInput=hasSoftInput;
      updateRotation(1);
    }
  }
}"
24420,"boolean useSensorForOrientationLp(){
  if (mCurrentAppOrientation == ActivityInfo.SCREEN_ORIENTATION_SENSOR) {
    return true;
  }
  if (mAccelerometerDefault != 0 && (mCurrentAppOrientation == ActivityInfo.SCREEN_ORIENTATION_USER || mCurrentAppOrientation == ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED)) {
    return true;
  }
  return false;
}","boolean useSensorForOrientationLp(int appOrientation){
  if (appOrientation == ActivityInfo.SCREEN_ORIENTATION_SENSOR) {
    return true;
  }
  if (mAccelerometerDefault != 0 && (appOrientation == ActivityInfo.SCREEN_ORIENTATION_USER || appOrientation == ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED)) {
    return true;
  }
  return false;
}"
24421,"@Override public void onOrientationChanged(int rotation){
  if (rotation != mSensorRotation) {
    if (localLOGV)     Log.i(TAG,""String_Node_Str"" + rotation + ""String_Node_Str""+ mSensorRotation);
    mSensorRotation=rotation;
    try {
      mWindowManager.setRotation(rotation,false);
    }
 catch (    RemoteException e) {
    }
  }
}","@Override public void onOrientationChanged(int rotation){
  if (true)   Log.i(TAG,""String_Node_Str"" + rotation);
  try {
    mWindowManager.setRotation(rotation,false,1);
  }
 catch (  RemoteException e) {
  }
}"
24422,"void updateRotation(int animFlags){
  mPowerManager.setKeyboardVisibility(mLidOpen);
  int rotation=Surface.ROTATION_0;
  if (mLidOpen) {
    rotation=Surface.ROTATION_90;
  }
  try {
    mWindowManager.setRotation(rotation,true,animFlags);
  }
 catch (  RemoteException e) {
  }
}","void updateRotation(int animFlags){
  mPowerManager.setKeyboardVisibility(mLidOpen);
  int rotation=Surface.ROTATION_0;
  if (mLidOpen) {
    rotation=Surface.ROTATION_90;
  }
  try {
    mWindowManager.setRotation(rotation,true,mFancyRotationAnimation | animFlags);
  }
 catch (  RemoteException e) {
  }
}"
24423,"/** 
 * {@inheritDoc} 
 */
public void enableScreenAfterBoot(){
  readLidState();
  updateRotation(0);
}","/** 
 * {@inheritDoc} 
 */
public void enableScreenAfterBoot(){
  readLidState();
  updateRotation(Surface.FLAGS_ORIENTATION_ANIMATION_DISABLE);
}"
24424,"@Override public void onChange(boolean selfChange){
  update();
  try {
    mWindowManager.setRotation(USE_LAST_ROTATION,false,1);
  }
 catch (  RemoteException e) {
  }
}","@Override public void onChange(boolean selfChange){
  update();
  try {
    mWindowManager.setRotation(USE_LAST_ROTATION,false,mFancyRotationAnimation);
  }
 catch (  RemoteException e) {
  }
}"
24425,"/** 
 * {@inheritDoc} 
 */
public boolean preprocessInputEventTq(RawInputEvent event){
switch (event.type) {
case RawInputEvent.EV_SW:
    if (event.keycode == 0) {
      mLidOpen=event.value == 0;
      updateRotation(0);
      if (keyguardIsShowingTq()) {
        if (mLidOpen) {
          mKeyguardMediator.pokeWakelock();
        }
      }
 else {
        if (mLidOpen) {
          mPowerManager.userActivity(SystemClock.uptimeMillis(),false,LocalPowerManager.BUTTON_EVENT);
        }
 else {
          mPowerManager.userActivity(SystemClock.uptimeMillis(),false,LocalPowerManager.OTHER_EVENT);
        }
      }
    }
}
return false;
}","/** 
 * {@inheritDoc} 
 */
public boolean preprocessInputEventTq(RawInputEvent event){
switch (event.type) {
case RawInputEvent.EV_SW:
    if (event.keycode == 0) {
      mLidOpen=event.value == 0;
      updateRotation(Surface.FLAGS_ORIENTATION_ANIMATION_DISABLE);
      if (keyguardIsShowingTq()) {
        if (mLidOpen) {
          mKeyguardMediator.pokeWakelock();
        }
      }
 else {
        if (mLidOpen) {
          mPowerManager.userActivity(SystemClock.uptimeMillis(),false,LocalPowerManager.BUTTON_EVENT);
        }
 else {
          mPowerManager.userActivity(SystemClock.uptimeMillis(),false,LocalPowerManager.OTHER_EVENT);
        }
      }
    }
}
return false;
}"
24426,"public void update(){
  ContentResolver resolver=mContext.getContentResolver();
synchronized (mLock) {
    mEndcallBehavior=Settings.System.getInt(resolver,Settings.System.END_BUTTON_BEHAVIOR,DEFAULT_ENDCALL_BEHAVIOR);
    mFancyRotationAnimation=Settings.System.getInt(resolver,""String_Node_Str"",0);
    int accelerometerDefault=Settings.System.getInt(resolver,Settings.System.ACCELEROMETER_ROTATION,DEFAULT_ACCELEROMETER_ROTATION);
    if (mAccelerometerDefault != accelerometerDefault) {
      mAccelerometerDefault=accelerometerDefault;
      updateOrientationListenerLp();
    }
    String imId=Settings.Secure.getString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD);
    boolean hasSoftInput=imId != null && imId.length() > 0;
    if (mHasSoftInput != hasSoftInput) {
      mHasSoftInput=hasSoftInput;
      updateRotation(1);
    }
  }
}","public void update(){
  ContentResolver resolver=mContext.getContentResolver();
synchronized (mLock) {
    mEndcallBehavior=Settings.System.getInt(resolver,Settings.System.END_BUTTON_BEHAVIOR,DEFAULT_ENDCALL_BEHAVIOR);
    mFancyRotationAnimation=Settings.System.getInt(resolver,""String_Node_Str"",0) != 0 ? 0x80 : 0;
    int accelerometerDefault=Settings.System.getInt(resolver,Settings.System.ACCELEROMETER_ROTATION,DEFAULT_ACCELEROMETER_ROTATION);
    if (mAccelerometerDefault != accelerometerDefault) {
      mAccelerometerDefault=accelerometerDefault;
      updateOrientationListenerLp();
    }
    String imId=Settings.Secure.getString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD);
    boolean hasSoftInput=imId != null && imId.length() > 0;
    if (mHasSoftInput != hasSoftInput) {
      mHasSoftInput=hasSoftInput;
      updateRotation(0);
    }
  }
}"
24427,"@Override public void onOrientationChanged(int rotation){
  if (true)   Log.i(TAG,""String_Node_Str"" + rotation);
  try {
    mWindowManager.setRotation(rotation,false,1);
  }
 catch (  RemoteException e) {
  }
}","@Override public void onOrientationChanged(int rotation){
  if (true)   Log.i(TAG,""String_Node_Str"" + rotation);
  try {
    mWindowManager.setRotation(rotation,false,mFancyRotationAnimation);
  }
 catch (  RemoteException e) {
  }
}"
24428,"void updateRotation(int animFlags){
  mPowerManager.setKeyboardVisibility(mLidOpen);
  int rotation=Surface.ROTATION_0;
  if (mLidOpen) {
    rotation=Surface.ROTATION_90;
  }
  try {
    mWindowManager.setRotation(rotation,true,animFlags);
  }
 catch (  RemoteException e) {
  }
}","void updateRotation(int animFlags){
  mPowerManager.setKeyboardVisibility(mLidOpen);
  int rotation=Surface.ROTATION_0;
  if (mLidOpen) {
    rotation=Surface.ROTATION_90;
  }
  try {
    mWindowManager.setRotation(rotation,true,mFancyRotationAnimation | animFlags);
  }
 catch (  RemoteException e) {
  }
}"
24429,"/** 
 * {@inheritDoc} 
 */
public void enableScreenAfterBoot(){
  readLidState();
  updateRotation(0);
}","/** 
 * {@inheritDoc} 
 */
public void enableScreenAfterBoot(){
  readLidState();
  updateRotation(Surface.FLAGS_ORIENTATION_ANIMATION_DISABLE);
}"
24430,"@Override public void onChange(boolean selfChange){
  update();
  try {
    mWindowManager.setRotation(USE_LAST_ROTATION,false,1);
  }
 catch (  RemoteException e) {
  }
}","@Override public void onChange(boolean selfChange){
  update();
  try {
    mWindowManager.setRotation(USE_LAST_ROTATION,false,mFancyRotationAnimation);
  }
 catch (  RemoteException e) {
  }
}"
24431,"/** 
 * {@inheritDoc} 
 */
public boolean preprocessInputEventTq(RawInputEvent event){
switch (event.type) {
case RawInputEvent.EV_SW:
    if (event.keycode == 0) {
      mLidOpen=event.value == 0;
      updateRotation(0);
      if (keyguardIsShowingTq()) {
        if (mLidOpen) {
          mKeyguardMediator.pokeWakelock();
        }
      }
 else {
        if (mLidOpen) {
          mPowerManager.userActivity(SystemClock.uptimeMillis(),false,LocalPowerManager.BUTTON_EVENT);
        }
 else {
          mPowerManager.userActivity(SystemClock.uptimeMillis(),false,LocalPowerManager.OTHER_EVENT);
        }
      }
    }
}
return false;
}","/** 
 * {@inheritDoc} 
 */
public boolean preprocessInputEventTq(RawInputEvent event){
switch (event.type) {
case RawInputEvent.EV_SW:
    if (event.keycode == 0) {
      mLidOpen=event.value == 0;
      updateRotation(Surface.FLAGS_ORIENTATION_ANIMATION_DISABLE);
      if (keyguardIsShowingTq()) {
        if (mLidOpen) {
          mKeyguardMediator.pokeWakelock();
        }
      }
 else {
        if (mLidOpen) {
          mPowerManager.userActivity(SystemClock.uptimeMillis(),false,LocalPowerManager.BUTTON_EVENT);
        }
 else {
          mPowerManager.userActivity(SystemClock.uptimeMillis(),false,LocalPowerManager.OTHER_EVENT);
        }
      }
    }
}
return false;
}"
24432,"public void update(){
  ContentResolver resolver=mContext.getContentResolver();
synchronized (mLock) {
    mEndcallBehavior=Settings.System.getInt(resolver,Settings.System.END_BUTTON_BEHAVIOR,DEFAULT_ENDCALL_BEHAVIOR);
    mFancyRotationAnimation=Settings.System.getInt(resolver,""String_Node_Str"",0);
    int accelerometerDefault=Settings.System.getInt(resolver,Settings.System.ACCELEROMETER_ROTATION,DEFAULT_ACCELEROMETER_ROTATION);
    if (mAccelerometerDefault != accelerometerDefault) {
      mAccelerometerDefault=accelerometerDefault;
      updateOrientationListenerLp();
    }
    String imId=Settings.Secure.getString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD);
    boolean hasSoftInput=imId != null && imId.length() > 0;
    if (mHasSoftInput != hasSoftInput) {
      mHasSoftInput=hasSoftInput;
      updateRotation(1);
    }
  }
}","public void update(){
  ContentResolver resolver=mContext.getContentResolver();
synchronized (mLock) {
    mEndcallBehavior=Settings.System.getInt(resolver,Settings.System.END_BUTTON_BEHAVIOR,DEFAULT_ENDCALL_BEHAVIOR);
    mFancyRotationAnimation=Settings.System.getInt(resolver,""String_Node_Str"",0) != 0 ? 0x80 : 0;
    int accelerometerDefault=Settings.System.getInt(resolver,Settings.System.ACCELEROMETER_ROTATION,DEFAULT_ACCELEROMETER_ROTATION);
    if (mAccelerometerDefault != accelerometerDefault) {
      mAccelerometerDefault=accelerometerDefault;
      updateOrientationListenerLp();
    }
    String imId=Settings.Secure.getString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD);
    boolean hasSoftInput=imId != null && imId.length() > 0;
    if (mHasSoftInput != hasSoftInput) {
      mHasSoftInput=hasSoftInput;
      updateRotation(0);
    }
  }
}"
24433,"@Override public void onOrientationChanged(int rotation){
  if (true)   Log.i(TAG,""String_Node_Str"" + rotation);
  try {
    mWindowManager.setRotation(rotation,false,1);
  }
 catch (  RemoteException e) {
  }
}","@Override public void onOrientationChanged(int rotation){
  if (true)   Log.i(TAG,""String_Node_Str"" + rotation);
  try {
    mWindowManager.setRotation(rotation,false,mFancyRotationAnimation);
  }
 catch (  RemoteException e) {
  }
}"
24434,"/** 
 * Called when the dependency changes.
 * @param dependency The Preference that this Preference depends on.
 * @param disableDependent Set true to disable this Preference.
 */
public void onDependencyChanged(Preference dependency,boolean disableDependent){
  setEnabled(!disableDependent);
}","/** 
 * Called when the dependency changes.
 * @param dependency The Preference that this Preference depends on.
 * @param disableDependent Set true to disable this Preference.
 */
public void onDependencyChanged(Preference dependency,boolean disableDependent){
  if (mDependencyMet == disableDependent) {
    mDependencyMet=!disableDependent;
    notifyDependencyChange(shouldDisableDependents());
    notifyChanged();
  }
}"
24435,"/** 
 * Checks whether this Preference should be enabled in the list.
 * @return True if this Preference is enabled, false otherwise.
 */
public boolean isEnabled(){
  return mEnabled;
}","/** 
 * Checks whether this Preference should be enabled in the list.
 * @return True if this Preference is enabled, false otherwise.
 */
public boolean isEnabled(){
  return mEnabled && mDependencyMet;
}"
24436,"public void onSensorChanged(SensorEvent event){
  float[] values=event.values;
  float X=values[_DATA_X];
  float Y=values[_DATA_Y];
  float Z=values[_DATA_Z];
  float OneEightyOverPi=57.29577957855f;
  float gravity=(float)Math.sqrt(X * X + Y * Y + Z * Z);
  float zyangle=(float)Math.asin(Z / gravity) * OneEightyOverPi;
  int rotation=mSensorRotation;
  if ((zyangle <= PIVOT_UPPER) && (zyangle >= PIVOT_LOWER)) {
    float angle=(float)Math.atan2(Y,-X) * OneEightyOverPi;
    int orientation=90 - (int)Math.round(angle);
    while (orientation >= 360) {
      orientation-=360;
    }
    while (orientation < 0) {
      orientation+=360;
    }
    float delta=zyangle - PIVOT;
    if (((orientation >= 0) && (orientation <= LP_UPPER)) || (orientation >= PL_LOWER)) {
      float threshold;
      if (mSensorRotation == Surface.ROTATION_90) {
        if (delta < 0) {
          threshold=LP_LOWER - (LP_LF_LOWER * delta);
        }
 else {
          threshold=LP_LOWER + (LP_LF_UPPER * delta);
        }
      }
 else {
        if (delta < 0) {
          threshold=PL_UPPER + (PL_LF_LOWER * delta);
        }
 else {
          threshold=PL_UPPER - (PL_LF_UPPER * delta);
        }
      }
      rotation=(orientation >= PL_LOWER && orientation <= threshold) ? Surface.ROTATION_90 : Surface.ROTATION_0;
    }
  }
  if (rotation != mSensorRotation) {
    mSensorRotation=rotation;
    onOrientationChanged(mSensorRotation);
  }
}","public void onSensorChanged(SensorEvent event){
  float[] values=event.values;
  float X=values[_DATA_X];
  float Y=values[_DATA_Y];
  float Z=values[_DATA_Z];
  float OneEightyOverPi=57.29577957855f;
  float gravity=(float)Math.sqrt(X * X + Y * Y + Z * Z);
  float zyangle=(float)Math.asin(Z / gravity) * OneEightyOverPi;
  int rotation=-1;
  if ((zyangle <= PIVOT_UPPER) && (zyangle >= PIVOT_LOWER)) {
    float angle=(float)Math.atan2(Y,-X) * OneEightyOverPi;
    int orientation=90 - (int)Math.round(angle);
    while (orientation >= 360) {
      orientation-=360;
    }
    while (orientation < 0) {
      orientation+=360;
    }
    if ((orientation >= PL_LOWER) && (orientation <= LP_UPPER)) {
      float threshold;
      float delta=zyangle - PIVOT;
      if (mSensorRotation == Surface.ROTATION_90) {
        if (delta < 0) {
          threshold=LP_LOWER - (LP_LF_LOWER * delta);
        }
 else {
          threshold=LP_LOWER + (LP_LF_UPPER * delta);
        }
        rotation=(orientation >= threshold) ? Surface.ROTATION_0 : Surface.ROTATION_90;
      }
 else {
        if (delta < 0) {
          threshold=PL_UPPER + (PL_LF_LOWER * delta);
        }
 else {
          threshold=PL_UPPER - (PL_LF_UPPER * delta);
        }
        rotation=(orientation <= threshold) ? Surface.ROTATION_90 : Surface.ROTATION_0;
      }
    }
 else     if ((orientation >= LANDSCAPE_LOWER) && (orientation < LP_LOWER)) {
      rotation=Surface.ROTATION_90;
    }
 else     if ((orientation >= PL_UPPER) || (orientation <= PORTRAIT_LOWER)) {
      rotation=Surface.ROTATION_0;
    }
    if ((rotation != -1) && (rotation != mSensorRotation)) {
      mSensorRotation=rotation;
      onOrientationChanged(mSensorRotation);
    }
  }
}"
24437,"private boolean acquireWifiLockLocked(WifiLock wifiLock){
  mLocks.addLock(wifiLock);
  int uid=Binder.getCallingUid();
  long ident=Binder.clearCallingIdentity();
  try {
switch (wifiLock.mLockMode) {
case (WifiManager.WIFI_MODE_FULL):
      mBatteryStats.noteFullWifiLockAcquired(uid);
case (WifiManager.WIFI_MODE_SCAN_ONLY):
    mBatteryStats.noteScanWifiLockAcquired(uid);
}
}
 catch (RemoteException e) {
}
 finally {
Binder.restoreCallingIdentity(ident);
}
updateWifiState();
return true;
}","private boolean acquireWifiLockLocked(WifiLock wifiLock){
  mLocks.addLock(wifiLock);
  int uid=Binder.getCallingUid();
  long ident=Binder.clearCallingIdentity();
  try {
switch (wifiLock.mLockMode) {
case WifiManager.WIFI_MODE_FULL:
      ++mFullLocksAcquired;
    mBatteryStats.noteFullWifiLockAcquired(uid);
  break;
case WifiManager.WIFI_MODE_SCAN_ONLY:
++mScanLocksAcquired;
mBatteryStats.noteScanWifiLockAcquired(uid);
break;
}
}
 catch (RemoteException e) {
}
 finally {
Binder.restoreCallingIdentity(ident);
}
updateWifiState();
return true;
}"
24438,"private boolean releaseWifiLockLocked(IBinder lock){
  boolean hadLock;
  WifiLock wifiLock=mLocks.removeLock(lock);
  hadLock=(wifiLock != null);
  if (hadLock) {
    int uid=Binder.getCallingUid();
    long ident=Binder.clearCallingIdentity();
    try {
switch (wifiLock.mLockMode) {
case (WifiManager.WIFI_MODE_FULL):
        mBatteryStats.noteFullWifiLockReleased(uid);
case (WifiManager.WIFI_MODE_SCAN_ONLY):
      mBatteryStats.noteScanWifiLockReleased(uid);
  }
}
 catch (RemoteException e) {
}
 finally {
  Binder.restoreCallingIdentity(ident);
}
}
updateWifiState();
return hadLock;
}","private boolean releaseWifiLockLocked(IBinder lock){
  boolean hadLock;
  WifiLock wifiLock=mLocks.removeLock(lock);
  hadLock=(wifiLock != null);
  if (hadLock) {
    int uid=Binder.getCallingUid();
    long ident=Binder.clearCallingIdentity();
    try {
switch (wifiLock.mLockMode) {
case WifiManager.WIFI_MODE_FULL:
        ++mFullLocksReleased;
      mBatteryStats.noteFullWifiLockReleased(uid);
    break;
case WifiManager.WIFI_MODE_SCAN_ONLY:
  ++mScanLocksReleased;
mBatteryStats.noteScanWifiLockReleased(uid);
break;
}
}
 catch (RemoteException e) {
}
 finally {
Binder.restoreCallingIdentity(ident);
}
}
updateWifiState();
return hadLock;
}"
24439,"public synchronized boolean disconnectAndStop(){
  if (mRunState != RUN_STATE_STOPPING && mRunState != RUN_STATE_STOPPED) {
    setNotificationVisible(false,0,false,0);
    mRunState=RUN_STATE_STOPPING;
    return WifiNative.disconnectCommand();
  }
 else {
    releaseWakeLock();
  }
  return true;
}","/** 
 * We want to stop the driver, but if we're connected to a network, we first want to disconnect, so that the supplicant is always in a known state (DISCONNECTED) when the driver is stopped.
 * @return {@code true} if the operation succeeds, which means that thedisconnect or stop command was initiated.
 */
public synchronized boolean disconnectAndStop(){
  if (mRunState != RUN_STATE_STOPPING && mRunState != RUN_STATE_STOPPED) {
    setNotificationVisible(false,0,false,0);
    mRunState=RUN_STATE_STOPPING;
    if (mWifiInfo.getSupplicantState() == SupplicantState.DORMANT) {
      return WifiNative.stopDriverCommand();
    }
 else {
      return WifiNative.disconnectCommand();
    }
  }
 else {
    releaseWakeLock();
  }
  return true;
}"
24440,"@Override public String toString(){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"").append(mInterfaceName).append(""String_Node_Str"").append(mRunState).append(LS);
  sb.append(mWifiInfo).append(LS);
  sb.append(mDhcpInfo).append(LS);
  sb.append(""String_Node_Str"").append(mHaveIPAddress).append(""String_Node_Str"").append(mObtainingIPAddress).append(""String_Node_Str"").append(mIsScanModeActive).append(LS).append(""String_Node_Str"").append(mLastSignalLevel).append(""String_Node_Str"").append(mTornDownByConnMgr);
  return sb.toString();
}","@Override public String toString(){
  StringBuffer sb=new StringBuffer();
  sb.append(""String_Node_Str"").append(mInterfaceName);
  sb.append(""String_Node_Str"");
  if (mRunState >= 1 && mRunState <= mRunStateNames.length) {
    sb.append(mRunStateNames[mRunState - 1]);
  }
 else {
    sb.append(mRunState);
  }
  sb.append(LS).append(mWifiInfo).append(LS);
  sb.append(mDhcpInfo).append(LS);
  sb.append(""String_Node_Str"").append(mHaveIPAddress).append(""String_Node_Str"").append(mObtainingIPAddress).append(""String_Node_Str"").append(mIsScanModeActive).append(LS).append(""String_Node_Str"").append(mLastSignalLevel).append(""String_Node_Str"").append(mTornDownByConnMgr);
  return sb.toString();
}"
24441,"/** 
 * Called when the dependency changes.
 * @param dependency The Preference that this Preference depends on.
 * @param disableDependent Set true to disable this Preference.
 */
public void onDependencyChanged(Preference dependency,boolean disableDependent){
  setEnabled(!disableDependent);
}","/** 
 * Called when the dependency changes.
 * @param dependency The Preference that this Preference depends on.
 * @param disableDependent Set true to disable this Preference.
 */
public void onDependencyChanged(Preference dependency,boolean disableDependent){
  if (mDependencyMet == disableDependent) {
    mDependencyMet=!disableDependent;
    notifyDependencyChange(shouldDisableDependents());
    notifyChanged();
  }
}"
24442,"/** 
 * Checks whether this Preference should be enabled in the list.
 * @return True if this Preference is enabled, false otherwise.
 */
public boolean isEnabled(){
  return mEnabled;
}","/** 
 * Checks whether this Preference should be enabled in the list.
 * @return True if this Preference is enabled, false otherwise.
 */
public boolean isEnabled(){
  return mEnabled && mDependencyMet;
}"
24443,"/** 
 * Construct a SELECT statement suitable for use in a group of SELECT statements that will be joined through UNION operators in buildUnionQuery.
 * @param projectionIn A list of which columns to return. Passingnull will return all columns, which is discouraged to prevent reading data from storage that isn't going to be used.
 * @param selection A filter declaring which rows to return,formatted as an SQL WHERE clause (excluding the WHERE itself).  Passing null will return all rows for the given URL.
 * @param selectionArgs You may include ?s in selection, whichwill be replaced by the values from selectionArgs, in order that they appear in the selection.  The values will be bound as Strings.
 * @param groupBy A filter declaring how to group rows, formattedas an SQL GROUP BY clause (excluding the GROUP BY itself). Passing null will cause the rows to not be grouped.
 * @param having A filter declare which row groups to include inthe cursor, if row grouping is being used, formatted as an SQL HAVING clause (excluding the HAVING itself).  Passing null will cause all row groups to be included, and is required when row grouping is not being used.
 * @param sortOrder How to order the rows, formatted as an SQLORDER BY clause (excluding the ORDER BY itself). Passing null will use the default sort order, which may be unordered.
 * @param limit Limits the number of rows returned by the query,formatted as LIMIT clause. Passing null denotes no LIMIT clause.
 * @return the resulting SQL SELECT statement
 */
public String buildQuery(String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String sortOrder,String limit){
  String[] projection=computeProjection(projectionIn);
  if (mWhereClause.length() > 0) {
    mWhereClause.append(')');
  }
  if (selection != null && selection.length() > 0) {
    if (mWhereClause.length() > 0) {
      mWhereClause.append(""String_Node_Str"");
    }
    mWhereClause.append('(');
    mWhereClause.append(selection);
    mWhereClause.append(')');
  }
  return buildQueryString(mDistinct,mTables,projection,mWhereClause.toString(),groupBy,having,sortOrder,limit);
}","/** 
 * Construct a SELECT statement suitable for use in a group of SELECT statements that will be joined through UNION operators in buildUnionQuery.
 * @param projectionIn A list of which columns to return. Passingnull will return all columns, which is discouraged to prevent reading data from storage that isn't going to be used.
 * @param selection A filter declaring which rows to return,formatted as an SQL WHERE clause (excluding the WHERE itself).  Passing null will return all rows for the given URL.
 * @param selectionArgs You may include ?s in selection, whichwill be replaced by the values from selectionArgs, in order that they appear in the selection.  The values will be bound as Strings.
 * @param groupBy A filter declaring how to group rows, formattedas an SQL GROUP BY clause (excluding the GROUP BY itself). Passing null will cause the rows to not be grouped.
 * @param having A filter declare which row groups to include inthe cursor, if row grouping is being used, formatted as an SQL HAVING clause (excluding the HAVING itself).  Passing null will cause all row groups to be included, and is required when row grouping is not being used.
 * @param sortOrder How to order the rows, formatted as an SQLORDER BY clause (excluding the ORDER BY itself). Passing null will use the default sort order, which may be unordered.
 * @param limit Limits the number of rows returned by the query,formatted as LIMIT clause. Passing null denotes no LIMIT clause.
 * @return the resulting SQL SELECT statement
 */
public String buildQuery(String[] projectionIn,String selection,String[] selectionArgs,String groupBy,String having,String sortOrder,String limit){
  String[] projection=computeProjection(projectionIn);
  StringBuilder where=new StringBuilder();
  if (mWhereClause.length() > 0) {
    where.append(mWhereClause.toString());
    where.append(')');
  }
  if (selection != null && selection.length() > 0) {
    if (mWhereClause.length() > 0) {
      where.append(""String_Node_Str"");
    }
    where.append('(');
    where.append(selection);
    where.append(')');
  }
  return buildQueryString(mDistinct,mTables,projection,where.toString(),groupBy,having,sortOrder,limit);
}"
24444,"public void dispatchKey(KeyEvent event){
  if (mSession != null && mSurface != null) {
    try {
      mSession.finishKey(mWindow);
    }
 catch (    RemoteException ex) {
    }
  }
}","public void dispatchKey(KeyEvent event){
  SurfaceView surfaceView=mSurfaceView.get();
  if (surfaceView != null) {
    if (surfaceView.mSession != null && surfaceView.mSurface != null) {
      try {
        surfaceView.mSession.finishKey(surfaceView.mWindow);
      }
 catch (      RemoteException ex) {
      }
    }
  }
}"
24445,"public void dispatchGetNewSurface(){
  Message msg=mHandler.obtainMessage(GET_NEW_SURFACE_MSG);
  mHandler.sendMessage(msg);
}","public void dispatchGetNewSurface(){
  SurfaceView surfaceView=mSurfaceView.get();
  if (surfaceView != null) {
    Message msg=surfaceView.mHandler.obtainMessage(GET_NEW_SURFACE_MSG);
    surfaceView.mHandler.sendMessage(msg);
  }
}"
24446,"public void resized(int w,int h,Rect coveredInsets,Rect visibleInsets,boolean reportDraw){
  if (localLOGV)   Log.v(""String_Node_Str"",SurfaceView.this + ""String_Node_Str"" + w+ ""String_Node_Str""+ h+ ""String_Node_Str""+ mCurWidth+ ""String_Node_Str""+ mCurHeight);
synchronized (this) {
    if (mCurWidth != w || mCurHeight != h) {
      mCurWidth=w;
      mCurHeight=h;
    }
    if (reportDraw) {
      try {
        mSession.finishDrawing(mWindow);
      }
 catch (      RemoteException e) {
      }
    }
  }
}","public void resized(int w,int h,Rect coveredInsets,Rect visibleInsets,boolean reportDraw){
  SurfaceView surfaceView=mSurfaceView.get();
  if (surfaceView != null) {
    if (localLOGV)     Log.v(""String_Node_Str"",surfaceView + ""String_Node_Str"" + w+ ""String_Node_Str""+ h+ ""String_Node_Str""+ mCurWidth+ ""String_Node_Str""+ mCurHeight);
synchronized (this) {
      if (mCurWidth != w || mCurHeight != h) {
        mCurWidth=w;
        mCurHeight=h;
      }
      if (reportDraw) {
        try {
          surfaceView.mSession.finishDrawing(surfaceView.mWindow);
        }
 catch (        RemoteException e) {
        }
      }
    }
  }
}"
24447,"private void updateWindow(boolean force){
  if (!mHaveFrame) {
    return;
  }
  int myWidth=mRequestedWidth;
  if (myWidth <= 0)   myWidth=getWidth();
  int myHeight=mRequestedHeight;
  if (myHeight <= 0)   myHeight=getHeight();
  getLocationInWindow(mLocation);
  final boolean creating=mWindow == null;
  final boolean formatChanged=mFormat != mRequestedFormat;
  final boolean sizeChanged=mWidth != myWidth || mHeight != myHeight;
  final boolean visibleChanged=mVisible != mRequestedVisible || mNewSurfaceNeeded;
  final boolean typeChanged=mType != mRequestedType;
  if (force || creating || formatChanged|| sizeChanged|| visibleChanged|| typeChanged|| mLeft != mLocation[0] || mTop != mLocation[1]) {
    if (localLOGV)     Log.i(TAG,""String_Node_Str"" + creating + ""String_Node_Str""+ formatChanged+ ""String_Node_Str""+ sizeChanged+ ""String_Node_Str""+ visibleChanged+ ""String_Node_Str""+ (mLeft != mLocation[0])+ ""String_Node_Str""+ (mTop != mLocation[1]));
    try {
      final boolean visible=mVisible=mRequestedVisible;
      mLeft=mLocation[0];
      mTop=mLocation[1];
      mWidth=myWidth;
      mHeight=myHeight;
      mFormat=mRequestedFormat;
      mType=mRequestedType;
      mLayout.x=mLeft;
      mLayout.y=mTop;
      mLayout.width=getWidth();
      mLayout.height=getHeight();
      mLayout.format=mRequestedFormat;
      mLayout.flags|=WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS | WindowManager.LayoutParams.FLAG_SCALED | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE| WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;
      mLayout.memoryType=mRequestedType;
      if (mWindow == null) {
        mWindow=new MyWindow();
        mLayout.type=WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA;
        mLayout.gravity=Gravity.LEFT | Gravity.TOP;
        mSession.add(mWindow,mLayout,mVisible ? VISIBLE : GONE,mContentInsets);
      }
      if (visibleChanged && (!visible || mNewSurfaceNeeded)) {
        reportSurfaceDestroyed();
      }
      mNewSurfaceNeeded=false;
      mSurfaceLock.lock();
      mDrawingStopped=!visible;
      final int relayoutResult=mSession.relayout(mWindow,mLayout,mWidth,mHeight,visible ? VISIBLE : GONE,false,mWinFrame,mContentInsets,mVisibleInsets,mSurface);
      if (localLOGV)       Log.i(TAG,""String_Node_Str"" + mSurface + ""String_Node_Str""+ visible+ ""String_Node_Str""+ mWinFrame);
      mSurfaceFrame.left=0;
      mSurfaceFrame.top=0;
      mSurfaceFrame.right=mWinFrame.width();
      mSurfaceFrame.bottom=mWinFrame.height();
      mSurfaceLock.unlock();
      try {
        if (visible) {
          mDestroyReportNeeded=true;
          SurfaceHolder.Callback callbacks[];
synchronized (mCallbacks) {
            callbacks=new SurfaceHolder.Callback[mCallbacks.size()];
            mCallbacks.toArray(callbacks);
          }
          if (visibleChanged) {
            mIsCreating=true;
            for (            SurfaceHolder.Callback c : callbacks) {
              c.surfaceCreated(mSurfaceHolder);
            }
          }
          if (creating || formatChanged || sizeChanged|| visibleChanged) {
            for (            SurfaceHolder.Callback c : callbacks) {
              c.surfaceChanged(mSurfaceHolder,mFormat,mWidth,mHeight);
            }
          }
        }
      }
  finally {
        mIsCreating=false;
        if (creating || (relayoutResult & WindowManagerImpl.RELAYOUT_FIRST_TIME) != 0) {
          mSession.finishDrawing(mWindow);
        }
      }
    }
 catch (    RemoteException ex) {
    }
    if (localLOGV)     Log.v(TAG,""String_Node_Str"" + mLayout.x + ""String_Node_Str""+ mLayout.y+ ""String_Node_Str""+ mLayout.width+ ""String_Node_Str""+ mLayout.height+ ""String_Node_Str""+ mSurfaceFrame);
  }
}","private void updateWindow(boolean force){
  if (!mHaveFrame) {
    return;
  }
  int myWidth=mRequestedWidth;
  if (myWidth <= 0)   myWidth=getWidth();
  int myHeight=mRequestedHeight;
  if (myHeight <= 0)   myHeight=getHeight();
  getLocationInWindow(mLocation);
  final boolean creating=mWindow == null;
  final boolean formatChanged=mFormat != mRequestedFormat;
  final boolean sizeChanged=mWidth != myWidth || mHeight != myHeight;
  final boolean visibleChanged=mVisible != mRequestedVisible || mNewSurfaceNeeded;
  final boolean typeChanged=mType != mRequestedType;
  if (force || creating || formatChanged|| sizeChanged|| visibleChanged|| typeChanged|| mLeft != mLocation[0] || mTop != mLocation[1]) {
    if (localLOGV)     Log.i(TAG,""String_Node_Str"" + creating + ""String_Node_Str""+ formatChanged+ ""String_Node_Str""+ sizeChanged+ ""String_Node_Str""+ visibleChanged+ ""String_Node_Str""+ (mLeft != mLocation[0])+ ""String_Node_Str""+ (mTop != mLocation[1]));
    try {
      final boolean visible=mVisible=mRequestedVisible;
      mLeft=mLocation[0];
      mTop=mLocation[1];
      mWidth=myWidth;
      mHeight=myHeight;
      mFormat=mRequestedFormat;
      mType=mRequestedType;
      mLayout.x=mLeft;
      mLayout.y=mTop;
      mLayout.width=getWidth();
      mLayout.height=getHeight();
      mLayout.format=mRequestedFormat;
      mLayout.flags|=WindowManager.LayoutParams.FLAG_LAYOUT_NO_LIMITS | WindowManager.LayoutParams.FLAG_SCALED | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE| WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE;
      mLayout.memoryType=mRequestedType;
      if (mWindow == null) {
        mWindow=new MyWindow(this);
        mLayout.type=WindowManager.LayoutParams.TYPE_APPLICATION_MEDIA;
        mLayout.gravity=Gravity.LEFT | Gravity.TOP;
        mSession.add(mWindow,mLayout,mVisible ? VISIBLE : GONE,mContentInsets);
      }
      if (visibleChanged && (!visible || mNewSurfaceNeeded)) {
        reportSurfaceDestroyed();
      }
      mNewSurfaceNeeded=false;
      mSurfaceLock.lock();
      mDrawingStopped=!visible;
      final int relayoutResult=mSession.relayout(mWindow,mLayout,mWidth,mHeight,visible ? VISIBLE : GONE,false,mWinFrame,mContentInsets,mVisibleInsets,mSurface);
      if (localLOGV)       Log.i(TAG,""String_Node_Str"" + mSurface + ""String_Node_Str""+ visible+ ""String_Node_Str""+ mWinFrame);
      mSurfaceFrame.left=0;
      mSurfaceFrame.top=0;
      mSurfaceFrame.right=mWinFrame.width();
      mSurfaceFrame.bottom=mWinFrame.height();
      mSurfaceLock.unlock();
      try {
        if (visible) {
          mDestroyReportNeeded=true;
          SurfaceHolder.Callback callbacks[];
synchronized (mCallbacks) {
            callbacks=new SurfaceHolder.Callback[mCallbacks.size()];
            mCallbacks.toArray(callbacks);
          }
          if (visibleChanged) {
            mIsCreating=true;
            for (            SurfaceHolder.Callback c : callbacks) {
              c.surfaceCreated(mSurfaceHolder);
            }
          }
          if (creating || formatChanged || sizeChanged|| visibleChanged) {
            for (            SurfaceHolder.Callback c : callbacks) {
              c.surfaceChanged(mSurfaceHolder,mFormat,mWidth,mHeight);
            }
          }
        }
      }
  finally {
        mIsCreating=false;
        if (creating || (relayoutResult & WindowManagerImpl.RELAYOUT_FIRST_TIME) != 0) {
          mSession.finishDrawing(mWindow);
        }
      }
    }
 catch (    RemoteException ex) {
    }
    if (localLOGV)     Log.v(TAG,""String_Node_Str"" + mLayout.x + ""String_Node_Str""+ mLayout.y+ ""String_Node_Str""+ mLayout.width+ ""String_Node_Str""+ mLayout.height+ ""String_Node_Str""+ mSurfaceFrame);
  }
}"
24448,"public static final CharSequence getDisplayLabel(Context context,int type,CharSequence label){
  CharSequence display=""String_Node_Str"";
  if (type != TYPE_CUSTOM) {
    CharSequence[] labels=context.getResources().getTextArray(com.android.internal.R.array.organizationTypes);
    try {
      display=labels[type - 1];
    }
 catch (    ArrayIndexOutOfBoundsException e) {
      display=labels[People.Phones.TYPE_HOME - 1];
    }
  }
 else {
    if (!TextUtils.isEmpty(label)) {
      display=label;
    }
  }
  return display;
}","public static final CharSequence getDisplayLabel(Context context,int type,CharSequence label){
  CharSequence display=""String_Node_Str"";
  if (type != TYPE_CUSTOM) {
    CharSequence[] labels=context.getResources().getTextArray(com.android.internal.R.array.organizationTypes);
    try {
      display=labels[type - 1];
    }
 catch (    ArrayIndexOutOfBoundsException e) {
      display=labels[Organizations.TYPE_WORK - 1];
    }
  }
 else {
    if (!TextUtils.isEmpty(label)) {
      display=label;
    }
  }
  return display;
}"
24449,"/** 
 * {@inheritDoc} 
 */
public void systemReady(){
  try {
    int menuState=mWindowManager.getKeycodeState(KeyEvent.KEYCODE_MENU);
    Log.i(TAG,""String_Node_Str"" + menuState);
    if (menuState > 0) {
      ActivityManagerNative.getDefault().enterSafeMode();
    }
 else {
      mKeyguardMediator.onSystemReady();
      android.os.SystemProperties.set(""String_Node_Str"",""String_Node_Str"");
    }
  }
 catch (  RemoteException e) {
  }
}","/** 
 * {@inheritDoc} 
 */
public void systemReady(){
  try {
    int menuState=mWindowManager.getKeycodeState(KeyEvent.KEYCODE_MENU);
    Log.i(TAG,""String_Node_Str"" + menuState);
    if (menuState > 0) {
      ActivityManagerNative.getDefault().enterSafeMode();
    }
    mKeyguardMediator.onSystemReady();
    android.os.SystemProperties.set(""String_Node_Str"",""String_Node_Str"");
  }
 catch (  RemoteException e) {
  }
}"
24450,"private void addJarResource(File file) throws IOException {
  JarFile jarFile=new JarFile(file);
  addURL(file.toURL());
  Enumeration<JarEntry> jarEntries=jarFile.entries();
  while (jarEntries.hasMoreElements()) {
    JarEntry jarEntry=jarEntries.nextElement();
    if (!jarEntry.isDirectory() && isJar(jarEntry.getName())) {
      addJarResource(jarEntryAsFile(jarFile,jarEntry));
    }
  }
}","private void addJarResource(File file) throws IOException {
  JarFile jarFile=new JarFile(file);
  addURL(file.toURL());
  Enumeration<JarEntry> jarEntries=jarFile.entries();
  while (jarEntries.hasMoreElements()) {
    JarEntry jarEntry=jarEntries.nextElement();
    if (!jarEntry.isDirectory() && isServerJar(jarEntry.getName())) {
      addJarResource(jarEntryAsFile(jarFile,jarEntry));
    }
  }
}"
24451,"public static void main(String[] args){
  JarClassLoader jarClassLoader=createClassLoader();
  Thread.currentThread().setContextClassLoader(jarClassLoader);
  ProtectionDomain domain=Main.class.getProtectionDomain();
  URL location=domain.getCodeSource().getLocation();
  try {
    invokeClass(""String_Node_Str"",new String[]{location.toString()});
  }
 catch (  Throwable e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}","public static void main(String[] args){
  JarClassLoader serverClassLoader=createClassLoader();
  Thread.currentThread().setContextClassLoader(serverClassLoader);
  ProtectionDomain domain=Main.class.getProtectionDomain();
  URL location=domain.getCodeSource().getLocation();
  try {
    invokeClass(""String_Node_Str"",new String[]{location.toString()});
  }
 catch (  Throwable e) {
    throw new RuntimeException(""String_Node_Str"",e);
  }
}"
24452,"public JarClassLoader(URL[] urls,ClassLoader parent){
  super(urls,parent);
  try {
    ProtectionDomain protectionDomain=getClass().getProtectionDomain();
    CodeSource codeSource=protectionDomain.getCodeSource();
    URL rootJarUrl=codeSource.getLocation();
    File warFile=new File(rootJarUrl.getPath());
    JarFile jarFile=new JarFile(warFile);
    Enumeration<JarEntry> jarEntries=jarFile.entries();
    while (jarEntries.hasMoreElements()) {
      JarEntry jarEntry=jarEntries.nextElement();
      if (!jarEntry.isDirectory() && isJar(jarEntry.getName())) {
        addJarResource(jarEntryAsFile(jarFile,jarEntry));
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}","public JarClassLoader(URL[] urls,ClassLoader parent){
  super(urls,parent);
  try {
    ProtectionDomain protectionDomain=getClass().getProtectionDomain();
    CodeSource codeSource=protectionDomain.getCodeSource();
    URL rootJarUrl=codeSource.getLocation();
    File warFile=new File(rootJarUrl.getPath());
    JarFile jarFile=new JarFile(warFile);
    Enumeration<JarEntry> jarEntries=jarFile.entries();
    while (jarEntries.hasMoreElements()) {
      JarEntry jarEntry=jarEntries.nextElement();
      if (!jarEntry.isDirectory() && isServerJar(jarEntry.getName())) {
        addJarResource(jarEntryAsFile(jarFile,jarEntry));
      }
    }
  }
 catch (  IOException e) {
    throw new RuntimeException(""String_Node_Str"");
  }
}"
24453,"@Override public void paint(Graphics g){
  g.setFont(new Font(""String_Node_Str"",Font.BOLD,11));
  for (int i=0; i < 16; i++) {
    int currentY=height - startY - (15 - i) * (barHeight + whiteSpaceHeight);
    String rank=i + 1 + ""String_Node_Str"";
    if (i < 9)     rank=""String_Node_Str"" + rank;
    g.setColor(Color.LIGHT_GRAY);
    g.drawOval(14 - 2,currentY - 1,19,19);
    g.drawLine(14 + 18,currentY + 8,14 + 18 + 16,currentY + 8);
    g.drawLine(14 + 18,currentY + 9,14 + 18 + 16,currentY + 9);
    g.drawOval(width - 31 - 2,currentY - 1,19,19);
    g.drawLine(width - 31 - 2,currentY + 8,width - 31 - 2- 16,currentY + 8);
    g.drawLine(width - 31 - 2,currentY + 9,width - 31 - 2- 16,currentY + 9);
    g.setColor(Color.BLACK);
    g.drawString(rank,14,currentY + 12);
    g.drawString(rank,width - 31,currentY + 12);
  }
  g.drawString(""String_Node_Str"",8,centerY - 84);
  g.drawString(""String_Node_Str"",width - 40,centerY - 84);
  for (int i=0; i < 22; i++) {
    LinkedList<Book.BookStats> currentBucket=buckets.get(i);
    int currentX=rankingWidth + i * intervalWidth;
    Iterator<Book.BookStats> it=currentBucket.listIterator();
    g.setFont(new Font(""String_Node_Str"",Font.PLAIN,9));
    while (it.hasNext()) {
      Book.BookStats stat=it.next();
      int currentY=height - startY - (16 - stat.ranking) * (barHeight + whiteSpaceHeight);
      if (state == State.OVERALL || stat.owner == currentBook)       g.setColor(stat.owner.colour);
 else       g.setColor(new Color(224,224,224));
      g.fillRect(currentX,currentY,intervalWidth / 2,barHeight);
      if (stat.next != null && stat.week + 1 == stat.next.week) {
        int nextY=height - startY - (16 - stat.next.ranking) * (barHeight + whiteSpaceHeight);
        int y[]={currentY,nextY,nextY + barHeight,currentY + barHeight};
        int x[]={currentX + intervalWidth / 2,currentX + intervalWidth,currentX + intervalWidth,currentX + intervalWidth / 2};
        g.fillPolygon(x,y,4);
      }
      if (stat.isFirst && (state == State.OVERALL || currentBook == stat.owner)) {
        g.setColor(Color.WHITE);
        if (stat.owner.title.length() < 8)         g.drawString(stat.owner.title,currentX + 2,currentY + 12);
 else         g.drawString(stat.owner.title.substring(0,8) + ""String_Node_Str"",currentX + 2,currentY + 12);
      }
      if (state == State.DETAIL && stat.owner == currentBook) {
        g.setFont(new Font(""String_Node_Str"",Font.BOLD,11));
        g.setColor(Color.BLACK);
        g.drawString(stat.ranking + ""String_Node_Str"",currentX + intervalWidth / 4 - 4,currentY - 4);
      }
    }
    g.setFont(new Font(""String_Node_Str"",Font.BOLD,11));
    g.setColor(Color.BLACK);
    g.drawString(""String_Node_Str"" + (i + 1),currentX,height - 32);
    if (bookColour != null) {
      int xOffset=(int)((ScrollPane)(this.getParent())).getScrollPosition().getX() + 400 - 150;
      FontMetrics metric=getFontMetrics(g.getFont());
      int stringWidth=metric.stringWidth(bookName);
      g.clearRect(0,height - 20,width,22);
      g.setColor(Color.GRAY);
      g.fillRect(xOffset + 2,height - 20 + 2,300,20);
      g.setColor(bookColour);
      g.fillRect(xOffset,height - 20,300,20);
      g.setColor(Color.WHITE);
      g.drawString(bookName,xOffset + (300 - stringWidth) / 2,height - 17 + 11);
      if (state == state.DETAIL) {
        int windowOffsetX=xOffset - 245;
        int windowOffsetY=15;
        int windowWidth=400;
        int windowHeight=150;
        FontMetrics fmet;
        Font heading=new Font(""String_Node_Str"",Font.BOLD,16);
        fmet=getFontMetrics(heading);
        g.setFont(heading);
        g.clearRect(0,0,width,windowHeight + 25);
        String title=currentBook.title;
        String author=currentBook.author;
        String desc=currentBook.description;
        g.setColor(Color.GRAY);
        g.fillRect(windowOffsetX + 2,windowOffsetY + 2,windowWidth,windowHeight);
        g.setColor(bookColour);
        g.fillRect(windowOffsetX,windowOffsetY,windowWidth,windowHeight);
        g.setColor(Color.WHITE);
        g.drawImage(currentBook.novelPic,windowOffsetX + (windowWidth * 2 / 3) + 30,20,90,135,this);
        g.drawImage(currentBook.tagPic,xOffset + 250,5,210,180,this);
        int headingWidth=(fmet.stringWidth(title));
        if (headingWidth < windowWidth) {
          windowOffsetY+=20;
          g.drawString(title,windowOffsetX + (windowWidth / 2) - (headingWidth / 2),windowOffsetY);
        }
 else {
          String title1=title.substring(0,title.length() / 2);
          int title1Width=(fmet.stringWidth(title1));
          String title2=title.substring(title.length() / 2);
          int title12Width=(fmet.stringWidth(title2));
          windowOffsetY+=15;
          g.drawString(title1,windowOffsetX + (windowWidth / 2) - (title1Width / 2),windowOffsetY);
          windowOffsetY+=15;
          g.drawString(title2,windowOffsetX + (windowWidth / 2) - (title12Width / 2),windowOffsetY);
        }
        g.setFont(new Font(""String_Node_Str"",Font.ITALIC,14));
        fmet=getFontMetrics(new Font(""String_Node_Str"",Font.ITALIC,14));
        windowOffsetY+=15;
        g.drawString(author,windowOffsetX + (windowWidth / 2) - (fmet.stringWidth(author)) / 2,windowOffsetY);
        g.setFont(new Font(""String_Node_Str"",Font.ITALIC,10));
        fmet=getFontMetrics(new Font(""String_Node_Str"",Font.ITALIC,10));
        windowOffsetY+=20;
        int descwidth=fmet.stringWidth(desc);
        if (descwidth < (windowWidth * 2) / 3) {
          g.drawString(desc,windowOffsetX + (windowWidth / 3) - (descwidth / 2),windowOffsetY);
        }
 else         if (descwidth / 2 < (windowWidth * 2) / 3) {
          String desc1=desc.substring(0,desc.length() / 2);
          String desc2=desc.substring(desc.length() / 2);
          g.drawString(desc1,windowOffsetX + (windowWidth / 3) - (fmet.stringWidth(desc1)) / 2,windowOffsetY);
          windowOffsetY+=10;
          g.drawString(desc2,windowOffsetX + (windowWidth / 3) - (fmet.stringWidth(desc2)) / 2,windowOffsetY);
        }
 else {
          String desc1=desc.substring(0,desc.length() / 3);
          String desc2=desc.substring(desc.length() / 3,desc.length() * 2 / 3);
          String desc3=desc.substring(desc.length() * 2 / 3);
          g.drawString(desc1,windowOffsetX + (windowWidth / 3) - (fmet.stringWidth(desc1)) / 2,windowOffsetY);
          windowOffsetY+=10;
          g.drawString(desc2,windowOffsetX + (windowWidth / 3) - (fmet.stringWidth(desc2)) / 2,windowOffsetY);
          windowOffsetY+=10;
          g.drawString(desc3,windowOffsetX + (windowWidth / 3) - (fmet.stringWidth(desc3)) / 2,windowOffsetY);
        }
      }
    }
 else {
      g.clearRect(0,height - 20,width,22);
    }
  }
}","@Override public void paint(Graphics g){
  g.setFont(new Font(""String_Node_Str"",Font.BOLD,11));
  for (int i=0; i < 16; i++) {
    int currentY=height - startY - (15 - i) * (barHeight + whiteSpaceHeight);
    String rank=i + 1 + ""String_Node_Str"";
    if (i < 9)     rank=""String_Node_Str"" + rank;
    g.setColor(Color.LIGHT_GRAY);
    g.drawOval(14 - 2,currentY - 1,19,19);
    g.drawLine(14 + 18,currentY + 8,14 + 18 + 16,currentY + 8);
    g.drawLine(14 + 18,currentY + 9,14 + 18 + 16,currentY + 9);
    g.drawOval(width - 31 - 2,currentY - 1,19,19);
    g.drawLine(width - 31 - 2,currentY + 8,width - 31 - 2- 16,currentY + 8);
    g.drawLine(width - 31 - 2,currentY + 9,width - 31 - 2- 16,currentY + 9);
    g.setColor(Color.BLACK);
    g.drawString(rank,14,currentY + 12);
    g.drawString(rank,width - 31,currentY + 12);
  }
  g.drawString(""String_Node_Str"",8,centerY - 84);
  g.drawString(""String_Node_Str"",width - 40,centerY - 84);
  for (int i=0; i < 22; i++) {
    LinkedList<Book.BookStats> currentBucket=buckets.get(i);
    int currentX=rankingWidth + i * intervalWidth;
    Iterator<Book.BookStats> it=currentBucket.listIterator();
    g.setFont(new Font(""String_Node_Str"",Font.PLAIN,9));
    while (it.hasNext()) {
      Book.BookStats stat=it.next();
      int currentY=height - startY - (16 - stat.ranking) * (barHeight + whiteSpaceHeight);
      if (state == State.OVERALL || stat.owner == currentBook)       g.setColor(stat.owner.colour);
 else       g.setColor(new Color(224,224,224));
      g.fillRect(currentX,currentY,intervalWidth / 2,barHeight);
      if (stat.next != null && stat.week + 1 == stat.next.week) {
        int nextY=height - startY - (16 - stat.next.ranking) * (barHeight + whiteSpaceHeight);
        int y[]={currentY,nextY,nextY + barHeight,currentY + barHeight};
        int x[]={currentX + intervalWidth / 2,currentX + intervalWidth,currentX + intervalWidth,currentX + intervalWidth / 2};
        g.fillPolygon(x,y,4);
      }
      if (stat.isFirst && (state == State.OVERALL || currentBook == stat.owner)) {
        g.setColor(Color.WHITE);
        if (stat.owner.title.length() < 8)         g.drawString(stat.owner.title,currentX + 2,currentY + 12);
 else         g.drawString(stat.owner.title.substring(0,8) + ""String_Node_Str"",currentX + 2,currentY + 12);
      }
      if (state == State.DETAIL && stat.owner == currentBook) {
        g.setFont(new Font(""String_Node_Str"",Font.BOLD,11));
        g.setColor(Color.BLACK);
        if (stat.ranking < 10)         g.drawString(stat.ranking + ""String_Node_Str"",currentX + intervalWidth / 4 - 4,currentY - 4);
 else         g.drawString(stat.ranking + ""String_Node_Str"",currentX + intervalWidth / 4 - 8,currentY - 4);
      }
    }
    g.setFont(new Font(""String_Node_Str"",Font.BOLD,11));
    g.setColor(Color.BLACK);
    g.drawString(""String_Node_Str"" + (i + 1),currentX,height - 32);
    if (bookColour != null) {
      int xOffset=(int)((ScrollPane)(this.getParent())).getScrollPosition().getX() + 400 - 150;
      FontMetrics metric=getFontMetrics(g.getFont());
      int stringWidth=metric.stringWidth(bookName);
      g.clearRect(0,height - 20,width,22);
      g.setColor(Color.GRAY);
      g.fillRect(xOffset + 2,height - 20 + 2,300,20);
      g.setColor(bookColour);
      g.fillRect(xOffset,height - 20,300,20);
      g.setColor(Color.WHITE);
      g.drawString(bookName,xOffset + (300 - stringWidth) / 2,height - 17 + 11);
      if (state == state.DETAIL) {
        int windowOffsetX=xOffset - 245;
        int windowOffsetY=15;
        int windowWidth=400;
        int windowHeight=150;
        FontMetrics fmet;
        Font heading=new Font(""String_Node_Str"",Font.BOLD,16);
        fmet=getFontMetrics(heading);
        g.setFont(heading);
        g.clearRect(0,0,width,windowHeight + 25);
        String title=currentBook.title;
        String author=currentBook.author;
        String desc=currentBook.description;
        g.setColor(Color.GRAY);
        g.fillRect(windowOffsetX + 2,windowOffsetY + 2,windowWidth,windowHeight);
        g.setColor(bookColour);
        g.fillRect(windowOffsetX,windowOffsetY,windowWidth,windowHeight);
        g.setColor(Color.WHITE);
        g.drawImage(currentBook.novelPic,windowOffsetX + (windowWidth * 2 / 3) + 30,20,90,135,this);
        g.drawImage(currentBook.tagPic,xOffset + 250,5,210,180,this);
        int headingWidth=(fmet.stringWidth(title));
        if (headingWidth < windowWidth) {
          windowOffsetY+=20;
          g.drawString(title,windowOffsetX + (windowWidth / 2) - (headingWidth / 2),windowOffsetY);
        }
 else {
          String title1=title.substring(0,title.length() / 2);
          int title1Width=(fmet.stringWidth(title1));
          String title2=title.substring(title.length() / 2);
          int title12Width=(fmet.stringWidth(title2));
          windowOffsetY+=15;
          g.drawString(title1,windowOffsetX + (windowWidth / 2) - (title1Width / 2),windowOffsetY);
          windowOffsetY+=15;
          g.drawString(title2,windowOffsetX + (windowWidth / 2) - (title12Width / 2),windowOffsetY);
        }
        g.setFont(new Font(""String_Node_Str"",Font.ITALIC,14));
        fmet=getFontMetrics(new Font(""String_Node_Str"",Font.ITALIC,14));
        windowOffsetY+=15;
        g.drawString(author,windowOffsetX + (windowWidth / 2) - (fmet.stringWidth(author)) / 2,windowOffsetY);
        g.setFont(new Font(""String_Node_Str"",Font.ITALIC,10));
        fmet=getFontMetrics(new Font(""String_Node_Str"",Font.ITALIC,10));
        windowOffsetY+=20;
        int descwidth=fmet.stringWidth(desc);
        if (descwidth < (windowWidth * 2) / 3) {
          g.drawString(desc,windowOffsetX + (windowWidth / 3) - (descwidth / 2),windowOffsetY);
        }
 else         if (descwidth / 2 < (windowWidth * 2) / 3) {
          String desc1=desc.substring(0,desc.length() / 2);
          String desc2=desc.substring(desc.length() / 2);
          g.drawString(desc1,windowOffsetX + (windowWidth / 3) - (fmet.stringWidth(desc1)) / 2,windowOffsetY);
          windowOffsetY+=10;
          g.drawString(desc2,windowOffsetX + (windowWidth / 3) - (fmet.stringWidth(desc2)) / 2,windowOffsetY);
        }
 else {
          String desc1=desc.substring(0,desc.length() / 3);
          String desc2=desc.substring(desc.length() / 3,desc.length() * 2 / 3);
          String desc3=desc.substring(desc.length() * 2 / 3);
          g.drawString(desc1,windowOffsetX + (windowWidth / 3) - (fmet.stringWidth(desc1)) / 2,windowOffsetY);
          windowOffsetY+=10;
          g.drawString(desc2,windowOffsetX + (windowWidth / 3) - (fmet.stringWidth(desc2)) / 2,windowOffsetY);
          windowOffsetY+=10;
          g.drawString(desc3,windowOffsetX + (windowWidth / 3) - (fmet.stringWidth(desc3)) / 2,windowOffsetY);
        }
      }
    }
 else {
      g.clearRect(0,height - 20,width,22);
    }
  }
}"
24454,"public void mouseClicked(MouseEvent e){
  if (state == State.OVERALL) {
    if (currentBook != null) {
      state=State.DETAIL;
      this.paint(this.getGraphics());
    }
  }
 else {
    state=State.OVERALL;
    this.paint(this.getGraphics());
  }
}","public void mouseClicked(MouseEvent e){
  if (state == State.OVERALL) {
    if (currentBook != null) {
      state=State.DETAIL;
      this.paint(this.getGraphics());
    }
  }
 else {
    state=State.OVERALL;
    this.getGraphics().clearRect(0,0,width,height);
    this.paint(this.getGraphics());
  }
}"
24455,"@Override public void paint(Graphics g){
  g.setFont(new Font(""String_Node_Str"",Font.BOLD,11));
  for (int i=0; i < 16; i++) {
    int currentY=height - startY - (15 - i) * (barHeight + whiteSpaceHeight);
    String rank=i + 1 + ""String_Node_Str"";
    if (i < 9)     rank=""String_Node_Str"" + rank;
    g.setColor(Color.LIGHT_GRAY);
    g.drawOval(14 - 2,currentY - 1,19,19);
    g.drawLine(14 + 18,currentY + 8,14 + 18 + 16,currentY + 8);
    g.drawLine(14 + 18,currentY + 9,14 + 18 + 16,currentY + 9);
    g.drawOval(width - 31 - 2,currentY - 1,19,19);
    g.drawLine(width - 31 - 2,currentY + 8,width - 31 - 2- 16,currentY + 8);
    g.drawLine(width - 31 - 2,currentY + 9,width - 31 - 2- 16,currentY + 9);
    g.setColor(Color.BLACK);
    g.drawString(rank,14,currentY + 12);
    g.drawString(rank,width - 31,currentY + 12);
  }
  g.drawString(""String_Node_Str"",8,centerY - 84);
  g.drawString(""String_Node_Str"",width - 40,centerY - 84);
  for (int i=0; i < 22; i++) {
    LinkedList<Book.BookStats> currentBucket=buckets.get(i);
    int currentX=rankingWidth + i * intervalWidth;
    Iterator<Book.BookStats> it=currentBucket.listIterator();
    g.setFont(new Font(""String_Node_Str"",Font.PLAIN,9));
    while (it.hasNext()) {
      Book.BookStats stat=it.next();
      int currentY=height - startY - (16 - stat.ranking) * (barHeight + whiteSpaceHeight);
      if (state == State.OVERALL || stat.owner == currentBook)       g.setColor(stat.owner.colour);
 else       g.setColor(new Color(224,224,224));
      g.fillRect(currentX,currentY,intervalWidth / 2,barHeight);
      if (stat.next != null && stat.week + 1 == stat.next.week) {
        int nextY=height - startY - (16 - stat.next.ranking) * (barHeight + whiteSpaceHeight);
        int y[]={currentY,nextY,nextY + barHeight,currentY + barHeight};
        int x[]={currentX + intervalWidth / 2,currentX + intervalWidth,currentX + intervalWidth,currentX + intervalWidth / 2};
        g.fillPolygon(x,y,4);
      }
      if (stat.isFirst && (state == State.OVERALL || currentBook == stat.owner)) {
        g.setColor(Color.WHITE);
        if (stat.owner.title.length() < 8)         g.drawString(stat.owner.title,currentX + 2,currentY + 12);
 else         g.drawString(stat.owner.title.substring(0,8) + ""String_Node_Str"",currentX + 2,currentY + 12);
      }
      if (state == State.DETAIL && stat.owner == currentBook) {
        g.setFont(new Font(""String_Node_Str"",Font.BOLD,11));
        g.setColor(Color.BLACK);
        g.drawString(stat.ranking + ""String_Node_Str"",currentX + intervalWidth / 4 - 4,currentY - 4);
      }
    }
    g.setFont(new Font(""String_Node_Str"",Font.BOLD,11));
    g.setColor(Color.BLACK);
    g.drawString(""String_Node_Str"" + (i + 1),currentX,height - 32);
    if (bookColour != null) {
      int xOffset=(int)((ScrollPane)(this.getParent())).getScrollPosition().getX() + 400 - 150;
      g.clearRect(0,height - 20,width,22);
      g.setColor(Color.GRAY);
      g.fillRect(xOffset + 2,height - 20 + 2,300,20);
      g.setColor(bookColour);
      g.fillRect(xOffset,height - 20,300,20);
      g.setColor(Color.WHITE);
      g.drawString(bookName,xOffset + 4,height - 17 + 11);
      if (state == state.DETAIL) {
        int windowOffsetX=xOffset - 245;
        int windowOffsetY=15;
        int windowWidth=400;
        int windowHeight=150;
        FontMetrics fmet;
        Font heading=new Font(""String_Node_Str"",Font.BOLD,16);
        fmet=getFontMetrics(heading);
        g.setFont(heading);
        g.clearRect(0,0,width,windowHeight + 25);
        String title=currentBook.title;
        String author=currentBook.author;
        String desc=currentBook.description;
        g.setColor(Color.GRAY);
        g.fillRect(windowOffsetX + 2,windowOffsetY + 2,windowWidth,windowHeight);
        g.setColor(bookColour);
        g.fillRect(windowOffsetX,windowOffsetY,windowWidth,windowHeight);
        g.setColor(Color.WHITE);
        int headingWidth=(fmet.stringWidth(title));
        if (headingWidth < windowWidth) {
          windowOffsetY+=20;
          g.drawString(title,windowOffsetX + (windowWidth / 2) - (headingWidth / 2),windowOffsetY);
        }
 else {
          String title1=title.substring(0,title.length() / 2);
          int title1Width=(fmet.stringWidth(title1));
          String title2=title.substring(title.length() / 2);
          int title12Width=(fmet.stringWidth(title2));
          windowOffsetY+=15;
          g.drawString(title1,windowOffsetX + (windowWidth / 2) - (title1Width / 2),windowOffsetY);
          windowOffsetY+=15;
          g.drawString(title2,windowOffsetX + (windowWidth / 2) - (title12Width / 2),windowOffsetY);
        }
        g.setFont(new Font(""String_Node_Str"",Font.ITALIC,14));
        fmet=getFontMetrics(new Font(""String_Node_Str"",Font.ITALIC,14));
        windowOffsetY+=15;
        g.drawString(author,windowOffsetX + (windowWidth / 2) - (fmet.stringWidth(author)) / 2,windowOffsetY);
      }
 else {
        g.clearRect(0,0,width,175);
      }
    }
 else {
      g.clearRect(0,height - 20,width,22);
    }
  }
}","@Override public void paint(Graphics g){
  g.setFont(new Font(""String_Node_Str"",Font.BOLD,11));
  for (int i=0; i < 16; i++) {
    int currentY=height - startY - (15 - i) * (barHeight + whiteSpaceHeight);
    String rank=i + 1 + ""String_Node_Str"";
    if (i < 9)     rank=""String_Node_Str"" + rank;
    g.setColor(Color.LIGHT_GRAY);
    g.drawOval(14 - 2,currentY - 1,19,19);
    g.drawLine(14 + 18,currentY + 8,14 + 18 + 16,currentY + 8);
    g.drawLine(14 + 18,currentY + 9,14 + 18 + 16,currentY + 9);
    g.drawOval(width - 31 - 2,currentY - 1,19,19);
    g.drawLine(width - 31 - 2,currentY + 8,width - 31 - 2- 16,currentY + 8);
    g.drawLine(width - 31 - 2,currentY + 9,width - 31 - 2- 16,currentY + 9);
    g.setColor(Color.BLACK);
    g.drawString(rank,14,currentY + 12);
    g.drawString(rank,width - 31,currentY + 12);
  }
  g.drawString(""String_Node_Str"",8,centerY - 84);
  g.drawString(""String_Node_Str"",width - 40,centerY - 84);
  for (int i=0; i < 22; i++) {
    LinkedList<Book.BookStats> currentBucket=buckets.get(i);
    int currentX=rankingWidth + i * intervalWidth;
    Iterator<Book.BookStats> it=currentBucket.listIterator();
    g.setFont(new Font(""String_Node_Str"",Font.PLAIN,9));
    while (it.hasNext()) {
      Book.BookStats stat=it.next();
      int currentY=height - startY - (16 - stat.ranking) * (barHeight + whiteSpaceHeight);
      if (state == State.OVERALL || stat.owner == currentBook)       g.setColor(stat.owner.colour);
 else       g.setColor(new Color(224,224,224));
      g.fillRect(currentX,currentY,intervalWidth / 2,barHeight);
      if (stat.next != null && stat.week + 1 == stat.next.week) {
        int nextY=height - startY - (16 - stat.next.ranking) * (barHeight + whiteSpaceHeight);
        int y[]={currentY,nextY,nextY + barHeight,currentY + barHeight};
        int x[]={currentX + intervalWidth / 2,currentX + intervalWidth,currentX + intervalWidth,currentX + intervalWidth / 2};
        g.fillPolygon(x,y,4);
      }
      if (stat.isFirst && (state == State.OVERALL || currentBook == stat.owner)) {
        g.setColor(Color.WHITE);
        if (stat.owner.title.length() < 8)         g.drawString(stat.owner.title,currentX + 2,currentY + 12);
 else         g.drawString(stat.owner.title.substring(0,8) + ""String_Node_Str"",currentX + 2,currentY + 12);
      }
      if (state == State.DETAIL && stat.owner == currentBook) {
        g.setFont(new Font(""String_Node_Str"",Font.BOLD,11));
        g.setColor(Color.BLACK);
        g.drawString(stat.ranking + ""String_Node_Str"",currentX + intervalWidth / 4 - 4,currentY - 4);
      }
    }
    g.setFont(new Font(""String_Node_Str"",Font.BOLD,11));
    g.setColor(Color.BLACK);
    g.drawString(""String_Node_Str"" + (i + 1),currentX,height - 32);
    if (bookColour != null) {
      int xOffset=(int)((ScrollPane)(this.getParent())).getScrollPosition().getX() + 400 - 150;
      FontMetrics metric=getFontMetrics(g.getFont());
      int stringWidth=metric.stringWidth(bookName);
      g.clearRect(0,height - 20,width,22);
      g.setColor(Color.GRAY);
      g.fillRect(xOffset + 2,height - 20 + 2,300,20);
      g.setColor(bookColour);
      g.fillRect(xOffset,height - 20,300,20);
      g.setColor(Color.WHITE);
      g.drawString(bookName,xOffset + (300 - stringWidth) / 2,height - 17 + 11);
      if (state == state.DETAIL) {
        int windowOffsetX=xOffset - 245;
        int windowOffsetY=15;
        int windowWidth=400;
        int windowHeight=150;
        FontMetrics fmet;
        Font heading=new Font(""String_Node_Str"",Font.BOLD,16);
        fmet=getFontMetrics(heading);
        g.setFont(heading);
        g.clearRect(0,0,width,windowHeight + 25);
        String title=currentBook.title;
        String author=currentBook.author;
        String desc=currentBook.description;
        g.setColor(Color.GRAY);
        g.fillRect(windowOffsetX + 2,windowOffsetY + 2,windowWidth,windowHeight);
        g.setColor(bookColour);
        g.fillRect(windowOffsetX,windowOffsetY,windowWidth,windowHeight);
        g.setColor(Color.WHITE);
        int headingWidth=(fmet.stringWidth(title));
        if (headingWidth < windowWidth) {
          windowOffsetY+=20;
          g.drawString(title,windowOffsetX + (windowWidth / 2) - (headingWidth / 2),windowOffsetY);
        }
 else {
          String title1=title.substring(0,title.length() / 2);
          int title1Width=(fmet.stringWidth(title1));
          String title2=title.substring(title.length() / 2);
          int title12Width=(fmet.stringWidth(title2));
          windowOffsetY+=15;
          g.drawString(title1,windowOffsetX + (windowWidth / 2) - (title1Width / 2),windowOffsetY);
          windowOffsetY+=15;
          g.drawString(title2,windowOffsetX + (windowWidth / 2) - (title12Width / 2),windowOffsetY);
        }
        g.setFont(new Font(""String_Node_Str"",Font.ITALIC,14));
        fmet=getFontMetrics(new Font(""String_Node_Str"",Font.ITALIC,14));
        windowOffsetY+=15;
        g.drawString(author,windowOffsetX + (windowWidth / 2) - (fmet.stringWidth(author)) / 2,windowOffsetY);
      }
    }
 else {
      g.clearRect(0,height - 20,width,22);
    }
  }
}"
24456,"@EventListener public void check(LoginEvent loginEvent){
  Date date=new Date(loginEvent.getTimestamp());
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(date);
  if (calendar.get(Calendar.HOUR) < BEDTIME_FOR_NIGHTHAWK) {
    addAchievement(loginEvent);
  }
}","@EventListener public void check(LoginEvent loginEvent){
  Date date=new Date(loginEvent.getTimestamp());
  Calendar calendar=Calendar.getInstance();
  calendar.setTime(date);
  if (calendar.get(Calendar.HOUR_OF_DAY) < BEDTIME_FOR_NIGHTHAWK) {
    addAchievement(loginEvent);
  }
}"
24457,"@Override public void shutdown() throws RuntimeException {
  if (persistenceManagerFactory != null)   persistenceManagerFactory.close();
}","@Override public void shutdown() throws RuntimeException {
  if (persistenceManagerFactory != null)   try {
    persistenceManagerFactory.close();
  }
 catch (  Exception e) {
  }
}"
24458,"@Override protected void endOperation(PersistenceManager iManager){
  iManager.currentTransaction().commit();
}","@Override protected void endOperation(PersistenceManager iManager){
  iManager.currentTransaction().commit();
  closeManager(iManager);
}"
24459,"@Override public void undetachedFieldAccess(Object entity,String field){
  try {
    Roma.context().create();
    PersistenceAspect aspect=Roma.context().persistence();
    PersistenceManager manager=(PersistenceManager)aspect.getUnderlyingComponent();
    if (manager instanceof JDOPersistenceManager && entity instanceof PersistenceCapable) {
      ObjectManager objManager=((JDOPersistenceManager)manager).getObjectManager();
      ApiAdapter api=objManager.getApiAdapter();
      Object id=api.getIdForObject(entity);
      StateManager sm=(StateManager)ObjectProviderFactory.newForDetached(objManager,entity,id,api.getVersionForObject(entity));
      sm.retrieveDetachState(sm);
      AbstractClassMetaData acm=sm.getClassMetaData();
      try {
        int fieldPos=acm.getAbsolutePositionOfMember(field);
        sm.loadField(fieldPos);
        FetchPlanState fps=new FetchPlanState();
        FieldManager detachFieldManager=new DetachFieldManager(sm,acm.getSCOMutableMemberFlags(),objManager.getFetchPlan().manageFetchPlanForClass(acm),fps,false);
        detachFieldManager.fetchObjectField(fieldPos);
      }
  finally {
        ((Detachable)entity).jdoReplaceDetachedState();
        ((PersistenceCapable)entity).jdoReplaceStateManager(null);
      }
    }
  }
  finally {
    Roma.context().destroy();
  }
}","@Override public void undetachedFieldAccess(Object entity,String field){
  try {
    Roma.context().create();
    PersistenceAspect aspect=Roma.context().persistence();
    PersistenceManager manager=(PersistenceManager)aspect.getUnderlyingComponent();
    if (manager instanceof JDOPersistenceManager && entity instanceof PersistenceCapable) {
      ObjectManager objManager=((JDOPersistenceManager)manager).getObjectManager();
      ApiAdapter api=objManager.getApiAdapter();
      Object id=api.getIdForObject(entity);
      StateManager sm=(StateManager)ObjectProviderFactory.newForDetached(objManager,entity,id,api.getVersionForObject(entity));
      sm.retrieveDetachState(sm);
      AbstractClassMetaData acm=sm.getClassMetaData();
      try {
        int fieldPos=acm.getAbsolutePositionOfMember(field);
        sm.loadField(fieldPos);
        FetchPlanState fps=new FetchPlanState();
        FieldManager detachFieldManager=new DetachFieldManager(sm,acm.getSCOMutableMemberFlags(),objManager.getFetchPlan().manageFetchPlanForClass(acm),fps,false);
        detachFieldManager.fetchObjectField(fieldPos);
      }
  finally {
        ((Detachable)entity).jdoReplaceDetachedState();
        ((PersistenceCapable)entity).jdoReplaceStateManager(null);
        if (aspect == null || aspect instanceof JDOAtomicPersistenceAspect) {
          if (manager == null || manager.isClosed())           return;
          if (manager.currentTransaction().isActive())           manager.currentTransaction().rollback();
          manager.close();
          manager=null;
        }
      }
    }
  }
  finally {
    Roma.context().destroy();
  }
}"
24460,"public void buildWhere(StringBuilder where,List<QueryByFilterItem> items,Map<String,Object> params,String predicate,String alias,Map<String,Class<?>> froms,Map<String,List<QueryByFilterProjection>> projections,Map<String,List<QueryByFilterOrder>> orders){
  if (items == null)   return;
  Iterator<QueryByFilterItem> iter=items.iterator();
  char aliasAppend='A';
  while (iter.hasNext()) {
    QueryByFilterItem item=iter.next();
    if (item instanceof QueryByFilterItemGroup) {
      if (((QueryByFilterItemGroup)item).getItems() == null && ((QueryByFilterItemGroup)item).getItems().isEmpty())       continue;
      where.append(""String_Node_Str"");
      buildWhere(where,((QueryByFilterItemGroup)item).getItems(),params,((QueryByFilterItemGroup)item).getPredicate(),alias,froms,projections,orders);
      where.append(""String_Node_Str"");
    }
 else     if (item instanceof QueryByFilterItemPredicate) {
      QueryByFilterItemPredicate pred=((QueryByFilterItemPredicate)item);
      String fieldName=pred.getFieldName();
      where.append(alias).append(""String_Node_Str"").append(fieldName);
      if (pred.getFieldValue() == null) {
        if (QueryOperator.EQUALS.equals(pred.getFieldOperator())) {
          where.append(""String_Node_Str"");
        }
 else         if (QueryOperator.NOT_EQUALS.equals(pred.getFieldOperator())) {
          where.append(""String_Node_Str"");
        }
      }
 else {
        where.append(getJPQLOperator(pred.getFieldOperator()));
        String pName=fieldName.replace('.','_');
        int i=1;
        while (params.get(pName) != null)         pName=fieldName.replace('.','_') + (i++);
        if (QueryOperator.LIKE.equals(pred.getFieldOperator()) && ((pred.getFieldValue() instanceof String) || pred.getFieldValue() == null)) {
          String value=(String)pred.getFieldValue();
          if (value == null)           params.put(pName,""String_Node_Str"");
 else {
            if (value.indexOf(""String_Node_Str"") != -1)             params.put(pName,value.toUpperCase().replaceAll(""String_Node_Str"",""String_Node_Str""));
 else             params.put(pName,""String_Node_Str"" + value.toUpperCase() + ""String_Node_Str"");
          }
        }
 else {
          params.put(pName,pred.getFieldValue());
        }
        where.append(':').append(pName);
      }
    }
 else     if (item instanceof QueryByFilterItemText) {
      where.append(alias).append(""String_Node_Str"").append(((QueryByFilterItemText)item).getCondition());
    }
 else     if (item instanceof QueryByFilterItemReverse) {
      String field=((QueryByFilterItemReverse)item).getField();
      String newAlias=alias + (aliasAppend++);
      QueryByFilter qbf=((QueryByFilterItemReverse)item).getQueryByFilter();
      where.append(newAlias).append(""String_Node_Str"").append(field);
      where.append(getJPQLOperator(((QueryByFilterItemReverse)item).getOperator()));
      String fieldReverse=((QueryByFilterItemReverse)item).getFieldReverse();
      if (fieldReverse == null || ""String_Node_Str"".equals(fieldReverse) || ""String_Node_Str"".equals(fieldReverse))       where.append(alias);
 else       where.append(alias).append('.').append(fieldReverse);
      froms.put(newAlias,qbf.getCandidateClass());
      projections.put(newAlias,qbf.getProjections());
      if (!qbf.getOrders().isEmpty())       orders.put(newAlias,qbf.getOrders());
      if (qbf.getItems().size() > 0) {
        where.append(""String_Node_Str"").append(predicate).append(""String_Node_Str"");
      }
      buildWhere(where,qbf.getItems(),params,qbf.getPredicateOperator(),newAlias,froms,projections,orders);
    }
    if (iter.hasNext())     where.append(""String_Node_Str"").append(predicate).append(""String_Node_Str"");
  }
}","public void buildWhere(StringBuilder where,List<QueryByFilterItem> items,Map<String,Object> params,String predicate,String alias,Map<String,Class<?>> froms,Map<String,List<QueryByFilterProjection>> projections,Map<String,List<QueryByFilterOrder>> orders){
  if (items == null)   return;
  Iterator<QueryByFilterItem> iter=items.iterator();
  char aliasAppend='A';
  while (iter.hasNext()) {
    QueryByFilterItem item=iter.next();
    if (item instanceof QueryByFilterItemGroup) {
      if (((QueryByFilterItemGroup)item).getItems() == null && ((QueryByFilterItemGroup)item).getItems().isEmpty())       continue;
      where.append(""String_Node_Str"");
      buildWhere(where,((QueryByFilterItemGroup)item).getItems(),params,((QueryByFilterItemGroup)item).getPredicate(),alias,froms,projections,orders);
      where.append(""String_Node_Str"");
    }
 else     if (item instanceof QueryByFilterItemPredicate) {
      QueryByFilterItemPredicate pred=((QueryByFilterItemPredicate)item);
      String fieldName=pred.getFieldName();
      where.append(alias).append(""String_Node_Str"").append(fieldName);
      if (pred.getFieldValue() == null) {
        if (QueryOperator.EQUALS.equals(pred.getFieldOperator())) {
          where.append(""String_Node_Str"");
        }
 else         if (QueryOperator.NOT_EQUALS.equals(pred.getFieldOperator())) {
          where.append(""String_Node_Str"");
        }
      }
 else {
        where.append(getJPQLOperator(pred.getFieldOperator()));
        String pName=fieldName.replace('.','_');
        int i=1;
        while (params.get(pName) != null)         pName=fieldName.replace('.','_') + (i++);
        if (QueryOperator.LIKE.equals(pred.getFieldOperator()) && ((pred.getFieldValue() instanceof String) || pred.getFieldValue() == null)) {
          String value=(String)pred.getFieldValue();
          if (value == null)           params.put(pName,""String_Node_Str"");
 else {
            if (value.indexOf(""String_Node_Str"") != -1)             params.put(pName,value.toUpperCase().replaceAll(""String_Node_Str"",""String_Node_Str""));
 else             params.put(pName,""String_Node_Str"" + value.toUpperCase() + ""String_Node_Str"");
          }
        }
 else {
          params.put(pName,pred.getFieldValue());
        }
        where.append(':').append(pName);
      }
    }
 else     if (item instanceof QueryByFilterItemText) {
      where.append(alias).append(""String_Node_Str"").append(((QueryByFilterItemText)item).getCondition());
    }
 else     if (item instanceof QueryByFilterItemReverse) {
      String field=((QueryByFilterItemReverse)item).getField();
      String newAlias=alias + (aliasAppend++);
      QueryByFilter qbf=((QueryByFilterItemReverse)item).getQueryByFilter();
      where.append(newAlias).append(""String_Node_Str"").append(field);
      where.append(getJPQLOperator(((QueryByFilterItemReverse)item).getOperator()));
      String fieldReverse=((QueryByFilterItemReverse)item).getFieldReverse();
      if (fieldReverse == null || ""String_Node_Str"".equals(fieldReverse) || ""String_Node_Str"".equals(fieldReverse))       where.append(alias);
 else       where.append(alias).append('.').append(fieldReverse);
      froms.put(newAlias,qbf.getCandidateClass());
      if (!qbf.getProjections().isEmpty())       projections.put(newAlias,qbf.getProjections());
      if (!qbf.getOrders().isEmpty())       orders.put(newAlias,qbf.getOrders());
      if (qbf.getItems().size() > 0) {
        where.append(""String_Node_Str"").append(predicate).append(""String_Node_Str"");
      }
      buildWhere(where,qbf.getItems(),params,qbf.getPredicateOperator(),newAlias,froms,projections,orders);
    }
    if (iter.hasNext())     where.append(""String_Node_Str"").append(predicate).append(""String_Node_Str"");
  }
}"
24461,"protected QueryByFilter buildQueryByFilter(QueryByExample iQuery){
  QueryByFilter filter=new QueryByFilter(iQuery.getCandidateClass());
  filter.setRangeFrom(iQuery.getRangeFrom(),iQuery.getRangeTo());
  filter.setSubClasses(iQuery.isSubClasses());
  filter.setMode(iQuery.getMode());
  filter.setStrategy(iQuery.getStrategy());
  if (iQuery.getFilter() != null) {
    Iterator<SchemaField> sf=Roma.schema().getSchemaClass(iQuery.getCandidateClass()).getFieldIterator();
    Object fieldValue;
    QueryOperator operator=null;
    while (sf.hasNext()) {
      SchemaField field=sf.next();
      fieldValue=field.getValue(iQuery.getFilter());
      if (fieldValue != null) {
        if (fieldValue instanceof Collection<?> || fieldValue instanceof Map<?,?>)         continue;
        if (fieldValue instanceof String && ((String)fieldValue).length() == 0)         continue;
        if (String.class.equals(field.getLanguageType()))         operator=QueryByFilter.FIELD_LIKE;
 else         operator=QueryByFilter.FIELD_EQUALS;
        filter.addItem(field.getName(),operator,fieldValue);
      }
    }
  }
  QueryByFilter addFilter=iQuery.getAdditionalFilter();
  if (addFilter != null) {
    filter.setSubClasses(addFilter.isSubClasses());
    filter.merge(addFilter);
  }
  return filter;
}","protected QueryByFilter buildQueryByFilter(QueryByExample iQuery){
  QueryByFilter filter=new QueryByFilter(iQuery.getCandidateClass());
  filter.setRangeFrom(iQuery.getRangeFrom(),iQuery.getRangeTo());
  filter.setSubClasses(iQuery.isSubClasses());
  filter.setMode(iQuery.getMode());
  filter.setStrategy(iQuery.getStrategy());
  if (iQuery.getFilter() != null) {
    Iterator<SchemaField> sf=Roma.schema().getSchemaClass(iQuery.getCandidateClass()).getFieldIterator();
    Object fieldValue;
    QueryOperator operator=null;
    while (sf.hasNext()) {
      SchemaField field=sf.next();
      try {
        boolean found=false;
        Field[] fields=iQuery.getCandidateClass().getFields();
        for (        Field classField : fields) {
          if (classField.getName().equals(field.getName())) {
            found=true;
            break;
          }
        }
        if (!found)         continue;
      }
 catch (      SecurityException e) {
      }
      fieldValue=field.getValue(iQuery.getFilter());
      if (fieldValue != null) {
        if (fieldValue instanceof Collection<?> || fieldValue instanceof Map<?,?>)         continue;
        if (fieldValue instanceof String && ((String)fieldValue).length() == 0)         continue;
        if (String.class.equals(field.getLanguageType()))         operator=QueryByFilter.FIELD_LIKE;
 else         operator=QueryByFilter.FIELD_EQUALS;
        filter.addItem(field.getName(),operator,fieldValue);
      }
    }
  }
  QueryByFilter addFilter=iQuery.getAdditionalFilter();
  if (addFilter != null) {
    filter.setSubClasses(addFilter.isSubClasses());
    filter.merge(addFilter);
  }
  return filter;
}"
24462,"public void buildWhere(StringBuilder where,List<QueryByFilterItem> items,Map<String,Object> params,String predicate,String alias,Map<String,Class<?>> froms,Map<String,List<QueryByFilterProjection>> projections,Map<String,List<QueryByFilterOrder>> orders){
  if (items == null)   return;
  Iterator<QueryByFilterItem> iter=items.iterator();
  char aliasAppend='A';
  while (iter.hasNext()) {
    QueryByFilterItem item=iter.next();
    if (item instanceof QueryByFilterItemGroup) {
      if (((QueryByFilterItemGroup)item).getItems() == null && ((QueryByFilterItemGroup)item).getItems().isEmpty())       continue;
      where.append(""String_Node_Str"");
      buildWhere(where,((QueryByFilterItemGroup)item).getItems(),params,((QueryByFilterItemGroup)item).getPredicate(),alias,froms,projections,orders);
      where.append(""String_Node_Str"");
    }
 else     if (item instanceof QueryByFilterItemPredicate) {
      QueryByFilterItemPredicate pred=((QueryByFilterItemPredicate)item);
      String fieldName=pred.getFieldName();
      where.append(alias).append(""String_Node_Str"").append(fieldName);
      if (pred.getFieldValue() == null) {
        if (QueryOperator.EQUALS.equals(pred.getFieldOperator())) {
          where.append(""String_Node_Str"");
        }
 else         if (QueryOperator.NOT_EQUALS.equals(pred.getFieldOperator())) {
          where.append(""String_Node_Str"");
        }
      }
 else {
        where.append(getJPQLOperator(pred.getFieldOperator()));
        String pName=fieldName.replace('.','_');
        int i=1;
        while (params.get(pName) != null)         pName=fieldName.replace('.','_') + (i++);
        if (QueryOperator.LIKE.equals(pred.getFieldOperator()) && ((pred.getFieldValue() instanceof String) || pred.getFieldValue() == null)) {
          String value=(String)pred.getFieldValue();
          if (value == null)           params.put(pName,""String_Node_Str"");
 else {
            if (value.indexOf(""String_Node_Str"") != -1)             params.put(pName,value.toUpperCase().replaceAll(""String_Node_Str"",""String_Node_Str""));
 else             params.put(pName,""String_Node_Str"" + value.toUpperCase() + ""String_Node_Str"");
          }
        }
 else {
          params.put(pName,pred.getFieldValue());
        }
        where.append(':').append(pName);
      }
    }
 else     if (item instanceof QueryByFilterItemText) {
      where.append(alias).append(""String_Node_Str"").append(((QueryByFilterItemText)item).getCondition());
    }
 else     if (item instanceof QueryByFilterItemReverse) {
      String field=((QueryByFilterItemReverse)item).getField();
      String newAlias=alias + (aliasAppend++);
      QueryByFilter qbf=((QueryByFilterItemReverse)item).getQueryByFilter();
      where.append(newAlias).append(""String_Node_Str"").append(field);
      where.append(getJPQLOperator(((QueryByFilterItemReverse)item).getOperator()));
      String fieldReverse=((QueryByFilterItemReverse)item).getFieldReverse();
      if (fieldReverse == null || ""String_Node_Str"".equals(fieldReverse) || ""String_Node_Str"".equals(fieldReverse))       where.append(alias);
 else       where.append(alias).append('.').append(fieldReverse);
      froms.put(newAlias,qbf.getCandidateClass());
      if (!qbf.getProjections().isEmpty())       projections.put(newAlias,qbf.getProjections());
      if (!qbf.getOrders().isEmpty())       orders.put(newAlias,qbf.getOrders());
      if (qbf.getItems().size() > 0) {
        where.append(""String_Node_Str"").append(predicate).append(""String_Node_Str"");
      }
      buildWhere(where,qbf.getItems(),params,qbf.getPredicateOperator(),newAlias,froms,projections,orders);
    }
    if (iter.hasNext())     where.append(""String_Node_Str"").append(predicate).append(""String_Node_Str"");
  }
}","public void buildWhere(StringBuilder where,List<QueryByFilterItem> items,Map<String,Object> params,String predicate,String alias,Map<String,Class<?>> froms,Map<String,List<QueryByFilterProjection>> projections,Map<String,List<QueryByFilterOrder>> orders){
  if (items == null)   return;
  Iterator<QueryByFilterItem> iter=items.iterator();
  char aliasAppend='A';
  while (iter.hasNext()) {
    QueryByFilterItem item=iter.next();
    if (item instanceof QueryByFilterItemGroup) {
      if (((QueryByFilterItemGroup)item).getItems() == null && ((QueryByFilterItemGroup)item).getItems().isEmpty())       continue;
      where.append(""String_Node_Str"");
      buildWhere(where,((QueryByFilterItemGroup)item).getItems(),params,((QueryByFilterItemGroup)item).getPredicate(),alias,froms,projections,orders);
      where.append(""String_Node_Str"");
    }
 else     if (item instanceof QueryByFilterItemPredicate) {
      QueryByFilterItemPredicate pred=((QueryByFilterItemPredicate)item);
      String fieldName=pred.getFieldName();
      String pName=fieldName.replace('.','_');
      int i=1;
      while (params.get(pName) != null)       pName=fieldName.replace('.','_') + (i++);
      if (QueryOperator.LIKE.equals(pred.getFieldOperator()) && ((pred.getFieldValue() instanceof String) || pred.getFieldValue() == null)) {
        where.append(""String_Node_Str"").append(alias).append(""String_Node_Str"").append(fieldName).append(""String_Node_Str"");
      }
 else       if (pred.getFieldOperator().equals(QueryOperator.CONTAINS)) {
        where.append(""String_Node_Str"").append(pName);
      }
 else {
        where.append(alias).append(""String_Node_Str"").append(fieldName);
      }
      if (pred.getFieldValue() == null) {
        if (QueryOperator.EQUALS.equals(pred.getFieldOperator())) {
          where.append(""String_Node_Str"");
        }
 else         if (QueryOperator.NOT_EQUALS.equals(pred.getFieldOperator())) {
          where.append(""String_Node_Str"");
        }
      }
 else {
        where.append(getJPQLOperator(pred.getFieldOperator()));
        if (pred.getFieldOperator().equals(QueryOperator.IN) || pred.getFieldOperator().equals(QueryOperator.CONTAINS))         where.append(""String_Node_Str"");
        if (QueryOperator.LIKE.equals(pred.getFieldOperator()) && ((pred.getFieldValue() instanceof String) || pred.getFieldValue() == null)) {
          String value=(String)pred.getFieldValue();
          if (value == null)           params.put(pName,""String_Node_Str"");
 else {
            if (value.indexOf(""String_Node_Str"") != -1)             params.put(pName,value.toUpperCase().replaceAll(""String_Node_Str"",""String_Node_Str""));
 else             params.put(pName,""String_Node_Str"" + value.toUpperCase() + ""String_Node_Str"");
          }
        }
 else {
          params.put(pName,pred.getFieldValue());
        }
        if (pred.getFieldOperator().equals(QueryOperator.CONTAINS))         where.append(alias).append(""String_Node_Str"").append(fieldName);
 else         where.append(':').append(pName);
        if (pred.getFieldOperator().equals(QueryOperator.IN) || pred.getFieldOperator().equals(QueryOperator.CONTAINS))         where.append(""String_Node_Str"");
      }
    }
 else     if (item instanceof QueryByFilterItemText) {
      where.append(alias).append(""String_Node_Str"").append(((QueryByFilterItemText)item).getCondition());
    }
 else     if (item instanceof QueryByFilterItemReverse) {
      String field=((QueryByFilterItemReverse)item).getField();
      String newAlias=alias + (aliasAppend++);
      QueryByFilter qbf=((QueryByFilterItemReverse)item).getQueryByFilter();
      where.append(newAlias).append(""String_Node_Str"").append(field);
      where.append(getJPQLOperator(((QueryByFilterItemReverse)item).getOperator()));
      String fieldReverse=((QueryByFilterItemReverse)item).getFieldReverse();
      if (fieldReverse == null || ""String_Node_Str"".equals(fieldReverse) || ""String_Node_Str"".equals(fieldReverse))       where.append(alias);
 else       where.append(alias).append('.').append(fieldReverse);
      froms.put(newAlias,qbf.getCandidateClass());
      if (!qbf.getProjections().isEmpty())       projections.put(newAlias,qbf.getProjections());
      if (!qbf.getOrders().isEmpty())       orders.put(newAlias,qbf.getOrders());
      if (qbf.getItems().size() > 0) {
        where.append(""String_Node_Str"").append(predicate).append(""String_Node_Str"");
      }
      buildWhere(where,qbf.getItems(),params,qbf.getPredicateOperator(),newAlias,froms,projections,orders);
    }
    if (iter.hasNext())     where.append(""String_Node_Str"").append(predicate).append(""String_Node_Str"");
  }
}"
24463,"protected QueryByFilter buildQueryByFilter(QueryByExample iQuery){
  QueryByFilter filter=new QueryByFilter(iQuery.getCandidateClass());
  filter.setRangeFrom(iQuery.getRangeFrom(),iQuery.getRangeTo());
  filter.setSubClasses(iQuery.isSubClasses());
  filter.setMode(iQuery.getMode());
  filter.setStrategy(iQuery.getStrategy());
  if (iQuery.getFilter() != null) {
    Iterator<SchemaField> sf=Roma.schema().getSchemaClass(iQuery.getCandidateClass()).getFieldIterator();
    Object fieldValue;
    QueryOperator operator=null;
    while (sf.hasNext()) {
      SchemaField field=sf.next();
      try {
        boolean found=false;
        Field[] fields=iQuery.getCandidateClass().getFields();
        for (        Field classField : fields) {
          if (classField.getName().equals(field.getName())) {
            found=true;
            break;
          }
        }
        if (!found)         continue;
      }
 catch (      SecurityException e) {
      }
      fieldValue=field.getValue(iQuery.getFilter());
      if (fieldValue != null) {
        if (fieldValue instanceof Collection<?> || fieldValue instanceof Map<?,?>)         continue;
        if (fieldValue instanceof String && ((String)fieldValue).length() == 0)         continue;
        if (String.class.equals(field.getLanguageType()))         operator=QueryByFilter.FIELD_LIKE;
 else         operator=QueryByFilter.FIELD_EQUALS;
        filter.addItem(field.getName(),operator,fieldValue);
      }
    }
  }
  QueryByFilter addFilter=iQuery.getAdditionalFilter();
  if (addFilter != null) {
    filter.setSubClasses(addFilter.isSubClasses());
    filter.merge(addFilter);
  }
  return filter;
}","protected QueryByFilter buildQueryByFilter(QueryByExample iQuery){
  QueryByFilter filter=new QueryByFilter(iQuery.getCandidateClass());
  filter.setRangeFrom(iQuery.getRangeFrom(),iQuery.getRangeTo());
  filter.setSubClasses(iQuery.isSubClasses());
  filter.setMode(iQuery.getMode());
  filter.setStrategy(iQuery.getStrategy());
  if (iQuery.getFilter() != null) {
    Iterator<SchemaField> sf=Roma.schema().getSchemaClass(iQuery.getCandidateClass()).getFieldIterator();
    Object fieldValue;
    QueryOperator operator=null;
    while (sf.hasNext()) {
      SchemaField field=sf.next();
      try {
        boolean found=false;
        Field[] fields=iQuery.getCandidateClass().getDeclaredFields();
        for (        Field classField : fields) {
          if (classField.getName().equals(field.getName())) {
            found=true;
            break;
          }
        }
        if (!found)         continue;
      }
 catch (      SecurityException e) {
      }
      fieldValue=field.getValue(iQuery.getFilter());
      if (fieldValue != null) {
        if (fieldValue instanceof Collection<?> || fieldValue instanceof Map<?,?>)         continue;
        if (fieldValue instanceof String && ((String)fieldValue).length() == 0)         continue;
        if (String.class.equals(field.getLanguageType()))         operator=QueryByFilter.FIELD_LIKE;
 else         operator=QueryByFilter.FIELD_EQUALS;
        filter.addItem(field.getName(),operator,fieldValue);
      }
    }
  }
  QueryByFilter addFilter=iQuery.getAdditionalFilter();
  if (addFilter != null) {
    filter.setSubClasses(addFilter.isSubClasses());
    filter.merge(addFilter);
  }
  return filter;
}"
24464,"public void buildWhere(StringBuilder where,List<QueryByFilterItem> items,Map<String,Object> params,String predicate,String alias,Map<String,Class<?>> froms,Map<String,List<QueryByFilterProjection>> projections){
  if (items == null)   return;
  Iterator<QueryByFilterItem> iter=items.iterator();
  char aliasAppend='A';
  while (iter.hasNext()) {
    QueryByFilterItem item=iter.next();
    if (item instanceof QueryByFilterItemGroup) {
      if (((QueryByFilterItemGroup)item).getItems() == null && ((QueryByFilterItemGroup)item).getItems().isEmpty())       continue;
      where.append(""String_Node_Str"");
      buildWhere(where,((QueryByFilterItemGroup)item).getItems(),params,((QueryByFilterItemGroup)item).getPredicate(),alias,froms,projections);
      where.append(""String_Node_Str"");
    }
 else     if (item instanceof QueryByFilterItemPredicate) {
      QueryByFilterItemPredicate pred=((QueryByFilterItemPredicate)item);
      String fieldName=pred.getFieldName();
      where.append(alias).append(""String_Node_Str"").append(fieldName);
      where.append(getJPQLOperator(pred.getFieldOperator()));
      String pName=fieldName.replace('.','_');
      int i=1;
      while (params.get(pName) != null)       pName=fieldName.replace('.','_') + (i++);
      if (QueryOperator.LIKE.equals(pred.getFieldOperator()) && (pred.getFieldValue() instanceof String) || pred.getFieldValue() == null) {
        String value=(String)pred.getFieldValue();
        if (value == null)         params.put(pName,""String_Node_Str"");
 else {
          if (value.indexOf(""String_Node_Str"") != -1)           params.put(pName,value.toUpperCase().replaceAll(""String_Node_Str"",""String_Node_Str""));
 else           params.put(pName,""String_Node_Str"" + value.toUpperCase() + ""String_Node_Str"");
        }
      }
 else       params.put(pName,pred.getFieldValue());
      where.append(':').append(pName);
    }
 else     if (item instanceof QueryByFilterItemText) {
      where.append(alias).append(""String_Node_Str"").append(((QueryByFilterItemText)item).getCondition());
    }
 else     if (item instanceof QueryByFilterItemReverse) {
      String field=((QueryByFilterItemReverse)item).getField();
      String newAlias=alias + (aliasAppend++);
      where.append(newAlias).append(""String_Node_Str"").append(field);
      where.append(getJPQLOperator(((QueryByFilterItemReverse)item).getOperator()));
      where.append(alias);
      QueryByFilter qbf=((QueryByFilterItemReverse)item).getQueryByFilter();
      froms.put(newAlias,qbf.getCandidateClass());
      projections.put(newAlias,qbf.getProjections());
      if (qbf.getItems().size() > 0) {
        where.append(""String_Node_Str"").append(predicate).append(""String_Node_Str"");
      }
      buildWhere(where,qbf.getItems(),params,qbf.getPredicateOperator(),newAlias,froms,projections);
    }
    if (iter.hasNext())     where.append(""String_Node_Str"").append(predicate).append(""String_Node_Str"");
  }
}","public void buildWhere(StringBuilder where,List<QueryByFilterItem> items,Map<String,Object> params,String predicate,String alias,Map<String,Class<?>> froms,Map<String,List<QueryByFilterProjection>> projections){
  if (items == null)   return;
  Iterator<QueryByFilterItem> iter=items.iterator();
  char aliasAppend='A';
  while (iter.hasNext()) {
    QueryByFilterItem item=iter.next();
    if (item instanceof QueryByFilterItemGroup) {
      if (((QueryByFilterItemGroup)item).getItems() == null && ((QueryByFilterItemGroup)item).getItems().isEmpty())       continue;
      where.append(""String_Node_Str"");
      buildWhere(where,((QueryByFilterItemGroup)item).getItems(),params,((QueryByFilterItemGroup)item).getPredicate(),alias,froms,projections);
      where.append(""String_Node_Str"");
    }
 else     if (item instanceof QueryByFilterItemPredicate) {
      QueryByFilterItemPredicate pred=((QueryByFilterItemPredicate)item);
      String fieldName=pred.getFieldName();
      where.append(alias).append(""String_Node_Str"").append(fieldName);
      where.append(getJPQLOperator(pred.getFieldOperator()));
      String pName=fieldName.replace('.','_');
      int i=1;
      while (params.get(pName) != null)       pName=fieldName.replace('.','_') + (i++);
      if (QueryOperator.LIKE.equals(pred.getFieldOperator()) && ((pred.getFieldValue() instanceof String) || pred.getFieldValue() == null)) {
        String value=(String)pred.getFieldValue();
        if (value == null)         params.put(pName,""String_Node_Str"");
 else {
          if (value.indexOf(""String_Node_Str"") != -1)           params.put(pName,value.toUpperCase().replaceAll(""String_Node_Str"",""String_Node_Str""));
 else           params.put(pName,""String_Node_Str"" + value.toUpperCase() + ""String_Node_Str"");
        }
      }
 else       params.put(pName,pred.getFieldValue());
      where.append(':').append(pName);
    }
 else     if (item instanceof QueryByFilterItemText) {
      where.append(alias).append(""String_Node_Str"").append(((QueryByFilterItemText)item).getCondition());
    }
 else     if (item instanceof QueryByFilterItemReverse) {
      String field=((QueryByFilterItemReverse)item).getField();
      String newAlias=alias + (aliasAppend++);
      where.append(newAlias).append(""String_Node_Str"").append(field);
      where.append(getJPQLOperator(((QueryByFilterItemReverse)item).getOperator()));
      where.append(alias);
      QueryByFilter qbf=((QueryByFilterItemReverse)item).getQueryByFilter();
      froms.put(newAlias,qbf.getCandidateClass());
      projections.put(newAlias,qbf.getProjections());
      if (qbf.getItems().size() > 0) {
        where.append(""String_Node_Str"").append(predicate).append(""String_Node_Str"");
      }
      buildWhere(where,qbf.getItems(),params,qbf.getPredicateOperator(),newAlias,froms,projections);
    }
    if (iter.hasNext())     where.append(""String_Node_Str"").append(predicate).append(""String_Node_Str"");
  }
}"
24465,"@Test public void testGenerateGroup(){
  JPQLQueryEngine qe=new JPQLQueryEngine();
  QueryByFilter qbf=new QueryByFilter(Roma.class);
  qbf.addItem(""String_Node_Str"",QueryOperator.EQUALS,true);
  QueryByFilterItemGroup group=qbf.addGroup(QueryByFilterItemGroup.PREDICATE_OR);
  group.addItem(""String_Node_Str"",QueryOperator.EQUALS,new Object());
  group.addItem(""String_Node_Str"",QueryOperator.EQUALS,new Object());
  StringBuilder query=new StringBuilder();
  Map<String,Object> params=new HashMap<String,Object>();
  List<String> project=new ArrayList<String>();
  qe.buildQuery(qbf,query,params,project);
  Assert.assertEquals(replaceSpaces(""String_Node_Str""),replaceSpaces(query.toString()));
  Assert.assertEquals(params.size(),3);
}","@Test public void testGenerateGroup(){
  JPQLQueryEngine qe=new JPQLQueryEngine();
  QueryByFilter qbf=new QueryByFilter(Roma.class);
  qbf.addItem(""String_Node_Str"",QueryOperator.EQUALS,true);
  QueryByFilterItemGroup group=qbf.addGroup(QueryByFilterItemGroup.PREDICATE_OR);
  group.addItem(""String_Node_Str"",QueryOperator.EQUALS,new Object());
  group.addItem(""String_Node_Str"",QueryOperator.EQUALS,new Object());
  qbf.addItem(group);
  StringBuilder query=new StringBuilder();
  Map<String,Object> params=new HashMap<String,Object>();
  List<String> project=new ArrayList<String>();
  qe.buildQuery(qbf,query,params,project);
  Assert.assertEquals(replaceSpaces(""String_Node_Str""),replaceSpaces(query.toString()));
  Assert.assertEquals(params.size(),3);
}"
24466,"@Override public void deleteSelection(){
  if (this.selectionRecord.numSelected() > 0) {
    commandStack.execute(new DeleteSelectionCommand(selectionRecord.getSubgraphSelection()));
    selectionRecord.clear();
    shapePane.updateView();
  }
}","@Override public void deleteSelection(){
  if (this.selectionRecord.numSelected() > 0) {
    commandStack.execute(new DeleteSelectionCommand(selectionRecord.getEdgeIncludedSelection()));
    selectionRecord.clear();
    shapePane.updateView();
  }
}"
24467,"private void deleteSelection(){
  this.commandStack.execute(new DeleteSelectionCommand(this.selectionRecord.getSubgraphSelection()));
}","private void deleteSelection(){
  this.commandStack.execute(new DeleteSelectionCommand(this.selectionRecord.getEdgeIncludedSelection()));
}"
24468,"private void deleteSelection(){
  this.commandStack.execute(new DeleteSelectionCommand(this.selectionRecord.getSubgraphSelection()));
}","private void deleteSelection(){
  this.commandStack.execute(new DeleteSelectionCommand(this.selectionRecord.getEdgeIncludedSelection()));
}"
24469,"@Override public void newDiagram(){
  String selection=(String)JOptionPane.showInputDialog(this.visualEditor,""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,null,nsMap.keySet().toArray(),""String_Node_Str"");
  INotationSubsystem selectedNs=nsMap.get(selection);
  this.canvasPersistenceManager.createNewModelStream(selectedNs,""String_Node_Str"");
  this.currentFile=null;
  renderModel();
}","@Override public void newDiagram(){
  String selection=(String)JOptionPane.showInputDialog(this.visualEditor,""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,null,nsMap.keySet().toArray(),""String_Node_Str"");
  if (selection != null) {
    INotationSubsystem selectedNs=nsMap.get(selection);
    this.canvasPersistenceManager.createNewModelStream(selectedNs,""String_Node_Str"");
    this.currentFile=null;
    renderModel();
  }
}"
24470,"@Override public void drawString(String text,double x,double y,GraphicalTextAlignment align){
  this.setLineColour();
  this.setStroke();
  Font f=g.getFont();
  TextLayout layout=new TextLayout(text,f,g.getFontRenderContext());
  Rectangle2D textBounds=layout.getBounds();
  Point2D.Double p=getAlignedTextPosition(align,x,y,textBounds);
  p.setLocation(p.getX(),p.getY() + textBounds.getHeight());
  layout.draw(g,(float)p.getX(),(float)p.getY());
  if (logger.isDebugEnabled()) {
    logger.debug(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ text);
  }
}","@Override public void drawString(String text,double x,double y,GraphicalTextAlignment align){
  if (!text.isEmpty()) {
    this.setLineColour();
    this.setStroke();
    Font f=g.getFont();
    TextLayout layout=new TextLayout(text,f,g.getFontRenderContext());
    Rectangle2D textBounds=layout.getBounds();
    Point2D.Double p=getAlignedTextPosition(align,x,y,textBounds);
    p.setLocation(p.getX(),p.getY() + textBounds.getHeight());
    layout.draw(g,(float)p.getX(),(float)p.getY());
    if (logger.isDebugEnabled()) {
      logger.debug(""String_Node_Str"" + x + ""String_Node_Str""+ y+ ""String_Node_Str""+ text);
    }
  }
}"
24471,"protected CommonLabelController(IViewControllerModel viewModel,ILabelNode node,int index){
  super(viewModel,index);
  this.domainNode=node;
  this.isActive=false;
  this.controller=createController(node.getAttribute());
  drawingNodePropertyChangeListener=new ICanvasAttributeChangeListener(){
    @Override public void propertyChange(    ICanvasAttributePropertyChangeEvent e){
      if (e.getPropertyChange().equals(CanvasAttributePropertyChange.BOUNDS)) {
        Envelope oldDrawnBounds=getFigureController().getConvexHull().getEnvelope();
        IDrawingNodeAttribute attribute=(IDrawingNodeAttribute)e.getAttribute();
        getFigureController().setRequestedEnvelope(attribute.getBounds());
        getFigureController().generateFigureDefinition();
        notifyDrawnBoundsChanged(oldDrawnBounds,getFigureController().getConvexHull().getEnvelope());
      }
    }
    @Override public void elementTranslated(    ICanvasAttributeTranslationEvent e){
    }
    @Override public void nodeResized(    ICanvasAttributeResizedEvent e){
    }
  }
;
  propertyValueChangeListener=new IAnnotationPropertyChangeListener(){
    @Override public void propertyChange(    IAnnotationPropertyChangeEvent e){
      getFigureController().setBindString(LABEL_TEXT,domainNode.getAttribute().getDisplayedContent());
      getFigureController().generateFigureDefinition();
    }
  }
;
}","protected CommonLabelController(IViewControllerModel viewModel,ILabelNode node,int index){
  super(viewModel,index);
  this.domainNode=node;
  this.isActive=false;
  this.controller=createController(node.getAttribute());
  drawingNodePropertyChangeListener=new ICanvasAttributeChangeListener(){
    @Override public void propertyChange(    ICanvasAttributePropertyChangeEvent e){
      if (e.getPropertyChange().equals(CanvasAttributePropertyChange.BOUNDS)) {
        Envelope oldDrawnBounds=getFigureController().getConvexHull().getEnvelope();
        IDrawingNodeAttribute attribute=(IDrawingNodeAttribute)e.getAttribute();
        getFigureController().setRequestedEnvelope(attribute.getBounds());
        getFigureController().generateFigureDefinition();
        notifyDrawnBoundsChanged(oldDrawnBounds,getFigureController().getConvexHull().getEnvelope());
      }
    }
    @Override public void elementTranslated(    ICanvasAttributeTranslationEvent e){
    }
    @Override public void nodeResized(    ICanvasAttributeResizedEvent e){
    }
  }
;
  propertyValueChangeListener=new IAnnotationPropertyChangeListener(){
    @Override public void propertyChange(    IAnnotationPropertyChangeEvent e){
      String text=domainNode.getAttribute().getDisplayedContent();
      getFigureController().setBindString(LABEL_TEXT,text);
      Dimension textExtent=MIN_LABEL_SIZE;
      if (!text.isEmpty()) {
        textExtent=handleGetTextBounds(text);
      }
      Envelope newBounds=adjustForDefaultTextLength(getConvexHull().getCentre(),textExtent);
      getFigureController().setRequestedEnvelope(newBounds);
      getFigureController().generateFigureDefinition();
    }
  }
;
}"
24472,"@Override public void propertyChange(IAnnotationPropertyChangeEvent e){
  getFigureController().setBindString(LABEL_TEXT,domainNode.getAttribute().getDisplayedContent());
  getFigureController().generateFigureDefinition();
}","@Override public void propertyChange(IAnnotationPropertyChangeEvent e){
  String text=domainNode.getAttribute().getDisplayedContent();
  getFigureController().setBindString(LABEL_TEXT,text);
  Dimension textExtent=MIN_LABEL_SIZE;
  if (!text.isEmpty()) {
    textExtent=handleGetTextBounds(text);
  }
  Envelope newBounds=adjustForDefaultTextLength(getConvexHull().getCentre(),textExtent);
  getFigureController().setRequestedEnvelope(newBounds);
  getFigureController().generateFigureDefinition();
}"
24473,"public PalettePanel(INotationSubsystem notationSubsystem,final IMouseBehaviourController editBehaviourController){
  final ButtonGroup paletteGroup=new ButtonGroup();
  JPanel selectionButtonPanel=new JPanel();
  selectionButtonPanel.setLayout(new BoxLayout(selectionButtonPanel,BoxLayout.PAGE_AXIS));
  final JButton selectionButton=new JButton(""String_Node_Str"");
  ImageIcon selectionIcon=createImageIcon(""String_Node_Str"");
  selectionButton.setIcon(selectionIcon);
  paletteGroup.add(selectionButton);
  selectionButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      editBehaviourController.setSelectionMode();
      paletteGroup.setSelected(selectionButton.getModel(),true);
    }
  }
);
  selectionButtonPanel.add(selectionButton);
  this.add(selectionButtonPanel);
  JPanel shapeButtonPanel=new JPanel();
  this.palettePane=new JScrollPane(shapeButtonPanel);
  this.palettePane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  shapeButtonPanel.setLayout(new BoxLayout(shapeButtonPanel,BoxLayout.PAGE_AXIS));
  ShapeIconGenerator iconGenerator=new ShapeIconGenerator();
  iconGenerator.setBounds(new Envelope(0,0,16,16));
  Iterator<IShapeObjectType> shapeTypeIterator=notationSubsystem.getSyntaxService().shapeTypeIterator();
  while (shapeTypeIterator.hasNext()) {
    final IShapeObjectType shapeType=shapeTypeIterator.next();
    iconGenerator.setObjectType(shapeType);
    iconGenerator.generateImage();
    iconGenerator.generateIcon();
    final JButton shapeButton=new JButton(iconGenerator.getIcon());
    shapeButton.setText(shapeType.getName());
    shapeButton.setToolTipText(shapeType.getDescription());
    shapeButtonPanel.add(shapeButton);
    paletteGroup.add(shapeButton);
    shapeButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        editBehaviourController.setShapeCreationMode(shapeType);
        paletteGroup.setSelected(shapeButton.getModel(),true);
      }
    }
);
  }
  JPanel linkButtonPanel=new JPanel();
  linkButtonPanel.setLayout(new BoxLayout(linkButtonPanel,BoxLayout.PAGE_AXIS));
  this.linkScrollPanel=new JScrollPane(linkButtonPanel);
  this.linkScrollPanel.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  LinkIconGenerator linkIconGenerator=new LinkIconGenerator();
  Iterator<ILinkObjectType> linkTypeIterator=notationSubsystem.getSyntaxService().linkTypeIterator();
  linkIconGenerator.setBounds(new Envelope(0.0,0.0,64.0,16.0));
  while (linkTypeIterator.hasNext()) {
    final ILinkObjectType linkType=linkTypeIterator.next();
    linkIconGenerator.setObjectType(linkType);
    linkIconGenerator.generateImage();
    linkIconGenerator.generateIcon();
    final JButton linkButton=new JButton(linkIconGenerator.getIcon());
    linkButton.setText(linkType.getName());
    linkButton.setToolTipText(linkType.getDescription());
    linkButtonPanel.add(linkButton);
    linkButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        editBehaviourController.setLinkCreationMode(linkType);
        paletteGroup.setSelected(linkButton.getModel(),true);
      }
    }
);
  }
  this.setLayout(new BoxLayout(this,BoxLayout.PAGE_AXIS));
  this.splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,this.palettePane,this.linkScrollPanel);
  this.splitPane.setOneTouchExpandable(true);
  this.splitPane.setDividerLocation(250);
  this.add(this.splitPane);
  paletteGroup.setSelected(selectionButton.getModel(),true);
}","public PalettePanel(INotationSubsystem notationSubsystem,final IViewBehaviourController editBehaviourController){
  final ButtonGroup paletteGroup=new ButtonGroup();
  JPanel selectionButtonPanel=new JPanel();
  selectionButtonPanel.setLayout(new BoxLayout(selectionButtonPanel,BoxLayout.PAGE_AXIS));
  final JButton selectionButton=new JButton(""String_Node_Str"");
  ImageIcon selectionIcon=createImageIcon(""String_Node_Str"");
  selectionButton.setIcon(selectionIcon);
  paletteGroup.add(selectionButton);
  selectionButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      editBehaviourController.setSelectionMode();
      paletteGroup.setSelected(selectionButton.getModel(),true);
    }
  }
);
  selectionButtonPanel.add(selectionButton);
  this.add(selectionButtonPanel);
  JPanel shapeButtonPanel=new JPanel();
  this.palettePane=new JScrollPane(shapeButtonPanel);
  this.palettePane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  shapeButtonPanel.setLayout(new BoxLayout(shapeButtonPanel,BoxLayout.PAGE_AXIS));
  ShapeIconGenerator iconGenerator=new ShapeIconGenerator();
  iconGenerator.setBounds(new Envelope(0,0,16,16));
  Iterator<IShapeObjectType> shapeTypeIterator=notationSubsystem.getSyntaxService().shapeTypeIterator();
  while (shapeTypeIterator.hasNext()) {
    final IShapeObjectType shapeType=shapeTypeIterator.next();
    iconGenerator.setObjectType(shapeType);
    iconGenerator.generateImage();
    iconGenerator.generateIcon();
    final JButton shapeButton=new JButton(iconGenerator.getIcon());
    shapeButton.setText(shapeType.getName());
    shapeButton.setToolTipText(shapeType.getDescription());
    shapeButtonPanel.add(shapeButton);
    paletteGroup.add(shapeButton);
    shapeButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        editBehaviourController.setShapeCreationMode(shapeType);
        paletteGroup.setSelected(shapeButton.getModel(),true);
      }
    }
);
  }
  JPanel linkButtonPanel=new JPanel();
  linkButtonPanel.setLayout(new BoxLayout(linkButtonPanel,BoxLayout.PAGE_AXIS));
  this.linkScrollPanel=new JScrollPane(linkButtonPanel);
  this.linkScrollPanel.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  LinkIconGenerator linkIconGenerator=new LinkIconGenerator();
  Iterator<ILinkObjectType> linkTypeIterator=notationSubsystem.getSyntaxService().linkTypeIterator();
  linkIconGenerator.setBounds(new Envelope(0.0,0.0,64.0,16.0));
  while (linkTypeIterator.hasNext()) {
    final ILinkObjectType linkType=linkTypeIterator.next();
    linkIconGenerator.setObjectType(linkType);
    linkIconGenerator.generateImage();
    linkIconGenerator.generateIcon();
    final JButton linkButton=new JButton(linkIconGenerator.getIcon());
    linkButton.setText(linkType.getName());
    linkButton.setToolTipText(linkType.getDescription());
    linkButtonPanel.add(linkButton);
    linkButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        editBehaviourController.setLinkCreationMode(linkType);
        paletteGroup.setSelected(linkButton.getModel(),true);
      }
    }
);
  }
  this.setLayout(new BoxLayout(this,BoxLayout.PAGE_AXIS));
  this.splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,this.palettePane,this.linkScrollPanel);
  this.splitPane.setOneTouchExpandable(true);
  this.splitPane.setDividerLocation(250);
  this.add(this.splitPane);
  paletteGroup.setSelected(selectionButton.getModel(),true);
}"
24474,"private void setUpEditorViews(IModel canvas){
  this.selectionRecord=new SelectionRecord(viewModel);
  this.feedbackModel=new FeedbackModel(selectionRecord);
  this.shapePane=new ShapePane();
  this.shapePane.addLayer(new DomainModelLayer(viewModel));
  this.shapePane.addLayer(new SelectionLayer(selectionRecord));
  this.shapePane.addLayer(new FeedbackLayer(feedbackModel));
  Envelope canvasBounds=this.viewModel.getCanvasBounds();
  this.shapePane.setPaneBounds(canvasBounds);
  scrollPane=new JScrollPane((ShapePane)this.shapePane,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  scrollPane.getVerticalScrollBar().setUnitIncrement(16);
  scrollPane.setFocusable(true);
  scrollPane.setWheelScrollingEnabled(true);
  this.editBehaviourController=new MouseBehaviourController(shapePane,new OperationFactory(this.shapePane,this.feedbackModel,this.selectionRecord,viewModel,this.commandStack));
  INotationSubsystem notationSubsystem=canvas.getNotationSubsystem();
  this.palettePane=new PalettePanel(notationSubsystem,editBehaviourController);
  this.add(palettePane,BorderLayout.LINE_START);
  this.add(scrollPane,BorderLayout.CENTER);
  this.selectionChangeListener=new ISelectionChangeListener(){
    @Override public void selectionChanged(    ISelectionChangeEvent event){
      EnvelopeBuilder builder=null;
      Iterator<ISelection> oldIter=event.oldSelectionIter();
      while (oldIter.hasNext()) {
        ISelection seln=oldIter.next();
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"" + seln.getPrimitiveController().getDrawnBounds());
        }
        Envelope bounds=seln.getPrimitiveController().getDrawnBounds();
        if (builder == null) {
          builder=new EnvelopeBuilder(bounds);
        }
 else {
          builder.union(bounds);
        }
      }
      if (builder != null) {
        builder.expand(REFRESH_EXPANSION_X,REFRESH_EXPANSION_Y);
        Envelope refreshBounds=builder.getEnvelope();
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"" + refreshBounds);
        }
        shapePane.updateView(refreshBounds);
      }
 else {
        logger.debug(""String_Node_Str"");
      }
      builder=null;
      Iterator<ISelection> newIter=event.newSelectionIter();
      while (newIter.hasNext()) {
        ISelection seln=newIter.next();
        Envelope bounds=seln.getPrimitiveController().getDrawnBounds();
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"" + seln.getPrimitiveController().getDrawnBounds());
        }
        if (builder == null) {
          builder=new EnvelopeBuilder(bounds);
        }
 else {
          builder.union(bounds);
        }
      }
      if (builder != null) {
        builder.expand(REFRESH_EXPANSION_X,REFRESH_EXPANSION_Y);
        Envelope refreshBounds=builder.getEnvelope();
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"" + refreshBounds);
        }
        shapePane.updateView(refreshBounds);
      }
 else {
        logger.debug(""String_Node_Str"");
      }
    }
  }
;
  this.revalidate();
  this.initialise();
}","private void setUpEditorViews(IModel canvas){
  this.selectionRecord=new SelectionRecord(viewModel);
  this.feedbackModel=new FeedbackModel(selectionRecord);
  this.shapePane=new ShapePane();
  this.shapePane.addLayer(new DomainModelLayer(viewModel));
  this.shapePane.addLayer(new SelectionLayer(selectionRecord));
  this.shapePane.addLayer(new FeedbackLayer(feedbackModel));
  Envelope canvasBounds=this.viewModel.getCanvasBounds();
  this.shapePane.setPaneBounds(canvasBounds);
  scrollPane=new JScrollPane((ShapePane)this.shapePane,ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED,ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
  scrollPane.getVerticalScrollBar().setUnitIncrement(16);
  scrollPane.setFocusable(true);
  scrollPane.setWheelScrollingEnabled(true);
  this.editBehaviourController=new ViewBehaviourController(shapePane,new OperationFactory(this.shapePane,this.feedbackModel,this.selectionRecord,viewModel,this.commandStack));
  INotationSubsystem notationSubsystem=canvas.getNotationSubsystem();
  this.palettePane=new PalettePanel(notationSubsystem,editBehaviourController);
  this.add(palettePane,BorderLayout.LINE_START);
  this.add(scrollPane,BorderLayout.CENTER);
  this.selectionChangeListener=new ISelectionChangeListener(){
    @Override public void selectionChanged(    ISelectionChangeEvent event){
      EnvelopeBuilder builder=null;
      Iterator<ISelection> oldIter=event.oldSelectionIter();
      while (oldIter.hasNext()) {
        ISelection seln=oldIter.next();
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"" + seln.getPrimitiveController().getDrawnBounds());
        }
        Envelope bounds=seln.getPrimitiveController().getDrawnBounds();
        if (builder == null) {
          builder=new EnvelopeBuilder(bounds);
        }
 else {
          builder.union(bounds);
        }
      }
      if (builder != null) {
        builder.expand(REFRESH_EXPANSION_X,REFRESH_EXPANSION_Y);
        Envelope refreshBounds=builder.getEnvelope();
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"" + refreshBounds);
        }
        shapePane.updateView(refreshBounds);
      }
 else {
        logger.debug(""String_Node_Str"");
      }
      builder=null;
      Iterator<ISelection> newIter=event.newSelectionIter();
      while (newIter.hasNext()) {
        ISelection seln=newIter.next();
        Envelope bounds=seln.getPrimitiveController().getDrawnBounds();
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"" + seln.getPrimitiveController().getDrawnBounds());
        }
        if (builder == null) {
          builder=new EnvelopeBuilder(bounds);
        }
 else {
          builder.union(bounds);
        }
      }
      if (builder != null) {
        builder.expand(REFRESH_EXPANSION_X,REFRESH_EXPANSION_Y);
        Envelope refreshBounds=builder.getEnvelope();
        if (logger.isTraceEnabled()) {
          logger.trace(""String_Node_Str"" + refreshBounds);
        }
        shapePane.updateView(refreshBounds);
      }
 else {
        logger.debug(""String_Node_Str"");
      }
    }
  }
;
  this.revalidate();
  this.initialise();
}"
24475,"public PalettePanel(INotationSubsystem notationSubsystem,final IViewBehaviourController editBehaviourController){
  final ButtonGroup paletteGroup=new ButtonGroup();
  JPanel selectionButtonPanel=new JPanel();
  selectionButtonPanel.setLayout(new BoxLayout(selectionButtonPanel,BoxLayout.PAGE_AXIS));
  final JButton selectionButton=new JButton(""String_Node_Str"");
  ImageIcon selectionIcon=createImageIcon(""String_Node_Str"");
  selectionButton.setIcon(selectionIcon);
  paletteGroup.add(selectionButton);
  selectionButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      editBehaviourController.setSelectionMode();
      paletteGroup.setSelected(selectionButton.getModel(),true);
    }
  }
);
  selectionButtonPanel.add(selectionButton);
  this.add(selectionButtonPanel);
  JPanel shapeButtonPanel=new JPanel();
  this.palettePane=new JScrollPane(shapeButtonPanel);
  this.palettePane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  shapeButtonPanel.setLayout(new BoxLayout(shapeButtonPanel,BoxLayout.PAGE_AXIS));
  ShapeIconGenerator iconGenerator=new ShapeIconGenerator();
  iconGenerator.setBounds(new Envelope(0,0,16,16));
  Iterator<IShapeObjectType> shapeTypeIterator=notationSubsystem.getSyntaxService().shapeTypeIterator();
  while (shapeTypeIterator.hasNext()) {
    final IShapeObjectType shapeType=shapeTypeIterator.next();
    iconGenerator.setObjectType(shapeType);
    iconGenerator.generateImage();
    iconGenerator.generateIcon();
    final JButton shapeButton=new JButton(iconGenerator.getIcon());
    shapeButton.setText(shapeType.getName());
    shapeButton.setToolTipText(shapeType.getDescription());
    shapeButtonPanel.add(shapeButton);
    paletteGroup.add(shapeButton);
    shapeButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        editBehaviourController.setShapeCreationMode(shapeType);
        paletteGroup.setSelected(shapeButton.getModel(),true);
      }
    }
);
  }
  JPanel linkButtonPanel=new JPanel();
  linkButtonPanel.setLayout(new BoxLayout(linkButtonPanel,BoxLayout.PAGE_AXIS));
  this.linkScrollPanel=new JScrollPane(linkButtonPanel);
  this.linkScrollPanel.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  LinkIconGenerator linkIconGenerator=new LinkIconGenerator();
  Iterator<ILinkObjectType> linkTypeIterator=notationSubsystem.getSyntaxService().linkTypeIterator();
  linkIconGenerator.setBounds(new Envelope(0.0,0.0,64.0,16.0));
  while (linkTypeIterator.hasNext()) {
    final ILinkObjectType linkType=linkTypeIterator.next();
    linkIconGenerator.setObjectType(linkType);
    linkIconGenerator.generateImage();
    linkIconGenerator.generateIcon();
    final JButton linkButton=new JButton(linkIconGenerator.getIcon());
    linkButton.setText(linkType.getName());
    linkButton.setToolTipText(linkType.getDescription());
    linkButtonPanel.add(linkButton);
    linkButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        editBehaviourController.setLinkCreationMode(linkType);
        paletteGroup.setSelected(linkButton.getModel(),true);
      }
    }
);
  }
  this.setLayout(new BoxLayout(this,BoxLayout.PAGE_AXIS));
  this.splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,this.palettePane,this.linkScrollPanel);
  this.splitPane.setOneTouchExpandable(true);
  this.splitPane.setDividerLocation(250);
  this.add(this.splitPane);
  paletteGroup.setSelected(selectionButton.getModel(),true);
  editBehaviourController.addViewBehaviourModeChangeListener(new IViewBehaviourModeChangeListener(){
    @Override public void viewModeChange(    IViewBehaviourModeChangeEvent e){
      if (e.getNewModeType().equals(ModeType.SELECTION)) {
        paletteGroup.setSelected(selectionButton.getModel(),true);
      }
    }
  }
);
}","public PalettePanel(INotationSubsystem notationSubsystem,final IViewBehaviourController editBehaviourController){
  final ButtonGroup paletteGroup=new ButtonGroup();
  JPanel selectionButtonPanel=new JPanel();
  selectionButtonPanel.setLayout(new BoxLayout(selectionButtonPanel,BoxLayout.PAGE_AXIS));
  final JButton selectionButton=new JButton(""String_Node_Str"");
  ImageIcon selectionIcon=createImageIcon(""String_Node_Str"");
  selectionButton.setIcon(selectionIcon);
  paletteGroup.add(selectionButton);
  selectionButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      editBehaviourController.setSelectionMode();
      paletteGroup.setSelected(selectionButton.getModel(),true);
    }
  }
);
  selectionButtonPanel.add(selectionButton);
  this.add(selectionButtonPanel);
  JPanel shapeButtonPanel=new JPanel();
  this.palettePane=new JScrollPane(shapeButtonPanel);
  this.palettePane.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  shapeButtonPanel.setLayout(new BoxLayout(shapeButtonPanel,BoxLayout.PAGE_AXIS));
  ShapeIconGenerator iconGenerator=new ShapeIconGenerator();
  iconGenerator.setBounds(new Envelope(0,0,16,16));
  Iterator<IShapeObjectType> shapeTypeIterator=notationSubsystem.getSyntaxService().shapeTypeIterator();
  while (shapeTypeIterator.hasNext()) {
    final IShapeObjectType shapeType=shapeTypeIterator.next();
    iconGenerator.setObjectType(shapeType);
    iconGenerator.generateImage();
    iconGenerator.generateIcon();
    final JButton shapeButton=new JButton(iconGenerator.getIcon());
    shapeButton.setText(shapeType.getName());
    shapeButton.setToolTipText(shapeType.getDescription());
    shapeButtonPanel.add(shapeButton);
    paletteGroup.add(shapeButton);
    shapeButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        editBehaviourController.setShapeCreationMode(shapeType);
        paletteGroup.setSelected(shapeButton.getModel(),true);
      }
    }
);
  }
  JPanel linkButtonPanel=new JPanel();
  linkButtonPanel.setLayout(new BoxLayout(linkButtonPanel,BoxLayout.PAGE_AXIS));
  this.linkScrollPanel=new JScrollPane(linkButtonPanel);
  this.linkScrollPanel.setHorizontalScrollBarPolicy(ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
  LinkIconGenerator linkIconGenerator=new LinkIconGenerator();
  Iterator<ILinkObjectType> linkTypeIterator=notationSubsystem.getSyntaxService().linkTypeIterator();
  linkIconGenerator.setBounds(new Envelope(0.0,0.0,64.0,16.0));
  while (linkTypeIterator.hasNext()) {
    final ILinkObjectType linkType=linkTypeIterator.next();
    linkIconGenerator.setObjectType(linkType);
    linkIconGenerator.generateImage();
    linkIconGenerator.generateIcon();
    final JButton linkButton=new JButton(linkIconGenerator.getIcon());
    linkButton.setText(linkType.getName());
    linkButton.setToolTipText(linkType.getDescription());
    linkButtonPanel.add(linkButton);
    linkButton.addActionListener(new ActionListener(){
      @Override public void actionPerformed(      ActionEvent e){
        editBehaviourController.setLinkCreationMode(linkType);
        paletteGroup.setSelected(linkButton.getModel(),true);
      }
    }
);
  }
  this.setLayout(new BoxLayout(this,BoxLayout.PAGE_AXIS));
  this.splitPane=new JSplitPane(JSplitPane.VERTICAL_SPLIT,this.palettePane,this.linkScrollPanel);
  this.splitPane.setOneTouchExpandable(true);
  this.splitPane.setDividerLocation(250);
  this.add(this.splitPane);
  editBehaviourController.addViewBehaviourModeChangeListener(new IViewBehaviourModeChangeListener(){
    @Override public void viewModeChange(    IViewBehaviourModeChangeEvent e){
      if (e.getNewModeType().equals(ModeType.SELECTION)) {
        paletteGroup.setSelected(selectionButton.getModel(),true);
      }
    }
  }
);
  paletteGroup.setSelected(selectionButton.getModel(),true);
}"
24476,"public void openFile(File file){
  try {
    INotationSubsystemPool subsystemPool=new NotationSubsystemPool();
    IXmlPersistenceManager canvasPersistenceManager=new FileXmlCanvasPersistenceManager(subsystemPool);
    InputStream in=new FileInputStream(file);
    canvasPersistenceManager.readCanvasFromStream(in);
    in.close();
    insp.renderModel(canvasPersistenceManager.getCurrentModel());
  }
 catch (  IOException ex) {
    System.err.println(""String_Node_Str"");
    System.err.println();
  }
}","public void openFile(File file){
  try {
    IXmlPersistenceManager canvasPersistenceManager=new FileXmlCanvasPersistenceManager(subsystemPool);
    InputStream in=new FileInputStream(file);
    canvasPersistenceManager.readCanvasFromStream(in);
    in.close();
    insp.renderModel(canvasPersistenceManager.getCurrentModel());
  }
 catch (  IOException ex) {
    System.err.println(""String_Node_Str"");
    System.err.println();
  }
}"
24477,"private void initFileMenu(){
  JMenu fileMenu=new JMenu(""String_Node_Str"");
  fileMenu.setMnemonic(KeyEvent.VK_F);
  menuBar.add(fileMenu);
  JMenuItem fileMenuOpenItem=new JMenuItem(""String_Node_Str"",KeyEvent.VK_O);
  fileMenuOpenItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,ActionEvent.ALT_MASK));
  fileMenuOpenItem.getAccessibleContext().setAccessibleDescription(""String_Node_Str"");
  fileMenuOpenItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      JFileChooser chooser=new JFileChooser();
      chooser.setCurrentDirectory(new File(System.getProperty(""String_Node_Str"")));
      chooser.setFileFilter(new FileFilter(){
        @Override public boolean accept(        File f){
          String fileName=f.getName();
          return Pattern.matches(""String_Node_Str"",fileName);
        }
        @Override public String getDescription(){
          return ""String_Node_Str"";
        }
      }
);
      int response=chooser.showOpenDialog(VisualEditor.this);
      if (response == JFileChooser.APPROVE_OPTION) {
        File openFile=chooser.getSelectedFile();
        openFile(openFile);
      }
    }
  }
);
  fileMenu.add(fileMenuOpenItem);
  JMenuItem fileMenuExitItem=new JMenuItem(""String_Node_Str"",KeyEvent.VK_X);
  fileMenuExitItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,ActionEvent.ALT_MASK));
  fileMenuExitItem.getAccessibleContext().setAccessibleDescription(""String_Node_Str"");
  fileMenuExitItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      processEvent(new WindowEvent(VisualEditor.this,WindowEvent.WINDOW_CLOSING));
    }
  }
);
  fileMenu.add(fileMenuExitItem);
}","private void initFileMenu(){
  JMenu fileMenu=new JMenu(""String_Node_Str"");
  fileMenu.setMnemonic(KeyEvent.VK_F);
  menuBar.add(fileMenu);
  JMenuItem fileMenuNewItem=new JMenuItem(""String_Node_Str"",KeyEvent.VK_N);
  fileMenuNewItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N,ActionEvent.ALT_MASK));
  fileMenuNewItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      String selection=(String)JOptionPane.showInputDialog(VisualEditor.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.PLAIN_MESSAGE,null,nsMap.keySet().toArray(),""String_Node_Str"");
      IModelFactory modelFactory=new ModelFactory();
      INotationSubsystem selectedNs=nsMap.get(selection);
      modelFactory.setNotationSubsystem(selectedNs);
      modelFactory.setName(""String_Node_Str"");
      IModel newModel=modelFactory.createModel();
      insp.renderModel(newModel);
    }
  }
);
  fileMenu.add(fileMenuNewItem);
  JMenuItem fileMenuOpenItem=new JMenuItem(""String_Node_Str"",KeyEvent.VK_O);
  fileMenuOpenItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,ActionEvent.ALT_MASK));
  fileMenuOpenItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      JFileChooser chooser=new JFileChooser();
      chooser.setCurrentDirectory(new File(System.getProperty(""String_Node_Str"")));
      chooser.setFileFilter(new FileFilter(){
        @Override public boolean accept(        File f){
          String fileName=f.getName();
          return Pattern.matches(""String_Node_Str"",fileName);
        }
        @Override public String getDescription(){
          return ""String_Node_Str"";
        }
      }
);
      int response=chooser.showOpenDialog(VisualEditor.this);
      if (response == JFileChooser.APPROVE_OPTION) {
        File openFile=chooser.getSelectedFile();
        openFile(openFile);
      }
    }
  }
);
  fileMenu.add(fileMenuOpenItem);
  JMenuItem fileMenuExitItem=new JMenuItem(""String_Node_Str"",KeyEvent.VK_X);
  fileMenuExitItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,ActionEvent.ALT_MASK));
  fileMenuExitItem.getAccessibleContext().setAccessibleDescription(""String_Node_Str"");
  fileMenuExitItem.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      processEvent(new WindowEvent(VisualEditor.this,WindowEvent.WINDOW_CLOSING));
    }
  }
);
  fileMenu.add(fileMenuExitItem);
}"
24478,"public VisualEditor(String title){
  super(title);
  this.setLayout(new BorderLayout());
  this.menuBar=new JMenuBar();
  initFileMenu();
  this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  this.addWindowListener(new WindowListener(){
    @Override public void windowActivated(    WindowEvent e){
    }
    @Override public void windowClosed(    WindowEvent e){
    }
    @Override public void windowClosing(    WindowEvent e){
      int reply=JOptionPane.showConfirmDialog(VisualEditor.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION);
      if (reply == JOptionPane.YES_OPTION) {
        System.exit(0);
      }
    }
    @Override public void windowDeactivated(    WindowEvent e){
    }
    @Override public void windowDeiconified(    WindowEvent e){
    }
    @Override public void windowIconified(    WindowEvent e){
    }
    @Override public void windowOpened(    WindowEvent e){
    }
  }
);
  this.setJMenuBar(menuBar);
  this.insp=new PathwayEditor();
  this.insp.setPreferredSize(new Dimension(WIDTH,HEIGHT));
  this.add(this.insp,BorderLayout.CENTER);
  this.pack();
  this.setLocationByPlatform(true);
  this.setVisible(true);
}","public VisualEditor(String title){
  super(title);
  this.setLayout(new BorderLayout());
  this.menuBar=new JMenuBar();
  initFileMenu();
  this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
  this.addWindowListener(new WindowListener(){
    @Override public void windowActivated(    WindowEvent e){
    }
    @Override public void windowClosed(    WindowEvent e){
    }
    @Override public void windowClosing(    WindowEvent e){
      int reply=JOptionPane.showConfirmDialog(VisualEditor.this,""String_Node_Str"",""String_Node_Str"",JOptionPane.YES_NO_OPTION);
      if (reply == JOptionPane.YES_OPTION) {
        System.exit(0);
      }
    }
    @Override public void windowDeactivated(    WindowEvent e){
    }
    @Override public void windowDeiconified(    WindowEvent e){
    }
    @Override public void windowIconified(    WindowEvent e){
    }
    @Override public void windowOpened(    WindowEvent e){
    }
  }
);
  this.setJMenuBar(menuBar);
  this.insp=new PathwayEditor();
  this.insp.setPreferredSize(new Dimension(WIDTH,HEIGHT));
  this.add(this.insp,BorderLayout.CENTER);
  this.pack();
  this.setLocationByPlatform(true);
  this.setVisible(true);
  subsystemPool=new NotationSubsystemPool();
  this.nsMap=new HashMap<String,INotationSubsystem>();
  Iterator<INotationSubsystem> notIter=subsystemPool.subsystemIterator();
  while (notIter.hasNext()) {
    INotationSubsystem ns=notIter.next();
    this.nsMap.put(ns.getNotation().getDisplayName(),ns);
  }
}"
24479,"@Override public void deactivate(){
  this.currentStateController.deactivate(shapePane);
  this.currentStateController.removeViewBehaviourStateHandlerChangeListener(this.viewBehaviourSelectionStateHandlerChangeListener);
  this.activated=false;
}","@Override public void deactivate(){
  this.shapeCreationStateController.removeViewBehaviourStateHandlerChangeListener(this.viewBehaviourShapeCreationStateHandlerChangeListener);
  this.linkCreationStateController.removeViewBehaviourStateHandlerChangeListener(this.viewBehaviourLinkCreationStateHandlerChangeListener);
  this.selectionStateController.removeViewBehaviourStateHandlerChangeListener(this.viewBehaviourSelectionStateHandlerChangeListener);
  this.currentStateController.deactivate(shapePane);
  this.activated=false;
}"
24480,"@Override public void activate(){
  this.setSelectionMode();
  this.shapeCreationStateController.addViewBehaviourStateHandlerChangeListener(this.viewBehaviourShapeCreationStateHandlerChangeListener);
  this.linkCreationStateController.addViewBehaviourStateHandlerChangeListener(this.viewBehaviourLinkCreationStateHandlerChangeListener);
  this.selectionStateController.addViewBehaviourStateHandlerChangeListener(this.viewBehaviourSelectionStateHandlerChangeListener);
  this.activated=true;
}","@Override public void activate(){
  this.currentStateController.activate(shapePane);
  this.shapeCreationStateController.addViewBehaviourStateHandlerChangeListener(this.viewBehaviourShapeCreationStateHandlerChangeListener);
  this.linkCreationStateController.addViewBehaviourStateHandlerChangeListener(this.viewBehaviourLinkCreationStateHandlerChangeListener);
  this.selectionStateController.addViewBehaviourStateHandlerChangeListener(this.viewBehaviourSelectionStateHandlerChangeListener);
  this.activated=true;
}"
24481,"@Override public void execute(){
  ICompoundGraph graph=this.srcShape.getGraphElement().getGraph();
  this.originalState=graph.getCurrentState();
  ILinkEdgeFactory fact=new LinkEdgeFactoryFacade(graph.edgeFactory());
  fact.setShapeNodePair(srcShape,tgtShape);
  fact.setObjectType(linkObjectType);
  ILinkEdge link=fact.createLinkEdge();
  ILinkAttribute linkAttribute=link.getAttribute();
  linkAttribute.getSourceTerminus().setLocation(linkPointDefinition.getSrcAnchorPosition());
  linkAttribute.getTargetTerminus().setLocation(linkPointDefinition.getTgtAnchorPosition());
  Iterator<Point> ptIter=linkPointDefinition.pointIterator();
  IBendPointContainer bpContainer=linkAttribute.getBendPointContainer();
  while (ptIter.hasNext()) {
    Point pt=ptIter.next();
    bpContainer.createNewBendPoint(pt);
  }
  this.createdState=graph.getCurrentState();
}","@Override public void execute(){
  ICompoundGraph graph=this.srcShape.getGraphElement().getGraph();
  this.originalState=graph.getCurrentState();
  ILinkEdgeFactory fact=new LinkEdgeFactoryFacade(graph.edgeFactory());
  fact.setShapeNodePair(srcShape,tgtShape);
  fact.setObjectType(linkObjectType);
  ILinkEdge link=fact.createLinkEdge();
  ILinkAttribute linkAttribute=link.getAttribute();
  linkAttribute.getSourceTerminus().setLocation(linkPointDefinition.getSrcAnchorPosition());
  linkAttribute.getTargetTerminus().setLocation(linkPointDefinition.getTgtAnchorPosition());
  Iterator<Point> ptIter=linkPointDefinition.bendPointIterator();
  IBendPointContainer bpContainer=linkAttribute.getBendPointContainer();
  while (ptIter.hasNext()) {
    Point pt=ptIter.next();
    bpContainer.createNewBendPoint(pt);
  }
  this.createdState=graph.getCurrentState();
}"
24482,"@Override public Envelope getCanvasBounds(){
  double minX=Double.MAX_VALUE;
  double maxX=Double.MIN_VALUE;
  double minY=Double.MAX_VALUE;
  double maxY=Double.MIN_VALUE;
  Iterator<INodeController> nodeIter=this.nodeControllerIterator();
  while (nodeIter.hasNext()) {
    INodeController nodeController=nodeIter.next();
    if (!(nodeController instanceof IRootController)) {
      Point nodeOrigin=nodeController.getConvexHull().getEnvelope().getOrigin();
      minX=Math.min(minX,nodeOrigin.getX());
      minY=Math.min(minY,nodeOrigin.getY());
      Point nodeDiagonal=nodeController.getConvexHull().getEnvelope().getDiagonalCorner();
      maxX=Math.max(maxX,nodeDiagonal.getX());
      maxY=Math.max(maxY,nodeDiagonal.getY());
    }
  }
  Iterator<ILinkController> edgeIter=this.linkControllerIterator();
  while (edgeIter.hasNext()) {
    ILinkController linkController=edgeIter.next();
    ILinkPointDefinition defn=linkController.getLinkDefinition();
    Iterator<Point> pointIter=defn.pointIterator();
    while (pointIter.hasNext()) {
      Point linkPoint=pointIter.next();
      minX=Math.min(minX,linkPoint.getX());
      minY=Math.min(minY,linkPoint.getY());
      maxX=Math.max(maxX,linkPoint.getX());
      maxY=Math.max(maxY,linkPoint.getY());
    }
  }
  return new Envelope(minX,minY,maxX - minX,maxY - minY);
}","@Override public Envelope getCanvasBounds(){
  Envelope retVal=DEFAULT_CANVAS_BOUNDS;
  double minX=Double.MAX_VALUE;
  double maxX=-Double.MAX_VALUE;
  double minY=Double.MAX_VALUE;
  double maxY=-Double.MAX_VALUE;
  Iterator<INodeController> nodeIter=this.nodeControllerIterator();
  boolean onlyRoot=true;
  while (nodeIter.hasNext()) {
    INodeController nodeController=nodeIter.next();
    if (!(nodeController instanceof IRootController)) {
      onlyRoot=false;
      Point nodeOrigin=nodeController.getConvexHull().getEnvelope().getOrigin();
      minX=Math.min(minX,nodeOrigin.getX());
      minY=Math.min(minY,nodeOrigin.getY());
      Point nodeDiagonal=nodeController.getConvexHull().getEnvelope().getDiagonalCorner();
      maxX=Math.max(maxX,nodeDiagonal.getX());
      maxY=Math.max(maxY,nodeDiagonal.getY());
    }
  }
  if (!onlyRoot) {
    Iterator<ILinkController> edgeIter=this.linkControllerIterator();
    while (edgeIter.hasNext()) {
      ILinkController linkController=edgeIter.next();
      ILinkPointDefinition defn=linkController.getLinkDefinition();
      Iterator<Point> pointIter=defn.pointIterator();
      while (pointIter.hasNext()) {
        Point linkPoint=pointIter.next();
        minX=Math.min(minX,linkPoint.getX());
        minY=Math.min(minY,linkPoint.getY());
        maxX=Math.max(maxX,linkPoint.getX());
        maxY=Math.max(maxY,linkPoint.getY());
      }
    }
    retVal=new Envelope(minX,minY,maxX - minX,maxY - minY);
  }
  return retVal;
}"
24483,"@Override public void updateView(Envelope refreshBounds){
  Envelope updateBounds=refreshBounds.deltaResize(-RESIZE_DIM,-RESIZE_DIM,2 * RESIZE_DIM,2 * RESIZE_DIM);
  Dimension prefSize=new Dimension();
  prefSize.setSize(canvasBounds.getDimension().getWidth() + 2 * PANE_BORDER,canvasBounds.getDimension().getHeight() + 2 * PANE_BORDER);
  this.setPreferredSize(prefSize);
  Rectangle bounds=getAdjustedBounds(updateBounds);
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"" + updateBounds + ""String_Node_Str""+ bounds);
  }
  revalidate();
  repaint();
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"" + this.isFocusable());
    logger.trace(""String_Node_Str"" + this.hasFocus());
  }
}","@Override public void updateView(Envelope refreshBounds){
  Dimension prefSize=new Dimension();
  prefSize.setSize(canvasBounds.getDimension().getWidth() + 2 * PANE_BORDER,canvasBounds.getDimension().getHeight() + 2 * PANE_BORDER);
  this.setPreferredSize(prefSize);
  revalidate();
  repaint();
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"" + this.isFocusable());
    logger.trace(""String_Node_Str"" + this.hasFocus());
  }
}"
24484,"@Override public void startCreationDrag(Point origin){
  this.canCreationSucceed=false;
  this.startLocation=origin;
  calculateBounds(origin);
  feedbackModel.clear();
  IFeedbackNode node=feedbackModel.getFeedbackNodeBuilder().createFromDrawingNodeObjectType(this.shapeObjectType,new Envelope(origin,new Dimension(0.1,0.1)));
  node.setLineColour(RGB.RED);
  node.setLineStyle(LineStyle.SOLID);
  node.setLineWidth(1.0);
  this.shapePane.updateView();
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"" + origin);
  }
}","@Override public void startCreationDrag(Point origin){
  this.canCreationSucceed=false;
  this.startLocation=origin;
  calculateBounds(origin);
  feedbackModel.clear();
  if (logger.isTraceEnabled()) {
    logger.trace(""String_Node_Str"" + origin);
  }
  IFeedbackNode node=feedbackModel.getFeedbackNodeBuilder().createFromDrawingNodeObjectType(this.shapeObjectType,new Envelope(origin,new Dimension(0.1,0.1)));
  node.setLineColour(RGB.RED);
  node.setLineStyle(LineStyle.SOLID);
  node.setLineWidth(1.0);
  this.shapePane.updateView();
}"
24485,"@Override public Envelope getBounds(){
  double minX=Double.MAX_VALUE;
  double maxX=Double.MIN_VALUE;
  double minY=Double.MAX_VALUE;
  double maxY=Double.MIN_VALUE;
  final double halfLineHeight=this.lineWidth + LINE_HIT_TOLERENCE;
  Iterator<Point> pointIter=this.pointList.iterator();
  while (pointIter.hasNext()) {
    Point p=pointIter.next();
    minX=Math.min(minX,p.getX() - halfLineHeight);
    maxX=Math.max(maxX,p.getX() + halfLineHeight);
    minY=Math.min(minY,p.getY() - halfLineHeight);
    maxY=Math.max(maxY,p.getY() + halfLineHeight);
  }
  return new Envelope(minX,minY,maxX - minX,maxY - minY);
}","@Override public Envelope getBounds(){
  double minX=Double.MAX_VALUE;
  double maxX=-Double.MAX_VALUE;
  double minY=Double.MAX_VALUE;
  double maxY=-Double.MAX_VALUE;
  final double halfLineHeight=this.lineWidth + LINE_HIT_TOLERENCE;
  Iterator<Point> pointIter=this.pointList.iterator();
  while (pointIter.hasNext()) {
    Point p=pointIter.next();
    minX=Math.min(minX,p.getX());
    maxX=Math.max(maxX,p.getX());
    minY=Math.min(minY,p.getY());
    maxY=Math.max(maxY,p.getY());
  }
  return new Envelope(minX - halfLineHeight,minY - halfLineHeight,maxX - minX + halfLineHeight,maxY - minY + halfLineHeight);
}"
24486,"@Override public boolean containsPoint(Point p){
  boolean retVal=false;
  Iterator<LineSegment> lineSegIter=this.lineSegIterator();
  while (lineSegIter.hasNext() && !retVal) {
    LineSegment seg=lineSegIter.next();
    retVal=seg.intersectsWithCircle(p,LINE_HIT_TOLERENCE);
    if (logger.isTraceEnabled() && retVal) {
      logger.trace(""String_Node_Str"" + p + ""String_Node_Str""+ seg);
    }
  }
  return retVal;
}","@Override public boolean containsPoint(Point p){
  boolean retVal=false;
  Iterator<LineSegment> lineSegIter=this.lineSegIterator();
  while (lineSegIter.hasNext() && !retVal) {
    LineSegment seg=lineSegIter.next();
    retVal=seg.intersectsWithCircle(p,MOUSE_HOT_SPHERE_RADIUS);
    if (logger.isTraceEnabled() && retVal) {
      logger.trace(""String_Node_Str"" + p + ""String_Node_Str""+ seg);
    }
  }
  return retVal;
}"
24487,"public LinkController(IViewControllerModel localViewControllerStore,ILinkEdge localLinkAttribute,int index){
  super(localViewControllerStore,index);
  this.linkAttribute=localLinkAttribute;
  this.parentAttribute=(ICanvasElementAttribute)this.linkAttribute.getGraphElement().getParent().getAttribute();
  this.linkDefinition=new LinkPointDefinition(linkAttribute.getAttribute());
  this.srcTermChangeListener=new ILinkTerminusChangeListener(){
    @Override public void valueChangeEvent(    ILinkTerminusValueChangeEvent e){
      if (e.getChangeType().equals(LinkTerminusChangeType.LOCATION)) {
        Envelope originalDrawnBounds=getDrawnBounds();
        Point newLocation=(Point)e.getNewValue();
        linkDefinition.setSrcAnchorPosition(newLocation);
        notifyDrawnBoundsChanged(originalDrawnBounds,getDrawnBounds());
      }
    }
  }
;
  this.tgtTermChangeListener=new ILinkTerminusChangeListener(){
    @Override public void valueChangeEvent(    ILinkTerminusValueChangeEvent e){
      if (e.getChangeType().equals(LinkTerminusChangeType.LOCATION)) {
        Envelope originalDrawnBounds=getDrawnBounds();
        Point newLocation=(Point)e.getNewValue();
        linkDefinition.setTgtAnchorPosition(newLocation);
        notifyDrawnBoundsChanged(originalDrawnBounds,getDrawnBounds());
      }
    }
  }
;
  this.parentDrawingElementPropertyChangeListener=new ICanvasAttributeChangeListener(){
    @Override public void propertyChange(    ICanvasAttributePropertyChangeEvent e){
    }
    @Override public void elementTranslated(    ICanvasAttributeTranslationEvent e){
      linkAttribute.getAttribute().translate(e.getTranslationDelta());
    }
    @Override public void nodeResized(    ICanvasAttributeResizedEvent e){
    }
  }
;
  this.bpChangeListener=new IBendPointChangeListener(){
    @Override public void locationChange(    IBendPointLocationChangeEvent e){
      Point bpPosn=e.getNewPosition();
      int idx=e.getBendPointIndex();
      linkDefinition.setBendPointPosition(idx,bpPosn);
      updateLinksToBendPoints(idx,bpPosn);
    }
    @Override public void propertyChange(    IBendPointChangeEvent e){
      Envelope originalDrawnBounds=getDrawnBounds();
      if (e.getChangeType().equals(BendPointChange.BEND_POINT_ADDED)) {
        int bpIdx=e.getNewIndexPos();
        Point bpPosn=e.getBendPoint();
        linkDefinition.addNewBendPoint(bpIdx,bpPosn);
        updateLinksToBendPoints(bpIdx,bpPosn);
      }
 else       if (e.getChangeType().equals(BendPointChange.BEND_POINT_REMOVED)) {
        int bpIdx=e.getOldIndexPos();
        linkDefinition.removeBendPoint(bpIdx);
        if (bpIdx < linkDefinition.numBendPoints()) {
          Point bpPosn=linkAttribute.getAttribute().getBendPointContainer().getBendPoint(bpIdx);
          updateLinksToBendPoints(bpIdx,bpPosn);
        }
 else         if (linkDefinition.numBendPoints() == 0) {
          updateAnchorPoints();
        }
 else {
          int lastBpIdx=linkDefinition.numBendPoints() - 1;
          Point bpPosn=linkAttribute.getAttribute().getBendPointContainer().getBendPoint(lastBpIdx);
          updateLinksToBendPoints(lastBpIdx,bpPosn);
        }
      }
      notifyDrawnBoundsChanged(originalDrawnBounds,getDrawnBounds());
    }
  }
;
}","public LinkController(IViewControllerModel localViewControllerStore,ILinkEdge localLinkAttribute,int index){
  super(localViewControllerStore,index);
  this.linkAttribute=localLinkAttribute;
  this.parentAttribute=(ICanvasElementAttribute)this.linkAttribute.getGraphElement().getParent().getAttribute();
  this.linkDefinition=new LinkPointDefinition(linkAttribute.getAttribute());
  this.srcTermChangeListener=new ILinkTerminusChangeListener(){
    @Override public void valueChangeEvent(    ILinkTerminusValueChangeEvent e){
      if (e.getChangeType().equals(LinkTerminusChangeType.LOCATION)) {
        Envelope originalDrawnBounds=getDrawnBounds();
        Point newLocation=(Point)e.getNewValue();
        linkDefinition.setSrcAnchorPosition(newLocation);
        notifyDrawnBoundsChanged(originalDrawnBounds,getDrawnBounds());
      }
    }
  }
;
  this.tgtTermChangeListener=new ILinkTerminusChangeListener(){
    @Override public void valueChangeEvent(    ILinkTerminusValueChangeEvent e){
      if (e.getChangeType().equals(LinkTerminusChangeType.LOCATION)) {
        Envelope originalDrawnBounds=getDrawnBounds();
        Point newLocation=(Point)e.getNewValue();
        linkDefinition.setTgtAnchorPosition(newLocation);
        notifyDrawnBoundsChanged(originalDrawnBounds,getDrawnBounds());
      }
    }
  }
;
  this.parentDrawingElementPropertyChangeListener=new ICanvasAttributeChangeListener(){
    @Override public void propertyChange(    ICanvasAttributePropertyChangeEvent e){
    }
    @Override public void elementTranslated(    ICanvasAttributeTranslationEvent e){
      linkAttribute.getAttribute().translate(e.getTranslationDelta());
    }
    @Override public void nodeResized(    ICanvasAttributeResizedEvent e){
    }
  }
;
  this.bpChangeListener=new IBendPointChangeListener(){
    @Override public void locationChange(    IBendPointLocationChangeEvent e){
      Point bpPosn=e.getNewPosition();
      int idx=e.getBendPointIndex();
      linkDefinition.setBendPointPosition(idx,bpPosn);
      updateLinksToBendPoints(idx,bpPosn);
    }
    @Override public void propertyChange(    IBendPointChangeEvent e){
      Envelope originalDrawnBounds=getDrawnBounds();
      if (e.getChangeType().equals(BendPointChange.BEND_POINT_ADDED)) {
        int bpIdx=e.getNewIndexPos();
        Point bpPosn=e.getBendPoint();
        linkDefinition.addNewBendPoint(bpIdx,bpPosn);
        updateLinksToBendPoints(bpIdx,bpPosn);
      }
 else       if (e.getChangeType().equals(BendPointChange.BEND_POINT_REMOVED)) {
        int bpIdx=e.getOldIndexPos();
        linkDefinition.removeBendPoint(bpIdx);
        if (bpIdx < linkDefinition.numBendPoints()) {
          Point bpPosn=linkAttribute.getAttribute().getBendPointContainer().getBendPoint(bpIdx);
          updateLinksToBendPoints(bpIdx,bpPosn);
        }
 else         if (linkDefinition.numBendPoints() == 0) {
          updateAnchorPoints();
        }
 else {
          int lastBpIdx=linkDefinition.numBendPoints() - 1;
          Point bpPosn=linkAttribute.getAttribute().getBendPointContainer().getBendPoint(lastBpIdx);
          updateLinksToBendPoints(lastBpIdx,bpPosn);
        }
      }
      notifyDrawnBoundsChanged(originalDrawnBounds,getDrawnBounds());
    }
  }
;
  linkAttributePropertyChangeListener=new ICanvasAttributeChangeListener(){
    @Override public void propertyChange(    ICanvasAttributePropertyChangeEvent e){
    }
    @Override public void elementTranslated(    ICanvasAttributeTranslationEvent e){
      linkDefinition.translate(e.getTranslationDelta());
    }
    @Override public void nodeResized(    ICanvasAttributeResizedEvent e){
    }
  }
;
  this.srcNodeListener=new ICanvasAttributeChangeListener(){
    @Override public void propertyChange(    ICanvasAttributePropertyChangeEvent e){
      if (e.getPropertyChange().equals(CanvasAttributePropertyChange.BOUNDS)) {
        if (!e.getAttribute().equals(parentAttribute)) {
          updateAnchorPoints();
        }
      }
    }
    @Override public void elementTranslated(    ICanvasAttributeTranslationEvent e){
    }
    @Override public void nodeResized(    ICanvasAttributeResizedEvent e){
    }
  }
;
  this.tgtNodeListener=new ICanvasAttributeChangeListener(){
    @Override public void propertyChange(    ICanvasAttributePropertyChangeEvent e){
      if (e.getPropertyChange().equals(CanvasAttributePropertyChange.BOUNDS)) {
        if (!e.getAttribute().equals(parentAttribute)) {
          updateAnchorPoints();
        }
      }
    }
    @Override public void elementTranslated(    ICanvasAttributeTranslationEvent e){
    }
    @Override public void nodeResized(    ICanvasAttributeResizedEvent e){
    }
  }
;
}"
24488,"@Override public void inactivate(){
  this.linkAttribute.getAttribute().getSourceTerminus().removeLinkTerminusChangeListener(srcTermChangeListener);
  this.linkAttribute.getAttribute().getTargetTerminus().removeLinkTerminusChangeListener(tgtTermChangeListener);
  this.linkAttribute.getAttribute().getBendPointContainer().removeChangeListener(this.bpChangeListener);
  this.parentAttribute.removeChangeListener(parentDrawingElementPropertyChangeListener);
  this.isActive=false;
}","@Override public void inactivate(){
  this.linkAttribute.getAttribute().getSourceTerminus().removeLinkTerminusChangeListener(srcTermChangeListener);
  this.linkAttribute.getAttribute().getTargetTerminus().removeLinkTerminusChangeListener(tgtTermChangeListener);
  this.linkAttribute.getAttribute().getBendPointContainer().removeChangeListener(this.bpChangeListener);
  this.parentAttribute.removeChangeListener(parentDrawingElementPropertyChangeListener);
  this.linkAttribute.getAttribute().removeChangeListener(linkAttributePropertyChangeListener);
  ((IShapeAttribute)this.linkAttribute.getSourceShape().getAttribute()).removeChangeListener(srcNodeListener);
  ((IShapeAttribute)this.linkAttribute.getTargetShape().getAttribute()).removeChangeListener(tgtNodeListener);
  this.isActive=false;
}"
24489,"@Override public void elementTranslated(ICanvasAttributeTranslationEvent e){
  linkAttribute.getAttribute().translate(e.getTranslationDelta());
}","@Override public void elementTranslated(ICanvasAttributeTranslationEvent e){
}"
24490,"@Override public void activate(){
  this.parentAttribute.addChangeListener(parentDrawingElementPropertyChangeListener);
  this.linkAttribute.getAttribute().getSourceTerminus().addLinkTerminusChangeListener(srcTermChangeListener);
  this.linkAttribute.getAttribute().getTargetTerminus().addLinkTerminusChangeListener(tgtTermChangeListener);
  this.linkAttribute.getAttribute().getBendPointContainer().addChangeListener(this.bpChangeListener);
  this.isActive=true;
}","@Override public void activate(){
  this.parentAttribute.addChangeListener(parentDrawingElementPropertyChangeListener);
  this.linkAttribute.getAttribute().getSourceTerminus().addLinkTerminusChangeListener(srcTermChangeListener);
  this.linkAttribute.getAttribute().getTargetTerminus().addLinkTerminusChangeListener(tgtTermChangeListener);
  this.linkAttribute.getAttribute().getBendPointContainer().addChangeListener(this.bpChangeListener);
  this.linkAttribute.getAttribute().addChangeListener(linkAttributePropertyChangeListener);
  ((IShapeAttribute)this.linkAttribute.getSourceShape().getAttribute()).addChangeListener(srcNodeListener);
  ((IShapeAttribute)this.linkAttribute.getTargetShape().getAttribute()).addChangeListener(tgtNodeListener);
  this.isActive=true;
}"
24491,"@Override public void propertyChange(IBendPointChangeEvent e){
  Envelope originalDrawnBounds=getDrawnBounds();
  if (e.getChangeType().equals(BendPointChange.BEND_POINT_ADDED)) {
    int bpIdx=e.getNewIndexPos();
    Point bpPosn=e.getBendPoint();
    linkDefinition.addNewBendPoint(bpIdx,bpPosn);
    updateLinksToBendPoints(bpIdx,bpPosn);
  }
 else   if (e.getChangeType().equals(BendPointChange.BEND_POINT_REMOVED)) {
    int bpIdx=e.getOldIndexPos();
    linkDefinition.removeBendPoint(bpIdx);
    if (bpIdx < linkDefinition.numBendPoints()) {
      Point bpPosn=linkAttribute.getAttribute().getBendPointContainer().getBendPoint(bpIdx);
      updateLinksToBendPoints(bpIdx,bpPosn);
    }
 else     if (linkDefinition.numBendPoints() == 0) {
      updateAnchorPoints();
    }
 else {
      int lastBpIdx=linkDefinition.numBendPoints() - 1;
      Point bpPosn=linkAttribute.getAttribute().getBendPointContainer().getBendPoint(lastBpIdx);
      updateLinksToBendPoints(lastBpIdx,bpPosn);
    }
  }
  notifyDrawnBoundsChanged(originalDrawnBounds,getDrawnBounds());
}","@Override public void propertyChange(ICanvasAttributePropertyChangeEvent e){
  if (e.getPropertyChange().equals(CanvasAttributePropertyChange.BOUNDS)) {
    if (!e.getAttribute().equals(parentAttribute)) {
      updateAnchorPoints();
    }
  }
}"
24492,"public ShapeController(IViewControllerModel viewModel,IShapeNode node,int index){
  super(viewModel,index);
  this.domainNode=node;
  this.parentAttribute=new DrawingElementFacade(this.domainNode.getGraphElement().getParent());
  this.figureController=new ShapeFigureControllerHelper(domainNode.getAttribute());
  figureController.createFigureController();
  shapePropertyChangeListener=new ICanvasAttributeChangeListener(){
    @Override public void propertyChange(    ICanvasAttributePropertyChangeEvent e){
      if (e.getPropertyChange().equals(CanvasAttributePropertyChange.LINE_COLOUR)) {
        figureController.getFigureController().setLineColour((RGB)e.getNewValue());
        figureController.refreshGraphicalAttributes();
      }
 else       if (e.getPropertyChange().equals(CanvasAttributePropertyChange.FILL_COLOUR)) {
        figureController.getFigureController().setFillColour((RGB)e.getNewValue());
        figureController.refreshGraphicalAttributes();
      }
 else       if (e.getPropertyChange().equals(CanvasAttributePropertyChange.LINE_WIDTH)) {
        Double newLineWidth=(Double)e.getNewValue();
        figureController.getFigureController().setLineWidth(newLineWidth);
        figureController.refreshGraphicalAttributes();
      }
 else       if (e.getPropertyChange().equals(CanvasAttributePropertyChange.BOUNDS)) {
        IShapeAttribute attribute=(IShapeAttribute)e.getAttribute();
        Envelope oldDrawnBounds=figureController.getFigureController().getConvexHull().getEnvelope();
        figureController.getFigureController().setRequestedEnvelope(attribute.getBounds());
        figureController.refreshGraphicalAttributes();
        recalculateSrcLinks();
        recalculateTgtLinks();
        notifyDrawnBoundsChanged(oldDrawnBounds,figureController.getFigureController().getConvexHull().getEnvelope());
      }
 else       if (e.getPropertyChange().equals(CanvasAttributePropertyChange.LINE_STYLE)) {
        IShapeAttribute attribute=(IShapeAttribute)e.getAttribute();
        figureController.getFigureController().setLineStyle(attribute.getLineStyle());
        figureController.refreshGraphicalAttributes();
      }
    }
    @Override public void elementTranslated(    ICanvasAttributeTranslationEvent e){
    }
    @Override public void nodeResized(    ICanvasAttributeResizedEvent e){
    }
  }
;
  annotPropChangeListener=new IAnnotationPropertyChangeListener(){
    @Override public void propertyChange(    IAnnotationPropertyChangeEvent e){
      figureController.refreshBoundProperties();
    }
  }
;
  parentDrawingNodePropertyChangeListener=new ICanvasAttributeChangeListener(){
    @Override public void propertyChange(    ICanvasAttributePropertyChangeEvent e){
    }
    @Override public void elementTranslated(    ICanvasAttributeTranslationEvent e){
      domainNode.getAttribute().translate(e.getTranslationDelta());
    }
    @Override public void nodeResized(    ICanvasAttributeResizedEvent e){
    }
  }
;
}","public ShapeController(IViewControllerModel viewModel,IShapeNode node,int index){
  super(viewModel,index);
  this.domainNode=node;
  this.parentAttribute=new DrawingElementFacade(this.domainNode.getGraphElement().getParent());
  this.figureController=new ShapeFigureControllerHelper(domainNode.getAttribute());
  figureController.createFigureController();
  shapePropertyChangeListener=new ICanvasAttributeChangeListener(){
    @Override public void propertyChange(    ICanvasAttributePropertyChangeEvent e){
      if (e.getPropertyChange().equals(CanvasAttributePropertyChange.LINE_COLOUR)) {
        figureController.getFigureController().setLineColour((RGB)e.getNewValue());
        figureController.refreshGraphicalAttributes();
      }
 else       if (e.getPropertyChange().equals(CanvasAttributePropertyChange.FILL_COLOUR)) {
        figureController.getFigureController().setFillColour((RGB)e.getNewValue());
        figureController.refreshGraphicalAttributes();
      }
 else       if (e.getPropertyChange().equals(CanvasAttributePropertyChange.LINE_WIDTH)) {
        Double newLineWidth=(Double)e.getNewValue();
        figureController.getFigureController().setLineWidth(newLineWidth);
        figureController.refreshGraphicalAttributes();
      }
 else       if (e.getPropertyChange().equals(CanvasAttributePropertyChange.BOUNDS)) {
        IShapeAttribute attribute=(IShapeAttribute)e.getAttribute();
        Envelope oldDrawnBounds=figureController.getFigureController().getConvexHull().getEnvelope();
        figureController.getFigureController().setRequestedEnvelope(attribute.getBounds());
        figureController.refreshGraphicalAttributes();
        notifyDrawnBoundsChanged(oldDrawnBounds,figureController.getFigureController().getConvexHull().getEnvelope());
      }
 else       if (e.getPropertyChange().equals(CanvasAttributePropertyChange.LINE_STYLE)) {
        IShapeAttribute attribute=(IShapeAttribute)e.getAttribute();
        figureController.getFigureController().setLineStyle(attribute.getLineStyle());
        figureController.refreshGraphicalAttributes();
      }
    }
    @Override public void elementTranslated(    ICanvasAttributeTranslationEvent e){
    }
    @Override public void nodeResized(    ICanvasAttributeResizedEvent e){
    }
  }
;
  annotPropChangeListener=new IAnnotationPropertyChangeListener(){
    @Override public void propertyChange(    IAnnotationPropertyChangeEvent e){
      figureController.refreshBoundProperties();
    }
  }
;
  parentDrawingNodePropertyChangeListener=new ICanvasAttributeChangeListener(){
    @Override public void propertyChange(    ICanvasAttributePropertyChangeEvent e){
    }
    @Override public void elementTranslated(    ICanvasAttributeTranslationEvent e){
      domainNode.getAttribute().translate(e.getTranslationDelta());
    }
    @Override public void nodeResized(    ICanvasAttributeResizedEvent e){
    }
  }
;
}"
24493,"private IFigureController createLabelController(ILabelAttribute attribute){
  IFigureController figureController=new FigureController(FigureCompilationCache.getInstance().lookup(LABEL_DEFINITION));
  figureController.setRequestedEnvelope(attribute.getBounds());
  figureController.setFillColour(attribute.getBackgroundColor());
  figureController.setLineColour(attribute.getForegroundColor());
  figureController.setLineStyle(attribute.getLineStyle());
  figureController.setLineWidth(attribute.getLineWidth());
  figureController.setBindDouble(""String_Node_Str"",10.0);
  figureController.setBindString(""String_Node_Str"",attribute.getProperty().getValue().toString());
  figureController.setBindBoolean(""String_Node_Str"",attribute.hasNoBorder());
  figureController.generateFigureDefinition();
  return figureController;
}","private IFigureController createLabelController(ILabelAttribute attribute){
  IFigureController figureController=new FigureController(FigureCompilationCache.getInstance().lookup(LABEL_DEFINITION));
  figureController.setRequestedEnvelope(attribute.getBounds());
  figureController.setFillColour(attribute.getBackgroundColor());
  figureController.setLineColour(attribute.getForegroundColor());
  figureController.setLineStyle(attribute.getLineStyle());
  figureController.setLineWidth(attribute.getLineWidth());
  figureController.setBindDouble(""String_Node_Str"",10.0);
  figureController.setBindString(""String_Node_Str"",attribute.getDisplayedContent());
  figureController.setBindBoolean(""String_Node_Str"",attribute.hasNoBorder());
  figureController.generateFigureDefinition();
  return figureController;
}"
24494,"@Override public SortedSet<IDrawingPrimitiveController> findIntersectingNodes(IConvexHull queryHull,IDrawingPrimitiveController queryNode){
  SortedSet<IDrawingPrimitiveController> retVal=createSortedSet();
  IRootController rootNode=model.getRootNode();
  if (filter.accept(rootNode)) {
    retVal.add(rootNode);
  }
  Envelope drawnBounds=queryNode.getDrawnBounds();
  Point origin=drawnBounds.getOrigin();
  Point diagonal=drawnBounds.getDiagonalCorner();
  ISpacialEntry2DEnumerator<IDrawingPrimitiveController> iter=this.spacialIndex.queryOverlap((float)origin.getX(),(float)origin.getY(),(float)diagonal.getX(),(float)diagonal.getY(),null,0,false);
  while (iter.numRemaining() > 0) {
    IDrawingPrimitiveController node=iter.nextInt();
    if (!node.equals(queryNode) && !node.equals(rootNode) && filter.accept(node)&& node.intersectsHull(queryHull)) {
      retVal.add(node);
    }
  }
  return retVal;
}","@Override public SortedSet<IDrawingPrimitiveController> findIntersectingNodes(IConvexHull queryHull,IDrawingPrimitiveController queryNode){
  SortedSet<IDrawingPrimitiveController> retVal=createSortedSet();
  IRootController rootNode=model.getRootNode();
  if (filter.accept(rootNode)) {
    retVal.add(rootNode);
  }
  Envelope drawnBounds=queryHull.getEnvelope();
  Point origin=drawnBounds.getOrigin();
  Point diagonal=drawnBounds.getDiagonalCorner();
  ISpacialEntry2DEnumerator<IDrawingPrimitiveController> iter=this.spacialIndex.queryOverlap((float)origin.getX(),(float)origin.getY(),(float)diagonal.getX(),(float)diagonal.getY(),null,0,false);
  while (iter.numRemaining() > 0) {
    IDrawingPrimitiveController node=iter.nextInt();
    if (!node.equals(queryNode) && !node.equals(rootNode) && filter.accept(node)&& node.intersectsHull(queryHull)) {
      retVal.add(node);
    }
  }
  return retVal;
}"
24495,"@Override public void actionPerformed(ActionEvent e){
  currentSentence.sentenceValidated();
  int currSelectionIdx=getCurrentSelection();
  if (getCurrentSelection() < tableModel.getRowCount() - 1) {
    currSelectionIdx++;
  }
  selectionModel.setSelectionInterval(currSelectionIdx,currSelectionIdx);
  int scrollOffset=dataViewTable.getRowHeight() * getCurrentSelection();
  dataViewScrollPane.getVerticalScrollBar().setValue(scrollOffset);
}","@Override public void actionPerformed(ActionEvent e){
  currentSentence.sentenceValidated();
  int currSelectionIdx=getCurrentSelection();
  if (getCurrentSelection() < tableModel.getRowCount() - 1) {
    currSelectionIdx++;
  }
  selectionModel.setSelectionInterval(currSelectionIdx,currSelectionIdx);
}"
24496,"private void setupActionPanel(){
  this.actionPanel.setLayout(new GridBagLayout());
  GridBagConstraints c=new GridBagConstraints();
  this.actionPanel.setPreferredSize(new Dimension(600,100));
  c.gridx=0;
  c.gridy=0;
  irrelevantCheckBox=addCheckBox(""String_Node_Str"",c);
  c.gridx=1;
  c.gridy=0;
  focusCheckBox=addCheckBox(""String_Node_Str"",c);
  c.gridx=0;
  c.gridy=1;
  interactingNodeCheckBox=addCheckBox(""String_Node_Str"",c);
  irrelevantCheckBox.addChangeListener(this.irrelevantCheckBoxListener);
  focusCheckBox.addChangeListener(this.focusCheckBoxListener);
  interactingNodeCheckBox.addChangeListener(this.interactingNodeCheckBoxListener);
  prevButton=new JButton(""String_Node_Str"");
  c.gridx=0;
  c.gridy=2;
  this.actionPanel.add(prevButton,c);
  prevButton.addActionListener(this.prevActionListener);
  nextButton=new JButton(""String_Node_Str"");
  c.gridx=1;
  c.gridy=2;
  this.actionPanel.add(nextButton,c);
  nextButton.addActionListener(this.nextActionListener);
  acceptButton=new JButton(""String_Node_Str"");
  c.gridx=1;
  c.gridy=1;
  this.actionPanel.add(acceptButton,c);
  acceptButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      currentSentence.sentenceValidated();
      int currSelectionIdx=getCurrentSelection();
      if (getCurrentSelection() < tableModel.getRowCount() - 1) {
        currSelectionIdx++;
      }
      selectionModel.setSelectionInterval(currSelectionIdx,currSelectionIdx);
      int scrollOffset=dataViewTable.getRowHeight() * getCurrentSelection();
      dataViewScrollPane.getVerticalScrollBar().setValue(scrollOffset);
    }
  }
);
}","private void setupActionPanel(){
  this.actionPanel.setLayout(new GridBagLayout());
  GridBagConstraints c=new GridBagConstraints();
  this.actionPanel.setPreferredSize(new Dimension(600,100));
  c.gridx=0;
  c.gridy=0;
  irrelevantCheckBox=addCheckBox(""String_Node_Str"",c);
  c.gridx=1;
  c.gridy=0;
  focusCheckBox=addCheckBox(""String_Node_Str"",c);
  c.gridx=0;
  c.gridy=1;
  interactingNodeCheckBox=addCheckBox(""String_Node_Str"",c);
  irrelevantCheckBox.addChangeListener(this.irrelevantCheckBoxListener);
  focusCheckBox.addChangeListener(this.focusCheckBoxListener);
  interactingNodeCheckBox.addChangeListener(this.interactingNodeCheckBoxListener);
  prevButton=new JButton(""String_Node_Str"");
  c.gridx=0;
  c.gridy=2;
  this.actionPanel.add(prevButton,c);
  prevButton.addActionListener(this.prevActionListener);
  nextButton=new JButton(""String_Node_Str"");
  c.gridx=1;
  c.gridy=2;
  this.actionPanel.add(nextButton,c);
  nextButton.addActionListener(this.nextActionListener);
  acceptButton=new JButton(""String_Node_Str"");
  c.gridx=1;
  c.gridy=1;
  this.actionPanel.add(acceptButton,c);
  acceptButton.addActionListener(new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      currentSentence.sentenceValidated();
      int currSelectionIdx=getCurrentSelection();
      if (getCurrentSelection() < tableModel.getRowCount() - 1) {
        currSelectionIdx++;
      }
      selectionModel.setSelectionInterval(currSelectionIdx,currSelectionIdx);
    }
  }
);
}"
24497,"public SentencesPanel(Dialog synonymDialog){
  this.listeners=new LinkedList<ISentenceSelectionChangeListener>();
  this.synonymDialog=synonymDialog;
  IRowDefn rowDefn=new SentenceRowDefinition();
  tableModel=new DataViewTableModel(rowDefn);
  tableColumnModel=new DefaultTableColumnModel();
  dataViewTable=new JTable(tableModel,tableColumnModel);
  dataViewTable.setAutoscrolls(true);
  dataViewTable.setShowHorizontalLines(true);
  dataViewTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  selectionModel=dataViewTable.getSelectionModel();
  selectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  setColumnDefs();
  dataViewScrollPane.getViewport().add(dataViewTable);
  setupActionPanel();
  setUpFocusPanel();
  setUpIntNodePanel();
  JPanel sentenceSectionPanel=new JPanel();
  sentenceSectionPanel.setLayout(new BorderLayout());
  sentenceSectionPanel.add(this.focusDetailPanel,BorderLayout.PAGE_START);
  sentenceSectionPanel.add(dataViewScrollPane,BorderLayout.CENTER);
  this.previewPanel.setLayout(new BorderLayout());
  this.previewPanel.add(this.intNodeDetailPanel,BorderLayout.PAGE_START);
  this.previewPanel.add(this.sentencePreviewer,BorderLayout.CENTER);
  this.previewPanel.add(this.actionPanel,BorderLayout.PAGE_END);
  this.sentencePreviewer.setEditable(false);
  this.setBorder(BorderFactory.createLineBorder(Color.BLACK));
  this.setLayout(new GridLayout(1,2));
  this.add(sentenceSectionPanel);
  this.add(previewPanel);
  focusNodeSynonymJDialog=new SynonymDialog(this.synonymDialog);
  focusNodeSynonymJDialog.setSize(new Dimension(200,300));
  intNodeSynonymJDialog=new SynonymDialog(this.synonymDialog);
  intNodeSynonymJDialog.setSize(new Dimension(200,300));
  this.sentenceListener=new ISentenceStateChangeListener(){
    @Override public void stateChanged(    ISentenceStateChangeEvent e){
      dataViewTable.updateUI();
      updateButtons();
    }
  }
;
  this.nextActionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int currSelectionIdx=getCurrentSelection() + 1;
      selectionModel.setSelectionInterval(currSelectionIdx,currSelectionIdx);
      int scrollOffset=dataViewTable.getRowHeight() * getCurrentSelection();
      dataViewScrollPane.getVerticalScrollBar().setValue(scrollOffset);
    }
  }
;
  this.prevActionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int currSelectionIdx=getCurrentSelection() - 1;
      selectionModel.setSelectionInterval(currSelectionIdx,currSelectionIdx);
      int scrollOffset=dataViewTable.getRowHeight() * getCurrentSelection();
      dataViewScrollPane.getVerticalScrollBar().setValue(scrollOffset);
    }
  }
;
  this.interactingNodeCheckBoxListener=new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      currentSentence.setInteractingNodeValid(interactingNodeCheckBox.isSelected());
    }
  }
;
  this.focusCheckBoxListener=new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      currentSentence.setFocusNodeValid(focusCheckBox.isSelected());
    }
  }
;
  this.irrelevantCheckBoxListener=new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      currentSentence.setSentenceRelevant(!irrelevantCheckBox.isSelected());
    }
  }
;
  this.listSelectionListener=new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      checkNavigatorButtonEnablement();
      currentSentence.removeSentenceStateChangeListener(sentenceListener);
      ISentence oldSentence=currentSentence;
      currentSentence=((SentenceRow)tableModel.getRow(getCurrentSelection())).getSentence();
      notifySentenceSelectionChanged(getCurrentSelection(),oldSentence,currentSentence);
      updateButtons();
      sentencePreviewer.setText(currentSentence.getMarkedUpSentence());
      intialiseIntNodeDetailPanel();
      if (intNodeSynonymJDialog.isVisible()) {
        intNodeSynonymJDialog.setSynonyms(currentSentence.getArc().getInteractingNode());
      }
      currentSentence.addSentenceStateChangeListener(sentenceListener);
    }
  }
;
}","public SentencesPanel(Dialog synonymDialog){
  this.listeners=new LinkedList<ISentenceSelectionChangeListener>();
  this.synonymDialog=synonymDialog;
  IRowDefn rowDefn=new SentenceRowDefinition();
  tableModel=new DataViewTableModel(rowDefn);
  tableColumnModel=new DefaultTableColumnModel();
  dataViewTable=new JTable(tableModel,tableColumnModel);
  dataViewTable.setAutoscrolls(true);
  dataViewTable.setShowHorizontalLines(true);
  dataViewTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  selectionModel=dataViewTable.getSelectionModel();
  selectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  setColumnDefs();
  dataViewScrollPane.getViewport().add(dataViewTable);
  setupActionPanel();
  setUpFocusPanel();
  setUpIntNodePanel();
  JPanel sentenceSectionPanel=new JPanel();
  sentenceSectionPanel.setLayout(new BorderLayout());
  sentenceSectionPanel.add(this.focusDetailPanel,BorderLayout.PAGE_START);
  sentenceSectionPanel.add(dataViewScrollPane,BorderLayout.CENTER);
  this.previewPanel.setLayout(new BorderLayout());
  this.previewPanel.add(this.intNodeDetailPanel,BorderLayout.PAGE_START);
  this.previewPanel.add(this.sentencePreviewer,BorderLayout.CENTER);
  this.previewPanel.add(this.actionPanel,BorderLayout.PAGE_END);
  this.sentencePreviewer.setEditable(false);
  this.setBorder(BorderFactory.createLineBorder(Color.BLACK));
  this.setLayout(new GridLayout(1,2));
  this.add(sentenceSectionPanel);
  this.add(previewPanel);
  focusNodeSynonymJDialog=new SynonymDialog(this.synonymDialog);
  focusNodeSynonymJDialog.setSize(new Dimension(200,300));
  intNodeSynonymJDialog=new SynonymDialog(this.synonymDialog);
  intNodeSynonymJDialog.setSize(new Dimension(200,300));
  this.sentenceListener=new ISentenceStateChangeListener(){
    @Override public void stateChanged(    ISentenceStateChangeEvent e){
      dataViewTable.updateUI();
      updateButtons();
    }
  }
;
  this.nextActionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int currSelectionIdx=getCurrentSelection() + 1;
      selectionModel.setSelectionInterval(currSelectionIdx,currSelectionIdx);
    }
  }
;
  this.prevActionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int currSelectionIdx=getCurrentSelection() - 1;
      selectionModel.setSelectionInterval(currSelectionIdx,currSelectionIdx);
    }
  }
;
  this.interactingNodeCheckBoxListener=new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      currentSentence.setInteractingNodeValid(interactingNodeCheckBox.isSelected());
    }
  }
;
  this.focusCheckBoxListener=new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      currentSentence.setFocusNodeValid(focusCheckBox.isSelected());
    }
  }
;
  this.irrelevantCheckBoxListener=new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      currentSentence.setSentenceRelevant(!irrelevantCheckBox.isSelected());
    }
  }
;
  this.listSelectionListener=new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      checkNavigatorButtonEnablement();
      currentSentence.removeSentenceStateChangeListener(sentenceListener);
      ISentence oldSentence=currentSentence;
      currentSentence=((SentenceRow)tableModel.getRow(getCurrentSelection())).getSentence();
      notifySentenceSelectionChanged(getCurrentSelection(),oldSentence,currentSentence);
      updateButtons();
      sentencePreviewer.setText(currentSentence.getMarkedUpSentence());
      intialiseIntNodeDetailPanel();
      if (intNodeSynonymJDialog.isVisible()) {
        intNodeSynonymJDialog.setSynonyms(currentSentence.getArc().getInteractingNode());
      }
      currentSentence.addSentenceStateChangeListener(sentenceListener);
    }
  }
;
}"
24498,"@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  Graphics2D g2d=(Graphics2D)g;
  Envelope bounds=this.canvasDrawer.getViewControllerStore().getCanvasBounds();
  AffineTransform originalTransform=g2d.getTransform();
  g2d.translate(-bounds.getOrigin().getX() + PANE_BORDER,-bounds.getOrigin().getY() + PANE_BORDER);
  this.lastTransform=g2d.getTransform();
  g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
  this.canvasDrawer.paint(g2d);
  paintSelections(g2d);
  this.feedbackDrawer.paint(g2d);
  g2d.setTransform(originalTransform);
}","@Override public void paintComponent(Graphics g){
  super.paintComponent(g);
  Graphics2D g2d=(Graphics2D)g;
  Envelope bounds=this.canvasDrawer.getViewControllerStore().getCanvasBounds();
  AffineTransform originalTransform=g2d.getTransform();
  g2d.scale(0.65,0.65);
  g2d.translate(-bounds.getOrigin().getX() + PANE_BORDER,-bounds.getOrigin().getY() + PANE_BORDER);
  this.lastTransform=g2d.getTransform();
  g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  g2d.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
  this.canvasDrawer.paint(g2d);
  paintSelections(g2d);
  this.feedbackDrawer.paint(g2d);
  g2d.setTransform(originalTransform);
}"
24499,"private Point getAdjustedMousePosition(double originalMouseX,double originalMouseY){
  AffineTransform paneTransform=this.shapePane.getLastUsedTransform();
  Point retVal=null;
  if (paneTransform == null) {
    retVal=new Point(originalMouseX,originalMouseY);
  }
 else {
    retVal=new Point(originalMouseX - paneTransform.getTranslateX(),originalMouseY - paneTransform.getTranslateY());
  }
  return retVal;
}","private Point getAdjustedMousePosition(double originalMouseX,double originalMouseY){
  AffineTransform paneTransform=this.shapePane.getLastUsedTransform();
  Point retVal=null;
  if (paneTransform == null) {
    retVal=new Point(originalMouseX,originalMouseY);
  }
 else {
    retVal=new Point((originalMouseX - paneTransform.getTranslateX()) / paneTransform.getScaleX(),(originalMouseY - paneTransform.getTranslateY()) / paneTransform.getScaleY());
  }
  return retVal;
}"
24500,"public void openFile(File file){
  try {
    INotationSubsystemPool subsystemPool=new NotationSubsystemPool();
    canvasPersistenceManager=new FileXmlCanvasPersistenceManager(subsystemPool);
    InputStream in=new FileInputStream(file);
    canvasPersistenceManager.readCanvasFromStream(in);
    in.close();
    ICanvas canvas=canvasPersistenceManager.getCurrentCanvas();
    NdomBuilder builder=new NdomBuilder();
    BoParser parser=new BoParser(builder);
    BoTreeLexer lexer=new BoTreeLexer(canvas);
    parser.parse(lexer);
    IMapDiagram ndom=builder.getNdom();
    sentencesPanel.loadData(new SentenceFromSInterationIterator(ndom.sInteractionIterator()));
    insp.loadCanvas(canvas);
    this.validate();
    initComponentLinkage();
    insp.selectAndFocusOnElement(sentencesPanel.getSelectedSentence().getArc().getLinkEdge());
  }
 catch (  IOException ex) {
    JOptionPane.showMessageDialog(this,""String_Node_Str"" + ex.getLocalizedMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
catch (  TreeParseException e) {
    JOptionPane.showMessageDialog(this,""String_Node_Str"" + e.getLocalizedMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
}","public void openFile(File file){
  try {
    getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    INotationSubsystemPool subsystemPool=new NotationSubsystemPool();
    canvasPersistenceManager=new FileXmlCanvasPersistenceManager(subsystemPool);
    InputStream in=new FileInputStream(file);
    canvasPersistenceManager.readCanvasFromStream(in);
    in.close();
    ICanvas canvas=canvasPersistenceManager.getCurrentCanvas();
    NdomBuilder builder=new NdomBuilder();
    BoParser parser=new BoParser(builder);
    BoTreeLexer lexer=new BoTreeLexer(canvas);
    parser.parse(lexer);
    IMapDiagram ndom=builder.getNdom();
    sentencesPanel.loadData(new SentenceFromSInterationIterator(ndom.sInteractionIterator()));
    insp.loadCanvas(canvas);
    this.validate();
    initComponentLinkage();
    insp.selectAndFocusOnElement(sentencesPanel.getSelectedSentence().getArc().getLinkEdge());
  }
 catch (  IOException ex) {
    JOptionPane.showMessageDialog(this,""String_Node_Str"" + ex.getLocalizedMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
catch (  TreeParseException e) {
    JOptionPane.showMessageDialog(this,""String_Node_Str"" + e.getLocalizedMessage(),""String_Node_Str"",JOptionPane.ERROR_MESSAGE);
  }
 finally {
    getContentPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
  }
}"
24501,"public SentencesPanel(Dialog synonymDialog){
  this.listeners=new LinkedList<ISentenceSelectionChangeListener>();
  this.synonymDialog=synonymDialog;
  IRowDefn rowDefn=new SentenceRowDefinition();
  tableModel=new DataViewTableModel(rowDefn);
  tableColumnModel=new DefaultTableColumnModel();
  dataViewTable=new JTable(tableModel,tableColumnModel);
  dataViewTable.setAutoscrolls(true);
  dataViewTable.setShowHorizontalLines(true);
  dataViewTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  selectionModel=dataViewTable.getSelectionModel();
  selectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  setColumnDefs();
  dataViewScrollPane.getViewport().add(dataViewTable);
  setupActionPanel();
  setUpFocusPanel();
  setUpIntNodePanel();
  JPanel sentenceSectionPanel=new JPanel();
  sentenceSectionPanel.setLayout(new BorderLayout());
  sentenceSectionPanel.add(this.focusDetailPanel,BorderLayout.PAGE_START);
  sentenceSectionPanel.add(dataViewScrollPane,BorderLayout.CENTER);
  this.previewPanel.setLayout(new BorderLayout());
  this.previewPanel.add(this.intNodeDetailPanel,BorderLayout.PAGE_START);
  this.previewPanel.add(this.sentencePreviewer,BorderLayout.CENTER);
  this.previewPanel.add(this.actionPanel,BorderLayout.PAGE_END);
  this.sentencePreviewer.setEditable(false);
  this.setBorder(BorderFactory.createLineBorder(Color.BLACK));
  this.setLayout(new GridLayout(1,2));
  this.add(sentenceSectionPanel);
  this.add(previewPanel);
  focusNodeSynonymJDialog=new SynonymDialog(this.synonymDialog);
  focusNodeSynonymJDialog.setPreferredSize(new Dimension(200,300));
  intNodeSynonymJDialog=new SynonymDialog(this.synonymDialog);
  intNodeSynonymJDialog.setPreferredSize(new Dimension(200,300));
  this.sentenceListener=new ISentenceStateChangeListener(){
    @Override public void stateChanged(    ISentenceStateChangeEvent e){
      dataViewTable.updateUI();
      updateButtons();
    }
  }
;
  this.nextActionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int currSelectionIdx=getCurrentSelection() + 1;
      selectionModel.setSelectionInterval(currSelectionIdx,currSelectionIdx);
      int scrollOffset=dataViewTable.getRowHeight() * getCurrentSelection();
      dataViewScrollPane.getVerticalScrollBar().setValue(scrollOffset);
    }
  }
;
  this.prevActionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int currSelectionIdx=getCurrentSelection() - 1;
      selectionModel.setSelectionInterval(currSelectionIdx,currSelectionIdx);
      int scrollOffset=dataViewTable.getRowHeight() * getCurrentSelection();
      dataViewScrollPane.getVerticalScrollBar().setValue(scrollOffset);
    }
  }
;
  this.interactingNodeCheckBoxListener=new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      currentSentence.setInteractingNodeValid(interactingNodeCheckBox.isSelected());
    }
  }
;
  this.focusCheckBoxListener=new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      currentSentence.setFocusNodeValid(focusCheckBox.isSelected());
    }
  }
;
  this.irrelevantCheckBoxListener=new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      currentSentence.setSentenceRelevant(!irrelevantCheckBox.isSelected());
    }
  }
;
  this.listSelectionListener=new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      checkNavigatorButtonEnablement();
      currentSentence.removeSentenceStateChangeListener(sentenceListener);
      ISentence oldSentence=currentSentence;
      currentSentence=((SentenceRow)tableModel.getRow(getCurrentSelection())).getSentence();
      notifySentenceSelectionChanged(getCurrentSelection(),oldSentence,currentSentence);
      updateButtons();
      sentencePreviewer.setText(currentSentence.getMarkedUpSentence());
      intialiseIntNodeDetailPanel();
      if (intNodeSynonymJDialog.isVisible()) {
        intNodeSynonymJDialog.setSynonyms(currentSentence.getArc().getInteractingNode());
      }
      currentSentence.addSentenceStateChangeListener(sentenceListener);
    }
  }
;
}","public SentencesPanel(Dialog synonymDialog){
  this.listeners=new LinkedList<ISentenceSelectionChangeListener>();
  this.synonymDialog=synonymDialog;
  IRowDefn rowDefn=new SentenceRowDefinition();
  tableModel=new DataViewTableModel(rowDefn);
  tableColumnModel=new DefaultTableColumnModel();
  dataViewTable=new JTable(tableModel,tableColumnModel);
  dataViewTable.setAutoscrolls(true);
  dataViewTable.setShowHorizontalLines(true);
  dataViewTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  selectionModel=dataViewTable.getSelectionModel();
  selectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  setColumnDefs();
  dataViewScrollPane.getViewport().add(dataViewTable);
  setupActionPanel();
  setUpFocusPanel();
  setUpIntNodePanel();
  JPanel sentenceSectionPanel=new JPanel();
  sentenceSectionPanel.setLayout(new BorderLayout());
  sentenceSectionPanel.add(this.focusDetailPanel,BorderLayout.PAGE_START);
  sentenceSectionPanel.add(dataViewScrollPane,BorderLayout.CENTER);
  this.previewPanel.setLayout(new BorderLayout());
  this.previewPanel.add(this.intNodeDetailPanel,BorderLayout.PAGE_START);
  this.previewPanel.add(this.sentencePreviewer,BorderLayout.CENTER);
  this.previewPanel.add(this.actionPanel,BorderLayout.PAGE_END);
  this.sentencePreviewer.setEditable(false);
  this.setBorder(BorderFactory.createLineBorder(Color.BLACK));
  this.setLayout(new GridLayout(1,2));
  this.add(sentenceSectionPanel);
  this.add(previewPanel);
  focusNodeSynonymJDialog=new SynonymDialog(this.synonymDialog);
  focusNodeSynonymJDialog.setSize(new Dimension(200,300));
  intNodeSynonymJDialog=new SynonymDialog(this.synonymDialog);
  intNodeSynonymJDialog.setSize(new Dimension(200,300));
  this.sentenceListener=new ISentenceStateChangeListener(){
    @Override public void stateChanged(    ISentenceStateChangeEvent e){
      dataViewTable.updateUI();
      updateButtons();
    }
  }
;
  this.nextActionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int currSelectionIdx=getCurrentSelection() + 1;
      selectionModel.setSelectionInterval(currSelectionIdx,currSelectionIdx);
      int scrollOffset=dataViewTable.getRowHeight() * getCurrentSelection();
      dataViewScrollPane.getVerticalScrollBar().setValue(scrollOffset);
    }
  }
;
  this.prevActionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int currSelectionIdx=getCurrentSelection() - 1;
      selectionModel.setSelectionInterval(currSelectionIdx,currSelectionIdx);
      int scrollOffset=dataViewTable.getRowHeight() * getCurrentSelection();
      dataViewScrollPane.getVerticalScrollBar().setValue(scrollOffset);
    }
  }
;
  this.interactingNodeCheckBoxListener=new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      currentSentence.setInteractingNodeValid(interactingNodeCheckBox.isSelected());
    }
  }
;
  this.focusCheckBoxListener=new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      currentSentence.setFocusNodeValid(focusCheckBox.isSelected());
    }
  }
;
  this.irrelevantCheckBoxListener=new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      currentSentence.setSentenceRelevant(!irrelevantCheckBox.isSelected());
    }
  }
;
  this.listSelectionListener=new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      checkNavigatorButtonEnablement();
      currentSentence.removeSentenceStateChangeListener(sentenceListener);
      ISentence oldSentence=currentSentence;
      currentSentence=((SentenceRow)tableModel.getRow(getCurrentSelection())).getSentence();
      notifySentenceSelectionChanged(getCurrentSelection(),oldSentence,currentSentence);
      updateButtons();
      sentencePreviewer.setText(currentSentence.getMarkedUpSentence());
      intialiseIntNodeDetailPanel();
      if (intNodeSynonymJDialog.isVisible()) {
        intNodeSynonymJDialog.setSynonyms(currentSentence.getArc().getInteractingNode());
      }
      currentSentence.addSentenceStateChangeListener(sentenceListener);
    }
  }
;
}"
24502,"private void showFocusSynonymDialog(){
  focusNodeSynonymJDialog=new SynonymDialog(this.synonymDialog);
  focusNodeSynonymJDialog.setPreferredSize(new Dimension(200,300));
  focusNodeSynonymJDialog.setSynonyms(currentSentence.getArc().getFocusNode());
  focusNodeSynonymJDialog.setVisible(true);
}","private void showFocusSynonymDialog(){
  focusNodeSynonymJDialog.setSynonyms(currentSentence.getArc().getFocusNode());
  focusNodeSynonymJDialog.setVisible(true);
}"
24503,"private void showIntNodeSynonymDialog(){
  intNodeSynonymJDialog=new SynonymDialog(this.synonymDialog);
  intNodeSynonymJDialog.setPreferredSize(new Dimension(200,300));
  intNodeSynonymJDialog.setSynonyms(currentSentence.getArc().getInteractingNode());
  intNodeSynonymJDialog.setVisible(true);
}","private void showIntNodeSynonymDialog(){
  intNodeSynonymJDialog.setSynonyms(currentSentence.getArc().getInteractingNode());
  intNodeSynonymJDialog.setVisible(true);
}"
24504,"public SentencesPanel(Dialog synonymDialog){
  this.listeners=new LinkedList<ISentenceSelectionChangeListener>();
  this.synonymDialog=synonymDialog;
  IRowDefn rowDefn=new SentenceRowDefinition();
  tableModel=new DataViewTableModel(rowDefn);
  tableColumnModel=new DefaultTableColumnModel();
  dataViewTable=new JTable(tableModel,tableColumnModel);
  dataViewTable.setAutoscrolls(true);
  dataViewTable.setShowHorizontalLines(true);
  dataViewTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  selectionModel=dataViewTable.getSelectionModel();
  selectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  setColumnDefs();
  dataViewScrollPane.getViewport().add(dataViewTable);
  setupActionPanel();
  setUpFocusPanel();
  setUpIntNodePanel();
  JPanel sentenceSectionPanel=new JPanel();
  sentenceSectionPanel.setLayout(new BorderLayout());
  sentenceSectionPanel.add(this.focusDetailPanel,BorderLayout.PAGE_START);
  sentenceSectionPanel.add(dataViewScrollPane,BorderLayout.CENTER);
  this.previewPanel.setLayout(new BorderLayout());
  this.previewPanel.add(this.intNodeDetailPanel,BorderLayout.PAGE_START);
  this.previewPanel.add(this.sentencePreviewer,BorderLayout.CENTER);
  this.previewPanel.add(this.actionPanel,BorderLayout.PAGE_END);
  this.sentencePreviewer.setEditable(false);
  this.setBorder(BorderFactory.createLineBorder(Color.BLACK));
  this.setLayout(new GridLayout(1,2));
  this.add(sentenceSectionPanel);
  this.add(previewPanel);
  this.sentenceListener=new ISentenceStateChangeListener(){
    @Override public void stateChanged(    ISentenceStateChangeEvent e){
      dataViewTable.updateUI();
      updateButtons();
    }
  }
;
  this.nextActionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int currSelectionIdx=getCurrentSelection() + 1;
      selectionModel.setSelectionInterval(currSelectionIdx,currSelectionIdx);
      int scrollOffset=dataViewTable.getRowHeight() * getCurrentSelection();
      dataViewScrollPane.getVerticalScrollBar().setValue(scrollOffset);
    }
  }
;
  this.prevActionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int currSelectionIdx=getCurrentSelection() - 1;
      selectionModel.setSelectionInterval(currSelectionIdx,currSelectionIdx);
      int scrollOffset=dataViewTable.getRowHeight() * getCurrentSelection();
      dataViewScrollPane.getVerticalScrollBar().setValue(scrollOffset);
    }
  }
;
  this.interactingNodeCheckBoxListener=new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      currentSentence.setInteractingNodeValid(interactingNodeCheckBox.isSelected());
    }
  }
;
  this.focusCheckBoxListener=new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      currentSentence.setFocusNodeValid(focusCheckBox.isSelected());
    }
  }
;
  this.irrelevantCheckBoxListener=new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      currentSentence.setSentenceRelevant(!irrelevantCheckBox.isSelected());
    }
  }
;
  this.listSelectionListener=new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      checkNavigatorButtonEnablement();
      currentSentence.removeSentenceStateChangeListener(sentenceListener);
      ISentence oldSentence=currentSentence;
      currentSentence=((SentenceRow)tableModel.getRow(getCurrentSelection())).getSentence();
      notifySentenceSelectionChanged(getCurrentSelection(),oldSentence,currentSentence);
      updateButtons();
      sentencePreviewer.setText(currentSentence.getMarkedUpSentence());
      intialiseIntNodeDetailPanel();
      if (intNodeSynonymJDialog.isVisible()) {
        intNodeSynonymJDialog.setSynonyms(currentSentence.getArc().getInteractingNode());
      }
      currentSentence.addSentenceStateChangeListener(sentenceListener);
    }
  }
;
}","public SentencesPanel(Dialog synonymDialog){
  this.listeners=new LinkedList<ISentenceSelectionChangeListener>();
  this.synonymDialog=synonymDialog;
  IRowDefn rowDefn=new SentenceRowDefinition();
  tableModel=new DataViewTableModel(rowDefn);
  tableColumnModel=new DefaultTableColumnModel();
  dataViewTable=new JTable(tableModel,tableColumnModel);
  dataViewTable.setAutoscrolls(true);
  dataViewTable.setShowHorizontalLines(true);
  dataViewTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
  selectionModel=dataViewTable.getSelectionModel();
  selectionModel.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  setColumnDefs();
  dataViewScrollPane.getViewport().add(dataViewTable);
  setupActionPanel();
  setUpFocusPanel();
  setUpIntNodePanel();
  JPanel sentenceSectionPanel=new JPanel();
  sentenceSectionPanel.setLayout(new BorderLayout());
  sentenceSectionPanel.add(this.focusDetailPanel,BorderLayout.PAGE_START);
  sentenceSectionPanel.add(dataViewScrollPane,BorderLayout.CENTER);
  this.previewPanel.setLayout(new BorderLayout());
  this.previewPanel.add(this.intNodeDetailPanel,BorderLayout.PAGE_START);
  this.previewPanel.add(this.sentencePreviewer,BorderLayout.CENTER);
  this.previewPanel.add(this.actionPanel,BorderLayout.PAGE_END);
  this.sentencePreviewer.setEditable(false);
  this.setBorder(BorderFactory.createLineBorder(Color.BLACK));
  this.setLayout(new GridLayout(1,2));
  this.add(sentenceSectionPanel);
  this.add(previewPanel);
  focusNodeSynonymJDialog=new SynonymDialog(this.synonymDialog);
  focusNodeSynonymJDialog.setPreferredSize(new Dimension(200,300));
  intNodeSynonymJDialog=new SynonymDialog(this.synonymDialog);
  intNodeSynonymJDialog.setPreferredSize(new Dimension(200,300));
  this.sentenceListener=new ISentenceStateChangeListener(){
    @Override public void stateChanged(    ISentenceStateChangeEvent e){
      dataViewTable.updateUI();
      updateButtons();
    }
  }
;
  this.nextActionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int currSelectionIdx=getCurrentSelection() + 1;
      selectionModel.setSelectionInterval(currSelectionIdx,currSelectionIdx);
      int scrollOffset=dataViewTable.getRowHeight() * getCurrentSelection();
      dataViewScrollPane.getVerticalScrollBar().setValue(scrollOffset);
    }
  }
;
  this.prevActionListener=new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      int currSelectionIdx=getCurrentSelection() - 1;
      selectionModel.setSelectionInterval(currSelectionIdx,currSelectionIdx);
      int scrollOffset=dataViewTable.getRowHeight() * getCurrentSelection();
      dataViewScrollPane.getVerticalScrollBar().setValue(scrollOffset);
    }
  }
;
  this.interactingNodeCheckBoxListener=new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      currentSentence.setInteractingNodeValid(interactingNodeCheckBox.isSelected());
    }
  }
;
  this.focusCheckBoxListener=new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      currentSentence.setFocusNodeValid(focusCheckBox.isSelected());
    }
  }
;
  this.irrelevantCheckBoxListener=new ChangeListener(){
    @Override public void stateChanged(    ChangeEvent e){
      currentSentence.setSentenceRelevant(!irrelevantCheckBox.isSelected());
    }
  }
;
  this.listSelectionListener=new ListSelectionListener(){
    @Override public void valueChanged(    ListSelectionEvent e){
      checkNavigatorButtonEnablement();
      currentSentence.removeSentenceStateChangeListener(sentenceListener);
      ISentence oldSentence=currentSentence;
      currentSentence=((SentenceRow)tableModel.getRow(getCurrentSelection())).getSentence();
      notifySentenceSelectionChanged(getCurrentSelection(),oldSentence,currentSentence);
      updateButtons();
      sentencePreviewer.setText(currentSentence.getMarkedUpSentence());
      intialiseIntNodeDetailPanel();
      if (intNodeSynonymJDialog.isVisible()) {
        intNodeSynonymJDialog.setSynonyms(currentSentence.getArc().getInteractingNode());
      }
      currentSentence.addSentenceStateChangeListener(sentenceListener);
    }
  }
;
}"
24505,"private static void buildOutputFile(){
  for (  String tLine : templateFile) {
    if (tLine.trim().isEmpty() || isComment(tLine)) {
      if (!tLine.trim().startsWith(""String_Node_Str"")) {
        outputFile.add(tLine);
      }
    }
 else {
      String code=getCode(tLine);
      String lookupCode=null;
      if (remappings.containsKey(code)) {
        for (        String alt : remappings.get(code)) {
          if (editFile.containsKey(alt)) {
            lookupCode=alt;
            break;
          }
        }
      }
 else {
        lookupCode=code;
      }
      if (lookupCode == null) {
        throw new PFRemapperException(""String_Node_Str"");
      }
      String message=editFile.get(lookupCode);
      if (message == null) {
        System.err.println(""String_Node_Str"" + lookupCode + ""String_Node_Str"");
        continue;
      }
      outputFile.add(code + ""String_Node_Str"" + message);
    }
  }
}","private static void buildOutputFile(){
  for (  String tLine : templateFile) {
    if (tLine.trim().isEmpty() || isComment(tLine)) {
      if (!tLine.trim().startsWith(""String_Node_Str"")) {
        outputFile.add(tLine);
      }
    }
 else {
      String code=getCode(tLine);
      String lookupCode=null;
      if (remappings.containsKey(code)) {
        for (        String alt : remappings.get(code)) {
          if (editFile.containsKey(alt)) {
            lookupCode=alt;
            break;
          }
        }
      }
      if (lookupCode == null) {
        lookupCode=code;
      }
      String message=editFile.get(lookupCode);
      if (message == null) {
        System.err.println(""String_Node_Str"" + lookupCode + ""String_Node_Str"");
        continue;
      }
      outputFile.add(code + ""String_Node_Str"" + message);
    }
  }
}"
24506,"public static @NotNull Map<String,Set<String>> createMap(String input){
  Map<String,Set<String>> map=new HashMap<String,Set<String>>();
  if (input == null) {
    return map;
  }
  input=input.trim();
  if (!input.startsWith(""String_Node_Str"") || !input.endsWith(""String_Node_Str"")) {
    throw new PFRemapperException(""String_Node_Str"");
  }
  String pairs[]=input.substring(1,input.length() - 1).split(""String_Node_Str"");
  for (  String pair : pairs) {
    String kv[]=pair.split(""String_Node_Str"");
    if (kv.length != 2) {
      throw new PFRemapperException(""String_Node_Str"");
    }
    addToSet(kv[0].trim(),kv[1].trim(),map);
  }
  return map;
}","public static Map<String,Set<String>> createMap(String input){
  Map<String,Set<String>> map=new HashMap<String,Set<String>>();
  if (input == null) {
    return map;
  }
  input=input.trim();
  if (!input.startsWith(""String_Node_Str"") || !input.endsWith(""String_Node_Str"")) {
    throw new PFRemapperException(""String_Node_Str"");
  }
  String pairs[]=input.substring(1,input.length() - 1).split(""String_Node_Str"");
  for (  String pair : pairs) {
    String kv[]=pair.split(""String_Node_Str"");
    if (kv.length != 2) {
      throw new PFRemapperException(""String_Node_Str"");
    }
    addToSet(kv[0].trim(),kv[1].trim(),map);
  }
  return map;
}"
24507,"public GuiBot(){
  this.setName(""String_Node_Str"");
}","public GuiBot(){
  this.setName(Main.nick);
}"
24508,"public void onMessage(String channel,String sender,String login,String hostname,String message){
  if (message.trim().startsWith(pref)) {
    message=message.replaceFirst(Matcher.quoteReplacement(pref),""String_Node_Str"");
    String[] parts=message.split(""String_Node_Str"");
    String first=parts[0];
    String result=""String_Node_Str"";
    for (int i=1; i < parts.length; i++) {
      if (result.length() != 0)       result+=""String_Node_Str"";
      result+=parts[i];
    }
    if ((first.equalsIgnoreCase((""String_Node_Str"")) || message.equalsIgnoreCase(""String_Node_Str"")) && sender.equalsIgnoreCase(""String_Node_Str"")) {
      System.exit(0);
    }
 else     if (first.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        System.out.println(""String_Node_Str"");
        Main.reLoad();
        System.out.println(""String_Node_Str"");
        Main.bot.sendMessage(channel,""String_Node_Str"");
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
 else     if (first.equalsIgnoreCase(""String_Node_Str"")) {
      String toprint=""String_Node_Str"";
      if (Main.helpmap.containsKey(result)) {
        toprint=Main.helpmap.get(result);
      }
 else {
        for (        Map.Entry<String,String> entry : Main.helpmap.entrySet()) {
          toprint+=entry.getKey();
        }
      }
      Main.bot.sendMessage(channel,toprint);
    }
 else     if (Main.cmdmap.containsKey(first)) {
      try {
        Method met=(Method)Main.cmdmap.get(first);
        met.invoke((BasePlugin)Main.classmap.get(first),channel,sender,login,hostname,result);
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
  }
}","public void onMessage(String channel,String sender,String login,String hostname,String message){
  if (message.trim().startsWith(pref)) {
    message=message.replaceFirst(Matcher.quoteReplacement(pref),""String_Node_Str"");
    String[] parts=message.split(""String_Node_Str"");
    String first=parts[0];
    String result=""String_Node_Str"";
    for (int i=1; i < parts.length; i++) {
      if (result.length() != 0)       result+=""String_Node_Str"";
      result+=parts[i];
    }
    if ((first.equalsIgnoreCase((""String_Node_Str"")) || message.equalsIgnoreCase(""String_Node_Str"")) && sender.equalsIgnoreCase(""String_Node_Str"")) {
      System.exit(0);
    }
 else     if (first.equalsIgnoreCase(""String_Node_Str"")) {
      try {
        System.out.println(""String_Node_Str"");
        Main.reLoad();
        System.out.println(""String_Node_Str"");
        Main.bot.sendMessage(channel,""String_Node_Str"");
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
 else     if (first.equalsIgnoreCase(""String_Node_Str"")) {
      String toprint=""String_Node_Str"";
      if (Main.helpmap.containsKey(result)) {
        toprint=Main.helpmap.get(result);
      }
 else {
        for (        Map.Entry<String,String> entry : Main.helpmap.entrySet()) {
          toprint+=entry.getKey() + ""String_Node_Str"";
        }
      }
      Main.bot.sendMessage(channel,toprint.trim());
    }
 else     if (Main.cmdmap.containsKey(first)) {
      try {
        Method met=(Method)Main.cmdmap.get(first);
        met.invoke((BasePlugin)Main.classmap.get(first),channel,sender,login,hostname,result);
      }
 catch (      Throwable e) {
        e.printStackTrace();
      }
    }
  }
}"
24509,"@Override public void onBlockDamage(BlockDamageEvent event){
  if (scheduleHandler.rushId != 0) {
    if (event.getPlayer().getItemInHand().getTypeId() == 257 || event.getPlayer().getItemInHand().getTypeId() == 278) {
      int durab=(int)event.getPlayer().getItemInHand().getDurability() + 2;
      short newDurab=(short)durab;
      event.getPlayer().getItemInHand().setDurability(newDurab);
      event.setInstaBreak(true);
    }
  }
 else   if (scheduleHandler.crashId != 0) {
    event.setCancelled(true);
  }
}","@Override public void onBlockDamage(BlockDamageEvent event){
  if (scheduleHandler.rushId != 0) {
    if (event.getPlayer().getItemInHand().getTypeId() == 257 || event.getPlayer().getItemInHand().getTypeId() == 278) {
      if (event.getBlock().getTypeId() != 7 && event.getBlock().getTypeId() != 49) {
        int durab=(int)event.getPlayer().getItemInHand().getDurability() + 2;
        short newDurab=(short)durab;
        event.getPlayer().getItemInHand().setDurability(newDurab);
        event.setInstaBreak(true);
      }
    }
  }
 else   if (scheduleHandler.crashId != 0) {
    event.setCancelled(true);
  }
}"
24510,"@Override public void onPlayerInteract(PlayerInteractEvent event){
  player=event.getPlayer();
  if (event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) {
    if (event.getClickedBlock().getType() != Material.CHEST && event.getClickedBlock().getType() != Material.IRON_DOOR_BLOCK && event.getClickedBlock().getType() != Material.WOODEN_DOOR && event.getClickedBlock().getType() != Material.STONE_BUTTON && event.getClickedBlock().getType() != Material.LEVER && event.getClickedBlock().getType() != Material.MINECART && event.getClickedBlock().getType() != Material.STORAGE_MINECART && event.getClickedBlock().getType() != Material.POWERED_MINECART && event.getClickedBlock().getType() != Material.DISPENSER && event.getClickedBlock().getType() != Material.BOAT && event.getClickedBlock().getType() != Material.BURNING_FURNACE && event.getClickedBlock().getType() != Material.FURNACE && event.getClickedBlock().getType() != Material.CAKE_BLOCK && event.getClickedBlock().getType() != Material.NOTE_BLOCK && event.getClickedBlock().getType() != Material.WORKBENCH && event.getClickedBlock().getType() != Material.TNT) {
      if (player.getItemInHand().getType() == Material.SUGAR) {
        int numOfSugar=player.getItemInHand().getAmount();
        if (player.getHealth() < 20) {
          if (numOfSugar == 1) {
            player.setItemInHand(null);
          }
 else {
            player.getItemInHand().setAmount(numOfSugar - 1);
          }
          if (props.od.equals(true)) {
            if (scheduleHandler.isOD == 1) {
              double dmg=props.odDamage * 2;
              int newDmg=(int)dmg;
              player.damage(newDmg);
            }
 else {
              scheduleHandler.isOD=1;
              scheduleHandler.schedule(""String_Node_Str"",player);
            }
          }
          if (props.healing.equals(true)) {
            double heal=props.healAmnt * 2;
            int newHealth=event.getPlayer().getHealth() + (int)heal;
            player.setHealth(newHealth);
          }
        }
        scheduleHandler.schedule(""String_Node_Str"",player);
      }
    }
  }
 else   if (event.getAction().equals(Action.RIGHT_CLICK_AIR)) {
    if (player.getItemInHand().getType() == Material.SUGAR) {
      int numOfSugar=player.getItemInHand().getAmount();
      if (player.getHealth() < 20) {
        if (numOfSugar == 1) {
          player.setItemInHand(null);
        }
 else {
          player.getItemInHand().setAmount(numOfSugar - 1);
        }
        if (props.od.equals(true)) {
          if (scheduleHandler.isOD == 1) {
            double dmg=props.odDamage * 2;
            int newDmg=(int)dmg;
            player.damage(newDmg);
          }
 else {
            scheduleHandler.isOD=1;
            scheduleHandler.schedule(""String_Node_Str"",player);
          }
        }
        if (props.healing.equals(true)) {
          double heal=props.healAmnt * 2;
          int newHealth=event.getPlayer().getHealth() + (int)heal;
          player.setHealth(newHealth);
        }
      }
      scheduleHandler.schedule(""String_Node_Str"",player);
    }
  }
  player.updateInventory();
}","@Override public void onPlayerInteract(PlayerInteractEvent event){
  player=event.getPlayer();
  if (event.getAction().equals(Action.RIGHT_CLICK_BLOCK)) {
    if (event.getClickedBlock().getType() != Material.CHEST && event.getClickedBlock().getType() != Material.IRON_DOOR_BLOCK && event.getClickedBlock().getType() != Material.WOODEN_DOOR && event.getClickedBlock().getType() != Material.STONE_BUTTON && event.getClickedBlock().getType() != Material.LEVER && event.getClickedBlock().getType() != Material.MINECART && event.getClickedBlock().getType() != Material.STORAGE_MINECART && event.getClickedBlock().getType() != Material.POWERED_MINECART && event.getClickedBlock().getType() != Material.DISPENSER && event.getClickedBlock().getType() != Material.BOAT && event.getClickedBlock().getType() != Material.BURNING_FURNACE && event.getClickedBlock().getType() != Material.FURNACE && event.getClickedBlock().getType() != Material.CAKE_BLOCK && event.getClickedBlock().getType() != Material.NOTE_BLOCK && event.getClickedBlock().getType() != Material.WORKBENCH && event.getClickedBlock().getType() != Material.TNT) {
      if (player.getItemInHand().getType() == Material.SUGAR) {
        int numOfSugar=player.getItemInHand().getAmount();
        if (player.getHealth() < 20) {
          if (numOfSugar == 1) {
            player.setItemInHand(null);
          }
 else {
            player.getItemInHand().setAmount(numOfSugar - 1);
          }
          if (props.od.equals(true)) {
            if (scheduleHandler.isOD == 1) {
              double dmg=props.odDamage * 2;
              int newDmg=(int)dmg;
              player.damage(newDmg);
            }
 else {
              scheduleHandler.isOD=1;
              scheduleHandler.schedule(""String_Node_Str"",player);
            }
          }
          if (props.healing.equals(true)) {
            double heal=props.healAmnt * 2;
            int newHealth=event.getPlayer().getHealth() + (int)heal;
            player.setHealth(newHealth);
          }
          scheduleHandler.schedule(""String_Node_Str"",player);
        }
      }
    }
  }
 else   if (event.getAction().equals(Action.RIGHT_CLICK_AIR)) {
    if (player.getItemInHand().getType() == Material.SUGAR) {
      int numOfSugar=player.getItemInHand().getAmount();
      if (player.getHealth() < 20) {
        if (numOfSugar == 1) {
          player.setItemInHand(null);
        }
 else {
          player.getItemInHand().setAmount(numOfSugar - 1);
        }
        if (props.od.equals(true)) {
          if (scheduleHandler.isOD == 1) {
            double dmg=props.odDamage * 2;
            int newDmg=(int)dmg;
            player.damage(newDmg);
          }
 else {
            scheduleHandler.isOD=1;
            scheduleHandler.schedule(""String_Node_Str"",player);
          }
        }
        if (props.healing.equals(true)) {
          double heal=props.healAmnt * 2;
          int newHealth=event.getPlayer().getHealth() + (int)heal;
          player.setHealth(newHealth);
        }
        scheduleHandler.schedule(""String_Node_Str"",player);
      }
    }
  }
  player.updateInventory();
}"
24511,"@Override public void onPlayerInteract(PlayerInteractEvent event){
  Location target=event.getPlayer().getLocation();
  player=event.getPlayer();
  World world=target.getWorld();
  if (event.getAction().equals(Action.RIGHT_CLICK_BLOCK) || event.getAction().equals(Action.RIGHT_CLICK_AIR)) {
    if (event.getPlayer().getItemInHand().getType() == Material.SUGAR) {
      int numOfSugar=event.getPlayer().getItemInHand().getAmount();
      if (numOfSugar == 1) {
        event.getPlayer().setItemInHand(null);
      }
 else {
        event.getPlayer().getItemInHand().setAmount(numOfSugar - 1);
      }
      event.getPlayer().updateInventory();
      event.getPlayer().setHealth(event.getPlayer().getHealth() + 1);
    }
  }
}","@Override public void onPlayerInteract(PlayerInteractEvent event){
  Location target=event.getPlayer().getLocation();
  player=event.getPlayer();
  World world=target.getWorld();
  if (event.getAction().equals(Action.RIGHT_CLICK_BLOCK) || event.getAction().equals(Action.RIGHT_CLICK_AIR)) {
    if (event.getPlayer().getItemInHand().getType() == Material.SUGAR) {
      int numOfSugar=event.getPlayer().getItemInHand().getAmount();
      if (event.getPlayer().getHealth() != 20) {
        if (numOfSugar == 1) {
          event.getPlayer().setItemInHand(null);
        }
 else {
          event.getPlayer().getItemInHand().setAmount(numOfSugar - 1);
        }
        event.getPlayer().updateInventory();
        event.getPlayer().setHealth(event.getPlayer().getHealth() + 1);
      }
    }
  }
}"
24512,"/** 
 * <p>Initialises the underlying data structure of the Grid that the Sudoku is represented as</p>
 * @param sudokuAsText  a chain of text with the sudoku numbers in it
 * @return the data grid with the appropriate values
 * @throws NumberFormatException in the case of not providing complete or valid input
 */
private int[][] initialiseGrid(String sudokuAsText) throws NumberFormatException {
  int grid[][]=new int[9][9];
  if (Sudoku.isValidChain(sudokuAsText)) {
    throw new NumberFormatException(""String_Node_Str"");
  }
  if (!isTheRightAmountOFNumbers(sudokuAsText)) {
    throw new NumberFormatException(""String_Node_Str"");
  }
  int counterForSudokuText=0;
  for (int row=0; row < 9; row++) {
    for (int column=0; column < 9; column++) {
      grid[row][column]=new Integer(sudokuAsText.charAt(counterForSudokuText) + ""String_Node_Str"").intValue();
      counterForSudokuText++;
    }
  }
  return grid;
}","/** 
 * <p>Initialises the underlying data structure of the Grid that the Sudoku is represented as</p>
 * @param sudokuAsText  a chain of text with the sudoku numbers in it
 * @return the data grid with the appropriate values
 * @throws NumberFormatException in the case of not providing complete or valid input
 */
private int[][] initialiseGrid(String sudokuAsText) throws NumberFormatException {
  int grid[][]=new int[9][9];
  if (!isValidChain(sudokuAsText)) {
    throw new NumberFormatException(""String_Node_Str"");
  }
  if (!isTheRightAmountOFNumbers(sudokuAsText)) {
    throw new NumberFormatException(""String_Node_Str"");
  }
  int counterForSudokuText=0;
  for (int row=0; row < 9; row++) {
    for (int column=0; column < 9; column++) {
      grid[row][column]=new Integer(sudokuAsText.charAt(counterForSudokuText) + ""String_Node_Str"").intValue();
      counterForSudokuText++;
    }
  }
  return grid;
}"
24513,"/** 
 * <p>Validity through RegExp: all numbers from 1 to 9 appear in the chain, just once</p>
 * @param row  the Sudoku chain to verify
 * @return A boolean indicating if the chain is valid
 */
static boolean isValidChain(String chain){
  return chain.matches(""String_Node_Str"");
}","/** 
 * <p>Validity through RegExp: all numbers from 1 to 9 appear in the chain, and a total of 81</p>
 * @param row  the Sudoku chain to verify
 * @return A boolean indicating if the chain is valid
 */
private boolean isValidChain(String chain){
  return chain.matches(""String_Node_Str"");
}"
24514,"/** 
 * <p>Verifies that a particular entry (row, column, or square) of the Sudoku is correct</p>
 * @param row  the Sudoku chain to verify
 * @return A boolean indicating if the chain is correct or not (a <code>null</code> input returns <code>false</code>)
 */
public boolean isChainCorrect(String chain){
  if (isEmptyChain(chain) || !Sudoku.isValidChain(chain))   return false;
  boolean isCorrect=true;
  for (int i=0; i < chain.length(); i++) {
    int counterMatches=countMatches(chain,chain.charAt(i) + ""String_Node_Str"");
    if (counterMatches > 1) {
      isCorrect=false;
      System.out.println(""String_Node_Str"" + chain.charAt(i) + ""String_Node_Str""+ counterMatches+ ""String_Node_Str""+ chain);
      break;
    }
  }
  return isCorrect;
}","/** 
 * <p>Verifies that a particular entry (row, column, or square) of the Sudoku is correct</p>
 * @param row  the Sudoku chain to verify
 * @return A boolean indicating if the chain is correct or not (a <code>null</code> input returns <code>false</code>)
 */
public boolean isChainCorrect(String chain){
  if (isEmptyChain(chain) || !isValidChain(chain))   return false;
  boolean isCorrect=true;
  for (int i=0; i < chain.length(); i++) {
    int counterMatches=countMatches(chain,chain.charAt(i) + ""String_Node_Str"");
    if (counterMatches > 1) {
      isCorrect=false;
      System.out.println(""String_Node_Str"" + chain.charAt(i) + ""String_Node_Str""+ counterMatches+ ""String_Node_Str""+ chain);
      break;
    }
  }
  return isCorrect;
}"
24515,"/** 
 * @param service
 * @param query
 * @param var
 * @return
 */
public static Set<Node> process(EndPoint endPoint,Query query,Node var){
  query.setLimit(PAGE_SIZE);
  query.setOffset(0);
  Set<Node> results=new HashSet<Node>();
  boolean morePages=true;
  while (morePages) {
    long count=0;
    try {
      QueryEngineHTTPClient queryExec=new QueryEngineHTTPClient(endPoint.getURI(),query);
      queryExec.addDefaultGraph(endPoint.getDefaultGraph());
      queryExec.addParam(""String_Node_Str"",""String_Node_Str"");
      queryExec.addParam(""String_Node_Str"",""String_Node_Str"");
      ResultSet bindings=queryExec.execSelect();
      if (bindings != null)       while (bindings.hasNext())       results.add(bindings.next().get(var.getName()).asNode());
      queryExec.close();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    morePages=(count == PAGE_SIZE - 1);
    query.setOffset(query.getOffset() + PAGE_SIZE);
  }
  return results;
}","/** 
 * @param service
 * @param query
 * @param var
 * @return
 */
public static Set<Node> process(EndPoint endPoint,Query query,Node var){
  query.setLimit(PAGE_SIZE);
  query.setOffset(0);
  Set<Node> results=new HashSet<Node>();
  boolean morePages=true;
  while (morePages) {
    long count=0;
    try {
      QueryEngineHTTPClient queryExec=new QueryEngineHTTPClient(endPoint.getURI(),query);
      if (endPoint.getDefaultGraph() != null)       queryExec.addDefaultGraph(endPoint.getDefaultGraph());
      ResultSet bindings=queryExec.execSelect();
      if (bindings != null) {
        while (bindings.hasNext()) {
          results.add(bindings.next().get(var.getName()).asNode());
          count++;
        }
      }
      queryExec.close();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    morePages=(count == PAGE_SIZE);
    query.setOffset(query.getOffset() + PAGE_SIZE);
  }
  return results;
}"
24516,"/** 
 * @param httpQuery
 * @return
 * @throws Exception
 */
private InputStream execHttpQuery(HttpGet httpQuery) throws Exception {
  if (httpQuery == null)   throw new Exception(""String_Node_Str"");
  httpQuery.setHeader(""String_Node_Str"",QUERY_RESULT_MIME_TYPE);
  HttpClient httpClient=new DefaultHttpClient();
  HttpParams params=httpClient.getParams();
  HttpConnectionParams.setConnectionTimeout(params,10000);
  HttpConnectionParams.setSoTimeout(params,10000);
  HttpConnectionParams.setTcpNoDelay(params,true);
  HttpProtocolParams.setVersion(params,HttpVersion.HTTP_1_1);
  HttpProtocolParams.setContentCharset(params,""String_Node_Str"");
  HttpResponse response=null;
  try {
    boolean retry=true;
    int retryCount=0;
    while (retry) {
      retry=false;
      response=httpClient.execute(httpQuery);
      HttpEntity entity=response.getEntity();
      if (entity == null || response.getStatusLine().getStatusCode() != 200) {
        if (retryCount < RETRY_DELAY.length) {
          try {
            Thread.sleep(RETRY_DELAY[retryCount] * 1000);
          }
 catch (          InterruptedException e) {
            throw new Exception(""String_Node_Str"");
          }
          retry=true;
          retryCount++;
        }
 else {
          throw new Exception(""String_Node_Str"");
        }
      }
    }
    Header ceheader=response.getEntity().getContentEncoding();
    if (ceheader != null) {
      HeaderElement[] codecs=ceheader.getElements();
      for (int i=0; i < codecs.length; i++) {
        if (codecs[i].getName().equalsIgnoreCase(""String_Node_Str"")) {
          response.setEntity(new GzipDecompressingEntity(response.getEntity()));
        }
      }
    }
    return response.getEntity().getContent();
  }
 catch (  Exception e) {
    if (httpQuery != null)     httpQuery.abort();
  }
  return null;
}","/** 
 * @param httpQuery
 * @return
 * @throws Exception
 */
private InputStream execHttpQuery(HttpGet httpQuery) throws Exception {
  if (httpQuery == null)   throw new Exception(""String_Node_Str"");
  httpQuery.setHeader(""String_Node_Str"",QUERY_RESULT_MIME_TYPE);
  HttpClient httpClient=new DefaultHttpClient();
  HttpParams params=httpClient.getParams();
  HttpConnectionParams.setConnectionTimeout(params,10000);
  HttpConnectionParams.setSoTimeout(params,10000);
  HttpConnectionParams.setTcpNoDelay(params,true);
  HttpProtocolParams.setVersion(params,HttpVersion.HTTP_1_1);
  HttpProtocolParams.setContentCharset(params,""String_Node_Str"");
  HttpResponse response=null;
  try {
    boolean retry=true;
    int retryCount=0;
    while (retry) {
      retry=false;
      response=httpClient.execute(httpQuery);
      if (response.getEntity() == null || response.getStatusLine().getStatusCode() != 200) {
        if (retryCount < RETRY_DELAY.length) {
          try {
            Thread.sleep(RETRY_DELAY[retryCount] * 1000);
          }
 catch (          InterruptedException e) {
            throw new Exception(""String_Node_Str"");
          }
          retry=true;
          retryCount++;
        }
 else {
          throw new Exception(""String_Node_Str"");
        }
      }
    }
    Header ceheader=response.getEntity().getContentEncoding();
    if (ceheader != null) {
      HeaderElement[] codecs=ceheader.getElements();
      for (int i=0; i < codecs.length; i++) {
        if (codecs[i].getName().equalsIgnoreCase(""String_Node_Str"")) {
          response.setEntity(new GzipDecompressingEntity(response.getEntity()));
        }
      }
    }
    return response.getEntity().getContent();
  }
 catch (  Exception e) {
    if (httpQuery != null)     httpQuery.abort();
  }
  return null;
}"
24517,"public void receivedGday(Peer peer,Packet.GDay packet){
  User u=new User(packet.nickname,peer.getAddress().toString());
  if (!peers.containsKey(packet.nickname)) {
    this.peers.put(u,peer);
    System.out.println(u + ""String_Node_Str"" + peer.getAddress());
  }
  this.peers.get(u).receivedGDay();
}","public void receivedGday(Peer peer,Packet.GDay packet){
  User u=new User(packet.nickname,peer.getAddress().toString());
  if (!peers.containsKey(u)) {
    this.peers.put(u,peer);
    System.out.println(u + ""String_Node_Str"" + peer.getAddress());
  }
  this.peers.get(u).receivedGDay();
}"
24518,"public static String boxify(Packet.Says packet){
  return packet.nickname + ""String_Node_Str"" + packet.message+ ""String_Node_Str"";
}","public static String boxify(Packet.Says packet){
  return packet.nickname + ""String_Node_Str"" + packet.message;
}"
24519,"public boolean isPeer(String nickname){
  return this.peers.containsKey(nickname);
}","public boolean isPeer(User u){
  return this.peers.containsKey(u);
}"
24520,"public void run(){
  while (true) {
    try {
      byte[] buf=new byte[256];
      DatagramPacket packet=new DatagramPacket(buf,buf.length);
      socket.receive(packet);
      Packet type=Packet.getType(packet.getData());
switch (type) {
case SAYS:
        Packet.Says says=new Packet.Says(packet.getData());
      if (manager.isPeer(says.nickname)) {
        Integer lastSeqNum=lastSeqNumsReceived.get(says.nickname);
        if (lastSeqNum == null || lastSeqNum <= says.sequenceNumber) {
          System.out.println(Utils.boxify(says));
          lastSeqNum=says.sequenceNumber;
        }
        lastSeqNumsReceived.put(says.nickname,lastSeqNum);
        try {
          buf=new Packet.Yeah(lastSeqNum).toBytes();
          packet=new DatagramPacket(buf,buf.length,packet.getAddress(),packet.getPort());
          socket.send(packet);
        }
 catch (        Exception e) {
        }
      }
    break;
case YEAH:
  try {
    sender.recievedYeah(new Packet.Yeah(packet.getData()));
  }
 catch (  Exception e) {
  }
break;
case GDAY:
manager.receivedGday(new Peer(packet.getAddress(),packet.getPort()),new Packet.GDay(packet.getData()));
break;
case GBYE:
manager.recievedGbye(packet.getAddress().toString(),new Packet.GBye(packet.getData()));
break;
default :
System.err.println(""String_Node_Str"" + packet.getData().toString());
}
}
 catch (IOException e) {
e.printStackTrace();
break;
}
}
socket.close();
}","public void run(){
  while (true) {
    try {
      byte[] buf=new byte[256];
      DatagramPacket packet=new DatagramPacket(buf,buf.length);
      socket.receive(packet);
      Packet type=Packet.getType(packet.getData());
switch (type) {
case SAYS:
        Packet.Says says=new Packet.Says(packet.getData());
      if (manager.isPeer(new User(says.nickname,packet.getAddress().toString()))) {
        Integer lastSeqNum=lastSeqNumsReceived.get(says.nickname);
        if (lastSeqNum == null || lastSeqNum <= says.sequenceNumber) {
          System.out.println(Utils.boxify(says));
          lastSeqNum=says.sequenceNumber;
        }
        lastSeqNumsReceived.put(says.nickname,lastSeqNum);
        try {
          buf=new Packet.Yeah(lastSeqNum).toBytes();
          packet=new DatagramPacket(buf,buf.length,packet.getAddress(),packet.getPort());
          socket.send(packet);
        }
 catch (        Exception e) {
        }
      }
    break;
case YEAH:
  try {
    sender.recievedYeah(new Packet.Yeah(packet.getData()));
  }
 catch (  Exception e) {
  }
break;
case GDAY:
manager.receivedGday(new Peer(packet.getAddress(),packet.getPort()),new Packet.GDay(packet.getData()));
break;
case GBYE:
manager.recievedGbye(packet.getAddress().toString(),new Packet.GBye(packet.getData()));
break;
default :
System.err.println(""String_Node_Str"" + packet.getData().toString());
}
}
 catch (IOException e) {
e.printStackTrace();
break;
}
}
socket.close();
}"
24521,"public static void main(String[] args) throws IOException {
  String multicastAddr=args[0];
  int port=Integer.parseInt(args[1]);
  String nickname=args[2];
  MulticastSocket socket=new MulticastSocket(port);
  socket.joinGroup(InetAddress.getByName(multicastAddr));
  MembershipManager m=new MembershipManager(multicastAddr,socket,nickname);
  Sender sender=new Sender(m,socket,nickname);
  Receiver receiver=new Receiver(m,socket,sender);
}","public static void main(String[] args) throws IOException {
  String addr=args[0];
  int port=Integer.parseInt(args[1]);
  String nickname=args[2];
  MulticastSocket socket=new MulticastSocket(port);
  socket.joinGroup(InetAddress.getByName(addr));
  MembershipManager m=new MembershipManager(socket,addr,port,nickname);
  Sender sender=new Sender(m,socket,nickname);
  new Receiver(m,socket,sender);
}"
24522,"public MembershipManager(String multicastAddr,MulticastSocket socket,String nickname){
  this.addr=multicastAddr;
  this.socket=socket;
  this.nickname=nickname;
  new GDayThread().start();
  System.err.println(""String_Node_Str"");
}","public MembershipManager(MulticastSocket socket,String multicastAddr,int port,String nickname){
  this.addr=multicastAddr;
  this.socket=socket;
  this.nickname=nickname;
  this.port=port;
  new GDayThread().start();
}"
24523,"public void run(){
  while (true) {
    try {
      socket.send(new DatagramPacket(gday,gday.length,InetAddress.getByName(addr),socket.getPort()));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    try {
      Thread.sleep(SEND_INTERVAL);
    }
 catch (    InterruptedException e) {
    }
  }
}","public void run(){
  while (true) {
    try {
      socket.send(new DatagramPacket(gday,gday.length,InetAddress.getByName(addr),port));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    try {
      Thread.sleep(SEND_INTERVAL);
    }
 catch (    InterruptedException e) {
    }
  }
}"
24524,"public Yeah(byte[] payload){
  String[] delimitedContents=Utils.byteArrayToString(payload).toString().split(""String_Node_Str"");
  if (delimitedContents.length != 2 || !delimitedContents[0].equals(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"");
  this.sequenceNumber=Integer.parseInt(delimitedContents[1]);
}","public Yeah(byte[] payload){
  String[] delimitedContents=Utils.byteArrayToString(payload).split(""String_Node_Str"");
  if (delimitedContents.length != 2 || !delimitedContents[0].equals(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"");
  this.sequenceNumber=Integer.parseInt(delimitedContents[1].trim());
}"
24525,"public Says(byte[] payload){
  String[] delimitedContents=Utils.byteArrayToString(payload).split(""String_Node_Str"");
  if (delimitedContents.length != 4 || !delimitedContents[0].equals(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"");
  this.nickname=delimitedContents[1];
  this.sequenceNumber=Integer.parseInt(delimitedContents[2]);
  String message=delimitedContents[3];
  for (int i=4; i < delimitedContents.length; i++) {
    message+=""String_Node_Str"" + delimitedContents;
  }
  this.message=delimitedContents[3];
}","public Says(byte[] payload){
  String[] delimitedContents=Utils.byteArrayToString(payload).split(""String_Node_Str"");
  if (delimitedContents.length < 4 || !delimitedContents[0].equals(""String_Node_Str""))   throw new IllegalArgumentException(""String_Node_Str"");
  this.nickname=delimitedContents[1];
  this.sequenceNumber=Integer.parseInt(delimitedContents[2]);
  StringBuilder message=new StringBuilder(delimitedContents[3]);
  for (int i=4; i < delimitedContents.length; i++) {
    message.append(""String_Node_Str"" + delimitedContents[i].trim());
  }
  this.message=message.toString();
}"
24526,"public void run(){
  while (true) {
    try {
      byte[] buf=new byte[256];
      DatagramPacket packet=new DatagramPacket(buf,buf.length);
      socket.receive(packet);
      Packet type=Packet.getType(packet.getData());
switch (type) {
case SAYS:
        Packet.Says says=new Packet.Says(packet.getData());
      Integer lastSeqNum=lastSeqNumsReceived.get(says.nickname);
    if (lastSeqNum == null || lastSeqNum < says.sequenceNumber) {
      System.out.println(Utils.boxify(says));
      lastSeqNumsReceived.put(says.nickname,lastSeqNum);
    }
  packet=new DatagramPacket(buf,buf.length,packet.getAddress(),packet.getPort());
socket.send(packet);
break;
case YEAH:
sender.recievedYeah(new Packet.Yeah(packet.getData()));
break;
case GDAY:
manager.receivedGday(new Peer(packet.getAddress(),packet.getPort()),new Packet.GDay(packet.getData()));
break;
case GBYE:
manager.recievedGbye(new Packet.GBye(packet.getData()));
break;
default :
System.err.println(""String_Node_Str"" + packet.getData().toString());
}
}
 catch (IOException e) {
e.printStackTrace();
break;
}
}
socket.close();
}","public void run(){
  while (true) {
    try {
      byte[] buf=new byte[256];
      DatagramPacket packet=new DatagramPacket(buf,buf.length);
      socket.receive(packet);
      Packet type=Packet.getType(packet.getData());
switch (type) {
case SAYS:
        Packet.Says says=new Packet.Says(packet.getData());
      Integer lastSeqNum=lastSeqNumsReceived.get(says.nickname);
    if (lastSeqNum == null || lastSeqNum <= says.sequenceNumber) {
      System.out.println(Utils.boxify(says));
      lastSeqNum=says.sequenceNumber;
    }
  lastSeqNumsReceived.put(says.nickname,lastSeqNum);
buf=new Packet.Yeah(lastSeqNum).toBytes();
packet=new DatagramPacket(buf,buf.length,packet.getAddress(),packet.getPort());
socket.send(packet);
break;
case YEAH:
sender.recievedYeah(new Packet.Yeah(packet.getData()));
break;
case GDAY:
manager.receivedGday(new Peer(packet.getAddress(),packet.getPort()),new Packet.GDay(packet.getData()));
break;
case GBYE:
manager.recievedGbye(new Packet.GBye(packet.getData()));
break;
default :
System.err.println(""String_Node_Str"" + packet.getData().toString());
}
}
 catch (IOException e) {
e.printStackTrace();
break;
}
}
socket.close();
}"
24527,"public static String boxify(Packet.Says packet){
  String[] lines=packet.message.split(""String_Node_Str"");
  int width=packet.nickname.length() + 6;
  for (  String line : lines)   if (line.length() > width)   width=line.length();
  String bar=repeat(""String_Node_Str"",width + 4);
  String rtn=bar + ""String_Node_Str"";
  rtn+=""String_Node_Str"" + packet.nickname + repeat(""String_Node_Str"",width - packet.nickname.length() - 6)+ ""String_Node_Str"";
  for (  String line : lines)   rtn+=""String_Node_Str"" + line + repeat(""String_Node_Str"",width - line.length())+ ""String_Node_Str"";
  return rtn + bar;
}","public static String boxify(Packet.Says packet){
  return packet.message + ""String_Node_Str"" + packet.nickname+ ""String_Node_Str"";
}"
24528,"public Retransmitter(int sequenceNumber,DatagramPacket outgoingPacket){
  this.numberRetransmits=0;
  this.sequenceNumber=sequenceNumber;
  this.outgoingPacket=outgoingPacket;
}","public Retransmitter(int sequenceNumber,DatagramPacket outgoingPacket,int curRetransmits){
  this.numberRetransmits=curRetransmits;
  this.sequenceNumber=sequenceNumber;
  this.outgoingPacket=outgoingPacket;
}"
24529,"public void run(){
  this.cancel();
  numberRetransmits+=1;
  if (pendingYeahs.containsKey(sequenceNumber)) {
    if (numberRetransmits < MAX_RETRIES) {
      try {
        socket.send(outgoingPacket);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      timer.schedule(this,TIMEOUT_MILLIS);
    }
 else {
      pendingYeahs.remove(sequenceNumber);
    }
  }
}","public void run(){
  this.cancel();
  numberRetransmits+=1;
  if (pendingYeahs.containsKey(sequenceNumber)) {
    if (numberRetransmits < MAX_RETRIES) {
      try {
        socket.send(outgoingPacket);
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
      timer.schedule(new Retransmitter(this),TIMEOUT_MILLIS);
    }
 else {
      pendingYeahs.remove(sequenceNumber);
    }
  }
}"
24530,"public void run(){
  while (true) {
    try {
      byte[] buf=new byte[256];
      DatagramPacket packet=new DatagramPacket(buf,buf.length);
      socket.receive(packet);
      Packet type=Packet.getType(packet.getData());
switch (type) {
case SAYS:
        Packet.Says says=new Packet.Says(packet.getData());
      Integer lastSeqNum=lastSeqNumsReceived.get(says.nickname);
    if (lastSeqNum == null || lastSeqNum <= says.sequenceNumber) {
      System.out.println(Utils.boxify(says));
      lastSeqNum=says.sequenceNumber;
    }
  lastSeqNumsReceived.put(says.nickname,lastSeqNum);
try {
  buf=new Packet.Yeah(lastSeqNum).toBytes();
  packet=new DatagramPacket(buf,buf.length,packet.getAddress(),packet.getPort());
  socket.send(packet);
}
 catch (Exception e) {
}
break;
case YEAH:
try {
sender.recievedYeah(new Packet.Yeah(packet.getData()));
}
 catch (Exception e) {
}
break;
case GDAY:
manager.receivedGday(new Peer(packet.getAddress(),packet.getPort()),new Packet.GDay(packet.getData()));
break;
case GBYE:
manager.recievedGbye(new Packet.GBye(packet.getData()));
break;
default :
System.err.println(""String_Node_Str"" + packet.getData().toString());
}
}
 catch (IOException e) {
e.printStackTrace();
break;
}
}
socket.close();
}","public void run(){
  while (true) {
    try {
      byte[] buf=new byte[256];
      DatagramPacket packet=new DatagramPacket(buf,buf.length);
      socket.receive(packet);
      Packet type=Packet.getType(packet.getData());
switch (type) {
case SAYS:
        Packet.Says says=new Packet.Says(packet.getData());
      if (manager.isPeer(says.nickname)) {
        Integer lastSeqNum=lastSeqNumsReceived.get(says.nickname);
        if (lastSeqNum == null || lastSeqNum <= says.sequenceNumber) {
          System.out.println(Utils.boxify(says));
          lastSeqNum=says.sequenceNumber;
        }
        lastSeqNumsReceived.put(says.nickname,lastSeqNum);
        try {
          buf=new Packet.Yeah(lastSeqNum).toBytes();
          packet=new DatagramPacket(buf,buf.length,packet.getAddress(),packet.getPort());
          socket.send(packet);
        }
 catch (        Exception e) {
        }
      }
    break;
case YEAH:
  try {
    sender.recievedYeah(new Packet.Yeah(packet.getData()));
  }
 catch (  Exception e) {
  }
break;
case GDAY:
manager.receivedGday(new Peer(packet.getAddress(),packet.getPort()),new Packet.GDay(packet.getData()));
break;
case GBYE:
manager.recievedGbye(new Packet.GBye(packet.getData()));
break;
default :
System.err.println(""String_Node_Str"" + packet.getData().toString());
}
}
 catch (IOException e) {
e.printStackTrace();
break;
}
}
socket.close();
}"
24531,"public static void main(String[] args) throws IOException {
  String multicastAddr=args[0];
  int port=Integer.parseInt(args[1]);
  String nickname=args[2];
  MulticastSocket socket=new MulticastSocket(port);
  System.err.println(""String_Node_Str"");
  MembershipManager m=new MembershipManager(multicastAddr,socket,nickname);
  System.err.println(""String_Node_Str"");
  Sender sender=new Sender(m,socket,nickname);
  System.err.println(""String_Node_Str"");
  Receiver receiver=new Receiver(m,socket,sender);
  System.err.println(""String_Node_Str"");
}","public static void main(String[] args) throws IOException {
  String multicastAddr=args[0];
  int port=Integer.parseInt(args[1]);
  String nickname=args[2];
  MulticastSocket socket=new MulticastSocket(port);
  socket.joinGroup(InetAddress.getByName(multicastAddr));
  MembershipManager m=new MembershipManager(multicastAddr,socket,nickname);
  Sender sender=new Sender(m,socket,nickname);
  Receiver receiver=new Receiver(m,socket,sender);
}"
24532,"public MembershipManager(String multicastAddr,MulticastSocket socket,String nickname){
  this.addr=multicastAddr;
  this.socket=socket;
  this.nickname=nickname;
  new GDayThread().run();
}","public MembershipManager(String multicastAddr,MulticastSocket socket,String nickname){
  this.addr=multicastAddr;
  this.socket=socket;
  this.nickname=nickname;
  new GDayThread().start();
  System.err.println(""String_Node_Str"");
}"
24533,"public void run(){
  while (true) {
    try {
      Thread.sleep(SEND_INTERVAL);
      socket.send(new DatagramPacket(gday,gday.length,InetAddress.getByName(addr),socket.getPort()));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","public void run(){
  while (true) {
    try {
      socket.send(new DatagramPacket(gday,gday.length,InetAddress.getByName(addr),socket.getPort()));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
    try {
      Thread.sleep(SEND_INTERVAL);
    }
 catch (    InterruptedException e) {
    }
  }
}"
24534,"public Receiver(MembershipManager manager,DatagramSocket sock,Sender sender) throws IOException {
  this.socket=sock;
  this.manager=manager;
  this.sender=sender;
  new UDPListenerThread().run();
}","public Receiver(MembershipManager manager,DatagramSocket sock,Sender sender) throws IOException {
  this.socket=sock;
  this.manager=manager;
  this.sender=sender;
  new UDPListenerThread().start();
}"
24535,"public Sender(MembershipManager manager,DatagramSocket sock,String nickname){
  this.manager=manager;
  this.socket=sock;
  this.ourNickname=nickname;
  nextSequenceNumber=0;
  new KeyboardListener();
}","public Sender(MembershipManager manager,DatagramSocket sock,String nickname){
  this.manager=manager;
  this.socket=sock;
  this.ourNickname=nickname;
  nextSequenceNumber=0;
  new KeyboardListener().start();
}"
24536,"/** 
 * When receiving IRC-message
 */
protected void onMessage(String channel,String sender,String login,String hostname,String message){
  if (message.equalsIgnoreCase(""String_Node_Str"")) {
    String time=new java.util.Date().toString();
    botManager.sendMessage(channel,sender + ""String_Node_Str"" + time);
  }
 else   if (message.equalsIgnoreCase(""String_Node_Str"")) {
    botManager.sendMessage(channel,sender + ""String_Node_Str"" + ""String_Node_Str"");
  }
 else   if (message.equalsIgnoreCase(""String_Node_Str"") && sender.startsWith(trustedSender)) {
    forwardMessages=false;
    botManager.sendMessage(channel,""String_Node_Str"");
  }
 else   if (message.equalsIgnoreCase(""String_Node_Str"") && sender.startsWith(trustedSender)) {
    forwardMessages=true;
    botManager.sendMessage(channel,""String_Node_Str"");
  }
 else {
    try {
      if (forwardMessages && sender.startsWith(trustedSender))       chat.sendMessage(""String_Node_Str"" + sender + ""String_Node_Str""+ message);
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
}","/** 
 * When receiving IRC-message
 */
protected void onMessage(String channel,String sender,String login,String hostname,String message){
  if (message.equalsIgnoreCase(""String_Node_Str"")) {
    String time=new java.util.Date().toString();
    botManager.sendMessage(channel,sender + ""String_Node_Str"" + time);
  }
 else   if (message.equalsIgnoreCase(""String_Node_Str"")) {
    botManager.sendMessage(channel,sender + ""String_Node_Str"" + ""String_Node_Str"");
  }
 else   if (message.equalsIgnoreCase(""String_Node_Str"") && sender.startsWith(trustedSender)) {
    forwardMessages=false;
    botManager.sendMessage(channel,""String_Node_Str"");
  }
 else   if (message.equalsIgnoreCase(""String_Node_Str"") && sender.startsWith(trustedSender)) {
    forwardMessages=true;
    botManager.sendMessage(channel,""String_Node_Str"");
  }
 else {
    try {
      if (forwardMessages && !sender.startsWith(trustedSender))       chat.sendMessage(""String_Node_Str"" + sender + ""String_Node_Str""+ message);
    }
 catch (    Exception e) {
      System.err.println(""String_Node_Str"");
      e.printStackTrace();
    }
  }
}"
24537,"private void logMessage(String message){
  if (!getDate().equals(currentDate)) {
    try {
      logger.removeAppender(fileAppender);
      fileAppender.close();
      uploadFile(currentDate + ""String_Node_Str"");
      File f=new File(currentDate + ""String_Node_Str"");
      if (f.exists() && f.canWrite()) {
        f.delete();
      }
 else {
        System.err.println(""String_Node_Str"" + currentDate + ""String_Node_Str""+ ""String_Node_Str"");
        System.exit(1);
      }
      currentDate=getDate();
      fileAppender=new FileAppender(new SimplifiedHTMLLayout(),currentDate + ""String_Node_Str"");
      logger.addAppender(fileAppender);
    }
 catch (    IOException e) {
      System.out.println(e.toString());
    }
  }
  logger.info(message);
  uploadFile(fileAppender.getFile());
  try {
    makeFileIndex();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}","private void logMessage(String message){
  if (!getDate().equals(currentDate)) {
    try {
      logger.removeAppender(fileAppender);
      fileAppender.close();
      uploadFile(currentDate + ""String_Node_Str"");
      File f=new File(currentDate + ""String_Node_Str"");
      if (f.exists() && f.canWrite()) {
        f.delete();
      }
 else {
        System.err.println(""String_Node_Str"" + currentDate + ""String_Node_Str""+ ""String_Node_Str"");
        System.exit(1);
      }
      currentDate=getDate();
      fileAppender=new FileAppender(new HTMLLayout(),currentDate + ""String_Node_Str"");
      logger.addAppender(fileAppender);
    }
 catch (    IOException e) {
      System.out.println(e.toString());
    }
  }
  logger.info(message);
  uploadFile(fileAppender.getFile());
  try {
    makeFileIndex();
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
24538,"private synchronized void uploadFile(String fileName){
  try {
    ftp.connect();
    ftp.uploadFile(fileName,fileName);
    ftp.disconnect();
  }
 catch (  FTPException e) {
    System.out.println(e.toString());
  }
catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    try {
      ftp.disconnect();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}","private synchronized void uploadFile(String fileName){
  try {
    ftp.connect();
    ftp.uploadFile(fileName,fileName);
  }
 catch (  FTPException e) {
    System.out.println(e.toString());
  }
catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    try {
      ftp.disconnect();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}"
24539,"public void processMessage(Chat chat,Message message){
  if (message.getType().equals(Message.Type.chat) && message.getBody() != null) {
    System.out.println(""String_Node_Str"" + message.getBody());
    if (message.getBody().equalsIgnoreCase(""String_Node_Str"")) {
      forwardMessages=false;
    }
 else     if (message.getBody().equalsIgnoreCase(""String_Node_Str"")) {
      forwardMessages=true;
    }
 else     if (message.getBody().equalsIgnoreCase(""String_Node_Str"")) {
      try {
        chat.sendMessage(""String_Node_Str"" + ""String_Node_Str"" + forwardMessages + ""String_Node_Str"");
      }
 catch (      XMPPException e) {
        System.out.println(""String_Node_Str"");
      }
    }
 else     if (message.getBody().equalsIgnoreCase(""String_Node_Str"")) {
      try {
        User[] users=botManager.getUsers(botManager.getChannel());
        String userList=""String_Node_Str"";
        for (        User u : users) {
          userList+=(u.getNick() + ""String_Node_Str"");
        }
        chat.sendMessage(userList);
      }
 catch (      XMPPException e) {
        System.out.println(""String_Node_Str"");
      }
    }
 else     if (message.getBody().equalsIgnoreCase(""String_Node_Str"")) {
      try {
        botManager.reconnect();
      }
 catch (      Exception e) {
        e.printStackTrace();
        try {
          chat.sendMessage(e.toString());
        }
 catch (        XMPPException e1) {
          e1.printStackTrace();
        }
      }
    }
 else {
      botManager.sendMessage(message.getBody(),getThis());
    }
  }
 else {
    System.out.println(""String_Node_Str"");
  }
}","public void processMessage(Chat chat,Message message){
  if (message.getType().equals(Message.Type.chat) && message.getBody() != null) {
    System.out.println(""String_Node_Str"" + message.getBody());
    if (message.getBody().equalsIgnoreCase(""String_Node_Str"")) {
      forwardMessages=false;
    }
 else     if (message.getBody().equalsIgnoreCase(""String_Node_Str"")) {
      forwardMessages=true;
    }
 else     if (message.getBody().equalsIgnoreCase(""String_Node_Str"")) {
      try {
        chat.sendMessage(""String_Node_Str"" + ""String_Node_Str"" + forwardMessages + ""String_Node_Str"");
      }
 catch (      XMPPException e) {
        System.out.println(""String_Node_Str"");
      }
    }
 else     if (message.getBody().equalsIgnoreCase(""String_Node_Str"")) {
      try {
        User[] users=botManager.getUsers(botManager.getChannel());
        String userList=""String_Node_Str"";
        for (        User u : users) {
          userList+=(u.getNick() + ""String_Node_Str"");
        }
        chat.sendMessage(userList);
      }
 catch (      XMPPException e) {
        System.out.println(""String_Node_Str"");
      }
    }
 else     if (message.getBody().equalsIgnoreCase(""String_Node_Str"")) {
      try {
        botManager.disconnect();
      }
 catch (      Exception e) {
        e.printStackTrace();
        try {
          chat.sendMessage(e.toString());
        }
 catch (        XMPPException e1) {
          e1.printStackTrace();
        }
      }
      try {
        botManager.reconnect();
      }
 catch (      Exception e) {
        e.printStackTrace();
        try {
          chat.sendMessage(e.toString());
        }
 catch (        XMPPException e1) {
          e1.printStackTrace();
        }
      }
    }
 else {
      botManager.sendMessage(message.getBody(),getThis());
    }
  }
 else {
    System.out.println(""String_Node_Str"");
  }
}"
24540,"private void parse(){
  try {
    arguments=new ArrayList<String>();
    envVars=new HashMap<String,String>();
class StringArrayMemory extends Memory {
      private long offset=0;
      StringArrayMemory(      long l){
        super(l);
      }
      int readInt(){
        int r=getInt(offset);
        offset+=sizeOfInt;
        return r;
      }
      boolean hasMore(){
        return offset < getSize();
      }
      byte peek(){
        return getByte(offset);
      }
      String readString(){
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        byte ch;
        while (hasMore() && (ch=getByte(offset++)) != '\0') {
          baos.write(ch);
        }
        return baos.toString();
      }
      void skip0(){
        while (getByte(offset) == '\0') {
          offset++;
        }
      }
    }
    IntByReference newSize=new IntByReference();
    IntByReference size=new IntByReference(sizeOfInt);
    if (LIBC.sysctl(new int[]{CTL_KERN,KERN_PROCARGS2,pid},3,NULL,size,NULL,newSize) != 0) {
      throw new IOException(""String_Node_Str"" + LIBC.strerror(Native.getLastError()));
    }
    size.setValue(size.getValue() + 1);
    StringArrayMemory m=new StringArrayMemory(size.getValue());
    if (LIBC.sysctl(new int[]{CTL_KERN,KERN_PROCARGS2,pid},3,m,size,NULL,newSize) != 0) {
      throw new IOException(""String_Node_Str"" + LIBC.strerror(Native.getLastError()));
    }
    int nargs=m.readInt();
    m.readString();
    for (int i=0; i < nargs; i++) {
      m.skip0();
      arguments.add(m.readString());
    }
    while (m.hasMore() && m.peek() != 0) {
      String line=m.readString();
      int sep=line.indexOf('=');
      if (sep > 0) {
        envVars.put(line.substring(0,sep),line.substring(sep + 1));
      }
    }
  }
 catch (  IOException e) {
  }
}","private void parse(){
  final int sizeOfInt=Native.getNativeSize(int.class);
  try {
    arguments=new ArrayList<String>();
    envVars=new HashMap<String,String>();
class StringArrayMemory extends Memory {
      private long offset=0;
      StringArrayMemory(      long l){
        super(l);
      }
      int readInt(){
        int r=getInt(offset);
        offset+=sizeOfInt;
        return r;
      }
      boolean hasMore(){
        return offset < getSize();
      }
      byte peek(){
        return getByte(offset);
      }
      String readString(){
        ByteArrayOutputStream baos=new ByteArrayOutputStream();
        byte ch;
        while (hasMore() && (ch=getByte(offset++)) != '\0') {
          baos.write(ch);
        }
        return baos.toString();
      }
      void skip0(){
        while (getByte(offset) == '\0') {
          offset++;
        }
      }
    }
    IntByReference newSize=new IntByReference();
    IntByReference size=new IntByReference(sizeOfInt);
    if (LIBC.sysctl(new int[]{CTL_KERN,KERN_PROCARGS2,pid},3,NULL,size,NULL,newSize) != 0) {
      throw new IOException(""String_Node_Str"" + LIBC.strerror(Native.getLastError()));
    }
    size.setValue(size.getValue() + 1);
    StringArrayMemory m=new StringArrayMemory(size.getValue());
    if (LIBC.sysctl(new int[]{CTL_KERN,KERN_PROCARGS2,pid},3,m,size,NULL,newSize) != 0) {
      throw new IOException(""String_Node_Str"" + LIBC.strerror(Native.getLastError()));
    }
    int nargs=m.readInt();
    m.readString();
    for (int i=0; i < nargs; i++) {
      m.skip0();
      arguments.add(m.readString());
    }
    while (m.hasMore() && m.peek() != 0) {
      String line=m.readString();
      int sep=line.indexOf('=');
      if (sep > 0) {
        envVars.put(line.substring(0,sep),line.substring(sep + 1));
      }
    }
  }
 catch (  IOException e) {
  }
}"
24541,"@Override public List<NativeProcess> getMacProcesses() throws NativeAccessException {
  List<NativeProcess> processList=new ArrayList<NativeProcess>();
  try {
    IntByReference _=new IntByReference(sizeOfInt);
    IntByReference size=new IntByReference(sizeOfInt);
    Memory m;
    int nRetry=0;
    while (true) {
      if (LIBC.sysctl(MIB_PROC_ALL,3,NULL,size,NULL,_) != 0) {
        throw new IOException(""String_Node_Str"" + LIBC.strerror(Native.getLastError()));
      }
      m=new Memory(size.getValue());
      if (LIBC.sysctl(MIB_PROC_ALL,3,m,size,NULL,_) != 0) {
        if (Native.getLastError() == ENOMEM && nRetry++ < 16) {
          continue;
        }
        throw new IOException(""String_Node_Str"" + LIBC.strerror(Native.getLastError()));
      }
      break;
    }
    int count=size.getValue() / sizeOf_kinfo_proc;
    LOGGER.log(Level.FINE,""String_Node_Str"",count);
    for (int base=0; base < size.getValue(); base+=sizeOf_kinfo_proc) {
      int pid=m.getInt(base + 24);
      int ppid=m.getInt(base + 416);
      processList.add(new NativeMacProcess(pid,ppid));
    }
  }
 catch (  IOException e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",e);
  }
  return processList;
}","@Override public List<NativeProcess> getMacProcesses() throws NativeAccessException {
  int sizeOfInt=Native.getNativeSize(int.class);
  List<NativeProcess> processList=new ArrayList<NativeProcess>();
  String arch=System.getProperty(""String_Node_Str"");
  if (""String_Node_Str"".equals(arch)) {
    sizeOf_kinfo_proc=sizeOf_kinfo_proc_64;
    kinfo_proc_pid_offset=kinfo_proc_pid_offset_64;
    kinfo_proc_ppid_offset=kinfo_proc_ppid_offset_64;
  }
 else {
    sizeOf_kinfo_proc=sizeOf_kinfo_proc_32;
    kinfo_proc_pid_offset=kinfo_proc_pid_offset_32;
    kinfo_proc_ppid_offset=kinfo_proc_ppid_offset_32;
  }
  try {
    IntByReference _=new IntByReference(sizeOfInt);
    IntByReference size=new IntByReference(sizeOfInt);
    Memory m;
    int nRetry=0;
    while (true) {
      if (LIBC.sysctl(MIB_PROC_ALL,3,NULL,size,NULL,_) != 0) {
        throw new IOException(""String_Node_Str"" + LIBC.strerror(Native.getLastError()));
      }
      m=new Memory(size.getValue());
      if (LIBC.sysctl(MIB_PROC_ALL,3,m,size,NULL,_) != 0) {
        if (Native.getLastError() == ENOMEM && nRetry++ < 16) {
          continue;
        }
        throw new IOException(""String_Node_Str"" + LIBC.strerror(Native.getLastError()));
      }
      break;
    }
    int count=size.getValue() / sizeOf_kinfo_proc;
    LOGGER.log(Level.FINE,""String_Node_Str"",count);
    for (int base=0; base < size.getValue(); base+=sizeOf_kinfo_proc) {
      int pid=m.getInt(base + kinfo_proc_pid_offset);
      int ppid=m.getInt(base + kinfo_proc_ppid_offset);
      processList.add(new NativeMacProcess(pid,ppid));
    }
  }
 catch (  IOException e) {
    LOGGER.log(Level.WARNING,""String_Node_Str"",e);
  }
  return processList;
}"
24542,"public Map<String,String> getEnvironmentVariables(){
  try {
    return nativeWindowsProcess.getEnvironmentVariables();
  }
 catch (  WinpException exc) {
    throw new NativeAccessException(exc);
  }
}","public Map<String,String> getEnvironmentVariables(){
  try {
    return nativeWindowsProcess.getEnvironmentVariables();
  }
 catch (  WinpException exc) {
    System.out.println(exc.getLocalizedMessage());
    return new HashMap();
  }
}"
24543,"public String getCommandLine(){
  return nativeWindowsProcess.getCommandLine();
}","public String getCommandLine(){
  try {
    return nativeWindowsProcess.getCommandLine();
  }
 catch (  WinpException exc) {
    System.out.println(exc.getLocalizedMessage());
    return ""String_Node_Str"";
  }
}"
24544,"@Override public boolean hasSupportFor(NativeFunction nativeFunc){
switch (nativeFunc) {
case WINDOWS_PROCESS:
    return true;
case WINDOWS_EXEC:
  return true;
case WINDOWS_FILE_MOVE:
return true;
case ERROR:
return true;
}
return false;
}","@Override public boolean hasSupportFor(NativeFunction nativeFunc){
switch (nativeFunc) {
case DOTNET:
    return true;
case WINDOWS_PROCESS:
  return true;
case WINDOWS_EXEC:
return true;
case WINDOWS_FILE_MOVE:
return true;
case ERROR:
return true;
}
return false;
}"
24545,"@Override public void windowsMoveFile(File fromFile,File toFile){
  Kernel32.INSTANCE.MoveFileExA(fromFile.getAbsolutePath(),toFile.getAbsolutePath(),MOVEFILE_DELAY_UNTIL_REBOOT | MOVEFILE_REPLACE_EXISTING);
}","@Override public void windowsMoveFile(File fromFile,File toFile){
  Kernel32.INSTANCE.MoveFileExA(fromFile.getAbsolutePath(),toFile.getAbsolutePath(),MOVEFILE_COPY_ALLOWED | MOVEFILE_REPLACE_EXISTING);
}"
24546,"/** 
 * Test of getMacProcesses method, of class JnaNativeMacSupport.
 */
@Test public void testGetMacProcesses(){
  System.out.println(""String_Node_Str"");
  JnaNativeMacSupport instance=new JnaNativeMacSupport();
  List<NativeProcess> result=instance.getMacProcesses();
  for (  NativeProcess process : result) {
    System.out.println(""String_Node_Str"" + process.getPid());
    System.out.println(""String_Node_Str"" + process.getPpid());
    System.out.println(""String_Node_Str"" + process.getCommandLine());
    System.out.println(""String_Node_Str"");
    Map<String,String> envs=process.getEnvironmentVariables();
    for (    String envStr : envs.keySet()) {
      System.out.println(envStr + ""String_Node_Str"" + envs.get(envStr));
    }
    process.getPid();
  }
}","/** 
 * Test of getMacProcesses method, of class JnaNativeMacSupport. Nothing special but simply prints process info and verifies the method works
 */
@Test public void testGetMacProcesses(){
  if (Functions.isWindows())   return;
  String osName=Util.fixNull(System.getProperty(""String_Node_Str""));
  if (!osName.contains(""String_Node_Str""))   return;
  System.out.println(""String_Node_Str"");
  JnaNativeMacSupport instance=new JnaNativeMacSupport();
  List<NativeProcess> result=instance.getMacProcesses();
  for (  NativeProcess process : result) {
    System.out.println(""String_Node_Str"" + process.getPid());
    System.out.println(""String_Node_Str"" + process.getPpid());
    System.out.println(""String_Node_Str"" + process.getCommandLine());
    System.out.println(""String_Node_Str"");
    Map<String,String> envs=process.getEnvironmentVariables();
    for (    String envStr : envs.keySet()) {
      System.out.println(envStr + ""String_Node_Str"" + envs.get(envStr));
    }
  }
}"
24547,"/** 
 * Test of makeFileWritable method, of class JnaNativeUnixSupport.
 */
@Test public void testMakeFileWritable() throws IOException {
  File file=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  file.deleteOnExit();
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  int mask=Integer.parseInt(""String_Node_Str"",8);
  instance.chmod(file,mask);
  System.out.println(""String_Node_Str"" + Integer.toOctalString(instance.mode(file)));
  boolean result=instance.makeFileWritable(file);
  Assert.assertTrue(result);
  int expResult=33188;
  int resultMode=instance.mode(file);
  System.out.println(""String_Node_Str"" + Integer.toOctalString(resultMode));
  Assert.assertEquals(expResult,resultMode);
}","/** 
 * Test of makeFileWritable method, of class JnaNativeUnixSupport.
 */
@Test public void testMakeFileWritable() throws IOException {
  if (Functions.isWindows())   return;
  File file=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  file.deleteOnExit();
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  int mask=Integer.parseInt(""String_Node_Str"",8);
  instance.chmod(file,mask);
  System.out.println(""String_Node_Str"" + Integer.toOctalString(instance.mode(file)));
  boolean result=instance.makeFileWritable(file);
  Assert.assertTrue(result);
  int expResult=33188;
  int resultMode=instance.mode(file);
  System.out.println(""String_Node_Str"" + Integer.toOctalString(resultMode));
  Assert.assertEquals(expResult,resultMode);
}"
24548,"/** 
 * Test of chmod method, of class JnaNativeUnixSupport.
 */
@Test public void testChmod() throws IOException {
  File file=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  int mask=Integer.parseInt(""String_Node_Str"",8);
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  boolean result=instance.chmod(file,mask);
  Assert.assertTrue(result);
  int resultMask=instance.mode(file);
  System.out.println(""String_Node_Str"" + Integer.toOctalString(resultMask));
  Assert.assertEquals(mask,resultMask);
}","/** 
 * Test of chmod method, of class JnaNativeUnixSupport.
 */
@Test public void testChmod() throws IOException {
  if (Functions.isWindows())   return;
  File file=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  int mask=Integer.parseInt(""String_Node_Str"",8);
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  boolean result=instance.chmod(file,mask);
  Assert.assertTrue(result);
  int resultMask=instance.mode(file);
  System.out.println(""String_Node_Str"" + Integer.toOctalString(resultMask));
  Assert.assertEquals(mask,resultMask);
}"
24549,"/** 
 * Test of resolveSymlink method, of class JnaNativeUnixSupport.
 */
@Test public void testResolveSymlink() throws IOException {
  File symlinkToFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  symlinkToFile.deleteOnExit();
  File tempDir=symlinkToFile.getParentFile();
  String targetPath=tempDir.getAbsolutePath() + ""String_Node_Str"" + RandomStringUtils.randomAlphanumeric(8);
  System.out.println(targetPath);
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  instance.createSymlink(targetPath,symlinkToFile);
  File linkFile=new File(targetPath);
  String result=instance.resolveSymlink(linkFile);
  Assert.assertEquals(symlinkToFile.getAbsolutePath(),result);
}","/** 
 * Test of resolveSymlink method, of class JnaNativeUnixSupport.
 */
@Test public void testResolveSymlink() throws IOException {
  if (Functions.isWindows())   return;
  File symlinkToFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  symlinkToFile.deleteOnExit();
  File tempDir=symlinkToFile.getParentFile();
  String targetPath=tempDir.getAbsolutePath() + ""String_Node_Str"" + RandomStringUtils.randomAlphanumeric(8);
  System.out.println(targetPath);
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  instance.createSymlink(targetPath,symlinkToFile);
  File linkFile=new File(targetPath);
  String result=instance.resolveSymlink(linkFile);
  Assert.assertEquals(symlinkToFile.getAbsolutePath(),result);
}"
24550,"/** 
 * Test of createSymlink method, of class JnaNativeUnixSupport.
 */
@Test public void testCreateSymlink() throws IOException {
  File symlinkToFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  symlinkToFile.deleteOnExit();
  File tempDir=symlinkToFile.getParentFile();
  String targetPath=tempDir.getAbsolutePath() + ""String_Node_Str"" + RandomStringUtils.randomAlphanumeric(8);
  System.out.println(targetPath);
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  boolean result=instance.createSymlink(targetPath,symlinkToFile);
  if (!result) {
    System.out.println(""String_Node_Str"" + instance.getLastError());
  }
  Assert.assertTrue(result);
}","/** 
 * Test of createSymlink method, of class JnaNativeUnixSupport.
 */
@Test public void testCreateSymlink() throws IOException {
  if (Functions.isWindows())   return;
  File symlinkToFile=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  symlinkToFile.deleteOnExit();
  File tempDir=symlinkToFile.getParentFile();
  String targetPath=tempDir.getAbsolutePath() + ""String_Node_Str"" + RandomStringUtils.randomAlphanumeric(8);
  System.out.println(targetPath);
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  boolean result=instance.createSymlink(targetPath,symlinkToFile);
  if (!result) {
    System.out.println(""String_Node_Str"" + instance.getLastError());
  }
  Assert.assertTrue(result);
}"
24551,"/** 
 * Test of mode method, of class JnaNativeUnixSupport.
 */
@Test public void testMode() throws IOException {
  File file=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  int expResult=33188;
  int result=instance.mode(file);
  System.out.println(""String_Node_Str"" + Integer.toOctalString(result));
  Assert.assertEquals(expResult,result);
}","/** 
 * Test of mode method, of class JnaNativeUnixSupport.
 */
@Test public void testMode() throws IOException {
  if (Functions.isWindows())   return;
  File file=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  int expResult=33188;
  int result=instance.mode(file);
  System.out.println(""String_Node_Str"" + Integer.toOctalString(result));
  Assert.assertEquals(expResult,result);
}"
24552,"/** 
 * Test of chown method, of class JnaNativeUnixSupport.
 */
@Test public void testChown() throws IOException {
  File file=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  int uid=instance.getEuid();
  int gid=instance.getEgid();
  boolean result=instance.chown(file,uid,gid);
  Assert.assertTrue(result);
  boolean result2=instance.chown(file,uid + 1,gid);
  System.out.println(""String_Node_Str"" + instance.getLastError());
  Assert.assertFalse(result2);
}","/** 
 * Test of chown method, of class JnaNativeUnixSupport.
 */
@Test public void testChown() throws IOException {
  if (Functions.isWindows())   return;
  File file=File.createTempFile(""String_Node_Str"",""String_Node_Str"");
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  int uid=instance.getEuid();
  int gid=instance.getEgid();
  boolean result=instance.chown(file,uid,gid);
  Assert.assertTrue(result);
  boolean result2=instance.chown(file,uid + 1,gid);
  System.out.println(""String_Node_Str"" + instance.getLastError());
  Assert.assertFalse(result2);
}"
24553,"/** 
 * Test of pamAuthenticate method, of class JnaNativeUnixSupport. Ignored, because specific user name and password is needed. Remove @Ignore to test in your specific environment
 */
@Ignore public void testPamAuthenticate(){
  System.out.println(""String_Node_Str"");
  String serviceName=""String_Node_Str"";
  String userName=""String_Node_Str"";
  String password=""String_Node_Str"";
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  String expResult=""String_Node_Str"";
  Set<String> result=instance.pamAuthenticate(serviceName,userName,password);
  Iterator iter=result.iterator();
  while (iter.hasNext()) {
    System.out.println(iter.next());
  }
  Assert.assertTrue(result.contains(expResult));
}","/** 
 * Test of pamAuthenticate method, of class JnaNativeUnixSupport. Ignored, because specific user name and password is needed. Remove @Ignore to test in your specific environment
 */
@Ignore public void testPamAuthenticate(){
  if (Functions.isWindows())   return;
  System.out.println(""String_Node_Str"");
  String serviceName=""String_Node_Str"";
  String userName=""String_Node_Str"";
  String password=""String_Node_Str"";
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  String expResult=""String_Node_Str"";
  Set<String> result=instance.pamAuthenticate(serviceName,userName,password);
  Iterator iter=result.iterator();
  while (iter.hasNext()) {
    System.out.println(iter.next());
  }
  Assert.assertTrue(result.contains(expResult));
}"
24554,"/** 
 * Test of getLastError method, of class JnaNativeUnixSupport.
 */
@Test public void testGetLastError(){
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  String expResult=""String_Node_Str"";
  String result=instance.getLastError();
  Assert.assertEquals(expResult,result);
  System.out.println(result);
}","/** 
 * Test of getLastError method, of class JnaNativeUnixSupport.
 */
@Test public void testGetLastError(){
  if (Functions.isWindows())   return;
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  String expResult=""String_Node_Str"";
  String result=instance.getLastError();
  Assert.assertEquals(expResult,result);
  System.out.println(result);
}"
24555,"/** 
 * Test of canRestartJavaProcess method, of class JnaNativeUnixSupport.
 */
@Test public void testCanRestartJavaProcess(){
  System.out.println(""String_Node_Str"");
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  boolean result=instance.canRestartJavaProcess();
  Assert.assertTrue(result);
  System.out.println(""String_Node_Str"" + result);
}","/** 
 * Test of canRestartJavaProcess method, of class JnaNativeUnixSupport.
 */
@Test public void testCanRestartJavaProcess(){
  if (Functions.isWindows())   return;
  System.out.println(""String_Node_Str"");
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  boolean result=instance.canRestartJavaProcess();
  Assert.assertTrue(result);
  System.out.println(""String_Node_Str"" + result);
}"
24556,"/** 
 * Test of checkPamAuthentication method, of class JnaNativeUnixSupport.
 */
@Test public void testCheckPamAuthentication(){
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  String result=instance.checkPamAuthentication();
  System.out.println(""String_Node_Str"" + result);
}","/** 
 * Test of checkPamAuthentication method, of class JnaNativeUnixSupport.
 */
@Test public void testCheckPamAuthentication(){
  if (Functions.isWindows())   return;
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  String result=instance.checkPamAuthentication();
  System.out.println(""String_Node_Str"" + result);
}"
24557,"/** 
 * Test of getSystemMemory method, of class JnaNativeUnixSupport.  Just print out the result and make sure the method works Ignored because works fine on Solaris and Linux but on MAC fails with the following message No suitable implementation found: os.name=Mac OS X os.arch=x86_64 sun.arch.data.model=64
 */
@Ignore public void testGetSystemMemory(){
  System.out.println(""String_Node_Str"");
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  NativeSystemMemory result=instance.getSystemMemory();
  System.out.println(""String_Node_Str"" + result.getTotalSwapSpace());
  System.out.println(""String_Node_Str"" + result.getAvailableSwapSpace());
  System.out.println(""String_Node_Str"" + result.getTotalPhysicalMemory());
  System.out.println(""String_Node_Str"" + result.getAvailablePhysicalMemory());
}","/** 
 * Test of getSystemMemory method, of class JnaNativeUnixSupport.  Just print out the result and make sure the method works Ignored because works fine on Solaris and Linux but on MAC fails with the following message No suitable implementation found: os.name=Mac OS X os.arch=x86_64 sun.arch.data.model=64
 */
@Ignore public void testGetSystemMemory(){
  if (Functions.isWindows())   return;
  System.out.println(""String_Node_Str"");
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  NativeSystemMemory result=instance.getSystemMemory();
  System.out.println(""String_Node_Str"" + result.getTotalSwapSpace());
  System.out.println(""String_Node_Str"" + result.getAvailableSwapSpace());
  System.out.println(""String_Node_Str"" + result.getTotalPhysicalMemory());
  System.out.println(""String_Node_Str"" + result.getAvailablePhysicalMemory());
}"
24558,"/** 
 * Test of restartJavaProcess method, of class JnaNativeUnixSupport. This test must be ignored and tested only in a controlled condition, because it restarts the process again and the Test runs in an endless loop. It is exists just to test once in case of library changes
 */
@Ignore public void testRestartJavaProcess(){
  System.out.println(""String_Node_Str"");
  Map<String,String> properties=null;
  boolean daemonExec=false;
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  instance.restartJavaProcess(properties,daemonExec);
}","/** 
 * Test of restartJavaProcess method, of class JnaNativeUnixSupport. This test must be ignored and tested only in a controlled condition, because it restarts the process again and the Test runs in an endless loop. It is exists just to test once in case of library changes
 */
@Ignore public void testRestartJavaProcess(){
  if (Functions.isWindows())   return;
  System.out.println(""String_Node_Str"");
  Map<String,String> properties=null;
  boolean daemonExec=false;
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  instance.restartJavaProcess(properties,daemonExec);
}"
24559,"/** 
 * Test of pamAuthenticate method, of class JnaNativeUnixSupport. Ignored, because specific user name and password is needed. Remove @Ignore to test in your specific environment
 */
@Ignore public void testPamAuthenticate(){
  System.out.println(""String_Node_Str"");
  String serviceName=""String_Node_Str"";
  String userName=""String_Node_Str"";
  String password=""String_Node_Str"";
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  String expResult=""String_Node_Str"";
  Set<String> result=instance.pamAuthenticate(serviceName,userName,password);
  Iterator iter=result.iterator();
  while (iter.hasNext()) {
    System.out.println(iter.next());
  }
  Assert.assertTrue(result.contains(expResult));
}","/** 
 * Test of pamAuthenticate method, of class JnaNativeUnixSupport. Ignored, because specific user name and password is needed. Remove @Ignore to test in your specific environment
 */
@Ignore public void testPamAuthenticate(){
  if (Functions.isWindows())   return;
  System.out.println(""String_Node_Str"");
  String serviceName=""String_Node_Str"";
  String userName=""String_Node_Str"";
  String password=""String_Node_Str"";
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  String expResult=""String_Node_Str"";
  Set<String> result=instance.pamAuthenticate(serviceName,userName,password);
  Iterator iter=result.iterator();
  while (iter.hasNext()) {
    System.out.println(iter.next());
  }
  Assert.assertTrue(result.contains(expResult));
}"
24560,"/** 
 * Test of checkUnixUser method, of class JnaNativeUnixSupport. Ignored, because specific user name is needed Remove @Ignore to test in your specific environment
 */
@Ignore public void testCheckUnixUser(){
  String userName=""String_Node_Str"";
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  boolean result=instance.checkUnixUser(userName);
  Assert.assertTrue(result);
}","/** 
 * Test of checkUnixUser method, of class JnaNativeUnixSupport. Ignored, because specific user name is needed Remove @Ignore to test in your specific environment
 */
@Ignore public void testCheckUnixUser(){
  if (Functions.isWindows())   return;
  String userName=""String_Node_Str"";
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  boolean result=instance.checkUnixUser(userName);
  Assert.assertTrue(result);
}"
24561,"/** 
 * Test of getEuid method, of class JnaNativeUnixSupport. Simply get an print the current Effective User ID and make sure the function indeed works
 */
@Test public void testGetEuid(){
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  int result=instance.getEuid();
  System.out.println(""String_Node_Str"" + result);
}","/** 
 * Test of getEuid method, of class JnaNativeUnixSupport. Simply get an print the current Effective User ID and make sure the function indeed works
 */
@Test public void testGetEuid(){
  if (Functions.isWindows())   return;
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  int result=instance.getEuid();
  System.out.println(""String_Node_Str"" + result);
}"
24562,"/** 
 * Test of getProcessUser method, of class JnaNativeUnixSupport. Just print out the result and make sure the method works
 */
@Test public void testGetProcessUser(){
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  String result=instance.getProcessUser();
  System.out.println(""String_Node_Str"" + result);
}","/** 
 * Test of getProcessUser method, of class JnaNativeUnixSupport. Just print out the result and make sure the method works
 */
@Test public void testGetProcessUser(){
  if (Functions.isWindows())   return;
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  String result=instance.getProcessUser();
  System.out.println(""String_Node_Str"" + result);
}"
24563,"/** 
 * Test of getEgid method, of class JnaNativeUnixSupport. Simply get an print the current Effective User ID and make sure the function indeed works
 */
@Test public void testGetEgid(){
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  int result=instance.getEgid();
  System.out.println(""String_Node_Str"" + result);
}","/** 
 * Test of getEgid method, of class JnaNativeUnixSupport. Simply get an print the current Effective User ID and make sure the function indeed works
 */
@Test public void testGetEgid(){
  if (Functions.isWindows())   return;
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  int result=instance.getEgid();
  System.out.println(""String_Node_Str"" + result);
}"
24564,"/** 
 * Test of canRestartJavaProcess method, of class JnaNativeUnixSupport.
 */
@Test public void testCanRestartJavaProcess(){
  System.out.println(""String_Node_Str"");
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  boolean result=instance.canRestartJavaProcess();
  Assert.assertTrue(result);
  System.out.println(""String_Node_Str"" + result);
}","/** 
 * Test of canRestartJavaProcess method, of class JnaNativeUnixSupport.
 */
@Test public void testCanRestartJavaProcess(){
  if (Functions.isWindows())   return;
  System.out.println(""String_Node_Str"");
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  boolean result=instance.canRestartJavaProcess();
  Assert.assertTrue(result);
  System.out.println(""String_Node_Str"" + result);
}"
24565,"/** 
 * Test of checkPamAuthentication method, of class JnaNativeUnixSupport.
 */
@Test public void testCheckPamAuthentication(){
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  String result=instance.checkPamAuthentication();
  System.out.println(""String_Node_Str"" + result);
}","/** 
 * Test of checkPamAuthentication method, of class JnaNativeUnixSupport.
 */
@Test public void testCheckPamAuthentication(){
  if (Functions.isWindows())   return;
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  String result=instance.checkPamAuthentication();
  System.out.println(""String_Node_Str"" + result);
}"
24566,"/** 
 * Test of checkUnixGroup method, of class JnaNativeUnixSupport. Ignored, because specific group name is needed. Remove @Ignore to test in your specific environment
 */
@Ignore public void testCheckUnixGroup(){
  String groupName=""String_Node_Str"";
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  boolean result=instance.checkUnixGroup(groupName);
  Assert.assertTrue(result);
}","/** 
 * Test of checkUnixGroup method, of class JnaNativeUnixSupport. Ignored, because specific group name is needed. Remove @Ignore to test in your specific environment
 */
@Ignore public void testCheckUnixGroup(){
  if (Functions.isWindows())   return;
  String groupName=""String_Node_Str"";
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  boolean result=instance.checkUnixGroup(groupName);
  Assert.assertTrue(result);
}"
24567,"/** 
 * Test of getSystemMemory method, of class JnaNativeUnixSupport.  Just print out the result and make sure the method works Ignored because works fine on Solaris and Linux but on MAC fails with the following message No suitable implementation found: os.name=Mac OS X os.arch=x86_64 sun.arch.data.model=64
 */
@Ignore public void testGetSystemMemory(){
  System.out.println(""String_Node_Str"");
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  NativeSystemMemory result=instance.getSystemMemory();
  System.out.println(""String_Node_Str"" + result.getTotalSwapSpace());
  System.out.println(""String_Node_Str"" + result.getAvailableSwapSpace());
  System.out.println(""String_Node_Str"" + result.getTotalPhysicalMemory());
  System.out.println(""String_Node_Str"" + result.getAvailablePhysicalMemory());
}","/** 
 * Test of getSystemMemory method, of class JnaNativeUnixSupport.  Just print out the result and make sure the method works Ignored because works fine on Solaris and Linux but on MAC fails with the following message No suitable implementation found: os.name=Mac OS X os.arch=x86_64 sun.arch.data.model=64
 */
@Ignore public void testGetSystemMemory(){
  if (Functions.isWindows())   return;
  System.out.println(""String_Node_Str"");
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  NativeSystemMemory result=instance.getSystemMemory();
  System.out.println(""String_Node_Str"" + result.getTotalSwapSpace());
  System.out.println(""String_Node_Str"" + result.getAvailableSwapSpace());
  System.out.println(""String_Node_Str"" + result.getTotalPhysicalMemory());
  System.out.println(""String_Node_Str"" + result.getAvailablePhysicalMemory());
}"
24568,"/** 
 * Test of restartJavaProcess method, of class JnaNativeUnixSupport. This test must be ignored and tested only in a controlled condition, because it restarts the process again and the Test runs in an endless loop. It is exists just to test once in case of library changes
 */
@Ignore public void testRestartJavaProcess(){
  System.out.println(""String_Node_Str"");
  Map<String,String> properties=null;
  boolean daemonExec=false;
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  instance.restartJavaProcess(properties,daemonExec);
}","/** 
 * Test of restartJavaProcess method, of class JnaNativeUnixSupport. This test must be ignored and tested only in a controlled condition, because it restarts the process again and the Test runs in an endless loop. It is exists just to test once in case of library changes
 */
@Ignore public void testRestartJavaProcess(){
  if (Functions.isWindows())   return;
  System.out.println(""String_Node_Str"");
  Map<String,String> properties=null;
  boolean daemonExec=false;
  JnaNativeUnixSupport instance=new JnaNativeUnixSupport();
  instance.restartJavaProcess(properties,daemonExec);
}"
24569,"private void writeToJson(SourceWriter sw){
  sw.println();
  sw.println(""String_Node_Str"");
  sw.println(""String_Node_Str"" + jc.getQualifiedSourceName() + ""String_Node_Str"");
  sw.indent();
  sw.indentln(""String_Node_Str"");
  sw.println(""String_Node_Str"");
  Boolean first=true;
  String t=""String_Node_Str"";
  for (  JField f : fields) {
    if (!first) {
      sw.println();
      sw.println(t);
      sw.println();
    }
 else {
      sw.println();
      first=false;
    }
    sw.println(""String_Node_Str"" + getJsonName(f) + ""String_Node_Str"");
    sw.println(""String_Node_Str"");
    sw.println(""String_Node_Str"" + f.getName() + ""String_Node_Str"");
  }
  sw.println();
  sw.println(""String_Node_Str"");
  sw.outdent();
  sw.println(""String_Node_Str"");
}","private void writeToJson(SourceWriter sw){
  sw.println();
  sw.println(""String_Node_Str"");
  sw.println(""String_Node_Str"" + jc.getQualifiedSourceName() + suffix+ ""String_Node_Str"");
  sw.indent();
  sw.indentln(""String_Node_Str"");
  sw.println(""String_Node_Str"");
  Boolean first=true;
  String t=""String_Node_Str"";
  for (  JField f : fields) {
    if (!first) {
      sw.println();
      sw.println(t);
      sw.println();
    }
 else {
      sw.println();
      first=false;
    }
    sw.println(""String_Node_Str"" + getJsonName(f) + ""String_Node_Str"");
    sw.println(""String_Node_Str"");
    sw.println(""String_Node_Str"" + f.getName() + ""String_Node_Str"");
  }
  sw.println();
  sw.println(""String_Node_Str"");
  sw.outdent();
  sw.println(""String_Node_Str"");
}"
24570,"/** 
 * @param context
 * @param localPackageName
 * @param jc
 * @param localClassName
 */
public String generateSubClass(GeneratorContext context,String localPackageName,JClassType jc,String localClassName){
  this.jc=jc;
  this.className=localClassName;
  this.packageName=localPackageName;
  PrintWriter printWriter=context.tryCreate(logger,packageName,className);
  if (printWriter == null) {
    return generateSubClass(context,packageName,jc,className + sequencer++);
  }
  sequencer=0;
  ClassSourceFileComposerFactory composer=null;
  if (jc.isParameterized() != null) {
    this.jc=jc.isParameterized().getBaseType();
    String temp=this.jc.getParameterizedQualifiedSourceName();
    String name=""String_Node_Str"" + temp.substring(temp.lastIndexOf('.') + 1);
    composer=new ClassSourceFileComposerFactory(packageName,name);
  }
 else {
    composer=new ClassSourceFileComposerFactory(packageName,className);
  }
  fields=getFields(this.jc);
  composer.addImport(List.class.getCanonicalName());
  composer.addImport(JsonValue.class.getCanonicalName());
  composer.addImport(JSONValue.class.getCanonicalName());
  composer.addImport(JSONObject.class.getCanonicalName());
  composer.addImport(FrameEncoder.class.getCanonicalName());
  composer.addImport(jc.getQualifiedSourceName());
  composer.addImplementedInterface(JsonValue.class.getCanonicalName() + ""String_Node_Str"" + jc.getSimpleSourceName()+ ""String_Node_Str"");
  SourceWriter sourceWriter=composer.createSourceWriter(context,printWriter);
  for (  JField f : fields) {
    if (f.getType().isPrimitive() == null && f.getType().isTypeParameter() == null) {
      String s=f.getType().getQualifiedSourceName();
      composer.addImport(s);
    }
  }
  writeFromJson(sourceWriter);
  writeToJson(sourceWriter);
  writeNatives(sourceWriter);
  sourceWriter.outdent();
  sourceWriter.println(""String_Node_Str"");
  context.commit(logger,printWriter);
  return className;
}","/** 
 * @param context
 * @param localPackageName
 * @param jc
 * @param localClassName
 */
public String generateSubClass(GeneratorContext context,JClassType jc){
  this.jc=jc;
  this.className=""String_Node_Str"" + jc.getSimpleSourceName();
  JParameterizedType parameterizedType=jc.isParameterized();
  if (parameterizedType != null) {
    this.jc=parameterizedType.getBaseType();
    this.suffix=getParameterizedSimpleSourceName(parameterizedType.getBaseType());
  }
 else {
    this.suffix=""String_Node_Str"";
  }
  this.packageName=jc.getPackage().getName();
  PrintWriter printWriter=context.tryCreate(logger,packageName,className);
  if (printWriter == null) {
    return null;
  }
  ClassSourceFileComposerFactory composer=null;
  composer=new ClassSourceFileComposerFactory(packageName,className + suffix);
  fields=getFields(this.jc);
  composer.addImport(List.class.getCanonicalName());
  composer.addImport(JSONValue.class.getCanonicalName());
  composer.addImport(JSONObject.class.getCanonicalName());
  composer.addImport(FrameEncoder.class.getCanonicalName());
  composer.addImport(UnableToSerialize.class.getCanonicalName());
  composer.addImport(UnableToDeserialize.class.getCanonicalName());
  composer.addImplementedInterface(JsonValue.class.getCanonicalName() + ""String_Node_Str"" + jc.getQualifiedSourceName()+ suffix+ ""String_Node_Str"");
  SourceWriter sourceWriter=composer.createSourceWriter(context,printWriter);
  writeFromJson(sourceWriter);
  writeToJson(sourceWriter);
  writeNatives(sourceWriter);
  sourceWriter.outdent();
  sourceWriter.println(""String_Node_Str"");
  context.commit(logger,printWriter);
  return packageName + ""String_Node_Str"" + className;
}"
24571,"private void writeFromJson(SourceWriter sw){
  sw.println();
  sw.println(""String_Node_Str"");
  sw.println(""String_Node_Str"" + jc.getSimpleSourceName() + ""String_Node_Str"");
  sw.indent();
  sw.indentln(""String_Node_Str"");
  sw.println(""String_Node_Str"");
  sw.indentln(""String_Node_Str"");
  sw.println(""String_Node_Str"");
  sw.indentln(""String_Node_Str"");
  sw.println(""String_Node_Str"");
  sw.println();
  for (  JField f : fields) {
    sw.println(getFieldType(f) + ""String_Node_Str"" + f.getName()+ ""String_Node_Str"");
  }
  sw.println();
  int counter=0;
  for (  JField f : fields) {
    sw.print(f.getName() + ""String_Node_Str"" + getJsonName(f)+ ""String_Node_Str"");
    if (f.getType().isTypeParameter() == null) {
      sw.println(f.getName() + ""String_Node_Str"" + getFieldType(f,true)+ ""String_Node_Str"");
    }
 else {
      int l=getParametizedFieldCount(f);
      sw.println(f.getName() + ""String_Node_Str"" + counter+ ""String_Node_Str""+ (counter + l)+ ""String_Node_Str""+ (l + 1)+ ""String_Node_Str"");
      counter=counter + l + 1;
    }
  }
  sw.println();
  sw.println(jc.getParameterizedQualifiedSourceName() + ""String_Node_Str"" + jc.getParameterizedQualifiedSourceName()+ ""String_Node_Str"");
  sw.print(""String_Node_Str"");
  for (  JField f : fields) {
    sw.print(""String_Node_Str"" + f.getName());
  }
  sw.println(""String_Node_Str"");
  sw.println(""String_Node_Str"");
  sw.outdent();
  sw.println(""String_Node_Str"");
}","private void writeFromJson(SourceWriter sw){
  sw.println();
  sw.println(""String_Node_Str"");
  sw.println(""String_Node_Str"" + jc.getQualifiedSourceName() + suffix+ ""String_Node_Str"");
  sw.indent();
  sw.indentln(""String_Node_Str"");
  sw.println(""String_Node_Str"");
  sw.indentln(""String_Node_Str"");
  sw.println(""String_Node_Str"");
  sw.println();
  for (  JField f : fields) {
    sw.println(getFieldType(f) + ""String_Node_Str"" + f.getName()+ ""String_Node_Str"");
  }
  sw.println();
  for (  JField f : fields) {
    sw.print(f.getName() + ""String_Node_Str"" + getJsonName(f)+ ""String_Node_Str"");
    if (f.getType().isTypeParameter() == null) {
      sw.println(f.getName() + ""String_Node_Str"" + getFieldType(f,true)+ ""String_Node_Str"");
    }
 else {
      sw.println(f.getName() + ""String_Node_Str"");
    }
  }
  sw.println();
  sw.println(jc.getQualifiedSourceName() + suffix + ""String_Node_Str""+ jc.getQualifiedSourceName()+ suffix+ ""String_Node_Str"");
  sw.print(""String_Node_Str"");
  for (  JField f : fields) {
    sw.print(""String_Node_Str"" + f.getName());
  }
  sw.println(""String_Node_Str"");
  sw.println(""String_Node_Str"");
  sw.outdent();
  sw.println(""String_Node_Str"");
}"
24572,"/** 
 * @param context
 * @throws UnableToCompleteException 
 */
private void generateJsonFormatterClasses(GeneratorContext context) throws UnableToCompleteException {
  if (worklist == null || worklist.size() == 0) {
    return;
  }
  String localPackageName=packageName + ""String_Node_Str"";
  for (  JClassType jc : worklist) {
    String localClassName=""String_Node_Str"" + jc.getSimpleSourceName();
    if (!jc.isDefaultInstantiable()) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"" + jc.getSimpleSourceName() + ""String_Node_Str"");
    }
 else {
      SubClassGenerator gen=new SubClassGenerator();
      localClassName=gen.generateSubClass(context,localPackageName,jc,localClassName);
      map.put(jc.getQualifiedSourceName(),localPackageName + ""String_Node_Str"" + localClassName);
    }
  }
}","/** 
 * @param context
 * @throws UnableToCompleteException 
 */
private void generateJsonFormatterClasses(GeneratorContext context) throws UnableToCompleteException {
  if (worklist == null || worklist.size() == 0) {
    return;
  }
  for (  JClassType jc : worklist) {
    if (!jc.isDefaultInstantiable()) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"" + jc.getSimpleSourceName() + ""String_Node_Str"");
    }
 else {
      SubClassGenerator gen=new SubClassGenerator();
      String implentationClassName;
      implentationClassName=gen.generateSubClass(context,jc);
      if (implentationClassName == null) {
        return;
      }
      map.put(jc.getQualifiedSourceName(),implentationClassName);
    }
  }
}"
24573,"private void writeNatives(SourceWriter sw){
  String s=""String_Node_Str"" + jc.getQualifiedSourceName() + ""String_Node_Str"";
  sw.println();
  sw.print(""String_Node_Str"" + jc.getParameterizedQualifiedSourceName() + ""String_Node_Str"");
  for (  JField f : fields) {
    sw.print(""String_Node_Str"" + getFieldType(f) + ""String_Node_Str""+ f.getName());
  }
  sw.println(""String_Node_Str"");
  sw.indent();
  for (  JField f : fields) {
    sw.println(s + f.getName() + ""String_Node_Str""+ f.getName()+ ""String_Node_Str"");
  }
  sw.outdent();
  sw.println(""String_Node_Str"");
  for (  JField f : fields) {
    sw.println();
    sw.println(""String_Node_Str"" + getFieldType(f) + ""String_Node_Str""+ f.getName()+ ""String_Node_Str""+ jc.getParameterizedQualifiedSourceName()+ ""String_Node_Str"");
    sw.indent();
    sw.println(""String_Node_Str"" + s + f.getName()+ ""String_Node_Str"");
    sw.outdent();
    sw.println(""String_Node_Str"");
  }
}","private void writeNatives(SourceWriter sw){
  String s=""String_Node_Str"" + jc.getQualifiedSourceName() + ""String_Node_Str"";
  sw.println();
  sw.print(""String_Node_Str"" + jc.getQualifiedSourceName() + suffix+ ""String_Node_Str"");
  for (  JField f : fields) {
    sw.print(""String_Node_Str"" + getFieldType(f) + ""String_Node_Str""+ f.getName());
  }
  sw.println(""String_Node_Str"");
  sw.indent();
  for (  JField f : fields) {
    sw.println(s + f.getName() + ""String_Node_Str""+ f.getName()+ ""String_Node_Str"");
  }
  sw.outdent();
  sw.println(""String_Node_Str"");
  for (  JField f : fields) {
    sw.println();
    sw.println(""String_Node_Str"" + getFieldType(f) + ""String_Node_Str""+ f.getName()+ ""String_Node_Str""+ jc.getQualifiedSourceName()+ suffix+ ""String_Node_Str"");
    sw.indent();
    sw.println(""String_Node_Str"" + s + f.getName()+ ""String_Node_Str"");
    sw.outdent();
    sw.println(""String_Node_Str"");
  }
}"
24574,"private boolean checkClass(JClassType type){
  if (!map.containsKey(type.getQualifiedSourceName()) && type.isWildcard() == null && !worklist.contains(type)) {
    return worklist.add(type);
  }
  return false;
}","private boolean checkClass(JClassType type){
  boolean b=false;
  if (!map.containsKey(type.getQualifiedSourceName()) && type.isWildcard() == null && !worklist.contains(type)) {
    b=worklist.add(type);
  }
  return b;
}"
24575,"/** 
 * @param context
 * @throws UnableToCompleteException 
 */
private void generateJsonFormatterClasses(GeneratorContext context) throws UnableToCompleteException {
  if (worklist == null || worklist.size() == 0) {
    return;
  }
  String localPackageName=packageName + ""String_Node_Str"";
  for (  JClassType jc : worklist) {
    String localClassName=""String_Node_Str"" + jc.getSimpleSourceName();
    JConstructor[] cs=jc.getConstructors();
    boolean emptyConstructor=false;
    for (    JConstructor jConstructor : cs) {
      if (jConstructor.getParameters().length == 0) {
        emptyConstructor=true;
        break;
      }
    }
    if (!emptyConstructor) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"" + jc.getSimpleSourceName() + ""String_Node_Str"");
    }
 else {
      SubClassGenerator gen=new SubClassGenerator();
      localClassName=gen.generateSubClass(context,localPackageName,jc,localClassName);
      map.put(jc.getQualifiedSourceName(),localPackageName + ""String_Node_Str"" + localClassName);
    }
  }
}","/** 
 * @param context
 * @throws UnableToCompleteException 
 */
private void generateJsonFormatterClasses(GeneratorContext context) throws UnableToCompleteException {
  if (worklist == null || worklist.size() == 0) {
    return;
  }
  String localPackageName=packageName + ""String_Node_Str"";
  for (  JClassType jc : worklist) {
    String localClassName=""String_Node_Str"" + jc.getSimpleSourceName();
    JConstructor[] cs=jc.getConstructors();
    boolean emptyConstructor=false;
    for (    JConstructor jConstructor : cs) {
      if (jConstructor.getParameters().length == 0) {
        emptyConstructor=true;
        break;
      }
    }
    if (!emptyConstructor && cs.length > 0) {
      logger.log(TreeLogger.ERROR,""String_Node_Str"" + jc.getSimpleSourceName() + ""String_Node_Str"");
    }
 else {
      SubClassGenerator gen=new SubClassGenerator();
      localClassName=gen.generateSubClass(context,localPackageName,jc,localClassName);
      map.put(jc.getQualifiedSourceName(),localPackageName + ""String_Node_Str"" + localClassName);
    }
  }
}"
24576,"@Inject public Wall(Display display,TechDemo service){
  this.service=service;
  display.setHandler(this);
  service.getWall(new AsyncCallback<List<String>>(){
    @Override public void onSuccess(    List<String> result){
      for (      String s : result) {
        addMessage(s);
      }
    }
    @Override public void onFailure(    Throwable caught){
      GWT.log(""String_Node_Str"");
    }
  }
);
  this.display=display;
  this.eventBus.addHandler(NewWallMessageEvent.TYPE,this);
}","@Inject public Wall(Display display,TechDemo service,EventBus eventBus){
  this.service=service;
  this.eventBus=eventBus;
  display.setHandler(this);
  service.getWall(new AsyncCallback<List<String>>(){
    @Override public void onSuccess(    List<String> result){
      for (      String s : result) {
        addMessage(s);
      }
    }
    @Override public void onFailure(    Throwable caught){
      GWT.log(""String_Node_Str"");
    }
  }
);
  this.display=display;
  this.eventBus.addHandler(NewWallMessageEvent.TYPE,this);
}"
24577,"@Override public Date fromJson(JSONValue jsonValue,List<Class<?>> subtypes,SimpleEncoder simpleEncoder) throws UnableToDeserialize {
  if (jsonValue.isNull() != null)   return null;
  if (jsonValue.isNumber() == null)   throw new UnableToDeserialize(""String_Node_Str"");
  JSONNumber o=jsonValue.isNumber();
  return new Date((long)(o.doubleValue()));
}","@Override public Date fromJson(JSONValue jsonValue,List<Class<?>> subtypes,JsonEncoder simpleEncoder) throws UnableToDeserialize {
  if (jsonValue.isNull() != null)   return null;
  if (jsonValue.isNumber() == null)   throw new UnableToDeserialize(""String_Node_Str"");
  JSONNumber o=jsonValue.isNumber();
  return new Date((long)(o.doubleValue()));
}"
24578,"@Override public TimeEntry fromJson(JSONValue jsonValue,List<Class<?>> subtypes,SimpleEncoder simpleEncoder) throws UnableToDeserialize {
  if (jsonValue.isNull() != null)   return null;
  if (jsonValue.isObject() == null)   throw new UnableToDeserialize(""String_Node_Str"");
  JSONObject o=jsonValue.isObject();
  return null;
}","@Override public TimeEntry fromJson(JSONValue jsonValue,List<Class<?>> subtypes,JsonEncoder jsonEncoder) throws UnableToDeserialize {
  if (jsonValue.isNull() != null)   return null;
  if (jsonValue.isObject() == null)   throw new UnableToDeserialize(""String_Node_Str"");
  JSONObject o=jsonValue.isObject();
  return null;
}"
24579,"@Override public void onSuccess(List<ModuleInfo> result){
  for (  ModuleInfo moduleInfo : result) {
    if (missing.remove(moduleInfo.getId())) {
      map.put(moduleInfo.getId(),moduleInfo);
    }
 else {
      continue;
    }
  }
  if (missing.isEmpty()) {
    for (    AsyncCallback<Map<Integer,ModuleInfo>> callback : asyncCallbacks) {
      callback.onSuccess(map);
    }
    asyncCallbacks=null;
  }
}","@Override public void onSuccess(List<ModuleInfo> result){
  for (  ModuleInfo moduleInfo : result) {
    if (missing.remove(moduleInfo.getId())) {
      map.put(moduleInfo.getId(),moduleInfo);
    }
 else {
      continue;
    }
  }
  if (missing.isEmpty() && asyncCallbacks != null) {
    for (    AsyncCallback<Map<Integer,ModuleInfo>> callback : asyncCallbacks) {
      callback.onSuccess(map);
    }
    asyncCallbacks=null;
  }
}"
24580,"@Override public void run(){
  if (display.checkForResizes()) {
    showTab(tabsModel.getSelectedTab());
    updated=true;
  }
  if (i >= timerIterationCount) {
    i=0;
    if (updated) {
      saveModuleHeights();
    }
  }
 else {
    this.schedule(timerSchedule);
    i++;
  }
}","@Override public void run(){
  if (display.checkForResizes()) {
    showTab(tabsModel.getSelectedTab());
    updated=true;
  }
  if (i >= timerIterationCount) {
    i=0;
    if (updated) {
      saveModuleHeights();
      updated=false;
    }
  }
 else {
    this.schedule(timerSchedule);
    i++;
  }
}"
24581,"@Override public void onContentSizeChanged(ContentChangedEvent event){
  if (display.checkForResizes()) {
    showTab(tabsModel.getSelectedTab());
    tabsModel.setModuleHeight(event.getModuleId(),event.getHeight());
  }
}","@Override public void onContentSizeChanged(ContentChangedEvent event){
  if (display.checkForResizes()) {
    showTab(tabsModel.getSelectedTab());
    saveModuleHeights();
  }
}"
24582,"@Override public void run(){
  if (display.checkForResizes()) {
    showTab(tabsModel.getSelectedTab());
    HashSet<Integer> needed=new HashSet<Integer>();
    for (    List<Integer> i : tabsModel.getSelectedTab().getModuleIds()) {
      needed.addAll(i);
    }
    moduleInfoProvider.translate(needed,new AsyncCallback<Map<Integer,ModuleInfo>>(){
      @Override public void onFailure(      Throwable caught){
        GWT.log(""String_Node_Str"",caught);
      }
      @Override public void onSuccess(      Map<Integer,ModuleInfo> result){
        for (        Entry<Integer,ModuleInfo> entry : result.entrySet()) {
          tabsModel.setModuleHeight(entry.getKey(),entry.getValue().getHeight());
        }
      }
    }
);
  }
  if (i >= 10) {
    i=0;
  }
 else {
    this.schedule(300);
    i++;
  }
}","@Override public void run(){
  if (display.checkForResizes()) {
    showTab(tabsModel.getSelectedTab());
    updated=true;
  }
  if (i >= 10) {
    i=0;
    if (updated) {
      saveModuleHeights();
    }
  }
 else {
    this.schedule(300);
    i++;
  }
}"
24583,"@Override public int getDesiredHeight(){
  int magicInt=10;
  int a=this.content.getElement().getScrollHeight();
  int b=this.content.getElement().getOffsetTop();
  int r=a + b + magicInt;
  if (r == magicInt) {
    r=getLastHeight();
  }
  return r + 5;
}","@Override public int getDesiredHeight(){
  int magicInt=13;
  int a=this.content.getElement().getScrollHeight();
  int b=this.content.getElement().getOffsetTop();
  int r=a + b + magicInt;
  if (r == magicInt) {
    r=getLastHeight();
  }
  return r;
}"
24584,"/** 
 * The connect call POST an empty request to that and expects to receive a HTTP 201 Created with the url of where it can receive server frames.
 * @param url when opening a connection this url is used
 * @param subprotocol not used yet, mostly here for compatibility with websocket protocol
 */
@Override public void connect(String url,String subprotocol){
  if (status.equals(WebSocketStatus.CLOSED)) {
    this.url=url;
    RequestBuilder builder=new RequestBuilder(RequestBuilder.POST,url);
    try {
      builder.sendRequest(""String_Node_Str"",connectCallback);
    }
 catch (    RequestException e) {
      GWT.log(""String_Node_Str"",e);
    }
    this.status=WebSocketStatus.CONNECTING;
  }
}","/** 
 * The connect call POST an empty request to that and expects to receive a HTTP 201 Created with the url of where it can receive server frames.
 * @param url when opening a connection this url is used
 * @param subprotocol not used yet, mostly here for compatibility with websocket protocol
 */
@Override public void connect(String url,String subprotocol){
  if (status.equals(WebSocketStatus.CLOSED)) {
    this.url=url;
    RequestBuilder builder=new RequestBuilder(RequestBuilder.POST,url);
    try {
      builder.sendRequest(""String_Node_Str"",connectCallback);
    }
 catch (    RequestException e) {
      GWT.log(""String_Node_Str"",e);
      return;
    }
    this.status=WebSocketStatus.CONNECTING;
  }
}"
24585,"private void addFeature(final String featureName,final String securityName){
  final Class<? extends RemoteService> feature=clientFeatureMap.getClassFromKey(featureName);
  if (feature == null) {
    GWT.log(""String_Node_Str"" + featureName);
    return;
  }
  if (securityName == null) {
    GWT.log(""String_Node_Str"" + featureName + ""String_Node_Str"");
    authenticationMethods.put(feature,null);
  }
 else {
    Class<? extends SecurityMethod> security=clientSecurityMap.getClassFromKey(securityName);
    if (security == null) {
      GWT.log(""String_Node_Str"" + featureName + ""String_Node_Str""+ securityName);
      return;
    }
    loadAuthenticationMethod(feature,security);
  }
}","private void addFeature(final String featureName,final String securityName){
  final Class<? extends RemoteService> feature=clientFeatureMap.getClassFromKey(featureName);
  if (feature == null) {
    GWT.log(""String_Node_Str"" + featureName);
    return;
  }
  if (securityName == null) {
    GWT.log(""String_Node_Str"" + featureName + ""String_Node_Str"");
    authenticationMethods.put(feature,null);
    sendCallsWithFeature(feature);
  }
 else {
    Class<? extends SecurityMethod> security=clientSecurityMap.getClassFromKey(securityName);
    if (security == null) {
      GWT.log(""String_Node_Str"" + featureName + ""String_Node_Str""+ securityName);
      return;
    }
    loadAuthenticationMethod(feature,security);
  }
}"
24586,"/** 
 * As per specifications [ M | 1 | 0000...000 | L ] where M is the input 1 is a high bit 0000...000 the smallest number of zeroes such that the entire message is a multiple of 512 bits L is the number of bits in M
 * @param input
 * @return
 */
private String addPadding(String input){
  StringBuilder sb=new StringBuilder(input);
  char a=0x80;
  sb.append(a);
  long l=input.length() * 8;
  int i=(int)(l % 512);
  int p=((512 - 64 - 8- i) % 512) / 8;
  while (p > 0) {
    sb.append((char)0);
    p--;
  }
  sb.append((char)((l >> 56) & 0xff));
  sb.append((char)((l >> 48) & 0xff));
  sb.append((char)((l >> 40) & 0xff));
  sb.append((char)((l >> 32) & 0xff));
  sb.append((char)((l >> 24) & 0xff));
  sb.append((char)((l >> 16) & 0xff));
  sb.append((char)((l >> 8) & 0xff));
  sb.append((char)(l & 0xff));
  return sb.toString();
}","/** 
 * As per specifications [ M | 1 | 0000...000 | L ] where M is the input 1 is a high bit 0000...000 the smallest number of zeroes such that the entire message is a multiple of 512 bits L is the number of bits in M
 * @param input
 * @return
 */
private String addPadding(String input){
  StringBuilder sb=new StringBuilder(input);
  char a=0x80;
  sb.append(a);
  long l=input.length() * 8;
  int i=(int)(l % 512);
  int p=((1024 - 64 - 8- i) % 512) / 8;
  while (p > 0) {
    sb.append((char)0);
    p--;
  }
  sb.append((char)((l >> 56) & 0xff));
  sb.append((char)((l >> 48) & 0xff));
  sb.append((char)((l >> 40) & 0xff));
  sb.append((char)((l >> 32) & 0xff));
  sb.append((char)((l >> 24) & 0xff));
  sb.append((char)((l >> 16) & 0xff));
  sb.append((char)((l >> 8) & 0xff));
  sb.append((char)(l & 0xff));
  return sb.toString();
}"
24587,"public void doGraph(StaplerRequest req,StaplerResponse rsp) throws IOException {
  String category=req.getParameter(""String_Node_Str"");
  logger.fine(""String_Node_Str"" + category);
  int width=500, height=200;
  String w=req.getParameter(""String_Node_Str"");
  String h=req.getParameter(""String_Node_Str"");
  if (w != null && w.length() > 0) {
    width=Integer.parseInt(w);
  }
  if (h != null && h.length() > 0) {
    height=Integer.parseInt(h);
  }
  if (category == null) {
    throw new IOException(""String_Node_Str"");
  }
  if (ChartUtil.awtProblemCause != null) {
    rsp.sendRedirect2(req.getContextPath() + ""String_Node_Str"");
    return;
  }
  Calendar t=build.getTimestamp();
  if (req.checkIfModified(t,rsp)) {
    return;
  }
  DataSetBuilder<String,ChartUtil.NumberOnlyBuildLabel> dsb=new DataSetBuilder<String,ChartUtil.NumberOnlyBuildLabel>();
  float health=100.0f;
  int min=1000000, max=-110001100;
  String scale=""String_Node_Str"";
  boolean latest=true;
  for (MonKitBuildAction a=this; a != null; a=a.getPreviousResult()) {
    logger.finest(""String_Node_Str"" + a.getDisplayName());
    ChartUtil.NumberOnlyBuildLabel label=new ChartUtil.NumberOnlyBuildLabel(a.build);
    for (    MonKitCategory mkc : a.getMonKitCategories()) {
      if (mkc.getName().equalsIgnoreCase(category)) {
        MonKitTarget mkt=publisher.getTarget(category);
        Float fu=null;
        Float fh=null;
        if (mkt != null) {
          fu=new Float(mkt.getUnstable());
          fh=new Float(mkt.getHealthy());
          dsb.add(fh,""String_Node_Str"",label);
          if (max < fh) {
            max=(int)Math.floor(fh);
          }
          dsb.add(fu,""String_Node_Str"",label);
          if (min > fu) {
            min=(int)Math.floor(fu);
          }
        }
        logger.finer(""String_Node_Str"" + fu);
        logger.finer(""String_Node_Str"" + fh);
        Float f=0f;
        for (        MonKitObservation mko : mkc) {
          try {
            f=new Float(mko.getValue());
          }
 catch (          NumberFormatException e) {
            System.err.println(""String_Node_Str"" + mko.getValue());
            continue;
          }
          logger.fine(""String_Node_Str"" + mko.getName() + ""String_Node_Str""+ f+ ""String_Node_Str"");
          dsb.add(f,mko.getName(),label);
          if (f.intValue() > max) {
            max=f.intValue() + 1;
          }
          if (f.intValue() < min) {
            min=f.intValue();
            if (min != 0) {
              min--;
            }
          }
          if (latest) {
            scale=mkc.getScale();
          }
        }
        if (latest && mkt != null) {
          boolean isGreater=fu < fh;
          logger.finer(""String_Node_Str"" + fu + ""String_Node_Str""+ fh+ ""String_Node_Str""+ isGreater);
          if ((isGreater && f < fu) || (!isGreater && f > fu)) {
            logger.fine(""String_Node_Str"");
            health=0.0f;
          }
 else           if ((isGreater && f < fh) || (!isGreater && f > fh)) {
            float diff=fh - fu;
            float nf1=f - fu;
            float inter=(nf1 / diff) * 100;
            logger.fine(""String_Node_Str"" + diff + ""String_Node_Str""+ nf1+ ""String_Node_Str""+ inter);
            if (inter < health) {
              logger.fine(""String_Node_Str"" + inter);
              health=inter;
            }
          }
        }
      }
    }
    latest=false;
  }
  if (health < 100.0f) {
    logger.fine(""String_Node_Str"" + health);
    category+=""String_Node_Str"" + (Math.abs(Math.floor(health * 100)) / 100) + ""String_Node_Str"";
  }
  ChartUtil.generateGraph(req,rsp,createChart(dsb.build(),category,scale,max,min),width,height);
}","public void doGraph(StaplerRequest req,StaplerResponse rsp) throws IOException {
  String category=req.getParameter(""String_Node_Str"");
  logger.fine(""String_Node_Str"" + category);
  int width=500, height=200;
  String w=req.getParameter(""String_Node_Str"");
  String h=req.getParameter(""String_Node_Str"");
  if (w != null && w.length() > 0) {
    width=Integer.parseInt(w);
  }
  if (h != null && h.length() > 0) {
    height=Integer.parseInt(h);
  }
  if (category == null) {
    throw new IOException(""String_Node_Str"");
  }
  if (ChartUtil.awtProblemCause != null) {
    rsp.sendRedirect2(req.getContextPath() + ""String_Node_Str"");
    return;
  }
  Calendar t=build.getTimestamp();
  if (req.checkIfModified(t,rsp)) {
    return;
  }
  DataSetBuilder<String,ChartUtil.NumberOnlyBuildLabel> dsb=new DataSetBuilder<String,ChartUtil.NumberOnlyBuildLabel>();
  float health=100.0f;
  int min=1000000, max=-110001100;
  String scale=""String_Node_Str"";
  boolean latest=true;
  for (MonKitBuildAction a=this; a != null; a=a.getPreviousResult()) {
    logger.finest(""String_Node_Str"" + a.getDisplayName());
    ChartUtil.NumberOnlyBuildLabel label=new ChartUtil.NumberOnlyBuildLabel(a.build);
    for (    MonKitCategory mkc : a.getMonKitCategories()) {
      if (mkc.getName().equalsIgnoreCase(category)) {
        MonKitTarget mkt=publisher.getTarget(category);
        Float fu=null;
        Float fh=null;
        if (mkt != null) {
          fu=new Float(mkt.getUnstable());
          fh=new Float(mkt.getHealthy());
          dsb.add(fh,""String_Node_Str"",label);
          if (max < fh) {
            max=(int)Math.floor(fh);
          }
          dsb.add(fu,""String_Node_Str"",label);
          if (min > fu) {
            min=(int)Math.floor(fu);
          }
        }
        logger.finer(""String_Node_Str"" + fu);
        logger.finer(""String_Node_Str"" + fh);
        Float f=0f;
        for (        MonKitObservation mko : mkc) {
          try {
            f=new Float(mko.getValue());
          }
 catch (          NumberFormatException e) {
            System.err.println(""String_Node_Str"" + mko.getValue());
            continue;
          }
          logger.fine(""String_Node_Str"" + mko.getName() + ""String_Node_Str""+ f+ ""String_Node_Str"");
          dsb.add(f,mko.getName(),label);
          if (f.intValue() > max) {
            max=f.intValue() + 1;
          }
          if (f.intValue() < min) {
            min=f.intValue();
            if (min != 0) {
              min--;
            }
          }
          if (latest) {
            scale=mkc.getScale();
          }
          if (latest && mkt != null) {
            boolean isGreater=fu < fh;
            logger.finer(""String_Node_Str"" + fu + ""String_Node_Str""+ fh+ ""String_Node_Str""+ isGreater);
            if ((isGreater && f < fu) || (!isGreater && f > fu)) {
              logger.fine(""String_Node_Str"");
              health=0.0f;
            }
 else             if ((isGreater && f < fh) || (!isGreater && f > fh)) {
              float diff=fh - fu;
              float nf1=f - fu;
              float inter=(nf1 / diff) * 100;
              logger.finer(""String_Node_Str"" + diff + ""String_Node_Str""+ nf1+ ""String_Node_Str""+ inter);
              if (inter < health) {
                logger.fine(""String_Node_Str"" + inter);
                health=inter;
              }
            }
          }
        }
      }
    }
    latest=false;
  }
  if (health < 100.0f) {
    logger.fine(""String_Node_Str"" + health);
    category+=""String_Node_Str"" + (Math.abs(Math.floor(health * 100)) / 100) + ""String_Node_Str"";
  }
  ChartUtil.generateGraph(req,rsp,createChart(dsb.build(),category,scale,max,min),width,height);
}"
24588,"public HealthReport getBuildHealth(){
  Integer health=1;
  float worst=100f;
  String worstStr=""String_Node_Str"";
  boolean healthy=true;
  for (  MonKitTarget mkt : publisher.getTargets()) {
    for (    MonKitCategory mkc : monkit) {
      if (mkt.getCategory().equalsIgnoreCase(mkc.getName())) {
        for (        MonKitObservation mko : mkc) {
          Float f=new Float(mko.getValue());
          Float fu=new Float(mkt.getUnstable());
          System.out.println(""String_Node_Str"" + f + ""String_Node_Str""+ fu);
          if ((mkt.isGreater() && f < fu) || (!mkt.isGreater() && f > fu)) {
            return new HealthReport(0,""String_Node_Str"" + mkc.getName() + ""String_Node_Str""+ mko.getName());
          }
          Float fh=new Float(mkt.getHealthy());
          System.out.println(""String_Node_Str"" + fh);
          if ((mkt.isGreater() && f < fh) || (!mkt.isGreater() && f > fh)) {
            float diff=fh - fu;
            float nf1=f - fu;
            float inter=(nf1 / diff) * 100;
            if (inter < worst) {
              worst=inter;
              worstStr=mkc.getName() + ""String_Node_Str"" + mko.getName();
            }
            healthy=false;
          }
        }
      }
    }
  }
  if (healthy) {
    return new HealthReport(100,""String_Node_Str"");
  }
 else {
    return new HealthReport((int)worst,""String_Node_Str"" + worstStr);
  }
}","public HealthReport getBuildHealth(){
  Integer health=1;
  float worst=100f;
  String worstStr=""String_Node_Str"";
  boolean healthy=true;
  for (  MonKitTarget mkt : publisher.getTargets()) {
    for (    MonKitCategory mkc : monkit) {
      if (mkt.getCategory().equalsIgnoreCase(mkc.getName())) {
        for (        MonKitObservation mko : mkc) {
          Float f=new Float(mko.getValue());
          Float fu=new Float(mkt.getUnstable());
          System.out.println(""String_Node_Str"" + f + ""String_Node_Str""+ fu);
          if ((mkt.isGreater() && f < fu) || (!mkt.isGreater() && f > fu)) {
            return new HealthReport(0,""String_Node_Str"" + mkc.getName() + ""String_Node_Str""+ mko.getName());
          }
          Float fh=new Float(mkt.getHealthy());
          System.out.println(""String_Node_Str"" + fh);
          if ((mkt.isGreater() && f < fh) || (!mkt.isGreater() && f > fh)) {
            float diff=fh - fu;
            float nf1=f - fu;
            float inter=(nf1 / diff) * 100;
            System.out.println(""String_Node_Str"" + diff + ""String_Node_Str""+ nf1+ ""String_Node_Str""+ inter);
            System.out.println(""String_Node_Str"" + inter);
            if (inter < worst) {
              worst=inter;
              worstStr=mkc.getName() + ""String_Node_Str"" + mko.getName();
            }
            healthy=false;
          }
        }
      }
    }
  }
  if (healthy) {
    return new HealthReport(100,""String_Node_Str"");
  }
 else {
    return new HealthReport((int)worst,""String_Node_Str"" + worstStr);
  }
}"
24589,"public void doGraph(StaplerRequest req,StaplerResponse rsp) throws IOException {
  String category=req.getParameter(""String_Node_Str"");
  if (category == null) {
    throw new IOException(""String_Node_Str"");
  }
  if (ChartUtil.awtProblemCause != null) {
    rsp.sendRedirect2(req.getContextPath() + ""String_Node_Str"");
    return;
  }
  Calendar t=build.getTimestamp();
  if (req.checkIfModified(t,rsp)) {
    return;
  }
  DataSetBuilder<String,ChartUtil.NumberOnlyBuildLabel> dsb=new DataSetBuilder<String,ChartUtil.NumberOnlyBuildLabel>();
  int min=1000000, max=-110001100;
  String scale=""String_Node_Str"";
  for (MonKitBuildAction a=this; a != null; a=a.getPreviousResult()) {
    ChartUtil.NumberOnlyBuildLabel label=new ChartUtil.NumberOnlyBuildLabel(a.build);
    for (    MonKitCategory mkc : a.getMonKitCategories()) {
      if (mkc.getName().equalsIgnoreCase(category)) {
        for (        MonKitObservation mko : mkc) {
          Float f=new Float(mko.getValue());
          dsb.add(f,mko.getName(),label);
          System.out.println(mko.getName() + ""String_Node_Str"" + f.intValue());
          if (f.intValue() > max) {
            max=f.intValue() + 1;
          }
          if (f.intValue() < min) {
            min=f.intValue();
            if (min != 0) {
              min--;
            }
          }
          scale=mkc.getScale();
        }
      }
    }
  }
  ChartUtil.generateGraph(req,rsp,createChart(dsb.build(),category,scale,max,min),500,200);
}","public void doGraph(StaplerRequest req,StaplerResponse rsp) throws IOException {
  String category=req.getParameter(""String_Node_Str"");
  System.out.println(""String_Node_Str"" + category);
  if (category == null) {
    throw new IOException(""String_Node_Str"");
  }
  if (ChartUtil.awtProblemCause != null) {
    rsp.sendRedirect2(req.getContextPath() + ""String_Node_Str"");
    return;
  }
  Calendar t=build.getTimestamp();
  if (req.checkIfModified(t,rsp)) {
    return;
  }
  DataSetBuilder<String,ChartUtil.NumberOnlyBuildLabel> dsb=new DataSetBuilder<String,ChartUtil.NumberOnlyBuildLabel>();
  int min=1000000, max=-110001100;
  String scale=""String_Node_Str"";
  for (MonKitBuildAction a=this; a != null; a=a.getPreviousResult()) {
    ChartUtil.NumberOnlyBuildLabel label=new ChartUtil.NumberOnlyBuildLabel(a.build);
    for (    MonKitCategory mkc : a.getMonKitCategories()) {
      System.out.println(""String_Node_Str"" + mkc.getName());
      if (mkc.getName().equalsIgnoreCase(category)) {
        System.out.println(""String_Node_Str"");
        for (        MonKitObservation mko : mkc) {
          System.out.println(""String_Node_Str"" + mko.getName());
          Float f=new Float(mko.getValue());
          dsb.add(f,mko.getName(),label);
          System.out.println(mko.getName() + ""String_Node_Str"" + f.intValue());
          if (f.intValue() > max) {
            max=f.intValue() + 1;
          }
          if (f.intValue() < min) {
            min=f.intValue();
            if (min != 0) {
              min--;
            }
          }
          scale=mkc.getScale();
        }
      }
    }
  }
  System.out.println(""String_Node_Str"" + min + ""String_Node_Str""+ max);
  ChartUtil.generateGraph(req,rsp,createChart(dsb.build(),category,scale,max,min),500,200);
}"
24590,"public HealthReport getBuildHealth(){
  float worst=100f;
  String worstStr=""String_Node_Str"";
  boolean healthy=true;
  for (  MonKitTarget mkt : publisher.getTargets()) {
    for (    MonKitCategory mkc : monkit) {
      if (mkt.getCategory().equalsIgnoreCase(mkc.getName())) {
        for (        MonKitObservation mko : mkc) {
          Float f=new Float(mko.getValue());
          Float fu=new Float(mkt.getUnstable());
          if ((mkt.isGreater() && f < fu) || (!mkt.isGreater() && f > fu)) {
            return new HealthReport(0,""String_Node_Str"" + mkc.getName() + ""String_Node_Str""+ mko.getName());
          }
          Float fh=new Float(mkt.getHealthy());
          if ((mkt.isGreater() && f < fh) || (!mkt.isGreater() && f > fh)) {
            float diff=fh - fu;
            float nf1=f - fu;
            float inter=(nf1 / diff) * 100;
            if (inter < worst) {
              worst=inter;
              worstStr=mkc.getName() + ""String_Node_Str"" + mko.getName();
            }
            healthy=false;
          }
        }
      }
    }
  }
  if (healthy) {
    return new HealthReport(100,""String_Node_Str"");
  }
 else {
    return new HealthReport((int)worst,""String_Node_Str"" + worstStr);
  }
}","public HealthReport getBuildHealth(){
  Case worst=publisher.getWorst(monkit);
  if (worst.health == null) {
    return new HealthReport(0,""String_Node_Str"" + worst.category + ""String_Node_Str""+ worst.name);
  }
 else   if (worst.category == null) {
    return new HealthReport(100,""String_Node_Str"");
  }
 else {
    return new HealthReport(worst.health.intValue(),""String_Node_Str"" + worst.category + ""String_Node_Str""+ worst.name);
  }
}"
24591,"public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws InterruptedException, IOException {
  final FilePath[] moduleRoots=build.getModuleRoots();
  final boolean multipleModuleRoots=moduleRoots != null && moduleRoots.length > 1;
  final FilePath moduleRoot=multipleModuleRoots ? build.getWorkspace() : build.getModuleRoot();
  FilePath[] reports=new FilePath[0];
  try {
    reports=moduleRoot.list(monKitFile);
    if (build.getResult().isWorseOrEqualTo(Result.FAILURE) && reports.length == 0)     return true;
  }
 catch (  IOException e) {
    Util.displayIOException(e,listener);
    e.printStackTrace(listener.fatalError(""String_Node_Str""));
    build.setResult(Result.FAILURE);
  }
  List<MonKit> mks=new ArrayList<MonKit>();
  for (int i=0; i < reports.length; i++) {
    try {
      MonKit mke=MonKit.fromString(reports[i].readToString());
      mks.add(mke);
    }
 catch (    MonKitException e) {
      e.printStackTrace(listener.fatalError(""String_Node_Str"" + reports[i].getName() + ""String_Node_Str""));
    }
  }
  MonKit mk=MonKit.merge(mks);
  final MonKitBuildAction mka=new MonKitBuildAction(build,mk.getCategories());
  mka.setPublisher(this);
  build.getActions().add(mka);
  return true;
}","public boolean perform(AbstractBuild<?,?> build,Launcher launcher,BuildListener listener) throws InterruptedException, IOException {
  final FilePath[] moduleRoots=build.getModuleRoots();
  final boolean multipleModuleRoots=moduleRoots != null && moduleRoots.length > 1;
  final FilePath moduleRoot=multipleModuleRoots ? build.getWorkspace() : build.getModuleRoot();
  FilePath[] reports=new FilePath[0];
  try {
    reports=moduleRoot.list(monKitFile);
    if (build.getResult().isWorseOrEqualTo(Result.FAILURE) && reports.length == 0)     return true;
  }
 catch (  IOException e) {
    Util.displayIOException(e,listener);
    e.printStackTrace(listener.fatalError(""String_Node_Str""));
    build.setResult(Result.FAILURE);
  }
  List<MonKit> mks=new ArrayList<MonKit>();
  for (int i=0; i < reports.length; i++) {
    try {
      MonKit mke=MonKit.fromString(reports[i].readToString());
      mks.add(mke);
    }
 catch (    MonKitException e) {
      e.printStackTrace(listener.fatalError(""String_Node_Str"" + reports[i].getName() + ""String_Node_Str""));
    }
  }
  MonKit mk=MonKit.merge(mks);
  final MonKitBuildAction mka=new MonKitBuildAction(build,mk.getCategories());
  mka.setPublisher(this);
  build.getActions().add(mka);
  Case worst=getWorst(mk.getCategories());
  if (worst.health == null) {
    build.setResult(Result.UNSTABLE);
  }
  return true;
}"
24592,"public ReadLog(String filename,double burnIn){
  String[] lines=LoadStrings(filename);
  int commentedLines=0;
  for (int row=0; row < lines.length; row++) {
    if (lines[row].startsWith(""String_Node_Str"")) {
      commentedLines++;
    }
  }
  nrow=lines.length - commentedLines - 1;
  String[] colNames=lines[commentedLines].split(""String_Node_Str"");
  List<Integer> list=new ArrayList<Integer>();
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  for (int row=0; row < colNames.length; row++) {
    Matcher matcher=pattern.matcher(colNames[row]);
    if (matcher.find()) {
      list.add(row);
    }
  }
  ncol=list.size();
  int delete=(int)(nrow * burnIn) + 1;
  System.out.println(nrow * burnIn);
  indicators=new double[nrow - delete][ncol];
  int i=0;
  for (int row=delete; row < nrow; row++) {
    String[] line=lines[row].split(""String_Node_Str"");
    indicators[i]=Utils.parseDouble(Utils.Subset(line,list.get(0),ncol));
    i++;
  }
  indicators=(double[][])indicators;
  nrow=indicators.length;
}","public ReadLog(String filename,double burnIn){
  String[] lines=LoadStrings(filename);
  int commentedLines=0;
  for (int row=0; row < lines.length; row++) {
    if (lines[row].startsWith(""String_Node_Str"")) {
      commentedLines++;
    }
  }
  nrow=lines.length - commentedLines - 1;
  String[] colNames=lines[commentedLines].split(""String_Node_Str"");
  List<Integer> list=new ArrayList<Integer>();
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  for (int row=0; row < colNames.length; row++) {
    Matcher matcher=pattern.matcher(colNames[row]);
    if (matcher.find()) {
      list.add(row);
    }
  }
  ncol=list.size();
  int delete=(int)(nrow * burnIn) + 1;
  indicators=new double[nrow - delete][ncol];
  int i=0;
  for (int row=delete; row < nrow; row++) {
    String[] line=lines[row].split(""String_Node_Str"");
    indicators[i]=Utils.parseDouble(Utils.Subset(line,list.get(0),ncol));
    i++;
  }
  indicators=(double[][])indicators;
  nrow=indicators.length;
}"
24593,"public Void doInBackground(){
  try {
    generateProcessing.setEnabled(false);
    progressBar.setIndeterminate(true);
    rateIndicatorBFToProcessing.setLogFilePath(logFilename,burnInParser.getValue() / 100);
    rateIndicatorBFToProcessing.setBfCutoff(Double.valueOf(bfCutoffParser.getText()));
    rateIndicatorBFToProcessing.setLocationFilePath(locationsFilename);
    rateIndicatorBFToProcessing.setMinBranchRedMapping(branchesMinColor.getRed());
    rateIndicatorBFToProcessing.setMinBranchGreenMapping(branchesMinColor.getGreen());
    rateIndicatorBFToProcessing.setMinBranchBlueMapping(branchesMinColor.getBlue());
    rateIndicatorBFToProcessing.setMinBranchOpacityMapping(branchesMinColor.getAlpha());
    rateIndicatorBFToProcessing.setMaxBranchRedMapping(branchesMaxColor.getRed());
    rateIndicatorBFToProcessing.setMaxBranchGreenMapping(branchesMaxColor.getGreen());
    rateIndicatorBFToProcessing.setMaxBranchBlueMapping(branchesMaxColor.getBlue());
    rateIndicatorBFToProcessing.setMaxBranchOpacityMapping(branchesMaxColor.getAlpha());
    rateIndicatorBFToProcessing.setBranchWidth(branchesWidthParser.getValue() / 2);
    if (meanPoissonPriorParser.getSelectedIndex() == 0) {
      rateIndicatorBFToProcessing.setDefaultMeanPoissonPrior();
    }
 else {
      rateIndicatorBFToProcessing.setUserMeanPoissonPrior(Double.valueOf(meanPoissonPriorParser.getSelectedItem().toString()));
    }
    if (poissonPriorOffsetParser.getSelectedIndex() == 0) {
      rateIndicatorBFToProcessing.setDefaultPoissonPriorOffset();
    }
 else {
      rateIndicatorBFToProcessing.setUserPoissonPriorOffset(Double.valueOf(poissonPriorOffsetParser.getSelectedItem().toString()));
    }
    rateIndicatorBFToProcessing.init();
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    String msg=String.format(""String_Node_Str"",e.toString());
    JOptionPane.showMessageDialog(Utils.getActiveFrame(),msg,""String_Node_Str"",JOptionPane.ERROR_MESSAGE,errorIcon);
  }
  return null;
}","public Void doInBackground(){
  try {
    generateProcessing.setEnabled(false);
    progressBar.setIndeterminate(true);
    rateIndicatorBFToProcessing.setLogFilePath(logFilename,burnInParser.getValue() / 100.0);
    rateIndicatorBFToProcessing.setBfCutoff(Double.valueOf(bfCutoffParser.getText()));
    rateIndicatorBFToProcessing.setLocationFilePath(locationsFilename);
    rateIndicatorBFToProcessing.setMinBranchRedMapping(branchesMinColor.getRed());
    rateIndicatorBFToProcessing.setMinBranchGreenMapping(branchesMinColor.getGreen());
    rateIndicatorBFToProcessing.setMinBranchBlueMapping(branchesMinColor.getBlue());
    rateIndicatorBFToProcessing.setMinBranchOpacityMapping(branchesMinColor.getAlpha());
    rateIndicatorBFToProcessing.setMaxBranchRedMapping(branchesMaxColor.getRed());
    rateIndicatorBFToProcessing.setMaxBranchGreenMapping(branchesMaxColor.getGreen());
    rateIndicatorBFToProcessing.setMaxBranchBlueMapping(branchesMaxColor.getBlue());
    rateIndicatorBFToProcessing.setMaxBranchOpacityMapping(branchesMaxColor.getAlpha());
    rateIndicatorBFToProcessing.setBranchWidth(branchesWidthParser.getValue() / 2);
    if (meanPoissonPriorParser.getSelectedIndex() == 0) {
      rateIndicatorBFToProcessing.setDefaultMeanPoissonPrior();
    }
 else {
      rateIndicatorBFToProcessing.setUserMeanPoissonPrior(Double.valueOf(meanPoissonPriorParser.getSelectedItem().toString()));
    }
    if (poissonPriorOffsetParser.getSelectedIndex() == 0) {
      rateIndicatorBFToProcessing.setDefaultPoissonPriorOffset();
    }
 else {
      rateIndicatorBFToProcessing.setUserPoissonPriorOffset(Double.valueOf(poissonPriorOffsetParser.getSelectedItem().toString()));
    }
    rateIndicatorBFToProcessing.init();
    System.out.println(""String_Node_Str"");
  }
 catch (  Exception e) {
    e.printStackTrace();
    String msg=String.format(""String_Node_Str"",e.toString());
    JOptionPane.showMessageDialog(Utils.getActiveFrame(),msg,""String_Node_Str"",JOptionPane.ERROR_MESSAGE,errorIcon);
  }
  return null;
}"
24594,"public ReadLog(String filename,double burnIn){
  time=-System.currentTimeMillis();
  String[] lines=LoadStrings(filename);
  int commentedLines=0;
  for (int row=0; row < lines.length; row++) {
    if (lines[row].startsWith(""String_Node_Str"")) {
      commentedLines++;
    }
  }
  nrow=lines.length - commentedLines - 1;
  String[] colNames=lines[commentedLines].split(""String_Node_Str"");
  List<Integer> list=new ArrayList<Integer>();
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  for (int row=0; row < colNames.length; row++) {
    Matcher matcher=pattern.matcher(colNames[row]);
    if (matcher.find()) {
      list.add(row);
    }
  }
  ncol=list.size();
  int delete=(int)(nrow * burnIn) + 1;
  indicators=new double[nrow - delete][ncol];
  int i=0;
  for (int row=delete; row < nrow; row++) {
    String[] line=lines[row].split(""String_Node_Str"");
    indicators[i]=Utils.parseDouble(Utils.Subset(line,list.get(0),ncol));
    i++;
  }
  indicators=(double[][])indicators;
  nrow=indicators.length;
  time+=System.currentTimeMillis();
}","public ReadLog(String filename,double burnIn){
  String[] lines=LoadStrings(filename);
  int commentedLines=0;
  for (int row=0; row < lines.length; row++) {
    if (lines[row].startsWith(""String_Node_Str"")) {
      commentedLines++;
    }
  }
  nrow=lines.length - commentedLines - 1;
  String[] colNames=lines[commentedLines].split(""String_Node_Str"");
  List<Integer> list=new ArrayList<Integer>();
  Pattern pattern=Pattern.compile(""String_Node_Str"");
  for (int row=0; row < colNames.length; row++) {
    Matcher matcher=pattern.matcher(colNames[row]);
    if (matcher.find()) {
      list.add(row);
    }
  }
  ncol=list.size();
  int delete=(int)(nrow * burnIn) + 1;
  System.out.println(nrow * burnIn);
  indicators=new double[nrow - delete][ncol];
  int i=0;
  for (int row=delete; row < nrow; row++) {
    String[] line=lines[row].split(""String_Node_Str"");
    indicators[i]=Utils.parseDouble(Utils.Subset(line,list.get(0),ncol));
    i++;
  }
  indicators=(double[][])indicators;
  nrow=indicators.length;
}"
24595,"@Override public byte[] getSubjectKeyIdentifier(X509Certificate cert){
  try {
    byte[] value=cert.getExtensionValue(X509Extensions.SubjectKeyIdentifier.getId());
    if (value == null) {
      return null;
    }
    return SubjectKeyIdentifier.getInstance(ASN1Object.fromByteArray(value)).getKeyIdentifier();
  }
 catch (  IOException ex) {
    throw new QiCryptoFailure(""String_Node_Str"",ex);
  }
}","@Override public byte[] getSubjectKeyIdentifier(X509Certificate cert){
  try {
    byte[] value=cert.getExtensionValue(X509Extensions.SubjectKeyIdentifier.getId());
    if (value == null) {
      return null;
    }
    byte[] octets=((ASN1OctetString)ASN1Object.fromByteArray(value)).getOctets();
    return SubjectKeyIdentifier.getInstance(ASN1Object.fromByteArray(octets)).getKeyIdentifier();
  }
 catch (  IOException ex) {
    throw new QiCryptoFailure(""String_Node_Str"",ex);
  }
}"
24596,"@Before public void before(){
  CryptCodex cryptCodex=new CryptCodexImpl();
  CryptIO cryptIO=new CryptIOImpl();
  x509ExtReader=new X509ExtensionsReaderImpl(cryptCodex);
  baltimoreCyberTrustCodeSigningRoot=cryptIO.readX509PEM(new InputStreamReader(X509ExtensionsReaderTest.class.getResourceAsStream(RSRC_NAME_BALTIMORE_CRYBERTRUST_CODESIGNING_ROOT_PEM)));
  chamberOfCommerceRoot=cryptIO.readX509PEM(new InputStreamReader(X509ExtensionsReaderTest.class.getResourceAsStream(RSRC_NAME_CHAMBER_OF_COMMERCE_ROOT_PEM)));
}","@Before public void before(){
  cryptCodex=new CryptCodexImpl();
  cryptIO=new CryptIOImpl();
  x509ExtReader=new X509ExtensionsReaderImpl(cryptCodex);
  baltimoreCyberTrustCodeSigningRoot=cryptIO.readX509PEM(new InputStreamReader(X509ExtensionsReaderTest.class.getResourceAsStream(RSRC_NAME_BALTIMORE_CRYBERTRUST_CODESIGNING_ROOT_PEM)));
  chamberOfCommerceRoot=cryptIO.readX509PEM(new InputStreamReader(X509ExtensionsReaderTest.class.getResourceAsStream(RSRC_NAME_CHAMBER_OF_COMMERCE_ROOT_PEM)));
}"
24597,"@Override public X509Certificate sign(X509Profile x509profile,PKCS10CertificationRequest pkcs10){
  LOGGER.debug(""String_Node_Str"" + x509profile.name().get());
  try {
    ensureX509ProfileIsAllowed(x509profile);
    List<X509ExtensionHolder> extensions=x509ExtReader.extractRequestedExtensions(pkcs10);
    ensureNoIllegalRequestedExtensions(extensions);
    SubjectKeyIdentifier subjectKeyID=x509ExtBuilder.buildSubjectKeyIdentifier(pkcs10.getPublicKey());
    extensions.add(new X509ExtensionHolder(X509Extensions.SubjectKeyIdentifier,false,subjectKeyID));
    AuthorityKeyIdentifier authKeyID=x509ExtBuilder.buildAuthorityKeyIdentifier(certificate().getPublicKey());
    extensions.add(new X509ExtensionHolder(X509Extensions.AuthorityKeyIdentifier,false,authKeyID));
    if (x509profile.basicConstraints().get().subjectIsCA().get()) {
      BasicConstraints bc=x509ExtBuilder.buildCABasicConstraints(x509profile.basicConstraints().get().pathLengthConstraint().get());
      extensions.add(new X509ExtensionHolder(X509Extensions.BasicConstraints,x509profile.basicConstraints().get().critical().get(),bc));
    }
 else {
      BasicConstraints bc=x509ExtBuilder.buildNonCABasicConstraints();
      extensions.add(new X509ExtensionHolder(X509Extensions.BasicConstraints,x509profile.basicConstraints().get().critical().get(),bc));
    }
    KeyUsage keyUsages=x509ExtBuilder.buildKeyUsages(x509profile.keyUsages().get().keyUsages().get());
    extensions.add(new X509ExtensionHolder(X509Extensions.KeyUsage,x509profile.keyUsages().get().critical().get(),keyUsages));
    ExtendedKeyUsage extendedKeyUsage=x509ExtBuilder.buildExtendedKeyUsage(x509profile.extendedKeyUsages().get().extendedKeyUsages().get());
    extensions.add(new X509ExtensionHolder(X509Extensions.ExtendedKeyUsage,x509profile.extendedKeyUsages().get().critical().get(),extendedKeyUsage));
    NetscapeCertType netscapeCertType=x509ExtBuilder.buildNetscapeCertTypes(x509profile.netscapeCertTypes().get().netscapeCertTypes().get());
    extensions.add(new X509ExtensionHolder(MiscObjectIdentifiers.netscapeCertType,x509profile.netscapeCertTypes().get().critical().get(),netscapeCertType));
    X509Certificate certificate=x509Generator.generateX509Certificate(privateKey(),certificate().getSubjectX500Principal(),BigInteger.probablePrime(120,new SecureRandom()),pkcs10.getCertificationRequestInfo().getSubject(),pkcs10.getPublicKey(),Duration.standardDays(365),extensions);
    return certificate;
  }
 catch (  GeneralSecurityException ex) {
    LOGGER.error(ex.getMessage(),ex);
    throw new QiPkiFailure(""String_Node_Str"",ex);
  }
}","@Override public X509Certificate sign(X509Profile x509profile,PKCS10CertificationRequest pkcs10){
  LOGGER.debug(""String_Node_Str"" + x509profile.name().get());
  try {
    ensureX509ProfileIsAllowed(x509profile);
    List<X509ExtensionHolder> extensions=x509ExtReader.extractRequestedExtensions(pkcs10);
    ensureNoIllegalRequestedExtensions(extensions);
    SubjectKeyIdentifier subjectKeyID=x509ExtBuilder.buildSubjectKeyIdentifier(pkcs10.getPublicKey());
    extensions.add(new X509ExtensionHolder(X509Extensions.SubjectKeyIdentifier,false,subjectKeyID));
    AuthorityKeyIdentifier authKeyID=x509ExtBuilder.buildAuthorityKeyIdentifier(certificate().getPublicKey());
    extensions.add(new X509ExtensionHolder(X509Extensions.AuthorityKeyIdentifier,false,authKeyID));
    if (x509profile.basicConstraints().get().subjectIsCA().get()) {
      BasicConstraints bc=x509ExtBuilder.buildCABasicConstraints(x509profile.basicConstraints().get().pathLengthConstraint().get());
      extensions.add(new X509ExtensionHolder(X509Extensions.BasicConstraints,x509profile.basicConstraints().get().critical().get(),bc));
    }
 else {
      BasicConstraints bc=x509ExtBuilder.buildNonCABasicConstraints();
      extensions.add(new X509ExtensionHolder(X509Extensions.BasicConstraints,x509profile.basicConstraints().get().critical().get(),bc));
    }
    KeyUsage keyUsages=x509ExtBuilder.buildKeyUsages(x509profile.keyUsages().get().keyUsages().get());
    extensions.add(new X509ExtensionHolder(X509Extensions.KeyUsage,x509profile.keyUsages().get().critical().get(),keyUsages));
    ExtendedKeyUsage extendedKeyUsage=x509ExtBuilder.buildExtendedKeyUsage(x509profile.extendedKeyUsages().get().extendedKeyUsages().get());
    extensions.add(new X509ExtensionHolder(X509Extensions.ExtendedKeyUsage,x509profile.extendedKeyUsages().get().critical().get(),extendedKeyUsage));
    NetscapeCertType netscapeCertType=x509ExtBuilder.buildNetscapeCertTypes(x509profile.netscapeCertTypes().get().netscapeCertTypes().get());
    extensions.add(new X509ExtensionHolder(MiscObjectIdentifiers.netscapeCertType,x509profile.netscapeCertTypes().get().critical().get(),netscapeCertType));
    X509Certificate certificate=x509Generator.generateX509Certificate(privateKey(),certificate().getSubjectX500Principal(),BigInteger.probablePrime(120,new SecureRandom()),pkcs10.getCertificationRequestInfo().getSubject(),pkcs10.getPublicKey(),Duration.standardDays(x509profile.validityDays().get()),extensions);
    return certificate;
  }
 catch (  GeneralSecurityException ex) {
    LOGGER.error(ex.getMessage(),ex);
    throw new QiPkiFailure(""String_Node_Str"",ex);
  }
}"
24598,"public void build(EdiHandler handler) throws EdiException {
  String controlNumber=Integer.toString(ediBuilder.getGsSequenceNumber());
  if (padControlNumber) {
    controlNumber=Strings.padLeft(controlNumber,'0',9);
  }
  String fields[]={Integer.toString(ediBuilder.getGsSequenceCount()),controlNumber};
  handler.startSegment(""String_Node_Str"");
  for (  String field : fields) {
    handler.startElement(field);
    handler.endElement();
  }
}","public void build(EdiHandler handler) throws EdiException {
  String controlNumber=Integer.toString(ediBuilder.getGsSequenceNumber());
  if (padControlNumber) {
    controlNumber=Strings.padLeft(controlNumber,'0',9);
  }
  String fields[]={Integer.toString(ediBuilder.getGsSequenceCount()),controlNumber};
  handler.startSegment(""String_Node_Str"");
  for (  String field : fields) {
    handler.startElement(field);
    handler.endElement();
  }
  handler.endSegment();
}"
24599,"public void build(EdiHandler handler) throws EdiException {
  Preconditions.checkState(created != null,""String_Node_Str"");
  Preconditions.checkState(functionalId != null,""String_Node_Str"");
  Preconditions.checkState(applicationSenderCode != null,""String_Node_Str"");
  Preconditions.checkState(applicationReceiverCode != null,""String_Node_Str"");
  Preconditions.checkState(responsibleAgencyCode != null,""String_Node_Str"");
  Preconditions.checkState(versionIndustryReleaseCode != null,""String_Node_Str"");
  StringBuffer createdDateBuffer=new StringBuffer();
  Strings.padLeft(Integer.toString(created.get(Calendar.YEAR)).substring(2,4),'0',2,createdDateBuffer,2);
  Strings.padLeft(Integer.toString(created.get(Calendar.MONTH)),'0',2,createdDateBuffer);
  Strings.padLeft(Integer.toString(created.get(Calendar.DAY_OF_MONTH)),'0',2,createdDateBuffer);
  StringBuffer createdTimeBuffer=new StringBuffer();
  Strings.padLeft(Integer.toString(created.get(Calendar.HOUR_OF_DAY)),'0',2,createdTimeBuffer);
  Strings.padLeft(Integer.toString(created.get(Calendar.MINUTE)),'0',2,createdTimeBuffer);
  String controlNumber=Integer.toString(ediBuilder.startGsSequence());
  if (padControlNumber) {
    controlNumber=Strings.padLeft(controlNumber,'0',9);
  }
  String fields[]={functionalId,applicationSenderCode,applicationReceiverCode,createdDateBuffer.toString(),createdTimeBuffer.toString(),controlNumber,responsibleAgencyCode,versionIndustryReleaseCode};
  handler.startSegment(""String_Node_Str"");
  for (  String field : fields) {
    handler.startElement(field);
    handler.endElement();
  }
}","public void build(EdiHandler handler) throws EdiException {
  Preconditions.checkState(created != null,""String_Node_Str"");
  Preconditions.checkState(functionalId != null,""String_Node_Str"");
  Preconditions.checkState(applicationSenderCode != null,""String_Node_Str"");
  Preconditions.checkState(applicationReceiverCode != null,""String_Node_Str"");
  Preconditions.checkState(responsibleAgencyCode != null,""String_Node_Str"");
  Preconditions.checkState(versionIndustryReleaseCode != null,""String_Node_Str"");
  StringBuffer createdDateBuffer=new StringBuffer();
  Strings.padLeft(Integer.toString(created.get(Calendar.YEAR)).substring(2,4),'0',2,createdDateBuffer,2);
  Strings.padLeft(Integer.toString(created.get(Calendar.MONTH)),'0',2,createdDateBuffer);
  Strings.padLeft(Integer.toString(created.get(Calendar.DAY_OF_MONTH)),'0',2,createdDateBuffer);
  StringBuffer createdTimeBuffer=new StringBuffer();
  Strings.padLeft(Integer.toString(created.get(Calendar.HOUR_OF_DAY)),'0',2,createdTimeBuffer);
  Strings.padLeft(Integer.toString(created.get(Calendar.MINUTE)),'0',2,createdTimeBuffer);
  String controlNumber=Integer.toString(ediBuilder.startGsSequence());
  if (padControlNumber) {
    controlNumber=Strings.padLeft(controlNumber,'0',9);
  }
  String fields[]={functionalId,applicationSenderCode,applicationReceiverCode,createdDateBuffer.toString(),createdTimeBuffer.toString(),controlNumber,responsibleAgencyCode,versionIndustryReleaseCode};
  handler.startSegment(""String_Node_Str"");
  for (  String field : fields) {
    handler.startElement(field);
    handler.endElement();
  }
  handler.endSegment();
}"
24600,"public void build(EdiHandler handler) throws EdiException {
  String controlNumber=Strings.padLeft(Integer.toString(ediBuilder.getIsaSequenceNumber()),'0',9);
  String fields[]={""String_Node_Str"",controlNumber};
  handler.startSegment(""String_Node_Str"");
  for (  String field : fields) {
    handler.startElement(field);
    handler.endElement();
  }
}","public void build(EdiHandler handler) throws EdiException {
  String controlNumber=Strings.padLeft(Integer.toString(ediBuilder.getIsaSequenceNumber()),'0',9);
  String fields[]={""String_Node_Str"",controlNumber};
  handler.startSegment(""String_Node_Str"");
  for (  String field : fields) {
    handler.startElement(field);
    handler.endElement();
  }
  handler.endSegment();
}"
24601,"public void build(EdiHandler handler) throws EdiException {
  Preconditions.checkState(created != null,""String_Node_Str"");
  Preconditions.checkState(stage != null,""String_Node_Str"");
  Preconditions.checkState(interchangeVersionId != null,""String_Node_Str"");
  StringBuffer createdDateBuffer=new StringBuffer();
  Strings.padLeft(Integer.toString(created.get(Calendar.YEAR)).substring(2,4),'0',2,createdDateBuffer,2);
  Strings.padLeft(Integer.toString(created.get(Calendar.MONTH)),'0',2,createdDateBuffer);
  Strings.padLeft(Integer.toString(created.get(Calendar.DAY_OF_MONTH)),'0',2,createdDateBuffer);
  StringBuffer createdTimeBuffer=new StringBuffer();
  Strings.padLeft(Integer.toString(created.get(Calendar.HOUR_OF_DAY)),'0',2,createdTimeBuffer);
  Strings.padLeft(Integer.toString(created.get(Calendar.MINUTE)),'0',2,createdTimeBuffer);
  String controlNumber=Strings.padLeft(Integer.toString(ediBuilder.getIsaSequenceNumber()),'0',9);
  String fields[]={authorizeInfoQualifier == null ? ""String_Node_Str"" : authorizeInfoQualifier,authorizeInfo == null ? ""String_Node_Str"" : authorizeInfo,securityInfoQualifier == null ? ""String_Node_Str"" : securityInfoQualifier,securityInfo == null ? ""String_Node_Str"" : securityInfo,interchangeSenderIdQualifier == null ? ""String_Node_Str"" : interchangeSenderIdQualifier,interchangeSenderId == null ? ""String_Node_Str"" : interchangeSenderId,interchangeReceiverIdQualifier == null ? ""String_Node_Str"" : interchangeReceiverIdQualifier,interchangeReceiverId == null ? ""String_Node_Str"" : interchangeReceiverId,createdDateBuffer.toString(),createdTimeBuffer.toString(),interchangeStandardsId == null ? ""String_Node_Str"" : interchangeStandardsId,interchangeVersionId,controlNumber,acknowledgeRequested ? ""String_Node_Str"" : ""String_Node_Str"",stage.getIndicator(),Character.toString(subElementSeparator)};
  handler.startSegment(""String_Node_Str"");
  for (  String field : fields) {
    handler.startElement(field);
    handler.endElement();
  }
}","public void build(EdiHandler handler) throws EdiException {
  Preconditions.checkState(created != null,""String_Node_Str"");
  Preconditions.checkState(stage != null,""String_Node_Str"");
  Preconditions.checkState(interchangeVersionId != null,""String_Node_Str"");
  StringBuffer createdDateBuffer=new StringBuffer();
  Strings.padLeft(Integer.toString(created.get(Calendar.YEAR)).substring(2,4),'0',2,createdDateBuffer,2);
  Strings.padLeft(Integer.toString(created.get(Calendar.MONTH)),'0',2,createdDateBuffer);
  Strings.padLeft(Integer.toString(created.get(Calendar.DAY_OF_MONTH)),'0',2,createdDateBuffer);
  StringBuffer createdTimeBuffer=new StringBuffer();
  Strings.padLeft(Integer.toString(created.get(Calendar.HOUR_OF_DAY)),'0',2,createdTimeBuffer);
  Strings.padLeft(Integer.toString(created.get(Calendar.MINUTE)),'0',2,createdTimeBuffer);
  String controlNumber=Strings.padLeft(Integer.toString(ediBuilder.getIsaSequenceNumber()),'0',9);
  String fields[]={authorizeInfoQualifier == null ? ""String_Node_Str"" : authorizeInfoQualifier,authorizeInfo == null ? ""String_Node_Str"" : authorizeInfo,securityInfoQualifier == null ? ""String_Node_Str"" : securityInfoQualifier,securityInfo == null ? ""String_Node_Str"" : securityInfo,interchangeSenderIdQualifier == null ? ""String_Node_Str"" : interchangeSenderIdQualifier,interchangeSenderId == null ? ""String_Node_Str"" : interchangeSenderId,interchangeReceiverIdQualifier == null ? ""String_Node_Str"" : interchangeReceiverIdQualifier,interchangeReceiverId == null ? ""String_Node_Str"" : interchangeReceiverId,createdDateBuffer.toString(),createdTimeBuffer.toString(),interchangeStandardsId == null ? ""String_Node_Str"" : interchangeStandardsId,interchangeVersionId,controlNumber,acknowledgeRequested ? ""String_Node_Str"" : ""String_Node_Str"",stage.getIndicator(),Character.toString(subElementSeparator)};
  handler.startSegment(""String_Node_Str"");
  for (  String field : fields) {
    handler.startElement(field);
    handler.endElement();
  }
  handler.endSegment();
}"
24602,"public void testAllFieldsSet_controlNumberPadding() throws Exception {
  expect(ediBuilder.getGsSequenceNumber()).andReturn(123);
  expect(ediBuilder.getGsSequenceCount()).andReturn(1);
  handler.startSegment(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.endElement();
  expectLastCall().times(2);
  replay();
  GeSegmentBuilder builder=new GeSegmentBuilder(ediBuilder);
  builder.setPadControlNumber(true);
  builder.build(handler);
}","public void testAllFieldsSet_controlNumberPadding() throws Exception {
  expect(ediBuilder.getGsSequenceNumber()).andReturn(123);
  expect(ediBuilder.getGsSequenceCount()).andReturn(1);
  handler.startSegment(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.endElement();
  expectLastCall().times(2);
  handler.endSegment();
  replay();
  GeSegmentBuilder builder=new GeSegmentBuilder(ediBuilder);
  builder.setPadControlNumber(true);
  builder.build(handler);
}"
24603,"public void testAllFieldsSet_noControlNumberPadding() throws Exception {
  expect(ediBuilder.getGsSequenceNumber()).andReturn(123);
  expect(ediBuilder.getGsSequenceCount()).andReturn(1);
  handler.startSegment(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.endElement();
  expectLastCall().times(2);
  replay();
  GeSegmentBuilder builder=new GeSegmentBuilder(ediBuilder);
  builder.setPadControlNumber(false);
  builder.build(handler);
}","public void testAllFieldsSet_noControlNumberPadding() throws Exception {
  expect(ediBuilder.getGsSequenceNumber()).andReturn(123);
  expect(ediBuilder.getGsSequenceCount()).andReturn(1);
  handler.startSegment(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.endElement();
  expectLastCall().times(2);
  handler.endSegment();
  replay();
  GeSegmentBuilder builder=new GeSegmentBuilder(ediBuilder);
  builder.setPadControlNumber(false);
  builder.build(handler);
}"
24604,"public void testAllFieldsSet_controlNumberPadding() throws Exception {
  expect(ediBuilder.startGsSequence()).andReturn(123);
  handler.startSegment(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.endElement();
  expectLastCall().times(8);
  replay();
  Calendar calendar=Calendar.getInstance();
  calendar.set(Calendar.YEAR,2011);
  calendar.set(Calendar.MONTH,7);
  calendar.set(Calendar.DAY_OF_MONTH,26);
  calendar.set(Calendar.HOUR_OF_DAY,8);
  calendar.set(Calendar.MINUTE,36);
  GsSegmentBuilder builder=new GsSegmentBuilder(ediBuilder).setPadControlNumber(true).setFunctionalId(""String_Node_Str"").setApplicationSenderCode(""String_Node_Str"").setApplicationReceiverCode(""String_Node_Str"").setCreated(calendar).setResponsibleAgencyCode(""String_Node_Str"").setVersionIndustryReleaseCode(""String_Node_Str"");
  builder.build(handler);
}","public void testAllFieldsSet_controlNumberPadding() throws Exception {
  expect(ediBuilder.startGsSequence()).andReturn(123);
  handler.startSegment(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.endElement();
  expectLastCall().times(8);
  handler.endSegment();
  replay();
  Calendar calendar=Calendar.getInstance();
  calendar.set(Calendar.YEAR,2011);
  calendar.set(Calendar.MONTH,7);
  calendar.set(Calendar.DAY_OF_MONTH,26);
  calendar.set(Calendar.HOUR_OF_DAY,8);
  calendar.set(Calendar.MINUTE,36);
  GsSegmentBuilder builder=new GsSegmentBuilder(ediBuilder).setPadControlNumber(true).setFunctionalId(""String_Node_Str"").setApplicationSenderCode(""String_Node_Str"").setApplicationReceiverCode(""String_Node_Str"").setCreated(calendar).setResponsibleAgencyCode(""String_Node_Str"").setVersionIndustryReleaseCode(""String_Node_Str"");
  builder.build(handler);
}"
24605,"public void testAllFieldsSet_noControlNumberPadding() throws Exception {
  expect(ediBuilder.startGsSequence()).andReturn(123);
  handler.startSegment(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.endElement();
  expectLastCall().times(8);
  replay();
  Calendar calendar=Calendar.getInstance();
  calendar.set(Calendar.YEAR,2011);
  calendar.set(Calendar.MONTH,7);
  calendar.set(Calendar.DAY_OF_MONTH,26);
  calendar.set(Calendar.HOUR_OF_DAY,8);
  calendar.set(Calendar.MINUTE,36);
  GsSegmentBuilder builder=new GsSegmentBuilder(ediBuilder).setPadControlNumber(false).setFunctionalId(""String_Node_Str"").setApplicationSenderCode(""String_Node_Str"").setApplicationReceiverCode(""String_Node_Str"").setCreated(calendar).setResponsibleAgencyCode(""String_Node_Str"").setVersionIndustryReleaseCode(""String_Node_Str"");
  builder.build(handler);
}","public void testAllFieldsSet_noControlNumberPadding() throws Exception {
  expect(ediBuilder.startGsSequence()).andReturn(123);
  handler.startSegment(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.endElement();
  expectLastCall().times(8);
  handler.endSegment();
  replay();
  Calendar calendar=Calendar.getInstance();
  calendar.set(Calendar.YEAR,2011);
  calendar.set(Calendar.MONTH,7);
  calendar.set(Calendar.DAY_OF_MONTH,26);
  calendar.set(Calendar.HOUR_OF_DAY,8);
  calendar.set(Calendar.MINUTE,36);
  GsSegmentBuilder builder=new GsSegmentBuilder(ediBuilder).setPadControlNumber(false).setFunctionalId(""String_Node_Str"").setApplicationSenderCode(""String_Node_Str"").setApplicationReceiverCode(""String_Node_Str"").setCreated(calendar).setResponsibleAgencyCode(""String_Node_Str"").setVersionIndustryReleaseCode(""String_Node_Str"");
  builder.build(handler);
}"
24606,"public void testBuildsSegment() throws Exception {
  expect(ediBuilder.getIsaSequenceNumber()).andReturn(123);
  handler.startSegment(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.endElement();
  expectLastCall().times(2);
  replay();
  IeaSegmentBuilder builder=new IeaSegmentBuilder(ediBuilder);
  builder.build(handler);
}","public void testBuildsSegment() throws Exception {
  expect(ediBuilder.getIsaSequenceNumber()).andReturn(123);
  handler.startSegment(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.endElement();
  expectLastCall().times(2);
  handler.endSegment();
  replay();
  IeaSegmentBuilder builder=new IeaSegmentBuilder(ediBuilder);
  builder.build(handler);
}"
24607,"public void testCreatedAndStageSet_buildsEmptySegment() throws Exception {
  expect(ediBuilder.getIsaSequenceNumber()).andReturn(123);
  handler.startSegment(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  expectLastCall().times(8);
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.endElement();
  expectLastCall().times(16);
  replay();
  Calendar calendar=Calendar.getInstance();
  calendar.set(Calendar.YEAR,2011);
  calendar.set(Calendar.MONTH,7);
  calendar.set(Calendar.DAY_OF_MONTH,26);
  calendar.set(Calendar.HOUR_OF_DAY,8);
  calendar.set(Calendar.MINUTE,36);
  IsaSegmentBuilder builder=new IsaSegmentBuilder(ediBuilder).setSubElementSeparator(':').setInterchangeVersionId(""String_Node_Str"").setStage(IsaSegmentBuilder.Stage.TEST).setCreated(calendar);
  builder.build(handler);
}","public void testCreatedAndStageSet_buildsEmptySegment() throws Exception {
  expect(ediBuilder.getIsaSequenceNumber()).andReturn(123);
  handler.startSegment(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  expectLastCall().times(8);
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.startElement(eq(""String_Node_Str""));
  handler.endElement();
  expectLastCall().times(16);
  handler.endSegment();
  replay();
  Calendar calendar=Calendar.getInstance();
  calendar.set(Calendar.YEAR,2011);
  calendar.set(Calendar.MONTH,7);
  calendar.set(Calendar.DAY_OF_MONTH,26);
  calendar.set(Calendar.HOUR_OF_DAY,8);
  calendar.set(Calendar.MINUTE,36);
  IsaSegmentBuilder builder=new IsaSegmentBuilder(ediBuilder).setSubElementSeparator(':').setInterchangeVersionId(""String_Node_Str"").setStage(IsaSegmentBuilder.Stage.TEST).setCreated(calendar);
  builder.build(handler);
}"
24608,"@Test public void testVersion() throws Exception {
  String re=""String_Node_Str"";
  String version=instance.version();
  assertTrue(""String_Node_Str"",version.matches(re));
}","@Test public void testVersion() throws Exception {
  String re=""String_Node_Str"";
  String version=instance.version();
  assertTrue(""String_Node_Str"" + version,version.matches(re));
}"
24609,"/** 
 * Moves the game forward one step.
 * @return the resulting grid state
 */
public Grid iterate(){
  for (int i=0; i < threadList.length; i++) {
    threadList[i]=new LifeThread(i);
  }
  for (  LifeThread t : threadList) {
    t.start();
  }
  for (  LifeThread t : threadList) {
    try {
      t.join();
    }
 catch (    InterruptedException e) {
    }
  }
  for (int i=0; i < noise; i++) {
    int row=(int)(Math.random() * current.getRows());
    int col=(int)(Math.random() * current.getCols());
    boolean alive=next.isAlive(row,col);
    next.setAlive(row,col,!alive);
  }
  Grid temp=current;
  current=next;
  next=temp;
  iterationCount++;
  return current;
}","/** 
 * Moves the game forward one step.
 * @return the resulting grid state
 */
public Grid iterate(){
  for (int i=0; i < threadList.length; i++) {
    threadList[i]=new LifeThread(i);
  }
  for (  LifeThread t : threadList) {
    t.start();
  }
  for (  LifeThread t : threadList) {
    try {
      t.join();
    }
 catch (    InterruptedException e) {
    }
  }
  if (noise > 0) {
    int changed[][]=new int[noise][2];
    for (int i=0; i < noise; i++) {
      boolean repeat;
      int row, col;
      do {
        repeat=false;
        row=(int)(Math.random() * current.getRows());
        col=(int)(Math.random() * current.getCols());
        for (int j=0; j < i; j++) {
          if (changed[j][0] == row && changed[j][1] == col) {
            repeat=true;
            break;
          }
        }
      }
 while (repeat);
      boolean alive=next.isAlive(row,col);
      next.setAlive(row,col,!alive);
      changed[i][0]=row;
      changed[i][1]=col;
    }
  }
  Grid temp=current;
  current=next;
  next=temp;
  iterationCount++;
  return current;
}"
24610,"public JsonContentRevision(String fileName) throws Exception {
  Gson gson=new Gson();
  InputStream in=JsonContentRevision.class.getResourceAsStream(fileName);
  container=gson.fromJson(new InputStreamReader(in),Container.class);
}","public JsonContentRevision(String fileName) throws Exception {
  Gson gson=new Gson();
  InputStream in=JsonContentRevision.class.getResourceAsStream(fileName);
  container=gson.fromJson(new InputStreamReader(in,""String_Node_Str""),Container.class);
}"
24611,"/** 
 * This method retrieves the corporation's standing of this character with a certain station's owner.
 * @param apiKey The  {@link ApiKey} containing the character id.
 * @param stationId The station id.
 * @return The corporation's standing of this character with a certain station's owner.
 */
@Transactional BigDecimal getCorporationStanding(ApiKey apiKey,long stationId){
  Session session=getDatabase().getCurrentSession();
  Station station=(Station)session.get(Station.class,stationId);
  if (station != null) {
    long characterId=apiKey.getCharacterId();
    StandingIdentifier id=new StandingIdentifier(characterId,station.getCorporationId());
    Standing standing=(Standing)session.get(Standing.class,id);
    if (standing != null) {
      return standing.getStanding();
    }
  }
  return BigDecimal.ZERO;
}","/** 
 * This method retrieves the corporation's standing of this character with a certain station's owner.
 * @param apiKey The  {@link ApiKey} containing the character id.
 * @param stationId The station id.
 * @return The corporation's standing of this character with a certain station's owner.
 */
@Transactional double getCorporationStanding(ApiKey apiKey,long stationId){
  Session session=getDatabase().getCurrentSession();
  Station station=(Station)session.get(Station.class,stationId);
  if (station != null) {
    long characterId=apiKey.getCharacterId();
    StandingIdentifier id=new StandingIdentifier(characterId,station.getCorporationId());
    Standing standing=(Standing)session.get(Standing.class,id);
    if (standing != null) {
      return standing.getStanding().doubleValue();
    }
  }
  return 0.0;
}"
24612,"/** 
 * This method retrieves the faction standings for a certain region.
 * @param apiKey The  {@link ApiKey} containing the character id.
 * @param mapRegionId The id of the region.
 * @return The faction standing of this character with this region's empire.
 */
@Transactional BigDecimal getFactionStanding(ApiKey apiKey,long mapRegionId){
  Session session=getDatabase().getCurrentSession();
  MapRegion region=(MapRegion)session.get(MapRegion.class,mapRegionId);
  if (region != null) {
    long characterId=apiKey.getCharacterId();
    StandingIdentifier id=new StandingIdentifier(characterId,region.getFactionId());
    Standing standing=(Standing)session.get(Standing.class,id);
    return standing.getStanding();
  }
  return BigDecimal.ZERO;
}","/** 
 * This method retrieves the faction standings for a certain region.
 * @param apiKey The  {@link ApiKey} containing the character id.
 * @param mapRegionId The id of the region.
 * @return The faction standing of this character with this region's empire.
 */
@Transactional double getFactionStanding(ApiKey apiKey,long mapRegionId){
  Session session=getDatabase().getCurrentSession();
  MapRegion region=(MapRegion)session.get(MapRegion.class,mapRegionId);
  if (region != null) {
    long characterId=apiKey.getCharacterId();
    StandingIdentifier id=new StandingIdentifier(characterId,region.getFactionId());
    Standing standing=(Standing)session.get(Standing.class,id);
    return standing.getStanding().doubleValue();
  }
  return 0.0;
}"
24613,"/** 
 * This method persists a new wallet transaction to the database.
 * @param row The  {@link Node} containing the transaction data.
 * @param apiKey The apiKey used to retrieve this transaction from the API.
 * @param brokerRelation The level of the broker relation skill.
 * @param accounting The level of the accounting skill.
 * @return True if the transaction was persisted, or false if it was not.
 */
@Transactional boolean persistChangeData(Node row,ApiKey apiKey,int brokerRelation,int accounting){
  Session session=getDatabase().getCurrentSession();
  try {
    Timestamp currentTime=TimeUtils.convertToTimestamp(row.getAttribute(""String_Node_Str""));
    long transactionID=Long.parseLong(row.getAttribute(""String_Node_Str""));
    long quantity=Long.parseLong(row.getAttribute(""String_Node_Str""));
    String typeName=row.getAttribute(""String_Node_Str"");
    long typeId=Long.parseLong(row.getAttribute(""String_Node_Str""));
    BigDecimal price=BigDecimal.valueOf(Float.parseFloat(row.getAttribute(""String_Node_Str"")));
    long clientId=Long.parseLong(row.getAttribute(""String_Node_Str""));
    String clientName=row.getAttribute(""String_Node_Str"");
    long stationId=Long.parseLong(row.getAttribute(""String_Node_Str""));
    String stationName=row.getAttribute(""String_Node_Str"");
    boolean isBuy=(""String_Node_Str"").equals(row.getAttribute(""String_Node_Str""));
    boolean isPersonal=(""String_Node_Str"").equals(row.getAttribute(""String_Node_Str""));
    BigDecimal corporationStanding=getCorporationStanding(apiKey,stationId);
    BigDecimal factionStanding=getFactionStanding(apiKey,stationId);
    BigDecimal taxes=(BigDecimal.valueOf(0.01).subtract(BigDecimal.valueOf(0.0005).multiply(BigDecimal.valueOf(brokerRelation)))).divide(BigDecimal.valueOf(Math.exp(((BigDecimal.valueOf(0.1).multiply(factionStanding)).add(BigDecimal.valueOf(0.04).multiply(corporationStanding)).doubleValue()))),3,RoundingMode.HALF_UP);
    if (!isBuy) {
      taxes=taxes.add(BigDecimal.valueOf(0.01).subtract(BigDecimal.valueOf(0.001).multiply(BigDecimal.valueOf(accounting))));
    }
    WalletTransaction transaction=(WalletTransaction)session.get(WalletTransaction.class,transactionID);
    if (transaction == null) {
      BigDecimal actualPrice=price;
      if (isBuy) {
        actualPrice=price.negate();
      }
      transaction=new WalletTransaction();
      transaction.setTransactionId(transactionID);
      transaction.setTransactionDateTime(currentTime);
      transaction.setCharacterId(apiKey.getCharacterId());
      transaction.setQuantity(quantity);
      transaction.setRemaining(quantity);
      transaction.setTypeName(typeName);
      transaction.setTypeId(typeId);
      transaction.setPrice(actualPrice);
      transaction.setTaxes(taxes.multiply(price.abs()).negate());
      transaction.setClientId(clientId);
      transaction.setClientName(clientName);
      transaction.setStationId(stationId);
      transaction.setStationName(stationName);
      transaction.setPersonal(isPersonal);
      session.save(transaction);
      return true;
    }
  }
 catch (  Exception e) {
    LOG.error(e.getLocalizedMessage(),e);
    dialog.setVisible(true);
  }
  return false;
}","/** 
 * This method persists a new wallet transaction to the database.
 * @param row The  {@link Node} containing the transaction data.
 * @param apiKey The apiKey used to retrieve this transaction from the API.
 * @param brokerRelation The level of the broker relation skill.
 * @param accounting The level of the accounting skill.
 * @return True if the transaction was persisted, or false if it was not.
 */
@Transactional boolean persistChangeData(Node row,ApiKey apiKey,int brokerRelation,int accounting){
  Session session=getDatabase().getCurrentSession();
  try {
    Timestamp currentTime=TimeUtils.convertToTimestamp(row.getAttribute(""String_Node_Str""));
    long transactionID=Long.parseLong(row.getAttribute(""String_Node_Str""));
    long quantity=Long.parseLong(row.getAttribute(""String_Node_Str""));
    String typeName=row.getAttribute(""String_Node_Str"");
    long typeId=Long.parseLong(row.getAttribute(""String_Node_Str""));
    BigDecimal price=BigDecimal.valueOf(Float.parseFloat(row.getAttribute(""String_Node_Str"")));
    long clientId=Long.parseLong(row.getAttribute(""String_Node_Str""));
    String clientName=row.getAttribute(""String_Node_Str"");
    long stationId=Long.parseLong(row.getAttribute(""String_Node_Str""));
    String stationName=row.getAttribute(""String_Node_Str"");
    boolean isBuy=(""String_Node_Str"").equals(row.getAttribute(""String_Node_Str""));
    boolean isPersonal=(""String_Node_Str"").equals(row.getAttribute(""String_Node_Str""));
    double corporationStanding=getCorporationStanding(apiKey,stationId);
    double factionStanding=getFactionStanding(apiKey,stationId);
    double brokerFees=(0.01 - 0.0005 * brokerRelation / Math.pow(2.0,0.14 * factionStanding + 0.06 * corporationStanding));
    double marketTax=0.0;
    if (!isBuy) {
      marketTax+=0.01 - 0.0005 * accounting;
    }
    WalletTransaction transaction=(WalletTransaction)session.get(WalletTransaction.class,transactionID);
    if (transaction == null) {
      BigDecimal actualPrice=price;
      if (isBuy) {
        actualPrice=price.negate();
      }
      transaction=new WalletTransaction();
      transaction.setTransactionId(transactionID);
      transaction.setTransactionDateTime(currentTime);
      transaction.setCharacterId(apiKey.getCharacterId());
      transaction.setQuantity(quantity);
      transaction.setRemaining(quantity);
      transaction.setTypeName(typeName);
      transaction.setTypeId(typeId);
      transaction.setPrice(actualPrice);
      transaction.setTaxes(BigDecimal.valueOf(brokerFees + marketTax).multiply(price.abs()).negate());
      transaction.setClientId(clientId);
      transaction.setClientName(clientName);
      transaction.setStationId(stationId);
      transaction.setStationName(stationName);
      transaction.setPersonal(isPersonal);
      session.save(transaction);
      return true;
    }
  }
 catch (  Exception e) {
    LOG.error(e.getLocalizedMessage(),e);
    dialog.setVisible(true);
  }
  return false;
}"
24614,"@Inject public InventoryManager(ImportManager importManager,Provider<InventoryWorker> workerProvider,Database database){
  this.workerProvider=workerProvider;
  this.database=database;
  this.executor=new ThreadPoolExecutor(5,10,5,TimeUnit.MINUTES,new ArrayBlockingQueue<Runnable>(256,true));
  executor.setRejectedExecutionHandler(new RejectedExecutionHandler(){
    @Override public void rejectedExecution(    Runnable r,    ThreadPoolExecutor executor){
      LOG.warn(""String_Node_Str"");
    }
  }
);
  importManager.addListener(Api.CHAR_WALLET_TRANSACTIONS,new ImportListener(){
    @Override public void onImportComplete(){
      processUnprocessedTransactions();
    }
  }
);
}","@Inject public InventoryManager(ImportManager importManager,Provider<InventoryWorker> workerProvider,ProfitPanel profitPanel,Database database){
  this.profitPanel=profitPanel;
  this.workerProvider=workerProvider;
  this.database=database;
  this.executor=new ThreadPoolExecutor(5,10,5,TimeUnit.MINUTES,new ArrayBlockingQueue<Runnable>(256,true));
  executor.setRejectedExecutionHandler(new RejectedExecutionHandler(){
    @Override public void rejectedExecution(    Runnable r,    ThreadPoolExecutor executor){
      LOG.warn(""String_Node_Str"");
    }
  }
);
  importManager.addListener(Api.CHAR_WALLET_TRANSACTIONS,new ImportListener(){
    @Override public void onImportComplete(){
      processUnprocessedTransactions();
    }
  }
);
}"
24615,"public void processUnprocessedTransactions(){
  List<Number> typeIds=queryUnprocessedTypeIds();
  LOG.info(""String_Node_Str"" + typeIds.size() + ""String_Node_Str"");
  for (  Number typeId : typeIds) {
    InventoryWorker worker=workerProvider.get();
    worker.initialize(typeId.longValue());
    executor.submit(worker);
  }
}","public void processUnprocessedTransactions(){
  Collection<Future<?>> futures=new LinkedList<Future<?>>();
  List<Number> typeIds=queryUnprocessedTypeIds();
  LOG.info(""String_Node_Str"" + typeIds.size() + ""String_Node_Str"");
  for (  Number typeId : typeIds) {
    InventoryWorker worker=workerProvider.get();
    worker.initialize(typeId.longValue());
    Future<?> future=executor.submit(worker);
    futures.add(future);
  }
  for (  Future<?> future : futures) {
    try {
      future.get();
    }
 catch (    Exception e) {
    }
  }
  if (!typeIds.isEmpty()) {
    profitPanel.reloadTab();
  }
}"
24616,"public synchronized void initialize(){
  columnModel.initialize();
  table.initialize(journalData,columnModel);
  journalData.initialize();
  JScrollPane scrollPane=new JScrollPane(table);
  scrollPane.getVerticalScrollBar().setUnitIncrement(16);
  JPanel toolBar=createTopMenu();
  GroupLayout layout=new GroupLayout(this);
  setLayout(layout);
  layout.setHorizontalGroup(layout.createSequentialGroup().addGap(7).addGroup(layout.createParallelGroup(Alignment.LEADING).addComponent(scrollPane).addComponent(toolBar)).addGap(7));
  layout.setVerticalGroup(layout.createSequentialGroup().addGap(5).addComponent(toolBar).addGap(7).addComponent(scrollPane).addGap(7));
}","public synchronized void initialize(){
  columnModel.initialize();
  journalData.initialize();
  table.initialize(journalData,columnModel);
  JScrollPane scrollPane=new JScrollPane(table);
  scrollPane.getVerticalScrollBar().setUnitIncrement(16);
  JPanel toolBar=createTopMenu();
  GroupLayout layout=new GroupLayout(this);
  setLayout(layout);
  layout.setHorizontalGroup(layout.createSequentialGroup().addGap(7).addGroup(layout.createParallelGroup(Alignment.LEADING).addComponent(scrollPane).addComponent(toolBar)).addGap(7));
  layout.setVerticalGroup(layout.createSequentialGroup().addGap(5).addComponent(toolBar).addGap(7).addComponent(scrollPane).addGap(7));
}"
24617,"public synchronized void initialize(ITableDataModel tableDataModel,ColumnModel columns){
  if (isInitialized) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.tableDataModel=tableDataModel;
  this.columnModel=columns;
  setRowHeight(21);
  getTableHeader().setReorderingAllowed(false);
  setFillsViewportHeight(true);
  setSelectionBackground(new Color(51,153,255));
  setGridColor(new Color(223,223,223));
  reload();
  setModel(createTableModel());
  updateColumns();
  setAutoCreateRowSorter(true);
  getColumnModel().addColumnModelListener(new TableColumnResizeModelListener(columnModel));
  this.isInitialized=true;
}","public synchronized void initialize(ITableDataModel tableDataModel,ColumnModel columns){
  if (isInitialized) {
    throw new IllegalStateException(""String_Node_Str"");
  }
  this.tableDataModel=tableDataModel;
  this.columnModel=columns;
  this.isInitialized=true;
  setRowHeight(21);
  getTableHeader().setReorderingAllowed(false);
  setFillsViewportHeight(true);
  setSelectionBackground(new Color(51,153,255));
  setGridColor(new Color(223,223,223));
  reload();
  setModel(createTableModel());
  updateColumns();
  setAutoCreateRowSorter(true);
  getColumnModel().addColumnModelListener(new TableColumnResizeModelListener(columnModel));
}"
24618,"public void initialize(){
  settingsManager.loadInt(SettingsManager.FILTER_JOURNAL_PERIOD,IPeriodFilter.WEEK);
}","public void initialize(){
  setPeriod(settingsManager.loadInt(SettingsManager.FILTER_JOURNAL_PERIOD,IPeriodFilter.WEEK));
}"
24619,"public void initialize(final ProgressManager progressManager,String[] args) throws Exception {
synchronized (this) {
    Preconditions.checkArgument(!initialized,""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    progressManager.update(9,1,""String_Node_Str"");
    settingsManager.initialize();
    LOG.info(""String_Node_Str"");
    progressManager.update(9,2,""String_Node_Str"");
    database.getCurrentSession();
    LOG.info(""String_Node_Str"");
    progressManager.update(9,3,""String_Node_Str"");
    proxyManager.initialize();
    LOG.info(""String_Node_Str"");
    progressManager.update(9,4,""String_Node_Str"");
    revisionExecutor.execute(new StructureUpgrader());
    revisionExecutor.execute(new ContentUpgrader());
    progressManager.update(9,4,""String_Node_Str"");
    translator.initialize(Locale.ENGLISH);
    new Thread(){
      public void run(){
        try {
          Thread.sleep(30000);
        }
 catch (        InterruptedException e) {
          e.printStackTrace();
        }
        LOG.info(""String_Node_Str"");
        progressManager.update(9,5,""String_Node_Str"");
        inventoryManager.processUnprocessedTransactions();
      }
    }
.start();
    LOG.info(""String_Node_Str"");
    progressManager.update(9,6,""String_Node_Str"");
    importManager.initialize();
    LOG.info(""String_Node_Str"");
    progressManager.update(9,7,""String_Node_Str"");
    Runtime.getRuntime().addShutdownHook(new ShutdownThread(settingsManager));
    LOG.info(""String_Node_Str"");
    progressManager.update(9,8,""String_Node_Str"");
    initialized=true;
  }
}","public void initialize(final ProgressManager progressManager,String[] args) throws Exception {
synchronized (this) {
    Preconditions.checkArgument(!initialized,""String_Node_Str"");
    LOG.info(""String_Node_Str"");
    progressManager.update(9,1,""String_Node_Str"");
    settingsManager.initialize();
    LOG.info(""String_Node_Str"");
    progressManager.update(9,2,""String_Node_Str"");
    database.getCurrentSession();
    LOG.info(""String_Node_Str"");
    progressManager.update(9,3,""String_Node_Str"");
    proxyManager.initialize();
    LOG.info(""String_Node_Str"");
    progressManager.update(9,4,""String_Node_Str"");
    revisionExecutor.execute(new StructureUpgrader());
    revisionExecutor.execute(new ContentUpgrader());
    progressManager.update(9,4,""String_Node_Str"");
    translator.initialize(Locale.ENGLISH);
    LOG.info(""String_Node_Str"");
    progressManager.update(9,5,""String_Node_Str"");
    inventoryManager.processUnprocessedTransactions();
    LOG.info(""String_Node_Str"");
    progressManager.update(9,6,""String_Node_Str"");
    importManager.initialize();
    LOG.info(""String_Node_Str"");
    progressManager.update(9,7,""String_Node_Str"");
    Runtime.getRuntime().addShutdownHook(new ShutdownThread(settingsManager));
    LOG.info(""String_Node_Str"");
    progressManager.update(9,8,""String_Node_Str"");
    initialized=true;
  }
}"
24620,"/** 
 * Calculates the distance between two instances.
 * @param first 	the first instance
 * @param second 	the second instance
 * @return 		the distance between the two given instances
 */
@Override public double distance(Instance first,Instance second){
  double sum_nominal=0.0;
  double sum_continuous=0.0;
  for (int i=0; i < first.numAttributes(); i++) {
    if (first.attribute(i).isNominal()) {
      if (first.attribute(i).equals(second.attribute(i)))       sum_nominal+=1.0;
    }
 else     if (first.attribute(i).isNumeric()) {
      sum_continuous+=distance(first,second,Double.POSITIVE_INFINITY);
    }
  }
  return sum_continuous + m_Gamma * sum_nominal;
}","/** 
 * Calculates the distance between two instances.
 * @param first 	the first instance
 * @param second 	the second instance
 * @return 		the distance between the two given instances
 */
@Override public double distance(Instance first,Instance second){
  double sum_nominal=0.0;
  double sum_continuous=0.0;
  for (int i=0; i < first.numAttributes(); i++) {
    if (first.attribute(i).isNominal()) {
      if (!first.attribute(i).equals(second.attribute(i)))       sum_nominal+=1.0;
    }
 else     if (first.attribute(i).isNumeric()) {
      sum_continuous+=distance(first,second,Double.POSITIVE_INFINITY);
    }
  }
  return sum_continuous + m_Gamma * sum_nominal;
}"
24621,"/** 
 * Calculates the distance between two instances.
 * @param first 	the first instance
 * @param second 	the second instance
 * @return 		the distance between the two given instances
 */
@Override public double distance(Instance first,Instance second){
  double sum_nominal=0.0;
  double sum_continuous=0.0;
  for (int i=0; i < first.numAttributes(); i++) {
    if (first.attribute(i).isNominal()) {
      if (!first.attribute(i).equals(second.attribute(i)))       sum_nominal+=1.0;
    }
 else     if (first.attribute(i).isNumeric()) {
      sum_continuous+=distance(first,second,Double.POSITIVE_INFINITY) * distance(first,second,Double.POSITIVE_INFINITY);
    }
  }
  return sum_continuous + m_Gamma * sum_nominal;
}","/** 
 * Calculates the distance between two instances.
 * @param first 	the first instance
 * @param second 	the second instance
 * @return 		the distance between the two given instances
 */
@Override public double distance(Instance first,Instance second){
  double sum_nominal=0.0;
  double sum_continuous=0.0;
  for (int i=0; i < first.numAttributes(); i++) {
    if (first.attribute(i).isNominal()) {
      if (!first.attribute(i).equals(second.attribute(i)))       sum_nominal+=1.0;
    }
 else     if (first.attribute(i).isNumeric()) {
      sum_continuous+=distance(first,second,Double.POSITIVE_INFINITY) * distance(first,second,Double.POSITIVE_INFINITY);
    }
  }
  return Math.sqrt(sum_continuous) + m_Gamma * sum_nominal;
}"
24622,"@Override public void onReceive(Context context,Intent intent){
  Log.d(TAG,""String_Node_Str"");
  AppWidgetManager manager=AppWidgetManager.getInstance(context);
  RemoteViews views=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  Intent intentSend=new Intent(context,com.kopysoft.chronos.content.EnableWidget.class);
  intentSend.setAction(SEND_CLOCK);
  PendingIntent pendingIntent=PendingIntent.getBroadcast(context,0,intentSend,0);
  Chronos chron=new Chronos(context);
  Job currentJob=chron.getAllJobs().get(0);
  PunchTable punchTable=chron.getAllPunchesForThisPayPeriodByJob(currentJob);
  Task defaultTask=chron.getAllTasks().get(0);
  Duration dur=PayPeriodAdapterList.getTime(punchTable.getPunchPair(DateTime.now()),true);
  if (intent.getAction().compareTo(SEND_CLOCK) == 0) {
    if (dur.getMillis() < 0) {
      views.setImageViewResource(R.id.imageButton,R.drawable.widget_enabled);
    }
 else {
      views.setImageViewResource(R.id.imageButton,R.drawable.widget_disabled);
    }
    Punch newPunch=new Punch(currentJob,defaultTask,DateTime.now());
    chron.insertPunch(newPunch);
    punchTable=chron.getAllPunchesForThisPayPeriodByJob(currentJob);
    defaultTask=chron.getAllTasks().get(0);
    dur=PayPeriodAdapterList.getTime(punchTable.getPunchPair(DateTime.now()));
    Intent runIntent=new Intent().setClass(context,com.kopysoft.chronos.content.NotificationBroadcast.class);
    runIntent.putExtra(""String_Node_Str"",dur.getMillis());
    context.sendBroadcast(runIntent);
  }
 else   if (intent.getAction().compareTo(UPDATE_FROM_APP) == 0) {
    if (dur.getMillis() > 0) {
      views.setImageViewResource(R.id.imageButton,R.drawable.widget_disabled);
    }
 else {
      views.setImageViewResource(R.id.imageButton,R.drawable.widget_enabled);
    }
  }
 else {
    super.onReceive(context,intent);
    return;
  }
  Intent runIntent=new Intent().setClass(context,com.kopysoft.chronos.content.NotificationBroadcast.class);
  runIntent.putExtra(""String_Node_Str"",dur.getMillis());
  context.sendBroadcast(runIntent);
  chron.close();
  if (printDebugMessages)   Log.d(TAG,intent.getAction());
  views.setOnClickPendingIntent(R.id.imageButton,pendingIntent);
  manager.updateAppWidget(new ComponentName(context,EnableWidget.class),views);
}","@Override public void onReceive(Context context,Intent intent){
  Log.d(TAG,""String_Node_Str"");
  AppWidgetManager manager=AppWidgetManager.getInstance(context);
  RemoteViews views=new RemoteViews(context.getPackageName(),R.layout.widget_layout);
  Intent intentSend=new Intent(context,com.kopysoft.chronos.content.EnableWidget.class);
  intentSend.setAction(SEND_CLOCK);
  PendingIntent pendingIntent=PendingIntent.getBroadcast(context,0,intentSend,0);
  Chronos chron=new Chronos(context);
  Job currentJob=chron.getAllJobs().get(0);
  PunchTable punchTable=chron.getAllPunchesForThisPayPeriodByJob(currentJob);
  Task defaultTask=chron.getAllTasks().get(0);
  Duration dur=PayPeriodAdapterList.getTime(punchTable.getPunchPair(DateTime.now()),true);
  if (intent.getAction().compareTo(SEND_CLOCK) == 0) {
    if (dur.getMillis() >= 0) {
      views.setImageViewResource(R.id.imageButton,R.drawable.widget_enabled);
    }
 else {
      views.setImageViewResource(R.id.imageButton,R.drawable.widget_disabled);
    }
    Punch newPunch=new Punch(currentJob,defaultTask,DateTime.now());
    chron.insertPunch(newPunch);
    punchTable=chron.getAllPunchesForThisPayPeriodByJob(currentJob);
    defaultTask=chron.getAllTasks().get(0);
    dur=PayPeriodAdapterList.getTime(punchTable.getPunchPair(DateTime.now()));
    Intent runIntent=new Intent().setClass(context,com.kopysoft.chronos.content.NotificationBroadcast.class);
    runIntent.putExtra(""String_Node_Str"",dur.getMillis());
    context.sendBroadcast(runIntent);
  }
 else   if (intent.getAction().compareTo(UPDATE_FROM_APP) == 0) {
    if (dur.getMillis() < 0) {
      views.setImageViewResource(R.id.imageButton,R.drawable.widget_disabled);
    }
 else {
      views.setImageViewResource(R.id.imageButton,R.drawable.widget_enabled);
    }
  }
 else {
    super.onReceive(context,intent);
    return;
  }
  Intent runIntent=new Intent().setClass(context,com.kopysoft.chronos.content.NotificationBroadcast.class);
  runIntent.putExtra(""String_Node_Str"",dur.getMillis());
  context.sendBroadcast(runIntent);
  chron.close();
  if (printDebugMessages)   Log.d(TAG,intent.getAction());
  views.setOnClickPendingIntent(R.id.imageButton,pendingIntent);
  manager.updateAppWidget(new ComponentName(context,EnableWidget.class),views);
}"
24623,"private void runUpdate(long timeToday,Context context){
  if (DEBUG_PRINT)   Log.d(TAG,""String_Node_Str"" + timeToday);
  if (timeToday > 0) {
    removeTimeNotification();
  }
 else {
    String post=""String_Node_Str"";
    updateNotificationTime(post,context);
  }
}","private void runUpdate(long timeToday,Context context){
  if (DEBUG_PRINT)   Log.d(TAG,""String_Node_Str"" + timeToday);
  if (timeToday >= 0) {
    removeTimeNotification();
  }
 else {
    String post=""String_Node_Str"";
    updateNotificationTime(post,context);
  }
}"
24624,"@Override public void onTabUnselected(ActionBar.Tab tab){
  Log.d(TAG,""String_Node_Str"" + tab);
}","@Override public void onTabUnselected(ActionBar.Tab tab){
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + tab);
}"
24625,"@Override public void onTabReselected(ActionBar.Tab tab){
  Log.d(TAG,""String_Node_Str"" + tab);
}","@Override public void onTabReselected(ActionBar.Tab tab){
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + tab);
}"
24626,"@Override public void onTabSelected(ActionBar.Tab tab){
  invalidateOptionsMenu();
  if (tab.getPosition() == 0) {
    setContentView(new DatePairView(this,localPunchTable.getPunchesByDay(new DateTime())));
  }
 else   if (tab.getPosition() == 1) {
    setContentView(new PayPeriodSummaryView(this,getPunchesByDate()));
  }
  Log.d(TAG,""String_Node_Str"" + tab);
  Log.d(TAG,""String_Node_Str"" + tab.getPosition());
}","@Override public void onTabSelected(ActionBar.Tab tab){
  invalidateOptionsMenu();
  if (tab.getPosition() == 0) {
    setContentView(new DatePairView(this,localPunchTable.getPunchesByDay(new DateTime())));
  }
 else   if (tab.getPosition() == 1) {
    setContentView(new PayPeriodSummaryView(this,getPunchesByDate()));
  }
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + tab);
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + tab.getPosition());
}"
24627,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  Log.d(TAG,""String_Node_Str"" + requestCode);
  Log.d(TAG,""String_Node_Str"" + resultCode);
  Log.d(TAG,""String_Node_Str"" + getSupportActionBar().getSelectedNavigationIndex());
  if (requestCode == FROM_CLOCK_ACTIVITY) {
    Chronos chronos=new Chronos(this);
    localPunchTable=chronos.getAllPunchesForThisPayPeriodByJob(chronos.getJobs().get(0));
    chronos.close();
  }
 else   if (requestCode == NewPunchActivity.NEW_PUNCH) {
    Log.d(TAG,""String_Node_Str"");
    if (resultCode == RESULT_OK) {
      Chronos chronos=new Chronos(this);
      localPunchTable=chronos.getAllPunchesForThisPayPeriodByJob(chronos.getJobs().get(0));
      chronos.close();
    }
  }
  if (getSupportActionBar().getSelectedNavigationIndex() == 0) {
    setContentView(new DatePairView(this,localPunchTable.getPunchesByDay(new DateTime())));
  }
 else   if (getSupportActionBar().getSelectedNavigationIndex() == 1) {
    setContentView(new PayPeriodSummaryView(this,getPunchesByDate()));
  }
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + requestCode);
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + resultCode);
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + getSupportActionBar().getSelectedNavigationIndex());
  if (requestCode == FROM_CLOCK_ACTIVITY) {
    Chronos chronos=new Chronos(this);
    localPunchTable=chronos.getAllPunchesForThisPayPeriodByJob(chronos.getJobs().get(0));
    chronos.close();
  }
 else   if (requestCode == NewPunchActivity.NEW_PUNCH) {
    if (enableLog)     Log.d(TAG,""String_Node_Str"");
    Chronos chronos=new Chronos(this);
    localPunchTable=chronos.getAllPunchesForThisPayPeriodByJob(chronos.getJobs().get(0));
    chronos.close();
  }
  if (getSupportActionBar().getSelectedNavigationIndex() == 0) {
    setContentView(new DatePairView(this,localPunchTable.getPunchesByDay(new DateTime())));
  }
 else   if (getSupportActionBar().getSelectedNavigationIndex() == 1) {
    setContentView(new PayPeriodSummaryView(this,getPunchesByDate()));
  }
}"
24628,"@Override public boolean onOptionsItemSelected(MenuItem item){
  Log.d(TAG,""String_Node_Str"" + item);
  Log.d(TAG,""String_Node_Str"" + item.getItemId());
switch (item.getItemId()) {
case R.id.menu_insert:
    Intent newIntent=new Intent().setClass(this,NewPunchActivity.class);
  newIntent.putExtra(""String_Node_Str"",jobId.getID());
newIntent.putExtra(""String_Node_Str"",DateTime.now().getMillis());
startActivityForResult(newIntent,NewPunchActivity.NEW_PUNCH);
return true;
case R.id.menu_navigate_today:
payHolder.generate();
setContentView(new PayPeriodSummaryView(this,getPunchesByDate()));
return true;
case R.id.menu_navigate_back:
payHolder.moveBackwards();
setContentView(new PayPeriodSummaryView(this,getPunchesByDate()));
return true;
case R.id.menu_navigate_forward:
payHolder.moveForwards();
setContentView(new PayPeriodSummaryView(this,getPunchesByDate()));
return true;
case android.R.id.home:
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + item);
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + item.getItemId());
switch (item.getItemId()) {
case R.id.menu_insert:
    Intent newIntent=new Intent().setClass(this,NewPunchActivity.class);
  newIntent.putExtra(""String_Node_Str"",(long)jobId.getID());
newIntent.putExtra(""String_Node_Str"",DateTime.now().getMillis());
startActivityForResult(newIntent,NewPunchActivity.NEW_PUNCH);
return true;
case R.id.menu_navigate_today:
payHolder.generate();
setContentView(new PayPeriodSummaryView(this,getPunchesByDate()));
return true;
case R.id.menu_navigate_back:
payHolder.moveBackwards();
setContentView(new PayPeriodSummaryView(this,getPunchesByDate()));
return true;
case R.id.menu_navigate_forward:
payHolder.moveForwards();
setContentView(new PayPeriodSummaryView(this,getPunchesByDate()));
return true;
case android.R.id.home:
default :
return super.onOptionsItemSelected(item);
}
}"
24629,"@Override public void onCreate(Bundle savedInstanceState){
  Log.d(TAG,""String_Node_Str"");
  super.onCreate(savedInstanceState);
  setContentView(R.layout.punch_pair_editor);
  Spinner taskSpinnerIn=(Spinner)findViewById(R.id.taskSpinnerIn);
  Spinner taskSpinnerOut=(Spinner)findViewById(R.id.taskSpinnerOut);
  if (savedInstanceState != null) {
    jobID=savedInstanceState.getLong(""String_Node_Str"");
    date=new DateTime(savedInstanceState.getLong(""String_Node_Str""));
  }
 else {
    jobID=getIntent().getExtras().getLong(""String_Node_Str"");
    date=new DateTime(getIntent().getExtras().getLong(""String_Node_Str""));
  }
  Chronos chron=new Chronos(this);
  tasks=chron.getAllTasks();
  @SuppressWarnings(""String_Node_Str"") ArrayAdapter spinnerAdapter=new ArrayAdapter(this,android.R.layout.simple_spinner_item,tasks);
  spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  taskSpinnerIn.setAdapter(spinnerAdapter);
  taskSpinnerOut.setAdapter(spinnerAdapter);
  boolean twentyFourHourTime=DateFormat.is24HourFormat(this);
  TimePicker inTime=(TimePicker)findViewById(R.id.TimePicker1);
  inTime.setIs24HourView(twentyFourHourTime);
  TimePicker outTime=(TimePicker)findViewById(R.id.TimePicker2);
  outTime.setIs24HourView(twentyFourHourTime);
  DateTime now=new DateTime();
  Log.d(TAG,""String_Node_Str"" + now.getHourOfDay());
  Log.d(TAG,""String_Node_Str"" + now.getMinuteOfHour());
  inTime.setCurrentHour(now.getHourOfDay());
  inTime.setCurrentMinute(now.getMinuteOfHour());
  taskSpinnerIn.setSelection(0);
  findViewById(R.id.outLayout).setVisibility(View.GONE);
  chron.close();
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
    BitmapDrawable bg=(BitmapDrawable)getResources().getDrawable(R.drawable.bg_striped);
    bg.setTileModeXY(Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
    getSupportActionBar().setBackgroundDrawable(bg);
    BitmapDrawable bgSplit=(BitmapDrawable)getResources().getDrawable(R.drawable.bg_striped_split_img);
    bgSplit.setTileModeXY(Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
    getSupportActionBar().setSplitBackgroundDrawable(bgSplit);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  if (enableLog)   Log.d(TAG,""String_Node_Str"");
  super.onCreate(savedInstanceState);
  setContentView(R.layout.punch_pair_editor);
  Spinner taskSpinnerIn=(Spinner)findViewById(R.id.taskSpinnerIn);
  Spinner taskSpinnerOut=(Spinner)findViewById(R.id.taskSpinnerOut);
  if (savedInstanceState != null) {
    jobID=savedInstanceState.getLong(""String_Node_Str"");
    date=new DateTime(savedInstanceState.getLong(""String_Node_Str""));
  }
 else {
    jobID=getIntent().getExtras().getLong(""String_Node_Str"");
    date=new DateTime(getIntent().getExtras().getLong(""String_Node_Str""));
  }
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + jobID);
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + date);
  Chronos chron=new Chronos(this);
  tasks=chron.getAllTasks();
  @SuppressWarnings(""String_Node_Str"") ArrayAdapter spinnerAdapter=new ArrayAdapter(this,android.R.layout.simple_spinner_item,tasks);
  spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  taskSpinnerIn.setAdapter(spinnerAdapter);
  taskSpinnerOut.setAdapter(spinnerAdapter);
  boolean twentyFourHourTime=DateFormat.is24HourFormat(this);
  TimePicker inTime=(TimePicker)findViewById(R.id.TimePicker1);
  inTime.setIs24HourView(twentyFourHourTime);
  TimePicker outTime=(TimePicker)findViewById(R.id.TimePicker2);
  outTime.setIs24HourView(twentyFourHourTime);
  DateTime now=new DateTime();
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + now.getHourOfDay());
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + now.getMinuteOfHour());
  inTime.setCurrentHour(now.getHourOfDay());
  inTime.setCurrentMinute(now.getMinuteOfHour());
  taskSpinnerIn.setSelection(0);
  findViewById(R.id.outLayout).setVisibility(View.GONE);
  chron.close();
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
    BitmapDrawable bg=(BitmapDrawable)getResources().getDrawable(R.drawable.bg_striped);
    bg.setTileModeXY(Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
    getSupportActionBar().setBackgroundDrawable(bg);
    BitmapDrawable bgSplit=(BitmapDrawable)getResources().getDrawable(R.drawable.bg_striped_split_img);
    bgSplit.setTileModeXY(Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
    getSupportActionBar().setSplitBackgroundDrawable(bgSplit);
  }
}"
24630,"private void updateDatabase(){
  int hour, min;
  TimePicker inTime=(TimePicker)findViewById(R.id.TimePicker1);
  Spinner taskSpinnerIn=(Spinner)findViewById(R.id.taskSpinnerIn);
  inTime.clearFocus();
  hour=inTime.getCurrentHour();
  min=inTime.getCurrentMinute();
  Task inTask=tasks.get(taskSpinnerIn.getSelectedItemPosition());
  DateTime date1=new DateTime(date.getYear(),date.getMonthOfYear(),date.getDayOfMonth(),hour,min);
  Chronos chrono=new Chronos(this);
  Job thisJob=null;
  List<Job> jobs=chrono.getJobs();
  for (  Job job : jobs) {
    if (job.getID() == jobID)     thisJob=job;
  }
  Punch newPunch=new Punch(thisJob,inTask,date1);
  Log.d(TAG,""String_Node_Str"" + newPunch.getTime().getMillis());
  chrono.insertPunch(newPunch);
  chrono.close();
}","private void updateDatabase(){
  int hour, min;
  TimePicker inTime=(TimePicker)findViewById(R.id.TimePicker1);
  Spinner taskSpinnerIn=(Spinner)findViewById(R.id.taskSpinnerIn);
  inTime.clearFocus();
  hour=inTime.getCurrentHour();
  min=inTime.getCurrentMinute();
  Task inTask=tasks.get(taskSpinnerIn.getSelectedItemPosition());
  DateTime date1=new DateTime(date.getYear(),date.getMonthOfYear(),date.getDayOfMonth(),hour,min);
  Chronos chrono=new Chronos(this);
  Job thisJob=null;
  List<Job> jobs=chrono.getJobs();
  for (  Job job : jobs) {
    if (job.getID() == jobID)     thisJob=job;
  }
  Punch newPunch=new Punch(thisJob,inTask,date1);
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + newPunch.getTime().getMillis());
  chrono.insertPunch(newPunch);
  chrono.close();
}"
24631,"@Override public boolean onOptionsItemSelected(MenuItem item){
  Log.d(TAG,""String_Node_Str"" + item);
  Log.d(TAG,""String_Node_Str"" + item.getItemId());
switch (item.getItemId()) {
case R.id.menuSave:
    updateDatabase();
  setResult(RESULT_OK);
finish();
return true;
case android.R.id.home:
case R.id.menuCancel:
setResult(RESULT_CANCELED);
finish();
return true;
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + item);
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + item.getItemId());
switch (item.getItemId()) {
case R.id.menuSave:
    updateDatabase();
  setResult(RESULT_OK);
finish();
return true;
case android.R.id.home:
case R.id.menuCancel:
setResult(RESULT_CANCELED);
finish();
return true;
default :
return super.onOptionsItemSelected(item);
}
}"
24632,"@Override public void onCreate(Bundle savedInstanceState){
  Log.d(TAG,""String_Node_Str"");
  super.onCreate(savedInstanceState);
  setContentView(R.layout.punch_pair_editor);
  int punch1;
  int punch2;
  if (savedInstanceState != null) {
    punch1=savedInstanceState.getInt(""String_Node_Str"");
    punch2=savedInstanceState.getInt(""String_Node_Str"");
  }
 else {
    punch1=getIntent().getExtras().getInt(""String_Node_Str"");
    punch2=getIntent().getExtras().getInt(""String_Node_Str"");
  }
  Log.d(TAG,""String_Node_Str"" + punch1);
  Log.d(TAG,""String_Node_Str"" + punch2);
  updateUi(punch1,punch2);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
    BitmapDrawable bg=(BitmapDrawable)getResources().getDrawable(R.drawable.bg_striped);
    bg.setTileModeXY(Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
    getSupportActionBar().setBackgroundDrawable(bg);
    BitmapDrawable bgSplit=(BitmapDrawable)getResources().getDrawable(R.drawable.bg_striped_split_img);
    bgSplit.setTileModeXY(Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
    getSupportActionBar().setSplitBackgroundDrawable(bgSplit);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  if (enableLog)   Log.d(TAG,""String_Node_Str"");
  super.onCreate(savedInstanceState);
  setContentView(R.layout.punch_pair_editor);
  int punch1;
  int punch2;
  if (savedInstanceState != null) {
    punch1=savedInstanceState.getInt(""String_Node_Str"");
    punch2=savedInstanceState.getInt(""String_Node_Str"");
  }
 else {
    punch1=getIntent().getExtras().getInt(""String_Node_Str"");
    punch2=getIntent().getExtras().getInt(""String_Node_Str"");
  }
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + punch1);
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + punch2);
  updateUi(punch1,punch2);
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
    BitmapDrawable bg=(BitmapDrawable)getResources().getDrawable(R.drawable.bg_striped);
    bg.setTileModeXY(Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
    getSupportActionBar().setBackgroundDrawable(bg);
    BitmapDrawable bgSplit=(BitmapDrawable)getResources().getDrawable(R.drawable.bg_striped_split_img);
    bgSplit.setTileModeXY(Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
    getSupportActionBar().setSplitBackgroundDrawable(bgSplit);
  }
}"
24633,"private void updateUi(int punch1,int punch2){
  Spinner taskSpinnerIn=(Spinner)findViewById(R.id.taskSpinnerIn);
  Spinner taskSpinnerOut=(Spinner)findViewById(R.id.taskSpinnerOut);
  Chronos chron=new Chronos(this);
  tasks=chron.getAllTasks();
  @SuppressWarnings(""String_Node_Str"") ArrayAdapter spinnerAdapter=new ArrayAdapter(this,android.R.layout.simple_spinner_item,tasks);
  spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  taskSpinnerIn.setAdapter(spinnerAdapter);
  taskSpinnerOut.setAdapter(spinnerAdapter);
  boolean twentyFourHourTime=DateFormat.is24HourFormat(this);
  TimePicker inTime=(TimePicker)findViewById(R.id.TimePicker1);
  inTime.setIs24HourView(twentyFourHourTime);
  TimePicker outTime=(TimePicker)findViewById(R.id.TimePicker2);
  outTime.setIs24HourView(twentyFourHourTime);
  p1=chron.getPunchById(punch1);
  p2=chron.getPunchById(punch2);
  Log.d(TAG,""String_Node_Str"" + p1.getTime().getHourOfDay());
  Log.d(TAG,""String_Node_Str"" + p1.getTime().getMinuteOfHour());
  inTime.setCurrentHour(p1.getTime().getHourOfDay());
  inTime.setCurrentMinute(p1.getTime().getMinuteOfHour());
  for (int i=0; i < spinnerAdapter.getCount(); i++) {
    if (p1.getTask().getID() == tasks.get(i).getID())     taskSpinnerIn.setSelection(i);
  }
  if (p2 != null) {
    Log.d(TAG,""String_Node_Str"" + p2.getTime().getHourOfDay());
    Log.d(TAG,""String_Node_Str"" + p2.getTime().getMinuteOfHour());
    outTime.setCurrentHour(p2.getTime().getHourOfDay());
    outTime.setCurrentMinute(p2.getTime().getMinuteOfHour());
    for (int i=0; i < spinnerAdapter.getCount(); i++) {
      if (p1.getTask().getID() == tasks.get(i).getID())       taskSpinnerOut.setSelection(i);
    }
  }
 else {
    findViewById(R.id.outLayout).setVisibility(View.GONE);
  }
  chron.close();
}","private void updateUi(int punch1,int punch2){
  Spinner taskSpinnerIn=(Spinner)findViewById(R.id.taskSpinnerIn);
  Spinner taskSpinnerOut=(Spinner)findViewById(R.id.taskSpinnerOut);
  Chronos chron=new Chronos(this);
  tasks=chron.getAllTasks();
  @SuppressWarnings(""String_Node_Str"") ArrayAdapter spinnerAdapter=new ArrayAdapter(this,android.R.layout.simple_spinner_item,tasks);
  spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  taskSpinnerIn.setAdapter(spinnerAdapter);
  taskSpinnerOut.setAdapter(spinnerAdapter);
  boolean twentyFourHourTime=DateFormat.is24HourFormat(this);
  TimePicker inTime=(TimePicker)findViewById(R.id.TimePicker1);
  inTime.setIs24HourView(twentyFourHourTime);
  TimePicker outTime=(TimePicker)findViewById(R.id.TimePicker2);
  outTime.setIs24HourView(twentyFourHourTime);
  p1=chron.getPunchById(punch1);
  p2=chron.getPunchById(punch2);
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + p1.getTime().getHourOfDay());
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + p1.getTime().getMinuteOfHour());
  inTime.setCurrentHour(p1.getTime().getHourOfDay());
  inTime.setCurrentMinute(p1.getTime().getMinuteOfHour());
  for (int i=0; i < spinnerAdapter.getCount(); i++) {
    if (p1.getTask().getID() == tasks.get(i).getID())     taskSpinnerIn.setSelection(i);
  }
  if (p2 != null) {
    if (enableLog)     Log.d(TAG,""String_Node_Str"" + p2.getTime().getHourOfDay());
    if (enableLog)     Log.d(TAG,""String_Node_Str"" + p2.getTime().getMinuteOfHour());
    outTime.setCurrentHour(p2.getTime().getHourOfDay());
    outTime.setCurrentMinute(p2.getTime().getMinuteOfHour());
    for (int i=0; i < spinnerAdapter.getCount(); i++) {
      if (p1.getTask().getID() == tasks.get(i).getID())       taskSpinnerOut.setSelection(i);
    }
  }
 else {
    findViewById(R.id.outLayout).setVisibility(View.GONE);
  }
  chron.close();
}"
24634,"@Override public boolean onOptionsItemSelected(MenuItem item){
  Log.d(TAG,""String_Node_Str"" + item);
  Log.d(TAG,""String_Node_Str"" + item.getItemId());
switch (item.getItemId()) {
case R.id.menuSave:
    updateDatabase();
  setResult(RESULT_OK);
finish();
return true;
case android.R.id.home:
case R.id.menuCancel:
setResult(RESULT_CANCELED);
finish();
return true;
case R.id.remove_in:
removePunches(RemoveOption.IN_TIME);
setResult(RESULT_OK);
finish();
return true;
case R.id.remove_both:
removePunches(RemoveOption.BOTH);
setResult(RESULT_OK);
finish();
return true;
case R.id.remove_out:
removePunches(RemoveOption.OUT_TIME);
setResult(RESULT_OK);
finish();
return true;
case R.id.RemoveMenu:
return false;
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + item);
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + item.getItemId());
switch (item.getItemId()) {
case R.id.menuSave:
    updateDatabase();
  setResult(RESULT_OK);
finish();
return true;
case android.R.id.home:
case R.id.menuCancel:
setResult(RESULT_CANCELED);
finish();
return true;
case R.id.remove_in:
removePunches(RemoveOption.IN_TIME);
setResult(RESULT_OK);
finish();
return true;
case R.id.remove_both:
removePunches(RemoveOption.BOTH);
setResult(RESULT_OK);
finish();
return true;
case R.id.remove_out:
removePunches(RemoveOption.OUT_TIME);
setResult(RESULT_OK);
finish();
return true;
case R.id.RemoveMenu:
return false;
default :
return super.onOptionsItemSelected(item);
}
}"
24635,"@Override public boolean onOptionsItemSelected(MenuItem item){
  Log.d(TAG,""String_Node_Str"" + item);
  Log.d(TAG,""String_Node_Str"" + item.getItemId());
switch (item.getItemId()) {
case R.id.menu_insert:
    Intent newIntent=new Intent().setClass(this,NewPunchActivity.class);
  newIntent.putExtra(""String_Node_Str"",jobId);
newIntent.putExtra(""String_Node_Str"",date);
startActivityForResult(newIntent,NewPunchActivity.NEW_PUNCH);
return true;
case android.R.id.home:
setResult(RESULT_OK);
finish();
return true;
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + item);
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + item.getItemId());
switch (item.getItemId()) {
case R.id.menu_insert:
    Intent newIntent=new Intent().setClass(this,NewPunchActivity.class);
  newIntent.putExtra(""String_Node_Str"",jobId);
newIntent.putExtra(""String_Node_Str"",date);
startActivityForResult(newIntent,NewPunchActivity.NEW_PUNCH);
return true;
case android.R.id.home:
setResult(RESULT_OK);
finish();
return true;
default :
return super.onOptionsItemSelected(item);
}
}"
24636,"public Duration getTime(){
  Duration dur=new Duration(0);
  for (  PunchPair pp : listOfPunchPairs) {
    dur=dur.plus(pp.getInterval().toDuration());
  }
  return dur;
}","public Duration getTime(){
  Duration dur=new Duration(0);
  for (  PunchPair pp : listOfPunchPairs) {
    if (enableLog)     Log.d(TAG,""String_Node_Str"" + pp.getInterval().toDurationMillis());
    dur=dur.plus(pp.getInterval().toDuration());
  }
  return dur;
}"
24637,"public void generatePunchPair(){
  listOfPunchPairs.clear();
  List<Punch> punches;
  List<Integer> tasks=gTaskTable.getTasks();
  Log.d(TAG,""String_Node_Str"" + tasks.size());
  for (  Integer curTask : tasks) {
    punches=gTaskTable.getPunchesForKey(curTask);
    Collections.sort(punches);
    Log.d(TAG,""String_Node_Str"" + curTask);
    for (int i=0; i < punches.size(); i+=2) {
      Punch inTime=punches.get(i);
      if (i < punches.size() - 1) {
        Punch outTime=punches.get(i + 1);
        listOfPunchPairs.add(new PunchPair(inTime,outTime));
      }
 else {
        listOfPunchPairs.add(new PunchPair(inTime,null));
      }
    }
  }
  sort();
  notifyDataSetChanged();
}","public void generatePunchPair(){
  listOfPunchPairs.clear();
  List<Punch> punches;
  List<Integer> tasks=gTaskTable.getTasks();
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + tasks.size());
  for (  Integer curTask : tasks) {
    punches=gTaskTable.getPunchesForKey(curTask);
    Collections.sort(punches);
    if (enableLog)     Log.d(TAG,""String_Node_Str"" + curTask);
    for (int i=0; i < punches.size(); i+=2) {
      Punch inTime=punches.get(i);
      if (i < punches.size() - 1) {
        Punch outTime=punches.get(i + 1);
        listOfPunchPairs.add(new PunchPair(inTime,outTime));
      }
 else {
        listOfPunchPairs.add(new PunchPair(inTime,null));
      }
    }
  }
  sort();
  notifyDataSetChanged();
}"
24638,"@Override public boolean onOptionsItemSelected(MenuItem item){
  Log.d(TAG,""String_Node_Str"" + item);
  Log.d(TAG,""String_Node_Str"" + item.getItemId());
switch (item.getItemId()) {
case R.id.menu_insert:
    Intent newIntent=new Intent().setClass(this,NewPunchActivity.class);
  newIntent.putExtra(""String_Node_Str"",jobId.getID());
startActivityForResult(newIntent,NewPunchActivity.NEW_PUNCH);
return true;
case R.id.menu_navigate_today:
payHolder.generate();
setContentView(new PayPeriodSummaryView(this,getPunchesByDate()));
return true;
case R.id.menu_navigate_back:
payHolder.moveBackwards();
setContentView(new PayPeriodSummaryView(this,getPunchesByDate()));
return true;
case R.id.menu_navigate_forward:
payHolder.moveForwards();
setContentView(new PayPeriodSummaryView(this,getPunchesByDate()));
return true;
case android.R.id.home:
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  Log.d(TAG,""String_Node_Str"" + item);
  Log.d(TAG,""String_Node_Str"" + item.getItemId());
switch (item.getItemId()) {
case R.id.menu_insert:
    Intent newIntent=new Intent().setClass(this,NewPunchActivity.class);
  newIntent.putExtra(""String_Node_Str"",jobId.getID());
newIntent.putExtra(""String_Node_Str"",DateTime.now().getMillis());
startActivityForResult(newIntent,NewPunchActivity.NEW_PUNCH);
return true;
case R.id.menu_navigate_today:
payHolder.generate();
setContentView(new PayPeriodSummaryView(this,getPunchesByDate()));
return true;
case R.id.menu_navigate_back:
payHolder.moveBackwards();
setContentView(new PayPeriodSummaryView(this,getPunchesByDate()));
return true;
case R.id.menu_navigate_forward:
payHolder.moveForwards();
setContentView(new PayPeriodSummaryView(this,getPunchesByDate()));
return true;
case android.R.id.home:
default :
return super.onOptionsItemSelected(item);
}
}"
24639,"@Override public void onCreate(Bundle savedInstanceState){
  Log.d(TAG,""String_Node_Str"");
  super.onCreate(savedInstanceState);
  setContentView(R.layout.punch_pair_editor);
  Spinner taskSpinnerIn=(Spinner)findViewById(R.id.taskSpinnerIn);
  Spinner taskSpinnerOut=(Spinner)findViewById(R.id.taskSpinnerOut);
  if (savedInstanceState != null) {
    jobID=savedInstanceState.getLong(""String_Node_Str"");
  }
 else {
    jobID=getIntent().getExtras().getLong(""String_Node_Str"");
  }
  Chronos chron=new Chronos(this);
  tasks=chron.getAllTasks();
  @SuppressWarnings(""String_Node_Str"") ArrayAdapter spinnerAdapter=new ArrayAdapter(this,android.R.layout.simple_spinner_item,tasks);
  spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  taskSpinnerIn.setAdapter(spinnerAdapter);
  taskSpinnerOut.setAdapter(spinnerAdapter);
  boolean twentyFourHourTime=DateFormat.is24HourFormat(this);
  TimePicker inTime=(TimePicker)findViewById(R.id.TimePicker1);
  inTime.setIs24HourView(twentyFourHourTime);
  TimePicker outTime=(TimePicker)findViewById(R.id.TimePicker2);
  outTime.setIs24HourView(twentyFourHourTime);
  DateTime now=new DateTime();
  Log.d(TAG,""String_Node_Str"" + now.getHourOfDay());
  Log.d(TAG,""String_Node_Str"" + now.getMinuteOfHour());
  inTime.setCurrentHour(now.getHourOfDay());
  inTime.setCurrentMinute(now.getMinuteOfHour());
  taskSpinnerIn.setSelection(0);
  findViewById(R.id.outLayout).setVisibility(View.GONE);
  chron.close();
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
    BitmapDrawable bg=(BitmapDrawable)getResources().getDrawable(R.drawable.bg_striped);
    bg.setTileModeXY(Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
    getSupportActionBar().setBackgroundDrawable(bg);
    BitmapDrawable bgSplit=(BitmapDrawable)getResources().getDrawable(R.drawable.bg_striped_split_img);
    bgSplit.setTileModeXY(Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
    getSupportActionBar().setSplitBackgroundDrawable(bgSplit);
  }
}","@Override public void onCreate(Bundle savedInstanceState){
  Log.d(TAG,""String_Node_Str"");
  super.onCreate(savedInstanceState);
  setContentView(R.layout.punch_pair_editor);
  Spinner taskSpinnerIn=(Spinner)findViewById(R.id.taskSpinnerIn);
  Spinner taskSpinnerOut=(Spinner)findViewById(R.id.taskSpinnerOut);
  if (savedInstanceState != null) {
    jobID=savedInstanceState.getLong(""String_Node_Str"");
    date=new DateTime(savedInstanceState.getLong(""String_Node_Str""));
  }
 else {
    jobID=getIntent().getExtras().getLong(""String_Node_Str"");
    date=new DateTime(getIntent().getExtras().getLong(""String_Node_Str""));
  }
  Chronos chron=new Chronos(this);
  tasks=chron.getAllTasks();
  @SuppressWarnings(""String_Node_Str"") ArrayAdapter spinnerAdapter=new ArrayAdapter(this,android.R.layout.simple_spinner_item,tasks);
  spinnerAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  taskSpinnerIn.setAdapter(spinnerAdapter);
  taskSpinnerOut.setAdapter(spinnerAdapter);
  boolean twentyFourHourTime=DateFormat.is24HourFormat(this);
  TimePicker inTime=(TimePicker)findViewById(R.id.TimePicker1);
  inTime.setIs24HourView(twentyFourHourTime);
  TimePicker outTime=(TimePicker)findViewById(R.id.TimePicker2);
  outTime.setIs24HourView(twentyFourHourTime);
  DateTime now=new DateTime();
  Log.d(TAG,""String_Node_Str"" + now.getHourOfDay());
  Log.d(TAG,""String_Node_Str"" + now.getMinuteOfHour());
  inTime.setCurrentHour(now.getHourOfDay());
  inTime.setCurrentMinute(now.getMinuteOfHour());
  taskSpinnerIn.setSelection(0);
  findViewById(R.id.outLayout).setVisibility(View.GONE);
  chron.close();
  getSupportActionBar().setDisplayHomeAsUpEnabled(true);
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
    BitmapDrawable bg=(BitmapDrawable)getResources().getDrawable(R.drawable.bg_striped);
    bg.setTileModeXY(Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
    getSupportActionBar().setBackgroundDrawable(bg);
    BitmapDrawable bgSplit=(BitmapDrawable)getResources().getDrawable(R.drawable.bg_striped_split_img);
    bgSplit.setTileModeXY(Shader.TileMode.REPEAT,Shader.TileMode.REPEAT);
    getSupportActionBar().setSplitBackgroundDrawable(bgSplit);
  }
}"
24640,"private void updateDatabase(){
  int hour, min;
  TimePicker inTime=(TimePicker)findViewById(R.id.TimePicker1);
  Spinner taskSpinnerIn=(Spinner)findViewById(R.id.taskSpinnerIn);
  inTime.clearFocus();
  hour=inTime.getCurrentHour();
  min=inTime.getCurrentMinute();
  Task inTask=tasks.get(taskSpinnerIn.getSelectedItemPosition());
  DateTime now=new DateTime();
  DateTime date1=new DateTime(now.getYear(),now.getMonthOfYear(),now.getDayOfMonth(),hour,min);
  Chronos chrono=new Chronos(this);
  Job thisJob=null;
  List<Job> jobs=chrono.getJobs();
  for (  Job job : jobs) {
    if (job.getID() == jobID)     thisJob=job;
  }
  Punch newPunch=new Punch(thisJob,inTask,date1);
  chrono.insertPunch(newPunch);
  chrono.close();
}","private void updateDatabase(){
  int hour, min;
  TimePicker inTime=(TimePicker)findViewById(R.id.TimePicker1);
  Spinner taskSpinnerIn=(Spinner)findViewById(R.id.taskSpinnerIn);
  inTime.clearFocus();
  hour=inTime.getCurrentHour();
  min=inTime.getCurrentMinute();
  Task inTask=tasks.get(taskSpinnerIn.getSelectedItemPosition());
  DateTime date1=new DateTime(date.getYear(),date.getMonthOfYear(),date.getDayOfMonth(),hour,min);
  Chronos chrono=new Chronos(this);
  Job thisJob=null;
  List<Job> jobs=chrono.getJobs();
  for (  Job job : jobs) {
    if (job.getID() == jobID)     thisJob=job;
  }
  Punch newPunch=new Punch(thisJob,inTask,date1);
  Log.d(TAG,""String_Node_Str"" + newPunch.getTime().getMillis());
  chrono.insertPunch(newPunch);
  chrono.close();
}"
24641,"protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == ClockActivity.FROM_CLOCK_ACTIVITY) {
    if (resultCode == RESULT_OK) {
      setContentView(new DatePairView(this,new DateTime(date)));
    }
  }
 else   if (requestCode == NewPunchActivity.NEW_PUNCH) {
    if (resultCode == RESULT_OK) {
      setContentView(new DatePairView(this,new DateTime(date)));
    }
  }
}","protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == ClockActivity.FROM_CLOCK_ACTIVITY) {
    setContentView(new DatePairView(this,new DateTime(date)));
  }
 else   if (requestCode == NewPunchActivity.NEW_PUNCH) {
    setContentView(new DatePairView(this,new DateTime(date)));
  }
}"
24642,"@Override public boolean onOptionsItemSelected(MenuItem item){
  Log.d(TAG,""String_Node_Str"" + item);
  Log.d(TAG,""String_Node_Str"" + item.getItemId());
switch (item.getItemId()) {
case R.id.menu_insert:
    Intent newIntent=new Intent().setClass(this,NewPunchActivity.class);
  newIntent.putExtra(""String_Node_Str"",jobId);
startActivityForResult(newIntent,NewPunchActivity.NEW_PUNCH);
return true;
case android.R.id.home:
setResult(RESULT_OK);
finish();
return true;
default :
return super.onOptionsItemSelected(item);
}
}","@Override public boolean onOptionsItemSelected(MenuItem item){
  Log.d(TAG,""String_Node_Str"" + item);
  Log.d(TAG,""String_Node_Str"" + item.getItemId());
switch (item.getItemId()) {
case R.id.menu_insert:
    Intent newIntent=new Intent().setClass(this,NewPunchActivity.class);
  newIntent.putExtra(""String_Node_Str"",jobId);
newIntent.putExtra(""String_Node_Str"",date);
startActivityForResult(newIntent,NewPunchActivity.NEW_PUNCH);
return true;
case android.R.id.home:
setResult(RESULT_OK);
finish();
return true;
default :
return super.onOptionsItemSelected(item);
}
}"
24643,"public List<Punch> getPunchesByJobAndDate(Job jobId,DateTime date){
  List<Punch> punches=new LinkedList<Punch>();
  try {
    Dao<Punch,String> punchDao=getPunchDao();
    Dao<Task,String> taskDAO=getTaskDao();
    Dao<Job,String> jobDAO=getJobDao();
    DateTime startOfPP=jobId.getStartOfPayPeriod();
    int days=(int)(date.getMillis() - startOfPP.getMillis()) / 1000 / 60/ 60/ 24;
    DateTime startOfDay=startOfPP.plusDays(days);
    DateTime endOfDay=startOfDay.plusDays(1);
    Log.d(TAG,""String_Node_Str"" + days);
    Log.d(TAG,""String_Node_Str"" + startOfDay.getMillis());
    Log.d(TAG,""String_Node_Str"" + endOfDay.getMillis());
    QueryBuilder<Punch,String> queryBuilder=punchDao.queryBuilder();
    queryBuilder.where().eq(Job.JOB_FIELD_NAME,jobId.getID()).and().gt(Punch.TIME_OF_PUNCH,startOfDay.getMillis()).and().le(Punch.TIME_OF_PUNCH,endOfDay.getMillis());
    PreparedQuery<Punch> preparedQuery=queryBuilder.prepare();
    punches=punchDao.query(preparedQuery);
    Log.d(TAG,""String_Node_Str"" + punches.size());
    for (    Punch work : punches) {
      taskDAO.refresh(work.getTask());
      jobDAO.refresh(work.getJobNumber());
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
    Log.e(TAG,e.getMessage());
  }
  return punches;
}","public List<Punch> getPunchesByJobAndDate(Job jobId,DateTime date){
  List<Punch> punches=new LinkedList<Punch>();
  try {
    Dao<Punch,String> punchDao=getPunchDao();
    Dao<Task,String> taskDAO=getTaskDao();
    Dao<Job,String> jobDAO=getJobDao();
    DateTime startOfPP=jobId.getStartOfPayPeriod();
    DateTime startOfDay=new DateTime(date.getYear(),date.getMonthOfYear(),date.getDayOfMonth(),startOfPP.getHourOfDay(),startOfPP.getMinuteOfHour());
    DateTime endOfDay=startOfDay.plusDays(1);
    Log.d(TAG,""String_Node_Str"" + startOfDay.getMillis());
    Log.d(TAG,""String_Node_Str"" + endOfDay.getMillis());
    QueryBuilder<Punch,String> queryBuilder=punchDao.queryBuilder();
    queryBuilder.where().eq(Job.JOB_FIELD_NAME,jobId.getID()).and().between(Punch.TIME_OF_PUNCH,startOfDay.getMillis(),endOfDay.getMillis());
    PreparedQuery<Punch> preparedQuery=queryBuilder.prepare();
    punches=punchDao.query(preparedQuery);
    Log.d(TAG,""String_Node_Str"" + punches.size());
    for (    Punch work : punches) {
      taskDAO.refresh(work.getTask());
      jobDAO.refresh(work.getJobNumber());
    }
  }
 catch (  SQLException e) {
    e.printStackTrace();
    Log.e(TAG,e.getMessage());
  }
  return punches;
}"
24644,"public void dropAndTest(){
  try {
    final int numberOfTasks=3;
    final int jobNumber=3;
    Dao<Punch,String> punchDao=getPunchDao();
    Dao<Task,String> taskDAO=getTaskDao();
    Dao<Job,String> jobDAO=getJobDao();
    Dao<Note,String> noteDAO=getNoteDao();
    DateTime jobMidnight=DateTime.now().withDayOfWeek(1).minusWeeks(2);
    Job currentJob=new Job(""String_Node_Str"",10,jobMidnight.toDateTime(),PayPeriodDuration.TWO_WEEKS);
    currentJob.setDoubletimeThreshold(60);
    currentJob.setOvertimeThreshold(40);
    currentJob.setOvertimeEnabled(true);
    jobDAO.create(currentJob);
    LinkedList<Task> tasks=new LinkedList<Task>();
    for (int i=0; i < numberOfTasks; i++) {
      Task newTask=new Task(currentJob,i,""String_Node_Str"" + (i + 1));
      tasks.add(newTask);
      taskDAO.create(newTask);
    }
    DateTime iTime=new DateTime();
    Random rand=new Random();
    for (int i=0; i < 3; i++) {
      for (int j=0; j < 15; j++) {
        DateTime tempTime=iTime.minusHours(j);
        tempTime=tempTime.minusMinutes(rand.nextInt() % 60);
        Punch temp=new Punch(currentJob,tasks.get(j % numberOfTasks),tempTime);
        Note newNote=new Note(tempTime,currentJob,""String_Node_Str"" + String.valueOf(j + 1));
        newNote.setTask(tasks.get(j % numberOfTasks));
        noteDAO.create(newNote);
        punchDao.create(temp);
      }
      iTime=iTime.plusDays(1);
    }
  }
 catch (  SQLException e) {
    Log.e(TAG,e.getMessage());
  }
catch (  Exception e) {
    Log.e(TAG,e.getMessage());
  }
}","public void dropAndTest(){
  try {
    final int numberOfTasks=3;
    final int jobNumber=3;
    Dao<Punch,String> punchDao=getPunchDao();
    Dao<Task,String> taskDAO=getTaskDao();
    Dao<Job,String> jobDAO=getJobDao();
    Dao<Note,String> noteDAO=getNoteDao();
    DateTime jobMidnight=DateTime.now().withDayOfWeek(1).minusWeeks(2);
    Job currentJob=new Job(""String_Node_Str"",10,jobMidnight.toDateTime(),PayPeriodDuration.TWO_WEEKS);
    currentJob.setDoubletimeThreshold(60);
    currentJob.setOvertimeThreshold(40);
    currentJob.setOvertimeEnabled(true);
    jobDAO.create(currentJob);
    LinkedList<Task> tasks=new LinkedList<Task>();
    for (int i=0; i < numberOfTasks; i++) {
      Task newTask=new Task(currentJob,i,""String_Node_Str"" + (i + 1));
      tasks.add(newTask);
      taskDAO.create(newTask);
    }
    DateTime iTime=new DateTime();
    Random rand=new Random();
    for (int i=0; i < 3; i++) {
      for (int j=0; j < 5; j++) {
        DateTime tempTime=iTime.minusHours(j);
        tempTime=tempTime.minusMinutes(rand.nextInt() % 60);
        Punch temp=new Punch(currentJob,tasks.get(j % numberOfTasks),tempTime);
        Note newNote=new Note(tempTime,currentJob,""String_Node_Str"" + String.valueOf(j + 1));
        newNote.setTask(tasks.get(j % numberOfTasks));
        noteDAO.create(newNote);
        punchDao.create(temp);
      }
      iTime=iTime.plusDays(1);
    }
  }
 catch (  SQLException e) {
    Log.e(TAG,e.getMessage());
  }
catch (  Exception e) {
    Log.e(TAG,e.getMessage());
  }
}"
24645,"private void createTable(Job inJob,int days,DateTime start){
  listOfDays=new LinkedList<DateTime>();
  gMap=new HashMap<DateTime,List<Punch>>();
  gPayPeriod=new PayPeriodHolder(inJob);
  for (int i=0; i < days; i++) {
    DateTime key=start.plusDays(i);
    LinkedList<Punch> list=new LinkedList<Punch>();
    gMap.put(key,list);
    listOfDays.add(key);
    System.out.println(""String_Node_Str"" + key);
  }
}","private void createTable(Job inJob,int days,DateTime start){
  listOfDays=new LinkedList<DateTime>();
  gMap=new HashMap<DateTime,List<Punch>>();
  gPayPeriod=new PayPeriodHolder(inJob);
  for (int i=0; i < days; i++) {
    DateTime key=start.plusDays(i);
    LinkedList<Punch> list=new LinkedList<Punch>();
    gMap.put(key,list);
    listOfDays.add(key);
  }
}"
24646,"public List<Punch> getPunchesByDay(DateTime key){
  Duration dur=new Duration(startOfTable,key);
  if (key.getSecondOfDay() >= startOfTable.getSecondOfDay()) {
    key=startOfTable.plusDays((int)dur.getStandardDays());
  }
 else {
    key=startOfTable.plusDays((int)dur.getStandardDays() - 1);
  }
  return ((List)gMap.get(key));
}","public List<Punch> getPunchesByDay(DateTime key){
  Duration dur=new Duration(startOfTable,key);
  key=startOfTable.plusDays((int)dur.getStandardDays());
  return ((List)gMap.get(key));
}"
24647,"public PunchTable(DateTime start,PayPeriodDuration dur,Job inJob){
  startOfTable=start;
  int days;
switch (dur) {
case ONE_WEEK:
    days=7;
  break;
case TWO_WEEKS:
days=14;
break;
case THREE_WEEKS:
days=3 * 7;
break;
case FOUR_WEEKS:
days=4 * 7;
break;
default :
days=14;
break;
}
try {
Log.d(TAG,""String_Node_Str"" + days);
}
 catch (Exception e) {
System.out.println(""String_Node_Str"" + days);
}
createTable(inJob,days,start);
}","public PunchTable(DateTime start,PayPeriodDuration dur,Job inJob){
  startOfTable=start;
  int days;
switch (dur) {
case ONE_WEEK:
    days=7;
  break;
case TWO_WEEKS:
days=14;
break;
case THREE_WEEKS:
days=3 * 7;
break;
case FOUR_WEEKS:
days=4 * 7;
break;
default :
days=14;
break;
}
try {
Log.d(TAG,""String_Node_Str"" + days);
}
 catch (Exception e) {
try {
Log.d(TAG,""String_Node_Str"" + days);
Log.d(TAG,e.getMessage());
}
 catch (Exception e2) {
System.out.println(""String_Node_Str"" + days);
System.out.println(e.getMessage());
}
}
createTable(inJob,days,start);
}"
24648,"public void insert(Punch value){
  DateTime key=value.getTime();
  Duration dur=new Duration(startOfTable,key);
  key=startOfTable.plusDays((int)dur.getStandardDays());
  System.out.println(""String_Node_Str"" + key.getMillis());
  LinkedList<Punch> list=(LinkedList)gMap.get(key);
  list.add(value);
  Collections.sort(list);
}","public void insert(Punch value){
  DateTime key=value.getTime();
  Duration dur=new Duration(startOfTable,key);
  key=startOfTable.plusDays((int)dur.getStandardDays());
  LinkedList<Punch> list=(LinkedList)gMap.get(key);
  list.add(value);
  Collections.sort(list);
}"
24649,"@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
  Log.d(TAG,""String_Node_Str"" + position);
  Intent newIntent=new Intent().setClass(parent,DateViewerActivity.class);
  newIntent.putExtra(""String_Node_Str"",adapter.getDate(position).getMillis());
  parent.startActivityForResult(newIntent,ClockActivity.FROM_CLOCK_ACTIVITY);
}","@Override public void onItemClick(AdapterView<?> adapterView,View view,int position,long id){
  Log.d(TAG,""String_Node_Str"" + position);
  Intent newIntent=new Intent().setClass(parent,DateViewerActivity.class);
  newIntent.putExtra(""String_Node_Str"",adapter.getDate(position).getMillis());
  parent.startActivityForResult(newIntent,ClockActivity.FROM_CLOCK_ACTIVITY);
  Log.d(TAG,""String_Node_Str"" + adapter.getDate(position).getMillis());
}"
24650,"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + requestCode);
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + resultCode);
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + getSupportActionBar().getSelectedNavigationIndex());
  if (requestCode == FROM_CLOCK_ACTIVITY) {
    Chronos chronos=new Chronos(this);
    localPunchTable=chronos.getAllPunchesForThisPayPeriodByJob(chronos.getJobs().get(0));
    chronos.close();
  }
 else   if (requestCode == NewPunchActivity.NEW_PUNCH) {
    if (enableLog)     Log.d(TAG,""String_Node_Str"");
    Chronos chronos=new Chronos(this);
    localPunchTable=chronos.getAllPunchesForThisPayPeriodByJob(chronos.getJobs().get(0));
    chronos.close();
  }
  if (getSupportActionBar().getSelectedNavigationIndex() == 0) {
    setContentView(new DatePairView(this,localPunchTable.getPunchesByDay(new DateTime())));
  }
 else   if (getSupportActionBar().getSelectedNavigationIndex() == 1) {
    setContentView(new PayPeriodSummaryView(this,getPunchesByDate()));
  }
}","@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + requestCode);
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + resultCode);
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + getSupportActionBar().getSelectedNavigationIndex());
  if (requestCode == FROM_CLOCK_ACTIVITY) {
    Chronos chronos=new Chronos(this);
    localPunchTable=chronos.getAllPunchesForThisPayPeriodByJob(chronos.getJobs().get(0));
    chronos.close();
  }
 else   if (requestCode == NewPunchActivity.NEW_PUNCH) {
    if (enableLog)     Log.d(TAG,""String_Node_Str"");
    Chronos chronos=new Chronos(this);
    localPunchTable=chronos.getAllPunchesForThisPayPeriodByJob(chronos.getJobs().get(0));
    chronos.close();
  }
  if (getSupportActionBar().getSelectedNavigationIndex() == 0) {
    setContentView(new DatePairView(this,new DateTime()));
  }
 else   if (getSupportActionBar().getSelectedNavigationIndex() == 1) {
    setContentView(new PayPeriodSummaryView(this,getPunchesByDate()));
  }
}"
24651,"public TodayAdapterPair(Context context,List<Punch> listOfPunches){
  gContext=context;
  if (listOfPunches != null)   for (  Punch temp : listOfPunches) {
    Task tempTask=temp.getTask();
    gTaskTable.insert(tempTask,temp);
  }
  generatePunchPair();
}","public TodayAdapterPair(Context context,List<Punch> listOfPunches){
  gContext=context;
  for (  Punch p : listOfPunches) {
    Log.d(TAG,""String_Node_Str"" + p.getTime());
  }
  if (listOfPunches != null)   for (  Punch temp : listOfPunches) {
    Task tempTask=temp.getTask();
    gTaskTable.insert(tempTask,temp);
  }
  generatePunchPair();
}"
24652,"public void insertPunch(Punch punch){
  try {
    Dao<Punch,String> punchDao=getPunchDao();
    punchDao.update(punch);
  }
 catch (  SQLException e) {
    if (enableLog)     Log.e(TAG,""String_Node_Str"" + e.getMessage());
    e.getCause();
  }
}","public void insertPunch(Punch punch){
  try {
    Dao<Punch,String> punchDao=getPunchDao();
    punchDao.createOrUpdate(punch);
  }
 catch (  SQLException e) {
    if (enableLog)     Log.e(TAG,""String_Node_Str"" + e.getMessage());
    e.getCause();
  }
}"
24653,"public PunchTable getAllPunchesForThisPayPeriodByJob(Job jobId){
  PayPeriodHolder pph=new PayPeriodHolder(jobId);
  DateTime startOfPP=pph.getStartOfPayPeriod().toDateTime();
  DateTime endOfPP=pph.getEndOfPayPeriod().toDateTime();
  return getAllPunchesForPayPeriodByJob(jobId,startOfPP,endOfPP);
}","public PunchTable getAllPunchesForThisPayPeriodByJob(Job jobId){
  PayPeriodHolder pph=new PayPeriodHolder(jobId);
  DateTime startOfPP=pph.getStartOfPayPeriod().toDateTime();
  DateTime endOfPP=pph.getEndOfPayPeriod().toDateTime();
  Log.d(TAG,""String_Node_Str"" + startOfPP);
  Log.d(TAG,""String_Node_Str"" + endOfPP);
  return getAllPunchesForPayPeriodByJob(jobId,startOfPP,endOfPP);
}"
24654,"public DatePairView(SherlockActivity prnt,List<Punch> punches){
  super(prnt.getApplicationContext());
  parent=prnt;
  if (enableLog)   Log.d(TAG,""String_Node_Str"");
  Chronos chrono=new Chronos(parent);
  if (enableLog)   Log.d(TAG,""String_Node_Str"" + chrono.getJobs().size());
  Job thisJob=chrono.getJobs().get(0);
  chrono.close();
  adapter=new TodayAdapterPair(parent,punches);
  createUI(adapter,thisJob);
}","public DatePairView(SherlockActivity prnt,List<Punch> punches){
  super(prnt.getApplicationContext());
  parent=prnt;
  if (enableLog)   Log.d(TAG,""String_Node_Str"");
  Chronos chrono=new Chronos(parent);
  Job thisJob=chrono.getJobs().get(0);
  chrono.close();
  adapter=new TodayAdapterPair(parent,punches);
  createUI(adapter,thisJob);
}"
24655,"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  prefs=new PreferenceSingleton();
  Chronos forUpdate=new Chronos(getApplicationContext());
  SQLiteDatabase db=forUpdate.getWritableDatabase();
  db.close();
  StaticFunctions.fixMidnight(prefs.getStartOfThisPP(getApplicationContext()),prefs.getWeeksInPP(getApplicationContext()),getApplicationContext());
  setUpAlarm();
  GregorianCalendar midnightAlarm=new GregorianCalendar();
  midnightAlarm.add(Calendar.DAY_OF_YEAR,1);
  midnightAlarm.set(Calendar.HOUR_OF_DAY,0);
  midnightAlarm.set(Calendar.MINUTE,0);
  midnightAlarm.set(Calendar.SECOND,0);
  Intent sentIntent=new Intent(getApplicationContext(),MidnightBroadcast.class);
  PendingIntent sender=PendingIntent.getBroadcast(getApplicationContext(),Defines.MIDNIGHT_ALARM,sentIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  AlarmManager am=(AlarmManager)getSystemService(ALARM_SERVICE);
  am.setRepeating(AlarmManager.RTC,midnightAlarm.getTimeInMillis(),AlarmManager.INTERVAL_DAY,sender);
  TabHost tabHost=getTabHost();
  TabHost.TabSpec spec;
  Intent intent;
  intent=new Intent().setClass(this,com.kopysoft.chronos.ClockInAndOut.class);
  spec=tabHost.newTabSpec(""String_Node_Str"").setIndicator(""String_Node_Str"").setContent(intent);
  tabHost.addTab(spec);
  intent=new Intent().setClass(this,com.kopysoft.chronos.WeekView.class);
  spec=tabHost.newTabSpec(""String_Node_Str"").setIndicator(""String_Node_Str"").setContent(intent);
  tabHost.addTab(spec);
  intent=new Intent().setClass(this,com.kopysoft.chronos.PastView.class);
  spec=tabHost.newTabSpec(""String_Node_Str"").setIndicator(""String_Node_Str"").setContent(intent);
  tabHost.addTab(spec);
  tabHost.setCurrentTab(0);
  ListenerObj.getInstance().addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (DEBUG_PRINT)       Log.d(TAG,""String_Node_Str"");
      setUpAlarm();
    }
  }
);
}","@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.main);
  prefs=new PreferenceSingleton();
  Chronos forUpdate=new Chronos(getApplicationContext());
  SQLiteDatabase db=forUpdate.getWritableDatabase();
  db.close();
  StaticFunctions.fixMidnight(prefs.getStartOfThisPP(getApplicationContext()),prefs.getWeeksInPP(getApplicationContext()),getApplicationContext());
  setUpAlarm();
  GregorianCalendar midnightAlarm=new GregorianCalendar();
  midnightAlarm.add(Calendar.DAY_OF_YEAR,1);
  midnightAlarm.set(Calendar.HOUR_OF_DAY,0);
  midnightAlarm.set(Calendar.MINUTE,0);
  midnightAlarm.set(Calendar.SECOND,0);
  Intent sentIntent=new Intent(getApplicationContext(),MidnightBroadcast.class);
  PendingIntent sender=PendingIntent.getBroadcast(getApplicationContext(),Defines.MIDNIGHT_ALARM,sentIntent,PendingIntent.FLAG_UPDATE_CURRENT);
  AlarmManager am=(AlarmManager)getSystemService(ALARM_SERVICE);
  am.setRepeating(AlarmManager.RTC_WAKEUP,midnightAlarm.getTimeInMillis(),AlarmManager.INTERVAL_DAY,sender);
  TabHost tabHost=getTabHost();
  TabHost.TabSpec spec;
  Intent intent;
  intent=new Intent().setClass(this,com.kopysoft.chronos.ClockInAndOut.class);
  spec=tabHost.newTabSpec(""String_Node_Str"").setIndicator(""String_Node_Str"").setContent(intent);
  tabHost.addTab(spec);
  intent=new Intent().setClass(this,com.kopysoft.chronos.WeekView.class);
  spec=tabHost.newTabSpec(""String_Node_Str"").setIndicator(""String_Node_Str"").setContent(intent);
  tabHost.addTab(spec);
  intent=new Intent().setClass(this,com.kopysoft.chronos.PastView.class);
  spec=tabHost.newTabSpec(""String_Node_Str"").setIndicator(""String_Node_Str"").setContent(intent);
  tabHost.addTab(spec);
  tabHost.setCurrentTab(0);
  ListenerObj.getInstance().addPropertyChangeListener(new PropertyChangeListener(){
    public void propertyChange(    PropertyChangeEvent event){
      if (DEBUG_PRINT)       Log.d(TAG,""String_Node_Str"");
      setUpAlarm();
    }
  }
);
}"
24656,"public void onResume(){
  super.onResume();
}","public void onResume(){
  StaticFunctions.fixMidnight(prefs.getStartOfThisPP(getApplicationContext()),prefs.getWeeksInPP(getApplicationContext()),getApplicationContext());
  super.onResume();
}"
24657,"public void fixMidights(){
  boolean prevNeedFix=false;
  for (int i=0; i < _days.size(); i++) {
    boolean[] needFix=_days.get(i).checkForMidnight();
    if (needFix[Defines.REGULAR_TIME] == true) {
      if (prevNeedFix == false) {
        Day temp=_days.get(i);
        int[] dayInfo=temp.getDay();
        GregorianCalendar cal=new GregorianCalendar(dayInfo[0],dayInfo[1],dayInfo[2]);
        cal.add(GregorianCalendar.DAY_OF_YEAR,1);
        Punch quickFix=new Punch(cal.getTimeInMillis() - 1000,Defines.OUT,-1,Defines.REGULAR_TIME);
        quickFix.setNeedToUpdate(true);
        temp.add(quickFix);
        _days.get(i).updateDay();
        quickFix=new Punch(cal.getTimeInMillis() + 1000,Defines.IN,-1,Defines.REGULAR_TIME);
        quickFix.setNeedToUpdate(true);
        if (i + 1 < _days.size()) {
          _days.get(i + 1).add(quickFix);
          _days.get(i + 1).updateDay();
        }
      }
 else {
        Day temp=_days.get(i);
        int[] dayInfo=temp.getDay();
        GregorianCalendar cal=new GregorianCalendar(dayInfo[0],dayInfo[1],dayInfo[2]);
        cal.add(GregorianCalendar.DAY_OF_YEAR,1);
        Punch quickFix=new Punch(cal.getTimeInMillis() - 1000,Defines.OUT,-1,Defines.REGULAR_TIME);
        quickFix.setNeedToUpdate(true);
        temp.add(quickFix);
        _days.get(i).updateDay();
      }
    }
    prevNeedFix=needFix[Defines.REGULAR_TIME];
    for (int j=1; j < Defines.MAX_CLOCK_OPT; j++) {
      if (needFix[j] == true) {
        Day temp=_days.get(i);
        int[] dayInfo=temp.getDay();
        GregorianCalendar cal=new GregorianCalendar(dayInfo[0],dayInfo[1],dayInfo[2]);
        cal.add(GregorianCalendar.DAY_OF_YEAR,1);
        Punch quickFix=new Punch(cal.getTimeInMillis() - 1000,Defines.OUT,-1,j);
        quickFix.setNeedToUpdate(true);
        temp.add(quickFix);
        _days.get(i).updateDay();
      }
    }
  }
}","public void fixMidights(){
  long dayOfWeek=(_start.getTimeInMillis() - GregorianCalendar.getInstance().getTimeInMillis()) / Defines.MS_TO_SECOND / 60/ 60/ 24;
  for (int i=0; i < dayOfWeek; i++) {
    long[] times=_days.get(i).getArrayOfTime();
    if (times[Defines.REGULAR_TIME] < 0) {
      Day temp=_days.get(i);
      int[] dayInfo=temp.getDay();
      GregorianCalendar cal=new GregorianCalendar(dayInfo[0],dayInfo[1],dayInfo[2]);
      cal.add(GregorianCalendar.DAY_OF_YEAR,1);
      Punch quickFix=new Punch(cal.getTimeInMillis() - 1000,Defines.OUT,-1,Defines.REGULAR_TIME);
      quickFix.setNeedToUpdate(true);
      temp.add(quickFix);
      _days.get(i).updateDay();
    }
  }
}"
24658,"public static void fixMidnight(int[] startOfThisPP,int weeksInPP,Context context){
  startOfThisPP=Chronos.getPP(startOfThisPP,weeksInPP);
  GregorianCalendar cal=new GregorianCalendar(startOfThisPP[0],startOfThisPP[1],startOfThisPP[2]);
  cal.add(GregorianCalendar.DAY_OF_YEAR,7 * weeksInPP);
  int[] endOfPP={cal.get(GregorianCalendar.YEAR),cal.get(GregorianCalendar.MONTH),cal.get(GregorianCalendar.DAY_OF_MONTH)};
  PayPeriod thisPP=new PayPeriod(startOfThisPP,endOfPP,context);
  thisPP.fixMidights();
}","public static void fixMidnight(int[] startOfThisPP,int weeksInPP,Context context){
  startOfThisPP=Chronos.getPP(startOfThisPP,weeksInPP);
  GregorianCalendar cal=new GregorianCalendar(startOfThisPP[0],startOfThisPP[1],startOfThisPP[2]);
  cal.add(GregorianCalendar.DAY_OF_YEAR,7 * weeksInPP);
  int[] endOfPP={cal.get(GregorianCalendar.YEAR),cal.get(GregorianCalendar.MONTH),cal.get(GregorianCalendar.DAY_OF_MONTH)};
  PayPeriod thisPP=new PayPeriod(startOfThisPP,endOfPP,context);
  thisPP.fixMidnights();
}"
24659,"public void callBack(View v){
  TimePicker timePick=(TimePicker)findViewById(R.id.TimePicker01);
  Spinner spinner=(Spinner)findViewById(R.id.spinnerType);
  int hour=timePick.getCurrentHour();
  int min=timePick.getCurrentMinute();
  cal.set(GregorianCalendar.HOUR_OF_DAY,hour);
  cal.set(GregorianCalendar.MINUTE,min);
  cal.set(GregorianCalendar.SECOND,0);
  long time=cal.getTimeInMillis();
  if (DEBUG_PRINT)   Log.d(TAG,""String_Node_Str"" + cal.getTimeInMillis() + ""String_Node_Str""+ hour+ ""String_Node_Str""+ min);
  int actionReason=0;
  if (spinner.getSelectedItemPosition() != Spinner.INVALID_POSITION)   actionReason=(spinner.getSelectedItemPosition());
  if (DEBUG_PRINT)   Log.d(TAG,""String_Node_Str"" + id);
  if (v.getId() == R.id.OkButton) {
    Intent returnIntent=new Intent();
    returnIntent.putExtra(""String_Node_Str"",id);
    returnIntent.putExtra(""String_Node_Str"",time);
    returnIntent.putExtra(""String_Node_Str"",actionReason);
    returnIntent.putExtra(""String_Node_Str"",position);
    setResult(Activity.RESULT_OK,returnIntent);
    finish();
  }
 else   if (v.getId() == R.id.CancelButton) {
    Intent returnIntent=new Intent();
    returnIntent.putExtra(""String_Node_Str"",id);
    setResult(Activity.RESULT_CANCELED,returnIntent);
    finish();
  }
}","public void callBack(View v){
  TimePicker timePick=(TimePicker)findViewById(R.id.TimePicker01);
  timePick.clearFocus();
  Spinner spinner=(Spinner)findViewById(R.id.spinnerType);
  int hour=timePick.getCurrentHour();
  int min=timePick.getCurrentMinute();
  cal.set(GregorianCalendar.HOUR_OF_DAY,hour);
  cal.set(GregorianCalendar.MINUTE,min);
  cal.set(GregorianCalendar.SECOND,0);
  long time=cal.getTimeInMillis();
  if (DEBUG_PRINT)   Log.d(TAG,""String_Node_Str"" + cal.getTimeInMillis() + ""String_Node_Str""+ hour+ ""String_Node_Str""+ min);
  int actionReason=0;
  if (spinner.getSelectedItemPosition() != Spinner.INVALID_POSITION)   actionReason=(spinner.getSelectedItemPosition());
  if (DEBUG_PRINT)   Log.d(TAG,""String_Node_Str"" + id);
  if (v.getId() == R.id.OkButton) {
    Intent returnIntent=new Intent();
    returnIntent.putExtra(""String_Node_Str"",id);
    returnIntent.putExtra(""String_Node_Str"",time);
    returnIntent.putExtra(""String_Node_Str"",actionReason);
    returnIntent.putExtra(""String_Node_Str"",position);
    setResult(Activity.RESULT_OK,returnIntent);
    finish();
  }
 else   if (v.getId() == R.id.CancelButton) {
    Intent returnIntent=new Intent();
    returnIntent.putExtra(""String_Node_Str"",id);
    setResult(Activity.RESULT_CANCELED,returnIntent);
    finish();
  }
}"
24660,"public void infosystem(String[] split,Player player,PlayerChatEvent event) throws SQLException {
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (StockCraftPropertiesVar.perm == false || StockCraftPermissions.getInstance().course(player)) {
      String idname=String.valueOf(split[1]);
      String id=idchange(idname);
      String[] gtext=StockCraftDatabase.getcourse(id);
      String course=gtext[1];
      String lastday=gtext[2];
      String percent=gtext[3];
      String days50=gtext[4];
      player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"" + idname+ ChatColor.BLUE+ ""String_Node_Str""+ course+ ChatColor.DARK_AQUA+ ""String_Node_Str""+ lastday+ ChatColor.BLUE+ ""String_Node_Str""+ percent+ ChatColor.DARK_AQUA+ ""String_Node_Str""+ days50);
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (StockCraftPropertiesVar.perm == false || StockCraftPermissions.getInstance().stocks(player)) {
      Statement statement=(Statement)StockCraftDatabase.conn.createStatement();
      if (statement != null) {
        ResultSet resultset=null;
        int amountof=0;
        float sumpaid=0;
        String id=null;
        String shortid=null;
        String course=null;
        String sql=""String_Node_Str"" + player.getName() + ""String_Node_Str"";
        try {
          resultset=statement.executeQuery(sql);
          try {
            Boolean bought=false;
            int l=0;
            while (resultset.next()) {
              l=l + 1;
            }
            resultset.beforeFirst();
            String[] idlist=new String[l];
            float[] sumpaidlist=new float[l];
            int[] amountoflist=new int[l];
            for (int i=0; resultset.next(); i++) {
              id=resultset.getString(""String_Node_Str"");
              sumpaidlist[i]=Float.valueOf(resultset.getString(""String_Node_Str""));
              amountoflist[i]=Integer.valueOf(resultset.getString(""String_Node_Str""));
              if (id != null) {
                bought=true;
              }
              shortid=idchange(id);
              idlist[i]=shortid;
            }
            if (bought == false) {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"");
            }
 else {
              String[] gtext=StockCraftDatabase.getcourse(idlist);
              float profit=0;
              for (int i=0; i < idlist.length; i++) {
                course=gtext[i];
                amountof=amountoflist[i];
                sumpaid=sumpaidlist[i];
                id=idback(idlist[i]);
                float avp=0;
                if (amountof > 0) {
                  profit=Float.valueOf(course) - (sumpaid / amountof);
                  avp=(sumpaid / amountof);
                }
 else                 if (amountof < 0) {
                  profit=Float.valueOf(course) - (sumpaid / (-amountof));
                  profit=-profit;
                  avp=(sumpaid / -amountof);
                }
                if (profit > 0) {
                  player.sendMessage(ChatColor.YELLOW + id + ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ amountof+ ChatColor.GREEN+ ""String_Node_Str""+ avp+ ChatColor.BLUE+ ""String_Node_Str""+ course+ ChatColor.GREEN+ ""String_Node_Str""+ profit);
                }
 else                 if (profit == 0) {
                  player.sendMessage(ChatColor.YELLOW + id + ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ amountof+ ChatColor.GREEN+ ""String_Node_Str""+ avp+ ChatColor.BLUE+ ""String_Node_Str""+ course+ ChatColor.WHITE+ ""String_Node_Str""+ profit);
                }
 else                 if (profit < 0) {
                  player.sendMessage(ChatColor.YELLOW + id + ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ amountof+ ChatColor.GREEN+ ""String_Node_Str""+ avp+ ChatColor.BLUE+ ""String_Node_Str""+ course+ ChatColor.RED+ ""String_Node_Str""+ profit);
                }
              }
            }
          }
 catch (          SQLException e) {
            e.printStackTrace();
          }
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    ids.idscommand(player,split);
    if (StockCraftPropertiesVar.perm == false || StockCraftPermissions.getInstance().ids(player)) {
      Statement statement=(Statement)StockCraftDatabase.conn.createStatement();
      if (statement != null) {
        ResultSet resultset=null;
        String id=null;
        String shortid=null;
        String course=null;
        String sql=""String_Node_Str"";
        try {
          resultset=statement.executeQuery(sql);
          try {
            player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
            Boolean idsadded=false;
            int l=0;
            while (resultset.next()) {
              l=l + 1;
            }
            resultset.beforeFirst();
            String[] idlist=new String[l];
            for (int i=0; resultset.next(); i++) {
              id=resultset.getString(""String_Node_Str"");
              if (id != null) {
                idsadded=true;
              }
              shortid=resultset.getString(""String_Node_Str"");
              idlist[i]=shortid;
            }
            if (idsadded == false) {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"");
            }
 else {
              String[] gtext=StockCraftDatabase.getcourse(idlist);
              for (int i=0; i < idlist.length; i++) {
                course=gtext[i];
                player.sendMessage(ChatColor.AQUA + idback(idlist[i]) + ChatColor.YELLOW+ ""String_Node_Str""+ course);
              }
            }
          }
 catch (          SQLException e) {
            e.printStackTrace();
          }
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    stocksell.stocksellcommand(player,split);
    if (StockCraftPropertiesVar.perm == false || StockCraftPermissions.getInstance().stocksell(player)) {
      String amount=""String_Node_Str"";
      String idname=String.valueOf(split[1]);
      String id=idchange(idname);
      String[] gtext=StockCraftDatabase.getcourse(id);
      String course=gtext[1];
      if (split.length > 2) {
        amount=split[2];
      }
      float fcourse=Float.valueOf(course);
      int iamount=Integer.valueOf(amount);
      float sumget=(iamount * fcourse);
      float allprofit=0;
      float price=(iamount * fcourse);
      Statement statement=(Statement)StockCraftDatabase.conn.createStatement();
      if (statement != null && id != null && price <= iConomy.getBank().getAccount(player.getName()).getBalance()) {
        ResultSet resultset=null;
        int amountof=0;
        float sumpaid=0;
        try {
          String sql=""String_Node_Str"" + player.getName() + ""String_Node_Str""+ idname+ ""String_Node_Str"";
          resultset=statement.executeQuery(sql);
          while (resultset.next()) {
            sumpaid=Float.valueOf(resultset.getString(""String_Node_Str""));
            amountof=Integer.valueOf(resultset.getString(""String_Node_Str""));
          }
          if (amountof < 0) {
            if (StockCraftPropertiesVar.shorten == true) {
              sql=""String_Node_Str"" + (amountof - iamount) + ""String_Node_Str""+ (sumpaid + price)+ ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ idname+ ""String_Node_Str"";
              statement.execute(sql);
              player.sendMessage(ChatColor.GREEN + amount + ""String_Node_Str""+ idname+ ""String_Node_Str""+ price+ ""String_Node_Str""+ iConomy.getBank().getCurrency());
              sumget=-sumget;
              iConomy.getBank().getAccount(player.getName()).add(sumget);
            }
 else {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"");
            }
          }
 else           if (amountof == 0) {
            if (StockCraftPropertiesVar.shorten == true) {
              sql=""String_Node_Str"" + player.getName() + ""String_Node_Str""+ idname+ ""String_Node_Str""+ price+ ""String_Node_Str""+ -iamount+ ""String_Node_Str"";
              statement.execute(sql);
              player.sendMessage(ChatColor.GREEN + amount + ""String_Node_Str""+ idname+ ""String_Node_Str""+ price+ ""String_Node_Str""+ iConomy.getBank().getCurrency());
              sumget=-sumget;
              iConomy.getBank().getAccount(player.getName()).add(sumget);
            }
 else {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"" + idname);
            }
          }
 else {
            if (amountof <= iamount) {
              if (amountof < iamount) {
                player.sendMessage(ChatColor.RED + ""String_Node_Str"" + iamount+ ""String_Node_Str""+ idname+ ""String_Node_Str""+ amountof+ ""String_Node_Str"");
                iamount=amountof;
                sumget=(iamount * fcourse);
              }
              sql=""String_Node_Str"" + player.getName() + ""String_Node_Str""+ idname+ ""String_Node_Str"";
            }
 else {
              sql=""String_Node_Str"" + (amountof - iamount) + ""String_Node_Str""+ (sumpaid - (sumpaid / amountof) * iamount)+ ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ idname+ ""String_Node_Str"";
            }
            statement.execute(sql);
            float profit=sumget - (sumpaid / amountof * iamount);
            player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + profit+ ""String_Node_Str""+ iConomy.getBank().getCurrency()+ ""String_Node_Str"");
            sql=""String_Node_Str"" + player.getName() + ""String_Node_Str"";
            resultset=statement.executeQuery(sql);
            while (resultset.next()) {
              allprofit=Float.valueOf(resultset.getString(""String_Node_Str""));
            }
            sql=""String_Node_Str"" + player.getName() + ""String_Node_Str"";
            resultset=statement.executeQuery(sql);
            String name=null;
            while (resultset.next()) {
              name=resultset.getString(""String_Node_Str"");
            }
            if (name != null) {
              sql=""String_Node_Str"" + (allprofit + profit) + ""String_Node_Str""+ player.getName()+ ""String_Node_Str"";
            }
 else {
              sql=""String_Node_Str"" + player.getName() + ""String_Node_Str""+ profit+ ""String_Node_Str"";
            }
            statement.execute(sql);
            iConomy.getBank().getAccount(player.getName()).add(sumget);
            player.sendMessage(ChatColor.GREEN + amount + ""String_Node_Str""+ idname+ ""String_Node_Str""+ sumget+ ""String_Node_Str""+ iConomy.getBank().getCurrency());
          }
        }
 catch (        Exception e) {
          e.printStackTrace();
        }
      }
 else {
        if (id == null) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"" + idname+ ""String_Node_Str"");
        }
 else         if (price > iConomy.getBank().getAccount(player.getName()).getBalance()) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"" + (iamount * fcourse)+ ""String_Node_Str""+ iConomy.getBank().getCurrency()+ ""String_Node_Str""+ iConomy.getBank().getAccount(player.getName()).getBalance()+ ""String_Node_Str""+ iConomy.getBank().getCurrency()+ ""String_Node_Str"");
        }
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    stockbuy.stockbuycommand(player,split);
    if (StockCraftPropertiesVar.perm == false || StockCraftPermissions.getInstance().stockbuy(player)) {
      String amount=""String_Node_Str"";
      String idname=String.valueOf(split[1]);
      String id=idchange(idname);
      String[] gtext=StockCraftDatabase.getcourse(id);
      String course=gtext[1];
      if (split.length > 2) {
        amount=split[2];
      }
      float fcourse=Float.valueOf(course);
      int iamount=Integer.valueOf(amount);
      float sumget=(iamount * fcourse);
      float allprofit=0;
      float price=(iamount * fcourse);
      if (id != null) {
        Statement statement=(Statement)StockCraftDatabase.conn.createStatement();
        if (statement != null) {
          ResultSet resultset=null;
          int amountof=0;
          float sumpaid=0;
          try {
            String sql=""String_Node_Str"" + player.getName() + ""String_Node_Str""+ idname+ ""String_Node_Str"";
            resultset=statement.executeQuery(sql);
            while (resultset.next()) {
              sumpaid=Float.valueOf(resultset.getString(""String_Node_Str""));
              amountof=Integer.valueOf(resultset.getString(""String_Node_Str""));
            }
            if (price <= iConomy.getBank().getAccount(player.getName()).getBalance() || amountof < 0) {
              if (amountof < 0) {
                if (StockCraftPropertiesVar.shorten == true) {
                  if (-amountof <= iamount) {
                    if (-amountof < iamount) {
                      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + iamount+ ""String_Node_Str""+ idname+ ""String_Node_Str""+ amountof+ ""String_Node_Str"");
                      iamount=amountof;
                      sumget=(iamount * fcourse);
                    }
                    sql=""String_Node_Str"" + player.getName() + ""String_Node_Str""+ idname+ ""String_Node_Str"";
                  }
 else {
                    sql=""String_Node_Str"" + (amountof + iamount) + ""String_Node_Str""+ (sumpaid - (sumpaid / -amountof) * iamount)+ ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ idname+ ""String_Node_Str"";
                  }
                  statement.execute(sql);
                  float profit=sumget - (sumpaid / -amountof * iamount);
                  profit=-profit;
                  player.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + profit+ ""String_Node_Str""+ iConomy.getBank().getCurrency()+ ""String_Node_Str"");
                  sql=""String_Node_Str"" + player.getName() + ""String_Node_Str"";
                  resultset=statement.executeQuery(sql);
                  while (resultset.next()) {
                    allprofit=Float.valueOf(resultset.getString(""String_Node_Str""));
                  }
                  sql=""String_Node_Str"" + player.getName() + ""String_Node_Str"";
                  resultset=statement.executeQuery(sql);
                  String name=null;
                  while (resultset.next()) {
                    name=resultset.getString(""String_Node_Str"");
                  }
                  if (name != null) {
                    sql=""String_Node_Str"" + (allprofit + profit) + ""String_Node_Str""+ player.getName()+ ""String_Node_Str"";
                  }
 else {
                    sql=""String_Node_Str"" + player.getName() + ""String_Node_Str""+ profit+ ""String_Node_Str"";
                  }
                  statement.execute(sql);
                  iConomy.getBank().getAccount(player.getName()).add(sumget);
                  iConomy.getBank().getAccount(player.getName()).add(profit * 2);
                  player.sendMessage(ChatColor.GREEN + amount + ""String_Node_Str""+ idname+ ""String_Node_Str""+ sumget+ ""String_Node_Str""+ iConomy.getBank().getCurrency());
                }
 else {
                  player.sendMessage(ChatColor.RED + ""String_Node_Str"");
                }
              }
 else               if (amountof == 0) {
                sql=""String_Node_Str"" + player.getName() + ""String_Node_Str""+ idname+ ""String_Node_Str""+ price+ ""String_Node_Str""+ amount+ ""String_Node_Str"";
                statement.execute(sql);
                iConomy.getBank().getAccount(player.getName()).subtract(price);
                player.sendMessage(ChatColor.GREEN + amount + ""String_Node_Str""+ idname+ ""String_Node_Str""+ price+ ""String_Node_Str""+ iConomy.getBank().getCurrency());
              }
 else               if (amountof > 0) {
                sql=""String_Node_Str"" + (amountof + iamount) + ""String_Node_Str""+ (sumpaid + price)+ ""String_Node_Str""+ player.getName()+ ""String_Node_Str""+ idname+ ""String_Node_Str"";
                statement.execute(sql);
                iConomy.getBank().getAccount(player.getName()).subtract(price);
                player.sendMessage(ChatColor.GREEN + amount + ""String_Node_Str""+ idname+ ""String_Node_Str""+ price+ ""String_Node_Str""+ iConomy.getBank().getCurrency());
              }
            }
 else {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"" + (iamount * fcourse)+ ""String_Node_Str""+ iConomy.getBank().getCurrency()+ ""String_Node_Str""+ iConomy.getBank().getAccount(player.getName()).getBalance()+ ""String_Node_Str""+ iConomy.getBank().getCurrency()+ ""String_Node_Str"");
            }
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
        }
      }
 else {
        if (id == null) {
          player.sendMessage(ChatColor.RED + ""String_Node_Str"" + idname+ ""String_Node_Str"");
        }
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (StockCraftPermissions.getInstance().addid(player)) {
      if (split.length > 2) {
        StockCraftDatabase.idadd(player,split[1],split[2]);
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (StockCraftPermissions.getInstance().addid(player)) {
      if (split.length > 1) {
        String loc=""String_Node_Str"" + split[1] + ""String_Node_Str"";
        String[] list=loadidlist(player,loc);
        for (int i=0; i < list.length; i=i + 2) {
          StockCraftDatabase.idadd(player,list[i],list[i + 1]);
        }
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (StockCraftPermissions.getInstance().removeid(player)) {
      if (split.length > 1) {
        Statement statement=(Statement)StockCraftDatabase.conn.createStatement();
        if (statement != null) {
          try {
            ResultSet resultset=null;
            String sql=""String_Node_Str"" + split[1] + ""String_Node_Str"";
            resultset=statement.executeQuery(sql);
            String longid=""String_Node_Str"";
            while (resultset.next()) {
              longid=resultset.getString(""String_Node_Str"");
            }
            if (longid.toLowerCase().equals(split[1].toLowerCase())) {
              sql=""String_Node_Str"" + longid + ""String_Node_Str"";
              resultset=statement.executeQuery(sql);
              String name=null;
              while (resultset.next()) {
                name=resultset.getString(""String_Node_Str"");
                player.sendMessage(ChatColor.RED + name + ""String_Node_Str""+ longid+ ""String_Node_Str"");
              }
              sql=""String_Node_Str"" + split[1] + ""String_Node_Str"";
              statement.execute(sql);
              player.sendMessage(ChatColor.GREEN + longid + ""String_Node_Str"");
            }
 else {
              player.sendMessage(ChatColor.RED + longid + ""String_Node_Str""+ split[1]+ ""String_Node_Str"");
            }
          }
 catch (          SQLException e1) {
            e1.printStackTrace();
          }
        }
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (StockCraftPropertiesVar.perm == false || StockCraftPermissions.getInstance().stocktop(player)) {
      Statement statement=(Statement)StockCraftDatabase.conn.createStatement();
      if (statement != null) {
        try {
          ResultSet resultset=null;
          String sql=""String_Node_Str"";
          resultset=statement.executeQuery(sql);
          String name=""String_Node_Str"";
          String profit=""String_Node_Str"";
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          for (int i=1; resultset.next() && i < 11; i++) {
            name=resultset.getString(""String_Node_Str"");
            profit=resultset.getString(""String_Node_Str"");
            player.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + i+ ""String_Node_Str""+ name+ ""String_Node_Str""+ profit);
          }
        }
 catch (        SQLException e1) {
          e1.printStackTrace();
        }
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (StockCraftPropertiesVar.perm == false || StockCraftPermissions.getInstance().stockhelp(player)) {
      String rulesloc=""String_Node_Str"";
      writetxt(rulesloc,event);
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}","public void infosystem(String[] split,Player player,PlayerChatEvent event) throws SQLException {
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (StockCraftPropertiesVar.perm == false || StockCraftPermissions.getInstance().course(player)) {
      String idname=String.valueOf(split[1]);
      String id=idchange(idname);
      String[] gtext=StockCraftDatabase.getcourse(id);
      String course=gtext[1];
      String lastday=gtext[2];
      String percent=gtext[3];
      String days50=gtext[4];
      player.sendMessage(ChatColor.DARK_AQUA + ""String_Node_Str"" + idname+ ChatColor.BLUE+ ""String_Node_Str""+ course+ ChatColor.DARK_AQUA+ ""String_Node_Str""+ lastday+ ChatColor.BLUE+ ""String_Node_Str""+ percent+ ChatColor.DARK_AQUA+ ""String_Node_Str""+ days50);
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (StockCraftPropertiesVar.perm == false || StockCraftPermissions.getInstance().stocks(player)) {
      Statement statement=(Statement)StockCraftDatabase.conn.createStatement();
      if (statement != null) {
        ResultSet resultset=null;
        int amountof=0;
        float sumpaid=0;
        String id=null;
        String shortid=null;
        String course=null;
        String sql=""String_Node_Str"" + player.getName() + ""String_Node_Str"";
        try {
          resultset=statement.executeQuery(sql);
          try {
            Boolean bought=false;
            int l=0;
            while (resultset.next()) {
              l=l + 1;
            }
            resultset.beforeFirst();
            String[] idlist=new String[l];
            float[] sumpaidlist=new float[l];
            int[] amountoflist=new int[l];
            for (int i=0; resultset.next(); i++) {
              id=resultset.getString(""String_Node_Str"");
              sumpaidlist[i]=Float.valueOf(resultset.getString(""String_Node_Str""));
              amountoflist[i]=Integer.valueOf(resultset.getString(""String_Node_Str""));
              if (id != null) {
                bought=true;
              }
              shortid=idchange(id);
              idlist[i]=shortid;
            }
            if (bought == false) {
              player.sendMessage(ChatColor.RED + ""String_Node_Str"");
            }
 else {
              String[] gtext=StockCraftDatabase.getcourse(idlist);
              float profit=0;
              for (int i=0; i < idlist.length; i++) {
                course=gtext[i];
                amountof=amountoflist[i];
                sumpaid=sumpaidlist[i];
                id=idback(idlist[i]);
                float avp=0;
                if (amountof > 0) {
                  profit=Float.valueOf(course) - (sumpaid / amountof);
                  avp=(sumpaid / amountof);
                }
 else                 if (amountof < 0) {
                  profit=Float.valueOf(course) - (sumpaid / (-amountof));
                  profit=-profit;
                  avp=(sumpaid / -amountof);
                }
                if (profit > 0) {
                  player.sendMessage(ChatColor.YELLOW + id + ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ amountof+ ChatColor.GREEN+ ""String_Node_Str""+ avp+ ChatColor.BLUE+ ""String_Node_Str""+ course+ ChatColor.GREEN+ ""String_Node_Str""+ profit);
                }
 else                 if (profit == 0) {
                  player.sendMessage(ChatColor.YELLOW + id + ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ amountof+ ChatColor.GREEN+ ""String_Node_Str""+ avp+ ChatColor.BLUE+ ""String_Node_Str""+ course+ ChatColor.WHITE+ ""String_Node_Str""+ profit);
                }
 else                 if (profit < 0) {
                  player.sendMessage(ChatColor.YELLOW + id + ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ amountof+ ChatColor.GREEN+ ""String_Node_Str""+ avp+ ChatColor.BLUE+ ""String_Node_Str""+ course+ ChatColor.RED+ ""String_Node_Str""+ profit);
                }
              }
            }
          }
 catch (          SQLException e) {
            e.printStackTrace();
          }
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    ids.idscommand(player,split);
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    stocksell.stocksellcommand(player,split);
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    stockbuy.stockbuycommand(player,split);
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (StockCraftPermissions.getInstance().addid(player)) {
      if (split.length > 2) {
        StockCraftDatabase.idadd(player,split[1],split[2]);
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (StockCraftPermissions.getInstance().addid(player)) {
      if (split.length > 1) {
        String loc=""String_Node_Str"" + split[1] + ""String_Node_Str"";
        String[] list=loadidlist(player,loc);
        for (int i=0; i < list.length; i=i + 2) {
          StockCraftDatabase.idadd(player,list[i],list[i + 1]);
        }
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (StockCraftPermissions.getInstance().removeid(player)) {
      if (split.length > 1) {
        Statement statement=(Statement)StockCraftDatabase.conn.createStatement();
        if (statement != null) {
          try {
            ResultSet resultset=null;
            String sql=""String_Node_Str"" + split[1] + ""String_Node_Str"";
            resultset=statement.executeQuery(sql);
            String longid=""String_Node_Str"";
            while (resultset.next()) {
              longid=resultset.getString(""String_Node_Str"");
            }
            if (longid.toLowerCase().equals(split[1].toLowerCase())) {
              sql=""String_Node_Str"" + longid + ""String_Node_Str"";
              resultset=statement.executeQuery(sql);
              String name=null;
              while (resultset.next()) {
                name=resultset.getString(""String_Node_Str"");
                player.sendMessage(ChatColor.RED + name + ""String_Node_Str""+ longid+ ""String_Node_Str"");
              }
              sql=""String_Node_Str"" + split[1] + ""String_Node_Str"";
              statement.execute(sql);
              player.sendMessage(ChatColor.GREEN + longid + ""String_Node_Str"");
            }
 else {
              player.sendMessage(ChatColor.RED + longid + ""String_Node_Str""+ split[1]+ ""String_Node_Str"");
            }
          }
 catch (          SQLException e1) {
            e1.printStackTrace();
          }
        }
      }
 else {
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
        player.sendMessage(ChatColor.RED + ""String_Node_Str"");
      }
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (StockCraftPropertiesVar.perm == false || StockCraftPermissions.getInstance().stocktop(player)) {
      Statement statement=(Statement)StockCraftDatabase.conn.createStatement();
      if (statement != null) {
        try {
          ResultSet resultset=null;
          String sql=""String_Node_Str"";
          resultset=statement.executeQuery(sql);
          String name=""String_Node_Str"";
          String profit=""String_Node_Str"";
          player.sendMessage(ChatColor.GREEN + ""String_Node_Str"");
          for (int i=1; resultset.next() && i < 11; i++) {
            name=resultset.getString(""String_Node_Str"");
            profit=resultset.getString(""String_Node_Str"");
            player.sendMessage(ChatColor.LIGHT_PURPLE + ""String_Node_Str"" + i+ ""String_Node_Str""+ name+ ""String_Node_Str""+ profit);
          }
        }
 catch (        SQLException e1) {
          e1.printStackTrace();
        }
      }
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
  if (split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"") || split[0].equalsIgnoreCase(""String_Node_Str"")) {
    event.setCancelled(true);
    if (StockCraftPropertiesVar.perm == false || StockCraftPermissions.getInstance().stockhelp(player)) {
      String rulesloc=""String_Node_Str"";
      writetxt(rulesloc,event);
    }
 else {
      player.sendMessage(ChatColor.RED + ""String_Node_Str"");
    }
  }
}"
24661,"public static void idscommand(Player player,String[] split) throws SQLException {
  if (StockCraftPropertiesVar.perm == false || StockCraftPermissions.getInstance().ids(player)) {
    Statement statement=(Statement)StockCraftDatabase.conn.createStatement();
    if (statement != null) {
      ResultSet resultset=null;
      String id=null;
      String shortid=null;
      String course=null;
      String sql=""String_Node_Str"";
      try {
        resultset=statement.executeQuery(sql);
        try {
          Boolean idsadded=false;
          int l=0;
          while (resultset.next()) {
            l=l + 1;
          }
          resultset.beforeFirst();
          String[] idlist=new String[l];
          for (int i=0; resultset.next(); i++) {
            id=resultset.getString(""String_Node_Str"");
            if (id != null) {
              idsadded=true;
            }
            shortid=resultset.getString(""String_Node_Str"");
            idlist[i]=shortid;
          }
          if (idsadded == false) {
            player.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
 else {
            int start=0;
            int end=9;
            int maxpage=0;
            maxpage=idlist.length / 10 + 1;
            boolean symbol=false;
            boolean page=false;
            if (split.length > 1) {
              if (split[1].matches(""String_Node_Str"")) {
                start=10 * (Integer.parseInt(split[1]) - 1);
                end=10 * (Integer.parseInt(split[1]) - 1) + 9;
                if (Integer.parseInt(split[1]) > maxpage) {
                  player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.LIGHT_PURPLE+ maxpage+ ChatColor.RED+ ""String_Node_Str"");
                }
 else {
                  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.LIGHT_PURPLE+ Integer.parseInt(split[1])+ ChatColor.GREEN+ ""String_Node_Str""+ maxpage+ ""String_Node_Str"");
                }
                page=true;
              }
 else               if (split[1].equals(""String_Node_Str"") || split[1].equals(""String_Node_Str"")) {
                symbol=true;
                if (split.length > 2) {
                  if (split[2].matches(""String_Node_Str"")) {
                    start=10 * (Integer.parseInt(split[2]) - 1);
                    end=10 * (Integer.parseInt(split[2]) - 1) + 9;
                    if (Integer.parseInt(split[2]) > maxpage) {
                      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.LIGHT_PURPLE+ maxpage+ ChatColor.RED+ ""String_Node_Str"");
                    }
 else {
                      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.LIGHT_PURPLE+ Integer.parseInt(split[2])+ ChatColor.GREEN+ ""String_Node_Str""+ maxpage+ ""String_Node_Str"");
                    }
                    page=true;
                  }
                }
              }
            }
            if (!page) {
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ maxpage+ ""String_Node_Str"");
            }
            String[] gtext=StockCraftDatabase.getcourse(idlist);
            for (int i=start; i < idlist.length && i < end; i++) {
              course=gtext[i];
              if (symbol) {
                player.sendMessage(ChatColor.AQUA + idlist[i] + ChatColor.YELLOW+ ""String_Node_Str""+ course);
              }
 else {
                player.sendMessage(ChatColor.AQUA + StockCraftCommands.idback(idlist[i]) + ChatColor.YELLOW+ ""String_Node_Str""+ course);
              }
            }
          }
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}","public static void idscommand(Player player,String[] split) throws SQLException {
  if (StockCraftPropertiesVar.perm == false || StockCraftPermissions.getInstance().ids(player)) {
    Statement statement=(Statement)StockCraftDatabase.conn.createStatement();
    if (statement != null) {
      ResultSet resultset=null;
      String id=null;
      String shortid=null;
      String course=null;
      String sql=""String_Node_Str"";
      try {
        resultset=statement.executeQuery(sql);
        try {
          Boolean idsadded=false;
          int l=0;
          while (resultset.next()) {
            l=l + 1;
          }
          resultset.beforeFirst();
          String[] idlist=new String[l];
          for (int i=0; resultset.next(); i++) {
            id=resultset.getString(""String_Node_Str"");
            if (id != null) {
              idsadded=true;
            }
            shortid=resultset.getString(""String_Node_Str"");
            idlist[i]=shortid;
          }
          if (idsadded == false) {
            player.sendMessage(ChatColor.RED + ""String_Node_Str"");
          }
 else {
            int start=0;
            int end=9;
            int maxpage=0;
            maxpage=(idlist.length) / 10 + 1;
            boolean symbol=false;
            boolean page=false;
            if (split.length > 1) {
              if (split[1].matches(""String_Node_Str"")) {
                start=10 * (Integer.parseInt(split[1]) - 1);
                end=10 * (Integer.parseInt(split[1]) - 1) + 9;
                if (Integer.parseInt(split[1]) > maxpage) {
                  player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.LIGHT_PURPLE+ maxpage+ ChatColor.RED+ ""String_Node_Str"");
                }
 else {
                  player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.LIGHT_PURPLE+ Integer.parseInt(split[1])+ ChatColor.GREEN+ ""String_Node_Str""+ maxpage+ ""String_Node_Str"");
                }
                page=true;
              }
 else               if (split[1].equals(""String_Node_Str"") || split[1].equals(""String_Node_Str"")) {
                symbol=true;
                if (split.length > 2) {
                  if (split[2].matches(""String_Node_Str"")) {
                    start=10 * (Integer.parseInt(split[2]) - 1);
                    end=10 * (Integer.parseInt(split[2]) - 1) + 9;
                    if (Integer.parseInt(split[2]) > maxpage) {
                      player.sendMessage(ChatColor.RED + ""String_Node_Str"" + ChatColor.LIGHT_PURPLE+ maxpage+ ChatColor.RED+ ""String_Node_Str"");
                    }
 else {
                      player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.LIGHT_PURPLE+ Integer.parseInt(split[2])+ ChatColor.GREEN+ ""String_Node_Str""+ maxpage+ ""String_Node_Str"");
                    }
                    page=true;
                  }
                }
              }
            }
            if (!page) {
              player.sendMessage(ChatColor.GREEN + ""String_Node_Str"" + ChatColor.LIGHT_PURPLE+ ""String_Node_Str""+ ChatColor.GREEN+ ""String_Node_Str""+ maxpage+ ""String_Node_Str"");
            }
            String[] gtext=StockCraftDatabase.getcourse(idlist);
            for (int i=start; i < idlist.length && i <= end; i++) {
              course=gtext[i];
              if (symbol) {
                player.sendMessage(ChatColor.AQUA + idlist[i] + ChatColor.YELLOW+ ""String_Node_Str""+ course);
              }
 else {
                player.sendMessage(ChatColor.AQUA + StockCraftCommands.idback(idlist[i]) + ChatColor.YELLOW+ ""String_Node_Str""+ course);
              }
            }
          }
        }
 catch (        SQLException e) {
          e.printStackTrace();
        }
      }
 catch (      SQLException e) {
        e.printStackTrace();
      }
    }
  }
 else {
    player.sendMessage(ChatColor.RED + ""String_Node_Str"");
  }
}"
24662,"/** 
 * Sets up the controls in the dialog
 * @param SoftwarePackage The category to be updated in this dialog.
 */
private void initializeDialogReadWrite(GwtTradeoffReason tradeoffReason){
  VerticalPanel baseLayout=new VerticalPanel();
  VerticalPanel nameLayout=new VerticalPanel();
  VerticalPanel descriptionLayout=new VerticalPanel();
  HorizontalPanel buttonsLayout=new HorizontalPanel();
  this.setText(messages.editTradeoffReasonDialogBoxTitle());
  nameLayout.add(new Label(messages.editTradeoffReasonDialogBoxName()));
  nameLayout.add(this.tradeoffReasonTextBox);
  this.tradeoffReasonTextBox.setWidth(""String_Node_Str"");
  this.tradeoffReasonTextBox.setSize(""String_Node_Str"",""String_Node_Str"");
  this.tradeoffReasonTextBox.setText(tradeoffReason.getTradeoffreason());
  saveButton=new Button(messages.editTradeoffReasonDialogBoxOkay(),new SaveHandler(this,tradeoffReason));
  Button cancelButton=new Button(messages.editTradeoffReasonDialogBoxCancel(),new CancelHandler(this));
  saveButton.setWidth(""String_Node_Str"");
  cancelButton.setWidth(""String_Node_Str"");
  buttonsLayout.setSpacing(10);
  buttonsLayout.add(saveButton);
  buttonsLayout.add(cancelButton);
  baseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
  baseLayout.add(nameLayout);
  baseLayout.add(descriptionLayout);
  baseLayout.add(buttonsLayout);
  baseLayout.setSpacing(5);
  this.setWidget(baseLayout);
}","/** 
 * Sets up the controls in the dialog
 * @param SoftwarePackage The category to be updated in this dialog.
 */
private void initializeDialogReadWrite(GwtTradeoffReason tradeoffReason){
  VerticalPanel baseLayout=new VerticalPanel();
  VerticalPanel nameLayout=new VerticalPanel();
  VerticalPanel descriptionLayout=new VerticalPanel();
  HorizontalPanel buttonsLayout=new HorizontalPanel();
  this.setText(messages.editTradeoffReasonDialogBoxTitleReadOnly());
  nameLayout.add(this.tradeoffReasonTextBox);
  this.tradeoffReasonTextBox.setWidth(""String_Node_Str"");
  this.tradeoffReasonTextBox.setSize(""String_Node_Str"",""String_Node_Str"");
  this.tradeoffReasonTextBox.setText(tradeoffReason.getTradeoffreason());
  saveButton=new Button(messages.editTradeoffReasonDialogBoxOkay(),new SaveHandler(this,tradeoffReason));
  Button cancelButton=new Button(messages.editTradeoffReasonDialogBoxCancel(),new CancelHandler(this));
  saveButton.setWidth(""String_Node_Str"");
  cancelButton.setWidth(""String_Node_Str"");
  buttonsLayout.setSpacing(10);
  buttonsLayout.add(saveButton);
  buttonsLayout.add(cancelButton);
  baseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
  baseLayout.add(nameLayout);
  baseLayout.add(descriptionLayout);
  baseLayout.add(buttonsLayout);
  baseLayout.setSpacing(5);
  this.setWidget(baseLayout);
}"
24663,"/** 
 * Sets up the controls in the dialog
 * @param SoftwarePackage The category to be updated in this dialog.
 */
private void initializeDialogReadOnly(GwtTradeoffReason tradeoffReason){
  VerticalPanel baseLayout=new VerticalPanel();
  VerticalPanel nameLayout=new VerticalPanel();
  VerticalPanel descriptionLayout=new VerticalPanel();
  HorizontalPanel buttonsLayout=new HorizontalPanel();
  this.setText(messages.editTradeoffReasonDialogBoxTitleReadOnly());
  nameLayout.add(new Label(messages.editTradeoffReasonDialogBoxName()));
  nameLayout.add(this.tradeoffReasonTextBox);
  this.tradeoffReasonTextBox.setWidth(""String_Node_Str"");
  this.tradeoffReasonTextBox.setSize(""String_Node_Str"",""String_Node_Str"");
  this.tradeoffReasonTextBox.setText(tradeoffReason.getTradeoffreason());
  Button okayButton=new Button(messages.editTradeoffReasonDialogBoxOkay(),new CancelHandler(this));
  okayButton.setWidth(""String_Node_Str"");
  buttonsLayout.setSpacing(10);
  buttonsLayout.add(okayButton);
  baseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
  baseLayout.add(nameLayout);
  baseLayout.add(descriptionLayout);
  baseLayout.add(buttonsLayout);
  baseLayout.setSpacing(5);
  this.setWidget(baseLayout);
}","/** 
 * Sets up the controls in the dialog
 * @param SoftwarePackage The category to be updated in this dialog.
 */
private void initializeDialogReadOnly(GwtTradeoffReason tradeoffReason){
  VerticalPanel baseLayout=new VerticalPanel();
  VerticalPanel nameLayout=new VerticalPanel();
  VerticalPanel descriptionLayout=new VerticalPanel();
  HorizontalPanel buttonsLayout=new HorizontalPanel();
  this.setText(messages.editTradeoffReasonDialogBoxTitleReadOnly());
  nameLayout.add(this.tradeoffReasonTextBox);
  this.tradeoffReasonTextBox.setWidth(""String_Node_Str"");
  this.tradeoffReasonTextBox.setSize(""String_Node_Str"",""String_Node_Str"");
  this.tradeoffReasonTextBox.setText(tradeoffReason.getTradeoffreason());
  Button okayButton=new Button(messages.editTradeoffReasonDialogBoxOkay(),new CancelHandler(this));
  okayButton.setWidth(""String_Node_Str"");
  buttonsLayout.setSpacing(10);
  buttonsLayout.add(okayButton);
  baseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
  baseLayout.add(nameLayout);
  baseLayout.add(descriptionLayout);
  baseLayout.add(buttonsLayout);
  baseLayout.setSpacing(5);
  this.setWidget(baseLayout);
}"
24664,"public CreateProjectDialog(int projectId,String projectName,int leadRequirementId,List<GwtProject> projects,List<GwtUser> users,ProjectGrid caller,int casesId){
  super();
  this.listOfProjects=projects;
  this.listOfUsers=users;
  this.caller=caller;
  this.initializeDialog(new GwtProject(projectId,projectName,leadRequirementId,casesId));
}","public CreateProjectDialog(int projectId,String projectName,int leadRequirementId,List<GwtProject> projects,List<GwtUser> users,ProjectGrid caller,int casesId){
  super();
  this.listOfProjects=projects;
  this.listOfUsers=users;
  this.caller=caller;
  edit=true;
  this.initializeDialog(new GwtProject(projectId,projectName,leadRequirementId,casesId));
}"
24665,"/** 
 * Sets up the controls in the dialog
 * @param project The category to be updated in this dialog.
 */
private void initializeDialog(GwtProject project){
  this.setAnimationEnabled(true);
  loadUserToSuggestionBox(listOfUsers);
  VerticalPanel nameLayout=new VerticalPanel();
  VerticalPanel leaderLayout=new VerticalPanel();
  VerticalPanel defaultTermsLayout=new VerticalPanel();
  HorizontalPanel buttonsLayout=new HorizontalPanel();
  VerticalPanel caseLayout=new VerticalPanel();
  HorizontalPanel caseChoice=new HorizontalPanel();
  VerticalPanel baseLayout=new VerticalPanel();
  baseLayout.setSpacing(10);
  baseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
  baseLayout.add(nameLayout);
  baseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_LEFT);
  baseLayout.add(caseLayout);
  baseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
  baseLayout.add(leaderLayout);
  baseLayout.add(defaultTermsLayout);
  baseLayout.add(buttonsLayout);
  nameLayout.add(new Label(messages.projectName()));
  nameLayout.add(this.projectTextBox);
  this.projectTextBox.setWidth(""String_Node_Str"");
  this.userSuggestBox.setWidth(""String_Node_Str"");
  leaderLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_LEFT);
  leaderLayout.add(new Label(messages.leadRequirementsEngineer() + ""String_Node_Str""));
  leaderLayout.add(this.userSuggestBox);
  caseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_LEFT);
  caseLayout.add(new Label(messages.ASquareCase() + ""String_Node_Str""));
  caseLayout.add(caseChoice);
  caseChoice.add(this.case1Radiobutton);
  caseChoice.add(this.case3Radiobutton);
  this.case1Radiobutton.setValue(true);
  if (project.isInDatabase()) {
    this.setText(messages.updateProjectDialogBoxTitle());
    GwtUser newAcqusitionOrganizationEngineer=getUserById(project.getAcquisitionOrganizationEngineer().getUserId());
    projectTextBox.setText(project.getName());
    userSuggestBox.setText(getSuggestionFormat(newAcqusitionOrganizationEngineer.getFullName(),newAcqusitionOrganizationEngineer.getUserName()));
  }
 else {
    this.setText(messages.createProjectDialogBoxTitle());
    defaultTermsLayout.setWidth(""String_Node_Str"");
    defaultTermsLayout.setSpacing(5);
    defaultTermsLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_LEFT);
  }
  saveButton=new Button(messages.save(),new SaveHandler(this,project));
  Button cancelButton=new Button(messages.cancel(),new CancelHandler(this));
  saveButton.setEnabled(false);
  this.projectTextBox.addKeyUpHandler(new squareKeyUpHandler());
  this.projectTextBox.addChangeHandler(new squareChangeHandler());
  this.projectTextBox.addKeyDownHandler(new squareKeyDownHandler());
  this.userSuggestBox.addKeyUpHandler(new squareKeyUpHandler());
  this.userSuggestBox.addKeyDownHandler(new squareKeyDownHandler());
  saveButton.setWidth(""String_Node_Str"");
  cancelButton.setWidth(""String_Node_Str"");
  buttonsLayout.setSpacing(10);
  buttonsLayout.add(saveButton);
  buttonsLayout.add(cancelButton);
  this.setWidget(baseLayout);
}","/** 
 * Sets up the controls in the dialog
 * @param project The category to be updated in this dialog.
 */
private void initializeDialog(GwtProject project){
  this.setAnimationEnabled(true);
  loadUserToSuggestionBox(listOfUsers);
  VerticalPanel nameLayout=new VerticalPanel();
  VerticalPanel leaderLayout=new VerticalPanel();
  VerticalPanel defaultTermsLayout=new VerticalPanel();
  HorizontalPanel buttonsLayout=new HorizontalPanel();
  VerticalPanel caseLayout=new VerticalPanel();
  HorizontalPanel caseChoice=new HorizontalPanel();
  VerticalPanel baseLayout=new VerticalPanel();
  baseLayout.setSpacing(10);
  baseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
  baseLayout.add(nameLayout);
  baseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_LEFT);
  baseLayout.add(caseLayout);
  baseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
  baseLayout.add(leaderLayout);
  baseLayout.add(defaultTermsLayout);
  baseLayout.add(buttonsLayout);
  nameLayout.add(new Label(messages.projectName()));
  nameLayout.add(this.projectTextBox);
  this.projectTextBox.setWidth(""String_Node_Str"");
  this.userSuggestBox.setWidth(""String_Node_Str"");
  leaderLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_LEFT);
  leaderLayout.add(new Label(messages.leadRequirementsEngineer() + ""String_Node_Str""));
  leaderLayout.add(this.userSuggestBox);
  if (!edit) {
    caseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_LEFT);
    caseLayout.add(new Label(messages.ASquareCase() + ""String_Node_Str""));
    caseLayout.add(caseChoice);
    caseChoice.add(this.case1Radiobutton);
    caseChoice.add(this.case3Radiobutton);
  }
  this.case1Radiobutton.setValue(true);
  if (project.isInDatabase()) {
    this.setText(messages.updateProjectDialogBoxTitle());
    GwtUser newAcqusitionOrganizationEngineer=getUserById(project.getAcquisitionOrganizationEngineer().getUserId());
    projectTextBox.setText(project.getName());
    userSuggestBox.setText(getSuggestionFormat(newAcqusitionOrganizationEngineer.getFullName(),newAcqusitionOrganizationEngineer.getUserName()));
  }
 else {
    this.setText(messages.createProjectDialogBoxTitle());
    defaultTermsLayout.setWidth(""String_Node_Str"");
    defaultTermsLayout.setSpacing(5);
    defaultTermsLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_LEFT);
  }
  saveButton=new Button(messages.save(),new SaveHandler(this,project));
  Button cancelButton=new Button(messages.cancel(),new CancelHandler(this));
  saveButton.setEnabled(false);
  this.projectTextBox.addKeyUpHandler(new squareKeyUpHandler());
  this.projectTextBox.addChangeHandler(new squareChangeHandler());
  this.projectTextBox.addKeyDownHandler(new squareKeyDownHandler());
  this.userSuggestBox.addKeyUpHandler(new squareKeyUpHandler());
  this.userSuggestBox.addKeyDownHandler(new squareKeyDownHandler());
  saveButton.setWidth(""String_Node_Str"");
  cancelButton.setWidth(""String_Node_Str"");
  buttonsLayout.setSpacing(10);
  buttonsLayout.add(saveButton);
  buttonsLayout.add(cancelButton);
  this.setWidget(baseLayout);
}"
24666,"/** 
 * Copy project
 */
@Override @AllowedRoles(roles={Roles.Administrator}) public GwtProject copyProject(GwtProject originalProject) throws SquareException {
  System.out.println(""String_Node_Str"");
  Project project=new Project(originalProject);
  project.setId(0);
  project.setName(project.getName() + ""String_Node_Str"");
  User aoe=userDao.fetch(originalProject.getAcquisitionOrganizationEngineer().getUserId());
  project.setAcquisitionOrganizationEngineer(aoe);
  Date now=new Date();
  project.setDateCreated(now);
  project.setDateModified(now);
  System.out.println(""String_Node_Str"");
  projectDao.create(project);
  System.out.println(""String_Node_Str"");
  userDao.addUserToProject(aoe,project,roleDao.findByName(ProjectRole.Acquisition_Organization_Engineer.getLabel()));
  Project original=new Project(originalProject);
  System.out.println(""String_Node_Str"");
  copyTerms(project,original);
  HashMap<Integer,Integer> goalMap=copyGoals(project,original);
  HashMap<Integer,Integer> assetMap=copyAssets(project,original);
  copyGoalAsset(original,goalMap,assetMap);
  HashMap<Integer,Integer> requirementMap=copyRequirements(project,original);
  copyRequirementGoal(original,requirementMap,goalMap);
  copySteps(project);
  System.out.println(""String_Node_Str"");
  return project.createGwtProject();
}","/** 
 * Copy project
 */
@Override @AllowedRoles(roles={Roles.Administrator}) public GwtProject copyProject(GwtProject originalProject) throws SquareException {
  System.out.println(""String_Node_Str"");
  Project project=new Project(originalProject);
  project.setId(0);
  project.setName(project.getName() + ""String_Node_Str"");
  User aoe=userDao.fetch(originalProject.getAcquisitionOrganizationEngineer().getUserId());
  project.setAcquisitionOrganizationEngineer(aoe);
  Date now=new Date();
  project.setDateCreated(now);
  project.setDateModified(now);
  System.out.println(""String_Node_Str"");
  projectDao.create(project);
  System.out.println(""String_Node_Str"");
  userDao.addUserToProject(aoe,project,roleDao.findByName(ProjectRole.Acquisition_Organization_Engineer.getLabel()));
  Project original=new Project(originalProject);
  System.out.println(""String_Node_Str"");
  copyTerms(project,original);
  HashMap<Integer,Integer> goalMap=copyGoals(project,original);
  HashMap<Integer,Integer> assetMap=copyAssets(project,original);
  copyGoalAsset(original,goalMap,assetMap);
  HashMap<Integer,Integer> requirementMap=copyRequirements(project,original);
  copyRequirementGoal(original,requirementMap,goalMap);
  copySteps(project);
  System.out.println(""String_Node_Str"");
  copyPackageAttributeRating(project,original);
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  return project.createGwtProject();
}"
24667,"public HashMap<Integer,Integer> copyPackageAttributeRating(Project project,Project originalProject){
  HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
  List<ProjectPackageAttributeRating> PPAR=projectPackageAttributeRatingDao.getAllRatingsForProjectNoGwt(originalProject);
  for (  ProjectPackageAttributeRating ppar : PPAR) {
    System.out.println(""String_Node_Str"" + ppar.getId());
    System.out.println(""String_Node_Str"" + ppar.getProject());
    System.out.println(""String_Node_Str"" + ppar.getProject().getId());
    System.out.println(""String_Node_Str"" + ppar.getSoftwarePackage());
    System.out.println(""String_Node_Str"" + ppar.getQualityAttribute());
    System.out.println(""String_Node_Str"" + ppar.getRating());
  }
  System.out.println(""String_Node_Str"");
  for (  ProjectPackageAttributeRating ppar : PPAR) {
    Date now=new Date();
    ProjectPackageAttributeRating newPpar=new ProjectPackageAttributeRating(ppar.getId(),ppar.getSoftwarePackage(),project,ppar.getQualityAttribute(),ppar.getRating());
    System.out.println(""String_Node_Str"");
    newPpar.setProject(ppar.getProject());
    projectPackageAttributeRatingDao.create(newPpar);
    System.out.println(""String_Node_Str"");
    map.put(ppar.getProject().getId(),newPpar.getProject().getId());
    System.out.println(""String_Node_Str"");
  }
  return map;
}","public HashMap<Integer,Integer> copyPackageAttributeRating(Project project,Project originalProject){
  System.out.println(""String_Node_Str"");
  HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
  List<ProjectPackageAttributeRating> PPAR=projectPackageAttributeRatingDao.getAllRatingsForProjectNoGwt(originalProject);
  for (  ProjectPackageAttributeRating ppar : PPAR) {
    System.out.println(""String_Node_Str"" + ppar.getId().getProjectId());
    System.out.println(""String_Node_Str"" + ppar.getSoftwarePackage());
    System.out.println(""String_Node_Str"" + ppar.getQualityAttribute());
    System.out.println(""String_Node_Str"" + ppar.getRating());
  }
  System.out.println(""String_Node_Str"");
  for (  ProjectPackageAttributeRating ppar : PPAR) {
    Date now=new Date();
    ProjectPackageAttributeRating newPpar=new ProjectPackageAttributeRating(project.getId(),ppar.getId().getPackageId(),ppar.getId().getAttributeId(),ppar.getRating(),ppar.getSoftwarePackage(),ppar.getQualityAttribute());
    projectPackageAttributeRatingDao.create(newPpar);
  }
  return map;
}"
24668,"/** 
 * Copy project
 */
@Override @AllowedRoles(roles={Roles.Administrator}) public GwtProject copyProject(GwtProject originalProject) throws SquareException {
  System.out.println(""String_Node_Str"");
  Project project=new Project(originalProject);
  project.setId(0);
  project.setName(project.getName() + ""String_Node_Str"");
  User aoe=userDao.fetch(originalProject.getAcquisitionOrganizationEngineer().getUserId());
  project.setAcquisitionOrganizationEngineer(aoe);
  Date now=new Date();
  project.setDateCreated(now);
  project.setDateModified(now);
  System.out.println(""String_Node_Str"");
  projectDao.create(project);
  System.out.println(""String_Node_Str"");
  userDao.addUserToProject(aoe,project,roleDao.findByName(ProjectRole.Acquisition_Organization_Engineer.getLabel()));
  Project original=new Project(originalProject);
  System.out.println(""String_Node_Str"");
  copyTerms(project,original);
  HashMap<Integer,Integer> goalMap=copyGoals(project,original);
  HashMap<Integer,Integer> assetMap=copyAssets(project,original);
  copyGoalAsset(original,goalMap,assetMap);
  HashMap<Integer,Integer> requirementMap=copyRequirements(project,original);
  copyRequirementGoal(original,requirementMap,goalMap);
  copySteps(project);
  System.out.println(""String_Node_Str"");
  copyPackageAttributeRating(project,original);
  System.out.println(""String_Node_Str"");
  System.out.println(""String_Node_Str"");
  return project.createGwtProject();
}","/** 
 * Copy project
 */
@Override @AllowedRoles(roles={Roles.Administrator}) public GwtProject copyProject(GwtProject originalProject) throws SquareException {
  System.out.println(""String_Node_Str"");
  Project project=new Project(originalProject);
  project.setId(0);
  project.setName(project.getName() + ""String_Node_Str"");
  User aoe=userDao.fetch(originalProject.getAcquisitionOrganizationEngineer().getUserId());
  project.setAcquisitionOrganizationEngineer(aoe);
  Date now=new Date();
  project.setDateCreated(now);
  project.setDateModified(now);
  System.out.println(""String_Node_Str"");
  projectDao.create(project);
  System.out.println(""String_Node_Str"");
  userDao.addUserToProject(aoe,project,roleDao.findByName(ProjectRole.Acquisition_Organization_Engineer.getLabel()));
  Project original=new Project(originalProject);
  System.out.println(""String_Node_Str"");
  copyTerms(project,original);
  HashMap<Integer,Integer> goalMap=copyGoals(project,original);
  HashMap<Integer,Integer> assetMap=copyAssets(project,original);
  copyGoalAsset(original,goalMap,assetMap);
  HashMap<Integer,Integer> requirementMap=copyRequirements(project,original);
  copyRequirementGoal(original,requirementMap,goalMap);
  copySteps(project);
  if (originalProject.getCases().getId() == 3) {
    System.out.println(""String_Node_Str"" + originalProject.getCases().getId());
    System.out.println(""String_Node_Str"");
    copyPackageAttributeRating(project,original);
    copyTradeoffReason(project,original);
    copyRationale(project,original);
    System.out.println(""String_Node_Str"");
  }
  System.out.println(""String_Node_Str"");
  return project.createGwtProject();
}"
24669,"@Override public void onChange(ChangeEvent event){
  final String status=statusList.getItemText(statusList.getSelectedIndex());
  if (step.getStatus() != StepStatus.NotStarted && StepStatus.convertLabel(status) == StepStatus.NotStarted) {
    Window.alert(messages.cannotChangeToNotStarted());
    if (step.getStatus() == StepStatus.InProgress)     statusList.setSelectedIndex(1);
    if (step.getStatus() == StepStatus.Complete)     statusList.setSelectedIndex(2);
    return;
  }
  if (step.getStatus() == StepStatus.Complete && StepStatus.convertLabel(status) == StepStatus.InProgress) {
    int stepNo=Integer.valueOf(step.getDescription().charAt(5));
    for (int i=0; i < listOfSteps.size(); i++) {
      int stepNumber=Integer.valueOf(listOfSteps.get(i).getStep().getDescription().charAt(5));
      if (stepNumber < stepNo) {
        updateStepStatus(projectId,listOfSteps.get(i).getStep().getId(),""String_Node_Str"");
      }
    }
  }
  updateStepStatus(projectId,step.getId(),status);
  step.setStatus(StepStatus.convertLabel(status));
}","@Override public void onChange(ChangeEvent event){
  final String status=statusList.getItemText(statusList.getSelectedIndex());
  if (step.getStatus() != StepStatus.NotStarted && StepStatus.convertLabel(status) == StepStatus.NotStarted) {
    Window.alert(messages.cannotChangeToNotStarted());
    if (step.getStatus() == StepStatus.InProgress)     statusList.setSelectedIndex(1);
    if (step.getStatus() == StepStatus.Complete)     statusList.setSelectedIndex(2);
    return;
  }
  if (step.getStatus() == StepStatus.Complete && StepStatus.convertLabel(status) == StepStatus.InProgress) {
    int stepNo=Integer.valueOf(step.getDescription().charAt(5));
    for (int i=0; i < listOfSteps.size(); i++) {
      int stepNumber=Integer.valueOf(listOfSteps.get(i).getStep().getDescription().charAt(5));
      if (stepNumber < stepNo) {
        updateStepStatus(projectId,listOfSteps.get(i).getStep().getId(),""String_Node_Str"");
      }
    }
  }
  if (step.getStatus() == StepStatus.NotStarted && (StepStatus.convertLabel(status) == StepStatus.InProgress || StepStatus.convertLabel(status) == StepStatus.Complete)) {
    analysisResults.clear();
    analysisResults.add(new Hyperlink(step.getDescription(),StepRouter.CreateStepLink(step)));
  }
  updateStepStatus(projectId,step.getId(),status);
  step.setStatus(StepStatus.convertLabel(status));
}"
24670,"private void CreateStepGrid(){
  FlexTable stepsTable=new FlexTable();
  stepsTable.setStyleName(""String_Node_Str"");
  stepsTable.setWidth(""String_Node_Str"");
  stepsTable.setCellPadding(3);
  stepsTable.setCellSpacing(0);
  FlexCellFormatter formatter=stepsTable.getFlexCellFormatter();
  formatter.setStyleName(0,0,""String_Node_Str"");
  formatter.setStyleName(0,1,""String_Node_Str"");
  formatter.setStyleName(0,2,""String_Node_Str"");
  stepsTable.setWidget(0,0,new Label(messages.stepStatusLable()));
  stepsTable.setWidget(0,1,new Label(messages.stepDescription()));
  int rowCount=1;
  for (  final GwtStepVerficationResult stepResult : this.listOfSteps) {
    final ListBox statusList=new ListBox(false);
    statusList.setWidth(""String_Node_Str"");
    statusList.addItem(StepStatus.NotStarted.getLabel());
    statusList.addItem(StepStatus.InProgress.getLabel());
    statusList.addItem(StepStatus.Complete.getLabel());
    final GwtStep step=stepResult.getStep();
switch (step.getStatus()) {
case InProgress:
      statusList.setSelectedIndex(1);
    break;
case Complete:
  statusList.setSelectedIndex(2);
break;
default :
statusList.setSelectedIndex(0);
}
statusList.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent event){
final String status=statusList.getItemText(statusList.getSelectedIndex());
if (step.getStatus() != StepStatus.NotStarted && StepStatus.convertLabel(status) == StepStatus.NotStarted) {
Window.alert(messages.cannotChangeToNotStarted());
if (step.getStatus() == StepStatus.InProgress) statusList.setSelectedIndex(1);
if (step.getStatus() == StepStatus.Complete) statusList.setSelectedIndex(2);
return;
}
if (step.getStatus() == StepStatus.Complete && StepStatus.convertLabel(status) == StepStatus.InProgress) {
int stepNo=Integer.valueOf(step.getDescription().charAt(5));
for (int i=0; i < listOfSteps.size(); i++) {
  int stepNumber=Integer.valueOf(listOfSteps.get(i).getStep().getDescription().charAt(5));
  if (stepNumber < stepNo) {
    updateStepStatus(projectId,listOfSteps.get(i).getStep().getId(),""String_Node_Str"");
  }
}
}
updateStepStatus(projectId,step.getId(),status);
step.setStatus(StepStatus.convertLabel(status));
}
}
);
VerticalPanel analysisResults=new VerticalPanel();
analysisResults.setStyleName(""String_Node_Str"");
analysisResults.setVerticalAlignment(HasVerticalAlignment.ALIGN_TOP);
HTML warningLabel=new HTML();
Label resultLabel=new Label();
this.verifyStep(this.projectId,step.getId(),warningLabel,resultLabel,stepResult);
System.out.println(""String_Node_Str"" + step.getId() + ""String_Node_Str""+ step.getDescription());
analysisResults.add(new Hyperlink(step.getDescription(),StepRouter.CreateStepLink(step)));
stepsTable.setWidget(rowCount,0,statusList);
stepsTable.setWidget(rowCount,1,analysisResults);
formatter.setVerticalAlignment(rowCount,0,HasVerticalAlignment.ALIGN_TOP);
formatter.setWidth(rowCount,0,""String_Node_Str"");
rowCount++;
}
this.add(stepsTable);
}","private void CreateStepGrid(){
  FlexTable stepsTable=new FlexTable();
  stepsTable.setStyleName(""String_Node_Str"");
  stepsTable.setWidth(""String_Node_Str"");
  stepsTable.setCellPadding(3);
  stepsTable.setCellSpacing(0);
  FlexCellFormatter formatter=stepsTable.getFlexCellFormatter();
  formatter.setStyleName(0,0,""String_Node_Str"");
  formatter.setStyleName(0,1,""String_Node_Str"");
  formatter.setStyleName(0,2,""String_Node_Str"");
  stepsTable.setWidget(0,0,new Label(messages.stepStatusLable()));
  stepsTable.setWidget(0,1,new Label(messages.stepDescription()));
  int rowCount=1;
  for (  final GwtStepVerficationResult stepResult : this.listOfSteps) {
    final ListBox statusList=new ListBox(false);
    statusList.setWidth(""String_Node_Str"");
    statusList.addItem(StepStatus.NotStarted.getLabel());
    statusList.addItem(StepStatus.InProgress.getLabel());
    statusList.addItem(StepStatus.Complete.getLabel());
    final GwtStep step=stepResult.getStep();
switch (step.getStatus()) {
case InProgress:
      statusList.setSelectedIndex(1);
    break;
case Complete:
  statusList.setSelectedIndex(2);
break;
default :
statusList.setSelectedIndex(0);
}
final VerticalPanel analysisResults=new VerticalPanel();
analysisResults.setStyleName(""String_Node_Str"");
analysisResults.setVerticalAlignment(HasVerticalAlignment.ALIGN_TOP);
HTML warningLabel=new HTML();
Label resultLabel=new Label();
this.verifyStep(this.projectId,step.getId(),warningLabel,resultLabel,stepResult);
System.out.println(""String_Node_Str"" + step.getId() + ""String_Node_Str""+ step.getDescription());
if (step.getStatus() == StepStatus.NotStarted) analysisResults.add(new Label(step.getDescription()));
 else analysisResults.add(new Hyperlink(step.getDescription(),StepRouter.CreateStepLink(step)));
statusList.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent event){
final String status=statusList.getItemText(statusList.getSelectedIndex());
if (step.getStatus() != StepStatus.NotStarted && StepStatus.convertLabel(status) == StepStatus.NotStarted) {
Window.alert(messages.cannotChangeToNotStarted());
if (step.getStatus() == StepStatus.InProgress) statusList.setSelectedIndex(1);
if (step.getStatus() == StepStatus.Complete) statusList.setSelectedIndex(2);
return;
}
if (step.getStatus() == StepStatus.Complete && StepStatus.convertLabel(status) == StepStatus.InProgress) {
int stepNo=Integer.valueOf(step.getDescription().charAt(5));
for (int i=0; i < listOfSteps.size(); i++) {
  int stepNumber=Integer.valueOf(listOfSteps.get(i).getStep().getDescription().charAt(5));
  if (stepNumber < stepNo) {
    updateStepStatus(projectId,listOfSteps.get(i).getStep().getId(),""String_Node_Str"");
  }
}
}
if (step.getStatus() == StepStatus.NotStarted && (StepStatus.convertLabel(status) == StepStatus.InProgress || StepStatus.convertLabel(status) == StepStatus.Complete)) {
analysisResults.clear();
analysisResults.add(new Hyperlink(step.getDescription(),StepRouter.CreateStepLink(step)));
}
updateStepStatus(projectId,step.getId(),status);
step.setStatus(StepStatus.convertLabel(status));
}
}
);
stepsTable.setWidget(rowCount,0,statusList);
stepsTable.setWidget(rowCount,1,analysisResults);
formatter.setVerticalAlignment(rowCount,0,HasVerticalAlignment.ALIGN_TOP);
formatter.setWidth(rowCount,0,""String_Node_Str"");
rowCount++;
}
this.add(stepsTable);
}"
24671,"public void copyRationale(Project project,Project originalProject){
  System.out.println(""String_Node_Str"");
  ProjectPackageRationale PPR=rationalDao.getRationale(originalProject);
  System.out.println(""String_Node_Str"" + PPR.getId().getProjectId());
  System.out.println(""String_Node_Str"" + PPR.getId().getPackageId());
  System.out.println(""String_Node_Str"" + PPR.getRationale());
  System.out.println(""String_Node_Str"");
  ProjectPackageRationale newPpr=new ProjectPackageRationale(project.getId(),PPR.getId().getPackageId(),PPR.getSoftwarePackage(),PPR.getRationale());
  rationalDao.create(newPpr);
}","public void copyRationale(Project project,Project originalProject){
  System.out.println(""String_Node_Str"");
  ProjectPackageRationale PPR=rationalDao.getRationale(originalProject);
  System.out.println(""String_Node_Str"");
  if (PPR != null) {
    System.out.println(""String_Node_Str"" + PPR.getId().getProjectId());
    System.out.println(""String_Node_Str"" + PPR.getId().getPackageId());
    System.out.println(""String_Node_Str"" + PPR.getRationale());
    System.out.println(""String_Node_Str"");
    ProjectPackageRationale newPpr=new ProjectPackageRationale(project.getId(),PPR.getId().getPackageId(),PPR.getSoftwarePackage(),PPR.getRationale());
    rationalDao.create(newPpr);
  }
}"
24672,"public HashMap<Integer,Integer> copyPackageRequirementRating(Project project,Project originalProject){
  System.out.println(""String_Node_Str"");
  HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
  List<ProjectPackageRequirementRating> PPRR=projectPackageRequirementRatingDao.getAllRatingsNoGwt(originalProject);
  for (  ProjectPackageRequirementRating pprr : PPRR) {
    System.out.println(""String_Node_Str"" + pprr.getId().getProjectId());
    System.out.println(""String_Node_Str"" + pprr.getSoftwarePackage());
    System.out.println(""String_Node_Str"" + pprr.getRequirement());
    System.out.println(""String_Node_Str"" + pprr.getRating());
  }
  System.out.println(""String_Node_Str"");
  for (  ProjectPackageRequirementRating pprr : PPRR) {
    System.out.println(""String_Node_Str"" + pprr.getRating());
    ProjectPackageRequirementRating newPprr=new ProjectPackageRequirementRating(project.getId(),pprr.getId().getPackageId(),pprr.getId().getRequirementId(),pprr.getRating(),pprr.getSoftwarePackage(),pprr.getRequirement());
    projectPackageRequirementRatingDao.create(newPprr);
  }
  return map;
}","public HashMap<Integer,Integer> copyPackageRequirementRating(Project project,Project originalProject){
  System.out.println(""String_Node_Str"");
  HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
  List<ProjectPackageRequirementRating> PPRR=projectPackageRequirementRatingDao.getAllRatingsNoGwt(originalProject);
  for (  ProjectPackageRequirementRating pprr : PPRR) {
    System.out.println(""String_Node_Str"" + pprr.getId().getProjectId());
    System.out.println(""String_Node_Str"" + searchNewRequirementId(project,originalProject,pprr.getId().getRequirementId()));
    System.out.println(""String_Node_Str"" + pprr.getSoftwarePackage());
    System.out.println(""String_Node_Str"" + pprr.getRequirement());
    System.out.println(""String_Node_Str"" + pprr.getRating());
  }
  System.out.println(project.getRequirements().toString());
  System.out.println(project.getRequirements());
  System.out.println(""String_Node_Str"" + project.getRequirements().toArray());
  for (int i=0; i < project.getRequirements().size(); i++) {
    System.out.println(""String_Node_Str"" + project.getRequirements().toString().indexOf(i));
    System.out.println(""String_Node_Str"" + originalProject.getRequirements().toString().indexOf(i));
  }
  System.out.println(""String_Node_Str"");
  for (  ProjectPackageRequirementRating pprr : PPRR) {
    ProjectPackageRequirementRating newPprr=new ProjectPackageRequirementRating(project.getId(),pprr.getId().getPackageId(),searchNewRequirementId(project,originalProject,pprr.getId().getRequirementId()),pprr.getRating(),pprr.getSoftwarePackage(),pprr.getRequirement());
    projectPackageRequirementRatingDao.create(newPprr);
  }
  return map;
}"
24673,"@Override public List<ProjectPackageAttributeRating> getAllRatingsForProjectNoGwt(Project project){
  System.out.println(""String_Node_Str"");
  List<ProjectPackageAttributeRating> lines=null;
  String query=""String_Node_Str"";
  Query q=getSession().createQuery(query);
  q.setParameter(""String_Node_Str"",project.getId());
  System.out.println(project.getId());
  lines=(List<ProjectPackageAttributeRating>)q.list();
  System.out.println(lines);
  List<ProjectPackageAttributeRating> result=new ArrayList<ProjectPackageAttributeRating>();
  ProjectPackageAttributeRating current=null;
  QualityAttribute qa;
  SoftwarePackage sp;
  for (int i=0; i < lines.size(); ++i) {
    current=new ProjectPackageAttributeRating();
    current.setIdInt(project.getId(),lines.get(i).getSoftwarePackage().getId(),lines.get(i).getQualityAttribute().getId());
    qa=new QualityAttribute();
    qa.setDescription(lines.get(i).getQualityAttribute().getDescription());
    qa.setName(lines.get(i).getQualityAttribute().getName());
    qa.setId(lines.get(i).getQualityAttribute().getId());
    sp=new SoftwarePackage();
    sp.setDescription(lines.get(i).getSoftwarePackage().getDescription());
    sp.setName(lines.get(i).getSoftwarePackage().getName());
    sp.setId(lines.get(i).getSoftwarePackage().getId());
    current.setQualityAttribute(qa);
    current.setSoftwarePackage(sp);
    current.setRating(lines.get(i).getRating());
    result.add(current);
  }
  return result;
}","@Override public List<ProjectPackageAttributeRating> getAllRatingsForProjectNoGwt(Project project){
  List<ProjectPackageAttributeRating> lines=null;
  String query=""String_Node_Str"";
  Query q=getSession().createQuery(query);
  q.setParameter(""String_Node_Str"",project.getId());
  lines=(List<ProjectPackageAttributeRating>)q.list();
  List<ProjectPackageAttributeRating> result=new ArrayList<ProjectPackageAttributeRating>();
  ProjectPackageAttributeRating current=null;
  QualityAttribute qa;
  SoftwarePackage sp;
  for (int i=0; i < lines.size(); ++i) {
    current=new ProjectPackageAttributeRating();
    current.setIdInt(project.getId(),lines.get(i).getSoftwarePackage().getId(),lines.get(i).getQualityAttribute().getId());
    qa=new QualityAttribute();
    qa.setDescription(lines.get(i).getQualityAttribute().getDescription());
    qa.setName(lines.get(i).getQualityAttribute().getName());
    qa.setId(lines.get(i).getQualityAttribute().getId());
    sp=new SoftwarePackage();
    sp.setDescription(lines.get(i).getSoftwarePackage().getDescription());
    sp.setName(lines.get(i).getSoftwarePackage().getName());
    sp.setId(lines.get(i).getSoftwarePackage().getId());
    current.setQualityAttribute(qa);
    current.setSoftwarePackage(sp);
    current.setRating(lines.get(i).getRating());
    result.add(current);
  }
  return result;
}"
24674,"/** 
 * This sends an email to the user 
 * @param updateUser
 * @throws MessagingException
 * @throws SquareException
 */
protected void sendMail(User updateUser,SimpleMailMessage templateMessage,String velocityTemplate) throws SquareException {
  try {
    Map<String,Object> model=new Hashtable<String,Object>();
    model.put(""String_Node_Str"",updateUser);
    String text=VelocityEngineUtils.mergeTemplateIntoString(velocityEngine,velocityTemplate,model);
    if (updateUser.getEmail() == null || !(updateUser.getEmail().matches(EMAIL_VALIDATOR))) {
      SquareException se=new SquareException(""String_Node_Str"");
      se.setType(ExceptionType.invalidEmail);
      throw se;
    }
    templateMessage.setTo(updateUser.getEmail());
    templateMessage.setText(text);
    mailSender.send(templateMessage);
  }
 catch (  SquareException se) {
    throw se;
  }
catch (  Throwable m) {
    SquareException se=new SquareException(""String_Node_Str"",m);
    se.setType(ExceptionType.mailError);
    throw se;
  }
}","/** 
 * This sends an email to the user 
 * @param updateUser
 * @throws MessagingException
 * @throws SquareException
 */
protected void sendMail(User updateUser,SimpleMailMessage templateMessage,String velocityTemplate) throws SquareException {
  try {
    Map<String,Object> model=new Hashtable<String,Object>();
    model.put(""String_Node_Str"",updateUser);
    String text=VelocityEngineUtils.mergeTemplateIntoString(velocityEngine,velocityTemplate,model);
    System.out.println(""String_Node_Str"");
    if (updateUser.getEmail() == null || !(updateUser.getEmail().matches(EMAIL_VALIDATOR))) {
      SquareException se=new SquareException(""String_Node_Str"");
      se.setType(ExceptionType.invalidEmail);
      throw se;
    }
    System.out.println(""String_Node_Str"");
    templateMessage.setTo(updateUser.getEmail());
    templateMessage.setText(text);
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
  }
 catch (  SquareException se) {
    throw se;
  }
catch (  Throwable m) {
    System.out.println(m.getLocalizedMessage());
    SquareException se=new SquareException(""String_Node_Str"",m);
    se.setType(ExceptionType.mailError);
    throw se;
  }
}"
24675,"@AllowedRoles(roles={Roles.Administrator}) public GwtUser createUser(GwtUser userToCreate,String password,boolean emailPassword) throws SquareException {
  if (userToCreate == null) {
    throw new SquareException(""String_Node_Str"");
  }
  try {
    User user=null;
    System.out.println(""String_Node_Str"");
    if (password.trim().length() != 0) {
      user=new User(userToCreate,password.trim());
    }
 else {
      throw new SquareException(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    userDao.create(user);
    System.out.println(""String_Node_Str"");
    if (emailPassword) {
      sendMail(user,userCreatedMessage,""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    return user.createGwtUser();
  }
 catch (  Throwable t) {
    throw new SquareException(""String_Node_Str"",t);
  }
}","@AllowedRoles(roles={Roles.Administrator}) public GwtUser createUser(GwtUser userToCreate,String password,boolean emailPassword) throws SquareException {
  if (userToCreate == null) {
    throw new SquareException(""String_Node_Str"");
  }
  try {
    User user=null;
    System.out.println(""String_Node_Str"");
    if (password.trim().length() != 0) {
      user=new User(userToCreate,password.trim());
    }
 else {
      throw new SquareException(""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    userDao.create(user);
    System.out.println(""String_Node_Str"");
    if (emailPassword) {
      sendMail(user,userCreatedMessage,""String_Node_Str"");
    }
    System.out.println(""String_Node_Str"");
    return user.createGwtUser();
  }
 catch (  Throwable t) {
    System.out.println();
    throw new SquareException(""String_Node_Str"",t);
  }
}"
24676,"@Override public void onChange(ChangeEvent event){
  final String status=statusList.getItemText(statusList.getSelectedIndex());
  if (step.getStatus() != StepStatus.NotStarted && StepStatus.convertLabel(status) == StepStatus.NotStarted) {
    Window.alert(messages.cannotChangeToNotStarted());
    if (step.getStatus() == StepStatus.InProgress)     statusList.setSelectedIndex(1);
    if (step.getStatus() == StepStatus.Complete)     statusList.setSelectedIndex(2);
    return;
  }
  if (step.getStatus() == StepStatus.Complete && StepStatus.convertLabel(status) == StepStatus.InProgress) {
    int stepNo=Integer.valueOf(step.getDescription().charAt(5));
    for (int i=0; i < listOfSteps.size(); i++) {
      int stepNumber=Integer.valueOf(listOfSteps.get(i).getStep().getDescription().charAt(5));
      if (stepNumber < stepNo) {
        updateStepStatus(projectId,listOfSteps.get(i).getStep().getId(),""String_Node_Str"");
      }
    }
  }
  updateStepStatus(projectId,step.getId(),status);
  step.setStatus(StepStatus.convertLabel(status));
}","@Override public void onChange(ChangeEvent event){
  final String status=statusList.getItemText(statusList.getSelectedIndex());
  if (step.getStatus() != StepStatus.NotStarted && StepStatus.convertLabel(status) == StepStatus.NotStarted) {
    Window.alert(messages.cannotChangeToNotStarted());
    if (step.getStatus() == StepStatus.InProgress)     statusList.setSelectedIndex(1);
    if (step.getStatus() == StepStatus.Complete)     statusList.setSelectedIndex(2);
    return;
  }
  if (step.getStatus() == StepStatus.Complete && StepStatus.convertLabel(status) == StepStatus.InProgress) {
    int stepNo=Integer.valueOf(step.getDescription().charAt(5));
    for (int i=0; i < listOfSteps.size(); i++) {
      int stepNumber=Integer.valueOf(listOfSteps.get(i).getStep().getDescription().charAt(5));
      if (stepNumber < stepNo) {
        updateStepStatus(projectId,listOfSteps.get(i).getStep().getId(),""String_Node_Str"");
      }
    }
  }
  if (step.getStatus() == StepStatus.NotStarted && (StepStatus.convertLabel(status) == StepStatus.InProgress || StepStatus.convertLabel(status) == StepStatus.Complete)) {
    analysisResults.clear();
    analysisResults.add(new Hyperlink(step.getDescription(),StepRouter.CreateStepLink(step)));
  }
  updateStepStatus(projectId,step.getId(),status);
  step.setStatus(StepStatus.convertLabel(status));
}"
24677,"private void CreateStepGrid(){
  FlexTable stepsTable=new FlexTable();
  stepsTable.setStyleName(""String_Node_Str"");
  stepsTable.setWidth(""String_Node_Str"");
  stepsTable.setCellPadding(3);
  stepsTable.setCellSpacing(0);
  FlexCellFormatter formatter=stepsTable.getFlexCellFormatter();
  formatter.setStyleName(0,0,""String_Node_Str"");
  formatter.setStyleName(0,1,""String_Node_Str"");
  formatter.setStyleName(0,2,""String_Node_Str"");
  stepsTable.setWidget(0,0,new Label(messages.stepStatusLable()));
  stepsTable.setWidget(0,1,new Label(messages.stepDescription()));
  int rowCount=1;
  for (  final GwtStepVerficationResult stepResult : this.listOfSteps) {
    final ListBox statusList=new ListBox(false);
    statusList.setWidth(""String_Node_Str"");
    statusList.addItem(StepStatus.NotStarted.getLabel());
    statusList.addItem(StepStatus.InProgress.getLabel());
    statusList.addItem(StepStatus.Complete.getLabel());
    final GwtStep step=stepResult.getStep();
switch (step.getStatus()) {
case InProgress:
      statusList.setSelectedIndex(1);
    break;
case Complete:
  statusList.setSelectedIndex(2);
break;
default :
statusList.setSelectedIndex(0);
}
statusList.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent event){
final String status=statusList.getItemText(statusList.getSelectedIndex());
if (step.getStatus() != StepStatus.NotStarted && StepStatus.convertLabel(status) == StepStatus.NotStarted) {
Window.alert(messages.cannotChangeToNotStarted());
if (step.getStatus() == StepStatus.InProgress) statusList.setSelectedIndex(1);
if (step.getStatus() == StepStatus.Complete) statusList.setSelectedIndex(2);
return;
}
if (step.getStatus() == StepStatus.Complete && StepStatus.convertLabel(status) == StepStatus.InProgress) {
int stepNo=Integer.valueOf(step.getDescription().charAt(5));
for (int i=0; i < listOfSteps.size(); i++) {
  int stepNumber=Integer.valueOf(listOfSteps.get(i).getStep().getDescription().charAt(5));
  if (stepNumber < stepNo) {
    updateStepStatus(projectId,listOfSteps.get(i).getStep().getId(),""String_Node_Str"");
  }
}
}
updateStepStatus(projectId,step.getId(),status);
step.setStatus(StepStatus.convertLabel(status));
}
}
);
VerticalPanel analysisResults=new VerticalPanel();
analysisResults.setStyleName(""String_Node_Str"");
analysisResults.setVerticalAlignment(HasVerticalAlignment.ALIGN_TOP);
HTML warningLabel=new HTML();
Label resultLabel=new Label();
this.verifyStep(this.projectId,step.getId(),warningLabel,resultLabel,stepResult);
System.out.println(""String_Node_Str"" + step.getId() + ""String_Node_Str""+ step.getDescription());
analysisResults.add(new Hyperlink(step.getDescription(),StepRouter.CreateStepLink(step)));
stepsTable.setWidget(rowCount,0,statusList);
stepsTable.setWidget(rowCount,1,analysisResults);
formatter.setVerticalAlignment(rowCount,0,HasVerticalAlignment.ALIGN_TOP);
formatter.setWidth(rowCount,0,""String_Node_Str"");
rowCount++;
}
this.add(stepsTable);
}","private void CreateStepGrid(){
  FlexTable stepsTable=new FlexTable();
  stepsTable.setStyleName(""String_Node_Str"");
  stepsTable.setWidth(""String_Node_Str"");
  stepsTable.setCellPadding(3);
  stepsTable.setCellSpacing(0);
  FlexCellFormatter formatter=stepsTable.getFlexCellFormatter();
  formatter.setStyleName(0,0,""String_Node_Str"");
  formatter.setStyleName(0,1,""String_Node_Str"");
  formatter.setStyleName(0,2,""String_Node_Str"");
  stepsTable.setWidget(0,0,new Label(messages.stepStatusLable()));
  stepsTable.setWidget(0,1,new Label(messages.stepDescription()));
  int rowCount=1;
  for (  final GwtStepVerficationResult stepResult : this.listOfSteps) {
    final ListBox statusList=new ListBox(false);
    statusList.setWidth(""String_Node_Str"");
    statusList.addItem(StepStatus.NotStarted.getLabel());
    statusList.addItem(StepStatus.InProgress.getLabel());
    statusList.addItem(StepStatus.Complete.getLabel());
    final GwtStep step=stepResult.getStep();
switch (step.getStatus()) {
case InProgress:
      statusList.setSelectedIndex(1);
    break;
case Complete:
  statusList.setSelectedIndex(2);
break;
default :
statusList.setSelectedIndex(0);
}
final VerticalPanel analysisResults=new VerticalPanel();
analysisResults.setStyleName(""String_Node_Str"");
analysisResults.setVerticalAlignment(HasVerticalAlignment.ALIGN_TOP);
HTML warningLabel=new HTML();
Label resultLabel=new Label();
this.verifyStep(this.projectId,step.getId(),warningLabel,resultLabel,stepResult);
System.out.println(""String_Node_Str"" + step.getId() + ""String_Node_Str""+ step.getDescription());
if (step.getStatus() == StepStatus.NotStarted) analysisResults.add(new Label(step.getDescription()));
 else analysisResults.add(new Hyperlink(step.getDescription(),StepRouter.CreateStepLink(step)));
statusList.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent event){
final String status=statusList.getItemText(statusList.getSelectedIndex());
if (step.getStatus() != StepStatus.NotStarted && StepStatus.convertLabel(status) == StepStatus.NotStarted) {
Window.alert(messages.cannotChangeToNotStarted());
if (step.getStatus() == StepStatus.InProgress) statusList.setSelectedIndex(1);
if (step.getStatus() == StepStatus.Complete) statusList.setSelectedIndex(2);
return;
}
if (step.getStatus() == StepStatus.Complete && StepStatus.convertLabel(status) == StepStatus.InProgress) {
int stepNo=Integer.valueOf(step.getDescription().charAt(5));
for (int i=0; i < listOfSteps.size(); i++) {
  int stepNumber=Integer.valueOf(listOfSteps.get(i).getStep().getDescription().charAt(5));
  if (stepNumber < stepNo) {
    updateStepStatus(projectId,listOfSteps.get(i).getStep().getId(),""String_Node_Str"");
  }
}
}
if (step.getStatus() == StepStatus.NotStarted && (StepStatus.convertLabel(status) == StepStatus.InProgress || StepStatus.convertLabel(status) == StepStatus.Complete)) {
analysisResults.clear();
analysisResults.add(new Hyperlink(step.getDescription(),StepRouter.CreateStepLink(step)));
}
updateStepStatus(projectId,step.getId(),status);
step.setStatus(StepStatus.convertLabel(status));
}
}
);
stepsTable.setWidget(rowCount,0,statusList);
stepsTable.setWidget(rowCount,1,analysisResults);
formatter.setVerticalAlignment(rowCount,0,HasVerticalAlignment.ALIGN_TOP);
formatter.setWidth(rowCount,0,""String_Node_Str"");
rowCount++;
}
this.add(stepsTable);
}"
24678,"public Widget loadRiskNavigator(){
  SquareHyperlink previousRequirement=new SquareHyperlink(messages.linkPreviousRequirement());
  SquareHyperlink nextRequirement=new SquareHyperlink(messages.linkNextRequirement());
  SquareHyperlink gotToSummaryTop=new SquareHyperlink(messages.linkBackRequirementSummary());
  FlexTable requirementNavigatorWidget=new FlexTable();
  requirementNavigatorWidget.setWidth(""String_Node_Str"");
  gotToSummaryTop.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
  requirementNavigatorWidget.setWidget(0,1,gotToSummaryTop);
  requirementNavigatorWidget.getCellFormatter().setWidth(0,1,""String_Node_Str"");
  requirementNavigatorWidget.getCellFormatter().setWidth(0,0,""String_Node_Str"");
  requirementNavigatorWidget.getCellFormatter().setWidth(0,2,""String_Node_Str"");
  if (CommandTypes.insert != currentCommand) {
    if (currentIndex > 0) {
      requirementNavigatorWidget.setWidget(0,0,previousRequirement);
      previousRequirement.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_LEFT);
    }
 else {
      Label label=new Label(""String_Node_Str"");
      requirementNavigatorWidget.setWidget(0,0,label);
    }
    if (currentIndex < (lisOfRequirements.size() - 1)) {
      requirementNavigatorWidget.setWidget(0,2,nextRequirement);
      nextRequirement.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_RIGHT);
    }
 else {
      Label label=new Label(""String_Node_Str"");
      requirementNavigatorWidget.setWidget(0,2,label);
    }
  }
  gotToSummaryTop.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      History.newItem(ReviewOfRequirementsByAcquisitionPilot.generateNavigationId(ReviewOfRequirementsByAcquisitionPilot.PageId.home));
    }
  }
);
  previousRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      currentRequirement=getRequirementFromListByIndex(currentIndex - 1);
      currentRequirementId=currentRequirement.getId();
      currentIndex=currentIndex - 1;
      PaneInitialization();
    }
  }
);
  nextRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      currentRequirement=getRequirementFromListByIndex(currentIndex + 1);
      currentRequirementId=currentRequirement.getId();
      currentIndex=currentIndex + 1;
      PaneInitialization();
    }
  }
);
  return requirementNavigatorWidget;
}","public Widget loadRiskNavigator(){
  SquareHyperlink previousRequirement=new SquareHyperlink(messages.linkPreviousRequirement());
  SquareHyperlink nextRequirement=new SquareHyperlink(messages.linkNextRequirement());
  SquareHyperlink gotToSummaryTop=new SquareHyperlink(messages.linkBackRequirementSummary());
  FlexTable requirementNavigatorWidget=new FlexTable();
  requirementNavigatorWidget.setWidth(""String_Node_Str"");
  gotToSummaryTop.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
  requirementNavigatorWidget.setWidget(0,1,gotToSummaryTop);
  requirementNavigatorWidget.getCellFormatter().setWidth(0,1,""String_Node_Str"");
  requirementNavigatorWidget.getCellFormatter().setWidth(0,0,""String_Node_Str"");
  requirementNavigatorWidget.getCellFormatter().setWidth(0,2,""String_Node_Str"");
  if (CommandTypes.insert != currentCommand) {
    if (currentIndex > 0) {
      requirementNavigatorWidget.setWidget(0,0,previousRequirement);
      previousRequirement.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_LEFT);
    }
 else {
      Label label=new Label(""String_Node_Str"");
      requirementNavigatorWidget.setWidget(0,0,label);
    }
    if (currentIndex < (lisOfRequirements.size() - 1)) {
      requirementNavigatorWidget.setWidget(0,2,nextRequirement);
      nextRequirement.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_RIGHT);
    }
 else {
      Label label=new Label(""String_Node_Str"");
      requirementNavigatorWidget.setWidget(0,2,label);
    }
  }
  gotToSummaryTop.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      History.newItem(ReviewOfRequirementsByAcquisitionPilot.generateNavigationId(ReviewOfRequirementsByAcquisitionPilot.PageId.start));
    }
  }
);
  previousRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      currentRequirement=getRequirementFromListByIndex(currentIndex - 1);
      currentRequirementId=currentRequirement.getId();
      currentIndex=currentIndex - 1;
      PaneInitialization();
    }
  }
);
  nextRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      currentRequirement=getRequirementFromListByIndex(currentIndex + 1);
      currentRequirementId=currentRequirement.getId();
      currentIndex=currentIndex + 1;
      PaneInitialization();
    }
  }
);
  return requirementNavigatorWidget;
}"
24679,"public void removeRequirement(int requirementId){
  boolean response=Window.confirm(messages.confirmDelete());
  if (response) {
    this.requirementService.deleteRequirement(requirementId,currentState.getProjectID(),new AsyncCallback<Void>(){
      public void onFailure(      Throwable caught){
        ExceptionHelper.SquareRootRPCExceptionHandler(caught,messages.errorRemovingRequirements());
      }
      public void onSuccess(      Void result){
        History.newItem(ReviewOfRequirementsByAcquisitionPilot.generateNavigationId(ReviewOfRequirementsByAcquisitionPilot.PageId.home));
      }
    }
);
  }
}","public void removeRequirement(int requirementId){
  boolean response=Window.confirm(messages.confirmDelete());
  if (response) {
    this.requirementService.deleteRequirement(requirementId,currentState.getProjectID(),new AsyncCallback<Void>(){
      public void onFailure(      Throwable caught){
        ExceptionHelper.SquareRootRPCExceptionHandler(caught,messages.errorRemovingRequirements());
      }
      public void onSuccess(      Void result){
        History.newItem(ReviewOfRequirementsByAcquisitionPilot.generateNavigationId(ReviewOfRequirementsByAcquisitionPilot.PageId.start));
      }
    }
);
  }
}"
24680,"public void changeStatusToApproveRequirement(final GwtRequirement gwtRequirement){
  this.showStatusBar(""String_Node_Str"");
  ReviewOfRequirementsByAcquisitionServiceAsync service1=GWT.create(ReviewOfRequirementsByAcquisitionService.class);
  ServiceDefTarget endpoint=(ServiceDefTarget)service1;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  GwtProject project=new GwtProject();
  project.setId(this.getCurrentState().getProjectID());
  System.out.println(""String_Node_Str"" + gwtRequirement);
  service1.changeStatusToApproveRequirement(currentState.getProjectID(),gwtRequirement,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
    @Override public void onSuccess(    Void result){
      System.out.println(""String_Node_Str"");
      History.newItem(ReviewOfRequirementsByAcquisitionPilot.generateNavigationId(ReviewOfRequirementsByAcquisitionPilot.PageId.home));
    }
  }
);
}","public void changeStatusToApproveRequirement(final GwtRequirement gwtRequirement){
  this.showStatusBar(""String_Node_Str"");
  ReviewOfRequirementsByAcquisitionServiceAsync service1=GWT.create(ReviewOfRequirementsByAcquisitionService.class);
  ServiceDefTarget endpoint=(ServiceDefTarget)service1;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  GwtProject project=new GwtProject();
  project.setId(this.getCurrentState().getProjectID());
  System.out.println(""String_Node_Str"" + gwtRequirement);
  service1.changeStatusToApproveRequirement(currentState.getProjectID(),gwtRequirement,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
    @Override public void onSuccess(    Void result){
      System.out.println(""String_Node_Str"");
      History.newItem(ReviewOfRequirementsByAcquisitionPilot.generateNavigationId(ReviewOfRequirementsByAcquisitionPilot.PageId.start));
    }
  }
);
}"
24681,"public void changeStatusToRequestRevisionRequirement(final GwtRequirement gwtRequirement){
  this.showStatusBar(""String_Node_Str"");
  ReviewOfRequirementsByAcquisitionServiceAsync service1=GWT.create(ReviewOfRequirementsByAcquisitionService.class);
  ServiceDefTarget endpoint=(ServiceDefTarget)service1;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  GwtProject project=new GwtProject();
  project.setId(this.getCurrentState().getProjectID());
  service1.changeStatusToRequestRevisionRequirement(currentState.getProjectID(),gwtRequirement,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
    @Override public void onSuccess(    Void result){
      System.out.println(""String_Node_Str"");
      History.newItem(ReviewOfRequirementsByAcquisitionPilot.generateNavigationId(ReviewOfRequirementsByAcquisitionPilot.PageId.home));
    }
  }
);
}","public void changeStatusToRequestRevisionRequirement(final GwtRequirement gwtRequirement){
  this.showStatusBar(""String_Node_Str"");
  ReviewOfRequirementsByAcquisitionServiceAsync service1=GWT.create(ReviewOfRequirementsByAcquisitionService.class);
  ServiceDefTarget endpoint=(ServiceDefTarget)service1;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  GwtProject project=new GwtProject();
  project.setId(this.getCurrentState().getProjectID());
  service1.changeStatusToRequestRevisionRequirement(currentState.getProjectID(),gwtRequirement,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
    @Override public void onSuccess(    Void result){
      System.out.println(""String_Node_Str"");
      History.newItem(ReviewOfRequirementsByAcquisitionPilot.generateNavigationId(ReviewOfRequirementsByAcquisitionPilot.PageId.start));
    }
  }
);
}"
24682,"public void loadReadOnlyRequirementForm(){
  this.matrix.setWidget(0,0,getField(requirementTitleTextBox));
  this.matrix.getCellFormatter().setAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setStyleName(0,0,""String_Node_Str"");
  ((FlexCellFormatter)this.matrix.getCellFormatter()).setColSpan(0,0,2);
  this.matrix.setWidget(2,0,subGoalLabel);
  approveButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      boolean response=Window.confirm(messages.confirmApprove() + ""String_Node_Str"");
      if (response) {
        GwtRequirement req=new GwtRequirement();
        req.setId(currentRequirementId);
        changeStatusToApproveRequirement(req);
      }
    }
  }
);
  requestRevisionButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      boolean response=Window.confirm(messages.confirmRequestRevision() + ""String_Node_Str"");
      if (response) {
        GwtRequirement req=new GwtRequirement();
        req.setId(currentRequirementId);
        changeStatusToRequestRevisionRequirement(req);
      }
    }
  }
);
  if (currentState.getMode() == GwtModesType.ReadWrite) {
    FlexTable bottonControlPanel=new FlexTable();
    bottonControlPanel.setWidth(""String_Node_Str"");
    if (currentRequirement.getStatus().equals(""String_Node_Str"")) {
      bottonControlPanel.setWidget(0,0,editRequirement);
      bottonControlPanel.setWidget(1,0,deleteRequirement);
      bottonControlPanel.setWidget(0,2,approveButton);
    }
    if (currentRequirement.getStatus().equals(""String_Node_Str"")) {
      bottonControlPanel.setWidget(0,1,requestRevisionButton);
      bottonControlPanel.setWidget(0,2,approveButton);
    }
    bottonControlPanel.setWidget(2,0,new Label(""String_Node_Str""));
    bottonControlPanel.setWidget(3,0,gotToSummary);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(1,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(2,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(3,0,HasHorizontalAlignment.ALIGN_LEFT);
    this.getContent().add(bottonControlPanel);
  }
  this.editRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      currentCommand=CommandTypes.update;
      PaneInitialization();
    }
  }
);
  this.deleteRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      removeRequirement(currentRequirementId);
    }
  }
);
  this.gotToSummary.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      History.newItem(ReviewOfRequirementsByAcquisitionPilot.generateNavigationId(ReviewOfRequirementsByAcquisitionPilot.PageId.home));
    }
  }
);
}","public void loadReadOnlyRequirementForm(){
  this.matrix.setWidget(0,0,getField(requirementTitleTextBox));
  this.matrix.getCellFormatter().setAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setStyleName(0,0,""String_Node_Str"");
  ((FlexCellFormatter)this.matrix.getCellFormatter()).setColSpan(0,0,2);
  this.matrix.setWidget(2,0,subGoalLabel);
  approveButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      boolean response=Window.confirm(messages.confirmApprove() + ""String_Node_Str"");
      if (response) {
        GwtRequirement req=new GwtRequirement();
        req.setId(currentRequirementId);
        changeStatusToApproveRequirement(req);
      }
    }
  }
);
  requestRevisionButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      boolean response=Window.confirm(messages.confirmRequestRevision() + ""String_Node_Str"");
      if (response) {
        GwtRequirement req=new GwtRequirement();
        req.setId(currentRequirementId);
        changeStatusToRequestRevisionRequirement(req);
      }
    }
  }
);
  if (currentState.getMode() == GwtModesType.ReadWrite) {
    FlexTable bottonControlPanel=new FlexTable();
    bottonControlPanel.setWidth(""String_Node_Str"");
    if (currentRequirement.getStatus().equals(""String_Node_Str"")) {
      bottonControlPanel.setWidget(0,0,editRequirement);
      bottonControlPanel.setWidget(1,0,deleteRequirement);
      bottonControlPanel.setWidget(0,2,approveButton);
    }
    if (currentRequirement.getStatus().equals(""String_Node_Str"")) {
      bottonControlPanel.setWidget(0,1,requestRevisionButton);
      bottonControlPanel.setWidget(0,2,approveButton);
    }
    if (currentRequirement.getStatus().equals(""String_Node_Str"")) {
      bottonControlPanel.setWidget(0,1,requestRevisionButton);
    }
    bottonControlPanel.setWidget(2,0,new Label(""String_Node_Str""));
    bottonControlPanel.setWidget(3,0,gotToSummary);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(1,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(2,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(3,0,HasHorizontalAlignment.ALIGN_LEFT);
    this.getContent().add(bottonControlPanel);
  }
  this.editRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      currentCommand=CommandTypes.update;
      PaneInitialization();
    }
  }
);
  this.deleteRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      removeRequirement(currentRequirementId);
    }
  }
);
  this.gotToSummary.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      History.newItem(ReviewOfRequirementsByAcquisitionPilot.generateNavigationId(ReviewOfRequirementsByAcquisitionPilot.PageId.start));
    }
  }
);
}"
24683,"public void PaneInitialization(){
  this.hideStatusBar();
  this.contetHasChanged=false;
  this.save=new Button(messages.save());
  this.cancel=new Button(messages.cancel());
  this.save.setWidth(""String_Node_Str"");
  this.cancel.setWidth(""String_Node_Str"");
  this.getContent().clear();
  getContent().add(loadRiskNavigator());
  this.disPanel=new DisclosurePanel();
  this.disPanel.setAnimationEnabled(true);
  errorMessage=new Label(messages.labelFieldsRequired());
  errorMessage.setStyleName(""String_Node_Str"");
  this.disPanel.add(errorMessage);
  this.getContent().add(disPanel);
  this.matrix=new FlexTable();
  this.requirementTitleTextBox.addChangeHandler(new contentChanged());
  this.requirementDescriptionTextBox.addChangeHandler(new contentChanged());
  this.getContent().add(this.matrix);
  loadRequirementForm();
  this.save.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      saveRequirement(currentRequirementId);
    }
  }
);
  cancel.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (CommandTypes.insert == currentCommand) {
        History.newItem(ReviewOfRequirementsByAcquisitionPilot.generateNavigationId(ReviewOfRequirementsByAcquisitionPilot.PageId.home));
      }
 else {
        currentCommand=CommandTypes.read;
        PaneInitialization();
      }
    }
  }
);
}","public void PaneInitialization(){
  this.hideStatusBar();
  this.contetHasChanged=false;
  this.save=new Button(messages.save());
  this.cancel=new Button(messages.cancel());
  this.save.setWidth(""String_Node_Str"");
  this.cancel.setWidth(""String_Node_Str"");
  this.getContent().clear();
  getContent().add(loadRiskNavigator());
  this.disPanel=new DisclosurePanel();
  this.disPanel.setAnimationEnabled(true);
  errorMessage=new Label(messages.labelFieldsRequired());
  errorMessage.setStyleName(""String_Node_Str"");
  this.disPanel.add(errorMessage);
  this.getContent().add(disPanel);
  this.matrix=new FlexTable();
  this.requirementTitleTextBox.addChangeHandler(new contentChanged());
  this.requirementDescriptionTextBox.addChangeHandler(new contentChanged());
  this.getContent().add(this.matrix);
  loadRequirementForm();
  this.save.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      saveRequirement(currentRequirementId);
    }
  }
);
  cancel.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (CommandTypes.insert == currentCommand) {
        History.newItem(ReviewOfRequirementsByAcquisitionPilot.generateNavigationId(ReviewOfRequirementsByAcquisitionPilot.PageId.start));
      }
 else {
        currentCommand=CommandTypes.read;
        PaneInitialization();
      }
    }
  }
);
}"
24684,"@Override public void onSuccess(Void result){
  System.out.println(""String_Node_Str"");
  History.newItem(ReviewOfRequirementsByAcquisitionPilot.generateNavigationId(ReviewOfRequirementsByAcquisitionPilot.PageId.home));
}","@Override public void onSuccess(Void result){
  System.out.println(""String_Node_Str"");
  History.newItem(ReviewOfRequirementsByAcquisitionPilot.generateNavigationId(ReviewOfRequirementsByAcquisitionPilot.PageId.start));
}"
24685,"@AllowedRoles(roles={Roles.Administrator}) public GwtProject createProject(GwtProject newProject) throws SquareException {
  User acquisitionOrganizationEngineer=userDao.fetch(newProject.getAcquisitionOrganizationEngineer().getUserId());
  Project project=new Project(newProject);
  project.setAcquisitionOrganizationEngineer(acquisitionOrganizationEngineer);
  AsquareCase acase=asquareCaseDao.fetch(newProject.getCases().getId());
  project.setCases(acase);
  projectDao.create(project);
  newProject.setId(project.getId());
  if (newProject.getCases().getId() == 3) {
    QualityAttribute qa=new QualityAttribute();
    qa.setName(""String_Node_Str"");
    qa.setDescription(""String_Node_Str"");
    qualityAttributeDao.create(qa);
    ProjectPackageAttributeRating ppar=new ProjectPackageAttributeRating();
    ProjectPackageAttributeRatingId pparid=new ProjectPackageAttributeRatingId();
    pparid.setAttributeId(qa.getId());
    pparid.setPackageId(1);
    pparid.setProjectId(project.getId());
    ppar.setId(pparid);
    ppar.setProject(project);
    ppar.setSoftwarePackage(softwarePackageDao.fetch(1));
    ppar.setQualityAttribute(qa);
    ppar.setRating(0);
    projectPackageAttributeRatingDao.create(ppar);
    ProjectPackageTradeoffreasonId id=new ProjectPackageTradeoffreasonId(project.getId(),1);
    ProjectPackageTradeoffreason tradeoffReason=new ProjectPackageTradeoffreason(id,project,softwarePackageDao.fetch(1),""String_Node_Str"",1);
    tradeoffReasonDao.create(tradeoffReason);
  }
  stepBusiness.createStepsForProject(newProject);
  GwtRole role=new GwtRole();
  role.setName(ProjectRole.Acquisition_Organization_Engineer.getLabel());
  this.addUserToProject(newProject,acquisitionOrganizationEngineer.createGwtUser(),role);
  return newProject;
}","@AllowedRoles(roles={Roles.Administrator}) public GwtProject createProject(GwtProject newProject,List<GwtTerm> terms) throws SquareException {
  User acquisitionOrganizationEngineer=userDao.fetch(newProject.getAcquisitionOrganizationEngineer().getUserId());
  Project project=new Project(newProject);
  project.setAcquisitionOrganizationEngineer(acquisitionOrganizationEngineer);
  AsquareCase acase=asquareCaseDao.fetch(newProject.getCases().getId());
  project.setCases(acase);
  projectDao.create(project);
  newProject.setId(project.getId());
  if (newProject.getCases().getId() == 3) {
    QualityAttribute qa=new QualityAttribute();
    qa.setName(""String_Node_Str"");
    qa.setDescription(""String_Node_Str"");
    qualityAttributeDao.create(qa);
    ProjectPackageAttributeRating ppar=new ProjectPackageAttributeRating();
    ProjectPackageAttributeRatingId pparid=new ProjectPackageAttributeRatingId();
    pparid.setAttributeId(qa.getId());
    pparid.setPackageId(1);
    pparid.setProjectId(project.getId());
    ppar.setId(pparid);
    ppar.setProject(project);
    ppar.setSoftwarePackage(softwarePackageDao.fetch(1));
    ppar.setQualityAttribute(qa);
    ppar.setRating(0);
    projectPackageAttributeRatingDao.create(ppar);
    ProjectPackageTradeoffreasonId id=new ProjectPackageTradeoffreasonId(project.getId(),1);
    ProjectPackageTradeoffreason tradeoffReason=new ProjectPackageTradeoffreason(id,project,softwarePackageDao.fetch(1),""String_Node_Str"",1);
    tradeoffReasonDao.create(tradeoffReason);
  }
  stepBusiness.createStepsForProject(newProject);
  if (terms != null) {
    termsBusiness.loadDefaultTerms(newProject.getId(),terms);
  }
  GwtRole role=new GwtRole();
  role.setName(ProjectRole.Acquisition_Organization_Engineer.getLabel());
  this.addUserToProject(newProject,acquisitionOrganizationEngineer.createGwtUser(),role);
  return newProject;
}"
24686,"private Pilot getPilot(String view){
  if (ViewId.home.equals(view)) {
    return this.homePilot;
  }
 else   if (ViewId.selectSecurityElicitationTechnique.equals(view)) {
    return this.selectSecurityElicitationTechniquePilot;
  }
 else   if (ViewId.manageProject.endsWith(view)) {
    return this.manageProjectPilot;
  }
 else   if (ViewId.manageSite.equals(view)) {
    return this.manageSitePilot;
  }
 else   if (ViewId.assetsAndGoals.equals(view)) {
    return this.assetsAndGoalsPilot;
  }
 else   if (ViewId.riskAssessment.equals(view)) {
    return this.riskAssessmentPilot;
  }
 else   if (ViewId.elicitSecurityRequirements.equals(view)) {
    return this.elicitSecurityRequirementsPilot;
  }
 else   if (ViewId.agreeOnDefinitions.equals(view)) {
    return this.definitionsPilot;
  }
 else   if (ViewId.prioritizeRequirements.equals(view)) {
    return this.priorityPilot;
  }
 else   if (ViewId.categorizeRequirements.equals(view)) {
    return this.categoryPilot;
  }
 else   if (ViewId.collectArtifacts.equals(view)) {
    return this.artifactsPilot;
  }
 else   if (ViewId.inspectRequirements.equals(view)) {
    return this.inspectionPilot;
  }
 else   if (ViewId.chooseStep.equals(view)) {
    return this.chooseStepPilot;
  }
 else   if (ViewId.chooseStepCase3.equals(view)) {
    return this.chooseStepCase3Pilot;
  }
 else   if (ViewId.chooseCase.equals(view)) {
    return this.chooseCasePilot;
  }
 else   if (ViewId.reviewOfRequirementsByAcquisitionOrganization.equals(view)) {
    return this.reviewOfRequirementsByAcquisitionOrganizationPilot;
  }
 else   if (ViewId.reviewPackages.equals(view)) {
    return this.reviewPackagesPilot;
  }
 else   if (ViewId.performTradeoffAnalysis.equals(view)) {
    return this.performTradeoffAnalysisPilot;
  }
 else   if (ViewId.reviewAndFinalizeRequirements.equals(view)) {
    return this.reviewAndFinalizeRequirementsPilot;
  }
 else   if (ViewId.finalProductSelection.equals(view)) {
    return this.finalProductSelectionPilot;
  }
 else {
    return null;
  }
}","private Pilot getPilot(String view){
  if (ViewId.home.equals(view)) {
    return this.homePilot;
  }
 else   if (ViewId.selectSecurityElicitationTechnique.equals(view)) {
    return this.selectSecurityElicitationTechniquePilot;
  }
 else   if (ViewId.manageProject.endsWith(view)) {
    return this.manageProjectPilot;
  }
 else   if (ViewId.manageSite.equals(view)) {
    return this.manageSitePilot;
  }
 else   if (ViewId.assetsAndGoals.equals(view)) {
    return this.assetsAndGoalsPilot;
  }
 else   if (ViewId.elicitSecurityRequirements.equals(view)) {
    return this.elicitSecurityRequirementsPilot;
  }
 else   if (ViewId.agreeOnDefinitions.equals(view)) {
    return this.definitionsPilot;
  }
 else   if (ViewId.prioritizeRequirements.equals(view)) {
    return this.priorityPilot;
  }
 else   if (ViewId.chooseStep.equals(view)) {
    return this.chooseStepPilot;
  }
 else   if (ViewId.chooseStepCase3.equals(view)) {
    return this.chooseStepCase3Pilot;
  }
 else   if (ViewId.chooseCase.equals(view)) {
    return this.chooseCasePilot;
  }
 else   if (ViewId.reviewOfRequirementsByAcquisitionOrganization.equals(view)) {
    return this.reviewOfRequirementsByAcquisitionOrganizationPilot;
  }
 else   if (ViewId.reviewPackages.equals(view)) {
    return this.reviewPackagesPilot;
  }
 else   if (ViewId.performTradeoffAnalysis.equals(view)) {
    return this.performTradeoffAnalysisPilot;
  }
 else   if (ViewId.reviewAndFinalizeRequirements.equals(view)) {
    return this.reviewAndFinalizeRequirementsPilot;
  }
 else   if (ViewId.finalProductSelection.equals(view)) {
    return this.finalProductSelectionPilot;
  }
 else {
    return null;
  }
}"
24687,"@Override public void execute(){
  if (copyConfirmDialog != null && copyConfirmDialog.isConfirmed()) {
    System.out.println(""String_Node_Str"");
    caller.showStatusBar(messages.copying());
    copyProject(listOfProjects.get(lastRowClicked - 1));
    copyConfirmDialog.setConfirmed(false);
  }
 else   if (confirmDialog != null && confirmDialog.isConfirmed()) {
    System.out.println(""String_Node_Str"");
    caller.showStatusBar(messages.removing());
    deleteProject(lastProjectIdClicked);
    confirmDialog.setConfirmed(false);
  }
  System.out.println(""String_Node_Str"");
}","@Override public void execute(){
  if (copyConfirmDialog != null && copyConfirmDialog.isConfirmed()) {
    caller.showStatusBar(messages.copying());
    copyProject(listOfProjects.get(lastRowClicked - 1));
    copyConfirmDialog.setConfirmed(false);
  }
 else   if (confirmDialog != null && confirmDialog.isConfirmed()) {
    caller.showStatusBar(messages.removing());
    deleteProject(lastProjectIdClicked);
    confirmDialog.setConfirmed(false);
  }
}"
24688,"private void initializeDialog(String dialogMessage){
  super.setModal(true);
  super.setAnimationEnabled(true);
  this.warningImage.setSize(""String_Node_Str"",""String_Node_Str"");
  this.descriptionLayout.setVerticalAlignment(HasVerticalAlignment.ALIGN_MIDDLE);
  this.descriptionLayout.add(new HTML(dialogMessage));
  this.descriptionLayout.add(warningImage);
  this.descriptionLayout.setWidth(""String_Node_Str"");
  this.descriptionLayout.setSpacing(15);
  this.confirmButton.setWidth(""String_Node_Str"");
  this.cancelButton.setWidth(""String_Node_Str"");
  this.buttonLayout.setWidget(0,0,confirmButton);
  this.buttonLayout.setWidget(0,1,cancelButton);
  this.buttonLayout.setWidth(""String_Node_Str"");
  this.buttonLayout.getCellFormatter().setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
  this.buttonLayout.getCellFormatter().setHorizontalAlignment(0,1,HasHorizontalAlignment.ALIGN_RIGHT);
  this.confirmButton.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      confirmed=true;
      System.out.println(""String_Node_Str"");
      caller.execute();
      hide();
    }
  }
);
  this.cancelButton.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      confirmed=false;
      hide();
    }
  }
);
  this.layout.setSpacing(6);
  this.layout.add(descriptionLayout);
  this.layout.add(buttonLayout);
  this.setWidget(layout);
}","private void initializeDialog(String dialogMessage){
  super.setModal(true);
  super.setAnimationEnabled(true);
  this.warningImage.setSize(""String_Node_Str"",""String_Node_Str"");
  this.descriptionLayout.setVerticalAlignment(HasVerticalAlignment.ALIGN_MIDDLE);
  this.descriptionLayout.add(new HTML(dialogMessage));
  this.descriptionLayout.add(warningImage);
  this.descriptionLayout.setWidth(""String_Node_Str"");
  this.descriptionLayout.setSpacing(15);
  this.confirmButton.setWidth(""String_Node_Str"");
  this.cancelButton.setWidth(""String_Node_Str"");
  this.buttonLayout.setWidget(0,0,confirmButton);
  this.buttonLayout.setWidget(0,1,cancelButton);
  this.buttonLayout.setWidth(""String_Node_Str"");
  this.buttonLayout.getCellFormatter().setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
  this.buttonLayout.getCellFormatter().setHorizontalAlignment(0,1,HasHorizontalAlignment.ALIGN_RIGHT);
  this.confirmButton.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      confirmed=true;
      caller.execute();
      hide();
    }
  }
);
  this.cancelButton.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      confirmed=false;
      hide();
    }
  }
);
  this.layout.setSpacing(6);
  this.layout.add(descriptionLayout);
  this.layout.add(buttonLayout);
  this.setWidget(layout);
}"
24689,"/** 
 * @param stepToTeach The ViewId of the step to teach
 * @param nextPage A generated navigation ID for the page to be called once the user is finished with this page.
 */
public TeachStepPane(String stepToTeach,final String nextPage){
  super();
  pageMessages=(TeachStepMessages)GWT.create(TeachStepMessages.class);
  mainLayout=new VerticalPanel();
  mainLayout.setStyleName(""String_Node_Str"");
  TeachMessages messages=null;
  List<Roles> responsibilities=new ArrayList<Roles>();
  List<String> contents=new ArrayList<String>();
  if (stepToTeach.equals(HistoryManager.ViewId.assetsAndGoals)) {
    messages=(IdentifyAssetsAndGoalsMessages)GWT.create(IdentifyAssetsAndGoalsMessages.class);
    responsibilities.add(Roles.Acquisition_Organization_Engineer);
    contents.add(messages.aoeResponsibilities());
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.selectSecurityElicitationTechnique)) {
    messages=(SelectSecurityTechniqueMessages)GWT.create(SelectSecurityTechniqueMessages.class);
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.riskAssessment)) {
    messages=(SecurityRiskAssessmentMessages)GWT.create(SecurityRiskAssessmentMessages.class);
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.elicitSecurityRequirements)) {
    messages=(ElicitSecurityRequirementsMessages)GWT.create(ElicitSecurityRequirementsMessages.class);
    responsibilities.add(Roles.Contractor);
    responsibilities.add(Roles.Security_Specialist);
    contents.add(messages.contractorResponsibilities());
    contents.add(messages.securityResponsibilities());
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.categorizeRequirements)) {
    messages=(CategorizeRequirementsMessages)GWT.create(CategorizeRequirementsMessages.class);
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.agreeOnDefinitions)) {
    messages=(AgreeOnDefinitionsMessages)GWT.create(AgreeOnDefinitionsMessages.class);
    responsibilities.add(Roles.Acquisition_Organization_Engineer);
    contents.add(messages.aoeResponsibilities());
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.prioritizeRequirements)) {
    messages=(PrioritizeMessages)GWT.create(PrioritizeMessages.class);
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.collectArtifacts)) {
    messages=(CollectArtifactsMessages)GWT.create(CollectArtifactsMessages.class);
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.inspectRequirements)) {
    messages=(InspectRequirementsMessages)GWT.create(InspectRequirementsMessages.class);
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.reviewOfRequirementsByAcquisitionOrganization)) {
    messages=(ReviewOfRequirementsByAcquisitionMessages)GWT.create(ReviewOfRequirementsByAcquisitionMessages.class);
    responsibilities.add(Roles.Acquisition_Organization_Engineer);
    contents.add(messages.aoeResponsibilities());
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.reviewPackages)) {
    messages=(ReviewPackagesMessages)GWT.create(ReviewPackagesMessages.class);
    responsibilities.add(Roles.COTS_Vendor);
    responsibilities.add(Roles.Security_Specialist);
    contents.add(messages.cotsResponsibilities());
    contents.add(messages.securityResponsibilities());
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.reviewAndFinalizeRequirements)) {
    messages=(ReviewAndFinalizeRequirementsMessages)GWT.create(ReviewAndFinalizeRequirementsMessages.class);
    responsibilities.add(Roles.Security_Specialist);
    contents.add(messages.securityResponsibilities());
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.performTradeoffAnalysis)) {
    messages=(PerformTradeoffAnalysisMessages)GWT.create(PerformTradeoffAnalysisMessages.class);
    responsibilities.add(Roles.Security_Specialist);
    contents.add(messages.securityResponsibilities());
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.finalProductSelection)) {
    messages=(FinalProductSelectionMessages)GWT.create(FinalProductSelectionMessages.class);
    responsibilities.add(Roles.Acquisition_Organization_Engineer);
    contents.add(messages.aoeResponsibilities());
  }
 else {
    History.newItem(nextPage);
  }
  this.mainLayout.add(this.createTitle(messages.title()));
  this.mainLayout.add(this.createPurpose(messages.purpose()));
  this.mainLayout.add(this.createResponsibilities(responsibilities,contents));
  this.mainLayout.add(this.createExitCriteria(messages.exitCriteria()));
  this.mainLayout.add(this.createWebisteInfo(messages.webHint()));
  Button goButton=new Button(pageMessages.nextStep());
  goButton.setHeight(""String_Node_Str"");
  goButton.setWidth(""String_Node_Str"");
  goButton.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      History.newItem(nextPage);
    }
  }
);
  mainLayout.add(goButton);
  mainLayout.setWidth(""String_Node_Str"");
  initWidget(mainLayout);
}","/** 
 * @param stepToTeach The ViewId of the step to teach
 * @param nextPage A generated navigation ID for the page to be called once the user is finished with this page.
 */
public TeachStepPane(String stepToTeach,final String nextPage){
  super();
  pageMessages=(TeachStepMessages)GWT.create(TeachStepMessages.class);
  mainLayout=new VerticalPanel();
  mainLayout.setStyleName(""String_Node_Str"");
  TeachMessages messages=null;
  List<Roles> responsibilities=new ArrayList<Roles>();
  List<String> contents=new ArrayList<String>();
  if (stepToTeach.equals(HistoryManager.ViewId.assetsAndGoals)) {
    messages=(IdentifyAssetsAndGoalsMessages)GWT.create(IdentifyAssetsAndGoalsMessages.class);
    responsibilities.add(Roles.Acquisition_Organization_Engineer);
    contents.add(messages.aoeResponsibilities());
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.selectSecurityElicitationTechnique)) {
    messages=(SelectSecurityTechniqueMessages)GWT.create(SelectSecurityTechniqueMessages.class);
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.riskAssessment)) {
    messages=(SecurityRiskAssessmentMessages)GWT.create(SecurityRiskAssessmentMessages.class);
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.elicitSecurityRequirements)) {
    messages=(ElicitSecurityRequirementsMessages)GWT.create(ElicitSecurityRequirementsMessages.class);
    responsibilities.add(Roles.Contractor);
    responsibilities.add(Roles.Security_Specialist);
    contents.add(messages.contractorResponsibilities());
    contents.add(messages.securityResponsibilities());
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.agreeOnDefinitions)) {
    messages=(AgreeOnDefinitionsMessages)GWT.create(AgreeOnDefinitionsMessages.class);
    responsibilities.add(Roles.Acquisition_Organization_Engineer);
    contents.add(messages.aoeResponsibilities());
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.prioritizeRequirements)) {
    messages=(PrioritizeMessages)GWT.create(PrioritizeMessages.class);
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.reviewOfRequirementsByAcquisitionOrganization)) {
    messages=(ReviewOfRequirementsByAcquisitionMessages)GWT.create(ReviewOfRequirementsByAcquisitionMessages.class);
    responsibilities.add(Roles.Acquisition_Organization_Engineer);
    contents.add(messages.aoeResponsibilities());
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.reviewPackages)) {
    messages=(ReviewPackagesMessages)GWT.create(ReviewPackagesMessages.class);
    responsibilities.add(Roles.COTS_Vendor);
    responsibilities.add(Roles.Security_Specialist);
    contents.add(messages.cotsResponsibilities());
    contents.add(messages.securityResponsibilities());
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.reviewAndFinalizeRequirements)) {
    messages=(ReviewAndFinalizeRequirementsMessages)GWT.create(ReviewAndFinalizeRequirementsMessages.class);
    responsibilities.add(Roles.Security_Specialist);
    contents.add(messages.securityResponsibilities());
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.performTradeoffAnalysis)) {
    messages=(PerformTradeoffAnalysisMessages)GWT.create(PerformTradeoffAnalysisMessages.class);
    responsibilities.add(Roles.Security_Specialist);
    contents.add(messages.securityResponsibilities());
  }
 else   if (stepToTeach.equals(HistoryManager.ViewId.finalProductSelection)) {
    messages=(FinalProductSelectionMessages)GWT.create(FinalProductSelectionMessages.class);
    responsibilities.add(Roles.Acquisition_Organization_Engineer);
    contents.add(messages.aoeResponsibilities());
  }
 else {
    History.newItem(nextPage);
  }
  this.mainLayout.add(this.createTitle(messages.title()));
  this.mainLayout.add(this.createPurpose(messages.purpose()));
  this.mainLayout.add(this.createResponsibilities(responsibilities,contents));
  this.mainLayout.add(this.createExitCriteria(messages.exitCriteria()));
  this.mainLayout.add(this.createWebisteInfo(messages.webHint()));
  Button goButton=new Button(pageMessages.nextStep());
  goButton.setHeight(""String_Node_Str"");
  goButton.setWidth(""String_Node_Str"");
  goButton.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      History.newItem(nextPage);
    }
  }
);
  mainLayout.add(goButton);
  mainLayout.setWidth(""String_Node_Str"");
  initWidget(mainLayout);
}"
24690,"public HashMap<Integer,Integer> copyRequirements(Project project,Project originalProject){
  HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
  Project oldProject=projectDao.fetch(originalProject.getId());
  Set<Requirement> requirements=oldProject.getRequirements();
  for (  Requirement r : requirements) {
    Requirement requirement=new Requirement();
    requirement.setDescription(r.getDescription());
    requirement.setPriority(r.getPriority());
    requirement.setTitle(r.getTitle());
    Date now=new Date();
    requirement.setDateCreated(now);
    requirement.setDateModified(now);
    requirement.setProject(project);
    requirementDao.create(requirement);
    map.put(r.getId(),requirement.getId());
  }
  return map;
}","public HashMap<Integer,Integer> copyRequirements(Project project,Project originalProject){
  HashMap<Integer,Integer> map=new HashMap<Integer,Integer>();
  Project oldProject=projectDao.fetch(originalProject.getId());
  Set<Requirement> requirements=oldProject.getRequirements();
  for (  Requirement r : requirements) {
    Requirement requirement=new Requirement();
    requirement.setDescription(r.getDescription());
    requirement.setPriority(r.getPriority());
    requirement.setStatus(r.getStatus());
    requirement.setTitle(r.getTitle());
    Date now=new Date();
    requirement.setDateCreated(now);
    requirement.setDateModified(now);
    requirement.setProject(project);
    requirementDao.create(requirement);
    map.put(r.getId(),requirement.getId());
  }
  return map;
}"
24691,"@AllowedRoles(roles=Roles.Lead_Requirements_Engineer) public void mergeCategories(Integer categoryFromId,Integer categoryToId) throws SquareException {
  try {
    List<Requirement> requirements=requirementDao.findByCategoryId(categoryFromId);
    Category categoryFrom=new Category(categoryFromId);
    Category categoryTo=new Category(categoryToId);
    for (    Requirement requirement : requirements) {
      Set<Category> requirementCategories=requirement.getCategories();
      requirementCategories.remove(categoryFrom);
      requirementCategories.add(categoryTo);
    }
    categoryDao.deleteById(categoryFromId);
  }
 catch (  Throwable t) {
    throw new SquareException(""String_Node_Str"",t);
  }
}","@AllowedRoles(roles=Roles.Lead_Requirements_Engineer) public void mergeCategories(Integer categoryFromId,Integer categoryToId) throws SquareException {
  try {
    List<Requirement> requirements=requirementDao.findByCategoryId(categoryFromId);
    Category categoryFrom=new Category(categoryFromId);
    Category categoryTo=new Category(categoryToId);
    for (    Requirement requirement : requirements) {
    }
    categoryDao.deleteById(categoryFromId);
  }
 catch (  Throwable t) {
    throw new SquareException(""String_Node_Str"",t);
  }
}"
24692,"@AllowedRoles(roles={Roles.All}) public void addCategoryToRequirements(List<GwtRequirement> requirements,GwtCategory category) throws SquareException {
  try {
    Category cat=new Category(category);
    for (    GwtRequirement r : requirements) {
      Requirement req=requirementDao.fetch(r.getId());
      req.getCategories().add(cat);
    }
  }
 catch (  Throwable t) {
    throw new SquareException(""String_Node_Str"",t);
  }
}","@AllowedRoles(roles={Roles.All}) public void addCategoryToRequirements(List<GwtRequirement> requirements,GwtCategory category) throws SquareException {
  try {
    Category cat=new Category(category);
    for (    GwtRequirement r : requirements) {
      Requirement req=requirementDao.fetch(r.getId());
    }
  }
 catch (  Throwable t) {
    throw new SquareException(""String_Node_Str"",t);
  }
}"
24693,"@Override public GwtStepVerficationResult verifyStep(Project project) throws SquareException {
  GwtStepVerficationResult result=new GwtStepVerficationResult();
  Set<Category> categories=new HashSet<Category>();
  Set<Requirement> requirements=project.getRequirements();
  int count=0;
  for (  Requirement r : requirements) {
    if (r.getCategories().size() == 0) {
      count++;
    }
  }
  if (categories.size() == 0) {
    result.getMessages().add(""String_Node_Str"");
    result.setHasWarning(true);
  }
  if (count > 0) {
    result.getMessages().add(""String_Node_Str"" + count + ""String_Node_Str"");
    result.setHasWarning(true);
  }
  return result;
}","@Override public GwtStepVerficationResult verifyStep(Project project) throws SquareException {
  GwtStepVerficationResult result=new GwtStepVerficationResult();
  Set<Category> categories=new HashSet<Category>();
  Set<Requirement> requirements=project.getRequirements();
  int count=0;
  for (  Requirement r : requirements) {
  }
  if (categories.size() == 0) {
    result.getMessages().add(""String_Node_Str"");
    result.setHasWarning(true);
  }
  if (count > 0) {
    result.getMessages().add(""String_Node_Str"" + count + ""String_Node_Str"");
    result.setHasWarning(true);
  }
  return result;
}"
24694,"@AllowedRoles(roles={Roles.All}) public void removeCategoryFromRequirements(List<GwtRequirement> requirements,GwtCategory category) throws SquareException {
  try {
    Category cat=new Category(category);
    for (    GwtRequirement r : requirements) {
      Requirement req=requirementDao.fetch(r.getId());
      req.getCategories().remove(cat);
    }
  }
 catch (  Throwable t) {
    throw new SquareException(""String_Node_Str"",t);
  }
}","@AllowedRoles(roles={Roles.All}) public void removeCategoryFromRequirements(List<GwtRequirement> requirements,GwtCategory category) throws SquareException {
  try {
    Category cat=new Category(category);
    for (    GwtRequirement r : requirements) {
      Requirement req=requirementDao.fetch(r.getId());
    }
  }
 catch (  Throwable t) {
    throw new SquareException(""String_Node_Str"",t);
  }
}"
24695,"@Override public void onChange(ChangeEvent event){
  final String status=statusList.getItemText(statusList.getSelectedIndex());
  if (step.getStatus() != StepStatus.NotStarted && StepStatus.convertLabel(status) == StepStatus.NotStarted) {
    Window.alert(messages.cannotChangeToNotStarted());
    if (step.getStatus() == StepStatus.InProgress)     statusList.setSelectedIndex(1);
    if (step.getStatus() == StepStatus.Complete)     statusList.setSelectedIndex(2);
    return;
  }
  if (step.getStatus() == StepStatus.Complete && StepStatus.convertLabel(status) == StepStatus.InProgress) {
    int stepNo=Integer.valueOf(step.getDescription().charAt(5));
    System.out.println(""String_Node_Str"" + stepNo);
    for (int i=0; i < listOfSteps.size(); i++) {
      int stepNumber=Integer.valueOf(listOfSteps.get(i).getStep().getDescription().charAt(5));
      if (stepNumber < stepNo) {
        updateStepStatus(projectId,listOfSteps.get(i).getStep().getId(),""String_Node_Str"");
      }
    }
  }
  updateStepStatus(projectId,step.getId(),status);
  step.setStatus(StepStatus.convertLabel(status));
}","@Override public void onChange(ChangeEvent event){
  final String status=statusList.getItemText(statusList.getSelectedIndex());
  if (step.getStatus() != StepStatus.NotStarted && StepStatus.convertLabel(status) == StepStatus.NotStarted) {
    Window.alert(messages.cannotChangeToNotStarted());
    if (step.getStatus() == StepStatus.InProgress)     statusList.setSelectedIndex(1);
    if (step.getStatus() == StepStatus.Complete)     statusList.setSelectedIndex(2);
    return;
  }
  if (step.getStatus() == StepStatus.Complete && StepStatus.convertLabel(status) == StepStatus.InProgress) {
    int stepNo=Integer.valueOf(step.getDescription().charAt(5));
    for (int i=0; i < listOfSteps.size(); i++) {
      int stepNumber=Integer.valueOf(listOfSteps.get(i).getStep().getDescription().charAt(5));
      if (stepNumber < stepNo) {
        updateStepStatus(projectId,listOfSteps.get(i).getStep().getId(),""String_Node_Str"");
      }
    }
  }
  updateStepStatus(projectId,step.getId(),status);
  step.setStatus(StepStatus.convertLabel(status));
}"
24696,"private void CreateStepGrid(){
  FlexTable stepsTable=new FlexTable();
  stepsTable.setStyleName(""String_Node_Str"");
  stepsTable.setWidth(""String_Node_Str"");
  stepsTable.setCellPadding(3);
  stepsTable.setCellSpacing(0);
  FlexCellFormatter formatter=stepsTable.getFlexCellFormatter();
  formatter.setStyleName(0,0,""String_Node_Str"");
  formatter.setStyleName(0,1,""String_Node_Str"");
  formatter.setStyleName(0,2,""String_Node_Str"");
  stepsTable.setWidget(0,0,new Label(messages.stepStatusLable()));
  stepsTable.setWidget(0,1,new Label(messages.stepDescription()));
  int rowCount=1;
  for (  final GwtStepVerficationResult stepResult : this.listOfSteps) {
    final ListBox statusList=new ListBox(false);
    statusList.setWidth(""String_Node_Str"");
    statusList.addItem(StepStatus.NotStarted.getLabel());
    statusList.addItem(StepStatus.InProgress.getLabel());
    statusList.addItem(StepStatus.Complete.getLabel());
    final GwtStep step=stepResult.getStep();
switch (step.getStatus()) {
case InProgress:
      statusList.setSelectedIndex(1);
    break;
case Complete:
  statusList.setSelectedIndex(2);
break;
default :
statusList.setSelectedIndex(0);
}
statusList.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent event){
final String status=statusList.getItemText(statusList.getSelectedIndex());
if (step.getStatus() != StepStatus.NotStarted && StepStatus.convertLabel(status) == StepStatus.NotStarted) {
Window.alert(messages.cannotChangeToNotStarted());
if (step.getStatus() == StepStatus.InProgress) statusList.setSelectedIndex(1);
if (step.getStatus() == StepStatus.Complete) statusList.setSelectedIndex(2);
return;
}
if (step.getStatus() == StepStatus.Complete && StepStatus.convertLabel(status) == StepStatus.InProgress) {
int stepNo=Integer.valueOf(step.getDescription().charAt(5));
System.out.println(""String_Node_Str"" + stepNo);
for (int i=0; i < listOfSteps.size(); i++) {
  int stepNumber=Integer.valueOf(listOfSteps.get(i).getStep().getDescription().charAt(5));
  if (stepNumber < stepNo) {
    updateStepStatus(projectId,listOfSteps.get(i).getStep().getId(),""String_Node_Str"");
  }
}
}
updateStepStatus(projectId,step.getId(),status);
step.setStatus(StepStatus.convertLabel(status));
}
}
);
VerticalPanel analysisResults=new VerticalPanel();
analysisResults.setStyleName(""String_Node_Str"");
analysisResults.setVerticalAlignment(HasVerticalAlignment.ALIGN_TOP);
HTML warningLabel=new HTML();
Label resultLabel=new Label();
this.verifyStep(this.projectId,step.getId(),warningLabel,resultLabel,stepResult);
System.out.println(""String_Node_Str"" + step.getId() + ""String_Node_Str""+ step.getDescription());
analysisResults.add(new Hyperlink(step.getDescription(),StepRouter.CreateStepLink(step)));
analysisResults.add(warningLabel);
stepsTable.setWidget(rowCount,0,statusList);
stepsTable.setWidget(rowCount,1,analysisResults);
formatter.setVerticalAlignment(rowCount,0,HasVerticalAlignment.ALIGN_TOP);
formatter.setWidth(rowCount,0,""String_Node_Str"");
rowCount++;
}
this.add(stepsTable);
}","private void CreateStepGrid(){
  FlexTable stepsTable=new FlexTable();
  stepsTable.setStyleName(""String_Node_Str"");
  stepsTable.setWidth(""String_Node_Str"");
  stepsTable.setCellPadding(3);
  stepsTable.setCellSpacing(0);
  FlexCellFormatter formatter=stepsTable.getFlexCellFormatter();
  formatter.setStyleName(0,0,""String_Node_Str"");
  formatter.setStyleName(0,1,""String_Node_Str"");
  formatter.setStyleName(0,2,""String_Node_Str"");
  stepsTable.setWidget(0,0,new Label(messages.stepStatusLable()));
  stepsTable.setWidget(0,1,new Label(messages.stepDescription()));
  int rowCount=1;
  for (  final GwtStepVerficationResult stepResult : this.listOfSteps) {
    final ListBox statusList=new ListBox(false);
    statusList.setWidth(""String_Node_Str"");
    statusList.addItem(StepStatus.NotStarted.getLabel());
    statusList.addItem(StepStatus.InProgress.getLabel());
    statusList.addItem(StepStatus.Complete.getLabel());
    final GwtStep step=stepResult.getStep();
switch (step.getStatus()) {
case InProgress:
      statusList.setSelectedIndex(1);
    break;
case Complete:
  statusList.setSelectedIndex(2);
break;
default :
statusList.setSelectedIndex(0);
}
statusList.addChangeHandler(new ChangeHandler(){
@Override public void onChange(ChangeEvent event){
final String status=statusList.getItemText(statusList.getSelectedIndex());
if (step.getStatus() != StepStatus.NotStarted && StepStatus.convertLabel(status) == StepStatus.NotStarted) {
Window.alert(messages.cannotChangeToNotStarted());
if (step.getStatus() == StepStatus.InProgress) statusList.setSelectedIndex(1);
if (step.getStatus() == StepStatus.Complete) statusList.setSelectedIndex(2);
return;
}
if (step.getStatus() == StepStatus.Complete && StepStatus.convertLabel(status) == StepStatus.InProgress) {
int stepNo=Integer.valueOf(step.getDescription().charAt(5));
for (int i=0; i < listOfSteps.size(); i++) {
  int stepNumber=Integer.valueOf(listOfSteps.get(i).getStep().getDescription().charAt(5));
  if (stepNumber < stepNo) {
    updateStepStatus(projectId,listOfSteps.get(i).getStep().getId(),""String_Node_Str"");
  }
}
}
updateStepStatus(projectId,step.getId(),status);
step.setStatus(StepStatus.convertLabel(status));
}
}
);
VerticalPanel analysisResults=new VerticalPanel();
analysisResults.setStyleName(""String_Node_Str"");
analysisResults.setVerticalAlignment(HasVerticalAlignment.ALIGN_TOP);
HTML warningLabel=new HTML();
Label resultLabel=new Label();
this.verifyStep(this.projectId,step.getId(),warningLabel,resultLabel,stepResult);
System.out.println(""String_Node_Str"" + step.getId() + ""String_Node_Str""+ step.getDescription());
analysisResults.add(new Hyperlink(step.getDescription(),StepRouter.CreateStepLink(step)));
stepsTable.setWidget(rowCount,0,statusList);
stepsTable.setWidget(rowCount,1,analysisResults);
formatter.setVerticalAlignment(rowCount,0,HasVerticalAlignment.ALIGN_TOP);
formatter.setWidth(rowCount,0,""String_Node_Str"");
rowCount++;
}
this.add(stepsTable);
}"
24697,"/** 
 * Retrieve the steps from the database.  Steps are going to be returned in numeric order with 
 * @return
 */
public static String CreateStepLink(GwtStep step){
  String stepDescription=step.getDescription();
  for (  StepEnum se : StepEnum.values()) {
    if (se.getDescription().equals(stepDescription)) {
      return se.getLink();
    }
  }
  return ChooseCasePilot.generateNavigationId(ChooseCasePilot.PageId.FourOhFour);
}","/** 
 * Retrieve the steps from the database.  Steps are going to be returned in numeric order with 
 * @return
 */
public static String CreateStepLink(GwtStep step){
  String stepDescription=step.getDescription();
  for (  StepEnum se : StepEnum.values()) {
    if (se.getDescription().equals(stepDescription)) {
      System.out.println(""String_Node_Str"" + se.getDescription() + ""String_Node_Str""+ se.getLink());
      return se.getLink();
    }
  }
  return ChooseCasePilot.generateNavigationId(ChooseCasePilot.PageId.FourOhFour);
}"
24698,"public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getCaseID() == 1) {
    if (currentState.isSiteAdministrator() == true) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
 else   if (currentState.getCaseID() == 3) {
    if (currentState.isSiteAdministrator() == true) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.getCaseID() == 1) {
    if (currentState.isSiteAdministrator() == true) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
 else   if (currentState.getCaseID() == 3) {
    if (currentState.isSiteAdministrator() == true) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
}"
24699,"public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getCaseID() == 1) {
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
 else   if (currentState.getCaseID() == 3) {
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.getCaseID() == 1) {
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
 else   if (currentState.getCaseID() == 3) {
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
}"
24700,"public Widget navigateTo(String pageId,State currentStateInformation){
  final BreadCrumbMessages messages=(BreadCrumbMessages)GWT.create(BreadCrumbMessages.class);
  if (pageId.equals(PageId.login)) {
    if (!currentStateInformation.isAuthenticated()) {
      this.breadcrumb=""String_Node_Str"";
      return new LoginPane(currentStateInformation);
    }
 else {
      this.breadcrumb=messages.welcome(currentStateInformation.getFullName());
      return new ChooseCasePane(currentStateInformation);
    }
  }
 else   if (pageId.equals(PageId.home)) {
    this.breadcrumb=messages.welcome(currentStateInformation.getFullName());
    System.out.println(""String_Node_Str"" + currentStateInformation);
    return new ChooseCasePane(currentStateInformation);
  }
 else   if (pageId.equals(PageId.logout)) {
    this.breadcrumb=""String_Node_Str"";
    return new SignOutPane(currentStateInformation);
  }
 else   if (pageId.equals(PageId.preferences)) {
    this.breadcrumb=messages.preferences();
    return new EditUserProfilePane(currentStateInformation);
  }
 else   if (pageId.equals(PageId.help)) {
    this.breadcrumb=""String_Node_Str"";
    return new Label(""String_Node_Str"");
  }
  return null;
}","public Widget navigateTo(String pageId,State currentStateInformation){
  final BreadCrumbMessages messages=(BreadCrumbMessages)GWT.create(BreadCrumbMessages.class);
  if (pageId.equals(PageId.login)) {
    if (!currentStateInformation.isAuthenticated()) {
      this.breadcrumb=""String_Node_Str"";
      return new LoginPane(currentStateInformation);
    }
 else {
      this.breadcrumb=messages.welcome(currentStateInformation.getFullName());
      return new ChooseCasePane(currentStateInformation);
    }
  }
 else   if (pageId.equals(PageId.home)) {
    this.breadcrumb=messages.welcome(currentStateInformation.getFullName());
    return new ChooseCasePane(currentStateInformation);
  }
 else   if (pageId.equals(PageId.logout)) {
    this.breadcrumb=""String_Node_Str"";
    return new SignOutPane(currentStateInformation);
  }
 else   if (pageId.equals(PageId.preferences)) {
    this.breadcrumb=messages.preferences();
    return new EditUserProfilePane(currentStateInformation);
  }
 else   if (pageId.equals(PageId.help)) {
    this.breadcrumb=""String_Node_Str"";
    return new Label(""String_Node_Str"");
  }
  return null;
}"
24701,"public void determineAccessRights(String page,State currentState){
  currentState.setMode(GwtModesType.ReadWrite);
}","public void determineAccessRights(String page,State currentState){
  currentState.setMode(GwtModesType.ReadOnly);
}"
24702,"@AllowedRoles(roles={Roles.Administrator,Roles.Acquisition_Organization_Engineer}) public GwtProject createProject(GwtProject newProject) throws SquareException {
  User acquisitionOrganizationEngineer=userDao.fetch(newProject.getAcquisitionOrganizationEngineer().getUserId());
  Project project=new Project(newProject);
  project.setAcquisitionOrganizationEngineer(acquisitionOrganizationEngineer);
  AsquareCase acase=asquareCaseDao.fetch(newProject.getCases().getId());
  project.setCases(acase);
  System.out.println(""String_Node_Str"" + project.getAcquisitionOrgEngineer().getId() + ""String_Node_Str""+ project.getCases().getId()+ ""String_Node_Str""+ project.getDateCreated()+ ""String_Node_Str""+ project.getDateModified()+ ""String_Node_Str""+ project.isLite()+ ""String_Node_Str""+ project.getName()+ ""String_Node_Str""+ project.isPrivacy()+ ""String_Node_Str""+ project.isSecurity());
  projectDao.create(project);
  System.out.println(""String_Node_Str"");
  newProject.setId(project.getId());
  System.out.println(""String_Node_Str"");
  if (newProject.getCases().getId() == 3) {
    QualityAttribute qa=new QualityAttribute();
    qa.setName(""String_Node_Str"");
    qa.setDescription(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    qualityAttributeDao.create(qa);
    System.out.println(""String_Node_Str"");
    ProjectPackageAttributeRating ppar=new ProjectPackageAttributeRating();
    ProjectPackageAttributeRatingId pparid=new ProjectPackageAttributeRatingId();
    pparid.setAttributeId(qa.getId());
    pparid.setPackageId(1);
    pparid.setProjectId(project.getId());
    System.out.println(""String_Node_Str"" + project.getId() + ""String_Node_Str""+ 1+ ""String_Node_Str""+ qa.getId());
    ppar.setId(pparid);
    ppar.setProject(project);
    ppar.setSoftwarePackage(softwarePackageDao.fetch(1));
    ppar.setQualityAttribute(qa);
    ppar.setRating(0);
    projectPackageAttributeRatingDao.create(ppar);
  }
  stepBusiness.createStepsForProject(newProject);
  GwtRole role=new GwtRole();
  role.setName(ProjectRole.Acquisition_Organization_Engineer.getLabel());
  this.addUserToProject(newProject,acquisitionOrganizationEngineer.createGwtUser(),role);
  return newProject;
}","@AllowedRoles(roles={Roles.Administrator,Roles.Acquisition_Organization_Engineer}) public GwtProject createProject(GwtProject newProject) throws SquareException {
  User acquisitionOrganizationEngineer=userDao.fetch(newProject.getAcquisitionOrganizationEngineer().getUserId());
  Project project=new Project(newProject);
  project.setAcquisitionOrganizationEngineer(acquisitionOrganizationEngineer);
  AsquareCase acase=asquareCaseDao.fetch(newProject.getCases().getId());
  project.setCases(acase);
  projectDao.create(project);
  System.out.println(""String_Node_Str"");
  newProject.setId(project.getId());
  System.out.println(""String_Node_Str"");
  if (newProject.getCases().getId() == 3) {
    QualityAttribute qa=new QualityAttribute();
    qa.setName(""String_Node_Str"");
    qa.setDescription(""String_Node_Str"");
    System.out.println(""String_Node_Str"");
    qualityAttributeDao.create(qa);
    System.out.println(""String_Node_Str"");
    ProjectPackageAttributeRating ppar=new ProjectPackageAttributeRating();
    ProjectPackageAttributeRatingId pparid=new ProjectPackageAttributeRatingId();
    pparid.setAttributeId(qa.getId());
    pparid.setPackageId(1);
    pparid.setProjectId(project.getId());
    System.out.println(""String_Node_Str"" + project.getId() + ""String_Node_Str""+ 1+ ""String_Node_Str""+ qa.getId());
    ppar.setId(pparid);
    ppar.setProject(project);
    ppar.setSoftwarePackage(softwarePackageDao.fetch(1));
    ppar.setQualityAttribute(qa);
    ppar.setRating(0);
    projectPackageAttributeRatingDao.create(ppar);
  }
  stepBusiness.createStepsForProject(newProject);
  GwtRole role=new GwtRole();
  role.setName(ProjectRole.Acquisition_Organization_Engineer.getLabel());
  this.addUserToProject(newProject,acquisitionOrganizationEngineer.createGwtUser(),role);
  return newProject;
}"
24703,"private GwtProject CreateProject(){
  Project testProject=new Project();
  testProject.setName(""String_Node_Str"");
  testProject.setLite(false);
  testProject.setPrivacy(false);
  testProject.setSecurity(true);
  testProject.setPrivacyTechniqueRationale(""String_Node_Str"");
  testProject.setSecurityTechniqueRationale(""String_Node_Str"");
  testProject.setAcquisitionOrganizationEngineer(this.testUser);
  testProject.setCases(new AsquareCase(new GwtAsquareCase(1)));
  projectDao.create(testProject);
  return testProject.createGwtProject();
}","private GwtProject CreateProject(){
  Project testProject=new Project();
  testProject.setName(""String_Node_Str"");
  testProject.setLite(false);
  testProject.setPrivacy(false);
  testProject.setSecurity(true);
  testProject.setAcquisitionOrganizationEngineer(this.testUser);
  testProject.setCases(new AsquareCase(new GwtAsquareCase(1)));
  projectDao.create(testProject);
  return testProject.createGwtProject();
}"
24704,"public SoftwarePackage(String description,Project project,Date dateCreated,Date dateModified){
  this.description=description;
  this.project=project;
  this.dateCreated=dateCreated;
  this.dateModified=dateModified;
}","public SoftwarePackage(GwtSoftwarePackage gwtPackage){
  if (gwtPackage == null) {
    return;
  }
  this.id=gwtPackage.getId();
  this.name=gwtPackage.getName();
  this.description=gwtPackage.getDescription();
}"
24705,"public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}"
24706,"public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}"
24707,"public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}"
24708,"public void determineAccessRights(String page,State currentState){
  if (currentState.getCaseID() == 1) {
    if (currentState.isSiteAdministrator() == true) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
 else   if (currentState.getCaseID() == 3) {
    if (currentState.isSiteAdministrator() == true) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.getCaseID() == 1) {
    if (currentState.isSiteAdministrator() == true) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
 else   if (currentState.getCaseID() == 3) {
    if (currentState.isSiteAdministrator() == true) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
}"
24709,"public void determineAccessRights(String page,State currentState){
  if (currentState.getCaseID() == 1) {
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
 else   if (currentState.getCaseID() == 3) {
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.getCaseID() == 1) {
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
 else   if (currentState.getCaseID() == 3) {
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
}"
24710,"public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getCaseID() == 1) {
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
 else   if (currentState.getCaseID() == 3) {
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.getCaseID() == 1) {
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
 else   if (currentState.getCaseID() == 3) {
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
}"
24711,"public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}"
24712,"public void determineAccessRights(String page,State currentState){
  System.out.println(""String_Node_Str"");
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}"
24713,"public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}"
24714,"public void determineAccessRights(String page,State currentState){
  if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}"
24715,"public void drawSoftwarePackages(){
  FlexCellFormatter formatter=this.matrix.getFlexCellFormatter();
  for (int j=0; j < softwarePackages.size(); j++) {
    Label packageLabel=new Label(softwarePackages.get(j).getName());
    final DecoratedPopupPanel simplePopup=new DecoratedPopupPanel(true);
    simplePopup.setWidth(""String_Node_Str"");
    simplePopup.setWidget(new HTML(softwarePackages.get(j).getDescription()));
    packageLabel.addMouseOverHandler(new MouseOverHandler(){
      public void onMouseOver(      MouseOverEvent event){
        Widget source=(Widget)event.getSource();
        int left=source.getAbsoluteLeft() + 40;
        int top=source.getAbsoluteTop() + 20;
        simplePopup.setPopupPosition(left,top);
        simplePopup.show();
      }
    }
);
    packageLabel.addMouseOutHandler(new MouseOutHandler(){
      public void onMouseOut(      MouseOutEvent event){
        simplePopup.hide();
      }
    }
);
    matrix.setWidget(j + 1,0,packageLabel);
    final SummaryElementHyperLinkElement tradeoffReasonLink=new SummaryElementHyperLinkElement(softwarePackages.get(j).getId(),""String_Node_Str"");
    final int index=j;
    final int packageid=softwarePackages.get(j).getId();
    tradeoffReasonLink.addClickHandler(new ClickHandler(){
      public void onClick(      ClickEvent event){
        editTradeoffReasonDialog=new EditTradeoffReasonDialog(tradeoffReasons.get(index),tradeoffReasons,PerformTradeoffAnalysisPane.this);
        editTradeoffReasonDialog.center();
        editTradeoffReasonDialog.setModal(true);
        editTradeoffReasonDialog.show();
      }
    }
);
    final ListBox priorityListBox=new ListBox();
    for (int k=0; k < softwarePackages.size(); k++)     priorityListBox.addItem(k + ""String_Node_Str"",k + 1 + ""String_Node_Str"");
    if (tradeoffReasons.get(j).getPriority().intValue() != -1) {
      priorityListBox.setSelectedIndex(tradeoffReasons.get(j).getPriority().intValue());
    }
 else {
      System.out.println(""String_Node_Str"");
      priorityListBox.setSelectedIndex(0);
    }
    priorityListBox.addChangeHandler(new ChangeHandler(){
      public void onChange(      ChangeEvent event){
        int valueSelected=priorityListBox.getSelectedIndex();
        if (valueSelected == 0) {
          valueSelected=-1;
        }
        System.out.println(""String_Node_Str"" + ""String_Node_Str"" + packageid + ""String_Node_Str""+ valueSelected);
        setPackagePriority(packageid,valueSelected);
        tradeoffReasons.get(index).setPriority(valueSelected);
        System.out.println(""String_Node_Str"");
      }
    }
);
    if (j >= 1) {
      matrix.setWidget(j + 1,attributes.size() + listOfRequirements.size() + 2,tradeoffReasonLink);
      formatter.setHorizontalAlignment(j + 1,attributes.size() + listOfRequirements.size() + 2,HasHorizontalAlignment.ALIGN_RIGHT);
      formatter.setStyleName(j + 1,attributes.size() + listOfRequirements.size() + 2,""String_Node_Str"");
      matrix.setWidget(j + 1,attributes.size() + listOfRequirements.size() + 3,priorityListBox);
      formatter.setHorizontalAlignment(j + 1,attributes.size() + listOfRequirements.size() + 3,HasHorizontalAlignment.ALIGN_RIGHT);
      formatter.setStyleName(j + 1,attributes.size() + listOfRequirements.size() + 3,""String_Node_Str"");
    }
    formatter.setHorizontalAlignment(j + 1,0,HasHorizontalAlignment.ALIGN_RIGHT);
    formatter.setStyleName(j + 1,0,""String_Node_Str"");
  }
}","public void drawSoftwarePackages(){
  FlexCellFormatter formatter=this.matrix.getFlexCellFormatter();
  for (int j=0; j < softwarePackages.size(); j++) {
    Label packageLabel=new Label(softwarePackages.get(j).getName());
    final DecoratedPopupPanel simplePopup=new DecoratedPopupPanel(true);
    simplePopup.setWidth(""String_Node_Str"");
    simplePopup.setWidget(new HTML(softwarePackages.get(j).getDescription()));
    packageLabel.addMouseOverHandler(new MouseOverHandler(){
      public void onMouseOver(      MouseOverEvent event){
        Widget source=(Widget)event.getSource();
        int left=source.getAbsoluteLeft() + 40;
        int top=source.getAbsoluteTop() + 20;
        simplePopup.setPopupPosition(left,top);
        simplePopup.show();
      }
    }
);
    packageLabel.addMouseOutHandler(new MouseOutHandler(){
      public void onMouseOut(      MouseOutEvent event){
        simplePopup.hide();
      }
    }
);
    matrix.setWidget(j + 1,0,packageLabel);
    final SummaryElementHyperLinkElement tradeoffReasonLink=new SummaryElementHyperLinkElement(softwarePackages.get(j).getId(),""String_Node_Str"");
    final int index=j;
    final int packageid=softwarePackages.get(j).getId();
    tradeoffReasonLink.addClickHandler(new ClickHandler(){
      public void onClick(      ClickEvent event){
        editTradeoffReasonDialog=new EditTradeoffReasonDialog(tradeoffReasons.get(index),tradeoffReasons,PerformTradeoffAnalysisPane.this);
        editTradeoffReasonDialog.center();
        editTradeoffReasonDialog.setModal(true);
        editTradeoffReasonDialog.show();
      }
    }
);
    final ListBox priorityListBox=new ListBox();
    for (int k=0; k < softwarePackages.size(); k++)     priorityListBox.addItem(k + ""String_Node_Str"",k + 1 + ""String_Node_Str"");
    if (tradeoffReasons.get(j).getPriority().intValue() != -1) {
      priorityListBox.setSelectedIndex(tradeoffReasons.get(j).getPriority().intValue());
    }
 else {
      priorityListBox.setSelectedIndex(0);
    }
    priorityListBox.addChangeHandler(new ChangeHandler(){
      public void onChange(      ChangeEvent event){
        int valueSelected=priorityListBox.getSelectedIndex();
        if (valueSelected == 0) {
          valueSelected=-1;
        }
        System.out.println(""String_Node_Str"" + ""String_Node_Str"" + packageid + ""String_Node_Str""+ valueSelected);
        setPackagePriority(packageid,valueSelected);
        tradeoffReasons.get(index).setPriority(valueSelected);
        System.out.println(""String_Node_Str"");
      }
    }
);
    if (j >= 1) {
      matrix.setWidget(j + 1,attributes.size() + listOfRequirements.size() + 2,tradeoffReasonLink);
      formatter.setHorizontalAlignment(j + 1,attributes.size() + listOfRequirements.size() + 2,HasHorizontalAlignment.ALIGN_RIGHT);
      formatter.setStyleName(j + 1,attributes.size() + listOfRequirements.size() + 2,""String_Node_Str"");
      matrix.setWidget(j + 1,attributes.size() + listOfRequirements.size() + 3,priorityListBox);
      formatter.setHorizontalAlignment(j + 1,attributes.size() + listOfRequirements.size() + 3,HasHorizontalAlignment.ALIGN_RIGHT);
      formatter.setStyleName(j + 1,attributes.size() + listOfRequirements.size() + 3,""String_Node_Str"");
    }
    formatter.setHorizontalAlignment(j + 1,0,HasHorizontalAlignment.ALIGN_RIGHT);
    formatter.setStyleName(j + 1,0,""String_Node_Str"");
  }
}"
24716,"@AllowedRoles(roles={Roles.Administrator}) public GwtProject createProject(GwtProject newProject) throws SquareException {
  User acquisitionOrganizationEngineer=userDao.fetch(newProject.getAcquisitionOrganizationEngineer().getUserId());
  Project project=new Project(newProject);
  project.setAcquisitionOrganizationEngineer(acquisitionOrganizationEngineer);
  AsquareCase acase=asquareCaseDao.fetch(newProject.getCases().getId());
  project.setCases(acase);
  projectDao.create(project);
  newProject.setId(project.getId());
  if (newProject.getCases().getId() == 3) {
    QualityAttribute qa=new QualityAttribute();
    qa.setName(""String_Node_Str"");
    qa.setDescription(""String_Node_Str"");
    qualityAttributeDao.create(qa);
    ProjectPackageAttributeRating ppar=new ProjectPackageAttributeRating();
    ProjectPackageAttributeRatingId pparid=new ProjectPackageAttributeRatingId();
    pparid.setAttributeId(qa.getId());
    pparid.setPackageId(1);
    pparid.setProjectId(project.getId());
    ppar.setId(pparid);
    ppar.setProject(project);
    ppar.setSoftwarePackage(softwarePackageDao.fetch(1));
    ppar.setQualityAttribute(qa);
    ppar.setRating(0);
    projectPackageAttributeRatingDao.create(ppar);
  }
  stepBusiness.createStepsForProject(newProject);
  GwtRole role=new GwtRole();
  role.setName(ProjectRole.Acquisition_Organization_Engineer.getLabel());
  this.addUserToProject(newProject,acquisitionOrganizationEngineer.createGwtUser(),role);
  return newProject;
}","@AllowedRoles(roles={Roles.Administrator}) public GwtProject createProject(GwtProject newProject) throws SquareException {
  User acquisitionOrganizationEngineer=userDao.fetch(newProject.getAcquisitionOrganizationEngineer().getUserId());
  Project project=new Project(newProject);
  project.setAcquisitionOrganizationEngineer(acquisitionOrganizationEngineer);
  AsquareCase acase=asquareCaseDao.fetch(newProject.getCases().getId());
  project.setCases(acase);
  projectDao.create(project);
  newProject.setId(project.getId());
  if (newProject.getCases().getId() == 3) {
    QualityAttribute qa=new QualityAttribute();
    qa.setName(""String_Node_Str"");
    qa.setDescription(""String_Node_Str"");
    qualityAttributeDao.create(qa);
    ProjectPackageAttributeRating ppar=new ProjectPackageAttributeRating();
    ProjectPackageAttributeRatingId pparid=new ProjectPackageAttributeRatingId();
    pparid.setAttributeId(qa.getId());
    pparid.setPackageId(1);
    pparid.setProjectId(project.getId());
    ppar.setId(pparid);
    ppar.setProject(project);
    ppar.setSoftwarePackage(softwarePackageDao.fetch(1));
    ppar.setQualityAttribute(qa);
    ppar.setRating(0);
    projectPackageAttributeRatingDao.create(ppar);
    ProjectPackageTradeoffreasonId id=new ProjectPackageTradeoffreasonId(project.getId(),1);
    ProjectPackageTradeoffreason tradeoffReason=new ProjectPackageTradeoffreason(id,project,softwarePackageDao.fetch(1),""String_Node_Str"",1);
    tradeoffReasonDao.create(tradeoffReason);
  }
  stepBusiness.createStepsForProject(newProject);
  GwtRole role=new GwtRole();
  role.setName(ProjectRole.Acquisition_Organization_Engineer.getLabel());
  this.addUserToProject(newProject,acquisitionOrganizationEngineer.createGwtUser(),role);
  return newProject;
}"
24717,"@Override @SuppressWarnings(""String_Node_Str"") public List<GwtStepVerficationResult> verifyAllSteps(Integer projectId,WebApplicationContext ctx) throws SquareException {
  Map<String,StepBusinessInterface> beanMap=ctx.getBeansOfType(StepBusinessInterface.class);
  List<GwtStepVerficationResult> result=new ArrayList<GwtStepVerficationResult>();
  Project project=projectDao.fetch(projectId);
  Set<Step> steps=project.getSteps();
  GwtStepVerficationResult r=null;
  if (steps.isEmpty()) {
    throw new SquareException(""String_Node_Str"");
  }
  for (  Step s : steps) {
    GwtStep gs=s.createGwtStep(projectId);
    for (    StepBusinessInterface sb : beanMap.values()) {
      r=sb.verifyStep(project);
      if (r == null) {
        logger.info(""String_Node_Str"" + sb);
      }
      break;
    }
    r.setStep(gs);
    result.add(r);
  }
  return result;
}","@Override @SuppressWarnings(""String_Node_Str"") public List<GwtStepVerficationResult> verifyAllSteps(Integer projectId,WebApplicationContext ctx) throws SquareException {
  Map<String,StepBusinessInterface> beanMap=ctx.getBeansOfType(StepBusinessInterface.class);
  List<GwtStepVerficationResult> result=new ArrayList<GwtStepVerficationResult>();
  Project project=projectDao.fetch(projectId);
  Set<Step> steps=project.getSteps();
  GwtStepVerficationResult r=null;
  if (steps.isEmpty()) {
    throw new SquareException(""String_Node_Str"");
  }
  for (  Step s : steps) {
    GwtStep gs=s.createGwtStep(projectId);
    for (    StepBusinessInterface sb : beanMap.values()) {
      System.out.println(""String_Node_Str"" + sb.getStepDescription().getDescription() + ""String_Node_Str""+ gs.getDescription());
      r=sb.verifyStep(project);
      if (r == null) {
        System.out.println(""String_Node_Str"");
        logger.info(""String_Node_Str"" + sb);
      }
      break;
    }
    r.setStep(gs);
    result.add(r);
  }
  return result;
}"
24718,"@Override public GwtStepVerficationResult verifyStep(Project projectId) throws SquareException {
  return null;
}","@Override public GwtStepVerficationResult verifyStep(Project projectId) throws SquareException {
  GwtStepVerficationResult result=new GwtStepVerficationResult();
  result.setHasWarning(false);
  return result;
}"
24719,"@Override public GwtStepVerficationResult verifyStep(Project projectId) throws SquareException {
  return null;
}","@Override public GwtStepVerficationResult verifyStep(Project projectId) throws SquareException {
  GwtStepVerficationResult result=new GwtStepVerficationResult();
  result.setHasWarning(false);
  return result;
}"
24720,"@Override public GwtStepVerficationResult verifyStep(Project projectId) throws SquareException {
  return null;
}","@Override public GwtStepVerficationResult verifyStep(Project projectId) throws SquareException {
  GwtStepVerficationResult result=new GwtStepVerficationResult();
  result.setHasWarning(false);
  return result;
}"
24721,"public void loadSubGoalsFromProject(){
  IdentifyGoalsAssetsServiceAsync service=GWT.create(IdentifyGoalsAssetsService.class);
  ServiceDefTarget endpoint=(ServiceDefTarget)service;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  service.loadBusinessGoalInfo(getCurrentState().getProjectID(),new AsyncCallback<GwtBusinessGoal>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
    public void onSuccess(    GwtBusinessGoal result){
      businessGoalInfo=result;
      listOfProjectSubGoals=businessGoalInfo.getSubGoals();
      loadArtifactsFromProject();
    }
  }
);
}","public void loadSubGoalsFromProject(){
  IdentifyGoalsAssetsServiceAsync service=GWT.create(IdentifyGoalsAssetsService.class);
  ServiceDefTarget endpoint=(ServiceDefTarget)service;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  service.loadBusinessGoalInfo(getCurrentState().getProjectID(),new AsyncCallback<GwtBusinessGoal>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
    public void onSuccess(    GwtBusinessGoal result){
      businessGoalInfo=result;
      listOfProjectSubGoals=businessGoalInfo.getSubGoals();
      loadProjectRequirements();
    }
  }
);
}"
24722,"public void loadProjectRequirements(){
  ServiceDefTarget endpoint=(ServiceDefTarget)requirementService;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  this.requirementService.getRequirementsFromProject(this.currentProject.getId(),new AsyncCallback<List<GwtRequirement>>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,messages.errorGettingRequirements());
    }
    public void onSuccess(    List<GwtRequirement> result){
      lisOfRequirements=result;
      currentRequirement=getRequirementFromListByID(currentRequirementId);
      if (currentRequirement != null) {
        listOfSubGoalsMappedToRequirement=currentRequirement.getSubGoals();
        listOfRiksMapppedToRequirement=currentRequirement.getRisks();
        listOfArtifactsMappedToRequirement=currentRequirement.getArtifacts();
      }
      loadProjectRisks();
    }
  }
);
}","public void loadProjectRequirements(){
  ServiceDefTarget endpoint=(ServiceDefTarget)requirementService;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  this.requirementService.getRequirementsFromProject(this.currentProject.getId(),new AsyncCallback<List<GwtRequirement>>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,messages.errorGettingRequirements());
    }
    public void onSuccess(    List<GwtRequirement> result){
      lisOfRequirements=result;
      currentRequirement=getRequirementFromListByID(currentRequirementId);
      if (currentRequirement != null) {
        listOfSubGoalsMappedToRequirement=currentRequirement.getSubGoals();
        listOfRiksMapppedToRequirement=currentRequirement.getRisks();
        listOfArtifactsMappedToRequirement=currentRequirement.getArtifacts();
      }
      PaneInitialization();
    }
  }
);
}"
24723,"public void initializeRequirementFormWidgets(){
  this.editRequirement=new SquareHyperlink(messages.linkEditRequirement());
  this.deleteRequirement=new SquareHyperlink(messages.linkDeleteRequirement());
  this.gotToSummary=new SquareHyperlink(messages.linkBackRequirementSummary());
  this.requirementTitleLabel.setStyleName(""String_Node_Str"");
  this.requirementDescriptionLabel.setStyleName(""String_Node_Str"");
  this.subGoalLabel.setStyleName(""String_Node_Str"");
  this.artifactLabel.setStyleName(""String_Node_Str"");
  this.requirementTitleTextBox.setStyleName(""String_Node_Str"");
  this.requirementDescriptionTextBox.setStyleName(""String_Node_Str"");
  this.requirementDescriptionTextBox.setHeight(""String_Node_Str"");
  subGoalsListBox=new ListBox();
  subGoalsListBox.clear();
  subGoalsListBox.setWidth(""String_Node_Str"");
  subGoalsListBox.addItem(""String_Node_Str"",""String_Node_Str"");
  for (  GwtSubGoal subGoals : listOfProjectSubGoals) {
    subGoalsListBox.addItem(subGoals.getDescription(),subGoals.getId() + ""String_Node_Str"");
  }
}","public void initializeRequirementFormWidgets(){
  this.editRequirement=new SquareHyperlink(messages.linkEditRequirement());
  this.deleteRequirement=new SquareHyperlink(messages.linkDeleteRequirement());
  this.gotToSummary=new SquareHyperlink(messages.linkBackRequirementSummary());
  this.requirementTitleLabel.setStyleName(""String_Node_Str"");
  this.requirementDescriptionLabel.setStyleName(""String_Node_Str"");
  this.subGoalLabel.setStyleName(""String_Node_Str"");
  this.requirementTitleTextBox.setStyleName(""String_Node_Str"");
  this.requirementDescriptionTextBox.setStyleName(""String_Node_Str"");
  this.requirementDescriptionTextBox.setHeight(""String_Node_Str"");
  subGoalsListBox=new ListBox();
  subGoalsListBox.clear();
  subGoalsListBox.setWidth(""String_Node_Str"");
  subGoalsListBox.addItem(""String_Node_Str"",""String_Node_Str"");
  for (  GwtSubGoal subGoals : listOfProjectSubGoals) {
    subGoalsListBox.addItem(subGoals.getDescription(),subGoals.getId() + ""String_Node_Str"");
  }
}"
24724,"public void loadRequirementForm(){
  this.matrix.getCellFormatter().setWidth(1,0,""String_Node_Str"");
  this.matrix.getCellFormatter().setWidth(1,1,""String_Node_Str"");
  this.matrix.setWidth(""String_Node_Str"");
  this.matrix.setCellPadding(10);
  this.matrix.setStyleName(""String_Node_Str"");
  initializeRequirementFormWidgets();
  if (!CommandTypes.insert.equals(currentCommand)) {
    setRequirementFormValues(currentRequirement);
  }
  this.matrix.getCellFormatter().setAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  if (currentCommand == CommandTypes.read) {
    loadReadOnlyRequirementForm();
  }
 else {
    loadEditableRequirementForm();
  }
  this.matrix.setWidget(1,0,requirementDescriptionLabel);
  this.matrix.setWidget(1,1,getField(requirementDescriptionTextBox));
  this.matrix.setWidget(2,1,createHTMLSubGoalList());
  this.matrix.setWidget(3,1,createHTMLArtifactsList());
  this.matrix.getCellFormatter().setAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(1,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(2,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(2,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(3,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(3,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(4,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(4,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
}","public void loadRequirementForm(){
  this.matrix.getCellFormatter().setWidth(1,0,""String_Node_Str"");
  this.matrix.getCellFormatter().setWidth(1,1,""String_Node_Str"");
  this.matrix.setWidth(""String_Node_Str"");
  this.matrix.setCellPadding(10);
  this.matrix.setStyleName(""String_Node_Str"");
  initializeRequirementFormWidgets();
  if (!CommandTypes.insert.equals(currentCommand)) {
    setRequirementFormValues(currentRequirement);
  }
  this.matrix.getCellFormatter().setAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  if (currentCommand == CommandTypes.read) {
    loadReadOnlyRequirementForm();
  }
 else {
    loadEditableRequirementForm();
  }
  this.matrix.setWidget(1,0,requirementDescriptionLabel);
  this.matrix.setWidget(1,1,getField(requirementDescriptionTextBox));
  this.matrix.setWidget(2,1,createHTMLSubGoalList());
  this.matrix.getCellFormatter().setAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(1,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(2,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(2,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(3,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(4,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(4,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
}"
24725,"public void loadReadOnlyRequirementForm(){
  this.matrix.setWidget(0,0,getField(requirementTitleTextBox));
  this.matrix.getCellFormatter().setAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setStyleName(0,0,""String_Node_Str"");
  ((FlexCellFormatter)this.matrix.getCellFormatter()).setColSpan(0,0,2);
  this.matrix.setWidget(2,0,subGoalLabel);
  this.matrix.setWidget(3,0,artifactLabel);
  if (currentState.getMode() == GwtModesType.ReadWrite) {
    FlexTable bottonControlPanel=new FlexTable();
    bottonControlPanel.setWidth(""String_Node_Str"");
    bottonControlPanel.setWidget(2,0,new Label(""String_Node_Str""));
    bottonControlPanel.setWidget(3,0,gotToSummary);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(1,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(2,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(3,0,HasHorizontalAlignment.ALIGN_LEFT);
    this.getContent().add(bottonControlPanel);
  }
  this.editRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      currentCommand=CommandTypes.update;
      PaneInitialization();
    }
  }
);
  this.deleteRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      removeRequirement(currentRequirementId);
    }
  }
);
  this.gotToSummary.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      History.newItem(PerformTradeoffAnalysisPilot.generateNavigationId(PerformTradeoffAnalysisPilot.PageId.matrix));
    }
  }
);
}","public void loadReadOnlyRequirementForm(){
  this.matrix.setWidget(0,0,getField(requirementTitleTextBox));
  this.matrix.getCellFormatter().setAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setStyleName(0,0,""String_Node_Str"");
  ((FlexCellFormatter)this.matrix.getCellFormatter()).setColSpan(0,0,2);
  this.matrix.setWidget(2,0,subGoalLabel);
  if (currentState.getMode() == GwtModesType.ReadWrite) {
    FlexTable bottonControlPanel=new FlexTable();
    bottonControlPanel.setWidth(""String_Node_Str"");
    bottonControlPanel.setWidget(2,0,new Label(""String_Node_Str""));
    bottonControlPanel.setWidget(3,0,gotToSummary);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(1,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(2,0,HasHorizontalAlignment.ALIGN_LEFT);
    this.getContent().add(bottonControlPanel);
  }
  this.editRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      currentCommand=CommandTypes.update;
      PaneInitialization();
    }
  }
);
  this.deleteRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      removeRequirement(currentRequirementId);
    }
  }
);
  this.gotToSummary.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      History.newItem(PerformTradeoffAnalysisPilot.generateNavigationId(PerformTradeoffAnalysisPilot.PageId.matrix));
    }
  }
);
}"
24726,"public void execute(){
  if (currentDialog.equalsIgnoreCase(""String_Node_Str"")) {
    listOfRiksMapppedToRequirement.clear();
    this.matrix.setWidget(2,1,createHTMLSubGoalList());
  }
 else   if (currentDialog.equalsIgnoreCase(""String_Node_Str"")) {
    listArtifactChanged(listOfArtifactsMappedToRequirement,artifactDialog.getNewSelectedArtifacts());
    listOfArtifactsMappedToRequirement=artifactDialog.getNewSelectedArtifacts();
    this.matrix.setWidget(3,1,createHTMLArtifactsList());
  }
}","public void execute(){
  if (currentDialog.equalsIgnoreCase(""String_Node_Str"")) {
    listOfRiksMapppedToRequirement.clear();
    this.matrix.setWidget(2,1,createHTMLSubGoalList());
  }
}"
24727,"@AllowedRoles(roles={Roles.Administrator,Roles.Contractor,Roles.Acquisition_Organization_Engineer,Roles.Security_Specialist}) public void associateSubGoalAndAsset(GwtSubGoal gwtSubgoal,GwtAsset gwtAsset) throws SquareException {
  Goal subGoal=this.goalDataAccess.fetch(gwtSubgoal.getId());
  Asset asset=this.assetDataAccess.fetch(gwtAsset.getId());
  subGoal.getAssets().add(asset);
}","@AllowedRoles(roles={Roles.Administrator,Roles.Contractor,Roles.Acquisition_Organization_Engineer,Roles.Security_Specialist,Roles.COTS_Vendor}) public void associateSubGoalAndAsset(GwtSubGoal gwtSubgoal,GwtAsset gwtAsset) throws SquareException {
  Goal subGoal=this.goalDataAccess.fetch(gwtSubgoal.getId());
  Asset asset=this.assetDataAccess.fetch(gwtAsset.getId());
  subGoal.getAssets().add(asset);
}"
24728,"@AllowedRoles(roles={Roles.Administrator,Roles.Contractor,Roles.Acquisition_Organization_Engineer,Roles.Security_Specialist}) public void setBusinessGoal(int projectId,GwtBusinessGoal businessGoal) throws SquareException {
  Project project=new Project();
  project.setId(projectId);
  List<Goal> existingBusinessGoalList=this.goalDataAccess.getBusinessGoalByProject(project);
  GoalType goalType=new GoalType();
  Goal goal=new Goal();
  goalType.setId(1);
  if (existingBusinessGoalList.size() == 0) {
    goal.setGoalType(goalType);
    goal.setProject(project);
    goal.setDescription(businessGoal.getDescription());
    goal.setPriority(1);
    this.goalDataAccess.create(goal);
  }
 else {
    goal=existingBusinessGoalList.get(0);
    goal.setGoalType(goalType);
    goal.setProject(project);
    goal.setDescription(businessGoal.getDescription());
    goal.setPriority(1);
    goal.setId(businessGoal.getId());
    this.goalDataAccess.update(goal);
  }
  businessGoal.setId(goal.getId());
  businessGoal.setDescription(goal.getDescription());
}","@AllowedRoles(roles={Roles.Administrator,Roles.Contractor,Roles.Acquisition_Organization_Engineer,Roles.Security_Specialist,Roles.COTS_Vendor}) public void setBusinessGoal(int projectId,GwtBusinessGoal businessGoal) throws SquareException {
  Project project=new Project();
  project.setId(projectId);
  List<Goal> existingBusinessGoalList=this.goalDataAccess.getBusinessGoalByProject(project);
  GoalType goalType=new GoalType();
  Goal goal=new Goal();
  goalType.setId(1);
  if (existingBusinessGoalList.size() == 0) {
    goal.setGoalType(goalType);
    goal.setProject(project);
    goal.setDescription(businessGoal.getDescription());
    goal.setPriority(1);
    this.goalDataAccess.create(goal);
  }
 else {
    goal=existingBusinessGoalList.get(0);
    goal.setGoalType(goalType);
    goal.setProject(project);
    goal.setDescription(businessGoal.getDescription());
    goal.setPriority(1);
    goal.setId(businessGoal.getId());
    this.goalDataAccess.update(goal);
  }
  businessGoal.setId(goal.getId());
  businessGoal.setDescription(goal.getDescription());
}"
24729,"@AllowedRoles(roles={Roles.Administrator,Roles.Contractor,Roles.Acquisition_Organization_Engineer,Roles.Security_Specialist}) public void updateSubGoal(int projectId,GwtSubGoal subgoal) throws SquareException {
  Project project=new Project();
  project.setId(projectId);
  GoalType goalType=new GoalType();
  goalType.setId(2);
  Goal goal=goalDataAccess.fetch(subgoal.getId());
  goal.setProject(project);
  goal.setId(subgoal.getId());
  goal.setGoalType(goalType);
  goal.setDescription(subgoal.getDescription());
  goal.setPriority(subgoal.getPriority());
  goalDataAccess.update(goal);
}","@AllowedRoles(roles={Roles.Administrator,Roles.Contractor,Roles.Acquisition_Organization_Engineer,Roles.Security_Specialist,Roles.COTS_Vendor}) public void updateSubGoal(int projectId,GwtSubGoal subgoal) throws SquareException {
  Project project=new Project();
  project.setId(projectId);
  GoalType goalType=new GoalType();
  goalType.setId(2);
  Goal goal=goalDataAccess.fetch(subgoal.getId());
  goal.setProject(project);
  goal.setId(subgoal.getId());
  goal.setGoalType(goalType);
  goal.setDescription(subgoal.getDescription());
  goal.setPriority(subgoal.getPriority());
  goalDataAccess.update(goal);
}"
24730,"@AllowedRoles(roles={Roles.Administrator,Roles.Contractor,Roles.Acquisition_Organization_Engineer,Roles.Security_Specialist}) public GwtBusinessGoal getBusinessGoalInformation(int projectId){
  Project project=new Project();
  project.setId(projectId);
  List<Goal> businessGoalRetrived=this.goalDataAccess.getBusinessGoalByProject(project);
  GwtBusinessGoal businessGoal=new GwtBusinessGoal();
  if (businessGoalRetrived.size() == 1) {
    businessGoal.setId(businessGoalRetrived.get(0).getId());
    businessGoal.setDescription(businessGoalRetrived.get(0).getDescription());
  }
  List<Goal> subGoals=this.goalDataAccess.getSubGoalByProject(project);
  for (  Goal goal : subGoals) {
    GwtSubGoal gwtSubGoal=new GwtSubGoal();
    gwtSubGoal.setId(goal.getId());
    gwtSubGoal.setDescription(goal.getDescription());
    gwtSubGoal.setPriority(goal.getPriority());
    businessGoal.getSubGoals().add(gwtSubGoal);
    Set<Asset> listAssets=goal.getAssets();
    for (    Asset a : listAssets) {
      GwtAsset gwtAsset=new GwtAsset();
      gwtAsset.setId(a.getId());
      gwtAsset.setDescription(a.getDescription());
      gwtSubGoal.getAssets().add(gwtAsset);
    }
  }
  List<Asset> assets=this.assetDataAccess.getAssetByProject(project);
  for (  Asset asset : assets) {
    GwtAsset gwtAsset=new GwtAsset();
    gwtAsset.setId(asset.getId());
    gwtAsset.setDescription(asset.getDescription());
    businessGoal.getAssets().add(gwtAsset);
  }
  return businessGoal;
}","@AllowedRoles(roles={Roles.Administrator,Roles.Contractor,Roles.Acquisition_Organization_Engineer,Roles.Security_Specialist,Roles.COTS_Vendor}) public GwtBusinessGoal getBusinessGoalInformation(int projectId){
  Project project=new Project();
  project.setId(projectId);
  List<Goal> businessGoalRetrived=this.goalDataAccess.getBusinessGoalByProject(project);
  GwtBusinessGoal businessGoal=new GwtBusinessGoal();
  if (businessGoalRetrived.size() == 1) {
    businessGoal.setId(businessGoalRetrived.get(0).getId());
    businessGoal.setDescription(businessGoalRetrived.get(0).getDescription());
  }
  List<Goal> subGoals=this.goalDataAccess.getSubGoalByProject(project);
  for (  Goal goal : subGoals) {
    GwtSubGoal gwtSubGoal=new GwtSubGoal();
    gwtSubGoal.setId(goal.getId());
    gwtSubGoal.setDescription(goal.getDescription());
    gwtSubGoal.setPriority(goal.getPriority());
    businessGoal.getSubGoals().add(gwtSubGoal);
    Set<Asset> listAssets=goal.getAssets();
    for (    Asset a : listAssets) {
      GwtAsset gwtAsset=new GwtAsset();
      gwtAsset.setId(a.getId());
      gwtAsset.setDescription(a.getDescription());
      gwtSubGoal.getAssets().add(gwtAsset);
    }
  }
  List<Asset> assets=this.assetDataAccess.getAssetByProject(project);
  for (  Asset asset : assets) {
    GwtAsset gwtAsset=new GwtAsset();
    gwtAsset.setId(asset.getId());
    gwtAsset.setDescription(asset.getDescription());
    businessGoal.getAssets().add(gwtAsset);
  }
  return businessGoal;
}"
24731,"@AllowedRoles(roles={Roles.Administrator,Roles.Contractor,Roles.Acquisition_Organization_Engineer,Roles.Security_Specialist}) public void updateAsset(int projectId,GwtAsset gwtAsset) throws SquareException {
  Project project=new Project();
  project.setId(projectId);
  Asset asset=assetDataAccess.fetch(gwtAsset.getId());
  asset.setProject(project);
  asset.setId(gwtAsset.getId());
  asset.setDescription(gwtAsset.getDescription());
  assetDataAccess.update(asset);
}","@AllowedRoles(roles={Roles.Administrator,Roles.Contractor,Roles.Acquisition_Organization_Engineer,Roles.Security_Specialist,Roles.COTS_Vendor}) public void updateAsset(int projectId,GwtAsset gwtAsset) throws SquareException {
  Project project=new Project();
  project.setId(projectId);
  Asset asset=assetDataAccess.fetch(gwtAsset.getId());
  asset.setProject(project);
  asset.setId(gwtAsset.getId());
  asset.setDescription(gwtAsset.getDescription());
  assetDataAccess.update(asset);
}"
24732,"public Widget getDataRow(int rowCount,GwtRequirement req){
  FlexTable rowTable=new FlexTable();
  rowTable.setStyleName(""String_Node_Str"");
  rowTable.setCellSpacing(4);
  rowTable.setSize(""String_Node_Str"",""String_Node_Str"");
  Label reqTitleLabel=new Label(req.getTitle());
  Label reqDescriptionLabel=new Label(req.getDescription());
  Label reqStatusLabel=new Label(req.getStatus());
  final SummaryElementHyperLinkElement viewDetailLink=new SummaryElementHyperLinkElement(req.getId(),""String_Node_Str"");
  if (this.getCurrentState().getMode().equals(GwtModesType.ReadWrite)) {
    HorizontalPanel links=new HorizontalPanel();
    links.setStyleName(""String_Node_Str"");
    links.add(viewDetailLink);
    rowTable.setWidget(0,3,links);
  }
 else {
    rowTable.setWidget(0,2,new Label(""String_Node_Str""));
  }
  final ReviewOfRequirementsByAcquisitionPane reviewOfRequirementsByAcquisitionObject=this;
  viewDetailLink.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      currentState.setCurrentRisk(viewDetailLink.getRequirementId());
      currentState.setRiskCommand(1);
      History.newItem(ReviewOfRequirementsByAcquisitionPilot.generateNavigationId(ReviewOfRequirementsByAcquisitionPilot.PageId.requirementDetail));
    }
  }
);
  int addedItemIndex=getIndexById(modifyRequirementId);
  if (addedItemIndex != -1 && (addedItemIndex + 1) == rowCount) {
    yellowFadeHandler.add(rowTable);
    modifyRequirementId=-1;
  }
  rowTable.setWidget(0,0,reqTitleLabel);
  rowTable.setWidget(0,1,reqDescriptionLabel);
  rowTable.setWidget(0,2,reqStatusLabel);
  rowTable.getCellFormatter().setWidth(0,0,""String_Node_Str"");
  rowTable.getCellFormatter().setWidth(0,1,""String_Node_Str"");
  rowTable.getCellFormatter().setWidth(0,2,""String_Node_Str"");
  rowTable.getCellFormatter().setWidth(0,3,""String_Node_Str"");
  rowTable.getCellFormatter().setHorizontalAlignment(0,2,HasHorizontalAlignment.ALIGN_CENTER);
  rowTable.getCellFormatter().setVerticalAlignment(0,0,HasVerticalAlignment.ALIGN_TOP);
  rowTable.getCellFormatter().setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
  rowTable.getCellFormatter().setHorizontalAlignment(0,1,HasHorizontalAlignment.ALIGN_LEFT);
  rowTable.getCellFormatter().setHorizontalAlignment(0,2,HasHorizontalAlignment.ALIGN_CENTER);
  rowTable.getCellFormatter().setVerticalAlignment(0,0,HasVerticalAlignment.ALIGN_TOP);
  rowTable.getCellFormatter().setVerticalAlignment(0,1,HasVerticalAlignment.ALIGN_TOP);
  rowTable.getCellFormatter().setVerticalAlignment(0,2,HasVerticalAlignment.ALIGN_TOP);
  return rowTable;
}","public Widget getDataRow(int rowCount,GwtRequirement req){
  FlexTable rowTable=new FlexTable();
  rowTable.setStyleName(""String_Node_Str"");
  rowTable.setCellSpacing(4);
  rowTable.setSize(""String_Node_Str"",""String_Node_Str"");
  Label reqTitleLabel=new Label(req.getTitle());
  Label reqDescriptionLabel=new Label(req.getDescription());
  Label reqStatusLabel=new Label(req.getStatus());
  final SummaryElementHyperLinkElement viewDetailLink=new SummaryElementHyperLinkElement(req.getId(),""String_Node_Str"");
  if (this.getCurrentState().getMode().equals(GwtModesType.ReadOnly) || this.getCurrentState().getMode().equals(GwtModesType.ReadWrite)) {
    HorizontalPanel links=new HorizontalPanel();
    links.setStyleName(""String_Node_Str"");
    links.add(viewDetailLink);
    rowTable.setWidget(0,3,links);
  }
 else {
    rowTable.setWidget(0,2,new Label(""String_Node_Str""));
  }
  final ReviewOfRequirementsByAcquisitionPane reviewOfRequirementsByAcquisitionObject=this;
  viewDetailLink.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      currentState.setCurrentRisk(viewDetailLink.getRequirementId());
      currentState.setRiskCommand(1);
      History.newItem(ReviewOfRequirementsByAcquisitionPilot.generateNavigationId(ReviewOfRequirementsByAcquisitionPilot.PageId.requirementDetail));
    }
  }
);
  int addedItemIndex=getIndexById(modifyRequirementId);
  if (addedItemIndex != -1 && (addedItemIndex + 1) == rowCount) {
    yellowFadeHandler.add(rowTable);
    modifyRequirementId=-1;
  }
  rowTable.setWidget(0,0,reqTitleLabel);
  rowTable.setWidget(0,1,reqDescriptionLabel);
  rowTable.setWidget(0,2,reqStatusLabel);
  rowTable.getCellFormatter().setWidth(0,0,""String_Node_Str"");
  rowTable.getCellFormatter().setWidth(0,1,""String_Node_Str"");
  rowTable.getCellFormatter().setWidth(0,2,""String_Node_Str"");
  rowTable.getCellFormatter().setWidth(0,3,""String_Node_Str"");
  rowTable.getCellFormatter().setHorizontalAlignment(0,2,HasHorizontalAlignment.ALIGN_CENTER);
  rowTable.getCellFormatter().setVerticalAlignment(0,0,HasVerticalAlignment.ALIGN_TOP);
  rowTable.getCellFormatter().setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
  rowTable.getCellFormatter().setHorizontalAlignment(0,1,HasHorizontalAlignment.ALIGN_LEFT);
  rowTable.getCellFormatter().setHorizontalAlignment(0,2,HasHorizontalAlignment.ALIGN_CENTER);
  rowTable.getCellFormatter().setVerticalAlignment(0,0,HasVerticalAlignment.ALIGN_TOP);
  rowTable.getCellFormatter().setVerticalAlignment(0,1,HasVerticalAlignment.ALIGN_TOP);
  rowTable.getCellFormatter().setVerticalAlignment(0,2,HasVerticalAlignment.ALIGN_TOP);
  return rowTable;
}"
24733,"@AllowedRoles(roles={Roles.Acquisition_Organization_Engineer,Roles.Security_Specialist,Roles.Administrator}) public void updateRequirement(GwtRequirement gwtRequirement) throws SquareException {
  Requirement r=requirementDao.fetch(gwtRequirement.getId());
  r.getRisks().clear();
  r.getArtifacts().clear();
  r.getGoals().clear();
  r.update(gwtRequirement);
  if (gwtRequirement.getRisks().isEmpty()) {
    SquareException se=new SquareException(""String_Node_Str"");
    se.setType(ExceptionType.missingLink);
    throw se;
  }
  if (gwtRequirement.getArtifacts().isEmpty()) {
    SquareException se=new SquareException(""String_Node_Str"");
    se.setType(ExceptionType.missingLink);
    throw se;
  }
  requirementDao.update(r);
}","@AllowedRoles(roles={Roles.Acquisition_Organization_Engineer,Roles.Security_Specialist,Roles.Administrator}) public void updateRequirement(GwtRequirement gwtRequirement) throws SquareException {
  Requirement r=requirementDao.fetch(gwtRequirement.getId());
  r.getRisks().clear();
  r.getGoals().clear();
  r.update(gwtRequirement);
  if (gwtRequirement.getRisks().isEmpty()) {
    SquareException se=new SquareException(""String_Node_Str"");
    se.setType(ExceptionType.missingLink);
    throw se;
  }
  requirementDao.update(r);
}"
24734,"@AllowedRoles(roles={Roles.Contractor,Roles.Security_Specialist,Roles.Administrator}) public int addRequirementToProject(Integer projectId,GwtRequirement gwtRequirement) throws SquareException {
  Project p=projectDao.fetch(projectId);
  Requirement requirement=new Requirement(gwtRequirement);
  requirement.setProject(p);
  if (gwtRequirement.getArtifacts().isEmpty()) {
    SquareException se=new SquareException(""String_Node_Str"");
    se.setType(ExceptionType.missingLink);
    throw se;
  }
  requirementDao.create(requirement);
  p.getRequirements().add(requirement);
  return requirement.getId();
}","@AllowedRoles(roles={Roles.Security_Specialist,Roles.Administrator}) public int addRequirementToProject(Integer projectId,GwtRequirement gwtRequirement) throws SquareException {
  Project p=projectDao.fetch(projectId);
  Requirement requirement=new Requirement(gwtRequirement);
  requirement.setProject(p);
  requirementDao.create(requirement);
  p.getRequirements().add(requirement);
  return requirement.getId();
}"
24735,"public void loadSubGoalsFromProject(){
  IdentifyGoalsAssetsServiceAsync service=GWT.create(IdentifyGoalsAssetsService.class);
  ServiceDefTarget endpoint=(ServiceDefTarget)service;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  service.loadBusinessGoalInfo(getCurrentState().getProjectID(),new AsyncCallback<GwtBusinessGoal>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
    public void onSuccess(    GwtBusinessGoal result){
      businessGoalInfo=result;
      listOfProjectSubGoals=businessGoalInfo.getSubGoals();
    }
  }
);
}","public void loadSubGoalsFromProject(){
  IdentifyGoalsAssetsServiceAsync service=GWT.create(IdentifyGoalsAssetsService.class);
  ServiceDefTarget endpoint=(ServiceDefTarget)service;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  service.loadBusinessGoalInfo(getCurrentState().getProjectID(),new AsyncCallback<GwtBusinessGoal>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
    public void onSuccess(    GwtBusinessGoal result){
      businessGoalInfo=result;
      listOfProjectSubGoals=businessGoalInfo.getSubGoals();
      loadArtifactsFromProject();
    }
  }
);
}"
24736,"public void updateRequirement(int requirementId,GwtRequirement gwtRequirement){
  gwtRequirement.setId(requirementId);
  System.out.println(""String_Node_Str"");
  this.requirementService.updateRequirement(gwtRequirement,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      System.out.println(""String_Node_Str"" + caught);
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,messages.errorUpdatingRequirements());
    }
    public void onSuccess(    Void result){
      currentCommand=CommandTypes.read;
      loadProjectRequirements();
    }
  }
);
}","public void updateRequirement(int requirementId,GwtRequirement gwtRequirement){
  gwtRequirement.setId(requirementId);
  System.out.println(""String_Node_Str"" + gwtRequirement.getStatus());
  this.requirementService.updateRequirement(gwtRequirement,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,messages.errorUpdatingRequirements());
    }
    public void onSuccess(    Void result){
      currentCommand=CommandTypes.read;
      loadProjectRequirements();
    }
  }
);
}"
24737,"public void setBreadCrumb(String viewId,String crumb){
  this.breadCrumbPane.clear();
  Hyperlink chooseCase=new Hyperlink(messages.chooseCase(),ChooseCasePilot.generateNavigationId(ChooseCasePilot.PageId.home));
  HorizontalPanel crumbBar=new HorizontalPanel();
  Label crumbText=new Label(crumb);
  crumbText.setStyleName(""String_Node_Str"");
  chooseCase.setStyleName(""String_Node_Str"");
  if (crumb.trim().length() != 0) {
    Hyperlink chooseStep=new Hyperlink(this.currentState.getProjectName(),ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
    Hyperlink chooseStepCase3=new Hyperlink(this.currentState.getProjectName(),ChooseStepCase3Pilot.generateNavigationId(ChooseStepCase3Pilot.PageId.home));
    chooseStep.setStyleName(""String_Node_Str"");
    crumbBar.add(chooseCase);
    System.out.println(""String_Node_Str"" + chooseCase);
    Hyperlink chooseProject=new Hyperlink(this.currentState.getCaseName(),HomePilot.generateNavigationId(HomePilot.PageId.home));
    chooseProject.setStyleName(""String_Node_Str"");
    if (this.currentState.getProjectName() != ""String_Node_Str"") {
      crumbBar.add(new Label(""String_Node_Str""));
      crumbBar.add(chooseProject);
      crumbBar.add(new Label(""String_Node_Str""));
      if (this.currentState.getCaseID() == 1)       crumbBar.add(chooseStep);
 else       if (this.currentState.getCaseID() == 3)       crumbBar.add(chooseStepCase3);
    }
    crumbBar.add(new Label(""String_Node_Str""));
    crumbBar.add(crumbText);
    crumbBar.setSpacing(4);
  }
  this.breadCrumbPane.add(crumbBar);
}","public void setBreadCrumb(String viewId,String crumb){
  this.breadCrumbPane.clear();
  Hyperlink chooseCase=new Hyperlink(messages.chooseCase(),ChooseCasePilot.generateNavigationId(ChooseCasePilot.PageId.home));
  HorizontalPanel crumbBar=new HorizontalPanel();
  Label crumbText=new Label(crumb);
  crumbText.setStyleName(""String_Node_Str"");
  chooseCase.setStyleName(""String_Node_Str"");
  if (crumb.trim().length() != 0) {
    Hyperlink chooseStep=new Hyperlink(this.currentState.getProjectName(),ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
    Hyperlink chooseStepCase3=new Hyperlink(this.currentState.getProjectName(),ChooseStepCase3Pilot.generateNavigationId(ChooseStepCase3Pilot.PageId.home));
    chooseStep.setStyleName(""String_Node_Str"");
    chooseStepCase3.setStyleName(""String_Node_Str"");
    crumbBar.add(chooseCase);
    System.out.println(""String_Node_Str"" + chooseCase);
    Hyperlink chooseProject=new Hyperlink(this.currentState.getCaseName(),HomePilot.generateNavigationId(HomePilot.PageId.home));
    chooseProject.setStyleName(""String_Node_Str"");
    if (this.currentState.getProjectName() != ""String_Node_Str"") {
      crumbBar.add(new Label(""String_Node_Str""));
      System.out.println(""String_Node_Str"" + this.currentState.getProjectName() + ""String_Node_Str""+ this.currentState.getCaseID());
      crumbBar.add(chooseProject);
      crumbBar.add(new Label(""String_Node_Str""));
      if (this.currentState.getCaseID() == 1)       crumbBar.add(chooseStep);
 else       if (this.currentState.getCaseID() == 3)       crumbBar.add(chooseStepCase3);
    }
    crumbBar.add(new Label(""String_Node_Str""));
    crumbBar.add(crumbText);
    crumbBar.setSpacing(4);
  }
  this.breadCrumbPane.add(crumbBar);
}"
24738,"/** 
 * This methods is used from the entry point class to load the state from the cookies after the user hit refresh. When the user hits refresh in the browser all the client state is lost.
 */
public void loadStateFromCookies(){
  this.userName=Cookies.getCookie(""String_Node_Str"");
  this.fullName=Cookies.getCookie(""String_Node_Str"");
  this.sessionID=Cookies.getCookie(""String_Node_Str"");
  this.currentView=Cookies.getCookie(""String_Node_Str"");
  this.projectName=Cookies.getCookie(""String_Node_Str"");
  this.projectInspectionStatus=Cookies.getCookie(""String_Node_Str"");
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.isSiteAdministrator=Boolean.parseBoolean(Cookies.getCookie(""String_Node_Str""));
  }
 else {
    this.isSiteAdministrator=false;
  }
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.skipTeachStep=Boolean.parseBoolean(Cookies.getCookie(""String_Node_Str""));
  }
 else {
    this.skipTeachStep=false;
  }
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.isAuthenticated=Boolean.parseBoolean(Cookies.getCookie(""String_Node_Str""));
  }
 else {
    this.isAuthenticated=false;
  }
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.mode=GwtModesType.valueOf(Cookies.getCookie(""String_Node_Str""));
  }
 else {
    this.mode=GwtModesType.NoAccess;
  }
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.userProjectRole=ProjectRole.valueOf(Cookies.getCookie(""String_Node_Str""));
  }
 else {
    this.userProjectRole=ProjectRole.None;
  }
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.projectID=Integer.parseInt(Cookies.getCookie(""String_Node_Str""));
  }
 else {
    this.projectID=-1;
  }
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.userId=Integer.parseInt(Cookies.getCookie(""String_Node_Str""));
  }
 else {
    this.userId=-1;
  }
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.totalPrioritizations=Integer.parseInt(Cookies.getCookie(""String_Node_Str""));
  }
 else {
    this.totalPrioritizations=-1;
  }
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.currentRiskID=Integer.parseInt(Cookies.getCookie(""String_Node_Str""));
  }
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.riskCommand=Integer.parseInt(Cookies.getCookie(""String_Node_Str""));
  }
}","/** 
 * This methods is used from the entry point class to load the state from the cookies after the user hit refresh. When the user hits refresh in the browser all the client state is lost.
 */
public void loadStateFromCookies(){
  this.userName=Cookies.getCookie(""String_Node_Str"");
  this.fullName=Cookies.getCookie(""String_Node_Str"");
  this.sessionID=Cookies.getCookie(""String_Node_Str"");
  this.currentView=Cookies.getCookie(""String_Node_Str"");
  this.projectName=Cookies.getCookie(""String_Node_Str"");
  this.caseName=Cookies.getCookie(""String_Node_Str"");
  this.caseID=Integer.valueOf(Cookies.getCookie(""String_Node_Str""));
  this.projectInspectionStatus=Cookies.getCookie(""String_Node_Str"");
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.isSiteAdministrator=Boolean.parseBoolean(Cookies.getCookie(""String_Node_Str""));
  }
 else {
    this.isSiteAdministrator=false;
  }
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.skipTeachStep=Boolean.parseBoolean(Cookies.getCookie(""String_Node_Str""));
  }
 else {
    this.skipTeachStep=false;
  }
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.isAuthenticated=Boolean.parseBoolean(Cookies.getCookie(""String_Node_Str""));
  }
 else {
    this.isAuthenticated=false;
  }
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.mode=GwtModesType.valueOf(Cookies.getCookie(""String_Node_Str""));
  }
 else {
    this.mode=GwtModesType.NoAccess;
  }
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.userProjectRole=ProjectRole.valueOf(Cookies.getCookie(""String_Node_Str""));
  }
 else {
    this.userProjectRole=ProjectRole.None;
  }
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.projectID=Integer.parseInt(Cookies.getCookie(""String_Node_Str""));
  }
 else {
    this.projectID=-1;
  }
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.userId=Integer.parseInt(Cookies.getCookie(""String_Node_Str""));
  }
 else {
    this.userId=-1;
  }
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.totalPrioritizations=Integer.parseInt(Cookies.getCookie(""String_Node_Str""));
  }
 else {
    this.totalPrioritizations=-1;
  }
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.currentRiskID=Integer.parseInt(Cookies.getCookie(""String_Node_Str""));
  }
  if (Cookies.getCookie(""String_Node_Str"") != null) {
    this.riskCommand=Integer.parseInt(Cookies.getCookie(""String_Node_Str""));
  }
}"
24739,"private void loadTradeoffReasons(){
  finalProductSelectionService.getTradeoffReasons(currentProject.getId(),new AsyncCallback<List<GwtTradeoffReason>>(){
    @Override public void onSuccess(    List<GwtTradeoffReason> result){
      tradeoffReasons=result;
      loadRequirementRatings();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.ratingsRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}","private void loadTradeoffReasons(){
  finalProductSelectionService.getTradeoffReasons(currentProject.getId(),new AsyncCallback<List<GwtTradeoffReason>>(){
    @Override public void onSuccess(    List<GwtTradeoffReason> result){
      tradeoffReasons=result;
      final List<GwtSoftwarePackage> temp=softwarePackages.subList(1,softwarePackages.size());
      for (int i=0; i < temp.size(); ++i)       System.out.println(temp.get(i).getName());
      System.out.println(""String_Node_Str"");
      for (int i=0; i < softwarePackages.size(); ++i)       System.out.println(softwarePackages.get(i).getName());
      System.out.println(""String_Node_Str"");
      for (int i=0; i < tradeoffReasons.size(); ++i)       System.out.println(tradeoffReasons.get(i).getTradeoffreason());
      System.out.println(""String_Node_Str"");
      Collections.sort(temp,new Comparator<GwtSoftwarePackage>(){
        public int compare(        GwtSoftwarePackage o1,        GwtSoftwarePackage o2){
          int a, b;
          System.out.println(temp.get(temp.indexOf(o1)).getName() + ""String_Node_Str"");
          System.out.println(tradeoffReasons.get(temp.indexOf(o1)).getPriority());
          a=tradeoffReasons.get(temp.indexOf(o1)).getPriority();
          b=tradeoffReasons.get(temp.indexOf(o2)).getPriority();
          if (a > b)           return -1;
 else           if (a < b)           return 1;
 else           return 0;
        }
      }
);
      softwarePackages=softwarePackages.subList(0,1);
      softwarePackages.addAll(temp);
      loadRequirementRatings();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.ratingsRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}"
24740,"public void drawRateMatrix(){
  matrix.clear();
  matrix.setWidth(""String_Node_Str"");
  matrix.setStyleName(""String_Node_Str"");
  matrix.setCellSpacing(0);
  drawRateMatrixHeaderTechniques();
  drawRateMatrixEvaluationCriteriaColum();
  drawRateMatrixValues();
}","public void drawRateMatrix(){
  matrix.clear();
  matrix.setWidth(""String_Node_Str"");
  matrix.setStyleName(""String_Node_Str"");
  matrix.setCellSpacing(0);
  drawAttributesRequirements();
  drawSoftwarePackages();
  drawRateMatrixValues();
}"
24741,"public boolean validateRequiredFields(){
  disPanel.setOpen(false);
  errorMessage.setText(messages.labelFieldsRequired());
  for (int j=0; j < matrix.getRowCount(); j++) {
    Widget w=matrix.getWidget(j,1);
    String textValue=""String_Node_Str"";
    if (w instanceof TextBox) {
      TextBox field=(TextBox)w;
      textValue=field.getText().trim();
      setValidationStyle(field,textValue);
    }
 else     if (w instanceof TextArea) {
      TextArea field=(TextArea)w;
      textValue=field.getText().trim();
      setValidationStyle(field,textValue);
    }
 else     if (w instanceof ListBox) {
      ListBox field=(ListBox)w;
      textValue=field.getItemText(field.getSelectedIndex()).trim();
      setValidationStyle(field,textValue);
    }
    if (textValue.trim().length() == 0) {
      disPanel.setOpen(true);
      return false;
    }
  }
  if (listOfSubGoalsMappedToRequirement.size() == 0) {
    disPanel.setOpen(true);
    subGoalEmptyLabel.setStyleName(""String_Node_Str"");
    return false;
  }
  for (  GwtRequirement requirement : lisOfRequirements) {
    if (requirement.getTitle().equals(requirementTitleTextBox.getText().trim())) {
      errorMessage.setText(messages.duplicateTitleError());
      disPanel.setOpen(true);
      return false;
    }
  }
  disPanel.setOpen(false);
  return true;
}","public boolean validateRequiredFields(){
  disPanel.setOpen(false);
  errorMessage.setText(messages.labelFieldsRequired());
  for (int j=0; j < matrix.getRowCount(); j++) {
    Widget w=matrix.getWidget(j,1);
    String textValue=""String_Node_Str"";
    if (w instanceof TextBox) {
      TextBox field=(TextBox)w;
      textValue=field.getText().trim();
      setValidationStyle(field,textValue);
    }
 else     if (w instanceof TextArea) {
      TextArea field=(TextArea)w;
      textValue=field.getText().trim();
      setValidationStyle(field,textValue);
    }
 else     if (w instanceof ListBox) {
      ListBox field=(ListBox)w;
      textValue=field.getItemText(field.getSelectedIndex()).trim();
      setValidationStyle(field,textValue);
    }
    if (textValue.trim().length() == 0) {
      disPanel.setOpen(true);
      return false;
    }
  }
  if (listOfSubGoalsMappedToRequirement.size() == 0) {
    disPanel.setOpen(true);
    subGoalEmptyLabel.setStyleName(""String_Node_Str"");
    return false;
  }
  for (  GwtRequirement requirement : lisOfRequirements) {
    if (requirement.getTitle().equals(requirementTitleTextBox.getText().trim()) && (requirement.getId() != currentRequirementId)) {
      errorMessage.setText(messages.duplicateTitleError());
      disPanel.setOpen(true);
      return false;
    }
  }
  disPanel.setOpen(false);
  return true;
}"
24742,"public void loadSubGoalsFromProject(){
  IdentifyGoalsAssetsServiceAsync service=GWT.create(IdentifyGoalsAssetsService.class);
  ServiceDefTarget endpoint=(ServiceDefTarget)service;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  service.loadBusinessGoalInfo(getCurrentState().getProjectID(),new AsyncCallback<GwtBusinessGoal>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
    public void onSuccess(    GwtBusinessGoal result){
      businessGoalInfo=result;
      listOfProjectSubGoals=businessGoalInfo.getSubGoals();
    }
  }
);
}","public void loadSubGoalsFromProject(){
  IdentifyGoalsAssetsServiceAsync service=GWT.create(IdentifyGoalsAssetsService.class);
  ServiceDefTarget endpoint=(ServiceDefTarget)service;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  service.loadBusinessGoalInfo(getCurrentState().getProjectID(),new AsyncCallback<GwtBusinessGoal>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
    public void onSuccess(    GwtBusinessGoal result){
      businessGoalInfo=result;
      listOfProjectSubGoals=businessGoalInfo.getSubGoals();
      loadArtifactsFromProject();
      System.out.println(""String_Node_Str"");
    }
  }
);
}"
24743,"public void loadRequirementForm(){
  this.matrix.getCellFormatter().setWidth(1,0,""String_Node_Str"");
  this.matrix.getCellFormatter().setWidth(1,1,""String_Node_Str"");
  this.matrix.setWidth(""String_Node_Str"");
  this.matrix.setCellPadding(10);
  this.matrix.setStyleName(""String_Node_Str"");
  initializeRequirementFormWidgets();
  if (!CommandTypes.insert.equals(currentCommand)) {
    setRequirementFormValues(currentRequirement);
  }
  this.matrix.getCellFormatter().setAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  if (currentCommand == CommandTypes.read) {
    loadReadOnlyRequirementForm();
  }
 else {
    loadEditableRequirementForm();
  }
  this.matrix.setWidget(1,0,requirementDescriptionLabel);
  this.matrix.setWidget(1,1,getField(requirementDescriptionTextBox));
  this.matrix.setWidget(2,1,createHTMLSubGoalList());
  this.matrix.getCellFormatter().setAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(1,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(2,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(2,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(3,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(3,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
}","public void loadRequirementForm(){
  this.matrix.getCellFormatter().setWidth(1,0,""String_Node_Str"");
  this.matrix.getCellFormatter().setWidth(1,1,""String_Node_Str"");
  this.matrix.setWidth(""String_Node_Str"");
  this.matrix.setCellPadding(10);
  this.matrix.setStyleName(""String_Node_Str"");
  initializeRequirementFormWidgets();
  if (!CommandTypes.insert.equals(currentCommand)) {
    setRequirementFormValues(currentRequirement);
  }
  this.matrix.getCellFormatter().setAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  if (currentCommand == CommandTypes.read) {
    loadReadOnlyRequirementForm();
  }
 else {
    loadEditableRequirementForm();
  }
  this.matrix.setWidget(1,0,requirementDescriptionLabel);
  this.matrix.setWidget(1,1,getField(requirementDescriptionTextBox));
  this.matrix.setWidget(2,1,createHTMLSubGoalList());
  this.matrix.getCellFormatter().setAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(1,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(2,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(2,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
}"
24744,"public void loadReadOnlyRequirementForm(){
  this.matrix.setWidget(0,0,getField(requirementTitleTextBox));
  this.matrix.getCellFormatter().setAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setStyleName(0,0,""String_Node_Str"");
  ((FlexCellFormatter)this.matrix.getCellFormatter()).setColSpan(0,0,2);
  this.matrix.setWidget(2,0,subGoalLabel);
  approveButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      System.out.println(""String_Node_Str"");
      boolean response=Window.confirm(messages.confirmApprove() + ""String_Node_Str"");
      if (response) {
        System.out.println(""String_Node_Str"");
        GwtRequirement req=new GwtRequirement();
        req.setId(currentRequirementId);
        System.out.println(""String_Node_Str"" + currentRequirementId);
        changeStatusToApproveRequirement(req);
      }
    }
  }
);
  requestRevisionButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      System.out.println(""String_Node_Str"");
      boolean response=Window.confirm(messages.confirmRequestRevision() + ""String_Node_Str"");
      if (response) {
        System.out.println(""String_Node_Str"");
        GwtRequirement req=new GwtRequirement();
        req.setId(currentRequirementId);
        changeStatusToRequestRevisionRequirement(req);
      }
    }
  }
);
  if (currentState.getMode() == GwtModesType.ReadWrite) {
    FlexTable bottonControlPanel=new FlexTable();
    bottonControlPanel.setWidth(""String_Node_Str"");
    if (currentRequirement.getStatus().equals(""String_Node_Str"")) {
      bottonControlPanel.setWidget(0,0,editRequirement);
      bottonControlPanel.setWidget(1,0,deleteRequirement);
      bottonControlPanel.setWidget(0,2,approveButton);
    }
    if (currentRequirement.getStatus().equals(""String_Node_Str"")) {
      bottonControlPanel.setWidget(0,1,requestRevisionButton);
      bottonControlPanel.setWidget(0,2,approveButton);
    }
    bottonControlPanel.setWidget(2,0,new Label(""String_Node_Str""));
    bottonControlPanel.setWidget(3,0,gotToSummary);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(1,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(2,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(3,0,HasHorizontalAlignment.ALIGN_LEFT);
    this.getContent().add(bottonControlPanel);
  }
  this.editRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      currentCommand=CommandTypes.update;
      PaneInitialization();
    }
  }
);
  this.deleteRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      removeRequirement(currentRequirementId);
    }
  }
);
  this.gotToSummary.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      History.newItem(ReviewAndFinalizeRequirementsPilot.generateNavigationId(ReviewAndFinalizeRequirementsPilot.PageId.home));
    }
  }
);
}","public void loadReadOnlyRequirementForm(){
  this.matrix.setWidget(0,0,getField(requirementTitleTextBox));
  this.matrix.getCellFormatter().setAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setStyleName(0,0,""String_Node_Str"");
  ((FlexCellFormatter)this.matrix.getCellFormatter()).setColSpan(0,0,2);
  this.matrix.setWidget(2,0,subGoalLabel);
  approveButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      boolean response=Window.confirm(messages.confirmApprove() + ""String_Node_Str"");
      if (response) {
        GwtRequirement req=new GwtRequirement();
        req.setId(currentRequirementId);
        System.out.println(""String_Node_Str"" + currentRequirementId);
        changeStatusToApproveRequirement(req);
      }
    }
  }
);
  requestRevisionButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      boolean response=Window.confirm(messages.confirmRequestRevision() + ""String_Node_Str"");
      if (response) {
        GwtRequirement req=new GwtRequirement();
        req.setId(currentRequirementId);
        changeStatusToRequestRevisionRequirement(req);
      }
    }
  }
);
  if (currentState.getMode() == GwtModesType.ReadWrite) {
    FlexTable bottonControlPanel=new FlexTable();
    bottonControlPanel.setWidth(""String_Node_Str"");
    if (currentRequirement.getStatus().equals(""String_Node_Str"")) {
      bottonControlPanel.setWidget(0,0,editRequirement);
      bottonControlPanel.setWidget(1,0,deleteRequirement);
      bottonControlPanel.setWidget(0,2,approveButton);
    }
    if (currentRequirement.getStatus().equals(""String_Node_Str"")) {
      bottonControlPanel.setWidget(0,1,requestRevisionButton);
      bottonControlPanel.setWidget(0,2,approveButton);
    }
    bottonControlPanel.setWidget(2,0,new Label(""String_Node_Str""));
    bottonControlPanel.setWidget(3,0,gotToSummary);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(1,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(2,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(3,0,HasHorizontalAlignment.ALIGN_LEFT);
    this.getContent().add(bottonControlPanel);
  }
  this.editRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      currentCommand=CommandTypes.update;
      PaneInitialization();
    }
  }
);
  this.deleteRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      removeRequirement(currentRequirementId);
    }
  }
);
  this.gotToSummary.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      History.newItem(ReviewAndFinalizeRequirementsPilot.generateNavigationId(ReviewAndFinalizeRequirementsPilot.PageId.home));
    }
  }
);
}"
24745,"public ReviewAndFinalizeRequirementsDetailPane(final State stateInfo){
  super(stateInfo);
  currentProject=new GwtProject();
  currentProject.setId(this.getCurrentState().getProjectID());
  currentRequirementId=currentState.getCurrentRisk();
  currentCommand=getCurrentCommand();
  this.showLoadingStatusBar();
  loadSubGoalsFromProject();
}","public ReviewAndFinalizeRequirementsDetailPane(final State stateInfo){
  super(stateInfo);
  currentProject=new GwtProject();
  currentProject.setId(this.getCurrentState().getProjectID());
  currentRequirementId=currentState.getCurrentRisk();
  currentCommand=getCurrentCommand();
  this.showLoadingStatusBar();
  System.out.println(""String_Node_Str"");
  loadSubGoalsFromProject();
}"
24746,"public Widget getDataRow(int rowCount,GwtRequirement req){
  FlexTable rowTable=new FlexTable();
  rowTable.setStyleName(""String_Node_Str"");
  rowTable.setCellSpacing(4);
  rowTable.setSize(""String_Node_Str"",""String_Node_Str"");
  Label reqTitleLabel=new Label(req.getTitle());
  Label reqDescriptionLabel=new Label(req.getDescription());
  Label reqStatusLabel=new Label(req.getStatus());
  final SummaryElementHyperLinkElement viewDetailLink=new SummaryElementHyperLinkElement(req.getId(),""String_Node_Str"");
  if (this.getCurrentState().getMode().equals(GwtModesType.ReadWrite)) {
    HorizontalPanel links=new HorizontalPanel();
    links.setStyleName(""String_Node_Str"");
    links.add(viewDetailLink);
    rowTable.setWidget(0,3,links);
  }
 else {
    rowTable.setWidget(0,2,new Label(""String_Node_Str""));
  }
  viewDetailLink.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      currentState.setCurrentRisk(viewDetailLink.getRequirementId());
      currentState.setRiskCommand(1);
      History.newItem(ReviewAndFinalizeRequirementsPilot.generateNavigationId(ReviewAndFinalizeRequirementsPilot.PageId.requirementDetail));
    }
  }
);
  int addedItemIndex=getIndexById(modifyRequirementId);
  if (addedItemIndex != -1 && (addedItemIndex + 1) == rowCount) {
    yellowFadeHandler.add(rowTable);
    modifyRequirementId=-1;
  }
  rowTable.setWidget(0,0,reqTitleLabel);
  rowTable.setWidget(0,1,reqDescriptionLabel);
  rowTable.setWidget(0,2,reqStatusLabel);
  rowTable.getCellFormatter().setWidth(0,0,""String_Node_Str"");
  rowTable.getCellFormatter().setWidth(0,1,""String_Node_Str"");
  rowTable.getCellFormatter().setWidth(0,2,""String_Node_Str"");
  rowTable.getCellFormatter().setWidth(0,3,""String_Node_Str"");
  rowTable.getCellFormatter().setHorizontalAlignment(0,2,HasHorizontalAlignment.ALIGN_CENTER);
  rowTable.getCellFormatter().setVerticalAlignment(0,0,HasVerticalAlignment.ALIGN_TOP);
  rowTable.getCellFormatter().setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
  rowTable.getCellFormatter().setHorizontalAlignment(0,1,HasHorizontalAlignment.ALIGN_LEFT);
  rowTable.getCellFormatter().setHorizontalAlignment(0,2,HasHorizontalAlignment.ALIGN_CENTER);
  rowTable.getCellFormatter().setVerticalAlignment(0,0,HasVerticalAlignment.ALIGN_TOP);
  rowTable.getCellFormatter().setVerticalAlignment(0,1,HasVerticalAlignment.ALIGN_TOP);
  rowTable.getCellFormatter().setVerticalAlignment(0,2,HasVerticalAlignment.ALIGN_TOP);
  return rowTable;
}","public Widget getDataRow(int rowCount,GwtRequirement req){
  FlexTable rowTable=new FlexTable();
  rowTable.setStyleName(""String_Node_Str"");
  rowTable.setCellSpacing(4);
  rowTable.setSize(""String_Node_Str"",""String_Node_Str"");
  Label reqTitleLabel=new Label(req.getTitle());
  Label reqDescriptionLabel=new Label(req.getDescription());
  Label reqStatusLabel=new Label(req.getStatus());
  final SummaryElementHyperLinkElement viewDetailLink=new SummaryElementHyperLinkElement(req.getId(),""String_Node_Str"");
  if (this.getCurrentState().getMode().equals(GwtModesType.ReadOnly) || this.getCurrentState().getMode().equals(GwtModesType.ReadWrite)) {
    HorizontalPanel links=new HorizontalPanel();
    links.setStyleName(""String_Node_Str"");
    links.add(viewDetailLink);
    rowTable.setWidget(0,3,links);
  }
 else {
    rowTable.setWidget(0,2,new Label(""String_Node_Str""));
  }
  viewDetailLink.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      currentState.setCurrentRisk(viewDetailLink.getRequirementId());
      currentState.setRiskCommand(1);
      History.newItem(ReviewAndFinalizeRequirementsPilot.generateNavigationId(ReviewAndFinalizeRequirementsPilot.PageId.requirementDetail));
    }
  }
);
  int addedItemIndex=getIndexById(modifyRequirementId);
  if (addedItemIndex != -1 && (addedItemIndex + 1) == rowCount) {
    yellowFadeHandler.add(rowTable);
    modifyRequirementId=-1;
  }
  rowTable.setWidget(0,0,reqTitleLabel);
  rowTable.setWidget(0,1,reqDescriptionLabel);
  rowTable.setWidget(0,2,reqStatusLabel);
  rowTable.getCellFormatter().setWidth(0,0,""String_Node_Str"");
  rowTable.getCellFormatter().setWidth(0,1,""String_Node_Str"");
  rowTable.getCellFormatter().setWidth(0,2,""String_Node_Str"");
  rowTable.getCellFormatter().setWidth(0,3,""String_Node_Str"");
  rowTable.getCellFormatter().setHorizontalAlignment(0,2,HasHorizontalAlignment.ALIGN_CENTER);
  rowTable.getCellFormatter().setVerticalAlignment(0,0,HasVerticalAlignment.ALIGN_TOP);
  rowTable.getCellFormatter().setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
  rowTable.getCellFormatter().setHorizontalAlignment(0,1,HasHorizontalAlignment.ALIGN_LEFT);
  rowTable.getCellFormatter().setHorizontalAlignment(0,2,HasHorizontalAlignment.ALIGN_CENTER);
  rowTable.getCellFormatter().setVerticalAlignment(0,0,HasVerticalAlignment.ALIGN_TOP);
  rowTable.getCellFormatter().setVerticalAlignment(0,1,HasVerticalAlignment.ALIGN_TOP);
  rowTable.getCellFormatter().setVerticalAlignment(0,2,HasVerticalAlignment.ALIGN_TOP);
  return rowTable;
}"
24747,"public Widget navigateTo(String pageId,State currentStateInformation){
  String step=HistoryManager.ViewId.reviewAndFinalizeRequirements;
  if (currentStateInformation.getSkipTeachSetp() && pageId.equals(PageId.home)) {
    pageId=PageId.start;
  }
  if (pageId.equals(PageId.home)) {
    return new TeachStepPane(step,generateNavigationId(PageId.start));
  }
 else   if (pageId.equals(PageId.start)) {
    return new ReviewAndFinalizeRequirementsPane(currentStateInformation);
  }
 else   if (pageId.equals(PageId.requirementDetail)) {
    return new ReviewAndFinalizeRequirementsDetailPane(currentStateInformation);
  }
  return null;
}","public Widget navigateTo(String pageId,State currentStateInformation){
  String step=HistoryManager.ViewId.reviewAndFinalizeRequirements;
  if (currentStateInformation.getSkipTeachSetp() && pageId.equals(PageId.home)) {
    pageId=PageId.start;
  }
  if (pageId.equals(PageId.home)) {
    return new TeachStepPane(step,generateNavigationId(PageId.start));
  }
 else   if (pageId.equals(PageId.start)) {
    return new ReviewAndFinalizeRequirementsPane(currentStateInformation);
  }
 else   if (pageId.equals(PageId.requirementDetail)) {
    System.out.println(""String_Node_Str"");
    return new ReviewAndFinalizeRequirementsDetailPane(currentStateInformation);
  }
  return null;
}"
24748,"public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}","public void determineAccessRights(String page,State currentState){
  System.out.println(""String_Node_Str"");
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}"
24749,"@Override public String getBreadCrumb(){
  final BreadCrumbMessages messages=(BreadCrumbMessages)GWT.create(BreadCrumbMessages.class);
  return messages.reviewAndFinalizeRequirements();
}","@Override public String getBreadCrumb(){
  System.out.println(""String_Node_Str"");
  final BreadCrumbMessages messages=(BreadCrumbMessages)GWT.create(BreadCrumbMessages.class);
  return messages.reviewAndFinalizeRequirements();
}"
24750,"public void update(GwtRequirement gwtRequirement){
  this.title=gwtRequirement.getTitle();
  this.description=gwtRequirement.getDescription();
  this.privacy=gwtRequirement.isPrivacy();
  this.security=gwtRequirement.isSecurity();
  this.priority=gwtRequirement.getPriority();
  this.status=gwtRequirement.getStatus();
  for (  GwtRisk r : gwtRequirement.getRisks()) {
    this.getRisks().add(new Risk(r));
  }
  for (  GwtArtifact a : gwtRequirement.getArtifacts()) {
    this.getArtifacts().add(new Artifact(a));
  }
  for (  GwtCategory a : gwtRequirement.getCategories()) {
    this.getCategories().add(new Category(a));
  }
  for (  GwtSubGoal a : gwtRequirement.getSubGoals()) {
    this.getGoals().add(new Goal(a));
  }
  if (gwtRequirement.getProjectID() > 0) {
    this.project=new Project(gwtRequirement.getProjectID());
  }
}","public void update(GwtRequirement gwtRequirement){
  this.title=gwtRequirement.getTitle();
  this.description=gwtRequirement.getDescription();
  this.privacy=gwtRequirement.isPrivacy();
  this.security=gwtRequirement.isSecurity();
  this.priority=gwtRequirement.getPriority();
  gwtRequirement.setStatus(this.status);
  this.status=gwtRequirement.getStatus();
  for (  GwtRisk r : gwtRequirement.getRisks()) {
    this.getRisks().add(new Risk(r));
  }
  for (  GwtArtifact a : gwtRequirement.getArtifacts()) {
    this.getArtifacts().add(new Artifact(a));
  }
  for (  GwtCategory a : gwtRequirement.getCategories()) {
    this.getCategories().add(new Category(a));
  }
  for (  GwtSubGoal a : gwtRequirement.getSubGoals()) {
    this.getGoals().add(new Goal(a));
  }
  if (gwtRequirement.getProjectID() > 0) {
    this.project=new Project(gwtRequirement.getProjectID());
  }
}"
24751,"private void addDoneButton(){
  FlexTable buttonPanel=new FlexTable();
  Button done=new Button(messages.done());
  done.addStyleName(""String_Node_Str"");
  done.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      History.newItem(ChooseStepCase3Pilot.generateNavigationId(ChooseStepCase3Pilot.PageId.home));
    }
  }
);
  buttonPanel.setWidget(0,0,new Label(""String_Node_Str""));
  buttonPanel.setWidget(0,1,new Label(""String_Node_Str""));
  buttonPanel.setWidget(1,1,new Label(""String_Node_Str""));
  buttonPanel.setWidget(2,1,new Label(""String_Node_Str""));
  buttonPanel.setWidget(2,2,done);
  buttonPanel.setWidth(""String_Node_Str"");
  done.setWidth(""String_Node_Str"");
  buttonPanel.getCellFormatter().setHorizontalAlignment(2,2,HasHorizontalAlignment.ALIGN_RIGHT);
  this.vPaneCotsData.add(buttonPanel);
}","private void addDoneButton(){
  FlexTable buttonPanel=new FlexTable();
  Button done=new Button(messages.done());
  done.addStyleName(""String_Node_Str"");
  done.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      History.newItem(ChooseStepCase3Pilot.generateNavigationId(ChooseStepCase3Pilot.PageId.home));
    }
  }
);
  buttonPanel.setWidget(0,0,new Label(""String_Node_Str""));
  buttonPanel.setWidget(1,0,done);
  buttonPanel.setWidth(""String_Node_Str"");
  buttonPanel.getCellFormatter().setHorizontalAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT);
  this.getContent().add(buttonPanel);
}"
24752,"/** 
 * Navigation Buttons to browse other pages
 * @param layout 
 * @return a table containing navigation buttons
 */
private FlexTable NavigationButtons(VerticalPanel layout){
  FlexTable navigatorLayout=new FlexTable();
  FlexCellFormatter formatterNavigator=navigatorLayout.getFlexCellFormatter();
  navigatorLayout.setWidth(""String_Node_Str"");
  Button subGoalButton=new Button(messages.subGoalButton());
  Button summaryButton=new Button(messages.done());
  subGoalButton.setWidth(""String_Node_Str"");
  summaryButton.setWidth(""String_Node_Str"");
  navigatorLayout.setWidget(0,0,subGoalButton);
  navigatorLayout.setWidget(0,1,summaryButton);
  formatterNavigator.setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
  formatterNavigator.setHorizontalAlignment(0,1,HasHorizontalAlignment.ALIGN_RIGHT);
  subGoalButton.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (updating == true) {
        Window.alert(""String_Node_Str"");
        return;
      }
      if (commandClass != null) {
        if (commandClass.getupdatedParentBusinessGoal() != null) {
          businessGoal=commandClass.getupdatedParentBusinessGoal();
        }
      }
      savePriorities();
      checkAssetGoalTraceability();
      if (duplicatePriorities || traceabilityViolation) {
        return;
      }
      History.newItem(AssetsAndGoalsPilot.generateNavigationId(AssetsAndGoalsPilot.PageId.addSubGoalsAndAssets));
    }
  }
);
  summaryButton.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (commandClass != null) {
        if (commandClass.getupdatedParentBusinessGoal() != null) {
          businessGoal=commandClass.getupdatedParentBusinessGoal();
        }
      }
      savePriorities();
      checkAssetGoalTraceability();
      if (duplicatePriorities || traceabilityViolation) {
        return;
      }
      History.newItem(ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
    }
  }
);
  return navigatorLayout;
}","/** 
 * Navigation Buttons to browse other pages
 * @param layout 
 * @return a table containing navigation buttons
 */
private FlexTable NavigationButtons(VerticalPanel layout){
  FlexTable navigatorLayout=new FlexTable();
  FlexCellFormatter formatterNavigator=navigatorLayout.getFlexCellFormatter();
  navigatorLayout.setWidth(""String_Node_Str"");
  Button subGoalButton=new Button(messages.subGoalButton());
  Button summaryButton=new Button(messages.done());
  subGoalButton.setWidth(""String_Node_Str"");
  summaryButton.setWidth(""String_Node_Str"");
  navigatorLayout.setWidget(0,0,subGoalButton);
  navigatorLayout.setWidget(0,1,summaryButton);
  formatterNavigator.setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
  formatterNavigator.setHorizontalAlignment(0,1,HasHorizontalAlignment.ALIGN_RIGHT);
  subGoalButton.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (updating == true) {
        Window.alert(""String_Node_Str"");
        return;
      }
      if (commandClass != null) {
        if (commandClass.getupdatedParentBusinessGoal() != null) {
          businessGoal=commandClass.getupdatedParentBusinessGoal();
        }
      }
      savePriorities();
      checkAssetGoalTraceability();
      if (duplicatePriorities || traceabilityViolation) {
        return;
      }
      History.newItem(AssetsAndGoalsPilot.generateNavigationId(AssetsAndGoalsPilot.PageId.addSubGoalsAndAssets));
    }
  }
);
  final int caseid=this.getCurrentState().getCaseID();
  summaryButton.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (commandClass != null) {
        if (commandClass.getupdatedParentBusinessGoal() != null) {
          businessGoal=commandClass.getupdatedParentBusinessGoal();
        }
      }
      savePriorities();
      checkAssetGoalTraceability();
      if (duplicatePriorities || traceabilityViolation) {
        return;
      }
      if (caseid == 1)       History.newItem(ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
      if (caseid == 3)       History.newItem(ChooseStepCase3Pilot.generateNavigationId(ChooseStepCase3Pilot.PageId.home));
    }
  }
);
  return navigatorLayout;
}"
24753,"private void setPackagePriority(final int packageID,final int priority){
  this.performTradeoffService.setPriority(currentProject.getId(),packageID,priority,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.rateAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
}
}
);
}","private void setPackagePriority(final int packageID,final int priority){
  System.out.println(""String_Node_Str"" + currentProject.getId() + ""String_Node_Str""+ packageID+ ""String_Node_Str""+ priority);
  this.performTradeoffService.setPriority(currentProject.getId(),packageID,priority,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.rateAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
}
}
);
}"
24754,"public void drawSoftwarePackages(){
  FlexCellFormatter formatter=this.matrix.getFlexCellFormatter();
  for (int j=0; j < softwarePackages.size(); j++) {
    Label packageLabel=new Label(softwarePackages.get(j).getName());
    final DecoratedPopupPanel simplePopup=new DecoratedPopupPanel(true);
    simplePopup.setWidth(""String_Node_Str"");
    simplePopup.setWidget(new HTML(softwarePackages.get(j).getDescription()));
    packageLabel.addMouseOverHandler(new MouseOverHandler(){
      public void onMouseOver(      MouseOverEvent event){
        Widget source=(Widget)event.getSource();
        int left=source.getAbsoluteLeft() + 40;
        int top=source.getAbsoluteTop() + 20;
        simplePopup.setPopupPosition(left,top);
        simplePopup.show();
      }
    }
);
    packageLabel.addMouseOutHandler(new MouseOutHandler(){
      public void onMouseOut(      MouseOutEvent event){
        simplePopup.hide();
      }
    }
);
    matrix.setWidget(j + 1,0,packageLabel);
    final SummaryElementHyperLinkElement tradeoffReasonLink=new SummaryElementHyperLinkElement(softwarePackages.get(j).getId(),""String_Node_Str"");
    final int index=j;
    tradeoffReasonLink.addClickHandler(new ClickHandler(){
      public void onClick(      ClickEvent event){
        editTradeoffReasonDialog=new EditTradeoffReasonDialog(tradeoffReasons.get(index),tradeoffReasons,PerformTradeoffAnalysisPane.this);
        editTradeoffReasonDialog.center();
        editTradeoffReasonDialog.setModal(true);
        editTradeoffReasonDialog.show();
      }
    }
);
    final ListBox priorityListBox=new ListBox();
    for (int k=0; k < softwarePackages.size(); k++)     priorityListBox.addItem(k + ""String_Node_Str"",k + 1 + ""String_Node_Str"");
    if (tradeoffReasons.get(j).getPriority().intValue() != -1) {
      priorityListBox.setSelectedIndex(tradeoffReasons.get(j).getPriority().intValue());
    }
 else {
      System.out.println(""String_Node_Str"");
      priorityListBox.setSelectedIndex(0);
    }
    priorityListBox.addChangeHandler(new ChangeHandler(){
      public void onChange(      ChangeEvent event){
        int valueSelected=priorityListBox.getSelectedIndex();
        if (valueSelected == 0) {
          valueSelected=-1;
        }
        System.out.println(""String_Node_Str"" + ""String_Node_Str"" + index + ""String_Node_Str""+ valueSelected);
        setPackagePriority(index + 1,valueSelected);
        tradeoffReasons.get(index).setPriority(valueSelected);
        System.out.println(""String_Node_Str"");
      }
    }
);
    if (j >= 1) {
      matrix.setWidget(j + 1,attributes.size() + listOfRequirements.size() + 2,tradeoffReasonLink);
      formatter.setHorizontalAlignment(j + 1,attributes.size() + listOfRequirements.size() + 2,HasHorizontalAlignment.ALIGN_RIGHT);
      formatter.setStyleName(j + 1,attributes.size() + listOfRequirements.size() + 2,""String_Node_Str"");
      matrix.setWidget(j + 1,attributes.size() + listOfRequirements.size() + 3,priorityListBox);
      formatter.setHorizontalAlignment(j + 1,attributes.size() + listOfRequirements.size() + 3,HasHorizontalAlignment.ALIGN_RIGHT);
      formatter.setStyleName(j + 1,attributes.size() + listOfRequirements.size() + 3,""String_Node_Str"");
    }
    formatter.setHorizontalAlignment(j + 1,0,HasHorizontalAlignment.ALIGN_RIGHT);
    formatter.setStyleName(j + 1,0,""String_Node_Str"");
  }
}","public void drawSoftwarePackages(){
  FlexCellFormatter formatter=this.matrix.getFlexCellFormatter();
  for (int j=0; j < softwarePackages.size(); j++) {
    Label packageLabel=new Label(softwarePackages.get(j).getName());
    final DecoratedPopupPanel simplePopup=new DecoratedPopupPanel(true);
    simplePopup.setWidth(""String_Node_Str"");
    simplePopup.setWidget(new HTML(softwarePackages.get(j).getDescription()));
    packageLabel.addMouseOverHandler(new MouseOverHandler(){
      public void onMouseOver(      MouseOverEvent event){
        Widget source=(Widget)event.getSource();
        int left=source.getAbsoluteLeft() + 40;
        int top=source.getAbsoluteTop() + 20;
        simplePopup.setPopupPosition(left,top);
        simplePopup.show();
      }
    }
);
    packageLabel.addMouseOutHandler(new MouseOutHandler(){
      public void onMouseOut(      MouseOutEvent event){
        simplePopup.hide();
      }
    }
);
    matrix.setWidget(j + 1,0,packageLabel);
    final SummaryElementHyperLinkElement tradeoffReasonLink=new SummaryElementHyperLinkElement(softwarePackages.get(j).getId(),""String_Node_Str"");
    final int index=j;
    final int packageid=softwarePackages.get(j).getId();
    tradeoffReasonLink.addClickHandler(new ClickHandler(){
      public void onClick(      ClickEvent event){
        editTradeoffReasonDialog=new EditTradeoffReasonDialog(tradeoffReasons.get(index),tradeoffReasons,PerformTradeoffAnalysisPane.this);
        editTradeoffReasonDialog.center();
        editTradeoffReasonDialog.setModal(true);
        editTradeoffReasonDialog.show();
      }
    }
);
    final ListBox priorityListBox=new ListBox();
    for (int k=0; k < softwarePackages.size(); k++)     priorityListBox.addItem(k + ""String_Node_Str"",k + 1 + ""String_Node_Str"");
    if (tradeoffReasons.get(j).getPriority().intValue() != -1) {
      priorityListBox.setSelectedIndex(tradeoffReasons.get(j).getPriority().intValue());
    }
 else {
      System.out.println(""String_Node_Str"");
      priorityListBox.setSelectedIndex(0);
    }
    priorityListBox.addChangeHandler(new ChangeHandler(){
      public void onChange(      ChangeEvent event){
        int valueSelected=priorityListBox.getSelectedIndex();
        if (valueSelected == 0) {
          valueSelected=-1;
        }
        System.out.println(""String_Node_Str"" + ""String_Node_Str"" + packageid + ""String_Node_Str""+ valueSelected);
        setPackagePriority(packageid,valueSelected);
        tradeoffReasons.get(index).setPriority(valueSelected);
        System.out.println(""String_Node_Str"");
      }
    }
);
    if (j >= 1) {
      matrix.setWidget(j + 1,attributes.size() + listOfRequirements.size() + 2,tradeoffReasonLink);
      formatter.setHorizontalAlignment(j + 1,attributes.size() + listOfRequirements.size() + 2,HasHorizontalAlignment.ALIGN_RIGHT);
      formatter.setStyleName(j + 1,attributes.size() + listOfRequirements.size() + 2,""String_Node_Str"");
      matrix.setWidget(j + 1,attributes.size() + listOfRequirements.size() + 3,priorityListBox);
      formatter.setHorizontalAlignment(j + 1,attributes.size() + listOfRequirements.size() + 3,HasHorizontalAlignment.ALIGN_RIGHT);
      formatter.setStyleName(j + 1,attributes.size() + listOfRequirements.size() + 3,""String_Node_Str"");
    }
    formatter.setHorizontalAlignment(j + 1,0,HasHorizontalAlignment.ALIGN_RIGHT);
    formatter.setStyleName(j + 1,0,""String_Node_Str"");
  }
}"
24755,"public void determineAccessRights(String page,State currentState){
  if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator()) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}"
24756,"public void determineAccessRights(String page,State currentState){
  if (currentState.getUserProjectRole() == ProjectRole.Lead_Requirements_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}"
24757,"public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator()) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.NoAccess);
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator()) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.NoAccess);
  }
}"
24758,"private void addNavigationLinks(State currentState){
  String role=""String_Node_Str"";
  if (!currentState.isAuthenticated()) {
    return;
  }
  if (!currentState.getUserProjectRole().equals(ProjectRole.None)) {
    role=""String_Node_Str"" + currentState.getUserProjectRole().getLabel() + ""String_Node_Str"";
  }
  Label userName=new Label(currentState.getUserName() + role);
  this.linksPanel.add(userName);
  this.linksPanel.add(new Label(messages.delimiter()));
  if (currentState.isSiteAdministrator()) {
    Hyperlink adminLink=new Hyperlink(messages.adminLinkText(),ManageSitePilot.generateNavigationId(ManageSitePilot.PageId.home));
    this.linksPanel.add(adminLink);
    this.linksPanel.add(new Label(messages.delimiter()));
  }
  Hyperlink preference=new Hyperlink(messages.linkTitle2(),ChooseCasePilot.generateNavigationId(ChooseCasePilot.PageId.preferences));
  this.linksPanel.add(preference);
  this.linksPanel.add(new Label(messages.delimiter()));
  HTML helpLink=new HTML(""String_Node_Str"" + properties.getHelpLink() + ""String_Node_Str"");
  this.linksPanel.add(helpLink);
  this.linksPanel.add(new Label(messages.delimiter()));
  Hyperlink signOut=new Hyperlink(""String_Node_Str"",ChooseCasePilot.generateNavigationId(ChooseCasePilot.PageId.logout));
  this.linksPanel.add(signOut);
  signOut.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      logInService.logOut(new AsyncCallback<Void>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        Void result){
        }
      }
);
    }
  }
);
  this.linksPanel.setSpacing(3);
  this.linksPanel.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_RIGHT);
  this.linksPanel.setVerticalAlignment(HasVerticalAlignment.ALIGN_TOP);
}","private void addNavigationLinks(State currentState){
  String role=""String_Node_Str"";
  if (!currentState.isAuthenticated()) {
    return;
  }
  if (!currentState.getUserProjectRole().equals(ProjectRole.None)) {
    role=""String_Node_Str"" + currentState.getUserProjectRole().getLabel() + ""String_Node_Str"";
  }
  Label userName=new Label(currentState.getUserName() + role);
  this.linksPanel.add(userName);
  this.linksPanel.add(new Label(messages.delimiter()));
  if (currentState.isSiteAdministrator() || currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
{
    Hyperlink adminLink=new Hyperlink(messages.adminLinkText(),ManageSitePilot.generateNavigationId(ManageSitePilot.PageId.home));
    this.linksPanel.add(adminLink);
    this.linksPanel.add(new Label(messages.delimiter()));
  }
  Hyperlink preference=new Hyperlink(messages.linkTitle2(),ChooseCasePilot.generateNavigationId(ChooseCasePilot.PageId.preferences));
  this.linksPanel.add(preference);
  this.linksPanel.add(new Label(messages.delimiter()));
  HTML helpLink=new HTML(""String_Node_Str"" + properties.getHelpLink() + ""String_Node_Str"");
  this.linksPanel.add(helpLink);
  this.linksPanel.add(new Label(messages.delimiter()));
  Hyperlink signOut=new Hyperlink(""String_Node_Str"",ChooseCasePilot.generateNavigationId(ChooseCasePilot.PageId.logout));
  this.linksPanel.add(signOut);
  signOut.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      logInService.logOut(new AsyncCallback<Void>(){
        @Override public void onFailure(        Throwable caught){
        }
        @Override public void onSuccess(        Void result){
        }
      }
);
    }
  }
);
  this.linksPanel.setSpacing(3);
  this.linksPanel.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_RIGHT);
  this.linksPanel.setVerticalAlignment(HasVerticalAlignment.ALIGN_TOP);
}"
24759,"public void onClick(ClickEvent event){
  artifactDialog=new ArtifactDialogBox(riksPane,listOfProjectArtifacts,listOfArtifactsMappedToRequirement,messages.associateArtifacts());
  artifactDialog.setModal(true);
  artifactDialog.center();
  artifactDialog.show();
  currentDialog=""String_Node_Str"";
}","public void onClick(ClickEvent event){
  subGoalDialog=new SubGoalDialogBox(riksPane,listOfProjectSubGoals,listOfSubGoalsMappedToRequirement);
  subGoalDialog.setModal(true);
  subGoalDialog.center();
  currentDialog=""String_Node_Str"";
  subGoalDialog.show();
}"
24760,"public void loadSubGoalsFromProject(){
  IdentifyGoalsAssetsServiceAsync service=GWT.create(IdentifyGoalsAssetsService.class);
  ServiceDefTarget endpoint=(ServiceDefTarget)service;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  service.loadBusinessGoalInfo(getCurrentState().getProjectID(),new AsyncCallback<GwtBusinessGoal>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
    public void onSuccess(    GwtBusinessGoal result){
      businessGoalInfo=result;
      listOfProjectSubGoals=businessGoalInfo.getSubGoals();
      loadArtifactsFromProject();
    }
  }
);
}","public void loadSubGoalsFromProject(){
  IdentifyGoalsAssetsServiceAsync service=GWT.create(IdentifyGoalsAssetsService.class);
  ServiceDefTarget endpoint=(ServiceDefTarget)service;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  service.loadBusinessGoalInfo(getCurrentState().getProjectID(),new AsyncCallback<GwtBusinessGoal>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
    public void onSuccess(    GwtBusinessGoal result){
      businessGoalInfo=result;
      listOfProjectSubGoals=businessGoalInfo.getSubGoals();
    }
  }
);
}"
24761,"public void loadProjectRequirements(){
  ServiceDefTarget endpoint=(ServiceDefTarget)requirementService;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  this.requirementService.getRequirementsFromProject(this.currentProject.getId(),new AsyncCallback<List<GwtRequirement>>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,messages.errorGettingRequirements());
    }
    public void onSuccess(    List<GwtRequirement> result){
      lisOfRequirements=result;
      currentRequirement=getRequirementFromListByID(currentRequirementId);
      if (currentRequirement != null) {
        listOfSubGoalsMappedToRequirement=currentRequirement.getSubGoals();
        listOfRiksMapppedToRequirement=currentRequirement.getRisks();
        listOfArtifactsMappedToRequirement=currentRequirement.getArtifacts();
      }
      loadProjectRisks();
    }
  }
);
}","public void loadProjectRequirements(){
  ServiceDefTarget endpoint=(ServiceDefTarget)requirementService;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  this.requirementService.getRequirementsFromProject(this.currentProject.getId(),new AsyncCallback<List<GwtRequirement>>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,messages.errorGettingRequirements());
    }
    public void onSuccess(    List<GwtRequirement> result){
      lisOfRequirements=result;
      currentRequirement=getRequirementFromListByID(currentRequirementId);
      if (currentRequirement != null) {
        listOfSubGoalsMappedToRequirement=currentRequirement.getSubGoals();
        listOfRiksMapppedToRequirement=currentRequirement.getRisks();
      }
      loadProjectRisks();
    }
  }
);
}"
24762,"public void initializeRequirementFormWidgets(){
  this.editRequirement=new SquareHyperlink(messages.linkEditRequirement());
  this.deleteRequirement=new SquareHyperlink(messages.linkDeleteRequirement());
  this.gotToSummary=new SquareHyperlink(messages.linkBackRequirementSummary());
  this.requirementTitleLabel.setStyleName(""String_Node_Str"");
  this.requirementDescriptionLabel.setStyleName(""String_Node_Str"");
  this.subGoalLabel.setStyleName(""String_Node_Str"");
  this.artifactLabel.setStyleName(""String_Node_Str"");
  this.requirementTitleTextBox.setStyleName(""String_Node_Str"");
  this.requirementDescriptionTextBox.setStyleName(""String_Node_Str"");
  this.requirementDescriptionTextBox.setHeight(""String_Node_Str"");
  subGoalsListBox=new ListBox();
  subGoalsListBox.clear();
  subGoalsListBox.setWidth(""String_Node_Str"");
  subGoalsListBox.addItem(""String_Node_Str"",""String_Node_Str"");
  for (  GwtSubGoal subGoals : listOfProjectSubGoals) {
    subGoalsListBox.addItem(subGoals.getDescription(),subGoals.getId() + ""String_Node_Str"");
  }
}","public void initializeRequirementFormWidgets(){
  this.editRequirement=new SquareHyperlink(messages.linkEditRequirement());
  this.deleteRequirement=new SquareHyperlink(messages.linkDeleteRequirement());
  this.gotToSummary=new SquareHyperlink(messages.linkBackRequirementSummary());
  this.requirementTitleLabel.setStyleName(""String_Node_Str"");
  this.requirementDescriptionLabel.setStyleName(""String_Node_Str"");
  this.subGoalLabel.setStyleName(""String_Node_Str"");
  this.requirementTitleTextBox.setStyleName(""String_Node_Str"");
  this.requirementDescriptionTextBox.setStyleName(""String_Node_Str"");
  this.requirementDescriptionTextBox.setHeight(""String_Node_Str"");
  subGoalsListBox=new ListBox();
  subGoalsListBox.clear();
  subGoalsListBox.setWidth(""String_Node_Str"");
  subGoalsListBox.addItem(""String_Node_Str"",""String_Node_Str"");
  for (  GwtSubGoal subGoals : listOfProjectSubGoals) {
    subGoalsListBox.addItem(subGoals.getDescription(),subGoals.getId() + ""String_Node_Str"");
  }
}"
24763,"public boolean validateRequiredFields(){
  disPanel.setOpen(false);
  errorMessage.setText(messages.labelFieldsRequired());
  for (int j=0; j < matrix.getRowCount(); j++) {
    Widget w=matrix.getWidget(j,1);
    String textValue=""String_Node_Str"";
    if (w instanceof TextBox) {
      TextBox field=(TextBox)w;
      textValue=field.getText().trim();
      setValidationStyle(field,textValue);
    }
 else     if (w instanceof TextArea) {
      TextArea field=(TextArea)w;
      textValue=field.getText().trim();
      setValidationStyle(field,textValue);
    }
 else     if (w instanceof ListBox) {
      ListBox field=(ListBox)w;
      textValue=field.getItemText(field.getSelectedIndex()).trim();
      setValidationStyle(field,textValue);
    }
    if (textValue.trim().length() == 0) {
      disPanel.setOpen(true);
      return false;
    }
  }
  if (listOfSubGoalsMappedToRequirement.size() == 0) {
    disPanel.setOpen(true);
    subGoalEmptyLabel.setStyleName(""String_Node_Str"");
    return false;
  }
 else   if (listOfArtifactsMappedToRequirement.size() == 0) {
    disPanel.setOpen(true);
    artifactsEmptyLabel.setStyleName(""String_Node_Str"");
    return false;
  }
  for (  GwtRequirement requirement : lisOfRequirements) {
    if (requirement.getTitle().equals(requirementTitleTextBox.getText().trim())) {
      errorMessage.setText(messages.duplicateTitleError());
      disPanel.setOpen(true);
      return false;
    }
  }
  disPanel.setOpen(false);
  return true;
}","public boolean validateRequiredFields(){
  disPanel.setOpen(false);
  errorMessage.setText(messages.labelFieldsRequired());
  for (int j=0; j < matrix.getRowCount(); j++) {
    Widget w=matrix.getWidget(j,1);
    String textValue=""String_Node_Str"";
    if (w instanceof TextBox) {
      TextBox field=(TextBox)w;
      textValue=field.getText().trim();
      setValidationStyle(field,textValue);
    }
 else     if (w instanceof TextArea) {
      TextArea field=(TextArea)w;
      textValue=field.getText().trim();
      setValidationStyle(field,textValue);
    }
 else     if (w instanceof ListBox) {
      ListBox field=(ListBox)w;
      textValue=field.getItemText(field.getSelectedIndex()).trim();
      setValidationStyle(field,textValue);
    }
    if (textValue.trim().length() == 0) {
      disPanel.setOpen(true);
      return false;
    }
  }
  if (listOfSubGoalsMappedToRequirement.size() == 0) {
    disPanel.setOpen(true);
    subGoalEmptyLabel.setStyleName(""String_Node_Str"");
    return false;
  }
  for (  GwtRequirement requirement : lisOfRequirements) {
    if (requirement.getTitle().equals(requirementTitleTextBox.getText().trim())) {
      errorMessage.setText(messages.duplicateTitleError());
      disPanel.setOpen(true);
      return false;
    }
  }
  disPanel.setOpen(false);
  return true;
}"
24764,"public void loadRequirementForm(){
  this.matrix.getCellFormatter().setWidth(1,0,""String_Node_Str"");
  this.matrix.getCellFormatter().setWidth(1,1,""String_Node_Str"");
  this.matrix.setWidth(""String_Node_Str"");
  this.matrix.setCellPadding(10);
  this.matrix.setStyleName(""String_Node_Str"");
  initializeRequirementFormWidgets();
  if (!CommandTypes.insert.equals(currentCommand)) {
    setRequirementFormValues(currentRequirement);
  }
  this.matrix.getCellFormatter().setAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  if (currentCommand == CommandTypes.read) {
    loadReadOnlyRequirementForm();
  }
 else {
    loadEditableRequirementForm();
  }
  this.matrix.setWidget(1,0,requirementDescriptionLabel);
  this.matrix.setWidget(1,1,getField(requirementDescriptionTextBox));
  this.matrix.setWidget(2,1,createHTMLSubGoalList());
  this.matrix.setWidget(3,1,createHTMLArtifactsList());
  this.matrix.getCellFormatter().setAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(1,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(2,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(2,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(3,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(3,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(4,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(4,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
}","public void loadRequirementForm(){
  this.matrix.getCellFormatter().setWidth(1,0,""String_Node_Str"");
  this.matrix.getCellFormatter().setWidth(1,1,""String_Node_Str"");
  this.matrix.setWidth(""String_Node_Str"");
  this.matrix.setCellPadding(10);
  this.matrix.setStyleName(""String_Node_Str"");
  initializeRequirementFormWidgets();
  if (!CommandTypes.insert.equals(currentCommand)) {
    setRequirementFormValues(currentRequirement);
  }
  this.matrix.getCellFormatter().setAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  if (currentCommand == CommandTypes.read) {
    loadReadOnlyRequirementForm();
  }
 else {
    loadEditableRequirementForm();
  }
  this.matrix.setWidget(1,0,requirementDescriptionLabel);
  this.matrix.setWidget(1,1,getField(requirementDescriptionTextBox));
  this.matrix.setWidget(2,1,createHTMLSubGoalList());
  this.matrix.getCellFormatter().setAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(1,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(2,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(2,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(3,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(3,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
}"
24765,"public void loadReadOnlyRequirementForm(){
  this.matrix.setWidget(0,0,getField(requirementTitleTextBox));
  this.matrix.getCellFormatter().setAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setStyleName(0,0,""String_Node_Str"");
  ((FlexCellFormatter)this.matrix.getCellFormatter()).setColSpan(0,0,2);
  this.matrix.setWidget(2,0,subGoalLabel);
  this.matrix.setWidget(3,0,artifactLabel);
  if (currentState.getMode() == GwtModesType.ReadWrite) {
    FlexTable bottonControlPanel=new FlexTable();
    bottonControlPanel.setWidth(""String_Node_Str"");
    bottonControlPanel.setWidget(0,0,editRequirement);
    bottonControlPanel.setWidget(1,0,deleteRequirement);
    bottonControlPanel.setWidget(2,0,new Label(""String_Node_Str""));
    bottonControlPanel.setWidget(3,0,gotToSummary);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(1,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(2,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(3,0,HasHorizontalAlignment.ALIGN_LEFT);
    this.getContent().add(bottonControlPanel);
  }
  this.editRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      currentCommand=CommandTypes.update;
      PaneInitialization();
    }
  }
);
  this.deleteRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      removeRequirement(currentRequirementId);
    }
  }
);
  this.gotToSummary.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      History.newItem(ElicitSecurityRequirementsPilot.generateNavigationId(ElicitSecurityRequirementsPilot.PageId.requirementsSummary));
    }
  }
);
}","public void loadReadOnlyRequirementForm(){
  this.matrix.setWidget(0,0,getField(requirementTitleTextBox));
  this.matrix.getCellFormatter().setAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setStyleName(0,0,""String_Node_Str"");
  ((FlexCellFormatter)this.matrix.getCellFormatter()).setColSpan(0,0,2);
  this.matrix.setWidget(2,0,subGoalLabel);
  if (currentState.getMode() == GwtModesType.ReadWrite) {
    FlexTable bottonControlPanel=new FlexTable();
    bottonControlPanel.setWidth(""String_Node_Str"");
    bottonControlPanel.setWidget(0,0,editRequirement);
    bottonControlPanel.setWidget(1,0,deleteRequirement);
    bottonControlPanel.setWidget(2,0,new Label(""String_Node_Str""));
    bottonControlPanel.setWidget(3,0,gotToSummary);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(1,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(2,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(3,0,HasHorizontalAlignment.ALIGN_LEFT);
    this.getContent().add(bottonControlPanel);
  }
  this.editRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      currentCommand=CommandTypes.update;
      PaneInitialization();
    }
  }
);
  this.deleteRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      removeRequirement(currentRequirementId);
    }
  }
);
  this.gotToSummary.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      History.newItem(ElicitSecurityRequirementsPilot.generateNavigationId(ElicitSecurityRequirementsPilot.PageId.requirementsSummary));
    }
  }
);
}"
24766,"public void execute(){
  if (currentDialog.equalsIgnoreCase(""String_Node_Str"")) {
    listSubGoalChanged(listOfSubGoalsMappedToRequirement,subGoalDialog.getNewSelectedSubGoals());
    listOfSubGoalsMappedToRequirement=subGoalDialog.getNewSelectedSubGoals();
    listOfRiksMapppedToRequirement.clear();
    listOfProjectFilteredRisks=filterRiskBaseOnGoals(listOfSubGoalsMappedToRequirement,listOfProjectRisks);
    this.matrix.setWidget(2,1,createHTMLSubGoalList());
  }
 else   if (currentDialog.equalsIgnoreCase(""String_Node_Str"")) {
    listArtifactChanged(listOfArtifactsMappedToRequirement,artifactDialog.getNewSelectedArtifacts());
    listOfArtifactsMappedToRequirement=artifactDialog.getNewSelectedArtifacts();
    this.matrix.setWidget(3,1,createHTMLArtifactsList());
  }
}","public void execute(){
  if (currentDialog.equalsIgnoreCase(""String_Node_Str"")) {
    listSubGoalChanged(listOfSubGoalsMappedToRequirement,subGoalDialog.getNewSelectedSubGoals());
    listOfSubGoalsMappedToRequirement=subGoalDialog.getNewSelectedSubGoals();
    listOfRiksMapppedToRequirement.clear();
    listOfProjectFilteredRisks=filterRiskBaseOnGoals(listOfSubGoalsMappedToRequirement,listOfProjectRisks);
    this.matrix.setWidget(2,1,createHTMLSubGoalList());
  }
}"
24767,"public GwtRequirement getFormRiskValues(){
  GwtRequirement gwtRequirement=new GwtRequirement();
  gwtRequirement.setTitle(this.requirementTitleTextBox.getText());
  gwtRequirement.setDescription(this.requirementDescriptionTextBox.getText());
  gwtRequirement.setSubGoals(this.listOfSubGoalsMappedToRequirement);
  gwtRequirement.setRisks(this.listOfRiksMapppedToRequirement);
  gwtRequirement.setArtifacts(this.listOfArtifactsMappedToRequirement);
  return gwtRequirement;
}","public GwtRequirement getFormRiskValues(){
  GwtRequirement gwtRequirement=new GwtRequirement();
  gwtRequirement.setTitle(this.requirementTitleTextBox.getText());
  gwtRequirement.setDescription(this.requirementDescriptionTextBox.getText());
  gwtRequirement.setSubGoals(this.listOfSubGoalsMappedToRequirement);
  gwtRequirement.setRisks(this.listOfRiksMapppedToRequirement);
  return gwtRequirement;
}"
24768,"public void loadEditableRequirementForm(){
  this.matrix.setWidget(0,0,requirementTitleLabel);
  this.matrix.setWidget(0,1,getField(requirementTitleTextBox));
  this.matrix.setWidget(2,0,getEditSubGoalsHyperLink(this));
  this.matrix.setWidget(3,0,getEditArtifactsHyperLink(this));
  subGoalLabel.setStyleName(""String_Node_Str"");
  matrix.getCellFormatter().setAlignment(0,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  matrix.getCellFormatter().setAlignment(0,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  if (CommandTypes.insert.equals(currentCommand)) {
    this.save.setText(messages.create());
  }
 else   if (CommandTypes.update.equals(currentCommand)) {
    this.save.setText(messages.save());
  }
  FlexTable flexTable=new FlexTable();
  flexTable.setWidget(0,0,save);
  flexTable.setWidget(0,1,cancel);
  flexTable.setCellSpacing(10);
  this.getContent().add(flexTable);
}","public void loadEditableRequirementForm(){
  this.matrix.setWidget(0,0,requirementTitleLabel);
  this.matrix.setWidget(0,1,getField(requirementTitleTextBox));
  this.matrix.setWidget(2,0,getEditSubGoalsHyperLink(this));
  subGoalLabel.setStyleName(""String_Node_Str"");
  matrix.getCellFormatter().setAlignment(0,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  matrix.getCellFormatter().setAlignment(0,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  if (CommandTypes.insert.equals(currentCommand)) {
    this.save.setText(messages.create());
  }
 else   if (CommandTypes.update.equals(currentCommand)) {
    this.save.setText(messages.save());
  }
  FlexTable flexTable=new FlexTable();
  flexTable.setWidget(0,0,save);
  flexTable.setWidget(0,1,cancel);
  flexTable.setCellSpacing(10);
  this.getContent().add(flexTable);
}"
24769,"public void onClick(ClickEvent event){
  artifactDialog=new ArtifactDialogBox(riksPane,listOfProjectArtifacts,listOfArtifactsMappedToRequirement,messages.associateArtifacts());
  artifactDialog.setModal(true);
  artifactDialog.center();
  artifactDialog.show();
  currentDialog=""String_Node_Str"";
}","public void onClick(ClickEvent event){
  riskDialogBox=new RiskDialogBox(riksPane,listOfProjectFilteredRisks,listOfRiksMapppedToRequirement);
  riskDialogBox.setModal(true);
  riskDialogBox.center();
  currentDialog=""String_Node_Str"";
  riskDialogBox.show();
}"
24770,"public void loadSubGoalsFromProject(){
  IdentifyGoalsAssetsServiceAsync service=GWT.create(IdentifyGoalsAssetsService.class);
  ServiceDefTarget endpoint=(ServiceDefTarget)service;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  service.loadBusinessGoalInfo(getCurrentState().getProjectID(),new AsyncCallback<GwtBusinessGoal>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
    public void onSuccess(    GwtBusinessGoal result){
      businessGoalInfo=result;
      listOfProjectSubGoals=businessGoalInfo.getSubGoals();
      loadArtifactsFromProject();
    }
  }
);
}","public void loadSubGoalsFromProject(){
  IdentifyGoalsAssetsServiceAsync service=GWT.create(IdentifyGoalsAssetsService.class);
  ServiceDefTarget endpoint=(ServiceDefTarget)service;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  service.loadBusinessGoalInfo(getCurrentState().getProjectID(),new AsyncCallback<GwtBusinessGoal>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
    public void onSuccess(    GwtBusinessGoal result){
      businessGoalInfo=result;
      listOfProjectSubGoals=businessGoalInfo.getSubGoals();
    }
  }
);
}"
24771,"public void loadProjectRequirements(){
  ServiceDefTarget endpoint=(ServiceDefTarget)requirementService;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  this.requirementService.getRequirementsFromProject(this.currentProject.getId(),new AsyncCallback<List<GwtRequirement>>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,messages.errorGettingRequirements());
    }
    public void onSuccess(    List<GwtRequirement> result){
      lisOfRequirements=result;
      currentRequirement=getRequirementFromListByID(currentRequirementId);
      if (currentRequirement != null) {
        listOfSubGoalsMappedToRequirement=currentRequirement.getSubGoals();
        listOfRiksMapppedToRequirement=currentRequirement.getRisks();
        listOfArtifactsMappedToRequirement=currentRequirement.getArtifacts();
      }
      loadProjectRisks();
    }
  }
);
}","public void loadProjectRequirements(){
  ServiceDefTarget endpoint=(ServiceDefTarget)requirementService;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  this.requirementService.getRequirementsFromProject(this.currentProject.getId(),new AsyncCallback<List<GwtRequirement>>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,messages.errorGettingRequirements());
    }
    public void onSuccess(    List<GwtRequirement> result){
      lisOfRequirements=result;
      currentRequirement=getRequirementFromListByID(currentRequirementId);
      if (currentRequirement != null) {
        listOfSubGoalsMappedToRequirement=currentRequirement.getSubGoals();
        listOfRiksMapppedToRequirement=currentRequirement.getRisks();
      }
      loadProjectRisks();
    }
  }
);
}"
24772,"public void initializeRequirementFormWidgets(){
  this.editRequirement=new SquareHyperlink(messages.linkEditRequirement());
  this.deleteRequirement=new SquareHyperlink(messages.linkDeleteRequirement());
  this.gotToSummary=new SquareHyperlink(messages.linkBackRequirementSummary());
  this.requirementTitleLabel.setStyleName(""String_Node_Str"");
  this.requirementDescriptionLabel.setStyleName(""String_Node_Str"");
  this.subGoalLabel.setStyleName(""String_Node_Str"");
  this.artifactLabel.setStyleName(""String_Node_Str"");
  this.requirementTitleTextBox.setStyleName(""String_Node_Str"");
  this.requirementDescriptionTextBox.setStyleName(""String_Node_Str"");
  this.requirementDescriptionTextBox.setHeight(""String_Node_Str"");
  subGoalsListBox=new ListBox();
  subGoalsListBox.clear();
  subGoalsListBox.setWidth(""String_Node_Str"");
  subGoalsListBox.addItem(""String_Node_Str"",""String_Node_Str"");
  for (  GwtSubGoal subGoals : listOfProjectSubGoals) {
    subGoalsListBox.addItem(subGoals.getDescription(),subGoals.getId() + ""String_Node_Str"");
  }
}","public void initializeRequirementFormWidgets(){
  this.editRequirement=new SquareHyperlink(messages.linkEditRequirement());
  this.deleteRequirement=new SquareHyperlink(messages.linkDeleteRequirement());
  this.gotToSummary=new SquareHyperlink(messages.linkBackRequirementSummary());
  this.requirementTitleLabel.setStyleName(""String_Node_Str"");
  this.requirementDescriptionLabel.setStyleName(""String_Node_Str"");
  this.subGoalLabel.setStyleName(""String_Node_Str"");
  this.requirementTitleTextBox.setStyleName(""String_Node_Str"");
  this.requirementDescriptionTextBox.setStyleName(""String_Node_Str"");
  this.requirementDescriptionTextBox.setHeight(""String_Node_Str"");
  subGoalsListBox=new ListBox();
  subGoalsListBox.clear();
  subGoalsListBox.setWidth(""String_Node_Str"");
  subGoalsListBox.addItem(""String_Node_Str"",""String_Node_Str"");
  for (  GwtSubGoal subGoals : listOfProjectSubGoals) {
    subGoalsListBox.addItem(subGoals.getDescription(),subGoals.getId() + ""String_Node_Str"");
  }
}"
24773,"public boolean validateRequiredFields(){
  disPanel.setOpen(false);
  errorMessage.setText(messages.labelFieldsRequired());
  for (int j=0; j < matrix.getRowCount(); j++) {
    Widget w=matrix.getWidget(j,1);
    String textValue=""String_Node_Str"";
    if (w instanceof TextBox) {
      TextBox field=(TextBox)w;
      textValue=field.getText().trim();
      setValidationStyle(field,textValue);
    }
 else     if (w instanceof TextArea) {
      TextArea field=(TextArea)w;
      textValue=field.getText().trim();
      setValidationStyle(field,textValue);
    }
 else     if (w instanceof ListBox) {
      ListBox field=(ListBox)w;
      textValue=field.getItemText(field.getSelectedIndex()).trim();
      setValidationStyle(field,textValue);
    }
    if (textValue.trim().length() == 0) {
      disPanel.setOpen(true);
      return false;
    }
  }
  if (listOfSubGoalsMappedToRequirement.size() == 0) {
    disPanel.setOpen(true);
    subGoalEmptyLabel.setStyleName(""String_Node_Str"");
    return false;
  }
 else   if (listOfArtifactsMappedToRequirement.size() == 0) {
    disPanel.setOpen(true);
    artifactsEmptyLabel.setStyleName(""String_Node_Str"");
    return false;
  }
  for (  GwtRequirement requirement : lisOfRequirements) {
    if (requirement.getTitle().equals(requirementTitleTextBox.getText().trim())) {
      errorMessage.setText(messages.duplicateTitleError());
      disPanel.setOpen(true);
      return false;
    }
  }
  disPanel.setOpen(false);
  return true;
}","public boolean validateRequiredFields(){
  disPanel.setOpen(false);
  errorMessage.setText(messages.labelFieldsRequired());
  for (int j=0; j < matrix.getRowCount(); j++) {
    Widget w=matrix.getWidget(j,1);
    String textValue=""String_Node_Str"";
    if (w instanceof TextBox) {
      TextBox field=(TextBox)w;
      textValue=field.getText().trim();
      setValidationStyle(field,textValue);
    }
 else     if (w instanceof TextArea) {
      TextArea field=(TextArea)w;
      textValue=field.getText().trim();
      setValidationStyle(field,textValue);
    }
 else     if (w instanceof ListBox) {
      ListBox field=(ListBox)w;
      textValue=field.getItemText(field.getSelectedIndex()).trim();
      setValidationStyle(field,textValue);
    }
    if (textValue.trim().length() == 0) {
      disPanel.setOpen(true);
      return false;
    }
  }
  if (listOfSubGoalsMappedToRequirement.size() == 0) {
    disPanel.setOpen(true);
    subGoalEmptyLabel.setStyleName(""String_Node_Str"");
    return false;
  }
  for (  GwtRequirement requirement : lisOfRequirements) {
    if (requirement.getTitle().equals(requirementTitleTextBox.getText().trim())) {
      errorMessage.setText(messages.duplicateTitleError());
      disPanel.setOpen(true);
      return false;
    }
  }
  disPanel.setOpen(false);
  return true;
}"
24774,"public void loadRequirementForm(){
  this.matrix.getCellFormatter().setWidth(1,0,""String_Node_Str"");
  this.matrix.getCellFormatter().setWidth(1,1,""String_Node_Str"");
  this.matrix.setWidth(""String_Node_Str"");
  this.matrix.setCellPadding(10);
  this.matrix.setStyleName(""String_Node_Str"");
  initializeRequirementFormWidgets();
  if (!CommandTypes.insert.equals(currentCommand)) {
    setRequirementFormValues(currentRequirement);
  }
  this.matrix.getCellFormatter().setAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  if (currentCommand == CommandTypes.read) {
    loadReadOnlyRequirementForm();
  }
 else {
    loadEditableRequirementForm();
  }
  this.matrix.setWidget(1,0,requirementDescriptionLabel);
  this.matrix.setWidget(1,1,getField(requirementDescriptionTextBox));
  this.matrix.setWidget(2,1,createHTMLSubGoalList());
  this.matrix.setWidget(3,1,createHTMLArtifactsList());
  this.matrix.getCellFormatter().setAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(1,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(2,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(2,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(3,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(3,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(4,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(4,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
}","public void loadRequirementForm(){
  this.matrix.getCellFormatter().setWidth(1,0,""String_Node_Str"");
  this.matrix.getCellFormatter().setWidth(1,1,""String_Node_Str"");
  this.matrix.setWidth(""String_Node_Str"");
  this.matrix.setCellPadding(10);
  this.matrix.setStyleName(""String_Node_Str"");
  initializeRequirementFormWidgets();
  if (!CommandTypes.insert.equals(currentCommand)) {
    setRequirementFormValues(currentRequirement);
  }
  this.matrix.getCellFormatter().setAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  if (currentCommand == CommandTypes.read) {
    loadReadOnlyRequirementForm();
  }
 else {
    loadEditableRequirementForm();
  }
  this.matrix.setWidget(1,0,requirementDescriptionLabel);
  this.matrix.setWidget(1,1,getField(requirementDescriptionTextBox));
  this.matrix.setWidget(2,1,createHTMLSubGoalList());
  this.matrix.getCellFormatter().setAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(1,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(2,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(2,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(3,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setAlignment(3,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
}"
24775,"public void loadReadOnlyRequirementForm(){
  this.matrix.setWidget(0,0,getField(requirementTitleTextBox));
  this.matrix.getCellFormatter().setAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setStyleName(0,0,""String_Node_Str"");
  ((FlexCellFormatter)this.matrix.getCellFormatter()).setColSpan(0,0,2);
  this.matrix.setWidget(2,0,subGoalLabel);
  this.matrix.setWidget(3,0,artifactLabel);
  approveButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      System.out.println(""String_Node_Str"");
      boolean response=Window.confirm(messages.confirmApprove() + ""String_Node_Str"");
      if (response) {
        System.out.println(""String_Node_Str"");
        GwtRequirement req=new GwtRequirement();
        req.setId(currentRequirementId);
        System.out.println(""String_Node_Str"" + currentRequirementId);
        changeStatusToApproveRequirement(req);
      }
    }
  }
);
  requestRevisionButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      System.out.println(""String_Node_Str"");
      boolean response=Window.confirm(messages.confirmRequestRevision() + ""String_Node_Str"");
      if (response) {
        System.out.println(""String_Node_Str"");
        GwtRequirement req=new GwtRequirement();
        req.setId(currentRequirementId);
        changeStatusToRequestRevisionRequirement(req);
      }
    }
  }
);
  if (currentState.getMode() == GwtModesType.ReadWrite) {
    FlexTable bottonControlPanel=new FlexTable();
    bottonControlPanel.setWidth(""String_Node_Str"");
    if (currentRequirement.getStatus().equals(""String_Node_Str"")) {
      bottonControlPanel.setWidget(0,0,editRequirement);
      bottonControlPanel.setWidget(1,0,deleteRequirement);
      bottonControlPanel.setWidget(0,2,approveButton);
    }
    if (currentRequirement.getStatus().equals(""String_Node_Str"")) {
      bottonControlPanel.setWidget(0,1,requestRevisionButton);
      bottonControlPanel.setWidget(0,2,approveButton);
    }
    bottonControlPanel.setWidget(2,0,new Label(""String_Node_Str""));
    bottonControlPanel.setWidget(3,0,gotToSummary);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(1,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(2,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(3,0,HasHorizontalAlignment.ALIGN_LEFT);
    this.getContent().add(bottonControlPanel);
  }
  this.editRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      currentCommand=CommandTypes.update;
      PaneInitialization();
    }
  }
);
  this.deleteRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      removeRequirement(currentRequirementId);
    }
  }
);
  this.gotToSummary.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      History.newItem(ReviewAndFinalizeRequirementsPilot.generateNavigationId(ReviewAndFinalizeRequirementsPilot.PageId.home));
    }
  }
);
}","public void loadReadOnlyRequirementForm(){
  this.matrix.setWidget(0,0,getField(requirementTitleTextBox));
  this.matrix.getCellFormatter().setAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  this.matrix.getCellFormatter().setStyleName(0,0,""String_Node_Str"");
  ((FlexCellFormatter)this.matrix.getCellFormatter()).setColSpan(0,0,2);
  this.matrix.setWidget(2,0,subGoalLabel);
  approveButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      System.out.println(""String_Node_Str"");
      boolean response=Window.confirm(messages.confirmApprove() + ""String_Node_Str"");
      if (response) {
        System.out.println(""String_Node_Str"");
        GwtRequirement req=new GwtRequirement();
        req.setId(currentRequirementId);
        System.out.println(""String_Node_Str"" + currentRequirementId);
        changeStatusToApproveRequirement(req);
      }
    }
  }
);
  requestRevisionButton.addClickHandler(new ClickHandler(){
    @Override public void onClick(    ClickEvent event){
      System.out.println(""String_Node_Str"");
      boolean response=Window.confirm(messages.confirmRequestRevision() + ""String_Node_Str"");
      if (response) {
        System.out.println(""String_Node_Str"");
        GwtRequirement req=new GwtRequirement();
        req.setId(currentRequirementId);
        changeStatusToRequestRevisionRequirement(req);
      }
    }
  }
);
  if (currentState.getMode() == GwtModesType.ReadWrite) {
    FlexTable bottonControlPanel=new FlexTable();
    bottonControlPanel.setWidth(""String_Node_Str"");
    if (currentRequirement.getStatus().equals(""String_Node_Str"")) {
      bottonControlPanel.setWidget(0,0,editRequirement);
      bottonControlPanel.setWidget(1,0,deleteRequirement);
      bottonControlPanel.setWidget(0,2,approveButton);
    }
    if (currentRequirement.getStatus().equals(""String_Node_Str"")) {
      bottonControlPanel.setWidget(0,1,requestRevisionButton);
      bottonControlPanel.setWidget(0,2,approveButton);
    }
    bottonControlPanel.setWidget(2,0,new Label(""String_Node_Str""));
    bottonControlPanel.setWidget(3,0,gotToSummary);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(1,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(2,0,HasHorizontalAlignment.ALIGN_LEFT);
    bottonControlPanel.getCellFormatter().setHorizontalAlignment(3,0,HasHorizontalAlignment.ALIGN_LEFT);
    this.getContent().add(bottonControlPanel);
  }
  this.editRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      currentCommand=CommandTypes.update;
      PaneInitialization();
    }
  }
);
  this.deleteRequirement.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      removeRequirement(currentRequirementId);
    }
  }
);
  this.gotToSummary.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      History.newItem(ReviewAndFinalizeRequirementsPilot.generateNavigationId(ReviewAndFinalizeRequirementsPilot.PageId.home));
    }
  }
);
}"
24776,"public void execute(){
  if (currentDialog.equalsIgnoreCase(""String_Node_Str"")) {
    listSubGoalChanged(listOfSubGoalsMappedToRequirement,subGoalDialog.getNewSelectedSubGoals());
    listOfSubGoalsMappedToRequirement=subGoalDialog.getNewSelectedSubGoals();
    listOfRiksMapppedToRequirement.clear();
    this.matrix.setWidget(2,1,createHTMLSubGoalList());
  }
 else   if (currentDialog.equalsIgnoreCase(""String_Node_Str"")) {
    listArtifactChanged(listOfArtifactsMappedToRequirement,artifactDialog.getNewSelectedArtifacts());
    listOfArtifactsMappedToRequirement=artifactDialog.getNewSelectedArtifacts();
    this.matrix.setWidget(3,1,createHTMLArtifactsList());
  }
}","public void execute(){
  if (currentDialog.equalsIgnoreCase(""String_Node_Str"")) {
    listSubGoalChanged(listOfSubGoalsMappedToRequirement,subGoalDialog.getNewSelectedSubGoals());
    listOfSubGoalsMappedToRequirement=subGoalDialog.getNewSelectedSubGoals();
    listOfRiksMapppedToRequirement.clear();
    this.matrix.setWidget(2,1,createHTMLSubGoalList());
  }
}"
24777,"public GwtRequirement getFormRiskValues(){
  GwtRequirement gwtRequirement=new GwtRequirement();
  gwtRequirement.setTitle(this.requirementTitleTextBox.getText());
  gwtRequirement.setDescription(this.requirementDescriptionTextBox.getText());
  gwtRequirement.setSubGoals(this.listOfSubGoalsMappedToRequirement);
  gwtRequirement.setRisks(this.listOfRiksMapppedToRequirement);
  gwtRequirement.setArtifacts(this.listOfArtifactsMappedToRequirement);
  return gwtRequirement;
}","public GwtRequirement getFormRiskValues(){
  GwtRequirement gwtRequirement=new GwtRequirement();
  gwtRequirement.setTitle(this.requirementTitleTextBox.getText());
  gwtRequirement.setDescription(this.requirementDescriptionTextBox.getText());
  gwtRequirement.setSubGoals(this.listOfSubGoalsMappedToRequirement);
  gwtRequirement.setRisks(this.listOfRiksMapppedToRequirement);
  return gwtRequirement;
}"
24778,"public void loadEditableRequirementForm(){
  this.matrix.setWidget(0,0,requirementTitleLabel);
  this.matrix.setWidget(0,1,getField(requirementTitleTextBox));
  this.matrix.setWidget(2,0,getEditSubGoalsHyperLink(this));
  this.matrix.setWidget(3,0,getEditArtifactsHyperLink(this));
  subGoalLabel.setStyleName(""String_Node_Str"");
  matrix.getCellFormatter().setAlignment(0,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  matrix.getCellFormatter().setAlignment(0,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  if (CommandTypes.insert.equals(currentCommand)) {
    this.save.setText(messages.create());
  }
 else   if (CommandTypes.update.equals(currentCommand)) {
    this.save.setText(messages.save());
  }
  FlexTable flexTable=new FlexTable();
  flexTable.setWidget(0,0,save);
  flexTable.setWidget(0,1,cancel);
  flexTable.setCellSpacing(10);
  this.getContent().add(flexTable);
}","public void loadEditableRequirementForm(){
  this.matrix.setWidget(0,0,requirementTitleLabel);
  this.matrix.setWidget(0,1,getField(requirementTitleTextBox));
  this.matrix.setWidget(2,0,getEditSubGoalsHyperLink(this));
  subGoalLabel.setStyleName(""String_Node_Str"");
  matrix.getCellFormatter().setAlignment(0,0,HasHorizontalAlignment.ALIGN_RIGHT,HasVerticalAlignment.ALIGN_TOP);
  matrix.getCellFormatter().setAlignment(0,1,HasHorizontalAlignment.ALIGN_LEFT,HasVerticalAlignment.ALIGN_TOP);
  if (CommandTypes.insert.equals(currentCommand)) {
    this.save.setText(messages.create());
  }
 else   if (CommandTypes.update.equals(currentCommand)) {
    this.save.setText(messages.save());
  }
  FlexTable flexTable=new FlexTable();
  flexTable.setWidget(0,0,save);
  flexTable.setWidget(0,1,cancel);
  flexTable.setCellSpacing(10);
  this.getContent().add(flexTable);
}"
24779,"@AllowedRoles(roles={Roles.Contractor,Roles.Security_Specialist,Roles.Administrator}) public void updateRequirement(GwtRequirement gwtRequirement) throws SquareException {
  Requirement r=requirementDao.fetch(gwtRequirement.getId());
  r.getRisks().clear();
  r.getArtifacts().clear();
  r.getGoals().clear();
  r.update(gwtRequirement);
  if (gwtRequirement.getArtifacts().isEmpty()) {
    SquareException se=new SquareException(""String_Node_Str"");
    se.setType(ExceptionType.missingLink);
    throw se;
  }
  requirementDao.update(r);
}","@AllowedRoles(roles={Roles.Contractor,Roles.Security_Specialist,Roles.Administrator}) public void updateRequirement(GwtRequirement gwtRequirement) throws SquareException {
  Requirement r=requirementDao.fetch(gwtRequirement.getId());
  r.getRisks().clear();
  r.getArtifacts().clear();
  r.getGoals().clear();
  r.update(gwtRequirement);
  requirementDao.update(r);
}"
24780,"@AllowedRoles(roles={Roles.Contractor,Roles.Security_Specialist,Roles.Administrator}) public int addRequirementToProject(Integer projectId,GwtRequirement gwtRequirement) throws SquareException {
  Project p=projectDao.fetch(projectId);
  Requirement requirement=new Requirement(gwtRequirement);
  requirement.setProject(p);
  requirement.setStatus(""String_Node_Str"");
  if (gwtRequirement.getArtifacts().isEmpty()) {
    SquareException se=new SquareException(""String_Node_Str"");
    se.setType(ExceptionType.missingLink);
    throw se;
  }
  requirementDao.create(requirement);
  p.getRequirements().add(requirement);
  return requirement.getId();
}","@AllowedRoles(roles={Roles.Contractor,Roles.Security_Specialist,Roles.Administrator}) public int addRequirementToProject(Integer projectId,GwtRequirement gwtRequirement) throws SquareException {
  Project p=projectDao.fetch(projectId);
  Requirement requirement=new Requirement(gwtRequirement);
  requirement.setProject(p);
  requirement.setStatus(""String_Node_Str"");
  requirementDao.create(requirement);
  p.getRequirements().add(requirement);
  return requirement.getId();
}"
24781,"@AllowedRoles(roles={Roles.Acquisition_Organization_Engineer,Roles.Security_Specialist,Roles.Administrator}) public void updateRequirement(GwtRequirement gwtRequirement) throws SquareException {
  Requirement r=requirementDao.fetch(gwtRequirement.getId());
  r.getRisks().clear();
  r.getGoals().clear();
  r.update(gwtRequirement);
  if (gwtRequirement.getRisks().isEmpty()) {
    SquareException se=new SquareException(""String_Node_Str"");
    se.setType(ExceptionType.missingLink);
    throw se;
  }
  requirementDao.update(r);
}","@AllowedRoles(roles={Roles.Acquisition_Organization_Engineer,Roles.Security_Specialist,Roles.Administrator}) public void updateRequirement(GwtRequirement gwtRequirement) throws SquareException {
  Requirement r=requirementDao.fetch(gwtRequirement.getId());
  r.getRisks().clear();
  r.getGoals().clear();
  r.update(gwtRequirement);
  requirementDao.update(r);
}"
24782,"@Override @SuppressWarnings(""String_Node_Str"") public List<GwtStepVerficationResult> verifyAllSteps(Integer projectId,WebApplicationContext ctx) throws SquareException {
  Map<String,StepBusinessInterface> beanMap=ctx.getBeansOfType(StepBusinessInterface.class);
  List<GwtStepVerficationResult> result=new ArrayList<GwtStepVerficationResult>();
  Project project=projectDao.fetch(projectId);
  Set<Step> steps=project.getSteps();
  GwtStepVerficationResult r=null;
  if (steps.isEmpty()) {
    throw new SquareException(""String_Node_Str"");
  }
  for (  Step s : steps) {
    System.out.println(""String_Node_Str"" + s.getId());
    GwtStep gs=s.createGwtStep(projectId);
    for (    StepBusinessInterface sb : beanMap.values()) {
      if (sb.getStepDescription().getDescription().equals(gs.getDescription())) {
        r=sb.verifyStep(project);
        if (r == null) {
          logger.info(""String_Node_Str"" + sb);
        }
        break;
      }
    }
    r.setStep(gs);
    result.add(r);
  }
  return result;
}","@Override @SuppressWarnings(""String_Node_Str"") public List<GwtStepVerficationResult> verifyAllSteps(Integer projectId,WebApplicationContext ctx) throws SquareException {
  Map<String,StepBusinessInterface> beanMap=ctx.getBeansOfType(StepBusinessInterface.class);
  List<GwtStepVerficationResult> result=new ArrayList<GwtStepVerficationResult>();
  Project project=projectDao.fetch(projectId);
  Set<Step> steps=project.getSteps();
  GwtStepVerficationResult r=null;
  if (steps.isEmpty()) {
    throw new SquareException(""String_Node_Str"");
  }
  for (  Step s : steps) {
    GwtStep gs=s.createGwtStep(projectId);
    for (    StepBusinessInterface sb : beanMap.values()) {
      r=sb.verifyStep(project);
      if (r == null) {
        logger.info(""String_Node_Str"" + sb);
      }
      break;
    }
    r.setStep(gs);
    result.add(r);
  }
  return result;
}"
24783,"/** 
 * Sets up the controls in the dialog
 * @param SoftwarePackage The category to be updated in this dialog.
 */
private void initializeDialogReadWrite(GwtTradeoffReason tradeoffReason){
  VerticalPanel baseLayout=new VerticalPanel();
  VerticalPanel nameLayout=new VerticalPanel();
  VerticalPanel descriptionLayout=new VerticalPanel();
  HorizontalPanel buttonsLayout=new HorizontalPanel();
  this.setText(messages.editTradeoffReasonDialogBoxTitle());
  nameLayout.add(new Label(messages.editTradeoffReasonDialogBoxName()));
  nameLayout.add(this.tradeoffReasonTextBox);
  this.tradeoffReasonTextBox.setWidth(""String_Node_Str"");
  this.tradeoffReasonTextBox.setSize(""String_Node_Str"",""String_Node_Str"");
  this.tradeoffReasonTextBox.setText(tradeoffReason.getTradeoffreason());
  saveButton=new Button(messages.editTradeoffReasonDialogBoxOkay(),new SaveHandler(this,tradeoffReason));
  Button cancelButton=new Button(messages.editTradeoffReasonDialogBoxCancel(),new CancelHandler(this));
  this.tradeoffReasonTextBox.addKeyUpHandler(new KeyUpHandler(){
    public void onKeyUp(    KeyUpEvent event){
      configureButton();
    }
  }
);
  this.tradeoffReasonTextBox.addChangeHandler(new ChangeHandler(){
    public void onChange(    ChangeEvent event){
      configureButton();
    }
  }
);
  this.tradeoffReasonTextBox.addKeyDownHandler(new KeyDownHandler(){
    public void onKeyDown(    KeyDownEvent event){
      configureButton();
    }
  }
);
  saveButton.setWidth(""String_Node_Str"");
  cancelButton.setWidth(""String_Node_Str"");
  buttonsLayout.setSpacing(10);
  buttonsLayout.add(saveButton);
  buttonsLayout.add(cancelButton);
  baseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
  baseLayout.add(nameLayout);
  baseLayout.add(descriptionLayout);
  baseLayout.add(buttonsLayout);
  baseLayout.setSpacing(5);
  this.setWidget(baseLayout);
}","/** 
 * Sets up the controls in the dialog
 * @param SoftwarePackage The category to be updated in this dialog.
 */
private void initializeDialogReadWrite(GwtTradeoffReason tradeoffReason){
  VerticalPanel baseLayout=new VerticalPanel();
  VerticalPanel nameLayout=new VerticalPanel();
  VerticalPanel descriptionLayout=new VerticalPanel();
  HorizontalPanel buttonsLayout=new HorizontalPanel();
  this.setText(messages.editTradeoffReasonDialogBoxTitle());
  nameLayout.add(new Label(messages.editTradeoffReasonDialogBoxName()));
  nameLayout.add(this.tradeoffReasonTextBox);
  this.tradeoffReasonTextBox.setWidth(""String_Node_Str"");
  this.tradeoffReasonTextBox.setSize(""String_Node_Str"",""String_Node_Str"");
  this.tradeoffReasonTextBox.setText(tradeoffReason.getTradeoffreason());
  saveButton=new Button(messages.editTradeoffReasonDialogBoxOkay(),new SaveHandler(this,tradeoffReason));
  Button cancelButton=new Button(messages.editTradeoffReasonDialogBoxCancel(),new CancelHandler(this));
  saveButton.setWidth(""String_Node_Str"");
  cancelButton.setWidth(""String_Node_Str"");
  buttonsLayout.setSpacing(10);
  buttonsLayout.add(saveButton);
  buttonsLayout.add(cancelButton);
  baseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
  baseLayout.add(nameLayout);
  baseLayout.add(descriptionLayout);
  baseLayout.add(buttonsLayout);
  baseLayout.setSpacing(5);
  this.setWidget(baseLayout);
}"
24784,"/** 
 * Sets up the controls in the dialog
 * @param SoftwarePackage The category to be updated in this dialog.
 */
private void initializeDialogReadOnly(GwtTradeoffReason tradeoffReason){
  VerticalPanel baseLayout=new VerticalPanel();
  VerticalPanel nameLayout=new VerticalPanel();
  VerticalPanel descriptionLayout=new VerticalPanel();
  HorizontalPanel buttonsLayout=new HorizontalPanel();
  this.setText(messages.editTradeoffReasonDialogBoxTitleReadOnly());
  nameLayout.add(new Label(messages.editTradeoffReasonDialogBoxName()));
  nameLayout.add(this.tradeoffReasonTextBox);
  this.tradeoffReasonTextBox.setWidth(""String_Node_Str"");
  this.tradeoffReasonTextBox.setSize(""String_Node_Str"",""String_Node_Str"");
  this.tradeoffReasonTextBox.setText(tradeoffReason.getTradeoffreason());
  Button okayButton=new Button(messages.editTradeoffReasonDialogBoxOkay(),new CancelHandler(this));
  this.tradeoffReasonTextBox.addKeyUpHandler(new KeyUpHandler(){
    public void onKeyUp(    KeyUpEvent event){
      configureButton();
    }
  }
);
  this.tradeoffReasonTextBox.addChangeHandler(new ChangeHandler(){
    public void onChange(    ChangeEvent event){
      configureButton();
    }
  }
);
  this.tradeoffReasonTextBox.addKeyDownHandler(new KeyDownHandler(){
    public void onKeyDown(    KeyDownEvent event){
      configureButton();
    }
  }
);
  okayButton.setWidth(""String_Node_Str"");
  buttonsLayout.setSpacing(10);
  buttonsLayout.add(okayButton);
  baseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
  baseLayout.add(nameLayout);
  baseLayout.add(descriptionLayout);
  baseLayout.add(buttonsLayout);
  baseLayout.setSpacing(5);
  this.setWidget(baseLayout);
}","/** 
 * Sets up the controls in the dialog
 * @param SoftwarePackage The category to be updated in this dialog.
 */
private void initializeDialogReadOnly(GwtTradeoffReason tradeoffReason){
  VerticalPanel baseLayout=new VerticalPanel();
  VerticalPanel nameLayout=new VerticalPanel();
  VerticalPanel descriptionLayout=new VerticalPanel();
  HorizontalPanel buttonsLayout=new HorizontalPanel();
  this.setText(messages.editTradeoffReasonDialogBoxTitleReadOnly());
  nameLayout.add(new Label(messages.editTradeoffReasonDialogBoxName()));
  nameLayout.add(this.tradeoffReasonTextBox);
  this.tradeoffReasonTextBox.setWidth(""String_Node_Str"");
  this.tradeoffReasonTextBox.setSize(""String_Node_Str"",""String_Node_Str"");
  this.tradeoffReasonTextBox.setText(tradeoffReason.getTradeoffreason());
  Button okayButton=new Button(messages.editTradeoffReasonDialogBoxOkay(),new CancelHandler(this));
  okayButton.setWidth(""String_Node_Str"");
  buttonsLayout.setSpacing(10);
  buttonsLayout.add(okayButton);
  baseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
  baseLayout.add(nameLayout);
  baseLayout.add(descriptionLayout);
  baseLayout.add(buttonsLayout);
  baseLayout.setSpacing(5);
  this.setWidget(baseLayout);
}"
24785,"public void drawRateMatrixEvaluationCriteriaColum(){
  FlexCellFormatter formatter=this.matrix.getFlexCellFormatter();
  for (int j=0; j < softwarePackages.size(); j++) {
    Label packageLabel=new Label(softwarePackages.get(j).getName());
    final DecoratedPopupPanel simplePopup=new DecoratedPopupPanel(true);
    simplePopup.setWidth(""String_Node_Str"");
    simplePopup.setWidget(new HTML(softwarePackages.get(j).getDescription()));
    packageLabel.addMouseOverHandler(new MouseOverHandler(){
      public void onMouseOver(      MouseOverEvent event){
        Widget source=(Widget)event.getSource();
        int left=source.getAbsoluteLeft() + 40;
        int top=source.getAbsoluteTop() + 20;
        simplePopup.setPopupPosition(left,top);
        simplePopup.show();
      }
    }
);
    packageLabel.addMouseOutHandler(new MouseOutHandler(){
      public void onMouseOut(      MouseOutEvent event){
        simplePopup.hide();
      }
    }
);
    matrix.setWidget(j + 1,0,packageLabel);
    final SummaryElementHyperLinkElement tradeoffReasonLink=new SummaryElementHyperLinkElement(softwarePackages.get(j).getId(),""String_Node_Str"");
    final int index=j;
    tradeoffReasonLink.addClickHandler(new ClickHandler(){
      public void onClick(      ClickEvent event){
        editTradeoffReasonDialog=new EditTradeoffReasonDialog(tradeoffReasons.get(index),tradeoffReasons,FinalProductSelectionPane.this);
        editTradeoffReasonDialog.center();
        editTradeoffReasonDialog.setModal(true);
        editTradeoffReasonDialog.show();
      }
    }
);
    RadioButton rButton=new RadioButton(""String_Node_Str"");
    if (this.getCurrentState().getMode().equals(GwtModesType.ReadWrite)) {
      rButton.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          addRationaleDialog=new AddRationaleDialog(FinalProductSelectionPane.this,currentProject,softwarePackages.get(index));
          addRationaleDialog.center();
          addRationaleDialog.setModal(true);
          addRationaleDialog.show();
        }
      }
);
    }
    if (rationale != null && softwarePackages.get(j).getId() == rationale.getPackage().getId())     rButton.setValue(true);
 else {
      System.out.println(""String_Node_Str"");
    }
    if (j >= 1) {
      matrix.setWidget(j + 1,attributes.size() + listOfRequirements.size() + 2,tradeoffReasonLink);
      formatter.setHorizontalAlignment(j + 1,attributes.size() + listOfRequirements.size() + 2,HasHorizontalAlignment.ALIGN_RIGHT);
      formatter.setStyleName(j + 1,attributes.size() + listOfRequirements.size() + 2,""String_Node_Str"");
      matrix.setWidget(j + 1,attributes.size() + listOfRequirements.size() + 3,rButton);
      formatter.setHorizontalAlignment(j + 1,attributes.size() + listOfRequirements.size() + 3,HasHorizontalAlignment.ALIGN_CENTER);
      formatter.setStyleName(j + 1,attributes.size() + listOfRequirements.size() + 3,""String_Node_Str"");
    }
    formatter.setHorizontalAlignment(j + 1,0,HasHorizontalAlignment.ALIGN_RIGHT);
    formatter.setStyleName(j + 1,0,""String_Node_Str"");
  }
}","public void drawRateMatrixEvaluationCriteriaColum(){
  FlexCellFormatter formatter=this.matrix.getFlexCellFormatter();
  for (int j=0; j < softwarePackages.size(); j++) {
    Label packageLabel=new Label(softwarePackages.get(j).getName());
    final DecoratedPopupPanel simplePopup=new DecoratedPopupPanel(true);
    simplePopup.setWidth(""String_Node_Str"");
    simplePopup.setWidget(new HTML(softwarePackages.get(j).getDescription()));
    packageLabel.addMouseOverHandler(new MouseOverHandler(){
      public void onMouseOver(      MouseOverEvent event){
        Widget source=(Widget)event.getSource();
        int left=source.getAbsoluteLeft() + 40;
        int top=source.getAbsoluteTop() + 20;
        simplePopup.setPopupPosition(left,top);
        simplePopup.show();
      }
    }
);
    packageLabel.addMouseOutHandler(new MouseOutHandler(){
      public void onMouseOut(      MouseOutEvent event){
        simplePopup.hide();
      }
    }
);
    matrix.setWidget(j + 1,0,packageLabel);
    final SummaryElementHyperLinkElement tradeoffReasonLink=new SummaryElementHyperLinkElement(softwarePackages.get(j).getId(),""String_Node_Str"");
    final int index=j;
    tradeoffReasonLink.addClickHandler(new ClickHandler(){
      public void onClick(      ClickEvent event){
        editTradeoffReasonDialog=new EditTradeoffReasonDialog(tradeoffReasons.get(index),tradeoffReasons,FinalProductSelectionPane.this);
        editTradeoffReasonDialog.center();
        editTradeoffReasonDialog.setModal(true);
        editTradeoffReasonDialog.show();
      }
    }
);
    RadioButton rButton=new RadioButton(""String_Node_Str"");
    if (this.getCurrentState().getMode().equals(GwtModesType.ReadWrite)) {
      rButton.addClickHandler(new ClickHandler(){
        @Override public void onClick(        ClickEvent event){
          addRationaleDialog=new AddRationaleDialog(FinalProductSelectionPane.this,currentProject,softwarePackages.get(index));
          addRationaleDialog.center();
          addRationaleDialog.setModal(true);
          addRationaleDialog.show();
        }
      }
);
    }
 else {
      rButton.setEnabled(false);
    }
    if (rationale != null && softwarePackages.get(j).getId() == rationale.getPackage().getId())     rButton.setValue(true);
    if (j >= 1) {
      matrix.setWidget(j + 1,attributes.size() + listOfRequirements.size() + 2,tradeoffReasonLink);
      formatter.setHorizontalAlignment(j + 1,attributes.size() + listOfRequirements.size() + 2,HasHorizontalAlignment.ALIGN_RIGHT);
      formatter.setStyleName(j + 1,attributes.size() + listOfRequirements.size() + 2,""String_Node_Str"");
      matrix.setWidget(j + 1,attributes.size() + listOfRequirements.size() + 3,rButton);
      formatter.setHorizontalAlignment(j + 1,attributes.size() + listOfRequirements.size() + 3,HasHorizontalAlignment.ALIGN_CENTER);
      formatter.setStyleName(j + 1,attributes.size() + listOfRequirements.size() + 3,""String_Node_Str"");
    }
    formatter.setHorizontalAlignment(j + 1,0,HasHorizontalAlignment.ALIGN_RIGHT);
    formatter.setStyleName(j + 1,0,""String_Node_Str"");
  }
}"
24786,"public void PaneInitialization(){
  this.hideStatusBar();
  this.getContent().clear();
  HorizontalPanel hPanel=new HorizontalPanel();
  hPanel.setWidth(""String_Node_Str"");
  hPanel.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_LEFT);
  if (currentState.getUserProjectRole() == ProjectRole.Lead_Requirements_Engineer || currentState.getUserProjectRole() == ProjectRole.Requirements_Engineer) {
    if (currentState.getMode().equals(GwtModesType.ReadWrite)) {
      createImportPanel(hPanel,getCurrentState().getProjectID());
    }
  }
  this.getContent().add(hPanel);
  loadRiskTable();
  this.getContent().add(requirementTable);
  FlexTable buttonPanel=new FlexTable();
  Button done=new Button(messages.done());
  done.addStyleName(""String_Node_Str"");
  done.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      History.newItem(ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
    }
  }
);
  buttonPanel.setWidget(0,0,new Label(""String_Node_Str""));
  buttonPanel.setWidget(1,0,done);
  buttonPanel.setWidth(""String_Node_Str"");
  buttonPanel.getCellFormatter().setHorizontalAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT);
  this.getContent().add(buttonPanel);
}","public void PaneInitialization(){
  this.hideStatusBar();
  this.getContent().clear();
  HorizontalPanel hPanel=new HorizontalPanel();
  hPanel.setWidth(""String_Node_Str"");
  hPanel.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_LEFT);
  if (currentState.getUserProjectRole() == ProjectRole.Lead_Requirements_Engineer || currentState.getUserProjectRole() == ProjectRole.Requirements_Engineer) {
    if (currentState.getMode().equals(GwtModesType.ReadWrite)) {
      createImportPanel(hPanel,getCurrentState().getProjectID());
    }
  }
  this.getContent().add(hPanel);
  loadRiskTable();
  this.getContent().add(requirementTable);
  FlexTable buttonPanel=new FlexTable();
  Button done=new Button(messages.done());
  done.addStyleName(""String_Node_Str"");
  final int caseid=this.getCurrentState().getCaseID();
  done.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (caseid == 1)       History.newItem(ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
      if (caseid == 3)       History.newItem(ChooseStepCase3Pilot.generateNavigationId(ChooseStepCase3Pilot.PageId.home));
    }
  }
);
  buttonPanel.setWidget(0,0,new Label(""String_Node_Str""));
  buttonPanel.setWidget(1,0,done);
  buttonPanel.setWidth(""String_Node_Str"");
  buttonPanel.getCellFormatter().setHorizontalAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT);
  this.getContent().add(buttonPanel);
}"
24787,"public void updateRequirement(int requirementId,GwtRequirement gwtRequirement){
  gwtRequirement.setId(requirementId);
  this.requirementService.updateRequirement(gwtRequirement,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,messages.errorUpdatingRequirements());
    }
    public void onSuccess(    Void result){
      currentCommand=CommandTypes.read;
      loadProjectRequirements();
    }
  }
);
}","public void updateRequirement(int requirementId,GwtRequirement gwtRequirement){
  gwtRequirement.setId(requirementId);
  System.out.println(""String_Node_Str"");
  this.requirementService.updateRequirement(gwtRequirement,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      System.out.println(""String_Node_Str"" + caught);
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,messages.errorUpdatingRequirements());
    }
    public void onSuccess(    Void result){
      currentCommand=CommandTypes.read;
      loadProjectRequirements();
    }
  }
);
}"
24788,"public void onClick(ClickEvent event){
  riskDialogBox=new RiskDialogBox(riksPane,listOfProjectFilteredRisks,listOfRiksMapppedToRequirement);
  riskDialogBox.setModal(true);
  riskDialogBox.center();
  currentDialog=""String_Node_Str"";
  riskDialogBox.show();
}","public void onClick(ClickEvent event){
  artifactDialog=new ArtifactDialogBox(riksPane,listOfProjectArtifacts,listOfArtifactsMappedToRequirement,messages.associateArtifacts());
  artifactDialog.setModal(true);
  artifactDialog.center();
  artifactDialog.show();
  currentDialog=""String_Node_Str"";
}"
24789,"public void saveRequirement(int requirementId){
  if (validateRequiredFields()) {
    GwtRequirement gwtRequirement=getFormRiskValues();
    if (requirementId == -1) {
      addRequirementToProject(gwtRequirement);
    }
 else {
      updateRequirement(requirementId,gwtRequirement);
    }
  }
}","public void saveRequirement(int requirementId){
  if (validateRequiredFields()) {
    GwtRequirement gwtRequirement=getFormRiskValues();
    if (requirementId == -1) {
      addRequirementToProject(gwtRequirement);
    }
 else {
      System.out.println(""String_Node_Str"" + requirementId + ""String_Node_Str""+ gwtRequirement);
      updateRequirement(requirementId,gwtRequirement);
    }
  }
}"
24790,"@AllowedRoles(roles={Roles.Contractor,Roles.Security_Specialist,Roles.Administrator,Roles.Acquisition_Organization_Engineer}) public void updateRequirement(GwtRequirement gwtRequirement) throws SquareException {
  Requirement r=requirementDao.fetch(gwtRequirement.getId());
  r.getRisks().clear();
  r.getArtifacts().clear();
  r.getGoals().clear();
  r.update(gwtRequirement);
  if (gwtRequirement.getRisks().isEmpty()) {
    SquareException se=new SquareException(""String_Node_Str"");
    se.setType(ExceptionType.missingLink);
    throw se;
  }
  if (gwtRequirement.getArtifacts().isEmpty()) {
    SquareException se=new SquareException(""String_Node_Str"");
    se.setType(ExceptionType.missingLink);
    throw se;
  }
  requirementDao.update(r);
}","@AllowedRoles(roles={Roles.Contractor,Roles.Security_Specialist,Roles.Administrator,Roles.Acquisition_Organization_Engineer}) public void updateRequirement(GwtRequirement gwtRequirement) throws SquareException {
  Requirement r=requirementDao.fetch(gwtRequirement.getId());
  r.getRisks().clear();
  r.getArtifacts().clear();
  r.getGoals().clear();
  r.update(gwtRequirement);
  requirementDao.update(r);
}"
24791,"@AllowedRoles(roles={Roles.Contractor,Roles.Security_Specialist,Roles.Administrator,Roles.Acquisition_Organization_Engineer}) public int addRequirementToProject(Integer projectId,GwtRequirement gwtRequirement) throws SquareException {
  Project p=projectDao.fetch(projectId);
  Requirement requirement=new Requirement(gwtRequirement);
  requirement.setProject(p);
  if (gwtRequirement.getArtifacts().isEmpty()) {
    SquareException se=new SquareException(""String_Node_Str"");
    se.setType(ExceptionType.missingLink);
    throw se;
  }
  requirementDao.create(requirement);
  p.getRequirements().add(requirement);
  return requirement.getId();
}","@AllowedRoles(roles={Roles.Contractor,Roles.Security_Specialist,Roles.Administrator,Roles.Acquisition_Organization_Engineer}) public int addRequirementToProject(Integer projectId,GwtRequirement gwtRequirement) throws SquareException {
  Project p=projectDao.fetch(projectId);
  Requirement requirement=new Requirement(gwtRequirement);
  requirement.setProject(p);
  requirementDao.create(requirement);
  p.getRequirements().add(requirement);
  return requirement.getId();
}"
24792,"/** 
 * Sets up the controls in the dialog
 * @param SoftwarePackage The category to be updated in this dialog.
 */
private void initializeDialogReadWrite(GwtTradeoffReason tradeoffReason){
  VerticalPanel baseLayout=new VerticalPanel();
  VerticalPanel nameLayout=new VerticalPanel();
  VerticalPanel descriptionLayout=new VerticalPanel();
  HorizontalPanel buttonsLayout=new HorizontalPanel();
  this.setText(messages.editTradeoffReasonDialogBoxTitle());
  nameLayout.add(new Label(messages.editTradeoffReasonDialogBoxName()));
  nameLayout.add(this.tradeoffReasonTextBox);
  this.tradeoffReasonTextBox.setWidth(""String_Node_Str"");
  this.tradeoffReasonTextBox.setSize(""String_Node_Str"",""String_Node_Str"");
  this.tradeoffReasonTextBox.setText(tradeoffReason.getTradeoffreason());
  saveButton=new Button(messages.editTradeoffReasonDialogBoxSave(),new SaveHandler(this,tradeoffReason));
  Button cancelButton=new Button(messages.editTradeoffReasonDialogBoxCancel(),new CancelHandler(this));
  this.tradeoffReasonTextBox.addKeyUpHandler(new KeyUpHandler(){
    public void onKeyUp(    KeyUpEvent event){
      configureButton();
    }
  }
);
  this.tradeoffReasonTextBox.addChangeHandler(new ChangeHandler(){
    public void onChange(    ChangeEvent event){
      configureButton();
    }
  }
);
  this.tradeoffReasonTextBox.addKeyDownHandler(new KeyDownHandler(){
    public void onKeyDown(    KeyDownEvent event){
      configureButton();
    }
  }
);
  saveButton.setWidth(""String_Node_Str"");
  cancelButton.setWidth(""String_Node_Str"");
  buttonsLayout.setSpacing(10);
  buttonsLayout.add(saveButton);
  buttonsLayout.add(cancelButton);
  baseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
  baseLayout.add(nameLayout);
  baseLayout.add(descriptionLayout);
  baseLayout.add(buttonsLayout);
  baseLayout.setSpacing(5);
  this.setWidget(baseLayout);
}","/** 
 * Sets up the controls in the dialog
 * @param SoftwarePackage The category to be updated in this dialog.
 */
private void initializeDialogReadWrite(GwtTradeoffReason tradeoffReason){
  VerticalPanel baseLayout=new VerticalPanel();
  VerticalPanel nameLayout=new VerticalPanel();
  VerticalPanel descriptionLayout=new VerticalPanel();
  HorizontalPanel buttonsLayout=new HorizontalPanel();
  this.setText(messages.editTradeoffReasonDialogBoxTitle());
  nameLayout.add(new Label(messages.editTradeoffReasonDialogBoxName()));
  nameLayout.add(this.tradeoffReasonTextBox);
  this.tradeoffReasonTextBox.setWidth(""String_Node_Str"");
  this.tradeoffReasonTextBox.setSize(""String_Node_Str"",""String_Node_Str"");
  this.tradeoffReasonTextBox.setText(tradeoffReason.getTradeoffreason());
  saveButton=new Button(messages.editTradeoffReasonDialogBoxOkay(),new SaveHandler(this,tradeoffReason));
  Button cancelButton=new Button(messages.editTradeoffReasonDialogBoxCancel(),new CancelHandler(this));
  saveButton.setWidth(""String_Node_Str"");
  cancelButton.setWidth(""String_Node_Str"");
  buttonsLayout.setSpacing(10);
  buttonsLayout.add(saveButton);
  buttonsLayout.add(cancelButton);
  baseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
  baseLayout.add(nameLayout);
  baseLayout.add(descriptionLayout);
  baseLayout.add(buttonsLayout);
  baseLayout.setSpacing(5);
  this.setWidget(baseLayout);
}"
24793,"/** 
 * Sets up the controls in the dialog
 * @param SoftwarePackage The category to be updated in this dialog.
 */
private void initializeDialogReadOnly(GwtTradeoffReason tradeoffReason){
  System.out.println(""String_Node_Str"");
  VerticalPanel baseLayout=new VerticalPanel();
  VerticalPanel nameLayout=new VerticalPanel();
  VerticalPanel descriptionLayout=new VerticalPanel();
  HorizontalPanel buttonsLayout=new HorizontalPanel();
  this.setText(messages.editTradeoffReasonDialogBoxTitleReadOnly());
  nameLayout.add(new Label(messages.editTradeoffReasonDialogBoxName()));
  nameLayout.add(this.tradeoffReasonTextBox);
  this.tradeoffReasonTextBox.setWidth(""String_Node_Str"");
  this.tradeoffReasonTextBox.setSize(""String_Node_Str"",""String_Node_Str"");
  this.tradeoffReasonTextBox.setText(tradeoffReason.getTradeoffreason());
  saveButton=new Button(messages.editTradeoffReasonDialogBoxSave(),new SaveHandler(this,tradeoffReason));
  Button okayButton=new Button(messages.editTradeoffReasonDialogBoxOkay(),new CancelHandler(this));
  this.tradeoffReasonTextBox.addKeyUpHandler(new KeyUpHandler(){
    public void onKeyUp(    KeyUpEvent event){
      configureButton();
    }
  }
);
  this.tradeoffReasonTextBox.addChangeHandler(new ChangeHandler(){
    public void onChange(    ChangeEvent event){
      configureButton();
    }
  }
);
  this.tradeoffReasonTextBox.addKeyDownHandler(new KeyDownHandler(){
    public void onKeyDown(    KeyDownEvent event){
      configureButton();
    }
  }
);
  saveButton.setWidth(""String_Node_Str"");
  okayButton.setWidth(""String_Node_Str"");
  buttonsLayout.setSpacing(10);
  buttonsLayout.add(okayButton);
  baseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
  baseLayout.add(nameLayout);
  baseLayout.add(descriptionLayout);
  baseLayout.add(buttonsLayout);
  baseLayout.setSpacing(5);
  this.setWidget(baseLayout);
}","/** 
 * Sets up the controls in the dialog
 * @param SoftwarePackage The category to be updated in this dialog.
 */
private void initializeDialogReadOnly(GwtTradeoffReason tradeoffReason){
  VerticalPanel baseLayout=new VerticalPanel();
  VerticalPanel nameLayout=new VerticalPanel();
  VerticalPanel descriptionLayout=new VerticalPanel();
  HorizontalPanel buttonsLayout=new HorizontalPanel();
  this.setText(messages.editTradeoffReasonDialogBoxTitleReadOnly());
  nameLayout.add(new Label(messages.editTradeoffReasonDialogBoxName()));
  nameLayout.add(this.tradeoffReasonTextBox);
  this.tradeoffReasonTextBox.setWidth(""String_Node_Str"");
  this.tradeoffReasonTextBox.setSize(""String_Node_Str"",""String_Node_Str"");
  this.tradeoffReasonTextBox.setText(tradeoffReason.getTradeoffreason());
  saveButton=new Button(messages.editTradeoffReasonDialogBoxOkay(),new SaveHandler(this,tradeoffReason));
  Button okayButton=new Button(messages.editTradeoffReasonDialogBoxOkay(),new CancelHandler(this));
  saveButton.setWidth(""String_Node_Str"");
  okayButton.setWidth(""String_Node_Str"");
  buttonsLayout.setSpacing(10);
  buttonsLayout.add(okayButton);
  baseLayout.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
  baseLayout.add(nameLayout);
  baseLayout.add(descriptionLayout);
  baseLayout.add(buttonsLayout);
  baseLayout.setSpacing(5);
  this.setWidget(baseLayout);
}"
24794,"public void loadSubGoalsFromProject(){
  IdentifyGoalsAssetsServiceAsync service=GWT.create(IdentifyGoalsAssetsService.class);
  ServiceDefTarget endpoint=(ServiceDefTarget)service;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  service.loadBusinessGoalInfo(getCurrentState().getProjectID(),new AsyncCallback<GwtBusinessGoal>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
    public void onSuccess(    GwtBusinessGoal result){
      businessGoalInfo=result;
      listOfProjectSubGoals=businessGoalInfo.getSubGoals();
      loadArtifactsFromProject();
      System.out.println(""String_Node_Str"");
    }
  }
);
}","public void loadSubGoalsFromProject(){
  IdentifyGoalsAssetsServiceAsync service=GWT.create(IdentifyGoalsAssetsService.class);
  ServiceDefTarget endpoint=(ServiceDefTarget)service;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  service.loadBusinessGoalInfo(getCurrentState().getProjectID(),new AsyncCallback<GwtBusinessGoal>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
    public void onSuccess(    GwtBusinessGoal result){
      businessGoalInfo=result;
      listOfProjectSubGoals=businessGoalInfo.getSubGoals();
      loadArtifactsFromProject();
    }
  }
);
}"
24795,"public void loadArtifactsFromProject(){
  System.out.println(""String_Node_Str"");
  CollectArtifactsServiceAsync service=GWT.create(CollectArtifactsService.class);
  int projectId=this.getCurrentState().getProjectID();
  ServiceDefTarget endpoint=(ServiceDefTarget)service;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  service.getAllArtifacts(projectId,new AsyncCallback<List<GwtArtifact>>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
    public void onSuccess(    List<GwtArtifact> result){
      loadProjectRequirements();
      System.out.println(""String_Node_Str"");
    }
  }
);
}","public void loadArtifactsFromProject(){
  CollectArtifactsServiceAsync service=GWT.create(CollectArtifactsService.class);
  int projectId=this.getCurrentState().getProjectID();
  ServiceDefTarget endpoint=(ServiceDefTarget)service;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  service.getAllArtifacts(projectId,new AsyncCallback<List<GwtArtifact>>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
    public void onSuccess(    List<GwtArtifact> result){
      loadProjectRequirements();
      System.out.println(""String_Node_Str"");
    }
  }
);
}"
24796,"@AllowedRoles(roles={Roles.Contractor,Roles.Security_Specialist,Roles.Administrator,Roles.Acquisition_Organization_Engineer}) public void updateRequirement(GwtRequirement gwtRequirement) throws SquareException {
  Requirement r=requirementDao.fetch(gwtRequirement.getId());
  r.getRisks().clear();
  r.getArtifacts().clear();
  r.getGoals().clear();
  r.update(gwtRequirement);
  requirementDao.update(r);
}","@AllowedRoles(roles={Roles.Contractor,Roles.Security_Specialist,Roles.Administrator,Roles.Acquisition_Organization_Engineer}) public void updateRequirement(GwtRequirement gwtRequirement) throws SquareException {
  Requirement r=requirementDao.fetch(gwtRequirement.getId());
  r.getRisks().clear();
  r.getArtifacts().clear();
  r.getGoals().clear();
  r.update(gwtRequirement);
  System.out.println(""String_Node_Str"" + r.getStatus());
  System.out.println(""String_Node_Str"" + r.getTitle());
  requirementDao.update(r);
}"
24797,"private void setRateValue(final int packageID,final int attributeID,final int value){
  this.service.setRateValue(currentProject.getId(),packageID,attributeID,value,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.rateAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
setValueFromlistOfRateValues(packageID,attributeID,value);
}
}
);
}","private void setRateValue(final int packageID,final int attributeID,final int value){
  this.service.setRateValue(currentProject.getId(),packageID,attributeID,value,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.rateAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
setValueFromlistOfRateValues(packageID,attributeID,value);
loadRequirementRatings();
}
}
);
}"
24798,"private void loadRatings(){
  service.getRateValues(currentProject.getId(),new AsyncCallback<List<GwtRating>>(){
    @Override public void onSuccess(    List<GwtRating> result){
      ratings=result;
      drawRateMatrix();
      getTotalsFromMatrix();
      PaneInitialization();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.ratingsRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}","private void loadRatings(){
  service.getRateValues(currentProject.getId(),new AsyncCallback<List<GwtRating>>(){
    @Override public void onSuccess(    List<GwtRating> result){
      loadRequirementRatings();
      ratings=result;
      drawRateMatrix();
      getTotalsFromMatrix();
      PaneInitialization();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.ratingsRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}"
24799,"private void loadTradeoffReasons(){
  performTradeoffService.getTradeoffReasons(currentProject.getId(),new AsyncCallback<List<GwtTradeoffReason>>(){
    @Override public void onSuccess(    List<GwtTradeoffReason> result){
      tradeoffReasons=result;
      drawRateMatrix();
      getTotalsFromMatrix();
      PaneInitialization();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.ratingsRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}","private void loadTradeoffReasons(){
  performTradeoffService.getTradeoffReasons(currentProject.getId(),new AsyncCallback<List<GwtTradeoffReason>>(){
    @Override public void onSuccess(    List<GwtTradeoffReason> result){
      tradeoffReasons=result;
      drawRateMatrix();
      getTotalsFromMatrix();
      PaneInitialization();
      loadAttributes();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.ratingsRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}"
24800,"private void setRequirementRateValue(final int packageID,final int requirementID,final int value){
  this.performTradeoffService.setRequirementRateValue(currentProject.getId(),requirementID,packageID,value,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.rateAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
setValueFromlistOfRequirementRateValues(requirementID,packageID,value);
}
}
);
}","private void setRequirementRateValue(final int packageID,final int requirementID,final int value){
  this.performTradeoffService.setRequirementRateValue(currentProject.getId(),requirementID,packageID,value,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.rateAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
setValueFromlistOfRequirementRateValues(requirementID,packageID,value);
loadRequirementRatings();
}
}
);
}"
24801,"@AllowedRoles(roles={Roles.Contractor,Roles.Security_Specialist,Roles.Administrator}) public void updateRequirement(GwtRequirement gwtRequirement) throws SquareException {
  Requirement r=requirementDao.fetch(gwtRequirement.getId());
  r.getRisks().clear();
  r.getArtifacts().clear();
  r.getGoals().clear();
  r.update(gwtRequirement);
  if (gwtRequirement.getRisks().isEmpty()) {
    SquareException se=new SquareException(""String_Node_Str"");
    se.setType(ExceptionType.missingLink);
    throw se;
  }
  if (gwtRequirement.getArtifacts().isEmpty()) {
    SquareException se=new SquareException(""String_Node_Str"");
    se.setType(ExceptionType.missingLink);
    throw se;
  }
  requirementDao.update(r);
}","@AllowedRoles(roles={Roles.Contractor,Roles.Security_Specialist,Roles.Administrator,Roles.Acquisition_Organization_Engineer}) public void updateRequirement(GwtRequirement gwtRequirement) throws SquareException {
  Requirement r=requirementDao.fetch(gwtRequirement.getId());
  r.getRisks().clear();
  r.getArtifacts().clear();
  r.getGoals().clear();
  r.update(gwtRequirement);
  if (gwtRequirement.getRisks().isEmpty()) {
    SquareException se=new SquareException(""String_Node_Str"");
    se.setType(ExceptionType.missingLink);
    throw se;
  }
  if (gwtRequirement.getArtifacts().isEmpty()) {
    SquareException se=new SquareException(""String_Node_Str"");
    se.setType(ExceptionType.missingLink);
    throw se;
  }
  requirementDao.update(r);
}"
24802,"@AllowedRoles(roles={Roles.Contractor,Roles.Security_Specialist,Roles.Administrator}) public int addRequirementToProject(Integer projectId,GwtRequirement gwtRequirement) throws SquareException {
  Project p=projectDao.fetch(projectId);
  Requirement requirement=new Requirement(gwtRequirement);
  requirement.setProject(p);
  if (gwtRequirement.getArtifacts().isEmpty()) {
    SquareException se=new SquareException(""String_Node_Str"");
    se.setType(ExceptionType.missingLink);
    throw se;
  }
  requirementDao.create(requirement);
  p.getRequirements().add(requirement);
  return requirement.getId();
}","@AllowedRoles(roles={Roles.Contractor,Roles.Security_Specialist,Roles.Administrator,Roles.Acquisition_Organization_Engineer}) public int addRequirementToProject(Integer projectId,GwtRequirement gwtRequirement) throws SquareException {
  Project p=projectDao.fetch(projectId);
  Requirement requirement=new Requirement(gwtRequirement);
  requirement.setProject(p);
  if (gwtRequirement.getArtifacts().isEmpty()) {
    SquareException se=new SquareException(""String_Node_Str"");
    se.setType(ExceptionType.missingLink);
    throw se;
  }
  requirementDao.create(requirement);
  p.getRequirements().add(requirement);
  return requirement.getId();
}"
24803,"@AllowedRoles(roles={Roles.Contractor,Roles.Security_Specialist,Roles.Administrator}) public void deleteRequirement(Integer requirementId,Integer projectId) throws SquareException {
  requirementDao.deleteById(requirementId);
  requirementDao.zeroOutPriorities(projectId);
}","@AllowedRoles(roles={Roles.Contractor,Roles.Security_Specialist,Roles.Administrator,Roles.Acquisition_Organization_Engineer}) public void deleteRequirement(Integer requirementId,Integer projectId) throws SquareException {
  requirementDao.deleteById(requirementId);
  requirementDao.zeroOutPriorities(projectId);
}"
24804,"public void loadRationale(){
  System.out.println(""String_Node_Str"");
  finalProductSelectionService.getRationale(currentProject,new AsyncCallback<GwtRationale>(){
    @Override public void onSuccess(    GwtRationale result){
      rationale=result;
      if (result == null) {
        rationaleLabel=new Label(""String_Node_Str"");
      }
 else {
        rationaleLabel=new Label(result.getRationale());
      }
      rationaleLabel.setWidth(""String_Node_Str"");
      rationaleLabel.setSize(""String_Node_Str"",""String_Node_Str"");
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.rationaleRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}","public void loadRationale(){
  System.out.println(""String_Node_Str"");
  finalProductSelectionService.getRationale(currentProject,new AsyncCallback<GwtRationale>(){
    @Override public void onSuccess(    GwtRationale result){
      rationale=result;
      if (result == null) {
        rationaleLabel=new Label(""String_Node_Str"");
      }
 else {
        rationaleLabel=new Label(result.getRationale());
      }
      rationaleLabel.setWidth(""String_Node_Str"");
      rationaleLabel.setSize(""String_Node_Str"",""String_Node_Str"");
      loadTradeoffReasons();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.rationaleRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}"
24805,"private void loadRatings(){
  service.getRateValues(currentProject.getId(),new AsyncCallback<List<GwtRating>>(){
    @Override public void onSuccess(    List<GwtRating> result){
      System.out.println(""String_Node_Str"" + result.size());
      System.out.println(""String_Node_Str"" + result.get(0).getPackageId());
      ratings=result;
      drawRateMatrix();
      getTotalsFromMatrix();
      PaneInitialization();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.ratingsRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}","private void loadRatings(){
  service.getRateValues(currentProject.getId(),new AsyncCallback<List<GwtRating>>(){
    @Override public void onSuccess(    List<GwtRating> result){
      ratings=result;
      loadRationale();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.ratingsRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}"
24806,"public FinalProductSelectionPane(final State stateInfo){
  super(stateInfo);
  this.showLoadingStatusBar();
  ServiceDefTarget endpoint=(ServiceDefTarget)service;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  ServiceDefTarget endpoint2=(ServiceDefTarget)finalProductSelectionService;
  endpoint2.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  currentProject=new GwtProject();
  currentProject.setId(this.getCurrentState().getProjectID());
  isReadOnly=true;
  loadAttributes();
  loadRationale();
  loadTradeoffReasons();
}","public FinalProductSelectionPane(final State stateInfo){
  super(stateInfo);
  this.showLoadingStatusBar();
  ServiceDefTarget endpoint=(ServiceDefTarget)service;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  ServiceDefTarget endpoint2=(ServiceDefTarget)finalProductSelectionService;
  endpoint2.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  currentProject=new GwtProject();
  currentProject.setId(this.getCurrentState().getProjectID());
  isReadOnly=true;
  loadAttributes();
}"
24807,"private void loadTradeoffReasons(){
  finalProductSelectionService.getTradeoffReasons(currentProject.getId(),new AsyncCallback<List<GwtTradeoffReason>>(){
    @Override public void onSuccess(    List<GwtTradeoffReason> result){
      System.out.println(""String_Node_Str"" + result.size());
      System.out.println(""String_Node_Str"" + result.get(0).getTradeoffreason());
      tradeoffReasons=result;
      drawRateMatrix();
      getTotalsFromMatrix();
      PaneInitialization();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.ratingsRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}","private void loadTradeoffReasons(){
  finalProductSelectionService.getTradeoffReasons(currentProject.getId(),new AsyncCallback<List<GwtTradeoffReason>>(){
    @Override public void onSuccess(    List<GwtTradeoffReason> result){
      tradeoffReasons=result;
      loadRequirementRatings();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.ratingsRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}"
24808,"private void loadRequirementRatings(){
  finalProductSelectionService.getRequirementRateValues(currentProject.getId(),new AsyncCallback<List<GwtRequirementRating>>(){
    @Override public void onSuccess(    List<GwtRequirementRating> result){
      System.out.println(""String_Node_Str"" + result.size());
      System.out.println(""String_Node_Str"" + result.get(0).getPackageId());
      requirementRatings=result;
      drawRateMatrix();
      getTotalsFromMatrix();
      PaneInitialization();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.ratingsRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}","private void loadRequirementRatings(){
  finalProductSelectionService.getRequirementRateValues(currentProject.getId(),new AsyncCallback<List<GwtRequirementRating>>(){
    @Override public void onSuccess(    List<GwtRequirementRating> result){
      requirementRatings=result;
      drawRateMatrix();
      getTotalsFromMatrix();
      PaneInitialization();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.ratingsRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}"
24809,"private void loadPackages(){
  final StepStatus stepStatus=StepStatus.NotStarted;
  service.getSoftwarePackages(currentProject,stepStatus,new AsyncCallback<List<GwtSoftwarePackage>>(){
    @Override public void onSuccess(    List<GwtSoftwarePackage> result){
      softwarePackages=result;
      System.out.println(""String_Node_Str"" + result.size());
      loadRatings();
      loadRequirementRatings();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.packagesRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}","private void loadPackages(){
  final StepStatus stepStatus=StepStatus.NotStarted;
  service.getSoftwarePackages(currentProject,stepStatus,new AsyncCallback<List<GwtSoftwarePackage>>(){
    @Override public void onSuccess(    List<GwtSoftwarePackage> result){
      softwarePackages=result;
      loadRatings();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.packagesRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}"
24810,"protected void updateQAinDB(GwtQualityAttribute gwtQualityAttribute){
  this.service.updateQualityAttribute(gwtQualityAttribute,currentProject,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.rateAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
loadAttributes();
}
}
);
}","protected void updateQAinDB(GwtQualityAttribute gwtQualityAttribute){
  this.service.updateQualityAttribute(gwtQualityAttribute,currentProject,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.QAAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
loadAttributes();
}
}
);
}"
24811,"public void onFailure(Throwable caught){
  if (caught instanceof SquareException) {
    SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
      Window.alert(messages.rateAuthorization());
    break;
default :
  Window.alert(messages.error());
break;
}
}
 else {
Window.alert(messages.error());
}
}","public void onFailure(Throwable caught){
  if (caught instanceof SquareException) {
    SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
      Window.alert(messages.QAAuthorization());
    break;
default :
  Window.alert(messages.error());
break;
}
}
 else {
Window.alert(messages.error());
}
}"
24812,"/** 
 * Contains RPC call to Set the rates
 * @param packageID
 * @param attributeID
 * @param value
 */
private void setRateValue(final int packageID,final int attributeID,final int value){
  this.service.setRateValue(currentProject.getId(),packageID,attributeID,value,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.rateAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
setValueFromlistOfRateValues(packageID,attributeID,value);
}
}
);
}","/** 
 * Contains RPC call to Set the rates
 * @param packageID
 * @param attributeID
 * @param value
 */
private void setRateValue(final int packageID,final int attributeID,final int value){
  this.service.setRateValue(currentProject.getId(),packageID,attributeID,value,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.rateAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
setValueFromlistOfRateValues(packageID,attributeID,value);
drawRateMatrix();
}
}
);
}"
24813,"public void removeSoftwarePackage(GwtSoftwarePackage current){
  this.service.removeSoftwarePackage(current,currentProject,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.rateAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
loadAttributes();
}
}
);
}","public void removeSoftwarePackage(GwtSoftwarePackage current){
  this.service.removeSoftwarePackage(current,currentProject,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.SPAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
loadAttributes();
}
}
);
}"
24814,"public void removeQualityAttribute(GwtQualityAttribute current){
  this.service.removeQualityAttribute(current,currentProject,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.rateAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
loadAttributes();
}
}
);
}","public void removeQualityAttribute(GwtQualityAttribute current){
  this.service.removeQualityAttribute(current,currentProject,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.QAAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
loadAttributes();
}
}
);
}"
24815,"public void onChange(ChangeEvent event){
  if (rateValueTextbox.getText().trim().length() == 0) {
    rateValueTextbox.setText(""String_Node_Str"");
  }
  char keyCode;
  if (rateValueTextbox.getText().trim().length() == 1) {
    keyCode=rateValueTextbox.getText().trim().charAt(0);
    if (keyCode >= '0' && keyCode <= '3') {
      getTotalsFromMatrix();
      setRateValue(rateValueTextbox.getTecniqueID(),rateValueTextbox.getEvaluationID(),Integer.parseInt(rateValueTextbox.getText()));
      rateValueTextbox.setOldValue(rateValueTextbox.getText());
    }
 else {
      rateValueTextbox.setText(rateValueTextbox.getOldValue());
    }
  }
 else {
    rateValueTextbox.setText(rateValueTextbox.getOldValue());
  }
}","public void onChange(ChangeEvent event){
  if (rateValueTextbox.getText().trim().length() == 0) {
    rateValueTextbox.setText(""String_Node_Str"");
  }
  char keyCode;
  if (rateValueTextbox.getText().trim().length() == 1) {
    keyCode=rateValueTextbox.getText().trim().charAt(0);
    if (keyCode >= '0' && keyCode <= '3') {
      getTotalsFromMatrix();
      setRateValue(rateValueTextbox.getPackageID(),rateValueTextbox.getAttributeID(),Integer.parseInt(rateValueTextbox.getText()));
      rateValueTextbox.setOldValue(rateValueTextbox.getText());
    }
 else {
      rateValueTextbox.setText(rateValueTextbox.getOldValue());
    }
  }
 else {
    rateValueTextbox.setText(rateValueTextbox.getOldValue());
  }
}"
24816,"private void addSPtoDB(GwtSoftwarePackage qa){
  this.service.addSoftwarePackage(currentProject,qa,new AsyncCallback<GwtSoftwarePackage>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.rateAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(GwtSoftwarePackage result){
loadAttributes();
}
}
);
}","private void addSPtoDB(GwtSoftwarePackage qa){
  this.service.addSoftwarePackage(currentProject,qa,new AsyncCallback<GwtSoftwarePackage>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.SPAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(GwtSoftwarePackage result){
loadAttributes();
}
}
);
}"
24817,"public void drawRateMatrixValues(){
  FlexCellFormatter formatter=this.matrix.getFlexCellFormatter();
  for (int i=0; i < attributes.size(); i++) {
    for (int j=0, widgetCount=0; j < softwarePackages.size(); j++, ++widgetCount) {
      int tID=attributes.get(i).getId();
      int eID=softwarePackages.get(j).getId();
      int value=getValueFromlistOfRateValues(eID,tID);
      if (isReadOnly) {
        Label valueLabel=new Label(String.valueOf(value));
        valueLabel.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
        if (j == 0) {
          matrix.setWidget(1,i + 1,valueLabel);
          formatter.setHorizontalAlignment(1,i + 1,HasHorizontalAlignment.ALIGN_CENTER);
          formatter.setStyleName(1,i + 1,""String_Node_Str"");
          ++widgetCount;
        }
 else {
          matrix.setWidget(widgetCount + 1,i + 1,valueLabel);
          formatter.setHorizontalAlignment(widgetCount + 1,i + 1,HasHorizontalAlignment.ALIGN_CENTER);
          formatter.setStyleName(widgetCount + 1,i + 1,""String_Node_Str"");
        }
      }
 else {
        final RateValueTextbox rateValueTextbox=new RateValueTextbox(tID,eID,value);
        rateValueTextbox.setTextAlignment(TextBox.ALIGN_CENTER);
        rateValueTextbox.addKeyPressHandler(new KeyPressHandler(){
          public void onKeyPress(          KeyPressEvent event){
            char keyCode=event.getCharCode();
            if (((keyCode < '0' || keyCode > '3')) && (keyCode != (char)KeyCodes.KEY_TAB) && (keyCode != (char)KeyCodes.KEY_BACKSPACE)&& (keyCode != (char)KeyCodes.KEY_DELETE)&& (keyCode != (char)KeyCodes.KEY_ENTER)&& (keyCode != (char)KeyCodes.KEY_HOME)&& (keyCode != (char)KeyCodes.KEY_END)&& (keyCode != (char)KeyCodes.KEY_LEFT)&& (keyCode != (char)KeyCodes.KEY_UP)&& (keyCode != (char)KeyCodes.KEY_RIGHT)&& (keyCode != (char)KeyCodes.KEY_DOWN)) {
              rateValueTextbox.cancelKey();
            }
          }
        }
);
        rateValueTextbox.addFocusHandler(new FocusHandler(){
          public void onFocus(          FocusEvent event){
            rateValueTextbox.setSelectionRange(0,rateValueTextbox.getText().length());
          }
        }
);
        rateValueTextbox.addChangeHandler(new ChangeHandler(){
          public void onChange(          ChangeEvent event){
            if (rateValueTextbox.getText().trim().length() == 0) {
              rateValueTextbox.setText(""String_Node_Str"");
            }
            char keyCode;
            if (rateValueTextbox.getText().trim().length() == 1) {
              keyCode=rateValueTextbox.getText().trim().charAt(0);
              if (keyCode >= '0' && keyCode <= '3') {
                getTotalsFromMatrix();
                setRateValue(rateValueTextbox.getTecniqueID(),rateValueTextbox.getEvaluationID(),Integer.parseInt(rateValueTextbox.getText()));
                rateValueTextbox.setOldValue(rateValueTextbox.getText());
              }
 else {
                rateValueTextbox.setText(rateValueTextbox.getOldValue());
              }
            }
 else {
              rateValueTextbox.setText(rateValueTextbox.getOldValue());
            }
          }
        }
);
        if (j == 0) {
          matrix.setWidget(1,i + 1,rateValueTextbox);
          formatter.setHorizontalAlignment(1,i + 1,HasHorizontalAlignment.ALIGN_CENTER);
          formatter.setStyleName(1,i + 1,""String_Node_Str"");
          ++widgetCount;
        }
 else {
          matrix.setWidget(widgetCount + 1,i + 1,rateValueTextbox);
          formatter.setHorizontalAlignment(widgetCount + 1,i + 1,HasHorizontalAlignment.ALIGN_CENTER);
          formatter.setStyleName(widgetCount + 1,i + 1,""String_Node_Str"");
        }
      }
      RateValueLabel totalLabel=new RateValueLabel(attributes.get(i).getId());
      totalLabel.setText(""String_Node_Str"");
      if (widgetCount > 1) {
        matrix.setWidget(widgetCount + 1,attributes.size() + 1,totalLabel);
        formatter.setHorizontalAlignment(widgetCount + 1,attributes.size() + 1,HasHorizontalAlignment.ALIGN_CENTER);
        formatter.setStyleName(widgetCount + 1,attributes.size() + 1,""String_Node_Str"");
      }
    }
  }
}","public void drawRateMatrixValues(){
  FlexCellFormatter formatter=this.matrix.getFlexCellFormatter();
  for (int i=0; i < attributes.size(); i++) {
    for (int j=0, widgetCount=0; j < softwarePackages.size(); j++, ++widgetCount) {
      int tID=attributes.get(i).getId();
      int eID=softwarePackages.get(j).getId();
      int value=getValueFromlistOfRateValues(eID,tID);
      if (isReadOnly) {
        Label valueLabel=new Label(String.valueOf(value));
        valueLabel.setHorizontalAlignment(HasHorizontalAlignment.ALIGN_CENTER);
        if (j == 0) {
          matrix.setWidget(1,i + 1,valueLabel);
          formatter.setHorizontalAlignment(1,i + 1,HasHorizontalAlignment.ALIGN_CENTER);
          formatter.setStyleName(1,i + 1,""String_Node_Str"");
          ++widgetCount;
        }
 else {
          matrix.setWidget(widgetCount + 1,i + 1,valueLabel);
          formatter.setHorizontalAlignment(widgetCount + 1,i + 1,HasHorizontalAlignment.ALIGN_CENTER);
          formatter.setStyleName(widgetCount + 1,i + 1,""String_Node_Str"");
        }
      }
 else {
        final RateValueTextbox rateValueTextbox=new RateValueTextbox(tID,eID,value);
        rateValueTextbox.setTextAlignment(TextBox.ALIGN_CENTER);
        rateValueTextbox.addKeyPressHandler(new KeyPressHandler(){
          public void onKeyPress(          KeyPressEvent event){
            char keyCode=event.getCharCode();
            if (((keyCode < '0' || keyCode > '3')) && (keyCode != (char)KeyCodes.KEY_TAB) && (keyCode != (char)KeyCodes.KEY_BACKSPACE)&& (keyCode != (char)KeyCodes.KEY_DELETE)&& (keyCode != (char)KeyCodes.KEY_ENTER)&& (keyCode != (char)KeyCodes.KEY_HOME)&& (keyCode != (char)KeyCodes.KEY_END)&& (keyCode != (char)KeyCodes.KEY_LEFT)&& (keyCode != (char)KeyCodes.KEY_UP)&& (keyCode != (char)KeyCodes.KEY_RIGHT)&& (keyCode != (char)KeyCodes.KEY_DOWN)) {
              rateValueTextbox.cancelKey();
            }
          }
        }
);
        rateValueTextbox.addFocusHandler(new FocusHandler(){
          public void onFocus(          FocusEvent event){
            rateValueTextbox.setSelectionRange(0,rateValueTextbox.getText().length());
          }
        }
);
        rateValueTextbox.addChangeHandler(new ChangeHandler(){
          public void onChange(          ChangeEvent event){
            if (rateValueTextbox.getText().trim().length() == 0) {
              rateValueTextbox.setText(""String_Node_Str"");
            }
            char keyCode;
            if (rateValueTextbox.getText().trim().length() == 1) {
              keyCode=rateValueTextbox.getText().trim().charAt(0);
              if (keyCode >= '0' && keyCode <= '3') {
                getTotalsFromMatrix();
                setRateValue(rateValueTextbox.getPackageID(),rateValueTextbox.getAttributeID(),Integer.parseInt(rateValueTextbox.getText()));
                rateValueTextbox.setOldValue(rateValueTextbox.getText());
              }
 else {
                rateValueTextbox.setText(rateValueTextbox.getOldValue());
              }
            }
 else {
              rateValueTextbox.setText(rateValueTextbox.getOldValue());
            }
          }
        }
);
        if (j == 0) {
          matrix.setWidget(1,i + 1,rateValueTextbox);
          formatter.setHorizontalAlignment(1,i + 1,HasHorizontalAlignment.ALIGN_CENTER);
          formatter.setStyleName(1,i + 1,""String_Node_Str"");
          ++widgetCount;
        }
 else {
          matrix.setWidget(widgetCount + 1,i + 1,rateValueTextbox);
          formatter.setHorizontalAlignment(widgetCount + 1,i + 1,HasHorizontalAlignment.ALIGN_CENTER);
          formatter.setStyleName(widgetCount + 1,i + 1,""String_Node_Str"");
        }
      }
      RateValueLabel totalLabel=new RateValueLabel(attributes.get(i).getId());
      totalLabel.setText(""String_Node_Str"");
      if (widgetCount > 1) {
        matrix.setWidget(widgetCount + 1,attributes.size() + 1,totalLabel);
        formatter.setHorizontalAlignment(widgetCount + 1,attributes.size() + 1,HasHorizontalAlignment.ALIGN_CENTER);
        formatter.setStyleName(widgetCount + 1,attributes.size() + 1,""String_Node_Str"");
      }
    }
  }
}"
24818,"protected void updateSPinDB(GwtSoftwarePackage gwtSoftwarePackage){
  this.service.updateSoftwarePackage(gwtSoftwarePackage,currentProject,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.rateAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
loadAttributes();
}
}
);
}","protected void updateSPinDB(GwtSoftwarePackage gwtSoftwarePackage){
  this.service.updateSoftwarePackage(gwtSoftwarePackage,currentProject,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.SPAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
loadAttributes();
}
}
);
}"
24819,"private void addQAtoDB(GwtQualityAttribute qa){
  this.service.addQualityAttribute(currentProject,qa,new AsyncCallback<GwtQualityAttribute>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.rateAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(GwtQualityAttribute result){
loadAttributes();
}
}
);
}","private void addQAtoDB(GwtQualityAttribute qa){
  this.service.addQualityAttribute(currentProject,qa,new AsyncCallback<GwtQualityAttribute>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.QAAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(GwtQualityAttribute result){
loadAttributes();
}
}
);
}"
24820,"public void determineAccessRights(String page,State currentState){
  if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
  if (currentState.getCaseID() == 1) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + currentState.getUserProjectRole());
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
      System.out.println(""String_Node_Str"" + currentState.getUserProjectRole());
    }
  }
 else   if (currentState.getCaseID() == 3) {
    System.out.println(currentState.getCaseName());
    System.out.println(""String_Node_Str"");
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      System.out.println(""String_Node_Str"");
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getCaseID() == 1) {
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
 else   if (currentState.getCaseID() == 3) {
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
}"
24821,"public void determineAccessRights(String page,State currentState){
  if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}"
24822,"public void determineAccessRights(String page,State currentState){
  if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}"
24823,"public void determineAccessRights(String page,State currentState){
  if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}"
24824,"public void determineAccessRights(String page,State currentState){
  if (currentState.getCaseID() == 1) {
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
 else   if (currentState.getCaseID() == 3) {
    System.out.println(""String_Node_Str"" + currentState.getCaseID());
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getCaseID() == 1) {
    if (currentState.isSiteAdministrator() == true) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
 else   if (currentState.getCaseID() == 3) {
    if (currentState.isSiteAdministrator() == true) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
}"
24825,"public void determineAccessRights(String page,State currentState){
  if (currentState.getCaseID() == 1) {
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
 else   if (currentState.getCaseID() == 3) {
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getCaseID() == 1) {
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
 else   if (currentState.getCaseID() == 3) {
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
}"
24826,"public void determineAccessRights(String page,State currentState){
  if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.isSiteAdministrator() == true) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
    currentState.setMode(GwtModesType.ReadOnly);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Administrator) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
}"
24827,"public void setBreadCrumb(String viewId,String crumb){
  this.breadCrumbPane.clear();
  Hyperlink chooseCase=new Hyperlink(messages.chooseCase(),ChooseCasePilot.generateNavigationId(ChooseCasePilot.PageId.home));
  HorizontalPanel crumbBar=new HorizontalPanel();
  Label crumbText=new Label(crumb);
  crumbText.setStyleName(""String_Node_Str"");
  chooseCase.setStyleName(""String_Node_Str"");
  if (crumb.trim().length() != 0) {
    Hyperlink chooseStep=new Hyperlink(this.currentState.getProjectName(),ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
    Hyperlink chooseStepCase3=new Hyperlink(this.currentState.getProjectName(),ChooseStepCase3Pilot.generateNavigationId(ChooseStepCase3Pilot.PageId.home));
    chooseStep.setStyleName(""String_Node_Str"");
    crumbBar.add(chooseCase);
    Hyperlink chooseProject=new Hyperlink(this.currentState.getCaseName().name(),HomePilot.generateNavigationId(HomePilot.PageId.home));
    chooseProject.setStyleName(""String_Node_Str"");
    if (this.currentState.getProjectName() != ""String_Node_Str"") {
      crumbBar.add(new Label(""String_Node_Str""));
      crumbBar.add(chooseProject);
      crumbBar.add(new Label(""String_Node_Str""));
      if (this.currentState.getCaseID() == 1)       crumbBar.add(chooseStep);
      if (this.currentState.getCaseID() == 3)       crumbBar.add(chooseStepCase3);
    }
    crumbBar.add(new Label(""String_Node_Str""));
    crumbBar.add(crumbText);
    crumbBar.setSpacing(4);
  }
  this.breadCrumbPane.add(crumbBar);
}","public void setBreadCrumb(String viewId,String crumb){
  this.breadCrumbPane.clear();
  Hyperlink chooseCase=new Hyperlink(messages.chooseCase(),ChooseCasePilot.generateNavigationId(ChooseCasePilot.PageId.home));
  HorizontalPanel crumbBar=new HorizontalPanel();
  Label crumbText=new Label(crumb);
  crumbText.setStyleName(""String_Node_Str"");
  chooseCase.setStyleName(""String_Node_Str"");
  if (crumb.trim().length() != 0) {
    Hyperlink chooseStep=new Hyperlink(this.currentState.getProjectName(),ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
    Hyperlink chooseStepCase3=new Hyperlink(this.currentState.getProjectName(),ChooseStepCase3Pilot.generateNavigationId(ChooseStepCase3Pilot.PageId.home));
    chooseStep.setStyleName(""String_Node_Str"");
    crumbBar.add(chooseCase);
    Hyperlink chooseProject=new Hyperlink(this.currentState.getCaseName(),HomePilot.generateNavigationId(HomePilot.PageId.home));
    chooseProject.setStyleName(""String_Node_Str"");
    if (this.currentState.getProjectName() != ""String_Node_Str"") {
      crumbBar.add(new Label(""String_Node_Str""));
      crumbBar.add(chooseProject);
      crumbBar.add(new Label(""String_Node_Str""));
      if (this.currentState.getCaseID() == 1)       crumbBar.add(chooseStep);
      if (this.currentState.getCaseID() == 3)       crumbBar.add(chooseStepCase3);
    }
    crumbBar.add(new Label(""String_Node_Str""));
    crumbBar.add(crumbText);
    crumbBar.setSpacing(4);
  }
  this.breadCrumbPane.add(crumbBar);
}"
24828,"public void setCaseName(AsquareCase caseName){
  this.caseName=caseName;
  Cookies.setCookie(""String_Node_Str"",caseName.name());
  if (caseName != null) {
    super.fireEvent(""String_Node_Str"",caseName);
  }
}","public void setCaseName(String caseName){
  this.caseName=caseName;
  Cookies.setCookie(""String_Node_Str"",caseName);
  if (caseName.trim().length() > 0) {
    super.fireEvent(""String_Node_Str"",caseName);
  }
}"
24829,"public AsquareCase getCaseName(){
  return caseName;
}","public String getCaseName(){
  return caseName;
}"
24830,"public void clear(){
  setSessionID(""String_Node_Str"");
  setUserName(""String_Node_Str"");
  setProjectName(""String_Node_Str"");
  setCaseName(null);
  setCurrentView(""String_Node_Str"");
  setAuthenticated(null);
  setSiteAdministrator(false);
  setAccountLocked(false);
  setSkipTeachStep(false);
  setFullName(""String_Node_Str"");
  setProjectInspectionStatus(null);
  setUserProjectRole(null);
  setMode(GwtModesType.NoAccess);
  topPackageList.clear();
  this.topPackageList=new ArrayList<GwtSoftwarePackage>();
  setCurrentRisk(-1);
  setRiskCommand(0);
  setProjectID(-1);
  setCaseID(-1);
  setAppProperties(null);
}","public void clear(){
  setSessionID(""String_Node_Str"");
  setUserName(""String_Node_Str"");
  setProjectName(""String_Node_Str"");
  setCaseName(""String_Node_Str"");
  setCurrentView(""String_Node_Str"");
  setAuthenticated(null);
  setSiteAdministrator(false);
  setAccountLocked(false);
  setSkipTeachStep(false);
  setFullName(""String_Node_Str"");
  setProjectInspectionStatus(null);
  setUserProjectRole(null);
  setMode(GwtModesType.NoAccess);
  topPackageList.clear();
  this.topPackageList=new ArrayList<GwtSoftwarePackage>();
  setCurrentRisk(-1);
  setRiskCommand(0);
  setProjectID(-1);
  setCaseID(-1);
  setAppProperties(null);
}"
24831,"public void determineAccessRights(String page,State currentState){
  currentState.setMode(GwtModesType.ReadOnly);
}","public void determineAccessRights(String page,State currentState){
  currentState.setMode(GwtModesType.ReadWrite);
}"
24832,"/** 
 * This function is temporary here. It should be placed in the chose project step.
 * @param projectID
 * @param userName
 */
public void loadRoles(final GwtProject project,final String userName){
  this.showLoadingStatusBar();
  currentState.setProjectName(project.getName());
  for (  AsquareCase ac : AsquareCase.values()) {
    if (ac.getLabel().equals(project.getClass().getName())) {
      currentState.setCaseName(ac);
    }
  }
  currentState.setProjectInspectionStatus(null);
  if (project.getInspectionStatus() != null) {
    currentState.setProjectInspectionStatus(project.getInspectionStatus().getLabel());
  }
  for (  ProjectRole pr : ProjectRole.values()) {
    if (pr.getLabel().equals(project.getCurrentRole().getName())) {
      currentState.setUserProjectRole(pr);
    }
  }
  System.out.println(""String_Node_Str"" + project.getCases().getId());
  if (project.getCases().getId() == 1) {
    System.out.println(""String_Node_Str"");
    History.newItem(ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
  }
 else   if (project.getCases().getId() == 3) {
    System.out.println(""String_Node_Str"");
    History.newItem(ChooseStepCase3Pilot.generateNavigationId(ChooseStepCase3Pilot.PageId.home));
  }
}","/** 
 * This function is temporary here. It should be placed in the chose project step.
 * @param projectID
 * @param userName
 */
public void loadRoles(final GwtProject project,final String userName){
  this.showLoadingStatusBar();
  currentState.setProjectName(project.getName());
  currentState.setCaseName(project.getCases().getName());
  currentState.setProjectInspectionStatus(null);
  if (project.getInspectionStatus() != null) {
    currentState.setProjectInspectionStatus(project.getInspectionStatus().getLabel());
  }
  for (  ProjectRole pr : ProjectRole.values()) {
    if (pr.getLabel().equals(project.getCurrentRole().getName())) {
      currentState.setUserProjectRole(pr);
    }
  }
  System.out.println(""String_Node_Str"" + project.getCases().getId());
  if (project.getCases().getId() == 1) {
    System.out.println(""String_Node_Str"");
    History.newItem(ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
  }
 else   if (project.getCases().getId() == 3) {
    System.out.println(""String_Node_Str"");
    History.newItem(ChooseStepCase3Pilot.generateNavigationId(ChooseStepCase3Pilot.PageId.home));
  }
}"
24833,"public void determineAccessRights(String page,State currentState){
  if (currentState.getUserProjectRole() == ProjectRole.Lead_Requirements_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Requirements_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
  if (currentState.getCaseID() == 1) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + currentState.getUserProjectRole());
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
      System.out.println(""String_Node_Str"" + currentState.getUserProjectRole());
    }
  }
 else   if (currentState.getCaseID() == 3) {
    System.out.println(currentState.getCaseName());
    System.out.println(currentState.getCaseName() == AsquareCase.Case3);
    System.out.println(""String_Node_Str"");
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      System.out.println(""String_Node_Str"");
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
}","public void determineAccessRights(String page,State currentState){
  if (currentState.getUserProjectRole() == ProjectRole.Lead_Requirements_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.Requirements_Engineer) {
    currentState.setMode(GwtModesType.ReadWrite);
  }
 else   if (currentState.getUserProjectRole() == ProjectRole.None) {
    currentState.setMode(GwtModesType.NoAccess);
  }
 else {
    currentState.setMode(GwtModesType.ReadOnly);
  }
  if (currentState.getCaseID() == 1) {
    System.out.println(""String_Node_Str"");
    System.out.println(""String_Node_Str"" + currentState.getUserProjectRole());
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
      System.out.println(""String_Node_Str"" + currentState.getUserProjectRole());
    }
  }
 else   if (currentState.getCaseID() == 3) {
    System.out.println(currentState.getCaseName());
    System.out.println(""String_Node_Str"");
    if (currentState.getUserProjectRole() == ProjectRole.Acquisition_Organization_Engineer) {
      currentState.setMode(GwtModesType.ReadOnly);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Contractor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.Security_Specialist) {
      System.out.println(""String_Node_Str"");
      currentState.setMode(GwtModesType.ReadWrite);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.COTS_Vendor) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else     if (currentState.getUserProjectRole() == ProjectRole.None) {
      currentState.setMode(GwtModesType.NoAccess);
    }
 else {
      currentState.setMode(GwtModesType.ReadOnly);
    }
  }
}"
24834,"/** 
 * This remove a selected elicitation technique from the selected project.
 * @param gwtElicitTechnique The technique that wanted to be removed.
 * @param projectId TODO
 * @throws SquareException
 */
void removeSoftwarePackage(GwtSoftwarePackage gwtSoftwarePackage,Integer projectId) throws SquareException ;","/** 
 * This remove a selected elicitation technique from the selected project.
 * @param gwtElicitTechnique The technique that wanted to be removed.
 * @param projectId TODO
 * @throws SquareException
 */
void removeSoftwarePackage(GwtSoftwarePackage gwtSoftwarePackage,GwtProject project) throws SquareException ;"
24835,"/** 
 * This remove a selected evaluation criteria from the selected project.
 * @param gwtElicitEvaluation  The evaluation that wanted to be removed.
 * @throws SquareException
 */
void removeQualityAttribute(GwtQualityAttribute gwtQualityAttribute) throws SquareException ;","/** 
 * This remove a selected evaluation criteria from the selected project.
 * @param gwtElicitEvaluation  The evaluation that wanted to be removed.
 * @throws SquareException
 */
void removeQualityAttribute(GwtQualityAttribute gwtQualityAttribute,GwtProject project) throws SquareException ;"
24836,"/** 
 * This remove a selected elicitation technique from the selected project.
 * @param gwtElicitTechnique The technique that wanted to be removed.
 * @throws SquareException
 */
void removeSoftwarePackage(GwtSoftwarePackage gwtElicitTechnique,Integer projectId,AsyncCallback<Void> callback);","/** 
 * This remove a selected elicitation technique from the selected project.
 * @param gwtElicitTechnique The technique that wanted to be removed.
 * @throws SquareException
 */
void removeSoftwarePackage(GwtSoftwarePackage gwtElicitTechnique,GwtProject project,AsyncCallback<Void> callback);"
24837,"/** 
 * This remove a selected evaluation criteria from the selected project.
 * @param gwtElicitEvaluation  The evaluation that wanted to be removed.
 * @throws SquareException
 */
void removeQualityAttribute(GwtQualityAttribute gwtElicitEvaluation,AsyncCallback<Void> callback);","/** 
 * This remove a selected evaluation criteria from the selected project.
 * @param gwtElicitEvaluation  The evaluation that wanted to be removed.
 * @throws SquareException
 */
void removeQualityAttribute(GwtQualityAttribute gwtElicitEvaluation,GwtProject project,AsyncCallback<Void> callback);"
24838,"private void setPackagePriority(final int packageID,final int priority){
  System.out.println(""String_Node_Str"" + currentProject.getId());
  this.performTradeoffService.setPriority(currentProject.getId(),packageID,priority,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.rateAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
}
}
);
}","private void setPackagePriority(final int packageID,final int priority){
  this.performTradeoffService.setPriority(currentProject.getId(),packageID,priority,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.rateAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
}
}
);
}"
24839,"private void setRateValue(final int packageID,final int attributeID,final int value){
  System.out.println(""String_Node_Str"" + packageID + ""String_Node_Str""+ attributeID+ ""String_Node_Str""+ value);
  this.service.setRateValue(currentProject.getId(),packageID,attributeID,value,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.rateAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
setValueFromlistOfRateValues(packageID,attributeID,value);
}
}
);
}","private void setRateValue(final int packageID,final int attributeID,final int value){
  this.service.setRateValue(currentProject.getId(),packageID,attributeID,value,new AsyncCallback<Void>(){
    public void onFailure(    Throwable caught){
      if (caught instanceof SquareException) {
        SquareException se=(SquareException)caught;
switch (se.getType()) {
case authorization:
          Window.alert(messages.rateAuthorization());
        break;
default :
      Window.alert(messages.error());
    break;
}
}
 else {
Window.alert(messages.error());
}
}
public void onSuccess(Void result){
setValueFromlistOfRateValues(packageID,attributeID,value);
}
}
);
}"
24840,"private void loadRatings(){
  service.getRateValues(currentProject.getId(),new AsyncCallback<List<GwtRating>>(){
    @Override public void onSuccess(    List<GwtRating> result){
      System.out.println(""String_Node_Str"" + result.size());
      System.out.println(""String_Node_Str"" + result.get(0).getPackageId());
      ratings=result;
      drawRateMatrix();
      getTotalsFromMatrix();
      PaneInitialization();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.ratingsRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}","private void loadRatings(){
  service.getRateValues(currentProject.getId(),new AsyncCallback<List<GwtRating>>(){
    @Override public void onSuccess(    List<GwtRating> result){
      ratings=result;
      drawRateMatrix();
      getTotalsFromMatrix();
      PaneInitialization();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.ratingsRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}"
24841,"private void loadTradeoffReasons(){
  performTradeoffService.getTradeoffReasons(currentProject.getId(),new AsyncCallback<List<GwtTradeoffReason>>(){
    @Override public void onSuccess(    List<GwtTradeoffReason> result){
      System.out.println(""String_Node_Str"" + result.size());
      System.out.println(""String_Node_Str"" + result.get(0).getTradeoffreason());
      tradeoffReasons=result;
      drawRateMatrix();
      getTotalsFromMatrix();
      PaneInitialization();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.ratingsRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}","private void loadTradeoffReasons(){
  performTradeoffService.getTradeoffReasons(currentProject.getId(),new AsyncCallback<List<GwtTradeoffReason>>(){
    @Override public void onSuccess(    List<GwtTradeoffReason> result){
      tradeoffReasons=result;
      drawRateMatrix();
      getTotalsFromMatrix();
      PaneInitialization();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.ratingsRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}"
24842,"private void loadRequirementRatings(){
  performTradeoffService.getRequirementRateValues(currentProject.getId(),new AsyncCallback<List<GwtRequirementRating>>(){
    @Override public void onSuccess(    List<GwtRequirementRating> result){
      System.out.println(""String_Node_Str"" + result.size());
      System.out.println(""String_Node_Str"" + result.get(0).getPackageId());
      requirementRatings=result;
      drawRateMatrix();
      getTotalsFromMatrix();
      PaneInitialization();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.ratingsRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}","private void loadRequirementRatings(){
  performTradeoffService.getRequirementRateValues(currentProject.getId(),new AsyncCallback<List<GwtRequirementRating>>(){
    @Override public void onSuccess(    List<GwtRequirementRating> result){
      requirementRatings=result;
      drawRateMatrix();
      getTotalsFromMatrix();
      PaneInitialization();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.ratingsRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}"
24843,"private void loadPackages(){
  final StepStatus stepStatus=StepStatus.NotStarted;
  service.getSoftwarePackages(currentProject,stepStatus,new AsyncCallback<List<GwtSoftwarePackage>>(){
    @Override public void onSuccess(    List<GwtSoftwarePackage> result){
      softwarePackages=result;
      System.out.println(""String_Node_Str"" + result.size());
      loadRatings();
      loadRequirementRatings();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.packagesRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}","private void loadPackages(){
  final StepStatus stepStatus=StepStatus.NotStarted;
  service.getSoftwarePackages(currentProject,stepStatus,new AsyncCallback<List<GwtSoftwarePackage>>(){
    @Override public void onSuccess(    List<GwtSoftwarePackage> result){
      softwarePackages=result;
      loadRatings();
      loadRequirementRatings();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.packagesRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}"
24844,"public void drawRateMatrix(){
  matrix.clear();
  matrix.setWidth(""String_Node_Str"");
  matrix.setStyleName(""String_Node_Str"");
  matrix.setCellSpacing(0);
  drawRateMatrixHeaderTechniques();
  drawRateMatrixEvaluationCriteriaColum();
  drawRateMatrixValues();
}","public void drawRateMatrix(){
  matrix.clear();
  matrix.setWidth(""String_Node_Str"");
  matrix.setStyleName(""String_Node_Str"");
  matrix.setCellSpacing(0);
  drawAttributesAndRequirements();
  drawSoftwarePackages();
  drawRateMatrixValues();
}"
24845,"public void onClick(ClickEvent event){
  History.newItem(ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
}","public void onClick(ClickEvent event){
  if (caseid == 1)   History.newItem(ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
  if (caseid == 3)   History.newItem(ChooseStepCase3Pilot.generateNavigationId(ChooseStepCase3Pilot.PageId.home));
}"
24846,"private void addDoneButton(){
  FlexTable buttonPanel=new FlexTable();
  Button done=new Button(messages.done());
  done.addStyleName(""String_Node_Str"");
  done.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      History.newItem(ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
    }
  }
);
  buttonPanel.setWidget(0,0,new Label(""String_Node_Str""));
  buttonPanel.setWidget(1,0,done);
  buttonPanel.setWidth(""String_Node_Str"");
  buttonPanel.getCellFormatter().setHorizontalAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT);
  this.vPane.add(buttonPanel);
}","private void addDoneButton(){
  FlexTable buttonPanel=new FlexTable();
  Button done=new Button(messages.done());
  done.addStyleName(""String_Node_Str"");
  final int caseid=this.getCurrentState().getCaseID();
  done.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (caseid == 1)       History.newItem(ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
      if (caseid == 3)       History.newItem(ChooseStepCase3Pilot.generateNavigationId(ChooseStepCase3Pilot.PageId.home));
    }
  }
);
  buttonPanel.setWidget(0,0,new Label(""String_Node_Str""));
  buttonPanel.setWidget(1,0,done);
  buttonPanel.setWidth(""String_Node_Str"");
  buttonPanel.getCellFormatter().setHorizontalAlignment(1,0,HasHorizontalAlignment.ALIGN_RIGHT);
  this.vPane.add(buttonPanel);
}"
24847,"public void onClick(ClickEvent event){
  History.newItem(ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
}","public void onClick(ClickEvent event){
  if (caseid == 1)   History.newItem(ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
  if (caseid == 3)   History.newItem(ChooseStepCase3Pilot.generateNavigationId(ChooseStepCase3Pilot.PageId.home));
}"
24848,"/** 
 * Navigation Buttons to browse other pages from the summary page
 * @param layout 
 * @return a table containing navigation buttons
 */
private FlexTable NavigationButtons(VerticalPanel layout){
  FlexTable navigatorLayout=new FlexTable();
  FlexCellFormatter formatterNavigator=navigatorLayout.getFlexCellFormatter();
  navigatorLayout.setWidth(""String_Node_Str"");
  Button assetAssociationButton=new Button(messages.assetAssociationButton());
  assetAssociationButton.addStyleName(""String_Node_Str"");
  if (businessGoal.getAssets().isEmpty()) {
    assetAssociationButton.setText(messages.reviewSubgoals());
  }
  Button summaryButton=new Button(messages.done());
  summaryButton.addStyleName(""String_Node_Str"");
  if (getCurrentState().getMode().toString().equalsIgnoreCase(""String_Node_Str"")) {
    navigatorLayout.setWidget(0,0,assetAssociationButton);
  }
  navigatorLayout.setWidget(0,1,summaryButton);
  formatterNavigator.setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
  formatterNavigator.setHorizontalAlignment(0,1,HasHorizontalAlignment.ALIGN_RIGHT);
  assetAssociationButton.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (businessGoal.getAssets().isEmpty()) {
        History.newItem(AssetsAndGoalsPilot.generateNavigationId(AssetsAndGoalsPilot.PageId.addSubGoalsAndAssets));
      }
 else {
        History.newItem(AssetsAndGoalsPilot.generateNavigationId(AssetsAndGoalsPilot.PageId.assetGoalAssociation));
      }
    }
  }
);
  summaryButton.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      History.newItem(ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
    }
  }
);
  return navigatorLayout;
}","/** 
 * Navigation Buttons to browse other pages from the summary page
 * @param layout 
 * @return a table containing navigation buttons
 */
private FlexTable NavigationButtons(VerticalPanel layout){
  FlexTable navigatorLayout=new FlexTable();
  FlexCellFormatter formatterNavigator=navigatorLayout.getFlexCellFormatter();
  navigatorLayout.setWidth(""String_Node_Str"");
  Button assetAssociationButton=new Button(messages.assetAssociationButton());
  assetAssociationButton.addStyleName(""String_Node_Str"");
  if (businessGoal.getAssets().isEmpty()) {
    assetAssociationButton.setText(messages.reviewSubgoals());
  }
  Button summaryButton=new Button(messages.done());
  summaryButton.addStyleName(""String_Node_Str"");
  if (getCurrentState().getMode().toString().equalsIgnoreCase(""String_Node_Str"")) {
    navigatorLayout.setWidget(0,0,assetAssociationButton);
  }
  navigatorLayout.setWidget(0,1,summaryButton);
  formatterNavigator.setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
  formatterNavigator.setHorizontalAlignment(0,1,HasHorizontalAlignment.ALIGN_RIGHT);
  assetAssociationButton.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (businessGoal.getAssets().isEmpty()) {
        History.newItem(AssetsAndGoalsPilot.generateNavigationId(AssetsAndGoalsPilot.PageId.addSubGoalsAndAssets));
      }
 else {
        History.newItem(AssetsAndGoalsPilot.generateNavigationId(AssetsAndGoalsPilot.PageId.assetGoalAssociation));
      }
    }
  }
);
  final int caseid=this.getCurrentState().getCaseID();
  summaryButton.addClickHandler(new ClickHandler(){
    public void onClick(    ClickEvent event){
      if (caseid == 1)       History.newItem(ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
      if (caseid == 3)       History.newItem(ChooseStepCase3Pilot.generateNavigationId(ChooseStepCase3Pilot.PageId.home));
    }
  }
);
  return navigatorLayout;
}"
24849,"public void initializePane(){
  this.hideStatusBar();
  VerticalPanel layout=new VerticalPanel();
  drawRateMatrix();
  getTotalsFromMatrix();
  drawQualityAttributes();
  drawSoftwarePackages();
  drawMatrixPage();
  this.getContent().clear();
  this.getContent().add(vPane);
  loadRequirementsTable();
  this.getContent().add(vPaneCots);
  loadCotsTable();
}","public void initializePane(){
  this.hideStatusBar();
  VerticalPanel layout=new VerticalPanel();
  drawRateMatrix();
  getTotalsFromMatrix();
  drawQualityAttributes();
  drawSoftwarePackages();
  drawMatrixPage();
  this.getContent().clear();
  this.getContent().add(vPane);
  loadRequirementsTable();
  this.getContent().add(vPaneCots);
  vPaneCotsData.add(layout);
  layout.add(matrixHeader);
  this.getContent().add(vPaneCotsData);
  loadCotsTable();
}"
24850,"public void loadRequirementsTable(){
  System.out.println(""String_Node_Str"");
  filterRequirements(lastSearch);
  vPane.clear();
  vPane.setSpacing(0);
  vPane.setWidth(""String_Node_Str"");
  vPane.setHeight(""String_Node_Str"");
  vPane.add(getRequirementHeaderRow());
  vPane.add(vPaneData);
  loadRequirementTableData();
}","public void loadRequirementsTable(){
  filterRequirements(lastSearch);
  vPane.clear();
  vPane.setSpacing(0);
  vPane.setWidth(""String_Node_Str"");
  vPane.setHeight(""String_Node_Str"");
  vPane.add(getRequirementHeaderRow());
  vPane.add(vPaneData);
  loadRequirementTableData();
}"
24851,"private void drawMatrixPage(){
  FlexCellFormatter formatter1=this.matrixHeader.getFlexCellFormatter();
  this.matrixHeader.setWidth(""String_Node_Str"");
  this.matrixHeader.setWidget(1,1,new Label(messages.matrixLableX()));
  this.matrixHeader.setWidget(3,0,new Label(messages.matrixLableY()));
  this.matrixHeader.setWidget(4,1,new Label(messages.rateLegend()));
  formatter1.setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
  formatter1.setHorizontalAlignment(1,1,HasHorizontalAlignment.ALIGN_CENTER);
  formatter1.setHorizontalAlignment(2,1,HasHorizontalAlignment.ALIGN_RIGHT);
  formatter1.setHorizontalAlignment(3,1,HasHorizontalAlignment.ALIGN_LEFT);
  formatter1.setVerticalAlignment(3,0,HasVerticalAlignment.ALIGN_MIDDLE);
  formatter1.setHorizontalAlignment(4,1,HasHorizontalAlignment.ALIGN_LEFT);
  formatter1.setHorizontalAlignment(5,1,HasHorizontalAlignment.ALIGN_RIGHT);
}","private void drawMatrixPage(){
  FlexCellFormatter formatter1=this.matrixHeader.getFlexCellFormatter();
  this.matrixHeader.setWidth(""String_Node_Str"");
  VerticalPanel XPanel=new VerticalPanel();
  VerticalPanel YPanel=new VerticalPanel();
  XPanel.add(new Label(messages.matrixLableX()));
  YPanel.add(new Label(messages.matrixLableY()));
  this.matrixHeader.setWidget(1,1,XPanel);
  this.matrixHeader.setWidget(3,0,YPanel);
  this.matrixHeader.setWidget(4,1,new Label(messages.rateLegend()));
  formatter1.setHorizontalAlignment(0,0,HasHorizontalAlignment.ALIGN_LEFT);
  formatter1.setHorizontalAlignment(1,1,HasHorizontalAlignment.ALIGN_CENTER);
  formatter1.setHorizontalAlignment(2,1,HasHorizontalAlignment.ALIGN_RIGHT);
  formatter1.setHorizontalAlignment(3,1,HasHorizontalAlignment.ALIGN_LEFT);
  formatter1.setHorizontalAlignment(4,1,HasHorizontalAlignment.ALIGN_LEFT);
  formatter1.setHorizontalAlignment(5,1,HasHorizontalAlignment.ALIGN_RIGHT);
  formatter1.setVerticalAlignment(3,0,HasVerticalAlignment.ALIGN_MIDDLE);
  if (isReadOnly) {
    if (GwtModesType.ReadWrite == this.currentState.getMode()) {
    }
    this.matrixHeader.setWidget(3,1,matrix);
  }
 else {
    this.matrixHeader.setWidget(3,1,matrix);
  }
}"
24852,"public void loadCotsTable(){
  vPaneCots.setSpacing(0);
  vPaneCots.setWidth(""String_Node_Str"");
  vPaneCots.setHeight(""String_Node_Str"");
  vPaneCots.add(getCotsTableHeaderRow());
  vPaneCots.add(vPaneCotsData);
  loadCotsTableData();
}","public void loadCotsTable(){
  vPaneCots.setSpacing(0);
  vPaneCots.setWidth(""String_Node_Str"");
  vPaneCots.setHeight(""String_Node_Str"");
  vPaneCots.add(getCotsTableHeaderRow());
}"
24853,"/** 
 * Contains RPC Calls to retrieve the evaluation criteria for the project
 */
private void loadAttributes(){
  final StepStatus stepStatus=StepStatus.NotStarted;
  packageService.getQualityAttributes(currentProject,stepStatus,new AsyncCallback<List<GwtQualityAttribute>>(){
    @Override public void onSuccess(    List<GwtQualityAttribute> result){
      System.out.println(""String_Node_Str"" + result.size());
      System.out.println(""String_Node_Str"" + result.toString());
      attributes=result;
      loadPackages();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.attributesRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}","private void loadAttributes(){
  final StepStatus stepStatus=StepStatus.NotStarted;
  packageService.getQualityAttributes(currentProject,stepStatus,new AsyncCallback<List<GwtQualityAttribute>>(){
    @Override public void onSuccess(    List<GwtQualityAttribute> result){
      System.out.println(""String_Node_Str"" + result.size());
      attributes=result;
      loadPackages();
    }
    @Override public void onFailure(    Throwable caught){
      Window.alert(messages.attributesRetrievalError());
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,""String_Node_Str"");
    }
  }
);
}"
24854,"@Test public void testloadDefaultTerms(){
  try {
    agreeOnDefinitionsBusiness.loadDefaultTerms(testProject.getId(),createDefaultTerms());
    List<GwtTerm> terms=agreeOnDefinitionsBusiness.getTerms(new GwtProject(testProject.getId()));
    Assert.assertEquals(5,terms.size());
  }
 catch (  SquareException e) {
    fail(""String_Node_Str"" + e);
  }
}","@Test public void testloadDefaultTerms(){
  try {
    agreeOnDefinitionsBusiness.loadDefaultTerms(testProject.getId(),createDefaultTerms());
    List<GwtTerm> terms=agreeOnDefinitionsBusiness.getTerms(new GwtProject(testProject.getId()));
    Assert.assertEquals(5,terms.size());
  }
 catch (  SquareException e) {
    e.printStackTrace();
  }
}"
24855,"@Test public void testAddTerm(){
  try {
    GwtTerm gwtTerm=new GwtTerm();
    gwtTerm.setTerm(""String_Node_Str"");
    gwtTerm.setDefinition(""String_Node_Str"");
    GwtProject gwtProject=testProject;
    agreeOnDefinitionsBusiness.addTerm(gwtProject,gwtTerm);
    List<GwtTerm> terms=agreeOnDefinitionsBusiness.getTerms(gwtProject);
    assertTrue(terms.size() == 1);
  }
 catch (  SquareException e) {
    fail(""String_Node_Str"" + e);
  }
}","@Test public void testAddTerm(){
  try {
    GwtTerm gwtTerm=new GwtTerm();
    gwtTerm.setTerm(""String_Node_Str"");
    gwtTerm.setDefinition(""String_Node_Str"");
    GwtProject gwtProject=testProject;
    agreeOnDefinitionsBusiness.addTerm(gwtProject,gwtTerm);
    List<GwtTerm> terms=agreeOnDefinitionsBusiness.getTerms(gwtProject);
    assertTrue(terms.size() == 1);
  }
 catch (  SquareException e) {
    e.printStackTrace();
  }
}"
24856,"@Test public void testRemoveTerm(){
  try {
    GwtTerm gwtTerm=new GwtTerm();
    gwtTerm.setTerm(""String_Node_Str"");
    gwtTerm.setDefinition(""String_Node_Str"");
    GwtTerm gwtTerm2=new GwtTerm();
    gwtTerm2.setTerm(""String_Node_Str"");
    gwtTerm2.setDefinition(""String_Node_Str"");
    GwtProject gwtProject=testProject;
    gwtTerm=agreeOnDefinitionsBusiness.addTerm(gwtProject,gwtTerm);
    gwtTerm2=agreeOnDefinitionsBusiness.addTerm(gwtProject,gwtTerm2);
    List<GwtTerm> terms=agreeOnDefinitionsBusiness.getTerms(gwtProject);
    assertTrue(terms.size() == 2);
    agreeOnDefinitionsBusiness.removeTerm(gwtTerm);
    terms=agreeOnDefinitionsBusiness.getTerms(gwtProject);
    assertTrue(terms.size() == 1);
  }
 catch (  SquareException e) {
    fail(""String_Node_Str"" + e);
  }
}","@Test public void testRemoveTerm(){
  try {
    GwtTerm gwtTerm=new GwtTerm();
    gwtTerm.setTerm(""String_Node_Str"");
    gwtTerm.setDefinition(""String_Node_Str"");
    GwtTerm gwtTerm2=new GwtTerm();
    gwtTerm2.setTerm(""String_Node_Str"");
    gwtTerm2.setDefinition(""String_Node_Str"");
    GwtProject gwtProject=testProject;
    gwtTerm=agreeOnDefinitionsBusiness.addTerm(gwtProject,gwtTerm);
    gwtTerm2=agreeOnDefinitionsBusiness.addTerm(gwtProject,gwtTerm2);
    List<GwtTerm> terms=agreeOnDefinitionsBusiness.getTerms(gwtProject);
    assertTrue(terms.size() == 2);
    agreeOnDefinitionsBusiness.removeTerm(gwtTerm);
    terms=agreeOnDefinitionsBusiness.getTerms(gwtProject);
    assertTrue(terms.size() == 1);
  }
 catch (  SquareException e) {
    e.printStackTrace();
  }
}"
24857,"@Test public void testUpdateTerm(){
  try {
    GwtTerm gwtTerm=new GwtTerm();
    gwtTerm.setTerm(""String_Node_Str"");
    gwtTerm.setDefinition(""String_Node_Str"");
    GwtProject gwtProject=testProject;
    gwtTerm=agreeOnDefinitionsBusiness.addTerm(gwtProject,gwtTerm);
    gwtTerm.setTerm(""String_Node_Str"");
    gwtTerm.setDefinition(""String_Node_Str"");
    agreeOnDefinitionsBusiness.updateTerm(gwtProject,gwtTerm);
    List<GwtTerm> terms=agreeOnDefinitionsBusiness.getTerms(gwtProject);
    terms=agreeOnDefinitionsBusiness.getTerms(gwtProject);
    assertTrue(terms.get(0).getTerm().equals(gwtTerm.getTerm()));
  }
 catch (  SquareException e) {
    fail(""String_Node_Str"" + e);
  }
}","@Test public void testUpdateTerm(){
  try {
    GwtTerm gwtTerm=new GwtTerm();
    gwtTerm.setTerm(""String_Node_Str"");
    gwtTerm.setDefinition(""String_Node_Str"");
    GwtProject gwtProject=testProject;
    gwtTerm=agreeOnDefinitionsBusiness.addTerm(gwtProject,gwtTerm);
    gwtTerm.setTerm(""String_Node_Str"");
    gwtTerm.setDefinition(""String_Node_Str"");
    agreeOnDefinitionsBusiness.updateTerm(gwtProject,gwtTerm);
    List<GwtTerm> terms=agreeOnDefinitionsBusiness.getTerms(gwtProject);
    terms=agreeOnDefinitionsBusiness.getTerms(gwtProject);
    assertTrue(terms.get(0).getTerm().equals(gwtTerm.getTerm()));
  }
 catch (  SquareException e) {
    e.printStackTrace();
  }
}"
24858,"@Test public void testCreateProject(){
  try {
    GwtUser gwtUser=((User)testMap.get(""String_Node_Str"")).createGwtUser();
    GwtProject project=new GwtProject();
    project.setName(""String_Node_Str"");
    project.setSecurity(true);
    project.setPrivacy(false);
    project.setLite(false);
    project.setLeadRequirementEngineer(gwtUser);
    GwtProject outputProject=mps.createProject(project,this.createDefaultTerms(),this.createDefaultTechnique(),this.createDefaultInspections(),this.createDefaultEvaluation());
    outputProject=mps.getProject(outputProject.getId());
    Assert.assertEquals(outputProject.getName(),project.getName());
    Assert.assertEquals(outputProject.isSecurity(),true);
    Assert.assertEquals(outputProject.isPrivacy(),false);
    Assert.assertEquals(outputProject.isLite(),false);
    Assert.assertEquals(project.getName(),outputProject.getName());
    Assert.assertTrue(outputProject.isSecurity());
    Assert.assertFalse(outputProject.isPrivacy());
    Assert.assertFalse(outputProject.isLite());
    List<GwtStep> steps=mps.getSteps(outputProject);
    Assert.assertEquals(steps.size(),9);
    for (    GwtStep s : steps) {
      Assert.assertEquals(s.getStatus(),StepStatus.NotStarted);
    }
    List<GwtUser> users=mps.getUserList(outputProject);
    Assert.assertEquals(1,users.size());
    Assert.assertEquals(""String_Node_Str"",users.get(0).getRole());
    Assert.assertEquals(gwtUser.getUserId().intValue(),users.get(0).getUserId().intValue());
    GwtUser leader=outputProject.getLeadRequirementEngineer();
    Assert.assertEquals(gwtUser.getFullName(),leader.getFullName());
    Assert.assertEquals(gwtUser.getUserId(),leader.getUserId());
    List<GwtTerm> terms=termBusiness.getTerms(outputProject);
    Assert.assertEquals(5,terms.size());
    List<GwtTechnique> techniques=elicitationTechniqueBusiness.getTechniques(outputProject,null);
    Assert.assertEquals(5,techniques.size());
    List<GwtEvaluation> evaluations=elicitationTechniqueBusiness.getEvaluations(outputProject,null);
    Assert.assertEquals(5,evaluations.size());
    List<GwtInspectionTechnique> inspections=inspectionTechniqueBusiness.getInspectionTechniques(outputProject.getId(),null);
    Assert.assertEquals(5,inspections.size());
  }
 catch (  Exception e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
}","@Test public void testCreateProject(){
  try {
    GwtUser gwtUser=((User)testMap.get(""String_Node_Str"")).createGwtUser();
    GwtProject project=new GwtProject();
    project.setName(""String_Node_Str"");
    project.setSecurity(true);
    project.setPrivacy(false);
    project.setLite(false);
    project.setLeadRequirementEngineer(gwtUser);
    GwtProject outputProject=mps.createProject(project,this.createDefaultTerms(),this.createDefaultTechnique(),this.createDefaultInspections(),this.createDefaultEvaluation());
    outputProject=mps.getProject(outputProject.getId());
    Assert.assertEquals(outputProject.getName(),project.getName());
    Assert.assertEquals(outputProject.isSecurity(),true);
    Assert.assertEquals(outputProject.isPrivacy(),false);
    Assert.assertEquals(outputProject.isLite(),false);
    Assert.assertEquals(project.getName(),outputProject.getName());
    Assert.assertTrue(outputProject.isSecurity());
    Assert.assertFalse(outputProject.isPrivacy());
    Assert.assertFalse(outputProject.isLite());
    List<GwtStep> steps=mps.getSteps(outputProject);
    Assert.assertEquals(steps.size(),9);
    for (    GwtStep s : steps) {
      Assert.assertEquals(s.getStatus(),StepStatus.NotStarted);
    }
    List<GwtUser> users=mps.getUserList(outputProject);
    Assert.assertEquals(1,users.size());
    Assert.assertEquals(""String_Node_Str"",users.get(0).getRole());
    Assert.assertEquals(gwtUser.getUserId().intValue(),users.get(0).getUserId().intValue());
    GwtUser leader=outputProject.getLeadRequirementEngineer();
    Assert.assertEquals(gwtUser.getFullName(),leader.getFullName());
    Assert.assertEquals(gwtUser.getUserId(),leader.getUserId());
    List<GwtTerm> terms=termBusiness.getTerms(outputProject);
    Assert.assertEquals(5,terms.size());
    List<GwtTechnique> techniques=elicitationTechniqueBusiness.getTechniques(outputProject,null);
    Assert.assertEquals(5,techniques.size());
    List<GwtEvaluation> evaluations=elicitationTechniqueBusiness.getEvaluations(outputProject,null);
    Assert.assertEquals(5,evaluations.size());
    List<GwtInspectionTechnique> inspections=inspectionTechniqueBusiness.getInspectionTechniques(outputProject.getId(),null);
    Assert.assertEquals(5,inspections.size());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
24859,"@Test public void testCreateStepsProject(){
  try {
    GwtUser gwtUser=((User)testMap.get(""String_Node_Str"")).createGwtUser();
    GwtProject project=new GwtProject();
    project.setName(""String_Node_Str"");
    project.setSecurity(true);
    project.setPrivacy(false);
    project.setLite(false);
    project.setLeadRequirementEngineer(gwtUser);
    project=mps.createProject(project,this.createDefaultTerms(),this.createDefaultTechnique(),this.createDefaultInspections(),this.createDefaultEvaluation());
  }
 catch (  Exception e) {
    fail(""String_Node_Str"" + e.getMessage());
  }
}","@Test public void testCreateStepsProject(){
  try {
    GwtUser gwtUser=((User)testMap.get(""String_Node_Str"")).createGwtUser();
    GwtProject project=new GwtProject();
    project.setName(""String_Node_Str"");
    project.setSecurity(true);
    project.setPrivacy(false);
    project.setLite(false);
    project.setLeadRequirementEngineer(gwtUser);
    project=mps.createProject(project,this.createDefaultTerms(),this.createDefaultTechnique(),this.createDefaultInspections(),this.createDefaultEvaluation());
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}"
24860,"@AllowedRoles(roles={Roles.Contractor,Roles.Security_Specialist,Roles.Administrator}) public void updateRequirement(GwtRequirement gwtRequirement) throws SquareException {
  Requirement r=requirementDao.fetch(gwtRequirement.getId());
  r.getRisks().clear();
  r.getArtifacts().clear();
  r.getGoals().clear();
  r.update(gwtRequirement);
  if (gwtRequirement.getRisks().isEmpty()) {
    SquareException se=new SquareException(""String_Node_Str"");
    se.setType(ExceptionType.missingLink);
    throw se;
  }
  if (gwtRequirement.getArtifacts().isEmpty()) {
    SquareException se=new SquareException(""String_Node_Str"");
    se.setType(ExceptionType.missingLink);
    throw se;
  }
  requirementDao.update(r);
}","@AllowedRoles(roles={Roles.Contractor,Roles.Security_Specialist,Roles.Administrator}) public void updateRequirement(GwtRequirement gwtRequirement) throws SquareException {
  Requirement r=requirementDao.fetch(gwtRequirement.getId());
  r.getRisks().clear();
  r.getArtifacts().clear();
  r.getGoals().clear();
  r.update(gwtRequirement);
  if (gwtRequirement.getArtifacts().isEmpty()) {
    SquareException se=new SquareException(""String_Node_Str"");
    se.setType(ExceptionType.missingLink);
    throw se;
  }
  requirementDao.update(r);
}"
24861,"public GwtProject(){
  System.out.println(""String_Node_Str"");
}","public GwtProject(){
}"
24862,"@ManyToOne(fetch=FetchType.LAZY) @JoinColumn(name=""String_Node_Str"",nullable=false) public AsquareCase getCases(){
  return this.cases;
}","@ManyToOne(fetch=FetchType.LAZY) @JoinColumn(name=""String_Node_Str"",nullable=true) public AsquareCase getCases(){
  return this.cases;
}"
24863,"public GwtProject(){
}","public GwtProject(){
  System.out.println(""String_Node_Str"");
}"
24864,"public CreateProjectDialog(int projectId,String projectName,int leadRequirementId,List<GwtProject> projects,List<GwtUser> users,ProjectGrid caller){
  super();
  this.listOfProjects=projects;
  this.listOfUsers=users;
  this.caller=caller;
  this.initializeDialog(new GwtProject(projectId,projectName,leadRequirementId));
}","public CreateProjectDialog(int projectId,String projectName,int leadRequirementId,List<GwtProject> projects,List<GwtUser> users,ProjectGrid caller,int casesId){
  super();
  this.listOfProjects=projects;
  this.listOfUsers=users;
  this.caller=caller;
  this.initializeDialog(new GwtProject(projectId,projectName,leadRequirementId,casesId));
}"
24865,"private void loadCreateDialog(final GwtProject project){
  final ProjectGrid caller=this;
  ServiceDefTarget endpoint=(ServiceDefTarget)manageSiteService;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  manageSiteService.getAllUsers(new AsyncCallback<List<GwtUser>>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,messages.retrievingUsers());
    }
    public void onSuccess(    List<GwtUser> result){
      if (project.isInDatabase()) {
        CreateProjectDialog dialog=new CreateProjectDialog(project.getId(),project.getName(),project.getLeadRequirementEngineer().getUserId(),listOfProjects,result,caller);
        dialog.center();
        dialog.setModal(true);
        dialog.show();
      }
 else {
        CreateProjectDialog dialog=new CreateProjectDialog(listOfProjects,result,caller);
        dialog.center();
        dialog.setModal(true);
        dialog.show();
      }
    }
  }
);
}","private void loadCreateDialog(final GwtProject project){
  final ProjectGrid caller=this;
  ServiceDefTarget endpoint=(ServiceDefTarget)manageSiteService;
  endpoint.setServiceEntryPoint(GWT.getModuleBaseURL() + ""String_Node_Str"");
  manageSiteService.getAllUsers(new AsyncCallback<List<GwtUser>>(){
    public void onFailure(    Throwable caught){
      ExceptionHelper.SquareRootRPCExceptionHandler(caught,messages.retrievingUsers());
    }
    public void onSuccess(    List<GwtUser> result){
      if (project.isInDatabase()) {
        CreateProjectDialog dialog=new CreateProjectDialog(project.getId(),project.getName(),project.getLeadRequirementEngineer().getUserId(),listOfProjects,result,caller,project.getCases().getId());
        dialog.center();
        dialog.setModal(true);
        dialog.show();
      }
 else {
        CreateProjectDialog dialog=new CreateProjectDialog(listOfProjects,result,caller);
        dialog.center();
        dialog.setModal(true);
        dialog.show();
      }
    }
  }
);
}"
24866,"/** 
 * This function is temporary here. It should be placed in the chose project step.
 * @param projectID
 * @param userName
 */
public void loadRoles(final GwtProject project,final String userName){
  this.showLoadingStatusBar();
  currentState.setProjectName(project.getName());
  currentState.setProjectInspectionStatus(null);
  if (project.getInspectionStatus() != null) {
    currentState.setProjectInspectionStatus(project.getInspectionStatus().getLabel());
  }
  for (  ProjectRole pr : ProjectRole.values()) {
    if (pr.getLabel().equals(project.getCurrentRole().getName())) {
      currentState.setUserProjectRole(pr);
    }
  }
  History.newItem(ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
}","/** 
 * This function is temporary here. It should be placed in the chose project step.
 * @param projectID
 * @param userName
 */
public void loadRoles(final GwtProject project,final String userName){
  this.showLoadingStatusBar();
  currentState.setProjectName(project.getName());
  currentState.setProjectInspectionStatus(null);
  if (project.getInspectionStatus() != null) {
    currentState.setProjectInspectionStatus(project.getInspectionStatus().getLabel());
  }
  for (  ProjectRole pr : ProjectRole.values()) {
    if (pr.getLabel().equals(project.getCurrentRole().getName())) {
      currentState.setUserProjectRole(pr);
    }
  }
  System.out.println(""String_Node_Str"" + project.getCases().getId());
  History.newItem(ChooseStepPilot.generateNavigationId(ChooseStepPilot.PageId.home));
}"
24867,"public AsquareCase(GwtAsquareCase gwtCase){
  this.id=gwtCase.getId();
  this.name=gwtCase.getName();
  this.description=gwtCase.getDescription();
}","public AsquareCase(GwtAsquareCase gwtCase){
  if (gwtCase == null) {
    return;
  }
  this.id=gwtCase.getId();
  this.name=gwtCase.getName();
  this.description=gwtCase.getDescription();
}"
24868,"public static Calendar parseTimestamp(String timestamp){
  String dateFormat;
  Calendar calendar=Calendar.getInstance();
  if (timestamp.length() == 31) {
    dateFormat=""String_Node_Str"";
  }
 else   if (timestamp.length() == 29 || timestamp.length() == 35) {
    dateFormat=""String_Node_Str"";
  }
 else {
    dateFormat=""String_Node_Str"";
  }
  DateFormat df=new SimpleDateFormat(dateFormat);
  try {
    calendar.setTime(df.parse(timestamp));
  }
 catch (  ParseException ex) {
    ex.printStackTrace();
  }
  return calendar;
}","public static Calendar parseTimestamp(String timestamp){
  Pattern p1=Pattern.compile(""String_Node_Str"");
  Pattern p2=Pattern.compile(""String_Node_Str"");
  Pattern p3=Pattern.compile(""String_Node_Str"");
  String dateFormat;
  Calendar calendar=Calendar.getInstance();
  if (p1.matcher(timestamp).matches()) {
    dateFormat=""String_Node_Str"";
  }
 else   if (p2.matcher(timestamp).matches()) {
    dateFormat=""String_Node_Str"";
  }
 else   if (p3.matcher(timestamp).matches()) {
    StringTokenizer t1=new StringTokenizer(timestamp,""String_Node_Str"");
    String date=t1.nextToken();
    String time=t1.nextToken();
    String mk=t1.nextToken();
    StringTokenizer t2=new StringTokenizer(date,""String_Node_Str"");
    String month=t2.nextToken();
    String day=t2.nextToken();
    String year=t2.nextToken();
    if (month.length() == 1)     month=""String_Node_Str"" + month;
    if (day.length() == 1)     day=""String_Node_Str"" + month;
    StringTokenizer t3=new StringTokenizer(time,""String_Node_Str"");
    String hour=t3.nextToken();
    String min=t3.nextToken();
    String sec=t3.nextToken();
    if (hour.length() == 1)     hour=""String_Node_Str"" + hour;
    timestamp=month + ""String_Node_Str"" + day+ ""String_Node_Str""+ year+ ""String_Node_Str""+ hour+ ""String_Node_Str""+ min+ ""String_Node_Str""+ sec+ ""String_Node_Str""+ mk;
    dateFormat=""String_Node_Str"";
  }
 else {
    dateFormat=""String_Node_Str"";
  }
  DateFormat df=new SimpleDateFormat(dateFormat,Locale.US);
  try {
    calendar.setTime(df.parse(timestamp));
  }
 catch (  ParseException ex) {
    ex.printStackTrace();
  }
  return calendar;
}"
24869,"public void endElement(String uri,String name,String qName){
  if (this.currentEntry != null && this.type.equals(""String_Node_Str"")) {
    if (qName.equals(""String_Node_Str"")) {
      this.lastUpdate=Factory.parseTimestamp(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setTitle(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setAddress(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setAuthor(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setPublishDate(Factory.parseTimestamp(this.string));
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setDescription(this.string);
    }
  }
 else   if (this.currentEntry != null && this.type.equals(""String_Node_Str"")) {
    if (qName.equals(""String_Node_Str"")) {
      this.lastUpdate=Factory.parseTimestamp(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setTitle(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setAddress(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setAuthor(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setPublishDate(Factory.parseTimestamp(this.string));
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setDescription(this.string);
    }
  }
  if (qName.equals(""String_Node_Str"") || qName.equals(""String_Node_Str"")) {
    this.entries.add(this.currentEntry);
  }
}","public void endElement(String uri,String name,String qName){
  if (this.lastUpdate == null) {
    if (qName.equals(""String_Node_Str"") || qName.equals(""String_Node_Str"")) {
      this.lastUpdate=Factory.parseTimestamp(this.string);
    }
  }
  if (this.currentEntry != null && this.type.equals(""String_Node_Str"")) {
    if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setTitle(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setAddress(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setAuthor(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setPublishDate(Factory.parseTimestamp(this.string));
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setDescription(this.string);
    }
  }
 else   if (this.currentEntry != null && this.type.equals(""String_Node_Str"")) {
    if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setTitle(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setAddress(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setAuthor(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setPublishDate(Factory.parseTimestamp(this.string));
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setDescription(this.string);
    }
  }
  if (qName.equals(""String_Node_Str"") || qName.equals(""String_Node_Str"")) {
    this.entries.add(this.currentEntry);
  }
}"
24870,"public void endElement(String uri,String name,String qName){
  if (this.lastUpdate == null) {
    if (qName.equals(""String_Node_Str"") || qName.equals(""String_Node_Str"")) {
      this.lastUpdate=Factory.parseTimestamp(this.string);
    }
  }
  if (this.currentEntry != null && this.type.equals(""String_Node_Str"")) {
    if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setTitle(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setAddress(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setAuthor(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setPublishDate(Factory.parseTimestamp(this.string));
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setDescription(this.string);
    }
  }
 else   if (this.currentEntry != null && this.type.equals(""String_Node_Str"")) {
    if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setTitle(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setAddress(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setAuthor(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setPublishDate(Factory.parseTimestamp(this.string));
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setDescription(this.string);
    }
  }
  if (qName.equals(""String_Node_Str"") || qName.equals(""String_Node_Str"")) {
    this.entries.add(this.currentEntry);
  }
}","public void endElement(String uri,String name,String qName){
  if (this.lastUpdate == null) {
    if (qName.equals(""String_Node_Str"") || qName.equals(""String_Node_Str"")) {
      this.lastUpdate=Factory.parseTimestamp(this.string);
    }
  }
  if (this.currentEntry != null && this.type.equals(""String_Node_Str"")) {
    if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setTitle(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setAddress(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setAuthor(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setPublishDate(Factory.parseTimestamp(this.string));
      if (this.lastUpdate == null) {
        this.lastUpdate=Factory.parseTimestamp(this.string);
      }
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setDescription(this.string);
    }
  }
 else   if (this.currentEntry != null && this.type.equals(""String_Node_Str"")) {
    if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setTitle(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setAddress(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setAuthor(this.string);
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setPublishDate(Factory.parseTimestamp(this.string));
    }
 else     if (qName.equals(""String_Node_Str"")) {
      this.currentEntry.setDescription(this.string);
    }
  }
  if (qName.equals(""String_Node_Str"") || qName.equals(""String_Node_Str"")) {
    this.entries.add(this.currentEntry);
  }
}"
24871,"@Override public void loadFromXML(Node node) throws XMLException {
  File newSrc=null;
  Map<String,String> newParams=new HashMap<String,String>();
  NodeList nodes=node.getChildNodes();
  for (int index=0; index < nodes.getLength(); index++) {
    Node n=nodes.item(index);
    if (n.getNodeName().equals(""String_Node_Str"")) {
      try {
        URI inURI=new URI(n.getFirstChild().getNodeValue());
        if (formFile != null) {
          inURI=formFile.toURI().resolve(inURI);
        }
        newSrc=new File(inURI);
      }
 catch (      DOMException dome) {
        throw new XMLException(""String_Node_Str"",""String_Node_Str"",dome);
      }
catch (      URISyntaxException urise) {
        throw new XMLException(""String_Node_Str"",""String_Node_Str"",urise);
      }
    }
 else     if (n.getNodeName().equals(""String_Node_Str"")) {
      newParams.put(""String_Node_Str"",n.getFirstChild().getNodeValue());
      NamedNodeMap p=n.getAttributes();
      for (int pindex=0; pindex < p.getLength(); pindex++) {
        Node pn=p.item(pindex);
        newParams.put(pn.getNodeName(),pn.getNodeValue());
      }
    }
  }
  srcFile=newSrc;
  params=newParams;
}","@Override public void loadFromXML(Node node) throws XMLException {
  File newSrc=null;
  Map<String,String> newParams=new HashMap<String,String>();
  NodeList nodes=node.getChildNodes();
  for (int index=0; index < nodes.getLength(); index++) {
    Node n=nodes.item(index);
    if (n.getNodeName().equals(""String_Node_Str"")) {
      try {
        URI inURI=new URI(n.getFirstChild().getNodeValue());
        if (formFile != null) {
          inURI=getFormulaTargetURI().resolve(inURI);
        }
        newSrc=new File(inURI);
      }
 catch (      DOMException dome) {
        throw new XMLException(""String_Node_Str"",""String_Node_Str"",dome);
      }
catch (      URISyntaxException urise) {
        throw new XMLException(""String_Node_Str"",""String_Node_Str"",urise);
      }
    }
 else     if (n.getNodeName().equals(""String_Node_Str"")) {
      newParams.put(""String_Node_Str"",n.getFirstChild().getNodeValue());
      NamedNodeMap p=n.getAttributes();
      for (int pindex=0; pindex < p.getLength(); pindex++) {
        Node pn=p.item(pindex);
        newParams.put(pn.getNodeName(),pn.getNodeValue());
      }
    }
  }
  srcFile=newSrc;
  params=newParams;
}"
24872,"@Override public Node toXML(Document document,String name){
  Element out=document.createElement(name);
  URI outURI=srcFile.toURI();
  if (formFile != null) {
    outURI=formFile.toURI().relativize(outURI);
  }
  Element src=document.createElement(""String_Node_Str"");
  src.appendChild(document.createTextNode(outURI.toString()));
  out.appendChild(src);
  Element ldr=document.createElement(""String_Node_Str"");
  ldr.appendChild(document.createTextNode(getLoaderName()));
  for (  Map.Entry<String,String> param : params.entrySet()) {
    if (!param.getKey().equals(""String_Node_Str"")) {
      ldr.setAttribute(param.getKey(),param.getValue());
    }
  }
  out.appendChild(ldr);
  return out;
}","@Override public Node toXML(Document document,String name){
  Element out=document.createElement(name);
  URI outURI=srcFile.toURI();
  if (formFile != null) {
    outURI=getFormulaTargetURI().relativize(outURI);
  }
  Element src=document.createElement(""String_Node_Str"");
  src.appendChild(document.createTextNode(outURI.toString()));
  out.appendChild(src);
  Element ldr=document.createElement(""String_Node_Str"");
  ldr.appendChild(document.createTextNode(getLoaderName()));
  for (  Map.Entry<String,String> param : params.entrySet()) {
    if (!param.getKey().equals(""String_Node_Str"")) {
      ldr.setAttribute(param.getKey(),param.getValue());
    }
  }
  out.appendChild(ldr);
  return out;
}"
24873,"public void drawPauseMenu(int keyFlag){
  pauseBufferGraphics.drawImage(playBuffer,0,0,null);
switch (keyFlag) {
case 1:
    pauseBufferGraphics.drawImage(b,80,300,null);
  pauseBufferGraphics.drawImage(c,80,350,null);
pauseBufferGraphics.drawImage(e,80,400,null);
break;
case 2:
pauseBufferGraphics.drawImage(a,80,300,null);
pauseBufferGraphics.drawImage(d,80,350,null);
pauseBufferGraphics.drawImage(e,80,400,null);
break;
case 3:
pauseBufferGraphics.drawImage(a,80,300,null);
pauseBufferGraphics.drawImage(c,80,350,null);
pauseBufferGraphics.drawImage(f,80,400,null);
break;
default :
break;
}
playGraphics.drawImage(pauseBuffer,0,0,null);
}","public void drawPauseMenu(int keyFlag){
  pauseBufferGraphics.drawImage(playBuffer,0,0,null);
  pauseBufferGraphics.drawImage(pauseBg,0,0,null);
switch (keyFlag) {
case 1:
    pauseBufferGraphics.drawImage(b,80,300,null);
  pauseBufferGraphics.drawImage(c,80,350,null);
pauseBufferGraphics.drawImage(e,80,400,null);
break;
case 2:
pauseBufferGraphics.drawImage(a,80,300,null);
pauseBufferGraphics.drawImage(d,80,350,null);
pauseBufferGraphics.drawImage(e,80,400,null);
break;
case 3:
pauseBufferGraphics.drawImage(a,80,300,null);
pauseBufferGraphics.drawImage(c,80,350,null);
pauseBufferGraphics.drawImage(f,80,400,null);
break;
default :
break;
}
playGraphics.drawImage(pauseBuffer,0,0,null);
}"
24874,"public static void main(String[] args){
  if (args.length > 0 && args[1].equals(""String_Node_Str""))   debug=true;
  GWindow window=new GWindow();
  EventConnect.addEventListener(window);
}","public static void main(String[] args){
  if (args.length > 0 && args[0].equals(""String_Node_Str"")) {
    debug=true;
  }
  GWindow window=new GWindow();
  EventConnect.addEventListener(window);
}"
24875,"public Hero(ActionSource source,Point position,int radius,int life){
  this.position=position;
  this.HEIGHT=600;
  this.WIDTH=450;
  this.power=1;
  this.source=source;
  this.life=life;
  this.radius=radius;
  this.imageId=11;
  this.BULLETRADIUS=8;
  this.BULLETIMAGEID=17;
  this.BULLETSPEED=25;
}","public Hero(ActionSource source,Point position,int radius,int life){
  this.position=position;
  this.HEIGHT=600;
  this.WIDTH=450;
  this.power=1;
  this.source=source;
  this.life=life;
  this.radius=radius;
  this.imageId=11;
  this.BULLETRADIUS=8;
  this.BULLETIMAGEID=23;
  this.BULLETSPEED=25;
}"
24876,"public Bullet shoot(){
  if (source.check(""String_Node_Str"")) {
    Point bulletPoint=new Point(position);
    CircleBullet bullet=new CircleBullet(bulletPoint,BULLETRADIUS,BULLETIMAGEID,0,0);
    int x=(int)position.getX();
    int y=(int)position.getY() - 10;
    Point destination=new Point(x,y);
    Route bulletRoute=RouteFactory.getRoute(""String_Node_Str"",position,destination,BULLETSPEED,0);
    bullet.setRoute(bulletRoute);
    return bullet;
  }
  return null;
}","public Bullet shoot(){
  if (source.check(""String_Node_Str"")) {
    Point bulletPoint=new Point(position);
    CircleBullet bullet=new CircleBullet(bulletPoint,0,BULLETRADIUS,BULLETIMAGEID,shooting++);
    int x=(int)position.getX();
    int y=(int)position.getY() - 10;
    Point destination=new Point(x,y);
    Route bulletRoute=RouteFactory.getRoute(""String_Node_Str"",position,destination,BULLETSPEED,0);
    bullet.setRoute(bulletRoute);
    return bullet;
  }
  return null;
}"
24877,"private void collision(){
  for (  Bullet bullet : bulletList) {
    if (bullet == null)     continue;
    if (bullet.collision(player)) {
      int life=player.crash();
      EventConnect.dispatch(""String_Node_Str"");
      if (life < 0 && Nightmare.debug == false) {
        EventConnect.dispatch(""String_Node_Str"");
      }
    }
  }
  for (  Bullet bullet : playerBulletList) {
    if (bullet == null)     continue;
    Object[] enemies=enemyList.toArray();
    for (int i=0; i < enemies.length; i++) {
      Enemy enemy=(Enemy)enemies[i];
      if (enemy == null)       continue;
      if (bullet.collision(enemy)) {
        if (enemy.attacted(player.getPower())) {
          enemy.crash();
          enemyList.remove(enemy);
        }
      }
    }
  }
}","private void collision(){
  for (  Bullet bullet : bulletList) {
    if (bullet == null)     continue;
    if (bullet.collision(player)) {
      int life=player.crash();
      EventConnect.dispatch(""String_Node_Str"");
      if (life < 0 && Nightmare.debug == false) {
        EventConnect.dispatch(""String_Node_Str"");
      }
    }
  }
  for (  Bullet bullet : playerBulletList) {
    if (bullet == null)     continue;
    Object[] enemies=enemyList.toArray();
    for (int i=0; i < enemies.length; i++) {
      Enemy enemy=(Enemy)enemies[i];
      if (enemy == null)       continue;
      if (bullet.collision(enemy)) {
        if (enemy.attacted(player.getPower())) {
          enemy.crash();
          enemyList.set(enemy.getId(),null);
        }
      }
    }
  }
}"
24878,"private void recycle(){
  int x;
  int y;
  Object[] bullets=bulletList.toArray();
  for (int i=0; i < bullets.length; i++) {
    Bullet bullet=(Bullet)bullets[i];
    if (bullet == null)     continue;
    x=(int)bullet.getPosition().getX();
    y=(int)bullet.getPosition().getY();
    if (calcRecycle(x,y))     bulletList.remove(bullet);
  }
  Object[] playerBullets=playerBulletList.toArray();
  for (int i=0; i < playerBullets.length; i++) {
    Bullet bullet=(Bullet)playerBullets[i];
    if (bullet == null)     continue;
    x=(int)bullet.getPosition().getX();
    y=(int)bullet.getPosition().getY();
    if (calcRecycle(x,y))     playerBulletList.remove(bullet);
  }
  Object[] enemies=enemyList.toArray();
  for (int i=0; i < enemies.length; i++) {
    Enemy enemy=(Enemy)enemies[i];
    if (enemy == null)     continue;
    x=(int)enemy.getPosition().getX();
    y=(int)enemy.getPosition().getY();
    if (calcRecycle(x,y))     enemyList.remove(enemy);
  }
}","private void recycle(){
  int x;
  int y;
  Object[] bullets=bulletList.toArray();
  for (int i=0; i < bullets.length; i++) {
    Bullet bullet=(Bullet)bullets[i];
    if (bullet == null)     continue;
    x=(int)bullet.getPosition().getX();
    y=(int)bullet.getPosition().getY();
    if (calcRecycle(x,y))     bulletList.set(bullet.getId(),null);
  }
  Object[] playerBullets=playerBulletList.toArray();
  for (int i=0; i < playerBullets.length; i++) {
    Bullet bullet=(Bullet)playerBullets[i];
    if (bullet == null)     continue;
    x=(int)bullet.getPosition().getX();
    y=(int)bullet.getPosition().getY();
    if (calcRecycle(x,y))     playerBulletList.set(bullet.getId(),null);
  }
  Object[] enemies=enemyList.toArray();
  for (int i=0; i < enemies.length; i++) {
    Enemy enemy=(Enemy)enemies[i];
    if (enemy == null)     continue;
    x=(int)enemy.getPosition().getX();
    y=(int)enemy.getPosition().getY();
    if (calcRecycle(x,y))     enemyList.set(enemy.getId(),null);
  }
}"
24879,"public Instruction[][] getInstructionTable(){
  Instruction[][] out;
  Object[] array=instructionTable.toArray();
  int length=array.length;
  out=new Instruction[length][];
  for (int i=0; i < length; i++) {
    ArrayList<Instruction> arr=(ArrayList<Instruction>)array[i];
    if (array[i] != null)     out[i]=arr.toArray(new Instruction[arr.size()]);
  }
  return out;
}","public Instruction[][] getInstructionTable(){
  Instruction[][] out;
  Object[] array=instructionTable.toArray();
  int length=array.length;
  out=new Instruction[length][];
  for (int i=0; i < length; i++) {
    ArrayList<Instruction> arr=(ArrayList<Instruction>)array[i];
    if (array[i] != null)     out[i]=arr.toArray(new Instruction[arr.size()]);
  }
  if (Nightmare.debug) {
    for (int i=0; i < length; i++) {
      Instruction[] arr=out[i];
      if (arr != null) {
        for (        Instruction inst : arr) {
          System.out.println(i + ""String_Node_Str"" + inst.toString());
        }
      }
    }
  }
  return out;
}"
24880,"public void calc(){
  String[] arguments=new String[10];
  String targetType=variables.get(""String_Node_Str"");
  if (targetType.equals(""String_Node_Str"")) {
    return;
  }
  arguments[1]=""String_Node_Str"";
  int baseTime=parseInt(variables.get(""String_Node_Str""));
  int plusTime=parseInt(attr(attribute,1));
  int time=baseTime + plusTime;
  arguments[0]=""String_Node_Str"";
  String shapeType=attr(attribute,2);
  if (shapeType.equals(""String_Node_Str"")) {
    arguments[3]=""String_Node_Str"";
    arguments[4]=attr(attribute,3);
    arguments[5]=attr(attribute,4);
    arguments[6]=attr(attribute,5);
    int targetID=parseInt(variables.get(""String_Node_Str""));
    int offsetAngle=parseInt(attr(attribute,6));
    int amount=parseInt(variables.get(""String_Node_Str""));
    if (amount == 1) {
      arguments[2]=Integer.toString(targetID);
      arguments[7]=Integer.toString(offsetAngle);
      Instruction instruction=new Instruction(arguments);
      addInstruction(time,instruction);
    }
 else {
      int angle=parseInt(attr(attribute,7));
      float theta=angle / (amount - 1);
      float startAngle=offsetAngle - theta * (amount - 1) / 2;
      for (int i=0; i < amount; i++) {
        arguments[2]=Integer.toString(targetID + i);
        arguments[7]=Integer.toString((int)(startAngle + i * theta));
        Instruction instruction=new Instruction(arguments);
        addInstruction(time,instruction);
      }
    }
  }
}","public void calc(){
  String[] arguments=new String[10];
  String targetType=variables.get(""String_Node_Str"");
  if (targetType.equals(""String_Node_Str"")) {
    return;
  }
  arguments[1]=""String_Node_Str"";
  int baseTime=parseInt(variables.get(""String_Node_Str""));
  int plusTime=parseInt(attr(attribute,1));
  int time=baseTime + plusTime;
  arguments[0]=""String_Node_Str"";
  String shapeType=attr(attribute,2);
  if (shapeType.equals(""String_Node_Str"")) {
    arguments[3]=""String_Node_Str"";
    arguments[4]=attr(attribute,3);
    arguments[5]=attr(attribute,4);
    arguments[6]=attr(attribute,5);
    int targetID=parseInt(variables.get(""String_Node_Str""));
    int offsetAngle=parseInt(attr(attribute,6));
    int amount=parseInt(variables.get(""String_Node_Str""));
    if (amount == 1) {
      arguments[2]=Integer.toString(targetID);
      arguments[7]=Integer.toString(offsetAngle);
      Instruction instruction=new Instruction(arguments);
      addInstruction(time,instruction);
    }
 else {
      int angle=parseInt(attr(attribute,7));
      float theta;
      if (angle == 360)       theta=angle / (amount);
 else       theta=angle / (amount - 1);
      float startAngle=offsetAngle - theta * (amount - 1) / 2;
      for (int i=0; i < amount; i++) {
        arguments[2]=Integer.toString(targetID + i);
        arguments[7]=Integer.toString((int)(startAngle + i * theta));
        Instruction instruction=new Instruction(arguments);
        addInstruction(time,instruction);
      }
    }
  }
 else   if (shapeType.equals(""String_Node_Str"")) {
    arguments[3]=""String_Node_Str"";
    arguments[4]=attr(attribute,3);
    arguments[5]=attr(attribute,4);
    arguments[6]=attr(attribute,5);
    int targetID=parseInt(variables.get(""String_Node_Str""));
    int offsetAngle=parseInt(attr(attribute,6));
    int amount=parseInt(variables.get(""String_Node_Str""));
    if (amount == 1) {
      arguments[2]=Integer.toString(targetID);
      arguments[7]=Integer.toString(offsetAngle);
      Instruction instruction=new Instruction(arguments);
      addInstruction(time,instruction);
    }
 else {
      int angle=parseInt(attr(attribute,7));
      float theta;
      if (angle == 360)       theta=angle / (amount);
 else       theta=angle / (amount - 1);
      int interval=parseInt(attr(attribute,8));
      for (int i=0; i < amount; i++) {
        arguments[2]=Integer.toString(targetID + i);
        arguments[7]=Integer.toString((int)(offsetAngle + i * theta));
        Instruction instruction=new Instruction(arguments);
        addInstruction(time + i * interval,instruction);
      }
    }
  }
}"
24881,"public Container getContent(){
  return menu;
}","public Container getContent(){
  return container;
}"
24882,"public synchronized void display(){
  graphics=menu.getGraphics();
  menu.requestFocus();
  drawMenu();
}","public synchronized void display(){
  displayMainMenu();
}"
24883,"public GMenu(){
  String mapName=""String_Node_Str"";
  this.stage=new Stage(""String_Node_Str"");
  keyFlag=1;
  try {
    playItem=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    exitItem=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    playItemActive=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    exitItemActive=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    sword=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    mainMenuBg=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    roleMenuBg=ImageIO.read(new File(imagePath + ""String_Node_Str""));
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
  }
  menu.setBounds(0,0,800,600);
  menu.setVisible(true);
  menu.addKeyListener(mainMenuKeyListener);
}","public GMenu(){
  String mapName=""String_Node_Str"";
  this.stage=new Stage(""String_Node_Str"");
  keyFlag=1;
  try {
    playItem=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    exitItem=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    playItemActive=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    exitItemActive=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    sword=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    mainMenuBg=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    roleMenuBg=ImageIO.read(new File(imagePath + ""String_Node_Str""));
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
  }
  container.setBounds(0,0,800,600);
  container.setVisible(true);
  mainList=new ItemList();
  mainList.add(playItem,playItemActive,new Runnable(){
    public void run(){
      displayRoleMenu();
    }
  }
);
  mainList.add(exitItem,exitItemActive,new Runnable(){
    public void run(){
      System.exit(0);
    }
  }
);
  roleList=new ItemList();
  roleList.add(sword,sword,new Runnable(){
    public void run(){
      startGame();
    }
  }
);
}"
24884,"private void paused(){
  pauseMenu.display();
}","private void paused(){
  pauseMenu.getGraphics().drawImage(pauseBg,0,0,null);
  menu=new ListMenu(list,80,300,370,40,new Runnable(){
    public void run(){
      gameContinue();
    }
  }
);
  pauseMenu.add(menu);
  menu.display();
}"
24885,"private void gameContinue(){
  state=PLAY;
  pauseMenu.setVisible(false);
  game.requestFocus();
}","private void gameContinue(){
  EventConnect.dispatch(""String_Node_Str"");
  state=PLAY;
  pauseMenu.remove(menu);
  game.requestFocus();
}"
24886,"public void run(){
  playGraphics=play.getGraphics();
  scoreGraphics=scoreBar.getGraphics();
  game.requestFocus();
  while (state != END) {
    if (state == PAUSE) {
      paused();
    }
    drawScore();
    Printable[] list=null;
    try {
      list=queue.take();
    }
 catch (    InterruptedException e) {
      System.err.println(""String_Node_Str"");
    }
    playBufferGraphics.drawImage(playBg,0,0,null);
    int length=list.length;
    for (int i=0; i < length; i++) {
      Printable fly=list[i];
      int id=fly.getImageId();
      image=stage.getImage(id);
      if (image != null) {
        Point targetCoord=fly.getPosition();
        int imageHeight=image.getHeight(null);
        int imageWidth=image.getWidth(null);
        int dx=praseInt(targetCoord.getX()) - imageWidth / 2;
        int dy=praseInt(targetCoord.getY()) - imageHeight / 2;
        playBufferGraphics.drawImage(image,dx,dy,null);
      }
    }
    playGraphics.drawImage(playBuffer,0,0,null);
  }
}","public void run(){
  gameContinue();
}"
24887,"public void trigger(GameEvent event){
  String signal=event.getSignal();
  if (signal.equals(""String_Node_Str"")) {
    state=PAUSE;
  }
  if (signal.equals(""String_Node_Str"")) {
    state=END;
  }
  if (signal.equals(""String_Node_Str"")) {
    life=player.getLife();
  }
}","public void trigger(GameEvent event){
  String signal=event.getSignal();
  if (signal.equals(""String_Node_Str"")) {
    state=PAUSE;
  }
  if (signal.equals(""String_Node_Str"")) {
    state=END;
  }
  if (signal.equals(""String_Node_Str"")) {
    state=END;
  }
  if (signal.equals(""String_Node_Str"")) {
    life=player.getLife();
  }
}"
24888,"public GScreen(BlockingQueue<Printable[]> queue,KeyListener key,Stage stage,Hero player){
  this.key=key;
  this.stage=stage;
  this.player=player;
  this.queue=queue;
  game=new Container();
  game.setBounds(0,0,800,600);
  game.setVisible(true);
  play=new Canvas();
  play.setBounds(0,0,450,600);
  playBuffer=new BufferedImage(450,600,BufferedImage.TYPE_4BYTE_ABGR);
  playBufferGraphics=playBuffer.getGraphics();
  pauseBuffer=new BufferedImage(450,600,BufferedImage.TYPE_4BYTE_ABGR);
  pauseBufferGraphics=pauseBuffer.getGraphics();
  scoreBar=new Canvas();
  scoreBar.setBounds(450,0,800,600);
  scoreBar.setFocusable(false);
  scoreBuffer=new BufferedImage(350,600,BufferedImage.TYPE_4BYTE_ABGR);
  scoreBufferGraphics=scoreBuffer.getGraphics();
  pauseMenu=new PauseMenu();
  try {
    playBg=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    pauseBg=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    scoreBg=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    lifeImg=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    a=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    b=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    c=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    d=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    e=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    f=ImageIO.read(new File(imagePath + ""String_Node_Str""));
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
  }
  game.add(pauseMenu);
  game.add(play);
  game.add(scoreBar);
  game.addKeyListener(key);
  life=player.getLife();
}","public GScreen(BlockingQueue<Printable[]> queue,KeyListener key,final Stage stage,Hero player){
  this.key=key;
  this.stage=stage;
  this.player=player;
  this.queue=queue;
  game=new Container();
  game.setBounds(0,0,800,600);
  play=new Component(){
  }
;
  play.setBounds(0,0,450,600);
  playBuffer=new BufferedImage(450,600,BufferedImage.TYPE_4BYTE_ABGR);
  playBufferGraphics=playBuffer.getGraphics();
  pauseBuffer=new BufferedImage(450,600,BufferedImage.TYPE_4BYTE_ABGR);
  pauseBufferGraphics=pauseBuffer.getGraphics();
  scoreBar=new Component(){
  }
;
  scoreBar.setBounds(450,0,800,600);
  scoreBar.setFocusable(false);
  scoreBuffer=new BufferedImage(350,600,BufferedImage.TYPE_4BYTE_ABGR);
  scoreBufferGraphics=scoreBuffer.getGraphics();
  pauseMenu=new Container();
  pauseMenu.setBounds(0,0,450,600);
  try {
    playBg=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    pauseBg=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    scoreBg=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    lifeImg=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    a=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    b=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    c=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    d=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    e=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    f=ImageIO.read(new File(imagePath + ""String_Node_Str""));
  }
 catch (  IOException e) {
    System.err.println(""String_Node_Str"");
  }
  list=new ItemList();
  list.add(a,b,new Runnable(){
    public void run(){
      gameContinue();
    }
  }
);
  list.add(c,d,new Runnable(){
    public void run(){
      EventConnect.dispatch(""String_Node_Str"");
    }
  }
);
  list.add(e,f,new Runnable(){
    public void run(){
      restart();
    }
  }
);
  OverlayLayout layout=new OverlayLayout(game);
  game.setLayout(layout);
  game.add(pauseMenu);
  game.add(play);
  game.add(scoreBar);
  game.addKeyListener(key);
  life=player.getLife();
}"
24889,"public void trigger(GameEvent event){
  String signal=event.getSignal();
  if (signal.equals(""String_Node_Str"")) {
    menu();
  }
 else   if (signal.equals(""String_Node_Str"")) {
    Object[] data=event.getData();
    Stage stage=(Stage)data[0];
    String hero=(String)data[1];
    gameStart(stage,hero);
  }
 else   if (signal.equals(""String_Node_Str"")) {
    Object[] data=event.getData();
    Stage stage=(Stage)data[0];
    stage.restart();
    String hero=(String)data[1];
    gameStart(stage,hero);
  }
 else   if (signal.equals(""String_Node_Str"")) {
    gameEnd();
  }
 else   if (signal.equals(""String_Node_Str"")) {
    close();
  }
}","public void trigger(GameEvent event){
  String signal=event.getSignal();
  if (signal.equals(""String_Node_Str"")) {
    menu();
  }
 else   if (signal.equals(""String_Node_Str"")) {
    Object[] data=event.getData();
    Stage stage=(Stage)data[0];
    String hero=(String)data[1];
    gameStart(stage,hero);
  }
 else   if (signal.equals(""String_Node_Str"")) {
    Object[] data=event.getData();
    Stage stage=(Stage)data[0];
    stage.restart();
    String hero=(String)data[1];
    gameStart(stage,hero);
  }
 else   if (signal.equals(""String_Node_Str"")) {
    close();
  }
}"
24890,"private void menu(){
  GMenu menu=new GMenu();
  add(menu.getContent());
  menu.display();
  menu.drawMenu();
}","private void menu(){
  GMenu menu=new GMenu();
  add(menu.getContent());
  menu.display();
}"
24891,"public GWindow(){
  window=new Frame();
  window.setTitle(""String_Node_Str"");
  window.setLayout(null);
  window.setSize(width,height);
  window.setLocationRelativeTo(null);
  window.setResizable(false);
  window.setVisible(true);
  window.addWindowListener(new GameWindowListener());
  menu();
}","public GWindow(){
  window=new JFrame();
  window.setTitle(""String_Node_Str"");
  window.setLayout(null);
  window.setSize(width,height);
  window.setLocationRelativeTo(null);
  window.setResizable(false);
  window.setVisible(true);
  window.addWindowListener(new GameWindowListener());
  menu();
}"
24892,"private boolean calcRecycle(int x,int y){
  boolean xOver;
  boolean yOver;
  xOver=((x < 0 || x > WIDTH));
  yOver=((y < 0 || y > HEIGHT));
  if (xOver || yOver)   return true;
 else   return false;
}","private boolean calcRecycle(int x,int y){
  boolean xOver;
  boolean yOver;
  xOver=((x < 0 - WIDTH || x > WIDTH * 2));
  yOver=((y < 0 - HEIGHT || y > HEIGHT * 2));
  if (xOver || yOver)   return true;
 else   return false;
}"
24893,"private String attr(String s,int i){
  return s.split(""String_Node_Str"")[i];
}","private String attr(String s,int i){
  return s.trim().split(""String_Node_Str"")[i];
}"
24894,"public static Bullet getBullet(BulletInstruction instruction,Printable enemy){
  int bulletId=instruction.getBulletId();
  Point position=enemy.getPosition();
  int angle=enemy.getAngle();
  String bulletType=instruction.getBulletType();
  if (bulletType.equals(""String_Node_Str"")) {
    return new CircleBullet(position,angle,32,15,bulletId);
  }
 else   if (bulletType.equals(""String_Node_Str"")) {
    return new CircleBullet(position,angle,12,21,bulletId);
  }
 else   if (bulletType.equals(""String_Node_Str"")) {
    return new CircleBullet(position,angle,8,17,bulletId);
  }
 else   if (bulletType.equals(""String_Node_Str"")) {
    int radius=instruction.getRadius();
    int imageId=instruction.getImageId();
    return new CircleBullet(position,angle,radius,imageId,bulletId);
  }
  return null;
}","public static Bullet getBullet(BulletInstruction instruction,Printable enemy){
  int bulletId=instruction.getBulletId();
  Point position=enemy.getPosition();
  int angle=enemy.getAngle();
  String bulletType=instruction.getBulletType();
  if (bulletType.equals(""String_Node_Str"")) {
    return new CircleBullet(position,angle,32,15,bulletId);
  }
 else   if (bulletType.equals(""String_Node_Str"")) {
    return new CircleBullet(position,angle,12,22,bulletId);
  }
 else   if (bulletType.equals(""String_Node_Str"")) {
    return new CircleBullet(position,angle,8,17,bulletId);
  }
 else   if (bulletType.equals(""String_Node_Str"")) {
    int radius=instruction.getRadius();
    int imageId=instruction.getImageId();
    return new CircleBullet(position,angle,radius,imageId,bulletId);
  }
  return null;
}"
24895,"public long next(long previousTime) throws DelayException {
  if (previousTime < currentTime) {
    throw new DelayException();
  }
  try {
    while (previousTime == currentTime) {
      Thread.sleep(1);
    }
  }
 catch (  InterruptedException e) {
    System.out.println(""String_Node_Str"");
  }
  return currentTime;
}","public long next(long previousTime) throws DelayException {
  if (previousTime < currentTime) {
    throw new DelayException();
  }
  try {
    while (previousTime >= currentTime) {
      Thread.sleep(1);
    }
  }
 catch (  InterruptedException e) {
    System.out.println(""String_Node_Str"");
  }
  return currentTime;
}"
24896,"public void drawMenu(){
  try {
    play1=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    play2=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    exit1=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    exit2=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    bg=ImageIO.read(new File(imagePath + ""String_Node_Str""));
  }
 catch (  IOException e) {
  }
  graphics.drawImage(bg,0,0,null);
  graphics.drawImage(play2,400,200,null);
  graphics.drawImage(exit1,400,250,null);
}","public void drawMenu(){
  graphics.drawImage(mainMenuBg,0,0,null);
  graphics.drawImage(playItemActive,400,200,null);
  graphics.drawImage(exitItem,400,250,null);
}"
24897,"public void keyPressed(KeyEvent e){
switch (e.getKeyCode()) {
case KeyEvent.VK_UP:
    break;
case KeyEvent.VK_DOWN:
  break;
case KeyEvent.VK_ENTER:
menu.removeKeyListener(this);
menu.remove(menu);
EventConnect.dispatch(new GameEvent(""String_Node_Str"",new Object[]{stage,""String_Node_Str""}));
break;
case KeyEvent.VK_ESCAPE:
menu.removeKeyListener(this);
drawMenu();
break;
}
}","public void keyPressed(KeyEvent e){
switch (e.getKeyCode()) {
case KeyEvent.VK_UP:
    break;
case KeyEvent.VK_DOWN:
  break;
case KeyEvent.VK_ENTER:
EventConnect.dispatch(new GameEvent(""String_Node_Str"",new Object[]{stage,""String_Node_Str""}));
break;
case KeyEvent.VK_ESCAPE:
menu.removeKeyListener(roleMenuKeyListener);
menu.addKeyListener(mainMenuKeyListener);
drawMenu();
break;
}
}"
24898,"public void display(){
  graphics=menu.getGraphics();
  drawMenu();
  menu.requestFocus();
}","public synchronized void display(){
  graphics=menu.getGraphics();
  menu.requestFocus();
  drawMenu();
}"
24899,"public GMenu(){
  String mapName=""String_Node_Str"";
  this.stage=new Stage(""String_Node_Str"");
  keyFlag=1;
  menu.setBounds(0,0,800,600);
  menu.setVisible(true);
  menu.addKeyListener(this);
}","public GMenu(){
  String mapName=""String_Node_Str"";
  this.stage=new Stage(""String_Node_Str"");
  keyFlag=1;
  try {
    playItem=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    exitItem=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    playItemActive=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    exitItemActive=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    sword=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    mainMenuBg=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    roleMenuBg=ImageIO.read(new File(imagePath + ""String_Node_Str""));
  }
 catch (  IOException e) {
    System.out.println(""String_Node_Str"");
  }
  menu.setBounds(0,0,800,600);
  menu.setVisible(true);
  menu.addKeyListener(mainMenuKeyListener);
}"
24900,"public void drawRoleMenu(){
  try {
    sword=ImageIO.read(new File(imagePath + ""String_Node_Str""));
    bg=ImageIO.read(new File(imagePath + ""String_Node_Str""));
  }
 catch (  IOException e) {
  }
  graphics.drawImage(bg,0,0,null);
  graphics.drawImage(sword,400,300,null);
}","public void drawRoleMenu(){
  graphics.drawImage(roleMenuBg,0,0,null);
  graphics.drawImage(sword,400,300,null);
}"
24901,"public Point getPoint(){
  String[] pair=arguments[3].split(',');
  x=Integer.valueOf(pair[0]);
  y=Integer.valueOf(pair[1]);
  return new Point(x,y);
}","public Point getPoint(){
  String[] pair=arguments[3].split(""String_Node_Str"");
  int x=Integer.valueOf(pair[0]);
  int y=Integer.valueOf(pair[1]);
  return new Point(x,y);
}"
24902,"public Instruction(String[] arguments){
  this.arguments=arguments.copy();
}","public Instruction(String[] arguments){
  this.arguments=arguments.clone();
}"
24903,float getCurveRadius();,"public float getCurveRadius(){
  return Floot.valueOf(arguments[7]);
}"
24904,"public Point getPointOffset(){
  String[] pair=arguments[7].split(',');
  x=Integer.valueOf(pair[0]);
  y=Integer.valueOf(pair[1]);
  return new Point(x,y);
}","public Point getPointOffset(){
  String[] pair=arguments[7].split(""String_Node_Str"");
  int x=Integer.valueOf(pair[0]);
  int y=Integer.valueOf(pair[1]);
  return new Point(x,y);
}"
24905,"public String getPointRefer(){
  return argument[6];
}","public String getPointRefer(){
  return arguments[6];
}"
24906,"public static void newGame(Window window,Stage stage,String hero){
}","public static void newGame(GWindow window,Stage stage,String hero){
  Clock clock=new Clock(100);
  ArrayBlockingQueue<Printable[]> channel=new ArrayBlockingQueue<Printable[]>(1);
  Processor processor=new Processor(clock,channel);
  processor.setStage(stage);
  KeyBoardListener keyboard=new KeyBoardListener(clock);
  GameOutput output=new GameOutput(window,keyboard,channel,stage);
  output.setStage(stage);
  Player player=new Player(hero,keyboard);
  processor.addPlayer(player);
  Thread processorThread=new Thread(processor);
  Thread outputThread=new Thread(output);
  processorThread.start();
  outputThread.start();
  clock.start();
}"
24907,"public static void main(String[] args){
  Menu menu=new Menu();
}","public static void main(String[] args){
  GMenu menu=new GMenu();
}"
24908,"public static void sety(CommandSender sender,String[] args){
  String varY=null;
  if (EZCalc.usePermissions) {
    if (!EZCalc.permissionHandler.has((Player)sender,""String_Node_Str"")) {
      Error.error(""String_Node_Str"",sender);
    }
 else {
      int length=args.length;
      for (int k=0; k < length; k++) {
        boolean concatenate=false;
        if (!concatenate) {
          args[0]=ParseVariables.replaceVariables(sender,args[0]);
          varY=args[0];
          concatenate=true;
        }
 else {
          args[k]=ParseVariables.replaceVariables(sender,args[k]);
          varY+=args[k];
        }
      }
      String answer=Y.solve(varY);
      if (answer.equals(""String_Node_Str"")) {
        Error.error(""String_Node_Str"",sender);
      }
 else {
        if (answer.equals(""String_Node_Str"")) {
          Error.error(""String_Node_Str"",sender);
        }
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_GREEN+ answer);
        EZCalc.y.put((Player)sender,varY);
      }
    }
  }
 else {
    int length=args.length;
    for (int k=0; k < length; k++) {
      boolean concatenate=false;
      if (!concatenate) {
        args[0]=ParseVariables.replaceVariables(sender,args[0]);
        varY=args[0];
        concatenate=true;
      }
 else {
        args[k]=ParseVariables.replaceVariables(sender,args[k]);
        varY+=args[k];
      }
    }
    String answer=Y.solve(varY);
    if (answer.equals(""String_Node_Str"")) {
      Error.error(""String_Node_Str"",sender);
    }
 else {
      if (answer.equals(""String_Node_Str"")) {
        Error.error(""String_Node_Str"",sender);
      }
      sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_GREEN+ answer);
      EZCalc.y.put((Player)sender,varY);
    }
  }
}","public static void sety(CommandSender sender,String[] args){
  String varY=null;
  if (EZCalc.usePermissions) {
    if (!EZCalc.permissionHandler.has((Player)sender,""String_Node_Str"")) {
      Error.error(""String_Node_Str"",sender);
    }
 else {
      int length=args.length;
      for (int k=0; k < length; k++) {
        boolean concatenate=false;
        if (!concatenate) {
          args[0]=ParseVariables.replaceVariables(sender,args[0]);
          varY=args[0];
          concatenate=true;
        }
 else {
          args[k]=ParseVariables.replaceVariables(sender,args[k]);
          varY+=args[k];
        }
      }
      String answer=Y.solve(varY);
      if (answer.equals(""String_Node_Str"")) {
        Error.error(""String_Node_Str"",sender);
      }
 else {
        if (answer.equals(""String_Node_Str"")) {
          Error.error(""String_Node_Str"",sender);
        }
 else {
          sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_GREEN+ answer);
          EZCalc.y.put((Player)sender,varY);
        }
      }
    }
  }
 else {
    int length=args.length;
    for (int k=0; k < length; k++) {
      boolean concatenate=false;
      if (!concatenate) {
        args[0]=ParseVariables.replaceVariables(sender,args[0]);
        varY=args[0];
        concatenate=true;
      }
 else {
        args[k]=ParseVariables.replaceVariables(sender,args[k]);
        varY+=args[k];
      }
    }
    String answer=Y.solve(varY);
    if (answer.equals(""String_Node_Str"")) {
      Error.error(""String_Node_Str"",sender);
    }
 else {
      if (answer.equals(""String_Node_Str"")) {
        Error.error(""String_Node_Str"",sender);
      }
 else {
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_GREEN+ answer);
        EZCalc.y.put((Player)sender,varY);
      }
    }
  }
}"
24909,"public static void setx(CommandSender sender,String[] args){
  String varX=null;
  if (EZCalc.usePermissions) {
    if (!EZCalc.permissionHandler.has((Player)sender,""String_Node_Str"")) {
      Error.error(""String_Node_Str"",sender);
    }
 else {
      int length=args.length;
      for (int k=0; k < length; k++) {
        boolean concatenate=false;
        if (!concatenate) {
          args[0]=ParseVariables.replaceVariables(sender,args[0]);
          varX=args[0];
          concatenate=true;
        }
 else {
          args[k]=ParseVariables.replaceVariables(sender,args[k]);
          varX+=args[k];
        }
      }
      String answer=X.solve(varX);
      if (answer.equals(""String_Node_Str"")) {
        Error.error(""String_Node_Str"",sender);
      }
 else {
        if (answer.equals(""String_Node_Str"")) {
          Error.error(""String_Node_Str"",sender);
        }
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_GREEN+ answer);
        EZCalc.x.put((Player)sender,varX);
      }
    }
  }
 else {
    int length=args.length;
    for (int k=0; k < length; k++) {
      boolean concatenate=false;
      if (!concatenate) {
        args[0]=ParseVariables.replaceVariables(sender,args[0]);
        varX=args[0];
        concatenate=true;
      }
 else {
        args[k]=ParseVariables.replaceVariables(sender,args[k]);
        varX+=args[k];
      }
    }
    String answer=X.solve(varX);
    if (answer.equals(""String_Node_Str"")) {
      Error.error(""String_Node_Str"",sender);
    }
 else {
      if (answer.equals(""String_Node_Str"")) {
        Error.error(""String_Node_Str"",sender);
      }
      sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_GREEN+ answer);
      EZCalc.x.put((Player)sender,varX);
    }
  }
}","public static void setx(CommandSender sender,String[] args){
  String varX=null;
  if (EZCalc.usePermissions) {
    if (!EZCalc.permissionHandler.has((Player)sender,""String_Node_Str"")) {
      Error.error(""String_Node_Str"",sender);
    }
 else {
      int length=args.length;
      for (int k=0; k < length; k++) {
        boolean concatenate=false;
        if (!concatenate) {
          args[0]=ParseVariables.replaceVariables(sender,args[0]);
          varX=args[0];
          concatenate=true;
        }
 else {
          args[k]=ParseVariables.replaceVariables(sender,args[k]);
          varX+=args[k];
        }
      }
      String answer=X.solve(varX);
      if (answer.equals(""String_Node_Str"")) {
        Error.error(""String_Node_Str"",sender);
      }
 else {
        if (answer.equals(""String_Node_Str"")) {
          Error.error(""String_Node_Str"",sender);
        }
 else {
          sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_GREEN+ answer);
          EZCalc.x.put((Player)sender,varX);
        }
      }
    }
  }
 else {
    int length=args.length;
    for (int k=0; k < length; k++) {
      boolean concatenate=false;
      if (!concatenate) {
        args[0]=ParseVariables.replaceVariables(sender,args[0]);
        varX=args[0];
        concatenate=true;
      }
 else {
        args[k]=ParseVariables.replaceVariables(sender,args[k]);
        varX+=args[k];
      }
    }
    String answer=X.solve(varX);
    if (answer.equals(""String_Node_Str"")) {
      Error.error(""String_Node_Str"",sender);
    }
 else {
      if (answer.equals(""String_Node_Str"")) {
        Error.error(""String_Node_Str"",sender);
      }
 else {
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_GREEN+ answer);
        EZCalc.x.put((Player)sender,varX);
      }
    }
  }
}"
24910,"public static void setz(CommandSender sender,String[] args){
  String varZ=null;
  if (EZCalc.usePermissions) {
    if (!EZCalc.permissionHandler.has((Player)sender,""String_Node_Str"")) {
      Error.error(""String_Node_Str"",sender);
    }
 else {
      int length=args.length;
      for (int k=0; k < length; k++) {
        boolean concatenate=false;
        if (!concatenate) {
          args[0]=ParseVariables.replaceVariables(sender,args[0]);
          varZ=args[0];
          concatenate=true;
        }
 else {
          args[k]=ParseVariables.replaceVariables(sender,args[k]);
          varZ+=args[k];
        }
      }
      String answer=Z.solve(varZ);
      if (answer.equals(""String_Node_Str"")) {
        Error.error(""String_Node_Str"",sender);
      }
 else {
        if (answer.equals(""String_Node_Str"")) {
          Error.error(""String_Node_Str"",sender);
        }
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_GREEN+ answer);
        EZCalc.z.put((Player)sender,varZ);
      }
    }
  }
 else {
    int length=args.length;
    for (int k=0; k < length; k++) {
      boolean concatenate=false;
      if (!concatenate) {
        args[0]=ParseVariables.replaceVariables(sender,args[0]);
        varZ=args[0];
        concatenate=true;
      }
 else {
        args[k]=ParseVariables.replaceVariables(sender,args[k]);
        varZ+=args[k];
      }
    }
    String answer=Z.solve(varZ);
    if (answer.equals(""String_Node_Str"")) {
      Error.error(""String_Node_Str"",sender);
    }
 else {
      if (answer.equals(""String_Node_Str"")) {
        Error.error(""String_Node_Str"",sender);
      }
      sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_GREEN+ answer);
      EZCalc.z.put((Player)sender,varZ);
    }
  }
}","public static void setz(CommandSender sender,String[] args){
  String varZ=null;
  if (EZCalc.usePermissions) {
    if (!EZCalc.permissionHandler.has((Player)sender,""String_Node_Str"")) {
      Error.error(""String_Node_Str"",sender);
    }
 else {
      int length=args.length;
      for (int k=0; k < length; k++) {
        boolean concatenate=false;
        if (!concatenate) {
          args[0]=ParseVariables.replaceVariables(sender,args[0]);
          varZ=args[0];
          concatenate=true;
        }
 else {
          args[k]=ParseVariables.replaceVariables(sender,args[k]);
          varZ+=args[k];
        }
      }
      String answer=Z.solve(varZ);
      if (answer.equals(""String_Node_Str"")) {
        Error.error(""String_Node_Str"",sender);
      }
 else {
        if (answer.equals(""String_Node_Str"")) {
          Error.error(""String_Node_Str"",sender);
        }
 else {
          sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_GREEN+ answer);
          EZCalc.z.put((Player)sender,varZ);
        }
      }
    }
  }
 else {
    int length=args.length;
    for (int k=0; k < length; k++) {
      boolean concatenate=false;
      if (!concatenate) {
        args[0]=ParseVariables.replaceVariables(sender,args[0]);
        varZ=args[0];
        concatenate=true;
      }
 else {
        args[k]=ParseVariables.replaceVariables(sender,args[k]);
        varZ+=args[k];
      }
    }
    String answer=Z.solve(varZ);
    if (answer.equals(""String_Node_Str"")) {
      Error.error(""String_Node_Str"",sender);
    }
 else {
      if (answer.equals(""String_Node_Str"")) {
        Error.error(""String_Node_Str"",sender);
      }
 else {
        sender.sendMessage(ChatColor.GOLD + ""String_Node_Str"" + ChatColor.DARK_GREEN+ answer);
        EZCalc.z.put((Player)sender,varZ);
      }
    }
  }
}"
24911,"private Long shiftDownRight(Long position){
  Long drShift=position >> 9;
  return new Long(drShift & ~LEFT_MASK);
}","private Long shiftDownRight(Long position){
  Long drShift=position >>> 9;
  return new Long(drShift & ~LEFT_MASK);
}"
24912,"private Long shiftDownLeft(Long position){
  Long dlShift=position >> 7;
  return new Long(dlShift & ~RIGHT_MASK);
}","private Long shiftDownLeft(Long position){
  Long dlShift=position >>> 7;
  return new Long(dlShift & ~RIGHT_MASK);
}"
24913,"private Long shiftRight(Long position){
  Long rShift=position >> 1;
  return new Long(rShift & ~LEFT_MASK);
}","private Long shiftRight(Long position){
  Long rShift=position >>> 1;
  return new Long(rShift & ~LEFT_MASK);
}"
24914,"private Long shiftDown(Long position){
  return new Long(position >> 8);
}","private Long shiftDown(Long position){
  return new Long(position >>> 8);
}"
24915,"private Long shiftUpRight(Long position){
  Long urShift=position << 7;
  return new Long(urShift & ~LEFT_MASK);
}","private Long shiftUpRight(Long position){
  Long urShift=position << 7L;
  return new Long(urShift & ~LEFT_MASK);
}"
24916,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_map);
  this.mMarkerFactory=new MarkerFactory();
  this.mContentResolver=getContentResolver();
  this.mApplication=(EventORamaApplication)getApplication();
  this.mMapView=(MapView)findViewById(R.id.mapview);
  List<Overlay> mapOverlays=mMapView.getOverlays();
  this.mUserOverlay=new UsersOverlay(getResources().getDrawable(R.drawable.cross));
  mapOverlays.add(mUserOverlay);
  SharedPreferences settings=getSharedPreferences(PREFS_NAME,Context.MODE_PRIVATE);
  if (!settings.contains(PREF_LAT_KEY)) {
    mlastLocationFinder=mApplication.getLastLocationFinder(getBaseContext());
    mlastLocationFinder.setChangedLocationListener(oneShotLocationUpdateListener);
    Location bestEffortLocation=mlastLocationFinder.getLastBestLocation(10,System.currentTimeMillis() - 15 * 1000);
    if (bestEffortLocation != null)     updateMap(bestEffortLocation);
  }
  this.mMapView.setBuiltInZoomControls(true);
  ImageView nav_events=(ImageView)findViewById(R.id.nav_events);
  nav_events.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(mContext,EventStreamActivity.class);
      intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
      startActivity(intent);
    }
  }
);
  ImageView nav_people=(ImageView)findViewById(R.id.nav_people);
  nav_people.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(mContext,PeopleActivity.class);
      intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
      startActivity(intent);
    }
  }
);
  ImageView nav_location=(ImageView)findViewById(R.id.nav_location);
  nav_location.setSelected(true);
  nav_location.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_map);
  this.mMarkerFactory=new MarkerFactory();
  this.mContentResolver=getContentResolver();
  this.mApplication=(EventORamaApplication)getApplication();
  this.mMapView=(MapView)findViewById(R.id.mapview);
  List<Overlay> mapOverlays=mMapView.getOverlays();
  this.mUserOverlay=new UsersOverlay(getResources().getDrawable(R.drawable.map_marker));
  mapOverlays.add(mUserOverlay);
  SharedPreferences settings=getSharedPreferences(PREFS_NAME,Context.MODE_PRIVATE);
  if (!settings.contains(PREF_LAT_KEY)) {
    mlastLocationFinder=mApplication.getLastLocationFinder(getBaseContext());
    mlastLocationFinder.setChangedLocationListener(oneShotLocationUpdateListener);
    Location bestEffortLocation=mlastLocationFinder.getLastBestLocation(10,System.currentTimeMillis() - 15 * 1000);
    if (bestEffortLocation != null)     updateMap(bestEffortLocation);
  }
  this.mMapView.setBuiltInZoomControls(true);
  ImageView nav_events=(ImageView)findViewById(R.id.nav_events);
  nav_events.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(mContext,EventStreamActivity.class);
      intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
      startActivity(intent);
    }
  }
);
  ImageView nav_people=(ImageView)findViewById(R.id.nav_people);
  nav_people.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(mContext,PeopleActivity.class);
      intent.setFlags(Intent.FLAG_ACTIVITY_NO_ANIMATION);
      startActivity(intent);
    }
  }
);
  ImageView nav_location=(ImageView)findViewById(R.id.nav_location);
  nav_location.setSelected(true);
  nav_location.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
    }
  }
);
}"
24917,"private BitmapDrawable getMarker(int userId,byte[] image){
  Canvas canvas=new Canvas(blankImage);
  canvas.drawBitmap(bitMapBG,0,0,mPaint);
  Bitmap userImage=BitmapFactory.decodeByteArray(image,0,image.length);
  if (userImage.getWidth() > MAX_WIDTH || userImage.getHeight() > MAX_HEIGHT) {
    final float scaleWidth=MAX_WIDTH / (float)userImage.getWidth();
    final float scaleHeight=MAX_HEIGHT / (float)userImage.getHeight();
    final float scale=Math.min(scaleWidth,scaleHeight);
    Matrix matrix=new Matrix();
    matrix.postScale(scale,scale);
    Bitmap resizedBitmap=Bitmap.createBitmap(userImage,0,0,userImage.getWidth(),userImage.getHeight(),matrix,true);
    canvas.drawBitmap(resizedBitmap,BORDER,BORDER,mPaint);
  }
 else   canvas.drawBitmap(userImage,BORDER,BORDER,mPaint);
  BitmapDrawable bmd=new BitmapDrawable(blankImage);
  return bmd;
}","private BitmapDrawable getMarker(int userId,byte[] image){
  Canvas canvas=new Canvas(blankImage);
  canvas.drawBitmap(bitMapBG,0,0,mPaint);
  Bitmap userImage=BitmapFactory.decodeByteArray(image,0,image.length);
  if (userImage.getWidth() > MAX_WIDTH || userImage.getHeight() > MAX_HEIGHT) {
    final float scaleWidth=MAX_WIDTH / (float)userImage.getWidth();
    final float scaleHeight=MAX_HEIGHT / (float)userImage.getHeight();
    final float scale=Math.min(scaleWidth,scaleHeight);
    Matrix matrix=new Matrix();
    matrix.postScale(scale,scale);
    Bitmap resizedBitmap=Bitmap.createBitmap(userImage,0,0,userImage.getWidth(),userImage.getHeight(),matrix,true);
    canvas.drawBitmap(resizedBitmap,BORDER,BORDER,mPaint);
  }
 else   canvas.drawBitmap(userImage,BORDER,BORDER,mPaint);
  userImage.recycle();
  BitmapDrawable bmd=new BitmapDrawable(blankImage);
  return bmd;
}"
24918,"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mCursor=managedQuery(EventStreamContentProvider.content_uri,null,null,null,null);
  this.mAdapter=new EventStreamAdapter(this,mCursor);
  startManagingCursor(mCursor);
  setListAdapter(mAdapter);
  setContentView(R.layout.activity_eventstream);
  final Intent intent=getIntent();
  if (!intent.hasExtra(EVENTSTREAM_NOSYNC)) {
    final Intent service=new Intent(this,ActivitySyncService.class);
    startService(service);
  }
  Button peopleButton=(Button)findViewById(R.id.button2);
  peopleButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(mContext,PeopleActivity.class);
      startActivity(intent);
    }
  }
);
  Button refreshpeopleButton=(Button)findViewById(R.id.button4);
  refreshpeopleButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(mContext,PeopleSyncService.class);
      startService(intent);
    }
  }
);
  Button refreshActivityButton=(Button)findViewById(R.id.button3);
  refreshActivityButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(mContext,ActivitySyncService.class);
      startService(intent);
    }
  }
);
  Button whatsapp=(Button)findViewById(R.id.button1);
  whatsapp.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(mContext,EventCreationActivity.class);
      startActivity(intent);
    }
  }
);
}","@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mCursor=managedQuery(EventStreamContentProvider.content_uri,null,null,null,null);
  this.mAdapter=new EventStreamAdapter(this,mCursor);
  startManagingCursor(mCursor);
  setListAdapter(mAdapter);
  setContentView(R.layout.activity_eventstream);
  final Intent intent=getIntent();
  if (!intent.hasExtra(EVENTSTREAM_NOSYNC)) {
    final Intent service=new Intent(this,ActivitySyncService.class);
  }
  Button peopleButton=(Button)findViewById(R.id.button2);
  peopleButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(mContext,PeopleActivity.class);
      startActivity(intent);
    }
  }
);
  Button refreshpeopleButton=(Button)findViewById(R.id.button4);
  refreshpeopleButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(mContext,PeopleSyncService.class);
      startService(intent);
    }
  }
);
  Button refreshActivityButton=(Button)findViewById(R.id.button3);
  refreshActivityButton.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(mContext,ActivitySyncService.class);
      startService(intent);
    }
  }
);
  Button whatsapp=(Button)findViewById(R.id.button1);
  whatsapp.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      Intent intent=new Intent(mContext,EventCreationActivity.class);
      startActivity(intent);
    }
  }
);
}"
24919,"@Override protected void onHandleIntent(Intent intent){
  final EventORamaApplication eora=(EventORamaApplication)getApplication();
  final Gson gson=new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
  final Uri uri=EventStreamContentProvider.content_uri;
  HTTPResponse resp=eora.doHttpRequest(""String_Node_Str"",null,EventORamaApplication.HTTP_METHOD_GET);
  if (resp.getRespCode() == 200) {
    ActivityElement[] serverElements=gson.fromJson(resp.getBody(),ActivityElement[].class);
    Log.v(TAG,""String_Node_Str"" + serverElements.length + ""String_Node_Str"");
    for (int i=0; i < serverElements.length; i++) {
      String timestamp=serverElements[i].getTimestamp() + ""String_Node_Str"";
      Cursor c=mContentResolver.query(uri,null,EventStreamContentProvider.Columns.CREATED + ""String_Node_Str"",new String[]{timestamp},null);
      if (c != null && !c.moveToFirst()) {
        ContentValues cv=new ContentValues();
        cv.put(EventStreamContentProvider.Columns.CREATED,serverElements[i].getTimestamp());
        cv.put(EventStreamContentProvider.Columns.PEOPLE_ID,serverElements[i].getUser_id());
        cv.put(EventStreamContentProvider.Columns.TEXT,serverElements[i].getText());
        cv.put(EventStreamContentProvider.Columns.TYPE,serverElements[i].getType());
        cv.put(EventStreamContentProvider.Columns.TYPE,EventStreamContentProvider.SAVE_STATE_SERVER);
        mContentResolver.insert(uri,cv);
        c.close();
      }
 else       Log.v(TAG,""String_Node_Str"" + serverElements[i].toString());
    }
  }
  Cursor c=mContentResolver.query(uri,null,EventStreamContentProvider.Columns.SAVE_STATE + ""String_Node_Str"" + EventStreamContentProvider.SAVE_STATE_LOCAL,null,null);
  if (c != null && c.getCount() > 0) {
    ActivityElement[] activities=new ActivityElement[c.getCount()];
    if (c.moveToFirst()) {
      int counter=0;
      final int idCol=c.getColumnIndex(EventStreamContentProvider.Columns.ID);
      final int textCol=c.getColumnIndex(EventStreamContentProvider.Columns.TEXT);
      final int useridCol=c.getColumnIndex(EventStreamContentProvider.Columns.PEOPLE_ID);
      final int timestampCol=c.getColumnIndex(EventStreamContentProvider.Columns.CREATED);
      final int typeCol=c.getColumnIndex(EventStreamContentProvider.Columns.TYPE);
      do {
        activities[counter]=new ActivityElement(c.getInt(idCol),c.getLong(timestampCol),c.getString(textCol),c.getInt(typeCol),c.getInt(useridCol));
      }
 while (c.moveToNext());
      c.close();
      final String json=gson.toJson(activities);
      Log.v(TAG,""String_Node_Str"" + json);
      resp=eora.doHttpRequest(""String_Node_Str"",json,EventORamaApplication.HTTP_METHOD_POST);
      final int responseCode=resp.getRespCode();
switch (responseCode) {
case 200:
default :
        StringBuilder sb=new StringBuilder(EventStreamContentProvider.Columns.ID).append(""String_Node_Str"");
      int[] idsfromserver=gson.fromJson(resp.getBody(),int[].class);
    for (int i=0; i < idsfromserver.length; i++) {
      if (idsfromserver[i] > 0) {
        sb.append(activities[i].getInternal_id());
      }
 else       Log.e(TAG,""String_Node_Str"" + idsfromserver[i]);
      sb.append(',');
    }
  sb.deleteCharAt(sb.length() - 1);
sb.append(""String_Node_Str"");
ContentValues cv=new ContentValues();
cv.put(EventStreamContentProvider.Columns.SAVE_STATE,EventStreamContentProvider.SAVE_STATE_SERVER);
int updates=mContentResolver.update(uri,cv,sb.toString(),null);
Log.v(TAG,""String_Node_Str"" + updates + ""String_Node_Str"");
break;
}
}
}
}","@Override protected void onHandleIntent(Intent intent){
  final EventORamaApplication eora=(EventORamaApplication)getApplication();
  final Gson gson=new GsonBuilder().excludeFieldsWithoutExposeAnnotation().create();
  final Uri uri=EventStreamContentProvider.content_uri;
  HTTPResponse resp=eora.doHttpRequest(""String_Node_Str"",null,EventORamaApplication.HTTP_METHOD_GET);
  if (resp.getRespCode() == 200) {
    ActivityElement[] serverElements=gson.fromJson(resp.getBody(),ActivityElement[].class);
    Log.v(TAG,""String_Node_Str"" + serverElements.length + ""String_Node_Str"");
    for (int i=0; i < serverElements.length; i++) {
      String timestamp=serverElements[i].getTimestamp() + ""String_Node_Str"";
      Cursor c=mContentResolver.query(uri,null,EventStreamContentProvider.Columns.CREATED + ""String_Node_Str"",new String[]{timestamp},null);
      if (c != null && !c.moveToFirst()) {
        ContentValues cv=new ContentValues();
        cv.put(EventStreamContentProvider.Columns.CREATED,serverElements[i].getTimestamp());
        cv.put(EventStreamContentProvider.Columns.PEOPLE_ID,serverElements[i].getUser_id());
        cv.put(EventStreamContentProvider.Columns.TEXT,serverElements[i].getText());
        cv.put(EventStreamContentProvider.Columns.TYPE,serverElements[i].getType());
        cv.put(EventStreamContentProvider.Columns.TYPE,EventStreamContentProvider.SAVE_STATE_SERVER);
        mContentResolver.insert(uri,cv);
      }
 else       Log.v(TAG,""String_Node_Str"" + serverElements[i].toString());
      if (c != null)       c.close();
    }
  }
  Cursor c=mContentResolver.query(uri,null,EventStreamContentProvider.Columns.SAVE_STATE + ""String_Node_Str"" + EventStreamContentProvider.SAVE_STATE_LOCAL,null,null);
  if (c != null && c.getCount() > 0) {
    ActivityElement[] activities=new ActivityElement[c.getCount()];
    if (c.moveToFirst()) {
      int counter=0;
      final int idCol=c.getColumnIndex(EventStreamContentProvider.Columns.ID);
      final int textCol=c.getColumnIndex(EventStreamContentProvider.Columns.TEXT);
      final int useridCol=c.getColumnIndex(EventStreamContentProvider.Columns.PEOPLE_ID);
      final int timestampCol=c.getColumnIndex(EventStreamContentProvider.Columns.CREATED);
      final int typeCol=c.getColumnIndex(EventStreamContentProvider.Columns.TYPE);
      do {
        activities[counter]=new ActivityElement(c.getInt(idCol),c.getLong(timestampCol),c.getString(textCol),c.getInt(typeCol),c.getInt(useridCol));
      }
 while (c.moveToNext());
      final String json=gson.toJson(activities);
      Log.v(TAG,""String_Node_Str"" + json);
      resp=eora.doHttpRequest(""String_Node_Str"",json,EventORamaApplication.HTTP_METHOD_POST);
      final int responseCode=resp.getRespCode();
switch (responseCode) {
case 200:
default :
        StringBuilder sb=new StringBuilder(EventStreamContentProvider.Columns.ID).append(""String_Node_Str"");
      int[] idsfromserver=gson.fromJson(resp.getBody(),int[].class);
    for (int i=0; i < idsfromserver.length; i++) {
      if (idsfromserver[i] > 0) {
        sb.append(activities[i].getInternal_id());
      }
 else       Log.e(TAG,""String_Node_Str"" + idsfromserver[i]);
      sb.append(',');
    }
  sb.deleteCharAt(sb.length() - 1);
sb.append(""String_Node_Str"");
ContentValues cv=new ContentValues();
cv.put(EventStreamContentProvider.Columns.SAVE_STATE,EventStreamContentProvider.SAVE_STATE_SERVER);
int updates=mContentResolver.update(uri,cv,sb.toString(),null);
Log.v(TAG,""String_Node_Str"" + updates + ""String_Node_Str"");
break;
}
}
}
if (c != null) c.close();
}"
24920,"private Navigation createUser(Application app) throws Exception {
  log.info(""String_Node_Str"" + KeyFactory.keyToString(app.getKey()));
  Validators v=new Validators(request);
  v.add(""String_Node_Str"",v.required());
  v.add(""String_Node_Str"",v.required());
  try {
    JSONObject json=new JSONObject(new JSONTokener(request.getReader()));
    requestScope(""String_Node_Str"",json.getString(""String_Node_Str""));
    requestScope(""String_Node_Str"",json.getString(""String_Node_Str""));
  }
 catch (  Exception e) {
    log.warning(""String_Node_Str"" + e.getMessage());
    response.setStatus(HttpURLConnection.HTTP_BAD_REQUEST);
    return null;
  }
  if (!v.validate()) {
    log.warning(String.format(""String_Node_Str"",KeyFactory.keyToString(app.getKey()),request.getReader().toString()));
    response.setStatus(HttpURLConnection.HTTP_BAD_REQUEST);
    return null;
  }
  UserMeta userMeta=UserMeta.get();
  if (Datastore.query(userMeta).filter(userMeta.name.equal(asString(""String_Node_Str"")),userMeta.applicationRef.equal(app.getKey())).count() != 0) {
    log.warning(String.format(""String_Node_Str"",asString(""String_Node_Str""),KeyFactory.keyToString(app.getKey())));
    response.setStatus(HttpURLConnection.HTTP_CONFLICT);
    return null;
  }
  log.info(String.format(""String_Node_Str"",asString(""String_Node_Str""),KeyFactory.keyToString(app.getKey()),asString(""String_Node_Str"")));
  User user=new User();
  BeanUtil.copy(request,user);
  user.getApplicationRef().setModel(app);
  Datastore.put(user);
  response.setStatus(HttpURLConnection.HTTP_CREATED);
  response.setHeader(""String_Node_Str"",UserHelper.getLocationHeaderForUser(user));
  return null;
}","private Navigation createUser(Application app) throws Exception {
  log.info(""String_Node_Str"" + KeyFactory.keyToString(app.getKey()));
  Validators v=new Validators(request);
  v.add(""String_Node_Str"",v.required());
  v.add(""String_Node_Str"",v.required());
  JSONObject json;
  try {
    json=new JSONObject(new JSONTokener(request.getReader()));
    requestScope(""String_Node_Str"",json.getString(""String_Node_Str""));
    requestScope(""String_Node_Str"",json.getString(""String_Node_Str""));
  }
 catch (  Exception e) {
    log.warning(""String_Node_Str"" + e.getMessage());
    response.setStatus(HttpURLConnection.HTTP_BAD_REQUEST);
    return null;
  }
  if (!v.validate()) {
    log.warning(String.format(""String_Node_Str"",KeyFactory.keyToString(app.getKey()),json.toString()));
    response.setStatus(HttpURLConnection.HTTP_BAD_REQUEST);
    return null;
  }
  UserMeta userMeta=UserMeta.get();
  if (Datastore.query(userMeta).filter(userMeta.name.equal(asString(""String_Node_Str"")),userMeta.applicationRef.equal(app.getKey())).count() != 0) {
    log.warning(String.format(""String_Node_Str"",asString(""String_Node_Str""),KeyFactory.keyToString(app.getKey())));
    response.setStatus(HttpURLConnection.HTTP_CONFLICT);
    return null;
  }
  log.info(String.format(""String_Node_Str"",asString(""String_Node_Str""),KeyFactory.keyToString(app.getKey()),asString(""String_Node_Str"")));
  User user=new User();
  BeanUtil.copy(request,user);
  user.getApplicationRef().setModel(app);
  Datastore.put(user);
  response.setStatus(HttpURLConnection.HTTP_CREATED);
  response.setHeader(""String_Node_Str"",UserHelper.getLocationHeaderForUser(user));
  return null;
}"
24921,"private void addApp(){
  final String title=eventTextBox.getText().trim();
  if (!title.matches(""String_Node_Str"")) {
    Window.alert(""String_Node_Str"" + title + ""String_Node_Str"");
    eventTextBox.selectAll();
    return;
  }
  final Date startDate=startDateBox.getValue();
  if (startDate == null) {
    Window.alert(""String_Node_Str"");
    return;
  }
  final Date expirationDate=expirationDateBox.getValue();
  if (expirationDate == null) {
    Window.alert(""String_Node_Str"");
    return;
  }
 else   if (expirationDate.before(new Date(System.currentTimeMillis()))) {
    Window.alert(""String_Node_Str"" + expirationDate + ""String_Node_Str"");
    return;
  }
 else   if (expirationDate.before(startDate)) {
    Window.alert(""String_Node_Str"");
    return;
  }
  final Application app=new Application();
  app.setTitle(title);
  app.setStartDate(startDate);
  app.setExpirationDate(expirationDate);
  final int row=appsFlexTable.getRowCount() + 1;
  applicationsService.create(app,new AsyncCallback<Key>(){
    public void onFailure(    Throwable caught){
      Window.alert(caught.getMessage());
    }
    public void onSuccess(    Key result){
      eventTextBox.setText(null);
      startDateBox.setValue(null);
      expirationDateBox.setValue(null);
      app.setKey(result);
      updateTableRow(app,row);
    }
  }
);
}","private void addApp(){
  final String title=eventTextBox.getText().trim();
  if (!title.matches(""String_Node_Str"")) {
    Window.alert(""String_Node_Str"" + title + ""String_Node_Str"");
    eventTextBox.selectAll();
    return;
  }
  final Date startDate=startDateBox.getValue();
  if (startDate == null) {
    Window.alert(""String_Node_Str"");
    return;
  }
  final Date expirationDate=expirationDateBox.getValue();
  if (expirationDate == null) {
    Window.alert(""String_Node_Str"");
    return;
  }
 else   if (expirationDate.before(new Date(System.currentTimeMillis()))) {
    Window.alert(""String_Node_Str"" + expirationDate + ""String_Node_Str"");
    return;
  }
 else   if (expirationDate.before(startDate)) {
    Window.alert(""String_Node_Str"");
    return;
  }
  final Application app=new Application();
  app.setTitle(title);
  app.setStartDate(startDate);
  app.setExpirationDate(expirationDate);
  final int row=appsFlexTable.getRowCount() + 1;
  applicationsService.create(app,new AsyncCallback<Key>(){
    public void onFailure(    Throwable caught){
      Window.alert(caught.getMessage());
    }
    public void onSuccess(    Key result){
      eventTextBox.setText(null);
      startDateBox.setValue(null);
      expirationDateBox.setValue(null);
      if (result != null) {
        app.setKey(result);
        updateTableRow(app,row);
      }
    }
  }
);
}"
24922,"public void onSuccess(Key result){
  eventTextBox.setText(null);
  startDateBox.setValue(null);
  expirationDateBox.setValue(null);
  app.setKey(result);
  updateTableRow(app,row);
}","public void onSuccess(Key result){
  eventTextBox.setText(null);
  startDateBox.setValue(null);
  expirationDateBox.setValue(null);
  if (result != null) {
    app.setKey(result);
    updateTableRow(app,row);
  }
}"
24923,"private void updateResource(RestRequest request) throws Exception {
  RestController controller=request.getController();
  String id=request.getResourceId();
  if (controller.get(id) != null) {
    RestResource original=controller.get(id);
    String body=readBody(request);
    RestResource resource=request.getFormat().deserialiseResource(body,request);
    Collection<String> fields=PropertyUtils.getAllProperties(resource.getClass());
    for (    String field : fields) {
      Object value=PropertyUtils.getProperty(resource,field);
      if (value != null) {
        logger.debug(""String_Node_Str"",field,id);
        PropertyUtils.setProperty(original,field,value);
      }
    }
    logger.debug(""String_Node_Str"",id);
    controller.update(id,resource);
  }
 else {
    logger.debug(""String_Node_Str"");
    createResource(request);
  }
}","private void updateResource(RestRequest request) throws Exception {
  RestController controller=request.getController();
  String id=request.getResourceId();
  if (controller.get(id) != null) {
    RestResource original=controller.get(id);
    String body=readBody(request);
    RestResource resource=request.getFormat().deserialiseResource(body,request);
    Collection<String> fields=PropertyUtils.getAllProperties(resource.getClass());
    for (    String field : fields) {
      Object value=PropertyUtils.getProperty(resource,field);
      if (value != null) {
        logger.debug(""String_Node_Str"",field,id);
        PropertyUtils.setProperty(original,field,value);
      }
    }
    logger.debug(""String_Node_Str"",id);
    controller.update(id,original);
  }
 else {
    logger.debug(""String_Node_Str"");
    createResource(request);
  }
}"
24924,"/** 
 * Default constructor. Initializes Players, BattleGrids, and WaitingController to kick off Battleship game.
 */
public BattleshipFrame(){
  Player playerA=new PlayerImpl(""String_Node_Str"");
  Player playerB=new PlayerImpl(""String_Node_Str"");
  BattleGrid gridA=new BattleGridImpl(playerA);
  BattleGrid gridB=new BattleGridImpl(playerB);
  waiting=new WaitingControllerImpl(this,playerB,gridB,playerA,gridA);
  this.setTitle(""String_Node_Str"");
  this.setSize(WIDTH,HEIGHT);
  this.pack();
  this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  LOGGER.finer(""String_Node_Str"");
}","/** 
 * Default constructor. Initializes Players, BattleGrids, and WaitingController to kick off Battleship game.
 */
public BattleshipFrame(){
  Player playerA=new PlayerImpl(""String_Node_Str"");
  Player playerB=new PlayerImpl(""String_Node_Str"");
  BattleGrid gridA=new BattleGridImpl(playerA);
  BattleGrid gridB=new BattleGridImpl(playerB);
  waiting=new WaitingControllerImpl(this,playerB,gridB,playerA,gridA);
  this.setTitle(""String_Node_Str"");
  Dimension dim=new Dimension(WIDTH,HEIGHT);
  this.setPreferredSize(dim);
  this.pack();
  this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
  LOGGER.finer(""String_Node_Str"");
}"
24925,"@Override public boolean setShipPos(int x,int y){
  if (null == this.currentShipType || !this.grid.boundsCheck(x,y) || (this.curOrientation && !this.grid.boundsCheck(x + this.currentShipType.length(),y)) || (!this.curOrientation && !this.grid.boundsCheck(x,y + this.currentShipType.length()))) {
    LOGGER.finest(""String_Node_Str"");
    return false;
  }
  boolean validPlacement=true;
  if (this.curOrientation) {
    for (int i=0; i < this.currentShipType.length(); i++) {
      validPlacement=validPlacement && !this.grid.isShip(x + i,y);
    }
  }
 else {
    for (int i=0; i < this.currentShipType.length(); i++) {
      validPlacement=validPlacement && !this.grid.isShip(x,y + i);
    }
  }
  if (validPlacement) {
    this.grid.setShipPos(new ShipImpl(this.currentShipType),x,y,this.curOrientation);
  }
 else {
    LOGGER.fine(""String_Node_Str"");
  }
  return validPlacement;
}","@Override public boolean setShipPos(int x,int y){
  if (null == this.currentShipType || !this.grid.boundsCheck(x,y) || (this.curOrientation && !this.grid.boundsCheck(x + this.currentShipType.length() - 1,y)) || (!this.curOrientation && !this.grid.boundsCheck(x,y + this.currentShipType.length()))) {
    LOGGER.finest(""String_Node_Str"");
    return false;
  }
  boolean validPlacement=true;
  if (this.curOrientation) {
    for (int i=0; i < this.currentShipType.length(); i++) {
      validPlacement=validPlacement && !this.grid.isShip(x + i,y);
    }
  }
 else {
    for (int i=0; i < this.currentShipType.length(); i++) {
      validPlacement=validPlacement && !this.grid.isShip(x,y + i);
    }
  }
  if (validPlacement) {
    this.grid.setShipPos(new ShipImpl(this.currentShipType),x,y,this.curOrientation);
  }
 else {
    LOGGER.fine(""String_Node_Str"");
  }
  return validPlacement;
}"
24926,"public void setRiderThreshold(final String identifier,final int thresholdPower){
synchronized (_riders) {
    Rider rider=getRider(identifier);
    rider.setThresholdPower(thresholdPower);
    reapplyRiderLoad(identifier);
    _workoutPublisher.publishEvent(new IEvent<IWorkoutListener>(){
      public void trigger(      IWorkoutListener target){
        target.handleRiderThresholdAdjust(identifier,thresholdPower);
      }
    }
);
  }
}","public void setRiderThreshold(final String identifier,final int thresholdPower){
synchronized (_controllers) {
synchronized (_riders) {
      Rider rider=getRider(identifier);
      rider.setThresholdPower(thresholdPower);
      reapplyRiderLoad(identifier);
      _workoutPublisher.publishEvent(new IEvent<IWorkoutListener>(){
        public void trigger(        IWorkoutListener target){
          target.handleRiderThresholdAdjust(identifier,thresholdPower);
        }
      }
);
    }
  }
}"
24927,"public void handleControlData(String identifier,ControlData data){
  try {
synchronized (_riders) {
      if (_deviceMap.containsKey(identifier)) {
        RiderSession rs=_deviceMap.get(identifier);
switch (data.getType()) {
case PLUS:
          setRiderThreshold(rs.getRider().getIdentifier(),rs.getRider().getThresholdPower() + 5);
        break;
case MINUS:
      setRiderThreshold(rs.getRider().getIdentifier(),rs.getRider().getThresholdPower() - 5);
    break;
case START:
  startRide();
break;
case STOP:
pauseRide();
break;
}
}
}
}
 catch (Throwable e) {
LOG.error(""String_Node_Str"",e);
}
}","public void handleControlData(String identifier,ControlData data){
  try {
synchronized (_controllers) {
synchronized (_riders) {
        if (_deviceMap.containsKey(identifier)) {
          RiderSession rs=_deviceMap.get(identifier);
switch (data.getType()) {
case PLUS:
            setRiderThreshold(rs.getRider().getIdentifier(),rs.getRider().getThresholdPower() + 5);
          break;
case MINUS:
        setRiderThreshold(rs.getRider().getIdentifier(),rs.getRider().getThresholdPower() - 5);
      break;
case START:
    startRide();
  break;
case STOP:
pauseRide();
break;
}
}
}
}
}
 catch (Throwable e) {
LOG.error(""String_Node_Str"",e);
}
}"
24928,"public void setRiderHandicap(String identifier,final int handicap){
synchronized (_riders) {
    RiderSession rider=_riderMap.get(identifier);
    rider.setHandicap(handicap);
    reapplyRiderLoad(identifier);
  }
}","public void setRiderHandicap(String identifier,final int handicap){
synchronized (_controllers) {
synchronized (_riders) {
      RiderSession rider=_riderMap.get(identifier);
      rider.setHandicap(handicap);
      reapplyRiderLoad(identifier);
    }
  }
}"
24929,"@Override protected void paintComponent(java.awt.Graphics g){
  super.paintComponent(g);
  Graphics2D graphics=(Graphics2D)g.create();
  int w=this.getWidth();
  int h=this.getHeight();
  if ((_mp != null) && (_vrc != null)) {
    VideoDataBuffer buffer=new VideoDataBuffer(null,0,0,0,VideoDataBuffer.Format.BGR);
    _vrc.getData(buffer);
    IntBuffer intBuffer=(IntBuffer)buffer.getBuffer();
    BufferedImage image=(BufferedImage)createImage(buffer.getWidth(),buffer.getHeight());
    image.setRGB(0,0,buffer.getWidth(),buffer.getHeight(),intBuffer.array(),0,buffer.getWidth());
    AffineTransform transform=new AffineTransform();
    transform.scale(1,-1);
    transform.translate(0,-buffer.getHeight());
    graphics.drawImage(image,transform,this);
    _vrc.releaseData(buffer);
    graphics.setComposite(AlphaComposite.SrcOver);
    graphics.setColor(Color.red.darker());
    graphics.setFont(new Font(""String_Node_Str"",Font.BOLD,12));
    graphics.drawString(""String_Node_Str"" + format(_mp.getMediaTime()),10,20);
    graphics.drawString(""String_Node_Str"" + format(_mp.getDuration()),10,40);
    graphics.drawString(""String_Node_Str"" + _mp.getRate(),10,60);
  }
}","@Override protected void paintComponent(java.awt.Graphics g){
  super.paintComponent(g);
  Graphics2D graphics=(Graphics2D)g.create();
  int w=this.getWidth();
  int h=this.getHeight();
  if ((_mp != null) && (_vrc != null)) {
    VideoDataBuffer buffer=new VideoDataBuffer(null,0,0,0,VideoDataBuffer.Format.BGR);
    _vrc.getData(buffer);
    IntBuffer intBuffer=(IntBuffer)buffer.getBuffer();
    if (intBuffer != null) {
      BufferedImage image=(BufferedImage)createImage(buffer.getWidth(),buffer.getHeight());
      image.setRGB(0,0,buffer.getWidth(),buffer.getHeight(),intBuffer.array(),0,buffer.getWidth());
      AffineTransform transform=new AffineTransform();
      transform.scale(1,-1);
      transform.translate(0,-buffer.getHeight());
      graphics.drawImage(image,transform,this);
    }
    _vrc.releaseData(buffer);
    graphics.setComposite(AlphaComposite.SrcOver);
    graphics.setColor(Color.red.darker());
    graphics.setFont(new Font(""String_Node_Str"",Font.BOLD,12));
    graphics.drawString(""String_Node_Str"" + format(_mp.getMediaTime()),10,20);
    graphics.drawString(""String_Node_Str"" + format(_mp.getDuration()),10,40);
    graphics.drawString(""String_Node_Str"" + _mp.getRate(),10,60);
  }
}"
24930,"/** 
 * Retrieves a <code>Problem</code> from the database by its unique id.
 * @param problemid Unique id of the <code>Problem</code>to retrieve.
 * @return <code>Problem</code> instance from the database or<code>null</code> if id cannot be found.
 */
public Problem getProblem(Long problemid);","/** 
 * Retrieves a <code>Problem</code> from the database by its unique id.
 * @param problemid Unique id of the <code>Problem</code>to retrieve.
 * @return <code>Problem</code> instance from the database or<code>null</code> if id cannot be found.
 */
public Problem getProblem(int problemid);"
24931,"public Problem getProblem(Long problemid){
  logger.debug(""String_Node_Str"" + (long)problemid);
  List result=getHibernateTemplate().findByNamedQuery(""String_Node_Str"",problemid);
  if (result.size() <= 0) {
    logger.debug(""String_Node_Str"");
    return null;
  }
 else {
    logger.debug(""String_Node_Str"");
    return (Problem)result.get(0);
  }
}","public Problem getProblem(int problemid){
  logger.debug(""String_Node_Str"" + (long)problemid);
  List result=getHibernateTemplate().findByNamedQuery(""String_Node_Str"",problemid);
  if (result.size() <= 0) {
    logger.debug(""String_Node_Str"");
    return null;
  }
 else {
    logger.debug(""String_Node_Str"");
    return (Problem)result.get(0);
  }
}"
24932,"/** 
 * Test of getProblem method, of class ProblemHibernateDAO.
 */
@Test @Ignore public void testGetProblem(){
  ProblemDAO dao=(ProblemDAO)PersistenceContext.getInstance().getBean(""String_Node_Str"");
  Problem expProblem=new Problem();
  expProblem.setId(3);
  expProblem.setTitle(""String_Node_Str"");
  expProblem.setContact(""String_Node_Str"");
  expProblem.setDoc(""String_Node_Str"");
  List<String> procedures=new ArrayList<String>(3);
  procedures.add(""String_Node_Str"");
  procedures.add(""String_Node_Str"");
  procedures.add(""String_Node_Str"");
  expProblem.setProcedures(procedures);
  Problem actualProblem=dao.getProblem(3L);
  assertEquals(expProblem,actualProblem);
}","/** 
 * Test of getProblem method, of class ProblemHibernateDAO.
 */
@Test public void testGetProblem(){
  Problem expProblem=new Problem();
  expProblem.setId(2);
  expProblem.setTitle(""String_Node_Str"");
  expProblem.setContact(""String_Node_Str"");
  expProblem.setDoc(""String_Node_Str"");
  expProblem.setPriority((byte)4);
  List<String> expProcedures=new ArrayList<String>(2);
  expProcedures.add(""String_Node_Str"");
  expProcedures.add(""String_Node_Str"");
  expProblem.setProcedures(expProcedures);
  ProblemDAO dao=(ProblemDAO)TestPersistenceContext.getInstance().getBean(""String_Node_Str"");
  Problem problem=dao.getProblem(2);
  assertEquals(expProblem,problem);
}"
24933,"/** 
 * Test of delete method, of class ProblemHibernateDAO.
 */
@Test @Ignore public void testDelete() throws Exception {
  Problem problem=new Problem();
  problem.setId(2);
  problem.setTitle(""String_Node_Str"");
  problem.setContact(""String_Node_Str"");
  problem.setDoc(""String_Node_Str"");
  List<String> procedures=new ArrayList<String>(2);
  procedures.add(""String_Node_Str"");
  procedures.add(""String_Node_Str"");
  problem.setProcedures(procedures);
  ProblemDAO instance=(ProblemDAO)PersistenceContext.getInstance().getBean(""String_Node_Str"");
  instance.delete(problem);
  PreparedStatement statement=null;
  PreparedStatement statement2=null;
  ResultSet results=null;
  ResultSet results2=null;
  try {
    statement=connection.prepareStatement(""String_Node_Str"");
    statement.setLong(1,2L);
    results=statement.executeQuery();
    assertFalse(""String_Node_Str"",results.next());
    statement2=connection.prepareStatement(""String_Node_Str"");
    statement2.setLong(1,2L);
    results2=statement.executeQuery();
    assertFalse(""String_Node_Str"",results2.next());
  }
  finally {
    if (statement != null)     statement.close();
    if (statement2 != null)     statement2.close();
    if (results != null)     results.close();
    if (results2 != null)     results2.close();
  }
}","/** 
 * Test of delete method, of class ProblemHibernateDAO.
 */
@Test public void testDelete() throws Exception {
  Problem problem=new Problem();
  problem.setId(1);
  problem.setTitle(""String_Node_Str"");
  problem.setContact(""String_Node_Str"");
  problem.setPriority((byte)1);
  List<String> procedures=new ArrayList<String>(2);
  procedures.add(""String_Node_Str"");
  procedures.add(""String_Node_Str"");
  problem.setProcedures(procedures);
  ProblemDAO dao=(ProblemDAO)TestPersistenceContext.getInstance().getBean(""String_Node_Str"");
  dao.delete(problem);
  PreparedStatement stmt=connection.prepareStatement(""String_Node_Str"");
  stmt.setInt(1,1);
  ResultSet results=stmt.executeQuery();
  assertFalse(results.next());
  PreparedStatement stmt2=connection.prepareStatement(""String_Node_Str"");
  stmt2.setInt(1,1);
  ResultSet results2=stmt2.executeQuery();
  assertFalse(results.next());
}"
24934,"/** 
 * Test of persist method, of class ProblemHibernateDAO.
 */
@Test public void testCreate() throws Exception {
  String title=""String_Node_Str"";
  String contact=""String_Node_Str"";
  String doc=""String_Node_Str"";
  byte priority=3;
  Problem problem=new Problem();
  problem.setTitle(title);
  problem.setContact(contact);
  problem.setDoc(doc);
  problem.setPriority(priority);
  ProblemDAO dao=(ProblemDAO)PersistenceContext.getInstance().getBean(""String_Node_Str"");
  Problem perProblem=dao.persist(problem);
  assertNotNull(""String_Node_Str"",perProblem.getId());
  assertEquals(""String_Node_Str"",title,perProblem.getTitle());
  assertEquals(""String_Node_Str"",contact,perProblem.getContact());
  assertEquals(""String_Node_Str"",doc,perProblem.getDoc());
  assertEquals(""String_Node_Str"",priority,perProblem.getPriority());
  PreparedStatement stmt=connection.prepareStatement(""String_Node_Str"");
  stmt.setLong(1,perProblem.getId());
  ResultSet results=stmt.executeQuery();
  assertTrue(results.next());
  assertEquals(""String_Node_Str"",title,results.getString(1));
  assertEquals(""String_Node_Str"",contact,results.getString(2));
  assertEquals(""String_Node_Str"",doc,results.getString(3));
  assertEquals(""String_Node_Str"",priority,results.getByte(4));
}","/** 
 * Test of persist method, of class ProblemHibernateDAO.
 */
@Test public void testCreate() throws Exception {
  String title=""String_Node_Str"";
  String contact=""String_Node_Str"";
  String doc=""String_Node_Str"";
  byte priority=3;
  List<String> procedures=new ArrayList<String>(2);
  procedures.add(""String_Node_Str"");
  procedures.add(""String_Node_Str"");
  Problem problem=new Problem();
  problem.setTitle(title);
  problem.setContact(contact);
  problem.setDoc(doc);
  problem.setPriority(priority);
  problem.setProcedures(procedures);
  ProblemDAO dao=(ProblemDAO)TestPersistenceContext.getInstance().getBean(""String_Node_Str"");
  Problem perProblem=dao.persist(problem);
  assertNotNull(""String_Node_Str"",perProblem.getId());
  assertEquals(""String_Node_Str"",title,perProblem.getTitle());
  assertEquals(""String_Node_Str"",contact,perProblem.getContact());
  assertEquals(""String_Node_Str"",doc,perProblem.getDoc());
  assertEquals(""String_Node_Str"",priority,perProblem.getPriority());
  assertEquals(""String_Node_Str"",procedures,perProblem.getProcedures());
  PreparedStatement stmt=connection.prepareStatement(""String_Node_Str"");
  stmt.setInt(1,perProblem.getId());
  ResultSet results=stmt.executeQuery();
  assertTrue(results.next());
  assertEquals(""String_Node_Str"",title,results.getString(1));
  assertEquals(""String_Node_Str"",contact,results.getString(2));
  assertEquals(""String_Node_Str"",doc,results.getString(3));
  assertEquals(""String_Node_Str"",priority,results.getByte(4));
  PreparedStatement stmt2=connection.prepareStatement(""String_Node_Str"");
  stmt2.setInt(1,perProblem.getId());
  ResultSet results2=stmt2.executeQuery();
  int i;
  for (i=0; results2.next(); i++) {
    assertEquals(""String_Node_Str"" + i,procedures.get(i),results2.getString(1));
  }
  assertEquals(""String_Node_Str"",procedures.size(),i);
}"
24935,"@BeforeClass public static void setUpBefore() throws Exception {
  connection=TestConnectionHelper.getConnection();
}","@BeforeClass public static void setUpBefore() throws Exception {
  connection=TestConnectionHelper.getConnection();
  TestConnectionHelper.generateTestData();
}"
24936,"/** 
 * Retrieves a <code>Task</code> from the database by its unique id.
 * @param taskid Unique id of the <code>Task</code>to retrieve.
 * @return <code>Task</code> instance from the database or<code>null</code> if id cannot be found.
 */
public Task getTask(Long taskid);","/** 
 * Retrieves a <code>Task</code> from the database by its unique id.
 * @param taskid Unique id of the <code>Task</code>to retrieve.
 * @return <code>Task</code> instance from the database or<code>null</code> if id cannot be found.
 */
public Task getTask(int taskid);"
24937,"public Task getTask(Long taskid){
  logger.debug(""String_Node_Str"" + (long)taskid);
  List result=getHibernateTemplate().findByNamedQuery(""String_Node_Str"",taskid);
  if (result.size() <= 0) {
    logger.debug(""String_Node_Str"");
    return null;
  }
 else {
    logger.debug(""String_Node_Str"");
    return (Task)result.get(0);
  }
}","public Task getTask(int taskid){
  logger.debug(""String_Node_Str"" + taskid);
  List result=getHibernateTemplate().findByNamedQuery(""String_Node_Str"",taskid);
  if (result.size() <= 0) {
    logger.debug(""String_Node_Str"");
    return null;
  }
 else {
    logger.debug(""String_Node_Str"");
    return (Task)result.get(0);
  }
}"
24938,"/** 
 * Test of delete method, of class TaskHibernateDAO.
 */
@Test @Ignore public void testDelete() throws Exception {
  Task task=new Task();
  task.setId(1);
  task.setTitle(""String_Node_Str"");
  task.setDetails(""String_Node_Str"");
  task.setDoc(""String_Node_Str"");
  task.setStartDate(new SimpleDateFormat(""String_Node_Str"").parse(""String_Node_Str""));
  task.setDays((short)1);
  task.setWeeks((byte)1);
  task.setMonths((short)1);
  TaskDAO dao=(TaskDAO)PersistenceContext.getInstance().getBean(""String_Node_Str"");
  dao.delete(task);
  PreparedStatement statement=null;
  ResultSet results=null;
  try {
    statement=connection.prepareStatement(""String_Node_Str"");
    statement.setLong(1,1L);
    results=statement.executeQuery();
    assertFalse(results.next());
  }
  finally {
    if (statement != null)     statement.close();
    if (results != null)     results.close();
  }
}","/** 
 * Test of delete method, of class TaskHibernateDAO.
 */
@Test @Ignore public void testDelete() throws Exception {
  Task task=new Task();
  task.setId(1);
  task.setTitle(""String_Node_Str"");
  task.setDetails(""String_Node_Str"");
  task.setDoc(""String_Node_Str"");
  task.setStartDate(new SimpleDateFormat(""String_Node_Str"").parse(""String_Node_Str""));
  task.setDays((short)1);
  task.setWeeks((byte)1);
  task.setMonths((short)1);
  TaskDAO dao=(TaskDAO)TestPersistenceContext.getInstance().getBean(""String_Node_Str"");
  dao.delete(task);
  PreparedStatement statement=null;
  ResultSet results=null;
  try {
    statement=connection.prepareStatement(""String_Node_Str"");
    statement.setLong(1,1L);
    results=statement.executeQuery();
    assertFalse(results.next());
  }
  finally {
    if (statement != null)     statement.close();
    if (results != null)     results.close();
  }
}"
24939,"/** 
 * Test of getTask method, of class TaskHibernateDAO.
 */
@Test @Ignore public void testGetTask() throws Exception {
  TaskDAO dao=(TaskDAO)PersistenceContext.getInstance().getBean(""String_Node_Str"");
  Task result=dao.getTask(2L);
  assertNotNull(result);
  assertEquals(""String_Node_Str"",""String_Node_Str"",result.getTitle());
  assertEquals(""String_Node_Str"",""String_Node_Str"",result.getDetails());
  assertEquals(""String_Node_Str"",""String_Node_Str"",result.getDoc());
  assertEquals(""String_Node_Str"",(byte)1,result.getInputType());
  assertEquals(""String_Node_Str"",new SimpleDateFormat(""String_Node_Str"").parse(""String_Node_Str""),result.getStartDate());
  assertEquals(""String_Node_Str"",1,(short)result.getDays());
  assertEquals(""String_Node_Str"",1,(byte)result.getWeeks());
  assertEquals(""String_Node_Str"",1,(short)result.getMonths());
}","/** 
 * Test of getTask method, of class TaskHibernateDAO.
 */
@Test @Ignore public void testGetTask() throws Exception {
  TaskDAO dao=(TaskDAO)TestPersistenceContext.getInstance().getBean(""String_Node_Str"");
  Task result=dao.getTask(2);
  assertNotNull(result);
  assertEquals(""String_Node_Str"",""String_Node_Str"",result.getTitle());
  assertEquals(""String_Node_Str"",""String_Node_Str"",result.getDetails());
  assertEquals(""String_Node_Str"",""String_Node_Str"",result.getDoc());
  assertEquals(""String_Node_Str"",(byte)1,result.getInputType());
  assertEquals(""String_Node_Str"",new SimpleDateFormat(""String_Node_Str"").parse(""String_Node_Str""),result.getStartDate());
  assertEquals(""String_Node_Str"",1,(short)result.getDays());
  assertEquals(""String_Node_Str"",1,(byte)result.getWeeks());
  assertEquals(""String_Node_Str"",1,(short)result.getMonths());
}"
24940,"/** 
 * Test of persist method, of class TaskHibernateDAO.
 */
@Test @Ignore public void testPersist() throws Exception {
  String title=""String_Node_Str"";
  String details=""String_Node_Str"";
  String documentationFile=""String_Node_Str"";
  byte inputType=1;
  Date startDate=new SimpleDateFormat(""String_Node_Str"").parse(""String_Node_Str"");
  Date endDate=null;
  short days=1;
  byte weeks=1;
  short months=1;
  Task task=new Task();
  task.setTitle(title);
  task.setDetails(details);
  task.setDoc(documentationFile);
  task.setInputType(inputType);
  task.setStartDate(startDate);
  task.setEndDate(endDate);
  task.setDays(days);
  task.setWeeks(weeks);
  task.setMonths(months);
  TaskDAO dao=(TaskDAO)PersistenceContext.getInstance().getBean(""String_Node_Str"");
  Task persistedTask=dao.persist(task);
  assertNotNull(""String_Node_Str"",persistedTask.getId());
  assertEquals(""String_Node_Str"",title,persistedTask.getTitle());
  assertEquals(""String_Node_Str"",details,persistedTask.getDetails());
  assertEquals(""String_Node_Str"",documentationFile,persistedTask.getDoc());
  assertEquals(""String_Node_Str"",inputType,persistedTask.getInputType());
  assertNull(""String_Node_Str"",persistedTask.getProblem());
  assertEquals(""String_Node_Str"",startDate,persistedTask.getStartDate());
  assertEquals(""String_Node_Str"",endDate,persistedTask.getEndDate());
  assertEquals(""String_Node_Str"",days,(short)persistedTask.getDays());
  assertEquals(""String_Node_Str"",weeks,(byte)persistedTask.getWeeks());
  assertEquals(""String_Node_Str"",months,(short)persistedTask.getMonths());
  PreparedStatement statement=null;
  ResultSet results=null;
  try {
    statement=connection.prepareStatement(""String_Node_Str"");
    statement.setLong(1,persistedTask.getId());
    results=statement.executeQuery();
    results.next();
    assertEquals(""String_Node_Str"",title,results.getString(""String_Node_Str""));
    assertEquals(""String_Node_Str"",details,results.getString(""String_Node_Str""));
    assertEquals(""String_Node_Str"",documentationFile,results.getString(""String_Node_Str""));
    assertEquals(""String_Node_Str"",inputType,results.getByte(""String_Node_Str""));
    assertEquals(""String_Node_Str"",startDate,results.getDate(""String_Node_Str""));
    assertEquals(""String_Node_Str"",endDate,results.getDate(""String_Node_Str""));
    assertEquals(""String_Node_Str"",days,results.getShort(""String_Node_Str""));
    assertEquals(""String_Node_Str"",weeks,results.getByte(""String_Node_Str""));
    assertEquals(""String_Node_Str"",months,results.getShort(""String_Node_Str""));
  }
  finally {
    if (statement != null)     statement.close();
    if (results != null)     results.close();
  }
}","/** 
 * Test of persist method, of class TaskHibernateDAO.
 */
@Test public void testPersist() throws Exception {
  String title=""String_Node_Str"";
  String details=""String_Node_Str"";
  Date schTime=new SimpleDateFormat(""String_Node_Str"").parse(""String_Node_Str"");
  String doc=""String_Node_Str"";
  Task task=new Task();
  task.setTitle(title);
  task.setDetails(details);
  task.setSchTime(schTime);
  task.setDoc(doc);
  TaskDAO dao=(TaskDAO)TestPersistenceContext.getInstance().getBean(""String_Node_Str"");
  Task perTask=dao.persist(task);
  assertNotNull(""String_Node_Str"",perTask.getId());
  assertEquals(""String_Node_Str"",title,perTask.getTitle());
  assertEquals(""String_Node_Str"",details,perTask.getDetails());
  assertEquals(""String_Node_Str"",schTime,perTask.getSchTime());
  assertEquals(""String_Node_Str"",doc,perTask.getDoc());
  PreparedStatement stmt=connection.prepareStatement(""String_Node_Str"");
  stmt.setInt(1,perTask.getId());
  ResultSet results=stmt.executeQuery();
  assertTrue(""String_Node_Str"",results.next());
  assertEquals(""String_Node_Str"",title,results.getString(""String_Node_Str""));
  assertEquals(""String_Node_Str"",details,results.getString(""String_Node_Str""));
  assertEquals(""String_Node_Str"",schTime.getTime(),results.getTime(""String_Node_Str"").getTime());
  assertEquals(""String_Node_Str"",doc,results.getString(""String_Node_Str""));
}"
24941,"public boolean isErrorRule(){
  return ruleIsMandatory() || ruleIsOptional() || (ruleisGuideline() && isError == true);
}","public boolean isErrorRule(){
  return ruleIsMandatory() || ((ruleIsOptional() || ruleisGuideline()) && isError == true);
}"
24942,"private boolean match(final int a,final boolean knownValue){
  return a == (knownValue ? ON : OFF);
}","private boolean match(final int a,final boolean knownValue){
  return a == (knownValue ? ON : OFF) || a == UNKNOWN;
}"
24943,"private void updateAllPreferences(){
  updateModeLocalPreferences();
  initialMoveDelay=Main.pref.getInteger(prefKey(""String_Node_Str""),-1);
}","private void updateAllPreferences(){
  updateModeLocalPreferences();
}"
24944,"private void updateModeLocalPreferences(){
  snapThreshold=Main.pref.getDouble(prefKey(""String_Node_Str""),0.35);
  snapDefault=Main.pref.getBoolean(prefKey(""String_Node_Str""),true);
  copyTagsDefault=Main.pref.getBoolean(prefKey(""String_Node_Str""),true);
  snapModifierCombo=new ModifiersSpec(getStringPref(""String_Node_Str"",""String_Node_Str""));
  copyTagsModifierCombo=new ModifiersSpec(getStringPref(""String_Node_Str"",""String_Node_Str""));
  addToSelectionModifierCombo=new ModifiersSpec(getStringPref(""String_Node_Str"",""String_Node_Str""));
  toggleSelectedModifierCombo=new ModifiersSpec(getStringPref(""String_Node_Str"",""String_Node_Str""));
  setSelectedModifierCombo=new ModifiersSpec(getStringPref(""String_Node_Str"",""String_Node_Str""));
}","private void updateModeLocalPreferences(){
  snapThreshold=Main.pref.getDouble(prefKey(""String_Node_Str""),0.35);
  snapDefault=Main.pref.getBoolean(prefKey(""String_Node_Str""),true);
  copyTagsDefault=Main.pref.getBoolean(prefKey(""String_Node_Str""),true);
  initialMoveDelay=Main.pref.getInteger(prefKey(""String_Node_Str""),200);
  snapModifierCombo=new ModifiersSpec(getStringPref(""String_Node_Str"",""String_Node_Str""));
  copyTagsModifierCombo=new ModifiersSpec(getStringPref(""String_Node_Str"",""String_Node_Str""));
  addToSelectionModifierCombo=new ModifiersSpec(getStringPref(""String_Node_Str"",""String_Node_Str""));
  toggleSelectedModifierCombo=new ModifiersSpec(getStringPref(""String_Node_Str"",""String_Node_Str""));
  setSelectedModifierCombo=new ModifiersSpec(getStringPref(""String_Node_Str"",""String_Node_Str""));
}"
24945,"private boolean initParallelWays(Point p,boolean copyTags){
  referenceSegment=mv.getNearestWaySegment(p,Way.isUsablePredicate,true);
  if (referenceSegment == null)   return false;
  if (!sourceWays.contains(referenceSegment.way)) {
    clearSourceWays();
    addSourceWay(referenceSegment.way);
  }
  try {
    int referenceWayIndex=-1;
    int i=0;
    for (    Way w : sourceWays) {
      if (w == referenceSegment.way) {
        referenceWayIndex=i;
        break;
      }
    }
    pWays=new ParallelWays(sourceWays,copyTags,referenceWayIndex);
    pWays.commit(null);
    getCurrentDataSet().setSelected(pWays.ways);
    return true;
  }
 catch (  IllegalArgumentException e) {
    pWays=null;
    return false;
  }
}","private boolean initParallelWays(Point p,boolean copyTags){
  referenceSegment=mv.getNearestWaySegment(p,Way.isUsablePredicate,true);
  if (referenceSegment == null)   return false;
  if (!sourceWays.contains(referenceSegment.way)) {
    clearSourceWays();
    addSourceWay(referenceSegment.way);
  }
  try {
    int referenceWayIndex=-1;
    int i=0;
    for (    Way w : sourceWays) {
      if (w == referenceSegment.way) {
        referenceWayIndex=i;
        break;
      }
    }
    pWays=new ParallelWays(sourceWays,copyTags,referenceWayIndex);
    pWays.commit();
    getCurrentDataSet().setSelected(pWays.ways);
    return true;
  }
 catch (  IllegalArgumentException e) {
    pWays=null;
    return false;
  }
}"
24946,"public void commit(DataSet ds){
  SequenceCommand undoCommand=new SequenceCommand(""String_Node_Str"",makeAddWayAndNodesCommandList());
  Main.main.undoRedo.add(undoCommand);
}","public void commit(){
  SequenceCommand undoCommand=new SequenceCommand(""String_Node_Str"",makeAddWayAndNodesCommandList());
  Main.main.undoRedo.add(undoCommand);
}"
24947,"public void stop(){
  mThread.getHandler().sendEmptyMessage(R.id.stop_camera_message);
}","public void stop(){
  mState.stop(mCamera,this);
}"
24948,"public void switchToPortrait(){
  mThread.getHandler().sendEmptyMessage(R.id.rotate_camera_message);
}","public void switchToPortrait(){
  mState.switchToPortrait(mCamera,this);
}"
24949,"public void start(SurfaceHolder holder){
  Handler handler=mThread.getHandler();
  handler.sendMessage(handler.obtainMessage(R.id.start_camera_message,holder));
}","public void start(SurfaceHolder holder){
  mState.start(mCamera,holder,this);
}"
24950,"public void close(){
  mThread.getHandler().sendEmptyMessage(R.id.close_camera_message);
  stopThread();
}","public void close(){
  mState.close(mCamera,this);
}"
24951,"public void open(){
  startThread(mQRCodeEvaluator);
  mThread.getHandler().sendEmptyMessage(R.id.open_camera_message);
}","public void open(){
  mCamera=mState.open(this);
}"
24952,"public PreviewHandler(IFrameEvaluator evaluator,Camera camera){
  mFrameEvaluator=evaluator;
  int previewFrameSize=CameraUtils.getPreviewFrameSize(camera);
  for (int i=0; i < NUMBER_PREVIEW_BUFFERS; ++i) {
    ByteBuffer buffer=ByteBuffer.allocate(previewFrameSize);
    mPreviewBuffers.add(buffer);
  }
  addCallbackBuffers(camera);
}","public PreviewHandler(Camera camera){
  int previewFrameSize=CameraUtils.getPreviewFrameSize(camera);
  for (int i=0; i < NUMBER_PREVIEW_BUFFERS; ++i) {
    ByteBuffer buffer=ByteBuffer.allocate(previewFrameSize);
    mPreviewBuffers.add(buffer);
  }
  addCallbackBuffers(camera);
}"
24953,"@Override public void onAutoFocus(boolean success,Camera camera){
  Message msg=mHandler.obtainMessage(PreviewHandler.AUTOFOCUS_MESSAGE,camera);
  if (success)   mHandler.sendMessageDelayed(msg,PreviewHandler.ALLOWABLE_FOCUS_TIME);
 else   mHandler.sendMessage(msg);
}","@Override public void onAutoFocus(boolean success,Camera camera){
  DebugOut.log(""String_Node_Str"");
  Message msg=mHandler.obtainMessage(PreviewHandler.AUTOFOCUS_MESSAGE,camera);
  if (success)   mHandler.sendMessageDelayed(msg,PreviewHandler.ALLOWABLE_FOCUS_TIME);
 else   mHandler.sendMessage(msg);
}"
24954,"@Override public void onPreviewFrame(byte[] data,Camera camera){
  if (mNeedAutoFocus) {
    camera.autoFocus(mCameraAutofocusCallback);
    mNeedAutoFocus=false;
  }
  if (mFrameEvaluator != null) {
    mFrameEvaluator.evaluate(data);
  }
  if (mFrameCount++ == NUMBER_PREVIEW_BUFFERS - 1) {
    mFrameCount=0;
    Message msg=mHandler.obtainMessage(PreviewHandler.ADD_BUFFERS_MESSAGE,camera);
    mHandler.sendMessageDelayed(msg,ADD_BUFFERS_SLACKTIME);
  }
}","@Override public void onPreviewFrame(byte[] data,Camera camera){
  DebugOut.log(""String_Node_Str"");
  if (mNeedAutoFocus) {
    camera.autoFocus(mCameraAutofocusCallback);
    mNeedAutoFocus=false;
  }
  if (mFrameCount++ == NUMBER_PREVIEW_BUFFERS - 1) {
    mFrameCount=0;
    Message msg=mHandler.obtainMessage(PreviewHandler.ADD_BUFFERS_MESSAGE,camera);
    mHandler.sendMessageDelayed(msg,ADD_BUFFERS_SLACKTIME);
  }
}"
24955,"@Override public void stop(Camera camera){
  mPreviewHandler.stopPreview(camera);
  mStateChanger.setState(new CameraReady());
}","@Override public void stop(Camera camera,CameraContext context){
  mPreviewHandler.stopPreview(camera);
  context.changeState(new CameraReady());
}"
24956,"public CameraPreviewing(Camera camera,SurfaceHolder holder,IFrameEvaluator evaluator) throws IOException {
  mPreviewHandler=new PreviewHandler(evaluator,camera);
  camera.setPreviewDisplay(holder);
  mPreviewHandler.startPreview(camera);
}","public CameraPreviewing(Camera camera,SurfaceHolder holder) throws IOException {
  mPreviewHandler=new PreviewHandler(camera);
  camera.setPreviewDisplay(holder);
  mPreviewHandler.startPreview(camera);
}"
24957,"@Override public void close(Camera camera){
  mPreviewHandler.stopPreview(camera);
  camera.release();
  mStateChanger.setState(new CameraUninitialized());
}","@Override public void close(Camera camera,CameraContext context){
  mPreviewHandler.stopPreview(camera);
  camera.release();
  context.changeState(new CameraUninitialized());
}"
24958,"@Override public void switchToPortrait(Camera camera){
  camera.setDisplayOrientation(90);
}","@Override public void switchToPortrait(Camera camera,CameraContext context){
  camera.setDisplayOrientation(90);
}"
24959,"@Override public void start(IFrameEvaluator evaluator,Camera camera,SurfaceHolder holder){
  try {
    CameraPreviewing previewingState=new CameraPreviewing(camera,holder,evaluator);
    camera.startPreview();
    mStateChanger.setState(previewingState);
  }
 catch (  IOException e) {
    e.printStackTrace();
    camera.release();
    mStateChanger.setState(new CameraUninitialized());
  }
}","@Override public void start(Camera camera,SurfaceHolder holder,CameraContext context){
  try {
    CameraPreviewing previewingState=new CameraPreviewing(camera,holder);
    camera.startPreview();
    context.changeState(previewingState);
  }
 catch (  IOException e) {
    e.printStackTrace();
    camera.release();
    context.changeState(new CameraUninitialized());
  }
}"
24960,"@Override public void close(Camera camera){
  camera.release();
  mStateChanger.setState(new CameraUninitialized());
}","@Override public void close(Camera camera,CameraContext context){
  camera.release();
  context.changeState(new CameraUninitialized());
}"
24961,"/** 
 * Helper that date/time setter callbacks use to update the sdnv and representations. 
 */
protected void setSdnvFromTime(Time time){
  long newValue=dtnUtil.DateToDtnShortDate(new Date(time.toMillis(false)));
  sdnv.setByValue(newValue);
  update(Type.DATE);
  updateDatesFromNumbers();
}","/** 
 * Helper that date/time setter callbacks use to update the sdnv and representations. 
 */
protected void setSdnvFromTime(Time time){
  long newValue=dtnUtil.DateToDtnShortDate(new Date(time.toMillis(false)));
  try {
    sdnv.setByValue(newValue);
  }
 catch (  NumberFormatException e) {
  }
  update(Type.DATE);
  updateDatesFromNumbers();
}"
24962,"/** 
 * When sdnv is updated, this function is called to cause all of the UI representations of sdnv to be updated as well. 
 * @param updatedFrom	Which UI element triggered the update; prevents loops.
 */
public void update(Type updatedFrom){
  if (updatingFrom != Type.NONE) {
    return;
  }
  boolean mustUpdate=false;
  try {
    if (updatedFrom == Type.INTEGER_DEC) {
      long newValue=Long.parseLong(mIntegerDecText.getText().toString(),10);
      if (newValue != sdnv.getValue()) {
        sdnv.setByValue(newValue);
        mustUpdate=true;
      }
    }
 else     if (updatedFrom == Type.INTEGER_HEX) {
      long newValue=Long.parseLong(mIntegerHexText.getText().toString(),16);
      if (newValue != sdnv.getValue()) {
        sdnv.setByValue(newValue);
        mustUpdate=true;
      }
    }
 else     if (updatedFrom == Type.SDNV_HEX) {
      Sdnv newSdnv=new Sdnv(mSdnvHexText.getText().toString(),16);
      if (newSdnv.equals(sdnv) == false) {
        sdnv=newSdnv;
        mustUpdate=true;
      }
    }
 else     if (updatedFrom == Type.SDNV_DEC) {
      Sdnv newSdnv=new Sdnv(mSdnvDecText.getText().toString(),10);
      if (newSdnv.equals(sdnv) == false) {
        sdnv=newSdnv;
        mustUpdate=true;
      }
    }
 else     if (updatedFrom == Type.DATE) {
      mustUpdate=true;
    }
  }
 catch (  NumberFormatException e) {
  }
  if (mustUpdate == false) {
    return;
  }
  updatingFrom=updatedFrom;
  if (updatingFrom != Type.INTEGER_DEC) {
    mIntegerDecText.setText(Long.toString(sdnv.getValue()));
  }
  if (updatingFrom != Type.INTEGER_HEX) {
    mIntegerHexText.setText(Long.toHexString(sdnv.getValue()));
  }
  if (updatingFrom != Type.SDNV_DEC) {
    mSdnvDecText.setText(sdnv.getBytesAsString());
  }
  if (updatingFrom != Type.SDNV_HEX) {
    mSdnvHexText.setText(sdnv.getBytesAsHexString());
  }
  updateDatesFromNumbers();
  updatingFrom=Type.NONE;
}","/** 
 * When sdnv is updated, this function is called to cause all of the UI representations of sdnv to be updated as well. 
 * @param updatedFrom	Which UI element triggered the update; prevents loops.
 */
public void update(Type updatedFrom){
  if (updatingFrom != Type.NONE) {
    return;
  }
  boolean mustUpdate=false;
  try {
    if (updatedFrom == Type.INTEGER_DEC) {
      long newValue=Long.parseLong(mIntegerDecText.getText().toString(),10);
      if (newValue != sdnv.getValue()) {
        try {
          sdnv.setByValue(newValue);
        }
 catch (        NumberFormatException e) {
          mIntegerDecText.setText(Long.toString(sdnv.getValue()));
        }
        mustUpdate=true;
      }
    }
 else     if (updatedFrom == Type.INTEGER_HEX) {
      long newValue=Long.parseLong(mIntegerHexText.getText().toString(),16);
      if (newValue != sdnv.getValue()) {
        try {
          sdnv.setByValue(newValue);
        }
 catch (        NumberFormatException e) {
          mIntegerHexText.setText(Long.toString(sdnv.getValue(),16));
        }
        mustUpdate=true;
      }
    }
 else     if (updatedFrom == Type.SDNV_HEX) {
      Sdnv newSdnv=new Sdnv(mSdnvHexText.getText().toString(),16);
      if (newSdnv.equals(sdnv) == false) {
        sdnv=newSdnv;
        mustUpdate=true;
      }
    }
 else     if (updatedFrom == Type.SDNV_DEC) {
      Sdnv newSdnv=new Sdnv(mSdnvDecText.getText().toString(),10);
      if (newSdnv.equals(sdnv) == false) {
        sdnv=newSdnv;
        mustUpdate=true;
      }
    }
 else     if (updatedFrom == Type.DATE) {
      mustUpdate=true;
    }
  }
 catch (  NumberFormatException e) {
  }
  if (mustUpdate == false) {
    return;
  }
  updatingFrom=updatedFrom;
  if (updatingFrom != Type.INTEGER_DEC) {
    mIntegerDecText.setText(Long.toString(sdnv.getValue()));
  }
  if (updatingFrom != Type.INTEGER_HEX) {
    mIntegerHexText.setText(Long.toHexString(sdnv.getValue()));
  }
  if (updatingFrom != Type.SDNV_DEC) {
    mSdnvDecText.setText(sdnv.getBytesAsString());
  }
  if (updatingFrom != Type.SDNV_HEX) {
    mSdnvHexText.setText(sdnv.getBytesAsHexString());
  }
  updateDatesFromNumbers();
  updatingFrom=Type.NONE;
}"
24963,"private void bytesIntToBytes(){
  byte[] ba=bytesInt.toByteArray();
  int numZeros=0;
  for (numZeros=0; ba[numZeros] == 0x00; numZeros++)   ;
  bytes=new byte[ba.length - numZeros];
  System.arraycopy(ba,numZeros,bytes,0,ba.length - numZeros);
}","private void bytesIntToBytes(){
  byte[] ba=bytesInt.toByteArray();
  if (ba.length == 1 && ba[0] == 0x00) {
    bytes=ba;
    return;
  }
  int numZeros;
  for (numZeros=0; ba[numZeros] == 0x00; numZeros++)   ;
  bytes=new byte[ba.length - numZeros];
  System.arraycopy(ba,numZeros,bytes,0,ba.length - numZeros);
}"
24964,"private void bytesIntToBytes(){
  byte[] ba=bytesInt.toByteArray();
  int numZeros;
  for (numZeros=0; ba[numZeros] == 0x00; numZeros++)   ;
  bytes=new byte[ba.length - numZeros];
  System.arraycopy(ba,numZeros,bytes,0,ba.length - numZeros);
}","private void bytesIntToBytes(){
  byte[] ba=bytesInt.toByteArray();
  if (ba.length == 1 && ba[0] == 0x00) {
    bytes=ba;
    return;
  }
  int numZeros;
  for (numZeros=0; ba[numZeros] == 0x00; numZeros++)   ;
  bytes=new byte[ba.length - numZeros];
  System.arraycopy(ba,numZeros,bytes,0,ba.length - numZeros);
}"
24965,"public void handleMessage(Message msg){
switch (msg.what) {
case TorServiceConstants.STATUS_MSG:
    String torServiceMsg=(String)msg.getData().getString(HANDLER_TOR_MSG);
  if (lastServiceMsg == null || !lastServiceMsg.equals(torServiceMsg)) {
    updateStatus(torServiceMsg);
    lastServiceMsg=torServiceMsg;
  }
break;
case TorServiceConstants.LOG_MSG:
break;
case TorServiceConstants.ENABLE_TOR_MSG:
updateStatus((String)msg.getData().getString(HANDLER_TOR_MSG));
break;
case TorServiceConstants.DISABLE_TOR_MSG:
updateStatus((String)msg.getData().getString(HANDLER_TOR_MSG));
break;
case TorServiceConstants.MESSAGE_TRAFFIC_COUNT:
Bundle data=msg.getData();
DataCount datacount=new DataCount(data.getLong(""String_Node_Str""),data.getLong(""String_Node_Str""));
downloadText.setText(formatCount(datacount.Download));
uploadText.setText(formatCount(datacount.Upload));
downloadText.invalidate();
uploadText.invalidate();
break;
default :
super.handleMessage(msg);
}
}","public void handleMessage(Message msg){
switch (msg.what) {
case TorServiceConstants.STATUS_MSG:
    String torServiceMsg=(String)msg.getData().getString(HANDLER_TOR_MSG);
  if (lastServiceMsg == null || !lastServiceMsg.equals(torServiceMsg)) {
    updateStatus(torServiceMsg);
    lastServiceMsg=torServiceMsg;
  }
break;
case TorServiceConstants.LOG_MSG:
break;
case TorServiceConstants.ENABLE_TOR_MSG:
updateStatus((String)msg.getData().getString(HANDLER_TOR_MSG));
break;
case TorServiceConstants.DISABLE_TOR_MSG:
updateStatus((String)msg.getData().getString(HANDLER_TOR_MSG));
break;
case TorServiceConstants.MESSAGE_TRAFFIC_COUNT:
trafficRow.setVisibility(RelativeLayout.VISIBLE);
Bundle data=msg.getData();
DataCount datacount=new DataCount(data.getLong(""String_Node_Str""),data.getLong(""String_Node_Str""));
downloadText.setText(formatCount(datacount.Download));
uploadText.setText(formatCount(datacount.Upload));
downloadText.invalidate();
uploadText.invalidate();
break;
default :
super.handleMessage(msg);
}
}"
24966,"private void startTor() throws RemoteException {
  mService.setProfile(TorServiceConstants.PROFILE_ON);
  imgStatus.setImageResource(R.drawable.torstarting);
  lblStatus.setText(getString(R.string.status_starting_up));
  Message msg=mHandler.obtainMessage(TorServiceConstants.ENABLE_TOR_MSG);
  msg.getData().putString(HANDLER_TOR_MSG,getString(R.string.status_starting_up));
  mHandler.sendMessage(msg);
  trafficRow.setVisibility(RelativeLayout.VISIBLE);
}","private void startTor() throws RemoteException {
  mService.setProfile(TorServiceConstants.PROFILE_ON);
  imgStatus.setImageResource(R.drawable.torstarting);
  lblStatus.setText(getString(R.string.status_starting_up));
  Message msg=mHandler.obtainMessage(TorServiceConstants.ENABLE_TOR_MSG);
  msg.getData().putString(HANDLER_TOR_MSG,getString(R.string.status_starting_up));
  mHandler.sendMessage(msg);
}"
24967,"public void run(){
  if (currentStatus == STATUS_CONNECTING) {
    boolean isRunning=_torInstance.findExistingProc();
    if (!isRunning) {
      try {
        initTor();
        isRunning=true;
      }
 catch (      Exception e) {
        currentStatus=STATUS_OFF;
        this.showToolbarNotification(getString(R.string.status_disabled),ERROR_NOTIFY_ID,R.drawable.tornotificationerr,-1);
        Log.d(TAG,""String_Node_Str"" + e.getMessage(),e);
      }
    }
  }
 else   if (currentStatus == STATUS_OFF) {
    _torInstance.stopTor();
  }
}","public void run(){
  findExistingProc();
}"
24968,"public IBinder onBind(Intent intent){
  _torInstance=this;
  initTorPaths();
  findExistingProc();
  if (ITorService.class.getName().equals(intent.getAction())) {
    return mBinder;
  }
 else   return null;
}","public IBinder onBind(Intent intent){
  _torInstance=this;
  initTorPaths();
  new Thread(){
    public void run(){
      findExistingProc();
    }
  }
.start();
  if (ITorService.class.getName().equals(intent.getAction())) {
    return mBinder;
  }
 else   return null;
}"
24969,"@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction() != null && intent.getAction().equals(""String_Node_Str"")) {
    Intent service=new Intent();
    service.setAction(""String_Node_Str"");
    service.setClass(context,TorService.class);
    context.startService(service);
  }
}","@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction() != null && intent.getAction().equals(""String_Node_Str"")) {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
    boolean startOnBoot=prefs.getBoolean(""String_Node_Str"",false);
    if (startOnBoot) {
      Intent service=new Intent();
      service.setAction(""String_Node_Str"");
      service.setClass(context,TorService.class);
      context.startService(service);
    }
  }
}"
24970,"public void onStart(Intent intent,int startId){
  super.onStart(intent,startId);
  _torInstance=this;
  initTorPaths();
  new Thread(){
    public void run(){
      try {
        checkTorBinaries(false);
      }
 catch (      Exception e) {
        logNotice(""String_Node_Str"" + e.getMessage());
        showToolbarNotification(getString(R.string.error_installing_binares),ERROR_NOTIFY_ID,R.drawable.tornotificationerr,-1);
        Log.e(TAG,""String_Node_Str"",e);
      }
    }
  }
.start();
  if (intent.getAction() != null && intent.getAction().equals(""String_Node_Str"")) {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    boolean startOnBoot=prefs.getBoolean(""String_Node_Str"",false);
    if (startOnBoot) {
      setTorProfile(PROFILE_ON);
    }
  }
}","public void onStart(Intent intent,int startId){
  super.onStart(intent,startId);
  _torInstance=this;
  initTorPaths();
  new Thread(){
    public void run(){
      try {
        checkTorBinaries(false);
      }
 catch (      Exception e) {
        logNotice(""String_Node_Str"" + e.getMessage());
        showToolbarNotification(getString(R.string.error_installing_binares),ERROR_NOTIFY_ID,R.drawable.tornotificationerr,-1);
        Log.e(TAG,""String_Node_Str"",e);
      }
    }
  }
.start();
  if (intent != null && intent.getAction() != null && intent.getAction().equals(""String_Node_Str"")) {
    SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
    boolean startOnBoot=prefs.getBoolean(""String_Node_Str"",false);
    if (startOnBoot) {
      setTorProfile(PROFILE_ON);
    }
  }
}"
24971,"private boolean applyPreferences() throws RemoteException {
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  ENABLE_DEBUG_LOG=true;
  Log.i(TAG,""String_Node_Str"" + ENABLE_DEBUG_LOG);
  boolean useBridges=prefs.getBoolean(TorConstants.PREF_BRIDGES_ENABLED,false);
  boolean becomeRelay=prefs.getBoolean(TorConstants.PREF_OR,false);
  boolean ReachableAddresses=prefs.getBoolean(TorConstants.PREF_REACHABLE_ADDRESSES,false);
  boolean enableHiddenServices=prefs.getBoolean(""String_Node_Str"",false);
  boolean enableStrictNodes=prefs.getBoolean(""String_Node_Str"",false);
  String entranceNodes=prefs.getString(""String_Node_Str"",null);
  String exitNodes=prefs.getString(""String_Node_Str"",null);
  String excludeNodes=prefs.getString(""String_Node_Str"",null);
  String proxyType=prefs.getString(""String_Node_Str"",null);
  if (proxyType != null) {
    String proxyHost=prefs.getString(""String_Node_Str"",null);
    String proxyPort=prefs.getString(""String_Node_Str"",null);
    if (proxyHost != null && proxyPort != null) {
      mBinder.updateConfiguration(proxyType + ""String_Node_Str"",proxyHost + ':' + proxyPort,false);
    }
  }
  File fileGeoIP=new File(appBinHome,""String_Node_Str"");
  mBinder.updateConfiguration(""String_Node_Str"",fileGeoIP.getAbsolutePath(),false);
  mBinder.updateConfiguration(""String_Node_Str"",entranceNodes,false);
  mBinder.updateConfiguration(""String_Node_Str"",exitNodes,false);
  mBinder.updateConfiguration(""String_Node_Str"",excludeNodes,false);
  mBinder.updateConfiguration(""String_Node_Str"",enableStrictNodes ? ""String_Node_Str"" : ""String_Node_Str"",false);
  if (useBridges) {
    String bridgeList=prefs.getString(TorConstants.PREF_BRIDGES_LIST,""String_Node_Str"");
    if (bridgeList == null || bridgeList.length() == 0) {
      showAlert(getString(R.string.bridge_error),getString(R.string.bridge_requires_ip) + getString(R.string.send_email_for_bridges));
      return false;
    }
    mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    String bridgeDelim=""String_Node_Str"";
    if (bridgeList.indexOf(""String_Node_Str"") != -1) {
      bridgeDelim=""String_Node_Str"";
    }
    StringTokenizer st=new StringTokenizer(bridgeList,bridgeDelim);
    while (st.hasMoreTokens()) {
      mBinder.updateConfiguration(""String_Node_Str"",st.nextToken(),false);
    }
    mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
  }
 else {
    mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
  }
  try {
    if (ReachableAddresses) {
      String ReachableAddressesPorts=prefs.getString(TorConstants.PREF_REACHABLE_ADDRESSES_PORTS,""String_Node_Str"");
      mBinder.updateConfiguration(""String_Node_Str"",ReachableAddressesPorts,false);
    }
 else {
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    }
  }
 catch (  Exception e) {
    showAlert(getString(R.string.error),getString(R.string.your_reachableaddresses_settings_caused_an_exception_));
    return false;
  }
  try {
    if (becomeRelay && (!useBridges) && (!ReachableAddresses)) {
      int ORPort=Integer.parseInt(prefs.getString(TorConstants.PREF_OR_PORT,""String_Node_Str""));
      String nickname=prefs.getString(TorConstants.PREF_OR_NICKNAME,""String_Node_Str"");
      mBinder.updateConfiguration(""String_Node_Str"",ORPort + ""String_Node_Str"",false);
      mBinder.updateConfiguration(""String_Node_Str"",nickname,false);
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    }
 else {
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    }
  }
 catch (  Exception e) {
    showAlert(getString(R.string.error),getString(R.string.your_relay_settings_caused_an_exception_));
    return false;
  }
  if (enableHiddenServices) {
    mBinder.updateConfiguration(""String_Node_Str"",appDataHome.getAbsolutePath(),false);
    String hsPorts=prefs.getString(""String_Node_Str"",""String_Node_Str"");
    StringTokenizer st=new StringTokenizer(hsPorts,""String_Node_Str"");
    String hsPortConfig=null;
    while (st.hasMoreTokens()) {
      hsPortConfig=st.nextToken();
      if (hsPortConfig.indexOf(""String_Node_Str"") == -1) {
        hsPortConfig=hsPortConfig + ""String_Node_Str"" + hsPortConfig;
      }
      mBinder.updateConfiguration(""String_Node_Str"",hsPortConfig,false);
    }
  }
 else {
    mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
  }
  mBinder.saveConfiguration();
  return true;
}","private boolean applyPreferences() throws RemoteException {
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  ENABLE_DEBUG_LOG=prefs.getBoolean(""String_Node_Str"",false);
  Log.i(TAG,""String_Node_Str"" + ENABLE_DEBUG_LOG);
  boolean useBridges=prefs.getBoolean(TorConstants.PREF_BRIDGES_ENABLED,false);
  boolean becomeRelay=prefs.getBoolean(TorConstants.PREF_OR,false);
  boolean ReachableAddresses=prefs.getBoolean(TorConstants.PREF_REACHABLE_ADDRESSES,false);
  boolean enableHiddenServices=prefs.getBoolean(""String_Node_Str"",false);
  boolean enableStrictNodes=prefs.getBoolean(""String_Node_Str"",false);
  String entranceNodes=prefs.getString(""String_Node_Str"",null);
  String exitNodes=prefs.getString(""String_Node_Str"",null);
  String excludeNodes=prefs.getString(""String_Node_Str"",null);
  String proxyType=prefs.getString(""String_Node_Str"",null);
  if (proxyType != null) {
    String proxyHost=prefs.getString(""String_Node_Str"",null);
    String proxyPort=prefs.getString(""String_Node_Str"",null);
    if (proxyHost != null && proxyPort != null) {
      mBinder.updateConfiguration(proxyType + ""String_Node_Str"",proxyHost + ':' + proxyPort,false);
    }
  }
  File fileGeoIP=new File(appBinHome,""String_Node_Str"");
  mBinder.updateConfiguration(""String_Node_Str"",fileGeoIP.getAbsolutePath(),false);
  mBinder.updateConfiguration(""String_Node_Str"",entranceNodes,false);
  mBinder.updateConfiguration(""String_Node_Str"",exitNodes,false);
  mBinder.updateConfiguration(""String_Node_Str"",excludeNodes,false);
  mBinder.updateConfiguration(""String_Node_Str"",enableStrictNodes ? ""String_Node_Str"" : ""String_Node_Str"",false);
  if (useBridges) {
    String bridgeList=prefs.getString(TorConstants.PREF_BRIDGES_LIST,""String_Node_Str"");
    if (bridgeList == null || bridgeList.length() == 0) {
      showAlert(getString(R.string.bridge_error),getString(R.string.bridge_requires_ip) + getString(R.string.send_email_for_bridges));
      return false;
    }
    mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    String bridgeDelim=""String_Node_Str"";
    if (bridgeList.indexOf(""String_Node_Str"") != -1) {
      bridgeDelim=""String_Node_Str"";
    }
    StringTokenizer st=new StringTokenizer(bridgeList,bridgeDelim);
    while (st.hasMoreTokens()) {
      mBinder.updateConfiguration(""String_Node_Str"",st.nextToken(),false);
    }
    mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
  }
 else {
    mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
  }
  try {
    if (ReachableAddresses) {
      String ReachableAddressesPorts=prefs.getString(TorConstants.PREF_REACHABLE_ADDRESSES_PORTS,""String_Node_Str"");
      mBinder.updateConfiguration(""String_Node_Str"",ReachableAddressesPorts,false);
    }
 else {
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    }
  }
 catch (  Exception e) {
    showAlert(getString(R.string.error),getString(R.string.your_reachableaddresses_settings_caused_an_exception_));
    return false;
  }
  try {
    if (becomeRelay && (!useBridges) && (!ReachableAddresses)) {
      int ORPort=Integer.parseInt(prefs.getString(TorConstants.PREF_OR_PORT,""String_Node_Str""));
      String nickname=prefs.getString(TorConstants.PREF_OR_NICKNAME,""String_Node_Str"");
      mBinder.updateConfiguration(""String_Node_Str"",ORPort + ""String_Node_Str"",false);
      mBinder.updateConfiguration(""String_Node_Str"",nickname,false);
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    }
 else {
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    }
  }
 catch (  Exception e) {
    showAlert(getString(R.string.error),getString(R.string.your_relay_settings_caused_an_exception_));
    return false;
  }
  if (enableHiddenServices) {
    mBinder.updateConfiguration(""String_Node_Str"",appDataHome.getAbsolutePath(),false);
    String hsPorts=prefs.getString(""String_Node_Str"",""String_Node_Str"");
    StringTokenizer st=new StringTokenizer(hsPorts,""String_Node_Str"");
    String hsPortConfig=null;
    while (st.hasMoreTokens()) {
      hsPortConfig=st.nextToken();
      if (hsPortConfig.indexOf(""String_Node_Str"") == -1) {
        hsPortConfig=hsPortConfig + ""String_Node_Str"" + hsPortConfig;
      }
      mBinder.updateConfiguration(""String_Node_Str"",hsPortConfig,false);
    }
  }
 else {
    mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
  }
  mBinder.saveConfiguration();
  return true;
}"
24972,"private void hideProgressDialog(){
  if (progressDialog != null && progressDialog.isShowing()) {
    progressDialog.dismiss();
  }
}","private void hideProgressDialog(){
  if (progressDialog != null && progressDialog.isShowing()) {
    progressDialog.dismiss();
    progressDialog=null;
  }
}"
24973,"private void startTor() throws RemoteException {
  bindService();
  mService.setProfile(TorServiceConstants.PROFILE_ON);
  imgStatus.setImageResource(R.drawable.torstarting);
  lblStatus.setText(getString(R.string.status_starting_up));
  Message msg=mHandler.obtainMessage(TorServiceConstants.ENABLE_TOR_MSG);
  mHandler.sendMessage(msg);
}","private void startTor() throws RemoteException {
  bindService();
  mService.setProfile(TorServiceConstants.PROFILE_ON);
  imgStatus.setImageResource(R.drawable.torstarting);
  lblStatus.setText(getString(R.string.status_starting_up));
  Message msg=mHandler.obtainMessage(TorServiceConstants.ENABLE_TOR_MSG);
  msg.getData().putString(HANDLER_TOR_MSG,getString(R.string.status_starting_up));
  mHandler.sendMessage(msg);
}"
24974,"private void createProgressDialog(String msg){
  if (progressDialog != null && progressDialog.isShowing())   return;
  progressDialog=ProgressDialog.show(Orbot.this,""String_Node_Str"",msg);
  progressDialog.setCancelable(true);
}","private void createProgressDialog(String msg){
  if (progressDialog != null && progressDialog.isShowing()) {
    progressDialog.setMessage(msg);
  }
 else {
    progressDialog=ProgressDialog.show(Orbot.this,""String_Node_Str"",msg);
    progressDialog.setCancelable(true);
  }
}"
24975,"private void showAlert(String title,String msg,boolean button){
  try {
    if (aDialog != null && aDialog.isShowing())     aDialog.dismiss();
  }
 catch (  Exception e) {
  }
  if (button) {
    aDialog=new AlertDialog.Builder(this).setIcon(R.drawable.icon).setTitle(title).setMessage(msg).setPositiveButton(android.R.string.ok,null).show();
  }
 else {
    aDialog=new AlertDialog.Builder(this).setIcon(R.drawable.icon).setTitle(title).setMessage(msg).show();
  }
  aDialog.setCanceledOnTouchOutside(true);
}","private void showAlert(String title,String msg,boolean button){
  try {
    if (aDialog != null && aDialog.isShowing())     aDialog.dismiss();
  }
 catch (  Exception e) {
  }
  if (button) {
    aDialog=new AlertDialog.Builder(Orbot.this).setIcon(R.drawable.icon).setTitle(title).setMessage(msg).setPositiveButton(android.R.string.ok,null).show();
  }
 else {
    aDialog=new AlertDialog.Builder(Orbot.this).setIcon(R.drawable.icon).setTitle(title).setMessage(msg).show();
  }
  aDialog.setCanceledOnTouchOutside(true);
}"
24976,"private void installFromRaw(){
  InputStream is=context.getResources().openRawResource(R.raw.toraa);
  streamToFile(is,installPath + TOR_BINARY_ASSET_KEY,false);
  is=context.getResources().openRawResource(R.raw.torab);
  streamToFile(is,installPath + TOR_BINARY_ASSET_KEY,true);
  is=context.getResources().openRawResource(R.raw.torac);
  streamToFile(is,installPath + TOR_BINARY_ASSET_KEY,true);
  is=context.getResources().openRawResource(R.raw.torad);
  streamToFile(is,installPath + TOR_BINARY_ASSET_KEY,true);
  is=context.getResources().openRawResource(R.raw.torrc);
  streamToFile(is,installPath + TORRC_ASSET_KEY,false);
  is=context.getResources().openRawResource(R.raw.privoxy);
  streamToFile(is,installPath + PRIVOXY_ASSET_KEY,false);
  is=context.getResources().openRawResource(R.raw.privoxy_config);
  streamToFile(is,installPath + PRIVOXYCONFIG_ASSET_KEY,false);
  Log.d(TAG,""String_Node_Str"");
}","public boolean installFromRaw(){
  boolean result=false;
  try {
    InputStream is;
    is=context.getResources().openRawResource(R.raw.toraa);
    streamToFile(is,installFolder,TOR_BINARY_ASSET_KEY,false);
    is=context.getResources().openRawResource(R.raw.torab);
    streamToFile(is,installFolder,TOR_BINARY_ASSET_KEY,true);
    is=context.getResources().openRawResource(R.raw.torac);
    streamToFile(is,installFolder,TOR_BINARY_ASSET_KEY,true);
    is=context.getResources().openRawResource(R.raw.torad);
    streamToFile(is,installFolder,TOR_BINARY_ASSET_KEY,true);
    is=context.getResources().openRawResource(R.raw.torrc);
    streamToFile(is,installFolder,TORRC_ASSET_KEY,false);
    is=context.getResources().openRawResource(R.raw.privoxy);
    streamToFile(is,installFolder,PRIVOXY_ASSET_KEY,false);
    is=context.getResources().openRawResource(R.raw.privoxy_config);
    streamToFile(is,installFolder,PRIVOXYCONFIG_ASSET_KEY,false);
  }
 catch (  IOException ioe) {
    Log.e(TAG,""String_Node_Str"",ioe);
    return false;
  }
  return true;
}"
24977,"private static void streamToFile(InputStream stm,String targetFilename,boolean append){
  FileOutputStream stmOut=null;
  byte[] buffer=new byte[FILE_WRITE_BUFFER_SIZE];
  int bytecount;
  File outFile=new File(targetFilename);
  try {
    if (!append)     outFile.createNewFile();
    stmOut=new FileOutputStream(outFile);
  }
 catch (  java.io.IOException e) {
    Log.d(TAG,""String_Node_Str"" + targetFilename,e);
    return;
  }
  try {
    while ((bytecount=stm.read(buffer)) > 0) {
      stmOut.write(buffer,0,bytecount);
    }
    stmOut.close();
  }
 catch (  java.io.IOException e) {
    Log.d(TAG,""String_Node_Str"" + targetFilename + ""String_Node_Str""+ e.toString());
    return;
  }
}","private static boolean streamToFile(InputStream stm,File folder,String targetFilename,boolean append) throws IOException {
  byte[] buffer=new byte[FILE_WRITE_BUFFER_SIZE];
  int bytecount;
  File outFile=new File(folder,targetFilename);
  FileOutputStream stmOut=new FileOutputStream(outFile,append);
  while ((bytecount=stm.read(buffer)) > 0) {
    stmOut.write(buffer,0,bytecount);
  }
  stmOut.close();
  return true;
}"
24978,"public TorBinaryInstaller(Context context,String installPath,String apkPath){
  this.installPath=installPath;
  this.apkPath=apkPath;
  this.context=context;
}","public TorBinaryInstaller(Context context,File installFolder){
  this.installFolder=installFolder;
  this.context=context;
}"
24979,"private void runTorShellCmd() throws Exception {
  StringBuilder log=new StringBuilder();
  String torrcPath=appBinHome + TORRC_ASSET_KEY;
  String[] torCmd={torBinaryPath + ""String_Node_Str"" + appDataHome+ ""String_Node_Str""+ torrcPath+ ""String_Node_Str""};
  boolean runAsRootFalse=false;
  boolean waitForProcess=false;
  int procId=-1;
  int attempts=0;
  int torRetryWaitTimeMS=5000;
  while (procId == -1 && attempts < MAX_START_TRIES) {
    log=new StringBuilder();
    logNotice(torCmd[0]);
    sendCallbackStatusMessage(getString(R.string.status_starting_up));
    TorServiceUtils.doShellCommand(torCmd,log,runAsRootFalse,waitForProcess);
    Thread.sleep(torRetryWaitTimeMS);
    procId=TorServiceUtils.findProcessId(torBinaryPath);
    logNotice(""String_Node_Str"" + procId);
    if (procId == -1) {
      sendCallbackStatusMessage(""String_Node_Str"" + log.toString());
      Thread.sleep(torRetryWaitTimeMS);
      attempts++;
    }
    logNotice(log.toString());
  }
  if (procId == -1) {
    throw new Exception(""String_Node_Str"");
  }
 else {
    logNotice(""String_Node_Str"" + procId);
    showToolbarNotification(getString(R.string.status_starting_up),NOTIFY_ID,R.drawable.tornotification);
    initControlConnection();
    applyPreferences();
  }
}","private void runTorShellCmd() throws Exception {
  StringBuilder log=new StringBuilder();
  String torrcPath=new File(appBinHome,TORRC_ASSET_KEY).getAbsolutePath();
  String[] torCmd={torBinaryPath + ""String_Node_Str"" + appDataHome.getAbsolutePath()+ ""String_Node_Str""+ torrcPath+ ""String_Node_Str""};
  boolean runAsRootFalse=false;
  boolean waitForProcess=false;
  int procId=-1;
  int attempts=0;
  int torRetryWaitTimeMS=5000;
  while (procId == -1 && attempts < MAX_START_TRIES) {
    log=new StringBuilder();
    logNotice(torCmd[0]);
    sendCallbackStatusMessage(getString(R.string.status_starting_up));
    TorServiceUtils.doShellCommand(torCmd,log,runAsRootFalse,waitForProcess);
    Thread.sleep(torRetryWaitTimeMS);
    procId=TorServiceUtils.findProcessId(torBinaryPath);
    logNotice(""String_Node_Str"" + procId);
    if (procId == -1) {
      sendCallbackStatusMessage(""String_Node_Str"" + log.toString());
      Thread.sleep(torRetryWaitTimeMS);
      attempts++;
    }
    logNotice(log.toString());
  }
  if (procId == -1) {
    throw new Exception(""String_Node_Str"");
  }
 else {
    logNotice(""String_Node_Str"" + procId);
    showToolbarNotification(getString(R.string.status_starting_up),NOTIFY_ID,R.drawable.tornotification);
    initControlConnection();
    applyPreferences();
  }
}"
24980,"private void runPrivoxyShellCmd() throws Exception {
  logNotice(""String_Node_Str"");
  int privoxyProcId=TorServiceUtils.findProcessId(privoxyPath);
  StringBuilder log=null;
  int attempts=0;
  if (privoxyProcId == -1) {
    log=new StringBuilder();
    String privoxyConfigPath=appBinHome + PRIVOXYCONFIG_ASSET_KEY;
    String[] cmds={privoxyPath + ""String_Node_Str"" + privoxyConfigPath+ ""String_Node_Str""};
    logNotice(cmds[0]);
    boolean runAsRoot=false;
    boolean waitFor=false;
    TorServiceUtils.doShellCommand(cmds,log,runAsRoot,waitFor);
    Thread.sleep(1000);
    while ((privoxyProcId=TorServiceUtils.findProcessId(privoxyPath)) == -1 && attempts < MAX_START_TRIES) {
      logNotice(""String_Node_Str"" + log);
      Thread.sleep(3000);
      attempts++;
    }
    logNotice(log.toString());
  }
  sendCallbackLogMessage(""String_Node_Str"" + PORT_HTTP);
  logNotice(""String_Node_Str"" + privoxyProcId);
}","private void runPrivoxyShellCmd() throws Exception {
  logNotice(""String_Node_Str"");
  int privoxyProcId=TorServiceUtils.findProcessId(privoxyPath);
  StringBuilder log=null;
  int attempts=0;
  if (privoxyProcId == -1) {
    log=new StringBuilder();
    String privoxyConfigPath=new File(appBinHome,PRIVOXYCONFIG_ASSET_KEY).getAbsolutePath();
    String[] cmds={privoxyPath + ""String_Node_Str"" + privoxyConfigPath+ ""String_Node_Str""};
    logNotice(cmds[0]);
    boolean runAsRoot=false;
    boolean waitFor=false;
    TorServiceUtils.doShellCommand(cmds,log,runAsRoot,waitFor);
    Thread.sleep(1000);
    while ((privoxyProcId=TorServiceUtils.findProcessId(privoxyPath)) == -1 && attempts < MAX_START_TRIES) {
      logNotice(""String_Node_Str"" + log);
      Thread.sleep(3000);
      attempts++;
    }
    logNotice(log.toString());
  }
  sendCallbackLogMessage(""String_Node_Str"" + PORT_HTTP);
  logNotice(""String_Node_Str"" + privoxyProcId);
}"
24981,"public void initControlConnection() throws Exception, RuntimeException {
  while (true) {
    try {
      logNotice(""String_Node_Str"" + TOR_CONTROL_PORT);
      String baseMessage=getString(R.string.tor_process_connecting);
      sendCallbackStatusMessage(baseMessage);
      torConnSocket=new Socket(IP_LOCALHOST,TOR_CONTROL_PORT);
      conn=TorControlConnection.getConnection(torConnSocket);
      sendCallbackStatusMessage(getString(R.string.tor_process_connecting_step2));
      logNotice(""String_Node_Str"");
      String torAuthCookie=appDataHome + TOR_CONTROL_COOKIE;
      File fileCookie=new File(torAuthCookie);
      if (fileCookie.exists()) {
        byte[] cookie=new byte[(int)fileCookie.length()];
        new FileInputStream(new File(torAuthCookie)).read(cookie);
        conn.authenticate(cookie);
        logNotice(""String_Node_Str"");
        sendCallbackStatusMessage(getString(R.string.tor_process_connecting_step2) + getString(R.string.tor_process_connecting_step3));
        addEventHandler();
      }
      break;
    }
 catch (    Exception ce) {
      conn=null;
      Log.d(TAG,""String_Node_Str"" + ce.getLocalizedMessage(),ce);
      sendCallbackStatusMessage(getString(R.string.tor_process_connecting_step4));
      Thread.sleep(1000);
    }
  }
}","public void initControlConnection() throws Exception, RuntimeException {
  while (true) {
    try {
      logNotice(""String_Node_Str"" + TOR_CONTROL_PORT);
      String baseMessage=getString(R.string.tor_process_connecting);
      sendCallbackStatusMessage(baseMessage);
      torConnSocket=new Socket(IP_LOCALHOST,TOR_CONTROL_PORT);
      conn=TorControlConnection.getConnection(torConnSocket);
      sendCallbackStatusMessage(getString(R.string.tor_process_connecting_step2));
      logNotice(""String_Node_Str"");
      String torAuthCookie=new File(appDataHome,TOR_CONTROL_COOKIE).getAbsolutePath();
      File fileCookie=new File(torAuthCookie);
      if (fileCookie.exists()) {
        byte[] cookie=new byte[(int)fileCookie.length()];
        new FileInputStream(new File(torAuthCookie)).read(cookie);
        conn.authenticate(cookie);
        logNotice(""String_Node_Str"");
        sendCallbackStatusMessage(getString(R.string.tor_process_connecting_step2) + getString(R.string.tor_process_connecting_step3));
        addEventHandler();
      }
      break;
    }
 catch (    Exception ce) {
      conn=null;
      Log.d(TAG,""String_Node_Str"" + ce.getLocalizedMessage(),ce);
      sendCallbackStatusMessage(getString(R.string.tor_process_connecting_step4));
      Thread.sleep(1000);
    }
  }
}"
24982,"private boolean applyPreferences() throws RemoteException {
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  ENABLE_DEBUG_LOG=prefs.getBoolean(""String_Node_Str"",false);
  Log.i(TAG,""String_Node_Str"" + ENABLE_DEBUG_LOG);
  boolean useBridges=prefs.getBoolean(TorConstants.PREF_BRIDGES_ENABLED,false);
  boolean becomeRelay=prefs.getBoolean(TorConstants.PREF_OR,false);
  boolean ReachableAddresses=prefs.getBoolean(TorConstants.PREF_REACHABLE_ADDRESSES,false);
  boolean enableHiddenServices=prefs.getBoolean(""String_Node_Str"",false);
  boolean enableStrictNodes=prefs.getBoolean(""String_Node_Str"",false);
  String entranceNodes=prefs.getString(""String_Node_Str"",null);
  String exitNodes=prefs.getString(""String_Node_Str"",null);
  String excludeNodes=prefs.getString(""String_Node_Str"",null);
  if (currentStatus == STATUS_ON) {
    try {
      setupTransProxy(true);
    }
 catch (    Exception e) {
      logException(""String_Node_Str"",e);
    }
  }
  mBinder.updateConfiguration(""String_Node_Str"",entranceNodes,false);
  mBinder.updateConfiguration(""String_Node_Str"",exitNodes,false);
  mBinder.updateConfiguration(""String_Node_Str"",excludeNodes,false);
  mBinder.updateConfiguration(""String_Node_Str"",enableStrictNodes ? ""String_Node_Str"" : ""String_Node_Str"",false);
  if (useBridges) {
    String bridgeList=prefs.getString(TorConstants.PREF_BRIDGES_LIST,""String_Node_Str"");
    if (bridgeList == null || bridgeList.length() == 0) {
      showAlert(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
      return false;
    }
    mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    String bridgeDelim=""String_Node_Str"";
    if (bridgeList.indexOf(""String_Node_Str"") != -1) {
      bridgeDelim=""String_Node_Str"";
    }
    StringTokenizer st=new StringTokenizer(bridgeList,bridgeDelim);
    while (st.hasMoreTokens()) {
      mBinder.updateConfiguration(""String_Node_Str"",st.nextToken(),false);
    }
    mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
  }
 else {
    mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
  }
  try {
    if (ReachableAddresses) {
      String ReachableAddressesPorts=prefs.getString(TorConstants.PREF_REACHABLE_ADDRESSES_PORTS,""String_Node_Str"");
      mBinder.updateConfiguration(""String_Node_Str"",ReachableAddressesPorts,false);
    }
 else {
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    }
  }
 catch (  Exception e) {
    showAlert(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  try {
    if (becomeRelay && (!useBridges) && (!ReachableAddresses)) {
      int ORPort=Integer.parseInt(prefs.getString(TorConstants.PREF_OR_PORT,""String_Node_Str""));
      String nickname=prefs.getString(TorConstants.PREF_OR_NICKNAME,""String_Node_Str"");
      mBinder.updateConfiguration(""String_Node_Str"",ORPort + ""String_Node_Str"",false);
      mBinder.updateConfiguration(""String_Node_Str"",nickname,false);
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    }
 else {
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    }
  }
 catch (  Exception e) {
    showAlert(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  if (enableHiddenServices) {
    mBinder.updateConfiguration(""String_Node_Str"",appDataHome,false);
    String hsPorts=prefs.getString(""String_Node_Str"",""String_Node_Str"");
    StringTokenizer st=new StringTokenizer(hsPorts,""String_Node_Str"");
    String hsPortConfig=null;
    while (st.hasMoreTokens()) {
      hsPortConfig=st.nextToken();
      if (hsPortConfig.indexOf(""String_Node_Str"") == -1) {
        hsPortConfig=hsPortConfig + ""String_Node_Str"" + hsPortConfig;
      }
      mBinder.updateConfiguration(""String_Node_Str"",hsPortConfig,false);
    }
  }
 else {
    mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
  }
  mBinder.saveConfiguration();
  return true;
}","private boolean applyPreferences() throws RemoteException {
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  ENABLE_DEBUG_LOG=prefs.getBoolean(""String_Node_Str"",false);
  Log.i(TAG,""String_Node_Str"" + ENABLE_DEBUG_LOG);
  boolean useBridges=prefs.getBoolean(TorConstants.PREF_BRIDGES_ENABLED,false);
  boolean becomeRelay=prefs.getBoolean(TorConstants.PREF_OR,false);
  boolean ReachableAddresses=prefs.getBoolean(TorConstants.PREF_REACHABLE_ADDRESSES,false);
  boolean enableHiddenServices=prefs.getBoolean(""String_Node_Str"",false);
  boolean enableStrictNodes=prefs.getBoolean(""String_Node_Str"",false);
  String entranceNodes=prefs.getString(""String_Node_Str"",null);
  String exitNodes=prefs.getString(""String_Node_Str"",null);
  String excludeNodes=prefs.getString(""String_Node_Str"",null);
  if (currentStatus == STATUS_ON) {
    try {
      setupTransProxy(true);
    }
 catch (    Exception e) {
      logException(""String_Node_Str"",e);
    }
  }
  mBinder.updateConfiguration(""String_Node_Str"",entranceNodes,false);
  mBinder.updateConfiguration(""String_Node_Str"",exitNodes,false);
  mBinder.updateConfiguration(""String_Node_Str"",excludeNodes,false);
  mBinder.updateConfiguration(""String_Node_Str"",enableStrictNodes ? ""String_Node_Str"" : ""String_Node_Str"",false);
  if (useBridges) {
    String bridgeList=prefs.getString(TorConstants.PREF_BRIDGES_LIST,""String_Node_Str"");
    if (bridgeList == null || bridgeList.length() == 0) {
      showAlert(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
      return false;
    }
    mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    String bridgeDelim=""String_Node_Str"";
    if (bridgeList.indexOf(""String_Node_Str"") != -1) {
      bridgeDelim=""String_Node_Str"";
    }
    StringTokenizer st=new StringTokenizer(bridgeList,bridgeDelim);
    while (st.hasMoreTokens()) {
      mBinder.updateConfiguration(""String_Node_Str"",st.nextToken(),false);
    }
    mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
  }
 else {
    mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
  }
  try {
    if (ReachableAddresses) {
      String ReachableAddressesPorts=prefs.getString(TorConstants.PREF_REACHABLE_ADDRESSES_PORTS,""String_Node_Str"");
      mBinder.updateConfiguration(""String_Node_Str"",ReachableAddressesPorts,false);
    }
 else {
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    }
  }
 catch (  Exception e) {
    showAlert(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  try {
    if (becomeRelay && (!useBridges) && (!ReachableAddresses)) {
      int ORPort=Integer.parseInt(prefs.getString(TorConstants.PREF_OR_PORT,""String_Node_Str""));
      String nickname=prefs.getString(TorConstants.PREF_OR_NICKNAME,""String_Node_Str"");
      mBinder.updateConfiguration(""String_Node_Str"",ORPort + ""String_Node_Str"",false);
      mBinder.updateConfiguration(""String_Node_Str"",nickname,false);
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    }
 else {
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
      mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    }
  }
 catch (  Exception e) {
    showAlert(""String_Node_Str"",""String_Node_Str"");
    return false;
  }
  if (enableHiddenServices) {
    mBinder.updateConfiguration(""String_Node_Str"",appDataHome.getAbsolutePath(),false);
    String hsPorts=prefs.getString(""String_Node_Str"",""String_Node_Str"");
    StringTokenizer st=new StringTokenizer(hsPorts,""String_Node_Str"");
    String hsPortConfig=null;
    while (st.hasMoreTokens()) {
      hsPortConfig=st.nextToken();
      if (hsPortConfig.indexOf(""String_Node_Str"") == -1) {
        hsPortConfig=hsPortConfig + ""String_Node_Str"" + hsPortConfig;
      }
      mBinder.updateConfiguration(""String_Node_Str"",hsPortConfig,false);
    }
  }
 else {
    mBinder.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
  }
  mBinder.saveConfiguration();
  return true;
}"
24983,"private boolean checkTorBinaries() throws Exception {
  IptablesManager.assertBinaries(this,true);
  File fileInstall=getDir(""String_Node_Str"",0);
  appHome=fileInstall.getAbsolutePath();
  appDataHome=getCacheDir().getAbsolutePath() + '/';
  logNotice(""String_Node_Str"" + appHome);
  torBinaryPath=appBinHome + TOR_BINARY_ASSET_KEY;
  privoxyPath=appBinHome + PRIVOXY_ASSET_KEY;
  logNotice(""String_Node_Str"");
  boolean torBinaryExists=new File(torBinaryPath).exists();
  boolean privoxyBinaryExists=new File(privoxyPath).exists();
  if (!(torBinaryExists && privoxyBinaryExists)) {
    killTorProcess();
    TorBinaryInstaller installer=new TorBinaryInstaller(this,appBinHome,appBinHome);
    installer.start(true);
    torBinaryExists=new File(torBinaryPath).exists();
    privoxyBinaryExists=new File(privoxyPath).exists();
    if (torBinaryExists && privoxyBinaryExists) {
      logNotice(getString(R.string.status_install_success));
      showToolbarNotification(getString(R.string.status_install_success),NOTIFY_ID,R.drawable.tornotification);
    }
 else {
      logNotice(getString(R.string.status_install_fail));
      sendCallbackStatusMessage(getString(R.string.status_install_fail));
      return false;
    }
  }
 else {
    logNotice(""String_Node_Str"" + torBinaryPath);
    logNotice(""String_Node_Str"" + privoxyPath);
  }
  StringBuilder log=new StringBuilder();
  logNotice(""String_Node_Str"");
  String[] cmd1={SHELL_CMD_CHMOD + ' ' + CHMOD_EXE_VALUE+ ' '+ torBinaryPath};
  TorServiceUtils.doShellCommand(cmd1,log,false,true);
  logNotice(""String_Node_Str"");
  String[] cmd2={SHELL_CMD_CHMOD + ' ' + CHMOD_EXE_VALUE+ ' '+ privoxyPath};
  TorServiceUtils.doShellCommand(cmd2,log,false,true);
  return true;
}","private boolean checkTorBinaries() throws Exception {
  IptablesManager.assertBinaries(this,true);
  appBinHome=getDir(""String_Node_Str"",0);
  appDataHome=getCacheDir();
  File fileTor=new File(appBinHome,TOR_BINARY_ASSET_KEY);
  File filePrivoxy=new File(appBinHome,PRIVOXY_ASSET_KEY);
  logNotice(""String_Node_Str"");
  if (!(fileTor.exists() && filePrivoxy.exists())) {
    killTorProcess();
    TorBinaryInstaller installer=new TorBinaryInstaller(this,appBinHome);
    boolean success=installer.installFromRaw();
    if (success) {
      logNotice(getString(R.string.status_install_success));
      showToolbarNotification(getString(R.string.status_install_success),NOTIFY_ID,R.drawable.tornotification);
      torBinaryPath=fileTor.getAbsolutePath();
      privoxyPath=filePrivoxy.getAbsolutePath();
    }
 else {
      logNotice(getString(R.string.status_install_fail));
      sendCallbackStatusMessage(getString(R.string.status_install_fail));
      return false;
    }
  }
 else {
    logNotice(""String_Node_Str"" + torBinaryPath);
    logNotice(""String_Node_Str"" + privoxyPath);
    torBinaryPath=fileTor.getAbsolutePath();
    privoxyPath=filePrivoxy.getAbsolutePath();
  }
  StringBuilder log=new StringBuilder();
  logNotice(""String_Node_Str"");
  String[] cmd1={SHELL_CMD_CHMOD + ' ' + CHMOD_EXE_VALUE+ ' '+ torBinaryPath};
  TorServiceUtils.doShellCommand(cmd1,log,false,true);
  logNotice(""String_Node_Str"");
  String[] cmd2={SHELL_CMD_CHMOD + ' ' + CHMOD_EXE_VALUE+ ' '+ privoxyPath};
  TorServiceUtils.doShellCommand(cmd2,log,false,true);
  return true;
}"
24984,"protected void onPause(){
  super.onPause();
}","protected void onPause(){
  super.onPause();
  if (progressDialog != null) {
    progressDialog.dismiss();
    progressDialog=null;
  }
}"
24985,"private void showAlert(String title,String msg,boolean button){
  if (aDialog != null)   aDialog.dismiss();
  if (button) {
    aDialog=new AlertDialog.Builder(this).setIcon(R.drawable.icon).setTitle(title).setMessage(msg).setPositiveButton(android.R.string.ok,null).show();
  }
 else {
    aDialog=new AlertDialog.Builder(this).setIcon(R.drawable.icon).setTitle(title).setMessage(msg).show();
  }
}","private void showAlert(String title,String msg,boolean button){
  AlertDialog aDialog=null;
  if (button) {
    aDialog=new AlertDialog.Builder(this).setIcon(R.drawable.icon).setTitle(title).setMessage(msg).setPositiveButton(android.R.string.ok,null).show();
  }
 else {
    aDialog=new AlertDialog.Builder(this).setIcon(R.drawable.icon).setTitle(title).setMessage(msg).show();
  }
}"
24986,"@Override public boolean onPreferenceClick(Preference preference){
  if (preference == prefTransProxyApps) {
    startActivity(new Intent(this,AppManager.class));
  }
 else {
    prefcBTransProxyAll.setEnabled(prefCBTransProxy.isChecked());
    prefTransProxyApps.setEnabled(prefCBTransProxy.isChecked() && (!prefcBTransProxyAll.isChecked()));
  }
  return true;
}","@Override public boolean onPreferenceClick(Preference preference){
  if (preference == prefTransProxyApps) {
    startActivity(new Intent(this,AppManager.class));
  }
 else   if (preference == prefWebProxy) {
    Intent intent=new Intent();
    intent.setClassName(this,""String_Node_Str"");
    intent.putExtra(""String_Node_Str"",""String_Node_Str"");
    intent.putExtra(""String_Node_Str"",""String_Node_Str"");
    startActivity(intent);
  }
 else {
    prefcBTransProxyAll.setEnabled(prefCBTransProxy.isChecked());
    prefTransProxyApps.setEnabled(prefCBTransProxy.isChecked() && (!prefcBTransProxyAll.isChecked()));
  }
  return true;
}"
24987,"public void initControlConnection() throws Exception, RuntimeException {
  while (true) {
    try {
      Log.i(TAG,""String_Node_Str"" + TOR_CONTROL_PORT);
      String baseMessage=getString(R.string.tor_process_connecting);
      sendCallbackMessage(baseMessage);
      Socket s=new Socket(IP_LOCALHOST,TOR_CONTROL_PORT);
      conn=TorControlConnection.getConnection(s);
      sendCallbackMessage(getString(R.string.tor_process_connecting_step2));
      Log.i(TAG,""String_Node_Str"");
      String torAuthCookie=appHome + ""String_Node_Str"";
      File fileCookie=new File(torAuthCookie);
      byte[] cookie=new byte[(int)fileCookie.length()];
      new FileInputStream(new File(torAuthCookie)).read(cookie);
      conn.authenticate(cookie);
      Log.i(TAG,""String_Node_Str"");
      sendCallbackMessage(getString(R.string.tor_process_connecting_step2) + getString(R.string.tor_process_connecting_step3));
      addEventHandler();
      if (configBuffer != null) {
        conn.setConf(configBuffer);
        configBuffer=null;
      }
      break;
    }
 catch (    Exception ce) {
      conn=null;
      Log.i(TAG,""String_Node_Str"" + ce.getLocalizedMessage(),ce);
      sendCallbackMessage(getString(R.string.tor_process_connecting_step4));
      Thread.sleep(1000);
    }
  }
}","public void initControlConnection() throws Exception, RuntimeException {
  while (true) {
    try {
      Log.i(TAG,""String_Node_Str"" + TOR_CONTROL_PORT);
      String baseMessage=getString(R.string.tor_process_connecting);
      sendCallbackMessage(baseMessage);
      Socket s=new Socket(IP_LOCALHOST,TOR_CONTROL_PORT);
      conn=TorControlConnection.getConnection(s);
      sendCallbackMessage(getString(R.string.tor_process_connecting_step2));
      Log.i(TAG,""String_Node_Str"");
      String torAuthCookie=appHome + ""String_Node_Str"";
      File fileCookie=new File(torAuthCookie);
      byte[] cookie=new byte[(int)fileCookie.length()];
      new FileInputStream(new File(torAuthCookie)).read(cookie);
      conn.authenticate(cookie);
      Log.i(TAG,""String_Node_Str"");
      sendCallbackMessage(getString(R.string.tor_process_connecting_step2) + getString(R.string.tor_process_connecting_step3));
      addEventHandler();
      applyPreferences();
      break;
    }
 catch (    Exception ce) {
      conn=null;
      Log.i(TAG,""String_Node_Str"" + ce.getLocalizedMessage(),ce);
      sendCallbackMessage(getString(R.string.tor_process_connecting_step4));
      Thread.sleep(1000);
    }
  }
}"
24988,"public boolean saveConfiguration(){
  try {
    if (conn != null) {
      return true;
    }
  }
 catch (  Exception ioe) {
    Log.e(TAG,""String_Node_Str"",ioe);
    logNotice(""String_Node_Str"" + ioe.getMessage());
  }
  return false;
}","public boolean saveConfiguration(){
  try {
    if (conn != null) {
      if (configBuffer != null) {
        conn.setConf(configBuffer);
        configBuffer=null;
      }
      return true;
    }
  }
 catch (  Exception ioe) {
    Log.e(TAG,""String_Node_Str"",ioe);
    logNotice(""String_Node_Str"" + ioe.getMessage());
  }
  return false;
}"
24989,"/** 
 * Set configuration
 */
public boolean updateConfiguration(String name,String value,boolean saveToDisk){
  try {
    if (conn != null) {
      conn.setConf(name,value);
      if (saveToDisk) {
      }
      return true;
    }
 else {
      if (configBuffer == null)       configBuffer=new ArrayList<String>();
      configBuffer.add(name + ' ' + value);
    }
  }
 catch (  IOException ioe) {
    Log.e(TAG,""String_Node_Str"",ioe);
    logNotice(""String_Node_Str"" + ioe.getMessage());
  }
  return false;
}","/** 
 * Set configuration
 */
public boolean updateConfiguration(String name,String value,boolean saveToDisk){
  if (configBuffer == null)   configBuffer=new ArrayList<String>();
  configBuffer.add(name + ' ' + value);
  return false;
}"
24990,"public static void saveAppSettings(Context context){
  if (apps == null)   return;
  final SharedPreferences prefs=context.getSharedPreferences(PREFS_KEY,0);
  StringBuilder tordApps=new StringBuilder();
  for (int i=0; i < apps.length; i++) {
    if (apps[i].isTorified()) {
      tordApps.append(apps[i].getUsername());
      tordApps.append(""String_Node_Str"");
    }
  }
  Editor edit=prefs.edit();
  edit.putString(PREFS_KEY_TORIFIED,tordApps.toString());
  edit.commit();
}","public void saveAppSettings(Context context){
  if (apps == null)   return;
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  StringBuilder tordApps=new StringBuilder();
  for (int i=0; i < apps.length; i++) {
    if (apps[i].isTorified()) {
      tordApps.append(apps[i].getUsername());
      tordApps.append(""String_Node_Str"");
    }
  }
  Editor edit=prefs.edit();
  edit.putString(PREFS_KEY_TORIFIED,tordApps.toString());
  edit.commit();
}"
24991,"public static TorifiedApp[] getApps(Context context){
  if (apps != null)   return apps;
  final SharedPreferences prefs=context.getSharedPreferences(PREFS_KEY,0);
  String tordAppString=prefs.getString(PREFS_KEY_TORIFIED,""String_Node_Str"");
  String[] tordApps;
  StringTokenizer st=new StringTokenizer(tordAppString,""String_Node_Str"");
  tordApps=new String[st.countTokens()];
  int tordIdx=0;
  while (st.hasMoreTokens()) {
    tordApps[tordIdx++]=st.nextToken();
  }
  Arrays.sort(tordApps);
  PackageManager pMgr=context.getPackageManager();
  List<ApplicationInfo> lAppInfo=pMgr.getInstalledApplications(0);
  Iterator<ApplicationInfo> itAppInfo=lAppInfo.iterator();
  apps=new TorifiedApp[lAppInfo.size()];
  ApplicationInfo aInfo=null;
  int appIdx=0;
  while (itAppInfo.hasNext()) {
    aInfo=itAppInfo.next();
    apps[appIdx]=new TorifiedApp();
    apps[appIdx].setEnabled(aInfo.enabled);
    apps[appIdx].setUid(aInfo.uid);
    apps[appIdx].setUsername(pMgr.getNameForUid(apps[appIdx].getUid()));
    apps[appIdx].setProcname(aInfo.processName);
    apps[appIdx].setName(pMgr.getApplicationLabel(aInfo).toString());
    apps[appIdx].setIcon(pMgr.getApplicationIcon(aInfo));
    if (Arrays.binarySearch(tordApps,apps[appIdx].getUsername()) >= 0) {
      apps[appIdx].setTorified(true);
    }
 else {
      apps[appIdx].setTorified(false);
    }
    appIdx++;
  }
  return apps;
}","public static TorifiedApp[] getApps(Context context){
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(context);
  String tordAppString=prefs.getString(PREFS_KEY_TORIFIED,""String_Node_Str"");
  String[] tordApps;
  StringTokenizer st=new StringTokenizer(tordAppString,""String_Node_Str"");
  tordApps=new String[st.countTokens()];
  int tordIdx=0;
  while (st.hasMoreTokens()) {
    tordApps[tordIdx++]=st.nextToken();
  }
  Arrays.sort(tordApps);
  PackageManager pMgr=context.getPackageManager();
  List<ApplicationInfo> lAppInfo=pMgr.getInstalledApplications(0);
  Iterator<ApplicationInfo> itAppInfo=lAppInfo.iterator();
  apps=new TorifiedApp[lAppInfo.size()];
  ApplicationInfo aInfo=null;
  int appIdx=0;
  while (itAppInfo.hasNext()) {
    aInfo=itAppInfo.next();
    apps[appIdx]=new TorifiedApp();
    apps[appIdx].setEnabled(aInfo.enabled);
    apps[appIdx].setUid(aInfo.uid);
    apps[appIdx].setUsername(pMgr.getNameForUid(apps[appIdx].getUid()));
    apps[appIdx].setProcname(aInfo.processName);
    apps[appIdx].setName(pMgr.getApplicationLabel(aInfo).toString());
    apps[appIdx].setIcon(pMgr.getApplicationIcon(aInfo));
    if (Arrays.binarySearch(tordApps,apps[appIdx].getUsername()) >= 0) {
      apps[appIdx].setTorified(true);
    }
 else {
      apps[appIdx].setTorified(false);
    }
    appIdx++;
  }
  return apps;
}"
24992,"private void showMain(){
  bindService();
  currentView=R.layout.layout_main;
  setContentView(currentView);
  findViewById(R.id.imgStatus).setOnClickListener(this);
  findViewById(R.id.lblStatus).setOnClickListener(this);
  lblStatus=(TextView)findViewById(R.id.lblStatus);
  imgStatus=(ImageView)findViewById(R.id.imgStatus);
}","private void showMain(){
  bindService();
  currentView=R.layout.layout_main;
  setContentView(currentView);
  findViewById(R.id.imgStatus).setOnClickListener(this);
  findViewById(R.id.lblStatus).setOnClickListener(this);
  lblStatus=(TextView)findViewById(R.id.lblStatus);
  imgStatus=(ImageView)findViewById(R.id.imgStatus);
  updateStatus(""String_Node_Str"");
}"
24993,"private void processSettings() throws RemoteException {
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  boolean useBridges=prefs.getBoolean(PREF_BRIDGES_ENABLED,false);
  boolean autoUpdateBridges=prefs.getBoolean(PREF_BRIDGES_UPDATED,false);
  boolean becomeRelay=prefs.getBoolean(PREF_OR,false);
  boolean ReachableAddresses=prefs.getBoolean(PREF_REACHABLE_ADDRESSES,false);
  boolean enableTransparentProxy=prefs.getBoolean(PREF_TRANSPARENT,false);
  String bridgeList=prefs.getString(PREF_BRIDGES_LIST,""String_Node_Str"");
  if (useBridges) {
    if (bridgeList == null || bridgeList.length() == 0) {
      showAlert(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
      return;
    }
    mService.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    String bridgeDelim=""String_Node_Str"";
    if (bridgeList.indexOf(""String_Node_Str"") != -1) {
      bridgeDelim=""String_Node_Str"";
    }
    StringTokenizer st=new StringTokenizer(bridgeList,bridgeDelim);
    while (st.hasMoreTokens()) {
      mService.updateConfiguration(""String_Node_Str"",st.nextToken(),false);
    }
    mService.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
  }
 else {
    mService.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
  }
  try {
    if (ReachableAddresses) {
      String ReachableAddressesPorts=prefs.getString(PREF_REACHABLE_ADDRESSES_PORTS,""String_Node_Str"");
      mService.updateConfiguration(""String_Node_Str"",ReachableAddressesPorts,false);
    }
  }
 catch (  Exception e) {
    showAlert(""String_Node_Str"",""String_Node_Str"");
  }
  try {
    if (becomeRelay && (!useBridges) && (!ReachableAddresses)) {
      int ORPort=Integer.parseInt(prefs.getString(PREF_OR_PORT,""String_Node_Str""));
      String nickname=prefs.getString(PREF_OR_NICKNAME,""String_Node_Str"");
      mService.updateConfiguration(""String_Node_Str"",ORPort + ""String_Node_Str"",false);
      mService.updateConfiguration(""String_Node_Str"",nickname,false);
      mService.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    }
  }
 catch (  Exception e) {
    showAlert(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  mService.saveConfiguration();
}","private void processSettings() throws RemoteException {
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(this);
  boolean useBridges=prefs.getBoolean(PREF_BRIDGES_ENABLED,false);
  boolean autoUpdateBridges=prefs.getBoolean(PREF_BRIDGES_UPDATED,false);
  boolean becomeRelay=prefs.getBoolean(PREF_OR,false);
  boolean ReachableAddresses=prefs.getBoolean(PREF_REACHABLE_ADDRESSES,false);
  boolean enableTransparentProxy=prefs.getBoolean(PREF_TRANSPARENT,false);
  mService.updateTransProxy();
  String bridgeList=prefs.getString(PREF_BRIDGES_LIST,""String_Node_Str"");
  if (useBridges) {
    if (bridgeList == null || bridgeList.length() == 0) {
      showAlert(""String_Node_Str"",""String_Node_Str"" + ""String_Node_Str"");
      return;
    }
    mService.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    String bridgeDelim=""String_Node_Str"";
    if (bridgeList.indexOf(""String_Node_Str"") != -1) {
      bridgeDelim=""String_Node_Str"";
    }
    StringTokenizer st=new StringTokenizer(bridgeList,bridgeDelim);
    while (st.hasMoreTokens()) {
      mService.updateConfiguration(""String_Node_Str"",st.nextToken(),false);
    }
    mService.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
  }
 else {
    mService.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
  }
  try {
    if (ReachableAddresses) {
      String ReachableAddressesPorts=prefs.getString(PREF_REACHABLE_ADDRESSES_PORTS,""String_Node_Str"");
      mService.updateConfiguration(""String_Node_Str"",ReachableAddressesPorts,false);
    }
  }
 catch (  Exception e) {
    showAlert(""String_Node_Str"",""String_Node_Str"");
  }
  try {
    if (becomeRelay && (!useBridges) && (!ReachableAddresses)) {
      int ORPort=Integer.parseInt(prefs.getString(PREF_OR_PORT,""String_Node_Str""));
      String nickname=prefs.getString(PREF_OR_NICKNAME,""String_Node_Str"");
      mService.updateConfiguration(""String_Node_Str"",ORPort + ""String_Node_Str"",false);
      mService.updateConfiguration(""String_Node_Str"",nickname,false);
      mService.updateConfiguration(""String_Node_Str"",""String_Node_Str"",false);
    }
  }
 catch (  Exception e) {
    showAlert(""String_Node_Str"",""String_Node_Str"");
    return;
  }
  mService.saveConfiguration();
}"
24994,"protected void onResume(){
  super.onResume();
  NotificationManager mNotificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  mNotificationManager.cancelAll();
  if (mService != null) {
    try {
      processSettings();
    }
 catch (    RemoteException e) {
      e.printStackTrace();
    }
  }
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(mOrbot);
  boolean showWizard=prefs.getBoolean(""String_Node_Str"",true);
  if (showWizard) {
    Editor pEdit=prefs.edit();
    pEdit.putBoolean(""String_Node_Str"",false);
    pEdit.commit();
    showHelp();
  }
}","protected void onResume(){
  super.onResume();
  NotificationManager mNotificationManager=(NotificationManager)getSystemService(Context.NOTIFICATION_SERVICE);
  mNotificationManager.cancelAll();
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(mOrbot);
  boolean showWizard=prefs.getBoolean(""String_Node_Str"",true);
  if (showWizard) {
    Editor pEdit=prefs.edit();
    pEdit.putBoolean(""String_Node_Str"",false);
    pEdit.commit();
    showHelp();
  }
 else {
  }
}"
24995,"public void updateStatus(String torServiceMsg){
  try {
    if (mService != null)     torStatus=mService.getStatus();
    if (this.currentView == R.layout.layout_log) {
      txtMessageLog.append(torServiceMsg);
      txtMessageLog.append(""String_Node_Str"");
    }
    if (imgStatus != null) {
      if (torStatus == STATUS_ON) {
        imgStatus.setImageResource(R.drawable.toron);
        imgStatus.clearAnimation();
        lblStatus.setText(getString(R.string.status_activated));
        SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(mOrbot);
        boolean showWizard=prefs.getBoolean(""String_Node_Str"",true);
        if (showWizard) {
          Editor pEdit=prefs.edit();
          pEdit.putBoolean(""String_Node_Str"",false);
          pEdit.commit();
          showAlert(getString(R.string.status_activated),getString(R.string.connect_first_time));
        }
      }
 else       if (torStatus == STATUS_CONNECTING) {
        imgStatus.setImageResource(R.drawable.torstarting);
        lblStatus.setText(torServiceMsg);
        int idx=torServiceMsg.indexOf(""String_Node_Str"");
        if (idx != -1) {
          String pComp=torServiceMsg.substring(idx - 2,idx).trim();
          int ipComp=Integer.parseInt(pComp);
        }
      }
 else       if (torStatus == STATUS_OFF) {
        imgStatus.setImageResource(R.drawable.torstopping);
        imgStatus.clearAnimation();
        lblStatus.setText(getString(R.string.status_shutting_down));
      }
 else {
        imgStatus.clearAnimation();
        imgStatus.setImageResource(R.drawable.toroff);
        lblStatus.setText(getString(R.string.status_disabled));
      }
    }
  }
 catch (  RemoteException e) {
    e.printStackTrace();
  }
}","public void updateStatus(String torServiceMsg){
  try {
    if (mService != null)     torStatus=mService.getStatus();
    if (imgStatus != null) {
      if (torStatus == STATUS_ON) {
        imgStatus.setImageResource(R.drawable.toron);
        imgStatus.clearAnimation();
        String lblMsg=getString(R.string.status_activated) + ""String_Node_Str"" + torServiceMsg;
        lblStatus.setText(lblMsg);
        SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(mOrbot);
        boolean showWizard=prefs.getBoolean(""String_Node_Str"",true);
        if (showWizard) {
          Editor pEdit=prefs.edit();
          pEdit.putBoolean(""String_Node_Str"",false);
          pEdit.commit();
          showAlert(getString(R.string.status_activated),getString(R.string.connect_first_time));
        }
      }
 else       if (torStatus == STATUS_CONNECTING) {
        imgStatus.setImageResource(R.drawable.torstarting);
        lblStatus.setText(torServiceMsg);
        int idx=torServiceMsg.indexOf(""String_Node_Str"");
        if (idx != -1) {
          String pComp=torServiceMsg.substring(idx - 2,idx).trim();
          int ipComp=Integer.parseInt(pComp);
        }
      }
 else       if (torStatus == STATUS_OFF) {
        imgStatus.setImageResource(R.drawable.torstopping);
        imgStatus.clearAnimation();
        lblStatus.setText(getString(R.string.status_shutting_down));
      }
 else {
        imgStatus.clearAnimation();
        imgStatus.setImageResource(R.drawable.toroff);
        lblStatus.setText(getString(R.string.status_disabled));
      }
    }
  }
 catch (  RemoteException e) {
    e.printStackTrace();
  }
}"
24996,"private void showSettings(){
  startActivity(new Intent(this,SettingsPreferences.class));
}","private void showSettings(){
  startActivityForResult(new Intent(this,SettingsPreferences.class),1);
}"
24997,"@Override public boolean onPreferenceClick(Preference preference){
  if (preference == prefTransProxyApps) {
    startActivity(new Intent(this,AppManager.class));
  }
 else   if (preference == prefWebProxy) {
    Intent intent=new Intent();
    intent.setClassName(this,""String_Node_Str"");
    intent.putExtra(""String_Node_Str"",""String_Node_Str"");
    intent.putExtra(""String_Node_Str"",""String_Node_Str"");
    startActivity(intent);
  }
 else {
    prefcBTransProxyAll.setEnabled(prefCBTransProxy.isChecked());
    prefTransProxyApps.setEnabled(prefCBTransProxy.isChecked() && (!prefcBTransProxyAll.isChecked()));
  }
  return true;
}","@Override public boolean onPreferenceClick(Preference preference){
  if (preference == prefTransProxyApps) {
    startActivity(new Intent(this,AppManager.class));
  }
 else {
    prefcBTransProxyAll.setEnabled(prefCBTransProxy.isChecked());
    prefTransProxyApps.setEnabled(prefCBTransProxy.isChecked() && (!prefcBTransProxyAll.isChecked()));
  }
  return true;
}"
24998,"public void start(boolean force){
  boolean torBinaryExists=new File(TOR_BINARY_INSTALL_PATH).exists();
  Log.i(TAG,""String_Node_Str"" + torBinaryExists);
  boolean privoxyBinaryExists=new File(PRIVOXY_INSTALL_PATH).exists();
  Log.i(TAG,""String_Node_Str"" + privoxyBinaryExists);
  if (!(torBinaryExists && privoxyBinaryExists) || force)   installFromZip();
}","public void start(boolean force){
  boolean torBinaryExists=new File(installPath + TOR_BINARY_ASSET_KEY).exists();
  Log.i(TAG,""String_Node_Str"" + torBinaryExists);
  boolean privoxyBinaryExists=new File(installPath + PRIVOXY_ASSET_KEY).exists();
  Log.i(TAG,""String_Node_Str"" + privoxyBinaryExists);
  if (!(torBinaryExists && privoxyBinaryExists) || force)   installFromZip();
}"
24999,"public TorBinaryInstaller(){
}","public TorBinaryInstaller(String installPath,String apkPath){
  this.installPath=installPath;
  this.apkPath=apkPath;
}"
25000,"private void installFromZip(){
  try {
    String apkPath=APK_PATH;
    int apkIdx=1;
    while (!new File(apkPath).exists()) {
      apkPath=APK_PATH_BASE + '-' + (apkIdx++)+ ""String_Node_Str"";
      Log.i(TAG,""String_Node_Str"" + apkPath);
    }
    ZipFile zip=new ZipFile(apkPath);
    ZipEntry zipen=zip.getEntry(TOR_BINARY_ZIP_KEY);
    streamToFile(zip.getInputStream(zipen),TOR_BINARY_INSTALL_PATH);
    zipen=zip.getEntry(TORRC_ZIP_KEY);
    streamToFile(zip.getInputStream(zipen),TORRC_INSTALL_PATH);
    zipen=zip.getEntry(PRIVOXY_ZIP_KEY);
    streamToFile(zip.getInputStream(zipen),PRIVOXY_INSTALL_PATH);
    zipen=zip.getEntry(PRIVOXYCONFIG_ZIP_KEY);
    streamToFile(zip.getInputStream(zipen),PRIVOXYCONFIG_INSTALL_PATH);
    zip.close();
    Log.i(TAG,""String_Node_Str"");
  }
 catch (  IOException ioe) {
    Log.i(TAG,""String_Node_Str"",ioe);
  }
}","private void installFromZip(){
  try {
    ZipFile zip=new ZipFile(apkPath);
    ZipEntry zipen=zip.getEntry(TOR_BINARY_ZIP_KEY);
    streamToFile(zip.getInputStream(zipen),installPath + TOR_BINARY_ASSET_KEY);
    zipen=zip.getEntry(TORRC_ZIP_KEY);
    streamToFile(zip.getInputStream(zipen),installPath + TORRC_ASSET_KEY);
    zipen=zip.getEntry(PRIVOXY_ZIP_KEY);
    streamToFile(zip.getInputStream(zipen),installPath + PRIVOXY_ASSET_KEY);
    zipen=zip.getEntry(PRIVOXYCONFIG_ZIP_KEY);
    streamToFile(zip.getInputStream(zipen),installPath + PRIVOXYCONFIG_ASSET_KEY);
    zip.close();
    Log.i(TAG,""String_Node_Str"");
  }
 catch (  IOException ioe) {
    Log.i(TAG,""String_Node_Str"",ioe);
  }
}"
